                }
            }

            // check if the primary user is the match
            TestUser user = AuthenticationTransport.PrimaryUser;
            if (gamertag.ToLower() == user.Gamertag.ToLower())
                return user;

            // check for a match among the primary user's friends
            for (int i = 0; i < user.Friends.Count; i++)
            {
                if (gamertag.ToLower() == user.Friends[i].Gamertag.ToLower())
                    return user.Friends[i];
            }

            Assert.Fail("Couldn't find a TestUser match for gamertag [{0}]", gamertag);
            return null;
        }

        public LeaderboardResult GetLeaderboardForBestScore(TestGame tg, string locale)
        {
            LeaderboardResult result = this.GetLeaderboardXml(tg.GameId, tg.Variant, "BestScore", 1, "W1", 100, locale, tg.PlatformId);
            return result;
        }

        public LeaderboardResult GetLeaderboardForBestScore(TestGame tg, string locale, uint rankStart, uint rows)
        {
            LeaderboardResult result = this.GetLeaderboardXml(tg.GameId, tg.Variant, "BestScore",rankStart, "W1", rows, locale, tg.PlatformId);
            return result;
        }

        public LeaderboardResult GetLeaderboardForBestTime(TestGame tg, string locale)
        {
            LeaderboardResult result = this.GetLeaderboardXml(tg.GameId, tg.Variant, "BestTime", 1, "W1", 100, locale, tg.PlatformId);
            return result;
        }

        public LeaderboardResult GetLeaderboardForWins(TestGame tg, string locale)
        {
            LeaderboardResult result = this.GetLeaderboardXml(tg.GameId, tg.Variant, "Wins", 1, "W1", 100, locale, tg.PlatformId);
            return result;
        }

        public LeaderboardResult GetLeaderboardForWins(TestGame tg, string locale, uint rankStart, uint rows)
        {
            LeaderboardResult result = this.GetLeaderboardXml(tg.GameId, tg.Variant, "Wins", rankStart, "W1", rows, locale, tg.PlatformId);
            return result;
        }


        #region Statistics helpers

        public string FindLeaderboardEntry(LeaderboardItem item, string statEntry)
        {
            string result = (from i in item.Statistics
                             where i.Name.ToLower() == statEntry.ToLower()
                             select i.Value).First();
            return result;
        }

        /// <summary>
        /// Gets the result in the leaderboard for the current user
        /// </summary>
        /// <param name="result"></param>
        /// <param name="statEntry"></param>
        /// <returns></returns>
        public string CheckLeaderboardResult(LeaderboardResult result, string statEntry)
        {
            // Make sure we have a valid result
            CheckForValidLeaderboardResult(result);

            IList<Entry> entryList = null;
            if (result.TotalNumberOfRows == 1) // if there's only one user in the leaderboard, we're done - needed for new users where the gamertag is returned as '?????'. Can fail if the new user has friends in the leaderboard.
            {
                entryList = result.Leaderboard[0].Statistics;
            }
            else // find the cuurrent user in the leaderboard
            {
                string gamertag = AuthenticationCache.GetGamertag(this.metroidTransport.CurrentStsTicket);
                uint rank = (from t in result.Leaderboard
                        where t.User.GamerTag.Equals(gamertag, StringComparison.OrdinalIgnoreCase)
                        select t.Rank).First();
                int position = (int)rank - 1;
                entryList = result.Leaderboard[position].Statistics;
            }

            IEnumerable<Entry> entries = (from e in entryList
                                          where e.Name == statEntry
                                          select e);
            int numEntries = entries.Count<Entry>();

            switch (numEntries)
            {
                case 0:
                    return null;
                case 1:
                    // This should be the normal case, so just return the value
                    return entries.First<Entry>().Value;
                default:
                    Assert.Fail(String.Format("More than one entry found for {0}", statEntry));
                    break;
            }

            return null;
        }

        /// <summary>
        /// Checks the provided LeaderboardResult to see if it's valid, and then returns the property value requested
        /// </summary>
        /// <param name="result">the LeaderboardResult to check</param>
        /// <param name="type">the type of the property to get the value for</param>
        /// <returns>the value of the property requested from the LeaderboardResult</returns>
        public string CheckLeaderboardResult(LeaderboardResult result, LeaderboardPropertyType type)
        {
            // Make sure we have a valid result
            CheckForValidLeaderboardResult(result);

            switch (type)
            {
                case LeaderboardPropertyType.BestScore:
                    return CheckLeaderboardResult(result, "BestScore");
                case LeaderboardPropertyType.BestTime:
                    return CheckLeaderboardResult(result, "BestTime");
                case LeaderboardPropertyType.CumulativeScore:
                    return CheckLeaderboardResult(result, "CumulativeScore");
                case LeaderboardPropertyType.CumulativeTime:
                    return CheckLeaderboardResult(result, "CumulativeTime");
                case LeaderboardPropertyType.GamesPlayed:
                    return CheckLeaderboardResult(result, "GamesPlayed");
                case LeaderboardPropertyType.Wins:
                    return CheckLeaderboardResult(result, "Wins");
                case LeaderboardPropertyType.Losses:
                    return CheckLeaderboardResult(result, "Losses");
                case LeaderboardPropertyType.LastPlayedDateTime:
                    return CheckLeaderboardResult(result, "LastPlayedDateTime");
                case LeaderboardPropertyType.BestScoreDataBlobId:
                    return CheckLeaderboardResult(result, "BestScoreDataBlobId");
                case LeaderboardPropertyType.BestTimeDataBlobId:
                    return CheckLeaderboardResult(result, "BestTimeDataBlobId");
                case LeaderboardPropertyType.AverageScore:
                    return CheckLeaderboardResult(result, "AverageScore");
                case LeaderboardPropertyType.AverageTime:
                    return CheckLeaderboardResult(result, "AverageTime");
            }

            throw new Exception(String.Format("Invalid property type provided: {0}", type.ToString()));
        }

        /// <summary>
        /// Checks the provided LeaderboardResult to make sure that it's not empty, valid stats were returned, etc.
        /// </summary>
        /// <param name="result">the LeaderboardResult to check</param>
        private void CheckForValidLeaderboardResult(LeaderboardResult result)
        {
            Assert.IsNotNull(result, "No result was returned");
            Assert.IsNotNull(result.Leaderboard, "No statistics were returned");
            Assert.AreNotEqual(0, result.Leaderboard.Count, "Leaderboard is empty");
        }

        /// <summary>
        /// Searches the given LeaderboardResult for the LeaderboardItem belonging to the specified gamertag and returns it
        /// </summary>
        /// <param name="result">the LeaderboardResult to check</param>
        /// <param name="gamertag">the gamertag we want</param>
        /// <returns>the LeaderboardItem belonging to the user with the given gamertag</returns>
        public LeaderboardItem GetLeaderboardItemForGamertag(LeaderboardResult result, string gamertag)
        {
            // Go through each item until we find the one with the matching gamertag
            foreach (LeaderboardItem item in result.Leaderboard)
            {
                if (item.User.GamerTag.ToLower().Equals(gamertag.ToLower()))
                {
                    return item;
                }
            }

            // Otherwise, return null if we didn't find the user
            return null;
        }

        #endregion Statistics helpers

        #endregion GetLeaderboard helpers
        #region GrantAchievements helpers

        /// <summary>
        /// Returns an AchievementsResult which only contains already earned achievements
        /// </summary>
        /// <param name="gameId"></param>
        /// <param name="locale"></param>
        /// <param name="platformId"></param>
        /// <returns></returns>
        public AchievementsResult GetEarnedAchievements(uint gameId, string locale, uint platformId)
        {
            AchievementsResult result = this.GetAchievementsXml(gameId, locale, platformId);
            AchievementsResult earnedAchievements = new AchievementsResult();

            earnedAchievements.Achievements = result.Achievements.Where(t => t.IsEarned).ToList();
            return earnedAchievements;
        }

        /// <summary>
        /// Uses the transport class to call the GrantAchievements API with the provided values. 
        /// </summary>
        /// <param name="grantAchievements">The achievements to be granted</param>
        /// <param name="locale">Locale</param>
        /// <param name="platformId">Platform ID</param>
        public Response GrantAchievements(GrantAchievements grantAchievements, string locale, uint platformId)
        {
            string grantAchString = MetroidTestUtil.GetGrantAchievementsString(grantAchievements);
            return this.GrantAchievements(grantAchString, locale, platformId.ToString());
        }

        /// <summary>
        /// Uses the transport class to call the GrantAchievements API with the provided values. 
        /// </summary>
        /// <param name="grantAchievements">The achievements to be granted</param>
        /// <param name="locale">Locale</param>
        /// <param name="platformId">Platform ID</param>
        public Response GrantAchievements(string grantAchievementsString, string locale, uint platformId)
        {
            return this.GrantAchievements(grantAchievementsString, locale, platformId.ToString());
        }

        /// <summary>
        /// Returns a boolean value based on whether there was an achievement in the game with the specified achievementId
        /// </summary>
        /// <param name="achievementID"></param>
        /// <param name="gameId"></param>
        /// <param name="locale"></param>
        /// <param name="platformId"></param>
        /// <returns></returns>
        public bool CheckAchievementForGame(string achievementID, uint gameId, string locale, uint platformId)
        {
            bool hasAchievement = false;
            AchievementsResult results = this.GetAchievementsXml(gameId, locale, platformId);

            if ((results.Achievements.Count == 0) || (results == null))
                return hasAchievement;

            foreach (Achievement achievement in results.Achievements)
            {
                if (achievement.Key == achievementID)
                    if (achievement.IsEarned)
                    {
                        hasAchievement = true;
                        return hasAchievement;
                    }
            }
            return hasAchievement;
        }

        /// <summary>
        /// Get the Gamerscore value for an achievement
        /// </summary>
        /// <returns>Returns the Gamerscore, or -1 if it was not found</returns>
        public int GetGamerscoreForAchievement(string achievementID, uint gameId, string locale, uint platformId)
        {
            int achvGamerscore = -1;

            AchievementsResult results = GetAchievementsXml(gameId, locale, platformId);
            achvGamerscore = (from achievement in results.Achievements
                              where achievement.Key == achievementID
                              select achievement.Gamerscore).First();

            return achvGamerscore;
        }

        /// <summary>
        /// Get the TotalPossibleGamerscore value for a game
        /// </summary>
        /// <returns>Returns the TotalPossibleGamerscore</returns>
        public uint GetTotalPossibleGamerscoreForGame(TestGame testGame, string locale)
        {
            int achvGamerscore = 0;

            AchievementsResult results = GetAchievementsXml(testGame.GameId, locale, testGame.PlatformId);
            achvGamerscore = (from achievement in results.Achievements
                              select achievement.Gamerscore).Sum();

            return (uint)achvGamerscore;
        }

        /// <summary>
        /// Get the number TotalPossibleAchievements for an game
        /// </summary>
        /// <returns>Returns the TotalPossibleAchievements, or -1 if none were found</returns>
        public int GetTotalPossibleAchievementsForGame(TestGame testGame, string locale)
        {
            int achievementsPossible = -1;

            AchievementsResult results = GetAchievementsXml(testGame.GameId, locale, testGame.PlatformId);
            achievementsPossible = (from achievement in results.Achievements
                                    select achievement.Gamerscore).Count();

            return achievementsPossible;
        }

        /// <summary>
        /// Grants an achievement and returns the gamerscore for that achievement, or -1 if something fails
        /// </summary>
        /// <param name="testGame">The game to grant an achievement for</param>
        /// <returns>The gamerscore value of the granted achievement</returns>
        public int GrantAchievement_ReturnGamerscore(TestGame testGame, string locale)
        {
            string appID = Guid.NewGuid().ToString();
            GrantAchievements grantAchievements = this.CreateAchievements_SingleUnearned(testGame.GameId, appID, locale, testGame.PlatformId);
            string achievementID = grantAchievements.Achievements[0].Key;

            Response ret = this.GrantAchievements(grantAchievements, locale, testGame.PlatformId);
            if (ret.StatusCode != HttpStatusCode.OK)
                return -1;

            return this.GetGamerscoreForAchievement(achievementID, testGame.GameId, locale, testGame.PlatformId);
        }

        /// <summary>
        /// Create an achievement to be added to an achievement list.
        /// </summary>
        /// <param name="key">achievement ID</param>
        /// <param name="earnedDateTime">DateTime the achievement was earned</param>
        /// <param name="earnedOnline">True if the player was online when the achievement was earned, false otherwise</param>
        /// <returns></returns>
        public AchievementEarned CreateAchievement(string key, DateTime earnedDateTime, bool earnedOnline)
        {
            AchievementEarned achievementEarned = new AchievementEarned();
            achievementEarned.Key = key;
            achievementEarned.EarnedDateTime = earnedDateTime;
            achievementEarned.EarnedOnline = earnedOnline;
            return achievementEarned;
        }

        /// <summary>
        /// Create a GrantAchievements object for a given game with a malfomed achievement
        /// </summary>
        /// <param name="missingParam">The param to leave off ("gameId", "appId", "achievementId", "earnedDateTime", "earnedOnline")</param>
        /// <param name="gameID">The gameID of the game</param>
        /// <returns></returns>
        public GrantAchievements CreateAchievements_MalformedAchievement(string missingParam, uint gameID)
        {
            GrantAchievements grantAchievements = new GrantAchievements();
            grantAchievements.Achievements = new List<AchievementEarned>();
            AchievementEarned achievementEarned = new AchievementEarned();

            if (missingParam.ToLower() != "gameid") { grantAchievements.GameId = gameID; }
            if (missingParam.ToLower() != "appid") { grantAchievements.AppId = Guid.NewGuid().ToString(); }
            if (missingParam.ToLower() != "achievementid") { achievementEarned.Key = "1"; }
            if (missingParam.ToLower() != "earneddatetime") { achievementEarned.EarnedDateTime = DateTime.Now; }
            if (missingParam.ToLower() != "earnedonline") { achievementEarned.EarnedOnline = true; }

            grantAchievements.Achievements.Add(achievementEarned);

            return grantAchievements;
        }

        /// <summary>
        /// Create a GrantAchievements object for a given game and app with an achievement with a specified dateTime and earnedOnline status
        /// </summary>
        public GrantAchievements CreateAchievements(uint gameID, string appID, DateTime dateTime, bool earnedOnline, string locale, uint platformId)
        {
            string achievementID = string.Empty;

            //Pick an achievement that hasn't been earned yet
            AchievementsResult results = this.GetAchievementsXml(gameID, locale, platformId);

            try
            {
                achievementID = (from achievement in results.Achievements
                                 where achievement.IsEarned == false
                                 select achievement.Key).First();
            }
            catch (System.InvalidOperationException)
            {
                // no unearned achievements available
                return null;
            }


            GrantAchievements grantAchievements = new GrantAchievements();
            grantAchievements.GameId = gameID;
            grantAchievements.AppId = appID;
            grantAchievements.Achievements = new List<AchievementEarned>();

            grantAchievements.Achievements.Add(CreateAchievement(achievementID, dateTime, earnedOnline));

            return grantAchievements;
        }

        /// <summary>
        /// Validates that all properties returned in an achievement are not null or empty and all Uri's are well formed
        /// </summary>
        /// <param name="achievement"></param>
        public static void VerifyAchievementProperties(Achievement achievement, bool verifyAllProperties)
        {
            if (verifyAllProperties)
            {
                Assert.IsFalse(String.IsNullOrEmpty(achievement.GameId.ToString()), "GameId was empty");
                Assert.IsFalse(String.IsNullOrEmpty(achievement.GameName), "GameName was empty");
                Assert.IsFalse(String.IsNullOrEmpty(achievement.DisplayBeforeEarned.ToString()), "DisplayBeforeEarned not returned for this achievement");
                Assert.IsNull(Uri.IsWellFormedUriString(achievement.PictureUrl, UriKind.Absolute), "Achievement picture URL was not well formed");
                Assert.IsFalse(String.IsNullOrEmpty(achievement.EarnedDateTime.ToShortDateString()), "EarnedDateTime not returned for this achievement");
            }

            Assert.IsFalse(String.IsNullOrEmpty(achievement.Description), "No description returned for this achievement");
            Assert.IsFalse(String.IsNullOrEmpty(achievement.EarnedOnline.ToString()), "EarnedOnline not returned for this achievement");
            Assert.IsFalse(String.IsNullOrEmpty(achievement.Gamerscore.ToString()), "Gamerscore was empty");
            Assert.IsFalse(String.IsNullOrEmpty(achievement.HowToEarn.ToString()), "HowToEarn was empty");
            Assert.IsFalse(String.IsNullOrEmpty(achievement.IsEarned.ToString()), "IsEarned value was empty");
            Assert.IsFalse(String.IsNullOrEmpty(achievement.Key), "Achievement key was not found");
            Assert.IsFalse(String.IsNullOrEmpty(achievement.Name), "Achievement name was empty");

        }

        /// <summary>
        /// Returns the first achievement of a game as a GrantAchievements object
        /// </summary>
        /// <param name="gameID"></param>
        /// <param name="appID"></param>
        /// <param name="dateTime"></param>
        /// <param name="earnedOnline"></param>
        /// <param name="locale"></param>
        /// <param name="platformId"></param>
        /// <returns></returns>
        public GrantAchievements GetFirstAchievement(uint gameID, string appID, DateTime dateTime, bool earnedOnline, string locale, uint platformId)
        {
            string achievementID = string.Empty;

            AchievementsResult results = this.GetAchievementsXml(gameID, locale, platformId);
            achievementID = results.Achievements[0].Key;

            GrantAchievements grantAchievements = new GrantAchievements();
            grantAchievements.GameId = gameID;
            grantAchievements.AppId = appID;
            grantAchievements.Achievements = new List<AchievementEarned>();

            grantAchievements.Achievements.Add(CreateAchievement(achievementID, dateTime, earnedOnline));

            return grantAchievements;
        }

        /// <summary>
        /// Creates an achievement list with one achievement with the given achievement ID
        /// </summary>
        /// <param name="achievementID">achievement ID</param>
        /// <param name="gameID">The unique game ID</param>
        /// <param name="appID">The app ID of the game</param>
        /// <returns></returns>
        public GrantAchievements CreateAchievements_SingleAchievement(string achievementID, uint gameID, string appID)
        {
            GrantAchievements grantAchievements = new GrantAchievements();
            grantAchievements.GameId = gameID;
            grantAchievements.AppId = appID;
            grantAchievements.Achievements = new List<AchievementEarned>();

            //Add an achievement to the list of achievements
            grantAchievements.Achievements.Add(CreateAchievement(achievementID, DateTime.Now, true));

            return grantAchievements;
        }

        /// <summary>
        /// Creates an achievement list with one achievement that has not been earned yet
        /// </summary>
        /// <param name="gameID">The unique game ID</param>
        /// <param name="appID">The app ID of the game</param>
        /// <returns></returns>
        public GrantAchievements CreateAchievements_SingleUnearned(uint gameID, string appID, string locale, uint platformId)
        {
            return CreateAchievements(gameID, appID, DateTime.Now, true, locale, platformId);
        }

        /// <summary>
        /// Creates an achievement list with one achievement with the given dateTime earned
        /// </summary>
        /// <param name="gameID">The unique game ID</param>
        /// <param name="appID">The app ID of the game</param>
        /// <param name="dateTime">DateTime the achievement was earned</param>
        /// <returns></returns>
        public GrantAchievements CreateAchievements_SingleUnearned(uint gameID, string appID, DateTime dateTime, string locale, uint platformId)
        {
            return CreateAchievements(gameID, appID, dateTime, true, locale, platformId);
        }

        /// <summary>
        /// Creates an achievement list with one achievement with player online/offline status
        /// </summary>
        /// <param name="gameID">The unique game ID</param>
        /// <param name="appID">The app ID of the game</param>
        /// <param name="playerOnline">True if the player was online when the achievement was earned, false otherwise</param>
        /// <returns></returns>
        public GrantAchievements CreateAchievements_SingleUnearned(uint gameID, string appID, bool playerOnline, string locale, uint platformId)
        {
            return CreateAchievements(gameID, appID, DateTime.Now, playerOnline, locale, platformId);
        }

        /// <summary>
        /// Creates a single achievement list with one online achievement for a game
        /// </summary>
        /// <param name="tg"></param>
        /// <param name="appID"></param>
        /// <param name="locale"></param>
        /// <returns></returns>
        public GrantAchievements CreateAchievements_SingleUnearned(TestGame tg, string appID, string locale)
        {
            return CreateAchievements(tg.GameId, appID, DateTime.Now, true, locale, tg.PlatformId);
        }

        /// <summary>
        /// Creates an achievement list with multiple unearned achievements
        /// </summary>
        /// <param name="count">The number of achievements to create</param>
        /// <param name="gameID">The unique game ID</param>
        /// <param name="appID">The app ID of the game</param>
        /// <returns></returns>
        public GrantAchievements CreateAchievements_MultipleUnearned(int count, uint gameID, string appID, string locale, uint platformId)
        {
            List<string> achievementIDs = new List<string>();

            //Pick an achievement that hasn't been earned yet
            AchievementsResult results = this.GetAchievementsXml(gameID, locale, platformId);
            foreach (Achievement achievement in results.Achievements)
            {
                if (!achievement.IsEarned)
                {
                    achievementIDs.Add(achievement.Key);
                }
            }

            //Return null if not enough achievements were found
            if (achievementIDs.Count < count)
            {
                return null;
            }

            GrantAchievements grantAchievements = new GrantAchievements();
            grantAchievements.GameId = gameID;
            grantAchievements.AppId = appID;
            grantAchievements.Achievements = new List<AchievementEarned>();

            //Add an achievement to the list of achievements
            for (int i = 0; i < count; i++)
            {
                grantAchievements.Achievements.Add(CreateAchievement(achievementIDs[i], DateTime.Now, true));
            }

            return grantAchievements;
        }

        /// <summary>
        /// Creates an achievement list with multiple achievements with the given achievement IDs
        /// </summary>
        /// <param name="achievementIDs">List of achievement IDs</param>
        /// <param name="gameID">The unique game ID</param>
        /// <param name="appID">The app ID of the game</param>
        /// <returns></returns>
        public GrantAchievements CreateAchievements_MultipleAchievements(List<string> achievementIDs, uint gameID, string appID)
        {
            GrantAchievements grantAchievements = new GrantAchievements();
            grantAchievements.GameId = gameID;
            grantAchievements.AppId = appID;
            grantAchievements.Achievements = new List<AchievementEarned>();

            //Add an achievement to the list of achievements
            foreach (string achievementID in achievementIDs)
            {
                grantAchievements.Achievements.Add(CreateAchievement(achievementID, DateTime.Now, true));
            }

            return grantAchievements;
        }

        /// <summary>
        /// Creates the number of achievements specified(if available), grants them to the current user
        /// and verifies that the user's RecentAchievements list has been updated 
        /// </summary>
        /// <param name="numberofAchievements"></param>
        /// <param name="tg"></param>
        /// <param name="locale"></param>
        /// <param name="appId"></param>
        //public void CreateAchievementsGrantAndVerifyInProfile(int numberofAchievements, TestGame tg, string locale, string appId)
        //{
        //    List<Achievement> granted = new List<Achievement>();
        //    List<string> achIds = new List<string>();
        //    DateTime dt = DateTime.UtcNow;
        //    int gamerscore = 0;

        //    AchievementsResult result = this.GetAchievementsXml(tg.GameId, locale, tg.PlatformId);
        //    if (result.Achievements.Count < numberofAchievements)
        //    {
        //        Assert.Inconclusive("Game doesnt have enough achievements");
        //    }

        //    for (int i = 0; i < numberofAchievements; i++)
        //    {
        //        granted.Add(result.Achievements[i]);
        //        achIds.Add(result.Achievements[i].Key);
        //        gamerscore += result.Achievements[i].Gamerscore;
        //    }

        //    GrantAchievements gr = this.CreateAchievements_MultipleAchievements(achIds, tg.GameId, appId);
        //    this.GrantAchievements(gr, locale, tg.PlatformId);
        //    Thread.Sleep(10000);
        //    Profile pro = this.GetProfileMyView(locale, PlatformType.Mobile, Constants.AllProfileSections);

        //    Assert.AreEqual<int>(1, pro.RecentAchievements.Count);
        //    Assert.AreEqual<uint>(tg.GameId, pro.RecentAchievements[0].GameId);
        //    Assert.AreEqual<string>(achIds.Last(), pro.RecentAchievements[0].Key);

        //    Assert.AreEqual<int>((int)pro.ProfileProperties[ProfileProperty.GamerScore], gamerscore, "Gamerscore mismatch");
        //    foreach (var achievement in pro.RecentAchievements)
        //    {
        //        Assert.IsTrue(achievement.EarnedDateTime.ToUniversalTime().Subtract(dt).Minutes < 10);
        //        Assert.IsTrue(Uri.IsWellFormedUriString(achievement.PictureUrl, UriKind.Absolute));
        //    }
        //    foreach (var game in pro.RecentGames)
        //    {
        //        Assert.AreEqual<string>(tg.Name, game.Name);
        //        Assert.AreEqual<uint>(tg.GameId, (uint)game.Id);
        //        Assert.IsTrue(Uri.IsWellFormedUriString(game.GameUrl, UriKind.Absolute));
        //        Assert.IsTrue(Uri.IsWellFormedUriString(game.ImageUrl, UriKind.Absolute));
        //    }

        //}

        /// <summary>
        /// Verifies the achievementKey is part of the granted achievements in the AchievementsResult
        /// </summary>
        /// <param name="result"></param>
        /// <param name="achievementKey"></param>
        /// <returns></returns>
        public bool VerifyAchievementGranted(AchievementsResult result, string achievementKey)
        {
            bool achKey = result.Achievements.Exists(a => (a.Key.Equals(achievementKey, StringComparison.OrdinalIgnoreCase) &&
                                                           a.IsEarned.Equals(true)));

            return achKey;
        }

        /// <summary>
        /// Retrieve the Gamerscore for the current user
        /// </summary>
        public int GetGamerscore(string locale, uint platformId)
        {
            Profile profile = this.GetProfileMyView(locale, platformId, SectionFlags.XboxLiveProperties);
            return (int)profile.ProfileProperties[ProfileProperty.GamerScore];
        }

        #endregion GrantAchievements helpers

        public uint GetLIVEnErrorCode(Response response)
        {
            uint errorCode = 0;

            XDocument errorResponse = XDocument.Parse(response.Body);

            string errorCodeString = errorResponse.Descendants().Where(n => n.Name.LocalName == "LIVEnErrorCode").ElementAt(0).Value;
            
            errorCode = Convert.ToUInt32(errorCodeString);

            return errorCode;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Metroid.Test\Utility\MetroidTestUtilityLibrary.cs ===
﻿using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Json;
using System.Text;
using System.Threading;
using System.Xml.Linq;
using Gds.Contracts;
using Microsoft.TestTools;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Metroid.Test
{
    public class MetroidTestUtil
    {
        private static XmlHelper xhelp = new XmlHelper();

        public static string AuthorizationType = "X-Authorization";

        /// <summary>
        /// Asserts that the expected status code is returned in the WebException
        /// </summary>
        /// <param name="we"></param>
        /// <param name="expectedStatusCode"></param>
        public static void VerifyHttpStatusCode(WebException we, HttpStatusCode expectedStatusCode)
        {
            if (!(we.Response == null))
            {
                HttpWebResponse response = we.Response as HttpWebResponse;
                Assert.AreEqual(expectedStatusCode, response.StatusCode, "Status code did not match");
            }
        }

        /// <summary>
        /// Deserializes an xml string to an object of specific type
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="xmlString"></param>
        /// <returns></returns>
        public static T DeserializeLeaderboardResponseToObject<T>(string xmlString)
        {
            DataContractSerializer dcs = new DataContractSerializer(typeof(T));
            MemoryStream memStre = new MemoryStream(Encoding.UTF8.GetBytes(xmlString));
            T result = (T)dcs.ReadObject(memStre);
            memStre.Close();
            return result;
        }

        /// <summary>
        /// Deserializes a Json string to an object of specific type
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="jsonString"></param>
        /// <returns></returns>
        public static T GetObjectFromJson<T>(string jsonString)
        {
            DataContractJsonSerializer dcs = new DataContractJsonSerializer(typeof(T));
            MemoryStream memStre = new MemoryStream(Encoding.UTF8.GetBytes(jsonString));
            T result = (T)dcs.ReadObject(memStre);
            memStre.Close();
            return result;
        }

        /// <summary>
        /// Returns a well formed xml string 
        /// </summary>
        /// <param name="xml"></param>
        /// <returns></returns>
        public static string GetXML(string xml)
        {
            try
            {
                XDocument xdoc = XDocument.Parse(xml);
                return xdoc.ToString();
            }
            catch
            {
                return xml;
            }
        }

        /// <summary>
        /// Get the string for a GrantAchievements object
        /// </summary>
        /// <param name="grantAch"></param>
        /// <returns></returns>
        public static string GetGrantAchievementsString(GrantAchievements grantAch)
        {
            if (grantAch == null)
            {
                return null;
            }
            string achievementString = xhelp.SerializeObjectToXmlString(grantAch);
            achievementString = xhelp.StripXmlDeclaration(achievementString);
            achievementString = achievementString.Replace("xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"", Constants.GdsContractsNamespaceUri);
            achievementString = achievementString.Replace("xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"", Constants.DefaultXmlNamespace);
            achievementString = achievementString.Replace("<AchievementEarned>", "<AchievementEarned xmlns=\"\">");//BUGBUG: Shouldnt add empty namespace attributes
            achievementString = achievementString.Replace("\r\n  ", "");
            achievementString = achievementString.Replace("\r\n", "");
            achievementString = achievementString.Replace("\0", "");
            Trace.TraceInformation("GrantAchievements body");
            Trace.WriteLine(MetroidTestUtil.GetXML(achievementString));

            return achievementString;
        }

        /// <summary>
        /// Get the string for a GameResult object
        /// </summary>
        /// <param name="gameResult"></param>
        /// <returns></returns>
        public static string GetPostGameResultString(GameResult gameResult)
        {
            if (gameResult == null)
            {
                return null;
            }
            string gameResultString = xhelp.SerializeObjectToXmlString(gameResult);

            Trace.TraceInformation("GameResult body");
            Trace.WriteLine(MetroidTestUtil.GetXML(gameResultString));
            return gameResultString;
        }

        /// <summary>
        /// Get the string for a Profile object
        /// </summary>
        public static string GetPostProfilePartnerString(ProfileEx profile)
        {
            if (profile == null)
            {
                return null;
            }
            string profileString = xhelp.SerializeObjectToXmlString(profile);

            Trace.TraceInformation("Profile body");
            Trace.WriteLine(MetroidTestUtil.GetXML(profileString));
            return profileString;
        }

        /// <summary>
        /// Get the string for a Presence object
        /// </summary>
        public static string GetPostPresenceString(Presence presence)
        {
            if (presence == null)
            {
                return null;
            }
            string presenceString = xhelp.SerializeObjectToXmlString(presence);

            Trace.TraceInformation("Presence body");
            Trace.WriteLine(MetroidTestUtil.GetXML(presenceString));
            return presenceString;
        }

        /// <summary>
        /// Convert a hex string into a decimal uint
        /// </summary>
        /// <param name="hexString">A hex number in string form, like "0x0F56D109"</param>
        /// <returns></returns>
        public static uint ConvertHexStringToDecimalUint(string hexString)
        {
            hexString = hexString.Substring(2); // remove the "0x"
            return uint.Parse(hexString, System.Globalization.NumberStyles.AllowHexSpecifier);
        }

        /// <summary>
        /// Returns a string representation of the value of long.MaxValue + 1
        /// </summary>
        public static string GetMaxLongPlusOne()
        {
            char[] value = (long.MaxValue).ToString().ToCharArray();
            if (value[value.Length - 1] != '9')
            {
                value[value.Length - 1]++;
            }
            else
            {
                Assert.Fail("Fix this"); //This should never happen, so I'm going to be lazy and not deal with it properly
            }
            return new string(value);
        }

        #region WebRequestHelpers
        /// <summary>
        /// Execute a HttpWebRequest with the provided request parameters with Json content type
        /// </summary>
        /// <param name="method"></param>
        /// <param name="requestBody"></param>
        /// <param name="fullUri"></param>
        /// <param name="locale"></param>
        /// <param name="platformType"></param>
        /// <param name="stsToken"></param>
        /// <returns></returns>
        public static Response ExecuteHttpWebRequestJson(string method, string requestBody, string fullUri, string locale, string platformType, string stsToken)
        {
            return ExecuteHttpWebRequest(method, @"application/json", requestBody, fullUri, locale, platformType, stsToken);
        }

        /// <summary>
        /// Execute a HttpWebRequest with the provided request parameters with xml content type
        /// </summary>
        /// <param name="method"></param>
        /// <param name="requestBody"></param>
        /// <param name="fullUri"></param>
        /// <param name="locale"></param>
        /// <param name="platformType"></param>
        /// <param name="stsToken"></param>
        /// <returns></returns>
        public static Response ExecuteHttpWebRequestXml(string method, string requestBody, string fullUri, string locale, string platformType, string stsToken)
        {
            return ExecuteHttpWebRequest(method, @"application/xml", requestBody, fullUri, locale, platformType, stsToken);
        }

        /// <summary>
        /// Execute a HttpWebRequest with the provided request parameters
        /// </summary>
        /// <param name="webRequest"></param>
        /// <param name="postData"></param>
        /// <returns></returns>
        public static Response ExecuteHttpWebRequest(string method, string contentType, string requestBody, string fullUri, string locale, string platformType, string stsToken)
        {
            HttpWebRequest request = HttpWebRequest.Create(fullUri) as HttpWebRequest;
            request.Method = method;
            request.Headers = AddHeaders(locale, platformType, stsToken);
            request.ContentType = contentType;
            LogHttpRequest(request);
            if (!String.IsNullOrEmpty(requestBody))
            {
                using (Stream stream = request.GetRequestStream())
                {
                    using (StreamWriter writer = new StreamWriter(stream))
                    {
                        writer.Write(requestBody);
                    }
                }
            }
            else
            {
                request.ContentLength = 0;
            }

            Response resp = new Response();
            HttpWebResponse response = null;
            try
            {
                response = request.GetResponse() as HttpWebResponse;
                resp = CreateResponse(response, ref resp);
                LogResponse(resp);
            }
            catch (WebException we)
            {
                response = we.Response as HttpWebResponse;
                resp.Error = we.ToString();
                resp = CreateResponse(response, ref resp);
                Trace.TraceError("Error occurred executing the request: {0}", we.Message);
                LogResponse(resp);
            }
            finally
            {
                if (response != null)
                {
                    response.Close();
                }
            }

            return resp;
        }

        /// <summary>
        /// Execute a POST call with content type application/xml for the given Uri
        /// </summary>
        /// <param name="requestBody"></param>
        /// <param name="fullUri"></param>
        /// <param name="locale"></param>
        /// <param name="platformType"></param>
        /// <param name="stsToken"></param>
        /// <returns></returns>
        public static Response ExecutePOSTCallXml(string requestBody, string fullUri, string locale, string platformType, string stsToken)
        {
            return ExecuteHttpWebRequestXml("POST", requestBody, fullUri, locale, platformType, stsToken);
        }

        /// <summary>
        /// /// Execute a GET call with content type application/xml for the given Uri
        /// </summary>
        /// <param name="requestBody"></param>
        /// <param name="fullUri"></param>
        /// <param name="locale"></param>
        /// <param name="platformType"></param>
        /// <param name="stsToken"></param>
        /// <returns></returns>
        public static Response ExecuteGETCallXml(string requestBody, string fullUri, string locale, string platformType, string stsToken)
        {
            return ExecuteHttpWebRequestXml("GET", requestBody, fullUri, locale, platformType, stsToken);
        }

        /// <summary>
        /// Execute a DELETE call with the content type application/xml for the given Uri
        /// </summary>
        /// <param name="requestBody"></param>
        /// <param name="fullUri"></param>
        /// <param name="locale"></param>
        /// <param name="platformType"></param>
        /// <param name="stsToken"></param>
        /// <returns></returns>
        public static Response ExecuteDELETECallXml(string requestBody, string fullUri, string locale, string platformType, string stsToken)
        {
            return ExecuteHttpWebRequestXml("DELETE", requestBody, fullUri, locale,platformType,stsToken );
        }

        /// <summary>
        /// Execute a POST call with content type application/json for the given Uri
        /// </summary>
        public static Response ExecutePOSTCallJson(string requestBody, string fullUri, string locale, string platformType, string stsToken)
        {
            return ExecuteHttpWebRequestJson("POST", requestBody, fullUri, locale, platformType, stsToken);
        }

        /// <summary>
        /// /// Execute a GET call with content type application/json for the given Uri
        /// </summary>
        /// <returns></returns>
        public static Response ExecuteGETCallJson(string fullUri, string locale, string platformType, string stsToken)
        {
            return ExecuteHttpWebRequestJson("GET", null, fullUri, locale, platformType, stsToken);
        }

        /// <summary>
        /// Trace a HttpWebRequest
        /// </summary>
        /// <param name="request"></param>
        public static void LogHttpRequest(HttpWebRequest request)
        {
            if (request != null)
            {
                Trace.TraceInformation(request.Method);
                Trace.TraceInformation(request.RequestUri.PathAndQuery);
            }
        }

        /// <summary>
        /// Trace a HttpWebResponse
        /// </summary>
        /// <param name="response"></param>
        public static void LogResponse(Response response)
        {
            if (response != null)
            {
                Trace.TraceInformation(response.Server);
                Trace.TraceInformation(response.ResponseUri.PathAndQuery);
                Trace.TraceInformation("StatusCode: {0}", ((int)response.StatusCode));
                Trace.TraceInformation("Response body: {0}", GetXML(response.Body));
            }

        }

        /// <summary>
        /// Wait for cached values to update.  Work around for livecache.
        /// </summary>
        /// <param name="seconds">time in seconds to wait</param>
        public static void Wait(int seconds)
        {
            Thread.Sleep(1000 * seconds);
        }

        private static WebHeaderCollection AddHeaders(string locale, string platformType, string stsToken)
        {
            WebHeaderCollection headers = new WebHeaderCollection();
            if (!string.IsNullOrEmpty(locale)) { headers.Add("X-Locale", locale); }
            if (!string.IsNullOrEmpty(platformType)) { headers.Add("X-Platform-Type", platformType); }
            if (!string.IsNullOrEmpty(stsToken)) { headers.Add(MetroidTestUtil.AuthorizationType, "XBL1.0 x=" + stsToken); }
            return headers;
        }

        private static void CheckUri(string uriString)
        {
            if (Uri.IsWellFormedUriString(uriString, UriKind.Absolute))
            {
                throw new ArgumentException("Invalid uri was supplied");
            }
        }

        private static Response CreateResponse(HttpWebResponse response, ref Response resp)
        {
            if (response == null)
            {
                throw new ArgumentException("Invalid/null response was received: " + resp.Error);
            }
            resp.StatusCode = response.StatusCode;
            resp.ResponseUri = response.ResponseUri;
            resp.Server = response.Server;
            resp.StatusDescription = response.StatusDescription;
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                resp.Body = reader.ReadToEnd();
            }
            return resp;
        }
        #endregion WebRequestHelpers
    }

    public class Response
    {
        public HttpStatusCode StatusCode { get; set; }

        public Uri ResponseUri { get; set; }

        public string Body { get; set; }

        public string Server { get; set; }

        public string StatusDescription { get; set; }

        public string Error { get; set; }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Metroid.Test\Tests\GetLeaderboard.cs ===
﻿using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using Gds.Contracts;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using UserLib;
using Leet.Core.Platforms;
using live.protocol.Presence;

namespace Metroid.Test.Tests
{
    [TestClass]
    public class GetLeaderboard
    {
        private MetroidTransport metroidTransport;
        private MetroidTestScenarioLibrary testScenarios;
        private Random rand;
        private static TestGame testGame = TestGameUtility.GetFirstGameWithAllStats();
        private static TestGame testGameHighTime = TestGameUtility.BestTimeGame;
        private static TestGame testGameLowTime = TestGameUtility.BestTimeGameReverse;
        private static TestGame testGameLowScore = TestGameUtility.BestScoreGameReverse;
        private static List<TestGame> testGames = TestGameUtility.GetAllGamesWithAllStats();
        private static readonly string us_locale = "en-US";
        private static readonly string blob = "I can haz achievements";

        public GetLeaderboard()
        {
            metroidTransport = new MetroidTransport();
            testScenarios = new MetroidTestScenarioLibrary(metroidTransport);
            rand = new Random();
        }

        // This will run before the tests start running - ensure we have a leaderboard with at least one best score and one best time in it
        [ClassInitialize]
        public static void GuaranteeNonEmptyLeaderboard(TestContext testContext)
        {
            MetroidTestScenarioLibrary lib = new MetroidTestScenarioLibrary();
            LeaderboardResult res = lib.GetLeaderboardXml(testGame.GameId, testGame.Variant, "BestScore", 1, "W1", 100, us_locale, testGame.PlatformId);
            if (res.TotalNumberOfRows == 0)
            {
                GameResult gr = lib.CreateGameResultWithDefaultStats(testGame, us_locale);
                lib.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            }

            res = lib.GetLeaderboardXml(testGameHighTime.GameId, testGameHighTime.Variant, "BestTime", 1, "W1", 100, us_locale, testGameHighTime.PlatformId);
            if (res.TotalNumberOfRows == 0)
            {
                GameResult gr = lib.CreateGameResultWithDefaultStats(testGameHighTime, us_locale);
                lib.PostGameResult(gr, us_locale, testGameHighTime.PlatformId, testGameHighTime.GameId);
            }
        }

        #region Acceptance
        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        public void LeaderboardDuplicateStatistics()
        {
            LeaderboardResult currentResult = testScenarios.GetLeaderboardForBestScore(testGame, us_locale);

            List<string> statistics = new List<string>();
            foreach (LeaderboardItem lbItem in currentResult.Leaderboard)
            {
                statistics.Clear();
                foreach (Entry statEntry in lbItem.Statistics)
                {
                    if (statistics.Contains(statEntry.Name))
                    {
                        Assert.Fail("Duplicate stat property found");
                    }
                    else
                    {
                        statistics.Add(statEntry.Name);
                    }
                }
            }
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify that a user who hasn't played a game has no statistics on the BestScore leaderboard")]
        public void GetLeaderboard_BestScore_NoGamesPlayed()
        {
            //Create a new account
            MetroidTestScenarioLibrary newAccountScenarios = new MetroidTestScenarioLibrary(true);
            //Retrieve statistics
            LeaderboardResult result = newAccountScenarios.GetLeaderboardXml(testGame.GameId, testGame.Variant, "BestScore", 1, "W1", 100, us_locale, testGame.PlatformId);
            Assert.IsNull(result.Leaderboard);
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify that a user who hasn't played a game has no statistics on the BestTime leaderboard")]
        public void GetLeaderboard_BestTime_NoGamesPlayed()
        {
            //Create a new account
            MetroidTestScenarioLibrary newAccountScenarios = new MetroidTestScenarioLibrary(true);
            //Retrieve statistics
            LeaderboardResult result = newAccountScenarios.GetLeaderboardXml(testGameHighTime.GameId, testGameHighTime.Variant, "BestTime", 1, "W1", 100, us_locale, testGameHighTime.PlatformId);
            Assert.IsNull(result.Leaderboard);
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify that a user who hasn't played a game has no statistics on the Wins leaderboard")]
        public void GetLeaderboard_Wins_NoGamesPlayed()
        {
            //Create a new account
            MetroidTestScenarioLibrary newAccountScenarios = new MetroidTestScenarioLibrary(true);
            //Retrieve statistics
            LeaderboardResult result = newAccountScenarios.GetLeaderboardXml(testGame.GameId, testGame.Variant, "Wins", 1, "W1", 100, us_locale, testGame.PlatformId);
            Assert.IsNull(result.Leaderboard);
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        public void GetLeaderboard_BestHighScore()
        {
            string score = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore");

            if (string.IsNullOrEmpty(score))
            {
                //Post a game result and retrieve score once
                GameResult gr = testScenarios.CreateGameResult(testGame, 100, 100, blob, "Win");
                testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
                score = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore");
            }

            long currentHighScore = long.Parse(score);

            LeaderboardResult result = testScenarios.PostHigherScoreAndRetrieveLeaderboard(testGame, us_locale, blob, "Win", 1);
            long newScore = long.Parse(testScenarios.CheckLeaderboardResult(result, LeaderboardPropertyType.BestScore));

            Assert.AreEqual(currentHighScore + 1, newScore, "Scores did not match");
        }


        // Common code for testing that no blob is returned if none is present.  Valid values for dataType are "BestScore" and "BestTime"
        private static void No_Attachment_Test_Base(string dataType)
        {
            Assert.IsTrue((dataType == "BestScore") || (dataType == "BestTime"), "Test Error!  DataType for No_Attachment_Tests must be BestScore or BestTime");

            // Create a new user.
            MetroidTestScenarioLibrary newAccountScenarios = new MetroidTestScenarioLibrary(true);

            // Create a blob that has no attachment blob in it.
            GameResult gameResult = new GameResult()
            {
                GameId = testGame.GameId,
                GameResultId = Guid.NewGuid(),
                TimeStamp = DateTime.Now,
                Score = 100,
                Time = 1,
                Variant = 0
            };

            // Execute a post without this blob.
            newAccountScenarios.PostGameResult(gameResult, us_locale, testGame.PlatformId, testGame.GameId);
            LeaderboardResult result = newAccountScenarios.GetLeaderboardXml(testGame.GameId, testGame.Variant, dataType, 1, "W1", 100, us_locale, testGame.PlatformId);

            // Verify no blob is returned.
            Assert.IsTrue(result.Leaderboard.Count == 1, "Did not receive exactly one result");
            foreach (Entry lbEntry in result.Leaderboard[0].Statistics)
            {
                Assert.IsFalse(lbEntry.Name == dataType + "DataBlobId", "Found a data blob" + dataType + "DataBlobId" + " when one was not expected.");
            }

            // Now create one with a blob, and a score slightly higher than the one before.
            GameResult gr = newAccountScenarios.CreateGameResult(testGame, 101, 100, blob, "Win");
            newAccountScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            result = newAccountScenarios.GetLeaderboardXml(testGame.GameId, testGame.Variant, dataType, 1, "W1", 100, us_locale, testGame.PlatformId);

            // Assert that the blob is returned.
            bool blobFound = false;
            foreach (Entry lbEntry in result.Leaderboard[0].Statistics)
            {
                if (lbEntry.Name == dataType + "DataBlobId")
                {
                    blobFound = true;
                }
            }
            Assert.IsTrue(blobFound, "Could not find a blob when one was expected.");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam", "metroids")]
        [Priority(2)]
        public void GetLeaderboard_BestHighScore_Fresh_User_No_Attachment_Blob()
        {
            No_Attachment_Test_Base("BestScore");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam", "metroids")]
        [Priority(2)]
        public void GetLeaderboard_BestTime_Fresh_User_No_Attachment_Blob()
        {
            No_Attachment_Test_Base("BestTime");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        public void GetLeaderboard_BestLowScore()
        {
            MetroidTestScenarioLibrary lib = new MetroidTestScenarioLibrary(true);
            
            long highScore = 40;

            GameResult gr = lib.CreateGameResult(testGameLowScore, highScore, null, blob, "Win");
            lib.PostGameResult(gr, us_locale, testGameLowScore.PlatformId, testGameLowScore.GameId);

            long score = long.Parse(lib.GetStatValue(testGameLowScore, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));
            Assert.AreEqual<long>(highScore, score);

            long newHighScore = 20;
            GameResult grNew = lib.CreateGameResult(testGameLowScore, newHighScore, null, blob, "Win");
            lib.PostGameResult(grNew, us_locale, testGameLowScore.PlatformId, testGameLowScore.GameId);

            long newScore = long.Parse(lib.GetStatValue(testGameLowScore, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));
            Assert.AreEqual<long>(newHighScore, newScore);
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(1)]
        public void GetLeaderboard_CumulativeScore()
        {
            string score = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore");
            long cumulativeScore = long.Parse(score);

            GameResult gr = testScenarios.CreateGameResult(testGame, 10, null, blob, "Win");
            testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);

            string newScore = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore");
            long newCumulativeScore = long.Parse(newScore);

            Assert.AreEqual(cumulativeScore + 10, newCumulativeScore, "Cumulative scores did not match");

        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        public void GetLeaderboard_BestHighTime()
        {
            string time = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestTime, "BestTime");

            if (string.IsNullOrEmpty(time))
            {
                //Post a game result and retrieve time once
                GameResult gr = testScenarios.CreateGameResult(testGame, 100, 100, blob, "Win");
                testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
                time = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestTime, "BestTime");
            }

            long currentHighTime = long.Parse(time);

            LeaderboardResult result = testScenarios.PostHigherTimeAndRetrieveLeaderboard(testGame, us_locale, blob, "Win", 1);
            long newTime = long.Parse(testScenarios.CheckLeaderboardResult(result, LeaderboardPropertyType.BestTime));

            Assert.AreEqual(currentHighTime + 1, newTime, "Time did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(1)]
        public void GetLeaderboard_BestLowTime()
        {
            MetroidTestScenarioLibrary lib = new MetroidTestScenarioLibrary(true);

            long lowTime = 40;
            
            GameResult gr = lib.CreateGameResult(testGameLowTime, null, lowTime, blob, "Win");
            lib.PostGameResult(gr, us_locale, testGameLowTime.PlatformId, testGameLowTime.GameId);

            long time = long.Parse(lib.GetStatValue(testGameLowTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));
            Assert.AreEqual<long>(lowTime, time);

            long newLowerTime = 20;
            GameResult grNew = lib.CreateGameResult(testGameLowTime, null, newLowerTime, blob, "Win");
            lib.PostGameResult(grNew, us_locale, testGameLowTime.PlatformId, testGameLowTime.GameId);

            long actualTime = long.Parse(lib.GetStatValue(testGameLowTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));
            Assert.AreEqual<long>(newLowerTime, actualTime);

        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        public void GetLeaderboard_CumulativeTime()
        {
            string time = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime");
            long cumulativeTime = long.Parse(time);

            GameResult gr = testScenarios.CreateGameResult(testGame, null, 1, blob, "Win");
            testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);

            string newTime = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime");
            long newCumulativeTime = long.Parse(newTime);

            Assert.AreEqual(cumulativeTime + 1, newCumulativeTime, "Cumulative times did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(1)]
        public void GetLeaderboard_NumberOfGamesPlayed()
        {
            string gamesPlayed = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.GamesPlayed, "BestScore");
            uint gamesNo = uint.Parse(gamesPlayed);

            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 1, null, null);
            testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);

            string newGamesPlayed = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.GamesPlayed, "BestScore");
            uint newGamesCount = uint.Parse(newGamesPlayed);

            Assert.AreEqual(gamesNo + 1, newGamesCount, "Number of games played did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify GamesPlayed is updated when a score of 0 is submitted")]
        public void GetLeaderboard_NoScore_NumberOfGamesPlayed()
        {
            string gamesPlayed = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.GamesPlayed, "BestScore");
            uint gamesNo = uint.Parse(gamesPlayed);

            GameResult gr = testScenarios.CreateGameResult(testGame, 0, 1, null, null);
            testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);

            string newGamesPlayed = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.GamesPlayed, "BestScore");
            uint newGamesCount = uint.Parse(newGamesPlayed);

            Assert.AreEqual(gamesNo + 1, newGamesCount, "Number of games played did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify the average time played from the BestScore leaderboard")]
        public void GetLeaderboard_BestScore_AverageTimePlayed()
        {
            // Post a score to make sure we have a non-trivial time
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 123, null, null);
            testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);

            LeaderboardResult result = testScenarios.GetLeaderboardXml(testGame.GameId, testGame.Variant, "BestScore", 1, "W1", 100, us_locale, testGame.PlatformId);

            long cumulativeTime = long.Parse(testScenarios.CheckLeaderboardResult(result, LeaderboardPropertyType.CumulativeTime));
            long gamesPlayed = long.Parse(testScenarios.CheckLeaderboardResult(result, LeaderboardPropertyType.GamesPlayed));

            long expectedAverageTime = (cumulativeTime / gamesPlayed);
            long actualAverageTime = long.Parse(testScenarios.CheckLeaderboardResult(result, LeaderboardPropertyType.AverageTime));

            Assert.AreEqual(expectedAverageTime, actualAverageTime, "Incorrect average time returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify the average time played from the BestTime leaderboard")]
        public void GetLeaderboard_BestTime_AverageTimePlayed()
        {
            // Post a score to make sure we have a non-trivial time
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 123, null, null);
            testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);

            LeaderboardResult result = testScenarios.GetLeaderboardXml(testGame.GameId, testGame.Variant, "BestTime", 1, "W1", 100, us_locale, testGame.PlatformId);

            long cumulativeTime = long.Parse(testScenarios.CheckLeaderboardResult(result, LeaderboardPropertyType.CumulativeTime));
            long gamesPlayed = long.Parse(testScenarios.CheckLeaderboardResult(result, LeaderboardPropertyType.GamesPlayed));

            long expectedAverageTime = (cumulativeTime / gamesPlayed);
            long actualAverageTime = long.Parse(testScenarios.CheckLeaderboardResult(result, LeaderboardPropertyType.AverageTime));

            Assert.AreEqual(expectedAverageTime, actualAverageTime, "Incorrect average time returned");
        }


        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify the average score from the BestScore leaderboard")]
        public void GetLeaderboard_AverageScore()
        {
            // Post a score to make sure we have a non-trivial score
            GameResult gr = testScenarios.CreateGameResult(testGame, 123, 1, null, null);
            testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);

            LeaderboardResult result = testScenarios.GetLeaderboardXml(testGame.GameId, testGame.Variant, "BestScore", 1, "W1", 100, us_locale, testGame.PlatformId);

            long cumulativeScore = long.Parse(testScenarios.CheckLeaderboardResult(result, LeaderboardPropertyType.CumulativeScore));
            long gamesPlayed = long.Parse(testScenarios.CheckLeaderboardResult(result, LeaderboardPropertyType.GamesPlayed));

            long expectedAverageScore = (cumulativeScore / gamesPlayed);
            long actualAverageScore = long.Parse(testScenarios.CheckLeaderboardResult(result, LeaderboardPropertyType.AverageScore));

            Assert.AreEqual(expectedAverageScore, actualAverageScore, "Incorrect average time returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(1)]
        public void GetLeaderboard_LastPlayedDateTime()
        {
            DateTime currentTime = DateTime.UtcNow;

            GameResult gr = new GameResult();
            gr.GameId = testGame.GameId;
            gr.GameResultId = Guid.NewGuid();
            gr.Time = 1;
            gr.Score = 1;
            gr.TimeStamp = currentTime;
            gr.Variant = testGame.Variant;

            testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            LeaderboardResult result = testScenarios.GetLeaderboardForBestScore(testGame, us_locale);

            DateTime actualDateTime = new DateTime();
            string dateTimeString = testScenarios.CheckLeaderboardResult(result, LeaderboardPropertyType.LastPlayedDateTime);
            DateTime.TryParse(dateTimeString, null, DateTimeStyles.AdjustToUniversal, out actualDateTime);

            TimeSpan timeDifference = actualDateTime.Subtract(currentTime);

            Assert.IsTrue(timeDifference.Hours == 0, "More than 1 hour has passed");
            Assert.IsTrue(timeDifference.Minutes == 0, "More than 1 minute has passed");
            Assert.IsTrue(timeDifference.Seconds < 60, "More than 60 seconds have passed");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Check the LastPlayedDateTime for a new user with one gameresult with no score")]
        public void GetLeaderboard_NewUser_LastPlayedDateTime()
        {
            MetroidTestScenarioLibrary newScenarios = new MetroidTestScenarioLibrary(true);
            DateTime currentTime = DateTime.UtcNow;

            GameResult gr = new GameResult();
            gr.GameId = testGame.GameId;
            gr.GameResultId = Guid.NewGuid();
            gr.Time = 1;
            gr.TimeStamp = currentTime;
            gr.Variant = testGame.Variant;

            newScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            LeaderboardResult result = newScenarios.GetLeaderboardForBestTime(testGame, us_locale);
            Assert.IsTrue(result.TotalNumberOfRows > 0, "No statistics were returned");

            DateTime actualDateTime = new DateTime();
            string dateTimeString = newScenarios.CheckLeaderboardResult(result, LeaderboardPropertyType.LastPlayedDateTime);
            DateTime.TryParse(dateTimeString, null, DateTimeStyles.AdjustToUniversal, out actualDateTime);

            TimeSpan timeDifference = actualDateTime.Subtract(currentTime);

            Assert.IsTrue(timeDifference.Hours == 0, "More than 1 hour has passed");
            Assert.IsTrue(timeDifference.Minutes == 0, "More than 1 minute has passed");
            Assert.IsTrue(timeDifference.Seconds < 60, "More than 60 seconds have passed");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(1)]
        public void GetLeaderboard_NumberOfWins()
        {
            string numberWins = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.Wins, "Wins");
            uint currentWins = uint.Parse(numberWins);

            GameResult gr = testScenarios.CreateGameResult(testGame, 0, 0, blob, "Win");
            testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);

            string newWins = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.Wins, "Wins");
            uint actualWins = uint.Parse(newWins);

            Assert.AreEqual(currentWins + 1, actualWins, "Number of wins did not match");

        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify the number of losses on the BestScore leaderboard is incremented when a new loss is posted")]
        public void GetLeaderboard_BestScore_NumberOfLosses()
        {
            string numberLoss = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.Losses, "BestScore");
            if (string.IsNullOrEmpty(numberLoss))
            {
                GameResult gres = testScenarios.CreateGameResult(testGame, 0, 1, blob, "Loss");
                testScenarios.PostGameResult(gres, us_locale, testGame.PlatformId, testGame.GameId);
                numberLoss = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.Losses, "BestScore");

            }
            uint currentLoss = uint.Parse(numberLoss);
            GameResult gr = testScenarios.CreateGameResult(testGame, 0, 1, blob, "Loss");
            testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);

            string newLosses = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.Losses, "BestScore");
            uint newLoss = uint.Parse(newLosses);

            Assert.AreEqual(currentLoss + 1, newLoss, "Number of losses did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify the number of losses on the BestTime leaderboard is incremented when a new loss is posted")]
        public void GetLeaderboard_BestTime_NumberOfLosses()
        {
            string numberLoss = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.Losses, "BestTime");
            if (string.IsNullOrEmpty(numberLoss))
            {
                GameResult gres = testScenarios.CreateGameResult(testGame, 1, 0, blob, "Loss");
                testScenarios.PostGameResult(gres, us_locale, testGame.PlatformId, testGame.GameId);
                numberLoss = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.Losses, "BestTime");

            }
            uint currentLoss = uint.Parse(numberLoss);
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 0, blob, "Loss");
            testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);

            string newLosses = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.Losses, "BestTime");
            uint newLoss = uint.Parse(newLosses);

            Assert.AreEqual(currentLoss + 1, newLoss, "Number of losses did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify the number of losses on the Wins leaderboard is incremented when a new loss is posted")]
        public void GetLeaderboard_Wins_NumberOfLosses()
        {
            string numberLoss = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.Losses, "Wins");
            if (string.IsNullOrEmpty(numberLoss))
            {
                GameResult gres = testScenarios.CreateGameResult(testGame, 1, 0, blob, "Loss");
                testScenarios.PostGameResult(gres, us_locale, testGame.PlatformId, testGame.GameId);
                numberLoss = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.Losses, "Wins");

            }
            uint currentLoss = uint.Parse(numberLoss);
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 0, blob, "Loss");
            testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);

            string newLosses = testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.Losses, "Wins");
            uint newLoss = uint.Parse(newLosses);

            Assert.AreEqual(currentLoss + 1, newLoss, "Number of losses did not match");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify a Wins leaderboard is returned when only a loss has been posted")]
        public void GetLeaderboard_Wins_LossesOnly()
        {
            MetroidTestScenarioLibrary lib = new MetroidTestScenarioLibrary(true);

            // post a loss
            lib.PostGameResultWithDefaultStatsAndLoss(testGame, us_locale);

            // get the Wins leaderboard
            LeaderboardResult result = lib.GetLeaderboardForWins(testGame, us_locale);

            Assert.IsTrue(result.TotalNumberOfRows > 0, "No results on returned on Wins leaderboard");
            Assert.AreEqual(0, result.Leaderboard[0].Value, "Number of Wins was not zero");
        }

        [TestMethod]
        [TestProperty("BugId", "8917")]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify a Wins leaderboard is returned when only a tie has been posted")]
        public void GetLeaderboard_Wins_TiesOnly()
        {
            MetroidTestScenarioLibrary lib = new MetroidTestScenarioLibrary(true);

            // post a tie
            GameResult gr = lib.CreateGameResultWithDefaultStats(testGame, us_locale);
            gr.Outcome = "Tie";

            lib.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);

            // get the Wins leaderboard
            LeaderboardResult result = lib.GetLeaderboardForWins(testGame, us_locale);

            Assert.IsTrue(result.TotalNumberOfRows > 0, "No results on returned on Wins leaderboard - bug #8917");
            Assert.AreEqual(0, result.Leaderboard[0].Value, "Number of Wins was not zero");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify posting a tie increments the number of GamesPlayed")]
        public void GetLeaderboard_Outcome_Tie_IncrementGamesPlayed()
        {
            int gamesPlayed = int.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.GamesPlayed, "BestScore"));
            
            //Post a tie
            GameResult gr = testScenarios.CreateGameResultWithDefaultStats(testGame, us_locale);
            gr.Outcome = "Tie";
            testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);

            int actualGamesPlayed = int.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.GamesPlayed, "BestScore"));

            Assert.AreEqual(gamesPlayed + 1, actualGamesPlayed, "Games played was not incremented for a tie game");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify posting a 'none' outcome increments the number of GamesPlayed")]
        public void GetLeaderboard_Outcome_None_IncrementGamesPlayed()
        {
            int gamesPlayed = int.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.GamesPlayed, "BestScore"));

            //Post a result with outcome = "None"
            GameResult gr = testScenarios.CreateGameResultWithDefaultStats(testGame, us_locale);
            gr.Outcome = "None";
            testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);

            int actualGamesPlayed = int.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.GamesPlayed, "BestScore"));

            Assert.AreEqual(gamesPlayed + 1, actualGamesPlayed, "Games played was not incremented for a game with a 'None' outcome");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify correct leaderboard order for a ReverseWins game")]
        public void GetLeaderboard_Wins_VerifyReverseWinsOrder()
        {
            Account user = AccountTransport.CreateAccount();
            Account friend1 = AccountTransport.CreateAccount();
            Account friend2 = AccountTransport.CreateAccount();

            MetroidTestUtil.Wait(30);
            AccountTransport.MakeFriends(user, friend1);
            AccountTransport.MakeFriends(user, friend2);

            MetroidTestScenarioLibrary libUser = new MetroidTestScenarioLibrary(user);
            
            TestGame testGameReverseWins = TestGameUtility.WinsGameReverse;
            GameResult gr = libUser.CreateGameResultWithDefaultStats(testGameReverseWins, us_locale);

            // Post some wins - 3 for user, 1 for friend1, 2 for friend2
            libUser.PostGameResultWithDefaultStats(testGameReverseWins, us_locale);
            libUser.PostGameResultWithDefaultStats(testGameReverseWins, us_locale);
            libUser.PostGameResultWithDefaultStats(testGameReverseWins, us_locale);

            gr.GameResultId = Guid.NewGuid();
            libUser.PostGameResultForUser(gr, friend1, us_locale, testGameReverseWins.PlatformId, testGameReverseWins.GameId);
            gr.GameResultId = Guid.NewGuid();
            libUser.PostGameResultForUser(gr, friend2, us_locale, testGameReverseWins.PlatformId, testGameReverseWins.GameId);
            gr.GameResultId = Guid.NewGuid();
            libUser.PostGameResultForUser(gr, friend2, us_locale, testGameReverseWins.PlatformId, testGameReverseWins.GameId);

            // check rank
            LeaderboardResult result = libUser.GetLeaderboardForWins(testGameReverseWins, us_locale);
            
            Assert.AreEqual((uint)1, MetroidTestScenarioLibrary.GetRankForUserInLeaderboard(result, friend1.XblUser.Gamertag), "Rank for user {0} is incorrect", friend1.XblUser.Gamertag);
            Assert.AreEqual((uint)2, MetroidTestScenarioLibrary.GetRankForUserInLeaderboard(result, friend2.XblUser.Gamertag), "Rank for user {0} is incorrect", friend2.XblUser.Gamertag);
            Assert.AreEqual((uint)3, MetroidTestScenarioLibrary.GetRankForUserInLeaderboard(result, user.XblUser.Gamertag), "Rank for user {0} is incorrect", user.XblUser.Gamertag);
        }


        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        public void GetLeaderboard_RankUp()
        {
            TestUser primaryUser = AuthenticationTransport.PrimaryUser;
            MetroidTestScenarioLibrary scenarios = new MetroidTestScenarioLibrary(primaryUser.Username, primaryUser.Password);

            //Get the best score
            long bestScore = 0;
            LeaderboardResult leaderboardResult = scenarios.GetLeaderboardForBestScore(testGame, us_locale);
            if (leaderboardResult.TotalNumberOfRows == 0)
            {
                GameResult gr = scenarios.CreateGameResult(testGame, 1, 1, "blob", "Win");
                scenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
                string score = scenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore");
                bestScore = long.Parse(score);
            }
            else
            {
                bestScore = leaderboardResult.Leaderboard[0].Value;
            }

            //Post higher scores for each of the primary user's friends
            GameResult result = new GameResult();
            result.GameId = testGame.GameId;
            result.Outcome = "Win";
            result.Time = 100;
            result.TimeStamp = DateTime.Now;
            result.Variant = testGame.Variant;

            int i = primaryUser.Friends.Count;

            foreach (TestUser friend in primaryUser.Friends)
            {
                result.Score = bestScore + i;
                result.GameResultId = Guid.NewGuid();
                scenarios.PostGameResultForUser(result, friend.Username, friend.Password, us_locale, testGame.PlatformId, testGame.GameId);
                i--;
            }

            //Post highest score for primary user
            result.Score = bestScore + primaryUser.Friends.Count + 1;
            result.GameResultId = Guid.NewGuid();
            scenarios.PostGameResult(result, us_locale, testGame.PlatformId, testGame.GameId);
            LeaderboardResult res = scenarios.GetLeaderboardForBestScore(testGame, us_locale);

            //Make sure leaderboard ranks are in order
            //Primary user should be above all
            Assert.AreEqual(res.Leaderboard[0].User.GamerTag, primaryUser.Gamertag, "Leaderboard ranked incorrectly");

            int j = 1;
            foreach (TestUser friend in primaryUser.Friends)
            {
                Assert.AreEqual(res.Leaderboard[j].User.GamerTag, friend.Gamertag, "Leaderboard ranked incorrectly");
                j++;
            }
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify max leaderboard entries returned are restricted by total number of rows provided")]
        public void GetLeaderboard_NumRowsLessThanFriends_VerifyCorrectNumberReturned()
        {
            uint friendCount = (uint)AuthenticationTransport.PrimaryUser.Friends.Count;
            TestGame tg = TestGameUtility.AllStatsGame;
            long maxValue = AuthenticationTransport.PrimaryUser.Friends.Count + 1;
            testScenarios.PostGameResult(tg, us_locale, maxValue, maxValue, "Win", blob);

            //Post a score for each user, in case they dont have leaderboard entries
            foreach (var friend in AuthenticationTransport.PrimaryUser.Friends)
            {
                maxValue--;
                GameResult gr = testScenarios.CreateGameResult(tg, maxValue, maxValue, blob, "Win");
                gr.GameResultId = Guid.NewGuid();
                testScenarios.PostGameResultForUser(gr, friend.Username, friend.Password, us_locale, tg.PlatformId, tg.GameId);
            }

            LeaderboardResult result = testScenarios.GetLeaderboardXml(tg.GameId, tg.Variant, "BestScore", 1, "W1", friendCount - 2, us_locale, tg.PlatformId);
            Assert.AreEqual<uint>(friendCount - 2, (uint)result.Leaderboard.Count, "Expected row count not returned");

            uint rows = result.TotalNumberOfRows - (friendCount - 2);
            result = testScenarios.GetLeaderboardXml(tg.GameId, tg.Variant, "BestScore", friendCount-1, "W1", rows, us_locale, tg.PlatformId);
            Assert.AreEqual<uint>(rows, (uint)result.Leaderboard.Count, "Expected row count not returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify a user doesn't show up on the leaderboard if he's outside of the rankStart/numRows window")]
        public void GetLeaderboard_UserHasLowestScore_NotOnLeaderboard()
        {
            Account user = AccountTransport.CreateAccount();
            string mainUserGT = user.XblUser.Gamertag;
            MetroidTestScenarioLibrary lib = new MetroidTestScenarioLibrary(user);
            List<Account> friends = AccountTransport.AddFriendsForAccount(user, 3);
            MetroidTestUtil.Wait(30);
            long maxScore = friends.Count * 2;
            Response resp = null;

            //Submit scores for all friends
            foreach (var fr in friends)
            {
                GameResult gr = lib.CreateGameResult(testGame, maxScore, 1, blob, "Win");
                resp = lib.PostGameResultForUser(gr, fr, us_locale, testGame.PlatformId, testGame.GameId);
                Assert.AreEqual(HttpStatusCode.Accepted, resp.StatusCode, "PostGameResult for friend failed: " + fr.XblUser.Gamertag);
                maxScore--;
            }

            //Submit lowest score for primary user
            GameResult grPrimary = lib.CreateGameResult(testGame, friends.Count, 1, blob, "Win");
            resp = lib.PostGameResult(grPrimary, us_locale, testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, resp.StatusCode, "PostGameResult for user failed: " + mainUserGT);

            //Retrieve leaderboard with less rows than total friends
            uint rows = (uint)friends.Count - 1;
            LeaderboardResult result = lib.GetLeaderboardXml(testGame.GameId, testGame.Variant, "BestScore", 1, "W1", rows, us_locale, testGame.PlatformId);

            //Make sure the caller is not within the leaderboard
            bool userPresent = false;
            foreach (var item in result.Leaderboard)
            {
                if (item.User.GamerTag.Equals(mainUserGT, StringComparison.OrdinalIgnoreCase))
                {
                    userPresent = true;
                    break;
                }
            }

            Assert.IsFalse(userPresent, "Caller's gamertag was returned within the leaderboard");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify that current user in returned in the leaderboard when a start rank is not provided")]
        public void GetLeaderboard_NoRankSupplied_VerifyCurrentUserWithinLeaderboard()
        {
            Account user = AccountTransport.CreateAccount();
            string mainUserGT = user.XblUser.Gamertag;
            MetroidTestScenarioLibrary lib = new MetroidTestScenarioLibrary(user);
            List<Account> friends = AccountTransport.AddFriendsForAccount(user, 3);
            MetroidTestUtil.Wait(30);
            long maxScore = friends.Count * 2;
            Response resp = null;

            //Submit scores for all friends
            foreach (var fr in friends)
            {
                GameResult gr = lib.CreateGameResult(testGame, maxScore, 1, blob, "Win");
                resp = lib.PostGameResultForUser(gr, fr, us_locale, testGame.PlatformId, testGame.GameId);
                Assert.AreEqual(HttpStatusCode.Accepted, resp.StatusCode, "PostGameResult for friend failed: " + fr.XblUser.Gamertag);
                maxScore--;
            }

            //Submit lowest score for primary user
            GameResult grPrimary = lib.CreateGameResult(testGame, friends.Count, 1, blob, "Win");
            resp = lib.PostGameResult(grPrimary, us_locale, testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, resp.StatusCode, "PostGameResult for user failed: " + mainUserGT);

            //Retrieve leaderboard with less rows than total friends and no rank
            LeaderboardResult result = lib.GetLeaderboardXml(testGame.GameId, testGame.Variant, "BestScore", 0, "W1", (uint)friends.Count, us_locale, testGame.PlatformId);

            //Make sure the caller is within the leaderboard
            bool userPresent = false;
            foreach (var item in result.Leaderboard)
            {
                if (item.User.GamerTag.Equals(mainUserGT, StringComparison.OrdinalIgnoreCase))
                {
                    userPresent = true;
                    break;
                }
            }

            Assert.IsTrue(userPresent, "Caller's gamertag was not returned within the leaderboard where expected");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify a friend who does not have a rank is not on the leaderboard")]
        public void GetLeaderboard_FriendHasNoRank()
        {
            Account user = AccountTransport.CreateAccount();
            MetroidTestUtil.Wait(30);
            
            MetroidTestScenarioLibrary lib = new MetroidTestScenarioLibrary(user);
            List<Account> friends = AccountTransport.AddFriendsForAccount(user, 2);

            // submit a score for primary user and for friend[0]
            GameResult grPrimary = lib.CreateGameResult(testGame, 5, 1, blob, "Win");
            Response resp = lib.PostGameResult(grPrimary, us_locale, testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, resp.StatusCode, "PostGameResult for user failed: " + user.XblUser.Gamertag);

            GameResult gr = lib.CreateGameResult(testGame, 4, 1, blob, "Win");
            resp = lib.PostGameResultForUser(gr, friends[0], us_locale, testGame.PlatformId, testGame.GameId);
            Assert.AreEqual(HttpStatusCode.Accepted, resp.StatusCode, "PostGameResult for friend failed: " + friends[0].XblUser.Gamertag);

            //Retrieve leaderboard
            LeaderboardResult result = lib.GetLeaderboardXml(testGame.GameId, testGame.Variant, "BestScore", 1, "W1", 100, us_locale, testGame.PlatformId);

            // friend[1] should have no rank
            uint rank = MetroidTestScenarioLibrary.GetRankForUserInLeaderboard(result, friends[1].XblUser.Gamertag);
            Assert.AreEqual((uint)0, rank, "Friend with no rank appeared in the leaderboard at rank {0}", rank);
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        public void GetLeaderboard_PendingFriendRequest_VerifyFriendDoesntAppearOnLeaderboard()
        {
            Account user = AccountTransport.CreateAccount();
            Account friend = AccountTransport.CreateAccount();
            
            MetroidTestScenarioLibrary userSc = new MetroidTestScenarioLibrary(user);
            userSc.PostGameResult(testGame, us_locale, 10, 10, "Win", blob);

            MetroidTestScenarioLibrary friendSc = new MetroidTestScenarioLibrary(friend);
            friendSc.PostGameResult(testGame, us_locale, 20, 20, "Win", blob);

            AccountTransport.SendFriendRequest(user, friend);
            MetroidTestUtil.Wait(10); 

            LeaderboardResult result = userSc.GetLeaderboardForBestScore(testGame, us_locale);

            bool containsFriend = false;

            foreach (var item in result.Leaderboard)
            {
                if (item.User.GamerTag.Equals(friend.XblUser.Gamertag,StringComparison.OrdinalIgnoreCase)) 
                    containsFriend = true;
            }

            Assert.IsFalse(containsFriend, "Friend with pending request exists in leaderboard results");
        }


        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        public void GetLeaderboard_AddFriend_AFTER_SubmittingScore_VerifyFriendReturned()
        {
            Account acct = AccountTransport.CreateAccount();
            Account friend = AccountTransport.CreateAccount();
            
            //Submit scores for user
            MetroidTestScenarioLibrary acctLib = new MetroidTestScenarioLibrary(acct);
            acctLib.PostGameResult(testGame, us_locale, 2, 2, "Win", blob);
            LeaderboardResult useLbd = acctLib.GetLeaderboardForBestScore(testGame, us_locale);
            Assert.AreEqual<uint>(1, useLbd.TotalNumberOfRows, "Multiple leaderboard rows returned for user with no friends");

            //Submit scores for friend
            MetroidTestScenarioLibrary friendLib = new MetroidTestScenarioLibrary(friend);
            friendLib.PostGameResult(testGame, us_locale, 1, 1, "Win", blob);
            friendLib.GetLeaderboardForBestScore(testGame, us_locale);

            MetroidTestUtil.Wait(30);

            //Make them friends and retrieve leaderboard
            AccountTransport.MakeFriends(acct, friend);

            MetroidTestUtil.Wait(30);

            LeaderboardResult result = acctLib.GetLeaderboardForBestScore(testGame, us_locale);
            
            //Verify leaderboard updated to reflect friend
            Assert.AreEqual<uint>(2, result.TotalNumberOfRows); 
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify the behavior when a user views the leaderboard for a game he hasn't played, but his friend has")]
        public void GetLeaderboard_UserHasntPlayed_FriendHasPlayed()
        {
            Account user = AccountTransport.CreateAccount();
            MetroidTestScenarioLibrary lib = new MetroidTestScenarioLibrary(user);
            Account friend = AccountTransport.CreateAccount();
            MetroidTestUtil.Wait(30);
            AccountTransport.MakeFriends(user, friend);

            //Post a game result for the friend
            GameResult gr = lib.CreateGameResultWithDefaultStats(testGame, us_locale);
            lib.PostGameResultForUser(gr, friend, us_locale, testGame.PlatformId, testGame.GameId);

            //Get the leaderboard
            LeaderboardResult result = lib.GetLeaderboardForBestScore(testGame, us_locale);

            Assert.AreEqual((uint)1, result.TotalNumberOfRows);
        }

        #endregion Acceptance
        #region High score tests

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify the behavior when high score is long.MaxValue")]
        public void GetLeaderboard_HighScore_BoundaryHighScore()
        {
            //Create a new account
            MetroidTestScenarioLibrary newAccountScenarios = new MetroidTestScenarioLibrary(true);

            long newScore = long.MaxValue;
            PostGameResultAndVerify(testGame, us_locale, newScore, 1, "Win", null, newAccountScenarios); 

            //Retrieve statistics
            long highScore = long.Parse(newAccountScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));
            Assert.AreEqual(newScore, highScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify a user's first submitted score is the high score")]
        public void GetLeaderboard_HighScore_FirstScore()
        {
            //Create a new account
            MetroidTestScenarioLibrary newAccountScenarios = new MetroidTestScenarioLibrary(true);

            //Submit new highscore
            long newScore = rand.Next(1, 999);
            PostGameResultAndVerify(testGame, us_locale, newScore, 1, "Win", null, newAccountScenarios); 

            //Retrieve statistics
            long highScore = long.Parse(newAccountScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            Assert.AreEqual(newScore, highScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify a new high score replaces a lower score")]
        public void GetLeaderboard_HighScore_HighScore()
        {
            //Retrieve statistics first
            LeaderboardResult currentResult = testScenarios.GetLeaderboardForBestScore(testGame, us_locale);
            long currentScore = long.Parse(testScenarios.CheckLeaderboardResult(currentResult, LeaderboardPropertyType.BestScore));

            //Submit new highscore
            long newScore = currentScore + 1;
            LeaderboardResult actualResult = testScenarios.PostHigherScoreAndRetrieveLeaderboard(testGame, us_locale, null, null, 1);

            //Get actual result
            long actualScore = long.Parse(testScenarios.CheckLeaderboardResult(actualResult, LeaderboardPropertyType.BestScore));

            Assert.AreEqual(newScore, actualScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify new lower score does't replace stored high score")]
        public void GetLeaderboard_HighScore_LowerScore()
        {
            //Retrieve statistics first
            LeaderboardResult currentResult = testScenarios.GetLeaderboardForBestScore(testGame, us_locale);
            long currentScore = long.Parse(testScenarios.CheckLeaderboardResult(currentResult, LeaderboardPropertyType.BestScore));

            //Submit new highscore
            long newScore = currentScore - 1;
            PostGameResultAndVerify(testGame, us_locale, newScore, 1, "Win", "My blob", testScenarios);
            LeaderboardResult actualResult = testScenarios.GetLeaderboardForBestScore(testGame, us_locale);

            //Get actual result
            long actualScore = long.Parse(testScenarios.CheckLeaderboardResult(actualResult, LeaderboardPropertyType.BestScore));

            Assert.AreEqual(currentScore, actualScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify a new high score equal to the current high score doesn't change the high score")]
        public void GetLeaderboard_HighScore_EqualScore()
        {
            long highScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            PostGameResultAndVerify(testGame, us_locale, highScore, 1, "Win", "My blob", testScenarios);
            LeaderboardResult actualResult = testScenarios.GetLeaderboardForBestScore(testGame, us_locale);

            Assert.IsNotNull(actualResult);
            Assert.IsTrue(actualResult.TotalNumberOfRows > 0);
            Assert.AreEqual(long.Parse(testScenarios.CheckLeaderboardResult(actualResult, LeaderboardPropertyType.BestScore)), highScore, "High score has changed");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify submitting multiple lower scores does not change the high score")]
        public void GetLeaderboard_HighScore_MultipleLowScore()
        {
            //Retrieve statistics first
            long highScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            //Submit three lower user scores
            long newScore = highScore - 1;
            PostGameResultAndVerify(testGame, us_locale, newScore, 0, "Win", null, testScenarios);
            PostGameResultAndVerify(testGame, us_locale, newScore, 0, "Win", null, testScenarios);
            PostGameResultAndVerify(testGame, us_locale, newScore, 0, "Win", null, testScenarios);

            //Get actual result
            LeaderboardResult actualResult = testScenarios.GetLeaderboardForBestScore(testGame, us_locale);
            long actualScore = long.Parse(testScenarios.CheckLeaderboardResult(actualResult, LeaderboardPropertyType.BestScore));

            Assert.AreEqual(highScore, actualScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify after submitting 3 new high scores the correct value is stored")]
        public void GetLeaderboard_HighScore_MultipleHighScore()
        {
            //Retrieve statistics first
            long highScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            //Submit three higher user scores
            long newScore = highScore + 1;
            PostGameResultAndVerify(testGame, us_locale, newScore, 0, "Win", null, testScenarios);
            PostGameResultAndVerify(testGame, us_locale, newScore, 0, "Win", null, testScenarios);
            PostGameResultAndVerify(testGame, us_locale, newScore, 0, "Win", null, testScenarios);

            //Get actual result
            LeaderboardResult actualResult = testScenarios.GetLeaderboardForBestScore(testGame, us_locale);
            long actualScore = long.Parse(testScenarios.CheckLeaderboardResult(actualResult, LeaderboardPropertyType.BestScore));

            Assert.AreEqual(newScore, actualScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify after submitting 3 new decreasing scores the correct value is stored")]
        public void GetLeaderboard_HighScore_MultipleDecreasingScore()
        {
            //Retrieve statistics first
            long highScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            //Submit three lower user scores
            for (int i = 1; i <= 3; i++)
            {
                long newScore = highScore - i;
                PostGameResultAndVerify(testGame, us_locale, newScore, 0, "Win", null, testScenarios);
            }

            //Get actual result
            long actualScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            Assert.AreEqual(highScore, actualScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify after submitting 3 new increasingly higher scores the correct value is stored")]
        public void GetLeaderboard_HighScore_MultipleIncreasingScore()
        {
            //Retrieve statistics first
            long highScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            //Submit three lower user scores
            long newScore = highScore;
            for (int i = 1; i <= 3; i++)
            {
                newScore = highScore + i;
                PostGameResultAndVerify(testGame, us_locale, newScore, 0, "Win", null, testScenarios);
            }

            //Get actual result
            long actualScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            Assert.AreEqual(newScore, actualScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify after submitting three scores of 0 the correct value is stored")]
        public void GetLeaderboard_HighScore_HighScore_MultipleZeroScore()
        {
            //Retrieve statistics first
            long highScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            //Submit three user scores equal to zero
            long newScore = 0;
            PostGameResultAndVerify(testGame, us_locale, newScore, 0, "Win", null, testScenarios);
            PostGameResultAndVerify(testGame, us_locale, newScore, 0, "Win", null, testScenarios);
            PostGameResultAndVerify(testGame, us_locale, newScore, 0, "Win", null, testScenarios);

            //Get actual result
            long actualScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            Assert.AreEqual(highScore, actualScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify that a user who hasn't scored in a played game has 0 high score")]
        public void GetLeaderboard_HighScore_ZeroScore()
        {
            //Create a new account
            MetroidTestScenarioLibrary newAccountScenarios = new MetroidTestScenarioLibrary(true);

            //Submit a user score equal to zero
            PostGameResultAndVerify(testGame, us_locale, 0, 1, "Win", null, newAccountScenarios);

            //Retrieve statistics
            long actualScore = long.Parse(newAccountScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            Assert.AreEqual(0, actualScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify that a user who scored in a played game has but has 0 time has a high score")]
        public void GetLeaderboard_HighScore_ZeroTime()
        {
            //Create a new account
            MetroidTestScenarioLibrary newAccountScenarios = new MetroidTestScenarioLibrary(true);

            //Submit a user score and zero time
            long newScore = rand.Next(1, 999);
            PostGameResultAndVerify(testGame, us_locale, newScore, 0, "Win", null, newAccountScenarios);

            //Retrieve statistics
            long highScore = long.Parse(newAccountScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            Assert.AreEqual(newScore, highScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify that a user who earned 0 score and 0 time in a played game has 0 high score")]
        public void GetLeaderboard_HighScore_ZeroScoreZeroTime()
        {
            //Create a new account
            MetroidTestScenarioLibrary newAccountScenarios = new MetroidTestScenarioLibrary(true);

            //Submit a user score equal to zero
            PostGameResultAndVerify(testGame, us_locale, 0, 0, "Win", null, newAccountScenarios);

            //Retrieve statistics
            long highScore = long.Parse(newAccountScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            Assert.AreEqual(0, highScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify that a game that uses negative scores handles high score correctly")]
        public void GetLeaderboard_HighScore_NegativeScore()
        {
            //Negative scores don’t invert the ordering logic. If a high score is better, the closer to zero you are the better score you have.
            //Create a new account
            MetroidTestScenarioLibrary newAccountScenarios = new MetroidTestScenarioLibrary(true);

            //Submit a negative user score
            long newScore = rand.Next(1, 999) * -1;
            PostGameResultAndVerify(testGame, us_locale, newScore, 10, "Win", null, newAccountScenarios);

            //Retrieve statistics
            long actualScore = long.Parse(newAccountScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            Assert.AreEqual(newScore, actualScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify that getting a higher negative score (closer to 0) changes the high score")]
        public void GetLeaderboard_HighScore_NegativeHigherScore()
        {
            //Negative scores don’t invert the ordering logic. If a high score is better, the closer to zero you are the better score you have.
            //Create a new account
            MetroidTestScenarioLibrary newAccountScenarios = new MetroidTestScenarioLibrary(true);

            //Submit a negative user score
            long firstScore = rand.Next(2, 999) * -1;
            PostGameResultAndVerify(testGame, us_locale, firstScore, 10, "Win", null, newAccountScenarios);

            //Submit a higher (closer to 0) high score
            long highScore = firstScore + 1;
            PostGameResultAndVerify(testGame, us_locale, highScore, 10, "Win", null, newAccountScenarios);

            //Retrieve statistics
            long actualScore = long.Parse(newAccountScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            Assert.AreEqual(highScore, actualScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify that getting a lower negative score (farther from 0) does not change the high score")]
        public void GetLeaderboard_HighScore_NegativeLowerScore()
        {
            //Negative scores don’t invert the ordering logic. If a high score is better, the closer to zero you are the better score you have.
            //Create a new account
            MetroidTestScenarioLibrary newAccountScenarios = new MetroidTestScenarioLibrary(true);

            //Submit a negative user score
            long firstScore = rand.Next(2, 999) * -1;
            PostGameResultAndVerify(testGame, us_locale, firstScore, 10, "Win", null, newAccountScenarios);

            //Submit a lower (farther from 0) high score
            long newScore = firstScore - 1;
            PostGameResultAndVerify(testGame, us_locale, newScore, 10, "Win", null, newAccountScenarios);

            //Retrieve statistics
            long actualScore = long.Parse(newAccountScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            Assert.AreEqual(firstScore, actualScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify that subsequent calls to GetLeaderboard return the same high score")]
        public void GetLeaderboard_HighScore_CallMultipleTimes()
        {
            //Retrieve statistics twice
            long firstScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));
            long secondScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            Assert.AreEqual(firstScore, secondScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify high score is unchanged in game1 and updated in game2 when game2's high score is updated")]
        public void GetLeaderboard_HighScore_SameUserDifferentGame()
        {
            //Get two test games with Best High Score variants
            TestGame game1 = TestGameUtility.GetTestGame("SeaLegend", 4);
            TestGame game2 = TestGameUtility.GetTestGame("Hide And Seek", 4);

            //Post some results for first two games
            PostGameResultAndVerify(game1, us_locale, 100, 100, "Win", null, testScenarios);
            PostGameResultAndVerify(game2, us_locale, 100, 100, "Win", null, testScenarios);

            long firstGameScore = long.Parse(testScenarios.GetStatValue(game1, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));
            long secondGameScore = long.Parse(testScenarios.GetStatValue(game2, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            //Update the high score for game 2
            long newScore = secondGameScore + 1;
            PostGameResultAndVerify(game2, us_locale, newScore, 100, "Win", null, testScenarios);

            //Verify game 1 score is unchanged
            long firstGameNewScore = long.Parse(testScenarios.GetStatValue(game1, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));
            Assert.AreEqual(firstGameScore, firstGameNewScore, "Incorrect score returned for game 1");

            //Verify game 2 score is updated
            long secondGameNewScore = long.Parse(testScenarios.GetStatValue(game2, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));
            Assert.AreEqual(newScore, secondGameNewScore, "Incorrect score returned for game 2");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify that when all users have the same score, the one who earned it first is ranked #1")]
        public void GetLeaderboard_AllUsersSameScore_ValidateBehavior()
        {
            TestUser tu = AuthenticationTransport.PrimaryUser;

            //Get the best score
            long score = 0;
            LeaderboardResult leaderboardResult = testScenarios.GetLeaderboardForBestScore(testGame, us_locale);
            if (leaderboardResult.TotalNumberOfRows == 0)
            {
                testScenarios.PostGameResultWithDefaultStats(testGame, us_locale);
                score = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));
            }
            else
            {
                score = leaderboardResult.Leaderboard[0].Value;
            }

            //Post same highscore for each of the users
            GameResult gr = testScenarios.CreateGameResult(testGame, score, 1, blob, "Win");
            testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);

            foreach (var friend in tu.Friends)
            {
                gr.GameResultId = Guid.NewGuid();
                testScenarios.PostGameResultForUser(gr, friend.Username, friend.Password, us_locale, testGame.PlatformId, testGame.GameId);
            }

            //Get the resulting leaderboard
            LeaderboardResult result = testScenarios.GetLeaderboardForBestScore(testGame, us_locale);
            string topRankedUser = string.Empty;

            foreach (var item in result.Leaderboard)
            {
                if (item.Rank == 1)
                {
                    topRankedUser = item.User.GamerTag;
                    break;
                }
            }
            //The primary user scored it first, so they should be ranked #1
            Assert.AreEqual(topRankedUser, tu.Gamertag, "The wrong user was ranked first");

            gr.GameResultId = Guid.NewGuid();
            //Now post the same score for the primary user again so that he's no longer the first to earn it (now he's the last)
            testScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            
            //Get the resulting leaderboard
            result = testScenarios.GetLeaderboardForBestScore(testGame, us_locale);

            foreach (var item in result.Leaderboard)
            {
                if (item.Rank == 1)
                {
                    topRankedUser = item.User.GamerTag;
                    break;
                }
            }
            //The 0th friend user scored it first, so they should be ranked #1
            Assert.AreEqual(topRankedUser, tu.Friends[0].Gamertag, "The wrong user was ranked first");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        public void GetLeaderboard_AllFriendsNoScore_VerifyLeaderboard()
        {
            Account acct = AccountTransport.CreateAccount();
            Account fr1 = AccountTransport.CreateAccount();
            Account fr2 = AccountTransport.CreateAccount();
            MetroidTestUtil.Wait(10);

            AccountTransport.MakeFriends(acct, fr1);
            AccountTransport.MakeFriends(acct, fr2);

            GameResult gr = testScenarios.CreateGameResult(testGame, null, 1, blob, "Win");

            testScenarios.PostGameResultForUser(gr, acct, us_locale, testGame.PlatformId, testGame.GameId);
            testScenarios.PostGameResultForUser(gr, fr1, us_locale, testGame.PlatformId, testGame.GameId);
            testScenarios.PostGameResultForUser(gr, fr2, us_locale, testGame.PlatformId, testGame.GameId);

            MetroidTestScenarioLibrary lib = new MetroidTestScenarioLibrary(acct);

            LeaderboardResult result = lib.GetLeaderboardForBestScore(testGame, us_locale);
            Assert.IsTrue(result.TotalNumberOfRows == 0, "No statistics were returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        public void GetLeaderboard_ProgressiveHighScore_VerifyRankIncrement()
        {
            Account acct = AccountTransport.CreateAccount();
            Account fr1 = AccountTransport.CreateAccount();
            Account fr2 = AccountTransport.CreateAccount();
            MetroidTestUtil.Wait(30);

            AccountTransport.MakeFriends(acct, fr1);
            AccountTransport.MakeFriends(acct, fr2);
            MetroidTestScenarioLibrary lib = new MetroidTestScenarioLibrary(acct);

            GameResult gr = lib.CreateGameResult(testGame, 10, 10, blob, "Win");
            lib.PostGameResultForUser(gr, acct, us_locale, testGame.PlatformId, testGame.GameId);
            gr = lib.CreateGameResult(testGame, 20, 10, blob, "Win");
            lib.PostGameResultForUser(gr, fr1, us_locale, testGame.PlatformId, testGame.GameId);
            gr = lib.CreateGameResult(testGame, 30, 10, blob, "Win");
            lib.PostGameResultForUser(gr, fr2, us_locale, testGame.PlatformId, testGame.GameId);

            //Get initial leaderboard state
            LeaderboardResult result = lib.GetLeaderboardForBestScore(testGame, us_locale);
            Dictionary<uint, long> rankScore = new Dictionary<uint, long>();

            //Get leaderboard rank and score in reverse order
            foreach (var item in result.Leaderboard.Reverse<LeaderboardItem>())
            {
                uint rank = item.Rank;
                long score = long.Parse(lib.FindLeaderboardEntry(item, "BestScore"));
                rankScore.Add(rank, score);
            }
            
            foreach (KeyValuePair<uint,long> kv in rankScore)
            {
                gr = lib.CreateGameResult(testGame, kv.Value + 1, 1, blob, "Win");
                lib.PostGameResultForUser(gr, acct, us_locale, testGame.PlatformId, testGame.GameId);
                MetroidTestUtil.Wait(15);
                LeaderboardResult lr = lib.GetLeaderboardForBestScore(testGame, us_locale);
                uint actualRank = MetroidTestScenarioLibrary.GetRankForUserInLeaderboard(lr, acct.XblUser.Gamertag);

                Assert.AreEqual(kv.Key, actualRank, "Rank was not incremented for higher score submission"); 
            }
        }

        #endregion // High score tests
        #region Best high time tests

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify the behavior when high time is long.MaxValue")]
        public void GetLeaderboard_HighTime_BoundaryHighTime()
        {
            //Create a new account
            MetroidTestScenarioLibrary newAccountScenarios = new MetroidTestScenarioLibrary(true);

            long newTime = long.MaxValue;
            PostGameResultAndVerify(testGame, us_locale, 1, newTime, "Win", null, newAccountScenarios);

            //Retrieve statistics
            long highTime = long.Parse(newAccountScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));
            Assert.AreEqual(newTime, highTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify a user's first submitted time is the high time")]
        public void GetLeaderboard_HighTime_FirstTime()
        {
            //Create a new account
            MetroidTestScenarioLibrary newAccountScenarios = new MetroidTestScenarioLibrary(true);

            //Submit new high time
            long newTime = rand.Next(1, 500);
            PostGameResultAndVerify(testGameHighTime, us_locale, 1, newTime, "Win", null, newAccountScenarios);

            //Retrieve statistics
            long highTime = long.Parse(newAccountScenarios.GetStatValue(testGameHighTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            Assert.AreEqual(newTime, highTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify a new high time replaces a lower time")]
        public void GetLeaderboard_HighTime_HighTime()
        {
            //Retrieve statistics first
            LeaderboardResult currentResult = testScenarios.GetLeaderboardForBestTime(testGameHighTime, us_locale);
            long currentTime = long.Parse(testScenarios.CheckLeaderboardResult(currentResult, LeaderboardPropertyType.BestTime));

            //Submit new high time
            long newTime = currentTime + 1;
            LeaderboardResult actualResult = testScenarios.PostHigherTimeAndRetrieveLeaderboard(testGameHighTime, us_locale, null, null, 1);

            //Get actual result
            long actualTime = long.Parse(testScenarios.CheckLeaderboardResult(actualResult, LeaderboardPropertyType.BestTime));

            Assert.AreEqual(newTime, actualTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify new lower time does't replace stored high time")]
        public void GetLeaderboard_HighTime_LowerTime()
        {
            //Retrieve statistics first
            LeaderboardResult currentResult = testScenarios.GetLeaderboardForBestTime(testGameHighTime, us_locale);
            long currentTime = long.Parse(testScenarios.CheckLeaderboardResult(currentResult, LeaderboardPropertyType.BestTime));

            //Submit lower time
            long newTime = currentTime - 1;
            LeaderboardResult actualResult = testScenarios.PostHigherTimeAndRetrieveLeaderboard(testGameHighTime, us_locale, null, null, -1);

            //Get actual result
            long actualTime = long.Parse(testScenarios.CheckLeaderboardResult(actualResult, LeaderboardPropertyType.BestTime));

            Assert.AreEqual(currentTime, actualTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify a new high time equal to the current high time doesn't change the high time")]
        public void GetLeaderboard_HighTime_EqualTime()
        {
            long highTime = long.Parse(testScenarios.GetStatValue(testGameHighTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            PostGameResultAndVerify(testGameHighTime, us_locale, 1, highTime, "Win", "My blob", testScenarios);
            LeaderboardResult actualResult = testScenarios.GetLeaderboardForBestTime(testGameHighTime, us_locale);

            //Get actual result
            long actualTime = long.Parse(testScenarios.CheckLeaderboardResult(actualResult, LeaderboardPropertyType.BestTime));
            
            Assert.AreEqual(highTime, actualTime, "High time has changed");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify submitting multiple lower times does not change the high time")]
        public void GetLeaderboard_HighTime_MultipleLowTime()
        {
            //Retrieve statistics first
            long highTime = long.Parse(testScenarios.GetStatValue(testGameHighTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            //Submit three lower user times
            long newTime = highTime - 1;
            PostGameResultAndVerify(testGameHighTime, us_locale, 1, newTime, "Win", null, testScenarios);
            PostGameResultAndVerify(testGameHighTime, us_locale, 1, newTime, "Win", null, testScenarios);
            PostGameResultAndVerify(testGameHighTime, us_locale, 1, newTime, "Win", null, testScenarios);

            //Get actual result
            LeaderboardResult actualResult = testScenarios.GetLeaderboardForBestTime(testGameHighTime, us_locale);
            long actualTime = long.Parse(testScenarios.CheckLeaderboardResult(actualResult, LeaderboardPropertyType.BestTime));

            Assert.AreEqual(highTime, actualTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify after submitting 3 new high times the correct value is stored")]
        public void GetLeaderboard_HighTime_MultipleHighTime()
        {
            //Retrieve statistics first
            long highTime = long.Parse(testScenarios.GetStatValue(testGameHighTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            //Submit three higher user times
            long newTime = highTime + 1;
            PostGameResultAndVerify(testGameHighTime, us_locale, 1, newTime, "Win", null, testScenarios);
            PostGameResultAndVerify(testGameHighTime, us_locale, 1, newTime, "Win", null, testScenarios);
            PostGameResultAndVerify(testGameHighTime, us_locale, 1, newTime, "Win", null, testScenarios);

            //Get actual result
            LeaderboardResult actualResult = testScenarios.GetLeaderboardForBestTime(testGameHighTime, us_locale);
            long actualTime = long.Parse(testScenarios.CheckLeaderboardResult(actualResult, LeaderboardPropertyType.BestTime));

            Assert.AreEqual(newTime, actualTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify after submitting 3 new decreasing times the correct value is stored")]
        public void GetLeaderboard_HighTime_MultipleDecreasingTime()
        {
            //Retrieve statistics first
            long highTime = long.Parse(testScenarios.GetStatValue(testGameHighTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));
            
            //Ensure we're not going to try posting a negative time for the next part
            if (highTime < 3)
            {
                PostGameResultAndVerify(testGameHighTime, us_locale, 1, 3, "Win", null, testScenarios);
                highTime = long.Parse(testScenarios.GetStatValue(testGameHighTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));
            }

            //Submit three lower user times
            for (int i = 1; i <= 3; i++)
            {
                long newTime = highTime - i;
                PostGameResultAndVerify(testGameHighTime, us_locale, 1, newTime, "Win", null, testScenarios);
            }

            //Get actual result
            long actualTime = long.Parse(testScenarios.GetStatValue(testGameHighTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            Assert.AreEqual(highTime, actualTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify after submitting 3 new increasingly higher times the correct value is stored")]
        public void GetLeaderboard_HighTime_MultipleIncreasingTime()
        {
            //Retrieve statistics first
            long highTime = long.Parse(testScenarios.GetStatValue(testGameHighTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            //Submit three lower user times
            long newTime = highTime;
            for (int i = 1; i <= 3; i++)
            {
                newTime = highTime + i;
                PostGameResultAndVerify(testGameHighTime, us_locale, 1, newTime, "Win", null, testScenarios);
            }

            //Get actual result
            long actualTime = long.Parse(testScenarios.GetStatValue(testGameHighTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            Assert.AreEqual(newTime, actualTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify after submitting three times of 0 the correct value is stored")]
        public void GetLeaderboard_HighTime_MultipleZeroTime()
        {
            //Retrieve statistics first
            long highTime = long.Parse(testScenarios.GetStatValue(testGameHighTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            //Submit three user times equal to zero
            long newTime = 0;
            PostGameResultAndVerify(testGameHighTime, us_locale, 1, newTime, "Win", null, testScenarios);
            PostGameResultAndVerify(testGameHighTime, us_locale, 1, newTime, "Win", null, testScenarios);
            PostGameResultAndVerify(testGameHighTime, us_locale, 1, newTime, "Win", null, testScenarios);

            //Get actual result
            long actualTime = long.Parse(testScenarios.GetStatValue(testGameHighTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            Assert.AreEqual(highTime, actualTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify that a user who earned a time of 0 in a played game has 0 high time")]
        public void GetLeaderboard_HighTime_ZeroTime()
        {
            //Create a new account
            MetroidTestScenarioLibrary newAccountScenarios = new MetroidTestScenarioLibrary(true);

            //Submit a game time equal to zero
            PostGameResultAndVerify(testGameHighTime, us_locale, 1, 0, "Win", null, newAccountScenarios);

            //Retrieve statistics
            long highTime = long.Parse(newAccountScenarios.GetStatValue(testGameHighTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            Assert.AreEqual(0, highTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify that a user who scored 0 in a played game has but has a positive time has a high time")]
        public void GetLeaderboard_HighTime_ZeroScore()
        {
            //Create a new account
            MetroidTestScenarioLibrary newAccountScenarios = new MetroidTestScenarioLibrary(true);

            //Submit a user time and zero score
            long newTime = rand.Next(1, 500);
            PostGameResultAndVerify(testGame, us_locale, 0, newTime, "Win", null, newAccountScenarios);

            //Retrieve statistics
            long highTime = long.Parse(newAccountScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            Assert.AreEqual(newTime, highTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify that a user who earned 0 score and 0 time in a played game has 0 high time")]
        public void GetLeaderboard_HighTime_ZeroScoreZeroTime()
        {
            //Create a new account
            MetroidTestScenarioLibrary newAccountScenarios = new MetroidTestScenarioLibrary(true);

            //Submit a user score and time equal to zero
            PostGameResultAndVerify(TestGameUtility.BestScoreGame, us_locale, 0, 0, "Win", null, newAccountScenarios);

            //Retrieve statistics
            LeaderboardResult result = newAccountScenarios.GetLeaderboardForBestScore(TestGameUtility.BestScoreGame, us_locale);

            Assert.AreEqual<uint>(1, result.TotalNumberOfRows);
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify that subsequent calls to GetLeaderboard return the same high time")]
        public void GetLeaderboard_HighTime_CallMultipleTimes()
        {
            //Retrieve statistics twice
            long firstTime = long.Parse(testScenarios.GetStatValue(testGameHighTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));
            long secondTime = long.Parse(testScenarios.GetStatValue(testGameHighTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            Assert.AreEqual(firstTime, secondTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify high time is unchanged in game1 and updated in game2 when game2's high time is updated")]
        public void GetLeaderboard_HighTime_SameUserDifferentGame()
        {
            //Get two test games with Best High Time variants
            TestGame game1 = TestGameUtility.GetTestGame("SeaLegend", 6);
            TestGame game2 = TestGameUtility.GetTestGame("Hide And Seek", 6);

            //Post some results for first two games
            PostGameResultAndVerify(game1, us_locale, 100, 100, "Win", null, testScenarios);
            PostGameResultAndVerify(game2, us_locale, 100, 100, "Win", null, testScenarios);

            long firstGameTime = long.Parse(testScenarios.GetStatValue(game1, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));
            long secondGameTime = long.Parse(testScenarios.GetStatValue(game2, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            //Update the high time for game 2
            long newTime = secondGameTime + 1;
            PostGameResultAndVerify(game2, us_locale, 10, newTime, "Win", null, testScenarios);

            //Verify game 1 time is unchanged
            long firstGameNewTime = long.Parse(testScenarios.GetStatValue(game1, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));
            Assert.AreEqual(firstGameTime, firstGameNewTime, "Incorrect time returned for game 1");

            //Verify game 2 time is updated
            long secondGameNewTime = long.Parse(testScenarios.GetStatValue(game2, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));
            Assert.AreEqual(newTime, secondGameNewTime, "Incorrect time returned for game 2");
        }

        #endregion // High time tests
        #region Best low time tests

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify a user's first submitted time is the low time")]
        public void GetLeaderboard_LowTime_FirstTime()
        {
            //Create a new account
            MetroidTestScenarioLibrary newAccountScenarios = new MetroidTestScenarioLibrary(true);

            //Submit new time
            long newTime = rand.Next(1, 500);
            PostGameResultAndVerify(testGameLowTime, us_locale, 1, newTime, "Win", null, newAccountScenarios);

            //Retrieve statistics
            long lowTime = long.Parse(newAccountScenarios.GetStatValue(testGameLowTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            Assert.AreEqual(newTime, lowTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify a new low time replaces a higher time")]
        public void GetLeaderboard_LowTime_LowTime()
        {
            MetroidTestScenarioLibrary lib = new MetroidTestScenarioLibrary(true);

            //Submit low time
            long firstTime = 300;
            PostGameResultAndVerify(testGameLowTime, us_locale, 10, firstTime, "Win", null, lib);

            //Retrieve statistics first
            LeaderboardResult currentResult = lib.GetLeaderboardForBestTime(testGameLowTime, us_locale);
            long currentTime = long.Parse(lib.CheckLeaderboardResult(currentResult, LeaderboardPropertyType.BestTime));

            //Submit new low time
            long newTime = currentTime - 1;
            LeaderboardResult actualResult = lib.PostHigherTimeAndRetrieveLeaderboard(testGameLowTime, us_locale, null, null, -1);

            //Get actual result
            long actualTime = long.Parse(lib.CheckLeaderboardResult(actualResult, LeaderboardPropertyType.BestTime));

            Assert.AreEqual(newTime, actualTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify new higher time doesn't replace stored low time")]
        public void GetLeaderboard_LowTime_HigherTime()
        {
            MetroidTestScenarioLibrary lib = new MetroidTestScenarioLibrary(true);

            //Submit low time
            long firstTime = 300;
            PostGameResultAndVerify(testGameLowTime, us_locale, 10, firstTime, "Win", null, lib);

            //Submit higher time
            long newTime = firstTime + 1;
            LeaderboardResult actualResult = lib.PostHigherTimeAndRetrieveLeaderboard(testGameLowTime, us_locale, null, null, 1);

            //Get actual result
            long actualTime = long.Parse(lib.CheckLeaderboardResult(actualResult, LeaderboardPropertyType.BestTime));

            Assert.AreEqual(firstTime, actualTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify a new low time equal to the current low time doesn't change the low time")]
        public void GetLeaderboard_LowTime_EqualTime()
        {
            MetroidTestScenarioLibrary lib = new MetroidTestScenarioLibrary(true);

            //Submit low time
            long firstTime = 300;
            PostGameResultAndVerify(testGameLowTime, us_locale, 10, firstTime, "Win", null, lib);

            long lowTime = long.Parse(lib.GetStatValue(testGameLowTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            PostGameResultAndVerify(testGameLowTime, us_locale, 1, lowTime, "Win", "My blob", lib);
            LeaderboardResult actualResult = lib.GetLeaderboardForBestTime(testGameLowTime, us_locale);

            //Get actual result
            long actualTime = long.Parse(lib.CheckLeaderboardResult(actualResult, LeaderboardPropertyType.BestTime));

            Assert.AreEqual(lowTime, actualTime, "Low time has changed");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify submitting multiple higher times does not change the low time")]
        public void GetLeaderboard_LowTime_MultipleHighTime()
        {
            MetroidTestScenarioLibrary lib = new MetroidTestScenarioLibrary(true);

            //Submit low time
            long firstTime = 300;
            PostGameResultAndVerify(testGameLowTime, us_locale, 10, firstTime, "Win", null, lib);

            //Retrieve statistics first
            long lowTime = long.Parse(lib.GetStatValue(testGameLowTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            //Submit three higher user times
            long newTime = lowTime + 1;
            PostGameResultAndVerify(testGameLowTime, us_locale, 1, newTime, "Win", null, lib);
            PostGameResultAndVerify(testGameLowTime, us_locale, 1, newTime, "Win", null, lib);
            PostGameResultAndVerify(testGameLowTime, us_locale, 1, newTime, "Win", null, lib);

            //Get actual result
            LeaderboardResult actualResult = lib.GetLeaderboardForBestTime(testGameLowTime, us_locale);
            long actualTime = long.Parse(lib.CheckLeaderboardResult(actualResult, LeaderboardPropertyType.BestTime));

            Assert.AreEqual(lowTime, actualTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify after submitting 3 new low times the correct value is stored")]
        public void GetLeaderboard_LowTime_MultipleLowTime()
        {
            MetroidTestScenarioLibrary lib = new MetroidTestScenarioLibrary(true);

            //Submit low time
            long firstTime = 300;
            PostGameResultAndVerify(testGameLowTime, us_locale, 10, firstTime, "Win", null, lib);

            //Retrieve statistics first
            long lowTime = long.Parse(lib.GetStatValue(testGameLowTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            //Submit three lower user times
            long newTime = lowTime - 1;
            PostGameResultAndVerify(testGameLowTime, us_locale, 1, newTime, "Win", null, lib);
            PostGameResultAndVerify(testGameLowTime, us_locale, 1, newTime, "Win", null, lib);
            PostGameResultAndVerify(testGameLowTime, us_locale, 1, newTime, "Win", null, lib);

            //Get actual result
            LeaderboardResult actualResult = lib.GetLeaderboardForBestTime(testGameLowTime, us_locale);
            long actualTime = long.Parse(lib.CheckLeaderboardResult(actualResult, LeaderboardPropertyType.BestTime));

            Assert.AreEqual(newTime, actualTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify after submitting 3 new decreasingly lower times the correct value is stored")]
        public void GetLeaderboard_LowTime_MultipleDecreasingTime()
        {
            MetroidTestScenarioLibrary lib = new MetroidTestScenarioLibrary(true);

            //Submit low time
            long firstTime = 300;
            PostGameResultAndVerify(testGameLowTime, us_locale, 10, firstTime, "Win", null, lib);

            //Retrieve statistics first
            long lowTime = long.Parse(lib.GetStatValue(testGameLowTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            //Submit three lower user times
            long newTime = lowTime;
            for (int i = 1; i <= 3; i++)
            {
                newTime = lowTime - i;
                PostGameResultAndVerify(testGameLowTime, us_locale, 1, newTime, "Win", null, lib);
            }

            //Get actual result
            long actualTime = long.Parse(lib.GetStatValue(testGameLowTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            Assert.AreEqual(newTime, actualTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify after submitting 3 new increasingly higher times the correct value is stored")]
        public void GetLeaderboard_LowTime_MultipleIncreasingTime()
        {
            MetroidTestScenarioLibrary lib = new MetroidTestScenarioLibrary(true);

            //Submit low time
            long firstTime = 300;
            PostGameResultAndVerify(testGameLowTime, us_locale, 10, firstTime, "Win", null, lib);

            //Retrieve statistics first
            long lowTime = long.Parse(lib.GetStatValue(testGameLowTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            //Submit three higher user times
            long newTime = lowTime;
            for (int i = 1; i <= 3; i++)
            {
                newTime = lowTime + i;
                PostGameResultAndVerify(testGameLowTime, us_locale, 1, newTime, "Win", null, lib);
            }

            //Get actual result
            long actualTime = long.Parse(lib.GetStatValue(testGameLowTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            Assert.AreEqual(lowTime, actualTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify after submitting three times of 0 the correct value is stored")]
        public void GetLeaderboard_LowTime_MultipleZeroTime()
        {
            MetroidTestScenarioLibrary lib = new MetroidTestScenarioLibrary(true);

            //Submit low time
            long firstTime = 300;
            PostGameResultAndVerify(testGameLowTime, us_locale, 10, firstTime, "Win", null, lib);

            //Retrieve statistics first
            long lowTime = long.Parse(lib.GetStatValue(testGameLowTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            //Submit three user times equal to zero
            long newTime = 0;
            PostGameResultAndVerify(testGameLowTime, us_locale, 1, newTime, "Win", null, lib);
            PostGameResultAndVerify(testGameLowTime, us_locale, 1, newTime, "Win", null, lib);
            PostGameResultAndVerify(testGameLowTime, us_locale, 1, newTime, "Win", null, lib);

            //Get actual result
            long actualTime = long.Parse(lib.GetStatValue(testGameLowTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            Assert.AreEqual(newTime, actualTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify that a user who earned a time of 0 in a played game has 0 low time")]
        public void GetLeaderboard_LowTime_ZeroTime()
        {
            //Create a new account
            MetroidTestScenarioLibrary newAccountScenarios = new MetroidTestScenarioLibrary(true);

            //Submit a game time equal to zero
            PostGameResultAndVerify(testGameLowTime, us_locale, 1, 0, "Win", null, newAccountScenarios);

            //Retrieve statistics
            long lowTime = long.Parse(newAccountScenarios.GetStatValue(testGameLowTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            Assert.AreEqual(0, lowTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify that a BestTime is returned for a user who scored 0 in a played game has but a positive time")]
        public void GetLeaderboard_LowTime_ZeroScore()
        {
            //Create a new account
            MetroidTestScenarioLibrary newAccountScenarios = new MetroidTestScenarioLibrary(true);

            //Submit a user time and zero score
            long newTime = rand.Next(1, 500);
            PostGameResultAndVerify(testGameLowTime, us_locale, 0, newTime, "Win", null, newAccountScenarios);

            //Retrieve statistics
            long lowTime = long.Parse(newAccountScenarios.GetStatValue(testGameLowTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            Assert.AreEqual(newTime, lowTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify that a user who earned 0 score and 0 time in a played game has 0 low time")]
        public void GetLeaderboard_LowTime_ZeroScoreZeroTime()
        {
            //Create a new account
            MetroidTestScenarioLibrary newAccountScenarios = new MetroidTestScenarioLibrary(true);

            //Submit a user score and time equal to zero
            PostGameResultAndVerify(testGameLowTime, us_locale, 0, 0, "Win", null, newAccountScenarios);

            //Retrieve statistics
            long lowTime = long.Parse(newAccountScenarios.GetStatValue(testGameLowTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            Assert.AreEqual(0, lowTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify that subsequent calls to GetLeaderboard return the same low time")]
        public void GetLeaderboard_LowTime_CallMultipleTimes()
        {
            //Submit low time
            PostGameResultAndVerify(testGameLowTime, us_locale, 1, 1, "Win", null, testScenarios);

            //Retrieve statistics twice
            long firstTime = long.Parse(testScenarios.GetStatValue(testGameLowTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));
            long secondTime = long.Parse(testScenarios.GetStatValue(testGameLowTime, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            Assert.AreEqual(firstTime, secondTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify low time is unchanged in game1 and updated in game2 when game2's low time is updated")]
        public void GetLeaderboard_LowTime_SameUserDifferentGame()
        {
            //Get two test games with Best Low Time variants
            TestGame game1 = TestGameUtility.GetTestGame("SeaLegend", 3);
            TestGame game2 = TestGameUtility.GetTestGame("Hide And Seek", 3);

            MetroidTestScenarioLibrary lib = new MetroidTestScenarioLibrary(true);

            //Post some results for first two games
            PostGameResultAndVerify(game1, us_locale, 100, 100, "Win", null, lib);
            PostGameResultAndVerify(game2, us_locale, 100, 100, "Win", null, lib);

            long firstGameTime = long.Parse(lib.GetStatValue(game1, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));
            long secondGameTime = long.Parse(lib.GetStatValue(game2, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            //Update the low time for game 2
            long newTime = secondGameTime - 1;
            PostGameResultAndVerify(game2, us_locale, 10, newTime, "Win", null, lib);

            //Verify game 1 time is unchanged
            long firstGameNewTime = long.Parse(lib.GetStatValue(game1, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));
            Assert.AreEqual(firstGameTime, firstGameNewTime, "Incorrect time returned for game 1");

            //Verify game 2 time is updated
            long secondGameNewTime = long.Parse(lib.GetStatValue(game2, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));
            Assert.AreEqual(newTime, secondGameNewTime, "Incorrect time returned for game 2");
        }

        #endregion // Low time tests
        #region Best low score tests

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify a user's first submitted score is the low score")]
        public void GetLeaderboard_LowScore_FirstScore()
        {
            //Create a new account
            MetroidTestScenarioLibrary newAccountScenarios = new MetroidTestScenarioLibrary(true);

            //Submit new score
            long newScore = rand.Next(1, 500);
            PostGameResultAndVerify(testGameLowScore, us_locale, newScore, 1, "Win", null, newAccountScenarios);

            //Retrieve statistics
            long lowScore = long.Parse(newAccountScenarios.GetStatValue(testGameLowScore, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            Assert.AreEqual(newScore, lowScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify a new low score replaces a higher score")]
        public void GetLeaderboard_LowScore_LowScore()
        {
            MetroidTestScenarioLibrary lib = new MetroidTestScenarioLibrary(true);

            //Submit low Score
            long firstScore = 300;
            PostGameResultAndVerify(testGameLowScore, us_locale, firstScore, 1, "Win", null, lib);

            //Retrieve statistics first
            LeaderboardResult currentResult = lib.GetLeaderboardForBestScore(testGameLowScore, us_locale);
            long currentScore = long.Parse(lib.CheckLeaderboardResult(currentResult, LeaderboardPropertyType.BestScore));

            //Submit new low score
            long newScore = currentScore - 1;
            LeaderboardResult actualResult = lib.PostHigherScoreAndRetrieveLeaderboard(testGameLowScore, us_locale, null, null, -1);

            //Get actual result
            long actualScore = long.Parse(lib.CheckLeaderboardResult(actualResult, LeaderboardPropertyType.BestScore));

            Assert.AreEqual(newScore, actualScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify new higher score doesn't replace stored low score")]
        public void GetLeaderboard_LowScore_HigherScore()
        {
            MetroidTestScenarioLibrary lib = new MetroidTestScenarioLibrary(true);

            //Submit low score
            long firstScore = 300;
            PostGameResultAndVerify(testGameLowScore, us_locale, firstScore, 10, "Win", null, lib);

            //Submit higher score
            long newScore = firstScore + 1;
            LeaderboardResult actualResult = lib.PostHigherScoreAndRetrieveLeaderboard(testGameLowScore, us_locale, null, null, 1);

            //Get actual result
            long actualScore = long.Parse(lib.CheckLeaderboardResult(actualResult, LeaderboardPropertyType.BestScore));

            Assert.AreEqual(firstScore, actualScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify a new low score equal to the current low score doesn't change the low score")]
        public void GetLeaderboard_LowScore_EqualScore()
        {
            MetroidTestScenarioLibrary lib = new MetroidTestScenarioLibrary(true);

            //Submit low score
            long firstScore = 300;
            PostGameResultAndVerify(testGameLowScore, us_locale, firstScore, 10, "Win", null, lib);

            long lowScore = long.Parse(lib.GetStatValue(testGameLowScore, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            PostGameResultAndVerify(testGameLowScore, us_locale, lowScore, 1, "Win", "My blob", lib);
            LeaderboardResult actualResult = lib.GetLeaderboardForBestScore(testGameLowScore, us_locale);

            //Get actual result
            long actualScore = long.Parse(lib.CheckLeaderboardResult(actualResult, LeaderboardPropertyType.BestScore));

            Assert.AreEqual(lowScore, actualScore, "Low score has changed");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify submitting multiple higher scores does not change the low score")]
        public void GetLeaderboard_LowScore_MultipleHighScore()
        {
            MetroidTestScenarioLibrary lib = new MetroidTestScenarioLibrary(true);

            //Submit low score
            long firstScore = 300;
            PostGameResultAndVerify(testGameLowScore, us_locale, firstScore, 10, "Win", null, lib);

            //Retrieve statistics first
            long lowScore = long.Parse(lib.GetStatValue(testGameLowScore, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            //Submit three higher user scores
            long newScore = lowScore + 1;
            PostGameResultAndVerify(testGameLowScore, us_locale, newScore, 1, "Win", null, lib);
            PostGameResultAndVerify(testGameLowScore, us_locale, newScore, 1, "Win", null, lib);
            PostGameResultAndVerify(testGameLowScore, us_locale, newScore, 1, "Win", null, lib);

            //Get actual result
            LeaderboardResult actualResult = lib.GetLeaderboardForBestScore(testGameLowScore, us_locale);
            long actualScore = long.Parse(lib.CheckLeaderboardResult(actualResult, LeaderboardPropertyType.BestScore));

            Assert.AreEqual(lowScore, actualScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify after submitting 3 new low scores the correct value is stored")]
        public void GetLeaderboard_LowScore_MultipleLowScore()
        {
            MetroidTestScenarioLibrary lib = new MetroidTestScenarioLibrary(true);

            //Submit low score
            long firstScore = 300;
            PostGameResultAndVerify(testGameLowScore, us_locale, firstScore, 10, "Win", null, lib);

            //Retrieve statistics first
            long lowScore = long.Parse(lib.GetStatValue(testGameLowScore, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            //Submit three lower user scores
            long newScore = lowScore - 1;
            PostGameResultAndVerify(testGameLowScore, us_locale, newScore, 1, "Win", null, lib);
            PostGameResultAndVerify(testGameLowScore, us_locale, newScore, 1, "Win", null, lib);
            PostGameResultAndVerify(testGameLowScore, us_locale, newScore, 1, "Win", null, lib);

            //Get actual result
            LeaderboardResult actualResult = lib.GetLeaderboardForBestScore(testGameLowScore, us_locale);
            long actualScore = long.Parse(lib.CheckLeaderboardResult(actualResult, LeaderboardPropertyType.BestScore));

            Assert.AreEqual(newScore, actualScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify after submitting 3 new decreasingly lower scores the correct value is stored")]
        public void GetLeaderboard_LowScore_MultipleDecreasingScore()
        {
            MetroidTestScenarioLibrary lib = new MetroidTestScenarioLibrary(true);

            //Submit low score
            long firstScore = 300;
            PostGameResultAndVerify(testGameLowScore, us_locale, firstScore, 10, "Win", null, lib);

            //Retrieve statistics first
            long lowScore = long.Parse(lib.GetStatValue(testGameLowScore, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            //Submit three lower user scores
            long newScore = lowScore;
            for (int i = 1; i <= 3; i++)
            {
                newScore = lowScore - i;
                PostGameResultAndVerify(testGameLowScore, us_locale, newScore, 10, "Win", null, lib);
            }

            //Get actual result
            long actualScore = long.Parse(lib.GetStatValue(testGameLowScore, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            Assert.AreEqual(newScore, actualScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify after submitting 3 new increasingly higher scores the correct value is stored")]
        public void GetLeaderboard_LowScore_MultipleIncreasingScore()
        {
            MetroidTestScenarioLibrary lib = new MetroidTestScenarioLibrary(true);

            //Submit low score
            long firstScore = 300;
            PostGameResultAndVerify(testGameLowScore, us_locale, firstScore, 10, "Win", null, lib);

            //Retrieve statistics first
            long lowScore = long.Parse(lib.GetStatValue(testGameLowScore, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            //Submit three higher user scores
            long newScore = lowScore;
            for (int i = 1; i <= 3; i++)
            {
                newScore = lowScore + i;
                PostGameResultAndVerify(testGameLowScore, us_locale, newScore, 10, "Win", null, lib);
            }

            //Get actual result
            long actualScore = long.Parse(lib.GetStatValue(testGameLowScore, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            Assert.AreEqual(lowScore, actualScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify after submitting three scores of 0 the correct value is stored")]
        public void GetLeaderboard_LowScore_MultipleZeroScore()
        {
            MetroidTestScenarioLibrary lib = new MetroidTestScenarioLibrary(true);

            //Submit low score
            long firstScore = 300;
            PostGameResultAndVerify(testGameLowScore, us_locale, firstScore, 10, "Win", null, lib);

            //Retrieve statistics first
            long lowScore = long.Parse(lib.GetStatValue(testGameLowScore, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            //Submit three user scores equal to zero
            long newScore = 0;
            PostGameResultAndVerify(testGameLowScore, us_locale, newScore, 10, "Win", null, lib);
            PostGameResultAndVerify(testGameLowScore, us_locale, newScore, 10, "Win", null, lib);
            PostGameResultAndVerify(testGameLowScore, us_locale, newScore, 10, "Win", null, lib);

            //Get actual result
            long actualScore = long.Parse(lib.GetStatValue(testGameLowScore, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            Assert.AreEqual(newScore, actualScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify that a user who earned a score of 0 in a played game has 0 low score")]
        public void GetLeaderboard_LowScore_ZeroScore()
        {
            //Create a new account
            MetroidTestScenarioLibrary newAccountScenarios = new MetroidTestScenarioLibrary(true);

            //Submit a game score equal to zero
            PostGameResultAndVerify(testGameLowScore, us_locale, 0, 1, "Win", null, newAccountScenarios);

            //Retrieve statistics
            long lowScore = long.Parse(newAccountScenarios.GetStatValue(testGameLowScore, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            Assert.AreEqual(0, lowScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify that a user who has a positive score in a played game but a time of 0 has a low score")]
        public void GetLeaderboard_LowScore_ZeroTime()
        {
            //Create a new account
            MetroidTestScenarioLibrary newAccountScenarios = new MetroidTestScenarioLibrary(true);

            //Submit a user score and 0 time
            long newScore = rand.Next(1, 500);
            PostGameResultAndVerify(testGameLowScore, us_locale, newScore, 0, "Win", null, newAccountScenarios);

            //Retrieve statistics
            long lowScore = long.Parse(newAccountScenarios.GetStatValue(testGameLowScore, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            Assert.AreEqual(newScore, lowScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify that a user who earned 0 score and 0 time in a played game has 0 low score")]
        public void GetLeaderboard_LowScore_ZeroScoreZeroTime()
        {
            //Create a new account
            MetroidTestScenarioLibrary newAccountScenarios = new MetroidTestScenarioLibrary(true);

            //Submit a user score and time equal to zero
            PostGameResultAndVerify(testGameLowScore, us_locale, 0, 0, "Win", null, newAccountScenarios);

            //Retrieve statistics
            long lowScore = long.Parse(newAccountScenarios.GetStatValue(testGameLowScore, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            Assert.AreEqual(0, lowScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify that subsequent calls to GetLeaderboard return the same low score")]
        public void GetLeaderboard_LowScore_CallMultipleTimes()
        {
            //Submit low score
            PostGameResultAndVerify(testGameLowScore, us_locale, 1, 1, "Win", null, testScenarios);

            //Retrieve statistics twice
            long firstScore = long.Parse(testScenarios.GetStatValue(testGameLowScore, us_locale, LeaderboardPropertyType.BestTime, "BestScore"));
            long secondScore = long.Parse(testScenarios.GetStatValue(testGameLowScore, us_locale, LeaderboardPropertyType.BestTime, "BestScore"));

            Assert.AreEqual(firstScore, secondScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify low score is unchanged in game1 and updated in game2 when game2's low score is updated")]
        public void GetLeaderboard_LowScore_SameUserDifferentGame()
        {
            //Get two test games with Best Low Score variants
            TestGame game1 = TestGameUtility.GetTestGame("SeaLegend", 3);
            TestGame game2 = TestGameUtility.GetTestGame("Hide And Seek", 3);

            MetroidTestScenarioLibrary lib = new MetroidTestScenarioLibrary(true);

            //Post some results for first two games
            PostGameResultAndVerify(game1, us_locale, 100, 100, "Win", null, lib);
            PostGameResultAndVerify(game2, us_locale, 100, 100, "Win", null, lib);

            long firstGameScore = long.Parse(lib.GetStatValue(game1, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));
            long secondGameScore = long.Parse(lib.GetStatValue(game2, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            //Update the low score for game 2
            long newScore = secondGameScore - 1;
            PostGameResultAndVerify(game2, us_locale, newScore, 10, "Win", null, lib);

            //Verify game 1 score is unchanged
            long firstGameNewScore = long.Parse(lib.GetStatValue(game1, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));
            Assert.AreEqual(firstGameScore, firstGameNewScore, "Incorrect score returned for game 1");

            //Verify game 2 score is updated
            long secondGameNewScore = long.Parse(lib.GetStatValue(game2, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));
            Assert.AreEqual(newScore, secondGameNewScore, "Incorrect score returned for game 2");
        }

        #endregion // Low score tests
        #region Cumulative score tests

        [TestMethod]
        [TestProperty("BugId", "8610")]
        [Ignore]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify the behavior when cumulative score is greater than long.MaxValue")]
        public void GetLeaderboard_CumulativeScore_OverBoundary()
        {
            //Create a new account
            MetroidTestScenarioLibrary newAccountScenarios = new MetroidTestScenarioLibrary(true);

            //Post game results
            long newScore = long.MaxValue;
            PostGameResultAndVerify(testGame, us_locale, newScore, 1, "Win", null, newAccountScenarios);
            PostGameResultAndVerify(testGame, us_locale, 1, 1, "Win", null, newAccountScenarios);

            //Retrieve stats
            Response response = newAccountScenarios.GetLeaderboardXml(testGame.GameId.ToString(), testGame.Variant.ToString(), "BestScore", "0", "Lifetime", "100", us_locale, testGame.PlatformId.ToString(), "2");
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http status code mismatch");

            string expectedScore = MetroidTestUtil.GetMaxLongPlusOne();
            string cumulativeScore = newAccountScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore");
            Assert.AreEqual(expectedScore, cumulativeScore, "Cumulative score was not as expected - bug #8610"); 
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify the cumulative score is correct for a new user after posting the user's first score")]
        public void GetLeaderboard_CumulativeScore_FirstScore()
        {
            //Create a new account
            MetroidTestScenarioLibrary newAccountScenarios = new MetroidTestScenarioLibrary(true);

            //Submit the user's first score (a random number)
            int newScore = rand.Next(1, 999);
            PostGameResultAndVerify(testGame, us_locale, newScore, 10, "Win", "My blob", newAccountScenarios);

            //Get new result
            long newCumulativeScore = long.Parse(newAccountScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));
            Assert.AreEqual(newScore, newCumulativeScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify the cumulative score increases when a new random score is posted")]
        public void GetLeaderboard_CumulativeScore_NewScore()
        {
            long newScore = rand.Next(1, 99);

            //Retrieve statistics first
            long cumulativeScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));

            //Submit the new score
            PostGameResultAndVerify(testGame, us_locale, newScore, 100, "Win", "My blob", testScenarios);

            //Get new result
            long newCumulativeScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));

            Assert.AreEqual(cumulativeScore + newScore, newCumulativeScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify the cumulative score increases when a new high score is posted")]
        public void GetLeaderboard_CumulativeScore_NewHigherScore()
        {
            //Retrieve statistics first
            long cumulativeScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));

            //Post a new high score
            long newScore = cumulativeScore + 1;
            PostGameResultAndVerify(testGame, us_locale, newScore, 100, "Win", "My blob", testScenarios);

            //Get new result
            long newCumulativeScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));

            Assert.AreEqual(cumulativeScore + newScore, newCumulativeScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify the cumulative score increases when a new lower score is posted")]
        public void GetLeaderboard_CumulativeScore_NewLowerScore()
        {
            //Retrieve statistics first
            long cumulativeScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));

            //Post a new high score
            long newScore = cumulativeScore - 1;
            PostGameResultAndVerify(testGame, us_locale, newScore, 10, "Win", "My blob", testScenarios);

            //Get new result
            long newCumulativeScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));

            Assert.AreEqual(cumulativeScore + newScore, newCumulativeScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify the cumulative score increases when a new equal score is posted")]
        public void GetLeaderboard_CumulativeScore_NewEqualScore()
        {
            //Retrieve statistics first
            long cumulativeScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));

            //Post a new high score
            long newScore = cumulativeScore;
            PostGameResultAndVerify(testGame, us_locale, newScore, 10, "Win", "My blob", testScenarios);

            //Get new result
            long newCumulativeScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));

            Assert.AreEqual(cumulativeScore + newScore, newCumulativeScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify the cumulative score does not increase when a new zero score is posted")]
        public void GetLeaderboard_CumulativeScore_NewZeroScore()
        {
            //Retrieve statistics first
            long cumulativeScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));

            //Post a new high score
            long newScore = 0;
            PostGameResultAndVerify(testGame, us_locale, newScore, 10, "Win", "My blob", testScenarios);

            //Get new result
            long newCumulativeScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));

            Assert.AreEqual(cumulativeScore, newCumulativeScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify cumulative score is unchanged in game1 and updated in game2 when game2's score is updated")]
        public void GetLeaderboard_CumulativeScore_SameUserDifferentGame()
        {
            //Get two test games with Best High Score variants
            TestGame game1 = TestGameUtility.GetTestGame("SeaLegend", 4);
            TestGame game2 = TestGameUtility.GetTestGame("Hide And Seek", 4);

            //Create some results
            PostGameResultAndVerify(game1, us_locale, 100, 100, null, null, testScenarios);
            PostGameResultAndVerify(game2, us_locale, 100, 100, null, null, testScenarios);

            //Retrieve the current cumulative scores
            long game1CumulativeScore = long.Parse(testScenarios.GetStatValue(game1, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));
            long game2CumulativeScore = long.Parse(testScenarios.GetStatValue(game2, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));

            //Update the cumulative score for game 2
            long newScore = rand.Next(1, 999);
            PostGameResultAndVerify(game2, us_locale, newScore, 100, null, null, testScenarios);

            //Verify game 1 statistics
            long game1NewCumulativeScore = long.Parse(testScenarios.GetStatValue(game1, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));
            Assert.AreEqual(game1NewCumulativeScore, game1CumulativeScore, "Incorrect score returned for game 1");

            //Verify game 2 statistics
            long game2NewCumulativeScore = long.Parse(testScenarios.GetStatValue(game2, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));
            Assert.AreEqual(game2NewCumulativeScore, game2CumulativeScore + newScore, "Incorrect score returned for game 2");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify cumulative score is unchanged after subsequent GetLeaderboard calls")]
        public void GetLeaderboard_CumulativeScore_MultipleCalls()
        {
            //Retrieve statistics
            long firstScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));
            long secondScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));

            Assert.AreEqual(firstScore, secondScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify cumulative score is updated after three new random scores are posted")]
        public void GetLeaderboard_CumulativeScore_MultipleScores()
        {
            //Retrieve statistics first
            long currentScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));

            //Post three new random scores
            long newScore1 = rand.Next(1, 99);
            long newScore2 = rand.Next(1, 99);
            long newScore3 = rand.Next(1, 99);
            PostGameResultAndVerify(testGame, us_locale, newScore1, 10, null, null, testScenarios);
            PostGameResultAndVerify(testGame, us_locale, newScore2, 10, null, null, testScenarios);
            PostGameResultAndVerify(testGame, us_locale, newScore3, 10, null, null, testScenarios);

            //Get new result
            long actualScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));

            long newCalculatedScore = currentScore + newScore1 + newScore2 + newScore3;
            Assert.AreEqual(newCalculatedScore, actualScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify cumulative score is updated after three new scores of decreasing value are posted")]
        public void GetLeaderboard_CumulativeScore_MultipleScoresDecreasingValue()
        {
            //Retrieve statistics first
            long currentScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));

            PostGameResultAndVerify(testGame, us_locale, 3, 10, null, null, testScenarios);
            PostGameResultAndVerify(testGame, us_locale, 2, 10, null, null, testScenarios);
            PostGameResultAndVerify(testGame, us_locale, 1, 10, null, null, testScenarios);

            //Get new result
            long actualScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));

            long newCalculatedScore = currentScore + 6;
            Assert.AreEqual(newCalculatedScore, actualScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify cumulative score is updated after three new scores of increasing value are posted")]
        public void GetLeaderboard_CumulativeScore_MultipleScoresIncreasingValue()
        {
            //Retrieve statistics first
            long currentScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));

            //Post three new scores of increasing value
            PostGameResultAndVerify(testGame, us_locale, 1, 10, null, null, testScenarios);
            PostGameResultAndVerify(testGame, us_locale, 2, 10, null, null, testScenarios);
            PostGameResultAndVerify(testGame, us_locale, 3, 10, null, null, testScenarios);

            //Get new result
            long actualScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));
            long newCalculatedScore = currentScore + 6;

            Assert.AreEqual(newCalculatedScore, actualScore, "Incorrect score returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify cumulative score is updated after three new scores of the same value are posted")]
        public void GetLeaderboard_CumulativeScore_MultipleSameScores()
        {
            //Retrieve statistics first
            long currentScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));

            //Post three new scores
            long newScore = rand.Next(1, 999);
            PostGameResultAndVerify(testGame, us_locale, newScore, 10, null, null, testScenarios);
            PostGameResultAndVerify(testGame, us_locale, newScore, 10, null, null, testScenarios);
            PostGameResultAndVerify(testGame, us_locale, newScore, 10, null, null, testScenarios);

            //Get new result
            long actualScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeScore, "BestScore"));
            long newCalculatedScore = currentScore + (newScore * 3);

            Assert.AreEqual(newCalculatedScore, actualScore, "Incorrect score returned");
        }

        #endregion // Cumulative score tests
        #region Cumulative time tests

        [TestMethod]
        [TestProperty("BugId", "8610")]
        [Ignore]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify the behavior when cumulative time is greater than long.MaxValue")]
        public void GetLeaderboard_CumulativeTime_OverBoundary()
        {
            //Create a new account
            MetroidTestScenarioLibrary newAccountScenarios = new MetroidTestScenarioLibrary(true);

            //Post game results
            long newTime = long.MaxValue;
            PostGameResultAndVerify(testGame, us_locale, 1, newTime, "Win", null, newAccountScenarios);
            PostGameResultAndVerify(testGame, us_locale, 1, 1, "Win", null, newAccountScenarios);

            //Retrieve stats
            Response response = newAccountScenarios.GetLeaderboardXml(testGame.GameId.ToString(), testGame.Variant.ToString(), "BestTime", "0", "Lifetime", "100", us_locale, testGame.PlatformId.ToString(), "2");
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http status code mismatch - bug #8610");

            string expectedTime = MetroidTestUtil.GetMaxLongPlusOne();
            string cumulativeTime = newAccountScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime");
            Assert.AreEqual(expectedTime, cumulativeTime, "Cumulative time was not as expected"); 
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify the cumulative time is correct for a new user after posting the user's first time")]
        public void GetLeaderboard_CumulativeTime_FirstTime()
        {
            //Create a new account
            MetroidTestScenarioLibrary newAccountScenarios = new MetroidTestScenarioLibrary(true);

            //Submit the user's first time (a random number)
            int newTime = rand.Next(1, 999);
            PostGameResultAndVerify(testGame, us_locale, 10, newTime, "Win", "My blob", newAccountScenarios);

            //Get new result
            long newCumulativeTime = long.Parse(newAccountScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));
            Assert.AreEqual(newCumulativeTime, newTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify the cumulative time is correct for a user after posting time")]
        public void GetLeaderboard_CumulativeTime_UpdateTime()
        {
            int newTime = rand.Next(1, 500);

            //Retrieve statistics first
            long cumulativeTime = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));

            //Submit the user's time
            PostGameResultAndVerify(testGame, us_locale, 10, newTime, "Win", "My blob", testScenarios);

            //Get new result
            long newCumulativeTime = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));
            Assert.AreEqual(cumulativeTime + newTime, newCumulativeTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify the cumulative time is correct for a user after posting a higher time")]
        public void GetLeaderboard_CumulativeTime_HigherTime()
        {
            //Retrieve statistics first
            long cumulativeTime = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));
            long highTime = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));
            long newTime = highTime + 1;

            //Submit the user's time
            PostGameResultAndVerify(testGame, us_locale, 10, newTime, "Win", "My blob", testScenarios);

            //Get new result
            long newCumulativeTime = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));
            Assert.AreEqual(cumulativeTime + newTime, newCumulativeTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify the cumulative time is correct for a user after posting a lower time")]
        public void GetLeaderboard_CumulativeTime_LowerTime()
        {
            //Retrieve statistics first
            long cumulativeTime = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));
            long highTime = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));
            long newTime = highTime - 1;

            //Submit the user's time
            PostGameResultAndVerify(testGame, us_locale, 10, newTime, "Win", "My blob", testScenarios);

            //Get new result
            long newCumulativeTime = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));
            Assert.AreEqual(cumulativeTime + newTime, newCumulativeTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify the cumulative time is correct for a user after posting a time of 0")]
        public void GetLeaderboard_CumulativeTime_ZeroTime()
        {
            //Retrieve statistics first
            long cumulativeTime = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));

            //Submit the user's time
            PostGameResultAndVerify(testGame, us_locale, 10, 0, "Win", "My blob", testScenarios);

            //Get new result
            long newCumulativeTime = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));
            Assert.AreEqual(cumulativeTime, newCumulativeTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify the cumulative time is correct for a new user after posting a time of 0")]
        public void GetLeaderboard_CumulativeTime_NewZeroTime()
        {
            //Create a new account
            MetroidTestScenarioLibrary newAccountScenarios = new MetroidTestScenarioLibrary(true);
            
            //Submit the user's time
            PostGameResultAndVerify(testGame, us_locale, 10, 0, "Win", "My blob", newAccountScenarios);

            //Get new result
            long newCumulativeTime = long.Parse(newAccountScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));
            Assert.AreEqual(0, newCumulativeTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify the cumulative time is correct for a user after posting an equal high score")]
        public void GetLeaderboard_CumulativeTime_HighScore()
        {
            //Retrieve statistics first
            long highScore = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));
            long cumulativeTime = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));
            long newTime = rand.Next(1, 500);

            //Submit the user's time (a random number)
            PostGameResultAndVerify(testGame, us_locale, highScore, newTime, "Win", "My blob", testScenarios);

            //Get new result
            long newCumulativeTime = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));
            Assert.AreEqual(cumulativeTime + newTime, newCumulativeTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify the cumulative time is correct for a user after posting time")]
        public void GetLeaderboard_CumulativeTime_MultipleCalls()
        {
            //Retrieve statistics
            long firstCumulativeTime = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));
            long secondCumulativeTime = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));

            Assert.AreEqual(firstCumulativeTime, secondCumulativeTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify cumulative time is unchanged in game1 and updated in game2 when game2's time is updated")]
        public void GetLeaderboard_CumulativeTime_SameUserDifferentGame()
        {
            //Get two test games with Best High Time variants
            TestGame game1 = TestGameUtility.GetTestGame("SeaLegend", 6);
            TestGame game2 = TestGameUtility.GetTestGame("Hide And Seek", 6);

            //Create some results
            PostGameResultAndVerify(game1, us_locale, 100, 100, null, null, testScenarios);
            PostGameResultAndVerify(game2, us_locale, 100, 100, null, null, testScenarios);

            //Retrieve the current cumulative scores
            long game1CumulativeTime = long.Parse(testScenarios.GetStatValue(game1, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));
            long game2CumulativeTime = long.Parse(testScenarios.GetStatValue(game2, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));

            //Update the cumulative score for game 2
            long newTime = rand.Next(1, 999);
            PostGameResultAndVerify(game2, us_locale, 100, newTime, null, null, testScenarios);

            //Verify game 1 statistics
            long game1NewCumulativeTime = long.Parse(testScenarios.GetStatValue(game1, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));
            Assert.AreEqual(game1NewCumulativeTime, game1CumulativeTime, "Incorrect time returned for game 1");

            //Verify game 2 statistics
            long game2NewCumulativeTime = long.Parse(testScenarios.GetStatValue(game2, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));
            Assert.AreEqual(game2NewCumulativeTime, game2CumulativeTime + newTime, "Incorrect time returned for game 2");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify cumulative time is updated after three new times of increasing value are posted")]
        public void GetLeaderboard_CumulativeTime_MultipleTimesIncreasingValue()
        {
            //Retrieve statistics first
            long currentTime = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));

            //Post three new scores of increasing value
            PostGameResultAndVerify(testGame, us_locale, 10, 1, null, null, testScenarios);
            PostGameResultAndVerify(testGame, us_locale, 10, 2, null, null, testScenarios);
            PostGameResultAndVerify(testGame, us_locale, 10, 3, null, null, testScenarios);

            //Get new result
            long actualTime = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));
            long newCalculatedTime = currentTime + 6;

            Assert.AreEqual(newCalculatedTime, actualTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify cumulative time is updated after three new times of decreasing value are posted")]
        public void GetLeaderboard_CumulativeTime_MultipleTimesDecreasingValue()
        {
            //Retrieve statistics first
            long currentTime = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));

            //Post three new scores of increasing value
            PostGameResultAndVerify(testGame, us_locale, 10, 3, null, null, testScenarios);
            PostGameResultAndVerify(testGame, us_locale, 10, 2, null, null, testScenarios);
            PostGameResultAndVerify(testGame, us_locale, 10, 1, null, null, testScenarios);

            //Get new result
            long actualTime = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));
            long newCalculatedTime = currentTime + 6;

            Assert.AreEqual(newCalculatedTime, actualTime, "Incorrect time returned");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify cumulative time is updated after three new times of equal value are posted")]
        public void GetLeaderboard_CumulativeTime_MultipleTimesEqualValue()
        {
            //Retrieve statistics first
            long currentTime = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));

            //Post three new scores of increasing value
            PostGameResultAndVerify(testGame, us_locale, 10, 3, null, null, testScenarios);
            PostGameResultAndVerify(testGame, us_locale, 10, 3, null, null, testScenarios);
            PostGameResultAndVerify(testGame, us_locale, 10, 3, null, null, testScenarios);

            //Get new result
            long actualTime = long.Parse(testScenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.CumulativeTime, "BestTime"));
            long newCalculatedTime = currentTime + 9;

            Assert.AreEqual(newCalculatedTime, actualTime, "Incorrect time returned");
        }

        #endregion // Cumulative time tests
        #region Multiple variants

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        public void GetLeaderboards_BestTime_Verify()
        {
            testScenarios.PostGameResultWithDefaultStats(TestGameUtility.AllStatsGame, us_locale);
            LeaderboardResult result = testScenarios.GetLeaderboardForBestTime(TestGameUtility.AllStatsGame, us_locale);
            Assert.IsNotNull(result);
            Assert.IsTrue(result.TotalNumberOfRows > 0);
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        public void GetLeaderboards_BestTimeOnly_Verify()
        {
            testScenarios.PostGameResultWithDefaultStats(TestGameUtility.BestTimeGame, us_locale);
            LeaderboardResult result = testScenarios.GetLeaderboardForBestTime(TestGameUtility.BestTimeGame, us_locale);
            Assert.IsNotNull(result);
            Assert.IsTrue(result.TotalNumberOfRows > 0);
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        public void GetLeaderboards_BestScore_Verify()
        {
            testScenarios.PostGameResultWithDefaultStats(TestGameUtility.AllStatsGame, us_locale);
            LeaderboardResult result = testScenarios.GetLeaderboardForBestScore(TestGameUtility.AllStatsGame, us_locale);
            Assert.IsNotNull(result);
            Assert.IsTrue(result.TotalNumberOfRows > 0);
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        public void GetLeaderboards_BestScoreOnly_Verify()
        {
            testScenarios.PostGameResultWithDefaultStats(TestGameUtility.BestScoreGame, us_locale);
            LeaderboardResult result = testScenarios.GetLeaderboardForBestScore(TestGameUtility.BestScoreGame, us_locale);
            Assert.IsNotNull(result);
            Assert.IsTrue(result.TotalNumberOfRows > 0);
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        public void GetLeaderboards_Wins_Verify()
        {
            testScenarios.PostGameResultWithDefaultStats(TestGameUtility.AllStatsGame, us_locale);
            LeaderboardResult result = testScenarios.GetLeaderboardForWins(TestGameUtility.AllStatsGame, us_locale);
            Assert.IsNotNull(result);
            Assert.IsTrue(result.TotalNumberOfRows > 0);
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        public void GetLeaderboards_WinsOnly_Verify()
        {
            testScenarios.PostGameResultWithDefaultStats(TestGameUtility.WinsGame, us_locale);
            LeaderboardResult result = testScenarios.GetLeaderboardForWins(TestGameUtility.WinsGame, us_locale);
            Assert.IsNotNull(result);
            Assert.IsTrue(result.TotalNumberOfRows > 0);
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        public void GetLeaderboards_WinsReverseOnly_Verify()
        {
            testScenarios.PostGameResultWithDefaultStats(TestGameUtility.WinsGameReverse, us_locale);
            LeaderboardResult result = testScenarios.GetLeaderboardForWins(TestGameUtility.WinsGameReverse, us_locale);
            Assert.IsNotNull(result);
            Assert.IsTrue(result.TotalNumberOfRows > 0);
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        public void GetLeaderboards_CallBestScoreForUndefinedGame_Verify()
        {
            TestGame tg = TestGameUtility.BestTimeGame;
            Response result = testScenarios.GetLeaderboardXml(tg.GameId.ToString(), tg.Variant.ToString(), "BestScore", "1", "W1", "100", us_locale, tg.PlatformId.ToString(), "2");
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode);
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        public void GetLeaderboards_CallBestTimeForUndefinedGame_Verify()
        {
            TestGame tg = TestGameUtility.BestScoreGame;
            Response result = testScenarios.GetLeaderboardXml(tg.GameId.ToString(), tg.Variant.ToString(), "BestTime", "1", "W1", "100", us_locale, tg.PlatformId.ToString(), "2");
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode);
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        public void GetLeaderboards_CallWinsForUndefinedGame_Verify()
        {
            TestGame tg = TestGameUtility.BestTimeGame;
            Response result = testScenarios.GetLeaderboardXml(tg.GameId.ToString(), tg.Variant.ToString(), "Wins", "1", "W1", "100", us_locale, tg.PlatformId.ToString(), "2");
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode);
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        public void GetLeaderboards_LossesLeaderboard_VerifyError()
        {
            TestGame tg = TestGameUtility.AllStatsGame;
            Response result = testScenarios.GetLeaderboardXml(tg.GameId.ToString(), tg.Variant.ToString(), "Losses", "1", "W1", "100", us_locale, tg.PlatformId.ToString(), "2");
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode);
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        public void GetLeaderboards_CumulativeScoreLeaderboard_VerifyError()
        {
            TestGame tg = TestGameUtility.AllStatsGame;
            Response result = testScenarios.GetLeaderboardXml(tg.GameId.ToString(), tg.Variant.ToString(), "CumulativeScore", "1", "W1", "100", us_locale, tg.PlatformId.ToString(), "2");
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode);
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        public void GetLeaderboards_BestScoreReverse_VerifyScoresAreInReverse()
        {
            //Submit a new game result in case there was no leaderboard information
            TestGame tg = TestGameUtility.BestScoreGameReverse;
            GameResult result = testScenarios.CreateGameResult(tg, 100, 100, blob, "Win");
            testScenarios.PostGameResult(result, us_locale, tg.PlatformId, testGame.GameId);
            long score = long.Parse(testScenarios.GetStatValue(tg, us_locale, LeaderboardPropertyType.BestScore, "BestScore"));

            TestUser tu = AuthenticationTransport.PrimaryUser;
            //submit 1 more than the lowest score
            testScenarios.PostGameResult(tg, us_locale, score - 1, 1, "Win", blob);

            foreach (var item in tu.Friends)
            {
                testScenarios.PostGameResult(tg, us_locale, score, 1, "Win", blob);
                score++;
            }

            //Retrieve leaderboard and read all scores
            LeaderboardResult lr = testScenarios.GetLeaderboardForBestScore(tg, us_locale);
            ArrayList actualList = new ArrayList();
            foreach (var item in lr.Leaderboard)
            {
                long indScore = long.Parse(testScenarios.FindLeaderboardEntry(item, "BestScore"));
                actualList.Add(indScore);
            }

            ArrayList expectedList = actualList;
            actualList.Sort();

            Assert.AreEqual(expectedList, actualList, "Leaderboard items were not sorted");
                
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        public void GetLeaderboards_BestTimeReverse_VerifyTimesAreInReverse()
        {
            //Submit a new game result in case there was no leaderboard information
            TestGame tg = TestGameUtility.BestTimeGameReverse;
            GameResult result = testScenarios.CreateGameResult(tg, 100, 100, blob, "Win");
            testScenarios.PostGameResult(result, us_locale, tg.PlatformId, testGame.GameId);
            long time = long.Parse(testScenarios.GetStatValue(tg, us_locale, LeaderboardPropertyType.BestTime, "BestTime"));

            TestUser tu = AuthenticationTransport.PrimaryUser;
            //submit 1 more than the lowest score
            testScenarios.PostGameResult(tg, us_locale, 1, time-1, "Win", blob);

            foreach (var item in tu.Friends)
            {
                testScenarios.PostGameResult(tg, us_locale, 1, time, "Win", blob);
                time++;
            }

            //Retrieve leaderboard and read all scores
            LeaderboardResult lr = testScenarios.GetLeaderboardForBestTime(tg, us_locale);
            List<long> actualList = new List<long>();
            foreach (var item in lr.Leaderboard)
            {
                long indTime = long.Parse(testScenarios.FindLeaderboardEntry(item, "BestTime"));
                actualList.Add(indTime);
            }

            List<long> expectedList = actualList;
            actualList.Sort();

            Assert.AreEqual(expectedList, actualList, "Leaderboard items were not sorted");

        }

        #endregion Multiple variants
        #region Variable tests
        [TestMethod]
        [TestProperty("BugId", "9828")]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify format is a required variable")]
        public void GetLeaderboard_Variable_Format()
        {
            string query = "/leaderboard?gameId={gameId}&variant={variant}&property={property}&datagroup={datagroup}&numRows={numRows}&rankStart={rankStart}&socialGraph={socialGraph}";
            Response ret = ExecuteCustomLeaderboardQuery(query, "2", testGame);
            Assert.AreEqual(HttpStatusCode.NotFound, ret.StatusCode, "Http response status was not as expected");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify gameId is a required variable")]
        public void GetLeaderboard_Variable_GameId()
        {
            string query = "/leaderboard?format=xml&variant={variant}&property={property}&datagroup={datagroup}&numRows={numRows}&rankStart={rankStart}&socialGraph={socialGraph}";
            Response ret = ExecuteCustomLeaderboardQuery(query, "2", testGame);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "Http response status was not as expected");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify variant is an optional variable")]
        public void GetLeaderboard_Variable_Variant()
        {
            string query = "/leaderboard?format=xml&gameId={gameId}&property={property}&datagroup={datagroup}&numRows={numRows}&rankStart={rankStart}&socialGraph={socialGraph}";
            Response ret = ExecuteCustomLeaderboardQuery(query, "2", testGame);
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "Http response status was not as expected");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify property is a required variable")]
        public void GetLeaderboard_Variable_Property()
        {
            string query = "/leaderboard?format=xml&gameId={gameId}&variant={variant}&datagroup={datagroup}&numRows={numRows}&rankStart={rankStart}&socialGraph={socialGraph}";
            Response ret = ExecuteCustomLeaderboardQuery(query, "2", testGame);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "Http response status was not as expected");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify bad request when property is not supplied")]
        public void GetLeaderboard_Empty_Property()
        {

            Response result = testScenarios.GetLeaderboardXml(testGame.GameId.ToString(), testGame.Variant.ToString(), 
                                            string.Empty, "1", "W1", "100",us_locale, testGame.PlatformId.ToString(), "2");
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode);
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify rankStart is an optional variable")]
        public void GetLeaderboard_Variable_RankStart()
        {
            string query = "/leaderboard?format=xml&gameId={gameId}&variant={variant}&property={property}&datagroup={datagroup}&numRows={numRows}&socialGraph={socialGraph}";
            Response ret = ExecuteCustomLeaderboardQuery(query, "2", testGame);
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "Http response status was not as expected");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify numRows is a required variable")]
        public void GetLeaderboard_Variable_NumRows()
        {
            string query = "/leaderboard?format=xml&gameId={gameId}&variant={variant}&property={property}&datagroup={datagroup}&rankStart={rankStart}&socialGraph={socialGraph}";
            Response ret = ExecuteCustomLeaderboardQuery(query, "2", testGame);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "Http response status was not as expected");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify bad request when numRows is empty")]
        public void GetLeaderboard_Empty_NumRows()
        {
            Response result = testScenarios.GetLeaderboardXml(testGame.GameId.ToString(), testGame.Variant.ToString(), "BestScore",
                                                                           "1", "W1", string.Empty, us_locale, testGame.PlatformId.ToString(), "2");
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode);
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify dataGroup is a required variable")]
        public void GetLeaderboard_Variable_DataGroup()
        {
            string query = "/leaderboard?format=xml&gameId={gameId}&variant={variant}&property={property}&numRows={numRows}&rankStart={rankStart}&socialGraph={socialGraph}";
            Response ret = ExecuteCustomLeaderboardQuery(query, "2", testGame);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "Http response status was not as expected");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify dataGroup is not case sensitive using uppercase")]
        public void GetLeaderboard_Variable_DataGroup_Uppercase()
        {
            string datagroup = "Lifetime";
            string query = "/leaderboard?format=xml&gameId={gameId}&variant={variant}&property={property}&datagroup=" + datagroup + "&numRows={numRows}&rankStart={rankStart}&socialGraph={socialGraph}";
            Response ret = ExecuteCustomLeaderboardQuery(query, "2", testGame);
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "Http response status was not as expected");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify dataGroup is not case sensitive using lowercase")]
        public void GetLeaderboard_Variable_DataGroup_Lowercase()
        {
            string datagroup = "lifetime";
            string query = "/leaderboard?format=xml&gameId={gameId}&variant={variant}&property={property}&datagroup=" + datagroup + "&numRows={numRows}&rankStart={rankStart}&socialGraph={socialGraph}";
            Response ret = ExecuteCustomLeaderboardQuery(query, "2", testGame);
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "Http response status was not as expected");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify dataGroup is not case sensitive using uppercase and lowercase randomly")]
        public void GetLeaderboard_Variable_DataGroup_Wackycase()
        {
            string datagroup = "lIfEtIMe";
            string query = "/leaderboard?format=xml&gameId={gameId}&variant={variant}&property={property}&datagroup=" + datagroup + "&numRows={numRows}&rankStart={rankStart}&socialGraph={socialGraph}";
            Response ret = ExecuteCustomLeaderboardQuery(query, "2", testGame);
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "Http response status was not as expected");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify bad request when datagroup is missing")]
        public void GetLeaderboard_Empty_DataGroup()
        {
            Response result = testScenarios.GetLeaderboardXml(testGame.GameId.ToString(), testGame.Variant.ToString(), "BestScore",
                                                                           "1", string.Empty, "100", us_locale, testGame.PlatformId.ToString(), "2");
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode);
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify socialGraph is a required variable")]
        public void GetLeaderboard_Variable_SocialGraph()
        {
            string query = "/leaderboard?format=xml&gameId={gameId}&variant={variant}&property={property}&datagroup={datagroup}&numRows={numRows}&rankStart={rankStart}";
            Response ret = ExecuteCustomLeaderboardQuery(query, "2", testGame);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "Http response status was not as expected");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify bad request when social graph is missing")]
        public void GetLeaderboard_Empty_SocialGraph()
        {
            Response result = testScenarios.GetLeaderboardXml(testGame.GameId.ToString(), testGame.Variant.ToString(), "BestScore",
                                                                           "1", "W1", "100", us_locale, testGame.PlatformId.ToString(), string.Empty);
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode);
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify setting socialGraph = 0 produces a bad request error")]
        public void GetLeaderboard_Variable_SocialGraph_0()
        {
            string query = "/leaderboard?format=xml&gameId={gameId}&variant={variant}&property={property}&datagroup={datagroup}&numRows={numRows}&rankStart={rankStart}&socialGraph={socialGraph}";
            Response ret = ExecuteCustomLeaderboardQuery(query, "0", testGame);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "Http response status was not as expected");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify setting socialGraph = 1 produces a bad request error")]
        public void GetLeaderboard_Variable_SocialGraph_1()
        {
            string query = "/leaderboard?format=xml&gameId={gameId}&variant={variant}&property={property}&datagroup={datagroup}&numRows={numRows}&rankStart={rankStart}&socialGraph={socialGraph}";
            Response ret = ExecuteCustomLeaderboardQuery(query, "1", testGame);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "Http response status was not as expected");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify setting socialGraph = 3 produces a bad request error")]
        public void GetLeaderboard_Variable_SocialGraph_3()
        {
            string query = "/leaderboard?format=xml&gameId={gameId}&variant={variant}&property={property}&datagroup={datagroup}&numRows={numRows}&rankStart={rankStart}&socialGraph={socialGraph}";
            Response ret = ExecuteCustomLeaderboardQuery(query, "3", testGame);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "Http response status was not as expected");
        }
        #endregion
        #region Wins

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        public void GetLeaderboard_SubmitLoss_VerifyWinsCount()
        {
            LeaderboardResult initialLeaderboard = new LeaderboardResult();
            GameResult gr = testScenarios.CreateGameResult(testGame, 1, 1, blob, "Loss");
            LeaderboardResult newLeaderboard = testScenarios.PostGameResultAndRetrieveLeaderboard(gr, "Wins", us_locale, testGame.PlatformId, out initialLeaderboard);

            uint expectedWins = uint.Parse(testScenarios.CheckLeaderboardResult(initialLeaderboard, LeaderboardPropertyType.Wins));
            uint actualWins = uint.Parse(testScenarios.CheckLeaderboardResult(newLeaderboard, LeaderboardPropertyType.Wins));

            Assert.AreEqual(expectedWins, actualWins, "Submitting a loss in the result affected the number of Wins");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        public void GetLeaderboard_NewUserWin_VerifyWinRegistered()
        {
            MetroidTestScenarioLibrary newScenarios = new MetroidTestScenarioLibrary(true);

            GameResult gr = newScenarios.CreateGameResult(testGame, 1, 1, blob, "Win");
            newScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            LeaderboardResult result = newScenarios.GetLeaderboardForWins(testGame, us_locale);
            int actualWins = int.Parse(newScenarios.CheckLeaderboardResult(result, LeaderboardPropertyType.Wins));

            Assert.AreEqual(1, actualWins, "Win was not registered for user");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(1)]
        public void GetLeaderboard_NewUserLoss_VerifyWinCountZero()
        {
            MetroidTestScenarioLibrary newScenarios = new MetroidTestScenarioLibrary(true);

            GameResult gr = newScenarios.CreateGameResult(testGame, 1, 1, blob, "Loss");
            newScenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
            LeaderboardResult result = newScenarios.GetLeaderboardForWins(testGame, us_locale);

            uint actualWins = uint.Parse(newScenarios.CheckLeaderboardResult(result, LeaderboardPropertyType.Wins));

            Assert.AreEqual((uint)0, actualWins, "Win was not registered for user");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        public void GetLeaderboard_NoWinsLossStat_VerifyWinsCountSame()
        {
            LeaderboardResult initialLeaderboard = new LeaderboardResult();
            
            GameResult gr = new GameResult();
            gr.GameId = testGame.GameId;
            gr.GameResultId = Guid.NewGuid();
            gr.Score = 0;
            gr.Time = 0;
            gr.TimeStamp = DateTime.Now;
            gr.Variant = testGame.Variant;

            LeaderboardResult newLeaderboard = testScenarios.PostGameResultAndRetrieveLeaderboard(gr, "Wins", us_locale, testGame.PlatformId, out initialLeaderboard);

            uint expectedWins = uint.Parse(testScenarios.CheckLeaderboardResult(initialLeaderboard, LeaderboardPropertyType.Wins));
            uint actualWins = uint.Parse(testScenarios.CheckLeaderboardResult(newLeaderboard, LeaderboardPropertyType.Wins));

            Assert.AreEqual(expectedWins, actualWins, "Submitting no 'win/loss' stat in the result affected the number of Wins");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify a user who earns more wins than another rises in rank in the Wins leaderboard")]
        public void GetLeaderboard_RankUp_Wins()
        {
            Account user = AccountTransport.CreateAccount();
            Account friend = AccountTransport.CreateAccount();

            MetroidTestUtil.Wait(30);
            AccountTransport.MakeFriends(user, friend);

            MetroidTestScenarioLibrary libUser = new MetroidTestScenarioLibrary(user);
            MetroidTestScenarioLibrary libFriend = new MetroidTestScenarioLibrary(friend);

            // Post some wins - 3 for user and 2 for friend
            libUser.PostGameResultWithDefaultStats(testGame, us_locale);
            libFriend.PostGameResultWithDefaultStats(testGame, us_locale);
            libUser.PostGameResultWithDefaultStats(testGame, us_locale);
            libFriend.PostGameResultWithDefaultStats(testGame, us_locale);
            libUser.PostGameResultWithDefaultStats(testGame, us_locale);

            // check rank
            LeaderboardResult result = libUser.GetLeaderboardForWins(testGame, us_locale);
            Assert.AreEqual((uint)1, MetroidTestScenarioLibrary.GetRankForUserInLeaderboard(result, user.XblUser.Gamertag), "Rank for user {0} is incorrect", user.XblUser.Gamertag);
            Assert.AreEqual((uint)2, MetroidTestScenarioLibrary.GetRankForUserInLeaderboard(result, friend.XblUser.Gamertag), "Rank for user {0} is incorrect", friend.XblUser.Gamertag);

            // Post some wins - 2 for friend
            libFriend.PostGameResultWithDefaultStats(testGame, us_locale);
            libFriend.PostGameResultWithDefaultStats(testGame, us_locale);

            // check rank
            result = libUser.GetLeaderboardForWins(testGame, us_locale);
            Assert.AreEqual((uint)1, MetroidTestScenarioLibrary.GetRankForUserInLeaderboard(result, friend.XblUser.Gamertag), "Rank for user {0} is incorrect", user.XblUser.Gamertag);
            Assert.AreEqual((uint)2, MetroidTestScenarioLibrary.GetRankForUserInLeaderboard(result, user.XblUser.Gamertag), "Rank for user {0} is incorrect", friend.XblUser.Gamertag);
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        public void GetLeaderboard_GameWithWinsUndefined_VerifyError()
        {
            TestGame tg = TestGameUtility.BestScoreGame;
            Response result = testScenarios.GetLeaderboardXml(tg.GameId.ToString(), tg.Variant.ToString(), "Wins", "1", "W1", "100", us_locale, tg.PlatformId.ToString(), "2");
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode);
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        public void GetLeaderboard_AllFriendsZeroWins_VerifyBehavior()
        {
            Account acct = AccountTransport.CreateAccountWithFriends(3);

            MetroidTestScenarioLibrary scenarios = new MetroidTestScenarioLibrary(acct);
            LeaderboardResult result = scenarios.GetLeaderboardForWins(testGame, us_locale);

            Assert.AreEqual(0, (int)result.TotalNumberOfRows, "Leaderboard is non empty");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify when three friends have the same score, they are ranked in order of the first to score down to the last to score")]
        public void GetLeaderboard_AllFriendsEqualWins_VerifyBehavior()
        {
            Account acct = AccountTransport.CreateAccount();
            Account friend1 = AccountTransport.CreateAccount();
            Account friend2 = AccountTransport.CreateAccount();
            MetroidTestUtil.Wait(30);

            AccountTransport.MakeFriends(acct, friend1);
            AccountTransport.MakeFriends(acct, friend2);
            
            MetroidTestScenarioLibrary scenarios = new MetroidTestScenarioLibrary(acct);
            GameResult gr1 = scenarios.CreateGameResult(testGame, 1, 1, blob, "Win");
            GameResult gr2 = scenarios.CreateGameResult(testGame, 1, 1, blob, "Win");
            GameResult gr3 = scenarios.CreateGameResult(testGame, 1, 1, blob, "Win");

            scenarios.PostGameResult(gr1, us_locale, testGame.PlatformId, testGame.GameId);
            scenarios.PostGameResultForUser(gr2, friend1.XblUser.Settings.UserPassportInfo.MemberName, friend1.XblUser.Settings.UserPassportInfo.Password, us_locale, testGame.PlatformId, testGame.GameId);
            scenarios.PostGameResultForUser(gr3, friend2.XblUser.Settings.UserPassportInfo.MemberName, friend2.XblUser.Settings.UserPassportInfo.Password, us_locale, testGame.PlatformId, testGame.GameId);

            LeaderboardResult result = scenarios.GetLeaderboardForWins(testGame, us_locale);

            Assert.AreEqual((uint)1, MetroidTestScenarioLibrary.GetRankForUserInLeaderboard(result, acct.XblUser.Gamertag), "Rank is incorrect for user {0}", acct.XblUser.Gamertag);
            Assert.AreEqual((uint)2, MetroidTestScenarioLibrary.GetRankForUserInLeaderboard(result, friend1.XblUser.Gamertag), "Rank is incorrect for user {0}", friend1.XblUser.Gamertag);
            Assert.AreEqual((uint)3, MetroidTestScenarioLibrary.GetRankForUserInLeaderboard(result, friend2.XblUser.Gamertag), "Rank is incorrect for user {0}", friend2.XblUser.Gamertag);
        }

        [TestMethod]
        [Owner("srkalyan")]
        [TestProperty("ScrumTeam", "metroids")]
        [Priority(2)]
        [Description("User posts for 3 friends but not himself, and query with rankStart=0 (meaning pivoting against user)and rows=1. ")]
        public void GetLeaderboard_ThreeFriends_UserPostNoData()
        {
            Account acct = AccountTransport.CreateAccount();
            Account friend1 = AccountTransport.CreateAccount();
            Account friend2 = AccountTransport.CreateAccount();
            Account friend3 = AccountTransport.CreateAccount();
            MetroidTestUtil.Wait(30);

            AccountTransport.MakeFriends(acct, friend1);
            AccountTransport.MakeFriends(acct, friend2);

            MetroidTestScenarioLibrary scenarios = new MetroidTestScenarioLibrary(acct);            
            GameResult gr1 = scenarios.CreateGameResult(testGame, 10, 1, blob, "Win");
            GameResult gr2 = scenarios.CreateGameResult(testGame, 9, 1, blob, "Win");
            GameResult gr3 = scenarios.CreateGameResult(testGame, 8, 1, blob, "Win");

            //Post for friends only.
            scenarios.PostGameResultForUser(gr1, friend1.XblUser.Settings.UserPassportInfo.MemberName, friend1.XblUser.Settings.UserPassportInfo.Password, us_locale, testGame.PlatformId, testGame.GameId);
            scenarios.PostGameResultForUser(gr2, friend2.XblUser.Settings.UserPassportInfo.MemberName, friend2.XblUser.Settings.UserPassportInfo.Password, us_locale, testGame.PlatformId, testGame.GameId);
            scenarios.PostGameResultForUser(gr3, friend3.XblUser.Settings.UserPassportInfo.MemberName, friend3.XblUser.Settings.UserPassportInfo.Password, us_locale, testGame.PlatformId, testGame.GameId);

            LeaderboardResult result = scenarios.GetLeaderboardForWins(testGame, us_locale, 0, 1);

            Assert.AreEqual((uint)1, MetroidTestScenarioLibrary.GetRankForUserInLeaderboard(result, friend1.XblUser.Gamertag), "Rank is incorrect for user {0}", friend1.XblUser.Gamertag);
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        public void GetLeaderboard_NoWinsStat_VerifyGamesPlayedUpdated()
        {
            GameResult gr = testScenarios.CreateGameResult(testGame, 0, 1, null, null);
            LeaderboardResult initialLeaderboard = new LeaderboardResult ();
            LeaderboardResult finalLeaderboard = testScenarios.PostGameResultAndRetrieveLeaderboard(gr, "Wins", us_locale, testGame.PlatformId, out initialLeaderboard);

            uint firstGamesPlayed = uint.Parse(testScenarios.CheckLeaderboardResult(initialLeaderboard, LeaderboardPropertyType.GamesPlayed));
            uint finalGamesPlayed = uint.Parse(testScenarios.CheckLeaderboardResult(finalLeaderboard, LeaderboardPropertyType.GamesPlayed));

            Assert.AreEqual(firstGamesPlayed + 1, finalGamesPlayed, "Games played should be incremented when wins stat was missing");
        }

        #endregion Wins
        #region Locale
        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify locale falls back on en_US when it is an unsupported locale")]
        public void GetLeaderboard_Locale_Unsupported()
        {
            Response response = testScenarios.GetLeaderboardXml(testGame.GameId.ToString(), testGame.Variant.ToString(), "BestScore", "1", "Lifetime", "100", Constants.UnsupportedLocale, testGame.PlatformId.ToString(), "2");
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http status code mismatch");
        }

        [TestMethod]
        [Owner("prkall")]
        [TestProperty("ScrumTeam","metroids")]
        [Priority(2)]
        [Description("Verify 400 is returned when no locale is set")]
        public void GetLeaderboard_Locale_None()
        {
            string emptyLocale = string.Empty;
            Response response = testScenarios.GetLeaderboardXml(testGame.GameId.ToString(), testGame.Variant.ToString(), "BestScore", "1", "Lifetime", "100", emptyLocale, testGame.PlatformId.ToString(), "2");
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http status code mismatch");
        }
        #endregion Locale
        #region Support functions

        /// <summary>
        /// Perform a PostGameResult action and verify the Http status returned is "202 Accepted"
        /// </summary>
        private void PostGameResultAndVerify(TestGame metroidTestGame, string locale, long score, long time, string outcome, string blob, MetroidTestScenarioLibrary testScenarioLibrary)
        {
            Response ret = testScenarioLibrary.PostGameResult(metroidTestGame, locale, score, time, outcome, blob);
            if (ret.StatusCode != HttpStatusCode.Accepted)
            {
                Assert.Inconclusive("Cannot run this test - PostGameResult failed");
            }
        }

        /// <summary>
        /// Perform a web service call to GetLeaderboard *without* the full URI - to be used for testing whether variables are optional or required
        /// </summary>
        private Response ExecuteCustomLeaderboardQuery(string query, string socialGraph, TestGame tg)
        {
            query = query.Replace("{gameId}", tg.GameId.ToString());
            query = query.Replace("{variant}", tg.Variant.ToString());
            query = query.Replace("{property}", "BestScore");
            query = query.Replace("{datagroup}", "W1");
            query = query.Replace("{numRows}", "100");
            query = query.Replace("{rankStart}", "1");
            query = query.Replace("{socialGraph}", socialGraph);

            return testScenarios.ExecuteCustomQuery("GetLeaderboard", query, null, tg);
        }

        #endregion
        
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\E2ETests.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using CloudServices.Test.Common.Configuration;
using AsyncMultiplayer.NotificationService;
using AsyncMultiplayer.SessionCommon;
using System.Threading;

namespace Multiplayer.Test.API
{

    /// <summary>
    /// Summary description for E2ETests
    /// </summary>
    [TestClass]
    public class E2ETests : TestAreaBase
    {
        private static NotificationTestCommon common = new NotificationTestCommon();

        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
            // Setting this to false to get logs out on TRX files
            Log.LogToFile = false;
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            LockTest();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            try
            {
                common.TestCleanup();
            }
            finally
            {
                UnlockTest();
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Will smoke test Notifications.")]
        [TestProperty("Type", "BVTs")]
        public void BasicE2ETest()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 4, "We need four users for this test");
            //P0 creates a session with at least 4 number of seats available 

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 4, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, sessionState);

            //This is not implemented yet.
            //verify your turn notification for P0
            //common.VerifyNotificationCreated(sessionState.GameID.ToString(), sessionState.SessionID, Notification.NotificationType.YourTurn, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);

            //P0 sends invite to P1, P2, P3
            common.SendInviteRequest(sessionState.SessionID, false, 3);
            for (int i = 1; i <= 3; i++)
            {
                common.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionState.SessionID, Notification.NotificationType.Invitation, Config.Environment.UserSettings[i].Membername, Config.Environment.UserSettings[i].Password);
            }

            //p2 joins the session
            JoinData joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 1);
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[2].Membername;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[2].Password;
            SessionState afterP2JoinSessionState = this.GameSessionProxy.JoinSession(sessionState.SessionID, joinData);

            AssertJoinSessionState(sessionState, afterP2JoinSessionState);

            ////verify that player joined notification is sent to p0
            //common.VerifyNotificationCreated(sessionState.GameID.ToString(), sessionState.SessionID, Notification.NotificationType.PlayerJoined, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);

            //verify that p2's invite notifcations is deleted
            VerifyNotifications(Constants.TESTGAMEID.ToString(), sessionState.SessionID, Notification.NotificationType.Invitation.ToString(), Config.Environment.UserSettings[2].Membername, Config.Environment.UserSettings[2].Password, 0);

            //TODO: Currently there are no testcases to reuse. Will think about this later.
            //p1 rejects the invite
            //verify invite notification is deleted for p2     
            //p3 joins the session

            joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 2);
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[3].Membername;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[3].Password;
            SessionState afterP3JoinSessionState = this.GameSessionProxy.JoinSession(sessionState.SessionID, joinData);

            AssertJoinSessionState(afterP2JoinSessionState, afterP3JoinSessionState);

            //p0 modifies the session info
            ModificationData modificationData = InitializeModificationData(afterP3JoinSessionState);
            modificationData.TotalSeatsAvailable = 3;
            modificationData.ReservedSeatsAvailable = 3;

            //Modify Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            this.GameSessionProxy.ModifySession(sessionState.SessionID.ToString(), sessionState.GameID.ToString(), modificationData);

            //View Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[2].Membername;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[2].Password;
            SessionState afterModifySessionState = this.GameSessionProxy.ViewSession(sessionState.SessionID.ToString(), sessionState.GameID.ToString());

            //Assert SessionState
            AssertModifySessionState(modificationData, afterP3JoinSessionState, afterModifySessionState);

            //p0 makes a move
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };
            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;
            this.GameStateProxy.PutGameState(sessionState.SessionID, creationData.GameID.ToString(), modifiableGameState);

            FullGameState gameStateAfterMove = this.GameStateProxy.GetGameState(sessionState.SessionID, creationData.GameID.ToString());
            VerifyGameStateChange(modifiableGameState, gameStateAfterMove);

            //verify your turn for p2
            List<Notification> nList = VerifyNotifications(sessionState.GameID.ToString(), sessionState.SessionID, Notification.NotificationType.YourTurn.ToString(), Config.Environment.UserSettings[2].Membername, Config.Environment.UserSettings[2].Password, 1);
            //verify default notification status
            Assert.AreEqual<Notification.NotificationStatus>(Notification.NotificationStatus.UnRead, nList[0].Status, "Error: Default notification status was not Unread.");

            //p2 makes the notification viewed
            this.NotificationsServiceProxy.UserID = Config.Environment.UserSettings[2].Membername;
            this.NotificationsServiceProxy.Password = Config.Environment.UserSettings[2].Password;
            this.NotificationsServiceProxy.UpdateNotification(nList[0].Id, Notification.NotificationStatus.Viewed.ToString());

            //verify update
            nList = VerifyNotifications(sessionState.GameID.ToString(), sessionState.SessionID, Notification.NotificationType.YourTurn.ToString(), Config.Environment.UserSettings[2].Membername, Config.Environment.UserSettings[2].Password, 1);
            Assert.AreEqual<Notification.NotificationStatus>(Notification.NotificationStatus.Viewed, nList[0].Status, "Error: Notification status was not updated.");

            //p3 veiws the session summary
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionEntry[] sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), String.Empty, String.Empty, "10", ShowSessionType.Active.ToString());
            Assert.IsNotNull(sessionEntries, "Error: Session Entry should not be null.");
            Assert.IsTrue(sessionEntries.Length > 0, "Error: Length should be greater than 0.");

            //p3 send user nudge for p2
            GameAction gameAction = new GameAction();
            gameAction.ActionType = GameActionType.UserNudge;
            gameAction.ActionData = new byte[] { 1 };
            gameAction.ActionTime = DateTime.Now;
            gameAction.SequenceNumber = 0;

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[3].Membername;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[3].Password;
            this.GameStateProxy.PostGameAction(
                sessionState.SessionID.ToString(),
                creationData.GameID.ToString(),
                gameAction);

            //verify nudge for p2
            common.VerifyNotificationCreated(sessionState.GameID.ToString(), sessionState.SessionID, Notification.NotificationType.Nudge, Config.Environment.UserSettings[2].Membername, Config.Environment.UserSettings[2].Password);

            //p2 makes a move
            modifiableGameState.ActiveSeatIndex = 2;
            byte[] gameData = TestAreaBase.GenerateRandomBytes();
            modifiableGameState.GameData = gameData;
            this.GameStateProxy.UserID = Config.Environment.UserSettings[2].Membername;
            this.GameStateProxy.Password = Config.Environment.UserSettings[2].Password;
            this.GameStateProxy.PutGameState(sessionState.SessionID, creationData.GameID.ToString(), modifiableGameState);

            gameStateAfterMove = this.GameStateProxy.GetGameState(sessionState.SessionID, creationData.GameID.ToString());
            VerifyGameStateChange(modifiableGameState, gameStateAfterMove);

            //verify your turn notification is deleted after making a move
            VerifyNotifications(sessionState.GameID.ToString(), sessionState.SessionID, Notification.NotificationType.YourTurn.ToString(), Config.Environment.UserSettings[2].Membername, Config.Environment.UserSettings[2].Password, 0);

            //verify your turn for p3
            common.VerifyNotificationCreated(sessionState.GameID.ToString(), sessionState.SessionID, Notification.NotificationType.YourTurn, Config.Environment.UserSettings[3].Membername, Config.Environment.UserSettings[3].Password);

            //p3 makes a move
            modifiableGameState.ActiveSeatIndex = 0;
            gameData = TestAreaBase.GenerateRandomBytes();
            modifiableGameState.GameData = gameData;
            this.GameStateProxy.UserID = Config.Environment.UserSettings[3].Membername;
            this.GameStateProxy.Password = Config.Environment.UserSettings[3].Password;
            this.GameStateProxy.PutGameState(sessionState.SessionID, creationData.GameID.ToString(), modifiableGameState);

            gameStateAfterMove = this.GameStateProxy.GetGameState(sessionState.SessionID, creationData.GameID.ToString());
            VerifyGameStateChange(modifiableGameState, gameStateAfterMove);

            //verify your turn for p0
            common.VerifyNotificationCreated(sessionState.GameID.ToString(), sessionState.SessionID, Notification.NotificationType.YourTurn, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);

            //p0 leaves the session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            this.GameSessionProxy.LeaveSession(sessionState.SessionID.ToString(), sessionState.GameID.ToString());

            //View Session after Leave
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[3].Membername;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[3].Password;
            SessionState afterP0LeaveSessionState = this.GameSessionProxy.ViewSession(sessionState.SessionID.ToString(), sessionState.GameID.ToString());

            //Assert SessionState
            AssertLeaveSessionState(afterModifySessionState, afterP0LeaveSessionState);
            Assert.AreEqual(1, afterP0LeaveSessionState.OwnerSeatIndex, "Error:Wrong owner.");

            //verify warning for p2
            nList = VerifyNotifications(sessionState.GameID.ToString(), sessionState.SessionID, Notification.NotificationType.Warning.ToString(), Config.Environment.UserSettings[2].Membername, Config.Environment.UserSettings[2].Password, 1);

            //verify p2 is now the owner of the session
            //p2 modifies the session info
            modificationData.TotalSeatsAvailable = 10;
            modificationData.ReservedSeatsAvailable = 2;

            //Modify Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[2].Membername;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[2].Password;
            this.GameSessionProxy.ModifySession(sessionState.SessionID.ToString(), sessionState.GameID.ToString(), modificationData);

            //View Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[2].Membername;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[2].Password;
            SessionState afterP2ModifySessionState = this.GameSessionProxy.ViewSession(sessionState.SessionID.ToString(), sessionState.GameID.ToString());

            //game end 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 1 };
            gameResults.LosingSeatIndexes = new int[] { 2 };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[2].Membername;
            this.GameStateProxy.Password = Config.Environment.UserSettings[2].Password;
            this.GameStateProxy.PostGameEnd(sessionState.SessionID, creationData.GameID.ToString(), gameResults);

            //you win\you lose
            common.VerifyNotificationCreated(sessionState.GameID.ToString(), sessionState.SessionID, Notification.NotificationType.YouWin, Config.Environment.UserSettings[2].Membername, Config.Environment.UserSettings[2].Password);
            common.VerifyNotificationCreated(sessionState.GameID.ToString(), sessionState.SessionID, Notification.NotificationType.YouLose, Config.Environment.UserSettings[3].Membername, Config.Environment.UserSettings[3].Password);

            //Delete all notifications of this session for P3
            this.NotificationsServiceProxy.DeleteNotificationBySession(sessionState.GameID.ToString(), sessionState.SessionID, Config.Environment.UserSettings[3].Membername, Config.Environment.UserSettings[3].Password);

            //verify delete
            VerifyNotifications(sessionState.GameID.ToString(), sessionState.SessionID, string.Empty, Config.Environment.UserSettings[3].Membername, Config.Environment.UserSettings[3].Password, 0);
        }


        private List<Notification> VerifyNotifications(string gameId, string sessionId, string type, string userId, string password, int notificationCount)
        {
            List<Notification> notifications = null;
            for (int i = 0; i < 10; i++)
            {
                notifications = this.NotificationsServiceProxy.GetNotifications(
                    gameId,
                    sessionId,
                    0,
                    Constants.IGNORE_lAST_ID,
                    100,
                    type,
                    false,
                   userId,
                    password,
                    null);
                Assert.IsNotNull(notifications);
                if (notificationCount == notifications.Count)
                    break;
                else
                    Thread.Sleep(2000);
            }
            Assert.AreEqual(notificationCount, notifications.Count, "Error: Unexpected number of notifications.");
            return notifications;
        }

        private void VerifyGameStateChange(ModifiableGameState modifiableGameState, FullGameState gameStateAfterMove)
        {
            Assert.AreEqual(modifiableGameState.ActiveSeatIndex, gameStateAfterMove.GameStateInfo.ActiveSeatIndex, "Error: Different active seat index.");
            for (int i = 0; i < modifiableGameState.GameData.Length; i++)
            {
                Assert.AreEqual(modifiableGameState.GameData[i], gameStateAfterMove.GameData[i], "Error: Game data should not be different.");
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\Constants.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using CloudServices.Test.Common.Configuration;

namespace Multiplayer.Test.API
{
    
    public class Constants
    {
        public static UInt32 TESTGAMEID = uint.Parse(Config.Environment.StsSettings.TitleId);
        public const UInt32 ALTERNATE_TESTGAMEID = 1297287395; // checkers (variant 0 is valid)
        public const UInt32 NONMULTIPLAYER_TESTGAMEID = 1297287392; // Flowers (variant 0 is valid)
        public const int TESTGAMEVARIANT = 0;
        public const int XBLFRPROCESSTIMEINSEC = 120;
        public const string IGNORE_lAST_ID = "";
        public const string SecurityTicketQuery = "/GetSecurityTicket?platformType={platformId}&titleId={titleId}&titleVersion={titleVersion}&clientVersion={clientVersion}&deviceId={deviceId}";
        public const string PartnerSecurityTicketQuery = "/GetPartnerSecurityTicket?xuid={xuid}&titleId={titleId}&titleVersion={titleVersion}";
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Metroid.Test\Utility\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Utility")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("fdb39528-4f5e-454f-8281-39cc59539900")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\Log.cs ===
﻿using System;
using System.Configuration;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Diagnostics;

namespace Multiplayer.Test.API
{
    /// <summary>
    /// 
    /// </summary>
    public enum LogLevel
    {
        Error,
        Info,
        Verbose
    }

    /// <summary>
    /// 
    /// </summary>
    public static class Log
    {
        private static String logDirectory;
        private static String filePath;
        private static Stream fs;

        /// <summary>
        /// 
        /// </summary>
        static Log()
        {
            LogToFile = true;
        }

        /// <summary>
        /// 
        /// </summary>
        public static bool LogToFile
        {
            get;
            set;
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="message"></param>
        public static void WriteLine(string message)
        {
            WriteLine(message, LogLevel.Info);
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="message"></param>
        /// <param name="level"></param>
        public static void WriteLine(string message, LogLevel level)
        {
            if (level == LogLevel.Verbose)
            {
                Debug.WriteLine(message);
                return;
            }

            if (LogToFile)
            {
                logDirectory = System.Configuration.ConfigurationManager.AppSettings["logDirectory"];

                if (!Directory.Exists(logDirectory))
                {
                    try
                    {
                        Directory.CreateDirectory(logDirectory);
                    }
                    catch (IOException ex)
                    {
                        WriteToConsole("");
                        WriteToConsole(ex.Message);
                        WriteToConsole(message);
                    }
                }
                else
                {
                    filePath = logDirectory + "\\MultiplayerTestLog" + DateTime.Now.ToString("yyyyMMdd") + ".log";

                    if (!File.Exists(filePath))
                    {
                        try
                        {
                            fs = File.Create(filePath);
                            WriteToFile(message);
                        }
                        catch(IOException ex)
                        {
                            WriteToConsole("");
                            WriteToConsole(ex.Message);
                            WriteToConsole(message);
                        }
                    }
                    else
                    {
                        try
                        {
                            fs = File.Open(filePath, FileMode.Append);
                            WriteToFile(message);
                        }
                        catch(IOException ex)
                        {
                            WriteToConsole("");
                            WriteToConsole(ex.Message);
                            WriteToConsole(message);
                        }
                    }
                }
            }
            else
            {
                WriteToConsole(message);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="e"></param>
        public static void LogException(Exception e)
        {
            Log.WriteLine("----------------------------------------------", LogLevel.Error);
            Log.WriteLine("Exception! Type: " + e.GetType().ToString(), LogLevel.Error);
            Log.WriteLine("Message: " + e.Message, LogLevel.Error);
            Log.WriteLine("----------------------------------------------", LogLevel.Error);
            Log.WriteLine("StackTrace: " + e.StackTrace, LogLevel.Error);
            Log.WriteLine("----------------------------------------------", LogLevel.Error);
            Log.WriteLine("InnerException: " + e.InnerException, LogLevel.Error);
            Log.WriteLine("----------------------------------------------", LogLevel.Error);
            Log.WriteLine("Source: " + e.Source, LogLevel.Error);
            Log.WriteLine("----------------------------------------------", LogLevel.Error);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="message"></param>
        private static void WriteToFile(string message)
        {
            TextWriterTraceListener myTextListener = new TextWriterTraceListener(fs);

            Trace.Listeners.Add(myTextListener);

            Trace.WriteLine(DateTime.Now.ToString("hh:mm:ss.ffff") + ": " + message);

            Trace.Flush();
            Trace.Listeners.Remove(myTextListener);
            myTextListener.Close();
            Trace.Close();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="message"></param>
        private static void WriteToConsole(string message)
        {
            TextWriterTraceListener consoleListener = new TextWriterTraceListener(Console.Out);
            Trace.Listeners.Add(consoleListener);
            
            Trace.WriteLine(DateTime.Now.ToString("hh:mm:ss.ffff") + ": " + message);

            Trace.Flush();
            Trace.Listeners.Remove(consoleListener);
            //consoleListener.Close();
            //Trace.Close();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Metroid.Test\Utility\XmlHelper.cs ===
﻿namespace Microsoft.TestTools
{
    using System;
    using System.IO;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Xml;
    using System.Xml.Serialization;
    using System.Runtime.Serialization;

    public class XmlHelper : XmlDocument
    {
        #region member fields

        private const string READER_TYPE_ERROR = "Reader parameter type must be either an XmlReader, XmlTextReader, TextReader, StringReader or StreamReader";
        private const string NULL_OR_EMPTY_ERROR = "Object reference or strings passed into this method cannot be null or empty.";

        #endregion member fields

        #region public interface
        // Deserializes xml from string back into a class and
        // sets internal xml doc using the class type and xml string
        public T LoadXml<T>(string xmlString)
        {
            this.nullOrEmptyCheck(xmlString);

            T serializableClass = this.DeserializeXmlToObject<T>(xmlString);

            return serializableClass;
        }

        // Use this overload to load deserialize an xml file back into serializable class
        public T Load<T>(string fileSpec)
        {
            this.nullOrEmptyCheck(fileSpec);

            base.Load(fileSpec);

            return this.LoadXml<T>(this.InnerXml);
        }

        // Loads xml by first serializing class out to string, then loads string
        // into (this) by calling LoadXml
        public void Load(object serializableClass)
        {
            this.nullOrEmptyCheck(serializableClass);

            if (serializableClass.GetType() == typeof(string))
            {
                // Caller is passing a string which is most likely
                // a file spec. In this case a call to the base method is intended
                base.Load((string)serializableClass);
            }
            else
            {
                this.SerializeObjectToXmlDocument(serializableClass);
            }

        }

        // Serialize out to file and to XmlDocument
        public void Save(string fileSpec, object serializableClass)
        {
            this.nullOrEmptyCheck(fileSpec, serializableClass);

            this.SerializeObjectToXmlDocument(serializableClass);

            this.Save(fileSpec);
        }
        // Serialize out to Xml string
        public string SerializeObjectToXmlString(object serializableClass)
        {
            XmlObjectSerializer serializer = TryGetDeserializer(serializableClass.GetType());
            if (serializer != null)
            {
                using (MemoryStream ms = new MemoryStream())
                {
                    serializer.WriteObject(ms, serializableClass);
                    ms.Position = 0;
                    byte[] buffer = ms.GetBuffer();
                    return Encoding.UTF8.GetString(buffer, 0, (int)ms.Length);
                }
            }

            return this.SerializeObjectToXmlString(serializableClass, false);
        }
        public string SerializeObjectToXmlString(object serializableClass, bool omitXmlDeclaration)
        {
            XmlDocument doc = this.SerializeObjectToXmlDocument(serializableClass, omitXmlDeclaration);

            return this.PrettyXml(doc);
        }
        public string SerializeObjectToXmlString(object serializableClass, bool omitXmlDeclaration, bool stripNamespaces)
        {
            string ret = this.SerializeObjectToXmlString(serializableClass, omitXmlDeclaration);

            if (stripNamespaces)
            {
                ret = this.StripNamespaces(ret);
            }
            return ret;
        }
        public XmlDocument SerializeObjectToXmlDocument(object serializableClass)
        {
            return this.SerializeObjectToXmlDocument(serializableClass, false);
        }

        // Serialize out to XmlDocument
        public XmlDocument SerializeObjectToXmlDocument(object serializableClass, bool omitXmlDeclaration)
        {
            this.nullOrEmptyCheck(serializableClass);

            XmlWriterSettings writerSettings = new XmlWriterSettings();
            if (omitXmlDeclaration)
            {
                writerSettings.OmitXmlDeclaration = true;
            }

            XmlSerializer xmlSerializer = new XmlSerializer(serializableClass.GetType());

            StringWriter stringWriter = new StringWriter();

            using (XmlWriter xmlWriter = XmlWriter.Create(stringWriter, writerSettings))
            {
                xmlSerializer.Serialize(xmlWriter, serializableClass);
            }

            string serializedXmlString = stringWriter.GetStringBuilder().ToString();

            this.LoadXml(serializedXmlString);

            return this as XmlDocument;

        }

        // Deserialize xml into object instance
        public T DeserializeXmlToObject<T>(string xmlString)
        {
            this.nullOrEmptyCheck(xmlString);

            TextReader textReader = new StringReader(xmlString);

            T serializableClass = this.DeserializeReaderToObject<T>(textReader);

            return serializableClass;
        }

        // Deserialize reader into object instance
        public T DeserializeReaderToObject<T>(object reader)
        {
            this.nullOrEmptyCheck(reader);

            XmlSerializer xmlSerializer = new XmlSerializer(typeof(T));

            T serializableClass = default(T);

            Type readerType = reader.GetType();

            switch (reader.GetType().ToString())
            {
                case "System.IO.TextReader":
                case "System.IO.StringReader":
                    serializableClass = (T)xmlSerializer.Deserialize(reader as TextReader);
                    break;

                case "System.IO.StreamReader":
                    serializableClass = (T)xmlSerializer.Deserialize(reader as StreamReader);
                    break;

                case "System.Xml.XmlTextReader":
                case "System.Xml.XmlReader":
                    serializableClass = (T)xmlSerializer.Deserialize(reader as XmlReader);
                    break;

                default:
                    throw new ArgumentException(READER_TYPE_ERROR);

            }

            this.Load(serializableClass);

            return serializableClass;
        }

        public string XMLEncode(string val)
        {
            //these 3 arrays must be of equal length
            string[] escSequences = { "&amp;", "&apos;", "&quot;", "&lt;", "&gt;" };
            string[] escEsc = { "#AMP#", "#APOS#", "#QUOT#", "#LT#", "#GT#" };
            string[] literals = { "&", ";", "\"", "<", ">" };

            string ret = val.Replace("�", "'").Replace("�", "\"").Replace("�", "\"");

            for (int i = 0; i < escEsc.Length; i++)
            {
                //try to find instances of the escEsc strings in val. if found, pad them up until they aren't found anymore
                while (val.IndexOf(escEsc[i]) != -1)
                {
                    escEsc[i] = "#" + escEsc[i] + "#";
                }
                //now, replace the escSequences strings with the padded escEsc strings (so they'll be safe from the later replacement)
                ret = ret.Replace(escSequences[i], escEsc[i]);
                //now, replace the reserved chars with their escapements
                ret = ret.Replace(literals[i], escSequences[i]);
                //now, put the original escSequences back in
                ret = ret.Replace(escEsc[i], escSequences[i]);
            }

            return ret;
        }

        public string XMLDecode(string val)
        {
            return val.Replace("&amp;", "&").Replace("&apos;", "'").Replace("&lt;", "<").Replace("&gt;", ">");
        }

        #endregion public interface

        #region private interface
        // Validate method parameters
        private void nullOrEmptyCheck(params object[] parameterList)
        {
            bool errorConditon = false;

            foreach (object obj in parameterList)
            {
                if (null == obj)
                {
                    errorConditon = true;
                }
                else
                {
                    if (obj.GetType() == typeof(string))
                    {
                        if (string.IsNullOrEmpty((string)obj))
                        {
                            errorConditon = true;
                        }
                    }
                }

                if (errorConditon)
                {
                    throw new ArgumentNullException(NULL_OR_EMPTY_ERROR);
                }
            }

        }
        public string PrettyXml(XmlNode node)
        {
            string ret = "";
            if (node != null)
            {
                MemoryStream memoryStream = new MemoryStream();
                XmlTextWriter writer = new XmlTextWriter(memoryStream, Encoding.Unicode);

                writer.Formatting = Formatting.Indented;

                // Write the XML into a formatting XmlTextWriter
                node.WriteContentTo(writer);
                writer.Flush();
                memoryStream.Flush();
                // Have to rewind the MemoryStream in order to read
                // its contents.
                memoryStream.Position = 0;

                // Read MemoryStream contents into a StreamReader.
                StreamReader reader = new StreamReader(memoryStream);

                // Extract the text from the StreamReader.
                ret = reader.ReadToEnd();

                memoryStream.Dispose();
            }
            return ret;

        }
        public string StripNamespaces(string xmlString)
        {
            string pattern = @"\sxmlns=""""";
            string ret = Regex.Replace(xmlString, pattern, "");

            pattern = @"\sxmlns[:|=][^=]*=[""][^""]*[""]";
            ret = Regex.Replace(ret, pattern, "");

            pattern = @"\sxmlns:(?<ns>[^=]+)=[""][^""]*[""]";
            MatchCollection matches = Regex.Matches(xmlString, pattern);
            foreach (Match m in matches)
            {
                string val = m.Groups["ns"].Value;
                try
                {
                    ret = Regex.Replace(ret, @"\s" + val + ":", " ");
                    ret = Regex.Replace(ret, @"<" + val + ":", "<");
                    ret = Regex.Replace(ret, @"</" + val + ":", "</");
                }
                catch { }

            }
            return ret;
        }
        public string StripXmlDeclaration(string xmlString)
        {
            string pattern = @"<\?xml.*>";
            string ret = Regex.Replace(xmlString, pattern, "");
            return ret;
        }
        #endregion private interface

        private static bool HasCustomAttribute<T>(Type dataContractType) where T : Attribute
        {
            if (dataContractType.GetCustomAttributes(typeof(T), false).Length > 0)
            {
                return true;
            }

            return false;
        }

        private static XmlObjectSerializer TryGetDeserializer(Type serializationType)
        {
            XmlObjectSerializer returnSerializer  = null;

            if (serializationType == null)
            {
                return null;
            }

            if (serializationType == typeof(string))
            {
                return null;
            }

            if (HasCustomAttribute<DataContractAttribute>(serializationType))
            {
                returnSerializer = new DataContractSerializer(serializationType);
            }

            return returnSerializer;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\TestFailureException.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Multiplayer.Test.API
{
    /// <summary>
    /// 
    /// </summary>
    public class TestFailureException : Exception
    {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="message"></param>
        public TestFailureException(string message)
            : base(message)
        {

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="message"></param>
        /// <param name="innerException"></param>
        public TestFailureException(string message, Exception innerException)
            : base(message, innerException)
        {

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="format"></param>
        /// <param name="args"></param>
        public TestFailureException(string format, params object[] args)
            : base(String.Format(format, args))
        {

        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\LoggingUtilityTests.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using System.Globalization;
using System.IO;
using System.Net;
using System.Web;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Multiplayer.Test.API;
using AsyncMultiplayer.NotificationService;
using Multiplayer.Test.Proxy;
namespace Multiplayer.Test
{
    /// <summary>
    /// LoggingUtilityTests TestClass contains tests for Logging Utility (Leet.Core) 
    /// </summary>
    [TestClass]
    public class LoggingUtilityTests
    {
        private static NotificationsServiceProxy logNotificationClient = null;
        private static MPTestHooksProxy testHooksClient = null;

        private static string NotificationServiceDirectory;
        private static string NotificationStorageShare;
        private static string logCopiesFolderPath;
        private static string logFilePath, copyLogFilePath;
        private const string DateFormat = "yyyy-MM-dd";
        
        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
            // Setting this to false to get logs out on TRX files
            Log.LogToFile = false;

            logNotificationClient = new NotificationsServiceProxy();
            testHooksClient = new MPTestHooksProxy();
            NotificationServiceDirectory = System.Configuration.ConfigurationManager.AppSettings["NotificationServiceShare"];
            NotificationStorageShare = System.Configuration.ConfigurationManager.AppSettings["NotificationStorageShare"];
            logCopiesFolderPath = Path.GetTempPath() + "\\notificationlogcopies";
        }

        //
        // This code runs before every test case -
        // For Notifications, this means ensuring at least a single notification is populated in the server
        //
        [TestInitialize()]
        public void MyTestInitialize()
        {
            testHooksClient.CreateDummyNotification();
        }

        //[TestMethod, Owner("lewbamp")]
        //[Description("Call GET on NotificationsService to query for Notifications & verify it log messages to log file")]
        //[TestProperty("Type", "Feature")]
        public void FeatureTest_GetNotificationsLog()
        {
            Log.WriteLine("");
            Log.WriteLine("In FeatureTest_GetNotificationsLog()");

            //Calling GetNotifications on NotificationService
            List<Notification> notifications = logNotificationClient.GetNotifications(Constants.TESTGAMEID.ToString(), String.Empty, 0, String.Empty, 1, String.Empty, true);

            //Verify we get notifications list from above call
            Assert.IsNotNull(notifications);
            Assert.IsTrue(notifications.Count > 0, "ERROR: Notification list was empty.");
            
            //Expected Exception message to verify
            string expectedMessage = "NotificationServiceFrontEnd> Calling GetNotifications";

            //Call VerifyLogFileEx to verify the exception has been logged in log file
            VerifyLogFile(expectedMessage);
        }

        //[TestMethod, Owner("lewbamp")]
        //[Description("Call GET on NotificationsService to query for Notifications and make it throw exception & verify exception message log to log file")]
        //[TestProperty("Type", "Feature")]
        public void FeatureTest_GetNotificationsLogException()
        {
            Log.WriteLine("");
            Log.WriteLine("In FeatureTest_GetNotificationsLogException()");

            bool hitException = false;
            List<Notification> notifications = null;

            //Deleting test notifications folder to make NotificationService to throw exception on query
            if(Directory.Exists(NotificationStorageShare + "\\50"))
            {
                Directory.Delete(NotificationStorageShare + "\\50", true);
            }

            //Calling GetNotifications on NotificationService - putting the call in try/catch block to catch the exception 
            //and verify exception has been logged to logfile
            try
            {
                notifications = logNotificationClient.GetNotifications(Constants.TESTGAMEID.ToString(), String.Empty, 0, String.Empty, 1, String.Empty, true);
            }
            catch(WebException webEx) 
            {
                //setting Exception hit flag to true
                hitException = true;

                //logging exception message to test log file
                Log.WriteLine("FeatureTest_GetNotificationsLogException: " + webEx.Message);

                //Expected Exception message to verify
                string expectedMessage = "NotificationServiceFrontEnd> Exception caught in method: GetNotificationsSystem.IO.DirectoryNotFoundException";

                //Assert the GetNotification call didn't return any notifications
                Assert.IsNull(notifications);

                //Call VerifyLogFileEx to verify the exception has been logged in log file
                VerifyLogFile(expectedMessage);
            }

            //Fail the test if it doesn't throw an Exception
            if (!hitException)
            {
                Assert.Fail("GetNotifications did not throw an Exception");
            }
        }

        //[TestMethod, Owner("lewbamp")]
        //[Description("Call DELETE on NotificationsService to delete Notification and make it throw exception & verify exception message log to log file")]
        //[TestProperty("Type", "Feature")]
        public void FeatureTest_DeleteNotificationLogException()
        {
            Log.WriteLine("");
            Log.WriteLine("In FeatureTest_DeleteNotificationLogException()");

            bool hitException = false;

            if (Directory.Exists(NotificationStorageShare + "\\50"))
            {
                Directory.Delete(NotificationStorageShare + "\\50", true);
            }

            try
            {
                logNotificationClient.DeleteNotificationQuery(String.Empty);
            }
            catch (WebException webEx)
            {

                hitException = true;
                Log.WriteLine("FeatureTest_DeleteNotificationLogException: " + webEx.Message);

                string expectedMessage = "NotificationServiceFrontEnd> Exception caught in method: DeleteNotificationSystem.IO.DirectoryNotFoundException";
                
                VerifyLogFile(expectedMessage);
            }

            if (!hitException)
            {
                Assert.Fail("DeleteNotification did not throw an Exception");
            }
        }


        private void VerifyLogFile(string expectedMessage)
        {
            //Get today's timeStamp in "yyyy-MM-dd" format for log file name
            string timeStamp = null;
            DateTime nowTime = DateTime.Now.ToLocalTime();
            timeStamp = nowTime.ToString(DateFormat, CultureInfo.InvariantCulture);

            //setting path for logfile on NotificationService server
            logFilePath = NotificationServiceDirectory + "\\Leet.Utils.Test-" + timeStamp + ".log";

            //setting destination path for logfile to copy it to local temp folder
            copyLogFilePath = logCopiesFolderPath + "\\Leet.Utils.Test-" + timeStamp + ".log";

            //Verifying log file exists on NotificationService server
            Assert.IsTrue(File.Exists(logFilePath), "Log file: " + logFilePath + " does not exist and not created");

            //Check for destination log file directory exists, create if not exists
            if (!Directory.Exists(logCopiesFolderPath))
            {
                Directory.CreateDirectory(logCopiesFolderPath);
            }

            //Copy logfile from NotificationService server to local temp folder
            File.Copy(logFilePath, copyLogFilePath, true);

            //Reading log file content to an array
            string[] fileOutput = File.ReadAllLines(copyLogFilePath);

            //Getting line index for expected message in log file
            int exceptionStartIndex = 0;
            for (int i = (fileOutput.Length - 1); i >= 0; i--)
            {
                if (fileOutput[i].StartsWith(timeStamp))
                {
                    exceptionStartIndex = i;
                    break;
                }
            }

            //Verify log message logged to log file
            Assert.IsTrue(fileOutput[exceptionStartIndex].Contains(expectedMessage), "Logging is not working");

            //Deleting the copy of log file on local temp folder
            File.Delete(copyLogFilePath);
        }
        
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\RestCommand.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Net;
using System.Collections;
using System.IO;

namespace Multiplayer.Test.API
{
    class RestCommand
    {
        WebClient webClient = new WebClient();
        
        public RestCommand()
        {
         
        }

        WebHeaderCollection _headers;

        public string Get(string uri, Dictionary<string, string> customHeaders)
        {
            return MakeRequest(uri,customHeaders,"GET");
        }

        private string MakeRequest(string uri, Dictionary<string, string> customHeaders, string verb)
        {
            HttpWebRequest webRequest = WebRequest.Create(uri) as HttpWebRequest;
            if (webRequest == null)
            {
                throw new NotSupportedException("WebRequest.Create failed in RestCommand::Delete");
            }
            webRequest.Method = verb;

            foreach (KeyValuePair<string, string> kvp in customHeaders)
            {
                if (kvp.Key.Equals("Content-Type"))
                {
                    webRequest.ContentType = kvp.Value;
                    continue;
                }
                webRequest.Headers[kvp.Key] = kvp.Value;
            }
            HttpWebResponse webResponse = webRequest.GetResponse() as HttpWebResponse;

            if (webResponse == null)
            {
                throw new NotSupportedException("WebRequest.GetResponse failed in RestCommand::MakeRequest");
            }

            _headers = webResponse.Headers;

            using (Stream responseStream = webResponse.GetResponseStream())
            {
                using (StreamReader responseStreamReader = new StreamReader(responseStream))
                {
                    return responseStreamReader.ReadToEnd();
                }
            }
        }

        public string GetResponseHeader(string headerItem)
        {
            return _headers[headerItem];
        }

        public string Put(string uri, string data)
        {
            return webClient.UploadString(uri, "PUT", data);
        }

        public string Put(string uri, Dictionary<string, string> customHeaders, string data)
        {
            foreach (KeyValuePair<string, string> kvp in customHeaders)
            {
                webClient.Headers[kvp.Key] = kvp.Value;
            }

            return webClient.UploadString(uri, "PUT", data);
        }

        public string Post(string uri, string data)
        {
            return webClient.UploadString(uri, "POST", data);
        }

        public string Post(string uri, Dictionary<string, string> customHeaders, string data)
        {
            foreach (KeyValuePair<string, string> kvp in customHeaders)
            {
                webClient.Headers[kvp.Key] = kvp.Value;
            }

            return webClient.UploadString(uri, "POST", data);
        }

        public string Delete(string uri)
        {
            
            HttpWebRequest webRequest = WebRequest.Create(uri) as HttpWebRequest;
            if (webRequest == null)
            {
                throw new NotSupportedException("WebRequest.Create failed in RestCommand::Delete");
            }

            
            webRequest.Method = "DELETE";
            webRequest.ContentType = "application/xml";
            HttpWebResponse webResponse = webRequest.GetResponse() as HttpWebResponse;
            if (webResponse == null)
            {
                throw new NotSupportedException("WebRequest.GetResponse failed in RestCommand::Delete");
            }

            Stream responseStream = webResponse.GetResponseStream();
            StreamReader responseStreamReader = new StreamReader(responseStream);
            string responseString = responseStreamReader.ReadToEnd();
            responseStream.Close();
            webResponse.Close();

            return responseString;
        }

        public string Delete(string uri, Dictionary<string, string> customHeaders)
        {

            HttpWebRequest webRequest = WebRequest.Create(uri) as HttpWebRequest;
            if (webRequest == null)
            {
                throw new NotSupportedException("WebRequest.Create failed in RestCommand::Delete");
            }


            webRequest.Method = "DELETE";
            
            //Set Headers
            foreach (KeyValuePair<string, string> kvp in customHeaders)
            {
                //don't set the content type on deletes for some reason
                if (kvp.Key.Equals("Content-Type"))
                {
                    //webRequest.ContentType = kvp.Value;
                    continue;
                }
                webRequest.Headers[kvp.Key] = kvp.Value;
            }

            HttpWebResponse webResponse = webRequest.GetResponse() as HttpWebResponse;
            if (webResponse == null)
            {
                throw new NotSupportedException("WebRequest.GetResponse failed in RestCommand::Delete");
            }

            Stream responseStream = webResponse.GetResponseStream();
            StreamReader responseStreamReader = new StreamReader(responseStream);
            string responseString = responseStreamReader.ReadToEnd();
            responseStream.Close();
            webResponse.Close();

            return responseString;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\Data\LocalizationTestData.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using AsyncMultiplayer.NotificationService;
using System.Xml;
using System.IO;

namespace MultiPlayer.Test.Data
{
    class LocalizationTestData
    {
        public static readonly string[] UNSUPPORTED_lOCALE = new string[] { "aa-aa", "hh-hh", "!!-!!", "AA-AA", "45-56", "??-??", "$^-*)", "7897", "?????" };
        //List of pairs of locale and expected language for localization 
        public static readonly string[,] GOOD_LOCALE = new string[,] { { "de-AT", "de" }, { "de-CH", "de" }, { "de-DE", "de" }, { "es-ES", "es" }, { "es-MX", "es" }, { "fr-BE", "fr" },{ "it-IT", "it" }, { "fr-CA", "fr" }, { "fr-FR", "fr" }, { "fr-CH", "fr" }, { "fr-BE", "fr" }, { "en-AU", "en" }, { "en-CA", "en" }, { "en-GB", "en" }, { "en-HK", "en" }, { "en-IE", "en" }, { "en-IN", "en" }, { "en-NZ", "en" }, { "en-SG", "en" }, { "en-US", "en" } };
        public static readonly string[,] MIXED_LOCALE = new string[,] { { "fr-ET", "en" }, { "es-RU", "en" }, { "fr-SM", "en" }, { "es-RR", "en" }, { "it-ET", "en" }, { "fr-TT", "en" }, { "en-ET", "en" } };
        //TODO: Please review the list after fix in localization logic. (there are some missing good locales line {de, de}, and also please add some more unsupported locales...)

        public const string DEFAULT_LOCALE = "en-US";
        public const string DEFAULT_LANGUAGE = "en";

        public static ExpectedLocalizedEmailContent GetExpectedLocalizedContentOnEmail(string lang, string gamertag, string displayName)
        {
            ExpectedLocalizedEmailContent expectedEmailContent = new ExpectedLocalizedEmailContent();
            expectedEmailContent.frLink = "http://live.xbox.com/FriendCenter";
            switch(lang){
                case "en": //english
                    expectedEmailContent.subject = gamertag + displayName + " has invited you to play Backgammon";
                    expectedEmailContent.title = gamertag + " has invited you to play Backgammon.";
                    expectedEmailContent.bodyPart1 = gamertag + " invites you to a game of Backgammon.";
                    expectedEmailContent.bodyPart2 = "Click here to take your turn.";
                    expectedEmailContent.bodyPart3 = "You can play throughout your day from your Windows phone or from the web (where supported).";
                    expectedEmailContent.frPart1 = gamertag + " wants to be your friend and compare scores.";
                    expectedEmailContent.frPart2 = "Click here to send a friend request.";
                    expectedEmailContent.footerPart1 = "This message has been sent by Xbox LIVE at the request of " + gamertag + ".";
                    expectedEmailContent.footerPart2 = "Click here to view your requests and communication options.";
                    expectedEmailContent.footerPart3 = "Privacy Statement";
                    expectedEmailContent.msAddressPart1 = "Microsoft, One Microsoft Way, Redmond, WA 98052";
                    expectedEmailContent.msAddressPart2 = "© 2010 Microsoft Corporation. All rights reserved.";
                    break;
                case "fr": //French
                    expectedEmailContent.subject = gamertag + displayName + " vous a invité à jouer à Backgammon (French)";
                    expectedEmailContent.title = gamertag + " vous a invité à jouer à Backgammon (French).";
                    expectedEmailContent.bodyPart1 = gamertag + " vous invite à une partie de Backgammon (French).";
                    expectedEmailContent.bodyPart2 = "Cliquez ici pour jouer votre tour.";
                    expectedEmailContent.bodyPart3 = "Vous pouvez jouer toute la journée avec votre téléphone Windows ou sur le Web (selon disponibilités).";
                    expectedEmailContent.frPart1 = gamertag +  " souhaite être votre ami et comparer vos scores.";
                    expectedEmailContent.frPart2 = "Cliquez ici pour envoyer une requête d’ami.";
                    expectedEmailContent.footerPart1 = "Ce message a été envoyé par Xbox LIVE à la demande de " + gamertag + ".";
                    expectedEmailContent.footerPart2 = "Cliquez ici pour voir les requêtes et afficher vos options de communication.";
                    expectedEmailContent.footerPart3 = "Déclaration de confidentialité";
                    expectedEmailContent.msAddressPart1 = "Microsoft, One Microsoft Way, Redmond, WA 98052, États-Unis.";
                    expectedEmailContent.msAddressPart2 = "© 2010 Microsoft Corporation. Tous droits réservés.";
                    break;
                case "it": //Italian
                    expectedEmailContent.subject = gamertag + displayName + " ti ha invitato a giocare a Backgammon (Italian)";
                    expectedEmailContent.title = gamertag +  " ti ha invitato a giocare a Backgammon (Italian).";
                    expectedEmailContent.bodyPart1 = gamertag +  " ti invita a giocare a Backgammon (Italian).";
                    expectedEmailContent.bodyPart2 = "Fai clic qui per iniziare il tuo turno.";
                    expectedEmailContent.bodyPart3 = "Puoi giocare in qualsiasi momento dal tuo telefono Windows o dal Web (se supportato).";
                    expectedEmailContent.frPart1 = gamertag +  " desidera diventare tuo amico e confrontare i punteggi.";
                    expectedEmailContent.frPart2 = "Fai clic qui per inviare una richiesta amico.";
                    expectedEmailContent.footerPart1 = "Questo messaggio è stato inviato da Xbox LIVE in seguito alla richiesta di " + gamertag + ".";
                    expectedEmailContent.footerPart2 = "Fai clic qui per visualizzare le tue richieste e le opzioni di comunicazione disponibili.";
                    expectedEmailContent.footerPart3 = "Informativa sulla privacy";
                    expectedEmailContent.msAddressPart1 = "Microsoft, One Microsoft Way, Redmond, WA 98052";
                    expectedEmailContent.msAddressPart2 = "© 2010 Microsoft Corporation. Tutti i diritti riservati.";
                    break;
                case "de": //Germany
                    expectedEmailContent.subject = gamertag + displayName + " hat Sie zum Spielen von Backgammon (German) eingeladen";
                    expectedEmailContent.title = gamertag +  " hat Sie zum Spielen von Backgammon (German) eingeladen.";
                    expectedEmailContent.bodyPart1 = gamertag +  " lädt Sie zum Spielen von Backgammon (German) ein.";
                    expectedEmailContent.bodyPart2 = "Klicken Sie hier, um an die Reihe zu kommen.";
                    expectedEmailContent.bodyPart3 = "Sie können den ganzen Tag lang von Ihrem Windows Phone oder vom Internet aus spielen (wo unterstützt). ";
                    expectedEmailContent.frPart1 = gamertag +  " möchte Ihr Freund sein und Punkte vergleichen.";
                    expectedEmailContent.frPart2 = "Klicken Sie hier, um eine Freundesanfrage zu senden.";
                    expectedEmailContent.footerPart1 = "Diese Nachricht wurde von Xbox LIVE auf Wunsch von " + gamertag + " gesendet.";
                    expectedEmailContent.footerPart2 = "Klicken Sie hier, um Ihre Anfragen und Kommunikationsoptionen anzuzeigen.";
                    expectedEmailContent.footerPart3 = "Datenschutzerklärung";
                    expectedEmailContent.msAddressPart1 = "Microsoft, One Microsoft Way, Redmond, WA 98052";
                    expectedEmailContent.msAddressPart2 = "© 2010 Microsoft Corporation. Alle Rechte vorbehalten.";
                    break;
                case "es": //Spanish
                    expectedEmailContent.subject = gamertag + displayName + " te ha invitado a jugar a Backgammon (Spanish)";
                    expectedEmailContent.title = gamertag +  " te ha invitado a jugar a Backgammon (Spanish).";
                    expectedEmailContent.bodyPart1 = gamertag +  " te invita a una partida de Backgammon (Spanish)";
                    expectedEmailContent.bodyPart2 = "Haz clic aquí para jugar en tu turno.";
                    expectedEmailContent.bodyPart3 = "Puedes jugar todo el día desde tu teléfono Windows o desde la web (donde sea compatible).";
                    expectedEmailContent.frPart1 = gamertag + " quiere ser tu amigo y comparar las puntuaciones.";
                    expectedEmailContent.frPart2 = "Haz clic aquí para enviar una solicitud de amigo.";
                    expectedEmailContent.footerPart1 = "Este mensaje ha sido enviado por Xbox LIVE a petición de " + gamertag + ".";
                    expectedEmailContent.footerPart2 = "Haz clic aquí para ver las opciones de solicitudes y comunicaciones.";
                    expectedEmailContent.footerPart3 = "Declaración de privacidad";
                    expectedEmailContent.msAddressPart1 = "Microsoft, One Microsoft Way, Redmond, WA 98052";
                    expectedEmailContent.msAddressPart2 = "© 2010 Microsoft Corporation. Reservados todos los derechos.";
                    break;
                default:
                    break;

            }
            return expectedEmailContent;
        }

        public static string GetLocalizedNotificationName(string lang, Notification.NotificationType type)
        {
            if (lang == "")
                return type.ToString();
            XmlDocument doc = new XmlDocument();
            doc.Load("LocalizedNotificationTypeName.xml");
            XmlNodeList x = doc.SelectNodes("//NotificationTypeDisplayName//Entry");

            foreach (XmlNode y in x)
            {

                if (y.Attributes["Type"].Value == type.ToString())
                {
                    if (y.Attributes["Locale"].Value == lang)
                    {
                        return y.Attributes["Value"].Value;
                    }
                }
            }
            return type.ToString();
        }
    }

    public class ExpectedLocalizedEmailContent
    {
        public string frLink;
        public string subject;
        public string title;
        public string bodyPart1;
        public string bodyPart2;
        public string bodyPart3;
        public string frPart1;
        public string frPart2;
        public string footerPart1;
        public string footerPart2;
        public string footerPart3;
        public string msAddressPart1;
        public string msAddressPart2;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\MPTestHooksProxy.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Multiplayer.Test.API;
using System.Xml;
using System.Web;
using AsyncMultiplayer.NotificationService;
using System.Configuration;
using CloudServices.Test.Common.Configuration;
using CloudServices.Test.Common.Proxy;
using AsyncMultiplayer.SessionCommon;
using System.IO;
using System.Runtime.Serialization;

namespace Multiplayer.Test.API
{
    public class MPTestHooksProxy : RestRequest
    {
        public readonly string MPTestHooksServiceUrl = Config.Environment.MPTestHooksService;
        private readonly Notification.NotificationCategory TestCategoryValue = Notification.NotificationCategory.NotSpecified;

        public string TestSessionId
        {
            get;
            private set;
        }
        
        public MPTestHooksProxy()
        {
            // Setting this to false to get logs out on TRX files
            Log.LogToFile = false;

            //
            // Normalize Notifications Service URL to ensure we have a trailing backslash
            //
            if (!MPTestHooksServiceUrl.EndsWith("/"))
            {
                MPTestHooksServiceUrl += "/";
            }
            CreateNewSessionId();
            Timeout = int.Parse(ConfigurationManager.AppSettings["Timeout"]);
        }

        public Notification.NotificationCategory TestCategory
        {
            get { return TestCategoryValue; } 
        }

        /// <summary>
        /// Used when tests want to make sure to use a new global SessionID for their scenarios
        /// </summary>
        public void CreateNewSessionId()
        {
            TestSessionId = Guid.NewGuid().ToString();
        }

        public void UpdateUserEntry(
            string xuid,
            DateTime lastInviteResetTime,
            DateTime lastUpdateTime,
            int inviteCount)
        {
            RestCommand command = new RestCommand();

            string uri = String.Format("{0}user?Xuid={1}&LastInviteResetTime={2}&LastUpdateTime={3}&InviteCount={4}",
                MPTestHooksServiceUrl,
                xuid,
                lastInviteResetTime,
                lastUpdateTime,
                inviteCount);

            Log.WriteLine("Sending GET request: " + uri);
            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("ContentType", "application/xml");

            string response = command.Get(uri, customHeaders);
            
            Log.WriteLine("Response: " + response, LogLevel.Verbose);
        }

        /// <summary>
        /// Used to Create a single, dummy notification.
        /// </summary>
        public string CreateDummyNotification()
        {
            return this.CreateDummyNotification(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password));
        }
        
        public string CreateDummyNotification(string userId)
        {
            return CreateNotification(
                Notification.NotificationType.YourTurn,
                Constants.TESTGAMEID,
                TestSessionId,
                4,
                userId,
                Constants.TESTGAMEVARIANT);
            //return string.Empty;
        }
        /// <summary>
        /// create a set of notifications.  Use different sessionIds to avoid the notification service's 
        /// aggregation of types for the same session.
        /// </summary>
        /// <param name="numToCreate"></param>
        /// <returns></returns>
        public List<string> CreateDummyNotification(int numToCreate)
        {
            List<string> sList = new List<string>();
            
            for (int x = 0; x < numToCreate; x++)
            {
                sList.Insert(
                    0,
                    CreateNotification(
                    CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password),
                    Constants.TESTGAMEID,
                    Guid.NewGuid().ToString()));
            }

            return sList;
        }

        /// <summary>
        /// create a random notification type.  
        /// </summary>
        /// <returns>the ID of the notification created</returns>
        public string CreateNotification()
        {
            return CreateNotification(
                    CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password),
                    Constants.TESTGAMEID,
                    Guid.NewGuid().ToString());
        }

        /// <summary>
        /// Generic CreateNotification method used to inject a Notification in the test server specified in App.config.
        /// Uses new values for Session ID, Game ID and Notification ID
        /// </summary>
        /// <returns>A unique identifier for the saved Notification</returns>
        public string CreateNotification(
            Notification.NotificationType notificationType,
            string userId,
            uint gameId,
            string sessionId)
        {
            return CreateNotification(
                notificationType,
                gameId, 
                sessionId, 
                4,
                userId, 
                Constants.TESTGAMEVARIANT);
        }
        //todo(michperr): Make this generic and move to common
        private Notification.NotificationType GetRandomNotificationType()
        {
            Notification.NotificationType[] n = (Notification.NotificationType[])Enum.GetValues(typeof(Notification.NotificationType));

            Notification.NotificationType ret;
            do
            {
                ret = n[new Random().Next(n.Length)];
            } while (ret == Notification.NotificationType.FriendRequest);

            return ret;
        }

        public string CreateNotification(
            string userId,
            uint gameId,
            string sessionId)
        {

            return CreateNotification(
                GetRandomNotificationType(),
                userId,
                gameId,
                sessionId);
        }

        /// <summary>
        /// Client wrapper for the MPTestHooks service's CreateNotification() API. This lets you inject a Notification into the system.
        /// </summary>
        public string CreateNotification(
            Notification.NotificationType notificationType,
            UInt32 gameId,
            string sessionId,
            Int32 supportedPlatform,
            string userId,
            Int32 gameVariant)
        {
            return CreateNotification(notificationType, gameId, sessionId, supportedPlatform, userId, gameVariant, null);
        }


        public string CreateNotification(
            Notification.NotificationType notificationType,
            UInt32 gameId,
            string sessionId,
            Int32 supportedPlatform,
            string userId,
            Int32 gameVariant,
            string deliveredTime)
        {
            List<Notification> nList = new List<Notification>();
            Notification notification = BuildNotification(notificationType, gameId, sessionId, supportedPlatform, userId, gameVariant, string.Empty);
            nList.Add(notification);
            CreateNotifications(nList);
            return notification.Id;
        }

        public void CreateSession(SessionState sessionState)
        {
            RestCommand command = new RestCommand();

            string uri = String.Format("{0}createsession", MPTestHooksServiceUrl);

            Log.WriteLine("Sending POST request: " + uri);
            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("Content-Type", "application/xml");

            string response = command.Post(uri, customHeaders, SerializeObject(sessionState));

            Log.WriteLine("Response: " + response, LogLevel.Verbose);
            Log.WriteLine("Session created: " + response);
            Log.WriteLine("Session Id: " + sessionState.SessionID);
        }

        /// <summary>
        /// Helper internal method - creates N number of notifications with a specific type.
        /// Used to test notification aggregation.
        /// </summary>
        /// <returns>The last notification ID generated</returns>
        public string CreateNotificationsInternal(int count, Notification.NotificationType type)
        {
            return CreateNotificationsInternal(count, type, TestSessionId, Constants.TESTGAMEID);
        }

        /// <summary>
        /// Helper internal method - creates N number of notifications with a specific type.
        /// Used to test notification aggregation.
        /// </summary>
        public string CreateNotificationsInternal(int count, Notification.NotificationType type, string sessionID, uint gameID)
        {
            string lastNotificationId = String.Empty;

            for (int i = 0; i < count; i++)
            {
                lastNotificationId = CreateNotification(
                    type,
                    gameID,
                    sessionID,
                    4,
                    CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password),
                    Constants.TESTGAMEVARIANT);
            }

            return lastNotificationId;
        }

        private string GetNotificationId(string responseXml)
        {
            if (responseXml.Length == 0)
            {
                throw new InvalidOperationException("Response XML was empty - cannot get generated Notification GUID");
            }

            XmlDocument xmlDocument = new XmlDocument();
            xmlDocument.LoadXml(responseXml);

            string responseId = xmlDocument.InnerText;
            return responseId;
        }

        private bool GetBoolResponse(string responseXml)
        {
            if (responseXml.Length == 0)
            {
                throw new InvalidOperationException("Response XML was empty");
            }

            XmlDocument xmlDocument = new XmlDocument();
            xmlDocument.LoadXml(responseXml);

            string response = xmlDocument.InnerText;
            if (response.Equals("true"))
                return true;
            else
                return false;
        }

        public void SetupNotFriendsAndNoFR(ulong userXuid, ulong targetXuid)
        {
            RestCommand command = new RestCommand();
            string uri = String.Format("{0}makenotfsnofr/?user={1}&target={2}",
                MPTestHooksServiceUrl, userXuid, targetXuid);

            Log.WriteLine("Sending POST request: " + uri);
            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("ContentType", "application/xml");

            string response = command.Post(uri, customHeaders, String.Empty);
            Log.WriteLine("Response: " + response, LogLevel.Verbose);
        }

        public void SetupFriends(ulong userXuid, ulong targetXuid)
        {
            RestCommand command = new RestCommand();

            string uri = String.Format("{0}makefriends/?user={1}&target={2}",
                MPTestHooksServiceUrl, userXuid, targetXuid);

            Log.WriteLine("Sending POST request: " + uri);
            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("ContentType", "application/xml");

            string response = command.Post(uri, customHeaders, String.Empty);

            Log.WriteLine("Response: " + response, LogLevel.Verbose);
        }

        public bool HasFR(ulong userXuid, ulong targetXuid)
        {
            RestCommand command = new RestCommand();

            string uri = String.Format("{0}hasfr/?user={1}&target={2}",
                MPTestHooksServiceUrl, userXuid, targetXuid);

            Log.WriteLine("Sending GET request: " + uri);
            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("ContentType", "application/xml");

            string response = command.Get(uri, customHeaders);
            Log.WriteLine("Response: " + response, LogLevel.Verbose);
            return GetBoolResponse(response);
        }

        public bool AreFriends(ulong userXuid, ulong targetXuid)
        {
            RestCommand command = new RestCommand();

            string uri = String.Format("{0}arefriends/?user={1}&target={2}",
                MPTestHooksServiceUrl, userXuid, targetXuid);

            Log.WriteLine("Sending GET request: " + uri);
            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("ContentType", "application/xml");

            string response = command.Get(uri, customHeaders);
            Log.WriteLine("Response: " + response, LogLevel.Verbose);
            return GetBoolResponse(response);
        }
        
        public void AcceptFR(ulong userXuid, ulong targetXuid)
        {
            RestCommand command = new RestCommand();

            string uri = String.Format("{0}acceptfr/?user={1}&target={2}",
                MPTestHooksServiceUrl, userXuid, targetXuid);

            Log.WriteLine("Sending POST request: " + uri);
            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("ContentType", "application/xml");

            string response = command.Post(uri, customHeaders, String.Empty);

            Log.WriteLine("Response: " + response, LogLevel.Verbose);
        }

        public bool BeginTest(string testType)
        {
            RestCommand command = new RestCommand();

            string uri = String.Format("{0}begintest/?TestType={1}",
                MPTestHooksServiceUrl,
                testType);

            Log.WriteLine("Sending POST request: " + uri);
            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("ContentType", "application/xml");
            string response = command.Post(uri, customHeaders, String.Empty);
            Log.WriteLine("Response: " + response, LogLevel.Verbose);
            return GetBoolResponse(response);
        }

        public void EndTest(string testType)
        {
            RestCommand command = new RestCommand();

            string uri = String.Format("{0}endtest/?TestType={1}",
                MPTestHooksServiceUrl,
                testType);

            Log.WriteLine("Sending POST request: " + uri);
            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("ContentType", "application/xml");
            string response = command.Post(uri, customHeaders, String.Empty);
            Log.WriteLine("Response: " + response, LogLevel.Verbose);
        }

        public void AddFR(ulong userXuid, ulong targetXuid)
        {
            RestCommand command = new RestCommand();

            string uri = String.Format("{0}addfr/?user={1}&target={2}",
                MPTestHooksServiceUrl, userXuid, targetXuid);

            Log.WriteLine("Sending POST request: " + uri);
            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("ContentType", "application/xml");

            string response = command.Post(uri, customHeaders, String.Empty);

            Log.WriteLine("Response: " + response, LogLevel.Verbose);
        }

        public void CleanupFR(ulong userXuid, ulong targetXuid)
        {
            RestCommand command = new RestCommand();

            string uri = String.Format("{0}cleanupfr/?user={1}&target={2}",
                MPTestHooksServiceUrl, userXuid, targetXuid);

            Log.WriteLine("Sending POST request: " + uri);
            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("ContentType", "application/xml");

            string response = command.Post(uri, customHeaders, String.Empty);

            Log.WriteLine("Response: " + response, LogLevel.Verbose);
        }

        public Notification BuildNotification(
             string userId,
             string sentTime)
        {
            return BuildNotification(Guid.NewGuid().ToString(), userId, sentTime);
        }
       
        public Notification BuildNotification(
            string sessionId,
            string userId,
            string sentTime)
        {
            return BuildNotification(sessionId, userId, sentTime, GetRandomNotificationType());
        }

        public Notification BuildNotification(
            string sessionId,
            string userId,
            string sentTime,
            Notification.NotificationType type)
        {
            return BuildNotification(type, Constants.TESTGAMEID, sessionId, 5, userId, Constants.TESTGAMEVARIANT, sentTime);
        }

        public Notification BuildFRNotification(
            string userId,
            string sentTime)
        {
            return BuildNotification(Notification.NotificationType.FriendRequest, 0, string.Empty, 0, userId, 0, sentTime);
        }
        private static Notification BuildNotification(
            Notification.NotificationType notificationType,
            UInt32 gameId,
            string sessionId,
            Int32 supportedPlatform,
            string userId,
            Int32 gameVariant,
            string sentTime)
        {
            Notification notification = null;

            //
            // First figure out which Notification class to create based on the type.
            // This switch requires manual maintenance to be sync'd with NotificationType in NotificationCommon.dll
            // It uses switch rather than runtime type loading for performance reasons.
            //
            switch (notificationType)
            {
                case Notification.NotificationType.GameOver:
                    notification = new GameOverNotification();
                    break;

                case Notification.NotificationType.Invitation:
                    notification = new InvitationNotification();
                    break;

                case Notification.NotificationType.Message:
                    notification = new MessageNotification();
                    break;

                case Notification.NotificationType.Nudge:
                    notification = new NudgeNotification();
                    break;

                case Notification.NotificationType.Warning:
                    notification = new WarningNotification();
                    break;

                case Notification.NotificationType.YourTurn:
                    notification = new YourTurnNotification();
                    break;

                case Notification.NotificationType.YouWin:
                    notification = new YouWinNotification();
                    break;

                case Notification.NotificationType.YouLose:
                    notification = new YouLoseNotification();
                    break;

                case Notification.NotificationType.GameTie:
                    notification = new GameTieNotification();
                    break;

                case Notification.NotificationType.FriendRequest:
                    notification = new FriendRequestNotification();
                    break;

                default:
                    throw new NotSupportedException("Requested Notification type not found: " + notificationType);
            }

            //
            // Fill out Notification fields
            // Notification ID, SentTime, IsUserVisible, Category, Status and Type are auto-filled out by the notification constructor.
            // DeliveryTime is auto-set by the service and we don't need to pre-set that.
            // ExpirationTime will be deprecated so we're not exposing it anymore.
            //

            notification.GameId = (uint)gameId;
            notification.SessionId = sessionId;
            notification.SupportedPlatform = supportedPlatform;
            notification.UserId = userId;
            notification.Variant = (uint)gameVariant;
            UserInfo creatorInfo = new UserInfo(0);
            creatorInfo.DisplayName = "MPTestHook";
            creatorInfo.GamerTag = "MpTestHook";
            creatorInfo.EmailAddress = "ztest01@microsoft.com";
            notification.From = Notification.SerializeToString(creatorInfo);
 
            if (!string.IsNullOrEmpty(sentTime))
            {
                notification.DeliveredTime = DateTime.Parse(sentTime);
                notification.SentTime = DateTime.Parse(sentTime);
                notification.Id = string.Format("{0:D19}-{1}", (DateTime.MaxValue.Ticks - notification.SentTime.Ticks), Guid.NewGuid());
            }
            return notification;
        }

        //This will only create one notification at a time. If you send a list of more than one, it will only create the first one. 
        //Used List<Notification> instead of Notification because of serialization ... since there are many types of notifications.
        public void CreateNotifications(List<Notification> notificationList)
        {
            string uri = String.Format("{0}createnotifications",
                MPTestHooksServiceUrl);

            Log.WriteLine("Sending POST request: " + uri);
            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("ContentType", "application/xml");

            RestResponse rr = Post(uri, customHeaders, SerializeObject(notificationList));
            Log.WriteLine("Response: " + rr, LogLevel.Verbose);
        }
        public List<Notification> QueryGarbageNotifications(DateTime olderThanDateTime)
        {
            string uri = String.Format("{0}querygarbagenotifications/?olderthan={1}",
                MPTestHooksServiceUrl,
                olderThanDateTime.ToString());

            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("ContentType", "application/xml");

            RestResponse response = Get(uri, customHeaders);
            Log.WriteLine("Response: " + response, LogLevel.Verbose);
            return DeserializeObject<List<Notification>>(response.Body);
          }

        public void AddUserToNeverList(ulong userXuid, ulong targetXuid)
        {
            string uri = String.Format("{0}addusertoneverlist/?user={1}&target={2}",
                MPTestHooksServiceUrl, userXuid, targetXuid);

            Log.WriteLine("Sending POST request: " + uri);
            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("ContentType", "application/xml");

            RestResponse rr = Post(uri, customHeaders, String.Empty);
            Log.WriteLine("Response: " + rr.Body, LogLevel.Verbose);
            if (!rr.Succeeded)
            {
                throw new RestException(rr);
            }
        }

        public void RemoveUserFromNeverList(ulong userXuid, ulong targetXuid)
        {
            string uri = String.Format("{0}removeuserfromneverlist/?user={1}&target={2}",
                MPTestHooksServiceUrl, userXuid, targetXuid);

            Log.WriteLine("Sending POST request: " + uri);
            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("ContentType", "application/xml");

            RestResponse rr = Post(uri, customHeaders, String.Empty);
            Log.WriteLine("Response: " + rr.Body, LogLevel.Verbose);
            if (!rr.Succeeded)
            {
                throw new RestException(rr);
            }
        }

        public bool IsUserInTargetsNeverList(ulong userXuid, ulong targetXuid)
        {
            string uri = String.Format("{0}isuserinneverlist/?user={1}&target={2}",
                MPTestHooksServiceUrl, userXuid, targetXuid);

            Log.WriteLine("Sending GET request: " + uri);
            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("ContentType", "application/xml");

            RestResponse rr = Get(uri, customHeaders);
            Log.WriteLine("Response: " + rr.Body, LogLevel.Verbose);
            if (!rr.Succeeded)
            {
                throw new RestException(rr);
            } return GetBoolResponse(rr.Body);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\GarbageCollector\NotificationGCTests.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using AsyncMultiplayer.NotificationService;
using CloudServices.Test.Common.Configuration;
using System.Threading;
using System.IO;
using CloudServices.Test.Common.Proxy;
using System.Net;
using System.Configuration;

namespace Multiplayer.Test.API
{
    /// <summary>
    /// Summary description for NotificationGCTests
    /// </summary>
    [TestClass]
    public class NotificationGCTests : TestAreaBase
    {
        private static NotificationTestCommon common = new NotificationTestCommon();
        private static Random randomGenerator = new Random();
        private static Notification.NotificationType[] notificationTypes =  {Notification.NotificationType.YourTurn,
                                                                              Notification.NotificationType.Nudge,  
                                                                              Notification.NotificationType.Invitation, 
                                                                              Notification.NotificationType.GameOver, 
                                                                              Notification.NotificationType.Message, 
                                                                              Notification.NotificationType.YouWin,
                                                                              Notification.NotificationType.YouLose,
                                                                              Notification.NotificationType.GameTie,
                                                                              Notification.NotificationType.Warning};
        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
            // Setting this to false to get logs out on trx files
            Log.LogToFile = false;
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            
            
        }

        [TestCleanup]
        public void TestCleanup()
        {
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("This test verifies the boundary time for each types of notifications except FR.")]
        [TestProperty("Type", "Feature")]
        public void N_GC_EachType_7DaysOld_EachType_6DaysOld()
        {
            Assert.AreEqual("dev", Config.EnvironmentSettings.Selected, "This test is can only be run against a dev box");
            common.CheckNotificationCount(ConfigurationManager.AppSettings["GCUserName"], ConfigurationManager.AppSettings["GCPassword"]);

            DateTime oldSentDate = DateTime.UtcNow.AddDays(-7);
            DateTime newSentDate = DateTime.UtcNow.AddDays(-6);

            List<Notification> oldNList = new List<Notification>();
            List<Notification> newNList = new List<Notification>();

            foreach (Notification.NotificationType t in notificationTypes)
            {
                Notification n = NotificationTestCommon.testHooksClient.BuildNotification(Guid.NewGuid().ToString(), CloudServices.Test.Common.Authorization.Authorization.GetXuid(ConfigurationManager.AppSettings["GCUserName"], ConfigurationManager.AppSettings["GCPassword"]), oldSentDate.ToString(), t);
                oldNList.Add(n);
                n = NotificationTestCommon.testHooksClient.BuildNotification(Guid.NewGuid().ToString(), CloudServices.Test.Common.Authorization.Authorization.GetXuid(ConfigurationManager.AppSettings["GCUserName"], ConfigurationManager.AppSettings["GCPassword"]), newSentDate.ToString(), t);
                newNList.Add(n);
            }
            NotificationTestCommon.testHooksClient.CreateNotifications(oldNList);
            NotificationTestCommon.testHooksClient.CreateNotifications(newNList);
            VerifyOldNotificationIsCreated(oldNList.Count, oldSentDate.AddMinutes(1));
            StopAndStartService();
            VerifyCleaned(oldNList.Count, oldSentDate.AddMinutes(1));
            VerifyNewNotificationsAreNotDeleted(newNList, oldSentDate.AddMinutes(1));
        }

        //modify test to change the frequency to be 5 minutes in NPDB when this setting is available there. 
        //For now, manually change frequecy in congif file, TimerBasedService.exe.config, to 300.
        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("This test verifies the boundary time for each types of notifications except FR.")]
        [TestProperty("Type", "Feature")]
        public void N_GC_EachType_7DaysOld_EachType_6DaysOld_SecondIteration()
        {
            Assert.AreEqual("dev", Config.EnvironmentSettings.Selected, "This test is can only be run against a dev box");
            common.CheckNotificationCount(ConfigurationManager.AppSettings["GCUserName"], ConfigurationManager.AppSettings["GCPassword"]);

            DateTime oldSentDate = DateTime.UtcNow.AddDays(-7);
            DateTime newSentDate = DateTime.UtcNow.AddDays(-6);

            List<Notification> oldNList = new List<Notification>();
            List<Notification> newNList = new List<Notification>();

            foreach (Notification.NotificationType t in notificationTypes)
            {
                Notification n = NotificationTestCommon.testHooksClient.BuildNotification(Guid.NewGuid().ToString(), CloudServices.Test.Common.Authorization.Authorization.GetXuid(ConfigurationManager.AppSettings["GCUserName"], ConfigurationManager.AppSettings["GCPassword"]), oldSentDate.ToString(), t);
                oldNList.Add(n);
                n = NotificationTestCommon.testHooksClient.BuildNotification(Guid.NewGuid().ToString(), CloudServices.Test.Common.Authorization.Authorization.GetXuid(ConfigurationManager.AppSettings["GCUserName"], ConfigurationManager.AppSettings["GCPassword"]), newSentDate.ToString(), t);
                newNList.Add(n);
            }
            NotificationTestCommon.testHooksClient.CreateNotifications(oldNList);
            NotificationTestCommon.testHooksClient.CreateNotifications(newNList);
            VerifyOldNotificationIsCreated(oldNList.Count, oldSentDate.AddMinutes(1));
            StopAndStartService();
            VerifyCleaned(oldNList.Count, oldSentDate.AddMinutes(1));
            VerifyNewNotificationsAreNotDeleted(newNList, oldSentDate.AddMinutes(1));

            //create another set of old notifications and wait for the second round the garbage collector starts by its own.
            NotificationTestCommon.testHooksClient.CreateNotifications(oldNList);
            VerifyOldNotificationIsCreated(oldNList.Count, oldSentDate.AddMinutes(1));
            Thread.Sleep(300000);
            VerifyCleaned(oldNList.Count, oldSentDate.AddMinutes(1));
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that GC deletes only old notifications by creating 5 new and 5 old notifications of same session.")]
        [TestProperty("Type", "Feature")]
        public void N_GC_5OldRandomNewNotification_SameSession()
        {
            Assert.AreEqual("dev", Config.EnvironmentSettings.Selected, "This test is can only be run against a dev box");
            common.CheckNotificationCount(ConfigurationManager.AppSettings["GCUserName"], ConfigurationManager.AppSettings["GCPassword"]);
            DateTime olderThanDateTime = DateTime.UtcNow.AddDays(-7);
            List<Notification> oldNList = new List<Notification>();
            List<Notification> newNList = new List<Notification>();
            for (int i = 0; i < notificationTypes.Length / 2; i++)
            {
                DateTime sentTime = GetRandomOldDate();
                Notification oldNotification = NotificationTestCommon.testHooksClient.BuildNotification(NotificationTestCommon.testHooksClient.TestSessionId, CloudServices.Test.Common.Authorization.Authorization.GetXuid(ConfigurationManager.AppSettings["GCUserName"], ConfigurationManager.AppSettings["GCPassword"]), sentTime.ToString(), notificationTypes[i]);
                oldNList.Add(oldNotification);
                Notification newNotification = NotificationTestCommon.testHooksClient.BuildNotification(NotificationTestCommon.testHooksClient.TestSessionId, CloudServices.Test.Common.Authorization.Authorization.GetXuid(ConfigurationManager.AppSettings["GCUserName"], ConfigurationManager.AppSettings["GCPassword"]), string.Empty, notificationTypes[notificationTypes.Length - 1 - i]);
                newNList.Add(newNotification);
            }
            NotificationTestCommon.testHooksClient.CreateNotifications(oldNList);
            NotificationTestCommon.testHooksClient.CreateNotifications(newNList);
            VerifyOldNotificationIsCreated(oldNList.Count, olderThanDateTime);
            StopAndStartService();
            VerifyCleaned(oldNList.Count, olderThanDateTime);
            VerifyNewNotificationsAreNotDeleted(NotificationTestCommon.testHooksClient.TestSessionId, newNList, olderThanDateTime);
        }

        //Bug: 5356 -- there is no filter for FR notifications.
        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("This test verifies that FR notifications are not cleaned up by garbage collector.")]
        [TestProperty("Type", "Feature")]
        public void N_GC_FRNotifications()
        {
            Assert.AreEqual("dev", Config.EnvironmentSettings.Selected, "This test is can only be run against a dev box");
            common.CheckNotificationCountFR(ConfigurationManager.AppSettings["GCUserName"], ConfigurationManager.AppSettings["GCPassword"]);
            DateTime olderThanDateTime = DateTime.UtcNow.AddDays(-7);
            List<Notification> oldFRNList = new List<Notification>();
            List<Notification> oldNList = new List<Notification>();
            for (int i = 0; i < 5; i++)
            {
                DateTime sentTime = GetRandomOldDate();
                Notification friendReqNotification = NotificationTestCommon.testHooksClient.BuildFRNotification(CloudServices.Test.Common.Authorization.Authorization.GetXuid(ConfigurationManager.AppSettings["GCUserName"], ConfigurationManager.AppSettings["GCPassword"]), sentTime.ToString());
                friendReqNotification.Id = string.Format("{0:D19}-{1}", (DateTime.MaxValue.Ticks - sentTime.Ticks), Guid.NewGuid());
                Notification notification = NotificationTestCommon.testHooksClient.BuildNotification(Guid.NewGuid().ToString(), CloudServices.Test.Common.Authorization.Authorization.GetXuid(ConfigurationManager.AppSettings["GCUserName"], ConfigurationManager.AppSettings["GCPassword"]), sentTime.ToString());
                notification.Id = string.Format("{0:D19}-{1}", (DateTime.MaxValue.Ticks - sentTime.Ticks), Guid.NewGuid());
                oldFRNList.Add(friendReqNotification);
                oldNList.Add(notification);
            }
            NotificationTestCommon.testHooksClient.CreateNotifications(oldFRNList);
            NotificationTestCommon.testHooksClient.CreateNotifications(oldNList);
            VerifyOldNotificationIsCreated((oldNList.Count + (oldFRNList.Count) / 2)/*because we might not be able to create as many FR notifications as we expected since these are fake FR notifications*/, olderThanDateTime);
            StopAndStartService();
            VerifyCleaned((oldNList.Count + oldFRNList.Count), olderThanDateTime);
            //VerifyFRNotificationsAreNotCleaned(oldFRNList, olderThanDateTime);
        }

        //Bug: 5353
        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verifies that user's last update time gets updated when user's notification is cleaned by GC.")]
        [TestProperty("Type", "Feature")]
        public void P_GC_Etag()
        {
            Assert.AreEqual("dev", Config.EnvironmentSettings.Selected, "This test is can only be run against a dev box");
            common.CheckNotificationCount(ConfigurationManager.AppSettings["GCUserName"], ConfigurationManager.AppSettings["GCPassword"]);
            DateTime olderThanDateTime = DateTime.UtcNow.AddDays(-7);
            NotificationTestCommon.testHooksClient.CreateNotifications(BuildOldNotifications(1));
            VerifyOldNotificationIsCreated(1, olderThanDateTime);
            List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                string.Empty,
                false,
                ConfigurationManager.AppSettings["GCUserName"],
                ConfigurationManager.AppSettings["GCPassword"],
                null);
            Assert.IsNotNull(nList);
            Assert.AreEqual<int>(1, nList.Count, "Unexpected number of Notifications.");
            string etag = this.NotificationsServiceProxy.EtagInResponse;
            StopAndStartService();
            Thread.Sleep(60000);
            nList = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                string.Empty,
                false,
                ConfigurationManager.AppSettings["GCUserName"],
                ConfigurationManager.AppSettings["GCPassword"],
                etag);
            Assert.IsNotNull(nList);
            Assert.AreEqual<int>(0, nList.Count, "Unexpected number of Notifications.");
            VerifyCleaned(1, olderThanDateTime);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verifies that user's last update time does not get updated when user's notification is not deleted by GC.")]
        [TestProperty("Type", "Feature")]
        public void N_GC_Etag()
        {
            Assert.AreEqual("dev", Config.EnvironmentSettings.Selected, "This test is can only be run against a dev box");
            common.CheckNotificationCount(ConfigurationManager.AppSettings["GCUserName"], ConfigurationManager.AppSettings["GCPassword"]);
            DateTime olderThanDateTime = DateTime.UtcNow.AddDays(-7);
            NotificationTestCommon.testHooksClient.CreateDummyNotification(CloudServices.Test.Common.Authorization.Authorization.GetXuid(ConfigurationManager.AppSettings["GCUserName"], ConfigurationManager.AppSettings["GCPassword"]));
            List<Notification> oldNList = new List<Notification>();
            for (int i = 0; i < 5; i++)
            {
                DateTime sentTime = GetRandomOldDate();
                Notification notification = NotificationTestCommon.testHooksClient.BuildNotification(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password), sentTime.ToString());
                notification.Id = string.Format("{0:D19}-{1}", (DateTime.MaxValue.Ticks - sentTime.Ticks), Guid.NewGuid());
                oldNList.Add(notification);
            }
            NotificationTestCommon.testHooksClient.CreateNotifications(oldNList);
            VerifyOldNotificationIsCreated(5, olderThanDateTime);
            List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                string.Empty,
                false,
                ConfigurationManager.AppSettings["GCUserName"],
                ConfigurationManager.AppSettings["GCPassword"],
                null);
            Assert.IsNotNull(nList);
            Assert.AreEqual<int>(1, nList.Count, "Unexpected number of Notifications.");
            string etag = this.NotificationsServiceProxy.EtagInResponse;
            StopAndStartService();
            Thread.Sleep(60000);
            try
            {
                nList = this.NotificationsServiceProxy.GetNotifications(
                    Constants.TESTGAMEID.ToString(),
                    string.Empty,
                    0,
                    Constants.IGNORE_lAST_ID,
                    100,
                    string.Empty,
                    false,
                    ConfigurationManager.AppSettings["GCUserName"],
                    ConfigurationManager.AppSettings["GCPassword"],
                    etag);
                Assert.Fail("Expected a 304.");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotModified, e.Response.Status);
            }
            VerifyCleaned(1, olderThanDateTime);
        }

        //This is expected to fail due to 5353 and 5356
        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verifies that user's last update time does not get updated when user has old FR notification that will not be cleaned up be GC.")]
        [TestProperty("Type", "Feature")]
        public void N_GC_Etag_FRNotification()
        {
            Assert.AreEqual("dev", Config.EnvironmentSettings.Selected, "This test is can only be run against a dev box");
            common.CheckNotificationCountFR(ConfigurationManager.AppSettings["GCUserName"], ConfigurationManager.AppSettings["GCPassword"]);
            DateTime olderThanDateTime = DateTime.UtcNow.AddDays(-7);
            List<Notification> oldFRNList = new List<Notification>();
            for (int i = 0; i < 5; i++)
            {
                DateTime sentTime = GetRandomOldDate();
                Notification friendReqNotification = NotificationTestCommon.testHooksClient.BuildFRNotification(CloudServices.Test.Common.Authorization.Authorization.GetXuid(ConfigurationManager.AppSettings["GCUserName"], ConfigurationManager.AppSettings["GCPassword"]), sentTime.ToString());
                friendReqNotification.Id = string.Format("{0:D19}-{1}", (DateTime.MaxValue.Ticks - sentTime.Ticks), Guid.NewGuid());
                oldFRNList.Add(friendReqNotification);
            }
            NotificationTestCommon.testHooksClient.CreateNotifications(oldFRNList);
            VerifyOldNotificationIsCreated(oldFRNList.Count, olderThanDateTime);

            List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(
                string.Empty,
                string.Empty,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                string.Empty,
                false,
                ConfigurationManager.AppSettings["GCUserName"],
                ConfigurationManager.AppSettings["GCPassword"],
                null);
            Assert.IsNotNull(nList);
            Assert.IsTrue(nList.Count >= 3, "Unexpected number of Notifications.");
            string etag = this.NotificationsServiceProxy.EtagInResponse;
            StopAndStartService();
            Thread.Sleep(60000);
            nList = this.NotificationsServiceProxy.GetNotifications(
                    string.Empty,
                    string.Empty,
                    0,
                    Constants.IGNORE_lAST_ID,
                    100,
                    string.Empty,
                    false,
                    ConfigurationManager.AppSettings["GCUserName"],
                    ConfigurationManager.AppSettings["GCPassword"],
                    etag);
            VerifyCleaned(oldFRNList.Count, olderThanDateTime);
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Create one thousand old notification and make sure that the all get deleted by GC.")]
        [TestProperty("Type", "Feature")]
        public void P_GC_Clean1ThousandOldNotification()
        {
            Assert.AreEqual("dev", Config.EnvironmentSettings.Selected, "This test is can only be run against a dev box");
            DateTime olderThanDateTime = DateTime.UtcNow.AddDays(-7);
            common.CheckNotificationCount(ConfigurationManager.AppSettings["GCUserName"], ConfigurationManager.AppSettings["GCPassword"]);

            int i = 0;
            int timeouts = 0;
            while (i < 20 && timeouts < 10)
            {
                try
                {
                    CreateNotifications(1);
                    i++;
                }
                catch (SystemException e)
                {
                    if (e.Message == "The operation has timed out")
                    {
                        Log.WriteLine("Call timed out. Trying again.");
                        timeouts++;
                        MPTestHooksProxy.Timeout = 180000; //increase timeout to three minutes.
                    }
                    else
                        throw new Exception(e.Message);
                }
            }

            List<Notification> newNList = CreateRandomNewNotifications();
            StopAndStartService();
            VerifyCleaned(1000, olderThanDateTime);
            VerifyNewNotificationsAreNotDeleted(newNList, olderThanDateTime);
        }

        //this test took 24 minutest when I tested it (took too much time creating notifications. It took less than a minute to be cleaned up)
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Create three thousand old notification and make sure that the all get deleted by GC.")]
        [TestProperty("Type", "Feature")]
        public void P_GC_Clean3ThousandOldNotification()
        {
            Assert.AreEqual("dev", Config.EnvironmentSettings.Selected, "This test is can only be run against a dev box");
            DateTime olderThanDateTime = DateTime.UtcNow.AddDays(-7);
            common.CheckNotificationCount(ConfigurationManager.AppSettings["GCUserName"], ConfigurationManager.AppSettings["GCPassword"]);

            int i = 0;
            int timeouts = 0;
            while (i < 60 && timeouts < 10)
            {
                try
                {
                    CreateNotifications(1);
                    i++;
                }
                catch (SystemException e)
                {
                    if (e.Message == "The operation has timed out")
                    {
                        Log.WriteLine("Call timed out. Trying again.");
                        timeouts++;
                        MPTestHooksProxy.Timeout = 180000; //increase timeout to three minutes.
                    }
                    else
                        throw new Exception(e.Message);
                }
            }

            List<Notification> newNList = CreateRandomNewNotifications();
            StopAndStartService();
            VerifyCleaned(3000, olderThanDateTime);
            VerifyNewNotificationsAreNotDeleted(newNList, olderThanDateTime);
        }

        private static List<Notification> BuildOldNotifications(int count)
        {
            List<Notification> oldNList = new List<Notification>();
            for (int i = 0; i < count; i++)
            {
                DateTime sentTime = GetRandomOldDate();
                Notification notification = NotificationTestCommon.testHooksClient.BuildNotification(CloudServices.Test.Common.Authorization.Authorization.GetXuid(ConfigurationManager.AppSettings["GCUserName"], ConfigurationManager.AppSettings["GCPassword"]), sentTime.ToString());
                notification.Id = string.Format("{0:D19}-{1}", (DateTime.MaxValue.Ticks - sentTime.Ticks), Guid.NewGuid());
                oldNList.Add(notification);
            }
            return oldNList;
        }

        private static List<Notification> CreateRandomNewNotifications()
        {
            List<Notification> newNList = new List<Notification>();
            int numNotifications = randomGenerator.Next(5, 20);
            for (int i = 0; i < numNotifications; i++)
            {
                DateTime sentTime = GetRandomNewDate();
                Notification newNotification = NotificationTestCommon.testHooksClient.BuildNotification(Guid.NewGuid().ToString(), CloudServices.Test.Common.Authorization.Authorization.GetXuid(ConfigurationManager.AppSettings["GCUserName"], ConfigurationManager.AppSettings["GCPassword"]), sentTime.ToString());
                newNotification.Id = string.Format("{0:D19}-{1}", (DateTime.MaxValue.Ticks - sentTime.Ticks), Guid.NewGuid());
                newNList.Add(newNotification);
            }
            NotificationTestCommon.testHooksClient.CreateNotifications(newNList);
            return newNList;
        }

        private static void CreateNotifications(int times50Notifications)
        {
            for (int i = 0; i < times50Notifications; i++)
            {
                NotificationTestCommon.testHooksClient.CreateNotifications(BuildOldNotifications(50));
            }
        }

        private static void VerifyOldNotificationIsCreated(int numNotificatiosCreated, DateTime olderThanDateTime)
        {
            List<Notification> garbageNotificationList = new List<Notification>();
            garbageNotificationList = NotificationTestCommon.testHooksClient.QueryGarbageNotifications(olderThanDateTime);
            Assert.IsNotNull(garbageNotificationList);
            Assert.IsTrue(garbageNotificationList.Count >= numNotificatiosCreated, "Error: setup failed. Expected <" + numNotificatiosCreated + "> old notifications. Actual<" + garbageNotificationList.Count + "> old notification on azure after setup.");
        }

        private static void VerifyCleaned(int numNotificationsCreated, DateTime olderThanDateTime)
        {
            List<Notification> garbageNotificationList = new List<Notification>();
            int loops = 10;
            if (numNotificationsCreated > 50)
                loops = numNotificationsCreated / 50;
            int i = 0;
            for (i = 0; i < loops; i++)
            {
                Thread.Sleep(6000);
                garbageNotificationList = NotificationTestCommon.testHooksClient.QueryGarbageNotifications(olderThanDateTime);
                if (garbageNotificationList.Count == 0)
                    break;
            }
            Assert.AreEqual(0, garbageNotificationList.Count, "Error:Not all notifications were deleted in " + 2 * loops + " seconds.");
        }

        private static void StopAndStartService()
        {
            NotificationTestCommon.StopService("a-sediro2k8", "GarbageCollectorService");
            NotificationTestCommon.StartService("a-sediro2k8", "GarbageCollectorService");
        }

        private static void VerifyNewNotificationsAreNotDeleted(string sessionId, List<Notification> newNListCreated, DateTime olderThanDateTime)
        {
            List<Notification> notifications = common.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), sessionId, 0, Constants.IGNORE_lAST_ID, Int32.MaxValue, String.Empty, false, ConfigurationManager.AppSettings["GCUserName"], ConfigurationManager.AppSettings["GCPassword"], null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual(newNListCreated.Count, notifications.Count, "Error: Unexpected number of notfiications.");
            foreach (Notification n in notifications)
            {
                Assert.IsTrue(n.SentTime.CompareTo(olderThanDateTime) >= 0, "Error: Notification is old.");
                for (int i = 0; i < newNListCreated.Count; i++)
                {
                    if (n.Id == newNListCreated[i].Id)
                        break;
                    if (i == newNListCreated.Count - 1)
                        Assert.Fail("Error: Notification found after GC has cleaned up old notifications is different from new notification created at setup.");
                }
            }
        }

        private static void VerifyNewNotificationsAreNotDeleted(List<Notification> newNListCreated, DateTime olderThanDateTime)
        {
            VerifyNewNotificationsAreNotDeleted(string.Empty, newNListCreated, olderThanDateTime);
        }

        //private static void VerifyFRNotificationsAreNotCleaned(List<Notification> oldFRNotifications, DateTime olderThanDateTime)
        //{
        //    List<Notification> garbageNotificationList = new List<Notification>();
        //    for (int i = 0; i < 10; i++)
        //    {
        //        garbageNotificationList = NotificationTestCommon.testHooksClient.QueryGarbageNotifications(olderThanDateTime);
        //        Assert.IsNotNull(garbageNotificationList);
        //        if (garbageNotificationList.Count == oldFRNotifications.Count)
        //            break;
        //        else
        //            Thread.Sleep(2000);
        //    }
        //    Assert.AreEqual(oldFRNotifications.Count, garbageNotificationList.Count, "Error:Incorrect number of notifications. GC has cleaned FR notifications or it has not cleaned all of other types of notifications.");
        //    foreach (Notification n in garbageNotificationList)
        //    {
        //        for (int i = 0; i < garbageNotificationList.Count; i++)
        //        {
        //            if (n.Id == oldFRNotifications[i].Id)
        //                break;
        //            if (i == oldFRNotifications.Count - 1)
        //                Assert.Fail("Error: Notification found after GC has cleaned up old notifications is different from Does not contain all the FR notifications created at the setup step.");
        //        }
        //    }
        //}
        private static DateTime GetRandomOldDate()
        {
            return DateTime.UtcNow.AddHours(-randomGenerator.Next(24)).AddDays(-randomGenerator.Next(8, 30)).AddMonths(-randomGenerator.Next(12)).AddYears(-randomGenerator.Next(10));
        }
        private static DateTime GetRandomNewDate()
        {
            return DateTime.UtcNow.AddHours(-randomGenerator.Next(23)).AddDays(-randomGenerator.Next(6));
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\TestAreaBase.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Diagnostics;
using System.Net;
using System.Xml;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Configuration;
using AsyncMultiplayer.SessionCommon;
using AsyncMultiplayer.NotificationService;
using CloudServices.Test.Common.Configuration;
using LIVEN.Common.Diagnostics;
using System.Threading;
using Multiplayer.Test.Proxy;
using CloudServices.Test.Common.Proxy;
using CloudServices.Test.Common;
using Leet.Core.Platforms;
using Gds.Contracts;
using System.Runtime.Serialization;
using System.IO;
using System.Web;

namespace Multiplayer.Test.API
{
    /// <summary>
    /// 
    /// </summary>
    [TestClass]
    public class TestAreaBase
    {
        private TestContext testContextInstance;
        private GameSessionProxy gameSessionProxy;
        private GameStateProxy gameStateProxy;
        private NotificationsServiceProxy notificationClient;
        public static  MPTestHooksProxy testHooksClient;
        public static int notificationSleepTime = 6000;
        public static bool lockTest = true;
        private static Random rnd = new Random();
        private static object rndLock = new object();
        public static Notification.NotificationType [] nTypes = {Notification.NotificationType.YourTurn,
                                                                  Notification.NotificationType.Nudge,  
                                                                  Notification.NotificationType.Invitation, 
                                                                  Notification.NotificationType.GameOver, 
                                                                  Notification.NotificationType.Message, 
                                                                  Notification.NotificationType.YouWin,
                                                                  Notification.NotificationType.YouLose,
                                                                  Notification.NotificationType.GameTie,
                                                                  Notification.NotificationType.Warning};

        /// <summary>
        /// 
        /// </summary>
        static TestAreaBase()
        {
            //important... we need to init this guy to be able to successfully directly reference dev error codes/messages
            SessionServiceEvents.Initialize("Multiplayer.Test");
            NotificationEvents.Initialize("Multiplayer.Test");
            if (ConfigurationManager.AppSettings["lockTest"] == "false")
                lockTest = false;
            Log.LogToFile = false;
            testHooksClient = new MPTestHooksProxy();
        }

        /// <summary>
        /// 
        /// </summary>
        public TestAreaBase()
        {
            if (Trace.Listeners.Count > 1)
            {
                Trace.Listeners[1].Filter = Trace.Listeners[0].Filter;
                Trace.Listeners[1].IndentLevel = Trace.Listeners[0].IndentLevel;
                Trace.Listeners[1].IndentSize = Trace.Listeners[0].IndentSize;
                Trace.Listeners[1].TraceOutputOptions = Trace.Listeners[0].TraceOutputOptions;
            }
            else
                Trace.TraceWarning("Unable to configure custom trace listening.");

            if (bool.Parse(System.Configuration.ConfigurationManager.AppSettings["IgnoreServerSSLErrors"]))
                System.Net.ServicePointManager.ServerCertificateValidationCallback = (sender, certificate, chain, sslPolicyErrors) => true;

            StringBuilder trace = new StringBuilder();
            trace.AppendFormat("Running against the {0} environment.\r\n", Config.Environment.Name);
            trace.AppendFormat("\tGame Session Url:\t{0}\r\n", Config.Environment.GameSessionService);
            trace.AppendFormat("\tGame State Url:\t{0}\r\n", Config.Environment.GameStateService);
            trace.AppendFormat("\tNotifications Url:\t{0}\r\n", Config.Environment.NotificationsService);
            trace.AppendFormat("\tMPTestHooks url:\t{0}\r\n", Config.Environment.MPTestHooksService);
            trace.AppendFormat("\tXblob Machine/Host name:\t{0}\r\n", new Uri(Config.Environment.StsSettings.StsUrl).Host);
            Trace.TraceInformation(trace.ToString());
        }

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return this.testContextInstance;
            }
            set
            {
                this.testContextInstance = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public GameSessionProxy GameSessionProxy
        {
            get
            {
                if (this.gameSessionProxy == null)
                    this.gameSessionProxy = new GameSessionProxy();
                return this.gameSessionProxy;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public GameStateProxy GameStateProxy
        {
            get
            {
                if (this.gameStateProxy == null)
                    this.gameStateProxy = new GameStateProxy();
                return this.gameStateProxy;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public NotificationsServiceProxy NotificationsServiceProxy
        {
            get
            {
                if (this.notificationClient == null)
                    this.notificationClient = new NotificationsServiceProxy();
                return this.notificationClient;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public static Random GlobalRandom
        {
            get
            {
                //NOTE: NOT thread safe!
                return rnd;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="max"></param>
        /// <returns></returns>
        public static int GenerateRandomNumber(int max)
        {
            lock (rndLock)
            {
                return rnd.Next(max);
            }
        }
        /// <summary>
        /// 
        /// </summary>
        [TestInitialize]
        public void Start()
        {
            TraceEx.TraceStart("Starting test: {0}", this.testContextInstance.TestName);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCleanup]
        public void Finish()
        {
            TraceEx.TraceStop("Finished test: {0}", this.testContextInstance.TestName);
            if (this.testContextInstance.CurrentTestOutcome == UnitTestOutcome.Passed)
                Trace.TraceInformation("{0} Passed!", this.testContextInstance.TestName);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="expectedHttpStatus"></param>
        /// <param name="expectedErrorCode"></param>
        /// <param name="response"></param>
        public static void VerifyException(HttpStatusCode expectedHttpStatus, int expectedErrorCode, RestResponse response)
        {
            VerifyException((int)expectedHttpStatus, expectedErrorCode, response);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="expectedHttpStatus"></param>
        /// <param name="expectedErrorCode"></param>
        /// <param name="response"></param>
        public static void VerifyException(int expectedHttpStatus, int expectedErrorCode, RestResponse response)
        {
            Assert.AreEqual<int>(expectedHttpStatus, (int)response.Status, String.Format("Error validating HTTP status; expected {0}, but got {1}.", expectedHttpStatus, (int)response.Status));
            int actualErrorCode = ParseErrorCodeFromResponse(response.Body);
            Assert.AreEqual<int>(expectedErrorCode, actualErrorCode, String.Format("Error validating service error code; expected {0}, but got {1}.", expectedErrorCode, actualErrorCode));
        }

        ///<summary>
        ///
        ///<summary>
        /// <param name="expectedHttpStatus"></param>   
        /// <param name="response"></param>
        public static void VerifyException(HttpStatusCode expectedHttpStatus, RestResponse response)
        {
            VerifyException((int)expectedHttpStatus, response);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="expectedHttpStatus"></param>   
        /// <param name="response"></param>
        public static void VerifyException(int expectedHttpStatus, RestResponse response)
        {
            Assert.AreEqual<int>(expectedHttpStatus, (int)response.Status, String.Format("Error validating HTTP status; expected {0}, but got {1}.", expectedHttpStatus, (int)response.Status));        
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="body"></param>
        /// <returns></returns>
        public static int ParseErrorCodeFromResponse(string body)
        {
            try
            {
                XmlDocumentEx xml = new XmlDocumentEx(body, true);
                XmlNode node = xml.SelectSingleNode("dfltns:ServiceErrorMessage/dfltns:LIVEnErrorCode", xml.NamespaceManager);
                if (node == null)
                    throw new TestFailureException("Unable to find xpath 'dfltns:ServiceErrorMessage/dfltns:LIVEnErrorCode' in response xml!");

                string errorCodeText = node.InnerText;
                int livEnExceptionEventID = (int)long.Parse(errorCodeText) & 0x0000FFFF; // Disregard the higher 16 bits of LIVEnErrorCode.
                return livEnExceptionEventID;
            }
            catch (XmlException)
            {
                throw new TestFailureException("Bug! Invalid error Xml response returned by the server!");
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public static CreationData InitializeCreationData(uint gameID, int variant, int totalSeatsAvailable, int reservedSeatsAvailable, byte[] sessionParameters, InactivityWarningBehavior iwb, bool canRemoveEmptySeats, string displayName)
        {
            // Initialize creationData
            CreationData creationData = new CreationData();
            creationData.GameID = gameID;
            creationData.Variant = variant;
            creationData.TotalSeatsAvailable = totalSeatsAvailable;
            creationData.ReservedSeatsAvailable = reservedSeatsAvailable;   //with current implementation TotalSeatsAvailable should be equal to ReservedSeatsAvailable
            creationData.SessionParameters = sessionParameters;
            creationData.InactivityWarning = iwb;
            creationData.CanRemoveEmptySeats = canRemoveEmptySeats;
            creationData.DisplayName = displayName;

            return creationData;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="gameID"></param>
        /// <param name="sessionID"></param>
        /// <param name="seatIndex"></param>
        /// <returns></returns>
        public static JoinData InitializeJoinData(uint gameID, string sessionID, int seatIndex)
        {
            JoinData joinData = new JoinData();
            joinData.GameID = gameID;
            joinData.SessionID = sessionID;
            joinData.SeatIndex = seatIndex;
            joinData.SeatParameters = new byte[] { 4, 5, 6 };

            return joinData;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="beforeModifySessionState"></param>
        /// <returns></returns>
        public static ModificationData InitializeModificationData(SessionState beforeModifySessionState)
        {
            // Initialize ModificationData
            ModificationData modificationData = new ModificationData();
            modificationData.CanRemoveEmptySeats = true;
            modificationData.DisplayName = "TestGameModify";
            modificationData.InactivityWarning = new InactivityWarningBehavior();
            modificationData.IsFriendsOnly = true;
            modificationData.ReservedSeatsAvailable = 10;
            modificationData.SessionParameters = new byte[] { 1, 2, 3 };
            modificationData.TotalSeatsAvailable = 10;

            return modificationData;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="creationData"></param>
        /// <param name="sessionState"></param>
        public static void AssertCreateSessionState(CreationData creationData, SessionState sessionState)
        {
            Trace.TraceInformation("Verifying expected/actual SessionState data...");
            Assert.IsNotNull(sessionState);
            Assert.IsNotNull(Convert.ToDateTime(sessionState.CreationTime.ToString("MM/dd/yyyy hh:mm:ss.ffff")), "ERROR: sessionState.CreationTime: " + sessionState.CreationTime.ToString("MM/dd/yyyy hh:mm:ss.ffff") + " timestamp should NOT be Null");
            Assert.AreEqual(creationData.GameID, sessionState.GameID, String.Format("Expected Game ID {0}, but found {1}!", creationData.GameID, sessionState.GameID));
            Assert.AreEqual(creationData.Variant, sessionState.Variant, "ERROR: VerifyStub_CreateSession(): Variant is Wrong");
            Assert.AreEqual(creationData.TotalSeatsAvailable - 1, sessionState.SeatsAvailable, "ERROR: VerifyStub_CreateSession(): SeatsAvailable is Wrong");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="beforeJoinSessionState"></param>
        /// <param name="afterJoinSessionState"></param>
        public static void AssertJoinSessionState(SessionState beforeJoinSessionState, SessionState afterJoinSessionState)
        {
            Assert.IsNotNull(afterJoinSessionState);

            Assert.IsNotNull(Convert.ToDateTime(afterJoinSessionState.CreationTime.ToString("MM/dd/yyyy hh:mm:ss.ffff")), "ERROR: afterJoinSessionState.CreationTime: " + afterJoinSessionState.CreationTime.ToString("MM/dd/yyyy hh:mm:ss.ffff") + " timestamp should NOT be Null");
            Assert.AreEqual(beforeJoinSessionState.GameID, afterJoinSessionState.GameID, "ERROR: GameID is wrong");
            Assert.AreEqual(beforeJoinSessionState.Variant, afterJoinSessionState.Variant, "ERROR: Variant is Wrong");
            Assert.AreEqual(beforeJoinSessionState.SeatsAvailable - 1, afterJoinSessionState.SeatsAvailable, "ERROR: SeatsAvailable is Wrong");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="expectedSessionState"></param>
        /// <param name="actualSessionState"></param>
        public static void AssertSessionState(SessionState expectedSessionState, SessionState actualSessionState)
        {
            Assert.IsNotNull(actualSessionState);

            Assert.AreEqual<DateTime>(expectedSessionState.CreationTime, actualSessionState.CreationTime, "ERROR: expectedSessionState.CreationTime should be equal to actualSessionState.CreationTime");
            Assert.AreEqual(expectedSessionState.GameID, actualSessionState.GameID, "ERROR: GameID is wrong");
            Assert.AreEqual(expectedSessionState.Variant, actualSessionState.Variant, "ERROR: Variant is Wrong");
            Assert.AreEqual(expectedSessionState.SeatsAvailable, actualSessionState.SeatsAvailable, "ERROR: SeatsAvailable is Wrong");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="beforeLeaveSessionState"></param>
        /// <param name="afterLeaveSessionState"></param>
        public static void AssertLeaveSessionState(SessionState beforeLeaveSessionState, SessionState afterLeaveSessionState)
        {
            Assert.IsNotNull(afterLeaveSessionState);

            Assert.IsNotNull(Convert.ToDateTime(afterLeaveSessionState.CreationTime.ToString("MM/dd/yyyy hh:mm:ss.ffff")), "ERROR: afterLeaveSessionState.CreationTime: " + afterLeaveSessionState.CreationTime.ToString("MM/dd/yyyy hh:mm:ss.ffff") + " timestamp should NOT be Null");
            Assert.AreEqual(beforeLeaveSessionState.GameID, afterLeaveSessionState.GameID, "ERROR: GameID is wrong");
            Assert.AreEqual(beforeLeaveSessionState.Variant, afterLeaveSessionState.Variant, "ERROR: Variant is Wrong");
            Assert.AreEqual(beforeLeaveSessionState.SeatsAvailable + 1, afterLeaveSessionState.SeatsAvailable, "ERROR: SeatsAvailable is Wrong");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="modificationData"></param>
        /// <param name="beforeModifySessionState"></param>
        /// <param name="afterModifySessionState"></param>
        public static void AssertModifySessionState(ModificationData modificationData, SessionState beforeModifySessionState, SessionState afterModifySessionState)
        {
            Assert.IsNotNull(afterModifySessionState);

            //modificationData.SessionParameters

            Assert.IsNotNull(Convert.ToDateTime(afterModifySessionState.CreationTime.ToString("MM/dd/yyyy hh:mm:ss.ffff")), "ERROR: afterModifySessionState.CreationTime: " + afterModifySessionState.CreationTime.ToString("MM/dd/yyyy hh:mm:ss.ffff") + " timestamp should NOT be Null");
            Assert.AreEqual(beforeModifySessionState.GameID, afterModifySessionState.GameID, "ERROR: GameID is not as Expected");
            Assert.AreEqual(beforeModifySessionState.SessionID, afterModifySessionState.SessionID, "ERROR: Variant is not as Expected");
            Assert.AreEqual(beforeModifySessionState.Variant, afterModifySessionState.Variant, "ERROR: Variant is not as Expected");

            Assert.AreEqual(modificationData.CanRemoveEmptySeats, afterModifySessionState.CanRemoveEmptySeats, "ERROR: Modified CanRemoveEmptySeats is not as Expected");
            Assert.AreEqual(modificationData.DisplayName, afterModifySessionState.DisplayName, "ERROR: Modified DisplayName is not as Expected");
            Assert.AreEqual(modificationData.InactivityWarning.Action.ToString(), afterModifySessionState.InactivityWarning.Action.ToString(), "ERROR: Modified InactivityWarningBehavior.Action is not as Expected");
            Assert.AreEqual(modificationData.InactivityWarning.Interval, afterModifySessionState.InactivityWarning.Interval, "ERROR: Modified InactivityWarningBehavior.Interval is not as Expected");
            Assert.AreEqual(modificationData.InactivityWarning.MaxNumberOfNudges, afterModifySessionState.InactivityWarning.MaxNumberOfNudges, "ERROR: Modified InactivityWarningBehavior.MaxNumberofNudges is not as Expected");
            Assert.IsTrue(modificationData.SessionParameters.SequenceEqual(afterModifySessionState.SessionParameters), "ERROR: Modified SessionParameters is not as Expected");
            Assert.AreEqual(modificationData.TotalSeatsAvailable, afterModifySessionState.SeatsAvailable, "ERROR: Modified SeatsAvailable is not as Expected");

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="gamestate"></param>
        /// <param name="modifiableGameState"></param>
        public static void AssertGameState(ModifiableGameState expectedGameState, FullGameState actualGameState)
        {
            Trace.TraceInformation("Verifying expected/actual Game State data...");
            Assert.AreEqual<int>(expectedGameState.ActiveSeatIndex, actualGameState.GameStateInfo.ActiveSeatIndex, "ActiveSeatIndex is not as Expected");
            Assert.IsTrue(expectedGameState.GameData.SequenceEqual(actualGameState.GameData), "actual.GameData is not as expected GameData");
            Trace.TraceInformation("Successfully verified Game State data!");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="gamestate"></param>
        /// <param name="modifiableGameState"></param>
        public static void AssertFullGameStateToSessionStateGameState(SessionState expectedState, FullGameState actualGameState)
        {
            Trace.TraceInformation("Verifying expected/actual Game State data...");

            Assert.IsTrue(expectedState.SessionParameters.SequenceEqual(actualGameState.GameData), "actual.GameData is not as expected GameData");
            Assert.AreEqual(expectedState.State.ActiveSeatIndex, actualGameState.GameStateInfo.ActiveSeatIndex, "ActiveSeatIndex does not match between SessionState & GameState");
            Assert.AreEqual(expectedState.State.GameID, actualGameState.GameStateInfo.GameID, "GameID does not match between SessionState & GameState");
            Assert.AreEqual(expectedState.State.IsComplete, actualGameState.GameStateInfo.IsComplete, "IsComplete does not match between SessionState & GameState");
            Assert.AreEqual(expectedState.State.LastModified, actualGameState.GameStateInfo.LastModified, "LastModified does not match between SessionState & GameState");
            Assert.AreEqual(expectedState.State.SequenceNumber, actualGameState.GameStateInfo.SequenceNumber, "SequenceNumber does not match between SessionState & GameState");
            Assert.AreEqual(expectedState.State.SessionID, actualGameState.GameStateInfo.SessionID, "SessionID does not match between SessionState & GameState");
            Assert.AreEqual(expectedState.State.Variant, actualGameState.GameStateInfo.Variant, "Variant does not match between SessionState & GameState");

            Trace.TraceInformation("Successfully verified Game State data!");
        }

        /// <summary>
        /// Verify Notification
        /// </summary>
        /// <param name="sessionState"></param>
        /// <param name="category"></param>
        /// <param name="notificationType"></param>
        /// <param name="userVisible"></param>
        /// <param name="memberName"></param>
        /// <param name="password"></param>
        public void VerifyNotification(SessionState sessionState, Notification.NotificationCategory category, Notification.NotificationType notificationType, bool userVisible, string memberName, string password)
        {
            List<Notification> notificationList = this.NotificationsServiceProxy.GetNotifications(
                sessionState.GameID.ToString(),
                sessionState.SessionID,
                (int)category,
                String.Empty,
                1,
                notificationType.ToString(),
                true,
                memberName,
                password,
                10,
                notificationSleepTime);

            Notification notification = null;
            if (notificationList.Count > 0)
            {
                notification = notificationList[0];
            }

            Assert.IsNotNull(notification, "Error: Did not find Notification.");
            Assert.AreEqual(notificationType, notification.Type, "Notification Type did not match.");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public static byte[] GenerateRandomBytes()
        {
            return GenerateRandomBytes(GlobalRandom.Next(129));
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="length"></param>
        /// <returns></returns>
        public static byte[] GenerateRandomBytes(int length)
        {
            byte[] data = new byte[length];
            GlobalRandom.NextBytes(data);
            return data;
        }

        public static GameResults GetDefaultTwoPlayerGameResult(string gameId, uint variant)
        {
            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(gameId),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 10,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = variant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(gameId),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 10,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = variant
            };
            return gameResults;
        }

        public static void ValidateNotificationContent(Notification notification, string notificationDisplayName, string senderGamerTag, string senderDisplayName)
        {
            ValidateNotificationContent(notification, notificationDisplayName, senderGamerTag, senderDisplayName, null);
        }
        public static void ValidateNotificationContent(Notification notification, string notificationDisplayName, string senderGamerTag, string senderDisplayName, string datablob)
        {
            UserInfo uinfo = new UserInfo();
            string from = HttpUtility.HtmlDecode(notification.From);
            DataContractSerializer dcjs = new DataContractSerializer(typeof(UserInfo));
            UserInfo userInfo = (UserInfo)dcjs.ReadObject(XmlReader.Create(new StringReader(from)));
            Assert.AreEqual(senderGamerTag, userInfo.GamerTag, "Error: From is incorrect.");
            Assert.AreEqual(senderDisplayName, userInfo.DisplayName, "Error: Display Name should be empty");
            Assert.AreEqual(@"12/31/9999 11:59:59 PM", notification.ExpirationTime.ToString(), "Error: Incorrect Expiration Time in Notification");
            Assert.IsTrue(((DateTime.UtcNow.CompareTo(notification.SentTime) >= 0) && (DateTime.UtcNow.AddMinutes(-5).CompareTo(notification.SentTime) <= 0)), "Error: Incorrect Sent Time " + notification.SentTime.ToString() + " in notification as compared to now " + DateTime.UtcNow.ToString());
            Assert.AreEqual("Backgammon", notification.GameDisplayName, "Error: Incorrect game display name.");
            Assert.AreEqual(notificationDisplayName, notification.TypeDisplayName, "Error: Incorrect notification display name.");
            Assert.AreEqual(datablob, notification.DataBlob, "Error: Incorrect data blob content.");
            Assert.AreEqual("", notification.UserId, "Error:UserId should be empty in notifications");
            Assert.AreEqual((uint)0, notification.Variant, "Error: Unexpected variant in notification.");
            Assert.AreEqual(Notification.NotificationStatus.UnRead, notification.Status, "Error: Unexpected notification status.");
        }

        public Notification GetNotification(string gameId, string sessionId, string type, string userName, string Password)
        {
            List<Notification> notificationList = this.NotificationsServiceProxy.GetNotifications(
                gameId,
                sessionId,
                0,
                Constants.IGNORE_lAST_ID,
                10,
                type,
                true,
                userName,
                Password,
                10,
                notificationSleepTime);
            Assert.IsNotNull(notificationList, "Error: Did not find Notification.");
            Assert.AreEqual(1, notificationList.Count, "Error: Incorrect number of notifications.");
            return notificationList[0];
        }

        public static SessionState InitSessionState(string createDateTime, bool isSessionComplete, int activeSeatIndex)
        {
            // Initialize InactivityWarningBehavior
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            //SessionParameters
            byte[] sessionParameters = new byte[] { 1, 2, 3 };

            // Initalize testPlayer1Identity
            string token1 = "0000" + CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            string publicToken1 = Config.Environment.UserSettings[0].Gamertag;

            //Set SessionState for Session
            SessionState sessionState = new SessionState();

            sessionState.GameID = Constants.TESTGAMEID;
            sessionState.Variant = 0;
            sessionState.SessionID = Guid.NewGuid().ToString();
            sessionState.DisplayName = "TestGame";
            sessionState.SeatsAvailable = 10;
            sessionState.ReservedSeatsAvailable = 10;
            sessionState.Category = SessionType.AllReserved;
            sessionState.OwnerSeatIndex = 0;
            sessionState.SessionParameters = sessionParameters;
            sessionState.CreationTime = DateTime.Parse(createDateTime);
            sessionState.InactivityWarning = iwb;
            sessionState.IsInactivityWarningSent = false;
            sessionState.IsClosed = false;
            sessionState.CanRemoveEmptySeats = true;

            // Put in the SeatInfo for the users

            sessionState.Seats = new SeatInfo[1];

            SeatInfo seatInfo1 = new SeatInfo();
            seatInfo1.Index = 0; // Creator always sits on seat 0.
            seatInfo1.IsAI = false;
            seatInfo1.Profile = new IdentityToken(IdentityServiceType.XUID, token1, publicToken1);
            seatInfo1.Locale = "en-US";
            seatInfo1.PlatformType = PlatformType.Mobile;
            sessionState.Seats[0] = seatInfo1;

            // Create the initial game state
            sessionState.State = new GameState();
            sessionState.State.GameID = Constants.TESTGAMEID;
            sessionState.State.Variant = sessionState.Variant;
            sessionState.State.SessionID = sessionState.SessionID;
            sessionState.State.IsComplete = isSessionComplete;
            sessionState.State.LastModified = sessionState.CreationTime;
            sessionState.State.SequenceNumber = 0;
            sessionState.State.ActiveSeatIndex = activeSeatIndex;
            return sessionState;
        }

        public string GetGameIdOtherThanTitleId()
        {
            string[] differentGameIds = { Constants.ALTERNATE_TESTGAMEID.ToString(), Constants.NONMULTIPLAYER_TESTGAMEID.ToString(), "3456734", "1", "0", "3456"};
            return differentGameIds[rnd.Next(differentGameIds.Length)];
        }

        public string GetInvalidGameId()
        {
            string[] invalidGameIds = { "invalidGameId", "67578947386436525486582346523465981364589236458263456234865" };
            return invalidGameIds[rnd.Next(invalidGameIds.Length)];
        }

        public static bool BeginTest(string testType)
        {
            for (int i = 0; i < 60; i++)
            {
                if (testHooksClient.BeginTest(testType))
                    return true;
                Thread.Sleep(5000);
            }
            return false;
        }

        public static void LockTest()
        {
            LockTest("notification");
        }

        public static void LockTest(string testType)
        {
            if (lockTest)
            {
                bool isTestAllowed = false;
                try
                {
                    isTestAllowed = BeginTest(testType);
                }
                catch (Exception e)
                {
                    Log.WriteLine(String.Format("There was an error while trying to lock test. Exception: {0}", e.Message));
                    return;
                }
                Assert.IsTrue(isTestAllowed, "Another test is running in parallel. Please try running the test another time.");
            }
        }
        public static void UnlockTest()
        {
            UnlockTest("notification");
        }

        public static void UnlockTest(string testType)
        {
            if (TestAreaBase.lockTest)
                try
                {
                    testHooksClient.EndTest(testType);
                }
                catch (Exception e)
                {
                    Log.WriteLine(String.Format("There was an error while trying to unlock test. Exception: {0}", e.Message));
                }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\Notifications\NotificationE2E.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using CloudServices.Test.Common.Configuration;
using AsyncMultiplayer.NotificationService;
using MultiPlayer.Test.Data;

namespace Multiplayer.Test.API
{
    /// <summary>
    /// Summary description for NotificationSmokeTest
    /// </summary>
    [TestClass]
    public class NotificationE2E : TestAreaBase
    {
        private static NotificationTestCommon common = new NotificationTestCommon();
        private Random randomGenerator = new Random();

        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
            // Setting this to false to get logs out on TRX files
            Log.LogToFile = false;
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            int randIndex = randomGenerator.Next(0, LocalizationTestData.GOOD_LOCALE.Length / 2);
            this.NotificationsServiceProxy.Locale = LocalizationTestData.GOOD_LOCALE[randIndex, 0];
            NotificationTestCommon.cleanupFR = false;
            LockTest();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            try
            {
                common.TestCleanup();
            }
            finally
            {
                UnlockTest();
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Will smoke test Notifications.")]
        [TestProperty("Type", "BVTs")]
        //this test is independent of MPTestHooks svc.
        public void SmokeNotifications()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 3, "We need three users for this test");

            //setup: verify no prior notifications
            common.CheckNotificationCount(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            common.CheckNotificationCount(Config.Environment.UserSettings[2].Membername, Config.Environment.UserSettings[2].Password);

            //send invite
            string sessionId = Guid.NewGuid().ToString();
            string recipients = Config.Environment.UserSettings[1].Membername + ";gamertag:" + Config.Environment.UserSettings[2].Gamertag + ";" + "reversepw@hotmail.com;";
            common.SendInviteRequest(sessionId, true, recipients);

            common.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            common.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, Config.Environment.UserSettings[2].Membername, Config.Environment.UserSettings[2].Password);

            //Verify sent for second user(by gamertag)
            VerifyNotifications(sessionId, Config.Environment.UserSettings[2].Membername, Config.Environment.UserSettings[2].Password, 1);

            //verify sent for first user(by email address)
            List<Notification> notifications = VerifyNotifications(sessionId, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password, 1);

            //delete by session for first user
            this.NotificationsServiceProxy.DeleteNotificationBySession(notifications[0].GameId.ToString(), sessionId, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            //verify deleted for first user
            VerifyNotifications(sessionId, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password, 0);

            //Verify not deleted for second user
            notifications = VerifyNotifications(sessionId, Config.Environment.UserSettings[2].Membername, Config.Environment.UserSettings[2].Password, 1);
            
            //verify default status
            Assert.AreEqual<Notification.NotificationStatus>(Notification.NotificationStatus.UnRead, notifications[0].Status, "Error: Invite notification status was not unread by default.");

            //update notification
            this.NotificationsServiceProxy.UserID = Config.Environment.UserSettings[2].Membername;
            this.NotificationsServiceProxy.Password = Config.Environment.UserSettings[2].Password;
            this.NotificationsServiceProxy.UpdateNotification(notifications[0].Id, Notification.NotificationStatus.Viewed.ToString());

            //verify update
            notifications = VerifyNotifications(sessionId, Config.Environment.UserSettings[2].Membername, Config.Environment.UserSettings[2].Password, 1);
            Assert.AreEqual<Notification.NotificationStatus>(Notification.NotificationStatus.Viewed, notifications[0].Status, "Error: Update did not do its job.");

            //delete by id
            this.NotificationsServiceProxy.DeleteNotificationQuery(notifications[0].Id, Config.Environment.UserSettings[2].Membername, Config.Environment.UserSettings[2].Password);

            //verify delete
            VerifyNotifications(sessionId, Config.Environment.UserSettings[2].Membername, Config.Environment.UserSettings[2].Password, 0);
        }
        
        private List<Notification> VerifyNotifications(string sessionId, string userId, string password, int notificationCount)
        {
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                sessionId,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                String.Empty,
                false,
                userId,
                password,
                null);

            Assert.IsNotNull(notifications);
            Assert.AreEqual(notificationCount, notifications.Count, "Error: Unexpected number of notifications.");
            return notifications;
        }
        private List<Notification> VerifyFRNotifications(string userId, string password)
        {
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                string.Empty,
                string.Empty,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                Notification.NotificationType.FriendRequest.ToString(),
                false,
                userId,
                password,
                null);

            Assert.IsNotNull(notifications);
            Assert.AreEqual(1, notifications.Count, "Error: Unexpected number of notifications.");
            return notifications;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\Notifications\DependencyTests.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using AsyncMultiplayer.NotificationService;
using MultiPlayer.Test.GmsIngestionService;

namespace Multiplayer.Test.API
{
    /// <summary>
    /// Summary description for DependencyTests
    /// </summary>
    [TestClass]
    public class DependencyTests
    {
        public DependencyTests()
        {
            //
            // TODO: Add constructor logic here
            //
        }
        private static NotificationTestCommon common = null;

        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
            common = new NotificationTestCommon();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            common.TestCleanup();
        }

        //
        // This code runs before every test case -
        // For Notifications, this means ensuring at least a single notification is populated in the server and that all tests go to a new SessionID
        // This ensures the session gets properly cleaned up at the end of the test.
        //

        [TestMethod, Owner("michperr")]
        [Description("Me messing around with stuff")]
        [TestProperty("Type", "Feature")]
        public void SimpleGmsSetup()
        {
            IngestionServiceClient ic = new IngestionServiceClient("WSHttpBinding_IIngestionService");
            ic.Endpoint.Address = new System.ServiceModel.EndpointAddress("http://gms.dev.xboxlive.com/Ingestion.svc");

            ConfigureGameViaXmlResponse worked = ic.ConfigureGameViaXml(
                new ConfigureGameViaXmlRequest(
                String.Format(@"<!--GMS Content Creator Generated XML - Filename: GMSSample.xml-->
                <game id=""1050"" visibility=""3"" usesLiveMultiplayerServices=""1"">
                    <localizedNames>
                        <name locale=""en-US"">(en-US) Sample Game</name>
                    </localizedNames>
                    <images />
                    <availablePlatforms>
                        <platform id=""5"">Mobile</platform>
                    </availablePlatforms>
                    <variants>
                        <variant id=""0"">
                          <statRankings />
                          <localizedNames>
                            <name locale=""en-US"">(en-US) Sample Variant Name</name>
                          </localizedNames>
                        </variant>
                    </variants>
                </game>")));
        }

        [TestMethod, Owner("michperr")]
        [Description("Create a simple YourTurnNotification")]
        [TestProperty("Type", "Feature")]
        public void P_CreateNotification_CreateAllNotificationTypes()
        {
            foreach (Notification.NotificationType t in Enum.GetValues(typeof(Notification.NotificationType)))
            {
                common.CreateAndValidateNotificationByType(t);
            }
        }

        [TestMethod, Owner("michperr")]
        [Description("Me messing around with stuff")]
        [TestProperty("Type", "Feature")]
        public void T2()
        {
            string gt = ",,,,a,b,c,s";
            for (int i = 0; i < 10; i++)
            {
                string gt1 = common.GetNextGamertag(ref gt);
            }

            Dictionary<string, string> d = new Dictionary<string, string>();
            d.Add("hi", "moo");
            //d.TryGetValue
            string s1 = d["test"];
            /*
            CreateContent _contentCreation = new CreateContent();

            List<Cosmos.Core.FieldDefinition> fl = new List<Cosmos.Core.FieldDefinition>();
            Cosmos.Core.FieldDefinition fd = new Cosmos.Core.FieldDefinition();
            f.d
            //Cosmos.Core.ContentType ct = _contentCreation.CreateNewContentType("spotlight-feed",new List<Cosmos.Core.FieldDefinition>(
           

            CosmosAuthServiceClient.AddContentItem(contentItem, false);
             */
            InvitationNotification invite = new InvitationNotification();
            invite.FriendRequest = true;
            string s = Notification.SerializeToString(invite);
            InvitationNotification i2 = Notification.DeserializeFromString<InvitationNotification>(s);
            /*
            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("Content-Type", "text/xml");
            customHeaders.Add("X-Locale", "en-US");

            string lid = AuthTickets.GetLiveIDToken(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            string sts = AuthTickets.GenerateSTSTicket(lid);
            customHeaders.Add("X-Authorization", "XBL1.0 x=" + sts);

            RestCommand command = new RestCommand();
            string requestBody = null;
            string uri = String.Format("{0}/invite/", Config.Environment.NotificationsService);

            //Serialize inviteRequest to string
            MemoryStream mStream = new MemoryStream();
            requestBody = @"<?xml version=""1.0"" encoding=""utf-8""?>
<InviteRequest xmlns=""http://schemas.datacontract.org/2004/07/AsyncMultiplayer.NotificationService"">
    <Data>abcdef</Data>
    <GameId>1297287400</GameId>
    <Recipients>bubbajay@xboxtest.com</Recipients>
    <SessionId>MySession</SessionId>
</InviteRequest>";

            // Send POST request
            Log.WriteLine("Sending POST request: " + uri);
            string response = command.Post(uri, customHeaders, requestBody);
            Log.WriteLine("Response: " + response, LogLevel.Verbose);
            */
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\GarbageCollector\SessionsGCTests.cs ===
﻿using System;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading;
using System.Runtime.Serialization;
using System.Configuration;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using CloudServices.Test.Common.Configuration;
using Multiplayer.Test.API;
using AsyncMultiplayer.SessionCommon;
using LIVEN.Common.Diagnostics;
using Leet.Core.Utils;
using Wgx.Services.Monitoring;
using CloudServices.Test.Common.Proxy;
using Leet.Core.Platforms;
using AsyncMultiplayer.Common.AzureStorage;
using AsyncMultiplayer.SessionAzureStorage;
using AsyncMultiplayer.GarbageCollectorPlugins;
using AsyncMultiplayer.TimerBasedService.Common;
using AsyncMultiplayer.NotificationService;
using System.Net;


namespace MultiPlayer.Test.GarbageCollector
{
    /// <summary>
    /// Test Cases for Sessions GarbageCollecor service
    /// </summary>
    [TestClass]
    public class SessionsGCTests : TestAreaBase
    {
        private static NotificationTestCommon common = null;

        /// <summary>
        /// Used to store the installation state for perf counters.
        /// </summary>
        private IDictionary SavedState = new Hashtable();

        /// <summary>
        /// The scheduled timers.
        /// </summary>
        private List<System.Threading.Timer> ServiceTimers;

        /// <summary>
        /// The description for the session garbage collector plugin.
        /// </summary>
        private TimerPluginDescription SessionPluginDesc;


        // Use ClassInitialize to run code before running the first test in the class
        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
        }

        // Use TestInitialize to run code before running each test 
        [TestInitialize()]
        public void MyTestInitialize()
        {
            common = new NotificationTestCommon();
            LockTest();
        }

        // Use TestCleanup to run code after each test has run
        [TestCleanup()]
        public void MyTestCleanup()
        {
            UnlockTest();
        }

        public SessionsGCTests()
        {
            //
            // TODO: Add constructor logic here
            //
            ServiceTimers = new List<Timer>();

            SessionPluginDesc = new TimerPluginDescription(
                                                                    "SessionGarbageCollector",
                                                                    "AsyncMultiplayer.GarbageCollectorPlugins.SessionGarbageCollectorPlugin, GarbageCollectorPlugins",
                                                                    1,
                                                                    86400,
                                                                    string.Empty);
        }


        #region Additional test attributes
        //
        // You can use the following additional attributes as you write your tests:
        //
     static string MachineName = ConfigurationManager.ConnectionStrings["lest_AsyncNotification_db"].ConnectionString.Split(';')[0].Substring(12);
     static  DateTime SessionCreatedTime = DateTime.UtcNow.AddDays(-8);
     static int ServiceStartSleepTime = 60000;
        //
        // Use ClassCleanup to run code after all tests in a class have run
        // [ClassCleanup()]
        // public static void MyClassCleanup() { }
        //
        
        //
       
        //
        #endregion

        /// <summary>
        /// Test for Sessions (GSS) GarbageCollecor Service
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("Test for Sessions GarbageCollector.")]
        [TestProperty("Type", "BVTs")]
        public void P_GarbageCollector_SessionCompleted()
        {
            //Stop GarbageCollector Service
            StopGCService();          

            SessionState createSessionState = InitSessionState(SessionCreatedTime.ToString(), true, 0);

            testHooksClient.CreateSession(createSessionState);

            //ViewSession
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      //  player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            
            SessionState viewSessionState = null;
            viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert viewSessionState
            AssertSessionState(createSessionState, viewSessionState);

            //Start GarbageCollector Service
            StartGCService();

            Thread.Sleep(ServiceStartSleepTime );

            //ViewSession after GarbageCollector runs
            try
            {
                viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());
                Assert.Fail("Completed Session didn't get deleted after GarbageCollector service runs.");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// Feature test for Sessions (GSS) GarbageCollecor Service
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions GarbageCollector.")]
        [TestProperty("Type", "BVTs")]
        public void P_GarbageCollector_SessionNotComplete_WarnUsers()
        {
            //Stop GarbageCollector Service
            StopGCService();

            SessionState createSessionState = InitSessionState(SessionCreatedTime.ToString(), false, 0);

            testHooksClient.CreateSession(createSessionState);

            //ViewSession
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      //  player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState viewSessionState = null;

            viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert viewSessionState
            AssertSessionState(createSessionState, viewSessionState);

            Assert.IsFalse(viewSessionState.IsInactivityWarningSent, "SessionState.IsInactivityWarningSent is true - It already sent Inacitivity Warning Notification before GC service run"); 

            //Run GarbageCollector Service
            //RunGCService();

            //Start GarbageCollector Service
            StartGCService();

            Thread.Sleep(ServiceStartSleepTime );

            //ViewSession after GarbageCollector runs
            viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            Assert.IsTrue(viewSessionState.IsInactivityWarningSent, "SessionState.IsInactivityWarningSent is false - Did not send Inacitivity Warning Notification after GC service run");

            string memberName = Config.Environment.UserSettings[0].Membername;      // player1
            string password = Config.Environment.UserSettings[0].Password;

            VerifyNotification(viewSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.Warning, true, memberName, password);
        }

        /// <summary>
        /// Feature test for Sessions (GSS) GarbageCollecor Service
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions GarbageCollector.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_GarbageCollector_SessionNotComplete_DeleteAfterWarning()
        {
            //Stop GarbageCollector Service
            StopGCService();

            SessionState createSessionState = InitSessionState(SessionCreatedTime.ToString(), false, 0);

            testHooksClient.CreateSession(createSessionState);

            //ViewSession
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      //  player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState viewSessionState = null;

            viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert viewSessionState
            AssertSessionState(createSessionState, viewSessionState);

            Assert.IsFalse(viewSessionState.IsInactivityWarningSent, "SessionState.IsInactivityWarningSent is true - It already sent Inacitivity Warning Notification before GC service run");

            //Start GarbageCollector Service
            StartGCService();

            Thread.Sleep(ServiceStartSleepTime );
            //ViewSession after GarbageCollector runs
            viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            Assert.IsTrue(viewSessionState.IsInactivityWarningSent, "SessionState.IsInactivityWarningSent is false - Did not send Inacitivity Warning Notification after GC service run");

            string memberName = Config.Environment.UserSettings[0].Membername;      // player1
            string password = Config.Environment.UserSettings[0].Password;

            VerifyNotification(viewSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.Warning, true, memberName, password);

            //Stop GarbageCollector Service
            StopGCService();

            //Start GarbageCollector Service
            StartGCService();

            Thread.Sleep(ServiceStartSleepTime );

            //ViewSession after GarbageCollector runs
            try
            {
                viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());
                Assert.Fail("Completed Session didn't get deleted after GarbageCollector service runs.");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }

            // Now we refresh the Notification list. We should not find a Warning notification for player1
            memberName = Config.Environment.UserSettings[0].Membername;      // player1
            password = Config.Environment.UserSettings[0].Password;

            List<Notification> notificationsList = null;

            for (int i = 0; i < 10; i++)
            {
                Thread.Sleep(notificationSleepTime);

                notificationsList = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Warning.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (notificationsList != null && notificationsList.Count == 0)
                {
                    break;
                }
            }

            Assert.IsNotNull(notificationsList);
            Assert.IsTrue(notificationsList.Count == 0, "ERROR: Unexpected Number of notifications.");
        }

        /// <summary>
        /// Feature test for Sessions (GSS) GarbageCollecor Service
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions GarbageCollector.")]
        [TestProperty("Type", "BVTs")]
        public void P_GarbageCollector_SessionNotComplete_ModifiedAfterWarning()
        {
            //Stop GarbageCollector Service
            StopGCService();

            SessionState createSessionState = InitSessionState(SessionCreatedTime.ToString(), false, 0);

            testHooksClient.CreateSession(createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            //ViewSession
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      //  player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState viewSessionState = null;

            viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert viewSessionState
            AssertSessionState(joinSessionState, viewSessionState);

            Assert.IsFalse(viewSessionState.IsInactivityWarningSent, "SessionState.IsInactivityWarningSent is true - It already sent Inacitivity Warning Notification before GC service run");

            //Start GarbageCollector Service
            StartGCService();

            Thread.Sleep(ServiceStartSleepTime );
            //ViewSession after GarbageCollector runs
            viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            Assert.IsTrue(viewSessionState.IsInactivityWarningSent, "SessionState.IsInactivityWarningSent is false - Did not send Inacitivity Warning Notification after GC service run");

            string memberName = Config.Environment.UserSettings[0].Membername;      // player1
            string password = Config.Environment.UserSettings[0].Password;

            VerifyNotification(viewSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.Warning, true, memberName, password);

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            FullGameState actualGameState = this.GameStateProxy.GetGameState(viewSessionState.SessionID, viewSessionState.GameID.ToString());
            //AssertGameState(modifiableGameState, actualGameState);

            //put game state
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;
            this.GameStateProxy.PutGameState(viewSessionState.SessionID, viewSessionState.GameID.ToString(), modifiableGameState);

            //Stop GarbageCollector Service
            StopGCService();

            //Start GarbageCollector Service
            StartGCService();

            Thread.Sleep(ServiceStartSleepTime );

            //ViewSession after GarbageCollector runs
            try
            {
                viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());
                Assert.Fail("Completed Session didn't get deleted after GarbageCollector service runs.");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }

            // Now we refresh the Notification list. We should not find a Warning notification for player1
            memberName = Config.Environment.UserSettings[0].Membername;      // player1
            password = Config.Environment.UserSettings[0].Password;

            List<Notification> notificationsList = null;

            for (int i = 0; i < 10; i++)
            {
                Thread.Sleep(notificationSleepTime);

                notificationsList = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (notificationsList != null && notificationsList.Count == 0)
                {
                    break;
                }
            }

            Assert.IsNotNull(notificationsList);
            Assert.IsTrue(notificationsList.Count == 0, "ERROR: Unexpected Number of notifications.");
        }


        /// <summary>
        /// Feature test for Sessions (GSS) GarbageCollecor Service
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions GarbageCollector.")]
        [TestProperty("Type", "BVTs")]
        public void P_GarbageCollector_SessionCompleted_CreatedAfterGCDueDate()
        {
            //Stop GarbageCollector Service
            StopGCService();

            string sessionCreateDate = DateTime.Now.AddDays(-5).ToShortDateString();

            SessionState createSessionState = InitSessionState(sessionCreateDate, true, 0);

            testHooksClient.CreateSession(createSessionState);

            //ViewSession
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      //  player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState viewSessionState = null;

            viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert viewSessionState
            AssertSessionState(createSessionState, viewSessionState);

            Assert.IsFalse(viewSessionState.IsInactivityWarningSent, "SessionState.IsInactivityWarningSent is true - It already sent Inacitivity Warning Notification before GC service run");

            //Start GarbageCollector Service
            StartGCService();

            Thread.Sleep(ServiceStartSleepTime );

            //ViewSession after GarbageCollector runs
            viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert viewSessionState
            AssertSessionState(createSessionState, viewSessionState);

            Assert.IsFalse(viewSessionState.IsInactivityWarningSent, "SessionState.IsInactivityWarningSent is true - It already sent Inacitivity Warning Notification before GC service run");

        }

        /// <summary>
        /// Feature test for Sessions (GSS) GarbageCollecor Service
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions GarbageCollector.")]
        [TestProperty("Type", "BVTs")]
        public void P_GarbageCollector_SessionNotCompleted_CreatedAfterGCDueDate()
        {
            //Stop GarbageCollector Service
            StopGCService();

            string sessionCreateDate = DateTime.Now.AddDays(-5).ToShortDateString();

            SessionState createSessionState = InitSessionState(sessionCreateDate, false, 0);

            testHooksClient.CreateSession(createSessionState);

            //ViewSession
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      //  player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState viewSessionState = null;

            viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert viewSessionState
            AssertSessionState(createSessionState, viewSessionState);

            Assert.IsFalse(viewSessionState.IsInactivityWarningSent, "SessionState.IsInactivityWarningSent is true - It already sent Inacitivity Warning Notification before GC service run");

            //Start GarbageCollector Service
            StartGCService();

            Thread.Sleep(ServiceStartSleepTime );

            //ViewSession after GarbageCollector runs
            viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert viewSessionState
            AssertSessionState(createSessionState, viewSessionState);

            Assert.IsFalse(viewSessionState.IsInactivityWarningSent, "SessionState.IsInactivityWarningSent is true - It already sent Inacitivity Warning Notification before GC service run");

        }

        /// <summary>
        /// Test for Sessions (GSS) GarbageCollecor Service is due in a week after session is created
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Test for Sessions GarbageCollector.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_GarbageCollector_1001SessionCompleted_CreatedBeforeGCDueDate()
        {
            //Stop GarbageCollector Service
            StopGCService();

            SessionState createSessionState = null;
            SessionState viewSessionState = null;
            List<string> sessionsList = new List<string>(101);

            for (int i = 0; i < 51; i++)
            {
                createSessionState = InitSessionState(SessionCreatedTime.ToString(), true, 0);
                testHooksClient.CreateSession(createSessionState);

                sessionsList.Add(createSessionState.SessionID);

                //ViewSession
                this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      //  player1
                this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

                viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

                //Assert viewSessionState
                AssertSessionState(createSessionState, viewSessionState);
            }

            //Start GarbageCollector Service
            StartGCService();

            Thread.Sleep(ServiceStartSleepTime );

            //ViewSession after GarbageCollector runs
            for (int i = 0; i < 51; i++)
            {
                try
                {
                    viewSessionState = this.GameSessionProxy.ViewSession(sessionsList[i].ToString(), createSessionState.GameID.ToString());
                    Assert.Fail("Completed Session didn't get deleted after GarbageCollector service runs.");
                }
                catch (RestException restEx)
                {
                    VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
                }
            }
        }

        /// <summary>
        /// Test for Sessions (GSS) GarbageCollecor Service
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Test for Sessions GarbageCollector.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_GarbageCollector_ModifySession_NotUpdate_LastModifiedDate()
        {
            //Stop GarbageCollector Service
            StopGCService();

            SessionState createSessionState = null;
            SessionState viewSessionState = null;
            SessionState joinSessionState = null;
            SessionState modifiedSessionState = null;
   
            createSessionState = InitSessionState(SessionCreatedTime.ToString(), false, 0);
            testHooksClient.CreateSession(createSessionState);

            //ViewSession
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      //  player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert viewSessionState
            AssertSessionState(createSessionState, viewSessionState);

            //Player2 JoinSession
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            DateTime preModifySessionLastModified = joinSessionState.State.LastModified;

            // Initialize ModificationData
            ModificationData modificationData = InitializeModificationData(joinSessionState);

            //Modify Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            this.GameSessionProxy.ModifySession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(), modificationData);

            //View Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      //  player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            modifiedSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert SessionState
            AssertModifySessionState(modificationData, createSessionState, modifiedSessionState);

            Assert.AreEqual<DateTime>(preModifySessionLastModified, modifiedSessionState.State.LastModified, "LastModified updated with ModifySession");

            //Start GarbageCollector Service
            StartGCService();

            Thread.Sleep(ServiceStartSleepTime );

            //Stop GarbageCollector Service
            StopGCService();

            //ViewSession after GarbageCollector runs
            viewSessionState = this.GameSessionProxy.ViewSession(viewSessionState.SessionID.ToString(), viewSessionState.GameID.ToString());

            Assert.IsTrue(viewSessionState.IsInactivityWarningSent, "SessionState.IsInactivityWarningSent is false - Did not send Inacitivity Warning Notification after GC service run");

            string memberName = Config.Environment.UserSettings[0].Membername;      // player1
            string password = Config.Environment.UserSettings[0].Password;

            VerifyNotification(viewSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.Warning, true, memberName, password);

            //Start GarbageCollector Service
            StartGCService();

            Thread.Sleep(ServiceStartSleepTime );

            //Stop GarbageCollector Service
            StopGCService();

            try
            {
                viewSessionState = this.GameSessionProxy.ViewSession(viewSessionState.SessionID .ToString(), viewSessionState.GameID.ToString());
                Assert.Fail("Completed Session didn't get deleted after GarbageCollector service runs.");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// Test for Sessions (GSS) GarbageCollecor Service
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Test for Sessions GarbageCollector.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_GarbageCollector_NoPlayerOnActiveSeat_SendWarningToOwner()
        {
            //Stop GarbageCollector Service
            StopGCService();

            SessionState createSessionState = null;
            SessionState viewSessionState = null;

            createSessionState = InitSessionState(SessionCreatedTime.ToString(), false, 5);
            testHooksClient.CreateSession(createSessionState);

            //ViewSession
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      //  player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert viewSessionState
            AssertSessionState(createSessionState, viewSessionState);

            //Start GarbageCollector Service
            StartGCService();

            Thread.Sleep(ServiceStartSleepTime );

            //Stop GarbageCollector Service
            StopGCService();

            //ViewSession after GarbageCollector runs
            viewSessionState = this.GameSessionProxy.ViewSession(viewSessionState.SessionID.ToString(), viewSessionState.GameID.ToString());

            Assert.IsTrue(viewSessionState.IsInactivityWarningSent, "SessionState.IsInactivityWarningSent is false - Did not send Inacitivity Warning Notification after GC service run");

            string memberName = Config.Environment.UserSettings[0].Membername;      // player1
            string password = Config.Environment.UserSettings[0].Password;

            VerifyNotification(viewSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.Warning, true, memberName, password);

            //Start GarbageCollector Service
            StartGCService();

            Thread.Sleep(ServiceStartSleepTime );

            //Stop GarbageCollector Service
            StopGCService();

            try
            {
                viewSessionState = this.GameSessionProxy.ViewSession(viewSessionState.SessionID.ToString(), viewSessionState.GameID.ToString());
                Assert.Fail("Completed Session didn't get deleted after GarbageCollector service runs.");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// Test for Sessions (GSS) GarbageCollecor Service
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Test for Sessions GarbageCollector.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_GarbageCollector_PlayerOnActiveSeat_SendWarningToPlayer()
        {
            //Stop GarbageCollector Service
            StopGCService();

            SessionState createSessionState = null;
            SessionState joinSessionState = null;
            SessionState viewSessionState = null;

            createSessionState = InitSessionState(SessionCreatedTime.ToString(), false, 5);
            testHooksClient.CreateSession(createSessionState);

            //Player2 JoinSession on ActiveSeat 5
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 5);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            //ViewSession
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      //  player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert viewSessionState
            AssertSessionState(joinSessionState, viewSessionState);

            //Start GarbageCollector Service
            StartGCService();

            Thread.Sleep(ServiceStartSleepTime );

            //Stop GarbageCollector Service
            StopGCService();

            //ViewSession after GarbageCollector runs
            viewSessionState = this.GameSessionProxy.ViewSession(viewSessionState.SessionID.ToString(), viewSessionState.GameID.ToString());

            Assert.IsTrue(viewSessionState.IsInactivityWarningSent, "SessionState.IsInactivityWarningSent is false - Did not send Inacitivity Warning Notification after GC service run");

            string memberName = Config.Environment.UserSettings[1].Membername;      // player2
            string password = Config.Environment.UserSettings[1].Password;

            VerifyNotification(viewSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.Warning, true, memberName, password);

            //Start GarbageCollector Service
            StartGCService();

            Thread.Sleep(ServiceStartSleepTime );

            //Stop GarbageCollector Service
            StopGCService();

            try
            {
                viewSessionState = this.GameSessionProxy.ViewSession(viewSessionState.SessionID.ToString(), viewSessionState.GameID.ToString());
                Assert.Fail("Completed Session didn't get deleted after GarbageCollector service runs.");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// Test for Sessions (GSS) GarbageCollecor Service
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Test for Sessions GarbageCollector.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_GarbageCollector_NoPlayerOnActiveSeat_NoOwnerExists()
        {
            //Stop GarbageCollector Service
            StopGCService();

            SessionState createSessionState = null;
            //SessionState afterLeaveSessionState = null;
            //SessionState viewSessionState = null;

            createSessionState = InitSessionState(SessionCreatedTime.ToString(), false, 5);
            testHooksClient.CreateSession(createSessionState);

            //Owner LeaveSession
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            //Currently this LeaveSession would fail as it can't find another player to assign as owner
            this.GameSessionProxy.LeaveSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //TODO: Add logic to verigy the test case when the above Owner LeaveSession issue will be fixed in Sessions svc

        }

        /// <summary>
        /// Test for Sessions (GSS) GarbageCollecor Service
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Test for Sessions GarbageCollector.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_GarbageCollector_PlayerLeaveSessionAfterWarning_CleanSession()
        {
            //Stop GarbageCollector Service
            StopGCService();

            SessionState createSessionState = null;
            SessionState joinSessionState = null;
            //SessionState afterLeaveSessionState = null;
            SessionState viewSessionState = null;

            createSessionState = InitSessionState(SessionCreatedTime.ToString(), false, 1);
            testHooksClient.CreateSession(createSessionState);

            //Player2 JoinSession on ActiveSeat 1
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            //ViewSession
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      //  player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert viewSessionState
            AssertSessionState(joinSessionState, viewSessionState);

            //Start GarbageCollector Service
            StartGCService();

            Thread.Sleep(ServiceStartSleepTime );

            //Stop GarbageCollector Service
            StopGCService();

            //ViewSession after GarbageCollector runs
            viewSessionState = this.GameSessionProxy.ViewSession(viewSessionState.SessionID.ToString(), viewSessionState.GameID.ToString());

            Assert.IsTrue(viewSessionState.IsInactivityWarningSent, "SessionState.IsInactivityWarningSent is false - Did not send Inacitivity Warning Notification after GC service run");

            string memberName = Config.Environment.UserSettings[1].Membername;      // player2
            string password = Config.Environment.UserSettings[1].Password;

            VerifyNotification(viewSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.Warning, true, memberName, password);

            //Player2 LeaveSession
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            this.GameSessionProxy.LeaveSession(viewSessionState.SessionID.ToString(), viewSessionState.GameID.ToString());

            //Start GarbageCollector Service
            StartGCService();

            Thread.Sleep(ServiceStartSleepTime );

            //Stop GarbageCollector Service
            StopGCService();

            /*
            // Owner (player1) should get Warning Notification when ActivePlayer LeaveSession after he/she gets Warning Notification.
            //Currently it's not implemented. Fix this test case when this functionality implemented.

            memberName = Config.Environment.UserSettings[0].Membername;      // player1
            password = Config.Environment.UserSettings[0].Password;

            VerifyNotification(viewSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.Warning, true, memberName, password);

            //Start GarbageCollector Service
            StartGCService();

            Thread.Sleep(60000);

            //Stop GarbageCollector Service
            StopGCService();
            */

            try
            {
                viewSessionState = this.GameSessionProxy.ViewSession(viewSessionState.SessionID.ToString(), viewSessionState.GameID.ToString());
                Assert.Fail("Completed Session didn't get deleted after GarbageCollector service runs.");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound , SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// Test for GarbageCollecor Service- verify all outdated sessions are garbage collected even those with no warning notification
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Test for Sessions GarbageCollector.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_GC_OutDatedSessionNotInAzureStoreCreateWarnNotification()
        {
            //Stop GarbageCollector Service
            StopGCService();

            
      
            SessionState createSessionState = null;
            SessionState viewSessionState = null;
           
                
            createSessionState = InitSessionState(SessionCreatedTime.ToString(), true, 0);
            testHooksClient.CreateSession(createSessionState);  
                
            //ViewSession by player 1
            viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(), 
                                                                 Config.Environment.UserSettings[0].Membername, 
                                                                 Config.Environment.UserSettings[0].Password);                
            //Assert viewSessionState                
            AssertSessionState(createSessionState, viewSessionState);

            //Start GarbageCollector Service
            StartGCService();

            Thread.Sleep(ServiceStartSleepTime * 3);


            //ViewSession after GarbageCollector runs          
            try
            {
                viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID, createSessionState.GameID.ToString(),
                                                                            Config.Environment.UserSettings[0].Membername,
                                                                            Config.Environment.UserSettings[0].Password);
                common.CreateNotificationsInternal(1, Notification.NotificationType.Warning, createSessionState.SessionID, createSessionState.GameID);

                //retry viewsession after warning has been created
                viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID, createSessionState.GameID.ToString(),
                                                                             Config.Environment.UserSettings[0].Membername,
                                                                             Config.Environment.UserSettings[0].Password);

                Assert.Fail("Outdated Session didn't get deleted after GarbageCollector service runs.");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
          
        }

        /// <summary>
        /// Test for GarbageCollecor Service- verify all outdated sessions are garbage collected even those with no warning notification
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Test for Sessions GarbageCollector.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_GC_OutDatedSessionNotInAzureStoreRunSysNudgeSvc()
        {
            //Stop GarbageCollector Service
            StopGCService();

            SessionState createSessionState = null;
            SessionState viewSessionState = null;


            createSessionState = InitSessionState(SessionCreatedTime.ToString(), true, 0);
            testHooksClient.CreateSession(createSessionState);

            //ViewSession by player 1
            viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(),
                                                                 Config.Environment.UserSettings[0].Membername,
                                                                 Config.Environment.UserSettings[0].Password);
            //Assert viewSessionState                
            AssertSessionState(createSessionState, viewSessionState);

            //Start GarbageCollector Service
            StartGCService();

            Thread.Sleep(ServiceStartSleepTime*3);


            //ViewSession after GarbageCollector runs          
            try
            {
                viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID, createSessionState.GameID.ToString(),
                                                                            Config.Environment.UserSettings[0].Membername,
                                                                            Config.Environment.UserSettings[0].Password);

                NotificationTestCommon.StopService(MachineName, "SystemNudgeService");
                NotificationTestCommon.StartService(MachineName, "SystemNudgeService");
                Thread.Sleep(ServiceStartSleepTime*3);

                //retry viewsession after warning has been created
                viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID, createSessionState.GameID.ToString(),
                                                                             Config.Environment.UserSettings[0].Membername,
                                                                             Config.Environment.UserSettings[0].Password);

                Assert.Fail("Outdated Session didn't get deleted after GarbageCollector service runs.");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }

        }

        private static void StopGCService()
        {
            NotificationTestCommon.StopService(MachineName, "GarbageCollectorService");
        }

        private static void StartGCService()
        {
            NotificationTestCommon.StartService(MachineName, "GarbageCollectorService");
        }
       
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\Notifications\CosmosTestHooks.cs ===
﻿namespace Multiplayer.Test.API
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using Cosmos.Core;
    using Cosmos.Core.Exceptions;
    using CosmosTest.Common;
    using System.Configuration;
    using CloudServices.Test.Common.Configuration;
    using Microsoft.VisualStudio.TestTools.UnitTesting;

    /// <summary>
    /// CosmosTestHooks
    /// Main class that deals with talking to Cosmos on the backend so we can create Spotlight entries dynamically
    /// </summary>
    public class CosmosTestHooks
    {
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Spotlight item const strings
        // These are hardcoded both on the Notifications service and on the Spotlight client, so it's safe to say they're not changing anytime soon
        // These need to be kept in sync with Source/Multiplayer/AsyncMultiplayer/NotificationService/NotificationServiceFrontEnd/SpotlightManager.cs
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        /// <summary>
        /// Spotlight item type name used by the Notifications service to query Spotlight entries in Cosmos
        /// </summary>
        private const string SpotlightItemContentTypeName = "spotlight-feed";

        /// <summary>
        /// Spotlight item title used by the Notifications service to query Spotlight entries in Cosmos
        /// </summary>
        private const string SpotlightItemTitle = "title";

        /// <summary>
        /// Spotlight item subtitle used by the Notifications service to query Spotlight entries in Cosmos
        /// </summary>
        private const string SpotlightItemSubtitle = "subtitle";

        /// <summary>
        /// Spotlight item URL used by the Notifications service to query Spotlight entries in Cosmos
        /// </summary>
        private const string SpotlightItemUrl = "link";

        /// <summary>
        /// Spotlight item GameID used by the Notifications service to query Spotlight entries in Cosmos
        /// </summary>
        private const string SpotlightItemGameID = "gameid";

        /// <summary>
        /// Cosmos path const string - "Shared Content" folder name (off root)
        /// </summary>
        private const string SharedContentFolderName = "Shared Content";

        /// <summary>
        /// Cosmos path const string - Spotlight Mobile folder name
        /// </summary>
        private const string SpotlightMobileFolderName = "Mobile";

        /// <summary>
        /// Cosmos path const string - Spotlight folder name
        /// </summary>
        private const string SpotlightFolderName = "Spotlight";

        /// <summary>
        /// Cosmos path const string - Spotlight feed folder name
        /// </summary>
        private const string SpotlightFeedFolderName = "feed";

        /// <summary>
        /// The error thrown when a required input string is null or empty
        /// </summary>
        private const string InvalidStringExceptionMessage = "The provided string is either null or empty";

        /// <summary>
        /// Cosmos ContentType object that we'll use to pass in when generating Spotlight items
        /// </summary>
        private static ContentType spotlightContentType = null;

        private static Dictionary<string, bool> isSpotlightLocalePopulated = new Dictionary<string, bool>();
        private static int CosmosCacheTimeoutInMinutes = Config.Environment.CosmosCacheTimeoutInMinutes;


        /// <summary>
        /// Prevents a default instance of the CosmosTestHooks class from being created.
        /// </summary>
        private CosmosTestHooks()
        {
        }

        /// <summary>
        /// Public CreateSpotlightItem API. Uses app.config settings to find the right Cosmos instance and inject Spotlight entries there.
        /// It takes care of all initialization so the call works, including creating Spotlight fields and content types.
        /// </summary>
        /// <param name="locale">Four character code for locale, e.g. en-US, es-ES, de-DE or fr-FR</param>
        /// <param name="title">Spotlight item title</param>
        /// <param name="subtitle">Spotlight item subtitle</param>
        /// <param name="uri">Spotlight item URI. Should be a fully-qualified and escaped URL.</param>
        /// <param name="gameID">String value for gameID. GameID range is the same as UInt32.</param>
        /// <returns>The newly created item's unique ID.</returns>
        public static Guid CreateSpotlightItem(string title, string subtitle, string uri, string gameID, string locale)
        {
            // Validate title is not null or empty
            if (String.IsNullOrEmpty(title))
            {
                throw new ArgumentException(CosmosTestHooks.InvalidStringExceptionMessage, "title");
            }

            // Validate subtitle is not null or empty
            if (String.IsNullOrEmpty(subtitle))
            {
                throw new ArgumentException(CosmosTestHooks.InvalidStringExceptionMessage, "subtitle");
            }

            // Default to en-US if locale is not specified
            if (String.IsNullOrEmpty(locale))
            {
                locale = "en-US";
            }

            CreateSpotlightContentType();

            // First make sure Spotlight folder exists for that locale
            Guid feedFolderId = CreateSpotlightFolder(locale);

            Log.WriteLine("Existing entry not found, creating a new Spotlight item");

            ContentItem newSpotlightEntry = CreateContent.CreateNewContentItem(title, feedFolderId, spotlightContentType.Id);
            CosmosAuthServiceClient.Instance.LoadContentItemFields(newSpotlightEntry);
            CosmosAuthServiceClient.Instance.PublishContentItem(newSpotlightEntry.Id);
            
            //check out and update values
            CosmosAuthServiceClient.Instance.CheckOutContentItem(newSpotlightEntry.Id);
            newSpotlightEntry.Variants["InvariantCulture"].Fields[SpotlightItemTitle].Value = title;
            newSpotlightEntry.Variants["InvariantCulture"].Fields[SpotlightItemSubtitle].Value = subtitle;
            if (!String.IsNullOrEmpty(uri))
            {
                newSpotlightEntry.Variants["InvariantCulture"].Fields[SpotlightItemUrl].Value = uri.ToString();
            }

            if (!String.IsNullOrEmpty(gameID))
            {
                newSpotlightEntry.Variants["InvariantCulture"].Fields[SpotlightItemGameID].Value = gameID;
            }
            //check in and publish
            CosmosAuthServiceClient.Instance.UpdateContentItem(newSpotlightEntry);
            CosmosAuthServiceClient.Instance.CheckInContentItem(newSpotlightEntry.Id, false); //put it is this block because we don't want to leave items checked out.
            CosmosAuthServiceClient.Instance.PublishContentItem(newSpotlightEntry.Id);
            Log.WriteLine(String.Format("New Spotlight item created with ID {0}", newSpotlightEntry.Id));
            return newSpotlightEntry.Id;
        }

        /// <summary>
        /// Validates that the Spotlight content type is created
        /// </summary>
        private static void CreateSpotlightContentType()
        {
            Log.WriteLine("Verifying Spotlight content type exists in Cosmos");

            try
            {
                spotlightContentType = CosmosAuthServiceClient.Instance.GetContentTypeByName(SpotlightItemContentTypeName);
            }
            catch (Cosmos.Core.Exceptions.ContentTypeNotFoundException)
            {
                // We ignore this exception since _spotlightContentType will remain as null and we'll go into the block below to initialize it
            }

            if (spotlightContentType == null)
            {
                Log.WriteLine("Creating Spotlight Content Type");

                // To create the Spotlight content type we need to define the fields first
                spotlightContentType = new ContentType();

                // Title
                FieldDefinition titleField = new FieldDefinition();
                titleField.DisplayName = SpotlightItemTitle;
                titleField.SystemName = SpotlightItemTitle;
                titleField.FieldType = FieldDefinitionType.String;
                titleField.Constraints = new FieldConstraints();
                titleField.Constraints.Text_IsMultiline = true;
                spotlightContentType.Fields.Add(titleField);

                // Subtitle
                FieldDefinition subtitleField = new FieldDefinition();
                subtitleField.DisplayName = SpotlightItemSubtitle;
                subtitleField.SystemName = SpotlightItemSubtitle;
                subtitleField.FieldType = FieldDefinitionType.String;
                subtitleField.Constraints = new FieldConstraints();
                spotlightContentType.Fields.Add(subtitleField);

                // Url
                FieldDefinition urlField = new FieldDefinition();
                urlField.DisplayName = SpotlightItemUrl;
                urlField.SystemName = SpotlightItemUrl;
                urlField.FieldType = FieldDefinitionType.Url;
                urlField.Constraints = new FieldConstraints();
                spotlightContentType.Fields.Add(urlField);

                // GameID
                FieldDefinition gameIdField = new FieldDefinition();
                gameIdField.DisplayName = SpotlightItemGameID;
                gameIdField.SystemName = SpotlightItemGameID;
                gameIdField.FieldType = FieldDefinitionType.String;
                gameIdField.Constraints = new FieldConstraints();
                gameIdField.Constraints.Text_IsMultiline = false;
                spotlightContentType.Fields.Add(gameIdField);

                // Now that all fields are added to the Field array, create the content type and save a reference
                spotlightContentType.Name = SpotlightItemContentTypeName;

                // This actually creates the content item once all fields are filled out
                CosmosAuthServiceClient.Instance.AddContentType(spotlightContentType);
                Log.WriteLine(String.Format("Spotlight Content Type created with ID {0}", spotlightContentType.Id));
            }
            else
            {
                Log.WriteLine(String.Format("Spotlight Content Type exists in Cosmos DB with ID {0}", spotlightContentType.Id));
            }
        }

        /// <summary>
        /// Creates a Spotlight content folder in the specified locale
        /// Locale is any valid four-letter combination that Xbox LIVE supports e.g. en-US, en-GB, de-DE, fr-FR
        /// This ends up in the $/Shared Content/Mobile/Spotlight/{locale}/feed folder in Cosmos
        /// Returns a GUID representing the folder ID of the spotlight feed folder for the specified locale in Cosmos
        /// </summary>
        /// <param name="locale">Four character code for locale, e.g. en-US, es-ES, de-DE or fr-FR</param>
        /// <returns>The newly created folder's unique ID.</returns>
        private static Guid CreateSpotlightFolder(string locale)
        {
            // Cosmos content folders need to be created separately, 
            // linking each subfolder to its parent, so we need to go level by level

            // Check if the /Shared Content/Mobile folder exists. If not, create it
            string folderPath = String.Format("/{0}", SharedContentFolderName);
            CreateCosmosFolder(folderPath, SpotlightMobileFolderName);

            // Check if the /Shared Content/Mobile/Spotlight folder exists. If not, create it
            folderPath = String.Format("/{0}/{1}", SharedContentFolderName, SpotlightMobileFolderName);
            CreateCosmosFolder(folderPath, SpotlightFolderName);

            // Check if the /Shared Content/Mobile/Spotlight/<locale> folder exists. If not, create it
            folderPath = String.Format("/{0}/{1}/{2}", SharedContentFolderName, SpotlightMobileFolderName, SpotlightFolderName);
            CreateCosmosFolder(folderPath, locale);

            // Check if the /Shared Content/Mobile/Spotlight/<locale>/feed folder exists. If not, create it
            folderPath = String.Format("/{0}/{1}/{2}/{3}", SharedContentFolderName, SpotlightMobileFolderName, SpotlightFolderName, locale);
            Guid spotlightFeedFolderID = CreateCosmosFolder(folderPath, SpotlightFeedFolderName);

            ICollection<ContentItem> items = CosmosAuthServiceClient.Instance.GetChildContentItems(spotlightFeedFolderID);

            return spotlightFeedFolderID;
        }

        /// <summary>
        /// Creates a Cosmos folder based on a specified path. 
        /// If the folder path already exists, this method just returns the ID for that folder.
        /// The parentDirectoryID parameter is only used when creating a new folder, to specify which folder is the parent
        /// </summary>
        /// <param name="path">Cosmos path to create subfolder under.</param>
        /// <param name="folderName">Folder name to create.</param>
        /// <returns>The newly created folder's unique ID.</returns>
        private static Guid CreateCosmosFolder(string path, string folderName)
        {
            Guid folderID = Guid.Empty;

            // Get the parent directory ID so we can link the subfolder to it
            CosmosDirectory parentDirectory = null;
            try
            {
                //Log.WriteLine("Getting parent folder " + path);
                parentDirectory = CosmosAuthServiceClient.Instance.GetDirectoryByPath(path);
            }
            catch (DirectoryNotFoundException e)
            {
                throw new ArgumentException("Cannot recursively create subfolders with this method. Make sure parent folder exists in Cosmos", path, e);
            }

            // Get the sub-path directory if it already exists
            string fullPath = String.Format("{0}/{1}", path, folderName);
            //Log.WriteLine("Getting subpath folder " + fullPath);

            CosmosDirectory cosmosDirectory = null;
            try
            {
                cosmosDirectory = CosmosAuthServiceClient.Instance.GetDirectoryByPath(fullPath);

                // Cosmos directory already exists, print out ID
                //Log.WriteLine(String.Format("Existing Cosmos folder found: {0}", fullPath));
                folderID = cosmosDirectory.Id;
            }
            catch (DirectoryNotFoundException)
            {
                // If the Cosmos folder is not found, create it
                //Log.WriteLine(String.Format("Creating Cosmos folder: {0}", fullPath));

                CosmosDirectory directory = new CosmosDirectory();
                folderID = directory.Id;
                directory.Name = folderName;
                directory.ParentId = parentDirectory.Id;
                CosmosAuthServiceClient.Instance.AddCosmosDirectory(directory);
            }

            return folderID;
        }
        public static string GetPath(string locale)
        {
            return String.Format("/{0}/{1}/{2}/{3}", SharedContentFolderName, SpotlightMobileFolderName, SpotlightFolderName, locale);
        }
        
        // Populate Cosmos with five canned Spotlight entries for testing on the specified locale
        // By default this waits for the Cosmos cache to expire on the Notifications service
        public static void PopulateFiveSpotlightEntries(string locale)
        {
            PopulateFiveSpotlightEntries(locale, true);
        }

        // Populate Cosmos with five canned Spotlight entries for testing on the specified locale
        // This takes as an input a param specifying whether or not to wait for the Cosmos cache to expire on the Notifications service
        public static void PopulateFiveSpotlightEntries(string locale, bool waitForCacheToExpire)
        {
            if (!isSpotlightLocalePopulated.ContainsKey(locale))
            {
                string spotlightItemTestPrefix = "Test Item";

                // First delete whatever is there as it breaks the test.
                DestroyDirectory(locale);

                CosmosTestHooks.CreateSpotlightItem(
                    String.Format("{0} 1 {1}", spotlightItemTestPrefix, locale),
                    SpotlightItemType.WebLink.ToString(),
                    "http://m.bing.com",
                    "",
                    locale);

                CosmosTestHooks.CreateSpotlightItem(
                    String.Format("{0} 2 {1}", spotlightItemTestPrefix, locale),
                    SpotlightItemType.WebLink.ToString(),
                    "http://m.facebook.com",
                    "",
                    locale);

                CosmosTestHooks.CreateSpotlightItem(
                    String.Format("{0} 3 {1}", spotlightItemTestPrefix, locale),
                    SpotlightItemType.WebLink.ToString(),
                    "http://m.digg.com",
                    "",
                    locale);

                CosmosTestHooks.CreateSpotlightItem(
                    String.Format("{0} 4 {1}", spotlightItemTestPrefix, locale),
                    SpotlightItemType.GameID.ToString(),
                    null,
                    Constants.TESTGAMEID.ToString(),
                    locale);

                CosmosTestHooks.CreateSpotlightItem(
                    String.Format("{0} 5 {1}", spotlightItemTestPrefix, locale),
                    SpotlightItemType.GameID.ToString(),
                    null,
                    Constants.TESTGAMEID.ToString(),
                    locale);

                isSpotlightLocalePopulated.Add(locale, true);

                if (waitForCacheToExpire)
                {
                    WaitForCosmosCacheToExpire();
                }
            }
        }

        public static void WaitForCosmosCacheToExpire()
        {
            // Sleep until the Cosmos cache is refreshed by the Notifications service (timeout + a few seconds)
            int ExtraTimeoutInSeconds = 10;

            Log.WriteLine(String.Format("Sleeping for {0} minutes and {1} seconds to allow the Notifications-Cosmos cache to time out...",
                CosmosCacheTimeoutInMinutes,
                ExtraTimeoutInSeconds));

            System.Threading.Thread.Sleep(CosmosCacheTimeoutInMinutes * 60 * 1000 + ExtraTimeoutInSeconds * 1000);

            Log.WriteLine("Done");
        }

        public static void DestroyDirectory(string locale)
        {
            //Double check that this is being run on a test only environment.
            ValidateEnvironment();

            string folderPath = CosmosTestHooks.GetPath(locale);
            try
            {
                CosmosAuthServiceClient.Instance.DestroyDirectory(folderPath);
            }
            catch (DirectoryNotFoundException)
            {
            }
            catch (Exception e)
            {
                Log.WriteLine("Got an exception " + e.Message + " Trying again in case it is a time out issue."); // added because first test on testnet was failing with InvalidOperationException  caused by time outs
                try
                {
                    CosmosAuthServiceClient.Instance.DestroyDirectory(folderPath);
                }
                catch (DirectoryNotFoundException)
                {
                }
            }
        }

        private static void ValidateEnvironment()
        {
            //Double check that test is being run on a test only environment.
            Assert.IsFalse(string.Compare(Config.Environment.Name, "int2", true) == 0, "This test should not be run on int2");
            Assert.IsFalse(string.Compare(Config.Environment.Name, "partnernet", true) == 0, "this test should not be run on partnet net");
            string envNameForAuthoring = ConfigurationManager.AppSettings["leet_CosmosTest_AuthBaseUrl"].Substring("authoring.".Length, (ConfigurationManager.AppSettings["leet_CosmosTest_AuthBaseUrl"].Length - "authoring..xbox.com".Length));
            Log.WriteLine(string.Format("Environment provided in app config for authoring = {0}", envNameForAuthoring));
            Assert.IsFalse(string.Compare(envNameForAuthoring, "int2", true) == 0, "This test should not point to int2. Make sure that the cosmos config settings in the app config are pointing to the environment selected.");
            Assert.IsFalse(string.Compare(envNameForAuthoring, "part", true) == 0, "This test should not point to PartnerNet. Make sure that the cosmos config settings in the app config are pointing to the environment selected.");
            string envNameForPublishing = ConfigurationManager.AppSettings["leet_CosmosTest_PublishingBaseUrl"].Substring("publishing.".Length, (ConfigurationManager.AppSettings["leet_CosmosTest_PublishingBaseUrl"].Length - "publishing..xbox.com".Length));
            Log.WriteLine(string.Format("Environment provided in app config for publishing = {0}", envNameForPublishing));
            Assert.IsFalse(string.Compare(envNameForPublishing, "int2", true) == 0, "This test should not point to int2. Make sure that the cosmos config settings in the app config are pointing to the environment selected.");
            Assert.IsFalse(string.Compare(envNameForPublishing, "part", true) == 0, "This test should not point to PartnerNet. Make sure that the cosmos config settings in the app config are pointing to the environment selected.");
        }
    }

    public enum SpotlightItemType
    {
        WebLink,
        GameID,
        Both

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\Notifications\NotificationQueue.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Configuration;
using AsyncMultiplayer.NotificationService;
using CloudServices.Test.Common.Configuration;

namespace Multiplayer.Test.API
{

    /// <summary>
    /// This class is used as an interface between the QueueAccess class and the test cases in NotificationTests class.
    /// </summary>
 
    public class NotificationQueue
    {
        static string connectionString = Config.Environment.ConnectionString;
 
        static QueueAccess  queueAccess = new QueueAccess();
        static QueueAccess eventQueueAccess = new QueueAccess();
        
        public NotificationQueue()
        {
            queueAccess.ConnectionString = connectionString;
            queueAccess.StoreProcNameForStartDialog = "NotificationSchema.SendNotificationRequest";
            queueAccess.StoreProcNameForReceive = "NotificationSchema.ReceiveNotificationRequest";
            queueAccess.StoreProcNameForEndConversation = "NotificationSchema.EndConversation";
            queueAccess.Init();
            eventQueueAccess.ConnectionString = connectionString;
            eventQueueAccess.StoreProcNameForReceive = "NotificationSchema.ReceiveRequestEvent";
            eventQueueAccess.Init();
        }


        //clean up
        public void Cleanup()
        {
            queueAccess.Close();
            eventQueueAccess.Close(); 
        }
        
        public void SendMessage(string msg)
        {
            queueAccess.BeginTransaction();
            queueAccess.StartDialog(msg);
            queueAccess.CommitTransaction();

        }
         public void SendFiveMessages(string[] msg)
        {
         queueAccess.BeginTransaction();
         for (int i = 0; i < 5; i++)
             queueAccess.StartDialog(msg[i]);
         queueAccess.CommitTransaction();
        }

        public void EmptyQueue()
        {
            while (queueAccess.ReceiveOneMessage())
            {
                queueAccess.BeginTransaction();
                Console.WriteLine("Message  = "+ queueAccess.ReceivedMessage + " is recieved!");
                queueAccess.EndConversation(queueAccess.ReceivedMessageHandle);
                queueAccess.CommitTransaction();

            }
            queueAccess.RollbackTransaction();
        }

        public void EmptyActivationQueue()
        {
            while (eventQueueAccess.ReceiveOneMessage())
            {
                eventQueueAccess.BeginTransaction();
                Console.WriteLine(" Activation Message  = " + eventQueueAccess.ReceivedMessage + " is recieved!");
                eventQueueAccess.CommitTransaction();
            }
            eventQueueAccess.RollbackTransaction();
        }

        public string RecieveMessage()
        {
            string msg = null;
            if (queueAccess.ReceiveOneMessage())
            {
                queueAccess.BeginTransaction();
                msg = queueAccess.ReceivedMessage;
                queueAccess.EndConversation(queueAccess.ReceivedMessageHandle);
                queueAccess.CommitTransaction();
            }
            else
            {
                queueAccess.RollbackTransaction();
            }
            return msg;
        }

        public bool IsAnyMessageInQueue()
        {
            bool isRecieved = false;
            if (queueAccess.ReceiveOneMessage())
            {
                queueAccess.BeginTransaction();
                Console.WriteLine("Message  = " + queueAccess.ReceivedMessage + " is recieved!");
                queueAccess.EndConversation(queueAccess.ReceivedMessageHandle);
                queueAccess.CommitTransaction();
                isRecieved = true;
            }
            else
                queueAccess.RollbackTransaction();
            return isRecieved;
        }

        public bool IsAnyMessageInActivationQueue()
        {
            bool isRecieved = false;
            if (eventQueueAccess.ReceiveOneMessage())
            {
                eventQueueAccess.BeginTransaction();
                Console.WriteLine(" Activation Message  = " + eventQueueAccess.ReceivedMessage + " is recieved!");
                eventQueueAccess.CommitTransaction();
                isRecieved = true;
            }
            else
                eventQueueAccess.RollbackTransaction();
            return isRecieved;
        }
        
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\Notifications\NotificationQueueTests.cs ===
﻿using System;
using System.Net;
using System.Xml;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Collections.Generic;
using AsyncMultiplayer.NotificationService;
using System.Configuration;
using AsyncMultiplayer.NotificationService.FrontEnd;
using System.Runtime.Serialization;
using System.IO;
using System.Text;
using System.Web;
using System.Xml.Linq;
using System.Text.RegularExpressions;
using CloudServices.Test.Common.Configuration;
using MultiPlayer.Test.GmsIngestionService;

namespace Multiplayer.Test.API
{
    [TestClass()]
    public class NotificationQueueTests
    {
        //[TestMethod, Owner("lewbamp")]
        [Description("This test case recieves all messages currently on queue and verify that there are no more messages on queue")]
        [TestProperty("Type", "Feature")]
        public void P_EmptyQueue()
        {
            NotificationQueue tempQueueClient = new NotificationQueue();
            tempQueueClient.EmptyQueue();
            Assert.IsFalse(tempQueueClient.IsAnyMessageInQueue());
            tempQueueClient.Cleanup();
        }

        //[TestMethod, Owner("lewbamp")]
        [Description("This test case tests recieves all messages on activation queue and verifies that there are no more messages on queue")]
        [TestProperty("Type", "Feature")]
        public void P_EmptyActivationQueue()
        {
            NotificationQueue tempQueueClient = new NotificationQueue();
            tempQueueClient.EmptyActivationQueue();
            Assert.IsFalse(tempQueueClient.IsAnyMessageInActivationQueue());
            tempQueueClient.Cleanup();
        }

        //[TestMethod, Owner("lewbamp")]
        [Description("This test case verifies sending and recieving the same message")]
        [TestProperty("Type", "Feature")]
        public void P_SendOneMessage()
        {
            string message = "testing send one message";
            //make sure there are no more messages to be recieved on queue before sending new message and there are no messages on the activation queue
            NotificationQueue tempQueueClient = new NotificationQueue();
            tempQueueClient.EmptyQueue();
            tempQueueClient.EmptyActivationQueue();

            //send the new message
            tempQueueClient.SendMessage(message);

            //make sure the message is actually on queue and that is the only on on queue
            Assert.AreEqual(message, tempQueueClient.RecieveMessage(), "the message sent is different from message in the first line of queue");
            Assert.IsFalse(tempQueueClient.IsAnyMessageInQueue());
            tempQueueClient.Cleanup();
        }

       // [TestMethod, Owner("lewbamp")]
        [Description("This test case tests sending a request to queue and verifies that the message is on queue and activation is on activation Queue")]
        [TestProperty("Type", "Feature")]
        public void P_SendOneMessageAndCheckForActivationQueue()
        {
            string message = "Test Message";
            //make sure there are no more messages to be recieved on queue before sending new message and there are no messages on the activation queue
            NotificationQueue tempQueueClient = new NotificationQueue();
            tempQueueClient.EmptyQueue();
            tempQueueClient.EmptyActivationQueue();

            //send the new message
            tempQueueClient.SendMessage(message);

            //make sure the message is actually on queue and that is the only on on queue
            Assert.AreEqual(message, tempQueueClient.RecieveMessage(), "the message sent is different from message in the first line of queue");
            Assert.IsFalse(tempQueueClient.IsAnyMessageInQueue());

            //Verify that only one activation is sent and can be recieved 
            Assert.IsTrue(tempQueueClient.IsAnyMessageInActivationQueue());
            Assert.IsFalse(tempQueueClient.IsAnyMessageInActivationQueue());
            tempQueueClient.Cleanup();
        }

        //[TestMethod, Owner("lewbamp")]
        [Description("here we send five messages and verify that we recieve them in the order they are sent")]
        [TestProperty("Type", "Feature")]
        public void P_SendAndRecieveFiveMessages()
        {
            string[] messages = { "Message 1", "Message 2", "Message 3", "Message 4", "Message 5" };
            NotificationQueue tempQueueClient = new NotificationQueue();
            tempQueueClient.EmptyQueue();
            tempQueueClient.EmptyActivationQueue();

            //send five new messages
            tempQueueClient.SendFiveMessages(messages);

            //verify that messages are recieved in the order they were sent
            for (int i = 0; i < 5; i++)
            {
                Assert.AreEqual(messages[i], tempQueueClient.RecieveMessage(), "Message sent is different from message recieved!");
            }

            //verify that there are no messages on queue
            Assert.IsFalse(tempQueueClient.IsAnyMessageInQueue());
            tempQueueClient.Cleanup();
        }

       // [TestMethod, Owner("lewbamp")]
        [Description("tests sending a request to queue and verifies that the message is on queue")]
        [TestProperty("Type", "Feature")]
        public void P_SendEmptyMessage()
        {
            string message = "";
            NotificationQueue tempQueueClient = new NotificationQueue();
            tempQueueClient.EmptyQueue();
            tempQueueClient.EmptyActivationQueue();
            tempQueueClient.SendMessage(message);
            Assert.AreEqual(message, tempQueueClient.RecieveMessage(), "Message in the queue is not empty");
            Assert.IsFalse(tempQueueClient.IsAnyMessageInQueue());
            tempQueueClient.Cleanup();
        }

        //[TestMethod, Owner("lewbamp")]
        [Description("tests sending a request to queue and verifies that the message is on queue")]
        [TestProperty("Type", "Feature")]
        public void P_SendVeryLongMessage()
        {
            string message = "This is a very long message! This is a very long message! This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message! This is a very long message! This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message! This is a very long message! This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message! This is a very long message! This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message! This is a very long message! This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message! This is a very long message! This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message! This is a very long message! This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!This is a very long message!";
            NotificationQueue tempQueueClient = new NotificationQueue();
            tempQueueClient.EmptyQueue();
            tempQueueClient.EmptyActivationQueue();
            tempQueueClient.SendMessage(message);
            Assert.AreEqual(message, tempQueueClient.RecieveMessage(), "the message sent is different from message in the first line of queue");
            Assert.IsFalse(tempQueueClient.IsAnyMessageInQueue());
            tempQueueClient.Cleanup();
        }

        //[TestMethod, Owner("lewbamp")]
        [Description("tests sending a request to queue and verifies that the message is on queue")]
        [TestProperty("Type", "Feature")]
        public void P_SendRestrictedMessage()
        {
            string message = "#gh&<>:}:!;'k{i*%$[#@(b]h)u";
            NotificationQueue tempQueueClient = new NotificationQueue();
            tempQueueClient.EmptyQueue();
            tempQueueClient.EmptyActivationQueue();
            tempQueueClient.SendMessage(message);
            Assert.AreEqual(message, tempQueueClient.RecieveMessage(), "message in the queue is not empty");
            Assert.IsFalse(tempQueueClient.IsAnyMessageInQueue());
            tempQueueClient.Cleanup();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\Notifications\NotificationServiceTestWorker.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using AsyncMultiplayer.NotificationService.Internal;
using System.Threading;

namespace MultiPlayer.Test.Notifications
{
    /// <summary>
    /// makes the protected method public via wrapper.
    /// </summary>
    class NotificationServiceTestWorker : NotificationServiceWorker
    {
        public NotificationServiceTestWorker(ManualResetEvent doneEvent,EventWaitHandle hasWorkEvent,EventWaitHandle stopEvent,int index)
            : base(doneEvent, hasWorkEvent, stopEvent, index) { }

        public void ProcessQueue()
        {
            this.queueToProcess.Init();
            DoWorkInternal();
            this.queueToProcess.Close();
        }

    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\Notifications\NotificationServiceInternalTests.cs ===
﻿using System;
using System.Text;
using System.Threading;
using System.Collections.Generic;
using AsyncMultiplayer.NotificationService.Internal;
using Leet.Identity;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Multiplayer.Test.API;
using AsyncMultiplayer.NotificationService;
using CloudServices.Test.Common.Configuration;
using System.Linq;
using Leet.Core.IoCCo;
using SMTPTest;
using System.Net.Mail;
using MultiPlayer.Test.Data;
using System.Web;
using System.Configuration;
using Multiplayer.Test.Proxy;

namespace MultiPlayer.Test.Notifications
{
    [TestClass()]
    public class NotificationServiceInternalTests
    {
        Random _randGen = new Random();
        private string GenerateRandomString(int min, int max)
        {
            StringBuilder sb = new StringBuilder();

            for (int x = min; x < max; x++)
            {
                sb.Append((char)_randGen.Next((int)' ', ((int)'z' + 1) + 1));
            }
            return sb.ToString();
        }

        private string GenerateRandomString(int max)
        {
            return GenerateRandomString(0, max);

        }
        private UserInfo GetDefaultUserInfo()
        {
            return new UserInfo(0)
            {
                DisplayName = "Test dispName",
                GamerTag = "Test gamertag",
                EmailAddress = "ztest01@microsoft.com",
                Locale = string.Empty
            };
        }

        [ClassInitialize]
        public static void MyClassInitialize(TestContext testContext)
        {
            IdentityManager.RegisterWithIocContainer(Leet.Core.IoCCo.Container.Instance);
            NotificationService.ConfigInstance = new ServiceConfigs();
            NotificationService.ConfigInstance.Initialize();
            Log.LogToFile = false;
        }

        [ClassCleanup]
        public static void ClassCleanup()
        {


        }


        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Fire some garbage into the queue and make sure that we don't die deserial")]
        [TestProperty("Type", "Feature")]
        public void SendGarbageTest()
        {
            QueueAccess queueAccess = new QueueAccess(Config.Environment.ConnectionString);
            queueAccess.StoreProcNameForStartDialog = "NotificationSchema.SendNotificationRequest";
            queueAccess.BeginTransaction();
            queueAccess.StartDialog(GenerateRandomString(200));
            queueAccess.CommitTransaction();
            queueAccess.Close();

            NotificationsServiceProxy notificationClient = new NotificationsServiceProxy();

            ManualResetEvent doneEvent = new ManualResetEvent(false);
            EventWaitHandle hasWork = new EventWaitHandle(false, EventResetMode.ManualReset);
            EventWaitHandle stop = new EventWaitHandle(true, EventResetMode.ManualReset);
            NotificationServiceTestWorker w = new NotificationServiceTestWorker(
                doneEvent,
                hasWork,
                stop,
                0);

            // make sure that the thread doesn't bail on the garbage.  
            // Because of the how the conditional compilation is done, control should return here
            // and not loop on the garbage item forever
            w.ProcessQueue();
        }


        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Me messing around with stuff")]
        [TestProperty("Type", "Feature")]
        public void BasicProcessTest()
        {
            IdentityManager.RegisterWithIocContainer(Leet.Core.IoCCo.Container.Instance);
            NotificationService.ConfigInstance = new ServiceConfigs();
            NotificationService.ConfigInstance.Initialize();

            Assert.IsTrue(string.Equals(Config.Environment.Name, "Dev", StringComparison.OrdinalIgnoreCase), "Test must run only on DEV environment");

            NotificationsServiceProxy notificationClient = new NotificationsServiceProxy();
            ManualResetEvent doneEvent = new ManualResetEvent(false);
            EventWaitHandle hasWork = new EventWaitHandle(false, EventResetMode.ManualReset);
            EventWaitHandle stop = new EventWaitHandle(true, EventResetMode.ManualReset);
            NotificationServiceTestWorker w = new NotificationServiceTestWorker(
                doneEvent,
                hasWork,
                stop,
                0);
            Guid sessionGuid = new Guid();

            SendInvite(
                "Yargh Matey",
                "opssek-test+from@live-int.com",
                "en-US",
                "opssek-test@live-int.com", 1297287401, sessionGuid.ToString(), string.Empty, string.Empty);

            w.ProcessQueue();

            List<Notification> nList = notificationClient.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                sessionGuid.ToString(),
                0,
                string.Empty,
                Int32.MaxValue,
                string.Empty,
                false);

            Assert.AreEqual<int>(1, nList.Count, "Expected 1 notification");

            notificationClient.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), sessionGuid.ToString());

        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Very basic verification of gamertag->xuid parsing/lookup in invitation preprocessing")]
        [TestProperty("Type", "Feature")]
        public void CreatePreProcessor_Invitation_GamertagParsing()
        {
            NotificationsServiceProxy notificationClient = new NotificationsServiceProxy();

            UserInfo sysSenderInfo = GetDefaultUserInfo();
            InvitationNotification invite = GetDefaultInvite(sysSenderInfo, CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password), Constants.TESTGAMEID, Guid.NewGuid().ToString(), string.Empty, false);
            NotificationRequest request = GetNotificationRequest(invite, sysSenderInfo, Constants.TESTGAMEID, invite.SessionId);

            request.To = string.Join(";", ConfigUsersToArray().Select(x => CreatePreProcessor.GamertagPrefix + x.Gamertag).ToArray());


            CreatePreProcessor cpp = new CreatePreProcessor();
            cpp.Initialize();
            cpp.ProcessNotificationRequest(request);

            Assert.AreEqual<int>(Config.Environment.UserSettings.Count, request.RecipientsInfo.Count);
            for (int i = 0; i < request.RecipientsInfo.Count; i++)
            {
                Assert.AreEqual<ulong>(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[i].Membername, Config.Environment.UserSettings[i].Password)), request.RecipientsInfo[i].Xuid);
                Assert.AreEqual<string>(Config.Environment.UserSettings[i].Gamertag, request.RecipientsInfo[i].GamerTag);

                //these are currently here due to limitations of the livecache layer
                Assert.AreEqual<string>(null, request.RecipientsInfo[i].EmailAddress);
                Assert.AreEqual<long>(0, request.RecipientsInfo[i].Puid);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Very basic verification of email->xuid parsing/lookup in invitation preprocessing")]
        [TestProperty("Type", "Feature")]
        public void CreatePreProcessor_Invitation_EmailParsing()
        {
            NotificationsServiceProxy notificationClient = new NotificationsServiceProxy();

            UserInfo sysSenderInfo = GetDefaultUserInfo();
            InvitationNotification invite = GetDefaultInvite(sysSenderInfo, CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password), Constants.TESTGAMEID, Guid.NewGuid().ToString(), string.Empty, false);
            NotificationRequest request = GetNotificationRequest(invite, sysSenderInfo, Constants.TESTGAMEID, invite.SessionId);

            bool first = true;
            foreach (PreExistingUserElement p in Config.Environment.UserSettings)
            {
                if (!first) { request.To += ";"; }
                first = false;
                request.To += "email:" + p.Membername;
            }

            CreatePreProcessor cpp = new CreatePreProcessor();
            cpp.Initialize();
            cpp.ProcessNotificationRequest(request);

            Assert.AreEqual<int>(Config.Environment.UserSettings.Count, request.RecipientsInfo.Count);
            for (int i = 0; i < request.RecipientsInfo.Count; i++)
            {
                Assert.AreEqual<ulong>(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[i].Membername, Config.Environment.UserSettings[i].Password)), request.RecipientsInfo[i].Xuid);
                Assert.AreEqual<string>(Config.Environment.UserSettings[i].Gamertag, request.RecipientsInfo[i].GamerTag);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verifies that the system can deal with gamertags that are valid, but not in the system")]
        [TestProperty("Type", "Feature")]
        public void CreatePreProcessor_Invitation_Gamertag_GamertagsDontExist()
        {
            NotificationsServiceProxy notificationClient = new NotificationsServiceProxy();

            UserInfo sysSenderInfo = GetDefaultUserInfo();
            InvitationNotification invite = GetDefaultInvite(sysSenderInfo, CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password), Constants.TESTGAMEID, Guid.NewGuid().ToString(), string.Empty, false);
            NotificationRequest request = GetNotificationRequest(invite, sysSenderInfo, Constants.TESTGAMEID, invite.SessionId);

            //todo(michperr): Bulletproof this to do some verifiction that these gamertags don't actually exist
            request.To = CreatePreProcessor.GamertagPrefix + "IdontExist1";
            request.To += ";" + CreatePreProcessor.GamertagPrefix + "IdontExist2";
            request.To += ";" + CreatePreProcessor.GamertagPrefix + "IdontExist3";
            request.To += ";" + CreatePreProcessor.GamertagPrefix + "IdontExist4";
            request.To += ";" + CreatePreProcessor.GamertagPrefix + "IdontExist5";


            CreatePreProcessor cpp = new CreatePreProcessor();
            cpp.Initialize();
            cpp.ProcessNotificationRequest(request);

            Assert.AreEqual<int>(0, request.RecipientsInfo.Count);
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verifies that the system can deal with email addresses that are valid, but aren't associated with any xuids")]
        [TestProperty("Type", "Feature")]
        public void CreatePreProcessor_Invitation_Email_NoGamertagsForEmail()
        {
            NotificationsServiceProxy notificationClient = new NotificationsServiceProxy();

            UserInfo sysSenderInfo = GetDefaultUserInfo();
            InvitationNotification invite = GetDefaultInvite(sysSenderInfo, CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password), Constants.TESTGAMEID, Guid.NewGuid().ToString(), string.Empty, false);
            NotificationRequest request = GetNotificationRequest(invite, sysSenderInfo, Constants.TESTGAMEID, invite.SessionId);

            //todo(michperr): Bulletproof this to do some verifiction that these gamertags don't actually exist
            string[] uList = new string[5] { "IdontExist1@fakedomain.com", "IdontExist2@fakedomain.com", "IdontExist3@fakedomain.com", "IdontExist4@fakedomain.com", "IdontExist5@fakedomain.com" };
            request.To = string.Join(";", uList.Select(x => CreatePreProcessor.EmailPrefix + x).ToArray());

            CreatePreProcessor cpp = new CreatePreProcessor();
            cpp.Initialize();
            cpp.ProcessNotificationRequest(request);

            Assert.AreEqual<int>(5, request.RecipientsInfo.Count);
            int i = 0;
            foreach (UserInfo ui in request.RecipientsInfo)
            {
                Assert.AreEqual<long>(0, ui.Puid);
                Assert.AreEqual<ulong>(0, ui.Xuid);
                Assert.AreEqual<string>(null, ui.GamerTag);
                Assert.AreEqual<string>(uList[i++], ui.EmailAddress);
            }

        }

        //private void FlattenList(string delimiter

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Very basic verification of email->xuid parsing/lookup (with no prefix specified) in invitation preprocessing")]
        [TestProperty("Type", "Feature")]
        public void CreatePreProcessor_Invitation_NoPrefixEmailParsing()
        {
            NotificationsServiceProxy notificationClient = new NotificationsServiceProxy();

            UserInfo sysSenderInfo = GetDefaultUserInfo();
            InvitationNotification invite = GetDefaultInvite(sysSenderInfo, CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password), Constants.TESTGAMEID, Guid.NewGuid().ToString(), string.Empty, false);
            NotificationRequest request = GetNotificationRequest(invite, sysSenderInfo, Constants.TESTGAMEID, invite.SessionId);

            request.To = string.Join(";", ConfigUsersToArray().Select(x => x.Gamertag).ToArray());

            CreatePreProcessor cpp = new CreatePreProcessor();
            cpp.Initialize();
            cpp.ProcessNotificationRequest(request);

            Assert.AreEqual<int>(Config.Environment.UserSettings.Count, request.RecipientsInfo.Count);
            for (int i = 0; i < request.RecipientsInfo.Count; i++)
            {
                Assert.AreEqual<ulong>(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[i].Membername, Config.Environment.UserSettings[i].Password)), request.RecipientsInfo[i].Xuid);
                Assert.AreEqual<string>(Config.Environment.UserSettings[i].Gamertag, request.RecipientsInfo[i].GamerTag);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Very basic verification of email->xuid parsing/lookup (with no prefix specified) in invitation preprocessing")]
        [TestProperty("Type", "Feature")]
        public void CreatePreProcessor_Invitation_MixedParsing()
        {
            NotificationsServiceProxy notificationClient = new NotificationsServiceProxy();

            UserInfo sysSenderInfo = GetDefaultUserInfo();
            InvitationNotification invite = GetDefaultInvite(sysSenderInfo, CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password), Constants.TESTGAMEID, Guid.NewGuid().ToString(), string.Empty, false);
            NotificationRequest request = GetNotificationRequest(invite, sysSenderInfo, Constants.TESTGAMEID, invite.SessionId);


            request.To = string.Join(";", ConfigUsersToArray().Select(x =>
            {
                switch (_randGen.Next(3))
                {
                    case 0:
                        return CreatePreProcessor.GamertagPrefix + x.Gamertag;
                    case 1:
                        return CreatePreProcessor.EmailPrefix + x.Gamertag;
                    case 2:
                    default:
                        return x.Gamertag;
                }
            }).ToArray());

            CreatePreProcessor cpp = new CreatePreProcessor();
            cpp.Initialize();
            cpp.ProcessNotificationRequest(request);

            Assert.AreEqual<int>(Config.Environment.UserSettings.Count, request.RecipientsInfo.Count);
            for (int i = 0; i < request.RecipientsInfo.Count; i++)
            {
                Assert.AreEqual<ulong>(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[i].Membername, Config.Environment.UserSettings[i].Password)), request.RecipientsInfo[i].Xuid);
                Assert.AreEqual<string>(Config.Environment.UserSettings[i].Gamertag, request.RecipientsInfo[i].GamerTag);
            }
        }


        /// <summary>
        /// this should cover system nudge, and all the other notifications generated by our service.
        /// </summary>
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Me messing around with stuff")]
        [TestProperty("Type", "Feature")]
        public void CreatePreProcessor_Other()
        {
            Guid sessionId = Guid.NewGuid();

            UserInfo sysSenderInfo = GetDefaultUserInfo();

            //todo(michperr): Randomize this somehow
            WarningNotification notification = new WarningNotification()
            {
                GameId = Constants.TESTGAMEID,
                SessionId = sessionId.ToString(),
            };

            NotificationRequest nr = GetNotificationRequest(
                notification,
                new AsyncMultiplayer.SessionCommon.IdentityToken(0, "MPSystem"),
                Constants.TESTGAMEID,
                sessionId.ToString());

            CreatePreProcessor cpp = new CreatePreProcessor();
            cpp.Initialize();
            cpp.ProcessNotificationRequest(nr);
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Me messing around with stuff")]
        [TestProperty("Type", "Feature")]
        public void SMTPProcessor_Invite_ByEmail()
        {
            Guid sessionId = Guid.NewGuid();
            UserInfo sysSenderInfo = GetDefaultUserInfo();

            InvitationNotification invite = GetDefaultInvite(sysSenderInfo, CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password), Constants.TESTGAMEID, Guid.NewGuid().ToString(), string.Empty, false);
            NotificationRequest request = GetNotificationRequest(invite, sysSenderInfo, Constants.TESTGAMEID, invite.SessionId);

            request.To = string.Join(";", ConfigUsersToArray().Select(x => CreatePreProcessor.EmailPrefix + x.Membername).ToArray());

            CreatePreProcessor cpp = new CreatePreProcessor();
            cpp.Initialize();
            cpp.ProcessNotificationRequest(request);

            //todo(michperr): Asserts here.  Figure out a way to just call the other test.

            NotificationSMTPProvider n = new NotificationSMTPProvider();
            n.Initialize();
            n.ProcessNotificationRequest(request);

        }

        /// <summary>
        /// Gamertags shouldn't resolve an email address
        /// </summary>
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Me messing around with stuff")]
        [TestProperty("Type", "Feature")]
        public void SMTPProcessor_Invite_ByGamertag()
        {
            Guid sessionId = Guid.NewGuid();

            UserInfo sysSenderInfo = GetDefaultUserInfo();
            InvitationNotification invite = GetDefaultInvite(sysSenderInfo, CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password), Constants.TESTGAMEID, Guid.NewGuid().ToString(), string.Empty, false);
            NotificationRequest nr = GetNotificationRequest(invite, sysSenderInfo, Constants.TESTGAMEID, invite.SessionId);


            nr.To = string.Join(";", ConfigUsersToArray().Select(x => CreatePreProcessor.GamertagPrefix + x.Gamertag).ToArray());


            CreatePreProcessor cpp = new CreatePreProcessor();
            cpp.Initialize();
            cpp.ProcessNotificationRequest(nr);

            NotificationSMTPProvider n = new NotificationSMTPProvider();
            n.Initialize();
            n.ProcessNotificationRequest(nr);

        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("")]
        [TestProperty("Type", "Feature")]
        public void StorageProcessor_Invite_ByGamertag()
        {
            Guid sessionId = Guid.NewGuid();

            UserInfo sysSenderInfo = GetDefaultUserInfo();
            InvitationNotification invite = GetDefaultInvite(sysSenderInfo, CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password), Constants.TESTGAMEID, Guid.NewGuid().ToString(), string.Empty, false);
            NotificationRequest nr = GetNotificationRequest(invite, sysSenderInfo, Constants.TESTGAMEID, invite.SessionId);

            nr.To = string.Join(";", ConfigUsersToArray().Select(x => CreatePreProcessor.GamertagPrefix + x.Gamertag).ToArray());

            CreatePreProcessor cpp = new CreatePreProcessor();
            cpp.Initialize();
            cpp.ProcessNotificationRequest(nr);

            //todo(michperr): Verification.  Call the previous case.

            NotificationStorageProvider n = new NotificationStorageProvider();
            n.Initialize();
            n.ProcessNotificationRequest(nr);

        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("")]
        [TestProperty("Type", "Feature")]
        public void StorageProcessor_Invite_ByEmail()
        {
            Guid sessionId = Guid.NewGuid();

            UserInfo sysSenderInfo = GetDefaultUserInfo();
            InvitationNotification invite = GetDefaultInvite(sysSenderInfo, CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password), Constants.TESTGAMEID, Guid.NewGuid().ToString(), string.Empty, false);
            NotificationRequest nr = GetNotificationRequest(invite, sysSenderInfo, Constants.TESTGAMEID, invite.SessionId);

            nr.To = string.Join(";", ConfigUsersToArray().Select(x => CreatePreProcessor.EmailPrefix + x.Membername).ToArray());

            CreatePreProcessor cpp = new CreatePreProcessor();
            cpp.Initialize();
            cpp.ProcessNotificationRequest(nr);

            //todo(michperr): Verification.  Call the previous case.

            NotificationStorageProvider n = new NotificationStorageProvider();
            n.Initialize();
            n.ProcessNotificationRequest(nr);

        }

        private PreExistingUserElement[] ConfigUsersToArray()
        {
            PreExistingUserElement[] ret = new PreExistingUserElement[Config.Environment.UserSettings.Count];
            int index = 0;
            foreach (PreExistingUserElement p in Config.Environment.UserSettings)
            {
                ret[index++] = p;
            }
            return ret;
        }

        private NotificationRequest GetNotificationRequest(AsyncMultiplayer.NotificationService.Notification notification, AsyncMultiplayer.SessionCommon.IdentityToken uInfo, uint gameId, string sessionId)
        {
            NotificationRequest ret = GetNotificationRequestInternal(notification, gameId, sessionId);
            ret.From = uInfo.Token;

            return ret;
        }

        private NotificationRequest GetNotificationRequestInternal(
            AsyncMultiplayer.NotificationService.Notification notification,
            uint gameId,
            string sessionId)
        {
            NotificationRequest request = new NotificationRequest();
            request.To = string.Empty;
            request.Action = NotificationRequest.ActionType.Create;
            request.Command = request.Action.ToString() + notification.Type.ToString();
            request.GameId = notification.GameId;
            request.SessionId = notification.SessionId;
            request.RequestDataType = (int)notification.Type;
            request.RequestData = AsyncMultiplayer.NotificationService.Notification.SerializeToString(notification);
            return request;
        }

        private NotificationRequest GetNotificationRequest(AsyncMultiplayer.NotificationService.Notification notification, UserInfo uInfo, uint gameId, string sessionId)
        {
            NotificationRequest request = GetNotificationRequestInternal(notification, gameId, sessionId);
            request.From = AsyncMultiplayer.NotificationService.Notification.SerializeToString(uInfo);
            return request;
        }

        private InvitationNotification GetDefaultInvite(UserInfo sender, string senderXuid, uint gameId, string sessionId, string url, bool friendRequest)
        {
            return new InvitationNotification()
            {
                SupportedPlatform = 4,
                From = AsyncMultiplayer.NotificationService.Notification.SerializeToString(sender),
                UserId = senderXuid,
                GameId = gameId,
                SessionId = sessionId,
                Url = url,
                FriendRequest = friendRequest
            };
        }

        private string SendInvite(string from, string fromEmail, string locale, string recipients, uint gameId, string sessionId, string inviteUri, string inviteData)
        {
            UserInfo sysSenderInfo = GetDefaultUserInfo();
            INotificationRequest sendRequestUtils = new NotificationRequestUtils(Config.Environment.ConnectionString);
            InvitationNotification invite = GetDefaultInvite(sysSenderInfo, CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password), Constants.TESTGAMEID, sessionId, inviteUri, false);

            NotificationRequest request = GetNotificationRequestInternal((Notification)invite, Constants.TESTGAMEID, sessionId);

            request.To = recipients;
            request.RequestLocale = locale;
            request.From = AsyncMultiplayer.NotificationService.Notification.SerializeToString(sysSenderInfo);

            sendRequestUtils.SendNotificationRequest(request);
            return invite.Id;
        }

        //this function will fake the work of createPreProcessor and focus on testing email localization.
        private NotificationRequest SetUsersInfo(NotificationRequest request, string senderLocale)
        {
            NotificationRequest NotificationRequest = SetRecieverInfo(request);
            NotificationRequest.RequestLocale = senderLocale;
            NotificationRequest.SenderInfo = GetDefaultUserInfo();
            return NotificationRequest;
        }

        private NotificationRequest SetRecieverInfo(NotificationRequest request)
        {
            ulong[] xuid = { ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)) };
            string[] displayNames = { Config.Environment.UserSettings[1].Membername };
            string[] gamerTags = { Config.Environment.UserSettings[1].Gamertag };
            string[] recipients = { Config.Environment.UserSettings[1].Membername };
            string[] recipientsLocale = { "en-US" };
            NotificationRequest notificationRequest = SetRecieverInfo(request, xuid, displayNames, gamerTags, recipients, recipientsLocale);
            return request;
        }

        private NotificationRequest SetRecieverInfo(NotificationRequest request, ulong[] xuid, string[] displayNames, string[] gamerTags, string[] recipients, string[] locales)
        {
            List<UserInfo> recipientsInfo = new List<UserInfo>();
            StringBuilder toEmail = new StringBuilder();
            for (int i = 0; i < recipients.Length; i++)
            {
                UserInfo recipientInfo = new UserInfo();
                recipientInfo.Xuid = xuid[i];
                recipientInfo.DisplayName = displayNames[i];
                recipientInfo.GamerTag = gamerTags[i];
                recipientInfo.EmailAddress = recipients[i];
                recipientInfo.Locale = locales[i];
                recipientsInfo.Add(recipientInfo);
                toEmail.Append(recipients[i]);
                toEmail.Append(";");
            }
            request.RecipientsInfo = recipientsInfo;
            request.To = toEmail.ToString();
            return request;
        }

        private void SendInviteEmail(string fromEmail, string senderLocale, string sessionId, string inviteUri)
        {
            UserInfo senderInfo = GetDefaultUserInfo();
            InvitationNotification invite = GetDefaultInvite(senderInfo, CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password), Constants.TESTGAMEID, sessionId, inviteUri, false);
            NotificationRequest request = SetUsersInfo(GetNotificationRequestInternal((Notification)invite, Constants.TESTGAMEID, sessionId), senderLocale);

            NotificationSMTPProvider n = new NotificationSMTPProvider();
            n.Initialize();
            n.ProcessNotificationRequest(request);
        }

        private void SendInviteEmail(string locale, string sessionId)
        {
            SendInviteEmail("opssek-test+from@live-int.com", locale, sessionId, string.Empty);
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Send invitation from person 0 to person 1.  Verify that the email sent was localized.")]
        [TestProperty("Type", "Feature")]
        public void P_InviteEmail_Localization()
        {
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            Assert.AreEqual("false", ConfigurationManager.AppSettings["UseFakeClient"], "For this test, UseFakeClient should be set to false in app.config file.");
            //to make this test pass you have to first manually go to LIVEN_NPDB (db) - > t_setting_overrides (table), change the value of lest_NotificationSMTPProvider_HostName to the name of the machine you are running this test on. 

            SMTPListenerWrapper listener = NotificationTestCommon.StartListening();

            string[,] localeValue = LocalizationTestData.GOOD_LOCALE;
            int randomIndex = _randGen.Next(localeValue.Length / 2); // "/2" because localValue is a two dimensional array 
            ExpectedLocalizedEmailContent expectedLocalizedEmail = LocalizationTestData.GetExpectedLocalizedContentOnEmail(localeValue[randomIndex, 1], "Test gamertag", " (Test dispName)");
            string sessionId = Guid.NewGuid().ToString();
            SendInviteEmail(localeValue[randomIndex, 0], sessionId);

            email inviteEmail = NotificationTestCommon.GetMailAndStopListening(listener);
            NotificationTestCommon.ValidateEmail(inviteEmail.Subject, inviteEmail.Body, expectedLocalizedEmail, localeValue[randomIndex, 0], "Test gamertag", false, sessionId, true);
        }

        //[TestMethod, Owner("a-sediro"), Priority(2)]
        //[Description("send invite with friend request set to true and verify that the friend request is created on xbl")]
        //[TestProperty("Type", "Feature")]
        //public void P_CreatePreProcessor_FriendRequest()
        //{
        //    CreatePreProcessor cpp = new CreatePreProcessor();
        //    cpp.Initialize();
        //    new NotificationTestCommon();
        //    NotificationTestCommon.testHooksClient.SetupNotFriendsAndNoFR(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[3].Membername, Config.Environment.UserSettings[3].Password)));
        //    NotificationTestCommon.VerifyNotFriends(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[3].Membername, Config.Environment.UserSettings[3].Password)), "Error: Setup failed not to make friends");
        //    NotificationTestCommon.VerifyNoFR(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[3].Membername, Config.Environment.UserSettings[3].Password)), "Error: Setup failed to delete pre existing Friend Requests");

        //    string sessionId = Guid.NewGuid().ToString();
        //    InvitationNotification invite = GetDefaultInvite(GetDefaultUserInfo(), CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[3].Membername, Config.Environment.UserSettings[3].Password), Constants.TESTGAMEID, sessionId, string.Empty, true);
        //    NotificationRequest request = GetNotificationRequestInternal((Notification)invite, Constants.TESTGAMEID, sessionId);
        //    UserInfo sender = new UserInfo(0);
        //    sender.GamerTag = Config.Environment.UserSettings[3].Gamertag;
        //    request.From = AsyncMultiplayer.NotificationService.Notification.SerializeToString(sender);
        //    request.RequestLocale = "en-US";
        //    request.To = Config.Environment.UserSettings[1].Membername + ";";
        //    cpp.ProcessNotificationRequest(request);

        //    NotificationTestCommon.VerifyFriendRequest(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[3].Membername, Config.Environment.UserSettings[3].Password)), "Friend Request not found on XBL");
        //}
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\Notifications\API\DeleteNotificationBySession.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Net;
using AsyncMultiplayer.NotificationService;
using CloudServices.Test.Common.Configuration;
using System.Configuration;
using AsyncMultiplayer.NotificationService.Internal;
using System.Threading;
using CloudServices.Test.Common.Proxy;

namespace Multiplayer.Test.API
{
    /// <summary>
    /// Summary description for DeleteNotificationBySession
    /// </summary>
    [TestClass]
    public class DeleteNotificationBySession : TestAreaBase
    {
        private static NotificationTestCommon common = new NotificationTestCommon();

        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
            // Setting this to false to get logs out on TRX files
            Log.LogToFile = false;
        }

        //
        // This code runs before every test case -
        // For Notifications, this means ensuring at least a single notification is populated in the server and that all tests go to a new SessionID
        // This ensures the session gets properly cleaned up at the end of the test.
        //

        [TestInitialize()]
        public void MyTestInitialize()
        {
            LockTest();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            try
            {
                common.TestCleanup();
            }
            finally
            {
                UnlockTest();
            }
        }


        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Delete notifications by their SessionID")]
        [TestProperty("Type", "BVTs")]
        public void BVT_DeleteNotificationBySession()
        {
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);;

            List<string> notificationsCreated = new List<string>();

            notificationsCreated.Add(NotificationTestCommon.testHooksClient.CreateDummyNotification());

            notificationsCreated.Add(NotificationTestCommon.testHooksClient.CreateNotification(
                Notification.NotificationType.YouLose,
                Constants.TESTGAMEID,
                NotificationTestCommon.testHooksClient.TestSessionId,
                4,
                CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password),
                Constants.TESTGAMEVARIANT));

            //create a 3rd notification to make sure that deleteBySession only deletes that session
            Guid otherSession = Guid.NewGuid();
            NotificationTestCommon.testHooksClient.CreateNotification(
                Notification.NotificationType.YouWin,
                Constants.TESTGAMEID,
                otherSession.ToString(),
                4,
                CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password),
                Constants.TESTGAMEVARIANT);

            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), String.Empty, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual(3, notifications.Count, "ERROR: Unexpected Number of notifications before Delete.");

            //todo(michperr): Figure out why these are out of order and make VerifyNotification take a list
            //VerifyNotification(notifications[0], notificationsCreated[1]);
            //VerifyNotification(notifications[1], notificationsCreated[0]);

            //actually issue the delete            
            this.NotificationsServiceProxy.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId.ToString(), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);

            //verify that the delete took
            notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), String.Empty, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual(1, notifications.Count, "ERROR: Unexpected Number of notifications.");

            this.NotificationsServiceProxy.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), otherSession.ToString(), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), String.Empty, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual(0, notifications.Count, "ERROR: Unexpected Number of notifications.");

        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that user's last update time is updated only after a successful delete operation.")]
        [TestProperty("Type", "Feature")]
        public void P_DeleteNotificationBySession_Etag()
        {
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);;
            NotificationTestCommon.testHooksClient.CreateDummyNotification();
            List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(
                                            Constants.TESTGAMEID.ToString(),
                                            string.Empty,
                                            0,
                                            Constants.IGNORE_lAST_ID,
                                            5,
                                            string.Empty,
                                            false, 
                                            Config.Environment.UserSettings[0].Membername, 
                                            Config.Environment.UserSettings[0].Password,
                                            null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(1, nList.Count, "Unexpected number of notifications.");
            string etag = this.NotificationsServiceProxy.EtagInResponse;
            Thread.Sleep(2000); //to make sure that the user last update time is different from the previous one.
            this.NotificationsServiceProxy.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), nList[0].SessionId, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            nList = this.NotificationsServiceProxy.GetNotifications(
                        Constants.TESTGAMEID.ToString(),
                        string.Empty,
                        0,
                        Constants.IGNORE_lAST_ID,
                        5,
                        string.Empty,
                        false,
                        Config.Environment.UserSettings[0].Membername, 
                        Config.Environment.UserSettings[0].Password,
                        etag);
            Assert.IsNotNull(nList);
            Assert.AreEqual(0, nList.Count, "Unexpected number of notifications.");
            NotificationTestCommon.testHooksClient.CreateDummyNotification();
            nList = this.NotificationsServiceProxy.GetNotifications(
                                Constants.TESTGAMEID.ToString(),
                                string.Empty,
                                0,
                                Constants.IGNORE_lAST_ID,
                                5,
                                string.Empty,
                                false, 
                                Config.Environment.UserSettings[0].Membername, 
                                Config.Environment.UserSettings[0].Password, 
                                null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(1, nList.Count, "Unexpected number of notifications.");
            etag = this.NotificationsServiceProxy.EtagInResponse;
            Thread.Sleep(2000); //to make sure that the user last update time is different from the previous one.
            try
            {
                this.NotificationsServiceProxy.DeleteNotificationBySession(null, Guid.NewGuid().ToString(),Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
                Assert.Fail("Error: Expected an exception");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, e.Response.Status);
                try
                {
                    nList = this.NotificationsServiceProxy.GetNotifications(
                                Constants.TESTGAMEID.ToString(),
                                string.Empty,
                                0,
                                Constants.IGNORE_lAST_ID,
                                5,
                                string.Empty,
                                false, 
                                Config.Environment.UserSettings[0].Membername,
                                Config.Environment.UserSettings[0].Password, 
                                etag);
                    Assert.Fail("Expecting a 304.");
                }
                catch (RestException ex)
                {
                    Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotModified, ex.Response.Status);
                }
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call DeleteNotificationBySession with a non-existing sessionId and verify no actions are taken")]
        [TestProperty("Type", "Feature")]
        public void P_DeleteNotificationBySession_NonexistentSessionId()
        {
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);;
            NotificationTestCommon.testHooksClient.CreateDummyNotification();
            this.NotificationsServiceProxy.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), Guid.NewGuid().ToString(), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            Assert.AreEqual<int>(
                1,
                this.NotificationsServiceProxy.GetNotifications(
                    Constants.TESTGAMEID.ToString(),
                    string.Empty,
                    0,
                    string.Empty,
                    5,
                    string.Empty,
                    false, 
                    Config.Environment.UserSettings[0].Membername, 
                    Config.Environment.UserSettings[0].Password,
                    null).Count,
                "Unexpected number of notifications");
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call DeleteNotificationBySession with an invalid sessionId and verify no errors with no actions. -- we do not verify sessionId")]
        [TestProperty("Type", "Feature")]
        public void P_DeleteNotificationBySession_InvalidSessionId()
        {
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);;
            NotificationTestCommon.testHooksClient.CreateDummyNotification();
            this.NotificationsServiceProxy.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), "This is an invalid sessionsId.", Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            Assert.AreEqual<int>(
                1,
                this.NotificationsServiceProxy.GetNotifications(
                    Constants.TESTGAMEID.ToString(),
                    string.Empty,
                    0,
                    string.Empty,
                    5,
                    string.Empty,
                    false,
                    Config.Environment.UserSettings[0].Membername,
                    Config.Environment.UserSettings[0].Password,
                    null).Count,
                "Unexpected number of notifications");
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Call DeleteNotificationBySession with an empty sessionId and and verify a bad request.")]
        [TestProperty("Type", "Feature")]
        public void N_DeleteNotificationBySession_LongSessionId()
        {
            try
            {
                this.NotificationsServiceProxy.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), "This is a very long session ID with char length equals sixtyfour", Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
                Assert.Fail("Expected a BadRequest response");
            }
            catch (RestException ex)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: Session ID is invalid", ex.Response);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call DeleteNotificationBySession with an empty sessionId and verify a bad request.")]
        [TestProperty("Type", "Feature")]
        public void N_DeleteNotificationBySession_EmptySessionId()
        {
            try
            {
                this.NotificationsServiceProxy.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), string.Empty, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
                Assert.Fail("Expected a BadRequest response");
            }
            catch (RestException ex)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: Session ID is null or empty", ex.Response);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call DeleteNotificationBySession with sessionId = null and verify a bad request.")]
        [TestProperty("Type", "Feature")]
        public void N_DeleteNotificationBySession_NullSessionId()
        {
            try
            {
                this.NotificationsServiceProxy.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), null, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
                Assert.Fail("Expected a BadRequest response");
            }
            catch (RestException ex)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: Session ID is null or empty", ex.Response);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("verify that DeleteNotificationBySession does not give an error when called to delete all notifications while there are initially zero notifications on Azure.")]
        [TestProperty("Type", "Feature")]
        public void P_DeleteNotificationBySession_NotifListEmptyInitially()
        {
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);;
            this.NotificationsServiceProxy.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), Guid.NewGuid().ToString(), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
        }


        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify that users cannot delete another user's notifications.")]
        [TestProperty("Type", "Feature")]
        public void N_DeleteNotificationBySession_OtherUser()
        {
            NotificationTestCommon.testHooksClient.CreateDummyNotification();
            List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(string.Empty, string.Empty, 0, Constants.IGNORE_lAST_ID, 100, string.Empty, false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);
            int count = nList.Count;
            Assert.IsNotNull(nList);
            Assert.IsTrue(count > 0);
            this.NotificationsServiceProxy.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), nList[0].SessionId, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            nList = this.NotificationsServiceProxy.GetNotifications(string.Empty, string.Empty, 0, Constants.IGNORE_lAST_ID, 100, string.Empty, false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(count, nList.Count, "Incorrect number of notifications.");
            this.NotificationsServiceProxy.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), nList[0].SessionId, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            nList = this.NotificationsServiceProxy.GetNotifications(string.Empty, string.Empty, 0, Constants.IGNORE_lAST_ID, 100, string.Empty, false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(count - 1, nList.Count, "Incorrect number of notifications.");
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call DeleteNotificationBySession with a nonexistent gameId and verify a bad request.")]
        [TestProperty("Type", "Feature")]
        public void N_DeleteNotificationBySession_NonexistentGameId()
        {
            //this is a bug -- cannot validate GameId when it is int.
            NotificationTestCommon.testHooksClient.CreateDummyNotification();
            List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(string.Empty, string.Empty, 0, Constants.IGNORE_lAST_ID, 100, string.Empty, false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);
            int count = nList.Count;
            Assert.IsNotNull(nList);
            Assert.IsTrue(nList.Count > 0, "Unexpected number of notifications.");
            try
            {
                this.NotificationsServiceProxy.DeleteNotificationBySession("789908764", nList[0].SessionId, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
                Assert.Fail("Expecting a bad request");
            }
            catch(RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, e.Response.Status);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call DeleteNotificationBySession with an invalid gameId and verify a bad request.")]
        [TestProperty("Type", "Feature")]
        public void N_DeleteNotificationBySession_InvalidGameId()
        {
            try
            {
                this.NotificationsServiceProxy.DeleteNotificationBySession("This is an invalid gameId", Guid.NewGuid().ToString(), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
                Assert.Fail("Test should give a Bad Request response");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: Game ID is invalid", e.Response);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call DeleteNotificationBySession with an empty gameId and verify a bad request.")]
        [TestProperty("Type", "Feature")]
        public void N_DeleteNotificationBySession_EmptyGameId()
        {
            try
            {
                this.NotificationsServiceProxy.DeleteNotificationBySession(string.Empty, Guid.NewGuid().ToString(), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
                Assert.Fail("Test should give a Bad Request response");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: Game Id ID is null or empty", e.Response);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call DeleteNotificationBySession with a Null gameId and verify a bad request.")]
        [TestProperty("Type", "Feature")]
        public void N_DeleteNotificationBySession_NullGameId()
        {
            try
            {
                this.NotificationsServiceProxy.DeleteNotificationBySession(null, Guid.NewGuid().ToString(), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
                Assert.Fail("Test should give a Bad Request response");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: Game Id ID is null or empty", e.Response);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\Notifications\API\DeleteNotification.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using AsyncMultiplayer.NotificationService;
using System.Configuration;
using CloudServices.Test.Common.Configuration;
using System.Net;
using System.Threading;
using CloudServices.Test.Common.Proxy;

namespace Multiplayer.Test.API
{
    /// <summary>
    /// Summary description for DeleteNotification
    /// </summary>
    [TestClass]
    public class DeleteNotification : TestAreaBase
    {
        public DeleteNotification()
        {
        }
        private static NotificationTestCommon common = new NotificationTestCommon();

        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
            // Setting this to false to get logs out on TRX files
            Log.LogToFile = false;
        }

        //
        // This code runs before every test case -
        // For Notifications, this means ensuring at least a single notification is populated in the server and that all tests go to a new SessionID
        // This ensures the session gets properly cleaned up at the end of the test.
        //

        [TestInitialize()]
        public void MyTestInitialize()
        {
            LockTest();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            try
            {
                common.TestCleanup();
            }
            finally
            {
                UnlockTest();
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Delete notification by ID")]
        [TestProperty("Type", "BVTs")]
        public void BVT_DeleteNotification()
        {
            string notificationId = NotificationTestCommon.testHooksClient.CreateDummyNotification();
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId.ToString(), 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);
            Assert.IsNotNull(notifications);
            Assert.IsTrue(notifications.Count == 1, "ERROR: Unexpected Number of notifications.");
            common.VerifyNotification(notifications[0], notificationId);

            //delete
            this.NotificationsServiceProxy.DeleteNotificationQuery(notificationId, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);

            //verify
            notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId.ToString(), 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);
            Assert.IsNotNull(notifications);
            Assert.IsTrue(notifications.Count == 0, "ERROR: Unexpected Number of notifications.");
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Delete all Notifications on the service for a specific user regardless of session")]
        [TestProperty("Type", "Feature")]
        public void P_DeleteNotification_DeleteAllNotifications()
        {
            //prune the notifications for the types we can't create
            List<Notification.NotificationType> nTypes = new List<AsyncMultiplayer.NotificationService.Notification.NotificationType>();
            foreach (Notification.NotificationType t in Enum.GetValues(typeof(Notification.NotificationType)))
            {
                nTypes.Add(t);
            }
            List<string> s = new List<string>();
            foreach (Notification.NotificationType t in nTypes)
            {
                s.Add(NotificationTestCommon.testHooksClient.CreateNotification(
                    t,
                    CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password),
                    Constants.TESTGAMEID,
                    NotificationTestCommon.testHooksClient.TestSessionId));
            }

            List<Notification> notificationsBefore = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                String.Empty,
                0,
                Constants.IGNORE_lAST_ID,
                Int32.MaxValue,
                String.Empty,
                false, 
                Config.Environment.UserSettings[0].Membername, 
                Config.Environment.UserSettings[0].Password, 
                null);

            Log.WriteLine(String.Format("Deleting {0} notifications", notificationsBefore.Count));

            foreach (Notification n in notificationsBefore)
            {
                this.NotificationsServiceProxy.DeleteNotificationQuery(n.Id, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            }


            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                String.Empty,
                0,
                Constants.IGNORE_lAST_ID,
                Int32.MaxValue,
                String.Empty,
                false, 
                Config.Environment.UserSettings[0].Membername, 
                Config.Environment.UserSettings[0].Password, 
                null);
            Assert.IsTrue(notifications.Count == 0, "Notification count after calling DELETE on each Notification was not zero");
        }


        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Delete a non-existing Notification and verify no action.")]
        [TestProperty("Type", "Feature")]
        public void P_DeleteNotification_NonexistingNotification()
        {
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);;
            NotificationTestCommon.testHooksClient.CreateDummyNotification();
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                String.Empty,
                0,
                Constants.IGNORE_lAST_ID,
                Int32.MaxValue,
                String.Empty,
                false, 
                Config.Environment.UserSettings[0].Membername, 
                Config.Environment.UserSettings[0].Password, 
                null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual(1, notifications.Count, "Error: Unexpected number of notifications.");

            // We're reusing an old deleted NotificationID for this scenario.
            // Since it was generated with a GUID+Timestamp mechanism it's safe to say this will always in the future 
            // be a valid but non-existing Notification ID.
            this.NotificationsServiceProxy.DeleteNotificationQuery("2521442294861521366-630f329f-9065-43d4-aee1-0008b2f2752c", Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
           
            List<Notification> notificationsAfter = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                String.Empty,
                0,
                Constants.IGNORE_lAST_ID,
                Int32.MaxValue,
                String.Empty,
                false, 
                Config.Environment.UserSettings[0].Membername, 
                Config.Environment.UserSettings[0].Password, 
                null);
            Assert.IsNotNull(notificationsAfter);
            Assert.AreEqual(1, notificationsAfter.Count, "Error: Wrong number of notifications.");
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that user's last update time is updated only after a successful delete operation.")]
        [TestProperty("Type", "Feature")]
        public void P_DeleteNotification_Etag()
        {
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);;
            string notificationId = NotificationTestCommon.testHooksClient.CreateDummyNotification();
            List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(
                                            Constants.TESTGAMEID.ToString(),
                                            string.Empty,
                                            0,
                                            Constants.IGNORE_lAST_ID,
                                            5,
                                            string.Empty,
                                            false, 
                                            Config.Environment.UserSettings[0].Membername, 
                                            Config.Environment.UserSettings[0].Password, 
                                            null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(1, nList.Count, "Unexpected number of notifications.");
            string etag = this.NotificationsServiceProxy.EtagInResponse;
            Thread.Sleep(2000); //to make sure that the user last update time is different from the previous one.
            this.NotificationsServiceProxy.DeleteNotificationQuery(notificationId, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            nList = this.NotificationsServiceProxy.GetNotifications(
                        Constants.TESTGAMEID.ToString(),
                        string.Empty,
                        0,
                        Constants.IGNORE_lAST_ID,
                        5,
                        string.Empty,
                        false,
                        Config.Environment.UserSettings[0].Membername, 
                        Config.Environment.UserSettings[0].Password,
                        etag);
            Assert.IsNotNull(nList);
            Assert.AreEqual(0, nList.Count, "Unexpected number of notifications.");

            //remove // from commented out code below after bug #3302 is fixed  -- modify the DeleteBySession_Etag and also UpdateNotification_Etag testcases once this is fixed
            //notificationId = this.testHooksClient.CreateDummyNotification();
            //nList = this.NotificationsServiceProxy.GetNotifications(
            //                    Constants.TESTGAMEID.ToString(),
            //                    string.Empty,
            //                    0,
            //                    Constants.IGNORE_lAST_ID,
            //                    5,
            //                    string.Empty,
            //                    false);
            //Assert.IsNotNull(nList);
            //Assert.AreEqual(1, nList.Count, "Unexpected number of notifications.");
            //etag = this.NotificationsServiceProxy.EtagInResponse;
            //Thread.Sleep(2000); //to make sure that the user last update time is different from the previous one.
            ////delete a noficiation that does not exist
            //this.NotificationsServiceProxy.DeleteNotificationQuery("2521442294861521366-630f329f-9065-43d4-aee1-0008b2f2752c");
            //try
            //{
            //    nList = this.NotificationsServiceProxy.GetNotifications(
            //                Constants.TESTGAMEID.ToString(),
            //                string.Empty,
            //                0,
            //                NotificationTestCommon.ignoreLastID,
            //                5,
            //                string.Empty,
            //                false,
            //                etag);
            //    Assert.Fail("Expecting a 304.");
            //}
            //catch (RestException e)
            //{
            //    Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotModified, e.Response.Status);
            //}
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that users cannot delete another user's notifications.")]
        [TestProperty("Type", "Feature")]
        public void N_DeleteNotification_OtherUser()
        {
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            string sessionId = Guid.NewGuid().ToString();
            string notificationId = NotificationTestCommon.testHooksClient.CreateNotification(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password), Constants.TESTGAMEID, sessionId);
            List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), sessionId, 0, Constants.IGNORE_lAST_ID, 100, string.Empty, false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(1, nList.Count, "Incorrect number of notifications. Setup failed");
            Assert.AreEqual(notificationId, nList[0].Id, "unexpected notification ID");
            this.NotificationsServiceProxy.DeleteNotificationQuery(notificationId, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            nList = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), sessionId, 0, Constants.IGNORE_lAST_ID, 100, string.Empty, false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(1, nList.Count, "Incorrect number of notifications. Setup failed");
            Assert.AreEqual(notificationId, nList[0].Id, "unexpected notification ID");
            this.NotificationsServiceProxy.DeleteNotificationQuery(nList[0].Id, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            nList = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), sessionId, 0, Constants.IGNORE_lAST_ID, 100, string.Empty, false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(0, nList.Count, "Incorrect number of notifications. Setup failed");
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description(" expected lenght for notification id is 56 char(tick length + guid length + 1). pass in a good length but invalid notification id and verify error message.")]
        [TestProperty("Type", "Feature")]
        public void N_DeleteNotification_InvalidNotificationId()
        {
            string invalidNotificationId = new string('a', 20) + Guid.NewGuid().ToString();
            try
            {
                this.NotificationsServiceProxy.DeleteNotificationQuery(invalidNotificationId, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
                Assert.Fail("Test should give a Bad Request response");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: notificationId is invalid", e.Response);
            }
        }


        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call DeleteNotification with a short length of notification Id than the one that is expected(56) and verify a bad request response.")]
        [TestProperty("Type", "Feature")]
        public void N_DeleteNotification_ExpectedMinus1NotificationIdLength()
        {
            string notificationId = new string('a', 55);
            try
            {
                this.NotificationsServiceProxy.DeleteNotificationQuery(notificationId, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
                Assert.Fail("Test should give a Bad Request response");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: notificationId lenght is invalid", e.Response);
            }
        }


        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call DeleteNotification with a long notification Id and verify a bad request response.")]
        [TestProperty("Type", "Feature")]
        public void N_DeleteNotification_LongNotificationIdLength()
        {
            string notificationId = new string('a', 57);
            try
            {
                this.NotificationsServiceProxy.DeleteNotificationQuery("nighteen plus 1 len.", Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
                Assert.Fail("Test should give a Bad Request response");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: notificationId lenght is invalid", e.Response);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call DeleteNotification with an empty notification Id and verify a bad request response.")]
        [TestProperty("Type", "Feature")]
        public void N_DeleteNotification_EmptyNotificationId()
        {
            try
            {
                this.NotificationsServiceProxy.DeleteNotificationQuery(string.Empty, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
                Assert.Fail("Test should give a Bad Request response");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: Notification ID is null or empty", e.Response);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call DeleteNotification with a null notification Id and verify a bad request response.")]
        [TestProperty("Type", "Feature")]
        public void N_DeleteNotification_NullNotificationId()
        {
            try
            {
                this.NotificationsServiceProxy.DeleteNotificationQuery(null, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
                Assert.Fail("Test should give a Bad Request response");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: Notification ID is null or empty", e.Response);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\Notifications\API\CertBasedBVTs.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using AsyncMultiplayer.NotificationService;
using Multiplayer.Test.Proxy;
using CloudServices.Test.Common.Configuration;
using System.Threading;
using System.Net;
using CloudServices.Test.Common.Proxy;
using System.Configuration;

namespace Multiplayer.Test.API
{
    /// <summary>
    /// Summary description for CertBasedBVTs
    /// </summary>
    [TestClass]
    public class CertBasedBVTs : TestAreaBase
    {

        private static bool cleanupFR;
        private static CertBasedNotificationServiceProxy certBasedClient;

        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
            // Setting this to false to get logs out on TRX files
            Log.LogToFile = false;
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            certBasedClient = new CertBasedNotificationServiceProxy();//becasue some of the negative testcases mess with the cert and add auth header..., need to create a new proxy for each testcase
            cleanupFR = false;
            LockTest();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            try
            {
                certBasedClient = new CertBasedNotificationServiceProxy();//because some of the negative testcases mess with the cert and add auth header..., need to create a new proxy for each testcase
                if (cleanupFR)
                {
                    NotificationTestCommon.CleanupFR();
                    CleanupNotifications(string.Empty);
                }
                else
                    CleanupNotifications(Constants.TESTGAMEID.ToString());
            }
            finally
            {
                UnlockTest();
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Verifies GetNotifications for a cert based call.")]
        [TestProperty("Type", "BVTs")]
        public void BVT_GetNotifications_CertBased()
        {
            CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            List<Notification> nList;
            foreach (Notification.NotificationType t in nTypes)
            {
                string sessionId = Guid.NewGuid().ToString();
                string notificationId = testHooksClient.CreateNotification(
                                            t,
                                            CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password),
                                            Constants.TESTGAMEID,
                                            sessionId);
                nList = GetNotifications(
                    Constants.TESTGAMEID.ToString(),
                    sessionId,
                    t.ToString(),
                    Config.Environment.UserSettings[0].Membername,
                    Config.Environment.UserSettings[0].Password);
                Assert.IsNotNull(nList);
                Assert.AreEqual(1, nList.Count, "Error: Unexpected number of notifications.");
                Assert.AreEqual(notificationId, nList[0].Id, "Error: Unexpected notification Id.");
            }
            nList = GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                string.Empty,
                Config.Environment.UserSettings[0].Membername,
                Config.Environment.UserSettings[0].Password);
            Assert.IsNotNull(nList);
            Assert.AreEqual(nTypes.Length, nList.Count, "Error: Unexpected number of notifications.");
        }


        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Verifies DeleteNotification for a cert based call.")]
        [TestProperty("Type", "BVTs")]
        public void BVT_DeleteNotification_CertBased()
        {
            CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            string sessionId = Guid.NewGuid().ToString();
            string notificationId = testHooksClient.CreateNotification(
                                        CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password),
                                        Constants.TESTGAMEID,
                                        sessionId);

            List<Notification> nList = GetNotifications(
                Constants.TESTGAMEID.ToString(),
                sessionId,
                string.Empty,
                Config.Environment.UserSettings[0].Membername,
                Config.Environment.UserSettings[0].Password);
            Assert.IsNotNull(nList);
            Assert.AreEqual(1, nList.Count, "Error: Unexpected number of notifications.");
            Assert.AreEqual(notificationId, nList[0].Id, "Error: Unexpected notification Id.");

            certBasedClient.DeleteNotificationQuery(nList[0].Id, CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password));

            nList = GetNotifications(
                Constants.TESTGAMEID.ToString(),
                sessionId,
                string.Empty,
                Config.Environment.UserSettings[0].Membername,
                Config.Environment.UserSettings[0].Password);
            Assert.IsNotNull(nList);
            Assert.AreEqual(0, nList.Count, "Error: Unexpected number of notifications.");
        }


        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Verifies DeleteNotificationsBySession for a cert based call")]
        [TestProperty("Type", "BVTs")]
        public void BVT_DeleteNotificationsBySession_CertBased()
        {
            CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            string sessionId1 = Guid.NewGuid().ToString();
            string sessionId2 = Guid.NewGuid().ToString();
            string notificationId1 = testHooksClient.CreateNotification(
                                        CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password),
                                        Constants.TESTGAMEID,
                                        sessionId1);
            testHooksClient.CreateNotification(
                                        Notification.NotificationType.YourTurn,
                                        CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password),
                                        Constants.TESTGAMEID,
                                        sessionId2);
            testHooksClient.CreateNotification(
                                        Notification.NotificationType.YouWin,
                                        CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password),
                                        Constants.TESTGAMEID,
                                        sessionId2);

            List<Notification> nList = GetNotifications(
                Constants.TESTGAMEID.ToString(),
                sessionId1,
                string.Empty,
                Config.Environment.UserSettings[0].Membername,
                Config.Environment.UserSettings[0].Password);
            Assert.IsNotNull(nList);
            Assert.AreEqual(1, nList.Count, "Error: Unexpected number of notifications.");
            Assert.AreEqual(notificationId1, nList[0].Id, "Error: Unexpected notification Id.");

            nList = GetNotifications(
                Constants.TESTGAMEID.ToString(),
                sessionId2,
                string.Empty,
                Config.Environment.UserSettings[0].Membername,
                Config.Environment.UserSettings[0].Password);
            Assert.IsNotNull(nList);
            Assert.AreEqual(2, nList.Count, "Error: Unexpected number of notifications.");

            nList = GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                string.Empty,
                Config.Environment.UserSettings[0].Membername,
                Config.Environment.UserSettings[0].Password);
            Assert.IsNotNull(nList);
            Assert.AreEqual(3, nList.Count, "Error: Unexpected number of notifications.");

            certBasedClient.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), sessionId2, CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password));

            nList = GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                string.Empty,
                Config.Environment.UserSettings[0].Membername,
                Config.Environment.UserSettings[0].Password);
            Assert.IsNotNull(nList);
            Assert.AreEqual(1, nList.Count, "Error: Unexpected number of notifications.");
            Assert.AreEqual(notificationId1, nList[0].Id, "Error: Unexpected notification Id.");

            certBasedClient.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), sessionId1, CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password));

            nList = GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                string.Empty,
                Config.Environment.UserSettings[0].Membername,
                Config.Environment.UserSettings[0].Password);
            Assert.IsNotNull(nList);
            Assert.AreEqual(0, nList.Count, "Error: Unexpected number of notifications.");
        }

        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Verifies UpdateNotification for a cert based call.")]
        [TestProperty("Type", "BVTs")]
        public void BVT_UpdateNotification_CertBased()
        {
            CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            string sessionId = Guid.NewGuid().ToString();
            string notificationId = testHooksClient.CreateNotification(
                                        CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password),
                                        Constants.TESTGAMEID,
                                        sessionId);

            List<Notification> nList = GetNotifications(
                Constants.TESTGAMEID.ToString(),
                sessionId,
                string.Empty,
                Config.Environment.UserSettings[0].Membername,
                Config.Environment.UserSettings[0].Password);
            Assert.IsNotNull(nList);
            Assert.AreEqual(1, nList.Count, "Error: Unexpected number of notifications.");
            Assert.AreEqual(notificationId, nList[0].Id, "Error: Unexpected notification Id.");
            Assert.AreEqual<Notification.NotificationStatus>(Notification.NotificationStatus.UnRead, nList[0].Status, "Error: Unexpected notification status.");

            certBasedClient.UpdateNotification(nList[0].Id, Notification.NotificationStatus.Viewed.ToString(), CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password));

            nList = GetNotifications(
                Constants.TESTGAMEID.ToString(),
                sessionId,
                string.Empty,
                Config.Environment.UserSettings[0].Membername,
                Config.Environment.UserSettings[0].Password);
            Assert.IsNotNull(nList);
            Assert.AreEqual(1, nList.Count, "Error: Unexpected number of notifications.");
            Assert.AreEqual(notificationId, nList[0].Id, "Error: Unexpected notification Id.");
            Assert.AreEqual<Notification.NotificationStatus>(Notification.NotificationStatus.Viewed, nList[0].Status, "Error: Unexpected notification status.");
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verifies get FR notification for a cert based call.")]
        [TestProperty("Type", "Features")]
        public void P_GetNotifications_FR_CertBased()
        {
            testHooksClient.SetupNotFriendsAndNoFR(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)));
            NotificationTestCommon.VerifyNotFriends(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)), "Error: Setup failed not to make friends");
            NotificationTestCommon.VerifyNoFR(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)), "Error: Setup failed to delete pre existing Friend Requests");

            CheckNotificationCount(string.Empty, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);

            cleanupFR = true;
            testHooksClient.AddFR(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)));
            NotificationTestCommon.VerifyFriendRequest(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)), "Error: Setup failed to delete pre existing Friend Requests");

            //make a call to trigger generationg FR notification
            List<Notification> nList = GetNotifications(
                    string.Empty,
                    string.Empty,
                    string.Empty,
                    Config.Environment.UserSettings[1].Membername,
                    Config.Environment.UserSettings[1].Password);
            Assert.IsNotNull(nList);
            Assert.AreEqual(0, nList.Count, "Error: Unexpected number of notifications.");

            Thread.Sleep(10 * notificationSleepTime); //give time for notifications internal to process request to create FR notification

            nList = GetNotifications(
                    string.Empty,
                    string.Empty,
                    string.Empty,
                    Config.Environment.UserSettings[1].Membername,
                    Config.Environment.UserSettings[1].Password);
            Assert.IsNotNull(nList);
            Assert.AreEqual(1, nList.Count, "Error: Unexpected number of notifications.");
        }


        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify fail when cert is not passed")]
        [TestProperty("Type", "Features")]
        public void N_GetNotifications_CertBased_NoCert()
        {
            certBasedClient.cert = null;
            try
            {
                GetNotifications(
                    Constants.TESTGAMEID.ToString(),
                    string.Empty,
                    string.Empty,
                    Config.Environment.UserSettings[0].Membername,
                    Config.Environment.UserSettings[0].Password);
                Assert.Fail("Expected fail as cert was null.");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.Unauthorized, e.Response.Status);
            }
        }

        //-- pass on environments below testnet does not guarantee no bug as the certs might not be trusted in the environments ---so we are not testing with certs.
        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify fail when cert is invalid")]
        [TestProperty("Type", "Features")]
        public void N_GetNotifications_CertBased_InvalidCert()
        {
            certBasedClient.cert = CloudServices.Test.Common.Authorization.Authorization.InstallStsClientCertificate();
            try
            {
                GetNotifications(
                    Constants.TESTGAMEID.ToString(),
                    string.Empty,
                    string.Empty,
                    Config.Environment.UserSettings[0].Membername,
                    Config.Environment.UserSettings[0].Password);
                Assert.Fail("Expected fail as cert was null.");
            }
            catch (RestException e)
            {
                //We should get unauthorized if cert is not trusted and Forbidden if cert is trusted. STS client cert is trusted on all environment above and on testnet.
                Assert.IsTrue((HttpStatusCode.Forbidden.Equals(e.Response.Status) || HttpStatusCode.Unauthorized.Equals(e.Response.Status)), "Expected either unauthorized or Forbidden but got " + e.Response.Status + "instead!");
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify error when xuid is invalid")]
        [TestProperty("Type", "BVTs")]
        public void N_GetNotifications_CertBased_InvalidXuid()
        {
            try
            {
                certBasedClient.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                Guid.NewGuid().ToString(),
                0,
                Constants.IGNORE_lAST_ID,
                Int32.MaxValue,
                string.Empty,
                false,
                null,
                "invalid xuid");
                Assert.Fail("Expected fail as cert was null.");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.Unauthorized, e.Response.Status);
            }
        }
        private void CleanupNotifications(string gameId)
        {
            foreach (PreExistingUserElement user in Config.Environment.UserSettings)
            {
                CheckNotificationCount(gameId, user.Membername, user.Password);
            }
        }

        private void CheckNotificationCount(string username, string password)
        {
            CheckNotificationCount(Constants.TESTGAMEID.ToString(), username, password);
        }

        private void CheckNotificationCount(string gameId, string username, string password)
        {
            List<Notification> nList;
            if (string.IsNullOrEmpty(gameId))
            {
                GetNotifications(
                    gameId,
                    string.Empty,
                    string.Empty,
                    username,
                    password);
                Thread.Sleep(10 * notificationSleepTime);
            }
            nList = GetNotifications(
                    gameId,
                    string.Empty,
                    string.Empty,
                    username,
                    password);
            Assert.IsNotNull(nList);
            if (nList.Count == 0)
            {
                return;
            }
            else if (nList.Count > 0)
            {
                foreach (Notification n in nList)
                {
                    certBasedClient.DeleteNotificationQuery(n.Id, CloudServices.Test.Common.Authorization.Authorization.GetXuid(username, password));
                }
                nList = GetNotifications(
                    gameId,
                    string.Empty,
                    string.Empty,
                    username,
                    password);
                Assert.IsNotNull(nList);
                Assert.AreEqual<int>(
                    0,
                    nList.Count,
                    "Setup failed: Expected 0 notifications loaded for this user.");
            }
        }

        private List<Notification> GetNotifications(string gameId, string sessionId, string type, string username, string password)
        {
            return certBasedClient.GetNotifications(
            gameId,
            sessionId,
            0,
            Constants.IGNORE_lAST_ID,
            Int32.MaxValue,
            type,
            false,
            null,
            CloudServices.Test.Common.Authorization.Authorization.GetXuid(username, password));
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\Notifications\API\GetSpotlight.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using AsyncMultiplayer.NotificationService;
using System.Xml; //.Linq;
using CloudServices.Test.Common.Configuration;
using System.Net; //.Mail;
using CosmosTest.Common;
using Cosmos.Core.Exceptions;
using Multiplayer.Test.Proxy;
using CloudServices.Test.Common;
using CloudServices.Test.Common.Proxy;


namespace Multiplayer.Test.API
{
    /// <summary>
    /// Summary description for GetSpotlight
    /// </summary>
    [TestClass]
    public class GetSpotlight : TestAreaBase
    {
        private Random randomGenerator = new Random();

        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
            // Setting this to false to get logs out on TRX files
            Log.LogToFile = false;
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            LockTest("spotlight");
        }

        [TestCleanup]
        public void TestCleanup()
        {
            UnlockTest("spotlight");
        }

        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Smoke test spotlight. (Useful for environments that are not for test only)")]
        [TestProperty("Type", "BVTs")]
        public void Smoke_GetSpotlight()
        {
            if ((string.Compare(Config.Environment.Name, "dev", true) != 0) && (string.Compare(Config.Environment.Name, "Airlock_LEST", true) != 0))
            {
                List<Spotlight> spotlightEntries = this.NotificationsServiceProxy.GetSpotlight("");
                Assert.IsNotNull(spotlightEntries);
                Assert.IsTrue(spotlightEntries.Count > 0, "ERROR: There are no spotlight entries.");
            }
        }


        //todo(michperr): These are created/owned by some guy on the mobile team.  Figure out how we can verify these ourselves.
        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Call GET to query for Spotlight entries. Verify Title, Subtitle and URL for each of the Spotlight entries.")]
        [TestProperty("Type", "Feature")]
        public void BVT_GetSpotlight_VerifyEntries()
        {
            if ((string.Compare(Config.Environment.Name, "dev", true) != 0) && (string.Compare(Config.Environment.Name, "Airlock_LEST", true) != 0))
            {
                Assert.AreEqual(true, Config.Environment.IsTestOnlyEnvironment, "This test should be run only on a test only environment as it adds and deletes entries.");
                CosmosTestHooks.PopulateFiveSpotlightEntries("en-US");
                List<Spotlight> spotlightEntries = this.NotificationsServiceProxy.GetSpotlight("Test");

                Assert.IsNotNull(spotlightEntries);
                Assert.AreEqual(5, spotlightEntries.Count, "ERROR: Wrong number of entries.");

                // For each Spotlight entry, validate that each entry has a valid string value and that the URI can actually be parsed into a valid URI
                Log.WriteLine("------------------------------------------------------------");
                foreach (Spotlight currentEntry in spotlightEntries)
                {
                    // Validate string values
                    Assert.IsFalse(String.IsNullOrEmpty(currentEntry.Title));
                    Assert.IsFalse(String.IsNullOrEmpty(currentEntry.Subtitle));

                    // Validate that Web link entries have a valid URL and GameID entries have the expected GameID
                    if (currentEntry.Subtitle.Equals(SpotlightItemType.GameID.ToString()))
                    {
                        Assert.IsTrue(String.IsNullOrEmpty(currentEntry.Url));
                        Assert.AreEqual(Constants.TESTGAMEID, currentEntry.GameId, "Error: Wrong gameID");
                    }
                    else
                    {
                        Assert.IsFalse(String.IsNullOrEmpty(currentEntry.Url));
                        Assert.IsTrue(
                            Uri.IsWellFormedUriString(currentEntry.Url, UriKind.Absolute),
                            String.Format("URL was not well-formed. URLs in Spotlight entries must be well-formed, fully-escaped URL values. Value: '{0}'", currentEntry.Url));
                    }
                    // Print out the entry for debugging purposes
                    Log.WriteLine(String.Format("Title: {0}", currentEntry.Title));
                    Log.WriteLine(String.Format("Subtitle: {0}", currentEntry.Subtitle));
                    Log.WriteLine(String.Format("URL: {0}", currentEntry.Url));
                    Log.WriteLine("");
                }
                Log.WriteLine("------------------------------------------------------------");
            }
        }
        //TODO: possibel addition to the spotlight test cases: code for setting/sending the spotlight entries to the db and then 
        //retriving the entries for testing, to ensure that there is always some spotlight data for the test to run on.
        /* todo(michperr): Refactoring needed:
         * 1) Should the list of spotlight entries for en-us and en-gb be completely different?  If they come back in the wrong order
         * this case will pass
         * 2) case sensitivity should be moved out into a seperate case
         */

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Query for spotlight entries by specifying supported but mismatched language and locale")]
        [TestProperty("Type", "Feature")]
        public void P_GetSpotlight_MismatchedLanguageLocale()
        {
            if ((string.Compare(Config.Environment.Name, "dev", true) != 0) && (string.Compare(Config.Environment.Name, "Airlock_LEST", true) != 0))
            {
                Assert.AreEqual(true, Config.Environment.IsTestOnlyEnvironment, "This test should be run only on a test only environment as it adds and deletes entries.");
                string[] mismatchedLocaleList = { "de-US", "es-IT", "fr-DE", "en-DE", "it-GB" };
                int randomIndex = randomGenerator.Next(0, mismatchedLocaleList.Length);

                string[] localeList = { "de-DE", "es-ES", "fr-FR", "en-GB", "it-IT", "en-US" };
                string fallbackCountry = (mismatchedLocaleList[randomIndex].Split('-'))[1];
                List<Spotlight> spotlightEntries = new List<Spotlight>();
                foreach (string loc in localeList)
                {
                    CosmosTestHooks.PopulateFiveSpotlightEntries(loc, false);
                }

                CosmosTestHooks.WaitForCosmosCacheToExpire();

                foreach (string loc in localeList)
                {
                    if (loc.Contains(fallbackCountry))
                    {

                        spotlightEntries = this.NotificationsServiceProxy.GetSpotlight("Test", loc);
                        Assert.IsNotNull(spotlightEntries, string.Format("ERROR: Spotlight list is null for locale: {0}", loc));
                        Assert.AreEqual(5, spotlightEntries.Count, "Error: Wrong number of entries");
                        break;
                    }
                }
                List<Spotlight> spotlightEntriesFallback = this.NotificationsServiceProxy.GetSpotlight("Test", mismatchedLocaleList[randomIndex]);
                Assert.IsNotNull(spotlightEntriesFallback, string.Format("ERROR: Spotlight list is null for locale: {0}", mismatchedLocaleList[randomIndex]));
                Assert.AreEqual(5, spotlightEntriesFallback.Count, "Error: Wrong number of entries for fall back locale");

                int numberOfEntries = spotlightEntriesFallback.Count;
                for (int i = 0; i < numberOfEntries; i++)
                {
                    Assert.AreEqual(spotlightEntries[i].Title, spotlightEntriesFallback[i].Title, string.Format("ERROR: Incorrect fallback for mismatched locale: {0}", mismatchedLocaleList[randomIndex]));
                }
            }
        }
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Query for spotlight entries by specifying unsupported language and locale")]
        [TestProperty("Type", "Feature")]
        public void N_GetSpotlightWithUnsupportedLanguageLocale()
        {
            Assert.AreEqual(true, Config.Environment.IsTestOnlyEnvironment, "This test should be run only on a test only environment as it adds and deletes entries.");
            CosmosTestHooks.PopulateFiveSpotlightEntries("en-US");
            string unsupportedLocale = "ru-RU";  //Russian 
            List<Spotlight> spotlightEntries = null;
            spotlightEntries = this.NotificationsServiceProxy.GetSpotlight("Test", unsupportedLocale);
            Assert.IsNotNull(spotlightEntries, "Error: response should not be null.");
            Assert.AreEqual(0, spotlightEntries.Count, string.Format("ERROR: Some spotlight entries returned for unsupported locale: {0}", unsupportedLocale));
            string unsupportedMismatchedLocale = "ru-DK";
            spotlightEntries = this.NotificationsServiceProxy.GetSpotlight("Test", unsupportedMismatchedLocale);
            Assert.IsNotNull(spotlightEntries, "Error: response should not be null.");
            Assert.AreEqual(0, spotlightEntries.Count, string.Format("ERROR: Some spotlight entries returned for unsupported mismatched locale: {0}", unsupportedMismatchedLocale));
            string invalidLocale = "sdjrh1231^&GH";
            spotlightEntries = this.NotificationsServiceProxy.GetSpotlight("Test", invalidLocale);
            Assert.IsNotNull(spotlightEntries, "Error: response should not be null.");
            Assert.AreEqual(0, spotlightEntries.Count, string.Format("ERROR: Some spotlight entries returned for invalid locale: {0}", invalidLocale));
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Query for Spotlight entries with an empty carrier string.")]
        [TestProperty("Type", "Feature")]
        public void P_GetSpotlight_EmptyCarrier()
        {
            if ((string.Compare(Config.Environment.Name, "dev", true) != 0) && (string.Compare(Config.Environment.Name, "Airlock_LEST", true) != 0))
            {
                Assert.AreEqual(true, Config.Environment.IsTestOnlyEnvironment, "This test should be run only on a test only environment as it adds and deletes entries.");
                CosmosTestHooks.PopulateFiveSpotlightEntries("en-US");
                List<Spotlight> spotlightEntries = this.NotificationsServiceProxy.GetSpotlight(string.Empty, "en-US");
                Assert.IsNotNull(spotlightEntries, "ERROR: Spotlight entries are null for request url with empty carrier string");
                Assert.AreEqual(5, spotlightEntries.Count, "ERROR: Wrong number of entries");
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Query for Spotlight entries with an invalid locale and bad etag (PS 2155)")]
        [TestProperty("Type", "Feature")]
        public void P_GetSpotlight_BadLocale_withEtag()
        {
            Assert.AreEqual(true, Config.Environment.IsTestOnlyEnvironment, "This test should be run only on a test only environment as it adds and deletes entries.");
            CosmosTestHooks.PopulateFiveSpotlightEntries("en-US");
            string eTag = "blah";
            List<Spotlight> spotlightEntries = this.NotificationsServiceProxy.GetSpotlight("blah", "AA-AA", eTag);
            Assert.IsNotNull(spotlightEntries, "ERROR: response should not be null.");
            Assert.AreEqual(0, spotlightEntries.Count, "ERROR: Not expecting any entry to be found.");
        }

        //todo(michperr): Shouldn't this fail?
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Query for Spotlight entries with a long carrier string.")]
        [TestProperty("Type", "Feature")]
        public void P_GetSpotlight_LongCarrierString()
        {
            Assert.AreEqual(true, Config.Environment.IsTestOnlyEnvironment, "This test should be run only on a test only environment as it adds and deletes entries.");
            CosmosTestHooks.PopulateFiveSpotlightEntries("en-US");

            //Max URL length for mobile browser = 2048 chars. This is the limit on the client side, not on services side.            
            //Testing here for url string less than and greater than 2048 characters

            //Less than 2048 chars.
            int i, count = 1900;
            Random r = new Random();
            char ch;
            StringBuilder longCarrierName = new StringBuilder(count);

            for (i = 1; i <= count; i++)
            {
                ch = (char)(r.Next(32, 128));
                longCarrierName = longCarrierName.Append(ch);
            }

            List<Spotlight> spotlightEntries = this.NotificationsServiceProxy.GetSpotlight(longCarrierName.ToString());
            Assert.IsNotNull(spotlightEntries, String.Format("ERROR: Spotlight entries are null for request url with very long carrier string: {0}", longCarrierName));
            Assert.IsTrue(spotlightEntries.Count > 0, String.Format("ERROR: Spotlight list is empty for request url with very long carrier string: {0}", longCarrierName));

            //Greater than 2048 characters.
            for (i = 1; i <= 400; i++)
            {
                ch = (char)(r.Next(32, 128));
                longCarrierName = longCarrierName.Append(ch);
            }

            spotlightEntries = this.NotificationsServiceProxy.GetSpotlight(longCarrierName.ToString());
            Assert.IsNotNull(spotlightEntries, String.Format("ERROR: Spotlight entries are null for url with very long carrier string: {0}", longCarrierName));
            Assert.IsTrue(spotlightEntries.Count > 0, String.Format("ERROR: Spotlight list is empty for request url with very long carrier string: {0}", longCarrierName));
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Query for Spotlight entries with unicode character carrier string.")]
        [TestProperty("Type", "Feature")]
        public void P_GetSpotlight_UnicodeCarrierString()
        {
            Assert.AreEqual(true, Config.Environment.IsTestOnlyEnvironment, "This test should be run only on a test only environment as it adds and deletes entries.");
            // Generate 5 Cosmos Spotlight entries
            CosmosTestHooks.PopulateFiveSpotlightEntries("en-US");

            string testString = "ʵˀ˂ˠͼΏΦκϠϢЏфՊמϣϧϜϨ향찰/鄕札";
            List<Spotlight> spotlightEntries = this.NotificationsServiceProxy.GetSpotlight(testString);
            Assert.IsNotNull(spotlightEntries, String.Format("ERROR: Spotlight entries are null for request url with unicode carrier string: {0}", testString));
            Assert.IsTrue(spotlightEntries.Count > 0, String.Format("ERROR: Spotlight list is empty for request url with unicode carrier string: {0}", testString));
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Query for Spotlight entries using ETag and verify that caching of spotlight entries occurs.")]
        [TestProperty("Type", "Feature")]
        public void P_GetSpotlight_ETag_RightETag()
        {
            if ((string.Compare(Config.Environment.Name, "dev", true) != 0) && (string.Compare(Config.Environment.Name, "Airlock_LEST", true) != 0))
            {
                Assert.AreEqual(true, Config.Environment.IsTestOnlyEnvironment, "This test should be run only on a test only environment as it adds and deletes entries.");
                CosmosTestHooks.PopulateFiveSpotlightEntries("en-US");

                List<Spotlight> spotlightEntries = this.NotificationsServiceProxy.GetSpotlight("Test");
                string eTag = this.NotificationsServiceProxy.EtagInResponse;
                try
                {
                    List<Spotlight> spotlightEntriesNew = this.NotificationsServiceProxy.GetSpotlight("Test", "en-US", eTag);
                }
                catch (RestException e)
                {
                    Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotModified, e.Response.Status, "Error:Expecting a 304.");
                    Assert.AreEqual<string>(eTag, (e.Response.Headers["ETag"]), "Response does not have etag");
                }
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Query for Spotlight entries using ETag and verify that caching of spotlight entries occurs.")]
        [TestProperty("Type", "Feature")]
        public void P_GetSpotlight_ETag_WrongETag()
        {
            if ((string.Compare(Config.Environment.Name, "dev", true) != 0) && (string.Compare(Config.Environment.Name, "Airlock_LEST", true) != 0))
            {
                Assert.AreEqual(true, Config.Environment.IsTestOnlyEnvironment, "This test should be run only on a test only environment as it adds and deletes entries.");
                CosmosTestHooks.PopulateFiveSpotlightEntries("en-US");

                List<Spotlight> spotlightEntries = this.NotificationsServiceProxy.GetSpotlight("Test", "en-US");
                string eTag = this.NotificationsServiceProxy.EtagInResponse;
                Assert.IsNotNull(spotlightEntries, "ERROR: Spotlight entries are null.");
                Assert.AreEqual(5, spotlightEntries.Count, "ERROR: Wrong number of entries.");

                spotlightEntries = this.NotificationsServiceProxy.GetSpotlight("Test", "en-US", "blah");
                Assert.IsNotNull(spotlightEntries, "ERROR: Spotlight entries are null.");
                Assert.AreEqual(5, spotlightEntries.Count, "ERROR: Wrong number of entries.");
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Query for Spotlight entries using eTag and verify Cosmos doesn't get re-queried before the Cosmos timeout period expires.")]
        [TestProperty("Type", "Feature")]
        public void P_GetSpotlight_Cache_CosmosCacheHit()
        {
            Assert.AreEqual(true, Config.Environment.IsTestOnlyEnvironment, "This test should be run only on a test only environment as it adds and deletes entries.");
            string locale = "en-US";

            //Delete whatever was there and then Publish out a single new Spotlight entry.
            CosmosTestHooks.DestroyDirectory(locale);

            CosmosTestHooks.CreateSpotlightItem(
                String.Format("Cache Test 1 {0}", locale),
                SpotlightItemType.WebLink.ToString(),
                "http://m.bing.com",
                "",
                locale);
            CosmosTestHooks.WaitForCosmosCacheToExpire();

            //Request for spotlight once and get the eTag value.
            List<Spotlight> spotlightEntries = this.NotificationsServiceProxy.GetSpotlight("Test", "en-US", null);

            //Publish out a single new Spotlight entry.
            CosmosTestHooks.CreateSpotlightItem(
                String.Format("Cache Test 2 {0}", locale),
                SpotlightItemType.WebLink.ToString(),
                "http://m.microsoft.com",
                "",
                locale);

            // Immediatly re-request Spotlight -- this should hit the Cosmos cache
            List<Spotlight> spotlightEntriesNew = new List<Spotlight>();
            spotlightEntriesNew = this.NotificationsServiceProxy.GetSpotlight("Test", locale);
            Assert.AreEqual(spotlightEntries.Count, spotlightEntriesNew.Count, "ERROR: The Spotlight request with current ETag did not return an empty list.");
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Query for Spotlight entries with no eTag and verify you get Cosmos cached data")]
        [TestProperty("Type", "Feature")]
        public void P_GetSpotlight_Cache_CosmosCacheNotHit_WrongEtag()
        {
            Assert.AreEqual(true, Config.Environment.IsTestOnlyEnvironment, "This test should be run only on a test only environment as it adds and deletes entries.");
            string locale = "en-US";

            //Delete whatever was there and then Publish out a single new Spotlight entry.
            CosmosTestHooks.DestroyDirectory(locale);

            CosmosTestHooks.CreateSpotlightItem(
                String.Format("Cache Test 1 {0}", locale),
                SpotlightItemType.WebLink.ToString(),
                "http://m.bing.com",
                "",
                locale);
            CosmosTestHooks.WaitForCosmosCacheToExpire();

            List<Spotlight> spotlightEntries = this.NotificationsServiceProxy.GetSpotlight("Test", locale, null);

            //Publish out a single new Spotlight entry.
            CosmosTestHooks.CreateSpotlightItem(
                String.Format("Cache Test 2 {0}", locale),
                SpotlightItemType.WebLink.ToString(),
                "http://m.microsoft.com",
                "",
                locale);
            CosmosTestHooks.WaitForCosmosCacheToExpire();

            List<Spotlight> spotlightEntriesNew = new List<Spotlight>();
            spotlightEntriesNew = this.NotificationsServiceProxy.GetSpotlight("Test", locale, "blah");
            Assert.AreEqual(spotlightEntries.Count + 1, spotlightEntriesNew.Count, "ERROR: The Spotlight request with current ETag did not return an empty list.");
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Query for Spotlight entries using ETag and verify that caching of spotlight entries does not occur.")]
        [TestProperty("Type", "Feature")]
        public void P_GetSpotlight_Cache_CosmosCacheNotHit_WithETag()
        {
            Assert.AreEqual(true, Config.Environment.IsTestOnlyEnvironment, "This test should be run only on a test only environment as it adds and deletes entries.");
            string locale = "en-US";

            //Delete whatever was there and then Publish out a single new Spotlight entry.
            CosmosTestHooks.DestroyDirectory(locale);

            //Publish out a single new Spotlight entry.
            CosmosTestHooks.CreateSpotlightItem(
                String.Format("Cache Test 1 {0}", locale),
                SpotlightItemType.WebLink.ToString(),
                "http://m.bing.com",
                "",
                locale);
            CosmosTestHooks.WaitForCosmosCacheToExpire();

            // Query Spotlight once and save the eTag value.
            List<Spotlight> spotlightEntries = this.NotificationsServiceProxy.GetSpotlight("Test", locale, null);
            string eTag = this.NotificationsServiceProxy.EtagInResponse;

            //Publish out a single new Spotlight entry.
            CosmosTestHooks.CreateSpotlightItem(
                String.Format("Cache Test 2 {0}", locale),
                SpotlightItemType.WebLink.ToString(),
                "http://m.microsoft.com",
                "",
                locale);
            CosmosTestHooks.WaitForCosmosCacheToExpire();
            // Query Spotlightwith etag.
            List<Spotlight> spotlightEntriesNew = new List<Spotlight>();
            spotlightEntriesNew = this.NotificationsServiceProxy.GetSpotlight("Test", locale, eTag);
            Assert.AreEqual(spotlightEntries.Count + 1, spotlightEntriesNew.Count, "ERROR: The Spotlight request with current ETag did not return an empty list.");
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Populate Cosmos with five Spotlight entries and verify they're returned in order, with recent published item first")]
        [TestProperty("Type", "Feature")]
        public void P_GetSpotlight_SortByTimestamp_5()
        {
            Assert.AreEqual(true, Config.Environment.IsTestOnlyEnvironment, "This test should be run only on a test only environment as it adds and deletes entries.");
            string locale = "en-US";

            string spotlightItemTestPrefix = "Test Item";

            // Publish out five Spotlight timestamps
            CosmosTestHooks.PopulateFiveSpotlightEntries(locale);

            CosmosTestHooks.WaitForCosmosCacheToExpire();

            // Request Spotlight -- this should NOT hit the Cosmos cache since the cache has expired
            List<Spotlight> spotlightEntries = this.NotificationsServiceProxy.GetSpotlight("Test", locale, null);

            Assert.AreEqual(5, spotlightEntries.Count, "Error: Wrong number of entries");

            string expectedTitle;
            for (int i = 0; i < 5; i++)
            {
                expectedTitle = String.Format("{0} {1} {2}", spotlightItemTestPrefix, 5 - i, locale);

                Log.WriteLine("Current title: " + spotlightEntries[i].Title);
                Log.WriteLine("Expected title: " + expectedTitle);

                // Validate that the order is newest-to-oldest
                Assert.AreEqual(expectedTitle, spotlightEntries[i].Title, "Error: unexpected title");
            }

        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Query for spotlight entries with a specified valid locale other than 'en-US'")]
        [TestProperty("Type", "Feature")]
        public void P_GetSpotlightWithValidLocaleOtherThan_enUS()
        {
            Assert.AreEqual(true, Config.Environment.IsTestOnlyEnvironment, "This test should be run only on a test only environment as it adds and deletes entries.");
            string[] localeList = { "de-DE", "es-ES", "fr-FR", "en-GB", "it-IT" };
            int randomIndex = randomGenerator.Next(0, localeList.Length);
            string locale = localeList[randomIndex];

            foreach (string loc in localeList)
            {
                // Generate 5 Cosmos Spotlight entries on valid locale
                CosmosTestHooks.PopulateFiveSpotlightEntries(loc, false);
            }

            CosmosTestHooks.WaitForCosmosCacheToExpire();

            List<Spotlight> spotlightEntries = this.NotificationsServiceProxy.GetSpotlight("Test", locale);
            Assert.IsNotNull(spotlightEntries, string.Format("ERROR: Spotlight list is null for locale: {0}", locale));
            Assert.AreEqual(5, spotlightEntries.Count, string.Format("ERROR: Wrong number of entries for locale: {0}", locale));

            //For locales other than 'en-__'(any English locale), verifying that the spotlight content is different from content in the 'en-US' locale.
            if (!localeList[randomIndex].Contains("en-"))
            {
                List<Spotlight> spotlightEntries_ENUS = this.NotificationsServiceProxy.GetSpotlight("Test", "en-US");
                int numberOfEntries_ENUS = spotlightEntries_ENUS.Count;
                int numberOfEntries = spotlightEntries.Count;
                int i, j;
                for (i = 0; i < numberOfEntries; i++)
                {
                    for (j = 0; j < numberOfEntries_ENUS; j++)
                    {
                        Assert.AreNotEqual(spotlightEntries[i].Title, spotlightEntries_ENUS[j].Title, string.Format("ERROR: Spotlight entries for locale: {0} are same as entries for locale: en-US", locale));
                    }
                }
            }

            //verifying that the locale specification is not case sensitive.
            locale = localeList[randomIndex].ToLower();
            spotlightEntries = this.NotificationsServiceProxy.GetSpotlight("Test", locale);
            Assert.IsNotNull(spotlightEntries, string.Format("ERROR: Spotlight list is null for locale: {0}", locale));
            Assert.IsTrue(spotlightEntries.Count > 0, string.Format("ERROR: Spotlight list is empty for locale: {0}", locale));

            locale = localeList[randomIndex].ToUpper();
            spotlightEntries = this.NotificationsServiceProxy.GetSpotlight("Test", locale);
            Assert.IsNotNull(spotlightEntries, string.Format("ERROR: Spotlight list is null for locale: {0}", locale));
            Assert.IsTrue(spotlightEntries.Count > 0, string.Format("ERROR: Spotlight list is empty for locale: {0}", locale));
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\Notifications\NotificationTestCommon.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Leet.Live.Livecache;
using System.Configuration;
using AsyncMultiplayer.NotificationService.Internal;
using AsyncMultiplayer.NotificationService;
using CloudServices.Test.Common.Configuration;
using System.Threading;
using MultiPlayer.Test.Data;
using Multiplayer.Test.Proxy;
using System.ServiceProcess;
using System.Xml;
using CloudServices.Test.Common;
using CloudServices.Test.Common.Proxy;
using System.Net;
using SMTPTest;

namespace Multiplayer.Test.API
{
    public class NotificationTestCommon : TestAreaBase
    {
        public static bool cleanupFR = false;

        public void VerifyNotification(Notification n, string expectedNotificationId)
        {
            Assert.AreEqual(n.Id, expectedNotificationId, "Unexpected NotificationId");
        }

        /// <summary>
        /// Used for tests where the user CANNOT have any notifications preloaded
        /// </summary>
        public void CheckNotificationCount()
        {
            CheckNotificationCount(Constants.TESTGAMEID.ToString(), string.Empty, this.NotificationsServiceProxy.UserID, this.NotificationsServiceProxy.Password);
        }

        public void CheckNotificationCount(string userName, string password)
        {
            CheckNotificationCount(Constants.TESTGAMEID.ToString(), string.Empty, userName, password);
        }

        public void CheckNotificationCount(string gameId, string sessionId, string userName, string password)
        {
            List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(
                    gameId,
                    sessionId,
                    0,
                    string.Empty,
                    Int32.MaxValue,
                    string.Empty,
                    false,
                    userName,
                    password,
                    null);
            if (nList.Count == 0)
            {
                return;
            }
            else if (nList.Count > 0)
            {
                foreach (Notification n in nList)
                {
                    this.NotificationsServiceProxy.DeleteNotificationQuery(n.Id, userName, password);
                }
                Assert.AreEqual<int>(
                    0,
                    this.NotificationsServiceProxy.GetNotifications(
                        gameId,
                        sessionId,
                        0,
                        string.Empty,
                        Int32.MaxValue,
                        string.Empty,
                        false,
                        userName,
                        password,
                        null).Count,
                        "Setup failed: Expected 0 notifications loaded for this user.");
            }
        }

        public void CheckNotificationCountFR(string userName, string password)
        {
            CheckNotificationCount(string.Empty, string.Empty, userName, password);
        }

        public void ValidateLocalization(List<Notification> notifications, string notificationId, string loc, string lang)
        {
            Assert.IsNotNull(notifications, "ERROR : Notification is null");
            Assert.AreEqual<int>(1, notifications.Count, "ERROR: GetNotification failed to fetch notifications for " + loc + "locale.");
            VerifyNotification(notifications[0], notificationId);
            Assert.AreEqual(LocalizationTestData.GetLocalizedNotificationName(lang, notifications[0].Type), notifications[0].TypeDisplayName, "ERROR :Notification is not localized to " + lang + "when locale = " + loc);
        }

        /// <summary>
        /// Verifies that there are no notifications of such parameters.
        /// </summary>
        /// <param name="sessionId"></param>
        /// <param name="userName"></param>
        /// <param name="password"></param>
        /// <param name="type"></param>
        public void VerifyNoNotifications(string sessionId, string userName, string password, string type)
        {
            string gameId = Constants.TESTGAMEID.ToString();
            if (string.IsNullOrEmpty(sessionId))
                gameId = string.Empty;
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                gameId,
                sessionId.ToString(),
                0,
                Constants.IGNORE_lAST_ID,
                100,
                type,
                false,
                userName,
                password,
                null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual(0, notifications.Count, "ERROR: Unexpected Number of notifications.");
        }

        /// <summary>
        /// Verifies that the notification with those parameters exists.
        /// </summary>
        /// <param name="gameId"></param>
        /// <param name="sessionId"></param>
        /// <param name="type"></param>
        /// <param name="memberName"></param>
        /// <param name="password"></param>
        public void VerifyNotificationCreated(string gameId, string sessionId, Notification.NotificationType type, string memberName, string password)
        {
            VerifyNotificationCreated(gameId, sessionId, type.ToString(), memberName, password);
        }

        public void VerifyNotificationCreated(string gameId, string sessionId, string type, string memberName, string password)
        {
            for (int x = 0; x < 10; x++)
            {
                List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                     gameId,
                     sessionId,
                     0,
                     Constants.IGNORE_lAST_ID,
                     100,
                     type,
                     false,
                     memberName,
                     password,
                     null);

                Assert.IsNotNull(notifications, "Notification list should not be empty");
                if (notifications.Count == 1)
                {
                    return;
                }
                else if (notifications.Count > 1)
                {
                    Assert.AreEqual(1, notifications.Count, "Unexpected number of notifications found");
                }
                else
                {
                    Thread.Sleep(TestAreaBase.notificationSleepTime);
                }
            }
            Assert.Fail("No notification could be found");
        }

        /// <summary>
        /// Verifies that Friend Request Notification is not processed for the user.
        /// </summary>
        /// <param name="memberName"></param>
        /// <param name="password"></param>
        public void VerifyNoFRNotification(string memberName, string password)
        {
            // a triggering call to GetNotification - to put the a friend request notification on notifications queue
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                     string.Empty,
                     string.Empty,
                     0,
                     Constants.IGNORE_lAST_ID,
                     100,
                     string.Empty,
                     false,
                     memberName,
                     password,
                     null);

            //sleep while the notification is processed 
            Thread.Sleep(10 * TestAreaBase.notificationSleepTime);
            VerifyNoNotifications(string.Empty, memberName, password, Notification.NotificationType.FriendRequest.ToString());
        }

        /// <summary>
        /// Helper method to create and validate a specific notification type.
        /// Does NOT do any type-specific validations
        /// </summary>
        /// <returns>A strongly-typed Notification object for the generated notification, to be used by callers to validate type-specific data members</returns>
        public Notification CreateAndValidateNotificationByType(Enum notificationType)
        {
            Notification.NotificationType type = (Notification.NotificationType)notificationType;

            string notificationId = testHooksClient.CreateNotification(
                    type,
                    CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password),
                    Constants.TESTGAMEID,
                    testHooksClient.TestSessionId);

            // Validate that we get the right type of notification
            List<Notification> notificationList = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), testHooksClient.TestSessionId, (int)testHooksClient.TestCategory, Constants.IGNORE_lAST_ID, Int32.MaxValue, String.Empty, false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);
            Notification match = notificationList.Find(n => n.Id == notificationId);
            Assert.AreEqual(
                match.Type, (AsyncMultiplayer.NotificationService.Notification.NotificationType)notificationType, "Notification type created does not match.");

            return match;
        }
        /// <summary>
        /// Helper internal method - creates N number of notifications with a specific type.
        /// Used to test notification aggregation.
        /// </summary>
        /// <returns>The last notification ID generated</returns>
        public string CreateNotificationsInternal(int count, Notification.NotificationType type)
        {
            return CreateNotificationsInternal(count, type, testHooksClient.TestSessionId, Constants.TESTGAMEID);
        }

        /// <summary>
        /// Helper internal method - creates N number of notifications with a specific type.
        /// Used to test notification aggregation.
        /// </summary>
        public string CreateNotificationsInternal(int count, Notification.NotificationType type, string sessionID, uint gameID)
        {
            string lastNotificationId = String.Empty;

            for (int i = 0; i < count; i++)
            {
                lastNotificationId = testHooksClient.CreateNotification(
                    type,
                    gameID,
                    sessionID,
                    4,
                    CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password),
                    Constants.TESTGAMEVARIANT);
            }

            return lastNotificationId;
        }
        /// <summary>
        /// Helper internal method - used to get the count of notifications per type in a specific notification list
        /// </summary>
        /// <param name="notifications"></param>
        /// <param name="type"></param>
        /// <returns></returns>
        public List<Notification> FilterNotificationListByType(List<Notification> notifications, Notification.NotificationType type)
        {
            List<Notification> matches = new List<Notification>();
            foreach (Notification n in notifications)
            {
                if (n.Type == type)
                {
                    matches.Add(n);
                }
            }

            return matches;
        }
        public string GetNextGamertag(ref string gamertags)
        {
            string nextGamertag = String.Empty;

            if (!String.IsNullOrEmpty(gamertags))
            {
                int nextComma = gamertags.IndexOf(",");
                if (nextComma >= 0)
                {
                    nextGamertag = gamertags.Substring(0, nextComma);
                    gamertags = gamertags.Remove(0, nextComma + 1);
                }
                else if (nextComma == -1)
                {
                    nextGamertag = gamertags;
                    gamertags = String.Empty;
                }
            }

            return nextGamertag;
        }
        /// <summary>
        /// Helper method used to validate a given Notification's state. 
        /// It does a query against the server to get the latest notification state, then compares that against the expectedState
        /// </summary>
        /// <param name="notificationId">Notification to validate</param>
        /// <param name="gameId">GameId of this Notification</param>
        /// <param name="sessionId">SessionId of this Notification</param>
        /// <param name="expectedState">Expected state to validate</param>
        public void ValidateNotificationState(string notificationId, UInt32 gameId, string sessionId, Notification.NotificationStatus expectedState, string userName, string password)
        {
            // Query for the latest state of the notification
            List<Notification> notificationList = this.NotificationsServiceProxy.GetNotifications(gameId.ToString(), sessionId, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, userName, password, null);
            Assert.IsNotNull(notificationList, "Could not find most recently created notification. Aborting.");

            Notification newNotification = notificationList.Find(n => n.Id == notificationId);
            Assert.IsNotNull(newNotification, "Could not find generated Notification on the server");
            Notification.NotificationStatus notificationState = (Notification.NotificationStatus)newNotification.Status;

            // Compare current Notification state with expected state
            Assert.IsTrue((Notification.NotificationStatus)newNotification.Status == expectedState, "Notification state was incorrect.");
        }

        public void CleanupFRs()
        {
            if (cleanupFR)
            {
                CleanupFR();
            }
        }
        public static void CleanupFR()
        {
            Log.WriteLine("Cleaning up friend requests");
            //Delete FR
            foreach (PreExistingUserElement user in Config.Environment.UserSettings)
            {
                foreach (PreExistingUserElement target in Config.Environment.UserSettings)
                {
                    testHooksClient.CleanupFR(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(user.Membername, user.Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(target.Membername, target.Password)));
                }
            }
            Thread.Sleep(60000); //sleep for one minute to give time to FR message be in sync with XBL. 
            //verify
            foreach (PreExistingUserElement user in Config.Environment.UserSettings)
            {
                foreach (PreExistingUserElement target in Config.Environment.UserSettings)
                {
                    if (!VerifyNoFR(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(user.Membername, user.Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(target.Membername, target.Password))))
                        Log.WriteLine("Cleanup was unable to delete FR for " + user.Gamertag + " from " + target.Gamertag);
                }
            }
            Log.WriteLine("Cleaning up friend request completed");
        }

        public static void RemoveUsersFromNeverList()
        {
            Log.WriteLine("Cleaning up blocked users");
            foreach (PreExistingUserElement user in Config.Environment.UserSettings)
            {
                foreach (PreExistingUserElement target in Config.Environment.UserSettings)
                {
                    if (testHooksClient.IsUserInTargetsNeverList(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(target.Membername, target.Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(user.Membername, user.Password))))
                    {
                        testHooksClient.RemoveUserFromNeverList(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(user.Membername, user.Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(target.Membername, target.Password)));
                    }
                }
            }
        }

        public void TestCleanup()
        {
            Log.WriteLine("Cleaning up - Deleting all Notifications");

            foreach (PreExistingUserElement e in Config.Environment.UserSettings)
            {
                this.NotificationsServiceProxy.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), testHooksClient.TestSessionId.ToString(), e.Membername, e.Password);

                List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                    String.Empty,
                    String.Empty,
                    0,
                    Constants.IGNORE_lAST_ID,
                    100,
                    String.Empty,
                    false,
                    e.Membername,
                    e.Password,
                    null);

                List<string> sessions = new List<string>();

                foreach (Notification n in notifications)
                {
                    if (sessions.Contains(n.SessionId + "-" + n.GameId))
                    {
                        continue;
                    }
                    if ((n.GameId != 0) && (!String.IsNullOrEmpty(n.SessionId))) //DeleteNotification throws an exception if sessionId null or empty. And we do not want to cleanup FR notifications as they get created again and again.
                    {
                        this.NotificationsServiceProxy.DeleteNotificationBySession(n.GameId.ToString(), n.SessionId, e.Membername, e.Password);
                        sessions.Add(n.SessionId + '-' + n.GameId);
                    }
                }
                notifications = this.NotificationsServiceProxy.GetNotifications(
                    String.Empty,
                    String.Empty,
                    0,
                    Constants.IGNORE_lAST_ID,
                    100,
                    String.Empty,
                    false,
                    e.Membername,
                    e.Password,
                    null);
                foreach (Notification n in notifications)
                {
                    this.NotificationsServiceProxy.DeleteNotificationQuery(n.Id, e.Membername, e.Password);
                }
            }
        }

        public string SendInviteRequest(string sessionId, uint gameId, bool friendRequest, string recipients, int senderIndex)
        {
            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = gameId;
            inviteRequest.SessionId = sessionId;
            inviteRequest.Data = "SendInvite test data";
            inviteRequest.Recipients = recipients;
            inviteRequest.FriendRequest = friendRequest;
            this.NotificationsServiceProxy.SendInvite(inviteRequest, Config.Environment.UserSettings[senderIndex].Membername, Config.Environment.UserSettings[senderIndex].Password);
            return sessionId.ToString();
        }

        /// <summary>
        /// Sends invite from P0 to the recipients specified for the given session from the specified sender
        /// </summary>
        /// <param name="sessionId"></param>
        /// <param name="friendRequest"></param>
        /// <param name="recipients"></param>
        /// <param name="senderUserName"></param>
        /// <param name="senderPassword"></param>
        /// <returns></returns>
        public string SendInviteRequest(string sessionId, bool friendRequest, string recipients, int senderIndex)
        {
            this.SendInviteRequest(sessionId,  /*1297287394*/Constants.TESTGAMEID, friendRequest, recipients, senderIndex);
            return sessionId.ToString();
        }

        public string SendInviteRequest(string sessionId, bool friendRequest, string recipients)
        {
            return SendInviteRequest(sessionId, friendRequest, recipients, 0);
        }


        /// <summary>
        /// Creates a new session, verifies that there are no existing notifications for (the session + users), and sends invite
        /// </summary>
        /// <param name="friendRequest"></param>
        /// <param name="senderIndex">the index of the sender from the users in app.config</param>
        /// <param name="numRec"> number of recipients</param>
        /// <returns></returns>
        public string SendInviteRequest(bool friendRequest, int numRec)
        {
            string sessionId = Guid.NewGuid().ToString();
            return SendInviteRequest(sessionId, friendRequest, numRec);
        }
        public string SendInviteRequest(string sessionId, bool friendRequest, int numRec)
        {
            string gameId = Constants.TESTGAMEID.ToString(); /*"1297287394"; */
            string oldNotificationSession = sessionId;
            if (friendRequest)
            {
                oldNotificationSession = string.Empty; // if we are sending invitation with friend request = true, we need to check that we do not have prior FR notifications too. - Avoid filtering notifications by sessionID and gameID
                gameId = string.Empty;
            }
            StringBuilder recipients = new StringBuilder();
            for (int i = 1; i <= numRec; i++)
            {
                CheckNotificationCount(gameId, oldNotificationSession, Config.Environment.UserSettings[i].Membername, Config.Environment.UserSettings[i].Password);
                recipients.Append(Config.Environment.UserSettings[i].Membername);
                recipients.Append(";");
            }
            return SendInviteRequest(sessionId, friendRequest, recipients.ToString());
        }

        public static void VerifyFriendRequest(ulong userXuid, ulong targetXuid, string message)
        {
            for (int i = 0; i < 10; i++)
            {
                if (testHooksClient.HasFR(userXuid, targetXuid))
                    return;
                else
                    Thread.Sleep(Constants.XBLFRPROCESSTIMEINSEC * 100);
            }
            Assert.Fail(message);
        }

        public static void VerifyUserIsInTargetsNeverList(ulong userXuid, ulong targetXuid, string message)
        {
            for (int i = 0; i < 10; i++)
            {
                if (testHooksClient.IsUserInTargetsNeverList(userXuid, targetXuid))
                    return;
                else
                    Thread.Sleep(Constants.XBLFRPROCESSTIMEINSEC * 100);
            }
            Assert.Fail(message);
        }

        public static void VerifyUserIsNotInTargetsNeverList(ulong userXuid, ulong targetXuid, string message)
        {
            for (int i = 0; i < 10; i++)
            {
                if (!testHooksClient.IsUserInTargetsNeverList(userXuid, targetXuid))
                    return;
                else
                    Thread.Sleep(Constants.XBLFRPROCESSTIMEINSEC * 100);
            }
            Assert.Fail(message);
        }



        public static void VerifyNoFR(ulong userXuid, ulong targetXuid, string message)
        {
            for (int i = 0; i < 10; i++)
            {
                if (!testHooksClient.HasFR(userXuid, targetXuid))
                    return;
                else
                    Thread.Sleep(Constants.XBLFRPROCESSTIMEINSEC * 100);
            }
            Assert.Fail(message);
        }

        public static bool VerifyNoFR(ulong userXuid, ulong targetXuid)
        {
            for (int i = 0; i < 10; i++)
            {
                if (!testHooksClient.HasFR(userXuid, targetXuid))
                    return true;
                else
                    Thread.Sleep(Constants.XBLFRPROCESSTIMEINSEC * 100);
            }
            return false;
        }

        public static void VerifyNotFriends(ulong userXuid, ulong targetXuid, string message)
        {
            for (int i = 0; i < 10; i++)
            {
                if (!testHooksClient.AreFriends(userXuid, targetXuid))
                    return;
                else
                    Thread.Sleep(Constants.XBLFRPROCESSTIMEINSEC * 100);
            }
            Assert.Fail(message);
        }

        public static void VerifyFriends(ulong userXuid, ulong targetXuid, string message)
        {
            for (int i = 0; i < 10; i++)
            {
                if (testHooksClient.AreFriends(userXuid, targetXuid))
                    return;
                else
                    Thread.Sleep(Constants.XBLFRPROCESSTIMEINSEC * 100);
            }
            Assert.Fail(message);
        }

        public static void StopService(string machineName, string serviceName)
        {
            ServiceController controller = new ServiceController();

            controller.MachineName = machineName;
            controller.ServiceName = serviceName;
            ServiceControllerStatus status = controller.Status;

            if (status == ServiceControllerStatus.Running)
            {
                controller.Stop();
            }

            controller.WaitForStatus(ServiceControllerStatus.Stopped);

            status = controller.Status;
        }

        public static void StartService(string machineName, string serviceName)
        {
            ServiceController controller = new ServiceController();

            controller.MachineName = machineName;
            controller.ServiceName = serviceName;
            ServiceControllerStatus status = controller.Status;

            if (status == ServiceControllerStatus.Stopped)
            {
                controller.Start();
            }

            controller.WaitForStatus(ServiceControllerStatus.Running);

            status = controller.Status;
        }

        //private static string Base64Encode(string data)
        //{
        //    if (String.IsNullOrEmpty(data))
        //    {
        //        throw new ArgumentNullException(data, "Error in Base64Encode: input parameter data is Null or Empty.");
        //    }
        //    byte[] encData_byte = new byte[data.Length];
        //    encData_byte = System.Text.Encoding.UTF8.GetBytes(data);
        //    string encodedData = Convert.ToBase64String(encData_byte);
        //    return encodedData;
        //}
        public static string Base64Decode(string data)
        {
            if (String.IsNullOrEmpty(data))
            {
                throw new ArgumentNullException(data, "Error in Base64Decode: input parameter data is Null or Empty.");
            }

            System.Text.UTF8Encoding encoder = new System.Text.UTF8Encoding();
            System.Text.Decoder utf8Decode = encoder.GetDecoder();
            byte[] todecode_byte;

            try
            {
                todecode_byte = Convert.FromBase64String(data);
            }
            catch (FormatException formatEx)
            {
                throw new FormatException("Error in Base64Decode: " + formatEx.Message);
            }

            int charCount = utf8Decode.GetCharCount(todecode_byte, 0, todecode_byte.Length);
            char[] decoded_char = new char[charCount];
            utf8Decode.GetChars(todecode_byte, 0, todecode_byte.Length, decoded_char, 0);
            string decodedData = new String(decoded_char);
            return decodedData;
        }

        public static void ValidateEmail(string emailSubject, string emailBody, ExpectedLocalizedEmailContent expectedLocalizedEmailContent, string locale, string gamertag, string sessionId)
        {
            ValidateEmail(emailSubject, emailBody, expectedLocalizedEmailContent, locale, gamertag, true, sessionId);
        }

        public static void ValidateEmail(string emailSubject, string emailBody, ExpectedLocalizedEmailContent expectedLocalizedEmailContent, string locale, string gamertag, bool friendRequest, string sessionId)
        {
            ValidateEmail(emailSubject, emailBody, expectedLocalizedEmailContent, locale, gamertag, friendRequest, sessionId, false);
        }

        public static void ValidateEmail(string emailSubject, string emailBody, ExpectedLocalizedEmailContent expectedLocalizedEmailContent, string locale, string gamertag, bool friendRequest, string sessionId, bool IsInternalTest)
        {
            string subject = emailSubject;
            Log.WriteLine("The subject of the email is : " + subject);
            Log.WriteLine("The body of the email is : " + emailBody);
            string title = emailBody.Substring(emailBody.IndexOf(gamertag), (emailBody.IndexOf("</title></head><body>") - 19));
            Assert.AreEqual(expectedLocalizedEmailContent.title, title, "Body of email is not localized correctly when locale = " + locale);
            Assert.AreEqual(expectedLocalizedEmailContent.subject, subject, "Subject of email is not localized correctly when locale = " + locale);
            Assert.IsTrue(emailBody.Contains(expectedLocalizedEmailContent.bodyPart1), @"body is incorrect\missing in email when locale = " + locale + ". Expected " + expectedLocalizedEmailContent.bodyPart1 + " in the email.");
            Assert.IsTrue(emailBody.Contains(expectedLocalizedEmailContent.bodyPart2), @"body is incorrect\missing in email when locale = " + locale + ". Expected " + expectedLocalizedEmailContent.bodyPart2 + " in the email.");
            Assert.IsTrue(emailBody.Contains(expectedLocalizedEmailContent.bodyPart3), @"body is incorrect\missing in email when locale = " + locale + ". Expected " + expectedLocalizedEmailContent.bodyPart3 + " in the email.");
            Assert.IsTrue(emailBody.Contains(expectedLocalizedEmailContent.footerPart1), @"footer is incorrect\missing in email when locale = " + locale + ". Expected " + expectedLocalizedEmailContent.footerPart1 + " in the email.");
            Assert.IsTrue(emailBody.Contains(expectedLocalizedEmailContent.footerPart2), @"footer is incorrect\missing in email when locale = " + locale + ". Expected " + expectedLocalizedEmailContent.footerPart2 + " in the email.");
            Assert.IsTrue(emailBody.Contains(expectedLocalizedEmailContent.footerPart3), @"footer is incorrect\missing in email when locale = " + locale + ". Expected " + expectedLocalizedEmailContent.footerPart3 + " in the email.");
            Assert.IsTrue(emailBody.Contains(expectedLocalizedEmailContent.msAddressPart1), @"Address is incorrect\missing in email when locale = " + locale + ". Expected " + expectedLocalizedEmailContent.msAddressPart1 + " in the email.");
            Assert.IsTrue(emailBody.Contains(expectedLocalizedEmailContent.msAddressPart2), @"Address is incorrect\missing in email when locale = " + locale + ". Expected " + expectedLocalizedEmailContent.msAddressPart2 + " in the email.");

            if (friendRequest)
            {
                Assert.IsTrue(emailBody.Contains(expectedLocalizedEmailContent.frPart1), "Missing FR related content. Expected " + expectedLocalizedEmailContent.frPart1);
                Assert.IsTrue(emailBody.Contains(expectedLocalizedEmailContent.frPart2), "Missing FR related content. Expected " + expectedLocalizedEmailContent.frPart1);
                Assert.IsTrue(emailBody.Contains(expectedLocalizedEmailContent.frLink), "Missing FR link. Expected " + expectedLocalizedEmailContent.frLink);
            }

            string expectedEmail;
            using (System.IO.StreamReader sr = System.IO.File.OpenText("NonLocalizableEmailHtml.txt"))
            {
                while ((expectedEmail = sr.ReadLine()) != null)
                {
                    Assert.IsTrue(emailBody.Contains(expectedEmail), "Something is different on the email overall look. Please send an email to yourself and verify. Expected something like ---- " + expectedEmail + " --- in the email."); ;
                }
            }

            //  TODO: Add logic to verify the rest of the email content --- images, ...
            Assert.IsTrue(emailBody.Contains("http://zone.msn.com/images/v9/en-us/game/test/AppTesting/AppIconBackgammon_32x32.png"), "Missing the game icon.");
            if (!IsInternalTest)
                Assert.IsTrue(emailBody.Contains(string.Format("http://redirect.dev.xboxlive.com/s/{0}/{1}/", Constants.TESTGAMEID, sessionId)), "Missing the 'click here to take your turn' link");
        }

        public static string GetErrorMessageFromResponse(string body)
        {
            try
            {
                XmlDocumentEx xml = new XmlDocumentEx(body, true);
                XmlNode node = xml.SelectSingleNode("dfltns:ServiceErrorMessage/dfltns:ErrorMessage", xml.NamespaceManager);
                if (node == null)
                    throw new TestFailureException("Unable to find xpath 'dfltns:ServiceErrorMessage/dfltns:ErrorMessage' in response xml!");

                return node.InnerText;
            }
            catch (XmlException)
            {
                throw new TestFailureException("Bug! Invalid error Xml response returned by the server!");
            }
        }


        public static void VerifyException(HttpStatusCode expectedHttpStatus, string expectedErrorMessage, RestResponse response)
        {
            Assert.AreEqual<HttpStatusCode>(expectedHttpStatus, response.Status, "Error validating HTTP response status");
            Assert.AreEqual<string>(expectedErrorMessage, GetErrorMessageFromResponse(response.Body), "Error validating service error message");
        }



        public static SMTPListenerWrapper StartListening(int numberOfEmails)
        {
            Console.WriteLine("Main Thread: starting listener");
            SMTPListenerWrapper listener = new SMTPListenerWrapper(numberOfEmails);
            listener.Init();
            return listener;
        }

        public static SMTPListenerWrapper StartListening()
        {
            return StartListening(1);
        }

        public static email GetMailAndStopListening(SMTPListenerWrapper listener)
        {
            List<email> emails = GetMailsAndStopListening(listener);
            Assert.IsNotNull(emails, "Error: email should not be null.");
            Assert.AreEqual(1, emails.Count, "Error: wrong number of emails.");
            return emails[0];
        }

        public static List<email> GetMailsAndStopListening(SMTPListenerWrapper listener)
        {
            return GetMailsAndStopListening(listener, 1);
        }

        public static List<email> GetMailsAndStopListening(SMTPListenerWrapper listener, int numberOfEmails)
        {
            email inviteEmail = new email();
            List<email> inviteEmails = new List<email>();
            List<string> recMails = listener.WaitForMail(numberOfEmails * 10000);
            foreach (string recMail in recMails)
            {
                inviteEmail = new email();
                string[] mailLines = recMail.Split(new string[] { Environment.NewLine }, StringSplitOptions.None);
                Array.ForEach(mailLines, x => Console.WriteLine(x));
                inviteEmail.To = mailLines[5].Split(new string[] { "To: " }, StringSplitOptions.RemoveEmptyEntries)[0];
                inviteEmail.Subject = mailLines[7].Split(new string[] { "Subject: " }, StringSplitOptions.RemoveEmptyEntries)[0];
                inviteEmail.Body = "";
                for (int i = 10; i < mailLines.Length; i++)
                    inviteEmail.Body = inviteEmail.Body + mailLines[i];
                inviteEmails.Add(inviteEmail);
            }
            listener.Stop();
            return inviteEmails;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\Notifications\API\SendInvite.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using AsyncMultiplayer.NotificationService;
using System.Configuration;
using System.Net;
using CloudServices.Test.Common.Configuration;
using SMTPTest;
using System.Threading;
using MultiPlayer.Test.Data;
using System.Runtime.Serialization;
using System.Web;
using System.Xml;
using System.IO;
using CloudServices.Test.Common.Proxy;
using System.Net.Sockets;
using System.Net.Mail;

namespace Multiplayer.Test.API
{
    /// <summary>
    /// Summary description for SendInvite
    /// </summary>
    [TestClass]
    public class SendInvite : TestAreaBase
    {
        private Random randomGenerator = new Random();
        private NotificationTestCommon common = null;
        private bool isUserBlockerTestRun; // is used for test cleanup incase tests that block some users were run. Not that crucial but is good to have.
        #region Initialize
        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
            // Setting this to false to get logs out on TRX files
            Log.LogToFile = false;
        }

        //
        // This code runs before every test case -
        // For Notifications, this means ensuring at least a single notification is populated in the server and that all tests go to a new SessionID
        // This ensures the session gets properly cleaned up at the end of the test.
        //

        [TestInitialize()]
        public void MyTestInitialize()
        {
            common = new NotificationTestCommon();
            NotificationTestCommon.cleanupFR = false;
            LockTest();
            try
            {
                NotificationTestCommon.testHooksClient.UpdateUserEntry(
                    CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password),
                    DateTime.UtcNow,
                    DateTime.UtcNow,
                    0);
            }
            catch (Exception e)
            {
                UnlockTest();
                throw new Exception(e.Message);
            }
            isUserBlockerTestRun = false;
        }

        #endregion

        #region Cleanup
        [TestCleanup]
        public void TestCleanup()
        {
            try
            {
                common.TestCleanup();
                if (isUserBlockerTestRun)
                {
                    NotificationTestCommon.RemoveUsersFromNeverList();
                }
            }
            finally
            {
                UnlockTest();
            }
        }
        #endregion

        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Send invitation from person 0 to person 1.  Verify Notification was created.")]
        [TestProperty("Type", "BVTs")]
        public void BVT_SendInvite()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");
            string sessionId = common.SendInviteRequest(false, 1);
            common.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Testing 1 under the RateLimit on invites")]
        [TestProperty("Type", "BVTs")]
        public void BVT_InviteRateLimit_NIsSuccessful()
        {
            //set the number of invites sent to max - 1
            NotificationTestCommon.testHooksClient.UpdateUserEntry(
                CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password),
                DateTime.UtcNow,
                DateTime.UtcNow,
                9);

            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = Constants.TESTGAMEID;
            inviteRequest.SessionId = Guid.NewGuid().ToString();
            inviteRequest.Data = "VerifyStub_SendInvite test data";
            inviteRequest.Recipients = "recipients";
            this.NotificationsServiceProxy.SendInvite(inviteRequest, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);


            //reset the value on the server
            NotificationTestCommon.testHooksClient.UpdateUserEntry(
                CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password),
                DateTime.UtcNow,
                DateTime.UtcNow,
                0);
        }

        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Testing the RateLimit on invites is enforced")]
        [TestProperty("Type", "BVTs")]
        public void BVT_InviteRateLimit_NPlus1Fails()
        {
            //set the number of invites sent to max - 1
            NotificationTestCommon.testHooksClient.UpdateUserEntry(
                CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password),
                DateTime.UtcNow,
                DateTime.UtcNow,
                10);

            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = Constants.TESTGAMEID;
            inviteRequest.SessionId = Guid.NewGuid().ToString();
            inviteRequest.Data = "VerifyStub_SendInvite test data";
            inviteRequest.Recipients = Config.Environment.UserSettings[1].Membername;
            try
            {
                this.NotificationsServiceProxy.SendInvite(inviteRequest, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
                Assert.Fail("Expecting Not Acceptable.");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotAcceptable, e.Response.Status);
            }

            //reset the value on the server
            NotificationTestCommon.testHooksClient.UpdateUserEntry(
                CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password),
                DateTime.UtcNow,
                DateTime.UtcNow,
                0);
        }

        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Testing the RateLimit on invites will expire after an hour")]
        [TestProperty("Type", "BVTs")]
        public void BVT_InviteRateLimit_ExpireAfter1Hour()
        {
            //set the number of invites sent to max - 1
            NotificationTestCommon.testHooksClient.UpdateUserEntry(
                CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password),
                DateTime.UtcNow.Subtract(new TimeSpan(1, 0, 0)),
                DateTime.UtcNow.Subtract(new TimeSpan(1, 0, 0)),
                10);

            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = Constants.TESTGAMEID;
            inviteRequest.SessionId = Guid.NewGuid().ToString();
            inviteRequest.Data = "VerifyStub_SendInvite test data";
            inviteRequest.Recipients = "recipients";

            Thread.Sleep(1000); //give time to make sure that the update user entry has been executed. Added this because I got random failures on testnet and I couldn't think of any other reason why.
            this.NotificationsServiceProxy.SendInvite(inviteRequest, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);

            //reset the value on the server
            NotificationTestCommon.testHooksClient.UpdateUserEntry(
                CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password),
                DateTime.UtcNow,
                DateTime.UtcNow,
                0);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send invitation and verify Invite Notification is created for the recipient. - use gamertag to send invite.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_ByGamerTag()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");
            //Send invite by gamer tag
            string sessionId = Guid.NewGuid().ToString();
            common.VerifyNoNotifications(sessionId, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password, string.Empty);
            string recipient = "gamertag:" + Config.Environment.UserSettings[1].Gamertag + ";";
            common.SendInviteRequest(sessionId, false, recipient);
            common.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Invite request datablob too long.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_MaxInviteDatablob()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");
            string data = new string('a', 1000);
            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = Constants.TESTGAMEID;
            inviteRequest.SessionId = Guid.NewGuid().ToString();
            inviteRequest.Data = data;
            inviteRequest.Recipients = Config.Environment.UserSettings[1].Membername + ";";
            this.NotificationsServiceProxy.SendInvite(inviteRequest, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            common.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), inviteRequest.SessionId, Notification.NotificationType.Invitation, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Invite request datablob too long.")]
        [TestProperty("Type", "Feature")]
        public void N_SendInvite_MaxPlus1InviteDatablob()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");
            string data = new string('a', 1001);
            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = Constants.TESTGAMEID;
            inviteRequest.SessionId = Guid.NewGuid().ToString();
            inviteRequest.Data = data;
            inviteRequest.Recipients = Config.Environment.UserSettings[1].Membername + ";";
            try
            {
                this.NotificationsServiceProxy.SendInvite(inviteRequest, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
                Assert.Fail("Expecting a bad request");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: Data member in InviteRequest is too big", e.Response);
            }
        }
        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Invite request with empty recipient list.")]
        [TestProperty("Type", "Feature")]
        public void N_SendInvite_EmptyRecipientList()
        {
            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = Constants.TESTGAMEID;
            inviteRequest.SessionId = Guid.NewGuid().ToString();
            inviteRequest.Data = "test data";
            inviteRequest.Recipients = "";
            try
            {
                this.NotificationsServiceProxy.SendInvite(inviteRequest, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
                Assert.Fail("Expecting a bad request");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: receipients list is empty", e.Response);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("verify FR link will not be available in invite email when FR is set to false.")]
        [TestProperty("Type", "Feature")]
        public void N_SendInvite_InviteEmail_NoFRLink()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");

            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            Assert.AreEqual("false", ConfigurationManager.AppSettings["UseFakeClient"], "For this test, UseFakeClient should be set to false in app.config file.");

            //to make this test pass you have to first manually go to LIVEN_NPDB (db) - > t_setting_overrides (table), change the value of lest_NotificationSMTPProvider_HostName to the name of the machine you are running this test on. 

            SMTPListenerWrapper listener = NotificationTestCommon.StartListening();

            string gamertag = Config.Environment.UserSettings[0].Gamertag;
            this.NotificationsServiceProxy.Locale = LocalizationTestData.DEFAULT_LOCALE;
            ExpectedLocalizedEmailContent expectedLocalizedEmail = LocalizationTestData.GetExpectedLocalizedContentOnEmail(LocalizationTestData.DEFAULT_LANGUAGE, gamertag, "");

            //I changed FR below to true because we have decided not to include FR related content on the invite email. Please chenge this if decided the other way.
            string sessionId = common.SendInviteRequest(false, 1);
            common.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            email inviteEmail = NotificationTestCommon.GetMailAndStopListening(listener);
            NotificationTestCommon.ValidateEmail(inviteEmail.Subject, inviteEmail.Body, expectedLocalizedEmail, this.NotificationsServiceProxy.Locale, gamertag, false, sessionId);
            Assert.IsFalse(inviteEmail.Body.Contains(expectedLocalizedEmail.frPart1), "Not expecting FR related content");
            Assert.IsFalse(inviteEmail.Body.Contains(expectedLocalizedEmail.frPart2), "Not expecting FR related content");
            Assert.IsFalse(inviteEmail.Body.Contains(expectedLocalizedEmail.frLink), "Not expecting FR related content");
        }


        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("verify FR link is available in invite email when FR is set to true.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_InviteEmail_FRLink()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");

            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            Assert.AreEqual("false", ConfigurationManager.AppSettings["UseFakeClient"], "For this test, UseFakeClient should be set to false in app.config file.");

            //to make this test pass you have to first manually go to LIVEN_NPDB (db) - > t_setting_overrides (table), change the value of lest_NotificationSMTPProvider_HostName to the name of the machine you are running this test on. 

            SMTPListenerWrapper listener = NotificationTestCommon.StartListening();

            string gamertag = Config.Environment.UserSettings[0].Gamertag;
            this.NotificationsServiceProxy.Locale = LocalizationTestData.DEFAULT_LOCALE;
            ExpectedLocalizedEmailContent expectedLocalizedEmail = LocalizationTestData.GetExpectedLocalizedContentOnEmail(LocalizationTestData.DEFAULT_LANGUAGE, gamertag, "");

            //I changed FR below to true because we have decided not to include FR related content on the invite email. Please chenge this if decided the other way.
            string sessionId = common.SendInviteRequest(true, 1);
            common.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            email inviteEmail = NotificationTestCommon.GetMailAndStopListening(listener);
            NotificationTestCommon.ValidateEmail(inviteEmail.Subject, inviteEmail.Body, expectedLocalizedEmail, this.NotificationsServiceProxy.Locale, gamertag, true, sessionId);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send invitation and verify Notification was created and email sent was localized for the recipient.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_Localization_GoodLocale()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");

            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            Assert.AreEqual("false", ConfigurationManager.AppSettings["UseFakeClient"], "For this test, UseFakeClient should be set to false in app.config file.");

            //to make this test pass you have to first manually go to LIVEN_NPDB (db) - > t_setting_overrides (table), change the value of lest_NotificationSMTPProvider_HostName to the name of the machine you are running this test on. 

            SMTPListenerWrapper listener = NotificationTestCommon.StartListening();

            string gamertag = Config.Environment.UserSettings[0].Gamertag;
            string[,] localeValue = LocalizationTestData.GOOD_LOCALE;
            int randomIndex = randomGenerator.Next(localeValue.Length / 2);
            this.NotificationsServiceProxy.Locale = localeValue[randomIndex, 0];
            ExpectedLocalizedEmailContent expectedLocalizedEmail = LocalizationTestData.GetExpectedLocalizedContentOnEmail(localeValue[randomIndex, 1], gamertag, "");

            string sessionId = common.SendInviteRequest(true, 1);
            common.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            email inviteEmail = NotificationTestCommon.GetMailAndStopListening(listener);
            NotificationTestCommon.ValidateEmail(inviteEmail.Subject, inviteEmail.Body, expectedLocalizedEmail, localeValue[randomIndex, 0], gamertag, sessionId);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send invitation and verify Notification was created and email sent was localized for the recipient.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_Localization_MixedLocale()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");

            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            Assert.AreEqual("false", ConfigurationManager.AppSettings["UseFakeClient"], "For this test, UseFakeClient should be set to false in app.config file.");

            //to make this test pass you have to first manually go to LIVEN_NPDB (db) - > t_setting_overrides (table), change the value of lest_NotificationSMTPProvider_HostName to the name of the machine you are running this test on. 
            SMTPListenerWrapper listener = NotificationTestCommon.StartListening();

            string gamertag = Config.Environment.UserSettings[0].Gamertag;
            string[,] localeValue = LocalizationTestData.MIXED_LOCALE;
            int randomIndex = randomGenerator.Next(localeValue.Length / 2);
            this.NotificationsServiceProxy.Locale = localeValue[randomIndex, 0];
            ExpectedLocalizedEmailContent expectedLocalizedEmail = LocalizationTestData.GetExpectedLocalizedContentOnEmail(localeValue[randomIndex, 1], gamertag, "");

            string sessionId = common.SendInviteRequest(true, 1);
            common.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            email inviteEmail = NotificationTestCommon.GetMailAndStopListening(listener);
            NotificationTestCommon.ValidateEmail(inviteEmail.Subject, inviteEmail.Body, expectedLocalizedEmail, localeValue[randomIndex, 0], gamertag, sessionId);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send invitation and verify Notification was created and email sent was localized for the recipient.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_Localization_UnsupportedLocale()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");

            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            Assert.AreEqual("false", ConfigurationManager.AppSettings["UseFakeClient"], "For this test, UseFakeClient should be set to false in app.config file.");

            //to make this test pass you have to first manually go to LIVEN_NPDB (db) - > t_setting_overrides (table), change the value of lest_NotificationSMTPProvider_HostName to the name of the machine you are running this test on. 
            SMTPListenerWrapper listener = NotificationTestCommon.StartListening();

            string gamertag = Config.Environment.UserSettings[0].Gamertag;
            string[] localeValue = LocalizationTestData.UNSUPPORTED_lOCALE;
            int randomIndex = randomGenerator.Next(localeValue.Length);
            this.NotificationsServiceProxy.Locale = localeValue[randomIndex];
            ExpectedLocalizedEmailContent expectedLocalizedEmail = LocalizationTestData.GetExpectedLocalizedContentOnEmail(LocalizationTestData.DEFAULT_LANGUAGE, gamertag, "");

            string sessionId = common.SendInviteRequest(true, 1);
            common.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            email inviteEmail = NotificationTestCommon.GetMailAndStopListening(listener);

            NotificationTestCommon.ValidateEmail(inviteEmail.Subject, inviteEmail.Body, expectedLocalizedEmail, localeValue[randomIndex], gamertag, sessionId);
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify that emails are sent for recipients who do not have a live ID.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_Nonxboxuser()
        {
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            Assert.AreEqual("false", ConfigurationManager.AppSettings["UseFakeClient"], "For this test, UseFakeClient should be set to false in app.config file.");

            string validEmailAddresses = "onecard-testB@hotmail-int.com;1234957457@123456.com;27374-296836@hkkhkh890.org;122.44mjkfjdfHKKHFKDHkkjfKhdkh_jghdjfg-jkgjdgfdgF@hkkhkh890.name;R.G@hkkhkh890.gov;r.g.l@hkkhkh890.aero;1.2@hkkhkh890.net;Khfs-Df_Gf.gdsiuty@hkkhkh890.mil;1.2.3@hkkhkh890.mobi;j@hkkhkh890.jobs;khfs-dfgf.gds.iutY@hkkhkh890.info;";  //make sure that these are not more than 15
            string[] recipients = validEmailAddresses.Split(new string[] { ";" }, StringSplitOptions.RemoveEmptyEntries);

            if (recipients.Length > 15)
                Log.WriteLine("Number of recipients should not be more than 15 to be able to test all the valid email addresses.");

            SMTPListenerWrapper listener = NotificationTestCommon.StartListening(recipients.Length);

            string gamertag = Config.Environment.UserSettings[0].Gamertag;
            this.NotificationsServiceProxy.Locale = LocalizationTestData.DEFAULT_LOCALE;
            ExpectedLocalizedEmailContent expectedLocalizedEmail = LocalizationTestData.GetExpectedLocalizedContentOnEmail(LocalizationTestData.DEFAULT_LANGUAGE, gamertag, "");
            string sessionId = Guid.NewGuid().ToString();
            common.SendInviteRequest(sessionId, false, validEmailAddresses);

            List<email> inviteEmails = NotificationTestCommon.GetMailsAndStopListening(listener, recipients.Length);
            Assert.AreEqual(recipients.Length, inviteEmails.Count, "Error: email was not sent to some valid recipients");

            for (int i = 0; i < inviteEmails.Count; i++)
            {
                NotificationTestCommon.ValidateEmail(inviteEmails[i].Subject, inviteEmails[i].Body, expectedLocalizedEmail, LocalizationTestData.DEFAULT_LOCALE, gamertag, false, sessionId);
                Assert.AreEqual(recipients[i], inviteEmails[i].To, "Email sent to incorrect recipient.");
                Log.WriteLine("Verified email for recipient " + i + " which is " + inviteEmails[i].To);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify that emails are not sent if the email address is not valid email address format.")]
        [TestProperty("Type", "Feature")]
        public void N_SendInvite_MalformedEmailAddress()
        {
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            Assert.AreEqual("false", ConfigurationManager.AppSettings["UseFakeClient"], "For this test, UseFakeClient should be set to false in app.config file.");
            //to make this test pass you have to first manually go to LIVEN_NPDB (db) - > t_setting_overrides (table), change the value of lest_NotificationSMTPProvider_HostName to the name of the machine you are running this test on. 

            SMTPListenerWrapper listener = NotificationTestCommon.StartListening(5);

            string sessionId = Guid.NewGuid().ToString();
            string invalidEmailAddresses = "invalidemail.com;invalid@;.1234957457@microsoft.com;2737496836.@valid.org;.ghfkhg@hkkhkh890.gov;.....@hkkhkh890.mobi;%^&*@#$@hkkhkh890.jobs;@@hkkhkh890.museum;";
            common.SendInviteRequest(sessionId, true, invalidEmailAddresses);

            List<email> inviteEmails = NotificationTestCommon.GetMailsAndStopListening(listener, 5);
            Assert.IsNotNull(inviteEmails, "Error: email should not be null.");
            Assert.AreEqual(0, inviteEmails.Count, "Error: Not Expecting email sending attempts.");
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("send invite to some valid and some invalid email addresses and verify that valid recipients will get email and notification.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_InviteEmail_MixedRecipients()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 3, "We need at least three users for this test");
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            Assert.AreEqual("false", ConfigurationManager.AppSettings["UseFakeClient"], "For this test, UseFakeClient should be set to false in app.config file.");

            //to make this test pass you have to first manually go to LIVEN_NPDB (db) - > t_setting_overrides (table), change the value of lest_NotificationSMTPProvider_HostName to the name of the machine you are running this test on. 

            //For some reason -- "invalidemail@microcom" is considered a valied email address. Could be a bug in .Net since we are no more using regex.
            string[] invalidRecipients = { "invalidemail.com", "invalid@", "invalid" };
            string[] validRecipients = { Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[2].Membername, "validemail@microsoft.com" };
            string recipients = "";
            int j = 0;
            while (j < invalidRecipients.Length || j < validRecipients.Length)
            {
                if (j < invalidRecipients.Length)
                    recipients += (invalidRecipients[j] + ";");
                if (j < validRecipients.Length)
                    recipients += (validRecipients[j] + ";");
                j++;
            }

            SMTPListenerWrapper listener = NotificationTestCommon.StartListening(recipients.Length);

            string gamertag = Config.Environment.UserSettings[0].Gamertag;
            string[,] localeValue = LocalizationTestData.GOOD_LOCALE; //due to a bug in localization, only valid locales work
            int randomIndex = randomGenerator.Next(0, localeValue.Length / 2);
            ExpectedLocalizedEmailContent expectedLocalizedEmail = LocalizationTestData.GetExpectedLocalizedContentOnEmail(localeValue[randomIndex, 1], gamertag, "");
            this.NotificationsServiceProxy.Locale = localeValue[randomIndex, 0];

            string sessionId = Guid.NewGuid().ToString();
            common.SendInviteRequest(sessionId, false, recipients);

            common.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            common.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, Config.Environment.UserSettings[2].Membername, Config.Environment.UserSettings[2].Password);

            List<email> inviteEmails = NotificationTestCommon.GetMailsAndStopListening(listener);
            Assert.IsNotNull(inviteEmails, "Error: email should not be null.");
            Assert.AreEqual(validRecipients.Length, inviteEmails.Count, "Error: email was not sent to some valid recipients");

            for (int i = 0; i < inviteEmails.Count; i++)
            {
                NotificationTestCommon.ValidateEmail(inviteEmails[i].Subject, inviteEmails[i].Body, expectedLocalizedEmail, LocalizationTestData.DEFAULT_LOCALE, gamertag, false, sessionId);
                Assert.AreEqual(validRecipients[i], inviteEmails[i].To, "Email sent to incorrect recipient."); // used validRecipients[i].Substring(0,validRecipients[i].Length-1 to take out the semicolon.
                Log.WriteLine("Verified email for recipient " + i + " which is " + inviteEmails[i].To);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("send invite to 16 users and verify that only 15 emails will be sent. This also verifies the notification count and email localization.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_InviteEmail_To16Recipients()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 3, "We need at least three users for this test");
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            Assert.AreEqual("false", ConfigurationManager.AppSettings["UseFakeClient"], "For this test, UseFakeClient should be set to false in app.config file.");

            //to make this test pass you have to first manually go to LIVEN_NPDB (db) - > t_setting_overrides (table), change the value of lest_NotificationSMTPProvider_HostName to the name of the machine you are running this test on. 
            SMTPListenerWrapper listener = NotificationTestCommon.StartListening(16);

            string gamertag = Config.Environment.UserSettings[0].Gamertag;
            this.NotificationsServiceProxy.Locale = LocalizationTestData.DEFAULT_LOCALE;
            ExpectedLocalizedEmailContent expectedLocalizedEmail = LocalizationTestData.GetExpectedLocalizedContentOnEmail(LocalizationTestData.DEFAULT_LANGUAGE, gamertag, "");

            string sessionId = SendInviteToDuplicateUsers(true, 15, true);
            for (int j = 1; j < (Config.Environment.UserSettings.Count - 1); j++)
            {
                common.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, Config.Environment.UserSettings[j].Membername, Config.Environment.UserSettings[j].Password);
            }
            common.VerifyNoNotifications(sessionId, Config.Environment.UserSettings[Config.Environment.UserSettings.Count - 1].Membername, Config.Environment.UserSettings[Config.Environment.UserSettings.Count - 1].Password, Notification.NotificationType.Invitation.ToString());
            List<email> inviteEmails = NotificationTestCommon.GetMailsAndStopListening(listener, 16);
            Assert.IsNotNull(inviteEmails, "Error: email should not be null.");
            Assert.AreEqual(15, inviteEmails.Count, "Error: Wrong number of emails.");

            foreach (email e in inviteEmails)
            {
                NotificationTestCommon.ValidateEmail(e.Subject, e.Body, expectedLocalizedEmail, LocalizationTestData.DEFAULT_LOCALE, gamertag, sessionId);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send invitation  and Verify Notification was created and email sent was localized and Display name is not shown on the email.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_XBLPrivacy_ShowProfileInfo_Deny()
        {
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box.");
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 8, "We need at least eight users for this test");
            Assert.AreEqual("false", ConfigurationManager.AppSettings["UseFakeClient"], "For this test, UseFakeClient should be set to false in app.config file.");
            //to make this test pass you have to first manually go to LIVEN_NPDB (db) - > t_setting_overrides (table), change the value of lest_NotificationSMTPProvider_HostName to the name of the machine you are running this test on. 

            SMTPListenerWrapper listener = NotificationTestCommon.StartListening();

            string gamertag = Config.Environment.UserSettings[7].Gamertag;
            this.NotificationsServiceProxy.Locale = LocalizationTestData.DEFAULT_LOCALE;
            ExpectedLocalizedEmailContent expectedLocalizedEmail = LocalizationTestData.GetExpectedLocalizedContentOnEmail(LocalizationTestData.DEFAULT_LANGUAGE, gamertag, "");
            string sessionId = common.SendInviteRequest(Guid.NewGuid().ToString(), false, Config.Environment.UserSettings[0].Membername + ";", 7);

            Thread.Sleep(10 * notificationSleepTime);
            Notification inviteNotification = GetNotification(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation.ToString(), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            TestAreaBase.ValidateNotificationContent(inviteNotification, "Game Invite", Config.Environment.UserSettings[7].Gamertag, null, "SendInvite test data");

            email inviteEmail = NotificationTestCommon.GetMailAndStopListening(listener);
            NotificationTestCommon.ValidateEmail(inviteEmail.Subject, inviteEmail.Body, expectedLocalizedEmail, LocalizationTestData.DEFAULT_LOCALE, gamertag, false, sessionId);
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Send invitation  and Verify Notification was created and email sent was localized and Display name is not shown on the email.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_XBLPrivacy_ShowProfileInfo_FriendsOnly()
        {
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box.");
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 7, "We need at least seven users for this test");
            Assert.AreEqual("false", ConfigurationManager.AppSettings["UseFakeClient"], "For this test, UseFakeClient should be set to false in app.config file.");
            //to make this test pass you have to first manually go to LIVEN_NPDB (db) - > t_setting_overrides (table), change the value of lest_NotificationSMTPProvider_HostName to the name of the machine you are running this test on. 

            SMTPListenerWrapper listener = NotificationTestCommon.StartListening();

            string gamertag = Config.Environment.UserSettings[6].Gamertag;
            this.NotificationsServiceProxy.Locale = LocalizationTestData.DEFAULT_LOCALE;
            ExpectedLocalizedEmailContent expectedLocalizedEmail = LocalizationTestData.GetExpectedLocalizedContentOnEmail(LocalizationTestData.DEFAULT_LANGUAGE, gamertag, "");

            string sessionId = common.SendInviteRequest(Guid.NewGuid().ToString(), true, Config.Environment.UserSettings[0].Membername + ";", 6);
            Thread.Sleep(10 * notificationSleepTime);
            Notification inviteNotification = GetNotification(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation.ToString(), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            TestAreaBase.ValidateNotificationContent(inviteNotification, "Game Invite", Config.Environment.UserSettings[6].Gamertag, null, "SendInvite test data");

            email inviteEmail = NotificationTestCommon.GetMailAndStopListening(listener);
            NotificationTestCommon.ValidateEmail(inviteEmail.Subject, inviteEmail.Body, expectedLocalizedEmail, LocalizationTestData.DEFAULT_LOCALE, gamertag, sessionId);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send invitation  and Verify Notification was created and email sent was localized and Display name is in  parenthesis on the invite email.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_XBLPrivacy_ShowProfileInfo_Allow()
        {
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box.");
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 6, "We need at least six users for this test");
            Assert.AreEqual("false", ConfigurationManager.AppSettings["UseFakeClient"], "For this test, UseFakeClient should be set to false in app.config file.");
            //to make this test pass you have to first manually go to LIVEN_NPDB (db) - > t_setting_overrides (table), change the value of lest_NotificationSMTPProvider_HostName to the name of the machine you are running this test on. 

            SMTPListenerWrapper listener = NotificationTestCommon.StartListening();

            string gamertag = Config.Environment.UserSettings[5].Gamertag;
            this.NotificationsServiceProxy.Locale = LocalizationTestData.DEFAULT_LOCALE;
            ExpectedLocalizedEmailContent expectedLocalizedEmail = LocalizationTestData.GetExpectedLocalizedContentOnEmail(LocalizationTestData.DEFAULT_LANGUAGE, gamertag, " (mpdev6disname)");

            string sessionId = common.SendInviteRequest(Guid.NewGuid().ToString(), true, Config.Environment.UserSettings[0].Membername + ";", 5);

            Thread.Sleep(10 * notificationSleepTime);
            Notification inviteNotification = GetNotification(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation.ToString(), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            TestAreaBase.ValidateNotificationContent(inviteNotification, "Game Invite", Config.Environment.UserSettings[5].Gamertag, "mpdev6disname", "SendInvite test data");

            email inviteEmail = NotificationTestCommon.GetMailAndStopListening(listener);
            NotificationTestCommon.ValidateEmail(inviteEmail.Subject, inviteEmail.Body, expectedLocalizedEmail, LocalizationTestData.DEFAULT_LOCALE, gamertag, sessionId);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("verify that sending an invite with does not change the sender's last update time. But changes the recipients last update time. ")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_Etag()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");

            common.CheckNotificationCount(Constants.TESTGAMEID.ToString(), string.Empty, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            common.CheckNotificationCount(Constants.TESTGAMEID.ToString(), string.Empty, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                string.Empty,
                false,
                Config.Environment.UserSettings[0].Membername,
                Config.Environment.UserSettings[0].Password,
                null);
            Assert.IsNotNull(nList);
            Assert.AreEqual<int>(0, nList.Count, "Unexpected number of Notifications.");
            string etag0 = this.NotificationsServiceProxy.EtagInResponse;

            nList = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                string.Empty,
                false,
                Config.Environment.UserSettings[1].Membername,
                Config.Environment.UserSettings[1].Password,
                null);
            Assert.IsNotNull(nList);
            Assert.AreEqual<int>(0, nList.Count, "Unexpected number of Notifications.");
            string etag1 = this.NotificationsServiceProxy.EtagInResponse;

            string sessionId = Guid.NewGuid().ToString();
            string recipient = Config.Environment.UserSettings[1].Membername + ";";
            common.SendInviteRequest(sessionId, false, recipient);

            Thread.Sleep(10 * notificationSleepTime); //give enough time for the back end to process the invite request.
            nList = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                string.Empty,
                false,
                Config.Environment.UserSettings[1].Membername,
                Config.Environment.UserSettings[1].Password,
                etag1);
            Assert.IsNotNull(nList);
            Assert.AreEqual<int>(1, nList.Count, "Unexpected number of Notifications.");

            try
            {
                List<Notification> nList2 = this.NotificationsServiceProxy.GetNotifications(
                    Constants.TESTGAMEID.ToString(),
                    string.Empty,
                    0,
                    Constants.IGNORE_lAST_ID,
                    100,
                    string.Empty,
                    false,
                    Config.Environment.UserSettings[0].Membername,
                    Config.Environment.UserSettings[0].Password,
                    etag0);
                Assert.Fail("Expected a 304.");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotModified, e.Response.Status);
            }
        }


        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send invitation for four users and verify Notification was created for all of them.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_ToFourUsers()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 5, "We need at least five users for this test");
            string sessionId = common.SendInviteRequest(false, 4);
            for (int i = 1; i < 5; i++)
            {
                common.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, Config.Environment.UserSettings[i].Membername, Config.Environment.UserSettings[i].Password);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("invite recipient limit is 15. Send invite to 15 users and verify that invite notification is created for all users.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_To15Users()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");
            string sessionId = SendInviteToDuplicateUsers(false, 15, false);
            for (int i = 1; i < Config.Environment.UserSettings.Count; i++)
            {
                common.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, Config.Environment.UserSettings[i].Membername, Config.Environment.UserSettings[i].Password);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send invite to 16 users and verify that the invite has been processed to the first 15 but the 16th one is ignored.")]
        [TestProperty("Type", "Feature")]
        public void N_SendInvite_To16Users()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 3, "We need at least three users for this test");
            string sessionId = SendInviteToDuplicateUsers(false, 15, true);
            for (int i = 1; i < (Config.Environment.UserSettings.Count - 1); i++)
            {
                common.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, Config.Environment.UserSettings[i].Membername, Config.Environment.UserSettings[i].Password);
            }
            common.VerifyNoNotifications(sessionId, Config.Environment.UserSettings[Config.Environment.UserSettings.Count - 1].Membername, Config.Environment.UserSettings[Config.Environment.UserSettings.Count - 1].Password, Notification.NotificationType.Invitation.ToString());
        }

        [TestMethod, Owner("lewbamp"), Priority(2)]
        [Description("SendInvite with an invalid gameId.")]
        [TestProperty("Type", "Feature")]
        public void P_GMS_SendInvite_BadGameId()
        {
            try
            {
                this.NotificationsServiceProxy.SendInvite(
                    new InviteRequest()
                    {
                        GameId = 0,
                        Recipients = "recipients",
                        Data = "Bad Game ID",
                        SessionId = new Guid().ToString()
                    });
            }
            catch (WebException e)
            {
                Assert.IsTrue(e.Status == WebExceptionStatus.ProtocolError);
                Assert.AreEqual<HttpStatusCode>(((HttpWebResponse)e.Response).StatusCode, HttpStatusCode.NotAcceptable);
                Assert.AreEqual(((HttpWebResponse)e.Response).StatusDescription, "80006 Too many invites sent in a hour. ");
            }

        }

        [TestMethod, Owner("lewbamp"), Priority(2)]
        [Description("SendInvite with a bad ticket.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_BadTicket()
        {
            Dictionary<string, string> headers = new Dictionary<string, string>();
            headers.Add("Content-Type", "application/xml");
            headers.Add("X-Locale", "en-US");
            headers.Add("X-Authorization", "XBL1.0 x=" + "JUNK");

            try
            {
                this.NotificationsServiceProxy.SendInvite(
                    new InviteRequest()
                    {
                        GameId = Constants.TESTGAMEID,
                        Recipients = "recipients",
                        Data = "BLAH",
                        SessionId = new Guid().ToString()
                    },
                    headers);
            }
            catch (WebException e)
            {

                Assert.IsTrue(e.Status == WebExceptionStatus.ProtocolError);
                Assert.AreEqual<HttpStatusCode>(((HttpWebResponse)e.Response).StatusCode, HttpStatusCode.Forbidden);
                //todo(michperr): Finish this when we decide how we're handling this error.
            }
            //this.NotificationsServiceProxy.GetNotifications(
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify FR notification will not be created by send invite even if FR is set to true.")]
        [TestProperty("Type", "Feature")]
        public void N_SendInvite_GetNotifications_NoFR()
        {

            Assert.IsTrue(Config.Environment.UserSettings.Count >= 5, "We need five users for this test");

            NotificationTestCommon.testHooksClient.SetupNotFriendsAndNoFR(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)));
            NotificationTestCommon.VerifyNotFriends(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)), "Error: Setup failed not to make friends");
            NotificationTestCommon.VerifyNoFR(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)), "Error: Setup failed to delete pre existing Friend Requests");
            common.CheckNotificationCountFR(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            string sessionId = common.SendInviteRequest(true, 1);

            common.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            Thread.Sleep(Constants.XBLFRPROCESSTIMEINSEC * 1000); // give time to make sure that no FR gets created on xbl
            Assert.IsFalse(NotificationTestCommon.testHooksClient.HasFR(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password))), "Error: Friend request is posted on XBL");
            common.VerifyNoFRNotification(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify Expiration Time is correct in invite notifications.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_InviteNContent_ExpirationTime()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");
            string sessionId = common.SendInviteRequest(false, 1);
            common.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            Notification inviteNtfn = GetNotification(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation.ToString(), Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            Assert.AreEqual(@"12/31/9999 11:59:59 PM", inviteNtfn.ExpirationTime.ToString(), "Error: Incorrect Expiration Time in invite notification");
            //TODO: Update this after bug(3930) is fixed
            //Assert.IsTrue(((DateTime.UtcNow >= (inviteNtfn.ExpirationTime.AddMonths(-3))) &&  (DateTime.UtcNow.AddMinutes(-2) <= (inviteNtfn.ExpirationTime.AddMonths(-3)))), "Error: Incorrect Expiration Time in invite notification");
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify Sent Time is correct in invite notifications.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_InviteNContent_SentTime()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");
            DateTime now = DateTime.UtcNow;
            string sessionId = common.SendInviteRequest(false, 1);
            common.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            Notification inviteNtfn = GetNotification(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation.ToString(), Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            Assert.IsTrue(((now.AddSeconds(-1).CompareTo(inviteNtfn.SentTime) < 0) && (now.AddMinutes(2).CompareTo(inviteNtfn.SentTime) > 0)), "Error: Incorrect Sent Time " + inviteNtfn.SentTime.ToString() + " in invite notification as compared to time invite is sent  = " + now.ToString());
        }

        //related bug - 4156
        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify url is correct in invite notifications.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_InviteNContent_URL()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");
            string sessionId = common.SendInviteRequest(false, 1);
            common.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            InvitationNotification inviteNtfn = (InvitationNotification)GetNotification(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation.ToString(), Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            string envName = Config.Environment.Name;
            if (string.Compare(Config.Environment.Name, "TestNet", true) == 0)
                envName = "test";
            string url = String.Format(@"http://redirect.{0}.xboxlive.com/g/{1}/0/", envName, Constants.TESTGAMEID, sessionId);
            Assert.AreEqual(url, inviteNtfn.Url, true, "Error: Incorrect url in invite notification");
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify category is correct in invite notifications.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_InviteNContent()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");
            string sessionId = common.SendInviteRequest(false, 1);
            common.VerifyNotificationCreated(/*"1297287394"*/Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            Notification inviteNtfn = GetNotification(/*"1297287394"*/Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation.ToString(), Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            Assert.AreEqual<Notification.NotificationCategory>(Notification.NotificationCategory.ToDo, inviteNtfn.Category, "Error: Incorrect Notification category in invite notification.");
            Assert.AreEqual<Notification.NotificationStatus>(Notification.NotificationStatus.UnRead, inviteNtfn.Status, "Error: Incorrect Notification status in invite notification.");
            Assert.AreEqual<Notification.NotificationType>(Notification.NotificationType.Invitation, inviteNtfn.Type, "Error: Incorrect Notification type in invite notification.");
            Assert.AreEqual("Game Invite", inviteNtfn.TypeDisplayName, "Error: Incorrect type display name in invite notification.");
            Assert.AreEqual("SendInvite test data", inviteNtfn.DataBlob, "Error: Incorrect data blob content in invite notification.");
            Assert.AreEqual(true, inviteNtfn.IsUserVisible, "Error: invite notification should be user visible.");
            Assert.AreEqual(3, inviteNtfn.SupportedPlatform, "Error: Supported platform should is incorrect in Invite Notification.");
            //TODO: update this after bug(3928) is fixed.
            Assert.AreEqual("", inviteNtfn.UserId, "Error:UserId should be empty in Invite Notification");
            Assert.AreEqual((uint)0, inviteNtfn.Variant, "Error: Variant should be 0 in Invite Notification.");
            Assert.IsTrue(inviteNtfn.Images.Contains("32x32."), "Error: Invite Notification does not contain the correct image url");
            Assert.IsTrue(inviteNtfn.Images.Contains("64x64."), "Error: Invite Notification does not contain the correct image url");
            Assert.IsTrue(inviteNtfn.Images.Contains("99x99."), "Error: Invite Notification does not contain the correct image url");
            Assert.IsTrue(inviteNtfn.Images.Contains("173x173."), "Error: Invite Notification does not contain the correct image url");
            //TODO: update this after finding out why we needed this url.
            string envName = Config.Environment.Name;
            if (string.Compare(envName, "TestNet", true) == 0)
                envName = "test";
            string url = String.Format(@"http://redirect.{0}.xboxlive.com/g/{1}/0/", envName, Constants.TESTGAMEID);
            Assert.AreEqual(url, inviteNtfn.Url, true, "Error: Incorrect url in invite notification");

            //game Info
            Assert.AreEqual(Constants.TESTGAMEID, inviteNtfn.GameId, "Error: Incorrect game display name in invite notification");
            Assert.AreEqual("Backgammon", inviteNtfn.GameDisplayName, "Error: Incorrect game display name in invite notification");
            Assert.AreEqual(sessionId, inviteNtfn.SessionId, "Error: Incorrect session ID in invite notification");

            //sender Info
            UserInfo uinfo = new UserInfo();
            string from = HttpUtility.HtmlDecode(inviteNtfn.From);
            DataContractSerializer dcjs = new DataContractSerializer(typeof(UserInfo));
            UserInfo userInfo = (UserInfo)dcjs.ReadObject(XmlReader.Create(new StringReader(from)));
            Assert.AreEqual(Config.Environment.UserSettings[0].Gamertag, userInfo.GamerTag, "Error: GamerTag is incorrect in Invite Notification.");
            //TODO: ADD display name on the user account and verify display name as well

        }

        private string SendInviteToDuplicateUsers(bool friendRequest, int numRec, bool reserveLastUser)
        {
            string sessionId = Guid.NewGuid().ToString();
            string gameId = Constants.TESTGAMEID.ToString();
            string oldNotificationSession = sessionId;
            if (friendRequest)
            {
                oldNotificationSession = string.Empty; // if we are sending invitation with friend request = true, we need to check that we do not have prior FR notifications too. - Avoid filtering notifications by sessionID and gameID
                gameId = string.Empty;
            }
            StringBuilder recipients = new StringBuilder();
            int userCount = Config.Environment.UserSettings.Count;
            if (reserveLastUser)
                userCount = userCount - 1;
            int j = 0;
            for (int i = 1; i < userCount; i++)
            {
                common.CheckNotificationCount(gameId, oldNotificationSession, Config.Environment.UserSettings[i].Membername, Config.Environment.UserSettings[i].Password);
                recipients.Append(Config.Environment.UserSettings[i].Membername + ";");
                j++;
            }
            int k = 1;
            while (j < numRec)
            {
                recipients.Append(Config.Environment.UserSettings[k].Membername + ";");
                j++;
                k++;
                if (k == userCount)
                    k = 1;
            }
            if (reserveLastUser)
                recipients.Append(Config.Environment.UserSettings[Config.Environment.UserSettings.Count - 1].Membername + ";");
            return common.SendInviteRequest(sessionId, friendRequest, recipients.ToString());
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that recipient who blocked sender will not get invite notification from sender while others do.")]
        [TestProperty("Type", "Features")]
        public void N_SendInvite_SomeRecipientsBlockedSender()
        {
            //user3 blocks user4 and user4 will try to send invite to user3, user1 and user2 and only user1 and user2 get the invite.
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 5, "We need at least five users for this test");
            isUserBlockerTestRun = true;
            testHooksClient.AddUserToNeverList(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[3].Membername, Config.Environment.UserSettings[3].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[4].Membername, Config.Environment.UserSettings[4].Password)));
            NotificationTestCommon.VerifyUserIsInTargetsNeverList(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[4].Membername, Config.Environment.UserSettings[4].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[3].Membername, Config.Environment.UserSettings[3].Password)), "Setup failed: User is not in the never list");
            if (testHooksClient.IsUserInTargetsNeverList(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[4].Membername, Config.Environment.UserSettings[4].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password))))
            {
                testHooksClient.RemoveUserFromNeverList(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[4].Membername, Config.Environment.UserSettings[4].Password)));
                NotificationTestCommon.VerifyUserIsNotInTargetsNeverList(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[4].Membername, Config.Environment.UserSettings[4].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)), "Setup failed: User is not in the never list");
            }
            if (testHooksClient.IsUserInTargetsNeverList(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[4].Membername, Config.Environment.UserSettings[4].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[2].Membername, Config.Environment.UserSettings[2].Password))))
            {
                testHooksClient.RemoveUserFromNeverList(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[2].Membername, Config.Environment.UserSettings[2].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[4].Membername, Config.Environment.UserSettings[4].Password)));
                NotificationTestCommon.VerifyUserIsNotInTargetsNeverList(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[4].Membername, Config.Environment.UserSettings[4].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[2].Membername, Config.Environment.UserSettings[2].Password)), "Setup failed: User is not in the never list");
            }

            //verify that there are no pre-existing notifications
            common.CheckNotificationCount(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            common.CheckNotificationCount(Config.Environment.UserSettings[2].Membername, Config.Environment.UserSettings[2].Password);
            common.CheckNotificationCount(Config.Environment.UserSettings[3].Membername, Config.Environment.UserSettings[3].Password);

            string sessionId = Guid.NewGuid().ToString();
            common.SendInviteRequest(sessionId, true, Config.Environment.UserSettings[1].Membername + ";" + Config.Environment.UserSettings[3].Membername + ";" + Config.Environment.UserSettings[2].Membername + ";", 4);

            common.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            common.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, Config.Environment.UserSettings[2].Membername, Config.Environment.UserSettings[2].Password);
            Thread.Sleep(20000); // Notification internal should already have enough time by now since it has processed notification for user2 but, it is good to sleep for a few more seconds to be sure.
            common.VerifyNoNotifications(sessionId, Config.Environment.UserSettings[3].Membername, Config.Environment.UserSettings[3].Password, Notification.NotificationType.Invitation.ToString());
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that recipient who blocked sender will not get invite email from sender while others do.")]
        [TestProperty("Type", "Features")]
        public void N_SendInvite_InviteEmail_SomeRecipientsBlockedSender()
        {
            //user3 blocks user4 and user4 will try to send invite to user3 and user2 and only user2 gets the invite.
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 5, "We need at least five users for this test");
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            Assert.AreEqual("false", ConfigurationManager.AppSettings["UseFakeClient"], "For this test, UseFakeClient should be set to false in app.config file.");

            isUserBlockerTestRun = true;
            testHooksClient.AddUserToNeverList(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[3].Membername, Config.Environment.UserSettings[3].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[4].Membername, Config.Environment.UserSettings[4].Password)));
            NotificationTestCommon.VerifyUserIsInTargetsNeverList(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[4].Membername, Config.Environment.UserSettings[4].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[3].Membername, Config.Environment.UserSettings[3].Password)), "Setup failed: User is not in the never list");
            if (testHooksClient.IsUserInTargetsNeverList(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[4].Membername, Config.Environment.UserSettings[4].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password))))
            {
                testHooksClient.RemoveUserFromNeverList(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[4].Membername, Config.Environment.UserSettings[4].Password)));
                NotificationTestCommon.VerifyUserIsNotInTargetsNeverList(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[4].Membername, Config.Environment.UserSettings[4].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)), "Setup failed: User is not in the never list");
            }
            if (testHooksClient.IsUserInTargetsNeverList(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[4].Membername, Config.Environment.UserSettings[4].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[2].Membername, Config.Environment.UserSettings[2].Password))))
            {
                testHooksClient.RemoveUserFromNeverList(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[2].Membername, Config.Environment.UserSettings[2].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[4].Membername, Config.Environment.UserSettings[4].Password)));
                NotificationTestCommon.VerifyUserIsNotInTargetsNeverList(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[4].Membername, Config.Environment.UserSettings[4].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[2].Membername, Config.Environment.UserSettings[2].Password)), "Setup failed: User is not in the never list");
            }

            //verify that there are no pre-existing notifications
            common.CheckNotificationCount(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            common.CheckNotificationCount(Config.Environment.UserSettings[2].Membername, Config.Environment.UserSettings[2].Password);
            common.CheckNotificationCount(Config.Environment.UserSettings[3].Membername, Config.Environment.UserSettings[3].Password);

            SMTPListenerWrapper listener = NotificationTestCommon.StartListening(3);

            string gamertag = Config.Environment.UserSettings[4].Gamertag;
            this.NotificationsServiceProxy.Locale = LocalizationTestData.DEFAULT_LOCALE;
            ExpectedLocalizedEmailContent expectedLocalizedEmail = LocalizationTestData.GetExpectedLocalizedContentOnEmail(LocalizationTestData.DEFAULT_LANGUAGE, gamertag, "");

            string sessionId = Guid.NewGuid().ToString();
            common.SendInviteRequest(sessionId, true, Config.Environment.UserSettings[1].Membername + ";" + Config.Environment.UserSettings[3].Membername + ";" + Config.Environment.UserSettings[2].Membername + ";", 4);

            common.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            common.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, Config.Environment.UserSettings[2].Membername, Config.Environment.UserSettings[2].Password);
            Thread.Sleep(20000); // Notification internal should already have enough time by now since it has processed notification for user2 but, it is good to sleep for a few more seconds to be sure.
            common.VerifyNoNotifications(sessionId, Config.Environment.UserSettings[3].Membername, Config.Environment.UserSettings[3].Password, Notification.NotificationType.Invitation.ToString());

            List<email> inviteEmails = NotificationTestCommon.GetMailsAndStopListening(listener);
            Assert.IsNotNull(inviteEmails);
            Assert.AreEqual(2, inviteEmails.Count, "Expected one email.");
            Assert.AreEqual(Config.Environment.UserSettings[2].Membername, inviteEmails[1].To, "Email sent to incorrect recipient.");
            Assert.AreEqual(Config.Environment.UserSettings[1].Membername, inviteEmails[0].To, "Email sent to incorrect recipient.");
            NotificationTestCommon.ValidateEmail(inviteEmails[0].Subject, inviteEmails[0].Body, expectedLocalizedEmail, LocalizationTestData.DEFAULT_LOCALE, gamertag, sessionId);
            NotificationTestCommon.ValidateEmail(inviteEmails[1].Subject, inviteEmails[1].Body, expectedLocalizedEmail, LocalizationTestData.DEFAULT_LOCALE, gamertag, sessionId);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\Notifications\API\GetNotifications.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using CloudServices.Test.Common.Configuration;
using AsyncMultiplayer.NotificationService;
using MultiPlayer.Test.Data;
using System.Configuration;
using System.Xml;
using System.Runtime.Serialization;
using System.IO;
using System.Web;
using System.Threading;
using System.Net;
using CloudServices.Test.Common.Proxy;

namespace Multiplayer.Test.API
{
    /// <summary>
    /// Summary description for GetNotifications
    /// </summary>
    [TestClass]
    public class GetNotifications : TestAreaBase
    {
        private static NotificationTestCommon common; 
        private Random randomGenerator = new Random();

        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
            // Setting this to false to get logs out on TRX files
            Log.LogToFile = false;
        }

        //
        // This code runs before every test case -
        // For Notifications, this means ensuring at least a single notification is populated in the server and that all tests go to a new SessionID
        // This ensures the session gets properly cleaned up at the end of the test.
        //

        [TestInitialize()]
        public void MyTestInitialize()
        {
            common = new NotificationTestCommon(); 
            NotificationTestCommon.cleanupFR = false;
            MPTestHooksProxy.Timeout = int.Parse(ConfigurationManager.AppSettings["Timeout"]); //as some GetNotification tests change this value
            LockTest();
       }

        [TestCleanup]
        public void TestCleanup()
        {
            try
            {
                common.CleanupFRs();
                common.TestCleanup();
            }
            finally
            {
                UnlockTest();
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Verifies 1 notification is returned from the service.")]
        [TestProperty("Type", "BVTs")]
        public void BVT_GetNotifications_GetSingleNotification()
        {
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            string notificationId = NotificationTestCommon.testHooksClient.CreateDummyNotification();

            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                NotificationTestCommon.testHooksClient.TestSessionId.ToString(),
                0,
                Constants.IGNORE_lAST_ID,
                100,
                String.Empty,
                false,
                Config.Environment.UserSettings[0].Membername,
                Config.Environment.UserSettings[0].Password,
                null);

            Assert.IsNotNull(notifications);
            Assert.AreEqual<int>(1, notifications.Count, "ERROR: Unexpected Number of notifications.");
            common.VerifyNotification(notifications[0], notificationId);
        }


        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Verifies a client with a wrong If-None-Match header gets a 200 response back")]
        [TestProperty("Type", "BVTs")]
        public void BVT_GetNotifications_Etag_WrongEtag()
        {
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);;
            string notificationId = NotificationTestCommon.testHooksClient.CreateDummyNotification();
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                    Constants.TESTGAMEID.ToString(),
                    NotificationTestCommon.testHooksClient.TestSessionId.ToString(),
                    0,
                    Constants.IGNORE_lAST_ID,
                    100,
                    String.Empty,
                    false,
                    Config.Environment.UserSettings[0].Membername,
                    Config.Environment.UserSettings[0].Password,
                    null);
            string etag = this.NotificationsServiceProxy.EtagInResponse;

            notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                NotificationTestCommon.testHooksClient.TestSessionId.ToString(),
                0,
                Constants.IGNORE_lAST_ID,
                100,
                String.Empty,
                false,
                Config.Environment.UserSettings[0].Membername,
                Config.Environment.UserSettings[0].Password,
                "blah");
            Assert.AreEqual(etag, this.NotificationsServiceProxy.EtagInResponse, "Error: Wrong etag in response");
            Assert.IsNotNull(notifications);
            Assert.AreEqual<int>(notifications.Count, 1, "ERROR: Unexpected Number of notifications.");
            common.VerifyNotification(notifications[0], notificationId);
        }

        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Verifies a client with an expected etag in the If-None-Match header gets a 304 response back")]
        [TestProperty("Type", "BVTs")]
        public void BVT_GetNotifications_Etag_RightEtag()
        {
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);;
            string notificationId = NotificationTestCommon.testHooksClient.CreateDummyNotification();
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                    Constants.TESTGAMEID.ToString(),
                    NotificationTestCommon.testHooksClient.TestSessionId.ToString(),
                    0,
                    Constants.IGNORE_lAST_ID,
                    100,
                    String.Empty,
                    false,
                    Config.Environment.UserSettings[0].Membername,
                    Config.Environment.UserSettings[0].Password,
                    null);
            string etag = this.NotificationsServiceProxy.EtagInResponse;
            try
            {
                notifications = this.NotificationsServiceProxy.GetNotifications(
                    Constants.TESTGAMEID.ToString(),
                    NotificationTestCommon.testHooksClient.TestSessionId.ToString(),
                    0,
                    Constants.IGNORE_lAST_ID,
                    100,
                    String.Empty,
                    false,
                    Config.Environment.UserSettings[0].Membername,
                    Config.Environment.UserSettings[0].Password,
                    etag);
                Assert.Fail("Expected a 304 exception back");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotModified, e.Response.Status);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Verifies 5 notification is returned from the service.")]
        [TestProperty("Type", "BVTs")]
        public void BVT_GetNotifications_5()
        {
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);;
            List<string> nList = NotificationTestCommon.testHooksClient.CreateDummyNotification(10);

            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                0,
                string.Empty,
                5,
                String.Empty,
                false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);

            Assert.IsNotNull(notifications);
            Assert.AreEqual<int>(notifications.Count, 5, "ERROR: Unexpected Number of notifications.");

            //verify that we get them in descending order from the service
            for (int i = 0; i < 5; i++)
            {
                common.VerifyNotification(notifications[i], nList[i]);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verifies a client with a wrong If-None-Match header gets a 200 response back")]
        [TestProperty("Type", "Feature")]
        public void p_GetNotifications_Etag_WrongEtag_UserLastUpdateTime()
        {
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);;
            string notificationId = NotificationTestCommon.testHooksClient.CreateDummyNotification();
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                String.Empty,
                false,
                Config.Environment.UserSettings[0].Membername,
                Config.Environment.UserSettings[0].Password,
                null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual<int>(notifications.Count, 1, "ERROR: Unexpected Number of notifications.");
            common.VerifyNotification(notifications[0], notificationId);
            string etag = this.NotificationsServiceProxy.EtagInResponse;
            Thread.Sleep(2000);
            DateTime now = DateTime.UtcNow;
            NotificationTestCommon.testHooksClient.UpdateUserEntry(
                CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password),
                now,
                now,
                10);

            notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                String.Empty,
                false,
                Config.Environment.UserSettings[0].Membername,
                Config.Environment.UserSettings[0].Password,
                etag);
            Assert.AreNotEqual(etag, this.NotificationsServiceProxy.EtagInResponse, "wrong etag");
            Assert.IsNotNull(notifications);
            Assert.AreEqual<int>(notifications.Count, 1, "ERROR: Unexpected Number of notifications.");
            common.VerifyNotification(notifications[0], notificationId);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that get notification does not throw exception when there is no notification on Azure")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_WithoutFirstCreatingAny()
        {
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);;
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                0,
                string.Empty,
                Int32.MaxValue,
                String.Empty,
                false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual<int>(notifications.Count, 0, "ERROR: GetNotification should return zero notifications as there is no notification on azure");
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call GetNotification passing a game ID that does not exist")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_GameIdDoesNotExist()
        {
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);;
            //create a dummy notification that sets the game id to be TESTGAMEID
            string azureNotification = NotificationTestCommon.testHooksClient.CreateNotification();

            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                "8888",
                string.Empty,
                0,
                string.Empty,
                Int32.MaxValue,
                String.Empty,
                false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual<int>(notifications.Count, 0, "ERROR: GetNotification is not filtering notifications by game");
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call GetNotification with a session ID that does not exist")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_SessionIdDoesNotExist()
        {
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);;
            string sessionId = "GoodSessionId";
            string azureNotification = NotificationTestCommon.testHooksClient.CreateNotification(
                    CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password),
                    Constants.TESTGAMEID,
                    sessionId);

            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                "BadSessionId",
                0,
                string.Empty,
                Int32.MaxValue,
                String.Empty,
                false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual<int>(notifications.Count, 0, "ERROR: GetNotification does not filter notifications by session ID");
        }
        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Pass valid locale and verify localization")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_GoodLocale()
        {
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);;
            string azureNotificationId = NotificationTestCommon.testHooksClient.CreateNotification();
            string[,] localeValue = LocalizationTestData.GOOD_LOCALE;
            int randomIndex = randomGenerator.Next(localeValue.Length / 2);
            this.NotificationsServiceProxy.Locale = localeValue[randomIndex, 0];

            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                0,
                string.Empty,
                Int32.MaxValue,
                String.Empty,
                false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);
            common.ValidateLocalization(notifications, azureNotificationId, localeValue[randomIndex, 0], localeValue[randomIndex, 1]);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify localization to English")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_FallbackToDefaultLocale()
        {
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);;
            string azureNotificationId = NotificationTestCommon.testHooksClient.CreateNotification();

            string[] locale = LocalizationTestData.UNSUPPORTED_lOCALE;
            int randomIndex = randomGenerator.Next(locale.Length);

            this.NotificationsServiceProxy.Locale = locale[randomIndex];
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                0,
                string.Empty,
                Int32.MaxValue,
                String.Empty,
                false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual<int>(notifications.Count, 1, ("ERROR: GetNotification failed to fetch notifications for " + locale[randomIndex] + "locale."));
            common.VerifyNotification(notifications[0], azureNotificationId);

            this.NotificationsServiceProxy.Locale = "en-US";
            List<Notification> engNotifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                0,
                string.Empty,
                Int32.MaxValue,
                String.Empty,
                false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);
            Assert.IsNotNull(engNotifications);
            Assert.AreEqual<int>(engNotifications.Count, 1, ("ERROR: GetNotification failed to fetch the correct number of notifications after locale is set to en-US"));
            common.VerifyNotification(engNotifications[0], azureNotificationId);
            Assert.AreEqual(engNotifications[0].TypeDisplayName, notifications[0].TypeDisplayName, "ERROR :Notification is not localized to English");
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Pass mixed locale and verify fallback localization")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_MixedLocale()
        {
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);;
            string azureNotificationId = NotificationTestCommon.testHooksClient.CreateNotification();

            string[,] localeValue = LocalizationTestData.MIXED_LOCALE;
            int randomIndex = randomGenerator.Next(localeValue.Length / 2);
            this.NotificationsServiceProxy.Locale = localeValue[randomIndex, 0];

            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                0,
                string.Empty,
                Int32.MaxValue,
                String.Empty,
                false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);
            common.ValidateLocalization(notifications, azureNotificationId, localeValue[randomIndex, 0], localeValue[randomIndex, 1]);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify localization with right etag")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_Locale_RightEtag()
        {
            string azureNotificationId = NotificationTestCommon.testHooksClient.CreateNotification();

            string[,] localeValue = LocalizationTestData.GOOD_LOCALE;
            int randomIndex = randomGenerator.Next(localeValue.Length / 2);
            this.NotificationsServiceProxy.Locale = localeValue[randomIndex, 0];
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                NotificationTestCommon.testHooksClient.TestSessionId.ToString(),
                0,
                Constants.IGNORE_lAST_ID,
                100,
                String.Empty,
                false,
                Config.Environment.UserSettings[0].Membername,
                Config.Environment.UserSettings[0].Password,
                null);
            string etag = this.NotificationsServiceProxy.EtagInResponse;

            try
            {
                notifications = this.NotificationsServiceProxy.GetNotifications(
                    Constants.TESTGAMEID.ToString(),
                    NotificationTestCommon.testHooksClient.TestSessionId.ToString(),
                    0,
                    Constants.IGNORE_lAST_ID,
                    100,
                    String.Empty,
                    false,
                    Config.Environment.UserSettings[0].Membername,
                    Config.Environment.UserSettings[0].Password,
                    etag);
                Assert.Fail("Expected a 304 exception back");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotModified, e.Response.Status, "Error: Wrong error code.");
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify localization with wrong etag")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_Locale_WrongEtag()
        {
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);;
            string azureNotificationId = NotificationTestCommon.testHooksClient.CreateNotification();

            string[,] localeValue = LocalizationTestData.GOOD_LOCALE;
            int randomIndex = randomGenerator.Next(localeValue.Length / 2);
            this.NotificationsServiceProxy.Locale = localeValue[randomIndex, 0];
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                NotificationTestCommon.testHooksClient.TestSessionId.ToString(),
                0,
                Constants.IGNORE_lAST_ID,
                100,
                String.Empty,
                false,
                Config.Environment.UserSettings[0].Membername,
                Config.Environment.UserSettings[0].Password,
                null);
            string etag = this.NotificationsServiceProxy.EtagInResponse;

            notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                String.Empty,
                false,
                Config.Environment.UserSettings[0].Membername,
                Config.Environment.UserSettings[0].Password,
                etag);
            Assert.AreNotEqual(etag, this.NotificationsServiceProxy.EtagInResponse, "Error: Wrong etag.");
            common.ValidateLocalization(notifications, azureNotificationId, localeValue[randomIndex, 0], localeValue[randomIndex, 1]);
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify unsupported locale will be localized to English with right etag")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_UnsupportedLocale_RightEtag()
        {
            string azureNotificationId = NotificationTestCommon.testHooksClient.CreateNotification();

            string[] locale = LocalizationTestData.UNSUPPORTED_lOCALE;
            int randomIndex = randomGenerator.Next(locale.Length);
            this.NotificationsServiceProxy.Locale = locale[randomIndex];

            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                NotificationTestCommon.testHooksClient.TestSessionId.ToString(),
                0,
                Constants.IGNORE_lAST_ID,
                100,
                String.Empty,
                false,
                Config.Environment.UserSettings[0].Membername,
                Config.Environment.UserSettings[0].Password,
                null);
            string etag = this.NotificationsServiceProxy.EtagInResponse;
            try
            {
                notifications = this.NotificationsServiceProxy.GetNotifications(
                    Constants.TESTGAMEID.ToString(),
                    NotificationTestCommon.testHooksClient.TestSessionId.ToString(),
                    0,
                    Constants.IGNORE_lAST_ID,
                    100,
                    String.Empty,
                    false,
                    Config.Environment.UserSettings[0].Membername,
                    Config.Environment.UserSettings[0].Password,
                    etag);
                Assert.Fail("Expected a 304 exception back");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotModified, e.Response.Status, "Error: Wrong error code.");
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify unsupported locale will be localized to English with wrong etag")]
        [TestProperty("Type", "BVTs")]
        public void P_GetNotifications_UnsupportedLocale_WrongEtag()
        {
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);;
            string azureNotificationId = NotificationTestCommon.testHooksClient.CreateDummyNotification();

            string[] locale = LocalizationTestData.UNSUPPORTED_lOCALE;
            int randomIndex = randomGenerator.Next(locale.Length);
            this.NotificationsServiceProxy.Locale = locale[randomIndex];

            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                String.Empty,
                false,
                Config.Environment.UserSettings[0].Membername,
                Config.Environment.UserSettings[0].Password,
                null);
            string etag = this.NotificationsServiceProxy.EtagInResponse;
            notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                String.Empty,
                false,
                Config.Environment.UserSettings[0].Membername,
                Config.Environment.UserSettings[0].Password,
                "blah");

            Assert.AreEqual(etag, this.NotificationsServiceProxy.EtagInResponse, "Error: Wrong etag.");
            Assert.IsNotNull(notifications);
            Assert.AreEqual<int>(1, notifications.Count, ("ERROR: GetNotification failed to fetch notifications for " + locale[randomIndex] + "locale with etag specified."));
            common.VerifyNotification(notifications[0], azureNotificationId);

            this.NotificationsServiceProxy.Locale = "en-US";
            List<Notification> engNotifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                0,
                string.Empty,
                Int32.MaxValue,
                String.Empty,
                false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);
            Assert.IsNotNull(engNotifications);
            Assert.AreEqual<int>(engNotifications.Count, 1, ("ERROR: GetNotification failed to fetch the correct number of notifications after locale is set to en-US"));
            common.VerifyNotification(engNotifications[0], azureNotificationId);
            Assert.AreEqual(engNotifications[0].TypeDisplayName, notifications[0].TypeDisplayName, "ERROR :Notification is not localized to English for unsupported locale with etag specified");

        }
        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that GetNotifications puts a request on queue when there is a FR on XBL for the user, then the request gets processed and a FR notification is created on azure")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_FRNotification()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 3, "We need at least three users for this test");

            NotificationTestCommon.cleanupFR = true;
            NotificationTestCommon.testHooksClient.SetupNotFriendsAndNoFR(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[2].Membername, Config.Environment.UserSettings[2].Password)));
            NotificationTestCommon.VerifyNotFriends(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[2].Membername, Config.Environment.UserSettings[2].Password)), "Error: Setup failed not to make friends");
            NotificationTestCommon.VerifyNoFR(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[2].Membername, Config.Environment.UserSettings[2].Password)), "Error: Setup failed to delete pre existing Friend Requests");

            common.CheckNotificationCountFR(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);

            NotificationTestCommon.testHooksClient.AddFR(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[2].Membername, Config.Environment.UserSettings[2].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)));

            NotificationTestCommon.VerifyFriendRequest(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[2].Membername, Config.Environment.UserSettings[2].Password)), "did not find a friend request on XBL");
            common.VerifyNotificationCreated(string.Empty, string.Empty, Notification.NotificationType.FriendRequest, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("GetNotifications count less than, page by page.")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_Count_LessThan()
        {
            int pageSize = 5;
            int numPages = 4;

            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);;

            List<string> notificationList = new List<string>();

            //todo(michperr): Move this into testhooks
            for (int i = 0; i < (pageSize * numPages); i++)
            {
                //insert the items in reverse order because that's how the server will return them
                notificationList.Insert(0,
                    NotificationTestCommon.testHooksClient.CreateNotification(
                        CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password),
                        Constants.TESTGAMEID,
                        Guid.NewGuid().ToString()));
            }

            string lastId = string.Empty;
            int notificationIndex = 0;
            for (int i = 0; i < numPages; i++)
            {
                List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(
                    Constants.TESTGAMEID.ToString(),
                    string.Empty,
                    0,
                    lastId,
                    pageSize,
                    string.Empty,
                    false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);

                Assert.AreEqual<int>(pageSize, nList.Count, "Unexpected Number of results.");
                lastId = nList[nList.Count - 1].Id;

                for (int x = 0; x < nList.Count; x++)
                {
                    //todo(michperr): replaceNotificationIndex with page# + x
                    Assert.AreEqual(nList[x].Id, notificationList[notificationIndex++]);
                }

            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("GetNotifications with Count greater than the total in the list.")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_Count_GreaterThan()
        {
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);;

            //insert the items in reverse order because that's how the server will return them
            List<string> notificationList = NotificationTestCommon.testHooksClient.CreateDummyNotification(3);

            List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                0,
                string.Empty,
                5,
                string.Empty,
                false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);

            Assert.AreEqual<int>(3, nList.Count, "Unexpected Number of results.");

            int notificationIndex = 0;
            for (int x = 0; x < nList.Count; x++)
            {
                Assert.AreEqual(nList[x].Id, notificationList[notificationIndex++]);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("GetNotifications with lastId and Count set.  Verify count can go off the edge of the list.")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_Count_GreaterThan_Page2()
        {
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);;

            //insert the items in reverse order because that's how the server will return them
            List<string> notificationList = NotificationTestCommon.testHooksClient.CreateDummyNotification(10);

            //skip the first 8 notifications.  Only 2 should come back here.
            List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                0,
                notificationList[7],
                5,
                string.Empty,
                false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);

            Assert.AreEqual<int>(2, nList.Count, "Unexpected Number of results.");

            int notificationIndex = 8;
            for (int x = 0; x < nList.Count; x++)
            {
                Assert.AreEqual(nList[x].Id, notificationList[notificationIndex++]);
            }
        }
        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("GetNotifications with lastId and Count set.  Verify count can go off the edge of the list.")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_Count_GreaterThan_Page2_Etag()
        {
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);;

            List<string> notificationList = NotificationTestCommon.testHooksClient.CreateDummyNotification(10);

            List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                0,
                Constants.IGNORE_lAST_ID,
                5,
                string.Empty,
                false, 
                Config.Environment.UserSettings[0].Membername, 
                Config.Environment.UserSettings[0].Password, 
                null);
            Assert.IsNotNull(nList);
            Assert.AreEqual<int>(5, nList.Count, "Unexpected Number of results.");
            int notificationIndex = 0;
            for (int x = 0; x < nList.Count; x++)
            {
                Assert.AreEqual(nList[x].Id, notificationList[notificationIndex++]);
            }
            // find the etag in the response and use it in the next call
            string etag = this.NotificationsServiceProxy.EtagInResponse;
            List<Notification> nList2 = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                0,
                notificationList[4],
                5,
                string.Empty,
                false,
                Config.Environment.UserSettings[0].Membername, 
                Config.Environment.UserSettings[0].Password,
                etag);
            Assert.IsNotNull(nList2);
            Assert.AreEqual<int>(5, nList2.Count, "Unexpected Number of results.");
            notificationIndex = 5;
            for (int x = 0; x < nList2.Count; x++)
            {
                Assert.AreEqual(nList2[x].Id, notificationList[notificationIndex++]);
            }
        }

        //todo(michperr): Figure out if this is a real case
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify Display Name and GamerTag")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_VerifyDisplayNameGamerTag()
        {
            Notification.NotificationType notificationType = Notification.NotificationType.YourTurn;

            string notificationId = NotificationTestCommon.testHooksClient.CreateNotification(
                    notificationType,
                    CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password),
                    Constants.TESTGAMEID,
                    NotificationTestCommon.testHooksClient.TestSessionId);

            List<Notification> notificationsList = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId.ToString(), 0, String.Empty, 100, String.Empty, false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);

            Assert.IsNotNull(notificationsList);
            Assert.IsTrue(notificationsList.Count > 0, "ERROR: Notification list was empty.");

            // Validate that we get the right type of notification
            Notification match = notificationsList.Find(n => n.Id == notificationId);
            Assert.AreEqual(
            match.Type, (AsyncMultiplayer.NotificationService.Notification.NotificationType)notificationType, "Notification type created does not match.");

            UserInfo uinfo = new UserInfo();

            string from = HttpUtility.HtmlDecode(match.From);

            DataContractSerializer dcjs = new DataContractSerializer(typeof(UserInfo));

            UserInfo userInfo = (UserInfo)dcjs.ReadObject(XmlReader.Create(new StringReader(from)));

            Assert.AreEqual("MPTestHook", userInfo.DisplayName, "DisplayName is NOT as expected");
            Assert.AreEqual("MpTestHook", userInfo.GamerTag, "GamerTag is NOT as expected");
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Bug# 3220 - FR Notification gets created again and again if the user deletes it with out accepting or ignoring it. This also verifies that the user can see his FR notifications even if has no other type of notifications(Bug# 2286).")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_DeleteNotification_FRNotification()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 4, "We need at least four users for this test");
            common.CheckNotificationCountFR(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            NotificationTestCommon.cleanupFR = true;
            NotificationTestCommon.testHooksClient.AddFR(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[3].Membername, Config.Environment.UserSettings[3].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)));
            NotificationTestCommon.VerifyFriendRequest(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[3].Membername, Config.Environment.UserSettings[3].Password)), "There is no friend request created for the user");
            common.VerifyNotificationCreated(string.Empty, string.Empty, Notification.NotificationType.FriendRequest, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);

            List<Notification> notificationsList = this.NotificationsServiceProxy.GetNotifications(string.Empty, string.Empty, 0, String.Empty, Int32.MaxValue, String.Empty, false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);
            Assert.IsNotNull(notificationsList);
            foreach (Notification n in notificationsList)
            {
                this.NotificationsServiceProxy.DeleteNotificationQuery(n.Id, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            }
            List<Notification> notificationsList2 = this.NotificationsServiceProxy.GetNotifications(string.Empty, string.Empty, 0, String.Empty, Int32.MaxValue, String.Empty, false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);
            Assert.IsNotNull(notificationsList2);
            Assert.AreEqual(0, notificationsList2.Count, "ERROR: Notification list was not empty.");
            string etag = this.NotificationsServiceProxy.EtagInResponse;
            //Sleep till the notification gets processed at the back end and verify that the etag get updated every time a FR Notification is created.
            Thread.Sleep(10 * notificationSleepTime);
            notificationsList2 = this.NotificationsServiceProxy.GetNotifications(string.Empty, string.Empty, 0, String.Empty, Int32.MaxValue, String.Empty, false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, etag);
            Assert.IsNotNull(notificationsList2);
            Assert.AreEqual(1, notificationsList2.Count, "ERROR: Notification list was not empty.");
            common.VerifyNotificationCreated(string.Empty, string.Empty, Notification.NotificationType.FriendRequest, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
        }

        //bug 6209 -- on the error message -- should not be a "Session Id is null".
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call GetNotification with a session ID but pass no game Id")]
        [TestProperty("Type", "Feature")]
        public void N_GetNotifications_PassSessionIdButNotGameID()
        {
            string sessionId = Guid.NewGuid().ToString();
            string azureNotification = NotificationTestCommon.testHooksClient.CreateNotification(
                    CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password),
                    Constants.TESTGAMEID,
                    sessionId);
            try
            {
                List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                        string.Empty,
                        sessionId,
                        0,
                        string.Empty,
                        Int32.MaxValue,
                        String.Empty,
                        false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);
                Assert.Fail("ERROR: Expected to throw a web protocol exception when GetNotification tries to filter notifications by session but does not know the game ID");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: GameId is null while sessionId is not null", e.Response);
            }

        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call GetNotification with a notification type  that does not exist")]
        [TestProperty("Type", "Feature")]
        public void N_GetNotifications_InvalidType()
        {
            try
            {
                List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                    Constants.TESTGAMEID.ToString(),
                    string.Empty,
                    0,
                    string.Empty,
                    Int32.MaxValue,
                    "invalid type",
                    false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);
                Assert.Fail("Expecting an exception.");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: invalid type is not a valid value for enum type: NotificationType", e.Response);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call GetNotification with an invalid game Id")]
        [TestProperty("Type", "Feature")]
        public void N_GetNotifications_InvalidGameId()
        {
            try
            {
                List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                    "This is an invalid GameId",
                    string.Empty,
                    0,
                    string.Empty,
                    Int32.MaxValue,
                    string.Empty,
                    false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);
                Assert.Fail("Expecting an exception.");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: Game ID is invalid", e.Response);
            }
        }

        //commented out according to bug 3303
        //[TestMethod, Owner("a-sediro"), Priority(2)]
        //[Description("Call GetNotification with an invalid game Id")]
        //[TestProperty("Type", "Feature")]
        //public void N_GetNotifications_InvalidGameId_Int()
        //{
        //    try
        //    {
        //        List<Notification> notifications = NotificationTestCommon.notificationClient.GetNotifications(
        //            "890987",
        //            string.Empty,
        //            0,
        //            string.Empty,
        //            Int32.MaxValue,
        //            string.Empty,
        //            false);
        //        Assert.Fail("Expecting an exception.");
        //    }
        //    catch (RestException e)
        //    {
        //        Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, e.Response.Status);
        //    }
        //}

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call GetNotification with an invalid lastId")]
        [TestProperty("Type", "Feature")]
        public void N_GetNotifications_InvalidNotificationId()
        {
            string invalidNotificationId = new string('a', 20) + Guid.NewGuid().ToString();
            try
            {
                List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                    Constants.TESTGAMEID.ToString(),
                    string.Empty,
                    0,
                    invalidNotificationId,
                    Int32.MaxValue,
                    string.Empty,
                    false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);
                Assert.Fail("Expecting a BadRequest exception.");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: notificationId is invalid", e.Response);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call GetNotification with a notification type  that does not exist")]
        [TestProperty("Type", "Feature")]
        public void N_GetNotifications_InvalidType_Int()
        {
            try
            {
                List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                    Constants.TESTGAMEID.ToString(),
                    string.Empty,
                    0,
                    string.Empty,
                    Int32.MaxValue,
                    "890987",
                    false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);
                Assert.Fail("Expecting a BadRequest exception.");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: 890987 is not a valid value for enum type: NotificationType", e.Response);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call GetNotification with long session Id string")]
        [TestProperty("Type", "Feature")]
        public void N_GetNotifications_LongSessionId()
        {
            try
            {
                List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                    Constants.TESTGAMEID.ToString(),
                    "This is a very long session ID with char length equals sixtyfour",
                    0,
                    string.Empty,
                    Int32.MaxValue,
                    string.Empty,
                    false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);
                Assert.Fail("Expecting a BadRequest exception.");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: Session ID is invalid", e.Response);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that users cannot see another user's notifications.")]
        [TestProperty("Type", "Feature")]
        public void N_GetNotifications_OtherUser()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");
            string notificationId = NotificationTestCommon.testHooksClient.CreateDummyNotification();
            List<Notification> nList0 = this.NotificationsServiceProxy.GetNotifications(string.Empty, string.Empty, 0, Constants.IGNORE_lAST_ID, 100, string.Empty, false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);
            Assert.IsNotNull(nList0);
            Assert.IsTrue(nList0.Count > 0);
            Assert.IsNotNull(nList0.Find(n => n.Id == notificationId), "Error: did not get notification created by the same user.");

            List<Notification> nList1 = this.NotificationsServiceProxy.GetNotifications(string.Empty, string.Empty, 0, Constants.IGNORE_lAST_ID, 100, string.Empty, false, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password, null);
            Assert.IsNotNull(nList1);
            foreach (Notification n in nList1)
            {
                Assert.AreNotEqual(notificationId, n.Id, "Error: It looks like we were able to see other user's notification.");
            }
        }


        //bug 7768
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify that passing a non existent category returns an empty list")]
        [TestProperty("Type", "Feature")]
        public void N_GetNotifications_NonexistentCategory()
        {
            try
            {
                List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(string.Empty, string.Empty, 91, Constants.IGNORE_lAST_ID, 100, string.Empty, false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);
                Assert.Fail("Expecting a Bad Request");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, e.Response.Status, "Error: Incorrect error message");
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that GetNotifications does not put a request on queue when there is no FR on XBL for the user.")]
        [TestProperty("Type", "Feature")]
        public void N_GetNotifications_NoFRNotification()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 3, "We need at least three users for this test");
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            NotificationTestCommon.testHooksClient.SetupNotFriendsAndNoFR(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[2].Membername, Config.Environment.UserSettings[2].Password)));
            NotificationTestCommon.VerifyNotFriends(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[2].Membername, Config.Environment.UserSettings[2].Password)), "Error: Setup failed not to make friends");
            NotificationTestCommon.VerifyNoFR(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[2].Membername, Config.Environment.UserSettings[2].Password)), "Error: Setup failed to delete pre existing Friend Requests");

            List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(
                string.Empty,
                string.Empty,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                string.Empty,
                false,
                Config.Environment.UserSettings[0].Membername,
                Config.Environment.UserSettings[0].Password,
                null);
            Assert.IsNotNull(nList);
            Assert.AreEqual<int>(0, nList.Count, "Unexpected number of Notifications.");
            string etag0 = this.NotificationsServiceProxy.EtagInResponse;
            Thread.Sleep(10 * notificationSleepTime); // sleep incase any action is triggered on the backend
            try
            {
                List<Notification> nList2 = this.NotificationsServiceProxy.GetNotifications(
                    string.Empty,
                    string.Empty,
                    0,
                    Constants.IGNORE_lAST_ID,
                    100,
                    string.Empty,
                    false,
                    Config.Environment.UserSettings[0].Membername,
                    Config.Environment.UserSettings[0].Password,
                    etag0);
                Assert.Fail("Expected a 304.");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotModified, e.Response.Status);
            }
            common.VerifyNoNotifications(string.Empty, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, Notification.NotificationType.FriendRequest.ToString());
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Create session, add 3 notifications and query by userid. Expected result: Single notification is returned for that session, notification ID matches last notification ID")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_AggregateInASingleSessionAndQueryByUserID()
        {
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);;
            // Create three YouWin notifications
            string lastNotificationId = common.CreateNotificationsInternal(3, Notification.NotificationType.YouWin);

            // Validate we get a single notification of that type back when we query for it
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), String.Empty, 0, Constants.IGNORE_lAST_ID, Int32.MaxValue, String.Empty, false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);

            List<Notification> youWinNotifications = common.FilterNotificationListByType(notifications, Notification.NotificationType.YouWin);
            Assert.AreEqual(1, youWinNotifications.Count, "Did not find expected number of YouWin notifications.");
            Assert.AreEqual(youWinNotifications[0].Id, lastNotificationId);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Create session, add 3 notifications and query by game. Expected result: Single notification is returned for that session.")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_AggregateInASingleSessionAndQueryByGame()
        {
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);

            // Create three YouLose notifications
            string lastNotificationId = common.CreateNotificationsInternal(3, Notification.NotificationType.YouLose, NotificationTestCommon.testHooksClient.TestSessionId, Constants.ALTERNATE_TESTGAMEID);

            // Validate we get a single notification of that type back when we query for it
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(Constants.ALTERNATE_TESTGAMEID.ToString(), String.Empty, (int)NotificationTestCommon.testHooksClient.TestCategory, Constants.IGNORE_lAST_ID, Int32.MaxValue, String.Empty, false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);

            List<Notification> youLoseNotifications = common.FilterNotificationListByType(notifications, Notification.NotificationType.YouLose);
            Assert.AreEqual(1, youLoseNotifications.Count, "Did not find expected number of YouLose notifications.");
            common.VerifyNotification(youLoseNotifications[0], lastNotificationId);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Create session, add 3 notifications and query by session. Expected result: Single notification is returned for that session, all metadata matches last notification")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_AggregateInASingleSessionAndQueryBySession()
        {
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);;
            // Create three GameTie notifications
            string lastNotificationId = common.CreateNotificationsInternal(3, Notification.NotificationType.GameTie);

            // Validate we get a single notification of that type back when we query for it
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, (int)NotificationTestCommon.testHooksClient.TestCategory, Constants.IGNORE_lAST_ID, 100, String.Empty, false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);

            List<Notification> gameTieNotifications = common.FilterNotificationListByType(notifications, Notification.NotificationType.GameTie);
            Assert.AreEqual(1, gameTieNotifications.Count, "Did not find expected number of GameTie notifications.");
            Assert.AreEqual(gameTieNotifications[0].Id, lastNotificationId);
        }

        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Create session, add 3 notif each, query by userid. Expected result: A single notification is returned for that type per session")]
        [TestProperty("Type", "BVTs")]
        public void BVT_GetNotifications_AggregateInMultipleSessions()
        {
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);;
            string firstSessionID = NotificationTestCommon.testHooksClient.TestSessionId;
            common.CreateNotificationsInternal(3, Notification.NotificationType.YourTurn, firstSessionID, Constants.TESTGAMEID);

            string secondSessionID = Guid.NewGuid().ToString();
            common.CreateNotificationsInternal(3, Notification.NotificationType.YourTurn, secondSessionID, Constants.TESTGAMEID);

            // Validate we get a single notification of that type back when we query for it, one per session
            int firstSessionMatches = 0;
            int secondSessionMatches = 0;

            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), String.Empty, 0, Constants.IGNORE_lAST_ID, Int32.MaxValue, String.Empty, false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);
            foreach (Notification n in notifications)
            {
                if (n.Type == Notification.NotificationType.YourTurn)
                {
                    if (n.SessionId == firstSessionID)
                    {
                        firstSessionMatches++;
                    }
                    if (n.SessionId == secondSessionID)
                    {
                        secondSessionMatches++;
                    }
                }
            }

            Assert.AreEqual(1, firstSessionMatches, "Did not find expected number of YourTurn notifications in Session 1.");
            Assert.AreEqual(1, secondSessionMatches, "Did not find expected number of YourTurn notifications in Session 2.");
        }

        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Create session, add 3 notif each of 2 types, query by  userid. Expected result: Single notification is returned per type for that session")]
        [TestProperty("Type", "BVTs")]
        public void BVT_GetNotifications_AggregateMultipleTypesInASingleSession()
        {
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);;
            string sessionID = NotificationTestCommon.testHooksClient.TestSessionId;
            common.CreateNotificationsInternal(3, Notification.NotificationType.GameOver, sessionID, Constants.TESTGAMEID);
            common.CreateNotificationsInternal(3, Notification.NotificationType.Message, sessionID, Constants.TESTGAMEID);

            // Validate we get a single notification of that type back when we query for it
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), sessionID, (int)NotificationTestCommon.testHooksClient.TestCategory, Constants.IGNORE_lAST_ID, 100, String.Empty, false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);

            int gameOverNotificationCount = common.FilterNotificationListByType(notifications, Notification.NotificationType.GameOver).Count;
            int messageWaitingNotificationCount = common.FilterNotificationListByType(notifications, Notification.NotificationType.Message).Count;

            Assert.AreEqual(1, gameOverNotificationCount, "Did not find expected number of GameOver notifications.");
            Assert.AreEqual(1, messageWaitingNotificationCount, "Did not find expected number of MessageWaiting notifications.");
        }

        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Verify aggregation of notification types")]
        [TestProperty("Type", "BVTs")]
        public void BVT_GetNotifications_AggregateAllToDoNotificationsInASingleSession()
        {
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);;
            Notification.NotificationType[] allToDos = {
                                                           Notification.NotificationType.GameOver,
                                                           Notification.NotificationType.GameTie,
                                                           Notification.NotificationType.Invitation,
                                                           Notification.NotificationType.Message,
                                                           Notification.NotificationType.Nudge,
                                                           Notification.NotificationType.Warning,
                                                           Notification.NotificationType.YouLose,
                                                           Notification.NotificationType.YouWin,
                                                           Notification.NotificationType.YourTurn };

            // "Create" a new session -- NotificationTestCommon.testHooksClient generates a new GUID per-test case run
            string sessionID = NotificationTestCommon.testHooksClient.TestSessionId;

            // Insert 2 notifications of each ToDo type
            foreach (Notification.NotificationType type in allToDos)
            {
                common.CreateNotificationsInternal(2, type, sessionID, Constants.TESTGAMEID);
            }

            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), sessionID, (int)NotificationTestCommon.testHooksClient.TestCategory, Constants.IGNORE_lAST_ID, 100, String.Empty, false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);

            // Expected number is allToDos.Length as multiple will get aggregated.
            Assert.AreEqual(allToDos.Length, notifications.Count, "Did not find expected total number of Notifications in session.");

            // Iterate through each ToDo type and validate there's only a single notification for each ToDo type
            int notificationCount = 0;
            foreach (Notification.NotificationType type in allToDos)
            {
                notificationCount = common.FilterNotificationListByType(notifications, type).Count;

                Assert.AreEqual(1, notificationCount, String.Format("Did not find expected number of {0} notifications.", type.ToString()));
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that accepting a FR will update users last update time as it causes FR notification be deleted.")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_DeleteFRN_Etag()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need two users for this test");

            NotificationTestCommon.cleanupFR = true;
            NotificationTestCommon.testHooksClient.SetupNotFriendsAndNoFR(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)));
            NotificationTestCommon.VerifyNotFriends(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)), "Error: Setup failed not to make friends");
            NotificationTestCommon.VerifyNoFR(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)), "Error: Setup failed to delete pre existing Friend Requests");
            common.CheckNotificationCountFR(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            NotificationTestCommon.testHooksClient.AddFR(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)));

            NotificationTestCommon.VerifyFriendRequest(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)), "did not find a friend request on XBL");
            common.VerifyNotificationCreated(string.Empty, string.Empty, Notification.NotificationType.FriendRequest, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            NotificationTestCommon.testHooksClient.AcceptFR(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)));

            NotificationTestCommon.VerifyNoFR(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)), "did not find a friend request on XBL");

            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                   string.Empty,
                   string.Empty,
                   0,
                   Constants.IGNORE_lAST_ID,
                   100,
                   Notification.NotificationType.FriendRequest.ToString(),
                   false,
                   Config.Environment.UserSettings[1].Membername,
                   Config.Environment.UserSettings[1].Password,
                   null);
            string etag = this.NotificationsServiceProxy.EtagInResponse;
            Assert.IsNotNull(notifications);
            Assert.AreEqual(1, notifications.Count, "Error: unexpected number of notifications");
            Thread.Sleep(10 * notificationSleepTime); // giving notification internal time to process a request

            notifications = this.NotificationsServiceProxy.GetNotifications(
               string.Empty,
               string.Empty,
               0,
               Constants.IGNORE_lAST_ID,
               100,
               Notification.NotificationType.FriendRequest.ToString(),
               false,
               Config.Environment.UserSettings[1].Membername,
               Config.Environment.UserSettings[1].Password,
               etag);
            Assert.IsNotNull(notifications);
            Assert.AreEqual(0, notifications.Count, "Error: unexpected number of notifications");
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify Expiration Time is correct in Friend Request Notifications.")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_FRNNContent_ExpirationTime()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");
            NotificationTestCommon.cleanupFR = true;
            NotificationTestCommon.testHooksClient.SetupNotFriendsAndNoFR(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)));
            NotificationTestCommon.VerifyNotFriends(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)), "Error: Setup failed not to make friends");
            NotificationTestCommon.VerifyNoFR(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)), "Error: Setup failed to delete pre existing Friend Requests");

            common.CheckNotificationCountFR(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            NotificationTestCommon.testHooksClient.AddFR(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)));
            NotificationTestCommon.VerifyFriendRequest(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)), "did not find a friend request on XBL");

            common.VerifyNotificationCreated(string.Empty, string.Empty, Notification.NotificationType.FriendRequest, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            Notification friendRNtfn = GetNotification(string.Empty, string.Empty, Notification.NotificationType.FriendRequest.ToString(), Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            Assert.AreEqual(@"12/31/9999 11:59:59 PM", friendRNtfn.ExpirationTime.ToString(), "Error: Incorrect Expiration Time in Friend Request Notification");
            //TODO: Update this after bug(3930) is fixed
            //Assert.IsTrue(((DateTime.UtcNow >= (friendRNtfn.ExpirationTime.AddMonths(-3))) &&  (DateTime.UtcNow.AddMinutes(-2) <= (friendRNtfn.ExpirationTime.AddMonths(-3)))), "Error: Incorrect Expiration Time in Friend Request Notification");
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify Sent Time is correct in Friend Request Notifications.")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_FRNNContent_SentTime()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");

            NotificationTestCommon.cleanupFR = true;
            NotificationTestCommon.testHooksClient.SetupNotFriendsAndNoFR(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)));
            NotificationTestCommon.VerifyNotFriends(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)), "Error: Setup failed not to make friends");
            NotificationTestCommon.VerifyNoFR(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)), "Error: Setup failed to delete pre existing Friend Requests");
            DateTime now = DateTime.UtcNow;

            common.CheckNotificationCountFR(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            NotificationTestCommon.testHooksClient.AddFR(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)));
            NotificationTestCommon.VerifyFriendRequest(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)), "did not find a friend request on XBL");

            common.VerifyNotificationCreated(string.Empty, string.Empty, Notification.NotificationType.FriendRequest, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            Notification friendRNtfn = GetNotification(string.Empty, string.Empty, Notification.NotificationType.FriendRequest.ToString(), Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            Assert.IsTrue(((now.AddSeconds(-1).CompareTo(friendRNtfn.SentTime) < 0) && (now.AddMinutes(2).CompareTo(friendRNtfn.SentTime) > 0)), "Error: Incorrect Sent Time " + friendRNtfn.SentTime.ToString() + " in Friend Request notification as compared to time invite is sent  = " + now.ToString());
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify contents of Friend Request Notification are correct.")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_FRNNContent()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");

            NotificationTestCommon.cleanupFR = true;
            NotificationTestCommon.testHooksClient.SetupNotFriendsAndNoFR(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)));
            NotificationTestCommon.VerifyNotFriends(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)), "Error: Setup failed not to make friends");
            NotificationTestCommon.VerifyNoFR(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)), "Error: Setup failed to delete pre existing Friend Requests");

            common.CheckNotificationCountFR(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            NotificationTestCommon.testHooksClient.AddFR(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)));
            NotificationTestCommon.VerifyFriendRequest(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)), "did not find a friend request on XBL");

            common.VerifyNotificationCreated(string.Empty, string.Empty, Notification.NotificationType.FriendRequest, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            Notification friendRNtfn = GetNotification(string.Empty, string.Empty, Notification.NotificationType.FriendRequest.ToString(), Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            Assert.AreEqual<Notification.NotificationCategory>(Notification.NotificationCategory.ToDo, friendRNtfn.Category, "Error: Incorrect Notification category in Friend Request Notification.");
            Assert.AreEqual<Notification.NotificationStatus>(Notification.NotificationStatus.UnRead, friendRNtfn.Status, "Error: Incorrect Notification status in Friend Request Notification.");
            Assert.AreEqual<Notification.NotificationType>(Notification.NotificationType.FriendRequest, friendRNtfn.Type, "Error: Incorrect Notification type in Friend Request Notification.");
            Assert.AreEqual("Friend Request", friendRNtfn.TypeDisplayName, "Error: Incorrect type display name in Friend Request Notification.");
            Assert.AreEqual(null, friendRNtfn.DataBlob, "Error: Incorrect data blob content in Friend Request Notification.");
            Assert.AreEqual(true, friendRNtfn.IsUserVisible, "Error: Friend Request Notification should be user visible.");
            Assert.AreEqual(0, friendRNtfn.SupportedPlatform, "Error: Supported platform should is incorrect in Friend Request Notification.");
            Assert.AreEqual("", friendRNtfn.UserId, "Error:UserId should be empty in Friend Request Notification");
            Assert.AreEqual((uint)0, friendRNtfn.Variant, "Error: Variant should be 0 in Friend Request Notification.");

            //GameInfo
            Assert.AreEqual((uint)0, friendRNtfn.GameId, "Error: Incorrect game display name in Friend Request Notification");
            Assert.AreEqual(null, friendRNtfn.GameDisplayName, "Error: Incorrect game display name in Friend Request Notification");
            Assert.AreEqual(null, friendRNtfn.SessionId, "Error: Incorrect session ID in Friend Request Notification");

            //sender Info
            UserInfo uinfo = new UserInfo();
            string from = HttpUtility.HtmlDecode(friendRNtfn.From);
            DataContractSerializer dcjs = new DataContractSerializer(typeof(UserInfo));
            UserInfo userInfo = (UserInfo)dcjs.ReadObject(XmlReader.Create(new StringReader(from)));
            Assert.AreEqual("Xbox LIVE", userInfo.GamerTag, "Error: GamerTag is incorrect in FR Notification.");
            Assert.AreEqual("", userInfo.DisplayName, "Error: Display Name is incorrect in FR Notification.");

            //url
            string envName = Config.Environment.Name;
            if (string.Compare(Config.Environment.Name, "TestNet", true) == 0)
                envName = "test";
            else if (string.Compare(Config.Environment.Name, "Partnernet", true) == 0)
                envName = "part";

            string expectedUrl = "https://windowsphone." + envName + ".xbox.com/mobile/ViewFriendRequests";
            Assert.AreEqual(expectedUrl, friendRNtfn.Url, "Error: Incorrect url in Friend Request Notification");

            //image
            if (Config.EnvironmentSettings.Selected.Equals("int2", StringComparison.CurrentCultureIgnoreCase))
            {
                Assert.IsTrue(friendRNtfn.Images.Contains("http://epix.int2.xbox.com/shaXam/0401/cc/ce/ccce3282-9d9f-4dbb-b8d3-1f5ca7d05c06.BMP"));
                Assert.IsTrue(friendRNtfn.Images.Contains("http://epix.int2.xbox.com/shaXam/0401/8b/81/8b817016-b006-4b2f-a4fd-9f2e0e948a23.BMP"));
                Assert.IsTrue(friendRNtfn.Images.Contains("http://epix.int2.xbox.com/shaXam/0401/af/01/af012d05-018e-4ce0-b3ea-9098686b1cad.BMP"));
                Assert.IsTrue(friendRNtfn.Images.Contains("http://epix.int2.xbox.com/shaXam/0401/47/d6/47d62e1f-7cc0-4208-ada6-7124b5e5cf92.BMP"));
            }
            else
            {
                Assert.IsTrue(friendRNtfn.Images.Contains("http://nxeassets.xbox.com/shaxam/0201/06/a3/06a381fa-c50f-4243-8348-54fe10f022d1.BMP"));
                Assert.IsTrue(friendRNtfn.Images.Contains("http://nxeassets.xbox.com/shaxam/0201/2b/a5/2ba57a8b-ad45-4f10-9403-d04be671037e.BMP"));
                Assert.IsTrue(friendRNtfn.Images.Contains("http://nxeassets.xbox.com/shaxam/0201/2d/16/2d165c46-8a9c-4f2f-ab05-d75457f7d18b.BMP"));
                Assert.IsTrue(friendRNtfn.Images.Contains("http://nxeassets.xbox.com/shaxam/0201/38/71/3871ecee-aef0-49a0-bf21-15749d3ec8b5.BMP"));
            }
        }

        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Verifies only 1000 notifications are returned from the service.")]
        [TestProperty("Type", "FeatureTets")]
        public void P_GetNotifications_ReturnedNotExceed1000()
        {
            Log.WriteLine("This test takes around 40 min, Comment out testCleanup() for re-run in case you want to restore created notificatin ");
            MPTestHooksProxy.Timeout = 120000; // increase the timeout for MPTestHooks.
            //creating 1050 notifications, 50 at a time to avoid timeouts on mptesthook
            int i = 0;
            int timeouts = 0;
            while (i < 21 && timeouts < 10)
            {
                List<Notification> newNList = new List<Notification>();
                for (int k = 0; k < 50; k++)
                {
                    DateTime randomDate = DateTime.UtcNow.AddHours(-randomGenerator.Next(23)).AddDays(-randomGenerator.Next(14));
                    Notification newNotification = NotificationTestCommon.testHooksClient.BuildNotification(Guid.NewGuid().ToString(), CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password), randomDate.ToString());
                    newNotification.Id = string.Format("{0:D19}-{1}", (DateTime.MaxValue.Ticks - randomDate.Ticks), Guid.NewGuid());
                    newNList.Add(newNotification);
                }
                try
                {
                    NotificationTestCommon.testHooksClient.CreateNotifications(newNList);
                    i++;
                }
                catch (SystemException e)
                {
                    if (e.Message == "The operation has timed out")
                    {
                        Log.WriteLine("Call timed out. Trying again.");
                        timeouts++;
                        MPTestHooksProxy.Timeout = 180000; //increase timeout to three minutes.
                    }
                    else
                        throw new Exception(e.Message);
                }
            }

            //try to Get 1050 notifications
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                0,
                string.Empty,
                1005,
                String.Empty,
                false,
                Config.Environment.UserSettings[0].Membername,
                Config.Environment.UserSettings[0].Password,
                null);

            Assert.IsNotNull(notifications);

            // assert notificatins returned cant exceed 1000
            Assert.AreEqual<int>(1000, notifications.Count, "ERROR: Number of notifications returned from the service shouldnt excced 1000 but got" +
                                 notifications.Count.ToString());
        }

        ////
        //// We're storing all input validation cases here as a placeholder.
        //// So far these tests are expected failures because validation has not 
        //// been implemented yet for the Notifications service (PS #431)
        ////
        //[TestMethod, Owner("michperr")]
        //[Description("Call GetNotifications with negative values")]
        //[TestProperty("Type", "Feature")]
        //[ExpectedException(typeof(WebException), "Expected Exception not received for error case")]
        //public void FeatureTest_GetNotificationsWithInvalidValues()
        //{

        //    List<Notification> notifications = null;


        //    // Negative number as first ID
        //    notifications = this.NotificationsServiceProxy.GetNotifications("-1", 1, false);

        //    // Negative number as number of notifications
        //    notifications = this.NotificationsServiceProxy.GetNotifications("1", -1, false);

        //    // Negative numbers for both parameters
        //    notifications = this.NotificationsServiceProxy.GetNotifications("-1", -1, false);

        //    // MAX_INT
        //    notifications = this.NotificationsServiceProxy.GetNotifications("1", Int32.MaxValue, false);

        //    // MIN_INT
        //    notifications = this.NotificationsServiceProxy.GetNotifications("1", Int32.MinValue, false);

        //    // Get zero notifications
        //    notifications = this.NotificationsServiceProxy.GetNotifications("1", 0, false);

        //    // Get zero notifications
        //    notifications = this.NotificationsServiceProxy.GetNotifications("1", 0, true);

        //}
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\Notifications\API\UpdateNotification.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using AsyncMultiplayer.NotificationService;
using System.Configuration;
using System.Web;
using CloudServices.Test.Common.Configuration;
using System.Net;
using System.Threading;
using CloudServices.Test.Common.Proxy;

namespace Multiplayer.Test.API
{
    /// <summary>
    /// Summary description for UpdateNotification
    /// </summary>
    [TestClass]
    public class UpdateNotification : TestAreaBase
    {
        private static NotificationTestCommon common;

        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
            // Setting this to false to get logs out on TRX files
            Log.LogToFile = false;
        }

        //
        // This code runs before every test case -
        // For Notifications, this means ensuring at least a single notification is populated in the server and that all tests go to a new SessionID
        // This ensures the session gets properly cleaned up at the end of the test.
        //

        [TestInitialize()]
        public void MyTestInitialize()
        {
            common = new NotificationTestCommon();
            LockTest();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            try
            {
                common.TestCleanup();
            }
            finally
            {
                UnlockTest();
            }
        }

        //todo(michperr): Figure out notification order and make ValidateNotificationsStore more efficient
        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Update 1 Notification only from Viewed to Not Viewed")]
        [TestProperty("Type", "BVTs")]
        public void BVT_UpdateNotification_MarkViewed()
        {
            string notificationToChange = NotificationTestCommon.testHooksClient.CreateDummyNotification();

            string notificationToLeaveAlone = NotificationTestCommon.testHooksClient.CreateNotification(
                Notification.NotificationType.YouWin,
                Constants.TESTGAMEID,
                NotificationTestCommon.testHooksClient.TestSessionId,
                4,
                CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password),
                Constants.TESTGAMEVARIANT);

            // Validate original state
            common.ValidateNotificationState(notificationToChange, Constants.TESTGAMEID, NotificationTestCommon.testHooksClient.TestSessionId, Notification.NotificationStatus.UnRead, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            common.ValidateNotificationState(notificationToLeaveAlone, Constants.TESTGAMEID, NotificationTestCommon.testHooksClient.TestSessionId, Notification.NotificationStatus.UnRead, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);

            this.NotificationsServiceProxy.UpdateNotification(notificationToChange, Notification.NotificationStatus.Viewed.ToString(), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);

            common.ValidateNotificationState(notificationToChange, Constants.TESTGAMEID, NotificationTestCommon.testHooksClient.TestSessionId, Notification.NotificationStatus.Viewed, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            common.ValidateNotificationState(notificationToLeaveAlone, Constants.TESTGAMEID, NotificationTestCommon.testHooksClient.TestSessionId, Notification.NotificationStatus.UnRead, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Create a simple notification and validate that its default state is set to UnRead")]
        [TestProperty("Type", "Feature")]
        public void BVT_DefaultNotificationState()
        {
            // todo(michperr): TestHooks should be using the same code as other stuff that generates notifications.  THAT should be tested instead of this.
            string notificationId = NotificationTestCommon.testHooksClient.CreateNotification(
                    Notification.NotificationType.YouWin,
                    CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password),
                    Constants.TESTGAMEID,
                    NotificationTestCommon.testHooksClient.TestSessionId);

            // Validate original state
            common.ValidateNotificationState(notificationId, Constants.TESTGAMEID, NotificationTestCommon.testHooksClient.TestSessionId, Notification.NotificationStatus.UnRead, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Mark a viewed Notification as Viewed")]
        [TestProperty("Type", "Feature")]
        public void P_UpdateNotification_MarkViewedNotificationAsViewed()
        {
            // Create a test notification
            string notificationId = NotificationTestCommon.testHooksClient.CreateNotification(
                    Notification.NotificationType.Nudge,
                    CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password),
                    Constants.TESTGAMEID,
                    NotificationTestCommon.testHooksClient.TestSessionId);

            // Validate original state
            common.ValidateNotificationState(notificationId, Constants.TESTGAMEID, NotificationTestCommon.testHooksClient.TestSessionId, Notification.NotificationStatus.UnRead, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);

            // Mark as Viewed
            this.NotificationsServiceProxy.UpdateNotification(notificationId, Notification.NotificationStatus.Viewed.ToString(), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);

            // Validate Viewed
            common.ValidateNotificationState(notificationId, Constants.TESTGAMEID, NotificationTestCommon.testHooksClient.TestSessionId, Notification.NotificationStatus.Viewed, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);

            // Update notification state again to Viewed - should be a no op
            this.NotificationsServiceProxy.UpdateNotification(notificationId, Notification.NotificationStatus.Viewed.ToString(), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Mark a UnRead Notification as UnRead -- gives a 200.")]
        [TestProperty("Type", "Feature")]
        public void P_UpdateNotification_MarkPendingNotificationAsPending()
        {
            // Create a test notification
            string notificationId = NotificationTestCommon.testHooksClient.CreateNotification(
                    CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password),
                    Constants.TESTGAMEID,
                    NotificationTestCommon.testHooksClient.TestSessionId);

            // Validate original state
            common.ValidateNotificationState(notificationId, Constants.TESTGAMEID, NotificationTestCommon.testHooksClient.TestSessionId, Notification.NotificationStatus.UnRead, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);

            // Update notification state
            this.NotificationsServiceProxy.UpdateNotification(notificationId, Notification.NotificationStatus.UnRead.ToString(), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);

            // Re-validate state
            common.ValidateNotificationState(notificationId, Constants.TESTGAMEID, NotificationTestCommon.testHooksClient.TestSessionId, Notification.NotificationStatus.UnRead, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Mark a Viewed Notification as UnRead")]
        [TestProperty("Type", "Feature")]
        public void BVT_UpdateNotification_MarkViewedNotificationAsPending()
        {
            // Create a test notification
            string notificationId = NotificationTestCommon.testHooksClient.CreateNotification(
                    CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password),
                    Constants.TESTGAMEID,
                    NotificationTestCommon.testHooksClient.TestSessionId);

            // Validate original state
            common.ValidateNotificationState(notificationId, Constants.TESTGAMEID, NotificationTestCommon.testHooksClient.TestSessionId, Notification.NotificationStatus.UnRead, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);

            // Mark as Viewed
            this.NotificationsServiceProxy.UpdateNotification(notificationId, Notification.NotificationStatus.Viewed.ToString(), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);

            // Validate Viewed
            common.ValidateNotificationState(notificationId, Constants.TESTGAMEID, NotificationTestCommon.testHooksClient.TestSessionId, Notification.NotificationStatus.Viewed, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);

            // Update notification state to UnRead again - should result in a Bad Request WebException
            this.NotificationsServiceProxy.UpdateNotification(notificationId, Notification.NotificationStatus.UnRead.ToString(), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);

            // Validate pending
            common.ValidateNotificationState(notificationId, Constants.TESTGAMEID, NotificationTestCommon.testHooksClient.TestSessionId, Notification.NotificationStatus.UnRead, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Mark a non-existing Notification as Viewed -- get a 200 with no action.")]
        [TestProperty("Type", "Feature")]
        public void P_UpdateNotification_MarkNonexistingNotificationAsViewed()
        {
            // Mark a non-existing notificationId (an invalid NotificationID) as Viewed
            this.NotificationsServiceProxy.UpdateNotification("2521442294861521366-630f329f-9065-43d4-aee1-0008b2f2752c", Notification.NotificationStatus.Viewed.ToString(), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);

        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Mark a non-existing Notification as Unread -- get a 200 with no action.")]
        [TestProperty("Type", "Feature")]
        public void P_UpdateNotification_MarkNonexistingNotificationAsPending()
        {
            // Mark a non-existing notificationId (an invalid NotificationID) as Viewed
            this.NotificationsServiceProxy.UpdateNotification("2521442294861521366-630f329f-9065-43d4-aee1-0008b2f2752c", Notification.NotificationStatus.UnRead.ToString(), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);

        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Mark the same Notification as UnRead twice -- get a 200 with no action.")]
        [TestProperty("Type", "Feature")]
        public void P_UpdateNotification_MarkTwiceAsPending()
        {
            // Create a test notification
            string notificationId = NotificationTestCommon.testHooksClient.CreateNotification(
                    Notification.NotificationType.Nudge,
                    CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password),
                    Constants.TESTGAMEID,
                    NotificationTestCommon.testHooksClient.TestSessionId);

            // Validate original state
            common.ValidateNotificationState(notificationId, Constants.TESTGAMEID, NotificationTestCommon.testHooksClient.TestSessionId, Notification.NotificationStatus.UnRead, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);

            // Mark as UnRead
            this.NotificationsServiceProxy.UpdateNotification(notificationId, Notification.NotificationStatus.UnRead.ToString(), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);

            // Validate state is still UnRead
            common.ValidateNotificationState(notificationId, Constants.TESTGAMEID, NotificationTestCommon.testHooksClient.TestSessionId, Notification.NotificationStatus.UnRead, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);

            // Update notification state again to UnRead
            this.NotificationsServiceProxy.UpdateNotification(notificationId, Notification.NotificationStatus.UnRead.ToString(), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);

            // Validate state is still UnRead
            common.ValidateNotificationState(notificationId, Constants.TESTGAMEID, NotificationTestCommon.testHooksClient.TestSessionId, Notification.NotificationStatus.UnRead, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that UpdateNotification changes the user's last update time only if the status of the notification is changed")]
        [TestProperty("Type", "Feature")]
        public void P_UpdateNotification_Etag()
        {
            string notificationId = NotificationTestCommon.testHooksClient.CreateDummyNotification();
            List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                0,
                Constants.IGNORE_lAST_ID,
                5,
                string.Empty,
                false, 
                Config.Environment.UserSettings[0].Membername, 
                Config.Environment.UserSettings[0].Password, 
                null);
            Assert.IsNotNull(nList);
            Assert.IsTrue(nList.Count > 0, "Error: Notification count is incorrect.");
            string etag = this.NotificationsServiceProxy.EtagInResponse;
            Thread.Sleep(2000);
            this.NotificationsServiceProxy.UpdateNotification(notificationId, Notification.NotificationStatus.Viewed.ToString(), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            nList = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                0,
                Constants.IGNORE_lAST_ID,
                5,
                string.Empty,
                false,
                Config.Environment.UserSettings[0].Membername,
                Config.Environment.UserSettings[0].Password,
                etag);
            Assert.IsNotNull(nList);
            Assert.IsTrue(nList.Count > 0, "Error: Notification count is incorrect.");
            etag = this.NotificationsServiceProxy.EtagInResponse;
            Thread.Sleep(2000);
            try
            {
                this.NotificationsServiceProxy.UpdateNotification(null, Notification.NotificationStatus.Viewed.ToString(), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            }
            catch (RestException ex)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, ex.Response.Status);
                try
                {
                    nList = this.NotificationsServiceProxy.GetNotifications(
                        Constants.TESTGAMEID.ToString(),
                        string.Empty,
                        0,
                        Constants.IGNORE_lAST_ID,
                        5,
                        string.Empty,
                        false, 
                        Config.Environment.UserSettings[0].Membername, 
                        Config.Environment.UserSettings[0].Password,
                        etag);
                    Assert.Fail("Error: Expecting a 304.");
                }
                catch (RestException e)
                {
                    Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotModified, e.Response.Status);
                }
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call UpdateNotification with a null notification id and verify a bad request.")]
        [TestProperty("Type", "Feature")]
        public void N_UpdateNotification_NullNotificationId()
        {
            try
            {
                this.NotificationsServiceProxy.UpdateNotification(null, Notification.NotificationStatus.UnRead.ToString(), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
                Assert.Fail("Expected a 400 response.");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: Notification ID is null or empty", e.Response);
            }
        }


        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call UpdateNotification with a invalid notification id and verify a bad request.")]
        [TestProperty("Type", "Feature")]
        public void N_UpdateNotification_InvalidNotificationId()
        {
            string invalidNotificationId = new string('a', 20) + Guid.NewGuid().ToString();
            try
            {
                this.NotificationsServiceProxy.UpdateNotification(invalidNotificationId, Notification.NotificationStatus.UnRead.ToString(), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
                Assert.Fail("Expected a 400 response.");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: notificationId is invalid", e.Response);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call UpdateNotification with an empty notification id and verify a bad request.")]
        [TestProperty("Type", "Feature")]
        public void N_UpdateNotification_EmptyNotificationId()
        {
            try
            {
                this.NotificationsServiceProxy.UpdateNotification(string.Empty, Notification.NotificationStatus.Viewed.ToString(), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
                Assert.Fail("Expected a 400 response.");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: Notification ID is null or empty", e.Response);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call UpdateNotification with an invalid status and verify a bad request.")]
        [TestProperty("Type", "Feature")]
        public void N_UpdateNotification_InvalidStatus()
        {
            string NotificationId = NotificationTestCommon.testHooksClient.CreateDummyNotification();
            try
            {
                this.NotificationsServiceProxy.UpdateNotification(NotificationId, "This is an invalid status.", Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
                Assert.Fail("Expected a 400 response.");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: This is an invalid status. is not a valid value for enum type: NotificationStatus", e.Response);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call UpdateNotification with an empty status and verify a bad request.")]
        [TestProperty("Type", "Feature")]
        public void N_UpdateNotification_EmptyStatus()
        {
            string NotificationId = NotificationTestCommon.testHooksClient.CreateDummyNotification();
            try
            {
                this.NotificationsServiceProxy.UpdateNotification(NotificationId, string.Empty, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
                Assert.Fail("Expected a 400 response.");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request:  is not a valid value for enum type: NotificationStatus", e.Response);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call UpdateNotification with a null status and verify a bad request.")]
        [TestProperty("Type", "Feature")]//
        public void N_UpdateNotification_NullStatus()
        {
            string NotificationId = NotificationTestCommon.testHooksClient.CreateDummyNotification();
            try
            {
                this.NotificationsServiceProxy.UpdateNotification(NotificationId, null, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
                Assert.Fail("Expected a 400 response.");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request:  is not a valid value for enum type: NotificationStatus", e.Response);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\Partner\PostGameResult.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using AsyncMultiplayer.PartnerService.DataContracts;
using AsyncMultiplayer.NotificationService;
using AsyncMultiplayer.SessionCommon;
using CloudServices.Test.Common.Configuration;
using CloudServices.Test.Common.Proxy;
using System.Web;
using System.Threading;
using System.Net;
using System.Configuration;
using Gds.Contracts;
using Multiplayer.Test.API;
using MultiPlayer.Test.Data;


namespace Multiplayer.Test.API
{
    /// <summary>
    /// Summary description for PostGameResult
    /// </summary>
    [TestClass]
    public class PostGameResult : TestAreaBase
    {
        private Random randomGenerator = new Random();
        private static PartnerServiceProxy partnerClient = null;

        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
            Log.LogToFile = false;
            partnerClient = new PartnerServiceProxy();
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            
            
            LockTest("gameresult");
        }

        [TestCleanup]
        public void TestCleanup()
        {
            UnlockTest("gameresult");
        }

        static string MachineName = ConfigurationManager.ConnectionStrings["lest_AsyncNotification_db"].ConnectionString.Split(';')[0].Substring(12);

        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Verify that response to the API call is ok")]
        [TestProperty("Type", "BVTs")]
        public void BVT_PostGameResult()
        {
            partnerClient.PostGameResults(GetDefaultGameResults());
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Post a result and verify that player's last update time is updated.")]
        [TestProperty("Type", "Features")]
        public void P_PostGameResult_LastPlayedDateTime()
        {
            DateTime now = DateTime.Now;
            partnerClient.PostGameResults(GetDefaultGameResults());
            Thread.Sleep(2000); 

            DateTime playerLastDateTime = DateTime.Parse(GetLeaderboardValue("LastPlayedDateTime"));
            Assert.IsTrue(((now.AddSeconds(-1).CompareTo(playerLastDateTime)<0) && (now.AddMinutes(2).CompareTo(playerLastDateTime) > 0)), "Error: Player's last date time is not updated. It is " + playerLastDateTime + " while test time was " + now.ToString());
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Post a score that is greater than the best score and verify that best score is updated.")]
        [TestProperty("Type", "Features")]
        public void P_PostGameResult_BestScore()
        {
            long score = long.Parse(GetLeaderboardValue("BestScore"));
            List<PartnerCompositeGameResult> gameResults = GetDefaultGameResults();
            gameResults[0].GameResult.Score = score + 1;

            partnerClient.PostGameResults(gameResults);
            Thread.Sleep(2000); 

            long newScore = long.Parse(GetLeaderboardValue("BestScore"));
            Assert.AreEqual(score + 1, newScore, "Error: Best score is not updated");
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Post a win result and verify that number of wins has been increased")]
        [TestProperty("Type", "Features")]
        public void P_PostGameResult_Outcome_Win()
        {
            long wins = long.Parse(GetLeaderboardValue("Wins"));
            List<PartnerCompositeGameResult> gameResults = GetDefaultGameResults();
            gameResults[0].GameResult.Outcome = "win";

            partnerClient.PostGameResults(gameResults);
            Thread.Sleep(2000); 

            Assert.AreEqual(wins + 1, long.Parse(GetLeaderboardValue("Wins")), "Error: Number of wins is not updated");
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Post a non win result and verify that wins has not increased")]
        [TestProperty("Type", "Features")]
        public void P_PostGameResult_Outcome_Null()
        {
            long wins = long.Parse(GetLeaderboardValue("Wins"));
            List<PartnerCompositeGameResult> gameResults = GetDefaultGameResults();
            gameResults[0].GameResult.Outcome = null;

            partnerClient.PostGameResults(gameResults);
            Thread.Sleep(2000); 

            Assert.AreEqual(wins, long.Parse(GetLeaderboardValue("Wins")), "Error: Number of wins is not expected to change");
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Post a result and verify that player's last update time is updated for multiple players.")]
        [TestProperty("Type", "Features")]
        public void P_PostGameResult_LastPlayedDateTime_MoreThan1Result_MultipleUsers()
        {
            Assert.IsTrue(2 <= Config.Environment.UserSettings.Count, "We need at least two users for this test");

            DateTime now = DateTime.Now;

            partnerClient.PostGameResults(GetDefaultGameResults(Config.Environment.UserSettings.Count));
            Thread.Sleep(2000);

            for (int i = 0; i < Config.Environment.UserSettings.Count; i++)
            {
                DateTime playerLastDateTime = DateTime.Parse(GetLeaderboardValue("LastPlayedDateTime", Config.Environment.UserSettings[i].Membername, Config.Environment.UserSettings[i].Password));
                Assert.IsTrue(((now.AddSeconds(-1).CompareTo(playerLastDateTime) < 0) && (now.AddMinutes(2).CompareTo(playerLastDateTime) > 0)), "Error: Player's last date time is not updated. It is " + playerLastDateTime + " while test time was " + now.ToString());
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Post two results for same user and verify that both results are posted.")]
        [TestProperty("Type", "Features")]
        public void P_PostGameResult_LastPlayedDateTime_MoreThan1Result_SameGamertag()
        {
            long wins = long.Parse(GetLeaderboardValue("Wins"));

            List<PartnerCompositeGameResult> gameResults = GetDefaultGameResults();
            PartnerCompositeGameResult gameResult2 = getDefaultGameResult(Config.Environment.UserSettings[0].Gamertag);
            gameResults.Add(gameResult2);

            partnerClient.PostGameResults(gameResults);
            Thread.Sleep(2000);

            Assert.AreEqual(wins + 2, long.Parse(GetLeaderboardValue("Wins")), "Error: Best score is not updated");
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Try posting a result thathas no values and verify Bad Request.")]
        [TestProperty("Type", "Features")]
        public void N_PostGameResult_NoResult()
        {
            List<PartnerCompositeGameResult> gameResults = GetDefaultGameResults();
            gameResults[0].GameResult.Score = null;
            gameResults[0].GameResult.Outcome = null;
            gameResults[0].GameResult.Time = null;
            gameResults[0].GameResult.Blob = null;
            try
            {
                partnerClient.PostGameResults(gameResults);
                Assert.Fail("Expected to get a NOT FOUND exception but it didnt");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotFound, e.Response.Status);
            }
        }

        //bug 4816
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("try posting a result with null gamer tag and verify Bad Request.")]
        [TestProperty("Type", "Features")]
        public void N_PostGameResult_NullGamerTag()
        {
            List<PartnerCompositeGameResult> gameResults = GetDefaultGameResults();
            gameResults[0].Gamertag = null;
            try
            {
                partnerClient.PostGameResults(gameResults);
                Assert.Fail("Expected to get a NOT FOUND exception but it didnt");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotFound, e.Response.Status);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("try posting a result with empty gamer tag and verify Bad Request.")]
        [TestProperty("Type", "Features")]
        public void N_PostGameResult_EmptyGamerTag()
        {
            List<PartnerCompositeGameResult> gameResults = GetDefaultGameResults();
            gameResults[0].Gamertag = "";
            try
            {
                partnerClient.PostGameResults(gameResults);
                Assert.Fail("Expected to get a NOT FOUND exception but it didnt");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotFound, e.Response.Status);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("try posting a result with invalid gamer tag and verify Bad Request.")]
        [TestProperty("Type", "Features")]
        public void N_PostGameResult_InvalidGamerTag()
        {
            List<PartnerCompositeGameResult> gameResults = GetDefaultGameResults();
            gameResults[0].Gamertag = "xyz";

            try
            {
                partnerClient.PostGameResults(gameResults);
                Assert.Fail("Expected to get a NOT FOUND exception but it didnt");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotFound, e.Response.Status);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("try posting a result with empty locale tag and verify Bad Request.")]
        [TestProperty("Type", "Features")]
        public void N_PostGameResult_EmptyLocale()
        {
            List<PartnerCompositeGameResult> gameResults = GetDefaultGameResults();
            gameResults[0].Locale = "";
            try
            {
                partnerClient.PostGameResults(gameResults);
                Assert.Fail("Expected to get a NOT FOUND exception but it didnt");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotFound, e.Response.Status);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("try posting a result with null locale tag and verify Bad Request.")]
        [TestProperty("Type", "Features")]
        public void N_PostGameResult_NullLocale()
        {
            List<PartnerCompositeGameResult> gameResults = GetDefaultGameResults();
            gameResults[0].Locale = null;
            try
            {
                partnerClient.PostGameResults(gameResults);
                Assert.Fail("Expected to get a NOT FOUND exception but it didnt");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotFound, e.Response.Status);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("try posting a result with good locale tag and verify player's last update time is updated")]
        [TestProperty("Type", "Features")]
        public void P_PostGameResult_GoodLocale()
        {
            List<PartnerCompositeGameResult> gameResults = GetDefaultGameResults();
            gameResults[0].Locale = LocalizationTestData.GOOD_LOCALE[randomGenerator.Next(LocalizationTestData.GOOD_LOCALE.Length / 2), 0];

            DateTime now = DateTime.Now;
            partnerClient.PostGameResults(gameResults);

            DateTime playerLastDateTime = DateTime.Parse(GetLeaderboardValue("LastPlayedDateTime"));
            Assert.IsTrue(((now.AddSeconds(-1).CompareTo(playerLastDateTime) < 0) && (now.AddMinutes(2).CompareTo(playerLastDateTime) > 0)), "Error: Player's last date time is not updated. It is " + playerLastDateTime + " while test time was " + now.ToString());
        }

        //bug 4817
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("try posting a result with mixed locale tag and verify player's last update time is updated")]
        [TestProperty("Type", "Features")]
        public void P_PostGameResult_MixedLocale()
        {
            List<PartnerCompositeGameResult> gameResults = GetDefaultGameResults();
            gameResults[0].Locale = LocalizationTestData.MIXED_LOCALE[randomGenerator.Next(LocalizationTestData.MIXED_LOCALE.Length / 2), 0];

            DateTime now = DateTime.Now;
            partnerClient.PostGameResults(gameResults);

            DateTime playerLastDateTime = DateTime.Parse(GetLeaderboardValue("LastPlayedDateTime"));
            Assert.IsTrue(((now.AddSeconds(-1).CompareTo(playerLastDateTime) < 0) && (now.AddMinutes(2).CompareTo(playerLastDateTime) > 0)), "Error: Player's last date time is not updated. It is " + playerLastDateTime + " while test time was " + now.ToString());
        }

        //bug 4817
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("try posting a result with fallback locale tag and verify player's last update time is updated")]
        [TestProperty("Type", "Features")]
        public void P_PostGameResult_FallbackLocale()
        {
            List<PartnerCompositeGameResult> gameResults = GetDefaultGameResults();
            gameResults[0].Locale = LocalizationTestData.UNSUPPORTED_lOCALE[randomGenerator.Next(LocalizationTestData.UNSUPPORTED_lOCALE.Length)];

            DateTime now = DateTime.Now;
            partnerClient.PostGameResults(gameResults);

            DateTime playerLastDateTime = DateTime.Parse(GetLeaderboardValue("LastPlayedDateTime"));
            Assert.IsTrue(((now.AddSeconds(-1).CompareTo(playerLastDateTime) < 0) && (now.AddMinutes(2).CompareTo(playerLastDateTime) > 0)), "Error: Player's last date time is not updated. It is " + playerLastDateTime + " while test time was " + now.ToString());
        }


        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("try posting a result with null platform type tag and verify Bad Request.")]
        [TestProperty("Type", "Features")]
        public void N_PostGameResult_NullPlatformType()
        {
            List<PartnerCompositeGameResult> gameResults = GetDefaultGameResults();
            gameResults[0].PlatformType = null;
            try
            {
                partnerClient.PostGameResults(gameResults);
                Assert.Fail("Expected to get a NOT FOUND exception but it didnt");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotFound, e.Response.Status);
            }
        }

        /// <summary>
        /// Feature Test for GameState svc PostGameEnd API with  ActiveSeat player leaving session and Losing
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("Feature Test for GameState svc PostGameEnd API with  ActiveSeat player leaving session and Losing")]
        [TestProperty("Type", "FeatureTests")]
        public void P_PostGameResult_ActiveSeatPlayerLeave_Loses()
        {
            // Initialize CreationData
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");

            // create session by player 1
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                                  Config.Environment.UserSettings[0].Membername,
                                                                                  Config.Environment.UserSettings[0].Password);
            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //player2 join session
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                              Config.Environment.UserSettings[1].Membername,
                                                                              Config.Environment.UserSettings[1].Password);

            //Player1 makes a move
            ModifiableGameState modifiedState = new ModifiableGameState();
            modifiedState.GameData = new byte[] { 60, 61, 62, 63, 64, 65 };
            modifiedState.ActiveSeatIndex = 1;
            this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiedState,
                                             Config.Environment.UserSettings[0].Membername,
                                             Config.Environment.UserSettings[0].Password);



            //Get Leaderboard score for Player2 lose Seat            
            long Player2Lose = long.Parse(GetLeaderboardValue("Losses",
                                                           Config.Environment.UserSettings[1].Membername,
                                                           Config.Environment.UserSettings[1].Password));            
                       
            this.GameSessionProxy.LeaveSession(createSessionState.SessionID, createSessionState.GameID.ToString(),
                                               Config.Environment.UserSettings[1].Membername,
                                               Config.Environment.UserSettings[1].Password);

           Thread.Sleep(60000);

           string loses = GetLeaderboardValue("Losses", Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
           Assert.AreEqual<long>(Player2Lose + 1, long.Parse(loses), "Error: YouLose notification wasnt created after active seat player left session");
        }

        /// <summary>
        /// Feature Test for GameState svc PostGameEnd API with  ActiveSeat player leaving session  after game is complete and no Lose added on Player result
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for GameState svc PostGameEnd API with  ActiveSeat player leaving session and no Lose added to player")]
        [TestProperty("Type", "FeatureTests")]
        public void P_PostGameResult_GameEnded_NoLosesOnLeaveSession()
        {  
            // Initialize creation data and create session        
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, new byte[] { 1, 2, 3 },
                                                               new InactivityWarningBehavior(), true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, 
                                                                            Config.Environment.UserSettings[0].Membername, 
                                                                            Config.Environment.UserSettings[0].Password);
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 join session
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);
            SessionState joinSession = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData, 
                                                                         Config.Environment.UserSettings[1].Membername, 
                                                                         Config.Environment.UserSettings[1].Password);
                      
            //Player1 makes a move
            ModifiableGameState modifiedState = new ModifiableGameState();
            modifiedState.GameData = new byte[] { 60, 61, 62, 63, 64, 65 };
            modifiedState.ActiveSeatIndex = 1;
            this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiedState,
                                             Config.Environment.UserSettings[0].Membername,
                                             Config.Environment.UserSettings[0].Password);      


            //End game while it was player2 turn
            this.GameStateProxy.PostGameEnd(createSessionState.SessionID, createSessionState.GameID.ToString(),
                                            TestAreaBase.GetDefaultTwoPlayerGameResult(createSessionState.GameID.ToString(), (uint)createSessionState.Variant), 
                                            Config.Environment.UserSettings[0].Membername, 
                                            Config.Environment.UserSettings[0].Password);

            //Get Leaderboard loss score for Player2           
            long Player2Lose = long.Parse(GetLeaderboardValue("Losses",
                                                           Config.Environment.UserSettings[1].Membername,
                                                           Config.Environment.UserSettings[1].Password));

            //get session state
            SessionState sessionStateAfterGameEnd = this.GameSessionProxy.ViewSession(createSessionState.SessionID, createSessionState.GameID.ToString(), 
                                                                                      Config.Environment.UserSettings[0].Membername, 
                                                                                      Config.Environment.UserSettings[0].Password);
            
            //Verify game complete and leave session
            if(sessionStateAfterGameEnd.State.IsComplete)
            {
                this.GameSessionProxy.LeaveSession(createSessionState.SessionID, createSessionState.GameID.ToString(), 
                                                   Config.Environment.UserSettings[1].Membername, 
                                                   Config.Environment.UserSettings[1].Password);
            }
            else Assert.Fail("Error: The session does not have the isComplete flag set, SessionID: " + sessionStateAfterGameEnd.SessionID);

            Thread.Sleep(60000);
           
            string loses = GetLeaderboardValue("Losses", Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            Assert.AreEqual<long>(Player2Lose , long.Parse(loses), "Error: Unexpected number of  YouLose notification ");          
   
        }

        private PartnerCompositeGameResult getDefaultGameResult(string gamertag)
        {
            PartnerCompositeGameResult gameResult = new PartnerCompositeGameResult();
            gameResult.Gamertag = gamertag;
            gameResult.Locale = "en-US";
            gameResult.PlatformType = "5";
            gameResult.GameResult = new GameResult();
            gameResult.GameResult.GameId = Constants.TESTGAMEID;
            gameResult.GameResult.GameResultId = Guid.NewGuid();
            gameResult.GameResult.Variant = Constants.TESTGAMEVARIANT;
            gameResult.GameResult.TimeStamp = DateTime.Now;

            gameResult.GameResult.Outcome = "win";
            gameResult.GameResult.Score = 1;
            gameResult.GameResult.Time = 1;
            gameResult.GameResult.Blob = new byte[] { 1, 2, 3 };
            return gameResult;
        }

        private List<PartnerCompositeGameResult> GetDefaultGameResults()
        {
            return GetDefaultGameResults(1);
        }

        private List<PartnerCompositeGameResult> GetDefaultGameResults(int numUsers)
        {
            List<PartnerCompositeGameResult> gameResults = new List<PartnerCompositeGameResult>();
            for (int i = 0; i < numUsers; i++)
                gameResults.Add(getDefaultGameResult(Config.Environment.UserSettings[i].Gamertag));
            return gameResults;
        }

        public string GetLeaderboardValue(string statEntry)
        {
            return GetLeaderboardValue(statEntry, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
        }

        public string GetLeaderboardValue(string statEntry, string userName, string password)
        {
            LeaderboardResult result = this.NotificationsServiceProxy.GetLeaderboard(Constants.TESTGAMEID.ToString(), Constants.TESTGAMEVARIANT.ToString(), "BestScore", "1", "W1", "100", "2", userName, password);
            Assert.IsNotNull(result, "No result was returned");
            Assert.IsNotNull(result.Leaderboard, "No statistics were returned");
            Assert.AreNotEqual(0, result.Leaderboard.Count, "Leaderboard is empty");

            IList<Entry> entryList = result.Leaderboard[0].Statistics;
            IEnumerable<Entry> entries = (from e in entryList
                                          where e.Name == statEntry
                                          select e);
            int numEntries = entries.Count<Entry>();
            Assert.AreEqual(1, numEntries, "Error: Unexpected number of entries in response.");
            return entries.First<Entry>().Value;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\Sessions\JoinSession.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using CloudServices.Test.Common.Configuration;
using Multiplayer.Test.API;
using AsyncMultiplayer.SessionCommon;
using System.Net;
using System.Diagnostics;
using System.Threading;
using AsyncMultiplayer.NotificationService;
using Gds.Contracts;
using LIVEN.Common.Diagnostics;
using Wgx.Services.Monitoring;
using CloudServices.Test.Common.Proxy;

namespace MultiPlayer.Test.API
{
    /// <summary>
    /// Test Cases for Sessions.svc JoinSession API
    /// </summary>
    [TestClass]
    public class JoinSession : TestAreaBase
    {
        private static NotificationTestCommon common = new NotificationTestCommon();

        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
            // Setting this to false to get logs out on TRX files
            Log.LogToFile = false;
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            
            LockTest();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            UnlockTest();
        }

        /// <summary>
        /// BVT test for Sessions.svc JoinSession API
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("BVT for Sessions.svc JoinSession API.")]
        [TestProperty("Type", "BVTs")]
        public void BVT_JoinSession()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            //TODO: this won't always work, as we hardcode accounts and not all environments have two pre-existing users
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);
        }

        /// <summary>
        /// Test for Multiple Players JoinSession
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc JoinSession API to verify Multiple Players JoinSession.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_JoinSession_MultiplePlayers_5()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 5, "Should have at least 5 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            JoinData joinData1 = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            //TODO: this won't always work, as we hardcode accounts and not all environments have four pre-existing users
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState1 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData1);

            AssertJoinSessionState(createSessionState, joinSessionState1);

            string memberName = Config.Environment.UserSettings[0].Membername;      // player1
            string password = Config.Environment.UserSettings[0].Password;

            //Player3 JoinSession
            JoinData joinData2 = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 2);

            //TODO: this won't always work, as we hardcode accounts and not all environments have four pre-existing users
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[2].Membername;      // player3
            this.GameSessionProxy.Password = Config.Environment.UserSettings[2].Password;
            SessionState joinSessionState2 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData2);

            AssertJoinSessionState(joinSessionState1, joinSessionState2);

            //Player4 JoinSession
            JoinData joinData3 = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 3);

            //TODO: this won't always work, as we hardcode accounts and not all environments have four pre-existing users
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[3].Membername;      // player4
            this.GameSessionProxy.Password = Config.Environment.UserSettings[3].Password;
            SessionState joinSessionState3 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData3);

            AssertJoinSessionState(joinSessionState2, joinSessionState3);

            //Player5 JoinSession
            JoinData joinData4 = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 4);

            //TODO: this won't always work, as we hardcode accounts and not all environments have four pre-existing users
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[4].Membername;      // player5
            this.GameSessionProxy.Password = Config.Environment.UserSettings[4].Password;
            SessionState joinSessionState4 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData4);

            AssertJoinSessionState(joinSessionState3, joinSessionState4);
        }

        /// <summary>
        /// Test for a Player Join Multiple Sessions
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc JoinSession API to verify a Player can Join in Multiple Sessions.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_JoinSession_PlayerJoinMultipleSessions()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData1 = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame1");

            //Player1 creates 3 Sessions
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState1 = this.GameSessionProxy.CreateSession(creationData1.GameID.ToString(), creationData1);
            AssertCreateSessionState(creationData1, createSessionState1);

            CreationData creationData2 = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame2");
            SessionState createSessionState2 = this.GameSessionProxy.CreateSession(creationData2.GameID.ToString(), creationData2);
            AssertCreateSessionState(creationData2, createSessionState2);

            CreationData creationData3 = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame3");
            SessionState createSessionState3 = this.GameSessionProxy.CreateSession(creationData3.GameID.ToString(), creationData3);
            AssertCreateSessionState(creationData3, createSessionState3);

            //Player2 Join 3 Sessions
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            JoinData joinData1 = InitializeJoinData(createSessionState1.GameID, createSessionState1.SessionID, 1);

            SessionState joinSessionState1 = this.GameSessionProxy.JoinSession(createSessionState1.SessionID, joinData1);

            AssertJoinSessionState(createSessionState1, joinSessionState1);

            JoinData joinData2 = InitializeJoinData(createSessionState2.GameID, createSessionState2.SessionID, 1);

            SessionState joinSessionState2 = this.GameSessionProxy.JoinSession(createSessionState2.SessionID, joinData2);

            AssertJoinSessionState(createSessionState2, joinSessionState2);

            JoinData joinData3 = InitializeJoinData(createSessionState3.GameID, createSessionState3.SessionID, 1);

            SessionState joinSessionState3 = this.GameSessionProxy.JoinSession(createSessionState3.SessionID, joinData3);

            AssertJoinSessionState(createSessionState3, joinSessionState3);
        }


        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify that invite notification will be deleted once the player acceped the invitation(joins the session)")]
        [TestProperty("Type", "Feature")]
        public void P_JoinSession_InviteNotification()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");
            //Delete preloaded notifications for the users we are going to use
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            common.CheckNotificationCount(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //send invite
            common.SendInviteRequest(createSessionState.SessionID, createSessionState.GameID, false, Config.Environment.UserSettings[1].Membername, 0);

            //verify invitation notification
            VerifyNotification(createSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.Invitation, true, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            Thread.Sleep(20000);

            //verify that invite notification gets deleted after joining a session
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                createSessionState.GameID.ToString(),
                createSessionState.SessionID,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                Notification.NotificationType.Invitation.ToString(),
                false,
                Config.Environment.UserSettings[1].Membername,
                Config.Environment.UserSettings[1].Password,
                null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual(0, notifications.Count, "Error: Unexpected number of notifications.");
        }

        /// <summary>
        /// Test for a Player can Re-JoinSession
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc JoinSession API to verify a Player can Re-Join in Sessions.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_JoinSession_PlayerReJoinSession()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState1 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState1);

            //Player2 LeaveSession
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            this.GameSessionProxy.LeaveSession(joinSessionState1.SessionID.ToString(), joinSessionState1.GameID.ToString());

            //View Session after Leave
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState leaveSessionState = this.GameSessionProxy.ViewSession(joinSessionState1.SessionID.ToString(), joinSessionState1.GameID.ToString());

            //Assert SessionState
            AssertLeaveSessionState(joinSessionState1, leaveSessionState);

            //Player2 Re-Join Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            JoinData joinData2 = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState2 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData2);

            AssertJoinSessionState(createSessionState, joinSessionState2);
        }

        /// <summary>
        /// Test to verify Owner of one Session can JoinSession owned by another user
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc JoinSession API to verify Owner of one session can Join in Session owned by another User.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_JoinSession_OwnerJoinOtherSession()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData1 = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame1");

            //Player1 creates Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState1 = this.GameSessionProxy.CreateSession(creationData1.GameID.ToString(), creationData1);
            AssertCreateSessionState(creationData1, createSessionState1);

            //Player2 Create another Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            CreationData creationData2 = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame2");

            SessionState createSessionState2 = this.GameSessionProxy.CreateSession(creationData2.GameID.ToString(), creationData2);

            AssertCreateSessionState(creationData2, createSessionState2);

            //Player1 JoinSession in Session Created by Player2
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            JoinData joinData = InitializeJoinData(createSessionState2.GameID, createSessionState2.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState2.SessionID, joinData);

            AssertJoinSessionState(createSessionState2, joinSessionState);
        }

        /// <summary>
        /// Test to verify Owner Re-JoinSession when no other players not joined yet
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc JoinSession API to verify Owner of one session can Join in Session owned by another User.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_JoinSession_OwnerReJoinSession_NoPlayersInSession()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame1");

            //Player1 creates Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //related bugs 1987, 3300 gets Fixed
            this.GameSessionProxy.LeaveSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Verify that playet is out of the session
            try
            {
                this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());
                Assert.Fail("Expecting Forbidden since the user should not be in the session by now.");
            }
            catch (RestException ex)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.UserNotAllowedToGetStateInSession), ex.Response);
            }

            //Player1 Re-JoinSession
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 0);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            createSessionState.SeatsAvailable++; //as a player left the session
            AssertJoinSessionState(createSessionState, joinSessionState);
        }

        /// <summary>
        /// Test to verify Owner Re-JoinSession when no other players not joined yet
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc JoinSession API to verify player Join in Session in which no other players exists, Owner also left session.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_JoinSession_PlayerJoinSession_NoPlayersInSession()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame1");

            //Player1 creates Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player1 LeaveSession
            //Fix LivenErrorCode after bugs 3300 gets Fixed
            this.GameSessionProxy.LeaveSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            SessionState leaveSessionState = null;
            //View Session after Leave
            try
            {
                leaveSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());
                Assert.Fail("Expecting Forbidden as player should not be in the session anymore.");
            }
            catch (RestException rx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.UserNotAllowedToGetStateInSession), rx.Response);
            }


            //Player2 JoinSession
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);
        }

        /// <summary>
        /// Test for a Player JoinSession onto a Seat Left by another player
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc JoinSession API to verify a Player can JoinSession on a Seat Left by another player.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_JoinSession_PlayerJoinSession_OnSeatLeftByAnotherPlayer()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 3, "Should have at least 3 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState1 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState1);

            //Player2 LeaveSession
            this.GameSessionProxy.LeaveSession(joinSessionState1.SessionID.ToString(), joinSessionState1.GameID.ToString());

            //View Session after Leave
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState leaveSessionState = this.GameSessionProxy.ViewSession(joinSessionState1.SessionID.ToString(), joinSessionState1.GameID.ToString());

            //Assert SessionState
            AssertLeaveSessionState(joinSessionState1, leaveSessionState);

            //Player3 JoinSession on Seat 1 (Seat Left by Player2)
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[2].Membername;      // player3
            this.GameSessionProxy.Password = Config.Environment.UserSettings[2].Password;
            JoinData joinData2 = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState2 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData2);

            AssertJoinSessionState(createSessionState, joinSessionState2);
        }

        /// <summary>
        /// Test for a Player JoinSession onto a Seat Left by another player
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc JoinSession API to verify a Player can JoinSession on a ActiveSeat (Empty Seat set as ActiveSeat before Player join session .")]
        [TestProperty("Type", "FeatureTests")]
        public void P_JoinSession_PlayerJoinSession_OnEmptyActiveSeat()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 3, "Should have at least 3 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState1 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState1);

            //PutGameState by player 1 to ser seat index 5 as Active Seat
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 5;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;
            this.GameStateProxy.PutGameState(joinSessionState1.SessionID, joinSessionState1.GameID.ToString(), modifiableGameState);

            //View Session after PutGameState
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState afterPutSessionState = this.GameSessionProxy.ViewSession(joinSessionState1.SessionID.ToString(), joinSessionState1.GameID.ToString());

            //Assert SessionState
            Assert.AreEqual<int>(modifiableGameState.ActiveSeatIndex, afterPutSessionState.State.ActiveSeatIndex, "PutGameState did not set GameState correctly");

            //Player3 JoinSession on Seat 5 (Empty Seat set as ActiveSeat by Player1)
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[2].Membername;      // player3
            this.GameSessionProxy.Password = Config.Environment.UserSettings[2].Password;
            JoinData joinData2 = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, modifiableGameState.ActiveSeatIndex);

            SessionState joinSessionState2 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData2);

            //ViewSession by player 3 after player 3 join on to Empty ActiveSeat
            SessionState afterJoinSessionState = this.GameSessionProxy.ViewSession(joinSessionState1.SessionID.ToString(), joinSessionState1.GameID.ToString());

            Assert.AreEqual(joinData2.SeatIndex, afterJoinSessionState.ActorSeat, "Actor seat is not correct");
            Assert.AreEqual(joinData2.SeatIndex, afterJoinSessionState.State.ActiveSeatIndex, "Player did not join on Empty ActiveSeat");
        }

        /// <summary>
        /// Test for a Player JoinSession - Try JoinSession after RejectInvitation
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc JoinSession API to verify a Player try to join session after Reject Invitation.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_JoinSession_AfterRejectInvitation()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");
            //Delete preloaded notifications for the users we are going to use
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            common.CheckNotificationCount(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //send invite
            common.SendInviteRequest(createSessionState.SessionID, createSessionState.GameID, false, Config.Environment.UserSettings[1].Membername, 0);

            //verify invitation notification
            VerifyNotification(createSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.Invitation, true, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            //RejectInvitation
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;   // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            this.GameSessionProxy.RejectInvitation(createSessionState.GameID.ToString(), createSessionState.SessionID);

            string memberName = Config.Environment.UserSettings[1].Membername;      // player2
            string password = Config.Environment.UserSettings[1].Password;

            List<Notification> postRejectNotifications = null;

            for (int i = 0; i < 10; i++)
            {
                Thread.Sleep(notificationSleepTime);

                postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (postRejectNotifications != null && postRejectNotifications.Count == 0)
                {
                    break;
                }
            }

            Assert.IsNotNull(postRejectNotifications);
            Assert.IsTrue(postRejectNotifications.Count == 0, "ERROR: Unexpected Number of notifications.");

            //JoinSession after RejectInvitation
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //ViewSession after JoinSession
            SessionState afterJoinSessionState = this.GameSessionProxy.ViewSession(joinSessionState.SessionID, joinSessionState.GameID.ToString());

            AssertJoinSessionState(createSessionState, afterJoinSessionState);
        }

        /// <summary>
        /// Test for a Player JoinSession to Session already ended
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc JoinSession API to verify a Player JoinSession to Session already ended.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_JoinSession_SessionEnded()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 3, "Should have at least 3 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState1 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState1);

            //PutGameState - Make Move by Player1
            ModifiableGameState modifiableGameState1 = new ModifiableGameState();
            modifiableGameState1.ActiveSeatIndex = 1;
            modifiableGameState1.GameData = new byte[] { 51, 52, 53, 54, 55 };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;
            this.GameStateProxy.PutGameState(joinSessionState1.SessionID, joinSessionState1.GameID.ToString(), modifiableGameState1);

            FullGameState modifiedGameState1 = this.GameStateProxy.GetGameState(joinSessionState1.SessionID.ToString(), joinSessionState1.GameID.ToString());

            //Assert Modified GameState
            AssertGameState(modifiableGameState1, modifiedGameState1);

            //PutGameState - Make Move by Player2
            ModifiableGameState modifiableGameState2 = new ModifiableGameState();
            modifiableGameState2.ActiveSeatIndex = 0;
            modifiableGameState2.GameData = new byte[] { 56, 57, 58, 59, 60 };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameStateProxy.Password = Config.Environment.UserSettings[1].Password;
            this.GameStateProxy.PutGameState(joinSessionState1.SessionID, joinSessionState1.GameID.ToString(), modifiableGameState2);

            FullGameState modifiedGameState2 = this.GameStateProxy.GetGameState(joinSessionState1.SessionID.ToString(), joinSessionState1.GameID.ToString());

            //Assert Modified GameState
            AssertGameState(modifiableGameState2, modifiedGameState2);

            //PostGameEnd by Player1 to End Game
            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState1.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 10,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState1.Variant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState1.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 10,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState1.Variant
            };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;
            this.GameStateProxy.PostGameEnd(joinSessionState1.SessionID, joinSessionState1.GameID.ToString(), gameResults);

            //get Session state & Verify
            SessionState sessionStateAfterGameEnd = this.GameSessionProxy.ViewSession(joinSessionState1.SessionID, joinSessionState1.GameID.ToString());

            Assert.IsTrue(sessionStateAfterGameEnd.State.IsComplete, "Error: The session does not have the isComplete flag set, SessionID: " + sessionStateAfterGameEnd.SessionID);

            //Player3 try to JoinSession to Session already ended
            //TODO: Currently it's allowing players to join after session ended - we should not allow this
            //Add verification in catch block after Bug 1828 gets Fixed
            try
            {
                this.GameSessionProxy.UserID = Config.Environment.UserSettings[2].Membername;      // player3
                this.GameSessionProxy.Password = Config.Environment.UserSettings[2].Password;

                JoinData joinData2 = InitializeJoinData(joinSessionState1.GameID, joinSessionState1.SessionID, 2);

                SessionState joinSessionState2 = this.GameSessionProxy.JoinSession(joinSessionState1.SessionID, joinData2);

                Assert.Fail(String.Format("Player is able to JoinSession after Session has been Ended"));
            }
            catch (RestException restEx)
            {
                string message = restEx.Message;
            }
        }

        /// <summary>
        /// Test for a Player JoinSession - Try Join Multiple Times to same Session
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc JoinSession API to verify a Player try to join same Session Multiple times.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_JoinSession_PlayerJoinSessionMultipleTimes()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            JoinData joinData1 = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState1 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData1);

            AssertJoinSessionState(createSessionState, joinSessionState1);

            //Player2 JoinSession 2nd time
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            JoinData joinData2 = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 2);

            SessionState joinSessionState2 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData2);
            AssertJoinSessionState(createSessionState, joinSessionState2);
        }

        /// <summary>
        /// Test for a Player JoinSession - Try Join on to Occupied Seat
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc JoinSession API to verify a Player try to join session on occupied seat.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_JoinSession_PlayerJoinSessionOnOccupiedSeat()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 3, "Should have at least 3 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            JoinData joinData1 = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState1 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData1);

            AssertJoinSessionState(createSessionState, joinSessionState1);

            try
            {
                //Player3 JoinSession on to the Player2's Seat
                this.GameSessionProxy.UserID = Config.Environment.UserSettings[2].Membername;      // player3
                this.GameSessionProxy.Password = Config.Environment.UserSettings[2].Password;

                JoinData joinData2 = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

                SessionState joinSessionState2 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData2);

                Assert.Fail("Player is able to Join Session on to Occupied Seat");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SeatAlreadyTaken), restEx.Response);
            }
        }

        /// <summary>
        /// Test for a Player JoinSession - InvalidSessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc JoinSession API to verify a Player try to join session with invalid SessionID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_JoinSession_NotExistSessionID()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            //Player JoinSession with Invalid SessionID
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            JoinData joinData1 = InitializeJoinData(Constants.TESTGAMEID, "j6b048d0-15gd-4i9d-8f65-91bz93s762f5" , 1);

            try
            {
                SessionState joinSessionState1 = this.GameSessionProxy.JoinSession("j6b048d0-15gd-4i9d-8f65-91bz93s762f5", joinData1);
            }
            catch (RestException restEx)
            {
                //TODO: Currently it's throwing 500 HTTP code. Filed bug 4167. Update HTTP Status Code if 4167 is Fixed to change the HTTP Status Code
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// Test for a Player JoinSession - String.Empty as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc JoinSession API to verify a Player try to join session with String.Empty as SessionID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_JoinSession_EmptyStringSessionID()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            //Player JoinSession with Invalid SessionID
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            JoinData joinData1 = InitializeJoinData(Constants.TESTGAMEID, String.Empty, 1);

            try
            {
                SessionState joinSessionState1 = this.GameSessionProxy.JoinSession(String.Empty, joinData1);
                Assert.Fail("Error: Expected NOT FOUND error but it didn't");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, restEx.Response);
            }
        }

        /// <summary>
        /// Test for a Player JoinSession - null as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc JoinSession API to verify a Player try to join session with null as SessionID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_JoinSession_NullAsSessionID()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            //Player JoinSession with Invalid SessionID
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            JoinData joinData1 = InitializeJoinData(Constants.TESTGAMEID, null, 1);

            try
            {
                SessionState joinSessionState1 = this.GameSessionProxy.JoinSession(null, joinData1);
                Assert.Fail("Error: Expected NOT FOUND error but it didn't");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, restEx.Response);
            }
        }

        /// <summary>
        /// Test for a Player JoinSession - LongString as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc JoinSession API to verify a Player try to join session with max Length string (> 64 characters) as SessionID. SessionID length max at 64")]
        [TestProperty("Type", "FeatureTests")]
        public void N_JoinSession_MaxLengthStringAsSessionID()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            //Player JoinSession with Invalid SessionID
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            JoinData joinData1 = InitializeJoinData(Constants.TESTGAMEID, "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz012", 1);

            try
            {
                SessionState joinSessionState1 = this.GameSessionProxy.JoinSession("j6b048d0-15gd-4i9d-8f65-91bz93s762f5-j6b048d0-15gd-4i9d-8f65-91bz93s762f5-j6b048d0-15gd-4i9d-8f65-91bz93s762f5-j6b048d0-15gd-4i9d-8f65-91bz93s762f5", joinData1);
            }
            catch (RestException restEx)
            {
                //TODO: Currently it's throwing 500 HTTP code. Filed bug 4167. Update HTTP Status Code if 4167 is Fixed to change the HTTP Status Code
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// Test for a Player JoinSession - One Char String as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc JoinSession API to verify a Player try to join session with one char string as SessionID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_JoinSession_OneCharStringAsSessionID()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            //Player JoinSession with Invalid SessionID
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            JoinData joinData1 = InitializeJoinData(Constants.TESTGAMEID, "1", 1);

            try
            {
                SessionState joinSessionState1 = this.GameSessionProxy.JoinSession("1", joinData1);
            }
            catch (RestException restEx)
            {
                //TODO: Currently it's throwing 500 HTTP code. Filed bug 4167. Update HTTP Status Code if 4167 is Fixed to change the HTTP Status Code
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }
                      
        /// <summary>
        /// Verify JoinSession with JoinData.SeatIndex = int.Minvalue
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call POST on GameSessionService to submit JoinSession with JoinData.SeatIndex = 0")]
        [TestProperty("Type", "FeatureTests")]
        public void N_JoinSession_MinSeatIndex()
        {
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession with Invalid GameID
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, int.MinValue);

            try
            {
                SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);
                Assert.Fail("Player is able to join on Seat Index as int.MinValue");
            }
            catch (RestException restEx)
            {
                //TODO: Add Exception Verification when Bug 5919 is fixed
                string msg = restEx.Message;
            }
        }

        /// <summary>
        /// Verify JoinSession with JoinData.SeatIndex = int.MaxValue
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call POST on GameSessionService to submit JoinSession with JoinData.SeatIndex = 0")]
        [TestProperty("Type", "FeatureTests")]
        public void N_JoinSession_MaxSeatIndex()
        {
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession with Invalid GameID
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, int.MaxValue);

            try
            {
                SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);
                Assert.Fail("Player is able to JoinSession with JoinData.SeatIndex set to int.MaxValue");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidSeatIndex), restEx.Response);
            }
        }

        /// <summary>
        /// Verify JoinSession with JoinData.SeatIndex = 0
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call POST on GameSessionService to submit JoinSession with JoinData.SeatIndex = 0")]
        [TestProperty("Type", "FeatureTests")]
        public void N_JoinSession_ZeroSeatIndex()
        {
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession with Invalid GameID
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 0);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);
            AssertJoinSessionState(createSessionState, joinSessionState);
        }

        /// <summary>
        /// Verify JoinSession with JoinData.SeatIndex = 0
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call POST on GameSessionService to submit JoinSession with JoinData.SeatIndex = 0")]
        [TestProperty("Type", "FeatureTests")]
        public void N_JoinSession_NegativeSeatIndex()
        {
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession with Invalid GameID
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, -1);

            try
            {
                SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);
                Assert.Fail("Player is able to join on Seat Index as -1");
            }
            catch (RestException restEx)
            {
                //TODO: Add Exception Verification when Bug 5919 is fixed
                string msg = restEx.Message;
            }
        }

        /// <summary>
        /// Verify JoinSession with OutOfRange SeatIndex
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call POST on GameSessionService to submit JoinSession with OutOfRange SeatIndex")]
        [TestProperty("Type", "FeatureTests")]
        public void N_JoinSession_OutOfRangeSeatIndex()
        {
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession with Invalid GameID
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 11);

            try
            {
                SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);
                Assert.Fail("Player is able to JoinSession on OutOfRange SeatIndex");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidSeatIndex), restEx.Response);
            }
        }

        /// <summary>
        /// Verify JoinSession with No SeatIndex in JoinData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call POST on GameSessionService to submit JoinSession with No SeatIndex")]
        [TestProperty("Type", "FeatureTests")]
        public void N_JoinSession_NoSeatIndex()
        {
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession with Invalid GameID
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            JoinData joinData = new JoinData();
            joinData.GameID = createSessionState.GameID;
            joinData.SessionID = createSessionState.SessionID;
            joinData.SeatParameters = new byte[] { 1, 2, 3 };

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);
            AssertJoinSessionState(createSessionState, joinSessionState);
        }

        /// <summary>
        /// Verify JoinSession with Null SeatParameters in JoinData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call POST on GameSessionService to submit JoinSession with Null SeatParameters")]
        [TestProperty("Type", "FeatureTests")]
        public void N_JoinSession_NullByteArraySeatParameters()
        {
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession with Invalid GameID
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            JoinData joinData = new JoinData();
            joinData.SeatIndex = 1;
            joinData.GameID = createSessionState.GameID;
            joinData.SessionID = createSessionState.SessionID;
            joinData.SeatParameters = null;

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);
            AssertJoinSessionState(createSessionState, joinSessionState);
        }

        /// <summary>
        /// Verify JoinSession with  GameID not matching TitleID in partner token
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Call POST on GameSessionService to submit JoinSession with  GameID not matching TitleId in partner token")]
        [TestProperty("Type", "FeatureTests")]
        public void N_JoinSession_GameIdNotMatchPartnerTokenTitleID()
        {
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession with GameID as unit.Min
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            Random rndm = new Random();
            uint RandomGameId = uint.MinValue;
            do
            {
                RandomGameId = (uint)rndm.Next();
            }
            while (uint.Parse(Config.Environment.StsSettings.TitleId) == RandomGameId);

            JoinData joinData = InitializeJoinData(RandomGameId, createSessionState.SessionID, 1);

            try
            {
                SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);
                Assert.Fail(string.Format("JoinSession should not be allowed for an invalid game ID ({0})", RandomGameId.ToString()));
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDDoesNotMatchPartnerTokenTitleID), restEx.Response);
            }
        }

        /// <summary>
        /// Test for a Player JoinSession - no GameID passed
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc JoinSession API to verify a Player try to join session with no GameID passed.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_JoinSession_NoGameIdPassedToJoinSession()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            //Player JoinSession with Invalid SessionID
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            JoinData joinData = new JoinData();
            joinData.SessionID = createSessionState.SessionID;
            joinData.SeatIndex = 1;
            joinData.SeatParameters = new byte[] { 4, 5, 6 };
            try
            {
                SessionState joinSessionState1 = this.GameSessionProxy.JoinSession(joinData.SessionID, joinData);
                Assert.Fail("Error: Player wasn't expected to join session when no GameId is passed");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDDoesNotMatchPartnerTokenTitleID), restEx.Response);
            }
        }

        /// <summary>
        /// Test for a Player JoinSession onto a Seat Left by Owner
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc JoinSession API to verify a Player  JoinSession on a Seat Left by Owner.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_JoinSession_ThirdPlayerJoinedOnSeatLeftByOwner()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 3, "Should have at least 3 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");

            //Player1 creates Session
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                                  Config.Environment.UserSettings[0].Membername, 
                                                                                  Config.Environment.UserSettings[0].Password);
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState1 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                               Config.Environment.UserSettings[1].Membername, 
                                                                               Config.Environment.UserSettings[1].Password);

            AssertJoinSessionState(createSessionState, joinSessionState1);

            //Owner LeaveSession
            this.GameSessionProxy.LeaveSession(joinSessionState1.SessionID.ToString(), 
                                               joinSessionState1.GameID.ToString(),
                                               Config.Environment.UserSettings[0].Membername, 
                                               Config.Environment.UserSettings[0].Password);           

            //Player3 JoinSession on Seat 0 left by owner
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[2].Membername;      // player3
            this.GameSessionProxy.Password = Config.Environment.UserSettings[2].Password;
            JoinData joinData2 = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 0);

            SessionState joinSessionState2 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData2, 
                                                                               Config.Environment.UserSettings[2].Membername, 
                                                                               Config.Environment.UserSettings[2].Password);
            foreach(var seat in joinSessionState2.Seats)
            {
                if (seat.Profile.PublicToken.Equals(Config.Environment.UserSettings[1].Gamertag))
                {
                    Assert.AreEqual<int>(1, seat.Index, "Error: Seat Index for player2 is  expected to be 1 but got"+seat.Index.ToString());
                }
                else if (seat.Profile.PublicToken.Equals(Config.Environment.UserSettings[2].Gamertag))
                {
                    Assert.AreEqual<int>(0, seat.Index, "Error: Seat Index for player3 is  expected to be 0 but got" + seat.Index.ToString());
                }
                else
                {
                    Assert.Fail("Error: Unexpected player joined the session at seat index"+ seat.Index.ToString());
                }
            }
        }

        /// <summary>
        ///Test for Sessions.svc JoinSession API to verify a Player Can Join session indefinetely:Unaffected by Azure Table Inconsistency
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc JoinSession API to verify a Player Can Join session indefinetely:Unaffected by Azure Table Inconsistency.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_JoinSession_JoinSessionAgain_AzureInconsistency()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 3, "Should have at least 3 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");

            //Player1 creates Session
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                                  Config.Environment.UserSettings[0].Membername,
                                                                                  Config.Environment.UserSettings[0].Password);

            AssertCreateSessionState(creationData, createSessionState);
            

            //Player2 JoinSession
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState1 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                               Config.Environment.UserSettings[1].Membername,
                                                                               Config.Environment.UserSettings[1].Password);

            AssertJoinSessionState(createSessionState, joinSessionState1);

            Assert.IsTrue(joinSessionState1.Seats.Length == 2, "Error: Expected Number of seats is expected to be 2 but got " +
                          joinSessionState1.Seats.Length.ToString());

            //Player2 JoinSession again and again ....
            SessionState[] joinSessionArray = new SessionState[5];
            int SessionCounter=0;

            do
            {
                joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID,SessionCounter+2);

                joinSessionArray[SessionCounter] = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                                   Config.Environment.UserSettings[1].Membername,
                                                                                   Config.Environment.UserSettings[1].Password);

                AssertJoinSessionState(createSessionState, joinSessionArray[SessionCounter]);


                Assert.IsTrue(joinSessionArray[SessionCounter].Seats.Length == 2, "Error: Expected  Number of seats is expected to be 2 but got " +
                              joinSessionArray[SessionCounter].Seats.Length.ToString());
                SessionCounter++;
            }
            while (SessionCounter < joinSessionArray.Length);
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\Partner\DeleteNotificationBySession_Partner.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using AsyncMultiplayer.NotificationService;
using CloudServices.Test.Common.Configuration;
using CloudServices.Test.Common.Proxy;
using System.Web;
using System.Threading;
using System.Net;
using AsyncMultiplayer.PartnerService.DataContracts;

namespace Multiplayer.Test.API
{
    /// <summary>
    /// Summary description for DeleteNotificationBySession_Partner
    /// </summary>
    [TestClass]
    public class DeleteNotificationBySession_Partner : TestAreaBase
    {
        private static NotificationTestCommon common = new NotificationTestCommon();
        private static PartnerServiceProxy partnerClient = null;

        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
            Log.LogToFile = false;
            partnerClient = new PartnerServiceProxy();
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            LockTest();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            try
            {
                common.TestCleanup();
            }
            finally
            {
                UnlockTest();
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Verifies that DeleteNotificationBySession deletes the notification for that session and user.")]
        [TestProperty("Type", "BVTs")]
        public void BVT_DelNotifBySession_Partner()
        {
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);;

            NotificationTestCommon.testHooksClient.CreateDummyNotification();

            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual(1, notifications.Count, "ERROR: Unexpected Number of notifications.");

            partnerClient.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, Config.Environment.UserSettings[0].Gamertag + ";");

            VerifyDelete();
        }
        
        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verifies that DeleteNotificationBySession deletes notifications of only that sessionId.")]
        [TestProperty("Type", "Features")]
        public void P_DelNotifBySession_Partner_TwoSessions()
        {
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);;

            NotificationTestCommon.testHooksClient.CreateDummyNotification();
            string sessionId1 = NotificationTestCommon.testHooksClient.TestSessionId;

            
            NotificationTestCommon.testHooksClient.CreateDummyNotification();

            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual(1, notifications.Count, "ERROR: Unexpected Number of notifications.");

            notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), sessionId1, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual(1, notifications.Count, "ERROR: Unexpected Number of notifications.");

            partnerClient.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, Config.Environment.UserSettings[0].Gamertag + ";");

            VerifyDelete(); // for sessionId = NotificationTestCommon.testHooksClient.TestSessionId

            // verify not deleted for sessionId = sessionId1
            notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), sessionId1, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual(1, notifications.Count, "ERROR: Unexpected Number of notifications.");

            partnerClient.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), sessionId1, Config.Environment.UserSettings[0].Gamertag + ";");

            // verify deleted for sessionId = sessionId1
            VerifyDelete(sessionId1, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verifies that DeleteNotificationBySession deletes notifications of all the gamertags.")]
        [TestProperty("Type", "Features")]
        public void P_DelNotifBySession_Partner_ManyGamerTags()
        {
            Assert.IsTrue(2 <= Config.Environment.UserSettings.Count, "We need at least two users for this test.");
            StringBuilder gamertags = new StringBuilder();
            for (int i = 0; i < Config.Environment.UserSettings.Count; i++)
            {
                common.CheckNotificationCount(Config.Environment.UserSettings[i].Membername, Config.Environment.UserSettings[i].Password);
                NotificationTestCommon.testHooksClient.CreateNotification(
                    Notification.NotificationType.YouWin,
                    Constants.TESTGAMEID,
                    NotificationTestCommon.testHooksClient.TestSessionId,
                    4,
                    CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[i].Membername, Config.Environment.UserSettings[i].Password),
                    Constants.TESTGAMEVARIANT);
                List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, Config.Environment.UserSettings[i].Membername, Config.Environment.UserSettings[i].Password, null);
                Assert.IsNotNull(notifications);
                Assert.AreEqual(1, notifications.Count, "ERROR: Unexpected Number of notifications.");
                gamertags.Append(Config.Environment.UserSettings[i].Gamertag + ";");
            }

            partnerClient.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, gamertags.ToString());

            for (int i = 0; i < Config.Environment.UserSettings.Count; i++)
                VerifyDelete(NotificationTestCommon.testHooksClient.TestSessionId, Config.Environment.UserSettings[i].Membername, Config.Environment.UserSettings[i].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verifies that DeleteNotificationBySession deletes notifications of only that gamertag.")]
        [TestProperty("Type", "Features")]
        public void P_DelNotifBySession_Partner_TwoUsers()
        {
            Assert.IsTrue(2 <= Config.Environment.UserSettings.Count, "We need at least two users for this test.");
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);;
            common.CheckNotificationCount(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            NotificationTestCommon.testHooksClient.CreateDummyNotification();    //create notificationfor first user
            NotificationTestCommon.testHooksClient.CreateNotification(
                Notification.NotificationType.YouWin,
                Constants.TESTGAMEID,
                NotificationTestCommon.testHooksClient.TestSessionId,
                4,
                CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password),
                Constants.TESTGAMEVARIANT);                                      // create notification for second user

            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual(1, notifications.Count, "ERROR: Unexpected Number of notifications.");

            notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password, null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual(1, notifications.Count, "ERROR: Unexpected Number of notifications.");

            partnerClient.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, Config.Environment.UserSettings[0].Gamertag + ";");

            VerifyDelete(); // for user0

            //Verify not deleted for user1
            notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password, null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual(1, notifications.Count, "ERROR: Unexpected Number of notifications.");

            partnerClient.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, Config.Environment.UserSettings[1].Gamertag + ";");

            //Verify deleted for user1
            VerifyDelete(NotificationTestCommon.testHooksClient.TestSessionId, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Verifies delete does not throw an error when there is no notification for the user")]
        [TestProperty("Type", "Features")]
        public void P_DelNotifBySession_Partner_WithoutCreatingAny()
        {
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);;
            partnerClient.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, Config.Environment.UserSettings[0].Gamertag + ";");
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify users last update time is updated after delete")]
        [TestProperty("Type", "Features")]
        public void P_DelNotifBySession_Partner_Etag()
        {
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);;

            NotificationTestCommon.testHooksClient.CreateDummyNotification();

            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual(1, notifications.Count, "ERROR: Unexpected Number of notifications.");
            string etag = this.NotificationsServiceProxy.EtagInResponse;

            Thread.Sleep(1000); // to keep one sec difference between get and delete calls

            partnerClient.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, Config.Environment.UserSettings[0].Gamertag + ";");

            Thread.Sleep(5000); // to give time to process the delete request

            notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, etag);
            Assert.IsNotNull(notifications);
            Assert.AreEqual(0, notifications.Count, "ERROR: Unexpected Number of notifications.");
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify users last update time is updated after delete for all gamertags")]
        [TestProperty("Type", "Features")]
        public void P_DelNotifBySession_Partner_ManyGamertags_Etag()
        {
            Assert.IsTrue(2 <= Config.Environment.UserSettings.Count, "We need at least two users for this test.");
            StringBuilder gamertags = new StringBuilder();
            List<string> etags = new List<string>();
            for (int i = 0; i < Config.Environment.UserSettings.Count; i++)
            {
                common.CheckNotificationCount(Config.Environment.UserSettings[i].Membername, Config.Environment.UserSettings[i].Password);
                NotificationTestCommon.testHooksClient.CreateNotification(
                    Notification.NotificationType.YouWin,
                    Constants.TESTGAMEID,
                    NotificationTestCommon.testHooksClient.TestSessionId,
                    4,
                    CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[i].Membername, Config.Environment.UserSettings[i].Password),
                    Constants.TESTGAMEVARIANT);
                List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, Config.Environment.UserSettings[i].Membername, Config.Environment.UserSettings[i].Password, null);
                Assert.IsNotNull(notifications);
                Assert.AreEqual(1, notifications.Count, "ERROR: Unexpected Number of notifications.");
                etags.Add(this.NotificationsServiceProxy.EtagInResponse);
                gamertags.Append(Config.Environment.UserSettings[i].Gamertag + ";");
            }

            Thread.Sleep(1000); // to keep one sec difference between get and delete calls

            partnerClient.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, gamertags.ToString());

            Thread.Sleep(5000); // to give time to process the delete request

            for (int i = 0; i < Config.Environment.UserSettings.Count; i++)
            {
                List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, Config.Environment.UserSettings[i].Membername, Config.Environment.UserSettings[i].Password, etags[i]);
                Assert.IsNotNull(notifications);
                Assert.AreEqual(0, notifications.Count, "ERROR: Unexpected Number of notifications.");
            }
        }

        //this is a big related to 3302
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify users last update time will not be updated if no no notification actually got deleted by a delete call.")]
        [TestProperty("Type", "Features")]
        public void N_DelNotifBySession_Partner_EtagAfterFalseDelete()
        {
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);;

            NotificationTestCommon.testHooksClient.CreateDummyNotification();

            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual(1, notifications.Count, "ERROR: Unexpected Number of notifications.");
            string etag = this.NotificationsServiceProxy.EtagInResponse;

            Thread.Sleep(1000); // to keep one sec difference between get and delete calls

            partnerClient.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), Guid.NewGuid().ToString(), Config.Environment.UserSettings[0].Gamertag + ";");

            Thread.Sleep(5000); // to give time to process the delete request

            try
            {
                notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, etag);
                Assert.Fail("Expecting 304");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotModified, e.Response.Status);
                //verify that the notification was not deleted
                notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);
                Assert.IsNotNull(notifications);
                Assert.AreEqual(1, notifications.Count, "ERROR: Unexpected Number of notifications.");
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify users last update time will not be updated with unsuccessful delete call.")]
        [TestProperty("Type", "Features")]
        public void N_DelNotifBySession_Partner_Etag_FailedDelete()
        {
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);;

            NotificationTestCommon.testHooksClient.CreateDummyNotification();

            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual(1, notifications.Count, "ERROR: Unexpected Number of notifications.");
            string etag = this.NotificationsServiceProxy.EtagInResponse;

            Thread.Sleep(1000); // to keep one sec difference between get and delete calls
            try
            {
                PartnerDeleteRequest deleteRequest = new PartnerDeleteRequest();
                partnerClient.DeleteNotificationBySession(deleteRequest);
                Assert.Fail("Expecting a bad request");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, e.Response.Status);
                Thread.Sleep(5000); // sleep anyway to make sure that some time has elapsed after the delete call
                try
                {
                    notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password, etag);
                    Assert.Fail("Expecting 304");
                }
                catch (RestException ex)
                {
                    Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotModified, ex.Response.Status);
                }
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify error for nonexistent gameId")]
        [TestProperty("Type", "Features")]
        public void N_DelNotifBySession_Partner_GameId0()
        {
            NotificationTestCommon.testHooksClient.CreateDummyNotification();
            try
            {
                partnerClient.DeleteNotificationBySession("0", NotificationTestCommon.testHooksClient.TestSessionId, Config.Environment.UserSettings[0].Gamertag + ";");
                Assert.Fail("Expecting a bad request");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, e.Response.Status);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify error for nonexistent gamertag")]
        [TestProperty("Type", "Features")]
        public void N_DelNotifBySession_Partner_NonexistentGamertag()
        {
            try
            {
                partnerClient.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), Guid.NewGuid().ToString(), "sfhy;");
                Assert.Fail("Expecting a bad request");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, e.Response.Status);
            }

        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify error for null sessionId")]
        [TestProperty("Type", "Features")]
        public void N_DelNotifBySession_Partner_NullSessionId()
        {
            try
            {
                partnerClient.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), null, Config.Environment.UserSettings[0].Gamertag + ";");
                Assert.Fail("Expecting a bad request");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, e.Response.Status);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify error for nonexistent sessionId")]
        [TestProperty("Type", "Features")]
        public void N_DelNotifBySession_Partner_EmptySessionId()
        {
            try
            {
                partnerClient.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), string.Empty, Config.Environment.UserSettings[0].Gamertag + ";");
                Assert.Fail("Expecting a bad request");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, e.Response.Status);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify error for empty gamertag")]
        [TestProperty("Type", "Features")]
        public void N_DelNotifBySession_Partner_emptyGamertag()
        {
            try
            {
                partnerClient.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), Guid.NewGuid().ToString(), string.Empty);
                Assert.Fail("Expecting a bad request");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, e.Response.Status);
            }

        }

        //TODO: add tests around deleting a gameId that the partner does not own... After authorization is implemented.

        private static void VerifyDelete()
        {
            VerifyDelete(NotificationTestCommon.testHooksClient.TestSessionId, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
        }

        private static void VerifyDelete(string sessionId, string userName, string password)
        {
            for (int i = 0; i < 10; i++)
            {
                if (0 == common.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), sessionId, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, userName, password, null).Count)
                    break;
                else
                    Thread.Sleep(500);
            }
            Assert.AreEqual(0, common.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), sessionId, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, userName, password, null).Count, "ERROR: Unexpected Number of notifications.");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\Performance\PerfScenarios.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using AsyncMultiplayer.SessionCommon;
using AsyncMultiplayer.NotificationService;
using System.Xml; //.Linq;
using System.Net; //.Mail;
using CosmosTest.Common;
using Cosmos.Core.Exceptions;
using Gds.Contracts;
using Multiplayer.Test.Proxy;
using CloudServices.Test.Common.Configuration;

namespace Multiplayer.Test.API
{

    /// <summary>
    /// Summary description for perf scenarios
    /// </summary>
    [TestClass]
    public class PerfScenarios : TestAreaBase
    {
        private Random randomGenerator = new Random();
        private static Dictionary<string, bool> isSpotlightLocalePopulated = new Dictionary<string, bool>();
        private static int CosmosCacheTimeoutInMinutes = Config.Environment.CosmosCacheTimeoutInMinutes;
        private NotificationTestCommon notificationTestCommon = null;

        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
            // Setting this to false to get logs out on TRX files
            Log.LogToFile = false;
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            this.notificationTestCommon = new NotificationTestCommon();
            LockTest("multiplayer.perf");
            CosmosTestHooks.PopulateFiveSpotlightEntries("en-US", false);
        }

        [TestCleanup]
        public void TestCleanup()
        {
            UnlockTest("multiplayer.perf");
        }


        [TestMethod, Owner("amathes"), Priority(1)]
        [Description("Lightweight GetSpotlight test for perf")]
        [TestProperty("Type", "Perf")]
        public void GetSpotlight()
        {
            List<Spotlight> spotlightEntries = this.NotificationsServiceProxy.GetSpotlight("Test");

            Assert.IsNotNull(spotlightEntries);
            Assert.AreEqual(5, spotlightEntries.Count, "ERROR: Wrong number of entries.");

        }

        [TestMethod, Owner("amathes"), Priority(1)]
        [Description("Perf scenario of two users playing a game")]
        [TestProperty("Type", "Perf")]
        public void TwoPlayersScenario()
        {

            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");
            string membernameP0 = Config.Environment.UserSettings[0].Membername;      // player1
            string passwordP0 = Config.Environment.UserSettings[0].Password;
            string gamertagP0 = Config.Environment.UserSettings[0].Gamertag;

            string membernameP1 = Config.Environment.UserSettings[1].Membername;      // player1
            string passwordP1 = Config.Environment.UserSettings[1].Password;
            string gamertagP1 = Config.Environment.UserSettings[1].Gamertag;

            uint gameId = Constants.TESTGAMEID;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };

            // todo: replace literals with constants
            CreationData creationData = InitializeCreationData(gameId, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            // 1. CREATESESSION (USER A)
            this.GameSessionProxy.UserID = membernameP0;
            this.GameSessionProxy.Password = passwordP0;
            SessionState createSessionState = this.GameSessionProxy.CreateSession("en-US", Leet.Core.Platforms.PlatformType.Mobile, creationData);
            AssertCreateSessionState(creationData, createSessionState);
            string sessionId = createSessionState.SessionID;

            // 2. PUTGAMESTATE (USER A)
            this.GameStateProxy.UserID = membernameP0;
            this.GameStateProxy.Password = passwordP0;
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 0;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };
            this.GameStateProxy.PutGameState(sessionId, gameId.ToString(), modifiableGameState);

            // 3. GETGAMESTATE (USER A)
            FullGameState modifiedGameState = this.GameStateProxy.GetGameState(sessionId, gameId.ToString());
            AssertGameState(modifiableGameState, modifiedGameState);

            // 3. SENDINVITE (USER A TO USER B)            
            notificationTestCommon.SendInviteRequest(sessionId, false, gamertagP1, 0);
            //notificationTestCommon.VerifyNotificationCreated(gameId.ToString(), sessionId, Notification.NotificationType.Invitation, membernameP1, passwordP1);

            // 4. JOINSESSION (USER B)
            JoinData joinData = InitializeJoinData(gameId, sessionId, 1);
            this.GameSessionProxy.UserID = membernameP1;      // player2
            this.GameSessionProxy.Password = passwordP1;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(sessionId, joinData);
            AssertJoinSessionState(createSessionState, joinSessionState);

            // 5. GETNOTIFICATIONS (USER B)
            this.NotificationsServiceProxy.UserID = membernameP1;
            this.NotificationsServiceProxy.Password = passwordP1;
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                gameId.ToString(),
                sessionId,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                String.Empty,
                false);

            Assert.IsNotNull(notifications);
            // Assert.AreEqual<int>(1, notifications.Count, "ERROR: Unexpected Number of notifications.");
            // common.VerifyNotification(notifications[0], notificationId);

            // 6. GETGAMESTATE (USER B)
            this.GameStateProxy.UserID = membernameP1;
            this.GameStateProxy.Password = passwordP1;
            FullGameState gameState = this.GameStateProxy.GetGameState(sessionId, gameId.ToString());
            AssertGameState(modifiableGameState, gameState);

            // 7a. PUTGAMESTATE (USER A)
            this.GameStateProxy.UserID = membernameP0;
            this.GameStateProxy.Password = passwordP0;
            modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };
            this.GameStateProxy.PutGameState(sessionId, gameId.ToString(), modifiableGameState);

            // 7a. PUTGAMESTATE (USER B)
            this.GameStateProxy.UserID = membernameP1;
            this.GameStateProxy.Password = passwordP1;
            modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 0;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };
            this.GameStateProxy.PutGameState(sessionId, gameId.ToString(), modifiableGameState);

            // 8. GETGAMESTATE (USER B)
            gameState = this.GameStateProxy.GetGameState(sessionId, gameId.ToString());

            // 8. POSTGAMEACTION (USER B)
            GameAction gameAction = new GameAction();
            gameAction.ActionType = GameActionType.UserNudge;
            gameAction.ActionData = new byte[] { 1 };
            gameAction.ActionTime = DateTime.Now;
            gameAction.SequenceNumber = gameState.GameStateInfo.SequenceNumber;
            this.GameStateProxy.PostGameAction(sessionId, gameId.ToString(), gameAction);
            gameState = this.GameStateProxy.GetGameState(sessionId, gameId.ToString());

            // 9. POSTGAMEEND (USER B)
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = gameId,
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 10,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)gameState.GameStateInfo.Variant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = gameId,
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 10,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)gameState.GameStateInfo.Variant
            };
            this.GameStateProxy.PostGameEnd(sessionId, gameId.ToString(), gameResults);
            SessionState sessionStateAfterGameEnd = this.GameSessionProxy.ViewSession(sessionId, gameId.ToString());
            Assert.IsTrue(sessionStateAfterGameEnd.State.IsComplete, "Error: The session does not have the isComplete flag set, SessionID: " + sessionStateAfterGameEnd.SessionID);

        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\Partner\SendNotification.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using AsyncMultiplayer.PartnerService.DataContracts;
using AsyncMultiplayer.NotificationService;
using CloudServices.Test.Common.Configuration;
using System.Web;
using System.Threading;
using System.Net;
using CloudServices.Test.Common.Proxy;

namespace Multiplayer.Test.API
{
    /// <summary>
    /// Summary description for SendNotification
    /// </summary>
    [TestClass]
    public class SendNotification : TestAreaBase
    {
        private static NotificationTestCommon common = new NotificationTestCommon();
        private static Random randomGenerator = new Random();
        private static PartnerServiceProxy partnerClient = null;

        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
            Log.LogToFile = false;
            partnerClient = new PartnerServiceProxy();
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            NotificationTestCommon.cleanupFR = false;
            LockTest();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            try
            {
                common.CleanupFRs();
                common.TestCleanup();
            }
            finally
            {
                UnlockTest();
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Send a request for invite notification and verfy that the notification is created")]
        [TestProperty("Type", "BVTs")]
        public void BVT_SendNotification()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");
            common.CheckNotificationCount(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            partnerClient.SendNotification(newRequest);

            common.VerifyNotificationCreated(newRequest.GameId.ToString(), newRequest.SessionId, newRequest.NotificationType, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that recipient's last update time is updated after SendNotification")]
        [TestProperty("Type", "Features")]
        public void P_SendNotification_Etag()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");
            common.CheckNotificationCount(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            PartnerNotificationRequest newRequest = CreateDefaultRequest();

            List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(
                newRequest.GameId.ToString(),
                newRequest.SessionId,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                newRequest.NotificationType,
                false,
                Config.Environment.UserSettings[1].Membername,
                Config.Environment.UserSettings[1].Password,
                null);
            Assert.IsNotNull(nList);
            Assert.AreEqual<int>(0, nList.Count, "Unexpected number of Notifications.");
            string etag1 = this.NotificationsServiceProxy.EtagInResponse;

            partnerClient.SendNotification(newRequest);

            Thread.Sleep(20000); //give enough time for the back end to process the send Notification request. 

            nList = this.NotificationsServiceProxy.GetNotifications(
                newRequest.GameId.ToString(),
                newRequest.SessionId,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                newRequest.NotificationType,
                false,
                Config.Environment.UserSettings[1].Membername,
                Config.Environment.UserSettings[1].Password,
                etag1);
            Assert.IsNotNull(nList);
            Assert.AreEqual<int>(1, nList.Count, "Unexpected number of Notifications.");
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify that sender's last update time will not be updated after SendNotification(only recipients last update time is updated)")]
        [TestProperty("Type", "Features")]
        public void N_SendNotification_SenderEtag()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");
            common.CheckNotificationCount(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            PartnerNotificationRequest newRequest = CreateDefaultRequest();

            List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(
                newRequest.GameId.ToString(),
                string.Empty,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                string.Empty,
                false,
                Config.Environment.UserSettings[0].Membername,
                Config.Environment.UserSettings[0].Password,
                null);
            Assert.IsNotNull(nList);
            Assert.AreEqual<int>(0, nList.Count, "Unexpected number of Notifications.");
            string etag0 = this.NotificationsServiceProxy.EtagInResponse;

            nList = this.NotificationsServiceProxy.GetNotifications(
                newRequest.GameId.ToString(),
                newRequest.SessionId,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                newRequest.NotificationType,
                false,
                Config.Environment.UserSettings[1].Membername,
                Config.Environment.UserSettings[1].Password,
                null);
            Assert.IsNotNull(nList);
            Assert.AreEqual<int>(0, nList.Count, "Unexpected number of Notifications.");
            string etag1 = this.NotificationsServiceProxy.EtagInResponse;

            partnerClient.SendNotification(newRequest);

            Thread.Sleep(20000); //give enough time for the back end to process the send Notification request. 

            nList = this.NotificationsServiceProxy.GetNotifications(
                newRequest.GameId.ToString(),
                newRequest.SessionId,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                newRequest.NotificationType,
                false,
                Config.Environment.UserSettings[1].Membername,
                Config.Environment.UserSettings[1].Password,
                etag1);
            Assert.IsNotNull(nList);
            Assert.AreEqual<int>(1, nList.Count, "Unexpected number of Notifications.");

            try
            {
                List<Notification> nList2 = this.NotificationsServiceProxy.GetNotifications(
                    newRequest.GameId.ToString(),
                    string.Empty,
                    0,
                    Constants.IGNORE_lAST_ID,
                    100,
                    string.Empty,
                    false,
                    Config.Environment.UserSettings[0].Membername,
                    Config.Environment.UserSettings[0].Password,
                    etag0);
                Assert.Fail("Expected a 304.");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotModified, e.Response.Status);
            }

            List<Notification> newNList = this.NotificationsServiceProxy.GetNotifications(
                newRequest.GameId.ToString(),
                string.Empty,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                string.Empty,
                false,
                Config.Environment.UserSettings[0].Membername,
                Config.Environment.UserSettings[0].Password,
                null);
            Assert.IsNotNull(newNList);
            Assert.AreEqual<int>(0, newNList.Count, "Unexpected number of Notifications.");
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that FR Notification is created after sending an invite notification request with FR = true.")]
        [TestProperty("Type", "Features")]
        public void P_SendNotification_InviteNotification_FR()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");

            NotificationTestCommon.cleanupFR = true;
            NotificationTestCommon.testHooksClient.SetupNotFriendsAndNoFR(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)));
            NotificationTestCommon.VerifyNotFriends(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)), "Error: Setup failed not to make friends");
            NotificationTestCommon.VerifyNoFR(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)), "Error: Setup failed to delete pre existing Friend Requests");

            common.CheckNotificationCountFR(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationType = Notification.NotificationType.Invitation.ToString();
            newRequest.NotificationProperties.Add(NotificationProperty.FriendRequest, "true");

            partnerClient.SendNotification(newRequest);

            common.VerifyNotificationCreated(newRequest.GameId.ToString(), newRequest.SessionId, newRequest.NotificationType, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            NotificationTestCommon.VerifyFriendRequest(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)), "did not find a friend request on XBL");
            common.VerifyNotificationCreated(string.Empty, string.Empty, Notification.NotificationType.FriendRequest.ToString(), Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify error for a notification type that does not exist")]
        [TestProperty("Type", "Features")]
        public void N_SendNotification_InvalidNotificationType_Int()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");
            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationType = "99";
            try
            {
                partnerClient.SendNotification(newRequest);
                Assert.Fail("Expecting a bad request.");
            }
            catch (RestException ex)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, ex.Response.Status);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify error for invalid non integer notification type")]
        [TestProperty("Type", "Features")]
        public void N_SendNotification_InvalidNotificationType()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");
            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationType = "blah";
            try
            {
                partnerClient.SendNotification(newRequest);
                Assert.Fail("Expecting a bad request.");
            }
            catch (RestException ex)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, ex.Response.Status);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify error for null notification type")]
        [TestProperty("Type", "Features")]
        public void N_SendNotification_NullNotificationType()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");
            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationType = null;
            try
            {
                partnerClient.SendNotification(newRequest);
                Assert.Fail("Expecting a bad request.");
            }
            catch (RestException ex)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, ex.Response.Status);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that unless otherwise set, invites have FR = false by default.")]
        [TestProperty("Type", "Features")]
        public void N_SendNotification_InviteNotification_NoFR()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");

            NotificationTestCommon.testHooksClient.SetupNotFriendsAndNoFR(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)));
            NotificationTestCommon.VerifyNotFriends(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)), "Error: Setup failed not to make friends");
            NotificationTestCommon.VerifyNoFR(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)), "Error: Setup failed to delete pre existing Friend Requests");

            common.CheckNotificationCountFR(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationType = Notification.NotificationType.Invitation.ToString();

            partnerClient.SendNotification(newRequest);

            common.VerifyNotificationCreated(newRequest.GameId.ToString(), newRequest.SessionId, newRequest.NotificationType, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            Thread.Sleep(Constants.XBLFRPROCESSTIMEINSEC * 1000);
            Assert.IsFalse(NotificationTestCommon.testHooksClient.HasFR(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password))), "Error: Found FR on XBL.");
            common.VerifyNoNotifications(string.Empty, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password, Notification.NotificationType.FriendRequest.ToString());
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verifies no error for max datablob.")]
        [TestProperty("Type", "Features")]
        public void P_SendNotification_MaxDataBlob()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");
            common.CheckNotificationCount(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            string data = new string('a', 1000);
            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationProperties.Add(NotificationProperty.DataBlob, data);

            partnerClient.SendNotification(newRequest);

            common.VerifyNotificationCreated(newRequest.GameId.ToString(), newRequest.SessionId, newRequest.NotificationType, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify error if max datablob is exceeded.")]
        [TestProperty("Type", "Features")]
        public void N_SendNotification_MaxPlus1DataBlob()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");
            string data = new string('a', 1001);
            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationProperties.Add(NotificationProperty.DataBlob, data);
            try
            {
                partnerClient.SendNotification(newRequest);
                Assert.Fail("Expecting a bad request.");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, e.Response.Status, "Error: Expecting a bad request.");
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify error for null sessionId")]
        [TestProperty("Type", "Features")]
        public void N_SendNotification_NullSessionId()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");
            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.SessionId = null;
            try
            {
                partnerClient.SendNotification(newRequest);
                Assert.Fail("Expecting a bad request.");
            }
            catch (RestException ex)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, ex.Response.Status);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify error for null gameId")]
        [TestProperty("Type", "Features")]
        public void N_SendNotification_GameId0()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");
            common.CheckNotificationCount(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.GameId = 0;
            try
            {
                partnerClient.SendNotification(newRequest);
                Assert.Fail("Expecting a bad request.");
            }
            catch (RestException ex)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, ex.Response.Status);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify error for non-datetime format for expiration time.")]
        [TestProperty("Type", "Features")]
        public void P_SendNotification_ExpirationTime()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");
            common.CheckNotificationCount(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            DateTime expTime = DateTime.Now;
            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationProperties.Add(NotificationProperty.ExpirationTime, expTime.ToString());

            partnerClient.SendNotification(newRequest);

            common.VerifyNotificationCreated(newRequest.GameId.ToString(), newRequest.SessionId, newRequest.NotificationType, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(
                        newRequest.GameId.ToString(),
                        newRequest.SessionId,
                        0,
                        Constants.IGNORE_lAST_ID,
                        100,
                        newRequest.NotificationType,
                        false,
                        Config.Environment.UserSettings[1].Membername,
                        Config.Environment.UserSettings[1].Password,
                        null);
            Assert.IsNotNull(nList);
            Assert.AreEqual<int>(1, nList.Count, "Unexpected number of Notifications.");
            Assert.AreEqual(expTime.ToString(), nList[0].ExpirationTime.ToString(), "Error: Expiration time is not correct.");
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify error for an empty expiration time.")]
        [TestProperty("Type", "Features")]
        public void N_SendNotification_EmptyExpirationTime()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");
            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationProperties.Add(NotificationProperty.ExpirationTime, "");
            try
            {
                partnerClient.SendNotification(newRequest);
                Assert.Fail("Expecting a bad request.");
            }
            catch (RestException ex)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, ex.Response.Status);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify error for non-datetime format for expiration time.")]
        [TestProperty("Type", "Features")]
        public void N_SendNotification_InvalidExpirationTime()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");
            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationProperties.Add(NotificationProperty.ExpirationTime, "string");
            try
            {
                partnerClient.SendNotification(newRequest);
                Assert.Fail("Expecting a bad request.");
            }
            catch (RestException ex)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, ex.Response.Status);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify error for non uint variant")]
        [TestProperty("Type", "Features")]
        public void N_SendNotification_InvalidVariant()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");
            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationProperties.Add(NotificationProperty.Variant, "string");
            try
            {
                partnerClient.SendNotification(newRequest);
                Assert.Fail("Expecting a bad request.");
            }
            catch (RestException ex)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, ex.Response.Status);
            }
        }

        //[TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify error for non existent variant")]
        [TestProperty("Type", "Features")]
        public void N_SendNotification_NonExistentVariant() //Is this a valid testcase?
        {
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify error for empty recipient list")]
        [TestProperty("Type", "Features")]
        public void N_SendNotification_NullRecipient()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");
            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.Recipients = null;
            try
            {
                partnerClient.SendNotification(newRequest);
                Assert.Fail("Expecting a bad request.");
            }
            catch (RestException ex)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, ex.Response.Status);
            }
        }

        //[TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify error for non existent gameId")]
        [TestProperty("Type", "Features")]
        public void N_SendNotification_NonexistentGameId() //Is this a valid testcase?
        {
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify error for trying to send an invite from a non existent gamertag")]
        [TestProperty("Type", "Features")]
        public void N_SendNotification_InviteFromNonexistentGamerTag()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");
            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.From = "ghty;";
            try
            {
                partnerClient.SendNotification(newRequest);
                Assert.Fail("Expecting a bad request.");
            }
            catch (RestException ex)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, ex.Response.Status);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify a 200 response for sessionId = max length allowed")]
        [TestProperty("Type", "Features")]
        public void P_SendNotification_MaxSessionIdLength()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");
            common.CheckNotificationCount(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.SessionId = "This is a session ID with character length equal to sixtythree.";
            partnerClient.SendNotification(newRequest);

            common.VerifyNotificationCreated(newRequest.GameId.ToString(), newRequest.SessionId, newRequest.NotificationType, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
        }

        //Bug:5445
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify a bad request response for sessionId = max + 1 length allowed")]
        [TestProperty("Type", "Features")]
        public void N_SendNotification_MaxPlus1SessionIdLength()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");
            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.SessionId = "This is a very long session ID with char length equals sixtyfour";
            try
            {
                partnerClient.SendNotification(newRequest);
                Assert.Fail("Expecting a bad request.");
            }
            catch (RestException ex)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, ex.Response.Status);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify send notification for four recipients will create notification for all four of them.")]
        [TestProperty("Type", "Features")]
        public void P_SendNotification_To4Recipients()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 5, "We need at least two users for this test");
            StringBuilder recipients = new StringBuilder();
            for (int i = 1; i < 5; i++)
            {
                common.CheckNotificationCount(Config.Environment.UserSettings[i].Membername, Config.Environment.UserSettings[i].Password);
                recipients.Append(Config.Environment.UserSettings[i].Gamertag + ";");
            }
            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationType = Notification.NotificationType.Invitation.ToString(); //TODO: make this a random type and add another test for invite notification.
            newRequest.Recipients = recipients.ToString();
            partnerClient.SendNotification(newRequest);
            for (int i = 1; i < 5; i++)
            {
                common.VerifyNotificationCreated(newRequest.GameId.ToString(), newRequest.SessionId, newRequest.NotificationType, Config.Environment.UserSettings[i].Membername, Config.Environment.UserSettings[i].Password);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that etag is updated after Send invite Notification for all five recipients")]
        [TestProperty("Type", "Features")]
        public void P_SendNotification_To4Recipients_Etag()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 5, "We need at least two users for this test");
            List<string> etags = new List<string>();
            StringBuilder recipients = new StringBuilder();
            PartnerNotificationRequest newRequest = CreateDefaultRequest();

            for (int i = 1; i < 5; i++)
            {
                common.CheckNotificationCount(Config.Environment.UserSettings[i].Membername, Config.Environment.UserSettings[i].Password);
                List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(
                    newRequest.GameId.ToString(),
                    newRequest.SessionId,
                    0,
                    Constants.IGNORE_lAST_ID,
                    100,
                    newRequest.NotificationType,
                    false,
                    Config.Environment.UserSettings[i].Membername,
                    Config.Environment.UserSettings[i].Password,
                    null);
                Assert.IsNotNull(nList);
                Assert.AreEqual<int>(0, nList.Count, "Unexpected number of Notifications.");
                etags.Add(this.NotificationsServiceProxy.EtagInResponse);
                recipients.Append(Config.Environment.UserSettings[i].Gamertag + ";");
            }
            newRequest.NotificationType = Notification.NotificationType.Invitation.ToString(); //TODO: make this a random type and add another test for invite notification.
            newRequest.Recipients = recipients.ToString();
            partnerClient.SendNotification(newRequest);

            Thread.Sleep(20000); //give enough time for the back end to process the invite request. TODO: MAKE SURE 30 SEC IS NOT TOO MUCH

            for (int i = 1; i < 5; i++)
            {
                List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(
                    newRequest.GameId.ToString(),
                    newRequest.SessionId,
                    0,
                    Constants.IGNORE_lAST_ID,
                    100,
                    newRequest.NotificationType,
                    false,
                    Config.Environment.UserSettings[i].Membername,
                    Config.Environment.UserSettings[i].Password,
                    etags[i - 1]);
                Assert.IsNotNull(nList);
                Assert.AreEqual<int>(1, nList.Count, "Unexpected number of Notifications.");
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify send notification for 15 recipients will create notification for all of them.")]
        [TestProperty("Type", "Features")]
        public void P_SendNotification_InviteToMaxRecipients()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 5, "We need at least two users for this test");
            for (int i = 1; i < Config.Environment.UserSettings.Count; i++)
            {
                common.CheckNotificationCount(Config.Environment.UserSettings[i].Membername, Config.Environment.UserSettings[i].Password);
            }
            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationType = Notification.NotificationType.Invitation.ToString(); //TODO: make this a random type and add another test for invite notification.
            newRequest.Recipients = GetDuplicateRecipients(15, false);
            partnerClient.SendNotification(newRequest);
            for (int i = 1; i < Config.Environment.UserSettings.Count; i++)
            {
                common.VerifyNotificationCreated(newRequest.GameId.ToString(), newRequest.SessionId, newRequest.NotificationType, Config.Environment.UserSettings[i].Membername, Config.Environment.UserSettings[i].Password);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify send notification for 16 recipients will create notification for only 15 of them.")]
        [TestProperty("Type", "Features")]
        public void N_SendNotification_InviteToMaxPlus1Recipients()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 5, "We need at least two users for this test");
            for (int i = 1; i < Config.Environment.UserSettings.Count; i++)
            {
                common.CheckNotificationCount(Config.Environment.UserSettings[i].Membername, Config.Environment.UserSettings[i].Password);
            }
            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationType = Notification.NotificationType.Invitation.ToString(); //TODO: make this a random type and add another test for invite notification.
            newRequest.Recipients = GetDuplicateRecipients(15, true);
            partnerClient.SendNotification(newRequest);
            for (int i = 1; i < (Config.Environment.UserSettings.Count - 1); i++)
            {
                common.VerifyNotificationCreated(newRequest.GameId.ToString(), newRequest.SessionId, newRequest.NotificationType, Config.Environment.UserSettings[i].Membername, Config.Environment.UserSettings[i].Password);
            }
            common.VerifyNoNotifications(newRequest.SessionId, Config.Environment.UserSettings[(Config.Environment.UserSettings.Count - 1)].Membername, Config.Environment.UserSettings[(Config.Environment.UserSettings.Count - 1)].Password, newRequest.NotificationType);
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify send notification for 15 recipients will create notification for all of them.")]
        [TestProperty("Type", "Features")]
        public void P_SendNotification_InviteToMaxRecipients_FR()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 5, "We need at least two users for this test");
            NotificationTestCommon.cleanupFR = true;
            for (int i = 1; i < Config.Environment.UserSettings.Count; i++)
            {
                NotificationTestCommon.testHooksClient.SetupNotFriendsAndNoFR(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[i].Membername, Config.Environment.UserSettings[i].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)));
                NotificationTestCommon.VerifyNotFriends(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[i].Membername, Config.Environment.UserSettings[i].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)), "Error: Setup failed not to make friends");
                NotificationTestCommon.VerifyNoFR(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[i].Membername, Config.Environment.UserSettings[i].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)), "Error: Setup failed to delete pre existing Friend Requests");
                common.CheckNotificationCountFR(Config.Environment.UserSettings[i].Membername, Config.Environment.UserSettings[i].Password);
            }
            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationType = Notification.NotificationType.Invitation.ToString(); //TODO: make this a random type and add another test for invite notification.
            newRequest.NotificationProperties.Add(NotificationProperty.FriendRequest, "true");
            newRequest.Recipients = GetDuplicateRecipients(15, false);
            partnerClient.SendNotification(newRequest);
            for (int i = 1; i < Config.Environment.UserSettings.Count; i++)
            {
                common.VerifyNotificationCreated(newRequest.GameId.ToString(), newRequest.SessionId, newRequest.NotificationType, Config.Environment.UserSettings[i].Membername, Config.Environment.UserSettings[i].Password);
                NotificationTestCommon.VerifyFriendRequest(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[i].Membername, Config.Environment.UserSettings[i].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)), "did not find a friend request on XBL");
                common.VerifyNotificationCreated(string.Empty, string.Empty, Notification.NotificationType.FriendRequest.ToString(), Config.Environment.UserSettings[i].Membername, Config.Environment.UserSettings[i].Password);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify send notification for 16 recipients will create notification for only 15 of them.")]
        [TestProperty("Type", "Features")]
        public void N_SendNotification_InviteToMaxPlus1Recipients_FR()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 5, "We need at least two users for this test");
            NotificationTestCommon.cleanupFR = true;
            for (int i = 1; i < Config.Environment.UserSettings.Count; i++)
            {
                NotificationTestCommon.testHooksClient.SetupNotFriendsAndNoFR(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[i].Membername, Config.Environment.UserSettings[i].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)));
                NotificationTestCommon.VerifyNotFriends(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[i].Membername, Config.Environment.UserSettings[i].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)), "Error: Setup failed not to make friends");
                NotificationTestCommon.VerifyNoFR(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[i].Membername, Config.Environment.UserSettings[i].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)), "Error: Setup failed to delete pre existing Friend Requests");
                common.CheckNotificationCountFR(Config.Environment.UserSettings[i].Membername, Config.Environment.UserSettings[i].Password);
            }
            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationType = Notification.NotificationType.Invitation.ToString(); //TODO: make this a random type and add another test for invite notification.
            newRequest.NotificationProperties.Add(NotificationProperty.FriendRequest, "true");
            newRequest.Recipients = GetDuplicateRecipients(15, true);
            partnerClient.SendNotification(newRequest);
            for (int i = 1; i < (Config.Environment.UserSettings.Count - 1); i++)
            {
                common.VerifyNotificationCreated(newRequest.GameId.ToString(), newRequest.SessionId, newRequest.NotificationType, Config.Environment.UserSettings[i].Membername, Config.Environment.UserSettings[i].Password);
                NotificationTestCommon.VerifyFriendRequest(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[i].Membername, Config.Environment.UserSettings[i].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password)), "did not find a friend request on XBL");
                common.VerifyNotificationCreated(string.Empty, string.Empty, Notification.NotificationType.FriendRequest.ToString(), Config.Environment.UserSettings[i].Membername, Config.Environment.UserSettings[i].Password);
            }
            common.VerifyNoNotifications(newRequest.SessionId, Config.Environment.UserSettings[(Config.Environment.UserSettings.Count - 1)].Membername, Config.Environment.UserSettings[(Config.Environment.UserSettings.Count - 1)].Password, newRequest.NotificationType);
            Assert.IsFalse(NotificationTestCommon.testHooksClient.HasFR(ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[(Config.Environment.UserSettings.Count - 1)].Membername,Config.Environment.UserSettings[(Config.Environment.UserSettings.Count - 1)].Password)), ulong.Parse(CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password))), "Error: Found a FR for the 15th recipient.");
            common.VerifyNoFRNotification(Config.Environment.UserSettings[(Config.Environment.UserSettings.Count - 1)].Membername, Config.Environment.UserSettings[(Config.Environment.UserSettings.Count - 1)].Password);
        }

        //Do we verify invite count?
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify invite count limit per hour is verified")]
        [TestProperty("Type", "Features")]
        public void N_SendNotification_MaxPlus1InviteCount()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 5, "We need at least two users for this test");
            NotificationTestCommon.testHooksClient.UpdateUserEntry(
                CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password),
                DateTime.UtcNow,
                DateTime.UtcNow,
                10);
            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationType = Notification.NotificationType.Invitation.ToString();

            try
            {
                partnerClient.SendNotification(newRequest);
                Assert.Fail("Expecting Not Acceptable.");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotAcceptable, e.Response.Status);
            }
            //reset the value on the server
            NotificationTestCommon.testHooksClient.UpdateUserEntry(
                CloudServices.Test.Common.Authorization.Authorization.GetXuid(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password),
                DateTime.UtcNow,
                DateTime.UtcNow,
                0);
        }

        #region each notification type
        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send a request for your turn notification and verfy that the notification is created")]
        [TestProperty("Type", "Feature")]
        public void P_SendNotification_YourTurn()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");
            common.CheckNotificationCount(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationType = Notification.NotificationType.YourTurn.ToString();
            partnerClient.SendNotification(newRequest);

            common.VerifyNotificationCreated(newRequest.GameId.ToString(), newRequest.SessionId, newRequest.NotificationType, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send a request for you lose notification and verfy that the notification is created")]
        [TestProperty("Type", "Feature")]
        public void P_SendNotification_YouLose()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");
            common.CheckNotificationCount(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationType = Notification.NotificationType.YouLose.ToString();
            partnerClient.SendNotification(newRequest);

            common.VerifyNotificationCreated(newRequest.GameId.ToString(), newRequest.SessionId, newRequest.NotificationType, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send a request for you win notification and verfy that the notification is created")]
        [TestProperty("Type", "Feature")]
        public void P_SendNotification_YouWin()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");
            common.CheckNotificationCount(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationType = Notification.NotificationType.YouWin.ToString();
            partnerClient.SendNotification(newRequest);

            common.VerifyNotificationCreated(newRequest.GameId.ToString(), newRequest.SessionId, newRequest.NotificationType, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
        }


        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send a request for game over notification and verfy that the notification is created")]
        [TestProperty("Type", "Feature")]
        public void P_SendNotification_GameOver()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");
            common.CheckNotificationCount(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationType = Notification.NotificationType.GameOver.ToString();
            partnerClient.SendNotification(newRequest);

            common.VerifyNotificationCreated(newRequest.GameId.ToString(), newRequest.SessionId, newRequest.NotificationType, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send a request for game tie notification and verfy that the notification is created")]
        [TestProperty("Type", "Feature")]
        public void P_SendNotification_GameTie()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");
            common.CheckNotificationCount(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationType = Notification.NotificationType.GameTie.ToString();
            partnerClient.SendNotification(newRequest);

            common.VerifyNotificationCreated(newRequest.GameId.ToString(), newRequest.SessionId, newRequest.NotificationType, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send a request for message waiting notification and verfy that the notification is created")]
        [TestProperty("Type", "Feature")]
        public void P_SendNotification_MessageWaiting()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");
            common.CheckNotificationCount(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationType = Notification.NotificationType.Message.ToString();
            partnerClient.SendNotification(newRequest);

            common.VerifyNotificationCreated(newRequest.GameId.ToString(), newRequest.SessionId, newRequest.NotificationType, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send a request for nudge notification and verfy that the notification is created")]
        [TestProperty("Type", "Feature")]
        public void P_SendNotification_Nudge()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");
            common.CheckNotificationCount(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationType = Notification.NotificationType.Nudge.ToString();
            partnerClient.SendNotification(newRequest);

            common.VerifyNotificationCreated(newRequest.GameId.ToString(), newRequest.SessionId, newRequest.NotificationType, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send a request for warning notification and verfy that the notification is created")]
        [TestProperty("Type", "Feature")]
        public void P_SendNotification_Warning()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");
            common.CheckNotificationCount(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationType = Notification.NotificationType.Warning.ToString();
            partnerClient.SendNotification(newRequest);

            common.VerifyNotificationCreated(newRequest.GameId.ToString(), newRequest.SessionId, newRequest.NotificationType, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send a request for invitation notification and verfy that the notification is created")]
        [TestProperty("Type", "Feature")]
        public void P_SendNotification_Invitation()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");
            common.CheckNotificationCount(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationType = Notification.NotificationType.Invitation.ToString();
            partnerClient.SendNotification(newRequest);

            common.VerifyNotificationCreated(newRequest.GameId.ToString(), newRequest.SessionId, newRequest.NotificationType, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
        }

        //Bug:5442 - getting internal service error
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify error for trying to create a friend request notification directly (without sending an invite)")]
        [TestProperty("Type", "Features")]
        public void N_SendNotification_FriendRequest()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this test");
            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationType = Notification.NotificationType.FriendRequest.ToString();
            try
            {
                partnerClient.SendNotification(newRequest);
                Assert.Fail("Expecting a bad request.");
            }
            catch (RestException ex)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, ex.Response.Status);
            }
        }

        #endregion

        private PartnerNotificationRequest CreateDefaultRequest()
        {
            PartnerNotificationRequest newRequest = new PartnerNotificationRequest();
            newRequest.GameId = Constants.TESTGAMEID;
            newRequest.From = Config.Environment.UserSettings[0].Gamertag;
            newRequest.NotificationType = GetNotificationString();
            newRequest.Recipients = Config.Environment.UserSettings[1].Gamertag;
            newRequest.SessionId = NotificationTestCommon.testHooksClient.TestSessionId;
            newRequest.NotificationProperties = new PartnerNotificationRequest.PropertyDictionary();
            return newRequest;
        }

        private static string GetNotificationString()
        {
            string[] notificationTypes = {Notification.NotificationType.YourTurn.ToString(),
                                          Notification.NotificationType.Nudge.ToString(),  
                                          Notification.NotificationType.Invitation.ToString(), 
                                          Notification.NotificationType.GameOver.ToString(), 
                                          Notification.NotificationType.Message.ToString(), 
                                          Notification.NotificationType.YouWin.ToString(),
                                          Notification.NotificationType.YouLose.ToString(),
                                          Notification.NotificationType.GameTie.ToString(),
                                          Notification.NotificationType.Warning.ToString()};

            return notificationTypes[randomGenerator.Next(notificationTypes.Length)];
        }

        private static string GetDuplicateRecipients(int numRecipients, bool reserveLastUser)
        {
            StringBuilder recipients = new StringBuilder();
            int lastUserIndex = Config.Environment.UserSettings.Count;
            if (reserveLastUser)
            {
                lastUserIndex = lastUserIndex - 1;
            }
            int j = 0, i = 1;
            while (i < lastUserIndex)
            {
                recipients.Append(Config.Environment.UserSettings[i].Gamertag + ";");
                j++;
                if (j == numRecipients)
                    break;
                i++;
                if (i == lastUserIndex)
                    i = 1;
            }
            if (reserveLastUser)
            {
                recipients.Append(Config.Environment.UserSettings[lastUserIndex].Gamertag + ";");
            }
            return recipients.ToString();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\Sessions\CreateSession.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Diagnostics;
using System.Threading;
using System.Runtime.Serialization;
using System.Data.SqlClient;
using System.Configuration;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using CloudServices.Test.Common.Configuration;
using Multiplayer.Test.API;
using AsyncMultiplayer.SessionCommon;
using LIVEN.Common.Diagnostics;
using Leet.Core.Utils;
using Wgx.Services.Monitoring;
using CloudServices.Test.Common.Proxy;

namespace MultiPlayer.Test.API
{
    /// <summary>
    /// Test Cases for Sessions.svc CreateSession API
    /// </summary>
    [TestClass]
    public class CreateSession : TestAreaBase
    {
        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {           
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            
            LockTest();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            UnlockTest();
        }

        static string MachineName = ConfigurationManager.ConnectionStrings["lest_AsyncNotification_db"].ConnectionString.Split(';')[0].Substring(12);
   
        /// <summary>
        /// BVT test for CreateSession
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("BVT for Session.svc CreateSession API.")]
        [TestProperty("Type", "BVTs")]
        public void BVT_CreateSession()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
           
            AssertCreateSessionState(creationData, sessionState);

            //ViewSession 
            SessionState viewSessionState = this.GameSessionProxy.ViewSession(sessionState.SessionID, sessionState.GameID.ToString());
            AssertSessionState(sessionState, viewSessionState);

            //GetGameState
            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;
            FullGameState actualGameState = this.GameStateProxy.GetGameState(viewSessionState.SessionID, viewSessionState.GameID.ToString());

            AssertFullGameStateToSessionStateGameState(viewSessionState, actualGameState);
        }

        /// <summary>
        /// Verify creating Multiple Sessions
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Call POST on GameSessionService to submit CreateSession")]
        [TestProperty("Type", "FeatureTests")]
        public void P_CreateSession_MultipleSessions()
        {
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState sessionState1 = null;
            SessionState sessionState2 = null;
            SessionState sessionState3 = null;
            SessionState sessionState4 = null;
            SessionState sessionState5 = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData1 = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame1");
            CreationData creationData2 = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame2");
            CreationData creationData3 = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame3");
            CreationData creationData4 = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame4");
            CreationData creationData5 = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame5");

            sessionState1 = this.GameSessionProxy.CreateSession(creationData1.GameID.ToString(), creationData1);
            sessionState2 = this.GameSessionProxy.CreateSession(creationData2.GameID.ToString(), creationData2);
            sessionState3 = this.GameSessionProxy.CreateSession(creationData3.GameID.ToString(), creationData3);
            sessionState4 = this.GameSessionProxy.CreateSession(creationData4.GameID.ToString(), creationData4);
            sessionState5 = this.GameSessionProxy.CreateSession(creationData5.GameID.ToString(), creationData5);

            //Assert SessionState
            AssertCreateSessionState(creationData1, sessionState1);
            AssertCreateSessionState(creationData2, sessionState2);
            AssertCreateSessionState(creationData3, sessionState3);
            AssertCreateSessionState(creationData4, sessionState4);
            AssertCreateSessionState(creationData5, sessionState5);
        }

        /// <summary>
        /// Verify CreateSession to create a game session with out passing any optional values in CreationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Call POST on GameSessionService to submit CreateSession with No Optional Values")]
        [TestProperty("Type", "FeatureTests")]
        public void P_CreateSession_NoOptionalValues()
        {
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState sessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            CreationData creationData = new CreationData();

            creationData.GameID = Constants.TESTGAMEID;
            creationData.TotalSeatsAvailable = 10;
            creationData.ReservedSeatsAvailable = 10;
            creationData.InactivityWarning = iwb;

            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);
        }

        /// <summary>
        /// Test for CreateSession with CreationData.TotalSeatsAvailable.= 1
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Test for Session.svc CreateSession API with CreationData.TotalSeatsAvailable.= 1.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_CreateSession_TotalSeatsAvailable_1()
        {
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 1, 1, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");
            try
            {
                this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
                Assert.Fail("CreateSession allowed CreationData.TotalSeatsAvailable = 1");
            }
            catch (RestException ex)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidTotalSeatsAvailable), ex.Response);
            }
        }

        /// <summary>
        /// Test for CreateSession to verify > 16 TotalSeatsAvailable. 16 is allowed Max. No. of Seats
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Test for Session.svc CreateSession API to verify > 16 TotalSeatsAvailable.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_CreateSession_TotalSeatsAvailable_MoreThan16()
        {
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 17, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");

            try
            {
                this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
                Assert.Fail("CreateSession allowed CreationData.TotalSeatsAvailable to be > 16");
            }
            catch (RestException ex)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidTotalSeatsAvailable), ex.Response);
            }
        }
                           
        /// <summary>
        /// Verify CreateSession with different GameIDs for CreationData.GameID & GameID parameter to CreateSession
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call POST on GameSessionService to submit CreateSession with different GameIDs for CreationData.GameID & GameID parameter to CreateSession")]
        [TestProperty("Type", "FeatureTests")]
        public void N_CreateSession_DifferentGameID_InvalidCreationDataGameID_ValidParameter()
        {
            SessionState sessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(1297287395, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                sessionState = this.GameSessionProxy.CreateSession(Constants.TESTGAMEID.ToString(), creationData);
                Assert.Fail("Session is Created with Different GameID for CreationData.GameID & GameID Parameter for CreateSession");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDInconsistentInInputParameters), restEx.Response);
            }
        }

        /// <summary>
        /// Verify CreateSession with different GameIDs for CreationData.GameID & GameID parameter to CreateSession
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call POST on GameSessionService to submit CreateSession with different GameIDs for CreationData.GameID & GameID parameter to CreateSession")]
        [TestProperty("Type", "FeatureTests")]
        public void N_CreateSession_DifferentGameID_ValidCreationDataGameID_InValidParameter()
        {
            SessionState sessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                sessionState = this.GameSessionProxy.CreateSession("1297287395", creationData);
                Assert.Fail("Session is Created with Different GameID for CreationData.GameID & GameID Parameter for CreateSession");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDDoesNotMatchPartnerTokenTitleID), restEx.Response);
            }
        }

        /// <summary>
        /// Verify CreateSession with No value assigned to TotalSeatsAvailable in CreationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call POST on GameSessionService to submit CreateSession with no SeatsAvailable")]
        [TestProperty("Type", "FeatureTests")]
        public void N_CreateSession_NoTotalSeatsAvailable()
        {
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            CreationData creationData = new CreationData();

            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.None;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 5;

            creationData.GameID = Constants.TESTGAMEID;
            creationData.Variant = 0;
            creationData.ReservedSeatsAvailable = 2;
            creationData.SessionParameters = new byte[] { 1, 2, 3 };
            creationData.InactivityWarning = iwb;
            creationData.CanRemoveEmptySeats = true;
            creationData.DisplayName = "TestGame";
            
            try
            {
                SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
                Assert.Fail(String.Format("Session should not be created for an invalid game ID ({0})", creationData.GameID));
            }
            catch (RestException ex)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidTotalSeatsAvailable), ex.Response);
            }
        }

        // No usage of ReservedSeatsAvailable field ...  regression for 3651
        /// <summary>
        /// Verify CreateSession with No value assigned to ReservedSeatsAvailable in CreationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Verify that whatever value is passed as a reaserved seats available, the value is always 0 because we are not reading this field in our service.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_CreateSession_DoesNotReadReservedSeats()
        {
            int[] reservedSeatValues = {-1, Int32.MaxValue, 5, 11};
            CreationData creationData = new CreationData();
            creationData.GameID = Constants.TESTGAMEID;
            creationData.Variant = 0;
            creationData.TotalSeatsAvailable = 10;
            creationData.ReservedSeatsAvailable = reservedSeatValues[GlobalRandom.Next(reservedSeatValues.Length)];
            creationData.SessionParameters = new byte[] { 1, 2, 3 };
            creationData.InactivityWarning = new InactivityWarningBehavior();
            creationData.CanRemoveEmptySeats = true;
            creationData.DisplayName = "TestGame";

            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            AssertCreateSessionState(creationData, sessionState);
            Assert.AreEqual(0, sessionState.ReservedSeatsAvailable, "Error: Service should not be reading the value of reserved seat passed while session is created.");
        }

        /// <summary>
        /// Verify CreateSession with Negative value assigned to TotalSeatsAvailable in CreationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call POST on GameSessionService to submit CreateSession TotalSeatsAvailable < 0")]
        [TestProperty("Type", "FeatureTests")]
        public void N_CreateSession_NegTotalSeatsAvaialble()
        {
            // Initialize CreationData
            CreationData creationData = new CreationData();
            creationData.GameID = Constants.TESTGAMEID;
            creationData.Variant = 0;
            creationData.TotalSeatsAvailable = -1;
            creationData.ReservedSeatsAvailable = 0;
            creationData.SessionParameters = new byte[] { 1, 2, 3 };
            creationData.InactivityWarning = new InactivityWarningBehavior();
            creationData.CanRemoveEmptySeats = true;
            creationData.DisplayName = "TestGame";

            try
            {
                this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
                Assert.Fail("Session is Created with Negative TotalSeatsAvailable");
            }
            catch (RestException ex)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidTotalSeatsAvailable), ex.Response);
            }
        }

        /// <summary>
        /// Verify CreateSession with Negative values assigned to members of InactivityWarningBehavior in CreationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call POST on GameSessionService to submit CreateSession InactivityWarningBehavior negative interval")]
        [TestProperty("Type", "FeatureTests")]
        public void N_CreateSession_InactivityWarningBehavior_NegInterval()
        {
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = -TestAreaBase.GlobalRandom.Next(1, 20);
            iwb.MaxNumberOfNudges = 5;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, Constants.TESTGAMEVARIANT, 10, 10, sessionParameters, iwb, true, "TestGame");

            try
            {
                SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
                Assert.Fail("Session is Created with Negative values for Interval of InactivityWarningBehavior");
            }
            catch (RestException ex)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.IntervalIsNegative), ex.Response);
            }
        }

        /// <summary>
        /// Verify CreateSession with Negative values assigned to members of InactivityWarningBehavior in CreationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call POST on GameSessionService to submit CreateSession InactivityWarningBehavior negative max number of nudges")]
        [TestProperty("Type", "FeatureTests")]
        public void N_CreateSession_InactivityWarningBehavior_NegMaxNumOfNudges()
        {
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.WarnOnly;
            iwb.Interval = 2;
            iwb.MaxNumberOfNudges = -TestAreaBase.GlobalRandom.Next(1, 25);
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, Constants.TESTGAMEVARIANT, 10, 10, sessionParameters, iwb, true, "TestGame");

            try
            {
                SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
                Assert.Fail("Session is Created with Negative values for MaxNumberOfNudges of InactivityWarningBehavior");
            }
            catch (RestException ex)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.MaxNumberOfNudgesIsNotBetweenAllowedLimits), ex.Response);
            }
        }

        // Bug:2767
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify that trying to create a session with interval = 0 will give a Bad Request.")]
        [TestProperty("Type", "feature")]
        public void N_CreateSession_InactivityWarningBehavior_0Interval()
        {
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 0;
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            try
            {
                this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
                Assert.Fail("Expected a Bad Request since min allowed interval should be 1.");
            }
            catch (RestException ex)
            {
                //modify error message after bug fix
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InactivityWarningIsNull), ex.Response);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify trying to create a session with max number of nudges greater than 25 will give a Bad Request.")]
        [TestProperty("Type", "feature")]
        public void N_CreateSession_MaxPlus1NumberOfNudgesAllowed()
        {
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 26;
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            try
            {
                this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
                Assert.Fail("Expected a Bad Request since max number of nudges allowed is 25.");
            }
            catch (RestException ex)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.MaxNumberOfNudgesIsNotBetweenAllowedLimits), ex.Response);
            }
        }

        //related bug -- 3724
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("verify correct error message for null inactivity warning.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_CreateSession_InactivityWarningBehavior_Null()
        {
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, new byte[] { 1, 2, 3 }, null, true, "TestGame");
            try
            {
                this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
                Assert.Fail("Session is Created with Invalid Action set to InactivityWarningBehavior.Action");
            }
            catch (RestException ex)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InactivityWarningIsNull), ex.Response);
            }
        }

        //related bug -- 2148 and 4887
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Verify that create session puts a default game state so that GetGameState before PutGameState does not result in an error.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_CreateSession_DefaultGameState()
        {
            byte[] sessionParameters = new byte[] { 1, 2, 3 };

            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, new InactivityWarningBehavior(), true, "TestGame");
            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            AssertCreateSessionState(creationData, sessionState);
            FullGameState gameState = this.GameStateProxy.GetGameState(sessionState.SessionID, sessionState.GameID.ToString(), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            Assert.IsTrue(sessionParameters.SequenceEqual(gameState.GameData), "Error : Incorrect default game Data"); 
        }

        /// <summary>
        /// Feature test for CheckValidityOfGames
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Test Validity of games from GMS DB")]
        [TestProperty("Type", "FeatureTests")]
        public void P_CreateSession_CheckValidityOfGames()
        {
            // currently the TitleId in the partner token is taken from config file, this test need to change when this change

            try
            {
                List<string> DBResult = new List<string>();
                Boolean ExistInGMS = false;
                int ListElmntCounter = 0;


                Log.WriteLine("make sure Data Source is assigned proper name, as appropriate to test env't, in config");
                SqlConnection myConnection = new SqlConnection(ConfigurationManager.ConnectionStrings["lest_AsyncNotification_db"].ConnectionString); //get connection string and make connection

                myConnection.Open();

                SqlCommand myCommand = new SqlCommand("SELECT  [GameId]" +
                                                        "FROM [GameMetadataStore].[dbo].[t_games]", myConnection);

                //  map rows in GMS db to sqlDataReader and then to  list instance
                SqlDataReader myReader = myCommand.ExecuteReader();


                while (myReader.Read())
                {
                    DBResult.Add(myReader[0].ToString());

                }

                EnvironmentSettingsSection EnvSectionSetting = (EnvironmentSettingsSection)ConfigurationManager.GetSection("environmentSettings");

                //check all TitleId(a.k.a GameId) in config are valid
                foreach (EnvironmentElement envt in EnvSectionSetting.Environments)
                {
                    do
                    {
                        ExistInGMS = false;

                        if (string.Equals(DBResult[ListElmntCounter].ToString(), envt.StsSettings.TitleId, StringComparison.OrdinalIgnoreCase))
                        {
                            ExistInGMS = true;
                        }
                    }
                    while ((ListElmntCounter++ <= DBResult.Count) && (!ExistInGMS));

                    if (!ExistInGMS) throw new ApplicationException(string.Format("Game ID {0} doesnt exist in GMS DB", envt.StsSettings.TitleId));

                    ListElmntCounter = 0;

                }

                myConnection.Close();

            }
            catch (Exception e)
            {
                throw new ApplicationException(e.Message);
            }
        }

        /// <summary>
        /// Verify CreateSession with  GameID not matching TitleID in partner token
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call POST on GameSessionService to submit CreateSession with  GameID not in Partner token")]
        [TestProperty("Type", "FeatureTests")]
        public void N_CreateSession_GameIdNotMatchPartnerTokenTitleID()
        {
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState sessionState = null;
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;
            byte[] sessionParameters = new byte[] { 1, 2, 3 };

            Random rndm = new Random();
            uint RandomGameId = uint.MinValue;
            do
            {
                RandomGameId = (uint)rndm.Next();
            }
            while (uint.Parse(Config.Environment.StsSettings.TitleId) == RandomGameId);

            CreationData creationData = InitializeCreationData(RandomGameId, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            try
            {
                sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
                Assert.Fail(string.Format("Session should not be created for an invalid game ID ({0})", creationData.GameID));
            }
            catch (RestException ex)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDDoesNotMatchPartnerTokenTitleID), ex.Response);
            }
        }

        /// <summary>
        /// Verify CreateSession with  GameID having Invalid format
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call POST on GameSessionService to submit CreateSession with  Invalid format GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_CreateSession_InvalidFormatGameId()
        {
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState sessionState = null;
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
        
            CreationData creationData = InitializeCreationData(uint.MinValue, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            string GameIdRndm = GetInvalidGameId();
            try
            {
                //sessionState = this.GameSessionProxy.CreateSession(GetInvalidGameId(), creationData);
                sessionState = this.GameSessionProxy.CreateSession(GameIdRndm, creationData);
                Assert.Fail(string.Format("Session should not be created for an invalid game ID Format ({0})", GameIdRndm));
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidGameIDFormatWhileGettingIdentity), restEx.Response);
            }
        }

        /// <summary>
        /// Feature test for CreationData SessionParameters > 64K
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature test  for Session.svc - CreateSession API- TO verify   CreationData SessionParameters cant be > 64K ")]
        [TestProperty("Type", "FeatureTests")]
        public void N_CreateSession_SessionParametersGreaterThan64K()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            //assign sessionParemeters to > 64k bytes
            byte[] sessionParameters = GenerateRandomBytes(64*1024+1);
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            try
            {
                SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
                Assert.Fail(string.Format("Error:Session was created for a session parameters lenght greater than max,  having size = {0}",sessionParameters.Length));
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionParametersTooLongInCreateSession), restEx.Response);
            }
        }

        /// <summary>
        /// Feature test for CreationData SessionParameters  equals 64K- boundary test
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature test  for Session.svc - CreateSession API- TO verify   CreationData SessionParameters = 64K ")]
        [TestProperty("Type", "FeatureTests")]
        public void P_CreateSession_SessionParametersEquals64K()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            //assign sessionParemeters to > 64k bytes
            byte[] sessionParameters = GenerateRandomBytes(64*1024-1);
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            Log.WriteLine(string.Format("Trying to create session for boundary case session parameter Length= {0}", sessionParameters.Length), LogLevel.Info);

            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, sessionState);

               
        }

        /// <summary>
        /// Feature test for Max no. of session created -boundary case 
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature test for Session.svc CreateSession API---test for Max no. of session created -boundary case .")]
        [TestProperty("Type", "FeatureTests")]
        public void P_CreateSession_MaximumSessionAllowed()
        {
            Log.WriteLine("IF THIS FAILED , Do NOT FORGET TO RESET 'vc-valu'e for 'lest_SessionFE_MaxCreateSessionsAllowedPerUser' TO ITS ORIGINAL VALUE " + int.MaxValue.ToString(), LogLevel.Info);
           
            Log.WriteLine("This Test would run for 15 years unless we override the setting for 'SessionFE_MaxCreateSessionsAllowedPerUser'!!!!", LogLevel.Info);

            Log.WriteLine("Do NOT RUN This Test Before overiding the 'vc-valu'e for 'lest_SessionFE_MaxCreateSessionsAllowedPerUser' of" +
                          "[LIVEN_NPDB].[dbo].[t_setting_overrides] to a less Max value such as 100 !", LogLevel.Info);

            Log.WriteLine("make sure Data Source is assigned proper name, as appropriate to test env't, in config", LogLevel.Info);
             SqlConnection myConnection=null;
             SqlCommand myCommand = null;
             int OrgnlSessionFE_MaxCreateSessionsAllowedPerUser = int.MaxValue;
             try
             {
                 //get connection string and make connection
                 myConnection = new SqlConnection(ConfigurationManager.ConnectionStrings["lest_AsyncNotification_db"].ConnectionString + ";Asynchronous Processing=true");
                 myConnection.Open();

                 //Read the original of SessionFE_MaxCreateSessionsAllowedPerUser value in db
                 myCommand = new SqlCommand("SELECT [vc_value]" +
                                                       "FROM [LIVEN_NPDB].[dbo].[t_setting_overrides]" +
                                                       "WHERE [vc_setting]='lest_SessionFE_MaxCreateSessionsAllowedPerUser'", myConnection);

                 SqlDataReader LivenReader = myCommand.ExecuteReader();

                 if (LivenReader.Read())
                 {
                     OrgnlSessionFE_MaxCreateSessionsAllowedPerUser = int.Parse(LivenReader[0].ToString());
                 }

                 myConnection.Close();
             }
             catch (Exception ex)
             {
                 Log.WriteLine("make sure connection string is assigned proper value, as appropriate to test env't, in config", LogLevel.Info);
                 throw new Exception(ex.Message);
             }
            // Initialize CreationData            
            int overideSessionFE_MaxCreateSessionsAllowedPerUser = 1200;
            DateTime SessionCreatedTime = DateTime.UtcNow.AddDays(-8);
            SessionState createSessionState = null;
           

            Log.WriteLine("Inject Liven_db to override the MaxCreateSessionAllowedPerUser setting",LogLevel.Info);

            myConnection = new SqlConnection(ConfigurationManager.ConnectionStrings["lest_AsyncNotification_db"].ConnectionString + ";Asynchronous Processing=true"); //get connection string and make connection

            myConnection.Open();

            myCommand = new SqlCommand(string.Format("UPDATE  [LIVEN_NPDB].[dbo].[t_setting_overrides]" +
                                                     "SET  [vc_value]={0}" +
                                                     "WHERE [vc_setting]='lest_SessionFE_MaxCreateSessionsAllowedPerUser'",
                                                     overideSessionFE_MaxCreateSessionsAllowedPerUser.ToString()), myConnection);
            myCommand.BeginExecuteReader();

            myConnection.Close();

            StopGCService();

            for (int Cntr = 1; Cntr < overideSessionFE_MaxCreateSessionsAllowedPerUser; Cntr++)
            {                
                try
                {
                    createSessionState = InitSessionState(SessionCreatedTime.ToString(), true, 0);
                    testHooksClient.CreateSession(createSessionState);
                }
                catch (RestException rx)
                {
                    throw new RestException(rx.Response, rx.Message + "Unable to create the max number of sessions allowed");
                }

            }
            StartGCService();

            //Reverting value of  SessionFE_MaxCreateSessionsAllowedPerUser to its original value
            myConnection = new SqlConnection(ConfigurationManager.ConnectionStrings["lest_AsyncNotification_db"].ConnectionString + ";Asynchronous Processing=true"); //get connection string and make connection

            myConnection.Open();

            myCommand = new SqlCommand(string.Format("UPDATE  [LIVEN_NPDB].[dbo].[t_setting_overrides]" +
                                                     "SET  [vc_value]={0}" +
                                                     "WHERE [vc_setting]='lest_SessionFE_MaxCreateSessionsAllowedPerUser'",
                                                     OrgnlSessionFE_MaxCreateSessionsAllowedPerUser.ToString()), myConnection);
            myCommand.BeginExecuteReader();

            myConnection.Close();

        }
        /// <summary>
        /// Feature test for greate than Max no. of session created 
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature test for Session.svc CreateSession API- test for greate than Max no. of session created .")]
        [TestProperty("Type", "FeatureTests")]
        public void N_CreateSession_GreaterThanMaxSessionCreate()
        {           
            Log.WriteLine("IF THIS FAILED , Do NOT FORGET TO RESET 'vc-valu'e for 'lest_SessionFE_MaxCreateSessionsAllowedPerUser' TO ITS ORIGINAL VALUE " + int.MaxValue.ToString(), LogLevel.Info);
            Log.WriteLine("Do NOT RUN This Test Before overiding the 'vc-valu'e for 'lest_SessionFE_MaxCreateSessionsAllowedPerUser' of" +
                          "[LIVEN_NPDB].[dbo].[t_setting_overrides] to a less Max value such as 100 !", LogLevel.Info);

            Log.WriteLine("make sure Data Source is assigned proper name, as appropriate to test env't, in config", LogLevel.Info);
            SqlConnection myConnection = null;
            SqlCommand myCommand = null;
            int OrgnlSessionFE_MaxCreateSessionsAllowedPerUser = int.MaxValue;
            try
            {
                //get connection string and make connection
                myConnection = new SqlConnection(ConfigurationManager.ConnectionStrings["lest_AsyncNotification_db"].ConnectionString + ";Asynchronous Processing=true");
                myConnection.Open();

                //Read the original of SessionFE_MaxCreateSessionsAllowedPerUser value in db
                myCommand = new SqlCommand("SELECT [vc_value]" +
                                                      "FROM [LIVEN_NPDB].[dbo].[t_setting_overrides]" +
                                                      "WHERE [vc_setting]='lest_SessionFE_MaxCreateSessionsAllowedPerUser'", myConnection);

                SqlDataReader LivenReader = myCommand.ExecuteReader();

                if (LivenReader.Read())
                {
                    OrgnlSessionFE_MaxCreateSessionsAllowedPerUser = int.Parse(LivenReader[0].ToString());
                }

                myConnection.Close();
            }
            catch (Exception ex)
            {
                Log.WriteLine("make sure connection string is assigned proper value, as appropriate to test env't, in config", LogLevel.Info);
                throw new Exception(ex.Message);
            }
            // Initialize CreationData            
            int overideSessionFE_MaxCreateSessionsAllowedPerUser =1200;           
           
            
            Log.WriteLine("Inject Liven_db to override the MaxCreateSessionAllowedPerUser setting", LogLevel.Info);

            myConnection = new SqlConnection(ConfigurationManager.ConnectionStrings["lest_AsyncNotification_db"].ConnectionString + ";Asynchronous Processing=true"); //get connection string and make connection

            myConnection.Open();

            myCommand = new SqlCommand(string.Format("UPDATE  [LIVEN_NPDB].[dbo].[t_setting_overrides]" +
                                                     "SET  [vc_value]={0}" +
                                                     "WHERE [vc_setting]='lest_SessionFE_MaxCreateSessionsAllowedPerUser'",
                                                     overideSessionFE_MaxCreateSessionsAllowedPerUser.ToString()), myConnection);
            myCommand.BeginExecuteReader();

            myConnection.Close();

            // Initialize CreationData 
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");

            try
            {
                for (int Cntr = 0; Cntr < int.MaxValue; Cntr++)
                {
                    SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(),
                                                                                    creationData,
                                                                                    Config.Environment.UserSettings[2].Membername,
                                                                                    Config.Environment.UserSettings[2].Password);
                    AssertCreateSessionState(creationData, sessionState);
                }

                Assert.Fail("Error: Session more than the max allowed to create for the environment " + int.MaxValue.ToString() + " has been created");
            }
            catch (RestException rx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.TooManySessionsCreatedByTheUser), rx.Response);
            }

            //Reverting value of  SessionFE_MaxCreateSessionsAllowedPerUser to its original value
            myConnection = new SqlConnection(ConfigurationManager.ConnectionStrings["lest_AsyncNotification_db"].ConnectionString + ";Asynchronous Processing=true"); //get connection string and make connection

            myConnection.Open();

            myCommand = new SqlCommand(string.Format("UPDATE  [LIVEN_NPDB].[dbo].[t_setting_overrides]" +
                                                     "SET  [vc_value]={0}" +
                                                     "WHERE [vc_setting]='lest_SessionFE_MaxCreateSessionsAllowedPerUser'",
                                                     OrgnlSessionFE_MaxCreateSessionsAllowedPerUser.ToString()), myConnection);
            myCommand.BeginExecuteReader();

            myConnection.Close();
                   
        }

        /// <summary>
        /// Feature test for CreateSession Profile info
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("FeatureTests for Session.svc CreateSession API.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_CreateSession_ProfileInfo_DisplayNameURL()
        {
            // Initialize CreationData
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, new byte[] { 1, 2, 3 }, 
                                                               new InactivityWarningBehavior(), true, "TestGame");
            
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);          

            AssertCreateSessionState(creationData, sessionState);
           
            int indx = Config.Environment.StsSettings.StsUrl.IndexOf("sts");  
                                                                 
            //use liveCache data when time allows
            Assert.AreEqual(sessionState.Seats[0].DisplayName,Config.Environment.UserSettings[0].Gamertag,"Dispaly name in LiveCache is not as expected");
            Assert.IsTrue(sessionState.Seats[0].DisplayPicSmallURL.StartsWith(Config.Environment.StsSettings.StsUrl.Substring(0,indx)), "Display Pic Small URL in LiveCache is not as expected");
            Assert.IsTrue(sessionState.Seats[0].DisplayPicURL.StartsWith(Config.Environment.StsSettings.StsUrl.Substring(0, indx)), "Display Pic  URL in LiveCache is not as expected");
       
       }
       
     
        private static void StopGCService()
        {
            NotificationTestCommon.StopService(MachineName, "GarbageCollectorService");
        }

        private static void StartGCService()
        {
            NotificationTestCommon.StartService(MachineName, "GarbageCollectorService");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\Service References\GmsIngestionService\Reference.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MultiPlayer.Test.GmsIngestionService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://gamemetadata.common.mix.contentingestion/V1", ConfigurationName="GmsIngestionService.IIngestionService")]
    public interface IIngestionService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gamemetadata.common.mix.contentingestion/V1/IIngestionService/ConfigureGam" +
            "e", ReplyAction="http://gamemetadata.common.mix.contentingestion/V1/IIngestionService/ConfigureGam" +
            "eResponse")]
        MultiPlayer.Test.GmsIngestionService.ConfigureGameResponse ConfigureGame(MultiPlayer.Test.GmsIngestionService.ConfigureGameRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gamemetadata.common.mix.contentingestion/V1/IIngestionService/ConfigureGam" +
            "eViaXml", ReplyAction="http://gamemetadata.common.mix.contentingestion/V1/IIngestionService/ConfigureGam" +
            "eViaXmlResponse")]
        MultiPlayer.Test.GmsIngestionService.ConfigureGameViaXmlResponse ConfigureGameViaXml(MultiPlayer.Test.GmsIngestionService.ConfigureGameViaXmlRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ConfigureGame", WrapperNamespace="http://gamemetadata.common.mix.contentingestion/V1", IsWrapped=true)]
    public partial class ConfigureGameRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://gamemetadata.common.mix.contentingestion/V1", Order=0)]
        public GameMetadata.Common.Mix.ContentIngestion.Game game;
        
        public ConfigureGameRequest() {
        }
        
        public ConfigureGameRequest(GameMetadata.Common.Mix.ContentIngestion.Game game) {
            this.game = game;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ConfigureGameResponse", WrapperNamespace="http://gamemetadata.common.mix.contentingestion/V1", IsWrapped=true)]
    public partial class ConfigureGameResponse {
        
        public ConfigureGameResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ConfigureGameViaXml", WrapperNamespace="http://gamemetadata.common.mix.contentingestion/V1", IsWrapped=true)]
    public partial class ConfigureGameViaXmlRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://gamemetadata.common.mix.contentingestion/V1", Order=0)]
        public string gameXml;
        
        public ConfigureGameViaXmlRequest() {
        }
        
        public ConfigureGameViaXmlRequest(string gameXml) {
            this.gameXml = gameXml;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ConfigureGameViaXmlResponse", WrapperNamespace="http://gamemetadata.common.mix.contentingestion/V1", IsWrapped=true)]
    public partial class ConfigureGameViaXmlResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://gamemetadata.common.mix.contentingestion/V1", Order=0)]
        public bool ConfigureGameViaXmlResult;
        
        public ConfigureGameViaXmlResponse() {
        }
        
        public ConfigureGameViaXmlResponse(bool ConfigureGameViaXmlResult) {
            this.ConfigureGameViaXmlResult = ConfigureGameViaXmlResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface IIngestionServiceChannel : MultiPlayer.Test.GmsIngestionService.IIngestionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class IngestionServiceClient : System.ServiceModel.ClientBase<MultiPlayer.Test.GmsIngestionService.IIngestionService>, MultiPlayer.Test.GmsIngestionService.IIngestionService {
        
        public IngestionServiceClient() {
        }
        
        public IngestionServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public IngestionServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IngestionServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IngestionServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public MultiPlayer.Test.GmsIngestionService.ConfigureGameResponse ConfigureGame(MultiPlayer.Test.GmsIngestionService.ConfigureGameRequest request) {
            return base.Channel.ConfigureGame(request);
        }
        
        public MultiPlayer.Test.GmsIngestionService.ConfigureGameViaXmlResponse ConfigureGameViaXml(MultiPlayer.Test.GmsIngestionService.ConfigureGameViaXmlRequest request) {
            return base.Channel.ConfigureGameViaXml(request);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\Sessions\LeaveSession.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using CloudServices.Test.Common.Configuration;
using Multiplayer.Test.API;
using AsyncMultiplayer.SessionCommon;
using System.Net;
using System.Diagnostics;
using System.Threading;
using AsyncMultiplayer.NotificationService;
using CloudServices.Test.Common.Proxy;
using LIVEN.Common.Diagnostics;

namespace MultiPlayer.Test.API
{
    /// <summary>
    /// Test Cases for Sessions.svc LeaveSession API
    /// </summary>
    [TestClass]
    public class LeaveSession : TestAreaBase
    {
        private static NotificationTestCommon common = new NotificationTestCommon();

        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            
            LockTest();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            UnlockTest();
        }
        /// <summary>
        /// BVT test for LeaveSession
        /// </summary>
        [TestMethod, Owner("a-bkolli"), Priority(0)]
        [Description("BVT for Session.svc LeaveSession API.")]
        [TestProperty("Type", "BVTs")]
        public void BVT_LeaveSession()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            SessionState createSessionState = null;
            SessionState joinSessionState = null;
            SessionState leaveSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create New Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            // Initialize JoinData
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            //Join Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID.ToString(), joinData);

            //Assert SessionState
            AssertJoinSessionState(createSessionState, joinSessionState);

            //Leave Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            this.GameSessionProxy.LeaveSession(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());

            //View Session after Leave
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            leaveSessionState = this.GameSessionProxy.ViewSession(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());

            //Assert SessionState
            AssertLeaveSessionState(joinSessionState, leaveSessionState);
        }

        //relate bug 3300 -- activated the bug so that we will have an appropriate error message at the end.
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify that leaving a session while there is no one else in the session does not result in error.")]
        [TestProperty("Type", "Features")]
        public void P_LeaveSession_EmptySession()
        {
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, new InactivityWarningBehavior(), true, "TestGame");
            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            AssertCreateSessionState(creationData, sessionState);

            this.GameSessionProxy.LeaveSession(sessionState.SessionID.ToString(), sessionState.GameID.ToString());

            //verify that player is not in the session anymore.
            try
            {
                this.GameSessionProxy.ViewSession(sessionState.SessionID.ToString(), sessionState.GameID.ToString(), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
                Assert.Fail("Expecting Forbidden as player should not be in the session anymore.");
            }
            catch (RestException ex)
            {
                //modify this after bug fix!
                VerifyException(403, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.UserNotAllowedToGetStateInSession), ex.Response);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify that user's notifications for that session are deleted after player leaves session.")]
        [TestProperty("Type", "Features")]
        public void P_LeaveSession_DeleteNotificationsAfterLeaveSession()
        {
            common.CheckNotificationCount(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, new InactivityWarningBehavior(), true, "TestGame");
            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            AssertCreateSessionState(creationData, sessionState);

            JoinData joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 1);
            this.GameSessionProxy.JoinSession(sessionState.SessionID, joinData, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            //P1 makes a move to generate a your turn notification for P2
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };
            this.GameStateProxy.PutGameState(sessionState.SessionID, sessionState.GameID.ToString(), modifiableGameState, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);

            common.VerifyNotificationCreated(sessionState.GameID.ToString(), sessionState.SessionID, Notification.NotificationType.YourTurn, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            //send a user nudge
            GameAction gameAction = new GameAction();
            gameAction.ActionType = GameActionType.UserNudge;
            gameAction.ActionData = new byte[] { 1 };
            gameAction.ActionTime = DateTime.Now;
            gameAction.SequenceNumber = 1;
            this.GameStateProxy.PostGameAction(sessionState.SessionID.ToString(), sessionState.GameID.ToString(), gameAction, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            common.VerifyNotificationCreated(sessionState.GameID.ToString(), sessionState.SessionID, Notification.NotificationType.Nudge, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            this.GameSessionProxy.LeaveSession(sessionState.SessionID.ToString(), sessionState.GameID.ToString(), Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            Thread.Sleep(20000); //give time for notification internal to process delete requests.
            List<Notification> notificationList = this.NotificationsServiceProxy.GetNotifications(
                sessionState.GameID.ToString(),
                sessionState.SessionID,
                0,
                String.Empty,
                1,
                string.Empty,
                true,
                Config.Environment.UserSettings[1].Membername,
                Config.Environment.UserSettings[1].Password,
                null);
            Assert.IsNotNull(notificationList);
            Assert.AreEqual(0, notificationList.Count, "Error: Did not exepect any nudge notifications for user who is not on active seat.");
        }

        /// <summary>
        /// Feature Test for LeaveSession to verify Multiple Players can leave session and SessionState will update after each player left
        /// </summary>
        [TestMethod, Owner("a-bkolli"), Priority(1)]
        [Description("Feature Test for Session.svc LeaveSession API to verify Multiple Players can LeaveSession.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_LeaveSession_MultiplePlayersLeaveSession()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 5, "Should have at least 5 users under <preExistingUsers> node in App.config for selected environment");

            SessionState createSessionState = null;
            SessionState preJoinSessionState = null;
            SessionState postJoinSessionState = null;
            SessionState preLeaveSessionState = null;
            SessionState postLeaveSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create New Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            preJoinSessionState = createSessionState;

            for (int i = 1; i < 5; i++)
            {
                // Initialize JoinData
                JoinData joinData = InitializeJoinData(preJoinSessionState.GameID, preJoinSessionState.SessionID, i);

                //Join Session
                this.GameSessionProxy.UserID = Config.Environment.UserSettings[i].Membername;
                this.GameSessionProxy.Password = Config.Environment.UserSettings[i].Password;
                postJoinSessionState = this.GameSessionProxy.JoinSession(preJoinSessionState.SessionID.ToString(), joinData);

                //Assert SessionState
                AssertJoinSessionState(preJoinSessionState, postJoinSessionState);

                preJoinSessionState = postJoinSessionState;
            }

            //Player2 Leave Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            this.GameSessionProxy.LeaveSession(postJoinSessionState.SessionID.ToString(), postJoinSessionState.GameID.ToString());

            preLeaveSessionState = postJoinSessionState;

            //View Session after Leave
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            postLeaveSessionState = this.GameSessionProxy.ViewSession(preLeaveSessionState.SessionID.ToString(), preLeaveSessionState.GameID.ToString());

            //Assert SessionState
            AssertLeaveSessionState(preLeaveSessionState, postLeaveSessionState);

            //Player3 Leave Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[2].Membername;      // player3
            this.GameSessionProxy.Password = Config.Environment.UserSettings[2].Password;

            this.GameSessionProxy.LeaveSession(postJoinSessionState.SessionID.ToString(), postJoinSessionState.GameID.ToString());

            preLeaveSessionState = postJoinSessionState;

            //View Session after Leave
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            postLeaveSessionState = this.GameSessionProxy.ViewSession(preLeaveSessionState.SessionID.ToString(), preLeaveSessionState.GameID.ToString());

            //Assert SessionState
            AssertLeaveSessionState(preLeaveSessionState, postLeaveSessionState);
        }

        /// <summary>
        /// Feature Test for LeaveSession to verify All Players LeaveSession
        /// </summary>
        [TestMethod, Owner("a-bkolli"), Priority(1)]
        [Description("Feature Test for Session.svc LeaveSession API to verify All Players can LeaveSession.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_LeaveSession_AllPlayersLeaveSession()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 3, "Should have at least 5 users under <preExistingUsers> node in App.config for selected environment");

            SessionState createSessionState = null;
            SessionState preJoinSessionState = null;
            SessionState postJoinSessionState = null;
            SessionState preLeaveSessionState = null;
            SessionState postLeaveSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create New Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            preJoinSessionState = createSessionState;

            for (int i = 1; i < 3; i++)
            {
                // Initialize JoinData
                JoinData joinData = InitializeJoinData(preJoinSessionState.GameID, preJoinSessionState.SessionID, i);

                //Join Session
                this.GameSessionProxy.UserID = Config.Environment.UserSettings[i].Membername;
                this.GameSessionProxy.Password = Config.Environment.UserSettings[i].Password;
                postJoinSessionState = this.GameSessionProxy.JoinSession(preJoinSessionState.SessionID.ToString(), joinData);

                //Assert SessionState
                AssertJoinSessionState(preJoinSessionState, postJoinSessionState);
            }

            //Player2 Leave Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            this.GameSessionProxy.LeaveSession(postJoinSessionState.SessionID.ToString(), postJoinSessionState.GameID.ToString());

            preLeaveSessionState = postJoinSessionState;

            //View Session after Leave
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            postLeaveSessionState = this.GameSessionProxy.ViewSession(preLeaveSessionState.SessionID.ToString(), preLeaveSessionState.GameID.ToString());

            //Assert SessionState
            AssertLeaveSessionState(preLeaveSessionState, postLeaveSessionState);

            //Player3 Leave Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[2].Membername;      // player3
            this.GameSessionProxy.Password = Config.Environment.UserSettings[2].Password;

            this.GameSessionProxy.LeaveSession(postJoinSessionState.SessionID.ToString(), postJoinSessionState.GameID.ToString());

            preLeaveSessionState = postJoinSessionState;

            //View Session after Leave
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            postLeaveSessionState = this.GameSessionProxy.ViewSession(preLeaveSessionState.SessionID.ToString(), preLeaveSessionState.GameID.ToString());

            //Assert SessionState
            AssertLeaveSessionState(preLeaveSessionState, postLeaveSessionState);

            //Player1 Leave Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            this.GameSessionProxy.LeaveSession(postJoinSessionState.SessionID.ToString(), postJoinSessionState.GameID.ToString());

            preLeaveSessionState = postJoinSessionState;

            //View Session after Leave
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            postLeaveSessionState = this.GameSessionProxy.ViewSession(preLeaveSessionState.SessionID.ToString(), preLeaveSessionState.GameID.ToString());

            //Assert SessionState
            AssertLeaveSessionState(preLeaveSessionState, postLeaveSessionState);
        }

        /// <summary>
        /// Feature Test for LeaveSession to verify Owner LeaveSession
        /// </summary>
        [TestMethod, Owner("a-bkolli"), Priority(1)]
        [Description("Feature Test for Session.svc LeaveSession API to verify Owner LeaveSession.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_LeaveSession_OwnerLeaveSession()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 3, "Should have at least 3 users under <preExistingUsers> node in App.config for selected environment");

            SessionState createSessionState = null;
            SessionState preJoinSessionState = null;
            SessionState postJoinSessionState = null;
            SessionState preLeaveSessionState = null;
            SessionState postLeaveSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create New Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            preJoinSessionState = createSessionState;

            for (int i = 1; i < 3; i++)
            {
                // Initialize JoinData
                JoinData joinData = InitializeJoinData(preJoinSessionState.GameID, preJoinSessionState.SessionID, i);

                //Join Session
                this.GameSessionProxy.UserID = Config.Environment.UserSettings[i].Membername;
                this.GameSessionProxy.Password = Config.Environment.UserSettings[i].Password;
                postJoinSessionState = this.GameSessionProxy.JoinSession(preJoinSessionState.SessionID.ToString(), joinData);

                //Assert SessionState
                AssertJoinSessionState(preJoinSessionState, postJoinSessionState);
            }

            //Player1 Leave Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            this.GameSessionProxy.LeaveSession(postJoinSessionState.SessionID.ToString(), postJoinSessionState.GameID.ToString());

            preLeaveSessionState = postJoinSessionState;

            //View Session after Leave
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            postLeaveSessionState = this.GameSessionProxy.ViewSession(preLeaveSessionState.SessionID.ToString(), preLeaveSessionState.GameID.ToString());

            //Assert SessionState
            AssertLeaveSessionState(preLeaveSessionState, postLeaveSessionState);
       }

        /// <summary>
        /// Feature Test for LeaveSession to verify Owner LeaveSession when No Other players in Session
        /// </summary>
        [TestMethod, Owner("a-bkolli"), Priority(1)]
        [Description("Feature Test for Session.svc LeaveSession API to verify Owner LeaveSession when No Other Players in Session.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_LeaveSession_OwnerLeaveSession_NoPlayersInSession()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            SessionState createSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create New Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            //Player1 Leave Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            //TODO: Currently we throw an exception when Owner LeaveSession when No other players in Session
            //Add verification when Bug 1987 is Fixed
            this.GameSessionProxy.LeaveSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());
        }

        /// <summary>
        /// Feature Test for LeaveSession to verify Player can LeaveSession from one session while exists in other sessions
        /// </summary>
        [TestMethod, Owner("a-bkolli"), Priority(1)]
        [Description("Feature Test for Session.svc LeaveSession API to verify Owner LeaveSession.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_LeaveSession_PlayerLeaveSession_ExistsInOtherSessions()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            SessionState createSessionState1 = null;
            SessionState createSessionState2 = null;
            SessionState createSessionState3 = null;
            SessionState joinSessionState1 = null;
            SessionState joinSessionState2 = null;
            SessionState joinSessionState3 = null;
            SessionState postLeaveSessionState = null;
            SessionState viewSessionState2 = null;
            SessionState viewSessionState3 = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create Session - Session 1
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            createSessionState1 = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState1);

            //Create Session - Session 2
            createSessionState2 = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState2);

            //Create Session - Session 3
            createSessionState3 = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState3);

            // Initialize JoinData
            JoinData joinData = InitializeJoinData(createSessionState1.GameID, createSessionState1.SessionID, 1);

            //Join Session 1 - Player 2
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
           joinSessionState1 = this.GameSessionProxy.JoinSession(createSessionState1.SessionID.ToString(), joinData);

            //Assert SessionState
            AssertJoinSessionState(createSessionState1, joinSessionState1);

            // Initialize JoinData
            joinData = InitializeJoinData(createSessionState1.GameID, createSessionState1.SessionID, 1);

            //Join Session 2 - Player 2
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            joinSessionState2 = this.GameSessionProxy.JoinSession(createSessionState2.SessionID.ToString(), joinData);

            //Assert SessionState
            AssertJoinSessionState(createSessionState2, joinSessionState2);

            // Initialize JoinData
            joinData = InitializeJoinData(createSessionState1.GameID, createSessionState1.SessionID, 1);

            //Join Session 3 - Player 3
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            joinSessionState3 = this.GameSessionProxy.JoinSession(createSessionState3.SessionID.ToString(), joinData);

            //Assert SessionState
            AssertJoinSessionState(createSessionState3, joinSessionState3);


            //Player2 LeaveSession from Session1
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            this.GameSessionProxy.LeaveSession(joinSessionState1.SessionID.ToString(), joinSessionState1.GameID.ToString());

            //View Session after Leave
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            postLeaveSessionState = this.GameSessionProxy.ViewSession(joinSessionState1.SessionID.ToString(), joinSessionState1.GameID.ToString());

            //Assert SessionState
            AssertLeaveSessionState(joinSessionState1, postLeaveSessionState);
            Assert.AreEqual((joinSessionState1.Seats.Count() - 1), postLeaveSessionState.Seats.Count(), "Player 2 LeaveSession didn't execute properly");
          
            //ViewSession for Session 2
            viewSessionState2 = this.GameSessionProxy.ViewSession(joinSessionState2.SessionID.ToString(), joinSessionState2.GameID.ToString());

            //Assert SessionState
            AssertSessionState(joinSessionState2, viewSessionState2);
            Assert.AreEqual(joinSessionState2.Seats.Count(), viewSessionState2.Seats.Count(), "Seats count decreased with out Player LeaveSession");

            //ViewSession for Session 3
            viewSessionState3 = this.GameSessionProxy.ViewSession(joinSessionState3.SessionID.ToString(), joinSessionState3.GameID.ToString());

            //Assert SessionState
            AssertSessionState(joinSessionState3, viewSessionState3);
            Assert.AreEqual(joinSessionState3.Seats.Count(), viewSessionState3.Seats.Count(), "Seats count decreased with out Player LeaveSession");
        }

        /// <summary>
        /// Feature test for LeaveSession to verify a Player can not LeaveSession Twice
        /// </summary>
        [TestMethod, Owner("a-bkolli"), Priority(2)]
        [Description("FeatureTest for Session.svc LeaveSession API to verify a Player can not LeaveSession Twice.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_LeaveSession_PlayerLeaveSessionTwice()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            SessionState createSessionState = null;
            SessionState joinSessionState = null;
            SessionState leaveSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create New Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            // Initialize JoinData
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            //Join Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID.ToString(), joinData);

            //Assert SessionState
            AssertJoinSessionState(createSessionState, joinSessionState);

            //Leave Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            this.GameSessionProxy.LeaveSession(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());

            //View Session after Leave
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            leaveSessionState = this.GameSessionProxy.ViewSession(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());

            //Assert SessionState
            AssertLeaveSessionState(joinSessionState, leaveSessionState);

            //Player2 try to LeaveSession 2nd time
            try
            {
                this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
                this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

                this.GameSessionProxy.LeaveSession(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());
            }
            catch (RestException restEx)
            {
                VerifyException(403, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.PlayerIsNotInSession), restEx.Response);
            }
        }

        /// <summary>
        /// Feature test for LeaveSession to verify a Player who is Not In Session can not LeaveSession
        /// </summary>
        [TestMethod, Owner("a-bkolli"), Priority(2)]
        [Description("FeatureTest for Session.svc LeaveSession API to verify a Player who is Not In Session can not LeaveSession.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_LeaveSession_NotExistsPlayerLeaveSession()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 3, "Should have at least 3 users under <preExistingUsers> node in App.config for selected environment");

            SessionState createSessionState = null;
            SessionState joinSessionState = null;
            SessionState sessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create New Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            // Initialize JoinData
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            //Join Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID.ToString(), joinData);

            //Assert SessionState
            AssertJoinSessionState(createSessionState, joinSessionState);

            //Non-Exists Player try to Leave Session
            try
            {
                this.GameSessionProxy.UserID = Config.Environment.UserSettings[2].Membername;      // player3
                this.GameSessionProxy.Password = Config.Environment.UserSettings[2].Password;

                this.GameSessionProxy.LeaveSession(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.PlayerIsNotInSession), restEx.Response);
            }

            //View Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            sessionState = this.GameSessionProxy.ViewSession(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());

            Assert.IsTrue((sessionState.Seats.Length == joinSessionState.Seats.Length) &&
                           (sessionState.ReservedSeatsAvailable == joinSessionState.ReservedSeatsAvailable) &&
                           (sessionState.SessionID == joinSessionState.SessionID),
                           "Error: Session state has changed with a try to leave by non-exosting user");

        }

        /// <summary>
        /// Test for a Player LeaveSession - Not Exist SessionID
        /// </summary>
        [TestMethod, Owner("a-bkolli"), Priority(1)]
        [Description("Feature Test for Sessions.svc LeaveSession API to verify a Player try to Leave - GUID with no dashes as SessionID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_LeaveSession_NotExistSessionID()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //Assert SessionState
            AssertJoinSessionState(createSessionState, joinSessionState);

            //Leave Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            try
            {
                this.GameSessionProxy.LeaveSession("j6b048d0-15gd-4i9d-8f65-91bz93s762f5", joinSessionState.GameID.ToString());
                Assert.Fail("Error: Expected NOT FOUND with LivenError it didn't");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// Test for a Player LeaveSession - Empty String as SessionID
        /// </summary>
        [TestMethod, Owner("a-bkolli"), Priority(1)]
        [Description("Feature Test for Sessions.svc LeaveSession API to verify a Player try to Leave - Empty String as SessionID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_LeaveSession_EmptyStringSessionID()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //Assert SessionState
            AssertJoinSessionState(createSessionState, joinSessionState);

            //Leave Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            try
            {
                this.GameSessionProxy.LeaveSession(String.Empty, joinSessionState.GameID.ToString());
                Assert.Fail("Error: Expecting Method NotAllowed error but it didn't");
            }
            catch (RestException restEx)
            {              
                VerifyException(HttpStatusCode.MethodNotAllowed, restEx.Response);
            }
        }

        /// <summary>
        /// Test for a Player LeaveSession - Null String as SessionID
        /// </summary>
        [TestMethod, Owner("a-bkolli"), Priority(1)]
        [Description("Feature Test for Sessions.svc LeaveSession API to verify a Player try to Leave - Null String as SessionID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_LeaveSession_NullAsSessionID()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //Assert SessionState
            AssertJoinSessionState(createSessionState, joinSessionState);

            //Leave Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            try
            {
                this.GameSessionProxy.LeaveSession(null, joinSessionState.GameID.ToString());
                Assert.Fail("Error: Expected METHOD NOT ALLOWED error but it didn't");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.MethodNotAllowed, restEx.Response);
            }
        }

        /// <summary>
        /// Test for a Player LeaveSession - Long String as SessionID
        /// </summary>
        [TestMethod, Owner("a-bkolli"), Priority(1)]
        [Description("Feature Test for Sessions.svc LeaveSession API to verify a Player try to Leave - Long String as SessionID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_LeaveSession_GTMaxLengthStringSessionID()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //Assert SessionState
            AssertJoinSessionState(createSessionState, joinSessionState);

            //Leave Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            try
            {
                this.GameSessionProxy.LeaveSession("ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz012", joinSessionState.GameID.ToString());
                Assert.Fail("Error: Expected NOT FOUND error but it didn't");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound ,SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// Test for a Player LeaveSession - One Char String as SessionID
        /// </summary>
        [TestMethod, Owner("a-bkolli"), Priority(1)]
        [Description("Feature Test for Sessions.svc LeaveSession API to verify a Player try to Leave - One Char String as SessionID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_LeaveSession_OneCharStringSessionID()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //Assert SessionState
            AssertJoinSessionState(createSessionState, joinSessionState);

            //Leave Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            try
            {
                this.GameSessionProxy.LeaveSession("1", joinSessionState.GameID.ToString());
                Assert.Fail("Error: Expected NOT FOUND exception but it didn't");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }       
              
        /// <summary>
        /// Test for a Player LeaveSession - String.Empty GameID
        /// </summary>
        [TestMethod, Owner("a-bkolli"), Priority(1)]
        [Description("Feature Test for Sessions.svc LeaveSession API to verify a Player try to Leave - String.Empty GameID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_LeaveSession_EmptyStringGameID()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //Assert SessionState
            AssertJoinSessionState(createSessionState, joinSessionState);

            //Leave Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            try
            {
                this.GameSessionProxy.LeaveSession(joinSessionState.SessionID, String.Empty);
                Assert.Fail("Error:Expected NOTFOUND error but it didn't");
                
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound,restEx.Response);
            }
        }

        /// <summary>
        /// Test for a Player LeaveSession - null GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc LeaveSession API to verify a Player try to Leave - null GameID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_LeaveSession_NullGameID()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //Assert SessionState
            AssertJoinSessionState(createSessionState, joinSessionState);

            //Leave Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            try
            {
                this.GameSessionProxy.LeaveSession(joinSessionState.SessionID, null);
                Assert.Fail("Error: Expected NOT FOUND error, It didn't");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound,restEx.Response);
            }
        }

        /// <summary>
        /// Test for a Player LeaveSession - Invalid format GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc LeaveSession API to verify a Player try to Leave - Invalid Format GameID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_LeaveSession_InvalidFormatGameID()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //Assert SessionState
            AssertJoinSessionState(createSessionState, joinSessionState);

            //Leave Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            string GameIdRndm = GetInvalidGameId();

            try
            {
                this.GameSessionProxy.LeaveSession(joinSessionState.SessionID, GameIdRndm);
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidGameIDFormatWhileGettingIdentity), restEx.Response);
            }
        }

        /// <summary>
        /// Test for a Player LeaveSession - One Char String GameID
        /// </summary>
        [TestMethod, Owner("a-bkolli"), Priority(1)]
        [Description("Feature Test for Sessions.svc LeaveSession API to verify a Player try to Leave - One Char String GameID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_LeaveSession_OneCharStringGameID()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //Assert SessionState
            AssertJoinSessionState(createSessionState, joinSessionState);

            //Leave Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            try
            {
                this.GameSessionProxy.LeaveSession(joinSessionState.SessionID, "A");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidGameIDFormatWhileGettingIdentity), restEx.Response);
            }
        }

        /// <summary>
        /// Test for a Player LeaveSession - GameID not matching partner token Title ID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc LeaveSession API to verify Exception when GameID don't match Partner Token TitleID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_LeaveSession_GameIdNotMatchPartnerTokenTitleID()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //Assert SessionState
            AssertJoinSessionState(createSessionState, joinSessionState);

            //Leave Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            Random rndm = new Random();
            uint RandomGameId = uint.MinValue;

            do
            {
                RandomGameId = (uint)rndm.Next();
            }
            while (uint.Parse(Config.Environment.StsSettings.TitleId) == RandomGameId);

            try
            {
                this.GameSessionProxy.LeaveSession(joinSessionState.SessionID, RandomGameId.ToString());
                Assert.Fail(string.Format("LeaveSession should not be allowed for an invalid game ID ({0})", RandomGameId.ToString()));
            }
            catch (RestException restEx)
            {                
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDDoesNotMatchPartnerTokenTitleID), restEx.Response);
            
            }
        }

        /// <summary>
        /// Test for a Player on active seat leave session and Owner get warning
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc LeaveSession API to verify a Player on active seat leave session and Owner get warning.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_LeaveSession_ActiveSeatPlayerLeft_OwnerGetWarning()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 3, "Should have at least 3 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");

            //Player1 creates Session
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                                  Config.Environment.UserSettings[0].Membername,
                                                                                  Config.Environment.UserSettings[0].Password);
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState1 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                               Config.Environment.UserSettings[1].Membername,
                                                                               Config.Environment.UserSettings[1].Password);

            AssertJoinSessionState(createSessionState, joinSessionState1);
            
            //Player3 JoinSession 
            JoinData joinData2 = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 2);

            SessionState joinSessionState2 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData2,
                                                                               Config.Environment.UserSettings[2].Membername,
                                                                               Config.Environment.UserSettings[2].Password);
            AssertJoinSessionState(joinSessionState1, joinSessionState2);

            //setting active seat to 2
            ModifiableGameState modifiedState = new ModifiableGameState();
            modifiedState.ActiveSeatIndex = 2;
            modifiedState.GameData = new byte[] { 50, 51, 52, 53, 54, 55, 56 };

            this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiedState,
                                             Config.Environment.UserSettings[0].Membername,
                                             Config.Environment.UserSettings[0].Password);

            FullGameState fullGameState = this.GameStateProxy.GetGameState(createSessionState.SessionID, createSessionState.GameID.ToString(),
                                                                           Config.Environment.UserSettings[0].Membername,
                                                                           Config.Environment.UserSettings[0].Password);

            //delete notifications so far
            this.NotificationsServiceProxy.DeleteNotificationBySession(createSessionState.GameID.ToString(),
                                                                       createSessionState.SessionID,
                                                                       Config.Environment.UserSettings[0].Membername,
                                                                       Config.Environment.UserSettings[0].Password);

            //person on active seat leave session
            this.GameSessionProxy.LeaveSession(createSessionState.SessionID, createSessionState.GameID.ToString(),
                                               Config.Environment.UserSettings[2].Membername,
                                               Config.Environment.UserSettings[2].Password);

            // Get/verify notification  after active seat player left session
            VerifyNotification(joinSessionState2,
                               Notification.NotificationCategory.ToDo, Notification.NotificationType.Warning, true,
                               Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);

        }

        /// <summary>
        ///Test for Sessions.svc LeaveSession API to verify a Player Can leave session again:Unaffected by Azure Table Inconsistency
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc LeaveSession API to verify a Player Can leave session again:Unaffected by Azure Table Inconsistency.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_LeaveSession_LeaveSessionAgain_AzureInconsistency()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 3, "Should have at least 3 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");

            //Player1 creates Session
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                                  Config.Environment.UserSettings[0].Membername,
                                                                                  Config.Environment.UserSettings[0].Password);

            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState1 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                               Config.Environment.UserSettings[1].Membername,
                                                                               Config.Environment.UserSettings[1].Password);

            AssertJoinSessionState(createSessionState, joinSessionState1);

            Assert.IsTrue(joinSessionState1.Seats.Length == 2, "Error: Number of Players are expected to be 2 but got "+
                          joinSessionState1.Seats.Length.ToString());

            this.GameSessionProxy.LeaveSession(createSessionState.SessionID, createSessionState.GameID.ToString(),
                                                                                Config.Environment.UserSettings[1].Membername,
                                                                                Config.Environment.UserSettings[1].Password);
            SessionState sessionAfterLeave = this.GameSessionProxy.ViewSession( createSessionState.SessionID, createSessionState.GameID.ToString(),
                                                                                Config.Environment.UserSettings[0].Membername,
                                                                                Config.Environment.UserSettings[0].Password);
            Assert.IsTrue(sessionAfterLeave.Seats.Length == 1, "Error: Number of player is expected to be 1 but got "+
                          sessionAfterLeave.Seats.Length.ToString());
            try
            {
                this.GameSessionProxy.LeaveSession(createSessionState.SessionID, createSessionState.GameID.ToString(),
                                                                                    Config.Environment.UserSettings[1].Membername,
                                                                                    Config.Environment.UserSettings[1].Password);
                Assert.Fail("Error: PLayer who already left session is leaving session again");
            }
            catch
            {
                //swallowing exception as a user is not expected to leave twice
            }
            SessionState sessionLeaveAgain = this.GameSessionProxy.ViewSession( createSessionState.SessionID, createSessionState.GameID.ToString(),
                                                                                Config.Environment.UserSettings[0].Membername,
                                                                                Config.Environment.UserSettings[0].Password);
            Assert.IsTrue(sessionLeaveAgain.Seats.Length == 1, "Error: Expected  Number of Players is expected to be 2 but got " +
                          sessionLeaveAgain.Seats.Length.ToString());
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\Sessions\SessionAzureStorageProxy.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using AsyncMultiplayer.SessionAzureStorage;
using AsyncMultiplayer.Common.AzureStorage;
using Multiplayer.Test;
using Multiplayer.Test.API;

namespace Multiplayer.Test.API
{
    class SessionAzureStorageProxy
    {
        public SessionAzureStorageProxy()
        {
        }

        public static void AzureStorageInitialize()
        {
            StorageAccountInfo accountInfo = StorageAccountInfo.GetDefaultTableStorageAccountFromConfiguration();

            SessionAzureStorage sessionAzureStorage = new SessionAzureStorage(accountInfo);
            sessionAzureStorage.InitializeStorage();
        }

        




    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\Sessions\SystemNudgeService.cs ===
﻿using System;
using System.Text;
using System.Net;
using System.Collections.Generic;
using System.Configuration;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using AsyncMultiplayer.NotificationService;
using CloudServices.Test.Common.Configuration;
using AsyncMultiplayer.SessionCommon;
using AsyncMultiplayer.SystemNudgeDispatcher;
using System.Threading;
using AsyncMultiplayer.EventBasedService.Common;
using System.ServiceProcess;
using Multiplayer.Test.Proxy;
using CloudServices.Test.Common.Proxy;
using Gds.Contracts;
using System.Web;
using System.Runtime.Serialization;
using System.Xml;
using System.IO;
using LIVEN.Common.Diagnostics;

namespace Multiplayer.Test.API
{
    /// <summary>
    /// SystemNudgeServiceTests
    /// A manual step you need to do to get the tests passing --- go to NPDB and change the value of lest_SystemNudgeService_StartingDay in settings table to 0.
    /// Most tests take about 10 minutes to run
    /// </summary>
    
    [TestClass]
    public class SystemNudgeServiceTests : TestAreaBase, IEventService
    {
        /// <summary>
        /// Indicates wther the service is stopping.
        /// </summary>
        private bool isServiceStopping;
        static string MachineName = ConfigurationManager.ConnectionStrings["lest_AsyncNotification_db"].ConnectionString.Split(';')[0].Substring(12);

        /// <summary>
        /// Check if the service is stopping.
        /// </summary>
        /// <returns>bool to indicate if the service is stopping</returns>
        public bool IsServiceStopping()
        {
            return this.isServiceStopping;
        }

        public SystemNudgeServiceTests()
        {
            this.isServiceStopping = false;
        }

        private NotificationTestCommon common = new NotificationTestCommon();
        private static string[] users = new string[] { ConfigurationManager.AppSettings["SNUser1"], ConfigurationManager.AppSettings["SNUser2"], ConfigurationManager.AppSettings["SNUser3"] };
        private static string usersPassword = ConfigurationManager.AppSettings["SNUserPassword"];
        
        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
            Log.LogToFile = false;
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            
             // this will only create a new guid. Does not have any dependency on MPTestHooks service.
        }

        [TestCleanup()]
        public void MyTestCleanup()
        {
            CleanUpNotifications();
            EndAllActiveSessions();
        }

        /// <summary>
        /// Gets the name of the program.
        /// </summary>
        public static string ProgramName
        {
            get
            {
                return "SystemNudgeTest";
            }
        }

        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("Verify the player gets 1 nudge, 1 warning and finally gets kicked off the session.")]
        [TestProperty("Type", "BVTs")]
        public void BVT_SystemNudgeKick()
        {
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            common.CheckNotificationCount(users[0], usersPassword);
            EndAllActiveSessions(users[0], usersPassword);

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, users[0], usersPassword);
            AssertCreateSessionState(creationData, createSessionState);
            
            Thread.Sleep(1001);
            RunServiceAndVerifyNudgeWarningAndKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, users[0], usersPassword);
        }

        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("Verify that the player will get a nudge and a warning but will not get kicked off the session.")]
        [TestProperty("Type", "BVTs")]
        public void BVT_SystemNudgeWarnOnly()
        {
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            common.CheckNotificationCount(users[0], usersPassword);
            EndAllActiveSessions(users[0], usersPassword);

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.WarnOnly;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, users[0], usersPassword);
            AssertCreateSessionState(creationData, createSessionState);

            Thread.Sleep(1001);
            RunServiceAndVerifyNudgeWarningAndNotKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, users[0], usersPassword);
        }

        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("Verify no notifications(no nudge or warning) and no kick off.")]
        [TestProperty("Type", "BVTs")]
        public void BVT_SystemNudgeNone()
        {
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            common.CheckNotificationCount(users[0], usersPassword);
            EndAllActiveSessions(users[0], usersPassword);

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.None;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, users[0], usersPassword);
            AssertCreateSessionState(creationData, createSessionState);

            Thread.Sleep(1001);
            RunServiceAndVerifyNoNudgeNoWarningNotKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, users[0], usersPassword);
        }

        //bug:5934 - System Nudge: -- not seeing any nudge for player 2 after Player 1 makes a move.
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify a nudge, a warning and kick off for all the players in a three-player session.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_SystemNudgeKick_3Players()
        {
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            CleanUpNotifications();
            EndAllActiveSessions();

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, users[0], usersPassword);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);
            SessionState beforeJoinSessionState = createSessionState;

            JoinSession(beforeJoinSessionState, createSessionState.SessionID, createSessionState.GameID, new string [] { users[1], users[2] });

            Thread.Sleep(1001);
            RunServiceAndVerifyNudgeWarningAndKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, users[0], usersPassword);
            
            //Put P2 on active seat
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };
            this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiableGameState, users[1], usersPassword);

            Thread.Sleep(1001);
            RunServiceAndVerifyNudgeWarningAndKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, users[1], usersPassword);
            
            //Put P3 on active seat
            modifiableGameState.ActiveSeatIndex = 2;
            this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiableGameState, users[2], usersPassword);
            Thread.Sleep(1001);
            RunServiceAndVerifyNudgeWarningAndKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, users[2], usersPassword);
        }

        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify a nudge, a warning and no kick off for all the players in a three-player session.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_SystemNudgeWarnOnly_3Players()
        {
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            CleanUpNotifications();
            EndAllActiveSessions();

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.WarnOnly;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, users[0], usersPassword);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);
            SessionState beforeJoinSessionState = createSessionState;

            JoinSession(beforeJoinSessionState, createSessionState.SessionID, createSessionState.GameID, new string[] { users[1], users[2] });

            Thread.Sleep(1001);
            RunServiceAndVerifyNudgeWarningAndNotKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, users[0], usersPassword);
            MakeAMove(1, 1, createSessionState.SessionID, createSessionState.GameID.ToString(), users[0], usersPassword);
            Thread.Sleep(1001);
            RunServiceAndVerifyNudgesAndWarning(createSessionState.GameID.ToString(), createSessionState.SessionID, users[1], usersPassword, 1);
            MakeAMove(2, 2, createSessionState.SessionID, createSessionState.GameID.ToString(), users[1], usersPassword);
            Thread.Sleep(1001);
            RunServiceAndVerifyNudgesAndWarning(createSessionState.GameID.ToString(), createSessionState.SessionID, users[2], usersPassword, 1);
        }

        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Verify default inactivity behaviour is no action no notifications")]
        [TestProperty("Type", "feature")]
        public void P_SystemNudge_DefaultIWB()
        {
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            common.CheckNotificationCount(users[0], usersPassword);
            EndAllActiveSessions(users[0], usersPassword);

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, new InactivityWarningBehavior(), true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, users[0], usersPassword);
            AssertCreateSessionState(creationData, createSessionState);

            Thread.Sleep(10000); //to leave out some time in case there is anything the service would try to process
            RunServiceAndVerifyNoNudgeNoWarningNotKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, users[0], usersPassword);
        }

        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Verify that the default max number of nudges is 0.")]
        [TestProperty("Type", "feature")]
        public void P_SystemNudgeKick_DefaultMaxNudges()
        {
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            common.CheckNotificationCount(users[0], usersPassword);
            EndAllActiveSessions(users[0], usersPassword);

            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, users[0], usersPassword);
            AssertCreateSessionState(creationData, createSessionState);
            Thread.Sleep(1001);
            RunSystemNudgeService();
            common.VerifyNotificationCreated(createSessionState.GameID.ToString(), createSessionState.SessionID, Notification.NotificationType.Warning, users[0], usersPassword);
            VerifyNotKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, users[0], usersPassword);
            RunSystemNudgeService();
            VerifyKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, users[0], usersPassword);
        }

        //This test takes a long time (more than an hour)
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Verify all 25 notifications will be created before the player is kicked off.")]
        [TestProperty("Type", "feature")]
        public void P_SystemNudge_MaxNumberOfNudgesAllowed()
        {
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            common.CheckNotificationCount(users[0], usersPassword);
            EndAllActiveSessions(users[0], usersPassword);

            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 25;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, users[0], usersPassword);
            AssertCreateSessionState(creationData, createSessionState);

            Thread.Sleep(1001);
            GetNotifications(createSessionState.GameID.ToString(), createSessionState.SessionID, Notification.NotificationType.Nudge.ToString(), users[0], usersPassword, null);
            string etag = this.NotificationsServiceProxy.EtagInResponse;

            for (int i = 0; i < 25; i++)
            {
                RunSystemNudgeService();
                Thread.Sleep(20000); // give notifcation internal enough time to process the notification requests
                GetNotifications(createSessionState.GameID.ToString(), createSessionState.SessionID, Notification.NotificationType.Nudge.ToString(), users[0], usersPassword, etag); //Getting a 304 here means the nudge is not a new one -- failed to create a nudge notification.
                etag = this.NotificationsServiceProxy.EtagInResponse;
            }
            RunSystemNudgeService();
            Thread.Sleep(20000); 
            List<Notification> nList = GetNotifications(createSessionState.GameID.ToString(), createSessionState.SessionID, Notification.NotificationType.Warning.ToString(), users[0], usersPassword, null); 
            Assert.AreEqual(1, nList.Count, "Error: Wrong number of nudge notifications");
            etag = this.NotificationsServiceProxy.EtagInResponse;
            VerifyNotKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, users[0], usersPassword);

            RunSystemNudgeService();
            Thread.Sleep(20000);
            //verify no additional warnings
            try
            {
                nList = GetNotifications(createSessionState.GameID.ToString(), createSessionState.SessionID, Notification.NotificationType.Warning.ToString(), users[0], usersPassword, etag);
                Assert.Fail("Expecting a 304 since there should not be any new notifications");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotModified, e.Response.Status);
            }
            VerifyKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, users[0], usersPassword);
        }

        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify 2 nudges, a warning and no kick off.")]
        [TestProperty("Type", "feature")]
        public void P_SystemNudgeWarnOnly_MaxNudges_2()
        {
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            common.CheckNotificationCount(users[0], usersPassword);
            EndAllActiveSessions(users[0], usersPassword);

            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.WarnOnly;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 2;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, users[0], usersPassword);
            AssertCreateSessionState(creationData, createSessionState);

            Thread.Sleep(1001);
            RunServiceAndVerifyNudgesAndWarning(createSessionState.GameID.ToString(), createSessionState.SessionID, users[0], usersPassword, 2);
            RunSystemNudgeService();
            VerifyNotKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, users[0], usersPassword);
        }

        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify that making a move after warning resets the number of nudges sent to the player.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_SystemNudgeKick_ResetNumberOfNudgesSent()
        {
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            common.CheckNotificationCount(users[0], usersPassword);
            EndAllActiveSessions(users[0], usersPassword);

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, users[0], usersPassword);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            Thread.Sleep(1001);
            RunServiceAndVerifyNudgesAndWarning(createSessionState.GameID.ToString(), createSessionState.SessionID, users[0], usersPassword,1);
            MakeAMove(1, 0, createSessionState.SessionID, createSessionState.GameID.ToString(), users[0], usersPassword);
            Thread.Sleep(20000); // would give notification internal time to process notifications
            common.CheckNotificationCount(users[0], usersPassword); //delete notifications up to this pt
            Thread.Sleep(1001);
            RunServiceAndVerifyNudgeWarningAndKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, users[0], usersPassword);
        }

        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify that making a move after a nudge resets the number of nudges sent to the player.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_SystemNudgeWarnOnly_ResetNumberOfNudgesSent()
        {
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            common.CheckNotificationCount(users[0], usersPassword);
            EndAllActiveSessions(users[0], usersPassword);

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.WarnOnly;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, users[0], usersPassword);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            Thread.Sleep(1001);
            RunSystemNudgeService();
            common.VerifyNotificationCreated(createSessionState.GameID.ToString(), createSessionState.SessionID, Notification.NotificationType.Nudge, users[0], usersPassword);
            common.CheckNotificationCount(users[0], usersPassword);//delete notifications up to this point.
            VerifyNotKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, users[0], usersPassword);

            MakeAMove(1, 0, createSessionState.SessionID, createSessionState.GameID.ToString(), users[0], usersPassword);

            Thread.Sleep(1001);
            RunServiceAndVerifyNudgeWarningAndNotKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, users[0], usersPassword);
        }

        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Verify that no action will be taken before the interval time specified.")]
        [TestProperty("Type", "feature")]
        public void N_SystemNudge_NoNudgesBeforeInterval()
        {
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            common.CheckNotificationCount(users[0], usersPassword);
            EndAllActiveSessions(users[0], usersPassword);

            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 720000;
            iwb.MaxNumberOfNudges = 1;
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, users[0], usersPassword);
            AssertCreateSessionState(creationData, createSessionState);
            Thread.Sleep(10000);
            RunServiceAndVerifyNoNudgeNoWarningNotKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, users[0], usersPassword);
        }


        //Fails due to bug: 3300 -- error happens when player leaves a session if he is the only player in the session
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Player creates a session, gets his first nudge and leave the session before any one joined the session. Verify no nudges after leave session.")]
        [TestProperty("Type", "feature")]
        public void N_SystemNudge_NoNudgesAfterLeaveSession_EmptySession()
        {
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            common.CheckNotificationCount(users[0], usersPassword);
            EndAllActiveSessions(users[0], usersPassword);

            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, users[0], usersPassword);
            AssertCreateSessionState(creationData, createSessionState);
            Thread.Sleep(1001);
            RunServiceAndVerifyNudges(createSessionState.GameID.ToString(), createSessionState.SessionID, users[0], usersPassword, 1);
            this.GameSessionProxy.LeaveSession(createSessionState.SessionID, createSessionState.GameID.ToString(), users[0], usersPassword);
            VerifyKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, users[0], usersPassword);
            RunServiceAndVerifyNoNudgeNoWarning(createSessionState.GameID.ToString(), createSessionState.SessionID, users[0], usersPassword);
        }

        // we do not expect the number of nudges sent be reset after leave session.
        //Bug:5886
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify that when a player leaves a session, the number of nudges sent will not be reset.")]
        [TestProperty("Type", "feature")]
        public void N_SystemNudge_ResetNudgesSentAfterLeaveSession_3Players()
        {
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            Log.WriteLine("SET the lest_SystemNudgeService_StartingDay=0 on t_settings table of LivenNPDB ", LogLevel.Info);
            CleanUpNotifications();
            EndAllActiveSessions();

            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, new byte[] { 1, 2, 3 },
                                                               iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, users[0], usersPassword);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);
            SessionState beforeJoinSessionState = createSessionState;

            JoinSession(beforeJoinSessionState, createSessionState.SessionID, createSessionState.GameID, users[1], usersPassword, 1);

            Thread.Sleep(1001);
            RunServiceAndVerifyNudges(createSessionState.GameID.ToString(), createSessionState.SessionID, users[0], usersPassword, 1);

            common.CheckNotificationCount(users[0], usersPassword); // delete all notifictions up to this point.
            this.GameSessionProxy.LeaveSession(createSessionState.SessionID, createSessionState.GameID.ToString(), users[0], usersPassword);
            
            //verify that player 1 is not in the session anymore 
            VerifyKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, users[0], usersPassword);
            
            //verify that player 2 is in the session, active seat is still 0. 
            SessionState sessionStateAfterLeave = this.GameSessionProxy.ViewSession(createSessionState.SessionID, createSessionState.GameID.ToString(), users[1], usersPassword);
            Assert.AreEqual(0, sessionStateAfterLeave.State.ActiveSeatIndex, "Error: Unexpected active seat index.");

            //run service and verify that there is not nudge or warning for player 2 since he is not on the active seat
            common.CheckNotificationCount(users[1], usersPassword); // delete all notifictions up to this point.

            Thread.Sleep(1001);

            RunSystemNudgeService();

            List<Notification> nList = GetNotifications(createSessionState.GameID.ToString(), createSessionState.SessionID,
                                                        Notification.NotificationType.Nudge.ToString(), users[1], usersPassword, null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(0, nList.Count, "Not expecting nudge notifications.");           

            //verify that no warning notifications were sent to player 1 after he left the session
            nList = GetNotifications(createSessionState.GameID.ToString(), createSessionState.SessionID, Notification.NotificationType.Warning.ToString(), users[0], usersPassword, null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(0, nList.Count, "Not expecting warning notifcations");

            //player 3 join session on the active seat
            JoinSession(beforeJoinSessionState, createSessionState.SessionID, createSessionState.GameID, users[2], usersPassword, 0);

            //verify that player 3 is on the active seat.
            SessionState sessionStateAfterJoin = this.GameSessionProxy.ViewSession(createSessionState.SessionID, createSessionState.GameID.ToString(), users[2], usersPassword);
            Assert.AreEqual(0, sessionStateAfterJoin.State.ActiveSeatIndex, "Error: Unexpected active seat index.");

            //run service and verify that player 3 gets a warning notification
            Thread.Sleep(1001);
            RunSystemNudgeService();
            common.VerifyNotificationCreated(createSessionState.GameID.ToString(), createSessionState.SessionID, Notification.NotificationType.Warning, users[2], usersPassword);
        }

        //for a complete test pass, please make sure that we do not have the follwing errors in the service log file.
        //    LIVEnException> LIVEnException 0X80071B5A occurred: Warned player not found in the session. SessionID: bb4ef18b-ba34-44c7-826e-ef74fef85178, GameID: 1297287394, Warned player SeatIndex: 1.
        //    Inner exception: 
        //    LIVEnException> LIVEnException 0X80071B58 occurred: Player to be kicked not found in the session. SessionID: cb25c7e5-0df9-49e1-9a6b-b11740d66067, GameID: 1297287394, kicked player SeatIndex: 1.
        //    Inner exception:
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Verify that system nudge will not try to nudge an empty active seat.")]
        [TestProperty("Type", "feature")]
        public void N_SystemNudge_NudgeEmptyActiveSeat()
        {
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            CleanUpNotifications();
            EndAllActiveSessions();

            common.CheckNotificationCount(users[1], usersPassword); // delete all pre-existing notifictions for the user.

            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 60;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, users[0], usersPassword);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);
            SessionState beforeJoinSessionState = createSessionState;

            JoinSession(beforeJoinSessionState, createSessionState.SessionID, createSessionState.GameID, users[1], usersPassword, 1);

            this.GameSessionProxy.LeaveSession(createSessionState.SessionID, createSessionState.GameID.ToString(), users[0], usersPassword);

            //verify that player 2 is in the session, active seat is still 0 and no nudges were sent for the session. 
            SessionState sessionStateAfterLeave = this.GameSessionProxy.ViewSession(createSessionState.SessionID, createSessionState.GameID.ToString(), users[1], usersPassword);
            Assert.AreEqual(0, sessionStateAfterLeave.State.ActiveSeatIndex, "Error: Unexpected active seat index.");
            Assert.AreEqual(createSessionState.SeatsAvailable, sessionStateAfterLeave.SeatsAvailable, "Error: Unexpected active seat index."); //since one user joined and another one left after creation.
            Assert.AreEqual(false, sessionStateAfterLeave.IsInactivityWarningSent);

            common.CheckNotificationCount(users[0], usersPassword); // delete all notifictions up to this point.

            Thread.Sleep(1001);
            RunSystemNudgeService();
            RunSystemNudgeService();
            RunSystemNudgeService();

            //nudge could happen before player left the session because of time elapse. Verify that there was no inactivity warning while active seat was empty.
            SessionState sessionStateAfterServiceRun = this.GameSessionProxy.ViewSession(createSessionState.SessionID, createSessionState.GameID.ToString(), users[1], usersPassword);
            Assert.AreEqual(0, sessionStateAfterServiceRun.State.ActiveSeatIndex, "Error: Unexpected active seat index.");
            Assert.AreEqual(false, sessionStateAfterServiceRun.IsInactivityWarningSent);
            
            List<Notification> nList = GetNotifications(createSessionState.GameID.ToString(), createSessionState.SessionID, string.Empty, users[0], usersPassword, null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(0, nList.Count, "Error: wrong number of notifications.");
        
            nList = GetNotifications(createSessionState.GameID.ToString(), createSessionState.SessionID, Notification.NotificationType.Nudge.ToString(), users[1], usersPassword, null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(0, nList.Count, "Error: wrong number of notifications.");
        }

        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify that no nudges will be sent after game is over.")]
        [TestProperty("Type", "feature")]
        public void N_SystemNudge_2PlayersInSession_NoNudgesAfterPostGameEnd()
        {
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            CleanUpNotifications();
            EndAllActiveSessions();

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 1; 
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, users[0], usersPassword);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);
            SessionState beforeJoinSessionState = createSessionState;

            JoinSession(beforeJoinSessionState, createSessionState.SessionID, createSessionState.GameID, new string[] { users[1]});

            MakeAMove(1, 1, createSessionState.SessionID, createSessionState.GameID.ToString(), users[0], usersPassword);

            Thread.Sleep(1001);
            RunServiceAndVerifyNudges(createSessionState.GameID.ToString(), createSessionState.SessionID, users[1], usersPassword, 1);
            
            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            this.GameStateProxy.PostGameEnd(createSessionState.SessionID, createSessionState.GameID.ToString(),gameResults, users[1], usersPassword);
  
            Thread.Sleep(1001);
            RunServiceAndVerifyNoNudgeNoWarning(createSessionState.GameID.ToString(), createSessionState.SessionID, users[0], usersPassword);
            RunSystemNudgeService();
            VerifyNotKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, users[0], usersPassword);
        }

        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Change action from warn only to kick using modify session and verify kick off.")]
        [TestProperty("Type", "feature")]
        public void P_SystemNudge_ModifyInactivityBehaviour()
        {
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            common.CheckNotificationCount(users[0], usersPassword);
            EndAllActiveSessions(users[0], usersPassword);

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.WarnOnly;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, users[0], usersPassword);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);
            SessionState beforeJoinSessionState = createSessionState;

            JoinSession(beforeJoinSessionState, createSessionState.SessionID, createSessionState.GameID, new string[] { users[1]});

            MakeAMove(1, 1, createSessionState.SessionID, createSessionState.GameID.ToString(), users[0], usersPassword);

            Thread.Sleep(1001);
            RunServiceAndVerifyNudgeWarningAndNotKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, users[1], usersPassword);
            RunSystemNudgeService();
            VerifyNotKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, users[1], usersPassword);
            
            //Make inactivity behaviour action = kick 
            ModificationData modificationData = InitializeModificationData(createSessionState);
            modificationData.InactivityWarning.Action = InactivityWarningAction.Kick;
            modificationData.InactivityWarning.Interval = 1;
            modificationData.InactivityWarning.MaxNumberOfNudges = 1;

            this.GameSessionProxy.ModifySession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(), modificationData, users[0], usersPassword);
            SessionState modifySessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(), users[0], usersPassword);
            AssertModifySessionState(modificationData, createSessionState, modifySessionState);

            Thread.Sleep(1001);
            RunSystemNudgeService();
            VerifyKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, users[1], usersPassword);
        }

        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify that modifying a session, veiwing a session, creating another session, making a move in another session... do not reset the number of nudges sent.")]
        [TestProperty("Type", "feature")]
        public void N_SystemNudge_ResetNumberOfNudgesActionsWithNoMove()
        {
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            common.CheckNotificationCount(users[0], usersPassword);
            EndAllActiveSessions(users[0], usersPassword);

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.WarnOnly;
            iwb.Interval = 1; //see if this is reasonalble
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, users[0], usersPassword);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);
            SessionState beforeJoinSessionState = createSessionState;

            JoinSession(createSessionState, createSessionState.SessionID, createSessionState.GameID, users[1], usersPassword, 1);

            Thread.Sleep(1001);
            RunServiceAndVerifyNudges(createSessionState.GameID.ToString(), createSessionState.SessionID, users[0], usersPassword, 1);

            //make some random calls
            ModificationData modificationData = InitializeModificationData(createSessionState);
            modificationData.InactivityWarning.Action = InactivityWarningAction.Kick;
            modificationData.InactivityWarning.Interval = 1;
            modificationData.InactivityWarning.MaxNumberOfNudges = 1;

            this.GameSessionProxy.ModifySession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(), modificationData, users[0], usersPassword);
            SessionState modifySessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(), users[0], usersPassword);

            //Assert SessionState
            AssertModifySessionState(modificationData, createSessionState, modifySessionState);


            this.GameStateProxy.GetGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), users[0], usersPassword);

             //Do PostGameAction 
            GameAction gameAction = new GameAction();
            gameAction.ActionType = GameActionType.UserNudge;
            gameAction.ActionData = new byte[] { 1 };
            gameAction.ActionTime = DateTime.Now;
            gameAction.SequenceNumber = modifySessionState.State.SequenceNumber;

            this.GameStateProxy.PostGameAction(modifySessionState.SessionID.ToString(), modifySessionState.GameID.ToString(), gameAction, users[0], usersPassword);

            //create another session(S2)
            CreationData newCreationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, new InactivityWarningBehavior(), true, "TestGame");
            SessionState anotherSessionState = this.GameSessionProxy.CreateSession(newCreationData.GameID.ToString(), newCreationData, users[0], usersPassword);
            AssertCreateSessionState(newCreationData, anotherSessionState);
            //another player joins S2
            JoinSession(anotherSessionState, anotherSessionState.SessionID, anotherSessionState.GameID, users[1], usersPassword, 1);
            //Make a move in S2
            MakeAMove(1,1, anotherSessionState.SessionID, anotherSessionState.GameID.ToString(), users[0], usersPassword);
            
            //TODO: Add a couple of other session API calls ?????????

            RunSystemNudgeService();
            common.VerifyNotificationCreated(createSessionState.GameID.ToString(), createSessionState.SessionID, Notification.NotificationType.Warning, users[0], usersPassword);
            VerifyNotKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, users[0], usersPassword);
        }

        //Bug:5884
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Verify that kicking off a player leaves the active seat empty and send a warning to the owner.")]
        [TestProperty("Type", "Features")]
        public void N_SystemNudgeKick_ChangeActiveSeat()
        {
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            CleanUpNotifications();
            EndAllActiveSessions();

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, users[0], usersPassword);
            AssertCreateSessionState(creationData, createSessionState);

            JoinSession(createSessionState, createSessionState.SessionID, createSessionState.GameID, users[1], usersPassword, 1);

            Thread.Sleep(1001);
            RunServiceAndVerifyNudgeWarningAndKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, users[0], usersPassword);

            Thread.Sleep(10* notificationSleepTime); // to make sure that we gave notification internal enough time to process the request for warning notification. 
            //verify active seat is not changed
            SessionState sessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID, createSessionState.GameID.ToString(), users[1], usersPassword);
            Assert.AreEqual(0, sessionState.State.ActiveSeatIndex, "Error: Unexpected active seat index.");

            //verify warning notification is sent to session owner -- since owner is kicked off, player on the next lowest seat idex will be session owner.
            List<Notification> nList = GetNotifications(createSessionState.GameID.ToString(), createSessionState.SessionID, Notification.NotificationType.Warning.ToString(), users[1], usersPassword, null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(1, nList.Count, "Expected a warning notification for session owner.");
        }

        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify the contents of nudge notifications.")]
        [TestProperty("Type", "Features")]
        public void P_SystemNudge_NudgeNotifcationContent()
        {
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            common.CheckNotificationCount(users[0], usersPassword);
            EndAllActiveSessions(users[0], usersPassword);
            DateTime now = DateTime.UtcNow;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, users[0], usersPassword);
            AssertCreateSessionState(creationData, createSessionState);

            Thread.Sleep(1001);
            RunSystemNudgeService();
            Thread.Sleep(20000);
            List<Notification> nList = GetNotifications(createSessionState.GameID.ToString(), createSessionState.SessionID, Notification.NotificationType.Nudge.ToString(), users[0], usersPassword, null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(1, nList.Count, "Error: Unexpected number of notifications.");
            ValidateNotificationContent(nList[0], Notification.NotificationType.Nudge.ToString(), "Xbox LIVE", "");
        }

        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify the contents of warning notifications.")]
        [TestProperty("Type", "Features")]
        public void P_SystemNudge_WarningNotifcationContent()
        {
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            common.CheckNotificationCount(users[0], usersPassword);
            EndAllActiveSessions(users[0], usersPassword);

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.WarnOnly;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 0;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, users[0], usersPassword);
            AssertCreateSessionState(creationData, createSessionState);

            Thread.Sleep(1001);
            RunSystemNudgeService();
            Thread.Sleep(20000);
            List<Notification> nList = GetNotifications(createSessionState.GameID.ToString(), createSessionState.SessionID, Notification.NotificationType.Warning.ToString(), users[0], usersPassword, null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(1, nList.Count, "Error: Unexpected number of notifications.");
            ValidateNotificationContent(nList[0], Notification.NotificationType.Warning.ToString(), "Xbox LIVE", "");
        }

        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify that nudge happenes for a session that is 13 days  old.")]
        [TestProperty("Type", "Features")]
        public void P_SystemNudge_Session13DaysOld()
        {
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            common.CheckNotificationCount(users[0], usersPassword);
            EndAllActiveSessions(users[0], usersPassword);

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.WarnOnly;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            SessionState createSessionState = TestAreaBase.InitSessionState(DateTime.UtcNow.AddDays(-6).ToString(), false, 0);
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            string token1 = "0000" + CloudServices.Test.Common.Authorization.Authorization.GetXuid(users[0], usersPassword);
            string publicToken1 = ConfigurationManager.AppSettings["SNUser1GamerTag"];
            createSessionState.Seats[0].Profile = new IdentityToken(IdentityServiceType.XUID, token1, publicToken1);
            createSessionState.InactivityWarning = iwb;

            NotificationTestCommon.testHooksClient.CreateSession(createSessionState);
            SessionState sessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID, createSessionState.GameID.ToString(), users[0], usersPassword);
            Assert.IsNotNull(sessionState);

            Thread.Sleep(1001);
            RunSystemNudgeService();
            Thread.Sleep(180000); // sleeep another 3 mins so that there is enough time to process nudges for all sessions  --- might take a long time to get a notification for an old session since there might be lots of sessions to process.
            common.VerifyNotificationCreated(createSessionState.GameID.ToString(), createSessionState.SessionID, Notification.NotificationType.Nudge, users[0], usersPassword);
        }

        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify that nudge does not happenes for a session that is 14 days old.")]
        [TestProperty("Type", "Features")]
        public void N_SystemNudge_Session14DaysOld()
        {
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            common.CheckNotificationCount(users[0], usersPassword);
            EndAllActiveSessions(users[0], usersPassword);

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            SessionState createSessionState = TestAreaBase.InitSessionState(DateTime.UtcNow.AddDays(-7).ToString(), false, 0);
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            string token1 = "0000" + ConfigurationManager.AppSettings["SNUser1Xuid"];
            string publicToken1 = ConfigurationManager.AppSettings["SNUser1GamerTag"];
            createSessionState.Seats[0].Profile = new IdentityToken(IdentityServiceType.XUID, token1, publicToken1);
            createSessionState.InactivityWarning = iwb;

            NotificationTestCommon.testHooksClient.CreateSession(createSessionState);
            SessionState sessionState = null;
            try
            {
                sessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID, createSessionState.GameID.ToString(), users[0], usersPassword);
                Assert.Fail("Error: Expected to get FORBIDDEN err but it didn't");
            }
            catch (RestException rx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.UserNotAllowedToGetStateInSession), rx.Response);
            }           

            Thread.Sleep(1001);
            RunServiceAndVerifyNoNudgeNoWarningNotKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, users[0], usersPassword);
        }

        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("Verify that the notifications for that session and user will be deleted once the player gets kicked off the session.")]
        [TestProperty("Type", "Features")]
        public void P_SystemNudgeKick_DeleteNotificationsAfterKick()
        {
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            common.CheckNotificationCount(users[0], usersPassword);
            EndAllActiveSessions(users[0], usersPassword);

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, users[0], usersPassword);
            AssertCreateSessionState(creationData, createSessionState);

            JoinSession(createSessionState, createSessionState.SessionID, createSessionState.GameID, users[1], usersPassword, 1);

            // send a user nudge notification
            GameAction gameAction = new GameAction();
            gameAction.ActionType = GameActionType.UserNudge;
            gameAction.ActionData = new byte[] { 0 };
            gameAction.ActionTime = DateTime.Now;
            gameAction.SequenceNumber = createSessionState.State.SequenceNumber;
            this.GameStateProxy.PostGameAction(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(), gameAction, users[1], usersPassword);

            Thread.Sleep(180000);
            List<Notification> nList = GetNotifications(createSessionState.GameID.ToString(), createSessionState.SessionID, Notification.NotificationType.Nudge.ToString(), users[0], usersPassword, null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(1, nList.Count, "Error: Did not find the notification created as a result of user nudge.");
            string etag = this.NotificationsServiceProxy.EtagInResponse;

            Thread.Sleep(1001);
            RunSystemNudgeService();
            Thread.Sleep(20000);
            nList = GetNotifications(createSessionState.GameID.ToString(), createSessionState.SessionID, Notification.NotificationType.Nudge.ToString(), users[0], usersPassword, etag);
            Assert.IsNotNull(nList);
            Assert.AreEqual(1, nList.Count, "Error: Did not find nudge notification after time interval has elapsed.");
            
            RunSystemNudgeService();
            Thread.Sleep(20000);
            nList = GetNotifications(createSessionState.GameID.ToString(), createSessionState.SessionID, Notification.NotificationType.Warning.ToString(), users[0], usersPassword, etag);
            Assert.IsNotNull(nList);
            Assert.AreEqual(1, nList.Count, "Error: Expected a warning notification.");
            VerifyKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, users[0], usersPassword);
            
            //Verify that all notifications for this session are deleted.
            nList = GetNotifications(createSessionState.GameID.ToString(), createSessionState.SessionID, string.Empty, users[0], usersPassword, null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(0, nList.Count, "Error: Notifications for the session are not deleted after kick.");
        }
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Verify that when a player leaves a session, no warning is sent.")]
        [TestProperty("Type", "feature")]
        public void N_SystemNudge_WarningHideInNotificationQueue()
        {
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");

            Log.WriteLine("SET the lest_SystemNudgeService_StartingDay=0 on t_settings table of LivenNPDB ", LogLevel.Info);
            CleanUpNotifications();
            EndAllActiveSessions();

            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };

            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, new byte[] { 1, 2, 3 },
                                                               iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, users[0], usersPassword);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);
            SessionState beforeJoinSessionState = createSessionState;

            JoinSession(beforeJoinSessionState, createSessionState.SessionID, createSessionState.GameID, users[1], usersPassword, 1);

            Thread.Sleep(1001);
            RunServiceAndVerifyNudges(createSessionState.GameID.ToString(), createSessionState.SessionID, users[0], usersPassword, 1);

            common.CheckNotificationCount(users[0], usersPassword); // delete all notifictions up to this point.
            this.GameSessionProxy.LeaveSession(createSessionState.SessionID, createSessionState.GameID.ToString(), users[0], usersPassword);

            //wait for warning in notification queue to go to Azure
            Thread.Sleep(180000);

            //verify that player 1 is not in the session anymore 
            VerifyKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, users[0], usersPassword);

            //verify that player 2 is in the session, active seat is still 0. 
            SessionState sessionStateAfterLeave = this.GameSessionProxy.ViewSession(createSessionState.SessionID, createSessionState.GameID.ToString(), users[1], usersPassword);
            Assert.AreEqual(0, sessionStateAfterLeave.State.ActiveSeatIndex, "Error: Unexpected active seat index.");

            //run service and verify that there is not nudge or warning for player 2 since he is not on the active seat
            common.CheckNotificationCount(users[1], usersPassword); // delete all notifictions up to this point.

            Thread.Sleep(1001);

            RunServiceAndVerifyNoNudgeNoWarning(createSessionState.GameID.ToString(), createSessionState.SessionID, users[1], usersPassword);
        }


        private void RunSystemNudgeService()
        {
            NotificationTestCommon.StopService(MachineName, "SystemNudgeService");
            NotificationTestCommon.StartService(MachineName, "SystemNudgeService");
            Thread.Sleep(180000);

            //SystemNudgeServiceTests sysNudgeServiceTests = new SystemNudgeServiceTests();
            //ManualResetEvent serviceStopping = new ManualResetEvent(false);
            //ManualResetEvent dispatcherStopped = new ManualResetEvent(false);
            //SystemNudgeDispatcher dispatcher = new SystemNudgeDispatcher();
            //EventServicePluginDescription pluginDescription = new EventServicePluginDescription(
            //                                                        "System Nudge Plugin",
            //                                                        typeof(SystemNudgeDispatcher).AssemblyQualifiedName,
            //                                                        string.Empty);

            //dispatcher.Initialize(sysNudgeServiceTests, serviceStopping, dispatcherStopped, pluginDescription);

            //// Create a new thread for the dispatcher.
            //Thread dispatcherThread = new Thread(dispatcher.DoWork);
            //dispatcherThread.Start();

            //int numberOfMinutesToRun = 3;

            //// Sleep, giving the dispatcher some time to run.
            //Thread.Sleep(numberOfMinutesToRun * 60 * 1000);

            //// Stop the dispatcher
            //sysNudgeServiceTests.isServiceStopping = true;
            //serviceStopping.Set();

            //// Wait for the dispatcher to stop.
            //bool receivedSignal = dispatcherStopped.WaitOne(60 * 1000);

            //if (receivedSignal)
            //{
            //    Log.WriteLine("Dispatcher signalled that it has stopped.");
            //}
            //else
            //{
            //    Log.WriteLine("Timed out while waiting for the Dispatcher to stop.");
            //}
        }

        private void RunServiceAndVerifyNudges(string gameId, string sessionId, string userName, string password, int numberOfNudges)
        {
            for (int i = 0; i < numberOfNudges; i++)
            {
                RunSystemNudgeService();
                common.VerifyNotificationCreated(gameId, sessionId, Notification.NotificationType.Nudge,userName, password);
                if (numberOfNudges > 1) //if we are expecting more than one nudge notifications, we have to delete the one we have already found.
                {
                    this.NotificationsServiceProxy.DeleteNotificationBySession(gameId, sessionId, userName, password);
                    //verify delete
                    List<Notification> nList = GetNotifications(gameId, sessionId, Notification.NotificationType.Nudge.ToString(), userName, password, null);
                    Assert.IsNotNull(nList);
                    Assert.AreEqual(0, nList.Count, "Error, there are some nudge notifications that are not deleted.");
                }
            }
        }

        private void RunServiceAndVerifyNoNudgeNoWarning(string gameId, string sessionId, string userName, string password)
        {
            RunSystemNudgeService();
            List<Notification> nList = GetNotifications(gameId, sessionId, Notification.NotificationType.Nudge.ToString(), userName, password, null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(0, nList.Count, "Not expecting nudge notifications.");
            nList = GetNotifications(gameId, sessionId, Notification.NotificationType.Warning.ToString(), userName, password, null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(0, nList.Count, "Not expecting warning notifications.");
        }

        private void RunServiceAndVerifyNudgesAndWarning(string gameId, string sessionId, string userName, string password, int numberOfNudges)
        {
            RunServiceAndVerifyNudges(gameId, sessionId, userName, password, numberOfNudges);
            RunSystemNudgeService();
            common.VerifyNotificationCreated(gameId, sessionId, Notification.NotificationType.Warning, userName, password);
            VerifyNotKickedOff(gameId, sessionId, userName, password);
        }

        private void RunServiceAndVerifyNudgeWarningAndNotKickedOff(string gameId, string sessionId, string userName, string password)
        {
            RunServiceAndVerifyNudgesAndWarning(gameId, sessionId, userName, password, 1);
            RunSystemNudgeService();
            VerifyNotKickedOff(gameId, sessionId, userName, password);
        }  

        private void RunServiceAndVerifyNudgeWarningAndKickedOff(string gameId, string sessionId, string userName, string password)
        {
            RunServiceAndVerifyNudgesAndWarning(gameId, sessionId, userName, password, 1);
            RunSystemNudgeService();
            VerifyKickedOff(gameId, sessionId, userName, password);
        }

        private void RunServiceAndVerifyNoNudgeNoWarningNotKickedOff(string gameId, string sessionId, string userName, string password)
        {
            RunServiceAndVerifyNoNudgeNoWarning(gameId, sessionId, userName, password);
            RunSystemNudgeService();
            VerifyNotKickedOff(gameId, sessionId, userName, password);
        }

        private void VerifyKickedOff(string gameId, string sessionId, string userName, string password)
        {
            try
            {
                SessionState viewSessionState = this.GameSessionProxy.ViewSession(sessionId, gameId, userName, password);
                Assert.Fail("Expecting Forbidden since the user should not be in the session by now.");
            }
            catch (RestException ex)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.UserNotAllowedToGetStateInSession), ex.Response);
            }
        }

        private void VerifyNotKickedOff(string gameId, string sessionId, string userName, string password)
        {
            SessionState viewSessionState = this.GameSessionProxy.ViewSession(sessionId, gameId, userName, password);
            Assert.IsNotNull(viewSessionState);
        }
 
        private List<Notification> GetNotifications(string gameId, string sessionId, string type, string userName, string password, string etag)
        {
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                gameId,
                sessionId,
                0,
                string.Empty,
                Int32.MaxValue,
                type,
                false,
                userName,
                password,
                etag);
            Assert.IsNotNull(notifications);
            return notifications;
        }

        private void JoinSession(SessionState beforeJoinSessionState, string sessionId, uint gameId, string [] users)
        {
            int i = 0;
            foreach (string user in users)
            {
                beforeJoinSessionState = JoinSession(beforeJoinSessionState, sessionId, gameId, user, usersPassword, ++i);
            }
        }

        private SessionState JoinSession(SessionState beforeJoinSessionState, string sessionId, uint gameId, string user, string password, int seatIndex)
        {
            // Initialize JoinData
            JoinData joinData = InitializeJoinData(gameId, sessionId, seatIndex);
            SessionState afterJoinSessionState = this.GameSessionProxy.JoinSession(sessionId, joinData, user, password);

            //Assert SessionState
            AssertJoinSessionState(beforeJoinSessionState, afterJoinSessionState);
            return afterJoinSessionState;
        }

        private void MakeAMove(int expectedSequenceNumber, int nextActiveSeat, string sessionId, string gameId, string userName, string password)
        {
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = nextActiveSeat;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.PutGameState(sessionId, gameId, modifiableGameState, userName, password);
            SessionState putGameStateSessionState = this.GameSessionProxy.ViewSession(sessionId, gameId, userName, password);
            FullGameState gameState = this.GameStateProxy.GetGameState(sessionId, gameId, userName, password);

            Assert.AreEqual(expectedSequenceNumber, putGameStateSessionState.State.SequenceNumber, "Error: Wrong sequence number.");
            Assert.AreEqual(nextActiveSeat, putGameStateSessionState.State.ActiveSeatIndex, "Error: Active seat was not set as expected.");
            Assert.AreEqual(0, putGameStateSessionState.NumberOfNudgesSent, "Error: Number of nudges sent is not reset by the move.");
            Assert.AreEqual(false, putGameStateSessionState.IsInactivityWarningSent, "Error: IsInactivityWarningSent is not reset by the move.");
            AssertGameState(modifiableGameState, gameState);
        }

        private void CleanUpNotifications()
        {
            foreach (string user in users)
            {
                List<Notification> nList = GetNotifications(Constants.TESTGAMEID.ToString(), string.Empty, string.Empty, user, usersPassword, null);
                Assert.IsNotNull(nList);
                if (nList.Count > 0)
                {
                    foreach (Notification n in nList)
                    {
                        this.NotificationsServiceProxy.DeleteNotificationQuery(n.Id, user, usersPassword);
                    }
                }
            }
        }

        private void EndAllActiveSessions()
        {
            foreach (string user in users)
            {
                EndAllActiveSessions(user, usersPassword);
            }
        }

        private void EndAllActiveSessions(string username, string password)
        {
            SessionEntry[] sessionEntries = null;
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(Constants.TESTGAMEID.ToString(), string.Empty, String.Empty, String.Empty, "1000", ShowSessionType.Active.ToString(), username, password);
            Assert.IsNotNull(sessionEntries);
            if (sessionEntries.Length > 0)
            {
                GameResults gameResults = new GameResults();
                gameResults.WinningSeatIndexes = new int[] { 0 };
                //gameResults.LosingSeatIndexes = new int[] { 1 };
                gameResults.Results = new Dictionary<int, GameResult>();

                foreach (SessionEntry sessionEntry in sessionEntries)
                {
                    try
                    {
                        this.GameStateProxy.PostGameEnd(sessionEntry.SessionID, Constants.TESTGAMEID.ToString(), gameResults, username, password);
                        Log.WriteLine("Ended active session = " + sessionEntry.SessionID);
                    }
                    catch (Exception e)
                    {
                        //This might fail if it is not the user's turn.
                        Log.WriteLine("Failed to end active session = " + sessionEntry.SessionID + ". exception: " + e.Message);
                    }
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\State\PostGameEnd.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using CloudServices.Test.Common.Configuration;
using Multiplayer.Test.API;
using AsyncMultiplayer.SessionCommon;
using AsyncMultiplayer.NotificationService;
using Gds.Contracts;
using System.Net;
using System.Diagnostics;
using System.Threading;
using CloudServices.Test.Common.Proxy;
using LIVEN.Common.Diagnostics;

namespace MultiPlayer.Test.API
{
    /// <summary>
    /// Test Cases for GameState.svc PostGameEnd API
    /// </summary>
    [TestClass]
    public class PostGameEnd : TestAreaBase
    {
        private static NotificationTestCommon common = new NotificationTestCommon();
        
        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            
            LockTest();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            UnlockTest();
        }
        /// <summary>
        /// BVT test for PostGameEnd
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("BVT for GameState.svc PostGameEnd API.")]
        [TestProperty("Type", "BVTs")]
        public void BVT_PostGameEnd()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 10,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;
            this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, joinSessionState.GameID.ToString(), gameResults);

            //get Session state & Verify
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState sessionStateAfterGameEnd = this.GameSessionProxy.ViewSession(joinSessionState.SessionID, joinSessionState.GameID.ToString());

            Assert.IsTrue(sessionStateAfterGameEnd.State.IsComplete, "Error: The session does not have the isComplete flag set, SessionID: " + sessionStateAfterGameEnd.SessionID);

            //Verify Notification for Player1
            string memberName = Config.Environment.UserSettings[0].Membername;      // player1
            string password = Config.Environment.UserSettings[0].Password;
            VerifyNotification(joinSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.YouWin, true, memberName, password);

            //Verify Notification for Player2
            memberName = Config.Environment.UserSettings[1].Membername;      // player2
            password = Config.Environment.UserSettings[1].Password;
            VerifyNotification(joinSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.YouLose, true, memberName, password);

        }

        /// <summary>
        /// Test to PostGameEnd of GameState.svc to post GameResult and verify YouWin Notification
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Call PostGameEnd on GameState.svc to End a Game  & verify YouWin Notification")]
        [TestProperty("Type", "FeatureTests")]
        public void P_PostGameEnd_OnlyWinSeats()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, sessionState);

            JoinData joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            this.GameSessionProxy.JoinSession(sessionState.SessionID, joinData);

            //Get oldScore for Player1 on leaderboard
            string memberName = Config.Environment.UserSettings[0].Membername;      // player1
            string password = Config.Environment.UserSettings[0].Password;

            long oldScore = long.Parse(GetLeaderboardValue("BestScore", memberName, password));
            Assert.IsNotNull(oldScore, "Player1's BeatScore on Leaderboard is null");

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(sessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = oldScore + 1,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)sessionState.Variant
            };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;
            this.GameStateProxy.PostGameEnd(sessionState.SessionID, sessionState.GameID.ToString(), gameResults);

            //get Session state & Verify
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState sessionStateAfterGameEnd = this.GameSessionProxy.ViewSession(sessionState.SessionID, sessionState.GameID.ToString());

            Assert.IsTrue(sessionStateAfterGameEnd.State.IsComplete, "Error: The session does not have the isComplete flag set, SessionID: " + sessionStateAfterGameEnd.SessionID);

            //Verify Notification for Player1
            memberName = Config.Environment.UserSettings[0].Membername;      // player1
            password = Config.Environment.UserSettings[0].Password;
            VerifyNotification(sessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.YouWin, true, memberName, password);

            long newScore = long.Parse(GetLeaderboardValue("BestScore", memberName, password));
            Assert.AreEqual(oldScore + 1, newScore, "BestScore Posted to RewardsService is wrong");
        }

        /// <summary>
        /// Test to PostGameEnd of GameState.svc to post GameResult and verify YouLose Notification
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Call PostGameEnd on GameState service to End a Game & verify YouLose Notification")]
        [TestProperty("Type", "FeatureTests")]
        public void P_PostGameEnd_OnlyLoseSeats()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, sessionState);

            JoinData joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            this.GameSessionProxy.JoinSession(sessionState.SessionID, joinData);

            //Get oldScore for Player1 on leaderboard
            string memberName = Config.Environment.UserSettings[0].Membername;      // player1
            string password = Config.Environment.UserSettings[0].Password;

            long oldScore = long.Parse(GetLeaderboardValue("BestScore", memberName, password));
            Assert.IsNotNull(oldScore, "Player1's BeatScore on Leaderboard is null");

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.LosingSeatIndexes = new int[] { 0 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(sessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = oldScore,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)sessionState.Variant
            };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;
            this.GameStateProxy.PostGameEnd(sessionState.SessionID, sessionState.GameID.ToString(), gameResults);

            //get Session state & Verify
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState sessionStateAfterGameEnd = this.GameSessionProxy.ViewSession(sessionState.SessionID, sessionState.GameID.ToString());

            Assert.IsTrue(sessionStateAfterGameEnd.State.IsComplete, "Error: The session does not have the isComplete flag set, SessionID: " + sessionStateAfterGameEnd.SessionID);

            //Verify Notification for Player1
            memberName = Config.Environment.UserSettings[0].Membername;      // player1
            password = Config.Environment.UserSettings[0].Password;
            VerifyNotification(sessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.YouLose, true, memberName, password);

            long newScore = long.Parse(GetLeaderboardValue("BestScore", memberName, password));
            Assert.AreEqual(oldScore , newScore, "BestScore Posted to RewardsService is wrong");
        }

        /// <summary>
        /// Test to PostGameEnd of GameState.svc to post GameResult and verify GameTie Notification
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Call PostGameEnd on GameState service to End a Game & verify GameTie Notification")]
        [TestProperty("Type", "FeatureTests")]
        public void P_PostGameEnd_OnlyTieSeats()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, sessionState);

            JoinData joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            this.GameSessionProxy.JoinSession(sessionState.SessionID, joinData);

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.TierSeatIndexes = new int[] { 0 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(sessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Tie.ToString(),
                Score = 15,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)sessionState.Variant
            };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;
            this.GameStateProxy.PostGameEnd(sessionState.SessionID, sessionState.GameID.ToString(), gameResults);

            //get Session state & Verify
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState sessionStateAfterGameEnd = this.GameSessionProxy.ViewSession(sessionState.SessionID, sessionState.GameID.ToString());

            Assert.IsTrue(sessionStateAfterGameEnd.State.IsComplete, "Error: The session does not have the isComplete flag set, SessionID: " + sessionStateAfterGameEnd.SessionID);

            //Verify Notification for Player1
            string memberName = Config.Environment.UserSettings[0].Membername;      // player1
            string password = Config.Environment.UserSettings[0].Password;
            VerifyNotification(sessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.GameTie, true, memberName, password);

            long newScore = long.Parse(GetLeaderboardValue("BestScore", memberName, password));
            Assert.AreEqual(15, newScore, "BestScore Posted to RewardsService is wrong");
        }

        /// <summary>
        /// Test to PostGameEnd of GameState.svc to post GameResult and verify GameOver Notification
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Call PostGameEnd on GameState service to End a Game & verify GameOver Notification")]
        [TestProperty("Type", "FeatureTests")]
        public void P_PostGameEnd_OnlyGameOverSeats()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, sessionState);

            JoinData joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            this.GameSessionProxy.JoinSession(sessionState.SessionID, joinData);

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.GameOverSeatIndexes = new int[] { 0 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(sessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.None.ToString(),
                Score = 15,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)sessionState.Variant
            };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;
            this.GameStateProxy.PostGameEnd(sessionState.SessionID, sessionState.GameID.ToString(), gameResults);

            //get Session state & Verify
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState sessionStateAfterGameEnd = this.GameSessionProxy.ViewSession(sessionState.SessionID, sessionState.GameID.ToString());

            Assert.IsTrue(sessionStateAfterGameEnd.State.IsComplete, "Error: The session does not have the isComplete flag set, SessionID: " + sessionStateAfterGameEnd.SessionID);

            //Verify Notification for Player1
            string memberName = Config.Environment.UserSettings[0].Membername;      // player1
            string password = Config.Environment.UserSettings[0].Password;
            VerifyNotification(sessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.GameOver, true, memberName, password);

            long newScore = long.Parse(GetLeaderboardValue("BestScore", memberName, password));
            Assert.AreEqual(15, newScore, "BestScore Posted to RewardsService is wrong");
        }

        /// <summary>
        /// Test to PostGameEnd of GameState.svc to post GameResult by Player who is NOT in Session
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call PostGameEnd on GameState service by Player who is NOT in Session")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PostGameEnd_PlayerNotInSession()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, sessionState);

            JoinData joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            this.GameSessionProxy.JoinSession(sessionState.SessionID, joinData);

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(sessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 15,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)sessionState.Variant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(sessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)sessionState.Variant
            };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[2].Membername;      // player3
            this.GameStateProxy.Password = Config.Environment.UserSettings[2].Password;

            try
            {
                this.GameStateProxy.PostGameEnd(sessionState.SessionID, sessionState.GameID.ToString(), gameResults);
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.UserNotAllowedToSubmitResultsForSession), restEx.Response);
            }
        }

        /// <summary>
        /// Test to PostGameEnd of GameState.svc to post GameResult with SessionID as NoDashesGuid
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call PostGameEnd on GameState service with SessionID as NoDashesGuid")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PostGameEnd_NoDashesGuidSessionID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 15,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            string sessionIDNoDashes = joinSessionState.SessionID.Replace("-", "");

            try
            {
                this.GameStateProxy.PostGameEnd(sessionIDNoDashes, joinSessionState.GameID.ToString(), gameResults);
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// Test to PostGameEnd of GameState.svc to post GameResult with SessionID which doesn't exist
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call PostGameEnd on GameState service with SessionID which doesn't exist")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PostGameEnd_NotExistSessionID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 15,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                this.GameStateProxy.PostGameEnd("j6b048d0-15gd-4i9d-8f65-91bz93s762f5", joinSessionState.GameID.ToString(), gameResults);
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// Test to PostGameEnd of GameState.svc to post GameResult with String.Empty as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call PostGameEnd on GameState service with String.Empty as SessionID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PostGameEnd_EmptyStringSessionID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 15,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                this.GameStateProxy.PostGameEnd(String.Empty, joinSessionState.GameID.ToString(), gameResults);
                Assert.Fail("Error: Expected to get  NOT FOUND exception but it didnt");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, restEx.Response);
            }
        }

        /// <summary>
        /// Test to PostGameEnd of GameState.svc to post GameResult with null as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call PostGameEnd on GameState service with null as SessionID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PostGameEnd_NullStringSessionID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 15,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                this.GameStateProxy.PostGameEnd(null, joinSessionState.GameID.ToString(), gameResults);
                Assert.Fail("Error: Expected to get NOT FOUND exception but it didnt");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, restEx.Response);
            }
        }

        /// <summary>
        /// Test to PostGameEnd of GameState.svc to post GameResult with Long String as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call PostGameEnd on GameState service with Long String as SessionID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PostGameEnd_LongStringSessionID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 15,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                this.GameStateProxy.PostGameEnd("j6b048d0-15gd-4i9d-8f65-91bz93s762f5-j6b048d0-15gd-4i9d-8f65-91bz93s762f5-j6b048d0-15gd-4i9d-8f65-91bz93s762f5-j6b048d0-15gd-4i9d-8f65-91bz93s762f5", joinSessionState.GameID.ToString(), gameResults);
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// Test to PostGameEnd of GameState.svc to post GameResult with One Char String as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call PostGameEnd on GameState service with One Char String as SessionID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PostGameEnd_OneCharStringSessionID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 15,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                this.GameStateProxy.PostGameEnd("1", joinSessionState.GameID.ToString(), gameResults);
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// Test to PostGameEnd of GameState.svc to post GameResult with uint.MinValue as GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call PostGameEnd on GameState service with uint.MinValue as GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PostGameEnd_MinGameID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 15,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, uint.MinValue.ToString(), gameResults);
            }
            catch (RestException restEx)
            {
                //TODO: We are getting GameIDOrVariantIsNotInGMS error b/c the GameID = uint.MinValue doesn't exist in GMS
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDDoesNotMatchPartnerTokenTitleID), restEx.Response);
            }
        }

        /// <summary>
        /// Test to PostGameEnd of GameState.svc to post GameResult with uint.MaxValue as GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call PostGameEnd on GameState service with uint.MaxValue as GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PostGameEnd_MaxGameID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 15,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, uint.MaxValue.ToString(), gameResults);
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDDoesNotMatchPartnerTokenTitleID), restEx.Response);
            }
        }

        /// <summary>
        /// Test to PostGameEnd of GameState.svc to post GameResult with Zero as GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call PostGameEnd on GameState service with Zero as GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PostGameEnd_ZeroGameID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 15,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, "0", gameResults);
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDDoesNotMatchPartnerTokenTitleID), restEx.Response);
            }
        }

        /// <summary>
        /// Test to PostGameEnd of GameState.svc to post GameResult with GameID which doesn't exist
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call PostGameEnd on GameState service with GameID which doesn't exist")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PostGameEnd_NotExistGameID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 15,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, "1", gameResults);
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDDoesNotMatchPartnerTokenTitleID), restEx.Response);
            }
        }

        /// <summary>
        /// Test to PostGameEnd of GameState.svc to post GameResult with String.Empty as GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call PostGameEnd on GameState service with String.Empty as GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PostGameEnd_EmptyStringGameID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 15,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, String.Empty, gameResults);
            }
            catch (RestException restEx)
            {                
                VerifyException(HttpStatusCode.NotFound, restEx.Response);
            }
        }

        /// <summary>
        /// Test to PostGameEnd of GameState.svc to post GameResult with null as GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call PostGameEnd on GameState service with null as GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PostGameEnd_NullGameID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 15,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, null, gameResults);
            }
            catch (RestException restEx)
            {             
                VerifyException(HttpStatusCode.NotFound, restEx.Response);
            }
        }

        /// <summary>
        /// Test to PostGameEnd of GameState.svc to post GameResult with Long String as GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call PostGameEnd on GameState service with Long String as GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PostGameEnd_LongStringGameID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 15,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, "1234567891234567890", gameResults);
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidGameIDFormatWhileGettingIdentity), restEx.Response);
            }
        }

        /// <summary>
        /// Test to PostGameEnd of GameState.svc to post GameResult with One Char String as GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call PostGameEnd on GameState service with One Char String as GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PostGameEnd_OneCharStringGameID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 15,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, "A", gameResults);
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidGameIDFormatWhileGettingIdentity), restEx.Response);
            }
        }

        /// <summary>
        /// Feature Test for GameState svc PostGameEnd API with GameResults.WinningSeatIndexes as null
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("Feature Test for GameState svc PostGameEnd API with GameResults.WinningSeatIndexes as null")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PostGameEnd_GameResults_NullWinSeats()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //Get Leaderboard score for Player2 Losing Seat
            string memberName = Config.Environment.UserSettings[1].Membername;      // player2
            string password = Config.Environment.UserSettings[1].Password;

            long oldScore = long.Parse(GetLeaderboardValue("BestScore", memberName, password));
            Assert.IsNotNull(oldScore, "No Score exist for this player on Leaderboard");

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = null;
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            /*
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 15,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };
             */
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = oldScore + 1,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;
            this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, joinSessionState.GameID.ToString(), gameResults);

            //get Session state & Verify
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState sessionStateAfterGameEnd = this.GameSessionProxy.ViewSession(joinSessionState.SessionID, joinSessionState.GameID.ToString());

            Assert.IsTrue(sessionStateAfterGameEnd.State.IsComplete, "Error: The session does not have the isComplete flag set, SessionID: " + sessionStateAfterGameEnd.SessionID);
            /*
            //Verify Notification for Player1
            string memberName = Config.Environment.UserSettings[0].Membername;      // player1
            string password = Config.Environment.UserSettings[0].Password;
            VerifyNotification(joinSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.YouWin, true, memberName, password);
            */
            //Verify Notification for Player2
            memberName = Config.Environment.UserSettings[1].Membername;      // player2
            password = Config.Environment.UserSettings[1].Password;
            VerifyNotification(joinSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.YouLose, true, memberName, password);

            long newScore = long.Parse(GetLeaderboardValue("BestScore", memberName, password));
            Assert.AreEqual(oldScore + 1, newScore, "BestScore Posted to RewardsService is wrong");
        }

        /// <summary>
        /// Feature Test for GameState svc PostGameEnd API with GameResults.LosingSeatIndexes as null
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("Feature Test for GameState svc PostGameEnd API with GameResults.LosingSeatIndexes as null")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PostGameEnd_GameResults_NullLoseSeats()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //Get Leaderboard score for Player1 Win Seat
            string memberName = Config.Environment.UserSettings[0].Membername;      // player1
            string password = Config.Environment.UserSettings[0].Password;

            long oldScore = long.Parse(GetLeaderboardValue("BestScore", memberName, password));
            Assert.IsNotNull(oldScore, "No Score exist for this player on Leaderboard");

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = null;
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = oldScore + 1,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };
            /*
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = oldScore + 1,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };
            */
            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;
            this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, joinSessionState.GameID.ToString(), gameResults);

            //get Session state & Verify
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState sessionStateAfterGameEnd = this.GameSessionProxy.ViewSession(joinSessionState.SessionID, joinSessionState.GameID.ToString());

            Assert.IsTrue(sessionStateAfterGameEnd.State.IsComplete, "Error: The session does not have the isComplete flag set, SessionID: " + sessionStateAfterGameEnd.SessionID);

            //Verify Notification for Player1
            memberName = Config.Environment.UserSettings[0].Membername;      // player1
            password = Config.Environment.UserSettings[0].Password;
            VerifyNotification(joinSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.YouWin, true, memberName, password);
            /*
            //Verify Notification for Player2
            memberName = Config.Environment.UserSettings[1].Membername;      // player2
            password = Config.Environment.UserSettings[1].Password;
            VerifyNotification(joinSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.YouLose, true, memberName, password);
            */
            long newScore = long.Parse(GetLeaderboardValue("BestScore", memberName, password));
            Assert.AreEqual(oldScore + 1, newScore, "BestScore Posted to RewardsService is wrong");
        }

        /// <summary>
        /// Feature Test for GameState svc PostGameEnd API with GameResults.LosingSeatIndexes as null
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("Feature Test for GameState svc PostGameEnd API with GameResults.LosingSeatIndexes as null")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PostGameEnd_GameResults_NullTieSeats()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //Get Leaderboard score for Player1 Win Seat
            string memberName = Config.Environment.UserSettings[0].Membername;      // player1
            string password = Config.Environment.UserSettings[0].Password;

            long oldScore = long.Parse(GetLeaderboardValue("BestScore", memberName, password));
            Assert.IsNotNull(oldScore, "No Score exist for this player on Leaderboard");

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.TierSeatIndexes = null;
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = oldScore + 1,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;
            this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, joinSessionState.GameID.ToString(), gameResults);

            //get Session state & Verify
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState sessionStateAfterGameEnd = this.GameSessionProxy.ViewSession(joinSessionState.SessionID, joinSessionState.GameID.ToString());

            Assert.IsTrue(sessionStateAfterGameEnd.State.IsComplete, "Error: The session does not have the isComplete flag set, SessionID: " + sessionStateAfterGameEnd.SessionID);

            //Verify Notification for Player1
            memberName = Config.Environment.UserSettings[0].Membername;      // player1
            password = Config.Environment.UserSettings[0].Password;
            VerifyNotification(joinSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.YouWin, true, memberName, password);

            //Verify Notification for Player2
            memberName = Config.Environment.UserSettings[1].Membername;      // player2
            password = Config.Environment.UserSettings[1].Password;
            VerifyNotification(joinSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.YouLose, true, memberName, password);

            //Get BestScore on Leaderboard for Player1
            memberName = Config.Environment.UserSettings[0].Membername;      // player2
            password = Config.Environment.UserSettings[0].Password;
            long newScore = long.Parse(GetLeaderboardValue("BestScore", memberName, password));
            Assert.AreEqual(oldScore + 1, newScore, "BestScore Posted to RewardsService is wrong");
        }



        public string GetLeaderboardValue(string statEntry, string userName, string password)
        {
            LeaderboardResult result = this.NotificationsServiceProxy.GetLeaderboard(Constants.TESTGAMEID.ToString(), Constants.TESTGAMEVARIANT.ToString(), "BestScore", "1", "W1", "100", "2", userName, password);
            Assert.IsNotNull(result, "No result was returned");

            if (result.Leaderboard == null)
            {
                return "0";
            }
            else
            {
                Assert.IsNotNull(result.Leaderboard, "No statistics were returned");
                Assert.AreNotEqual(0, result.Leaderboard.Count, "Leaderboard is empty");

                IList<Entry> entryList = result.Leaderboard[0].Statistics;
                IEnumerable<Entry> entries = (from e in entryList
                                              where e.Name == statEntry
                                              select e);
                int numEntries = entries.Count<Entry>();
                Assert.AreEqual(1, numEntries, "Error: Unexpected number of entries in response.");
                return entries.First<Entry>().Value;
            }
        }

        //regression test for 1739
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify that making move after post game end is not allowed.")]
        [TestProperty("Type", "Features")]
        public void N_PostGameEnd_MoveAfterGameEnded()
        {
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, new InactivityWarningBehavior(), true, "TestGame");
            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            AssertCreateSessionState(creationData, sessionState);

            JoinData joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 1);
            this.GameSessionProxy.JoinSession(sessionState.SessionID, joinData, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            this.GameStateProxy.PostGameEnd(sessionState.SessionID, sessionState.GameID.ToString(), TestAreaBase.GetDefaultTwoPlayerGameResult(sessionState.GameID.ToString(), (uint)sessionState.Variant), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);

            //get session state & verify game end
            SessionState sessionStateAfterGameEnd = this.GameSessionProxy.ViewSession(sessionState.SessionID, sessionState.GameID.ToString(), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            Assert.IsTrue(sessionStateAfterGameEnd.State.IsComplete, "Error: The session does not have the isComplete flag set, SessionID: " + sessionStateAfterGameEnd.SessionID);

            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            try
            {
                this.GameStateProxy.PutGameState(sessionState.SessionID, sessionState.GameID.ToString(), modifiableGameState, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
                Assert.Fail("Expected forbidden as we should not allow to make a move after game ended.");
            }
            catch (RestException ex)
            {
                VerifyException(403, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.OperationNotAllowedForCompleteSession), ex.Response);
            }

            try
            {
                this.GameStateProxy.PutGameState(sessionState.SessionID, sessionState.GameID.ToString(), modifiableGameState, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
                Assert.Fail("Expected forbidden as we should not allow to make a move after game ended.");
            }
            catch (RestException ex)
            {
                VerifyException(403, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.OperationNotAllowedForCompleteSession), ex.Response);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify that trying to modify session after post game end is not allowed.")]
        [TestProperty("Type", "Features")]
        public void N_PostGameEnd_ModifySessionAfterGameEnded()
        {
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, new InactivityWarningBehavior(), true, "TestGame");
            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            AssertCreateSessionState(creationData, sessionState);

            JoinData joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 1);
            this.GameSessionProxy.JoinSession(sessionState.SessionID, joinData, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            this.GameStateProxy.PostGameEnd(sessionState.SessionID, sessionState.GameID.ToString(), TestAreaBase.GetDefaultTwoPlayerGameResult(sessionState.GameID.ToString(), (uint)sessionState.Variant), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);

            //get session state & verify game end
            SessionState sessionStateAfterGameEnd = this.GameSessionProxy.ViewSession(sessionState.SessionID, sessionState.GameID.ToString(), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            Assert.IsTrue(sessionStateAfterGameEnd.State.IsComplete, "Error: The session does not have the isComplete flag set, SessionID: " + sessionStateAfterGameEnd.SessionID);

            ModificationData modificationData = InitializeModificationData(sessionState);
            try
            {
                this.GameSessionProxy.ModifySession(sessionState.SessionID.ToString(), sessionState.GameID.ToString(), modificationData, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
                Assert.Fail("Expected forbidden as we should not allow to modify session after game ended.");
            }
            catch (RestException ex)
            {
                VerifyException(403, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.OperationNotAllowedForCompleteSession), ex.Response);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify that trying to join a session that is completed is not allowed.")]
        [TestProperty("Type", "Features")]
        public void N_PostGameEnd_JoinSessionAfterGameEnded()
        {
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, new InactivityWarningBehavior(), true, "TestGame");
            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            AssertCreateSessionState(creationData, sessionState);

            JoinData joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 1);
            this.GameSessionProxy.JoinSession(sessionState.SessionID, joinData, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            this.GameStateProxy.PostGameEnd(sessionState.SessionID, sessionState.GameID.ToString(), TestAreaBase.GetDefaultTwoPlayerGameResult(sessionState.GameID.ToString(), (uint)sessionState.Variant), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);

            //get session state & verify game end
            SessionState sessionStateAfterGameEnd = this.GameSessionProxy.ViewSession(sessionState.SessionID, sessionState.GameID.ToString(), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            Assert.IsTrue(sessionStateAfterGameEnd.State.IsComplete, "Error: The session does not have the isComplete flag set, SessionID: " + sessionStateAfterGameEnd.SessionID);

            joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 2);
            try
            {
                this.GameSessionProxy.JoinSession(sessionState.SessionID, joinData, Config.Environment.UserSettings[2].Membername, Config.Environment.UserSettings[2].Password);
                Assert.Fail("Expected forbidden as we should not allow to join session after game ended.");
            }
            catch (RestException ex)
            {
                VerifyException(403, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.OperationNotAllowedForCompleteSession), ex.Response);
            }
        }


        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify that trying to post a game result for a session that is already completed is not allowed.")]
        [TestProperty("Type", "Features")]
        public void N_PostGameEnd_PostGameEndAfterGameEnded()
        {
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, new InactivityWarningBehavior(), true, "TestGame");
            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            AssertCreateSessionState(creationData, sessionState);

            JoinData joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 1);
            this.GameSessionProxy.JoinSession(sessionState.SessionID, joinData, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            this.GameStateProxy.PostGameEnd(sessionState.SessionID, sessionState.GameID.ToString(), TestAreaBase.GetDefaultTwoPlayerGameResult(sessionState.GameID.ToString(), (uint)sessionState.Variant), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);

            //get session state & verify game end
            SessionState sessionStateAfterGameEnd = this.GameSessionProxy.ViewSession(sessionState.SessionID, sessionState.GameID.ToString(), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            Assert.IsTrue(sessionStateAfterGameEnd.State.IsComplete, "Error: The session does not have the isComplete flag set, SessionID: " + sessionStateAfterGameEnd.SessionID);

            try
            {
                this.GameStateProxy.PostGameEnd(sessionState.SessionID, sessionState.GameID.ToString(), TestAreaBase.GetDefaultTwoPlayerGameResult(sessionState.GameID.ToString(), (uint)sessionState.Variant), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
                Assert.Fail("Expected forbidden as we should not allow to post game end after game ended.");
            }
            catch (RestException ex)
            {
                VerifyException(403, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.OperationNotAllowedForCompleteSession), ex.Response);
            }
        }


        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify that trying to send a user nudge for a session that is completed is not allowed.")]
        [TestProperty("Type", "Features")]
        public void N_PostGameEnd_PostGameActionAfterGameEnded()
        {
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, new InactivityWarningBehavior(), true, "TestGame");
            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            AssertCreateSessionState(creationData, sessionState);

            JoinData joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 1);
            this.GameSessionProxy.JoinSession(sessionState.SessionID, joinData, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            this.GameStateProxy.PostGameEnd(sessionState.SessionID, sessionState.GameID.ToString(), TestAreaBase.GetDefaultTwoPlayerGameResult(sessionState.GameID.ToString(), (uint)sessionState.Variant), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);

            //get session state & verify game end
            SessionState sessionStateAfterGameEnd = this.GameSessionProxy.ViewSession(sessionState.SessionID, sessionState.GameID.ToString(), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            Assert.IsTrue(sessionStateAfterGameEnd.State.IsComplete, "Error: The session does not have the isComplete flag set, SessionID: " + sessionStateAfterGameEnd.SessionID);

            // Do PostGameAction with a UserNudge as ActionType
            GameAction gameAction = new GameAction();
            gameAction.ActionType = GameActionType.UserNudge;
            gameAction.ActionData = new byte[] { 1 };
            gameAction.ActionTime = DateTime.Now;
            gameAction.SequenceNumber = 1;

            try
            {
                this.GameStateProxy.PostGameAction(sessionState.SessionID.ToString(), sessionState.GameID.ToString(), gameAction, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
                Assert.Fail("Expected forbidden as we should not allow to post game action after game ended.");
            }
            catch (RestException ex)
            {
                VerifyException(403, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.OperationNotAllowedForCompleteSession), ex.Response);
            }
        }

        //related bug 1863
        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify contents of you win, you lose, game over and game tie notifications.")]
        [TestProperty("Type", "Features")]
        public void P_PostGameEnd_NotificationsContent()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 4, "We need at least 4 users for this testcase.");
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");
            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            AssertCreateSessionState(creationData, sessionState);

            JoinData joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 1);
            this.GameSessionProxy.JoinSession(sessionState.SessionID.ToString(), joinData, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 2);
            this.GameSessionProxy.JoinSession(sessionState.SessionID.ToString(), joinData, Config.Environment.UserSettings[2].Membername, Config.Environment.UserSettings[2].Password);
            joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 3);
            this.GameSessionProxy.JoinSession(sessionState.SessionID.ToString(), joinData, Config.Environment.UserSettings[3].Membername, Config.Environment.UserSettings[3].Password);

            //Delete pre-existing notifications 
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);

            GameResults gameResults = TestAreaBase.GetDefaultTwoPlayerGameResult(sessionState.GameID.ToString(), (uint)sessionState.Variant);
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.GameOverSeatIndexes = new int[] { 1 };
            gameResults.LosingSeatIndexes = new int[] { 2 };
            gameResults.TierSeatIndexes = new int[] { 3 };

            this.GameStateProxy.PostGameEnd(sessionState.SessionID, sessionState.GameID.ToString(), gameResults, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);

            Thread.Sleep(20000);
            this.NotificationsServiceProxy.Locale = "en-US";

            Notification youWinNotification = GetNotification(sessionState.GameID.ToString(), sessionState.SessionID, Notification.NotificationType.YouWin.ToString(), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            Notification gameOverNotification = GetNotification(sessionState.GameID.ToString(), sessionState.SessionID, Notification.NotificationType.GameOver.ToString(), Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            Notification youLoseNotification = GetNotification(sessionState.GameID.ToString(), sessionState.SessionID, Notification.NotificationType.YouLose.ToString(), Config.Environment.UserSettings[2].Membername, Config.Environment.UserSettings[2].Password);
            Notification gameTieNotification = GetNotification(sessionState.GameID.ToString(), sessionState.SessionID, Notification.NotificationType.GameTie.ToString(), Config.Environment.UserSettings[3].Membername, Config.Environment.UserSettings[3].Password);

            ValidateNotificationContent(youWinNotification, "You Win", "Xbox LIVE", "");
            ValidateNotificationContent(gameOverNotification, "Game Over", "Xbox LIVE", "");
            ValidateNotificationContent(youLoseNotification, "You Lose", "Xbox LIVE", "");
            ValidateNotificationContent(gameTieNotification, "Tie Game", "Xbox LIVE", "");
        }


        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify that best score of winner from LeaderBoard after Game end.")]
        [TestProperty("Type", "Features")]
        public void P_PostGameEnd_LeaderboardBestScore()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //Get BestScore of Player1 on Leaderboard
            string memberName = Config.Environment.UserSettings[0].Membername;      // player1
            string password = Config.Environment.UserSettings[0].Password;
            long oldScore = long.Parse(GetLeaderboardValue("BestScore", memberName, password));
            Assert.IsNotNull(oldScore, "Player's BestScore is null");

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = oldScore + 1,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 10,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;
            this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, joinSessionState.GameID.ToString(), gameResults);

            //get Session state & Verify
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState sessionStateAfterGameEnd = this.GameSessionProxy.ViewSession(joinSessionState.SessionID, joinSessionState.GameID.ToString());

            Assert.IsTrue(sessionStateAfterGameEnd.State.IsComplete, "Error: The session does not have the isComplete flag set, SessionID: " + sessionStateAfterGameEnd.SessionID);

            //Verify Notification for Player1
            memberName = Config.Environment.UserSettings[0].Membername;      // player1
            password = Config.Environment.UserSettings[0].Password;
            VerifyNotification(joinSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.YouWin, true, memberName, password);

            //Verify Notification for Player2
            memberName = Config.Environment.UserSettings[1].Membername;      // player2
            password = Config.Environment.UserSettings[1].Password;
            VerifyNotification(joinSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.YouLose, true, memberName, password);

            //Get BestScore of Player1 on Leaderboard
            memberName = Config.Environment.UserSettings[0].Membername;      // player1
            password = Config.Environment.UserSettings[0].Password;
            long newScore = long.Parse(GetLeaderboardValue("BestScore", memberName, password));
            Assert.AreEqual(oldScore + 1, newScore, "BestScore Posted to RewardsService is wrong");
        }

        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Verify that trying to leave a session that is completed is allowed.")]
        [TestProperty("Type", "Features")]
        public void P_PostGameEnd_LeaveSessionAfterGameEnded()
        {
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, new InactivityWarningBehavior(), true, "TestGame");
            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            AssertCreateSessionState(creationData, sessionState);

            JoinData joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 1);
            SessionState joinSession = this.GameSessionProxy.JoinSession(sessionState.SessionID, joinData, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            SessionState preGameEndSession = joinSession;

            this.GameStateProxy.PostGameEnd(sessionState.SessionID, sessionState.GameID.ToString(), TestAreaBase.GetDefaultTwoPlayerGameResult(sessionState.GameID.ToString(), (uint)sessionState.Variant), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);

            //get session state & verify game end
            SessionState sessionStateAfterGameEnd = this.GameSessionProxy.ViewSession(sessionState.SessionID, sessionState.GameID.ToString(), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            Assert.IsTrue(sessionStateAfterGameEnd.State.IsComplete, "Error: The session does not have the isComplete flag set, SessionID: " + sessionStateAfterGameEnd.SessionID);
            try
            {
                this.GameSessionProxy.LeaveSession(sessionState.SessionID, sessionState.GameID.ToString(), Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            }
            catch (RestException resx)
            {
                throw new RestException(resx.Response, resx.Message + " Unable to leave session after game ended");
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\State\GetGameState.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using CloudServices.Test.Common.Configuration;
using Multiplayer.Test.API;
using AsyncMultiplayer.SessionCommon;
using System.Net;
using System.Diagnostics;
using System.Threading;
using AsyncMultiplayer.NotificationService;
using LIVEN.Common.Diagnostics;
using Gds.Contracts;
using CloudServices.Test.Common.Proxy;

namespace MultiPlayer.Test.API
{
    /// <summary>
    /// Test Cases for GameState.svc GetGameState API
    /// </summary>
    [TestClass]
    public class GetGameState : TestAreaBase
    {
        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            
            LockTest();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            UnlockTest();
        }

        /// <summary>
        /// BVT test for GetGameState
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("BVT for Game State GetGameState API.")]
        [TestProperty("Type", "BVTs")]
        public void BVT_GetGameState()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            //set the game state
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            byte[] gameData = TestAreaBase.GenerateRandomBytes();
            modifiableGameState.GameData = gameData;

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            FullGameState actualGameState = this.GameStateProxy.GetGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString());
            AssertGameState(modifiableGameState, actualGameState);

            //Verify YourTurn Notification for Active Player
            string memberName = Config.Environment.UserSettings[1].Membername;      // player2
            string password = Config.Environment.UserSettings[1].Password;
            VerifyNotification(joinSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.YourTurn, true, memberName, password);
        }

        /// <summary>
        /// Test GetGameState to get FullGameState while NOT YourTurn and verify that you got the most recent state
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Call GET on GameState service to get FullGameState while NOT YourTurn and verify that you got the most recent state")]
        [TestProperty("Type", "FeatureTests")]
        public void P_GetGameState_WhileNotYourTurn()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            //set the game state by Player1
            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            //set the game state by Player2
            this.GameStateProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameStateProxy.Password = Config.Environment.UserSettings[1].Password;

            modifiableGameState.ActiveSeatIndex = 0;
            modifiableGameState.GameData = new byte[] { 66, 99, 55, 77, 88, 45 };
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            //GetGameState by Player2 while NOT Player's Turn
            FullGameState gameState = this.GameStateProxy.GetGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString());

            //verify that the gamestate is the same as the state set after creating session
            AssertGameState(modifiableGameState, gameState);
        }

        /// <summary>
        /// Test GetGameState to get FullGameState after Game is Completed
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Call GET on GameState service to get FullGameState after Game is Completed")]
        [TestProperty("Type", "FeatureTests")]
        public void P_GetGameState_AfterGameCompleted()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            //set the game state by Player1
            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            //set the game state by Player2
            this.GameStateProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameStateProxy.Password = Config.Environment.UserSettings[1].Password;

            modifiableGameState.ActiveSeatIndex = 0;
            modifiableGameState.GameData = new byte[] { 66, 99, 55, 77, 88, 45 };
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            //Post GameEnd
            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 10,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 10,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameStateProxy.Password = Config.Environment.UserSettings[1].Password;
            this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, joinSessionState.GameID.ToString(), gameResults);

            //get Session state & Verify
            SessionState sessionStateAfterGameEnd = this.GameSessionProxy.ViewSession(joinSessionState.SessionID, joinSessionState.GameID.ToString());

            Assert.IsTrue(sessionStateAfterGameEnd.State.IsComplete, "Error: The session does not have the isComplete flag set, SessionID: " + sessionStateAfterGameEnd.SessionID);

            //GetGameState by Player2 after Game Completed
            FullGameState gameState = this.GameStateProxy.GetGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString());

            //verify that the gamestate is the same as the state set after creating session
            AssertGameState(modifiableGameState, gameState);
        }

        /// <summary>
        /// Test GetGameState to get FullGameState after CreateSession & before any players JoinSession / Make Moves
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Call GET on GameState service to get FullGameState after CreateSession & before any players JoinSession / Make Moves")]
        [TestProperty("Type", "FeatureTests")]
        public void N_GetGameState_AfterCreateSessionBeforeMakeMoves()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //GetGameState by Player1 after CreateSession & before any other players JoinSession or Make Moves
            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                FullGameState gameState = this.GameStateProxy.GetGameState(createSessionState.SessionID, createSessionState.GameID.ToString());
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameDataNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// Test GetGameState to get FullGameState by Player who is NOT in Session
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Call GET on GameState service to get FullGameState by Player who is NOT in Session")]
        [TestProperty("Type", "FeatureTests")]
        public void N_GetGameState_PlayerNotInSession()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            //set the game state by Player1
            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            //GetGameState by Player3 who is NOT in Session
            this.GameStateProxy.UserID = Config.Environment.UserSettings[2].Membername;      // player3
            this.GameStateProxy.Password = Config.Environment.UserSettings[2].Password;

            try
            {
                FullGameState gameState = this.GameStateProxy.GetGameState(createSessionState.SessionID, createSessionState.GameID.ToString());
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.UserNotAllowedToGetStateInSession), restEx.Response);
            }
        }

        /// <summary>
        /// Test GetGameState to get FullGameState by Player who did LeaveSession
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Call GET on GameState service to get FullGameState by Player who did LeaveSession")]
        [TestProperty("Type", "FeatureTests")]
        public void N_GetGameState_PlayerLeaveSession()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            //set the game state by Player1
            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            //Player2 LeaveSession
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            this.GameSessionProxy.LeaveSession(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());

            //View Session after Leave
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState leaveSessionState = this.GameSessionProxy.ViewSession(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());

            //Assert SessionState
            AssertLeaveSessionState(joinSessionState, leaveSessionState);

            //GetGameState by Player2 who did LeaveSession
            this.GameStateProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameStateProxy.Password = Config.Environment.UserSettings[1].Password;

            try
            {
                FullGameState gameState = this.GameStateProxy.GetGameState(createSessionState.SessionID, createSessionState.GameID.ToString());
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.UserNotAllowedToGetStateInSession), restEx.Response);
            }
        }

        /// <summary>
        /// Test GetGameState to get FullGameState with SessionId as Guid with no dashes
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Call GET on GameState service to get FullGameState by Player who did LeaveSession")]
        [TestProperty("Type", "FeatureTests")]
        public void N_GetGameState_NoDashesGuidSessionID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            string sessionIDNoDashes = createSessionState.SessionID.Replace("-", "");

            //GetGameState by Player1 with SessionId as Guid with no dashes
            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                FullGameState gameState = this.GameStateProxy.GetGameState(sessionIDNoDashes, createSessionState.GameID.ToString());
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// Try GetGameState by Player1 for Not Exist Session
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Try GetGameState by Player1 for Not Exist Session")]
        [TestProperty("Type", "FeatureTests")]
        public void N_GetGameState_NotExistSessionID()
        {
            //Try GetGameState by Player1 for Not Exist Session
            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                FullGameState gameState = this.GameStateProxy.GetGameState("j6b048d0-15gd-4i9d-8f65-91bz93s762f5", Constants.TESTGAMEID.ToString());
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// Try GetGameState by Player1 for SessionId as String.Empty
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Try GetGameState by Player1 for SessionId as String.Empty")]
        [TestProperty("Type", "FeatureTests")]
        public void N_GetGameState_EmptyStringSessionID()
        {
            //Try GetGameState by Player1 for Not Exist Session
            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                FullGameState gameState = this.GameStateProxy.GetGameState(String.Empty, Constants.TESTGAMEID.ToString());
                Assert.Fail("Error: Expected to get NOTFOUND exception but it didnt");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, restEx.Response);
            }
        }

        /// <summary>
        /// Try GetGameState by Player1 for SessionId as null
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Try GetGameState by Player1 for SessionId as null")]
        [TestProperty("Type", "FeatureTests")]
        public void N_GetGameState_NullSessionID()
        {
            //Try GetGameState by Player1 for SessionId as null
            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                FullGameState gameState = this.GameStateProxy.GetGameState(null, Constants.TESTGAMEID.ToString());
                Assert.Fail("Error: Expected to get NOTFOUND exception but it didnt");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, restEx.Response);
            }
        }

        /// <summary>
        /// Try GetGameState by Player1 for SessionId as Long String
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Try GetGameState by Player1 for SessionId as Long String")]
        [TestProperty("Type", "FeatureTests")]
        public void N_GetGameState_LongStringSessionID()
        {
            //Try GetGameState by Player1 for  SessionId as Long String
            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                FullGameState gameState = this.GameStateProxy.GetGameState("j6b048d0-15gd-4i9d-8f65-91bz93s762f5-j6b048d0-15gd-4i9d-8f65-91bz93s762f5-j6b048d0-15gd-4i9d-8f65-91bz93s762f5-j6b048d0-15gd-4i9d-8f65-91bz93s762f5", Constants.TESTGAMEID.ToString());
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// Try GetGameState by Player1 for SessionId as One Char String
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Try GetGameState by Player1 for SessionId as One Char String")]
        [TestProperty("Type", "FeatureTests")]
        public void N_GetGameState_OneCharStringSessionID()
        {
            //Try GetGameState by Player1 for  SessionId as One Char String
            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                FullGameState gameState = this.GameStateProxy.GetGameState("1", Constants.TESTGAMEID.ToString());
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

         /// <summary>
        /// Try GetGameState to get FullGameState with GameId as uint.MinValue
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Try GameState service to get FullGameState with GameId as uint.MinValue")]
        [TestProperty("Type", "FeatureTests")]
        public void N_GetGameState_MinGameID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            //set the game state by Player1
            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            //Try GetGameState by Player1 with GameId as uint.MinValue
            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                FullGameState gameState = this.GameStateProxy.GetGameState(joinSessionState.SessionID, uint.MinValue.ToString());
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDDoesNotMatchPartnerTokenTitleID), restEx.Response);
            }
        }

        /// <summary>
        /// Try GetGameState to get FullGameState with GameId as uint.MaxValue
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Try GameState service to get FullGameState with GameId as uint.MaxValue")]
        [TestProperty("Type", "FeatureTests")]
        public void N_GetGameState_MaxGameID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            //set the game state by Player1
            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            //Try GetGameState by Player1 with GameId as uint.MaxValue
            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                FullGameState gameState = this.GameStateProxy.GetGameState(joinSessionState.SessionID, uint.MaxValue.ToString());
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDDoesNotMatchPartnerTokenTitleID), restEx.Response);
            }
        }

        /// <summary>
        /// Try GetGameState to get FullGameState with GameId = 0
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Try GameState service to get FullGameState with GameId = 0")]
        [TestProperty("Type", "FeatureTests")]
        public void N_GetGameState_ZeroGameID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            //set the game state by Player1
            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            //Try GetGameState by Player1 with GameId = 0
            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                FullGameState gameState = this.GameStateProxy.GetGameState(joinSessionState.SessionID, "0");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDDoesNotMatchPartnerTokenTitleID), restEx.Response);
            }
        }

        /// <summary>
        /// Try GetGameState to get FullGameState with GameId which is Invalid/Not Exists
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Try GameState service to get FullGameState with GameId which is Invalid/Not Exists")]
        [TestProperty("Type", "FeatureTests")]
        public void N_GetGameState_NotExistGameID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            //set the game state by Player1
            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            //Try GetGameState by Player1 with GameId which is Invalid/Not Exists
            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                FullGameState gameState = this.GameStateProxy.GetGameState(joinSessionState.SessionID, "1");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDDoesNotMatchPartnerTokenTitleID), restEx.Response);
            }
        }

        /// <summary>
        /// Try GetGameState to get FullGameState with GameId as String.Empty
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Try GameState service to get FullGameState with GameId as String.Empty")]
        [TestProperty("Type", "FeatureTests")]
        public void N_GetGameState_EmptyStringGameID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //Try GetGameState by Player1 with GameId which is Invalid/Not Exists
            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                FullGameState gameState = this.GameStateProxy.GetGameState(createSessionState.SessionID, String.Empty);
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, restEx.Response);
            }
        }

        /// <summary>
        /// Try GetGameState to get FullGameState with GameId as null
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Try GameState service to get FullGameState with GameId as null")]
        [TestProperty("Type", "FeatureTests")]
        public void N_GetGameState_NullGameID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //Try GetGameState by Player1 with GameId which is Invalid/Not Exists
            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                FullGameState gameState = this.GameStateProxy.GetGameState(createSessionState.SessionID, null);
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, restEx.Response);
            }
        }

        /// <summary>
        /// Try GetGameState by Player1 for GameId as Long String
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Try GetGameState by Player1 for GameId as Long String")]
        [TestProperty("Type", "FeatureTests")]
        public void N_GetGameState_LongStringGameID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //Try GetGameState by Player1 for  GameId as Long String
            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                FullGameState gameState = this.GameStateProxy.GetGameState(createSessionState.SessionID, "1234567891234567890");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized , SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidGameIDFormatWhileGettingIdentity), restEx.Response);
            }
        }

        /// <summary>
        /// Try GetGameState by Player1 for GameId as One Char String
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Try GetGameState by Player1 for GameId as One Char String")]
        [TestProperty("Type", "FeatureTests")]
        public void N_GetGameState_OneCharStringGameID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //Try GetGameState by Player1 for  GameId as One Char String
            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                FullGameState gameState = this.GameStateProxy.GetGameState(createSessionState.SessionID, "1");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDDoesNotMatchPartnerTokenTitleID), restEx.Response);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\State\PostGameAction.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using CloudServices.Test.Common.Configuration;
using Multiplayer.Test.API;
using AsyncMultiplayer.SessionCommon;
using AsyncMultiplayer.NotificationService;
using System.Net;
using System.Diagnostics;
using System.Threading;
using CloudServices.Test.Common.Proxy;
using LIVEN.Common.Diagnostics;

namespace MultiPlayer.Test.API
{
    /// <summary>
    /// Test Cases for GameState.svc PostGameAction API
    /// </summary>
    [TestClass]
    public class PostGameAction : TestAreaBase
    {
        private static NotificationTestCommon common = new NotificationTestCommon();
        
        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            
            LockTest();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            UnlockTest();
        }

        /// <summary>
        /// BVT test for PostGameAction
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("BVT for GameState PostGameAction API.")]
        [TestProperty("Type", "BVTs")]
        public void BVT_PostGameAction()
        {
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, sessionState);

            JoinData joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(sessionState.SessionID.ToString(), joinData);

            // Set the game state
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;
            this.GameStateProxy.PutGameState(sessionState.SessionID, creationData.GameID.ToString(), modifiableGameState);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState modifiedSessionState = this.GameSessionProxy.ViewSession(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());

            // Do PostGameAction with a UserNudge as ActionType
            GameAction gameAction = new GameAction();
            gameAction.ActionType = GameActionType.UserNudge;
            gameAction.ActionData = new byte[] { 1 };
            gameAction.ActionTime = DateTime.Now;
            gameAction.SequenceNumber = modifiedSessionState.State.SequenceNumber;

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;
            this.GameStateProxy.PostGameAction(modifiedSessionState.SessionID.ToString(), modifiedSessionState.GameID.ToString(), gameAction);

            //TODO: Verify Notification
            Thread.Sleep(30000);

            string memberName = Config.Environment.UserSettings[1].Membername;      // player2
            string password = Config.Environment.UserSettings[1].Password;

            List<Notification> notificationList = this.NotificationsServiceProxy.GetNotifications(
                modifiedSessionState.GameID.ToString(),
                modifiedSessionState.SessionID,
                (int)Notification.NotificationCategory.ToDo,
                String.Empty,
                1,
                Notification.NotificationType.Nudge.ToString(),
                true,
                memberName,
                password,
                10,
                notificationSleepTime);

            Notification notification = null;
            if (notificationList.Count > 0)
            {
                notification = notificationList[0];
            }

            Assert.IsNotNull(notification, "Error: Did not find Notification.");
            Assert.AreEqual(modifiedSessionState.SessionID, notification.SessionId, "Error: SessionID of SessionState & Notification did not match.");
            Assert.AreEqual(modifiedSessionState.GameID, notification.GameId, "Error: GameID of SessionState & Notification did not match.");
            Assert.AreEqual(Notification.NotificationType.Nudge, notification.Type, "Notification Type did not match.");
        }

        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Call PostGameAction on GameState service to Post GameSpecific Action")]
        [TestProperty("Type", "FeatureTests")]
        public void P_PostGameAction_GameSpecific()
        {
            //string expectedExceptionMessage = "The remote server returned an error: (501) Not Implemented.";

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //verify joinsession
            AssertJoinSessionState(createSessionState, joinSessionState);

            // Set the game state
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState modifiedSessionState = this.GameSessionProxy.ViewSession(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());

            // Do PostGameAction with a GameSpecific as ActionType
            GameAction gameAction = new GameAction();
            gameAction.ActionType = GameActionType.GameSpecific;
            gameAction.ActionData = new byte[] { 1 };
            gameAction.ActionTime = DateTime.Now;
            gameAction.SequenceNumber = modifiedSessionState.State.SequenceNumber;

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                this.GameStateProxy.PostGameAction(modifiedSessionState.SessionID.ToString(), modifiedSessionState.GameID.ToString(), gameAction);
                Assert.Fail("Expected WebException to get thrown but did not get any Exception");
            }
            catch (RestException restEx)
            {
                //HttpWebResponse response = webEx.Response as HttpWebResponse;
                if (restEx == null)
                {
                    throw;
                }
                Assert.AreEqual(HttpStatusCode.NotImplemented, restEx.Response.Status, "HttpStatusCode is not as expected status code");
                //Assert.AreEqual<string>(expectedExceptionMessage, restEx.Message);
            }
        }

        //Related bug 5821
        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that we do not allow users to send nudge to players that are not on the active seat.")]
        [TestProperty("Type", "Features")]
        public void N_PostGameAction_NudgeRecipientNotOnActiveSeat()
        {
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, new InactivityWarningBehavior(), true, "TestGame");
            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            AssertCreateSessionState(creationData, sessionState);

            JoinData joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 1);
            this.GameSessionProxy.JoinSession(sessionState.SessionID, joinData, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            joinData.SeatIndex = 2;
            this.GameSessionProxy.JoinSession(sessionState.SessionID, joinData, Config.Environment.UserSettings[2].Membername, Config.Environment.UserSettings[2].Password);
            common.CheckNotificationCount(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            
            // Do PostGameAction with a UserNudge as ActionType
            GameAction gameAction = new GameAction();
            gameAction.ActionType = GameActionType.UserNudge;
            gameAction.ActionData = new byte[] { 1 };
            gameAction.ActionTime = DateTime.Now;
            gameAction.SequenceNumber = sessionState.State.SequenceNumber;
            this.GameStateProxy.PostGameAction(sessionState.SessionID.ToString(), sessionState.GameID.ToString(), gameAction, Config.Environment.UserSettings[2].Membername, Config.Environment.UserSettings[2].Password);
            
            Thread.Sleep(20000); // give time for notification internal to process notification requests.
            //verify no notification for user on seat index 1
            List<Notification> notificationList = this.NotificationsServiceProxy.GetNotifications(
                sessionState.GameID.ToString(),
                sessionState.SessionID,
                0,
                String.Empty,
                1,
                Notification.NotificationType.Nudge.ToString(),
                true,
                Config.Environment.UserSettings[1].Membername,
                Config.Environment.UserSettings[1].Password,
                null);
            Assert.IsNotNull(notificationList);
            Assert.AreEqual(0, notificationList.Count, "Error: Did not exepect any nudge notifications for user who is not on active seat.");

            //verify notification for user on active seat
            notificationList = this.NotificationsServiceProxy.GetNotifications(
                sessionState.GameID.ToString(),
                sessionState.SessionID,
                0,
                String.Empty,
                1,
                Notification.NotificationType.Nudge.ToString(),
                true,
                Config.Environment.UserSettings[0].Membername,
                Config.Environment.UserSettings[0].Password,
                null);
            Assert.IsNotNull(notificationList);
            Assert.AreEqual(1, notificationList.Count, "Error: Did not exepect any nudge notifications for user who is not on active seat.");
        }

        //Related bug 5821
        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that we do not allow users to send nudge to an empty active seat.")]
        [TestProperty("Type", "Features")]
        public void N_PostGameAction_NudgeEmptyActiveSeat()
        {
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, new InactivityWarningBehavior(), true, "TestGame");
            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            AssertCreateSessionState(creationData, sessionState);

            //assign active seat to an empty seat
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };
            this.GameStateProxy.PutGameState(sessionState.SessionID, sessionState.GameID.ToString(), modifiableGameState, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);

            // Do PostGameAction with a UserNudge as ActionType
            GameAction gameAction = new GameAction();
            gameAction.ActionType = GameActionType.UserNudge;
            gameAction.ActionData = new byte[] { 1 };
            gameAction.ActionTime = DateTime.Now;
            gameAction.SequenceNumber = 1;

            try
            {
                this.GameStateProxy.PostGameAction(sessionState.SessionID.ToString(), sessionState.GameID.ToString(), gameAction, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
                Assert.Fail("Expected forbidden as we should not allow users to nudge an empty seat even if it is the active seat.");
            }
            catch (RestException ex)
            {
                VerifyException(403, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.CannotNudgeEmptyActiveSeat), ex.Response);
            }
        }

        //related bug 1863
        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify contents of user nudge notification.")]
        [TestProperty("Type", "Features")]
        public void P_PostGameAction_NotificationContent()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this testcase.");
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");
            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            AssertCreateSessionState(creationData, sessionState);

            JoinData joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 1);
            this.GameSessionProxy.JoinSession(sessionState.SessionID.ToString(), joinData, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            //Delete pre-existing notifications 
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);

            // Do PostGameAction with a UserNudge as ActionType
            GameAction gameAction = new GameAction();
            gameAction.ActionType = GameActionType.UserNudge;
            gameAction.ActionData = new byte[] { 0 };
            gameAction.ActionTime = DateTime.Now;
            gameAction.SequenceNumber = sessionState.State.SequenceNumber;

            this.GameStateProxy.PostGameAction(sessionState.SessionID.ToString(), sessionState.GameID.ToString(), gameAction, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            this.NotificationsServiceProxy.Locale = "en-US";
            List<Notification> notificationList = this.NotificationsServiceProxy.GetNotifications(
                sessionState.GameID.ToString(),
                sessionState.SessionID,
                (int)Notification.NotificationCategory.ToDo,
                String.Empty,
                10,
                Notification.NotificationType.Nudge.ToString(),
                true,
                Config.Environment.UserSettings[0].Membername,
                Config.Environment.UserSettings[0].Password,
                10,
                notificationSleepTime);

            Assert.IsNotNull(notificationList, "Error: Did not find Notification.");
            Assert.AreEqual(1, notificationList.Count, "Error: Incorrect number of notifications.");
            ValidateNotificationContent(notificationList[0], "Nudge", Config.Environment.UserSettings[1].Gamertag, "");
        }

        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify that we only send one user nudge per turn.")]
        [TestProperty("Type", "BVTs")]
        public void P_PostGameAction_LimitTo1UserNudgePerTurn()
        {
            //verify that we do not have pre-existing notifications for the user.
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");
            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            AssertCreateSessionState(creationData, sessionState);

            JoinData joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 1);
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(sessionState.SessionID.ToString(), joinData, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            // Do PostGameAction with a UserNudge as ActionType
            GameAction gameAction = new GameAction();
            gameAction.ActionType = GameActionType.UserNudge;
            gameAction.ActionData = new byte[] { 1 };
            gameAction.ActionTime = DateTime.Now;
            gameAction.SequenceNumber = 0;

            this.GameStateProxy.PostGameAction(sessionState.SessionID.ToString(), sessionState.GameID.ToString(), gameAction, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            //TODO: Verify Notification
            common.VerifyNotificationCreated(sessionState.GameID.ToString(), sessionState.SessionID.ToString(), Notification.NotificationType.Nudge.ToString(), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);

            //delete notification
            common.CheckNotificationCount(Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);

            // send user nudge again
            this.GameStateProxy.PostGameAction(sessionState.SessionID.ToString(), sessionState.GameID.ToString(), gameAction, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            Thread.Sleep(10 * notificationSleepTime);

            List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(
                                            sessionState.GameID.ToString(),
                                            sessionState.SessionID.ToString(),
                                            0,
                                            Constants.IGNORE_lAST_ID,
                                            10,
                                            Notification.NotificationType.Nudge.ToString(),
                                            true,
                                            Config.Environment.UserSettings[0].Membername,
                                            Config.Environment.UserSettings[0].Password,
                                            null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(0, nList.Count, "Error: Not expecting another nudge notification to be sent.");
            
            joinData.SeatIndex = 2;
            joinSessionState = this.GameSessionProxy.JoinSession(sessionState.SessionID.ToString(), joinData, Config.Environment.UserSettings[2].Membername, Config.Environment.UserSettings[2].Password);

            //send another nudge from another user
            this.GameStateProxy.PostGameAction(sessionState.SessionID.ToString(), sessionState.GameID.ToString(), gameAction, Config.Environment.UserSettings[2].Membername, Config.Environment.UserSettings[2].Password);

            Thread.Sleep(10 * notificationSleepTime);
            nList = this.NotificationsServiceProxy.GetNotifications(
                                            sessionState.GameID.ToString(),
                                            sessionState.SessionID.ToString(),
                                            0,
                                            Constants.IGNORE_lAST_ID,
                                            10,
                                            Notification.NotificationType.Nudge.ToString(),
                                            true,
                                            Config.Environment.UserSettings[0].Membername,
                                            Config.Environment.UserSettings[0].Password,
                                            null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(0, nList.Count, "Error: Not expecting another nudge notification to be sent.");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\Sessions\RejectInvitation.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using CloudServices.Test.Common.Configuration;
using CloudServices.Test.Common.Proxy;
using Multiplayer.Test.API;
using AsyncMultiplayer.SessionCommon;
using System.Net;
using System.Diagnostics;
using System.Threading;
using LIVEN.Common.Diagnostics;
using AsyncMultiplayer.NotificationService;

namespace MultiPlayer.Test.API
{
    /// <summary>
    /// Test Cases for Sessions.svc RejectInvitation API
    /// </summary>
    [TestClass]
    public class RejectInvitation : TestAreaBase
    {
        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            
            LockTest();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            UnlockTest();
        }

        /// <summary>
        /// BVT test for RejectInvitation
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("Call DELETE on GameSessionService to RejectInvitation")]
        [TestProperty("Type", "BVTs")]
        public void BVT_RejectInvitation()
        {
            SessionState createSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = createSessionState.GameID;
            inviteRequest.SessionId = createSessionState.SessionID;
            inviteRequest.Data = "BVT_RejectInvitation test data";
            inviteRequest.Recipients = Config.Environment.UserSettings[1].Membername;   // player2

            this.NotificationsServiceProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.NotificationsServiceProxy.Password = Config.Environment.UserSettings[0].Password;
            this.NotificationsServiceProxy.SendInvite(inviteRequest);

            string memberName = Config.Environment.UserSettings[1].Membername;      // player2
            string password = Config.Environment.UserSettings[1].Password;
            List<Notification> preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                10,
                                                                notificationSleepTime);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;   // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            this.GameSessionProxy.RejectInvitation(createSessionState.GameID.ToString(), createSessionState.SessionID);

            memberName = Config.Environment.UserSettings[1].Membername;      // player2
            password = Config.Environment.UserSettings[1].Password;

            List<Notification> postRejectNotifications = null;

            for (int i = 0; i < 10; i++)
            {
                Thread.Sleep(notificationSleepTime);

                postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (postRejectNotifications != null && postRejectNotifications.Count == 0)
                {
                    break;
                }
            }

            Assert.IsNotNull(postRejectNotifications);
            Assert.IsTrue(postRejectNotifications.Count == 0, "ERROR: Unexpected Number of notifications.");
        }

        /// <summary>
        /// Feature Test for RejectInvitation - Different Player (Player Not Received the Invitation Originally) RejectInvitation 
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Call DELETE on GameSessionService to RejectInvitation - Different Player (Player Not Received the Invitation Originally) RejectInvitation")]
        [TestProperty("Type", "FeatureTests")]
        public void P_RejectInvitation_DifferentPlayer()
        {
            SessionState createSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = createSessionState.GameID;
            inviteRequest.SessionId = createSessionState.SessionID;
            inviteRequest.Data = "BVT_RejectInvitation test data";
            inviteRequest.Recipients = Config.Environment.UserSettings[1].Membername;   // player2

            this.NotificationsServiceProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.NotificationsServiceProxy.Password = Config.Environment.UserSettings[0].Password;
            this.NotificationsServiceProxy.SendInvite(inviteRequest);

            string memberName = Config.Environment.UserSettings[1].Membername;      // player2
            string password = Config.Environment.UserSettings[1].Password;
            List<Notification> preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                10,
                                                                10000);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[2].Membername;   // player3
            this.GameSessionProxy.Password = Config.Environment.UserSettings[2].Password;
            this.GameSessionProxy.RejectInvitation(createSessionState.GameID.ToString(), createSessionState.SessionID);

            memberName = Config.Environment.UserSettings[2].Membername;      // player3
            password = Config.Environment.UserSettings[2].Password;

            List<Notification> postRejectNotifications = null;

            for (int i = 0; i < 10; i++)
            {
                Thread.Sleep(10000);

                postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (postRejectNotifications != null && postRejectNotifications.Count == 0)
                {
                    break;
                }
            }

            Assert.IsNotNull(postRejectNotifications);
            Assert.IsTrue(postRejectNotifications.Count == 0, "ERROR: Unexpected Number of notifications.");
        }

        /// <summary>
        /// Feature Test for RejectInvitation - Multiple Players RejectInvitation 
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Call DELETE on GameSessionService to RejectInvitation - Multiple Players RejectInvitation")]
        [TestProperty("Type", "FeatureTests")]
        public void P_RejectInvitation_MultiplePlayers()
        {
            SessionState createSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            StringBuilder recipients = new StringBuilder();
            recipients.Append(Config.Environment.UserSettings[1].Membername + ";");
            recipients.Append(Config.Environment.UserSettings[2].Membername + ";");
            recipients.Append(Config.Environment.UserSettings[3].Membername + ";");

            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = createSessionState.GameID;
            inviteRequest.SessionId = createSessionState.SessionID;
            inviteRequest.Data = "BVT_RejectInvitation test data";
            inviteRequest.Recipients = recipients.ToString();

            this.NotificationsServiceProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.NotificationsServiceProxy.Password = Config.Environment.UserSettings[0].Password;
            this.NotificationsServiceProxy.SendInvite(inviteRequest);

            string memberName = Config.Environment.UserSettings[1].Membername;      // player2
            string password = Config.Environment.UserSettings[1].Password;
            List<Notification> preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                10,
                                                                10000);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            memberName = Config.Environment.UserSettings[2].Membername;      // player3
            password = Config.Environment.UserSettings[2].Password;
            preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                10,
                                                                10000);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            memberName = Config.Environment.UserSettings[3].Membername;      // player4
            password = Config.Environment.UserSettings[3].Password;
            preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                10,
                                                                10000);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;   // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            this.GameSessionProxy.RejectInvitation(createSessionState.GameID.ToString(), createSessionState.SessionID);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[3].Membername;   // player4
            this.GameSessionProxy.Password = Config.Environment.UserSettings[3].Password;
            this.GameSessionProxy.RejectInvitation(createSessionState.GameID.ToString(), createSessionState.SessionID);

            memberName = Config.Environment.UserSettings[1].Membername;      // player2
            password = Config.Environment.UserSettings[1].Password;

            List<Notification> postRejectNotifications = null;

            for (int i = 0; i < 10; i++)
            {
                Thread.Sleep(10000);

                postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (postRejectNotifications != null && postRejectNotifications.Count == 0)
                {
                    break;
                }
            }

            Assert.IsNotNull(postRejectNotifications);
            Assert.IsTrue(postRejectNotifications.Count == 0, "ERROR: Unexpected Number of notifications.");

            memberName = Config.Environment.UserSettings[3].Membername;      // player4
            password = Config.Environment.UserSettings[3].Password;

            postRejectNotifications = null;

            for (int i = 0; i < 10; i++)
            {
                Thread.Sleep(10000);

                postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (postRejectNotifications != null && postRejectNotifications.Count == 0)
                {
                    break;
                }
            }

            Assert.IsNotNull(postRejectNotifications);
            Assert.IsTrue(postRejectNotifications.Count == 0, "ERROR: Unexpected Number of notifications.");

            memberName = Config.Environment.UserSettings[2].Membername;      // player3
            password = Config.Environment.UserSettings[2].Password;
            postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                10,
                                                                10000);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(postRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");
        }

        /// <summary>
        /// Feature Test for RejectInvitation - All Players RejectInvitation 
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Call DELETE on GameSessionService to RejectInvitation - All Players RejectInvitation")]
        [TestProperty("Type", "FeatureTests")]
        public void P_RejectInvitation_AllPlayers()
        {
            SessionState createSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            StringBuilder recipients = new StringBuilder();
            recipients.Append(Config.Environment.UserSettings[1].Membername + ";");
            recipients.Append(Config.Environment.UserSettings[2].Membername + ";");
            recipients.Append(Config.Environment.UserSettings[3].Membername + ";");

            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = createSessionState.GameID;
            inviteRequest.SessionId = createSessionState.SessionID;
            inviteRequest.Data = "BVT_RejectInvitation test data";
            inviteRequest.Recipients = recipients.ToString();

            this.NotificationsServiceProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.NotificationsServiceProxy.Password = Config.Environment.UserSettings[0].Password;
            this.NotificationsServiceProxy.SendInvite(inviteRequest);

            string memberName = Config.Environment.UserSettings[1].Membername;      // player2
            string password = Config.Environment.UserSettings[1].Password;
            List<Notification> preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                10,
                                                                10000);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            memberName = Config.Environment.UserSettings[2].Membername;      // player3
            password = Config.Environment.UserSettings[2].Password;
            preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                10,
                                                                10000);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            memberName = Config.Environment.UserSettings[3].Membername;      // player4
            password = Config.Environment.UserSettings[3].Password;
            preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                10,
                                                                10000);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;   // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            this.GameSessionProxy.RejectInvitation(createSessionState.GameID.ToString(), createSessionState.SessionID);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[2].Membername;   // player3
            this.GameSessionProxy.Password = Config.Environment.UserSettings[2].Password;
            this.GameSessionProxy.RejectInvitation(createSessionState.GameID.ToString(), createSessionState.SessionID);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[3].Membername;   // player4
            this.GameSessionProxy.Password = Config.Environment.UserSettings[3].Password;
            this.GameSessionProxy.RejectInvitation(createSessionState.GameID.ToString(), createSessionState.SessionID);

            memberName = Config.Environment.UserSettings[1].Membername;      // player2
            password = Config.Environment.UserSettings[1].Password;

            List<Notification> postRejectNotifications = null;

            for (int i = 0; i < 10; i++)
            {
                Thread.Sleep(10000);

                postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (postRejectNotifications != null && postRejectNotifications.Count == 0)
                {
                    break;
                }
            }

            Assert.IsNotNull(postRejectNotifications);
            Assert.IsTrue(postRejectNotifications.Count == 0, "ERROR: Unexpected Number of notifications.");

            memberName = Config.Environment.UserSettings[2].Membername;      // player3
            password = Config.Environment.UserSettings[2].Password;

            postRejectNotifications = null;

            for (int i = 0; i < 10; i++)
            {
                Thread.Sleep(10000);

                postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (postRejectNotifications != null && postRejectNotifications.Count == 0)
                {
                    break;
                }
            }

            Assert.IsNotNull(postRejectNotifications);
            Assert.IsTrue(postRejectNotifications.Count == 0, "ERROR: Unexpected Number of notifications.");

            memberName = Config.Environment.UserSettings[3].Membername;      // player4
            password = Config.Environment.UserSettings[3].Password;

            postRejectNotifications = null;

            for (int i = 0; i < 10; i++)
            {
                Thread.Sleep(10000);

                postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (postRejectNotifications != null && postRejectNotifications.Count == 0)
                {
                    break;
                }
            }

            Assert.IsNotNull(postRejectNotifications);
            Assert.IsTrue(postRejectNotifications.Count == 0, "ERROR: Unexpected Number of notifications.");
        }

        /// <summary>
        /// Feature Test for RejectInvitation - Player RejectInvitation Multiple times 
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Call DELETE on GameSessionService to RejectInvitation - Player RejectInvitation Multiple times")]
        [TestProperty("Type", "FeatureTests")]
        public void N_RejectInvitation_MultipleTimes()
        {
            SessionState createSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = createSessionState.GameID;
            inviteRequest.SessionId = createSessionState.SessionID;
            inviteRequest.Data = "BVT_RejectInvitation test data";
            inviteRequest.Recipients = Config.Environment.UserSettings[1].Membername;   // player2

            this.NotificationsServiceProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.NotificationsServiceProxy.Password = Config.Environment.UserSettings[0].Password;
            this.NotificationsServiceProxy.SendInvite(inviteRequest);

            string memberName = Config.Environment.UserSettings[1].Membername;      // player2
            string password = Config.Environment.UserSettings[1].Password;
            List<Notification> preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                10,
                                                                10000);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;   // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            this.GameSessionProxy.RejectInvitation(createSessionState.GameID.ToString(), createSessionState.SessionID);

            memberName = Config.Environment.UserSettings[1].Membername;      // player2
            password = Config.Environment.UserSettings[1].Password;

            List<Notification> postRejectNotifications = null;

            for (int i = 0; i < 10; i++)
            {
                Thread.Sleep(10000);

                postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (postRejectNotifications != null && postRejectNotifications.Count == 0)
                {
                    break;
                }
            }

            Assert.IsNotNull(postRejectNotifications);
            Assert.IsTrue(postRejectNotifications.Count == 0, "ERROR: Unexpected Number of notifications.");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;   // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            this.GameSessionProxy.RejectInvitation(createSessionState.GameID.ToString(), createSessionState.SessionID);
        }

        /// <summary>
        /// Feature Test for RejectInvitation - By Player Not received Invitation
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Call DELETE on GameSessionService to RejectInvitation - By Player Not Received Invitation")]
        [TestProperty("Type", "FeatureTests")]
        public void P_RejectInvitation_PlayerNotInvited()
        {
            SessionState createSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = createSessionState.GameID;
            inviteRequest.SessionId = createSessionState.SessionID;
            inviteRequest.Data = "BVT_RejectInvitation test data";
            inviteRequest.Recipients = Config.Environment.UserSettings[1].Membername;   // player2

            this.NotificationsServiceProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.NotificationsServiceProxy.Password = Config.Environment.UserSettings[0].Password;
            this.NotificationsServiceProxy.SendInvite(inviteRequest);

            string memberName = Config.Environment.UserSettings[1].Membername;      // player2
            string password = Config.Environment.UserSettings[1].Password;
            List<Notification> preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                10,
                                                                10000);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[2].Membername;   // player3
            this.GameSessionProxy.Password = Config.Environment.UserSettings[2].Password;
            this.GameSessionProxy.RejectInvitation(createSessionState.GameID.ToString(), createSessionState.SessionID);

            memberName = Config.Environment.UserSettings[1].Membername;      // player2
            password = Config.Environment.UserSettings[1].Password;
            List<Notification> postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                10,
                                                                10000);

            Assert.IsNotNull(postRejectNotifications);
            Assert.IsTrue(postRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

        }

        /// <summary>
        /// Test for a Player RejectInvitation - GUID with no dashes as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Feature Test for Sessions.svc RejectInvitation API to verify a Player try to RejectInvitation - GUID with no dashes as SessionID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_RejectInvitation_GUIDWithNoDashesAsSessionID()
        {
            SessionState createSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = createSessionState.GameID;
            inviteRequest.SessionId = createSessionState.SessionID;
            inviteRequest.Data = "BVT_RejectInvitation test data";
            inviteRequest.Recipients = Config.Environment.UserSettings[1].Membername;   // player2

            this.NotificationsServiceProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.NotificationsServiceProxy.Password = Config.Environment.UserSettings[0].Password;
            this.NotificationsServiceProxy.SendInvite(inviteRequest);

            string memberName = Config.Environment.UserSettings[1].Membername;      // player2
            string password = Config.Environment.UserSettings[1].Password;
            List<Notification> preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                10,
                                                                10000);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            string sessionIDNoDashes = createSessionState.SessionID.Replace("-", "");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;   // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            this.GameSessionProxy.RejectInvitation(createSessionState.GameID.ToString(), sessionIDNoDashes);

            memberName = Config.Environment.UserSettings[1].Membername;      // player2
            password = Config.Environment.UserSettings[1].Password;

            List<Notification> postRejectNotifications = null;

            for (int i = 0; i < 10; i++)
            {
                Thread.Sleep(10000);

                postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (postRejectNotifications != null && postRejectNotifications.Count == 0)
                {
                    break;
                }
            }

            Assert.IsNotNull(postRejectNotifications);
            Assert.IsTrue(postRejectNotifications.Count == 0, "ERROR: Unexpected Number of notifications.");
        }

        /// <summary>
        /// Test for a Player RejectInvitation - Not Exist SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Feature Test for Sessions.svc RejectInvitation API to verify a Player try to RejectInvitation - Not Exist SessionID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_RejectInvitation_NotExistSessionID()
        {
            SessionState createSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = createSessionState.GameID;
            inviteRequest.SessionId = createSessionState.SessionID;
            inviteRequest.Data = "BVT_RejectInvitation test data";
            inviteRequest.Recipients = Config.Environment.UserSettings[1].Membername;   // player2

            this.NotificationsServiceProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.NotificationsServiceProxy.Password = Config.Environment.UserSettings[0].Password;
            this.NotificationsServiceProxy.SendInvite(inviteRequest);

            string memberName = Config.Environment.UserSettings[1].Membername;      // player2
            string password = Config.Environment.UserSettings[1].Password;
            List<Notification> preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                10,
                                                                10000);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;   // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            this.GameSessionProxy.RejectInvitation(createSessionState.GameID.ToString(), "j6b048d0-15gd-4i9d-8f65-91bz93s762f5");

            memberName = Config.Environment.UserSettings[1].Membername;      // player2
            password = Config.Environment.UserSettings[1].Password;

            List<Notification> postRejectNotifications = null;

            for (int i = 0; i < 10; i++)
            {
                Thread.Sleep(10000);

                postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (postRejectNotifications != null && postRejectNotifications.Count == 0)
                {
                    break;
                }
            }

            Assert.IsNotNull(postRejectNotifications);
            Assert.IsTrue(postRejectNotifications.Count == 0, "ERROR: Unexpected Number of notifications.");
        }

        /// <summary>
        /// Test for a Player RejectInvitation - String.Empty SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Feature Test for Sessions.svc RejectInvitation API to verify a Player try to RejectInvitation - String.Empty SessionID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_RejectInvitation_EmptyStringSessionID()
        {
            SessionState createSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = createSessionState.GameID;
            inviteRequest.SessionId = createSessionState.SessionID;
            inviteRequest.Data = "BVT_RejectInvitation test data";
            inviteRequest.Recipients = Config.Environment.UserSettings[1].Membername;   // player2

            this.NotificationsServiceProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.NotificationsServiceProxy.Password = Config.Environment.UserSettings[0].Password;
            this.NotificationsServiceProxy.SendInvite(inviteRequest);

            string memberName = Config.Environment.UserSettings[1].Membername;      // player2
            string password = Config.Environment.UserSettings[1].Password;
            List<Notification> preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                10,
                                                                10000);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;   // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            this.GameSessionProxy.RejectInvitation(createSessionState.GameID.ToString(), String.Empty);

            memberName = Config.Environment.UserSettings[1].Membername;      // player2
            password = Config.Environment.UserSettings[1].Password;

            List<Notification> postRejectNotifications = null;

            for (int i = 0; i < 10; i++)
            {
                Thread.Sleep(10000);

                postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (postRejectNotifications != null && postRejectNotifications.Count == 0)
                {
                    break;
                }
            }

            Assert.IsNotNull(postRejectNotifications);
            Assert.IsTrue(postRejectNotifications.Count == 0, "ERROR: Unexpected Number of notifications.");
        }

        /// <summary>
        /// Test for a Player RejectInvitation - null as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Feature Test for Sessions.svc RejectInvitation API to verify a Player try to RejectInvitation - null as SessionID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_RejectInvitation_NullSessionID()
        {
            SessionState createSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = createSessionState.GameID;
            inviteRequest.SessionId = createSessionState.SessionID;
            inviteRequest.Data = "BVT_RejectInvitation test data";
            inviteRequest.Recipients = Config.Environment.UserSettings[1].Membername;   // player2

            this.NotificationsServiceProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.NotificationsServiceProxy.Password = Config.Environment.UserSettings[0].Password;
            this.NotificationsServiceProxy.SendInvite(inviteRequest);

            string memberName = Config.Environment.UserSettings[1].Membername;      // player2
            string password = Config.Environment.UserSettings[1].Password;
            List<Notification> preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                10,
                                                                10000);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;   // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            this.GameSessionProxy.RejectInvitation(createSessionState.GameID.ToString(), null);

            memberName = Config.Environment.UserSettings[1].Membername;      // player2
            password = Config.Environment.UserSettings[1].Password;

            List<Notification> postRejectNotifications = null;

            for (int i = 0; i < 10; i++)
            {
                Thread.Sleep(10000);

                postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (postRejectNotifications != null && postRejectNotifications.Count == 0)
                {
                    break;
                }
            }

            Assert.IsNotNull(postRejectNotifications);
            Assert.IsTrue(postRejectNotifications.Count == 0, "ERROR: Unexpected Number of notifications.");
        }

        /// <summary>
        /// Test for a Player RejectInvitation - Long String as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Feature Test for Sessions.svc RejectInvitation API to verify a Player try to RejectInvitation - Long String as SessionID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_RejectInvitation_LongStringSessionID()
        {
            SessionState createSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = createSessionState.GameID;
            inviteRequest.SessionId = createSessionState.SessionID;
            inviteRequest.Data = "BVT_RejectInvitation test data";
            inviteRequest.Recipients = Config.Environment.UserSettings[1].Membername;   // player2

            this.NotificationsServiceProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.NotificationsServiceProxy.Password = Config.Environment.UserSettings[0].Password;
            this.NotificationsServiceProxy.SendInvite(inviteRequest);

            string memberName = Config.Environment.UserSettings[1].Membername;      // player2
            string password = Config.Environment.UserSettings[1].Password;
            List<Notification> preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                10,
                                                                10000);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;   // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            this.GameSessionProxy.RejectInvitation(createSessionState.GameID.ToString(), "j6b048d0-15gd-4i9d-8f65-91bz93s762f5-j6b048d0-15gd-4i9d-8f65-91bz93s762f5-j6b048d0-15gd-4i9d-8f65-91bz93s762f5-j6b048d0-15gd-4i9d-8f65-91bz93s762f5");

            memberName = Config.Environment.UserSettings[1].Membername;      // player2
            password = Config.Environment.UserSettings[1].Password;

            List<Notification> postRejectNotifications = null;

            for (int i = 0; i < 10; i++)
            {
                Thread.Sleep(10000);

                postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (postRejectNotifications != null && postRejectNotifications.Count == 0)
                {
                    break;
                }
            }

            Assert.IsNotNull(postRejectNotifications);
            Assert.IsTrue(postRejectNotifications.Count == 0, "ERROR: Unexpected Number of notifications.");
        }

        /// <summary>
        /// Test for a Player RejectInvitation - One Char String as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Feature Test for Sessions.svc RejectInvitation API to verify a Player try to RejectInvitation - One Char String as SessionID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_RejectInvitation_OneCharStringSessionID()
        {
            SessionState createSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = createSessionState.GameID;
            inviteRequest.SessionId = createSessionState.SessionID;
            inviteRequest.Data = "BVT_RejectInvitation test data";
            inviteRequest.Recipients = Config.Environment.UserSettings[1].Membername;   // player2

            this.NotificationsServiceProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.NotificationsServiceProxy.Password = Config.Environment.UserSettings[0].Password;
            this.NotificationsServiceProxy.SendInvite(inviteRequest);

            string memberName = Config.Environment.UserSettings[1].Membername;      // player2
            string password = Config.Environment.UserSettings[1].Password;
            List<Notification> preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                10,
                                                                10000);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;   // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            this.GameSessionProxy.RejectInvitation(createSessionState.GameID.ToString(), "a");

            memberName = Config.Environment.UserSettings[1].Membername;      // player2
            password = Config.Environment.UserSettings[1].Password;

            List<Notification> postRejectNotifications = null;

            for (int i = 0; i < 10; i++)
            {
                Thread.Sleep(10000);

                postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (postRejectNotifications != null && postRejectNotifications.Count == 0)
                {
                    break;
                }
            }

            Assert.IsNotNull(postRejectNotifications);
            Assert.IsTrue(postRejectNotifications.Count == 0, "ERROR: Unexpected Number of notifications.");
        }       
       
        /// <summary>
        /// Test for a Player RejectInvitation - String.Empty GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Feature Test for Sessions.svc RejectInvitation API to verify a Player try to RejectInvitation - String.Empty GameID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_RejectInvitation_EmptyStringGameID()
        {
            SessionState createSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = createSessionState.GameID;
            inviteRequest.SessionId = createSessionState.SessionID;
            inviteRequest.Data = "BVT_RejectInvitation test data";
            inviteRequest.Recipients = Config.Environment.UserSettings[1].Membername;   // player2

            this.NotificationsServiceProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.NotificationsServiceProxy.Password = Config.Environment.UserSettings[0].Password;
            this.NotificationsServiceProxy.SendInvite(inviteRequest);

            string memberName = Config.Environment.UserSettings[1].Membername;      // player2
            string password = Config.Environment.UserSettings[1].Password;
            List<Notification> preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                10,
                                                                10000);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;   // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            this.GameSessionProxy.RejectInvitation(String.Empty, createSessionState.SessionID);

            memberName = Config.Environment.UserSettings[1].Membername;      // player2
            password = Config.Environment.UserSettings[1].Password;

            List<Notification> postRejectNotifications = null;

            for (int i = 0; i < 10; i++)
            {
                Thread.Sleep(10000);

                postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (postRejectNotifications != null && postRejectNotifications.Count == 0)
                {
                    break;
                }
            }

            Assert.IsNotNull(postRejectNotifications);
            Assert.IsTrue(postRejectNotifications.Count == 0, "ERROR: Unexpected Number of notifications.");
        }

        /// <summary>
        /// Test for a Player RejectInvitation - null as GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Feature Test for Sessions.svc RejectInvitation API to verify a Player try to RejectInvitation - null as GameID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_RejectInvitation_NullGameID()
        {
            SessionState createSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = createSessionState.GameID;
            inviteRequest.SessionId = createSessionState.SessionID;
            inviteRequest.Data = "BVT_RejectInvitation test data";
            inviteRequest.Recipients = Config.Environment.UserSettings[1].Membername;   // player2

            this.NotificationsServiceProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.NotificationsServiceProxy.Password = Config.Environment.UserSettings[0].Password;
            this.NotificationsServiceProxy.SendInvite(inviteRequest);

            string memberName = Config.Environment.UserSettings[1].Membername;      // player2
            string password = Config.Environment.UserSettings[1].Password;
            List<Notification> preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                10,
                                                                10000);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;   // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            this.GameSessionProxy.RejectInvitation(null, createSessionState.SessionID);

            memberName = Config.Environment.UserSettings[1].Membername;      // player2
            password = Config.Environment.UserSettings[1].Password;

            List<Notification> postRejectNotifications = null;

            for (int i = 0; i < 10; i++)
            {
                Thread.Sleep(10000);

                postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (postRejectNotifications != null && postRejectNotifications.Count == 0)
                {
                    break;
                }
            }

            Assert.IsNotNull(postRejectNotifications);
            Assert.IsTrue(postRejectNotifications.Count == 0, "ERROR: Unexpected Number of notifications.");
        }

        /// <summary>
        /// Test for a Player RejectInvitation - Long String as GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Feature Test for Sessions.svc RejectInvitation API to verify a Player try to RejectInvitation - Long String as GameID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_RejectInvitation_LongStringGameID()
        {
            SessionState createSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = createSessionState.GameID;
            inviteRequest.SessionId = createSessionState.SessionID;
            inviteRequest.Data = "BVT_RejectInvitation test data";
            inviteRequest.Recipients = Config.Environment.UserSettings[1].Membername;   // player2

            this.NotificationsServiceProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.NotificationsServiceProxy.Password = Config.Environment.UserSettings[0].Password;
            this.NotificationsServiceProxy.SendInvite(inviteRequest);

            string memberName = Config.Environment.UserSettings[1].Membername;      // player2
            string password = Config.Environment.UserSettings[1].Password;
            List<Notification> preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                10,
                                                                10000);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;   // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            this.GameSessionProxy.RejectInvitation("4434343298432830284230984302984039284329842384238423842394832943843925721483402370", createSessionState.SessionID);

            memberName = Config.Environment.UserSettings[1].Membername;      // player2
            password = Config.Environment.UserSettings[1].Password;

            List<Notification> postRejectNotifications = null;

            for (int i = 0; i < 10; i++)
            {
                Thread.Sleep(10000);

                postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (postRejectNotifications != null && postRejectNotifications.Count == 0)
                {
                    break;
                }
            }

            Assert.IsNotNull(postRejectNotifications);
            Assert.IsTrue(postRejectNotifications.Count == 0, "ERROR: Unexpected Number of notifications.");
        }
        /// <summary>
        /// Test for a Player RejectInvitation - One Char String as GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Feature Test for Sessions.svc RejectInvitation API to verify a Player try to RejectInvitation - One Char String as GameID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_RejectInvitation_OneCharStringGameID()
        {
            SessionState createSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = createSessionState.GameID;
            inviteRequest.SessionId = createSessionState.SessionID;
            inviteRequest.Data = "BVT_RejectInvitation test data";
            inviteRequest.Recipients = Config.Environment.UserSettings[1].Membername;   // player2

            this.NotificationsServiceProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.NotificationsServiceProxy.Password = Config.Environment.UserSettings[0].Password;
            this.NotificationsServiceProxy.SendInvite(inviteRequest);

            string memberName = Config.Environment.UserSettings[1].Membername;      // player2
            string password = Config.Environment.UserSettings[1].Password;
            List<Notification> preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                10,
                                                                10000);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;   // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            this.GameSessionProxy.RejectInvitation("5", createSessionState.SessionID);

            memberName = Config.Environment.UserSettings[1].Membername;      // player2
            password = Config.Environment.UserSettings[1].Password;

            List<Notification> postRejectNotifications = null;

            for (int i = 0; i < 10; i++)
            {
                Thread.Sleep(10000);

                postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (postRejectNotifications != null && postRejectNotifications.Count == 0)
                {
                    break;
                }
            }

            Assert.IsNotNull(postRejectNotifications);
            Assert.IsTrue(postRejectNotifications.Count == 0, "ERROR: Unexpected Number of notifications.");
        }

        /// <summary>
        /// Test for a Player RejectInvitation - GameID not matching partner token TitleID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc RejectInvitation API to verify  RejectInvitation -GameID not matching partner token TitleID .")]
        [TestProperty("Type", "FeatureTests")]
        public void N_RejectInvitation_GameIdNotMatchPartnerTokenTitleID()
        {
            SessionState createSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = createSessionState.GameID;
            inviteRequest.SessionId = createSessionState.SessionID;
            inviteRequest.Data = "BVT_RejectInvitation test data";
            inviteRequest.Recipients = Config.Environment.UserSettings[1].Membername;   // player2

            this.NotificationsServiceProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.NotificationsServiceProxy.Password = Config.Environment.UserSettings[0].Password;
            this.NotificationsServiceProxy.SendInvite(inviteRequest);

            string memberName = Config.Environment.UserSettings[1].Membername;      // player2
            string password = Config.Environment.UserSettings[1].Password;
            List<Notification> preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                10,
                                                                10000);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;   // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            Random rndm = new Random();
            uint RandomGameId = uint.MinValue;

            do
            {
                RandomGameId = (uint)rndm.Next();
            }
            while (uint.Parse(Config.Environment.StsSettings.TitleId) == RandomGameId);

            try
            {
                this.GameSessionProxy.RejectInvitation(RandomGameId.ToString(), createSessionState.SessionID);
                Assert.Fail(string.Format("RejectInvitation should not be allowed for an invalid game ID ({0})", RandomGameId.ToString()));
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDDoesNotMatchPartnerTokenTitleID), restEx.Response);
            }
                       
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\Sessions\ViewSession.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using CloudServices.Test.Common.Configuration;
using Multiplayer.Test.API;
using AsyncMultiplayer.SessionCommon;
using System.Net;
using System.Diagnostics;
using System.Threading;
using LIVEN.Common.Diagnostics;
using CloudServices.Test.Common.Proxy;

namespace MultiPlayer.Test.API
{
    /// <summary>
    /// Test Cases for Sessions.svc ViewSession API
    /// </summary>
    [TestClass]
    public class ViewSession : TestAreaBase
    {
        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            
            LockTest();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            UnlockTest();
        }
        
        
        /// <summary>
        /// BVT test for ViewSession
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("BVT for Sessions.svc ViewSession API.")]
        [TestProperty("Type", "BVTs")]
        public void BVT_ViewSession()
        {
            SessionState createSessionState = null;
            SessionState viewSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      //  player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert createSessionState
            AssertCreateSessionState(creationData, createSessionState);

            viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert viewSessionState
            AssertSessionState(createSessionState, viewSessionState);
            Assert.AreEqual(0, viewSessionState.ActorSeat, "Error: ActorSeat is Wrong");
        }

        /// <summary>
        /// FeatureTest for ViewSession - Verify ViewSession when player is Not Active Player
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("FeatureTest for ViewSession - Verify ViewSession when player is Not Active Player")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ViewSession_NotActivePlayer()
        {
            SessionState createSessionState = null;
            SessionState joinSessionState = null;
            SessionState viewSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      //  player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert createSessionState
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            viewSessionState = this.GameSessionProxy.ViewSession(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());

            //Assert SessionState
            AssertSessionState(joinSessionState, viewSessionState);
        }

        /// <summary>
        /// FeatureTest for ViewSession - Verify ViewSession when player is Not in Session
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("FeatureTest for ViewSession - Verify ViewSession when player is Not in Session")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSession_PlayerNotInSession()
        {
            SessionState createSessionState = null;
            SessionState joinSessionState = null;
            SessionState viewSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      //  player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert createSessionState
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            //TODO: this won't always work, as we hardcode accounts and not all environments have two pre-existing users
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            //ViewSession by Player who is NOT in Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[2].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[2].Password;

            try
            {
                viewSessionState = this.GameSessionProxy.ViewSession(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.UserNotAllowedToGetStateInSession), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for ViewSession - Verify ViewSession - Not Exist SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSession - Verify ViewSession - Not Exist SessionID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSession_NotExistSessionID()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            SessionState viewSessionState = null;

            //Player1 creates Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                viewSessionState = this.GameSessionProxy.ViewSession("j6b048d0-15gd-4i9d-8f65-91bz93s762f5", Constants.TESTGAMEID.ToString());
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for ViewSession - Verify ViewSession - Empty String as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSession - Verify ViewSession - Empty String as SessionID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSession_EmptyStringSessionID()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            SessionState viewSessionState = null;

            //Player1 creates Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                viewSessionState = this.GameSessionProxy.ViewSession(String.Empty, Constants.TESTGAMEID.ToString());
                Assert.Fail("Error: Expected to get Method NOT ALLOWED error but it didn't ");
            }
            catch (RestException restEx)
            {
                //TODO: Currently it's throwing of ContentType: text/html error so GetEventID doesn't work. Update when Bug 4168 is Fixed.
                VerifyException(HttpStatusCode.MethodNotAllowed, restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for ViewSession - Verify ViewSession - Null String as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSession - Verify ViewSession - Null String as SessionID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSession_NullSessionID()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            SessionState viewSessionState = null;

            //Player1 creates Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                viewSessionState = this.GameSessionProxy.ViewSession(null, Constants.TESTGAMEID.ToString());
                Assert.Fail("Error: Expected to get exception METHOD NOT ALLOWED but it didnt");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.MethodNotAllowed, restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for ViewSession - Verify ViewSession - Long String as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSession - Verify ViewSession - Long String as SessionID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSession_GTMaxLengthStringSessionID()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            SessionState viewSessionState = null;

            //Player1 creates Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                viewSessionState = this.GameSessionProxy.ViewSession("ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz012", Constants.TESTGAMEID.ToString());
                Assert.Fail("ViewSession Passed with LongString as SessionID");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for ViewSession - Verify ViewSession - One Char String as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSession - Verify ViewSession - One Char String as SessionID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSession_OneCharStringSessionID()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            SessionState viewSessionState = null;

            //Player1 creates Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                viewSessionState = this.GameSessionProxy.ViewSession("1", Constants.TESTGAMEID.ToString());
                Assert.Fail("ViewSession Passed with OneChar String as SessionID");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }      
               
        /// <summary>
        /// FeatureTest for ViewSession - Verify ViewSession - String.Empty GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSession - Verify ViewSession - String.Empty GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSession_EmptyStringGameID()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            SessionState createSessionState = null;
            SessionState viewSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            try
            {
                viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID, String.Empty);
                Assert.Fail("ViewSession Passed with String.Empty as GameID");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for ViewSession - Verify ViewSession - null GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSession - Verify ViewSession - null GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSession_NullGameID()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            SessionState createSessionState = null;
            SessionState viewSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            try
            {
                viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID, null);
                Assert.Fail("ViewSession Passed with null as GameID");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for ViewSession - Verify ViewSession - LongString GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSession - Verify ViewSession - LongString GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSession_LongStringGameID()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            SessionState createSessionState = null;
            SessionState viewSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            try
            {
                viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID, "4434343298432830284230984302984039284329842384238423842394832943843925721483402370");
                Assert.Fail("ViewSession Passed with Long String as GameID");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidGameIDFormatWhileGettingIdentity), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for ViewSession - Verify ViewSession - One Char String GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSession - Verify ViewSession - One Char String GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSession_OneCharStringGameID()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            SessionState createSessionState = null;
            SessionState viewSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            try
            {
                viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID, "1");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDDoesNotMatchPartnerTokenTitleID), restEx.Response);
            }
        }
        /// <summary>
        /// FeatureTest for ViewSession - Verify ViewSession -  GameID not matching Partner token TitleID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("FeatureTest for ViewSession - Verify ViewSession - GameID not matching Partner token TitleID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSession_GameIdNotMatchPartnerTokenTitleID()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            SessionState createSessionState = null;
            SessionState viewSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            Random rndm = new Random();
            uint RandomGameId = uint.MinValue;

            do
            {
                RandomGameId = (uint)rndm.Next();
            }
            while (uint.Parse(Config.Environment.StsSettings.TitleId) == RandomGameId);

            try
            {
                viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID, RandomGameId.ToString());
                Assert.Fail(string.Format("ViewSession should not be allowed for an invalid game ID ({0})", RandomGameId.ToString()));
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDDoesNotMatchPartnerTokenTitleID), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for ViewSession - Verify ViewSession - Invalid Format GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSession - Verify ViewSession - Invalid Format GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSession_InvalidFormatGameID()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            SessionState createSessionState = null;
            SessionState viewSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            string GameIdRndm = GetInvalidGameId();

            try
            {
                viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID, GameIdRndm);
                Assert.Fail("ViewSession Passed with Long String as GameID");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidGameIDFormatWhileGettingIdentity), restEx.Response);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\Sessions\ModifySession.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using CloudServices.Test.Common.Configuration;
using Multiplayer.Test.API;
using AsyncMultiplayer.SessionCommon;
using System.Net;
using System.Diagnostics;
using System.Threading;
using AsyncMultiplayer.NotificationService;
using LIVEN.Common.Diagnostics;
using System.Runtime.Serialization;
using CloudServices.Test.Common.Proxy;

namespace MultiPlayer.Test.API
{
    /// <summary>
    /// Test Cases for Sessions.svc ModifySession API
    /// </summary>
    [TestClass]
    public class ModifySession : TestAreaBase
    {
        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            
            LockTest();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            UnlockTest();
        }

        /// <summary>
        /// BVT for Sessions.svc ModifySession API
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("BVT for Session.svc ModifySession API.")]
        [TestProperty("Type", "BVTs")]
        public void BVT_ModifySession()
        {
            SessionState createSessionState = null;
            SessionState modifySessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create New Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            //We should have another player JoinSession to verify StateChagne notification as with current implementation
            //when owner modifies session and Sessions service try to send StateChange Notification to other players
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            // Initialize ModificationData
            ModificationData modificationData = InitializeModificationData(createSessionState);

            //Modify Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            this.GameSessionProxy.ModifySession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(), modificationData);

            //View Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      //  player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            modifySessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert SessionState
            AssertModifySessionState(modificationData, createSessionState, modifySessionState);
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify New Owner can ModifySession
        /// Verifies when Owner will LeaveSession and next player assigned as Owner, new Owner can ModifySession
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify New Owner can ModifySession")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ModifySession_NewOwnerModifySession()
        {
            SessionState createSessionState = null;
            SessionState modifySessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create New Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState1 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState1);

            //Player3 JoinSession
            joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 2);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[2].Membername;      // player2;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[2].Password;
            SessionState joinSessionState2= this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(joinSessionState1, joinSessionState2);

            //Player1 LeaveSession
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            this.GameSessionProxy.LeaveSession(joinSessionState2.SessionID.ToString(), joinSessionState2.GameID.ToString());

            //View Session after Leave
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState leaveSessionState = this.GameSessionProxy.ViewSession(joinSessionState2.SessionID.ToString(), joinSessionState2.GameID.ToString());

            //Assert SessionState
            AssertLeaveSessionState(joinSessionState2, leaveSessionState);

            // Initialize ModificationData
            ModificationData modificationData = InitializeModificationData(createSessionState);

            //Modify Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            this.GameSessionProxy.ModifySession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(), modificationData);

            //View Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      //  player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            modifySessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert SessionState
            AssertModifySessionState(modificationData, createSessionState, modifySessionState);
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify Non-Owner can not ModifySession
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify Non-Owner can not ModifySession")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ModifySession_NonOwnerModifySession()
        {
            SessionState createSessionState = null;
            SessionState joinSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create New Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            // Initialize ModificationData
            ModificationData modificationData = InitializeModificationData(joinSessionState);

            //Modify Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            try
            {
                this.GameSessionProxy.ModifySession(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString(), modificationData);
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.UserNotAllowedToModifySession), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify Owner can ModifySession in middle of Game (after players make couple of Moves)
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify Owner can ModifySession in middle of Game (after players make couple of Moves)")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ModifySession_InMiddleOfGame()
        {
            SessionState createSessionState = null;
            SessionState joinSessionState = null;
            SessionState modifySessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create New Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            //Make Move (PutGameState) by Player1
            ModifiableGameState modifiableGameState1 = new ModifiableGameState();
            modifiableGameState1.ActiveSeatIndex = 1;
            modifiableGameState1.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState1);

            //Make Move (PutGameState) by Player2
            ModifiableGameState modifiableGameState2 = new ModifiableGameState();
            modifiableGameState2.ActiveSeatIndex = 0;
            modifiableGameState2.GameData = new byte[] { 60, 61, 62, 63, 64 };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameStateProxy.Password = Config.Environment.UserSettings[1].Password;
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState2);

            // Initialize ModificationData
            ModificationData modificationData = InitializeModificationData(joinSessionState);

            //Modify Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            this.GameSessionProxy.ModifySession(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString(), modificationData);

            //View Session
            modifySessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert SessionState
            AssertModifySessionState(modificationData, joinSessionState, modifySessionState);
       }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify NotExist SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify NotExist SessionID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_NotExistSessionID()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player ModifySession with Not Exist SessionID
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            ModificationData modificationData = InitializeModificationData(createSessionState);

            try
            {
                this.GameSessionProxy.ModifySession("j6b048d0-15gd-4i9d-8f65-91bz93s762f5", createSessionState.GameID.ToString(), modificationData);
            }
            catch (RestException restEx)
            {                
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify String.Empty as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify String.Empty as SessionID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_EmptyStringSessionID()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player ModifySession with Not Exist SessionID
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            ModificationData modificationData = InitializeModificationData(createSessionState);

            try
            {
                this.GameSessionProxy.ModifySession(String.Empty, createSessionState.GameID.ToString(), modificationData);
                Assert.Fail("Error: Expected to get NOT FOUND exception ,it didn't");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.MethodNotAllowed, restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify null as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify null as SessionID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_NullSessionID()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player ModifySession with Not Exist SessionID
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            ModificationData modificationData = InitializeModificationData(createSessionState);

            try
            {
                this.GameSessionProxy.ModifySession(null, createSessionState.GameID.ToString(), modificationData);
                Assert.Fail("Error: Expected to get METHOD NOT ALLOWED exception, it didnt");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.MethodNotAllowed, restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify Long String as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify Long String as SessionID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_GTMaxLengthStringSessionID()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player ModifySession with Not Exist SessionID
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            ModificationData modificationData = InitializeModificationData(createSessionState);

            try
            {
                this.GameSessionProxy.ModifySession("ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz012", createSessionState.GameID.ToString(), modificationData);
            }
            catch (RestException restEx)
            {
                //TODO: Currently it's throwing 500 HTTP code. Filed bug 4167. Update HTTP Status Code if 4167 is Fixed to change the HTTP Status Code
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify One Char as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify One Char String as SessionID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_OneCharStringSessionID()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player ModifySession with Not Exist SessionID
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            ModificationData modificationData = InitializeModificationData(createSessionState);

            try
            {
                this.GameSessionProxy.ModifySession("1", createSessionState.GameID.ToString(), modificationData);
            }
            catch (RestException restEx)
            {
                //TODO: Currently it's throwing 500 HTTP code. Filed bug 4167. Update HTTP Status Code if 4167 is Fixed to change the HTTP Status Code
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }               
              
        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify String.Empty as GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify String.Empty as GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_EmptyStringGameID()
        {
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);


            //ModifySession with GameID as Min of uint
            ModificationData modificationData = InitializeModificationData(createSessionState);

            try
            {
                this.GameSessionProxy.ModifySession(createSessionState.SessionID, String.Empty, modificationData);
            }
            catch (RestException restEx)
            {            
                VerifyException(HttpStatusCode.NotFound, restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify null as GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify null GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_NullGameID()
        {
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);


            //ModifySession with GameID as Min of uint
            ModificationData modificationData = InitializeModificationData(createSessionState);

            try
            {
                this.GameSessionProxy.ModifySession(createSessionState.SessionID, null, modificationData);
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify Invalid Format GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify Long String as GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_InvalidFormatGameID()
        {
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);


            //ModifySession with GameID as Min of uint
            ModificationData modificationData = InitializeModificationData(createSessionState);

            string GameIdRndm = GetInvalidGameId();

            try
            {
                this.GameSessionProxy.ModifySession(createSessionState.SessionID, GameIdRndm, modificationData);
            }
            catch (RestException restEx)
            {              
                //TODO: Currently it's throwing 405 HTTP code with html error message. Filed bug 4168. Update below verification after Bug 4168 is Fixed.
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidGameIDFormatWhileGettingIdentity), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify One Char String as GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify One Char String as GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_OneCharStringGameID()
        {
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);


            //ModifySession with GameID as Min of uint
            ModificationData modificationData = InitializeModificationData(createSessionState);

            try
            {
                this.GameSessionProxy.ModifySession(createSessionState.SessionID, "1", modificationData);
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDDoesNotMatchPartnerTokenTitleID), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify Null ModificationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify Null ModificationData")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_NullModificationData()
        {
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);

            try
            {
                this.GameSessionProxy.ModifySession(createSessionState.SessionID, createSessionState.GameID.ToString(), null);
            }
            catch (NullReferenceException ex)
            {
                Assert.AreEqual("Object reference not set to an instance of an object.", ex.Message, "Did not throw correct exception");
            }
            catch (RestException restEx)
            {
                //VerifyException(400, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDOrVariantIsNotInGMS), restEx.Response);

                //TODO: Currently it's throwing 404 HTTP code with html error message. Filed bug 4168. Update below verification after Bug 4168 is Fixed.
                VerifyException(500, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.UnexpectedExceptionInSessionService), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify Invalid Action for InactivityWarningBehavior.Action in ModificationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify Invalid Action for InactivityWarningBehavior ModificationData")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_ModificationData_InactivityWarning_InvalidAction()
        {
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);


            //ModifySession with Invalid InactivityWarning.Action 
            ModificationData modificationData = InitializeModificationData(createSessionState);

            modificationData.InactivityWarning.Action = (InactivityWarningAction)4;

            try
            {
                this.GameSessionProxy.ModifySession(createSessionState.SessionID, createSessionState.GameID.ToString(), modificationData);
                Assert.Fail("Session is Modified with Invalid Action set to InactivityWarningBehavior.Action");
            }
            catch (SerializationException serialEx)
            {
                string message = serialEx.Message;
            }
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify Interval = 0 for InactivityWarningBehavior.Interval in ModificationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify Interval = 0 for InactivityWarningBehavior.Interval in ModificationData")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ModifySession_ModificationData_InactivityWarning_Interval_Zero()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            //ModifySession with GameID as Min of uint
            ModificationData modificationData = InitializeModificationData(createSessionState);

            modificationData.InactivityWarning.Interval = 0;

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            this.GameSessionProxy.ModifySession(createSessionState.SessionID, createSessionState.GameID.ToString(), modificationData);

            //View Session
            SessionState modifySessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert SessionState
            AssertModifySessionState(modificationData, joinSessionState, modifySessionState);
            Assert.AreEqual(0, modifySessionState.InactivityWarning.Interval, "Session Modified Incorrectly - Interval should set to 0");
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify Interval = -1 for InactivityWarningBehavior.Interval in ModificationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify Interval = -1 for InactivityWarningBehavior.Interval in ModificationData")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_ModificationData_InactivityWarning_Interval_Negative()
        {
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);


            //ModifySession with GameID as Min of uint
            ModificationData modificationData = InitializeModificationData(createSessionState);

            modificationData.InactivityWarning.Interval = -1;

            try
            {
                this.GameSessionProxy.ModifySession(createSessionState.SessionID, createSessionState.GameID.ToString(), modificationData);
                Assert.Fail("Session is Modified with InactivityWarning.Interval set to Negative value");
            }
            catch (RestException restEx)
            {
                string message = restEx.Message;
            }
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify Interval = Int.MinValue for InactivityWarningBehavior.Interval in ModificationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify Interval = Int.MinValue for InactivityWarningBehavior.Interval in ModificationData")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_ModificationData_InactivityWarning_Interval_MinInt()
        {
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);


            //ModifySession with GameID as Min of uint
            ModificationData modificationData = InitializeModificationData(createSessionState);

            modificationData.InactivityWarning.Interval = int.MinValue;

            try
            {
                this.GameSessionProxy.ModifySession(createSessionState.SessionID, createSessionState.GameID.ToString(), modificationData);
                Assert.Fail("Session is Modified with InactivityWarning.Interval set to int.MinValue");
            }
            catch (RestException restEx)
            {
                string message = restEx.Message;
            }
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify Interval = Int.MaxValue for InactivityWarningBehavior.Interval in ModificationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify Interval = Int.MaxValue for InactivityWarningBehavior.Interval in ModificationData")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_ModificationData_InactivityWarning_Interval_MaxInt()
        {
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);


            //ModifySession with GameID as Min of uint
            ModificationData modificationData = InitializeModificationData(createSessionState);

            modificationData.InactivityWarning.Interval = int.MaxValue;

            try
            {
                this.GameSessionProxy.ModifySession(createSessionState.SessionID, createSessionState.GameID.ToString(), modificationData);
                Assert.Fail("Session is Modified with InactivityWarning.Interval set to int.MaxValue");
            }
            catch (RestException restEx)
            {
                string message = restEx.Message;
            }
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify Nudges = 0 for InactivityWarningBehavior.Interval in ModificationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify Nudges = 0 for InactivityWarningBehavior.Interval in ModificationData")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_ModificationData_InactivityWarning_MaxNumberOfNudges_Zero()
        {
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);


            //ModifySession with GameID as Min of uint
            ModificationData modificationData = InitializeModificationData(createSessionState);

            modificationData.InactivityWarning.MaxNumberOfNudges = 0;
            
            //possible to send inactivity warning with no prior nudges sent
            this.GameSessionProxy.ModifySession(createSessionState.SessionID, createSessionState.GameID.ToString(), modificationData);
                
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify Nudges = -1 for InactivityWarningBehavior.Interval in ModificationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify Nudges = -1 for InactivityWarningBehavior.Interval in ModificationData")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_ModificationData_InactivityWarning_MaxNumberOfNudges_Negative()
        {
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);


            //ModifySession with GameID as Min of uint
            ModificationData modificationData = InitializeModificationData(createSessionState);

            modificationData.InactivityWarning.MaxNumberOfNudges = -1;

            try
            {
                this.GameSessionProxy.ModifySession(createSessionState.SessionID, createSessionState.GameID.ToString(), modificationData);
                Assert.Fail("Session is Modified with InactivityWarning.MaxNumberOfNudges set to Negative value");
            }
            catch (RestException restEx)
            {
                string message = restEx.Message;
            }
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify Nudges = Int.MinValue for InactivityWarningBehavior.Interval in ModificationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify Nudges = Int.MinValue for InactivityWarningBehavior.Interval in ModificationData")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_ModificationData_InactivityWarning_MaxNumberOfNudges_MinInt()
        {
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);


            //ModifySession with GameID as Min of uint
            ModificationData modificationData = InitializeModificationData(createSessionState);

            modificationData.InactivityWarning.MaxNumberOfNudges = int.MinValue;

            try
            {
                this.GameSessionProxy.ModifySession(createSessionState.SessionID, createSessionState.GameID.ToString(), modificationData);
                Assert.Fail("Session is Modified with InactivityWarning.MaxNumberOfNudges set to int.MinValue");
            }
            catch (RestException restEx)
            {
                string message = restEx.Message;
            }
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify Nudges = Int.MaxValue for InactivityWarningBehavior.Interval in ModificationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify Nudges = Int.MaxValue for InactivityWarningBehavior.Interval in ModificationData")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_ModificationData_InactivityWarning_MaxNumberOfNudges_MaxInt()
        {
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);


            //ModifySession with GameID as Min of uint
            ModificationData modificationData = InitializeModificationData(createSessionState);

            modificationData.InactivityWarning.MaxNumberOfNudges = int.MaxValue;

            try
            {
                this.GameSessionProxy.ModifySession(createSessionState.SessionID, createSessionState.GameID.ToString(), modificationData);
                Assert.Fail("Session is Modified with InactivityWarning.MaxNumberOfNudges set to int.MaxValue");
            }
            catch (RestException restEx)
            {
                string message = restEx.Message;
            }
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify Set TotalSeats = 0 when Players exist in Session
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify Set TotalSeats = 0 when Players exist in Session")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ModifySession_ModificationData_TotalSeatsAvailable_Zero()
        {
            SessionState createSessionState = null;
            SessionState modifySessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create New Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            //We should have another player JoinSession to verify StateChagne notification as with current implementation
            //when owner modifies session and Sessions service try to send StateChange Notification to other players
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState1 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState1);

            // Initialize ModificationData
            ModificationData modificationData = InitializeModificationData(createSessionState);
            modificationData.TotalSeatsAvailable = 0;
            modificationData.ReservedSeatsAvailable = 0;

            //Modify Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

           
            try
            {
                this.GameSessionProxy.ModifySession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(), modificationData);
                Assert.Fail("Expecting Forbidden as one cant modify session with 0 total seats.");
            }
            catch (RestException ex)
            {                
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidTotalSeatsAvailable), ex.Response);
            }

            //View Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      //  player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            modifySessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 2);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[2].Membername;      // player3;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[2].Password;

            try
            {
                SessionState joinSessionState2 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);
                Assert.Fail("Error: Expected to get FORBIDDEN error but it didnt");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.NoMoreSeatsInSession), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify TotalSeatsAvailable = -1 for in ModificationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify TotalSeatsAvailable = -1 for in ModificationData")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_ModificationData_TotalSeatsAvailable_Negative()
        {
            SessionState createSessionState = null;
            SessionState modifySessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create New Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            //We should have another player JoinSession to verify StateChagne notification as with current implementation
            //when owner modifies session and Sessions service try to send StateChange Notification to other players
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            // Initialize ModificationData
            ModificationData modificationData = InitializeModificationData(createSessionState);
            modificationData.TotalSeatsAvailable = -1;
            modificationData.ReservedSeatsAvailable = -1;

            //Modify Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                this.GameSessionProxy.ModifySession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(), modificationData);
            }
            catch (RestException restEx)
            {
                string msg = restEx.Message;
            }

            //View Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      //  player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            modifySessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //TODO: Need to update after Bug 3674 is Fixed

            //Assert SessionState
            //AssertModifySessionState(modificationData, createSessionState, modifySessionState);
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify TotalSeatsAvailable = int.MinValue for in ModificationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify TotalSeatsAvailable = int.MinValue for in ModificationData")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_ModificationData_TotalSeatsAvailable_MinInt()
        {
            SessionState createSessionState = null;
            SessionState modifySessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create New Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            //We should have another player JoinSession to verify StateChagne notification as with current implementation
            //when owner modifies session and Sessions service try to send StateChange Notification to other players
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            // Initialize ModificationData
            ModificationData modificationData = InitializeModificationData(createSessionState);
            modificationData.TotalSeatsAvailable = int.MinValue;
            modificationData.ReservedSeatsAvailable = int.MinValue;

            //Modify Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                this.GameSessionProxy.ModifySession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(), modificationData);
            }
            catch (RestException restEx)
            {
                string msg = restEx.Message;
            }

            //View Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      //  player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            modifySessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //TODO: Need to update after Bug 3674 is Fixed

            //Assert SessionState
            //AssertModifySessionState(modificationData, createSessionState, modifySessionState);
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify TotalSeatsAvailable = int.MaxValue for in ModificationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify TotalSeatsAvailable = int.MaxValue for in ModificationData")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_ModificationData_TotalSeatsAvailable_MaxInt()
        {
            SessionState createSessionState = null;
            SessionState modifySessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create New Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            //We should have another player JoinSession to verify StateChagne notification as with current implementation
            //when owner modifies session and Sessions service try to send StateChange Notification to other players
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            // Initialize ModificationData
            ModificationData modificationData = InitializeModificationData(createSessionState);
            modificationData.TotalSeatsAvailable = int.MaxValue;
            modificationData.ReservedSeatsAvailable = int.MaxValue;

            //Modify Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                this.GameSessionProxy.ModifySession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(), modificationData);
            }
            catch (RestException restEx)
            {
                string msg = restEx.Message;
            }

            //View Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      //  player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            modifySessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //TODO: Need to update after Bug 3674 is Fixed

            //Assert SessionState
            //AssertModifySessionState(modificationData, createSessionState, modifySessionState);
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify Set ReservedSeats = 0 when Players exist in Session
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify Set ReservedSeats = 0 when Players exist in Session")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ModifySession_ModificationData_ReservedSeatsAvailable_Zero()
        {
            SessionState createSessionState = null;
            SessionState modifySessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create New Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            //We should have another player JoinSession to verify StateChagne notification as with current implementation
            //when owner modifies session and Sessions service try to send StateChange Notification to other players
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState1 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState1);

            // Initialize ModificationData
            ModificationData modificationData = InitializeModificationData(createSessionState);
            modificationData.ReservedSeatsAvailable = 0;

            //Modify Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            this.GameSessionProxy.ModifySession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(), modificationData);

            //View Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      //  player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            modifySessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 2);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[2].Membername;      // player3;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[2].Password;

            //TODO: Update this when Bug 4595 fixed
            try
            {
                SessionState joinSessionState2 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.NoMoreSeatsInSession), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify ReservedSeatsAvailable = -1 for in ModificationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify ReservedSeatsAvailable = -1 for in ModificationData")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_ModificationData_ReservedSeatsAvailable_Negative()
        {
            SessionState createSessionState = null;
            SessionState modifySessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create New Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            //We should have another player JoinSession to verify StateChagne notification as with current implementation
            //when owner modifies session and Sessions service try to send StateChange Notification to other players
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            // Initialize ModificationData
            ModificationData modificationData = InitializeModificationData(createSessionState);
            modificationData.TotalSeatsAvailable = -1;
            modificationData.ReservedSeatsAvailable = -1;

            //Modify Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                this.GameSessionProxy.ModifySession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(), modificationData);
            }
            catch (RestException restEx)
            {
                string msg = restEx.Message;
            }

            //View Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      //  player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            modifySessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //TODO: Need to update after Bug 3674 is Fixed

            //Assert SessionState
            //AssertModifySessionState(modificationData, createSessionState, modifySessionState);
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify ReservedSeatsAvailable = int.MinValue for in ModificationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify ReservedSeatsAvailable = int.MinValue for in ModificationData")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_ModificationData_ReservedSeatsAvailable_MinInt()
        {
            SessionState createSessionState = null;
            SessionState modifySessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create New Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            //We should have another player JoinSession to verify StateChagne notification as with current implementation
            //when owner modifies session and Sessions service try to send StateChange Notification to other players
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            // Initialize ModificationData
            ModificationData modificationData = InitializeModificationData(createSessionState);
            modificationData.TotalSeatsAvailable = -1;
            modificationData.ReservedSeatsAvailable = int.MinValue;

            //Modify Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                this.GameSessionProxy.ModifySession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(), modificationData);
            }
            catch (RestException restEx)
            {
                string msg = restEx.Message;
            }

            //View Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      //  player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            modifySessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //TODO: Need to update after Bug 3674 is Fixed

            //Assert SessionState
            //AssertModifySessionState(modificationData, createSessionState, modifySessionState);
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify ReservedSeatsAvailable = int.MaxValue for in ModificationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify ReservedSeatsAvailable = int.MaxValue for in ModificationData")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_ModificationData_ReservedSeatsAvailable_MaxInt()
        {
            SessionState createSessionState = null;
            SessionState modifySessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create New Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            //We should have another player JoinSession to verify StateChagne notification as with current implementation
            //when owner modifies session and Sessions service try to send StateChange Notification to other players
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            // Initialize ModificationData
            ModificationData modificationData = InitializeModificationData(createSessionState);
            modificationData.TotalSeatsAvailable = -1;
            modificationData.ReservedSeatsAvailable = int.MaxValue;

            //Modify Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                this.GameSessionProxy.ModifySession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(), modificationData);
            }
            catch (RestException restEx)
            {
                string msg = restEx.Message;
            }

            //View Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      //  player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            modifySessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //TODO: Need to update after Bug 3674 is Fixed

            //Assert SessionState
            //AssertModifySessionState(modificationData, createSessionState, modifySessionState);
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify Exception when Partner token TitleID not match GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify Exception when Partner token TitleID not match GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_GameIdNotMatchPartnerTokenTitleID()
        {
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);


            //ModifySession with GameID  not matching Partner Token TiteID
            ModificationData modificationData = InitializeModificationData(createSessionState);

            Random rndm = new Random();
            uint RandomGameId = uint.MinValue;

            do
            {
                RandomGameId = (uint)rndm.Next();
            }
            while (uint.Parse(Config.Environment.StsSettings.TitleId) == RandomGameId);

            try
            {
                this.GameSessionProxy.ModifySession(createSessionState.SessionID, RandomGameId.ToString(), modificationData);
                Assert.Fail(string.Format("ModifySession should not be allowed for an invalid game ID ({0})", RandomGameId.ToString()));
            }
            catch (RestException restEx)
            {
                //TODO: It's incorrently throwing 500 Internal Server exception. Bug 4201 is filed. Update this when Bug 4201 is Fixed
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDDoesNotMatchPartnerTokenTitleID), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify SessionParametrs lengths is less than 64k in ModificationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify SessionParametrs lengths is less than 64k in ModificationData")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_ModificationData_SessionParametersGreaterThan64K()
        {
            SessionState createSessionState = null;
          
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create New Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);
            
            //join session by player2
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            // Initialize ModificationData
            ModificationData modificationData = InitializeModificationData(createSessionState);

            //create bytes > 64k for SessionParameters
            modificationData.SessionParameters = GenerateRandomBytes(64 * 1024 + 1);

            //Modify Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                this.GameSessionProxy.ModifySession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(), modificationData);
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionParametersTooLongInModifySession), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify SessionParametrs lengths equals 64k in ModificationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify SessionParametrs lengths equals 64k in ModificationData")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ModifySession_ModificationData_SessionParametersEqualTo64K()
        {
            SessionState createSessionState = null;
            SessionState modifySessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create New Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            //join session by player2
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            // Initialize ModificationData
            ModificationData modificationData = InitializeModificationData(createSessionState);

            //create bytes > 64k for SessionParameters
            modificationData.SessionParameters = GenerateRandomBytes(64 * 1024 -1);

            //Modify Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            this.GameSessionProxy.ModifySession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(), modificationData);

            //View Session
            modifySessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert SessionState
            AssertModifySessionState(modificationData, createSessionState, modifySessionState);
               
        }

        
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\Sessions\ViewSessionSummaries.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using CloudServices.Test.Common.Configuration;
using Multiplayer.Test.API;
using AsyncMultiplayer.SessionCommon;
using System.Net;
using System.Diagnostics;
using System.Threading;
using CloudServices.Test.Common.Proxy;
using LIVEN.Common.Diagnostics;

namespace MultiPlayer.Test.API
{
    /// <summary>
    /// Test Cases for Sessions.svc ViewSessionSummaries API
    /// </summary>
    [TestClass]
    public class ViewSessionSummaries : TestAreaBase
    {
        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            
            LockTest();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            UnlockTest();
        }


        /// <summary>
        /// BVT test for ViewSessionSummaries
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("BVT for Game Session ViewSessionSummaries API.")]
        [TestProperty("Type", "BVTs")]
        public void BVT_ViewSessionSummaries()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, new InactivityWarningBehavior(), true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            //ViewSessionSummaries
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), String.Empty, String.Empty, "10", ShowSessionType.Active.ToString());

            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
            Assert.IsTrue(sessionEntries.Count() > 0, "ERROR: VeiwSessionSummariesInXml did not return any Sessions.");
        }

        /// <summary>
        /// Feature Test for ViewSessionSummaries - All Params as Null
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Game Session ViewSessionSummaries API - All Params as Null.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ViewSessionSummaries_NullParams()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            //ViewSessionSummaries
            
            try
            {
                sessionEntries = this.GameSessionProxy.ViewSessionSummaries(null, null, null, null, null, null);
                Assert.Fail("Expecting Forbidden but it didnt get one.");
            }
            catch (RestException ex)
            {                
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDIsNullOrEmpty), ex.Response);
            }

            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
            Assert.IsTrue(sessionEntries.Count() > 0, "ERROR: VeiwSessionSummariesInXml did not return any Sessions.");
        }

        /// <summary>
        /// Feature Test for ViewSessionSummaries - GameID param
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Game Session ViewSessionSummaries API - GameID param.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ViewSessionSummaries_GameID()
        {
            SessionState createSessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            //ViewSessionSummaries
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(createSessionState.GameID.ToString(), null, null, null, null, null);

            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
            Assert.IsTrue(sessionEntries.Count() > 0, "ERROR: VeiwSessionSummariesInXml did not return any Sessions.");
        }

        /// <summary>
        /// Feature Test for ViewSessionSummaries - GameID & Variant params
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Game Session ViewSessionSummaries API - GameID & Variant params.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ViewSessionSummaries_GameIDVariant()
        {
            SessionState createSessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            //ViewSessionSummaries
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(createSessionState.GameID.ToString(), createSessionState.Variant.ToString(), null, null, null, null);

            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
            Assert.IsTrue(sessionEntries.Count() > 0, "ERROR: VeiwSessionSummariesInXml did not return any Sessions.");
        }

        /// <summary>
        /// Feature Test for ViewSessionSummaries - GameID & SessionType param
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Game Session ViewSessionSummaries API - GameID & SessionType param.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ViewSessionSummaries_GameIDSessionType()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            //ViewSessionSummaries
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), null, null, null, null, ShowSessionType.Active.ToString());

            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
            Assert.IsTrue(sessionEntries.Count() > 0, "ERROR: VeiwSessionSummariesInXml did not return any Sessions.");
        }

        /// <summary>
        /// Feature Test for ViewSessionSummaries - GameID, Variant & SessionType param
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Game Session ViewSessionSummaries API - GameID, Variant & SessionType param.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ViewSessionSummaries_GameIDVariantSessionType()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            //ViewSessionSummaries
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), null, null, null, ShowSessionType.Active.ToString());

            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
            Assert.IsTrue(sessionEntries.Count() > 0, "ERROR: VeiwSessionSummariesInXml did not return any Sessions.");
        }

        /// <summary>
        /// Feature Test for ViewSessionSummaries - MaxSessions param
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Game Session ViewSessionSummaries API - MaxSessions param.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ViewSessionSummaries_MaxSessions()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            try
            {
                //ViewSessionSummaries
                sessionEntries = this.GameSessionProxy.ViewSessionSummaries(null, null, null, null, "10", null);
            }
            catch (RestException rx)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDIsNullOrEmpty), rx.Response);
            }

            //COmmenting out this due to new behavior of viewsession.
            //Assert SessionEntries
            //Assert.IsNotNull(sessionEntries);
            //Assert.IsTrue(sessionEntries.Count() > 0, "ERROR: VeiwSessionSummariesInXml did not return any Sessions.");
        }

        /// <summary>
        /// Feature Test for ViewSessionSummaries - GameID & MaxSessions params
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Game Session ViewSessionSummaries API - GameID & MaxSessions params.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ViewSessionSummaries_GameIDMaxSessions()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            //ViewSessionSummaries
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), null, null, null, "10", null);

            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
            Assert.IsTrue(sessionEntries.Count() > 0, "ERROR: VeiwSessionSummariesInXml did not return any Sessions.");
        }

        /// <summary>
        /// Feature Test for ViewSessionSummaries - GameID, Variant & MaxSessions params
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Game Session ViewSessionSummaries API - GameID, Variant & MaxSessions params.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ViewSessionSummaries_GameIDVariantMaxSessions()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            //ViewSessionSummaries
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), null, null, "10", null);

            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
            Assert.IsTrue(sessionEntries.Count() > 0, "ERROR: VeiwSessionSummariesInXml did not return any Sessions.");
        }

        /// <summary>
        /// Feature Test for ViewSessionSummaries - GameID, Variant, SessionType & MaxSessions params
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Game Session ViewSessionSummaries API - GameID, Variant, SessionType & MaxSessions params.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ViewSessionSummaries_GameIDVariantMaxSessionsSessionType()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            //ViewSessionSummaries
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), null, null, "10", ShowSessionType.Active.ToString());

            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
            Assert.IsTrue(sessionEntries.Count() > 0, "ERROR: VeiwSessionSummariesInXml did not return any Sessions.");
        }

        /// <summary>
        /// Feature Test for ViewSessionSummaries - lastSessionID & lastGameID params
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Game Session ViewSessionSummaries API - lastSessionID & lastGameID params.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ViewSessionSummaries_lastSessionIDlastGameID()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            //ViewSessionSummaries
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), null, sessionState.SessionID, sessionState.GameID.ToString(), null, null);

            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
            Assert.IsTrue(sessionEntries.Count() > 0, "ERROR: VeiwSessionSummariesInXml did not return any Sessions.");
        }

        /// <summary>
        /// Feature Test for ViewSessionSummaries - GameID, lastSessionID & lastGameID params
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Game Session ViewSessionSummaries API - GameID, lastSessionID & lastGameID params.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ViewSessionSummaries_GameIDlastSessionIDlastGameID()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            //ViewSessionSummaries
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), null, sessionState.SessionID, sessionState.GameID.ToString(), null, null);

            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
            Assert.IsTrue(sessionEntries.Count() > 0, "ERROR: VeiwSessionSummariesInXml did not return any Sessions.");
        }

        /// <summary>
        /// Feature Test for ViewSessionSummaries - GameID, Variant, lastSessionID & lastGameID params
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Game Session ViewSessionSummaries API - GameID, Variant, lastSessionID & lastGameID params.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ViewSessionSummaries_GameIDVariantlastSessionIDlastGameID()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            //ViewSessionSummaries
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), sessionState.SessionID, sessionState.GameID.ToString(), null, null);

            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
            Assert.IsTrue(sessionEntries.Count() > 0, "ERROR: VeiwSessionSummariesInXml did not return any Sessions.");
        }

        /// <summary>
        /// Feature Test for ViewSessionSummaries - GameID, Variant, SessionType, lastSessionID & lastGameID params
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Game Session ViewSessionSummaries API - GameID, Variant, SessionType, lastSessionID & lastGameID params.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ViewSessionSummaries_GameIDVariantlastSessionIDlastGameIDSessionType()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            //ViewSessionSummaries
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), sessionState.SessionID, sessionState.GameID.ToString(), null, ShowSessionType.Active.ToString());

            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
            Assert.IsTrue(sessionEntries.Count() > 0, "ERROR: VeiwSessionSummariesInXml did not return any Sessions.");
        }

        /// <summary>
        /// Feature Test for ViewSessionSummaries - Player Not in Session
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Game Session ViewSessionSummaries API - Player Not in Session.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_PlayerNotInSession()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            //ViewSessionSummaries by Player Not in Session
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;   //player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), String.Empty, String.Empty, "10", ShowSessionType.Active.ToString());

            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
            Assert.IsTrue(sessionEntries.Count() > 0, "ERROR: VeiwSessionSummariesInXml did not return any Sessions.");
        }

        //related bug 5861
        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that veiw session summaries filters sessions by session type")]
        [TestProperty("Type", "Features")]
        public void P_ViewSessionSummaries_SessionType()
        {
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, new InactivityWarningBehavior(), true, "TestGame");
            SessionState sessionState1 = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            SessionState sessionState2 = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            AssertCreateSessionState(creationData, sessionState1);
            AssertCreateSessionState(creationData, sessionState2);

            JoinData joinData1 = InitializeJoinData(sessionState1.GameID, sessionState1.SessionID, 1);
            JoinData joinData2 = InitializeJoinData(sessionState2.GameID, sessionState2.SessionID, 1);
            this.GameSessionProxy.JoinSession(sessionState1.SessionID, joinData1, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            this.GameSessionProxy.JoinSession(sessionState2.SessionID, joinData2, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            this.GameStateProxy.PostGameEnd(sessionState1.SessionID, sessionState1.GameID.ToString(), TestAreaBase.GetDefaultTwoPlayerGameResult(sessionState1.GameID.ToString(), (uint)sessionState1.Variant), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);

            Thread.Sleep(20000);

            SessionEntry[] activeSessionEntries = this.GameSessionProxy.ViewSessionSummaries(Constants.TESTGAMEID.ToString(), String.Empty, String.Empty, String.Empty, "1000", ShowSessionType.Active.ToString(), Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            SessionEntry[] closedSessionEntries = this.GameSessionProxy.ViewSessionSummaries(Constants.TESTGAMEID.ToString(), String.Empty, String.Empty, String.Empty, "1000", ShowSessionType.InActive.ToString(), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            Assert.IsNotNull(activeSessionEntries);
            Assert.IsNotNull(closedSessionEntries);

            bool foundClosedSession = false;
            bool foundActiveSession = false;
            foreach (SessionEntry sessionEntry in closedSessionEntries)
            {
                Assert.AreEqual(true, sessionEntry.IsComplete, "Error: Found a session that is Active. Expected all the sessions in the list to be closed.");
                if (sessionEntry.SessionID == sessionState1.SessionID)
                    foundClosedSession = true;
                if (sessionEntry.SessionID == sessionState2.SessionID)
                    foundActiveSession = true;
            }
            Assert.AreEqual(false, foundActiveSession, "Active session found in the non-active session list.");
            //Note: It is possible that test might fail here if the user has more than 1000 sessions that are closed and the session that we are looking for is not in the 1000 list. 
            //(However it is less likely that the user will have that many sessions since we garbage collect sessions.)
            Assert.AreEqual(true, foundClosedSession, "Completed session not found in the non-active session list.");

            foundClosedSession = false;
            foundActiveSession = false;
            foreach (SessionEntry sessionEntry in activeSessionEntries)
            {
                Assert.AreEqual(false, sessionEntry.IsComplete, "Error: Found a session that is complete. Expected all the sessions to be active.");
                if (sessionEntry.SessionID == sessionState1.SessionID)
                    foundClosedSession = true;
                if (sessionEntry.SessionID == sessionState2.SessionID)
                    foundActiveSession = true;
            }
            Assert.AreEqual(false, foundClosedSession, "Completed session found in the active session list.");
            //Note: It is possible that test might fail here if the user has more than 1000 sessions that are active and the session that we are looking for is not in the 1000 list. 
            //(However it is less likely that the user will have that many sessions since we garbage collect sessions.)
            Assert.AreEqual(true, foundActiveSession, "Active session not found in the active session list.");
        }

        //related bug 5129
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify that we get a bad request for if session number exceeds max allowed number of sessions.")]
        [TestProperty("Type", "Features")]
        public void N_ViewSessionSummaries_MaxPlus1SessionNumber()
        {
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, new InactivityWarningBehavior(), true, "TestGame");
            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            AssertCreateSessionState(creationData, sessionState);

            try
            {
                this.GameSessionProxy.ViewSessionSummaries(Constants.TESTGAMEID.ToString(), String.Empty, String.Empty, String.Empty, "1001", ShowSessionType.Active.ToString(), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
                Assert.Fail("Expected a Bad Resquest as the max allowed session number is exceeded.");
            }
            catch (RestException ex)
            {
                VerifyException(400, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidMaxSessionsParam), ex.Response);
            }
        }

        //related bug 5129
        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that default number of sessions is 100.")]
        [TestProperty("Type", "Features")]
        public void P_ViewSessionSummaries_DefaultSessionNumber()
        {
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, new InactivityWarningBehavior(), true, "TestGame");
            SessionState sessionState;
            for (int i = 0; i < 25; i++)
            {
                sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
                AssertCreateSessionState(creationData, sessionState);
            }
            SessionEntry[] sessionEntries = this.GameSessionProxy.ViewSessionSummaries(Constants.TESTGAMEID.ToString(), String.Empty, String.Empty, String.Empty, "", ShowSessionType.All.ToString(), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            Assert.IsNotNull(sessionEntries);
            Assert.AreEqual(20, sessionEntries.Length, "Error: Incorrect default number of sessions!");
        }

        //this test takes about 20 minutes
        //related bug 5129
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify that we can get summary of 1000 sessions in a single call.")]
        [TestProperty("Type", "Features")]
        public void P_ViewSessionSummaries_MaxSessionNumber()
        {
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, new InactivityWarningBehavior(), true, "TestGame");
            SessionState sessionState;
            for (int i = 0; i < 1010; i++)
            {
                sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
                AssertCreateSessionState(creationData, sessionState);
            }
            SessionEntry[] sessionEntries = this.GameSessionProxy.ViewSessionSummaries(Constants.TESTGAMEID.ToString(), String.Empty, String.Empty, String.Empty, "1000", ShowSessionType.All.ToString(), Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            Assert.IsNotNull(sessionEntries);
            Assert.AreEqual(1000, sessionEntries.Length, "Error: Incorrect default number of sessions!");
        }

        /// <summary>
        /// Feature Test for ViewSessionSummaries - lastSessionID with No lastGameID
        /// We are no more reading last game ID. 
        /// </summary>
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Feature Test for Game Session ViewSessionSummaries API - lastSessionID with No lastGameID.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ViewSessionSummaries_lastGameIDDoesNotMatter()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            //ViewSessionSummaries
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), sessionState.SessionID, Constants.ALTERNATE_TESTGAMEID.ToString(), "10", ShowSessionType.Active.ToString());
            Assert.IsNotNull(sessionEntries);
            Assert.IsTrue(sessionEntries.Count() > 0, "ERROR: VeiwSessionSummariesInXml did not return any Sessions.");
        }

        /// <summary>
        /// Feature Test for ViewSessionSummaries - Variant with No GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Game Session ViewSessionSummaries API - Variant with No GameID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_Variant_NoGameID()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            try
            {
                //ViewSessionSummaries
                sessionEntries = this.GameSessionProxy.ViewSessionSummaries(null, sessionState.Variant.ToString(), String.Empty, String.Empty, "10", ShowSessionType.Active.ToString());
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDIsNullOrEmpty), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - Min of uint as GameID
        /// </summary>
        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - Min of uint as GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_MismatchedGameIDAndTitleId_ValidGameId()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);
            string gameId = GetGameIdOtherThanTitleId();
            try
            {
                //ViewSessionSummaries
                sessionEntries = this.GameSessionProxy.ViewSessionSummaries(gameId, sessionState.Variant.ToString(), String.Empty, String.Empty, "10", ShowSessionType.Active.ToString());
                Assert.Fail("Expected unauthorized for a gameId = "+ gameId + "Which is different from Title Id = " + Constants.TESTGAMEID);
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDDoesNotMatchPartnerTokenTitleID), restEx.Response);
            }
        }

        //Bug - 6461 - GSS: GameId - TitleId mismatch - unauthorized with invalid format error message.
        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - Min of uint as GameID
        /// </summary>
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - Min of uint as GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_MismatchedGameIDAndTitleId_InvalidGameId()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);
            string gameId = GetInvalidGameId();
            try
            {
                //ViewSessionSummaries
                sessionEntries = this.GameSessionProxy.ViewSessionSummaries(gameId, sessionState.Variant.ToString(), String.Empty, String.Empty, "10", ShowSessionType.Active.ToString());
                Assert.Fail("Expected unauthorized for a gameId = " + gameId + "Which is different from Title Id = " + Constants.TESTGAMEID);
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidGameIDFormatWhileGettingIdentity), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - String.Empty GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - String.Empty GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_EmptyStringGameID()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            try
            {
                //ViewSessionSummaries
                sessionEntries = this.GameSessionProxy.ViewSessionSummaries(String.Empty, sessionState.Variant.ToString(), String.Empty, String.Empty, "10", ShowSessionType.Active.ToString());
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDIsNullOrEmpty), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - null GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - null GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_NullGameID()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            try
            {
                //ViewSessionSummaries
                sessionEntries = this.GameSessionProxy.ViewSessionSummaries(null, sessionState.Variant.ToString(), String.Empty, String.Empty, "10", ShowSessionType.Active.ToString());
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDIsNullOrEmpty), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - Min of int as Variant
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - Min of int as Variant")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_MinVariant()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            //ViewSessionSummaries
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), int.MinValue.ToString(), String.Empty, String.Empty, "10", ShowSessionType.Active.ToString());

            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
        }

        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - Max of int as Variant
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - Max of int as Variant")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_MaxVariant()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            //ViewSessionSummaries
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), int.MaxValue.ToString(), String.Empty, String.Empty, "10", ShowSessionType.Active.ToString());

            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
        }

        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - String.Empty Variant
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - String.Empty Variant")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_EmptyStringVariant()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            //ViewSessionSummaries
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), String.Empty, String.Empty, String.Empty, "10", ShowSessionType.Active.ToString());

            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
            Assert.IsTrue(sessionEntries.Count() > 0, "ERROR: VeiwSessionSummariesInXml did not return any Sessions.");
        }

        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - LongString Variant
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - LongString Variant")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_LongStringVariant()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            try
            {
                //ViewSessionSummaries
                sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), "4434343298432830284230984302984039284329842384238423842394832943843925721483402370", String.Empty, String.Empty, "10", ShowSessionType.Active.ToString());
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidVariantFormatOnValidateQueryParams), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - One Char String Variant
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - One Char String Variant")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_OneCharStringVariant()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            //ViewSessionSummaries
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), "4", String.Empty, String.Empty, "10", ShowSessionType.Active.ToString());

            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
        }

        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - Not Exist lastSessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - Not Exist lastSessionID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_NotExist_lastSessionID()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            try
            {
                //ViewSessionSummaries
                sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), "j6b048d0-15gd-4i9d-8f65-91bz93s762f5", sessionState.GameID.ToString(), "10", ShowSessionType.Active.ToString());
            }
            catch (RestException restEx)
            {
                string msg = restEx.Message;
            }
        }

        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - LongString lastSessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - LongString lastSessionID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_LongString_lastSessionID()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            try
            {
                //ViewSessionSummaries
                sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz012", sessionState.GameID.ToString(), "10", ShowSessionType.Active.ToString());
            }
            catch (RestException restEx)
            {
                string msg = restEx.Message;
            }
        }

        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - One Char String lastSessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - One Char String lastSessionID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_OneCharString_lastSessionID()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            try
            {
                //ViewSessionSummaries
                sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), "a", sessionState.GameID.ToString(), "10", ShowSessionType.Active.ToString());
            }
            catch (RestException restEx)
            {
                string msg = restEx.Message;
            }
        }

        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - Min of int as MaxSessions
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - Min of int as MaxSessions")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_MaxSessions_MinInt()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            try
            {
                //ViewSessionSummaries
                sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), String.Empty, String.Empty, int.MinValue.ToString(), ShowSessionType.Active.ToString());
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidMaxSessionsParam), restEx.Response);
            }

        }

        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - Max of int as MaxSessions
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - Max of int as MaxSessions")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_MaxSessions_MaxInt()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            //ViewSessionSummaries
            try
            {
                sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), String.Empty, String.Empty, int.MaxValue.ToString(), ShowSessionType.Active.ToString());
                Assert.Fail("Error: Expected to get BAD REQUEST as maxSession can't be int/MaxValue");
            }
            catch (RestException rx)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidMaxSessionsParam), rx.Response);
            }
            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
            Assert.IsTrue(sessionEntries.Count() > 0, "ERROR: VeiwSessionSummariesInXml did not return any Sessions.");
        }

        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - 0 as MaxSessions
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - 0 as MaxSessions")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_MaxSessions_Zero()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            try
            {
                //ViewSessionSummaries
                sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), String.Empty, String.Empty, "0", ShowSessionType.Active.ToString());
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidMaxSessionsParam), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - String.Empty as MaxSessions
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - String.Empty as MaxSessions")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_MaxSessions_EmptyString()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            //ViewSessionSummaries
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), String.Empty, String.Empty, String.Empty, ShowSessionType.Active.ToString());

            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
            Assert.IsTrue(sessionEntries.Count() > 0, "ERROR: VeiwSessionSummariesInXml did not return any Sessions.");
        }

        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - LongString as MaxSessions
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - LongString as MaxSessions")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_MaxSessions_LongString()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            try
            {
                //ViewSessionSummaries
                sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), String.Empty, String.Empty, "1043453453454353453534534543536768978907906735423423", ShowSessionType.Active.ToString());
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidMaxSessionsParam), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - One Char String as MaxSessions
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - One Char String as MaxSessions")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_MaxSessions_OneCharString()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            //ViewSessionSummaries
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), String.Empty, String.Empty, "1", ShowSessionType.Active.ToString());

            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
            Assert.IsTrue(sessionEntries.Count() > 0, "ERROR: VeiwSessionSummariesInXml did not return any Sessions.");
        }

        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - Not Exist ShowSessionType
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - Not Exist ShowSessionType")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_ShowSessionType_NotExist()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            try
            {
                //ViewSessionSummaries
                sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), String.Empty, String.Empty, "10", "junk");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidShowSessionTypeParam), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - String.Empty as ShowSessionType
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - String.Empty as ShowSessionType")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_ShowSessionType_EmptyString()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            //ViewSessionSummaries
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), String.Empty, String.Empty, "10", String.Empty);

            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
            Assert.IsTrue(sessionEntries.Count() > 0, "ERROR: VeiwSessionSummariesInXml did not return any Sessions.");
        }

        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - LongString as ShowSessionType
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - LongString as ShowSessionType")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_ShowSessionType_LongString()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            try
            {
                //ViewSessionSummaries
                sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), String.Empty, String.Empty, "10", "junkjsdhfjfh43943fjfklewjfkljfklsdjfsdfhsdfjksljdjfwlejrlwejrwlerjwlerjwlerjwelrmvsdoifu0qwu49");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidShowSessionTypeParam), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - One Char String as ShowSessionType
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - One Char String as ShowSessionType")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_ShowSessionType_OneCharString()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            try
            {
                //ViewSessionSummaries
                sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), String.Empty, String.Empty, "10", "j");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidShowSessionTypeParam), restEx.Response);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Games\SilverlightTicTacToe\App.xaml.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Shapes;

namespace SilverlightTicTacToe
{
    public partial class App : Application
    {

        public App()
        {
            this.Startup += this.Application_Startup;
            this.Exit += this.Application_Exit;
            this.UnhandledException += this.Application_UnhandledException;

            InitializeComponent();
        }

        private void Application_Startup(object sender, StartupEventArgs e)
        {
            this.RootVisual = new MainPage();
        }

        private void Application_Exit(object sender, EventArgs e)
        {

        }
        private void Application_UnhandledException(object sender, ApplicationUnhandledExceptionEventArgs e)
        {
            // If the app is running outside of the debugger then report the exception using
            // the browser's exception mechanism. On IE this will display it a yellow alert 
            // icon in the status bar and Firefox will display a script error.
            if (!System.Diagnostics.Debugger.IsAttached)
            {

                // NOTE: This will allow the application to continue running after an exception has been thrown
                // but not handled. 
                // For production applications this error handling should be replaced with something that will 
                // report the error to the website and stop the application.
                e.Handled = true;
                Deployment.Current.Dispatcher.BeginInvoke(delegate { ReportErrorToDOM(e); });
            }
        }
        private void ReportErrorToDOM(ApplicationUnhandledExceptionEventArgs e)
        {
            try
            {
                string errorMsg = e.ExceptionObject.Message + e.ExceptionObject.StackTrace;
                errorMsg = errorMsg.Replace('"', '\'').Replace("\r\n", @"\n");

                System.Windows.Browser.HtmlPage.Window.Eval("throw new Error(\"Unhandled Error in Silverlight Application " + errorMsg + "\");");
            }
            catch (Exception)
            {
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Games\SilverlightTicTacToe\MainPage.xaml.cs ===
﻿using System;
using System.Globalization;
using System.Net;
using System.Windows;
using System.Windows.Browser;
using System.Windows.Controls;
using System.Windows.Shapes;
using System.Windows.Threading;
using AsyncMultiplayer.GameSessionProxy;
using AsyncMultiplayer.SessionCommon;

namespace SilverlightTicTacToe
{
    public partial class MainPage : UserControl
	{
        /// <summary>
        /// The test game's unique ID
        /// </summary>
        private const uint TESTGAMEID = 7777;


        //private static Uri _gameSessionService = new Uri("http://sessions.xboxlive.com/sessions.svc");
        //private static Uri _gameStateService = new Uri("http://sessions.xboxlive.com/GameState.svc");
        
        /// <summary>
        /// The URI for a valid Game Session service -- change this to test against other environments
        /// </summary>
        private static Uri _gameSessionService = new Uri("http://sessions.storax.xbox.com/sessions.svc");
        
        /// <summary>
        /// URI for the game state service
        /// </summary>
        private static Uri _gameStateService = new Uri("http://sessions.storax.xbox.com/GameState.svc");

        /// <summary>
        /// contains all the tic tac toe logic
        /// </summary>
        private TicTacToeGame _ttt;

        private bool _myTurn;
        private bool _hasOpponent;
        private Tick _player = Tick.Empty;
        private DispatcherTimer _refreshTimer;

        public MainPage()
        {
            // Required to initialize variables
            InitializeComponent();
            _ttt = new TicTacToeGame();
        }

        /// <summary>
        /// Initiate the main objects used for the game
        /// </summary>
        /// <param name="sender">Parent object that triggered this event</param>
        /// <param name="e">Event arguments</param>
        private void OnPageLoaded(object sender, RoutedEventArgs e)
        {
            // This line allows the GamePlayer to hook into the game and call the ScriptableMemebers
            HtmlPage.RegisterScriptableObject("SLGameObject", this);
        }

        //todo(michperr): This method will fire off another postgameend if a won game is refreshed.
        //in accordance with other todos, the winning logic should be ripped out of here and moved into
        //a better spot
        private void RefreshData()
        {
            //figure out if i'm X or O
            //todo(michperr): done frequently for debugging purposes.  Can cut down on this detection later.
            DeterminePlayer();

            Tick winner = _ttt.CheckForWinner();

            GameResults gr = null;

            if (winner != Tick.Empty)
            {
                //nobody can move after 'win'
                _myTurn = false;

                //display some balloons or something here
                txtStatus.Text = String.Format("{0} is the winner!", winner); ;

                //only have the winner post the action to the server
                switch (winner)
                {
                    case Tick.X:
                        if (_player == Tick.X)
                        {
                            gr = new GameResults();
                            gr.GameOverSeatIndexes = new int[2] { 0, 1 };
                            gr.WinningSeatIndexes = new int[1] { 0 };
                            gr.LosingSeatIndexes = new int[1] { 1 };
                            gr.TierSeatIndexes = new int[0];
                        }
                        break;
                    case Tick.O:
                        if (_player == Tick.O)
                        {
                            gr = new GameResults();
                            gr.GameOverSeatIndexes = new int[2] { 0, 1 };
                            gr.WinningSeatIndexes = new int[1] { 1 };
                            gr.LosingSeatIndexes = new int[1] { 0 };
                            gr.TierSeatIndexes = new int[0];
                        }
                        break;
                }
            }
            else
            {
                if (_ttt.GameCanContinue())
                {
                    //determine if it's my turn or the opponent's turn
                    DetermineTurn();
                }
                else
                {
                    txtStatus.Text = "Game has ended in a draw.";

                    //in the case of a draw, only X needs to update the server since X would make the 9th move
                    //to result in the draw
                    if (_player == Tick.X)
                    {
                        gr = new GameResults();
                        gr.GameOverSeatIndexes = new int[2] { 0, 1 };
                        gr.TierSeatIndexes = new int[2] { 0, 1 };
                        gr.WinningSeatIndexes = new int[0];
                        gr.LosingSeatIndexes = new int[0];
                    }
                }
            }

            if (gr != null)
            {
                //if there are any results, post them up to the server
                GameSessionProxy gsp = CreateNewGameSessionProxy(txtCookie.Text);
                gsp.OnPostGameEndCompleted += this.OnPostGameEndCompleted;
                gsp.PostGameEndAsync(txtSessionId.Text, TESTGAMEID, gr);
            }

            ShowBoard();
        }

        private void OnPostGameEndCompleted(object sender, GameSessionProxyEventArgs<string> e)
        {
            if (e.Error == null)
            {
                //check the results
                if (string.IsNullOrEmpty(e.Result))
                {


                }
            }
            else
            {
                //todo(michperr): Need error cases in case the post fails

                //unblock the user and let them make another move.
                _myTurn = true;

                string errorMessage = e.Error.Message.ToString();
                MessageBox.Show(errorMessage, "Silverlight TicTacToe", MessageBoxButton.OK);
            }
        }

        private void DetermineTurn()
        {
            Tick turn = _ttt.DetermineTurn();

            switch (turn)
            {
                case Tick.X:
                    _myTurn = txtUser.Text.Equals("testuser1", StringComparison.OrdinalIgnoreCase);
                    break;
                case Tick.O:
                    _myTurn = txtUser.Text.Equals("testuser2", StringComparison.OrdinalIgnoreCase);
                    break;
            }

            if (!_myTurn)
            {
                txtStatus.Text = "Waiting for opponent to make a move";
                //_refreshTimer = new Timer(new TimerCallback(TimerCallback), null, 2 * 1000, Timeout.Infinite);
                _refreshTimer = new DispatcherTimer();
                _refreshTimer.Interval = new TimeSpan(0, 0, 0, 1, 0);
                _refreshTimer.Tick += new EventHandler(WaitForMoveTimerCallback);
                _refreshTimer.Start();

            }
            else
            {
                txtStatus.Text = "Your move, hotshot.";
            }
        }

        private void WaitForMoveTimerCallback(object sender, EventArgs e)
        {
            _refreshTimer.Stop();
            //on every tick of the timer, fire off a request to get the game state
            GameSessionProxy gameSessionProxy = CreateNewGameSessionProxy(txtCookie.Text);
            gameSessionProxy.OnGetGameStateCompleted += this.OnGetGameStateCompleted2;
            gameSessionProxy.GetGameStateAsync(txtSessionId.Text, TESTGAMEID);
        }

        //todo(michperr): can probably combine with OnGetGameStateCompleted
        private void OnGetGameStateCompleted2(object sender, GameSessionProxyEventArgs<FullGameState> e)
        {
            if (e.Error == null)
            {
                //check the results
                FullGameState gameState = e.Result;
                if (gameState == null)
                {
                    //todo(michperr): Error
                }

                //check to see if the active seat index has changed to indicate it's this client's turn
                //right now, everything is hardcoded.  TestUser1 is in seat0, TestUser2 is in seat 1
                if ((txtCookie.Text.Equals("testuser1", StringComparison.OrdinalIgnoreCase) 
                        && gameState.GameStateInfo.ActiveSeatIndex == 0)
                    || txtCookie.Text.Equals("testuser2", StringComparison.OrdinalIgnoreCase) 
                        && gameState.GameStateInfo.ActiveSeatIndex == 1)
                {
                    //it's our turn!
                    _ttt.DeserializeBoard(gameState.GameData);
                    RefreshData();
                }
                else
                {
                    //reset the timer for another polling interval
                    _refreshTimer.Start();
                }
                
            }
        }

        //figure out if you are X or O based on the data sent back from the server
        //todo(michperr): Figure out how to use the seat index or the seatinfo to accomplish this
        //hardcoded for now.
        private void DeterminePlayer()
        {
            //_player = Tick.O;
            if (txtUser.Text.Equals("TestUser1", StringComparison.OrdinalIgnoreCase))
            {
                _player = Tick.X;
            }
            else
            {
                _player = Tick.O;
            }
        }

        /// <summary>
        /// Event handler for all the clicks on the game board
        /// </summary>
        private void BoardOnClickHandler(object sender, RoutedEventArgs e)
        {
            if (!_myTurn || !_hasOpponent)
            {
                return;
            }

            Rectangle r = sender as Rectangle;
            if (r == null)
            {
                return;
            }

            int row = -1;
            int col = -1;

            switch (r.Name)
            {
                case "R00":
                    row = 0;
                    col = 0;
                    break;
                case "R01":
                    row = 1;
                    col = 0;
                    break;
                case "R02":
                    row = 2;
                    col = 0;
                    break;
                case "R10":
                    row = 0;
                    col = 1;
                    break;
                case "R11":
                    row = 1;
                    col = 1;
                    break;
                case "R12":
                    row = 2;
                    col = 1;
                    break;
                case "R20":
                    row = 0;
                    col = 2;
                    break;
                case "R21":
                    row = 1;
                    col = 2;
                    break;
                case "R22":
                    row = 2;
                    col = 2;
                    break;
            }

            //bad move according to our board, no need to take further action
            if (!_ttt.MakeMove(col, row, _player))
            {
                return;
            }

            //ShowBoard();

            //save state

            txtStatus.Text = "Processing Move...";


            //todo(michperr): Should add here
            //1) detect a win inline
            //2) if a winning move is detected, make a server call
            // right now, the winning detection/server call is made on refresh
            // after committing the board to the server.  This allows a small window where
            // a client could win and quit.

            ModifiableGameState modifiableGameState = new ModifiableGameState();
            
            //set who will make the NEXT move
            modifiableGameState.ActiveSeatIndex = txtUser.Text.Equals("TestUser1") ? 1 : 0;
            modifiableGameState.GameData = _ttt.SerializeBoard();

            GameSessionProxy gameSessionProxy = CreateNewGameSessionProxy(txtCookie.Text);
            gameSessionProxy.OnPutGameStateCompleted += this.OnPutGameStateCompleted;
            gameSessionProxy.PutGameStateAsync(txtSessionId.Text, TESTGAMEID, modifiableGameState);
 
            
            //switch the local variable to signal it's not my turn
            _myTurn = false;
        }

        private void OnPutGameStateCompleted(object sender, GameSessionProxyEventArgs<string> e)
        {
            if (e.Error == null)
            {
                //check the results
                if (string.IsNullOrEmpty(e.Result))
                {


                }

                //this should kick off starting the timer for the next move
                RefreshData();

            }
            else
            {
                //todo(michperr): Need error cases in case the put fails.
                
                //unblock the user and let them make another move.
                _myTurn = true;

                string errorMessage = e.Error.Message.ToString();
                MessageBox.Show(errorMessage, "Silverlight TicTacToe", MessageBoxButton.OK);
            }

        }



        public void ShowBoard()
        {
            int row = 0;
            int col = 0;
            Tick t = Tick.Empty;

            //enumerate through all of the X/O images on the page and set them to visible/hidden
            //based on the tic tac toe board we got back from the server
            foreach (UIElement e in LayoutRoot.Children)
            {
                if (e.GetType() != typeof(Image))
                {
                    continue;
                }
                
                Image i = e as Image;
                if (Int32.TryParse(i.Name.Substring(1, 1), out col) &&
                Int32.TryParse(i.Name.Substring(2, 1), out row))
                {

                    //will always be either X or O since 'Empty' isn't 1 letter, and isn't in any of the Image names
                    t = (Tick)Enum.Parse(typeof(Tick), i.Name.Substring(0, 1), true);

                    if (_ttt.GetMarkAt(col, row) == t)
                    {
                        i.Visibility = Visibility.Visible;
                    }
                    else
                    {
                        i.Visibility = Visibility.Collapsed;
                    }
                }
            }
        }

        private void btnLogIn_Click(object sender, RoutedEventArgs e)
        {
            txtCookie.Text = txtUser.Text;
            txtStatus.Text = "Please Create/Refresh/Join a session";
        }

        private void btnRefreshSession_Click(object sender, RoutedEventArgs e)
        {
            if (string.IsNullOrEmpty(txtSessionId.Text))
            {
                return;
            }

            txtStatus.Text = "Refreshing.  Waiting for server reply...";

            GameSessionProxy gameSessionProxy = CreateNewGameSessionProxy(txtCookie.Text);
            gameSessionProxy.OnGetGameStateCompleted += this.OnGetGameStateCompleted;
            gameSessionProxy.GetGameStateAsync(txtSessionId.Text, TESTGAMEID);
        }

        private void OnGetGameStateCompleted(object sender, GameSessionProxyEventArgs<FullGameState> e)
        {
            txtStatus.Text = String.Empty;

            if (e.Error == null)
            {
                //check the results
                FullGameState gameState = e.Result;
                if (gameState != null)
                {
                    _ttt.DeserializeBoard(gameState.GameData);
                    RefreshData();
                }
            }
            else
            {
                string errorMessage = e.Error.Message.ToString();
                MessageBox.Show(errorMessage, "Silverlight TicTacToe", MessageBoxButton.OK);
            }
        }

        private void btnNewSession_Click(object sender, RoutedEventArgs e)
        {
            // TestUser1 creates a game session
            GameSessionProxy gameSessionProxy = CreateNewGameSessionProxy(txtCookie.Text);

            txtStatus.Text = "Creating Session on server...";

            CreationData creationData = InitializeCreationData();
            gameSessionProxy.OnCreateSessionCompleted += this.OnCreateSessionCompleted;
            gameSessionProxy.CreateSessionAsync(creationData.GameID, creationData);
        }

        private static CreationData InitializeCreationData()
        {
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.None;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 5;

            // Initialize creationData
            CreationData creationData = new CreationData();
            creationData.GameID = TESTGAMEID;
            creationData.Variant = 0;
            creationData.TotalSeatsAvailable = 2;
            creationData.ReservedSeatsAvailable = 2;
            creationData.SessionParameters = new byte[] { 1, 2, 3 };
            creationData.InactivityWarning = iwb;
            creationData.CanRemoveEmptySeats = true;
            creationData.DisplayName = "Silverlight TicTacToe v1.0";

            return creationData;
        }

        private static GameSessionProxy CreateNewGameSessionProxy(string cookieUserID)
        {
            CookieContainer containerCookies = new CookieContainer();
            containerCookies.Add(_gameSessionService, new Cookie("UserID", cookieUserID));
            containerCookies.Add(_gameStateService, new Cookie("UserID", cookieUserID));

            return new GameSessionProxy(_gameSessionService, null, containerCookies);
        }
        private void OnCreateSessionCompleted(object sender, GameSessionProxyEventArgs<SessionState> e)
        {
            txtStatus.Text = String.Empty;

            if (e.Error == null)
            {
                SessionState sessionState = null;

                if (e.Result.GetType() == typeof(SessionState))
                {
                    sessionState = e.Result;
                }
                if (sessionState != null)
                {
                    txtStatus.Text = "Session Created.  Waiting for Player 2.";
                    txtSessionId.Text = sessionState.SessionID;
                    txtAvailableSeats.Text = sessionState.SeatsAvailable.ToString(CultureInfo.InvariantCulture);
                    txtSeatId.Text = sessionState.State.ActiveSeatIndex.ToString(CultureInfo.InvariantCulture);

                    // Get/View Sessions
                    //WebClient viewSessionSummariesCookie = new WebClient();
                    //viewSessionSummariesCookie.DownloadStringCompleted += new System.Net.DownloadStringCompletedEventHandler(this.ViewSessionSummariesCookie_DownloadStringCompleted);
                    //viewSessionSummariesCookie.DownloadStringAsync(GetUserCookieUri(userId));
                    
                    
                    //todo(michperr): Remove this workaround when bug is fixed
                    _ttt.ClearBoard();

                    //kick off the timer that waits for player 2 to join
                    _refreshTimer = new DispatcherTimer();
                    _refreshTimer.Interval = new TimeSpan(0, 0, 0, 1, 0);
                    _refreshTimer.Tick += new EventHandler(WaitForPlayer2TimerCallback);
                    _refreshTimer.Start();
                }
            }
            else
            {
                string errorMessage = e.Error.Message.ToString();
                MessageBox.Show(errorMessage, "Silverlight TicTacToe", MessageBoxButton.OK);
            }
        }

        private void WaitForPlayer2TimerCallback(object sender, EventArgs e)
        {
            txtStatus.Text = "Checking for player 2...";
            GameSessionProxy gameSessionProxy = CreateNewGameSessionProxy(txtCookie.Text);
            gameSessionProxy.OnViewSessionCompleted += this.OnViewSessionCompleted;
            gameSessionProxy.ViewSessionAsync(txtSessionId.Text, TESTGAMEID);
        }

        private void OnViewSessionCompleted(object sender, GameSessionProxyEventArgs<SessionState> e)
        {
            txtStatus.Text = String.Empty;

            if (e.Error == null)
            {
                SessionState state = e.Result as SessionState;
                if (state == null)
                {
                    //todo(michperr): Error
                    return;
                }

                if (state.SeatsAvailable == 0)
                {
                    _hasOpponent = true;
                    txtStatus.Text = "Player 2 successfully joined.  Please make your first move";
                    _refreshTimer.Stop();
                    RefreshData();
                    return;
                }
                
            }
            else
            {
                string errorMessage = e.Error.Message.ToString();
                MessageBox.Show(errorMessage, "Silverlight TicTacToe", MessageBoxButton.OK);
            }
            
            //either an error, or p2 hasn't joined yet.  Poll again.
            _refreshTimer.Start();
        }

        private void btnJoinSession_Click(object sender, RoutedEventArgs e)
        {
            JoinData joinData = new JoinData();
            joinData.GameID = TESTGAMEID;
            joinData.SeatParameters = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 };
            joinData.SessionID = txtSessionId.Text;

            // TestUser2 joins game session
            GameSessionProxy gameSessionProxy = CreateNewGameSessionProxy(txtCookie.Text);
            gameSessionProxy.OnJoinSessionCompleted += this.OnJoinSessionCompleted;
            gameSessionProxy.JoinSessionAsync(txtSessionId.Text, joinData);
        }

        private void OnJoinSessionCompleted(object sender, GameSessionProxyEventArgs<SessionState> e)
        {
            if (e.Error == null)
            {
                SessionState sessionState = null;
                if (e.Result.GetType() == typeof(SessionState))
                {
                    sessionState = e.Result;
                }

                if (sessionState != null)
                {
                    txtSessionId.Text = sessionState.SessionID;
                    txtAvailableSeats.Text = sessionState.SeatsAvailable.ToString(CultureInfo.InvariantCulture);
                    txtSeatId.Text = sessionState.State.ActiveSeatIndex.ToString(CultureInfo.InvariantCulture);

                    if (sessionState.SeatsAvailable == 0)
                    {
                        _hasOpponent = true;
                    }
                    
                    //todo(michperr): Enable this and remove this status when the get/put bug is fixed

                    txtStatus.Text = "Joined Successfully.  Need to manually refresh after p1 makes the first move due to a server bug";
                    //btnRefreshSession_Click(this, null);
                }
            }
            else
            {
                string errorMessage = e.Error.Message.ToString();
                MessageBox.Show(errorMessage, "Silverlight TicTacToe", MessageBoxButton.OK);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Games\SilverlightTicTacToe\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("SilverlightTicTacToe")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
//[assembly: AssemblyCompany("Microsoft")]
//[assembly: AssemblyProduct("SilverlightTicTacToe")]
//[assembly: AssemblyCopyright("Copyright © Microsoft 2009")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("144806cf-0118-48ea-af3e-baa20f755e7f")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
//[assembly: AssemblyVersion("1.0.0.0")]
//[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\State\PutGameState.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using CloudServices.Test.Common.Configuration;
using Multiplayer.Test.API;
using AsyncMultiplayer.SessionCommon;
using System.Net;
using System.Diagnostics;
using System.Threading;
using AsyncMultiplayer.NotificationService;
using LIVEN.Common.Diagnostics;
using CloudServices.Test.Common.Proxy;

namespace MultiPlayer.Test.API
{
    /// <summary>
    /// Test Cases for GameState.svc PutGameState API
    /// </summary>
    [TestClass]
    public class PutGameState : TestAreaBase
    {
        private static NotificationTestCommon common = new NotificationTestCommon();

        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            
            LockTest();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            UnlockTest();
        }

        /// <summary>
        /// BVT Test to verify PutGameState
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("BVT for Game State PutGameState API.")]
        [TestProperty("Type", "BVTs")]
        public void BVT_PutGameState()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creeation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            //put game state
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            //GetGameState after PutGameState
            FullGameState modifiedGameState = this.GameStateProxy.GetGameState(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert Modified GameState
            AssertGameState(modifiableGameState, modifiedGameState);

            //ViewSession after PutGameState
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState modifiedSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert Modified SessionState
            Assert.AreEqual<int>(modifiableGameState.ActiveSeatIndex, modifiedSessionState.State.ActiveSeatIndex, "ActiveSeatIndex in Modified SessionState.State is not as Expected");
            Assert.AreEqual<int>(joinSessionState.State.SequenceNumber + 1, modifiedSessionState.State.SequenceNumber, "SequenceNumber in Modified SessionState.State is not as Expected");

            //Verify YourTurn Notification
            string memberName = Config.Environment.UserSettings[1].Membername;      // player2
            string password = Config.Environment.UserSettings[1].Password;
            VerifyNotification(modifiedSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.YourTurn, true, memberName, password);
        }

        /// <summary>
        /// Feature Test for PutGameState to verify Owner setting Active Seat to Owner's Seat 
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Test to verify Owner setting Active Seat to Owner's Seat.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_PutGameState_Owner_SetActiveSeatIndex_SelfSeatIndex()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creeation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            //put game state by Player1
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            //put game state by Player2
            modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 0;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameStateProxy.Password = Config.Environment.UserSettings[1].Password;
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            //ViewSession after PutGameState
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState modifiedSessionState1 = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //put game state by Player1
            modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 0;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            //GetGameState after PutGameState
            FullGameState modifiedGameState = this.GameStateProxy.GetGameState(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert Modified GameState
            AssertGameState(modifiableGameState, modifiedGameState);

            //ViewSession after PutGameState
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState modifiedSessionState2 = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert Modified SessionState
            Assert.AreEqual<int>(modifiableGameState.ActiveSeatIndex, modifiedSessionState2.State.ActiveSeatIndex, "ActiveSeatIndex in Modified SessionState.State is not as Expected");
            Assert.AreEqual<int>(modifiedSessionState1.State.SequenceNumber + 1, modifiedSessionState2.State.SequenceNumber, "SequenceNumber in Modified SessionState.State is not as Expected");
        }

        //related bug 1863
        /// <summary>
        /// Feature Test for PutGameState to verify setting Active seat to current Active Player's Seat 
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Call PutGameState on GameState service to Modify GameState & verify YourTurn Notification is created and verify information on notification is correct.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_PutGameState_Player_SetActiveSeatIndex_SelfSeatIndex()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "We need at least two users for this testcase.");
            // create new session
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creeation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            //put game state by Player1
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };
            
            //Delete pre-existing notifications 
            common.CheckNotificationCount(Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            //GetGameState after PutGameState
            FullGameState modifiedGameState = this.GameStateProxy.GetGameState(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert Modified GameState
            AssertGameState(modifiableGameState, modifiedGameState);

            Thread.Sleep(20000);
            this.NotificationsServiceProxy.Locale = "en-US";
            Notification yourTurnNotification = GetNotification(joinSessionState.GameID.ToString(), joinSessionState.SessionID, Notification.NotificationType.YourTurn.ToString(), Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            ValidateNotificationContent(yourTurnNotification, "Your Turn", Config.Environment.UserSettings[0].Gamertag, string.Empty); 

            //ViewSession after PutGameState
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState modifiedSessionState1 = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert Modified SessionState
            Assert.AreEqual<int>(modifiableGameState.ActiveSeatIndex, modifiedSessionState1.State.ActiveSeatIndex, "ActiveSeatIndex in Modified SessionState.State is not as Expected");
            Assert.AreEqual<int>(joinSessionState.State.SequenceNumber + 1, modifiedSessionState1.State.SequenceNumber, "SequenceNumber in Modified SessionState.State is not as Expected");

            //PutGameState by Player2 to Player2's SeatIndex
            modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameStateProxy.Password = Config.Environment.UserSettings[1].Password;

            this.GameStateProxy.PutGameState(createSessionState.SessionID, creationData.GameID.ToString(), modifiableGameState);

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;
            modifiedGameState = this.GameStateProxy.GetGameState(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert Modified GameState
            AssertGameState(modifiableGameState, modifiedGameState);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState modifiedSessionState2 = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert Modified SessionState
            Assert.AreEqual<int>(modifiableGameState.ActiveSeatIndex, modifiedSessionState2.State.ActiveSeatIndex, "ActiveSeatIndex in Modified SessionState.State is not as Expected");
            Assert.AreEqual<int>(modifiedSessionState1.State.SequenceNumber + 1, modifiedSessionState2.State.SequenceNumber, "SequenceNumber in Modified SessionState.State is not as Expected");
        }

        /// <summary>
        /// Feature Test for PutGameState to verify setting Active Seat in Reverse order. Set ActiveSeat = CurrentActiveSeat - 1 
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Test to verify setting Active Seat in Reverse order. Set ActiveSeat = CurrentActiveSeat - 1.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_PutGameState_ActiveSeatIndex_SeatBeforeCurrentSeat()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 4, "Should have at least 4 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creeation
            AssertCreateSessionState(creationData, createSessionState);

            SessionState beforeJoinSessionState = createSessionState;
            SessionState joinSessionState = null;

            for (int i = 1; i < 4; i++)
            {
                JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, i);

                this.GameSessionProxy.UserID = Config.Environment.UserSettings[i].Membername;      // next player
                this.GameSessionProxy.Password = Config.Environment.UserSettings[i].Password;
                joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

                AssertJoinSessionState(beforeJoinSessionState, joinSessionState);
                beforeJoinSessionState = joinSessionState;
            }

            //put game state by Player0
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            //put game state by Player2
            modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 2;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameStateProxy.Password = Config.Environment.UserSettings[1].Password;
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            //ViewSession after PutGameState
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState modifiedSessionState1 = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //put game state by Player3
            modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[2].Membername;      // player3
            this.GameStateProxy.Password = Config.Environment.UserSettings[2].Password;
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            //GetGameState after PutGameState
            FullGameState modifiedGameState = this.GameStateProxy.GetGameState(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert Modified GameState
            AssertGameState(modifiableGameState, modifiedGameState);

            //ViewSession after PutGameState
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState modifiedSessionState2 = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert Modified SessionState
            Assert.AreEqual<int>(modifiableGameState.ActiveSeatIndex, modifiedSessionState2.State.ActiveSeatIndex, "ActiveSeatIndex in Modified SessionState.State is not as Expected");
            Assert.AreEqual<int>(modifiedSessionState1.State.SequenceNumber + 1, modifiedSessionState2.State.SequenceNumber, "SequenceNumber in Modified SessionState.State is not as Expected");
        }

        /// <summary>
        /// Feature Test for PutGameState to verify setting empty seat as Active seat  -- Bug 1891
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Test to verify setting empty seat as Active seat.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_PutGameState_EmptySeatAsActiveSeat()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creeation
            AssertCreateSessionState(creationData, createSessionState);

            //set the game state
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;
            this.GameStateProxy.PutGameState(createSessionState.SessionID, creationData.GameID.ToString(), modifiableGameState);

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;
            FullGameState modifiedGameState = this.GameStateProxy.GetGameState(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert Modified GameState
            AssertGameState(modifiableGameState, modifiedGameState);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState modifiedSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert Modified SessionState
            Assert.AreEqual<int>(modifiableGameState.ActiveSeatIndex, modifiedSessionState.State.ActiveSeatIndex, "ActiveSeatIndex in Modified SessionState.State is not as Expected");
            Assert.AreEqual<int>(createSessionState.State.SequenceNumber + 1, modifiedSessionState.State.SequenceNumber, "SequenceNumber in Modified SessionState.State is not as Expected");
        }

        /// <summary>
        /// Feature Test for PutGameState to verify setting empty seat as Active seat - after Multiple Players Join Session -- Bug 1891
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Test to verify setting empty seat as Active seat.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_PutGameState_EmptySeatAsActiveSeat_MultiplePlayers()
        {

            Assert.IsTrue(Config.Environment.UserSettings.Count >= 4, "Should have at least 4 users under <preExistingUsers> node in App.config for selected environment");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            // create new session
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creeation
            AssertCreateSessionState(creationData, createSessionState);

            SessionState beforeJoinSessionState = createSessionState;

            for (int i = 1; i < 4; i++)
            {
                JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, i);

                this.GameSessionProxy.UserID = Config.Environment.UserSettings[i].Membername;      // next player
                this.GameSessionProxy.Password = Config.Environment.UserSettings[i].Password;
                SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

                AssertJoinSessionState(beforeJoinSessionState, joinSessionState);
                beforeJoinSessionState = joinSessionState;
            }

            //set the game state
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 8;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;
            this.GameStateProxy.PutGameState(createSessionState.SessionID, creationData.GameID.ToString(), modifiableGameState);

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;
            FullGameState modifiedGameState = this.GameStateProxy.GetGameState(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert Modified GameState
            AssertGameState(modifiableGameState, modifiedGameState);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState modifiedSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert Modified SessionState
            Assert.AreEqual<int>(modifiableGameState.ActiveSeatIndex, modifiedSessionState.State.ActiveSeatIndex, "ActiveSeatIndex in Modified SessionState.State is not as Expected");
            Assert.AreEqual<int>(createSessionState.State.SequenceNumber + 1, modifiedSessionState.State.SequenceNumber, "SequenceNumber in Modified SessionState.State is not as Expected");
        }

        /// <summary>
        /// Feature Test for PutGameState to verify setting empty seat as Active seat - Seat emptied by a player with LeaveSession - Bug 1891
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Test to verify setting empty seat as Active seat after player LeaveSession.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_PutGameState_EmptySeatAsActiveSeat_LeaveSession()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 4, "Should have at least 4 users under <preExistingUsers> node in App.config for selected environment");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            // create new session
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creeation
            AssertCreateSessionState(creationData, createSessionState);

            SessionState beforeJoinSessionState = createSessionState;
            SessionState joinSessionState = null;

            for (int i = 1; i < 4; i++)
            {
                JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, i);

                this.GameSessionProxy.UserID = Config.Environment.UserSettings[i].Membername;      // next player
                this.GameSessionProxy.Password = Config.Environment.UserSettings[i].Password;
                joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

                AssertJoinSessionState(beforeJoinSessionState, joinSessionState);
                beforeJoinSessionState = joinSessionState;
            }

            //player 3 LeaveSession
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[2].Membername;      // player3
            this.GameSessionProxy.Password = Config.Environment.UserSettings[2].Password;
            this.GameSessionProxy.LeaveSession(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());

            //View Session after Leave
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState leaveSessionState = this.GameSessionProxy.ViewSession(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());

            //Assert SessionState
            AssertLeaveSessionState(joinSessionState, leaveSessionState);

            //set the game state
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 2;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;
            this.GameStateProxy.PutGameState(leaveSessionState.SessionID, leaveSessionState.GameID.ToString(), modifiableGameState);

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;
            FullGameState modifiedGameState = this.GameStateProxy.GetGameState(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert Modified GameState
            AssertGameState(modifiableGameState, modifiedGameState);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState modifiedSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert Modified SessionState
            Assert.AreEqual<int>(modifiableGameState.ActiveSeatIndex, modifiedSessionState.State.ActiveSeatIndex, "ActiveSeatIndex in Modified SessionState.State is not as Expected");
            Assert.AreEqual<int>(createSessionState.State.SequenceNumber + 1, modifiedSessionState.State.SequenceNumber, "SequenceNumber in Modified SessionState.State is not as Expected");
        }

        /// <summary>
        /// Feature Test to verify Session's Owner can PutGameState while it's not Owner's Turn
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Game State PutGameState API for Session Owner to PutGameState while Not Owner's Turn.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PutGameState_Owner_WhileNotOwnerTurn()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 3, "Should have at least 3 users under <preExistingUsers> node in App.config for selected environment");

            SessionState joinSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creeation
            AssertCreateSessionState(creationData, createSessionState);

            SessionState beforeJoinSessionState = createSessionState;

            for (int i = 1; i < 3; i++)
            {
                JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, i);

                this.GameSessionProxy.UserID = Config.Environment.UserSettings[i].Membername;      // next player
                this.GameSessionProxy.Password = Config.Environment.UserSettings[i].Password;
                joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

                AssertJoinSessionState(beforeJoinSessionState, joinSessionState);
                beforeJoinSessionState = joinSessionState;
            }

            //put game state - Player1
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            //GetGameState after PutGameState
            FullGameState modifiedGameState = this.GameStateProxy.GetGameState(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());

            //Assert Modified GameState
            AssertGameState(modifiableGameState, modifiedGameState);

            //put game state - Player2
            modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 2;
            modifiableGameState.GameData = new byte[] { 60, 61, 62, 63, 64 };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameStateProxy.Password = Config.Environment.UserSettings[1].Password;
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            //GetGameState after PutGameState
            modifiedGameState = this.GameStateProxy.GetGameState(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());

            //Assert Modified GameState
            AssertGameState(modifiableGameState, modifiedGameState);

            //Owner (Player1) try PutGameState while it's NOT Owner's Turn (It's Player3 Trun now)
            modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 66, 67, 68, 69, 70 };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // Owner (Player1)
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;
            try
            {
                this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);
                Assert.Fail("Allowed to make a move by a Session's Owner while it's not Owner's turn");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.UserNotAllowedToModifyGameStateForTheSession), restEx.Response);

            }
        }

        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Call PUT on GameState.svc to make a move while not your turn and verify failure")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PutGameState_Player_WhileNotPlayerTurn()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 3, "Should have at least 3 users under <preExistingUsers> node in App.config for selected environment");

            SessionState joinSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creeation
            AssertCreateSessionState(creationData, createSessionState);

            SessionState beforeJoinSessionState = createSessionState;

            for (int i = 1; i < 3; i++)
            {
                JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, i);

                this.GameSessionProxy.UserID = Config.Environment.UserSettings[i].Membername;      // next player
                this.GameSessionProxy.Password = Config.Environment.UserSettings[i].Password;
                joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

                AssertJoinSessionState(beforeJoinSessionState, joinSessionState);
                beforeJoinSessionState = joinSessionState;
            }

            //set the game state by Player1
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            //GetGameState after PutGameState
            FullGameState modifiedGameState = this.GameStateProxy.GetGameState(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());

            //Assert Modified GameState
            AssertGameState(modifiableGameState, modifiedGameState);

            //set the GameState by Player3 while it's Player2's Turn
            modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 0;
            modifiableGameState.GameData = new byte[] { 61, 62, 63, 64, 65 };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[2].Membername;      // player3
            this.GameStateProxy.Password = Config.Environment.UserSettings[2].Password;
            try
            {
                this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);
                Assert.Fail("Allowed to make a move by a player while it's not that player's turn");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.UserNotAllowedToModifyGameStateForTheSession), restEx.Response);
            }
        }

        /// <summary>
        /// Feature Test for PutGameState to verify setting Active Seat as > Total Seats Available 
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Test to verify setting Active Seat as > Total Seats Available.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PutGameState_ActiveSeatIndex_GreaterThanTotalSeats()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creeation
            AssertCreateSessionState(creationData, createSessionState);

            //put game state by Player0
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 20;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiableGameState);
                Assert.Fail("Player is able to set ActiveSeatIndex to > SeatsAvailable (Max Seat Index)");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidActiveSeatIndex), restEx.Response);
            }
        }

        /// <summary>
        /// Feature Test for PutGameState to verify a player NOT in Session try to PutGameState 
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Test to verify a player NOT in Session try to PutGameState.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PutGameState_NotInSession()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creeation
            AssertCreateSessionState(creationData, createSessionState);

            //try PutGameState by Player Not in Session
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 2;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameStateProxy.Password = Config.Environment.UserSettings[1].Password;

            try
            {
                this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiableGameState);
                Assert.Fail("Player is able to PutGameState while NOT in Session)");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.UserNotAllowedToSetStateInThisSession), restEx.Response);
            }
        }

        /// <summary>
        /// Feature Test for PutGameState to verify player try PutGameState after LeaveSession when player's seat is ActiveSeat when LeaveSession 
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Test to verify player try PutGameState after LeaveSession when player's seat is ActiveSeat when LeaveSession.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PutGameState_AfterLeaveSession_ActiveSeatOnLeave()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 3, "Should have at least 3 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creeation
            AssertCreateSessionState(creationData, createSessionState);

            SessionState beforeJoinSessionState = createSessionState;
            SessionState joinSessionState = null;

            for (int i = 1; i < 3; i++)
            {
                JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, i);

                this.GameSessionProxy.UserID = Config.Environment.UserSettings[i].Membername;      // next player
                this.GameSessionProxy.Password = Config.Environment.UserSettings[i].Password;
                joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

                AssertJoinSessionState(beforeJoinSessionState, joinSessionState);
                beforeJoinSessionState = joinSessionState;
            }

            //PutGameState by Player1
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiableGameState);

            //Player2 LeaveSession
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;

            this.GameSessionProxy.LeaveSession(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());

            //Player2 try PutGameState
            modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 2;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameStateProxy.Password = Config.Environment.UserSettings[1].Password;

            try
            {
                this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiableGameState);
                Assert.Fail("Player is allowed to PutGameState after LeaveSession");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.UserNotAllowedToSetStateInThisSession), restEx.Response);
            }
        }

        /// <summary>
        /// Feature Test for PutGameState to verify player try PutGameState after LeaveSession when player's seat is NOT ActiveSeat when LeaveSession 
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Test to verify player try PutGameState after LeaveSession when player's seat is NOT ActiveSeat when LeaveSession .")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PutGameState_AfterLeaveSession_NotActiveSeatOnLeave()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 3, "Should have at least 3 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creeation
            AssertCreateSessionState(creationData, createSessionState);

            SessionState beforeJoinSessionState = createSessionState;
            SessionState joinSessionState = null;

            for (int i = 1; i < 3; i++)
            {
                JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, i);

                this.GameSessionProxy.UserID = Config.Environment.UserSettings[i].Membername;      // next player
                this.GameSessionProxy.Password = Config.Environment.UserSettings[i].Password;
                joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

                AssertJoinSessionState(beforeJoinSessionState, joinSessionState);
                beforeJoinSessionState = joinSessionState;
            }

            //PutGameState by Player1
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiableGameState);

            //Player3 LeaveSession
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[2].Membername;      // player3
            this.GameSessionProxy.Password = Config.Environment.UserSettings[2].Password;

            this.GameSessionProxy.LeaveSession(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());

            //Player3 try PutGameState
            modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 0;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[2].Membername;      // player3
            this.GameStateProxy.Password = Config.Environment.UserSettings[2].Password;

            try
            {
                this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiableGameState);
                Assert.Fail("Player is allowed to PutGameState after LeaveSession");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.UserNotAllowedToSetStateInThisSession), restEx.Response);
            }
        }

        /// <summary>
        /// Feature Test for PutGameState to verify setting Game state size greater than the maximum 1MB
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Test to verify setting Game state size greater than the maximum 1MB.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PutGameState_GameStateSizeGreaterThan1MB()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creeation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            //put game state by Player1
            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[(1024 * 1024) + 1024];

            for (int Cntr = 0; Cntr < modifiableGameState.GameData.Length; Cntr++)
                modifiableGameState.GameData[Cntr] = Convert.ToByte(GlobalRandom.Next() % 256);            
 
            try
            {
                this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiableGameState);
                Assert.Fail("Player is able to set Game state size greater than the maximum (1MB)");
            }
            catch (RestException restEx)
            {
                //this will be fixed once bug is fixed 6924
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameDataIsNullOrTooLong), restEx.Response);          
            }
        }

        /// <summary>
        /// Feature Test for PutGameState to verify setting Game state size greater than the maximum 2MB
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Test to verify setting Game state size greater than the maximum 2MB.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PutGameState_GameStateSizeGreaterThan2MB()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creeation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2;
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            //put game state by Player1
            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[(2 * 1024 * 1024) + 1024];

            for (int Cntr = 0; Cntr < modifiableGameState.GameData.Length; Cntr++)
                modifiableGameState.GameData[Cntr] = Convert.ToByte(GlobalRandom.Next() % 256);

            try
            {
                this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiableGameState);
                Assert.Fail("Player is able to set Game state size greater than the maximum (2MB)");
            }
            catch (RestException restEx)
            {
                //this will be fixed once bug is fixed 6924
                //VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameDataIsNullOrTooLong), restEx.Response);
                VerifyException(HttpStatusCode.BadRequest, restEx.Response);
            }
        }

        /// <summary>
        /// Feature Test for PutGameState to verify setting Game Data to null
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Test to verify setting Game Data to null.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PutGameState_NullGameData()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creeation
            AssertCreateSessionState(creationData, createSessionState);

            //put game state by Player0
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;

            // modifiableGameState.GameData not initiaized

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            try
            {
                this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiableGameState);
                Assert.Fail("Player is able to set Game Data to null");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameDataIsNullOrTooLong), restEx.Response);
            }
        }

        /// <summary>
        /// Feature Test for PutGameState to verify setting Game state size equals the maximum 1MB
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Test to verify setting Game state size equals the maximum 1MB.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_PutGameState_GameStateSizeEquals1MB()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creeation
            AssertCreateSessionState(creationData, createSessionState);

            // JOin session by player 2
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

     
            //modify state by Player1
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[1024 * 1024 - 1];

            for (int Cntr = 0; Cntr < modifiableGameState.GameData.Length; Cntr++)
                modifiableGameState.GameData[Cntr] = Convert.ToByte(GlobalRandom.Next() % 256);

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;

            //put game state by Player1
            this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiableGameState);

            //GetGameState after PutGameState
            FullGameState modifiedGameState = this.GameStateProxy.GetGameState(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert Modified GameState
            AssertGameState(modifiableGameState, modifiedGameState);
        }

        /// <summary>
        /// Feature Test for PutGameStateto verify setting ownership to next player after Owner leave session
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Test to verify setting ownership to next player after Owner leave session.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_PutGameState_OwnerSeatIndex_OwnerLeaveSession()
        {

            Assert.IsTrue(Config.Environment.UserSettings.Count >= 3, "Should have at least 3 users under <preExistingUsers> node in App.config for selected environment");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;

            // create new session
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creeation
            AssertCreateSessionState(creationData, createSessionState);

            SessionState beforeJoinSessionState = createSessionState;

            for (int i = 1; i < 4; i++)
            {
                JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, i);

                // next player joining ....                
                SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData, Config.Environment.UserSettings[i].Membername, Config.Environment.UserSettings[i].Password);

                AssertJoinSessionState(beforeJoinSessionState, joinSessionState);
                beforeJoinSessionState = joinSessionState;
            }

            //next player view session
            SessionState beforeOwnerLeaveSession = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), 
                                                                                     createSessionState.GameID.ToString(), 
                                                                                     Config.Environment.UserSettings[2].Membername, 
                                                                                     Config.Environment.UserSettings[2].Password);

            Log.WriteLine("Owner Seat Index who will leave session,========" + beforeOwnerLeaveSession.OwnerSeatIndex.ToString());

            this.GameSessionProxy.LeaveSession(createSessionState.SessionID, createSessionState.GameID.ToString(),
                                               Config.Environment.UserSettings[0].Membername,Config.Environment.UserSettings[0].Password);

            SessionState newOwnerSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), 
                                                                                  createSessionState.GameID.ToString(),
                                                                                  Config.Environment.UserSettings[1].Membername, 
                                                                                  Config.Environment.UserSettings[1].Password);

            Log.WriteLine("New Owner Seat Index is =====================" + newOwnerSessionState.OwnerSeatIndex.ToString());

            Assert.AreEqual<string>((beforeOwnerLeaveSession.OwnerSeatIndex+1).ToString(), newOwnerSessionState.OwnerSeatIndex.ToString(),
                                     "Err:Session ownership is not passed to the next player after previous owner left");
           
               
            //set the game state
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 0;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            try
            {
                this.GameStateProxy.PutGameState(createSessionState.SessionID, creationData.GameID.ToString(), modifiableGameState, Config.Environment.UserSettings[1].Membername, Config.Environment.UserSettings[1].Password);
            }
            catch (Exception ex)
            {
                 throw new Exception(ex.Message + "---- Error: Unable to make a move after first owner left session");
            }


            FullGameState fullGame = this.GameStateProxy.GetGameState(createSessionState.SessionID.ToString(), 
                                                                                    createSessionState.GameID.ToString(), 
                                                                                    Config.Environment.UserSettings[2].Membername,
                                                                                    Config.Environment.UserSettings[2].Password);


            AssertGameState(modifiableGameState, fullGame);
        }

        /// <summary>
        /// Feature Test for PutGameState to verify  retrying of putgamestate when it fail due azure inconsistency
        /// also verifying sending YOur Turn Notification to the right player when 
        /// putGameState fails for the wrong player
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Test to verify sending YOur Turn Notification to the right player and retrying of Putgamestate.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_PutGameState_RetryingIfPutGameStateFail()
        {
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 3, "Should have at least 3 users under <preExistingUsers> node in App.config for selected environment");

            SessionState joinSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, new byte[] { 1, 2, 3 }, iwb, true, "TestGame");

            //player1
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                                  Config.Environment.UserSettings[0].Membername, 
                                                                                  Config.Environment.UserSettings[0].Password);

            //verify session creeation
            AssertCreateSessionState(creationData, createSessionState);

            SessionState beforeJoinSessionState = createSessionState;

            for (int i = 1; i < 3; i++)
            {
                JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, i);

                // next player           
                joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData, 
                                                                     Config.Environment.UserSettings[i].Membername, 
                                                                     Config.Environment.UserSettings[i].Password);

                AssertJoinSessionState(beforeJoinSessionState, joinSessionState);
                beforeJoinSessionState = joinSessionState;
            }

            //put game state - Player1
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            //player 1 make a move
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState, 
                                             Config.Environment.UserSettings[0].Membername,
                                             Config.Environment.UserSettings[0].Password);

            //GetGameState after PutGameState
            FullGameState modifiedGameState = this.GameStateProxy.GetGameState(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());

            //Assert Modified GameState
            AssertGameState(modifiableGameState, modifiedGameState);

            //put game state - Player2
            modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 2;
            modifiableGameState.GameData = new byte[] { 60, 61, 62, 63, 64 };

            //player 2 make a move
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState,
                                             Config.Environment.UserSettings[1].Membername,
                                             Config.Environment.UserSettings[1].Password);
            //GetGameState after PutGameState
            modifiedGameState = this.GameStateProxy.GetGameState(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());

            //Assert Modified GameState
            AssertGameState(modifiableGameState, modifiedGameState);


            //Owner (Player1) try PutGameState while it's NOT Owner's Turn (It's Player3 Trun now)
            modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 66, 67, 68, 69, 70 };

            try
            {
                //player 1-Owner- make a move
                this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState,
                                                 Config.Environment.UserSettings[0].Membername,
                                                 Config.Environment.UserSettings[0].Password);

                Assert.Fail("Allowed to make a move by a Session's Owner while it's not Owner's turn");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.UserNotAllowedToModifyGameStateForTheSession), restEx.Response);

            }

            modifiedGameState = this.GameStateProxy.GetGameState(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString(),
                                                                 Config.Environment.UserSettings[0].Membername,
                                                                 Config.Environment.UserSettings[0].Password);

            Log.WriteLine("ActiveSeatA is =======" + modifiedGameState.GameStateInfo.ActiveSeatIndex.ToString(), LogLevel.Info);

            Assert.IsTrue(modifiedGameState.GameStateInfo.ActiveSeatIndex == 2, "Active Seat not updated to point to Player whose Turn is next");

            //waiting warning in notification queue to show-up in azure
            Thread.Sleep(180000);
            common.VerifyNotificationCreated(joinSessionState.GameID.ToString(), joinSessionState.SessionID.ToString(), Notification.NotificationType.Warning,
                                             Config.Environment.UserSettings[2].Membername, Config.Environment.UserSettings[2].Password);

            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState,
                                                            Config.Environment.UserSettings[2].Membername,
                                                            Config.Environment.UserSettings[2].Password);           
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Games\SilverlightTicTacToe.Web\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("SilverlightTicTacToe.Web")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
//[assembly: AssemblyCompany("Microsoft")]
//[assembly: AssemblyProduct("SilverlightTicTacToe.Web")]
//[assembly: AssemblyCopyright("Copyright © Microsoft 2009")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("3d5900ae-111a-45be-96b3-d9e4606ca793")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
//[assembly: AssemblyVersion("1.0.0.0")]
//[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Games\SilverlightTicTacToe\TicTacToeGame.cs ===
﻿namespace SilverlightTicTacToe
{
    using System;
    using System.Net;
    using System.Windows;
    using System.Windows.Controls;
    using System.Windows.Documents;
    using System.Windows.Ink;
    using System.Windows.Input;
    using System.Windows.Media;
    using System.Windows.Media.Animation;
    using System.Windows.Shapes;
    
    public enum Tick : byte
    {
        Empty = 0,
        X = byte.MaxValue,
        O = 1
    }

    public class TicTacToeGame
    {
        private const int ROWS = 3;
        private const int COLS = 3;
        private byte[,] _board = new byte[COLS, ROWS];
        
        public TicTacToeGame() { }
        
        public void ClearBoard()
        {
            _board = new byte[3, 3];
        }

        public Tick CheckForWinner()
        {
            Tick t = Tick.Empty;

            //cols
            for (int c = 0; c < COLS; c++)
            {
                int colSum = 0;

                for (int r = 0; r < ROWS; r++)
                {
                    colSum += _board[c, r];
                }

                t = CheckWinnerTotal(colSum);
                if (t != Tick.Empty)
                {
                    return t;
                }

            }
            //rows
            for (int r = 0; r < ROWS; r++)
            {
                int rowSum = 0;

                for (int c = 0; c < COLS; c++)
                {
                    rowSum += _board[c, r];
                }

                t = CheckWinnerTotal(rowSum);
                if (t != Tick.Empty)
                {
                    return t;
                }

            }

            //diagonals
            t = CheckWinnerTotal(_board[0, 0] + _board[1, 1] + _board[2, 2]);
            if (t != Tick.Empty)
            {
                return t;
            }

            t = CheckWinnerTotal(_board[0, 2] + _board[1, 1] + _board[2, 0]);
            if (t != Tick.Empty)
            {
                return t;
            }

            return Tick.Empty;
        }

        public void DeserializeBoard(byte[] encBoard)
        {
            if (encBoard.Length != 9)
            {
                throw new ArgumentException("Expected a board of 9 spaces.");
            }
            _board = new byte[3, 3];

            int r = 0;
            int c = 0;

            for (int i = 0; i < 9; i++)
            {
                _board[c, r] = encBoard[i];

                r++;
                if (r >= ROWS)
                {
                    r = 0;
                    c++;
                }
            }
        }

        public byte[] SerializeBoard()
        {
            byte[] ret = new byte[ROWS * COLS];
            int index = 0;

            for (int c = 0; c < COLS; c++)
            {
                for (int r = 0; r < ROWS; r++)
                {
                    ret[index] = _board[c, r];
                    index++;
                }
            }
            return ret;
        }

        public Tick DetermineTurn()
        {
            int numOfX = 0;
            int numOfO = 0;
            for (int x = 0; x < COLS; x++)
            {
                for (int y = 0; y < ROWS; y++)
                {
                    switch ((Tick)_board[x, y])
                    {
                        case Tick.X:
                            numOfX++;
                            break;
                        case Tick.O:
                            numOfO++;
                            break;
                    }
                }
            }

            //if there are more X's than O's, it's O's turn
            
            if (numOfX > numOfO)
            {
                return Tick.O;
            }
            else
            {
                //if there are an equal number of X's and O's, it's X's turn
                return Tick.X;
            }
        }

        public bool MakeMove(int col, int row, Tick mark)
        {
            if (!ValidateMove(col, row))
            {
                return false;
            }
            _board[col, row] = (byte)mark;
            return true;

        }

        //check to see if any possible moves are left
        public bool GameCanContinue()
        {
            for (int c = 0; c < COLS; c++)
            {
                for (int r = 0; r < ROWS; r++)
                {
                    if (_board[c, r] == (byte)Tick.Empty)
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        public Tick GetMarkAt(int col, int row)
        {
            Tick ret = Tick.Empty;

            if (_board != null)
            {
                ret = (Tick)_board[col, row];
            }
            return ret;
        }

        private bool ValidateMove(int col, int row)
        {
            if (_board[col, row] != (byte)Tick.Empty)
            {
                return false;
            }

            return true;
        }

        private static Tick CheckWinnerTotal(int total)
        {
            if (total == (3 * (int)Tick.O))
            {
                return Tick.O;
            }
            if (total == (3 * (int)Tick.X))
            {
                return Tick.X;
            }
            return Tick.Empty;
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Automation\State\ScenarioTests.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using CloudServices.Test.Common.Configuration;
using Multiplayer.Test.API;
using AsyncMultiplayer.SessionCommon;
using AsyncMultiplayer.NotificationService;
using Gds.Contracts;
using System.Net;
using System.Diagnostics;
using System.Threading;
using Multiplayer.Test.Proxy;

namespace Multiplayer.Test.API
{
    [TestClass]
    public class ScenarioTests : TestAreaBase
    {
        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            
            LockTest();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            UnlockTest();
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Validate that YourTurn notifications get deleted when users take their turn")]
        [TestProperty("Type", "FeatureTests")]
        public void P_YourTurnNotificationsGetDeletedWhenUserMakesAMove()
        {
            SessionState createSessionState = null;
            SessionState joinSessionState = null;

            // Player1 creates a new game session
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            // Verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            // Player2 Joins the game
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);
            joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID.ToString(), joinData);

            // Assert SessionState
            AssertJoinSessionState(createSessionState, joinSessionState);

            // Player 1 initializes game state
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;
            this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiableGameState);

            // Now Player2 takes their turn
            modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 0;
            modifiableGameState.GameData = new byte[] { 65, 66, 67, 68, 69 };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameStateProxy.Password = Config.Environment.UserSettings[1].Password;
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            Thread.Sleep(30000);

            // At this point we should have a YourTurn notification created for Player1
            string memberName = Config.Environment.UserSettings[0].Membername;      // player1
            string password = Config.Environment.UserSettings[0].Password;

            List<Notification> notificationList = this.NotificationsServiceProxy.GetNotifications(
                joinSessionState.GameID.ToString(),
                joinSessionState.SessionID,
                (int)Notification.NotificationCategory.ToDo,
                Constants.IGNORE_lAST_ID,
                100,
                Notification.NotificationType.YourTurn.ToString(),
                true,
                memberName,
                password,
                10,
                notificationSleepTime);

            Assert.AreEqual(1, notificationList.Count, "YourTurn Notification Not Found");
            Notification notification = notificationList[0];
            Assert.AreEqual(Notification.NotificationType.YourTurn, notification.Type);

            // Now Player1 takes their turn
            modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 65, 66, 67, 68, 69 };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            Thread.Sleep(30000);

            // Now we refresh the Notification list. We should not find a YourTurn notification for player1
            memberName = Config.Environment.UserSettings[0].Membername;      // player1
            password = Config.Environment.UserSettings[0].Password;

            List<Notification> notificationsList2 = null;

            for (int i = 0; i < 10; i++)
            {
                Thread.Sleep(notificationSleepTime);

                notificationsList2 = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (notificationsList2 != null && notificationsList2.Count == 0)
                {
                    break;
                }
            }

            Assert.IsNotNull(notificationsList2);
            Assert.IsTrue(notificationsList2.Count == 0, "ERROR: Unexpected Number of notifications.");
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Validate that Nudge notifications get deleted when users take their turn")]
        [TestProperty("Type", "FeatureTests")]
        public void P_NudgeNotificationsGetDeletedWhenUserMakesAMove()
        {
            SessionState createSessionState = null;
            SessionState joinSessionState = null;

            // Player1 creates a new game session
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            // Verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            // Player2 Joins the game
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);
            joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID.ToString(), joinData);

            // Assert SessionState
            AssertJoinSessionState(createSessionState, joinSessionState);

            // Player1 initializes game state
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;
            this.GameStateProxy.PutGameState(createSessionState.SessionID, creationData.GameID.ToString(), modifiableGameState);

            SessionState modifiedSessionState = this.GameSessionProxy.ViewSession(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());

            // Player1 Nudges Player2
            GameAction gameAction = new GameAction();
            gameAction.ActionType = GameActionType.UserNudge;
            gameAction.ActionData = new byte[] { 1 };
            gameAction.ActionTime = DateTime.Now;
            gameAction.SequenceNumber = modifiedSessionState.State.SequenceNumber;

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;
            this.GameStateProxy.PostGameAction(modifiedSessionState.SessionID.ToString(), modifiedSessionState.GameID.ToString(), gameAction);

            // At this point Player2 should have a Nudge notification

            string memberName = Config.Environment.UserSettings[1].Membername;      // player2
            string password = Config.Environment.UserSettings[1].Password;

            List<Notification> notificationList1 = this.NotificationsServiceProxy.GetNotifications(
                joinSessionState.GameID.ToString(),
                joinSessionState.SessionID,
                (int)Notification.NotificationCategory.ToDo,
                Constants.IGNORE_lAST_ID,
                100,
                Notification.NotificationType.Nudge.ToString(),
                true,
                memberName,
                password,
                10,
                notificationSleepTime);

            Notification notification = null;
            if (notificationList1.Count > 0)
            {
                notification = notificationList1[0];
            }

            Assert.IsNotNull(notification, "Error: Did not find Notification.");
            Assert.AreEqual(modifiedSessionState.SessionID, notification.SessionId, "Error: SessionID of SessionState & Notification did not match.");
            Assert.AreEqual(modifiedSessionState.GameID, notification.GameId, "Error: GameID of SessionState & Notification did not match.");
            Assert.AreEqual(Notification.NotificationType.Nudge, notification.Type, "Notification Type did not match.");

            // Player2 takes their turn
            modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 0;
            modifiableGameState.GameData = new byte[] { 65, 66, 67, 68, 69 };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameStateProxy.Password = Config.Environment.UserSettings[1].Password;
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            // Now we refresh the Notification list. We should not find a Nudge notification for player2
            memberName = Config.Environment.UserSettings[1].Membername;      // player2
            password = Config.Environment.UserSettings[1].Password;


            List<Notification> notificationsList2 = null;

            for (int i = 0; i < 10; i++)
            {
                Thread.Sleep(notificationSleepTime);

                notificationsList2 = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (notificationsList2 != null && notificationsList2.Count == 0)
                {
                    break;
                }
            }

            Assert.IsNotNull(notificationsList2);
            Assert.IsTrue(notificationsList2.Count == 0, "ERROR:Your Turn notification is not deleted.");
        }
        /// <summary>
        /// Test to validate YourTurn notification deletion once game is complete
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Validate that YourTurn notifications get deleted when game completes")]
        [TestProperty("Type", "FeatureTests")]
        public void P_YourTurnNotificationsDeletedWhenGameEnds()
        {
            SessionState createSessionState = null;
            SessionState joinSessionState = null;

            // Player1 creates a new game session
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameSessionProxy.Password = Config.Environment.UserSettings[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            // Verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            // Player2 Joins the game
            this.GameSessionProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameSessionProxy.Password = Config.Environment.UserSettings[1].Password;
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);
            joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID.ToString(), joinData);

            // Assert SessionState
            AssertJoinSessionState(createSessionState, joinSessionState);

            // Player 1 initializes game state
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;
            this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiableGameState);

            // Now Player2 takes their turn
            modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 0;
            modifiableGameState.GameData = new byte[] { 65, 66, 67, 68, 69 };

            this.GameStateProxy.UserID = Config.Environment.UserSettings[1].Membername;      // player2
            this.GameStateProxy.Password = Config.Environment.UserSettings[1].Password;
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            Thread.Sleep(30000);

            // At this point we should have a YourTurn notification created for Player1
            NotificationsServiceProxy notificationClient = new NotificationsServiceProxy();

            string memberName = Config.Environment.UserSettings[0].Membername;      // player1
            string password = Config.Environment.UserSettings[0].Password;

            List<Notification> notificationList = notificationClient.GetNotifications(
                joinSessionState.GameID.ToString(),
                joinSessionState.SessionID,
                (int)Notification.NotificationCategory.ToDo,
                Constants.IGNORE_lAST_ID,
                100,
                Notification.NotificationType.YourTurn.ToString(),
                true,
                memberName,
                password,
                10,
                notificationSleepTime);

            Assert.AreEqual(1, notificationList.Count, "YourTurn Notification Not Found");
            Notification notification = notificationList[0];
            Assert.AreEqual(Notification.NotificationType.YourTurn, notification.Type);

            //set gameResults 
            GameResults gameResults = GetDefaultTwoPlayerGameResult(joinSessionState.GameID.ToString(),(uint)joinSessionState.Variant);
       
            // Now Player1 ends the game

            this.GameStateProxy.UserID = Config.Environment.UserSettings[0].Membername;      // player1
            this.GameStateProxy.Password = Config.Environment.UserSettings[0].Password;
            this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, joinSessionState.GameID.ToString(),gameResults);

            Thread.Sleep(30000);

            // Now we refresh the Notification list. We should not find a YourTurn notification for player1
            memberName = Config.Environment.UserSettings[0].Membername;      // player1
            password = Config.Environment.UserSettings[0].Password;

            List<Notification> notificationsList2 = null;

            for (int i = 0; i < 10; i++)
            {
                Thread.Sleep(notificationSleepTime);

                notificationsList2 = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.YourTurn.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (notificationsList2 != null && notificationsList2.Count == 0)
                {
                    break;
                }
            }

            Assert.IsNotNull(notificationsList2);
            Assert.IsTrue(notificationsList2.Count == 0, "ERROR: Unexpected Number of notifications.");
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\MPTestHooks\MPTestHooks.svc.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
using System.Web;
using Microsoft.ServiceModel.Web;
using Microsoft.ServiceModel.Web.SpecializedServices;
using System.ServiceModel.Activation;
using System.ServiceModel.Web;
using AsyncMultiplayer.NotificationService;
using AsyncMultiplayer.SessionCommon;

namespace MPTestHooks
{
    [ServiceBehavior(IncludeExceptionDetailInFaults = true, InstanceContextMode = InstanceContextMode.Single, ConcurrencyMode = ConcurrencyMode.Single)]
    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)]
    [ServiceContract]

    public class MPTestHooksService
    {
        [WebHelp(Comment = "Inject a notification to the system.")]
        [WebInvoke(Method = "POST", UriTemplate = "createnotifications")]
        [OperationContract]
        public
        void CreateNotifications(List<Notification> notificationList)
        {
            NotificationsTestHooks.CreateNotifications(notificationList);
        }

        [WebHelp(Comment = "Inject a notification to the system.")]
        [WebInvoke(Method = "GET", UriTemplate = "querygarbagenotifications/?olderthan={olderThanDateTime}")]
        [OperationContract]
        public
        List<Notification> QueryGarbageNotifications(string olderThanDateTime)
        {
            return NotificationsTestHooks.QueryGarbageNotifications(olderThanDateTime);
        }
        
        [WebHelp(Comment = "Inject a User Storage Entry to the system.")]
        [WebInvoke(Method = "GET", UriTemplate = "user?Xuid={xuid}&LastInviteResetTime={lastInviteResetTime}&LastUpdateTime={lastUpdateTime}&InviteCount={inviteCount}")]
        [OperationContract]
        public void CreateUserStorageEntry(string xuid, DateTime lastInviteResetTime, DateTime lastUpdateTime, int inviteCount)
        {
            UserDataAzureStorage userDataStorage =
                new UserDataAzureStorage(
                    Global.AzureTableStorageEndPoint,
                    Global.AzureStorageAccount,
                    Global.AzureStorageToken,
                    Global.ProxyAddress);

            // Check how many invites the user has already sent in the past hour. 
            UserData userData = userDataStorage.GetUserData(xuid);
            if (userData == null)
            {
                userData = new UserData(xuid);
            }
            userData.InviteCount = inviteCount;
            userData.LastInviteResetTime = lastInviteResetTime;
            userData.LastUpdateTime = lastUpdateTime;
            
            userDataStorage.UpdateUserData(userData);

        }

        [WebHelp(Comment = "Begin test")]
        [WebInvoke(Method = "POST", UriTemplate = "begintest/?TestType={testType}")]
        [OperationContract]
        public bool BeginTest(string testType)
        {
            if (testType == "notification")
            {
             if (Global.IsTestLocked)
                        return false;
                    else
                    {
                        Global.IsTestLocked = true;
                        return true;
                    }
            }
            else if (testType == "spotlight")
            {
                if (Global.IsSpotlightTestLocked)
                    return false;
                else
                {
                    Global.IsSpotlightTestLocked = true;
                    return true;
                }
            }
            else if (testType == "gameresult")
            {
                if (Global.IsGameResultTestLocked)
                    return false;
                else
                {
                    Global.IsGameResultTestLocked = true;
                    return true;
                }
            }
            else
            {
                throw new Exception("Need to pass in the test type");
            }
        }

        [WebHelp(Comment = "End Test")]
        [WebInvoke(Method = "POST", UriTemplate = "endtest/?TestType={testType}")]
        [OperationContract]
        public void EndTest(string testType)
        {
            if (testType == "notification")
            {
                Global.IsTestLocked = false;
            }
            else if (testType == "spotlight")
            {
                Global.IsSpotlightTestLocked = false;
            }
            else if (testType == "gameresult")
            {
                Global.IsGameResultTestLocked = false;
            }
            else
            {
                throw new Exception("Need to pass in the test type");
            }
        }
         
        [WebHelp(Comment = "Setup not friends and no FR")]
        [WebInvoke(Method = "POST", UriTemplate = "makenotfsnofr/?user={userXuid}&target={targetXuid}")]
        [OperationContract]
        public void SetupNotFriendsAndNoFR(ulong userXuid, ulong targetXuid)
        {
            NotificationsTestHooks.SetupNotFriendsAndNoFR(userXuid, targetXuid);
        }

        [WebHelp(Comment = "Make friends")]
        [WebInvoke(Method = "POST", UriTemplate = "makefriends/?user={userXuid}&target={targetXuid}")]
        [OperationContract]
        public void SetupFriends(ulong userXuid, ulong targetXuid)
        {
            NotificationsTestHooks.SetupFriends(userXuid, targetXuid);
        }

        [WebHelp(Comment = "Are the users friends?")]
        [WebInvoke(Method = "GET", UriTemplate = "arefriends/?user={userXuid}&target={targetXuid}")]
        [OperationContract]
        public bool AreFriends(ulong userXuid, ulong targetXuid)
        {
           return NotificationsTestHooks.AreFriends(userXuid, targetXuid);
        }

        [WebHelp(Comment = "Does the user have friend request from the target user?")]
        [WebInvoke(Method = "GET", UriTemplate = "hasfr/?user={userXuid}&target={targetXuid}")]
        [OperationContract]
        public bool HasFR(ulong userXuid, ulong targetXuid)
        {
            return NotificationsTestHooks.HasFR(userXuid, targetXuid);
        }

        [WebHelp(Comment = "Accept friend request")]
        [WebInvoke(Method = "POST", UriTemplate = "acceptfr/?user={userXuid}&target={targetXuid}")]
        [OperationContract]
        public void AcceptFR(ulong userXuid, ulong targetXuid)
        {
            NotificationsTestHooks.AcceptFriendRequest(userXuid, targetXuid);
        }

        [WebHelp(Comment = "Add friend request")]
        [WebInvoke(Method = "POST", UriTemplate = "addfr/?user={userXuid}&target={targetXuid}")]
        [OperationContract]
        public void AddFR(ulong userXuid, ulong targetXuid)
        {
            NotificationsTestHooks.AddFriendRequest(userXuid, targetXuid);
        }

        [WebHelp(Comment = "delete FR from target to user if exists.")]
        [WebInvoke(Method = "POST", UriTemplate = "cleanupfr/?user={userXuid}&target={targetXuid}")]
        [OperationContract]
        public void CleanupFR(ulong userXuid, ulong targetXuid)
        {
            NotificationsTestHooks.CleanupFR(userXuid, targetXuid);
        }

        [WebHelp(Comment = "Inject a Session to the system.")]
        [WebInvoke(Method = "POST", UriTemplate = "createsession")]
        [OperationContract]
        public void CreateSession(SessionState sessionState)
        {
            SessionsTestHooks.CreateSession(sessionState);
        }

        [WebHelp(Comment = "Add user to never list")]
        [WebInvoke(Method = "POST", UriTemplate = "addusertoneverlist/?user={userXuid}&target={targetXuid}")]
        [OperationContract]
        public void AddUserToNeverList(ulong userXuid, ulong targetXuid)
        {
            NotificationsTestHooks.AddUserToNeverList(userXuid, targetXuid);
        }

        [WebHelp(Comment = "Remove user from never list")]
        [WebInvoke(Method = "POST", UriTemplate = "removeuserfromneverlist/?user={userXuid}&target={targetXuid}")]
        [OperationContract]
        public void RemoveUserFromNeverList(ulong userXuid, ulong targetXuid)
        {
            NotificationsTestHooks.RemoveUserFromNeverList(userXuid, targetXuid);
        }

        [WebHelp(Comment = "Is user in targets never list?")]
        [WebInvoke(Method = "GET", UriTemplate = "isuserinneverlist/?user={userXuid}&target={targetXuid}")]
        [OperationContract]
        public bool IsUserInNeverList(ulong userXuid, ulong targetXuid)
        {
            return NotificationsTestHooks.IsUserInTargetsNeverList(userXuid, targetXuid);
        }


    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\MPTestHooks\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("MPTestHooks")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("a493d290-bfac-46f8-b5fa-85ef1827e6b3")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\MPTestHooks\Global.asax.cs ===
//-------------------------------------------------------------------
// <copyright file="Global.asax.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
//
// <author email="fgao">
//     Feng Gao
// </author>
//
// <summary>
//  Notification Service FrontEnd Global application
// </summary>
//
// <remarks/>
//
// <disclaimer/>
//
// <history date="10/08/2008">
//     Class created
// </history>
//-------------------------------------------------------------------

namespace MPTestHooks
{
    using System;
    using System.Collections;
    using System.Configuration;
    using System.Data;
    using System.IO;
    using System.Web;
    using System.Web.Security;
    using System.Web.SessionState;
    using System.Xml;
    using System.Xml.XPath;
    using AsyncMultiplayer.Common.AzureStorage;
    using Leet.Core.Configuration;
    using Leet.Core.IO;
    using Leet.Core.IoCCo;
    using Wgx.Services.Monitoring;
    using Leet.Live.Livecache;
    using Leet.Core.Diagnostics;


    /// <summary>
    /// Global Application Class.
    /// </summary>
    public class Global : System.Web.HttpApplication
    {
        /// <summary>
        /// Component Name.
        /// </summary>
        private const string ComponentName = "MPTestHooks";

        /// <summary>
        /// The name used in the NPDB configuration. 
        /// </summary>
        private const string ServiceConfigName = "MPTestHooks_www";

        /// <summary>
        /// Gets the Azure storage account
        /// </summary>
        public static string AzureStorageAccount
        {
            get
            {
                IConfigurationProvider configSettings = Container.Instance.GetComponent<IConfigurationProvider>();
                return configSettings.GetSetting(Settings.NotificationFE_AzureStorageAccount);
            }
        }

        /// <summary>
        /// Gets the Azure storage access token
        /// </summary>
        public static string AzureStorageToken
        {
            get
            {
                IConfigurationProvider configSettings = Container.Instance.GetComponent<IConfigurationProvider>();
                return configSettings.GetSetting(Settings.NotificationFE_AzureStorageToken);
            }
        }

        /// <summary>
        /// Gets the Azure table storage access endpoint.
        /// </summary>
        public static string AzureTableStorageEndPoint
        {
            get
            {
                IConfigurationProvider configSettings = Container.Instance.GetComponent<IConfigurationProvider>();
                return configSettings.GetSetting(Settings.AzureTableStorageEndPoint);
            }
        }

        /// <summary>
        /// Gets the Azure blob storage access endpoint. 
        /// </summary>
        public static string AzureBlobStorageEndPoint
        {
            get
            {
                IConfigurationProvider configSettings = Container.Instance.GetComponent<IConfigurationProvider>();
                return configSettings.GetSetting(Settings.AzureBlobStorageEndPoint);
            }
        }

        /// <summary>
        /// Gets the Azure retry count
        /// </summary>
        public static int AzureRetryCount
        {
            get
            {
                IConfigurationProvider configSettings = Container.Instance.GetComponent<IConfigurationProvider>();
                return configSettings.GetIntSetting(Settings.AzureRetryCount);
            }
        }

        /// <summary>
        /// Gets the Azure queue storage access point. 
        /// </summary>
        public static string AzureQueueStorageEndPoint
        {
            get
            {
                IConfigurationProvider configSettings = Container.Instance.GetComponent<IConfigurationProvider>();
                return configSettings.GetSetting(Settings.AzureQueueStorageEndPoint);
            }
        }

        /// <summary>
        /// Gets the proxy address for the environment. 
        /// </summary>
        public static string ProxyAddress
        {
            get
            {
                IConfigurationProvider configSettings = Container.Instance.GetComponent<IConfigurationProvider>();
                return configSettings.GetSetting(Settings.ProxyAddress);
            }
        }

        private static bool isTestLocked = false;

        public static bool IsTestLocked
        {
            get { return isTestLocked; }
            set { isTestLocked = value; }
        }

        private static bool isSpotlightTestLocked = false;

        public static bool IsSpotlightTestLocked
        {
            get { return isSpotlightTestLocked; }
            set { isSpotlightTestLocked = value; }
        }

        private static bool isGameResultTestLocked = false;

        public static bool IsGameResultTestLocked
        {
            get { return isGameResultTestLocked; }
            set { isGameResultTestLocked = value; }
        }

        /// <summary>
        /// Application OnStart event handler.
        /// </summary>
        /// <param name="sender">Sender object.</param>
        /// <param name="e">Event arguments.</param>
        protected void Application_Start(object sender, EventArgs e)
        {
            // register the configuration providers
            Container.Instance.AddService<IRegistryProvider, RegistryProvider>();
            Container.Instance.AddService<IFileSystem, FileSystem>();
            Container.Instance.AddService<ILogFormatter, LogFormatter>();
            Container.Instance.AddService<ILogging, Logging>();
            ConfigurationSelector.RegisterProvider(ServiceConfigName, "LEET");

            // Initialize perfcounters
            StorageClientPerfCounters.Counters =
                PerformanceCounters.GetPerformanceCounters(typeof(StorageClientPerfCounters), Global.ServiceConfigName);
            LeetLivecacheClient.RegisterServiceInterfacesAndInitialize(ServiceConfigName);
        }

        /// <summary>
        /// Application OnEnd event handler.
        /// </summary>
        /// <param name="sender">Sender object.</param>
        /// <param name="e">Event arguments.</param>
        protected void Application_End(object sender, EventArgs e)
        {
        }

        /// <summary>
        /// Application BeginRequest event handler.
        /// </summary>
        /// <param name="sender">Sender object.</param>
        /// <param name="e">Event arguments.</param>
        protected void Application_BeginRequest(object sender, EventArgs e)
        {
            // TODO: add performance counter start 
        }

        /// <summary>
        /// Application EndRequest event handler.
        /// </summary>
        /// <param name="sender">Sender object.</param>
        /// <param name="e">Event arguments.</param>
        protected void Application_EndRequest(object sender, EventArgs e)
        {
            // TODO: add performance counter stop.  
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\MPTestHooks\SessionsTestHooks.cs ===
﻿using System;
using AsyncMultiplayer.Common.AzureStorage;
using AsyncMultiplayer.SessionCommon;
using AsyncMultiplayer.SessionAzureStorage;
using AsyncMultiplayer.SessionManagementService;
using AsyncMultiplayer.GameStateAzureStorage;
using AsyncMultiplayer.PassThruGameLogicModule;


namespace MPTestHooks
{
    /// <summary>
    /// 
    /// This is a helper class that knows how the Sessions service is built and exposes test hooks
    /// for Test Cases to use.
    /// 
    /// Any logic that needs explicit internal knowledge outside of the Sessions API should be exposed in this class.
    /// 
    /// </summary>
    /// 
    public class SessionsTestHooks
    {
         /// <summary>
        /// This class contains static helper methods and doesn't need to be instantiated.
        /// </summary>
        static SessionsTestHooks()
        {
        }

        /// <summary>
        /// Generic CreateSession method used to inject a Session in the test server specified in App.config
        /// </summary>
        /// <returns></returns>
        public static void CreateSession(SessionState sessionState)
        {
            CreationData creationData = new CreationData();

            creationData.CanRemoveEmptySeats = sessionState.CanRemoveEmptySeats;
            creationData.DisplayName = sessionState.DisplayName;
            creationData.GameID = sessionState.GameID;
            creationData.InactivityWarning = sessionState.InactivityWarning;
            creationData.ReservedSeatsAvailable = sessionState.ReservedSeatsAvailable;
            creationData.SessionParameters = sessionState.SessionParameters;
            creationData.TotalSeatsAvailable = sessionState.SeatsAvailable;
            creationData.Variant = sessionState.Variant;

            StorageAccountInfo account = new StorageAccountInfo(
                new Uri(Global.AzureTableStorageEndPoint),
                null,
                Global.AzureStorageAccount,
                Global.AzureStorageToken,
                false);

            StorageAccountInfo blobAccount = new StorageAccountInfo(
                new Uri(Global.AzureBlobStorageEndPoint),
                null,
                Global.AzureStorageAccount,
                Global.AzureStorageToken,
                false);

            ISessionStorage sessionStorage = new SessionAzureStorage(account, Global.ProxyAddress);

            IGameStateStorage stateStorage = new GameStateAzureStorage(blobAccount, Global.ProxyAddress);
            
            IGameLogicModule gameLogicModule = new PassThruGameLogicModule(stateStorage, sessionStorage);

            sessionStorage.AddSession(sessionState, int.MaxValue);

            gameLogicModule.OnCreateSession(sessionState, creationData);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\MultiplayerProxy\GameSessionProxy.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using System.Xml.Linq;
using System.Runtime.Serialization;
using AsyncMultiplayer.SessionCommon;
using System.IO;
using System.Net;
using System.Configuration;
//using Microsoft.DeviceServices.Utility;

using CloudServices.Test.Common.Configuration;
using CloudServices.Test.Common.Proxy;
using CloudServices.Test.Common.Authorization;

namespace Multiplayer.Test.Proxy
{
    /// <summary>
    /// Client wrapper for the SessionManagementService.
    /// </summary>
    public class GameSessionProxy
    {
        private SessionsService sessionService;
        private XNamespace asyncSessionManagementNamespace = "http://schemas.datacontract.org/2004/07/AsyncMultiplayer.SessionCommon";
        public readonly string GameSessionServiceUrl = Config.Environment.GameSessionService;

        private string SecurityTicketQuery = Config.Environment.StsSettings.StsUrl;
        private string PartnerSecurityTicketQuery = Config.Environment.StsSettings.StsUrl;

        /// <summary>
        /// 
        /// </summary>
        public GameSessionProxy()
        {
            Uri baseUri = new Uri(Config.Environment.GameSessionService);
            this.sessionService = new SessionsService(baseUri.ToString());
            SessionsService.Timeout = int.Parse(ConfigurationManager.AppSettings["Timeout"]);
            this.sessionService.AuthorizationDelegate = () =>
            {
                KeyValuePair<string, string> authzHeader = new KeyValuePair<string, string>("X-PartnerAuthorization", "XBL1.0 x=" + AuthorizationCache.GetPartnerToken(this.UserID, this.Password));
                return authzHeader;
            };
        }

        /// <summary>
        /// 
        /// </summary>
        public string UserID
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public string Password
        {
            get;
            set;
        }

        public SessionState CreateSession(string locale, Leet.Core.Platforms.PlatformType platformType, CreationData creationData)
        {
            Dictionary<string, string> httpHeaders = this.sessionService.GetHttpHeaders(locale, platformType);
            return CreateSession(httpHeaders, creationData);
        }

        public SessionState CreateSession(Dictionary<string, string> httpHeaders, CreationData creationData)
        {
            return this.sessionService.CreateSession(httpHeaders, creationData);
        }

        /// 
        /// <summary>
        /// Client wrapper for the SessionManagementService's CreateSessionInXml() method.
        /// </summary>
        /// 
        public SessionState CreateSession(string gameID, CreationData creationData)
        {
            Dictionary<string, string> httpHeaders = this.sessionService.GetHttpHeaders("en-US", Leet.Core.Platforms.PlatformType.Mobile);
            return CreateSession(httpHeaders, gameID, creationData);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="gameID"></param>
        /// <param name="creationData"></param>
        /// <param name="userName"></param>
        /// <param name="password"></param>
        /// <returns></returns>
        public SessionState CreateSession(string gameID, CreationData creationData, string userName, string password)
        {
            this.UserID = userName;
            this.Password = password;
            return CreateSession(gameID, creationData);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="httpHeaders"></param>
        /// <param name="gameID"></param>
        /// <param name="creationData"></param>
        /// <returns></returns>
        public SessionState CreateSession(Dictionary<string, string> httpHeaders, string gameID, CreationData creationData)
        {
            return this.sessionService.CreateSession(httpHeaders, gameID, creationData);
        }

        public SessionState CreateSession(string memberName,
            string password,
            string locale,
            Leet.Core.Platforms.PlatformType platformType,
            InactivityWarningAction inactivityWarningAction,
            int inactivityWarningInterval,
            int inactivityWarningMaxNudges,
            byte[] sessionParameters,
            uint gameId,
            int variant,
            int totalSeatsAvailable,
            int reservedSeatsAvailable,
            bool canRemoveEmptySeats,
            string displayName
            )
        {
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = inactivityWarningAction;
            iwb.Interval = inactivityWarningInterval;
            iwb.MaxNumberOfNudges = inactivityWarningMaxNudges;

            CreationData creationData = new CreationData();
            creationData.GameID = gameId;
            creationData.Variant = variant;
            creationData.TotalSeatsAvailable = totalSeatsAvailable;
            creationData.ReservedSeatsAvailable = reservedSeatsAvailable;   //with current implementation TotalSeatsAvailable should be equal to ReservedSeatsAvailable
            creationData.SessionParameters = sessionParameters;
            creationData.InactivityWarning = iwb;
            creationData.CanRemoveEmptySeats = canRemoveEmptySeats;
            creationData.DisplayName = displayName;

            this.UserID = memberName;
            this.Password = password;
            SessionState sessionState = this.CreateSession(locale, platformType, creationData);

            return sessionState;
        }


        /// 
        /// <summary>
        /// Client wrapper for the SessionManagementService's JoinSessionInXml() method.
        /// </summary>
        /// 
        public SessionState JoinSession(string sessionId, JoinData joinData)
        {
            Dictionary<string, string> httpHeaders = this.sessionService.GetHttpHeaders("en-US", Leet.Core.Platforms.PlatformType.Mobile);
            return this.sessionService.JoinSession(httpHeaders, sessionId, joinData);
        }

        public SessionState JoinSession(string sessionId, JoinData joinData, string userName, string password)
        {
            this.UserID = userName;
            this.Password = password;
            return JoinSession(sessionId, joinData);
        }

        /// 
        /// <summary>
        /// Client wrapper for the SessionManagementService's RejectInvitation() method.
        /// </summary>
        /// 
        public void RejectInvitation(string gameIDString, string sessionID)
        {
            Dictionary<string, string> httpHeaders = this.sessionService.GetHttpHeaders("en-US", Leet.Core.Platforms.PlatformType.Mobile);
            this.sessionService.RejectInvitation(httpHeaders, sessionID, gameIDString);
        }

        public void RejectInvitation(string gameIDString, string sessionID, string userName, string password)
        {
            this.UserID = userName;
            this.Password = password;
            RejectInvitation(sessionID, gameIDString);
        }

        /// 
        /// <summary>
        /// Client wrapper for the SessionManagementService's LeaveSession() method.
        /// </summary>
        /// 
        public void LeaveSession(string sessionID, string gameID)
        {
            Dictionary<string, string> httpHeaders = this.sessionService.GetHttpHeaders("en-US", Leet.Core.Platforms.PlatformType.Mobile);
            this.sessionService.LeaveSession(httpHeaders, sessionID, gameID);
        }

        public void LeaveSession(string sessionID, string gameID, string userName, string password)
        {
            this.UserID = userName;
            this.Password = password;
            LeaveSession(sessionID, gameID);
        }

        /// 
        /// <summary>
        /// Client wrapper for the SessionManagementService's ModifySession() method.
        /// </summary>
        /// 
        public void ModifySession(string sessionID, string gameID, ModificationData modificationData)
        {
            Dictionary<string, string> httpHeaders = this.sessionService.GetHttpHeaders("en-US", Leet.Core.Platforms.PlatformType.Mobile);
            this.sessionService.ModifySession(httpHeaders, sessionID, gameID, modificationData);
        }

        public void ModifySession(string sessionID, string gameID, ModificationData modificationData, string userName, string password)
        {
            this.UserID = userName;
            this.Password = password;
            ModifySession(sessionID, gameID, modificationData);
        }
        /// 
        /// <summary>
        /// Client wrapper for the SessionManagementService's ViewSessionInXml() method.
        /// </summary>
        /// 
        public SessionState ViewSession(string sessionID, string gameID)
        {
            Dictionary<string, string> httpHeaders = this.sessionService.GetHttpHeaders("en-US", Leet.Core.Platforms.PlatformType.Mobile);
            return this.sessionService.ViewSession(httpHeaders, sessionID, gameID);
        }

        public SessionState ViewSession(string sessionID, string gameID, string userName, string password)
        {
            this.UserID = userName;
            this.Password = password;
            return ViewSession(sessionID, gameID);
        }

        /// 
        /// <summary>
        /// Client wrapper for the SessionManagementService's ViewSessionSummariesInXml() method.
        /// </summary>
        /// 
        public SessionEntry[] ViewSessionSummaries(string gameId, string variant, string lastSessionID, string lastGameID, string maxSessions, string showSessionType)
        {
            Dictionary<string, string> httpHeaders = this.sessionService.GetHttpHeaders("en-US", Leet.Core.Platforms.PlatformType.Mobile);
            return this.sessionService.ViewSessionSummaries(httpHeaders, gameId, variant, lastSessionID, lastGameID, maxSessions, showSessionType);
        }

        public SessionEntry[] ViewSessionSummaries(string gameId, string variant, string lastSessionID, string lastGameID, string maxSessions, string showSessionType, string userName, string password)
        {
            this.UserID = userName;
            this.Password = password;
            return ViewSessionSummaries(gameId, variant, lastSessionID, lastGameID, maxSessions, showSessionType);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\MultiplayerProxy\CertBasedNotificationServiceProxy.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Configuration;
using System.Security.Cryptography.X509Certificates;
using AsyncMultiplayer.NotificationService;
using Leet.Core.Platforms;
using CloudServices.Test.Common.Configuration;

namespace Multiplayer.Test.Proxy
{
    public class CertBasedNotificationServiceProxy : NotificationFEService
    {
        //Just add a header nefse and a certificate nefse
        public X509Certificate2 cert;
        string locale;

        public CertBasedNotificationServiceProxy()
        {
            cert = InstallClientCertificate();
            locale = "en-US";
            serviceEndPoint = Config.Environment.NotificationsServicePrivate;
            Timeout = int.Parse(ConfigurationManager.AppSettings["Timeout"]);
        }

        public List<Notification> GetNotifications(
           string gameId,
           string sessionId,
           int category,
           string lastId,
           int count,
           string type,
           bool userVisibleOnly,
           string eTag,
           string userXuid)
        {

            return GetNotifications(
                GetHttpHeaders(this.locale, eTag, PlatformType.Mobile, userXuid), gameId, sessionId, category, lastId, count, type, userVisibleOnly, cert);
        }

        public void UpdateNotification(
            string notificationId,
            string status,
            string userXuid)
        {
            UpdateNotification(GetHttpHeaders(this.locale, null, PlatformType.Mobile, userXuid), notificationId, status, cert);
        }

        public void DeleteNotificationQuery(
            string notificationId,
            string userXuid)
        {

            DeleteNotificationQuery(GetHttpHeaders(this.locale, null, PlatformType.Mobile, userXuid), notificationId, cert);
        }

        public void DeleteNotificationBySession(
            string gameIdString,
            string sessionId,
            string userXuid)
        {
            DeleteNotificationBySession(GetHttpHeaders(this.locale, null, PlatformType.Mobile, userXuid), gameIdString, sessionId, cert);
        }

        public void SendInvite(InviteRequest inviteRequest, string userXuid)
        {
            SendInvite(GetHttpHeaders(this.locale, null, PlatformType.Mobile, userXuid), inviteRequest, cert);
        }

        public static X509Certificate2 InstallClientCertificate()
        {
            return CloudServices.Test.Common.Authorization.Authorization.InstallClientCertificate(ConfigurationManager.AppSettings["InternalClientCertName"], ConfigurationManager.AppSettings["InternalClientCertThumbprint"], ConfigurationManager.AppSettings["InternalClientCertPwd"], "Internal");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\MultiplayerProxy\GameStateProxy.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using System.Xml.Linq;
using System.Runtime.Serialization;
using CloudServices.Test.Common.Configuration;
using AsyncMultiplayer.SessionCommon;
using System.IO;
using System.Net;
using System.Configuration;
using CloudServices.Test.Common.Authorization;

namespace Multiplayer.Test.Proxy
{
    /// <summary>
    /// Client wrapper for the SessionManagementService.
    /// </summary>
    public class GameStateProxy
    {
        private StateService stateService;

        private string SecurityTicketQuery = Config.Environment.StsSettings.StsUrl;
        private string PartnerSecurityTicketQuery = Config.Environment.StsSettings.StsUrl;

        /// <summary>
        /// 
        /// </summary>
        public GameStateProxy()
        {
            Uri baseUri = new Uri(Config.Environment.GameStateService);
            this.stateService = new StateService(baseUri.ToString());
            StateService.Timeout = int.Parse(ConfigurationManager.AppSettings["Timeout"]);
            this.stateService.AuthorizationDelegate = () =>
            {
                KeyValuePair<string, string> authzHeader = new KeyValuePair<string, string>("X-PartnerAuthorization", "XBL1.0 x=" + AuthorizationCache.GetPartnerToken(this.UserID, this.Password));
                return authzHeader;
            };
        }

        /// <summary>
        /// 
        /// </summary>
        public string UserID
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public string Password
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="gameId"></param>
        /// <param name="sessionId"></param>
        /// <returns></returns>
        public FullGameState GetGameState(string sessionId, string gameId)
        {
            Dictionary<string, string> httpHeaders = this.stateService.GetHttpHeaders();
            return GetGameState(httpHeaders, sessionId, gameId);
        }

        public FullGameState GetGameState(string sessionId, string gameId, string userName, string password)
        {
            this.UserID = userName;
            this.Password = password;
            return GetGameState(sessionId, gameId);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="httpHeaders"></param>
        /// <param name="gameId"></param>
        /// <param name="sessionId"></param>
        /// <returns></returns>
        public FullGameState GetGameState(Dictionary<string, string> httpHeaders, string sessionId, string gameId)
        {
            return this.stateService.GetGameState(httpHeaders, sessionId, gameId);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        /// <param name="gameState"></param>
        public void PutGameState(string sessionId, string gameId, ModifiableGameState gameState)
        {
            Dictionary<string, string> httpHeaders = this.stateService.GetHttpHeaders();
            PutGameState(httpHeaders, sessionId, gameId, gameState);
        }
        public void PutGameState(string sessionId, string gameId, ModifiableGameState gameState, string userName, string password)
        {
            this.UserID = userName;
            this.Password = password;
            PutGameState(sessionId, gameId, gameState);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="httpHeaders"></param>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        /// <param name="gameState"></param>
        public void PutGameState(Dictionary<string, string> httpHeaders, string sessionId, string gameId, ModifiableGameState gameState)
        {
            this.stateService.PutGameState(httpHeaders, sessionId, gameId, gameState);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        /// <param name="results"></param>
        public void PostGameEnd(string sessionId, string gameId, GameResults results)
        {
            Dictionary<string, string> httpHeaders = this.stateService.GetHttpHeaders();
            this.stateService.PostGameEnd(httpHeaders, sessionId, gameId, results);
        }
        public void PostGameEnd(string sessionId, string gameId, GameResults results, string userName, string password)
        {
            this.UserID = userName;
            this.Password = password;
            PostGameEnd(sessionId, gameId, results);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="httpHeaders"></param>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        /// <param name="results"></param>
        public void PostGameEnd(Dictionary<string, string> httpHeaders, string sessionId, string gameId, GameResults results)
        {
            this.stateService.PostGameEnd(httpHeaders, sessionId, gameId, results);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        /// <param name="gameAction"></param>
        public void PostGameAction(string sessionId, string gameId, GameAction gameAction)
        {
            Dictionary<string, string> httpHeaders = this.stateService.GetHttpHeaders();
            this.stateService.PostGameAction(httpHeaders, sessionId, gameId, gameAction);
        }
        public void PostGameAction(string sessionId, string gameId, GameAction gameAction, string userName, string password)
        {
            this.UserID = userName;
            this.Password = password;
            PostGameAction(sessionId, gameId, gameAction);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="httpHeaders"></param>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        /// <param name="gameAction"></param>
        public void PostGameAction(Dictionary<string, string> httpHeaders, string sessionId, string gameId, GameAction gameAction)
        {
            this.stateService.PostGameAction(httpHeaders, sessionId, gameId, gameAction);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\MPTestHooks\NotificationsTestHooks.cs ===
﻿using System;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System.Text;
using System.IO;
using AsyncMultiplayer.Common.AzureStorage;
using AsyncMultiplayer.NotificationService;
using Leet.Live.Livecache.DataAccess;
using Leet.Live.Livecache.Logic.Profile;
using Leet.Live.Livecache;
using Leet.Live.Livecache.Providers;
using Leet.Core.IoCCo;
using System.Threading;
using System.Data.Services.Client;
using xonline.common.webplatform.livecache;
using xonline.common.protocol;

namespace MPTestHooks
{
    /// <summary>
    /// 
    /// This is a helper class that knows how the Notifications service is built and exposes test hooks
    /// for Test Cases to use.
    /// 
    /// Any logic that needs explicit internal knowledge outside of the Notifications API should be exposed in this class.
    /// 
    /// </summary>
    public class NotificationsTestHooks
    {

        private const int XBLFRPROCESSTIMEINSEC = 120;

        /// <summary>
        /// This class contains static helper methods and doesn't need to be instantiated.
        /// </summary>
        private NotificationsTestHooks()
        {
        }

        public static void CreateNotifications(List<Notification> notificationList)
        {
            Hashtable userXuidHash = new Hashtable();
            NotificationDataServiceContext svc = new NotificationDataServiceContext(new StorageAccountInfo(new Uri(Global.AzureTableStorageEndPoint), null, Global.AzureStorageAccount, Global.AzureStorageToken, false));
            svc.RetryPolicy = RetryPolicies.RetryN(3, TimeSpan.FromSeconds(1));
            svc.ProxyAddress = Global.ProxyAddress;
            foreach (Notification n in notificationList)
            {
                NotificationAzureTableEntity entity = new NotificationAzureTableEntity(n);
                svc.AddObject(NotificationDataServiceContext.NotificationTableName, entity);
                if (n.Category != Notification.NotificationCategory.Info)
                {
                    // find the previous one and delete it. 
                    NotificationQueryParameter queryParameter = new NotificationQueryParameter();
                    queryParameter.Type = (uint)n.Type;
                    queryParameter.GameId = n.GameId;
                    queryParameter.SessionId = n.SessionId;
                    foreach (NotificationAzureTableEntity existEntity in GetEntityListByUserId(svc, n.UserId))
                    {
                        if (existEntity.SatisfyQueryParamter(queryParameter, true))
                        {
                            svc.DeleteObject(existEntity);
                            break;
                        }
                    }
                }
                if (!userXuidHash.ContainsKey(n.UserId))
                {
                userXuidHash.Add(n.UserId, "Don't care");
                }
            }
            svc.SaveChangesWithRetries();
            ICollection userXuids = userXuidHash.Keys;
            foreach (string userXuid in userXuids)
            {
                UpdateUsersLastUpdateTime(userXuid);
            }
        }

        public static List<Notification> QueryGarbageNotifications(string olderThanDateTime)
        {
            IEnumerable<NotificationAzureTableEntity> entityList = GetEntityListByDate(olderThanDateTime);
            List<Notification> nList = new List<Notification>();
            foreach (NotificationAzureTableEntity entity in entityList)
            {
                Notification.NotificationType type = (Notification.NotificationType)Enum.ToObject(
                    typeof(Notification.NotificationType),
                    entity.Type);

                Notification notification = Notification.DeserializeFromString(entity.NotificationString, type);
                nList.Add(notification);
            }
            return nList;
        }

        private static string UpdateUsersLastUpdateTime(string userXuid)
        {
            string returnValue = string.Empty;

            try
            {
                UserDataAzureStorage userDataStorage = new UserDataAzureStorage(
                    Global.AzureTableStorageEndPoint,
                    Global.AzureStorageAccount,
                    Global.AzureStorageToken,
                    Global.ProxyAddress);

                userDataStorage.UpdateUserDataTimeStamp(userXuid);
            }
            catch (Exception e)
            {
                // If you get here there's a problem in the Azure service
                throw e;
            }
            return returnValue;
        }

        private static IEnumerable<NotificationAzureTableEntity> GetEntityListByUserId(
            NotificationDataServiceContext svc,
            string userId)
        {
            var queryResult = from c in svc.AsyncNotificationTable
                              where c.PartitionKey == userId
                              select c;

            TableStorageDataServiceQuery<NotificationAzureTableEntity> query =
                new TableStorageDataServiceQuery<NotificationAzureTableEntity>(queryResult as DataServiceQuery<NotificationAzureTableEntity>, svc.RetryPolicy);

            IEnumerable<NotificationAzureTableEntity> res = query.ExecuteAllWithRetries();
            return res;
        }

        private static IEnumerable<NotificationAzureTableEntity> GetEntityListByDate(string olderThanDateTime)
        {
            NotificationDataServiceContext svc = new NotificationDataServiceContext(new StorageAccountInfo(new Uri(Global.AzureTableStorageEndPoint), null, Global.AzureStorageAccount, Global.AzureStorageToken, false));
            svc.RetryPolicy = RetryPolicies.RetryN(2, TimeSpan.FromSeconds(1));
            svc.ProxyAddress = Global.ProxyAddress;
            var queryResult = from c in svc.AsyncNotificationTable
                              where c.SentTime.CompareTo(DateTime.Parse(olderThanDateTime)) < 0 //could be really slow as it is not querying by row key or partition key                              select c;
                              select c;
            TableStorageDataServiceQuery<NotificationAzureTableEntity> query =
                new TableStorageDataServiceQuery<NotificationAzureTableEntity>(queryResult as DataServiceQuery<NotificationAzureTableEntity>, svc.RetryPolicy);
            IEnumerable<NotificationAzureTableEntity> res = query.ExecuteAllWithRetries();
            return res;
        }

        public static bool HasFriendState(ulong userXuid, ulong targetXuid, FriendState friendState)
        {
            bool friendInfo = false;
            var presenceDataAccess = Container.Instance.GetComponent<IPresenceDataAccess>();
            IReadOnlyFriendInfo[] xboxFriendsInfo = null;

            LIVEnServiceMobileExtendedAuthDataProvider.Puid = userXuid;
            xboxFriendsInfo = presenceDataAccess.GetFriendsInfo(userXuid, true, false);

            if (xboxFriendsInfo != null)
            {
                var friendsRequesting = xboxFriendsInfo.Where(item => (item.FriendState == friendState & item.LivePuid == targetXuid));

                if ((friendsRequesting != null) && (friendsRequesting.Count() > 0))
                {
                    friendInfo = true;
                }
            }
            return friendInfo;
        }

        public static void AcceptFriendRequest(ulong userXuid, ulong targetXuid)
        {
            var presenceDataAccess = Container.Instance.GetComponent<IPresenceDataAccess>();
            LIVEnServiceMobileExtendedAuthDataProvider.Puid = userXuid;
            presenceDataAccess.AcceptFriendRequest(userXuid, targetXuid);
        }

        public static void AddFriendRequest(ulong userXuid, ulong targetXuid)
        {
            var presenceDataAccess = Container.Instance.GetComponent<IPresenceDataAccess>();
            LIVEnServiceMobileExtendedAuthDataProvider.Puid = userXuid;
            presenceDataAccess.AddFriend(userXuid, targetXuid);
        }

        public static void RejectFriendRequest(ulong userXuid, ulong targetXuid)
        {
            var presenceDataAccess = Container.Instance.GetComponent<IPresenceDataAccess>();
            LIVEnServiceMobileExtendedAuthDataProvider.Puid = userXuid;
            presenceDataAccess.RejectFriendRequest(userXuid, targetXuid);
        }

        public static void DeleteFriend(ulong userXuid, ulong targetXuid)
        {
            var presenceDataAccess = Container.Instance.GetComponent<IPresenceDataAccess>();
            LIVEnServiceMobileExtendedAuthDataProvider.Puid = userXuid;
            presenceDataAccess.DeleteFriend(userXuid, targetXuid);
        }

        public static void VerifyFriendRequest(ulong userXuid, ulong targetXuid, string message)
        {
            for (int i = 0; i < 10; i++)
            {
                if (HasFriendState(userXuid, targetXuid, FriendState.Requesting))
                    return;
                else
                    Thread.Sleep(XBLFRPROCESSTIMEINSEC * 100);
            }
        }
        
        public static void SetupNotFriendsAndNoFR(ulong userXuid, ulong targetXuid)
        {
            if (HasFriendState(userXuid, targetXuid, FriendState.Friend))
                DeleteFriend(userXuid, targetXuid);
            if (HasFriendState(userXuid, targetXuid, FriendState.Requesting))
                RejectFriendRequest(userXuid, targetXuid);
            if (HasFriendState(userXuid, targetXuid, FriendState.Pending))
                RejectFriendRequest(targetXuid, userXuid);
        }
        public static void SetupFriends(ulong userXuid, ulong targetXuid)
        {
            if (!HasFriendState(userXuid, targetXuid, FriendState.Friend))
            {
                AddFriendRequest(targetXuid, userXuid);
                VerifyFriendRequest(userXuid, targetXuid, "Couldn't find friend request that was just added to XBL");
                AcceptFriendRequest(userXuid, targetXuid);
            }
        }

        public static bool HasFR(ulong userXuid, ulong targetXuid)
        {
            return HasFriendState(userXuid, targetXuid, FriendState.Requesting);
        }

        public static bool AreFriends(ulong userXuid, ulong targetXuid)
        {
            return HasFriendState(userXuid, targetXuid, FriendState.Friend);
        }
  
        public static void CleanupFR(ulong userXuid, ulong targetXuid)
        {
            if (HasFriendState(userXuid, targetXuid, FriendState.Requesting))
                RejectFriendRequest(userXuid, targetXuid);
        }

        public static void AddUserToNeverList(ulong userXuid, ulong targetXuid)
        {
            AddUsersToNeverListMsg request = new AddUsersToNeverListMsg();
            request.qwUserID = userXuid;
            request.rgqwNeverListUsers = new ulong[] { targetXuid };
            request.cNeverListUserCount = 1;
            LIVEnServiceMobileExtendedAuthDataProvider.Puid = userXuid;
            var _lcPresence = Container.Instance.GetComponent<ILcPresence>();
            _lcPresence.AddUsersToNeverList(request);
        }

        public static void RemoveUserFromNeverList(ulong userXuid, ulong targetXuid)
        {
            RemoveUsersFromNeverListMsg request = new RemoveUsersFromNeverListMsg();
            request.qwUserID = userXuid;
            request.rgqwNeverListUsers = new ulong[] { targetXuid };
            request.cNeverListUserCount = 1;
            LIVEnServiceMobileExtendedAuthDataProvider.Puid = userXuid;
            var _lcPresence = Container.Instance.GetComponent<ILcPresence>();
            _lcPresence.RemoveUsersFromNeverList(request);
        }

        public static bool IsUserInTargetsNeverList(ulong userXuid, ulong targetXuid)
        {
            LIVEnServiceMobileExtendedAuthDataProvider.Puid = userXuid;
            var presenceDataAccess = Container.Instance.GetComponent<IPresenceDataAccess>();
            uint[] hrResults = presenceDataAccess.CanSendMessageToUsers(userXuid, new ulong[] { targetXuid });
            if (hrResults[0] == LivecacheConstants.XONLINE_E_MESSAGE_SENDER_BLOCKED)
                return true;
            else
                return false;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\MultiplayerProxy\NotificationFEService.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using CloudServices.Test.Common.Proxy;
using AsyncMultiplayer.NotificationService;
using Gds.Contracts;
using Leet.Core.Platforms;
using CloudServices.Test.Common.Configuration;
using System.Security.Cryptography.X509Certificates;


namespace Multiplayer.Test.Proxy
{
    public class NotificationFEService : RestRequest
    {
        public const string GetNotificationsUrlFormat = "/game/{gameId}";
        public const string DeleteNotificationsBySessionUrlFormat = "deletesession/?game={gameIdString}&session={sessionId}";
        public const string DeleteNotificationsUrlFormat = "delete/?notification={notificationId}";
        public const string SpotlightUrlFormat = "Spotlight/?carrier={carrierString}";
        public const string UpdateNotificationUrlFormat = "update/?notification={notificationId}&status={status}";
        public string serviceEndPoint;

        public string EtagInResponse
        {
            get;
            private set;
        }

        public string BaseUri
        {
            get;
            set;
        }

        public Dictionary<string, string> GetHttpHeaders(string locale, string eTag, PlatformType platformType, string xuid)
        {
            Dictionary<string, string> httpHeaders = base.GetHttpHeaders();
            if (!String.IsNullOrEmpty(locale))
                httpHeaders.Add("X-Locale", locale);
            if (eTag != null)
                httpHeaders.Add("If-None-Match", eTag);
            if (!string.IsNullOrEmpty(xuid))
                httpHeaders.Add("X-Xuid", xuid);
            httpHeaders.Add("X-Platform-Type", ((uint)platformType).ToString());
            return httpHeaders;
        }

        public Dictionary<string, string> GetHttpHeaders(string locale, string eTag, PlatformType platformType)
        {
            return GetHttpHeaders(locale, eTag, platformType, null);
        }

        public List<Notification> GetNotifications(
            Dictionary<string, string> httpHeaders,
            string gameId,
            string sessionId,
            int category,
            string lastId,
            int count,
            string typeString,
            bool userVisibleOnly,
            X509Certificate2 cert)
        {
            string url = String.Format("{0}/?game={1}&session={2}&category={3}&last={4}&count={5}&type={6}&userVisibleOnly={7}",
                serviceEndPoint,
                gameId,
                sessionId,
                category,
                lastId,
                count,
                typeString,
                userVisibleOnly);

            RestResponse response = Get(url, httpHeaders, cert);
            if (response.Headers.ContainsKey("ETag"))
            {
                this.EtagInResponse = response.Headers["ETag"];
            }
            else
                this.EtagInResponse = null;

            if (!response.Succeeded)
            {
                throw new RestException(response);
            }
            return DeserializeObject<NotificationList>(response.Body);
        }

        public void UpdateNotification(
            Dictionary<string, string> httpHeaders,
            string notificationId,
            string status,
            X509Certificate2 cert)
        {
            string uri = String.Format("{0}update/?notification={1}&status={2}",
                serviceEndPoint,
                notificationId,
                status);

            RestResponse rr = Put(uri, httpHeaders, null, cert);

            if (!rr.Succeeded)
            {
                throw new RestException(rr);
            }
        }

        public void DeleteNotificationQuery(
            Dictionary<string, string> customHeaders,
            string notificationId,
            X509Certificate2 cert)
        {
            string uri = String.Format("{0}delete/?notification={1}",
                serviceEndPoint,
                notificationId);

            RestResponse rr = Delete(uri, customHeaders, cert);
            if (!rr.Succeeded)
            {
                throw new RestException(rr);
            }
        }

        public void DeleteNotificationBySession(
            Dictionary<string, string> customHeaders,
            string gameIdString,
            string sessionId,
            X509Certificate2 cert)
        {

            string uri = String.Format("{0}deletesession/?game={1}&session={2}",
                serviceEndPoint,
                gameIdString,
                sessionId);

            RestResponse rr = Delete(uri, customHeaders, cert);
            if (!rr.Succeeded)
            {
                throw new RestException(rr);
            }
        }

        public void SendInvite(
            Dictionary<string, string> customHeaders,
            InviteRequest request,
            X509Certificate2 cert)
        {
            string uri;
            if (serviceEndPoint.EndsWith("/"))
            {
                uri = String.Format("{0}invite/",
                      serviceEndPoint);
            }
            else
            {
                uri = String.Format("{0}/invite/",
                      serviceEndPoint);
            }

            RestResponse rr = Post(uri, customHeaders, SerializeObject(request), cert);
            if (!rr.Succeeded)
            {
                throw new RestException(rr);
            }
        }

        public List<Spotlight> GetSpotlight(
            Dictionary<string, string> customHeaders,
            string carrierString)
        {
            string uri = String.Format("{0}Spotlight/", serviceEndPoint);

            if (carrierString != null)
            {
                uri += String.Format("?carrier={0}/", carrierString);
            }

            RestResponse rr = Get(uri, customHeaders);

            if (rr.Headers.ContainsKey("ETag"))
            {
                // If you query for Spotlight with an unsupported language+locale combination you don't get an ETag back
                this.EtagInResponse = rr.Headers["ETag"];
            }
            else
            {
                this.EtagInResponse = null;
            }

            if (!rr.Succeeded)
            {
                throw new RestException(rr);
            }

            if (string.IsNullOrEmpty(rr.Body))
            {
                return null;
            }
            else
                return new List<Spotlight>(DeserializeObject<Spotlight[]>(rr.Body));
        }

        public LeaderboardResult GetLeaderboard(
            Dictionary<string, string> customHeaders,
            string gameId,
            string variant,
            string property,
            string rankStart,
            string dataGroup,
            string numRows,
            string socialGraph)
        {
            string uri = String.Format("{0}leaderboard?format=xml&gameId={1}&variant={2}&property={3}&datagroup={5}&numRows={6}&rankStart={4}&socialGraph={7}",
                            Config.Environment.GameDataService,
                            gameId,
                            variant,
                            property,
                            rankStart,
                            dataGroup,
                            numRows,
                            socialGraph);

            RestResponse rr = Get(uri, customHeaders);
            if (!rr.Succeeded)
            {
                throw new RestException(rr);
            }
            return DeserializeObject<LeaderboardResult>(rr.Body);
        }


    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\MultiplayerProxy\NotificationsServiceProxy.cs ===
﻿using System;
using System.Net;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml.Linq;
using System.Configuration;
using System.IO;
using System.Runtime.Serialization;
using System.Threading;
using AsyncMultiplayer.NotificationService;
using CloudServices.Test.Common.Authorization;
using CloudServices.Test.Common.Configuration;
using Gds.Contracts;
using Leet.Core.Platforms;

namespace Multiplayer.Test.Proxy
{
    public class NotificationsServiceProxy : NotificationFEService
    {
        public string UserID
        {
            get;
            set;
        }
        public string Password
        {
            get;
            set;
        }

        public string Locale
        {
            get;
            set;
        }

        public NotificationsServiceProxy()
        {
            serviceEndPoint = Config.Environment.NotificationsService;
            //todo(michperr): Refactor the delegate so it can take a username/pw as parameters
            this.UserID = Config.Environment.UserSettings[0].Membername;
            this.Password = Config.Environment.UserSettings[0].Password;
            
            //todo(michperr): Fix all the api's to take locale in direclty
            this.Locale = "en-US";

            this.AuthorizationDelegate = () =>
                {
                    KeyValuePair<string, string> authzHeader = new KeyValuePair<string, string>("X-Authorization", "XBL1.0 x=" + AuthorizationCache.GetStsToken(this.UserID, this.Password));
                    return authzHeader;
                };
            Uri baseUri = new Uri(Config.Environment.NotificationsService);
            base.BaseUri = baseUri.ToString();
            Timeout = int.Parse(ConfigurationManager.AppSettings["Timeout"]);
        }

        public List<Notification> GetNotifications(
           string gameId,
           string sessionId,
           int category,
           string lastId,
           int count,
           string type,
           bool userVisibleOnly,
           string eTag)
        {

            return GetNotifications(
                GetHttpHeaders(this.Locale, eTag, PlatformType.Mobile), gameId, sessionId, category, lastId, count, type, userVisibleOnly, null);
        }

        public List<Notification> GetNotifications(
            string gameIdString,
            string sessionId,
            int category,
            string lastId,
            int count,
            string typeString,
            bool userVisibleOnly)
        {
            return GetNotifications(gameIdString, sessionId, category, lastId, count, typeString, userVisibleOnly, null);
        }

        public List<Notification> GetNotifications(
            string gameIdString,
            string sessionId,
            int category,
            string lastId,
            int count,
            string typeString,
            bool userVisibleOnly,
            string memberName,
            string password,
            int timesToQuery,
            int timeoutMs)
        {
            this.UserID = memberName;
            this.Password = password;

            List<Notification> retVal;

            for (int x = 0; x < timesToQuery; x++)
            {
                Thread.Sleep(timeoutMs);
                retVal = GetNotifications(gameIdString, sessionId, category, lastId, count, typeString, userVisibleOnly, null);
                if (retVal != null && retVal.Count != 0)
                {
                    return retVal;
                }
            }
            throw new ApplicationException(String.Format("waited {0} ms {1} times.  No notifications returned", timeoutMs, timesToQuery));
        }

        /// <summary>
        /// Client wrapper for the Notification Server's GetNotifications() method
        /// </summary>
        public List<Notification> GetNotifications(
            string gameIdString,
            string sessionId,
            int category,
            string lastId,
            int count,
            string typeString,
            bool userVisibleOnly,
            string memberName,
            string password,
            string eTag)
        {
            this.UserID = memberName;
            this.Password = password;

            return GetNotifications(gameIdString, sessionId, category, lastId, count, typeString, userVisibleOnly, eTag);
        }

        /// <summary>
        /// Client wrapper for the Notification Server's UpdateNotification() method
        /// </summary>
        public void UpdateNotification(
            string notificationId,
            string status)
        {
            UpdateNotification(GetHttpHeaders(this.Locale, null, PlatformType.Mobile), notificationId, status, null);
        }
        
        /// <summary>
        /// Client wrapper for the Notification Server's UpdateNotification() method
        /// </summary>
        public void UpdateNotification(
            string notificationId,
            string status, 
            string username,
            string password)
        {
            this.UserID = username;
            this.Password = password;
            UpdateNotification(notificationId, status);
        }

        /// <summary>
        /// Client wrapper for the Notification Server's DeleteNotificationQuery() method with string inputs
        /// </summary>
        public void DeleteNotificationQuery(
            string notificationId)
        {
            DeleteNotificationQuery(notificationId, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
        }

        public void DeleteNotificationQuery(
            string notificationId,
            string memberName,
            string password)
        {
            this.UserID = memberName;
            this.Password = password;
            DeleteNotificationQuery(GetHttpHeaders(this.Locale, null, PlatformType.Mobile), notificationId, null);
        }

        /// <summary>
        /// Client wrapper for the Notification Server's DeleteNotificationBySession() method
        /// </summary>
        public void DeleteNotificationBySession(
            string gameIdString,
            string sessionId)
        {
            DeleteNotificationBySession(gameIdString, sessionId, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
        }

        public void DeleteNotificationBySession(
            string gameIdString,
            string sessionId,
            string memberName,
            string password)
        {
            this.UserID = memberName;
            this.Password = password;
            DeleteNotificationBySession(GetHttpHeaders(this.Locale, null, PlatformType.Mobile), gameIdString, sessionId, null);
        }

        /// <summary>
        /// Client wrapper for the Notification Server's SendInvite() method
        /// </summary>
        public void SendInvite(InviteRequest inviteRequest)
        {
            SendInvite(inviteRequest, GetHttpHeaders(this.Locale, null, PlatformType.Mobile));
        }
        public void SendInvite(InviteRequest inviteRequest, string memberName, string password)
        {
            this.UserID = memberName;
            this.Password = password;
            SendInvite(inviteRequest);
        }
        public void SendInvite(InviteRequest inviteRequest, Dictionary<string, string> customHeaders)
        {
            SendInvite(customHeaders, inviteRequest, null);
        }

        /// <summary>
        /// Client wrapper for the Notification Server's GetSpotLight() method
        /// </summary>
        public List<Spotlight> GetSpotlight(string carrierString)
        {
            return GetSpotlight(carrierString, this.Locale);
        }

        /// <summary>
        /// Client wrapper for the Notification Server's GetSpotLight() method with a specified locale
        /// </summary>
        public List<Spotlight> GetSpotlight(string carrierString, string locale)
        {
            return GetSpotlight(carrierString, locale, null);
        }

        /// <summary>
        /// Client wrapper for the Notification Server's GetSpotlight() method with locale and ETag.
        /// </summary>
        public List<Spotlight> GetSpotlight(string carrierString, string locale, string eTag)
        {
            return GetSpotlight(GetHttpHeaders(locale, eTag, PlatformType.Mobile), carrierString);
        }

        /// <summary>
        /// Client wrapper for the Rewards API - GetLeaderboard
        /// </summary>
        public LeaderboardResult GetLeaderboard(string gameId, string variant, string property, string rankStart, string dataGroup, string numRows, string socialGraph)
        {
            return GetLeaderboard(GetHttpHeaders(this.Locale, null, PlatformType.Mobile), gameId, variant, property, rankStart, dataGroup, numRows, socialGraph);
        }

        /// <summary>
        /// Client wrapper for the Rewards API - GetLeaderboard
        /// </summary>
        public LeaderboardResult GetLeaderboard(string gameId, string variant, string property, string rankStart, string dataGroup, string numRows, string socialGraph, string userName, string Password)
        {
            this.UserID = userName;
            this.Password = Password;
            return GetLeaderboard(gameId, variant, property, rankStart, dataGroup, numRows, socialGraph);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\MultiplayerProxy\PartnerServiceProxy.cs ===
﻿using System;
using System.Net;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml.Linq;
using System.Configuration;
using CloudServices.Test.Common;
using System.Runtime.Serialization;
using CloudServices.Test.Common.Configuration;
using CloudServices.Test.Common.Proxy;
using AsyncMultiplayer.PartnerService.DataContracts;
using System.Security.Cryptography.X509Certificates;
using System.Diagnostics;
using System.IO;

namespace Multiplayer.Test.API
{
    public class PartnerServiceProxy : RestRequest
    {
        public string Locale
        {
            get;
            set;
        }
 
        public PartnerServiceProxy()
        {
            XmlContentType = "text/xml";
            Timeout = int.Parse(ConfigurationManager.AppSettings["Timeout"]);
            this.Locale = "en-US";
        }

        /// <summary>
        /// Client wrapper for the Partner frontend's SendNotification(PartnerNotificationRequest sendRequest) method
        /// </summary>
        public void SendNotification(PartnerNotificationRequest sendRequest)
        {
            SendNotification(GetHttpHeaders(), sendRequest);
        }
                
        /// <summary>
        /// Client wrapper for the Partner frontend's DeleteNotificationBySession() method
        /// </summary>
        public void DeleteNotificationBySession(
            string gameIdString,
            string sessionId,
            string gamertags)
        {
            DeleteNotificationBySession(GetHttpHeaders(), gameIdString, sessionId, gamertags);
        }

        public void DeleteNotificationBySession(PartnerDeleteRequest deleteRequest )
        {
            DeleteNotificationBySession(GetHttpHeaders(), deleteRequest);
        }

        /// <summary>
        /// Client wrapper for the Partner frontend's PostGameResults(List<PartnerCompositeGameResult> gameResults) method
        /// </summary>
        public void PostGameResults(List<PartnerCompositeGameResult> gameResults)
        {
           PostGameResults(GetHttpHeaders(), gameResults);
        }

        public void DeleteNotificationBySession(
            Dictionary<string, string> customHeaders,
            string gameIdString, 
            string sessionId, 
            string gamertags)
        {
            PartnerDeleteRequest deleteRequest = new PartnerDeleteRequest();
            deleteRequest.GameId = uint.Parse(gameIdString);
            deleteRequest.SessionId = sessionId;
            deleteRequest.Players = gamertags;

            DeleteNotificationBySession(customHeaders, deleteRequest);
        }

        public void SendNotification(
            Dictionary<string, string> customHeaders,
            PartnerNotificationRequest sendRequest)
        {
            string uri = String.Format("{0}notification", Config.Environment.PartnerService);
            RestResponse rr = Post(uri, customHeaders, SerializeObject(sendRequest), InstallStsClientCertificate(uri));
            if (!rr.Succeeded)
            {
                throw new RestException(rr);
            }
        }

        public void DeleteNotificationBySession(
            Dictionary<string, string> customHeaders,
            PartnerDeleteRequest deleteRequest)
        {
            string uri = String.Format("{0}deletenotifications", Config.Environment.PartnerService);

            RestResponse rr = Post(uri, customHeaders, SerializeObject(deleteRequest), InstallStsClientCertificate(uri));
            if (!rr.Succeeded)
            {
                throw new RestException(rr);
            }
        }

        public void PostGameResults(
            Dictionary<string, string> customHeaders,
            List<PartnerCompositeGameResult> gameResults)
        {
            string uri = String.Format("{0}gameresults", Config.Environment.PartnerService);

            RestResponse rr = Post(uri, customHeaders, SerializeObject(gameResults), InstallStsClientCertificate(uri));
            if (!rr.Succeeded)
            {
                throw new RestException(rr);
            }
        }

        public static X509Certificate2 InstallStsClientCertificate(string uri)
        {
            X509Certificate2 clientCert = null;
            if (uri.StartsWith("https://")) // take this out nefse
            {
                clientCert = CloudServices.Test.Common.Authorization.Authorization.InstallClientCertificate(ConfigurationManager.AppSettings["PFEClientCertName"], ConfigurationManager.AppSettings["PFEClientCertThumbprint"], ConfigurationManager.AppSettings["PFEClientCertPwd"], "WebSG");
            }
            return clientCert;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\MultiplayerProxy\SessionService.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Runtime.Serialization;
using AsyncMultiplayer.SessionCommon;
using Leet.Core.Platforms;
using CloudServices.Test.Common.Proxy;

namespace Multiplayer.Test.Proxy
{
    /// <summary>
    /// 
    /// </summary>
    public class SessionsService : RestRequest
    {
        public const string CreateSessionUrlFormat = "/game/{gameId}";
        public const string JoinSessionUrlFormat = "/session/{sessionId}";

        /// <summary>
        /// 
        /// </summary>
        /// <param name="baseUri"></param>
        public SessionsService(string baseUri)
        {
            this.BaseUri = baseUri;
        }

        /// <summary>
        /// 
        /// </summary>
        public string BaseUri
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="gameId"></param>
        /// <returns></returns>
        public string FormatCreateSessionUrl(string gameId)
        {
            return this.BaseUri + CreateSessionUrlFormat.Replace("{gameId}", gameId);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sessionId"></param>
        /// <returns></returns>
        public string FormatJoinSessionUrl(string sessionId)
        {
            return this.BaseUri + JoinSessionUrlFormat.Replace("{sessionId}", sessionId);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public Dictionary<string, string> GetHttpHeaders(string locale, PlatformType platformType)
        {
            Dictionary<string, string> httpHeaders = base.GetHttpHeaders();
            if (!String.IsNullOrEmpty(locale))
                httpHeaders.Add("X-Locale", locale);

            httpHeaders.Add("X-Platform-Type", ((uint)platformType).ToString());

            return httpHeaders;
        }

        public SessionState CreateSession(CreationData creationData)
        {
            return CreateSession(GetHttpHeaders(), creationData.GameID.ToString(), creationData);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="httpHeaders"></param>
        /// <param name="creationData"></param>
        public SessionState CreateSession(Dictionary<string, string> httpHeaders, CreationData creationData)
        {
            return CreateSession(httpHeaders, creationData.GameID.ToString(), creationData);
        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="gameId"></param>
        /// <param name="creationData"></param>
        public SessionState CreateSession(string gameId, CreationData creationData)
        {
            return CreateSession(GetHttpHeaders(), gameId, creationData);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="httpHeaders"></param>
        /// <param name="gameId"></param>
        /// <param name="creationData"></param>
        public SessionState CreateSession(Dictionary<string, string> httpHeaders, string gameId, CreationData creationData)
        {
            string url = FormatCreateSessionUrl(gameId);

            RestResponse response = Post(url, httpHeaders, SerializeObject(creationData));
            HandleResponse(response);

            return DeserializeObject<SessionState>(response.Body);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sessionId"></param>
        /// <param name="joinData"></param>
        /// <returns></returns>
        public SessionState JoinSession(string sessionId, JoinData joinData)
        {
            return JoinSession(GetHttpHeaders(), sessionId, joinData);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="httpHeaders"></param>
        /// <param name="sessionId"></param>
        /// <param name="joinData"></param>
        public SessionState JoinSession(Dictionary<string, string> httpHeaders, string sessionId, JoinData joinData)
        {
            string url = FormatJoinSessionUrl(sessionId);

            RestResponse response = Post(url, httpHeaders, SerializeObject(joinData));
            HandleResponse(response);

            return DeserializeObject<SessionState>(response.Body);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        public void RejectInvitation(string sessionId, string gameId)
        {
            RejectInvitation(GetHttpHeaders(), sessionId, gameId);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        public void RejectInvitation(Dictionary<string, string> httpHeaders, string sessionId, string gameId)
        {
            string url = String.Format("{0}/invite/{1}/{2}", this.BaseUri, sessionId, gameId);

            RestResponse response = Delete(url, httpHeaders);
            HandleResponse(response);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        public void LeaveSession(string sessionId, string gameId)
        {
            LeaveSession(GetHttpHeaders(), sessionId, gameId);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        public void LeaveSession(Dictionary<string, string> httpHeaders, string sessionId, string gameId)
        {
            string url = String.Format("{0}/session/{1}/{2}", this.BaseUri, sessionId, gameId);

            RestResponse response = Delete(url, httpHeaders);
            HandleResponse(response);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        /// <param name="modData"></param>
        public void ModifySession(string sessionId, string gameId, ModificationData modData)
        {
            ModifySession(GetHttpHeaders(), sessionId, gameId, modData);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="httpHeaders"></param>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        /// <param name="modData"></param>
        public void ModifySession(Dictionary<string, string> httpHeaders, string sessionId, string gameId, ModificationData modData)
        {
            string url = String.Format("{0}/session/{1}/{2}", this.BaseUri, sessionId, gameId);

            RestResponse response = Put(url, httpHeaders, SerializeObject(modData));
            HandleResponse(response);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        /// <returns></returns>
        public SessionState ViewSession(string sessionId, string gameId)
        {
            return ViewSession(GetHttpHeaders(), sessionId, gameId);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="httpHeaders"></param>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        /// <returns></returns>
        public SessionState ViewSession(Dictionary<string, string> httpHeaders, string sessionId, string gameId)
        {
            string url = String.Format("{0}/session/{1}/{2}", this.BaseUri, sessionId, gameId);

            RestResponse response = Get(url, httpHeaders);
            HandleResponse(response);

            return DeserializeObject<SessionState>(response.Body);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="gameId"></param>
        /// <param name="firstSession"></param>
        /// <param name="max"></param>
        /// <param name="sessionType"></param>
        /// <returns></returns>
        public SessionEntry[] ViewSessionSummaries(string gameId, string variant, string lastSessionID, string lastGameID, string maxSessions, string showSessionType)
        {
            return ViewSessionSummaries(GetHttpHeaders(), gameId, variant, lastSessionID, lastGameID, maxSessions, showSessionType);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="gameId"></param>
        /// <param name="firstSession"></param>
        /// <param name="max"></param>
        /// <param name="sessionType"></param>
        /// <returns></returns>
        public SessionEntry[] ViewSessionSummaries(string gameId, string variant, string lastSessionID, string lastGameID, int maxSessions, ShowSessionType showSessionType)
        {
            return ViewSessionSummaries(GetHttpHeaders(), gameId, variant, lastSessionID, lastGameID, maxSessions, showSessionType);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="httpHeaders"></param>
        /// <param name="gameId"></param>
        /// <param name="firstSession"></param>
        /// <param name="max"></param>
        /// <param name="sessionType"></param>
        /// <returns></returns>
        public SessionEntry[] ViewSessionSummaries(Dictionary<string, string> httpHeaders, string gameId, string variant, string lastSessionID, string lastGameID, int maxSessions, ShowSessionType showSessionType)
        {
            return ViewSessionSummaries(httpHeaders, gameId, variant, lastSessionID, lastGameID, maxSessions.ToString(), showSessionType.ToString());
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="httpHeaders"></param>
        /// <param name="gameId"></param>
        /// <param name="firstSession"></param>
        /// <param name="max"></param>
        /// <param name="sessionType"></param>
        /// <returns></returns>
        public SessionEntry[] ViewSessionSummaries(Dictionary<string, string> httpHeaders, string gameId, string variant, string lastSessionID, string lastGameID, string maxSessions, string showSessionType)
        {
            StringBuilder url = new StringBuilder(String.Format("{0}/game?", this.BaseUri));
            Dictionary<string, string> queryStringParams = new Dictionary<string, string>();

            if (gameId != null)
                queryStringParams.Add("game", gameId);
            if (variant != null)
                queryStringParams.Add("variant", variant);
            if (lastSessionID != null)
                queryStringParams.Add("lastSession", lastSessionID);
            if (lastGameID != null)
                queryStringParams.Add("lastGame", lastGameID);
            if (maxSessions != null)
                queryStringParams.Add("max", maxSessions);
            if (showSessionType != null)
                queryStringParams.Add("showSessionType", showSessionType);

            foreach (string key in queryStringParams.Keys)
            {
                url.AppendFormat("{0}={1}&", key, queryStringParams[key]);
            }

            url.Length -= 1;    //strip off the last & (or ?)

            RestResponse response = Get(url.ToString(), httpHeaders);
            HandleResponse(response);

            return DeserializeObject<SessionEntry[]>(response.Body);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Tools\MPStress\MainForm.Designer.cs ===
﻿namespace MPStress
{
    partial class mainForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.label1 = new System.Windows.Forms.Label();
            this.txtXuid = new System.Windows.Forms.TextBox();
            this.start = new System.Windows.Forms.Button();
            this.stop = new System.Windows.Forms.Button();
            this.label3 = new System.Windows.Forms.Label();
            this.baseUrl = new System.Windows.Forms.TextBox();
            this.label2 = new System.Windows.Forms.Label();
            this.tps = new System.Windows.Forms.Label();
            this.label4 = new System.Windows.Forms.Label();
            this.durations = new System.Windows.Forms.TextBox();
            this.label5 = new System.Windows.Forms.Label();
            this.threadCount = new System.Windows.Forms.NumericUpDown();
            this.requestBody = new System.Windows.Forms.TextBox();
            this.label6 = new System.Windows.Forms.Label();
            this.label7 = new System.Windows.Forms.Label();
            this.comboBox1 = new System.Windows.Forms.ComboBox();
            this.cboApi = new System.Windows.Forms.ComboBox();
            this.label8 = new System.Windows.Forms.Label();
            this.timeout = new System.Windows.Forms.TextBox();
            this.label9 = new System.Windows.Forms.Label();
            this.label10 = new System.Windows.Forms.Label();
            this.avgLatency = new System.Windows.Forms.Label();
            this.label11 = new System.Windows.Forms.Label();
            this.label12 = new System.Windows.Forms.Label();
            this.label13 = new System.Windows.Forms.Label();
            this.totalSucceeded = new System.Windows.Forms.Label();
            this.totalFailed = new System.Windows.Forms.Label();
            this.totalTimeout = new System.Windows.Forms.Label();
            this.menuStrip1 = new System.Windows.Forms.MenuStrip();
            this.fileToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.exitToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.optionsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.ignoreSSLErrorsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.helpToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.statusStrip1 = new System.Windows.Forms.StatusStrip();
            this.toolStripStatusLabel1 = new System.Windows.Forms.ToolStripStatusLabel();
            this.threadsRunning = new System.Windows.Forms.ToolStripStatusLabel();
            this.btnReset = new System.Windows.Forms.Button();
            this.chkRandomize = new System.Windows.Forms.CheckBox();
            this.avgtps = new System.Windows.Forms.Label();
            this.label15 = new System.Windows.Forms.Label();
            ((System.ComponentModel.ISupportInitialize)(this.threadCount)).BeginInit();
            this.menuStrip1.SuspendLayout();
            this.statusStrip1.SuspendLayout();
            this.SuspendLayout();
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.Location = new System.Drawing.Point(24, 138);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(33, 13);
            this.label1.TabIndex = 0;
            this.label1.Text = "XUID";
            // 
            // txtXuid
            // 
            this.txtXuid.Location = new System.Drawing.Point(27, 154);
            this.txtXuid.Multiline = true;
            this.txtXuid.Name = "txtXuid";
            this.txtXuid.ScrollBars = System.Windows.Forms.ScrollBars.Both;
            this.txtXuid.Size = new System.Drawing.Size(176, 22);
            this.txtXuid.TabIndex = 1;
            this.txtXuid.TextChanged += new System.EventHandler(this.userToken_TextChanged);
            // 
            // start
            // 
            this.start.Location = new System.Drawing.Point(46, 530);
            this.start.Name = "start";
            this.start.Size = new System.Drawing.Size(75, 23);
            this.start.TabIndex = 2;
            this.start.Text = "&Start";
            this.start.UseVisualStyleBackColor = true;
            this.start.Click += new System.EventHandler(this.start_Click);
            // 
            // stop
            // 
            this.stop.Location = new System.Drawing.Point(127, 530);
            this.stop.Name = "stop";
            this.stop.Size = new System.Drawing.Size(75, 23);
            this.stop.TabIndex = 3;
            this.stop.Text = "S&top";
            this.stop.UseVisualStyleBackColor = true;
            this.stop.Click += new System.EventHandler(this.stop_Click);
            // 
            // label3
            // 
            this.label3.AutoSize = true;
            this.label3.Location = new System.Drawing.Point(24, 63);
            this.label3.Name = "label3";
            this.label3.Size = new System.Drawing.Size(29, 13);
            this.label3.TabIndex = 4;
            this.label3.Text = "URL";
            // 
            // baseUrl
            // 
            this.baseUrl.Location = new System.Drawing.Point(27, 79);
            this.baseUrl.Multiline = true;
            this.baseUrl.Name = "baseUrl";
            this.baseUrl.ScrollBars = System.Windows.Forms.ScrollBars.Both;
            this.baseUrl.Size = new System.Drawing.Size(292, 50);
            this.baseUrl.TabIndex = 5;
            this.baseUrl.Text = "https://notifications.stress.xboxlive.com:51420/Notifications.svc/?count=10";
            // 
            // label2
            // 
            this.label2.AutoSize = true;
            this.label2.Location = new System.Drawing.Point(71, 377);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(31, 13);
            this.label2.TabIndex = 6;
            this.label2.Text = "TPS:";
            // 
            // tps
            // 
            this.tps.AutoSize = true;
            this.tps.Location = new System.Drawing.Point(101, 377);
            this.tps.Name = "tps";
            this.tps.Size = new System.Drawing.Size(13, 13);
            this.tps.TabIndex = 8;
            this.tps.Text = "0";
            // 
            // label4
            // 
            this.label4.AutoSize = true;
            this.label4.Location = new System.Drawing.Point(24, 445);
            this.label4.Name = "label4";
            this.label4.Size = new System.Drawing.Size(87, 13);
            this.label4.TabIndex = 9;
            this.label4.Text = "Call Latency (ms)";
            // 
            // durations
            // 
            this.durations.Location = new System.Drawing.Point(27, 461);
            this.durations.Multiline = true;
            this.durations.Name = "durations";
            this.durations.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;
            this.durations.Size = new System.Drawing.Size(292, 63);
            this.durations.TabIndex = 10;
            this.durations.WordWrap = false;
            // 
            // label5
            // 
            this.label5.AutoSize = true;
            this.label5.Location = new System.Drawing.Point(53, 350);
            this.label5.Name = "label5";
            this.label5.Size = new System.Drawing.Size(49, 13);
            this.label5.TabIndex = 11;
            this.label5.Text = "Threads:";
            // 
            // threadCount
            // 
            this.threadCount.Location = new System.Drawing.Point(105, 347);
            this.threadCount.Name = "threadCount";
            this.threadCount.Size = new System.Drawing.Size(120, 20);
            this.threadCount.TabIndex = 12;
            this.threadCount.Value = new decimal(new int[] {
            1,
            0,
            0,
            0});
            // 
            // requestBody
            // 
            this.requestBody.Location = new System.Drawing.Point(27, 208);
            this.requestBody.Multiline = true;
            this.requestBody.Name = "requestBody";
            this.requestBody.ScrollBars = System.Windows.Forms.ScrollBars.Both;
            this.requestBody.Size = new System.Drawing.Size(292, 73);
            this.requestBody.TabIndex = 14;
            // 
            // label6
            // 
            this.label6.AutoSize = true;
            this.label6.Location = new System.Drawing.Point(24, 192);
            this.label6.Name = "label6";
            this.label6.Size = new System.Drawing.Size(74, 13);
            this.label6.TabIndex = 13;
            this.label6.Text = "Request Body";
            // 
            // label7
            // 
            this.label7.AutoSize = true;
            this.label7.Location = new System.Drawing.Point(24, 296);
            this.label7.Name = "label7";
            this.label7.Size = new System.Drawing.Size(78, 13);
            this.label7.TabIndex = 15;
            this.label7.Text = "HTTP Method:";
            // 
            // comboBox1
            // 
            this.comboBox1.FormattingEnabled = true;
            this.comboBox1.Items.AddRange(new object[] {
            "DELETE",
            "GET",
            "POST",
            "PUT"});
            this.comboBox1.Location = new System.Drawing.Point(104, 293);
            this.comboBox1.Name = "comboBox1";
            this.comboBox1.Size = new System.Drawing.Size(121, 21);
            this.comboBox1.TabIndex = 16;
            // 
            // cboApi
            // 
            this.cboApi.FormattingEnabled = true;
            this.cboApi.Items.AddRange(new object[] {
            "CreateSession",
            "DeleteNotification",
            "DeleteNotificationsBySession",
            "E2E",
            "E2E (SMS only)",
            "GetGameState",
            "GetNotifications",
            "GetSpotlight",
            "JoinSession",
            "LeaveSession",
            "ModifySession",
            "PostGameAction",
            "PostGameEnd",
            "PutGameState",
            "RejectInvitation",
            "UpdateNotification",
            "SendInvite",
            "ViewSessions",
            "ViewSessionSummaries"});
            this.cboApi.Location = new System.Drawing.Point(63, 32);
            this.cboApi.Name = "cboApi";
            this.cboApi.Size = new System.Drawing.Size(121, 21);
            this.cboApi.TabIndex = 18;
            this.cboApi.SelectedIndexChanged += new System.EventHandler(this.cboApi_SelectedIndexChanged);
            // 
            // label8
            // 
            this.label8.AutoSize = true;
            this.label8.Location = new System.Drawing.Point(26, 35);
            this.label8.Name = "label8";
            this.label8.Size = new System.Drawing.Size(31, 13);
            this.label8.TabIndex = 17;
            this.label8.Text = "Test:";
            // 
            // timeout
            // 
            this.timeout.Location = new System.Drawing.Point(104, 321);
            this.timeout.Name = "timeout";
            this.timeout.Size = new System.Drawing.Size(121, 20);
            this.timeout.TabIndex = 19;
            this.timeout.Text = "30000";
            // 
            // label9
            // 
            this.label9.AutoSize = true;
            this.label9.Location = new System.Drawing.Point(31, 324);
            this.label9.Name = "label9";
            this.label9.Size = new System.Drawing.Size(70, 13);
            this.label9.TabIndex = 20;
            this.label9.Text = "Timeout (ms):";
            // 
            // label10
            // 
            this.label10.AutoSize = true;
            this.label10.Location = new System.Drawing.Point(28, 421);
            this.label10.Name = "label10";
            this.label10.Size = new System.Drawing.Size(73, 13);
            this.label10.TabIndex = 21;
            this.label10.Text = "Avg. Latency:";
            // 
            // avgLatency
            // 
            this.avgLatency.AutoSize = true;
            this.avgLatency.Location = new System.Drawing.Point(100, 422);
            this.avgLatency.Name = "avgLatency";
            this.avgLatency.Size = new System.Drawing.Size(13, 13);
            this.avgLatency.TabIndex = 22;
            this.avgLatency.Text = "0";
            // 
            // label11
            // 
            this.label11.AutoSize = true;
            this.label11.Location = new System.Drawing.Point(169, 377);
            this.label11.Name = "label11";
            this.label11.Size = new System.Drawing.Size(65, 13);
            this.label11.TabIndex = 23;
            this.label11.Text = "Succeeded:";
            // 
            // label12
            // 
            this.label12.AutoSize = true;
            this.label12.Location = new System.Drawing.Point(196, 399);
            this.label12.Name = "label12";
            this.label12.Size = new System.Drawing.Size(38, 13);
            this.label12.TabIndex = 24;
            this.label12.Text = "Failed:";
            // 
            // label13
            // 
            this.label13.AutoSize = true;
            this.label13.Location = new System.Drawing.Point(175, 421);
            this.label13.Name = "label13";
            this.label13.Size = new System.Drawing.Size(59, 13);
            this.label13.TabIndex = 25;
            this.label13.Text = "Timed Out:";
            // 
            // totalSucceeded
            // 
            this.totalSucceeded.AutoSize = true;
            this.totalSucceeded.Location = new System.Drawing.Point(233, 378);
            this.totalSucceeded.Name = "totalSucceeded";
            this.totalSucceeded.Size = new System.Drawing.Size(13, 13);
            this.totalSucceeded.TabIndex = 26;
            this.totalSucceeded.Text = "0";
            // 
            // totalFailed
            // 
            this.totalFailed.AutoSize = true;
            this.totalFailed.Location = new System.Drawing.Point(233, 400);
            this.totalFailed.Name = "totalFailed";
            this.totalFailed.Size = new System.Drawing.Size(13, 13);
            this.totalFailed.TabIndex = 27;
            this.totalFailed.Text = "0";
            // 
            // totalTimeout
            // 
            this.totalTimeout.AutoSize = true;
            this.totalTimeout.Location = new System.Drawing.Point(233, 422);
            this.totalTimeout.Name = "totalTimeout";
            this.totalTimeout.Size = new System.Drawing.Size(13, 13);
            this.totalTimeout.TabIndex = 28;
            this.totalTimeout.Text = "0";
            // 
            // menuStrip1
            // 
            this.menuStrip1.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.fileToolStripMenuItem,
            this.optionsToolStripMenuItem,
            this.helpToolStripMenuItem});
            this.menuStrip1.Location = new System.Drawing.Point(0, 0);
            this.menuStrip1.Name = "menuStrip1";
            this.menuStrip1.Size = new System.Drawing.Size(346, 24);
            this.menuStrip1.TabIndex = 29;
            this.menuStrip1.Text = "menuStrip1";
            // 
            // fileToolStripMenuItem
            // 
            this.fileToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.exitToolStripMenuItem});
            this.fileToolStripMenuItem.Name = "fileToolStripMenuItem";
            this.fileToolStripMenuItem.Size = new System.Drawing.Size(37, 20);
            this.fileToolStripMenuItem.Text = "&File";
            // 
            // exitToolStripMenuItem
            // 
            this.exitToolStripMenuItem.Name = "exitToolStripMenuItem";
            this.exitToolStripMenuItem.Size = new System.Drawing.Size(92, 22);
            this.exitToolStripMenuItem.Text = "E&xit";
            this.exitToolStripMenuItem.Click += new System.EventHandler(this.exitToolStripMenuItem_Click);
            // 
            // optionsToolStripMenuItem
            // 
            this.optionsToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.ignoreSSLErrorsToolStripMenuItem});
            this.optionsToolStripMenuItem.Name = "optionsToolStripMenuItem";
            this.optionsToolStripMenuItem.Size = new System.Drawing.Size(61, 20);
            this.optionsToolStripMenuItem.Text = "&Options";
            // 
            // ignoreSSLErrorsToolStripMenuItem
            // 
            this.ignoreSSLErrorsToolStripMenuItem.CheckOnClick = true;
            this.ignoreSSLErrorsToolStripMenuItem.Name = "ignoreSSLErrorsToolStripMenuItem";
            this.ignoreSSLErrorsToolStripMenuItem.Size = new System.Drawing.Size(162, 22);
            this.ignoreSSLErrorsToolStripMenuItem.Text = "&Ignore SSL Errors";
            this.ignoreSSLErrorsToolStripMenuItem.Click += new System.EventHandler(this.ignoreSSLErrorsToolStripMenuItem_Click);
            // 
            // helpToolStripMenuItem
            // 
            this.helpToolStripMenuItem.Name = "helpToolStripMenuItem";
            this.helpToolStripMenuItem.Size = new System.Drawing.Size(44, 20);
            this.helpToolStripMenuItem.Text = "&Help";
            // 
            // statusStrip1
            // 
            this.statusStrip1.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripStatusLabel1,
            this.threadsRunning});
            this.statusStrip1.Location = new System.Drawing.Point(0, 562);
            this.statusStrip1.Name = "statusStrip1";
            this.statusStrip1.Size = new System.Drawing.Size(346, 22);
            this.statusStrip1.TabIndex = 30;
            this.statusStrip1.Text = "statusStrip";
            // 
            // toolStripStatusLabel1
            // 
            this.toolStripStatusLabel1.Name = "toolStripStatusLabel1";
            this.toolStripStatusLabel1.Size = new System.Drawing.Size(100, 17);
            this.toolStripStatusLabel1.Text = "Threads Running:";
            // 
            // threadsRunning
            // 
            this.threadsRunning.Name = "threadsRunning";
            this.threadsRunning.Size = new System.Drawing.Size(13, 17);
            this.threadsRunning.Text = "0";
            // 
            // btnReset
            // 
            this.btnReset.Location = new System.Drawing.Point(208, 530);
            this.btnReset.Name = "btnReset";
            this.btnReset.Size = new System.Drawing.Size(75, 23);
            this.btnReset.TabIndex = 31;
            this.btnReset.Text = "&Reset";
            this.btnReset.UseVisualStyleBackColor = true;
            this.btnReset.Click += new System.EventHandler(this.btnReset_Click);
            // 
            // chkRandomize
            // 
            this.chkRandomize.AutoSize = true;
            this.chkRandomize.Location = new System.Drawing.Point(210, 158);
            this.chkRandomize.Name = "chkRandomize";
            this.chkRandomize.Size = new System.Drawing.Size(79, 17);
            this.chkRandomize.TabIndex = 32;
            this.chkRandomize.Text = "Randomize";
            this.chkRandomize.UseVisualStyleBackColor = true;
            this.chkRandomize.CheckedChanged += new System.EventHandler(this.chkRandomize_CheckedChanged);
            // 
            // avgtps
            // 
            this.avgtps.AutoSize = true;
            this.avgtps.Location = new System.Drawing.Point(101, 399);
            this.avgtps.Name = "avgtps";
            this.avgtps.Size = new System.Drawing.Size(13, 13);
            this.avgtps.TabIndex = 34;
            this.avgtps.Text = "0";
            this.avgtps.Click += new System.EventHandler(this.avgtps_Click);
            // 
            // label15
            // 
            this.label15.AutoSize = true;
            this.label15.Location = new System.Drawing.Point(43, 400);
            this.label15.Name = "label15";
            this.label15.Size = new System.Drawing.Size(56, 13);
            this.label15.TabIndex = 33;
            this.label15.Text = "Avg. TPS:";
            // 
            // mainForm
            // 
            this.AcceptButton = this.start;
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(346, 584);
            this.Controls.Add(this.avgtps);
            this.Controls.Add(this.label15);
            this.Controls.Add(this.chkRandomize);
            this.Controls.Add(this.btnReset);
            this.Controls.Add(this.statusStrip1);
            this.Controls.Add(this.totalTimeout);
            this.Controls.Add(this.totalFailed);
            this.Controls.Add(this.totalSucceeded);
            this.Controls.Add(this.label13);
            this.Controls.Add(this.label12);
            this.Controls.Add(this.label11);
            this.Controls.Add(this.avgLatency);
            this.Controls.Add(this.label10);
            this.Controls.Add(this.label9);
            this.Controls.Add(this.timeout);
            this.Controls.Add(this.cboApi);
            this.Controls.Add(this.label8);
            this.Controls.Add(this.comboBox1);
            this.Controls.Add(this.label7);
            this.Controls.Add(this.requestBody);
            this.Controls.Add(this.label6);
            this.Controls.Add(this.threadCount);
            this.Controls.Add(this.label5);
            this.Controls.Add(this.durations);
            this.Controls.Add(this.label4);
            this.Controls.Add(this.tps);
            this.Controls.Add(this.label2);
            this.Controls.Add(this.baseUrl);
            this.Controls.Add(this.label3);
            this.Controls.Add(this.stop);
            this.Controls.Add(this.start);
            this.Controls.Add(this.txtXuid);
            this.Controls.Add(this.label1);
            this.Controls.Add(this.menuStrip1);
            this.MainMenuStrip = this.menuStrip1;
            this.Name = "mainForm";
            this.Text = "MP Xtress Tool Ultimate v0.01 Beta, Sign-off Edition";
            this.FormClosing += new System.Windows.Forms.FormClosingEventHandler(this.mainForm_FormClosing);
            ((System.ComponentModel.ISupportInitialize)(this.threadCount)).EndInit();
            this.menuStrip1.ResumeLayout(false);
            this.menuStrip1.PerformLayout();
            this.statusStrip1.ResumeLayout(false);
            this.statusStrip1.PerformLayout();
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.TextBox txtXuid;
        private System.Windows.Forms.Button start;
        private System.Windows.Forms.Button stop;
        private System.Windows.Forms.Label label3;
        private System.Windows.Forms.TextBox baseUrl;
        private System.Windows.Forms.Label label2;
        private System.Windows.Forms.Label tps;
        private System.Windows.Forms.Label label4;
        private System.Windows.Forms.TextBox durations;
        private System.Windows.Forms.Label label5;
        private System.Windows.Forms.NumericUpDown threadCount;
        private System.Windows.Forms.TextBox requestBody;
        private System.Windows.Forms.Label label6;
        private System.Windows.Forms.Label label7;
        private System.Windows.Forms.ComboBox comboBox1;
        private System.Windows.Forms.ComboBox cboApi;
        private System.Windows.Forms.Label label8;
        private System.Windows.Forms.TextBox timeout;
        private System.Windows.Forms.Label label9;
        private System.Windows.Forms.Label label10;
        private System.Windows.Forms.Label avgLatency;
        private System.Windows.Forms.Label label11;
        private System.Windows.Forms.Label label12;
        private System.Windows.Forms.Label label13;
        private System.Windows.Forms.Label totalSucceeded;
        private System.Windows.Forms.Label totalFailed;
        private System.Windows.Forms.Label totalTimeout;
        private System.Windows.Forms.MenuStrip menuStrip1;
        private System.Windows.Forms.ToolStripMenuItem fileToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem optionsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem helpToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem ignoreSSLErrorsToolStripMenuItem;
        private System.Windows.Forms.StatusStrip statusStrip1;
        private System.Windows.Forms.ToolStripStatusLabel toolStripStatusLabel1;
        private System.Windows.Forms.ToolStripStatusLabel threadsRunning;
        private System.Windows.Forms.ToolStripMenuItem exitToolStripMenuItem;
        private System.Windows.Forms.Button btnReset;
        private System.Windows.Forms.CheckBox chkRandomize;
        private System.Windows.Forms.Label avgtps;
        private System.Windows.Forms.Label label15;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Tools\MPStress\Program.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;

namespace MPStress
{
    static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new mainForm());
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\MultiplayerProxy\StateService.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Runtime.Serialization;
using AsyncMultiplayer.SessionCommon;

using CloudServices.Test.Common.Proxy;

namespace Multiplayer.Test.Proxy
{
    /// <summary>
    /// 
    /// </summary>
    public class StateService: RestRequest
    {
        public const string GetGameStateUrlFormat = "/GameState/{sessionId}/{gameId}";
        public const string PutGameStateUrlFormat = "/GameState/{sessionId}/{gameId}";
        public const string PostGameEndUrlFormat = "/GameState/{sessionId}/{gameId}";
        public const string PostGameActionUrlFormat = "/GameAction/{sessionId}/{gameId}";

        /// <summary>
        /// 
        /// </summary>
        /// <param name="baseUri"></param>
        public StateService(string baseUri)
        {
            this.BaseUri = baseUri;
        }

        /// <summary>
        /// 
        /// </summary>
        public string BaseUri
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="url"></param>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        /// <returns></returns>
        public string FormatGameStateUrl(string url, string sessionId, string gameId)
        {
            return this.BaseUri + url.Replace("{sessionId}", sessionId).Replace("{gameId}", gameId);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="locale"></param>
        /// <returns></returns>
        public new Dictionary<string, string> GetHttpHeaders(string locale)
        {
            Dictionary<string, string> httpHeaders = base.GetHttpHeaders();
            if (!String.IsNullOrEmpty(locale))
                httpHeaders.Add("X-Locale", locale);
            return httpHeaders;
        }

      