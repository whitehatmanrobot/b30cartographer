 0x4A, 0x46, 0x46, 0x46, 0x43, 0x44, 0x43, 0x42, 0x41, 0x42, 0x40, 0x40, 
   0x40, 0x3F, 0x3F, 0x3F, 0x3D, 0x3D, 0x3D, 0x3A, 0x3A, 0x3A, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 
   0x36, 0x36, 0x36, 0x33, 0x35, 0x33, 0x34, 0x34, 0x34, 0x32, 0x32, 0x32, 0x31, 0x30, 0x31, 0x2F, 
   0x30, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2D, 
   0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 
   0x29, 0x29, 0x29, 0x27, 0x27, 0x27, 0x26, 0x25, 0x26, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x23, 
   0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 
   0x20, 0x21, 0x1E, 0x1F, 0x1E, 0x1F, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1D, 0x1D, 
   0x1D, 0x1C, 0x1D, 0x1C, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x1E, 0x1E, 0x1E, 0x1C, 0x1C, 0x1C, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 
   0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1C, 0x1C, 0x1C, 0x1E, 0x1D, 0x1E, 0x1E, 0x1F, 0x1E, 0x21, 0x21, 
   0x21, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 
   0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 
   0x30, 0x2F, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x34, 0x32, 0x34, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x34, 0x32, 0x34, 
   0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x31, 0x32, 0x31, 0x31, 
   0x2F, 0x31, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 0x2B, 0x2C, 0x29, 0x2A, 0x29, 0x2B, 0x2A, 
   0x2B, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x26, 0x25, 0x26, 
   0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x21, 
   0x21, 0x21, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x1E, 0x1F, 0x1E, 0x1E, 0x1F, 0x1E, 0x1D, 0x1E, 
   0x1D, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x23, 0x23, 0x23, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 
   0x23, 0x24, 0x23, 0x22, 0x22, 0x22, 0x23, 0x21, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 
   0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1D, 0x1E, 0x1D, 0x1B, 0x1C, 0x1B, 0x1A, 0x1A, 0x1A, 0x19, 0x19, 
   0x19, 0x17, 0x17, 0x17, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x16, 0x16, 0x16, 
   0x15, 0x14, 0x15, 0x14, 0x13, 0x14, 0x1B, 0x1B, 0x1B, 0x1D, 0x1C, 0x1D, 0x1E, 0x1D, 0x1E, 0x1F, 
   0x1F, 0x1F, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x1F, 0x20, 0x1E, 0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 0x21, 0x1F, 0x21, 0x20, 0x1F, 0x20, 
   0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 
   0x24, 0x24, 0x26, 0x24, 0x26, 0x26, 0x25, 0x26, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x28, 0x28, 
   0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x29, 0x2A, 0x29, 0x2C, 0x2C, 0x2C, 0x2D, 0x2E, 0x2D, 
   0x2F, 0x2F, 0x2F, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x32, 
   0x33, 0x32, 0x32, 0x31, 0x32, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 
   0x30, 0x30, 0x2F, 0x30, 0x31, 0x30, 0x31, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 
   0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2F, 0x2E, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x35, 0x36, 0x35, 
   0x39, 0x3B, 0x39, 0x26, 0x26, 0x26, 0x29, 0x28, 0x29, 0x53, 0x54, 0x53, 0x3F, 0x3F, 0x3F, 0x34, 
   0x34, 0x34, 0x48, 0x49, 0x48, 0x67, 0x69, 0x67, 0x69, 0x6A, 0x69, 0x48, 0x47, 0x48, 0x4C, 0x4C, 
   0x4C, 0x78, 0x79, 0x78, 0x6D, 0x6D, 0x6D, 0x56, 0x56, 0x56, 0x57, 0x56, 0x57, 0x5C, 0x5A, 0x5C, 
   0x55, 0x56, 0x55, 0x4E, 0x4E, 0x4E, 0x5B, 0x5B, 0x5B, 0x5C, 0x5D, 0x5C, 0x5D, 0x5D, 0x5D, 0x5D, 
   0x5F, 0x5D, 0x76, 0x77, 0x76, 0x6F, 0x6E, 0x6F, 0x65, 0x66, 0x65, 0x67, 0x68, 0x67, 0x67, 0x67, 
   0x67, 0x67, 0x66, 0x67, 0x6C, 0x6B, 0x6C, 0x5E, 0x5F, 0x5E, 0x4B, 0x4C, 0x4B, 0x7C, 0x7B, 0x7C, 
   0xBC, 0xB9, 0xBC, 0xB6, 0xB6, 0xB6, 0xB9, 0xB9, 0xB9, 0x71, 0x72, 0x71, 0x55, 0x54, 0x55, 0x57, 
   0x56, 0x57, 0x57, 0x58, 0x57, 0x54, 0x54, 0x54, 0x52, 0x54, 0x52, 0x53, 0x54, 0x53, 0x54, 0x54, 
   0x54, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x53, 0x53, 0x53, 0x51, 0x52, 0x51, 0x50, 0x51, 0x50, 
   0x50, 0x51, 0x50, 0x52, 0x51, 0x52, 0x50, 0x50, 0x50, 0x4F, 0x4E, 0x4F, 0x4D, 0x4D, 0x4D, 0x4B, 
   0x4C, 0x4B, 0x49, 0x4A, 0x49, 0x45, 0x46, 0x45, 0x43, 0x44, 0x43, 0x41, 0x41, 0x41, 0x40, 0x40, 
   0x40, 0x3F, 0x40, 0x3F, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 0x38, 0x39, 0x38, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x32, 
   0x31, 0x32, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x30, 0x31, 0x30, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2D, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 0x2D, 0x2B, 0x2A, 0x2B, 
   0x2A, 0x29, 0x2A, 0x28, 0x28, 0x28, 0x26, 0x25, 0x26, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x22, 
   0x23, 0x22, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 
   0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 
   0x21, 0x21, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x20, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x20, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 0x1E, 0x1D, 
   0x1E, 0x1D, 0x1C, 0x1D, 0x1E, 0x1D, 0x1E, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x1E, 0x1E, 0x1E, 0x1D, 0x1C, 0x1D, 0x1B, 0x1B, 0x1B, 0x1A, 0x1C, 0x1A, 0x19, 0x1A, 0x19, 0x19, 
   0x1A, 0x19, 0x19, 0x1A, 0x19, 0x1B, 0x1B, 0x1B, 0x1E, 0x1D, 0x1E, 0x1F, 0x1F, 0x1F, 0x21, 0x22, 
   0x21, 0x23, 0x24, 0x23, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x27, 0x25, 0x27, 0x28, 0x27, 0x28, 
   0x29, 0x29, 0x29, 0x2A, 0x2B, 0x2A, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x30, 
   0x2F, 0x30, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x33, 0x32, 0x32, 0x34, 0x32, 0x31, 0x33, 
   0x31, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 
   0x33, 0x33, 0x33, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x2F, 
   0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x28, 
   0x2A, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 0x27, 0x26, 0x27, 0x26, 0x25, 0x26, 0x24, 0x24, 0x24, 
   0x24, 0x24, 0x24, 0x24, 0x22, 0x24, 0x21, 0x22, 0x21, 0x23, 0x21, 0x23, 0x21, 0x21, 0x21, 0x20, 
   0x21, 0x20, 0x20, 0x1F, 0x20, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 
   0x1E, 0x1E, 0x1F, 0x1E, 0x21, 0x20, 0x21, 0x24, 0x23, 0x24, 0x25, 0x25, 0x25, 0x24, 0x24, 0x24, 
   0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1D, 0x1E, 0x1C, 0x1C, 0x1C, 0x1A, 0x1A, 0x1A, 0x18, 0x18, 
   0x18, 0x17, 0x18, 0x17, 0x16, 0x17, 0x16, 0x17, 0x17, 0x17, 0x18, 0x17, 0x18, 0x16, 0x17, 0x16, 
   0x14, 0x15, 0x14, 0x14, 0x14, 0x14, 0x1D, 0x1C, 0x1D, 0x1E, 0x1C, 0x1E, 0x1E, 0x1D, 0x1E, 0x1F, 
   0x1F, 0x1F, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 
   0x20, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 0x20, 0x1F, 0x20, 0x21, 0x20, 0x21, 
   0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x22, 0x21, 0x21, 0x22, 0x21, 0x23, 0x22, 0x23, 0x24, 
   0x24, 0x24, 0x24, 0x24, 0x24, 0x26, 0x25, 0x26, 0x27, 0x26, 0x27, 0x26, 0x27, 0x26, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x2A, 0x28, 0x2A, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 
   0x2F, 0x2E, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2F, 0x2D, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x30, 0x2F, 0x32, 0x31, 0x32, 0x34, 0x33, 0x34, 0x35, 0x36, 0x35, 
   0x3C, 0x3B, 0x3C, 0x21, 0x21, 0x21, 0x15, 0x16, 0x15, 0x3F, 0x3F, 0x3F, 0x3D, 0x3E, 0x3D, 0x46, 
   0x46, 0x46, 0x6B, 0x6A, 0x6B, 0x5E, 0x5E, 0x5E, 0x40, 0x42, 0x40, 0x2C, 0x2D, 0x2C, 0x30, 0x31, 
   0x30, 0x46, 0x48, 0x46, 0x47, 0x47, 0x47, 0x32, 0x31, 0x32, 0x13, 0x15, 0x13, 0x19, 0x19, 0x19, 
   0x1F, 0x1F, 0x1F, 0x1D, 0x1B, 0x1D, 0x1A, 0x18, 0x1A, 0x19, 0x18, 0x19, 0x18, 0x19, 0x18, 0x1D, 
   0x1D, 0x1D, 0x1F, 0x1F, 0x1F, 0x1D, 0x1B, 0x1D, 0x1A, 0x19, 0x1A, 0x1B, 0x1A, 0x1B, 0x1A, 0x19, 
   0x1A, 0x23, 0x22, 0x23, 0x1B, 0x1C, 0x1B, 0x2F, 0x2F, 0x2F, 0x54, 0x54, 0x54, 0x86, 0x85, 0x86, 
   0xB6, 0xB7, 0xB6, 0xAE, 0xB0, 0xAE, 0xB1, 0xB1, 0xB1, 0x7C, 0x7C, 0x7C, 0x43, 0x43, 0x43, 0x39, 
   0x39, 0x39, 0x5B, 0x5B, 0x5B, 0x54, 0x55, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x55, 
   0x54, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x53, 0x53, 0x53, 0x50, 0x51, 0x50, 0x4F, 0x50, 0x4F, 
   0x4F, 0x50, 0x4F, 0x4F, 0x50, 0x4F, 0x4F, 0x4F, 0x4F, 0x4D, 0x4E, 0x4D, 0x4C, 0x4D, 0x4C, 0x4A, 
   0x4C, 0x4A, 0x48, 0x49, 0x48, 0x44, 0x46, 0x44, 0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x40, 0x40, 
   0x40, 0x3F, 0x3F, 0x3F, 0x3D, 0x3E, 0x3D, 0x3D, 0x3C, 0x3D, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 
   0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x34, 0x33, 0x34, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 
   0x29, 0x2B, 0x29, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x26, 0x25, 0x26, 0x24, 0x24, 0x24, 0x23, 
   0x23, 0x23, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x20, 0x21, 0x21, 0x20, 0x21, 0x20, 0x1F, 0x20, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1D, 0x1D, 
   0x1D, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x1E, 0x1F, 0x1E, 0x1D, 0x1D, 0x1D, 0x1B, 0x1B, 0x1B, 0x1A, 0x1B, 0x1A, 0x19, 0x1A, 0x19, 0x19, 
   0x1A, 0x19, 0x1A, 0x1A, 0x1A, 0x1B, 0x1B, 0x1B, 0x1E, 0x1D, 0x1E, 0x1F, 0x1F, 0x1F, 0x21, 0x21, 
   0x21, 0x23, 0x23, 0x23, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 0x27, 0x27, 0x27, 
   0x29, 0x29, 0x29, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2E, 0x2E, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 
   0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x2F, 
   0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2B, 0x2C, 0x2B, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x28, 0x28, 
   0x28, 0x27, 0x28, 0x27, 0x27, 0x26, 0x27, 0x27, 0x25, 0x27, 0x24, 0x25, 0x24, 0x24, 0x23, 0x24, 
   0x24, 0x23, 0x24, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x1F, 0x21, 0x1E, 0x1F, 0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x1E, 0x1F, 0x1E, 0x1F, 0x20, 0x20, 0x20, 0x23, 0x23, 0x23, 0x25, 0x24, 0x25, 0x24, 0x23, 0x24, 
   0x24, 0x23, 0x24, 0x22, 0x23, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 
   0x1F, 0x21, 0x1F, 0x1F, 0x1F, 0x1E, 0x1D, 0x1E, 0x1C, 0x1C, 0x1C, 0x1A, 0x1A, 0x1A, 0x18, 0x19, 
   0x18, 0x17, 0x18, 0x17, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x18, 0x17, 0x18, 0x17, 0x17, 0x17, 
   0x14, 0x15, 0x14, 0x14, 0x14, 0x14, 0x1D, 0x1D, 0x1D, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 
   0x20, 0x1F, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 
   0x21, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 
   0x1F, 0x20, 0x1F, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x24, 
   0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x25, 0x24, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x26, 0x26, 
   0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x27, 0x2B, 0x2A, 0x2B, 0x2D, 0x2B, 0x2D, 
   0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 
   0x31, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x34, 0x32, 0x34, 0x35, 0x34, 0x35, 0x38, 0x37, 0x38, 
   0x3F, 0x3D, 0x3F, 0x21, 0x22, 0x21, 0x03, 0x03, 0x03, 0x2E, 0x2C, 0x2E, 0x40, 0x40, 0x40, 0x44, 
   0x45, 0x44, 0x53, 0x52, 0x53, 0x3F, 0x3F, 0x3F, 0x35, 0x37, 0x35, 0x10, 0x10, 0x10, 0x00, 0x00, 
   0x00, 0x22, 0x22, 0x22, 0x4A, 0x4A, 0x4A, 0x29, 0x28, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x12, 0x12, 0x45, 0x46, 0x45, 
   0x63, 0x64, 0x63, 0x6B, 0x6B, 0x6B, 0x6D, 0x6D, 0x6D, 0x71, 0x71, 0x71, 0x55, 0x55, 0x55, 0x33, 
   0x33, 0x33, 0x5D, 0x5D, 0x5D, 0x57, 0x58, 0x57, 0x53, 0x54, 0x53, 0x53, 0x55, 0x53, 0x56, 0x55, 
   0x56, 0x56, 0x55, 0x56, 0x54, 0x55, 0x54, 0x53, 0x53, 0x53, 0x52, 0x51, 0x52, 0x4E, 0x50, 0x4E, 
   0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4C, 0x4D, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 
   0x4A, 0x4B, 0x48, 0x48, 0x48, 0x45, 0x45, 0x45, 0x43, 0x43, 0x43, 0x41, 0x41, 0x41, 0x41, 0x40, 
   0x41, 0x41, 0x40, 0x41, 0x3E, 0x3F, 0x3E, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x39, 0x3A, 0x39, 
   0x3A, 0x3A, 0x3A, 0x38, 0x3A, 0x38, 0x38, 0x38, 0x38, 0x38, 0x36, 0x38, 0x36, 0x35, 0x36, 0x33, 
   0x35, 0x33, 0x33, 0x34, 0x33, 0x33, 0x34, 0x33, 0x32, 0x33, 0x32, 0x31, 0x32, 0x31, 0x30, 0x30, 
   0x30, 0x30, 0x2F, 0x30, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2B, 0x2B, 0x2B, 0x28, 0x29, 0x28, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x25, 0x24, 0x25, 0x23, 
   0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x22, 0x22, 0x23, 0x22, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x20, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x20, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1D, 
   0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x20, 0x1E, 0x20, 0x20, 0x1F, 0x20, 0x1F, 0x1E, 0x1F, 
   0x1E, 0x1F, 0x1E, 0x1C, 0x1D, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1A, 0x1B, 0x1A, 0x1A, 
   0x1B, 0x1A, 0x1A, 0x1B, 0x1A, 0x1C, 0x1B, 0x1C, 0x1F, 0x1D, 0x1F, 0x20, 0x20, 0x20, 0x22, 0x23, 
   0x22, 0x24, 0x25, 0x24, 0x28, 0x26, 0x28, 0x29, 0x27, 0x29, 0x2A, 0x28, 0x2A, 0x2B, 0x29, 0x2B, 
   0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2A, 0x2A, 0x2A, 0x2C, 0x2C, 0x2C, 0x2D, 0x2E, 0x2D, 0x30, 
   0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x2E, 
   0x2E, 0x2E, 0x2C, 0x2E, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2A, 0x2A, 0x28, 0x29, 0x28, 0x28, 0x28, 
   0x28, 0x28, 0x27, 0x28, 0x27, 0x26, 0x27, 0x25, 0x25, 0x25, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 
   0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x1F, 
   0x1E, 0x1F, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 
   0x1E, 0x1E, 0x1F, 0x1E, 0x21, 0x20, 0x21, 0x24, 0x23, 0x24, 0x24, 0x22, 0x24, 0x24, 0x23, 0x24, 
   0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x20, 0x21, 0x20, 0x20, 0x20, 0x20, 0x1F, 
   0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1B, 0x1C, 0x1B, 0x1A, 0x1B, 0x1A, 0x18, 0x1A, 
   0x18, 0x17, 0x17, 0x17, 0x18, 0x17, 0x18, 0x16, 0x18, 0x16, 0x17, 0x18, 0x17, 0x16, 0x17, 0x16, 
   0x15, 0x16, 0x15, 0x13, 0x14, 0x13, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1D, 0x1F, 0x1F, 0x1F, 0x21, 
   0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x20, 0x20, 0x20, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x20, 0x20, 0x20, 0x21, 0x20, 0x21, 
   0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x24, 0x23, 0x24, 0x24, 
   0x24, 0x24, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 
   0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2C, 0x2B, 0x2C, 
   0x2C, 0x2D, 0x2C, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 
   0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 
   0x2E, 0x30, 0x2F, 0x30, 0x32, 0x31, 0x32, 0x34, 0x33, 0x34, 0x35, 0x35, 0x35, 0x38, 0x38, 0x38, 
   0x3D, 0x3E, 0x3D, 0x2A, 0x29, 0x2A, 0x00, 0x00, 0x00, 0x10, 0x11, 0x10, 0x38, 0x39, 0x38, 0x3D, 
   0x3C, 0x3D, 0x3B, 0x3B, 0x3B, 0x33, 0x33, 0x33, 0x28, 0x28, 0x28, 0x23, 0x24, 0x23, 0x00, 0x00, 
   0x00, 0x0B, 0x0B, 0x0B, 0x47, 0x46, 0x47, 0x2B, 0x2B, 0x2B, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03, 
   0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 
   0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 
   0x03, 0x01, 0x02, 0x01, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x0D, 0x0C, 0x0D, 0x1B, 0x1C, 0x1B, 0x20, 0x1F, 0x20, 0x1E, 0x1E, 0x1E, 0x40, 0x40, 0x40, 0x4D, 
   0x4D, 0x4D, 0x46, 0x46, 0x46, 0x5A, 0x5B, 0x5A, 0x64, 0x63, 0x64, 0x59, 0x5A, 0x59, 0x56, 0x56, 
   0x56, 0x56, 0x56, 0x56, 0x55, 0x55, 0x55, 0x52, 0x53, 0x52, 0x50, 0x50, 0x50, 0x4F, 0x50, 0x4F, 
   0x4E, 0x4F, 0x4E, 0x4E, 0x4D, 0x4E, 0x4C, 0x4D, 0x4C, 0x4A, 0x4C, 0x4A, 0x4C, 0x4C, 0x4C, 0x4A, 
   0x4A, 0x4A, 0x48, 0x48, 0x48, 0x44, 0x46, 0x44, 0x42, 0x43, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 
   0x41, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3C, 0x3D, 0x3C, 
   0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 0x3A, 0x3B, 0x39, 0x38, 0x39, 0x37, 0x36, 0x37, 0x36, 
   0x36, 0x36, 0x36, 0x35, 0x36, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x32, 0x32, 0x32, 0x30, 0x31, 
   0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2C, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2D, 0x2A, 0x2A, 0x2A, 0x28, 0x29, 0x28, 0x27, 0x27, 0x27, 0x25, 0x26, 0x25, 0x25, 
   0x24, 0x25, 0x23, 0x24, 0x23, 0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x23, 0x22, 
   0x23, 0x21, 0x22, 0x21, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 
   0x21, 0x20, 0x21, 0x22, 0x20, 0x22, 0x21, 0x20, 0x21, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1E, 
   0x1F, 0x1E, 0x1E, 0x1F, 0x1E, 0x1E, 0x1F, 0x1E, 0x20, 0x1F, 0x20, 0x1F, 0x1E, 0x1F, 0x1E, 0x1E, 
   0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1F, 0x1F, 0x1F, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1C, 0x1D, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1A, 
   0x1B, 0x1A, 0x1B, 0x1B, 0x1B, 0x1C, 0x1C, 0x1C, 0x1E, 0x1E, 0x1E, 0x24, 0x25, 0x24, 0x31, 0x31, 
   0x31, 0x37, 0x35, 0x37, 0x3A, 0x38, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x3D, 0x3C, 0x3D, 
   0x3B, 0x3B, 0x3B, 0x2C, 0x2D, 0x2C, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 
   0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 
   0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2E, 0x2E, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 
   0x29, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x23, 0x25, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 
   0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1E, 
   0x1E, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1C, 0x1D, 0x1C, 0x1D, 0x1D, 0x1D, 0x1D, 0x1E, 
   0x1D, 0x20, 0x1F, 0x20, 0x21, 0x21, 0x21, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x23, 0x22, 0x23, 
   0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1E, 
   0x1E, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1C, 0x1D, 0x1B, 0x1B, 0x1B, 0x1A, 0x1A, 
   0x1A, 0x18, 0x18, 0x18, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 
   0x14, 0x16, 0x14, 0x15, 0x15, 0x15, 0x1F, 0x1E, 0x1F, 0x20, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x20, 
   0x21, 0x1F, 0x1F, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x1F, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x20, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 
   0x24, 0x24, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x24, 0x25, 0x24, 0x26, 0x25, 0x26, 0x26, 0x26, 
   0x26, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2B, 0x2A, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x2F, 
   0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 
   0x2E, 0x2F, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 
   0x2B, 0x2B, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2E, 0x2D, 0x2E, 0x2F, 0x2E, 
   0x2F, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x34, 0x34, 0x34, 0x36, 0x36, 0x36, 0x38, 0x37, 0x38, 
   0x3D, 0x3C, 0x3D, 0x38, 0x38, 0x38, 0x14, 0x15, 0x14, 0x00, 0x00, 0x00, 0x16, 0x17, 0x16, 0x3A, 
   0x3B, 0x3A, 0x40, 0x3E, 0x40, 0x30, 0x2E, 0x30, 0x1C, 0x1C, 0x1C, 0x37, 0x36, 0x37, 0x2A, 0x2A, 
   0x2A, 0x19, 0x19, 0x19, 0x40, 0x3F, 0x40, 0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3A, 0x3B, 0x3A, 0x39, 
   0x3B, 0x39, 0x3A, 0x3C, 0x3A, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 
   0x3C, 0x3D, 0x3C, 0x3D, 0x3F, 0x3F, 0x3F, 0x2B, 0x2D, 0x2B, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 
   0x3F, 0x3F, 0x4D, 0x4D, 0x4D, 0x75, 0x77, 0x75, 0x6B, 0x6A, 0x6B, 0x58, 0x59, 0x58, 0x5C, 0x5C, 
   0x5C, 0x54, 0x56, 0x54, 0x55, 0x55, 0x55, 0x53, 0x53, 0x53, 0x51, 0x51, 0x51, 0x4E, 0x4F, 0x4E, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x48, 
   0x49, 0x48, 0x48, 0x47, 0x48, 0x44, 0x45, 0x44, 0x43, 0x44, 0x43, 0x42, 0x42, 0x42, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x3E, 0x3E, 0x3E, 
   0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3C, 0x3D, 0x3C, 0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 0x37, 
   0x38, 0x37, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x31, 0x31, 
   0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 
   0x2B, 0x2C, 0x2B, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x27, 0x28, 0x27, 0x26, 0x26, 0x26, 0x27, 
   0x25, 0x27, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x22, 0x23, 
   0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x1F, 0x1F, 0x1F, 0x27, 0x24, 0x27, 0x24, 0x24, 0x24, 0x21, 0x21, 0x21, 0x1E, 0x1E, 0x1E, 0x1C, 
   0x1D, 0x1C, 0x1D, 0x1E, 0x1D, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x20, 0x1F, 0x20, 0x20, 
   0x20, 0x1F, 0x1E, 0x1F, 0x1E, 0x1F, 0x1E, 0x20, 0x21, 0x20, 0x23, 0x22, 0x23, 0x21, 0x20, 0x21, 
   0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 0x1E, 0x1E, 0x1E, 0x21, 0x20, 0x21, 0x1C, 
   0x1E, 0x1C, 0x1E, 0x1E, 0x1E, 0x1F, 0x1F, 0x1F, 0x1E, 0x20, 0x1E, 0x33, 0x34, 0x33, 0x49, 0x49, 
   0x49, 0x4F, 0x4F, 0x4F, 0x51, 0x51, 0x51, 0x51, 0x53, 0x51, 0x57, 0x55, 0x57, 0x59, 0x59, 0x59, 
   0x4F, 0x50, 0x4F, 0x27, 0x28, 0x27, 0x27, 0x29, 0x27, 0x2E, 0x2E, 0x2E, 0x2C, 0x2D, 0x2C, 0x2D, 
   0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x31, 0x2F, 0x31, 0x30, 0x30, 
   0x30, 0x30, 0x31, 0x30, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 
   0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2D, 0x2E, 0x2C, 0x2D, 0x2C, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x27, 0x27, 
   0x27, 0x26, 0x27, 0x26, 0x25, 0x26, 0x25, 0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 0x22, 0x22, 0x22, 
   0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x20, 0x20, 0x20, 0x1F, 0x1E, 0x1F, 0x1E, 
   0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1C, 0x1C, 0x1C, 0x1D, 0x1C, 0x1D, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 
   0x1E, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 
   0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x1F, 0x20, 0x1F, 0x1E, 0x1E, 0x1E, 0x1D, 
   0x1D, 0x1D, 0x1E, 0x1D, 0x1E, 0x1C, 0x1D, 0x1C, 0x1D, 0x1C, 0x1D, 0x1C, 0x1C, 0x1C, 0x19, 0x1A, 
   0x19, 0x17, 0x18, 0x17, 0x17, 0x17, 0x17, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x16, 0x16, 0x16, 
   0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 
   0x21, 0x22, 0x21, 0x22, 0x21, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 
   0x23, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x1F, 0x1F, 0x1F, 0x21, 0x20, 0x21, 
   0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x25, 
   0x24, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x26, 0x26, 
   0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x2B, 0x2A, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 
   0x2D, 0x2E, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x30, 
   0x2F, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x38, 0x38, 0x38, 
   0x3B, 0x3A, 0x3B, 0x3C, 0x3C, 0x3C, 0x3A, 0x3A, 0x3A, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x2D, 
   0x2B, 0x2D, 0x40, 0x40, 0x40, 0x31, 0x30, 0x31, 0x1D, 0x1C, 0x1D, 0x38, 0x38, 0x38, 0x3F, 0x40, 
   0x3F, 0x3D, 0x3E, 0x3D, 0x3C, 0x3C, 0x3C, 0x44, 0x43, 0x44, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 
   0x49, 0x49, 0x49, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4E, 0x4F, 0x4E, 0x45, 0x44, 0x45, 0x2E, 0x2F, 0x2E, 
   0x26, 0x27, 0x26, 0x27, 0x28, 0x27, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x12, 0x11, 0x12, 0x14, 
   0x14, 0x14, 0x5F, 0x5E, 0x5F, 0x75, 0x76, 0x75, 0x57, 0x58, 0x57, 0x39, 0x3A, 0x39, 0x5A, 0x59, 
   0x5A, 0x5B, 0x5A, 0x5B, 0x55, 0x55, 0x55, 0x53, 0x53, 0x53, 0x50, 0x50, 0x50, 0x4E, 0x4F, 0x4E, 
   0x4E, 0x4D, 0x4E, 0x4A, 0x4C, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x49, 
   0x4A, 0x49, 0x48, 0x47, 0x48, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x41, 0x42, 
   0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 
   0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x40, 0x3F, 0x40, 0x3E, 0x3D, 0x3E, 0x3C, 0x3B, 0x3C, 0x39, 
   0x3A, 0x39, 0x38, 0x39, 0x38, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x35, 0x34, 0x35, 0x33, 0x33, 
   0x33, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x27, 0x27, 0x27, 0x27, 
   0x26, 0x27, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x23, 0x24, 0x23, 0x23, 0x23, 
   0x23, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 
   0x20, 0x1F, 0x20, 0x2D, 0x2E, 0x2D, 0x25, 0x25, 0x25, 0x20, 0x1F, 0x20, 0x21, 0x22, 0x21, 0x28, 
   0x27, 0x28, 0x23, 0x22, 0x23, 0x26, 0x25, 0x26, 0x23, 0x24, 0x23, 0x33, 0x33, 0x33, 0x29, 0x28, 
   0x29, 0x24, 0x24, 0x24, 0x35, 0x34, 0x35, 0x39, 0x39, 0x39, 0x27, 0x25, 0x27, 0x22, 0x22, 0x22, 
   0x23, 0x23, 0x23, 0x25, 0x27, 0x25, 0x2B, 0x2B, 0x2B, 0x33, 0x33, 0x33, 0x38, 0x39, 0x38, 0x38, 
   0x3A, 0x38, 0x31, 0x33, 0x31, 0x35, 0x35, 0x35, 0x38, 0x38, 0x38, 0x3B, 0x38, 0x3B, 0x3D, 0x3C, 
   0x3D, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3C, 0x3D, 0x3C, 0x3E, 0x3D, 0x3E, 0x3F, 0x40, 0x3F, 
   0x3C, 0x3C, 0x3C, 0x24, 0x23, 0x24, 0x1C, 0x1D, 0x1C, 0x2B, 0x2A, 0x2B, 0x2E, 0x2E, 0x2E, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 
   0x31, 0x32, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 
   0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x29, 0x2A, 0x2A, 0x28, 0x2A, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x25, 0x26, 0x25, 0x25, 0x24, 0x25, 0x23, 0x23, 0x23, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 
   0x21, 0x22, 0x21, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1E, 0x1F, 0x1D, 0x1D, 0x1D, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1E, 0x1E, 
   0x1E, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x20, 0x20, 0x20, 0x1E, 0x1D, 0x1E, 0x1D, 
   0x1C, 0x1D, 0x1C, 0x1C, 0x1C, 0x1D, 0x1D, 0x1D, 0x1C, 0x1C, 0x1C, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 
   0x1A, 0x17, 0x19, 0x17, 0x17, 0x18, 0x17, 0x17, 0x17, 0x17, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 
   0x15, 0x16, 0x15, 0x15, 0x15, 0x15, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
   0x22, 0x22, 0x22, 0x22, 0x22, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 
   0x23, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x22, 0x20, 0x22, 
   0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x23, 0x22, 0x23, 0x23, 0x24, 0x23, 0x25, 0x25, 0x25, 0x23, 
   0x24, 0x23, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 
   0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 0x29, 0x2A, 0x29, 
   0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2F, 0x2D, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 
   0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 
   0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x30, 0x2F, 
   0x30, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x34, 0x33, 0x37, 0x36, 0x37, 0x39, 0x38, 0x39, 
   0x38, 0x39, 0x38, 0x3B, 0x3B, 0x3B, 0x3F, 0x3F, 0x3F, 0x2E, 0x2B, 0x2E, 0x00, 0x00, 0x00, 0x22, 
   0x23, 0x22, 0x42, 0x42, 0x42, 0x30, 0x31, 0x30, 0x18, 0x1A, 0x18, 0x37, 0x37, 0x37, 0x3C, 0x3B, 
   0x3C, 0x3E, 0x3C, 0x3E, 0x3F, 0x3F, 0x3F, 0x41, 0x42, 0x41, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 
   0x44, 0x46, 0x44, 0x47, 0x48, 0x47, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x49, 0x48, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 
   0x46, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x4D, 0x4E, 0x4D, 0x52, 0x52, 0x52, 
   0x56, 0x56, 0x56, 0x58, 0x59, 0x58, 0x58, 0x5A, 0x58, 0x5C, 0x5D, 0x5C, 0x47, 0x45, 0x47, 0x05, 
   0x04, 0x05, 0x33, 0x34, 0x33, 0x5B, 0x5D, 0x5B, 0x46, 0x48, 0x46, 0x33, 0x32, 0x33, 0x5F, 0x5F, 
   0x5F, 0x61, 0x63, 0x61, 0x58, 0x57, 0x58, 0x53, 0x53, 0x53, 0x51, 0x51, 0x51, 0x4E, 0x4F, 0x4E, 
   0x4C, 0x4E, 0x4C, 0x4B, 0x4C, 0x4B, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4C, 0x4A, 0x48, 
   0x4A, 0x48, 0x48, 0x48, 0x48, 0x46, 0x46, 0x46, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x44, 0x43, 
   0x44, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 
   0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x40, 0x41, 0x40, 0x40, 0x3F, 0x40, 0x3E, 0x3D, 0x3E, 0x3B, 
   0x3B, 0x3B, 0x3A, 0x39, 0x3A, 0x39, 0x38, 0x39, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x33, 0x33, 
   0x33, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x2D, 0x2E, 0x2D, 
   0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2A, 0x2B, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x25, 
   0x26, 0x25, 0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x24, 0x24, 
   0x24, 0x24, 0x23, 0x24, 0x23, 0x23, 0x23, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 
   0x1E, 0x1E, 0x1E, 0x2F, 0x2E, 0x2F, 0x26, 0x25, 0x26, 0x1D, 0x1C, 0x1D, 0x28, 0x28, 0x28, 0x33, 
   0x33, 0x33, 0x20, 0x20, 0x20, 0x29, 0x29, 0x29, 0x2B, 0x2D, 0x2B, 0x3A, 0x3C, 0x3A, 0x2D, 0x2E, 
   0x2D, 0x21, 0x21, 0x21, 0x40, 0x40, 0x40, 0x46, 0x46, 0x46, 0x26, 0x24, 0x26, 0x1C, 0x1D, 0x1C, 
   0x31, 0x32, 0x31, 0x35, 0x37, 0x35, 0x33, 0x34, 0x33, 0x3C, 0x3C, 0x3C, 0x46, 0x46, 0x46, 0x46, 
   0x48, 0x46, 0x41, 0x42, 0x41, 0x46, 0x48, 0x46, 0x4E, 0x4D, 0x4E, 0x34, 0x35, 0x34, 0x22, 0x24, 
   0x22, 0x25, 0x24, 0x25, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 
   0x28, 0x27, 0x28, 0x2B, 0x2A, 0x2B, 0x21, 0x23, 0x21, 0x22, 0x22, 0x22, 0x2F, 0x2E, 0x2F, 0x2C, 
   0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 
   0x2D, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x31, 0x33, 0x32, 0x31, 0x32, 
   0x32, 0x31, 0x32, 0x30, 0x31, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2C, 0x2D, 0x2A, 
   0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x29, 0x28, 0x29, 0x28, 0x27, 0x28, 0x27, 0x26, 0x27, 0x25, 0x24, 
   0x25, 0x24, 0x24, 0x24, 0x25, 0x23, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x21, 
   0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x1D, 
   0x1F, 0x1D, 0x1F, 0x1E, 0x1F, 0x1D, 0x1D, 0x1D, 0x1A, 0x1C, 0x1A, 0x1E, 0x1D, 0x1E, 0x1D, 0x1D, 
   0x1D, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x20, 0x20, 0x20, 0x20, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x20, 0x1F, 0x20, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x1C, 0x1E, 0x1C, 0x1D, 0x1C, 0x1D, 0x1C, 0x1D, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1A, 0x1B, 
   0x1A, 0x19, 0x1A, 0x19, 0x18, 0x18, 0x18, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x16, 0x16, 0x16, 
   0x15, 0x16, 0x15, 0x15, 0x16, 0x15, 0x22, 0x23, 0x22, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 
   0x23, 0x23, 0x23, 0x21, 0x23, 0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 
   0x23, 0x23, 0x22, 0x23, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x25, 
   0x25, 0x25, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 0x26, 
   0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 
   0x2B, 0x2A, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 
   0x2F, 0x31, 0x30, 0x31, 0x32, 0x32, 0x32, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 
   0x37, 0x39, 0x37, 0x3A, 0x39, 0x3A, 0x3B, 0x3B, 0x3B, 0x35, 0x35, 0x35, 0x04, 0x04, 0x04, 0x0F, 
   0x0F, 0x0F, 0x39, 0x39, 0x39, 0x35, 0x36, 0x35, 0x15, 0x16, 0x15, 0x32, 0x33, 0x32, 0x3A, 0x3B, 
   0x3A, 0x3C, 0x3C, 0x3C, 0x3F, 0x3E, 0x3F, 0x41, 0x41, 0x41, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x47, 0x45, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x45, 0x47, 
   0x45, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x49, 0x48, 0x49, 0x4B, 0x4A, 0x4B, 0x4D, 0x4D, 0x4D, 
   0x4F, 0x4F, 0x4F, 0x51, 0x51, 0x51, 0x52, 0x53, 0x52, 0x57, 0x56, 0x57, 0x55, 0x56, 0x55, 0x0F, 
   0x10, 0x0F, 0x00, 0x00, 0x00, 0x38, 0x39, 0x38, 0x52, 0x55, 0x52, 0x4D, 0x4E, 0x4D, 0xA4, 0xA2, 
   0xA4, 0x61, 0x61, 0x61, 0x4E, 0x4F, 0x4E, 0x53, 0x54, 0x53, 0x52, 0x52, 0x52, 0x51, 0x50, 0x51, 
   0x4E, 0x4E, 0x4E, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x49, 
   0x49, 0x49, 0x48, 0x48, 0x48, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x44, 
   0x46, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 
   0x44, 0x43, 0x44, 0x42, 0x43, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x3F, 0x40, 0x3F, 0x3D, 
   0x3C, 0x3D, 0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x36, 0x36, 0x36, 0x34, 0x33, 
   0x34, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x28, 0x29, 0x27, 
   0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 0x25, 0x26, 0x25, 0x25, 0x25, 
   0x25, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 0x22, 0x24, 0x22, 0x23, 0x23, 0x23, 0x20, 0x20, 0x20, 
   0x17, 0x18, 0x17, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x20, 0x20, 0x20, 0x29, 0x27, 0x29, 0x33, 
   0x31, 0x33, 0x1D, 0x1D, 0x1D, 0x2D, 0x2C, 0x2D, 0x36, 0x37, 0x36, 0x30, 0x30, 0x30, 0x28, 0x2A, 
   0x28, 0x23, 0x23, 0x23, 0x38, 0x38, 0x38, 0x32, 0x31, 0x32, 0x27, 0x26, 0x27, 0x1E, 0x20, 0x1E, 
   0x42, 0x42, 0x42, 0x44, 0x44, 0x44, 0x3E, 0x3E, 0x3E, 0x34, 0x34, 0x34, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2C, 0x2D, 0x2E, 0x2E, 0x2E, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x28, 0x28, 0x28, 0x24, 0x24, 
   0x24, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2B, 0x29, 0x2B, 
   0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x25, 0x26, 0x25, 0x18, 0x19, 0x18, 0x2D, 0x2E, 0x2D, 0x2D, 
   0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2C, 0x2B, 0x2D, 0x2C, 
   0x2D, 0x2F, 0x2E, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x30, 0x32, 0x31, 0x31, 0x31, 
   0x32, 0x31, 0x32, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2C, 0x2D, 0x2A, 
   0x2A, 0x2A, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x25, 0x26, 0x25, 0x24, 0x24, 0x24, 0x23, 0x23, 
   0x23, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
   0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 
   0x20, 0x20, 0x1E, 0x1E, 0x1E, 0x1D, 0x1D, 0x1D, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1D, 
   0x1C, 0x1D, 0x1D, 0x1D, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x20, 0x1F, 0x20, 0x20, 0x20, 0x20, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1E, 0x1E, 0x1E, 0x1C, 
   0x1D, 0x1C, 0x1D, 0x1C, 0x1D, 0x1C, 0x1C, 0x1C, 0x1D, 0x1C, 0x1D, 0x1A, 0x1C, 0x1A, 0x1A, 0x1B, 
   0x1A, 0x1A, 0x1A, 0x1A, 0x18, 0x18, 0x18, 0x17, 0x17, 0x17, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 
   0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x23, 
   0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x23, 
   0x24, 0x24, 0x23, 0x24, 0x22, 0x22, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 
   0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x24, 0x24, 0x24, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x25, 
   0x25, 0x25, 0x27, 0x25, 0x27, 0x25, 0x26, 0x25, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x25, 0x26, 
   0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x29, 0x2A, 0x29, 
   0x2B, 0x2A, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2C, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 
   0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 
   0x2D, 0x2F, 0x2F, 0x2F, 0x32, 0x32, 0x32, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 
   0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x21, 0x21, 0x21, 0x05, 
   0x06, 0x05, 0x27, 0x26, 0x27, 0x38, 0x39, 0x38, 0x11, 0x12, 0x11, 0x2C, 0x2C, 0x2C, 0x3E, 0x3E, 
   0x3E, 0x3B, 0x3B, 0x3B, 0x3F, 0x3D, 0x3F, 0x41, 0x3F, 0x41, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 
   0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x47, 
   0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x46, 0x46, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x47, 0x48, 0x47, 0x49, 0x49, 0x49, 0x4C, 0x4C, 0x4C, 
   0x4C, 0x4F, 0x4C, 0x4F, 0x4F, 0x4F, 0x52, 0x52, 0x52, 0x54, 0x54, 0x54, 0x5B, 0x5B, 0x5B, 0x2C, 
   0x2D, 0x2C, 0x00, 0x00, 0x00, 0x19, 0x19, 0x19, 0x57, 0x56, 0x57, 0x74, 0x74, 0x74, 0xA7, 0xA8, 
   0xA7, 0x35, 0x36, 0x35, 0x39, 0x3B, 0x39, 0x55, 0x57, 0x55, 0x52, 0x52, 0x52, 0x50, 0x50, 0x50, 
   0x4E, 0x4E, 0x4E, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x49, 
   0x4A, 0x49, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x44, 0x46, 0x44, 0x45, 0x46, 0x45, 0x45, 0x44, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x44, 0x46, 0x44, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 0x44, 0x42, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x3F, 
   0x3E, 0x3F, 0x3C, 0x3B, 0x3C, 0x39, 0x3A, 0x39, 0x38, 0x38, 0x38, 0x37, 0x36, 0x37, 0x33, 0x34, 
   0x33, 0x32, 0x33, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x2F, 0x31, 0x2F, 0x30, 0x30, 0x30, 
   0x2F, 0x2E, 0x2F, 0x2C, 0x2D, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x27, 
   0x26, 0x27, 0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x25, 
   0x26, 0x27, 0x25, 0x27, 0x25, 0x25, 0x25, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x1D, 0x1C, 0x1D, 
   0x12, 0x14, 0x12, 0x1B, 0x1D, 0x1B, 0x21, 0x22, 0x21, 0x22, 0x24, 0x22, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2A, 0x2C, 0x22, 0x24, 0x22, 0x2F, 0x2F, 0x2F, 0x38, 0x37, 0x38, 0x23, 0x22, 0x23, 0x1E, 0x1E, 
   0x1E, 0x22, 0x21, 0x22, 0x25, 0x23, 0x25, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x28, 0x28, 0x28, 
   0x43, 0x41, 0x43, 0x41, 0x40, 0x41, 0x39, 0x39, 0x39, 0x28, 0x27, 0x28, 0x1E, 0x1E, 0x1E, 0x1F, 
   0x1F, 0x1F, 0x20, 0x20, 0x20, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x26, 0x24, 0x26, 0x26, 0x25, 
   0x26, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 
   0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x1C, 0x1C, 0x1C, 0x18, 0x19, 0x18, 0x2B, 0x2C, 0x2B, 0x2C, 
   0x2C, 0x2C, 0x2B, 0x29, 0x2B, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2C, 0x2C, 
   0x2C, 0x30, 0x2E, 0x30, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 
   0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2C, 0x2D, 0x2C, 0x2B, 0x2A, 0x2B, 0x2A, 
   0x29, 0x2A, 0x27, 0x27, 0x27, 0x25, 0x25, 0x25, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x22, 0x21, 
   0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 
   0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 
   0x21, 0x22, 0x1F, 0x1E, 0x1F, 0x1C, 0x1D, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1D, 0x1C, 0x1D, 0x1D, 
   0x1D, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1F, 0x1F, 0x20, 0x1F, 0x20, 0x21, 0x20, 0x21, 
   0x21, 0x21, 0x21, 0x20, 0x21, 0x20, 0x20, 0x1F, 0x20, 0x1F, 0x1F, 0x1F, 0x1D, 0x1E, 0x1D, 0x1E, 
   0x1E, 0x1E, 0x1E, 0x1C, 0x1E, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1C, 0x1C, 0x1C, 0x1A, 0x1A, 
   0x1A, 0x1A, 0x19, 0x1A, 0x18, 0x18, 0x18, 0x17, 0x17, 0x17, 0x16, 0x16, 0x16, 0x14, 0x16, 0x14, 
   0x16, 0x16, 0x16, 0x16, 0x17, 0x16, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x23, 0x24, 0x23, 0x25, 
   0x24, 0x25, 0x24, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 
   0x25, 0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x22, 0x22, 0x22, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 
   0x23, 0x22, 0x23, 0x24, 0x23, 0x24, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 
   0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 
   0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x28, 0x28, 0x28, 0x29, 0x2A, 0x29, 
   0x2B, 0x2A, 0x2B, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2D, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2C, 0x2B, 0x2C, 
   0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 
   0x37, 0x36, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x3B, 0x3A, 0x3B, 0x34, 0x33, 0x34, 0x04, 
   0x03, 0x04, 0x11, 0x11, 0x11, 0x38, 0x39, 0x38, 0x24, 0x23, 0x24, 0x27, 0x25, 0x27, 0x3F, 0x3E, 
   0x3F, 0x39, 0x39, 0x39, 0x3B, 0x3C, 0x3B, 0x3F, 0x3F, 0x3F, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 
   0x43, 0x43, 0x43, 0x43, 0x45, 0x43, 0x44, 0x44, 0x44, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x47, 
   0x47, 0x47, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 
   0x45, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x47, 0x47, 0x47, 0x49, 0x48, 0x49, 0x49, 0x4C, 0x49, 
   0x4E, 0x4E, 0x4E, 0x4F, 0x50, 0x4F, 0x51, 0x51, 0x51, 0x53, 0x53, 0x53, 0x57, 0x57, 0x57, 0x4E, 
   0x4E, 0x4E, 0x0D, 0x0D, 0x0D, 0x23, 0x24, 0x23, 0x58, 0x58, 0x58, 0x68, 0x68, 0x68, 0x6B, 0x6B, 
   0x6B, 0x31, 0x32, 0x31, 0x28, 0x29, 0x28, 0x54, 0x54, 0x54, 0x51, 0x52, 0x51, 0x4F, 0x50, 0x4F, 
   0x4E, 0x4E, 0x4E, 0x4B, 0x4C, 0x4B, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x49, 
   0x4A, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x45, 0x46, 
   0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 
   0x46, 0x45, 0x46, 0x44, 0x46, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x40, 
   0x3F, 0x40, 0x3E, 0x3D, 0x3E, 0x3A, 0x3B, 0x3A, 0x38, 0x39, 0x38, 0x36, 0x37, 0x36, 0x34, 0x35, 
   0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 
   0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 0x2B, 0x2C, 0x2B, 0x29, 0x2B, 0x2A, 0x29, 0x2A, 0x28, 
   0x27, 0x28, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 
   0x27, 0x25, 0x26, 0x25, 0x25, 0x26, 0x25, 0x25, 0x24, 0x25, 0x24, 0x23, 0x24, 0x1A, 0x1B, 0x1A, 
   0x0E, 0x0E, 0x0E, 0x1E, 0x1D, 0x1E, 0x23, 0x23, 0x23, 0x21, 0x22, 0x21, 0x24, 0x23, 0x24, 0x22, 
   0x22, 0x22, 0x25, 0x25, 0x25, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x21, 0x22, 0x21, 0x20, 0x20, 
   0x20, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x23, 0x23, 0x23, 0x22, 0x22, 0x22, 0x27, 0x26, 0x27, 
   0x2E, 0x2B, 0x2E, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x24, 0x25, 0x24, 0x21, 0x22, 0x21, 0x23, 
   0x23, 0x23, 0x25, 0x23, 0x25, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x27, 
   0x29, 0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 
   0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x11, 0x12, 0x11, 0x1A, 0x1A, 0x1A, 0x29, 0x28, 0x29, 0x29, 
   0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2B, 0x2B, 
   0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2F, 0x2E, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 
   0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2B, 0x2C, 0x2B, 0x29, 0x2A, 0x29, 0x29, 
   0x28, 0x29, 0x27, 0x26, 0x27, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x21, 0x21, 
   0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 
   0x22, 0x22, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 
   0x21, 0x22, 0x1F, 0x1F, 0x1F, 0x1C, 0x1D, 0x1C, 0x1D, 0x1C, 0x1D, 0x1D, 0x1C, 0x1D, 0x1C, 0x1C, 
   0x1C, 0x1D, 0x1E, 0x1D, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x20, 0x1F, 0x20, 0x21, 0x20, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x1F, 0x1F, 0x1F, 0x1E, 0x1E, 0x1E, 0x1C, 
   0x1E, 0x1C, 0x1C, 0x1D, 0x1C, 0x1C, 0x1D, 0x1C, 0x1C, 0x1D, 0x1C, 0x1D, 0x1C, 0x1D, 0x1B, 0x1A, 
   0x1B, 0x1A, 0x1A, 0x1A, 0x18, 0x19, 0x18, 0x16, 0x17, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 
   0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 0x25, 
   0x26, 0x25, 0x27, 0x26, 0x27, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x25, 0x25, 
   0x25, 0x27, 0x26, 0x27, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 
   0x23, 0x23, 0x23, 0x25, 0x23, 0x25, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 
   0x26, 0x26, 0x26, 0x26, 0x26, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x29, 0x2A, 0x29, 
   0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 
   0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2D, 0x2B, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x0E, 
   0x0E, 0x0E, 0x07, 0x07, 0x07, 0x37, 0x38, 0x37, 0x38, 0x39, 0x38, 0x24, 0x23, 0x24, 0x32, 0x33, 
   0x32, 0x3A, 0x3C, 0x3A, 0x3D, 0x3C, 0x3D, 0x3D, 0x3F, 0x3D, 0x3F, 0x40, 0x3F, 0x42, 0x42, 0x42, 
   0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x46, 0x46, 0x46, 0x46, 
   0x47, 0x46, 0x48, 0x47, 0x48, 0x46, 0x46, 0x46, 0x44, 0x46, 0x44, 0x46, 0x45, 0x46, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x46, 0x44, 0x46, 0x44, 0x46, 0x44, 0x48, 0x48, 0x48, 0x4A, 0x4B, 0x4A, 
   0x4C, 0x4D, 0x4C, 0x4F, 0x4F, 0x4F, 0x50, 0x51, 0x50, 0x52, 0x53, 0x52, 0x55, 0x54, 0x55, 0x53, 
   0x53, 0x53, 0x2F, 0x31, 0x2F, 0x3A, 0x3B, 0x3A, 0x56, 0x58, 0x56, 0x52, 0x53, 0x52, 0x54, 0x55, 
   0x54, 0x4D, 0x4E, 0x4D, 0x2C, 0x2B, 0x2C, 0x4A, 0x4B, 0x4A, 0x54, 0x55, 0x54, 0x4E, 0x50, 0x4E, 
   0x4C, 0x4E, 0x4C, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x49, 
   0x49, 0x49, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x46, 0x47, 
   0x46, 0x45, 0x47, 0x45, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x45, 0x47, 0x45, 0x46, 0x46, 0x46, 
   0x44, 0x46, 0x44, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x3F, 
   0x40, 0x3F, 0x3E, 0x3D, 0x3E, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 0x37, 0x38, 0x37, 0x35, 0x37, 
   0x35, 0x33, 0x34, 0x33, 0x35, 0x33, 0x35, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x31, 0x30, 0x31, 
   0x2F, 0x2E, 0x2F, 0x2F, 0x2D, 0x2F, 0x2D, 0x2C, 0x2D, 0x2C, 0x2A, 0x2C, 0x2A, 0x2A, 0x2A, 0x29, 
   0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x25, 
   0x26, 0x26, 0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 0x24, 0x26, 0x25, 0x24, 0x25, 0x1B, 0x1C, 0x1B, 
   0x0F, 0x11, 0x0F, 0x1D, 0x1E, 0x1D, 0x24, 0x24, 0x24, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x21, 
   0x20, 0x21, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x21, 0x22, 0x21, 0x21, 
   0x21, 0x22, 0x21, 0x22, 0x23, 0x22, 0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 
   0x22, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x22, 0x21, 0x22, 0x1D, 
   0x1C, 0x1D, 0x1D, 0x1C, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1E, 0x1D, 0x1E, 0x1F, 0x1E, 0x1D, 0x1E, 
   0x1D, 0x25, 0x25, 0x25, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2B, 0x2A, 0x2B, 
   0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 0x0D, 0x0C, 0x0D, 0x1A, 0x1B, 0x1A, 0x2D, 0x2D, 0x2D, 0x2A, 
   0x29, 0x2A, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x29, 
   0x2A, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2D, 0x2F, 0x2D, 0x2D, 0x2D, 
   0x2F, 0x2E, 0x2F, 0x2C, 0x2E, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2A, 0x2C, 0x29, 0x29, 0x29, 0x28, 
   0x27, 0x28, 0x27, 0x26, 0x27, 0x25, 0x24, 0x25, 0x23, 0x23, 0x23, 0x21, 0x22, 0x21, 0x21, 0x20, 
   0x21, 0x20, 0x20, 0x20, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x22, 0x21, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 
   0x20, 0x20, 0x1E, 0x1E, 0x1E, 0x1C, 0x1D, 0x1C, 0x1C, 0x1C, 0x1C, 0x1D, 0x1D, 0x1D, 0x1C, 0x1D, 
   0x1C, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1F, 0x1F, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 
   0x20, 0x21, 0x20, 0x21, 0x21, 0x21, 0x20, 0x1F, 0x20, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x1D, 0x1E, 0x1E, 0x1D, 0x1E, 0x1C, 0x1D, 0x1C, 0x1B, 0x1C, 0x1B, 0x1D, 0x1C, 0x1D, 0x1A, 0x1B, 
   0x1A, 0x1A, 0x19, 0x1A, 0x18, 0x19, 0x18, 0x17, 0x16, 0x17, 0x16, 0x15, 0x16, 0x15, 0x15, 0x15, 
   0x15, 0x16, 0x15, 0x15, 0x16, 0x15, 0x28, 0x27, 0x28, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 
   0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x26, 0x27, 0x25, 0x25, 0x25, 0x24, 0x25, 0x24, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 
   0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x25, 0x26, 0x25, 0x25, 0x26, 0x25, 0x27, 0x26, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x26, 0x27, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 0x28, 0x28, 
   0x28, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 
   0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 
   0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2C, 
   0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x36, 0x35, 
   0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x3C, 0x3C, 0x3C, 0x21, 
   0x21, 0x21, 0x00, 0x00, 0x00, 0x29, 0x27, 0x29, 0x40, 0x41, 0x40, 0x25, 0x27, 0x25, 0x24, 0x25, 
   0x24, 0x41, 0x41, 0x41, 0x3C, 0x3D, 0x3C, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 
   0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x46, 
   0x46, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x44, 0x45, 0x44, 0x43, 0x44, 
   0x43, 0x43, 0x43, 0x43, 0x44, 0x45, 0x44, 0x46, 0x46, 0x46, 0x47, 0x48, 0x47, 0x49, 0x4B, 0x49, 
   0x4C, 0x4C, 0x4C, 0x4E, 0x4D, 0x4E, 0x51, 0x50, 0x51, 0x52, 0x52, 0x52, 0x53, 0x53, 0x53, 0x50, 
   0x4F, 0x50, 0x20, 0x1F, 0x20, 0x41, 0x42, 0x41, 0x5F, 0x60, 0x5F, 0x56, 0x56, 0x56, 0x56, 0x56, 
   0x56, 0x56, 0x57, 0x56, 0x3E, 0x3D, 0x3E, 0x46, 0x44, 0x46, 0x58, 0x59, 0x58, 0x50, 0x50, 0x50, 
   0x4E, 0x4D, 0x4E, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x48, 
   0x4A, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 
   0x46, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 
   0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x40, 
   0x42, 0x40, 0x40, 0x3E, 0x40, 0x3C, 0x3C, 0x3C, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x38, 0x37, 
   0x38, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 
   0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2C, 0x2C, 0x2C, 0x2A, 0x2A, 0x2A, 0x2B, 
   0x29, 0x2B, 0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x25, 0x26, 
   0x25, 0x25, 0x26, 0x25, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x1D, 0x1D, 0x1D, 
   0x23, 0x24, 0x23, 0x2A, 0x29, 0x2A, 0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 
   0x23, 0x23, 0x24, 0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x23, 0x23, 
   0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x26, 0x25, 0x26, 0x26, 0x27, 0x26, 0x26, 0x26, 0x26, 
   0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x29, 0x29, 0x29, 0x12, 
   0x13, 0x12, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x14, 0x14, 0x14, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x2B, 0x2A, 0x2B, 0x29, 0x28, 0x29, 0x09, 0x0B, 0x09, 0x1D, 0x1D, 0x1D, 0x2C, 0x2B, 0x2C, 0x2A, 
   0x29, 0x2A, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x29, 0x28, 
   0x29, 0x2A, 0x29, 0x2A, 0x2B, 0x2A, 0x2B, 0x2D, 0x2B, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 
   0x2E, 0x2C, 0x2E, 0x2B, 0x2C, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x27, 
   0x26, 0x27, 0x26, 0x25, 0x26, 0x24, 0x24, 0x24, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x21, 0x20, 
   0x21, 0x20, 0x20, 0x20, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 
   0x1E, 0x1D, 0x1D, 0x1D, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 
   0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x1F, 0x1F, 0x20, 0x1F, 0x20, 0x1E, 0x1E, 0x1E, 0x1C, 
   0x1E, 0x1C, 0x1D, 0x1D, 0x1D, 0x1D, 0x1C, 0x1D, 0x1C, 0x1C, 0x1C, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 
   0x1A, 0x19, 0x19, 0x19, 0x17, 0x18, 0x17, 0x16, 0x16, 0x16, 0x14, 0x15, 0x14, 0x14, 0x15, 0x14, 
   0x14, 0x15, 0x14, 0x14, 0x15, 0x14, 0x29, 0x28, 0x29, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 0x28, 0x27, 0x28, 0x28, 0x27, 
   0x28, 0x26, 0x27, 0x26, 0x26, 0x26, 0x26, 0x26, 0x24, 0x26, 0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 
   0x26, 0x25, 0x26, 0x26, 0x26, 0x26, 0x25, 0x26, 0x25, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x29, 0x28, 
   0x29, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2B, 0x2A, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2F, 0x2D, 0x2F, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 
   0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x34, 0x33, 0x34, 0x35, 0x35, 0x35, 
   0x37, 0x35, 0x37, 0x36, 0x37, 0x36, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x3B, 0x3B, 0x3B, 0x2C, 
   0x2D, 0x2C, 0x01, 0x01, 0x01, 0x16, 0x15, 0x16, 0x3C, 0x3D, 0x3C, 0x31, 0x31, 0x31, 0x21, 0x20, 
   0x21, 0x3C, 0x3A, 0x3C, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3F, 0x3F, 0x3F, 0x3E, 0x40, 0x3E, 
   0x41, 0x41, 0x41, 0x42, 0x43, 0x42, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x44, 
   0x45, 0x44, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x44, 0x46, 0x44, 0x45, 0x45, 0x45, 0x44, 0x44, 
   0x44, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 0x45, 0x44, 0x47, 0x48, 0x47, 0x4A, 0x4B, 0x4A, 
   0x4C, 0x4C, 0x4C, 0x4E, 0x4D, 0x4E, 0x4E, 0x4F, 0x4E, 0x51, 0x50, 0x51, 0x51, 0x53, 0x51, 0x4F, 
   0x4F, 0x4F, 0x25, 0x24, 0x25, 0x22, 0x24, 0x22, 0x48, 0x48, 0x48, 0x58, 0x58, 0x58, 0x54, 0x55, 
   0x54, 0x57, 0x59, 0x57, 0x4F, 0x51, 0x4F, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x4F, 0x4F, 0x4F, 
   0x4D, 0x4C, 0x4D, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 
   0x4A, 0x4A, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 
   0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 
   0x47, 0x46, 0x47, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 
   0x41, 0x42, 0x40, 0x40, 0x40, 0x3E, 0x3D, 0x3E, 0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 0x3A, 0x38, 
   0x3A, 0x38, 0x38, 0x38, 0x37, 0x36, 0x37, 0x34, 0x35, 0x34, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 
   0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 
   0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x28, 0x28, 0x28, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x25, 0x25, 
   0x25, 0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 0x26, 0x26, 0x26, 0x25, 0x25, 0x25, 0x14, 0x15, 0x14, 
   0x25, 0x24, 0x25, 0x2F, 0x2C, 0x2F, 0x25, 0x26, 0x25, 0x23, 0x23, 0x23, 0x21, 0x21, 0x21, 0x1F, 
   0x1E, 0x1F, 0x1D, 0x1D, 0x1D, 0x1C, 0x1D, 0x1C, 0x1B, 0x1D, 0x1B, 0x1E, 0x1D, 0x1E, 0x1D, 0x1D, 
   0x1D, 0x1F, 0x1D, 0x1F, 0x1F, 0x1F, 0x1F, 0x21, 0x20, 0x21, 0x20, 0x21, 0x20, 0x21, 0x22, 0x21, 
   0x24, 0x25, 0x24, 0x28, 0x28, 0x28, 0x25, 0x26, 0x25, 0x28, 0x29, 0x28, 0x2A, 0x2A, 0x2A, 0x1B, 
   0x1A, 0x1B, 0x01, 0x01, 0x01, 0x07, 0x07, 0x07, 0x1E, 0x1F, 0x1E, 0x03, 0x03, 0x03, 0x01, 0x01, 
   0x01, 0x10, 0x0F, 0x10, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 
   0x2B, 0x2B, 0x2B, 0x27, 0x28, 0x27, 0x13, 0x14, 0x13, 0x25, 0x24, 0x25, 0x2A, 0x2A, 0x2A, 0x28, 
   0x28, 0x28, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 
   0x26, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 
   0x2B, 0x29, 0x2B, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x27, 0x26, 0x27, 0x26, 
   0x25, 0x26, 0x24, 0x25, 0x24, 0x24, 0x23, 0x24, 0x24, 0x22, 0x24, 0x22, 0x22, 0x22, 0x21, 0x21, 
   0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x20, 0x1F, 0x20, 0x1D, 
   0x1F, 0x1D, 0x1E, 0x1F, 0x1E, 0x1F, 0x1E, 0x1F, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 
   0x1D, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x20, 0x20, 0x20, 0x21, 0x20, 0x21, 
   0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x1D, 0x1E, 0x1E, 0x1D, 0x1E, 0x1D, 0x1C, 0x1D, 0x1B, 0x1B, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 
   0x1A, 0x18, 0x18, 0x18, 0x16, 0x17, 0x16, 0x14, 0x16, 0x14, 0x15, 0x15, 0x15, 0x14, 0x15, 0x14, 
   0x14, 0x15, 0x14, 0x14, 0x15, 0x14, 0x29, 0x2B, 0x29, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x29, 0x2A, 0x2B, 0x29, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x28, 0x29, 0x28, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2B, 0x29, 
   0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 
   0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 
   0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x37, 
   0x38, 0x37, 0x17, 0x18, 0x17, 0x06, 0x08, 0x06, 0x33, 0x36, 0x33, 0x3E, 0x3D, 0x3E, 0x25, 0x24, 
   0x25, 0x27, 0x28, 0x27, 0x3E, 0x3E, 0x3E, 0x3E, 0x3C, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 
   0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x44, 0x43, 0x44, 0x44, 0x45, 0x44, 0x45, 
   0x45, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x43, 0x44, 
   0x43, 0x44, 0x43, 0x44, 0x42, 0x44, 0x42, 0x46, 0x45, 0x46, 0x47, 0x47, 0x47, 0x4A, 0x49, 0x4A, 
   0x4B, 0x4B, 0x4B, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x51, 
   0x51, 0x51, 0x3C, 0x3C, 0x3C, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x45, 0x44, 0x45, 0x56, 0x56, 
   0x56, 0x54, 0x54, 0x54, 0x5E, 0x5F, 0x5E, 0x45, 0x46, 0x45, 0x1B, 0x1B, 0x1B, 0x48, 0x47, 0x48, 
   0x4C, 0x4F, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 
   0x4C, 0x4B, 0x4C, 0x4B, 0x4C, 0x4B, 0x4A, 0x4B, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 
   0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x43, 0x44, 0x43, 0x43, 
   0x42, 0x43, 0x41, 0x41, 0x41, 0x3C, 0x3E, 0x3C, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x38, 0x39, 0x35, 0x35, 0x35, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 
   0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x28, 0x27, 0x28, 0x27, 0x26, 0x27, 0x27, 0x25, 
   0x27, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x26, 0x27, 0x26, 0x28, 0x27, 0x28, 0x0D, 0x0C, 0x0D, 
   0x18, 0x18, 0x18, 0x2C, 0x2A, 0x2C, 0x27, 0x27, 0x27, 0x25, 0x27, 0x25, 0x20, 0x21, 0x20, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x06, 0x06, 0x06, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x1D, 0x1D, 0x1D, 0x21, 0x22, 0x21, 0x26, 
   0x26, 0x26, 0x24, 0x24, 0x24, 0x26, 0x25, 0x26, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x12, 0x11, 
   0x12, 0x10, 0x0F, 0x10, 0x2A, 0x29, 0x2A, 0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x29, 0x29, 0x29, 
   0x2B, 0x2A, 0x2B, 0x18, 0x18, 0x18, 0x22, 0x20, 0x22, 0x23, 0x23, 0x23, 0x29, 0x28, 0x29, 0x27, 
   0x26, 0x27, 0x26, 0x25, 0x26, 0x24, 0x25, 0x24, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 0x23, 0x25, 
   0x23, 0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 0x27, 0x26, 0x27, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 
   0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x25, 
   0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x21, 0x20, 
   0x21, 0x1F, 0x20, 0x1F, 0x20, 0x20, 0x20, 0x1F, 0x1F, 0x1F, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 
   0x21, 0x20, 0x21, 0x22, 0x21, 0x22, 0x22, 0x21, 0x22, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x20, 0x1F, 0x20, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1E, 
   0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 0x1F, 
   0x1E, 0x1F, 0x1D, 0x1E, 0x1D, 0x1C, 0x1D, 0x1C, 0x1C, 0x1A, 0x1C, 0x1B, 0x19, 0x1B, 0x18, 0x18, 
   0x18, 0x17, 0x17, 0x17, 0x16, 0x16, 0x16, 0x14, 0x15, 0x14, 0x15, 0x14, 0x15, 0x13, 0x13, 0x13, 
   0x12, 0x13, 0x12, 0x12, 0x12, 0x12, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 
   0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 
   0x2B, 0x29, 0x2A, 0x29, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 
   0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 
   0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x29, 0x2B, 0x29, 0x2C, 0x2B, 0x2C, 
   0x2C, 0x2D, 0x2C, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2D, 0x2E, 0x2C, 0x2C, 0x2C, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 
   0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x32, 0x31, 0x32, 0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 
   0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x3A, 
   0x39, 0x3A, 0x30, 0x2F, 0x30, 0x03, 0x03, 0x03, 0x08, 0x09, 0x08, 0x36, 0x35, 0x36, 0x2F, 0x2E, 
   0x2F, 0x1B, 0x1A, 0x1B, 0x3F, 0x3E, 0x3F, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 
   0x40, 0x3E, 0x40, 0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x43, 0x44, 0x44, 
   0x43, 0x44, 0x44, 0x44, 0x44, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x46, 0x44, 0x46, 0x44, 0x45, 0x44, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 
   0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4C, 0x4A, 0x4C, 0x4D, 0x4C, 0x4D, 0x4E, 0x4E, 0x4E, 0x4F, 
   0x4F, 0x4F, 0x52, 0x53, 0x52, 0x26, 0x27, 0x26, 0x00, 0x00, 0x00, 0x0D, 0x0D, 0x0D, 0x41, 0x41, 
   0x41, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 0x4E, 0x4E, 0x4E, 0x2D, 0x2D, 0x2D, 0x40, 0x40, 0x40, 
   0x53, 0x53, 0x53, 0x4B, 0x4D, 0x4B, 0x4C, 0x4B, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 
   0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 0x4C, 0x4B, 0x4C, 0x4A, 0x49, 0x4A, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x47, 0x47, 0x47, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x46, 0x44, 0x46, 0x42, 
   0x43, 0x42, 0x3F, 0x41, 0x3F, 0x3D, 0x3E, 0x3D, 0x3C, 0x3B, 0x3C, 0x39, 0x3B, 0x39, 0x3A, 0x3A, 
   0x3A, 0x39, 0x3A, 0x39, 0x39, 0x38, 0x39, 0x36, 0x36, 0x36, 0x34, 0x35, 0x34, 0x34, 0x33, 0x34, 
   0x33, 0x32, 0x33, 0x32, 0x31, 0x32, 0x30, 0x30, 0x30, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2B, 0x2B, 0x2B, 0x29, 0x2A, 0x29, 0x29, 0x28, 0x29, 0x27, 0x26, 0x27, 0x26, 0x25, 
   0x26, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x18, 0x18, 0x18, 
   0x23, 0x23, 0x23, 0x29, 0x28, 0x29, 0x18, 0x19, 0x18, 0x22, 0x23, 0x22, 0x29, 0x28, 0x29, 0x0D, 
   0x0C, 0x0D, 0x0A, 0x0A, 0x0A, 0x0A, 0x0B, 0x0A, 0x0A, 0x0B, 0x0A, 0x0A, 0x0B, 0x0A, 0x0A, 0x0B, 
   0x0A, 0x0A, 0x0B, 0x0A, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0D, 0x0C, 0x0D, 0x0C, 0x0C, 0x0C, 
   0x0D, 0x0B, 0x0D, 0x17, 0x18, 0x17, 0x1C, 0x1C, 0x1C, 0x22, 0x20, 0x22, 0x24, 0x24, 0x24, 0x29, 
   0x28, 0x29, 0x28, 0x29, 0x28, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x2C, 0x2A, 0x2C, 0x20, 0x1F, 
   0x20, 0x1D, 0x1C, 0x1D, 0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x2C, 0x2A, 0x2C, 
   0x26, 0x25, 0x26, 0x11, 0x12, 0x11, 0x28, 0x27, 0x28, 0x24, 0x25, 0x24, 0x27, 0x26, 0x27, 0x27, 
   0x25, 0x27, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 
   0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x24, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 
   0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x24, 
   0x23, 0x24, 0x25, 0x24, 0x25, 0x23, 0x23, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x20, 0x1F, 
   0x20, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 0x21, 0x1F, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x1F, 0x1E, 0x1F, 0x1E, 
   0x1F, 0x1E, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x20, 0x21, 0x20, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x1F, 
   0x1F, 0x1F, 0x1E, 0x1E, 0x1E, 0x1D, 0x1D, 0x1D, 0x1C, 0x1B, 0x1C, 0x19, 0x19, 0x19, 0x17, 0x17, 
   0x17, 0x15, 0x17, 0x15, 0x15, 0x16, 0x15, 0x15, 0x14, 0x15, 0x13, 0x14, 0x13, 0x12, 0x13, 0x12, 
   0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2B, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2B, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x29, 0x2A, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
   0x27, 0x28, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x27, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 
   0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 
   0x2C, 0x2D, 0x2C, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 
   0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x29, 0x2B, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x29, 0x2B, 0x29, 0x28, 0x29, 
   0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x2C, 0x2B, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 
   0x2D, 0x2E, 0x2E, 0x2E, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x36, 0x34, 0x36, 
   0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x37, 
   0x37, 0x37, 0x3A, 0x39, 0x3A, 0x13, 0x12, 0x13, 0x00, 0x00, 0x00, 0x23, 0x22, 0x23, 0x38, 0x38, 
   0x38, 0x17, 0x18, 0x17, 0x3E, 0x3D, 0x3E, 0x3A, 0x3C, 0x3A, 0x3B, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 
   0x3E, 0x3D, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x40, 0x43, 0x42, 0x43, 0x43, 
   0x43, 0x43, 0x44, 0x43, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x4A, 0x49, 0x4A, 0x48, 0x49, 0x48, 0x4C, 0x4C, 0x4C, 0x4B, 0x4B, 0x4B, 0x4D, 
   0x4D, 0x4D, 0x51, 0x52, 0x51, 0x48, 0x48, 0x48, 0x0B, 0x0C, 0x0B, 0x00, 0x00, 0x00, 0x18, 0x1A, 
   0x18, 0x4B, 0x4C, 0x4B, 0x4F, 0x4F, 0x4F, 0x50, 0x50, 0x50, 0x4A, 0x4C, 0x4A, 0x35, 0x34, 0x35, 
   0x47, 0x47, 0x47, 0x4F, 0x51, 0x4F, 0x4D, 0x4D, 0x4D, 0x4D, 0x4F, 0x4D, 0x4F, 0x4F, 0x4F, 0x4D, 
   0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4D, 0x4C, 0x4D, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 0x48, 0x49, 
   0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x49, 0x48, 0x46, 0x47, 0x46, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x42, 
   0x43, 0x42, 0x41, 0x42, 0x41, 0x3F, 0x3D, 0x3F, 0x3D, 0x3B, 0x3D, 0x3B, 0x3A, 0x3B, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x35, 0x34, 0x35, 
   0x33, 0x34, 0x33, 0x31, 0x32, 0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x2E, 0x2E, 0x2E, 0x2C, 
   0x2D, 0x2C, 0x2B, 0x2B, 0x2B, 0x29, 0x29, 0x29, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x25, 
   0x26, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x2A, 0x29, 0x2A, 
   0x2E, 0x2E, 0x2E, 0x26, 0x25, 0x26, 0x0C, 0x0C, 0x0C, 0x22, 0x23, 0x22, 0x2D, 0x2D, 0x2D, 0x2B, 
   0x2B, 0x2B, 0x29, 0x29, 0x29, 0x28, 0x2A, 0x28, 0x28, 0x29, 0x28, 0x28, 0x29, 0x28, 0x28, 0x29, 
   0x28, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2C, 0x2A, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 
   0x2D, 0x2A, 0x2D, 0x2A, 0x29, 0x2A, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 
   0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x27, 0x28, 0x27, 0x2C, 0x2A, 
   0x2C, 0x2C, 0x2B, 0x2C, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 
   0x23, 0x22, 0x23, 0x18, 0x18, 0x18, 0x28, 0x29, 0x28, 0x26, 0x27, 0x26, 0x24, 0x25, 0x24, 0x24, 
   0x24, 0x24, 0x23, 0x22, 0x23, 0x21, 0x22, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 
   0x23, 0x22, 0x23, 0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x24, 0x24, 0x24, 0x23, 
   0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x21, 0x22, 0x22, 0x20, 0x22, 0x20, 0x1F, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x20, 0x20, 0x20, 
   0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x21, 0x20, 0x21, 0x1F, 0x20, 0x1F, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 
   0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1B, 0x1D, 0x1B, 0x19, 0x1B, 0x19, 0x17, 0x19, 0x17, 0x17, 0x17, 
   0x17, 0x17, 0x16, 0x17, 0x15, 0x16, 0x15, 0x14, 0x14, 0x14, 0x14, 0x13, 0x14, 0x13, 0x13, 0x13, 
   0x11, 0x12, 0x11, 0x11, 0x12, 0x11, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 
   0x2E, 0x2E, 0x2D, 0x2E, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2B, 0x2C, 0x2A, 0x29, 0x2A, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x2A, 0x2A, 
   0x2A, 0x29, 0x2B, 0x29, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 
   0x2E, 0x2D, 0x2E, 0x2D, 0x2F, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 
   0x2E, 0x2D, 0x2C, 0x2C, 0x2C, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 
   0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2B, 0x2A, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 
   0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2F, 0x2E, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 
   0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x37, 
   0x37, 0x37, 0x39, 0x38, 0x39, 0x29, 0x2A, 0x29, 0x05, 0x05, 0x05, 0x0D, 0x0D, 0x0D, 0x34, 0x35, 
   0x34, 0x1D, 0x20, 0x1D, 0x33, 0x31, 0x33, 0x3D, 0x3D, 0x3D, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 
   0x3C, 0x3C, 0x3C, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x40, 0x3F, 0x40, 0x40, 0x41, 0x40, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x43, 0x44, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x45, 0x44, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 
   0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x4A, 0x49, 0x4A, 0x4A, 0x4B, 0x4A, 0x4B, 
   0x4C, 0x4B, 0x4D, 0x4D, 0x4D, 0x4F, 0x50, 0x4F, 0x3C, 0x3D, 0x3C, 0x09, 0x0A, 0x09, 0x00, 0x00, 
   0x00, 0x3C, 0x3E, 0x3C, 0x51, 0x51, 0x51, 0x4D, 0x4D, 0x4D, 0x4F, 0x50, 0x4F, 0x3A, 0x39, 0x3A, 
   0x31, 0x2E, 0x31, 0x4F, 0x50, 0x4F, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x4F, 
   0x50, 0x4F, 0x4F, 0x4F, 0x4F, 0x4D, 0x4F, 0x4D, 0x4C, 0x4D, 0x4C, 0x4B, 0x4A, 0x4B, 0x49, 0x4A, 
   0x49, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 
   0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x47, 0x46, 0x47, 0x45, 0x45, 0x45, 0x43, 
   0x43, 0x43, 0x41, 0x42, 0x41, 0x3E, 0x3E, 0x3E, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x39, 
   0x3B, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 
   0x36, 0x34, 0x36, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2E, 0x2F, 0x2E, 0x2D, 
   0x2E, 0x2D, 0x2C, 0x2C, 0x2C, 0x2B, 0x29, 0x2B, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x24, 0x25, 0x24, 0x1D, 0x1F, 0x1D, 0x35, 0x35, 0x35, 
   0x36, 0x36, 0x36, 0x23, 0x23, 0x23, 0x0C, 0x0C, 0x0C, 0x29, 0x29, 0x29, 0x2C, 0x2D, 0x2C, 0x2B, 
   0x2D, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2B, 
   0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 
   0x2E, 0x2F, 0x2E, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2B, 
   0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x22, 0x20, 0x22, 0x14, 0x14, 
   0x14, 0x24, 0x24, 0x24, 0x28, 0x28, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 
   0x21, 0x1F, 0x21, 0x19, 0x1B, 0x19, 0x29, 0x28, 0x29, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x22, 
   0x22, 0x22, 0x21, 0x22, 0x21, 0x20, 0x20, 0x20, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1E, 
   0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x20, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x22, 0x22, 0x22, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 
   0x23, 0x23, 0x23, 0x21, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x20, 0x1F, 0x20, 0x21, 0x20, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x1F, 0x20, 0x1F, 0x1E, 0x1F, 0x1E, 0x1F, 
   0x1D, 0x1F, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1F, 0x1E, 0x1F, 0x1E, 0x1E, 
   0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1C, 0x1D, 0x1C, 0x1B, 0x1B, 0x1B, 0x19, 0x18, 0x19, 0x17, 0x17, 
   0x17, 0x16, 0x15, 0x16, 0x15, 0x16, 0x15, 0x14, 0x14, 0x14, 0x13, 0x14, 0x13, 0x12, 0x13, 0x12, 
   0x12, 0x12, 0x12, 0x10, 0x12, 0x10, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 
   0x2F, 0x30, 0x31, 0x2F, 0x31, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2D, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 
   0x2C, 0x2C, 0x2C, 0x2B, 0x2A, 0x2B, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 
   0x29, 0x2A, 0x2A, 0x28, 0x2A, 0x29, 0x28, 0x29, 0x27, 0x29, 0x27, 0x2A, 0x28, 0x2A, 0x29, 0x29, 
   0x29, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2D, 0x2E, 0x2C, 0x2B, 0x2C, 0x29, 0x29, 0x29, 0x27, 0x28, 0x27, 0x29, 0x28, 0x29, 0x28, 0x28, 
   0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 
   0x29, 0x29, 0x29, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 
   0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x33, 0x32, 0x33, 0x34, 0x34, 0x34, 
   0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x36, 
   0x35, 0x36, 0x36, 0x35, 0x36, 0x37, 0x37, 0x37, 0x1E, 0x1F, 0x1E, 0x01, 0x01, 0x01, 0x20, 0x21, 
   0x20, 0x28, 0x2A, 0x28, 0x1E, 0x1F, 0x1E, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 
   0x3B, 0x3B, 0x3B, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x40, 
   0x40, 0x40, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x44, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x47, 0x46, 0x47, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 
   0x46, 0x48, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x4A, 0x4A, 0x4A, 0x4A, 
   0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4D, 0x4E, 0x4D, 0x56, 0x55, 0x56, 0x2C, 0x2D, 0x2C, 0x00, 0x00, 
   0x00, 0x39, 0x39, 0x39, 0x51, 0x50, 0x51, 0x4A, 0x4A, 0x4A, 0x4B, 0x4D, 0x4B, 0x47, 0x48, 0x47, 
   0x27, 0x25, 0x27, 0x46, 0x44, 0x46, 0x54, 0x53, 0x54, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 0x51, 
   0x52, 0x51, 0x52, 0x50, 0x52, 0x4F, 0x4F, 0x4F, 0x4D, 0x4E, 0x4D, 0x4C, 0x4D, 0x4C, 0x4B, 0x4A, 
   0x4B, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 
   0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 0x45, 0x47, 0x44, 
   0x44, 0x44, 0x41, 0x42, 0x41, 0x3E, 0x40, 0x3E, 0x3C, 0x3D, 0x3C, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 
   0x3A, 0x37, 0x39, 0x37, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 
   0x35, 0x35, 0x35, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x2E, 
   0x2F, 0x2E, 0x2D, 0x2D, 0x2D, 0x2A, 0x29, 0x2A, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 
   0x28, 0x28, 0x28, 0x28, 0x2A, 0x29, 0x2A, 0x20, 0x20, 0x20, 0x14, 0x15, 0x14, 0x34, 0x32, 0x34, 
   0x33, 0x33, 0x33, 0x22, 0x20, 0x22, 0x16, 0x17, 0x16, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2D, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 
   0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2C, 0x2C, 0x2C, 0x2E, 0x2C, 0x2E, 0x22, 0x21, 0x22, 0x12, 0x11, 
   0x12, 0x21, 0x20, 0x21, 0x29, 0x29, 0x29, 0x27, 0x28, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 
   0x1A, 0x1B, 0x1A, 0x1D, 0x1D, 0x1D, 0x27, 0x27, 0x27, 0x22, 0x23, 0x22, 0x22, 0x22, 0x22, 0x22, 
   0x21, 0x22, 0x20, 0x1F, 0x20, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1D, 0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 
   0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1F, 0x1F, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 
   0x20, 0x1F, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
   0x21, 0x22, 0x23, 0x21, 0x23, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 
   0x1F, 0x1F, 0x1E, 0x1F, 0x1F, 0x1E, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 
   0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x20, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1C, 0x1D, 0x1C, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1E, 0x1E, 
   0x1E, 0x1F, 0x1E, 0x1F, 0x21, 0x20, 0x21, 0x20, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x1F, 
   0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 0x1C, 0x1C, 0x1C, 0x19, 0x1B, 0x19, 0x17, 0x18, 0x17, 0x16, 0x17, 
   0x16, 0x15, 0x15, 0x15, 0x14, 0x15, 0x14, 0x15, 0x15, 0x15, 0x13, 0x14, 0x13, 0x13, 0x13, 0x13, 
   0x11, 0x12, 0x11, 0x11, 0x12, 0x11, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 
   0x2D, 0x2C, 0x2D, 0x2C, 0x2A, 0x2C, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2E, 0x2D, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2C, 
   0x2D, 0x2C, 0x2B, 0x2B, 0x2B, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x28, 0x28, 
   0x28, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 
   0x29, 0x29, 0x29, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2C, 0x2C, 0x2E, 0x2D, 0x2E, 0x2F, 0x2E, 0x2F, 0x32, 0x31, 0x32, 0x33, 0x33, 0x33, 
   0x34, 0x33, 0x34, 0x34, 0x35, 0x34, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x36, 0x35, 0x36, 0x2F, 0x2F, 0x2F, 0x05, 0x05, 0x05, 0x12, 0x11, 
   0x12, 0x32, 0x31, 0x32, 0x0D, 0x10, 0x0D, 0x2E, 0x2F, 0x2E, 0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 
   0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x44, 
   0x45, 0x45, 0x44, 0x45, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 
   0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x48, 0x48, 0x48, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4C, 0x4B, 0x4C, 0x50, 0x4F, 0x50, 0x3D, 0x3C, 0x3D, 0x02, 0x02, 
   0x02, 0x40, 0x40, 0x40, 0x4F, 0x4F, 0x4F, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4D, 0x4B, 
   0x28, 0x28, 0x28, 0x33, 0x33, 0x33, 0x57, 0x57, 0x57, 0x52, 0x51, 0x52, 0x52, 0x53, 0x52, 0x52, 
   0x52, 0x52, 0x52, 0x52, 0x52, 0x51, 0x50, 0x51, 0x4E, 0x4F, 0x4E, 0x4C, 0x4E, 0x4C, 0x4C, 0x4B, 
   0x4C, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 0x4A, 
   0x4A, 0x49, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x45, 
   0x45, 0x45, 0x43, 0x43, 0x43, 0x41, 0x40, 0x41, 0x3E, 0x3E, 0x3E, 0x3C, 0x3C, 0x3C, 0x3B, 0x3A, 
   0x3B, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 
   0x35, 0x35, 0x35, 0x34, 0x33, 0x34, 0x33, 0x32, 0x33, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2B, 0x2A, 0x2B, 0x29, 0x28, 0x29, 0x27, 0x28, 0x27, 0x29, 0x28, 
   0x29, 0x29, 0x28, 0x29, 0x2B, 0x2A, 0x2B, 0x1F, 0x1E, 0x1F, 0x09, 0x07, 0x09, 0x2A, 0x2B, 0x2A, 
   0x32, 0x31, 0x32, 0x21, 0x20, 0x21, 0x20, 0x22, 0x20, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x30, 
   0x2E, 0x30, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x31, 0x30, 0x32, 0x32, 0x32, 0x34, 0x33, 0x34, 0x33, 0x32, 0x33, 
   0x31, 0x32, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x30, 
   0x2E, 0x30, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x21, 0x23, 0x21, 0x19, 0x19, 
   0x19, 0x27, 0x24, 0x27, 0x27, 0x28, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x24, 0x23, 0x24, 
   0x11, 0x11, 0x11, 0x1F, 0x20, 0x1F, 0x26, 0x27, 0x26, 0x23, 0x21, 0x23, 0x21, 0x21, 0x21, 0x1E, 
   0x1F, 0x1E, 0x1E, 0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 
   0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1D, 0x1D, 0x1D, 0x1C, 0x1E, 0x1C, 0x1D, 0x1E, 0x1D, 
   0x1E, 0x1E, 0x1E, 0x1F, 0x1F, 0x1F, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 
   0x20, 0x21, 0x21, 0x21, 0x21, 0x1F, 0x20, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1E, 
   0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 
   0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x1D, 0x1E, 0x1E, 0x1D, 0x1E, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1D, 0x1D, 0x1D, 0x1E, 0x1D, 
   0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x1E, 
   0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1B, 0x1B, 0x1B, 0x19, 0x1A, 0x19, 0x18, 0x19, 0x18, 0x16, 0x17, 
   0x16, 0x15, 0x16, 0x15, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x13, 0x14, 0x13, 0x12, 0x13, 
   0x12, 0x11, 0x12, 0x11, 0x11, 0x11, 0x31, 0x32, 0x31, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 
   0x31, 0x2F, 0x31, 0x2F, 0x31, 0x30, 0x31, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 
   0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 
   0x2C, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2B, 
   0x2C, 0x2B, 0x2B, 0x2A, 0x2B, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 
   0x28, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
   0x28, 0x29, 0x28, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x31, 0x30, 0x31, 
   0x31, 0x32, 0x31, 0x32, 0x33, 0x32, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 
   0x33, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x36, 0x35, 0x36, 0x0D, 0x0D, 0x0D, 0x04, 0x04, 
   0x04, 0x2F, 0x30, 0x2F, 0x17, 0x17, 0x17, 0x2A, 0x29, 0x2A, 0x3D, 0x3D, 0x3D, 0x39, 0x39, 0x39, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3D, 0x3C, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x40, 
   0x40, 0x40, 0x42, 0x41, 0x42, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 
   0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x49, 
   0x49, 0x49, 0x49, 0x4A, 0x49, 0x4A, 0x4B, 0x4A, 0x4E, 0x4E, 0x4E, 0x3B, 0x3B, 0x3B, 0x02, 0x02, 
   0x02, 0x32, 0x33, 0x32, 0x4F, 0x4F, 0x4F, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4C, 0x4D, 0x4C, 
   0x41, 0x41, 0x41, 0x34, 0x35, 0x34, 0x54, 0x55, 0x54, 0x53, 0x54, 0x53, 0x53, 0x53, 0x53, 0x53, 
   0x53, 0x53, 0x52, 0x53, 0x52, 0x52, 0x51, 0x52, 0x50, 0x50, 0x50, 0x4E, 0x4F, 0x4E, 0x4C, 0x4C, 
   0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 
   0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x44, 
   0x46, 0x44, 0x44, 0x44, 0x44, 0x41, 0x41, 0x41, 0x3F, 0x3F, 0x3F, 0x3E, 0x3D, 0x3E, 0x3C, 0x3B, 
   0x3C, 0x3B, 0x39, 0x3B, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x36, 0x37, 0x36, 
   0x36, 0x35, 0x36, 0x35, 0x34, 0x35, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x30, 0x31, 0x2E, 
   0x2E, 0x2E, 0x2C, 0x2D, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 
   0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2B, 0x2A, 0x23, 0x25, 0x23, 0x16, 0x16, 0x16, 0x2B, 0x2A, 0x2B, 
   0x32, 0x2F, 0x32, 0x20, 0x20, 0x20, 0x29, 0x2B, 0x29, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x2F, 
   0x31, 0x2F, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x30, 
   0x2F, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x2F, 
   0x31, 0x2F, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x33, 0x32, 0x33, 0x35, 0x34, 0x35, 0x31, 0x30, 
   0x31, 0x2C, 0x2C, 0x2C, 0x28, 0x27, 0x28, 0x27, 0x26, 0x27, 0x28, 0x27, 0x28, 0x1F, 0x20, 0x1F, 
   0x0D, 0x0D, 0x0D, 0x21, 0x22, 0x21, 0x25, 0x26, 0x25, 0x23, 0x21, 0x23, 0x21, 0x20, 0x21, 0x1E, 
   0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1C, 0x1C, 0x1C, 0x19, 0x1B, 0x19, 0x19, 0x1A, 0x19, 0x1A, 0x1A, 
   0x1A, 0x1A, 0x1B, 0x1A, 0x1C, 0x1B, 0x1C, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 
   0x1B, 0x1B, 0x1B, 0x1D, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1E, 0x21, 0x20, 0x21, 0x20, 
   0x1F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1D, 0x1E, 
   0x1D, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x21, 0x20, 0x21, 
   0x20, 0x1F, 0x20, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x1C, 0x1E, 0x1E, 0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 0x1C, 0x1D, 0x1C, 0x1E, 0x1D, 0x1E, 0x1E, 0x1D, 
   0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 0x1F, 0x1F, 0x1F, 0x1E, 
   0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1B, 0x1C, 0x1B, 0x19, 0x1A, 0x19, 0x18, 0x18, 0x18, 0x16, 0x16, 
   0x16, 0x15, 0x15, 0x15, 0x14, 0x15, 0x14, 0x14, 0x14, 0x14, 0x12, 0x13, 0x12, 0x10, 0x12, 0x10, 
   0x12, 0x10, 0x12, 0x10, 0x11, 0x10, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 
   0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 
   0x2E, 0x2E, 0x2E, 0x30, 0x2E, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 
   0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2E, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x31, 
   0x32, 0x31, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x34, 0x34, 0x34, 0x20, 0x1F, 0x20, 0x00, 0x00, 
   0x00, 0x1F, 0x20, 0x1F, 0x2A, 0x2A, 0x2A, 0x21, 0x21, 0x21, 0x39, 0x3B, 0x39, 0x38, 0x39, 0x38, 
   0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 
   0x3F, 0x3E, 0x41, 0x41, 0x41, 0x43, 0x43, 0x43, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 
   0x46, 0x47, 0x46, 0x44, 0x46, 0x44, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x47, 
   0x47, 0x47, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x4C, 0x4C, 0x4C, 0x42, 0x41, 0x42, 0x0F, 0x0F, 
   0x0F, 0x0C, 0x0D, 0x0C, 0x3B, 0x3E, 0x3B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4E, 0x4D, 
   0x55, 0x56, 0x55, 0x41, 0x41, 0x41, 0x36, 0x37, 0x36, 0x53, 0x53, 0x53, 0x53, 0x54, 0x53, 0x53, 
   0x53, 0x53, 0x52, 0x53, 0x52, 0x52, 0x53, 0x52, 0x52, 0x51, 0x52, 0x4F, 0x4F, 0x4F, 0x4E, 0x4E, 
   0x4E, 0x4C, 0x4D, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 
   0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x48, 0x47, 0x48, 0x46, 
   0x47, 0x46, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x3F, 0x3E, 0x3F, 0x3D, 0x3B, 
   0x3D, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x36, 0x37, 0x36, 
   0x35, 0x36, 0x35, 0x34, 0x35, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x2F, 
   0x30, 0x2F, 0x2E, 0x2E, 0x2E, 0x2C, 0x2D, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 
   0x2B, 0x2C, 0x2B, 0x2C, 0x29, 0x29, 0x29, 0x26, 0x27, 0x26, 0x32, 0x34, 0x32, 0x31, 0x30, 0x31, 
   0x27, 0x28, 0x27, 0x1A, 0x1A, 0x1A, 0x34, 0x35, 0x34, 0x34, 0x33, 0x34, 0x33, 0x32, 0x33, 0x33, 
   0x32, 0x33, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 
   0x35, 0x35, 0x35, 0x33, 0x35, 0x33, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x32, 0x32, 0x32, 0x31, 
   0x32, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2B, 0x2B, 0x2B, 0x43, 0x43, 0x43, 0x47, 0x46, 
   0x47, 0x31, 0x30, 0x31, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x1C, 0x1C, 0x1C, 
   0x16, 0x17, 0x16, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x22, 0x21, 0x22, 0x20, 0x1F, 0x20, 0x1F, 
   0x1E, 0x1F, 0x1C, 0x1C, 0x1C, 0x1A, 0x1A, 0x1A, 0x18, 0x19, 0x18, 0x18, 0x19, 0x18, 0x1A, 0x1A, 
   0x1A, 0x1B, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 0x18, 0x19, 0x18, 0x19, 0x19, 0x19, 0x18, 0x1A, 0x18, 
   0x19, 0x1A, 0x19, 0x1B, 0x1B, 0x1B, 0x1C, 0x1C, 0x1C, 0x1D, 0x1E, 0x1D, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1E, 0x1E, 0x1C, 0x1D, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 
   0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1E, 0x1D, 
   0x1E, 0x1D, 0x1D, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1C, 0x1D, 0x1C, 0x1E, 0x1E, 0x1E, 
   0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x1E, 0x1E, 0x1D, 0x1C, 0x1D, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x18, 0x19, 0x18, 0x16, 0x17, 
   0x16, 0x14, 0x15, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x12, 0x13, 0x12, 0x12, 0x12, 0x12, 
   0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x33, 
   0x34, 0x33, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x34, 
   0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x30, 0x2E, 0x2E, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2E, 0x2E, 0x2E, 0x2C, 
   0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2F, 0x2D, 0x2F, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2A, 
   0x2A, 0x2A, 0x28, 0x29, 0x28, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 
   0x26, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 
   0x28, 0x27, 0x28, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 
   0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 0x2B, 0x2A, 0x2A, 0x2B, 0x2A, 0x2C, 0x2C, 0x2C, 
   0x2B, 0x2B, 0x2B, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x2D, 0x2A, 0x2D, 0x06, 0x05, 
   0x06, 0x11, 0x11, 0x11, 0x38, 0x37, 0x38, 0x21, 0x20, 0x21, 0x2A, 0x2A, 0x2A, 0x3B, 0x3B, 0x3B, 
   0x39, 0x39, 0x39, 0x3B, 0x3A, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 
   0x3D, 0x3C, 0x3F, 0x3F, 0x3F, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x46, 0x45, 0x46, 0x46, 0x47, 
   0x46, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 
   0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 
   0x46, 0x46, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x4A, 0x49, 0x34, 0x34, 
   0x34, 0x02, 0x02, 0x02, 0x12, 0x13, 0x12, 0x4B, 0x4B, 0x4B, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 
   0x51, 0x51, 0x51, 0x4D, 0x4D, 0x4D, 0x2E, 0x2E, 0x2E, 0x48, 0x47, 0x48, 0x5A, 0x59, 0x5A, 0x53, 
   0x53, 0x53, 0x53, 0x54, 0x53, 0x52, 0x53, 0x52, 0x54, 0x53, 0x54, 0x51, 0x51, 0x51, 0x4F, 0x50, 
   0x4F, 0x4D, 0x4E, 0x4D, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4B, 0x4B, 0x4B, 
   0x4C, 0x4A, 0x4C, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x47, 
   0x48, 0x47, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x43, 0x42, 0x43, 0x41, 0x41, 0x41, 0x3E, 0x3D, 
   0x3E, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x36, 0x36, 0x36, 
   0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 0x31, 
   0x30, 0x31, 0x30, 0x2F, 0x30, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 
   0x2C, 0x2D, 0x2D, 0x2D, 0x21, 0x21, 0x21, 0x23, 0x21, 0x23, 0x3C, 0x3D, 0x3C, 0x30, 0x31, 0x30, 
   0x1D, 0x1A, 0x1D, 0x17, 0x18, 0x17, 0x37, 0x37, 0x37, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x33, 
   0x34, 0x33, 0x33, 0x34, 0x33, 0x31, 0x32, 0x31, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x32, 
   0x32, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x36, 0x36, 0x36, 
   0x36, 0x35, 0x36, 0x38, 0x37, 0x38, 0x38, 0x37, 0x38, 0x37, 0x35, 0x37, 0x35, 0x34, 0x35, 0x33, 
   0x34, 0x33, 0x34, 0x35, 0x34, 0x2F, 0x2E, 0x2F, 0x10, 0x10, 0x10, 0x30, 0x31, 0x30, 0x39, 0x39, 
   0x39, 0x2B, 0x2B, 0x2B, 0x29, 0x28, 0x29, 0x26, 0x26, 0x26, 0x1C, 0x1D, 0x1C, 0x16, 0x15, 0x16, 
   0x23, 0x25, 0x23, 0x23, 0x23, 0x23, 0x22, 0x20, 0x22, 0x20, 0x20, 0x20, 0x1F, 0x1E, 0x1F, 0x1D, 
   0x1D, 0x1D, 0x1B, 0x1C, 0x1B, 0x18, 0x18, 0x18, 0x17, 0x17, 0x17, 0x18, 0x18, 0x18, 0x17, 0x18, 
   0x17, 0x19, 0x19, 0x19, 0x18, 0x18, 0x18, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x18, 0x17, 0x18, 
   0x17, 0x17, 0x17, 0x1A, 0x18, 0x1A, 0x19, 0x1A, 0x19, 0x1C, 0x1C, 0x1C, 0x1E, 0x1D, 0x1E, 0x1E, 
   0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x1E, 0x1E, 0x1F, 0x1E, 0x21, 0x1F, 0x21, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1D, 0x1D, 
   0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1C, 0x1D, 0x1A, 0x1C, 0x1A, 0x1C, 0x1B, 0x1C, 0x1B, 
   0x1B, 0x1B, 0x19, 0x1B, 0x19, 0x1C, 0x1C, 0x1C, 0x1B, 0x1B, 0x1B, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 
   0x1C, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1B, 0x1C, 0x1B, 0x1B, 0x1C, 0x1B, 
   0x1C, 0x1D, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1A, 
   0x1B, 0x1A, 0x1C, 0x1B, 0x1C, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x17, 0x19, 0x17, 0x16, 0x17, 
   0x16, 0x16, 0x16, 0x16, 0x14, 0x15, 0x14, 0x13, 0x14, 0x13, 0x14, 0x13, 0x14, 0x11, 0x12, 0x11, 
   0x11, 0x11, 0x11, 0x10, 0x10, 0x10, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x35, 
   0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x30, 0x2E, 0x30, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2C, 0x2D, 0x2A, 
   0x2A, 0x2A, 0x28, 0x29, 0x28, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 
   0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 
   0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2B, 0x2A, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x1B, 0x19, 
   0x1B, 0x06, 0x05, 0x06, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x22, 0x21, 0x22, 0x3A, 0x38, 0x3A, 
   0x3B, 0x3C, 0x3B, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3D, 
   0x3C, 0x3D, 0x3D, 0x3E, 0x3D, 0x41, 0x42, 0x41, 0x44, 0x44, 0x44, 0x46, 0x46, 0x46, 0x46, 0x47, 
   0x46, 0x46, 0x48, 0x46, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 
   0x46, 0x47, 0x46, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x46, 
   0x46, 0x46, 0x46, 0x47, 0x46, 0x48, 0x47, 0x48, 0x48, 0x47, 0x48, 0x49, 0x49, 0x49, 0x45, 0x45, 
   0x45, 0x0F, 0x0E, 0x0F, 0x03, 0x03, 0x03, 0x37, 0x37, 0x37, 0x51, 0x51, 0x51, 0x4E, 0x4F, 0x4E, 
   0x50, 0x4F, 0x50, 0x53, 0x55, 0x53, 0x4B, 0x4D, 0x4B, 0x41, 0x40, 0x41, 0x52, 0x51, 0x52, 0x57, 
   0x57, 0x57, 0x54, 0x54, 0x54, 0x53, 0x54, 0x53, 0x53, 0x54, 0x53, 0x51, 0x52, 0x51, 0x50, 0x50, 
   0x50, 0x4E, 0x4F, 0x4E, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 
   0x49, 0x49, 0x48, 0x48, 0x48, 0x45, 0x46, 0x45, 0x44, 0x45, 0x44, 0x42, 0x41, 0x42, 0x40, 0x3F, 
   0x40, 0x3C, 0x3B, 0x3C, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x36, 0x37, 
   0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x33, 0x32, 0x33, 0x32, 
   0x32, 0x32, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2F, 0x30, 0x2F, 0x24, 0x24, 0x24, 0x27, 0x26, 0x27, 0x34, 0x34, 0x34, 0x30, 0x30, 0x30, 
   0x1A, 0x1A, 0x1A, 0x20, 0x21, 0x20, 0x38, 0x37, 0x38, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 
   0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x35, 0x36, 0x35, 0x35, 
   0x36, 0x35, 0x36, 0x36, 0x36, 0x2E, 0x2F, 0x2E, 0x13, 0x15, 0x13, 0x28, 0x2A, 0x28, 0x2E, 0x2E, 
   0x2E, 0x2B, 0x2B, 0x2B, 0x29, 0x28, 0x29, 0x28, 0x27, 0x28, 0x14, 0x12, 0x14, 0x15, 0x16, 0x15, 
   0x23, 0x23, 0x23, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1C, 
   0x1C, 0x1C, 0x1A, 0x1B, 0x1A, 0x17, 0x19, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x18, 
   0x17, 0x17, 0x18, 0x17, 0x17, 0x18, 0x17, 0x16, 0x17, 0x16, 0x16, 0x16, 0x16, 0x16, 0x17, 0x16, 
   0x16, 0x17, 0x16, 0x17, 0x18, 0x17, 0x18, 0x1A, 0x18, 0x1B, 0x1B, 0x1B, 0x1C, 0x1C, 0x1C, 0x1E, 
   0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 
   0x1C, 0x1D, 0x1C, 0x1C, 0x1D, 0x1C, 0x1B, 0x1C, 0x1B, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 
   0x1A, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x1A, 0x1A, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x1C, 
   0x1C, 0x1C, 0x1D, 0x1C, 0x1C, 0x1D, 0x1C, 0x1C, 0x1C, 0x1C, 0x1D, 0x1C, 0x1D, 0x1D, 0x1D, 0x1D, 
   0x1D, 0x1C, 0x1D, 0x1D, 0x1C, 0x1D, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 
   0x1B, 0x1B, 0x19, 0x1A, 0x19, 0x19, 0x19, 0x19, 0x18, 0x19, 0x18, 0x18, 0x19, 0x18, 0x17, 0x17, 
   0x17, 0x15, 0x16, 0x15, 0x14, 0x15, 0x14, 0x14, 0x15, 0x14, 0x13, 0x13, 0x13, 0x12, 0x13, 0x12, 
   0x12, 0x12, 0x12, 0x10, 0x11, 0x10, 0x33, 0x34, 0x33, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 
   0x35, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x35, 0x34, 
   0x35, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x2F, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x30, 0x2F, 0x30, 0x2F, 
   0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 
   0x2D, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2B, 0x2D, 0x2B, 0x2F, 0x2E, 0x2F, 0x30, 0x2E, 0x30, 
   0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2C, 0x2D, 0x2A, 
   0x2A, 0x2A, 0x28, 0x29, 0x28, 0x27, 0x28, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x25, 0x26, 
   0x25, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 
   0x27, 0x27, 0x27, 0x2A, 0x28, 0x2A, 0x2A, 0x29, 0x2A, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2A, 0x2C, 0x2A, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 
   0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x31, 0x32, 0x31, 0x2D, 0x2C, 
   0x2D, 0x04, 0x04, 0x04, 0x0B, 0x0A, 0x0B, 0x30, 0x32, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 
   0x3A, 0x3C, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3C, 
   0x3B, 0x3C, 0x3F, 0x3E, 0x3F, 0x42, 0x42, 0x42, 0x45, 0x44, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x46, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 
   0x46, 0x47, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x44, 
   0x45, 0x44, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x4D, 0x4D, 
   0x4D, 0x32, 0x31, 0x32, 0x00, 0x00, 0x00, 0x1E, 0x1D, 0x1E, 0x53, 0x53, 0x53, 0x4F, 0x4F, 0x4F, 
   0x50, 0x4F, 0x50, 0x53, 0x53, 0x53, 0x58, 0x59, 0x58, 0x46, 0x46, 0x46, 0x35, 0x34, 0x35, 0x56, 
   0x56, 0x56, 0x54, 0x55, 0x54, 0x54, 0x53, 0x54, 0x53, 0x53, 0x53, 0x51, 0x51, 0x51, 0x50, 0x50, 
   0x50, 0x50, 0x4E, 0x50, 0x4E, 0x4F, 0x4E, 0x4B, 0x4D, 0x4B, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4A, 0x4B, 0x49, 0x4A, 0x49, 0x49, 0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x49, 
   0x4A, 0x49, 0x49, 0x48, 0x49, 0x47, 0x46, 0x47, 0x45, 0x46, 0x45, 0x43, 0x43, 0x43, 0x40, 0x40, 
   0x40, 0x3B, 0x3D, 0x3B, 0x3B, 0x3B, 0x3B, 0x39, 0x39, 0x39, 0x37, 0x38, 0x37, 0x35, 0x36, 0x35, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x32, 
   0x32, 0x32, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 
   0x2D, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x2E, 0x2E, 0x2E, 0x2B, 0x2A, 0x2B, 
   0x17, 0x19, 0x17, 0x2E, 0x2E, 0x2E, 0x38, 0x36, 0x38, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 
   0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x37, 0x35, 0x37, 0x35, 0x36, 0x35, 
   0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 
   0x38, 0x37, 0x3A, 0x39, 0x3A, 0x2D, 0x2E, 0x2D, 0x23, 0x23, 0x23, 0x33, 0x35, 0x33, 0x2E, 0x2E, 
   0x2E, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x25, 0x25, 0x25, 0x10, 0x11, 0x10, 0x1C, 0x1A, 0x1C, 
   0x23, 0x21, 0x23, 0x20, 0x21, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x1E, 0x1F, 0x1C, 0x1C, 0x1C, 0x1B, 
   0x1B, 0x1B, 0x1A, 0x19, 0x1A, 0x17, 0x18, 0x17, 0x16, 0x17, 0x16, 0x17, 0x17, 0x17, 0x17, 0x17, 
   0x17, 0x17, 0x17, 0x17, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x16, 0x16, 0x16, 0x14, 0x16, 0x14, 
   0x16, 0x17, 0x16, 0x17, 0x18, 0x17, 0x18, 0x19, 0x18, 0x1A, 0x1B, 0x1A, 0x1C, 0x1C, 0x1C, 0x1B, 
   0x1C, 0x1B, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 
   0x1D, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1D, 0x1C, 0x1D, 
   0x1B, 0x1C, 0x1B, 0x1C, 0x1D, 0x1C, 0x1A, 0x1B, 0x1A, 0x1A, 0x1B, 0x1A, 0x19, 0x1A, 0x19, 0x19, 
   0x19, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x1A, 0x1B, 0x1A, 0x1B, 0x1A, 
   0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x1D, 0x1C, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 
   0x1D, 0x1C, 0x1D, 0x1C, 0x1C, 0x1C, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x1A, 0x19, 0x18, 0x19, 0x18, 
   0x18, 0x18, 0x18, 0x18, 0x18, 0x17, 0x18, 0x17, 0x17, 0x18, 0x17, 0x18, 0x18, 0x18, 0x17, 0x17, 
   0x17, 0x16, 0x17, 0x16, 0x15, 0x16, 0x15, 0x15, 0x15, 0x15, 0x13, 0x13, 0x13, 0x12, 0x12, 0x12, 
   0x11, 0x11, 0x11, 0x11, 0x12, 0x11, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x37, 0x36, 0x37, 0x37, 
   0x37, 0x37, 0x38, 0x37, 0x38, 0x38, 0x37, 0x38, 0x37, 0x38, 0x37, 0x36, 0x37, 0x36, 0x35, 0x35, 
   0x35, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x30, 0x32, 0x30, 0x32, 0x31, 0x32, 
   0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x30, 
   0x30, 0x30, 0x31, 0x2F, 0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2C, 0x2B, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x30, 0x2F, 
   0x31, 0x30, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2C, 0x2D, 0x2B, 
   0x2A, 0x2B, 0x29, 0x2A, 0x29, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 
   0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 
   0x28, 0x28, 0x28, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 0x2A, 0x2B, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 
   0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x28, 0x29, 0x27, 0x28, 0x27, 0x28, 0x28, 0x28, 
   0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x33, 0x33, 
   0x33, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x1C, 0x1E, 0x1C, 0x3C, 0x3C, 0x3C, 0x28, 0x27, 0x28, 
   0x2F, 0x2C, 0x2F, 0x3B, 0x39, 0x3B, 0x3A, 0x39, 0x3A, 0x3A, 0x39, 0x3A, 0x3B, 0x3B, 0x3B, 0x3E, 
   0x3C, 0x3E, 0x3D, 0x3E, 0x3D, 0x40, 0x40, 0x40, 0x43, 0x42, 0x43, 0x44, 0x44, 0x44, 0x46, 0x46, 
   0x46, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x4A, 0x49, 0x4A, 0x48, 0x49, 0x48, 0x47, 0x48, 0x47, 
   0x46, 0x47, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x46, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x4B, 0x4A, 
   0x4B, 0x43, 0x42, 0x43, 0x0A, 0x0B, 0x0A, 0x04, 0x04, 0x04, 0x2C, 0x2B, 0x2C, 0x4D, 0x4D, 0x4D, 
   0x51, 0x52, 0x51, 0x53, 0x52, 0x53, 0x56, 0x57, 0x56, 0x55, 0x54, 0x55, 0x25, 0x24, 0x25, 0x4A, 
   0x49, 0x4A, 0x5B, 0x5B, 0x5B, 0x54, 0x54, 0x54, 0x52, 0x53, 0x52, 0x51, 0x52, 0x51, 0x50, 0x4F, 
   0x50, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4D, 0x4E, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 
   0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x4B, 0x4A, 0x49, 
   0x4B, 0x49, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x46, 0x47, 0x46, 0x44, 0x44, 0x44, 0x40, 0x42, 
   0x40, 0x3D, 0x3E, 0x3D, 0x3C, 0x3C, 0x3C, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 
   0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x33, 0x34, 0x33, 0x33, 
   0x32, 0x33, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x26, 0x24, 0x26, 0x3E, 0x3C, 0x3E, 0x42, 0x3F, 0x42, 0x31, 0x2F, 0x31, 0x21, 0x23, 0x21, 
   0x1D, 0x1D, 0x1D, 0x38, 0x36, 0x38, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 
   0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 
   0x35, 0x37, 0x35, 0x38, 0x37, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 
   0x39, 0x38, 0x38, 0x37, 0x38, 0x3C, 0x3C, 0x3C, 0x3F, 0x3E, 0x3F, 0x37, 0x37, 0x37, 0x2D, 0x2D, 
   0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x1F, 0x1E, 0x1F, 0x15, 0x15, 0x15, 0x22, 0x22, 0x22, 
   0x22, 0x23, 0x22, 0x20, 0x21, 0x20, 0x20, 0x1F, 0x20, 0x1D, 0x1E, 0x1D, 0x1B, 0x1C, 0x1B, 0x1B, 
   0x1A, 0x1B, 0x19, 0x19, 0x19, 0x18, 0x18, 0x18, 0x17, 0x18, 0x17, 0x17, 0x18, 0x17, 0x16, 0x16, 
   0x16, 0x17, 0x16, 0x17, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 
   0x16, 0x17, 0x16, 0x17, 0x18, 0x17, 0x18, 0x18, 0x18, 0x19, 0x1A, 0x19, 0x1A, 0x1B, 0x1A, 0x1D, 
   0x1B, 0x1D, 0x1C, 0x1D, 0x1C, 0x1C, 0x1D, 0x1C, 0x1C, 0x1D, 0x1C, 0x1C, 0x1D, 0x1C, 0x1C, 0x1D, 
   0x1C, 0x1C, 0x1D, 0x1C, 0x1C, 0x1D, 0x1C, 0x1C, 0x1D, 0x1C, 0x1D, 0x1D, 0x1D, 0x1B, 0x1C, 0x1B, 
   0x1D, 0x1B, 0x1D, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x18, 0x1A, 0x18, 0x19, 0x19, 0x19, 0x19, 
   0x18, 0x19, 0x19, 0x18, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x18, 0x19, 0x18, 0x1A, 0x1A, 
   0x1A, 0x1B, 0x1A, 0x1B, 0x1C, 0x1C, 0x1C, 0x1E, 0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 0x1E, 0x1D, 0x1E, 
   0x1C, 0x1D, 0x1C, 0x1A, 0x1C, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x18, 0x19, 0x17, 0x17, 0x17, 0x16, 
   0x17, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x17, 0x16, 0x17, 0x17, 0x17, 0x17, 0x17, 
   0x17, 0x17, 0x17, 0x17, 0x15, 0x16, 0x15, 0x14, 0x15, 0x14, 0x14, 0x14, 0x14, 0x13, 0x13, 0x13, 
   0x11, 0x12, 0x11, 0x12, 0x12, 0x12, 0x35, 0x35, 0x35, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x36, 
   0x36, 0x34, 0x33, 0x34, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x31, 0x32, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x30, 0x2E, 0x2E, 
   0x2E, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 
   0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x27, 0x29, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x25, 0x26, 
   0x25, 0x26, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 
   0x28, 0x28, 0x28, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2C, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x29, 0x28, 
   0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x28, 0x27, 0x27, 0x27, 0x29, 0x27, 0x29, 
   0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 
   0x2D, 0x2B, 0x2E, 0x2E, 0x2E, 0x31, 0x30, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x34, 
   0x33, 0x22, 0x23, 0x22, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x38, 0x37, 0x38, 0x26, 0x24, 0x26, 
   0x1C, 0x1E, 0x1C, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3B, 0x3B, 0x3B, 0x3C, 
   0x3D, 0x3C, 0x3F, 0x3F, 0x3F, 0x3D, 0x3F, 0x3D, 0x40, 0x42, 0x40, 0x43, 0x43, 0x43, 0x46, 0x46, 
   0x46, 0x48, 0x48, 0x48, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x46, 0x48, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 
   0x46, 0x44, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x47, 0x47, 
   0x47, 0x49, 0x49, 0x49, 0x35, 0x36, 0x35, 0x02, 0x03, 0x02, 0x05, 0x05, 0x05, 0x47, 0x48, 0x47, 
   0x52, 0x53, 0x52, 0x53, 0x54, 0x53, 0x55, 0x55, 0x55, 0x59, 0x59, 0x59, 0x42, 0x44, 0x42, 0x3F, 
   0x3D, 0x3F, 0x5A, 0x59, 0x5A, 0x55, 0x56, 0x55, 0x50, 0x52, 0x50, 0x51, 0x51, 0x51, 0x50, 0x50, 
   0x50, 0x50, 0x50, 0x50, 0x4E, 0x4F, 0x4E, 0x4C, 0x4E, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 
   0x4A, 0x4B, 0x4A, 0x49, 0x4B, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x48, 0x4A, 0x48, 0x48, 0x48, 0x48, 0x47, 0x46, 0x47, 0x46, 0x45, 0x46, 0x42, 0x43, 
   0x42, 0x40, 0x40, 0x40, 0x3E, 0x3D, 0x3E, 0x3A, 0x3B, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 
   0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 
   0x32, 0x33, 0x32, 0x32, 0x32, 0x30, 0x31, 0x30, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x2F, 
   0x30, 0x1B, 0x1A, 0x1B, 0x2C, 0x2B, 0x2C, 0x36, 0x36, 0x36, 0x30, 0x2F, 0x30, 0x21, 0x21, 0x21, 
   0x2C, 0x2C, 0x2C, 0x37, 0x37, 0x37, 0x35, 0x35, 0x35, 0x37, 0x36, 0x37, 0x36, 0x37, 0x36, 0x36, 
   0x37, 0x36, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 
   0x36, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x35, 0x37, 0x36, 0x36, 0x36, 
   0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x38, 0x38, 0x38, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x39, 
   0x3B, 0x39, 0x2F, 0x2F, 0x2F, 0x42, 0x41, 0x42, 0x54, 0x55, 0x54, 0x34, 0x34, 0x34, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x16, 0x14, 0x16, 0x15, 0x15, 0x15, 0x24, 0x24, 0x24, 
   0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x20, 0x1F, 0x20, 0x1D, 0x1D, 0x1D, 0x1A, 0x1A, 0x1A, 0x1A, 
   0x19, 0x1A, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x18, 0x19, 0x17, 0x18, 0x17, 0x16, 0x16, 
   0x16, 0x15, 0x15, 0x15, 0x15, 0x16, 0x15, 0x16, 0x16, 0x16, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 
   0x16, 0x17, 0x16, 0x17, 0x17, 0x17, 0x17, 0x18, 0x17, 0x19, 0x19, 0x19, 0x1A, 0x1A, 0x1A, 0x1B, 
   0x1B, 0x1B, 0x1B, 0x1C, 0x1B, 0x1B, 0x1C, 0x1B, 0x1D, 0x1D, 0x1D, 0x1C, 0x1C, 0x1C, 0x1B, 0x1C, 
   0x1B, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1D, 0x1C, 0x1D, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x1B, 
   0x1B, 0x1B, 0x1B, 0x1B, 0x1A, 0x1B, 0x19, 0x1A, 0x19, 0x19, 0x19, 0x19, 0x18, 0x19, 0x18, 0x17, 
   0x19, 0x17, 0x17, 0x18, 0x17, 0x17, 0x18, 0x17, 0x17, 0x17, 0x17, 0x18, 0x18, 0x18, 0x19, 0x19, 
   0x19, 0x1A, 0x1B, 0x1A, 0x1C, 0x1C, 0x1C, 0x1C, 0x1D, 0x1C, 0x1E, 0x1F, 0x1E, 0x1D, 0x1E, 0x1D, 
   0x1E, 0x1E, 0x1E, 0x1C, 0x1C, 0x1C, 0x1A, 0x1A, 0x1A, 0x17, 0x18, 0x17, 0x15, 0x16, 0x15, 0x15, 
   0x15, 0x15, 0x15, 0x15, 0x15, 0x14, 0x16, 0x14, 0x16, 0x17, 0x16, 0x17, 0x17, 0x17, 0x17, 0x17, 
   0x17, 0x16, 0x17, 0x16, 0x15, 0x16, 0x15, 0x15, 0x15, 0x15, 0x13, 0x13, 0x13, 0x12, 0x13, 0x12, 
   0x11, 0x12, 0x11, 0x12, 0x12, 0x12, 0x37, 0x36, 0x37, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x38, 
   0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x37, 0x36, 0x37, 0x35, 0x35, 
   0x35, 0x34, 0x33, 0x34, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 
   0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x2D, 0x2E, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2F, 0x2E, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 
   0x30, 0x31, 0x30, 0x30, 0x31, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2C, 
   0x2B, 0x2C, 0x2A, 0x29, 0x2A, 0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 
   0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 
   0x27, 0x29, 0x27, 0x2A, 0x29, 0x2A, 0x2A, 0x2B, 0x2A, 0x2C, 0x2B, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x2B, 0x29, 0x2B, 0x29, 0x29, 0x29, 0x27, 0x29, 0x27, 0x28, 0x27, 0x28, 0x29, 0x27, 0x29, 
   0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x30, 0x30, 0x30, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 
   0x33, 0x30, 0x2F, 0x30, 0x10, 0x11, 0x10, 0x00, 0x00, 0x00, 0x24, 0x24, 0x24, 0x2D, 0x2B, 0x2D, 
   0x16, 0x17, 0x16, 0x38, 0x36, 0x38, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3B, 0x3A, 0x3D, 
   0x3C, 0x3D, 0x3E, 0x3E, 0x3E, 0x40, 0x40, 0x40, 0x40, 0x42, 0x40, 0x43, 0x44, 0x43, 0x46, 0x47, 
   0x46, 0x48, 0x48, 0x48, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 
   0x46, 0x47, 0x46, 0x47, 0x46, 0x47, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x46, 
   0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 
   0x48, 0x49, 0x4A, 0x49, 0x4B, 0x4C, 0x4B, 0x17, 0x17, 0x17, 0x00, 0x00, 0x00, 0x3E, 0x3F, 0x3E, 
   0x53, 0x54, 0x53, 0x53, 0x53, 0x53, 0x53, 0x54, 0x53, 0x56, 0x57, 0x56, 0x5E, 0x5E, 0x5E, 0x3B, 
   0x3B, 0x3B, 0x39, 0x39, 0x39, 0x54, 0x54, 0x54, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 0x50, 0x51, 
   0x50, 0x50, 0x50, 0x50, 0x4E, 0x4F, 0x4E, 0x4E, 0x4D, 0x4E, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x44, 0x46, 0x44, 0x44, 0x43, 
   0x44, 0x41, 0x40, 0x41, 0x3D, 0x3E, 0x3D, 0x3A, 0x3B, 0x3A, 0x3A, 0x39, 0x3A, 0x38, 0x38, 0x38, 
   0x38, 0x37, 0x38, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 
   0x34, 0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2A, 0x29, 0x2A, 0x2F, 0x2E, 0x2F, 0x30, 0x30, 0x30, 0x23, 0x23, 0x23, 0x25, 0x24, 0x25, 
   0x36, 0x36, 0x36, 0x33, 0x33, 0x33, 0x37, 0x36, 0x37, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x37, 0x36, 
   0x37, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x3B, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 0x3A, 
   0x3C, 0x3A, 0x32, 0x33, 0x32, 0x42, 0x43, 0x42, 0x47, 0x47, 0x47, 0x32, 0x31, 0x32, 0x2F, 0x2E, 
   0x2F, 0x2C, 0x2C, 0x2C, 0x2B, 0x2A, 0x2B, 0x13, 0x10, 0x13, 0x16, 0x17, 0x16, 0x22, 0x21, 0x22, 
   0x22, 0x22, 0x22, 0x20, 0x21, 0x20, 0x1E, 0x1F, 0x1E, 0x1D, 0x1D, 0x1D, 0x1A, 0x1A, 0x1A, 0x18, 
   0x19, 0x18, 0x1A, 0x19, 0x1A, 0x19, 0x19, 0x19, 0x19, 0x18, 0x19, 0x17, 0x18, 0x17, 0x16, 0x17, 
   0x16, 0x14, 0x16, 0x14, 0x16, 0x15, 0x16, 0x16, 0x17, 0x16, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 
   0x16, 0x17, 0x16, 0x17, 0x17, 0x17, 0x17, 0x18, 0x17, 0x1A, 0x19, 0x1A, 0x19, 0x19, 0x19, 0x1A, 
   0x1B, 0x1A, 0x1B, 0x1C, 0x1B, 0x1D, 0x1C, 0x1D, 0x1D, 0x1C, 0x1D, 0x1D, 0x1C, 0x1D, 0x1B, 0x1B, 
   0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x1B, 0x1D, 0x1C, 0x1D, 0x1D, 0x1B, 0x1D, 0x1B, 0x1B, 0x1B, 
   0x1A, 0x1B, 0x1A, 0x1B, 0x1A, 0x1B, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x18, 0x18, 0x18, 0x16, 
   0x19, 0x16, 0x17, 0x18, 0x17, 0x17, 0x18, 0x17, 0x16, 0x17, 0x16, 0x18, 0x18, 0x18, 0x19, 0x19, 
   0x19, 0x1A, 0x1A, 0x1A, 0x1A, 0x1C, 0x1A, 0x1E, 0x1E, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1C, 0x1E, 0x1C, 0x1C, 0x1D, 0x1C, 0x1A, 0x1A, 0x1A, 0x18, 0x18, 0x18, 0x15, 0x16, 0x15, 0x14, 
   0x15, 0x14, 0x14, 0x15, 0x14, 0x16, 0x16, 0x16, 0x16, 0x17, 0x16, 0x17, 0x18, 0x17, 0x17, 0x18, 
   0x17, 0x17, 0x17, 0x17, 0x16, 0x17, 0x16, 0x15, 0x15, 0x15, 0x14, 0x14, 0x14, 0x12, 0x12, 0x12, 
   0x11, 0x12, 0x11, 0x12, 0x12, 0x12, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x38, 0x37, 0x38, 0x35, 0x36, 
   0x35, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x2F, 0x31, 0x2F, 0x2D, 0x2E, 
   0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2B, 
   0x2B, 0x2B, 0x2A, 0x29, 0x2A, 0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 
   0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2B, 0x2C, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 
   0x29, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 
   0x2A, 0x29, 0x2A, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2E, 0x2F, 0x2E, 0x30, 0x2F, 0x30, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 
   0x32, 0x33, 0x34, 0x33, 0x2F, 0x31, 0x2F, 0x07, 0x07, 0x07, 0x15, 0x15, 0x15, 0x34, 0x35, 0x34, 
   0x15, 0x15, 0x15, 0x32, 0x31, 0x32, 0x3C, 0x3B, 0x3C, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3C, 
   0x3C, 0x3C, 0x3D, 0x3E, 0x3D, 0x3E, 0x3F, 0x3E, 0x41, 0x41, 0x41, 0x43, 0x44, 0x43, 0x46, 0x46, 
   0x46, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x4A, 0x49, 0x4A, 0x48, 0x49, 0x48, 0x46, 0x47, 0x46, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 
   0x45, 0x44, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x48, 0x46, 0x48, 0x47, 0x47, 0x47, 0x47, 0x46, 
   0x47, 0x48, 0x49, 0x48, 0x4E, 0x4F, 0x4E, 0x37, 0x36, 0x37, 0x00, 0x00, 0x00, 0x37, 0x35, 0x37, 
   0x54, 0x55, 0x54, 0x53, 0x54, 0x53, 0x54, 0x53, 0x54, 0x53, 0x54, 0x53, 0x5C, 0x5C, 0x5C, 0x3D, 
   0x3E, 0x3D, 0x1E, 0x1D, 0x1E, 0x51, 0x51, 0x51, 0x54, 0x54, 0x54, 0x50, 0x52, 0x50, 0x50, 0x51, 
   0x50, 0x50, 0x50, 0x50, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4C, 0x4D, 0x4B, 0x4C, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4C, 0x4A, 0x4C, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4A, 0x4B, 0x49, 0x4A, 0x49, 0x49, 0x48, 0x49, 0x47, 0x47, 0x47, 0x45, 0x46, 0x45, 0x44, 0x43, 
   0x44, 0x40, 0x40, 0x40, 0x3D, 0x3E, 0x3D, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x39, 0x38, 0x39, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x37, 0x35, 0x37, 0x36, 0x36, 0x36, 0x37, 
   0x35, 0x37, 0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x2F, 0x2E, 0x2F, 0x24, 0x25, 
   0x24, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x30, 0x30, 0x30, 0x21, 0x1F, 0x21, 0x24, 0x24, 0x24, 
   0x37, 0x38, 0x37, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x35, 0x36, 
   0x35, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 
   0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3E, 0x3C, 0x3E, 0x33, 
   0x35, 0x33, 0x36, 0x39, 0x36, 0x3F, 0x40, 0x3F, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x2D, 0x2E, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2A, 0x2B, 0x15, 0x12, 0x15, 0x21, 0x21, 0x21, 0x23, 0x22, 0x23, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x1F, 0x1F, 0x1F, 0x1D, 0x1D, 0x1D, 0x19, 0x1B, 0x19, 0x18, 
   0x19, 0x18, 0x18, 0x19, 0x18, 0x18, 0x19, 0x18, 0x18, 0x18, 0x18, 0x17, 0x18, 0x17, 0x16, 0x17, 
   0x16, 0x16, 0x16, 0x16, 0x15, 0x16, 0x15, 0x17, 0x17, 0x17, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 
   0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1A, 0x1A, 0x1A, 0x1B, 
   0x1B, 0x1B, 0x1B, 0x1C, 0x1B, 0x1B, 0x1C, 0x1B, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1B, 0x1B, 
   0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x1C, 0x1C, 0x1B, 0x1C, 0x1B, 0x1B, 0x1C, 0x1B, 0x1B, 0x1C, 0x1B, 
   0x1B, 0x1A, 0x1B, 0x1B, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 0x18, 0x19, 0x18, 0x19, 0x1A, 0x19, 0x19, 
   0x18, 0x19, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1A, 0x19, 
   0x1A, 0x1A, 0x1B, 0x1A, 0x1C, 0x1C, 0x1C, 0x1D, 0x1D, 0x1D, 0x1F, 0x1F, 0x1F, 0x1D, 0x1E, 0x1D, 
   0x1E, 0x1D, 0x1E, 0x1C, 0x1D, 0x1C, 0x1A, 0x1A, 0x1A, 0x18, 0x18, 0x18, 0x16, 0x16, 0x16, 0x14, 
   0x16, 0x14, 0x15, 0x16, 0x15, 0x17, 0x17, 0x17, 0x16, 0x17, 0x16, 0x16, 0x18, 0x16, 0x17, 0x18, 
   0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x14, 0x16, 0x14, 0x15, 0x16, 0x15, 0x13, 0x13, 0x13, 
   0x13, 0x12, 0x13, 0x12, 0x12, 0x12, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x38, 
   0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x37, 0x37, 
   0x37, 0x34, 0x36, 0x34, 0x34, 0x34, 0x34, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 
   0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2E, 
   0x2F, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 
   0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2E, 0x2E, 0x2E, 0x2C, 
   0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x29, 0x2A, 0x28, 0x29, 0x28, 0x29, 0x28, 0x29, 0x29, 0x28, 
   0x29, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x2A, 0x28, 0x2A, 0x2A, 0x29, 0x2A, 
   0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2B, 0x29, 0x2B, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 
   0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x34, 0x34, 0x34, 0x37, 0x37, 0x37, 0x11, 0x12, 0x11, 0x02, 0x02, 0x02, 0x32, 0x30, 0x32, 
   0x28, 0x28, 0x28, 0x2C, 0x2C, 0x2C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x39, 0x3B, 0x39, 0x3C, 
   0x3B, 0x3C, 0x3E, 0x3E, 0x3E, 0x3F, 0x40, 0x3F, 0x40, 0x42, 0x40, 0x43, 0x44, 0x43, 0x46, 0x46, 
   0x46, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 
   0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x45, 
   0x44, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x47, 0x47, 
   0x47, 0x48, 0x48, 0x48, 0x4C, 0x4C, 0x4C, 0x43, 0x43, 0x43, 0x0A, 0x0A, 0x0A, 0x10, 0x10, 0x10, 
   0x40, 0x40, 0x40, 0x54, 0x53, 0x54, 0x52, 0x53, 0x52, 0x54, 0x54, 0x54, 0x58, 0x59, 0x58, 0x43, 
   0x43, 0x43, 0x17, 0x17, 0x17, 0x4D, 0x4E, 0x4D, 0x54, 0x54, 0x54, 0x52, 0x52, 0x52, 0x51, 0x51, 
   0x51, 0x51, 0x50, 0x51, 0x4F, 0x4F, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4D, 0x4D, 
   0x4D, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4A, 0x4B, 0x49, 0x4A, 0x49, 0x47, 0x49, 0x47, 0x46, 0x47, 0x46, 0x44, 0x46, 0x44, 0x42, 0x43, 
   0x42, 0x40, 0x40, 0x40, 0x3E, 0x3D, 0x3E, 0x3A, 0x3B, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x38, 0x39, 
   0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 
   0x35, 0x35, 0x35, 0x34, 0x35, 0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 0x2D, 0x2D, 0x2D, 0x15, 0x15, 
   0x15, 0x33, 0x31, 0x33, 0x37, 0x36, 0x37, 0x2D, 0x2F, 0x2D, 0x1B, 0x1D, 0x1B, 0x29, 0x26, 0x29, 
   0x37, 0x36, 0x37, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x39, 0x38, 0x39, 0x37, 0x37, 
   0x37, 0x37, 0x36, 0x37, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x3C, 0x3A, 0x3C, 0x3E, 0x3E, 0x3E, 0x24, 
   0x23, 0x24, 0x2A, 0x2B, 0x2A, 0x43, 0x44, 0x43, 0x34, 0x34, 0x34, 0x32, 0x31, 0x32, 0x2E, 0x2D, 
   0x2E, 0x2D, 0x2E, 0x2D, 0x27, 0x25, 0x27, 0x18, 0x17, 0x18, 0x26, 0x26, 0x26, 0x24, 0x23, 0x24, 
   0x22, 0x21, 0x22, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1C, 0x1E, 0x1C, 0x1B, 0x1C, 0x1B, 0x19, 
   0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x18, 0x19, 0x18, 0x18, 0x18, 0x18, 0x17, 0x18, 0x17, 0x16, 0x16, 
   0x16, 0x15, 0x15, 0x15, 0x16, 0x15, 0x16, 0x17, 0x17, 0x17, 0x17, 0x18, 0x17, 0x17, 0x17, 0x17, 
   0x17, 0x17, 0x17, 0x16, 0x16, 0x16, 0x17, 0x17, 0x17, 0x18, 0x19, 0x18, 0x19, 0x1A, 0x19, 0x1B, 
   0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 
   0x1B, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 
   0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1B, 0x1B, 0x1B, 0x19, 0x1B, 0x19, 0x19, 0x1B, 0x19, 0x19, 
   0x1A, 0x19, 0x1A, 0x1A, 0x1A, 0x19, 0x19, 0x19, 0x18, 0x19, 0x18, 0x1A, 0x18, 0x1A, 0x18, 0x1A, 
   0x18, 0x1B, 0x1B, 0x1B, 0x1C, 0x1C, 0x1C, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 
   0x1D, 0x1E, 0x1D, 0x1C, 0x1D, 0x1C, 0x1C, 0x1B, 0x1C, 0x17, 0x19, 0x17, 0x16, 0x16, 0x16, 0x16, 
   0x16, 0x16, 0x16, 0x16, 0x16, 0x18, 0x17, 0x18, 0x17, 0x17, 0x17, 0x18, 0x19, 0x18, 0x18, 0x19, 
   0x18, 0x17, 0x18, 0x17, 0x18, 0x18, 0x18, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x15, 0x15, 0x15, 
   0x14, 0x13, 0x14, 0x12, 0x13, 0x12, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x38, 0x39, 0x38, 0x37, 0x37, 
   0x37, 0x37, 0x35, 0x37, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 
   0x32, 0x33, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2B, 
   0x2D, 0x2B, 0x2C, 0x2C, 0x2C, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 
   0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 
   0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2C, 0x2A, 0x2C, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 
   0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 
   0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x34, 0x33, 
   0x34, 0x36, 0x35, 0x36, 0x38, 0x38, 0x38, 0x28, 0x28, 0x28, 0x00, 0x00, 0x00, 0x14, 0x14, 0x14, 
   0x3F, 0x3F, 0x3F, 0x29, 0x29, 0x29, 0x24, 0x24, 0x24, 0x3E, 0x3E, 0x3E, 0x3C, 0x3B, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x41, 0x42, 0x41, 0x43, 0x44, 0x43, 0x45, 0x46, 
   0x45, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x48, 0x47, 0x48, 0x46, 0x46, 0x46, 
   0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 0x48, 
   0x48, 0x4A, 0x49, 0x4A, 0x4A, 0x4C, 0x4A, 0x4C, 0x4D, 0x4C, 0x30, 0x31, 0x30, 0x05, 0x04, 0x05, 
   0x32, 0x32, 0x32, 0x52, 0x53, 0x52, 0x52, 0x52, 0x52, 0x52, 0x53, 0x52, 0x56, 0x56, 0x56, 0x4C, 
   0x4A, 0x4C, 0x2B, 0x29, 0x2B, 0x4E, 0x4D, 0x4E, 0x5A, 0x59, 0x5A, 0x53, 0x52, 0x53, 0x51, 0x52, 
   0x51, 0x50, 0x51, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 
   0x4F, 0x4F, 0x4F, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 0x4B, 0x4B, 0x4B, 0x4A, 
   0x4A, 0x4A, 0x48, 0x49, 0x48, 0x46, 0x48, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x42, 0x43, 
   0x42, 0x3F, 0x40, 0x3F, 0x3E, 0x3C, 0x3E, 0x3C, 0x3B, 0x3C, 0x3A, 0x39, 0x3A, 0x38, 0x38, 0x38, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 
   0x37, 0x36, 0x37, 0x36, 0x37, 0x35, 0x34, 0x35, 0x34, 0x33, 0x34, 0x2D, 0x2C, 0x2D, 0x16, 0x14, 
   0x16, 0x2A, 0x29, 0x2A, 0x32, 0x33, 0x32, 0x29, 0x2A, 0x29, 0x0F, 0x10, 0x0F, 0x27, 0x27, 0x27, 
   0x31, 0x32, 0x31, 0x36, 0x34, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x38, 0x37, 0x39, 0x38, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x38, 
   0x39, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 
   0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3B, 0x3B, 0x3B, 0x3E, 0x3E, 0x3E, 0x1E, 
   0x1C, 0x1E, 0x15, 0x15, 0x15, 0x38, 0x37, 0x38, 0x34, 0x34, 0x34, 0x31, 0x31, 0x31, 0x30, 0x2E, 
   0x30, 0x2E, 0x2D, 0x2E, 0x20, 0x1F, 0x20, 0x1F, 0x1E, 0x1F, 0x2A, 0x28, 0x2A, 0x24, 0x24, 0x24, 
   0x22, 0x23, 0x22, 0x20, 0x21, 0x20, 0x1E, 0x1F, 0x1E, 0x1E, 0x1D, 0x1E, 0x1C, 0x1C, 0x1C, 0x1A, 
   0x1A, 0x1A, 0x1A, 0x19, 0x1A, 0x18, 0x19, 0x18, 0x18, 0x18, 0x18, 0x16, 0x17, 0x16, 0x16, 0x16, 
   0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x18, 0x17, 0x18, 0x19, 0x18, 0x19, 0x17, 0x18, 0x17, 
   0x17, 0x18, 0x17, 0x16, 0x17, 0x16, 0x16, 0x16, 0x16, 0x18, 0x17, 0x18, 0x1A, 0x1A, 0x1A, 0x1B, 
   0x1B, 0x1B, 0x1C, 0x1B, 0x1C, 0x1A, 0x1A, 0x1A, 0x1B, 0x1B, 0x1B, 0x1B, 0x1A, 0x1B, 0x1B, 0x1B, 
   0x1B, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1C, 0x1D, 0x1C, 0x1E, 0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 
   0x1E, 0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 0x1C, 0x1D, 0x1C, 0x1D, 0x1C, 0x1D, 0x1D, 0x1C, 0x1D, 0x1D, 
   0x1C, 0x1D, 0x1B, 0x1B, 0x1B, 0x19, 0x1B, 0x19, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1B, 
   0x1B, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1D, 0x1C, 0x1D, 0x1D, 0x1C, 0x1D, 0x1D, 0x1D, 0x1D, 
   0x1D, 0x1D, 0x1D, 0x1C, 0x1C, 0x1C, 0x1A, 0x1B, 0x1A, 0x18, 0x19, 0x18, 0x16, 0x18, 0x16, 0x16, 
   0x16, 0x16, 0x17, 0x16, 0x17, 0x18, 0x17, 0x18, 0x19, 0x19, 0x19, 0x19, 0x1A, 0x19, 0x1A, 0x1A, 
   0x1A, 0x18, 0x19, 0x18, 0x18, 0x19, 0x18, 0x18, 0x19, 0x18, 0x19, 0x19, 0x19, 0x17, 0x17, 0x17, 
   0x15, 0x15, 0x15, 0x13, 0x14, 0x13, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x37, 0x37, 
   0x37, 0x36, 0x35, 0x36, 0x35, 0x34, 0x35, 0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x31, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 
   0x2F, 0x2E, 0x2F, 0x31, 0x2F, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2B, 0x2D, 
   0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2F, 0x2E, 0x2F, 0x30, 
   0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x33, 0x31, 0x33, 0x31, 0x33, 0x31, 0x35, 0x34, 
   0x35, 0x36, 0x36, 0x36, 0x38, 0x38, 0x38, 0x30, 0x32, 0x30, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 
   0x27, 0x28, 0x27, 0x37, 0x39, 0x37, 0x1F, 0x20, 0x1F, 0x33, 0x32, 0x33, 0x3B, 0x3D, 0x3B, 0x3C, 
   0x3B, 0x3C, 0x3E, 0x3D, 0x3E, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x43, 0x44, 0x43, 0x46, 0x45, 
   0x46, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 
   0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x45, 
   0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x49, 0x49, 
   0x49, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4D, 0x4D, 0x4D, 0x41, 0x41, 0x41, 0x1C, 0x1C, 0x1C, 
   0x4E, 0x4E, 0x4E, 0x56, 0x56, 0x56, 0x50, 0x51, 0x50, 0x52, 0x53, 0x52, 0x53, 0x54, 0x53, 0x57, 
   0x57, 0x57, 0x50, 0x50, 0x50, 0x3E, 0x3E, 0x3E, 0x56, 0x57, 0x56, 0x55, 0x55, 0x55, 0x52, 0x52, 
   0x52, 0x50, 0x52, 0x50, 0x52, 0x51, 0x52, 0x51, 0x51, 0x51, 0x52, 0x52, 0x52, 0x50, 0x51, 0x50, 
   0x50, 0x50, 0x50, 0x4F, 0x4F, 0x4F, 0x4E, 0x4D, 0x4E, 0x4C, 0x4D, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 
   0x49, 0x4B, 0x49, 0x48, 0x49, 0x47, 0x47, 0x47, 0x46, 0x45, 0x46, 0x45, 0x44, 0x45, 0x42, 0x42, 
   0x42, 0x40, 0x3F, 0x40, 0x3D, 0x3B, 0x3D, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x38, 0x39, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x37, 
   0x38, 0x37, 0x37, 0x37, 0x37, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x2C, 0x2D, 0x2C, 0x22, 0x23, 
   0x22, 0x30, 0x30, 0x30, 0x33, 0x33, 0x33, 0x28, 0x27, 0x28, 0x08, 0x08, 0x08, 0x2E, 0x2E, 0x2E, 
   0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x38, 
   0x37, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3B, 0x3A, 0x3B, 0x3E, 0x3D, 0x3E, 0x1A, 
   0x1A, 0x1A, 0x14, 0x14, 0x14, 0x37, 0x36, 0x37, 0x34, 0x34, 0x34, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x29, 0x28, 0x29, 0x1B, 0x1A, 0x1B, 0x25, 0x26, 0x25, 0x28, 0x27, 0x28, 0x24, 0x24, 0x24, 
   0x22, 0x23, 0x22, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1D, 0x1E, 0x1B, 
   0x1B, 0x1B, 0x1A, 0x1A, 0x1A, 0x18, 0x19, 0x18, 0x18, 0x18, 0x18, 0x17, 0x18, 0x17, 0x16, 0x17, 
   0x16, 0x16, 0x16, 0x16, 0x16, 0x17, 0x16, 0x16, 0x18, 0x16, 0x1A, 0x1A, 0x1A, 0x18, 0x19, 0x18, 
   0x16, 0x18, 0x16, 0x16, 0x17, 0x16, 0x17, 0x17, 0x17, 0x18, 0x18, 0x18, 0x18, 0x19, 0x18, 0x1A, 
   0x1B, 0x1A, 0x1B, 0x1B, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1B, 0x1B, 0x1C, 0x1C, 
   0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1D, 0x1E, 0x1D, 0x1F, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 0x1E, 
   0x1E, 0x1E, 0x1C, 0x1D, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 
   0x1C, 0x1C, 0x1D, 0x1C, 0x1D, 0x1D, 0x1D, 0x1C, 0x1D, 0x1C, 0x1D, 0x1C, 0x1D, 0x1C, 0x1C, 0x1C, 
   0x1C, 0x1C, 0x1C, 0x1D, 0x1C, 0x1D, 0x1B, 0x1B, 0x1B, 0x1A, 0x19, 0x1A, 0x18, 0x18, 0x18, 0x17, 
   0x17, 0x17, 0x17, 0x18, 0x17, 0x18, 0x18, 0x18, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x18, 0x1A, 
   0x18, 0x1A, 0x1A, 0x1A, 0x19, 0x1A, 0x19, 0x19, 0x1A, 0x19, 0x1A, 0x1A, 0x1A, 0x18, 0x18, 0x18, 
   0x16, 0x16, 0x16, 0x13, 0x15, 0x13, 0x3D, 0x3D, 0x3D, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3C, 0x3A, 0x3C, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x39, 0x38, 
   0x39, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x31, 0x33, 
   0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 
   0x33, 0x33, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2C, 0x2E, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 
   0x2C, 0x2C, 0x2D, 0x2C, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 
   0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2E, 0x2C, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 
   0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 
   0x30, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x35, 0x35, 
   0x35, 0x36, 0x37, 0x36, 0x37, 0x38, 0x37, 0x38, 0x39, 0x38, 0x2B, 0x29, 0x2B, 0x02, 0x02, 0x02, 
   0x04, 0x05, 0x04, 0x38, 0x39, 0x38, 0x33, 0x33, 0x33, 0x24, 0x23, 0x24, 0x3D, 0x41, 0x3D, 0x3D, 
   0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3F, 0x40, 0x3F, 0x42, 0x42, 0x42, 0x43, 0x44, 0x43, 0x46, 0x45, 
   0x46, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 
   0x47, 0x46, 0x47, 0x47, 0x48, 0x47, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 
   0x45, 0x45, 0x44, 0x46, 0x44, 0x45, 0x46, 0x45, 0x45, 0x47, 0x45, 0x47, 0x47, 0x47, 0x46, 0x47, 
   0x46, 0x49, 0x49, 0x49, 0x4A, 0x4B, 0x4A, 0x4D, 0x4D, 0x4D, 0x4C, 0x4A, 0x4C, 0x16, 0x17, 0x16, 
   0x19, 0x19, 0x19, 0x44, 0x45, 0x44, 0x54, 0x54, 0x54, 0x51, 0x52, 0x51, 0x51, 0x53, 0x51, 0x56, 
   0x56, 0x56, 0x61, 0x60, 0x61, 0x33, 0x34, 0x33, 0x40, 0x40, 0x40, 0x58, 0x59, 0x58, 0x54, 0x53, 
   0x54, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x51, 0x51, 0x51, 
   0x4F, 0x50, 0x4F, 0x4E, 0x50, 0x4E, 0x4F, 0x4F, 0x4F, 0x4D, 0x4D, 0x4D, 0x4B, 0x4C, 0x4B, 0x49, 
   0x4A, 0x49, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x44, 0x45, 0x44, 0x42, 0x43, 0x42, 0x41, 0x42, 
   0x41, 0x3F, 0x40, 0x3F, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x3A, 0x39, 0x39, 
   0x39, 0x39, 0x37, 0x37, 0x37, 0x35, 0x35, 0x35, 0x33, 0x33, 0x33, 0x38, 0x39, 0x38, 0x40, 0x41, 
   0x40, 0x36, 0x36, 0x36, 0x33, 0x33, 0x33, 0x26, 0x26, 0x26, 0x10, 0x11, 0x10, 0x32, 0x31, 0x32, 
   0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x39, 
   0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 
   0x39, 0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3C, 0x3B, 0x3C, 0x32, 
   0x32, 0x32, 0x2D, 0x2D, 0x2D, 0x37, 0x37, 0x37, 0x34, 0x33, 0x34, 0x32, 0x31, 0x32, 0x34, 0x34, 
   0x34, 0x21, 0x20, 0x21, 0x14, 0x14, 0x14, 0x25, 0x26, 0x25, 0x25, 0x26, 0x25, 0x24, 0x26, 0x24, 
   0x24, 0x23, 0x24, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x1F, 0x20, 0x1F, 0x1E, 0x1E, 0x1E, 0x1C, 
   0x1D, 0x1C, 0x1A, 0x1A, 0x1A, 0x18, 0x19, 0x18, 0x18, 0x18, 0x18, 0x16, 0x18, 0x16, 0x15, 0x17, 
   0x15, 0x17, 0x16, 0x17, 0x16, 0x18, 0x16, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x1A, 
   0x18, 0x18, 0x18, 0x16, 0x17, 0x16, 0x17, 0x17, 0x17, 0x16, 0x18, 0x16, 0x19, 0x19, 0x19, 0x1A, 
   0x1B, 0x1A, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 
   0x1B, 0x1E, 0x1C, 0x1E, 0x1D, 0x1D, 0x1D, 0x1F, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x20, 0x1F, 0x20, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1E, 
   0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1C, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 
   0x1D, 0x1E, 0x1D, 0x1E, 0x1E, 0x1D, 0x1E, 0x1E, 0x1D, 0x1E, 0x1C, 0x1D, 0x1C, 0x1D, 0x1D, 0x1D, 
   0x1E, 0x1D, 0x1E, 0x1C, 0x1D, 0x1C, 0x1A, 0x1C, 0x1A, 0x1A, 0x19, 0x1A, 0x18, 0x18, 0x18, 0x18, 
   0x18, 0x18, 0x17, 0x18, 0x17, 0x18, 0x1A, 0x18, 0x1B, 0x1A, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 
   0x1B, 0x1B, 0x1A, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1A, 0x1B, 0x1B, 0x1A, 0x1B, 0x17, 0x19, 0x17, 
   0x16, 0x17, 0x16, 0x15, 0x16, 0x15, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3C, 
   0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x38, 0x3A, 0x38, 0x37, 0x37, 
   0x37, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x33, 0x32, 0x32, 0x31, 0x32, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 
   0x30, 0x30, 0x2F, 0x30, 0x31, 0x2F, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 
   0x2D, 0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 
   0x2E, 0x2E, 0x2D, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 
   0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x33, 0x31, 0x34, 0x33, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 
   0x35, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x3C, 0x3D, 0x3C, 0x16, 0x17, 0x16, 
   0x00, 0x00, 0x00, 0x2E, 0x2E, 0x2E, 0x42, 0x44, 0x42, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x3D, 
   0x3C, 0x3D, 0x3D, 0x3E, 0x3D, 0x41, 0x40, 0x41, 0x42, 0x43, 0x42, 0x43, 0x44, 0x43, 0x45, 0x44, 
   0x45, 0x45, 0x47, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 
   0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 0x46, 0x47, 0x46, 0x45, 0x47, 0x45, 0x45, 0x46, 0x45, 0x45, 
   0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x46, 0x46, 
   0x46, 0x48, 0x48, 0x48, 0x4A, 0x4A, 0x4A, 0x4D, 0x4D, 0x4D, 0x50, 0x50, 0x50, 0x19, 0x1A, 0x19, 
   0x00, 0x00, 0x00, 0x19, 0x1A, 0x19, 0x53, 0x53, 0x53, 0x53, 0x54, 0x53, 0x52, 0x53, 0x52, 0x51, 
   0x53, 0x51, 0x57, 0x57, 0x57, 0x44, 0x45, 0x44, 0x25, 0x24, 0x25, 0x51, 0x50, 0x51, 0x54, 0x56, 
   0x54, 0x53, 0x53, 0x53, 0x52, 0x53, 0x52, 0x52, 0x53, 0x52, 0x51, 0x52, 0x51, 0x51, 0x51, 0x51, 
   0x50, 0x51, 0x50, 0x4F, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4C, 0x4D, 0x4C, 0x4A, 0x4B, 0x4A, 0x48, 
   0x4A, 0x48, 0x48, 0x48, 0x48, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x42, 0x42, 
   0x42, 0x41, 0x40, 0x41, 0x3E, 0x3F, 0x3E, 0x3C, 0x3C, 0x3C, 0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 
   0x37, 0x38, 0x37, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3B, 
   0x3A, 0x3B, 0x38, 0x38, 0x38, 0x36, 0x37, 0x36, 0x2D, 0x30, 0x2D, 0x3A, 0x3A, 0x3A, 0x53, 0x53, 
   0x53, 0x35, 0x36, 0x35, 0x32, 0x32, 0x32, 0x1D, 0x20, 0x1D, 0x27, 0x27, 0x27, 0x36, 0x35, 0x36, 
   0x34, 0x35, 0x34, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x37, 
   0x38, 0x37, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 
   0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 
   0x37, 0x39, 0x37, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x46, 
   0x47, 0x46, 0x48, 0x49, 0x48, 0x36, 0x38, 0x36, 0x31, 0x32, 0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 
   0x30, 0x1F, 0x1F, 0x1F, 0x0C, 0x0C, 0x0C, 0x28, 0x26, 0x28, 0x29, 0x28, 0x29, 0x26, 0x27, 0x26, 
   0x24, 0x25, 0x24, 0x23, 0x24, 0x23, 0x21, 0x22, 0x21, 0x20, 0x21, 0x20, 0x1E, 0x1F, 0x1E, 0x1C, 
   0x1C, 0x1C, 0x1A, 0x1A, 0x1A, 0x18, 0x19, 0x18, 0x16, 0x19, 0x16, 0x18, 0x18, 0x18, 0x17, 0x17, 
   0x17, 0x18, 0x1A, 0x18, 0x19, 0x1A, 0x19, 0x1B, 0x1B, 0x1B, 0x1A, 0x1C, 0x1A, 0x1B, 0x1B, 0x1B, 
   0x19, 0x1A, 0x19, 0x17, 0x19, 0x17, 0x17, 0x18, 0x17, 0x17, 0x19, 0x17, 0x19, 0x19, 0x19, 0x19, 
   0x1A, 0x19, 0x19, 0x1A, 0x19, 0x1A, 0x1B, 0x1A, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1C, 0x1D, 0x1D, 
   0x1D, 0x1E, 0x1D, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 
   0x22, 0x22, 0x22, 0x22, 0x23, 0x22, 0x21, 0x22, 0x21, 0x22, 0x20, 0x22, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x1F, 0x21, 0x1E, 0x1D, 0x1E, 0x1E, 0x1D, 0x1E, 0x1F, 0x1D, 0x1F, 0x1E, 0x1D, 
   0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1E, 0x1D, 0x1E, 0x1C, 0x1D, 0x1C, 0x1D, 0x1D, 0x1D, 
   0x1E, 0x1D, 0x1E, 0x1C, 0x1D, 0x1C, 0x1A, 0x1C, 0x1A, 0x19, 0x1A, 0x19, 0x18, 0x18, 0x18, 0x16, 
   0x18, 0x16, 0x18, 0x19, 0x18, 0x18, 0x19, 0x18, 0x1A, 0x1A, 0x1A, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 
   0x1C, 0x1B, 0x1B, 0x1B, 0x1C, 0x1C, 0x1C, 0x1B, 0x1B, 0x1B, 0x1A, 0x1A, 0x1A, 0x18, 0x19, 0x18, 
   0x16, 0x17, 0x16, 0x18, 0x17, 0x18, 0x40, 0x3F, 0x40, 0x40, 0x3F, 0x40, 0x40, 0x3F, 0x40, 0x3E, 
   0x3F, 0x3E, 0x3F, 0x3D, 0x3F, 0x3D, 0x3B, 0x3D, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x38, 0x37, 
   0x38, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 
   0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 
   0x32, 0x33, 0x31, 0x31, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 
   0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2E, 0x2D, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2E, 0x2D, 0x2E, 0x2F, 0x2E, 0x2F, 0x31, 
   0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x36, 0x36, 0x36, 0x35, 0x36, 
   0x35, 0x38, 0x37, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3B, 0x3C, 0x3B, 0x2F, 0x2F, 0x2F, 
   0x01, 0x01, 0x01, 0x14, 0x13, 0x14, 0x3D, 0x3D, 0x3D, 0x3A, 0x39, 0x3A, 0x22, 0x21, 0x22, 0x37, 
   0x35, 0x37, 0x45, 0x43, 0x45, 0x40, 0x41, 0x40, 0x43, 0x44, 0x43, 0x45, 0x44, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x48, 0x47, 0x47, 0x46, 0x47, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x46, 0x48, 0x48, 0x48, 0x48, 0x4A, 0x48, 0x4B, 0x4C, 0x4B, 0x51, 0x51, 0x51, 0x3B, 0x3D, 0x3B, 
   0x11, 0x11, 0x11, 0x00, 0x00, 0x00, 0x14, 0x13, 0x14, 0x42, 0x42, 0x42, 0x55, 0x55, 0x55, 0x52, 
   0x53, 0x52, 0x53, 0x54, 0x53, 0x51, 0x52, 0x51, 0x2C, 0x2C, 0x2C, 0x44, 0x44, 0x44, 0x5C, 0x5C, 
   0x5C, 0x53, 0x54, 0x53, 0x53, 0x53, 0x53, 0x52, 0x53, 0x52, 0x52, 0x52, 0x52, 0x51, 0x52, 0x51, 
   0x4F, 0x51, 0x4F, 0x4F, 0x4F, 0x4F, 0x4D, 0x4E, 0x4D, 0x4C, 0x4D, 0x4C, 0x4A, 0x4B, 0x4A, 0x47, 
   0x49, 0x47, 0x48, 0x47, 0x48, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x43, 0x44, 0x43, 0x42, 0x42, 
   0x42, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x3C, 0x3C, 0x3C, 0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3C, 0x3B, 0x3C, 0x3B, 
   0x3A, 0x3B, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x39, 0x3A, 0x39, 0x48, 0x47, 0x48, 0x3F, 0x41, 
   0x3F, 0x35, 0x35, 0x35, 0x30, 0x30, 0x30, 0x1C, 0x1D, 0x1C, 0x38, 0x37, 0x38, 0x36, 0x37, 0x36, 
   0x35, 0x36, 0x35, 0x35, 0x37, 0x35, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x38, 0x3A, 0x36, 0x35, 0x36, 0x1D, 0x1F, 0x1D, 0x40, 
   0x41, 0x40, 0x49, 0x49, 0x49, 0x34, 0x34, 0x34, 0x31, 0x31, 0x31, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 
   0x2E, 0x20, 0x22, 0x20, 0x0D, 0x0E, 0x0D, 0x27, 0x26, 0x27, 0x29, 0x29, 0x29, 0x28, 0x27, 0x28, 
   0x25, 0x27, 0x25, 0x24, 0x25, 0x24, 0x24, 0x23, 0x24, 0x22, 0x22, 0x22, 0x1F, 0x1F, 0x1F, 0x1C, 
   0x1C, 0x1C, 0x1A, 0x1B, 0x1A, 0x18, 0x19, 0x18, 0x18, 0x18, 0x18, 0x16, 0x18, 0x16, 0x18, 0x19, 
   0x18, 0x18, 0x1A, 0x18, 0x1C, 0x1B, 0x1C, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 
   0x1B, 0x1B, 0x1B, 0x1A, 0x1A, 0x1A, 0x19, 0x19, 0x19, 0x18, 0x19, 0x18, 0x18, 0x19, 0x18, 0x19, 
   0x19, 0x19, 0x1A, 0x1A, 0x1A, 0x1B, 0x1C, 0x1B, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 
   0x1D, 0x1E, 0x1E, 0x1E, 0x1F, 0x1F, 0x1F, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x23, 0x22, 0x23, 
   0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x22, 
   0x22, 0x22, 0x21, 0x20, 0x21, 0x20, 0x1F, 0x20, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 
   0x1D, 0x1D, 0x1D, 0x1E, 0x1E, 0x1E, 0x1C, 0x1D, 0x1C, 0x1A, 0x1B, 0x1A, 0x18, 0x19, 0x18, 0x18, 
   0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x19, 0x18, 0x1A, 0x1B, 0x1A, 0x1B, 0x1C, 0x1B, 0x1D, 0x1D, 
   0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 0x1D, 0x1C, 0x1D, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x1A, 
   0x18, 0x19, 0x18, 0x18, 0x18, 0x18, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3D, 0x3C, 0x3D, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x39, 0x38, 
   0x39, 0x38, 0x37, 0x38, 0x35, 0x36, 0x35, 0x33, 0x35, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 
   0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x33, 0x31, 0x31, 
   0x33, 0x31, 0x33, 0x32, 0x33, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x30, 
   0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x30, 0x30, 0x30, 
   0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2D, 0x2E, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2D, 0x2E, 0x2D, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2D, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x31, 0x2F, 0x33, 0x32, 0x33, 0x35, 0x33, 0x35, 0x34, 0x35, 0x34, 0x36, 0x37, 0x36, 0x38, 0x37, 
   0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x3C, 0x3A, 0x3C, 0x3B, 0x3C, 0x3B, 0x3E, 0x3E, 0x3E, 
   0x22, 0x22, 0x22, 0x00, 0x00, 0x00, 0x25, 0x24, 0x25, 0x42, 0x40, 0x42, 0x3E, 0x3C, 0x3E, 0x29, 
   0x28, 0x29, 0x3A, 0x3A, 0x3A, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x44, 
   0x45, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x47, 0x48, 0x47, 0x47, 
   0x48, 0x47, 0x47, 0x47, 0x47, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x46, 0x47, 
   0x46, 0x47, 0x48, 0x47, 0x49, 0x49, 0x49, 0x4B, 0x4C, 0x4B, 0x4E, 0x4D, 0x4E, 0x53, 0x54, 0x53, 
   0x4E, 0x4F, 0x4E, 0x0C, 0x0B, 0x0C, 0x00, 0x00, 0x00, 0x25, 0x25, 0x25, 0x54, 0x53, 0x54, 0x51, 
   0x53, 0x51, 0x51, 0x52, 0x51, 0x55, 0x55, 0x55, 0x53, 0x54, 0x53, 0x38, 0x37, 0x38, 0x47, 0x47, 
   0x47, 0x57, 0x57, 0x57, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x51, 0x52, 0x51, 0x52, 0x51, 0x52, 
   0x4F, 0x50, 0x4F, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 0x4A, 0x4B, 0x4A, 0x47, 
   0x48, 0x47, 0x47, 0x47, 0x47, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x42, 0x42, 
   0x42, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3A, 0x3C, 0x3B, 0x3A, 0x3B, 0x2B, 0x2B, 0x2B, 0x36, 0x38, 0x36, 0x4E, 0x4E, 0x4E, 0x32, 0x33, 
   0x32, 0x34, 0x35, 0x34, 0x25, 0x24, 0x25, 0x27, 0x27, 0x27, 0x34, 0x33, 0x34, 0x36, 0x36, 0x36, 
   0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x37, 
   0x39, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x39, 0x3B, 0x39, 0x39, 0x39, 
   0x37, 0x39, 0x37, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x34, 0x33, 0x34, 0x10, 0x12, 0x10, 0x2B, 
   0x2B, 0x2B, 0x3A, 0x39, 0x3A, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x30, 0x2F, 0x30, 0x2E, 0x2F, 
   0x2E, 0x21, 0x20, 0x21, 0x1B, 0x1B, 0x1B, 0x27, 0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 0x28, 0x29, 
   0x27, 0x27, 0x27, 0x25, 0x26, 0x25, 0x24, 0x24, 0x24, 0x24, 0x22, 0x24, 0x21, 0x20, 0x21, 0x1E, 
   0x1D, 0x1E, 0x1A, 0x1B, 0x1A, 0x18, 0x1A, 0x18, 0x18, 0x18, 0x18, 0x19, 0x18, 0x19, 0x19, 0x1A, 
   0x19, 0x1A, 0x1B, 0x1A, 0x1D, 0x1C, 0x1D, 0x1D, 0x1E, 0x1D, 0x1F, 0x1D, 0x1F, 0x1E, 0x1D, 0x1E, 
   0x1C, 0x1D, 0x1C, 0x1B, 0x1C, 0x1B, 0x1A, 0x1B, 0x1A, 0x1A, 0x19, 0x1A, 0x19, 0x19, 0x19, 0x1A, 
   0x1A, 0x1A, 0x1A, 0x1C, 0x1A, 0x1D, 0x1D, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 
   0x1F, 0x20, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x21, 0x22, 0x21, 0x23, 0x21, 0x23, 0x25, 0x23, 0x25, 
   0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 0x27, 0x25, 0x27, 0x24, 0x25, 0x24, 0x25, 0x24, 0x25, 0x22, 
   0x22, 0x22, 0x23, 0x22, 0x23, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x1F, 0x20, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1D, 0x1D, 0x1B, 0x1C, 0x1B, 0x19, 0x1A, 0x19, 0x19, 
   0x19, 0x19, 0x19, 0x19, 0x19, 0x18, 0x1A, 0x18, 0x1B, 0x1B, 0x1B, 0x1D, 0x1C, 0x1D, 0x1D, 0x1E, 
   0x1D, 0x1F, 0x1E, 0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 0x1D, 0x1E, 0x1B, 0x1B, 0x1B, 0x1A, 0x1B, 0x1A, 
   0x1B, 0x1A, 0x1B, 0x1B, 0x1B, 0x1B, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x42, 0x41, 0x42, 0x42, 
   0x40, 0x42, 0x3F, 0x40, 0x3F, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x39, 0x3A, 0x39, 0x39, 0x39, 
   0x39, 0x38, 0x38, 0x38, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x32, 0x33, 0x32, 0x32, 0x32, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 
   0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 
   0x2E, 0x2E, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 
   0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x2F, 0x30, 0x2E, 0x2E, 0x2E, 0x2D, 
   0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x30, 0x2F, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x2F, 
   0x30, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x32, 
   0x30, 0x32, 0x33, 0x33, 0x33, 0x34, 0x35, 0x34, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x3A, 0x38, 
   0x3A, 0x39, 0x39, 0x39, 0x3C, 0x3A, 0x3C, 0x3B, 0x3C, 0x3B, 0x3D, 0x3E, 0x3D, 0x3F, 0x3F, 0x3F, 
   0x37, 0x37, 0x37, 0x06, 0x06, 0x06, 0x03, 0x03, 0x03, 0x37, 0x37, 0x37, 0x48, 0x48, 0x48, 0x1F, 
   0x1F, 0x1F, 0x29, 0x29, 0x29, 0x46, 0x47, 0x46, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x46, 0x47, 0x46, 0x44, 0x46, 0x44, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x46, 0x47, 
   0x46, 0x47, 0x48, 0x47, 0x48, 0x4A, 0x48, 0x4C, 0x4C, 0x4C, 0x4E, 0x4E, 0x4E, 0x50, 0x50, 0x50, 
   0x53, 0x53, 0x53, 0x3D, 0x3D, 0x3D, 0x0B, 0x0A, 0x0B, 0x0D, 0x0D, 0x0D, 0x51, 0x52, 0x51, 0x53, 
   0x53, 0x53, 0x50, 0x51, 0x50, 0x52, 0x53, 0x52, 0x5B, 0x5B, 0x5B, 0x40, 0x3F, 0x40, 0x2F, 0x2F, 
   0x2F, 0x57, 0x57, 0x57, 0x53, 0x54, 0x53, 0x52, 0x52, 0x52, 0x51, 0x51, 0x51, 0x52, 0x51, 0x52, 
   0x4F, 0x50, 0x4F, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4C, 0x4D, 0x4C, 0x4A, 0x4B, 0x4A, 0x48, 
   0x4A, 0x48, 0x47, 0x48, 0x47, 0x45, 0x46, 0x45, 0x46, 0x45, 0x46, 0x43, 0x43, 0x43, 0x42, 0x43, 
   0x42, 0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x3F, 0x3D, 0x3F, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 
   0x3C, 0x3A, 0x3C, 0x3C, 0x3A, 0x3C, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3D, 0x3C, 0x3D, 0x3D, 
   0x3B, 0x3D, 0x3E, 0x3D, 0x3E, 0x2A, 0x2A, 0x2A, 0x36, 0x36, 0x36, 0x40, 0x40, 0x40, 0x35, 0x36, 
   0x35, 0x2C, 0x2B, 0x2C, 0x1F, 0x1F, 0x1F, 0x31, 0x33, 0x31, 0x35, 0x34, 0x35, 0x39, 0x38, 0x39, 
   0x37, 0x38, 0x37, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x38, 0x39, 0x38, 0x37, 0x38, 0x36, 0x36, 0x36, 0x42, 0x43, 0x42, 0x48, 0x49, 0x48, 0x3E, 
   0x3F, 0x3E, 0x34, 0x35, 0x34, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x2F, 0x2F, 0x2F, 0x2A, 0x2A, 
   0x2A, 0x18, 0x1B, 0x18, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 0x28, 0x28, 0x28, 
   0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x24, 0x25, 0x24, 0x23, 0x23, 0x23, 0x21, 0x21, 0x21, 0x1E, 
   0x1E, 0x1E, 0x1A, 0x1B, 0x1A, 0x19, 0x19, 0x19, 0x18, 0x19, 0x18, 0x1A, 0x19, 0x1A, 0x1A, 0x1A, 
   0x1A, 0x1C, 0x1C, 0x1C, 0x1D, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 
   0x1D, 0x1E, 0x1D, 0x1D, 0x1C, 0x1D, 0x1C, 0x1C, 0x1C, 0x1A, 0x1B, 0x1A, 0x1B, 0x1A, 0x1B, 0x1A, 
   0x1B, 0x1A, 0x1C, 0x1C, 0x1C, 0x1E, 0x1E, 0x1E, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 
   0x21, 0x21, 0x20, 0x21, 0x21, 0x22, 0x21, 0x22, 0x22, 0x22, 0x24, 0x22, 0x24, 0x25, 0x25, 0x25, 
   0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x23, 
   0x24, 0x23, 0x24, 0x23, 0x24, 0x21, 0x22, 0x21, 0x20, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1C, 0x1D, 0x1C, 0x1B, 0x1B, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 
   0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1C, 0x1B, 0x1C, 0x1D, 0x1D, 0x1D, 0x1E, 0x1E, 
   0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 0x1D, 0x1C, 0x1C, 0x1C, 
   0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x40, 
   0x41, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3E, 0x3E, 0x3C, 0x3D, 0x3C, 0x3B, 0x3C, 0x3B, 0x39, 0x3A, 
   0x39, 0x38, 0x38, 0x38, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 
   0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x32, 0x33, 0x31, 0x30, 0x31, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x30, 0x2E, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 
   0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 
   0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x2F, 0x31, 0x2F, 0x31, 0x2F, 0x31, 0x2E, 
   0x2E, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 0x31, 0x30, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 
   0x31, 0x2F, 0x31, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x31, 0x30, 0x34, 
   0x31, 0x34, 0x33, 0x34, 0x33, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x39, 0x39, 
   0x39, 0x3B, 0x3C, 0x3B, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 
   0x43, 0x44, 0x43, 0x23, 0x24, 0x23, 0x00, 0x00, 0x00, 0x21, 0x21, 0x21, 0x40, 0x43, 0x40, 0x29, 
   0x28, 0x29, 0x28, 0x28, 0x28, 0x47, 0x47, 0x47, 0x44, 0x45, 0x44, 0x46, 0x46, 0x46, 0x45, 0x46, 
   0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 
   0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x46, 0x47, 0x44, 0x46, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x46, 0x47, 
   0x46, 0x48, 0x48, 0x48, 0x49, 0x4A, 0x49, 0x4B, 0x4C, 0x4B, 0x4E, 0x4D, 0x4E, 0x4E, 0x4F, 0x4E, 
   0x50, 0x50, 0x50, 0x57, 0x57, 0x57, 0x3D, 0x3F, 0x3D, 0x07, 0x07, 0x07, 0x44, 0x44, 0x44, 0x50, 
   0x52, 0x50, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 0x56, 0x55, 0x56, 0x3F, 0x3E, 
   0x3F, 0x3B, 0x3C, 0x3B, 0x52, 0x55, 0x52, 0x51, 0x52, 0x51, 0x51, 0x51, 0x51, 0x50, 0x50, 0x50, 
   0x4F, 0x4F, 0x4F, 0x4E, 0x4F, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4A, 0x4B, 0x4A, 0x48, 
   0x49, 0x48, 0x48, 0x48, 0x48, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x44, 0x45, 0x44, 0x42, 0x44, 
   0x42, 0x43, 0x43, 0x43, 0x42, 0x41, 0x42, 0x3F, 0x3D, 0x3F, 0x3D, 0x3B, 0x3D, 0x3B, 0x3B, 0x3B, 
   0x3C, 0x3B, 0x3C, 0x3E, 0x3C, 0x3E, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3B, 
   0x3C, 0x3B, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x36, 0x38, 0x36, 0x3A, 0x39, 0x3A, 0x3A, 0x3B, 
   0x3A, 0x1E, 0x1F, 0x1E, 0x2A, 0x2A, 0x2A, 0x3B, 0x3B, 0x3B, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 
   0x37, 0x39, 0x37, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 
   0x39, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x37, 0x38, 0x37, 0x38, 0x37, 0x2F, 0x30, 0x2F, 0x3B, 0x3C, 0x3B, 0x64, 0x63, 0x64, 0x45, 
   0x46, 0x45, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x21, 0x21, 
   0x21, 0x14, 0x14, 0x14, 0x26, 0x26, 0x26, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 
   0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x25, 0x26, 0x24, 0x24, 0x24, 0x21, 0x21, 0x21, 0x1E, 
   0x1E, 0x1E, 0x1C, 0x1D, 0x1C, 0x1B, 0x1C, 0x1B, 0x1A, 0x1B, 0x1A, 0x1A, 0x1B, 0x1A, 0x1C, 0x1D, 
   0x1C, 0x1E, 0x1D, 0x1E, 0x1F, 0x1E, 0x1F, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 
   0x1F, 0x1F, 0x1F, 0x1E, 0x1E, 0x1E, 0x1D, 0x1D, 0x1D, 0x1B, 0x1D, 0x1B, 0x1D, 0x1D, 0x1D, 0x1C, 
   0x1D, 0x1C, 0x1E, 0x1D, 0x1E, 0x20, 0x1F, 0x20, 0x21, 0x20, 0x21, 0x22, 0x21, 0x22, 0x22, 0x22, 
   0x22, 0x23, 0x21, 0x23, 0x23, 0x22, 0x23, 0x24, 0x24, 0x24, 0x26, 0x25, 0x26, 0x26, 0x26, 0x26, 
   0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x28, 0x26, 0x28, 0x25, 0x26, 0x25, 0x24, 
   0x24, 0x24, 0x25, 0x23, 0x25, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x21, 0x22, 
   0x21, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x22, 0x21, 0x22, 0x22, 0x21, 0x22, 0x20, 0x20, 0x20, 
   0x1F, 0x20, 0x1F, 0x1F, 0x1F, 0x1F, 0x1D, 0x1D, 0x1D, 0x1B, 0x1D, 0x1B, 0x1D, 0x1C, 0x1D, 0x1B, 
   0x1B, 0x1B, 0x1A, 0x1B, 0x1A, 0x1C, 0x1A, 0x1C, 0x1B, 0x1C, 0x1B, 0x1E, 0x1E, 0x1E, 0x20, 0x1F, 
   0x20, 0x20, 0x20, 0x20, 0x21, 0x20, 0x21, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1D, 0x1D, 
   0x1D, 0x1D, 0x1D, 0x1F, 0x1D, 0x1F, 0x3F, 0x40, 0x3F, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x41, 
   0x42, 0x41, 0x3F, 0x40, 0x3F, 0x3D, 0x3E, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 
   0x3B, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 
   0x35, 0x36, 0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x33, 0x33, 0x33, 0x30, 0x31, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 
   0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 
   0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x33, 0x34, 0x33, 0x33, 0x33, 
   0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x35, 
   0x34, 0x35, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x3A, 0x3A, 0x3A, 0x3A, 0x3C, 
   0x3A, 0x3D, 0x3E, 0x3D, 0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 0x41, 0x43, 0x41, 0x44, 0x43, 0x44, 
   0x44, 0x44, 0x44, 0x42, 0x41, 0x42, 0x24, 0x24, 0x24, 0x00, 0x00, 0x00, 0x06, 0x07, 0x06, 0x33, 
   0x34, 0x33, 0x2B, 0x2C, 0x2B, 0x37, 0x38, 0x37, 0x48, 0x4A, 0x48, 0x46, 0x47, 0x46, 0x46, 0x47, 
   0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 
   0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x46, 0x46, 
   0x46, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4D, 0x4D, 0x4D, 
   0x4F, 0x4F, 0x4F, 0x51, 0x51, 0x51, 0x56, 0x56, 0x56, 0x21, 0x22, 0x21, 0x00, 0x00, 0x00, 0x2D, 
   0x2E, 0x2D, 0x54, 0x56, 0x54, 0x50, 0x51, 0x50, 0x50, 0x51, 0x50, 0x53, 0x54, 0x53, 0x50, 0x50, 
   0x50, 0x28, 0x28, 0x28, 0x4F, 0x50, 0x4F, 0x51, 0x52, 0x51, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x4E, 0x4D, 0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4C, 0x4C, 0x4C, 0x4B, 0x4B, 0x4B, 0x49, 
   0x4A, 0x49, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x46, 0x45, 0x46, 0x44, 0x44, 0x44, 0x44, 0x44, 
   0x44, 0x42, 0x42, 0x42, 0x43, 0x41, 0x43, 0x3E, 0x3F, 0x3E, 0x3E, 0x3D, 0x3E, 0x3C, 0x3D, 0x3C, 
   0x3D, 0x3D, 0x3D, 0x40, 0x3F, 0x40, 0x40, 0x3F, 0x40, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3A, 
   0x39, 0x3A, 0x1F, 0x1E, 0x1F, 0x46, 0x47, 0x46, 0x4D, 0x4E, 0x4D, 0x3C, 0x3E, 0x3C, 0x2C, 0x2D, 
   0x2C, 0x22, 0x24, 0x22, 0x3E, 0x3C, 0x3E, 0x3C, 0x3A, 0x3C, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3B, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 
   0x3C, 0x3B, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 0x3A, 
   0x3B, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 
   0x35, 0x36, 0x35, 0x36, 0x37, 0x36, 0x2E, 0x2E, 0x2E, 0x19, 0x18, 0x19, 0x2B, 0x2B, 0x2B, 0x33, 
   0x33, 0x33, 0x32, 0x33, 0x32, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2D, 0x2D, 0x17, 0x18, 
   0x17, 0x1D, 0x1F, 0x1D, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 
   0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x25, 0x24, 0x25, 0x23, 0x23, 0x23, 0x21, 
   0x21, 0x21, 0x20, 0x1F, 0x20, 0x1E, 0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x20, 0x20, 
   0x20, 0x20, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x20, 0x21, 0x20, 0x20, 0x21, 0x20, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 
   0x20, 0x21, 0x20, 0x21, 0x20, 0x23, 0x21, 0x23, 0x23, 0x22, 0x23, 0x24, 0x23, 0x24, 0x25, 0x24, 
   0x25, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 0x29, 0x28, 0x29, 0x28, 0x29, 0x28, 
   0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x28, 0x28, 0x28, 0x27, 0x26, 0x27, 0x25, 
   0x26, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 0x26, 0x25, 0x26, 0x24, 0x24, 
   0x24, 0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 
   0x20, 0x21, 0x20, 0x20, 0x20, 0x20, 0x1E, 0x1F, 0x1E, 0x1D, 0x1E, 0x1D, 0x1F, 0x1E, 0x1F, 0x1C, 
   0x1D, 0x1C, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x20, 0x1F, 0x20, 0x21, 0x20, 
   0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x21, 0x20, 0x21, 
   0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x40, 
   0x42, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3D, 0x3E, 0x3C, 0x3B, 0x3C, 0x3D, 0x3B, 0x3D, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 
   0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x34, 0x35, 0x34, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x33, 
   0x34, 0x33, 0x33, 0x32, 0x33, 0x31, 0x30, 0x31, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2F, 0x2F, 0x31, 0x2F, 0x31, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 
   0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 
   0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x32, 0x34, 0x32, 0x35, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x34, 0x35, 
   0x34, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x31, 0x32, 0x31, 
   0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x35, 
   0x35, 0x35, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x37, 0x39, 0x37, 0x3A, 0x3B, 0x3A, 0x3D, 0x3E, 
   0x3D, 0x3F, 0x40, 0x3F, 0x42, 0x42, 0x42, 0x44, 0x42, 0x44, 0x43, 0x45, 0x43, 0x46, 0x45, 0x46, 
   0x45, 0x46, 0x45, 0x48, 0x47, 0x48, 0x39, 0x39, 0x39, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x20, 
   0x21, 0x20, 0x38, 0x39, 0x38, 0x27, 0x27, 0x27, 0x4D, 0x4D, 0x4D, 0x47, 0x47, 0x47, 0x47, 0x48, 
   0x47, 0x48, 0x47, 0x48, 0x47, 0x48, 0x47, 0x48, 0x49, 0x48, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 
   0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x49, 0x48, 0x49, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x44, 
   0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x46, 0x48, 0x48, 0x48, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x4A, 0x4B, 0x4A, 0x4C, 0x4C, 0x4C, 
   0x4E, 0x4E, 0x4E, 0x4F, 0x50, 0x4F, 0x55, 0x54, 0x55, 0x43, 0x44, 0x43, 0x0D, 0x0E, 0x0D, 0x25, 
   0x24, 0x25, 0x56, 0x56, 0x56, 0x50, 0x51, 0x50, 0x4F, 0x50, 0x4F, 0x4F, 0x50, 0x4F, 0x51, 0x52, 
   0x51, 0x39, 0x38, 0x39, 0x39, 0x3A, 0x39, 0x4F, 0x50, 0x4F, 0x4D, 0x4D, 0x4D, 0x4C, 0x4C, 0x4C, 
   0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4D, 0x4B, 0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x49, 
   0x4A, 0x49, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x43, 0x44, 
   0x43, 0x43, 0x43, 0x43, 0x42, 0x41, 0x42, 0x3F, 0x3F, 0x3F, 0x3D, 0x3D, 0x3D, 0x3F, 0x3D, 0x3F, 
   0x3F, 0x3D, 0x3F, 0x3F, 0x41, 0x3F, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x3F, 0x3F, 0x3F, 0x3E, 
   0x3C, 0x3E, 0x1D, 0x1C, 0x1D, 0x40, 0x3F, 0x40, 0x45, 0x47, 0x45, 0x3E, 0x3D, 0x3E, 0x1A, 0x1B, 
   0x1A, 0x30, 0x30, 0x30, 0x3F, 0x3F, 0x3F, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 
   0x3C, 0x3D, 0x3C, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3C, 0x3B, 0x3D, 0x3C, 0x3D, 0x3C, 
   0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3D, 0x3B, 0x3D, 0x3B, 0x3B, 
   0x3B, 0x3A, 0x3B, 0x3A, 0x39, 0x3B, 0x39, 0x38, 0x39, 0x38, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 
   0x36, 0x35, 0x36, 0x36, 0x35, 0x36, 0x2D, 0x2E, 0x2D, 0x2E, 0x2C, 0x2E, 0x2F, 0x2F, 0x2F, 0x32, 
   0x30, 0x32, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x25, 0x26, 0x25, 0x19, 0x19, 
   0x19, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x28, 0x2A, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 
   0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x26, 0x27, 0x26, 0x25, 0x26, 0x25, 0x25, 0x24, 0x25, 0x22, 
   0x22, 0x22, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x1F, 0x1E, 0x1F, 0x20, 0x20, 0x20, 0x21, 0x21, 
   0x21, 0x22, 0x21, 0x22, 0x23, 0x22, 0x23, 0x21, 0x22, 0x21, 0x22, 0x22, 0x22, 0x21, 0x22, 0x21, 
   0x23, 0x21, 0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x23, 
   0x21, 0x23, 0x22, 0x22, 0x22, 0x25, 0x23, 0x25, 0x24, 0x24, 0x24, 0x26, 0x24, 0x26, 0x26, 0x25, 
   0x26, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x28, 0x29, 0x28, 0x2B, 0x29, 0x2B, 0x2B, 0x2A, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x26, 
   0x27, 0x26, 0x27, 0x26, 0x27, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x25, 
   0x26, 0x24, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x25, 0x27, 0x25, 0x25, 0x25, 
   0x22, 0x23, 0x22, 0x20, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x21, 0x20, 0x20, 0x1F, 0x20, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1F, 0x20, 0x1F, 0x20, 0x20, 
   0x20, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x22, 0x21, 0x22, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 
   0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x3F, 0x41, 0x3F, 0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x41, 
   0x42, 0x41, 0x3F, 0x40, 0x3F, 0x3C, 0x3E, 0x3C, 0x3D, 0x3B, 0x3D, 0x3C, 0x3B, 0x3C, 0x3B, 0x3A, 
   0x3B, 0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 
   0x38, 0x38, 0x38, 0x36, 0x37, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x34, 0x35, 0x33, 0x33, 0x33, 0x30, 0x31, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D, 
   0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2E, 0x30, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 0x31, 0x30, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 
   0x35, 0x33, 0x35, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 
   0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 
   0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x32, 0x33, 0x32, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 
   0x37, 0x36, 0x38, 0x37, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x3C, 0x3B, 0x3C, 0x3F, 0x3F, 
   0x3F, 0x41, 0x41, 0x41, 0x44, 0x44, 0x44, 0x46, 0x45, 0x46, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 
   0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x48, 0x47, 0x48, 0x42, 0x43, 0x42, 0x19, 0x18, 0x19, 0x0E, 
   0x0F, 0x0E, 0x44, 0x44, 0x44, 0x23, 0x23, 0x23, 0x42, 0x41, 0x42, 0x4A, 0x4A, 0x4A, 0x48, 0x47, 
   0x48, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 
   0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x44, 0x45, 0x44, 0x46, 
   0x45, 0x46, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x46, 0x47, 
   0x46, 0x48, 0x47, 0x48, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x49, 0x4A, 0x49, 0x4C, 0x4B, 0x4C, 
   0x4E, 0x4D, 0x4E, 0x4F, 0x50, 0x4F, 0x51, 0x52, 0x51, 0x53, 0x53, 0x53, 0x24, 0x23, 0x24, 0x2D, 
   0x2C, 0x2D, 0x59, 0x5A, 0x59, 0x51, 0x51, 0x51, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x51, 0x54, 
   0x51, 0x42, 0x43, 0x42, 0x1F, 0x1E, 0x1F, 0x46, 0x47, 0x46, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 
   0x4B, 0x4B, 0x4B, 0x4A, 0x4C, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x49, 0x4A, 0x49, 0x48, 
   0x49, 0x48, 0x48, 0x47, 0x48, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x44, 0x45, 0x44, 0x44, 0x43, 
   0x44, 0x43, 0x43, 0x43, 0x42, 0x41, 0x42, 0x40, 0x3F, 0x40, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 
   0x40, 0x3F, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x46, 0x46, 0x46, 0x50, 
   0x4F, 0x50, 0x31, 0x31, 0x31, 0x34, 0x34, 0x34, 0x44, 0x45, 0x44, 0x3A, 0x3C, 0x3A, 0x1B, 0x1D, 
   0x1B, 0x36, 0x35, 0x36, 0x3C, 0x3C, 0x3C, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 
   0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 0x3E, 0x3D, 0x3E, 0x3F, 
   0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3B, 
   0x3D, 0x3B, 0x3B, 0x3B, 0x3A, 0x39, 0x3A, 0x38, 0x38, 0x38, 0x37, 0x36, 0x37, 0x35, 0x36, 0x35, 
   0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x22, 0x24, 0x22, 0x39, 0x39, 0x39, 0x40, 0x3F, 0x40, 0x30, 
   0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x1C, 0x1D, 0x1C, 0x1F, 0x1F, 
   0x1F, 0x2D, 0x2C, 0x2D, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x28, 0x29, 0x28, 0x28, 0x29, 0x28, 
   0x28, 0x29, 0x28, 0x29, 0x28, 0x29, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x26, 0x25, 0x26, 0x24, 
   0x24, 0x24, 0x23, 0x23, 0x23, 0x22, 0x21, 0x22, 0x20, 0x21, 0x20, 0x22, 0x21, 0x22, 0x22, 0x22, 
   0x22, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 
   0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x23, 
   0x23, 0x23, 0x24, 0x23, 0x24, 0x25, 0x24, 0x25, 0x26, 0x26, 0x26, 0x28, 0x26, 0x28, 0x28, 0x27, 
   0x28, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x29, 0x29, 0x29, 0x28, 0x29, 0x28, 0x28, 
   0x28, 0x28, 0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 
   0x24, 0x24, 0x24, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x23, 0x22, 0x23, 0x22, 
   0x22, 0x22, 0x21, 0x21, 0x21, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 0x21, 0x20, 0x21, 0x20, 0x20, 
   0x20, 0x21, 0x22, 0x21, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 
   0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 
   0x41, 0x41, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 
   0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x39, 0x3B, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 
   0x38, 0x39, 0x38, 0x38, 0x37, 0x38, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x33, 
   0x35, 0x33, 0x33, 0x32, 0x33, 0x31, 0x30, 0x31, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 
   0x2B, 0x2D, 0x2B, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 
   0x2D, 0x2B, 0x2E, 0x2E, 0x2E, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 
   0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 
   0x33, 0x34, 0x33, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x36, 
   0x36, 0x36, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x37, 0x38, 0x37, 0x38, 0x37, 0x38, 0x36, 0x36, 
   0x36, 0x37, 0x36, 0x37, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x35, 0x34, 0x35, 0x36, 0x36, 0x36, 0x37, 
   0x37, 0x37, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x3B, 0x3A, 0x3B, 0x40, 0x3D, 0x40, 0x3F, 0x3F, 
   0x3F, 0x43, 0x42, 0x43, 0x44, 0x44, 0x44, 0x44, 0x46, 0x44, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 
   0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4C, 0x4B, 0x4C, 0x30, 0x2F, 0x30, 0x02, 
   0x01, 0x02, 0x2D, 0x2C, 0x2D, 0x39, 0x39, 0x39, 0x34, 0x33, 0x34, 0x54, 0x55, 0x54, 0x4E, 0x4E, 
   0x4E, 0x49, 0x4A, 0x49, 0x48, 0x49, 0x48, 0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x48, 0x49, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 
   0x45, 0x44, 0x46, 0x44, 0x46, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x45, 0x47, 
   0x45, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x4B, 0x4A, 0x4B, 
   0x4C, 0x4C, 0x4C, 0x4F, 0x4F, 0x4F, 0x51, 0x51, 0x51, 0x52, 0x53, 0x52, 0x2E, 0x2E, 0x2E, 0x07, 
   0x08, 0x07, 0x1D, 0x1E, 0x1D, 0x47, 0x47, 0x47, 0x51, 0x53, 0x51, 0x4D, 0x4E, 0x4D, 0x4F, 0x4F, 
   0x4F, 0x4B, 0x4B, 0x4B, 0x17, 0x17, 0x17, 0x3D, 0x3D, 0x3D, 0x4F, 0x50, 0x4F, 0x4B, 0x4A, 0x4B, 
   0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x48, 0x4A, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x47, 
   0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x45, 0x46, 0x43, 0x45, 0x43, 0x44, 0x44, 0x44, 0x43, 0x42, 
   0x43, 0x42, 0x43, 0x42, 0x42, 0x41, 0x42, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3D, 0x3F, 0x3D, 
   0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3F, 0x3F, 0x3F, 0x3C, 0x3C, 0x3C, 0x50, 
   0x51, 0x50, 0x5C, 0x5D, 0x5C, 0x46, 0x47, 0x46, 0x41, 0x41, 0x41, 0x2B, 0x2D, 0x2B, 0x32, 0x30, 
   0x32, 0x45, 0x43, 0x45, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 
   0x3C, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x38, 0x37, 0x38, 0x36, 0x36, 0x36, 
   0x37, 0x36, 0x37, 0x3E, 0x3E, 0x3E, 0x43, 0x44, 0x43, 0x41, 0x43, 0x41, 0x34, 0x33, 0x34, 0x2E, 
   0x2F, 0x2E, 0x2D, 0x2D, 0x2D, 0x30, 0x2F, 0x30, 0x2C, 0x2B, 0x2C, 0x1C, 0x1B, 0x1C, 0x28, 0x26, 
   0x28, 0x29, 0x28, 0x29, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x25, 0x27, 0x25, 0x26, 
   0x25, 0x26, 0x24, 0x24, 0x24, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x25, 0x23, 0x25, 0x24, 0x24, 
   0x24, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x24, 0x24, 0x24, 0x24, 0x22, 0x24, 0x24, 0x23, 0x24, 
   0x24, 0x24, 0x24, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x23, 
   0x25, 0x23, 0x26, 0x25, 0x26, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x29, 0x29, 
   0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2B, 0x2A, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2B, 0x2D, 0x2B, 0x2C, 0x2D, 0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x29, 0x29, 
   0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x28, 0x27, 0x27, 
   0x27, 0x27, 0x28, 0x27, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 
   0x26, 0x26, 0x26, 0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x23, 
   0x23, 0x23, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x22, 0x22, 0x22, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 
   0x23, 0x25, 0x23, 0x26, 0x26, 0x26, 0x44, 0x43, 0x44, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x40, 
   0x41, 0x40, 0x3F, 0x3E, 0x3F, 0x3C, 0x3B, 0x3C, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 
   0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 
   0x38, 0x39, 0x38, 0x38, 0x37, 0x38, 0x37, 0x35, 0x37, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x35, 
   0x34, 0x35, 0x32, 0x32, 0x32, 0x31, 0x30, 0x31, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 
   0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 
   0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x30, 
   0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 
   0x35, 0x34, 0x35, 0x36, 0x36, 0x36, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x38, 
   0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x37, 0x36, 
   0x37, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 
   0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x36, 0x34, 0x36, 0x36, 0x36, 0x38, 
   0x37, 0x38, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x3C, 0x3A, 0x3C, 0x3D, 0x3D, 0x3D, 0x40, 0x40, 
   0x40, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x48, 0x47, 0x48, 
   0x48, 0x48, 0x48, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4B, 0x4C, 0x4B, 0x4A, 0x4A, 0x4A, 0x0E, 
   0x0F, 0x0E, 0x08, 0x08, 0x08, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x4B, 0x4B, 0x4B, 0x42, 0x41, 
   0x42, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x49, 0x4B, 0x49, 0x49, 0x4A, 0x49, 0x48, 0x49, 0x48, 
   0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x44, 0x46, 0x44, 0x45, 
   0x46, 0x45, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x46, 0x46, 
   0x46, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x49, 0x4B, 0x49, 
   0x4B, 0x4C, 0x4B, 0x4E, 0x4E, 0x4E, 0x50, 0x50, 0x50, 0x53, 0x54, 0x53, 0x4A, 0x4A, 0x4A, 0x06, 
   0x06, 0x06, 0x00, 0x00, 0x00, 0x25, 0x23, 0x25, 0x50, 0x52, 0x50, 0x4E, 0x4E, 0x4E, 0x4C, 0x4C, 
   0x4C, 0x4C, 0x4B, 0x4C, 0x2C, 0x2A, 0x2C, 0x38, 0x39, 0x38, 0x51, 0x52, 0x51, 0x4A, 0x4B, 0x4A, 
   0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 
   0x47, 0x47, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x36, 0x35, 0x36, 0x45, 
   0x44, 0x45, 0x66, 0x65, 0x66, 0x50, 0x50, 0x50, 0x3F, 0x3E, 0x3F, 0x1D, 0x1C, 0x1D, 0x44, 0x43, 
   0x44, 0x45, 0x45, 0x45, 0x44, 0x43, 0x44, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 
   0x41, 0x42, 0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 
   0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x40, 0x3F, 0x40, 0x3E, 0x3E, 
   0x3E, 0x3C, 0x3B, 0x3C, 0x3A, 0x3B, 0x3A, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x36, 0x36, 0x36, 
   0x32, 0x31, 0x32, 0x46, 0x47, 0x46, 0x58, 0x58, 0x58, 0x3E, 0x3E, 0x3E, 0x2E, 0x2D, 0x2E, 0x2E, 
   0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x16, 0x16, 0x16, 0x1F, 0x20, 0x1F, 0x30, 0x2F, 
   0x30, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x28, 0x2A, 0x2A, 0x2A, 
   0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 0x26, 
   0x26, 0x26, 0x25, 0x25, 0x25, 0x24, 0x24, 0x24, 0x25, 0x23, 0x25, 0x25, 0x25, 0x25, 0x27, 0x26, 
   0x27, 0x28, 0x26, 0x28, 0x26, 0x26, 0x26, 0x24, 0x25, 0x24, 0x24, 0x22, 0x24, 0x24, 0x24, 0x24, 
   0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x26, 
   0x26, 0x26, 0x27, 0x25, 0x27, 0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 
   0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 
   0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 
   0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x25, 
   0x25, 0x25, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x23, 
   0x22, 0x25, 0x23, 0x25, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x26, 0x25, 0x26, 
   0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x41, 0x42, 0x3E, 
   0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3B, 0x3A, 0x3B, 0x3D, 0x3B, 0x3D, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 
   0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x33, 0x35, 0x33, 0x35, 0x34, 0x35, 0x33, 
   0x32, 0x33, 0x31, 0x32, 0x31, 0x30, 0x30, 0x30, 0x2E, 0x2F, 0x2E, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 
   0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 
   0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 
   0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x33, 0x31, 0x33, 
   0x32, 0x35, 0x32, 0x37, 0x38, 0x37, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x37, 0x37, 
   0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 
   0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x38, 
   0x37, 0x38, 0x39, 0x38, 0x39, 0x39, 0x3A, 0x39, 0x3C, 0x3B, 0x3C, 0x3F, 0x3D, 0x3F, 0x41, 0x40, 
   0x41, 0x43, 0x43, 0x43, 0x46, 0x44, 0x46, 0x46, 0x46, 0x46, 0x47, 0x48, 0x47, 0x49, 0x48, 0x49, 
   0x48, 0x4A, 0x48, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4B, 0x4C, 0x4B, 0x51, 0x51, 0x51, 0x28, 
   0x29, 0x28, 0x00, 0x00, 0x00, 0x1E, 0x1F, 0x1E, 0x51, 0x53, 0x51, 0x4C, 0x4D, 0x4C, 0x37, 0x37, 
   0x37, 0x41, 0x42, 0x41, 0x51, 0x51, 0x51, 0x4A, 0x4A, 0x4A, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x45, 0x47, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x45, 
   0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x45, 0x46, 
   0x45, 0x48, 0x47, 0x48, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 
   0x4B, 0x4B, 0x4B, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x51, 0x51, 0x51, 0x55, 0x55, 0x55, 0x3F, 
   0x40, 0x3F, 0x0A, 0x0C, 0x0A, 0x08, 0x08, 0x08, 0x4E, 0x4E, 0x4E, 0x50, 0x4F, 0x50, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4C, 0x4B, 0x44, 0x44, 0x44, 0x2D, 0x2D, 0x2D, 0x47, 0x46, 0x47, 0x4B, 0x4C, 0x4B, 
   0x46, 0x48, 0x46, 0x47, 0x46, 0x47, 0x47, 0x46, 0x47, 0x48, 0x46, 0x48, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x41, 0x42, 
   0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 
   0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x43, 0x43, 0x43, 0x3E, 0x3C, 0x3E, 0x37, 0x37, 0x37, 0x56, 
   0x55, 0x56, 0x58, 0x57, 0x58, 0x48, 0x47, 0x48, 0x36, 0x39, 0x36, 0x18, 0x18, 0x18, 0x41, 0x41, 
   0x41, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x43, 0x44, 0x43, 
   0x42, 0x44, 0x42, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x43, 
   0x42, 0x43, 0x43, 0x41, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x41, 0x41, 0x41, 0x3E, 0x3E, 
   0x3E, 0x3B, 0x3C, 0x3B, 0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 0x37, 0x39, 0x37, 0x35, 0x34, 0x35, 
   0x25, 0x24, 0x25, 0x46, 0x46, 0x46, 0x49, 0x49, 0x49, 0x31, 0x30, 0x31, 0x2E, 0x2D, 0x2E, 0x2E, 
   0x2D, 0x2E, 0x30, 0x30, 0x30, 0x29, 0x29, 0x29, 0x17, 0x16, 0x17, 0x26, 0x25, 0x26, 0x2C, 0x2A, 
   0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2B, 0x2A, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x28, 0x2A, 0x28, 0x28, 0x28, 0x27, 
   0x26, 0x27, 0x27, 0x25, 0x27, 0x25, 0x25, 0x25, 0x24, 0x25, 0x24, 0x26, 0x26, 0x26, 0x28, 0x27, 
   0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x26, 0x24, 0x26, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 
   0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 0x26, 0x25, 0x26, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x29, 0x28, 0x2B, 0x2A, 0x2B, 0x2B, 0x29, 0x2B, 0x29, 0x29, 
   0x29, 0x2A, 0x29, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2B, 
   0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 
   0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 
   0x2A, 0x2A, 0x2A, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 
   0x26, 0x26, 0x27, 0x26, 0x27, 0x25, 0x24, 0x25, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x23, 
   0x24, 0x24, 0x24, 0x24, 0x24, 0x25, 0x24, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x26, 0x26, 0x26, 
   0x28, 0x28, 0x28, 0x2A, 0x29, 0x2A, 0x42, 0x44, 0x42, 0x44, 0x44, 0x44, 0x42, 0x41, 0x42, 0x40, 
   0x40, 0x40, 0x3E, 0x3E, 0x3E, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3B, 
   0x3A, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x37, 0x36, 0x37, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x32, 
   0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x2F, 0x31, 0x30, 0x2E, 0x30, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 
   0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x32, 
   0x31, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x33, 0x31, 0x33, 0x32, 0x31, 0x32, 0x31, 0x34, 0x31, 
   0x35, 0x35, 0x35, 0x39, 0x38, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x37, 0x37, 
   0x37, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x37, 0x36, 0x37, 0x37, 
   0x37, 0x37, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3F, 0x3D, 0x3F, 0x42, 0x40, 
   0x42, 0x43, 0x43, 0x43, 0x44, 0x46, 0x44, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x49, 0x49, 0x49, 
   0x49, 0x4A, 0x49, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4C, 0x4C, 0x4E, 0x50, 0x4E, 0x43, 
   0x42, 0x43, 0x08, 0x07, 0x08, 0x03, 0x03, 0x03, 0x30, 0x31, 0x30, 0x52, 0x54, 0x52, 0x46, 0x48, 
   0x46, 0x34, 0x34, 0x34, 0x49, 0x49, 0x49, 0x4D, 0x4D, 0x4D, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 
   0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x46, 
   0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x46, 0x45, 
   0x46, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 
   0x4C, 0x4B, 0x4C, 0x4C, 0x4E, 0x4C, 0x4E, 0x4F, 0x4E, 0x50, 0x50, 0x50, 0x53, 0x52, 0x53, 0x59, 
   0x59, 0x59, 0x3F, 0x40, 0x3F, 0x03, 0x03, 0x03, 0x2C, 0x2C, 0x2C, 0x4C, 0x4E, 0x4C, 0x4B, 0x4B, 
   0x4B, 0x4A, 0x4B, 0x4A, 0x4F, 0x4F, 0x4F, 0x2A, 0x28, 0x2A, 0x35, 0x33, 0x35, 0x4C, 0x4C, 0x4C, 
   0x48, 0x47, 0x48, 0x47, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x46, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 
   0x41, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 
   0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 0x44, 0x44, 0x44, 0x39, 0x38, 0x39, 0x34, 0x34, 0x34, 0x59, 
   0x5A, 0x59, 0x43, 0x45, 0x43, 0x48, 0x49, 0x48, 0x35, 0x34, 0x35, 0x25, 0x24, 0x25, 0x47, 0x48, 
   0x47, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x44, 0x46, 0x44, 
   0x45, 0x44, 0x45, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x3F, 0x40, 
   0x3F, 0x3D, 0x3D, 0x3D, 0x3C, 0x3B, 0x3C, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x33, 0x34, 0x33, 
   0x1F, 0x1F, 0x1F, 0x40, 0x40, 0x40, 0x33, 0x32, 0x33, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x30, 0x2F, 0x2A, 0x2A, 0x2A, 0x24, 0x23, 0x24, 0x27, 0x27, 0x27, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 
   0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x28, 
   0x27, 0x28, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 0x27, 0x26, 0x27, 0x29, 0x28, 
   0x29, 0x28, 0x29, 0x28, 0x29, 0x28, 0x29, 0x26, 0x26, 0x26, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 
   0x26, 0x25, 0x26, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x28, 
   0x27, 0x28, 0x29, 0x28, 0x29, 0x29, 0x2A, 0x29, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 
   0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2A, 0x2B, 0x2A, 0x2A, 0x2B, 
   0x2A, 0x2A, 0x2B, 0x2A, 0x2A, 0x2B, 0x2A, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2A, 0x2C, 
   0x2A, 0x2B, 0x2A, 0x2A, 0x2B, 0x2A, 0x2A, 0x28, 0x2A, 0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 
   0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x25, 0x26, 0x25, 0x28, 0x28, 0x28, 
   0x28, 0x29, 0x28, 0x2B, 0x2A, 0x2B, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x42, 
   0x41, 0x42, 0x3F, 0x40, 0x3F, 0x3D, 0x3D, 0x3D, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 
   0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x33, 
   0x32, 0x33, 0x32, 0x31, 0x32, 0x30, 0x30, 0x30, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2D, 0x2D, 0x2D, 
   0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 
   0x2E, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x31, 
   0x31, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x35, 0x33, 0x35, 
   0x36, 0x35, 0x36, 0x36, 0x38, 0x36, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3D, 0x3B, 0x3D, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x38, 0x38, 
   0x38, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x37, 
   0x38, 0x37, 0x39, 0x39, 0x39, 0x3B, 0x3A, 0x3B, 0x3B, 0x3C, 0x3B, 0x3F, 0x3F, 0x3F, 0x42, 0x41, 
   0x42, 0x42, 0x44, 0x42, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 
   0x49, 0x4A, 0x49, 0x4A, 0x4B, 0x4A, 0x4C, 0x4B, 0x4C, 0x4C, 0x4D, 0x4C, 0x4C, 0x4D, 0x4C, 0x4D, 
   0x4E, 0x4D, 0x3E, 0x3D, 0x3E, 0x04, 0x04, 0x04, 0x06, 0x06, 0x06, 0x40, 0x41, 0x40, 0x51, 0x51, 
   0x51, 0x3B, 0x3B, 0x3B, 0x38, 0x38, 0x38, 0x4C, 0x4D, 0x4C, 0x49, 0x4A, 0x49, 0x48, 0x49, 0x48, 
   0x47, 0x47, 0x47, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 
   0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x46, 
   0x45, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x49, 0x48, 0x49, 0x48, 0x49, 0x48, 0x49, 0x4B, 0x49, 
   0x4B, 0x4C, 0x4B, 0x4E, 0x4D, 0x4E, 0x4E, 0x4F, 0x4E, 0x51, 0x50, 0x51, 0x52, 0x52, 0x52, 0x51, 
   0x53, 0x51, 0x53, 0x54, 0x53, 0x19, 0x19, 0x19, 0x00, 0x00, 0x00, 0x35, 0x35, 0x35, 0x4E, 0x4E, 
   0x4E, 0x49, 0x49, 0x49, 0x4C, 0x4C, 0x4C, 0x36, 0x35, 0x36, 0x28, 0x28, 0x28, 0x4C, 0x4C, 0x4C, 
   0x49, 0x47, 0x49, 0x46, 0x45, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x44, 
   0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 
   0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 
   0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x44, 0x44, 0x44, 0x46, 0x46, 0x46, 0x51, 0x50, 0x51, 0x56, 
   0x56, 0x56, 0x45, 0x45, 0x45, 0x42, 0x44, 0x42, 0x2A, 0x28, 0x2A, 0x3A, 0x3A, 0x3A, 0x49, 0x4A, 
   0x49, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 
   0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x43, 
   0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x40, 0x40, 
   0x40, 0x3F, 0x3D, 0x3F, 0x3D, 0x3C, 0x3D, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x38, 0x37, 0x38, 
   0x33, 0x34, 0x33, 0x39, 0x38, 0x39, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x31, 
   0x31, 0x31, 0x20, 0x21, 0x20, 0x1E, 0x1E, 0x1E, 0x26, 0x27, 0x26, 0x27, 0x28, 0x27, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x29, 0x2A, 0x29, 0x29, 0x28, 0x29, 0x28, 
   0x28, 0x28, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x29, 0x28, 
   0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x29, 
   0x28, 0x29, 0x29, 0x29, 0x29, 0x2C, 0x2A, 0x2C, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 
   0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2D, 0x2C, 0x2D, 0x2E, 0x2E, 0x2E, 
   0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2D, 0x2E, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 
   0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2A, 0x2C, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x27, 0x28, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x25, 0x25, 
   0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x25, 0x26, 0x28, 0x27, 0x28, 
   0x2A, 0x29, 0x2A, 0x2B, 0x2B, 0x2B, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x43, 
   0x42, 0x43, 0x42, 0x41, 0x42, 0x3F, 0x3F, 0x3F, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 
   0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 
   0x37, 0x38, 0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x32, 
   0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 
   0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 
   0x2E, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 
   0x31, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x34, 0x34, 0x34, 
   0x36, 0x36, 0x36, 0x38, 0x38, 0x38, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3C, 0x3B, 0x3B, 0x3C, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 0x3C, 0x39, 0x3A, 0x39, 0x38, 0x38, 
   0x38, 0x38, 0x37, 0x38, 0x37, 0x36, 0x37, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 
   0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 
   0x38, 0x38, 0x39, 0x39, 0x39, 0x3B, 0x3B, 0x3B, 0x3E, 0x3E, 0x3E, 0x40, 0x40, 0x40, 0x41, 0x42, 
   0x41, 0x46, 0x44, 0x46, 0x44, 0x46, 0x44, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 
   0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4B, 0x4C, 0x4B, 0x4A, 0x4C, 0x4A, 0x4D, 
   0x4D, 0x4D, 0x51, 0x50, 0x51, 0x24, 0x21, 0x24, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x4A, 0x4B, 
   0x4A, 0x4D, 0x4E, 0x4D, 0x36, 0x34, 0x36, 0x31, 0x32, 0x31, 0x4C, 0x4C, 0x4C, 0x49, 0x49, 0x49, 
   0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x47, 0x46, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x46, 0x47, 
   0x46, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 
   0x4C, 0x4C, 0x4C, 0x4E, 0x4D, 0x4E, 0x4E, 0x4F, 0x4E, 0x50, 0x50, 0x50, 0x51, 0x51, 0x51, 0x50, 
   0x51, 0x50, 0x53, 0x53, 0x53, 0x41, 0x43, 0x41, 0x08, 0x09, 0x08, 0x1F, 0x1F, 0x1F, 0x4E, 0x4E, 
   0x4E, 0x49, 0x48, 0x49, 0x49, 0x48, 0x49, 0x4A, 0x4B, 0x4A, 0x33, 0x35, 0x33, 0x38, 0x38, 0x38, 
   0x4B, 0x4C, 0x4B, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 
   0x44, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x41, 0x42, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x30, 0x30, 0x30, 0x4D, 0x4C, 0x4D, 0x65, 0x64, 0x65, 0x47, 
   0x46, 0x47, 0x49, 0x4B, 0x49, 0x34, 0x35, 0x34, 0x26, 0x26, 0x26, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 
   0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 
   0x45, 0x47, 0x45, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x46, 0x46, 0x46, 0x45, 
   0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x43, 0x43, 0x43, 0x41, 0x42, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x40, 0x41, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x37, 0x35, 0x37, 0x27, 0x26, 0x27, 
   0x44, 0x43, 0x44, 0x39, 0x38, 0x39, 0x33, 0x32, 0x33, 0x33, 0x31, 0x33, 0x32, 0x31, 0x32, 0x32, 
   0x31, 0x32, 0x1C, 0x1C, 0x1C, 0x1F, 0x20, 0x1F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 
   0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x29, 0x28, 0x29, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 
   0x28, 0x28, 0x29, 0x28, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x28, 0x29, 0x28, 0x29, 0x2A, 0x29, 0x2B, 0x29, 0x2B, 0x2A, 
   0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x30, 0x2F, 0x30, 
   0x30, 0x2F, 0x30, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2D, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2C, 0x2E, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2C, 0x2B, 0x2C, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x27, 0x28, 0x27, 0x28, 0x28, 0x28, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 
   0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x28, 0x28, 0x28, 
   0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x40, 0x41, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3D, 0x3D, 
   0x3D, 0x3B, 0x3D, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3A, 0x3C, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 
   0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 
   0x33, 0x33, 0x32, 0x32, 0x32, 0x30, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 
   0x2E, 0x2D, 0x2E, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2E, 0x2D, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 
   0x31, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x36, 0x34, 
   0x36, 0x37, 0x36, 0x37, 0x38, 0x37, 0x39, 0x39, 0x39, 0x3B, 0x3B, 0x3B, 0x3D, 0x3B, 0x3D, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x38, 0x37, 
   0x38, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 
   0x36, 0x35, 0x36, 0x36, 0x37, 0x36, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x39, 
   0x39, 0x39, 0x39, 0x3A, 0x39, 0x3C, 0x3C, 0x3C, 0x3F, 0x3D, 0x3F, 0x40, 0x3F, 0x40, 0x42, 0x42, 
   0x42, 0x44, 0x45, 0x44, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 
   0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 
   0x4C, 0x4B, 0x4E, 0x4D, 0x4E, 0x45, 0x44, 0x45, 0x14, 0x14, 0x14, 0x0A, 0x0A, 0x0A, 0x42, 0x43, 
   0x42, 0x50, 0x51, 0x50, 0x3C, 0x3D, 0x3C, 0x19, 0x1A, 0x19, 0x4D, 0x4D, 0x4D, 0x4A, 0x4B, 0x4A, 
   0x48, 0x49, 0x48, 0x47, 0x48, 0x47, 0x46, 0x47, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 
   0x46, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x4B, 0x4B, 0x4B, 
   0x4C, 0x4D, 0x4C, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x50, 0x50, 0x50, 0x50, 0x51, 0x50, 0x4F, 
   0x51, 0x4F, 0x50, 0x50, 0x50, 0x4D, 0x4D, 0x4D, 0x30, 0x2F, 0x30, 0x17, 0x16, 0x17, 0x3A, 0x3A, 
   0x3A, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x4C, 0x4C, 0x4C, 0x3F, 0x40, 0x3F, 0x30, 0x2F, 0x30, 
   0x48, 0x49, 0x48, 0x47, 0x47, 0x47, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 
   0x43, 0x42, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x42, 0x44, 0x42, 0x42, 0x42, 0x42, 0x40, 0x41, 
   0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x41, 0x3F, 
   0x42, 0x43, 0x42, 0x3F, 0x40, 0x3F, 0x25, 0x25, 0x25, 0x43, 0x43, 0x43, 0x53, 0x52, 0x53, 0x46, 
   0x47, 0x46, 0x49, 0x4A, 0x49, 0x30, 0x32, 0x30, 0x3A, 0x3A, 0x3A, 0x49, 0x4A, 0x49, 0x48, 0x49, 
   0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 
   0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x46, 0x47, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x42, 0x44, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 
   0x43, 0x40, 0x41, 0x40, 0x3F, 0x3E, 0x3F, 0x3D, 0x3E, 0x3D, 0x34, 0x35, 0x34, 0x1A, 0x1B, 0x1A, 
   0x37, 0x36, 0x37, 0x37, 0x38, 0x37, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x34, 
   0x33, 0x34, 0x1E, 0x1E, 0x1E, 0x22, 0x21, 0x22, 0x31, 0x31, 0x31, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 
   0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 
   0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 
   0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2E, 0x2F, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 
   0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x30, 0x30, 0x30, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2D, 0x2E, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 
   0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2D, 0x2D, 0x2D, 
   0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x25, 0x26, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x25, 
   0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 0x28, 0x27, 
   0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x41, 0x3F, 0x41, 0x41, 0x41, 0x41, 0x42, 0x43, 0x42, 0x43, 
   0x43, 0x43, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 
   0x3E, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3A, 0x3A, 0x3A, 0x38, 0x37, 0x38, 0x36, 0x37, 0x36, 
   0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x32, 
   0x32, 0x32, 0x33, 0x31, 0x33, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2D, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x31, 
   0x30, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 
   0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3C, 0x3B, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x39, 0x3A, 0x39, 0x37, 0x37, 
   0x37, 0x35, 0x37, 0x35, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 
   0x36, 0x36, 0x36, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 
   0x39, 0x37, 0x3A, 0x3A, 0x3A, 0x3D, 0x3B, 0x3D, 0x40, 0x3E, 0x40, 0x41, 0x42, 0x41, 0x42, 0x43, 
   0x42, 0x45, 0x44, 0x45, 0x45, 0x46, 0x45, 0x47, 0x48, 0x47, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 
   0x48, 0x49, 0x48, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4C, 0x4B, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 
   0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x32, 0x31, 0x32, 0x00, 0x01, 0x00, 0x17, 0x15, 
   0x17, 0x4A, 0x48, 0x4A, 0x4B, 0x4A, 0x4B, 0x2D, 0x2C, 0x2D, 0x44, 0x44, 0x44, 0x4C, 0x4B, 0x4C, 
   0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x47, 
   0x47, 0x47, 0x48, 0x48, 0x48, 0x4A, 0x48, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x47, 
   0x48, 0x48, 0x48, 0x48, 0x47, 0x49, 0x47, 0x48, 0x49, 0x48, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 
   0x4D, 0x4C, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4F, 0x4F, 0x4F, 0x4F, 0x50, 0x4F, 0x4E, 
   0x4F, 0x4E, 0x4D, 0x4E, 0x4D, 0x4A, 0x4B, 0x4A, 0x39, 0x39, 0x39, 0x03, 0x03, 0x03, 0x13, 0x12, 
   0x13, 0x49, 0x48, 0x49, 0x48, 0x49, 0x48, 0x47, 0x48, 0x47, 0x4B, 0x4B, 0x4B, 0x35, 0x35, 0x35, 
   0x36, 0x36, 0x36, 0x47, 0x45, 0x47, 0x42, 0x43, 0x42, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x42, 0x43, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x44, 0x43, 0x41, 0x42, 0x41, 0x40, 0x41, 
   0x40, 0x40, 0x41, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x41, 0x40, 0x41, 
   0x40, 0x42, 0x40, 0x44, 0x45, 0x44, 0x3C, 0x3C, 0x3C, 0x4E, 0x4F, 0x4E, 0x47, 0x47, 0x47, 0x45, 
   0x46, 0x45, 0x33, 0x33, 0x33, 0x3B, 0x3A, 0x3B, 0x50, 0x4E, 0x50, 0x4B, 0x4B, 0x4B, 0x49, 0x49, 
   0x49, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x48, 0x4A, 0x48, 0x49, 0x4A, 0x49, 0x48, 0x49, 0x48, 
   0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x47, 
   0x47, 0x47, 0x45, 0x47, 0x45, 0x45, 0x45, 0x45, 0x42, 0x44, 0x42, 0x43, 0x42, 0x43, 0x42, 0x42, 
   0x42, 0x41, 0x40, 0x41, 0x3F, 0x3E, 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x35, 0x36, 0x35, 
   0x42, 0x42, 0x42, 0x36, 0x37, 0x36, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x32, 0x33, 0x32, 0x32, 
   0x33, 0x32, 0x19, 0x1B, 0x19, 0x23, 0x23, 0x23, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x2F, 0x2E, 
   0x2F, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x29, 0x2A, 0x29, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 
   0x28, 0x28, 0x29, 0x28, 0x28, 0x29, 0x28, 0x28, 0x29, 0x28, 0x28, 0x29, 0x28, 0x29, 0x28, 0x29, 
   0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2C, 
   0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 
   0x31, 0x31, 0x31, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x30, 0x31, 0x30, 0x2E, 0x2F, 0x2E, 0x2D, 
   0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2D, 0x2F, 
   0x2C, 0x2B, 0x2C, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x29, 0x27, 0x29, 0x27, 
   0x27, 0x27, 0x27, 0x26, 0x27, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x25, 0x24, 0x25, 0x24, 0x24, 
   0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x3E, 0x3F, 0x3E, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x3D, 0x3F, 
   0x3D, 0x3D, 0x3D, 0x3D, 0x3A, 0x3B, 0x3A, 0x38, 0x39, 0x38, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 
   0x35, 0x36, 0x35, 0x35, 0x34, 0x35, 0x34, 0x32, 0x34, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x31, 
   0x32, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 
   0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x30, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 
   0x30, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 
   0x38, 0x38, 0x38, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 
   0x3E, 0x3E, 0x3F, 0x3D, 0x3F, 0x3D, 0x3D, 0x3D, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x38, 0x37, 
   0x38, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 
   0x36, 0x37, 0x36, 0x37, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x3B, 
   0x39, 0x3B, 0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 0x40, 0x3F, 0x40, 0x42, 0x41, 0x42, 0x42, 0x43, 
   0x42, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 
   0x4A, 0x49, 0x4A, 0x4A, 0x49, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x13, 0x13, 0x13, 0x00, 0x00, 
   0x00, 0x30, 0x30, 0x30, 0x4F, 0x4F, 0x4F, 0x51, 0x51, 0x51, 0x18, 0x19, 0x18, 0x39, 0x3A, 0x39, 
   0x4F, 0x4F, 0x4F, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x47, 
   0x48, 0x47, 0x47, 0x48, 0x47, 0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 
   0x49, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x49, 0x4B, 0x49, 0x4C, 0x4C, 0x4C, 
   0x4D, 0x4E, 0x4D, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 0x4F, 0x4E, 0x4D, 
   0x4E, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x39, 0x38, 0x39, 0x0A, 0x08, 0x0A, 0x03, 0x02, 
   0x03, 0x3D, 0x3E, 0x3D, 0x4B, 0x4B, 0x4B, 0x47, 0x47, 0x47, 0x4B, 0x4A, 0x4B, 0x3C, 0x3C, 0x3C, 
   0x1B, 0x1C, 0x1B, 0x3D, 0x3F, 0x3D, 0x46, 0x45, 0x46, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x41, 0x41, 
   0x41, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x41, 0x3F, 0x41, 0x41, 0x41, 
   0x43, 0x41, 0x43, 0x50, 0x51, 0x50, 0x5D, 0x5F, 0x5D, 0x51, 0x51, 0x51, 0x49, 0x48, 0x49, 0x41, 
   0x41, 0x41, 0x1F, 0x1F, 0x1F, 0x38, 0x37, 0x38, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 
   0x48, 0x49, 0x48, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x47, 
   0x47, 0x47, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x41, 0x41, 0x41, 0x3D, 0x3E, 0x3D, 0x42, 0x41, 0x42, 0x4D, 0x4B, 0x4D, 0x4F, 0x4D, 0x4F, 
   0x41, 0x40, 0x41, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x30, 
   0x2F, 0x30, 0x1B, 0x1C, 0x1B, 0x2A, 0x2C, 0x2A, 0x32, 0x32, 0x32, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2C, 0x2A, 0x2C, 0x2B, 0x2A, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x27, 
   0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x28, 0x27, 0x28, 0x29, 0x28, 
   0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x2A, 0x2A, 0x2A, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 
   0x31, 0x31, 0x31, 0x34, 0x33, 0x34, 0x33, 0x32, 0x33, 0x30, 0x31, 0x30, 0x2E, 0x2F, 0x2E, 0x2D, 
   0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 
   0x2C, 0x2C, 0x2C, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x28, 0x2A, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x24, 0x24, 0x24, 0x25, 0x24, 
   0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x3E, 0x40, 0x3E, 0x3F, 0x3F, 0x3F, 0x42, 0x41, 0x42, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 
   0x3F, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 0x37, 0x38, 0x37, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 
   0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x31, 0x33, 0x31, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x30, 
   0x31, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x31, 0x33, 0x31, 0x30, 0x31, 
   0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 
   0x30, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x38, 0x37, 0x38, 
   0x3B, 0x39, 0x3B, 0x3C, 0x3D, 0x3C, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3D, 0x3D, 0x3D, 0x3A, 0x3B, 0x3A, 0x38, 0x3A, 0x38, 0x37, 0x37, 
   0x37, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 
   0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x3C, 0x3D, 0x3C, 0x3E, 0x40, 0x3E, 0x40, 0x42, 0x40, 0x43, 0x43, 0x43, 0x42, 0x44, 
   0x42, 0x44, 0x44, 0x44, 0x45, 0x46, 0x45, 0x47, 0x46, 0x47, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 
   0x49, 0x4A, 0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4C, 0x4B, 0x4B, 0x4C, 0x4B, 0x4C, 
   0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4A, 0x4B, 0x4A, 0x4E, 0x4E, 0x4E, 0x2E, 0x2D, 0x2E, 0x00, 0x00, 
   0x00, 0x16, 0x16, 0x16, 0x4C, 0x4D, 0x4C, 0x50, 0x52, 0x50, 0x35, 0x36, 0x35, 0x2E, 0x2E, 0x2E, 
   0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x47, 
   0x48, 0x47, 0x47, 0x49, 0x47, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 
   0x4B, 0x4A, 0x4A, 0x4A, 0x4B, 0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 
   0x4D, 0x4E, 0x4D, 0x4C, 0x4E, 0x4C, 0x4C, 0x4D, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4A, 
   0x4C, 0x4A, 0x4B, 0x4C, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x4C, 0x4A, 0x2E, 0x2E, 0x2E, 0x00, 0x00, 
   0x00, 0x1E, 0x1D, 0x1E, 0x46, 0x45, 0x46, 0x49, 0x49, 0x49, 0x45, 0x46, 0x45, 0x3E, 0x3F, 0x3E, 
   0x1B, 0x1B, 0x1B, 0x39, 0x39, 0x39, 0x4B, 0x4B, 0x4B, 0x45, 0x44, 0x45, 0x41, 0x42, 0x41, 0x42, 
   0x42, 0x42, 0x44, 0x42, 0x44, 0x42, 0x43, 0x42, 0x43, 0x44, 0x43, 0x42, 0x43, 0x42, 0x41, 0x41, 
   0x41, 0x41, 0x40, 0x41, 0x41, 0x40, 0x41, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 
   0x4B, 0x49, 0x4B, 0x5F, 0x5E, 0x5F, 0x6F, 0x6F, 0x6F, 0x54, 0x53, 0x54, 0x4B, 0x49, 0x4B, 0x37, 
   0x35, 0x37, 0x36, 0x36, 0x36, 0x45, 0x46, 0x45, 0x49, 0x49, 0x49, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x48, 0x49, 0x47, 0x48, 0x47, 0x46, 
   0x47, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x39, 0x3A, 0x39, 0x4B, 0x4A, 0x4B, 0x53, 0x53, 0x53, 
   0x38, 0x38, 0x38, 0x39, 0x37, 0x39, 0x36, 0x36, 0x36, 0x34, 0x36, 0x34, 0x39, 0x38, 0x39, 0x29, 
   0x28, 0x29, 0x27, 0x26, 0x27, 0x37, 0x35, 0x37, 0x32, 0x31, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x2F, 0x30, 0x2E, 0x2F, 0x2E, 0x2E, 0x2D, 0x2E, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x27, 
   0x26, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 
   0x28, 0x2B, 0x29, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2B, 0x2A, 
   0x2A, 0x2B, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x31, 0x30, 0x31, 
   0x32, 0x31, 0x32, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x30, 0x31, 0x30, 0x2F, 0x2E, 0x2F, 0x2E, 
   0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2F, 0x2D, 0x2D, 0x2F, 0x2D, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x2D, 0x2E, 0x2D, 
   0x2C, 0x2D, 0x2C, 0x2B, 0x2A, 0x2B, 0x2A, 0x28, 0x2A, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x27, 0x25, 0x27, 0x25, 0x25, 0x25, 0x24, 0x24, 
   0x24, 0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 
   0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x3F, 
   0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x40, 0x3F, 0x3D, 
   0x3F, 0x3D, 0x3D, 0x3D, 0x3B, 0x3A, 0x3B, 0x38, 0x38, 0x38, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x31, 0x30, 0x31, 0x32, 0x31, 0x33, 0x32, 
   0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x30, 0x31, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2E, 0x2F, 0x2E, 0x2E, 
   0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 
   0x2E, 0x31, 0x30, 0x31, 0x33, 0x33, 0x33, 0x36, 0x35, 0x36, 0x38, 0x37, 0x38, 0x39, 0x39, 0x39, 
   0x3B, 0x3A, 0x3B, 0x3E, 0x3E, 0x3E, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 
   0x41, 0x41, 0x40, 0x40, 0x40, 0x3C, 0x3D, 0x3C, 0x3C, 0x3B, 0x3C, 0x39, 0x39, 0x39, 0x36, 0x37, 
   0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x36, 0x37, 0x36, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x3B, 0x3A, 0x3D, 0x3E, 0x3D, 0x42, 0x41, 0x42, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x44, 0x44, 
   0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x47, 0x46, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 
   0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4D, 0x4C, 
   0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x42, 0x44, 0x42, 0x0F, 0x11, 
   0x0F, 0x05, 0x05, 0x05, 0x27, 0x28, 0x27, 0x47, 0x46, 0x47, 0x56, 0x57, 0x56, 0x2C, 0x2C, 0x2C, 
   0x17, 0x18, 0x17, 0x4E, 0x4E, 0x4E, 0x48, 0x47, 0x48, 0x47, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 
   0x47, 0x46, 0x49, 0x49, 0x49, 0x4D, 0x4A, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 
   0x4C, 0x4A, 0x4C, 0x4A, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4F, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 
   0x4E, 0x4E, 0x4E, 0x4D, 0x4D, 0x4D, 0x4C, 0x4C, 0x4C, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 
   0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x4C, 0x4D, 0x4C, 0x43, 0x42, 0x43, 0x0F, 0x11, 
   0x0F, 0x05, 0x04, 0x05, 0x16, 0x16, 0x16, 0x3B, 0x3B, 0x3B, 0x46, 0x46, 0x46, 0x42, 0x44, 0x42, 
   0x32, 0x33, 0x32, 0x3C, 0x3C, 0x3C, 0x47, 0x47, 0x47, 0x45, 0x47, 0x45, 0x43, 0x44, 0x43, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x43, 0x44, 0x45, 0x44, 0x45, 0x43, 0x43, 0x43, 0x42, 0x42, 
   0x42, 0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x48, 0x46, 0x48, 
   0x58, 0x58, 0x58, 0x6A, 0x68, 0x6A, 0x60, 0x60, 0x60, 0x4C, 0x4E, 0x4C, 0x3E, 0x3C, 0x3E, 0x30, 
   0x30, 0x30, 0x45, 0x47, 0x45, 0x4C, 0x4A, 0x4C, 0x4D, 0x4D, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 
   0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4C, 0x4A, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 
   0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x49, 0x49, 0x49, 0x47, 0x48, 0x47, 0x46, 
   0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x44, 0x45, 0x44, 0x42, 0x43, 0x42, 0x42, 0x42, 
   0x42, 0x41, 0x40, 0x41, 0x40, 0x3F, 0x40, 0x2F, 0x2E, 0x2F, 0x45, 0x44, 0x45, 0x48, 0x48, 0x48, 
   0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x36, 0x37, 0x36, 0x38, 0x38, 0x38, 0x33, 0x32, 0x33, 0x23, 
   0x24, 0x23, 0x2E, 0x2D, 0x2E, 0x2D, 0x2B, 0x2D, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2B, 0x2C, 
   0x2B, 0x2A, 0x2B, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x28, 0x28, 0x28, 0x27, 0x26, 0x27, 0x27, 
   0x26, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x29, 
   0x29, 0x2B, 0x2A, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2C, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 
   0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2E, 0x2D, 0x2E, 0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 
   0x32, 0x31, 0x32, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2D, 0x2F, 
   0x2D, 0x2C, 0x2D, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 0x28, 0x27, 0x28, 0x26, 0x27, 0x26, 0x27, 
   0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x25, 0x26, 0x25, 0x24, 0x24, 
   0x24, 0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 
   0x27, 0x25, 0x27, 0x27, 0x26, 0x27, 0x3D, 0x3E, 0x3D, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 
   0x3E, 0x3B, 0x3C, 0x3B, 0x39, 0x3A, 0x39, 0x36, 0x37, 0x36, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 
   0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x2F, 0x31, 0x2F, 0x31, 0x30, 0x31, 0x2D, 
   0x2E, 0x2D, 0x2E, 0x2F, 0x2E, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x33, 0x32, 0x32, 0x32, 
   0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2E, 0x2F, 0x2E, 0x2E, 
   0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x30, 0x2F, 
   0x30, 0x31, 0x30, 0x31, 0x32, 0x32, 0x32, 0x37, 0x36, 0x37, 0x39, 0x38, 0x39, 0x39, 0x3B, 0x39, 
   0x3C, 0x3D, 0x3C, 0x3F, 0x40, 0x3F, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x42, 
   0x41, 0x42, 0x41, 0x40, 0x41, 0x3F, 0x3E, 0x3F, 0x3B, 0x3B, 0x3B, 0x38, 0x3A, 0x38, 0x37, 0x37, 
   0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 0x3A, 0x39, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3D, 
   0x3B, 0x3D, 0x3E, 0x3D, 0x3E, 0x42, 0x41, 0x42, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 
   0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x48, 0x47, 0x48, 0x49, 0x49, 0x49, 
   0x49, 0x4A, 0x49, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 
   0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4A, 0x4B, 0x4A, 0x48, 0x49, 0x48, 0x4A, 0x4B, 0x4A, 0x41, 0x40, 
   0x41, 0x05, 0x05, 0x05, 0x00, 0x00, 0x00, 0x3A, 0x38, 0x3A, 0x50, 0x4F, 0x50, 0x3E, 0x3F, 0x3E, 
   0x25, 0x26, 0x25, 0x39, 0x3B, 0x39, 0x49, 0x4A, 0x49, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x47, 
   0x47, 0x47, 0x4A, 0x49, 0x4A, 0x4B, 0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 
   0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4D, 0x4E, 0x4D, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 
   0x4E, 0x4E, 0x4E, 0x4D, 0x4D, 0x4D, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 
   0x4A, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x4B, 0x4B, 0x4B, 0x46, 0x47, 0x46, 0x24, 0x25, 
   0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x29, 0x28, 0x48, 0x47, 0x48, 0x44, 0x43, 0x44, 
   0x46, 0x45, 0x46, 0x48, 0x48, 0x48, 0x42, 0x42, 0x42, 0x3A, 0x39, 0x3A, 0x44, 0x44, 0x44, 0x41, 
   0x42, 0x41, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 
   0x42, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x3D, 0x3D, 0x3D, 0x4A, 0x4B, 0x4A, 
   0x6A, 0x6B, 0x6A, 0x63, 0x65, 0x63, 0x4D, 0x4F, 0x4D, 0x43, 0x44, 0x43, 0x33, 0x34, 0x33, 0x43, 
   0x44, 0x43, 0x47, 0x46, 0x47, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 0x4D, 0x4C, 
   0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 
   0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4A, 0x4C, 0x4A, 0x49, 0x4A, 0x49, 0x48, 0x48, 0x48, 0x47, 
   0x46, 0x47, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x42, 0x42, 
   0x42, 0x41, 0x41, 0x41, 0x3D, 0x3D, 0x3D, 0x1E, 0x1F, 0x1E, 0x2F, 0x2F, 0x2F, 0x3F, 0x3E, 0x3F, 
   0x3A, 0x3B, 0x3A, 0x38, 0x3A, 0x38, 0x38, 0x3A, 0x38, 0x38, 0x37, 0x38, 0x25, 0x24, 0x25, 0x2D, 
   0x2D, 0x2D, 0x38, 0x36, 0x38, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x33, 0x31, 0x33, 0x31, 0x32, 
   0x31, 0x32, 0x32, 0x32, 0x31, 0x30, 0x31, 0x2E, 0x2F, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 
   0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 0x28, 0x27, 0x28, 0x27, 0x26, 0x27, 0x26, 
   0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x29, 0x2A, 
   0x29, 0x2B, 0x2C, 0x2B, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2A, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 
   0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x31, 0x30, 0x31, 
   0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x2F, 0x31, 0x2F, 0x31, 0x30, 0x31, 0x2E, 
   0x2F, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 
   0x2D, 0x2D, 0x2D, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x25, 0x26, 0x25, 0x24, 0x24, 
   0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 
   0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x40, 
   0x3E, 0x40, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x41, 0x3E, 0x41, 0x3E, 0x3E, 0x3E, 0x3D, 0x3D, 
   0x3D, 0x3C, 0x3C, 0x3C, 0x39, 0x39, 0x39, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 0x33, 0x32, 0x33, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 
   0x30, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x31, 0x30, 0x31, 0x33, 0x33, 0x33, 0x36, 0x36, 0x36, 0x39, 0x39, 0x39, 0x3B, 0x3C, 0x3B, 
   0x3D, 0x3E, 0x3D, 0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x41, 0x42, 0x3F, 0x3F, 0x3F, 0x3D, 0x3B, 0x3D, 0x3A, 0x3A, 0x3A, 0x38, 0x38, 
   0x38, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x39, 0x37, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3A, 0x3B, 
   0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 0x3E, 
   0x3C, 0x3E, 0x3E, 0x3E, 0x3E, 0x41, 0x42, 0x41, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x44, 
   0x45, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x49, 0x48, 
   0x49, 0x4A, 0x49, 0x4A, 0x4B, 0x4A, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 0x4C, 0x4D, 
   0x4D, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4A, 0x4C, 0x4A, 0x49, 0x4A, 0x48, 0x48, 0x48, 0x4D, 0x4D, 
   0x4D, 0x21, 0x20, 0x21, 0x01, 0x01, 0x01, 0x23, 0x24, 0x23, 0x4B, 0x4C, 0x4B, 0x4E, 0x4D, 0x4E, 
   0x4D, 0x4D, 0x4D, 0x1E, 0x1E, 0x1E, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x46, 0x47, 0x46, 0x48, 
   0x48, 0x48, 0x49, 0x49, 0x49, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 
   0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4E, 0x4C, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4F, 0x4F, 0x4F, 
   0x4E, 0x4F, 0x4E, 0x4C, 0x4D, 0x4C, 0x4C, 0x4B, 0x4C, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 0x48, 
   0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x4A, 0x49, 0x4A, 0x49, 0x4A, 0x49, 0x3F, 0x3F, 
   0x3F, 0x1E, 0x1E, 0x1E, 0x02, 0x02, 0x02, 0x14, 0x13, 0x14, 0x3F, 0x3E, 0x3F, 0x41, 0x42, 0x41, 
   0x47, 0x46, 0x47, 0x57, 0x57, 0x57, 0x50, 0x52, 0x50, 0x2D, 0x2D, 0x2D, 0x37, 0x38, 0x37, 0x43, 
   0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x3C, 0x3E, 0x3C, 0x51, 0x51, 0x51, 
   0x6B, 0x6C, 0x6B, 0x54, 0x54, 0x54, 0x4A, 0x49, 0x4A, 0x3A, 0x3B, 0x3A, 0x3F, 0x3F, 0x3F, 0x49, 
   0x48, 0x49, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4D, 
   0x4D, 0x4C, 0x4D, 0x4C, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 
   0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4A, 0x4A, 0x4A, 0x48, 0x48, 0x48, 0x47, 
   0x47, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x44, 0x44, 0x44, 0x43, 0x43, 
   0x43, 0x40, 0x40, 0x40, 0x36, 0x38, 0x36, 0x31, 0x32, 0x31, 0x39, 0x37, 0x39, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3B, 0x3C, 0x39, 0x39, 0x39, 0x3B, 0x3B, 0x3B, 0x2F, 0x2D, 0x2F, 0x1E, 0x1C, 0x1E, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x31, 0x30, 0x31, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 0x2C, 0x2C, 
   0x2B, 0x2B, 0x2B, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x2B, 0x2A, 
   0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x30, 0x2F, 
   0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 
   0x2D, 0x2E, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x27, 0x28, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x24, 0x24, 
   0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x23, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 
   0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3D, 0x3F, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 
   0x3C, 0x3C, 0x39, 0x3C, 0x39, 0x38, 0x39, 0x35, 0x35, 0x35, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 
   0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x31, 0x30, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x34, 0x33, 
   0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 
   0x33, 0x32, 0x33, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2D, 
   0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x30, 
   0x2F, 0x31, 0x31, 0x31, 0x33, 0x34, 0x33, 0x36, 0x37, 0x36, 0x3B, 0x3A, 0x3B, 0x3D, 0x3C, 0x3D, 
   0x3E, 0x3E, 0x3E, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 
   0x41, 0x41, 0x42, 0x41, 0x42, 0x3E, 0x3F, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x39, 0x39, 
   0x39, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x37, 0x39, 0x37, 0x3A, 0x3A, 0x3A, 0x3D, 0x3B, 0x3D, 
   0x3C, 0x3B, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3E, 
   0x3E, 0x3E, 0x3F, 0x41, 0x3F, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x45, 
   0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x48, 0x47, 0x49, 0x49, 0x49, 
   0x49, 0x4A, 0x49, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 
   0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4B, 0x4B, 0x4B, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x49, 0x49, 
   0x49, 0x46, 0x46, 0x46, 0x1C, 0x1C, 0x1C, 0x0E, 0x0E, 0x0E, 0x45, 0x45, 0x45, 0x49, 0x48, 0x49, 
   0x4C, 0x4C, 0x4C, 0x42, 0x42, 0x42, 0x11, 0x11, 0x11, 0x3D, 0x3E, 0x3D, 0x4A, 0x4B, 0x4A, 0x48, 
   0x49, 0x48, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 0x4D, 0x4B, 0x4D, 0x4C, 
   0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4F, 0x4F, 0x4E, 0x4F, 0x4E, 
   0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4B, 0x4C, 0x4B, 0x49, 0x4A, 0x49, 0x48, 0x49, 0x48, 0x46, 
   0x48, 0x46, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 
   0x47, 0x48, 0x47, 0x48, 0x30, 0x31, 0x30, 0x06, 0x06, 0x06, 0x23, 0x22, 0x23, 0x44, 0x44, 0x44, 
   0x37, 0x36, 0x37, 0x40, 0x41, 0x40, 0x45, 0x45, 0x45, 0x3F, 0x3F, 0x3F, 0x29, 0x29, 0x29, 0x37, 
   0x38, 0x37, 0x47, 0x46, 0x47, 0x41, 0x40, 0x41, 0x41, 0x40, 0x41, 0x42, 0x41, 0x42, 0x41, 0x40, 
   0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x45, 0x45, 0x45, 0x4B, 0x4C, 0x4B, 0x61, 0x62, 0x61, 
   0x51, 0x53, 0x51, 0x42, 0x42, 0x42, 0x2F, 0x2F, 0x2F, 0x3D, 0x3B, 0x3D, 0x44, 0x43, 0x44, 0x4A, 
   0x49, 0x4A, 0x4B, 0x4C, 0x4B, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 
   0x4D, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 0x4C, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 
   0x4D, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4B, 0x4B, 0x4B, 0x49, 0x4A, 0x49, 0x4A, 0x49, 0x4A, 0x47, 
   0x48, 0x47, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x44, 0x43, 
   0x44, 0x3E, 0x40, 0x3E, 0x25, 0x25, 0x25, 0x47, 0x46, 0x47, 0x54, 0x52, 0x54, 0x3D, 0x3C, 0x3D, 
   0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 0x3B, 0x3C, 0x3B, 0x26, 0x28, 0x26, 0x27, 0x26, 0x27, 0x38, 
   0x36, 0x38, 0x34, 0x33, 0x34, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 
   0x32, 0x2F, 0x31, 0x2F, 0x31, 0x30, 0x31, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 
   0x2C, 0x2A, 0x2C, 0x2B, 0x2B, 0x2B, 0x29, 0x2B, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x27, 
   0x27, 0x27, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x29, 0x28, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2C, 0x2A, 
   0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2E, 0x2E, 0x2E, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 
   0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x2E, 0x30, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x30, 
   0x2F, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 
   0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 0x29, 
   0x28, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x25, 
   0x26, 0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 
   0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3F, 
   0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 
   0x3B, 0x3A, 0x39, 0x3A, 0x37, 0x37, 0x37, 0x34, 0x34, 0x34, 0x33, 0x32, 0x33, 0x30, 0x31, 0x30, 
   0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x31, 0x2F, 0x31, 0x32, 0x31, 0x32, 0x33, 0x33, 0x33, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 
   0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x30, 
   0x31, 0x31, 0x32, 0x31, 0x33, 0x34, 0x33, 0x36, 0x38, 0x36, 0x39, 0x3A, 0x39, 0x3C, 0x3B, 0x3C, 
   0x3F, 0x3F, 0x3F, 0x41, 0x3F, 0x41, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x41, 0x40, 0x41, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3C, 0x3E, 0x3A, 0x3B, 
   0x3A, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 
   0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x40, 0x3F, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x44, 0x45, 0x44, 0x45, 0x45, 
   0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 
   0x4A, 0x49, 0x4A, 0x4A, 0x49, 0x4A, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x49, 0x4A, 0x49, 0x48, 0x49, 0x48, 0x48, 0x47, 0x48, 0x48, 0x48, 
   0x48, 0x49, 0x48, 0x49, 0x33, 0x33, 0x33, 0x01, 0x01, 0x01, 0x07, 0x07, 0x07, 0x3B, 0x3B, 0x3B, 
   0x4C, 0x4D, 0x4C, 0x49, 0x4A, 0x49, 0x26, 0x25, 0x26, 0x33, 0x33, 0x33, 0x4C, 0x4A, 0x4C, 0x4A, 
   0x49, 0x4A, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 
   0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 
   0x4E, 0x50, 0x4E, 0x4C, 0x4E, 0x4C, 0x4B, 0x4C, 0x4B, 0x4A, 0x4A, 0x4A, 0x48, 0x48, 0x48, 0x48, 
   0x47, 0x48, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 
   0x46, 0x48, 0x47, 0x48, 0x41, 0x42, 0x41, 0x07, 0x07, 0x07, 0x0E, 0x0F, 0x0E, 0x35, 0x34, 0x35, 
   0x18, 0x18, 0x18, 0x3B, 0x3B, 0x3B, 0x40, 0x40, 0x40, 0x43, 0x41, 0x43, 0x37, 0x38, 0x37, 0x27, 
   0x26, 0x27, 0x3C, 0x3B, 0x3C, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 
   0x3F, 0x42, 0x41, 0x42, 0x3F, 0x3E, 0x3F, 0x37, 0x39, 0x37, 0x5D, 0x5F, 0x5D, 0x5B, 0x5A, 0x5B, 
   0x47, 0x48, 0x47, 0x31, 0x2F, 0x31, 0x2E, 0x2E, 0x2E, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x4B, 
   0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 0x4C, 0x4B, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 
   0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 0x4C, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4D, 0x4D, 
   0x4E, 0x4D, 0x4E, 0x4B, 0x4C, 0x4B, 0x4A, 0x4B, 0x4A, 0x49, 0x4A, 0x49, 0x48, 0x49, 0x48, 0x48, 
   0x49, 0x48, 0x46, 0x47, 0x46, 0x44, 0x46, 0x44, 0x46, 0x44, 0x46, 0x43, 0x43, 0x43, 0x43, 0x44, 
   0x43, 0x3E, 0x3E, 0x3E, 0x27, 0x25, 0x27, 0x43, 0x42, 0x43, 0x44, 0x44, 0x44, 0x3B, 0x3D, 0x3B, 
   0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x38, 0x3A, 0x38, 0x1D, 0x1E, 0x1D, 0x34, 0x34, 0x34, 0x37, 
   0x38, 0x37, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 
   0x32, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x29, 0x2B, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x29, 0x28, 0x29, 0x28, 0x28, 0x29, 0x28, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2C, 0x2B, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 
   0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 
   0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 
   0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x30, 0x2F, 0x30, 
   0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 
   0x2D, 0x2E, 0x2D, 0x2D, 0x2C, 0x2D, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 
   0x2A, 0x2B, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x26, 
   0x27, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 
   0x27, 0x26, 0x27, 0x26, 0x25, 0x26, 0x3D, 0x3E, 0x3D, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3A, 0x3B, 
   0x3A, 0x38, 0x39, 0x38, 0x37, 0x37, 0x37, 0x33, 0x34, 0x33, 0x32, 0x32, 0x32, 0x30, 0x30, 0x30, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2D, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x31, 0x30, 0x31, 0x32, 0x31, 0x32, 0x32, 0x33, 0x32, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 
   0x31, 0x33, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x30, 0x2E, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 
   0x31, 0x32, 0x32, 0x32, 0x36, 0x34, 0x36, 0x37, 0x37, 0x37, 0x3A, 0x3A, 0x3A, 0x3D, 0x3C, 0x3D, 
   0x3F, 0x3E, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x40, 0x3F, 0x41, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x40, 0x40, 0x40, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3C, 0x3A, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3E, 0x3E, 0x3E, 0x40, 0x3E, 0x40, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 
   0x41, 0x40, 0x41, 0x42, 0x41, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x45, 0x45, 
   0x45, 0x46, 0x46, 0x46, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 
   0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4C, 0x4A, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 
   0x46, 0x48, 0x48, 0x48, 0x49, 0x4B, 0x49, 0x1C, 0x1E, 0x1C, 0x00, 0x00, 0x00, 0x22, 0x22, 0x22, 
   0x4A, 0x49, 0x4A, 0x49, 0x4A, 0x49, 0x51, 0x53, 0x51, 0x26, 0x27, 0x26, 0x25, 0x24, 0x25, 0x4F, 
   0x4E, 0x4F, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4D, 0x4D, 
   0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x50, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4B, 0x4C, 0x4B, 0x4A, 0x4A, 0x4A, 0x48, 0x48, 0x48, 0x47, 
   0x47, 0x47, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x45, 0x46, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x13, 0x13, 0x13, 0x10, 0x11, 0x10, 0x22, 0x24, 0x22, 
   0x02, 0x02, 0x02, 0x30, 0x31, 0x30, 0x40, 0x40, 0x40, 0x3E, 0x3E, 0x3E, 0x44, 0x43, 0x44, 0x25, 
   0x24, 0x25, 0x2B, 0x2A, 0x2B, 0x41, 0x42, 0x41, 0x40, 0x3E, 0x40, 0x3F, 0x3F, 0x3F, 0x3D, 0x3F, 
   0x3D, 0x41, 0x41, 0x41, 0x3F, 0x3F, 0x3F, 0x38, 0x38, 0x38, 0x67, 0x66, 0x67, 0x4D, 0x4E, 0x4D, 
   0x46, 0x48, 0x46, 0x25, 0x25, 0x25, 0x41, 0x41, 0x41, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4B, 0x4C, 0x4B, 0x4D, 0x4D, 
   0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4E, 0x4C, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 
   0x4C, 0x4C, 0x4C, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x47, 
   0x48, 0x47, 0x47, 0x46, 0x47, 0x46, 0x45, 0x46, 0x44, 0x44, 0x44, 0x43, 0x42, 0x43, 0x42, 0x42, 
   0x42, 0x47, 0x46, 0x47, 0x46, 0x44, 0x46, 0x43, 0x44, 0x43, 0x3E, 0x40, 0x3E, 0x3E, 0x3E, 0x3E, 
   0x3B, 0x3A, 0x3B, 0x3C, 0x3D, 0x3C, 0x31, 0x31, 0x31, 0x14, 0x14, 0x14, 0x26, 0x25, 0x26, 0x35, 
   0x33, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x33, 0x32, 0x33, 0x32, 0x31, 
   0x32, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2C, 0x2C, 
   0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2B, 0x2A, 0x2B, 0x2D, 0x2C, 0x2D, 0x2E, 0x2E, 0x2E, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 
   0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2B, 0x2D, 0x2B, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 
   0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x2F, 
   0x31, 0x2F, 0x30, 0x30, 0x30, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 
   0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2E, 0x2F, 0x2D, 0x2C, 0x2D, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 
   0x2B, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x27, 0x28, 0x27, 0x28, 0x28, 0x28, 0x27, 0x26, 
   0x27, 0x27, 0x26, 0x27, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 
   0x26, 0x27, 0x26, 0x27, 0x26, 0x27, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3C, 0x3E, 0x3C, 0x3B, 0x3C, 0x3B, 0x3A, 
   0x3B, 0x38, 0x38, 0x38, 0x36, 0x37, 0x36, 0x34, 0x34, 0x34, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x30, 0x30, 0x30, 0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 
   0x33, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x35, 0x33, 0x35, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x30, 0x31, 0x30, 0x31, 0x2F, 0x31, 0x2E, 0x2E, 0x2E, 0x2D, 
   0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x33, 0x33, 0x33, 0x34, 0x35, 0x34, 0x37, 0x37, 0x37, 0x3C, 0x3A, 0x3C, 0x3E, 0x3C, 0x3E, 
   0x3E, 0x3F, 0x3E, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3D, 0x3F, 0x3B, 0x3B, 
   0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3E, 0x3D, 0x3E, 
   0x3F, 0x3E, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x40, 0x41, 
   0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x46, 0x46, 
   0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 
   0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4B, 0x4A, 0x4B, 0x4A, 0x4C, 
   0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x48, 0x47, 
   0x48, 0x46, 0x47, 0x46, 0x49, 0x49, 0x49, 0x48, 0x47, 0x48, 0x2B, 0x2A, 0x2B, 0x00, 0x00, 0x00, 
   0x22, 0x23, 0x22, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x40, 0x40, 0x40, 0x28, 0x28, 0x28, 0x3E, 
   0x3F, 0x3E, 0x4E, 0x4D, 0x4E, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 
   0x4D, 0x4D, 0x4F, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x4E, 0x4E, 0x4E, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x49, 0x4A, 0x49, 0x47, 0x48, 0x47, 0x45, 
   0x47, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x46, 0x46, 0x46, 0x2C, 0x2A, 0x2C, 0x14, 0x14, 0x14, 0x28, 0x29, 0x28, 
   0x00, 0x00, 0x00, 0x1F, 0x1E, 0x1F, 0x3D, 0x3E, 0x3D, 0x3C, 0x3C, 0x3C, 0x3F, 0x3E, 0x3F, 0x38, 
   0x38, 0x38, 0x27, 0x26, 0x27, 0x37, 0x37, 0x37, 0x3E, 0x3E, 0x3E, 0x39, 0x39, 0x39, 0x3D, 0x3C, 
   0x3D, 0x3B, 0x3B, 0x3B, 0x45, 0x44, 0x45, 0x59, 0x59, 0x59, 0x54, 0x55, 0x54, 0x49, 0x4A, 0x49, 
   0x38, 0x37, 0x38, 0x3A, 0x39, 0x3A, 0x4D, 0x4E, 0x4D, 0x48, 0x49, 0x48, 0x4B, 0x4B, 0x4B, 0x4C, 
   0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4C, 0x4B, 
   0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 
   0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x48, 0x4A, 0x48, 0x49, 0x49, 0x49, 0x48, 
   0x47, 0x48, 0x46, 0x46, 0x46, 0x45, 0x44, 0x45, 0x42, 0x44, 0x42, 0x42, 0x43, 0x42, 0x3B, 0x3B, 
   0x3B, 0x44, 0x46, 0x44, 0x66, 0x67, 0x66, 0x4C, 0x4D, 0x4C, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x3C, 0x3E, 0x3B, 0x3D, 0x3B, 0x26, 0x26, 0x26, 0x2B, 0x2A, 0x2B, 0x37, 0x37, 0x37, 0x37, 
   0x36, 0x37, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x32, 0x32, 
   0x32, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 
   0x2A, 0x2C, 0x2B, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2F, 0x2E, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 
   0x2F, 0x30, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x30, 0x2F, 0x30, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 
   0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 
   0x2D, 0x2E, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 
   0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x28, 0x29, 0x28, 0x29, 0x28, 0x29, 0x27, 0x27, 
   0x27, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x28, 0x28, 0x28, 0x27, 0x26, 0x27, 0x3D, 0x3F, 0x3D, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3D, 0x3B, 0x3D, 0x3B, 0x3A, 
   0x3B, 0x38, 0x38, 0x38, 0x35, 0x36, 0x35, 0x33, 0x33, 0x33, 0x32, 0x31, 0x32, 0x30, 0x31, 0x30, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 
   0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x31, 0x30, 0x31, 0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 
   0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 
   0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2D, 
   0x2F, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x31, 0x30, 0x32, 0x31, 0x32, 0x31, 0x32, 
   0x31, 0x33, 0x34, 0x33, 0x35, 0x36, 0x35, 0x38, 0x39, 0x38, 0x3A, 0x3B, 0x3A, 0x3D, 0x3E, 0x3D, 
   0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3F, 0x3D, 0x3F, 0x3D, 0x3F, 0x3E, 0x3D, 0x3E, 0x3E, 
   0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 
   0x3B, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3C, 0x3E, 0x3C, 
   0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x40, 0x3E, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x40, 0x41, 
   0x41, 0x41, 0x42, 0x41, 0x42, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x43, 0x44, 0x43, 0x45, 0x46, 
   0x45, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 
   0x4A, 0x49, 0x4A, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4C, 
   0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x49, 0x4A, 0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x47, 
   0x47, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x4B, 0x4B, 0x4B, 0x4A, 0x49, 0x4A, 0x0C, 0x0D, 0x0C, 
   0x03, 0x03, 0x03, 0x3C, 0x3D, 0x3C, 0x4E, 0x4D, 0x4E, 0x52, 0x52, 0x52, 0x42, 0x43, 0x42, 0x1E, 
   0x1E, 0x1E, 0x54, 0x55, 0x54, 0x4D, 0x4D, 0x4D, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4D, 0x4D, 
   0x4D, 0x4D, 0x4E, 0x4D, 0x4D, 0x4E, 0x4D, 0x4C, 0x4E, 0x4C, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 
   0x4C, 0x4E, 0x4C, 0x4E, 0x4D, 0x4E, 0x4C, 0x4B, 0x4C, 0x49, 0x4A, 0x49, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x45, 0x46, 0x45, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x43, 0x43, 
   0x43, 0x44, 0x43, 0x44, 0x43, 0x42, 0x43, 0x3B, 0x3B, 0x3B, 0x1C, 0x1C, 0x1C, 0x1A, 0x1B, 0x1A, 
   0x02, 0x02, 0x02, 0x1B, 0x1C, 0x1B, 0x3C, 0x3E, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3C, 0x3D, 0x43, 
   0x42, 0x43, 0x33, 0x33, 0x33, 0x22, 0x23, 0x22, 0x45, 0x45, 0x45, 0x58, 0x58, 0x58, 0x56, 0x56, 
   0x56, 0x4C, 0x4C, 0x4C, 0x52, 0x50, 0x52, 0x66, 0x68, 0x66, 0x4E, 0x4E, 0x4E, 0x37, 0x38, 0x37, 
   0x23, 0x23, 0x23, 0x3F, 0x41, 0x3F, 0x47, 0x48, 0x47, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4C, 
   0x4B, 0x4C, 0x4B, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x49, 0x4A, 0x49, 0x4B, 0x4C, 0x4B, 0x4B, 0x4C, 
   0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4B, 0x4D, 0x4B, 0x4C, 0x4C, 0x4C, 0x4B, 0x4B, 0x4B, 
   0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 
   0x47, 0x47, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x41, 0x42, 0x41, 0x48, 0x49, 0x48, 0x50, 0x50, 
   0x50, 0x53, 0x54, 0x53, 0x65, 0x66, 0x65, 0x44, 0x45, 0x44, 0x3F, 0x40, 0x3F, 0x3D, 0x3E, 0x3D, 
   0x3D, 0x3E, 0x3D, 0x2C, 0x2B, 0x2C, 0x1C, 0x1B, 0x1C, 0x3A, 0x38, 0x3A, 0x39, 0x3A, 0x39, 0x37, 
   0x38, 0x37, 0x38, 0x37, 0x38, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x34, 0x34, 0x34, 0x33, 0x33, 
   0x33, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 
   0x2B, 0x2B, 0x2C, 0x2B, 0x2E, 0x2D, 0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x31, 0x30, 0x30, 0x2F, 0x30, 
   0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2B, 
   0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 
   0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2B, 0x2C, 0x2B, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 
   0x32, 0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x30, 
   0x2E, 0x2E, 0x2E, 0x2C, 0x2D, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 
   0x29, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 
   0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3F, 
   0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 
   0x39, 0x38, 0x38, 0x38, 0x35, 0x35, 0x35, 0x35, 0x33, 0x35, 0x33, 0x33, 0x33, 0x32, 0x31, 0x32, 
   0x30, 0x2F, 0x30, 0x2E, 0x2E, 0x2E, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x30, 0x30, 0x30, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x2F, 0x30, 0x2F, 
   0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x31, 0x2F, 0x32, 0x31, 0x32, 0x32, 0x32, 
   0x32, 0x34, 0x34, 0x34, 0x37, 0x36, 0x37, 0x38, 0x39, 0x38, 0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 
   0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3D, 
   0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 0x3A, 0x3B, 0x3A, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 
   0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x41, 0x41, 0x41, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x45, 0x44, 0x46, 0x46, 
   0x46, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 
   0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4C, 0x4B, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 
   0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 0x48, 0x47, 0x48, 0x48, 0x47, 
   0x48, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x4D, 0x4D, 0x4D, 0x3B, 0x3B, 0x3B, 
   0x00, 0x00, 0x00, 0x14, 0x13, 0x14, 0x52, 0x52, 0x52, 0x4D, 0x4E, 0x4D, 0x4D, 0x4E, 0x4D, 0x32, 
   0x30, 0x32, 0x2D, 0x2E, 0x2D, 0x4A, 0x4D, 0x4A, 0x4C, 0x4D, 0x4C, 0x4B, 0x4C, 0x4B, 0x4C, 0x4C, 
   0x4C, 0x4E, 0x4C, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 
   0x4E, 0x4D, 0x4E, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x49, 0x4A, 0x49, 0x47, 0x47, 0x47, 0x45, 
   0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x44, 0x45, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 
   0x42, 0x43, 0x42, 0x43, 0x41, 0x41, 0x41, 0x3F, 0x3F, 0x3F, 0x3C, 0x3C, 0x3C, 0x37, 0x37, 0x37, 
   0x0F, 0x10, 0x0F, 0x26, 0x28, 0x26, 0x41, 0x43, 0x41, 0x3D, 0x3B, 0x3D, 0x3B, 0x3B, 0x3B, 0x3C, 
   0x3C, 0x3C, 0x3F, 0x3D, 0x3F, 0x39, 0x3A, 0x39, 0x76, 0x75, 0x76, 0x91, 0x8F, 0x91, 0x8B, 0x8A, 
   0x8B, 0x84, 0x85, 0x84, 0x73, 0x74, 0x73, 0x54, 0x53, 0x54, 0x42, 0x41, 0x42, 0x2E, 0x2F, 0x2E, 
   0x46, 0x46, 0x46, 0x4B, 0x4A, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 
   0x4B, 0x4A, 0x4C, 0x4B, 0x4C, 0x49, 0x4A, 0x49, 0x48, 0x4A, 0x48, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 
   0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 
   0x4A, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x46, 
   0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 0x44, 0x45, 0x40, 0x40, 0x40, 0x52, 0x51, 0x52, 0x78, 0x76, 
   0x78, 0x6B, 0x6A, 0x6B, 0x46, 0x46, 0x46, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x3F, 0x3F, 0x3F, 
   0x40, 0x41, 0x40, 0x1F, 0x1F, 0x1F, 0x13, 0x13, 0x13, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x38, 
   0x39, 0x38, 0x39, 0x37, 0x39, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x34, 0x33, 
   0x34, 0x33, 0x33, 0x33, 0x32, 0x31, 0x32, 0x2F, 0x30, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2B, 0x2C, 0x2A, 0x2B, 0x2A, 0x29, 
   0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2B, 0x2B, 
   0x2B, 0x2C, 0x2C, 0x2C, 0x2E, 0x2D, 0x2E, 0x30, 0x2F, 0x30, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 
   0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 
   0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 
   0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x33, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x2F, 0x30, 0x2E, 0x2D, 0x2E, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2D, 
   0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x2B, 0x29, 0x2B, 0x29, 0x29, 0x29, 
   0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x3A, 0x39, 
   0x3A, 0x38, 0x37, 0x38, 0x35, 0x34, 0x35, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 
   0x31, 0x30, 0x31, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x30, 0x2F, 0x30, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x31, 0x32, 0x31, 
   0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x30, 0x2F, 0x30, 0x31, 0x30, 0x31, 0x31, 0x32, 0x31, 0x33, 0x32, 
   0x33, 0x35, 0x35, 0x35, 0x37, 0x38, 0x37, 0x3B, 0x39, 0x3B, 0x3C, 0x3C, 0x3C, 0x3D, 0x3F, 0x3D, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3E, 0x3D, 0x40, 0x3E, 0x40, 0x3D, 0x3C, 0x3D, 0x3B, 0x3B, 
   0x3B, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x3A, 0x39, 0x3A, 0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x40, 
   0x40, 0x40, 0x41, 0x41, 0x41, 0x41, 0x43, 0x41, 0x43, 0x44, 0x43, 0x47, 0x45, 0x47, 0x46, 0x46, 
   0x46, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 
   0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4B, 0x4A, 0x4C, 0x4C, 0x4C, 0x4C, 
   0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4A, 0x4B, 0x4A, 0x4A, 0x49, 0x4A, 0x48, 0x48, 0x48, 0x47, 0x47, 
   0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x4A, 0x49, 0x4B, 0x4C, 0x4B, 
   0x27, 0x29, 0x27, 0x00, 0x01, 0x00, 0x22, 0x23, 0x22, 0x49, 0x4B, 0x49, 0x53, 0x52, 0x53, 0x49, 
   0x49, 0x49, 0x0F, 0x0F, 0x0F, 0x43, 0x43, 0x43, 0x52, 0x54, 0x52, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 
   0x4C, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4E, 0x4D, 
   0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x49, 0x4A, 0x49, 0x48, 0x49, 0x48, 0x47, 
   0x47, 0x47, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 
   0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3A, 0x3A, 0x3A, 
   0x1E, 0x1C, 0x1E, 0x0C, 0x0C, 0x0C, 0x18, 0x16, 0x18, 0x2C, 0x2C, 0x2C, 0x3C, 0x3C, 0x3C, 0x3A, 
   0x3B, 0x3A, 0x3B, 0x3A, 0x3B, 0x4E, 0x4E, 0x4E, 0x75, 0x75, 0x75, 0x76, 0x75, 0x76, 0x76, 0x77, 
   0x76, 0x76, 0x76, 0x76, 0x62, 0x64, 0x62, 0x46, 0x47, 0x46, 0x25, 0x24, 0x25, 0x36, 0x34, 0x36, 
   0x48, 0x4A, 0x48, 0x4C, 0x4D, 0x4C, 0x4D, 0x4C, 0x4D, 0x4A, 0x4C, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 
   0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x49, 0x4B, 0x49, 0x49, 0x49, 0x49, 
   0x4A, 0x49, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 
   0x46, 0x48, 0x46, 0x46, 0x46, 0x42, 0x43, 0x42, 0x3D, 0x3C, 0x3D, 0x53, 0x52, 0x53, 0x73, 0x74, 
   0x73, 0x55, 0x57, 0x55, 0x3F, 0x3F, 0x3F, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x42, 0x44, 0x42, 0x24, 0x23, 0x24, 0x27, 0x28, 0x27, 0x3E, 0x3F, 0x3E, 0x3B, 0x3A, 0x3B, 0x3A, 
   0x39, 0x3A, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x34, 0x34, 
   0x34, 0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2B, 0x2A, 
   0x2B, 0x2D, 0x2C, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2D, 0x2D, 0x2D, 0x2B, 
   0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2B, 0x2C, 0x2B, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 
   0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 
   0x2E, 0x2F, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 
   0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 
   0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3C, 0x3B, 0x3C, 0x39, 0x39, 
   0x39, 0x37, 0x36, 0x37, 0x35, 0x34, 0x35, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 
   0x2F, 0x30, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x31, 0x30, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 
   0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 
   0x32, 0x31, 0x32, 0x32, 0x33, 0x32, 0x34, 0x33, 0x34, 0x31, 0x32, 0x31, 0x30, 0x30, 0x30, 0x2F, 
   0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x32, 0x31, 0x32, 0x31, 0x33, 
   0x31, 0x35, 0x36, 0x35, 0x39, 0x38, 0x39, 0x39, 0x3B, 0x39, 0x3B, 0x3C, 0x3B, 0x3D, 0x3D, 0x3D, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3B, 
   0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3F, 0x3D, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 
   0x3B, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 
   0x3E, 0x3F, 0x3E, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x41, 
   0x40, 0x41, 0x41, 0x41, 0x41, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x46, 0x47, 
   0x46, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 
   0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4C, 0x4B, 0x4C, 0x4C, 0x4D, 0x4C, 0x4D, 
   0x4D, 0x4D, 0x4C, 0x4C, 0x4C, 0x4A, 0x4B, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x4B, 0x4A, 
   0x51, 0x51, 0x51, 0x1D, 0x1D, 0x1D, 0x00, 0x00, 0x00, 0x39, 0x39, 0x39, 0x4F, 0x4F, 0x4F, 0x50, 
   0x4F, 0x50, 0x46, 0x46, 0x46, 0x2F, 0x2F, 0x2F, 0x47, 0x4A, 0x47, 0x4E, 0x4F, 0x4E, 0x4C, 0x4C, 
   0x4C, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x4D, 0x4C, 0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 
   0x4E, 0x4D, 0x4E, 0x4C, 0x4D, 0x4C, 0x4B, 0x4C, 0x4B, 0x49, 0x4A, 0x49, 0x48, 0x48, 0x48, 0x46, 
   0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x3E, 0x3F, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 
   0x2C, 0x2B, 0x2C, 0x02, 0x03, 0x02, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x36, 0x36, 0x36, 0x3A, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x40, 0x3F, 
   0x40, 0x41, 0x3F, 0x41, 0x40, 0x40, 0x40, 0x34, 0x34, 0x34, 0x31, 0x31, 0x31, 0x48, 0x49, 0x48, 
   0x49, 0x4A, 0x49, 0x4B, 0x4D, 0x4B, 0x4C, 0x4C, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 0x48, 0x4A, 0x48, 0x4B, 0x4A, 0x4B, 0x4B, 0x4C, 
   0x4B, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 
   0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x48, 0x47, 0x48, 0x46, 
   0x47, 0x46, 0x45, 0x46, 0x45, 0x44, 0x42, 0x44, 0x31, 0x32, 0x31, 0x4D, 0x4E, 0x4D, 0x4F, 0x50, 
   0x4F, 0x3F, 0x3F, 0x3F, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x42, 0x41, 0x42, 
   0x2D, 0x2D, 0x2D, 0x2E, 0x2F, 0x2E, 0x43, 0x41, 0x43, 0x3F, 0x3D, 0x3F, 0x3C, 0x3B, 0x3C, 0x3A, 
   0x39, 0x3A, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x34, 0x34, 
   0x34, 0x33, 0x34, 0x33, 0x32, 0x32, 0x32, 0x30, 0x31, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 
   0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x28, 0x2A, 0x29, 0x2B, 
   0x29, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x29, 0x2B, 0x29, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x28, 0x28, 
   0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 
   0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 
   0x2D, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 
   0x2A, 0x2A, 0x2A, 0x2B, 0x29, 0x2B, 0x3E, 0x3D, 0x3E, 0x3F, 0x3D, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 
   0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x39, 0x39, 
   0x39, 0x36, 0x37, 0x36, 0x35, 0x34, 0x35, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 
   0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2D, 0x2E, 0x2E, 
   0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x30, 0x2F, 0x30, 0x30, 0x31, 0x30, 0x31, 0x32, 0x31, 0x31, 0x32, 
   0x31, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x32, 0x31, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x33, 0x32, 
   0x33, 0x35, 0x35, 0x35, 0x37, 0x37, 0x37, 0x3A, 0x39, 0x3A, 0x3C, 0x3C, 0x3C, 0x3D, 0x3E, 0x3D, 
   0x40, 0x3E, 0x40, 0x3E, 0x3E, 0x3E, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 
   0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3B, 0x3B, 
   0x3B, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 
   0x40, 0x3E, 0x40, 0x40, 0x3F, 0x40, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 
   0x40, 0x40, 0x41, 0x41, 0x41, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x47, 
   0x45, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 
   0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4C, 0x4B, 0x4C, 0x4C, 
   0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 0x4A, 0x48, 0x48, 0x48, 0x47, 0x47, 
   0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x4B, 0x4A, 
   0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x24, 0x23, 0x24, 0x02, 0x02, 0x02, 0x2B, 0x2A, 0x2B, 0x56, 
   0x55, 0x56, 0x56, 0x54, 0x56, 0x3B, 0x3C, 0x3B, 0x30, 0x31, 0x30, 0x43, 0x44, 0x43, 0x4C, 0x4E, 
   0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 
   0x4D, 0x4D, 0x4D, 0x4A, 0x4C, 0x4A, 0x4B, 0x4C, 0x4B, 0x49, 0x4A, 0x49, 0x48, 0x48, 0x48, 0x47, 
   0x47, 0x47, 0x45, 0x46, 0x45, 0x44, 0x45, 0x44, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x3F, 0x3F, 0x3F, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 
   0x3B, 0x3B, 0x3B, 0x31, 0x32, 0x31, 0x25, 0x25, 0x25, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x25, 
   0x25, 0x25, 0x43, 0x42, 0x43, 0x3C, 0x3D, 0x3C, 0x3E, 0x3C, 0x3E, 0x3E, 0x3E, 0x3E, 0x41, 0x3F, 
   0x41, 0x3B, 0x3B, 0x3B, 0x18, 0x18, 0x18, 0x37, 0x38, 0x37, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 
   0x4B, 0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 
   0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x48, 0x4A, 0x48, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4C, 0x4C, 
   0x4C, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 
   0x4A, 0x49, 0x4A, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x44, 
   0x47, 0x44, 0x41, 0x41, 0x41, 0x4B, 0x4B, 0x4B, 0x63, 0x64, 0x63, 0x53, 0x56, 0x53, 0x3F, 0x40, 
   0x3F, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x43, 0x44, 0x43, 0x45, 0x46, 0x45, 0x3A, 0x39, 0x3A, 
   0x29, 0x28, 0x29, 0x3E, 0x3D, 0x3E, 0x40, 0x3E, 0x40, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x38, 
   0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x34, 0x34, 
   0x34, 0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 
   0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 
   0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2C, 0x2A, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2E, 0x2D, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 
   0x31, 0x30, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2C, 0x2D, 0x2B, 
   0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x28, 
   0x29, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x30, 0x31, 0x30, 
   0x2F, 0x2F, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 
   0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x40, 0x3F, 0x40, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3C, 0x3B, 0x3C, 0x39, 0x39, 
   0x39, 0x37, 0x36, 0x37, 0x35, 0x34, 0x35, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x31, 0x31, 0x31, 
   0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x32, 0x31, 0x32, 0x31, 0x31, 
   0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x30, 0x31, 0x30, 
   0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x32, 0x30, 0x32, 0x32, 0x32, 
   0x32, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 
   0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3E, 0x3D, 0x3E, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 
   0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x40, 
   0x40, 0x40, 0x41, 0x41, 0x41, 0x41, 0x43, 0x41, 0x44, 0x44, 0x44, 0x45, 0x46, 0x45, 0x46, 0x46, 
   0x46, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 
   0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x49, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x47, 
   0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x4B, 0x4A, 
   0x4B, 0x4C, 0x4B, 0x4F, 0x4F, 0x4F, 0x49, 0x48, 0x49, 0x0B, 0x0C, 0x0B, 0x09, 0x09, 0x09, 0x43, 
   0x43, 0x43, 0x4E, 0x4E, 0x4E, 0x55, 0x55, 0x55, 0x39, 0x3B, 0x39, 0x22, 0x23, 0x22, 0x53, 0x54, 
   0x53, 0x4C, 0x4C, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 0x4D, 0x4B, 0x4D, 0x4D, 0x4D, 
   0x4B, 0x4D, 0x4B, 0x4B, 0x4C, 0x4B, 0x4A, 0x4B, 0x4A, 0x49, 0x4A, 0x49, 0x48, 0x48, 0x48, 0x47, 
   0x47, 0x47, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 
   0x42, 0x40, 0x42, 0x40, 0x42, 0x41, 0x42, 0x40, 0x3F, 0x40, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x40, 0x3E, 0x40, 0x3F, 0x3E, 0x3F, 0x1A, 0x1B, 0x1A, 0x00, 0x00, 0x00, 0x08, 
   0x09, 0x08, 0x27, 0x29, 0x27, 0x3B, 0x3A, 0x3B, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x2D, 0x2C, 
   0x2D, 0x30, 0x2F, 0x30, 0x11, 0x10, 0x11, 0x43, 0x45, 0x43, 0x4A, 0x4C, 0x4A, 0x49, 0x49, 0x49, 
   0x4B, 0x4C, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 
   0x4A, 0x4A, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4C, 0x4B, 0x4C, 0x4A, 0x4D, 
   0x4A, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4A, 0x4C, 0x4A, 
   0x48, 0x4A, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x47, 
   0x47, 0x47, 0x4B, 0x4D, 0x4B, 0x58, 0x59, 0x58, 0x74, 0x73, 0x74, 0x4A, 0x4B, 0x4A, 0x3F, 0x3F, 
   0x3F, 0x41, 0x40, 0x41, 0x40, 0x42, 0x40, 0x44, 0x43, 0x44, 0x35, 0x34, 0x35, 0x32, 0x32, 0x32, 
   0x3E, 0x3E, 0x3E, 0x40, 0x3E, 0x40, 0x3D, 0x3C, 0x3D, 0x3B, 0x3C, 0x3B, 0x39, 0x39, 0x39, 0x38, 
   0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x36, 0x37, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x33, 
   0x35, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2E, 0x2F, 0x2E, 
   0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2C, 0x2B, 
   0x2C, 0x2C, 0x2D, 0x2C, 0x2E, 0x2D, 0x2E, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 
   0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 0x2C, 0x2C, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 0x29, 0x29, 0x28, 0x28, 
   0x28, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2E, 0x2D, 0x2E, 
   0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 
   0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 0x2B, 0x2A, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 
   0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x3D, 0x3E, 0x3D, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3D, 0x3D, 0x3D, 0x3A, 0x3A, 0x3A, 0x38, 0x39, 
   0x38, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 
   0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x32, 0x31, 0x31, 0x32, 0x31, 0x30, 0x30, 0x30, 0x2E, 0x30, 0x2E, 0x31, 0x31, 0x31, 0x33, 0x31, 
   0x33, 0x34, 0x34, 0x34, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x3B, 0x3C, 0x3B, 0x3D, 0x3D, 0x3D, 
   0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 
   0x3D, 0x3C, 0x3D, 0x3D, 0x3C, 0x3D, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 
   0x3F, 0x3E, 0x40, 0x41, 0x40, 0x41, 0x42, 0x41, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x46, 0x45, 
   0x46, 0x46, 0x46, 0x46, 0x47, 0x48, 0x47, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x4B, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 
   0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 0x47, 0x49, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x4B, 0x4A, 
   0x4B, 0x4B, 0x4B, 0x4D, 0x4C, 0x4D, 0x50, 0x51, 0x50, 0x35, 0x36, 0x35, 0x00, 0x00, 0x00, 0x1F, 
   0x1F, 0x1F, 0x55, 0x55, 0x55, 0x4F, 0x50, 0x4F, 0x4E, 0x4F, 0x4E, 0x31, 0x30, 0x31, 0x32, 0x31, 
   0x32, 0x4C, 0x4C, 0x4C, 0x49, 0x4B, 0x49, 0x4B, 0x4B, 0x4B, 0x4A, 0x4C, 0x4A, 0x4B, 0x4C, 0x4B, 
   0x4B, 0x4C, 0x4B, 0x4B, 0x4C, 0x4B, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x46, 
   0x47, 0x46, 0x45, 0x46, 0x45, 0x43, 0x44, 0x43, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 
   0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x1F, 0x20, 0x1F, 0x00, 
   0x01, 0x00, 0x00, 0x00, 0x00, 0x28, 0x27, 0x28, 0x43, 0x44, 0x43, 0x37, 0x39, 0x37, 0x2F, 0x2E, 
   0x2F, 0x3C, 0x3C, 0x3C, 0x34, 0x33, 0x34, 0x3C, 0x3B, 0x3C, 0x47, 0x48, 0x47, 0x4A, 0x49, 0x4A, 
   0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4C, 0x4B, 0x4C, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 
   0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 
   0x4D, 0x4E, 0x4E, 0x4E, 0x4D, 0x4F, 0x4D, 0x4E, 0x4E, 0x4E, 0x4D, 0x4D, 0x4D, 0x4C, 0x4C, 0x4C, 
   0x4A, 0x4B, 0x4A, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x3B, 
   0x3C, 0x3B, 0x40, 0x42, 0x40, 0x69, 0x69, 0x69, 0x4E, 0x51, 0x4E, 0x40, 0x40, 0x40, 0x41, 0x41, 
   0x41, 0x3F, 0x40, 0x3F, 0x41, 0x40, 0x41, 0x3B, 0x3C, 0x3B, 0x20, 0x20, 0x20, 0x35, 0x35, 0x35, 
   0x3B, 0x3D, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3A, 0x3B, 0x39, 0x38, 0x39, 0x36, 
   0x37, 0x36, 0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 0x34, 0x36, 0x34, 0x35, 0x34, 0x35, 0x33, 0x32, 
   0x33, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 
   0x2D, 0x2E, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 
   0x2D, 0x2E, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2C, 0x2C, 0x2C, 0x2B, 0x2A, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2C, 0x2A, 0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x28, 0x28, 
   0x28, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2B, 0x2A, 0x2B, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 
   0x32, 0x32, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 
   0x31, 0x31, 0x30, 0x31, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x30, 0x31, 0x30, 
   0x2E, 0x2E, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x29, 0x2A, 0x29, 0x2B, 0x29, 
   0x2B, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2B, 0x29, 0x2B, 
   0x29, 0x2A, 0x29, 0x2C, 0x2B, 0x2C, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x40, 
   0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3D, 0x3E, 0x3D, 0x3C, 0x3B, 0x3C, 0x3B, 0x3A, 0x3B, 0x37, 0x38, 
   0x37, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 
   0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x30, 
   0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x31, 0x2F, 0x32, 0x31, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x32, 0x33, 0x32, 0x32, 
   0x32, 0x32, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x32, 0x31, 0x32, 0x31, 0x33, 
   0x31, 0x34, 0x33, 0x34, 0x36, 0x36, 0x36, 0x38, 0x38, 0x38, 0x3B, 0x3A, 0x3B, 0x3B, 0x3C, 0x3B, 
   0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3B, 
   0x3C, 0x3A, 0x3C, 0x3A, 0x3A, 0x3B, 0x3A, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x39, 0x3B, 0x39, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3E, 
   0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x42, 0x41, 0x42, 0x43, 0x42, 0x43, 0x43, 0x44, 0x43, 0x45, 0x45, 
   0x45, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x49, 0x48, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x4A, 0x48, 
   0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 
   0x46, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x4A, 0x49, 
   0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4A, 0x49, 0x4A, 0x1E, 0x1F, 0x1E, 0x07, 
   0x07, 0x07, 0x32, 0x31, 0x32, 0x4A, 0x4C, 0x4A, 0x50, 0x51, 0x50, 0x46, 0x48, 0x46, 0x09, 0x09, 
   0x09, 0x46, 0x46, 0x46, 0x4F, 0x4F, 0x4F, 0x49, 0x4B, 0x49, 0x4C, 0x4B, 0x4C, 0x4A, 0x4B, 0x4A, 
   0x4B, 0x4B, 0x4B, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x48, 
   0x47, 0x48, 0x46, 0x47, 0x46, 0x44, 0x45, 0x44, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x40, 0x42, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x41, 0x40, 0x41, 0x3B, 0x3B, 0x3B, 0x0E, 
   0x0E, 0x0E, 0x00, 0x00, 0x00, 0x0C, 0x0D, 0x0C, 0x3C, 0x3D, 0x3C, 0x33, 0x33, 0x33, 0x3E, 0x3E, 
   0x3E, 0x3E, 0x3F, 0x3E, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x49, 0x49, 0x49, 
   0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4A, 0x4C, 0x4A, 0x4B, 0x4A, 0x4B, 0x4A, 0x4B, 0x4A, 0x4A, 
   0x4B, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 0x4D, 0x4B, 0x4E, 0x4D, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4C, 0x4D, 0x4C, 
   0x4B, 0x4C, 0x4B, 0x49, 0x4A, 0x49, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x4A, 0x4B, 0x4A, 0x44, 
   0x44, 0x44, 0x43, 0x43, 0x43, 0x62, 0x62, 0x62, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x3F, 0x41, 
   0x3F, 0x3F, 0x40, 0x3F, 0x41, 0x41, 0x41, 0x2F, 0x2E, 0x2F, 0x16, 0x15, 0x16, 0x3C, 0x3D, 0x3C, 
   0x3E, 0x3E, 0x3E, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3A, 0x39, 0x3A, 0x39, 0x38, 0x39, 0x36, 
   0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x31, 0x33, 
   0x31, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 
   0x2F, 0x2F, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2B, 0x2D, 0x2D, 0x2B, 
   0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x30, 0x2F, 0x30, 0x31, 0x2F, 0x31, 0x2F, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x29, 0x28, 
   0x29, 0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2E, 0x2D, 
   0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 
   0x32, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x2F, 0x31, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 
   0x2F, 0x2F, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 
   0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 
   0x29, 0x27, 0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x2B, 0x29, 0x2B, 0x29, 0x29, 0x29, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x3F, 0x40, 0x3D, 0x3E, 0x3D, 0x3C, 0x3E, 0x3C, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x38, 0x38, 
   0x38, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 
   0x31, 0x30, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 
   0x31, 0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x32, 
   0x33, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x34, 0x33, 0x34, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x32, 0x33, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x32, 0x32, 0x32, 0x33, 0x33, 
   0x33, 0x35, 0x34, 0x35, 0x36, 0x36, 0x36, 0x38, 0x37, 0x38, 0x39, 0x39, 0x39, 0x3B, 0x3B, 0x3B, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 
   0x3C, 0x3A, 0x3C, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3D, 
   0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x40, 0x3E, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 
   0x43, 0x44, 0x45, 0x44, 0x46, 0x47, 0x46, 0x49, 0x48, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 
   0x4A, 0x4B, 0x4A, 0x48, 0x4A, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 
   0x48, 0x47, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 
   0x46, 0x46, 0x47, 0x46, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 
   0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4C, 0x4B, 0x50, 0x51, 0x50, 0x12, 
   0x13, 0x12, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x51, 0x51, 0x51, 0x4D, 0x4E, 0x4D, 0x37, 0x38, 
   0x37, 0x2D, 0x2F, 0x2D, 0x4D, 0x4E, 0x4D, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 0x47, 0x49, 0x47, 0x48, 0x48, 0x48, 0x48, 
   0x47, 0x48, 0x47, 0x46, 0x47, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 
   0x44, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x3F, 0x41, 0x3F, 0x40, 0x40, 0x40, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x3D, 0x3D, 0x3D, 0x3A, 
   0x3A, 0x3A, 0x23, 0x21, 0x23, 0x09, 0x0A, 0x09, 0x3D, 0x3D, 0x3D, 0x44, 0x43, 0x44, 0x42, 0x44, 
   0x42, 0x40, 0x42, 0x40, 0x44, 0x44, 0x44, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 
   0x4A, 0x4A, 0x4A, 0x4A, 0x4C, 0x4A, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4C, 0x4B, 0x4A, 0x4C, 0x4A, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x4C, 0x4C, 0x4C, 0x4A, 0x4A, 0x4A, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x4E, 0x50, 0x4E, 0x6B, 
   0x6B, 0x6B, 0x63, 0x63, 0x63, 0x47, 0x46, 0x47, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 0x41, 0x43, 
   0x41, 0x40, 0x40, 0x40, 0x45, 0x44, 0x45, 0x28, 0x27, 0x28, 0x18, 0x1A, 0x18, 0x3A, 0x3A, 0x3A, 
   0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 0x37, 0x36, 0x37, 0x36, 
   0x35, 0x36, 0x34, 0x35, 0x34, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x33, 0x32, 
   0x33, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 
   0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 
   0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2A, 0x2B, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x28, 0x28, 
   0x28, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x2B, 0x2A, 0x2C, 0x2C, 0x2C, 0x2D, 0x2E, 0x2D, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 
   0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 0x31, 
   0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x30, 0x2F, 0x30, 
   0x2E, 0x2F, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x3E, 0x3F, 0x3E, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 
   0x3E, 0x3E, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3A, 0x3B, 0x3A, 0x38, 0x39, 0x38, 0x37, 0x37, 
   0x37, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x32, 0x31, 0x33, 0x31, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 
   0x32, 0x33, 0x32, 0x33, 0x31, 0x33, 0x31, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 
   0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x34, 
   0x32, 0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x33, 0x31, 0x35, 0x33, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x37, 0x38, 0x37, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 
   0x3C, 0x3B, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3C, 
   0x3E, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 0x3E, 0x3E, 0x3E, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3C, 
   0x3B, 0x3C, 0x3D, 0x3C, 0x3D, 0x3E, 0x3E, 0x3E, 0x41, 0x40, 0x41, 0x42, 0x42, 0x42, 0x42, 0x43, 
   0x42, 0x44, 0x44, 0x44, 0x46, 0x47, 0x46, 0x48, 0x49, 0x48, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 
   0x48, 0x4A, 0x48, 0x4A, 0x49, 0x4A, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x48, 0x47, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x47, 0x46, 0x47, 0x45, 0x46, 0x45, 0x46, 0x46, 
   0x46, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x49, 0x48, 
   0x48, 0x49, 0x48, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4E, 0x4E, 0x4E, 0x39, 
   0x38, 0x39, 0x06, 0x06, 0x06, 0x16, 0x16, 0x16, 0x43, 0x42, 0x43, 0x4E, 0x4E, 0x4E, 0x53, 0x54, 
   0x53, 0x22, 0x23, 0x22, 0x36, 0x36, 0x36, 0x4D, 0x4E, 0x4D, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 
   0x48, 0x49, 0x48, 0x4A, 0x49, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x47, 
   0x48, 0x47, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 
   0x45, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x44, 0x42, 0x44, 0x42, 0x41, 0x42, 
   0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x44, 
   0x44, 0x44, 0x3B, 0x3B, 0x3B, 0x2A, 0x2C, 0x2A, 0x48, 0x48, 0x48, 0x3A, 0x39, 0x3A, 0x40, 0x40, 
   0x40, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 0x44, 0x46, 0x44, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 
   0x47, 0x49, 0x47, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 
   0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4F, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 
   0x4C, 0x4C, 0x4C, 0x49, 0x4B, 0x49, 0x46, 0x46, 0x46, 0x4F, 0x4F, 0x4F, 0x6C, 0x6C, 0x6C, 0x7B, 
   0x79, 0x7B, 0x62, 0x62, 0x62, 0x45, 0x45, 0x45, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x40, 0x40, 0x40, 0x2C, 0x2C, 0x2C, 0x33, 0x31, 0x33, 0x3B, 0x3D, 0x3B, 
   0x3A, 0x3B, 0x3A, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x37, 0x38, 0x37, 0x35, 0x36, 0x35, 0x36, 
   0x35, 0x36, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 
   0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x31, 0x33, 0x31, 0x31, 0x31, 
   0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2C, 0x2C, 0x2C, 
   0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x29, 0x2A, 0x29, 0x2A, 
   0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 
   0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2B, 0x2A, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 
   0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 
   0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x31, 
   0x32, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 
   0x2E, 0x2F, 0x2E, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x31, 0x2F, 0x31, 0x2E, 
   0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 
   0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 
   0x3E, 0x3E, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3A, 0x3C, 0x39, 0x39, 0x39, 0x37, 0x37, 
   0x37, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x33, 
   0x32, 0x33, 0x34, 0x32, 0x34, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 
   0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x34, 0x33, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x35, 0x34, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x3A, 0x3A, 0x3A, 
   0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3E, 0x3D, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 
   0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3C, 0x3D, 
   0x3C, 0x3B, 0x3C, 0x3B, 0x3D, 0x3B, 0x3D, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x37, 0x38, 0x37, 
   0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x3B, 0x39, 0x3E, 0x3C, 0x3E, 0x40, 0x3E, 0x40, 0x40, 0x40, 0x40, 0x42, 0x43, 
   0x42, 0x45, 0x45, 0x45, 0x47, 0x47, 0x47, 0x48, 0x49, 0x48, 0x49, 0x4A, 0x49, 0x4B, 0x4A, 0x4B, 
   0x4A, 0x49, 0x4A, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x47, 
   0x47, 0x47, 0x45, 0x47, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4E, 
   0x4E, 0x4E, 0x34, 0x33, 0x34, 0x00, 0x00, 0x00, 0x27, 0x26, 0x27, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 
   0x4E, 0x43, 0x41, 0x43, 0x26, 0x28, 0x26, 0x42, 0x43, 0x42, 0x4C, 0x4B, 0x4C, 0x48, 0x47, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 
   0x48, 0x47, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x47, 0x46, 0x47, 0x45, 0x46, 0x45, 0x46, 0x46, 
   0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x42, 0x43, 0x42, 
   0x42, 0x41, 0x42, 0x40, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 
   0x40, 0x40, 0x41, 0x42, 0x41, 0x3D, 0x3C, 0x3D, 0x42, 0x44, 0x42, 0x3F, 0x40, 0x3F, 0x43, 0x42, 
   0x43, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 
   0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x4A, 0x4B, 0x4A, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4D, 
   0x4D, 0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4C, 0x4D, 0x4C, 
   0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x46, 0x46, 0x46, 0x43, 0x43, 0x43, 0x7B, 0x7C, 0x7B, 0x67, 
   0x66, 0x67, 0x46, 0x46, 0x46, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x40, 0x40, 0x40, 0x26, 0x26, 0x26, 0x2D, 0x2E, 0x2D, 0x3C, 0x3D, 0x3C, 0x3B, 0x3A, 0x3B, 
   0x39, 0x3A, 0x39, 0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 
   0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x2A, 0x29, 0x2B, 0x2A, 
   0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 
   0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 
   0x33, 0x33, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 
   0x33, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x31, 0x32, 0x31, 0x30, 
   0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x29, 0x2B, 
   0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3D, 0x3F, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x37, 0x37, 
   0x37, 0x37, 0x36, 0x37, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 
   0x32, 0x31, 0x32, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 
   0x33, 0x34, 0x35, 0x33, 0x35, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x34, 0x34, 0x34, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 
   0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 
   0x3B, 0x3B, 0x3B, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3B, 0x3D, 0x3A, 0x3A, 0x3A, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x37, 0x38, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 
   0x37, 0x38, 0x38, 0x39, 0x38, 0x3C, 0x3B, 0x3C, 0x3F, 0x3D, 0x3F, 0x3F, 0x3F, 0x3F, 0x42, 0x42, 
   0x42, 0x44, 0x45, 0x44, 0x46, 0x47, 0x46, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4B, 0x49, 
   0x49, 0x4A, 0x49, 0x48, 0x49, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x46, 0x47, 0x44, 0x46, 0x44, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x4A, 0x4B, 0x4A, 0x4C, 
   0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x18, 0x1A, 0x18, 0x01, 0x01, 0x01, 0x33, 0x33, 0x33, 0x52, 0x52, 
   0x52, 0x50, 0x4F, 0x50, 0x3B, 0x3A, 0x3B, 0x37, 0x36, 0x37, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x46, 
   0x47, 0x46, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x45, 0x46, 
   0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 
   0x40, 0x41, 0x40, 0x40, 0x3F, 0x40, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x41, 
   0x40, 0x41, 0x41, 0x42, 0x41, 0x3E, 0x3D, 0x3E, 0x3F, 0x40, 0x3F, 0x44, 0x44, 0x44, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x44, 0x45, 0x44, 0x48, 0x47, 0x48, 0x48, 0x49, 0x48, 
   0x48, 0x48, 0x48, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 
   0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 
   0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4C, 0x4C, 0x4C, 
   0x4A, 0x4B, 0x4A, 0x4D, 0x4C, 0x4D, 0x57, 0x56, 0x57, 0x52, 0x54, 0x52, 0x6A, 0x6A, 0x6A, 0x4F, 
   0x4F, 0x4F, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x44, 0x43, 0x44, 0x43, 0x42, 0x43, 0x45, 0x46, 
   0x45, 0x3B, 0x3C, 0x3B, 0x1D, 0x1C, 0x1D, 0x30, 0x2F, 0x30, 0x34, 0x34, 0x34, 0x3A, 0x3A, 0x3A, 
   0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x35, 0x36, 0x35, 0x33, 
   0x34, 0x33, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x31, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x2F, 
   0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 
   0x2E, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2C, 0x2B, 
   0x2C, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2E, 0x2D, 
   0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 
   0x33, 0x33, 0x35, 0x33, 0x35, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 
   0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 
   0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x31, 0x32, 0x30, 0x30, 0x30, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 
   0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x3E, 
   0x3F, 0x3E, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 0x38, 0x37, 
   0x38, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 
   0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x35, 0x33, 0x35, 0x34, 0x33, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x33, 0x34, 0x33, 0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 
   0x35, 0x35, 0x37, 0x35, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 
   0x3C, 0x3A, 0x3C, 0x3C, 0x3C, 0x3C, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3F, 0x3D, 0x3F, 0x3D, 0x3E, 0x3D, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 
   0x3D, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x39, 0x3A, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 
   0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x39, 
   0x38, 0x39, 0x39, 0x39, 0x39, 0x3B, 0x3C, 0x3B, 0x3E, 0x3E, 0x3E, 0x40, 0x40, 0x40, 0x42, 0x42, 
   0x42, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 
   0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 
   0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 
   0x44, 0x46, 0x45, 0x46, 0x45, 0x44, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x48, 0x47, 0x48, 
   0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x4A, 0x4A, 0x4A, 0x4C, 0x4B, 0x4C, 0x4B, 
   0x4C, 0x4B, 0x4F, 0x4E, 0x4F, 0x47, 0x47, 0x47, 0x19, 0x19, 0x19, 0x08, 0x06, 0x08, 0x2E, 0x2F, 
   0x2E, 0x4B, 0x4B, 0x4B, 0x58, 0x58, 0x58, 0x3B, 0x3E, 0x3B, 0x17, 0x16, 0x17, 0x46, 0x47, 0x46, 
   0x48, 0x49, 0x48, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x47, 0x48, 0x47, 0x48, 0x47, 0x48, 0x47, 
   0x47, 0x47, 0x45, 0x47, 0x45, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x43, 0x45, 0x43, 
   0x41, 0x42, 0x41, 0x40, 0x41, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 
   0x41, 0x40, 0x41, 0x41, 0x41, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x43, 
   0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x46, 0x45, 0x46, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 
   0x48, 0x49, 0x48, 0x49, 0x4A, 0x49, 0x4A, 0x4B, 0x4A, 0x4B, 0x4C, 0x4B, 0x4C, 0x4D, 0x4C, 0x4E, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 
   0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 
   0x4C, 0x4C, 0x4C, 0x5B, 0x59, 0x5B, 0x6D, 0x6C, 0x6D, 0x6C, 0x6C, 0x6C, 0x4B, 0x4C, 0x4B, 0x46, 
   0x45, 0x46, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x42, 0x44, 0x42, 0x43, 0x43, 0x43, 0x42, 0x43, 
   0x42, 0x28, 0x28, 0x28, 0x30, 0x32, 0x30, 0x41, 0x42, 0x41, 0x3C, 0x3C, 0x3C, 0x39, 0x3A, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 
   0x35, 0x35, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x35, 0x33, 
   0x35, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 
   0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 
   0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 
   0x33, 0x30, 0x32, 0x30, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 
   0x32, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x41, 0x42, 0x41, 0x3F, 
   0x3F, 0x3F, 0x40, 0x3E, 0x40, 0x3E, 0x3C, 0x3E, 0x3B, 0x3B, 0x3B, 0x39, 0x39, 0x39, 0x37, 0x37, 
   0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x35, 0x34, 0x35, 0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 
   0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 
   0x33, 0x33, 0x34, 0x35, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x34, 0x35, 0x36, 0x35, 0x36, 0x36, 0x35, 0x36, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 
   0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 
   0x36, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x37, 0x39, 0x37, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 
   0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3B, 0x3C, 0x3B, 0x3D, 0x3D, 0x3D, 0x3F, 0x3D, 0x3F, 0x3F, 
   0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3D, 0x3F, 0x3D, 0x3C, 0x3D, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x39, 
   0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 0x3C, 0x3D, 0x3E, 0x3D, 0x3F, 0x40, 0x3F, 0x42, 0x42, 
   0x42, 0x44, 0x44, 0x44, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x47, 0x48, 0x47, 0x48, 0x49, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x44, 
   0x46, 0x44, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x43, 0x43, 
   0x43, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x45, 0x46, 0x45, 0x45, 0x47, 0x45, 
   0x48, 0x47, 0x48, 0x47, 0x48, 0x47, 0x48, 0x49, 0x48, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4C, 
   0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4F, 0x4F, 0x4F, 0x4C, 0x4D, 0x4C, 0x09, 0x0A, 0x09, 0x00, 0x00, 
   0x00, 0x46, 0x46, 0x46, 0x4F, 0x4F, 0x4F, 0x49, 0x49, 0x49, 0x37, 0x37, 0x37, 0x32, 0x33, 0x32, 
   0x4B, 0x4B, 0x4B, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x48, 
   0x46, 0x48, 0x44, 0x46, 0x44, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x44, 0x46, 0x44, 0x46, 0x45, 0x46, 0x44, 0x44, 0x44, 
   0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 
   0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x42, 0x43, 
   0x42, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x44, 0x45, 0x44, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x48, 0x48, 0x48, 0x48, 0x4A, 0x48, 0x49, 0x4A, 0x49, 0x4B, 0x4C, 0x4B, 0x4B, 0x4C, 0x4B, 0x4D, 
   0x4C, 0x4D, 0x4D, 0x4E, 0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 
   0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4D, 0x4F, 0x4D, 0x4D, 0x4D, 0x4D, 
   0x4A, 0x4B, 0x4A, 0x61, 0x60, 0x61, 0x75, 0x76, 0x75, 0x5A, 0x5D, 0x5A, 0x49, 0x48, 0x49, 0x47, 
   0x47, 0x47, 0x45, 0x47, 0x45, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x40, 0x3F, 
   0x40, 0x1C, 0x1D, 0x1C, 0x3C, 0x3D, 0x3C, 0x3F, 0x3F, 0x3F, 0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 
   0x3A, 0x39, 0x3A, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x37, 
   0x35, 0x37, 0x33, 0x35, 0x33, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x32, 0x33, 
   0x32, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 
   0x2F, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 
   0x2B, 0x2A, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 
   0x2D, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 
   0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x31, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x33, 0x32, 0x32, 0x33, 0x32, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x32, 
   0x32, 0x32, 0x33, 0x32, 0x33, 0x31, 0x30, 0x31, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2B, 0x2C, 0x2B, 0x2D, 0x2C, 0x2D, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x42, 0x43, 0x42, 0x41, 
   0x41, 0x41, 0x40, 0x3F, 0x40, 0x3C, 0x3D, 0x3C, 0x3B, 0x3C, 0x3B, 0x39, 0x3A, 0x39, 0x38, 0x37, 
   0x38, 0x37, 0x36, 0x37, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x33, 0x34, 
   0x35, 0x34, 0x35, 0x36, 0x35, 0x36, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x35, 
   0x33, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x37, 
   0x38, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x38, 0x37, 0x37, 0x36, 0x37, 0x38, 0x36, 0x38, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 
   0x38, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3E, 0x3C, 0x3E, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3D, 0x3C, 
   0x3D, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x39, 0x3A, 0x38, 0x39, 0x38, 0x38, 0x37, 0x38, 
   0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x3A, 
   0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3C, 0x3B, 0x3D, 0x3E, 0x3D, 0x3F, 0x40, 0x3F, 0x41, 0x41, 
   0x41, 0x43, 0x43, 0x43, 0x44, 0x45, 0x44, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 
   0x46, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 
   0x43, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 
   0x46, 0x47, 0x46, 0x49, 0x48, 0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4B, 0x4A, 0x4C, 0x4D, 0x4C, 0x4E, 
   0x4D, 0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x52, 0x52, 0x52, 0x31, 0x30, 0x31, 0x00, 0x00, 
   0x00, 0x1E, 0x1F, 0x1E, 0x4C, 0x4D, 0x4C, 0x4E, 0x4E, 0x4E, 0x54, 0x55, 0x54, 0x1B, 0x1C, 0x1B, 
   0x43, 0x43, 0x43, 0x4C, 0x4D, 0x4C, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x45, 
   0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x43, 0x45, 0x43, 0x44, 0x45, 0x44, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x44, 0x46, 0x44, 0x45, 0x46, 0x45, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 
   0x44, 0x43, 0x44, 0x42, 0x43, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x40, 
   0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 
   0x42, 0x43, 0x42, 0x43, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x47, 0x47, 0x47, 
   0x48, 0x47, 0x48, 0x48, 0x49, 0x48, 0x4A, 0x49, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 
   0x4C, 0x4B, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x53, 0x55, 0x53, 0x6D, 0x70, 0x6D, 0x75, 0x75, 0x75, 0x4F, 0x50, 0x4F, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x46, 0x46, 0x46, 0x45, 0x44, 0x45, 0x42, 0x42, 0x42, 0x47, 0x47, 0x47, 0x3A, 0x39, 
   0x3A, 0x24, 0x22, 0x24, 0x3C, 0x3C, 0x3C, 0x3D, 0x3B, 0x3D, 0x3B, 0x3B, 0x3B, 0x39, 0x39, 0x39, 
   0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x36, 
   0x36, 0x36, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2E, 0x2D, 0x2E, 0x2D, 
   0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x32, 0x31, 0x32, 
   0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x33, 0x34, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x42, 
   0x43, 0x42, 0x40, 0x40, 0x40, 0x3D, 0x3D, 0x3D, 0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 0x38, 0x38, 
   0x38, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 
   0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x37, 0x35, 0x37, 0x35, 0x34, 0x35, 0x33, 
   0x34, 0x33, 0x35, 0x34, 0x35, 0x37, 0x37, 0x37, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 
   0x36, 0x36, 0x37, 0x35, 0x37, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x39, 0x38, 
   0x39, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3D, 0x3B, 0x3D, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 
   0x3D, 0x3C, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 
   0x37, 0x37, 0x37, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 0x3F, 0x41, 0x40, 
   0x41, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 
   0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x44, 
   0x46, 0x44, 0x45, 0x45, 0x45, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x44, 0x43, 0x44, 0x46, 0x45, 0x46, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 
   0x47, 0x46, 0x47, 0x47, 0x48, 0x47, 0x4A, 0x4A, 0x4A, 0x4C, 0x4B, 0x4C, 0x4E, 0x4D, 0x4E, 0x4E, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x51, 0x51, 0x51, 0x2A, 0x29, 
   0x2A, 0x00, 0x00, 0x00, 0x31, 0x2F, 0x31, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x30, 0x30, 0x30, 
   0x31, 0x33, 0x31, 0x4E, 0x4E, 0x4E, 0x4A, 0x4A, 0x4A, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x45, 
   0x46, 0x45, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x46, 0x45, 
   0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 
   0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x40, 
   0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x40, 0x41, 0x41, 0x40, 0x41, 0x42, 0x42, 0x42, 0x42, 0x43, 
   0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x47, 0x45, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x50, 0x51, 0x50, 0x42, 0x42, 0x42, 
   0x54, 0x53, 0x54, 0x70, 0x72, 0x70, 0x52, 0x52, 0x52, 0x49, 0x4A, 0x49, 0x48, 0x49, 0x48, 0x47, 
   0x47, 0x47, 0x45, 0x46, 0x45, 0x42, 0x44, 0x42, 0x44, 0x45, 0x44, 0x41, 0x41, 0x41, 0x2F, 0x2F, 
   0x2F, 0x35, 0x34, 0x35, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x38, 0x38, 0x38, 0x36, 
   0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 
   0x32, 0x33, 0x31, 0x33, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x2F, 0x31, 0x2E, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x30, 0x31, 0x30, 0x2F, 0x30, 
   0x2F, 0x30, 0x2F, 0x30, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 
   0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x30, 
   0x2F, 0x30, 0x30, 0x2F, 0x30, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 
   0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x30, 
   0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x30, 0x30, 0x30, 0x2E, 0x2E, 
   0x2E, 0x2B, 0x2D, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 
   0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x44, 0x46, 0x44, 0x44, 
   0x43, 0x44, 0x41, 0x41, 0x41, 0x3F, 0x3E, 0x3F, 0x3D, 0x3B, 0x3D, 0x39, 0x3A, 0x39, 0x38, 0x38, 
   0x38, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x37, 0x36, 0x37, 0x37, 0x36, 0x37, 
   0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 
   0x35, 0x34, 0x35, 0x35, 0x35, 0x39, 0x38, 0x39, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 
   0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 
   0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x35, 
   0x36, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x39, 0x38, 
   0x39, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3E, 0x3D, 0x3E, 
   0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 
   0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3C, 0x3C, 
   0x3C, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x37, 0x37, 0x37, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 
   0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 
   0x40, 0x41, 0x42, 0x41, 0x42, 0x44, 0x42, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 
   0x47, 0x47, 0x47, 0x49, 0x47, 0x49, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 
   0x46, 0x46, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x43, 0x44, 
   0x43, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 
   0x47, 0x47, 0x47, 0x48, 0x4A, 0x48, 0x49, 0x4B, 0x49, 0x4E, 0x4C, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 
   0x50, 0x4F, 0x4F, 0x4F, 0x4F, 0x50, 0x50, 0x50, 0x4E, 0x4F, 0x4E, 0x4F, 0x51, 0x4F, 0x4F, 0x4F, 
   0x4F, 0x13, 0x12, 0x13, 0x03, 0x02, 0x03, 0x36, 0x35, 0x36, 0x51, 0x51, 0x51, 0x47, 0x48, 0x47, 
   0x24, 0x24, 0x24, 0x3E, 0x3F, 0x3E, 0x4D, 0x4D, 0x4D, 0x49, 0x49, 0x49, 0x47, 0x48, 0x47, 0x45, 
   0x47, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x44, 
   0x44, 0x46, 0x44, 0x46, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 
   0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x40, 
   0x40, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x41, 0x42, 0x41, 0x42, 0x42, 
   0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 
   0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4E, 0x4C, 0x4E, 0x4E, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4D, 0x4E, 0x4D, 0x4D, 0x4B, 0x4D, 0x59, 0x57, 0x59, 
   0x6C, 0x6A, 0x6C, 0x64, 0x62, 0x64, 0x47, 0x49, 0x47, 0x49, 0x4A, 0x49, 0x48, 0x48, 0x48, 0x46, 
   0x47, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x38, 0x39, 0x38, 0x3B, 0x3A, 
   0x3B, 0x44, 0x42, 0x44, 0x41, 0x40, 0x41, 0x3D, 0x3C, 0x3D, 0x3B, 0x3A, 0x3B, 0x3A, 0x39, 0x3A, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x37, 
   0x37, 0x37, 0x35, 0x36, 0x35, 0x33, 0x35, 0x33, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 
   0x32, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 
   0x32, 0x33, 0x32, 0x30, 0x32, 0x30, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2E, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x32, 0x32, 0x32, 0x30, 0x32, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x2F, 0x30, 0x2E, 0x2E, 0x2E, 0x2C, 0x2D, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 
   0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x30, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x30, 
   0x31, 0x31, 0x31, 0x31, 0x33, 0x31, 0x33, 0x32, 0x33, 0x32, 0x34, 0x33, 0x34, 0x35, 0x34, 0x35, 
   0x34, 0x33, 0x34, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x31, 
   0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 
   0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x2E, 
   0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x44, 
   0x44, 0x44, 0x43, 0x43, 0x43, 0x40, 0x40, 0x40, 0x3E, 0x3D, 0x3E, 0x3C, 0x3B, 0x3C, 0x3A, 0x3B, 
   0x3A, 0x3A, 0x39, 0x3A, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x38, 0x37, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x38, 0x38, 0x38, 0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 0x3C, 0x3D, 0x3B, 0x3D, 0x3C, 0x3B, 
   0x3C, 0x3C, 0x3B, 0x3C, 0x3D, 0x3B, 0x3D, 0x3B, 0x3A, 0x3B, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 
   0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x37, 0x36, 0x36, 
   0x37, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x39, 0x39, 
   0x39, 0x3B, 0x3B, 0x3B, 0x3E, 0x3C, 0x3E, 0x3E, 0x3D, 0x3E, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 
   0x3F, 0x3E, 0x3F, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3E, 
   0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3C, 0x3B, 
   0x3C, 0x3C, 0x3A, 0x3C, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 
   0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x3A, 
   0x39, 0x3A, 0x3B, 0x3A, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3F, 0x3F, 0x3F, 0x40, 0x41, 
   0x40, 0x41, 0x41, 0x41, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 
   0x44, 0x46, 0x44, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x44, 
   0x45, 0x44, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x45, 0x44, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x47, 0x45, 
   0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4B, 0x4D, 0x4B, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x4F, 0x4E, 0x50, 0x4F, 0x50, 0x4F, 0x4F, 0x4F, 0x4F, 0x50, 0x4F, 0x4F, 0x50, 0x4F, 0x53, 0x55, 
   0x53, 0x3A, 0x3B, 0x3A, 0x00, 0x00, 0x00, 0x1A, 0x1B, 0x1A, 0x4E, 0x4F, 0x4E, 0x4C, 0x4D, 0x4C, 
   0x22, 0x20, 0x22, 0x2F, 0x2F, 0x2F, 0x50, 0x51, 0x50, 0x49, 0x4B, 0x49, 0x49, 0x48, 0x49, 0x47, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x45, 0x46, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 
   0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 
   0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x44, 0x43, 0x44, 0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x40, 
   0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 
   0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x42, 0x44, 0x42, 0x44, 0x44, 0x44, 0x45, 0x46, 0x45, 
   0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 
   0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4C, 0x4C, 0x4D, 0x4C, 0x4E, 0x4E, 0x4E, 0x4C, 0x4E, 
   0x4C, 0x4E, 0x4E, 0x4E, 0x4E, 0x50, 0x4E, 0x4B, 0x4C, 0x4B, 0x46, 0x45, 0x46, 0x73, 0x73, 0x73, 
   0x72, 0x72, 0x72, 0x4B, 0x4C, 0x4B, 0x4A, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x46, 0x47, 0x46, 0x45, 
   0x46, 0x45, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x2E, 0x2C, 0x2E, 0x2E, 0x2D, 0x2E, 0x3E, 0x3F, 
   0x3E, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 
   0x37, 0x38, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x35, 0x34, 0x35, 0x35, 0x34, 0x35, 0x33, 0x33, 
   0x33, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 
   0x30, 0x32, 0x30, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x30, 0x30, 
   0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x31, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 
   0x31, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x33, 0x32, 0x33, 0x33, 0x31, 
   0x33, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x30, 
   0x31, 0x30, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x30, 0x30, 
   0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x47, 0x48, 0x45, 
   0x46, 0x45, 0x44, 0x44, 0x44, 0x41, 0x41, 0x41, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3C, 0x3B, 
   0x3C, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 
   0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 
   0x37, 0x38, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3B, 0x3D, 0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 
   0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x39, 0x3A, 
   0x39, 0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 
   0x41, 0x40, 0x41, 0x3E, 0x3F, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 
   0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3D, 0x3D, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3A, 0x3C, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x37, 0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 
   0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3D, 0x3E, 0x3D, 0x3F, 0x3F, 0x3F, 0x41, 0x41, 
   0x41, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 
   0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x45, 
   0x44, 0x45, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x45, 0x45, 
   0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x46, 0x47, 0x46, 
   0x47, 0x47, 0x47, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4E, 
   0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 
   0x50, 0x4E, 0x4F, 0x4E, 0x33, 0x33, 0x33, 0x04, 0x04, 0x04, 0x1A, 0x19, 0x1A, 0x4B, 0x4B, 0x4B, 
   0x40, 0x3F, 0x40, 0x34, 0x34, 0x34, 0x4F, 0x4F, 0x4F, 0x4E, 0x4E, 0x4E, 0x4A, 0x49, 0x4A, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x46, 0x45, 0x46, 0x43, 0x44, 0x43, 0x42, 0x42, 
   0x42, 0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x41, 0x42, 0x41, 
   0x40, 0x41, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x43, 
   0x42, 0x44, 0x43, 0x44, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 
   0x46, 0x46, 0x46, 0x47, 0x48, 0x47, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x4A, 
   0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4E, 0x4D, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4B, 0x4C, 0x4B, 0x5E, 0x5E, 0x5E, 0x67, 0x67, 0x67, 0x74, 0x73, 0x74, 
   0x5C, 0x5C, 0x5C, 0x4B, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x48, 0x48, 0x48, 0x46, 0x46, 0x46, 0x45, 
   0x45, 0x45, 0x46, 0x47, 0x46, 0x3E, 0x3E, 0x3E, 0x22, 0x22, 0x22, 0x2F, 0x2F, 0x2F, 0x33, 0x34, 
   0x33, 0x3E, 0x3E, 0x3E, 0x3F, 0x40, 0x3F, 0x3D, 0x3D, 0x3D, 0x3B, 0x3C, 0x3B, 0x3A, 0x3B, 0x3A, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 
   0x34, 0x32, 0x34, 0x32, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 
   0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x31, 0x30, 0x31, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x30, 
   0x2F, 0x30, 0x2E, 0x30, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 
   0x2D, 0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x33, 0x32, 0x33, 0x32, 0x32, 
   0x32, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x36, 0x35, 0x35, 0x34, 0x35, 0x34, 0x33, 0x34, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x31, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 
   0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x30, 
   0x31, 0x30, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 
   0x32, 0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x2F, 0x30, 0x31, 0x30, 0x31, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x47, 
   0x47, 0x47, 0x45, 0x44, 0x45, 0x41, 0x42, 0x41, 0x3F, 0x3F, 0x3F, 0x3D, 0x3F, 0x3D, 0x3D, 0x3C, 
   0x3D, 0x3B, 0x3C, 0x3B, 0x3D, 0x3C, 0x3D, 0x3C, 0x3B, 0x3C, 0x3D, 0x3B, 0x3D, 0x3B, 0x3B, 0x3B, 
   0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x3B, 
   0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3A, 0x3B, 
   0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x37, 
   0x38, 0x37, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x39, 0x3A, 
   0x39, 0x3C, 0x3C, 0x3C, 0x3F, 0x3F, 0x3F, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3E, 0x3D, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3A, 0x3A, 0x3A, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x3C, 0x3C, 0x3C, 0x3C, 0x3E, 0x3C, 0x3F, 0x40, 0x3F, 0x41, 0x41, 
   0x41, 0x43, 0x42, 0x43, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x43, 
   0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x46, 0x45, 0x46, 0x45, 0x46, 
   0x45, 0x47, 0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x45, 0x46, 0x45, 0x45, 0x47, 0x45, 
   0x48, 0x48, 0x48, 0x48, 0x4A, 0x48, 0x4A, 0x4A, 0x4A, 0x4C, 0x4C, 0x4C, 0x4D, 0x4E, 0x4D, 0x4E, 
   0x4E, 0x4E, 0x50, 0x4F, 0x50, 0x4F, 0x50, 0x4F, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 
   0x50, 0x53, 0x54, 0x53, 0x54, 0x54, 0x54, 0x17, 0x16, 0x17, 0x00, 0x00, 0x00, 0x3E, 0x3D, 0x3E, 
   0x57, 0x57, 0x57, 0x42, 0x41, 0x42, 0x3B, 0x3A, 0x3B, 0x4C, 0x4C, 0x4C, 0x4F, 0x50, 0x4F, 0x4A, 
   0x4A, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x46, 0x47, 0x44, 0x45, 0x44, 0x42, 0x42, 
   0x42, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x41, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 
   0x42, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x46, 0x45, 0x46, 
   0x45, 0x46, 0x45, 0x47, 0x48, 0x47, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4C, 0x4B, 0x4C, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 
   0x4D, 0x4C, 0x4C, 0x4C, 0x51, 0x50, 0x51, 0x6F, 0x70, 0x6F, 0x82, 0x83, 0x82, 0x5F, 0x5E, 0x5F, 
   0x47, 0x47, 0x47, 0x4B, 0x4B, 0x4B, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x48, 
   0x46, 0x48, 0x48, 0x46, 0x48, 0x3B, 0x38, 0x3B, 0x34, 0x35, 0x34, 0x46, 0x46, 0x46, 0x45, 0x45, 
   0x45, 0x40, 0x41, 0x40, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3C, 0x3C, 0x3C, 0x3A, 0x3B, 0x3A, 
   0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x35, 
   0x37, 0x35, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 
   0x35, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x32, 0x33, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 
   0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2F, 
   0x2F, 0x2F, 0x31, 0x30, 0x31, 0x33, 0x32, 0x33, 0x34, 0x32, 0x34, 0x31, 0x31, 0x31, 0x2F, 0x2F, 
   0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 
   0x30, 0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x35, 0x33, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 
   0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x32, 0x32, 0x32, 0x31, 
   0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x31, 0x30, 
   0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 
   0x33, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x47, 
   0x47, 0x47, 0x44, 0x45, 0x44, 0x42, 0x42, 0x42, 0x40, 0x40, 0x40, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 
   0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3D, 
   0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 0x3D, 0x3D, 0x3E, 0x3D, 0x3F, 0x3E, 
   0x3F, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 
   0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x39, 0x3A, 0x38, 
   0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x3A, 0x38, 0x3A, 0x39, 0x3B, 
   0x39, 0x3C, 0x3E, 0x3C, 0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 
   0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3A, 0x3A, 0x3A, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x37, 0x38, 0x39, 0x37, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 
   0x3A, 0x39, 0x3B, 0x39, 0x3B, 0x3B, 0x3C, 0x3B, 0x3D, 0x3E, 0x3D, 0x3F, 0x40, 0x3F, 0x41, 0x41, 
   0x41, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x44, 0x45, 0x44, 0x44, 
   0x44, 0x44, 0x43, 0x44, 0x43, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x44, 0x46, 0x44, 0x46, 0x47, 
   0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 
   0x48, 0x48, 0x48, 0x4A, 0x49, 0x4A, 0x4B, 0x4C, 0x4B, 0x4D, 0x4C, 0x4D, 0x4C, 0x4D, 0x4C, 0x4E, 
   0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x51, 0x51, 0x51, 0x51, 0x52, 
   0x51, 0x51, 0x51, 0x51, 0x51, 0x52, 0x51, 0x4B, 0x4B, 0x4B, 0x1E, 0x1E, 0x1E, 0x05, 0x06, 0x05, 
   0x44, 0x43, 0x44, 0x55, 0x54, 0x55, 0x4C, 0x4A, 0x4C, 0x35, 0x35, 0x35, 0x44, 0x46, 0x44, 0x4D, 
   0x4D, 0x4D, 0x49, 0x4A, 0x49, 0x48, 0x49, 0x48, 0x46, 0x47, 0x46, 0x44, 0x46, 0x44, 0x43, 0x43, 
   0x43, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 
   0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x44, 0x43, 0x44, 0x42, 0x42, 0x42, 0x41, 
   0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 
   0x43, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 
   0x45, 0x46, 0x45, 0x47, 0x48, 0x47, 0x49, 0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 
   0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4B, 0x4C, 
   0x4B, 0x43, 0x43, 0x43, 0x64, 0x64, 0x64, 0x7E, 0x80, 0x7E, 0x5B, 0x5D, 0x5B, 0x4C, 0x4D, 0x4C, 
   0x4A, 0x4B, 0x4A, 0x49, 0x4A, 0x49, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x43, 0x44, 0x43, 0x3B, 
   0x3B, 0x3B, 0x44, 0x42, 0x44, 0x44, 0x42, 0x44, 0x46, 0x46, 0x46, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x3F, 0x3E, 0x3F, 0x3D, 0x3D, 0x3D, 0x3B, 0x3C, 0x3B, 
   0x3B, 0x3A, 0x3B, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x37, 0x36, 0x37, 0x37, 0x36, 
   0x37, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 
   0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 
   0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x31, 0x32, 0x31, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x33, 0x35, 0x33, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 
   0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x33, 0x34, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x30, 0x32, 0x30, 0x2F, 0x30, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 
   0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 
   0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 
   0x31, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 
   0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x47, 
   0x47, 0x47, 0x45, 0x45, 0x45, 0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x3F, 0x3F, 0x3F, 0x3D, 0x3E, 
   0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3C, 
   0x3E, 0x3C, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3D, 0x3C, 0x3D, 
   0x3C, 0x3B, 0x3C, 0x3D, 0x3B, 0x3D, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x39, 
   0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 
   0x3C, 0x3F, 0x3E, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 
   0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x41, 0x40, 0x40, 0x3F, 0x40, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 
   0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x3C, 0x3A, 0x3C, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 
   0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3B, 
   0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x40, 0x40, 0x40, 0x42, 0x41, 
   0x42, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 
   0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x47, 0x46, 0x47, 0x45, 0x46, 0x45, 0x44, 
   0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x46, 0x44, 0x45, 0x46, 0x45, 0x46, 0x47, 
   0x46, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x49, 0x48, 0x4A, 0x4A, 0x4A, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 
   0x4E, 0x4E, 0x4F, 0x4F, 0x4F, 0x50, 0x51, 0x50, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 
   0x51, 0x4F, 0x50, 0x4F, 0x4F, 0x50, 0x4F, 0x51, 0x52, 0x51, 0x47, 0x48, 0x47, 0x0C, 0x0B, 0x0C, 
   0x09, 0x09, 0x09, 0x43, 0x42, 0x43, 0x57, 0x59, 0x57, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x4E, 
   0x51, 0x4E, 0x4F, 0x50, 0x4F, 0x49, 0x48, 0x49, 0x47, 0x46, 0x47, 0x45, 0x45, 0x45, 0x44, 0x43, 
   0x44, 0x42, 0x43, 0x42, 0x41, 0x43, 0x41, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 
   0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x44, 0x44, 
   0x44, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 
   0x45, 0x46, 0x45, 0x47, 0x48, 0x47, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x4A, 
   0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x51, 0x50, 0x51, 0x4A, 0x4A, 0x4A, 0x4B, 0x49, 0x4B, 0x5A, 0x5C, 
   0x5A, 0x69, 0x6A, 0x69, 0x74, 0x74, 0x74, 0x6C, 0x6D, 0x6C, 0x4E, 0x4E, 0x4E, 0x4B, 0x4A, 0x4B, 
   0x4A, 0x4A, 0x4A, 0x47, 0x49, 0x47, 0x4A, 0x4A, 0x4A, 0x49, 0x48, 0x49, 0x3B, 0x3B, 0x3B, 0x3F, 
   0x3F, 0x3F, 0x3C, 0x3E, 0x3C, 0x2F, 0x30, 0x2F, 0x3D, 0x3E, 0x3D, 0x42, 0x41, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x40, 0x40, 0x40, 0x3E, 0x3F, 0x3E, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3A, 0x3C, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x36, 0x37, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x33, 0x34, 0x33, 0x32, 0x33, 
   0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 
   0x30, 0x31, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x30, 0x2F, 
   0x30, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 
   0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 
   0x36, 0x36, 0x36, 0x34, 0x36, 0x34, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x32, 0x32, 0x32, 0x30, 
   0x31, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2E, 0x30, 
   0x2E, 0x30, 0x30, 0x30, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 
   0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x31, 0x30, 0x31, 0x31, 
   0x30, 0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x47, 0x48, 0x47, 0x46, 
   0x48, 0x46, 0x44, 0x45, 0x44, 0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x40, 0x3F, 0x40, 0x3E, 0x3E, 
   0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 
   0x3E, 0x3C, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3F, 0x3E, 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x40, 
   0x3F, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3E, 0x3E, 
   0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3A, 
   0x3B, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3D, 0x3C, 
   0x3D, 0x40, 0x3E, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 
   0x42, 0x42, 0x42, 0x42, 0x40, 0x42, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x41, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 
   0x3F, 0x3E, 0x3E, 0x3E, 0x3D, 0x3D, 0x3D, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3D, 
   0x3B, 0x3D, 0x3C, 0x3B, 0x3C, 0x3D, 0x3B, 0x3D, 0x3E, 0x3D, 0x3E, 0x40, 0x40, 0x40, 0x41, 0x41, 
   0x41, 0x44, 0x43, 0x44, 0x43, 0x44, 0x43, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 
   0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x48, 0x46, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x46, 
   0x47, 0x46, 0x46, 0x47, 0x46, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 
   0x47, 0x48, 0x49, 0x48, 0x4A, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x4B, 0x4C, 0x4B, 0x4A, 0x4D, 0x4A, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4F, 
   0x4F, 0x4F, 0x50, 0x50, 0x50, 0x51, 0x50, 0x51, 0x50, 0x52, 0x50, 0x51, 0x52, 0x51, 0x51, 0x51, 
   0x51, 0x51, 0x51, 0x51, 0x4F, 0x50, 0x4F, 0x4E, 0x50, 0x4E, 0x54, 0x54, 0x54, 0x32, 0x32, 0x32, 
   0x00, 0x00, 0x00, 0x21, 0x20, 0x21, 0x50, 0x52, 0x50, 0x4E, 0x4F, 0x4E, 0x41, 0x42, 0x41, 0x3A, 
   0x3A, 0x3A, 0x4D, 0x4D, 0x4D, 0x4A, 0x49, 0x4A, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x44, 
   0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 
   0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x43, 0x44, 0x43, 0x43, 
   0x43, 0x43, 0x44, 0x43, 0x44, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 
   0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 
   0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x4A, 0x49, 0x4A, 0x48, 
   0x48, 0x48, 0x4D, 0x4C, 0x4D, 0x55, 0x56, 0x55, 0x5A, 0x59, 0x5A, 0x53, 0x53, 0x53, 0x62, 0x61, 
   0x62, 0x90, 0x90, 0x90, 0x72, 0x70, 0x72, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 
   0x48, 0x49, 0x48, 0x49, 0x4B, 0x49, 0x4C, 0x4D, 0x4C, 0x33, 0x31, 0x33, 0x39, 0x39, 0x39, 0x39, 
   0x38, 0x39, 0x44, 0x44, 0x44, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x43, 0x43, 
   0x43, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x40, 0x3F, 0x40, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3B, 0x3C, 0x3C, 0x3A, 0x3C, 0x3A, 0x3A, 0x3A, 0x3B, 0x39, 0x3B, 0x39, 0x39, 0x39, 0x37, 
   0x39, 0x37, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x36, 0x35, 0x36, 0x34, 0x33, 0x34, 0x34, 0x32, 0x34, 
   0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x32, 0x33, 0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 
   0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 
   0x32, 0x31, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 
   0x36, 0x35, 0x36, 0x34, 0x36, 0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x2F, 
   0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 
   0x30, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x33, 0x31, 0x33, 0x31, 0x33, 0x31, 0x30, 0x31, 0x2F, 
   0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x31, 0x2F, 0x31, 0x31, 0x2F, 0x31, 
   0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x46, 0x48, 0x46, 0x45, 
   0x46, 0x45, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x3E, 0x3E, 
   0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x41, 
   0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x3F, 0x41, 0x3F, 0x3F, 0x40, 0x3F, 
   0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3A, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 
   0x3D, 0x40, 0x3F, 0x40, 0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3D, 0x3F, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3C, 0x3A, 0x3C, 
   0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 
   0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3F, 0x3D, 0x3F, 0x40, 0x40, 0x40, 0x41, 0x41, 
   0x41, 0x42, 0x42, 0x42, 0x42, 0x44, 0x42, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 
   0x45, 0x46, 0x45, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x47, 0x48, 0x47, 0x46, 0x46, 0x46, 0x47, 0x46, 0x47, 0x46, 0x47, 0x46, 0x48, 0x48, 
   0x48, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4C, 0x4C, 0x4C, 
   0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4F, 0x4F, 0x4F, 0x4F, 
   0x50, 0x4F, 0x51, 0x50, 0x51, 0x52, 0x53, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x51, 0x50, 
   0x51, 0x50, 0x50, 0x50, 0x4F, 0x50, 0x4F, 0x4E, 0x4E, 0x4E, 0x4F, 0x4F, 0x4F, 0x4C, 0x4D, 0x4C, 
   0x29, 0x2A, 0x29, 0x03, 0x04, 0x03, 0x1F, 0x1F, 0x1F, 0x4F, 0x4F, 0x4F, 0x4D, 0x4E, 0x4D, 0x2E, 
   0x2F, 0x2E, 0x36, 0x37, 0x36, 0x48, 0x49, 0x48, 0x45, 0x47, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 
   0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x44, 
   0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 
   0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x46, 0x45, 0x47, 0x48, 0x47, 0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x4F, 
   0x4E, 0x4F, 0x4C, 0x4C, 0x4C, 0x3A, 0x3B, 0x3A, 0x79, 0x79, 0x79, 0x99, 0x99, 0x99, 0x77, 0x76, 
   0x77, 0x6A, 0x69, 0x6A, 0x52, 0x52, 0x52, 0x4B, 0x4C, 0x4B, 0x4D, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 
   0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 0x38, 0x3A, 0x38, 0x2A, 0x2A, 0x2A, 0x30, 0x2E, 0x30, 0x37, 
   0x39, 0x37, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x47, 0x46, 0x47, 0x45, 0x46, 0x45, 0x45, 0x44, 
   0x45, 0x42, 0x43, 0x42, 0x41, 0x42, 0x41, 0x40, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3D, 0x3E, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 
   0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 
   0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x31, 
   0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 
   0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 
   0x32, 0x32, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x35, 0x36, 
   0x35, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 
   0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 
   0x30, 0x31, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 
   0x32, 0x31, 0x32, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x2F, 
   0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 
   0x2E, 0x2E, 0x2F, 0x2E, 0x2E, 0x2F, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x46, 0x47, 0x46, 0x47, 0x48, 0x47, 0x46, 0x47, 0x46, 0x45, 
   0x46, 0x45, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x3F, 0x40, 
   0x3F, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3D, 0x3C, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3D, 0x3C, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3F, 0x3E, 0x3F, 0x40, 0x40, 0x40, 0x41, 0x41, 
   0x41, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 
   0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 
   0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 
   0x3E, 0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3E, 0x3F, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3E, 0x3C, 
   0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x40, 
   0x41, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x45, 0x44, 0x45, 
   0x45, 0x46, 0x45, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x4A, 0x49, 0x4A, 0x48, 
   0x49, 0x48, 0x48, 0x49, 0x48, 0x47, 0x47, 0x47, 0x48, 0x46, 0x48, 0x47, 0x48, 0x47, 0x49, 0x49, 
   0x49, 0x4C, 0x4B, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4E, 0x4D, 0x4E, 
   0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x50, 0x50, 0x50, 0x50, 
   0x50, 0x50, 0x4F, 0x51, 0x4F, 0x52, 0x51, 0x52, 0x51, 0x52, 0x51, 0x52, 0x52, 0x52, 0x50, 0x50, 
   0x50, 0x4F, 0x4F, 0x4F, 0x4E, 0x4F, 0x4E, 0x4F, 0x4F, 0x4F, 0x4E, 0x4E, 0x4E, 0x50, 0x4F, 0x50, 
   0x4E, 0x4F, 0x4E, 0x0C, 0x0D, 0x0C, 0x03, 0x02, 0x03, 0x3F, 0x40, 0x3F, 0x50, 0x50, 0x50, 0x39, 
   0x38, 0x39, 0x1D, 0x1E, 0x1D, 0x45, 0x45, 0x45, 0x46, 0x47, 0x46, 0x45, 0x45, 0x45, 0x46, 0x45, 
   0x46, 0x45, 0x47, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x47, 0x46, 0x47, 
   0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x46, 0x47, 0x45, 
   0x46, 0x45, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x46, 0x45, 0x47, 0x48, 0x47, 0x49, 0x48, 0x49, 0x48, 0x49, 0x48, 0x49, 0x48, 0x49, 0x4E, 
   0x4E, 0x4E, 0x55, 0x55, 0x55, 0x26, 0x25, 0x26, 0x52, 0x50, 0x52, 0xA6, 0xA5, 0xA6, 0x82, 0x81, 
   0x82, 0x4D, 0x4C, 0x4D, 0x49, 0x4A, 0x49, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4B, 0x4C, 0x4B, 
   0x4E, 0x4C, 0x4E, 0x41, 0x41, 0x41, 0x16, 0x19, 0x16, 0x3B, 0x3C, 0x3B, 0x4C, 0x4C, 0x4C, 0x49, 
   0x4A, 0x49, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x46, 0x47, 
   0x46, 0x45, 0x45, 0x45, 0x43, 0x44, 0x43, 0x43, 0x42, 0x43, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3E, 
   0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x39, 0x3B, 0x39, 0x3A, 
   0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x39, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x36, 0x38, 0x36, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 
   0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 
   0x33, 0x32, 0x32, 0x33, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 
   0x31, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x31, 0x33, 0x31, 0x35, 
   0x33, 0x35, 0x34, 0x34, 0x34, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 0x36, 
   0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x35, 0x36, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x30, 
   0x31, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x31, 0x2F, 0x31, 0x31, 0x31, 
   0x31, 0x33, 0x31, 0x33, 0x31, 0x32, 0x31, 0x30, 0x31, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 
   0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x33, 0x31, 0x33, 0x31, 0x30, 0x31, 0x2F, 
   0x2F, 0x2F, 0x31, 0x2F, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x45, 0x47, 0x45, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 
   0x45, 0x45, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x3F, 
   0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3D, 0x3F, 0x3D, 0x3D, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x40, 0x42, 0x41, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x44, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 
   0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 
   0x3E, 0x3E, 0x3F, 0x3D, 0x3F, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3F, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x45, 0x43, 0x45, 0x44, 
   0x44, 0x44, 0x45, 0x44, 0x45, 0x44, 0x43, 0x44, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x40, 0x40, 
   0x40, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3D, 0x3E, 0x3D, 
   0x40, 0x3F, 0x40, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x41, 0x40, 0x41, 0x40, 
   0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x41, 0x40, 0x41, 0x42, 0x41, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x44, 0x43, 0x44, 
   0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x4A, 
   0x49, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x48, 0x49, 0x48, 0x4A, 0x4B, 
   0x4A, 0x4A, 0x4C, 0x4A, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4E, 0x4D, 0x4E, 0x4F, 0x4E, 0x4F, 
   0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4F, 0x4F, 0x4F, 0x50, 0x50, 0x50, 0x50, 
   0x50, 0x50, 0x50, 0x51, 0x50, 0x50, 0x51, 0x50, 0x52, 0x52, 0x52, 0x50, 0x52, 0x50, 0x50, 0x50, 
   0x50, 0x4F, 0x4F, 0x4F, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4C, 0x4D, 0x4C, 
   0x4F, 0x4F, 0x4F, 0x3C, 0x3B, 0x3C, 0x03, 0x03, 0x03, 0x0A, 0x0A, 0x0A, 0x41, 0x41, 0x41, 0x39, 
   0x3A, 0x39, 0x10, 0x10, 0x10, 0x43, 0x41, 0x43, 0x48, 0x48, 0x48, 0x45, 0x45, 0x45, 0x46, 0x45, 
   0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 
   0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x46, 
   0x47, 0x46, 0x45, 0x45, 0x45, 0x46, 0x44, 0x46, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x44, 
   0x45, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 
   0x45, 0x46, 0x45, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x4A, 0x48, 0x4A, 0x49, 0x4A, 0x49, 0x3E, 
   0x3F, 0x3E, 0x4D, 0x4C, 0x4D, 0x6B, 0x6B, 0x6B, 0x65, 0x66, 0x65, 0x5B, 0x5C, 0x5B, 0x56, 0x57, 
   0x56, 0x4E, 0x4E, 0x4E, 0x4D, 0x4C, 0x4D, 0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 0x4D, 0x4C, 0x4C, 0x4C, 
   0x50, 0x50, 0x50, 0x3A, 0x38, 0x3A, 0x25, 0x26, 0x25, 0x46, 0x46, 0x46, 0x4A, 0x4B, 0x4A, 0x4A, 
   0x4A, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x47, 0x47, 0x47, 0x46, 0x47, 
   0x46, 0x47, 0x46, 0x47, 0x45, 0x45, 0x45, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 
   0x40, 0x41, 0x40, 0x3F, 0x3F, 0x3F, 0x3D, 0x3D, 0x3D, 0x3A, 0x3C, 0x3A, 0x3C, 0x3B, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x3B, 0x3A, 
   0x3B, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x38, 0x39, 0x37, 0x36, 0x37, 0x35, 0x36, 0x35, 
   0x36, 0x35, 0x36, 0x34, 0x35, 0x34, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 
   0x32, 0x33, 0x33, 0x31, 0x33, 0x33, 0x31, 0x33, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x32, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x35, 
   0x34, 0x35, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x36, 0x37, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x36, 0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x31, 
   0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 
   0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 
   0x2E, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 
   0x2E, 0x2D, 0x2E, 0x2F, 0x2E, 0x2F, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x46, 0x45, 0x46, 0x43, 
   0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3F, 
   0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 
   0x40, 0x3E, 0x40, 0x3F, 0x3F, 0x3F, 0x3E, 0x3D, 0x3E, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3E, 0x3D, 0x40, 0x40, 0x40, 0x43, 0x41, 0x43, 0x42, 0x43, 
   0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x3F, 0x40, 0x3F, 0x3F, 0x41, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x40, 0x3E, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x41, 0x3F, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 
   0x44, 0x42, 0x44, 0x43, 0x43, 0x43, 0x42, 0x44, 0x42, 0x44, 0x45, 0x44, 0x45, 0x46, 0x45, 0x45, 
   0x46, 0x45, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x43, 0x44, 0x43, 0x41, 0x42, 0x41, 0x3F, 0x40, 
   0x3F, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 
   0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x40, 0x42, 0x40, 0x42, 0x41, 0x42, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x41, 0x41, 
   0x41, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 
   0x44, 0x44, 0x44, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x49, 0x4A, 0x49, 0x49, 
   0x49, 0x49, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x48, 0x4A, 0x48, 0x4B, 0x4A, 0x4B, 0x4A, 0x4C, 
   0x4A, 0x4C, 0x4C, 0x4C, 0x4E, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 0x4F, 0x4F, 0x4F, 
   0x50, 0x4F, 0x50, 0x4F, 0x50, 0x4F, 0x50, 0x50, 0x50, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 0x50, 
   0x52, 0x50, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x52, 0x51, 0x51, 0x51, 0x51, 0x50, 0x50, 
   0x50, 0x4F, 0x4F, 0x4F, 0x4E, 0x4F, 0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 0x4D, 0x4C, 0x4C, 0x4C, 
   0x4B, 0x4C, 0x4B, 0x4D, 0x4E, 0x4D, 0x34, 0x34, 0x34, 0x06, 0x06, 0x06, 0x40, 0x3F, 0x40, 0x38, 
   0x3A, 0x38, 0x14, 0x14, 0x14, 0x43, 0x43, 0x43, 0x48, 0x48, 0x48, 0x46, 0x46, 0x46, 0x45, 0x47, 
   0x45, 0x48, 0x46, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x49, 0x49, 0x49, 
   0x48, 0x4A, 0x48, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x47, 
   0x47, 0x47, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x42, 0x44, 0x42, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x47, 0x47, 0x47, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x4C, 0x4C, 0x4C, 0x3D, 
   0x3D, 0x3D, 0x25, 0x24, 0x25, 0x84, 0x85, 0x84, 0x6C, 0x6C, 0x6C, 0x48, 0x48, 0x48, 0x4B, 0x4C, 
   0x4B, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x50, 0x51, 0x50, 
   0x4A, 0x4B, 0x4A, 0x31, 0x30, 0x31, 0x49, 0x48, 0x49, 0x4D, 0x4C, 0x4D, 0x4A, 0x4B, 0x4A, 0x49, 
   0x49, 0x49, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x47, 0x48, 
   0x47, 0x48, 0x47, 0x48, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x43, 0x42, 0x43, 
   0x43, 0x43, 0x43, 0x41, 0x41, 0x41, 0x3F, 0x3E, 0x3F, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3C, 0x3A, 
   0x3C, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x38, 0x37, 0x38, 0x35, 0x36, 0x35, 
   0x36, 0x35, 0x36, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x33, 0x31, 0x33, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 
   0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x35, 
   0x35, 0x35, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x38, 0x37, 0x38, 0x38, 0x37, 
   0x38, 0x38, 0x37, 0x38, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x31, 0x33, 0x31, 0x33, 0x31, 0x33, 0x31, 0x30, 0x31, 0x30, 
   0x31, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 
   0x31, 0x32, 0x31, 0x32, 0x31, 0x30, 0x31, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x32, 0x31, 0x32, 0x2F, 0x32, 0x2F, 0x30, 0x30, 0x30, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x45, 0x45, 0x45, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 
   0x43, 0x42, 0x43, 0x41, 0x43, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 
   0x41, 0x3F, 0x41, 0x3F, 0x3F, 0x3F, 0x3D, 0x3D, 0x3D, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 
   0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3E, 0x3E, 0x3E, 0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 0x44, 0x43, 
   0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 
   0x42, 0x43, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x40, 
   0x3F, 0x40, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 
   0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 
   0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x46, 0x45, 0x46, 0x45, 0x46, 0x45, 0x46, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x44, 0x45, 0x44, 0x43, 0x43, 0x43, 0x41, 0x40, 
   0x41, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x44, 0x43, 0x44, 0x44, 0x43, 0x44, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x40, 
   0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 
   0x43, 0x43, 0x43, 0x44, 0x45, 0x44, 0x46, 0x46, 0x46, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x49, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 
   0x4C, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x50, 0x50, 0x50, 
   0x50, 0x50, 0x50, 0x50, 0x51, 0x50, 0x51, 0x51, 0x51, 0x51, 0x52, 0x51, 0x52, 0x52, 0x52, 0x51, 
   0x52, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x50, 0x51, 0x50, 0x50, 0x50, 
   0x50, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 
   0x4B, 0x4C, 0x4B, 0x45, 0x46, 0x45, 0x52, 0x52, 0x52, 0x5F, 0x5F, 0x5F, 0x52, 0x52, 0x52, 0x37, 
   0x36, 0x37, 0x0E, 0x0E, 0x0E, 0x42, 0x42, 0x42, 0x48, 0x49, 0x48, 0x46, 0x46, 0x46, 0x46, 0x47, 
   0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x49, 0x49, 0x49, 
   0x4A, 0x4B, 0x4A, 0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4A, 0x4B, 0x4A, 0x48, 0x49, 0x48, 0x47, 
   0x47, 0x47, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 
   0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x49, 0x49, 0x49, 0x4B, 0x4A, 0x4B, 0x47, 
   0x46, 0x47, 0x2E, 0x2E, 0x2E, 0x4F, 0x50, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x4E, 0x4F, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4B, 0x4B, 0x4B, 0x4D, 0x4F, 0x4D, 
   0x3A, 0x3A, 0x3A, 0x3E, 0x3E, 0x3E, 0x54, 0x53, 0x54, 0x4D, 0x4C, 0x4D, 0x4A, 0x4B, 0x4A, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x47, 0x48, 0x48, 0x47, 0x48, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 
   0x44, 0x43, 0x44, 0x42, 0x42, 0x42, 0x40, 0x40, 0x40, 0x3E, 0x3E, 0x3E, 0x3C, 0x3D, 0x3C, 0x3E, 
   0x3C, 0x3E, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 
   0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 
   0x33, 0x35, 0x33, 0x35, 0x34, 0x35, 0x34, 0x35, 0x33, 0x35, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x32, 0x31, 0x32, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 0x2E, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 
   0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x42, 0x44, 0x42, 0x44, 0x43, 0x44, 0x42, 0x41, 0x42, 0x40, 
   0x40, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 
   0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x3E, 0x3E, 0x3E, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3C, 
   0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3E, 0x3D, 0x40, 0x40, 0x40, 0x43, 0x44, 0x43, 0x45, 0x44, 
   0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x46, 0x44, 0x46, 0x44, 0x43, 0x44, 
   0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x3E, 
   0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3E, 0x40, 0x3E, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x42, 0x43, 0x42, 
   0x43, 0x44, 0x43, 0x43, 0x45, 0x43, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x44, 0x43, 0x44, 0x41, 0x41, 
   0x41, 0x40, 0x40, 0x40, 0x3E, 0x3F, 0x3E, 0x41, 0x40, 0x41, 0x43, 0x42, 0x43, 0x42, 0x44, 0x42, 
   0x44, 0x44, 0x44, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x40, 
   0x41, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3F, 0x3E, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 
   0x3F, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x43, 0x42, 0x43, 0x43, 0x44, 0x43, 0x44, 0x45, 0x44, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x49, 0x48, 0x4A, 0x49, 0x4A, 0x4A, 0x4B, 0x4A, 0x4C, 0x4C, 0x4C, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 
   0x4E, 0x4E, 0x4F, 0x4E, 0x4F, 0x50, 0x4F, 0x4F, 0x50, 0x4F, 0x4F, 0x51, 0x4F, 0x51, 0x50, 0x51, 
   0x50, 0x51, 0x50, 0x51, 0x51, 0x51, 0x51, 0x52, 0x51, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 
   0x52, 0x53, 0x51, 0x52, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x50, 0x50, 
   0x50, 0x4F, 0x4F, 0x4F, 0x4E, 0x4F, 0x4E, 0x4C, 0x4D, 0x4C, 0x4C, 0x4D, 0x4C, 0x4B, 0x4B, 0x4B, 
   0x4E, 0x4D, 0x4E, 0x3A, 0x39, 0x3A, 0x33, 0x34, 0x33, 0x61, 0x64, 0x61, 0x50, 0x4F, 0x50, 0x41, 
   0x3F, 0x41, 0x33, 0x32, 0x33, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x49, 0x4A, 0x49, 
   0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 0x4C, 0x4B, 0x4B, 0x4B, 0x4A, 0x49, 0x4A, 0x47, 
   0x47, 0x47, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x44, 0x44, 0x44, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x49, 0x49, 0x49, 0x43, 0x43, 0x43, 0x4A, 
   0x4C, 0x4A, 0x73, 0x71, 0x73, 0x52, 0x53, 0x52, 0x4A, 0x4B, 0x4A, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 
   0x4E, 0x4F, 0x4F, 0x4F, 0x52, 0x52, 0x52, 0x54, 0x54, 0x54, 0x46, 0x45, 0x46, 0x45, 0x46, 0x45, 
   0x42, 0x42, 0x42, 0x49, 0x4A, 0x49, 0x4E, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4B, 0x4A, 0x4B, 0x49, 0x4A, 0x49, 0x48, 0x49, 
   0x48, 0x49, 0x4A, 0x49, 0x4A, 0x49, 0x4A, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 
   0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3E, 0x3F, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 
   0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3B, 0x3C, 0x3B, 0x3A, 0x3B, 0x39, 0x38, 0x39, 
   0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x34, 0x33, 0x34, 0x33, 0x32, 0x33, 0x31, 
   0x33, 0x31, 0x32, 0x33, 0x32, 0x35, 0x33, 0x35, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x34, 0x34, 
   0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x37, 
   0x38, 0x37, 0x38, 0x38, 0x38, 0x37, 0x39, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x38, 
   0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x35, 0x35, 0x35, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x32, 0x33, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x30, 
   0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2D, 
   0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x41, 0x41, 0x41, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x41, 
   0x41, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 
   0x41, 0x42, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3E, 0x3E, 0x3C, 0x3D, 0x3C, 0x3B, 
   0x3D, 0x3B, 0x3C, 0x3D, 0x3C, 0x40, 0x3F, 0x40, 0x40, 0x42, 0x40, 0x44, 0x43, 0x44, 0x45, 0x45, 
   0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 
   0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 
   0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x46, 0x45, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x47, 
   0x47, 0x47, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x43, 0x43, 0x43, 0x41, 0x42, 
   0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x44, 0x44, 0x44, 
   0x45, 0x45, 0x45, 0x44, 0x46, 0x44, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x42, 0x43, 0x42, 0x41, 
   0x42, 0x41, 0x3F, 0x41, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 
   0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x45, 0x45, 0x45, 0x45, 0x47, 0x45, 0x49, 0x48, 0x49, 0x48, 
   0x49, 0x48, 0x4A, 0x4A, 0x4A, 0x4C, 0x4C, 0x4C, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 
   0x4E, 0x4E, 0x4F, 0x4E, 0x50, 0x50, 0x50, 0x50, 0x51, 0x50, 0x50, 0x51, 0x50, 0x52, 0x52, 0x52, 
   0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x53, 0x52, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 
   0x53, 0x53, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 0x50, 0x50, 
   0x50, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 
   0x49, 0x49, 0x49, 0x54, 0x51, 0x54, 0x5E, 0x5E, 0x5E, 0x45, 0x47, 0x45, 0x39, 0x38, 0x39, 0x42, 
   0x42, 0x42, 0x33, 0x32, 0x33, 0x45, 0x45, 0x45, 0x49, 0x48, 0x49, 0x47, 0x47, 0x47, 0x48, 0x47, 
   0x48, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x4A, 0x4B, 0x4A, 
   0x4C, 0x4D, 0x4C, 0x4C, 0x4E, 0x4C, 0x4E, 0x4E, 0x4E, 0x4B, 0x4C, 0x4B, 0x4B, 0x49, 0x4B, 0x47, 
   0x47, 0x47, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 
   0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 
   0x43, 0x44, 0x43, 0x44, 0x45, 0x44, 0x46, 0x47, 0x46, 0x4A, 0x4A, 0x4A, 0x3C, 0x3A, 0x3C, 0x31, 
   0x32, 0x31, 0x69, 0x69, 0x69, 0x50, 0x50, 0x50, 0x4D, 0x4C, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4F, 
   0x4E, 0x4F, 0x50, 0x4F, 0x53, 0x54, 0x53, 0x44, 0x43, 0x44, 0x54, 0x54, 0x54, 0x46, 0x46, 0x46, 
   0x3E, 0x3E, 0x3E, 0x4E, 0x4F, 0x4E, 0x4F, 0x4F, 0x4F, 0x4E, 0x4E, 0x4E, 0x4C, 0x4C, 0x4C, 0x4C, 
   0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 
   0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 
   0x46, 0x47, 0x46, 0x44, 0x45, 0x44, 0x44, 0x43, 0x44, 0x41, 0x41, 0x41, 0x40, 0x3F, 0x40, 0x40, 
   0x3E, 0x40, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 
   0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3C, 0x3E, 0x3B, 0x3B, 0x3B, 0x39, 0x39, 0x39, 
   0x38, 0x38, 0x38, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x33, 0x34, 0x33, 0x32, 
   0x34, 0x32, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 
   0x35, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 
   0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x37, 0x36, 0x37, 0x38, 0x37, 0x38, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 
   0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x32, 0x33, 0x32, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x30, 0x2E, 0x30, 0x2E, 0x2E, 0x2E, 0x2D, 
   0x2E, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2B, 0x2A, 0x2A, 0x2B, 0x2A, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x41, 0x41, 
   0x41, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x41, 0x42, 0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3E, 0x3F, 0x3F, 0x40, 0x3F, 0x41, 0x41, 0x41, 0x43, 0x42, 0x43, 0x45, 0x44, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 
   0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x40, 
   0x41, 0x40, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x41, 0x41, 
   0x41, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x42, 0x44, 0x42, 0x43, 0x42, 
   0x44, 0x44, 0x44, 0x46, 0x45, 0x46, 0x44, 0x45, 0x44, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x47, 
   0x48, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x44, 0x46, 0x44, 0x43, 0x44, 0x43, 0x42, 0x42, 
   0x42, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x42, 0x43, 0x42, 0x43, 0x44, 0x43, 0x46, 0x45, 0x46, 
   0x44, 0x46, 0x44, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x42, 
   0x42, 0x42, 0x40, 0x42, 0x40, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 0x3F, 0x40, 
   0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 
   0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x49, 
   0x48, 0x49, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4C, 0x4D, 0x4C, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 
   0x4E, 0x50, 0x50, 0x50, 0x51, 0x51, 0x51, 0x50, 0x52, 0x50, 0x51, 0x51, 0x51, 0x52, 0x53, 0x52, 
   0x52, 0x53, 0x52, 0x53, 0x53, 0x53, 0x52, 0x53, 0x52, 0x53, 0x54, 0x53, 0x53, 0x53, 0x53, 0x53, 
   0x52, 0x53, 0x51, 0x52, 0x51, 0x51, 0x51, 0x51, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 0x51, 0x51, 
   0x51, 0x50, 0x50, 0x50, 0x4F, 0x50, 0x4F, 0x4F, 0x4F, 0x4F, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 
   0x60, 0x62, 0x60, 0x73, 0x71, 0x73, 0x6B, 0x6A, 0x6B, 0x40, 0x40, 0x40, 0x22, 0x22, 0x22, 0x3B, 
   0x3A, 0x3B, 0x36, 0x37, 0x36, 0x44, 0x46, 0x44, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 0x49, 0x4A, 0x49, 0x4A, 0x4B, 0x4A, 
   0x4C, 0x4C, 0x4C, 0x4E, 0x4F, 0x4E, 0x4F, 0x4E, 0x4F, 0x4D, 0x4C, 0x4D, 0x4A, 0x4B, 0x4A, 0x47, 
   0x48, 0x47, 0x45, 0x47, 0x45, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 
   0x42, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 
   0x43, 0x44, 0x43, 0x45, 0x44, 0x45, 0x45, 0x47, 0x45, 0x4A, 0x4A, 0x4A, 0x3B, 0x3B, 0x3B, 0x0D, 
   0x0B, 0x0D, 0x3B, 0x3B, 0x3B, 0x4F, 0x4F, 0x4F, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x4E, 0x51, 0x51, 0x51, 0x47, 0x46, 0x47, 0x24, 0x25, 0x24, 0x52, 0x54, 0x52, 0x41, 0x41, 0x41, 
   0x40, 0x41, 0x40, 0x4F, 0x50, 0x4F, 0x4F, 0x50, 0x4F, 0x4C, 0x4E, 0x4C, 0x4C, 0x4D, 0x4C, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4C, 0x4D, 0x4C, 0x4B, 0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 
   0x4C, 0x4B, 0x4C, 0x4B, 0x4A, 0x4B, 0x4A, 0x4B, 0x4A, 0x4B, 0x48, 0x4A, 0x48, 0x49, 0x49, 0x49, 
   0x48, 0x48, 0x48, 0x45, 0x46, 0x45, 0x44, 0x43, 0x44, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3C, 0x3D, 0x3C, 0x3C, 0x3B, 0x3C, 0x39, 0x3A, 0x39, 
   0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x38, 0x37, 0x38, 0x35, 0x36, 0x35, 0x34, 
   0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 
   0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 
   0x3A, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x3A, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x39, 0x37, 0x38, 0x37, 0x38, 0x35, 0x36, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x32, 0x32, 0x32, 0x33, 0x31, 0x33, 0x31, 0x31, 0x31, 0x31, 
   0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x31, 0x31, 
   0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 
   0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2B, 
   0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 
   0x2A, 0x2B, 0x29, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x3F, 0x40, 0x40, 
   0x3F, 0x40, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 
   0x40, 0x42, 0x41, 0x42, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 
   0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x42, 0x41, 0x43, 0x42, 0x43, 0x44, 0x45, 0x44, 0x44, 0x46, 0x44, 0x46, 0x46, 
   0x46, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 
   0x45, 0x45, 0x45, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x41, 
   0x42, 0x41, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 
   0x40, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 
   0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x47, 
   0x47, 0x47, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x43, 0x43, 
   0x43, 0x41, 0x42, 0x41, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x46, 0x44, 0x46, 0x45, 0x45, 0x45, 
   0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x44, 0x46, 0x44, 0x44, 
   0x43, 0x44, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3F, 0x41, 
   0x3F, 0x3F, 0x41, 0x3F, 0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 
   0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x47, 0x45, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4C, 0x4C, 0x4C, 0x4E, 0x4E, 0x4E, 0x50, 0x50, 
   0x50, 0x51, 0x51, 0x51, 0x52, 0x52, 0x52, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 0x51, 0x53, 0x51, 
   0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x54, 0x53, 0x54, 0x54, 0x54, 0x53, 0x53, 0x53, 0x52, 
   0x53, 0x52, 0x51, 0x52, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x52, 0x52, 
   0x52, 0x51, 0x52, 0x51, 0x50, 0x52, 0x50, 0x4F, 0x4F, 0x4F, 0x4C, 0x4D, 0x4C, 0x4A, 0x4B, 0x4A, 
   0x6E, 0x6F, 0x6E, 0x78, 0x78, 0x78, 0x51, 0x50, 0x51, 0x41, 0x3F, 0x41, 0x24, 0x24, 0x24, 0x44, 
   0x44, 0x44, 0x4E, 0x4E, 0x4E, 0x49, 0x4A, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 
   0x48, 0x48, 0x49, 0x48, 0x4A, 0x4A, 0x4A, 0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 
   0x4E, 0x4D, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4D, 0x4E, 0x4D, 0x4A, 0x4B, 0x4A, 0x48, 
   0x49, 0x48, 0x47, 0x46, 0x47, 0x45, 0x44, 0x45, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 
   0x42, 0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 
   0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x46, 0x46, 0x46, 0x4A, 0x49, 0x4A, 0x44, 0x46, 0x44, 0x0A, 
   0x0B, 0x0A, 0x09, 0x09, 0x09, 0x3C, 0x3D, 0x3C, 0x4C, 0x4D, 0x4C, 0x4C, 0x4D, 0x4C, 0x4E, 0x4D, 
   0x4E, 0x52, 0x52, 0x52, 0x3D, 0x3D, 0x3D, 0x1F, 0x20, 0x1F, 0x53, 0x53, 0x53, 0x51, 0x51, 0x51, 
   0x51, 0x52, 0x51, 0x4F, 0x50, 0x4F, 0x4F, 0x4F, 0x4F, 0x4E, 0x4E, 0x4E, 0x4C, 0x4D, 0x4C, 0x4B, 
   0x4D, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4E, 0x4D, 0x4E, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 
   0x4D, 0x4E, 0x4D, 0x4E, 0x4C, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x49, 0x4B, 0x49, 0x4A, 0x4A, 0x4A, 
   0x48, 0x49, 0x48, 0x47, 0x47, 0x47, 0x45, 0x45, 0x45, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x40, 
   0x40, 0x40, 0x3F, 0x40, 0x3F, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x3F, 
   0x40, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 
   0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x37, 
   0x36, 0x37, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 
   0x37, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x37, 0x38, 0x38, 0x37, 0x38, 
   0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x36, 0x37, 0x36, 
   0x35, 0x36, 0x35, 0x33, 0x34, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x32, 
   0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x31, 
   0x32, 0x30, 0x31, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 
   0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 
   0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 
   0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x3C, 0x3C, 0x3C, 0x3E, 0x3D, 0x3E, 0x3F, 0x3D, 0x3F, 0x3F, 
   0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x40, 0x40, 0x40, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 
   0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x44, 0x43, 0x46, 0x44, 0x46, 0x45, 0x46, 0x45, 0x45, 0x47, 0x45, 0x45, 0x46, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x44, 0x46, 0x44, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 
   0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 
   0x42, 0x41, 0x40, 0x40, 0x40, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 
   0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x47, 
   0x48, 0x47, 0x48, 0x47, 0x48, 0x46, 0x46, 0x46, 0x44, 0x47, 0x44, 0x46, 0x44, 0x46, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 
   0x44, 0x46, 0x44, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x45, 0x47, 0x45, 0x46, 0x46, 0x46, 0x44, 
   0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x40, 0x41, 
   0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 
   0x49, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x4B, 0x4A, 0x4C, 0x4C, 0x4C, 0x4F, 0x4E, 0x4F, 0x4F, 0x4F, 
   0x4F, 0x52, 0x51, 0x52, 0x52, 0x52, 0x52, 0x52, 0x53, 0x52, 0x52, 0x52, 0x52, 0x52, 0x53, 0x52, 
   0x53, 0x54, 0x53, 0x53, 0x54, 0x53, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x53, 0x53, 0x53, 0x52, 
   0x53, 0x52, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x52, 0x52, 
   0x52, 0x53, 0x53, 0x53, 0x51, 0x52, 0x51, 0x4D, 0x4D, 0x4D, 0x4A, 0x4A, 0x4A, 0x63, 0x61, 0x63, 
   0x70, 0x6F, 0x70, 0x5A, 0x5B, 0x5A, 0x4B, 0x4B, 0x4B, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x4D, 
   0x4E, 0x4D, 0x4A, 0x4B, 0x4A, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x48, 0x49, 
   0x48, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4D, 0x4C, 0x4D, 
   0x4C, 0x4E, 0x4C, 0x4F, 0x50, 0x4F, 0x4E, 0x4F, 0x4E, 0x4D, 0x4E, 0x4D, 0x4A, 0x4B, 0x4A, 0x47, 
   0x48, 0x47, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x42, 0x41, 0x42, 0x41, 0x41, 
   0x41, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3E, 0x40, 0x41, 0x40, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 
   0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x45, 0x46, 0x45, 0x49, 0x48, 0x49, 0x4C, 0x4D, 0x4C, 0x22, 
   0x22, 0x22, 0x00, 0x00, 0x00, 0x06, 0x06, 0x06, 0x31, 0x30, 0x31, 0x4F, 0x4F, 0x4F, 0x4D, 0x4D, 
   0x4D, 0x50, 0x50, 0x50, 0x44, 0x44, 0x44, 0x29, 0x29, 0x29, 0x52, 0x53, 0x52, 0x4F, 0x50, 0x4F, 
   0x4F, 0x4E, 0x4F, 0x52, 0x52, 0x52, 0x54, 0x54, 0x54, 0x4D, 0x4F, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 
   0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 0x4C, 0x4E, 0x4D, 0x4E, 0x4E, 0x4F, 
   0x4E, 0x4D, 0x4F, 0x4D, 0x4E, 0x4D, 0x4E, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 
   0x48, 0x49, 0x48, 0x48, 0x47, 0x48, 0x46, 0x46, 0x46, 0x44, 0x43, 0x44, 0x42, 0x42, 0x42, 0x40, 
   0x41, 0x40, 0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x41, 0x41, 0x41, 0x3F, 0x40, 
   0x3F, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3D, 0x3B, 0x3D, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x38, 0x38, 0x38, 0x37, 
   0x38, 0x37, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x35, 0x36, 
   0x35, 0x37, 0x36, 0x37, 0x38, 0x37, 0x38, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 
   0x39, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 
   0x36, 0x35, 0x36, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 
   0x32, 0x31, 0x31, 0x31, 0x30, 0x2F, 0x30, 0x2D, 0x2F, 0x2D, 0x2F, 0x2D, 0x2F, 0x2D, 0x2D, 0x2D, 
   0x2B, 0x2B, 0x2B, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 
   0x29, 0x2B, 0x28, 0x29, 0x28, 0x28, 0x29, 0x28, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
   0x28, 0x27, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x29, 0x28, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 
   0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 
   0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3F, 0x40, 
   0x3F, 0x40, 0x41, 0x40, 0x43, 0x42, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 
   0x43, 0x44, 0x43, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x46, 
   0x44, 0x46, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x45, 0x46, 
   0x45, 0x45, 0x45, 0x45, 0x44, 0x46, 0x44, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 
   0x42, 0x44, 0x42, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x41, 0x42, 0x41, 0x41, 
   0x42, 0x41, 0x41, 0x40, 0x41, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3F, 0x40, 
   0x3F, 0x40, 0x41, 0x40, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 
   0x43, 0x44, 0x43, 0x44, 0x45, 0x44, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x44, 0x46, 0x44, 0x43, 0x44, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 
   0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x46, 
   0x44, 0x46, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x40, 0x42, 0x40, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 
   0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x47, 
   0x48, 0x47, 0x49, 0x49, 0x49, 0x4A, 0x4B, 0x4A, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 0x50, 0x51, 
   0x50, 0x52, 0x53, 0x52, 0x52, 0x53, 0x52, 0x52, 0x53, 0x52, 0x52, 0x53, 0x52, 0x53, 0x53, 0x53, 
   0x53, 0x54, 0x53, 0x53, 0x54, 0x53, 0x54, 0x55, 0x54, 0x54, 0x54, 0x54, 0x53, 0x54, 0x53, 0x53, 
   0x52, 0x53, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 0x52, 0x52, 0x52, 0x52, 0x53, 
   0x52, 0x53, 0x53, 0x53, 0x53, 0x52, 0x53, 0x4F, 0x4F, 0x4F, 0x51, 0x51, 0x51, 0x74, 0x74, 0x74, 
   0x69, 0x69, 0x69, 0x4A, 0x4C, 0x4A, 0x43, 0x43, 0x43, 0x3A, 0x39, 0x3A, 0x44, 0x44, 0x44, 0x44, 
   0x46, 0x44, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x49, 0x4A, 
   0x49, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4C, 0x4B, 0x4D, 0x4B, 
   0x4D, 0x4E, 0x4D, 0x4F, 0x4F, 0x4F, 0x51, 0x50, 0x51, 0x4D, 0x4E, 0x4D, 0x4B, 0x4B, 0x4B, 0x48, 
   0x48, 0x48, 0x47, 0x46, 0x47, 0x45, 0x44, 0x45, 0x42, 0x43, 0x42, 0x41, 0x41, 0x41, 0x3F, 0x40, 
   0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 
   0x42, 0x43, 0x42, 0x43, 0x44, 0x43, 0x46, 0x45, 0x46, 0x46, 0x47, 0x46, 0x4C, 0x4B, 0x4C, 0x3B, 
   0x3D, 0x3B, 0x0F, 0x10, 0x0F, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x4A, 0x49, 0x4A, 0x4D, 0x4D, 
   0x4D, 0x4E, 0x4D, 0x4E, 0x52, 0x52, 0x52, 0x38, 0x38, 0x38, 0x3C, 0x3C, 0x3C, 0x4F, 0x50, 0x4F, 
   0x4F, 0x4F, 0x4F, 0x50, 0x51, 0x50, 0x57, 0x57, 0x57, 0x50, 0x50, 0x50, 0x4C, 0x4C, 0x4C, 0x4B, 
   0x4D, 0x4B, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4D, 0x4D, 0x4C, 0x4B, 0x4C, 0x4A, 0x4B, 0x4A, 
   0x49, 0x4A, 0x49, 0x47, 0x47, 0x47, 0x45, 0x47, 0x45, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x41, 
   0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x40, 0x3E, 0x40, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x3A, 0x3B, 0x3A, 0x3A, 0x39, 0x3A, 0x38, 
   0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x37, 0x37, 
   0x37, 0x38, 0x37, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 
   0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 
   0x35, 0x36, 0x35, 0x33, 0x35, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x32, 0x33, 
   0x32, 0x31, 0x32, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2B, 0x2B, 0x2B, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x28, 0x28, 0x28, 0x2A, 0x28, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 
   0x28, 0x29, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
   0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 
   0x27, 0x28, 0x27, 0x28, 0x28, 0x28, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3C, 
   0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 
   0x3D, 0x41, 0x40, 0x41, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x47, 0x46, 0x46, 
   0x46, 0x46, 0x47, 0x46, 0x47, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x45, 0x46, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x46, 0x45, 0x46, 0x43, 0x43, 0x43, 
   0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x3F, 0x41, 0x3F, 0x40, 0x41, 0x40, 0x41, 
   0x41, 0x41, 0x40, 0x3F, 0x40, 0x3E, 0x3E, 0x3E, 0x3B, 0x3E, 0x3B, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x43, 0x42, 
   0x43, 0x44, 0x43, 0x45, 0x44, 0x45, 0x45, 0x46, 0x45, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x49, 
   0x48, 0x49, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x44, 0x43, 
   0x44, 0x42, 0x43, 0x42, 0x42, 0x44, 0x42, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 
   0x44, 0x46, 0x44, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 
   0x45, 0x44, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x42, 0x44, 0x44, 0x44, 
   0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x46, 0x46, 0x46, 0x48, 
   0x47, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x4B, 0x4A, 0x4C, 0x4C, 0x4C, 0x50, 0x4F, 0x50, 0x50, 0x51, 
   0x50, 0x51, 0x52, 0x51, 0x52, 0x53, 0x52, 0x52, 0x53, 0x52, 0x52, 0x53, 0x52, 0x54, 0x53, 0x54, 
   0x54, 0x54, 0x54, 0x54, 0x55, 0x54, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x53, 0x54, 0x53, 0x52, 
   0x53, 0x52, 0x52, 0x52, 0x52, 0x52, 0x53, 0x52, 0x52, 0x53, 0x52, 0x52, 0x53, 0x52, 0x52, 0x53, 
   0x52, 0x52, 0x53, 0x52, 0x4D, 0x4E, 0x4D, 0x5A, 0x5A, 0x5A, 0x6D, 0x6B, 0x6D, 0x61, 0x63, 0x61, 
   0x53, 0x56, 0x53, 0x48, 0x46, 0x48, 0x3B, 0x3A, 0x3B, 0x47, 0x46, 0x47, 0x4E, 0x4F, 0x4E, 0x47, 
   0x48, 0x47, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 
   0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x4D, 0x4D, 0x4D, 
   0x4E, 0x4E, 0x4E, 0x4F, 0x50, 0x4F, 0x4F, 0x50, 0x4F, 0x4D, 0x4E, 0x4D, 0x4B, 0x4B, 0x4B, 0x47, 
   0x49, 0x47, 0x45, 0x46, 0x45, 0x43, 0x44, 0x43, 0x43, 0x42, 0x43, 0x42, 0x41, 0x42, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 
   0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x45, 0x45, 0x45, 0x48, 0x47, 0x48, 0x48, 0x49, 0x48, 0x4B, 
   0x4C, 0x4B, 0x4B, 0x4A, 0x4B, 0x13, 0x14, 0x13, 0x01, 0x00, 0x01, 0x3F, 0x3F, 0x3F, 0x4F, 0x50, 
   0x4F, 0x4D, 0x4D, 0x4D, 0x51, 0x51, 0x51, 0x2F, 0x31, 0x2F, 0x39, 0x39, 0x39, 0x4F, 0x4F, 0x4F, 
   0x4C, 0x4D, 0x4C, 0x4E, 0x4E, 0x4E, 0x56, 0x56, 0x56, 0x4F, 0x4F, 0x4F, 0x4B, 0x4C, 0x4B, 0x4D, 
   0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4F, 0x4D, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4C, 0x4D, 0x4C, 0x4A, 0x4C, 0x4A, 0x4A, 0x4B, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x48, 0x48, 0x48, 0x46, 0x46, 0x46, 0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 
   0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x41, 
   0x42, 0x3F, 0x40, 0x3F, 0x41, 0x40, 0x41, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 
   0x3F, 0x3E, 0x3F, 0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 
   0x39, 0x39, 0x38, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 
   0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x39, 0x3A, 0x38, 0x39, 0x38, 0x38, 0x37, 0x38, 
   0x36, 0x35, 0x36, 0x34, 0x35, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x31, 0x33, 0x31, 0x32, 
   0x33, 0x32, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x33, 
   0x33, 0x31, 0x32, 0x31, 0x30, 0x30, 0x30, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2B, 0x2C, 
   0x2B, 0x2B, 0x2B, 0x2A, 0x28, 0x2A, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
   0x28, 0x28, 0x28, 0x28, 0x2A, 0x28, 0x2A, 0x2A, 0x28, 0x2A, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
   0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x39, 0x3A, 0x39, 0x3B, 0x3A, 0x3B, 0x3B, 0x3C, 0x3B, 0x3D, 
   0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3E, 0x3F, 
   0x3E, 0x40, 0x41, 0x40, 0x43, 0x43, 0x43, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 
   0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x41, 0x43, 0x41, 
   0x42, 0x41, 0x42, 0x41, 0x40, 0x41, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x3D, 0x3F, 0x3D, 0x3E, 0x3D, 0x3D, 0x3E, 0x3D, 0x3F, 0x3E, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 
   0x43, 0x43, 0x43, 0x44, 0x45, 0x44, 0x46, 0x47, 0x46, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x46, 0x45, 0x46, 0x44, 0x45, 0x44, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x45, 
   0x44, 0x45, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x48, 
   0x47, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x4B, 0x4A, 0x4D, 0x4C, 0x4D, 0x50, 0x4F, 0x50, 0x51, 0x51, 
   0x51, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 0x52, 0x53, 0x52, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 
   0x55, 0x54, 0x55, 0x54, 0x55, 0x54, 0x56, 0x55, 0x56, 0x56, 0x55, 0x56, 0x55, 0x55, 0x55, 0x53, 
   0x54, 0x53, 0x54, 0x53, 0x54, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x50, 0x51, 
   0x50, 0x59, 0x58, 0x59, 0x64, 0x64, 0x64, 0x78, 0x78, 0x78, 0x84, 0x84, 0x84, 0x59, 0x5A, 0x59, 
   0x4B, 0x4B, 0x4B, 0x3E, 0x3F, 0x3E, 0x45, 0x47, 0x45, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x48, 
   0x47, 0x48, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x4B, 
   0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4C, 0x4D, 0x4C, 0x4C, 0x4D, 0x4C, 0x4E, 0x4D, 0x4E, 
   0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4C, 0x4D, 0x4C, 0x4A, 0x4B, 0x4A, 0x48, 
   0x48, 0x48, 0x46, 0x46, 0x46, 0x43, 0x45, 0x43, 0x43, 0x42, 0x43, 0x41, 0x41, 0x41, 0x40, 0x40, 
   0x40, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 
   0x43, 0x42, 0x43, 0x43, 0x44, 0x43, 0x46, 0x45, 0x46, 0x47, 0x47, 0x47, 0x48, 0x49, 0x48, 0x48, 
   0x49, 0x48, 0x51, 0x50, 0x51, 0x31, 0x31, 0x31, 0x01, 0x01, 0x01, 0x19, 0x19, 0x19, 0x4C, 0x4B, 
   0x4C, 0x4F, 0x50, 0x4F, 0x4E, 0x4F, 0x4E, 0x35, 0x34, 0x35, 0x41, 0x41, 0x41, 0x4F, 0x50, 0x4F, 
   0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x52, 0x52, 0x52, 0x4C, 0x4D, 0x4C, 0x4A, 0x4C, 0x4A, 0x4C, 
   0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4B, 0x4D, 0x4B, 0x4B, 0x4C, 0x4B, 0x4A, 0x4B, 0x4A, 
   0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x46, 0x47, 0x46, 0x45, 0x46, 0x45, 0x44, 0x45, 0x43, 
   0x43, 0x43, 0x44, 0x43, 0x44, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3E, 0x3F, 0x3F, 0x3D, 0x3F, 0x3E, 0x3D, 0x3E, 0x3B, 0x3C, 0x3B, 0x3A, 0x3A, 0x3A, 0x3B, 
   0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x38, 0x38, 0x38, 0x36, 0x37, 0x36, 
   0x35, 0x36, 0x35, 0x35, 0x34, 0x35, 0x34, 0x33, 0x34, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x35, 
   0x34, 0x35, 0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x33, 0x33, 
   0x33, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 0x2C, 0x2C, 
   0x2A, 0x2B, 0x2A, 0x29, 0x28, 0x29, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x27, 
   0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x28, 0x29, 
   0x28, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 
   0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 0x39, 0x3A, 0x39, 0x3B, 0x3A, 0x3B, 0x3D, 0x3B, 0x3D, 0x3C, 
   0x3C, 0x3C, 0x3D, 0x3B, 0x3D, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3E, 0x3E, 
   0x3E, 0x41, 0x41, 0x41, 0x43, 0x43, 0x43, 0x44, 0x46, 0x44, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 
   0x49, 0x48, 0x48, 0x49, 0x48, 0x46, 0x47, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 
   0x44, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x43, 0x43, 0x43, 0x41, 0x42, 0x41, 
   0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 
   0x3E, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x42, 0x43, 0x42, 
   0x43, 0x44, 0x43, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 
   0x49, 0x49, 0x48, 0x49, 0x48, 0x46, 0x47, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 
   0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x44, 
   0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x47, 
   0x48, 0x47, 0x49, 0x49, 0x49, 0x4D, 0x4B, 0x4D, 0x4D, 0x4E, 0x4D, 0x4F, 0x50, 0x4F, 0x50, 0x51, 
   0x50, 0x51, 0x51, 0x51, 0x51, 0x52, 0x51, 0x53, 0x53, 0x53, 0x54, 0x55, 0x54, 0x55, 0x55, 0x55, 
   0x54, 0x56, 0x54, 0x56, 0x57, 0x56, 0x56, 0x56, 0x56, 0x55, 0x57, 0x55, 0x55, 0x55, 0x55, 0x54, 
   0x54, 0x54, 0x54, 0x54, 0x54, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x54, 0x53, 0x59, 0x57, 
   0x59, 0x68, 0x69, 0x68, 0x86, 0x87, 0x86, 0x8B, 0x8C, 0x8B, 0x60, 0x60, 0x60, 0x45, 0x44, 0x45, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x41, 0x3F, 0x40, 0x42, 0x40, 0x46, 0x47, 0x46, 0x45, 0x46, 0x45, 0x48, 
   0x47, 0x48, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x48, 0x49, 0x48, 0x48, 0x4A, 0x48, 0x4A, 0x4B, 
   0x4A, 0x4B, 0x4B, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4C, 0x4D, 0x4C, 0x4C, 0x4D, 0x4C, 0x4A, 0x4B, 0x4A, 0x47, 
   0x48, 0x47, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x3F, 0x40, 
   0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 
   0x49, 0x48, 0x4B, 0x4B, 0x4B, 0x47, 0x48, 0x47, 0x1D, 0x1B, 0x1D, 0x00, 0x00, 0x00, 0x18, 0x17, 
   0x18, 0x44, 0x43, 0x44, 0x50, 0x50, 0x50, 0x4A, 0x49, 0x4A, 0x3D, 0x3D, 0x3D, 0x44, 0x45, 0x44, 
   0x50, 0x51, 0x50, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4C, 
   0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4E, 0x4F, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4C, 0x4C, 0x4C, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 
   0x4A, 0x49, 0x4A, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 
   0x45, 0x44, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3E, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3B, 0x3C, 0x3B, 0x3D, 0x3B, 0x3D, 0x3B, 
   0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 
   0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3E, 0x3D, 0x3E, 0x3D, 0x3F, 
   0x3D, 0x3E, 0x3F, 0x3E, 0x3D, 0x3D, 0x3D, 0x3A, 0x3A, 0x3A, 0x37, 0x38, 0x37, 0x35, 0x36, 0x35, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 
   0x35, 0x33, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x34, 0x35, 0x34, 0x33, 0x33, 
   0x33, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2A, 0x2C, 0x29, 0x29, 0x29, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x26, 0x28, 0x26, 
   0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 
   0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x39, 0x3A, 0x39, 0x3B, 0x3A, 0x3B, 0x3C, 0x3C, 0x3C, 0x3D, 
   0x3C, 0x3D, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3E, 0x3D, 
   0x3E, 0x3F, 0x40, 0x3F, 0x42, 0x43, 0x42, 0x46, 0x45, 0x46, 0x48, 0x47, 0x48, 0x48, 0x49, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x49, 
   0x49, 0x49, 0x49, 0x49, 0x49, 0x47, 0x48, 0x47, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x43, 0x43, 0x43, 0x42, 0x41, 0x42, 
   0x40, 0x40, 0x40, 0x3E, 0x3F, 0x3E, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x40, 0x3F, 0x40, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 
   0x44, 0x43, 0x44, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x49, 
   0x49, 0x49, 0x49, 0x49, 0x49, 0x47, 0x48, 0x47, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x46, 0x44, 0x45, 0x46, 0x45, 
   0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x42, 0x44, 0x42, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x42, 0x42, 0x42, 0x41, 0x41, 
   0x41, 0x40, 0x42, 0x40, 0x42, 0x42, 0x42, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x47, 
   0x48, 0x47, 0x4A, 0x4A, 0x4A, 0x4B, 0x4D, 0x4B, 0x4D, 0x4E, 0x4D, 0x4F, 0x50, 0x4F, 0x51, 0x51, 
   0x51, 0x51, 0x51, 0x51, 0x52, 0x52, 0x52, 0x52, 0x54, 0x52, 0x54, 0x55, 0x54, 0x55, 0x55, 0x55, 
   0x55, 0x56, 0x55, 0x56, 0x56, 0x56, 0x56, 0x57, 0x56, 0x56, 0x56, 0x56, 0x55, 0x55, 0x55, 0x54, 
   0x54, 0x54, 0x54, 0x54, 0x54, 0x53, 0x54, 0x53, 0x52, 0x53, 0x52, 0x4E, 0x4F, 0x4E, 0x5A, 0x5A, 
   0x5A, 0x72, 0x71, 0x72, 0x7C, 0x7D, 0x7C, 0x5D, 0x5E, 0x5D, 0x39, 0x3A, 0x39, 0x3F, 0x40, 0x3F, 
   0x4C, 0x4D, 0x4C, 0x41, 0x42, 0x41, 0x43, 0x44, 0x43, 0x48, 0x49, 0x48, 0x48, 0x47, 0x48, 0x47, 
   0x46, 0x47, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 
   0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 
   0x4E, 0x4F, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4A, 0x4A, 0x4A, 0x46, 
   0x47, 0x46, 0x45, 0x45, 0x45, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x40, 0x40, 
   0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 
   0x44, 0x42, 0x44, 0x43, 0x44, 0x43, 0x46, 0x45, 0x46, 0x47, 0x46, 0x47, 0x48, 0x47, 0x48, 0x48, 
   0x48, 0x48, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x3E, 0x3D, 0x3E, 0x0B, 0x0B, 0x0B, 0x00, 0x00, 
   0x00, 0x20, 0x22, 0x20, 0x4F, 0x4F, 0x4F, 0x52, 0x51, 0x52, 0x4D, 0x4C, 0x4D, 0x35, 0x35, 0x35, 
   0x45, 0x46, 0x45, 0x4B, 0x4D, 0x4B, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4D, 
   0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 
   0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x44, 0x45, 0x44, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x42, 0x44, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x3E, 0x40, 0x3E, 
   0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x3E, 0x40, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3E, 0x3D, 0x3E, 0x3D, 0x3C, 
   0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3F, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 
   0x3D, 0x3D, 0x3D, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3E, 0x3D, 0x3E, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3D, 0x3E, 0x3D, 0x3A, 0x3A, 0x3A, 0x38, 0x38, 0x38, 0x36, 0x37, 0x36, 
   0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x33, 
   0x34, 0x33, 0x31, 0x33, 0x31, 0x30, 0x31, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2B, 0x2C, 0x2B, 
   0x2A, 0x2B, 0x2A, 0x29, 0x29, 0x29, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x27, 0x26, 0x27, 0x26, 
   0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 
   0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 0x3D, 
   0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3D, 0x3E, 
   0x3D, 0x41, 0x41, 0x41, 0x42, 0x43, 0x42, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 
   0x49, 0x49, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 
   0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x42, 0x44, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 
   0x42, 0x44, 0x42, 0x46, 0x45, 0x46, 0x47, 0x47, 0x47, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x49, 
   0x49, 0x49, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x44, 
   0x45, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x43, 0x44, 0x42, 0x44, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x46, 0x45, 0x46, 0x45, 0x46, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x47, 0x47, 0x47, 0x48, 
   0x48, 0x48, 0x49, 0x49, 0x49, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4F, 0x50, 0x4F, 0x50, 0x51, 
   0x50, 0x51, 0x51, 0x51, 0x52, 0x52, 0x52, 0x53, 0x53, 0x53, 0x54, 0x54, 0x54, 0x55, 0x55, 0x55, 
   0x55, 0x56, 0x55, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x55, 0x56, 0x55, 0x55, 0x55, 0x54, 
   0x55, 0x54, 0x54, 0x54, 0x54, 0x54, 0x53, 0x54, 0x5A, 0x58, 0x5A, 0x66, 0x67, 0x66, 0x73, 0x72, 
   0x73, 0x7F, 0x7F, 0x7F, 0x6B, 0x6C, 0x6B, 0x40, 0x43, 0x40, 0x27, 0x29, 0x27, 0x3A, 0x39, 0x3A, 
   0x4A, 0x49, 0x4A, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x4A, 0x4A, 
   0x4A, 0x4A, 0x4B, 0x4A, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 
   0x4D, 0x4F, 0x4D, 0x4D, 0x4E, 0x4D, 0x4D, 0x4C, 0x4D, 0x4A, 0x4B, 0x4A, 0x4A, 0x49, 0x4A, 0x47, 
   0x47, 0x47, 0x45, 0x45, 0x45, 0x44, 0x43, 0x44, 0x42, 0x42, 0x42, 0x3F, 0x41, 0x3F, 0x40, 0x40, 
   0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 
   0x42, 0x42, 0x42, 0x43, 0x44, 0x43, 0x46, 0x45, 0x46, 0x47, 0x46, 0x47, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x4A, 0x49, 0x4A, 0x4A, 0x4B, 0x4A, 0x4E, 0x4E, 0x4E, 0x2A, 0x2A, 0x2A, 0x02, 0x02, 
   0x02, 0x07, 0x08, 0x07, 0x36, 0x37, 0x36, 0x4E, 0x4F, 0x4E, 0x57, 0x57, 0x57, 0x33, 0x31, 0x33, 
   0x31, 0x31, 0x31, 0x4D, 0x4E, 0x4D, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4C, 0x4B, 0x4D, 0x4D, 0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4C, 0x4D, 0x4C, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 
   0x4A, 0x49, 0x4A, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x45, 0x47, 0x45, 0x45, 0x46, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x44, 0x45, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x44, 0x43, 
   0x44, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x3F, 0x41, 0x3F, 0x40, 0x40, 0x40, 
   0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3D, 0x3F, 0x3C, 0x3E, 0x3C, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 
   0x3E, 0x3F, 0x3D, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 
   0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3D, 0x3F, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x40, 0x3F, 0x3E, 0x3E, 0x3E, 0x3C, 0x3C, 0x3C, 0x39, 0x39, 0x39, 0x38, 0x37, 0x38, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x35, 0x36, 0x36, 
   0x35, 0x36, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x34, 
   0x35, 0x34, 0x32, 0x34, 0x31, 0x30, 0x31, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 0x2D, 0x2C, 
   0x2B, 0x2B, 0x2B, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x26, 0x27, 0x26, 0x27, 
   0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x2B, 0x2A, 
   0x2B, 0x29, 0x2A, 0x29, 0x2A, 0x2B, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 
   0x29, 0x28, 0x29, 0x27, 0x28, 0x27, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3B, 
   0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3D, 0x3C, 0x3E, 0x3D, 
   0x3E, 0x3F, 0x41, 0x3F, 0x42, 0x42, 0x42, 0x46, 0x44, 0x46, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 
   0x49, 0x48, 0x48, 0x48, 0x48, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x46, 0x45, 
   0x46, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x3F, 0x3F, 0x3F, 0x40, 0x3E, 0x40, 0x3E, 0x3F, 0x3E, 0x3E, 
   0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 
   0x44, 0x44, 0x44, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x47, 0x48, 0x47, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 
   0x45, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x46, 0x45, 0x46, 0x45, 0x46, 0x46, 0x45, 0x46, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 
   0x46, 0x45, 0x45, 0x46, 0x45, 0x44, 0x45, 0x44, 0x42, 0x44, 0x42, 0x43, 0x44, 0x43, 0x42, 0x43, 
   0x42, 0x43, 0x43, 0x43, 0x42, 0x44, 0x42, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x48, 0x48, 0x48, 0x48, 
   0x49, 0x48, 0x4A, 0x4A, 0x4A, 0x4A, 0x4C, 0x4A, 0x4E, 0x4E, 0x4E, 0x4F, 0x50, 0x4F, 0x52, 0x51, 
   0x52, 0x51, 0x52, 0x51, 0x52, 0x52, 0x52, 0x53, 0x53, 0x53, 0x53, 0x54, 0x53, 0x55, 0x54, 0x55, 
   0x54, 0x55, 0x54, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x56, 0x55, 0x55, 0x55, 0x55, 0x54, 
   0x54, 0x54, 0x53, 0x53, 0x53, 0x50, 0x51, 0x50, 0x60, 0x60, 0x60, 0x94, 0x93, 0x94, 0xA4, 0xA2, 
   0xA4, 0x75, 0x75, 0x75, 0x53, 0x55, 0x53, 0x35, 0x36, 0x35, 0x46, 0x47, 0x46, 0x4D, 0x4E, 0x4D, 
   0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4C, 0x4B, 0x4A, 0x4B, 0x49, 0x48, 0x49, 0x47, 0x48, 0x47, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x48, 0x49, 0x48, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 
   0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4C, 0x4C, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4A, 0x49, 0x4A, 0x46, 
   0x47, 0x46, 0x44, 0x46, 0x44, 0x42, 0x44, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x40, 0x3F, 
   0x40, 0x3F, 0x40, 0x3F, 0x40, 0x3E, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x42, 0x40, 0x42, 
   0x40, 0x41, 0x40, 0x43, 0x43, 0x43, 0x42, 0x44, 0x42, 0x46, 0x45, 0x46, 0x46, 0x47, 0x46, 0x49, 
   0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x35, 0x35, 
   0x35, 0x01, 0x01, 0x01, 0x15, 0x16, 0x15, 0x46, 0x48, 0x46, 0x50, 0x4F, 0x50, 0x3F, 0x3F, 0x3F, 
   0x21, 0x21, 0x21, 0x45, 0x44, 0x45, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4C, 0x4B, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4C, 0x4C, 0x4C, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 
   0x48, 0x49, 0x48, 0x47, 0x48, 0x47, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x45, 
   0x46, 0x45, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 
   0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x42, 0x43, 0x41, 0x40, 0x41, 0x40, 0x41, 0x40, 
   0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3E, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x40, 0x3F, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 
   0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 
   0x3E, 0x3E, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x40, 0x3F, 0x40, 0x3F, 0x40, 
   0x3F, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3E, 0x3D, 0x3E, 0x3A, 0x3B, 0x3A, 0x39, 0x39, 0x39, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x36, 
   0x35, 0x36, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x35, 0x34, 
   0x35, 0x34, 0x33, 0x34, 0x30, 0x32, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 
   0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x29, 0x2A, 0x27, 0x28, 0x27, 0x29, 0x28, 0x29, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 
   0x27, 0x29, 0x27, 0x29, 0x29, 0x29, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3D, 0x3C, 0x3E, 0x3D, 
   0x3E, 0x41, 0x41, 0x41, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 
   0x46, 0x46, 0x46, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 
   0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x44, 0x45, 0x44, 0x43, 0x44, 
   0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3D, 0x3E, 0x3D, 0x3C, 
   0x3D, 0x3C, 0x3D, 0x3E, 0x3D, 0x3F, 0x3E, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 
   0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x45, 0x47, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 
   0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 
   0x45, 0x46, 0x45, 0x45, 0x47, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x4C, 0x4A, 0x4C, 0x4D, 0x4C, 0x4D, 0x4E, 0x4D, 0x50, 0x50, 0x50, 0x52, 0x52, 
   0x52, 0x52, 0x52, 0x52, 0x52, 0x53, 0x52, 0x53, 0x53, 0x53, 0x54, 0x53, 0x54, 0x54, 0x55, 0x54, 
   0x54, 0x55, 0x54, 0x54, 0x54, 0x54, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x54, 0x55, 0x54, 0x53, 
   0x54, 0x53, 0x56, 0x55, 0x56, 0x6F, 0x6E, 0x6F, 0x7C, 0x7D, 0x7C, 0x90, 0x92, 0x90, 0x82, 0x83, 
   0x82, 0x5D, 0x5C, 0x5D, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x3C, 0x3C, 0x3C, 0x4D, 0x4D, 0x4D, 
   0x50, 0x4E, 0x50, 0x4B, 0x4C, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 0x48, 
   0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 
   0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 
   0x4D, 0x4D, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4A, 0x4A, 0x4A, 0x48, 0x49, 0x48, 0x47, 
   0x47, 0x47, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x40, 0x41, 0x40, 0x3E, 0x3D, 
   0x3E, 0x3F, 0x3E, 0x3F, 0x40, 0x3E, 0x40, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 
   0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x45, 0x44, 0x46, 0x46, 0x46, 0x46, 
   0x47, 0x46, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x4B, 0x4A, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 
   0x4C, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x2A, 0x2A, 0x2A, 0x4E, 0x50, 0x4E, 0x4D, 0x4E, 0x4D, 
   0x2E, 0x2C, 0x2E, 0x37, 0x36, 0x37, 0x4F, 0x51, 0x4F, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4B, 
   0x4B, 0x4B, 0x4A, 0x4C, 0x4A, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 0x4C, 0x4D, 0x4E, 
   0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4D, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 
   0x4A, 0x49, 0x4A, 0x48, 0x47, 0x48, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x46, 0x47, 0x46, 0x46, 
   0x47, 0x46, 0x44, 0x45, 0x44, 0x44, 0x43, 0x44, 0x42, 0x43, 0x42, 0x42, 0x44, 0x42, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x41, 0x42, 0x41, 0x3F, 0x41, 0x3F, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x41, 0x3F, 0x41, 0x3F, 0x3F, 0x3F, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 
   0x3F, 0x40, 0x3F, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 
   0x3E, 0x3E, 0x3F, 0x3D, 0x3F, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 
   0x40, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3E, 0x3E, 0x3B, 0x3C, 0x3B, 0x3B, 0x3A, 0x3B, 
   0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x36, 
   0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 
   0x35, 0x33, 0x34, 0x33, 0x32, 0x32, 0x32, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2B, 0x2A, 0x2B, 0x29, 0x2A, 0x29, 0x29, 0x2A, 0x29, 0x29, 
   0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x29, 0x28, 
   0x29, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3B, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3E, 0x3E, 
   0x3E, 0x3F, 0x40, 0x3F, 0x42, 0x42, 0x42, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x47, 0x46, 0x47, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x44, 0x45, 0x42, 0x43, 0x42, 
   0x43, 0x43, 0x43, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3E, 0x3D, 0x3E, 0x3C, 
   0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x40, 
   0x40, 0x40, 0x41, 0x40, 0x41, 0x42, 0x41, 0x40, 0x42, 0x40, 0x42, 0x41, 0x42, 0x42, 0x43, 0x42, 
   0x43, 0x44, 0x43, 0x43, 0x45, 0x43, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x46, 
   0x47, 0x46, 0x45, 0x47, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x45, 0x46, 
   0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x45, 0x47, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 
   0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 
   0x47, 0x48, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x44, 0x46, 0x44, 0x44, 0x44, 0x44, 0x46, 0x44, 0x46, 
   0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x4B, 0x4A, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4C, 0x4D, 0x4C, 0x4E, 0x4D, 0x4E, 0x4F, 0x4F, 0x4F, 0x4F, 0x51, 0x4F, 0x51, 0x51, 
   0x51, 0x52, 0x52, 0x52, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x54, 0x53, 0x54, 0x54, 0x55, 0x54, 
   0x54, 0x55, 0x54, 0x54, 0x54, 0x54, 0x53, 0x55, 0x53, 0x54, 0x55, 0x54, 0x55, 0x55, 0x55, 0x51, 
   0x52, 0x51, 0x51, 0x50, 0x51, 0x86, 0x86, 0x86, 0x9B, 0x9C, 0x9B, 0x70, 0x6E, 0x70, 0x4F, 0x50, 
   0x4F, 0x43, 0x42, 0x43, 0x32, 0x33, 0x32, 0x52, 0x53, 0x52, 0x52, 0x52, 0x52, 0x4E, 0x4F, 0x4E, 
   0x4E, 0x4E, 0x4E, 0x4D, 0x4D, 0x4D, 0x4A, 0x4C, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x49, 0x4A, 0x48, 
   0x4A, 0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4C, 0x4A, 0x4C, 0x4A, 
   0x4B, 0x4C, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x48, 0x4A, 0x48, 0x4A, 0x48, 0x4A, 0x47, 
   0x47, 0x47, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x41, 0x40, 0x41, 0x41, 0x40, 0x41, 0x48, 0x49, 
   0x48, 0x42, 0x41, 0x42, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 
   0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x46, 
   0x46, 0x46, 0x47, 0x47, 0x47, 0x4A, 0x49, 0x4A, 0x48, 0x4A, 0x48, 0x4B, 0x4A, 0x4B, 0x4D, 0x4E, 
   0x4D, 0x31, 0x33, 0x31, 0x00, 0x00, 0x00, 0x19, 0x18, 0x19, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 
   0x44, 0x45, 0x44, 0x31, 0x32, 0x31, 0x46, 0x47, 0x46, 0x4A, 0x4B, 0x4A, 0x49, 0x4A, 0x49, 0x4A, 
   0x4B, 0x4A, 0x4C, 0x4A, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 0x4C, 0x4B, 0x4D, 0x4E, 
   0x4D, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4A, 0x4B, 0x4A, 
   0x48, 0x4A, 0x48, 0x48, 0x47, 0x48, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x46, 
   0x47, 0x46, 0x45, 0x45, 0x45, 0x43, 0x44, 0x43, 0x43, 0x42, 0x43, 0x43, 0x44, 0x43, 0x42, 0x44, 
   0x42, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x41, 0x40, 0x41, 0x40, 0x41, 0x40, 
   0x3F, 0x40, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x42, 0x41, 0x42, 0x40, 
   0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x40, 0x41, 0x40, 0x41, 0x40, 0x3F, 0x3F, 0x3F, 0x3D, 0x3D, 0x3D, 0x3E, 0x3F, 0x3E, 
   0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x40, 0x3F, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3F, 0x3F, 0x3F, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 
   0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x36, 0x37, 0x36, 0x36, 
   0x36, 0x36, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x36, 0x36, 
   0x36, 0x34, 0x36, 0x34, 0x33, 0x32, 0x33, 0x32, 0x31, 0x32, 0x31, 0x2F, 0x31, 0x2D, 0x2E, 0x2D, 
   0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 
   0x29, 0x2A, 0x28, 0x29, 0x28, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x29, 0x28, 
   0x29, 0x2B, 0x29, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 
   0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 
   0x3D, 0x3F, 0x3F, 0x3F, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x46, 0x45, 0x46, 0x45, 
   0x45, 0x45, 0x45, 0x46, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x46, 0x46, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 
   0x42, 0x44, 0x42, 0x40, 0x42, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3D, 0x3E, 0x3D, 
   0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3D, 0x3E, 0x3D, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 
   0x3F, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 
   0x44, 0x43, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x47, 
   0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x45, 0x46, 0x45, 
   0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x47, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x45, 0x45, 
   0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 
   0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x4C, 0x4B, 0x4C, 0x4C, 
   0x4D, 0x4C, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4F, 0x4F, 0x4F, 0x51, 0x50, 0x51, 0x51, 0x51, 
   0x51, 0x51, 0x52, 0x51, 0x52, 0x52, 0x52, 0x52, 0x53, 0x52, 0x52, 0x53, 0x52, 0x54, 0x54, 0x54, 
   0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x4E, 
   0x4D, 0x4E, 0x48, 0x4A, 0x48, 0x7D, 0x7F, 0x7D, 0x81, 0x82, 0x81, 0x59, 0x5A, 0x59, 0x50, 0x52, 
   0x50, 0x37, 0x36, 0x37, 0x41, 0x40, 0x41, 0x4C, 0x4D, 0x4C, 0x52, 0x53, 0x52, 0x51, 0x51, 0x51, 
   0x4E, 0x4F, 0x4E, 0x4D, 0x4D, 0x4D, 0x4C, 0x4C, 0x4C, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x49, 
   0x4A, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4B, 0x4C, 0x4B, 
   0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x48, 0x48, 0x48, 0x47, 
   0x46, 0x47, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x4E, 0x4E, 0x4E, 0x64, 0x66, 0x64, 0x50, 0x52, 
   0x50, 0x3F, 0x41, 0x3F, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 
   0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x46, 
   0x45, 0x46, 0x46, 0x46, 0x46, 0x47, 0x48, 0x47, 0x48, 0x49, 0x48, 0x4A, 0x49, 0x4A, 0x4C, 0x4D, 
   0x4C, 0x47, 0x47, 0x47, 0x1B, 0x1C, 0x1B, 0x03, 0x04, 0x03, 0x3A, 0x3A, 0x3A, 0x4A, 0x4B, 0x4A, 
   0x4C, 0x4F, 0x4C, 0x38, 0x37, 0x38, 0x2C, 0x2B, 0x2C, 0x49, 0x49, 0x49, 0x4D, 0x4C, 0x4D, 0x48, 
   0x49, 0x48, 0x4B, 0x4A, 0x4B, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4B, 0x4C, 0x4B, 0x4D, 0x4D, 
   0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 0x4B, 0x4C, 0x4B, 0x4B, 0x4A, 0x4B, 
   0x4A, 0x49, 0x4A, 0x47, 0x48, 0x47, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 
   0x47, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x3F, 0x41, 0x3F, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x40, 0x42, 
   0x41, 0x42, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x42, 0x41, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 
   0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x41, 
   0x3F, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3C, 0x3D, 0x3C, 
   0x3C, 0x3A, 0x3C, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x37, 
   0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x34, 0x35, 0x34, 0x34, 0x33, 0x34, 0x31, 0x32, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 
   0x2A, 0x2B, 0x29, 0x29, 0x29, 0x27, 0x28, 0x27, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 
   0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 
   0x29, 0x2A, 0x29, 0x2C, 0x2A, 0x2C, 0x3F, 0x3D, 0x3F, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 
   0x3C, 0x3F, 0x3E, 0x3F, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 
   0x45, 0x44, 0x45, 0x45, 0x45, 0x42, 0x44, 0x42, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x44, 0x46, 0x44, 0x45, 0x45, 0x45, 0x43, 0x42, 0x43, 
   0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3D, 0x3C, 0x3D, 0x3C, 
   0x3B, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3E, 0x3D, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x41, 0x40, 
   0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 
   0x44, 0x45, 0x44, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x46, 0x44, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x48, 0x47, 0x48, 0x46, 0x46, 0x46, 
   0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x46, 
   0x46, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x46, 0x46, 0x45, 0x47, 
   0x45, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 
   0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x4A, 0x49, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4D, 
   0x4D, 0x4D, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x51, 0x51, 
   0x51, 0x51, 0x51, 0x51, 0x52, 0x52, 0x52, 0x51, 0x52, 0x51, 0x52, 0x53, 0x52, 0x53, 0x53, 0x53, 
   0x53, 0x53, 0x53, 0x53, 0x54, 0x53, 0x53, 0x53, 0x53, 0x54, 0x54, 0x54, 0x56, 0x56, 0x56, 0x54, 
   0x55, 0x54, 0x58, 0x5A, 0x58, 0x61, 0x60, 0x61, 0x51, 0x53, 0x51, 0x4F, 0x51, 0x4F, 0x42, 0x44, 
   0x42, 0x48, 0x48, 0x48, 0x57, 0x56, 0x57, 0x51, 0x50, 0x51, 0x51, 0x52, 0x51, 0x50, 0x51, 0x50, 
   0x50, 0x50, 0x50, 0x4D, 0x4E, 0x4D, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4A, 0x4B, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x49, 0x4A, 
   0x49, 0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 0x49, 0x4A, 0x49, 0x48, 0x48, 0x48, 0x46, 
   0x46, 0x46, 0x45, 0x44, 0x45, 0x47, 0x46, 0x47, 0x61, 0x60, 0x61, 0x7C, 0x7E, 0x7C, 0x39, 0x39, 
   0x39, 0x31, 0x31, 0x31, 0x41, 0x41, 0x41, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 
   0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x44, 0x43, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x46, 0x45, 0x48, 0x48, 0x48, 0x48, 0x4A, 0x48, 0x49, 0x4A, 
   0x49, 0x4F, 0x4D, 0x4F, 0x46, 0x46, 0x46, 0x08, 0x09, 0x08, 0x13, 0x11, 0x13, 0x40, 0x40, 0x40, 
   0x4B, 0x4D, 0x4B, 0x40, 0x3F, 0x40, 0x2A, 0x28, 0x2A, 0x44, 0x44, 0x44, 0x4F, 0x4F, 0x4F, 0x49, 
   0x49, 0x49, 0x47, 0x48, 0x47, 0x4A, 0x49, 0x4A, 0x49, 0x4A, 0x49, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 
   0x4B, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 0x4B, 0x4C, 0x4B, 0x4B, 0x4C, 0x4B, 0x4A, 0x4B, 0x4A, 
   0x48, 0x4A, 0x48, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x44, 
   0x46, 0x44, 0x45, 0x45, 0x45, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 
   0x43, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x41, 0x41, 0x41, 0x3F, 0x40, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3E, 0x40, 0x3F, 0x40, 0x41, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 
   0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x42, 0x41, 0x42, 0x40, 
   0x41, 0x40, 0x41, 0x40, 0x41, 0x3E, 0x3F, 0x3E, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 
   0x3C, 0x3C, 0x3C, 0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x35, 0x36, 
   0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x32, 0x32, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 
   0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 
   0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 
   0x2C, 0x2A, 0x2C, 0x2D, 0x2C, 0x2D, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3E, 0x3C, 
   0x3E, 0x3D, 0x3E, 0x3D, 0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 0x42, 0x44, 0x42, 0x44, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x42, 0x44, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x43, 
   0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x44, 0x44, 0x44, 0x41, 0x42, 0x41, 
   0x40, 0x40, 0x40, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3A, 0x3C, 0x3A, 0x3C, 0x3B, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x40, 0x3F, 0x40, 0x40, 0x40, 
   0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x48, 0x47, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 
   0x46, 0x45, 0x46, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x46, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x48, 0x47, 0x48, 0x49, 0x48, 0x49, 0x47, 0x48, 0x47, 0x46, 0x47, 
   0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 
   0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4E, 
   0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4F, 0x50, 
   0x4F, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x52, 0x53, 0x52, 
   0x53, 0x54, 0x53, 0x54, 0x54, 0x54, 0x51, 0x51, 0x51, 0x53, 0x52, 0x53, 0x6D, 0x70, 0x6D, 0x8F, 
   0x8F, 0x8F, 0x81, 0x83, 0x81, 0x5A, 0x5B, 0x5A, 0x47, 0x49, 0x47, 0x3D, 0x3D, 0x3D, 0x48, 0x49, 
   0x48, 0x52, 0x53, 0x52, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x52, 0x53, 0x52, 0x51, 0x52, 0x51, 
   0x50, 0x50, 0x50, 0x4C, 0x4E, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 
   0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x48, 0x49, 
   0x48, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 
   0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x44, 
   0x45, 0x44, 0x38, 0x38, 0x38, 0x57, 0x56, 0x57, 0x7B, 0x7B, 0x7B, 0x5C, 0x5C, 0x5C, 0x2D, 0x2C, 
   0x2D, 0x24, 0x24, 0x24, 0x43, 0x44, 0x43, 0x40, 0x3F, 0x40, 0x3E, 0x3E, 0x3E, 0x40, 0x3E, 0x40, 
   0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x42, 
   0x42, 0x42, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x45, 0x46, 0x45, 0x47, 0x48, 0x47, 0x48, 0x49, 
   0x48, 0x4B, 0x49, 0x4B, 0x4C, 0x4D, 0x4C, 0x20, 0x21, 0x20, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 
   0x3E, 0x3E, 0x3E, 0x4A, 0x49, 0x4A, 0x45, 0x46, 0x45, 0x44, 0x45, 0x44, 0x39, 0x3A, 0x39, 0x41, 
   0x41, 0x41, 0x46, 0x46, 0x46, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x4A, 0x4A, 
   0x4A, 0x4B, 0x4B, 0x4B, 0x4C, 0x4C, 0x4C, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 
   0x4A, 0x49, 0x4A, 0x48, 0x48, 0x48, 0x47, 0x46, 0x47, 0x46, 0x45, 0x46, 0x43, 0x44, 0x43, 0x43, 
   0x44, 0x43, 0x43, 0x44, 0x43, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 
   0x41, 0x40, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 
   0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x3E, 0x40, 0x40, 0x3F, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3D, 0x3E, 0x3D, 
   0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x37, 
   0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x35, 0x36, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x34, 0x35, 0x34, 0x33, 0x34, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2A, 0x2B, 0x2A, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x3A, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 
   0x3C, 0x3B, 0x3C, 0x3B, 0x3E, 0x3F, 0x3E, 0x41, 0x41, 0x41, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 
   0x44, 0x44, 0x44, 0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x43, 0x42, 0x43, 0x44, 0x44, 0x44, 0x43, 0x44, 
   0x43, 0x44, 0x44, 0x44, 0x46, 0x45, 0x46, 0x43, 0x44, 0x43, 0x44, 0x43, 0x44, 0x41, 0x41, 0x41, 
   0x3F, 0x40, 0x3F, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x3C, 
   0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3D, 0x3C, 0x3D, 0x3F, 0x3D, 0x3F, 0x3F, 0x3F, 0x3F, 0x41, 0x40, 
   0x41, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x47, 0x45, 
   0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x44, 
   0x46, 0x44, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x47, 0x48, 0x47, 0x48, 0x48, 
   0x48, 0x48, 0x49, 0x48, 0x4A, 0x49, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 
   0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x44, 
   0x45, 0x44, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x47, 
   0x47, 0x48, 0x47, 0x48, 0x47, 0x48, 0x47, 0x49, 0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 
   0x4A, 0x4A, 0x4A, 0x4B, 0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4E, 0x4C, 0x4E, 0x4D, 0x4E, 0x4E, 
   0x4E, 0x4E, 0x50, 0x4F, 0x50, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 
   0x4F, 0x50, 0x50, 0x50, 0x50, 0x51, 0x50, 0x50, 0x51, 0x50, 0x52, 0x51, 0x52, 0x52, 0x53, 0x52, 
   0x52, 0x52, 0x52, 0x53, 0x53, 0x53, 0x5E, 0x5E, 0x5E, 0x6E, 0x6F, 0x6E, 0x81, 0x82, 0x81, 0x8C, 
   0x8B, 0x8C, 0x67, 0x65, 0x67, 0x55, 0x56, 0x55, 0x42, 0x42, 0x42, 0x38, 0x39, 0x38, 0x30, 0x30, 
   0x30, 0x4D, 0x4D, 0x4D, 0x53, 0x53, 0x53, 0x51, 0x53, 0x51, 0x51, 0x53, 0x51, 0x51, 0x51, 0x51, 
   0x50, 0x50, 0x50, 0x4E, 0x4E, 0x4E, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x48, 0x49, 
   0x48, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x65, 
   0x65, 0x65, 0x5A, 0x5B, 0x5A, 0x62, 0x63, 0x62, 0x68, 0x69, 0x68, 0x47, 0x47, 0x47, 0x3C, 0x3C, 
   0x3C, 0x27, 0x27, 0x27, 0x3A, 0x3A, 0x3A, 0x40, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x41, 
   0x40, 0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x44, 0x45, 0x44, 0x47, 0x47, 0x47, 0x46, 0x47, 
   0x46, 0x48, 0x48, 0x48, 0x4B, 0x4A, 0x4B, 0x37, 0x38, 0x37, 0x08, 0x08, 0x08, 0x01, 0x00, 0x01, 
   0x0E, 0x0D, 0x0E, 0x37, 0x36, 0x37, 0x4C, 0x4D, 0x4C, 0x46, 0x48, 0x46, 0x2B, 0x2A, 0x2B, 0x36, 
   0x35, 0x36, 0x4A, 0x49, 0x4A, 0x46, 0x47, 0x46, 0x47, 0x46, 0x47, 0x47, 0x48, 0x47, 0x4A, 0x48, 
   0x4A, 0x49, 0x4A, 0x49, 0x4B, 0x4B, 0x4B, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 
   0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 0x46, 0x46, 0x46, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x43, 
   0x42, 0x43, 0x44, 0x42, 0x44, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 
   0x41, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3E, 0x3F, 0x3E, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x44, 0x43, 0x44, 0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x3F, 0x40, 0x3F, 0x41, 0x40, 0x41, 
   0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x42, 0x43, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3E, 0x3E, 
   0x3E, 0x3F, 0x3D, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 
   0x3E, 0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 0x39, 0x38, 0x39, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x35, 0x35, 
   0x35, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x33, 0x32, 0x33, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 
   0x2E, 0x2D, 0x2E, 0x2E, 0x2F, 0x2E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x39, 
   0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 
   0x3B, 0x3C, 0x3C, 0x3C, 0x3E, 0x3D, 0x3E, 0x3F, 0x3F, 0x3F, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 
   0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x42, 0x41, 0x43, 0x42, 0x43, 0x42, 0x43, 
   0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x42, 0x43, 0x42, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 
   0x3D, 0x3E, 0x3D, 0x3C, 0x3C, 0x3C, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3E, 0x3B, 0x3E, 0x3D, 0x3F, 0x3D, 0x3F, 0x3E, 0x3F, 0x40, 0x40, 
   0x40, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 
   0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x44, 0x46, 0x44, 0x45, 
   0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x48, 0x49, 
   0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x48, 
   0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x46, 
   0x45, 0x46, 0x46, 0x46, 0x46, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 
   0x4A, 0x4B, 0x4A, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x50, 0x50, 
   0x50, 0x50, 0x50, 0x50, 0x50, 0x51, 0x50, 0x51, 0x51, 0x51, 0x53, 0x53, 0x53, 0x53, 0x52, 0x53, 
   0x4F, 0x4F, 0x4F, 0x54, 0x56, 0x54, 0x67, 0x68, 0x67, 0xA1, 0x9F, 0xA1, 0x94, 0x94, 0x94, 0x58, 
   0x59, 0x58, 0x3A, 0x3A, 0x3A, 0x43, 0x44, 0x43, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x51, 0x52, 
   0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 0x51, 0x50, 0x51, 
   0x4E, 0x4F, 0x4E, 0x4B, 0x4D, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4A, 0x4B, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 
   0x49, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 
   0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 0x44, 0x44, 0x44, 0x3D, 0x3C, 0x3D, 0x72, 
   0x71, 0x72, 0x92, 0x90, 0x92, 0x67, 0x65, 0x67, 0x36, 0x38, 0x36, 0x3E, 0x3E, 0x3E, 0x47, 0x46, 
   0x47, 0x2B, 0x2A, 0x2B, 0x22, 0x22, 0x22, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3D, 0x3D, 
   0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x40, 0x3E, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 0x43, 0x43, 0x43, 0x44, 0x45, 0x44, 0x46, 0x47, 
   0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x36, 0x35, 0x36, 0x04, 0x05, 0x04, 
   0x00, 0x00, 0x00, 0x1F, 0x20, 0x1F, 0x48, 0x48, 0x48, 0x45, 0x45, 0x45, 0x41, 0x41, 0x41, 0x2F, 
   0x2F, 0x2F, 0x34, 0x34, 0x34, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x48, 0x47, 
   0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x4A, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x45, 0x46, 0x45, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x42, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x42, 
   0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x41, 0x3F, 0x40, 0x41, 0x40, 0x41, 
   0x41, 0x41, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 
   0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 
   0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 
   0x41, 0x42, 0x40, 0x42, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3E, 0x3E, 
   0x3E, 0x3D, 0x3C, 0x3D, 0x3D, 0x3E, 0x3D, 0x3D, 0x3F, 0x3D, 0x3D, 0x3F, 0x3D, 0x3D, 0x3E, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x3B, 0x3C, 0x3B, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 0x38, 
   0x38, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x35, 0x37, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x33, 0x34, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 
   0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 
   0x2E, 0x2E, 0x2E, 0x30, 0x2E, 0x30, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x39, 
   0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3A, 0x3B, 0x3A, 0x39, 
   0x3A, 0x3B, 0x3A, 0x3B, 0x3E, 0x3D, 0x3E, 0x41, 0x3F, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 
   0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3D, 0x3E, 0x3D, 0x3D, 
   0x3D, 0x3D, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x40, 0x41, 
   0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3F, 0x40, 0x3F, 0x3D, 0x3F, 0x3D, 
   0x3C, 0x3D, 0x3C, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x46, 0x47, 0x46, 0x45, 0x47, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x46, 0x44, 0x47, 0x48, 0x47, 0x49, 0x49, 
   0x49, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x48, 0x49, 0x48, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x44, 
   0x46, 0x44, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 
   0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4D, 0x4C, 0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x4F, 0x4E, 0x50, 0x4F, 0x50, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x50, 0x4F, 0x4E, 0x50, 
   0x4E, 0x50, 0x50, 0x50, 0x51, 0x51, 0x51, 0x50, 0x51, 0x50, 0x52, 0x52, 0x52, 0x82, 0x80, 0x82, 
   0x9A, 0x98, 0x9A, 0x90, 0x91, 0x90, 0x78, 0x7A, 0x78, 0x87, 0x85, 0x87, 0x5E, 0x5B, 0x5E, 0x4A, 
   0x49, 0x4A, 0x3A, 0x39, 0x3A, 0x33, 0x34, 0x33, 0x33, 0x34, 0x33, 0x4B, 0x4B, 0x4B, 0x4F, 0x50, 
   0x4F, 0x50, 0x4F, 0x50, 0x50, 0x50, 0x50, 0x51, 0x50, 0x51, 0x50, 0x50, 0x50, 0x4F, 0x4F, 0x4F, 
   0x4E, 0x4E, 0x4E, 0x4B, 0x4D, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 
   0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 
   0x49, 0x4A, 0x49, 0x4A, 0x49, 0x4A, 0x53, 0x54, 0x53, 0x6A, 0x6A, 0x6A, 0x6F, 0x6D, 0x6F, 0x74, 
   0x73, 0x74, 0x72, 0x70, 0x72, 0x48, 0x48, 0x48, 0x36, 0x37, 0x36, 0x0C, 0x0D, 0x0C, 0x24, 0x25, 
   0x24, 0x36, 0x34, 0x36, 0x21, 0x20, 0x21, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x40, 0x40, 0x40, 
   0x3C, 0x3C, 0x3C, 0x3E, 0x3C, 0x3E, 0x3E, 0x3C, 0x3E, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 
   0x3E, 0x3D, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x43, 0x43, 0x43, 0x44, 0x45, 
   0x44, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x44, 0x44, 0x44, 0x44, 0x46, 0x44, 0x25, 0x26, 0x25, 
   0x08, 0x07, 0x08, 0x03, 0x03, 0x03, 0x0F, 0x10, 0x0F, 0x20, 0x22, 0x20, 0x4A, 0x4A, 0x4A, 0x37, 
   0x39, 0x37, 0x1E, 0x1E, 0x1E, 0x42, 0x41, 0x42, 0x45, 0x46, 0x45, 0x44, 0x45, 0x44, 0x45, 0x46, 
   0x45, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 
   0x47, 0x48, 0x47, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x45, 0x44, 0x45, 0x42, 0x43, 0x42, 0x42, 
   0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x41, 0x42, 0x41, 0x42, 0x41, 
   0x42, 0x42, 0x41, 0x42, 0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 
   0x43, 0x42, 0x43, 0x41, 0x42, 0x41, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x42, 
   0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 
   0x43, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x42, 0x41, 0x42, 0x40, 0x42, 0x40, 0x40, 0x41, 0x40, 
   0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 
   0x41, 0x41, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3C, 0x3F, 0x3C, 0x3C, 0x3D, 
   0x3C, 0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 
   0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x39, 0x3B, 0x39, 0x3A, 
   0x3A, 0x3A, 0x37, 0x39, 0x37, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x38, 0x37, 0x38, 0x35, 0x36, 
   0x35, 0x37, 0x36, 0x37, 0x35, 0x36, 0x35, 0x33, 0x35, 0x33, 0x34, 0x34, 0x34, 0x32, 0x33, 0x32, 
   0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x30, 0x30, 0x30, 0x2F, 
   0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 
   0x2E, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2B, 0x2D, 0x2B, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x3D, 0x3B, 0x3D, 0x3B, 0x3B, 0x3B, 0x3C, 0x3A, 0x3C, 0x39, 
   0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 
   0x39, 0x3C, 0x3B, 0x3C, 0x3E, 0x3D, 0x3E, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x40, 0x3E, 0x40, 0x3E, 0x3C, 0x3E, 0x3B, 0x3C, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3E, 0x3C, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3E, 
   0x3C, 0x3E, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x40, 0x40, 
   0x40, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x44, 0x44, 0x44, 0x44, 
   0x44, 0x44, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x45, 0x47, 0x45, 0x47, 0x47, 0x47, 0x49, 0x48, 
   0x49, 0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x47, 0x48, 0x48, 0x47, 0x48, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 
   0x47, 0x46, 0x46, 0x47, 0x46, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 
   0x4C, 0x4B, 0x4C, 0x4C, 0x4B, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x4E, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4F, 0x4F, 0x4F, 0x50, 0x50, 0x50, 0x50, 0x50, 
   0x50, 0x50, 0x50, 0x50, 0x51, 0x53, 0x51, 0x4E, 0x50, 0x4E, 0x40, 0x3F, 0x40, 0x8C, 0x8D, 0x8C, 
   0xC7, 0xC7, 0xC7, 0xB3, 0xB4, 0xB3, 0x90, 0x8F, 0x90, 0x4C, 0x4A, 0x4C, 0x2E, 0x2C, 0x2E, 0x51, 
   0x53, 0x51, 0x3F, 0x3F, 0x3F, 0x49, 0x4A, 0x49, 0x4F, 0x4F, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 
   0x4E, 0x4E, 0x4F, 0x4E, 0x4F, 0x4F, 0x4F, 0x4E, 0x4F, 0x4E, 0x4F, 0x4E, 0x4F, 0x4D, 0x4D, 0x4D, 
   0x4E, 0x4D, 0x4E, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4B, 
   0x4B, 0x4B, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 
   0x48, 0x49, 0x48, 0x47, 0x46, 0x47, 0x4E, 0x4E, 0x4E, 0x8B, 0x8E, 0x8B, 0x98, 0x9A, 0x98, 0x64, 
   0x64, 0x64, 0x3A, 0x3A, 0x3A, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x2D, 0x2C, 0x2D, 0x42, 0x42, 0x42, 0x3D, 0x3E, 0x3D, 0x2F, 0x2D, 0x2F, 0x37, 0x3A, 0x37, 
   0x3E, 0x3E, 0x3E, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3E, 
   0x3C, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x40, 0x3F, 0x40, 0x42, 0x41, 0x42, 0x42, 0x43, 
   0x42, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x44, 0x43, 0x44, 
   0x38, 0x36, 0x38, 0x05, 0x06, 0x05, 0x00, 0x00, 0x00, 0x06, 0x08, 0x06, 0x38, 0x38, 0x38, 0x44, 
   0x45, 0x44, 0x35, 0x35, 0x35, 0x2C, 0x2C, 0x2C, 0x47, 0x46, 0x47, 0x43, 0x44, 0x43, 0x45, 0x44, 
   0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x45, 0x47, 0x45, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 
   0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x42, 0x43, 0x42, 0x41, 0x42, 
   0x41, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x44, 0x43, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 
   0x44, 0x43, 0x44, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x43, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 0x40, 0x42, 0x40, 0x41, 0x40, 0x41, 0x40, 
   0x3F, 0x40, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3C, 0x3E, 0x3C, 0x3D, 0x3C, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3D, 0x3B, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3A, 0x3B, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x30, 
   0x31, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x30, 0x2E, 0x30, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 
   0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x38, 0x3A, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x3B, 0x3C, 0x3B, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 
   0x3F, 0x40, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3C, 0x3B, 0x3C, 0x39, 0x3A, 0x39, 0x39, 
   0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3C, 0x3C, 0x3C, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3E, 0x3C, 0x3E, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 
   0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3F, 0x3D, 0x3F, 0x3D, 0x3F, 
   0x3D, 0x41, 0x41, 0x41, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x45, 0x46, 0x45, 
   0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 
   0x43, 0x44, 0x44, 0x44, 0x44, 0x46, 0x44, 0x46, 0x44, 0x45, 0x44, 0x48, 0x47, 0x48, 0x48, 0x48, 
   0x48, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 
   0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x47, 0x48, 0x47, 0x48, 0x47, 0x47, 
   0x48, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x46, 0x47, 
   0x46, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 
   0x4A, 0x4A, 0x4A, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4C, 0x4D, 0x4C, 0x4B, 0x4C, 0x4B, 0x4D, 
   0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x51, 0x51, 
   0x51, 0x52, 0x52, 0x52, 0x51, 0x52, 0x51, 0x4F, 0x4F, 0x4F, 0x52, 0x52, 0x52, 0x78, 0x77, 0x78, 
   0x80, 0x80, 0x80, 0x72, 0x73, 0x72, 0x5F, 0x60, 0x5F, 0x39, 0x38, 0x39, 0x38, 0x37, 0x38, 0x46, 
   0x47, 0x46, 0x36, 0x35, 0x36, 0x4C, 0x4C, 0x4C, 0x4D, 0x4F, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x4E, 0x50, 0x4F, 0x50, 0x4E, 0x4F, 0x4E, 0x4C, 0x4E, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 
   0x4C, 0x4C, 0x4C, 0x4B, 0x4A, 0x4B, 0x4C, 0x4A, 0x4C, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x47, 0x48, 0x47, 0x52, 0x52, 0x52, 0x64, 0x61, 0x64, 0x75, 0x74, 0x75, 0x63, 0x61, 0x63, 0x4A, 
   0x4A, 0x4A, 0x34, 0x35, 0x34, 0x31, 0x30, 0x31, 0x29, 0x2A, 0x29, 0x1D, 0x1C, 0x1D, 0x00, 0x00, 
   0x00, 0x16, 0x16, 0x16, 0x46, 0x45, 0x46, 0x40, 0x41, 0x40, 0x29, 0x2A, 0x29, 0x2F, 0x31, 0x2F, 
   0x40, 0x41, 0x40, 0x39, 0x3B, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3D, 0x3C, 0x3E, 0x3D, 0x3E, 0x3F, 0x3F, 0x3F, 0x42, 0x41, 
   0x42, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x3F, 0x3F, 0x3F, 0x3E, 0x40, 0x3E, 
   0x42, 0x43, 0x42, 0x2E, 0x2E, 0x2E, 0x17, 0x18, 0x17, 0x01, 0x02, 0x01, 0x27, 0x28, 0x27, 0x43, 
   0x42, 0x43, 0x43, 0x43, 0x43, 0x2A, 0x2B, 0x2A, 0x36, 0x38, 0x36, 0x46, 0x46, 0x46, 0x44, 0x43, 
   0x44, 0x44, 0x44, 0x44, 0x46, 0x46, 0x46, 0x44, 0x46, 0x44, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 
   0x47, 0x46, 0x47, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x45, 0x44, 0x45, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 
   0x44, 0x45, 0x44, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 
   0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 
   0x43, 0x43, 0x43, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3C, 0x3C, 0x3C, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 
   0x3B, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 
   0x3A, 0x3C, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 
   0x39, 0x3A, 0x39, 0x3A, 0x38, 0x38, 0x38, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 
   0x36, 0x35, 0x36, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 
   0x32, 0x31, 0x2F, 0x31, 0x2F, 0x2F, 0x30, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2B, 0x2C, 0x2B, 0x2D, 0x2C, 0x2D, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x39, 0x3A, 0x3A, 
   0x39, 0x3A, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 0x39, 
   0x39, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 
   0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x3A, 0x3A, 0x3A, 0x38, 0x39, 0x38, 0x37, 
   0x39, 0x37, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 
   0x3B, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x3C, 0x3C, 0x3C, 0x3D, 
   0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3F, 0x40, 
   0x3F, 0x41, 0x42, 0x41, 0x43, 0x42, 0x43, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x43, 
   0x44, 0x43, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x48, 0x49, 
   0x48, 0x48, 0x4A, 0x48, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x4A, 0x4A, 0x4A, 0x49, 0x4A, 0x49, 0x4A, 0x49, 0x4A, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x48, 0x47, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x49, 0x48, 0x49, 
   0x48, 0x4A, 0x48, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 0x4C, 0x4B, 0x4A, 0x4C, 0x4A, 0x4C, 
   0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4F, 0x4F, 0x4F, 0x50, 0x50, 0x50, 0x51, 0x51, 
   0x51, 0x51, 0x52, 0x51, 0x50, 0x50, 0x50, 0x4D, 0x4E, 0x4D, 0x75, 0x76, 0x75, 0x68, 0x68, 0x68, 
   0x4F, 0x4F, 0x4F, 0x4C, 0x4C, 0x4C, 0x30, 0x30, 0x30, 0x41, 0x42, 0x41, 0x53, 0x53, 0x53, 0x51, 
   0x50, 0x51, 0x51, 0x53, 0x51, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4D, 0x4E, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 
   0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4A, 0x4B, 0x48, 0x4A, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x48, 0x47, 0x48, 
   0x47, 0x48, 0x47, 0x59, 0x58, 0x59, 0x74, 0x75, 0x74, 0x53, 0x52, 0x53, 0x3A, 0x39, 0x3A, 0x38, 
   0x38, 0x38, 0x43, 0x44, 0x43, 0x46, 0x48, 0x46, 0x49, 0x49, 0x49, 0x43, 0x43, 0x43, 0x14, 0x13, 
   0x14, 0x05, 0x05, 0x05, 0x2C, 0x2A, 0x2C, 0x3D, 0x3E, 0x3D, 0x43, 0x43, 0x43, 0x2F, 0x2E, 0x2F, 
   0x23, 0x25, 0x23, 0x39, 0x3A, 0x39, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x41, 0x3F, 
   0x41, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 
   0x3D, 0x3D, 0x3D, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x0B, 0x0B, 0x0B, 0x16, 0x16, 0x16, 0x3D, 
   0x3C, 0x3D, 0x41, 0x40, 0x41, 0x42, 0x41, 0x42, 0x2D, 0x2C, 0x2D, 0x37, 0x37, 0x37, 0x48, 0x47, 
   0x48, 0x43, 0x42, 0x43, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x47, 0x45, 0x47, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 
   0x46, 0x46, 0x46, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 
   0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 
   0x43, 0x44, 0x43, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x3D, 0x3E, 0x3D, 0x3D, 
   0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 
   0x39, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x33, 
   0x32, 0x33, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 
   0x38, 0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x39, 
   0x39, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3A, 0x3B, 0x38, 0x39, 0x38, 0x37, 0x38, 0x37, 0x37, 
   0x38, 0x37, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x38, 0x39, 
   0x38, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x3A, 0x38, 0x3A, 0x3A, 0x3A, 
   0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3C, 
   0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 
   0x3E, 0x41, 0x40, 0x41, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x44, 0x45, 0x44, 0x46, 0x45, 0x46, 
   0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x44, 
   0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x47, 
   0x46, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x48, 0x46, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x4A, 0x48, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x48, 0x49, 0x48, 0x48, 
   0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x47, 0x47, 
   0x47, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 
   0x49, 0x49, 0x49, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4C, 0x4B, 0x4C, 0x4D, 0x4C, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x50, 0x50, 0x50, 0x4F, 0x50, 
   0x4F, 0x4E, 0x4D, 0x4E, 0x56, 0x55, 0x56, 0x6E, 0x6E, 0x6E, 0x85, 0x84, 0x85, 0x66, 0x65, 0x66, 
   0x53, 0x54, 0x53, 0x48, 0x4A, 0x48, 0x35, 0x33, 0x35, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x4F, 
   0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 0x4C, 0x4C, 0x4C, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 
   0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x49, 
   0x4A, 0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x47, 0x47, 
   0x47, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x47, 0x46, 0x47, 0x41, 0x40, 0x41, 
   0x41, 0x43, 0x41, 0x63, 0x64, 0x63, 0x64, 0x64, 0x64, 0x44, 0x45, 0x44, 0x28, 0x27, 0x28, 0x39, 
   0x38, 0x39, 0x45, 0x44, 0x45, 0x3C, 0x3D, 0x3C, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x35, 0x35, 
   0x35, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x22, 0x23, 0x22, 0x44, 0x45, 0x44, 0x34, 0x34, 0x34, 
   0x15, 0x15, 0x15, 0x35, 0x33, 0x35, 0x3B, 0x3A, 0x3B, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3B, 0x39, 0x3B, 0x3B, 0x3A, 0x3B, 0x3C, 0x3D, 
   0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x40, 0x40, 0x40, 0x17, 0x17, 0x17, 0x00, 0x00, 0x00, 0x32, 
   0x34, 0x32, 0x42, 0x43, 0x42, 0x42, 0x44, 0x42, 0x39, 0x3C, 0x39, 0x29, 0x28, 0x29, 0x3A, 0x3B, 
   0x3A, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x46, 0x45, 0x46, 
   0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x43, 0x43, 0x43, 0x42, 
   0x43, 0x42, 0x42, 0x43, 0x42, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x42, 0x43, 
   0x42, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x45, 0x46, 0x45, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x47, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 
   0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 
   0x41, 0x43, 0x41, 0x40, 0x41, 0x40, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3C, 
   0x3C, 0x3C, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 
   0x3C, 0x3B, 0x3C, 0x3D, 0x3B, 0x3D, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3D, 0x3B, 0x3D, 0x3C, 
   0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3A, 
   0x3B, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x35, 0x35, 0x35, 0x33, 0x35, 0x33, 0x34, 0x33, 0x34, 0x32, 
   0x32, 0x32, 0x32, 0x31, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2D, 
   0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 
   0x36, 0x35, 0x35, 0x36, 0x35, 0x38, 0x37, 0x38, 0x38, 0x37, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 
   0x38, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 
   0x3A, 0x39, 0x3A, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x36, 0x37, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x37, 0x37, 
   0x37, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3E, 0x3C, 
   0x3E, 0x3E, 0x3E, 0x3E, 0x41, 0x41, 0x41, 0x42, 0x43, 0x42, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x46, 
   0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 0x47, 0x45, 0x46, 0x46, 0x46, 0x46, 0x47, 
   0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x49, 0x49, 0x49, 
   0x49, 0x4A, 0x49, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x49, 0x4B, 0x49, 0x49, 0x49, 0x49, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 
   0x46, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x48, 0x47, 0x48, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x49, 0x48, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 
   0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4E, 0x4C, 0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x55, 0x55, 
   0x55, 0x63, 0x61, 0x63, 0x66, 0x64, 0x66, 0x83, 0x83, 0x83, 0x65, 0x66, 0x65, 0x51, 0x51, 0x51, 
   0x38, 0x38, 0x38, 0x47, 0x46, 0x47, 0x34, 0x35, 0x34, 0x4C, 0x4E, 0x4C, 0x52, 0x53, 0x52, 0x4E, 
   0x4F, 0x4E, 0x4F, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4D, 
   0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 
   0x49, 0x49, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x46, 0x47, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x54, 0x54, 0x54, 0x61, 0x5F, 0x61, 
   0x53, 0x55, 0x53, 0x5D, 0x5E, 0x5D, 0x4C, 0x4C, 0x4C, 0x38, 0x37, 0x38, 0x2A, 0x2B, 0x2A, 0x41, 
   0x40, 0x41, 0x47, 0x46, 0x47, 0x45, 0x46, 0x45, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x43, 0x43, 
   0x43, 0x26, 0x26, 0x26, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x19, 0x19, 0x19, 0x36, 0x36, 0x36, 
   0x30, 0x2E, 0x30, 0x28, 0x28, 0x28, 0x39, 0x3A, 0x39, 0x38, 0x39, 0x38, 0x38, 0x37, 0x38, 0x37, 
   0x37, 0x37, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 
   0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3E, 0x3E, 0x3E, 0x2B, 0x2C, 0x2B, 0x00, 0x01, 0x00, 0x0E, 
   0x0E, 0x0E, 0x24, 0x25, 0x24, 0x3A, 0x3A, 0x3A, 0x43, 0x44, 0x43, 0x30, 0x2F, 0x30, 0x1D, 0x1D, 
   0x1D, 0x40, 0x41, 0x40, 0x46, 0x45, 0x46, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 
   0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 
   0x43, 0x45, 0x45, 0x45, 0x44, 0x46, 0x44, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x45, 0x46, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x41, 0x42, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 
   0x41, 0x41, 0x41, 0x3F, 0x40, 0x3F, 0x3C, 0x3E, 0x3C, 0x3B, 0x3C, 0x3B, 0x3C, 0x3A, 0x3C, 0x39, 
   0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x39, 0x39, 0x39, 0x3A, 0x3A, 
   0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 
   0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 
   0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3B, 0x3C, 0x3B, 0x3A, 0x3B, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 
   0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x34, 0x36, 0x34, 0x35, 0x34, 0x35, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 0x31, 0x30, 0x31, 0x2F, 0x2F, 
   0x2F, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x33, 
   0x35, 0x33, 0x36, 0x36, 0x36, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x38, 
   0x39, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 
   0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 
   0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x36, 0x37, 0x36, 0x35, 
   0x36, 0x35, 0x35, 0x35, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x38, 0x37, 0x38, 0x39, 0x38, 0x39, 
   0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 
   0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x3C, 0x3A, 0x3C, 0x3D, 0x3C, 
   0x3D, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x43, 0x42, 0x43, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 
   0x46, 0x46, 0x46, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x47, 0x48, 0x47, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x45, 0x47, 0x45, 0x45, 0x46, 
   0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 
   0x49, 0x4A, 0x49, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x48, 0x49, 0x48, 0x47, 
   0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x46, 0x46, 
   0x46, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 
   0x4A, 0x4B, 0x4C, 0x4D, 0x4C, 0x4C, 0x4B, 0x4C, 0x4A, 0x4A, 0x4A, 0x4B, 0x4D, 0x4B, 0x5C, 0x5C, 
   0x5C, 0x8B, 0x8B, 0x8B, 0x8F, 0x8F, 0x8F, 0x65, 0x64, 0x65, 0x4D, 0x4E, 0x4D, 0x44, 0x43, 0x44, 
   0x47, 0x48, 0x47, 0x4B, 0x4C, 0x4B, 0x58, 0x58, 0x58, 0x53, 0x53, 0x53, 0x4F, 0x4F, 0x4F, 0x4F, 
   0x4E, 0x4F, 0x4D, 0x4E, 0x4D, 0x4D, 0x4E, 0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4D, 0x4D, 
   0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4A, 0x4C, 0x4A, 0x4B, 0x4B, 0x4B, 
   0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 
   0x49, 0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x45, 0x45, 
   0x45, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x3D, 0x3E, 0x3D, 0x5C, 0x5C, 0x5C, 0x8F, 0x8E, 0x8F, 
   0x77, 0x76, 0x77, 0x4C, 0x4C, 0x4C, 0x3D, 0x3E, 0x3D, 0x27, 0x25, 0x27, 0x46, 0x47, 0x46, 0x45, 
   0x47, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x42, 0x44, 0x42, 0x42, 0x41, 0x42, 0x3E, 0x3F, 
   0x3E, 0x3E, 0x40, 0x3E, 0x2F, 0x2D, 0x2F, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x24, 0x23, 0x24, 
   0x40, 0x3F, 0x40, 0x2E, 0x2D, 0x2E, 0x2C, 0x2D, 0x2C, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x36, 
   0x37, 0x36, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x39, 0x38, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3A, 0x3B, 
   0x3C, 0x3A, 0x3C, 0x3B, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 0x36, 0x37, 0x36, 0x1B, 0x1A, 0x1B, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x2D, 0x2E, 0x2D, 0x43, 0x41, 0x43, 0x40, 0x40, 0x40, 0x34, 0x34, 
   0x34, 0x36, 0x35, 0x36, 0x42, 0x41, 0x42, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x44, 0x43, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x44, 0x43, 0x44, 0x42, 0x43, 0x42, 0x42, 
   0x43, 0x42, 0x42, 0x43, 0x42, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x44, 0x45, 
   0x44, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x47, 0x48, 0x47, 0x46, 0x47, 0x46, 0x45, 
   0x46, 0x45, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x3F, 0x40, 
   0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x41, 0x42, 0x40, 0x3F, 0x40, 0x3C, 0x3D, 0x3C, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x38, 0x37, 0x38, 0x39, 0x38, 0x39, 0x3B, 0x3A, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3D, 0x3B, 0x3D, 0x3C, 0x3A, 0x3C, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3D, 0x3C, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x3B, 0x3B, 
   0x3B, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x38, 0x39, 0x38, 0x36, 0x37, 0x36, 0x35, 0x35, 0x35, 0x34, 
   0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x31, 0x31, 0x31, 0x2E, 0x2F, 
   0x2E, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x36, 0x36, 0x36, 0x39, 0x37, 0x39, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x39, 0x37, 0x38, 0x37, 0x38, 0x39, 0x37, 0x39, 
   0x38, 0x37, 0x38, 0x37, 0x36, 0x37, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x35, 0x36, 0x36, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x37, 0x35, 0x36, 0x35, 0x36, 0x35, 0x34, 
   0x35, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x39, 0x37, 0x39, 
   0x37, 0x38, 0x37, 0x37, 0x36, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 
   0x3B, 0x3D, 0x3E, 0x3D, 0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 
   0x46, 0x46, 0x46, 0x47, 0x48, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x45, 0x47, 0x45, 0x46, 0x46, 
   0x46, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x4A, 0x48, 0x4A, 
   0x48, 0x4A, 0x48, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x49, 0x4A, 0x49, 0x4A, 0x49, 0x4A, 0x48, 
   0x48, 0x48, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x45, 0x46, 
   0x45, 0x44, 0x45, 0x44, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x48, 
   0x49, 0x48, 0x4A, 0x49, 0x4A, 0x6B, 0x6B, 0x6B, 0x85, 0x85, 0x85, 0x80, 0x82, 0x80, 0x84, 0x84, 
   0x84, 0x93, 0x94, 0x93, 0x80, 0x80, 0x80, 0x58, 0x58, 0x58, 0x37, 0x38, 0x37, 0x45, 0x43, 0x45, 
   0x52, 0x55, 0x52, 0x48, 0x48, 0x48, 0x54, 0x55, 0x54, 0x51, 0x52, 0x51, 0x4F, 0x50, 0x4F, 0x4E, 
   0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4E, 0x4D, 
   0x4E, 0x4B, 0x4C, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 
   0x4B, 0x4B, 0x4B, 0x49, 0x4B, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x48, 
   0x4A, 0x48, 0x4A, 0x48, 0x4A, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x4B, 0x4E, 
   0x4B, 0x6A, 0x6B, 0x6A, 0x73, 0x73, 0x73, 0x60, 0x5F, 0x60, 0x61, 0x60, 0x61, 0x78, 0x77, 0x78, 
   0x54, 0x53, 0x54, 0x41, 0x40, 0x41, 0x2F, 0x31, 0x2F, 0x2C, 0x2D, 0x2C, 0x42, 0x43, 0x42, 0x45, 
   0x45, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x43, 0x44, 0x43, 0x41, 0x42, 0x41, 0x3F, 0x3F, 
   0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x22, 0x21, 0x22, 0x03, 0x03, 0x03, 0x07, 0x07, 0x07, 
   0x2D, 0x2B, 0x2D, 0x37, 0x38, 0x37, 0x23, 0x25, 0x23, 0x36, 0x38, 0x36, 0x48, 0x48, 0x48, 0x3B, 
   0x3A, 0x3B, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x38, 0x37, 
   0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x39, 0x3A, 0x2D, 0x2E, 0x2D, 0x13, 
   0x13, 0x13, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x31, 0x2E, 0x31, 0x44, 0x43, 0x44, 0x44, 0x42, 
   0x44, 0x32, 0x31, 0x32, 0x39, 0x38, 0x39, 0x47, 0x46, 0x47, 0x48, 0x48, 0x48, 0x41, 0x42, 0x41, 
   0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x43, 
   0x42, 0x43, 0x44, 0x43, 0x44, 0x42, 0x44, 0x42, 0x44, 0x45, 0x44, 0x44, 0x45, 0x44, 0x46, 0x45, 
   0x46, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x47, 0x47, 0x48, 0x47, 
   0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x45, 
   0x45, 0x45, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x44, 0x42, 0x44, 0x42, 0x42, 0x42, 
   0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3D, 0x3C, 0x3D, 0x3A, 0x3B, 0x3A, 0x39, 0x3A, 0x39, 0x37, 
   0x38, 0x37, 0x38, 0x37, 0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x3A, 0x38, 0x3A, 0x39, 0x3A, 
   0x39, 0x3C, 0x3B, 0x3C, 0x3D, 0x3C, 0x3D, 0x3A, 0x3B, 0x3A, 0x3B, 0x39, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 
   0x3E, 0x3C, 0x3E, 0x3D, 0x3E, 0x3F, 0x3D, 0x3F, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x39, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x38, 0x37, 0x38, 0x35, 0x36, 0x35, 0x34, 
   0x35, 0x34, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 0x32, 0x33, 0x32, 0x30, 0x32, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x2F, 0x30, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x34, 0x32, 0x34, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x35, 0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x37, 
   0x36, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 
   0x37, 0x35, 0x37, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x34, 
   0x35, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 
   0x37, 0x36, 0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x3A, 0x3B, 0x3A, 0x3B, 0x3C, 
   0x3B, 0x3D, 0x3D, 0x3D, 0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 
   0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 
   0x46, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 0x47, 
   0x48, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x45, 0x46, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 
   0x4A, 0x4A, 0x43, 0x40, 0x43, 0x75, 0x75, 0x75, 0x7F, 0x81, 0x7F, 0xA9, 0xA9, 0xA9, 0x9B, 0x9C, 
   0x9B, 0x70, 0x70, 0x70, 0x4F, 0x50, 0x4F, 0x40, 0x41, 0x40, 0x35, 0x34, 0x35, 0x51, 0x51, 0x51, 
   0x56, 0x56, 0x56, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x50, 0x53, 0x50, 0x4F, 0x50, 0x4F, 0x4F, 
   0x4E, 0x4F, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 
   0x4C, 0x4C, 0x4C, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4C, 0x4A, 0x4C, 0x4B, 0x4C, 
   0x4A, 0x4B, 0x4A, 0x4A, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x48, 
   0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x41, 0x43, 0x41, 0x4F, 0x51, 
   0x4F, 0x8D, 0x8F, 0x8D, 0xA1, 0xA1, 0xA1, 0x8E, 0x8E, 0x8E, 0x6B, 0x6A, 0x6B, 0x48, 0x48, 0x48, 
   0x39, 0x3A, 0x39, 0x45, 0x46, 0x45, 0x44, 0x43, 0x44, 0x45, 0x45, 0x45, 0x46, 0x47, 0x46, 0x45, 
   0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x40, 0x42, 0x40, 0x3F, 0x3F, 
   0x3F, 0x3D, 0x3D, 0x3D, 0x3A, 0x3B, 0x3A, 0x3C, 0x3C, 0x3C, 0x29, 0x27, 0x29, 0x00, 0x00, 0x00, 
   0x09, 0x08, 0x09, 0x32, 0x32, 0x32, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x30, 
   0x2F, 0x30, 0x36, 0x37, 0x36, 0x39, 0x39, 0x39, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x36, 0x36, 
   0x36, 0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x38, 
   0x38, 0x38, 0x15, 0x15, 0x15, 0x00, 0x00, 0x00, 0x12, 0x13, 0x12, 0x39, 0x39, 0x39, 0x40, 0x40, 
   0x40, 0x42, 0x41, 0x42, 0x3D, 0x3F, 0x3D, 0x36, 0x35, 0x36, 0x3F, 0x3E, 0x3F, 0x46, 0x46, 0x46, 
   0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x45, 0x45, 
   0x45, 0x44, 0x45, 0x44, 0x46, 0x46, 0x46, 0x45, 0x47, 0x45, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 
   0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x46, 0x46, 0x46, 0x45, 
   0x44, 0x45, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x40, 0x40, 0x40, 0x3D, 0x3F, 0x3D, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3A, 0x39, 0x3A, 0x38, 
   0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x3B, 0x3B, 
   0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 
   0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3D, 0x3B, 0x3C, 
   0x3B, 0x3C, 0x3A, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3A, 0x3C, 0x3C, 0x3B, 0x3C, 
   0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x36, 
   0x35, 0x36, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x30, 0x30, 
   0x30, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x34, 0x33, 0x34, 0x34, 
   0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 
   0x35, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x35, 0x35, 0x35, 
   0x36, 0x35, 0x36, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x34, 
   0x33, 0x34, 0x34, 0x32, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 
   0x33, 0x32, 0x33, 0x32, 0x31, 0x33, 0x31, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x35, 0x34, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x37, 0x36, 0x39, 0x38, 0x39, 0x38, 
   0x37, 0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 0x39, 0x37, 0x3A, 0x3A, 0x3A, 0x3B, 0x3C, 
   0x3B, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 0x3F, 0x40, 0x42, 0x40, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 
   0x45, 0x46, 0x45, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 0x46, 0x47, 0x46, 0x46, 
   0x47, 0x46, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x46, 0x46, 
   0x46, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 
   0x48, 0x48, 0x48, 0x4A, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x49, 0x48, 0x47, 
   0x48, 0x47, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x4A, 0x49, 0x4A, 
   0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x44, 0x44, 0x44, 0x61, 0x60, 0x61, 0x7D, 0x7E, 0x7D, 0x80, 
   0x80, 0x80, 0x67, 0x67, 0x67, 0x6E, 0x6E, 0x6E, 0x78, 0x7A, 0x78, 0x85, 0x84, 0x85, 0x6B, 0x6B, 
   0x6B, 0x4D, 0x4C, 0x4D, 0x28, 0x27, 0x28, 0x3F, 0x3F, 0x3F, 0x46, 0x46, 0x46, 0x4E, 0x4F, 0x4E, 
   0x53, 0x53, 0x53, 0x53, 0x54, 0x53, 0x52, 0x53, 0x52, 0x51, 0x52, 0x51, 0x4F, 0x50, 0x4F, 0x4F, 
   0x4E, 0x4F, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4C, 
   0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4A, 0x4B, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x4A, 0x49, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 
   0x48, 0x48, 0x43, 0x43, 0x43, 0x5D, 0x5C, 0x5D, 0x7B, 0x7C, 0x7B, 0x6E, 0x6E, 0x6E, 0x6D, 0x6C, 
   0x6D, 0x81, 0x83, 0x81, 0x7C, 0x7B, 0x7C, 0x64, 0x63, 0x64, 0x4F, 0x4D, 0x4F, 0x44, 0x44, 0x44, 
   0x3F, 0x3F, 0x3F, 0x46, 0x48, 0x46, 0x4B, 0x4C, 0x4B, 0x40, 0x3F, 0x40, 0x45, 0x45, 0x45, 0x45, 
   0x46, 0x45, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x40, 0x3F, 0x40, 0x3D, 0x3D, 
   0x3D, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x38, 0x3A, 0x38, 0x38, 0x38, 0x38, 0x13, 0x11, 0x13, 
   0x00, 0x00, 0x00, 0x09, 0x09, 0x09, 0x13, 0x13, 0x13, 0x39, 0x3A, 0x39, 0x37, 0x39, 0x37, 0x29, 
   0x29, 0x29, 0x38, 0x37, 0x38, 0x3B, 0x3A, 0x3B, 0x38, 0x37, 0x38, 0x35, 0x35, 0x35, 0x35, 0x36, 
   0x35, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 
   0x39, 0x38, 0x36, 0x35, 0x36, 0x0D, 0x0D, 0x0D, 0x00, 0x00, 0x00, 0x17, 0x17, 0x17, 0x40, 0x3E, 
   0x40, 0x41, 0x42, 0x41, 0x4A, 0x4A, 0x4A, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 0x46, 0x46, 0x46, 
   0x45, 0x47, 0x45, 0x42, 0x43, 0x42, 0x42, 0x44, 0x42, 0x44, 0x43, 0x44, 0x42, 0x43, 0x42, 0x42, 
   0x42, 0x42, 0x44, 0x42, 0x44, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x44, 
   0x42, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x48, 0x49, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x45, 0x45, 0x45, 0x42, 
   0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x40, 
   0x41, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 
   0x40, 0x40, 0x40, 0x3E, 0x3E, 0x3E, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x39, 0x3B, 0x39, 0x3A, 
   0x3A, 0x3A, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 0x39, 0x37, 0x3A, 0x39, 0x3A, 0x3B, 0x3C, 
   0x3B, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3D, 0x3C, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x40, 0x3F, 0x40, 0x40, 
   0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 
   0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3D, 0x3B, 0x3D, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 0x38, 0x37, 0x38, 0x36, 0x36, 0x36, 0x36, 
   0x35, 0x36, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 0x30, 
   0x31, 0x30, 0x2F, 0x30, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 
   0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x33, 0x31, 0x33, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x35, 
   0x34, 0x35, 0x35, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 
   0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x34, 0x36, 0x34, 0x34, 0x35, 0x34, 
   0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x32, 
   0x31, 0x32, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x32, 0x34, 
   0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x37, 0x37, 0x37, 0x37, 
   0x38, 0x37, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 
   0x3A, 0x3D, 0x3B, 0x3D, 0x40, 0x3F, 0x40, 0x42, 0x42, 0x42, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 
   0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x47, 0x46, 0x47, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 
   0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x47, 0x45, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x47, 0x46, 
   0x47, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x45, 0x47, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 
   0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x47, 0x45, 0x46, 0x46, 0x46, 0x45, 0x44, 
   0x45, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x47, 0x46, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 
   0x4A, 0x49, 0x4A, 0x4D, 0x4D, 0x4D, 0x51, 0x52, 0x51, 0x78, 0x78, 0x78, 0x9E, 0x9F, 0x9E, 0xA1, 
   0xA1, 0xA1, 0x94, 0x94, 0x94, 0x65, 0x64, 0x65, 0x50, 0x4F, 0x50, 0x50, 0x50, 0x50, 0x43, 0x45, 
   0x43, 0x3E, 0x40, 0x3E, 0x18, 0x17, 0x18, 0x57, 0x57, 0x57, 0x56, 0x56, 0x56, 0x52, 0x53, 0x52, 
   0x53, 0x54, 0x53, 0x53, 0x54, 0x53, 0x54, 0x53, 0x54, 0x51, 0x51, 0x51, 0x4F, 0x50, 0x4F, 0x4E, 
   0x50, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 
   0x4C, 0x4C, 0x4C, 0x4C, 0x4A, 0x4C, 0x4A, 0x4B, 0x4C, 0x4B, 0x4A, 0x4B, 0x4A, 0x4C, 0x4B, 0x4C, 
   0x4A, 0x4A, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x49, 
   0x49, 0x49, 0x4B, 0x4A, 0x4B, 0x6C, 0x6D, 0x6C, 0x89, 0x8A, 0x89, 0x7F, 0x80, 0x7F, 0x74, 0x73, 
   0x74, 0x4E, 0x4F, 0x4E, 0x47, 0x47, 0x47, 0x41, 0x41, 0x41, 0x39, 0x39, 0x39, 0x3F, 0x40, 0x3F, 
   0x44, 0x43, 0x44, 0x3E, 0x3D, 0x3E, 0x46, 0x43, 0x46, 0x44, 0x43, 0x44, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x3E, 0x3E, 0x3E, 0x3C, 0x3D, 
   0x3C, 0x3B, 0x3C, 0x3B, 0x39, 0x3A, 0x39, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x2D, 0x2E, 0x2D, 
   0x07, 0x08, 0x07, 0x0C, 0x0B, 0x0C, 0x00, 0x00, 0x00, 0x10, 0x11, 0x10, 0x34, 0x34, 0x34, 0x36, 
   0x36, 0x36, 0x37, 0x36, 0x37, 0x2A, 0x2B, 0x2A, 0x2E, 0x30, 0x2E, 0x36, 0x37, 0x36, 0x35, 0x36, 
   0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 
   0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x39, 0x38, 0x39, 0x36, 0x38, 0x36, 0x37, 0x38, 0x37, 0x37, 
   0x38, 0x37, 0x3E, 0x3C, 0x3E, 0x28, 0x28, 0x28, 0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x22, 0x21, 
   0x22, 0x3C, 0x3C, 0x3C, 0x40, 0x40, 0x40, 0x47, 0x47, 0x47, 0x3F, 0x40, 0x3F, 0x39, 0x37, 0x39, 
   0x40, 0x41, 0x40, 0x49, 0x47, 0x49, 0x45, 0x44, 0x45, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x45, 0x46, 0x45, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 
   0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x45, 0x47, 0x45, 0x44, 0x45, 0x44, 0x42, 
   0x43, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 
   0x40, 0x40, 0x40, 0x3E, 0x3E, 0x3E, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3D, 0x3B, 0x3D, 0x3A, 
   0x3B, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3B, 0x3C, 
   0x3B, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 0x3E, 0x3F, 0x40, 0x3F, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3D, 0x3F, 0x3D, 0x3D, 0x3D, 
   0x3D, 0x3C, 0x3D, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x38, 0x37, 0x38, 0x36, 0x36, 0x36, 0x35, 
   0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x32, 0x33, 0x32, 0x31, 0x31, 
   0x31, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2C, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x34, 0x36, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x33, 0x31, 0x33, 0x31, 0x32, 0x31, 0x31, 
   0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 
   0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 
   0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x36, 0x35, 0x37, 
   0x37, 0x37, 0x37, 0x36, 0x37, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 
   0x3A, 0x3D, 0x3C, 0x3D, 0x3F, 0x3F, 0x3F, 0x40, 0x42, 0x40, 0x44, 0x44, 0x44, 0x46, 0x44, 0x46, 
   0x44, 0x46, 0x44, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x43, 
   0x44, 0x43, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x47, 0x46, 
   0x47, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x44, 0x46, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x45, 0x46, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x44, 0x45, 0x44, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 
   0x43, 0x44, 0x43, 0x57, 0x58, 0x57, 0x85, 0x86, 0x85, 0x89, 0x8B, 0x89, 0x7C, 0x7D, 0x7C, 0x80, 
   0x7F, 0x80, 0x82, 0x82, 0x82, 0x5E, 0x5F, 0x5E, 0x4F, 0x50, 0x4F, 0x4F, 0x4E, 0x4F, 0x3D, 0x3E, 
   0x3D, 0x45, 0x46, 0x45, 0x28, 0x28, 0x28, 0x5A, 0x5B, 0x5A, 0x56, 0x56, 0x56, 0x50, 0x50, 0x50, 
   0x53, 0x54, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x50, 0x52, 0x50, 0x4F, 0x50, 0x4F, 0x4F, 
   0x4F, 0x4F, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 
   0x4D, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4A, 0x4B, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x45, 0x46, 0x45, 0x48, 
   0x4A, 0x48, 0x63, 0x61, 0x63, 0x6D, 0x6E, 0x6D, 0x6F, 0x6F, 0x6F, 0x5D, 0x5E, 0x5D, 0x4C, 0x4C, 
   0x4C, 0x2F, 0x2F, 0x2F, 0x4C, 0x4C, 0x4C, 0x46, 0x47, 0x46, 0x47, 0x48, 0x47, 0x3E, 0x40, 0x3E, 
   0x38, 0x38, 0x38, 0x41, 0x3F, 0x41, 0x41, 0x43, 0x41, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x44, 
   0x45, 0x44, 0x44, 0x44, 0x44, 0x43, 0x42, 0x43, 0x40, 0x3F, 0x40, 0x3D, 0x3E, 0x3D, 0x3C, 0x3C, 
   0x3C, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x33, 0x34, 0x33, 
   0x23, 0x21, 0x23, 0x23, 0x23, 0x23, 0x0A, 0x0B, 0x0A, 0x00, 0x00, 0x00, 0x13, 0x12, 0x13, 0x34, 
   0x36, 0x34, 0x38, 0x38, 0x38, 0x2B, 0x2A, 0x2B, 0x25, 0x25, 0x25, 0x34, 0x36, 0x34, 0x35, 0x35, 
   0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x38, 
   0x37, 0x38, 0x39, 0x39, 0x39, 0x35, 0x37, 0x35, 0x21, 0x21, 0x21, 0x02, 0x02, 0x02, 0x00, 0x00, 
   0x00, 0x2F, 0x30, 0x2F, 0x41, 0x42, 0x41, 0x44, 0x44, 0x44, 0x45, 0x46, 0x45, 0x3E, 0x3D, 0x3E, 
   0x39, 0x39, 0x39, 0x43, 0x43, 0x43, 0x49, 0x49, 0x49, 0x44, 0x42, 0x44, 0x42, 0x42, 0x42, 0x41, 
   0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 
   0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x45, 0x45, 0x45, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x46, 0x46, 0x44, 0x46, 0x44, 0x43, 0x44, 0x43, 0x43, 
   0x42, 0x43, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x42, 0x41, 0x42, 0x3F, 0x41, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x3C, 0x3B, 0x3C, 0x3B, 0x3D, 0x3C, 0x3D, 0x3A, 
   0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x3B, 0x3A, 0x3D, 0x3C, 
   0x3D, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x41, 
   0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x3D, 0x3F, 
   0x3C, 0x3D, 0x3C, 0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 0x38, 0x37, 0x38, 0x36, 0x36, 0x36, 0x36, 
   0x35, 0x36, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x32, 0x33, 0x32, 0x31, 0x31, 
   0x31, 0x2F, 0x31, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 
   0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 
   0x34, 0x33, 0x34, 0x33, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 
   0x33, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 
   0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x34, 0x32, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 
   0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x3A, 0x3B, 
   0x3A, 0x3D, 0x3C, 0x3D, 0x40, 0x3F, 0x40, 0x42, 0x42, 0x42, 0x45, 0x44, 0x45, 0x45, 0x46, 0x45, 
   0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x45, 0x46, 0x43, 0x44, 0x43, 0x41, 
   0x43, 0x41, 0x42, 0x44, 0x42, 0x44, 0x44, 0x44, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 
   0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x46, 0x45, 0x46, 0x45, 
   0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x44, 0x44, 
   0x44, 0x42, 0x44, 0x42, 0x44, 0x44, 0x44, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x49, 0x4A, 0x49, 
   0x50, 0x51, 0x50, 0x5B, 0x59, 0x5B, 0x85, 0x86, 0x85, 0x77, 0x77, 0x77, 0x5B, 0x5A, 0x5B, 0x55, 
   0x55, 0x55, 0x52, 0x53, 0x52, 0x50, 0x51, 0x50, 0x56, 0x56, 0x56, 0x4B, 0x4C, 0x4B, 0x4D, 0x4D, 
   0x4D, 0x3D, 0x3D, 0x3D, 0x38, 0x38, 0x38, 0x49, 0x49, 0x49, 0x52, 0x53, 0x52, 0x52, 0x53, 0x52, 
   0x52, 0x53, 0x52, 0x52, 0x53, 0x52, 0x52, 0x52, 0x52, 0x51, 0x51, 0x51, 0x50, 0x50, 0x50, 0x4E, 
   0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 0x4C, 0x4D, 0x4C, 0x4E, 0x4D, 
   0x4E, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4C, 0x4D, 0x4C, 0x4B, 0x4C, 0x4B, 
   0x4A, 0x4B, 0x4A, 0x48, 0x49, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x59, 
   0x59, 0x59, 0x6F, 0x6F, 0x6F, 0x6A, 0x6B, 0x6A, 0x56, 0x55, 0x56, 0x3F, 0x3E, 0x3F, 0x3B, 0x3A, 
   0x3B, 0x2F, 0x30, 0x2F, 0x4D, 0x4E, 0x4D, 0x3B, 0x3D, 0x3B, 0x31, 0x31, 0x31, 0x48, 0x48, 0x48, 
   0x49, 0x4A, 0x49, 0x45, 0x45, 0x45, 0x43, 0x44, 0x43, 0x46, 0x44, 0x46, 0x44, 0x45, 0x44, 0x45, 
   0x45, 0x45, 0x43, 0x44, 0x43, 0x41, 0x41, 0x41, 0x3F, 0x3E, 0x3F, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 
   0x36, 0x36, 0x36, 0x30, 0x2E, 0x30, 0x26, 0x25, 0x26, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x1B, 
   0x1A, 0x1B, 0x32, 0x32, 0x32, 0x35, 0x35, 0x35, 0x2B, 0x2A, 0x2B, 0x2D, 0x2C, 0x2D, 0x37, 0x36, 
   0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 
   0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x37, 
   0x37, 0x37, 0x38, 0x37, 0x38, 0x3B, 0x3B, 0x3B, 0x3D, 0x3D, 0x3D, 0x17, 0x17, 0x17, 0x00, 0x00, 
   0x00, 0x15, 0x15, 0x15, 0x38, 0x38, 0x38, 0x3F, 0x40, 0x3F, 0x42, 0x43, 0x42, 0x4B, 0x4A, 0x4B, 
   0x41, 0x3E, 0x41, 0x32, 0x32, 0x32, 0x41, 0x3F, 0x41, 0x44, 0x43, 0x44, 0x40, 0x41, 0x40, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x41, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 
   0x42, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 
   0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x45, 0x47, 0x45, 0x44, 0x45, 0x44, 0x43, 0x43, 0x43, 0x42, 
   0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 
   0x40, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 
   0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x38, 0x3A, 0x38, 0x39, 0x3A, 0x39, 0x3D, 0x3C, 0x3D, 0x3E, 0x3D, 
   0x3E, 0x3E, 0x3E, 0x3E, 0x41, 0x3F, 0x41, 0x3F, 0x3F, 0x3F, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 
   0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x40, 0x40, 0x40, 0x40, 
   0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x3D, 0x3E, 0x3C, 0x3B, 0x3C, 0x3B, 0x3A, 0x3B, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x35, 
   0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x34, 0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x33, 0x33, 
   0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 
   0x30, 0x2E, 0x30, 0x2E, 0x2E, 0x2E, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 
   0x31, 0x30, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 
   0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 
   0x34, 0x35, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x37, 0x37, 0x37, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3E, 0x3E, 0x3E, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x43, 0x45, 0x43, 0x46, 0x45, 0x46, 
   0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x43, 0x43, 0x43, 0x43, 
   0x42, 0x43, 0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x42, 0x44, 0x42, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 
   0x44, 0x42, 0x44, 0x42, 0x43, 0x42, 0x41, 0x41, 0x41, 0x43, 0x42, 0x43, 0x42, 0x44, 0x42, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 
   0x43, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 0x44, 0x45, 0x44, 0x46, 0x47, 0x46, 0x56, 0x59, 0x56, 
   0x79, 0x7C, 0x79, 0x76, 0x78, 0x76, 0x51, 0x51, 0x51, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x44, 
   0x45, 0x44, 0x41, 0x40, 0x41, 0x4D, 0x4E, 0x4D, 0x2C, 0x2E, 0x2C, 0x35, 0x34, 0x35, 0x4D, 0x4E, 
   0x4D, 0x4E, 0x4E, 0x4E, 0x4F, 0x50, 0x4F, 0x4F, 0x50, 0x4F, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 
   0x51, 0x52, 0x51, 0x52, 0x53, 0x52, 0x51, 0x52, 0x51, 0x51, 0x51, 0x51, 0x50, 0x50, 0x50, 0x4E, 
   0x50, 0x4E, 0x50, 0x4F, 0x50, 0x4F, 0x4F, 0x4F, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4D, 0x4E, 
   0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4C, 0x4D, 0x4C, 
   0x4B, 0x4C, 0x4B, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x48, 0x48, 0x48, 0x3B, 0x3B, 0x3B, 0x6E, 
   0x6F, 0x6E, 0x7B, 0x7B, 0x7B, 0x51, 0x52, 0x51, 0x43, 0x43, 0x43, 0x35, 0x34, 0x35, 0x42, 0x43, 
   0x42, 0x33, 0x35, 0x33, 0x41, 0x41, 0x41, 0x44, 0x45, 0x44, 0x40, 0x3F, 0x40, 0x45, 0x46, 0x45, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 
   0x44, 0x44, 0x43, 0x43, 0x43, 0x3F, 0x40, 0x3F, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3A, 0x3B, 
   0x3A, 0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x37, 0x38, 0x37, 
   0x37, 0x36, 0x37, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x24, 0x25, 0x24, 0x03, 0x02, 0x03, 0x00, 
   0x00, 0x00, 0x08, 0x07, 0x08, 0x2A, 0x29, 0x2A, 0x38, 0x38, 0x38, 0x33, 0x32, 0x33, 0x36, 0x35, 
   0x36, 0x34, 0x33, 0x34, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 
   0x35, 0x34, 0x35, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x38, 
   0x37, 0x38, 0x38, 0x38, 0x38, 0x39, 0x3A, 0x39, 0x3C, 0x3C, 0x3C, 0x3B, 0x3A, 0x3B, 0x22, 0x23, 
   0x22, 0x00, 0x00, 0x00, 0x06, 0x06, 0x06, 0x2A, 0x2B, 0x2A, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 
   0x45, 0x47, 0x45, 0x2B, 0x2C, 0x2B, 0x24, 0x22, 0x24, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x40, 
   0x40, 0x40, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x43, 0x42, 0x43, 0x42, 0x43, 
   0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 
   0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x42, 0x43, 0x42, 0x41, 
   0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x3F, 0x40, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3D, 0x3F, 0x3D, 
   0x3E, 0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3A, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3F, 0x3D, 0x3F, 0x3F, 0x40, 
   0x3F, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x40, 0x41, 0x40, 0x41, 0x40, 0x41, 0x3E, 0x3F, 0x3E, 
   0x40, 0x3F, 0x40, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3E, 0x40, 0x3E, 0x41, 
   0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x3E, 0x3F, 
   0x3E, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x41, 0x40, 0x41, 0x41, 0x40, 0x41, 0x3E, 0x3F, 0x3E, 
   0x40, 0x3F, 0x40, 0x3E, 0x3D, 0x3E, 0x3C, 0x3B, 0x3C, 0x38, 0x39, 0x38, 0x37, 0x37, 0x37, 0x35, 
   0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x35, 
   0x36, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 
   0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x31, 0x32, 
   0x31, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x30, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 
   0x31, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x35, 
   0x33, 0x35, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x3A, 0x3B, 
   0x3A, 0x3D, 0x3E, 0x3D, 0x40, 0x42, 0x40, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x44, 0x45, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x44, 0x44, 
   0x44, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 
   0x43, 0x41, 0x43, 0x41, 0x41, 0x41, 0x3F, 0x41, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3F, 0x40, 
   0x3F, 0x45, 0x45, 0x45, 0x56, 0x55, 0x56, 0x61, 0x5F, 0x61, 0x67, 0x66, 0x67, 0x6F, 0x6F, 0x6F, 
   0x78, 0x79, 0x78, 0x5E, 0x60, 0x5E, 0x45, 0x46, 0x45, 0x4C, 0x4B, 0x4C, 0x40, 0x3F, 0x40, 0x3A, 
   0x38, 0x3A, 0x42, 0x40, 0x42, 0x45, 0x44, 0x45, 0x31, 0x31, 0x31, 0x3D, 0x3D, 0x3D, 0x4F, 0x4F, 
   0x4F, 0x52, 0x53, 0x52, 0x52, 0x53, 0x52, 0x51, 0x52, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 
   0x51, 0x52, 0x51, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x51, 0x52, 0x50, 0x51, 0x50, 0x50, 
   0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x51, 0x50, 0x4F, 0x50, 0x4F, 0x4E, 0x4E, 
   0x4E, 0x4E, 0x4D, 0x4E, 0x4C, 0x4C, 0x4C, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4C, 0x4C, 0x4C, 
   0x48, 0x49, 0x48, 0x5A, 0x5B, 0x5A, 0x61, 0x60, 0x61, 0x65, 0x63, 0x65, 0x4F, 0x50, 0x4F, 0x62, 
   0x64, 0x62, 0x55, 0x55, 0x55, 0x49, 0x49, 0x49, 0x35, 0x35, 0x35, 0x3B, 0x3C, 0x3B, 0x43, 0x46, 
   0x43, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x46, 0x48, 0x46, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 
   0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x44, 0x45, 0x44, 0x45, 
   0x45, 0x45, 0x43, 0x43, 0x43, 0x40, 0x40, 0x40, 0x3D, 0x3D, 0x3D, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 
   0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x37, 0x38, 
   0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x33, 0x33, 0x33, 0x32, 0x31, 0x32, 0x27, 0x26, 0x27, 0x0B, 
   0x0A, 0x0B, 0x00, 0x00, 0x00, 0x07, 0x06, 0x07, 0x23, 0x23, 0x23, 0x38, 0x38, 0x38, 0x37, 0x36, 
   0x37, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x36, 0x34, 0x36, 0x37, 0x36, 0x37, 0x33, 0x33, 0x33, 
   0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x36, 
   0x37, 0x36, 0x38, 0x38, 0x38, 0x39, 0x3A, 0x39, 0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 0x31, 0x31, 
   0x31, 0x0C, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x23, 0x21, 0x23, 0x3D, 0x3D, 0x3D, 
   0x45, 0x46, 0x45, 0x38, 0x39, 0x38, 0x23, 0x22, 0x23, 0x40, 0x42, 0x40, 0x49, 0x48, 0x49, 0x41, 
   0x41, 0x41, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x42, 0x43, 
   0x42, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x40, 
   0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 
   0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3B, 0x3C, 0x3B, 0x3D, 0x3D, 0x3D, 0x40, 0x3F, 0x40, 0x42, 0x41, 
   0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x41, 0x43, 0x41, 0x42, 0x42, 0x42, 0x40, 0x42, 0x40, 
   0x40, 0x41, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x41, 0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 
   0x40, 0x40, 0x40, 0x3F, 0x3D, 0x3F, 0x3C, 0x3B, 0x3C, 0x38, 0x39, 0x38, 0x37, 0x37, 0x37, 0x35, 
   0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x36, 0x37, 
   0x36, 0x38, 0x38, 0x38, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x33, 0x35, 0x33, 
   0x33, 0x34, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x31, 
   0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x31, 0x31, 
   0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x33, 0x34, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x2F, 
   0x31, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 
   0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x32, 0x32, 0x32, 0x33, 0x31, 0x33, 0x32, 0x31, 0x32, 
   0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x33, 
   0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x36, 0x34, 0x37, 0x37, 0x37, 0x3A, 0x39, 0x3A, 0x3C, 0x3B, 
   0x3C, 0x40, 0x3E, 0x40, 0x42, 0x41, 0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 
   0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x43, 
   0x43, 0x43, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x40, 0x42, 0x40, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x44, 0x43, 0x44, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 0x41, 0x42, 
   0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x3F, 0x41, 0x3F, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x3F, 0x3F, 
   0x3F, 0x4F, 0x4F, 0x4F, 0x70, 0x71, 0x70, 0x79, 0x7A, 0x79, 0x7F, 0x80, 0x7F, 0x7B, 0x7A, 0x7B, 
   0x5B, 0x5A, 0x5B, 0x45, 0x45, 0x45, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4C, 0x4D, 0x4C, 0x3E, 
   0x3F, 0x3E, 0x4E, 0x4D, 0x4E, 0x4E, 0x4F, 0x4E, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x52, 0x53, 
   0x52, 0x54, 0x53, 0x54, 0x53, 0x53, 0x53, 0x52, 0x52, 0x52, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 
   0x50, 0x52, 0x50, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x51, 0x51, 0x51, 0x51, 0x52, 0x51, 0x50, 
   0x51, 0x50, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x50, 0x52, 0x50, 0x51, 0x51, 0x51, 0x4F, 0x50, 
   0x4F, 0x4C, 0x4E, 0x4C, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4E, 0x4F, 0x4E, 0x52, 0x51, 0x52, 
   0x56, 0x56, 0x56, 0x72, 0x74, 0x72, 0x60, 0x60, 0x60, 0x7F, 0x7E, 0x7F, 0x68, 0x69, 0x68, 0x51, 
   0x53, 0x51, 0x44, 0x44, 0x44, 0x4B, 0x4A, 0x4B, 0x3A, 0x3B, 0x3A, 0x44, 0x44, 0x44, 0x43, 0x43, 
   0x43, 0x45, 0x47, 0x45, 0x46, 0x47, 0x46, 0x44, 0x46, 0x44, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 
   0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x44, 
   0x45, 0x44, 0x43, 0x43, 0x43, 0x3E, 0x3F, 0x3E, 0x3B, 0x3D, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 
   0x3A, 0x3B, 0x39, 0x3B, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x38, 0x38, 0x38, 
   0x37, 0x37, 0x37, 0x35, 0x34, 0x35, 0x32, 0x32, 0x32, 0x33, 0x31, 0x33, 0x35, 0x34, 0x35, 0x27, 
   0x26, 0x27, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0x26, 0x27, 0x26, 0x39, 0x39, 
   0x39, 0x3B, 0x39, 0x3B, 0x2F, 0x2F, 0x2F, 0x2B, 0x2A, 0x2B, 0x31, 0x32, 0x31, 0x35, 0x35, 0x35, 
   0x33, 0x34, 0x33, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x38, 
   0x37, 0x38, 0x38, 0x39, 0x38, 0x39, 0x3A, 0x39, 0x3C, 0x3B, 0x3C, 0x3E, 0x3C, 0x3E, 0x3B, 0x3C, 
   0x3B, 0x28, 0x28, 0x28, 0x07, 0x08, 0x07, 0x00, 0x00, 0x00, 0x05, 0x05, 0x05, 0x23, 0x23, 0x23, 
   0x42, 0x41, 0x42, 0x45, 0x45, 0x45, 0x39, 0x3A, 0x39, 0x3E, 0x3F, 0x3E, 0x41, 0x43, 0x41, 0x46, 
   0x46, 0x46, 0x44, 0x44, 0x44, 0x41, 0x42, 0x41, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 
   0x42, 0x44, 0x43, 0x44, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 
   0x44, 0x45, 0x44, 0x46, 0x45, 0x46, 0x43, 0x44, 0x43, 0x42, 0x43, 0x42, 0x42, 0x41, 0x42, 0x40, 
   0x40, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3F, 
   0x3E, 0x3B, 0x3D, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 
   0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3C, 
   0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x40, 0x3D, 0x40, 0x40, 0x40, 0x40, 0x42, 0x42, 
   0x42, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x41, 0x42, 0x41, 
   0x40, 0x42, 0x40, 0x41, 0x40, 0x41, 0x3D, 0x3F, 0x3D, 0x3F, 0x40, 0x3F, 0x41, 0x41, 0x41, 0x40, 
   0x41, 0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x3E, 0x3E, 
   0x3E, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 
   0x3F, 0x40, 0x3F, 0x3D, 0x3E, 0x3D, 0x3B, 0x3C, 0x3B, 0x3A, 0x39, 0x3A, 0x37, 0x37, 0x37, 0x36, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x36, 0x35, 0x36, 0x36, 0x37, 0x36, 0x38, 0x37, 
   0x38, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 
   0x33, 0x35, 0x33, 0x35, 0x34, 0x35, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x30, 
   0x31, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 
   0x31, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 
   0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x34, 0x34, 0x34, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x3A, 0x39, 0x3A, 0x3B, 0x3B, 
   0x3B, 0x3C, 0x3E, 0x3C, 0x41, 0x42, 0x41, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 
   0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 
   0x42, 0x43, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x41, 0x42, 0x41, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x41, 0x42, 
   0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3E, 0x3D, 0x3E, 0x3F, 0x3F, 0x3F, 0x54, 0x54, 0x54, 0x58, 0x57, 0x58, 0x53, 0x53, 
   0x53, 0x64, 0x65, 0x64, 0x88, 0x89, 0x88, 0x82, 0x83, 0x82, 0x75, 0x77, 0x75, 0x5D, 0x5E, 0x5D, 
   0x46, 0x46, 0x46, 0x4C, 0x4A, 0x4C, 0x47, 0x47, 0x47, 0x40, 0x40, 0x40, 0x4E, 0x4F, 0x4E, 0x4C, 
   0x4D, 0x4C, 0x46, 0x47, 0x46, 0x4D, 0x4D, 0x4D, 0x4F, 0x4F, 0x4F, 0x51, 0x51, 0x51, 0x52, 0x52, 
   0x52, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x52, 0x52, 0x52, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 
   0x51, 0x52, 0x51, 0x52, 0x53, 0x52, 0x52, 0x53, 0x52, 0x52, 0x52, 0x52, 0x51, 0x52, 0x51, 0x51, 
   0x52, 0x51, 0x51, 0x51, 0x51, 0x52, 0x52, 0x52, 0x50, 0x53, 0x50, 0x51, 0x51, 0x51, 0x4F, 0x4E, 
   0x4F, 0x4D, 0x4D, 0x4D, 0x5B, 0x5D, 0x5B, 0x69, 0x6B, 0x69, 0x69, 0x6A, 0x69, 0x7A, 0x7C, 0x7A, 
   0x9A, 0x9B, 0x9A, 0x95, 0x96, 0x95, 0x74, 0x76, 0x74, 0x8D, 0x8E, 0x8D, 0x61, 0x62, 0x61, 0x45, 
   0x45, 0x45, 0x3D, 0x3C, 0x3D, 0x42, 0x42, 0x42, 0x4B, 0x4B, 0x4B, 0x42, 0x42, 0x42, 0x45, 0x46, 
   0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x45, 0x46, 0x43, 0x43, 0x43, 0x40, 0x40, 0x40, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 0x3A, 0x39, 
   0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x38, 0x38, 0x38, 
   0x35, 0x36, 0x35, 0x33, 0x35, 0x33, 0x32, 0x33, 0x32, 0x32, 0x31, 0x32, 0x30, 0x31, 0x30, 0x31, 
   0x30, 0x31, 0x29, 0x2A, 0x29, 0x0E, 0x0D, 0x0E, 0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0x1D, 0x1D, 
   0x1D, 0x31, 0x30, 0x31, 0x38, 0x37, 0x38, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x34, 0x34, 0x34, 
   0x3B, 0x3A, 0x3B, 0x45, 0x44, 0x45, 0x3A, 0x3A, 0x3A, 0x38, 0x37, 0x38, 0x37, 0x36, 0x37, 0x37, 
   0x37, 0x37, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3D, 0x3C, 0x3D, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 
   0x3D, 0x3D, 0x3D, 0x3D, 0x37, 0x37, 0x37, 0x0C, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x15, 0x14, 0x15, 0x42, 0x42, 0x42, 0x4A, 0x4A, 0x4A, 0x43, 0x43, 0x43, 0x40, 0x3F, 0x40, 0x42, 
   0x41, 0x42, 0x4B, 0x4C, 0x4B, 0x50, 0x51, 0x50, 0x48, 0x48, 0x48, 0x46, 0x45, 0x46, 0x43, 0x42, 
   0x43, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x40, 0x3E, 
   0x40, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 
   0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3E, 0x3D, 0x3E, 0x40, 0x3F, 0x40, 0x42, 0x42, 0x42, 0x43, 0x44, 
   0x43, 0x46, 0x44, 0x46, 0x44, 0x46, 0x44, 0x46, 0x45, 0x46, 0x44, 0x45, 0x44, 0x43, 0x44, 0x43, 
   0x41, 0x43, 0x41, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x41, 
   0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x41, 0x42, 0x40, 0x40, 
   0x40, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x40, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3D, 0x3C, 0x3D, 0x3A, 0x39, 0x3A, 0x36, 0x37, 0x36, 0x35, 
   0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x36, 0x34, 0x36, 0x37, 0x36, 0x39, 0x38, 
   0x39, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 
   0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x31, 
   0x31, 0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 
   0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 
   0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x34, 
   0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x36, 0x34, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x3B, 0x3B, 
   0x3B, 0x40, 0x3E, 0x40, 0x40, 0x41, 0x40, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 
   0x44, 0x45, 0x44, 0x46, 0x45, 0x46, 0x44, 0x44, 0x44, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x41, 
   0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 0x41, 0x42, 
   0x41, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x40, 
   0x3E, 0x40, 0x42, 0x41, 0x42, 0x58, 0x57, 0x58, 0x73, 0x73, 0x73, 0x75, 0x75, 0x75, 0x6E, 0x6E, 
   0x6E, 0x68, 0x6B, 0x68, 0x70, 0x6E, 0x70, 0x68, 0x67, 0x68, 0x55, 0x56, 0x55, 0x44, 0x45, 0x44, 
   0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x3D, 0x3D, 0x3D, 0x43, 0x42, 0x43, 0x3F, 0x40, 0x3F, 0x42, 
   0x42, 0x42, 0x4B, 0x4C, 0x4B, 0x4E, 0x4E, 0x4E, 0x4F, 0x4F, 0x4F, 0x4F, 0x50, 0x4F, 0x52, 0x51, 
   0x52, 0x52, 0x52, 0x52, 0x52, 0x53, 0x52, 0x51, 0x52, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 
   0x51, 0x51, 0x51, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x51, 0x52, 0x51, 0x51, 
   0x52, 0x51, 0x51, 0x51, 0x51, 0x52, 0x52, 0x52, 0x54, 0x53, 0x54, 0x53, 0x54, 0x53, 0x51, 0x51, 
   0x51, 0x5D, 0x5C, 0x5D, 0x81, 0x81, 0x81, 0x92, 0x94, 0x92, 0x92, 0x92, 0x92, 0x8A, 0x8B, 0x8A, 
   0x9B, 0x99, 0x9B, 0x81, 0x7F, 0x81, 0x6F, 0x70, 0x6F, 0x52, 0x54, 0x52, 0x46, 0x46, 0x46, 0x44, 
   0x45, 0x44, 0x43, 0x43, 0x43, 0x26, 0x27, 0x26, 0x3A, 0x39, 0x3A, 0x47, 0x48, 0x47, 0x45, 0x46, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x47, 0x45, 0x46, 0x47, 0x46, 0x48, 0x46, 0x48, 0x47, 0x46, 0x47, 
   0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x45, 0x46, 0x45, 0x46, 0x45, 0x46, 0x44, 
   0x44, 0x44, 0x43, 0x43, 0x43, 0x3F, 0x40, 0x3F, 0x3E, 0x3D, 0x3E, 0x3D, 0x3B, 0x3D, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x38, 0x3A, 0x38, 0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 
   0x36, 0x35, 0x36, 0x34, 0x34, 0x34, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x31, 
   0x30, 0x31, 0x34, 0x33, 0x34, 0x2A, 0x29, 0x2A, 0x0A, 0x0B, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 
   0x01, 0x09, 0x0A, 0x09, 0x24, 0x25, 0x24, 0x37, 0x38, 0x37, 0x39, 0x38, 0x39, 0x2D, 0x2D, 0x2D, 
   0x3E, 0x3F, 0x3E, 0x50, 0x50, 0x50, 0x34, 0x35, 0x34, 0x37, 0x37, 0x37, 0x3B, 0x3A, 0x3B, 0x38, 
   0x37, 0x38, 0x39, 0x39, 0x39, 0x3C, 0x3A, 0x3C, 0x3C, 0x3D, 0x3C, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 
   0x3E, 0x40, 0x40, 0x40, 0x45, 0x44, 0x45, 0x2F, 0x2E, 0x2F, 0x14, 0x14, 0x14, 0x02, 0x01, 0x02, 
   0x00, 0x00, 0x00, 0x1B, 0x1D, 0x1B, 0x43, 0x43, 0x43, 0x4C, 0x4F, 0x4C, 0x46, 0x44, 0x46, 0x3C, 
   0x3B, 0x3C, 0x53, 0x54, 0x53, 0x65, 0x67, 0x65, 0x40, 0x40, 0x40, 0x45, 0x47, 0x45, 0x44, 0x45, 
   0x44, 0x44, 0x43, 0x44, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 
   0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x3E, 
   0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3F, 
   0x3E, 0x3C, 0x3E, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3E, 0x3C, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 
   0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3C, 
   0x3D, 0x3C, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x41, 0x41, 0x41, 0x42, 0x43, 0x42, 0x45, 0x45, 
   0x45, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x43, 0x44, 0x43, 0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 0x43, 0x41, 0x43, 0x42, 0x42, 0x42, 0x42, 
   0x43, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x41, 0x42, 0x41, 0x40, 0x41, 
   0x40, 0x40, 0x41, 0x40, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x40, 0x42, 0x40, 
   0x3F, 0x3F, 0x3F, 0x3D, 0x3E, 0x3D, 0x3B, 0x3B, 0x3B, 0x3A, 0x39, 0x3A, 0x38, 0x38, 0x38, 0x35, 
   0x37, 0x35, 0x37, 0x35, 0x37, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x39, 0x38, 
   0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x33, 
   0x34, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x31, 
   0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x30, 0x32, 0x30, 0x30, 0x31, 
   0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 
   0x34, 0x33, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x3A, 0x38, 0x3A, 0x39, 0x3B, 
   0x39, 0x3C, 0x3E, 0x3C, 0x41, 0x41, 0x41, 0x42, 0x43, 0x42, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 0x44, 0x42, 0x41, 0x42, 0x40, 
   0x42, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 
   0x41, 0x40, 0x41, 0x40, 0x41, 0x40, 0x41, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x3F, 0x3F, 0x3F, 
   0x3D, 0x3E, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 0x36, 
   0x36, 0x36, 0x46, 0x44, 0x46, 0x7E, 0x7D, 0x7E, 0x81, 0x80, 0x81, 0x7D, 0x7C, 0x7D, 0x74, 0x77, 
   0x74, 0x58, 0x58, 0x58, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 
   0x37, 0x36, 0x37, 0x42, 0x42, 0x42, 0x4A, 0x4B, 0x4A, 0x4B, 0x49, 0x4B, 0x3F, 0x3E, 0x3F, 0x45, 
   0x45, 0x45, 0x4B, 0x4A, 0x4B, 0x4D, 0x4D, 0x4D, 0x4F, 0x4F, 0x4F, 0x50, 0x51, 0x50, 0x51, 0x51, 
   0x51, 0x51, 0x53, 0x51, 0x52, 0x52, 0x52, 0x51, 0x52, 0x51, 0x52, 0x52, 0x52, 0x51, 0x51, 0x51, 
   0x50, 0x51, 0x50, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x52, 0x53, 0x52, 0x51, 
   0x53, 0x51, 0x51, 0x51, 0x51, 0x52, 0x51, 0x52, 0x65, 0x64, 0x65, 0x63, 0x64, 0x63, 0x64, 0x65, 
   0x64, 0x74, 0x74, 0x74, 0x93, 0x94, 0x93, 0xA1, 0xA3, 0xA1, 0x9F, 0xA1, 0x9F, 0x7A, 0x7B, 0x7A, 
   0x44, 0x43, 0x44, 0x47, 0x47, 0x47, 0x4D, 0x4C, 0x4D, 0x41, 0x40, 0x41, 0x4C, 0x4C, 0x4C, 0x4D, 
   0x4F, 0x4D, 0x49, 0x4A, 0x49, 0x41, 0x41, 0x41, 0x42, 0x43, 0x42, 0x44, 0x46, 0x44, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 
   0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x45, 0x47, 0x45, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x43, 
   0x44, 0x43, 0x42, 0x43, 0x42, 0x3F, 0x40, 0x3F, 0x3D, 0x3E, 0x3D, 0x3B, 0x3D, 0x3B, 0x3A, 0x3B, 
   0x3A, 0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 0x37, 0x38, 0x37, 0x38, 0x37, 0x38, 0x37, 0x36, 0x37, 
   0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2F, 
   0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x31, 0x2F, 0x30, 0x2F, 0x30, 0x14, 0x14, 0x14, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x03, 0x02, 0x03, 0x23, 0x22, 0x23, 0x36, 0x37, 0x36, 0x34, 0x32, 0x34, 
   0x42, 0x42, 0x42, 0x58, 0x59, 0x58, 0x3A, 0x3B, 0x3A, 0x2D, 0x2E, 0x2D, 0x33, 0x33, 0x33, 0x39, 
   0x38, 0x39, 0x38, 0x39, 0x38, 0x3A, 0x3C, 0x3A, 0x3D, 0x3E, 0x3D, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x43, 0x43, 0x43, 0x2B, 0x2B, 0x2B, 
   0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x15, 0x16, 0x15, 0x45, 0x47, 0x45, 0x47, 0x47, 0x47, 0x44, 
   0x44, 0x44, 0x5A, 0x5B, 0x5A, 0x70, 0x71, 0x70, 0x34, 0x36, 0x34, 0x3C, 0x3E, 0x3C, 0x48, 0x49, 
   0x48, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 
   0x42, 0x43, 0x42, 0x40, 0x42, 0x40, 0x41, 0x40, 0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x41, 0x3F, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3E, 
   0x40, 0x3E, 0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 
   0x3D, 0x3E, 0x3D, 0x3D, 0x3E, 0x3D, 0x3D, 0x3C, 0x3D, 0x3E, 0x3E, 0x3E, 0x40, 0x3E, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 0x43, 0x43, 0x43, 0x44, 0x45, 0x44, 0x46, 0x45, 
   0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x44, 0x46, 0x44, 
   0x46, 0x45, 0x46, 0x44, 0x45, 0x44, 0x43, 0x44, 0x43, 0x44, 0x43, 0x44, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x44, 0x42, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x41, 0x43, 0x41, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x3F, 0x40, 0x3F, 
   0x40, 0x3E, 0x40, 0x3F, 0x3D, 0x3F, 0x3C, 0x3B, 0x3C, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 
   0x36, 0x38, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x37, 0x36, 0x37, 0x38, 0x37, 
   0x38, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x32, 0x33, 0x33, 
   0x32, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x37, 0x36, 0x37, 0x35, 0x35, 0x35, 
   0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x31, 0x30, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x33, 
   0x34, 0x33, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x3C, 0x3B, 
   0x3C, 0x3D, 0x3E, 0x3D, 0x3F, 0x3F, 0x3F, 0x43, 0x42, 0x43, 0x44, 0x44, 0x44, 0x46, 0x45, 0x46, 
   0x44, 0x45, 0x44, 0x46, 0x44, 0x46, 0x43, 0x44, 0x43, 0x42, 0x43, 0x42, 0x42, 0x41, 0x42, 0x41, 
   0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 
   0x40, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x3E, 0x3F, 0x3E, 
   0x3F, 0x3D, 0x3F, 0x3C, 0x3C, 0x3C, 0x3A, 0x3A, 0x3A, 0x42, 0x42, 0x42, 0x52, 0x53, 0x52, 0x41, 
   0x42, 0x41, 0x40, 0x40, 0x40, 0x71, 0x6F, 0x71, 0x65, 0x64, 0x65, 0x5F, 0x60, 0x5F, 0x5C, 0x5B, 
   0x5C, 0x48, 0x47, 0x48, 0x3C, 0x3C, 0x3C, 0x41, 0x41, 0x41, 0x49, 0x47, 0x49, 0x3B, 0x3B, 0x3B, 
   0x22, 0x23, 0x22, 0x33, 0x33, 0x33, 0x2E, 0x2D, 0x2E, 0x40, 0x3F, 0x40, 0x4A, 0x49, 0x4A, 0x49, 
   0x48, 0x49, 0x4A, 0x4A, 0x4A, 0x4D, 0x4C, 0x4D, 0x4E, 0x4E, 0x4E, 0x50, 0x50, 0x50, 0x51, 0x51, 
   0x51, 0x51, 0x52, 0x51, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x51, 0x53, 0x51, 0x51, 0x52, 0x51, 
   0x51, 0x51, 0x51, 0x4F, 0x50, 0x4F, 0x50, 0x51, 0x50, 0x51, 0x51, 0x51, 0x52, 0x52, 0x52, 0x52, 
   0x52, 0x52, 0x56, 0x57, 0x56, 0x6C, 0x6B, 0x6C, 0x8F, 0x90, 0x8F, 0x7F, 0x81, 0x7F, 0x91, 0x92, 
   0x91, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x77, 0x78, 0x77, 0x64, 0x64, 0x64, 0x4F, 0x50, 0x4F, 
   0x28, 0x28, 0x28, 0x23, 0x23, 0x23, 0x4D, 0x4C, 0x4D, 0x41, 0x43, 0x41, 0x2B, 0x2B, 0x2B, 0x3B, 
   0x3B, 0x3B, 0x49, 0x49, 0x49, 0x47, 0x47, 0x47, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x45, 0x47, 0x45, 0x45, 0x45, 0x45, 0x43, 
   0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x40, 0x42, 0x3F, 0x3F, 0x3F, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 
   0x3B, 0x39, 0x3A, 0x39, 0x39, 0x38, 0x39, 0x36, 0x37, 0x36, 0x37, 0x35, 0x37, 0x35, 0x35, 0x35, 
   0x33, 0x35, 0x33, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x32, 0x31, 0x32, 0x30, 0x30, 0x30, 0x2F, 
   0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x33, 0x32, 0x33, 0x29, 0x28, 0x29, 0x12, 0x12, 
   0x12, 0x05, 0x06, 0x05, 0x00, 0x00, 0x00, 0x02, 0x01, 0x02, 0x0E, 0x0E, 0x0E, 0x2E, 0x2E, 0x2E, 
   0x41, 0x42, 0x41, 0x52, 0x51, 0x52, 0x4F, 0x4D, 0x4F, 0x2B, 0x2C, 0x2B, 0x29, 0x2A, 0x29, 0x3A, 
   0x3A, 0x3A, 0x3F, 0x40, 0x3F, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 
   0x40, 0x42, 0x41, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x46, 0x44, 0x45, 0x42, 0x45, 
   0x25, 0x24, 0x25, 0x04, 0x03, 0x04, 0x01, 0x01, 0x01, 0x33, 0x32, 0x33, 0x47, 0x47, 0x47, 0x4B, 
   0x4D, 0x4B, 0x5E, 0x5F, 0x5E, 0x5F, 0x5F, 0x5F, 0x3A, 0x3A, 0x3A, 0x38, 0x39, 0x38, 0x47, 0x49, 
   0x47, 0x52, 0x53, 0x52, 0x4B, 0x4C, 0x4B, 0x47, 0x47, 0x47, 0x43, 0x43, 0x43, 0x42, 0x41, 0x42, 
   0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3E, 
   0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 
   0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x40, 
   0x41, 0x40, 0x42, 0x41, 0x42, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x46, 0x45, 0x46, 0x46, 0x46, 
   0x46, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 
   0x46, 0x47, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x43, 0x44, 0x43, 0x42, 0x43, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x3E, 0x3E, 0x3E, 
   0x40, 0x3F, 0x40, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 
   0x36, 0x37, 0x36, 0x37, 0x35, 0x37, 0x35, 0x38, 0x37, 0x38, 0x37, 0x38, 0x37, 0x38, 0x37, 0x38, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 
   0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 
   0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x31, 0x30, 0x2F, 0x30, 0x2F, 
   0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x35, 
   0x34, 0x35, 0x35, 0x35, 0x35, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x3A, 0x38, 0x3A, 0x3B, 0x3B, 
   0x3B, 0x3C, 0x3E, 0x3C, 0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 0x43, 0x45, 0x43, 0x44, 0x44, 0x44, 
   0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x42, 0x44, 0x42, 0x43, 0x42, 0x43, 0x41, 0x41, 0x41, 0x40, 
   0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x42, 0x41, 0x42, 0x40, 0x41, 
   0x40, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3E, 0x3F, 0x3F, 0x40, 0x3F, 0x3A, 0x3A, 0x3A, 0x3F, 0x3E, 0x3F, 0x89, 0x88, 0x89, 0x7E, 
   0x7E, 0x7E, 0x5D, 0x5D, 0x5D, 0x43, 0x42, 0x43, 0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 0x3C, 0x3B, 
   0x3C, 0x37, 0x38, 0x37, 0x40, 0x3E, 0x40, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x35, 0x35, 0x35, 
   0x31, 0x31, 0x31, 0x43, 0x42, 0x43, 0x3D, 0x3F, 0x3D, 0x44, 0x43, 0x44, 0x45, 0x46, 0x45, 0x48, 
   0x48, 0x48, 0x4A, 0x4A, 0x4A, 0x4B, 0x4C, 0x4B, 0x4F, 0x4E, 0x4F, 0x50, 0x51, 0x50, 0x51, 0x51, 
   0x51, 0x51, 0x52, 0x51, 0x52, 0x52, 0x52, 0x52, 0x53, 0x52, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 
   0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x51, 0x51, 0x51, 0x51, 0x52, 0x51, 0x54, 0x54, 0x54, 0x58, 
   0x59, 0x58, 0x6B, 0x6A, 0x6B, 0x8F, 0x8C, 0x8F, 0xA9, 0xA6, 0xA9, 0x9D, 0x9D, 0x9D, 0xA7, 0xA7, 
   0xA7, 0x81, 0x81, 0x81, 0x5B, 0x5A, 0x5B, 0x4D, 0x4D, 0x4D, 0x4C, 0x4B, 0x4C, 0x4E, 0x50, 0x4E, 
   0x40, 0x40, 0x40, 0x25, 0x24, 0x25, 0x52, 0x50, 0x52, 0x4B, 0x4B, 0x4B, 0x44, 0x43, 0x44, 0x45, 
   0x45, 0x45, 0x47, 0x48, 0x47, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 
   0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x46, 0x45, 0x46, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x44, 0x43, 0x41, 0x43, 0x41, 0x40, 0x41, 0x3F, 0x3D, 0x3F, 0x3C, 0x3B, 
   0x3C, 0x3A, 0x39, 0x3A, 0x39, 0x38, 0x39, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x34, 0x34, 0x34, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x31, 0x30, 0x31, 0x2F, 
   0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x32, 0x32, 
   0x32, 0x28, 0x28, 0x28, 0x0A, 0x0B, 0x0A, 0x02, 0x01, 0x02, 0x00, 0x00, 0x00, 0x0F, 0x10, 0x0F, 
   0x2E, 0x2D, 0x2E, 0x31, 0x32, 0x31, 0x34, 0x34, 0x34, 0x36, 0x35, 0x36, 0x37, 0x36, 0x37, 0x37, 
   0x37, 0x37, 0x38, 0x37, 0x38, 0x3B, 0x3C, 0x3B, 0x3F, 0x3F, 0x3F, 0x42, 0x42, 0x42, 0x43, 0x43, 
   0x43, 0x44, 0x42, 0x44, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x49, 0x49, 0x49, 0x2A, 0x2A, 0x2A, 0x00, 0x00, 0x00, 0x19, 0x19, 0x19, 0x3E, 0x3E, 0x3E, 0x44, 
   0x44, 0x44, 0x47, 0x47, 0x47, 0x46, 0x45, 0x46, 0x47, 0x48, 0x47, 0x47, 0x46, 0x47, 0x47, 0x45, 
   0x47, 0x51, 0x51, 0x51, 0x6D, 0x6D, 0x6D, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x41, 0x42, 
   0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x40, 
   0x3F, 0x40, 0x3E, 0x3F, 0x3E, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x3E, 
   0x3F, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x40, 0x3F, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 0x41, 
   0x44, 0x41, 0x44, 0x43, 0x44, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 
   0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x47, 0x48, 0x47, 
   0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x42, 0x43, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3E, 0x3F, 0x3E, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x39, 0x38, 0x39, 0x37, 
   0x38, 0x37, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 
   0x35, 0x35, 0x36, 0x35, 0x37, 0x36, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 
   0x34, 0x33, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 
   0x35, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x36, 0x35, 0x36, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x2F, 
   0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 
   0x35, 0x33, 0x36, 0x37, 0x36, 0x38, 0x38, 0x38, 0x3B, 0x3A, 0x3B, 0x3D, 0x3B, 0x3D, 0x3D, 0x3D, 
   0x3D, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 
   0x42, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 
   0x34, 0x34, 0x34, 0x61, 0x63, 0x61, 0x7E, 0x7F, 0x7E, 0x4D, 0x4F, 0x4D, 0x49, 0x4A, 0x49, 0x45, 
   0x47, 0x45, 0x41, 0x42, 0x41, 0x3D, 0x3E, 0x3D, 0x3F, 0x3F, 0x3F, 0x3C, 0x3D, 0x3C, 0x2F, 0x31, 
   0x2F, 0x10, 0x11, 0x10, 0x3E, 0x3D, 0x3E, 0x3A, 0x3B, 0x3A, 0x3E, 0x40, 0x3E, 0x3D, 0x3E, 0x3D, 
   0x34, 0x32, 0x34, 0x42, 0x42, 0x42, 0x43, 0x44, 0x43, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x45, 
   0x45, 0x45, 0x49, 0x49, 0x49, 0x4C, 0x4C, 0x4C, 0x4C, 0x4E, 0x4C, 0x50, 0x4F, 0x50, 0x4F, 0x50, 
   0x4F, 0x4F, 0x50, 0x4F, 0x50, 0x50, 0x50, 0x4E, 0x4F, 0x4E, 0x4D, 0x4D, 0x4D, 0x50, 0x4E, 0x50, 
   0x65, 0x63, 0x65, 0x7B, 0x7A, 0x7B, 0x58, 0x59, 0x58, 0x5F, 0x5D, 0x5F, 0x5C, 0x5D, 0x5C, 0x7F, 
   0x81, 0x7F, 0xA3, 0xA3, 0xA3, 0x8D, 0x8D, 0x8D, 0x6C, 0x6C, 0x6C, 0x60, 0x60, 0x60, 0x60, 0x5F, 
   0x60, 0x55, 0x54, 0x55, 0x48, 0x46, 0x48, 0x4F, 0x50, 0x4F, 0x51, 0x53, 0x51, 0x4A, 0x4A, 0x4A, 
   0x43, 0x43, 0x43, 0x46, 0x45, 0x46, 0x49, 0x47, 0x49, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 
   0x48, 0x48, 0x45, 0x47, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x46, 0x47, 0x46, 0x49, 0x48, 0x49, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 
   0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x46, 0x47, 0x45, 0x44, 0x45, 0x44, 0x43, 0x44, 0x43, 0x41, 0x43, 0x3F, 0x3F, 0x3F, 0x3B, 0x3C, 
   0x3B, 0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 0x34, 0x35, 0x34, 0x33, 0x33, 0x33, 0x32, 0x31, 0x32, 
   0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x30, 0x32, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 
   0x2F, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2B, 0x2A, 0x2B, 0x1A, 0x18, 0x1A, 0x00, 0x00, 0x00, 
   0x03, 0x03, 0x03, 0x26, 0x26, 0x26, 0x36, 0x36, 0x36, 0x38, 0x37, 0x38, 0x3B, 0x3B, 0x3B, 0x3A, 
   0x3C, 0x3A, 0x34, 0x36, 0x34, 0x3C, 0x3A, 0x3C, 0x5B, 0x5B, 0x5B, 0x50, 0x52, 0x50, 0x3D, 0x3C, 
   0x3D, 0x44, 0x44, 0x44, 0x42, 0x41, 0x42, 0x42, 0x43, 0x42, 0x45, 0x44, 0x45, 0x45, 0x46, 0x45, 
   0x46, 0x48, 0x46, 0x3F, 0x40, 0x3F, 0x1B, 0x1B, 0x1B, 0x01, 0x00, 0x01, 0x03, 0x03, 0x03, 0x2D, 
   0x2E, 0x2D, 0x4D, 0x4D, 0x4D, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x49, 0x49, 0x49, 0x45, 0x45, 
   0x45, 0x5B, 0x5A, 0x5B, 0x6C, 0x6E, 0x6C, 0x2B, 0x2B, 0x2B, 0x33, 0x32, 0x33, 0x42, 0x44, 0x42, 
   0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 
   0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 
   0x3F, 0x3F, 0x3D, 0x3F, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x42, 0x43, 0x42, 0x44, 
   0x43, 0x44, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 0x48, 
   0x48, 0x48, 0x49, 0x48, 0x48, 0x4A, 0x48, 0x49, 0x4A, 0x49, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x42, 
   0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3F, 0x3E, 
   0x3C, 0x3E, 0x3C, 0x3D, 0x3C, 0x3D, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x38, 
   0x38, 0x38, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x36, 
   0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x37, 0x36, 
   0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x37, 0x38, 0x37, 0x39, 0x38, 0x39, 0x36, 0x37, 0x36, 
   0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x33, 0x34, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x2F, 0x31, 
   0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x35, 
   0x34, 0x35, 0x36, 0x36, 0x36, 0x39, 0x38, 0x39, 0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 
   0x3F, 0x40, 0x3F, 0x40, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 
   0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x3F, 
   0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x42, 0x40, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x40, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x4C, 0x4D, 0x4C, 0x4A, 0x4A, 0x4A, 
   0x24, 0x23, 0x24, 0x54, 0x56, 0x54, 0x89, 0x89, 0x89, 0x63, 0x64, 0x63, 0x35, 0x36, 0x35, 0x3E, 
   0x3C, 0x3E, 0x3D, 0x3C, 0x3D, 0x30, 0x2E, 0x30, 0x34, 0x34, 0x34, 0x23, 0x23, 0x23, 0x1B, 0x1A, 
   0x1B, 0x0C, 0x0C, 0x0C, 0x08, 0x09, 0x08, 0x09, 0x0A, 0x09, 0x2C, 0x2D, 0x2C, 0x3D, 0x3D, 0x3D, 
   0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x44, 0x42, 0x44, 
   0x45, 0x44, 0x46, 0x47, 0x46, 0x49, 0x4B, 0x49, 0x4D, 0x4E, 0x4D, 0x50, 0x51, 0x50, 0x57, 0x57, 
   0x57, 0x5B, 0x5B, 0x5B, 0x59, 0x59, 0x59, 0x60, 0x61, 0x60, 0x72, 0x71, 0x72, 0x70, 0x6E, 0x70, 
   0x81, 0x82, 0x81, 0x7F, 0x80, 0x7F, 0x4C, 0x4C, 0x4C, 0x69, 0x69, 0x69, 0x78, 0x78, 0x78, 0x81, 
   0x80, 0x81, 0x9B, 0x9C, 0x9B, 0x6B, 0x6C, 0x6B, 0x52, 0x51, 0x52, 0x52, 0x52, 0x52, 0x34, 0x34, 
   0x34, 0x46, 0x46, 0x46, 0x3C, 0x3D, 0x3C, 0x3F, 0x3F, 0x3F, 0x49, 0x4A, 0x49, 0x4E, 0x4E, 0x4E, 
   0x4C, 0x4D, 0x4C, 0x4B, 0x4C, 0x4B, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x47, 0x48, 0x47, 0x47, 
   0x47, 0x47, 0x45, 0x46, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x47, 0x45, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 
   0x49, 0x4B, 0x49, 0x4A, 0x49, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x47, 0x48, 0x46, 0x46, 0x46, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x40, 0x40, 0x40, 0x3C, 0x3B, 
   0x3C, 0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 0x33, 0x34, 0x33, 0x32, 0x31, 0x32, 0x31, 0x30, 0x31, 
   0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x2F, 0x31, 0x2F, 0x30, 0x30, 0x30, 0x2F, 
   0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x09, 0x0A, 0x09, 
   0x00, 0x00, 0x00, 0x10, 0x11, 0x10, 0x30, 0x31, 0x30, 0x23, 0x24, 0x23, 0x32, 0x33, 0x32, 0x3A, 
   0x3A, 0x3A, 0x43, 0x43, 0x43, 0x55, 0x54, 0x55, 0x86, 0x88, 0x86, 0x3B, 0x3D, 0x3B, 0x12, 0x11, 
   0x12, 0x4E, 0x4D, 0x4E, 0x52, 0x52, 0x52, 0x53, 0x52, 0x53, 0x48, 0x4A, 0x48, 0x47, 0x48, 0x47, 
   0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x3A, 0x3B, 0x3A, 0x12, 0x10, 0x12, 0x00, 0x00, 0x00, 0x10, 
   0x11, 0x10, 0x31, 0x31, 0x31, 0x42, 0x42, 0x42, 0x47, 0x47, 0x47, 0x45, 0x45, 0x45, 0x44, 0x45, 
   0x44, 0x52, 0x52, 0x52, 0x5B, 0x5A, 0x5B, 0x27, 0x28, 0x27, 0x2B, 0x2C, 0x2B, 0x45, 0x47, 0x45, 
   0x40, 0x40, 0x40, 0x3E, 0x3E, 0x3E, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 
   0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 
   0x3D, 0x3E, 0x3D, 0x3E, 0x3F, 0x3E, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x41, 0x40, 0x41, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x43, 0x42, 0x43, 0x43, 0x44, 0x43, 0x44, 
   0x44, 0x44, 0x44, 0x45, 0x44, 0x46, 0x45, 0x46, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x49, 0x49, 
   0x49, 0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x49, 0x4B, 0x49, 0x49, 0x4A, 0x49, 0x48, 0x49, 0x48, 
   0x48, 0x47, 0x48, 0x47, 0x46, 0x47, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x44, 0x43, 0x44, 0x42, 0x42, 0x42, 0x41, 0x41, 
   0x41, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3D, 0x3E, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x3C, 0x3B, 0x3C, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x37, 
   0x39, 0x37, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x34, 0x35, 0x35, 0x34, 
   0x35, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x33, 0x34, 0x33, 0x34, 0x35, 0x34, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 
   0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 
   0x36, 0x37, 0x36, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x34, 
   0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x31, 0x33, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x30, 0x2E, 0x30, 0x31, 0x30, 0x33, 0x33, 0x33, 0x34, 
   0x35, 0x34, 0x38, 0x37, 0x38, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3F, 0x3D, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x41, 0x40, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 
   0x42, 0x43, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x43, 
   0x41, 0x3F, 0x40, 0x3F, 0x3D, 0x3D, 0x3D, 0x40, 0x40, 0x40, 0x61, 0x62, 0x61, 0x6C, 0x6D, 0x6C, 
   0x6B, 0x69, 0x6B, 0x49, 0x4A, 0x49, 0x41, 0x40, 0x41, 0x3E, 0x3E, 0x3E, 0x3A, 0x3B, 0x3A, 0x32, 
   0x34, 0x32, 0x31, 0x31, 0x31, 0x0C, 0x0B, 0x0C, 0x00, 0x00, 0x00, 0x20, 0x20, 0x20, 0x28, 0x26, 
   0x28, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x39, 0x3A, 0x39, 
   0x40, 0x41, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x3E, 0x3F, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 
   0x40, 0x3F, 0x42, 0x43, 0x42, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x57, 0x57, 0x57, 0x85, 0x85, 
   0x85, 0x8F, 0x8D, 0x8F, 0x90, 0x90, 0x90, 0x99, 0x98, 0x99, 0xAE, 0xAC, 0xAE, 0xAD, 0xAE, 0xAD, 
   0x9E, 0xA1, 0x9E, 0x8C, 0x8E, 0x8C, 0x53, 0x52, 0x53, 0x7B, 0x7B, 0x7B, 0xB2, 0xB2, 0xB2, 0x7F, 
   0x80, 0x7F, 0x58, 0x58, 0x58, 0x57, 0x58, 0x57, 0x57, 0x59, 0x57, 0x4F, 0x4F, 0x4F, 0x17, 0x17, 
   0x17, 0x52, 0x52, 0x52, 0x50, 0x50, 0x50, 0x45, 0x46, 0x45, 0x49, 0x49, 0x49, 0x4D, 0x4D, 0x4D, 
   0x4D, 0x4D, 0x4D, 0x4B, 0x4B, 0x4B, 0x49, 0x4A, 0x49, 0x47, 0x49, 0x47, 0x47, 0x48, 0x47, 0x47, 
   0x46, 0x47, 0x45, 0x46, 0x45, 0x44, 0x46, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x4B, 0x4A, 
   0x4A, 0x4B, 0x4A, 0x4A, 0x49, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 
   0x49, 0x48, 0x48, 0x47, 0x48, 0x46, 0x45, 0x46, 0x43, 0x44, 0x43, 0x40, 0x41, 0x40, 0x3E, 0x3D, 
   0x3E, 0x3A, 0x39, 0x3A, 0x36, 0x36, 0x36, 0x34, 0x33, 0x34, 0x30, 0x30, 0x30, 0x2E, 0x2F, 0x2E, 
   0x2F, 0x2E, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x32, 0x31, 0x32, 0x28, 0x27, 0x28, 
   0x07, 0x08, 0x07, 0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0x02, 0x01, 0x02, 0x2A, 0x29, 0x2A, 0x3F, 
   0x3D, 0x3F, 0x43, 0x41, 0x43, 0x47, 0x48, 0x47, 0x4C, 0x4D, 0x4C, 0x39, 0x39, 0x39, 0x23, 0x23, 
   0x23, 0x86, 0x86, 0x86, 0x96, 0x97, 0x96, 0x57, 0x57, 0x57, 0x45, 0x46, 0x45, 0x49, 0x4A, 0x49, 
   0x42, 0x42, 0x42, 0x45, 0x44, 0x45, 0x47, 0x48, 0x47, 0x41, 0x41, 0x41, 0x23, 0x22, 0x23, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x24, 0x25, 0x4F, 0x4F, 0x4F, 0x49, 0x4B, 0x49, 0x45, 0x47, 
   0x45, 0x45, 0x44, 0x45, 0x46, 0x46, 0x46, 0x3D, 0x3F, 0x3D, 0x30, 0x30, 0x30, 0x3A, 0x3B, 0x3A, 
   0x42, 0x43, 0x42, 0x3E, 0x3E, 0x3E, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3E, 
   0x3D, 0x3E, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 
   0x3D, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x43, 0x44, 0x44, 
   0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x47, 0x45, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x48, 0x49, 
   0x48, 0x49, 0x4A, 0x49, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 
   0x44, 0x44, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3D, 0x3D, 0x3D, 
   0x3C, 0x3C, 0x3C, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 
   0x39, 0x39, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 
   0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x36, 
   0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x39, 0x37, 0x39, 0x37, 0x37, 0x37, 
   0x36, 0x36, 0x36, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x35, 0x34, 0x34, 0x34, 0x34, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x34, 
   0x34, 0x34, 0x36, 0x36, 0x36, 0x39, 0x39, 0x39, 0x3C, 0x3B, 0x3C, 0x3E, 0x3D, 0x3E, 0x3F, 0x3F, 
   0x3F, 0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x42, 0x44, 0x42, 0x42, 0x42, 
   0x43, 0x43, 0x43, 0x41, 0x41, 0x41, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x42, 0x41, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 
   0x42, 0x41, 0x42, 0x41, 0x4A, 0x4A, 0x4A, 0x53, 0x53, 0x53, 0x62, 0x61, 0x62, 0x71, 0x71, 0x71, 
   0x78, 0x79, 0x78, 0x47, 0x47, 0x47, 0x35, 0x36, 0x35, 0x39, 0x38, 0x39, 0x3E, 0x3D, 0x3E, 0x1F, 
   0x1F, 0x1F, 0x0F, 0x0D, 0x0F, 0x25, 0x25, 0x25, 0x1D, 0x1D, 0x1D, 0x2D, 0x2D, 0x2D, 0x44, 0x44, 
   0x44, 0x4F, 0x4E, 0x4F, 0x4D, 0x4E, 0x4D, 0x54, 0x52, 0x54, 0x55, 0x52, 0x55, 0x44, 0x44, 0x44, 
   0x43, 0x45, 0x43, 0x4E, 0x50, 0x4E, 0x62, 0x63, 0x62, 0x6E, 0x6E, 0x6E, 0x6F, 0x6E, 0x6F, 0x70, 
   0x6E, 0x70, 0x75, 0x76, 0x75, 0x6A, 0x6A, 0x6A, 0x6E, 0x70, 0x6E, 0x7D, 0x7D, 0x7D, 0xA3, 0xA1, 
   0xA3, 0x8C, 0x8B, 0x8C, 0x84, 0x84, 0x84, 0xA5, 0xA6, 0xA5, 0x9F, 0x9F, 0x9F, 0x92, 0x92, 0x92, 
   0x7F, 0x7D, 0x7F, 0x66, 0x66, 0x66, 0x52, 0x50, 0x52, 0x6D, 0x6E, 0x6D, 0x74, 0x74, 0x74, 0x61, 
   0x61, 0x61, 0x53, 0x53, 0x53, 0x54, 0x56, 0x54, 0x57, 0x56, 0x57, 0x4F, 0x4E, 0x4F, 0x19, 0x19, 
   0x19, 0x27, 0x27, 0x27, 0x45, 0x45, 0x45, 0x53, 0x55, 0x53, 0x50, 0x51, 0x50, 0x4E, 0x4D, 0x4E, 
   0x4B, 0x4C, 0x4B, 0x4A, 0x4B, 0x4A, 0x4A, 0x49, 0x4A, 0x49, 0x48, 0x49, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x45, 0x47, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x49, 0x48, 0x49, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x48, 
   0x48, 0x48, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x43, 0x44, 0x43, 0x41, 0x41, 0x41, 0x3E, 0x3D, 
   0x3E, 0x39, 0x39, 0x39, 0x36, 0x36, 0x36, 0x31, 0x33, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x32, 0x31, 0x32, 
   0x24, 0x25, 0x24, 0x0D, 0x0D, 0x0D, 0x0A, 0x0A, 0x0A, 0x00, 0x00, 0x00, 0x09, 0x08, 0x09, 0x1B, 
   0x1B, 0x1B, 0x29, 0x29, 0x29, 0x3F, 0x3E, 0x3F, 0x41, 0x41, 0x41, 0x42, 0x44, 0x42, 0x53, 0x54, 
   0x53, 0x86, 0x86, 0x86, 0x87, 0x88, 0x87, 0x4F, 0x50, 0x4F, 0x38, 0x36, 0x38, 0x45, 0x46, 0x45, 
   0x6F, 0x6F, 0x6F, 0x5B, 0x5B, 0x5B, 0x4A, 0x48, 0x4A, 0x4C, 0x4C, 0x4C, 0x45, 0x45, 0x45, 0x1B, 
   0x1A, 0x1B, 0x0B, 0x0B, 0x0B, 0x09, 0x0A, 0x09, 0x30, 0x30, 0x30, 0x32, 0x34, 0x32, 0x43, 0x44, 
   0x43, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x48, 0x47, 0x48, 0x3D, 0x3C, 0x3D, 0x2C, 0x2B, 0x2C, 
   0x46, 0x46, 0x46, 0x44, 0x44, 0x44, 0x3F, 0x3F, 0x3F, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 
   0x3C, 0x3E, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 
   0x3E, 0x3F, 0x3E, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x40, 0x42, 0x40, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x49, 0x49, 
   0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 
   0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x43, 
   0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x41, 0x42, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x3E, 0x3D, 0x3E, 
   0x3D, 0x3B, 0x3D, 0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 
   0x38, 0x37, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 
   0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 
   0x36, 0x36, 0x36, 0x34, 0x35, 0x34, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x34, 
   0x34, 0x34, 0x38, 0x36, 0x38, 0x3A, 0x3A, 0x3A, 0x3C, 0x3C, 0x3C, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 
   0x3F, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x41, 0x40, 0x41, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x41, 0x40, 
   0x41, 0x44, 0x44, 0x44, 0x5D, 0x5E, 0x5D, 0x70, 0x6F, 0x70, 0x5C, 0x5C, 0x5C, 0x42, 0x42, 0x42, 
   0x3D, 0x3D, 0x3D, 0x3D, 0x3A, 0x3D, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x3A, 0x3B, 0x3A, 0x30, 
   0x31, 0x30, 0x2F, 0x2F, 0x2F, 0x7F, 0x80, 0x7F, 0x90, 0x91, 0x90, 0x5A, 0x5A, 0x5A, 0x50, 0x51, 
   0x50, 0x71, 0x71, 0x71, 0x7D, 0x7D, 0x7D, 0x84, 0x83, 0x84, 0x56, 0x56, 0x56, 0x3E, 0x3E, 0x3E, 
   0x4D, 0x4D, 0x4D, 0x70, 0x70, 0x70, 0x85, 0x84, 0x85, 0x97, 0x97, 0x97, 0x96, 0x99, 0x96, 0x9B, 
   0x9B, 0x9B, 0xA1, 0xA2, 0xA1, 0xA2, 0xA0, 0xA2, 0xB0, 0xB0, 0xB0, 0xA6, 0xA6, 0xA6, 0x90, 0x91, 
   0x90, 0x7F, 0x7E, 0x7F, 0x8A, 0x8A, 0x8A, 0x80, 0x7E, 0x80, 0x5E, 0x5E, 0x5E, 0x52, 0x51, 0x52, 
   0x4F, 0x50, 0x4F, 0x4B, 0x4B, 0x4B, 0x0B, 0x0A, 0x0B, 0x2B, 0x2C, 0x2B, 0x54, 0x56, 0x54, 0x56, 
   0x56, 0x56, 0x57, 0x57, 0x57, 0x54, 0x55, 0x54, 0x5C, 0x5D, 0x5C, 0x51, 0x51, 0x51, 0x51, 0x50, 
   0x51, 0x50, 0x50, 0x50, 0x50, 0x52, 0x50, 0x52, 0x51, 0x52, 0x4F, 0x4F, 0x4F, 0x4D, 0x4E, 0x4D, 
   0x4C, 0x4C, 0x4C, 0x4B, 0x4B, 0x4B, 0x49, 0x49, 0x49, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x45, 0x47, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x49, 0x48, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 
   0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x48, 
   0x49, 0x48, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x43, 0x44, 0x43, 0x40, 0x41, 0x40, 0x3D, 0x3D, 
   0x3D, 0x3A, 0x39, 0x3A, 0x36, 0x36, 0x36, 0x33, 0x33, 0x33, 0x32, 0x30, 0x32, 0x30, 0x2F, 0x30, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x30, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x30, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x31, 0x31, 0x31, 
   0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x36, 0x36, 0x36, 0x1B, 0x1A, 0x1B, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x03, 0x02, 0x03, 0x37, 0x39, 0x37, 0x48, 0x49, 0x48, 0x45, 0x47, 0x45, 0x47, 0x47, 
   0x47, 0x47, 0x46, 0x47, 0x48, 0x47, 0x48, 0x4A, 0x4B, 0x4A, 0x41, 0x43, 0x41, 0x54, 0x55, 0x54, 
   0x9F, 0x9F, 0x9F, 0x5E, 0x5F, 0x5E, 0x3C, 0x3B, 0x3C, 0x40, 0x3F, 0x40, 0x43, 0x43, 0x43, 0x46, 
   0x48, 0x46, 0x44, 0x44, 0x44, 0x0B, 0x0B, 0x0B, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x39, 0x39, 
   0x39, 0x49, 0x49, 0x49, 0x46, 0x48, 0x46, 0x46, 0x47, 0x46, 0x43, 0x43, 0x43, 0x44, 0x45, 0x44, 
   0x46, 0x45, 0x46, 0x37, 0x35, 0x37, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 
   0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 
   0x3E, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x41, 0x3F, 0x3F, 0x41, 0x3F, 
   0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x44, 0x43, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x44, 0x46, 0x46, 0x46, 0x47, 0x46, 0x47, 0x48, 0x48, 0x48, 0x47, 0x49, 
   0x47, 0x49, 0x4A, 0x49, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x49, 0x4A, 0x49, 0x48, 0x49, 0x48, 
   0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 
   0x44, 0x44, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x41, 
   0x41, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3E, 0x3D, 0x3E, 
   0x3D, 0x3C, 0x3D, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x38, 0x39, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 
   0x35, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x39, 0x3A, 0x39, 
   0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 
   0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 
   0x35, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 
   0x37, 0x35, 0x37, 0x34, 0x33, 0x34, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x35, 0x33, 0x35, 0x31, 
   0x33, 0x31, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x31, 0x2F, 0x31, 
   0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x33, 0x31, 0x33, 0x32, 0x33, 0x32, 0x33, 
   0x35, 0x33, 0x36, 0x37, 0x36, 0x38, 0x3A, 0x38, 0x3C, 0x3B, 0x3C, 0x3E, 0x3C, 0x3E, 0x3F, 0x40, 
   0x3F, 0x3F, 0x41, 0x3F, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x42, 0x44, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x3F, 
   0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x42, 0x40, 0x42, 0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x33, 0x32, 0x33, 0x3E, 0x3D, 0x3E, 0x66, 0x66, 0x66, 0x4B, 0x49, 0x4B, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3A, 0x3A, 0x3A, 0x3D, 
   0x3D, 0x3D, 0x53, 0x54, 0x53, 0x71, 0x73, 0x71, 0x75, 0x74, 0x75, 0x47, 0x46, 0x47, 0x3B, 0x38, 
   0x3B, 0x6E, 0x6F, 0x6E, 0x7F, 0x80, 0x7F, 0x75, 0x78, 0x75, 0x53, 0x54, 0x53, 0x38, 0x39, 0x38, 
   0x51, 0x51, 0x51, 0x7C, 0x7B, 0x7C, 0x75, 0x76, 0x75, 0x73, 0x72, 0x73, 0x71, 0x71, 0x71, 0x71, 
   0x73, 0x71, 0x75, 0x76, 0x75, 0x80, 0x7F, 0x80, 0x86, 0x84, 0x86, 0x79, 0x79, 0x79, 0x5F, 0x61, 
   0x5F, 0x48, 0x48, 0x48, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x1C, 0x1C, 0x1C, 0x4B, 0x4B, 0x4B, 
   0x50, 0x51, 0x50, 0x4D, 0x4C, 0x4D, 0x00, 0x00, 0x00, 0x23, 0x23, 0x23, 0x5E, 0x5E, 0x5E, 0x45, 
   0x46, 0x45, 0x2A, 0x2C, 0x2A, 0x3A, 0x3B, 0x3A, 0x52, 0x52, 0x52, 0x54, 0x55, 0x54, 0x56, 0x56, 
   0x56, 0x55, 0x55, 0x55, 0x53, 0x53, 0x53, 0x4F, 0x50, 0x4F, 0x4F, 0x4E, 0x4F, 0x4E, 0x4D, 0x4E, 
   0x4B, 0x4B, 0x4B, 0x49, 0x4A, 0x49, 0x48, 0x49, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x45, 0x46, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 
   0x4B, 0x4B, 0x4B, 0x49, 0x4B, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x48, 
   0x4A, 0x48, 0x48, 0x47, 0x48, 0x46, 0x46, 0x46, 0x44, 0x43, 0x44, 0x41, 0x40, 0x41, 0x3C, 0x3C, 
   0x3C, 0x3A, 0x39, 0x3A, 0x35, 0x36, 0x35, 0x32, 0x33, 0x32, 0x33, 0x31, 0x33, 0x31, 0x30, 0x31, 
   0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 
   0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x2F, 0x30, 0x2F, 0x30, 0x31, 0x30, 0x30, 0x32, 0x30, 
   0x32, 0x32, 0x32, 0x32, 0x34, 0x32, 0x37, 0x37, 0x37, 0x2F, 0x30, 0x2F, 0x16, 0x16, 0x16, 0x0A, 
   0x0B, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x0E, 0x0D, 0x1B, 0x1B, 0x1B, 0x30, 0x31, 0x30, 0x40, 0x40, 
   0x40, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x45, 0x44, 0x45, 0x4B, 0x4B, 0x4B, 0x63, 0x65, 0x63, 
   0x7D, 0x7C, 0x7D, 0x5F, 0x5C, 0x5F, 0x35, 0x36, 0x35, 0x35, 0x34, 0x35, 0x6C, 0x6D, 0x6C, 0x54, 
   0x53, 0x54, 0x4E, 0x4D, 0x4E, 0x36, 0x34, 0x36, 0x11, 0x12, 0x11, 0x05, 0x06, 0x05, 0x16, 0x14, 
   0x16, 0x2A, 0x2A, 0x2A, 0x1F, 0x21, 0x1F, 0x2A, 0x2B, 0x2A, 0x42, 0x42, 0x42, 0x57, 0x56, 0x57, 
   0x55, 0x54, 0x55, 0x25, 0x25, 0x25, 0x31, 0x30, 0x31, 0x43, 0x40, 0x43, 0x3F, 0x3E, 0x3F, 0x3E, 
   0x3E, 0x3E, 0x3C, 0x3D, 0x3C, 0x3B, 0x3C, 0x3B, 0x3D, 0x3B, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 
   0x3E, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x41, 0x3F, 0x41, 0x40, 0x41, 
   0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x44, 0x42, 0x44, 0x43, 0x43, 0x43, 0x43, 
   0x44, 0x43, 0x43, 0x43, 0x43, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x49, 0x49, 
   0x49, 0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x49, 0x4B, 0x49, 0x49, 0x49, 0x49, 
   0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x48, 0x46, 0x48, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x44, 
   0x43, 0x44, 0x44, 0x43, 0x44, 0x42, 0x42, 0x42, 0x40, 0x42, 0x40, 0x41, 0x40, 0x41, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3E, 0x3E, 
   0x3C, 0x3D, 0x3C, 0x3C, 0x3A, 0x3C, 0x3A, 0x39, 0x3A, 0x3B, 0x39, 0x3B, 0x39, 0x3A, 0x39, 0x37, 
   0x39, 0x37, 0x39, 0x37, 0x39, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 
   0x35, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 0x36, 
   0x35, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 
   0x34, 0x34, 0x34, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 
   0x32, 0x33, 0x32, 0x32, 0x32, 0x30, 0x30, 0x30, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 
   0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x35, 
   0x34, 0x35, 0x37, 0x38, 0x37, 0x39, 0x3A, 0x39, 0x3D, 0x3C, 0x3D, 0x3E, 0x3D, 0x3E, 0x3F, 0x40, 
   0x3F, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 
   0x42, 0x43, 0x42, 0x40, 0x42, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x41, 
   0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x45, 0x44, 
   0x45, 0x29, 0x29, 0x29, 0x12, 0x11, 0x12, 0x3D, 0x3D, 0x3D, 0x40, 0x41, 0x40, 0x3E, 0x3F, 0x3E, 
   0x3E, 0x3E, 0x3E, 0x3B, 0x3C, 0x3B, 0x3B, 0x3C, 0x3B, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3C, 
   0x3A, 0x3C, 0x3C, 0x3A, 0x3C, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x3C, 0x3C, 0x3C, 0x49, 0x4A, 
   0x49, 0x61, 0x63, 0x61, 0x57, 0x57, 0x57, 0x45, 0x46, 0x45, 0x3D, 0x3D, 0x3D, 0x43, 0x42, 0x43, 
   0x63, 0x63, 0x63, 0x6E, 0x6E, 0x6E, 0x4C, 0x4E, 0x4C, 0x3D, 0x3E, 0x3D, 0x42, 0x41, 0x42, 0x43, 
   0x43, 0x43, 0x45, 0x45, 0x45, 0x48, 0x48, 0x48, 0x47, 0x49, 0x47, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 
   0x4E, 0x4B, 0x4E, 0x4B, 0x0A, 0x0A, 0x0A, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x3A, 0x3A, 0x3A, 
   0x5A, 0x5B, 0x5A, 0x49, 0x4B, 0x49, 0x11, 0x12, 0x11, 0x1C, 0x1C, 0x1C, 0x51, 0x51, 0x51, 0x53, 
   0x54, 0x53, 0x51, 0x53, 0x51, 0x53, 0x54, 0x53, 0x54, 0x54, 0x54, 0x55, 0x55, 0x55, 0x54, 0x55, 
   0x54, 0x52, 0x54, 0x52, 0x52, 0x51, 0x52, 0x50, 0x4F, 0x50, 0x4E, 0x4E, 0x4E, 0x4C, 0x4C, 0x4C, 
   0x4A, 0x4B, 0x4A, 0x4A, 0x49, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x47, 0x48, 0x48, 0x47, 0x48, 0x47, 
   0x47, 0x47, 0x45, 0x46, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x48, 0x48, 0x48, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 
   0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 
   0x4A, 0x4A, 0x48, 0x48, 0x48, 0x44, 0x45, 0x44, 0x42, 0x43, 0x42, 0x3F, 0x3F, 0x3F, 0x3C, 0x3C, 
   0x3C, 0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 
   0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x30, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 
   0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x37, 0x37, 0x37, 0x3A, 0x3C, 0x3A, 0x36, 
   0x37, 0x36, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x04, 0x03, 0x28, 0x27, 
   0x28, 0x45, 0x46, 0x45, 0x48, 0x48, 0x48, 0x47, 0x45, 0x47, 0x46, 0x44, 0x46, 0x47, 0x46, 0x47, 
   0x46, 0x46, 0x46, 0x4A, 0x4A, 0x4A, 0x48, 0x48, 0x48, 0x4F, 0x4F, 0x4F, 0xA2, 0xA3, 0xA2, 0x62, 
   0x61, 0x62, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x4E, 0x4F, 0x4E, 0x2F, 0x2F, 0x2F, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x38, 0x37, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x35, 0x34, 0x35, 0x2B, 0x29, 0x2B, 0x3E, 0x3D, 0x3E, 0x3F, 0x3F, 0x3F, 0x3D, 
   0x3E, 0x3D, 0x3F, 0x3F, 0x3F, 0x3D, 0x3C, 0x3D, 0x3D, 0x3B, 0x3D, 0x3E, 0x3C, 0x3E, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 
   0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x43, 0x42, 0x42, 0x43, 0x42, 0x44, 0x43, 0x44, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x47, 0x48, 
   0x47, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 
   0x4A, 0x49, 0x4A, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x42, 0x44, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x40, 0x41, 0x40, 0x3F, 0x41, 0x3F, 0x3F, 0x41, 0x3F, 
   0x3E, 0x3C, 0x3E, 0x3C, 0x3B, 0x3C, 0x3B, 0x3A, 0x3B, 0x3A, 0x39, 0x3A, 0x3B, 0x39, 0x3B, 0x38, 
   0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x37, 0x36, 0x37, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x34, 0x35, 0x34, 0x35, 
   0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x34, 0x35, 
   0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 
   0x31, 0x32, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x35, 
   0x35, 0x35, 0x36, 0x37, 0x36, 0x38, 0x3A, 0x38, 0x3B, 0x3B, 0x3B, 0x3F, 0x3D, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x3F, 0x41, 0x3F, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 
   0x43, 0x42, 0x43, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x3F, 0x41, 0x3F, 0x41, 0x41, 0x41, 0x42, 
   0x42, 0x42, 0x41, 0x42, 0x41, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x3F, 0x41, 0x3F, 0x43, 0x43, 
   0x43, 0x31, 0x2F, 0x31, 0x07, 0x05, 0x07, 0x0E, 0x0E, 0x0E, 0x3B, 0x3C, 0x3B, 0x1D, 0x1F, 0x1D, 
   0x12, 0x13, 0x12, 0x23, 0x24, 0x23, 0x1E, 0x1F, 0x1E, 0x14, 0x14, 0x14, 0x21, 0x21, 0x21, 0x3C, 
   0x3C, 0x3C, 0x41, 0x3F, 0x41, 0x3F, 0x3E, 0x3F, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x44, 0x43, 
   0x44, 0x42, 0x42, 0x42, 0x39, 0x39, 0x39, 0x3A, 0x3C, 0x3A, 0x3F, 0x3E, 0x3F, 0x3C, 0x3B, 0x3C, 
   0x3F, 0x3F, 0x3F, 0x3B, 0x3B, 0x3B, 0x40, 0x40, 0x40, 0x3F, 0x41, 0x3F, 0x23, 0x23, 0x23, 0x1A, 
   0x1A, 0x1A, 0x19, 0x1A, 0x19, 0x34, 0x34, 0x34, 0x50, 0x52, 0x50, 0x50, 0x51, 0x50, 0x50, 0x51, 
   0x50, 0x42, 0x44, 0x42, 0x19, 0x1A, 0x19, 0x1C, 0x1D, 0x1C, 0x1A, 0x1A, 0x1A, 0x1E, 0x1E, 0x1E, 
   0x46, 0x47, 0x46, 0x3C, 0x3C, 0x3C, 0x3D, 0x3E, 0x3D, 0x3A, 0x3A, 0x3A, 0x41, 0x40, 0x41, 0x53, 
   0x52, 0x53, 0x55, 0x56, 0x55, 0x56, 0x55, 0x56, 0x54, 0x56, 0x54, 0x55, 0x55, 0x55, 0x54, 0x54, 
   0x54, 0x54, 0x54, 0x54, 0x52, 0x51, 0x52, 0x4F, 0x4F, 0x4F, 0x4C, 0x4E, 0x4C, 0x4A, 0x4C, 0x4A, 
   0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x48, 
   0x47, 0x48, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x49, 0x48, 0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4B, 0x4A, 
   0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4A, 0x4C, 0x4A, 0x48, 
   0x4A, 0x48, 0x47, 0x47, 0x47, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x3F, 0x3F, 0x3F, 0x3C, 0x3C, 
   0x3C, 0x39, 0x39, 0x39, 0x36, 0x36, 0x36, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 
   0x31, 0x31, 0x31, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 
   0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x31, 0x30, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x38, 0x39, 0x38, 0x3A, 
   0x3B, 0x3A, 0x32, 0x31, 0x32, 0x1C, 0x1C, 0x1C, 0x10, 0x0F, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x19, 0x19, 0x19, 0x1D, 0x1C, 0x1D, 0x1A, 0x19, 0x1A, 0x16, 0x14, 0x16, 0x1A, 0x19, 0x1A, 
   0x24, 0x25, 0x24, 0x32, 0x32, 0x32, 0x3D, 0x3D, 0x3D, 0x5E, 0x5E, 0x5E, 0x79, 0x79, 0x79, 0x5A, 
   0x5B, 0x5A, 0x46, 0x47, 0x46, 0x3D, 0x3C, 0x3D, 0x45, 0x47, 0x45, 0x52, 0x51, 0x52, 0x50, 0x51, 
   0x50, 0x39, 0x3A, 0x39, 0x22, 0x22, 0x22, 0x0C, 0x0B, 0x0C, 0x05, 0x06, 0x05, 0x31, 0x2F, 0x31, 
   0x43, 0x43, 0x43, 0x41, 0x41, 0x41, 0x32, 0x32, 0x32, 0x3D, 0x3D, 0x3D, 0x4D, 0x4C, 0x4D, 0x4F, 
   0x50, 0x4F, 0x40, 0x41, 0x40, 0x3D, 0x3E, 0x3D, 0x3B, 0x3A, 0x3B, 0x3F, 0x3D, 0x3F, 0x3E, 0x40, 
   0x3E, 0x3F, 0x40, 0x3F, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x41, 0x40, 0x41, 
   0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 
   0x42, 0x41, 0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 0x44, 0x44, 0x44, 0x46, 0x46, 0x46, 0x46, 0x47, 
   0x46, 0x48, 0x48, 0x48, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 
   0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x46, 0x46, 0x46, 0x44, 
   0x45, 0x44, 0x43, 0x44, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x40, 0x41, 0x3F, 0x40, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x3F, 0x41, 0x3F, 
   0x40, 0x3D, 0x40, 0x3D, 0x3C, 0x3D, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x39, 0x3A, 0x38, 0x39, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 0x3A, 0x39, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x34, 
   0x35, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 
   0x33, 0x32, 0x33, 0x32, 0x31, 0x32, 0x30, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x37, 
   0x36, 0x37, 0x37, 0x38, 0x37, 0x3B, 0x3A, 0x3B, 0x3D, 0x3D, 0x3D, 0x40, 0x3E, 0x40, 0x40, 0x40, 
   0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 
   0x42, 0x43, 0x42, 0x42, 0x41, 0x42, 0x3F, 0x41, 0x3F, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x44, 0x43, 
   0x44, 0x3B, 0x3A, 0x3B, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x05, 0x05, 0x05, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x1C, 0x1C, 0x1C, 0x1F, 0x1F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1D, 
   0x1D, 0x1D, 0x28, 0x27, 0x28, 0x2D, 0x2C, 0x2D, 0x43, 0x44, 0x43, 0x2D, 0x2E, 0x2D, 0x25, 0x24, 
   0x25, 0x40, 0x3F, 0x40, 0x0E, 0x0E, 0x0E, 0x16, 0x16, 0x16, 0x40, 0x40, 0x40, 0x3C, 0x3D, 0x3C, 
   0x03, 0x03, 0x03, 0x04, 0x04, 0x04, 0x3F, 0x3F, 0x3F, 0x42, 0x41, 0x42, 0x3F, 0x41, 0x3F, 0x0D, 
   0x0E, 0x0D, 0x00, 0x00, 0x00, 0x13, 0x13, 0x13, 0x47, 0x47, 0x47, 0x34, 0x33, 0x34, 0x42, 0x43, 
   0x42, 0x4A, 0x49, 0x4A, 0x4D, 0x4C, 0x4D, 0x50, 0x50, 0x50, 0x4F, 0x50, 0x4F, 0x4F, 0x4F, 0x4F, 
   0x4C, 0x4C, 0x4C, 0x51, 0x52, 0x51, 0x53, 0x54, 0x53, 0x54, 0x54, 0x54, 0x54, 0x55, 0x54, 0x54, 
   0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 
   0x54, 0x53, 0x52, 0x53, 0x51, 0x51, 0x51, 0x4F, 0x4F, 0x4F, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 
   0x4A, 0x4B, 0x4A, 0x48, 0x4A, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x46, 0x44, 0x46, 0x46, 
   0x46, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x4A, 0x4B, 0x4A, 0x4C, 0x4B, 0x4C, 
   0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4A, 0x4C, 0x4A, 0x49, 
   0x4A, 0x49, 0x47, 0x47, 0x47, 0x44, 0x45, 0x44, 0x42, 0x42, 0x42, 0x3F, 0x3F, 0x3F, 0x3C, 0x3C, 
   0x3C, 0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 0x35, 0x35, 0x35, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x31, 0x32, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 
   0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x34, 0x33, 
   0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x36, 0x37, 0x36, 0x38, 0x37, 0x38, 0x39, 0x39, 0x39, 0x3A, 
   0x3A, 0x3A, 0x3D, 0x3D, 0x3D, 0x40, 0x3F, 0x40, 0x3E, 0x3E, 0x3E, 0x20, 0x20, 0x20, 0x05, 0x04, 
   0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x15, 0x15, 0x06, 0x07, 0x06, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x0B, 0x0B, 0x0B, 0x27, 0x25, 0x27, 0x36, 0x34, 0x36, 0x37, 
   0x37, 0x37, 0x48, 0x48, 0x48, 0x51, 0x53, 0x51, 0x4B, 0x4D, 0x4B, 0x84, 0x85, 0x84, 0xA5, 0xA5, 
   0xA5, 0x6B, 0x68, 0x6B, 0x10, 0x11, 0x10, 0x36, 0x37, 0x36, 0x0F, 0x0F, 0x0F, 0x19, 0x19, 0x19, 
   0x45, 0x44, 0x45, 0x40, 0x42, 0x40, 0x42, 0x44, 0x42, 0x64, 0x65, 0x64, 0x76, 0x74, 0x76, 0x40, 
   0x40, 0x40, 0x28, 0x27, 0x28, 0x3A, 0x39, 0x3A, 0x3E, 0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x3F, 0x40, 
   0x3F, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3F, 0x41, 0x3F, 0x40, 0x41, 0x40, 
   0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 0x46, 0x46, 
   0x46, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 
   0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x46, 
   0x46, 0x46, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 
   0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x43, 0x42, 0x43, 0x40, 0x40, 0x40, 
   0x3F, 0x3E, 0x3F, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3B, 
   0x3A, 0x3B, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x37, 0x38, 0x37, 0x36, 0x36, 0x36, 0x35, 0x35, 
   0x35, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x33, 0x35, 0x32, 
   0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x33, 
   0x34, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 
   0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2D, 
   0x2F, 0x2D, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2F, 0x2F, 0x31, 0x2F, 0x31, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x37, 
   0x36, 0x37, 0x38, 0x39, 0x38, 0x3D, 0x3B, 0x3D, 0x3E, 0x3E, 0x3E, 0x40, 0x40, 0x40, 0x40, 0x41, 
   0x40, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 
   0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x3F, 0x41, 0x3F, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x42, 0x41, 
   0x42, 0x43, 0x42, 0x43, 0x39, 0x3B, 0x39, 0x30, 0x32, 0x30, 0x2D, 0x2D, 0x2D, 0x2E, 0x2F, 0x2E, 
   0x2D, 0x2F, 0x2D, 0x34, 0x34, 0x34, 0x36, 0x36, 0x36, 0x26, 0x25, 0x26, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x44, 0x44, 0x44, 0x28, 0x27, 0x28, 0x0C, 0x0C, 
   0x0C, 0x39, 0x39, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x41, 0x43, 0x3F, 0x3F, 0x3F, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3D, 0x3D, 0x3D, 0x43, 0x43, 0x43, 0x39, 0x39, 0x39, 0x3A, 
   0x3A, 0x3A, 0x37, 0x36, 0x37, 0x31, 0x31, 0x31, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x44, 0x44, 
   0x44, 0x49, 0x4A, 0x49, 0x4C, 0x4D, 0x4C, 0x4D, 0x4E, 0x4D, 0x4E, 0x50, 0x4E, 0x4F, 0x50, 0x4F, 
   0x51, 0x50, 0x51, 0x51, 0x51, 0x51, 0x50, 0x51, 0x50, 0x51, 0x52, 0x51, 0x52, 0x53, 0x52, 0x51, 
   0x53, 0x51, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x54, 0x53, 0x54, 0x54, 0x54, 0x54, 0x53, 0x54, 
   0x53, 0x52, 0x52, 0x52, 0x50, 0x51, 0x50, 0x4F, 0x4F, 0x4F, 0x4D, 0x4D, 0x4D, 0x4B, 0x4C, 0x4B, 
   0x4B, 0x4A, 0x4B, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x48, 0x46, 0x48, 0x46, 0x47, 0x46, 0x44, 
   0x46, 0x44, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 0x46, 0x44, 0x46, 0x46, 0x46, 0x46, 0x47, 
   0x46, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x49, 0x49, 0x49, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 
   0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4C, 0x4A, 0x49, 
   0x4A, 0x49, 0x47, 0x47, 0x47, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x40, 0x3F, 0x40, 0x3B, 0x3B, 
   0x3B, 0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 0x36, 0x35, 0x36, 0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 
   0x32, 0x31, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x32, 0x32, 0x32, 0x34, 0x33, 0x34, 
   0x35, 0x35, 0x35, 0x36, 0x37, 0x36, 0x38, 0x37, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x3A, 0x3B, 0x3A, 0x3D, 0x3C, 0x3D, 0x40, 0x3E, 0x40, 0x3F, 0x3E, 0x3F, 0x3B, 0x3B, 
   0x3B, 0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x34, 0x35, 0x34, 0x39, 0x3B, 0x39, 0x22, 0x23, 0x22, 
   0x02, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0x33, 0x32, 0x33, 0x02, 
   0x02, 0x02, 0x21, 0x22, 0x21, 0x52, 0x52, 0x52, 0x53, 0x52, 0x53, 0x5C, 0x5F, 0x5C, 0x58, 0x59, 
   0x58, 0x4B, 0x4A, 0x4B, 0x25, 0x27, 0x25, 0x5B, 0x5A, 0x5B, 0x84, 0x85, 0x84, 0x4D, 0x4E, 0x4D, 
   0x3F, 0x40, 0x3F, 0x41, 0x40, 0x41, 0x42, 0x41, 0x42, 0x46, 0x48, 0x46, 0x48, 0x47, 0x48, 0x3D, 
   0x3F, 0x3D, 0x29, 0x28, 0x29, 0x2E, 0x2C, 0x2E, 0x41, 0x40, 0x41, 0x3F, 0x3D, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x40, 0x41, 0x40, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 
   0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 
   0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x48, 
   0x46, 0x48, 0x45, 0x45, 0x45, 0x44, 0x43, 0x44, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x42, 0x43, 
   0x42, 0x43, 0x43, 0x43, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 
   0x3F, 0x40, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 
   0x3A, 0x3C, 0x3B, 0x39, 0x3B, 0x38, 0x39, 0x38, 0x37, 0x38, 0x37, 0x37, 0x36, 0x37, 0x35, 0x35, 
   0x35, 0x33, 0x35, 0x33, 0x35, 0x35, 0x35, 0x38, 0x37, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 
   0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x30, 0x31, 0x30, 0x30, 0x2F, 0x30, 0x2E, 0x2E, 0x2E, 0x2C, 
   0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2E, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x32, 0x32, 0x32, 0x33, 0x34, 0x33, 0x37, 
   0x37, 0x37, 0x39, 0x39, 0x39, 0x3C, 0x3C, 0x3C, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x41, 0x42, 
   0x41, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 
   0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x41, 0x42, 0x41, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 
   0x41, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 
   0x44, 0x45, 0x44, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x41, 0x40, 0x41, 0x23, 0x21, 0x23, 0x13, 
   0x12, 0x13, 0x13, 0x11, 0x13, 0x0C, 0x0C, 0x0C, 0x45, 0x44, 0x45, 0x26, 0x25, 0x26, 0x0F, 0x10, 
   0x0F, 0x25, 0x25, 0x25, 0x10, 0x10, 0x10, 0x09, 0x0A, 0x09, 0x31, 0x33, 0x31, 0x2F, 0x31, 0x2F, 
   0x1B, 0x1B, 0x1B, 0x18, 0x18, 0x18, 0x20, 0x20, 0x20, 0x35, 0x36, 0x35, 0x45, 0x45, 0x45, 0x48, 
   0x46, 0x48, 0x47, 0x48, 0x47, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 
   0x49, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x4C, 0x4B, 0x4C, 0x4C, 0x4D, 0x4C, 0x4E, 0x4F, 0x4E, 
   0x50, 0x50, 0x50, 0x51, 0x51, 0x51, 0x51, 0x52, 0x51, 0x51, 0x51, 0x51, 0x51, 0x52, 0x51, 0x51, 
   0x52, 0x51, 0x52, 0x51, 0x52, 0x52, 0x52, 0x52, 0x52, 0x53, 0x52, 0x51, 0x52, 0x51, 0x52, 0x52, 
   0x52, 0x50, 0x51, 0x50, 0x4F, 0x50, 0x4F, 0x4D, 0x4F, 0x4D, 0x4E, 0x4E, 0x4E, 0x4C, 0x4C, 0x4C, 
   0x4B, 0x4B, 0x4B, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x44, 0x46, 0x44, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 
   0x46, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x48, 0x4A, 0x48, 0x4B, 0x4B, 0x4B, 0x4C, 0x4C, 0x4C, 
   0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 0x48, 
   0x49, 0x48, 0x46, 0x47, 0x46, 0x45, 0x44, 0x45, 0x42, 0x42, 0x42, 0x3F, 0x3F, 0x3F, 0x3D, 0x3C, 
   0x3D, 0x39, 0x39, 0x39, 0x36, 0x37, 0x36, 0x34, 0x35, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x30, 
   0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x31, 0x30, 0x32, 0x32, 0x32, 0x34, 0x34, 0x34, 
   0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x3A, 0x39, 0x3A, 
   0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3C, 0x3C, 0x3C, 0x3F, 0x3F, 0x3F, 0x41, 0x41, 0x41, 0x41, 0x43, 
   0x41, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x45, 0x44, 0x45, 0x3E, 0x3F, 0x3E, 
   0x28, 0x29, 0x28, 0x1B, 0x1B, 0x1B, 0x11, 0x11, 0x11, 0x0C, 0x0C, 0x0C, 0x3C, 0x3B, 0x3C, 0x01, 
   0x00, 0x01, 0x01, 0x01, 0x01, 0x26, 0x26, 0x26, 0x2E, 0x2E, 0x2E, 0x29, 0x28, 0x29, 0x2A, 0x2A, 
   0x2A, 0x30, 0x2F, 0x30, 0x4D, 0x50, 0x4D, 0x77, 0x76, 0x77, 0x82, 0x84, 0x82, 0x58, 0x5A, 0x58, 
   0x3F, 0x3F, 0x3F, 0x40, 0x42, 0x40, 0x3F, 0x40, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3C, 0x3E, 0x3F, 
   0x40, 0x3F, 0x3C, 0x3D, 0x3C, 0x29, 0x28, 0x29, 0x36, 0x35, 0x36, 0x42, 0x40, 0x42, 0x3F, 0x40, 
   0x3F, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x41, 
   0x41, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x44, 0x45, 0x44, 0x46, 0x44, 
   0x46, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x47, 0x48, 0x48, 0x47, 0x48, 0x48, 0x47, 0x48, 0x45, 
   0x47, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x44, 0x43, 
   0x44, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3E, 0x3E, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 
   0x3B, 0x3D, 0x3B, 0x3B, 0x3B, 0x3A, 0x39, 0x3A, 0x38, 0x39, 0x38, 0x36, 0x36, 0x36, 0x34, 0x35, 
   0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x36, 0x37, 0x36, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 0x33, 
   0x32, 0x33, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 
   0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 
   0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2B, 
   0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 
   0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x2E, 0x2E, 0x2E, 0x2F, 0x2D, 0x2F, 0x2E, 0x2D, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2D, 0x2F, 0x2D, 0x31, 0x30, 0x31, 0x32, 0x32, 0x32, 0x36, 0x34, 0x36, 0x38, 
   0x37, 0x38, 0x3A, 0x3A, 0x3A, 0x3D, 0x3B, 0x3D, 0x3F, 0x3E, 0x3F, 0x40, 0x40, 0x40, 0x42, 0x42, 
   0x42, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 
   0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 
   0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x42, 
   0x41, 0x42, 0x42, 0x41, 0x42, 0x39, 0x39, 0x39, 0x40, 0x41, 0x40, 0x3B, 0x3B, 0x3B, 0x36, 0x36, 
   0x36, 0x39, 0x39, 0x39, 0x3D, 0x3E, 0x3D, 0x35, 0x36, 0x35, 0x30, 0x31, 0x30, 0x38, 0x38, 0x38, 
   0x3D, 0x3F, 0x3D, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x40, 0x40, 0x40, 0x43, 0x43, 0x43, 0x45, 
   0x44, 0x45, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x44, 0x46, 0x44, 0x46, 0x47, 0x46, 0x46, 0x47, 
   0x46, 0x47, 0x48, 0x47, 0x46, 0x48, 0x46, 0x4A, 0x49, 0x4A, 0x4C, 0x4C, 0x4C, 0x4E, 0x4E, 0x4E, 
   0x4F, 0x4F, 0x4F, 0x4E, 0x50, 0x4E, 0x52, 0x52, 0x52, 0x51, 0x51, 0x51, 0x50, 0x51, 0x50, 0x51, 
   0x50, 0x51, 0x50, 0x50, 0x50, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x52, 0x51, 0x50, 0x51, 
   0x50, 0x4F, 0x50, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4E, 0x4F, 0x4D, 0x4F, 0x4D, 0x4C, 0x4C, 0x4C, 
   0x4B, 0x4A, 0x4B, 0x49, 0x49, 0x49, 0x46, 0x47, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 
   0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x46, 0x44, 0x46, 0x47, 0x46, 0x46, 0x46, 
   0x46, 0x48, 0x46, 0x48, 0x47, 0x47, 0x47, 0x48, 0x4A, 0x48, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4C, 
   0x4C, 0x4C, 0x4C, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 0x4B, 0x49, 0x4A, 0x49, 0x4A, 0x47, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x43, 0x44, 0x43, 0x41, 0x42, 0x41, 0x40, 0x3F, 0x40, 0x3B, 0x3C, 
   0x3B, 0x38, 0x39, 0x38, 0x35, 0x37, 0x35, 0x36, 0x35, 0x36, 0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x31, 0x30, 0x31, 0x32, 0x32, 0x32, 0x34, 0x34, 0x34, 
   0x35, 0x35, 0x35, 0x36, 0x37, 0x36, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x3A, 
   0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3D, 0x3C, 0x3D, 0x3F, 0x3D, 0x3F, 0x3E, 0x3F, 0x3E, 0x40, 0x41, 
   0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x42, 0x41, 0x42, 0x43, 0x43, 0x43, 
   0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x44, 0x45, 0x44, 0x3D, 0x3D, 0x3D, 0x47, 0x48, 0x47, 0x2A, 
   0x2A, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x29, 0x2A, 0x02, 0x02, 
   0x02, 0x00, 0x00, 0x00, 0x27, 0x28, 0x27, 0x46, 0x47, 0x46, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 
   0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x3F, 0x40, 0x3F, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x41, 
   0x3E, 0x41, 0x3F, 0x3F, 0x3F, 0x38, 0x37, 0x38, 0x2E, 0x2E, 0x2E, 0x3C, 0x3A, 0x3C, 0x40, 0x40, 
   0x40, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 
   0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x41, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x42, 0x41, 0x42, 0x42, 0x43, 0x42, 0x44, 0x42, 0x44, 0x44, 0x44, 0x44, 0x43, 0x43, 
   0x43, 0x44, 0x43, 0x44, 0x45, 0x46, 0x45, 0x44, 0x46, 0x44, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 
   0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x45, 0x46, 0x45, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x42, 0x44, 0x42, 0x43, 0x44, 
   0x43, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x41, 0x42, 0x41, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 
   0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3D, 0x3D, 0x3D, 0x3C, 
   0x3C, 0x3C, 0x3D, 0x3B, 0x3D, 0x3B, 0x3A, 0x3B, 0x3A, 0x39, 0x3A, 0x38, 0x37, 0x38, 0x36, 0x35, 
   0x36, 0x33, 0x34, 0x33, 0x35, 0x36, 0x35, 0x38, 0x37, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x35, 0x33, 0x35, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 
   0x32, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 
   0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x30, 0x2F, 0x30, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2D, 0x2E, 
   0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x33, 0x32, 0x33, 0x34, 0x35, 0x34, 0x37, 
   0x38, 0x37, 0x3A, 0x3A, 0x3A, 0x3D, 0x3D, 0x3D, 0x40, 0x3F, 0x40, 0x41, 0x41, 0x41, 0x42, 0x43, 
   0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 
   0x43, 0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x43, 
   0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 
   0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 
   0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3B, 0x3A, 0x3B, 0x42, 0x42, 0x42, 0x43, 0x42, 
   0x43, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3F, 0x3D, 0x3F, 
   0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3F, 0x3D, 0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x46, 0x44, 0x46, 0x44, 0x45, 0x44, 0x45, 0x46, 
   0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x47, 0x48, 0x47, 0x4B, 0x4A, 0x4B, 0x4D, 0x4C, 0x4D, 
   0x4E, 0x4E, 0x4E, 0x4F, 0x50, 0x4F, 0x51, 0x50, 0x51, 0x51, 0x50, 0x51, 0x50, 0x51, 0x50, 0x50, 
   0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x51, 0x50, 0x51, 0x50, 0x50, 
   0x50, 0x4F, 0x50, 0x4F, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 0x4C, 0x4E, 
   0x4A, 0x4B, 0x4A, 0x49, 0x4A, 0x49, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x44, 0x45, 0x44, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 
   0x46, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x49, 0x4B, 0x49, 0x48, 0x49, 0x48, 0x48, 0x4A, 0x48, 0x49, 0x49, 0x49, 0x47, 
   0x47, 0x47, 0x47, 0x46, 0x47, 0x43, 0x43, 0x43, 0x41, 0x42, 0x41, 0x3F, 0x3F, 0x3F, 0x3C, 0x3B, 
   0x3C, 0x38, 0x39, 0x38, 0x36, 0x37, 0x36, 0x34, 0x34, 0x34, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x30, 0x31, 0x30, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x31, 0x30, 0x31, 
   0x31, 0x31, 0x30, 0x2F, 0x30, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2E, 0x2D, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x32, 0x31, 0x32, 0x33, 0x33, 0x33, 
   0x35, 0x36, 0x35, 0x35, 0x37, 0x35, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 
   0x3A, 0x39, 0x39, 0x3A, 0x39, 0x3C, 0x3B, 0x3C, 0x3F, 0x3D, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 
   0x42, 0x43, 0x42, 0x43, 0x44, 0x43, 0x47, 0x46, 0x47, 0x48, 0x49, 0x48, 0x4C, 0x4D, 0x4C, 0x42, 
   0x42, 0x42, 0x11, 0x11, 0x11, 0x06, 0x05, 0x06, 0x09, 0x08, 0x09, 0x3E, 0x3E, 0x3E, 0x0F, 0x0F, 
   0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x1F, 0x1F, 0x29, 0x28, 0x29, 0x26, 0x24, 0x26, 
   0x22, 0x21, 0x22, 0x24, 0x23, 0x24, 0x31, 0x31, 0x31, 0x23, 0x25, 0x23, 0x23, 0x24, 0x23, 0x36, 
   0x37, 0x36, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x29, 0x28, 0x29, 0x31, 0x2F, 0x31, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 
   0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x41, 0x40, 0x41, 0x41, 
   0x40, 0x41, 0x40, 0x41, 0x40, 0x41, 0x42, 0x41, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x43, 
   0x42, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 
   0x47, 0x46, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x43, 0x44, 
   0x43, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 
   0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x3E, 0x3D, 0x3E, 0x3D, 
   0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x38, 0x38, 0x38, 0x36, 0x35, 
   0x36, 0x34, 0x35, 0x34, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x33, 0x31, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x33, 0x33, 
   0x33, 0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x30, 0x2F, 0x30, 0x2D, 0x2E, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x31, 0x30, 0x31, 0x32, 0x33, 0x32, 0x36, 0x36, 0x36, 0x38, 
   0x39, 0x38, 0x39, 0x3B, 0x39, 0x3D, 0x3E, 0x3D, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x42, 0x42, 
   0x42, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x43, 0x44, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 
   0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x3E, 0x3F, 
   0x3E, 0x3F, 0x3D, 0x3F, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3E, 0x3C, 
   0x3E, 0x3D, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x41, 0x40, 0x41, 0x42, 0x42, 0x42, 0x43, 
   0x42, 0x43, 0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x48, 0x49, 0x48, 0x4B, 0x4A, 0x4B, 
   0x4C, 0x4D, 0x4C, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x50, 0x4F, 0x50, 0x4E, 0x4F, 0x4E, 0x4E, 
   0x4E, 0x4E, 0x50, 0x4F, 0x50, 0x4E, 0x4F, 0x4E, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x4F, 0x50, 
   0x4F, 0x50, 0x4E, 0x50, 0x4E, 0x4F, 0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 0x4C, 0x4E, 0x4B, 0x4C, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x48, 0x4A, 0x48, 0x46, 0x47, 0x46, 0x48, 0x46, 0x48, 0x46, 0x47, 0x46, 0x45, 
   0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x46, 0x44, 0x45, 0x46, 0x45, 0x45, 0x46, 
   0x45, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x49, 
   0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 
   0x47, 0x47, 0x45, 0x44, 0x45, 0x43, 0x42, 0x43, 0x41, 0x41, 0x41, 0x3E, 0x3F, 0x3E, 0x3B, 0x3B, 
   0x3B, 0x37, 0x39, 0x37, 0x36, 0x36, 0x36, 0x36, 0x34, 0x36, 0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x2F, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x30, 
   0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x30, 0x2F, 0x30, 0x30, 0x31, 0x30, 0x32, 0x32, 0x32, 
   0x33, 0x34, 0x33, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x38, 0x37, 0x38, 0x39, 0x39, 0x39, 0x38, 
   0x3A, 0x38, 0x3A, 0x3A, 0x3A, 0x3C, 0x3C, 0x3C, 0x3C, 0x3E, 0x3C, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 
   0x3E, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3E, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x43, 0x44, 0x43, 0x45, 0x46, 0x45, 0x49, 0x48, 0x49, 0x48, 0x49, 0x48, 0x49, 
   0x49, 0x49, 0x43, 0x42, 0x43, 0x37, 0x37, 0x37, 0x33, 0x33, 0x33, 0x44, 0x43, 0x44, 0x41, 0x42, 
   0x41, 0x1B, 0x1C, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x44, 0x43, 0x44, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x1D, 
   0x1F, 0x1D, 0x41, 0x40, 0x41, 0x35, 0x35, 0x35, 0x2E, 0x2D, 0x2E, 0x3C, 0x3C, 0x3C, 0x41, 0x42, 
   0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x40, 0x42, 0x40, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x41, 0x42, 
   0x41, 0x42, 0x42, 0x42, 0x44, 0x43, 0x44, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 
   0x44, 0x47, 0x44, 0x45, 0x47, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 
   0x44, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x41, 0x41, 0x41, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 
   0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x3F, 0x40, 0x3F, 0x3E, 0x3E, 0x3E, 0x3C, 
   0x3D, 0x3C, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x37, 0x38, 0x37, 0x35, 0x36, 
   0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x38, 0x38, 0x38, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 
   0x3C, 0x3B, 0x3C, 0x3E, 0x3B, 0x3E, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x32, 
   0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 
   0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x30, 0x2F, 0x30, 0x2E, 0x2E, 0x2E, 0x2C, 
   0x2D, 0x2C, 0x2B, 0x2B, 0x2B, 0x29, 0x2B, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2D, 0x2B, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 
   0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x34, 0x32, 0x34, 0x36, 0x36, 0x36, 0x38, 
   0x39, 0x38, 0x3C, 0x3B, 0x3C, 0x3E, 0x3C, 0x3E, 0x3E, 0x3F, 0x3E, 0x42, 0x41, 0x42, 0x42, 0x43, 
   0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 
   0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x43, 
   0x44, 0x43, 0x44, 0x43, 0x44, 0x42, 0x43, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x40, 0x40, 
   0x40, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 
   0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x41, 0x41, 0x41, 0x42, 
   0x42, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x49, 0x49, 0x49, 
   0x4B, 0x4B, 0x4B, 0x4C, 0x4D, 0x4C, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x50, 0x50, 0x50, 0x51, 0x50, 0x51, 0x4F, 0x50, 0x4F, 0x4E, 0x4F, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 
   0x45, 0x45, 0x46, 0x45, 0x44, 0x46, 0x44, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 
   0x49, 0x48, 0x49, 0x47, 0x48, 0x47, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x46, 
   0x46, 0x46, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x3F, 0x3F, 0x3F, 0x3B, 0x3B, 
   0x3B, 0x39, 0x39, 0x39, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x32, 0x33, 0x32, 
   0x32, 0x32, 0x32, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 
   0x33, 0x32, 0x33, 0x34, 0x34, 0x34, 0x35, 0x36, 0x35, 0x37, 0x36, 0x37, 0x38, 0x38, 0x38, 0x38, 
   0x39, 0x38, 0x3A, 0x39, 0x3A, 0x3B, 0x3B, 0x3B, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3F, 
   0x3E, 0x3E, 0x3F, 0x3E, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x41, 0x40, 0x41, 
   0x43, 0x42, 0x43, 0x43, 0x44, 0x43, 0x46, 0x45, 0x46, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 
   0x48, 0x48, 0x4B, 0x4A, 0x4B, 0x48, 0x49, 0x48, 0x47, 0x48, 0x47, 0x47, 0x46, 0x47, 0x49, 0x4A, 
   0x49, 0x3D, 0x3D, 0x3D, 0x1B, 0x19, 0x1B, 0x05, 0x06, 0x05, 0x03, 0x04, 0x03, 0x04, 0x04, 0x04, 
   0x05, 0x06, 0x05, 0x09, 0x08, 0x09, 0x40, 0x40, 0x40, 0x16, 0x17, 0x16, 0x02, 0x01, 0x02, 0x01, 
   0x00, 0x01, 0x1D, 0x1D, 0x1D, 0x3A, 0x3C, 0x3A, 0x3A, 0x3B, 0x3A, 0x44, 0x43, 0x44, 0x41, 0x40, 
   0x41, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x40, 0x41, 
   0x40, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 
   0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x44, 0x45, 0x44, 0x44, 
   0x44, 0x44, 0x43, 0x45, 0x43, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 
   0x42, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x40, 0x41, 0x40, 
   0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3D, 0x3D, 0x3D, 0x3D, 
   0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x39, 0x3A, 0x39, 0x38, 0x39, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x39, 0x38, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3D, 0x3B, 0x3D, 0x3C, 0x3D, 0x3C, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x31, 
   0x30, 0x31, 0x31, 0x30, 0x31, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x33, 0x32, 
   0x33, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x31, 0x33, 0x30, 0x30, 0x30, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2C, 0x2E, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x30, 0x30, 0x30, 0x33, 0x33, 0x33, 0x35, 0x36, 0x35, 0x3C, 
   0x39, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x42, 0x42, 
   0x42, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x44, 0x43, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x45, 0x45, 0x45, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x44, 
   0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x3D, 
   0x3F, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 
   0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x40, 0x42, 
   0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x47, 0x46, 
   0x49, 0x4A, 0x49, 0x4A, 0x4C, 0x4A, 0x4C, 0x4D, 0x4C, 0x4C, 0x4D, 0x4C, 0x4C, 0x4D, 0x4C, 0x4D, 
   0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 0x4F, 0x4F, 0x4F, 0x4F, 0x50, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4E, 
   0x4F, 0x4D, 0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 
   0x4A, 0x4B, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 
   0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x44, 
   0x45, 0x44, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x40, 0x40, 0x40, 0x3D, 0x3E, 0x3D, 0x3B, 0x3B, 
   0x3B, 0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 
   0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2E, 0x2E, 0x2E, 0x30, 0x2F, 0x30, 
   0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x35, 0x35, 0x35, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x39, 
   0x38, 0x39, 0x39, 0x3A, 0x39, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 
   0x3D, 0x3F, 0x3E, 0x3F, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x41, 0x41, 0x41, 
   0x43, 0x42, 0x43, 0x44, 0x44, 0x44, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x48, 0x48, 0x48, 0x46, 0x46, 
   0x46, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x31, 0x31, 0x31, 0x2B, 0x2A, 0x2B, 0x2E, 0x2D, 0x2E, 
   0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x31, 0x2F, 0x31, 0x34, 0x33, 0x34, 0x23, 0x21, 0x23, 0x07, 
   0x05, 0x07, 0x08, 0x08, 0x08, 0x31, 0x32, 0x31, 0x45, 0x46, 0x45, 0x41, 0x40, 0x41, 0x3F, 0x40, 
   0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x3F, 0x41, 0x3F, 0x3D, 0x3E, 0x3D, 0x3D, 
   0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x42, 0x43, 0x42, 0x44, 0x43, 0x44, 
   0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 
   0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 0x42, 
   0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3C, 
   0x3C, 0x3C, 0x3D, 0x3B, 0x3D, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 
   0x39, 0x37, 0x38, 0x37, 0x38, 0x39, 0x38, 0x3B, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3D, 0x3C, 0x3C, 0x3E, 0x3C, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2D, 
   0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 
   0x29, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 0x34, 0x33, 0x34, 0x37, 0x36, 0x37, 0x3A, 
   0x3A, 0x3A, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3F, 0x3D, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x41, 
   0x41, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 
   0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 
   0x44, 0x45, 0x44, 0x45, 0x44, 0x46, 0x45, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x45, 0x46, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 
   0x46, 0x45, 0x46, 0x44, 0x43, 0x44, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3C, 0x3D, 
   0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 
   0x3F, 0x3E, 0x3F, 0x40, 0x3E, 0x40, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x40, 
   0x41, 0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x41, 0x42, 0x41, 0x41, 0x42, 
   0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x45, 0x44, 
   0x46, 0x46, 0x46, 0x48, 0x49, 0x48, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4B, 
   0x4B, 0x4B, 0x4C, 0x4B, 0x4C, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4F, 0x4E, 0x4D, 
   0x4E, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4A, 0x4C, 0x4A, 0x4B, 0x4C, 0x4B, 0x4A, 0x4B, 0x4A, 
   0x4A, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x47, 
   0x47, 0x47, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 
   0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x41, 0x42, 0x3F, 0x3F, 0x3F, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 
   0x3B, 0x38, 0x39, 0x38, 0x37, 0x37, 0x37, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 
   0x32, 0x31, 0x32, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2E, 0x2C, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x30, 0x2F, 0x30, 
   0x30, 0x31, 0x30, 0x32, 0x33, 0x32, 0x35, 0x34, 0x35, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x37, 
   0x38, 0x37, 0x39, 0x3A, 0x39, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 
   0x3D, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x42, 0x40, 0x42, 
   0x43, 0x42, 0x43, 0x44, 0x44, 0x44, 0x46, 0x45, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 
   0x47, 0x46, 0x46, 0x47, 0x46, 0x49, 0x48, 0x49, 0x49, 0x49, 0x49, 0x47, 0x48, 0x47, 0x46, 0x46, 
   0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x43, 0x44, 0x43, 0x44, 0x42, 0x44, 0x42, 0x42, 0x42, 
   0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3A, 
   0x39, 0x3A, 0x38, 0x38, 0x38, 0x3B, 0x3A, 0x3B, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 
   0x40, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 
   0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 0x40, 0x41, 0x40, 0x3D, 0x3E, 0x3D, 0x3D, 
   0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 
   0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x40, 
   0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x3E, 
   0x40, 0x3E, 0x3F, 0x3E, 0x40, 0x3F, 0x40, 0x3E, 0x3F, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 
   0x40, 0x3F, 0x40, 0x40, 0x3F, 0x40, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x3A, 
   0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3B, 0x3A, 0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 
   0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x2F, 0x2E, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 
   0x32, 0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2D, 0x2E, 0x2D, 0x2B, 
   0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x29, 0x2B, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 
   0x29, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 
   0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x33, 0x33, 0x33, 0x36, 0x36, 0x36, 0x3A, 
   0x39, 0x3A, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3F, 0x3D, 0x3F, 0x40, 0x40, 0x40, 0x42, 0x42, 
   0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x44, 0x42, 0x44, 0x43, 0x44, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 
   0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x47, 0x46, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 
   0x46, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x46, 0x46, 0x46, 
   0x45, 0x45, 0x45, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3E, 0x3F, 0x3E, 0x3C, 0x3D, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x3F, 0x41, 0x3F, 0x40, 0x41, 0x40, 0x40, 
   0x41, 0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x3F, 0x41, 
   0x3F, 0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x44, 0x43, 0x44, 
   0x44, 0x46, 0x44, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4C, 
   0x4C, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 
   0x4A, 0x49, 0x4A, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x45, 0x47, 0x45, 0x46, 0x46, 0x46, 0x45, 
   0x46, 0x45, 0x46, 0x45, 0x46, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 0x44, 0x42, 0x44, 0x43, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x44, 0x43, 0x44, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x41, 
   0x42, 0x41, 0x3F, 0x41, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3D, 0x40, 0x3D, 0x3C, 0x3D, 0x3B, 0x39, 
   0x3B, 0x38, 0x38, 0x38, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x34, 0x35, 
   0x32, 0x33, 0x32, 0x2F, 0x30, 0x2F, 0x2E, 0x2E, 0x2E, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 
   0x30, 0x30, 0x30, 0x32, 0x33, 0x32, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x37, 
   0x38, 0x37, 0x39, 0x39, 0x39, 0x3C, 0x3A, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 
   0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x41, 0x41, 0x41, 
   0x43, 0x42, 0x43, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x46, 0x46, 0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x46, 0x46, 
   0x46, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x41, 0x42, 0x41, 
   0x40, 0x40, 0x40, 0x3E, 0x3E, 0x3E, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3E, 0x3D, 0x3F, 
   0x3E, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x3F, 0x41, 
   0x3F, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x3F, 0x41, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3D, 0x3F, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 
   0x3C, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3E, 0x40, 0x3E, 
   0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x3F, 0x40, 0x3F, 0x3F, 
   0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 
   0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 
   0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3C, 0x3E, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 
   0x3C, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3D, 0x3C, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 
   0x3F, 0x3F, 0x3F, 0x40, 0x3E, 0x40, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x2F, 
   0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x32, 
   0x31, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x32, 0x33, 0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2D, 0x2E, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2B, 0x2A, 0x2B, 0x29, 0x2A, 0x29, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x29, 0x29, 
   0x29, 0x2B, 0x2A, 0x2B, 0x29, 0x2A, 0x29, 0x2C, 0x2B, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 
   0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x35, 0x36, 0x35, 0x37, 
   0x38, 0x37, 0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 0x3C, 0x3F, 0x3E, 0x3F, 0x40, 0x41, 0x40, 0x41, 0x41, 
   0x41, 0x44, 0x42, 0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 
   0x43, 0x42, 0x43, 0x43, 0x44, 0x43, 0x42, 0x43, 0x42, 0x45, 0x44, 0x45, 0x45, 0x46, 0x45, 0x45, 
   0x47, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 
   0x47, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x48, 
   0x45, 0x45, 0x45, 0x44, 0x43, 0x44, 0x42, 0x42, 0x42, 0x44, 0x42, 0x44, 0x42, 0x43, 0x42, 0x42, 
   0x42, 0x42, 0x41, 0x40, 0x41, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3D, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3E, 0x3C, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x40, 0x41, 0x42, 0x40, 0x42, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 
   0x40, 0x40, 0x3F, 0x40, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 
   0x48, 0x48, 0x4A, 0x4B, 0x4A, 0x4A, 0x4C, 0x4A, 0x4B, 0x4C, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x4A, 0x49, 0x4A, 
   0x49, 0x48, 0x49, 0x48, 0x47, 0x48, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 
   0x44, 0x44, 0x44, 0x45, 0x44, 0x42, 0x44, 0x42, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x44, 0x45, 
   0x44, 0x44, 0x45, 0x44, 0x42, 0x44, 0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x40, 
   0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3C, 0x3B, 0x3C, 0x3A, 0x39, 
   0x3A, 0x38, 0x37, 0x38, 0x36, 0x37, 0x36, 0x35, 0x37, 0x35, 0x35, 0x36, 0x35, 0x34, 0x35, 0x34, 
   0x32, 0x33, 0x32, 0x31, 0x31, 0x31, 0x2F, 0x2E, 0x2F, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 
   0x2E, 0x2F, 0x2D, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2D, 0x2F, 0x2D, 0x2E, 0x2D, 0x30, 0x2F, 0x30, 
   0x2F, 0x31, 0x2F, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x36, 0x35, 0x36, 0x37, 
   0x37, 0x37, 0x39, 0x39, 0x39, 0x39, 0x3B, 0x39, 0x3D, 0x3B, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 
   0x3D, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x42, 0x40, 0x42, 
   0x42, 0x42, 0x42, 0x43, 0x44, 0x43, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x46, 0x46, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x47, 0x46, 0x47, 0x45, 0x46, 
   0x45, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x44, 0x43, 0x44, 0x41, 0x41, 0x41, 
   0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 
   0x3E, 0x3D, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x40, 0x41, 0x42, 0x41, 0x41, 0x42, 
   0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x40, 0x42, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x3F, 0x3F, 0x3F, 0x3E, 
   0x3E, 0x3E, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3C, 
   0x3D, 0x3E, 0x3C, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 
   0x3F, 0x40, 0x3F, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x3E, 0x3E, 0x3E, 0x3E, 
   0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3C, 
   0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3D, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3D, 0x3C, 
   0x3D, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x40, 0x3E, 0x40, 0x3F, 0x3E, 0x3F, 0x2E, 0x2D, 0x2E, 0x2F, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 
   0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x32, 
   0x31, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x32, 0x33, 0x32, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2F, 0x2D, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2B, 0x2C, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x29, 0x29, 
   0x29, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x33, 0x32, 0x33, 0x33, 0x34, 0x33, 0x35, 0x36, 0x35, 0x38, 
   0x38, 0x38, 0x39, 0x39, 0x39, 0x3C, 0x3C, 0x3C, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x42, 0x42, 
   0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 
   0x42, 0x44, 0x42, 0x42, 0x43, 0x42, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x45, 0x46, 0x45, 0x46, 
   0x46, 0x46, 0x47, 0x46, 0x47, 0x46, 0x47, 0x46, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 
   0x48, 0x49, 0x4A, 0x49, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 
   0x45, 0x45, 0x45, 0x43, 0x44, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x41, 0x42, 0x40, 0x3F, 0x40, 0x3E, 0x40, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3E, 0x3D, 0x3E, 0x3F, 0x3E, 0x3F, 0x40, 0x3F, 
   0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x3F, 
   0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x3E, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x44, 0x44, 0x47, 0x46, 0x47, 0x48, 
   0x47, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 
   0x4A, 0x47, 0x49, 0x47, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 
   0x48, 0x46, 0x48, 0x46, 0x46, 0x46, 0x45, 0x47, 0x45, 0x46, 0x45, 0x46, 0x42, 0x44, 0x42, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3C, 0x3E, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 
   0x39, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 
   0x33, 0x33, 0x33, 0x31, 0x30, 0x31, 0x2E, 0x2E, 0x2E, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 
   0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 
   0x30, 0x30, 0x30, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x37, 
   0x36, 0x37, 0x39, 0x39, 0x39, 0x3C, 0x3B, 0x3C, 0x3D, 0x3C, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 
   0x3D, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 0x3F, 
   0x41, 0x42, 0x41, 0x43, 0x44, 0x43, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 
   0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x45, 0x44, 
   0x45, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x40, 0x41, 
   0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3F, 0x3E, 0x3F, 0x3E, 
   0x3F, 0x3E, 0x3E, 0x3F, 0x3E, 0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x43, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x42, 0x42, 0x42, 0x40, 0x42, 0x40, 0x40, 0x41, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 
   0x3F, 0x3E, 0x3D, 0x3D, 0x3D, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 
   0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 
   0x3E, 0x3E, 0x3E, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3D, 0x3C, 0x3D, 0x3C, 
   0x3B, 0x3C, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x39, 0x3B, 0x39, 0x3B, 0x3A, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3B, 0x3C, 0x39, 0x3B, 0x39, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3D, 0x3B, 0x3D, 0x3E, 0x3E, 
   0x3E, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 
   0x40, 0x3F, 0x40, 0x3E, 0x3E, 0x3E, 0x2D, 0x2C, 0x2D, 0x2E, 0x2D, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x31, 0x2F, 0x31, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x31, 0x2F, 0x31, 0x31, 0x31, 
   0x31, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x33, 0x32, 0x33, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2A, 
   0x2B, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x29, 0x29, 
   0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2C, 0x2B, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 
   0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x34, 0x33, 0x36, 0x36, 0x36, 0x38, 
   0x37, 0x38, 0x3B, 0x39, 0x3B, 0x3D, 0x3C, 0x3D, 0x40, 0x40, 0x40, 0x42, 0x40, 0x42, 0x42, 0x42, 
   0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 
   0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x47, 0x46, 0x47, 0x46, 
   0x47, 0x46, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x49, 0x49, 
   0x49, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x49, 0x4A, 0x49, 0x4A, 0x48, 0x4A, 0x47, 0x47, 0x47, 
   0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x44, 0x42, 0x44, 0x42, 0x41, 0x42, 0x40, 
   0x40, 0x40, 0x40, 0x3F, 0x40, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3E, 0x3D, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x42, 0x40, 0x42, 0x41, 0x40, 0x41, 0x40, 0x41, 0x40, 0x40, 
   0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 
   0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x40, 0x40, 0x40, 0x3F, 0x41, 0x3F, 0x41, 0x41, 0x41, 
   0x41, 0x40, 0x41, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x44, 0x43, 0x44, 0x45, 0x46, 0x45, 0x48, 
   0x48, 0x48, 0x47, 0x49, 0x47, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x4A, 0x48, 0x48, 
   0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x46, 0x46, 0x46, 
   0x47, 0x46, 0x47, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x43, 
   0x42, 0x43, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x44, 0x44, 
   0x44, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 
   0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x3F, 0x3E, 0x3F, 0x3E, 
   0x3D, 0x3E, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x37, 0x38, 
   0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x36, 0x35, 0x36, 0x35, 0x34, 0x35, 
   0x32, 0x32, 0x32, 0x31, 0x30, 0x31, 0x2E, 0x2E, 0x2E, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 
   0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x31, 0x2F, 0x31, 
   0x2F, 0x31, 0x2F, 0x32, 0x33, 0x32, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x37, 
   0x37, 0x37, 0x39, 0x38, 0x39, 0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 
   0x3E, 0x3E, 0x3F, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3F, 0x3E, 0x3F, 
   0x40, 0x41, 0x40, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x41, 0x42, 0x41, 0x3F, 0x40, 0x3F, 
   0x3E, 0x3E, 0x3E, 0x3D, 0x3C, 0x3D, 0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3F, 
   0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x43, 0x41, 0x43, 0x42, 0x43, 
   0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 
   0x3F, 0x3F, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3A, 0x3B, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 
   0x3B, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x3C, 0x3C, 0x3C, 
   0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3B, 0x3D, 0x3B, 0x3C, 0x3C, 0x3C, 0x3A, 
   0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 0x3C, 
   0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3D, 0x3D, 0x3D, 0x3E, 0x40, 
   0x3E, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 
   0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 
   0x31, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 
   0x32, 0x33, 0x32, 0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2C, 0x2D, 0x2C, 0x2A, 0x2C, 0x2B, 0x2A, 0x2B, 0x29, 0x2A, 0x29, 0x29, 0x2A, 0x29, 0x2B, 0x29, 
   0x2B, 0x29, 0x2A, 0x29, 0x2B, 0x2A, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2E, 0x2D, 
   0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x34, 0x33, 0x34, 0x36, 0x36, 0x36, 0x39, 
   0x38, 0x39, 0x3B, 0x3A, 0x3B, 0x3D, 0x3D, 0x3D, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x42, 0x42, 
   0x42, 0x42, 0x43, 0x42, 0x43, 0x44, 0x43, 0x42, 0x44, 0x42, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 
   0x45, 0x43, 0x45, 0x42, 0x43, 0x42, 0x44, 0x42, 0x44, 0x45, 0x44, 0x45, 0x46, 0x46, 0x46, 0x46, 
   0x46, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x47, 0x48, 0x47, 0x49, 0x48, 0x49, 0x49, 0x49, 
   0x49, 0x49, 0x4B, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x48, 0x48, 0x48, 0x47, 0x46, 0x47, 
   0x46, 0x45, 0x46, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x3F, 
   0x40, 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x3D, 0x3F, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3B, 
   0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 0x3E, 0x3F, 
   0x40, 0x3E, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x3E, 0x40, 0x40, 
   0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3F, 0x3D, 0x3F, 0x3C, 0x3E, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 
   0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3E, 0x3F, 0x3E, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 
   0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x41, 0x41, 0x41, 0x43, 0x42, 0x43, 0x44, 0x44, 0x44, 0x46, 
   0x47, 0x46, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x47, 0x47, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x45, 0x47, 0x45, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x42, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x3F, 0x41, 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x3E, 0x3F, 0x3C, 
   0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x39, 0x39, 0x39, 0x37, 0x37, 
   0x37, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 
   0x32, 0x32, 0x32, 0x2E, 0x31, 0x2E, 0x2E, 0x2E, 0x2E, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2E, 0x31, 0x2E, 0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 
   0x36, 0x35, 0x38, 0x38, 0x38, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 
   0x3D, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3E, 0x3C, 0x3E, 0x3D, 0x3E, 0x3F, 0x3E, 0x3F, 
   0x40, 0x42, 0x40, 0x42, 0x43, 0x42, 0x45, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x44, 0x43, 
   0x44, 0x42, 0x44, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x40, 0x40, 0x40, 0x3E, 0x3F, 0x3E, 
   0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x3C, 0x3B, 0x3C, 0x3B, 0x3C, 0x3D, 0x3C, 0x3E, 0x3E, 0x3E, 0x3F, 
   0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x42, 0x40, 0x42, 0x43, 0x42, 0x42, 0x43, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x3F, 
   0x3E, 0x3F, 0x3D, 0x3D, 0x3D, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 
   0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 
   0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3C, 0x3C, 0x3C, 0x3A, 0x3A, 0x3A, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x39, 0x38, 
   0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 
   0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 
   0x3F, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 
   0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x2B, 0x2C, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x30, 0x30, 
   0x30, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 
   0x32, 0x33, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2D, 0x2E, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x32, 0x31, 0x34, 0x35, 0x34, 0x36, 0x36, 0x36, 0x37, 
   0x38, 0x37, 0x3B, 0x3B, 0x3B, 0x3D, 0x3E, 0x3D, 0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 0x42, 0x43, 
   0x42, 0x43, 0x43, 0x43, 0x42, 0x44, 0x42, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 
   0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x42, 0x44, 0x42, 0x44, 0x45, 0x44, 0x45, 0x46, 0x45, 0x46, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 
   0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x46, 0x46, 0x46, 
   0x45, 0x45, 0x45, 0x44, 0x43, 0x44, 0x42, 0x42, 0x42, 0x40, 0x43, 0x40, 0x42, 0x41, 0x42, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 
   0x3C, 0x3C, 0x3B, 0x3C, 0x39, 0x3B, 0x39, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3F, 0x3D, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3F, 
   0x3D, 0x3F, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 
   0x3C, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 
   0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x44, 
   0x45, 0x44, 0x47, 0x46, 0x47, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 
   0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x44, 0x46, 0x44, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x43, 0x44, 0x42, 0x43, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x44, 0x43, 0x43, 0x43, 
   0x43, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x39, 0x3B, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x37, 0x37, 
   0x37, 0x37, 0x36, 0x37, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x30, 0x30, 0x30, 0x2E, 0x2F, 0x2E, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2D, 0x2B, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 
   0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 
   0x2F, 0x2F, 0x2F, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x34, 0x35, 0x34, 0x35, 
   0x35, 0x35, 0x36, 0x36, 0x36, 0x39, 0x38, 0x39, 0x38, 0x3A, 0x38, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 
   0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x43, 
   0x44, 0x43, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x40, 0x42, 0x40, 0x3F, 0x3F, 0x3F, 0x3D, 0x3F, 0x3D, 
   0x3E, 0x3C, 0x3E, 0x3D, 0x3C, 0x3D, 0x3D, 0x3C, 0x3D, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 0x40, 0x41, 
   0x40, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 
   0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3D, 0x3D, 0x3D, 0x3B, 0x3C, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 
   0x3A, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x38, 0x3A, 0x38, 0x39, 0x38, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x37, 0x39, 0x37, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 0x3C, 0x3F, 0x3C, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x2D, 0x2A, 0x2D, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 
   0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x31, 0x30, 
   0x31, 0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x2F, 0x2E, 0x2F, 0x2E, 
   0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2D, 0x2B, 0x2D, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x35, 0x34, 0x35, 0x37, 0x37, 0x37, 0x39, 
   0x39, 0x39, 0x3C, 0x3B, 0x3C, 0x3E, 0x3E, 0x3E, 0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x42, 0x43, 
   0x42, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x43, 0x45, 0x43, 0x46, 0x44, 0x46, 0x44, 0x45, 0x44, 0x46, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x46, 0x46, 
   0x46, 0x45, 0x46, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x3E, 0x40, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 
   0x3B, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3B, 0x3C, 0x3D, 
   0x3B, 0x3D, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3D, 0x3B, 0x3D, 0x3C, 0x3B, 0x3C, 0x3D, 0x3C, 
   0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3F, 0x3E, 0x3F, 
   0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x43, 
   0x43, 0x43, 0x44, 0x44, 0x44, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x46, 0x47, 
   0x46, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x44, 0x45, 0x44, 
   0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 
   0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x3F, 0x3F, 0x3F, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3A, 
   0x3B, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x34, 0x36, 0x34, 0x35, 0x34, 0x35, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 
   0x31, 0x32, 0x31, 0x2F, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 
   0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x33, 0x32, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 
   0x36, 0x35, 0x35, 0x36, 0x35, 0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x38, 0x37, 0x38, 0x39, 0x38, 
   0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3B, 0x3A, 0x3D, 0x3B, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 
   0x3F, 0x3E, 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x42, 0x41, 0x42, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 
   0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x40, 0x40, 0x40, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x40, 0x3F, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x3E, 0x40, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x41, 
   0x40, 0x42, 0x41, 0x42, 0x42, 0x41, 0x42, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 
   0x3E, 0x3F, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 
   0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x39, 
   0x39, 0x39, 0x37, 0x38, 0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x37, 0x36, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x3A, 0x38, 0x3A, 0x39, 0x39, 0x39, 
   0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 
   0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x29, 0x2A, 0x29, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 
   0x30, 0x32, 0x31, 0x32, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 
   0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x30, 0x31, 0x30, 0x2F, 
   0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x30, 0x2F, 0x30, 
   0x30, 0x31, 0x30, 0x32, 0x32, 0x32, 0x34, 0x33, 0x34, 0x37, 0x36, 0x37, 0x38, 0x38, 0x38, 0x3B, 
   0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3D, 0x3E, 0x3D, 0x40, 0x40, 0x40, 0x43, 0x42, 0x43, 0x42, 0x43, 
   0x42, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 
   0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x45, 0x46, 0x45, 
   0x46, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x47, 
   0x47, 0x48, 0x47, 0x48, 0x47, 0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 
   0x45, 0x45, 0x45, 0x44, 0x43, 0x44, 0x42, 0x43, 0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3B, 0x3B, 
   0x3B, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x3A, 0x39, 0x3A, 0x3A, 0x39, 0x3A, 
   0x3A, 0x3B, 0x3A, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x38, 
   0x39, 0x38, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 
   0x3C, 0x3E, 0x3D, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x41, 0x3F, 0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 0x41, 
   0x41, 0x41, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x45, 0x44, 0x45, 0x44, 0x45, 
   0x44, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x42, 0x43, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 
   0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x3E, 0x3F, 0x3E, 0x3B, 0x3D, 0x3B, 0x39, 0x3B, 0x39, 0x38, 
   0x38, 0x38, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x35, 0x36, 0x35, 0x34, 
   0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x31, 0x33, 0x31, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 
   0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 
   0x2F, 0x2F, 0x2F, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x33, 
   0x34, 0x33, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x35, 0x35, 0x35, 0x36, 0x36, 
   0x36, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 
   0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x40, 0x3E, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 0x42, 
   0x41, 0x44, 0x42, 0x44, 0x43, 0x41, 0x43, 0x3F, 0x3F, 0x3F, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 
   0x3C, 0x3E, 0x3C, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x40, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 
   0x3F, 0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 
   0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3D, 0x3F, 0x3C, 0x3D, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3A, 0x3B, 0x38, 0x39, 0x38, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 0x37, 0x38, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 
   0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x37, 
   0x38, 0x37, 0x37, 0x37, 0x37, 0x35, 0x35, 0x35, 0x33, 0x35, 0x33, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 
   0x38, 0x39, 0x38, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 
   0x3B, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3C, 0x3D, 0x3D, 0x3E, 0x3D, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 
   0x43, 0x42, 0x43, 0x43, 0x44, 0x43, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2D, 0x2C, 0x2D, 0x2E, 
   0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 
   0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 
   0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x36, 0x37, 0x36, 0x39, 0x39, 0x39, 0x3A, 
   0x3B, 0x3A, 0x3C, 0x3C, 0x3C, 0x40, 0x3E, 0x40, 0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 0x42, 0x43, 
   0x42, 0x44, 0x44, 0x44, 0x44, 0x46, 0x44, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x48, 0x47, 0x48, 
   0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x46, 0x46, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x47, 0x48, 0x48, 0x47, 
   0x48, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 
   0x46, 0x45, 0x46, 0x43, 0x44, 0x43, 0x42, 0x43, 0x42, 0x41, 0x42, 0x41, 0x40, 0x41, 0x40, 0x40, 
   0x40, 0x40, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 
   0x3B, 0x39, 0x39, 0x39, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 
   0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x38, 0x39, 0x39, 
   0x38, 0x39, 0x39, 0x38, 0x39, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3E, 0x3D, 
   0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 
   0x3F, 0x3E, 0x3F, 0x41, 0x3E, 0x41, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x3F, 0x40, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 0x43, 0x43, 
   0x43, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x46, 0x44, 0x46, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 
   0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 0x40, 0x41, 
   0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x40, 0x3E, 0x40, 0x3C, 0x3C, 0x3C, 0x38, 0x3A, 0x38, 0x39, 
   0x39, 0x39, 0x38, 0x37, 0x38, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 
   0x35, 0x35, 0x34, 0x35, 0x33, 0x34, 0x33, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2B, 0x2D, 
   0x2F, 0x2E, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x33, 0x34, 0x33, 0x35, 0x34, 
   0x35, 0x35, 0x35, 0x35, 0x38, 0x37, 0x38, 0x3B, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 
   0x3D, 0x3B, 0x3D, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 
   0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x40, 0x40, 0x40, 0x3F, 0x41, 
   0x3F, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x3E, 0x3F, 0x3E, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3D, 0x3E, 0x3D, 0x3D, 0x3E, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x40, 0x3F, 0x40, 0x40, 
   0x3E, 0x40, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x40, 
   0x3F, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 
   0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x38, 0x38, 
   0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x37, 
   0x37, 0x37, 0x35, 0x36, 0x35, 0x33, 0x35, 0x33, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x35, 0x35, 
   0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x3C, 0x3B, 0x3C, 0x3B, 
   0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3F, 0x40, 
   0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 
   0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x2A, 0x28, 0x2A, 0x2B, 0x2A, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 
   0x31, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x31, 
   0x33, 0x31, 0x32, 0x32, 0x32, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 
   0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x33, 0x31, 
   0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x38, 0x38, 0x38, 0x39, 0x3A, 0x39, 0x3C, 
   0x3B, 0x3C, 0x3D, 0x3C, 0x3D, 0x3E, 0x3E, 0x3E, 0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x43, 0x45, 0x43, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 
   0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x46, 0x48, 0x46, 0x48, 0x46, 0x48, 0x46, 0x47, 0x46, 0x46, 
   0x47, 0x46, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x46, 0x48, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x44, 0x47, 0x44, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 
   0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x40, 0x3E, 0x40, 0x3D, 0x3C, 0x3D, 0x3B, 0x3B, 
   0x3B, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 
   0x37, 0x38, 0x37, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 
   0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 0x3A, 0x38, 0x3C, 0x3B, 0x3C, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 
   0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3E, 
   0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x42, 0x41, 
   0x42, 0x42, 0x42, 0x42, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x40, 0x42, 0x40, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3C, 0x3B, 0x3C, 0x39, 0x3A, 0x39, 0x37, 
   0x38, 0x37, 0x37, 0x36, 0x37, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x2D, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2C, 0x2C, 0x2C, 
   0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x32, 0x33, 0x32, 0x32, 
   0x33, 0x32, 0x33, 0x31, 0x33, 0x32, 0x30, 0x32, 0x30, 0x31, 0x30, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x39, 0x38, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 
   0x3A, 0x3B, 0x3A, 0x3A, 0x3B, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 
   0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3F, 0x3F, 0x3F, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x3F, 0x3E, 0x3F, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3D, 0x3F, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 0x3E, 0x3D, 0x3E, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 
   0x40, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 0x44, 0x42, 0x44, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3D, 0x3D, 0x3D, 0x3A, 
   0x3C, 0x3A, 0x3B, 0x3B, 0x3B, 0x3A, 0x39, 0x3A, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 0x37, 
   0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 
   0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 
   0x37, 0x36, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 
   0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x3B, 0x3A, 0x3B, 0x3C, 
   0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3F, 0x3D, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x44, 0x42, 0x44, 0x42, 0x43, 0x42, 
   0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x29, 0x28, 0x29, 0x2A, 0x29, 0x2A, 0x2B, 0x2C, 0x2B, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 
   0x31, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x30, 0x30, 0x30, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 
   0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x3B, 0x3B, 0x3B, 0x3E, 
   0x3B, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x40, 0x3F, 0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 
   0x42, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x47, 0x48, 0x47, 0x48, 0x49, 0x48, 0x4A, 0x4A, 0x4A, 
   0x49, 0x4A, 0x49, 0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 
   0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 
   0x48, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 
   0x46, 0x44, 0x46, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x40, 
   0x3F, 0x40, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3F, 0x3D, 0x3D, 0x3D, 0x3D, 0x3B, 0x3A, 
   0x3B, 0x38, 0x39, 0x38, 0x38, 0x37, 0x38, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 
   0x36, 0x36, 0x36, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x37, 0x38, 0x37, 
   0x38, 0x37, 0x38, 0x38, 0x38, 0x39, 0x3A, 0x39, 0x3C, 0x3A, 0x3C, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 
   0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 
   0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 
   0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3B, 0x3D, 0x3E, 0x3C, 0x3E, 0x40, 0x3F, 
   0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x40, 0x42, 0x40, 0x40, 0x42, 0x40, 
   0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x42, 
   0x42, 0x42, 0x40, 0x42, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 0x40, 0x41, 
   0x40, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 
   0x3D, 0x3F, 0x3D, 0x3E, 0x3E, 0x3E, 0x3C, 0x3E, 0x3C, 0x3A, 0x3B, 0x3A, 0x39, 0x39, 0x39, 0x38, 
   0x38, 0x38, 0x37, 0x36, 0x37, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x34, 0x33, 
   0x34, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x32, 0x31, 0x32, 
   0x31, 0x32, 0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2E, 0x30, 0x2E, 0x2E, 0x2E, 0x2D, 
   0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2C, 0x2B, 0x2C, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2C, 0x2C, 0x2C, 
   0x2E, 0x2D, 0x2E, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x31, 0x32, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x32, 
   0x31, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x37, 0x36, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x3A, 
   0x39, 0x3A, 0x3A, 0x39, 0x3A, 0x3A, 0x3B, 0x3A, 0x3C, 0x3B, 0x3C, 0x3E, 0x3D, 0x3E, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3D, 0x3C, 0x3D, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3E, 0x3B, 0x3E, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 
   0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3E, 0x3C, 0x3E, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 0x3F, 0x41, 0x41, 
   0x41, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x3E, 0x3E, 0x3E, 0x3C, 0x3B, 0x3C, 0x39, 
   0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x37, 0x37, 
   0x37, 0x37, 0x36, 0x37, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x37, 0x36, 0x37, 
   0x37, 0x37, 0x37, 0x35, 0x37, 0x35, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 
   0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x37, 0x36, 0x37, 
   0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3F, 
   0x3D, 0x3E, 0x3F, 0x3E, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x43, 0x42, 0x43, 0x43, 0x44, 0x43, 
   0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2B, 
   0x2C, 0x2B, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x31, 0x31, 
   0x31, 0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x33, 0x35, 0x33, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x33, 0x34, 0x33, 0x33, 0x32, 0x33, 0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x35, 0x35, 0x35, 
   0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x38, 0x38, 0x38, 0x3B, 0x3A, 0x3B, 0x3E, 0x3C, 0x3E, 0x3C, 
   0x3C, 0x3C, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x41, 0x3F, 0x42, 0x42, 
   0x42, 0x43, 0x45, 0x43, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x4A, 0x49, 0x4A, 0x4A, 0x4B, 0x4A, 
   0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x48, 0x4A, 0x48, 0x49, 0x48, 0x49, 0x48, 
   0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x48, 
   0x48, 0x48, 0x46, 0x48, 0x46, 0x46, 0x46, 0x44, 0x46, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x3E, 0x3F, 0x3E, 0x3F, 
   0x3F, 0x3F, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3D, 0x3C, 0x3D, 0x3A, 0x3A, 
   0x3A, 0x38, 0x38, 0x38, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x34, 0x33, 0x34, 0x34, 0x35, 0x34, 
   0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x38, 0x37, 0x38, 0x38, 0x38, 0x39, 0x3A, 0x39, 0x3C, 0x3A, 0x3C, 0x3F, 0x3D, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 
   0x3F, 0x3E, 0x3F, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3B, 0x3D, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3C, 0x3C, 
   0x3C, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x3E, 0x40, 0x3E, 
   0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3E, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 
   0x41, 0x41, 0x3F, 0x41, 0x3F, 0x3D, 0x3F, 0x3D, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x40, 0x41, 
   0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3F, 0x40, 0x3F, 0x3E, 0x3E, 0x3E, 
   0x3F, 0x3D, 0x3F, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3B, 0x3C, 0x39, 0x3A, 0x39, 0x38, 
   0x38, 0x38, 0x37, 0x37, 0x37, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x34, 0x33, 
   0x34, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 
   0x31, 0x32, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2C, 0x2E, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x29, 0x2B, 0x2C, 0x2C, 0x2C, 
   0x2B, 0x2D, 0x2B, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x30, 
   0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 
   0x31, 0x33, 0x33, 0x33, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 
   0x38, 0x3A, 0x38, 0x38, 0x3A, 0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x3B, 0x3B, 0x3B, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 
   0x3D, 0x3F, 0x3F, 0x3F, 0x3D, 0x3E, 0x3D, 0x3C, 0x3C, 0x3C, 0x3D, 0x3B, 0x3D, 0x3B, 0x3B, 0x3B, 
   0x3C, 0x3A, 0x3C, 0x3D, 0x3B, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 0x3F, 0x41, 0x41, 
   0x41, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x3E, 0x3F, 0x3E, 0x3C, 0x3E, 0x3C, 0x3B, 0x3B, 0x3B, 0x3A, 
   0x3A, 0x3A, 0x38, 0x38, 0x38, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 
   0x36, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x31, 
   0x32, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x33, 0x34, 0x33, 0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 
   0x3E, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x46, 0x43, 0x46, 
   0x45, 0x45, 0x45, 0x46, 0x44, 0x46, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2D, 
   0x2A, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x30, 0x2F, 0x30, 0x30, 0x31, 
   0x30, 0x33, 0x32, 0x33, 0x33, 0x34, 0x33, 0x35, 0x33, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x35, 0x34, 0x35, 0x32, 0x33, 0x32, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x35, 
   0x33, 0x35, 0x33, 0x33, 0x33, 0x32, 0x31, 0x32, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 
   0x31, 0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 0x31, 0x33, 0x31, 0x34, 0x34, 0x34, 0x36, 0x36, 0x36, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x3B, 0x3A, 0x3B, 0x3B, 0x3C, 0x3B, 0x3D, 
   0x3C, 0x3D, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3F, 0x3E, 0x41, 0x41, 0x41, 0x42, 0x43, 
   0x42, 0x45, 0x45, 0x45, 0x47, 0x47, 0x47, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 0x4A, 0x48, 
   0x49, 0x48, 0x48, 0x49, 0x48, 0x4A, 0x49, 0x4A, 0x48, 0x4B, 0x48, 0x4A, 0x4A, 0x4A, 0x48, 0x48, 
   0x48, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 
   0x42, 0x43, 0x42, 0x41, 0x42, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3D, 
   0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x3B, 0x3C, 0x3B, 0x39, 0x3A, 
   0x39, 0x38, 0x37, 0x38, 0x37, 0x36, 0x37, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 
   0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x37, 0x35, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x38, 0x38, 0x38, 0x39, 0x3A, 0x39, 0x3C, 0x3B, 0x3C, 0x3E, 0x3D, 0x3E, 0x40, 0x3F, 
   0x40, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x3F, 0x40, 0x3F, 
   0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x39, 
   0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x3B, 
   0x3A, 0x3C, 0x3C, 0x3C, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3F, 0x3D, 
   0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3D, 0x3E, 0x3D, 0x3D, 0x3E, 0x3D, 0x40, 0x41, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x3F, 0x40, 0x40, 0x3D, 0x40, 0x3D, 0x3E, 0x3D, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 
   0x40, 0x3F, 0x40, 0x3F, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x40, 0x3E, 0x40, 
   0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3D, 0x3C, 0x3D, 0x3A, 0x3B, 0x3A, 0x39, 0x39, 0x39, 0x37, 
   0x38, 0x37, 0x37, 0x36, 0x37, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x33, 0x34, 0x33, 0x34, 0x34, 
   0x34, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 
   0x32, 0x32, 0x32, 0x30, 0x31, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x2E, 0x2E, 0x2E, 0x2C, 
   0x2E, 0x2C, 0x2E, 0x2C, 0x2E, 0x2C, 0x2C, 0x2C, 0x2A, 0x2B, 0x2A, 0x2A, 0x2B, 0x2A, 0x2A, 0x29, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2B, 0x2C, 0x2B, 
   0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 
   0x2F, 0x2F, 0x30, 0x30, 0x30, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 
   0x30, 0x33, 0x32, 0x33, 0x33, 0x34, 0x33, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x38, 0x37, 0x38, 
   0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x36, 0x36, 0x36, 0x36, 
   0x37, 0x36, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x3A, 0x3B, 0x3A, 0x3E, 0x3D, 
   0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3C, 0x3B, 0x3C, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3D, 0x3D, 0x3D, 0x3F, 0x3E, 0x3F, 0x40, 0x40, 
   0x40, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 
   0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x40, 0x3F, 0x40, 0x3B, 0x3C, 0x3B, 0x39, 0x3B, 0x39, 0x3A, 
   0x39, 0x3A, 0x38, 0x37, 0x38, 0x37, 0x35, 0x37, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x35, 0x34, 0x35, 0x33, 0x35, 0x33, 0x35, 
   0x35, 0x35, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 
   0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x37, 0x38, 0x37, 0x3A, 0x39, 0x3A, 0x3A, 
   0x3B, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 
   0x3E, 0x3F, 0x3F, 0x3F, 0x40, 0x41, 0x40, 0x43, 0x42, 0x43, 0x44, 0x43, 0x44, 0x44, 0x45, 0x44, 
   0x46, 0x46, 0x46, 0x44, 0x46, 0x44, 0x27, 0x26, 0x27, 0x28, 0x27, 0x28, 0x2A, 0x29, 0x2A, 0x2B, 
   0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 
   0x30, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x33, 
   0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 
   0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 
   0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x39, 0x3A, 0x39, 0x3A, 0x3B, 0x3A, 0x3D, 0x3B, 0x3D, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3E, 0x3C, 0x3C, 0x3E, 0x3C, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x42, 0x42, 
   0x42, 0x43, 0x44, 0x43, 0x47, 0x47, 0x47, 0x49, 0x49, 0x49, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4B, 0x4A, 0x48, 
   0x49, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 0x48, 
   0x49, 0x46, 0x47, 0x46, 0x46, 0x45, 0x46, 0x44, 0x44, 0x44, 0x46, 0x44, 0x46, 0x44, 0x44, 0x44, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3D, 
   0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3A, 0x3B, 0x39, 0x39, 
   0x39, 0x38, 0x37, 0x38, 0x35, 0x36, 0x35, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 
   0x33, 0x34, 0x33, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 
   0x36, 0x36, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x3B, 0x3B, 0x3B, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 
   0x3E, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 
   0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x38, 0x3A, 
   0x38, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 
   0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3E, 0x3D, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3E, 0x3F, 0x40, 0x3E, 0x40, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3E, 0x3F, 0x3E, 
   0x3F, 0x3D, 0x3F, 0x3D, 0x3E, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x39, 0x3A, 0x39, 0x38, 
   0x39, 0x38, 0x38, 0x37, 0x38, 0x35, 0x36, 0x35, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 
   0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 
   0x2D, 0x2F, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2B, 0x29, 
   0x2B, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 
   0x2B, 0x2C, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2E, 0x2F, 0x2E, 0x30, 0x30, 
   0x30, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 
   0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x36, 
   0x36, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x3A, 0x3B, 0x3A, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3B, 0x3B, 0x3B, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 
   0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3F, 0x3D, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 
   0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3A, 0x3A, 0x3A, 0x39, 
   0x38, 0x39, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x33, 0x34, 0x33, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 
   0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 
   0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 
   0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x38, 0x38, 0x38, 0x39, 0x3A, 0x39, 0x3A, 
   0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3E, 0x3F, 
   0x3E, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x43, 0x42, 0x43, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 
   0x44, 0x46, 0x44, 0x46, 0x47, 0x46, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2B, 
   0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x30, 0x2F, 
   0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 
   0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x34, 
   0x33, 0x34, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x33, 0x31, 0x33, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x34, 0x34, 0x34, 0x35, 0x36, 0x35, 
   0x37, 0x37, 0x37, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3D, 
   0x3B, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3E, 0x3F, 0x3E, 0x40, 0x41, 0x40, 0x42, 0x42, 
   0x42, 0x45, 0x45, 0x45, 0x47, 0x47, 0x47, 0x48, 0x49, 0x48, 0x4A, 0x4B, 0x4A, 0x4B, 0x4C, 0x4B, 
   0x4B, 0x4C, 0x4B, 0x4B, 0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4A, 0x4B, 0x4A, 0x49, 
   0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4C, 0x4A, 0x4B, 0x4A, 0x48, 0x48, 
   0x48, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 
   0x43, 0x43, 0x43, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 
   0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3B, 0x3D, 0x3B, 0x3A, 0x3B, 0x38, 0x38, 
   0x38, 0x37, 0x37, 0x37, 0x35, 0x35, 0x35, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 
   0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x36, 0x35, 0x35, 0x36, 0x35, 0x38, 0x37, 0x38, 0x3B, 0x3A, 0x3B, 0x3C, 0x3C, 0x3C, 0x3E, 0x3D, 
   0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x40, 0x3F, 0x40, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 
   0x3D, 0x3C, 0x3D, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x38, 
   0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x3B, 0x3A, 0x3B, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3E, 
   0x3C, 0x3E, 0x3C, 0x3D, 0x3C, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 
   0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 
   0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3B, 0x3D, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x38, 
   0x39, 0x38, 0x39, 0x38, 0x39, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 
   0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2E, 0x2E, 0x2E, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 
   0x29, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x29, 0x2A, 0x29, 
   0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x30, 0x2F, 
   0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 
   0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x37, 0x36, 0x37, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 
   0x36, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 0x3A, 
   0x39, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3A, 
   0x3B, 0x3A, 0x3A, 0x3B, 0x3A, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3C, 0x3D, 0x3C, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x41, 0x3F, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 
   0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3C, 0x3A, 0x3C, 0x3A, 
   0x39, 0x3A, 0x38, 0x38, 0x38, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 
   0x33, 0x34, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 
   0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 
   0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x3A, 0x39, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3D, 0x3B, 0x3D, 0x3E, 0x3D, 0x3E, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x41, 0x42, 0x41, 0x42, 0x44, 0x42, 0x44, 0x45, 0x44, 0x46, 0x46, 0x46, 
   0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x2A, 0x29, 0x2A, 0x2B, 
   0x2A, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x34, 
   0x33, 0x34, 0x34, 0x33, 0x34, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x36, 0x35, 
   0x38, 0x39, 0x38, 0x3A, 0x3B, 0x3A, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3D, 0x3B, 0x3D, 0x3C, 
   0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3F, 0x3E, 0x3F, 0x3F, 0x40, 0x3F, 0x42, 0x42, 
   0x42, 0x43, 0x45, 0x43, 0x46, 0x47, 0x46, 0x48, 0x4A, 0x48, 0x4A, 0x4B, 0x4A, 0x4E, 0x4C, 0x4E, 
   0x4C, 0x4D, 0x4C, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4C, 0x4D, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4B, 0x4B, 0x4B, 0x48, 0x49, 
   0x48, 0x45, 0x46, 0x45, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x44, 0x43, 0x44, 
   0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3D, 0x3D, 0x3D, 0x3C, 
   0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3A, 0x3A, 0x3A, 0x38, 0x37, 
   0x38, 0x37, 0x35, 0x37, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 
   0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 
   0x35, 0x35, 0x36, 0x36, 0x36, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x3A, 0x3B, 0x3A, 0x3C, 0x3B, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 
   0x3C, 0x3C, 0x3C, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x38, 
   0x38, 0x38, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 
   0x36, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 
   0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 
   0x3C, 0x3E, 0x3D, 0x3E, 0x40, 0x3F, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 
   0x3F, 0x3E, 0x3F, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3A, 0x3B, 0x39, 
   0x39, 0x39, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x34, 0x35, 0x34, 0x33, 0x34, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 
   0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 
   0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 
   0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 
   0x2A, 0x29, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2C, 0x2A, 0x2C, 0x2B, 0x2C, 0x2B, 0x2E, 0x2C, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x30, 0x2F, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 
   0x33, 0x34, 0x33, 0x35, 0x36, 0x35, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x39, 0x38, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 
   0x38, 0x39, 0x38, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x3A, 0x3B, 0x3A, 0x3D, 0x3E, 
   0x3D, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 
   0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3E, 0x3E, 0x3C, 0x3D, 0x3C, 0x3D, 0x3B, 0x3D, 0x3A, 
   0x3A, 0x3A, 0x38, 0x38, 0x38, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x35, 0x35, 
   0x35, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x31, 0x32, 
   0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 
   0x33, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x34, 0x33, 0x34, 0x34, 0x35, 0x34, 
   0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x37, 0x38, 0x37, 0x39, 0x39, 0x39, 0x3B, 0x3A, 0x3B, 0x3C, 
   0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3E, 0x3D, 0x3E, 0x3E, 0x3F, 
   0x3E, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x43, 0x44, 0x43, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2C, 
   0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x34, 
   0x33, 0x34, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 
   0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x35, 0x35, 0x35, 0x38, 0x37, 0x38, 
   0x38, 0x39, 0x38, 0x3A, 0x3B, 0x3A, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 
   0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3D, 0x3C, 0x3D, 0x3F, 0x3E, 0x3F, 0x40, 0x3F, 0x40, 0x42, 0x42, 
   0x42, 0x45, 0x44, 0x45, 0x48, 0x47, 0x48, 0x48, 0x49, 0x48, 0x4C, 0x4B, 0x4C, 0x4D, 0x4D, 0x4D, 
   0x4D, 0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4C, 0x4D, 0x4C, 0x4B, 
   0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4C, 0x4C, 0x4C, 0x49, 0x48, 
   0x49, 0x45, 0x46, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x42, 0x43, 0x42, 
   0x42, 0x41, 0x42, 0x40, 0x3F, 0x40, 0x40, 0x3E, 0x40, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 
   0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x39, 0x3A, 0x39, 0x37, 0x37, 
   0x37, 0x36, 0x35, 0x36, 0x34, 0x34, 0x34, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 
   0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x38, 0x37, 0x38, 0x37, 0x38, 0x37, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3B, 0x3A, 0x3B, 0x3C, 0x3A, 0x3C, 0x3B, 0x3B, 0x3B, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3B, 0x3B, 0x3B, 0x3C, 0x3A, 0x3C, 0x39, 0x39, 0x39, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x37, 
   0x38, 0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 
   0x35, 0x36, 0x37, 0x36, 0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 
   0x3B, 0x3D, 0x3D, 0x3D, 0x3C, 0x3E, 0x3C, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 
   0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x39, 0x3A, 0x38, 0x39, 0x38, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 0x34, 0x34, 
   0x34, 0x32, 0x33, 0x32, 0x31, 0x33, 0x31, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 
   0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x2F, 0x31, 0x2E, 
   0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 
   0x29, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 
   0x2B, 0x29, 0x2B, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2C, 0x2B, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 
   0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 
   0x33, 0x32, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x35, 
   0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x38, 0x38, 
   0x38, 0x38, 0x37, 0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 
   0x37, 0x37, 0x37, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 
   0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x3A, 0x39, 0x3A, 0x3D, 0x3C, 
   0x3D, 0x3F, 0x3F, 0x3F, 0x42, 0x40, 0x42, 0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x40, 0x41, 
   0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x40, 0x3E, 0x40, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3A, 
   0x3A, 0x3A, 0x38, 0x39, 0x38, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 
   0x30, 0x31, 0x30, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 
   0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x32, 0x33, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 0x33, 0x32, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 
   0x35, 0x35, 0x35, 0x37, 0x36, 0x37, 0x38, 0x37, 0x38, 0x39, 0x3A, 0x39, 0x39, 0x3B, 0x39, 0x3D, 
   0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x43, 0x42, 0x43, 0x45, 0x44, 0x45, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 
   0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 
   0x2A, 0x29, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x30, 0x2E, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 
   0x33, 0x33, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 
   0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 
   0x39, 0x39, 0x39, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 
   0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3E, 0x3E, 0x3E, 0x40, 0x40, 0x40, 0x42, 0x42, 
   0x42, 0x45, 0x45, 0x45, 0x47, 0x47, 0x47, 0x4A, 0x4A, 0x4A, 0x4A, 0x4C, 0x4A, 0x4D, 0x4D, 0x4D, 
   0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4D, 0x4D, 0x4D, 0x4C, 
   0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4A, 0x4C, 0x4A, 0x49, 0x49, 
   0x49, 0x47, 0x47, 0x47, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 
   0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x3E, 0x3F, 0x3F, 0x3D, 0x3F, 0x3E, 0x3E, 0x3E, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 0x39, 0x37, 
   0x39, 0x35, 0x35, 0x35, 0x35, 0x33, 0x35, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x36, 0x35, 0x36, 0x36, 
   0x35, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x36, 
   0x36, 0x36, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 
   0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x3A, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 
   0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 
   0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x38, 0x38, 0x38, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 
   0x35, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x32, 0x34, 
   0x34, 0x33, 0x34, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2E, 
   0x2E, 0x2E, 0x2C, 0x2D, 0x2C, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 
   0x29, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x29, 
   0x28, 0x29, 0x29, 0x29, 0x29, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2E, 
   0x2D, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x31, 0x30, 0x31, 
   0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x35, 0x34, 0x35, 0x36, 0x36, 
   0x36, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x37, 0x36, 0x37, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x37, 
   0x38, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x3D, 0x3B, 
   0x3D, 0x40, 0x3E, 0x40, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x3E, 0x3F, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3A, 
   0x3A, 0x3A, 0x38, 0x39, 0x38, 0x35, 0x37, 0x35, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x34, 0x35, 
   0x34, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 
   0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x33, 
   0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x33, 0x32, 
   0x33, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x35, 0x33, 0x35, 
   0x34, 0x34, 0x34, 0x36, 0x37, 0x36, 0x38, 0x38, 0x38, 0x3A, 0x3A, 0x3A, 0x3D, 0x3B, 0x3D, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 
   0x3F, 0x3F, 0x40, 0x3F, 0x42, 0x42, 0x42, 0x44, 0x44, 0x44, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 
   0x47, 0x47, 0x47, 0x45, 0x47, 0x45, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 
   0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x2B, 0x29, 0x2C, 0x2C, 0x2C, 0x2A, 0x2B, 
   0x2A, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x34, 
   0x33, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 
   0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x38, 0x37, 0x38, 
   0x37, 0x39, 0x37, 0x3A, 0x3B, 0x3A, 0x3C, 0x3B, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 0x3F, 0x41, 0x42, 
   0x41, 0x45, 0x44, 0x45, 0x47, 0x46, 0x47, 0x48, 0x49, 0x48, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 
   0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4E, 0x4C, 0x4E, 0x4B, 0x4D, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 0x4A, 
   0x4B, 0x49, 0x48, 0x49, 0x46, 0x48, 0x46, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 
   0x40, 0x42, 0x40, 0x40, 0x41, 0x40, 0x3F, 0x3F, 0x3F, 0x3E, 0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x3C, 
   0x3D, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x38, 0x3A, 0x38, 0x37, 0x37, 
   0x37, 0x35, 0x35, 0x35, 0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 
   0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x33, 0x33, 0x33, 0x36, 0x35, 0x36, 0x36, 
   0x36, 0x36, 0x36, 0x37, 0x36, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x37, 0x39, 0x37, 0x3B, 0x39, 0x3B, 0x39, 0x3A, 0x39, 
   0x3A, 0x3B, 0x3A, 0x38, 0x3A, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x36, 0x37, 0x36, 0x36, 
   0x35, 0x36, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x33, 
   0x34, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 
   0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x37, 0x39, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x3B, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3C, 0x3A, 0x3C, 0x3C, 0x3B, 0x3C, 
   0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 0x3C, 0x39, 0x3B, 0x39, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 
   0x3B, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x35, 0x35, 
   0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x31, 0x32, 
   0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2D, 
   0x2D, 0x2D, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x29, 0x2A, 0x28, 0x28, 0x28, 0x28, 0x28, 
   0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x27, 
   0x28, 0x27, 0x2B, 0x29, 0x2B, 0x29, 0x2A, 0x29, 0x2C, 0x2B, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x33, 0x31, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x34, 
   0x35, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x36, 0x35, 0x36, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 
   0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x37, 
   0x37, 0x37, 0x36, 0x37, 0x36, 0x34, 0x36, 0x34, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x39, 0x3A, 
   0x39, 0x3E, 0x3E, 0x3E, 0x40, 0x3F, 0x40, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 
   0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x3D, 0x3F, 0x3D, 0x3B, 0x3D, 0x3B, 0x3C, 0x3B, 0x3C, 0x3A, 
   0x3A, 0x3A, 0x38, 0x38, 0x38, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 
   0x34, 0x33, 0x34, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x32, 0x31, 0x34, 
   0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x36, 0x35, 0x35, 0x34, 0x35, 0x31, 0x33, 
   0x31, 0x33, 0x31, 0x33, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 
   0x34, 0x33, 0x34, 0x36, 0x35, 0x36, 0x38, 0x37, 0x38, 0x3B, 0x3A, 0x3B, 0x3C, 0x3D, 0x3C, 0x3E, 
   0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3D, 0x3D, 0x40, 0x3E, 0x40, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x41, 0x3F, 0x42, 0x42, 0x42, 0x45, 0x44, 0x45, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 
   0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x2B, 0x29, 0x2B, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x29, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2B, 0x29, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2E, 0x2F, 0x2E, 0x30, 0x30, 0x30, 0x31, 0x32, 0x31, 0x33, 
   0x32, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 
   0x33, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 
   0x38, 0x39, 0x38, 0x3A, 0x3B, 0x3A, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3D, 0x3C, 0x3F, 0x3F, 0x3F, 0x41, 0x41, 
   0x41, 0x43, 0x43, 0x43, 0x47, 0x47, 0x47, 0x4A, 0x49, 0x4A, 0x4A, 0x4B, 0x4A, 0x4D, 0x4D, 0x4D, 
   0x4E, 0x4E, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 
   0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x4A, 0x4B, 
   0x4A, 0x49, 0x4A, 0x49, 0x48, 0x48, 0x48, 0x45, 0x46, 0x45, 0x44, 0x43, 0x44, 0x42, 0x42, 0x42, 
   0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3C, 
   0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3A, 0x3C, 0x39, 0x39, 0x39, 0x37, 0x37, 
   0x37, 0x34, 0x35, 0x34, 0x32, 0x33, 0x32, 0x31, 0x32, 0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x31, 0x33, 0x34, 0x34, 0x34, 0x36, 0x36, 0x36, 0x37, 
   0x37, 0x37, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 
   0x37, 0x37, 0x36, 0x37, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x36, 0x37, 0x36, 0x35, 0x35, 0x35, 0x34, 
   0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 
   0x33, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 
   0x34, 0x35, 0x34, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x36, 0x38, 0x36, 0x37, 0x37, 0x37, 0x39, 0x38, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x3C, 0x3B, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x36, 0x38, 0x36, 0x36, 0x36, 0x36, 0x35, 0x35, 
   0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x30, 0x2F, 0x30, 0x2D, 0x2E, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 
   0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 
   0x28, 0x29, 0x29, 0x29, 0x29, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 
   0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 
   0x34, 0x33, 0x34, 0x31, 0x33, 0x31, 0x32, 0x32, 0x32, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x39, 0x39, 
   0x39, 0x3B, 0x3C, 0x3B, 0x40, 0x3E, 0x40, 0x40, 0x3E, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 
   0x40, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3A, 0x3B, 0x3A, 0x38, 
   0x38, 0x38, 0x37, 0x38, 0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x35, 0x34, 0x35, 0x34, 0x33, 
   0x34, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 
   0x32, 0x32, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 0x33, 0x32, 
   0x33, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 
   0x34, 0x33, 0x34, 0x35, 0x34, 0x35, 0x36, 0x37, 0x36, 0x38, 0x3A, 0x38, 0x3D, 0x3D, 0x3D, 0x3F, 
   0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 
   0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x43, 0x44, 0x43, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 
   0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x29, 0x29, 0x29, 0x2B, 0x29, 0x2B, 0x29, 0x29, 0x29, 0x27, 
   0x27, 0x27, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x27, 0x2A, 0x27, 0x29, 0x2A, 0x29, 0x2A, 0x2C, 
   0x2A, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 
   0x33, 0x32, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x34, 
   0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x37, 0x37, 0x37, 
   0x37, 0x39, 0x37, 0x3A, 0x3B, 0x3A, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3D, 0x3C, 0x3F, 0x3E, 0x3F, 0x41, 0x40, 
   0x41, 0x44, 0x43, 0x44, 0x46, 0x47, 0x46, 0x48, 0x4A, 0x48, 0x4C, 0x4C, 0x4C, 0x4E, 0x4D, 0x4E, 
   0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4D, 
   0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x49, 0x4A, 0x49, 0x48, 0x48, 0x48, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 
   0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x39, 0x38, 0x39, 0x37, 0x37, 
   0x37, 0x33, 0x35, 0x33, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 
   0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x32, 0x31, 0x33, 0x34, 0x33, 0x36, 0x36, 0x36, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x35, 0x35, 
   0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x38, 0x37, 0x38, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 
   0x37, 0x39, 0x37, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x36, 0x35, 0x36, 0x35, 0x34, 0x35, 0x31, 
   0x32, 0x31, 0x33, 0x31, 0x33, 0x32, 0x31, 0x32, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 
   0x32, 0x2F, 0x31, 0x2F, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 
   0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x39, 0x38, 
   0x39, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x3B, 0x3A, 0x38, 0x3A, 0x38, 0x39, 0x38, 0x39, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x36, 0x34, 
   0x36, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x32, 0x32, 0x32, 0x30, 0x31, 0x30, 0x30, 0x31, 0x30, 
   0x2F, 0x31, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2B, 0x2A, 0x2B, 0x29, 0x28, 0x29, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 
   0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 
   0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 
   0x28, 0x27, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 
   0x2F, 0x2E, 0x2F, 0x31, 0x2F, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x31, 0x32, 0x31, 
   0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x34, 0x35, 0x34, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x37, 0x36, 0x38, 0x38, 
   0x38, 0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3F, 0x3D, 0x3F, 0x3E, 0x3D, 0x3E, 
   0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3C, 0x3E, 0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 0x37, 
   0x39, 0x37, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x37, 0x35, 0x37, 0x34, 0x34, 0x34, 0x32, 0x32, 
   0x32, 0x33, 0x31, 0x33, 0x31, 0x30, 0x31, 0x2F, 0x31, 0x2F, 0x31, 0x2F, 0x31, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x31, 
   0x32, 0x31, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x34, 0x34, 0x34, 0x31, 0x33, 
   0x31, 0x2F, 0x31, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 
   0x33, 0x33, 0x33, 0x34, 0x35, 0x34, 0x37, 0x36, 0x37, 0x3B, 0x39, 0x3B, 0x3D, 0x3D, 0x3D, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x40, 0x3F, 0x41, 0x41, 
   0x41, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x45, 0x44, 0x45, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 
   0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x28, 0x28, 0x28, 
   0x28, 0x28, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 
   0x2E, 0x2D, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 
   0x33, 0x32, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x33, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x36, 0x36, 0x36, 0x37, 0x38, 0x37, 
   0x38, 0x39, 0x38, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 
   0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3E, 0x3D, 0x3E, 0x3F, 0x3E, 0x3F, 0x42, 0x41, 
   0x42, 0x45, 0x43, 0x45, 0x47, 0x46, 0x47, 0x4A, 0x49, 0x4A, 0x4C, 0x4D, 0x4C, 0x4E, 0x4D, 0x4E, 
   0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4A, 0x4C, 0x4A, 0x4B, 0x4B, 
   0x4B, 0x4A, 0x4A, 0x4A, 0x48, 0x48, 0x48, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 
   0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 
   0x3C, 0x3D, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x38, 0x38, 0x38, 0x37, 0x37, 
   0x37, 0x34, 0x34, 0x34, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 
   0x36, 0x36, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x32, 
   0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 
   0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x32, 0x31, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 
   0x36, 0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x36, 0x37, 
   0x36, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x3A, 0x39, 0x37, 0x38, 0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 
   0x35, 0x35, 0x34, 0x35, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 
   0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x2E, 0x2F, 0x2E, 0x2D, 0x2C, 0x2D, 0x2D, 
   0x2B, 0x2D, 0x2A, 0x2A, 0x2A, 0x28, 0x27, 0x28, 0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 0x26, 0x26, 
   0x26, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 
   0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 0x27, 
   0x26, 0x27, 0x28, 0x28, 0x28, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 
   0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 
   0x2D, 0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 
   0x31, 0x32, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x35, 0x33, 0x37, 0x37, 0x37, 0x39, 0x38, 
   0x39, 0x3A, 0x3A, 0x3A, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 
   0x3C, 0x3D, 0x3C, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x36, 
   0x37, 0x36, 0x37, 0x36, 0x37, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 
   0x32, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x30, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 
   0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x32, 
   0x32, 0x32, 0x34, 0x33, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x33, 0x33, 
   0x33, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x38, 0x37, 0x38, 0x3A, 0x39, 0x3A, 0x3B, 0x3C, 0x3B, 0x3F, 
   0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x41, 
   0x40, 0x42, 0x42, 0x42, 0x44, 0x43, 0x44, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 
   0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
   0x27, 0x28, 0x27, 0x28, 0x27, 0x27, 0x2A, 0x27, 0x28, 0x2A, 0x28, 0x29, 0x2B, 0x29, 0x2B, 0x2B, 
   0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 
   0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x30, 0x2E, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 
   0x32, 0x32, 0x33, 0x33, 0x33, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 
   0x34, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x36, 0x36, 0x36, 0x38, 0x37, 0x38, 
   0x37, 0x39, 0x37, 0x3A, 0x3B, 0x3A, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3E, 0x3E, 0x3E, 0x3F, 
   0x3E, 0x3F, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x40, 0x3E, 0x40, 0x3F, 0x40, 0x3F, 0x42, 0x42, 
   0x42, 0x44, 0x45, 0x44, 0x47, 0x47, 0x47, 0x49, 0x4A, 0x49, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 
   0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4B, 0x4B, 
   0x4B, 0x49, 0x4A, 0x49, 0x48, 0x47, 0x48, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 
   0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x3E, 0x3E, 0x3E, 0x3F, 0x3D, 0x3F, 0x3E, 0x3D, 0x3E, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x36, 0x36, 
   0x36, 0x33, 0x34, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x32, 0x31, 0x32, 0x33, 0x32, 0x35, 0x35, 0x35, 0x36, 
   0x35, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x34, 0x36, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 
   0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x34, 0x35, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x31, 
   0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x31, 0x33, 0x32, 0x31, 0x32, 
   0x32, 0x33, 0x32, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x35, 0x36, 0x35, 0x36, 
   0x35, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 
   0x38, 0x37, 0x38, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x37, 
   0x37, 0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x35, 0x34, 0x35, 0x35, 0x33, 0x35, 0x32, 0x33, 
   0x32, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 
   0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2D, 0x2F, 0x2D, 0x2C, 0x2D, 0x29, 
   0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x26, 0x27, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 
   0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 
   0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x23, 0x24, 0x23, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x27, 
   0x26, 0x27, 0x27, 0x26, 0x27, 0x29, 0x28, 0x29, 0x28, 0x29, 0x28, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 
   0x2B, 0x2B, 0x2B, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x30, 0x31, 
   0x30, 0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x33, 0x31, 0x33, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 
   0x33, 0x32, 0x32, 0x33, 0x32, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x36, 0x36, 0x36, 0x38, 0x38, 
   0x38, 0x39, 0x3A, 0x39, 0x3D, 0x3B, 0x3D, 0x3C, 0x3B, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 
   0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3A, 0x3B, 0x3A, 0x38, 0x39, 0x38, 0x37, 0x37, 0x37, 0x35, 
   0x36, 0x35, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 0x32, 0x33, 0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 
   0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 
   0x2C, 0x2B, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2F, 0x2E, 0x2F, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x32, 0x32, 
   0x32, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x33, 0x33, 0x33, 0x37, 0x35, 0x37, 0x38, 0x38, 0x38, 0x3B, 0x3A, 0x3B, 0x3D, 0x3D, 0x3D, 0x3E, 
   0x3D, 0x3E, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x41, 0x42, 
   0x41, 0x44, 0x42, 0x44, 0x44, 0x44, 0x44, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 
   0x26, 0x27, 0x28, 0x28, 0x28, 0x29, 0x2A, 0x29, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 
   0x32, 0x32, 0x34, 0x33, 0x34, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x39, 0x38, 0x39, 
   0x39, 0x39, 0x39, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3D, 0x3E, 0x3D, 0x40, 0x3F, 0x40, 0x40, 
   0x3F, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x41, 0x3F, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x43, 0x44, 
   0x43, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4C, 0x4C, 0x4C, 
   0x4E, 0x4D, 0x4E, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4B, 0x4B, 0x4B, 0x49, 0x4B, 
   0x49, 0x48, 0x49, 0x48, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 
   0x42, 0x41, 0x42, 0x40, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 
   0x3C, 0x3D, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 0x37, 0x39, 0x37, 0x37, 0x36, 
   0x37, 0x33, 0x34, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x35, 
   0x34, 0x35, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x33, 
   0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x34, 0x35, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 
   0x32, 0x32, 0x32, 0x34, 0x33, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x35, 0x34, 0x35, 0x35, 0x36, 
   0x35, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x34, 
   0x34, 0x34, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2D, 0x2F, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x26, 
   0x27, 0x25, 0x26, 0x25, 0x25, 0x26, 0x25, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x24, 0x24, 0x24, 
   0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 
   0x25, 0x24, 0x25, 0x26, 0x25, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x28, 
   0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 
   0x2A, 0x2A, 0x2A, 0x2D, 0x2C, 0x2D, 0x2D, 0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 
   0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x36, 0x37, 
   0x36, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x3B, 0x3A, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3D, 0x3C, 0x3D, 0x3A, 0x3A, 0x3A, 0x38, 0x3A, 0x38, 0x37, 0x38, 0x37, 0x35, 0x34, 0x35, 0x34, 
   0x33, 0x34, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 
   0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x30, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 
   0x31, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 
   0x35, 0x35, 0x35, 0x36, 0x37, 0x36, 0x39, 0x38, 0x39, 0x3B, 0x3A, 0x3B, 0x3C, 0x3C, 0x3C, 0x3F, 
   0x3D, 0x3F, 0x3F, 0x3F, 0x3F, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x43, 0x43, 
   0x43, 0x46, 0x44, 0x46, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 
   0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x28, 
   0x26, 0x28, 0x27, 0x28, 0x27, 0x28, 0x2A, 0x28, 0x29, 0x2B, 0x29, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 
   0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x33, 
   0x32, 0x33, 0x34, 0x34, 0x34, 0x35, 0x36, 0x35, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x35, 0x35, 
   0x35, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 
   0x38, 0x39, 0x38, 0x3A, 0x3A, 0x3A, 0x3B, 0x3C, 0x3B, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 0x3F, 0x41, 
   0x40, 0x41, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x43, 0x42, 0x43, 0x42, 0x44, 0x42, 0x45, 0x45, 
   0x45, 0x48, 0x47, 0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x4B, 0x4A, 0x4B, 0x4A, 0x4B, 
   0x4C, 0x4C, 0x4C, 0x4D, 0x4E, 0x4D, 0x4D, 0x4E, 0x4D, 0x4D, 0x4E, 0x4D, 0x4D, 0x4F, 0x4D, 0x4E, 
   0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4C, 0x4E, 0x4C, 0x4C, 0x4B, 0x4C, 0x48, 0x49, 
   0x48, 0x48, 0x47, 0x48, 0x46, 0x45, 0x46, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 
   0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3B, 
   0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x36, 0x36, 
   0x36, 0x33, 0x34, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 
   0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x34, 
   0x34, 0x34, 0x33, 0x34, 0x32, 0x33, 0x32, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 
   0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 
   0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 
   0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 
   0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x35, 0x35, 
   0x35, 0x37, 0x36, 0x37, 0x36, 0x37, 0x36, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 
   0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 
   0x33, 0x33, 0x31, 0x32, 0x31, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 
   0x31, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2B, 
   0x29, 0x2B, 0x2B, 0x29, 0x2B, 0x29, 0x29, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 0x26, 0x26, 
   0x26, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 
   0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x21, 0x22, 0x21, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x23, 
   0x24, 0x23, 0x27, 0x25, 0x27, 0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 0x26, 0x26, 0x26, 0x29, 0x28, 
   0x29, 0x28, 0x28, 0x28, 0x29, 0x27, 0x29, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 
   0x29, 0x29, 0x29, 0x2A, 0x2B, 0x2A, 0x2C, 0x2C, 0x2C, 0x2F, 0x2D, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x31, 0x31, 0x31, 0x31, 
   0x32, 0x31, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x36, 0x35, 0x36, 0x35, 0x36, 
   0x35, 0x38, 0x37, 0x38, 0x39, 0x39, 0x39, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 
   0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 0x37, 0x38, 0x37, 0x37, 0x36, 0x37, 0x35, 0x34, 0x35, 0x32, 
   0x33, 0x32, 0x31, 0x32, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 
   0x2D, 0x2F, 0x2D, 0x2F, 0x2D, 0x2D, 0x2D, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x35, 0x32, 0x35, 
   0x36, 0x35, 0x36, 0x37, 0x38, 0x37, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3E, 
   0x3E, 0x3E, 0x3F, 0x41, 0x3F, 0x41, 0x43, 0x41, 0x44, 0x44, 0x44, 0x43, 0x45, 0x43, 0x45, 0x45, 
   0x45, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x28, 0x27, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 
   0x2C, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2E, 0x2C, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 
   0x33, 0x32, 0x34, 0x34, 0x34, 0x35, 0x36, 0x35, 0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 
   0x38, 0x39, 0x38, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3C, 0x3C, 0x3C, 0x40, 0x3F, 0x40, 0x40, 
   0x40, 0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x44, 0x43, 0x44, 0x44, 0x45, 0x44, 0x46, 0x46, 
   0x46, 0x46, 0x47, 0x46, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x49, 0x4A, 0x49, 0x4A, 0x4B, 0x4A, 
   0x4B, 0x4B, 0x4B, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4E, 
   0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 0x4C, 0x4B, 0x4B, 0x4B, 0x48, 0x49, 
   0x48, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x42, 0x42, 0x42, 
   0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 
   0x3C, 0x3D, 0x3B, 0x3B, 0x3B, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x37, 0x38, 0x37, 0x37, 0x36, 
   0x37, 0x35, 0x33, 0x35, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x31, 0x33, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x35, 
   0x34, 0x35, 0x34, 0x34, 0x34, 0x36, 0x34, 0x36, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x34, 0x35, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x33, 0x33, 0x33, 0x32, 
   0x33, 0x32, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 
   0x33, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 
   0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x34, 0x33, 0x35, 0x33, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x31, 0x33, 0x31, 0x32, 0x31, 0x32, 0x30, 
   0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2D, 0x2F, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x29, 
   0x29, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x28, 0x29, 0x28, 0x28, 0x26, 0x28, 0x27, 0x26, 
   0x27, 0x25, 0x26, 0x25, 0x25, 0x26, 0x25, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x23, 0x24, 0x23, 
   0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x25, 
   0x24, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 0x26, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 
   0x29, 0x28, 0x29, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x30, 0x2E, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x32, 
   0x31, 0x32, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 
   0x35, 0x37, 0x37, 0x37, 0x38, 0x39, 0x38, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 
   0x3A, 0x3A, 0x3A, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x35, 0x35, 0x35, 0x33, 0x33, 0x33, 0x31, 
   0x30, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 0x2D, 
   0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x30, 
   0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 
   0x31, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x34, 0x34, 0x34, 
   0x36, 0x36, 0x36, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 0x3F, 
   0x40, 0x3F, 0x41, 0x41, 0x41, 0x43, 0x43, 0x43, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x46, 0x46, 
   0x46, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x25, 0x24, 0x25, 0x27, 0x25, 0x27, 0x25, 0x26, 0x25, 0x27, 
   0x27, 0x27, 0x28, 0x29, 0x28, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x2A, 0x29, 0x2A, 
   0x2B, 0x29, 0x2B, 0x2B, 0x2A, 0x2B, 0x2D, 0x2D, 0x2D, 0x2F, 0x30, 0x2F, 0x31, 0x32, 0x31, 0x33, 
   0x33, 0x33, 0x35, 0x34, 0x35, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 
   0x36, 0x37, 0x35, 0x37, 0x36, 0x36, 0x36, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 
   0x38, 0x39, 0x38, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3E, 0x3F, 0x3E, 0x41, 
   0x40, 0x41, 0x42, 0x42, 0x42, 0x42, 0x44, 0x42, 0x44, 0x45, 0x44, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x46, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x4A, 0x4A, 0x4A, 
   0x4A, 0x4B, 0x4A, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 
   0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x48, 0x49, 
   0x48, 0x45, 0x46, 0x45, 0x46, 0x45, 0x46, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 
   0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3D, 0x3D, 0x3D, 0x3C, 
   0x3D, 0x3C, 0x3D, 0x3B, 0x3D, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x35, 0x37, 
   0x35, 0x33, 0x35, 0x33, 0x33, 0x34, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 
   0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 
   0x33, 0x33, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 
   0x36, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 
   0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 
   0x33, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 
   0x32, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2D, 
   0x2F, 0x2D, 0x2F, 0x2E, 0x2F, 0x2D, 0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 
   0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x29, 0x2A, 0x28, 0x29, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x26, 0x27, 0x25, 0x26, 
   0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 
   0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x22, 0x22, 0x23, 0x22, 0x23, 0x25, 0x24, 0x25, 0x23, 
   0x24, 0x23, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 
   0x26, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x27, 0x25, 0x27, 0x25, 0x25, 0x25, 
   0x27, 0x27, 0x27, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2D, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x30, 0x30, 0x30, 0x32, 
   0x31, 0x32, 0x33, 0x32, 0x33, 0x35, 0x33, 0x35, 0x33, 0x34, 0x33, 0x36, 0x35, 0x36, 0x36, 0x35, 
   0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x39, 0x38, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 
   0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x35, 0x35, 0x35, 0x34, 0x33, 0x34, 0x31, 0x32, 0x31, 0x30, 
   0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 
   0x2B, 0x2A, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 
   0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x32, 0x31, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x36, 0x34, 
   0x37, 0x36, 0x37, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3E, 
   0x3E, 0x3E, 0x41, 0x40, 0x41, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x46, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x48, 0x49, 0x48, 0x48, 0x4A, 0x48, 0x48, 0x49, 0x48, 
   0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x28, 
   0x28, 0x28, 0x28, 0x29, 0x28, 0x28, 0x29, 0x28, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 
   0x29, 0x29, 0x29, 0x2A, 0x2B, 0x2A, 0x2E, 0x2D, 0x2E, 0x2F, 0x2F, 0x2F, 0x32, 0x31, 0x32, 0x33, 
   0x32, 0x33, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 
   0x37, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x3A, 0x3B, 0x3A, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 
   0x3F, 0x3F, 0x42, 0x42, 0x42, 0x43, 0x45, 0x43, 0x45, 0x47, 0x45, 0x46, 0x47, 0x46, 0x46, 0x47, 
   0x46, 0x46, 0x47, 0x46, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 
   0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4A, 
   0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x49, 0x48, 0x49, 0x47, 0x47, 
   0x47, 0x46, 0x45, 0x46, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3D, 
   0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x37, 0x37, 
   0x37, 0x35, 0x36, 0x35, 0x33, 0x34, 0x33, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 
   0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x35, 
   0x33, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 
   0x37, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 
   0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 
   0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 
   0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2D, 0x2B, 0x2D, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 
   0x2B, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 
   0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 
   0x29, 0x2A, 0x27, 0x28, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x25, 0x25, 
   0x25, 0x25, 0x24, 0x25, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 
   0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x25, 
   0x24, 0x25, 0x25, 0x25, 0x25, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x25, 0x25, 
   0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 
   0x27, 0x26, 0x27, 0x29, 0x28, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 
   0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2D, 0x2B, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 0x31, 0x31, 0x31, 0x31, 
   0x33, 0x31, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 
   0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 
   0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 0x2F, 0x30, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 
   0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 
   0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x32, 
   0x31, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x37, 0x36, 0x37, 
   0x37, 0x36, 0x37, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 0x3F, 
   0x40, 0x3F, 0x41, 0x41, 0x41, 0x41, 0x43, 0x41, 0x44, 0x43, 0x44, 0x44, 0x46, 0x44, 0x48, 0x47, 
   0x48, 0x48, 0x47, 0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 
   0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x28, 
   0x28, 0x28, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x28, 0x29, 
   0x28, 0x27, 0x27, 0x27, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 
   0x27, 0x28, 0x27, 0x2A, 0x2A, 0x2A, 0x2C, 0x2C, 0x2C, 0x30, 0x2F, 0x30, 0x32, 0x31, 0x32, 0x34, 
   0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 
   0x36, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x37, 0x38, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x39, 0x38, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3C, 0x3B, 0x3E, 0x3D, 0x3E, 0x41, 
   0x40, 0x41, 0x42, 0x42, 0x42, 0x46, 0x45, 0x46, 0x48, 0x46, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 
   0x47, 0x48, 0x46, 0x48, 0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 
   0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x4A, 0x4B, 0x4A, 0x49, 
   0x4A, 0x49, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x47, 0x48, 0x47, 0x45, 0x46, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x44, 0x45, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 
   0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x3F, 0x41, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x37, 0x37, 
   0x37, 0x37, 0x36, 0x37, 0x35, 0x34, 0x35, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 
   0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 
   0x34, 0x33, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x35, 0x36, 
   0x35, 0x37, 0x35, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 
   0x33, 0x33, 0x33, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x33, 
   0x34, 0x33, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x36, 0x36, 0x36, 0x36, 0x35, 
   0x36, 0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 
   0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 
   0x30, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x2E, 0x2F, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x29, 0x2B, 0x29, 0x29, 0x29, 0x2A, 0x29, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 
   0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x28, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x28, 
   0x29, 0x28, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x25, 0x27, 0x24, 0x25, 0x24, 0x24, 0x24, 
   0x24, 0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 
   0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x25, 0x22, 0x25, 0x23, 
   0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 
   0x24, 0x24, 0x24, 0x24, 0x25, 0x23, 0x25, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x25, 0x26, 0x25, 
   0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2A, 
   0x28, 0x2A, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2C, 0x2A, 
   0x2C, 0x2C, 0x2B, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 
   0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x32, 
   0x33, 0x32, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 
   0x36, 0x36, 0x36, 0x34, 0x34, 0x34, 0x33, 0x32, 0x33, 0x30, 0x31, 0x30, 0x30, 0x2F, 0x30, 0x2E, 
   0x2E, 0x2E, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 
   0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x35, 0x33, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x36, 0x37, 0x37, 0x38, 0x37, 0x39, 0x39, 0x39, 0x3A, 0x3C, 0x3A, 0x3F, 0x3E, 0x3F, 0x40, 
   0x3F, 0x40, 0x41, 0x41, 0x41, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x48, 0x46, 0x48, 0x47, 0x47, 
   0x47, 0x48, 0x49, 0x48, 0x48, 0x4A, 0x48, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 
   0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x28, 
   0x28, 0x28, 0x2B, 0x29, 0x2B, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x28, 0x27, 
   0x28, 0x28, 0x26, 0x28, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x26, 0x25, 0x27, 0x26, 0x27, 
   0x27, 0x26, 0x27, 0x2A, 0x28, 0x2A, 0x2D, 0x2C, 0x2D, 0x2F, 0x2E, 0x2F, 0x31, 0x31, 0x31, 0x33, 
   0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x38, 0x37, 0x38, 0x38, 0x37, 0x38, 
   0x38, 0x39, 0x38, 0x3A, 0x39, 0x3A, 0x3A, 0x3B, 0x3A, 0x3C, 0x3B, 0x3C, 0x3E, 0x3D, 0x3E, 0x3F, 
   0x40, 0x3F, 0x42, 0x42, 0x42, 0x45, 0x45, 0x45, 0x47, 0x47, 0x47, 0x49, 0x47, 0x49, 0x48, 0x47, 
   0x48, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x48, 0x4A, 0x48, 0x49, 0x49, 0x49, 0x49, 
   0x49, 0x49, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x45, 0x45, 
   0x45, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 
   0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x3F, 0x41, 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3D, 
   0x3D, 0x3D, 0x3B, 0x3C, 0x3B, 0x39, 0x3B, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x38, 0x39, 0x37, 0x37, 
   0x37, 0x35, 0x36, 0x35, 0x33, 0x34, 0x33, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x31, 0x33, 0x32, 0x33, 0x32, 0x35, 
   0x34, 0x35, 0x35, 0x35, 0x35, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x39, 0x37, 0x39, 0x37, 0x37, 
   0x37, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 
   0x34, 0x33, 0x34, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x35, 
   0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 
   0x35, 0x35, 0x36, 0x35, 0x35, 0x34, 0x35, 0x34, 0x33, 0x34, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 
   0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x30, 0x2E, 0x30, 0x2F, 0x2F, 0x2F, 0x31, 0x2F, 0x31, 0x30, 0x2D, 
   0x30, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 0x2D, 0x2D, 0x2D, 
   0x2E, 0x2D, 0x2E, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x29, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
   0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 
   0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x27, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 0x28, 
   0x28, 0x28, 0x28, 0x27, 0x28, 0x26, 0x27, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 
   0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x24, 0x24, 0x24, 
   0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x25, 
   0x24, 0x25, 0x24, 0x23, 0x24, 0x24, 0x22, 0x24, 0x22, 0x22, 0x22, 0x23, 0x23, 0x23, 0x24, 0x23, 
   0x24, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 
   0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x27, 
   0x27, 0x27, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2C, 0x2B, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 
   0x30, 0x2E, 0x30, 0x2E, 0x2E, 0x2E, 0x2F, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x33, 
   0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x35, 0x34, 0x35, 0x35, 0x34, 0x35, 0x35, 0x34, 
   0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 
   0x36, 0x36, 0x36, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 
   0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2B, 0x2A, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 
   0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x3C, 0x3B, 0x3C, 0x3F, 0x3E, 0x3F, 0x41, 
   0x3F, 0x41, 0x42, 0x41, 0x42, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x46, 0x45, 0x46, 0x48, 0x48, 
   0x48, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x48, 0x49, 0x48, 
   0x48, 0x49, 0x48, 0x48, 0x47, 0x48, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x28, 0x29, 0x28, 0x2A, 
   0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 
   0x29, 0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 0x24, 0x25, 0x24, 0x24, 0x25, 0x24, 0x25, 0x25, 0x25, 
   0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x2B, 0x2B, 0x2B, 0x2E, 0x2D, 0x2E, 0x2F, 0x30, 0x2F, 0x31, 
   0x31, 0x31, 0x33, 0x34, 0x33, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 
   0x37, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3E, 0x3E, 0x3E, 0x40, 
   0x40, 0x40, 0x42, 0x41, 0x42, 0x45, 0x44, 0x45, 0x46, 0x47, 0x46, 0x48, 0x47, 0x48, 0x47, 0x47, 
   0x47, 0x45, 0x47, 0x45, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 
   0x48, 0x47, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x45, 0x46, 0x45, 0x46, 0x45, 0x46, 0x45, 0x45, 
   0x45, 0x45, 0x44, 0x45, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3C, 0x3F, 0x3C, 0x3C, 0x3C, 0x3A, 0x3B, 0x3A, 0x39, 0x3A, 0x39, 0x38, 0x39, 0x38, 0x37, 0x37, 
   0x37, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 
   0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 
   0x34, 0x34, 0x35, 0x34, 0x35, 0x36, 0x36, 0x36, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 
   0x34, 0x34, 0x34, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x32, 0x33, 0x32, 0x34, 0x33, 0x34, 0x35, 
   0x35, 0x35, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x35, 0x36, 
   0x35, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2A, 0x29, 0x2A, 0x2B, 0x29, 0x2B, 0x28, 0x29, 0x28, 0x27, 0x28, 0x27, 0x25, 
   0x26, 0x25, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 
   0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x26, 0x28, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 
   0x28, 0x28, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x26, 0x25, 0x26, 0x25, 0x25, 
   0x25, 0x26, 0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 0x25, 0x26, 0x26, 0x25, 0x26, 0x25, 0x23, 0x25, 
   0x23, 0x23, 0x23, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x23, 0x22, 0x23, 0x23, 
   0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 0x23, 
   0x24, 0x24, 0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x24, 0x22, 0x24, 
   0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x27, 
   0x26, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x2A, 0x29, 
   0x2A, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x30, 0x2F, 0x30, 0x31, 0x31, 0x31, 0x32, 
   0x32, 0x32, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x34, 0x34, 
   0x34, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x35, 0x36, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 
   0x34, 0x34, 0x34, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2D, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 
   0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 
   0x29, 0x29, 0x29, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2B, 
   0x2C, 0x2B, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 
   0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x3B, 0x3C, 0x3B, 0x3F, 0x3F, 0x3F, 0x41, 
   0x40, 0x41, 0x42, 0x41, 0x42, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x47, 0x47, 0x47, 0x48, 0x48, 
   0x48, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 
   0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x28, 0x28, 0x28, 0x29, 0x2A, 0x29, 0x2A, 0x2B, 0x2A, 0x2C, 
   0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x28, 0x28, 
   0x28, 0x28, 0x28, 0x28, 0x26, 0x26, 0x26, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 
   0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x2C, 0x2C, 0x2C, 0x2E, 0x2E, 0x2E, 0x2F, 
   0x30, 0x2F, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x35, 0x35, 0x35, 0x37, 0x37, 0x37, 0x38, 0x38, 
   0x38, 0x39, 0x39, 0x39, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 
   0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x40, 
   0x3F, 0x40, 0x42, 0x41, 0x42, 0x43, 0x43, 0x43, 0x46, 0x45, 0x46, 0x45, 0x46, 0x45, 0x45, 0x46, 
   0x45, 0x45, 0x45, 0x45, 0x44, 0x46, 0x44, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x48, 0x47, 0x48, 
   0x49, 0x48, 0x49, 0x47, 0x48, 0x47, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x45, 0x46, 0x45, 0x46, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 
   0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x3D, 
   0x3E, 0x3D, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x37, 0x37, 
   0x37, 0x36, 0x36, 0x36, 0x34, 0x34, 0x34, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 
   0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x33, 
   0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x34, 0x35, 
   0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x31, 0x33, 0x31, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x37, 
   0x37, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x38, 
   0x38, 0x38, 0x37, 0x38, 0x36, 0x36, 0x36, 0x34, 0x35, 0x34, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 
   0x2F, 0x30, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 
   0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 
   0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x28, 0x29, 0x28, 
   0x27, 0x29, 0x27, 0x26, 0x27, 0x26, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x24, 
   0x25, 0x24, 0x24, 0x25, 0x24, 0x26, 0x25, 0x26, 0x26, 0x25, 0x26, 0x26, 0x25, 0x26, 0x26, 0x25, 
   0x26, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 
   0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 
   0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x24, 0x25, 0x24, 
   0x22, 0x22, 0x22, 0x20, 0x21, 0x20, 0x1F, 0x20, 0x1F, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x21, 
   0x21, 0x21, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 
   0x24, 0x23, 0x23, 0x23, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x22, 0x21, 0x22, 
   0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x23, 
   0x23, 0x23, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 0x28, 0x28, 
   0x28, 0x2A, 0x2A, 0x2A, 0x2B, 0x2C, 0x2B, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 
   0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x31, 
   0x33, 0x31, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 
   0x32, 0x33, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x28, 0x29, 0x28, 0x29, 0x28, 
   0x29, 0x27, 0x28, 0x27, 0x28, 0x28, 0x28, 0x27, 0x28, 0x27, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 
   0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 
   0x2B, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x30, 0x2F, 
   0x30, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 
   0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x3C, 0x3B, 0x3C, 0x3E, 0x3E, 0x3E, 0x40, 
   0x40, 0x40, 0x42, 0x41, 0x42, 0x43, 0x43, 0x43, 0x45, 0x44, 0x45, 0x46, 0x46, 0x46, 0x48, 0x49, 
   0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 
   0x49, 0x4A, 0x49, 0x4A, 0x49, 0x4A, 0x29, 0x2A, 0x29, 0x2A, 0x2B, 0x2A, 0x2D, 0x2B, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2A, 0x2C, 0x2A, 0x29, 0x2A, 0x28, 0x29, 
   0x28, 0x26, 0x28, 0x26, 0x26, 0x26, 0x26, 0x24, 0x25, 0x24, 0x25, 0x23, 0x25, 0x25, 0x23, 0x25, 
   0x23, 0x25, 0x23, 0x27, 0x26, 0x27, 0x29, 0x28, 0x29, 0x2B, 0x2B, 0x2B, 0x2E, 0x2D, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x31, 0x30, 0x31, 0x34, 0x32, 0x34, 0x33, 0x34, 0x33, 0x37, 0x37, 0x37, 0x39, 0x39, 
   0x39, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3E, 0x3F, 0x40, 0x40, 0x40, 0x42, 0x43, 0x42, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 
   0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x45, 0x46, 0x45, 0x44, 0x45, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 
   0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3E, 0x3F, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x39, 0x38, 0x39, 0x36, 0x37, 
   0x36, 0x33, 0x35, 0x33, 0x34, 0x34, 0x34, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 
   0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x35, 0x34, 0x36, 0x35, 0x36, 0x37, 0x37, 0x37, 0x36, 0x36, 
   0x36, 0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x36, 0x35, 0x36, 0x34, 0x35, 0x34, 0x34, 0x35, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x35, 0x33, 0x35, 0x35, 0x36, 0x35, 0x37, 
   0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x38, 0x38, 
   0x38, 0x36, 0x38, 0x36, 0x36, 0x36, 0x36, 0x36, 0x34, 0x36, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 
   0x2F, 0x30, 0x2F, 0x2D, 0x2E, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x29, 0x29, 
   0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x26, 0x28, 0x26, 0x26, 0x26, 0x26, 
   0x27, 0x25, 0x27, 0x25, 0x25, 0x25, 0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x23, 0x22, 0x23, 0x23, 
   0x22, 0x23, 0x23, 0x23, 0x23, 0x25, 0x24, 0x25, 0x23, 0x24, 0x23, 0x25, 0x24, 0x25, 0x24, 0x24, 
   0x24, 0x24, 0x24, 0x24, 0x25, 0x23, 0x25, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 
   0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 
   0x25, 0x25, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x25, 0x25, 0x25, 
   0x22, 0x23, 0x22, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x21, 
   0x20, 0x21, 0x21, 0x21, 0x21, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 0x23, 
   0x24, 0x23, 0x23, 0x23, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 
   0x20, 0x21, 0x20, 0x22, 0x22, 0x22, 0x23, 0x22, 0x23, 0x20, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x26, 0x25, 0x26, 0x25, 0x27, 
   0x25, 0x28, 0x29, 0x28, 0x2C, 0x2A, 0x2C, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 
   0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x2F, 0x32, 
   0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 0x34, 0x33, 
   0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x34, 0x31, 0x34, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2D, 0x2F, 0x2D, 0x2C, 0x2D, 0x2B, 
   0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x28, 0x29, 0x27, 0x27, 
   0x27, 0x27, 0x26, 0x27, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2B, 0x2B, 0x2B, 0x2C, 
   0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x30, 0x2F, 0x30, 0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x34, 0x33, 0x34, 
   0x33, 0x35, 0x33, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x3A, 0x3A, 0x3A, 0x3E, 0x3D, 0x3E, 0x3E, 
   0x3F, 0x3E, 0x40, 0x41, 0x40, 0x42, 0x43, 0x42, 0x44, 0x46, 0x44, 0x47, 0x47, 0x47, 0x46, 0x47, 
   0x46, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2E, 
   0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x28, 
   0x2A, 0x27, 0x27, 0x27, 0x25, 0x26, 0x25, 0x25, 0x24, 0x25, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 
   0x24, 0x23, 0x24, 0x25, 0x25, 0x25, 0x28, 0x27, 0x28, 0x2B, 0x2A, 0x2B, 0x2C, 0x2C, 0x2C, 0x2F, 
   0x2E, 0x2F, 0x31, 0x30, 0x31, 0x32, 0x32, 0x32, 0x34, 0x34, 0x34, 0x36, 0x36, 0x36, 0x38, 0x39, 
   0x38, 0x3C, 0x3A, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3E, 0x3D, 0x3E, 
   0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x41, 0x3F, 0x42, 0x42, 0x42, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x44, 0x45, 
   0x44, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 
   0x46, 0x48, 0x46, 0x47, 0x46, 0x47, 0x46, 0x46, 0x46, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 
   0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x45, 0x44, 
   0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x42, 0x42, 0x42, 
   0x40, 0x42, 0x40, 0x42, 0x41, 0x42, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 
   0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x39, 0x3A, 0x39, 0x3B, 0x38, 0x3B, 0x38, 0x38, 0x38, 0x37, 0x37, 
   0x37, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x31, 0x32, 
   0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 
   0x33, 0x32, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x36, 
   0x36, 0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x36, 0x35, 0x37, 0x36, 0x37, 0x37, 
   0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 
   0x39, 0x38, 0x38, 0x38, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 
   0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x27, 0x26, 
   0x27, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x25, 0x25, 0x25, 
   0x25, 0x25, 0x25, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x22, 0x22, 0x22, 
   0x21, 0x22, 0x23, 0x22, 0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x23, 0x23, 
   0x23, 0x23, 0x23, 0x23, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 
   0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 
   0x25, 0x25, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x25, 0x24, 0x25, 
   0x22, 0x23, 0x22, 0x20, 0x21, 0x20, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x21, 0x20, 0x21, 0x1F, 
   0x1F, 0x1F, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x23, 0x22, 0x23, 0x24, 0x23, 0x24, 0x23, 0x23, 
   0x23, 0x23, 0x23, 0x23, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 
   0x1F, 0x20, 0x1F, 0x21, 0x21, 0x21, 0x22, 0x20, 0x22, 0x20, 0x1F, 0x20, 0x1E, 0x1E, 0x1E, 0x1D, 
   0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x20, 0x20, 0x20, 0x21, 0x22, 0x21, 0x23, 0x23, 0x23, 0x25, 0x26, 
   0x25, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2C, 0x2B, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x31, 
   0x31, 0x31, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x30, 0x31, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x29, 
   0x2B, 0x29, 0x2B, 0x29, 0x2B, 0x29, 0x29, 0x29, 0x27, 0x29, 0x27, 0x28, 0x27, 0x28, 0x27, 0x27, 
   0x27, 0x26, 0x26, 0x26, 0x25, 0x26, 0x25, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
   0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x2B, 0x29, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 
   0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 
   0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x38, 0x37, 0x38, 0x3C, 0x3A, 0x3C, 0x3C, 0x3C, 0x3C, 0x3F, 
   0x3E, 0x3F, 0x3F, 0x41, 0x3F, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x46, 0x46, 0x46, 0x48, 0x47, 
   0x48, 0x48, 0x48, 0x48, 0x4A, 0x4A, 0x4A, 0x48, 0x49, 0x48, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2F, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x28, 0x29, 
   0x28, 0x26, 0x27, 0x26, 0x25, 0x25, 0x25, 0x24, 0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 
   0x24, 0x23, 0x24, 0x26, 0x24, 0x26, 0x25, 0x27, 0x25, 0x29, 0x28, 0x29, 0x2B, 0x2A, 0x2B, 0x2C, 
   0x2D, 0x2C, 0x30, 0x30, 0x30, 0x32, 0x32, 0x32, 0x34, 0x34, 0x34, 0x37, 0x37, 0x37, 0x39, 0x38, 
   0x39, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 
   0x3F, 0x3D, 0x3F, 0x3E, 0x3D, 0x3E, 0x3D, 0x3F, 0x3D, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x41, 0x40, 0x41, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 
   0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 
   0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x44, 0x44, 0x45, 0x44, 
   0x45, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 
   0x3D, 0x3E, 0x3C, 0x3B, 0x3C, 0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 0x37, 0x38, 0x37, 0x36, 0x37, 
   0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x34, 0x33, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 
   0x36, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 
   0x34, 0x35, 0x34, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x37, 0x36, 0x37, 0x39, 
   0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x34, 0x33, 0x34, 0x33, 0x31, 0x33, 
   0x2F, 0x2F, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2C, 
   0x2B, 0x2C, 0x2A, 0x29, 0x2A, 0x28, 0x27, 0x28, 0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 0x26, 0x25, 
   0x26, 0x24, 0x25, 0x24, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x23, 0x22, 0x23, 
   0x24, 0x22, 0x24, 0x21, 0x23, 0x21, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 0x22, 
   0x23, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 
   0x20, 0x20, 0x20, 0x22, 0x21, 0x22, 0x23, 0x22, 0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 
   0x25, 0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 
   0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x25, 0x27, 0x24, 0x26, 0x24, 0x24, 0x24, 0x24, 
   0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x20, 0x20, 0x20, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x1F, 0x1F, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1D, 0x1D, 0x1C, 0x1D, 0x1B, 
   0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1D, 0x1E, 0x1D, 0x1F, 0x1D, 0x1F, 0x22, 0x21, 0x22, 0x25, 0x24, 
   0x25, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2B, 0x2A, 0x2B, 
   0x2C, 0x2C, 0x2C, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 
   0x33, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x2F, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2B, 
   0x2A, 0x2B, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x27, 0x26, 0x27, 0x26, 0x25, 
   0x26, 0x24, 0x25, 0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 
   0x29, 0x28, 0x29, 0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x2B, 0x2A, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x32, 0x32, 0x32, 
   0x34, 0x34, 0x34, 0x35, 0x36, 0x35, 0x38, 0x38, 0x38, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3D, 
   0x3D, 0x3D, 0x40, 0x3F, 0x40, 0x41, 0x41, 0x41, 0x43, 0x43, 0x43, 0x46, 0x46, 0x46, 0x47, 0x47, 
   0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 
   0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x29, 
   0x2A, 0x28, 0x27, 0x28, 0x25, 0x24, 0x25, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 
   0x23, 0x23, 0x23, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x28, 0x27, 0x28, 0x29, 0x2A, 0x29, 0x2C, 
   0x2D, 0x2C, 0x2E, 0x2F, 0x2E, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x36, 0x35, 0x36, 0x38, 0x38, 
   0x38, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 
   0x3F, 0x3E, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x43, 0x44, 0x43, 0x43, 0x43, 
   0x43, 0x44, 0x43, 0x44, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x41, 
   0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 0x45, 
   0x43, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x43, 0x44, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3D, 0x3F, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x37, 0x39, 0x37, 0x39, 0x38, 0x39, 0x35, 0x36, 
   0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 
   0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x31, 0x32, 0x32, 0x33, 0x32, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 
   0x35, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x37, 0x36, 0x37, 
   0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x38, 0x39, 0x38, 0x39, 0x37, 0x39, 0x36, 0x35, 0x36, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 
   0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x29, 0x2A, 0x29, 0x2A, 
   0x2B, 0x2A, 0x2A, 0x29, 0x2A, 0x27, 0x27, 0x27, 0x25, 0x26, 0x25, 0x24, 0x24, 0x24, 0x23, 0x23, 
   0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x21, 0x20, 0x21, 0x1F, 
   0x20, 0x1F, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x22, 
   0x22, 0x20, 0x20, 0x20, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1E, 0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x23, 0x22, 0x23, 0x24, 0x23, 0x24, 0x24, 
   0x24, 0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x25, 0x26, 
   0x25, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 
   0x22, 0x21, 0x22, 0x21, 0x20, 0x21, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 0x1F, 0x1E, 
   0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1E, 0x1E, 
   0x1D, 0x1F, 0x1D, 0x1E, 0x1D, 0x1E, 0x1C, 0x1C, 0x1C, 0x1A, 0x1B, 0x1A, 0x1B, 0x1B, 0x1B, 0x1B, 
   0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1D, 0x1D, 0x1D, 0x21, 0x20, 0x21, 0x22, 0x23, 
   0x22, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x2B, 0x2A, 0x2B, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2D, 0x2C, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x2F, 
   0x30, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 
   0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2A, 
   0x2B, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x25, 0x24, 
   0x25, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x2B, 0x29, 0x2B, 0x2A, 0x2B, 0x2A, 0x2C, 
   0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x32, 0x31, 
   0x34, 0x33, 0x34, 0x36, 0x36, 0x36, 0x38, 0x38, 0x38, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3C, 
   0x3D, 0x3C, 0x3F, 0x3E, 0x3F, 0x42, 0x41, 0x42, 0x43, 0x42, 0x43, 0x44, 0x45, 0x44, 0x47, 0x47, 
   0x47, 0x48, 0x48, 0x48, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4C, 0x4B, 0x4C, 0x4A, 0x4B, 0x4A, 
   0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x28, 0x29, 
   0x28, 0x26, 0x26, 0x26, 0x25, 0x24, 0x25, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 
   0x23, 0x23, 0x23, 0x23, 0x25, 0x23, 0x26, 0x25, 0x26, 0x29, 0x27, 0x29, 0x2B, 0x2A, 0x2B, 0x2C, 
   0x2D, 0x2C, 0x2D, 0x2E, 0x2D, 0x31, 0x30, 0x31, 0x33, 0x32, 0x33, 0x36, 0x35, 0x36, 0x38, 0x38, 
   0x38, 0x3A, 0x39, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 
   0x3F, 0x3E, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x44, 0x42, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 
   0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x43, 
   0x44, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 0x44, 0x42, 0x42, 0x43, 0x42, 
   0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x3E, 0x3F, 0x3E, 0x3C, 
   0x3D, 0x3C, 0x3B, 0x3B, 0x3B, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x35, 0x37, 0x35, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 
   0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 
   0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x35, 0x34, 0x35, 0x36, 0x35, 0x36, 0x36, 0x37, 0x36, 0x39, 
   0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x33, 0x33, 0x33, 0x33, 0x31, 0x33, 
   0x2F, 0x30, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x29, 
   0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x28, 0x28, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x23, 0x22, 
   0x23, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x20, 0x1F, 0x20, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x21, 
   0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x20, 0x21, 
   0x20, 0x1E, 0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1D, 0x1F, 0x1C, 0x1C, 0x1C, 0x1D, 0x1E, 0x1D, 
   0x1F, 0x1E, 0x1F, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x25, 
   0x23, 0x25, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x27, 0x25, 0x27, 0x25, 0x26, 0x25, 0x24, 0x26, 
   0x24, 0x25, 0x24, 0x25, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x23, 0x21, 0x23, 
   0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1E, 0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1D, 0x1E, 0x1D, 0x1C, 0x1E, 0x1C, 0x1D, 0x1D, 0x1D, 0x1D, 0x1E, 
   0x1D, 0x1C, 0x1D, 0x1C, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1F, 0x1D, 0x1F, 0x1D, 0x1D, 0x1D, 
   0x1C, 0x1E, 0x1C, 0x1C, 0x1D, 0x1C, 0x1B, 0x1B, 0x1B, 0x1A, 0x1A, 0x1A, 0x19, 0x19, 0x19, 0x19, 
   0x19, 0x19, 0x19, 0x19, 0x19, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1F, 0x1E, 0x1F, 0x21, 0x22, 
   0x21, 0x24, 0x24, 0x24, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x2B, 0x2B, 0x2B, 
   0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 
   0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x2E, 0x30, 0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 0x25, 0x25, 0x25, 0x24, 0x23, 
   0x24, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 
   0x27, 0x26, 0x27, 0x26, 0x27, 0x26, 0x26, 0x27, 0x26, 0x29, 0x29, 0x29, 0x2B, 0x2B, 0x2B, 0x2C, 
   0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x31, 0x32, 0x31, 
   0x34, 0x34, 0x34, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3A, 0x3B, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 0x40, 0x3F, 0x41, 0x41, 0x41, 0x43, 0x44, 0x43, 0x47, 0x47, 
   0x47, 0x4A, 0x48, 0x4A, 0x48, 0x4A, 0x48, 0x4B, 0x4B, 0x4B, 0x4A, 0x4C, 0x4A, 0x4C, 0x4C, 0x4C, 
   0x4D, 0x4C, 0x4D, 0x4A, 0x4C, 0x4A, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 
   0x2F, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x29, 0x29, 
   0x29, 0x28, 0x26, 0x28, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 
   0x23, 0x23, 0x23, 0x24, 0x25, 0x24, 0x25, 0x26, 0x25, 0x27, 0x28, 0x27, 0x2A, 0x2A, 0x2A, 0x2C, 
   0x2B, 0x2C, 0x2E, 0x2D, 0x2E, 0x31, 0x2F, 0x31, 0x33, 0x31, 0x33, 0x35, 0x35, 0x35, 0x38, 0x38, 
   0x38, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 
   0x3F, 0x3D, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x41, 0x40, 0x3F, 0x41, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x40, 0x3E, 0x40, 0x41, 0x40, 0x43, 0x41, 0x43, 0x42, 0x42, 
   0x42, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x41, 0x42, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x43, 0x42, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x42, 0x43, 0x42, 
   0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3D, 0x3E, 0x3D, 0x3C, 
   0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 
   0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 0x35, 0x34, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x38, 
   0x38, 0x38, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x38, 0x39, 
   0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x36, 0x35, 0x36, 0x34, 0x33, 0x34, 0x31, 0x31, 0x31, 
   0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x28, 0x2A, 0x28, 0x28, 0x28, 0x26, 0x27, 0x26, 0x26, 0x25, 0x26, 0x24, 0x24, 0x24, 0x22, 0x22, 
   0x22, 0x1F, 0x20, 0x1F, 0x21, 0x20, 0x21, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1D, 0x1C, 0x1D, 0x1C, 
   0x1F, 0x1F, 0x1F, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x20, 
   0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x20, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x1F, 0x1F, 
   0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1C, 0x1E, 0x1B, 0x1C, 0x1B, 0x1B, 0x1C, 0x1B, 
   0x1F, 0x1D, 0x1F, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x24, 
   0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x25, 0x24, 0x26, 0x25, 0x26, 0x24, 0x26, 0x24, 0x24, 0x24, 
   0x24, 0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 0x21, 0x22, 0x21, 0x23, 0x22, 0x23, 0x21, 0x20, 0x21, 
   0x1F, 0x20, 0x1F, 0x1E, 0x1F, 0x1E, 0x1D, 0x1E, 0x1D, 0x1D, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1C, 0x1C, 0x1C, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x1B, 0x1A, 0x1C, 
   0x1A, 0x1A, 0x1C, 0x1A, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1E, 0x1D, 0x1E, 0x1C, 0x1C, 0x1C, 
   0x1D, 0x1B, 0x1D, 0x1C, 0x1B, 0x1C, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x18, 0x19, 0x18, 0x17, 
   0x19, 0x17, 0x17, 0x19, 0x17, 0x18, 0x19, 0x18, 0x1B, 0x1B, 0x1B, 0x1D, 0x1D, 0x1D, 0x20, 0x21, 
   0x20, 0x25, 0x23, 0x25, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x2A, 0x2A, 0x2A, 
   0x2B, 0x2B, 0x2B, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2A, 
   0x2B, 0x2A, 0x29, 0x29, 0x29, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x24, 0x25, 0x24, 0x23, 0x23, 
   0x23, 0x23, 0x23, 0x23, 0x22, 0x22, 0x22, 0x23, 0x24, 0x23, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 
   0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 
   0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x31, 0x30, 0x31, 
   0x33, 0x34, 0x33, 0x36, 0x37, 0x36, 0x38, 0x39, 0x38, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3D, 
   0x3B, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x40, 0x3E, 0x40, 0x42, 0x40, 0x43, 0x45, 0x43, 0x47, 0x47, 
   0x47, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 
   0x4B, 0x4D, 0x4B, 0x4B, 0x4C, 0x4B, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2C, 0x2E, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x29, 0x29, 
   0x29, 0x27, 0x26, 0x27, 0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 
   0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x25, 0x26, 0x25, 0x28, 0x28, 0x28, 0x2B, 0x29, 0x2B, 0x2D, 
   0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x30, 0x30, 0x30, 0x32, 0x32, 0x32, 0x35, 0x34, 0x35, 0x36, 0x37, 
   0x36, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3A, 0x3B, 0x3B, 0x3C, 0x3B, 0x3D, 0x3C, 0x3D, 
   0x3E, 0x3E, 0x3E, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 0x42, 0x43, 
   0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 
   0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x41, 0x41, 0x41, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x42, 0x41, 0x42, 0x43, 
   0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 
   0x3D, 0x3E, 0x3B, 0x3B, 0x3B, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x38, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x35, 0x34, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x39, 
   0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x38, 0x39, 0x38, 0x37, 0x38, 0x35, 0x35, 0x35, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 
   0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 0x2B, 0x2C, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x28, 0x29, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x24, 0x24, 0x24, 0x22, 0x23, 0x22, 0x21, 0x21, 
   0x21, 0x20, 0x1F, 0x20, 0x1F, 0x1E, 0x1F, 0x1F, 0x1D, 0x1F, 0x1C, 0x1D, 0x1C, 0x1C, 0x1D, 0x1C, 
   0x1D, 0x1D, 0x1D, 0x1F, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1C, 0x1E, 0x1C, 0x1D, 0x1E, 0x1D, 0x1D, 
   0x1E, 0x1D, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 
   0x1E, 0x1C, 0x1D, 0x1C, 0x1C, 0x1C, 0x1C, 0x1B, 0x1C, 0x1B, 0x1B, 0x1B, 0x1B, 0x1A, 0x1B, 0x1A, 
   0x1C, 0x1D, 0x1C, 0x20, 0x1F, 0x20, 0x21, 0x20, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 
   0x22, 0x22, 0x23, 0x24, 0x23, 0x25, 0x24, 0x25, 0x24, 0x26, 0x24, 0x25, 0x25, 0x25, 0x24, 0x24, 
   0x24, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x23, 0x22, 0x23, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 
   0x21, 0x20, 0x21, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 0x1E, 0x1E, 0x1E, 0x1D, 
   0x1D, 0x1D, 0x1D, 0x1C, 0x1D, 0x1A, 0x1B, 0x1A, 0x1C, 0x1B, 0x1C, 0x1A, 0x1B, 0x1A, 0x1A, 0x1B, 
   0x1A, 0x1A, 0x1B, 0x1A, 0x1A, 0x1B, 0x1A, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1C, 0x1A, 0x1B, 0x1A, 
   0x1C, 0x1B, 0x1C, 0x19, 0x1A, 0x19, 0x18, 0x19, 0x18, 0x19, 0x18, 0x19, 0x17, 0x17, 0x17, 0x17, 
   0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x19, 0x19, 0x19, 0x1B, 0x1B, 0x1B, 0x1F, 0x1F, 
   0x1F, 0x23, 0x22, 0x23, 0x25, 0x24, 0x25, 0x26, 0x26, 0x26, 0x28, 0x27, 0x28, 0x2A, 0x2A, 0x2A, 
   0x2B, 0x2A, 0x2B, 0x2D, 0x2C, 0x2D, 0x2D, 0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2C, 0x2E, 0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 
   0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x28, 0x28, 0x28, 0x26, 0x26, 0x26, 0x24, 0x24, 0x24, 0x23, 0x23, 
   0x23, 0x22, 0x22, 0x22, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x25, 0x24, 0x25, 0x25, 0x26, 0x25, 
   0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x2B, 0x2B, 0x2B, 0x2C, 
   0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2E, 0x2D, 0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x31, 0x30, 
   0x34, 0x34, 0x34, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 0x3C, 0x3D, 
   0x3C, 0x3D, 0x3E, 0x3E, 0x3E, 0x3F, 0x40, 0x3F, 0x41, 0x42, 0x41, 0x43, 0x45, 0x43, 0x48, 0x47, 
   0x48, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 
   0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2D, 0x2E, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2A, 0x2B, 0x29, 0x28, 
   0x29, 0x27, 0x26, 0x27, 0x25, 0x24, 0x25, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x25, 0x22, 0x25, 
   0x24, 0x23, 0x24, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x28, 0x28, 0x28, 0x2A, 0x2A, 0x2A, 0x2B, 
   0x2D, 0x2B, 0x2F, 0x2E, 0x2F, 0x30, 0x30, 0x30, 0x33, 0x33, 0x33, 0x36, 0x34, 0x36, 0x36, 0x36, 
   0x36, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 
   0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 0x3D, 0x3F, 0x3D, 0x3E, 0x3D, 0x3E, 
   0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x41, 0x41, 
   0x41, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x3E, 
   0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x3E, 0x3E, 0x3E, 0x3A, 
   0x3C, 0x3A, 0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 
   0x37, 0x36, 0x37, 0x36, 0x35, 0x37, 0x35, 0x38, 0x37, 0x38, 0x38, 0x37, 0x38, 0x36, 0x36, 0x36, 
   0x37, 0x35, 0x37, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x31, 0x33, 0x31, 0x33, 
   0x33, 0x33, 0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x34, 0x34, 
   0x34, 0x34, 0x35, 0x34, 0x34, 0x35, 0x34, 0x33, 0x35, 0x33, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x39, 0x39, 0x39, 0x38, 0x39, 
   0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x35, 0x35, 0x35, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 
   0x30, 0x2F, 0x30, 0x2E, 0x2E, 0x2E, 0x2B, 0x2C, 0x2B, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x27, 
   0x27, 0x27, 0x27, 0x25, 0x27, 0x25, 0x24, 0x25, 0x23, 0x23, 0x23, 0x21, 0x21, 0x21, 0x1F, 0x1F, 
   0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1B, 0x1C, 0x1B, 0x1B, 0x1C, 0x1B, 
   0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 
   0x1B, 0x1B, 0x1E, 0x1C, 0x1E, 0x1D, 0x1E, 0x1D, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1C, 0x1D, 
   0x1C, 0x1A, 0x1C, 0x1A, 0x1C, 0x1B, 0x1C, 0x1B, 0x1B, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 
   0x1A, 0x1B, 0x1A, 0x1D, 0x1E, 0x1D, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x21, 0x20, 0x21, 0x20, 
   0x20, 0x20, 0x23, 0x22, 0x23, 0x25, 0x23, 0x25, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x24, 0x23, 
   0x24, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x22, 0x22, 0x22, 0x20, 0x21, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x1F, 0x20, 0x1F, 0x1D, 0x1F, 0x1C, 0x1D, 0x1C, 0x1D, 0x1D, 0x1D, 0x1C, 0x1C, 0x1C, 0x1B, 
   0x1B, 0x1B, 0x1B, 0x1C, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1B, 0x19, 0x1A, 
   0x19, 0x1A, 0x19, 0x1A, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x1A, 0x1A, 0x19, 0x1A, 0x19, 
   0x17, 0x19, 0x17, 0x18, 0x18, 0x18, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x16, 0x16, 0x16, 0x16, 
   0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x17, 0x16, 0x1A, 0x1A, 0x1A, 0x1D, 0x1D, 
   0x1D, 0x1E, 0x20, 0x1E, 0x22, 0x22, 0x22, 0x23, 0x24, 0x23, 0x26, 0x26, 0x26, 0x29, 0x28, 0x29, 
   0x2B, 0x29, 0x2B, 0x2A, 0x2A, 0x2A, 0x2B, 0x2C, 0x2B, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2A, 
   0x2A, 0x2A, 0x28, 0x29, 0x28, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x25, 0x25, 0x25, 0x23, 0x23, 
   0x23, 0x22, 0x21, 0x22, 0x22, 0x21, 0x22, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 
   0x26, 0x25, 0x26, 0x26, 0x26, 0x26, 0x28, 0x27, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2C, 
   0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 
   0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2F, 0x2E, 0x31, 0x31, 0x31, 
   0x33, 0x33, 0x33, 0x36, 0x36, 0x36, 0x38, 0x38, 0x38, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 
   0x3D, 0x3C, 0x3F, 0x3E, 0x3F, 0x3E, 0x40, 0x3E, 0x40, 0x42, 0x40, 0x43, 0x45, 0x43, 0x46, 0x47, 
   0x46, 0x48, 0x49, 0x48, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 
   0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x2D, 0x2B, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x28, 0x28, 
   0x28, 0x27, 0x26, 0x27, 0x25, 0x24, 0x25, 0x25, 0x23, 0x25, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 
   0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x28, 0x27, 0x28, 0x2A, 0x2A, 0x2A, 0x2D, 
   0x2D, 0x2D, 0x2E, 0x2F, 0x2E, 0x30, 0x31, 0x30, 0x33, 0x34, 0x33, 0x35, 0x35, 0x35, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 
   0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3E, 0x3C, 0x3E, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x40, 0x3F, 0x40, 0x3F, 0x40, 
   0x3F, 0x42, 0x41, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 
   0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x40, 0x3F, 0x40, 0x40, 
   0x3F, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x3F, 0x41, 0x3F, 
   0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3F, 0x40, 0x3F, 0x3E, 0x3D, 0x3E, 0x3B, 
   0x3B, 0x3B, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x37, 0x38, 0x37, 0x37, 
   0x37, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x39, 0x38, 0x39, 0x38, 0x37, 0x38, 
   0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x33, 
   0x34, 0x33, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x34, 0x35, 0x33, 0x34, 0x33, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 
   0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x37, 0x36, 0x37, 0x38, 
   0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 
   0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x30, 0x31, 0x30, 
   0x2F, 0x30, 0x2F, 0x2E, 0x2E, 0x2E, 0x2C, 0x2D, 0x2C, 0x2A, 0x2A, 0x2A, 0x28, 0x28, 0x28, 0x27, 
   0x26, 0x27, 0x25, 0x25, 0x25, 0x23, 0x23, 0x23, 0x21, 0x22, 0x21, 0x20, 0x20, 0x20, 0x1E, 0x1F, 
   0x1E, 0x1C, 0x1D, 0x1C, 0x1C, 0x1D, 0x1C, 0x1C, 0x1C, 0x1C, 0x1D, 0x1C, 0x1D, 0x1A, 0x1C, 0x1A, 
   0x1B, 0x1B, 0x1B, 0x19, 0x1B, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x1A, 0x19, 0x1A, 
   0x1B, 0x1A, 0x1A, 0x1B, 0x1A, 0x1C, 0x1C, 0x1C, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1B, 0x1C, 
   0x1B, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x1B, 0x1A, 
   0x1A, 0x1B, 0x1A, 0x1C, 0x1C, 0x1C, 0x1E, 0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 
   0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x1F, 0x1E, 0x1F, 0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 0x1D, 0x1C, 0x1C, 0x1C, 0x1A, 0x1B, 0x1A, 0x1C, 
   0x1B, 0x1C, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x18, 0x1A, 
   0x18, 0x18, 0x18, 0x18, 0x19, 0x18, 0x19, 0x19, 0x18, 0x19, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
   0x16, 0x18, 0x16, 0x17, 0x16, 0x17, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 
   0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x18, 0x18, 0x18, 0x1D, 0x1B, 
   0x1D, 0x1D, 0x1E, 0x1D, 0x1F, 0x20, 0x1F, 0x23, 0x22, 0x23, 0x25, 0x25, 0x25, 0x28, 0x28, 0x28, 
   0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 
   0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2A, 0x2B, 0x29, 0x29, 0x29, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x25, 0x25, 0x25, 0x23, 0x23, 
   0x23, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x22, 0x23, 0x22, 0x24, 0x23, 0x24, 0x25, 0x24, 0x25, 
   0x26, 0x25, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x2B, 0x2A, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x31, 0x30, 0x31, 
   0x33, 0x33, 0x33, 0x36, 0x36, 0x36, 0x39, 0x38, 0x39, 0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 0x3C, 0x3D, 
   0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x43, 0x45, 0x43, 0x46, 0x47, 
   0x46, 0x48, 0x49, 0x48, 0x48, 0x4A, 0x48, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4C, 0x4C, 
   0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 
   0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2B, 0x29, 0x2B, 0x29, 0x28, 0x29, 0x27, 0x27, 
   0x27, 0x27, 0x25, 0x27, 0x25, 0x25, 0x25, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 
   0x23, 0x25, 0x23, 0x26, 0x25, 0x26, 0x26, 0x26, 0x26, 0x29, 0x28, 0x29, 0x2B, 0x2A, 0x2B, 0x2D, 
   0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x31, 0x32, 0x31, 0x33, 0x34, 0x33, 0x37, 0x36, 0x37, 0x35, 0x36, 
   0x35, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3F, 0x3E, 0x3F, 0x3D, 0x3E, 
   0x3D, 0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x40, 0x43, 0x40, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x40, 0x41, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3F, 
   0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x40, 0x3F, 0x41, 0x40, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x3D, 0x3D, 0x3D, 0x3A, 
   0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x35, 0x36, 
   0x35, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x35, 0x36, 0x33, 0x35, 0x33, 0x35, 0x33, 0x35, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x35, 0x35, 
   0x35, 0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x37, 0x35, 0x37, 0x35, 0x36, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x34, 0x35, 0x34, 0x33, 0x32, 0x33, 0x30, 0x30, 0x30, 
   0x2F, 0x30, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2C, 0x2B, 0x2C, 0x28, 0x28, 0x28, 0x26, 
   0x26, 0x26, 0x25, 0x26, 0x25, 0x23, 0x23, 0x23, 0x22, 0x21, 0x22, 0x21, 0x20, 0x21, 0x1D, 0x1E, 
   0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1C, 0x1D, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1A, 0x1B, 0x1A, 
   0x1A, 0x1A, 0x1A, 0x18, 0x19, 0x18, 0x17, 0x18, 0x17, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x17, 
   0x19, 0x17, 0x1A, 0x1A, 0x1A, 0x1B, 0x1B, 0x1B, 0x1D, 0x1D, 0x1D, 0x1C, 0x1C, 0x1C, 0x1A, 0x1B, 
   0x1A, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x19, 0x19, 0x19, 0x18, 0x19, 0x18, 0x19, 0x19, 0x19, 
   0x1B, 0x1A, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1D, 0x1C, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 
   0x1D, 0x1F, 0x1F, 0x1F, 0x1F, 0x21, 0x21, 0x21, 0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 
   0x22, 0x23, 0x23, 0x23, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x21, 0x1F, 0x21, 0x1F, 0x1F, 0x1F, 
   0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1C, 0x1D, 0x1A, 0x1C, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 
   0x1B, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x18, 0x19, 0x18, 0x17, 0x19, 
   0x17, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x17, 0x17, 0x17, 0x18, 0x17, 0x18, 0x16, 0x17, 0x16, 
   0x15, 0x17, 0x15, 0x15, 0x15, 0x15, 0x14, 0x15, 0x14, 0x15, 0x16, 0x15, 0x15, 0x16, 0x15, 0x15, 
   0x16, 0x15, 0x16, 0x16, 0x16, 0x14, 0x17, 0x14, 0x17, 0x17, 0x17, 0x18, 0x19, 0x18, 0x19, 0x1A, 
   0x19, 0x1D, 0x1C, 0x1D, 0x1F, 0x1E, 0x1F, 0x22, 0x22, 0x22, 0x25, 0x24, 0x25, 0x27, 0x26, 0x27, 
   0x27, 0x28, 0x27, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2D, 0x2B, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x28, 0x28, 0x28, 0x26, 0x27, 0x26, 0x24, 0x24, 0x24, 0x23, 0x22, 
   0x23, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x23, 0x22, 0x23, 0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 
   0x26, 0x25, 0x26, 0x26, 0x27, 0x26, 0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 0x2A, 0x2B, 0x2A, 0x2C, 
   0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x30, 0x30, 0x30, 
   0x33, 0x33, 0x33, 0x36, 0x36, 0x36, 0x39, 0x38, 0x39, 0x3B, 0x3A, 0x3B, 0x3D, 0x3B, 0x3D, 0x3C, 
   0x3D, 0x3C, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x40, 0x41, 0x40, 0x43, 0x44, 0x43, 0x46, 0x46, 
   0x46, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x28, 0x27, 0x28, 0x27, 0x27, 
   0x27, 0x25, 0x26, 0x25, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 
   0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x29, 0x27, 0x29, 0x29, 0x2A, 0x29, 0x2B, 0x2C, 0x2B, 0x2E, 
   0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x31, 0x32, 0x31, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x3A, 0x39, 0x3A, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3C, 
   0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3D, 0x3B, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x40, 0x3F, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 
   0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x40, 
   0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x40, 0x3E, 
   0x40, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x3F, 0x40, 0x3F, 0x3E, 0x3D, 0x3E, 0x3B, 
   0x3C, 0x3B, 0x3A, 0x3A, 0x3A, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x36, 
   0x37, 0x37, 0x36, 0x37, 0x37, 0x36, 0x37, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x38, 0x39, 0x37, 0x36, 0x37, 0x37, 0x36, 0x37, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x35, 
   0x34, 0x35, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x37, 0x36, 0x37, 
   0x35, 0x36, 0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x36, 0x35, 0x36, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 
   0x37, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x32, 0x32, 0x32, 0x30, 0x2F, 0x30, 
   0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2B, 0x2C, 0x29, 0x28, 0x29, 0x27, 
   0x26, 0x27, 0x25, 0x26, 0x25, 0x24, 0x23, 0x24, 0x22, 0x22, 0x22, 0x20, 0x20, 0x20, 0x1E, 0x1F, 
   0x1E, 0x1C, 0x1D, 0x1C, 0x1D, 0x1C, 0x1D, 0x1C, 0x1C, 0x1C, 0x1B, 0x1C, 0x1B, 0x1B, 0x1A, 0x1B, 
   0x18, 0x1A, 0x18, 0x17, 0x19, 0x17, 0x17, 0x17, 0x17, 0x16, 0x17, 0x16, 0x17, 0x17, 0x17, 0x17, 
   0x18, 0x17, 0x19, 0x19, 0x19, 0x1A, 0x1B, 0x1A, 0x1D, 0x1B, 0x1D, 0x1B, 0x1B, 0x1B, 0x1A, 0x1A, 
   0x1A, 0x19, 0x18, 0x19, 0x18, 0x18, 0x18, 0x18, 0x19, 0x18, 0x17, 0x18, 0x17, 0x18, 0x18, 0x18, 
   0x19, 0x19, 0x19, 0x1A, 0x1B, 0x1A, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1D, 0x1C, 0x1E, 
   0x1D, 0x1E, 0x1E, 0x1D, 0x1E, 0x21, 0x1F, 0x21, 0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
   0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 
   0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1B, 0x1C, 0x1B, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1B, 0x18, 
   0x1A, 0x18, 0x19, 0x18, 0x19, 0x17, 0x19, 0x17, 0x17, 0x18, 0x17, 0x17, 0x18, 0x17, 0x17, 0x17, 
   0x17, 0x16, 0x17, 0x16, 0x17, 0x17, 0x17, 0x16, 0x17, 0x16, 0x17, 0x16, 0x17, 0x16, 0x15, 0x16, 
   0x14, 0x16, 0x14, 0x14, 0x16, 0x14, 0x15, 0x16, 0x15, 0x17, 0x16, 0x17, 0x16, 0x17, 0x16, 0x16, 
   0x18, 0x16, 0x16, 0x17, 0x16, 0x16, 0x16, 0x16, 0x16, 0x17, 0x16, 0x17, 0x18, 0x17, 0x17, 0x19, 
   0x17, 0x1B, 0x1B, 0x1B, 0x1F, 0x1D, 0x1F, 0x20, 0x20, 0x20, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 
   0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2C, 
   0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2D, 0x2B, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2F, 0x2E, 0x2F, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x26, 0x24, 0x26, 0x23, 0x23, 
   0x23, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 
   0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 0x2B, 0x29, 0x2B, 0x2A, 
   0x2A, 0x2A, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x30, 0x2F, 0x30, 
   0x33, 0x32, 0x33, 0x36, 0x35, 0x36, 0x38, 0x37, 0x38, 0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 0x3C, 0x3E, 
   0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x43, 0x44, 0x43, 0x46, 0x47, 
   0x46, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x29, 0x28, 0x29, 0x28, 0x29, 0x28, 0x28, 0x29, 0x28, 0x28, 
   0x28, 0x28, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x25, 
   0x26, 0x27, 0x25, 0x27, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 
   0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2B, 0x2A, 0x2D, 0x2D, 0x2D, 0x2F, 
   0x2F, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x32, 0x31, 0x33, 0x34, 0x33, 0x35, 0x35, 0x35, 0x35, 0x34, 
   0x35, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x3B, 0x3A, 0x3B, 0x3B, 
   0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3E, 0x3C, 0x3E, 0x3D, 0x3E, 
   0x3D, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x42, 0x41, 0x42, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 
   0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 
   0x3E, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 0x3F, 0x40, 0x41, 0x40, 
   0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x3F, 0x40, 0x3F, 0x3D, 0x3F, 0x3D, 0x3C, 
   0x3D, 0x3C, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x33, 
   0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x36, 0x35, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 
   0x36, 0x37, 0x35, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 
   0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x36, 0x36, 0x36, 0x36, 
   0x36, 0x36, 0x37, 0x36, 0x37, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x34, 0x35, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 
   0x2E, 0x2E, 0x2E, 0x2C, 0x2E, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2B, 0x2C, 0x28, 0x29, 0x28, 0x27, 
   0x27, 0x27, 0x27, 0x26, 0x27, 0x25, 0x24, 0x25, 0x22, 0x23, 0x22, 0x20, 0x21, 0x20, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1C, 0x1E, 0x1B, 0x1B, 0x1B, 0x1A, 0x1A, 0x1A, 
   0x19, 0x1A, 0x19, 0x18, 0x18, 0x18, 0x17, 0x17, 0x17, 0x16, 0x17, 0x16, 0x16, 0x16, 0x16, 0x18, 
   0x17, 0x18, 0x17, 0x18, 0x17, 0x19, 0x19, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x19, 0x19, 
   0x19, 0x17, 0x18, 0x17, 0x18, 0x18, 0x18, 0x17, 0x18, 0x17, 0x17, 0x17, 0x17, 0x18, 0x17, 0x18, 
   0x17, 0x18, 0x17, 0x19, 0x19, 0x19, 0x19, 0x1A, 0x19, 0x1A, 0x1B, 0x1A, 0x1C, 0x1C, 0x1C, 0x1D, 
   0x1D, 0x1D, 0x1E, 0x1E, 0x1E, 0x20, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x20, 0x21, 0x21, 
   0x21, 0x20, 0x20, 0x20, 0x20, 0x21, 0x20, 0x20, 0x20, 0x20, 0x1E, 0x1F, 0x1E, 0x1D, 0x1E, 0x1D, 
   0x1E, 0x1E, 0x1E, 0x1C, 0x1D, 0x1C, 0x1B, 0x1B, 0x1B, 0x1B, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 0x19, 
   0x1A, 0x19, 0x17, 0x18, 0x17, 0x16, 0x18, 0x16, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 
   0x17, 0x15, 0x17, 0x15, 0x15, 0x16, 0x15, 0x15, 0x16, 0x15, 0x15, 0x16, 0x15, 0x15, 0x14, 0x15, 
   0x15, 0x16, 0x15, 0x15, 0x16, 0x15, 0x17, 0x16, 0x17, 0x18, 0x17, 0x18, 0x18, 0x18, 0x18, 0x19, 
   0x19, 0x19, 0x16, 0x18, 0x16, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x18, 0x18, 
   0x18, 0x1A, 0x1A, 0x1A, 0x1D, 0x1D, 0x1D, 0x1F, 0x1F, 0x1F, 0x22, 0x23, 0x22, 0x24, 0x24, 0x24, 
   0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x28, 0x27, 0x28, 0x28, 0x29, 0x28, 0x2B, 0x2A, 0x2B, 0x2B, 
   0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2D, 0x2E, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2B, 0x2D, 0x2B, 
   0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x28, 0x27, 0x28, 0x26, 0x26, 0x26, 0x24, 0x24, 0x24, 0x23, 0x22, 
   0x23, 0x22, 0x22, 0x22, 0x21, 0x22, 0x21, 0x22, 0x22, 0x22, 0x25, 0x23, 0x25, 0x24, 0x24, 0x24, 
   0x25, 0x26, 0x25, 0x26, 0x26, 0x26, 0x27, 0x25, 0x27, 0x28, 0x27, 0x28, 0x2B, 0x29, 0x2B, 0x2B, 
   0x2A, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2E, 0x2C, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 
   0x2E, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2B, 0x2D, 0x2B, 0x2E, 0x2E, 0x2E, 0x31, 0x30, 0x31, 
   0x33, 0x32, 0x33, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x38, 0x38, 0x38, 0x3B, 0x3B, 0x3B, 0x3C, 
   0x3C, 0x3C, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x40, 0x41, 0x40, 0x43, 0x44, 0x43, 0x45, 0x47, 
   0x45, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 
   0x49, 0x4B, 0x49, 0x4A, 0x4A, 0x4A, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x27, 
   0x27, 0x27, 0x28, 0x27, 0x28, 0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 0x25, 0x26, 0x25, 0x25, 0x25, 
   0x25, 0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x27, 0x26, 
   0x27, 0x27, 0x27, 0x2B, 0x29, 0x2B, 0x2A, 0x2A, 0x2A, 0x2C, 0x2C, 0x2C, 0x2E, 0x2D, 0x2E, 0x30, 
   0x2F, 0x30, 0x31, 0x30, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x35, 0x34, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x37, 0x36, 0x37, 
   0x37, 0x36, 0x37, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3E, 0x3D, 
   0x3E, 0x3E, 0x3E, 0x3E, 0x40, 0x3F, 0x40, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 
   0x40, 0x41, 0x40, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x41, 
   0x42, 0x41, 0x42, 0x42, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x3E, 0x3F, 0x3D, 0x3E, 0x3D, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 0x3F, 0x3E, 0x3F, 0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 
   0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x41, 0x42, 0x3F, 0x3F, 0x3F, 0x3D, 
   0x3C, 0x3D, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x39, 0x38, 
   0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x37, 0x39, 0x37, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 
   0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x37, 0x36, 
   0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 
   0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x35, 
   0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x33, 0x33, 
   0x33, 0x32, 0x33, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 
   0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2B, 0x2D, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x27, 
   0x28, 0x27, 0x27, 0x26, 0x27, 0x25, 0x25, 0x25, 0x25, 0x23, 0x25, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x20, 0x1F, 0x20, 0x1E, 0x1E, 0x1E, 0x1C, 0x1D, 0x1C, 0x1D, 0x1B, 0x1D, 0x1B, 0x1B, 0x1B, 
   0x19, 0x1A, 0x19, 0x17, 0x19, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x16, 0x16, 0x16, 0x16, 
   0x17, 0x16, 0x17, 0x17, 0x17, 0x16, 0x18, 0x16, 0x18, 0x19, 0x18, 0x17, 0x19, 0x17, 0x18, 0x18, 
   0x18, 0x17, 0x18, 0x17, 0x17, 0x17, 0x17, 0x16, 0x17, 0x16, 0x17, 0x15, 0x17, 0x17, 0x16, 0x17, 
   0x16, 0x17, 0x16, 0x18, 0x18, 0x18, 0x18, 0x19, 0x18, 0x19, 0x1A, 0x19, 0x1A, 0x1C, 0x1A, 0x1D, 
   0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x20, 0x1F, 0x20, 0x1F, 0x1F, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x1F, 
   0x20, 0x20, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x1F, 0x1F, 0x20, 0x20, 0x20, 0x1E, 0x1D, 0x1E, 
   0x1C, 0x1C, 0x1C, 0x1A, 0x1C, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x18, 0x1A, 0x18, 0x19, 
   0x1A, 0x19, 0x17, 0x19, 0x17, 0x17, 0x18, 0x17, 0x16, 0x17, 0x16, 0x17, 0x17, 0x17, 0x16, 0x16, 
   0x16, 0x16, 0x16, 0x16, 0x15, 0x15, 0x15, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 
   0x14, 0x15, 0x14, 0x15, 0x15, 0x15, 0x18, 0x17, 0x18, 0x18, 0x19, 0x18, 0x1A, 0x1A, 0x1A, 0x1A, 
   0x1B, 0x1A, 0x18, 0x19, 0x18, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x17, 0x17, 
   0x17, 0x19, 0x19, 0x19, 0x1B, 0x1B, 0x1B, 0x1F, 0x1E, 0x1F, 0x20, 0x20, 0x20, 0x23, 0x23, 0x23, 
   0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x28, 0x29, 0x28, 0x29, 
   0x29, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2C, 0x2B, 
   0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x30, 0x2E, 0x30, 0x2F, 0x2E, 0x2F, 
   0x2D, 0x2F, 0x2D, 0x2E, 0x2D, 0x2E, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2A, 
   0x2A, 0x2A, 0x29, 0x29, 0x29, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x25, 0x24, 0x25, 0x24, 0x23, 
   0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x24, 0x24, 0x24, 
   0x25, 0x26, 0x25, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2B, 
   0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2C, 0x2D, 
   0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x30, 0x30, 0x30, 
   0x31, 0x31, 0x31, 0x32, 0x33, 0x32, 0x36, 0x35, 0x36, 0x37, 0x38, 0x37, 0x39, 0x39, 0x39, 0x3B, 
   0x3A, 0x3B, 0x3C, 0x3C, 0x3C, 0x40, 0x3E, 0x40, 0x40, 0x41, 0x40, 0x43, 0x44, 0x43, 0x45, 0x44, 
   0x45, 0x46, 0x46, 0x46, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 
   0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x26, 
   0x25, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x29, 0x29, 0x29, 0x2A, 0x2B, 0x2A, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2E, 0x2E, 0x2E, 0x30, 
   0x2F, 0x30, 0x31, 0x30, 0x31, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x33, 0x35, 0x33, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 
   0x36, 0x35, 0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x39, 0x38, 0x39, 0x39, 
   0x39, 0x39, 0x38, 0x39, 0x38, 0x39, 0x3A, 0x39, 0x3C, 0x3A, 0x3C, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 
   0x3D, 0x3C, 0x3D, 0x3C, 0x3F, 0x3D, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 
   0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3D, 0x3E, 0x3D, 0x41, 0x40, 0x41, 0x42, 0x42, 0x42, 0x43, 
   0x42, 0x43, 0x42, 0x43, 0x42, 0x41, 0x40, 0x41, 0x3F, 0x3E, 0x3F, 0x3D, 0x3E, 0x3D, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3B, 0x3C, 0x3D, 0x3B, 0x3D, 0x3D, 0x3D, 0x3D, 0x41, 0x41, 0x41, 0x42, 0x43, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x41, 0x40, 0x41, 0x3E, 
   0x3D, 0x3E, 0x3C, 0x3B, 0x3C, 0x39, 0x3A, 0x39, 0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x39, 0x38, 
   0x39, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x38, 0x3A, 0x38, 0x38, 0x38, 0x38, 
   0x39, 0x38, 0x39, 0x38, 0x37, 0x38, 0x38, 0x37, 0x38, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x33, 
   0x34, 0x33, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 
   0x36, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x34, 0x36, 0x34, 0x35, 0x34, 0x35, 0x33, 
   0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 
   0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x29, 
   0x29, 0x29, 0x27, 0x27, 0x27, 0x25, 0x25, 0x25, 0x23, 0x24, 0x23, 0x22, 0x22, 0x22, 0x21, 0x21, 
   0x21, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x20, 0x1D, 0x1E, 0x1D, 0x1B, 0x1C, 0x1B, 0x1A, 0x1B, 0x1A, 
   0x18, 0x1A, 0x18, 0x18, 0x19, 0x18, 0x17, 0x18, 0x17, 0x16, 0x17, 0x16, 0x15, 0x16, 0x15, 0x15, 
   0x16, 0x15, 0x15, 0x16, 0x15, 0x17, 0x17, 0x17, 0x17, 0x18, 0x17, 0x17, 0x18, 0x17, 0x18, 0x18, 
   0x18, 0x18, 0x18, 0x18, 0x17, 0x17, 0x17, 0x15, 0x17, 0x15, 0x16, 0x15, 0x16, 0x15, 0x15, 0x15, 
   0x16, 0x16, 0x16, 0x16, 0x17, 0x16, 0x18, 0x18, 0x18, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 
   0x1C, 0x1B, 0x1D, 0x1D, 0x1D, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1D, 
   0x1D, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1E, 0x1D, 0x1E, 0x1D, 
   0x1B, 0x1C, 0x1B, 0x1A, 0x1B, 0x1A, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x1A, 0x19, 0x19, 
   0x19, 0x19, 0x17, 0x18, 0x17, 0x17, 0x17, 0x17, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x16, 0x17, 
   0x16, 0x15, 0x16, 0x15, 0x15, 0x16, 0x15, 0x16, 0x15, 0x16, 0x12, 0x14, 0x12, 0x13, 0x14, 0x13, 
   0x14, 0x15, 0x14, 0x15, 0x17, 0x15, 0x18, 0x17, 0x18, 0x19, 0x1A, 0x19, 0x1B, 0x1B, 0x1B, 0x1B, 
   0x1B, 0x1B, 0x19, 0x1A, 0x19, 0x18, 0x17, 0x18, 0x15, 0x17, 0x15, 0x15, 0x16, 0x15, 0x16, 0x16, 
   0x16, 0x16, 0x17, 0x16, 0x1A, 0x19, 0x1A, 0x1B, 0x1C, 0x1B, 0x1F, 0x1F, 0x1F, 0x21, 0x21, 0x21, 
   0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x25, 0x26, 0x25, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x29, 
   0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x2A, 
   0x2A, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 
   0x2B, 0x2E, 0x2B, 0x2D, 0x2C, 0x2D, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x28, 0x27, 0x28, 0x26, 0x26, 0x26, 0x24, 0x25, 0x24, 0x24, 0x24, 
   0x24, 0x24, 0x23, 0x24, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 
   0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x2B, 
   0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 0x2D, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 
   0x30, 0x30, 0x30, 0x32, 0x33, 0x32, 0x34, 0x34, 0x34, 0x38, 0x36, 0x38, 0x38, 0x39, 0x38, 0x3A, 
   0x39, 0x3A, 0x3C, 0x3B, 0x3C, 0x3D, 0x3E, 0x3D, 0x40, 0x41, 0x40, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x44, 0x43, 0x47, 0x46, 0x47, 0x49, 0x48, 0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x25, 0x24, 0x25, 0x25, 0x24, 0x25, 0x25, 0x26, 
   0x25, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
   0x29, 0x29, 0x29, 0x2A, 0x2B, 0x2A, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x35, 0x33, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x37, 
   0x37, 0x37, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x3B, 0x3C, 
   0x3B, 0x3D, 0x3C, 0x3D, 0x3D, 0x3C, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3F, 0x3E, 0x40, 0x3F, 0x40, 
   0x40, 0x40, 0x40, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 0x43, 
   0x43, 0x43, 0x43, 0x42, 0x43, 0x3F, 0x40, 0x3F, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 
   0x3D, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3F, 0x3F, 0x3F, 0x41, 0x41, 0x41, 0x42, 0x43, 0x42, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x3F, 
   0x3E, 0x3F, 0x3B, 0x3C, 0x3B, 0x3A, 0x3A, 0x3A, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x38, 0x39, 
   0x38, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x33, 0x34, 0x33, 0x34, 
   0x33, 0x34, 0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x37, 0x36, 
   0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 
   0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x33, 
   0x33, 0x33, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2A, 0x2A, 0x2B, 
   0x29, 0x2B, 0x28, 0x28, 0x28, 0x26, 0x26, 0x26, 0x24, 0x25, 0x24, 0x23, 0x22, 0x23, 0x22, 0x21, 
   0x22, 0x20, 0x21, 0x20, 0x20, 0x1F, 0x20, 0x1F, 0x1E, 0x1F, 0x1D, 0x1D, 0x1D, 0x1B, 0x1C, 0x1B, 
   0x1A, 0x1A, 0x1A, 0x17, 0x19, 0x17, 0x17, 0x18, 0x17, 0x17, 0x18, 0x17, 0x15, 0x16, 0x15, 0x15, 
   0x16, 0x15, 0x16, 0x16, 0x16, 0x17, 0x17, 0x17, 0x16, 0x17, 0x16, 0x17, 0x17, 0x17, 0x17, 0x17, 
   0x17, 0x17, 0x17, 0x17, 0x18, 0x17, 0x18, 0x15, 0x16, 0x15, 0x14, 0x15, 0x14, 0x14, 0x15, 0x14, 
   0x15, 0x16, 0x15, 0x16, 0x16, 0x16, 0x17, 0x17, 0x17, 0x1A, 0x19, 0x1A, 0x1B, 0x1B, 0x1B, 0x1C, 
   0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1C, 0x1D, 0x1C, 0x1D, 0x1D, 
   0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1F, 0x1E, 0x1F, 0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 0x1D, 
   0x1C, 0x1C, 0x1C, 0x1A, 0x1B, 0x1A, 0x18, 0x1A, 0x18, 0x19, 0x1A, 0x19, 0x19, 0x19, 0x19, 0x19, 
   0x19, 0x19, 0x17, 0x18, 0x17, 0x17, 0x17, 0x17, 0x16, 0x17, 0x16, 0x16, 0x16, 0x16, 0x16, 0x17, 
   0x16, 0x16, 0x16, 0x16, 0x14, 0x15, 0x14, 0x14, 0x15, 0x14, 0x13, 0x13, 0x13, 0x14, 0x14, 0x14, 
   0x14, 0x15, 0x14, 0x15, 0x17, 0x15, 0x17, 0x18, 0x17, 0x1A, 0x1A, 0x1A, 0x1B, 0x1B, 0x1B, 0x1C, 
   0x1B, 0x1C, 0x1A, 0x1A, 0x1A, 0x18, 0x18, 0x18, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 
   0x16, 0x16, 0x17, 0x16, 0x18, 0x19, 0x18, 0x1B, 0x1B, 0x1B, 0x1D, 0x1D, 0x1D, 0x21, 0x1F, 0x21, 
   0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x28, 0x26, 0x28, 0x28, 
   0x27, 0x28, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x29, 0x2A, 
   0x29, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x29, 0x2A, 0x29, 0x2A, 0x2B, 0x2A, 0x2A, 0x2B, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x29, 0x29, 0x29, 0x27, 0x28, 0x27, 0x27, 0x26, 0x27, 0x26, 0x25, 0x26, 0x25, 0x24, 
   0x25, 0x25, 0x24, 0x25, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x25, 0x24, 0x25, 
   0x26, 0x25, 0x26, 0x27, 0x26, 0x27, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2C, 
   0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 
   0x2D, 0x2D, 0x2B, 0x2D, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x31, 0x2F, 0x31, 
   0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x35, 0x36, 0x35, 0x38, 0x38, 0x38, 0x39, 
   0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3C, 0x3D, 0x3C, 0x40, 0x40, 0x40, 0x43, 0x42, 0x43, 0x42, 0x43, 
   0x42, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x48, 0x47, 0x48, 0x49, 0x47, 0x49, 0x48, 0x48, 0x48, 
   0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x27, 0x26, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x29, 0x2A, 0x29, 
   0x2A, 0x2B, 0x2A, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x33, 0x32, 
   0x33, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 
   0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 
   0x36, 0x36, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x36, 0x37, 0x36, 0x39, 0x3A, 
   0x39, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 
   0x40, 0x3E, 0x40, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3D, 0x3D, 
   0x3D, 0x3C, 0x3D, 0x3C, 0x3E, 0x3D, 0x3E, 0x3F, 0x3F, 0x3F, 0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 
   0x43, 0x42, 0x43, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x3F, 
   0x3F, 0x3F, 0x3B, 0x3D, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x3A, 
   0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x36, 0x37, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x33, 
   0x35, 0x33, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x35, 0x35, 0x35, 
   0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2B, 0x2D, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 
   0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x27, 0x27, 0x27, 0x25, 0x25, 0x25, 0x23, 0x23, 0x23, 0x22, 0x21, 
   0x22, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1B, 0x1C, 0x1B, 0x1A, 0x1C, 0x1A, 
   0x1A, 0x1A, 0x1A, 0x19, 0x19, 0x19, 0x17, 0x18, 0x17, 0x16, 0x18, 0x16, 0x16, 0x17, 0x16, 0x16, 
   0x16, 0x16, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x15, 0x17, 
   0x15, 0x16, 0x16, 0x16, 0x15, 0x16, 0x15, 0x16, 0x14, 0x16, 0x13, 0x14, 0x13, 0x14, 0x14, 0x14, 
   0x15, 0x15, 0x15, 0x16, 0x16, 0x16, 0x17, 0x17, 0x17, 0x17, 0x18, 0x17, 0x1A, 0x1A, 0x1A, 0x1B, 
   0x1A, 0x1B, 0x1A, 0x1B, 0x1A, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1B, 0x1C, 
   0x1B, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1B, 0x1C, 0x1B, 0x1B, 0x1C, 0x1B, 
   0x1B, 0x1B, 0x1B, 0x18, 0x1A, 0x18, 0x18, 0x19, 0x18, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x18, 
   0x19, 0x18, 0x18, 0x18, 0x18, 0x17, 0x17, 0x17, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x16, 0x16, 
   0x16, 0x15, 0x16, 0x15, 0x15, 0x16, 0x15, 0x15, 0x15, 0x15, 0x12, 0x13, 0x12, 0x13, 0x14, 0x13, 
   0x14, 0x15, 0x14, 0x16, 0x17, 0x16, 0x18, 0x18, 0x18, 0x18, 0x19, 0x18, 0x1A, 0x1B, 0x1A, 0x1B, 
   0x1B, 0x1B, 0x1A, 0x1A, 0x1A, 0x17, 0x18, 0x17, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x16, 0x16, 
   0x16, 0x18, 0x17, 0x18, 0x18, 0x18, 0x18, 0x1A, 0x1A, 0x1A, 0x1B, 0x1C, 0x1B, 0x1C, 0x1E, 0x1C, 
   0x1F, 0x1F, 0x1F, 0x21, 0x21, 0x21, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x25, 0x24, 0x25, 0x24, 
   0x25, 0x24, 0x27, 0x25, 0x27, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x29, 0x28, 
   0x29, 0x2A, 0x29, 0x2A, 0x2B, 0x2A, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x28, 0x28, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x25, 0x26, 
   0x25, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x25, 0x26, 0x25, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x2B, 0x2A, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2D, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2E, 0x2E, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x32, 0x32, 0x32, 0x34, 0x34, 0x34, 0x36, 0x36, 0x36, 0x39, 
   0x38, 0x39, 0x39, 0x3A, 0x39, 0x3D, 0x3B, 0x3D, 0x40, 0x3E, 0x40, 0x3F, 0x41, 0x3F, 0x42, 0x42, 
   0x42, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 
   0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
   0x27, 0x28, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 
   0x28, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 
   0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x30, 
   0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x31, 0x31, 0x31, 0x33, 0x31, 0x33, 0x31, 0x33, 
   0x31, 0x33, 0x34, 0x33, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x35, 
   0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x38, 0x37, 
   0x38, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 0x3C, 0x3C, 0x3A, 0x3C, 0x3B, 0x3B, 0x3B, 
   0x3E, 0x3D, 0x3E, 0x3F, 0x3F, 0x3F, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x40, 
   0x41, 0x40, 0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x42, 0x40, 0x42, 
   0x44, 0x42, 0x44, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x42, 0x42, 0x42, 0x40, 
   0x40, 0x40, 0x3D, 0x3E, 0x3D, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x39, 
   0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x34, 
   0x36, 0x34, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x38, 0x37, 0x38, 0x39, 0x38, 0x39, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 
   0x31, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 
   0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2C, 0x2E, 0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 
   0x2B, 0x2B, 0x29, 0x2A, 0x29, 0x27, 0x28, 0x27, 0x25, 0x24, 0x25, 0x23, 0x23, 0x23, 0x21, 0x21, 
   0x21, 0x20, 0x20, 0x20, 0x1E, 0x1F, 0x1E, 0x1D, 0x1E, 0x1D, 0x1C, 0x1D, 0x1C, 0x1B, 0x1B, 0x1B, 
   0x19, 0x1B, 0x19, 0x19, 0x19, 0x19, 0x19, 0x18, 0x19, 0x16, 0x18, 0x16, 0x18, 0x18, 0x18, 0x17, 
   0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x18, 0x17, 0x17, 0x17, 0x17, 0x16, 0x17, 0x16, 0x16, 0x16, 
   0x16, 0x15, 0x15, 0x15, 0x15, 0x14, 0x15, 0x15, 0x13, 0x15, 0x12, 0x13, 0x12, 0x14, 0x13, 0x14, 
   0x15, 0x15, 0x15, 0x16, 0x17, 0x16, 0x17, 0x18, 0x17, 0x18, 0x19, 0x18, 0x19, 0x19, 0x19, 0x19, 
   0x1A, 0x19, 0x1A, 0x1A, 0x1A, 0x1B, 0x1B, 0x1B, 0x1C, 0x1C, 0x1C, 0x1D, 0x1C, 0x1D, 0x1B, 0x1B, 
   0x1B, 0x1A, 0x1B, 0x1A, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 
   0x19, 0x1A, 0x19, 0x19, 0x19, 0x19, 0x18, 0x19, 0x18, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 
   0x18, 0x19, 0x17, 0x17, 0x17, 0x16, 0x17, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x17, 
   0x16, 0x16, 0x17, 0x16, 0x15, 0x16, 0x15, 0x15, 0x14, 0x15, 0x13, 0x14, 0x13, 0x14, 0x14, 0x14, 
   0x14, 0x15, 0x14, 0x15, 0x15, 0x15, 0x17, 0x17, 0x17, 0x18, 0x19, 0x18, 0x19, 0x19, 0x19, 0x1A, 
   0x1A, 0x1A, 0x1A, 0x19, 0x1A, 0x18, 0x18, 0x18, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 
   0x17, 0x17, 0x18, 0x17, 0x18, 0x19, 0x18, 0x18, 0x19, 0x18, 0x1A, 0x1A, 0x1A, 0x1B, 0x1C, 0x1B, 
   0x1E, 0x1E, 0x1E, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 
   0x23, 0x23, 0x26, 0x25, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x28, 0x28, 
   0x28, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 
   0x2A, 0x2A, 0x2A, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x27, 
   0x27, 0x27, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x27, 0x26, 
   0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x27, 0x28, 0x27, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2D, 
   0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2E, 0x2E, 0x2E, 0x31, 0x2F, 0x31, 0x30, 0x31, 0x30, 0x34, 0x33, 0x34, 0x37, 0x36, 0x37, 0x37, 
   0x38, 0x37, 0x3B, 0x39, 0x3B, 0x3C, 0x3C, 0x3C, 0x3F, 0x3D, 0x3F, 0x40, 0x40, 0x40, 0x41, 0x41, 
   0x41, 0x45, 0x43, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x26, 0x27, 0x26, 0x29, 0x28, 0x29, 0x27, 0x28, 0x27, 0x29, 
   0x28, 0x29, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x29, 0x28, 
   0x29, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x34, 0x32, 
   0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x32, 0x34, 0x33, 0x32, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x34, 0x34, 0x34, 0x35, 0x36, 
   0x35, 0x38, 0x38, 0x38, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x3C, 0x3A, 0x3C, 
   0x3C, 0x3D, 0x3C, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 
   0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x41, 0x41, 0x41, 
   0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x42, 
   0x42, 0x42, 0x3F, 0x3F, 0x3F, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 
   0x37, 0x35, 0x36, 0x36, 0x36, 0x37, 0x38, 0x37, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x37, 
   0x39, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x34, 0x35, 0x34, 0x34, 0x33, 0x34, 
   0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x31, 0x30, 0x31, 0x30, 
   0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 
   0x2E, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 
   0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2A, 0x2A, 0x2A, 0x28, 0x27, 0x28, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x21, 0x21, 
   0x21, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 0x1D, 0x1D, 0x1D, 0x1C, 0x1C, 0x1C, 0x1B, 0x1C, 0x1B, 
   0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x18, 0x19, 0x18, 0x18, 0x18, 0x18, 0x18, 
   0x18, 0x18, 0x17, 0x18, 0x17, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x16, 0x16, 0x16, 0x15, 0x15, 
   0x15, 0x12, 0x14, 0x12, 0x14, 0x13, 0x14, 0x12, 0x13, 0x12, 0x12, 0x13, 0x12, 0x14, 0x14, 0x14, 
   0x15, 0x15, 0x15, 0x15, 0x17, 0x15, 0x18, 0x18, 0x18, 0x18, 0x19, 0x18, 0x18, 0x19, 0x18, 0x19, 
   0x1A, 0x19, 0x1A, 0x1A, 0x1A, 0x1B, 0x1C, 0x1B, 0x1B, 0x1C, 0x1B, 0x1D, 0x1C, 0x1D, 0x1A, 0x1B, 
   0x1A, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x1C, 0x1B, 0x1C, 0x1C, 0x1B, 0x1C, 0x1A, 0x1B, 0x1A, 
   0x1A, 0x1A, 0x1A, 0x19, 0x19, 0x19, 0x18, 0x19, 0x18, 0x18, 0x19, 0x18, 0x18, 0x18, 0x18, 0x17, 
   0x18, 0x17, 0x17, 0x18, 0x17, 0x17, 0x17, 0x17, 0x15, 0x16, 0x15, 0x15, 0x17, 0x15, 0x16, 0x16, 
   0x16, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x15, 0x15, 0x15, 0x13, 0x14, 0x13, 0x13, 0x14, 0x13, 
   0x15, 0x15, 0x15, 0x15, 0x16, 0x15, 0x16, 0x16, 0x16, 0x17, 0x17, 0x17, 0x18, 0x19, 0x18, 0x19, 
   0x1A, 0x19, 0x18, 0x19, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x16, 0x18, 0x16, 0x17, 0x18, 
   0x17, 0x17, 0x18, 0x17, 0x18, 0x19, 0x18, 0x18, 0x19, 0x18, 0x18, 0x19, 0x18, 0x1A, 0x1A, 0x1A, 
   0x1C, 0x1D, 0x1C, 0x1F, 0x1E, 0x1F, 0x1D, 0x1E, 0x1D, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x23, 
   0x22, 0x23, 0x24, 0x25, 0x24, 0x25, 0x26, 0x25, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x28, 
   0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x29, 0x2A, 0x29, 0x27, 0x29, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x29, 0x28, 0x29, 0x27, 0x28, 0x27, 0x28, 0x27, 
   0x28, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x29, 0x28, 0x29, 0x2A, 0x29, 0x2A, 0x2B, 0x2A, 0x2B, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 
   0x2E, 0x2D, 0x2E, 0x2E, 0x2F, 0x2E, 0x31, 0x31, 0x31, 0x34, 0x34, 0x34, 0x36, 0x36, 0x36, 0x39, 
   0x39, 0x39, 0x39, 0x3A, 0x39, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x40, 0x40, 0x40, 0x42, 0x41, 
   0x42, 0x42, 0x42, 0x42, 0x44, 0x43, 0x44, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 
   0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x29, 
   0x28, 0x29, 0x2B, 0x29, 0x2B, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 
   0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2D, 0x2C, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 
   0x2F, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x32, 0x31, 0x32, 0x32, 0x32, 
   0x32, 0x34, 0x33, 0x34, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x33, 0x33, 0x33, 0x32, 0x31, 0x32, 
   0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x33, 0x32, 0x35, 0x35, 
   0x35, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 
   0x3C, 0x3D, 0x3C, 0x3F, 0x40, 0x3F, 0x41, 0x40, 0x41, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x40, 
   0x41, 0x40, 0x40, 0x41, 0x40, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 0x40, 
   0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x41, 0x41, 0x41, 
   0x42, 0x42, 0x42, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x40, 
   0x42, 0x40, 0x40, 0x3F, 0x40, 0x3C, 0x3C, 0x3C, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 
   0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 
   0x37, 0x39, 0x37, 0x39, 0x38, 0x39, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x36, 0x37, 0x36, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 
   0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x31, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x30, 
   0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2B, 0x2C, 0x2A, 0x29, 0x2A, 0x27, 0x27, 0x27, 0x25, 0x25, 0x25, 0x23, 0x22, 0x23, 0x21, 0x20, 
   0x21, 0x20, 0x1F, 0x20, 0x1E, 0x1E, 0x1E, 0x1D, 0x1D, 0x1D, 0x1C, 0x1D, 0x1C, 0x1C, 0x1C, 0x1C, 
   0x1C, 0x1B, 0x1C, 0x1A, 0x1C, 0x1A, 0x1B, 0x1B, 0x1B, 0x19, 0x1A, 0x19, 0x19, 0x19, 0x19, 0x19, 
   0x19, 0x19, 0x17, 0x19, 0x17, 0x17, 0x18, 0x17, 0x16, 0x18, 0x16, 0x16, 0x16, 0x16, 0x14, 0x15, 
   0x14, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x13, 0x13, 0x13, 
   0x15, 0x15, 0x15, 0x16, 0x17, 0x16, 0x17, 0x18, 0x17, 0x1A, 0x19, 0x1A, 0x19, 0x19, 0x19, 0x19, 
   0x19, 0x19, 0x19, 0x1B, 0x19, 0x1A, 0x1B, 0x1A, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1A, 0x1B, 
   0x1A, 0x19, 0x1B, 0x19, 0x1A, 0x1A, 0x1A, 0x1B, 0x1C, 0x1B, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 
   0x19, 0x1A, 0x19, 0x18, 0x19, 0x18, 0x18, 0x18, 0x18, 0x18, 0x19, 0x18, 0x18, 0x19, 0x18, 0x17, 
   0x19, 0x17, 0x17, 0x18, 0x17, 0x16, 0x17, 0x16, 0x15, 0x16, 0x15, 0x15, 0x17, 0x15, 0x17, 0x17, 
   0x17, 0x17, 0x17, 0x17, 0x16, 0x17, 0x16, 0x15, 0x15, 0x15, 0x13, 0x14, 0x13, 0x13, 0x14, 0x13, 
   0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x17, 0x16, 0x17, 0x17, 0x17, 0x17, 0x19, 0x19, 0x19, 0x19, 
   0x19, 0x19, 0x17, 0x1A, 0x17, 0x17, 0x18, 0x17, 0x17, 0x17, 0x17, 0x18, 0x19, 0x18, 0x18, 0x19, 
   0x18, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x18, 0x19, 0x18, 0x19, 0x18, 
   0x1A, 0x1B, 0x1A, 0x1C, 0x1D, 0x1C, 0x1D, 0x1D, 0x1D, 0x1F, 0x1E, 0x1F, 0x20, 0x20, 0x20, 0x21, 
   0x21, 0x21, 0x23, 0x22, 0x23, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 
   0x28, 0x28, 0x29, 0x28, 0x2A, 0x28, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 
   0x27, 0x29, 0x27, 0x29, 0x27, 0x29, 0x27, 0x27, 0x27, 0x25, 0x27, 0x25, 0x25, 0x25, 0x25, 0x27, 
   0x26, 0x27, 0x27, 0x26, 0x27, 0x28, 0x28, 0x28, 0x27, 0x29, 0x27, 0x29, 0x28, 0x29, 0x29, 0x28, 
   0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 
   0x28, 0x27, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2B, 0x2A, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2E, 0x2D, 0x2E, 0x30, 0x2F, 
   0x30, 0x30, 0x30, 0x30, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2E, 0x2D, 0x2E, 0x2E, 0x2F, 0x2E, 0x30, 0x31, 0x30, 0x34, 0x34, 0x34, 0x35, 0x36, 0x35, 0x38, 
   0x37, 0x38, 0x39, 0x3A, 0x39, 0x39, 0x3B, 0x39, 0x3C, 0x3D, 0x3C, 0x3E, 0x3E, 0x3E, 0x41, 0x40, 
   0x41, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x45, 0x45, 0x45, 
   0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x29, 
   0x29, 0x29, 0x29, 0x2A, 0x29, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x29, 
   0x2B, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2B, 0x2A, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 
   0x33, 0x34, 0x33, 0x34, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x33, 0x32, 0x35, 0x35, 
   0x35, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3A, 0x3B, 
   0x3C, 0x3C, 0x3C, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 
   0x41, 0x40, 0x3F, 0x41, 0x3F, 0x3F, 0x41, 0x3F, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x44, 0x42, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x41, 0x42, 0x40, 0x3F, 0x40, 0x3D, 0x3C, 0x3D, 0x3C, 0x3A, 0x3C, 0x3A, 0x39, 0x3A, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x38, 0x39, 0x38, 0x37, 0x38, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x33, 0x34, 0x33, 
   0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2E, 0x2D, 0x2E, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 
   0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x31, 0x30, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2B, 0x2C, 0x2A, 0x29, 0x2A, 0x28, 0x27, 0x28, 0x24, 0x24, 0x24, 0x22, 0x22, 0x22, 0x21, 0x21, 
   0x21, 0x20, 0x1F, 0x20, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 
   0x1D, 0x1D, 0x1D, 0x1C, 0x1D, 0x1C, 0x1C, 0x1C, 0x1C, 0x1A, 0x1B, 0x1A, 0x1B, 0x1A, 0x1B, 0x19, 
   0x19, 0x19, 0x18, 0x18, 0x18, 0x17, 0x18, 0x17, 0x17, 0x18, 0x17, 0x16, 0x16, 0x16, 0x14, 0x15, 
   0x14, 0x13, 0x14, 0x13, 0x13, 0x13, 0x13, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 
   0x13, 0x14, 0x13, 0x16, 0x17, 0x16, 0x18, 0x18, 0x18, 0x19, 0x19, 0x19, 0x19, 0x1A, 0x19, 0x19, 
   0x1A, 0x19, 0x1A, 0x1A, 0x1A, 0x1A, 0x1C, 0x1A, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1B, 0x1B, 
   0x1B, 0x1A, 0x1B, 0x1A, 0x1A, 0x1B, 0x1A, 0x1A, 0x1B, 0x1A, 0x1A, 0x1B, 0x1A, 0x19, 0x1A, 0x19, 
   0x18, 0x19, 0x18, 0x18, 0x19, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
   0x18, 0x18, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x15, 0x16, 0x15, 0x15, 0x16, 0x15, 0x15, 0x17, 
   0x15, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x15, 0x16, 0x15, 0x14, 0x15, 0x14, 0x15, 0x15, 0x15, 
   0x15, 0x15, 0x15, 0x16, 0x15, 0x16, 0x15, 0x17, 0x15, 0x17, 0x17, 0x17, 0x16, 0x18, 0x16, 0x17, 
   0x18, 0x17, 0x17, 0x18, 0x17, 0x17, 0x18, 0x17, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x19, 
   0x18, 0x18, 0x1A, 0x18, 0x19, 0x1A, 0x19, 0x18, 0x19, 0x18, 0x18, 0x18, 0x18, 0x1A, 0x19, 0x1A, 
   0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1C, 0x1D, 0x1C, 0x1F, 0x1E, 0x1F, 0x1F, 0x1E, 0x1F, 0x22, 
   0x20, 0x22, 0x24, 0x22, 0x24, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x27, 0x27, 
   0x27, 0x29, 0x27, 0x29, 0x27, 0x28, 0x27, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 
   0x25, 0x25, 0x27, 0x26, 0x27, 0x28, 0x27, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2B, 0x29, 
   0x2B, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 
   0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2B, 0x2B, 0x2B, 0x2C, 
   0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2F, 
   0x2E, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2E, 0x2F, 0x2E, 0x30, 0x2E, 0x30, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x36, 0x35, 0x36, 0x38, 
   0x37, 0x38, 0x39, 0x38, 0x39, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 
   0x3F, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x44, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x29, 
   0x2A, 0x29, 0x2B, 0x2A, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2B, 
   0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 
   0x2B, 0x2B, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x2F, 
   0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x31, 0x2F, 0x32, 0x31, 0x32, 0x32, 0x32, 
   0x32, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 
   0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 
   0x31, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x31, 0x2F, 0x32, 0x32, 0x32, 0x34, 0x34, 
   0x34, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x37, 0x39, 0x37, 0x3B, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 
   0x3C, 0x3D, 0x3C, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x41, 0x40, 0x40, 
   0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x40, 0x42, 0x40, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x40, 
   0x40, 0x40, 0x40, 0x3F, 0x40, 0x3D, 0x3C, 0x3D, 0x3D, 0x3B, 0x3D, 0x3C, 0x3B, 0x3C, 0x39, 0x39, 
   0x39, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 
   0x37, 0x37, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x36, 0x37, 0x36, 0x35, 0x35, 0x35, 0x33, 0x33, 0x33, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2E, 
   0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 
   0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2D, 0x2F, 0x2D, 0x2C, 0x2D, 0x29, 
   0x2A, 0x29, 0x28, 0x28, 0x28, 0x26, 0x27, 0x26, 0x23, 0x25, 0x23, 0x23, 0x22, 0x23, 0x21, 0x20, 
   0x21, 0x1F, 0x1F, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1E, 0x1D, 0x1E, 0x1E, 0x1D, 0x1E, 
   0x1E, 0x1D, 0x1E, 0x1E, 0x1D, 0x1E, 0x1E, 0x1D, 0x1E, 0x1C, 0x1B, 0x1C, 0x1B, 0x1B, 0x1B, 0x18, 
   0x1A, 0x18, 0x18, 0x19, 0x18, 0x18, 0x18, 0x18, 0x16, 0x17, 0x16, 0x16, 0x16, 0x16, 0x15, 0x15, 
   0x15, 0x13, 0x14, 0x13, 0x14, 0x13, 0x14, 0x10, 0x12, 0x10, 0x12, 0x12, 0x12, 0x11, 0x12, 0x11, 
   0x13, 0x13, 0x13, 0x15, 0x17, 0x15, 0x18, 0x18, 0x18, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 
   0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1B, 0x1C, 0x1B, 0x1B, 0x1C, 
   0x1B, 0x1C, 0x1B, 0x1C, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x18, 0x19, 0x18, 
   0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x17, 0x18, 0x17, 0x17, 0x19, 0x17, 0x17, 0x18, 0x17, 0x16, 
   0x18, 0x16, 0x17, 0x17, 0x17, 0x16, 0x15, 0x16, 0x14, 0x16, 0x14, 0x14, 0x16, 0x14, 0x15, 0x16, 
   0x15, 0x15, 0x16, 0x15, 0x16, 0x16, 0x16, 0x15, 0x16, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 
   0x15, 0x16, 0x15, 0x15, 0x16, 0x15, 0x15, 0x16, 0x15, 0x16, 0x16, 0x16, 0x16, 0x17, 0x16, 0x16, 
   0x17, 0x16, 0x17, 0x16, 0x17, 0x17, 0x18, 0x17, 0x16, 0x18, 0x16, 0x19, 0x18, 0x19, 0x19, 0x1A, 
   0x19, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 
   0x19, 0x19, 0x19, 0x19, 0x1A, 0x19, 0x1C, 0x1C, 0x1C, 0x1E, 0x1E, 0x1E, 0x21, 0x20, 0x21, 0x22, 
   0x22, 0x22, 0x24, 0x23, 0x24, 0x24, 0x25, 0x24, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x27, 0x26, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 
   0x27, 0x28, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 
   0x25, 0x25, 0x26, 0x25, 0x26, 0x29, 0x27, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2B, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2A, 0x29, 0x2A, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 
   0x27, 0x28, 0x27, 0x2A, 0x28, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x34, 0x35, 0x34, 0x38, 
   0x36, 0x38, 0x38, 0x38, 0x38, 0x38, 0x3A, 0x38, 0x3B, 0x3B, 0x3B, 0x3E, 0x3D, 0x3E, 0x3F, 0x40, 
   0x3F, 0x3F, 0x41, 0x3F, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x42, 0x44, 0x43, 0x42, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x26, 0x27, 0x26, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x2A, 
   0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2C, 0x2B, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 
   0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 
   0x2A, 0x2A, 0x2A, 0x2C, 0x2B, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 
   0x31, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 
   0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 
   0x30, 0x31, 0x30, 0x30, 0x30, 0x32, 0x30, 0x32, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x32, 
   0x33, 0x34, 0x34, 0x34, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x3B, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 
   0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x40, 
   0x41, 0x40, 0x41, 0x41, 0x41, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 
   0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x39, 0x3A, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 
   0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 
   0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 0x33, 0x34, 0x33, 
   0x33, 0x33, 0x33, 0x32, 0x31, 0x32, 0x30, 0x31, 0x30, 0x2E, 0x30, 0x2E, 0x2E, 0x2E, 0x2E, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 
   0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2A, 
   0x2A, 0x2A, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x26, 0x24, 0x26, 0x22, 0x22, 0x22, 0x21, 0x21, 
   0x21, 0x20, 0x20, 0x20, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1B, 0x1C, 0x1B, 0x1B, 
   0x1A, 0x1B, 0x18, 0x19, 0x18, 0x16, 0x18, 0x16, 0x17, 0x18, 0x17, 0x16, 0x16, 0x16, 0x16, 0x15, 
   0x16, 0x13, 0x14, 0x13, 0x13, 0x13, 0x13, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 
   0x13, 0x15, 0x13, 0x16, 0x17, 0x16, 0x18, 0x18, 0x18, 0x19, 0x19, 0x19, 0x1B, 0x19, 0x1B, 0x1A, 
   0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1C, 0x1B, 0x1C, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 
   0x1B, 0x1B, 0x1C, 0x1B, 0x1B, 0x1C, 0x1B, 0x1B, 0x1A, 0x1B, 0x19, 0x19, 0x19, 0x18, 0x19, 0x18, 
   0x18, 0x18, 0x18, 0x17, 0x18, 0x17, 0x17, 0x18, 0x17, 0x17, 0x18, 0x17, 0x17, 0x18, 0x17, 0x18, 
   0x17, 0x18, 0x16, 0x17, 0x16, 0x15, 0x15, 0x15, 0x15, 0x16, 0x15, 0x15, 0x16, 0x15, 0x15, 0x15, 
   0x15, 0x15, 0x15, 0x15, 0x15, 0x16, 0x15, 0x15, 0x16, 0x15, 0x15, 0x15, 0x15, 0x14, 0x15, 0x14, 
   0x15, 0x15, 0x15, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x15, 0x16, 0x15, 0x16, 
   0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x18, 0x16, 0x17, 0x19, 0x17, 0x18, 0x19, 0x18, 0x1A, 0x1A, 
   0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1B, 0x18, 0x1A, 0x18, 0x18, 0x19, 0x18, 
   0x17, 0x19, 0x17, 0x19, 0x1A, 0x19, 0x1C, 0x1B, 0x1C, 0x1D, 0x1E, 0x1D, 0x21, 0x21, 0x21, 0x22, 
   0x23, 0x22, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 0x27, 0x26, 0x27, 0x27, 0x26, 
   0x27, 0x27, 0x26, 0x27, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x26, 0x25, 0x26, 0x25, 0x24, 0x25, 0x25, 
   0x24, 0x25, 0x26, 0x26, 0x26, 0x27, 0x28, 0x27, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x29, 0x28, 0x29, 0x27, 0x28, 0x27, 0x27, 0x28, 0x27, 
   0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 
   0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 
   0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x35, 
   0x35, 0x35, 0x38, 0x37, 0x38, 0x39, 0x3A, 0x39, 0x3C, 0x3B, 0x3C, 0x3E, 0x3C, 0x3E, 0x3F, 0x40, 
   0x3F, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x2A, 0x29, 0x2A, 0x2A, 
   0x29, 0x2A, 0x2B, 0x2A, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x2B, 0x29, 0x2B, 0x29, 0x29, 0x29, 
   0x2B, 0x29, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2F, 0x2E, 0x2F, 0x30, 0x30, 0x30, 0x2F, 
   0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x32, 0x31, 0x32, 0x31, 0x32, 
   0x31, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x31, 0x30, 0x31, 
   0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x2F, 
   0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x32, 0x31, 
   0x32, 0x34, 0x33, 0x34, 0x36, 0x36, 0x36, 0x37, 0x39, 0x37, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 
   0x3C, 0x3D, 0x3C, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3F, 0x3E, 0x3F, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x41, 0x42, 
   0x41, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3E, 
   0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3C, 0x3D, 0x3C, 0x3C, 0x3A, 0x3C, 0x39, 0x39, 
   0x39, 0x38, 0x37, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x38, 
   0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x3A, 0x3A, 
   0x3A, 0x38, 0x3A, 0x38, 0x39, 0x38, 0x39, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x33, 0x33, 0x33, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2C, 0x2C, 
   0x2C, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x31, 0x30, 0x30, 0x31, 0x30, 
   0x32, 0x31, 0x32, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2C, 0x2E, 0x2C, 0x2D, 0x2C, 0x2D, 0x2A, 
   0x2A, 0x2A, 0x28, 0x28, 0x28, 0x26, 0x26, 0x26, 0x25, 0x25, 0x25, 0x25, 0x23, 0x25, 0x21, 0x20, 
   0x21, 0x1F, 0x1F, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1D, 
   0x1F, 0x1E, 0x1F, 0x1F, 0x1E, 0x1F, 0x1D, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1D, 0x1C, 0x1D, 0x19, 
   0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x18, 0x18, 0x18, 0x16, 0x17, 0x16, 0x17, 0x16, 0x17, 0x14, 0x15, 
   0x14, 0x13, 0x15, 0x13, 0x14, 0x13, 0x14, 0x11, 0x12, 0x11, 0x12, 0x12, 0x12, 0x11, 0x12, 0x11, 
   0x12, 0x13, 0x12, 0x15, 0x16, 0x15, 0x17, 0x18, 0x17, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1B, 
   0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 
   0x1B, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x18, 0x18, 0x18, 
   0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x18, 0x17, 0x16, 
   0x17, 0x16, 0x15, 0x17, 0x15, 0x14, 0x16, 0x14, 0x15, 0x16, 0x15, 0x15, 0x16, 0x15, 0x14, 0x15, 
   0x14, 0x15, 0x15, 0x15, 0x15, 0x16, 0x15, 0x15, 0x16, 0x15, 0x15, 0x16, 0x15, 0x14, 0x16, 0x14, 
   0x15, 0x16, 0x15, 0x15, 0x16, 0x15, 0x14, 0x16, 0x14, 0x15, 0x16, 0x15, 0x15, 0x16, 0x15, 0x15, 
   0x16, 0x15, 0x15, 0x16, 0x15, 0x17, 0x17, 0x17, 0x16, 0x19, 0x16, 0x19, 0x19, 0x19, 0x19, 0x1A, 
   0x19, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1B, 0x19, 0x1A, 0x19, 0x1A, 0x1A, 0x1A, 0x18, 0x19, 0x18, 
   0x19, 0x19, 0x19, 0x19, 0x1A, 0x19, 0x1B, 0x1B, 0x1B, 0x1E, 0x1E, 0x1E, 0x21, 0x21, 0x21, 0x24, 
   0x23, 0x24, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x25, 0x26, 
   0x25, 0x26, 0x26, 0x26, 0x25, 0x26, 0x25, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x27, 0x26, 
   0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x26, 0x25, 0x26, 0x25, 0x24, 0x25, 0x25, 
   0x25, 0x25, 0x26, 0x26, 0x26, 0x28, 0x27, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 
   0x27, 0x29, 0x27, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x29, 0x2B, 0x2B, 0x2B, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 
   0x2D, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 
   0x2F, 0x2F, 0x2F, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x34, 0x33, 0x36, 0x37, 0x36, 0x39, 0x3A, 0x39, 0x3C, 0x3B, 0x3C, 0x3F, 0x3D, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x3F, 0x41, 0x3F, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x00, 0x00, 
};

static RESOURCEDATA g_rd_consolbk(TEXT(""), TEXT("consolbk.bmp"), g_consolbk, sizeof(g_consolbk));

extern "C" LPVOID d3dbase_consolbk = (LPVOID)&g_rd_consolbk;
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dbase\display.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    display.h

Author:

    Matt Bronder

Description:

    Direct3D initialization routines.

*******************************************************************************/

#ifndef __INIT_H__
#define __INIT_H__

#include "enum.h"
#include "input.h"

//******************************************************************************
// Preprocessor definitions
//******************************************************************************

#if defined(_DEBUG) || defined(DBG)
#ifndef DEBUG
#define DEBUG
#endif
#endif

#ifndef UNDER_XBOX
#define POOL_DEFAULT    D3DPOOL_MANAGED
#else
#define POOL_DEFAULT    D3DPOOL_DEFAULT
#endif

#define KEY_LEFT                0x0001
#define KEY_RIGHT               0x0002
#define KEY_UP                  0x0004
#define KEY_DOWN                0x0008
#define KEY_ADD                 0x0010
#define KEY_SUBTRACT            0x0020
#define KEY_HOME                0x0040
#define KEY_END                 0x0080
#define KEY_INSERT              0x0100
#define KEY_DELETE              0x0200
#define KEY_PAGEUP              0x0400
#define KEY_PAGEDOWN            0x0800
#define KEY_SHIFT               0x1000

//******************************************************************************
// Data types
//******************************************************************************

typedef DWORD                   KEYSDOWN;

typedef BOOL                    (* SETDEVICEPROC)(LPVOID);
typedef void                    (* CLEARDEVICEPROC)(LPVOID);
typedef BOOL                    (* SUBWNDPROC)(LPVOID, LRESULT*, HWND, UINT, WPARAM, LPARAM);

//******************************************************************************
// Structures
//******************************************************************************

//******************************************************************************
typedef struct _DISPLAYDESC {
    PADAPTERDESC        padpd;
    PDEVICEDESC         pdevd;
    PDISPLAYMODE        pdm;
    UINT                uNumBackBuffers;
    BOOL                bWindowed;
    BOOL                bDepthBuffer;
    BOOL                bAntialias;
} DISPLAYDESC, *PDISPLAYDESC;

//******************************************************************************
typedef struct _D3DCREATIONDESC {
    D3DDEVTYPE          d3ddt;
    BOOL                bWindowed;
    D3DDISPLAYMODE      d3ddm;
    RECT                rectWnd;
    BOOL                bDepthBuffer;
    D3DFORMAT           fmtd;
    BOOL                bAntialias;
    D3DMULTISAMPLE_TYPE mst;
    UINT                uNumBackBuffers;
    UINT                uPresentInterval;
    DWORD               dwBehavior;
} D3DCREATIONDESC, *PD3DCREATIONDESC;

//******************************************************************************
typedef struct _CAMERA {
	D3DXVECTOR3         vPosition;
	D3DXVECTOR3         vInterest;
	float               fRoll;
	float               fFieldOfView;
	float               fNearPlane;
	float               fFarPlane;
} CAMERA, *PCAMERA;

//******************************************************************************
// CDisplay
//******************************************************************************

//******************************************************************************
class CDisplay : public CObject {

public:

    BOOL                        m_bTimeSync;

protected:

    LPDIRECT3D8                 m_pDirect3D;
    LPDIRECT3DDEVICE8           m_pDevice;

    PADAPTERDESC                m_padpdList;
    DISPLAYDESC                 m_disdCurrent;

    HWND                        m_hWnd;
    RECT                        m_rectWnd;
    D3DPRESENT_PARAMETERS       m_d3dpp;
    D3DSURFACE_DESC             m_d3dsdBack;

    BOOL                        m_bActive;

    KEYSDOWN                    m_kdKeys;
    JOYSTATE                    m_jsJoys;
    JOYSTATE                    m_jsLast;

    CAMERA                      m_cam;
    float                       m_fCameraTDelta;
    float                       m_fCameraRDelta;

    BOOL                        m_bShowConsole;

    RECT                        m_rectBorder;

    BOOL                        m_bUseInput;
    BOOL                        m_bSwapSticks;

    DISPLAYDESC                 m_disdSelect;

    SETDEVICEPROC               m_pfnSetDevice;
    CLEARDEVICEPROC             m_pfnClearDevice;
    SUBWNDPROC                  m_pfnSubWndProc;

    LPVOID                      m_pvSetDeviceParam;
    LPVOID                      m_pvClearDeviceParam;
    LPVOID                      m_pvSubWndProcParam;

    static UINT                 m_uCreated;
    BOOL                        m_bCreated;

public:

                                CDisplay();
                                ~CDisplay();

    virtual BOOL                Create(PD3DCREATIONDESC pd3dcd = NULL);
    virtual BOOL                Reset(D3DPRESENT_PARAMETERS* pd3dpp);
    virtual BOOL                ResetDevice();

    virtual BOOL                Update(PDISPLAYMODE pdm, BOOL bWindowed, 
                                    BOOL bDepthBuffer, BOOL bAntialias);
    virtual void                Select();

    virtual void                EnableInput(BOOL bEnable);

    virtual void                ProcessInput();

    virtual void                EnableConsoleVisibility(BOOL bEnable);
    virtual void                ShowConsole();

    virtual BOOL                SetView(PCAMERA pcam = NULL);

    virtual void                InitSetDeviceProc(SETDEVICEPROC pfnSetDevice, LPVOID pvParam);
    virtual void                InitClearDeviceProc(CLEARDEVICEPROC pfnClearDevice, LPVOID pvParam);
    virtual void                InitSubWindowProc(SUBWNDPROC pfnSubWndProc, LPVOID pvParam);

    virtual LPDIRECT3D8         GetDirect3D8();
    virtual LPDIRECT3DDEVICE8   GetDevice8();
    virtual void                GetCurrentDisplay(PDISPLAYDESC pdisd);
    virtual PADAPTERDESC        GetDisplayList();
    virtual BOOL                IsActive();
    virtual HWND                GetWindow();
    virtual void                GetPresentParameters(D3DPRESENT_PARAMETERS* pd3dpp);
    virtual UINT                GetWidth();
    virtual UINT                GetHeight();
    virtual KEYSDOWN            GetKeyState();
    virtual void                GetJoyState(PJOYSTATE pjsCurrent, PJOYSTATE pjsLast);
    virtual void                GetCamera(PCAMERA pcam);
    virtual void                SetCamera(PCAMERA pcam);
    virtual void                SetCameraOffsets(float fTranslation, float fRotation);
    virtual BOOL                ConsoleVisible();
    virtual BOOL                IsWindowed();
    virtual BOOL                IsDepthBuffered();

protected:

    LRESULT                     WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
    BOOL                        DisplayDlgProc(HWND hDlg, UINT message, WPARAM wParam, 
                                    LPARAM lParam);

    BOOL                        CreateDevice(PADAPTERDESC padpd, PDEVICEDESC pdevd, 
                                    PDISPLAYMODE pdm, UINT uNumBackBuffers, BOOL bWindowed, 
                                    BOOL bDepthBuffer, BOOL bAntialias);

    BOOL                        InitDeviceState();
    BOOL                        SetViewport(DWORD dwWidth, DWORD dwHeight);

    void                        UpdateCamera(PCAMERA pcam);

    BOOL                        MoveWindowTarget(int x, int y);
    BOOL                        SizeWindowTarget(int width, int height);

    HMENU                       CreateMainMenu();

    void                        AddDlgItemTemplate(LPWORD* ppw, WORD wClass, 
                                    LPWSTR wszText, WORD wId, short x, short y, 
                                    short cx, short cy, DWORD dwStyle);

    friend LRESULT CALLBACK     WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
    friend BOOL CALLBACK        DisplayDlgProc(HWND hDlg, UINT uMsg, WPARAM wParam, 
                                    LPARAM lParam);
};

#endif //__INIT_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dbase\display.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    display.cpp

Author:

    Matt Bronder

Description:

    Direct3D initialization routines.

*******************************************************************************/

#include "d3dbase.h"
#include "conio.h"

#ifdef UNDER_XBOX
#define DEMO_HACK
#endif

//******************************************************************************
// Preprocessor definitions
//******************************************************************************

// View and projection transform data
#define VIEW_POS                    D3DXVECTOR3(0.0f, 0.0f, 0.0f)
#define VIEW_AT                     D3DXVECTOR3(0.0f, 0.0f, 1.0f)
#define VIEW_UP                     D3DXVECTOR3(0.0f, 1.0f, 0.0f)
#define PROJ_NEAR                   0.1f
#define PROJ_FAR                    1000.0f
#define PROJ_FOV                    (M_PI / 4.0f)

// Resource identifiers
#define IDM_DEFAULT_FILE_DISPLAY    1
#define IDM_DEFAULT_FILE_EXIT       2

#ifndef IDC_STATIC
#define IDC_STATIC                  (-1)
#endif
#define IDC_DISPLAY_ADAPTER         101
#define IDC_DISPLAY_DEVICE          102
#define IDC_DISPLAY_MODE            103
#define IDC_DISPLAY_FULLSCREEN      104
#define IDC_DISPLAY_DEPTHBUFFER     105
#define IDC_DISPLAY_ANTIALIAS       106

//******************************************************************************
// Function prototypes
//******************************************************************************

#ifndef UNDER_XBOX

static LRESULT CALLBACK WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, 
                                        LPARAM lParam);

static BOOL CALLBACK    DisplayDlgProc(HWND hDlg, UINT message, WPARAM wParam, 
                                        LPARAM lParam);

#endif

//******************************************************************************
// Window procedures
//******************************************************************************

#ifndef UNDER_XBOX

//******************************************************************************
//
// Function:
//
//     WndProc
//
// Description:
//
//     Window procedure to process messages for the main application window.
//
// Arguments:
//
//     HWND hWnd                - Application window
//
//     UINT uMsg                - Message to process
//
//     WPARAM wParam            - First message parameter
//
//     LPARAM lParam            - Second message parameter
//
// Return Value:
//
//     0 if the message was handled, the return of DefWindowProc otherwise.
//
//******************************************************************************
static LRESULT CALLBACK WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    CDisplay* pDisplay;

    if (uMsg == WM_CREATE) {
        LPCREATESTRUCT pcs = (LPCREATESTRUCT)lParam;
        SetWindowLong(hWnd, GWL_USERDATA, (LONG)(pcs->lpCreateParams));
    }

    pDisplay = (CDisplay*)GetWindowLong(hWnd, GWL_USERDATA);
    if (pDisplay) {
        return pDisplay->WndProc(hWnd, uMsg, wParam, lParam);
    }
    else {
        return DefWindowProc(hWnd, uMsg, wParam, lParam);
    }
}

//******************************************************************************
//
// Function:
//
//     DisplayDlgProc
//
// Description:
//
//     Window procedure to process messages for the display dialog.
//
// Arguments:
//
//     HWND hDlg                - Dialog window
//
//     UINT uMsg                - Message to process
//
//     WPARAM wParam            - First message parameter
//
//     LPARAM lParam            - Second message parameter
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
static BOOL CALLBACK DisplayDlgProc(HWND hDlg, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    CDisplay* pDisplay;

    if (uMsg == WM_INITDIALOG) {
        SetWindowLong(hDlg, GWL_USERDATA, lParam);
    }

    pDisplay = (CDisplay*)GetWindowLong(hDlg, GWL_USERDATA);
    if (pDisplay) {
        return pDisplay->DisplayDlgProc(hDlg, uMsg, wParam, lParam);
    }
    else {
        return FALSE;
    }
}

#endif // !UNDER_XBOX

//******************************************************************************
// CDisplay
//******************************************************************************

UINT CDisplay::m_uCreated = 0;

//******************************************************************************
// Initialization methods
//******************************************************************************

//******************************************************************************
//
// Method:
//
//     CDisplay
//
// Description:
//
//     Initialize a display object.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
CDisplay::CDisplay() {

    m_pDirect3D = NULL;
    m_pDevice = NULL;
    m_padpdList = NULL;
    memset(&m_disdCurrent, 0, sizeof(DISPLAYDESC));
    m_hWnd = NULL;
    m_kdKeys = 0;
    memset(&m_jsJoys, 0, sizeof(JOYSTATE));
    memset(&m_jsLast, 0, sizeof(JOYSTATE));
    m_bUseInput = TRUE;
    m_bSwapSticks = TRUE;
    m_bActive = TRUE;
    m_bTimeSync = FALSE;
    m_bShowConsole = FALSE;
    m_cam.vPosition     = VIEW_POS;
    m_cam.vInterest     = VIEW_AT;
    m_cam.fRoll         = 0.0f;
    m_cam.fFieldOfView  = PROJ_FOV;
    m_cam.fNearPlane    = PROJ_NEAR;
    m_cam.fFarPlane     = PROJ_FAR;
    m_fCameraTDelta = 0.5f;
    m_fCameraRDelta = 0.011415f;
    m_pfnSetDevice = NULL;
    m_pfnClearDevice = NULL;
    m_pfnSubWndProc = NULL;
    m_pvSetDeviceParam = NULL;
    m_pvClearDeviceParam = NULL;
    m_pvSubWndProcParam = NULL;
    m_uCreated++;
    m_bCreated = FALSE;
}

//******************************************************************************
//
// Method:
//
//     ~CDisplay
//
// Description:
//
//     Release all display objects.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
CDisplay::~CDisplay() {

    PADAPTERDESC padpd;
    PDEVICEDESC  pdevd;
    PDISPLAYMODE pdm;

    // Release the console
    xReleaseConsole();

    // Release the device
    if (m_pDevice) {
        m_pDevice->Release();
        m_pDevice = NULL;
    }

    // Release the Direct3D object
    if (m_pDirect3D) {
        m_pDirect3D->Release();
        m_pDirect3D = NULL;
    }

    // Release input
    ReleaseInput();

#ifndef UNDER_XBOX

    MoveWindow(m_hWnd, m_rectWnd.left, m_rectWnd.top, 
               m_rectWnd.right - m_rectWnd.left, 
               m_rectWnd.bottom - m_rectWnd.top, TRUE);

#endif // !UNDER_XBOX

    // Free the display device list
    for (padpd = m_padpdList; m_padpdList; padpd = m_padpdList) {
        m_padpdList = m_padpdList->padpdNext;
        for (pdevd = padpd->pdevdList; padpd->pdevdList; pdevd = padpd->pdevdList) {
            padpd->pdevdList = padpd->pdevdList->pdevdNext;
            for (pdm = pdevd->pdmList; pdevd->pdmList; pdm = pdevd->pdmList) {
                pdevd->pdmList = pdevd->pdmList->pdmNext;
                MemFree(pdm);
            }
            MemFree(pdevd);
        }
        MemFree(padpd);
    }

    // Reset any application supplied window procedure
    m_pfnSubWndProc = NULL;

#ifndef UNDER_XBOX

    // Unregister the window class
    UnregisterClass(TEXT("Direct3D Application"), GetInstance());

#endif // !UNDER_XBOX

    // Free the console
    UnloadConsole();

    m_uCreated--;
}

//******************************************************************************
//
// Method:
//
//     Create
//
// Description:
//
//     Initialize DX objects needed for 3D rendering.
//
// Arguments:
//
//     PD3DCREATIONDESC pd3dcd          - Pointer to creation parameters
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CDisplay::Create(PD3DCREATIONDESC pd3dcd) {

    TCHAR           szPath[MAX_PATH];
    LPTSTR          szFile, sz;
    BOOL            bWindowedDefault = TRUE;
    BOOL            bDepthBufferDefault = TRUE;
    BOOL            bAntialiasDefault = TRUE;
    UINT            uNumBackBuffers = 1;
    RECT            rect, rectWndDefault = {30, 30, 550, 460};
    POINT           point;
    PADAPTERDESC    padpd;
    PDEVICEDESC     pdevd;
    PDISPLAYMODE    pdm;
#ifndef UNDER_XBOX
	WNDCLASS        wc;
#endif

    if (m_bCreated || m_uCreated > 1) {
        return FALSE;
    }

    // Load the console to buffer text output
    if (!LoadConsole()) {
        return FALSE;
    }

    // Set the creation parameters
    if (pd3dcd) {
#ifdef UNDER_XBOX
        if (pd3dcd->d3ddm.Format == D3DFMT_X8R8G8B8) pd3dcd->d3ddm.Format = D3DFMT_LIN_X8R8G8B8;
        if (pd3dcd->d3ddm.Format == D3DFMT_A8R8G8B8) pd3dcd->d3ddm.Format = D3DFMT_LIN_A8R8G8B8;
        if (pd3dcd->d3ddm.Format == D3DFMT_X1R5G5B5) pd3dcd->d3ddm.Format = D3DFMT_LIN_X1R5G5B5;
        if (pd3dcd->d3ddm.Format == D3DFMT_R5G6B5) pd3dcd->d3ddm.Format = D3DFMT_LIN_R5G6B5;
        if (pd3dcd->fmtd == D3DFMT_D16) pd3dcd->fmtd = D3DFMT_LIN_D16;
        if (pd3dcd->fmtd == D3DFMT_D24S8) pd3dcd->fmtd = D3DFMT_LIN_D24S8;
#endif // UNDER_XBOX
        if (pd3dcd->d3ddt == D3DDEVTYPE_HAL ||
            pd3dcd->d3ddt == D3DDEVTYPE_SW ||
            pd3dcd->d3ddt == D3DDEVTYPE_REF)
        {
            g_devdDefault.d3ddt = pd3dcd->d3ddt;
        }
        if (pd3dcd->d3ddm.Width != 0 && pd3dcd->d3ddm.Height != 0) {
            memcpy(&g_dmDefault.d3ddm, &pd3dcd->d3ddm, sizeof(D3DDISPLAYMODE));
        }
        g_fmtdDefault = pd3dcd->fmtd;
        if (pd3dcd->mst != D3DMULTISAMPLE_NONE) {
            g_mstDefault = pd3dcd->mst;
        }
        g_devdDefault.uPresentInterval = pd3dcd->uPresentInterval;
        g_devdDefault.dwBehavior = pd3dcd->dwBehavior;

        if (pd3dcd->rectWnd.right > 0 && pd3dcd->rectWnd.bottom > 0) {
            memcpy(&rectWndDefault, &pd3dcd->rectWnd, sizeof(RECT));
        }
        bWindowedDefault = pd3dcd->bWindowed;
        bDepthBufferDefault = pd3dcd->bDepthBuffer;
        bAntialiasDefault = pd3dcd->bAntialias;
        uNumBackBuffers = pd3dcd->uNumBackBuffers;
    }

#ifndef UNDER_XBOX

    // Register the window class
    memset(&wc, 0, sizeof(WNDCLASS));
    wc.style            = 0;
    wc.lpfnWndProc      = ::WndProc;
    wc.cbClsExtra       = 0;
    wc.cbWndExtra       = 0;
    wc.hInstance        = GetInstance();
    wc.hIcon            = NULL;
    wc.hbrBackground    = NULL;
    wc.hCursor          = LoadCursor(NULL, IDC_ARROW);
    wc.lpszMenuName     = NULL;
    wc.lpszClassName    = TEXT("Direct3D Application");

    if (!RegisterClass(&wc)) {
        DebugString(TEXT("RegisterClass failed"));
        return FALSE;
    }

    // Get the name of the executable
    _tcscpy(szPath, GetCommandLine());
    szFile = _tcstok(szPath, TEXT(" \t"));
    sz = szFile + _tcslen(szFile) - 1;
    if (*sz == TEXT('"')) {
        *sz = TEXT('\0');
    }
    sz = szFile + _tcslen(szFile) - 4;
    if (!_tcsncmp(sz, TEXT(".exe"), 4)) {
        *sz = TEXT('\0');
    }
    for (sz = szFile + _tcslen(szFile); sz != szFile && *(sz - 1) != TEXT('\\'); sz--);

    // Create the main application window
    m_hWnd = CreateWindowEx(0, TEXT("Direct3D Application"), 
                            sz, 
                            WS_OVERLAPPEDWINDOW | WS_VISIBLE,
                            rectWndDefault.left, rectWndDefault.top,
                            rectWndDefault.right - rectWndDefault.left, 
                            rectWndDefault.bottom - rectWndDefault.top,
                            NULL, CreateMainMenu(), GetInstance(), this);

    if (!m_hWnd) {
        DebugString(TEXT("CreateWindowEx failed"));
		return FALSE;
    }

    UpdateWindow(m_hWnd);

    // Get the client area of the window
    if (!GetClientRect(m_hWnd, &rect)) {
        return FALSE;
    }

    // Convert the client window coordinates to screen coordinates
    point.x = rect.left;
    point.y = rect.top;
    if (!ClientToScreen(m_hWnd, &point)) {
        return FALSE;
    }

    // Save the screen coordinates of the client window
    SetRect(&m_rectWnd, point.x, point.y, 
            point.x + rect.right, point.y + rect.bottom);

    // Get the size offsets of the window border
    GetWindowRect(m_hWnd, &m_rectBorder);
    SetRect(&m_rectBorder, m_rectWnd.left - m_rectBorder.left,
            m_rectWnd.top - m_rectBorder.top,
            m_rectBorder.right - m_rectWnd.right,
            m_rectBorder.bottom - m_rectWnd.bottom);

#else

    m_hWnd = NULL;

#endif // UNDER_XBOX

    // Initialize input
    if (m_bUseInput) {
        CreateInput(m_hWnd);
    }

    // Create the Direct3D object
    m_pDirect3D = Direct3DCreate8(D3D_SDK_VERSION);
    if (!m_pDirect3D) {
        DebugString(TEXT("Direct3DCreate8 failed"));
        return FALSE;
    }

    // Enumerate all display devices in the system and store the information in
    // a driver list
    m_padpdList = EnumDisplays(m_pDirect3D);
    if (!m_padpdList) {
        return FALSE;
    }

    // Select a default driver
    padpd = SelectAdapter(m_padpdList);
    if (!padpd) {
        return FALSE;
    }

    // Select a default device
    pdevd = SelectDevice(padpd);
    if (!pdevd) {
        return FALSE;
    }

    // Select a default display mode (in case of full screen)
    pdm = SelectDisplayMode(pdevd);
    if (!pdm) {
        return FALSE;
    }

    m_bCreated = TRUE;

    // Create the device
    if (!CreateDevice(padpd, pdevd, pdm, uNumBackBuffers, bWindowedDefault, bDepthBufferDefault, bAntialiasDefault)) {
        m_bCreated = FALSE;
        return FALSE;
    }

    // Create a console to display text output
    if (!xCreateConsole(m_pDevice)) {
        m_bCreated = FALSE;
        return FALSE;
    }

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     CreateDevice
//
// Description:
//
//     Create the device object using the given adapter, device, display
//     mode, and other information.
//
// Arguments:
//
//     PADAPTERDESC padpd       - The adapter to use in creating the device
//                                object
//
//     PDEVICEDESC pdevd        - The device to use in creating the device
//                                object
//
//     PDISPLAYMODE pdm         - The display mode to use in creating the
//                                device object (if full screen)
//
//     UINT uNumBackBuffers     - The number of back buffers (including
//                                prefilter buffer for FSAA) to create
//
//     BOOL bWindowed           - The windowed mode to use with the device
//                                (windowed or full screen)
//
//     BOOL bDepthBuffer        - Indicates whether or not to use an automatic
//                                depth/stencil buffer with the device
//
//     BOOL bAntialias          - Indicates whether or not to create a
//                                multi-sample swap chain for use in FSAA
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CDisplay::CreateDevice(PADAPTERDESC padpd, PDEVICEDESC pdevd, 
                            PDISPLAYMODE pdm, UINT uNumBackBuffers, 
                            BOOL bWindowed, BOOL bDepthBuffer, BOOL bAntialias)
{
    LPDIRECT3DSURFACE8  pd3ds;
    HRESULT             hr;

    if (!m_bCreated || !padpd || !pdevd || !pdm) {
        return FALSE;
    }

    // Check if windowed mode is available
    if (!pdevd->bCanRenderWindowed) {
        bWindowed = FALSE;
    }

    // Check if antialiasing is available
    if (!ANTIALIAS_SUPPORTED(pdevd, pdm, bWindowed)) {
        bAntialias = FALSE;
    }

    // Initialize the presentation parameters
    memset(&m_d3dpp, 0, sizeof(D3DPRESENT_PARAMETERS));
    if (bWindowed) {
        m_d3dpp.BackBufferFormat                  = padpd->d3ddmWindowed.Format;
        m_d3dpp.MultiSampleType                   = pdevd->d3dmstWindowed;
        m_d3dpp.AutoDepthStencilFormat            = pdevd->fmtdWindowed;
    }
    else {
        m_d3dpp.BackBufferWidth                   = pdm->d3ddm.Width;
        m_d3dpp.BackBufferHeight                  = pdm->d3ddm.Height;
#ifndef DEMO_HACK
        m_d3dpp.BackBufferFormat                  = pdm->d3ddm.Format;
#else
        m_d3dpp.BackBufferFormat                  = D3DFMT_LIN_X8R8G8B8;
#endif // DEMO_HACK
        m_d3dpp.MultiSampleType                   = pdm->d3dmst;
#ifndef DEMO_HACK
        m_d3dpp.AutoDepthStencilFormat            = pdm->fmtd;
#else
        m_d3dpp.AutoDepthStencilFormat            = D3DFMT_LIN_D24S8;
#endif // DEMO_HACK
        m_d3dpp.FullScreen_RefreshRateInHz        = pdm->d3ddm.RefreshRate;
        m_d3dpp.FullScreen_PresentationInterval   = pdevd->uPresentInterval;
    }
    m_d3dpp.BackBufferCount                       = uNumBackBuffers;
    m_d3dpp.SwapEffect                            = D3DSWAPEFFECT_DISCARD;
    m_d3dpp.hDeviceWindow                         = m_hWnd;
    m_d3dpp.Windowed                              = bWindowed;
    m_d3dpp.EnableAutoDepthStencil                = bDepthBuffer;
    m_d3dpp.Flags                                 = D3DPRESENTFLAG_LOCKABLE_BACKBUFFER;
    if (!bAntialias) {
        m_d3dpp.MultiSampleType                   = D3DMULTISAMPLE_NONE;
    }

    // Create the device
    hr = m_pDirect3D->CreateDevice(padpd->uAdapter, pdevd->d3ddt, m_hWnd, pdevd->dwBehavior, &m_d3dpp, &m_pDevice);
    if (ResultFailed(hr, TEXT("IDirect3D8::CreateDevice"))) {
        return FALSE;
    }

    // Get the surface description of the back buffer
#ifndef UNDER_XBOX
    hr = m_pDevice->GetBackBuffer(0, D3DBACKBUFFER_TYPE_MONO, &pd3ds);
#else
    hr = m_pDevice->GetBackBuffer(-1, D3DBACKBUFFER_TYPE_MONO, &pd3ds);
#endif // UNDER_XBOX
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::GetBackBuffer"))) {
        return FALSE;
    }
    hr = pd3ds->GetDesc(&m_d3dsdBack);
    pd3ds->Release();
    if (ResultFailed(hr, TEXT("IDirect3DSurface8::GetDesc"))) {
        return FALSE;
    }

    // Initialize the viewport
    SetViewport(m_d3dsdBack.Width, m_d3dsdBack.Height);

    // Initialize the default states of the device
    if (!InitDeviceState()) {
        return FALSE;
    }

    // Initialize the camera
    if (!SetView(&m_cam)) {
        return FALSE;
    }

    m_pDevice->SetRenderState(D3DRS_MULTISAMPLEANTIALIAS, bAntialias);

    m_disdCurrent.padpd = padpd;
    m_disdCurrent.pdevd = pdevd;
    m_disdCurrent.pdm = pdm;
    m_disdCurrent.uNumBackBuffers = uNumBackBuffers;
    m_disdCurrent.bWindowed = bWindowed;
    m_disdCurrent.bDepthBuffer = bDepthBuffer;
    m_disdCurrent.bAntialias = bAntialias;

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     ResetDevice
//
// Description:
//
//     Release all device objects in a scene, reset the device with new
//     presentation parameters, and recreate the device objects in the scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CDisplay::ResetDevice() {

    LPDIRECT3DSURFACE8  pd3ds;
    HRESULT             hr;

    if (!m_bCreated) {
        return FALSE;
    }

    if (m_pfnClearDevice) {
        m_pfnClearDevice(m_pvClearDeviceParam);
    }

    hr = m_pDevice->Reset(&m_d3dpp);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::Reset"))) {
        return FALSE;
    }

    // Get the surface description of the back buffer
#ifndef UNDER_XBOX
    hr = m_pDevice->GetBackBuffer(0, D3DBACKBUFFER_TYPE_MONO, &pd3ds);
#else
    hr = m_pDevice->GetBackBuffer(-1, D3DBACKBUFFER_TYPE_MONO, &pd3ds);
#endif // UNDER_XBOX
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::GetBackBuffer"))) {
        return FALSE;
    }
    hr = pd3ds->GetDesc(&m_d3dsdBack);
    pd3ds->Release();
    if (ResultFailed(hr, TEXT("IDirect3DSurface8::GetDesc"))) {
        return FALSE;
    }

    // Initialize the viewport
    SetViewport(m_d3dsdBack.Width, m_d3dsdBack.Height);

#ifndef UNDER_XBOX  // Only reset the initial device state on WinX
    InitDeviceState();
#endif // !UNDER_XBOX

    // Initialize the camera
    if (!SetView(&m_cam)) {
        return FALSE;
    }

    if (!xResetConsole()) {
        return FALSE;
    }

    if (m_pfnSetDevice) {
        if (!m_pfnSetDevice(m_pvSetDeviceParam)) {
            return FALSE;
        }
    }

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     InitDeviceState
//
// Description:
//
//     Initialize the default device states.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CDisplay::InitDeviceState() {

    D3DMATRIX           mTransform;
    BOOL                bRet = TRUE;
    UINT                i;
    HRESULT             hr;

    if (!m_bCreated) {
        return FALSE;
    }

    // Begin the scene
    hr = m_pDevice->BeginScene();
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::BeginScene"))) {
        return FALSE;
    }

    // Set ambient lighting
    hr = m_pDevice->SetRenderState(D3DRS_AMBIENT, 
                                      (DWORD)RGBA_MAKE(32, 32, 32, 255));
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }

    // Set the texture filters
    for (i = 0; i < 4; i++) {
#if 0 // Non-KELVIN code
    for (i = 0; i < 2; i++) {
#endif // 0
        hr = m_pDevice->SetTextureStageState(i, D3DTSS_MINFILTER, (DWORD)D3DTEXF_LINEAR);
        if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetTextureStageState"))) {
            bRet = FALSE;
        }

        hr = m_pDevice->SetTextureStageState(i, D3DTSS_MAGFILTER, (DWORD)D3DTEXF_LINEAR);
        if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetTextureStageState"))) {
            bRet = FALSE;
        }
    }

    // Set blend modes
    hr = m_pDevice->SetRenderState(D3DRS_SRCBLEND, (DWORD)D3DBLEND_SRCALPHA);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }

    hr = m_pDevice->SetRenderState(D3DRS_DESTBLEND, (DWORD)D3DBLEND_INVSRCALPHA);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }

    // Modulate color and alpha texture stages
    hr = m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_DIFFUSE);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetTextureStageState"))) {
        bRet = FALSE;
    }

    hr = m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_MODULATE);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetTextureStageState"))) {
        bRet = FALSE;
    }

    hr = m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetTextureStageState"))) {
        bRet = FALSE;
    }

    // Set the alpha comparison function
    hr = m_pDevice->SetRenderState(D3DRS_ALPHAFUNC, (DWORD)D3DCMP_GREATEREQUAL);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }

    // Set the alpha reference value to opaque
    hr = m_pDevice->SetRenderState(D3DRS_ALPHAREF, 0xFF);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }

    // Turn on specular highlights
    hr = m_pDevice->SetRenderState(D3DRS_SPECULARENABLE, (DWORD)FALSE);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }

    // Enable dithering
    hr = m_pDevice->SetRenderState(D3DRS_DITHERENABLE, (DWORD)TRUE);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }

    // Disable per-vertex color
    hr = m_pDevice->SetRenderState(D3DRS_COLORVERTEX, (DWORD)FALSE);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }

/*  // ##DELETE: The following block does redundant render state calls
    // in that it sets the device to states that should already be the
    // default state.  When the default render states are incorrect
    // on a system the following block replaces the above block as a quick
    // test

    // Set ambient lighting
    hr = m_pDevice->SetRenderState(D3DRS_AMBIENT, 
                                      (DWORD)RGBA_MAKE(128, 128, 128, 128));
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }

    // Enable z-buffering
    hr = m_pDevice->SetRenderState(D3DRS_ZENABLE, (DWORD)D3DZB_TRUE);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }

    hr = m_pDevice->SetRenderState(D3DRS_ZWRITEENABLE, (DWORD)TRUE);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }

    hr = m_pDevice->SetRenderState(D3DRS_ZFUNC, (DWORD)D3DCMP_LESSEQUAL);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }

    // Set the texture filters
    for (i = 0; i < 8; i++) {
        hr = m_pDevice->SetTextureStageState(i, D3DTSS_MINFILTER, (DWORD)D3DTEXF_LINEAR);
        if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetTextureStageState"))) {
            bRet = FALSE;
        }

        hr = m_pDevice->SetTextureStageState(i, D3DTSS_MAGFILTER, (DWORD)D3DTEXF_LINEAR);
        if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetTextureStageState"))) {
            bRet = FALSE;
        }

        hr = m_pDevice->SetTextureStageState(i, D3DTSS_MIPFILTER, (DWORD)D3DTEXF_NONE);
        if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetTextureStageState"))) {
            bRet = FALSE;
        }
    }

    // Use gouraud shading
    hr = m_pDevice->SetRenderState(D3DRS_SHADEMODE, (DWORD)D3DSHADE_GOURAUD);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }

    // Enable perspective correction
    hr = m_pDevice->SetRenderState(D3DRS_TEXTUREPERSPECTIVE, (DWORD)TRUE);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }

    // Set blend modes
    hr = m_pDevice->SetRenderState(D3DRS_SRCBLEND, (DWORD)D3DBLEND_SRCALPHA);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }

    hr = m_pDevice->SetRenderState(D3DRS_DESTBLEND, (DWORD)D3DBLEND_INVSRCALPHA);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }
    
    // Modulate color and alpha texture stages
    hr = SetColorStage(0, D3DTA_TEXTURE, D3DTA_DIFFUSE, D3DTOP_MODULATE);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetTextureStageState"))) {
        bRet = FALSE;
    }

    hr = SetAlphaStage(0, D3DTA_TEXTURE, D3DTA_DIFFUSE, D3DTOP_MODULATE);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetTextureStageState"))) {
        bRet = FALSE;
    }

    hr = m_pDevice->SetTextureStageState(1, D3DTSS_COLOROP, D3DTOP_DISABLE);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetTextureStageState"))) {
        bRet = FALSE;
    }

    hr = m_pDevice->SetTextureStageState(1, D3DTSS_ALPHAOP, D3DTOP_DISABLE);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetTextureStageState"))) {
        bRet = FALSE;
    }

    // Set the alpha comparison function
    hr = m_pDevice->SetRenderState(D3DRS_ALPHAFUNC, (DWORD)D3DCMP_GREATEREQUAL);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }

    // Set the alpha reference value to opaque
    hr = m_pDevice->SetRenderState(D3DRS_ALPHAREF, 0xFF);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }

    // Use a solid fill mode
    hr = m_pDevice->SetRenderState(D3DRS_FILLMODE, (DWORD)D3DFILL_SOLID);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }
    
    // Turn on specular highlights
    hr = m_pDevice->SetRenderState(D3DRS_SPECULARENABLE, (DWORD)TRUE);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }

    // Disable texture wrapping
    for (i = 0; i < 8; i++) {
        hr = m_pDevice->SetRenderState((D3DRENDERSTATETYPE)((DWORD)D3DRS_WRAP0 + i), (DWORD)0);
        if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
            bRet = FALSE;
        }
    }

    // Enable dithering
    hr = m_pDevice->SetRenderState(D3DRS_DITHERENABLE, (DWORD)TRUE);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }

    // Disable per-vertex color
    hr = m_pDevice->SetRenderState(D3DRS_COLORVERTEX, (DWORD)FALSE);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }
*/
    // End the scene
    hr = m_pDevice->EndScene();
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::EndScene"))) {
        bRet = FALSE;
    }

    // Initialize the world matrix to the identity matrix
    InitMatrix(&mTransform,
        1.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 1.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 1.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 1.0f
    );

    hr = m_pDevice->SetTransform(D3DTS_WORLD, &mTransform);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetTransform"))) {
        return FALSE;
    }

    return bRet;
}

//******************************************************************************
//
// Method:
//
//     SetViewport
//
// Description:
//
//     Initialize the viewport using the given dimensions for the frustum.
//
// Arguments:
//
//     DWORD dwWidth                    - Width of the viewport
//
//     DWORD dwHeight                   - Height of the viewport
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CDisplay::SetViewport(DWORD dwWidth, DWORD dwHeight) {

    D3DVIEWPORT8    viewport;
    HRESULT         hr;

    if (!m_bCreated) {
        return FALSE;
    }

    // Set a viewport for the device
    viewport.X = 0;
    viewport.Y = 0;
    viewport.Width = dwWidth;
    viewport.Height = dwHeight;
    viewport.MinZ = 0.0f;
    viewport.MaxZ = 1.0f;

    hr = m_pDevice->SetViewport(&viewport);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetViewport"))) {
        return FALSE;
    }

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     WndProc
//
// Description:
//
//     Window procedure to process messages for the main application window.
//
// Arguments:
//
//     HWND hWnd                - Application window
//
//     UINT uMsg                - Message to process
//
//     WPARAM wParam            - First message parameter
//
//     LPARAM lParam            - Second message parameter
//
// Return Value:
//
//     0 if the message was handled, the return of DefWindowProc otherwise.
//
//******************************************************************************
LRESULT CDisplay::WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    // If the application supplied a window procedure, give it a chance to
    // handle the message first
    if (m_pfnSubWndProc) {
        LRESULT lr;
        if (m_pfnSubWndProc(m_pvSubWndProcParam, &lr, hWnd, uMsg, wParam, lParam)) {
            return lr;  // The message was handled, return the given LRESULT
        }
    }

#ifdef UNDER_XBOX
    return 0;
#else
    switch (uMsg) {

        case WM_ACTIVATEAPP:

            // Suspend the application if it is running in full screen mode
            if (!m_disdCurrent.bWindowed) {
                m_bActive = (BOOL)wParam;
            }

            break;

        case WM_MOVE:

            if (!MoveWindowTarget((short)LOWORD(lParam), (short)HIWORD(lParam))) {
                DestroyWindow(hWnd);
            }

            break;

        case WM_SIZE:

            if (wParam != SIZE_MINIMIZED) {
                if (!SizeWindowTarget(LOWORD(lParam), HIWORD(lParam))) {
                    DestroyWindow(hWnd);
                }
            }
            break;

        case WM_SETCURSOR:

            if (m_bActive && !m_disdCurrent.bWindowed) {
                SetCursor(NULL);
                return TRUE;
            }
            break;

        case WM_MOUSEMOVE:

            if (m_bActive) {
                POINT point;
                GetCursorPos(&point);
                ScreenToClient(hWnd, &point);
                m_pDevice->SetCursorPosition(point.x, point.y, D3DCURSOR_IMMEDIATE_UPDATE);
            }
            break;

        case WM_ENTERMENULOOP:

            if (!m_disdCurrent.bWindowed) {
// ##REVIEW: Is FlipToGDISurface gone or has it been changed to something else?  Can we simply remove the call and still have things work?
//                m_pDevice->FlipToGDISurface();
                DrawMenuBar(hWnd);
                RedrawWindow(hWnd, NULL, NULL, RDW_FRAME);
            }
            break;

        case WM_EXITMENULOOP:

            // Do not include the amount of time the menu was up in game time calculations
            m_bTimeSync = TRUE;
            break;

        case WM_POWERBROADCAST:

            switch (wParam) {

                case PBT_APMQUERYSUSPEND:
                    if (!m_disdCurrent.bWindowed) {
//                        m_pDevice->FlipToGDISurface();
                        DrawMenuBar(hWnd);
                        RedrawWindow(hWnd, NULL, NULL, RDW_FRAME);
                    }
                    break;

                case PBT_APMRESUMESUSPEND:
                    // Do not include the amount of time power management was up in game time calculations
                    m_bTimeSync = TRUE;
                    break;
            }
            break;

        case WM_SYSCOMMAND:

            switch (wParam) {

                case SC_MOVE:
                case SC_SIZE:
                case SC_MAXIMIZE:
                case SC_MONITORPOWER:
                    if (!m_disdCurrent.bWindowed) {
                        return 1;
                    }
                    break;
            }
            break;

        case WM_COMMAND:

            switch (LOWORD(wParam)) {

                case IDM_DEFAULT_FILE_DISPLAY:
                    Select();
                    return 0;

                case IDM_DEFAULT_FILE_EXIT:
                    SendMessage(hWnd, WM_CLOSE, 0, 0);
                    return 0;
            }

            break;

        case WM_KEYDOWN:

            switch (wParam) {

                case VK_LEFT:
                    m_kdKeys |= KEY_LEFT;
                    return 0;

                case VK_RIGHT:
                    m_kdKeys |= KEY_RIGHT;
                    return 0;

                case VK_UP:
                    m_kdKeys |= KEY_UP;
                    return 0;

                case VK_DOWN:
                    m_kdKeys |= KEY_DOWN;
                    return 0;

                case VK_ADD:
                    m_kdKeys |= KEY_ADD;
                    return 0;

                case VK_SUBTRACT:
                    m_kdKeys |= KEY_SUBTRACT;
                    return 0;

                case VK_INSERT:
                    m_kdKeys |= KEY_INSERT;
                    return 0;

                case VK_DELETE:
                    m_kdKeys |= KEY_DELETE;
                    return 0;

                case VK_HOME:
                    m_kdKeys |= KEY_HOME;
                    return 0;

                case VK_END:
                    m_kdKeys |= KEY_END;
                    return 0;

                case VK_PRIOR:
                    m_kdKeys |= KEY_PAGEUP;
                    return 0;

                case VK_NEXT:
                    m_kdKeys |= KEY_PAGEDOWN;
                    return 0;

                case VK_SHIFT:
                    m_kdKeys |= KEY_SHIFT;
                    return 0;

                case VK_ESCAPE: // Exit
                    SendMessage(hWnd, WM_CLOSE, 0, 0);
                    return 0;
            }

            break;

        case WM_KEYUP:

            switch (wParam) {

                case VK_LEFT:
                    m_kdKeys &= ~KEY_LEFT;
                    return 0;

                case VK_RIGHT:
                    m_kdKeys &= ~KEY_RIGHT;
                    return 0;

                case VK_UP:
                    m_kdKeys &= ~KEY_UP;
                    return 0;

                case VK_DOWN:
                    m_kdKeys &= ~KEY_DOWN;
                    return 0;

                case VK_ADD:
                    m_kdKeys &= ~KEY_ADD;
                    return 0;

                case VK_SUBTRACT:
                    m_kdKeys &= ~KEY_SUBTRACT;
                    return 0;

                case VK_INSERT:
                    m_kdKeys &= ~KEY_INSERT;
                    return 0;

                case VK_DELETE:
                    m_kdKeys &= ~KEY_DELETE;
                    return 0;

                case VK_HOME:
                    m_kdKeys &= ~KEY_HOME;
                    return 0;

                case VK_END:
                    m_kdKeys &= ~KEY_END;
                    return 0;

                case VK_PRIOR:
                    m_kdKeys &= ~KEY_PAGEUP;
                    return 0;

                case VK_NEXT:
                    m_kdKeys &= ~KEY_PAGEDOWN;
                    return 0;

                case VK_SHIFT:
                    m_kdKeys &= ~KEY_SHIFT;
                    return 0;

                case VK_F2:     // Open display dialog
                    Select();
                    return 0;
            }

            break;

        case WM_SYSKEYUP:

            switch (wParam) {

                case VK_RETURN:
                    Update(m_disdCurrent.pdm, !m_disdCurrent.bWindowed,
                                  m_disdCurrent.bDepthBuffer, 
                                  m_disdCurrent.bAntialias);
                    return 0;
            }

            break;

        case WM_CHAR:

            switch (wParam) {

                case TEXT('D'):
                case TEXT('d'):
                    Update(m_disdCurrent.pdm, m_disdCurrent.bWindowed, 
                        !m_disdCurrent.bDepthBuffer, m_disdCurrent.bAntialias);
                    return 0;

                case TEXT('A'):
                case TEXT('a'):
                    Update(m_disdCurrent.pdm, m_disdCurrent.bWindowed, 
                        m_disdCurrent.bDepthBuffer, !m_disdCurrent.bAntialias);
                    return 0;

                case TEXT('~'):
                case TEXT('`'):
                    m_bShowConsole = !m_bShowConsole;
                    return 0;
            }

            break;

        case WM_CLOSE:
            DestroyWindow(hWnd);
            return 0;

        case WM_DESTROY:
            PostQuitMessage(0);
            return 0;
    }

    return DefWindowProc(hWnd, uMsg, wParam, lParam);

#endif // !UNDER_XBOX
}

//******************************************************************************
// Member access functions
//******************************************************************************

//******************************************************************************
//
// Method:
//
//     GetDirect3D8
//
// Description:
//
//     Return a pointer to the Direct3D8 object.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     IDirect3D8 interface pointer.
//
//******************************************************************************
LPDIRECT3D8 CDisplay::GetDirect3D8() {

    return m_pDirect3D;
}

//******************************************************************************
//
// Method:
//
//     GetDevice8
//
// Description:
//
//     Return a pointer to the Direct3DDevice8 object.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     IDirect3DDevice8 interface pointer.
//
//******************************************************************************
LPDIRECT3DDEVICE8 CDisplay::GetDevice8() {

    return m_pDevice;
}

//******************************************************************************
//
// Method:
//
//     GetCurrentDisplay
//
// Description:
//
//     Return a description of the current display.
//
// Arguments:
//
//     PDISPLAYDESC pdisd       - Pointer to a structure to be filled with
//                                a description of the current display
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CDisplay::GetCurrentDisplay(PDISPLAYDESC pdisd) {

    if (pdisd) {
        memcpy(pdisd, &m_disdCurrent, sizeof(DISPLAYDESC));
    }
}

//******************************************************************************
//
// Method:
//
//     GetDisplayList
//
// Description:
//
//     Return a pointer to the head of the display list.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     A pointer to the head of the display adapter list.
//
//******************************************************************************
PADAPTERDESC CDisplay::GetDisplayList() {

    return m_padpdList;
}

//******************************************************************************
//
// Method:
//
//     IsActive
//
// Description:
//
//     Indicate whether or not the display is currently active.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the display is active, FALSE if not.
//
//******************************************************************************
BOOL CDisplay::IsActive() {

    return m_bActive;
}

//******************************************************************************
//
// Method:
//
//     GetWidth
//
// Description:
//
//     Return the width of the first back buffer in the device's swap chain.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     Width of the display.
//
//******************************************************************************
UINT CDisplay::GetWidth() {

    return m_d3dsdBack.Width;
}

//******************************************************************************
//
// Method:
//
//     GetHeight
//
// Description:
//
//     Return the height of the first back buffer in the device's swap chain.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     Height of the display.
//
//******************************************************************************
UINT CDisplay::GetHeight() {

    return m_d3dsdBack.Height;
}

//******************************************************************************
//
// Method:
//
//     GetWindow
//
// Description:
//
//     Return the focus window for the device.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     Handle of the focus window.
//
//******************************************************************************
HWND CDisplay::GetWindow() {

    return m_hWnd;
}

//******************************************************************************
//
// Method:
//
//     GetPresentParameters
//
// Description:
//
//     Return the presentation parameters used to Create (or last Reset) the 
//     current device.
//
// Arguments:
//
//     D3DPRESENT_PARAMETERS* pd3dpp    - Pointer to a structure that will contain
//                                        the presentation parameters on return
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CDisplay::GetPresentParameters(D3DPRESENT_PARAMETERS* pd3dpp) {

    if (pd3dpp) {
        memcpy(pd3dpp, &m_d3dpp, sizeof(D3DPRESENT_PARAMETERS));
    }
}

//******************************************************************************
//
// Method:
//
//     GetKeyState
//
// Description:
//
//     Return the current state of the keyboard.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     A combination of key flags OR'd together indicating what keys are down.
//
//******************************************************************************
KEYSDOWN CDisplay::GetKeyState() {

    return m_kdKeys;
}

//******************************************************************************
//
// Method:
//
//     GetJoyState
//
// Description:
//
//     Return the current and last states of the joystick.
//
// Arguments:
//
//     PJOYSTATE pjsCurrent     - Pointer to a structure to be filled with the
//                                current state of the joystick
//
//     PJOYSTATE pjsLast        - Pointer to a structure to be filled with the
//                                state of the joystick on the previous poll
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CDisplay::GetJoyState(PJOYSTATE pjsCurrent, PJOYSTATE pjsLast) {

    if (pjsCurrent) {
        memcpy(pjsCurrent, &m_jsJoys, sizeof(JOYSTATE));
    }
    if (pjsLast) {
        memcpy(pjsLast, &m_jsLast, sizeof(JOYSTATE));
    }
}

//******************************************************************************
//
// Method:
//
//     GetCamera
//
// Description:
//
//     Return a description of the display camera.
//
// Arguments:
//
//     PCAMERA pcam             - Pointer to a structure to be filled with
//                                the camera description
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CDisplay::GetCamera(PCAMERA pcam) {

    if (pcam) {
        memcpy(pcam, &m_cam, sizeof(CAMERA));
    }
}

//******************************************************************************
//
// Method:
//
//     SetCamera
//
// Description:
//
//     Initialize the display camera to the given camera description.
//
// Arguments:
//
//     PCAMERA pcam             - Pointer to a camera description to use for
//                                the display camera
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CDisplay::SetCamera(PCAMERA pcam) {

    if (pcam) {
        memcpy(&m_cam, pcam, sizeof(CAMERA));
    }
}

//******************************************************************************
//
// Method:
//
//     SetCameraOffsets
//
// Description:
//
//     Set the delta values for the translation and rotation of the camera
//     when it is moved in response to user input.
//
// Arguments:
//
//     float fTranslation       - Camera translation delta value
//
//     float fRotation          - Camera rotation delta value
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CDisplay::SetCameraOffsets(float fTranslation, float fRotation) {

    m_fCameraTDelta = fTranslation;
    m_fCameraRDelta = fRotation;
}

//******************************************************************************
//
// Method:
//
//     ConsoleVisible
//
// Description:
//
//     Return the state of console visibility.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the console is currently being displayed, FALSE otherwise.
//
//******************************************************************************
BOOL CDisplay::ConsoleVisible() {

    return m_bShowConsole;
}

//******************************************************************************
//
// Method:
//
//     IsWindowed
//
// Description:
//
//     Indicate if the display is windowed or full screen.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the display is windowed, FALSE if it is full screen.
//
//******************************************************************************
BOOL CDisplay::IsWindowed() {

    return m_disdCurrent.bWindowed;
}

//******************************************************************************
//
// Method:
//
//     IsDepthBuffered
//
// Description:
//
//     Indicate whether or not the display is using a depth buffer.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the display is using a depth buffer, FALSE if it is not.
//
//******************************************************************************
BOOL CDisplay::IsDepthBuffered() {

    return m_disdCurrent.bDepthBuffer;
}

//******************************************************************************
// Utilitiy functions
//******************************************************************************

//******************************************************************************
//
// Method:
//
//     Reset
//
// Description:
//
//     Verify the given present parameters, update the state of CDisplay to be
//     in sync with the parameters, and Reset the device.
//
// Arguments:
//
//     D3DPRESENT_PARAMETERS pd3dpp     - Present parameters to use in the Reset
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CDisplay::Reset(D3DPRESENT_PARAMETERS* pd3dpp) {

    D3DPRESENT_PARAMETERS   d3dpp;
    DISPLAYDESC             disdLast;
    HWND                    hWndLast;
    PDISPLAYMODE            pdm;
    D3DFORMAT               fmtr, fmtd;
    D3DMULTISAMPLE_TYPE     mst;
    BOOL                    bRestorePos;
    HRESULT                 hr;

    if (!m_bCreated || !pd3dpp) {
        return FALSE;
    }

    // Check if windowed mode is available
    if (pd3dpp->Windowed && !m_disdCurrent.pdevd->bCanRenderWindowed) {
        return FALSE;
    }

    // If the application is going from full screen to windowed, the window
    // position must be restored
    bRestorePos = (pd3dpp->Windowed && !m_disdCurrent.bWindowed);

    if (pd3dpp->Windowed) {
        // Verify the format of the back buffer matches with the display mode of the adapter
        if (m_disdCurrent.padpd->d3ddmWindowed.Format != pd3dpp->BackBufferFormat) {
            DebugString(TEXT("The given back buffer format does not match the display mode of the adapter"));
            return FALSE;
        }
        fmtr = m_disdCurrent.padpd->d3ddmWindowed.Format;
        fmtd = m_disdCurrent.pdevd->fmtdWindowed;
        mst = m_disdCurrent.pdevd->d3dmstWindowed;
    }
    else {
        // Find the given display mode in the display list
        for (pdm = m_disdCurrent.pdevd->pdmList; pdm; pdm = pdm->pdmNext) {
            if (pdm->d3ddm.Width == pd3dpp->BackBufferWidth &&
                pdm->d3ddm.Height == pd3dpp->BackBufferHeight &&
                pdm->d3ddm.Format == pd3dpp->BackBufferFormat &&
                pdm->d3ddm.RefreshRate == pd3dpp->FullScreen_RefreshRateInHz)
            {
                break;
            }
        }

        if (!pdm) {
            DebugString(TEXT("The given display mode is not present in the display list"));
            return FALSE;
        }

        if (pd3dpp->FullScreen_PresentationInterval != m_disdCurrent.pdevd->uPresentInterval) {
            D3DCAPS8 d3dcaps;
            hr = m_pDirect3D->GetDeviceCaps(m_disdCurrent.padpd->uAdapter, m_disdCurrent.pdevd->d3ddt, &d3dcaps);
            if (ResultFailed(hr, TEXT("IDirect3D8::GetDeviceCaps"))) {
                return FALSE;
            }
            if (!d3dcaps.PresentationIntervals & pd3dpp->FullScreen_PresentationInterval) {
                DebugString(TEXT("The current device does not support the given presentation interval"));
                return FALSE;
            }
        }

        fmtr = pdm->d3ddm.Format;
        fmtd = pdm->fmtd;
        mst = pdm->d3dmst;
    }

    if (pd3dpp->EnableAutoDepthStencil && pd3dpp->AutoDepthStencilFormat != fmtd) {
        hr = m_pDirect3D->CheckDeviceFormat(m_disdCurrent.padpd->uAdapter, m_disdCurrent.pdevd->d3ddt, fmtr, D3DUSAGE_DEPTHSTENCIL, D3DRTYPE_SURFACE, pd3dpp->AutoDepthStencilFormat);
        if (FAILED(hr)) {
            DebugString(TEXT("AutoDepthStencilFormat %d is not available"), pd3dpp->AutoDepthStencilFormat);
            return FALSE;
        }
        hr = m_pDirect3D->CheckDepthStencilMatch(m_disdCurrent.padpd->uAdapter, m_disdCurrent.pdevd->d3ddt, fmtr, fmtr, pd3dpp->AutoDepthStencilFormat);
        if (FAILED(hr)) {
            DebugString(TEXT("AutoDepthStencilFormat %d is not compatible with render target format %d"), pd3dpp->AutoDepthStencilFormat, fmtr);
            return FALSE;
        }
    }

#ifndef DEMO_HACK
    if (pd3dpp->MultiSampleType != mst) {
        hr = m_pDirect3D->CheckDeviceMultiSampleType(m_disdCurrent.padpd->uAdapter, m_disdCurrent.pdevd->d3ddt, fmtr, pd3dpp->Windowed, pd3dpp->MultiSampleType);
        if (FAILED(hr)) {
            DebugString(TEXT("Multisample type %d is not available"), pd3dpp->MultiSampleType);
            return FALSE;
        }
    }
#endif

    memcpy(&disdLast, &m_disdCurrent, sizeof(DISPLAYDESC));

    // Update the display list
    if (pd3dpp->Windowed) {
        if (pd3dpp->EnableAutoDepthStencil) {
            m_disdCurrent.pdevd->fmtdWindowed = pd3dpp->AutoDepthStencilFormat;
        }
        m_disdCurrent.pdevd->d3dmstWindowed = pd3dpp->MultiSampleType;
    }
    else {
        if (pd3dpp->EnableAutoDepthStencil) {
            pdm->fmtd = pd3dpp->AutoDepthStencilFormat;
        }
        pdm->d3dmst = pd3dpp->MultiSampleType;
        m_disdCurrent.pdevd->uPresentInterval = pd3dpp->FullScreen_PresentationInterval;
        m_disdCurrent.pdm = pdm;
    }

    m_disdCurrent.bWindowed = pd3dpp->Windowed;
    m_disdCurrent.bDepthBuffer = pd3dpp->EnableAutoDepthStencil;
    m_disdCurrent.uNumBackBuffers = pd3dpp->BackBufferCount;
    m_disdCurrent.bAntialias = (pd3dpp->MultiSampleType != D3DMULTISAMPLE_NONE);

    hWndLast = m_hWnd;
    m_hWnd = pd3dpp->hDeviceWindow;
    memcpy(&d3dpp, &m_d3dpp, sizeof(D3DPRESENT_PARAMETERS));
    memcpy(&m_d3dpp, pd3dpp, sizeof(D3DPRESENT_PARAMETERS));

    if (!ResetDevice()) {
        // Restore the display description
        memcpy(&m_disdCurrent, &disdLast, sizeof(DISPLAYDESC));
        memcpy(&m_d3dpp, &d3dpp, sizeof(D3DPRESENT_PARAMETERS));
        m_hWnd = hWndLast;
        return FALSE;
    }

#ifndef UNDER_XBOX
    if (bRestorePos) {

        // Restore the window position
        MoveWindow(m_hWnd, m_rectWnd.left - m_rectBorder.left, 
                   m_rectWnd.top - m_rectBorder.top, 
                   m_rectWnd.right - (m_rectWnd.left - m_rectBorder.left) + m_rectBorder.right, 
                   m_rectWnd.bottom - (m_rectWnd.top - m_rectBorder.top) + m_rectBorder.bottom, TRUE);
    }
#endif // !UNDER_XBOX

    if (!m_disdCurrent.bAntialias) {
        m_pDevice->SetRenderState(D3DRS_MULTISAMPLEANTIALIAS, FALSE);
    }

    // Do not include the amount of time the display took to update in game time calculations
    m_bTimeSync = TRUE;

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     Update
//
// Description:
//
//     Reset the device with the given display mode, windowed mode, auto
//     depth/stencil buffer, and multi-sample swap chain.
//
// Arguments:
//
//     PDISPLAYMODE pdm         - The display mode to use in resetting the
//                                device object (if full screen)
//
//     BOOL bWindowed           - The windowed mode to use with the device
//                                (windowed or full screen)
//
//     BOOL bDepthBuffer        - Indicates whether or not to use an automatic
//                                depth/stencil buffer with the device
//
//     BOOL bAntialias          - Indicates whether or not to create a
//                                multi-sample swap chain for use in FSAA
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CDisplay::Update(PDISPLAYMODE pdm, BOOL bWindowed, BOOL bDepthBuffer, BOOL bAntialias) {

    D3DPRESENT_PARAMETERS   d3dpp;
    DISPLAYDESC             disdLast;
    BOOL                    bRestorePos;

    if (!m_bCreated) {
        return TRUE;
    }

#ifdef UNDER_XBOX
    if (bWindowed) {
        return FALSE;
    }
#endif // UNDER_XBOX

    // Check if windowed mode is available
    if (bWindowed && !m_disdCurrent.pdevd->bCanRenderWindowed) {
        return FALSE;
    }

    // If no display mode was given, use the current
    if (!pdm) {
        pdm = m_disdCurrent.pdm;
    }

    // Check if antialiasing is available
    if (bAntialias && !ANTIALIAS_SUPPORTED(m_disdCurrent.pdevd, pdm, bWindowed)) {
        return FALSE;
    }

    // If the application is going from full screen to windowed, the window
    // position must be restored
    bRestorePos = (bWindowed && !m_disdCurrent.bWindowed);

    memcpy(&disdLast, &m_disdCurrent, sizeof(DISPLAYDESC));
    m_disdCurrent.pdm = pdm;
    m_disdCurrent.bWindowed = bWindowed;
    m_disdCurrent.bDepthBuffer = bDepthBuffer;
    m_disdCurrent.bAntialias = bAntialias;

    // Initialize the presentation parameters
    memcpy(&d3dpp, &m_d3dpp, sizeof(D3DPRESENT_PARAMETERS));
    memset(&m_d3dpp, 0, sizeof(D3DPRESENT_PARAMETERS));
    if (bWindowed) {
        m_d3dpp.BackBufferFormat                  = m_disdCurrent.padpd->d3ddmWindowed.Format;
        m_d3dpp.MultiSampleType                   = m_disdCurrent.pdevd->d3dmstWindowed;
        m_d3dpp.AutoDepthStencilFormat            = m_disdCurrent.pdevd->fmtdWindowed;
    }
    else {
        m_d3dpp.BackBufferWidth                   = pdm->d3ddm.Width;
        m_d3dpp.BackBufferHeight                  = pdm->d3ddm.Height;
        m_d3dpp.BackBufferFormat                  = pdm->d3ddm.Format;
        m_d3dpp.MultiSampleType                   = pdm->d3dmst;
        m_d3dpp.AutoDepthStencilFormat            = pdm->fmtd;
        m_d3dpp.FullScreen_RefreshRateInHz        = pdm->d3ddm.RefreshRate;
        m_d3dpp.FullScreen_PresentationInterval   = m_disdCurrent.pdevd->uPresentInterval;
    }
    m_d3dpp.BackBufferCount                       = 1;
    m_d3dpp.SwapEffect                            = D3DSWAPEFFECT_DISCARD;
    m_d3dpp.hDeviceWindow                         = m_hWnd;
    m_d3dpp.Windowed                              = bWindowed;
    m_d3dpp.EnableAutoDepthStencil                = bDepthBuffer;
    m_d3dpp.Flags                                 = D3DPRESENTFLAG_LOCKABLE_BACKBUFFER;
    if (!bAntialias) {
        m_d3dpp.MultiSampleType                   = D3DMULTISAMPLE_NONE;
    }

    if (!ResetDevice()) {
        // Restore the display description
        memcpy(&m_disdCurrent, &disdLast, sizeof(DISPLAYDESC));
        memcpy(&m_d3dpp, &d3dpp, sizeof(D3DPRESENT_PARAMETERS));
        return FALSE;
    }

#ifndef UNDER_XBOX
    if (bRestorePos) {

        // Restore the window position
        MoveWindow(m_hWnd, m_rectWnd.left - m_rectBorder.left, 
                   m_rectWnd.top - m_rectBorder.top, 
                   m_rectWnd.right - (m_rectWnd.left - m_rectBorder.left) + m_rectBorder.right, 
                   m_rectWnd.bottom - (m_rectWnd.top - m_rectBorder.top) + m_rectBorder.bottom, TRUE);
    }
#endif // !UNDER_XBOX

    m_pDevice->SetRenderState(D3DRS_MULTISAMPLEANTIALIAS, bAntialias);

    // Do not include the amount of time the display took to update in game time calculations
    m_bTimeSync = TRUE;

    return TRUE;
}

/*
//******************************************************************************
//
// Method:
//
//     Update
//
// Description:
//
//     Reset the device with the given display mode, windowed mode, auto
//     depth/stencil buffer, and multi-sample swap chain.
//
// Arguments:
//
//     PDISPLAYMODE pdm         - The display mode to use in resetting the
//                                device object (if full screen)
//
//     BOOL bWindowed           - The windowed mode to use with the device
//                                (windowed or full screen)
//
//     BOOL bDepthBuffer        - Indicates whether or not to use an automatic
//                                depth/stencil buffer with the device
//
//     BOOL bAntialias          - Indicates whether or not to create a
//                                multi-sample swap chain for use in FSAA
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CDisplay::Update(D3DDISPLAYMODE* pd3ddm, BOOL bWindowed, BOOL bDepthBuffer, 
                                                        D3DMULTISAMPLE_TYPE mst)
{
    PDISPLAYMODE pdm;

    if (!pd3ddm) {
        return FALSE;
    }

    // Find the given display mode in the display list
    for (pdm = m_disdCurrent.pdevd->pdmList; pdm; pdm = pdm->pdmNext) {
        if (pdm->d3ddm.Width == pd3ddm->Width &&
            pdm->d3ddm.Height == pd3ddm->Height &&
            pdm->d3ddm.Format == pd3ddm->Format &&
            pdm->d3ddm.RefreshRate == pd3ddm->RefreshRate)
        {
            break;
        }
    }

    if (!pdm) {
        return FALSE;
    }

    if (mst != D3DMULTISAMPLE_NONE && mst != pdm->d3dmst) {

        HRESULT hr = m_pDirect3D->CheckDeviceMultiSampleType(m_disdCurrent.padpd->uAdapter, m_disdCurrent.pdevd->d3ddt, bWindowed ? m_disdCurrent.padpd->d3ddmWindowed.Format : pdm->d3ddm.Format, bWindowed, mst);
        if (FAILED(hr)) {
            if (hr != D3DERR_NOTAVAILABLE) {
                ResultFailed(hr, TEXT("IDirect3D8::CheckDeviceMultiSampleTypes"));
            }
            return FALSE;
        }
        else {
            if (bWindowed) {
                m_disdCurrent.pdevd->d3dmstWindowed = mst;
            }
            else {
                pdm->d3dmst = mst;
            }
        }
    }

    return Update(pdm, bWindowed, bDepthBuffer, mst != D3DMULTISAMPLE_NONE);
}
*/

//******************************************************************************
//
// Method:
//
//     EnableConsoleVisibility
//
// Description:
//
//     Enable the overlay of the console in the scene.
//
// Arguments:
//
//     BOOL bEnable             - TRUE to display the console, FALSE to hide it.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CDisplay::EnableConsoleVisibility(BOOL bEnable) {

    m_bShowConsole = bEnable;
}

//******************************************************************************
//
// Method:
//
//     ShowConsole
//
// Description:
//
//     Overlay the console in the scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CDisplay::ShowConsole() {

    if (!m_bCreated) {
        return;
    }

    if (m_bShowConsole) {
        xDisplayConsole();
    }
}

//******************************************************************************
//
// Method:
//
//     InitSetDeviceProc
//
// Description:
//
//     Set the function used to perform all device initialization and object 
//     creation in a scene.  The function will be used in restoring
//     a scene after resetting a lost or changed device.
//
// Arguments:
//
//     SETDEVICEPROC pfnSetDevice       - Pointer to device initialization
//                                        function in the scene
//
//     LPVOID pvParam                   - Application data to supply as an
//                                        argument to the procedure callback
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CDisplay::InitSetDeviceProc(SETDEVICEPROC pfnSetDevice, LPVOID pvParam) {

    m_pfnSetDevice = pfnSetDevice;
    m_pvSetDeviceParam = pvParam;
}

//******************************************************************************
//
// Method:
//
//     InitClearDeviceProc
//
// Description:
//
//     Set the function used to perform all device object clean up in a scene.
//     The function will be used in releasing all device objects in a scene
//     in preparation for resetting a lost or changed device.
//
// Arguments:
//
//     CLEARDEVICEPROC pfnClearDevice   - Pointer to device clean up function
//                                        in the scene
//
//     LPVOID pvParam                   - Application data to supply as an
//                                        argument to the procedure callback
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
void CDisplay::InitClearDeviceProc(CLEARDEVICEPROC pfnClearDevice, LPVOID pvParam) {

    m_pfnClearDevice = pfnClearDevice;
    m_pvClearDeviceParam = pvParam;
}

//******************************************************************************
//
// Method:
//
//     InitSubWindowProc
//
// Description:
//
//     Set the function a scene will use to process window messages.  The
//     function will be called by the main window procedure, giving the
//     scene the first crack at handling messages.
//
// Arguments:
//
//     SUBWNDPROC pfnSubWndProc         - Pointer to the scene window procedure
//
//     LPVOID pvParam                   - Application data to supply as an
//                                        argument to the procedure callback
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CDisplay::InitSubWindowProc(SUBWNDPROC pfnSubWndProc, LPVOID pvParam) {

    m_pfnSubWndProc = pfnSubWndProc;
    m_pvSubWndProcParam = pvParam;
}

//******************************************************************************
//
// Method:
//
//     MoveWindowTarget
//
// Description:
//
//     Update the stored window position so the window may be correctly 
//     repositioned after a switch to full screen mode and back.
//
// Arguments:
//
//     int x                            - x coordinate of the upper left corner
//                                        of the window
//
//     int y                            - y coordinate of the upper left corner
//                                        of the window
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CDisplay::MoveWindowTarget(int x, int y) {

#ifndef UNDER_XBOX
    if (m_disdCurrent.bWindowed && m_bCreated && m_pDevice) {
        SetRect(&m_rectWnd, x, y, x + m_d3dsdBack.Width, y + m_d3dsdBack.Height);
    }

    return TRUE;
#else
    return FALSE;
#endif // UNDER_XBOX
}

//******************************************************************************
//
// Method:
//
//     SizeWindowTarget
//
// Description:
//
//     Update the display dimensions corresponding to a change in window size.
//
// Arguments:
//
//     int width                        - Width of the window
//
//     int height                       - Height of the window
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CDisplay::SizeWindowTarget(int width, int height) {

    if (m_disdCurrent.bWindowed && m_bCreated && m_pDevice) {
        m_rectWnd.right = m_rectWnd.left + width;
        m_rectWnd.bottom = m_rectWnd.top + height;
        return Update(m_disdCurrent.pdm, TRUE, m_disdCurrent.bDepthBuffer, 
                             m_disdCurrent.bAntialias);
    }

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     EnableInput
//
// Description:
//
//     Enable or disable the use of joystick input.
//
// Arguments:
//
//     BOOL bEnable            - TRUE to enable input, FALSE to disable it
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CDisplay::EnableInput(BOOL bEnable) {

    m_bUseInput = bEnable;
    if (!bEnable) {
        memset(&m_jsJoys, 0, sizeof(JOYSTATE));
    }
}

//******************************************************************************
//
// Method:
//
//     ProcessInput
//
// Description:
//
//     Process user input from the keyboard or joystick.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CDisplay::ProcessInput() {

    if (!m_bCreated) {
        return;
    }

    memcpy(&m_jsLast, &m_jsJoys, sizeof(JOYSTATE));

    // Poll the joystick
    if (m_bUseInput) {
        GetJoystickState(&m_jsJoys);
    }

    if (BUTTON_CHANGED(m_jsJoys, m_jsLast, JOYBUTTON_BLACK)) {
        if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_BLACK) && !BUTTON_PRESSED(m_jsJoys, JOYBUTTON_START)) {
            m_bShowConsole = !m_bShowConsole;
        }
    }

    if (BUTTON_CHANGED(m_jsJoys, m_jsLast, JOYBUTTON_WHITE)) {
        if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_WHITE) && BUTTON_PRESSED(m_jsJoys, JOYBUTTON_START)) {
            m_bSwapSticks = !m_bSwapSticks;
        }
    }

#ifndef UNDER_XBOX
    if (BUTTON_CHANGED(m_jsJoys, m_jsLast, JOYBUTTON_BACK)) {
        if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_BACK)) {
            SendMessage(m_hWnd, WM_CLOSE, 0, 0);
        }
    }
#endif // !UNDER_XBOX

    if (!m_bShowConsole) {
        // Update the default camera
        UpdateCamera(&m_cam);
    }

    else {

        DWORD dwScroll = 0;
        float fHorz, fVert;

        // Update the console
        if (m_kdKeys & KEY_LEFT) {
            dwScroll |= XSCROLL_LINELEFT;
        }
        if (m_kdKeys & KEY_RIGHT) {
            dwScroll |= XSCROLL_LINERIGHT;
        }
        if (m_kdKeys & KEY_UP) {
            dwScroll |= XSCROLL_LINEUP;
        }
        if (m_kdKeys & KEY_DOWN) {
            dwScroll |= XSCROLL_LINEDOWN;
        }
        if (m_kdKeys & KEY_PAGEDOWN || BUTTON_PRESSED(m_jsJoys, JOYBUTTON_DOWN)) {
            dwScroll |= XSCROLL_PAGEDOWN;
        }
        if (m_kdKeys & KEY_PAGEUP || BUTTON_PRESSED(m_jsJoys, JOYBUTTON_UP)) {
            dwScroll |= XSCROLL_PAGEUP;
        }
        if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_LEFT)) {
            dwScroll |= XSCROLL_PAGELEFT;
        }
        if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_RIGHT)) {
            dwScroll |= XSCROLL_PAGERIGHT;
        }
        if (m_kdKeys & KEY_HOME) {
            dwScroll |= XSCROLL_LEFT;
        }
        if (m_kdKeys & KEY_END) {
            dwScroll |= XSCROLL_RIGHT;
        }
        if (m_kdKeys & KEY_INSERT || BUTTON_PRESSED(m_jsJoys, JOYBUTTON_Y)) {
            dwScroll |= XSCROLL_TOP;
        }
        if (m_kdKeys & KEY_DELETE || BUTTON_PRESSED(m_jsJoys, JOYBUTTON_X)) {
            dwScroll |= XSCROLL_BOTTOM;
        }
        fHorz = m_jsJoys.f1X;
        fVert = m_jsJoys.f1Y;
        if (fHorz != 0.0f) {
            dwScroll |= XSCROLL_HORZ;
        }
        if (fVert != 0.0f) {
            dwScroll |= XSCROLL_VERT;
        }
        if (dwScroll) {
            xScrollConsole(dwScroll, &fHorz, &fVert);
        }
    }
}

//******************************************************************************
//
// Method:
//
//     SetView
//
// Description:
//
//     Update the view and projection matrices based on the given camera data.
//
// Arguments:
//
//     PCAMERA pcam                 - Pointer to the camera information
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CDisplay::SetView(PCAMERA pcam) {

    D3DXMATRIX      mTransform;
    HRESULT         hr;

    if (!m_bCreated) {
        return FALSE;
    }

    if (!pcam) {
        pcam = &m_cam;
    }

    // Initialize the view matrix
    ::SetView(&mTransform, &pcam->vPosition, &pcam->vInterest, 
            &D3DXVECTOR3((float)sin(pcam->fRoll), (float)cos(pcam->fRoll), 
            0.0f));

    hr = m_pDevice->SetTransform(D3DTS_VIEW, &mTransform);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetTransform"))) {
        return FALSE;
    }

    // Initialize the projection matrix
    SetPerspectiveProjection(&mTransform, pcam->fNearPlane, pcam->fFarPlane, 
            pcam->fFieldOfView, (float)m_d3dsdBack.Height / (float)m_d3dsdBack.Width);

    hr = m_pDevice->SetTransform(D3DTS_PROJECTION, &mTransform);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetTransform"))) {
        return FALSE;
    }

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     UpdateCamera
//
// Description:
//
//     Update the camera state by polling user input from the keyboard and 
//     and joystick.
//
// Arguments:
//
//     PCAMERA pcam                 - Pointer to the camera information
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
void CDisplay::UpdateCamera(PCAMERA pcam) {

    static KEYSDOWN     kdLastKeys = 0;
    static D3DXVECTOR3  vViewTranslation = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
    static D3DXVECTOR3  vViewRotation = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
    static D3DXMATRIX   mViewRotationX = D3DXMATRIX(
                            1.0f, 0.0f, 0.0f, 0.0f,
                            0.0f, 1.0f, 0.0f, 0.0f,
                            0.0f, 0.0f, 1.0f, 0.0f,
                            0.0f, 0.0f, 0.0f, 1.0f
                        );
    static D3DXMATRIX   mViewRotationY = mViewRotationX;
    static BOOL         bOrbitStick = FALSE;

    if (!m_bCreated) {
        return;
    }

    // Poll the keyboard
    if (m_kdKeys != kdLastKeys) {

        if (m_kdKeys & KEY_PAGEDOWN) {
            vViewTranslation.x = -m_fCameraTDelta;
        }
        else if (m_kdKeys & KEY_DELETE) {
            vViewTranslation.x = m_fCameraTDelta;
        }
        else {
            vViewTranslation.x = 0.0f;
        }

        if (m_kdKeys & KEY_HOME) {
            vViewTranslation.y = -m_fCameraTDelta;
        }
        else if (m_kdKeys & KEY_END) {
            vViewTranslation.y = m_fCameraTDelta;
        }
        else {
            vViewTranslation.y = 0.0f;
        }

        if (m_kdKeys & KEY_ADD || m_kdKeys & KEY_PAGEUP) {
            vViewTranslation.z = -m_fCameraTDelta;
        }
        else if (m_kdKeys & KEY_SUBTRACT || m_kdKeys & KEY_INSERT) {
            vViewTranslation.z = m_fCameraTDelta;
        }
        else {
            vViewTranslation.z = 0.0f;
        }

        if (m_kdKeys & KEY_LEFT) {
            vViewRotation.y = -m_fCameraRDelta;
        }
        else if (m_kdKeys & KEY_RIGHT) {
            vViewRotation.y = m_fCameraRDelta;
        }
        else {
            vViewRotation.y = 0.0f;
        }

        if (m_kdKeys & KEY_UP) {
            vViewRotation.x = -m_fCameraRDelta;
        }
        else if (m_kdKeys & KEY_DOWN) {
            vViewRotation.x = m_fCameraRDelta;
        }
        else {
            vViewRotation.x = 0.0f;
        }
    }

    kdLastKeys = m_kdKeys;

    // Only update the camera when the start button is not pressed
    if (!BUTTON_PRESSED(m_jsJoys, JOYBUTTON_START)) {

        // Left keypad
        if (BUTTON_CHANGED(m_jsJoys, m_jsLast, JOYBUTTON_LEFT)) {
            if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_LEFT)) {
                vViewTranslation.x = m_fCameraTDelta;
            }
            else {
                vViewTranslation.x = 0.0f;
            }
        }

        // Right keypad
        if (BUTTON_CHANGED(m_jsJoys, m_jsLast, JOYBUTTON_RIGHT)) {
            if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_RIGHT)) {
                vViewTranslation.x = -m_fCameraTDelta;
            }
            else {
                vViewTranslation.x = 0.0f;
            }
        }

        // Up keypad
        if (BUTTON_CHANGED(m_jsJoys, m_jsLast, JOYBUTTON_UP)) {
            if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_UP)) {
                vViewTranslation.y = -m_fCameraTDelta;
            }
            else {
                vViewTranslation.y = 0.0f;
            }
        }

        // Down keypad
        if (BUTTON_CHANGED(m_jsJoys, m_jsLast, JOYBUTTON_DOWN)) {
            if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_DOWN)) {
                vViewTranslation.y = m_fCameraTDelta;
            }
            else {
                vViewTranslation.y = 0.0f;
            }
        }

        // Left trigger
        if (BUTTON_CHANGED(m_jsJoys, m_jsLast, JOYBUTTON_LTRIG)) {
            if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_LTRIG)) {
                vViewTranslation.z = m_fCameraTDelta;
            }
            else {
                vViewTranslation.z = 0.0f;
            }
        }

        // Right trigger
        if (BUTTON_CHANGED(m_jsJoys, m_jsLast, JOYBUTTON_RTRIG)) {
            if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_RTRIG)) {
                vViewTranslation.z = -m_fCameraTDelta;
            }
            else {
                vViewTranslation.z = 0.0f;
            }
        }

        // Joysticks
        if (m_jsJoys.f1X != m_jsLast.f1X ||
            m_jsJoys.f1Y != m_jsLast.f1Y ||
            m_jsJoys.f2X != m_jsLast.f2X ||
            m_jsJoys.f2Y != m_jsLast.f2Y)
        {
            float f1X, f1Y, f2X, f2Y;

            if (m_bSwapSticks) {
                f1X = m_jsJoys.f2X;
                f1Y = m_jsJoys.f2Y;
                f2X = m_jsJoys.f1X;
                f2Y = m_jsJoys.f1Y;
            }
            else {
                f1X = m_jsJoys.f1X;
                f1Y = m_jsJoys.f1Y;
                f2X = m_jsJoys.f2X;
                f2Y = m_jsJoys.f2Y;
            }
            if (f2X == 0.0f && f2Y == 0.0f) {
                vViewRotation.y = f1X * m_fCameraRDelta;
                vViewRotation.x = f1Y * m_fCameraRDelta;
                bOrbitStick = FALSE;
            }
            else {
                vViewRotation.y = f2X * m_fCameraRDelta;
                vViewRotation.x = f2Y * m_fCameraRDelta;
                bOrbitStick = TRUE;
            }
        }
    }

    if (pcam) {

        D3DXMATRIX  mView, mViewTransform;
        D3DXVECTOR3 vTranslation, vDirection, vUp, vProj, vCross;
        D3DXVECTOR3 vViewTrans = vViewTranslation;
        float       fMagnitude, fDot, fScaleX, fScaleY, fTheta;
        BOOL        bOrbit = (BOOL)((m_kdKeys & KEY_SHIFT) || bOrbitStick);

        if (!bOrbit) {
            vDirection = pcam->vInterest - pcam->vPosition;
        }
        else {
            vDirection = pcam->vPosition - pcam->vInterest;
        }
        fMagnitude = D3DXVec3Length(&vDirection);
        D3DXVec3Normalize(&vDirection, &vDirection);
        vUp = D3DXVECTOR3((float)sin(pcam->fRoll), (float)cos(pcam->fRoll), 0.0f);
        // Project the direction vector into a plane orthogonal to the up vector.
        // The resulting vector will originate at the point the projected direction
        // vector intersects with the plane and terminate at the up vector/
        // The DotProduct gives the ratio between the magnitude of the direction
        // vector and the scalar projection of the direction vector onto the up
        // vector.  Multiplying by this scales the direction vector out to the
        // point that it will intersect with the up vector's orthogonal plane
        fDot = D3DXVec3Dot(&vUp, &vDirection);
        D3DXVec3Normalize(&vProj, &(vUp - (vDirection * fDot)));
        D3DXVec3Cross(&vCross, &vProj, &vDirection);

        fScaleY = (fDot < 0.0f) ? -fDot : fDot;
        fTheta = (float)acos(fScaleY);
        fScaleY = fTheta / M_PIDIV2;

        if (bOrbit) {
            fScaleY *= -3.0f;
            fScaleX = 3.0f;
        }
        else {
            fScaleX = 1.0f;
        }

        mViewRotationY._11 = (float)cos(vViewRotation.y * fScaleY);
        mViewRotationY._13 = (float)-sin(vViewRotation.y * fScaleY);
        mViewRotationY._31 = -mViewRotationY._13;
        mViewRotationY._33 = mViewRotationY._11;

        mViewRotationX._22 = (float)cos(vViewRotation.x * fScaleX);
        mViewRotationX._23 = (float)sin(vViewRotation.x * fScaleX);
        mViewRotationX._32 = -mViewRotationX._23;
        mViewRotationX._33 = mViewRotationX._22;

        InitMatrix(&mViewTransform,
            vCross.x,       vCross.y,       vCross.z,       0.0f,
            vProj.x,        vProj.y,        vProj.z,        0.0f,
            vDirection.x,   vDirection.y,   vDirection.z,   0.0f,
            0.0f,           0.0f,           0.0f,           1.0f
        );

        D3DXMatrixMultiply(&mView, &mViewRotationX, &mViewTransform);
        D3DXMatrixMultiply(&mViewTransform, &mViewRotationY, &mView);

        if (!bOrbit) {
            D3DXVec3TransformCoord(&pcam->vInterest, 
                                &D3DXVECTOR3(0.0f, 0.0f, fMagnitude), &mViewTransform);
            pcam->vInterest += pcam->vPosition;
        }
        else {
            D3DXVec3TransformCoord(&pcam->vPosition, 
                                &D3DXVECTOR3(0.0f, 0.0f, fMagnitude), &mViewTransform);
            pcam->vPosition += pcam->vInterest;
            vViewTrans.x = -vViewTrans.x;
            vViewTrans.z = -vViewTrans.z;
        }
        D3DXVec3TransformCoord(&vTranslation, &vViewTrans, &mViewTransform);
        pcam->vPosition -= vTranslation;
        pcam->vInterest -= vTranslation;

        if (fDot != 0.0f) {
            float fPol = (fDot < 0.0f) ? 1.0f : -1.0f;
            if ((fPol * vViewRotation.x * fScaleX) > fTheta) {
                pcam->fRoll += M_PI;
                if (pcam->fRoll > M_PI) {
                    pcam->fRoll -= M_2PI;
                }
            }
        }
    }
}

//******************************************************************************
// Menu functions
//******************************************************************************

#ifndef UNDER_XBOX

//******************************************************************************
//
// Method:
//
//     CreateMainMenu
//
// Description:
//
//     Create the main menu for the application window
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     Handle to the created menu.
//
//******************************************************************************
HMENU CDisplay::CreateMainMenu() {

    HMENU hMenu, hMenuFile;

    // If the application has supplied a menu, load and return it
    hMenu = LoadMenu(GetInstance(), TEXT("IDR_MENU"));
    if (hMenu) {
        return hMenu;
    }

    // Otherwise create a default menu
    hMenu = CreateMenu();

    hMenuFile = CreateMenu();

    AppendMenu(hMenuFile, MF_STRING, IDM_DEFAULT_FILE_DISPLAY, TEXT("&Display...\tF2"));
    AppendMenu(hMenuFile, MF_SEPARATOR, 0, NULL);
    AppendMenu(hMenuFile, MF_STRING, IDM_DEFAULT_FILE_EXIT, TEXT("E&xit\tEsc"));

    AppendMenu(hMenu, MF_POPUP, (UINT)hMenuFile, TEXT("&File"));

    return hMenu;
}

//******************************************************************************
//
// Method:
//
//     DisplayDlgProc
//
// Description:
//
//     Window procedure to process messages for the display dialog.
//
// Arguments:
//
//     HWND hDlg                - Dialog window
//
//     UINT uMsg                - Message to process
//
//     WPARAM wParam            - First message parameter
//
//     LPARAM lParam            - Second message parameter
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CDisplay::DisplayDlgProc(HWND hDlg, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    PADAPTERDESC        padpd;
    PDEVICEDESC         pdevd;
    PDISPLAYMODE        pdm;
    TCHAR               szMode[512];
    int                 sel;
#ifdef UNICODE
    WCHAR               wszBuffer[512];
#endif // UNICODE
    TCHAR*              pszDevice[] = {
                            TEXT(""),
                            TEXT("NULL"),
                            TEXT("Abstraction (HAL)"),
                            TEXT("Reference (REF)"),
                            TEXT("Emulation (SW)"),
                        };

    switch (uMsg) {

        case WM_INITDIALOG:

            // Fill the adapter list
            for (padpd = m_padpdList; padpd; padpd = padpd->padpdNext) {
#ifndef UNICODE
                sel = SendDlgItemMessage(hDlg, IDC_DISPLAY_ADAPTER, CB_ADDSTRING, 0, (LPARAM)padpd->d3dai.Description);
#else
                mbstowcs(wszBuffer, padpd->d3dai.Description, 512);
                sel = SendDlgItemMessage(hDlg, IDC_DISPLAY_ADAPTER, CB_ADDSTRING, 0, (LPARAM)wszBuffer);
#endif // !UNICODE
                SendDlgItemMessage(hDlg, IDC_DISPLAY_ADAPTER, CB_SETITEMDATA, (WPARAM)sel, (LPARAM)padpd);
                if (m_disdSelect.padpd == padpd) {
                    SendDlgItemMessage(hDlg, IDC_DISPLAY_ADAPTER, CB_SETCURSEL, (WPARAM)sel, 0);
                }
            }

            // Fill the device list
            for (pdevd = m_disdSelect.padpd->pdevdList; pdevd; pdevd = pdevd->pdevdNext) {
                sel = SendDlgItemMessage(hDlg, IDC_DISPLAY_DEVICE, CB_ADDSTRING, 0, (LPARAM)pszDevice[pdevd->d3ddt]);
                SendDlgItemMessage(hDlg, IDC_DISPLAY_DEVICE, CB_SETITEMDATA, (WPARAM)sel, (LPARAM)pdevd);
                if (m_disdSelect.pdevd == pdevd) {
                    SendDlgItemMessage(hDlg, IDC_DISPLAY_DEVICE, CB_SETCURSEL, (WPARAM)sel, 0);
                }
            }

            // Fill the display mode
            for (pdm = m_disdSelect.pdevd->pdmList; pdm; pdm = pdm->pdmNext) {
                if (pdm->d3ddm.RefreshRate) {
                    wsprintf(szMode, TEXT("%d x %d x %d  %d Hz"), pdm->d3ddm.Width, pdm->d3ddm.Height, FormatToBitDepth(pdm->d3ddm.Format), pdm->d3ddm.RefreshRate);
                }
                else {
                    wsprintf(szMode, TEXT("%d x %d x %d"), pdm->d3ddm.Width, pdm->d3ddm.Height, FormatToBitDepth(pdm->d3ddm.Format));
                }
                sel = SendDlgItemMessage(hDlg, IDC_DISPLAY_MODE, CB_ADDSTRING, 0, (LPARAM)szMode);
                SendDlgItemMessage(hDlg, IDC_DISPLAY_MODE, CB_SETITEMDATA, (WPARAM)sel, (LPARAM)pdm);
                if (pdm == m_disdSelect.pdm) {
                    SendDlgItemMessage(hDlg, IDC_DISPLAY_MODE, CB_SETCURSEL, (WPARAM)sel, 0);
                }
            }

            SendDlgItemMessage(hDlg, IDC_DISPLAY_FULLSCREEN, BM_SETCHECK, (BOOL)!m_disdSelect.bWindowed, 0);
            EnableWindow(GetDlgItem(hDlg, IDC_DISPLAY_FULLSCREEN), m_disdSelect.pdevd->bCanRenderWindowed);
            EnableWindow(GetDlgItem(hDlg, IDC_DISPLAY_MODE), !m_disdSelect.bWindowed);

            SendDlgItemMessage(hDlg, IDC_DISPLAY_DEPTHBUFFER, BM_SETCHECK, m_disdSelect.bDepthBuffer, 0);
            if (ANTIALIAS_SUPPORTED(m_disdSelect.pdevd, m_disdSelect.pdm, m_disdSelect.bWindowed)) {
                SendDlgItemMessage(hDlg, IDC_DISPLAY_ANTIALIAS, BM_SETCHECK, m_disdSelect.bAntialias, 0);
            }
            else {
                SendDlgItemMessage(hDlg, IDC_DISPLAY_ANTIALIAS, BM_SETCHECK, FALSE, 0);
                EnableWindow(GetDlgItem(hDlg, IDC_DISPLAY_ANTIALIAS), FALSE);
            }

            return TRUE;

        case WM_COMMAND:

            switch (LOWORD(wParam)) {

                case IDC_DISPLAY_FULLSCREEN:
                    if (HIWORD(wParam) == BN_CLICKED) {
                        PDEVICEDESC pdevd;
                        PDISPLAYMODE pdm;
                        BOOL bAntialias;
                        BOOL bFullscreen = SendDlgItemMessage(hDlg, IDC_DISPLAY_FULLSCREEN, BM_GETCHECK, 0, 0);
                        EnableWindow(GetDlgItem(hDlg, IDC_DISPLAY_MODE), bFullscreen);

                        sel = SendDlgItemMessage(hDlg, IDC_DISPLAY_DEVICE, CB_GETCURSEL, 0, 0);
                        pdevd = (PDEVICEDESC)SendDlgItemMessage(hDlg, IDC_DISPLAY_DEVICE, CB_GETITEMDATA, (WPARAM)sel, 0);
                        sel = SendDlgItemMessage(hDlg, IDC_DISPLAY_MODE, CB_GETCURSEL, 0, 0);
                        pdm = (PDISPLAYMODE)SendDlgItemMessage(hDlg, IDC_DISPLAY_MODE, CB_GETITEMDATA, (WPARAM)sel, 0);
                        bAntialias = ANTIALIAS_SUPPORTED(pdevd, pdm, !bFullscreen);
                        if (!bAntialias) {
                            SendDlgItemMessage(hDlg, IDC_DISPLAY_ANTIALIAS, BM_SETCHECK, FALSE, 0);
                        }
                        EnableWindow(GetDlgItem(hDlg, IDC_DISPLAY_ANTIALIAS), bAntialias);
                        return TRUE;
                    }
                    break;

                case IDC_DISPLAY_ADAPTER:

                    if (HIWORD(wParam) == CBN_SELCHANGE) {

                        PADAPTERDESC padpdCurrent;
                        PDEVICEDESC  pdevdDefault, pdevdLast;
                        int          def;

                        // Get the current device selection
                        sel = SendDlgItemMessage(hDlg, IDC_DISPLAY_DEVICE, CB_GETCURSEL, 0, 0);
                        pdevdLast = (PDEVICEDESC)SendDlgItemMessage(hDlg, IDC_DISPLAY_DEVICE, CB_GETITEMDATA, (WPARAM)sel, 0);

                        // Clear the device list
                        SendDlgItemMessage(hDlg, IDC_DISPLAY_DEVICE, CB_RESETCONTENT, 0, 0);

                        // Get the new adapter
                        sel = SendDlgItemMessage(hDlg, IDC_DISPLAY_ADAPTER, CB_GETCURSEL, 0, 0);
                        padpdCurrent = (PADAPTERDESC)SendDlgItemMessage(hDlg, IDC_DISPLAY_ADAPTER, CB_GETITEMDATA, (WPARAM)sel, 0);

                        // Select a default device for the adapter
                        pdevdDefault = SelectDevice(padpdCurrent);

                        // Add the devices for the new adapter
                        for (pdevd = padpdCurrent->pdevdList; pdevd; pdevd = pdevd->pdevdNext) {

                            sel = SendDlgItemMessage(hDlg, IDC_DISPLAY_DEVICE, CB_ADDSTRING, 0, (LPARAM)pszDevice[pdevd->d3ddt]);
                            SendDlgItemMessage(hDlg, IDC_DISPLAY_DEVICE, CB_SETITEMDATA, (WPARAM)sel, (LPARAM)pdevd);

                            // If the new adapter supports the same device that was selected for the old
                            // adapter, select the device again
                            if (pdevd->d3ddt == pdevdLast->d3ddt) {
                                SendDlgItemMessage(hDlg, IDC_DISPLAY_DEVICE, CB_SETCURSEL, (WPARAM)sel, 0);
                            }

                            // If the device matches the default device, save the index
                            if (pdevd == pdevdDefault) {
                                def = sel;
                            }
                        }

                        // If no device has been selected (the new adapter does not support the old selected device)
                        // select the default as current
                        sel = SendDlgItemMessage(hDlg, IDC_DISPLAY_DEVICE, CB_GETCURSEL, 0, 0);
                        if (sel == CB_ERR) {
                            SendDlgItemMessage(hDlg, IDC_DISPLAY_DEVICE, CB_SETCURSEL, (WPARAM)def, 0);
                        }

                        // Update the display mode list for the new device
                        SendMessage(hDlg, WM_COMMAND, MAKELPARAM(IDC_DISPLAY_DEVICE, CBN_SELCHANGE), (LPARAM)GetDlgItem(hDlg, IDC_DISPLAY_DEVICE));

                        return TRUE;
                    }
                    break;

                case IDC_DISPLAY_DEVICE:

                    if (HIWORD(wParam) == CBN_SELCHANGE) {

                        PDEVICEDESC  pdevdCurrent;
                        PDISPLAYMODE pdmDefault, pdmLast;
                        int          def;
                        BOOL         bEnable;

                        // Get the current display mode selection
                        sel = SendDlgItemMessage(hDlg, IDC_DISPLAY_MODE, CB_GETCURSEL, 0, 0);
                        pdmLast = (PDISPLAYMODE)SendDlgItemMessage(hDlg, IDC_DISPLAY_MODE, CB_GETITEMDATA, (WPARAM)sel, 0);

                        // Clear the display mode list
                        SendDlgItemMessage(hDlg, IDC_DISPLAY_MODE, CB_RESETCONTENT, 0, 0);

                        // Get the new device
                        sel = SendDlgItemMessage(hDlg, IDC_DISPLAY_DEVICE, CB_GETCURSEL, 0, 0);
                        pdevdCurrent = (PDEVICEDESC)SendDlgItemMessage(hDlg, IDC_DISPLAY_DEVICE, CB_GETITEMDATA, (WPARAM)sel, 0);

                        // Select a default display mode for the device
                        pdmDefault = SelectDisplayMode(pdevdCurrent);

                        // Add the display modes for the new device
                        for (pdm = pdevdCurrent->pdmList; pdm; pdm = pdm->pdmNext) {

                            if (pdm->d3ddm.RefreshRate) {
                                wsprintf(szMode, TEXT("%d x %d x %d  %d Hz"), pdm->d3ddm.Width, pdm->d3ddm.Height, FormatToBitDepth(pdm->d3ddm.Format), pdm->d3ddm.RefreshRate);
                            }
                            else {
                                wsprintf(szMode, TEXT("%d x %d x %d"), pdm->d3ddm.Width, pdm->d3ddm.Height, FormatToBitDepth(pdm->d3ddm.Format));
                            }
                            sel = SendDlgItemMessage(hDlg, IDC_DISPLAY_MODE, CB_ADDSTRING, 0, (LPARAM)szMode);
                            SendDlgItemMessage(hDlg, IDC_DISPLAY_MODE, CB_SETITEMDATA, (WPARAM)sel, (LPARAM)pdm);

                            // If the new device supports the same display mode that was selected for the old
                            // device, select the mode again
                            if (pdm->d3ddm.Width == pdmLast->d3ddm.Width &&
                                pdm->d3ddm.Height == pdmLast->d3ddm.Height &&
                                pdm->d3ddm.Format == pdmLast->d3ddm.Format &&
                                pdm->d3ddm.RefreshRate == pdmLast->d3ddm.RefreshRate) 
                            {
                                SendDlgItemMessage(hDlg, IDC_DISPLAY_MODE, CB_SETCURSEL, (WPARAM)sel, 0);
                            }

                            // If the display mode matches the default, save the index
                            if (pdm == pdmDefault) {
                                def = sel;
                            }
                        }

                        // If no mode has been selected (the new device does not support the old selected mode)
                        // select the default as current
                        sel = SendDlgItemMessage(hDlg, IDC_DISPLAY_MODE, CB_GETCURSEL, 0, 0);
                        if (sel == CB_ERR) {
                            SendDlgItemMessage(hDlg, IDC_DISPLAY_MODE, CB_SETCURSEL, (WPARAM)def, 0);
                        }

                        // If the device does not supported rendering in a windowed state, select and
                        // disable the full screen check box
                        if (!pdevdCurrent->bCanRenderWindowed) {
                            SendDlgItemMessage(hDlg, IDC_DISPLAY_FULLSCREEN, BM_SETCHECK, (WPARAM)TRUE, 0);
                        }
                        EnableWindow(GetDlgItem(hDlg, IDC_DISPLAY_FULLSCREEN), pdevdCurrent->bCanRenderWindowed);
                        bEnable = SendDlgItemMessage(hDlg, IDC_DISPLAY_FULLSCREEN, BM_GETCHECK, 0, 0);
                        EnableWindow(GetDlgItem(hDlg, IDC_DISPLAY_MODE), bEnable);

                        // Update the antialias check box
                        SendMessage(hDlg, WM_COMMAND, MAKELPARAM(IDC_DISPLAY_MODE, CBN_SELCHANGE), (LPARAM)GetDlgItem(hDlg, IDC_DISPLAY_MODE));

                        return TRUE;
                    }
                    break;

                case IDC_DISPLAY_MODE:

                    if (HIWORD(wParam) == CBN_SELCHANGE) {
                        PDEVICEDESC pdevd;
                        PDISPLAYMODE pdm;
                        BOOL bAntialias;
                        BOOL bFullscreen = SendDlgItemMessage(hDlg, IDC_DISPLAY_FULLSCREEN, BM_GETCHECK, 0, 0);
                        sel = SendDlgItemMessage(hDlg, IDC_DISPLAY_DEVICE, CB_GETCURSEL, 0, 0);
                        pdevd = (PDEVICEDESC)SendDlgItemMessage(hDlg, IDC_DISPLAY_DEVICE, CB_GETITEMDATA, (WPARAM)sel, 0);
                        sel = SendDlgItemMessage(hDlg, IDC_DISPLAY_MODE, CB_GETCURSEL, 0, 0);
                        pdm = (PDISPLAYMODE)SendDlgItemMessage(hDlg, IDC_DISPLAY_MODE, CB_GETITEMDATA, (WPARAM)sel, 0);
                        bAntialias = ANTIALIAS_SUPPORTED(pdevd, pdm, !bFullscreen);
                        if (!bAntialias) {
                            SendDlgItemMessage(hDlg, IDC_DISPLAY_ANTIALIAS, BM_SETCHECK, FALSE, 0);
                        }
                        EnableWindow(GetDlgItem(hDlg, IDC_DISPLAY_ANTIALIAS), bAntialias);
                        return TRUE;
                    }
                    break;

                case IDOK:
                    // Update the current driver, device, window state, and display mode
                    sel = SendDlgItemMessage(hDlg, IDC_DISPLAY_ADAPTER, CB_GETCURSEL, 0, 0);
                    m_disdSelect.padpd = (PADAPTERDESC)SendDlgItemMessage(hDlg, IDC_DISPLAY_ADAPTER, CB_GETITEMDATA, (WPARAM)sel, 0);
                    sel = SendDlgItemMessage(hDlg, IDC_DISPLAY_DEVICE, CB_GETCURSEL, 0, 0);
                    m_disdSelect.pdevd = (PDEVICEDESC)SendDlgItemMessage(hDlg, IDC_DISPLAY_DEVICE, CB_GETITEMDATA, (WPARAM)sel, 0);
                    sel = SendDlgItemMessage(hDlg, IDC_DISPLAY_MODE, CB_GETCURSEL, 0, 0);
                    m_disdSelect.pdm = (PDISPLAYMODE)SendDlgItemMessage(hDlg, IDC_DISPLAY_MODE, CB_GETITEMDATA, (WPARAM)sel, 0);
                    m_disdSelect.bWindowed = !((BOOL)SendDlgItemMessage(hDlg, IDC_DISPLAY_FULLSCREEN, BM_GETCHECK, 0, 0));
                    m_disdSelect.bDepthBuffer = (BOOL)SendDlgItemMessage(hDlg, IDC_DISPLAY_DEPTHBUFFER, BM_GETCHECK, 0, 0);
                    m_disdSelect.bAntialias = (BOOL)SendDlgItemMessage(hDlg, IDC_DISPLAY_ANTIALIAS, BM_GETCHECK, 0, 0);

                case IDCANCEL:
                    EndDialog(hDlg, wParam);
                    return TRUE;
            }

            break;
    }

    return FALSE;
}

//******************************************************************************
//
// Method:
//
//     AddDlgItemTemplate
//
// Description:
//
//     Reset the device with the given display mode, windowed mode, auto
//     depth/stencil buffer, and multi-sample swap chain.
//
// Arguments:
//
//     LPWORD* ppw                      - Pointer to an item in the dialog
//                                        template
//
//     WORD wClass                      - Class ordinal
//
//     LPWSTR wszText                   - Text of the dialog item
//
//     WORD wID                         - Dialog item identifier
//
//     short x                          - x coordinate of the dialog item
//
//     short y                          - y coordinate of the dialog item
//
//     short cx                         - Width of the dialog item
//
//     short cy                         - Height of the dialog item
//
//     DWORD dwStyle                    - Style of the dialog item
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CDisplay::AddDlgItemTemplate(LPWORD* ppw, WORD wClass, LPWSTR wszText, 
            WORD wId, short x, short y, short cx, short cy, DWORD dwStyle) 
{
    LPDLGITEMTEMPLATE pdit;
    LPWSTR            wsz;
    LPWORD            pw = *ppw;

    pdit = (LPDLGITEMTEMPLATE)((((DWORD)pw) + 3) & ~3);    // Align the data
    pdit->style           = WS_VISIBLE | WS_CHILD | dwStyle;
    pdit->dwExtendedStyle = 0;
    pdit->x               = x;
    pdit->y               = y;
    pdit->cx              = cx;
    pdit->cy              = cy;
    pdit->id              = wId;

    pw = (LPWORD)(pdit+1);
    *pw++ = 0xFFFF;                         // System class
    *pw++ = wClass;                         // Class ordinal
    wsz = (LPWSTR)pw;
    wcscpy(wsz, wszText);                   // Item text
    pw = (LPWORD)(wsz + wcslen(wsz) + 1);
    *pw++ = 0;                              // No creation data
    *ppw = pw;
}

#endif // !UNDER_XBOX

//******************************************************************************
//
// Method:
//
//     Select
//
// Description:
//
//     Build and create a display dialog to allow a selection of adapter, 
//     device, display mode, windowed mode, auto depth buffer, and multi-sample
//     type.  Reset or recreate the device based on the display configuration
//     selected.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CDisplay::Select() {

#ifdef UNDER_XBOX
    return;
#else

    LPDLGTEMPLATE     pTemplate;
    LPWORD            pw;
    LPWSTR            wsz;
    int               ret;

    if (!m_bCreated) {
        return;
    }

    // Save the current display state
    memcpy(&m_disdSelect, &m_disdCurrent, sizeof(DISPLAYDESC));

    pTemplate = (LPDLGTEMPLATE)MemAlloc(sizeof(DLGTEMPLATE) + 3 * sizeof(WORD) + 
                                        512 * sizeof(WCHAR) + 
                                        11 * (sizeof(DLGITEMTEMPLATE) +
                                        (5 * sizeof(WORD) + 256 * sizeof(WCHAR))));
    if (!pTemplate) {
        return;
    }

    // Initialize the dialog template
    pTemplate->style = WS_POPUP | WS_CAPTION | WS_SYSMENU | DS_MODALFRAME | DS_CENTER | DS_SETFONT;
    pTemplate->cdit  = 11;
    pTemplate->x     = 0;
    pTemplate->y     = 0;
    pTemplate->cx    = 149;
    pTemplate->cy    = 138;
    pTemplate->dwExtendedStyle = 0;

    pw = (LPWORD)(pTemplate+1);
    *pw++ = 0;                                  // No menu
    *pw++ = 0;                                  // Default dialog class
    
    // Specify the caption for the dialog
    wsz = (LPWSTR)pw;
    wcscpy(wsz, L"Display");                    // Caption
    pw = (LPWORD)(wsz + wcslen(wsz) + 1);
    *pw++ = 8;                                  // 8 point font
    wsz = (LPWSTR)pw;
    wcscpy(wsz, L"MS Sans Serif");              // MS Sans Serif typeface
    pw = (LPWORD)(wsz + wcslen(wsz) + 1);

    // Specify the controls of the dialog
    AddDlgItemTemplate(&pw, 0x0085, L"", IDC_DISPLAY_ADAPTER, 13, 16, 123, 50, CBS_DROPDOWNLIST | CBS_SORT | WS_VSCROLL | WS_TABSTOP);
    AddDlgItemTemplate(&pw, 0x0080, L"Adapter", IDC_STATIC, 7, 7, 135, 27, WS_GROUP | BS_GROUPBOX);
    AddDlgItemTemplate(&pw, 0x0085, L"", IDC_DISPLAY_DEVICE, 13, 48, 123, 50, CBS_DROPDOWNLIST | CBS_SORT | WS_VSCROLL | WS_TABSTOP);
    AddDlgItemTemplate(&pw, 0x0080, L"Device", IDC_STATIC, 7, 38, 135, 27, WS_GROUP | BS_GROUPBOX);
    AddDlgItemTemplate(&pw, 0x0080, L"", IDC_STATIC, 7, 70, 135, 27, WS_GROUP | BS_GROUPBOX);
    AddDlgItemTemplate(&pw, 0x0080, L"F&ull screen", IDC_DISPLAY_FULLSCREEN, 13, 68, 50, 10, BS_AUTOCHECKBOX | WS_TABSTOP);
    AddDlgItemTemplate(&pw, 0x0085, L"", IDC_DISPLAY_MODE, 13, 79, 123, 100, CBS_DROPDOWNLIST | WS_VSCROLL | WS_TABSTOP);
    AddDlgItemTemplate(&pw, 0x0080, L"&Depth Buffer", IDC_DISPLAY_DEPTHBUFFER, 13, 102, 56, 10, BS_AUTOCHECKBOX | WS_TABSTOP);
    AddDlgItemTemplate(&pw, 0x0080, L"&Antialias", IDC_DISPLAY_ANTIALIAS, 83, 102, 42, 10, BS_AUTOCHECKBOX | WS_TABSTOP);
    AddDlgItemTemplate(&pw, 0x0080, L"OK", IDOK, 38, 117, 50, 14, BS_DEFPUSHBUTTON | WS_TABSTOP);
    AddDlgItemTemplate(&pw, 0x0080, L"Cancel", IDCANCEL, 92, 117, 50, 14, WS_TABSTOP);

    // Display the dialog in a full screen state
    if (m_pDevice && !m_disdCurrent.bWindowed) {
//        m_pDevice->FlipToGDISurface();
        DrawMenuBar(m_hWnd);
        RedrawWindow(m_hWnd, NULL, NULL, RDW_FRAME);
    }

    // Create the display dialog
    ret = DialogBoxIndirectParam(GetInstance(), pTemplate, m_hWnd, ::DisplayDlgProc, (LPARAM)this);

    MemFree(pTemplate);

    // Do not include the amount of time the dialog was open in game time calculations
    m_bTimeSync = TRUE;

    if (ret != IDOK) {
        return;
    }

    // If the display driver or device has been changed, recreate everything
    if (m_disdCurrent.padpd != m_disdSelect.padpd || m_disdCurrent.pdevd != m_disdSelect.pdevd) {
        if (m_pfnClearDevice) {
            m_pfnClearDevice(m_pvClearDeviceParam);
        }
        xReleaseConsole();
        m_pDevice->Release();
        m_pDevice = NULL;
        if (!CreateDevice(m_disdSelect.padpd, m_disdSelect.pdevd, m_disdSelect.pdm, m_disdCurrent.uNumBackBuffers, m_disdSelect.bWindowed, m_disdSelect.bDepthBuffer, m_disdSelect.bAntialias) ||
            !xCreateConsole(m_pDevice) ||
            (m_pfnSetDevice && !m_pfnSetDevice(m_pvSetDeviceParam))) 
        {
            DestroyWindow(m_hWnd);
        }
    }

    // If the state of the display has changed, update the display
    else if (m_disdCurrent.pdm != m_disdSelect.pdm ||
             m_disdCurrent.bWindowed != m_disdSelect.bWindowed ||
             m_disdCurrent.bDepthBuffer != m_disdSelect.bDepthBuffer ||
             m_disdCurrent.bAntialias != m_disdSelect.bAntialias) 
    {
        Update(m_disdSelect.pdm, m_disdSelect.bWindowed, m_disdSelect.bDepthBuffer, m_disdSelect.bAntialias);
    }

#endif // !UNDER_XBOX
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dbase\dtypes.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    dtypes.h

Author:

    Matt Bronder

Description:

    Various type definitions.

*******************************************************************************/

#ifndef __DTYPES_H__
#define __DTYPES_H__

//******************************************************************************
// Preprocessor definitions
//******************************************************************************

#define FVF_VERTEX              (D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_TEX1)
#define FVF_BVERTEX             (D3DFVF_XYZ | D3DFVF_TEX3)
#define FVF_BVERTEX2            (D3DFVF_XYZ | D3DFVF_TEX2)
#define FVF_NVERTEX             (D3DFVF_XYZ | D3DFVF_TEX3 | \
                                              D3DFVF_TEXCOORDSIZE2(0) | \
                                              D3DFVF_TEXCOORDSIZE2(1) | \
                                              D3DFVF_TEXCOORDSIZE3(2))
#define FVF_LVERTEX             (D3DFVF_XYZ | D3DFVF_DIFFUSE | \
                                 D3DFVF_SPECULAR | D3DFVF_TEX1)
#define FVF_TLVERTEX            (D3DFVF_XYZRHW | D3DFVF_DIFFUSE | \
                                 D3DFVF_SPECULAR | D3DFVF_TEX1)
#define FVF_TLBVERTEX           (D3DFVF_XYZRHW | D3DFVF_DIFFUSE | \
                                 D3DFVF_SPECULAR | D3DFVF_TEX2)
#define FVF_CVERTEX             (D3DFVF_XYZ | D3DFVF_NORMAL)
#define FVF_CVERTEX1_3          (D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_TEX1 | \
                                 D3DFVF_TEXCOORDSIZE3(0))

//******************************************************************************
// Structures
//******************************************************************************

//******************************************************************************
typedef struct _TCOORD {
    float               u;
    float               v;
} TCOORD, *PTCOORD;

//******************************************************************************
typedef struct _TCOORD2 {
    float               u;
    float               v;
} TCOORD2, *PTCOORD2;

//******************************************************************************
typedef struct _TCOORD3 {
    float               u;
    float               v;
    float               t;
} TCOORD3, *PTCOORD3;

//******************************************************************************
typedef struct _MATRIX3X3 {
    union {
        struct {
            float _11, _12, _13;
            float _21, _22, _23;
            float _31, _32, _33;
        };
        float m[3][3];
        struct {
            D3DXVECTOR3 r1;
            D3DXVECTOR3 r2;
            D3DXVECTOR3 r3;
        };
    };
} MATRIX3X3, *PMATRIX3X3;

//******************************************************************************
typedef struct _VERTEX {
    D3DXVECTOR3 vPosition;
    D3DXVECTOR3 vNormal;
    float       u0, v0;

    _VERTEX() {}
    _VERTEX(const D3DVECTOR& v, const D3DVECTOR& n, float _u0, float _v0) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        vNormal.x = n.x; vNormal.y = n.y; vNormal.z = n.z;
        u0 = _u0; v0 = _v0;
    }
} VERTEX, *PVERTEX;

//******************************************************************************
typedef struct _BVERTEX {
    D3DXVECTOR3 vPosition;
    float       u0, v0;         // Base texture coordinates
    float       u1, v1;         // Height (bump) map coordinates
    float       u2, v2;         // Diffuse light map coordinates

    _BVERTEX() {}
    _BVERTEX(const D3DVECTOR& v, float _u0, float _v0, float _u1, float _v1, float _u2, float _v2) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        u0 = _u0; v0 = _v0; u1 = _u1; v1 = _v1; u2 = _u2; v2 = _v2;
    }
} BVERTEX, *PBVERTEX;

//******************************************************************************
typedef struct _BVERTEX2 {
    D3DXVECTOR3 vPosition;
    float       u0, v0;         // Base texture coordinates and height (bump) map coordinates
    float       u1, v1;         // Diffuse light map coordinates

    _BVERTEX2() {}
    _BVERTEX2(const D3DVECTOR& v, float _u0, float _v0, float _u1, float _v1) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        u0 = _u0; v0 = _v0; u1 = _u1; v1 = _v1;
    }
} BVERTEX2, *PBVERTEX2;

//******************************************************************************
typedef struct _NVERTEX {
    D3DXVECTOR3 vPosition;
    float       u0, v0;         // Base texture coordinates
    float       u1, v1;         // Height (normal) map coordinates
    float       u2, v2, t2;     // Light direction in tangent space

    _NVERTEX() {}
    _NVERTEX(const D3DVECTOR& v, float _u0, float _v0, float _u1, float _v1, float _u2, float _v2, float _t2) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        u0 = _u0; v0 = _v0; u1 = _u1; v1 = _v1; u2 = _u2; v2 = _v2; t2 = _t2;
    }
} NVERTEX, *PNVERTEX;

//******************************************************************************
typedef struct _LVERTEX {
    D3DXVECTOR3 vPosition;
    D3DCOLOR    cDiffuse;
    D3DCOLOR    cSpecular;
    float       u0, v0;

    _LVERTEX() { }
    _LVERTEX(const D3DVECTOR& v, D3DCOLOR _cDiffuse, D3DCOLOR _cSpecular, float _u0, float _v0) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        cDiffuse = _cDiffuse; cSpecular = _cSpecular;
        u0 = _u0; v0 = _v0;
    }
} LVERTEX, *PLVERTEX;

//******************************************************************************
typedef struct _TLVERTEX {
    D3DXVECTOR3 vPosition;
    float       fRHW;
    D3DCOLOR    cDiffuse;
    D3DCOLOR    cSpecular;
    float       u0, v0;

    _TLVERTEX() {}
    _TLVERTEX(const D3DVECTOR& v, float _fRHW, D3DCOLOR _cDiffuse, 
              D3DCOLOR _cSpecular, float _u0, float _v0) 
    { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z; fRHW = _fRHW;
        cDiffuse = _cDiffuse; cSpecular = _cSpecular;
        u0 = _u0; v0 = _v0;
    }
} TLVERTEX, *PTLVERTEX;

//******************************************************************************
typedef struct _TLBVERTEX {
    D3DXVECTOR3 vPosition;
    float       fRHW;
    D3DCOLOR    cDiffuse;
    D3DCOLOR    cSpecular;
    float       u0, v0;
    float       u1, v1;

    _TLBVERTEX() {}
    _TLBVERTEX(const D3DVECTOR& v, float _fRHW, D3DCOLOR _cDiffuse, 
              D3DCOLOR _cSpecular, float _u0, float _v0, float _u1, float _v1) 
    { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z; fRHW = _fRHW;
        cDiffuse = _cDiffuse; cSpecular = _cSpecular;
        u0 = _u0; v0 = _v0; u1 = _u1; v1 = _v1;
    }
} TLBVERTEX, *PTLBVERTEX;

//******************************************************************************
typedef struct _CVERTEX {
    D3DXVECTOR3   vPosition;
    D3DXVECTOR3   vNormal;

    _CVERTEX() { }
    _CVERTEX(const D3DVECTOR& v, const D3DVECTOR& n) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        vNormal.x = n.x; vNormal.y = n.y; vNormal.z = n.z;
    }
} CVERTEX, *PCVERTEX;

//******************************************************************************
typedef struct _VERTEX1_3 {
    D3DXVECTOR3   vPosition;
    D3DXVECTOR3   vNormal;
    float         u0, v0, t0;

    _VERTEX1_3() { }
    _VERTEX1_3(const D3DVECTOR& v, const D3DVECTOR& n, float _u0, float _v0, float _t0) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        vNormal.x = n.x; vNormal.y = n.y; vNormal.z = n.z;
        u0 = _u0; v0 = _v0; t0 = _t0;
    }
} VERTEX1_3, *PVERTEX1_3;

#endif //__DTYPES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dbase\enum.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    enum.h

Author:

    Matt Bronder

Description:

    Direct3D enumeration routines.

*******************************************************************************/

#ifndef __ENUM_H__
#define __ENUM_H__

//******************************************************************************
// Preprocessor definitions
//******************************************************************************

//******************************************************************************
// Macros
//******************************************************************************

#define ANTIALIAS_SUPPORTED(pdevd, pdm, bWindowed) \
    ((bWindowed && pdevd->d3dmstWindowed != D3DMULTISAMPLE_NONE) || \
    (!bWindowed && pdm->d3dmst != D3DMULTISAMPLE_NONE))

//******************************************************************************
// Data types
//******************************************************************************

typedef BOOL (* CHECKDISPLAYPROC)(LPDIRECT3D8, D3DCAPS8*, D3DDISPLAYMODE*);

//******************************************************************************
// Structures
//******************************************************************************

//******************************************************************************
// Description of a display mode
typedef struct _DISPLAYMODE {
    D3DDISPLAYMODE              d3ddm;
    D3DFORMAT                   fmtd;
    D3DMULTISAMPLE_TYPE         d3dmst;
    struct _DISPLAYMODE*        pdmNext;
} DISPLAYMODE, *PDISPLAYMODE;

//******************************************************************************
// Description of a device
typedef struct _DEVICEDESC {
    D3DDEVTYPE                  d3ddt;
    D3DCAPS8                    d3dcaps;
    DWORD                       dwBehavior;
    UINT                        uPresentInterval;
    BOOL                        bCanRenderWindowed;
    D3DFORMAT                   fmtdWindowed;
    D3DMULTISAMPLE_TYPE         d3dmstWindowed;
    PDISPLAYMODE                pdmList;
    struct _DEVICEDESC*         pdevdNext;
} DEVICEDESC, *PDEVICEDESC;

//******************************************************************************
// Description of an adapter
typedef struct _ADAPTERDESC {
    UINT                        uAdapter;
    D3DADAPTER_IDENTIFIER8      d3dai;
    D3DDISPLAYMODE              d3ddmWindowed;
    PDEVICEDESC                 pdevdList;
    struct _ADAPTERDESC*        padpdNext;
} ADAPTERDESC, *PADAPTERDESC;

//******************************************************************************
// Globals
//******************************************************************************

extern ADAPTERDESC              g_adpdDefault;
extern DEVICEDESC               g_devdDefault;
extern DISPLAYMODE              g_dmDefault;
extern D3DFORMAT                g_fmtdDefault;
extern D3DMULTISAMPLE_TYPE      g_mstDefault;

//******************************************************************************
// Function prototypes
//******************************************************************************

PADAPTERDESC        EnumDisplays(LPDIRECT3D8 pd3d);

PADAPTERDESC        SelectAdapter(PADAPTERDESC padpdList);
PDEVICEDESC         SelectDevice(PADAPTERDESC padpd);
PDISPLAYMODE        SelectDisplayMode(PDEVICEDESC pdevd);

DWORD               FormatToBitDepth(D3DFORMAT d3dfmt);

void                InitCheckDisplayProc(CHECKDISPLAYPROC pfnValidate);

#endif //__ENUM_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dbase\enum.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    enum.cpp

Author:

    Matt Bronder

Description:

    Direct3D initialization routines.

*******************************************************************************/

#include "d3dbase.h"

#ifdef UNDER_XBOX
#define DEMO_HACK
#endif // UNDER_XBOX

#define D3DDEVTYPE_NULL ((D3DDEVTYPE)0)

//******************************************************************************
// Local function prototypes
//******************************************************************************

static DWORD            SelectVertexPipeline(D3DCAPS8* pd3dcaps);
static UINT             SelectPresentationInterval(D3DCAPS8* pd3dcaps);
static D3DFORMAT        SelectDepthStencilFormat(LPDIRECT3D8 pDirect3D, 
                            UINT uAdapter, D3DDEVTYPE d3ddt, 
                            D3DFORMAT d3dfmtMode);
static
D3DMULTISAMPLE_TYPE     SelectMultiSampleType(LPDIRECT3D8 pDirect3D, 
                            UINT uAdapter, D3DDEVTYPE d3ddt, 
                            D3DFORMAT d3dfmtMode, BOOL bWindowed);

//******************************************************************************
// Globals
//******************************************************************************

ADAPTERDESC             g_adpdDefault = {
                            (UINT)(-1), {0}, D3DFMT_UNKNOWN, NULL, NULL
                        };
DEVICEDESC              g_devdDefault = {
                            D3DDEVTYPE_NULL, {D3DDEVTYPE_NULL, 0}, 
                            D3DCREATE_HARDWARE_VERTEXPROCESSING, 
                            D3DPRESENT_INTERVAL_DEFAULT, TRUE, D3DFMT_UNKNOWN, 
                            D3DMULTISAMPLE_NONE, NULL, NULL
                        };
DISPLAYMODE             g_dmDefault = {
                            {0}, D3DFMT_UNKNOWN, D3DMULTISAMPLE_NONE, NULL
                        };
D3DFORMAT               g_fmtdDefault = D3DFMT_UNKNOWN;
#ifndef UNDER_XBOX
D3DMULTISAMPLE_TYPE     g_mstDefault = D3DMULTISAMPLE_4_SAMPLES;
#else
D3DMULTISAMPLE_TYPE     g_mstDefault = D3DMULTISAMPLE_4_SAMPLES_MULTISAMPLE_LINEAR;
#endif

static CHECKDISPLAYPROC g_pfnValidate = NULL;

//******************************************************************************
//
// Function:
//
//     EnumDisplays
//
// Description:
//
//     Build a display device list containing information about all supported
//     adapters, devices, and display modes present on the system at the time
//     the Direct3D object was created.
//
// Arguments:
//
//     LPDIRECT3D8 pDirect3D        - Pointer to the Direct3D object
//
// Return Value:
//
//     A pointer to the head of the display adapter list (NULL if no adapters
//     are supported).
//
//******************************************************************************
PADAPTERDESC EnumDisplays(LPDIRECT3D8 pDirect3D) {

    PADAPTERDESC        padpdHead = NULL, padpdNode;
    UINT                uAdapter, uNumAdapters;
    PDEVICEDESC         pdevdNode;
    D3DDISPLAYMODE      d3ddm;
    PDISPLAYMODE        pdmNode;
    UINT                uMode, uNumModes;
    D3DFORMAT           fmt;
    D3DMULTISAMPLE_TYPE d3dmst;
    HRESULT             hr;
    UINT                uDevice;
    D3DDEVTYPE          d3ddt[] = {
                            D3DDEVTYPE_HAL,
                            D3DDEVTYPE_SW,
                            D3DDEVTYPE_REF,
                        };

    if (!pDirect3D) {
        return NULL;
    }

    // Enumerate adapters
    uNumAdapters = pDirect3D->GetAdapterCount();

    for (uAdapter = 0; uAdapter < pDirect3D->GetAdapterCount(); uAdapter++) {

        // Allocate memory for the adapter information
        padpdNode = (PADAPTERDESC)MemAlloc(sizeof(ADAPTERDESC));
        if (!padpdNode) {
            DebugString(TEXT("ERROR: Not enough memory available to store adapter information"));
            break;
        }

        // Save the adapter number
        padpdNode->uAdapter = uAdapter;

        // Save the adapter idenifier
        hr = pDirect3D->GetAdapterIdentifier(uAdapter, 0, &padpdNode->d3dai);
        if (ResultFailed(hr, TEXT("IDirect3D8::GetDeviceIdentifier"))) {
            MemFree(padpdNode);
            continue;
        }

        // Save the initial display mode of the adapter (for use in windowed applications)
        hr = pDirect3D->GetAdapterDisplayMode(uAdapter, &padpdNode->d3ddmWindowed);
        if (ResultFailed(hr, TEXT("IDirect3D8::GetAdapterDisplayMode"))) {
            MemFree(padpdNode);
            continue;
        }

        padpdNode->pdevdList = NULL;

        // Enumerate devices
#ifndef DEMO_HACK
        for (uDevice = 0; uDevice < 3; uDevice++) {
#else
        for (uDevice = 0; !uDevice; uDevice++) {
#endif

            // Allocate memory for the device information
            pdevdNode = (PDEVICEDESC)MemAlloc(sizeof(DEVICEDESC));
            if (!pdevdNode) {
                DebugString(TEXT("ERROR: Not enough memory available to store device information"));
                break;
            }

            // Save the device type
            pdevdNode->d3ddt = d3ddt[uDevice];
            
            // Save the caps
            hr = pDirect3D->GetDeviceCaps(uAdapter, d3ddt[uDevice], &pdevdNode->d3dcaps);
            if (ResultFailed(hr, TEXT("IDirect3D8::GetDeviceCaps"))) {
                MemFree(pdevdNode);
                continue;
            }

            // The device supports windowed mode if the caps exposes it and
            // the device can render to the initial display mode of the adapter
#ifndef DEMO_HACK
            hr = pDirect3D->CheckDeviceType(uAdapter, d3ddt[uDevice], padpdNode->d3ddmWindowed.Format, padpdNode->d3ddmWindowed.Format, TRUE);
#else
            hr = D3DERR_NOTAVAILABLE;
#endif // DEMO_HACK
            pdevdNode->bCanRenderWindowed = ((pdevdNode->d3dcaps.Caps2 & D3DCAPS2_CANRENDERWINDOWED) && SUCCEEDED(hr));

            // Select where vertex processing is to be performed
            pdevdNode->dwBehavior = SelectVertexPipeline(&pdevdNode->d3dcaps);

            // Select the presentation swap interval
            pdevdNode->uPresentInterval = SelectPresentationInterval(&pdevdNode->d3dcaps);

            if (SUCCEEDED(hr)) {

                // Select a depth/stencil buffer format for a windowed device
                pdevdNode->fmtdWindowed = SelectDepthStencilFormat(pDirect3D, uAdapter, d3ddt[uDevice], padpdNode->d3ddmWindowed.Format);

                // Select a multisample type for a windowed device
                pdevdNode->d3dmstWindowed = SelectMultiSampleType(pDirect3D, uAdapter, d3ddt[uDevice], padpdNode->d3ddmWindowed.Format, TRUE);
            }

            // Save the display modes supported by the adapter, device, and application
            uNumModes = pDirect3D->GetAdapterModeCount(uAdapter);
            pdevdNode->pdmList = NULL;

            for (uMode = 0; uMode < uNumModes; uMode++) {

                hr = pDirect3D->EnumAdapterModes(uAdapter, uMode, &d3ddm);
                if (ResultFailed(hr, TEXT("IDirect3D8::EnumAdapterModes"))) {
                    continue;
                }

                // Select a depth/stencil buffer format for the full screen display mode
                fmt = SelectDepthStencilFormat(pDirect3D, uAdapter, d3ddt[uDevice], d3ddm.Format);

                // Select a multisample type for the full screen display mode
                d3dmst = SelectMultiSampleType(pDirect3D, uAdapter, d3ddt[uDevice], d3ddm.Format, FALSE);

                // Check if the device supports the display mode format
                hr = pDirect3D->CheckDeviceType(uAdapter, d3ddt[uDevice], d3ddm.Format, d3ddm.Format, FALSE);
                if (FAILED(hr)) {
#ifndef DEMO_HACK
                    if (hr != D3DERR_NOTAVAILABLE) {
                        ResultFailed(hr, TEXT("IDirect3D8::CheckDeviceType"));
                    }
#endif
                    continue;
                }

                // Check if the application supports the display mode format
                if (g_pfnValidate && !g_pfnValidate(pDirect3D, &pdevdNode->d3dcaps, &d3ddm)) {
                    // The application rejected the mode, skip it
                    continue;
                }
                        
                // Allocate memory for the display mode information
                pdmNode = (PDISPLAYMODE)MemAlloc(sizeof(DISPLAYMODE));
                if (!pdmNode) {
                    DebugString(TEXT("ERROR: Not enough memory available to store display mode information"));
                    break;
                }

                // Save the display mode
                memcpy(&pdmNode->d3ddm, &d3ddm, sizeof(D3DDISPLAYMODE));

                // Save the selected depth/stencil format
                pdmNode->fmtd = fmt;

                // Save the selected multisample type
                pdmNode->d3dmst = d3dmst;

                // Add the display mode to the list
                pdmNode->pdmNext = pdevdNode->pdmList;
                pdevdNode->pdmList = pdmNode;
            }

            // If no display modes are supported by the device, skip it
            if (!pdevdNode->pdmList) {
                MemFree(pdevdNode);
                continue;
            }

            // Add the device to the list
            pdevdNode->pdevdNext = padpdNode->pdevdList;
            padpdNode->pdevdList = pdevdNode;
        }

        // If no devices are supported by the adapter, skip it
        if (!padpdNode->pdevdList) {
            MemFree(padpdNode);
            continue;
        }

        // Add the adapter to the list
        padpdNode->padpdNext = padpdHead;
        padpdHead = padpdNode;
    }

    return padpdHead;
}

//******************************************************************************
//
// Function:
//
//     InitCheckDisplayProc
//
// Description:
//
//     Set a validation function which will be used during enumeration to 
//     evaluate which display modes are acceptable to the application.
//
// Arguments:
//
//     CHECKDISPLAYPROC pfnValidate     - Validation function
//
// Return Value:
//
//     None.
//
//******************************************************************************
void InitCheckDisplayProc(CHECKDISPLAYPROC pfnValidate) {
    
    g_pfnValidate = pfnValidate;
}

//******************************************************************************
//
// Function:
//
//     SelectAdapter
//
// Description:
//
//     Select a default adapter for the application from a list of available
//     adapters.
//
// Arguments:
//
//     PADAPTERDESC padpdList   - List of the available adapters
//
// Return Value:
//
//     A pointer to the selected adapter in the list.
//
//******************************************************************************
PADAPTERDESC SelectAdapter(PADAPTERDESC padpdList) {

    PADAPTERDESC padpd;

    if (!padpdList) {
        return NULL;
    }

    // Look for the default adapter in the list
    if (g_adpdDefault.uAdapter != (UINT)(-1)) {
        for (padpd = padpdList; padpd; padpd = padpd->padpdNext) {
            if (padpd->uAdapter == g_adpdDefault.uAdapter) 
            {
                return padpd;
            }
        }
    }

    // Select the primary display adapter
    for (padpd = padpdList; padpd; padpd = padpd->padpdNext) {

        if (padpd->uAdapter == 0) {
            return padpd;
        }
    }

    return padpdList;
}

//******************************************************************************
//
// Function:
//
//     SelectDevice
//
// Description:
//
//     Select the default device for the application from a list of available
//     devices.
//
// Arguments:
//
//     PADAPTERDESC padpd       - The adapter from which to select the default
//                                device
//
// Return Value:
//
//     A pointer to the selected device in the list.
//
//******************************************************************************
PDEVICEDESC SelectDevice(PADAPTERDESC padpd) {

    PDEVICEDESC pdevd,
                pdevdSelection = NULL;

    if (!padpd) {
        return NULL;
    }

    // Look for the default device in the list
    if (g_devdDefault.d3ddt != D3DDEVTYPE_NULL) {
        for (pdevd = padpd->pdevdList; pdevd; pdevd = pdevd->pdevdNext) {
            if (pdevd->d3ddt == g_devdDefault.d3ddt) {
                return pdevd;
            }
        }
    }

    for (pdevd = padpd->pdevdList; pdevd; pdevd = pdevd->pdevdNext) {

        // If the device is a HAL device, select it and return
        if (pdevd->d3ddt == D3DDEVTYPE_HAL) {
            return pdevd;
        }

        // If the device is an emulation device, save it and keep looking
        if (pdevd->d3ddt == D3DDEVTYPE_SW) {
            pdevdSelection = pdevd;
        }

        // If no device has yet been selected, save the reference device 
        // and keep looking
        if (!pdevdSelection) {
            pdevdSelection = pdevd;
        }
    }

    return pdevdSelection;
}

//******************************************************************************
//
// Function:
//
//     SelectDisplayMode
//
// Description:
//
//     Select the default display mode for the application from a list of 
//     display modes available to the given device.
//
// Arguments:
//
//     PDEVICEDESC pdevd        - The device from which to select the default
//                                display mode
//
// Return Value:
//
//     A pointer to the selected display mode in the list.
//
//******************************************************************************
PDISPLAYMODE SelectDisplayMode(PDEVICEDESC pdevd) {

    PDISPLAYMODE pdm;

    if (!pdevd) {
        return NULL;
    }

    // Look for the default display mode in the list
    if (g_dmDefault.d3ddm.Width != 0 && g_dmDefault.d3ddm.Height != 0) {
        for (pdm = pdevd->pdmList; pdm; pdm = pdm->pdmNext) {
            if (pdm->d3ddm.Width == g_dmDefault.d3ddm.Width && 
                pdm->d3ddm.Height == g_dmDefault.d3ddm.Height &&
                pdm->d3ddm.Format == g_dmDefault.d3ddm.Format) 
            {
                if (pdm->d3ddm.RefreshRate == g_dmDefault.d3ddm.RefreshRate ||
                    g_dmDefault.d3ddm.RefreshRate == 0) 
                {
                    return pdm;
                }
            }
        }
    }

    for (pdm = pdevd->pdmList; pdm; pdm = pdm->pdmNext) {

        if (pdm->d3ddm.Width == 640 && pdm->d3ddm.Height == 480 &&
            FormatToBitDepth(pdm->d3ddm.Format) == 16) 
        {
            return pdm;
        }
    }

    return pdevd->pdmList;
}

//******************************************************************************
//
// Function:
//
//     SelectVertexPipeline
//
// Description:
//
//     Select what form(s) of vertex processing to use in a device.
//
// Arguments:
//
//     D3DCAPS8* pd3dcaps       - Capabilities of the device to evaluate
//
// Return Value:
//
//     A vertex processing behavior flag to be used in the creation of the 
//     device.
//
//******************************************************************************
static DWORD SelectVertexPipeline(D3DCAPS8* pd3dcaps) {

    if (g_devdDefault.dwBehavior & D3DCREATE_MIXED_VERTEXPROCESSING &&
        pd3dcaps->DevCaps & D3DDEVCAPS_HWTRANSFORMANDLIGHT)
    {
        return g_devdDefault.dwBehavior;
    }
    else if (g_devdDefault.dwBehavior & D3DCREATE_HARDWARE_VERTEXPROCESSING &&
        pd3dcaps->DevCaps & D3DDEVCAPS_HWTRANSFORMANDLIGHT)
    {
        return g_devdDefault.dwBehavior;
    }
    else if (g_devdDefault.dwBehavior & D3DCREATE_PUREDEVICE &&
        pd3dcaps->DevCaps & D3DDEVCAPS_PUREDEVICE)
    {
        return g_devdDefault.dwBehavior | D3DCREATE_HARDWARE_VERTEXPROCESSING;
    }
    else if (g_devdDefault.dwBehavior == D3DCREATE_SOFTWARE_VERTEXPROCESSING) {
        return g_devdDefault.dwBehavior;
    }
    else if (pd3dcaps->DevCaps & D3DDEVCAPS_HWTRANSFORMANDLIGHT) {
        return D3DCREATE_HARDWARE_VERTEXPROCESSING;
    }
    else if (pd3dcaps->DevCaps & D3DDEVCAPS_PUREDEVICE) {
        return D3DCREATE_PUREDEVICE | D3DCREATE_HARDWARE_VERTEXPROCESSING;
    }
    else {
        return D3DCREATE_SOFTWARE_VERTEXPROCESSING;
    }
}

//******************************************************************************
//
// Function:
//
//     SelectPresentationInterval
//
// Description:
//
//     Select what presentation swap interval to use in a device.
//
// Arguments:
//
//     D3DCAPS8* pd3dcaps       - Capabilities of the device to evaluate
//
// Return Value:
//
//     A presentation interval value to be used in the creation or reset of the 
//     device when it is placed in full screen mode.
//
//******************************************************************************
static UINT SelectPresentationInterval(D3DCAPS8* pd3dcaps) {

#ifdef DEMO_HACK
    switch (g_devdDefault.uPresentInterval) {
        case D3DPRESENT_INTERVAL_DEFAULT:
        case D3DPRESENT_INTERVAL_ONE:
        case D3DPRESENT_INTERVAL_IMMEDIATE:
            return g_devdDefault.uPresentInterval;
    }
#endif
    if (pd3dcaps->PresentationIntervals & g_devdDefault.uPresentInterval) {
        return g_devdDefault.uPresentInterval;
    }
    if (pd3dcaps->PresentationIntervals & D3DPRESENT_INTERVAL_ONE) {
        return D3DPRESENT_INTERVAL_ONE;
    }
    else if (pd3dcaps->PresentationIntervals & D3DPRESENT_INTERVAL_IMMEDIATE) {
        return D3DPRESENT_INTERVAL_IMMEDIATE;
    }
    else if (pd3dcaps->PresentationIntervals & D3DPRESENT_INTERVAL_TWO) {
        return D3DPRESENT_INTERVAL_TWO;
    }
    else if (pd3dcaps->PresentationIntervals & D3DPRESENT_INTERVAL_THREE) {
        return D3DPRESENT_INTERVAL_THREE;
    }
    else if (pd3dcaps->PresentationIntervals & D3DPRESENT_INTERVAL_FOUR) {
        return D3DPRESENT_INTERVAL_FOUR;
    }
    else {
        return D3DPRESENT_INTERVAL_IMMEDIATE;
    }
}

//******************************************************************************
//
// Function:
//
//     SelectDepthStencilFormat
//
// Description:
//
//     Select the default format of the depth/stencil buffer to be used for 
//     the given adapter, device, and display mode format.
//
// Arguments:
//
//     LPDIRECT3D8 pDirect3D    - Pointer to the Direct3D object
//
//     UINT uAdapter            - Ordinal of the adapter
//
//     D3DDEVTYPE d3ddt         - Device type
//
//     D3DFORMAT d3dfmtMode     - Display mode format
//
// Return Value:
//
//     The depth buffer format to use for the given adapter, device, and 
//     display mode format.
//
//******************************************************************************
static D3DFORMAT SelectDepthStencilFormat(LPDIRECT3D8 pDirect3D, 
                                UINT uAdapter, D3DDEVTYPE d3ddt, 
                                D3DFORMAT d3dfmtMode)
{
    HRESULT     hr;
    UINT        i;
    D3DFORMAT   d3dfmt[] = {
                    D3DFMT_D24S8,
#ifndef UNDER_XBOX
                    D3DFMT_D24X4S4,
                    D3DFMT_D15S1,
                    D3DFMT_D32,
                    D3DFMT_D24X8,
#else
                    D3DFMT_F24S8,
#endif // UNDER_XBOX
                    D3DFMT_D16_LOCKABLE,
                    D3DFMT_D16,
#ifdef UNDER_XBOX
                    D3DFMT_F16,
#endif // UNDER_XBOX
                };

    if (g_fmtdDefault != D3DFMT_UNKNOWN) {
        hr = pDirect3D->CheckDeviceFormat(uAdapter, d3ddt, d3dfmtMode, D3DUSAGE_DEPTHSTENCIL, D3DRTYPE_SURFACE, g_fmtdDefault);
        if (FAILED(hr)) {
            if (hr != D3DERR_NOTAVAILABLE) {
                ResultFailed(hr, TEXT("IDirect3D8::CheckDeviceFormat"));
            }
        }
        else {
            hr = pDirect3D->CheckDepthStencilMatch(uAdapter, d3ddt, d3dfmtMode, d3dfmtMode, g_fmtdDefault);
            if (FAILED(hr)) {
                if (hr != D3DERR_NOTAVAILABLE) {
                    ResultFailed(hr, TEXT("IDirect3D8::CheckDepthStencilMatch"));
                }
            }
            else {
                return g_fmtdDefault;
            }
        }
    }

    for (i = 0; i < 7; i++) {
        hr = pDirect3D->CheckDeviceFormat(uAdapter, d3ddt, d3dfmtMode, D3DUSAGE_DEPTHSTENCIL, D3DRTYPE_SURFACE, d3dfmt[i]);
        if (FAILED(hr)) {
            if (hr != D3DERR_NOTAVAILABLE) {
                ResultFailed(hr, TEXT("IDirect3D8::CheckDeviceFormat"));
            }
        }
        else {
            hr = pDirect3D->CheckDepthStencilMatch(uAdapter, d3ddt, d3dfmtMode, d3dfmtMode, d3dfmt[i]);
            if (FAILED(hr)) {
                if (hr != D3DERR_NOTAVAILABLE) {
                    ResultFailed(hr, TEXT("IDirect3D8::CheckDepthStencilMatch"));
                }
            }
            else {
                return d3dfmt[i];
            }
        }
    }

    return D3DFMT_UNKNOWN;
}

//******************************************************************************
//
// Function:
//
//     SelectMultiSampleType
//
// Description:
//
//     Select the default multi-sample type for the given adapter, device,
//     display mode format, and windowed mode.
//
// Arguments:
//
//     CDirect3D8 pDirect3D     - Pointer to the Direct3D object
//
//     UINT uAdapter            - Ordinal of the adapter
//
//     D3DDEVTYPE d3ddt         - Device type
//
//     D3DFORMAT d3dfmtMode     - Display mode format
//
//     BOOL bWindowed           - Windowed mode
//
// Return Value:
//
//     The multi-sample type to use for the given adapter, device, display mode
//     format, and windowed mode.
//
//******************************************************************************
static D3DMULTISAMPLE_TYPE SelectMultiSampleType(LPDIRECT3D8 pDirect3D, 
                                UINT uAdapter, D3DDEVTYPE d3ddt, 
                                D3DFORMAT d3dfmtMode, BOOL bWindowed)
{
    UINT                    i;
    HRESULT                 hr;
    D3DMULTISAMPLE_TYPE     mst[] = {
#ifndef UNDER_XBOX
                                D3DMULTISAMPLE_4_SAMPLES,
                                D3DMULTISAMPLE_2_SAMPLES,
                                D3DMULTISAMPLE_9_SAMPLES,
                                D3DMULTISAMPLE_12_SAMPLES,
                                D3DMULTISAMPLE_16_SAMPLES,
                                D3DMULTISAMPLE_3_SAMPLES,
                                D3DMULTISAMPLE_5_SAMPLES,
                                D3DMULTISAMPLE_6_SAMPLES,
                                D3DMULTISAMPLE_7_SAMPLES,
                                D3DMULTISAMPLE_8_SAMPLES,
                                D3DMULTISAMPLE_10_SAMPLES,
                                D3DMULTISAMPLE_11_SAMPLES,
                                D3DMULTISAMPLE_13_SAMPLES,
                                D3DMULTISAMPLE_14_SAMPLES,
                                D3DMULTISAMPLE_15_SAMPLES,
                                D3DMULTISAMPLE_NONE
#else
                                D3DMULTISAMPLE_4_SAMPLES_MULTISAMPLE_LINEAR,
                                D3DMULTISAMPLE_4_SAMPLES_MULTISAMPLE_GAUSSIAN,
                                D3DMULTISAMPLE_2_SAMPLES_MULTISAMPLE_QUINCUNX,
                                D3DMULTISAMPLE_2_SAMPLES_MULTISAMPLE_LINEAR,
                                D3DMULTISAMPLE_2_SAMPLES_SUPERSAMPLE_HORIZONTAL_LINEAR,
                                D3DMULTISAMPLE_2_SAMPLES_SUPERSAMPLE_VERTICAL_LINEAR,
                                D3DMULTISAMPLE_4_SAMPLES_SUPERSAMPLE_LINEAR,
                                D3DMULTISAMPLE_4_SAMPLES_SUPERSAMPLE_GAUSSIAN,
                                D3DMULTISAMPLE_9_SAMPLES_MULTISAMPLE_GAUSSIAN,
                                D3DMULTISAMPLE_9_SAMPLES_SUPERSAMPLE_GAUSSIAN,
                                D3DMULTISAMPLE_NONE
#endif // UNDER_XBOX
    };

#ifdef DEMO_HACK
    return g_mstDefault;
#endif

    hr = pDirect3D->CheckDeviceMultiSampleType(uAdapter, d3ddt, d3dfmtMode, bWindowed, g_mstDefault);
    if (FAILED(hr)) {
        if (hr != D3DERR_NOTAVAILABLE) {
            ResultFailed(hr, TEXT("IDirect3D8::CheckDeviceMultiSampleTypes"));
        }
    }
    else {
        return g_mstDefault;
    }

    for (i = 0; i < countof(mst); i++) {

        hr = pDirect3D->CheckDeviceMultiSampleType(uAdapter, d3ddt, d3dfmtMode, bWindowed, mst[i]);
        if (FAILED(hr)) {
            if (hr != D3DERR_NOTAVAILABLE) {
                ResultFailed(hr, TEXT("IDirect3D8::CheckDeviceMultiSampleTypes"));
            }
        }
        else {
            return mst[i];
        }
    }

    return D3DMULTISAMPLE_NONE;
}

//******************************************************************************
//
// Function:
//
//     FormatToBitDepth
//
// Description:
//
//     Convert the given format to the number of bits needed to represent it.
//
// Arguments:
//
//     D3DFORMAT d3dfmt         - Resource format
//
// Return Value:
//
//     The number of bits required to represent the given format in memory.
//
//******************************************************************************
DWORD FormatToBitDepth(D3DFORMAT d3dfmt) {

    switch (d3dfmt) {
        case D3DFMT_R3G3B2:
        case D3DFMT_A8:
        case D3DFMT_P8:
        case D3DFMT_L8:
        case D3DFMT_A4L4:
#ifdef UNDER_XBOX
        case D3DFMT_LIN_A8:
        case D3DFMT_LIN_L8:
        case D3DFMT_LIN_AL8:
#endif // UNDER_XBOX
            return 8;
        case D3DFMT_R5G6B5:
        case D3DFMT_X1R5G5B5:
        case D3DFMT_A1R5G5B5:
        case D3DFMT_A4R4G4B4:
        case D3DFMT_A8R3G3B2:
        case D3DFMT_X4R4G4B4:
        case D3DFMT_A8P8:
        case D3DFMT_A8L8:
        case D3DFMT_V8U8:
        case D3DFMT_L6V5U5:
#ifndef UNDER_XBOX
        case D3DFMT_D16_LOCKABLE:
#endif // !UNDER_XBOX
        case D3DFMT_D16:
        case D3DFMT_D15S1:
#ifdef UNDER_XBOX
        case D3DFMT_LIN_A1R5G5B5:
        case D3DFMT_LIN_A4R4G4B4:
        case D3DFMT_LIN_G8B8:
        case D3DFMT_LIN_R4G4B4A4:
        case D3DFMT_LIN_R5G5B5A1:
        case D3DFMT_LIN_R5G6B5:
        case D3DFMT_LIN_R6G5B5:
        case D3DFMT_LIN_R8B8:
        case D3DFMT_LIN_X1R5G5B5:
        case D3DFMT_LIN_A8L8:
        case D3DFMT_LIN_L16:
        case D3DFMT_LIN_D16:
        case D3DFMT_LIN_F16:
#endif // UNDER_XBOX
            return 16;
        case D3DFMT_R8G8B8:
            return 24;
        case D3DFMT_A8R8G8B8:
        case D3DFMT_X8R8G8B8:
#ifndef UNDER_XBOX
        case D3DFMT_X8L8V8U8:
#endif // !UNDER_XBOX
        case D3DFMT_Q8W8V8U8:
        case D3DFMT_V16U16:
        case D3DFMT_W11V11U10:
        case D3DFMT_D32:
        case D3DFMT_D24S8:
#ifndef UNDER_XBOX
        case D3DFMT_D24X8:
#endif // !UNDER_XBOX
        case D3DFMT_D24X4S4:
#ifdef UNDER_XBOX
        case D3DFMT_LIN_A8B8G8R8:
        case D3DFMT_LIN_A8R8G8B8:
        case D3DFMT_LIN_B8G8R8A8:
        case D3DFMT_LIN_R8G8B8A8:
        case D3DFMT_LIN_X8R8G8B8:
        case D3DFMT_LIN_D24S8:
        case D3DFMT_LIN_F24S8:
#endif // UNDER_XBOX
            return 32;
        default:
            return 0;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dbase\dxconio.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

Author:

    Matt Bronder

File Name:

    dxconio.h

*******************************************************************************/

#ifndef __DXCONIO_H__
#define __DXCONIO_H__

#ifdef __cplusplus
extern "C"
{
#endif // __cplusplus

#define DXCIOAPI __cdecl
#define DXCONIOAPI

//******************************************************************************
// Preprocessor definitions
//******************************************************************************

#define MAX_TCHAR_OUTPUT        4096

#define CHAR_ASPECT             1.875f

#define XSCROLL_LINEUP          0x0001
#define XSCROLL_LINELEFT        0x0002
#define XSCROLL_LINEDOWN        0x0004
#define XSCROLL_LINERIGHT       0x0008
#define XSCROLL_PAGEUP          0x0010
#define XSCROLL_PAGELEFT        0x0020
#define XSCROLL_PAGEDOWN        0x0040
#define XSCROLL_PAGERIGHT       0x0080
#define XSCROLL_TOP             0x0100
#define XSCROLL_LEFT            0x0200
#define XSCROLL_BOTTOM          0x0400
#define XSCROLL_RIGHT           0x0800
#define XSCROLL_HORZ            0x1000
#define XSCROLL_VERT            0x2000

#define RGBA_XCOLOR(r, g, b, a) ((XCOLOR)(((a) << 24) | ((r) << 16) | ((g) << 8) | (b)))

//******************************************************************************
// Data types
//******************************************************************************

typedef DWORD                   XCOLOR;

//******************************************************************************
// stdio functions
//******************************************************************************

// xprintf, xwprintf, and xtprintf

DXCONIOAPI
int
DXCIOAPI
xprintf(
    const char *, 
    ...
);
DXCONIOAPI
int
DXCIOAPI
xwprintf(
    const wchar_t *,
    ...
);
#ifndef UNICODE
#define xtprintf            xprintf
#else
#define xtprintf            xwprintf
#endif // UNICODE

// xvprintf, xvwprintf, and xvtprintf

DXCONIOAPI
int
DXCIOAPI
xvprintf(
    const char *,
    va_list
);
DXCONIOAPI
int
DXCIOAPI
xvwprintf(
    const wchar_t *,
    va_list
);
#ifndef UNICODE
#define xvtprintf           xvprintf
#else
#define xvtprintf           xvwprintf
#endif // UNICODE

// xputchar, xputwchar, and xputtchar

DXCONIOAPI
int
DXCIOAPI
xputchar(
    int
);
DXCONIOAPI
wint_t
DXCIOAPI
xputwchar(
    wint_t
);
#ifndef UNICODE
#define xputtchar           xputchar
#else
#define xputtchar           xputwchar
#endif // UNICODE

// xputs, xputws, and xputts

DXCONIOAPI
int
DXCIOAPI
xputs(
    const char *
);
DXCONIOAPI
int
DXCIOAPI
xputws(
    const wchar_t *
);
#ifndef UNICODE
#define xputts              xputs
#else
#define xputts              xputws
#endif // UNICODE

//******************************************************************************
// Console management functions
//******************************************************************************

// xCreateConsole

DXCONIOAPI
BOOL
DXCIOAPI
xCreateConsole(
    LPVOID pvDevice
);

// xReleaseConsole

DXCONIOAPI
void
DXCIOAPI
xReleaseConsole(
    void
);

// xClearScreen

DXCONIOAPI
void
DXCIOAPI
xClearScreen(
    void
);

// xSetCharSize

DXCONIOAPI
void
DXCIOAPI
xSetCharSize(
    float fWidth,
    float fHeight
);

// xSetTextColor

DXCONIOAPI
XCOLOR
DXCIOAPI
xSetTextColor(
    BYTE red, 
    BYTE green, 
    BYTE blue, 
    BYTE alpha
);

// xSetBackgroundColor

DXCONIOAPI
XCOLOR
DXCIOAPI
xSetBackgroundColor(
    BYTE red,
    BYTE green,
    BYTE blue,
    BYTE alpha
);

// xSetBackgroundImageA, xSetBackgroundImageW, and xSetBackgroundImage

DXCONIOAPI
BOOL
DXCIOAPI
xSetBackgroundImageA(
    LPCSTR pszImage
);
DXCONIOAPI
BOOL
DXCIOAPI
xSetBackgroundImageW(
    LPCWSTR pszImage
);
#ifndef UNICODE
#define xSetBackgroundImage xSetBackgroundImageA
#else
#define xSetBackgroundImage xSetBackgroundImageW
#endif // UNICODE

// xScrollConsoleX

DXCONIOAPI
void
DXCIOAPI
xScrollConsole(
    DWORD  dwScroll,
    float* pfHorz,
    float* pfVert
);

// xSetOutputBufferSize

DXCONIOAPI
BOOL
DXCIOAPI
xSetOutputBufferSize(
    UINT uBytes
);

// xSetDisplayWidth

DXCONIOAPI
BOOL
DXCIOAPI
xSetDisplayWidth(
    UINT uWidth
);

// xDisplayConsole

DXCONIOAPI
void
DXCIOAPI
xDisplayConsole(
    void
);

// xResetConsole

DXCONIOAPI
BOOL
DXCIOAPI
xResetConsole(
    void
);

// xTextOutA, xTextOutW, and xTextOut

DXCONIOAPI
BOOL
DXCIOAPI
xTextOutA(
    float   fXStart,
    float   fYStart,
    float   fCWidth,
    float   fCHeight,
    XCOLOR  xcColor,
    LPCSTR  pszString,
    UINT    uCount
);
DXCONIOAPI
BOOL
DXCIOAPI
xTextOutW(
    float   fXStart,
    float   fYStart,
    float   fCWidth,
    float   fCHeight,
    XCOLOR  xcColor,
    LPCWSTR pszString,
    UINT    uCount
);
#ifndef UNICODE
#define xTextOut            xTextOutA
#else
#define xTextOut            xTextOutW
#endif // UNICODE

// xDebugStringA, xDebugStringW, and xDebugString

DXCONIOAPI
void
DXCIOAPI
xDebugStringA(
    LPCSTR pszFormat,
    ...
);
DXCONIOAPI
void
DXCIOAPI
xDebugStringW(
    LPCWSTR pszFormat, 
    ...
);
#ifndef UNICODE
#define xDebugString        xDebugStringA
#else
#define xDebugString        xDebugStringW
#endif // UNICODE

//******************************************************************************
// stdio overrides
//******************************************************************************

#ifdef  printf
#undef  printf
#endif // printf
#define printf                  xprintf

#ifdef  wprintf
#undef  wprintf
#endif // wprintf
#define wprintf                 xwprintf

#ifdef  _tprintf
#undef  _tprintf
#endif // _tprintf
#define _tprintf                xtprintf

#ifdef  vprintf
#undef  vprintf
#endif // vprintf
#define vprintf                 xvprintf

#ifdef  vwprintf
#undef  vwprintf
#endif // vwprintf
#define vwprintf                xvwprintf

#ifdef  _vtprintf
#undef  _vtprintf
#endif // _vtprintf
#define _vtprintf               xvtprintf

#ifdef  putchar
#undef  putchar
#endif // putchar
#define putchar                 xputchar

#ifdef  putwchar
#undef  putwchar
#endif // putwchar
#define putwchar                xputwchar

#ifdef  _puttchar
#undef  _puttchar
#endif // _puttchar
#define _puttchar               xputtchar

#ifdef  puts
#undef  puts
#endif // puts
#define puts                    xputs

#ifdef  _putws
#undef  _putws
#endif // _putws
#define _putws                  xputws

#ifdef  _putts
#undef  _putts
#endif // _puttchar
#define _putts                  xputts

//******************************************************************************
// Debug output overrides
//******************************************************************************

#ifndef DXCONIO_NO_OVERRIDES

#undef  OutputDebugString
#define OutputDebugString(x)    xDebugString(TEXT("%s"), x)

#endif // !DXCONIO_NO_OVERRIDES

#ifdef __cplusplus
}
#endif // __cplusplus

#endif // __DXCONIO_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dbase\fontmap.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    fontmap.cpp

Author:

    Matt Bronder

Description:

    Functions for creating and indexing into a font texture.

*******************************************************************************/

#include "d3dbase.h"
#include "fontmap.h"

//******************************************************************************
// Globals
//******************************************************************************

LPDIRECT3DTEXTURE8          g_pd3dtFontMap = NULL;
TCOORD2                     g_ptcFont[96];

static BYTE                 g_bFontPixels[120][12] = {

    {0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x18, 0x66, 0x36, 0x3C, 0xD8, 0x38, 0x18, 0x0C, 0x30, 0x00, 0x00},
    {0x00, 0x3C, 0x66, 0x36, 0x66, 0xDA, 0x6C, 0x18, 0x18, 0x18, 0x00, 0x00},
    {0x00, 0x3C, 0x66, 0x7F, 0x60, 0x76, 0x6C, 0x18, 0x18, 0x18, 0x36, 0x18},
    {0x00, 0x3C, 0x00, 0x36, 0x30, 0x0C, 0x38, 0x00, 0x30, 0x0C, 0x1C, 0x18},
    {0x00, 0x18, 0x00, 0x36, 0x18, 0x18, 0x60, 0x00, 0x30, 0x0C, 0x7F, 0x7E},
    {0x00, 0x18, 0x00, 0x36, 0x0C, 0x30, 0x6F, 0x00, 0x30, 0x0C, 0x1C, 0x18},
    {0x00, 0x00, 0x00, 0x7F, 0x06, 0x6E, 0x66, 0x00, 0x30, 0x0C, 0x36, 0x18},
    {0x00, 0x18, 0x00, 0x36, 0x66, 0x5B, 0x66, 0x00, 0x30, 0x0C, 0x00, 0x00},
    {0x00, 0x18, 0x00, 0x36, 0x3C, 0x1B, 0x3B, 0x00, 0x18, 0x18, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x18, 0x0E, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x0C, 0x30, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x06, 0x1E, 0x0C, 0x3C, 0x3C, 0x30, 0x7E, 0x1C, 0x7E},
    {0x00, 0x00, 0x00, 0x06, 0x33, 0x1C, 0x66, 0x66, 0x30, 0x60, 0x18, 0x06},
    {0x00, 0x00, 0x00, 0x0C, 0x37, 0x7C, 0x66, 0x66, 0x36, 0x60, 0x30, 0x0C},
    {0x00, 0x00, 0x00, 0x0C, 0x37, 0x0C, 0x06, 0x06, 0x36, 0x60, 0x7C, 0x0C},
    {0x00, 0x7E, 0x00, 0x18, 0x33, 0x0C, 0x0C, 0x1C, 0x36, 0x7C, 0x66, 0x18},
    {0x00, 0x00, 0x00, 0x18, 0x3B, 0x0C, 0x18, 0x06, 0x66, 0x06, 0x66, 0x18},
    {0x00, 0x00, 0x00, 0x30, 0x3B, 0x0C, 0x30, 0x66, 0x7F, 0x06, 0x66, 0x30},
    {0x1C, 0x00, 0x1C, 0x30, 0x33, 0x0C, 0x60, 0x66, 0x06, 0x0C, 0x66, 0x30},
    {0x1C, 0x00, 0x1C, 0x60, 0x1E, 0x0C, 0x7E, 0x3C, 0x06, 0x78, 0x3C, 0x30},
    {0x0C, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x3C, 0x3C, 0x00, 0x00, 0x06, 0x00, 0x60, 0x3C, 0x7E, 0x18, 0x7C, 0x3C},
    {0x66, 0x66, 0x00, 0x00, 0x0C, 0x00, 0x30, 0x66, 0xC3, 0x3C, 0x66, 0x66},
    {0x66, 0x66, 0x1C, 0x1C, 0x18, 0x00, 0x18, 0x66, 0xC3, 0x66, 0x66, 0x66},
    {0x76, 0x66, 0x1C, 0x1C, 0x30, 0x7E, 0x0C, 0x0C, 0xCF, 0x66, 0x66, 0x60},
    {0x3C, 0x66, 0x00, 0x00, 0x60, 0x00, 0x06, 0x18, 0xDB, 0x66, 0x7C, 0x60},
    {0x6E, 0x3E, 0x00, 0x00, 0x30, 0x7E, 0x0C, 0x18, 0xDB, 0x7E, 0x66, 0x60},
    {0x66, 0x0C, 0x00, 0x00, 0x18, 0x00, 0x18, 0x00, 0xCF, 0x66, 0x66, 0x66},
    {0x66, 0x18, 0x1C, 0x1C, 0x0C, 0x00, 0x30, 0x18, 0xC0, 0x66, 0x66, 0x66},
    {0x3C, 0x38, 0x1C, 0x1C, 0x06, 0x00, 0x60, 0x18, 0x7F, 0x66, 0x7C, 0x3C},
    {0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x78, 0x7E, 0x7E, 0x3C, 0x66, 0x3C, 0x06, 0x66, 0x60, 0x63, 0x63, 0x3C},
    {0x6C, 0x60, 0x60, 0x66, 0x66, 0x18, 0x06, 0x66, 0x60, 0x63, 0x63, 0x66},
    {0x66, 0x60, 0x60, 0x66, 0x66, 0x18, 0x06, 0x6C, 0x60, 0x77, 0x73, 0x66},
    {0x66, 0x60, 0x60, 0x60, 0x66, 0x18, 0x06, 0x6C, 0x60, 0x6B, 0x7B, 0x66},
    {0x66, 0x7C, 0x7C, 0x60, 0x7E, 0x18, 0x06, 0x78, 0x60, 0x6B, 0x6F, 0x66},
    {0x66, 0x60, 0x60, 0x6E, 0x66, 0x18, 0x06, 0x6C, 0x60, 0x6B, 0x67, 0x66},
    {0x66, 0x60, 0x60, 0x66, 0x66, 0x18, 0x66, 0x6C, 0x60, 0x63, 0x63, 0x66},
    {0x6C, 0x60, 0x60, 0x66, 0x66, 0x18, 0x66, 0x66, 0x60, 0x63, 0x63, 0x66},
    {0x78, 0x7E, 0x60, 0x3E, 0x66, 0x3C, 0x3C, 0x66, 0x7E, 0x63, 0x63, 0x3C},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x7C, 0x3C, 0x7C, 0x3C, 0x7E, 0x66, 0x66, 0x63, 0x66, 0x66, 0x7E, 0x3C},
    {0x66, 0x66, 0x66, 0x66, 0x18, 0x66, 0x66, 0x63, 0x66, 0x66, 0x06, 0x30},
    {0x66, 0x66, 0x66, 0x60, 0x18, 0x66, 0x66, 0x63, 0x34, 0x66, 0x06, 0x30},
    {0x66, 0x66, 0x66, 0x30, 0x18, 0x66, 0x66, 0x6B, 0x18, 0x66, 0x0C, 0x30},
    {0x7C, 0x66, 0x7C, 0x18, 0x18, 0x66, 0x66, 0x6B, 0x18, 0x3C, 0x18, 0x30},
    {0x60, 0x66, 0x6C, 0x0C, 0x18, 0x66, 0x66, 0x6B, 0x2C, 0x18, 0x30, 0x30},
    {0x60, 0x66, 0x66, 0x06, 0x18, 0x66, 0x66, 0x36, 0x66, 0x18, 0x60, 0x30},
    {0x60, 0x66, 0x66, 0x66, 0x18, 0x66, 0x3C, 0x36, 0x66, 0x18, 0x60, 0x30},
    {0x60, 0x3C, 0x66, 0x3C, 0x18, 0x3C, 0x18, 0x36, 0x66, 0x18, 0x7E, 0x30},
    {0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30},
    {0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x18, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x3C, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x60, 0x3C, 0x66, 0x00, 0x0C, 0x00, 0x60, 0x00, 0x06, 0x00, 0x1E, 0x00},
    {0x60, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x06, 0x00, 0x30, 0x00},
    {0x30, 0x0C, 0x00, 0x00, 0x00, 0x3C, 0x7C, 0x3C, 0x3E, 0x3C, 0x30, 0x3E},
    {0x30, 0x0C, 0x00, 0x00, 0x00, 0x06, 0x66, 0x66, 0x66, 0x66, 0x30, 0x66},
    {0x18, 0x0C, 0x00, 0x00, 0x00, 0x06, 0x66, 0x60, 0x66, 0x66, 0x7E, 0x66},
    {0x18, 0x0C, 0x00, 0x00, 0x00, 0x3E, 0x66, 0x60, 0x66, 0x7E, 0x30, 0x66},
    {0x0C, 0x0C, 0x00, 0x00, 0x00, 0x66, 0x66, 0x60, 0x66, 0x60, 0x30, 0x66},
    {0x0C, 0x0C, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x60, 0x30, 0x66},
    {0x06, 0x0C, 0x00, 0x00, 0x00, 0x3E, 0x7C, 0x3C, 0x3E, 0x3C, 0x30, 0x3E},
    {0x06, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06},
    {0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06},
    {0x00, 0x3C, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x18, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x60, 0x18, 0x0C, 0x60, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x60, 0x00, 0x00, 0x60, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x7C, 0x78, 0x3C, 0x66, 0x18, 0x7E, 0x7C, 0x3C, 0x7C, 0x3E, 0x66, 0x3E},
    {0x66, 0x18, 0x0C, 0x66, 0x18, 0x6B, 0x66, 0x66, 0x66, 0x66, 0x6E, 0x60},
    {0x66, 0x18, 0x0C, 0x6C, 0x18, 0x6B, 0x66, 0x66, 0x66, 0x66, 0x70, 0x60},
    {0x66, 0x18, 0x0C, 0x78, 0x18, 0x6B, 0x66, 0x66, 0x66, 0x66, 0x60, 0x3C},
    {0x66, 0x18, 0x0C, 0x6C, 0x18, 0x6B, 0x66, 0x66, 0x66, 0x66, 0x60, 0x06},
    {0x66, 0x18, 0x0C, 0x66, 0x18, 0x6B, 0x66, 0x66, 0x66, 0x66, 0x60, 0x06},
    {0x66, 0x7E, 0x0C, 0x66, 0x7E, 0x63, 0x66, 0x3C, 0x7C, 0x3E, 0x60, 0x7C},
    {0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x06, 0x00, 0x00},
    {0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x06, 0x00, 0x00},
    {0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x06, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x18, 0x30, 0x71, 0x7E},
    {0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0xDB, 0x7E},
    {0x7E, 0x66, 0x66, 0x63, 0x66, 0x66, 0x7E, 0x18, 0x18, 0x18, 0x8E, 0x7E},
    {0x30, 0x66, 0x66, 0x6B, 0x66, 0x66, 0x06, 0x18, 0x18, 0x18, 0x00, 0x7E},
    {0x30, 0x66, 0x66, 0x6B, 0x3C, 0x66, 0x0C, 0x30, 0x18, 0x0C, 0x00, 0x7E},
    {0x30, 0x66, 0x66, 0x6B, 0x18, 0x66, 0x18, 0x60, 0x18, 0x06, 0x00, 0x7E},
    {0x30, 0x66, 0x66, 0x6B, 0x3C, 0x66, 0x30, 0x30, 0x18, 0x0C, 0x00, 0x7E},
    {0x30, 0x66, 0x3C, 0x36, 0x66, 0x66, 0x60, 0x18, 0x18, 0x18, 0x00, 0x7E},
    {0x1E, 0x3E, 0x18, 0x36, 0x66, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x00, 0x7E},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x18, 0x18, 0x18, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x0C, 0x18, 0x30, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
};

//******************************************************************************
//
// Function:
//
//     CreateFontMap
//
// Description:
//
//     Create a texture and populate it with font information to be used to
//     output text.  Build a texture coordinate table containing the positions
//     of characters in the font map.
//
// Arguments:
//
//     LPDIRECT3DDEVICE8        - Pointer to the device object
//
//     D3DFORMAT fmt            - Format of the texture
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CreateFontMap(LPDIRECT3DDEVICE8 pDevice, D3DFORMAT fmt) {

    D3DLOCKED_RECT  d3dlr;
    UINT            i, j;
    float           fU, fV;
    HRESULT         hr;
#ifdef UNDER_XBOX
    Swizzler        swz(128, 128, 1);
#endif

    if (!pDevice) {
        return FALSE;
    }

    if (!fmt) {
        fmt = D3DFMT_A4R4G4B4;
    }

    // Verify the current device supports the given format
    hr = CheckCurrentDeviceFormat(pDevice, 0, D3DRTYPE_TEXTURE, fmt);
    if (FAILED(hr)) {
        if (hr != D3DERR_NOTAVAILABLE) {
            ResultFailed(hr, TEXT("IDirect3D8::CheckDeviceFormats"));
        }
        return NULL;
    }

    // Create the text map texture
    hr = pDevice->CreateTexture(128, 128, 1, 0, 
                                    fmt, POOL_DEFAULT, &g_pd3dtFontMap);
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DDevice8::CreateMipMap"));
        return NULL;
    }

    // Lock the texture
    hr = g_pd3dtFontMap->LockRect(0, &d3dlr, NULL, 0);
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DMipMap8::LockRect"));
        ReleaseFontMap();
        return FALSE;
    }

#ifdef UNDER_XBOX
    swz.SetU(0);
    swz.SetV(0);
#endif

    if (FormatToBitDepth(fmt) == 16) {

        WORD    wBlack = 0;
        WORD    wWhite = 0xFFFF;
        LPWORD  pwPixel;
        DWORD   dwPitch;
        UINT    i, j;

        pwPixel = (LPWORD)d3dlr.pBits;

        dwPitch = d3dlr.Pitch >> 1;

#ifdef UNDER_XBOX
        if (!XGIsSwizzledFormat(fmt)) {
#endif

            for (i = 0; i < 128; i++) {

                for (j = 0; j < 128; j++) {

                    if (i < 120 && j < 96 && 
                        (g_bFontPixels[i][j/8] & (0x1 << (7-j%8))))
                    {
                        pwPixel[j] = wWhite;
                    }
                    else {
                        pwPixel[j] = wBlack;
                    }
                }

                pwPixel += dwPitch;
            }

#ifdef UNDER_XBOX

        }
        else {

            for (i = 0; i < 128; i++, swz.IncV()) {

                for (j = 0; j < 128; j++, swz.IncU()) {

                    if (i < 120 && j < 96 && 
                        (g_bFontPixels[i][j/8] & (0x1 << (7-j%8))))
                    {
                        pwPixel[swz.Get2D()] = wWhite;
                    }
                    else {
                        pwPixel[swz.Get2D()] = wBlack;
                    }
                }
            }
        }
#endif

    }

    else if (FormatToBitDepth(fmt) == 32) {

        DWORD   dwBlack = 0;
        DWORD   dwWhite = 0xFFFFFFFF;
        LPDWORD pdwPixel;
        DWORD   dwPitch;
        UINT    i, j;

        pdwPixel = (LPDWORD)d3dlr.pBits;

        dwPitch = d3dlr.Pitch >> 2;

#ifdef UNDER_XBOX
        if (!XGIsSwizzledFormat(fmt)) {
#endif

            for (i = 0; i < 128; i++) {

                for (j = 0; j < 128; j++) {

                    if (i < 120 && j < 96 && 
                        (g_bFontPixels[i][j/8] & (0x1 << (7-j%8))))
                    {
                        pdwPixel[j] = dwWhite;
                    }
                    else {
                        pdwPixel[j] = dwBlack;
                    }
                }

                pdwPixel += dwPitch;
            }

#ifdef UNDER_XBOX

        }
        else {

            for (i = 0; i < 128; i++, swz.IncV()) {

                for (j = 0; j < 128; j++, swz.IncU()) {

                    if (i < 120 && j < 96 && 
                        (g_bFontPixels[i][j/8] & (0x1 << (7-j%8))))
                    {
                        pdwPixel[swz.Get2D()] = dwWhite;
                    }
                    else {
                        pdwPixel[swz.Get2D()] = dwBlack;
                    }
                }
            }
        }
#endif
    }

    else {

        return FALSE;
    }

    // Unlock the texture
    hr = g_pd3dtFontMap->UnlockRect(0);
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DMipMap8::UnlockRect"));
        ReleaseFontMap();
        return FALSE;
    }

    // Build the texture coordinate table
    for (i = 0, fV = 0.0f; i < 8; i++, fV += FONT_TCOORD_HEIGHT) {

        for (j = 0, fU = 0.0f; j < 12; j++, fU += FONT_TCOORD_WIDTH) {

            g_ptcFont[i*12+j].u = fU + 0.00390625f; // add a half texel bias
            g_ptcFont[i*12+j].v = fV - 0.00390625f; // add a half texel bias
        }
    }

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ReleaseFontMap
//
// Description:
//
//     Release the font texture map.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void ReleaseFontMap() {

    if (g_pd3dtFontMap) {
        g_pd3dtFontMap->Release();
        g_pd3dtFontMap = NULL;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dbase\input.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    input.h

Author:

    Matt Bronder

Description:

    DirectInput initialization routines.

*******************************************************************************/

#ifndef __INPUT_H__
#define __INPUT_H__

//******************************************************************************
// Preprocessor definitions
//******************************************************************************

#define NUM_JOYSTICK_BUTTONS     17

#define JOYBUTTON_X              0  // Analog
#define JOYBUTTON_Y              1  // Analog
#define JOYBUTTON_WHITE          2  // Analog
#define JOYBUTTON_A              3  // Analog
#define JOYBUTTON_B              4  // Analog
#define JOYBUTTON_BLACK          5  // Analog
#define JOYBUTTON_LTRIG          6  // Analog
#define JOYBUTTON_RTRIG          7  // Analog
#define JOYBUTTON_LSTICK         9  // Digital
#define JOYBUTTON_RSTICK         10 // Digital
#define JOYBUTTON_UP             11 // Digital
#define JOYBUTTON_DOWN           12 // Digital
#define JOYBUTTON_LEFT           13 // Digital
#define JOYBUTTON_RIGHT          14 // Digital
#define JOYBUTTON_BACK           15 // Digital
#define JOYBUTTON_START          16 // Digital

//******************************************************************************
// Macros
//******************************************************************************

#define BUTTON_PRESSED(joystate, button) \
                                (joystate.buttons[button] & 0x80)

#define BUTTON_CHANGED(joycurrent, joylast, button) \
                                ((joycurrent.buttons[button] & 0x80) != (joylast.buttons[button] & 0x80))

//******************************************************************************
// Data types
//******************************************************************************

typedef struct _JOYSTATE {
    float                       f1X; // Analog joystick 1 (left joystick)
    float                       f1Y;
    float                       f2X; // Analog joystick 2 (right joystick)
    float                       f2Y;
    BYTE                        buttons[NUM_JOYSTICK_BUTTONS];
} JOYSTATE, *PJOYSTATE;

//******************************************************************************
// Function prototypes
//******************************************************************************

BOOL                            CreateInput(HWND hWnd);
void                            ReleaseInput(void);
BOOL                            GetJoystickState(PJOYSTATE pjs);

#endif //__INPUT_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dbase\fontmap.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    fontmap.h

Author:

    Matt Bronder

Description:

    Functions for creating and indexing into a font texture.

*******************************************************************************/

#ifndef __FONTMAP_H__
#define __FONTMAP_H__

//******************************************************************************
// Preprocessor definitions
//******************************************************************************

#define FONT_TCOORD_WIDTH   0.0625f
#define FONT_TCOORD_HEIGHT  0.1171875f

//******************************************************************************
// Macros
//******************************************************************************

#define CHAR_TO_TCOORD(c)  (&g_ptcFont[(c < ' ' || c > '~') ? (' ') : (c - ' ')])

//******************************************************************************
// Globals
//******************************************************************************

extern LPDIRECT3DTEXTURE8   g_pd3dtFontMap;
extern TCOORD2              g_ptcFont[96];

//******************************************************************************
// Function prototypes
//******************************************************************************

BOOL                        CreateFontMap(LPDIRECT3DDEVICE8 pDevice, D3DFORMAT fmt = D3DFMT_A1R5G5B5);
void                        ReleaseFontMap();

#endif //__FONTMAP_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dbase\mesh.h ===
/*******************************************************************************

Copyright (c) 1998 Microsoft Corporation.  All rights reserved.

File Name:

    mesh.h

Description:

    Direct3D mesh routines.

*******************************************************************************/

#ifndef __MESH_H__
#define __MESH_H__

//******************************************************************************
// Structures
//******************************************************************************

typedef struct _MESH {
    PVERTEX         prVertices;
    UINT            uNumVertices;
    LPWORD          pwIndices;
    UINT            uNumIndices;
} MESH, *PMESH;

//******************************************************************************
// Function prototypes
//******************************************************************************

BOOL                CreateMesh(LPCTSTR szMesh, PMESH pmesh);
void                ReleaseMesh(PMESH pmesh);

#endif //__MESH_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dbase\light.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    light.h

Author:

    Matt Bronder

Description:

    Direct3D lighting routines.

*******************************************************************************/

#ifndef __LIGHT_H__
#define __LIGHT_H__

//##HACK: Remove this when d3d8 starts defining it again
#ifndef D3DLIGHT_RANGE_MAX
#define D3DLIGHT_RANGE_MAX          ((float)sqrt(FLT_MAX))
#endif

//******************************************************************************
// Function prototypes
//******************************************************************************

BOOL                SetDirectionalLight(LPDIRECT3DDEVICE8 pDevice, DWORD dwIndex,
                                    D3DXVECTOR3 vDir, D3DCOLOR c = 0xFFFFFF);
void                SetDirectionalLight(D3DLIGHT8* plight, 
                                    D3DXVECTOR3 vDir, D3DCOLOR c = 0xFFFFFF);
BOOL                SetPointLight(LPDIRECT3DDEVICE8 pDevice, DWORD dwIndex,
                                    D3DXVECTOR3 vPos, D3DCOLOR c = 0xFFFFFF, 
                                    float fRange = D3DLIGHT_RANGE_MAX, 
                                    float fAttenuation0 = 1.0f, 
                                    float fAttenuation1 = 0.0f, 
                                    float fAttenuation2 = 0.0f);
void                SetPointLight(D3DLIGHT8* plight, 
                                    D3DXVECTOR3 vPos, D3DCOLOR c = 0xFFFFFF, 
                                    float fRange = D3DLIGHT_RANGE_MAX, 
                                    float fAttenuation0 = 1.0f, 
                                    float fAttenuation1 = 0.0f, 
                                    float fAttenuation2 = 0.0f);
BOOL                SetSpotLight(LPDIRECT3DDEVICE8 pDevice, DWORD dwIndex,
                                    D3DXVECTOR3 vPos, D3DXVECTOR3 vDir, 
                                    D3DCOLOR c = 0xFFFFFF, 
                                    float fRange = D3DLIGHT_RANGE_MAX, 
                                    float fFalloff = 1.0f, 
                                    float fAttenuation0 = 1.0f, 
                                    float fAttenuation1 = 0.0f, 
                                    float fAttenuation2 = 0.0f, 
                                    float fTheta = 0.523598f, 
                                    float fPhi = 0.785397f);
void                SetSpotLight(D3DLIGHT8* plight, 
                                    D3DXVECTOR3 vPos, D3DXVECTOR3 vDir, 
                                    D3DCOLOR c = 0xFFFFFF, 
                                    float fRange = D3DLIGHT_RANGE_MAX, 
                                    float fFalloff = 1.0f, 
                                    float fAttenuation0 = 1.0f, 
                                    float fAttenuation1 = 0.0f, 
                                    float fAttenuation2 = 0.0f, 
                                    float fTheta = 0.523598f, 
                                    float fPhi = 0.785397f);
BOOL                SetLight(LPDIRECT3DDEVICE8 pDevice, DWORD dwIndex,
                                    D3DLIGHTTYPE d3dlt,
                                    D3DXVECTOR3 vPos, D3DXVECTOR3 vDir, 
                                    D3DCOLOR cDiffuse = 0xFFFFFFFF, 
                                    D3DCOLOR cSpecular = 0xFFFFFFFF,
                                    D3DCOLOR cAmbient = 0xFFFFFFFF,
                                    float fRange = D3DLIGHT_RANGE_MAX, 
                                    float fFalloff = 1.0f, 
                                    float fAttenuation0 = 1.0f, 
                                    float fAttenuation1 = 0.0f, 
                                    float fAttenuation2 = 0.0f, 
                                    float fTheta = 0.523598f, 
                                    float fPhi = 0.785397f);
void                SetLight(D3DLIGHT8* plight, 
                                    D3DLIGHTTYPE d3dlt,
                                    D3DXVECTOR3 vPos, D3DXVECTOR3 vDir, 
                                    D3DCOLOR cDiffuse = 0xFFFFFFFF, 
                                    D3DCOLOR cSpecular = 0xFFFFFFFF,
                                    D3DCOLOR cAmbient = 0xFFFFFFFF,
                                    float fRange = D3DLIGHT_RANGE_MAX, 
                                    float fFalloff = 1.0f, 
                                    float fAttenuation0 = 1.0f, 
                                    float fAttenuation1 = 0.0f, 
                                    float fAttenuation2 = 0.0f, 
                                    float fTheta = 0.523598f, 
                                    float fPhi = 0.785397f);

void                SetMaterial(D3DMATERIAL8* pmaterial,
                                    D3DCOLOR cDiffuse = 0xFFFFFFFF, 
                                    D3DCOLOR cAmbient = 0xFF595959,
                                    D3DCOLOR cSpecular = 0xFF404040, 
                                    D3DCOLOR cEmissive = 0xFF000000,
                                    float fPower = 20.0f);
void                SetMaterial(D3DMATERIAL8* pmaterial,
                                    D3DXVECTOR4 vDiffuse = D3DXVECTOR4(1.0f, 1.0f, 1.0f, 1.0f), 
                                    D3DXVECTOR4 vAmbient = D3DXVECTOR4(0.35f, 0.35f, 0.35f, 1.0f),
                                    D3DXVECTOR4 vSpecular = D3DXVECTOR4(0.25f, 0.25f, 0.25f, 1.0f),
                                    D3DXVECTOR4 vEmissive = D3DXVECTOR4(0.0f, 0.0f, 0.0f, 0.0f),
                                    float fPower = 20.0f);
BOOL                SetMaterial(LPDIRECT3DDEVICE8 pDevice,
                                    D3DCOLOR cDiffuse = 0xFFFFFFFF, 
                                    D3DCOLOR cAmbient = 0xFF595959,
                                    D3DCOLOR cSpecular = 0xFF404040,
                                    D3DCOLOR cEmissive = 0xFF000000,
                                    float fPower = 20.0f);
BOOL                SetMaterial(LPDIRECT3DDEVICE8 pDevice,
                                    D3DXVECTOR4 vDiffuse = D3DXVECTOR4(1.0f, 1.0f, 1.0f, 1.0f), 
                                    D3DXVECTOR4 vAmbient = D3DXVECTOR4(0.35f, 0.35f, 0.35f, 1.0f),
                                    D3DXVECTOR4 vSpecular = D3DXVECTOR4(0.25f, 0.25f, 0.25f, 1.0f),
                                    D3DXVECTOR4 vEmissive = D3DXVECTOR4(0.0f, 0.0f, 0.0f, 0.0f),
                                    float fPower = 20.0f);
void                SetMaterialTranslucency(D3DMATERIAL8* pmaterial, float fAlpha);
BOOL                SetMaterialTranslucency(LPDIRECT3DDEVICE8 pDevice, float fAlpha);

#ifndef UNDER_XBOX
BOOL                SetVertexFog(LPDIRECT3DDEVICE8 pDevice, D3DCOLOR c, 
                                    float fStart, float fEnd, 
                                    float fDensity, D3DFOGMODE d3dfm = D3DFOG_LINEAR);
#endif // !UNDER_XBOX
BOOL                SetPixelFog(LPDIRECT3DDEVICE8 pDevice, D3DCOLOR c, 
                                    float fStart, float fEnd, 
                                    float fDensity, D3DFOGMODE d3dfm = D3DFOG_LINEAR);

#endif //__LIGHT_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dbase\mesh.cpp ===
/*******************************************************************************

Copyright (c) 1998 Microsoft Corporation.  All rights reserved.

File Name:

    mesh.cpp

Description:

    Direct3D mesh routines.

*******************************************************************************/

#include "d3dbase.h"

//******************************************************************************
// Mesh functions
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     CreateMesh
//
// Description:
//
//     Create vertex and index geometry for use with DrawIndexedPrimitve from
//     a given .xdg file or resources.
//
// Arguments:
//
//     LPCTSTR szMesh                       - File or resource name of the 
//                                            .xdg file to create the mesh 
//                                            from
//
//     PMESH pmesh (Out)                    - Structure to be initialized
//                                            with the geometry of the mesh
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CreateMesh(LPCTSTR szMesh, PMESH pmesh) {

    MESH    mesh;
    LPBYTE  pData;
    DWORD   dwSize;

    if (!pmesh) {
        return FALSE;
    }

    memset(pmesh, 0, sizeof(MESH));

    if (LoadResourceFile(szMesh, (LPVOID*)&pData, &dwSize)) {

        // Get the number of vertices
        memcpy(&(mesh.uNumVertices), pData, sizeof(DWORD));
        pData += sizeof(DWORD);

        // Get the vertices
        mesh.prVertices = (PVERTEX)MemAlloc32(mesh.uNumVertices * 
                                                  sizeof(VERTEX));
        if (!mesh.prVertices) {
            UnloadResourceFile(szMesh);
            return FALSE;
        }

        memcpy(mesh.prVertices, pData, mesh.uNumVertices * sizeof(VERTEX));
        pData += (mesh.uNumVertices * sizeof(VERTEX));

        // Get the number of indices
        memcpy(&(mesh.uNumIndices), pData, sizeof(DWORD));
        pData += sizeof(DWORD);

        // Get the indices
        mesh.pwIndices = (LPWORD)MemAlloc32(mesh.uNumIndices * sizeof(WORD));
        if (!mesh.pwIndices) {
            MemFree32(mesh.prVertices);
            UnloadResourceFile(szMesh);
            return FALSE;
        }

        memcpy(mesh.pwIndices, pData, mesh.uNumIndices * sizeof(WORD));

        UnloadResourceFile(szMesh);
    }
    else {

        // The mesh is a file
        DWORD   dwRead;
        HANDLE  hFile;
#ifdef UNDER_XBOX
        char    aszMesh[MAX_PATH];

        wcstombs(aszMesh, szMesh, MAX_PATH);
        hFile = CreateFile(aszMesh, GENERIC_READ, 0, NULL, OPEN_EXISTING, 
                                  FILE_ATTRIBUTE_NORMAL, NULL);
#else
        hFile = CreateFile(szMesh, GENERIC_READ, 0, NULL, OPEN_EXISTING, 
                                  FILE_ATTRIBUTE_NORMAL, NULL);
#endif // !UNDER_XBOX

        if (hFile == INVALID_HANDLE_VALUE) {
            DebugString(TEXT("Mesh %s was not found"), szMesh);
            return FALSE;
        }

        // Get the number of vertices
        if (!ReadFile(hFile, &(mesh.uNumVertices), sizeof(DWORD), &dwRead, NULL) 
            || dwRead != sizeof(DWORD)) 
        {
            CloseHandle(hFile);
            return FALSE;
        }

        // Get the vertices
        mesh.prVertices = (PVERTEX)MemAlloc32(mesh.uNumVertices * 
                                                  sizeof(VERTEX));
        if (!mesh.prVertices) {
            CloseHandle(hFile);
            return FALSE;
        }

        if (!ReadFile(hFile, mesh.prVertices, 
            mesh.uNumVertices * sizeof(VERTEX), &dwRead, NULL) 
            || dwRead != mesh.uNumVertices * sizeof(VERTEX)) 
        {
            MemFree32(mesh.prVertices);
            CloseHandle(hFile);
            return FALSE;
        }

        // Get the number of indices
        if (!ReadFile(hFile, &(mesh.uNumIndices), sizeof(DWORD), &dwRead, NULL) 
            || dwRead != sizeof(DWORD)) 
        {
            MemFree32(mesh.prVertices);
            CloseHandle(hFile);
            return FALSE;
        }

        // Get the indices
        mesh.pwIndices = (LPWORD)MemAlloc32(mesh.uNumIndices * sizeof(WORD));
        if (!mesh.pwIndices) {
            MemFree32(mesh.prVertices);
            CloseHandle(hFile);
            return FALSE;
        }

        if (!ReadFile(hFile, mesh.pwIndices, 
            mesh.uNumIndices * sizeof(WORD), &dwRead, NULL) 
            || dwRead != mesh.uNumIndices * sizeof(WORD)) 
        {
            MemFree32(mesh.prVertices);
            MemFree32(mesh.pwIndices);
            CloseHandle(hFile);
            return FALSE;
        }

        CloseHandle(hFile);
    }

    memcpy(pmesh, &mesh, sizeof(MESH));
    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ReleaseMesh
//
// Description:
//
//     Release the allocated vertex and index geometry of a created mesh.
//
// Arguments:
//
//     PMESH pmesh                          - Pointer to the mesh structure
//                                            to release
//
// Return Value:
//
//     None.
//
//******************************************************************************
void ReleaseMesh(PMESH pmesh) {

    if (pmesh) {
        if (pmesh->prVertices) {
            MemFree32(pmesh->prVertices);
        }
        if (pmesh->pwIndices) {
            MemFree32(pmesh->pwIndices);
        }
    }
    memset(pmesh, 0, sizeof(MESH));
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dbase\light.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    light.cpp

Author:

    Matt Bronder

Description:

    Direct3D lighting routines.

*******************************************************************************/

#include "d3dbase.h"

//******************************************************************************
// Light functions
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     SetDirectionalLight
//
// Description:
//
//     Set a directional light using the given light data.
//
// Arguments:
//
//     LPDIRECT3DDEVICE8 pDevice    - Pointer to the device object
//
//     DWORD dwIndex                - Index of the light to set
//
//     D3DXVECTOR3 vDir             - Direction of the light
//
//     D3DCOLOR c (Optional)        - Color of the light
//
// Return Value:
//
//     A pointer to the created IDirect3DLight object on success,
//     NULL on failure.
//
//******************************************************************************
BOOL SetDirectionalLight(LPDIRECT3DDEVICE8 pDevice, DWORD dwIndex, D3DXVECTOR3 vDir, D3DCOLOR c) {

    return SetLight(pDevice, dwIndex, D3DLIGHT_DIRECTIONAL, D3DXVECTOR3(0.0f, 0.0f, 0.0f), 
                       vDir, c, c, c, D3DLIGHT_RANGE_MAX, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f);
}

//******************************************************************************
//
// Function:
//
//     SetDirectionalLight
//
// Description:
//
//     Set a directional light using the given light data.
//
// Arguments:
//
//     D3DLIGHT8* plight            - Pointer to the light to set
//
//     D3DXVECTOR3 vDir             - Direction of the light
//
//     D3DCOLOR c (Optional)        - Color of the light
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
void SetDirectionalLight(D3DLIGHT8* plight, D3DXVECTOR3 vDir, D3DCOLOR c) {

    SetLight(plight, D3DLIGHT_DIRECTIONAL, D3DXVECTOR3(0.0f, 0.0f, 0.0f), 
                       vDir, c, c, c, D3DLIGHT_RANGE_MAX, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f,
                       0.0f);
}

//******************************************************************************
//
// Function:
//
//     SetPointLight
//
// Description:
//
//     Set a point light using the given light data.
//
// Arguments:
//
//     LPDIRECT3DDEVICE8 pDevice    - Pointer to the device object
//
//     DWORD dwIndex                - Index of the light to set
//
//     D3DXVECTOR3 vPos             - Position of the light
//
//     D3DCOLOR c (Optional)        - Color of the light
//
//     float fRange (Optional)      - Range of the light
//
//     float fAttenuation0          - Change in the light's intensity
//              (Optional)
//
//     float fAttenuation1          - Change in the light's intensity
//              (Optional)
//
//     float fAttenuation2          - Change in the light's intensity
//              (Optional)
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL SetPointLight(LPDIRECT3DDEVICE8 pDevice, DWORD dwIndex, D3DXVECTOR3 vPos, 
                                 D3DCOLOR c, float fRange, 
                                 float fAttenuation0, float fAttenuation1, 
                                 float fAttenuation2)
{
    return SetLight(pDevice, dwIndex, D3DLIGHT_POINT, vPos, D3DXVECTOR3(0.0f, 0.0f, 0.0f), c, c, c,
                       fRange, 1.0f, fAttenuation0, fAttenuation1, fAttenuation2, 
                       0.0f, 0.0f);
}

//******************************************************************************
//
// Function:
//
//     SetPointLight
//
// Description:
//
//     Set a point light using the given light data.
//
// Arguments:
//
//     LPDIRECT3DDEVICE8 pDevice    - Pointer to the device object
//
//     D3DXVECTOR3 vPos             - Position of the light
//
//     D3DCOLOR c (Optional)        - Color of the light
//
//     float fRange (Optional)      - Range of the light
//
//     float fAttenuation0          - Change in the light's intensity
//              (Optional)
//
//     float fAttenuation1          - Change in the light's intensity
//              (Optional)
//
//     float fAttenuation2          - Change in the light's intensity
//              (Optional)
//
// Return Value:
//
//     None.
//
//******************************************************************************
void SetPointLight(D3DLIGHT8* plight, D3DXVECTOR3 vPos, 
                                 D3DCOLOR c, float fRange, 
                                 float fAttenuation0, float fAttenuation1, 
                                 float fAttenuation2)
{
    SetLight(plight, D3DLIGHT_POINT, vPos, D3DXVECTOR3(0.0f, 0.0f, 0.0f), c, c, c,
                       fRange, 1.0f, fAttenuation0, fAttenuation1, fAttenuation2, 
                       0.0f, 0.0f);
}

//******************************************************************************
//
// Function:
//
//     SetSpotLight
//
// Description:
//
//     Set a spot light using the given light data.
//
// Arguments:
//
//     LPDIRECT3DDEVICE8 pDevice    - Pointer to the device object
//
//     DWORD dwIndex                - Index of the light to set
//
//     D3DXVECTOR3 vPos             - Position of the light
//
//     D3DXVECTOR3 vDir             - Direction of the light
//
//     D3DCOLOR c (Optional)        - Color of the light
//
//     float fRange (Optional)      - Range of the light
//
//     float fFalloff (Optional)    - Falloff of a spotlight's penumbra
//
//     float fAttenuation0          - Change in the light's intensity
//              (Optional)
//
//     float fAttenuation1          - Change in the light's intensity
//              (Optional)
//
//     float fAttenuation2          - Change in the light's intensity
//              (Optional)
//
//     float fTheta (Optional)      - Angle of a spotlight's umbra
//
//     float fPhi (Optional)        - Angle of a spotlight's penumbra
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL SetSpotLight(LPDIRECT3DDEVICE8 pDevice, DWORD dwIndex, D3DXVECTOR3 vPos, 
                                D3DXVECTOR3 vDir, D3DCOLOR c, float fRange, 
                                float fFalloff, float fAttenuation0, 
                                float fAttenuation1, float fAttenuation2, 
                                float fTheta, float fPhi)
{
    return SetLight(pDevice, dwIndex, D3DLIGHT_SPOT, vPos, vDir, c, c, c,
                       fRange, fFalloff, fAttenuation0, fAttenuation1, 
                       fAttenuation2, fTheta, fPhi);
}

//******************************************************************************
//
// Function:
//
//     SetSpotLight
//
// Description:
//
//     Set a spot light using the given light data.
//
// Arguments:
//
//     D3DLIGHT8* plight            - Pointer to the light to set
//
//     D3DXVECTOR3 vPos             - Position of the light
//
//     D3DXVECTOR3 vDir             - Direction of the light
//
//     D3DCOLOR c (Optional)        - Color of the light
//
//     float fRange (Optional)      - Range of the light
//
//     float fFalloff (Optional)    - Falloff of a spotlight's penumbra
//
//     float fAttenuation0          - Change in the light's intensity
//              (Optional)
//
//     float fAttenuation1          - Change in the light's intensity
//              (Optional)
//
//     float fAttenuation2          - Change in the light's intensity
//              (Optional)
//
//     float fTheta (Optional)      - Angle of a spotlight's umbra
//
//     float fPhi (Optional)        - Angle of a spotlight's penumbra
//
// Return Value:
//
//     None.
//
//******************************************************************************
void SetSpotLight(D3DLIGHT8* plight, D3DXVECTOR3 vPos, 
                                D3DXVECTOR3 vDir, D3DCOLOR c, float fRange, 
                                float fFalloff, float fAttenuation0, 
                                float fAttenuation1, float fAttenuation2, 
                                float fTheta, float fPhi)
{
    SetLight(plight, D3DLIGHT_SPOT, vPos, vDir, c, c, c,
                       fRange, fFalloff, fAttenuation0, fAttenuation1, 
                       fAttenuation2, fTheta, fPhi);
}

//******************************************************************************
//
// Function:
//
//     SetLight
//
// Description:
//
//     Set a light using the given light data.
//
// Arguments:
//
//     LPDIRECT3DDEVICE8 pDevice    - Pointer to the device object
//
//     DWORD dwIndex                - Index of the light to set
//
//     D3DLIGHTTYPE d3dlt           - Type of light to Set
//
//     D3DXVECTOR3 vPos             - Position of the light
//
//     D3DXVECTOR3 vDir             - Direction of the light
//
//     D3DCOLOR cDiffuse (Optional) - Diffuse color of the light
//
//     D3DCOLOR cSpecular(Optional) - Specular color of the light
//
//     D3DCOLOR cAmbient (Optional) - Ambient color of the light
//
//     float fRange (Optional)      - Range of the light
//
//     float fFalloff (Optional)    - Falloff of a spotlight's penumbra
//
//     float fAttenuation0          - Change in the light's intensity
//              (Optional)
//
//     float fAttenuation1          - Change in the light's intensity
//              (Optional)
//
//     float fAttenuation2          - Change in the light's intensity
//              (Optional)
//
//     float fTheta (Optional)      - Angle of a spotlight's umbra
//
//     float fPhi (Optional)        - Angle of a spotlight's penumbra
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL SetLight(LPDIRECT3DDEVICE8 pDevice, DWORD dwIndex, D3DLIGHTTYPE d3dlt,
                             D3DXVECTOR3 vPos, D3DXVECTOR3 vDir, 
                             D3DCOLOR cDiffuse, D3DCOLOR cSpecular,
                             D3DCOLOR cAmbient,
                             float fRange, float fFalloff, 
                             float fAttenuation0, float fAttenuation1, 
                             float fAttenuation2, float fTheta, 
                             float fPhi)
{
    D3DLIGHT8   light;
    HRESULT     hr;

    // Parameter validation
    if (!pDevice) {
        return NULL;
    }

    // Initialize the light
    SetLight(&light, d3dlt, vPos, vDir, cDiffuse, cSpecular, cAmbient,
                fRange, fFalloff, fAttenuation0, fAttenuation1,
                fAttenuation2, fTheta, fPhi);

    // Set the light
    hr = pDevice->SetLight(dwIndex, &light);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetLight"))) {
        return FALSE;
    }

    // Turn on the light
    hr = pDevice->LightEnable(dwIndex, TRUE);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::LightEnable"))) {
        return FALSE;
    }

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     SetLight
//
// Description:
//
//     Set a light using the given light data.
//
// Arguments:
//
//     D3DLIGHT8* plight            - Pointer to the light to set
//
//     D3DLIGHTTYPE d3dlt           - Type of light to Set
//
//     D3DXVECTOR3 vPos             - Position of the light
//
//     D3DXVECTOR3 vDir             - Direction of the light
//
//     D3DCOLOR cDiffuse (Optional) - Diffuse color of the light
//
//     D3DCOLOR cSpecular(Optional) - Specular color of the light
//
//     D3DCOLOR cAmbient (Optional) - Ambient color of the light
//
//     float fRange (Optional)      - Range of the light
//
//     float fFalloff (Optional)    - Falloff of a spotlight's penumbra
//
//     float fAttenuation0          - Change in the light's intensity
//              (Optional)
//
//     float fAttenuation1          - Change in the light's intensity
//              (Optional)
//
//     float fAttenuation2          - Change in the light's intensity
//              (Optional)
//
//     float fTheta (Optional)      - Angle of a spotlight's umbra
//
//     float fPhi (Optional)        - Angle of a spotlight's penumbra
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
void SetLight(D3DLIGHT8* plight, D3DLIGHTTYPE d3dlt,
                             D3DXVECTOR3 vPos, D3DXVECTOR3 vDir, 
                             D3DCOLOR cDiffuse, D3DCOLOR cSpecular,
                             D3DCOLOR cAmbient,
                             float fRange, float fFalloff, 
                             float fAttenuation0, float fAttenuation1, 
                             float fAttenuation2, float fTheta, 
                             float fPhi)
{
    if (plight) {

        // Initialize the light data
        memset(plight, 0, sizeof(D3DLIGHT8));
        plight->Type = d3dlt;
        plight->Diffuse.r = (float)RGBA_GETRED(cDiffuse) / 255.0f;
        plight->Diffuse.g = (float)RGBA_GETGREEN(cDiffuse) / 255.0f;
        plight->Diffuse.b = (float)RGBA_GETBLUE(cDiffuse) / 255.0f;
        plight->Diffuse.a = (float)RGBA_GETALPHA(cDiffuse) / 255.0f;
        plight->Specular.r = (float)RGBA_GETRED(cSpecular) / 255.0f;
        plight->Specular.g = (float)RGBA_GETGREEN(cSpecular) / 255.0f;
        plight->Specular.b = (float)RGBA_GETBLUE(cSpecular) / 255.0f;
        plight->Specular.a = (float)RGBA_GETALPHA(cSpecular) / 255.0f;
        plight->Ambient.r = (float)RGBA_GETRED(cAmbient) / 255.0f;
        plight->Ambient.g = (float)RGBA_GETGREEN(cAmbient) / 255.0f;
        plight->Ambient.b = (float)RGBA_GETBLUE(cAmbient) / 255.0f;
        plight->Ambient.a = (float)RGBA_GETALPHA(cAmbient) / 255.0f;
        plight->Position = vPos;
        plight->Direction = vDir;
        plight->Range = fRange;
        plight->Falloff = fFalloff;
        plight->Attenuation0 = fAttenuation0;
        plight->Attenuation1 = fAttenuation1;
        plight->Attenuation2 = fAttenuation2;
        plight->Theta = fTheta;
        plight->Phi = fPhi;
    }
}

//******************************************************************************
// Material functions
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     SetMaterial
//
// Description:
//
//     Initialize a material with the given color information.
//
// Arguments:
//
//     D3DMATERIAL8* pmaterial          - Pointer to the material
//
//     D3DCOLOR cDiffuse (Optional)     - Diffuse component of the material
//
//     D3DCOLOR cAmbient (Optional)     - Ambient component of the material
//
//     D3DCOLOR cSpecular (Optional)    - Specular component of the material
//
//     D3DCOLOR cEmissive (Optional)    - Emissive component of the material
//
//     float fPower (Optional)          - Sharpness of the specular highlights
//
// Return Value:
//
//     None.
//
//******************************************************************************
void SetMaterial(D3DMATERIAL8* pmaterial,
                       D3DCOLOR cDiffuse, D3DCOLOR cAmbient,
                       D3DCOLOR cSpecular, D3DCOLOR cEmissive,
                       float fPower) 
{
    if (pmaterial) {

        // Intialize the material
        memset(pmaterial, 0, sizeof(D3DMATERIAL8));
        pmaterial->Ambient.r = (float)RGBA_GETRED(cAmbient) / 255.0f;
        pmaterial->Ambient.g = (float)RGBA_GETGREEN(cAmbient) / 255.0f;
        pmaterial->Ambient.b = (float)RGBA_GETBLUE(cAmbient) / 255.0f;
        pmaterial->Ambient.a = (float)RGBA_GETALPHA(cAmbient) / 255.0f;
        pmaterial->Diffuse.r = (float)RGBA_GETRED(cDiffuse) / 255.0f;
        pmaterial->Diffuse.g = (float)RGBA_GETGREEN(cDiffuse) / 255.0f;
        pmaterial->Diffuse.b = (float)RGBA_GETBLUE(cDiffuse) / 255.0f;
        pmaterial->Diffuse.a = (float)RGBA_GETALPHA(cDiffuse) / 255.0f;
        pmaterial->Specular.r = (float)RGBA_GETRED(cSpecular) / 255.0f;
        pmaterial->Specular.g = (float)RGBA_GETGREEN(cSpecular) / 255.0f;
        pmaterial->Specular.b = (float)RGBA_GETBLUE(cSpecular) / 255.0f;
        pmaterial->Specular.a = (float)RGBA_GETALPHA(cSpecular) / 255.0f;
        pmaterial->Emissive.r = (float)RGBA_GETRED(cEmissive) / 255.0f;
        pmaterial->Emissive.g = (float)RGBA_GETGREEN(cEmissive) / 255.0f;
        pmaterial->Emissive.b = (float)RGBA_GETBLUE(cEmissive) / 255.0f;
        pmaterial->Emissive.a = (float)RGBA_GETALPHA(cEmissive) / 255.0f;
        pmaterial->Power = fPower;
    }
}

//******************************************************************************
//
// Function:
//
//     SetMaterial
//
// Description:
//
//     Initialize a material with the given color information.
//
// Arguments:
//
//     D3DMATERIAL8* pmaterial          - Pointer to the material
//
//     D3DXVECTOR4 vDiffuse (Optional)  - Diffuse component of the material
//
//     D3DXVECTOR4 vAmbient (Optional)  - Ambient component of the material
//
//     D3DXVECTOR4 vSpecular (Optional) - Specular component of the material
//
//     D3DXVECTOR4 vEmissive (Optional) - Emissive component of the material
//
//     float fPower (Optional)          - Sharpness of the specular highlights
//
// Return Value:
//
//     None.
//
//******************************************************************************
void SetMaterial(D3DMATERIAL8* pmaterial,
                       D3DXVECTOR4 vDiffuse, D3DXVECTOR4 vAmbient,
                       D3DXVECTOR4 vSpecular, D3DXVECTOR4 vEmissive,
                       float fPower) 
{
    if (pmaterial) {

        // Intialize the material
        memset(pmaterial, 0, sizeof(D3DMATERIAL8));
        pmaterial->Ambient.r = vAmbient.x;
        pmaterial->Ambient.g = vAmbient.y;
        pmaterial->Ambient.b = vAmbient.z;
        pmaterial->Ambient.a = vAmbient.w;
        pmaterial->Diffuse.r = vDiffuse.x;
        pmaterial->Diffuse.g = vDiffuse.y;
        pmaterial->Diffuse.b = vDiffuse.z;
        pmaterial->Diffuse.a = vDiffuse.w;
        pmaterial->Specular.r = vSpecular.x;
        pmaterial->Specular.g = vSpecular.y;
        pmaterial->Specular.b = vSpecular.z;
        pmaterial->Specular.a = vSpecular.w;
        pmaterial->Emissive.r = vEmissive.x;
        pmaterial->Emissive.g = vEmissive.y;
        pmaterial->Emissive.b = vEmissive.z;
        pmaterial->Emissive.a = vEmissive.w;
        pmaterial->Power = fPower;
    }
}

//******************************************************************************
//
// Function:
//
//     SetMaterial
//
// Description:
//
//     Set a material in the device.
//
// Arguments:
//
//     LPDIRECT3DDEVICE8 pDevice        - Pointer to the device object
//
//     D3DCOLOR cDiffuse (Optional)     - Diffuse component of the material
//
//     D3DCOLOR cAmbient (Optional)     - Ambient component of the material
//
//     D3DCOLOR cSpecular (Optional)    - Specular component of the material
//
//     D3DCOLOR cEmissive (Optional)    - Emissive component of the material
//
//     float fPower (Optional)          - Sharpness of the specular highlights
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL SetMaterial(LPDIRECT3DDEVICE8 pDevice,
                       D3DCOLOR cDiffuse, D3DCOLOR cAmbient,
                       D3DCOLOR cSpecular, D3DCOLOR cEmissive,
                       float fPower) 
{
    D3DMATERIAL8    material;
    HRESULT         hr;

    if (!pDevice) {
        return FALSE;
    }

    // Intialize the material
    SetMaterial(&material, cDiffuse, cAmbient, cSpecular, cEmissive, fPower);

    // Set the material
    hr = pDevice->SetMaterial(&material);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetMaterial"))) {
        return FALSE;
    }

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     SetMaterial
//
// Description:
//
//     Set a material in the device.
//
// Arguments:
//
//     LPDIRECT3DDEVICE8 pDevice        - Pointer to the device object
//
//     D3DXVECTOR4 vDiffuse (Optional)  - Diffuse component of the material
//
//     D3DXVECTOR4 vAmbient (Optional)  - Ambient component of the material
//
//     D3DXVECTOR4 vSpecular (Optional) - Specular component of the material
//
//     D3DXVECTOR4 vEmissive (Optional) - Emissive component of the material
//
//     float fPower (Optional)          - Sharpness of the specular highlights
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL SetMaterial(LPDIRECT3DDEVICE8 pDevice,
                       D3DXVECTOR4 vDiffuse, D3DXVECTOR4 vAmbient,
                       D3DXVECTOR4 vSpecular, D3DXVECTOR4 vEmissive,
                       float fPower)
{
    D3DMATERIAL8    material;
    HRESULT         hr;

    if (!pDevice) {
        return FALSE;
    }

    // Intialize the material
    SetMaterial(&material, vDiffuse, vAmbient, vSpecular, vEmissive, fPower);

    // Set the material
    hr = pDevice->SetMaterial(&material);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetMaterial"))) {
        return FALSE;
    }

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     SetMaterialTranslucency
//
// Description:
//
//     Set the alpha channel information on a material.
//
// Arguments:
//
//     D3DMATERIAL8* pmaterial              - Material to make translucent
//
//     float fAlpha                         - Translucency value ranging from
//                                            0.0 to 1.0, where 0.0 is 
//                                            transparent and 1.0 is opaque
//
// Return Value:
//
//     None.
//
//******************************************************************************
void SetMaterialTranslucency(D3DMATERIAL8* pmaterial, float fAlpha) {

    if (pmaterial) {

        // Set the alpha information
        pmaterial->Ambient.a = fAlpha;
        pmaterial->Diffuse.a = fAlpha;
        pmaterial->Specular.a = fAlpha;
        pmaterial->Emissive.a = fAlpha;
    }
}

//******************************************************************************
//
// Function:
//
//     SetMaterialTranslucency
//
// Description:
//
//     Set the alpha channel information on a material.
//
// Arguments:
//
//     LPDIRECT3DDEVICE8 pDevice            - Device containing the material to
//                                            make translucent
//
//     float fAlpha                         - Translucency value ranging from
//                                            0.0 to 1.0, where 0.0 is 
//                                            transparent and 1.0 is opaque
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL SetMaterialTranslucency(LPDIRECT3DDEVICE8 pDevice, float fAlpha) {

    D3DMATERIAL8 material;
    HRESULT      hr;

    if (!pDevice) {
        return FALSE;
    }

    // Get the material data
    memset(&material, 0, sizeof(D3DMATERIAL8));
    hr = pDevice->GetMaterial(&material);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::GetMaterial"))) {
        return FALSE;
    }

    // Set the alpha information
    SetMaterialTranslucency(&material, fAlpha);

    // Set the material
    hr = pDevice->SetMaterial(&material);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetMaterial"))) {
        return FALSE;
    }

    return TRUE;
}

// ##TODO: Incorporate settings for z, w, and range based fog

#ifndef UNDER_XBOX

//******************************************************************************
//
// Function:
//
//     SetVertexFog
//
// Description:
//
//     Set the appropriate render states to initialize vertex fog in a
//     scene.
//
// Arguments:
//
//     LPDIRECT3DDEVICE8 pDevice        - Pointer to the device object
//
//     D3DCOLOR c                       - Fog color
//
//     float fStart                     - Distance at which the fog will begin
//
//     float fEnd                       - Distance at which the fog will end
//
//     float fDensity                   - Density of the fog
//
//     D3DFOGMODE d3dfm                 - Fog intensification
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL SetVertexFog(LPDIRECT3DDEVICE8 pDevice, D3DCOLOR c, float fStart, 
                  float fEnd, float fDensity, D3DFOGMODE d3dfm)
{
    D3DCAPS8 d3dcaps;
    HRESULT hr;

    if (!pDevice) {
        return FALSE;
    }

    hr = pDevice->GetDeviceCaps(&d3dcaps);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::GetDeviceCaps"))) {
        return FALSE;
    }

    if (d3dcaps.RasterCaps & D3DPRASTERCAPS_FOGVERTEX) {

        hr = pDevice->SetRenderState(D3DRS_FOGCOLOR, (DWORD)c);
        if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
            return FALSE;
        }

        hr = pDevice->SetRenderState(D3DRS_FOGSTART, *((LPDWORD)&fStart));
        if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
            return FALSE;
        }

        hr = pDevice->SetRenderState(D3DRS_FOGEND, *((LPDWORD)&fEnd));
        if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
            return FALSE;
        }

        hr = pDevice->SetRenderState(D3DRS_FOGDENSITY, *((LPDWORD)&fDensity));
        if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
            return FALSE;
        }

        hr = pDevice->SetRenderState(D3DRS_FOGVERTEXMODE, (DWORD)d3dfm);
        if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
            return FALSE;
        }

        return TRUE;
    }

    else {
        return FALSE;
    }
}

#endif // !UNDER_XBOX

//******************************************************************************
//
// Function:
//
//     SetPixelFog
//
// Description:
//
//     Set the appropriate render states to initialize pixel fog in a
//     scene.
//
// Arguments:
//
//     LPDIRECT3DDEVICE8 pDevice        - Pointer to the device object
//
//     D3DCOLOR c                       - Fog color
//
//     float fStart                     - Distance at which the fog will begin
//
//     float fEnd                       - Distance at which the fog will end
//
//     float fDensity                   - Density of the fog
//
//     D3DFOGMODE d3dfm                 - Fog intensification
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL SetPixelFog(LPDIRECT3DDEVICE8 pDevice, D3DCOLOR c, float fStart, 
                  float fEnd, float fDensity, D3DFOGMODE d3dfm)
{
    D3DCAPS8 d3dcaps;
    HRESULT hr;

    if (!pDevice) {
        return FALSE;
    }

    hr = pDevice->GetDeviceCaps(&d3dcaps);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::GetDeviceCaps"))) {
        return FALSE;
    }

    if (d3dcaps.RasterCaps & D3DPRASTERCAPS_FOGTABLE) {

        hr = pDevice->SetRenderState(D3DRS_FOGCOLOR, (DWORD)c);
        if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
            return FALSE;
        }

        hr = pDevice->SetRenderState(D3DRS_FOGSTART, *((LPDWORD)&fStart));
        if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
            return FALSE;
        }

        hr = pDevice->SetRenderState(D3DRS_FOGEND, *((LPDWORD)&fEnd));
        if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
            return FALSE;
        }

        hr = pDevice->SetRenderState(D3DRS_FOGDENSITY, *((LPDWORD)&fDensity));
        if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
            return FALSE;
        }

        hr = pDevice->SetRenderState(D3DRS_FOGTABLEMODE, (DWORD)d3dfm);
        if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
            return FALSE;
        }

        return TRUE;
    }

    else {
        return FALSE;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dbase\input.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    input.cpp

Author:

    Matt Bronder

Description:

    DirectInput initialization routines.

*******************************************************************************/

#include "d3dbase.h"
#ifndef UNDER_XBOX
#include <dinput.h>
#else
#include <xbox.h>
#endif // UNDER_XBOX

#ifdef UNDER_XBOX
#define DEMO_HACK
#endif // UNDER_XBOX

//******************************************************************************
// Local function prototypes
//******************************************************************************

#ifndef UNDER_XBOX
static LPDIRECTINPUTDEVICE8     CreateInputDevice(int nPort = -1);
#else
static HANDLE                   CreateInputDevice(int nPort = -1);
#endif // UNDER_XBOX

//******************************************************************************
// Globals
//******************************************************************************

#ifndef UNDER_XBOX
static HWND                     g_hWnd = NULL;
LPDIRECTINPUT8                  g_pdi;
LPDIRECTINPUTDEVICE8            g_pdid;
#else
HANDLE                          g_hDevice = NULL;
BOOL                            g_bInitDevices = TRUE;
#endif // UNDER_XBOX


int                             g_nEnumPort;
// Array of joystick button indices, arranged by usage.
BYTE                            g_rgbButtons[NUM_JOYSTICK_BUTTONS];
LONG                            g_lJoyMinX,
                                g_lJoyMaxX,
                                g_lJoyMinY,
                                g_lJoyMaxY;

//******************************************************************************
// Callback functions
//******************************************************************************

#ifndef UNDER_XBOX

//******************************************************************************
//
// Function:
//
//     DIDeviceEnumCallback
//
// Description:
//
//     Enumerate DirectInput devices for a joystick of the given port.  If
//     found, create a DirectInputDevice object using the guid of the device
//     instance, query for the IDirectInputDevice2 interface, and return a 
//     pointer to it through the application-defined context.
//
// Arguments:
//
//     LPCDIDEVICEINSTANCE pdidi    - Description of the device
//
//     LPVOID pvContext (Out)       - Pointer to an IDirectInputDevice2 interface
//
// Return Value:
//
//     DIENUM_CONTINUE to continue the enumeration or DIENUM_STOP to stop it.
//
//     If the enumeration succesfully found a joystick device corresponding to
//     the given port, pvRef will contain a pointer to an IDirectInputDevice2
//     interface on the device.
//
//******************************************************************************
static BOOL CALLBACK DIDeviceEnumCallback(LPCDIDEVICEINSTANCE pdidi, LPVOID pvContext) {

    LPDIRECTINPUTDEVICE8*   pdid8 = (LPDIRECTINPUTDEVICE8*)pvContext;
    HRESULT                 hr;

    if (!g_pdi) {
        return DIENUM_STOP;
    }

    // Since we don't really have the concept of a port, we'll
    // use the port number to decide which enumerated joystick to choose
    // (port 0 will yield the first joystick enumerated, port 1 will yield
    // the second, etc.)
    if (g_nEnumPort > 0) {
        g_nEnumPort--;
        return DIENUM_CONTINUE;
    }

    // Sanity check: Is this device a joystick?
    if (DIDFT_GETTYPE(pdidi->dwDevType) != DI8DEVTYPE_JOYSTICK)
    {
        DebugString(TEXT("Warning: Joystick enumeration callback enumerated ")
                            TEXT("a device not identified as a joystick"));
    }

    // Attempt to create the device
    hr = g_pdi->CreateDevice(pdidi->guidInstance, pdid8, NULL);
    ResultFailed(hr, TEXT("IDirectInput::CreateDevice"));

    return DIENUM_STOP;
}

//******************************************************************************
//
// Function:
//
//     DIObjectsEnumCallback
//
// Description:
//
//     Enumerate the objects (buttons and axes) on a DirectInput device.
//     Store the indices for the objects in a global array according to the
//     usages of the objects.
//
// Arguments:
//
//     LPCDIDEVICEOBJECTINSTANCE pddio  - Description of the object
//
//     LPVOID pvContext                 - Number of buttons enumerated
//
// Return Value:
//
//     DIENUM_CONTINUE to continue the enumeration or DIENUM_STOP to stop it.
//
//******************************************************************************
static BOOL CALLBACK DIObjectsEnumCallback(LPCDIDEVICEOBJECTINSTANCE pddio, 
                                            LPVOID pvContext) {

    UINT* puButtons = (UINT*)pvContext;

    // Store the index in the array, according to its usage.  We can
    // assume that the buttons on a device are enumerated in order,
    // by index.
#ifdef UNDER_CE
    g_rgbButtons[pddio->wUsage - USAGE_FIRST_BUTTON] = (*puButtons)++;
#else
    g_rgbButtons[*puButtons] = (*puButtons)++;
#endif // UNDER_CE

    return DIENUM_CONTINUE;
}

#endif // !UNDER_XBOX

//******************************************************************************
// Initialization functions
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     CreateInput
//
// Description:
//
//     Initialize all DirectInput objects necessary for obtaining joystick input.
//
// Arguments:
//
//     HWND hWnd                - Window handle to be associated with 
//                                DirectInput
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CreateInput(HWND hWnd) {

#ifndef UNDER_XBOX

    HRESULT hr;

    if (!hWnd) {
        return FALSE;
    }

    g_hWnd = hWnd;

#ifndef UNICODE
    hr = DirectInput8Create(GetInstance(), DIRECTINPUT_VERSION, IID_IDirectInput8A, (LPVOID*)&g_pdi, NULL);
#else
    hr = DirectInput8Create(GetInstance(), DIRECTINPUT_VERSION, IID_IDirectInput8W, (LPVOID*)&g_pdi, NULL);
#endif // !UNICODE
    if (ResultFailed(hr, TEXT("DirectInputCreate"))) {
        return FALSE;
    }

    // Create a joystick device using the first port with a joystick plugged in
    g_pdid = CreateInputDevice();

    return TRUE;

#else

    if (g_bInitDevices) {
        XInitDevices(0,NULL);
        g_bInitDevices = FALSE;
    }

    g_hDevice = CreateInputDevice();

    return TRUE;

#endif // UNDER_XBOX
}

#ifndef UNDER_XBOX

//******************************************************************************
//
// Function:
//
//     CreateInputDevice
//
// Description:
//
//     Create a DirectInputDevice joystick object using the given port
//
// Arguments:
//
//     int nPort               - Joystick port to create the device on (a 
//                               negative port number will cause the first
//                               joystick enumerated to be chosen)
//
// Return Value:
//
//     A pointer to the created IDirectInputDevice2 object on success,
//     NULL on failure.
//
//******************************************************************************
static LPDIRECTINPUTDEVICE8 CreateInputDevice(int nPort) {

    LPDIRECTINPUTDEVICE8    pDevice = NULL;
    DIPROPRANGE             dipr;
    UINT                    uNumButtons = 0;
    HRESULT                 hr;

    if (!g_pdi) {
        return NULL;
    }

    g_nEnumPort = nPort;

    hr = g_pdi->EnumDevices(DI8DEVTYPE_JOYSTICK, DIDeviceEnumCallback, 
        (LPVOID)&pDevice, DIEDFL_ATTACHEDONLY);

    if (ResultFailed(hr, TEXT("IDirectInput::EnumDevices"))) {
        return NULL;
    }

    // Return false if the joystick is not currently attached, or no such
    // port exists
    if (!pDevice) {
        return NULL;
    }

    // Enumerate the buttons that are available with the joystick
    hr = pDevice->EnumObjects(DIObjectsEnumCallback, &uNumButtons, DIDFT_BUTTON);
    if (ResultFailed(hr, TEXT("IDirectInputDevice2::EnumObjects"))) {
        pDevice->Release();
        return NULL;
    }

    // Set the translation array
    g_rgbButtons[JOYBUTTON_X] = 0;
    g_rgbButtons[JOYBUTTON_Y] = 1;
    g_rgbButtons[JOYBUTTON_WHITE] = 2;
    g_rgbButtons[JOYBUTTON_A] = 3;
    g_rgbButtons[JOYBUTTON_B] = 4;
    g_rgbButtons[JOYBUTTON_BLACK] = 5;
    g_rgbButtons[JOYBUTTON_LTRIG] = 6; 
    g_rgbButtons[JOYBUTTON_RTRIG] = 7;
    g_rgbButtons[JOYBUTTON_LSTICK] = 8;
    g_rgbButtons[JOYBUTTON_RSTICK] = 9;
    g_rgbButtons[JOYBUTTON_UP] = 12;
    g_rgbButtons[JOYBUTTON_DOWN] = 13;
    g_rgbButtons[JOYBUTTON_LEFT] = 14;
    g_rgbButtons[JOYBUTTON_RIGHT] = 15;
    g_rgbButtons[JOYBUTTON_BACK] = 11;
    g_rgbButtons[JOYBUTTON_START] = 10;

    // Set the data format for the joystick
    hr = pDevice->SetDataFormat(&c_dfDIJoystick);
    if (ResultFailed(hr, TEXT("IDirectInputDevice::SetDataFormat"))) {
        pDevice->Release();
        return NULL;
    }

    // Set the cooperative level
    hr = pDevice->SetCooperativeLevel(g_hWnd, DISCL_EXCLUSIVE 
                                            | DISCL_FOREGROUND);
    if (ResultFailed(hr, TEXT("IDirectInputDevice::SetCooperativeLevel"))) {
        pDevice->Release();
        return NULL;
    }

    // Get the range of the joystick
    memset(&dipr, 0, sizeof(DIPROPRANGE));
    dipr.diph.dwSize = sizeof(DIPROPRANGE);
    dipr.diph.dwHeaderSize = sizeof(dipr.diph);
    dipr.diph.dwObj = DIJOFS_X;
    dipr.diph.dwHow = DIPH_BYOFFSET;

    hr = pDevice->GetProperty(DIPROP_RANGE, (LPDIPROPHEADER)&dipr);
    if (ResultFailed(hr, TEXT("IDirectInputDevice::GetProperty"))) {
        pDevice->Release();
        return NULL;
    }

    g_lJoyMinX = dipr.lMin;
    g_lJoyMaxX = dipr.lMax;

    dipr.diph.dwObj = DIJOFS_Y;

    hr = pDevice->GetProperty(DIPROP_RANGE, (LPDIPROPHEADER)&dipr);
    if (ResultFailed(hr, TEXT("IDirectInputDevice::GetProperty"))) {
        pDevice->Release();
        return NULL;
    }

    g_lJoyMinY = dipr.lMin;
    g_lJoyMaxY = dipr.lMax;

    // Acquire the joystick
    hr = pDevice->Acquire();
    if (ResultFailed(hr, TEXT("IDirectInputDevice::Acquire"))) {
        pDevice->Release();
        return NULL;
    }

    // Initiate a poll to prepare data for the first GetDeviceState call
    hr = pDevice->Poll();
    if (ResultFailed(hr, TEXT("IDirectInputDevice::Acquire"))) {
        pDevice->Release();
        return NULL;
    }

    // We're now connected and ready to go
    return pDevice;
}

#else 

//******************************************************************************
static HANDLE CreateInputDevice(int nPort) {

    XINPUT_POLLING_PARAMETERS   ipp;
    DWORD                       dwInputDevices;
    UINT                        uPorts, i;
    HANDLE                      hDevice = NULL;

    memset(&ipp, 0, sizeof(XINPUT_POLLING_PARAMETERS));
    ipp.fAutoPoll = 0;
    ipp.fInterruptOut = 0; // ##REVIEW: IS THIS THE BEST CHOICE??
    ipp.bInputInterval = 8;
    ipp.bOutputInterval = 8;

    dwInputDevices = XGetDevices(XDEVICE_TYPE_GAMEPAD);
    if (!dwInputDevices) {  // Save time and drop out now if no joysticks are plugged in
        return NULL;
    }

    if (nPort >= 0) {
        hDevice = XInputOpen(XDEVICE_TYPE_GAMEPAD, nPort, 0, &ipp);
    }

    else {

        uPorts = XGetPortCount();

        for (i = 0; i < uPorts; i++) {
            if (dwInputDevices & (1 << i)) {
                hDevice = XInputOpen(XDEVICE_TYPE_GAMEPAD, i, 0, &ipp);
                if (hDevice != NULL) {
                    break;
                }
            }
        }
    }

    if (hDevice != NULL) {
        // Initiate a poll to prepare data for the first GetDeviceState call
        XInputPoll(hDevice);
    }

    return hDevice;
}

#endif // UNDER_XBOX

//******************************************************************************
//
// Function:
//
//     ReleaseInput
//
// Description:
//
//     Release all input objects created by the InitDirectInput function.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void ReleaseInput(void) {

#ifndef UNDER_XBOX

    if (g_pdid) {
        g_pdid->Release();
        g_pdid = NULL;
    }

    if (g_pdi) {
        g_pdi->Release();
        g_pdi = NULL;
    }

#else

    if (g_hDevice != NULL) {
        XInputClose(g_hDevice);
        g_hDevice = NULL;
    }

#endif // UNDER_XBOX
}

//******************************************************************************
//
// Function:
//
//     GetJoystickState
//
// Description:
//
//     Poll the joystick to obtain the state of its buttons and axes.
//
// Arguments:
//
//     LPDIJOYSTATE pdijs       - Pointer to a structure describing the state 
//                                of the joystick
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL GetJoystickState(PJOYSTATE pjs) {

#ifndef UNDER_XBOX

    DIJOYSTATE  dijs;
    static LONG lJoyMaxX = (g_lJoyMaxX - g_lJoyMinX) / 2;
    static LONG lJoyCenterX = g_lJoyMinX + lJoyMaxX;
    static LONG lJoyMaxY = (g_lJoyMaxY - g_lJoyMinY) / 2;
    static LONG lJoyCenterY = g_lJoyMinY + lJoyMaxY;
    UINT        i;
    HRESULT     hr;

    if (!pjs) {
        return FALSE;
    }

    if (!g_pdid) {

        memset(pjs, 0, sizeof(JOYSTATE));

        if (!g_pdi) {
            return FALSE;
        }

#ifdef UNDER_CE
        // Check to see if a joystick has been plugged in since we last checked
        g_pdid = CreateDevice();
        if (g_pdid) {
            g_pdid->GetDeviceState(sizeof(DIJOYSTATE), &dijs);
            g_pdid->Poll();
        }
        return FALSE;
#else
        return FALSE;
#endif // UNDER_CE
    }

    memset(&dijs, 0, sizeof(DIJOYSTATE));

    // Get the joystick data
    hr = g_pdid->GetDeviceState(sizeof(DIJOYSTATE), &dijs);
    if (FAILED(hr)) {
        if (hr == DIERR_UNPLUGGED) {
            // The joystick has been unplugged, delete the device since
            // we'll have to recreate it once the joystick is plugged
            // back in
            g_pdid->Release();
            g_pdid = NULL;
            return GetJoystickState(pjs);
        }
        ResultFailed(hr, TEXT("IDirectInputDevice::GetDeviceState"));
        return FALSE;
    }

    // Update the joystick for next time
    hr = g_pdid->Poll();
    if (hr == DIERR_UNPLUGGED) {
        g_pdid->Release();
        g_pdid = NULL;
        return GetJoystickState(pjs);
    }
    else if (hr == DIERR_INPUTLOST) {
        hr = g_pdid->Acquire();
        if (ResultFailed(hr, TEXT("IDirectInputDevice::Acquire"))) {
            return FALSE;
        }
    }
    else {
        if (ResultFailed(hr, TEXT("IDirectInputDevice::Poll"))) {
            return FALSE;
        }
    }

    // Translate the joystick information
    pjs->f1X = (float)(dijs.lX - lJoyCenterX) / (float)(lJoyMaxX);
    pjs->f1Y = (float)(dijs.lY - lJoyCenterY) / (float)(lJoyMaxY);
    pjs->f2Y = (float)dijs.lRz - (float)0x7F7C;
    if (pjs->f2Y < 0.0f) pjs->f2Y /= (float)0x7F7C;
    else pjs->f2Y /= (float)0x8083;
    for (i = 0; i < NUM_JOYSTICK_BUTTONS; i++) {
        pjs->buttons[i] = dijs.rgbButtons[g_rgbButtons[i]];
    }
    switch (dijs.rgdwPOV[0]) {
        case 0x0:
            pjs->buttons[JOYBUTTON_UP] = 0xFF;
            break;
        case 0x1194:
            pjs->buttons[JOYBUTTON_UP] = 0xFF;
            pjs->buttons[JOYBUTTON_RIGHT] = 0xFF;
            break;
        case 0x2328:
            pjs->buttons[JOYBUTTON_RIGHT] = 0xFF;
            break;
        case 0x34bc:
            pjs->buttons[JOYBUTTON_DOWN] = 0xFF;
            pjs->buttons[JOYBUTTON_RIGHT] = 0xFF;
            break;
        case 0x4650:
            pjs->buttons[JOYBUTTON_DOWN] = 0xFF;
            break;
        case 0x57e4:
            pjs->buttons[JOYBUTTON_LEFT] = 0xFF;
            pjs->buttons[JOYBUTTON_DOWN] = 0xFF;
            break;
        case 0x6978:
            pjs->buttons[JOYBUTTON_LEFT] = 0xFF;
            break;
        case 0x7B0C:
            pjs->buttons[JOYBUTTON_UP] = 0xFF;
            pjs->buttons[JOYBUTTON_LEFT] = 0xFF;
            break;
    }

//##HACK to work around a sidewinder bug where the lX and lY values of
// DIJOYSTATE change for an unmoving joystick after any of the buttons
// have been pressed
//#define FABS(x) (x < 0.0f ? -x : x)
if (FABS(pjs->f1X) < 0.01) pjs->f1X = 0.0f;
if (FABS(pjs->f1Y) < 0.01) pjs->f1Y = 0.0f;
if (FABS(pjs->f2X) < 0.01) pjs->f2X = 0.0f;
if (FABS(pjs->f2Y) < 0.01) pjs->f2Y = 0.0f;

    return TRUE;

#else
    
    XINPUT_STATE istate;
    DWORD        dwResult;

    memset(pjs, 0, sizeof(JOYSTATE));

    if (!g_hDevice) {
        g_hDevice = CreateInputDevice();
        return FALSE;
    }

    dwResult = XInputGetState(g_hDevice, &istate);
    if (dwResult != ERROR_SUCCESS) {
        if (dwResult == ERROR_DEVICE_NOT_CONNECTED) {
            XInputClose(g_hDevice);
            g_hDevice = CreateInputDevice();
        }
        return FALSE;
    }

    XInputPoll(g_hDevice);

    pjs->f1X =  (float)istate.Gamepad.sThumbLX / 32768.0f;
    pjs->f1Y = -(float)istate.Gamepad.sThumbLY / 32768.0f;
    pjs->f2X =  (float)istate.Gamepad.sThumbRX / 32768.0f;
    pjs->f2Y = -(float)istate.Gamepad.sThumbRY / 32768.0f;

    pjs->buttons[JOYBUTTON_X] = istate.Gamepad.bAnalogButtons[XINPUT_GAMEPAD_X];
    pjs->buttons[JOYBUTTON_Y] = istate.Gamepad.bAnalogButtons[XINPUT_GAMEPAD_Y];
    pjs->buttons[JOYBUTTON_WHITE] = istate.Gamepad.bAnalogButtons[XINPUT_GAMEPAD_WHITE];
    pjs->buttons[JOYBUTTON_A] = istate.Gamepad.bAnalogButtons[XINPUT_GAMEPAD_A];
    pjs->buttons[JOYBUTTON_B] = istate.Gamepad.bAnalogButtons[XINPUT_GAMEPAD_B];
    pjs->buttons[JOYBUTTON_BLACK] = istate.Gamepad.bAnalogButtons[XINPUT_GAMEPAD_BLACK];
    pjs->buttons[JOYBUTTON_LTRIG] = istate.Gamepad.bAnalogButtons[XINPUT_GAMEPAD_LEFT_TRIGGER];
    pjs->buttons[JOYBUTTON_RTRIG] = istate.Gamepad.bAnalogButtons[XINPUT_GAMEPAD_RIGHT_TRIGGER];

    if (istate.Gamepad.wButtons & XINPUT_GAMEPAD_LEFT_THUMB) {
        pjs->buttons[JOYBUTTON_LSTICK] = 0xFF;
    }
    if (istate.Gamepad.wButtons & XINPUT_GAMEPAD_RIGHT_THUMB) {
        pjs->buttons[JOYBUTTON_RSTICK] = 0xFF;
    }
    if (istate.Gamepad.wButtons & XINPUT_GAMEPAD_DPAD_UP) {
        pjs->buttons[JOYBUTTON_UP] = 0xFF;
    }
    if (istate.Gamepad.wButtons & XINPUT_GAMEPAD_DPAD_DOWN) {
        pjs->buttons[JOYBUTTON_DOWN] = 0xFF;
    }
    if (istate.Gamepad.wButtons & XINPUT_GAMEPAD_DPAD_LEFT) {
        pjs->buttons[JOYBUTTON_LEFT] = 0xFF;
    }
    if (istate.Gamepad.wButtons & XINPUT_GAMEPAD_DPAD_RIGHT) {
        pjs->buttons[JOYBUTTON_RIGHT] = 0xFF;
    }
    if (istate.Gamepad.wButtons & XINPUT_GAMEPAD_BACK) {
        pjs->buttons[JOYBUTTON_BACK] = 0xFF;
    }
    if (istate.Gamepad.wButtons & XINPUT_GAMEPAD_START) {
        pjs->buttons[JOYBUTTON_START] = 0xFF;
    }

if (FABS(pjs->f1X) < 0.2) pjs->f1X = 0.0f;
if (FABS(pjs->f1Y) < 0.2) pjs->f1Y = 0.0f;
if (FABS(pjs->f2X) < 0.2) pjs->f2X = 0.0f;
if (FABS(pjs->f2Y) < 0.2) pjs->f2Y = 0.0f;

    return TRUE;

#endif // UNDER_XBOX
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dbase\misc.cpp ===
/*******************************************************************************

Copyright (c) 1998 Microsoft Corporation.  All rights reserved.

File Name:

    misc.cpp

Author:

    Matt Bronder

Description:

    Miscellaneous functions.

*******************************************************************************/

#include "d3dbase.h"

//******************************************************************************
//
// Function:
//
//     CheckCurrentDeviceFormat
//
// Description:
//
//     Check if the given format is available in the current device
//     configuration. 
//
// Arguments:
//
//     LPDIRECT3DDEVICE8 pDevice    - Pointer to the device object
//
//     DWORD dwUsage                - Usage for the resource
//
//     D3DRESOURCETYPE d3drt        - Type of the resource
//
//     D3DFORMAT fmt                - Format of the resource
//
// Return Value:
//
//     An HRESULT set to D3D_OK if the format is available, D3DERR_NOTAVAILABLE
//     if the format is not available, or the code of the failed method if a 
//     failure occurs.
//
//******************************************************************************
HRESULT CheckCurrentDeviceFormat(LPDIRECT3DDEVICE8 pDevice, DWORD dwUsage, D3DRESOURCETYPE d3drt, D3DFORMAT fmt) {

    LPDIRECT3D8     pDirect3D;
    D3DCAPS8        d3dcaps;
    D3DDISPLAYMODE  d3ddm;
    HRESULT         hr;

    hr = pDevice->GetDeviceCaps(&d3dcaps);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::GetDeviceCaps"))) {
        return hr;
    }

    hr = pDevice->GetDirect3D(&pDirect3D);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::GetDirect3D"))) {
        return hr;
    }

    hr = pDirect3D->GetAdapterDisplayMode(d3dcaps.AdapterOrdinal, &d3ddm);
    if (ResultFailed(hr, TEXT("IDirect3D8::GetAdapterDisplayMode"))) {
        pDirect3D->Release();
        return hr;
    }

    // Check if the current device supports the given format
    hr = pDirect3D->CheckDeviceFormat(d3dcaps.AdapterOrdinal, 
                                    d3dcaps.DeviceType, 
                                    d3ddm.Format, 
                                    dwUsage, d3drt, fmt);

    pDirect3D->Release();

    return hr;
}

//******************************************************************************
// Vertex transformation routine
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     TransformVertices
//
// Description:
//
//     Transform a set of vertices using the current world, view, and projection
//     matrices set in the device. 
//
// Arguments:
//
//     LPDIRECT3DDEVICE8 pDevice- Pointer to the device object
//
//     LPVOID pvDst (Out)       - A pointer to the first vertex in the set
//                                that will contain the transformed vertices.
//                                (These vertices must consist of a D3DVECTOR
//                                to contain the position followed by a
//                                float to contain the reciprocal of 
//                                homogeneous w)
//
//     LPVOID pvSrc             - A pointer to the first position vector 
//                                in the set of vertices to be transformed
//
//     DWORD dwNumVertices      - Number of vertices to be transformed
//
//     DWORD dwStrideDst        - Size (in bytes) from one destination vertex
//                                to the next
//
//     DWORD dwStrideSrc        - Size (in bytes) from one source vertex
//                                (position vector) to the next
//
//     LPDWORD pdwClip (Out)    - A pointer to an array of DWORDs which, on
//                                return, will contain clip flags for each of
//                                the transformed vertices
//
// Return Value:
//
//     An HRESULT set to D3D_OK if the transformation is successful, or the error
//     code of the failed method if a failure occurs.
//
//******************************************************************************
HRESULT TransformVertices(LPDIRECT3DDEVICE8 pDevice, LPVOID pvDst, LPVOID pvSrc, 
                          DWORD dwNumVertices, DWORD dwStrideDst, DWORD dwStrideSrc, 
                          LPDWORD pdwClip) 
{
    D3DXMATRIX              mWorld, mView, mProj, mClip, mR1, mR2;
    D3DVIEWPORT8            viewport;
    UINT                    i;
    HRESULT                 hr;
    float                   fW;
    LPBYTE                  pdst, psrc;
    D3DVECTOR*              prSrc;
    struct _TVERTEX {
        D3DVECTOR v;
        float     fRHW;
    }                       *prDst;

    // Get the viewport dimensions
    memset(&viewport, 0, sizeof(D3DVIEWPORT8));
    hr = pDevice->GetViewport(&viewport);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::GetViewport"))) {
        return hr;
    }

    // Build a transformation matrix from the current world, view, and
    // projection matrices

    hr = pDevice->GetTransform(D3DTS_PROJECTION, &mProj);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::GetTransform"))) {
        return hr;
    }

    InitMatrix(&mClip,
         0.5f,  0.0f,  0.0f,  0.0f,
         0.0f,  0.5f,  0.0f,  0.0f,
         0.0f,  0.0f,  1.0f,  0.0f,
         0.5f,  0.5f,  0.0f,  1.0f
    );

    D3DXMatrixMultiply(&mR1, &mProj, &mClip);

    hr = pDevice->GetTransform(D3DTS_VIEW, &mView);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::GetTransform"))) {
        return hr;
    }

    D3DXMatrixMultiply(&mR2, &mView, &mR1);

    hr = pDevice->GetTransform(D3DTS_WORLD, &mWorld);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::GetTransform"))) {
        return hr;
    }

    D3DXMatrixMultiply(&mR1, &mWorld, &mR2);

    // Clear the clipping flags
    if (pdwClip) {
        memset(pdwClip, 0, dwNumVertices * sizeof(DWORD));
    }

    // Apply the transformation matrix to the given vertices
    for (i = 0, pdst = (LPBYTE)pvDst, psrc = (LPBYTE)pvSrc; 
         i < dwNumVertices; 
         i++, pdst += dwStrideDst, psrc += dwStrideSrc) 
    {
        prSrc = (D3DVECTOR*)psrc;
        prDst = (struct _TVERTEX*)pdst;

        // Calculate the homogeneous coordinates
        fW = mR1._14 * prSrc->x + mR1._24 * prSrc->y + mR1._34 * prSrc->z + mR1._44;
        prDst->fRHW = 1.0f / fW;
        prDst->v.x = (prSrc->x * mR1._11 + prSrc->y * mR1._21 + prSrc->z * mR1._31 + mR1._41) * prDst->fRHW;
        prDst->v.y = (prSrc->x * mR1._12 + prSrc->y * mR1._22 + prSrc->z * mR1._32 + mR1._42) * prDst->fRHW;
        prDst->v.z = (prSrc->x * mR1._13 + prSrc->y * mR1._23 + prSrc->z * mR1._33 + mR1._43) * prDst->fRHW;

        // Clip test the coordinates
        if (pdwClip) {
            pdwClip[i] |= (prDst->v.x > 0.0f) ? 0 : CLIP_LEFT;
            pdwClip[i] |= (prDst->v.x < fW)   ? 0 : CLIP_RIGHT;
            pdwClip[i] |= (prDst->v.y > 0.0f) ? 0 : CLIP_BOTTOM;
            pdwClip[i] |= (prDst->v.y < fW)   ? 0 : CLIP_TOP;
            pdwClip[i] |= (prDst->v.z > 0.0f) ? 0 : CLIP_FRONT;
            pdwClip[i] |= (prDst->v.z < fW)   ? 0 : CLIP_BACK;
        }

        // Scale and offset x and y into screen coordinates
        prDst->v.x = prDst->v.x *  (float)viewport.Width  + (float)viewport.X;
        prDst->v.y = prDst->v.y * -(float)viewport.Height + (float)viewport.Height + (float)viewport.Y;
    }

    return hr;
}

//******************************************************************************
// Directional lighting function
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     LightVertices
//
// Description:
//
//     Calculate the diffuse and specular lighting intensities for the given
//     vertices using the given material and light.  The lighting information
//     is stored in the vertices, overwriting the normal information.  The
//     light is assumed to be directional and the vertices are assume to be
//     in world space.
//
// Arguments:
//
//     PVERTEX prSrc            - List of vertices to be lit
//
//     PLVERTEX prDst           - Result of the lighting operation
//
//     UINT uNumVertices        - Number of vertices to light
//
//     D3DMATERIAL8* pmaterial  - Material color
//
//     D3DLIGHT8* plight        - Light color and direction
//
//     D3DCOLOR cAmbient        - Ambient color
//
//     D3DXVECTOR3* pvViewPos   - View position
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL LightVertices(PVERTEX prSrc, PLVERTEX prDst, UINT uNumVertices, 
                      D3DMATERIAL8* pmaterial, D3DLIGHT8* plight, 
                      D3DCOLOR cAmbient, D3DXVECTOR3* pvViewPos)
{
    return LightVertices((LPVOID)&prSrc->vNormal, sizeof(VERTEX),
                         &prDst->cDiffuse, sizeof(LVERTEX),
                         uNumVertices, pmaterial, plight,
                         cAmbient, (LPVOID)&prSrc->vPosition, 
                         sizeof(VERTEX), &prDst->cSpecular,
                         sizeof(LVERTEX), pvViewPos);
}

//******************************************************************************
//
// Function:
//
//     LightVertices
//
// Description:
//
//     Calculate the diffuse and specular lighting intensities for the given
//     vertices using the given material and light.  The lighting information
//     is stored in the vertices, overwriting the normal information.  The
//     light is assumed to be directional and the vertices are assume to be
//     in world space.
//
// Arguments:
//
//     LPVOID pvNormal          - Pointer to the first vertex normal component
//                                in the source vertex list
//
//     DWORD dwStrideNormal     - Distance in bytes to the next vertex normal
//
//     LPVOID pcDiffuse         - Pointer to the first diffuse color component
//                                in the destination vertex list
//
//     DWORD dwStrideDiffuse    - Distance in bytes to the next vertex diffuse 
//                                color
//
//     UINT uNumVertices        - Number of vertices to light
//
//     D3DMATERIAL8* pmaterial  - Material color
//
//     D3DLIGHT8* plight        - Light color and direction
//
//     D3DCOLOR cAmbient        - Ambient color
//
//     LPVOID pvPosition        - Pointer to the first vertex position component
//                                in the source vertex list (for specular
//                                lighting.  If NULL specular lighting will not
//                                be performed)
//
//     DWORD dwStridePosition   - Distance in bytes to the next vertex position
//
//     LPVOID pcSpecular        - Pointer to the first specular color component
//                                in the destination vertex list
//
//     DWORD dwStrideSpecular   - Distance in bytes to the next vertex specular
//                                color
//
//     D3DXVECTOR3* pvViewPos   - View position
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL LightVertices(LPVOID pvNormal, DWORD dwStrideNormal,
                   D3DCOLOR* pcDiffuse, DWORD dwStrideDiffuse,
                   UINT uNumVertices, D3DMATERIAL8* pmaterial, 
                   D3DLIGHT8* plight, D3DCOLOR cAmbient, 
                   LPVOID pvPosition, DWORD dwStridePosition,
                   D3DCOLOR* pcSpecular, DWORD dwStrideSpecular,
                   D3DXVECTOR3* pvViewPos)
{
    D3DXVECTOR3  vMDiffuse, vMAmbient, vMSpecular, vMEmissive, vRAmbient, vLDiffuse, 
                 vLSpecular, vLAmbient, vBase, vSBase, vOffset, vLightDir, vNorm, v1, v2;
    D3DXVECTOR3* pvPos, *pvNorm;
    float        fIntensity, fSIntensity;
    UINT         i;

    if (!pvNormal || !pcDiffuse || !pmaterial || !plight) {
        return FALSE;
    }
    if (pvPosition && !(pcSpecular && pvViewPos)) {
        return FALSE;
    }

    vRAmbient.x = ((float)(RGB_GETRED(cAmbient)) / 255.0f);
    vRAmbient.y = ((float)(RGB_GETGREEN(cAmbient)) / 255.0f);
    vRAmbient.z = ((float)(RGB_GETBLUE(cAmbient)) / 255.0f);

    vMDiffuse.x = pmaterial->Diffuse.r;
    vMDiffuse.y = pmaterial->Diffuse.g;
    vMDiffuse.z = pmaterial->Diffuse.b;

    vMAmbient.x = pmaterial->Ambient.r;
    vMAmbient.y = pmaterial->Ambient.g;
    vMAmbient.z = pmaterial->Ambient.b;

    vMSpecular.x = pmaterial->Specular.r;
    vMSpecular.y = pmaterial->Specular.g;
    vMSpecular.z = pmaterial->Specular.b;

    vMEmissive.x = pmaterial->Emissive.r;
    vMEmissive.y = pmaterial->Emissive.g;
    vMEmissive.z = pmaterial->Emissive.b;

    vLDiffuse.x = plight->Diffuse.r;
    vLDiffuse.y = plight->Diffuse.g;
    vLDiffuse.z = plight->Diffuse.b;

    vLAmbient.x = plight->Ambient.r;
    vLAmbient.y = plight->Ambient.g;
    vLAmbient.z = plight->Ambient.b;

    vLSpecular.x = plight->Specular.r;
    vLSpecular.y = plight->Specular.g;
    vLSpecular.z = plight->Specular.b;

    v1 = vRAmbient + vLAmbient;
    v2.x = v1.x * vMAmbient.x;
    v2.y = v1.y * vMAmbient.y;
    v2.z = v1.z * vMAmbient.z;

    vOffset = v2 + vMEmissive;

    vBase.x = vLDiffuse.x * vMDiffuse.x;
    vBase.y = vLDiffuse.y * vMDiffuse.y;
    vBase.z = vLDiffuse.z * vMDiffuse.z;

    vSBase.x = vLSpecular.x * vMSpecular.x;
    vSBase.y = vLSpecular.y * vMSpecular.y;
    vSBase.z = vLSpecular.z * vMSpecular.z;

    D3DXVec3Normalize(&vLightDir, (D3DXVECTOR3*)&plight->Direction);

    for (i = 0, pvPos = (D3DXVECTOR3*)pvPosition, pvNorm = (D3DXVECTOR3*)pvNormal; 
         i < uNumVertices; 
         i++, pvPos = (D3DXVECTOR3*)((LPBYTE)pvPos + dwStridePosition), 
         pvNorm = (D3DXVECTOR3*)((LPBYTE)pvNorm + dwStrideNormal), 
         pcDiffuse = (D3DCOLOR*)((LPBYTE)pcDiffuse + dwStrideDiffuse), 
         pcSpecular = (D3DCOLOR*)((LPBYTE)pcSpecular + dwStrideSpecular)) 
    {
        fIntensity = -D3DXVec3Dot(pvNorm, &vLightDir);
        if (fIntensity < 0.0f) fIntensity = 0.0f;
        vMDiffuse = (fIntensity * vBase + vOffset) * 255.0f;
        if (vMDiffuse.x > 255.0f) vMDiffuse.x = 255.0f;
        if (vMDiffuse.y > 255.0f) vMDiffuse.y = 255.0f;
        if (vMDiffuse.z > 255.0f) vMDiffuse.z = 255.0f;
        *pcDiffuse = RGBA_MAKE((BYTE)vMDiffuse.x, (BYTE)vMDiffuse.y, (BYTE)vMDiffuse.z, 255);
        if (pvPosition) {
            D3DXVec3Normalize(&vNorm, &(*pvPos - *pvViewPos));
            D3DXVec3Normalize(&vNorm, &(vNorm + vLightDir));
            fSIntensity = -D3DXVec3Dot(pvNorm, &vNorm);
            if (fSIntensity < 0.0f) fSIntensity = 0.0f;
            fSIntensity = (float)(pow(fSIntensity, pmaterial->Power));
            vMSpecular = fSIntensity * vSBase * 255.0f;
            if (vMSpecular.x > 255.0f) vMSpecular.x = 255.0f;
            if (vMSpecular.y > 255.0f) vMSpecular.y = 255.0f;
            if (vMSpecular.z > 255.0f) vMSpecular.z = 255.0f;
            *pcSpecular = RGBA_MAKE((BYTE)vMSpecular.x, (BYTE)vMSpecular.y, (BYTE)vMSpecular.z, 255);
        }
    }

    return TRUE;
}

//******************************************************************************
// Matrix utility functions
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     InitMatrix
//
// Description:
//
//     Initialize the given matrix with the given values.
//
// Arguments:
//
//     LPD3DMATRIX pd3dm        - Matrix to initialize
//
//     float _11 to _44         - Initialization values
//
// Return Value:
//
//     None.
//
//******************************************************************************
void InitMatrix(D3DMATRIX* pd3dm,
                float _11, float _12, float _13, float _14,
                float _21, float _22, float _23, float _24,
                float _31, float _32, float _33, float _34,
                float _41, float _42, float _43, float _44) 
{
    if (pd3dm) {

        pd3dm->_11 = _11;
        pd3dm->_12 = _12;
        pd3dm->_13 = _13;
        pd3dm->_14 = _14;
        pd3dm->_21 = _21;
        pd3dm->_22 = _22;
        pd3dm->_23 = _23;
        pd3dm->_24 = _24;
        pd3dm->_31 = _31;
        pd3dm->_32 = _32;
        pd3dm->_33 = _33;
        pd3dm->_34 = _34;
        pd3dm->_41 = _41;
        pd3dm->_42 = _42;
        pd3dm->_43 = _43;
        pd3dm->_44 = _44;
    }
}

//******************************************************************************
//
// Function:
//
//     SetView
//
// Description:
//
//     Align the given view matrix along the given direction and up vectors with
//     the position vector as the origin.
//
// Arguments:
//
//     LPD3DXMATRIX pd3dm       - View matrix to initialize
//
//     LPD3DXVECTOR3 pvPos      - View origin
//
//     LPD3DXVECTOR3 pvAt       - View interest vector
//
//     LPD3DXVECTOR3 pvUp       - View up vector
//
// Return Value:
//
//     Initialized view matrix.
//
//******************************************************************************
void SetView(D3DXMATRIX* pd3dm, LPD3DXVECTOR3 pvPos, LPD3DXVECTOR3 pvAt, 
                                                      LPD3DXVECTOR3 pvUp) 
{
    D3DXVECTOR3  d, u, r;

    if (pd3dm && pvPos && pvAt && pvUp && !(*pvPos == *pvAt) 
                                 && !(*pvUp == D3DXVECTOR3(0.0f, 0.0f, 0.0f))) {

        D3DXVec3Normalize(&d, &(*pvAt - *pvPos));
        u = *pvUp;

        // Project the up vector into the plane of the direction vector
        D3DXVec3Normalize(&u, &(u - (d * D3DXVec3Dot(&u, &d))));

        // Get the cross product
        D3DXVec3Cross(&r, &u, &d);

        // Initialize the view transform
        InitMatrix(pd3dm,
            r.x, u.x, d.x, 0.0f,
            r.y, u.y, d.y, 0.0f,
            r.z, u.z, d.z, 0.0f,
            -(pvPos->x * r.x + pvPos->y * r.y + pvPos->z * r.z), 
            -(pvPos->x * u.x + pvPos->y * u.y + pvPos->z * u.z), 
            -(pvPos->x * d.x + pvPos->y * d.y + pvPos->z * d.z), 
            1.0f
        );
    }
}

//******************************************************************************
//
// Function:
//
//     SetPerspectiveProjection
//
// Description:
//
//     Initialize the given projection matrix using the given front and back
//     clipping planes, field of view, and aspect ratio.
//
// Arguments:
//
//     LPD3DMATRIX pd3dm        - Projection matrix to initialize
//
//     float fFront             - Front clipping plane
//
//     float fBack              - Back clipping plane
//
//     float fFieldOfView       - Angle, in radians, of the field of view
//
//     float fAspect            - Aspect ratio (y / x) of the view plane
//
// Return Value:
//
//     Initialized projection matrix.
//
//******************************************************************************
void SetPerspectiveProjection(D3DMATRIX* pd3dm, float fFront, float fBack, 
                                    float fFieldOfView, float fAspect) {

    float fTanHalfFOV = (float)tan((double)fFieldOfView / 2.0);
    float fFar = fBack / (fBack - fFront);

    InitMatrix(pd3dm,
        1.0f, 0.0f,           0.0f,                         0.0f,
        0.0f, 1.0f / fAspect, 0.0f,                         0.0f,
        0.0f, 0.0f,           fTanHalfFOV * fFar,           fTanHalfFOV,
        0.0f, 0.0f,           -fFront * fTanHalfFOV * fFar, 0.0f
    );
}

//******************************************************************************
//
// Function:
//
//     SetParallelProjection
//
// Description:
//
//     Initialize the given projection matrix using the given front and back
//     clipping planes, field of view, and aspect ratio.
//
// Arguments:
//
//     LPD3DMATRIX pd3dm        - Projection matrix to initialize
//
//     float fFront             - Front clipping plane
//
//     float fBack              - Back clipping plane
//
//     float fFieldOfView       - Angle, in radians, of the field of view
//
//     float fAspect            - Aspect ratio (y / x) of the view plane
//
// Return Value:
//
//     Initialized projection matrix.
//
//******************************************************************************
void SetParallelProjection(D3DMATRIX* pd3dm, float fFront, float fBack, 
                                    float fWidth, float fHeight) {

    InitMatrix(pd3dm,
        2.0f / fWidth, 0.0f, 0.0f, 0.0f,
        0.0f, 2.0f / fHeight, 0.0f, 0.0f,
        0.0f, 0.0f, 1.0f / (fBack - fFront), 0.0f,
        0.0f, 0.0f, fFront / (fFront - fBack), 1.0f
    );
}

//******************************************************************************
BOOL CreateSphere(PVERTEX* pprVertices, LPDWORD pdwNumVertices,
                  LPWORD* ppwIndices, LPDWORD pdwNumIndices,
                  float fRadius, UINT uStepsU, UINT uStepsV,
                  float fTileU, float fTileV) {

    PVERTEX     prVertices;
    PVERTEX     pr;
    DWORD       dwNumVertices;
    LPWORD      pwIndices;
    DWORD       dwNumIndices;
    UINT        uIndex = 0;
    UINT        i, j;
    float       fX, fY, fTX, fSinY, fCosY;

    if (!pprVertices || !pdwNumVertices || !ppwIndices || !pdwNumIndices) {
        return FALSE;
    }

    *pprVertices = NULL;
    *pdwNumVertices = 0;
    *ppwIndices = NULL;
    *pdwNumIndices = 0;

    dwNumVertices = (uStepsU + 1) * uStepsV;

    // Allocate memory for the vertices
    prVertices = (PVERTEX)MemAlloc32(dwNumVertices * sizeof(VERTEX));
    if (!prVertices) {
        return FALSE;
    }

    // Allocate memory for the indices
    dwNumIndices = uStepsU * (uStepsV - 1) * 6;

    pwIndices = (LPWORD)MemAlloc32(dwNumIndices * sizeof(WORD));
    if (!pwIndices) {
        MemFree32(prVertices);
        return FALSE;
    }

    // Create the sphere
    for (j = 0; j < uStepsV; j++) {

        fY = (float)j / (float)(uStepsV - 1);
        fSinY = (float)(sin(fY * M_PI));
        fCosY = (float)(cos(fY * M_PI));

        for (i = 0; i <= uStepsU; i++) {

            pr = &prVertices[(uStepsU + 1) * j + i];
            fX = (float)i / (float)uStepsU;
            fTX = fX * M_2PI;

            pr->vNormal = D3DXVECTOR3((float)cos(fTX) * fSinY, fCosY, (float)sin(fTX) * fSinY);
            pr->vPosition = pr->vNormal * fRadius;
            pr->u0 = fX * fTileU;
            pr->v0 = fY * fTileV;
        }
    }

    for (j = 0; j < uStepsV - 1; j++) {

        for (i = 0; i < uStepsU; i++) {

            pwIndices[uIndex++] = (j + 1) * (uStepsU + 1) + i;
            pwIndices[uIndex++] = j * (uStepsU + 1) + i;
            pwIndices[uIndex++] = (j + 1) * (uStepsU + 1) + i + 1;
            pwIndices[uIndex++] = j * (uStepsU + 1) + i;
            pwIndices[uIndex++] = j * (uStepsU + 1) + i + 1;
            pwIndices[uIndex++] = (j + 1) * (uStepsU + 1) + i + 1;
        }
    }

    *pprVertices = prVertices;
    *pdwNumVertices = dwNumVertices;
    *ppwIndices = pwIndices;
    *pdwNumIndices = dwNumIndices;

    return TRUE;
}

//******************************************************************************
void ReleaseSphere(PVERTEX* ppr, LPWORD* ppw) {

    if (ppr && *ppr) {
        MemFree32(*ppr);
        *ppr = NULL;
    }
    if (ppw && *ppw) {
        MemFree32(*ppw);
        *ppw = NULL;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dbase\object.cpp ===
/*******************************************************************************

Copyright (c) 1998 Microsoft Corporation.  All rights reserved.

File Name:

    object.cpp

Description:

    Fundamental base class.

*******************************************************************************/

#include "d3dbase.h"

//******************************************************************************
// CObject
//******************************************************************************

//******************************************************************************
CObject::CObject() {

    m_uRef = 1;
}

//******************************************************************************
CObject::~CObject() {

    m_uRef = 0;
}

//******************************************************************************
ULONG CObject::AddRef() {

    return ++m_uRef;
}

//******************************************************************************
ULONG CObject::Release() {

    UINT uRef = --m_uRef;
    if (uRef == 0) {
        delete this;
    }
    return uRef;
}

//******************************************************************************
ULONG CObject::RefCount() {

    return m_uRef;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dbase\object.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    object.h

Description:

    Fundamental base class.

*******************************************************************************/

#ifndef __OBJECT_H__
#define __OBJECT_H__

//******************************************************************************
// CObject
//******************************************************************************

class CObject {

private:

    ULONG                       m_uRef;

public:

                                CObject();
    virtual                     ~CObject();

    virtual ULONG               AddRef();
    virtual ULONG               Release();

    virtual ULONG               RefCount();
};

#endif //__OBJECT_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dbase\noise.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    noise.h

Author:

    Matt Bronder

Description:

    Perlin noise generation.

*******************************************************************************/

#ifndef __NOISE_H__
#define __NOISE_H__

//******************************************************************************
// Preprocessor definitions
//******************************************************************************

#define PRIME_TABLE_ENTRIES     256
#define MAX_OCTAVES             20

//******************************************************************************
// Forward declarations
//******************************************************************************

class CPerlinNoise;
class CPerlinNoise1D;
class CPerlinNoise2D;
class CPerlinNoise3D;

//******************************************************************************
// Data types
//******************************************************************************

typedef float (CPerlinNoise::* INTERPOLATEPROC)(float f1, float f2, float fBeta);
typedef float (CPerlinNoise1D::* NOISE1DPROC)(int x);
typedef float (CPerlinNoise2D::* NOISE2DPROC)(int x, int y);
typedef float (CPerlinNoise3D::* NOISE3DPROC)(int x, int y, int z);

typedef enum _INTERPOLATIONTYPE {
    INTERPOLATE_LINEAR = 0,
    INTERPOLATE_COSINE = 1,
} INTERPOLATIONTYPE, *PINTERPOLATIONTYPE;

//******************************************************************************
// CPerlinNoise
//******************************************************************************

//******************************************************************************
class CPerlinNoise {

protected:

    static UINT         m_puPrimes[3][PRIME_TABLE_ENTRIES];
    float               m_fPersistence;
    UINT                m_uOctaves;
    DWORD               m_dwSeed;
    INTERPOLATEPROC     m_pfnInterpolate;
    BOOL                m_bClamp;
    float               m_fRangeBase;
    float               m_fRangeMagnitude;
    DWORD               m_uOctave;
    struct
    {
        UINT            uPrime1;
        UINT            uPrime2;
        UINT            uPrime3;
    }                   m_plPrimesList[MAX_OCTAVES];

public:

                        CPerlinNoise(float fPersistence, UINT uOctaves, DWORD dwSeed, INTERPOLATIONTYPE irp, BOOL bClamp);
                        ~CPerlinNoise();

    void                SetPersistence(float fPersistence);
    void                SetOctaves(UINT uOctaves);
    void                SetSeed(DWORD dwSeed);
    void                SetInterpolation(INTERPOLATIONTYPE irp);
    void                EnableClamp(BOOL bEnable);
    void                SetRange(float fMin, float fMax);

protected:

    float               InterpolateLinear(float f1, float f2, float fBeta);
    float               InterpolateCosine(float f1, float f2, float fBeta);
    DWORD               Rand32(DWORD dwSeed);
    BOOL                IsPrime(UINT u);
    void                InitPrimesList(UINT uOctaves, DWORD dwSeed);
};

//******************************************************************************
// CPerlinNoise1D
//******************************************************************************

//******************************************************************************
class CPerlinNoise1D : public CPerlinNoise {

protected:

    NOISE1DPROC         m_pfnNoise;

public:

                        CPerlinNoise1D(float fPersistence, UINT uOctaves, DWORD dwSeed, INTERPOLATIONTYPE irp, BOOL bClamp, BOOL bSmooth);
                        ~CPerlinNoise1D();

    float               GetIntensity(float x);
    void                EnableSmoothing(BOOL bEnable);

protected:

    float               Noise1D(int x);
    float               SmoothNoise1D(int x);
    float               InterpolatedNoise1D(float x);
};

//******************************************************************************
// CPerlinNoise2D
//******************************************************************************

//******************************************************************************
class CPerlinNoise2D : public CPerlinNoise {

protected:

    NOISE2DPROC         m_pfnNoise;

public:

                        CPerlinNoise2D(float fPersistence, UINT uOctaves, DWORD dwSeed, INTERPOLATIONTYPE irp, BOOL bClamp, BOOL bSmooth);
                        ~CPerlinNoise2D();

    float               GetIntensity(float x, float y);
    void                EnableSmoothing(BOOL bEnable);

protected:

    float               Noise2D(int x, int y);
    float               SmoothNoise2D(int x, int y);
    float               InterpolatedNoise2D(float x, float y);
};

//******************************************************************************
// CPerlinNoise3D
//******************************************************************************

//******************************************************************************
class CPerlinNoise3D : public CPerlinNoise {

protected:

    NOISE3DPROC         m_pfnNoise;

public:

                        CPerlinNoise3D(float fPersistence, UINT uOctaves, DWORD dwSeed, INTERPOLATIONTYPE irp, BOOL bClamp, BOOL bSmooth);
                        ~CPerlinNoise3D();

    float               GetIntensity(float x, float y, float z);
    void                EnableSmoothing(BOOL bEnable);

protected:

    float               Noise3D(int x, int y, int z);
    float               SmoothNoise3D(int x, int y, int z);
    float               InterpolatedNoise3D(float x, float y, float z);
};

#endif // __NOISE_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dbase\palette.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    palette.h

Description:

    Direct3D palette routines.

*******************************************************************************/

#ifndef __PALETTE_H__
#define __PALETTE_H__

#ifdef UNDER_XBOX

//******************************************************************************
// Function prototypes
//******************************************************************************

LPDIRECT3DPALETTE8      CreatePalette(LPDIRECT3DDEVICE8 pDevice, 
                                      D3DCOLOR* pcColors = NULL, 
                                      D3DPALETTESIZE palsSize = D3DPALETTE_256);
void                    ReleasePalette(LPDIRECT3DPALETTE8 pd3dp);
void                    ReleasePalettes();
void                    RemovePalette(LPDIRECT3DPALETTE8 pd3dp);

#endif // UNDER_XBOX

#endif // __PALETTE_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dbase\modulex.h ===
#pragma comment(linker, "/include:_d3dbase_consolbk")
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dbase\misc.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    misc.h

Author:

    Matt Bronder

Description:

    Miscellaneous functions.

*******************************************************************************/

#ifndef __MISC_H__
#define __MISC_H__

//******************************************************************************
// Precomputed fractions of pi
//******************************************************************************

#define M_PI        3.14159265359f
#define M_2PI       6.28318530718f
#define M_PIDIV2    1.57079632680f
#define M_3PIDIV2   4.71238898039f
#define M_PIDIV4    0.78539816340f
#define M_3PIDIV4   2.35619449019f
#define M_5PIDIV4   3.92699081699f
#define M_7PIDIV4   5.49778714378f

//******************************************************************************
// Macros
//******************************************************************************

#define countof(x)  (sizeof(x) / sizeof(*(x)))

#define RND()       ((float)rand() / (float)RAND_MAX)
#define FRND(x)     (RND() * (x))
#define NRND()      (-1.0f + 2.0f * RND())
#define SFRND(x)    (NRND() * (x))
//#define FABS(x)     ((float)((DWORD)(x) & 0x7FFF))
#define FABS(x)     ((x) < 0.0f ? -(x) : (x))

#ifndef RGB_MAKE
/*
 * Format of CI colors is
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |    alpha      |         color index           |   fraction    |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 */
#define CI_GETALPHA(ci)    ((ci) >> 24)
#define CI_GETINDEX(ci)    (((ci) >> 8) & 0xffff)
#define CI_GETFRACTION(ci) ((ci) & 0xff)
#define CI_ROUNDINDEX(ci)  CI_GETINDEX((ci) + 0x80)
#define CI_MASKALPHA(ci)   ((ci) & 0xffffff)
#define CI_MAKE(a, i, f)    (((a) << 24) | ((i) << 8) | (f))

/*
 * Format of RGBA colors is
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |    alpha      |      red      |     green     |     blue      |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 */
#define RGBA_GETALPHA(rgb)      ((rgb) >> 24)
#define RGBA_GETRED(rgb)        (((rgb) >> 16) & 0xff)
#define RGBA_GETGREEN(rgb)      (((rgb) >> 8) & 0xff)
#define RGBA_GETBLUE(rgb)       ((rgb) & 0xff)
#define RGBA_MAKE(r, g, b, a)   ((D3DCOLOR) (((a) << 24) | ((r) << 16) | ((g) << 8) | (b)))

/* D3DRGB and D3DRGBA may be used as initialisers for D3DCOLORs
 * The float values must be in the range 0..1
 */
#define D3DRGB(r, g, b) \
    (0xff000000L | ( ((long)((r) * 255)) << 16) | (((long)((g) * 255)) << 8) | (long)((b) * 255))
#define D3DRGBA(r, g, b, a) \
    (   (((long)((a) * 255)) << 24) | (((long)((r) * 255)) << 16) \
    |   (((long)((g) * 255)) << 8) | (long)((b) * 255) \
    )

/*
 * Format of RGB colors is
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |    ignored    |      red      |     green     |     blue      |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 */
#define RGB_GETRED(rgb)         (((rgb) >> 16) & 0xff)
#define RGB_GETGREEN(rgb)       (((rgb) >> 8) & 0xff)
#define RGB_GETBLUE(rgb)        ((rgb) & 0xff)
#define RGBA_SETALPHA(rgba, x) (((x) << 24) | ((rgba) & 0x00ffffff))
#define RGB_MAKE(r, g, b)       ((D3DCOLOR) (((r) << 16) | ((g) << 8) | (b)))
#define RGBA_TORGB(rgba)       ((D3DCOLOR) ((rgba) & 0xffffff))
#define RGB_TORGBA(rgb)        ((D3DCOLOR) ((rgb) | 0xff000000))

#endif

// Clip flags
#define CLIP_LEFT               0x0001;
#define CLIP_RIGHT              0x0002;
#define CLIP_BOTTOM             0x0004;
#define CLIP_TOP                0x0008;
#define CLIP_FRONT              0x0010;
#define CLIP_BACK               0x0020;

//******************************************************************************
// Resource format validation
//******************************************************************************

HRESULT CheckCurrentDeviceFormat(LPDIRECT3DDEVICE8 pDevice, DWORD dwUsage, 
                        D3DRESOURCETYPE d3drt, D3DFORMAT fmt);

//******************************************************************************
// Vertex transformation routine
//******************************************************************************

HRESULT TransformVertices(LPDIRECT3DDEVICE8 pDevice, LPVOID pvDst, LPVOID pvSrc, 
                        DWORD dwNumVertices, DWORD dwStrideDst, DWORD dwStrideSrc, 
                        LPDWORD pdwClip = NULL);

//******************************************************************************
// Directional lighting function
//******************************************************************************

BOOL LightVertices(PVERTEX prSrc, PLVERTEX prDst, UINT uNumVertices, 
                        D3DMATERIAL8* pmaterial, D3DLIGHT8* plight, 
                        D3DCOLOR cAmbient, D3DXVECTOR3* pvViewPos);

BOOL LightVertices(LPVOID pvNormal, DWORD dwStrideNormal,
                        D3DCOLOR* pcDiffuse, DWORD dwStrideDiffuse,
                        UINT uNumVertices, D3DMATERIAL8* pmaterial, 
                        D3DLIGHT8* plight, D3DCOLOR cAmbient, 
                        LPVOID pvPosition = NULL, DWORD dwStridePosition = 0,
                        D3DCOLOR* pcSpecular = NULL, DWORD dwStrideSpecular = 0,
                        D3DXVECTOR3* pvViewPos = NULL);

//******************************************************************************
// Matrix utility function prototypes
//******************************************************************************

void                InitMatrix(D3DMATRIX* pd3dm,
                        float _11, float _12, float _13, float _14,
                        float _21, float _22, float _23, float _24,
                        float _31, float _32, float _33, float _34,
                        float _41, float _42, float _43, float _44);

void                SetView(D3DXMATRIX* pd3dm, LPD3DXVECTOR3 pvPos, 
                        LPD3DXVECTOR3 pvAt, LPD3DXVECTOR3 pvUp);

void                SetPerspectiveProjection(D3DMATRIX* pd3dm, float fFront, 
                        float fBack, float fFieldOfView, float fAspect);

void                SetParallelProjection(D3DMATRIX* pd3dm, float fFront, 
                        float fBack, float fFieldOfView, float fAspect);
//******************************************************************************
// Geometry functions
//******************************************************************************

BOOL                CreateSphere(PVERTEX* pprVertices, LPDWORD pdwNumVertices,
                        LPWORD* ppwIndices, LPDWORD pdwNumIndices,
                        float fRadius = 1.0f, UINT uStepsU = 16, 
                        UINT uStepsV = 16, float fTileU = 1.0f, float fTileV = 1.0f);

void                ReleaseSphere(PVERTEX* ppr, LPWORD* ppw);

//******************************************************************************
// Miscellaneous functions
//******************************************************************************

inline DWORD        F2DW(float f) {return *((LPDWORD)&f);}

#endif // __MISC_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dbase\palette.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    palette.cpp

Author:

    Matt Bronder

Description:

    Direct3D palette routines.

*******************************************************************************/

#include "d3dbase.h"

#ifdef UNDER_XBOX

//******************************************************************************
// Structures
//******************************************************************************

typedef struct _PALETTEDESC {
    LPDIRECT3DPALETTE8          pd3dp;
    D3DPALETTESIZE              palsSize;
    UINT                        uEntries;
    struct _PALETTEDESC*        ppaldNext;
} PALETTEDESC, *PPALETTEDESC;

//******************************************************************************
// Globals
//******************************************************************************

PPALETTEDESC                    g_ppaldList = NULL;

//******************************************************************************
// Palette functions
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     CreatePalette
//
// Description:
//
//     Create an palette object of the given size and populate it with the 
//     given palette colors.  The size of the palette entries must
//     be at least as large as the palette being created.
//
// Arguments:
//
//     LPDIRECT3DDEVICE8 pDevice            - Pointer to the device object
//
//     D3DCOLOR* pcColors                   - Colors to store in the palette
//
//     D3DPALETTESIZE palsSize              - Number of entries in the palette
//
// Return Value:
//
//     A pointer to the created palette object on success, NULL on 
//     failure.
//
//******************************************************************************
LPDIRECT3DPALETTE8 CreatePalette(LPDIRECT3DDEVICE8 pDevice, D3DCOLOR* pcColors, D3DPALETTESIZE palsSize) {

    LPDIRECT3DPALETTE8      pd3dp;
    PPALETTEDESC            ppaldNode;
    D3DCOLOR*               pcData;
    UINT                    uEntries;
    HRESULT                 hr;

    hr = pDevice->CreatePalette(palsSize, &pd3dp);
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DDevice8::CreatePalette"));
        return NULL;
    }

    switch (palsSize) {
        case D3DPALETTE_32:
            uEntries = 32;
            break;
        case D3DPALETTE_64:
            uEntries = 64;
            break;
        case D3DPALETTE_128:
            uEntries = 128;
            break;
        case D3DPALETTE_256:
        default:
            uEntries = 256;
            break;
    }

    if (pcColors) {

        hr = pd3dp->Lock(&pcData, 0);
        if (FAILED(hr)) {
            ResultFailed(hr, TEXT("IDirect3DPalette8::Lock"));
            pd3dp->Release();
            return NULL;
        }

        memcpy(pcData, pcColors, uEntries * sizeof(D3DCOLOR));

        hr = pd3dp->Unlock();
        if (FAILED(hr)) {
            ResultFailed(hr, TEXT("IDirect3DPalette8::Unlock"));
            pd3dp->Release();
            return NULL;
        }
    }

    // Add the palette to the list
    ppaldNode = (PPALETTEDESC)MemAlloc(sizeof(PALETTEDESC));
    if (!ppaldNode) {
        pd3dp->Release();
        return NULL;
    }
    memset(ppaldNode, 0, sizeof(PALETTEDESC));
    ppaldNode->pd3dp = pd3dp;
    ppaldNode->palsSize = palsSize;
    ppaldNode->uEntries = uEntries;
    ppaldNode->ppaldNext = g_ppaldList;
    g_ppaldList = ppaldNode;

    return pd3dp;
}

//******************************************************************************
//
// Function:
//
//     ReleasePalette
//
// Description:
//
//     Release the given palette object and remove it from the palette table.
//
// Arguments:
//
//     LPDIRECT3DPALETTE8 pd3dp               - Pointer to the palette object
//
// Return Value:
//
//     None.
//
//******************************************************************************
void ReleasePalette(LPDIRECT3DPALETTE8 pd3dp) {

    PPALETTEDESC    ppald, ppaldDel;
#if defined(DEBUG) || defined(_DEBUG)
    UINT            uRef;
#endif

    if (!pd3dp) {
        return;
    }

    if (g_ppaldList) {

        if (g_ppaldList->pd3dp == pd3dp) {
            ppald = g_ppaldList->ppaldNext;
            MemFree(g_ppaldList);
            g_ppaldList = ppald;
        }

        else {

            for (ppald = g_ppaldList; 
                 ppald->ppaldNext && ppald->ppaldNext->pd3dp != pd3dp; 
                 ppald = ppald->ppaldNext
            );

            if (ppald->ppaldNext) {
                ppaldDel = ppald->ppaldNext;
                ppald->ppaldNext = ppaldDel->ppaldNext;
                MemFree(ppaldDel);
            }
        }
    }

#if defined(DEBUG) || defined(_DEBUG)
    uRef = pd3dp->Release();
    if (uRef != 0) {
        DebugString(TEXT("WARNING: Palette has a ref count of %d on release"), uRef);
    }
#else
    pd3dp->Release();
#endif
}

//******************************************************************************
//
// Function:
//
//     ReleasePalette
//
// Description:
//
//     Release all palettes.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void ReleasePalettes() {

    while (g_ppaldList) {
        ReleasePalette(g_ppaldList->pd3dp);
    }
}

//******************************************************************************
//
// Function:
//
//     RemovePalette
//
// Description:
//
//     Remove the given palette from the palette table (if present)
//
// Arguments:
//
//     LPDIRECT3DPALETTE8 pd3dp         - Pointer to the palette object
//
// Return Value:
//
//     None.
//
//******************************************************************************
void RemovePalette(LPDIRECT3DPALETTE8 pd3dp) {

    PPALETTEDESC    ppald, ppaldDel;

    if (!pd3dp) {
        return;
    }

    if (g_ppaldList) {

        if (g_ppaldList->pd3dp == pd3dp) {
            ppald = g_ppaldList->ppaldNext;
            MemFree(g_ppaldList);
            g_ppaldList = ppald;
        }

        else {

            for (ppald = g_ppaldList; 
                 ppald->ppaldNext && ppald->ppaldNext->pd3dp != pd3dp; 
                 ppald = ppald->ppaldNext
            );

            if (ppald->ppaldNext) {
                ppaldDel = ppald->ppaldNext;
                ppald->ppaldNext = ppaldDel->ppaldNext;
                MemFree(ppaldDel);
            }
        }
    }
}

#endif // UNDER_XBOX
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dbase\noise.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    noise.cpp

Author:

    Matt Bronder

Description:

    Perlin noise generation.

*******************************************************************************/

#include "d3dbase.h"

//******************************************************************************
// CPerlinNoise
//******************************************************************************

UINT CPerlinNoise::m_puPrimes[3][PRIME_TABLE_ENTRIES] = {0};

//******************************************************************************
//
// Method:
//
//     CPerlinNoise
//
// Description:
//
//     Construct a CPerlinNoise object.
//
// Arguments:
//
//     float fPersistence               - Persistence of the noise (the
//                                        amplitude of each frequency)
//
//     UINT uOctaves                    - Number of octaves to add together
//
//     DWORD dwSeed                     - Seed value for the noise
//
//     INTERPOLATIONTYPE irp            - Function to use in interpolating
//                                        between noise sample points
//
//     BOOL bClamp                      - Indicates whether to scale the 
//                                        computed noise function so it falls
//                                        entirely within its given range or to 
//                                        allow the positive interference of 
//                                        successive octaves to naturally exceed 
//                                        the the given range and then clamp the 
//                                        function to that range.
//
// Return Value:
//
//     None.
//
//******************************************************************************
CPerlinNoise::CPerlinNoise(float fPersistence, UINT uOctaves, DWORD dwSeed, 
                                            INTERPOLATIONTYPE irp, BOOL bClamp) 
{
    if (!m_puPrimes[0][0]) {

        UINT i, j, k;
        UINT uBase[] = {
                10000,
                770000,
                1376310000,
        };

        // Find the first PRIME_TABLE_ENTRIES prime numbers that proceed 3 base numbers
        for (i = 0; i < 3; i++) {
            for (j = 0, k = uBase[i]; j < PRIME_TABLE_ENTRIES; k++) {
                if (IsPrime(k)) {
                    m_puPrimes[i][j++] = k;
                }
            }
        }
    }

    m_fPersistence = fPersistence;
    m_uOctaves = uOctaves;
    m_dwSeed = dwSeed;
    switch (irp) {
        case INTERPOLATE_LINEAR:
            m_pfnInterpolate = CPerlinNoise::InterpolateLinear;
            break;
        case INTERPOLATE_COSINE:
        default:
            m_pfnInterpolate = CPerlinNoise::InterpolateCosine;
            break;
    }
    m_bClamp = bClamp;
    m_fRangeBase = 0.0f;
    m_fRangeMagnitude = 1.0f;

    if (uOctaves > MAX_OCTAVES) {
        DebugBreak();
    }

    InitPrimesList(uOctaves, dwSeed);
}

//******************************************************************************
//
// Method:
//
//     ~CPerlinNoise
//
// Description:
//
//     Destruct a CPerlinNoise object.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
CPerlinNoise::~CPerlinNoise() {
}

//******************************************************************************
//
// Method:
//
//     SetPersistence
//
// Description:
//
//     Set the persistence value for the noise function.
//
// Arguments:
//
//     float fPersistence               - Persistence of the noise (the
//                                        amplitude of each frequency)
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CPerlinNoise::SetPersistence(float fPersistence) {

    m_fPersistence = fPersistence;
}

//******************************************************************************
//
// Method:
//
//     SetOctaves
//
// Description:
//
//     Set the number of octaves to use in the noise function
//
// Arguments:
//
//     UINT uOctaves                    - Number of octaves to add together
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CPerlinNoise::SetOctaves(UINT uOctaves) {

    if (uOctaves > MAX_OCTAVES) {
        return;
    }

    m_uOctaves = uOctaves;

    InitPrimesList(uOctaves, m_dwSeed);
}

//******************************************************************************
//
// Method:
//
//     SetSeed
//
// Description:
//
//     Set the pseudo-random seed value to use in sampling noise values at
//     discrete points.
//
// Arguments:
//
//     DWORD dwSeed                     - Seed value for the noise
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CPerlinNoise::SetSeed(DWORD dwSeed) {

    m_dwSeed = dwSeed;

    InitPrimesList(m_uOctaves, dwSeed);
}

//******************************************************************************
//
// Method:
//
//     SetInterpolation
//
// Description:
//
//     Identify the interpolation function to be used in calculating noise 
//     values between sample points.
//
// Arguments:
//
//     INTERPOLATIONTYPE irp            - Function to use in interpolating
//                                        between noise sample points
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CPerlinNoise::SetInterpolation(INTERPOLATIONTYPE irp) {

    switch (irp) {
        case INTERPOLATE_LINEAR:
            m_pfnInterpolate = CPerlinNoise::InterpolateLinear;
            break;
        case INTERPOLATE_COSINE:
            m_pfnInterpolate = CPerlinNoise::InterpolateCosine;
            break;
    }
}

//******************************************************************************
//
// Method:
//
//     EnableClamp
//
// Description:
//
//     Indicate whether to scale or clamp the noise function to the given range.
//
// Arguments:
//
//     BOOL bEnable                     - Indicates whether to scale the 
//                                        computed noise function so it falls
//                                        entirely within its given range or to 
//                                        allow the positive interference of 
//                                        successive octaves to naturally exceed 
//                                        the the given range and then clamp the 
//                                        function to that range.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CPerlinNoise::EnableClamp(BOOL bEnable) {

    m_bClamp = bEnable;
}

//******************************************************************************
//
// Method:
//
//     SetRange
//
// Description:
//
//     Set the upper and lower limits for the noise function.
//
// Arguments:
//
//     float fMin                       - Minimum value for the noise
//
//     float fMax                       - Maximum value for the noise
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CPerlinNoise::SetRange(float fMin, float fMax) {

    if (fMax > fMin) {

        m_fRangeBase = fMin;
        m_fRangeMagnitude = fMax - fMin;
    }
}

//******************************************************************************
//
// Method:
//
//     InterpolateLinear
//
// Description:
//
//     Calculate the value of a point lying a given distance on a line between
//     two given end points.
//
// Arguments:
//
//     float f1                         - Value of the first end point
//
//     float f2                         - Value of the second end point
//
//     float fBeta                      - Percentage of the distance between the 
//                                        points (where 0.0 is f1 and 1.0 is f2)
//
// Return Value:
//
//     Interpolated value between the given points.
//
//******************************************************************************
float CPerlinNoise::InterpolateLinear(float f1, float f2, float fBeta) {

    return f1 * (1.0f - fBeta) + f2 * fBeta;
}

//******************************************************************************
//
// Method:
//
//     InterpolateCosine
//
// Description:
//
//     Calculate the value of a point lying a given distance between two given
//     end points using the cosine of the percentage of the distance to provide
//     a smooth curve between the points.
//
// Arguments:
//
//     float f1                         - Value of the first end point
//
//     float f2                         - Value of the second end point
//
//     float fBeta                      - Percentage of the distance between the 
//                                        points (where 0.0 is f1 and 1.0 is f2)
//
// Return Value:
//
//     Interpolated value between the given points.
//
//******************************************************************************
float CPerlinNoise::InterpolateCosine(float f1, float f2, float fBeta) {

    float f = (1.0f - (float)cos(fBeta * 3.14159265359f)) * 0.5f;
    return f1 * (1.0f - f) + f2 * f;
}

//******************************************************************************
//
// Method:
//
//     Rand32
//
// Description:
//
//     Return a pseudo-random 32 bit number corresponding to the given seed.
//
// Arguments:
//
//     DWORD dwSeed                     - Seed value
//
// Return Value:
//
//     The random number corresponding to the given seed.
//
//******************************************************************************
DWORD CPerlinNoise::Rand32(DWORD dwSeed) {

    dwSeed = (dwSeed << 13) ^ dwSeed;
    return ((dwSeed * (dwSeed * dwSeed * 9973 + 769999) + 1376309969) & 0xFFFFFFFF);
}

//******************************************************************************
//
// Method:
//
//     IsPrime
//
// Description:
//
//     Evaluate the given integer and determine whether or not it is a prime
//     number.
//
// Arguments:
//
//     UINT u                           - Unsigned integer to evaluate
//
// Return Value:
//
//     TRUE if the number is a prime, FALSE if not.
//
//******************************************************************************
BOOL CPerlinNoise::IsPrime(UINT u) {

    UINT i = 1, j, k = 0;

    do {
        j = k;
        k = i;
        i = (k + (u / k));
        i >>= 1;
    } while(j != i);

    for (j = 2; j <= i; j++) {
        if (u % j == 0) {
            return FALSE;
        }
    }

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     InitPrimesList
//
// Description:
//
//     Initialize a table of prime numbers to enable separate pseudo-random
//     noise functions to be used for each octave of perlin noise generation.
//
// Arguments:
//
//     UINT uOctaves                    - Number of octaves used in noise
//                                        generation.
//
//     DWORD dwSeed                     - Seed to use in constructing the table
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CPerlinNoise::InitPrimesList(UINT uOctaves, DWORD dwSeed) {

    DWORD dwRandFunc, dwRand;
    UINT  i;

    for (i = 0, dwRandFunc = dwSeed; i < uOctaves; i++) {

        dwRand = Rand32(dwRandFunc);
        m_plPrimesList[i].uPrime1 = m_puPrimes[0][dwRand % PRIME_TABLE_ENTRIES];
        dwRand = Rand32(dwRand);
        m_plPrimesList[i].uPrime2 = m_puPrimes[1][dwRand % PRIME_TABLE_ENTRIES];
        dwRand = Rand32(dwRand);
        m_plPrimesList[i].uPrime3 = m_puPrimes[2][dwRand % PRIME_TABLE_ENTRIES];
        dwRandFunc = Rand32(dwRandFunc);
    }
}

//******************************************************************************
// CPerlinNoise1D
//******************************************************************************

//******************************************************************************
//
// Method:
//
//     CPerlinNoise1D
//
// Description:
//
//     Construct a CPerlinNoise1D object.
//
// Arguments:
//
//     float fPersistence               - Persistence of the noise (the
//                                        amplitude of each frequency)
//
//     UINT uOctaves                    - Number of octaves to add together
//
//     DWORD dwSeed                     - Seed value for the noise
//
//     INTERPOLATIONTYPE irp            - Function to use in interpolating
//                                        between noise sample points
//
//     BOOL bClamp                      - Indicates whether to scale the 
//                                        computed noise function so it falls
//                                        entirely within its given range or to 
//                                        allow the positive interference of 
//                                        successive octaves to naturally exceed 
//                                        the the given range and then clamp the 
//                                        function to that range.
//
//     BOOL bSmooth                     - Indicates whether or not to use a
//                                        filter to smooth the noise
//
// Return Value:
//
//     None.
//
//******************************************************************************
CPerlinNoise1D::CPerlinNoise1D(float fPersistence, UINT uOctaves, DWORD dwSeed, 
                    INTERPOLATIONTYPE irp, BOOL bClamp, BOOL bSmooth) :
                    CPerlinNoise(fPersistence, uOctaves, dwSeed, irp, bClamp)
{
    if (bSmooth) {
        m_pfnNoise = CPerlinNoise1D::SmoothNoise1D;
    }
    else {
        m_pfnNoise = CPerlinNoise1D::Noise1D;
    }
}

//******************************************************************************
//
// Method:
//
//     ~CPerlinNoise1D
//
// Description:
//
//     Destruct a CPerlinNoise1D object.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
CPerlinNoise1D::~CPerlinNoise1D() {
}

//******************************************************************************
//
// Method:
//
//     EnableSmoothing
//
// Description:
//
//     Enable or disable the use of a filter to smooth the noise.
//
// Arguments:
//
//     BOOL bEnable                     - TRUE to enable the filter, FALSE
//                                        to disable it
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CPerlinNoise1D::EnableSmoothing(BOOL bEnable) {

    if (bEnable) {
        m_pfnNoise = CPerlinNoise1D::SmoothNoise1D;
    }
    else {
        m_pfnNoise = CPerlinNoise1D::Noise1D;
    }
}

//******************************************************************************
//
// Method:
//
//     GetIntensity
//
// Description:
//
//     Calculate the intensity (amplitude) of the noise function at the given
//     coordinate.
//
// Arguments:
//
//     float x                          - x coordinate
//
// Return Value:
//
//     The intensity of the noise at the given coordinate.
//
//******************************************************************************
float CPerlinNoise1D::GetIntensity(float x) {

    float fIntensity = 0.0f, fAmplitude, fFrequency, fTotalAmp = 0.0f;

    fAmplitude = 1.0f;

    for (m_uOctave = 0; m_uOctave < m_uOctaves; m_uOctave++) {

//        fFrequency = (float)pow(2.0, (double)m_uOctave);
        fFrequency = (float)(0x1 << m_uOctave);
//        fAmplitude = (float)pow(m_fPersistence, (double)m_uOctave);
        fIntensity = fIntensity + InterpolatedNoise1D(x * fFrequency) * fAmplitude;
        fTotalAmp += fAmplitude;
        fAmplitude *= m_fPersistence;
    }

    if (m_bClamp) {
        fTotalAmp = 1.0f;
        if (fIntensity < -1.0f) {
            fIntensity = -1.0f;
        }
        else if (fIntensity > 1.0f) {
            fIntensity = 1.0f;
        }
    }

    return m_fRangeBase + m_fRangeMagnitude * ((fIntensity + fTotalAmp) / (fTotalAmp * 2.0f));
}

//******************************************************************************
//
// Method:
//
//     InterpolatedNoise1D
//
// Description:
//
//     Calculate the noise value that corresponds to the given coordinate
//     for the given octave.  Noise values are calculated
//     for the integer points that bound the given coordinate and the noise
//     value for the coordinate is then interpolated from the results based
//     on where the coordinate lies between the bounding points and on the
//     interpolation function set for the object.
//
// Arguments:
//
//     float x                          - x coordinate
//
// Return Value:
//
//     The interpolated value of the noise at the given coordinate.
//
//******************************************************************************
float CPerlinNoise1D::InterpolatedNoise1D(float x) {

    int     nx;
    float   fx;

    nx = (int)floor(x);
    fx = x - (float)nx;

    return (this->*m_pfnInterpolate)((this->*m_pfnNoise)(nx), (this->*m_pfnNoise)(nx+1), fx);
}

//******************************************************************************
//
// Method:
//
//     Noise1D
//
// Description:
//
//     Calculate the noise value that corresponds to the given coordinate
//     for the given octave.
//
// Arguments:
//
//     int x                            - x coordinate
//
// Return Value:
//
//     The value of the noise at the given coordinate.
//
//******************************************************************************
float CPerlinNoise1D::Noise1D(int x) {

    DWORD   dwSeed;

    dwSeed = (x << 13) ^ x;

    return (1.0f - ((dwSeed * (dwSeed * dwSeed * m_plPrimesList[m_uOctave].uPrime1 + m_plPrimesList[m_uOctave].uPrime2) + m_plPrimesList[m_uOctave].uPrime3) & 0x7FFFFFFF) / 1073741824.0f);
}

//******************************************************************************
//
// Method:
//
//     SmoothNoise1D
//
// Description:
//
//     Calculate the filtered noise value that corresponds to the given 
//     coordinate for the given octave.  Noise values are calculated
//     for neighboring coordinates and then used to bias the noise for the
//     given coordinate.
//
// Arguments:
//
//     int x                            - x coordinate
//
//     int y                            - y coordinate
//
// Return Value:
//
//     The value of the filtered noise at the given coordinate.
//
//******************************************************************************
float CPerlinNoise1D::SmoothNoise1D(int x) {

    return Noise1D(x) / 2.0f + Noise1D(x-1) / 4.0f + Noise1D(x+1) / 4.0f;
}

//******************************************************************************
// CPerlinNoise2D
//******************************************************************************

//******************************************************************************
//
// Method:
//
//     CPerlinNoise2D
//
// Description:
//
//     Construct a CPerlinNoise2D object.
//
// Arguments:
//
//     float fPersistence               - Persistence of the noise (the
//                                        amplitude of each frequency)
//
//     UINT uOctaves                    - Number of octaves to add together
//
//     DWORD dwSeed                     - Seed value for the noise
//
//     INTERPOLATIONTYPE irp            - Function to use in interpolating
//                                        between noise sample points
//
//     BOOL bClamp                      - Indicates whether to scale the 
//                                        computed noise function so it falls
//                                        entirely within its given range or to 
//                                        allow the positive interference of 
//                                        successive octaves to naturally exceed 
//                                        the the given range and then clamp the 
//                                        function to that range.
//
//     BOOL bSmooth                     - Indicates whether or not to use a
//                                        filter to smooth the noise
//
// Return Value:
//
//     None.
//
//******************************************************************************
CPerlinNoise2D::CPerlinNoise2D(float fPersistence, UINT uOctaves, DWORD dwSeed, 
                    INTERPOLATIONTYPE irp, BOOL bClamp, BOOL bSmooth) :
                    CPerlinNoise(fPersistence, uOctaves, dwSeed, irp, bClamp)
{
    if (bSmooth) {
        m_pfnNoise = CPerlinNoise2D::SmoothNoise2D;
    }
    else {
        m_pfnNoise = CPerlinNoise2D::Noise2D;
    }
}

//******************************************************************************
//
// Method:
//
//     ~CPerlinNoise2D
//
// Description:
//
//     Destruct a CPerlinNoise2D object.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
CPerlinNoise2D::~CPerlinNoise2D() {
}

//******************************************************************************
//
// Method:
//
//     EnableSmoothing
//
// Description:
//
//     Enable or disable the use of a filter to smooth the noise.
//
// Arguments:
//
//     BOOL bEnable                     - TRUE to enable the filter, FALSE
//                                        to disable it
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CPerlinNoise2D::EnableSmoothing(BOOL bEnable) {

    if (bEnable) {
        m_pfnNoise = CPerlinNoise2D::SmoothNoise2D;
    }
    else {
        m_pfnNoise = CPerlinNoise2D::Noise2D;
    }
}

//******************************************************************************
//
// Method:
//
//     GetIntensity
//
// Description:
//
//     Calculate the intensity (amplitude) of the noise function at the given
//     coordinates.
//
// Arguments:
//
//     float x                          - x coordinate
//
//     float y                          - y coordinate
//
// Return Value:
//
//     The intensity of the noise at the given coordinates.
//
//******************************************************************************
float CPerlinNoise2D::GetIntensity(float x, float y) {

    float fIntensity = 0.0f, fAmplitude, fFrequency, fTotalAmp = 0.0f;

    fAmplitude = 1.0f;

    for (m_uOctave = 0; m_uOctave < m_uOctaves; m_uOctave++) {

//        fFrequency = (float)pow(2.0, (double)m_uOctave);
        fFrequency = (float)(0x1 << m_uOctave);
//        fAmplitude = (float)pow(m_fPersistence, (double)m_uOctave);
        fIntensity = fIntensity + InterpolatedNoise2D(x * fFrequency, y * fFrequency) * fAmplitude;
        fTotalAmp += fAmplitude;
        fAmplitude *= m_fPersistence;
    }

    if (m_bClamp) {
        fTotalAmp = 1.0f;
        if (fIntensity < -1.0f) {
            fIntensity = -1.0f;
        }
        else if (fIntensity > 1.0f) {
            fIntensity = 1.0f;
        }
    }

    return m_fRangeBase + m_fRangeMagnitude * ((fIntensity + fTotalAmp) / (fTotalAmp * 2.0f));
}

//******************************************************************************
//
// Method:
//
//     InterpolatedNoise2D
//
// Description:
//
//     Calculate the noise value that corresponds to the given two 
//     dimesnional coordinates for the given octave.  Noise values are calculated
//     for the integer points that bound the given coordinates and the noise
//     value for the coordinates are then interpolated from the results based
//     on where the coordinates lie between the bounding points and on the
//     interpolation function set for the object.
//
// Arguments:
//
//     float x                          - x coordinate
//
//     float y                          - y coordinate
//
// Return Value:
//
//     The interpolated value of the noise at the given coordinates.
//
//******************************************************************************
float CPerlinNoise2D::InterpolatedNoise2D(float x, float y) {

    int     nx, ny;
    float   fx, fy;
    float   i1, i2;

    nx = (int)floor(x);
    ny = (int)floor(y);
    fx = x - (float)nx;
    fy = y - (float)ny;

    i1 = (this->*m_pfnInterpolate)((this->*m_pfnNoise)(nx, ny  ), (this->*m_pfnNoise)(nx+1, ny  ), fx);
    i2 = (this->*m_pfnInterpolate)((this->*m_pfnNoise)(nx, ny+1), (this->*m_pfnNoise)(nx+1, ny+1), fx);

    return (this->*m_pfnInterpolate)(i1, i2, fy);
}

//******************************************************************************
//
// Method:
//
//     Noise2D
//
// Description:
//
//     Calculate the noise value that corresponds to the given two dimesnional
//     coordinates for the given octave.
//
// Arguments:
//
//     int x                            - x coordinate
//
//     int y                            - y coordinate
//
// Return Value:
//
//     The value of the noise at the given coordinates.
//
//******************************************************************************
float CPerlinNoise2D::Noise2D(int x, int y) {

    DWORD   dwSeed;

    dwSeed = x + y * 57;
    dwSeed = (dwSeed << 13) ^ dwSeed;

    return (1.0f - ((dwSeed * (dwSeed * dwSeed * m_plPrimesList[m_uOctave].uPrime1 + m_plPrimesList[m_uOctave].uPrime2) + m_plPrimesList[m_uOctave].uPrime3) & 0x7FFFFFFF) / 1073741824.0f);
}

//******************************************************************************
//
// Method:
//
//     SmoothNoise2D
//
// Description:
//
//     Calculate the filtered noise value that corresponds to the given two 
//     dimesnional coordinates for the given octave.  Noise values are calculated
//     for neighboring coordinates and then used to bias the noise for the
//     given coordinates.
//
// Arguments:
//
//     int x                            - x coordinate
//
//     int y                            - y coordinate
//
// Return Value:
//
//     The value of the filtered noise at the given coordinates.
//
//******************************************************************************
float CPerlinNoise2D::SmoothNoise2D(int x, int y) {

    float fCorners, fSides, fCenter;

    fCorners = (Noise2D(x-1, y-1) + Noise2D(x+1, y-1) + 
                Noise2D(x-1, y+1) + Noise2D(x+1, y+1)) / 16.0f;
    fSides =   (Noise2D(x-1, y) + Noise2D(x+1, y) +
                Noise2D(x, y-1) + Noise2D(x, y+1)) / 8.0f;
    fCenter =   Noise2D(x, y) / 4.0f;

    return fCorners + fSides + fCenter;
}

//******************************************************************************
// CPerlinNoise3D
//******************************************************************************

//******************************************************************************
//
// Method:
//
//     CPerlinNoise3D
//
// Description:
//
//     Construct a CPerlinNoise3D object.
//
// Arguments:
//
//     float fPersistence               - Persistence of the noise (the
//                                        amplitude of each frequency)
//
//     UINT uOctaves                    - Number of octaves to add together
//
//     DWORD dwSeed                     - Seed value for the noise
//
//     INTERPOLATIONTYPE irp            - Function to use in interpolating
//                                        between noise sample points
//
//     BOOL bClamp                      - Indicates whether to scale the 
//                                        computed noise function so it falls
//                                        entirely within its given range or to 
//                                        allow the positive interference of 
//                                        successive octaves to naturally exceed 
//                                        the the given range and then clamp the 
//                                        function to that range.
//
//     BOOL bSmooth                     - Indicates whether or not to use a
//                                        filter to smooth the noise
//
// Return Value:
//
//     None.
//
//******************************************************************************
CPerlinNoise3D::CPerlinNoise3D(float fPersistence, UINT uOctaves, DWORD dwSeed, 
                    INTERPOLATIONTYPE irp, BOOL bClamp, BOOL bSmooth) :
                    CPerlinNoise(fPersistence, uOctaves, dwSeed, irp, bClamp)
{
    if (bSmooth) {
        m_pfnNoise = CPerlinNoise3D::SmoothNoise3D;
    }
    else {
        m_pfnNoise = CPerlinNoise3D::Noise3D;
    }
}

//******************************************************************************
//
// Method:
//
//     ~CPerlinNoise3D
//
// Description:
//
//     Destruct a CPerlinNoise3D object.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
CPerlinNoise3D::~CPerlinNoise3D() {
}

//******************************************************************************
//
// Method:
//
//     EnableSmoothing
//
// Description:
//
//     Enable or disable the use of a filter to smooth the noise.
//
// Arguments:
//
//     BOOL bEnable                     - TRUE to enable the filter, FALSE
//                                        to disable it
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CPerlinNoise3D::EnableSmoothing(BOOL bEnable) {

    if (bEnable) {
        m_pfnNoise = CPerlinNoise3D::SmoothNoise3D;
    }
    else {
        m_pfnNoise = CPerlinNoise3D::Noise3D;
    }
}

//******************************************************************************
//
// Method:
//
//     GetIntensity
//
// Description:
//
//     Calculate the intensity (amplitude) of the noise function at the given
//     coordinates.
//
// Arguments:
//
//     float x                          - x coordinate
//
//     float y                          - y coordinate
//
//     float z                          - z coordinate
//
// Return Value:
//
//     The intensity of the noise at the given coordinates.
//
//******************************************************************************
float CPerlinNoise3D::GetIntensity(float x, float y, float z) {

    float fIntensity = 0.0f, fAmplitude, fFrequency, fTotalAmp = 0.0f;

    fAmplitude = 1.0f;

    for (m_uOctave = 0; m_uOctave < m_uOctaves; m_uOctave++) {

//        fFrequency = (float)pow(2.0, (double)m_uOctave);
        fFrequency = (float)(0x1 << m_uOctave);
//        fAmplitude = (float)pow(m_fPersistence, (double)m_uOctave);
        fIntensity = fIntensity + InterpolatedNoise3D(x * fFrequency, y * fFrequency, z * fFrequency) * fAmplitude;
        fTotalAmp += fAmplitude;
        fAmplitude *= m_fPersistence;
    }

    if (m_bClamp) {
        fTotalAmp = 1.0f;
        if (fIntensity < -1.0f) {
            fIntensity = -1.0f;
        }
        else if (fIntensity > 1.0f) {
            fIntensity = 1.0f;
        }
    }

    return m_fRangeBase + m_fRangeMagnitude * ((fIntensity + fTotalAmp) / (fTotalAmp * 2.0f));
}

//******************************************************************************
//
// Method:
//
//     InterpolatedNoise3D
//
// Description:
//
//     Calculate the noise value that corresponds to the given three
//     dimesnional coordinates for the given octave.  Noise values are calculated
//     for the integer points that bound the given coordinates and the noise
//     value for the coordinates are then interpolated from the results based
//     on where the coordinates lie between the bounding points and on the
//     interpolation function set for the object.
//
// Arguments:
//
//     float x                          - x coordinate
//
//     float y                          - y coordinate
//
//     float z                          - z coordinate
//
// Return Value:
//
//     The interpolated value of the noise at the given coordinates.
//
//******************************************************************************
float CPerlinNoise3D::InterpolatedNoise3D(float x, float y, float z) {

    int     nx, ny, nz;
    float   fx, fy, fz;
    float   i1, i2, i3, i4, i5, i6;

    nx = (int)floor(x);
    ny = (int)floor(y);
    nz = (int)floor(z);
    fx = x - (float)nx;
    fy = y - (float)ny;
    fz = z - (float)nz;

    i3 = (this->*m_pfnInterpolate)((this->*m_pfnNoise)(nx,   ny,   nz),   
                                   (this->*m_pfnNoise)(nx+1, ny  , nz),   fx);
    i4 = (this->*m_pfnInterpolate)((this->*m_pfnNoise)(nx,   ny+1, nz),   
                                   (this->*m_pfnNoise)(nx+1, ny+1, nz),   fx);

    i5 = (this->*m_pfnInterpolate)((this->*m_pfnNoise)(nx,   ny,   nz+1), 
                                   (this->*m_pfnNoise)(nx+1, ny,   nz+1), fx);
    i6 = (this->*m_pfnInterpolate)((this->*m_pfnNoise)(nx,   ny+1, nz+1), 
                                   (this->*m_pfnNoise)(nx+1, ny+1, nz+1), fx);

    i1 = (this->*m_pfnInterpolate)(i3, i4, fy);
    i2 = (this->*m_pfnInterpolate)(i5, i6, fy);

    return (this->*m_pfnInterpolate)(i1, i2, fz);
}

//******************************************************************************
//
// Method:
//
//     Noise3D
//
// Description:
//
//     Calculate the noise value that corresponds to the given three dimesnional
//     coordinates for the given octave.
//
// Arguments:
//
//     int x                            - x coordinate
//
//     int y                            - y coordinate
//
//     int z                            - z coordinate
//
// Return Value:
//
//     The value of the noise at the given coordinates.
//
//******************************************************************************
float CPerlinNoise3D::Noise3D(int x, int y, int z) {

    DWORD   dwSeed;

    dwSeed = x + y * 57 + z * 117;
    dwSeed = (dwSeed << 13) ^ dwSeed;

    return (1.0f - ((dwSeed * (dwSeed * dwSeed * m_plPrimesList[m_uOctave].uPrime1 + m_plPrimesList[m_uOctave].uPrime2) + m_plPrimesList[m_uOctave].uPrime3) & 0x7FFFFFFF) / 1073741824.0f);
}

//******************************************************************************
//
// Method:
//
//     SmoothNoise3D
//
// Description:
//
//     Calculate the filtered noise value that corresponds to the given three
//     dimesnional coordinates for the given octave.  Noise values are calculated
//     for neighboring coordinates and then used to bias the noise for the
//     given coordinates.
//
// Arguments:
//
//     int x                            - x coordinate
//
//     int y                            - y coordinate
//
//     int z                            - z coordinate
//
// Return Value:
//
//     The value of the filtered noise at the given coordinates.
//
//******************************************************************************
float CPerlinNoise3D::SmoothNoise3D(int x, int y, int z) {

    float fEnds, fCorners, fSides, fCenter;

    fEnds =    (Noise3D(x-1, y-1, z-1) + Noise3D(x+1, y-1, z-1) +
                Noise3D(x-1, y+1, z-1) + Noise3D(x+1, y+1, z-1) +
                Noise3D(x-1, y-1, z+1) + Noise3D(x+1, y-1, z+1) +
                Noise3D(x-1, y+1, z+1) + Noise3D(x+1, y+1, z+1)) / 64.0f;
    fCorners = (Noise3D(x-1, y-1, z) + Noise3D(x+1, y-1, z) + 
                Noise3D(x-1, y+1, z) + Noise3D(x+1, y+1, z) +
                Noise3D(x-1, y, z-1) + Noise3D(x+1, y, z-1) +
                Noise3D(x, y-1, z-1) + Noise3D(x, y+1, z-1) +
                Noise3D(x-1, y, z+1) + Noise3D(x+1, y, z+1) +
                Noise3D(x, y-1, z+1) + Noise3D(x, y+1, z+1)) / 32.0f;
    fSides =   (Noise3D(x-1, y, z) + Noise3D(x+1, y, z) +
                Noise3D(x, y-1, z) + Noise3D(x, y+1, z) +
                Noise3D(x, y, z-1) + Noise3D(x, y, z+1)) / 16.0f;
    fCenter =   Noise3D(x, y, z) / 8.0f;

    return fEnds + fCorners + fSides + fCenter;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dbase\rsrcdata.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    rsrcdata.h

Author:

    Matt Bronder

Description:

    Resource data list.

*******************************************************************************/

#ifndef __RSRCDATA_H__
#define __RSRCDATA_H__

BOOL LoadResourceFile(LPCTSTR szName, LPVOID* ppvData, LPDWORD pdwSize);
void UnloadResourceFile(LPCTSTR szName);

#endif // __RSRCDATA_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dbase\scene.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    scene.h

Author:

    Matt Bronder

Description:

    Direct3D scene functions.

*******************************************************************************/

#ifndef __SCENE_H__
#define __SCENE_H__

//******************************************************************************
// Preprocessor definitions
//******************************************************************************

#define FLT_INFINITE                3.402823466e+38F //FLT_MAX

//******************************************************************************
// Forward declarations
//******************************************************************************

class CScene;

//******************************************************************************
// Data types
//******************************************************************************

typedef void (CScene::* FADEPROC)(void);

//******************************************************************************
class CScene : public CObject {

protected:

    CDisplay*                       m_pDisplay;
    LPDIRECT3DDEVICE8               m_pDevice;

    BOOL                            m_bDisplayOK;

    BOOL                            m_bPaused;
    BOOL                            m_bAdvance;
    static float                    m_fTimeDilation;
    float                           m_fFPS;
    static BOOL                     m_bShowFPS;
    static BOOL                     m_bShowMode;
    TCHAR                           m_szDisplayMode[64];

    DWORD                           m_dwInitialState;

    CAMERA                          m_camInitial;

    float                           m_fFrameDuration;
    float                           m_fTimeDuration;
    float                           m_fTime;
    float                           m_fLastTime;
    float                           m_fTimeDelta;
    float                           m_fFrame;
    float                           m_fLastFrame;
    float                           m_fFrameDelta;

#ifdef UNDER_XBOX
    BOOL                            m_bQuit;
#endif // UNDER_XBOX

    JOYSTATE                        m_jsJoys;
    JOYSTATE                        m_jsLast;

    D3DXMATRIX                      m_mIdentity;

    TLVERTEX                        m_prBackground[4];

    BOOL                            m_bFade;
    FADEPROC                        m_pfnFade;
    TLVERTEX                        m_prFade[4];
    BYTE                            m_fadeAlpha;

    static UINT                     m_uCreated;
    BOOL                            m_bCreated;

public:

                                    CScene();
                                    ~CScene();

    virtual ULONG                   Release();

    virtual BOOL                    Create(CDisplay* pDisplay);
    virtual BOOL                    Exhibit(int *pnExitCode);

    virtual void                    SetFrameDuration(float fNumFrames);
    virtual void                    SetTimeDuration(float fSeconds);

protected:

    virtual BOOL                    Prepare();
    virtual BOOL                    Setup();
    virtual BOOL                    Initialize();
    virtual void                    Efface();
    virtual void                    Update();
    virtual BOOL                    Render();
    virtual BOOL                    Reset();

    virtual void                    ProcessInput();
    virtual BOOL                    InitView();

    virtual BOOL                    WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, 
                                            WPARAM wParam, LPARAM lParam);

    virtual void                    ShowFrameRate();
    virtual void                    ShowDisplayMode();
    virtual void                    InitDisplayModeString();

    virtual void                    FadeOut();
    virtual void                    ApplyFade();

    friend BOOL                     InitScene(LPVOID pvParam);
    friend void                     EffaceScene(LPVOID pvParam);

    friend BOOL                     SceneWndProc(LPVOID pvParam, LRESULT* plr, 
                                             HWND hWnd, UINT uMsg, 
                                             WPARAM wParam, LPARAM lParam);
};

#endif //__SCENE_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dbase\rsrcdata.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    rsrcdata.cpp

Author:

    Matt Bronder

Description:

    Resource loading and unloading.

*******************************************************************************/

#include "d3dbase.h"

//******************************************************************************
BOOL LoadResourceFile(LPCTSTR szName, LPVOID* ppvData, LPDWORD pdwSize) {

#ifndef UNDER_XBOX

    HGLOBAL     hg;
    HRSRC       hrsrc;
    LPBYTE      pData;

    if (hrsrc = FindResource(GetInstance(), szName, RT_RCDATA)) {
        if (ppvData) {
            if (hg = LoadResource(GetInstance(), hrsrc)) {
                *ppvData = LockResource(hg);
            }
            else {
                *ppvData = NULL;
            }
            if (!*ppvData) {
                return FALSE;
            }
        }
        if (pdwSize) {
            *pdwSize = SizeofResource(GetInstance(), hrsrc);
        }

        return TRUE;
    }
    else {
        return FALSE;
    }

#else

    PVOID pvFile;
    BOOL bRet = FALSE;
#ifdef UNICODE
    char szBuffer[MAX_PATH];
    LPSTR szResource;
#endif

    // If the high order word of the name is zero, the name is a resource
    // identifier rather than a pointer to the name string
    if (!(BOOL)((DWORD)szName >> 16)) {
        return FALSE;
    }

#ifndef UNICODE
    szResource = szName;
#else
    wcstombs(szBuffer, szName, MAX_PATH);
    szResource = szBuffer;
#endif

    pvFile = XLoadSection(szResource);
    if (pvFile) {
        if (ppvData) {
            *ppvData = pvFile;
        }
        if (pdwSize) {
            HANDLE hSection = XGetSectionHandle(szResource);
            *pdwSize = XGetSectionSize(hSection);
        }
        bRet = TRUE;
    }

    return bRet;

#endif // UNDER_XBOX
}

//******************************************************************************
void UnloadResourceFile(LPCTSTR szName) {

#ifdef UNDER_XBOX

    PVOID pvFile;
#ifdef UNICODE
    char szBuffer[MAX_PATH];
    LPSTR szResource;
#endif

    // If the high order word of the name is zero, the name is a resource
    // identifier rather than a pointer to the name string
    if (!(BOOL)((DWORD)szName >> 16)) {
        return;
    }

#ifndef UNICODE
    szResource = szName;
#else
    wcstombs(szBuffer, szName, MAX_PATH);
    szResource = szBuffer;
#endif

    XFreeSection(szResource);

#endif // UNDER_XBOX
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dbase\texture.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    texture.h

Author:

    Matt Bronder

Description:

    Direct3D texture routines.

*******************************************************************************/

#ifndef __TEXTURE_H__
#define __TEXTURE_H__

//******************************************************************************
// Preprocessor definitions
//******************************************************************************

#define COLORKEY_NONE       0xFF000000
#define COLORKEY_PIXEL1     0x01000000

#define TTYPE_TEXTURE       0x00000000
#define TTYPE_CUBEMAP       0x00000001
#define TTYPE_VOLUME        0x00000002
#define TTYPE_BUMPMAP       0x00000004
#define TTYPE_NORMALMAP     0x00000008
#define TTYPE_MIPMAP        0x00000100
#define TTYPE_TARGET        0x00000200
#define TTYPE_DEPTH         0x00000400
#define TTYPE_RESOURCEMASK  0x000000FF
#define TTYPE_MIPLEVELMASK  0x0F000000

#define TTYPE_MIPLEVELS(x)  (TTYPE_MIPMAP | ((x) << 24))

#ifndef UNDER_XBOX
#define PALETTECOLOR        PALETTEENTRY
#else
#define PALETTECOLOR        D3DCOLOR
#endif // UNDER_XBOX

//******************************************************************************
// Data types
//******************************************************************************

typedef DWORD               TEXTURETYPE;

//******************************************************************************
// Structures
//******************************************************************************

//******************************************************************************
typedef struct _TEXTUREDESC {
    LPDIRECT3DBASETEXTURE8  pd3dtb;
    TCHAR                   szName[MAX_PATH];
    WORD                    wResourceID;
    UINT                    uWidth;
    UINT                    uHeight;
    UINT                    uDepth;
    D3DFORMAT               fmt;
    TEXTURETYPE             tt;
    D3DPOOL                 pool;
    float                   fAlpha;
    D3DCOLOR                cColorKey;
    struct _TEXTUREDESC*    ptexdNext;
} TEXTUREDESC, *PTEXTUREDESC;

//******************************************************************************
typedef struct _ARGBPIXELDESC {
    DWORD   dwAMask;
    DWORD   dwRMask;
    DWORD   dwGMask;
    DWORD   dwBMask;
    DWORD   dwAShift;
    DWORD   dwRShift;
    DWORD   dwGShift;
    DWORD   dwBShift;
    UINT    uStride;
} ARGBPIXELDESC, *PARGBPIXELDESC;

//******************************************************************************
// Function prototypes
//******************************************************************************

LPDIRECT3DBASETEXTURE8  CreateTexture(LPDIRECT3DDEVICE8 pDevice, UINT uWidth, UINT uHeight,
                                D3DFORMAT fmt = D3DFMT_R5G6B5, 
                                TEXTURETYPE tt = TTYPE_TEXTURE,
                                D3DPOOL pool = POOL_DEFAULT);
LPDIRECT3DBASETEXTURE8  CreateTexture(LPDIRECT3DDEVICE8 pDevice, UINT uWidth, UINT uHeight, 
                                UINT uDepth, D3DFORMAT fmt = D3DFMT_R5G6B5, 
                                TEXTURETYPE tt = TTYPE_TEXTURE,
                                D3DPOOL pool = POOL_DEFAULT);
LPDIRECT3DBASETEXTURE8  CreateTexture(LPDIRECT3DDEVICE8 pDevice, LPCTSTR szName, 
                                D3DFORMAT fmt = D3DFMT_R5G6B5,
                                TEXTURETYPE tt = TTYPE_TEXTURE,
                                PALETTECOLOR* ppcPalette = NULL,
                                float fAlpha = 1.0f,
                                D3DCOLOR cColorKey = COLORKEY_NONE,
                                D3DPOOL pool = POOL_DEFAULT,
                                UINT uWidth = D3DX_DEFAULT, 
                                UINT uHeight = D3DX_DEFAULT);
void                    ReleaseTexture(LPDIRECT3DBASETEXTURE8 pd3dt);
void                    ReleaseTextures();
void                    RemoveTexture(LPDIRECT3DBASETEXTURE8 pd3dt);

BOOL                    FilterTexture(LPDIRECT3DBASETEXTURE8 pd3dt, 
                                PALETTECOLOR* ppcPalette = NULL, 
                                UINT uSrcLevel = D3DX_DEFAULT, 
                                DWORD dwFilter = D3DX_FILTER_BOX);

BOOL                    SetTranslucency(LPDIRECT3DBASETEXTURE8 pd3dt, 
                                PALETTECOLOR* ppcPalette, float fAlpha, 
                                D3DCOLOR cColorKey = COLORKEY_NONE);

DWORD                   ColorToPixel(D3DFORMAT fmt, PALETTECOLOR* ppcPalette, 
                                D3DCOLOR c);

HRESULT                 CopyTexture(LPDIRECT3DBASETEXTURE8 pd3dtDst,
                                PALETTECOLOR* ppcPalDst,
                                LPDIRECT3DBASETEXTURE8 pd3dtSrc,
                                PALETTECOLOR* ppcPalSrc, DWORD dwFilter);

LPDIRECT3DCUBETEXTURE8  CreateNormalMap(LPDIRECT3DDEVICE8 pDevice, UINT uLength = 256, 
                                float fBumpDelta = 0.0f,
                                D3DFORMAT fmt = D3DFMT_A8R8G8B8, 
                                BOOL bMipmap = TRUE, 
                                D3DPOOL pool = POOL_DEFAULT);

LPDIRECT3DCUBETEXTURE8  CreateHalfVectorMap(LPDIRECT3DDEVICE8 pDevice, 
                                D3DVECTOR* pvLightDir, 
                                UINT uLength = 32,
                                D3DFORMAT fmt = D3DFMT_A8R8G8B8,
                                BOOL bMipmap = TRUE,
                                D3DPOOL pool = POOL_DEFAULT);

BOOL                    UpdateHalfVectorMap(LPDIRECT3DCUBETEXTURE8 pd3dtc,
                                D3DVECTOR* pvLightDir);

BOOL                    WorldVectorToTangentSpace(PTCOORD3 ptcTangent, DWORD dwStrideTangent,
                                D3DVECTOR* pvPosition, DWORD dwStridePosition,
                                PTCOORD2 ptcTCoord, DWORD dwStrideTCoord,
                                LPWORD pwIndices, DWORD dwNumPrimitives,
                                D3DPRIMITIVETYPE d3dpt, D3DMATRIX* pmWorld, 
                                D3DVECTOR* pvVector, BOOL bInterpolate);

BOOL                    HalfVectorToTangentSpace(PTCOORD3 ptcTangent, DWORD dwStrideTangent,
                                D3DVECTOR* pvPosition, DWORD dwStridePosition,
                                PTCOORD2 ptcTCoord, DWORD dwStrideTCoord,
                                LPWORD pwIndices, DWORD dwNumPrimitives,
                                D3DPRIMITIVETYPE d3dpt, D3DMATRIX* pmWorld, 
                                D3DVECTOR* pvLightDir, D3DVECTOR* pvViewPos,
                                BOOL bInterpolate);

BOOL                    SetTangentTransforms(PMATRIX3X3 pmTangent, DWORD dwStrideTangent,
                                D3DVECTOR* pvPosition, DWORD dwStridePosition,
                                PTCOORD2 ptcTCoord, DWORD dwStrideTCoord,
                                LPWORD pwIndices, DWORD dwNumPrimitives,
                                D3DPRIMITIVETYPE d3dpt, D3DMATRIX* pmWorld,
                                BOOL bInterpolate);

LPDIRECT3DTEXTURE8      CreateDiffuseMap(LPDIRECT3DDEVICE8 pDevice, UINT uWidth, UINT uHeight, 
                                D3DCOLOR c, D3DFORMAT fmt, BOOL bMipmap = FALSE,
                                PALETTECOLOR* ppcPalette = NULL,
                                D3DPOOL pool = POOL_DEFAULT);

// ##TODO: CreateSpecularMap which takes a power argument and creates a corresponding map

BOOL                    SetDiffuseMapCoords(PTCOORD2 ptcLightMap, DWORD dwStrideLMap,
                                D3DVECTOR* pvPosition, DWORD dwStridePosition,
                                PTCOORD2 ptcOffsetMap, DWORD dwStrideOMap,
                                LPWORD pwIndices, DWORD dwNumPrimitives,
                                D3DPRIMITIVETYPE d3dpt, D3DMATRIX* pmWorld, 
                                D3DVECTOR* pvLightDir, BOOL bInterpolate);
BOOL                    SetSpecularMapCoords(PTCOORD2 ptcLightMap, DWORD dwStrideLMap,
                                D3DVECTOR* pvPosition, DWORD dwStridePosition,
                                PTCOORD2 ptcOffsetMap, DWORD dwStrideOMap,
                                LPWORD pwIndices, DWORD dwNumPrimitives,
                                D3DPRIMITIVETYPE d3dpt, D3DMATRIX* pmWorld, 
                                D3DVECTOR* pvLightDir, D3DVECTOR* pvViewPos,
                                BOOL bInterpolate);

PTEXTUREDESC    GetTextureDesc(LPDIRECT3DBASETEXTURE8 pd3dt);
void            GetARGBPixelDesc(D3DFORMAT fmt, PARGBPIXELDESC ppixd);

void            ConvertPALETTEENTRYToD3DCOLOR(LPVOID pvPalette, UINT uNumEntries);
void            ConvertD3DCOLORToPALETTEENTRY(LPVOID pvPalette, UINT uNumEntries);

//******************************************************************************
// Inline functions
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     SetColorStage
//
// Description:
//
//     Set the texture stage color states for the given stage and operation
//     to the given arguments.
//
// Arguments:
//
//     CDevice* pDevice                     - Pointer to the device object
//
//     DWORD dwStage                        - Texture stage
//
//     DWORD dwArg1                         - First color argument
//
//     DWORD dwArg2                         - Second color argument
//
//     D3DTEXTUREOP                         - Color operation
//
// Return Value:
//
//     An HRESULT returned by IDirect3DDevice3::SetTextureStageState
//
//******************************************************************************
inline HRESULT SetColorStage(LPDIRECT3DDEVICE8 pDevice, DWORD dwStage, DWORD dwArg1, DWORD dwArg2, D3DTEXTUREOP d3dtop)
{
    HRESULT hr;
    hr = pDevice->SetTextureStageState(dwStage, D3DTSS_COLOROP, d3dtop);
    if (FAILED(hr)) {
        return hr;
    }
    hr = pDevice->SetTextureStageState(dwStage, D3DTSS_COLORARG1, dwArg1);
    if (FAILED(hr)) {
        return hr;
    }
    hr = pDevice->SetTextureStageState(dwStage, D3DTSS_COLORARG2, dwArg2);
    return hr;
}

//******************************************************************************
//
// Function:
//
//     SetAlphaStage
//
// Description:
//
//     Set the texture stage alpha states for the given stage and operation
//     to the given arguments.
//
// Arguments:
//
//     CDevice* pDevice                     - Pointer to the device object
//
//     DWORD dwStage                        - Texture stage
//
//     DWORD dwArg1                         - First alpha argument
//
//     DWORD dwArg2                         - Second alpha argument
//
//     D3DTEXTUREOP                         - Alpha operation
//
// Return Value:
//
//     An HRESULT returned by IDirect3DDevice3::SetTextureStageState
//
//******************************************************************************
inline HRESULT SetAlphaStage(LPDIRECT3DDEVICE8 pDevice, DWORD dwStage, DWORD dwArg1, DWORD dwArg2, D3DTEXTUREOP d3dtop)
{
    HRESULT hr;
    hr = pDevice->SetTextureStageState(dwStage, D3DTSS_ALPHAOP, d3dtop);
    if (FAILED(hr)) {
        return hr;
    }
    hr = pDevice->SetTextureStageState(dwStage, D3DTSS_ALPHAARG1, dwArg1);
    if (FAILED(hr)) {
        return hr;
    }
    hr = pDevice->SetTextureStageState(dwStage, D3DTSS_ALPHAARG2, dwArg2);
    return hr;
}

//******************************************************************************
inline D3DCOLOR VectorToColor(D3DXVECTOR3* pv) {
    
    return ((BYTE)((pv->x + 1.0f) / 2.0f * 255.0f) << 16) |
           ((BYTE)((pv->y + 1.0f) / 2.0f * 255.0f) << 8)  |
            (BYTE)((pv->z + 1.0f) / 2.0f * 255.0f);
}

//******************************************************************************
inline D3DXVECTOR3 ColorToVector(D3DCOLOR c) {

    return D3DXVECTOR3((float)((c >> 16) & 0xFF) / 127.5f - 1.0f,
                       (float)((c >> 8 ) & 0xFF) / 127.5f - 1.0f,
                       (float)((c      ) & 0xFF) / 127.5f - 1.0f);
}

#endif //__TEXTURE_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dbase\sources.inc ===
!include ..\..\..\sources.inc

TARGETNAME=d3dbase
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

!if defined(USE_VC7)
C_DEFINES=$(C_DEFINES) -Zm200
!endif

SOURCES=\
    conio.cpp \
    display.cpp \
    enum.cpp \
    fontmap.cpp \
    input.cpp \
    light.cpp \
    mesh.cpp \
    misc.cpp \
    noise.cpp \
    object.cpp \
    palette.cpp \
    rsrcdata.cpp \
    scene.cpp \
    texture.cpp \
    util.cpp \
    vibuffer.cpp \
    vpshader.cpp \
    consolbk.bmp.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dbase\util.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    util.cpp

Author:

    Matt Bronder

Description:

    Utility functions.

*******************************************************************************/

#include "d3dbase.h"

//******************************************************************************
// Globals
//******************************************************************************

static HANDLE               g_hHeap = NULL;
static HINSTANCE            g_hInstance = NULL;

//******************************************************************************
// Debugging functions
//******************************************************************************

#if defined(DEBUG) || defined(_DEBUG) || defined(DBG)
//******************************************************************************
//
// Function:
//
//     DebugString
//
// Description:
//
//     Take the formatted output and send the output to the debugger.
//
// Arguments:
//
//     LPCTSTR szFormat         - Formatting string describing the output
//
//     Variable argument list   - Data to be placed in the output string
//
// Return Value:
//
//     None.
//
//******************************************************************************
void DebugString(LPCTSTR szFormat, ...) {

    va_list vl;
#ifndef UNDER_XBOX
    TCHAR   szBuffer[2304];
#else
    TCHAR*  szBuffer = (LPTSTR)MemAlloc32(2304 * sizeof(TCHAR));
    if (!szBuffer) {
        OutputDebugString(TEXT("Insufficient memory for logging buffer allocation\n"));
        __asm int 3;
    }
#endif // UNDER_XBOX

    va_start(vl, szFormat);
//    wvsprintf(szBuffer, szFormat, vl);
    _vstprintf(szBuffer, szFormat, vl);
    va_end(vl);

    _tcscat(szBuffer, TEXT("\r\n"));

    OutputDebugString(szBuffer);

#ifdef UNDER_XBOX
    MemFree32(szBuffer);
#endif // UNDER_XBOX
}

//******************************************************************************
//
// Function:
//
//     ResultFailed
//
// Description:
//
//     Test a given return code: if the code is an error, output a debug 
//     message with the error value.  If the code is a warning, output
//     a debug message with the warning value.
//
// Arguments:
//
//     HRESULT hr               - Return code to test for an error
//
//     LPCTSTR sz               - String describing the method that produced 
//                                the return code
//
// Return Value:
//
//     TRUE if the given return code is an error, FALSE otherwise.
//
//******************************************************************************
BOOL ResultFailed(HRESULT hr, LPCTSTR sz) {

    TCHAR szError[256];

    if (SUCCEEDED(hr)) {
        return FALSE;
    }

    D3DXGetErrorString(hr, szError, 256);

    if (FAILED(hr)) {
        DebugString(TEXT("%s failed with %s [0x%X]"), sz, szError, hr);
        return TRUE;
    }
    else {
        DebugString(TEXT("%s returned %s [0x%X]"), sz, szError, hr);
    }

    return FALSE;
}
#endif // DEBUG || _DEBUG || DBG

//******************************************************************************
//
// Function:
//
//     OutputString
//
// Description:
//
//     Take the formatted output and send the output to the debugger.
//
// Arguments:
//
//     LPCTSTR szFormat         - Formatting string describing the output
//
//     Variable argument list   - Data to be placed in the output string
//
// Return Value:
//
//     None.
//
//******************************************************************************
void OutputString(LPCTSTR szFormat, ...) {

    va_list vl;
#ifndef UNDER_XBOX
    TCHAR   szBuffer[2304];
#else
    TCHAR*  szBuffer = (LPTSTR)MemAlloc32(2304 * sizeof(TCHAR));
    if (!szBuffer) {
        OutputDebugString(TEXT("Insufficient memory for logging buffer allocation\n"));
        __asm int 3;
    }
#endif // UNDER_XBOX

    va_start(vl, szFormat);
//    wvsprintf(szBuffer, szFormat, vl);
    _vstprintf(szBuffer, szFormat, vl);
    va_end(vl);

    _tcscat(szBuffer, TEXT("\r\n"));

    OutputDebugString(szBuffer);

#ifdef UNDER_XBOX
    MemFree32(szBuffer);
#endif // UNDER_XBOX
}

//******************************************************************************
// Memory allocation routines
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     CreateHeap
//
// Description:
//
//     Create a heap for the application.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CreateHeap() {

    if (g_hHeap) {
        return FALSE;
    }

    g_hHeap = HeapCreate(0, 0, 0);
    if (!g_hHeap) {
        DebugString(TEXT("HeapCreate failed [%d]"), GetLastError());
        return FALSE;
    }

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ReleaseHeap
//
// Description:
//
//     Destroy the application heap.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void ReleaseHeap() {

    if (g_hHeap) {
        if (!HeapDestroy(g_hHeap)) {
            DebugString(TEXT("HeapDestroy failed [%d]"), GetLastError());
        }
        g_hHeap = NULL;
    }
}

//******************************************************************************
//
// Function:
//
//     MemAlloc
//
// Description:
//
//     Allocate the given amount of memory from the application heap.  This 
//     memory should later be freed using the MemFree function.
//
// Arguments:
//
//     UINT uNumBytes           - Number of bytes to allocate
//
// Return Value:
//
//     Base address of the allocated memory.
//
//******************************************************************************
LPVOID MemAlloc(UINT uNumBytes) {

    LPVOID pvMem = NULL;
    if (g_hHeap) {
        pvMem = HeapAlloc(g_hHeap, 0, uNumBytes);
    }
    return pvMem;
}

//******************************************************************************
//
// Function:
//
//     MemFree
//
// Description:
//
//     Free a block of memory that was allocated using the MemAlloc function.
//
// Arguments:
//
//     LPVOID pvMem             - Base address of the memory
//
// Return Value:
//
//     None.
//
//******************************************************************************
void MemFree(LPVOID pvMem) {

    if (g_hHeap) {
        if (!HeapFree(g_hHeap, 0, pvMem)) {
            DebugString(TEXT("HeapFree failed [%d]"), GetLastError());
        }
    }
}

//******************************************************************************
//
// Function:
//
//     MemAlloc32
//
// Description:
//
//     Allocate a given amount of memory whose base address is
//     aligned along a 32 byte boundary.  This memory must later be freed
//     using the MemFree32 function.
//
// Arguments:
//
//     UINT uNumBytes           - Number of bytes to allocate
//
// Return Value:
//
//     Base address of the allocated memory.
//
//******************************************************************************
LPVOID MemAlloc32(UINT uNumBytes)
{
	LPBYTE pbyAllocated, pbyAligned = NULL;

	pbyAllocated = (LPBYTE)MemAlloc(uNumBytes + 32);
    if (pbyAllocated) {
	    pbyAligned   = (LPBYTE)((((DWORD)pbyAllocated) + 32) & ~31);
	    *(((LPDWORD)pbyAligned)-1) = (DWORD)pbyAllocated;
    }
	return pbyAligned;
}

//******************************************************************************
//
// Function:
//
//     MemFree32
//
// Description:
//
//     Free an aligned block of memory that was allocated using the MemAlloc32
//     function.
//
// Arguments:
//
//     LPVOID pvAligned         - Base address of the aligned memory
//
// Return Value:
//
//     None.
//
//******************************************************************************
void MemFree32(LPVOID pvMem)
{
	LPBYTE pbyFree;

    if (pvMem) {
	    pbyFree = (LPBYTE)*(((LPDWORD)pvMem)-1);
	    MemFree(pbyFree);
    }
}

//******************************************************************************
// Test instance
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     RegisterInstance
//
// Description:
//
//     Set the module instance of the application.
//
// Arguments:
//
//     HINSTANCE hInstance      - Instance handle
//
// Return Value:
//
//     None.
//
//******************************************************************************
void RegisterInstance(HINSTANCE hInstance) {

    g_hInstance = hInstance;
}

//******************************************************************************
//
// Function:
//
//     GetInstance
//
// Description:
//
//     Get the module instance of the application.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     Instance handle of the application module.
//
//******************************************************************************
HINSTANCE GetInstance() {

    return g_hInstance;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dbase\scene.cpp ===
/*******************************************************************************

Copyright (c) 1998 Microsoft Corporation.  All rights reserved.

File Name:

    scene.cpp

Author:

    Matt Bronder

Description:

    Scene functions.

*******************************************************************************/

#include "d3dbase.h"

#ifdef UNDER_XBOX
//#include <winfull.h>
#endif
//#include <mmsystem.h>

#ifdef UNDER_XBOX
#define DEMO_HACK
#endif // UNDER_XBOX

//******************************************************************************
// Function prototypes
//******************************************************************************

static BOOL                     InitScene(LPVOID pvParam);
static void                     EffaceScene(LPVOID pvParam);

static BOOL                     SceneWndProc(LPVOID pvParam, LRESULT* plr, 
                                             HWND hWnd, UINT uMsg, 
                                             WPARAM wParam, LPARAM lParam);

#ifdef UNDER_XBOX

WINBASEAPI
DWORD
WINAPI
GetModuleFileNameA(
    IN HMODULE hModule,
    OUT LPSTR lpFilename,
    IN DWORD nSize
    );
WINBASEAPI
DWORD
WINAPI
GetModuleFileNameW(
    IN HMODULE hModule,
    OUT LPWSTR lpFilename,
    IN DWORD nSize
    );
#ifdef UNICODE
#define GetModuleFileName  GetModuleFileNameW
#else
#define GetModuleFileName  GetModuleFileNameA
#endif // !UNICODE

WINBASEAPI
UINT
WINAPI
GetProfileIntA(
    IN LPCSTR lpAppName,
    IN LPCSTR lpKeyName,
    IN INT nDefault
    );
WINBASEAPI
UINT
WINAPI
GetProfileIntW(
    IN LPCWSTR lpAppName,
    IN LPCWSTR lpKeyName,
    IN INT nDefault
    );
#ifdef UNICODE
#define GetProfileInt  GetProfileIntW
#else
#define GetProfileInt  GetProfileIntA
#endif // !UNICODE

#endif // UNDER_XBOX

//******************************************************************************
// CScene
//******************************************************************************

float CScene::m_fTimeDilation = 1.0f;
BOOL  CScene::m_bShowFPS = FALSE;
BOOL  CScene::m_bShowMode = FALSE;
UINT  CScene::m_uCreated = 0;

//******************************************************************************
//
// Method:
//
//     CScene
//
// Description:
//
//     Initialize a scene object.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
CScene::CScene() {

    m_pDisplay = NULL;
    m_pDevice = NULL;
    m_bDisplayOK = TRUE;
    m_bPaused = FALSE;
    m_bAdvance = FALSE;
    m_fFPS = 0.0f;
    m_fFrameDuration = FLT_INFINITE;
    m_fTimeDuration = FLT_INFINITE;
    m_fTime = 0.0f;
    m_fFrame = 0.0f;
    m_fLastTime = 0.0f;
    m_fLastFrame = 0.0f;
#ifdef UNDER_XBOX
    m_bQuit = FALSE;
#endif // UNDER_XBOX
    InitMatrix(&m_mIdentity,
        1.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 1.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 1.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 1.0f
    );
    m_dwInitialState = 0xFFFFFFFF;
    m_bFade = TRUE;
    m_pfnFade = NULL;
    m_uCreated++;
    m_bCreated = FALSE;
}

//******************************************************************************
//
// Method:
//
//     ~CScene
//
// Description:
//
//     Clean up the scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
CScene::~CScene() {

    if (m_pDisplay) {
        m_pDisplay->InitSetDeviceProc(NULL, NULL);
        m_pDisplay->InitClearDeviceProc(NULL, NULL);
        m_pDisplay->InitSubWindowProc(NULL, NULL);
    }
    m_uCreated--;
}

//******************************************************************************
//
// Method:
//
//     Release
//
// Description:
//
//     Efface the scene and release it.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
ULONG CScene::Release() {

    if (RefCount() == 1) {
        Efface();
    }
    return CObject::Release();
}

//******************************************************************************
//
// Method:
//
//     Create
//
// Description:
//
//     Prepare the scene for rendering.
//
// Arguments:
//
//     CDisplay* pDisplay               - Pointer to a Display object.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CScene::Create(CDisplay* pDisplay) {

    if (m_bCreated || m_uCreated > 1) {
        return FALSE;
    }

    if (!pDisplay) {
        return FALSE;
    }

    m_pDisplay = pDisplay;

    // Set device initialization and wndproc callback functions
    pDisplay->InitSetDeviceProc(InitScene, this);
    pDisplay->InitClearDeviceProc(EffaceScene, this);
    pDisplay->InitSubWindowProc(SceneWndProc, this);

    if (!Prepare()) {
        return FALSE;
    }

    if (!Setup()) {
        return FALSE;
    }

    if (!InitView()) {
        return FALSE;
    }

    if (!Initialize()) {
        return FALSE;
    }

    m_bCreated = TRUE;

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     Exhibit
//
// Description:
//
//     Display the scene.
//
// Arguments:
//
//     int* pnExitCode              - Optional pointer to an integer that will
//                                    be set to the exit value contained in the 
//                                    wParam parameter of the WM_QUIT message 
//                                    (if received)
//
// Return Value:
//
//     TRUE if the display remains functional on exit, FALSE otherwise.
//
//******************************************************************************
BOOL CScene::Exhibit(int* pnExitCode) {

    BOOL            bMsgReady;
    float           fTime, fLastTime, fPrevTime, fTimeFreq;
    LARGE_INTEGER   qwCounter;
    DWORD           dwNumFrames = 0;
#ifndef UNDER_XBOX
    MSG             msg;
#endif // !UNDER_XBOX

    if (!m_bCreated) {
        return TRUE;
    }

    QueryPerformanceFrequency(&qwCounter);
    fTimeFreq = 1.0f / (float)qwCounter.QuadPart;
    QueryPerformanceCounter(&qwCounter);
    fLastTime = (float)qwCounter.QuadPart * fTimeFreq;
    fPrevTime = fLastTime;

    do {

#ifndef UNDER_XBOX
        // Pump messages
        if (m_pDisplay->IsActive()) {

            // When the application is active, check for new
            // messages without blocking to wait on them
            bMsgReady = PeekMessage(&msg, NULL, 0, 0, PM_REMOVE);
        }
        else {

            // The application has lost the focus and is suspended
            // so we can afford to block here until a new message
            // has arrived (and conserve CPU usage in the process)
            bMsgReady = GetMessage(&msg, NULL, 0, 0);
        }

        if (bMsgReady) {

            // If a message is ready, process it and proceed to
            // check for another message
            TranslateMessage(&msg);
            DispatchMessage(&msg);
        }
        else if (msg.message != WM_QUIT) {
#endif // !UNDER_XBOX

            // Otherwise process user input, update the next frame,
            // and draw it
            QueryPerformanceCounter(&qwCounter);
            fTime = (float)qwCounter.QuadPart * fTimeFreq;

            // Process user input
            m_pDisplay->ProcessInput();
            if (!m_pDisplay->ConsoleVisible()) {
                ProcessInput();
            }

            if (m_pDisplay->m_bTimeSync) {
                m_pDisplay->m_bTimeSync = FALSE;
            }
            else if (!m_bPaused || m_bAdvance) {
                m_fTime += (fTime - fLastTime) * m_fTimeDilation;
                m_fFrame += 1.0f;//(1.0f * m_fTimeDilation); // ##REVIEW
                if (m_fFrameDuration != FLT_INFINITE && m_fFrame > m_fFrameDuration) {
                    break;
                }
                if (m_fTimeDuration != FLT_INFINITE && m_fTime > m_fTimeDuration) {
                    break;
                }
                m_fTimeDelta = m_fTime - m_fLastTime;
                m_fFrameDelta = m_fFrame - m_fLastFrame;
                Update();
                m_fLastTime = m_fTime;
                m_fLastFrame = m_fFrame;
                m_bAdvance = FALSE;
            }

            fLastTime = fTime;

            if (!Render()) {
                break;
            }

            dwNumFrames++;

            if (fTime - fPrevTime > 1.0f) {
                m_fFPS = (float)dwNumFrames / (fTime - fPrevTime);
                fPrevTime = fTime;
                dwNumFrames = 0;
            }
#ifndef UNDER_XBOX
        }

    } while (msg.message != WM_QUIT);
#else
    } while (!m_bQuit);
#endif // UNDER_XBOX

    if (pnExitCode) {
#ifndef UNDER_XBOX
        *pnExitCode = msg.wParam;
#else
        *pnExitCode = 0;
#endif // UNDER_XBOX
    }

    return m_bDisplayOK;
}

//******************************************************************************
//
// Method:
//
//     SetFrameDuration
//
// Description:
//
//     Set the scene duration in frames.
//
// Arguments:
//
//     float fNumFrames             - Duration of the scene measured in frames.
//                                    This number is checked against the current
//                                    frame set during UpdateScene and is 
//                                    subject to time dilation.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CScene::SetFrameDuration(float fNumFrames) {

    m_fFrameDuration = fNumFrames;
}

//******************************************************************************
//
// Method:
//
//     SetTimeDuration
//
// Description:
//
//     Set the scene duration in seconds.
//
// Arguments:
//
//     float fSeconds               - Duration of the scene measured in seconds.
//                                    This number is checked against the current
//                                    scene time given to UpdateScene and is 
//                                    subject to time dilation.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CScene::SetTimeDuration(float fSeconds) {

    m_fTimeDuration = fSeconds;
}

//******************************************************************************
//
// Method:
//
//     Prepare
//
// Description:
//
//     Initialize all device-independent data to be used in the scene.  This
//     method is called only once at creation (as opposed to Setup and
//     Initialize, which get called each time the device is Reset).
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the scene was successfully prepared, FALSE if it was not.
//
//******************************************************************************
BOOL CScene::Prepare() {

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     Setup
//
// Description:
//
//     Obtain the device interface pointer from the display, save the current
//     state of the device, and initialize the background vertices to the
//     dimensions of the render target.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the scene was successfully set up for initialization, FALSE if
//     it was not.
//
//******************************************************************************
BOOL CScene::Setup() {

    // Obtain a pointer to the device from the display (if the scene
    // is being re-initialized the device may have changed in response to
    // the selection of a new adapter)
    m_pDevice = m_pDisplay->GetDevice8();

    if (!m_pDevice) {
        return FALSE;
    }

    // Capture the state of the device
#ifndef DEMO_HACK
    if (FAILED(m_pDevice->CreateStateBlock(D3DSBT_ALL, &m_dwInitialState))) {
        return FALSE;
    }
#endif

    // Initialize background vertices
    m_prBackground[0] = TLVERTEX(D3DXVECTOR3(-0.5f, (float)(m_pDisplay->GetHeight()) - 0.5f, 0.9999f), 0.01f, RGBA_MAKE(255,255,255,255), RGB_MAKE(0,0,0), 0.0f, 1.0f);
    m_prBackground[1] = TLVERTEX(D3DXVECTOR3(-0.5f, -0.5f, 0.9999f), 0.01f, RGBA_MAKE(255,255,255,255), RGB_MAKE(0,0,0), 0.0f, 0.0f);
    m_prBackground[2] = TLVERTEX(D3DXVECTOR3((float)(m_pDisplay->GetWidth()) - 0.5f, -0.5f, 0.9999f), 0.01f, RGBA_MAKE(255,255,255,255), RGB_MAKE(0,0,0), 1.0f, 0.0f);
    m_prBackground[3] = TLVERTEX(D3DXVECTOR3((float)(m_pDisplay->GetWidth()) - 0.5f, (float)(m_pDisplay->GetHeight()) - 0.5f, 0.9999f), 0.01f, RGBA_MAKE(255,255,255,255), RGB_MAKE(0,0,0), 1.0f, 1.0f);

    // Initialize the display mode string
    InitDisplayModeString();

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     Initialize
//
// Description:
//
//     Initialize the device and all device objects to be used in the scene (or
//     at least all device resource objects to be created in the video, 
//     non-local video, or default memory pools).
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the scene was successfully initialized for rendering, FALSE if
//     it was not.
//
//******************************************************************************
BOOL CScene::Initialize() {

    D3DLIGHT8 light;
    HRESULT   hr;

    // Create a directional light
    memset(&light, 0, sizeof(D3DLIGHT8));
    light.Type = D3DLIGHT_DIRECTIONAL;
    light.Diffuse.r = 1.0f;
    light.Diffuse.g = 1.0f;
    light.Diffuse.b = 1.0f;
    light.Diffuse.a = 1.0f;
    light.Specular.r = 1.0f;
    light.Specular.g = 1.0f;
    light.Specular.b = 1.0f;
    light.Specular.a = 1.0f;
    light.Ambient.r = 1.0f;
    light.Ambient.g = 1.0f;
    light.Ambient.b = 1.0f;
    light.Ambient.a = 1.0f;
    light.Direction = D3DXVECTOR3(0.0f, -1.0f, 1.0f);

    hr = m_pDevice->SetLight(0, &light);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetLight"))) {
        return FALSE;
    }

    hr = m_pDevice->LightEnable(0, TRUE);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::LightEnable"))) {
        return FALSE;
    }

    // Set a material
    if (!SetMaterial(m_pDevice, RGBA_MAKE(255, 255, 255, 255))) {
        return FALSE;
    }

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     Efface
//
// Description:
//
//     Release all device resource objects (or at least those objects created
//     in video memory, non-local video memory, or the default memory pools)
//     and restore the device to its initial state.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CScene::Efface() {

    ReleaseVertexBuffers();
    ReleaseIndexBuffers();
    ReleaseTextures();
#ifdef UNDER_XBOX
    ReleasePalettes();
#endif // UNDER_XBOX

    // Revert to the initial device state
    if (m_bDisplayOK && m_pDevice && m_dwInitialState != 0xFFFFFFFF) {
#ifndef DEMO_HACK
        m_pDevice->ApplyStateBlock(m_dwInitialState);
        m_pDevice->DeleteStateBlock(m_dwInitialState);
#endif
    }
}

//******************************************************************************
//
// Method:
//
//     Update
//
// Description:
//
//     Update the state of the scene to coincide with the given time.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CScene::Update() {

    // Update the scene
}

//******************************************************************************
//
// Method:
//
//     Render
//
// Description:
//
//     Render a scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CScene::Render() {

    LVERTEX  plrVertices[3];
    DWORD    dwClearFlags = D3DCLEAR_TARGET;
    HRESULT  hr;

    plrVertices[0] = LVERTEX(D3DXVECTOR3(-10.0f, -10.0f, 0.0f), RGBA_MAKE(255, 0, 0, 255), 0, 0.0f, 0.0f);
    plrVertices[1] = LVERTEX(D3DXVECTOR3( 0.0f,  10.0f, 0.0f), RGBA_MAKE(0, 0, 255, 255), 0, 0.0f, 0.0f);
    plrVertices[2] = LVERTEX(D3DXVECTOR3( 10.0f, -10.0f, 0.0f), RGBA_MAKE(0, 255, 0, 255), 0, 0.0f, 0.0f);

#ifndef UNDER_XBOX
    hr = m_pDevice->TestCooperativeLevel();
    if (FAILED(hr)) {
        if (hr == D3DERR_DEVICELOST) {
            return TRUE;
        }
        if (hr == D3DERR_DEVICENOTRESET) {
            if (!Reset()) {
                return FALSE;
            }
        }
    }
#endif // !UNDER_XBOX

    // Clear the rendering target
    if (m_pDisplay->IsDepthBuffered()) {
        dwClearFlags |= D3DCLEAR_ZBUFFER;
    }
    m_pDevice->Clear(0, NULL, dwClearFlags, RGB_MAKE(0, 0, 0), 1.0f, 0);

    // Begin the scene
    m_pDevice->BeginScene();

    // Position the view using the default camera
    m_pDisplay->SetView();

    // Disable lighting
    m_pDevice->SetRenderState(D3DRS_LIGHTING, FALSE);

    // Use a fixed function shader
    m_pDevice->SetVertexShader(FVF_LVERTEX);

    // Draw a triangle
    m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLELIST, 1, plrVertices, sizeof(LVERTEX));

    // Display the adapter mode
    ShowDisplayMode();

    // Display the frame rate
    ShowFrameRate();

    // Display the console
    m_pDisplay->ShowConsole();

    // Fade out the scene on exit
    if (m_pfnFade) {
        (this->*m_pfnFade)();
    }

    // End the scene
    m_pDevice->EndScene();

    // Update the screen
    m_pDevice->Present(NULL, NULL, NULL, NULL);

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     Method
//
// Description:
//
//     Reset the scene in response to the restoration of a lost device.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CScene::Reset() {

    if (m_pDisplay) {
        if (!m_pDisplay->ResetDevice()) {
            return FALSE;
        }
    }

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     ProcessInput
//
// Description:
//
//     Process user input for the scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CScene::ProcessInput() {

    static UINT uFMDisplay = 0;

    m_pDisplay->GetJoyState(&m_jsJoys, &m_jsLast);

#ifdef UNDER_XBOX
    if (BUTTON_CHANGED(m_jsJoys, m_jsLast, JOYBUTTON_BACK)) {
        if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_BACK)) {
            FadeOut();
            m_bQuit = TRUE;
        }
    }
#endif // UNDER_XBOX

    if (BUTTON_CHANGED(m_jsJoys, m_jsLast, JOYBUTTON_A)) {
        if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_A)) {
            if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_START)) {
                m_bPaused = !m_bPaused;
            }
            else {
                m_bPaused = TRUE;
                m_bAdvance = TRUE;
            }
        }
    }

    if (BUTTON_CHANGED(m_jsJoys, m_jsLast, JOYBUTTON_B)) {
        if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_B)) {
            if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_START)) {
                // ##TODO: Reset the device and toggle FSAA
            }
            else {
                if (m_fTimeDilation < 1.5f && m_fTimeDilation > 0.26f) {
                    m_fTimeDilation /= 2.0f;
                }
                else if (m_fTimeDilation < 0.26f) {
                    m_fTimeDilation = 2.0f;
                }
                else if (m_fTimeDilation >= 1.5f) {
                    m_fTimeDilation = 1.0f;
                }
            }
        }
    }

    if (BUTTON_CHANGED(m_jsJoys, m_jsLast, JOYBUTTON_WHITE)) {
        if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_WHITE) && !BUTTON_PRESSED(m_jsJoys, JOYBUTTON_START)) {
            m_pDisplay->SetCamera(&m_camInitial);
        }
    }

    if (BUTTON_CHANGED(m_jsJoys, m_jsLast, JOYBUTTON_RSTICK)) {
        if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_RSTICK) && !BUTTON_PRESSED(m_jsJoys, JOYBUTTON_START)) {
            switch (uFMDisplay++) {
                case 0:
                    m_bShowFPS = TRUE;
                    m_bShowMode = TRUE;
                    break;
                case 1:
                    m_bShowFPS = TRUE;
                    m_bShowMode = FALSE;
                    break;
                case 2:
                    m_bShowFPS = FALSE;
                    m_bShowMode = TRUE;
                    break;
                case 3:
                    m_bShowFPS = FALSE;
                    m_bShowMode = FALSE;
                    break;
            }
            if (uFMDisplay > 3) {
                uFMDisplay = 0;
            }
        }
    }

    if (BUTTON_CHANGED(m_jsJoys, m_jsLast, JOYBUTTON_LSTICK)) {
        if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_LSTICK)) {
            if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_START)) {
                DWORD dwZFunc;
                if (SUCCEEDED(m_pDevice->GetRenderState(D3DRS_ZFUNC, (LPDWORD)&dwZFunc))) {
                    if (dwZFunc == D3DCMP_LESSEQUAL) {
                        dwZFunc = D3DCMP_ALWAYS;
                    }
                    else {
                        dwZFunc = D3DCMP_LESSEQUAL;
                    }
                    m_pDevice->SetRenderState(D3DRS_ZFUNC, dwZFunc);
                }
            }
            else {
                DWORD dwFillMode;
                if (SUCCEEDED(m_pDevice->GetRenderState(D3DRS_FILLMODE, (LPDWORD)&dwFillMode))) {
                    if (dwFillMode == D3DFILL_SOLID) {
                        dwFillMode = D3DFILL_WIREFRAME;
                    }
                    else {
                        dwFillMode = D3DFILL_SOLID;
                    }
                    m_pDevice->SetRenderState(D3DRS_FILLMODE, dwFillMode);
                }
            }
        }
    }
}

//******************************************************************************
//
// Method:
//
//     InitView
//
// Description:
//
//     Initialize the camera view in the scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CScene::InitView() {

    if (!m_pDisplay) {
        return FALSE;
    }

    // Set the view position
    m_camInitial.vPosition     = D3DXVECTOR3(0.0f, 0.0f, -50.0f);
    m_camInitial.vInterest     = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
    m_camInitial.fRoll         = 0.0f;
    m_camInitial.fFieldOfView  = M_PI / 4.0f;
    m_camInitial.fNearPlane    = 0.1f;
    m_camInitial.fFarPlane     = 1000.0f;
    m_pDisplay->SetCamera(&m_camInitial);

    return m_pDisplay->SetView(&m_camInitial);
}

//******************************************************************************
//
// Function:
//
//     InitScene
//
// Description:
//
//     Initialize the device and all device objects to be used in the scene (or
//     at least all device resource objects to be created in the video, 
//     non-local video, or default memory pools).
//
// Arguments:
//
//     LPVOID pvParam           - Context data
//
// Return Value:
//
//     TRUE if the scene was successfully initialized for rendering, FALSE if
//     it was not.
//
//******************************************************************************
static BOOL InitScene(LPVOID pvParam) {

    if (pvParam) {
        if (!((CScene*)pvParam)->Setup()) {
            return FALSE;
        }
        return ((CScene*)pvParam)->Initialize();
    }
    else {
        return FALSE;
    }
}

//******************************************************************************
//
// Function:
//
//     EffaceScene
//
// Description:
//
//     Release all device resource objects (or at least those objects created
//     in video memory, non-local video memory, or the default memory pools)
//     and restore the device to its initial state.
//
// Arguments:
//
//     LPVOID pvParam           - Context data
//
// Return Value:
//
//     None.
//
//******************************************************************************
static void EffaceScene(LPVOID pvParam) {

    if (pvParam) {
        ((CScene*)pvParam)->Efface();
    }
}

//******************************************************************************
// Scene window procedure (pseudo-subclassed off the main window procedure)
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     SceneWndProc
//
// Description:
//
//     Scene window procedure to process messages received by the main 
//     application window.
//
// Arguments:
//
//     LPVOID pvParam           - Context data
//
//     LRESULT* plr             - Result of the message processing
//
//     HWND hWnd                - Application window
//
//     UINT uMsg                - Message to process
//
//     WPARAM wParam            - First message parameter
//
//     LPARAM lParam            - Second message parameter
//
// Return Value:
//
//     TRUE if the message was handled, FALSE otherwise.
//
//******************************************************************************
static BOOL SceneWndProc(LPVOID pvParam, LRESULT* plr, HWND hWnd, UINT uMsg, 
                         WPARAM wParam, LPARAM lParam)
{
    if (pvParam) {
        return ((CScene*)pvParam)->WndProc(plr, hWnd, uMsg, wParam, lParam);
    }
    else {
        *plr = 0;
        return FALSE;
    }
}

//******************************************************************************
//
// Function:
//
//     WndProc
//
// Description:
//
//     Scene window procedure to process messages received by the main 
//     application window.
//
// Arguments:
//
//     LRESULT* plr             - Result of the message processing
//
//     HWND hWnd                - Application window
//
//     UINT uMsg                - Message to process
//
//     WPARAM wParam            - First message parameter
//
//     LPARAM lParam            - Second message parameter
//
// Return Value:
//
//     TRUE if the message was handled, FALSE otherwise.
//
//******************************************************************************
BOOL CScene::WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    *plr = 0;

#ifndef UNDER_XBOX

    switch (uMsg) {

        case WM_KEYDOWN:

            switch (wParam) {

                case VK_RETURN: // Toggle pause state
                    m_bPaused = !m_bPaused;
                    return TRUE;
            }

            break;

        case WM_KEYUP:

            switch (wParam) {

                case VK_SPACE:
                    m_bPaused = TRUE;
                    m_bAdvance = TRUE;
                    return TRUE;
            }

            break;

        case WM_CHAR:

            switch (wParam) {

                case TEXT('O'):
                case TEXT('o'):
                    // Reset the camera to its initial position
                    m_pDisplay->SetCamera(&m_camInitial);
                    return TRUE;

                case TEXT('F'):
                case TEXT('f'):
                    m_bShowFPS = !m_bShowFPS;
                    return TRUE;

                case TEXT('M'):
                case TEXT('m'):
                    m_bShowMode = !m_bShowMode;
                    return TRUE;

                case TEXT('T'):
                case TEXT('t'):
                    if (m_fTimeDilation < 1.5f && m_fTimeDilation > 0.26f) {
                        m_fTimeDilation /= 2.0f;
                    }
                    else if (m_fTimeDilation < 0.26f) {
                        m_fTimeDilation = 2.0f;
                    }
                    else if (m_fTimeDilation >= 1.5f) {
                        m_fTimeDilation = 1.0f;
                    }
                    return 0;

                case TEXT('P'):      // Point fill
                case TEXT('p'):
                    m_pDevice->SetRenderState(D3DRS_FILLMODE, (DWORD)D3DFILL_POINT);
                    return TRUE;

                case TEXT('W'):      // Wireframe fill
                case TEXT('w'):
                    m_pDevice->SetRenderState(D3DRS_FILLMODE, (DWORD)D3DFILL_WIREFRAME);
                    return TRUE;

                case TEXT('S'):      // Solid fill
                case TEXT('s'):
                    m_pDevice->SetRenderState(D3DRS_FILLMODE, (DWORD)D3DFILL_SOLID);
                    return TRUE;

                case TEXT('I'):      // Toggle dithering
                case TEXT('i'): {
                    BOOL bDitheringOn;
                    if (SUCCEEDED(m_pDevice->GetRenderState(D3DRS_DITHERENABLE, (LPDWORD)&bDitheringOn))) {
                        bDitheringOn = !bDitheringOn;
                        m_pDevice->SetRenderState(D3DRS_DITHERENABLE, (DWORD)bDitheringOn);
                    }
                    return TRUE;
                }

                case TEXT('N'):      // Toggle anti-aliasing
                case TEXT('n'): {
                    BOOL bAntialias;
                    if (SUCCEEDED(m_pDevice->GetRenderState(D3DRS_MULTISAMPLEANTIALIAS, (LPDWORD)&bAntialias))) {
                        bAntialias = !bAntialias;
                        m_pDevice->SetRenderState(D3DRS_MULTISAMPLEANTIALIAS, (DWORD)bAntialias);
                    }
                    return TRUE;
                }

                case TEXT('E'):
                case TEXT('e'): {
                    DWORD dwZFunc;
                    if (SUCCEEDED(m_pDevice->GetRenderState(D3DRS_ZFUNC, (LPDWORD)&dwZFunc))) {
                        if (dwZFunc == D3DCMP_LESSEQUAL) {
                            dwZFunc = D3DCMP_ALWAYS;
                        }
                        else {
                            dwZFunc = D3DCMP_LESSEQUAL;
                        }
                        m_pDevice->SetRenderState(D3DRS_ZFUNC, dwZFunc);
                    }
                    return TRUE;
                }
            }
            break;

        case WM_CLOSE:
            FadeOut();
            break;
    }

#endif // !UNDER_XBOX

    return FALSE;
}

//******************************************************************************
// Frame rate
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     ShowFrameRate
//
// Description:
//
//     Overlay the frame rate in the scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CScene::ShowFrameRate() {

    if (m_bShowFPS) {

        TCHAR sz[256];
        float fHeight = (float)m_pDisplay->GetHeight() / 20.0f;
        float fWidth = fHeight / CHAR_ASPECT;
        UINT  uLen;
        _stprintf(sz, TEXT("%.02f fps"), m_fFPS);
        uLen = _tcslen(sz);
        xTextOut((float)(m_pDisplay->GetWidth() / 2) - (float)(uLen / 2) * fWidth, 
                    (float)m_pDisplay->GetHeight() - (fHeight * 2.0f), fWidth, fHeight, 
                    RGBA_XCOLOR(255, 255, 0, 255), sz, uLen);
    }
}

//******************************************************************************
// Display mode
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     ShowDisplayMode
//
// Description:
//
//     Overlay the current display mode in the scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CScene::ShowDisplayMode() {

    if (m_bShowMode) {

        UINT uLen;
        float fHeight = (float)m_pDisplay->GetHeight() / 20.0f;
        float fWidth = fHeight / CHAR_ASPECT;
        uLen = _tcslen(m_szDisplayMode);
        xTextOut((float)(m_pDisplay->GetWidth() / 2) - (float)(uLen / 2) * fWidth, 
                    fHeight, fWidth, fHeight, RGBA_XCOLOR(255, 255, 0, 255), 
                    m_szDisplayMode, uLen);
    }
}

//******************************************************************************
//
// Function:
//
//     InitDisplayModeString
//
// Description:
//
//     Initialize the display mode string.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CScene::InitDisplayModeString() {

    DISPLAYDESC disd;
    TCHAR szFormat[16];
    D3DFORMAT fmtd;
    D3DDISPLAYMODE dm;
    D3DMULTISAMPLE_TYPE mst;

    // Initialize the display mode string
    m_pDisplay->GetCurrentDisplay(&disd);
    if (disd.bWindowed) {
        dm.Width = m_pDisplay->GetWidth();
        dm.Height = m_pDisplay->GetHeight();
        dm.RefreshRate = disd.padpd->d3ddmWindowed.RefreshRate;
        dm.Format = disd.padpd->d3ddmWindowed.Format;
        fmtd = disd.pdevd->fmtdWindowed;
        mst = disd.pdevd->d3dmstWindowed;
    }
    else {
        dm.Width = disd.pdm->d3ddm.Width;
        dm.Height = disd.pdm->d3ddm.Height;
        dm.RefreshRate = disd.pdm->d3ddm.RefreshRate;
        dm.Format = disd.pdm->d3ddm.Format;
        fmtd = disd.pdm->fmtd;
        mst = disd.pdm->d3dmst;
    }

    _stprintf(m_szDisplayMode, TEXT("%dx%d"), dm.Width, dm.Height);
    if (dm.RefreshRate) {
        _stprintf(m_szDisplayMode + _tcslen(m_szDisplayMode), TEXT(" %dHz"), dm.RefreshRate);
    }
    switch (dm.Format) {
#ifndef UNDER_XBOX
        case D3DFMT_X8R8G8B8:
#else
        case D3DFMT_LIN_X8R8G8B8:
#endif // UNDER_XBOX
            _tcscpy(szFormat, TEXT(" X8R8G8B8"));
            break;
#ifndef UNDER_XBOX
        case D3DFMT_A8R8G8B8:
#else
        case D3DFMT_LIN_A8R8G8B8:
#endif // UNDER_XBOX
            _tcscpy(szFormat, TEXT(" A8R8G8B8"));
            break;
#ifndef UNDER_XBOX
        case D3DFMT_X1R5G5B5:
#else
        case D3DFMT_LIN_X1R5G5B5:
#endif // UNDER_XBOX
            _tcscpy(szFormat, TEXT(" X1R5G5B5"));
            break;
#ifndef UNDER_XBOX
        case D3DFMT_R5G6B5:
#else
        case D3DFMT_LIN_R5G6B5:
#endif // UNDER_XBOX
            _tcscpy(szFormat, TEXT(" R5G6B5"));
            break;
    }
    _tcscat(m_szDisplayMode, szFormat);
    if (disd.bDepthBuffer) {
        switch (fmtd) {
#ifndef UNDER_XBOX
            case D3DFMT_D16:
#else
            case D3DFMT_LIN_D16:
#endif // UNDER_XBOX
                _tcscat(m_szDisplayMode, TEXT(" D16"));
                break;
#ifndef UNDER_XBOX
            case D3DFMT_D24S8:
#else
            case D3DFMT_LIN_D24S8:
#endif // UNDER_XBOX
                _tcscat(m_szDisplayMode, TEXT(" D24S8"));
                break;
#ifdef UNDER_XBOX
            case D3DFMT_LIN_F16:
                _tcscat(m_szDisplayMode, TEXT(" F16"));
                break;
            case D3DFMT_LIN_F24S8:
                _tcscat(m_szDisplayMode, TEXT(" F24S8"));
                break;
#endif // UNDER_XBOX
        }
    }
    if (disd.bAntialias && mst != D3DMULTISAMPLE_NONE) {
#ifndef UNDER_XBOX
        _stprintf(m_szDisplayMode + _tcslen(m_szDisplayMode), TEXT(" %dx"), (UINT)mst);
#else
        switch (mst & 0xFFFF) {
            case D3DMULTISAMPLE_2_SAMPLES_MULTISAMPLE_LINEAR:
                _tcscat(m_szDisplayMode, TEXT(" 2xML"));
                break;
            case D3DMULTISAMPLE_2_SAMPLES_MULTISAMPLE_QUINCUNX:
                _tcscat(m_szDisplayMode, TEXT(" 2xMQ"));
                break;
            case D3DMULTISAMPLE_2_SAMPLES_SUPERSAMPLE_HORIZONTAL_LINEAR:
                _tcscat(m_szDisplayMode, TEXT(" 2xMH"));
                break;
            case D3DMULTISAMPLE_2_SAMPLES_SUPERSAMPLE_VERTICAL_LINEAR:
                _tcscat(m_szDisplayMode, TEXT(" 2xMV"));
                break;
            case D3DMULTISAMPLE_4_SAMPLES_MULTISAMPLE_LINEAR:
                _tcscat(m_szDisplayMode, TEXT(" 4xML"));
                break;
            case D3DMULTISAMPLE_4_SAMPLES_MULTISAMPLE_GAUSSIAN:
                _tcscat(m_szDisplayMode, TEXT(" 4xMG"));
                break;
            case D3DMULTISAMPLE_4_SAMPLES_SUPERSAMPLE_LINEAR:
                _tcscat(m_szDisplayMode, TEXT(" 4xSL"));
                break;
            case D3DMULTISAMPLE_4_SAMPLES_SUPERSAMPLE_GAUSSIAN:
                _tcscat(m_szDisplayMode, TEXT(" 4xSG"));
                break;
            case D3DMULTISAMPLE_9_SAMPLES_MULTISAMPLE_GAUSSIAN:
                _tcscat(m_szDisplayMode, TEXT(" 9xMG"));
                break;
            case D3DMULTISAMPLE_9_SAMPLES_SUPERSAMPLE_GAUSSIAN:
                _tcscat(m_szDisplayMode, TEXT(" 9xSG"));
                break;
        }
        switch (mst & 0xF0000) {
            case D3DMULTISAMPLE_PREFILTER_FORMAT_DEFAULT:
                _tcscat(m_szDisplayMode, szFormat);
                break;
            case D3DMULTISAMPLE_PREFILTER_FORMAT_X1R5G5B5:
                _tcscat(m_szDisplayMode, TEXT(" X1R5G5B5"));
                break;
            case D3DMULTISAMPLE_PREFILTER_FORMAT_R5G6B5:
                _tcscat(m_szDisplayMode, TEXT(" R5G6B5"));
                break;
            case D3DMULTISAMPLE_PREFILTER_FORMAT_X8R8G8B8:
                _tcscat(m_szDisplayMode, TEXT(" X8R8G8B8"));
                break;
            case D3DMULTISAMPLE_PREFILTER_FORMAT_A8R8G8B8:
                _tcscat(m_szDisplayMode, TEXT(" X8R8G8B8"));
                break;
        }
#endif // UNDER_XBOX
    }
}

//******************************************************************************
// Fade functions
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     FadeOut
//
// Description:
//
//     Fade out the scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CScene::FadeOut() {

    int i, fps;

    if (!m_bFade) {
        return;
    }

    m_prFade[0] = TLVERTEX(D3DXVECTOR3(0.0f, (float)m_pDisplay->GetHeight(), 0.000009f), 110000.0f, RGBA_MAKE(0,0,0,255), RGBA_MAKE(0,0,0,0), 0.0f, 1.0f);
    m_prFade[1] = TLVERTEX(D3DXVECTOR3(0.0f, 0.0f, 0.000009f), 110000.0f, RGBA_MAKE(0,0,0,255), RGBA_MAKE(0,0,0,0), 0.0f, 0.0f);
    m_prFade[2] = TLVERTEX(D3DXVECTOR3((float)m_pDisplay->GetWidth(), 0.0f, 0.000009f), 110000.0f, RGBA_MAKE(0,0,0,255), RGBA_MAKE(0,0,0,0), 1.0f, 0.0f);
    m_prFade[3] = TLVERTEX(D3DXVECTOR3((float)m_pDisplay->GetWidth(), (float)m_pDisplay->GetHeight(), 0.000009f), 110000.0f, RGBA_MAKE(0,0,0,255), RGBA_MAKE(0,0,0,0), 1.0f, 1.0f);

    m_pfnFade = ApplyFade;

    fps = (int)(m_fFPS + 0.5f);

    for (i = fps - 1; i >= 0; i--) {
        m_fadeAlpha = 255 - (BYTE)((float)i / (float)fps * 255.0f);
        if (!m_bPaused) {
            Update();
        }
        Render();
    }
}

//******************************************************************************
//
// Function:
//
//     ApplyFade
//
// Description:
//
//     Fade the scene to black.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CScene::ApplyFade() {

//    CBaseTexture8*          pd3dtCurrent;
//    CVertexBuffer8*         pd3drCurrent;
//    UINT                    uStride;
//    DWORD                   dwSrcBlend, dwDstBlend, dwBlend, dwColorOp0, 
//                            dwColorOp1, dwAlphaOp0, dwColorArg1, dwColorArg2, 
//                            dwAlphaArg1, dwAlphaArg2, dwAlphaTest, dwShader;
    DWORD dwBlock;
    HRESULT hr;

    // Save the device state
    hr = m_pDevice->CreateStateBlock(D3DSBT_ALL, &dwBlock);
    if (FAILED(hr)) {
        return;
    }

    // Fade out the scene
    m_prFade[0].cDiffuse = m_prFade[1].cDiffuse = m_prFade[2].cDiffuse 
                         = m_prFade[3].cDiffuse = m_fadeAlpha << 24;

//    m_pDevice->GetRenderState(D3DRS_SRCBLEND, &dwSrcBlend);
//    m_pDevice->GetRenderState(D3DRS_DESTBLEND, &dwDstBlend);
//    m_pDevice->GetRenderState(D3DRS_ALPHABLENDENABLE, &dwBlend);
//    m_pDevice->GetRenderState(D3DRS_ALPHATESTENABLE, &dwAlphaTest);
//    m_pDevice->GetTextureStageState(0, D3DTSS_COLOROP, &dwColorOp0);
//    m_pDevice->GetTextureStageState(0, D3DTSS_COLORARG1, &dwColorArg1);
 //   m_pDevice->GetTextureStageState(0, D3DTSS_COLORARG2, &dwColorArg2);
 //   m_pDevice->GetTextureStageState(0, D3DTSS_ALPHAOP, &dwAlphaOp0);
//    m_pDevice->GetTextureStageState(0, D3DTSS_ALPHAARG1, &dwAlphaArg1);
//    m_pDevice->GetTextureStageState(0, D3DTSS_ALPHAARG2, &dwAlphaArg2);
//    m_pDevice->GetTextureStageState(1, D3DTSS_COLOROP, &dwColorOp1);
//    m_pDevice->GetStreamSource(0, &pd3drCurrent, &uStride);
//    m_pDevice->GetTexture(0, &pd3dtCurrent);
//    m_pDevice->GetVertexShader(&dwShader);

    m_pDevice->SetRenderState(D3DRS_SRCBLEND, (DWORD)D3DBLEND_SRCALPHA);
    m_pDevice->SetRenderState(D3DRS_DESTBLEND, (DWORD)D3DBLEND_INVSRCALPHA);
    m_pDevice->SetRenderState(D3DRS_ALPHATESTENABLE, FALSE);
    m_pDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, TRUE);
    SetColorStage(m_pDevice, 0, D3DTA_TEXTURE, D3DTA_DIFFUSE, D3DTOP_SELECTARG2);
    SetAlphaStage(m_pDevice, 0, D3DTA_TEXTURE, D3DTA_DIFFUSE, D3DTOP_SELECTARG2);
    m_pDevice->SetTextureStageState(1, D3DTSS_COLOROP, D3DTOP_DISABLE);
    m_pDevice->SetTexture(0, NULL);
    m_pDevice->SetVertexShader(FVF_TLVERTEX);
    m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 2, m_prFade, sizeof(TLVERTEX));

//    m_pDevice->SetVertexShader(dwShader);
//    m_pDevice->SetTexture(0, pd3dtCurrent);
//    if (pd3drCurrent) {
//        m_pDevice->SetStreamSource(0, pd3drCurrent, uStride);
//    }
//    SetColorStage(m_pDevice, 0, dwColorArg1, dwColorArg2, (D3DTEXTUREOP)dwColorOp0);
//    SetAlphaStage(m_pDevice, 0, dwAlphaArg1, dwAlphaArg2, (D3DTEXTUREOP)dwAlphaOp0);
//    m_pDevice->SetTextureStageState(1, D3DTSS_COLOROP, dwColorOp1);
//    m_pDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, dwBlend);
//    m_pDevice->SetRenderState(D3DRS_ALPHATESTENABLE, dwAlphaTest);
//    m_pDevice->SetRenderState(D3DRS_SRCBLEND, dwSrcBlend);
//    m_pDevice->SetRenderState(D3DRS_DESTBLEND, dwDstBlend);

    m_pDevice->ApplyStateBlock(dwBlock);
    m_pDevice->DeleteStateBlock(dwBlock);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dbase\texture.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    texture.cpp

Author:

    Matt Bronder

Description:

    Direct3D texture routines.

*******************************************************************************/

#include "d3dbase.h"
#include <limits.h>

//******************************************************************************
// Preprocessor definitions
//******************************************************************************

#ifdef UNDER_XBOX
#define DEMO_HACK
#endif // UNDER_XBOX

#ifdef DEMO_HACK
#define D3DFMT_LIN_V8U8 D3DFMT_LIN_G8B8
#endif

#define GET_TTYPE_MIPLEVELS(ttype)  (((ttype) & TTYPE_MIPLEVELMASK) >> 24)

//******************************************************************************
// Local function prototypes
//******************************************************************************

static BOOL             SetTranslucency(LPDIRECT3DSURFACE8 pd3ds, 
                            PALETTECOLOR* ppcPalette, float fAlpha, 
                            D3DCOLOR cColorKey);
static BOOL             SetTranslucency(LPDIRECT3DVOLUME8 pd3dv, 
                            PALETTECOLOR* ppcPalette, float fAlpha, 
                            D3DCOLOR cColorKey);
static BOOL             CalculateTangentTerms(D3DXVECTOR3* pvTangent, 
                            D3DXVECTOR3* pvBinormal, D3DVECTOR* pvPosition, 
                            DWORD dwStridePosition, PTCOORD2 ptcTCoord, 
                            DWORD dwStrideTCoord, LPWORD pwIndices, 
                            DWORD dwNumPrimitives, D3DPRIMITIVETYPE d3dpt, 
                            BOOL bInterpolate);
static BOOL             VectorToTangentSpace(BOOL bHalfVector, 
                            PTCOORD3 ptcTangent, DWORD dwStrideTangent,
                            D3DVECTOR* pvPosition, DWORD dwStridePosition,
                            PTCOORD2 ptcTCoord, DWORD dwStrideTCoord,
                            LPWORD pwIndices, DWORD dwNumPrimitives,
                            D3DPRIMITIVETYPE d3dpt, D3DMATRIX* pmWorld, 
                            D3DVECTOR* pvLightDir, D3DVECTOR* pvViewPos,
                            BOOL bInterpolate);
static BOOL             SetLightMapCoords(BOOL bSpecular, 
                            PTCOORD2 ptcLightMap, DWORD dwStrideLMap,
                            D3DVECTOR* pvPosition, DWORD dwStridePosition,
                            PTCOORD2 ptcOffsetMap, DWORD dwStrideOMap,
                            LPWORD pwIndices, DWORD dwNumPrimitives,
                            D3DPRIMITIVETYPE d3dpt, D3DMATRIX* pmWorld, 
                            D3DVECTOR* pvLightDir, D3DVECTOR* pvViewPos,
                            BOOL bInterpolate);

//******************************************************************************
// Globals
//******************************************************************************

PTEXTUREDESC            g_ptexdList = NULL;

//******************************************************************************
// Image loading functions
//******************************************************************************

//******************************************************************************
HRESULT D3DXCreateTextureFromImage(LPDIRECT3DDEVICE8 pDevice, LPCTSTR szImage,
                                UINT uWidth, UINT uHeight, UINT uLevels,
                                DWORD dwUsage, D3DFORMAT fmt, D3DPOOL pool,
                                DWORD dwFilter, DWORD dwMipFilter, 
                                D3DCOLOR cColorKey, D3DXIMAGE_INFO* pImageInfo,
                                PALETTECOLOR* ppc, LPDIRECT3DTEXTURE8* ppTexture)
{
    LPVOID  pvData;
    DWORD   dwSize;
    HRESULT hr;

    if (LoadResourceFile(szImage, &pvData, &dwSize)) {

        hr = D3DXCreateTextureFromFileInMemoryEx(pDevice, pvData, dwSize,
                                uWidth, uHeight, uLevels, dwUsage, fmt,
                                pool, dwFilter, dwMipFilter, cColorKey,
                                pImageInfo, (PALETTEENTRY*)ppc, ppTexture);
        UnloadResourceFile(szImage);
        if (SUCCEEDED(hr)) {
#ifdef UNDER_XBOX
            ConvertPALETTEENTRYToD3DCOLOR((LPVOID)ppc, 256);
#endif
            return hr;
        }
    }

#ifndef UNDER_XBOX
    hr = D3DXCreateTextureFromResourceEx(pDevice, GetInstance(), szImage,
                                uWidth, uHeight, uLevels, dwUsage, fmt,
                                pool, dwFilter, dwMipFilter, cColorKey,
                                pImageInfo, (PALETTEENTRY*)ppc, ppTexture);
    if (SUCCEEDED(hr)) {
#ifdef UNDER_XBOX
        ConvertPALETTEENTRYToD3DCOLOR((LPVOID)ppc, 256);
#endif
        return hr;
    }

#endif // !UNDER_XBOX

#if defined(UNDER_XBOX) && defined(UNICODE)

    char aszImage[MAX_PATH];
    wcstombs(aszImage, szImage, MAX_PATH);
    hr = D3DXCreateTextureFromFileEx(pDevice, aszImage, uWidth, uHeight, 
                                uLevels, dwUsage, fmt, pool, dwFilter,
                                dwMipFilter, cColorKey, pImageInfo, 
                                (PALETTEENTRY*)ppc, ppTexture);

#else

    hr = D3DXCreateTextureFromFileEx(pDevice, szImage, uWidth, uHeight, 
                                uLevels, dwUsage, fmt, pool, dwFilter,
                                dwMipFilter, cColorKey, pImageInfo, 
                                (PALETTEENTRY*)ppc, ppTexture);

#endif

    if (FAILED(hr)) {
        TCHAR szError[128];
        D3DXGetErrorString(hr, szError, 512);
        DebugString(TEXT("D3DXCreateTextureFromImage failed on %s with %s [0x%X]"), szImage, szError, hr);
    }
#ifdef UNDER_XBOX
    else {
        ConvertPALETTEENTRYToD3DCOLOR((LPVOID)ppc, 256);
    }
#endif

    return hr;
}

//******************************************************************************
HRESULT D3DXLoadSurfaceFromImage(LPDIRECT3DSURFACE8 pDstSurface, 
                                CONST PALETTECOLOR* ppcDstPalette, 
                                CONST RECT* pDstRect, LPCTSTR szImage,
                                CONST RECT* pSrcRect, DWORD dwFilter,
                                D3DCOLOR cColorKey, D3DXIMAGE_INFO* pImageInfo)
{
    LPVOID  pvData;
    DWORD   dwSize;
    HRESULT hr;

    if (LoadResourceFile(szImage, &pvData, &dwSize)) {

        hr = D3DXLoadSurfaceFromFileInMemory(pDstSurface, (PALETTEENTRY*)ppcDstPalette, pDstRect,
                                pvData, dwSize, pSrcRect, dwFilter, cColorKey,
                                pImageInfo);
        UnloadResourceFile(szImage);
        if (SUCCEEDED(hr)) {
#ifdef UNDER_XBOX
            ConvertPALETTEENTRYToD3DCOLOR((LPVOID)ppcDstPalette, 256);
#endif
            return hr;
        }
    }

#ifndef UNDER_XBOX
    hr = D3DXLoadSurfaceFromResource(pDstSurface, (PALETTEENTRY*)ppcDstPalette, pDstRect,
                                GetInstance(), szImage, pSrcRect, dwFilter,
                                cColorKey, pImageInfo);
    if (SUCCEEDED(hr)) {
#ifdef UNDER_XBOX
        ConvertPALETTEENTRYToD3DCOLOR((LPVOID)ppcDstPalette, 256);
#endif
        return hr;
    }
#endif // !UNDER_XBOX

#if defined(UNDER_XBOX) && defined(UNICODE)
    char aszImage[MAX_PATH];
    wcstombs(aszImage, szImage, MAX_PATH);
    hr = D3DXLoadSurfaceFromFile(pDstSurface, (PALETTEENTRY*)ppcDstPalette, pDstRect, aszImage,
                                pSrcRect, dwFilter, cColorKey, pImageInfo);
#else
    hr = D3DXLoadSurfaceFromFile(pDstSurface, (PALETTEENTRY*)ppcDstPalette, pDstRect, szImage,
                                pSrcRect, dwFilter, cColorKey, pImageInfo);
#endif
    if (FAILED(hr)) {
        TCHAR szError[128];
        D3DXGetErrorString(hr, szError, 512);
        DebugString(TEXT("D3DXLoadSurfaceFromImage failed on %s with %s [0x%X]"), szImage, szError, hr);
    }
#ifdef UNDER_XBOX
    else {
        ConvertPALETTEENTRYToD3DCOLOR((LPVOID)ppcDstPalette, 256);
    }
#endif

    return hr;
}

//******************************************************************************
// Texture functions
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     CreateTexture
//
// Description:
//
//     Create a texture object of the given dimensions, format, and type.
//
// Arguments:
//
//     LPDIRECT3DDEVICE8 pDevice            - Pointer to the device object
//
//     DWORD dwWidth                        - Width of the texture
//
//     DWORD dwHeight                       - Height of the texture
//
//     D3DFORMAT fmt                        - Format of the texture
//
//     TEXTURETYPE tt                       - Type of texture to create (i.e.
//                                            mipmap, cubemap, bumpmap, etc.)
//
//     D3DPOOL pool                         - Location in which to create the
//                                            texture
//
// Return Value:
//
//     A pointer to the created texture object on success, NULL on failure.
//
//******************************************************************************
LPDIRECT3DBASETEXTURE8 CreateTexture(LPDIRECT3DDEVICE8 pDevice, UINT uWidth, 
                                     UINT uHeight, D3DFORMAT fmt, TEXTURETYPE tt, 
                                     D3DPOOL pool)
{
    return CreateTexture(pDevice, uWidth, uHeight, 0, fmt, tt, pool);
}

//******************************************************************************
//
// Function:
//
//     CreateTexture
//
// Description:
//
//     Create a texture object of the given dimensions, format, and type.
//
// Arguments:
//
//     LPDIRECT3DDEVICE8 pDevice            - Pointer to the device object
//
//     DWORD dwWidth                        - Width of the texture
//
//     DWORD dwHeight                       - Height of the texture
//
//     DWORD dwDepth                        - Depth of the texture (for a
//                                            volume)
//
//     D3DFORMAT fmt                        - Format of the texture
//
//     TEXTURETYPE tt                       - Type of texture to create (i.e.
//                                            mipmap, cubemap, bumpmap, etc.)
//
//     D3DPOOL pool                         - Location in which to create the
//                                            texture
// Return Value:
//
//     A pointer to the created texture object on success, NULL on failure.
//
//******************************************************************************
LPDIRECT3DBASETEXTURE8 CreateTexture(LPDIRECT3DDEVICE8 pDevice, UINT uWidth, 
                                    UINT uHeight, UINT uDepth, D3DFORMAT fmt, 
                                    TEXTURETYPE tt, D3DPOOL pool)
{
    LPDIRECT3DBASETEXTURE8  pd3dtb;
    D3DFORMAT               fmtt;
    PTEXTUREDESC            ptexdNode;
    UINT                    uLevels;
    DWORD                   dwUsage = 0;
    D3DRESOURCETYPE         rt;
    HRESULT                 hr;

    // Verify the current device supports the given format
    if (tt & TTYPE_DEPTH) {
        dwUsage |= D3DUSAGE_DEPTHSTENCIL;
        pool = D3DPOOL_DEFAULT;
    }
    else if (tt & TTYPE_TARGET) {
        dwUsage |= D3DUSAGE_RENDERTARGET;
        pool = D3DPOOL_DEFAULT;
    }

    if (tt & TTYPE_VOLUME) {
        rt = D3DRTYPE_VOLUMETEXTURE;
    }
    else if (tt & TTYPE_CUBEMAP) {
        rt = D3DRTYPE_CUBETEXTURE;
    }
    else {
        rt = D3DRTYPE_TEXTURE;
    }

    hr = CheckCurrentDeviceFormat(pDevice, dwUsage, rt, fmt);
    if (FAILED(hr)) {
        if (hr != D3DERR_NOTAVAILABLE) {
            ResultFailed(hr, TEXT("IDirect3D8::CheckDeviceFormats"));
        }
        return NULL;
    }

    // Get the number of levels for the texture
    if (tt & TTYPE_MIPMAP) {
        uLevels = GET_TTYPE_MIPLEVELS(tt);
    }
    else {
        uLevels = 1;
    }

    // Create a texture of the specified type
    if (tt & TTYPE_VOLUME) {

        D3DVOLUME_DESC d3dvd;

        hr = pDevice->CreateVolumeTexture(uWidth, uHeight, uDepth, 
                                    uLevels, dwUsage, fmt, pool, 
                                    (LPDIRECT3DVOLUMETEXTURE8*)&pd3dtb);
        if (FAILED(hr)) {
            ResultFailed(hr, TEXT("IDirect3DDevice8::CreateVolumeTexture"));
            return NULL;
        }

        hr = ((LPDIRECT3DVOLUMETEXTURE8)pd3dtb)->GetLevelDesc(0, &d3dvd);
        if (ResultFailed(hr, TEXT("IDirect3DVolumeTexture8::GetLevelDesc"))) {
            pd3dtb->Release();
            return NULL;
        }
        fmtt = d3dvd.Format;
    }
    else if (tt & TTYPE_CUBEMAP) {

        D3DSURFACE_DESC d3dsd;

        hr = pDevice->CreateCubeTexture(uWidth > uHeight ? uWidth : uHeight,
                                    uLevels, dwUsage, fmt, pool, 
                                    (LPDIRECT3DCUBETEXTURE8*)&pd3dtb);
        if (FAILED(hr)) {
            ResultFailed(hr, TEXT("IDirect3DDevice8::CreateCubeTexture"));
            return NULL;
        }

        hr = ((LPDIRECT3DCUBETEXTURE8)pd3dtb)->GetLevelDesc(0, &d3dsd);
        if (ResultFailed(hr, TEXT("IDirect3DCubeTexture8::GetLevelDesc"))) {
            pd3dtb->Release();
            return NULL;
        }
        fmtt = d3dsd.Format;
    }
    else {

        D3DSURFACE_DESC d3dsd;

        hr = pDevice->CreateTexture(uWidth, uHeight, uLevels, dwUsage, fmt, pool, 
                                    (LPDIRECT3DTEXTURE8*)&pd3dtb);
        if (FAILED(hr)) {
            ResultFailed(hr, TEXT("IDirect3DDevice8::CreateTexture"));
            return NULL;
        }

        hr = ((LPDIRECT3DTEXTURE8)pd3dtb)->GetLevelDesc(0, &d3dsd);
        if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetLevelDesc"))) {
            pd3dtb->Release();
            return NULL;
        }
        fmtt = d3dsd.Format;
    }

    // Add the texture to the texture list
    ptexdNode = (PTEXTUREDESC)MemAlloc(sizeof(TEXTUREDESC));
    if (!ptexdNode) {
        pd3dtb->Release();
        return NULL;
    }
    memset(ptexdNode, 0, sizeof(TEXTUREDESC));
    ptexdNode->pd3dtb = pd3dtb;
    ptexdNode->uWidth = uWidth;
    ptexdNode->uHeight = uHeight;
    ptexdNode->uDepth = uDepth;
    ptexdNode->fmt = fmtt;
    ptexdNode->pool = pool;
    ptexdNode->tt = tt;
    ptexdNode->ptexdNext = g_ptexdList;
    g_ptexdList = ptexdNode;

    return pd3dtb;
}

//******************************************************************************
//
// Function:
//
//     CreateTexture
//
// Description:
//
//     Create a texture object and populate it using the image contained in
//     the given resource or file name.
//
// Arguments:
//
//     LPDIRECT3DDEVICE8 pDevice            - Pointer to the device object
//
//     LPCTSTR szName                       - File or resource name of the 
//                                            bitmap from which to create the 
//                                            texture
//
//     D3DFORMAT fmt                        - Format of the texture
//
//     TEXTURETYPE tt                       - Type of texture to create (i.e.
//                                            mipmap, cubemap, bumpmap, etc.)
//
//     PALETTECOLOR* ppcPalette             - Pointer to the first entry of
//                                            a palette to be initialized (if
//                                            palettized)
//
//     float fAlpha                         - Optional transparency value for
//                                            the texture
//
//     D3DCOLOR cColorKey                   - Optional color key for the
//                                            texture
//
//     D3DPOOL pool                         - Location in which to create the
//                                            texture
//
//     UINT uWidth                          - Optional width of the texture
//                                            (if not given the texture will
//                                            take on the size of the bitmap
//                                            used to populate it)
//
//     UINT uHeight                         - Optional height of the texture
//
// Return Value:
//
//     A pointer to the created texture object on success, NULL on failure.
//
//******************************************************************************
LPDIRECT3DBASETEXTURE8 CreateTexture(LPDIRECT3DDEVICE8 pDevice, LPCTSTR szName, 
                                 D3DFORMAT fmt, TEXTURETYPE tt,
                                 PALETTECOLOR* ppcPalette, float fAlpha,
                                 D3DCOLOR cColorKey, D3DPOOL pool,
                                 UINT uWidth, UINT uHeight)
{
    LPDIRECT3DBASETEXTURE8  pd3dtb = NULL;
    D3DRESOURCETYPE         rt;
    D3DFORMAT               fmtt;
    UINT                    uLevels;
    DWORD                   dwUsage = 0;
    PTEXTUREDESC            ptexdNode;
    LPTSTR                  szImage;
    TCHAR                   szResource[32] = {TEXT("resource ")};
    WORD                    wResourceID;
    HRESULT                 hr;
#ifdef UNDER_XBOX
    TCHAR                   szFile[256];
#endif

    if (!szName) {
        // Fail if a NULL name pointer or a resource identifer of zero is given
        return NULL;
    }

    // Verify the current device supports the given format
    if (tt & TTYPE_DEPTH) {
        dwUsage |= D3DUSAGE_DEPTHSTENCIL;
        pool = D3DPOOL_DEFAULT;
    }
    else if (tt & TTYPE_TARGET) {
        dwUsage |= D3DUSAGE_RENDERTARGET;
        pool = D3DPOOL_DEFAULT;
    }

    if (tt & TTYPE_VOLUME) {
        rt = D3DRTYPE_VOLUMETEXTURE;
    }
    else if (tt & TTYPE_CUBEMAP) {
        rt = D3DRTYPE_CUBETEXTURE;
    }
    else {
        rt = D3DRTYPE_TEXTURE;
    }

    hr = CheckCurrentDeviceFormat(pDevice, dwUsage, rt, fmt);
    if (FAILED(hr)) {
        if (hr != D3DERR_NOTAVAILABLE) {
            ResultFailed(hr, TEXT("IDirect3D8::CheckDeviceFormats"));
        }
        return NULL;
    }

    // If the high order word of the name is zero, the name is a resource
    // identifier rather than a pointer to the name string
    if (!(BOOL)((DWORD)szName >> 16)) {
        wResourceID = (WORD)szName;
        wsprintf(szResource + 9, TEXT("%d"), wResourceID);
        szImage = szResource;
    }
    else {
        wResourceID = 0;
        szImage = (LPTSTR)szName;
    }

    // Get the number of levels for the texture
    if (tt & TTYPE_MIPMAP) {
        uLevels = GET_TTYPE_MIPLEVELS(tt);
    }
    else {
        uLevels = 1;
    }

    if (tt & TTYPE_VOLUME) {

        return NULL;
    }

    else if (tt & TTYPE_CUBEMAP) {

        LPDIRECT3DCUBETEXTURE8  pd3dtc;
        LPDIRECT3DSURFACE8      pSurface;
        D3DSURFACE_DESC         d3dsd;
        TCHAR                   szFace[6][MAX_PATH];
        TCHAR                   szTemp[MAX_PATH];
        TCHAR*                  sz;
        UINT                    i;

        if (uWidth == D3DX_DEFAULT || uHeight == D3DX_DEFAULT) {

            LPDIRECT3DTEXTURE8 pd3dtTemp;

            hr = D3DXCreateTextureFromImage(pDevice,
                                szName, D3DX_DEFAULT, D3DX_DEFAULT, 1, dwUsage,
                                fmt, pool, D3DX_FILTER_POINT, D3DX_FILTER_POINT,
                                0, NULL, ppcPalette, &pd3dtTemp);
            if (FAILED(hr)) {
                return NULL;
            }

            hr = pd3dtTemp->GetLevelDesc(0, &d3dsd);
            pd3dtTemp->Release();
            if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetLevelDesc"))) {
                return NULL;
            }

            if (uWidth == D3DX_DEFAULT) {
                uWidth = d3dsd.Width;
            }

            if (uHeight == D3DX_DEFAULT) {
                uHeight = d3dsd.Height;
            }
        }

        // Create the cubemap
        hr = pDevice->CreateCubeTexture(uWidth > uHeight ? uWidth : uHeight,
                            uLevels, dwUsage, fmt, pool, &pd3dtc);
        if (FAILED(hr)) {
            ResultFailed(hr, TEXT("IDirect3DDevice8::CreateCubeTexture"));
            return NULL;
        }

        hr = pd3dtc->GetLevelDesc(0, &d3dsd);
        if (ResultFailed(hr, TEXT("IDirect3DCubeTexture8::GetLevelDesc"))) {
            pd3dtc->Release();
            return NULL;
        }
        fmtt = d3dsd.Format;

        // Initialize the image names for the faces.  If the image name ends with the
        // number 0, assume that six separate image files/resources exist, one for each
        // face of the cube map.  They will all have the same base image name, being
        // differentiated only by the ending character of the name, with that character
        // being a number 0-5.  The images will be loaded into their corresponding faces
        // according to the enumeration order of the faces in the D3DCUBEMAP_FACES type.
        // If the given image name does not end with a 0, load the given image into
        // each of the faces of the cube map, resulting in identical images for each
        // face.
        _tcscpy(szTemp, szName);
        sz = szTemp + _tcslen(szTemp);
        if (*(sz-1) == TEXT('0')) {
            sz--;
        }
        else if (*(sz-5) == TEXT('0')) {
            sz -= 5;
        }
        if (*sz) {
            for (i = 0; i < 6; i++) {
                *sz = TEXT('0') + i;
                _tcscpy(szFace[i], szTemp);
            }
        }
        else {
            for (i = 0; i < 6; i++) {
                _tcscpy(szFace[i], szName);
            }
        }

        // Copy the image into the faces
        for (i = 0; i < 6; i++) {

            hr = pd3dtc->GetCubeMapSurface((D3DCUBEMAP_FACES)i, 0, &pSurface);
            if (FAILED(hr)) {
                ResultFailed(hr, TEXT("IDirect3DCubeMap8::GetCubeMapSurface"));
                pd3dtc->Release();
                return NULL;
            }

            hr = D3DXLoadSurfaceFromImage(pSurface, ppcPalette, NULL,
                            szFace[i], NULL, D3DX_FILTER_LINEAR, 0, NULL);
            if (FAILED(hr)) {
                pSurface->Release();
                pd3dtc->Release();
                return NULL;
            }

            pSurface->Release();
        }

        pd3dtb = pd3dtc;
    }

    else if (tt & TTYPE_BUMPMAP || tt & TTYPE_NORMALMAP) {

        // The given image is a height map.  Use it to generate the bump map
        LPDIRECT3DTEXTURE8  pd3dtHeight;
        D3DSURFACE_DESC     d3dsd;

        // Load the height map
        pd3dtHeight = (LPDIRECT3DTEXTURE8)CreateTexture(pDevice, szName, D3DFMT_A8R8G8B8, 
                                                        TTYPE_TEXTURE, NULL, 1.0f, 
                                                        COLORKEY_NONE, pool, uWidth, uHeight);
        if (!pd3dtHeight) {
            return NULL;
        }

        hr = pd3dtHeight->GetLevelDesc(0, &d3dsd);
        if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetLevelDesc"))) {
            ReleaseTexture(pd3dtHeight);
            return NULL;
        }

        if (uWidth == D3DX_DEFAULT) {
            uWidth = d3dsd.Width;
        }

        if (uHeight == D3DX_DEFAULT) {
            uHeight = d3dsd.Height;
        }

        // Create the bump map
        pd3dtb = (LPDIRECT3DTEXTURE8)CreateTexture(pDevice, d3dsd.Width, d3dsd.Height, fmt, tt, pool);
        if (!pd3dtb) {
            ReleaseTexture(pd3dtHeight);
            return NULL;
        }
        
        hr = CopyTexture(pd3dtb, ppcPalette, pd3dtHeight, NULL, D3DX_FILTER_LINEAR);

        ReleaseTexture(pd3dtHeight);

        if (FAILED(hr)) {
            ReleaseTexture(pd3dtb);
            return NULL;
        }

        hr = ((LPDIRECT3DTEXTURE8)pd3dtb)->GetLevelDesc(0, &d3dsd);
        if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetLevelDesc"))) {
            ReleaseTexture(pd3dtb);
            return NULL;
        }
        fmtt = d3dsd.Format;

        return pd3dtb;
    }

    else {

        LPDIRECT3DTEXTURE8  pd3dt;
        LPDIRECT3DSURFACE8  pd3ds;
        LPDIRECT3DSURFACE8  pSurface;
        D3DSURFACE_DESC     d3dsd;

        // Attempt to load the image as a resource.  Use a point mip filter flag
        // since the mipmap will get re-filtered using a linear filter during
        // the SetTranslucency stage.
#ifndef DEMO_HACK
        hr = D3DXCreateTextureFromImage(pDevice,
                                szName, uWidth, uHeight, 1, dwUsage, fmt,
                                pool, D3DX_FILTER_LINEAR, D3DX_FILTER_POINT,
                                0, NULL, ppcPalette, &pd3dt);
#else
        hr = D3DXCreateTextureFromImage(pDevice,
                                szName, uWidth, uHeight, 1, dwUsage, fmt,
                                D3DPOOL_MANAGED, D3DX_FILTER_TRIANGLE|D3DX_FILTER_MIRROR, 
                                D3DX_FILTER_TRIANGLE|D3DX_FILTER_MIRROR,
                                0, NULL, ppcPalette, &pd3dt);
#endif // DEMO_HACK
        if (FAILED(hr)) {
            return NULL;
        }

        hr = pd3dt->GetLevelDesc(0, &d3dsd);
        if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetLevelDesc"))) {
            pd3dt->Release();
            return NULL;
        }

        if (uWidth == D3DX_DEFAULT) {
            uWidth = d3dsd.Width;
        }

        if (uHeight == D3DX_DEFAULT) {
            uHeight = d3dsd.Height;
        }

        hr = pDevice->CreateTexture(d3dsd.Width, d3dsd.Height, uLevels, 0, fmt, pool, (LPDIRECT3DTEXTURE8*)&pd3dtb);
        if (FAILED(hr)) {
            pd3dt->Release();
            return NULL;
        }

        hr = pd3dt->GetSurfaceLevel(0, &pd3ds);
        if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetSurfaceLevel"))) {
            pd3dt->Release();
            pd3dtb->Release();
            return NULL;
        }

        hr = ((LPDIRECT3DTEXTURE8)pd3dtb)->GetSurfaceLevel(0, &pSurface);
        if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetSurfaceLevel"))) {
            pd3ds->Release();
            pd3dt->Release();
            pd3dtb->Release();
            return NULL;
        }

        hr = D3DXLoadSurfaceFromSurface(pSurface, NULL, NULL, pd3ds, NULL, NULL, D3DX_FILTER_POINT, 0);

        pSurface->Release();
        pd3ds->Release();
        pd3dt->Release();

        if (FAILED(hr)) {
            ResultFailed(hr, TEXT("D3DXLoadSurfaceFromSurface"));
            pd3dtb->Release();
            return NULL;
        }

        fmtt = d3dsd.Format;
    }

    // Add the texture to the texture list
    ptexdNode = (PTEXTUREDESC)MemAlloc(sizeof(TEXTUREDESC));
    if (!ptexdNode) {
        pd3dtb->Release();
        return NULL;
    }
    memset(ptexdNode, 0, sizeof(TEXTUREDESC));
    ptexdNode->pd3dtb = pd3dtb;
    if (wResourceID) {
        _tcscpy(ptexdNode->szName, szResource);
        ptexdNode->wResourceID = wResourceID;
    }
    else {
        _tcscpy(ptexdNode->szName, szName);
        ptexdNode->wResourceID = 0;
    }
    ptexdNode->uWidth = uWidth;
    ptexdNode->uHeight = uHeight;
    ptexdNode->uDepth = 0;
    ptexdNode->fmt = fmtt;
    ptexdNode->pool = pool;
    ptexdNode->tt = tt;
    ptexdNode->fAlpha = fAlpha;
    ptexdNode->cColorKey = cColorKey;
    ptexdNode->ptexdNext = g_ptexdList;
    g_ptexdList = ptexdNode;

    // Set the translucency.  This will also perform a filter of the highest
    // resolution level(s) to all lower resolution levels (if present)
    if (!SetTranslucency(pd3dtb, ppcPalette, fAlpha, cColorKey)) {
        DebugString(TEXT("Warning: Failed to set translucency information on texture %s"), szImage);
    }

    return pd3dtb;
}

//******************************************************************************
//
// Function:
//
//     ReleaseTexture
//
// Description:
//
//     Release the given texture object and remove it from the texture table.
//
// Arguments:
//
//     LPDIRECT3DBASETEXTURE8 pd3dtb        - Pointer to the texture object
//
// Return Value:
//
//     None.
//
//******************************************************************************
void ReleaseTexture(LPDIRECT3DBASETEXTURE8 pd3dtb) {

    PTEXTUREDESC ptexd, ptexdDel;
#if defined(DEBUG) || defined(_DEBUG)
    TCHAR        szName[MAX_PATH];
    UINT         uRef;
#endif

    if (!pd3dtb) {
        return;
    }

    if (g_ptexdList) {

        if (g_ptexdList->pd3dtb == pd3dtb) {
            ptexd = g_ptexdList->ptexdNext;
#if defined(DEBUG) || defined(_DEBUG)
            _tcscpy(szName, g_ptexdList->szName);
#endif
            MemFree(g_ptexdList);
            g_ptexdList = ptexd;
        }

        else {

            for (ptexd = g_ptexdList; 
                 ptexd->ptexdNext && ptexd->ptexdNext->pd3dtb != pd3dtb; 
                 ptexd = ptexd->ptexdNext
            );

            if (ptexd->ptexdNext) {
                ptexdDel = ptexd->ptexdNext;
                ptexd->ptexdNext = ptexdDel->ptexdNext;
#if defined(DEBUG) || defined(_DEBUG)
                _tcscpy(szName, ptexdDel->szName);
#endif
                MemFree(ptexdDel);
            }
        }
    }

#if defined(DEBUG) || defined(_DEBUG)
    uRef = pd3dtb->Release();
    if (uRef != 0) {
        DebugString(TEXT("WARNING: Texture %s has a ref count of %d on release"), szName, uRef);
    }
#else
    pd3dtb->Release();
#endif
}

//******************************************************************************
//
// Function:
//
//     ReleaseTextures
//
// Description:
//
//     Release all textures in the texture table.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void ReleaseTextures() {

    while (g_ptexdList) {
        ReleaseTexture(g_ptexdList->pd3dtb);
    }
}

//******************************************************************************
//
// Function:
//
//     RemoveTexture
//
// Description:
//
//     Remove the given texture from the texture table (if present)
//
// Arguments:
//
//     LPDIRECT3DBASETEXTURE8 pd3dtb         - Pointer to the texture object
//
// Return Value:
//
//     None.
//
//******************************************************************************
void RemoveTexture(LPDIRECT3DBASETEXTURE8 pd3dtb) {

    PTEXTUREDESC ptexd, ptexdDel;

    if (!pd3dtb) {
        return;
    }

    if (g_ptexdList) {

        if (g_ptexdList->pd3dtb == pd3dtb) {
            ptexd = g_ptexdList->ptexdNext;
            MemFree(g_ptexdList);
            g_ptexdList = ptexd;
        }

        else {

            for (ptexd = g_ptexdList; 
                 ptexd->ptexdNext && ptexd->ptexdNext->pd3dtb != pd3dtb; 
                 ptexd = ptexd->ptexdNext
            );

            if (ptexd->ptexdNext) {
                ptexdDel = ptexd->ptexdNext;
                ptexd->ptexdNext = ptexdDel->ptexdNext;
                MemFree(ptexdDel);
            }
        }
    }
}

//******************************************************************************
//
// Function:
//
//     GetARGBPixelDesc
//
// Description:
//
//     Obtain the memory layout of the given ARGB pixel format.
//
// Arguments:
//
//     D3DFORMAT fmt                        - Format of the pixel
//
//     PARGBPIXELDESC ppixd                 - Pointer to a structure to be
//                                            filled with information about
//                                            the pixel
//
// Return Value:
//
//     None.
//
//******************************************************************************
void GetARGBPixelDesc(D3DFORMAT fmt, PARGBPIXELDESC ppixd) {

    if (!ppixd) {
        return;
    }

    memset(ppixd, 0, sizeof(ARGBPIXELDESC));

    switch (fmt) {

        case D3DFMT_P8:
        case D3DFMT_A8R8G8B8:
#ifdef UNDER_XBOX
        case D3DFMT_LIN_A8R8G8B8:
#endif // UNDER_XBOX
            ppixd->dwAMask     = 0xFF000000;
            ppixd->dwAShift    = 24;

        case D3DFMT_X8R8G8B8:
#ifdef UNDER_XBOX
        case D3DFMT_LIN_X8R8G8B8:
#endif // UNDER_XBOX
            ppixd->dwRMask     = 0x00FF0000;
            ppixd->dwGMask     = 0x0000FF00;
            ppixd->dwBMask     = 0x000000FF;
            ppixd->dwRShift    = 16;
            ppixd->dwGShift    = 8;
            ppixd->dwBShift    = 0;
            ppixd->uStride     = 4;
            break;

        case D3DFMT_R8G8B8:
            ppixd->dwRMask     = 0xFF0000;
            ppixd->dwGMask     = 0x00FF00;
            ppixd->dwBMask     = 0x0000FF;
            ppixd->dwRShift    = 16;
            ppixd->dwGShift    = 8;
            ppixd->dwBShift    = 0;
            ppixd->uStride     = 3;
            break;

        case D3DFMT_A1R5G5B5:
#ifdef UNDER_XBOX
        case D3DFMT_LIN_A1R5G5B5:
#endif // UNDER_XBOX
            ppixd->dwAMask     = 0x8000;
            ppixd->dwAShift    = 15;

        case D3DFMT_X1R5G5B5:
#ifdef UNDER_XBOX
        case D3DFMT_LIN_X1R5G5B5:
#endif // UNDER_XBOX
            ppixd->dwRMask     = 0x7C00;
            ppixd->dwGMask     = 0x03E0;
            ppixd->dwBMask     = 0x001F;
            ppixd->dwRShift    = 10;
            ppixd->dwGShift    = 5;
            ppixd->dwBShift    = 0;
            ppixd->uStride     = 2;
            break;

        case D3DFMT_R5G6B5:
#ifdef UNDER_XBOX
        case D3DFMT_LIN_R5G6B5:
#endif // UNDER_XBOX
            ppixd->dwRMask     = 0xF800;
            ppixd->dwGMask     = 0x07E0;
            ppixd->dwBMask     = 0x001F;
            ppixd->dwRShift    = 11;
            ppixd->dwGShift    = 5;
            ppixd->dwBShift    = 0;
            ppixd->uStride     = 2;
            break;

        case D3DFMT_A4R4G4B4:
#ifdef UNDER_XBOX
        case D3DFMT_LIN_A4R4G4B4:
#endif // UNDER_XBOX
            ppixd->dwAMask     = 0xF000;
            ppixd->dwAShift    = 12;

        case D3DFMT_X4R4G4B4:
            ppixd->dwRMask     = 0x0F00;
            ppixd->dwGMask     = 0x00F0;
            ppixd->dwBMask     = 0x000F;
            ppixd->dwRShift    = 8;
            ppixd->dwGShift    = 4;
            ppixd->dwBShift    = 0;
            ppixd->uStride     = 2;
            break;

        case D3DFMT_A8:
#ifdef UNDER_XBOX
        case D3DFMT_LIN_A8:
#endif //UNDER_XBOX
            ppixd->dwAMask     = 0xFF;
            ppixd->dwAShift    = 0;
            ppixd->dwRMask     = 0;
            ppixd->dwGMask     = 0;
            ppixd->dwBMask     = 0;
            ppixd->dwRShift    = 0;
            ppixd->dwGShift    = 0;
            ppixd->dwBShift    = 0;
            ppixd->uStride     = 1;
            break;

#ifdef UNDER_XBOX

        case D3DFMT_A8B8G8R8:
        case D3DFMT_LIN_A8B8G8R8:
            ppixd->dwAMask     = 0xFF000000;
            ppixd->dwAShift    = 24;
            ppixd->dwRMask     = 0x000000FF;
            ppixd->dwGMask     = 0x0000FF00;
            ppixd->dwBMask     = 0x00FF0000;
            ppixd->dwRShift    = 0;
            ppixd->dwGShift    = 8;
            ppixd->dwBShift    = 16;
            ppixd->uStride     = 4;
            break;

        case D3DFMT_B8G8R8A8:
        case D3DFMT_LIN_B8G8R8A8:
            ppixd->dwAMask     = 0x000000FF;
            ppixd->dwAShift    = 0;
            ppixd->dwRMask     = 0x0000FF00;
            ppixd->dwGMask     = 0x00FF0000;
            ppixd->dwBMask     = 0xFF000000;
            ppixd->dwRShift    = 8;
            ppixd->dwGShift    = 16;
            ppixd->dwBShift    = 24;
            ppixd->uStride     = 4;
            break;

        case D3DFMT_R8G8B8A8:
        case D3DFMT_LIN_R8G8B8A8:
            ppixd->dwAMask     = 0x000000FF;
            ppixd->dwAShift    = 0;
            ppixd->dwRMask     = 0xFF000000;
            ppixd->dwGMask     = 0x00FF0000;
            ppixd->dwBMask     = 0x0000FF00;
            ppixd->dwRShift    = 24;
            ppixd->dwGShift    = 16;
            ppixd->dwBShift    = 8;
            ppixd->uStride     = 4;
            break;

        case D3DFMT_R8B8:
        case D3DFMT_LIN_R8B8:
            ppixd->dwAMask     = 0;
            ppixd->dwRMask     = 0xFF00;
            ppixd->dwGMask     = 0;
            ppixd->dwBMask     = 0x00FF;
            ppixd->dwAShift    = 0;
            ppixd->dwRShift    = 8;
            ppixd->dwGShift    = 0;
            ppixd->dwBShift    = 0;
            ppixd->uStride     = 2;
            break;

        case D3DFMT_G8B8:
        case D3DFMT_LIN_G8B8:
            ppixd->dwAMask     = 0;
            ppixd->dwRMask     = 0;
            ppixd->dwGMask     = 0xFF00;
            ppixd->dwBMask     = 0x00FF;
            ppixd->dwAShift    = 0;
            ppixd->dwRShift    = 0;
            ppixd->dwGShift    = 8;
            ppixd->dwBShift    = 0;
            ppixd->uStride     = 2;
            break;

        case D3DFMT_R4G4B4A4:
        case D3DFMT_LIN_R4G4B4A4:
            ppixd->dwAMask     = 0x000F;
            ppixd->dwAShift    = 0;
            ppixd->dwRMask     = 0xF000;
            ppixd->dwGMask     = 0x0F00;
            ppixd->dwBMask     = 0x00F0;
            ppixd->dwRShift    = 12;
            ppixd->dwGShift    = 8;
            ppixd->dwBShift    = 4;
            ppixd->uStride     = 2;
            break;

        case D3DFMT_R5G5B5A1:
        case D3DFMT_LIN_R5G5B5A1:
            ppixd->dwAMask     = 0x0001;
            ppixd->dwRMask     = 0xF800;
            ppixd->dwGMask     = 0x07C0;
            ppixd->dwBMask     = 0x002E;
            ppixd->dwAShift    = 0;
            ppixd->dwRShift    = 11;
            ppixd->dwGShift    = 6;
            ppixd->dwBShift    = 1;
            ppixd->uStride     = 2;
            break;

        case D3DFMT_L6V5U5:
        case D3DFMT_LIN_R6G5B5:
            ppixd->dwAMask     = 0;
            ppixd->dwRMask     = 0xFC00;
            ppixd->dwGMask     = 0x03E0;
            ppixd->dwBMask     = 0x001F;
            ppixd->dwAShift    = 0;
            ppixd->dwRShift    = 11;
            ppixd->dwGShift    = 5;
            ppixd->dwBShift    = 0;
            ppixd->uStride     = 2;
            break;

#endif //UNDER_XBOX
    }
}

//******************************************************************************
//
// Function:
//
//     GetTextureDesc
//
// Description:
//
//     Locate the given texture in the texture list and return a pointer to
//     its entry.
//
// Arguments:
//
//     LPDIRECT3DBASETEXTURE8 pd3dtb         - Pointer to the texture object
//
// Return Value:
//
//     A pointer to the corresponding entry in the texture table.
//
//******************************************************************************
static PTEXTUREDESC GetTextureDesc(LPDIRECT3DBASETEXTURE8 pd3dtb) {

    PTEXTUREDESC ptexd;

    for (ptexd = g_ptexdList; 
         ptexd && ptexd->pd3dtb != pd3dtb; 
         ptexd = ptexd->ptexdNext
    );

    return ptexd;
}

//******************************************************************************
//
// Function:
//
//     FilterTexture
//
// Description:
//
//     Filter the given level of the given mipmap to all lower levels using
//     the given filter.
//
// Arguments:
//
//     LPDIRECT3DBASETEXTURE8 pd3dt  - Pointer to the texture object
//
//     PALETTECOLOR* ppcPalette      - Pointer to the first entry of
//                                     a palette to be initialized (if
//                                     palettized)
//
//     UINT uSrcLevel                - Level of resolution to filter
//
//     DWORD dwFilter                - Filter to use
//
// Return Value:
//
//     A pointer to the corresponding entry in the texture table.
//
//******************************************************************************
BOOL FilterTexture(LPDIRECT3DBASETEXTURE8 pd3dt, PALETTECOLOR* ppcPalette, 
                                                UINT uSrcLevel, DWORD dwFilter)
{
    PTEXTUREDESC ptexd;
    PALETTEENTRY *ppe = (PALETTEENTRY*)ppcPalette;
    HRESULT      hr;
#ifdef UNDER_XBOX
    PALETTEENTRY ppeEntries[256];
#endif // UNDER_XBOX

    ptexd = GetTextureDesc(pd3dt);
    if (!ptexd) {
        return FALSE;
    }

    if (!(ptexd->tt & TTYPE_MIPMAP)) {
        return TRUE;
    }

#ifdef UNDER_XBOX
    if (ppcPalette) {
        memcpy(ppeEntries, ppcPalette, 256 * sizeof(PALETTEENTRY));
        ConvertD3DCOLORToPALETTEENTRY(ppeEntries, 256);
        ppe = ppeEntries;
    }
#endif // UNDER_XBOX

    if (ptexd->tt & TTYPE_VOLUME) {
        hr = D3DXFilterVolumeTexture((LPDIRECT3DVOLUMETEXTURE8)pd3dt, 
                                ppe, uSrcLevel, dwFilter);
    }
    else if (ptexd->tt & TTYPE_CUBEMAP) {
        hr = D3DXFilterCubeTexture((LPDIRECT3DCUBETEXTURE8)pd3dt, 
                                ppe, uSrcLevel, dwFilter);
    }
    else {
        hr = D3DXFilterTexture((LPDIRECT3DTEXTURE8)pd3dt, 
                                ppe, uSrcLevel, dwFilter);
    }

    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("D3DXFilterXTexture"));
        return FALSE;
    }

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     SetTranslucency
//
// Description:
//
//     Set the alpha channel of the given surface object to reflect the given
//     alpha and color key values.
//
// Arguments:
//
//     LPDIRECT3DSURFACE8 pSurface          - Pointer to the surface object
//
//     PALETTECOLOR* ppcPalette             - Pointer to the first entry of
//                                            the palette for a palettized
//                                            surface
//
//     float fAlpha                         - Translucency value ranging from
//                                            0.0 to 1.0, where 0.0 is 
//                                            transparent and 1.0 is opaque
//
//     D3DCOLOR cColorKey                   - Color value of the pixels to
//                                            make transparent
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
static BOOL SetTranslucency(LPDIRECT3DSURFACE8 pSurface, PALETTECOLOR* ppcPalette, 
                            float fAlpha, D3DCOLOR cColorKey) 
{
    D3DSURFACE_DESC     d3dsd;
    D3DLOCKED_RECT      d3dlr;
    ARGBPIXELDESC       pixd;
    DWORD               dwPitch;
    DWORD               dwColorKey;
    UINT                i, j;
    HRESULT             hr;

    // Get the format of the surface
    hr = pSurface->GetDesc(&d3dsd);
    if (ResultFailed(hr, TEXT("IDirect3DSurface8::GetDesc"))) {
        return FALSE;
    }

    if (!(cColorKey == COLORKEY_NONE || cColorKey == COLORKEY_PIXEL1)) {
        // Get the surface-specific colorkey value (the representation of
        // the pixel in surface memory) from the red, green, and blue
        // components of the given D3DCOLOR
        dwColorKey = ColorToPixel(d3dsd.Format, ppcPalette, cColorKey & 0xFFFFFF);
    }

    // Lock the texture
    hr = pSurface->LockRect(&d3dlr, NULL, 0);
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DSurface8::LockRect"));
        return FALSE;
    }

    // If the surface is palettized, set the translucency in the palette entries
    if (d3dsd.Format == D3DFMT_P8) {

        LPDIRECT3DDEVICE8   pDevice;
        D3DCAPS8            d3dcaps;
        UINT                i;

        hr = pSurface->GetDevice(&pDevice);
        if (ResultFailed(hr, TEXT("IDirect3DSurface8::GetDevice"))) {
            return FALSE;
        }

        hr = pDevice->GetDeviceCaps(&d3dcaps);
        pDevice->Release();
        if (ResultFailed(hr, TEXT("IDirect3DDevice8::GetDeviceCaps"))) {
            return FALSE;
        }

        if (!ppcPalette || !(d3dcaps.TextureCaps & D3DPTEXTURECAPS_ALPHAPALETTE)) {
            return FALSE;
        }

        for (i = 0; i < 256; i++) {
#ifndef UNDER_XBOX
            ppcPalette[i].peFlags = (BYTE)(fAlpha * 255.0f);
#else
            ppcPalette[i] = (ppcPalette[i] & 0x00FFFFFF) | ((BYTE)(fAlpha * 255.0f) << 24);
#endif // UNDER_XBOX
        }

        if (cColorKey == COLORKEY_PIXEL1) {
            dwColorKey = *(LPBYTE)d3dlr.pBits;
        }
        if (cColorKey != COLORKEY_NONE) {
#ifndef UNDER_XBOX
            ppcPalette[dwColorKey].peFlags = 0;
#else
            ppcPalette[dwColorKey] &= 0x00FFFFFF;
#endif // UNDER_XBOX
        }
    }

    else {

        // Get the pixel format of the surface
        GetARGBPixelDesc(d3dsd.Format, &pixd);

        if (cColorKey == COLORKEY_NONE) {
            dwColorKey = COLORKEY_NONE;
        }

        // Set the translucency
        switch (d3dsd.Format) {

#ifdef UNDER_XBOX
            case D3DFMT_LIN_A8R8G8B8:
#endif // UNDER_XBOX
            case D3DFMT_A8R8G8B8:

                LPDWORD pdwPixel;
                DWORD   dwAlpha;

                dwAlpha = (DWORD)((float)pixd.dwAMask * fAlpha) & pixd.dwAMask;
                pdwPixel = (LPDWORD)d3dlr.pBits;

                // Assume an aligned pitch value (i.e. the quotient of the following
                // division will not have a remainder)
                dwPitch = d3dlr.Pitch / pixd.uStride;

                if (cColorKey == COLORKEY_PIXEL1) {
                    dwColorKey = *pdwPixel;
                }

                for (i = 0; i < d3dsd.Height; i++) {

                    for (j = 0; j < d3dsd.Width; j++) {

                        if ((*(pdwPixel + j) & ~pixd.dwAMask) == dwColorKey) {
                            *(pdwPixel + j) &= ~pixd.dwAMask;
                        }
                        else {
                            *(pdwPixel + j) = dwAlpha | (~pixd.dwAMask & *(pdwPixel + j));
                        }
                    }

                    pdwPixel += dwPitch;
                }

                break;

#ifdef UNDER_XBOX
            case D3DFMT_LIN_A1R5G5B5:
            case D3DFMT_LIN_A4R4G4B4:
#endif // UNDER_XBOX
            case D3DFMT_A1R5G5B5:
            case D3DFMT_A4R4G4B4: {

                LPWORD pwPixel;
                WORD   wAlpha;

                wAlpha = (WORD)((UINT)((float)pixd.dwAMask * fAlpha) & pixd.dwAMask);
                pwPixel = (LPWORD)d3dlr.pBits;

                // Assume an aligned pitch value (i.e. the quotient of the following
                // division will not have a remainder)
                dwPitch = d3dlr.Pitch / pixd.uStride;

                if (cColorKey == COLORKEY_PIXEL1) {
                    dwColorKey = *pwPixel;
                }

                for (i = 0; i < d3dsd.Height; i++) {

                    for (j = 0; j < d3dsd.Width; j++) {

                        if ((*(pwPixel + j) & ~pixd.dwAMask) == dwColorKey) {
                            *(pwPixel + j) &= ~pixd.dwAMask;
                        }
                        else {
                            *(pwPixel + j) = wAlpha | (~(WORD)pixd.dwAMask & *(pwPixel + j));
                        }
                    }

                    pwPixel += dwPitch;
                }

                break;
            }
        }
    }

    // Unlock the surface
    hr = pSurface->UnlockRect();
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DSurface8::UnlockRect"));
        return FALSE;
    }

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     SetTranslucency
//
// Description:
//
//     Set the alpha channel of the given volume object to reflect the given
//     alpha and color key values.
//
// Arguments:
//
//     LPDIRECT3DVOLUME8 pVolume            - Pointer to the volume object
//
//     PALETTECOLOR* ppcPalette             - Pointer to the first entry of
//                                            the palette for a palettized
//                                            surface
//
//     float fAlpha                         - Translucency value ranging from
//                                            0.0 to 1.0, where 0.0 is 
//                                            transparent and 1.0 is opaque
//
//     D3DCOLOR cColorKey                   - Color value of the pixels to
//                                            make transparent
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
static BOOL SetTranslucency(LPDIRECT3DVOLUME8 pVolume, PALETTECOLOR* ppcPalette, 
                            float fAlpha, D3DCOLOR cColorKey) 
{
    D3DVOLUME_DESC      d3dvd;
    D3DLOCKED_BOX       d3dlb;
    ARGBPIXELDESC       pixd;
    DWORD               dwRPitch, dwSPitch;
    DWORD               dwColorKey;
    UINT                i, j, k;
    HRESULT             hr;

    // Get the format of the volume
    hr = pVolume->GetDesc(&d3dvd);
    if (ResultFailed(hr, TEXT("IDirect3DVolume8::GetDesc"))) {
        return FALSE;
    }

    if (!(cColorKey == COLORKEY_NONE || cColorKey == COLORKEY_PIXEL1)) {
        // Get the surface-specific colorkey value (the representation of
        // the pixel in surface memory) from the red, green, and blue
        // components of the given D3DCOLOR
        dwColorKey = ColorToPixel(d3dvd.Format, ppcPalette, cColorKey & 0xFFFFFF);
    }

    // Lock the volume
    hr = pVolume->LockBox(&d3dlb, NULL, 0);
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DVolume8::LockBox"));
        return FALSE;
    }

    // If the texture is palettized, set the translucency in the palette entries
    if (d3dvd.Format == D3DFMT_P8) {

        LPDIRECT3DDEVICE8 pDevice;
        D3DCAPS8          d3dcaps;
        UINT              i;

        hr = pVolume->GetDevice(&pDevice);
        if (ResultFailed(hr, TEXT("IDirect3DSurface8::GetDevice"))) {
            return FALSE;
        }

        hr = pDevice->GetDeviceCaps(&d3dcaps);
        pDevice->Release();
        if (ResultFailed(hr, TEXT("IDirect3DDevice8::GetDeviceCaps"))) {
            return FALSE;
        }

        if (!ppcPalette || !(d3dcaps.TextureCaps & D3DPTEXTURECAPS_ALPHAPALETTE)) {
            return FALSE;
        }

        for (i = 0; i < 256; i++) {
#ifndef UNDER_XBOX
            ppcPalette[i].peFlags = (BYTE)(fAlpha * 255.0f);
#else
            ppcPalette[i] = (ppcPalette[i] & 0x00FFFFFF) | ((BYTE)(fAlpha * 255.0f) << 24);
#endif // UNDER_XBOX
        }

        if (cColorKey == COLORKEY_PIXEL1) {
            dwColorKey = *(LPBYTE)d3dlb.pBits;
        }
        if (cColorKey != COLORKEY_NONE) {
#ifndef UNDER_XBOX
            ppcPalette[dwColorKey].peFlags = 0;
#else
            ppcPalette[dwColorKey] &= 0x00FFFFFF;
#endif // UNDER_XBOX
        }

        return TRUE;
    }

    // Get the pixel format of the volume
    GetARGBPixelDesc(d3dvd.Format, &pixd);

    if (cColorKey == COLORKEY_NONE) {
        dwColorKey = COLORKEY_NONE;
    }

    // Set the translucency
    switch (d3dvd.Format) {

#ifdef UNDER_XBOX
        case D3DFMT_LIN_A8R8G8B8:
#endif // UNDER_XBOX
        case D3DFMT_A8R8G8B8:

            LPDWORD pdwPixel;
            DWORD   dwAlpha;

            dwAlpha = (DWORD)((float)pixd.dwAMask * fAlpha) & pixd.dwAMask;
            pdwPixel = (LPDWORD)d3dlb.pBits;

            // Assume aligned pitch values (i.e. the quotients of the following
            // divisions will not have remainders)
            dwRPitch = d3dlb.RowPitch / pixd.uStride;
            dwSPitch = (d3dlb.SlicePitch - (d3dlb.RowPitch * d3dvd.Height)) / pixd.uStride;

            if (cColorKey == COLORKEY_PIXEL1) {
                dwColorKey = *pdwPixel;
            }

            for (i = 0; i < d3dvd.Depth; i++) {

                for (j = 0; j < d3dvd.Height; j++) {

                    for (k = 0; k < d3dvd.Width; k++) {

                        if ((*(pdwPixel + k) & ~pixd.dwAMask) == dwColorKey) {
                            *(pdwPixel + k) &= ~pixd.dwAMask;
                        }
                        else {
                            *(pdwPixel + k) = dwAlpha | (~pixd.dwAMask & *(pdwPixel + k));
                        }
                    }

                    pdwPixel += dwRPitch;
                }

                pdwPixel += dwSPitch;
            }

            break;

#ifdef UNDER_XBOX
        case D3DFMT_LIN_A1R5G5B5:
        case D3DFMT_LIN_A4R4G4B4:
#endif // UNDER_XBOX
        case D3DFMT_A1R5G5B5:
        case D3DFMT_A4R4G4B4: {

            LPWORD pwPixel;
            WORD   wAlpha;

            wAlpha = (WORD)((UINT)((float)pixd.dwAMask * fAlpha) & pixd.dwAMask);
            pwPixel = (LPWORD)d3dlb.pBits;

            // Assume aligned pitch values (i.e. the quotients of the following
            // divisions will not have remainders)
            dwRPitch = d3dlb.RowPitch / pixd.uStride;
            dwSPitch = (d3dlb.SlicePitch - (d3dlb.RowPitch * d3dvd.Height)) / pixd.uStride;

            if (cColorKey == COLORKEY_PIXEL1) {
                dwColorKey = *pwPixel;
            }

            for (i = 0; i < d3dvd.Depth; i++) {

                for (j = 0; j < d3dvd.Height; j++) {

                    for (k = 0; k < d3dvd.Width; k++) {

                        if ((*(pwPixel + k) & ~pixd.dwAMask) == dwColorKey) {
                            *(pwPixel + k) &= ~pixd.dwAMask;
                        }
                        else {
                            *(pwPixel + k) = wAlpha | (~(WORD)pixd.dwAMask & *(pwPixel + k));
                        }
                    }

                    pwPixel += dwRPitch;
                }

                pwPixel += dwSPitch;
            }

            break;
        }
    }

    // Unlock the surface
    hr = pVolume->UnlockBox();
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DVolume8::UnlockBox"));
        return FALSE;
    }

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     SetTranslucency
//
// Description:
//
//     Set the alpha channel of the given texture object to reflect the given
//     alpha and color key values.
//
// Arguments:
//
//     LPDIRECT3DBASETEXTURE8 pd3dtb        - Pointer to the texture object
//
//     PALETTECOLOR* ppcPalette             - Pointer to the first entry of
//                                            the palette for a palettized
//                                            texture
//
//     float fAlpha                         - Translucency value ranging from
//                                            0.0 to 1.0, where 0.0 is 
//                                            transparent and 1.0 is opaque
//
//     D3DCOLOR cColorKey                   - Color value of the pixels to
//                                            make transparent
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL SetTranslucency(LPDIRECT3DBASETEXTURE8 pd3dtb, PALETTECOLOR* ppcPalette, 
                        float fAlpha, D3DCOLOR cColorKey) 
{
    LPDIRECT3DDEVICE8   pDevice;
    D3DCAPS8            d3dcaps;
    PTEXTUREDESC        ptexd;
    HRESULT             hr;
    BOOL                bRet = TRUE;

    // Parameter validation
    if (!pd3dtb) {
        return FALSE;
    }

    hr = pd3dtb->GetDevice(&pDevice);
    if (ResultFailed(hr, TEXT("IDirect3DResource8::GetDevice"))) {
        return FALSE;
    }

    hr = pDevice->GetDeviceCaps(&d3dcaps);
    pDevice->Release();
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::GetDeviceCaps"))) {
        return FALSE;
    }

    // Fail if the current device does not support translucency
    if (!(d3dcaps.TextureCaps & D3DPTEXTURECAPS_ALPHA)) {
        bRet = FALSE;
    }

    ptexd = GetTextureDesc(pd3dtb);
    if (!ptexd) {
        return FALSE;
    }

    if (ptexd->tt & TTYPE_VOLUME) {

        LPDIRECT3DVOLUME8        pVolume;
        LPDIRECT3DVOLUMETEXTURE8 pd3dtv = (LPDIRECT3DVOLUMETEXTURE8)pd3dtb;

        hr = pd3dtv->GetVolumeLevel(0, &pVolume);
        if (FAILED(hr)) {
            ResultFailed(hr, TEXT("IDirect3DVolumeTexture8::GetVolumeLevel"));
            return FALSE;
        }

        if (!SetTranslucency(pVolume, ppcPalette, fAlpha, cColorKey)) {
            pVolume->Release();
            return FALSE;
        }

        pVolume->Release();
    }
    else if (ptexd->tt & TTYPE_CUBEMAP) {

        LPDIRECT3DSURFACE8      pSurface;
        LPDIRECT3DCUBETEXTURE8  pd3dtc = (LPDIRECT3DCUBETEXTURE8)pd3dtb;
        UINT                    i;

        for (i = 0; i < 6; i++) {

            hr = pd3dtc->GetCubeMapSurface((D3DCUBEMAP_FACES)i, 0, &pSurface);
            if (FAILED(hr)) {
                ResultFailed(hr, TEXT("IDirect3DCubeMap8::GetCubeMapSurface"));
                return FALSE;
            }

            if (!SetTranslucency(pSurface, ppcPalette, fAlpha, cColorKey)) {
                pSurface->Release();
                return FALSE;
            }

            pSurface->Release();
        }
    }
    else {

        LPDIRECT3DSURFACE8 pSurface;
        LPDIRECT3DTEXTURE8 pd3dt = (LPDIRECT3DTEXTURE8)pd3dtb;

        hr = pd3dt->GetSurfaceLevel(0, &pSurface);
        if (FAILED(hr)) {
            ResultFailed(hr, TEXT("IDirect3DTexture8::GetSurfaceLevel"));
            return FALSE;
        }

        if (!SetTranslucency(pSurface, ppcPalette, fAlpha, cColorKey)) {
            pSurface->Release();
            return FALSE;
        }

        pSurface->Release();
    }

    if (ptexd->tt & TTYPE_MIPMAP) {
        if (!FilterTexture(pd3dtb, ppcPalette)) {
            return FALSE;
        }
    }

    return bRet;
}

//******************************************************************************
//
// Function:
//
//     ColorToPixel
//
// Description:
//
//     Calculate the format-specific color value (the representation of
//     the pixel in surface/volume memory) from the red, green, and blue
//     components of the given D3DCOLOR.
//
// Arguments:
//
//     D3DFORMAT fmt                   - Resource format from which to
//                                       calculate the pixel value
//
//     PALETTECOLOR* ppcPalette        - Pointer to the first entry of
//                                       the palette for a palettized
//                                       texture
//
//     D3DCOLOR c                      - Color of the pixel
//
// Return Value:
//
//     The pixel representation in surface memory of the given color value on
//     success, zero on failure.
//
//******************************************************************************
DWORD ColorToPixel(D3DFORMAT fmt, PALETTECOLOR* ppcPalette, D3DCOLOR c) {

    DWORD               dwPixel;
    BYTE                r, g, b, a;

    r = (BYTE)RGBA_GETRED(c);
    g = (BYTE)RGBA_GETGREEN(c);
    b = (BYTE)RGBA_GETBLUE(c);
    a = (BYTE)RGBA_GETALPHA(c);

    // If the format is palettized, select the nearest palette entry
    // to the given color
    if (fmt == D3DFMT_P8) {

        UINT                i;
        int                 dr, dg, db, d, dLast;

        if (!ppcPalette) {
            return 0;
        }

        dLast = INT_MAX;

        // Find the entry in the palette that most closely matches the
        // given pixel color
        for (i = 0; i < 256; i++) {

#ifndef UNDER_XBOX
            dr = (int)ppcPalette[i].peRed - r;
            dg = (int)ppcPalette[i].peGreen - g;
            db = (int)ppcPalette[i].peBlue - b;
#else
            dr = (int)RGBA_GETRED(ppcPalette[i]) - r;
            dg = (int)RGBA_GETGREEN(ppcPalette[i]) - g;
            db = (int)RGBA_GETBLUE(ppcPalette[i]) - b;
#endif // UNDER_XBOX

            d = dr * dr + dg * dg + db * db;

            if (d < dLast) {
                dwPixel = i;
                dLast = d;
                if (d == 0) {
                    break;
                }
            }
        }

//        DebugString(TEXT("Color key set to index %d - r: %d, g: %d, b: %d"), 
//                match, ppe[match].peRed, ppe[match].peGreen, ppe[match].peBlue);
    }

    else {

        ARGBPIXELDESC       pixd;

        // Get the pixel format of the texture
        GetARGBPixelDesc(fmt, &pixd);

        dwPixel = ((BYTE)((float)(pixd.dwAMask >> pixd.dwAShift) * ((float)a / 255.0f) + 0.5f) << pixd.dwAShift) |
                  ((BYTE)((float)(pixd.dwRMask >> pixd.dwRShift) * ((float)r / 255.0f) + 0.5f) << pixd.dwRShift) |
                  ((BYTE)((float)(pixd.dwGMask >> pixd.dwGShift) * ((float)g / 255.0f) + 0.5f) << pixd.dwGShift) |
                  ((BYTE)((float)(pixd.dwBMask >> pixd.dwBShift) * ((float)b / 255.0f) + 0.5f) << pixd.dwBShift);
    }

    return dwPixel;
}

//******************************************************************************
//
// Function:
//
//     CopyTexture
//
// Description:
//
//     Copy the contents of the given source texture into the given destination
//     texture using the given filter.  If the destination texture is a cube map 
//     and the source is not, the source texture will be copied into all faces 
//     of the cube map.  If the destination texture is a bump map and the source 
//     texture is not, the source texture is treated as a height map.  Only 
//     textures that are described in the texture table may be used as source or 
//     destination textures.
//
// Arguments:
//
//     LPDIRECT3DBASETEXTURE8 pd3dtbDst     - Pointer to the destination texture 
//                                            object
//
//     PALETTECOLOR* ppcPalDst              - Pointer to the first entry of
//                                            the destination palette
//
//     LPDIRECT3DBASETEXTURE8 pd3dtbSrc     - Pointer to the source texture 
//                                            object
//
//     PALETTECOLOR* ppcPalSrc              - Pointer to the first entry of
//                                            the source palette
//
//     DWORD dwFilter                       - Filter to apply during the copy
//
// Return Value:
//
//     An HRESULT indicating the result of the copy operation.
//
//******************************************************************************
HRESULT CopyTexture(LPDIRECT3DBASETEXTURE8 pd3dtbDst, PALETTECOLOR* ppcPalDst, 
                    LPDIRECT3DBASETEXTURE8 pd3dtbSrc, PALETTECOLOR* ppcPalSrc, 
                    DWORD dwFilter) 
{
    PTEXTUREDESC        ptexdDst, ptexdSrc;
    LPDIRECT3DSURFACE8  pd3dsDst, pd3dsSrc;
    LPDIRECT3DVOLUME8   pd3dvDst, pd3dvSrc;
    UINT                uLevelsDst, uLevelsSrc, i, j, k;
    PALETTEENTRY*       ppeDst = (PALETTEENTRY*)ppcPalDst, *ppeSrc = (PALETTEENTRY*)ppcPalSrc;
    HRESULT             hr;
#ifdef UNDER_XBOX
    PALETTEENTRY        ppeEntriesDst[256];
    PALETTEENTRY        ppeEntriesSrc[256];
#endif // UNDER_XBOX

    ptexdDst = GetTextureDesc(pd3dtbDst);
    ptexdSrc = GetTextureDesc(pd3dtbSrc);

    if (!ptexdDst || !ptexdSrc) {
        return E_INVALIDARG;
    }

#ifdef UNDER_XBOX
    if (ppcPalDst) {
        memcpy(ppeEntriesDst, ppcPalDst, 256 * sizeof(PALETTEENTRY));
        ConvertD3DCOLORToPALETTEENTRY(ppeEntriesDst, 256);
        ppeDst = ppeEntriesDst;
    }
    if (ppcPalSrc) {
        memcpy(ppeEntriesSrc, ppcPalSrc, 256 * sizeof(PALETTEENTRY));
        ConvertD3DCOLORToPALETTEENTRY(ppeEntriesSrc, 256);
        ppeSrc = ppeEntriesSrc;
    }
#endif // UNDER_XBOX

    if ((((ptexdDst->tt & TTYPE_RESOURCEMASK) == TTYPE_TEXTURE) &&
         ((ptexdSrc->tt & TTYPE_RESOURCEMASK) == TTYPE_TEXTURE)) ||
        (((ptexdDst->tt & TTYPE_RESOURCEMASK) == TTYPE_BUMPMAP) &&
         ((ptexdSrc->tt & TTYPE_RESOURCEMASK) == TTYPE_BUMPMAP)))
    {
        uLevelsDst = pd3dtbDst->GetLevelCount();
        uLevelsSrc = pd3dtbSrc->GetLevelCount();

        for (i = 0, j = 0; i < uLevelsDst; i++) {

            j = (uLevelsDst - i >= uLevelsSrc) ? 0 : j + 1;
            hr = ((LPDIRECT3DTEXTURE8)pd3dtbDst)->GetSurfaceLevel(i, &pd3dsDst);
            if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetSurfaceLevel"))) {
                return hr;
            }
            hr = ((LPDIRECT3DTEXTURE8)pd3dtbSrc)->GetSurfaceLevel(j, &pd3dsSrc);
            if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetSurfaceLevel"))) {
                pd3dsDst->Release();
                return hr;
            }
            hr = D3DXLoadSurfaceFromSurface(pd3dsDst, ppeDst, NULL,
                                            pd3dsSrc, ppeSrc, NULL,
                                            dwFilter, 0);

            pd3dsSrc->Release();
            pd3dsDst->Release();

            if (ResultFailed(hr, TEXT("D3DXLoadSurfaceFromSurface"))) {
                return hr;
            }
        }

        return hr;
    }

    if ((((ptexdDst->tt & TTYPE_RESOURCEMASK) == TTYPE_CUBEMAP) &&
         ((ptexdSrc->tt & TTYPE_RESOURCEMASK) == TTYPE_TEXTURE)) ||
        (((ptexdDst->tt & TTYPE_RESOURCEMASK) == TTYPE_CUBEMAP) &&
         ((ptexdSrc->tt & TTYPE_RESOURCEMASK) == TTYPE_CUBEMAP)))
    {
        uLevelsDst = pd3dtbDst->GetLevelCount();
        uLevelsSrc = pd3dtbSrc->GetLevelCount();

        for (k = 0; k < 6; k++) {

            for (i = 0, j = 0; i < uLevelsDst; i++) {

                j = (uLevelsDst - i >= uLevelsSrc) ? 0 : j + 1;
                hr = ((LPDIRECT3DCUBETEXTURE8)pd3dtbDst)->GetCubeMapSurface((D3DCUBEMAP_FACES)k, i, &pd3dsDst);
                if (ResultFailed(hr, TEXT("IDirect3DCubeMap8::GetSurfaceLevel"))) {
                    return hr;
                }
                if (ptexdSrc->tt & TTYPE_CUBEMAP) {
                    hr = ((LPDIRECT3DCUBETEXTURE8)pd3dtbSrc)->GetCubeMapSurface((D3DCUBEMAP_FACES)k, j, &pd3dsSrc);
                }
                else {
                    hr = ((LPDIRECT3DTEXTURE8)pd3dtbSrc)->GetSurfaceLevel(j, &pd3dsSrc);
                }
                if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetSurfaceLevel"))) {
                    pd3dsDst->Release();
                    return hr;
                }
                hr = D3DXLoadSurfaceFromSurface(pd3dsDst, ppeDst, NULL,
                                                pd3dsSrc, ppeSrc, NULL,
                                                dwFilter, 0);

                pd3dsSrc->Release();
                pd3dsDst->Release();

                if (ResultFailed(hr, TEXT("D3DXLoadSurfaceFromSurface"))) {
                    return hr;
                }
            }
        }

        return hr;
    }

    if (((ptexdDst->tt & TTYPE_RESOURCEMASK) == TTYPE_BUMPMAP) &&
        ((ptexdSrc->tt & TTYPE_RESOURCEMASK) == TTYPE_TEXTURE))
    {
        LPDIRECT3DDEVICE8   pDevice;
        LPDIRECT3DSURFACE8  pd3dsH, pd3dsB, pd3ds;
        D3DSURFACE_DESC     d3dsd;
        D3DLOCKED_RECT      d3dlr;
        LPDWORD             pdwPixel;
        LPWORD              pwBump;
//        float               fOrder;
        float               *pfHeightMap, *pfHeight;
        D3DXVECTOR3         v1, v2, n;
        UINT                x, y;

        hr = pd3dtbDst->GetDevice(&pDevice);
        if (ResultFailed(hr, TEXT("IDirect3DResource8::GetDevice"))) {
            return hr;
        }

        uLevelsDst = pd3dtbDst->GetLevelCount();
        uLevelsSrc = pd3dtbSrc->GetLevelCount();

        for (i = 0, j = 0; i < uLevelsDst; i++) {

            j = (uLevelsDst - i >= uLevelsSrc) ? 0 : j + 1;

            hr = ((LPDIRECT3DTEXTURE8)pd3dtbSrc)->GetLevelDesc(j, &d3dsd);
            if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetDesc"))) {
                pDevice->Release();
                return hr;
            }

            // Create a 32 bit height map
#ifndef UNDER_XBOX
            if (ptexdSrc->fmt == D3DFMT_X8R8G8B8 ||
                ptexdSrc->fmt == D3DFMT_A8R8G8B8)
#else
            if (ptexdSrc->fmt == D3DFMT_LIN_X8R8G8B8 ||
                ptexdSrc->fmt == D3DFMT_LIN_A8R8G8B8)
#endif
            {
                hr = ((LPDIRECT3DTEXTURE8)pd3dtbSrc)->GetSurfaceLevel(j, &pd3dsH);
                if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetSurfaceLevel"))) {
                    pDevice->Release();
                    return hr;
                }
            }
            else {

#ifndef UNDER_XBOX
                hr = pDevice->CreateImageSurface(d3dsd.Width, d3dsd.Height, D3DFMT_A8R8G8B8, &pd3dsH);
#else
                hr = pDevice->CreateImageSurface(d3dsd.Width, d3dsd.Height, D3DFMT_LIN_A8R8G8B8, &pd3dsH);
#endif
                if (ResultFailed(hr, TEXT("IDirect3DDevice8::CreateImageSurface"))) {
                    pDevice->Release();
                    return hr;
                }
            
                hr = ((LPDIRECT3DTEXTURE8)pd3dtbSrc)->GetSurfaceLevel(j, &pd3ds);
                if (ResultFailed(hr, TEXT("IDirect3DDevice8::GetSurfaceLevel"))) {
                    pd3dsH->Release();
                    pDevice->Release();
                    return hr;
                }

                hr = D3DXLoadSurfaceFromSurface(pd3dsH, NULL, NULL, pd3ds, ppeSrc, NULL, dwFilter, 0);
                pd3ds->Release();
                if (ResultFailed(hr, TEXT("D3DXLoadSurfaceFromSurface"))) {
                    pd3dsH->Release();
                    pDevice->Release();
                    return hr;
                }
            }

            // Create a 16 bit bump map
#ifndef UNDER_XBOX
            hr = pDevice->CreateImageSurface(d3dsd.Width, d3dsd.Height, D3DFMT_V8U8, &pd3dsB);
#else
            hr = pDevice->CreateImageSurface(d3dsd.Width, d3dsd.Height, D3DFMT_LIN_V8U8, &pd3dsB);
#endif
            if (ResultFailed(hr, TEXT("IDirect3DDevice8::CreateImageSurface"))) {
                pd3dsH->Release();
                pDevice->Release();
                return hr;
            }

            pDevice->Release();

            // Convert the pixel intensities in the source image into height values
            // ranging from 0.0 to 1.0
            pfHeightMap = (float*)MemAlloc(d3dsd.Width * d3dsd.Height * sizeof(float));
            if (!pfHeightMap) {
                DebugString(TEXT("Memory allocation failed for height map"));
                pd3dsB->Release();
                pd3dsH->Release();
                return E_OUTOFMEMORY;
            }

            hr = pd3dsH->LockRect(&d3dlr, NULL, 0);
            if (FAILED(hr)) {
                ResultFailed(hr, TEXT("IDirect3DSurface8::LockRect"));
                MemFree(pfHeightMap);
                pd3dsB->Release();
                pd3dsH->Release();
                return hr;
            }

            pdwPixel = (LPDWORD)d3dlr.pBits;

            for (y = 0; y < d3dsd.Height; y++) {

                for (x = 0; x < d3dsd.Width; x++) {

                    pfHeightMap[y * d3dsd.Width + x] = 
                           (float)(((pdwPixel[x] >> 16) & 0xFF) +
                                   ((pdwPixel[x] >> 8)  & 0xFF) +
                                   ((pdwPixel[x])       & 0xFF)) / 3.0f / 255.0f;
                }

                pdwPixel += d3dlr.Pitch >> 2;
            }

            pd3dsH->UnlockRect();
            pd3dsH->Release();
       
            // Calculate bump map offsets from the height map information
            hr = pd3dsB->LockRect(&d3dlr, NULL, 0);
            if (FAILED(hr)) {
                ResultFailed(hr, TEXT("IDirect3DSurface8::LockRect"));
                MemFree(pfHeightMap);
                pd3dsB->Release();
                return hr;
            }

            pwBump = (LPWORD)d3dlr.pBits;
            v1 = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
            v2 = D3DXVECTOR3(0.0f, 0.0f, 0.0f);

            for (y = 0; y < d3dsd.Height; y++) {

                for (x = 0; x < d3dsd.Width; x++) {

                    // Tiled
                    pfHeight = &pfHeightMap[y * d3dsd.Width + x];
//                    fOrder = 1.0f;
                    if (y == d3dsd.Height - 1) {
                        v2.z = -(pfHeightMap[x] - *pfHeight);
                    }
                    else {
                        v2.z = -(pfHeight[d3dsd.Width] - pfHeight[0]);
                    }
                    if (x == d3dsd.Width - 1) {
                        v1.z = -(*(pfHeight - x) - *pfHeight);
                    }
                    else {
                        v1.z = -(pfHeight[1] - pfHeight[0]);
                    }
                    v1.x = (float)sqrt(1.0f - v1.z * v1.z);
                    v2.y = (float)sqrt(1.0f - v2.z * v2.z);
                    D3DXVec3Cross(&n, &v2, &v1);
                    D3DXVec3Normalize(&n, &n);
                    pwBump[x] = (int)(-n.y * 64.0f) << 8 |
                                (int)(n.x * 64.0f);

/*
                    // Non-tiled
                    pfHeight = &pfHeightMap[y * d3dsd.Width + x];
                    fOrder = 1.0f;
                    if (y == d3dsd.Height - 1) {
                        v2.z = *(pfHeight - d3dsd.Width) - *pfHeight;
                        fOrder *= -1.0f;
                    }
                    else {
                        v2.z = pfHeight[d3dsd.Width] - pfHeight[0];
                    }
                    if (x == d3dsd.Width - 1) {
                        v1.z = *(pfHeight - 1) - *pfHeight;
                        fOrder *= -1.0f;
                    }
                    else {
                        v1.z = pfHeight[1] - pfHeight[0];
                    }
                    v1.x = (float)sqrt(1.0f - v1.z * v1.z);
                    v2.y = -(float)sqrt(1.0f - v2.z * v2.z);
                    if (fOrder > 0.0f) {
                        D3DXVec3Cross(&n, &v1, &v2);
                    }
                    else {
                        D3DXVec3Cross(&n, &v2, &v1);
                    }
                    D3DXVec3Normalize(&n, &n);
                    pwBump[x] = (int)(-n.y * 64.0f) << 8 |
                                (int)(n.x * 64.0f);
*/
                }

                pwBump += d3dlr.Pitch >> 1;
            }

            MemFree(pfHeightMap);

            hr = pd3dsB->UnlockRect();
            if (FAILED(hr)) {
                ResultFailed(hr, TEXT("IDirect3DSurface8::UnlockRect"));
                pd3dsB->Release();
                return hr;
            }

            // Copy the bump map to the destination bump map
            hr = ((LPDIRECT3DTEXTURE8)pd3dtbDst)->GetSurfaceLevel(i, &pd3ds);
            if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetSurfaceLevel"))) {
                pd3dsB->Release();
                return hr;
            }

            hr = D3DXLoadSurfaceFromSurface(pd3ds, ppeDst, NULL, pd3dsB, NULL, NULL, dwFilter, 0);

            pd3ds->Release();
            pd3dsB->Release();

            if (ResultFailed(hr, TEXT("D3DXLoadSurfaceFromSurface"))) {
                return hr;
            }
        }

        return hr;
    }

    if (((ptexdDst->tt & TTYPE_RESOURCEMASK) == TTYPE_NORMALMAP) &&
        ((ptexdSrc->tt & TTYPE_RESOURCEMASK) == TTYPE_TEXTURE))
    {
        LPDIRECT3DDEVICE8   pDevice;
        LPDIRECT3DSURFACE8  pd3dsH, pd3dsB, pd3ds;
        D3DSURFACE_DESC     d3dsd;
        D3DLOCKED_RECT      d3dlr;
        LPDWORD             pdwPixel;
        LPDWORD             pdwNormal;
//        float               fOrder;
        float               *pfHeightMap, *pfHeight;
        D3DXVECTOR3         v1, v2, n;
        UINT                x, y;

        hr = pd3dtbDst->GetDevice(&pDevice);
        if (ResultFailed(hr, TEXT("IDirect3DResource8::GetDevice"))) {
            return hr;
        }

        uLevelsDst = pd3dtbDst->GetLevelCount();
        uLevelsSrc = pd3dtbSrc->GetLevelCount();

        for (i = 0, j = 0; i < uLevelsDst; i++) {

            j = (uLevelsDst - i >= uLevelsSrc) ? 0 : j + 1;

            hr = ((LPDIRECT3DTEXTURE8)pd3dtbSrc)->GetLevelDesc(j, &d3dsd);
            if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetDesc"))) {
                pDevice->Release();
                return hr;
            }

            // Create a 32 bit height map
#ifndef UNDER_XBOX
            if (ptexdSrc->fmt == D3DFMT_X8R8G8B8 ||
                ptexdSrc->fmt == D3DFMT_A8R8G8B8)
#else
            if (ptexdSrc->fmt == D3DFMT_LIN_X8R8G8B8 ||
                ptexdSrc->fmt == D3DFMT_LIN_A8R8G8B8)
#endif
            {
                hr = ((LPDIRECT3DTEXTURE8)pd3dtbSrc)->GetSurfaceLevel(j, &pd3dsH);
                if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetSurfaceLevel"))) {
                    pDevice->Release();
                    return hr;
                }
            }
            else {

#ifndef UNDER_XBOX
                hr = pDevice->CreateImageSurface(d3dsd.Width, d3dsd.Height, D3DFMT_A8R8G8B8, &pd3dsH);
#else
                hr = pDevice->CreateImageSurface(d3dsd.Width, d3dsd.Height, D3DFMT_LIN_A8R8G8B8, &pd3dsH);
#endif
                if (ResultFailed(hr, TEXT("IDirect3DDevice8::CreateImageSurface"))) {
                    pDevice->Release();
                    return hr;
                }
            
                hr = ((LPDIRECT3DTEXTURE8)pd3dtbSrc)->GetSurfaceLevel(j, &pd3ds);
                if (ResultFailed(hr, TEXT("IDirect3DDevice8::GetSurfaceLevel"))) {
                    pd3dsH->Release();
                    pDevice->Release();
                    return hr;
                }

                hr = D3DXLoadSurfaceFromSurface(pd3dsH, NULL, NULL, pd3ds, ppeSrc, NULL, dwFilter, 0);
                pd3ds->Release();
                if (ResultFailed(hr, TEXT("D3DXLoadSurfaceFromSurface"))) {
                    pd3dsH->Release();
                    pDevice->Release();
                    return hr;
                }
            }

            // Create a 32 bit normal map
#ifndef UNDER_XBOX
            hr = pDevice->CreateImageSurface(d3dsd.Width, d3dsd.Height, D3DFMT_A8R8G8B8, &pd3dsB);
#else
            hr = pDevice->CreateImageSurface(d3dsd.Width, d3dsd.Height, D3DFMT_LIN_A8R8G8B8, &pd3dsB);
#endif
            if (ResultFailed(hr, TEXT("IDirect3DDevice8::CreateImageSurface"))) {
                pd3dsH->Release();
                pDevice->Release();
                return hr;
            }

            pDevice->Release();

            // Convert the pixel intensities in the source image into height values
            // ranging from 0.0 to 1.0
            pfHeightMap = (float*)MemAlloc(d3dsd.Width * d3dsd.Height * sizeof(float));
            if (!pfHeightMap) {
                DebugString(TEXT("Memory allocation failed for height map"));
                pd3dsB->Release();
                pd3dsH->Release();
                return E_OUTOFMEMORY;
            }

            hr = pd3dsH->LockRect(&d3dlr, NULL, 0);
            if (FAILED(hr)) {
                ResultFailed(hr, TEXT("IDirect3DSurface8::LockRect"));
                MemFree(pfHeightMap);
                pd3dsB->Release();
                pd3dsH->Release();
                return hr;
            }

            pdwPixel = (LPDWORD)d3dlr.pBits;

            for (y = 0; y < d3dsd.Height; y++) {

                for (x = 0; x < d3dsd.Width; x++) {

                    pfHeightMap[y * d3dsd.Width + x] = 
                           (float)(((pdwPixel[x] >> 16) & 0xFF) +
                                   ((pdwPixel[x] >> 8)  & 0xFF) +
                                   ((pdwPixel[x])       & 0xFF)) / 3.0f / 255.0f;
                }

                pdwPixel += d3dlr.Pitch >> 2;
            }

            pd3dsH->UnlockRect();
            pd3dsH->Release();
       
            // Calculate normal map vectors from the height map information
            hr = pd3dsB->LockRect(&d3dlr, NULL, 0);
            if (FAILED(hr)) {
                ResultFailed(hr, TEXT("IDirect3DSurface8::LockRect"));
                MemFree(pfHeightMap);
                pd3dsB->Release();
                return hr;
            }

            pdwNormal = (LPDWORD)d3dlr.pBits;
            v1 = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
            v2 = D3DXVECTOR3(0.0f, 0.0f, 0.0f);

            for (y = 0; y < d3dsd.Height; y++) {

                for (x = 0; x < d3dsd.Width; x++) {

                    // Tiled
                    pfHeight = &pfHeightMap[y * d3dsd.Width + x];
//                    fOrder = 1.0f;
                    if (y == d3dsd.Height - 1) {
                        v2.z = -(pfHeightMap[x] - *pfHeight);
                    }
                    else {
                        v2.z = -(pfHeight[d3dsd.Width] - pfHeight[0]);
                    }
                    if (x == d3dsd.Width - 1) {
                        v1.z = -(*(pfHeight - x) - *pfHeight);
                    }
                    else {
                        v1.z = -(pfHeight[1] - pfHeight[0]);
                    }
                    v1.x = (float)sqrt(1.0f - v1.z * v1.z);
                    v2.y = (float)sqrt(1.0f - v2.z * v2.z);
                    D3DXVec3Cross(&n, &v2, &v1);
                    D3DXVec3Normalize(&n, &n);
                    pdwNormal[x] = VectorToColor(&n);

/*
                    // Non-tiled
                    pfHeight = &pfHeightMap[y * d3dsd.Width + x];
                    fOrder = 1.0f;
                    if (y == d3dsd.Height - 1) {
                        v2.z = *(pfHeight - d3dsd.Width) - *pfHeight;
                        fOrder *= -1.0f;
                    }
                    else {
                        v2.z = pfHeight[d3dsd.Width] - pfHeight[0];
                    }
                    if (x == d3dsd.Width - 1) {
                        v1.z = *(pfHeight - 1) - *pfHeight;
                        fOrder *= -1.0f;
                    }
                    else {
                        v1.z = pfHeight[1] - pfHeight[0];
                    }
                    v1.x = (float)sqrt(1.0f - v1.z * v1.z);
                    v2.y = (float)sqrt(1.0f - v2.z * v2.z);
                    if (fOrder > 0.0f) {
                        D3DXVec3Cross(&n, &v2, &v1);
                    }
                    else {
                        D3DXVec3Cross(&n, &v1, &v2);
                    }
                    D3DXVec3Normalize(&n, &n);
                    pdwNormal[x] = VectorToColor(&n);
*/
                }

                pdwNormal += d3dlr.Pitch >> 2;
            }

            MemFree(pfHeightMap);

            hr = pd3dsB->UnlockRect();
            if (FAILED(hr)) {
                ResultFailed(hr, TEXT("IDirect3DSurface8::UnlockRect"));
                pd3dsB->Release();
                return hr;
            }

            // Copy the normal map to the destination normal map
            hr = ((LPDIRECT3DTEXTURE8)pd3dtbDst)->GetSurfaceLevel(i, &pd3ds);
            if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetSurfaceLevel"))) {
                pd3dsB->Release();
                return hr;
            }

            hr = D3DXLoadSurfaceFromSurface(pd3ds, ppeDst, NULL, pd3dsB, NULL, NULL, dwFilter, 0);

            pd3ds->Release();
            pd3dsB->Release();

            if (ResultFailed(hr, TEXT("D3DXLoadSurfaceFromSurface"))) {
                return hr;
            }
        }

        return hr;
    }

    if (((ptexdDst->tt & TTYPE_RESOURCEMASK) == TTYPE_VOLUME) &&
        ((ptexdSrc->tt & TTYPE_RESOURCEMASK) == TTYPE_VOLUME))
    {
        uLevelsDst = pd3dtbDst->GetLevelCount();
        uLevelsSrc = pd3dtbSrc->GetLevelCount();

        for (i = 0, j = 0; i < uLevelsDst; i++) {

            j = (uLevelsDst - i >= uLevelsSrc) ? 0 : j + 1;
            hr = ((LPDIRECT3DVOLUMETEXTURE8)pd3dtbDst)->GetVolumeLevel(i, &pd3dvDst);
            if (ResultFailed(hr, TEXT("IDirect3DVolumeTexture8::GetSurfaceLevel"))) {
                return hr;
            }
            hr = ((LPDIRECT3DVOLUMETEXTURE8)pd3dtbSrc)->GetVolumeLevel(j, &pd3dvSrc);
            if (ResultFailed(hr, TEXT("IDirect3DVolumeTexture8::GetSurfaceLevel"))) {
                pd3dvDst->Release();
                return hr;
            }
            hr = D3DXLoadVolumeFromVolume(pd3dvDst, ppeDst, NULL,
                                            pd3dvSrc, ppeSrc, NULL,
                                            dwFilter, 0);

            pd3dvSrc->Release();
            pd3dvDst->Release();

            if (ResultFailed(hr, TEXT("D3DXLoadVolumeFromVolume"))) {
                return hr;
            }
        }

        return hr;
    }

    return E_NOTIMPL;
}

//******************************************************************************
//
// Function:
//
//     CreateNormalMap
//
// Description:
//
//     Create a cube map and populate it with normal vector information.
//
// Arguments:
//
//     LPDIRECT3DDEVICE8 pDevice       - Pointer to the device object
//
//     UINT uLength                    - Dimensions of the map
//
//     float fBumpDelta                - Maximum component offset to randomly 
//                                       perturb the surface normals
//
//     D3DFORMAT fmt                   - Format of the texture
//
//     BOOL bMipmap                    - Indicates whether or not to
//                                       use a mip map
//
//     D3DPOOL pool                    - Memory pool in which to create the map
//
// Return Value:
//
//     A pointer to the created diffuse map on success, NULL on failure.
//
//******************************************************************************
LPDIRECT3DCUBETEXTURE8 CreateNormalMap(LPDIRECT3DDEVICE8 pDevice, UINT uLength, 
                                    float fBumpDelta, D3DFORMAT fmt, BOOL bMipmap, 
                                    D3DPOOL pool)
{
    LPDIRECT3DCUBETEXTURE8  pd3dtc;
    LPDIRECT3DCUBETEXTURE8  pd3dtcBump = NULL;
    TEXTURETYPE             ttype;
    UINT                    uLevels;
    D3DLOCKED_RECT          d3dlr, d3dlrB;
    LPDWORD                 pdwPixel, pdwPixelB;
    D3DXVECTOR3             vDir;
    float                   fU, fV;
    UINT                    i, j, u, v;
    HRESULT                 hr;
#ifdef UNDER_XBOX
    Swizzler                swz(uLength, uLength, 1);
    BOOL                    bSwizzled = XGIsSwizzledFormat(fmt);
#endif

    // Currently only support 32 bpp formats
#ifndef UNDER_XBOX
    if (!(fmt == D3DFMT_A8R8G8B8 || fmt == D3DFMT_X8R8G8B8)) {
#else
    if (!(fmt == D3DFMT_A8R8G8B8 || fmt == D3DFMT_X8R8G8B8 || fmt == D3DFMT_LIN_A8R8G8B8 || fmt == D3DFMT_LIN_X8R8G8B8)) {
#endif
        return NULL;
    }

    ttype = TTYPE_CUBEMAP;
    if (bMipmap) {
        ttype |= TTYPE_MIPMAP;
    }

    pd3dtc = (LPDIRECT3DCUBETEXTURE8)CreateTexture(pDevice, uLength, uLength, fmt, ttype, pool);
    if (!pd3dtc) {
        return NULL;
    }

    // If the normal map has multiple levels and a delta is to be applied to the normals,
    // generate the random offset values to be applied and store them in the highest
    // level of a second cube map.  Filter the offsets to the lower levels for consistent
    // transitions.
    if (bMipmap && fBumpDelta != 0.0f) {
        pd3dtcBump = (LPDIRECT3DCUBETEXTURE8)CreateTexture(pDevice, uLength, uLength, D3DFMT_A8R8G8B8, ttype);
        if (!pd3dtcBump) {
            ReleaseTexture(pd3dtc);
            return NULL;
        }

        // Populate the cube texture with random offsets to be applied to the normal map
        for (i = 0; i < 6; i++) {
            hr = pd3dtcBump->LockRect((D3DCUBEMAP_FACES)i, 0, &d3dlr, NULL, 0);
            if (FAILED(hr)) {
                ResultFailed(hr, TEXT("IDirect3DCubeTexture8::LockRect"));
                ReleaseTexture(pd3dtcBump);
                ReleaseTexture(pd3dtc);
                return NULL;
            }

            pdwPixel = (LPDWORD)d3dlr.pBits;

#ifdef UNDER_XBOX
            swz.SetU(0);
            swz.SetV(0);
#endif

            for (v = 0; v < uLength; v++) {

                for (u = 0; u < uLength; u++) {

				    vDir = D3DXVECTOR3(SFRND(fBumpDelta), SFRND(fBumpDelta), SFRND(fBumpDelta));
#ifdef UNDER_XBOX
                    if (!bSwizzled) {
#endif
                        pdwPixel[u] = VectorToColor(&vDir);
#ifdef UNDER_XBOX
                    }
                    else {
                        pdwPixel[swz.Get2D()] = VectorToColor(&vDir);
                        swz.IncU();
                    }
#endif
                }

#ifdef UNDER_XBOX
                if (!bSwizzled) {
#endif
                    pdwPixel += (d3dlr.Pitch >> 2);
#ifdef UNDER_XBOX
                }
                else {
                    swz.IncV();
                }
#endif
            }

            hr = pd3dtcBump->UnlockRect((D3DCUBEMAP_FACES)i, 0);
            if (FAILED(hr)) {
                ResultFailed(hr, TEXT("IDirect3DCubeTexture8::UnlockRect"));
                ReleaseTexture(pd3dtcBump);
                ReleaseTexture(pd3dtc);
                return NULL;
            }
        }

        // Filter the offsets to the lower levels
        hr = D3DXFilterCubeTexture(pd3dtcBump, NULL, 0, D3DX_FILTER_BOX);
        if (FAILED(hr)) {
            ResultFailed(hr, TEXT("D3DXFilterCubeTexture"));
            ReleaseTexture(pd3dtcBump);
            ReleaseTexture(pd3dtc);
            return NULL;
        }
    }

    // Generate the normals
    uLevels = pd3dtc->GetLevelCount();

    for (i = 0; i < uLevels; i++) {

        for (j = 0; j < 6; j++) {

            hr = pd3dtc->LockRect((D3DCUBEMAP_FACES)j, i, &d3dlr, NULL, 0);
            if (FAILED(hr)) {
                ResultFailed(hr, TEXT("IDirect3DCubeTexture8::LockRect"));
                if (pd3dtcBump) ReleaseTexture(pd3dtcBump);
                ReleaseTexture(pd3dtc);
                return NULL;
            }

            if (pd3dtcBump) {
                hr = pd3dtcBump->LockRect((D3DCUBEMAP_FACES)j, i, &d3dlrB, NULL, 0);
                if (FAILED(hr)) {
                    ResultFailed(hr, TEXT("IDirect3DCubeTexture8::LockRect"));
                    ReleaseTexture(pd3dtcBump);
                    ReleaseTexture(pd3dtc);
                    return NULL;
                }
                pdwPixelB = (LPDWORD)d3dlrB.pBits;
            }

            pdwPixel = (LPDWORD)d3dlr.pBits;

            if (uLevels > 1) {
                uLength = 0x1 << ((uLevels - 1) - i);
            }

#ifdef UNDER_XBOX
            Swizzler swz(uLength, uLength, 1);
            swz.SetU(0);
            swz.SetV(0);
#endif

            for (v = 0; v < uLength; v++) {

                for (u = 0; u < uLength; u++) {

                    if (uLength > 1) {
                        fU = (float)u / (float)(uLength - 1);
                        fV = (float)v / (float)(uLength - 1);
                    }
                    else {
                        fU = 0.5f;
                        fV = 0.5f;
                    }

                    switch ((D3DCUBEMAP_FACES)j) {
                        case D3DCUBEMAP_FACE_POSITIVE_X:
                            D3DXVec3Normalize(&vDir, &D3DXVECTOR3(1.0f, 1.0f - (fV * 2.0f), 1.0f - (fU * 2.0f)));
                            break;
                        case D3DCUBEMAP_FACE_NEGATIVE_X:
                            D3DXVec3Normalize(&vDir, &D3DXVECTOR3(-1.0f, 1.0f - (fV * 2.0f), -1.0f + (fU * 2.0f)));
                            break;
                        case D3DCUBEMAP_FACE_POSITIVE_Y:
                            D3DXVec3Normalize(&vDir, &D3DXVECTOR3(-1.0f + (fU * 2.0f), 1.0f, -1.0f + (fV * 2.0f)));
                            break;
                        case D3DCUBEMAP_FACE_NEGATIVE_Y:
                            D3DXVec3Normalize(&vDir, &D3DXVECTOR3(-1.0f + (fU * 2.0f), -1.0f, 1.0f - (fV * 2.0f)));
                            break;
                        case D3DCUBEMAP_FACE_POSITIVE_Z:
                            D3DXVec3Normalize(&vDir, &D3DXVECTOR3(-1.0f + (fU * 2.0f), 1.0f - (fV * 2.0f), 1.0f));
                            break;
                        case D3DCUBEMAP_FACE_NEGATIVE_Z:
                            D3DXVec3Normalize(&vDir, &D3DXVECTOR3(1.0f - (fU * 2.0f), 1.0f - (fV * 2.0f), -1.0f));
                            break;
                    }
#if 1
                    vDir = -vDir;
#endif
                    if (!pd3dtcBump) {
    				    vDir += D3DXVECTOR3(SFRND(fBumpDelta), SFRND(fBumpDelta), SFRND(fBumpDelta));
                    }
                    else {
                        vDir += ColorToVector(pdwPixelB[u]);
                    }
				    D3DXVec3Normalize(&vDir, &vDir);

#ifdef UNDER_XBOX
                    if (!bSwizzled) {
#endif
                        pdwPixel[u] = VectorToColor(&vDir);
#ifdef UNDER_XBOX
                    }
                    else {
                        pdwPixel[swz.Get2D()] = VectorToColor(&vDir);

                        swz.IncU();
                    }
#endif
                }

#ifdef UNDER_XBOX
                if (!bSwizzled) {
#endif
                    pdwPixel += (d3dlr.Pitch >> 2);
#ifdef UNDER_XBOX
                }
                else {
                    swz.IncV();
                }
#endif
                if (pd3dtcBump) {
                    pdwPixelB += (d3dlrB.Pitch >> 2);
                }
            }

            if (pd3dtcBump) {
                hr = pd3dtcBump->UnlockRect((D3DCUBEMAP_FACES)j, i);
                if (FAILED(hr)) {
                    ResultFailed(hr, TEXT("IDirect3DCubeTexture8::UnlockRect"));
                    if (pd3dtcBump) ReleaseTexture(pd3dtcBump);
                    ReleaseTexture(pd3dtc);
                    return NULL;
                }
            }

            hr = pd3dtc->UnlockRect((D3DCUBEMAP_FACES)j, i);
            if (FAILED(hr)) {
                ResultFailed(hr, TEXT("IDirect3DCubeTexture8::UnlockRect"));
                if (pd3dtcBump) ReleaseTexture(pd3dtcBump);
                ReleaseTexture(pd3dtc);
                return NULL;
            }
        }
    }

    if (pd3dtcBump) {
        ReleaseTexture(pd3dtcBump);
    }

    return pd3dtc;
}

//******************************************************************************
//
// Function:
//
//     CreateHalfVectorMap
//
// Description:
//
//     Create a cube map and populate it with lookup information which,
//     given a normalized vector from a vertex to the viewer (supplied in the 
//     texture coordinates of the vertex), will return a normalized vector 
//     located halfway between the vertex-eye vector and the given light vector.
//     This normalized half-vector can then be used in specular lighting by
//     applying it in another stage with a normal cube map and 
//     D3DTOP_DOTPRODUCT3.
//
// Arguments:
//
//     LPDIRECT3DDEVICE8 pDevice       - Pointer to the device object
//
//     D3DMATRIX* pmWorld              - World transform
//
//     D3DVECTOR* pvLightDir           - Direction vector of the light
//
//     UINT uLength                    - Dimensions of the map
//
//     D3DFORMAT fmt                   - Format of the texture
//
//     BOOL bMipmap                    - Indicates whether or not to
//                                       use a mip map
//
//     D3DPOOL pool                    - Memory pool in which to create the map
//
// Return Value:
//
//     A pointer to the created diffuse map on success, NULL on failure.
//
//******************************************************************************
LPDIRECT3DCUBETEXTURE8 CreateHalfVectorMap(LPDIRECT3DDEVICE8 pDevice, 
                                D3DVECTOR* pvLightDir, UINT uLength, 
                                D3DFORMAT fmt, BOOL bMipmap, D3DPOOL pool)
{
    LPDIRECT3DCUBETEXTURE8  pd3dtc;
    TEXTURETYPE             ttype;

    // Currently only support 32 bpp formats
    if (!(fmt == D3DFMT_A8R8G8B8 || fmt == D3DFMT_X8R8G8B8)) {
        return NULL;
    }

    ttype = TTYPE_CUBEMAP;
    if (bMipmap) {
        ttype |= TTYPE_MIPMAP;
    }

    pd3dtc = (LPDIRECT3DCUBETEXTURE8)CreateTexture(pDevice, uLength, uLength, fmt, ttype, pool);
    if (!pd3dtc) {
        return NULL;
    }

    if (!UpdateHalfVectorMap(pd3dtc, pvLightDir)) {
        ReleaseTexture(pd3dtc);
        return NULL;
    }

    return pd3dtc;
}

//******************************************************************************
BOOL UpdateHalfVectorMap(LPDIRECT3DCUBETEXTURE8 pd3dtc, D3DVECTOR* pvLightDir) {

    D3DXVECTOR3     vLDir;
    UINT            uLength;
    UINT            uLevels;
    D3DSURFACE_DESC d3dsd;
    D3DLOCKED_RECT  d3dlr;
    LPDWORD         pdwPixel;
    D3DXVECTOR3     vHalf;
    float           fU, fV;
    UINT            i, j, u, v;
    HRESULT         hr;
#ifdef UNDER_XBOX
    BOOL            bSwizzled;

    pd3dtc->GetLevelDesc(0, &d3dsd);    
    bSwizzled = XGIsSwizzledFormat(d3dsd.Format);
#endif

    // Normalize the light direction vector
    D3DXVec3Normalize(&vLDir, (LPD3DXVECTOR3)pvLightDir);
/*
    // Transform the light direction vector into model space
    // (multiply the vector by the transposed rotational component of the
    // world matrix) and negate it
    vL.x = -(vLDir.x * pmWorld->_11 + vLDir.y * pmWorld->_12 + vLDir.z * pmWorld->_13);
    vL.y = -(vLDir.x * pmWorld->_21 + vLDir.y * pmWorld->_22 + vLDir.z * pmWorld->_23);
    vL.z = -(vLDir.x * pmWorld->_31 + vLDir.y * pmWorld->_32 + vLDir.z * pmWorld->_33);
*/

    // Generate the half-vectors
    uLevels = pd3dtc->GetLevelCount();

    for (i = 0; i < uLevels; i++) {

        for (j = 0; j < 6; j++) {

            hr = pd3dtc->LockRect((D3DCUBEMAP_FACES)j, i, &d3dlr, NULL, 0);
            if (FAILED(hr)) {
                ResultFailed(hr, TEXT("IDirect3DCubeTexture8::LockRect"));
                return FALSE;
            }

            pdwPixel = (LPDWORD)d3dlr.pBits;

            if (uLevels > 1) {
                uLength = 0x1 << ((uLevels - 1) - i);
            }
            else {
                hr = pd3dtc->GetLevelDesc(0, &d3dsd);
                if (ResultFailed(hr, TEXT("IDirect3DCubeTexture8::GetLevelDesc"))) {
                    pd3dtc->UnlockRect((D3DCUBEMAP_FACES)j, i);
                    return FALSE;
                }
                uLength = d3dsd.Width;
            }

#ifdef UNDER_XBOX
            Swizzler swz(uLength, uLength, 1);
            swz.SetU(0);
            swz.SetV(0);
#endif

            for (v = 0; v < uLength; v++) {

                for (u = 0; u < uLength; u++) {

                    if (uLength > 1) {
                        fU = (float)u / (float)(uLength - 1);
                        fV = (float)v / (float)(uLength - 1);
                    }
                    else {
                        fU = 0.5f;
                        fV = 0.5f;
                    }

                    switch ((D3DCUBEMAP_FACES)j) {
                        case D3DCUBEMAP_FACE_POSITIVE_X:
                            D3DXVec3Normalize(&vHalf, &D3DXVECTOR3(1.0f, 1.0f - (fV * 2.0f), 1.0f - (fU * 2.0f)));
                            break;
                        case D3DCUBEMAP_FACE_NEGATIVE_X:
                            D3DXVec3Normalize(&vHalf, &D3DXVECTOR3(-1.0f, 1.0f - (fV * 2.0f), -1.0f + (fU * 2.0f)));
                            break;
                        case D3DCUBEMAP_FACE_POSITIVE_Y:
                            D3DXVec3Normalize(&vHalf, &D3DXVECTOR3(-1.0f + (fU * 2.0f), 1.0f, -1.0f + (fV * 2.0f)));
                            break;
                        case D3DCUBEMAP_FACE_NEGATIVE_Y:
                            D3DXVec3Normalize(&vHalf, &D3DXVECTOR3(-1.0f + (fU * 2.0f), -1.0f, 1.0f - (fV * 2.0f)));
                            break;
                        case D3DCUBEMAP_FACE_POSITIVE_Z:
                            D3DXVec3Normalize(&vHalf, &D3DXVECTOR3(-1.0f + (fU * 2.0f), 1.0f - (fV * 2.0f), 1.0f));
                            break;
                        case D3DCUBEMAP_FACE_NEGATIVE_Z:
                            D3DXVec3Normalize(&vHalf, &D3DXVECTOR3(1.0f - (fU * 2.0f), 1.0f - (fV * 2.0f), -1.0f));
                            break;
                    }
                    D3DXVec3Normalize(&vHalf, &(vHalf + vLDir));
//                    vHalf = -vHalf;
#ifdef UNDER_XBOX
                    if (!bSwizzled) {
#endif
                        pdwPixel[u] = VectorToColor(&vHalf);
#ifdef UNDER_XBOX
                    }
                    else {
                        pdwPixel[swz.Get2D()] = VectorToColor(&vHalf);
                        swz.IncU();
                    }
#endif
                }

#ifdef UNDER_XBOX
                if (!bSwizzled) {
#endif
                    pdwPixel += (d3dlr.Pitch >> 2);
#ifdef UNDER_XBOX
                }
                else {
                    swz.IncV();
                }
#endif
            }

            hr = pd3dtc->UnlockRect((D3DCUBEMAP_FACES)j, i);
            if (FAILED(hr)) {
                ResultFailed(hr, TEXT("IDirect3DCubeTexture8::UnlockRect"));
                return FALSE;
            }
        }
    }

    return TRUE;
}

//******************************************************************************
// Calculate non-normalized tangent and binormal vector terms for use in
// constructing an othonormal basis transform to rotate a vector from model
// space to tangent space.  This function assumes two vector arrays have been
// allocated, each with at least as many elements as three times the given 
// number of primitives.  These arrays will hold the calculated vector terms.
//******************************************************************************
BOOL CalculateTangentTerms(D3DXVECTOR3* pvTangent, D3DXVECTOR3* pvBinormal, 
                                D3DVECTOR* pvPosition, DWORD dwStridePosition,
                                PTCOORD2 ptcTCoord, DWORD dwStrideTCoord,
                                LPWORD pwIndices, DWORD dwNumPrimitives,
                                D3DPRIMITIVETYPE d3dpt, BOOL bInterpolate)
{
    D3DXVECTOR3     vEdge0, vEdge1, vTemp;
    D3DXVECTOR3     vPlane[3];
    D3DXVECTOR3     *pvP[3];
    PTCOORD2        ptc2[3];
    WORD            w0, w1, w2;
    float           fTemp;
    UINT            uNumIndices;
    UINT            i, j, k;

    uNumIndices = 3 * dwNumPrimitives;

    memset(pvTangent, 0, uNumIndices * sizeof(D3DXVECTOR3));
    memset(pvBinormal, 0, uNumIndices * sizeof(D3DXVECTOR3));

    // Calculate the tangent and binormal vectors for each vertex.  If the vertex is
    // indexed by more than one triangle, add the vectors for each triangle together
    // to obtain an average of the vectors for all triangles formed by the vertex.
    for (i = 0; i < uNumIndices; i+=3) {

        w0 = pwIndices[i];
        w1 = pwIndices[i+1];
        w2 = pwIndices[i+2];

        pvP[0] =  (D3DXVECTOR3*)((LPBYTE)pvPosition + w0 * dwStridePosition);
        pvP[1] =  (D3DXVECTOR3*)((LPBYTE)pvPosition + w1 * dwStridePosition);
        pvP[2] =  (D3DXVECTOR3*)((LPBYTE)pvPosition + w2 * dwStridePosition);
        ptc2[0] = (PTCOORD2)((LPBYTE)ptcTCoord + w0 * dwStrideTCoord);
        ptc2[1] = (PTCOORD2)((LPBYTE)ptcTCoord + w1 * dwStrideTCoord);
        ptc2[2] = (PTCOORD2)((LPBYTE)ptcTCoord + w2 * dwStrideTCoord);

        vEdge0 = D3DXVECTOR3(pvP[1]->x - pvP[0]->x, ptc2[1]->u - ptc2[0]->u, ptc2[1]->v - ptc2[0]->v);
        vEdge1 = D3DXVECTOR3(pvP[2]->x - pvP[0]->x, ptc2[2]->u - ptc2[0]->u, ptc2[2]->v - ptc2[0]->v);
        D3DXVec3Cross(&vPlane[0], &vEdge0, &vEdge1);
        vEdge0.x = pvP[1]->y - pvP[0]->y;
        vEdge1.x = pvP[2]->y - pvP[0]->y;
        D3DXVec3Cross(&vPlane[1], &vEdge0, &vEdge1);
        vEdge0.x = pvP[1]->z - pvP[0]->z;
        vEdge1.x = pvP[2]->z - pvP[0]->z;
        D3DXVec3Cross(&vPlane[2], &vEdge0, &vEdge1);

        if (FABS(vPlane[0].x) < 0.000000001f || FABS(vPlane[1].x) < 0.000000001f || FABS(vPlane[2].x) < 0.000000001f) {
            continue;
        }

        vTemp = D3DXVECTOR3(-vPlane[0].y / vPlane[0].x, -vPlane[1].y / vPlane[1].x, -vPlane[2].y / vPlane[1].x);
        pvTangent[w0] += vTemp;
        pvTangent[w1] += vTemp;
        pvTangent[w2] += vTemp;

        vTemp = D3DXVECTOR3(-vPlane[0].z / vPlane[0].x, -vPlane[1].z / vPlane[1].x, -vPlane[2].z / vPlane[1].x);
        pvBinormal[w0] += vTemp;
        pvBinormal[w1] += vTemp;
        pvBinormal[w2] += vTemp;
    }

    if (bInterpolate) {

        D3DXVECTOR3     *pv0, *pv1;
        LPWORD          pwMerge, pwProcessed;
        UINT            uNumMerges, uNumProcessed = 0;

        pwMerge = (LPWORD)MemAlloc32(uNumIndices * sizeof(WORD));
        if (!pwMerge) {
            return FALSE;
        }

        pwProcessed = (LPWORD)MemAlloc32(uNumIndices * sizeof(WORD));
        if (!pwProcessed) {
            MemFree32(pwMerge);
            return FALSE;
        }

        for (i = 0; i < uNumIndices; i++) {

            // Verify pwIndices[i] has to already been processed...if it has continue
            for (j = 0; j < uNumProcessed; j++) {
                if (pwIndices[i] == pwProcessed[j]) {
                    break;
                }
            }
            if (j < uNumProcessed) {
                continue;
            }

            pv0 = (D3DXVECTOR3*)((LPBYTE)pvPosition + pwIndices[i] * dwStridePosition);
            pwMerge[0] = pwIndices[i];
            pwProcessed[uNumProcessed++] = pwIndices[i];
            uNumMerges = 1;

            // Traverse the vertex list, identifying all vertices whose positions are
            // equal to the current vertex position
            for (j = i + 1; j < uNumIndices; j++) {

                pv1 = (D3DXVECTOR3*)((LPBYTE)pvPosition + pwIndices[j] * dwStridePosition);
                fTemp = D3DXVec3LengthSq(&(*pv0 - *pv1));
                if (fTemp < 0.0000001f) {

                    // See whether the matching vertex has already been added to the merge list
                    for (k = 0; k < uNumMerges; k++) {
                        if (pwIndices[j] == pwMerge[k]) {
                            break;
                        }
                    }
                    if (k == uNumMerges) {
                        pwMerge[uNumMerges++] = pwIndices[j];
                        pwProcessed[uNumProcessed++] = pwIndices[j];
                    }
                }
            }

            if (uNumMerges > 1 && uNumMerges < 5) {
                w0 = pwMerge[0];
                D3DXVec3Normalize(&pvTangent[w0], &pvTangent[w0]);
                D3DXVec3Normalize(&pvBinormal[w0], &pvBinormal[w0]);
                for (j = 1; j < uNumMerges; j++) {
                    w1 = pwMerge[j];
                    D3DXVec3Normalize(&pvTangent[w1], &pvTangent[w1]);
                    D3DXVec3Normalize(&pvBinormal[w1], &pvBinormal[w1]);
                    pvTangent[w0] += pvTangent[w1];
                    pvBinormal[w0] += pvBinormal[w1];
                }
                for (j = 1; j < uNumMerges; j++) {
                    pvTangent[pwMerge[j]] = pvTangent[w0];
                    pvBinormal[pwMerge[j]] = pvBinormal[w0];
                }
            }
        }

        MemFree32(pwProcessed);
        MemFree32(pwMerge);
    }

    return TRUE;
}

//******************************************************************************
BOOL WorldVectorToTangentSpace(PTCOORD3 ptcTangent, DWORD dwStrideTangent,
                                D3DVECTOR* pvPosition, DWORD dwStridePosition,
                                PTCOORD2 ptcTCoord, DWORD dwStrideTCoord,
                                LPWORD pwIndices, DWORD dwNumPrimitives,
                                D3DPRIMITIVETYPE d3dpt, D3DMATRIX* pmWorld, 
                                D3DVECTOR* pvVector, BOOL bInterpolate)
{
    return VectorToTangentSpace(FALSE, ptcTangent, dwStrideTangent, pvPosition,
                                dwStridePosition, ptcTCoord, dwStrideTCoord, 
                                pwIndices, dwNumPrimitives, d3dpt, pmWorld, 
                                pvVector, &D3DXVECTOR3(0.0f, 0.0f, 0.0f),
                                bInterpolate);
}

//******************************************************************************
BOOL HalfVectorToTangentSpace(PTCOORD3 ptcTangent, DWORD dwStrideTangent,
                                D3DVECTOR* pvPosition, DWORD dwStridePosition,
                                PTCOORD2 ptcTCoord, DWORD dwStrideTCoord,
                                LPWORD pwIndices, DWORD dwNumPrimitives,
                                D3DPRIMITIVETYPE d3dpt, D3DMATRIX* pmWorld, 
                                D3DVECTOR* pvLightDir, D3DVECTOR* pvViewPos,
                                BOOL bInterpolate)
{
    return VectorToTangentSpace(FALSE, ptcTangent, dwStrideTangent, pvPosition,
                                dwStridePosition, ptcTCoord, dwStrideTCoord, 
                                pwIndices, dwNumPrimitives, d3dpt, pmWorld, 
                                pvLightDir, pvViewPos, bInterpolate);
}

//******************************************************************************
BOOL VectorToTangentSpace(BOOL bHalfVector, 
                                PTCOORD3 ptcTangent, DWORD dwStrideTangent,
                                D3DVECTOR* pvPosition, DWORD dwStridePosition,
                                PTCOORD2 ptcTCoord, DWORD dwStrideTCoord,
                                LPWORD pwIndices, DWORD dwNumPrimitives,
                                D3DPRIMITIVETYPE d3dpt, D3DMATRIX* pmWorld, 
                                D3DVECTOR* pvLightDir, D3DVECTOR* pvViewPos,
                                BOOL bInterpolate)
{
    D3DXVECTOR3     vNormal, vLDir, vVPos, vEye, vTemp;
    D3DXVECTOR3     *pvTangent, *pvBinormal;
    D3DXVECTOR3     vPlane[3];
    PTCOORD3        ptc3;
    WORD            w0;
    D3DXMATRIX      mTransform;
    TCOORD3         tcZero;
    UINT            uNumIndices;
    UINT            i;
    BOOL            bWorldSpace;

#ifndef DEBUG
    // For now only indexed triangle lists are supported
    if (d3dpt != D3DPT_TRIANGLELIST || !pwIndices) {
        return FALSE;
    }
#endif // DEBUG

    tcZero.u = tcZero.v = tcZero.t = 0.0f;

    uNumIndices = 3 * dwNumPrimitives;

    D3DXMatrixIdentity(&mTransform);
    bWorldSpace = (BOOL)memcmp(&mTransform, pmWorld, sizeof(D3DMATRIX));

    // Allocate buffers to accumulate the averages of the tangent and
    // binormal terms for the basis transforms
    pvTangent = (D3DXVECTOR3*)MemAlloc32(2 * uNumIndices * sizeof(D3DXVECTOR3));
    if (!pvTangent) {
        return FALSE;
    }
    pvBinormal = pvTangent + uNumIndices;

    // Normalize the light direction
    D3DXVec3Normalize(&vTemp, (D3DXVECTOR3*)pvLightDir);

    // Transform the light vector from world space to model space (multiply the vector 
    // by the transposed rotational component of the world matrix) and negate it (for 
    // dotproduct calculations with the surface normals) 
    if (bWorldSpace) {
        vTemp = -vTemp;
        vLDir.x = vTemp.x * pmWorld->_11 + vTemp.y * pmWorld->_12 + vTemp.z * pmWorld->_13;
        vLDir.y = vTemp.x * pmWorld->_21 + vTemp.y * pmWorld->_22 + vTemp.z * pmWorld->_23;
        vLDir.z = vTemp.x * pmWorld->_31 + vTemp.y * pmWorld->_32 + vTemp.z * pmWorld->_33;
    }
    else {
        vLDir = -vTemp;
    }

    // First set all texture coordinates corresponding to the vectors in tangent 
    // space to zero
    for (i = 0; i < uNumIndices; i++) {
        memcpy((LPBYTE)ptcTangent + pwIndices[i] * dwStrideTangent, &tcZero, sizeof(TCOORD3));
    }

    if (!CalculateTangentTerms(pvTangent, pvBinormal, pvPosition, dwStridePosition, 
                                ptcTCoord, dwStrideTCoord, pwIndices, 
                                dwNumPrimitives, d3dpt, bInterpolate))
    {
        MemFree32(pvTangent);
        return FALSE;
    }

    for (i = 0; i < uNumIndices; i++) {

        w0 = pwIndices[i];
        ptc3 = (PTCOORD3)((LPBYTE)ptcTangent + w0 * dwStrideTangent);
        if (!memcmp(ptc3, &tcZero, sizeof(TCOORD3))) {

//            pvN = (D3DXVECTOR3*)((LPBYTE)pvNormal + w0 * dwStrideNormal);

            D3DXVec3Normalize(&pvTangent[w0], &pvTangent[w0]);
            D3DXVec3Normalize(&pvBinormal[w0], &pvBinormal[w0]);

            D3DXVec3Cross(&vNormal, &pvTangent[w0], &pvBinormal[w0]);

//            fDot = D3DXVec3Dot(&vNormal, pvN);
//            if (fDot < 0.0f) {
//                vNormal = -vNormal;
//            }

            if (bHalfVector) {

                vTemp = *(D3DXVECTOR3*)pvViewPos - *((D3DXVECTOR3*)((LPBYTE)pvPosition + w0 * dwStridePosition));
                if (bWorldSpace) {
                    vEye.x = vTemp.x * pmWorld->_11 + vTemp.y * pmWorld->_12 + vTemp.z * pmWorld->_13;
                    vEye.y = vTemp.x * pmWorld->_21 + vTemp.y * pmWorld->_22 + vTemp.z * pmWorld->_23;
                    vEye.z = vTemp.x * pmWorld->_31 + vTemp.y * pmWorld->_32 + vTemp.z * pmWorld->_33;
                    D3DXVec3Normalize(&vEye, &vEye);
                }
                else {
                    D3DXVec3Normalize(&vEye, &vTemp);
                }
                vTemp = vEye + vLDir;
D3DXVec3Normalize(&vTemp, &vTemp);
                ptc3->u = vTemp.x * pvTangent[w0].x + vTemp.y * pvTangent[w0].y + vTemp.z * pvTangent[w0].z;
                ptc3->v = vTemp.x * pvBinormal[w0].x + vTemp.y * pvBinormal[w0].y + vTemp.z * pvBinormal[w0].z;
                ptc3->t = vTemp.x * vNormal.x + vTemp.y * vNormal.y + vTemp.z * vNormal.z;
            }
            else {
                ptc3->u = vLDir.x * pvTangent[w0].x + vLDir.y * pvTangent[w0].y + vLDir.z * pvTangent[w0].z;
                ptc3->v = vLDir.x * pvBinormal[w0].x + vLDir.y * pvBinormal[w0].y + vLDir.z * pvBinormal[w0].z;
                ptc3->t = vLDir.x * vNormal.x + vLDir.y * vNormal.y + vLDir.z * vNormal.z;
            }
        }
    }

    MemFree32(pvTangent);

    return TRUE;
}

//******************************************************************************
BOOL SetTangentTransforms(PMATRIX3X3 pmTangent, DWORD dwStrideTangent,
                                D3DVECTOR* pvPosition, DWORD dwStridePosition,
                                PTCOORD2 ptcTCoord, DWORD dwStrideTCoord,
                                LPWORD pwIndices, DWORD dwNumPrimitives,
                                D3DPRIMITIVETYPE d3dpt, D3DMATRIX* pmWorld,
                                BOOL bInterpolate)
{
    D3DXVECTOR3     vNormal, vTemp;
    D3DXVECTOR3     *pvTangent, *pvBinormal;
    DWORD           dwNumIndices;
    WORD            w0;
    PMATRIX3X3      pmT;
//    float           fDot;
    MATRIX3X3       mZero;
	UINT            i;

    dwNumIndices = dwNumPrimitives * 3;

    memset(&mZero, 0, sizeof(MATRIX3X3));

    for (i = 0; i < dwNumIndices; i++) {
        memcpy((LPBYTE)pmTangent + pwIndices[i] * dwStrideTangent, &mZero, sizeof(MATRIX3X3));
    }

    pvTangent = (D3DXVECTOR3*)MemAlloc32(2 * dwNumIndices * sizeof(D3DXVECTOR3));
    if (!pvTangent) {
        return FALSE;
    }
    pvBinormal = pvTangent + dwNumIndices;

    if (!CalculateTangentTerms(pvTangent, pvBinormal, pvPosition, dwStridePosition, ptcTCoord, dwStrideTCoord, pwIndices, dwNumPrimitives, d3dpt, bInterpolate)) {
        MemFree32(pvTangent);
        return FALSE;
    }

    for (i = 0; i < dwNumIndices; i++) {

        w0 = pwIndices[i];
        pmT = (PMATRIX3X3)((LPBYTE)pmTangent + w0 * dwStrideTangent);
        if (!memcmp(pmT, &mZero, sizeof(MATRIX3X3))) {

//            pvN = (D3DXVECTOR3*)((LPBYTE)pvNormal + w0 * dwStrideNormal);

            D3DXVec3Normalize(&pvTangent[w0], &pvTangent[w0]);
            D3DXVec3Normalize(&pvBinormal[w0], &pvBinormal[w0]);

            D3DXVec3Cross(&vNormal, &pvTangent[w0], &pvBinormal[w0]);

//            fDot = D3DXVec3Dot(&vNormal, pvN);
//            if (fDot < 0.0f) {
//                // Either negate vNormal or pvBinormal...
//                vNormal = -vNormal;
//            }

            pmT->_11 = -pvTangent[w0].x;
            pmT->_21 = -pvTangent[w0].y;
            pmT->_31 = -pvTangent[w0].z;

            pmT->_12 = -pvBinormal[w0].x;
            pmT->_22 = -pvBinormal[w0].y;
            pmT->_32 = -pvBinormal[w0].z;

            // Negate the normal vector so the light or half-vector
            // transformed by the basis does not itself have to
            // be negated
//            pmT->_13 = -vNormal.x;
//            pmT->_23 = -vNormal.y;
//            pmT->_33 = -vNormal.z;
pmT->_13 = vNormal.x;
pmT->_23 = vNormal.y;
pmT->_33 = vNormal.z;
        }
    }

    MemFree32(pvTangent);

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     CreateDiffuseMap
//
// Description:
//
//     Create a diffuse light map for use in diffuse bump map operations.
//
// Arguments:
//
//     LPDIRECT3DDEVICE8 pDevice       - Pointer to the device object
//
//     UINT uWidth                     - Width of the map
//
//     UINT uHeight                    - Height of the map
//
//     D3DCOLOR c                      - Color for the diffuse light
//
//     D3DFORMAT fmt                   - Format of the texture
//
//     BOOL bMipmap                    - Indicates whether or not to
//                                       use a mip map
//
//     PALETTECOLOR* ppcPalette        - Pointer to the first entry of
//                                       the palette for a palettized
//                                       texture
//
//     D3DPOOL pool                    - Memory pool in which to create the map
//
// Return Value:
//
//     A pointer to the created diffuse map on success, NULL on failure.
//
//******************************************************************************
LPDIRECT3DTEXTURE8 CreateDiffuseMap(LPDIRECT3DDEVICE8 pDevice, UINT uWidth, 
                                    UINT uHeight, D3DCOLOR c, D3DFORMAT fmt, 
                                    BOOL bMipmap, PALETTECOLOR* ppcPalette, 
                                    D3DPOOL pool)
{
    LPDIRECT3DTEXTURE8  pd3dt;
    D3DSURFACE_DESC     d3dsd;
    D3DLOCKED_RECT      d3dlr;
    D3DFORMAT           fmtt;
    DWORD               dwDepth;
    ARGBPIXELDESC       pixd;
    D3DXVECTOR3         vNormal, vLight;
    float               fIntensity, fx, fy, fSin, fMag, fMP, fRed, fGreen, fBlue, fU, fV;
    UINT                uLevels;
    UINT                i, j, k;
    HRESULT             hr;
#ifdef UNDER_XBOX
    BOOL                bSwizzled = XGIsSwizzledFormat(fmt);
#endif

    pd3dt = (LPDIRECT3DTEXTURE8)CreateTexture(pDevice, uWidth, uHeight, fmt, bMipmap ? TTYPE_MIPMAP : TTYPE_TEXTURE, pool);
    if (!pd3dt) {
        return NULL;
    }

    hr = ((LPDIRECT3DTEXTURE8)pd3dt)->GetLevelDesc(0, &d3dsd);
    if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetLevelDesc"))) {
        ReleaseTexture(pd3dt);
        return NULL;
    }
    fmtt = d3dsd.Format;

    dwDepth = FormatToBitDepth(fmtt);
    if (!(dwDepth == 16 || dwDepth == 32)) {

        LPDIRECT3DTEXTURE8  pd3dtMap;
        D3DFORMAT           fmtMap[] = {
                                D3DFMT_X8R8G8B8,
                                D3DFMT_A8R8G8B8,
                                D3DFMT_R5G6B5,
                                D3DFMT_A1R5G5B5,
                                D3DFMT_X1R5G5B5,
                                D3DFMT_A4R4G4B4
                            };

        for (i = 0; i < 6; i++) {
#ifndef UNDER_XBOX
            pd3dtMap = (LPDIRECT3DTEXTURE8)CreateDiffuseMap(pDevice, uWidth, uHeight, 
                        c, fmtMap[i], bMipmap, NULL, D3DPOOL_SYSTEMMEM);
#else
            pd3dtMap = (LPDIRECT3DTEXTURE8)CreateDiffuseMap(pDevice, uWidth, uHeight, 
                        c, fmtMap[i], bMipmap, NULL, POOL_DEFAULT);
#endif // UNDER_XBOX
            if (pd3dtMap) {
                hr = CopyTexture(pd3dt, ppcPalette, pd3dtMap, NULL, 
                                    D3DX_FILTER_LINEAR);
                ReleaseTexture(pd3dtMap);
                if (!ResultFailed(hr, TEXT("D3DXLoadSurfaceFromSurface"))) {
                    return pd3dt;
                }
            }
        }

        ReleaseTexture(pd3dt);
        return NULL;
    }

    vLight = D3DXVECTOR3(0.0f, 1.0f, 0.0f);
    fRed = (float)RGBA_GETRED(c);
    fGreen = (float)RGBA_GETGREEN(c);
    fBlue = (float)RGBA_GETBLUE(c);

    uLevels = pd3dt->GetLevelCount();

    for (i = 0; i < uLevels; i++) {

        hr = pd3dt->GetLevelDesc(i, &d3dsd);
        if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetLevelDesc"))) {
            ReleaseTexture(pd3dt);
            return NULL;
        }

        // Get the pixel format of the texture
        GetARGBPixelDesc(d3dsd.Format, &pixd);

        hr = pd3dt->LockRect(i, &d3dlr, NULL, 0);
        if (FAILED(hr)) {
            ResultFailed(hr, TEXT("IDirect3DTexture8::LockRect"));
            ReleaseTexture(pd3dt);
            return NULL;
        }

#ifdef UNDER_XBOX
        Swizzler swz(d3dsd.Width, d3dsd.Height, 1);
        swz.SetU(0);
        swz.SetV(0);
#endif

        switch (d3dsd.Format) {

#ifdef UNDER_XBOX
            case D3DFMT_LIN_X8R8G8B8:
            case D3DFMT_LIN_A8R8G8B8:
#endif
            case D3DFMT_X8R8G8B8:
            case D3DFMT_A8R8G8B8: {

                LPDWORD pdwPixel = (LPDWORD)d3dlr.pBits;

                for (j = 0, fV = 0.0f; j < d3dsd.Height; j++, fV += (1.0f / (float)(d3dsd.Height-1))) {

                    for (k = 0, fU = 0.0f; k < d3dsd.Width; k++, fU += (1.0f / (float)(d3dsd.Width-1))) {

                        fx = (fU - 0.5f) * 2.0f;
                        fy = (fV - 0.5f) * 2.0f;
                        fMag = (float)sqrt(fx * fx + fy * fy);
                        if (fMag > 1.0f) {
                            vNormal = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
                        }
                        else {
                            fMP = fMag * M_PI;
                            fSin = (float)sin(fMP);
                            vNormal.y = (float)cos(fMP);
                            fx /= fMag; // Normalize
                            fy /= fMag;
                            vNormal.x = fx * fSin;
                            vNormal.z = fy * fSin;
                        }

                        fIntensity = D3DXVec3Dot(&vLight, &vNormal);
                        if (fIntensity < 0.0f) {
                            fIntensity = 0.0f;
                        }

#ifdef UNDER_XBOX
                        if (!bSwizzled) {
#endif
                            pdwPixel[k] = 0xFF                        << pixd.dwAShift |
                                          (BYTE)(fIntensity * fRed)   << pixd.dwRShift |
                                          (BYTE)(fIntensity * fGreen) << pixd.dwGShift |
                                          (BYTE)(fIntensity * fBlue)  << pixd.dwBShift;
#ifdef UNDER_XBOX
                        }
                        else {
                            pdwPixel[swz.Get2D()] = 0xFF              << pixd.dwAShift |
                                          (BYTE)(fIntensity * fRed)   << pixd.dwRShift |
                                          (BYTE)(fIntensity * fGreen) << pixd.dwGShift |
                                          (BYTE)(fIntensity * fBlue)  << pixd.dwBShift;
                            swz.IncU();
                        }
#endif
                    }

#ifdef UNDER_XBOX
                    if (!bSwizzled) {
#endif
                        pdwPixel += (d3dlr.Pitch / pixd.uStride);
#ifdef UNDER_XBOX
                    }
                    else {
                        swz.IncV();
                    }
#endif
                }

                break;
            }

#ifdef UNDER_XBOX
            case D3DFMT_LIN_R5G6B5:
            case D3DFMT_LIN_X1R5G5B5:
            case D3DFMT_LIN_A1R5G5B5:
            case D3DFMT_LIN_A4R4G4B4:
#endif
            case D3DFMT_R5G6B5:
            case D3DFMT_X1R5G5B5:
            case D3DFMT_A1R5G5B5:
            case D3DFMT_A4R4G4B4: {

                LPWORD pwPixel = (LPWORD)d3dlr.pBits;

                fRed = fRed / 255.0f * (float)(pixd.dwRMask >> pixd.dwRShift);
                fGreen = fGreen / 255.0f * (float)(pixd.dwGMask >> pixd.dwGShift);
                fBlue = fBlue / 255.0f * (float)(pixd.dwBMask >> pixd.dwBShift);

                for (j = 0, fV = 0.0f; j < d3dsd.Height; j++, fV += (1.0f / (float)(d3dsd.Height-1))) {

                    for (k = 0, fU = 0.0f; k < d3dsd.Width; k++, fU += (1.0f / (float)(d3dsd.Width-1))) {

                        fx = (fU - 0.5f) * 2.0f;
                        fy = (fV - 0.5f) * 2.0f;
                        fMag = (float)sqrt(fx * fx + fy * fy);
                        if (fMag > 1.0f) {
                            vNormal = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
                        }
                        else {
                            fMP = fMag * M_PI;
                            fSin = (float)sin(fMP);
                            vNormal.y = (float)cos(fMP);
                            fx /= fMag; // Normalize
                            fy /= fMag;
                            vNormal.x = fx * fSin;
                            vNormal.z = fy * fSin;
                        }

                        fIntensity = D3DXVec3Dot(&vLight, &vNormal);
                        if (fIntensity < 0.0f) {
                            fIntensity = 0.0f;
                        }

#ifdef UNDER_XBOX
                        if (!bSwizzled) {
#endif
                            pwPixel[k] = (WORD)(pixd.dwAMask |
                                          ((UINT)(fIntensity * fRed)   << pixd.dwRShift) & pixd.dwRMask |
                                          ((UINT)(fIntensity * fGreen) << pixd.dwGShift) & pixd.dwGMask |
                                          ((UINT)(fIntensity * fBlue)  << pixd.dwBShift) & pixd.dwBMask);
#ifdef UNDER_XBOX
                        }
                        else {
                            pwPixel[swz.Get2D()] = (WORD)(pixd.dwAMask |
                                          ((UINT)(fIntensity * fRed)   << pixd.dwRShift) & pixd.dwRMask |
                                          ((UINT)(fIntensity * fGreen) << pixd.dwGShift) & pixd.dwGMask |
                                          ((UINT)(fIntensity * fBlue)  << pixd.dwBShift) & pixd.dwBMask);
                            swz.IncU();
                        }
#endif
                    }

#ifdef UNDER_XBOX
                    if (!bSwizzled) {
#endif
                        pwPixel += (d3dlr.Pitch / pixd.uStride);
#ifdef UNDER_XBOX
                    }
                    else {
                        swz.IncV();
                    }
#endif
                }

                break;
            }
        }

        hr = pd3dt->UnlockRect(i);
        if (FAILED(hr)) {
            ResultFailed(hr, TEXT("IDirect3DTexture8::UnlockRect"));
            ReleaseTexture(pd3dt);
            return NULL;
        }
    }

    return pd3dt;
}

//******************************************************************************
//
// Function:
//
//     SetDiffuseMapCoords
//
// Description:
//
//     Calculate the texture coordinates to index into a diffuse light map
//     based on the given world transform, light direction, normal values of the
//     vertices, and rotation angle.
//
// Arguments:
//
//     D3DVECTOR* pvNormal             - Pointer to the first normal value in
//                                       the vertex list
//
//     UINT uNStride                   - Stride between normals in the vertex
//                                       list
//
//     PTCOORD2 ptcTCoord              - Pointer to the first light map texture 
//                                       coordinate set in the vertex list
//
//     UINT uTStride                   - Stride between coordinate sets in the
//                                       vertex list
//
//     UINT uVertices                  - Number of vertices in the vertex list
//
//     D3DMATRIX* pmWorld              - World transform
//
//     D3DVECTOR* pvLightDir           - Direction vector of the light
//
//     float fTheta                    - Rotation angle of the light relative
//                                       to the viewer
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************

//******************************************************************************
BOOL SetDiffuseMapCoords(PTCOORD2 ptcLightMap, DWORD dwStrideLMap,
                                D3DVECTOR* pvPosition, DWORD dwStridePosition,
                                PTCOORD2 ptcOffsetMap, DWORD dwStrideOMap,
                                LPWORD pwIndices, DWORD dwNumPrimitives,
                                D3DPRIMITIVETYPE d3dpt, D3DMATRIX* pmWorld, 
                                D3DVECTOR* pvLightDir, BOOL bInterpolate)
{
    return SetLightMapCoords(FALSE, ptcLightMap, dwStrideLMap, pvPosition,
                                dwStridePosition, ptcOffsetMap, dwStrideOMap,
                                pwIndices, dwNumPrimitives, d3dpt, pmWorld,
                                pvLightDir, &D3DXVECTOR3(0.0f, 0.0f, 0.0f),
                                bInterpolate);
}

//******************************************************************************
BOOL SetSpecularMapCoords(PTCOORD2 ptcLightMap, DWORD dwStrideLMap,
                                D3DVECTOR* pvPosition, DWORD dwStridePosition,
                                PTCOORD2 ptcOffsetMap, DWORD dwStrideOMap,
                                LPWORD pwIndices, DWORD dwNumPrimitives,
                                D3DPRIMITIVETYPE d3dpt, D3DMATRIX* pmWorld, 
                                D3DVECTOR* pvLightDir, D3DVECTOR* pvViewPos,
                                BOOL bInterpolate)
{
    return SetLightMapCoords(TRUE, ptcLightMap, dwStrideLMap, pvPosition,
                                dwStridePosition, ptcOffsetMap, dwStrideOMap,
                                pwIndices, dwNumPrimitives, d3dpt, pmWorld,
                                pvLightDir, pvViewPos, bInterpolate);
}

//******************************************************************************
BOOL SetLightMapCoords(BOOL bSpecular, PTCOORD2 ptcLightMap, DWORD dwStrideLMap,
                                D3DVECTOR* pvPosition, DWORD dwStridePosition,
                                PTCOORD2 ptcOffsetMap, DWORD dwStrideOMap,
                                LPWORD pwIndices, DWORD dwNumPrimitives,
                                D3DPRIMITIVETYPE d3dpt, D3DMATRIX* pmWorld, 
                                D3DVECTOR* pvLightDir, D3DVECTOR* pvViewPos,
                                BOOL bInterpolate)
{
    D3DXVECTOR3     vLDir, vVPos, vEye, vTemp;
    D3DXVECTOR3     *pvTangent, *pvBinormal;
    D3DXVECTOR3     vNormal, vLTangent;
    D3DXVECTOR3     vPlane[3];
    PTCOORD2        ptcLight;
    WORD            w0;
    D3DXMATRIX      mTransform;
    TCOORD2         tcSet;
    float           fNU, fNV, fMagUV, fMagXY;
    UINT            uNumIndices;
    UINT            i;
    BOOL            bWorldSpace;

#ifndef DEBUG
    // For now only indexed triangle lists are supported
    if (d3dpt != D3DPT_TRIANGLELIST || !pwIndices) {
        return FALSE;
    }
#endif // DEBUG

    tcSet.u = tcSet.v = -1.0f;

    uNumIndices = 3 * dwNumPrimitives;

    D3DXMatrixIdentity(&mTransform);
    bWorldSpace = (BOOL)memcmp(&mTransform, pmWorld, sizeof(D3DMATRIX));

    // Transform the light vector from world space to model space (multiply the vector 
    // by the transposed rotational component of the world matrix)
    if (bWorldSpace) {
        D3DXVec3Normalize(&vTemp, (D3DXVECTOR3*)pvLightDir);
        vLDir.x = vTemp.x * pmWorld->_11 + vTemp.y * pmWorld->_12 + vTemp.z * pmWorld->_13;
        vLDir.y = vTemp.x * pmWorld->_21 + vTemp.y * pmWorld->_22 + vTemp.z * pmWorld->_23;
        vLDir.z = vTemp.x * pmWorld->_31 + vTemp.y * pmWorld->_32 + vTemp.z * pmWorld->_33;
    }
    else {
        D3DXVec3Normalize(&vLDir, (D3DXVECTOR3*)pvLightDir);
    }

    // First set all texture coordinates corresponding to the vectors in tangent 
    // space to a degenerate direction
    for (i = 0; i < uNumIndices; i++) {
        memcpy((LPBYTE)ptcLightMap + pwIndices[i] * dwStrideLMap, &tcSet, sizeof(TCOORD2));
    }

    pvTangent = (D3DXVECTOR3*)MemAlloc32(2 * uNumIndices * sizeof(D3DXVECTOR3));
    if (!pvTangent) {
        return FALSE;
    }
    pvBinormal = pvTangent + uNumIndices;

    if (!CalculateTangentTerms(pvTangent, pvBinormal, pvPosition, dwStridePosition, ptcOffsetMap, dwStrideOMap, pwIndices, dwNumPrimitives, d3dpt, bInterpolate)) {
        MemFree32(pvTangent);
        return FALSE;
    }

    for (i = 0; i < uNumIndices; i++) {

        w0 = pwIndices[i];
        ptcLight = (PTCOORD2)((LPBYTE)ptcLightMap + w0 * dwStrideLMap);
        if (!memcmp(ptcLight, &tcSet, sizeof(TCOORD2))) {

//            pvN = (D3DXVECTOR3*)((LPBYTE)pvNormal + w0 * dwStrideNormal);

            D3DXVec3Normalize(&pvTangent[w0], &pvTangent[w0]);
            D3DXVec3Normalize(&pvBinormal[w0], &pvBinormal[w0]);

            D3DXVec3Cross(&vNormal, &pvTangent[w0], &pvBinormal[w0]);

//            fDot = D3DXVec3Dot(&vNormal, pvN);
//            if (fDot < 0.0f) {
//                vNormal = -vNormal;
//            }

            if (bSpecular) {

                vTemp = *(D3DXVECTOR3*)pvViewPos - *((D3DXVECTOR3*)((LPBYTE)pvPosition + w0 * dwStridePosition));
                if (bWorldSpace) {
                    vEye.x = vTemp.x * pmWorld->_11 + vTemp.y * pmWorld->_12 + vTemp.z * pmWorld->_13;
                    vEye.y = vTemp.x * pmWorld->_21 + vTemp.y * pmWorld->_22 + vTemp.z * pmWorld->_23;
                    vEye.z = vTemp.x * pmWorld->_31 + vTemp.y * pmWorld->_32 + vTemp.z * pmWorld->_33;
                    D3DXVec3Normalize(&vEye, &vEye);
                }
                else {
                    D3DXVec3Normalize(&vEye, &vTemp);
                }
                vTemp = vEye + vLDir;
//D3DXVec3Normalize(&vTemp, &vTemp);
                vLTangent.x = -(vTemp.x * pvTangent[w0].x + vTemp.y * pvTangent[w0].y + vTemp.z * pvTangent[w0].z);
                vLTangent.y = -(vTemp.x * pvBinormal[w0].x + vTemp.y * pvBinormal[w0].y + vTemp.z * pvBinormal[w0].z);
                vLTangent.z = -(vTemp.x * vNormal.x + vTemp.y * vNormal.y + vTemp.z * vNormal.z);

                // Find the tangent vector offsets in the light map
                fMagUV = (float)acos(vLTangent.z) / M_PI;

                if (fMagUV < 0.0001f) {
                    fNU = 0.5f;
                    fNV = 0.5f;
                }
                else if (fMagUV > 0.9999) {
                    fNU = 0.0f;
                    fNV = 0.5f;
                }
                else {
                    fMagXY = (float)sqrt(vLTangent.x * vLTangent.x + vLTangent.y * vLTangent.y);
                    fNU = vLTangent.x / fMagXY;
                    fNV = vLTangent.y / fMagXY;
   
                    fNU *= fMagUV;
                    fNV *= fMagUV;

                    fNU = 0.5f + (fNU / 2.0f);
                    fNV = 0.5f - (fNV / 2.0f);
                }

                ptcLight->u = fNU;
                ptcLight->v = fNV;
            }
            else {
                vLTangent.x = -(vLDir.x * pvTangent[w0].x + vLDir.y * pvTangent[w0].y + vLDir.z * pvTangent[w0].z);
                vLTangent.y = -(vLDir.x * pvBinormal[w0].x + vLDir.y * pvBinormal[w0].y + vLDir.z * pvBinormal[w0].z);
                vLTangent.z = -(vLDir.x * vNormal.x + vLDir.y * vNormal.y + vLDir.z * vNormal.z);

                // Find the tangent vector offsets in the light map
                fMagUV = (float)acos(vLTangent.z) / M_PI;

                if (fMagUV < 0.0001f) {
                    fNU = 0.5f;
                    fNV = 0.5f;
                }
                else if (fMagUV > 0.9999) {
                    fNU = 0.0f;
                    fNV = 0.5f;
                }
                else {
                    fMagXY = (float)sqrt(vLTangent.x * vLTangent.x + vLTangent.y * vLTangent.y);
                    fNU = vLTangent.x / fMagXY;
                    fNV = vLTangent.y / fMagXY;
           
                    fNU *= fMagUV;
                    fNV *= fMagUV;

                    fNU = 0.5f + (fNU / 2.0f);
                    fNV = 0.5f - (fNV / 2.0f);
                }

                ptcLight->u = fNU;
                ptcLight->v = fNV;
            }
        }
    }

    MemFree32(pvTangent);

    return TRUE;
}

//******************************************************************************
void ConvertPALETTEENTRYToD3DCOLOR(LPVOID pvPalette, UINT uNumEntries) {

    PALETTEENTRY* ppe = (PALETTEENTRY*)pvPalette;
    D3DCOLOR c;
    UINT i;

    if (!ppe) {
        return;
    }

    for (i = 0; i < uNumEntries; i++) {
        c = D3DCOLOR_ARGB(ppe[i].peFlags, ppe[i].peRed, ppe[i].peGreen, ppe[i].peBlue);
        ppe[i] = *(PALETTEENTRY*)&c;
    }
}

//******************************************************************************
void ConvertD3DCOLORToPALETTEENTRY(LPVOID pvPalette, UINT uNumEntries) {

    D3DCOLOR* pc = (D3DCOLOR*)pvPalette;
    PALETTEENTRY e;
    UINT i;

    if (!pc) {
        return;
    }

    for (i = 0; i < uNumEntries; i++) {
        e.peRed = (BYTE)RGBA_GETRED(pc[i]);
        e.peGreen = (BYTE)RGBA_GETGREEN(pc[i]);
        e.peBlue = (BYTE)RGBA_GETBLUE(pc[i]);
        e.peFlags = (BYTE)RGBA_GETALPHA(pc[i]);
        pc[i] = *(D3DCOLOR*)&e;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dbase\vibuffer.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    vibuffer.h

Author:

    Matt Bronder

Description:

    Direct3D vertex and index buffer routines.

*******************************************************************************/

#ifndef __VIBUFFER_H__
#define __VIBUFFER_H__

//******************************************************************************
// Function prototypes
//******************************************************************************

LPDIRECT3DVERTEXBUFFER8 CreateVertexBuffer(LPDIRECT3DDEVICE8 pDevice, 
                                            LPVOID pvVertices, UINT uSize, 
                                            DWORD dwUsage = 0, DWORD dwFVF = 0, 
                                            D3DPOOL pool = POOL_DEFAULT);
void                    ReleaseVertexBuffer(LPDIRECT3DVERTEXBUFFER8 pd3dr);
void                    ReleaseVertexBuffers();
void                    RemoveVertexBuffer(LPDIRECT3DVERTEXBUFFER8 pd3dr);

LPDIRECT3DINDEXBUFFER8  CreateIndexBuffer(LPDIRECT3DDEVICE8 pDevice, 
                                            LPVOID pvIndices, 
                                            UINT uSize, DWORD dwUsage = 0, 
                                            D3DFORMAT fmt = D3DFMT_INDEX16,
                                            D3DPOOL pool = POOL_DEFAULT);
void                    ReleaseIndexBuffer(LPDIRECT3DINDEXBUFFER8 pd3di);
void                    ReleaseIndexBuffers();
void                    RemoveIndexBuffer(LPDIRECT3DINDEXBUFFER8 pd3di);

#endif //__VIBUFFER_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dftest\sources.inc ===
!include ..\..\..\sources.inc

TARGETNAME=d3dftest
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SOURCES=\
    CD3DTest.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dbase\vpshader.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    vpshader.h

Author:

    Matt Bronder

Description:

    Direct3D vertex and pixel shader routines.

*******************************************************************************/

#ifndef __VPSHADER_H__
#define __VPSHADER_H__

//******************************************************************************
// Preprocessor definitions
//******************************************************************************

#define INVALID_SHADER_HANDLE   0xFFFFFFFE

//******************************************************************************
// Function prototypes
//******************************************************************************

DWORD                   CreateVertexShader(LPDIRECT3DDEVICE8 pDevice,
                                            LPDWORD pdwDeclaration,
                                            LPCTSTR szFunction = NULL, 
                                            DWORD dwUsage = 0);
void                    ReleaseVertexShader(LPDIRECT3DDEVICE8 pDevice, 
                                            DWORD dwHandle);

DWORD                   CreatePixelShader(LPDIRECT3DDEVICE8 pDevice,
                                            LPCTSTR szFunction = NULL);
void                    ReleasePixelShader(LPDIRECT3DDEVICE8 pDevice, 
                                            DWORD dwHandle);

#endif //__VPSHADER_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dbase\util.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    util.h

Author:

    Matt Bronder

Description:

    Utility functions.

*******************************************************************************/

#ifndef __UTIL_H__
#define __UTIL_H__

//******************************************************************************
// Debugging function prototypes
//******************************************************************************

#if defined(DEBUG) || defined(_DEBUG) || defined(DBG)
void                DebugString(LPCTSTR szFormat, ...);
BOOL                ResultFailed(HRESULT hr, LPCTSTR sz);
#else
inline void         DebugString(LPCTSTR szFormat, ...) {}
inline BOOL         ResultFailed(HRESULT hr, LPCTSTR sz) {return FALSE;};
#endif

void                OutputString(LPCTSTR szFormat, ...);

//******************************************************************************
// Memory allocation prototypes
//******************************************************************************

BOOL                CreateHeap();
void                ReleaseHeap();
LPVOID              MemAlloc(UINT uNumBytes);
void                MemFree(LPVOID pvMem);
LPVOID              MemAlloc32(UINT uNumBytes);
void                MemFree32(LPVOID pvMem);

//******************************************************************************
// Module instance
//******************************************************************************

void                RegisterInstance(HINSTANCE hInstance);
HINSTANCE           GetInstance();

//******************************************************************************
// Miscellaneous functions
//******************************************************************************

inline void         F2L(int* pint, float f) {
                        __asm fld f;
                        __asm mov edx, pint
                        __asm fistp [edx]
                    }

#endif // __UTIL_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dftest\cd3dtest.cpp ===
/*******************************************************************************

Copyright (c) 1998 Microsoft Corporation.  All rights reserved.

File Name:

    cd3dtest.cpp

Author:

    Matt Bronder

Description:

    Framework library to facilitate the porting of Direct3D tests from the
    DirectX test team.

*******************************************************************************/

#include "d3dlocus.h"
#ifdef UNDER_XBOX
#include "profilep.h"
#endif // UNDER_XBOX
#include "cd3dtest.h"

//******************************************************************************
// CD3DTest
//******************************************************************************

RENDERPRIMITIVEAPI CD3DTest::m_pRPDefaultAPIList[6] =
{
    RP_DP,                      // DrawPrimitive
    RP_DIP,                     // DrawIndexedPrimitive
    RP_DPS,                     // DrawPrimitiveStrided
    RP_DIPS,                    // DrawIndexedPrimitiveStrided
    RP_DPVB,                    // DrawPrimitiveVB
    RP_DIPVB                    // DrawIndexedPrimitiveVB
};

RENDERPRIMITIVEAPI CD3DTest::m_pRPFullAPIList[16] =
{
    RP_BE,                      // Begin/Vertex/End
    RP_BIE,                     // BeginIndexed/Index/End
    RP_DP,                      // DrawPrimitive
    RP_DIP,                     // DrawIndexedPrimitive
    RP_DPS,                     // DrawPrimitiveStrided
    RP_DIPS,                    // DrawIndexedPrimitiveStrided
    RP_DPVB,                    // DrawPrimitiveVB
    RP_DIPVB,                   // DrawIndexedPrimitiveVB
    RP_DPVB_PV,                 // DrawPrimitiveVB after ProcessVertices
    RP_DIPVB_PV,                // DrawIndexedPrimitiveVB after ProcessVertices
    RP_DPVB_OPT,                // DrawPrimitiveVB with optimized vertex buffer
    RP_DIPVB_OPT,               // DrawIndexedPrimitiveVB with optimized vertex buffer
    RP_DPVB_OPT_PV,             // DrawPrimitiveVB after ProcessVertices with optimized vertex buffer
    RP_DIPVB_OPT_PV,            // DrawIndexedPrimitiveVB after ProcessVertices with optimized vertex buffer
    RP_DPVB_PVS,                // DrawPrimitiveVB after ProcessVerticesStrided
    RP_DIPVB_PVS                // DrawIndexedPrimitiveVB after ProcessVerticesStrided
};

RENDERPRIMITIVEAPI CD3DTest::m_pRPFullDX5APIList[4] =
{
    RP_BE,                      // Begin/Vertex/End
    RP_BIE,                     // BeginIndexed/Index/End
    RP_DP,                      // DrawPrimitive
    RP_DIP,                     // DrawIndexedPrimitive
};

RENDERPRIMITIVEAPI CD3DTest::m_pRPFullDX6APIList[14] =
{
    RP_BE,                      // Begin/Vertex/End
    RP_BIE,                     // BeginIndexed/Index/End
    RP_DP,                      // DrawPrimitive
    RP_DIP,                     // DrawIndexedPrimitive
    RP_DPS,                     // DrawPrimitiveStrided
    RP_DIPS,                    // DrawIndexedPrimitiveStrided
    RP_DPVB,                    // DrawPrimitiveVB
    RP_DIPVB,                   // DrawIndexedPrimitiveVB
    RP_DPVB_PV,                 // DrawPrimitiveVB after ProcessVertices
    RP_DIPVB_PV,                // DrawIndexedPrimitiveVB after ProcessVertices
    RP_DPVB_OPT,                // DrawPrimitiveVB with optimized vertex buffer
    RP_DIPVB_OPT,               // DrawIndexedPrimitiveVB with optimized vertex buffer
    RP_DPVB_OPT_PV,             // DrawPrimitiveVB after ProcessVertices with optimized vertex buffer
    RP_DIPVB_OPT_PV,            // DrawIndexedPrimitiveVB after ProcessVertices with optimized vertex buffer
};

RENDERPRIMITIVEAPI CD3DTest::m_pRPFullDX7APIList[14] =
{
    RP_DP,                      // DrawPrimitive
    RP_DIP,                     // DrawIndexedPrimitive
    RP_DPS,                     // DrawPrimitiveStrided
    RP_DIPS,                    // DrawIndexedPrimitiveStrided
    RP_DPVB,                    // DrawPrimitiveVB
    RP_DIPVB,                   // DrawIndexedPrimitiveVB
    RP_DPVB_PV,                 // DrawPrimitiveVB after ProcessVertices
    RP_DIPVB_PV,                // DrawIndexedPrimitiveVB after ProcessVertices
    RP_DPVB_OPT,                // DrawPrimitiveVB with optimized vertex buffer
    RP_DIPVB_OPT,               // DrawIndexedPrimitiveVB with optimized vertex buffer
    RP_DPVB_OPT_PV,             // DrawPrimitiveVB after ProcessVertices with optimized vertex buffer
    RP_DIPVB_OPT_PV,            // DrawIndexedPrimitiveVB after ProcessVertices with optimized vertex buffer
    RP_DPVB_PVS,                // DrawPrimitiveVB after ProcessVerticesStrided
    RP_DIPVB_PVS                // DrawIndexedPrimitiveVB after ProcessVerticesStrided
};

RENDERPRIMITIVEAPI CD3DTest::m_pRPFullDX8APIList[6] =
{
    RP_DP,                      // DrawPrimitiveUP
    RP_DIP,                     // DrawIndexedPrimitiveUP
    RP_DPVB,                    // DrawPrimitive (FVF shader)
    RP_DIPVB,                   // DrawIndexedPrimitive (FVF shader)
    RP_DPS,                     // DrawPrimitive (multistream shader)
    RP_DIPS,                    // DrawIndexedPrimitive (multistream shader)
};

DWORD CD3DTest::m_dwRPDefaultAPIListSize = 6;
DWORD CD3DTest::m_dwRPFullAPIListSize = 16;
DWORD CD3DTest::m_dwRPFullDX5APIListSize = 4;
DWORD CD3DTest::m_dwRPFullDX6APIListSize = 14;
DWORD CD3DTest::m_dwRPFullDX7APIListSize = 14;
DWORD CD3DTest::m_dwRPFullDX8APIListSize = 6;

//******************************************************************************
//
// Method:
//
//     CD3DTest
//
// Description:
//
//     Initialize the test.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
CD3DTest::CD3DTest() {

    D3DFORMAT fmt[] = {
        D3DFMT_A8R8G8B8,
#ifndef DEMO_HACK
        D3DFMT_X8R8G8B8,
#endif
        D3DFMT_R5G6B5,
#ifndef DEMO_HACK
        D3DFMT_A1R5G5B5,
        D3DFMT_X1R5G5B5,
        D3DFMT_A4R4G4B4,
        D3DFMT_DXT1,
        D3DFMT_DXT2,
        D3DFMT_DXT3,
        D3DFMT_DXT4,
        D3DFMT_DXT5,
#ifdef UNDER_XBOX
        D3DFMT_LIN_A8R8G8B8,
        D3DFMT_LIN_X8R8G8B8,
        D3DFMT_LIN_R5G6B5,
        D3DFMT_LIN_A1R5G5B5,
        D3DFMT_LIN_X1R5G5B5,
        D3DFMT_LIN_A4R4G4B4,
#endif // UNDER_XBOX
#endif
    };

    D3DFORMAT fmtd[] = {
#ifndef UNDER_XBOX
        D3DFMT_D16,
        D3DFMT_D16,
        D3DFMT_D24S8,
        D3DFMT_D24S8
#else
        D3DFMT_LIN_D16,
        D3DFMT_LIN_D24S8,
        D3DFMT_LIN_F16,
        D3DFMT_LIN_F24S8
#endif // UNDER_XBOX
    };

    D3DFORMAT fmtv[] = {
        D3DFMT_A8R8G8B8,
#ifndef DEMO_HACK
        D3DFMT_X8R8G8B8,
#endif
        D3DFMT_R5G6B5,
#ifndef DEMO_HACK
        D3DFMT_A1R5G5B5,
        D3DFMT_X1R5G5B5,
        D3DFMT_A4R4G4B4,
        D3DFMT_DXT1,
        D3DFMT_DXT2,
        D3DFMT_DXT3,
        D3DFMT_DXT4,
        D3DFMT_DXT5,
#endif
    };

    D3DFORMAT fmtr[] = {
#ifndef UNDER_XBOX
        D3DFMT_R5G6B5,
        D3DFMT_X1R5G5B5,
        D3DFMT_A8R8G8B8,
        D3DFMT_X8R8G8B8,
#else
        D3DFMT_LIN_R5G6B5,
        D3DFMT_LIN_X1R5G5B5,
        D3DFMT_LIN_A8R8G8B8,
        D3DFMT_LIN_X8R8G8B8,
#endif // UNDER_XBOX
    };

    m_ptrSkipList = NULL;
    m_fInTestCase = false;
    m_dwNumFailed = 0;

    m_dwVersion = 0x0800;

    m_hrLastError = D3D_OK;

    m_fIncrementForward = true;

    m_dwRPAPICyclingFrequency = 3;
    m_dwRPCurrentAPI = RP_DIP;
    m_pRPAPIList = m_pRPFullDX8APIList;
    m_dwRPAPIListSize = m_dwRPFullDX8APIListSize;
    m_dwRPAPICyclingIndex = 0;
    m_pRPVertexArray = NULL;
    m_dwRPVertexArraySize = 0;
    m_pRPIndexArray = NULL;
    m_dwRPIndexArraySize = 0;

    m_uCommonTextureFormats = countof(fmt);
    memcpy(m_fmtCommon, fmt, m_uCommonTextureFormats * sizeof(D3DFORMAT));

    m_uCommonZBufferFormats = countof(fmtd);
    memcpy(m_fmtdCommon, fmtd, m_uCommonZBufferFormats * sizeof(D3DFORMAT));

    m_uCommonVolumeFormats = countof(fmtv);
    memcpy(m_fmtvCommon, fmtv, m_uCommonVolumeFormats * sizeof(D3DFORMAT));

    m_uCommonTargetFormats = countof(fmtr);
    memcpy(m_fmtrCommon, fmtr, m_uCommonTargetFormats * sizeof(D3DFORMAT));
}

//******************************************************************************
//
// Method:
//
//     ~CD3DTest
//
// Description:
//
//     Clean up the test.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
CD3DTest::~CD3DTest() {

    PTRANGE ptr;

    for (ptr = m_ptrSkipList; m_ptrSkipList; ptr = m_ptrSkipList) {
        m_ptrSkipList = m_ptrSkipList->ptrNext;
        MemFree(ptr);
    }

    if (NULL != m_pRPVertexArray)
        MemFree(m_pRPVertexArray);
    if (NULL != m_pRPIndexArray)
        MemFree(m_pRPIndexArray);
}

/*
//******************************************************************************
//
// Method:
//
//     Create
//
// Description:
//
//     Prepare the test for rendering.
//
// Arguments:
//
//     CDisplay* pDisplay               - Pointer to a Display object.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CD3DTest::Create(CDisplay* pDisplay) {

    return CScene::Create(pDisplay);
}
*/
//******************************************************************************
//
// Method:
//
//     Exhibit
//
// Description:
//
//     Execute the test.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     The exit value contained in the wParam parameter of the WM_QUIT message.
//
//******************************************************************************
int CD3DTest::Exhibit(int *pnExitCode) {

    BOOL            bMsgReady;
    float           fTime, fLastTime, fPrevTime, fTimeFreq;
    LARGE_INTEGER   qwCounter;
    DWORD           dwNumFrames = 0;
    UINT            uTest, uLastTest;
    PTRANGE         ptr;
    bool            bResult;
#ifndef UNDER_XBOX
    MSG             msg;
#endif // !UNDER_XBOX

    if (!m_bCreated) {
        return TRUE;
    }

    QueryPerformanceFrequency(&qwCounter);
    fTimeFreq = 1.0f / (float)qwCounter.QuadPart;
    QueryPerformanceCounter(&qwCounter);
    fLastTime = (float)qwCounter.QuadPart * fTimeFreq;
    fPrevTime = fLastTime;

    do {

#ifndef UNDER_XBOX
        // Pump messages
        if (m_pDisplay->IsActive()) {

            // When the application is active, check for new
            // messages without blocking to wait on them
            bMsgReady = PeekMessage(&msg, NULL, 0, 0, PM_REMOVE);
        }
        else {

            // The application has lost the focus and is suspended
            // so we can afford to block here until a new message
            // has arrived (and conserve CPU usage in the process)
            bMsgReady = GetMessage(&msg, NULL, 0, 0);
        }

        if (bMsgReady) {

            // If a message is ready, process it and proceed to
            // check for another message
            TranslateMessage(&msg);
            DispatchMessage(&msg);
        }
        else if (msg.message != WM_QUIT) {
#endif // !UNDER_XBOX

            // Otherwise process user input, update the next frame,
            // and draw it
            QueryPerformanceCounter(&qwCounter);
            fTime = (float)qwCounter.QuadPart * fTimeFreq;

            // Process user input
            m_pDisplay->ProcessInput();
            if (!m_pDisplay->ConsoleVisible()) {
                ProcessInput();
            }

            if (m_pDisplay->m_bTimeSync) {
                m_pDisplay->m_bTimeSync = FALSE;
            }
            else if (!m_bPaused || m_bAdvance) {
                m_fTime += (fTime - fLastTime) * m_fTimeDilation;
                m_fFrame += 1.0f;//(1.0f * m_fTimeDilation);
                m_fTimeDelta = m_fTime - m_fLastTime;
                m_fFrameDelta = m_fFrame - m_fLastFrame;

                if (m_fTimeDuration != FLT_INFINITE && m_fTime > m_fTimeDuration) {
                    break;
                }

                uTest = (UINT)m_fFrame;
                uLastTest = uTest - 1;

                do {
                    // Check the skip list
                    for (ptr = m_ptrSkipList; ptr; ) {
                        if (uTest >= ptr->uStart && uTest <= ptr->uStop) {
                            uTest = ptr->uStop + 1;
                            ptr = m_ptrSkipList;
                        }
                        else {
                            ptr = ptr->ptrNext;
                        }
                    }

                    if (uTest == uLastTest) {
                        break;
                    }

                    m_fFrame = (float)uTest;

                    if (m_fFrameDuration != FLT_INFINITE && m_fFrame > m_fFrameDuration) {
                        break;
                    }

                    uLastTest = uTest;

                    bResult = ExecuteTest(uTest);

                } while (!bResult);

                if (m_fFrameDuration != FLT_INFINITE && m_fFrame > m_fFrameDuration) {
                    break;
                }

                m_fLastTime = m_fTime;
                m_fLastFrame = m_fFrame;
                m_bAdvance = FALSE;
            }

            fLastTime = fTime;
            m_uLastTestNum = uTest;

            if (bResult) {
                if (!Render()) {
                    break;
                }
            }

            EndTestCase();

            dwNumFrames++;

            if (fTime - fPrevTime > 1.0f) {
                m_fFPS = (float)dwNumFrames / (fTime - fPrevTime);
                fPrevTime = fTime;
                dwNumFrames = 0;
            }
#ifndef UNDER_XBOX
        }

    } while (msg.message != WM_QUIT);
#else
    } while (!m_bQuit);
#endif // UNDER_XBOX

    if (pnExitCode) {
#ifndef UNDER_XBOX
        *pnExitCode = msg.wParam;
#else
        *pnExitCode = 0;
#endif // UNDER_XBOX
    }

    return m_bDisplayOK;
}

//******************************************************************************
//
// Method:
//
//     Initialize
//
// Description:
//
//     Initialize the device and all device objects to be used in the test (or
//     at least all device resource objects to be created in the video, 
//     non-local video, or default memory pools).
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the test was successfully initialized for rendering, FALSE if
//     it was not.
//
//******************************************************************************
BOOL CD3DTest::Initialize() {

    HRESULT hr;

    m_pD3D8 = m_pDisplay->GetDirect3D8();
    m_pSrcDevice8 = m_pDevice;

    hr = m_pDevice->GetDeviceCaps(&m_d3dcaps);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::GetDeviceCaps"))) {
        return FALSE;
    }

    // Restrict the common depth buffer formats if running under verification
    if (m_pDisplay->GetConnectionStatus() == SERVER_CONNECTED) {
        m_uCommonZBufferFormats = 2;
    }

    // Initialize the viewports
    m_vpFull.X = 0;
    m_vpFull.Y = 0;
    m_vpFull.Width = m_pDisplay->GetWidth();
    m_vpFull.Height = m_pDisplay->GetHeight();
    m_vpFull.MinZ = 0.0f;
    m_vpFull.MaxZ = 1.0f;

    m_vpTest.Width = m_pDisplay->GetHeight();
    m_vpTest.Height = m_vpTest.Width;
    m_vpTest.X = m_pDisplay->GetWidth() / 2 - m_vpTest.Width / 2;
    m_vpTest.Y = 0;
    m_vpTest.MinZ = 0.0f;
    m_vpTest.MaxZ = 1.0f;

m_pDevice->SetViewport(&m_vpTest);

    // Set the initial device states
    SetDefaultMatrices();
    SetDefaultMaterials();
    SetDefaultLights();
    SetDefaultLightStates();
    SetDefaultRenderStates();

    LogFunction(m_szTestName);

    return (TestInitialize() == D3DTESTINIT_RUN);
}

//******************************************************************************
//
// Method:
//
//     Efface
//
// Description:
//
//     Release all device resource objects (or at least those objects created
//     in video memory, non-local video memory, or the default memory pools)
//     and restore the device to its initial state.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CD3DTest::Efface() {

    m_bDisplayOK = (BOOL)TestTerminate();
}
/*
//******************************************************************************
//
// Method:
//
//     Update
//
// Description:
//
//     Update the state of the scene to coincide with the given time.
//
// Arguments:
//
//     float fTime                      - The time to use in the update
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CD3DTest::Update(float fTime) {

    m_fFrame += (1.0f * m_fTimeDilation);
    m_fFrameDelta = m_fFrame - m_fLastFrame;


    m_fLastTime = fTime;
    m_fLastFrame = m_fFrame;
}
*/
//******************************************************************************
//
// Method:
//
//     Render
//
// Description:
//
//     Render the test scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CD3DTest::Render() {

    DWORD    dwClearFlags = D3DCLEAR_TARGET;
    HRESULT  hr;

    hr = m_pDevice->TestCooperativeLevel();
    if (FAILED(hr)) {
        if (hr == D3DERR_DEVICELOST) {
            return TRUE;
        }
        if (hr == D3DERR_DEVICENOTRESET) {
            if (!Reset()) {
                return FALSE;
            }
        }
    }

    // Clear the rendering target
    m_pDevice->SetViewport(&m_vpFull);
    m_pDevice->Clear(0, NULL, D3DCLEAR_TARGET, RGB_MAKE(74, 150, 202), 1.0f, 0);

    m_pDevice->SetViewport(&m_vpTest);
    if (m_pDisplay->IsDepthBuffered()) {
        dwClearFlags |= D3DCLEAR_ZBUFFER;
    }
//    m_pDevice->Clear(0, NULL, dwClearFlags, RGB_MAKE(0, 0, 0), 1.0f, 0);
    ClearFrame();

    SwitchAPI((UINT)m_fFrame);

    SceneRefresh();

    // Begin the scene
    m_pDevice->BeginScene();

    // Display the adapter mode
    ShowDisplayMode();

    // Display the frame rate
    ShowFrameRate();

    // Display the console
    m_pDisplay->ShowConsole();

    // End the scene
    m_pDevice->EndScene();

    CompareImages();

    ProcessFrame();

    // Update the screen
    m_pDevice->Present(NULL, NULL, NULL, NULL);

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     ProcessInput
//
// Description:
//
//     Process user input for the scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CD3DTest::ProcessInput() {

    CScene::ProcessInput();
}
//******************************************************************************
//
// Method:
//
//     InitView
//
// Description:
//
//     Initialize the camera view in the scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CD3DTest::InitView() {

    return CScene::InitView();
}

//******************************************************************************
bool CD3DTest::GetCompareResult(float fColorVariation, float fColorRange, 
                                UINT uMinPixels, UINT uMax)
{
    // Even though comparisons are automatically made between frame buffers
    // at Present time, those comparisons use state values already set by the
    // scene to determine sensitivity.  Since DirectX tests request sensitivity
    // each frame, make another comparison between the reference and xbox
    // images using the given parameters.

    return true;
}

//******************************************************************************
bool CD3DTest::SetTestRange(UINT uStart, UINT uStop) {

    DWORD dwMaxDuration = 0xFFFFFFFF;

    // Set the test duration
    if (GetStartupContext() & TSTART_SEQUENTIAL) {

        TCHAR szName[MAX_PATH];
        DWORD dwDuration;

        if (GetModuleName(GetTestInstance(), szName, MAX_PATH)) {
            dwDuration = GetProfileInt(szName, TEXT("FrameDuration"), 0xFFFFFFFE);
            if (dwDuration != 0xFFFFFFFE) {
                if (dwDuration != 0) {
                    dwMaxDuration = dwDuration;
                }
            }
        }
    }

    if (uStart > dwMaxDuration) {
        return false;
    }

    if (uStop > dwMaxDuration) {
        uStop = dwMaxDuration;
    }

    m_fFrame = (float)(uStart - 1);
    m_fFrameDuration = (float)uStop;

    return true;
}

//******************************************************************************
bool CD3DTest::SkipTests(UINT uCount) {

    PTRANGE ptr;

    ptr = (PTRANGE)MemAlloc(sizeof(TRANGE));
    if (!ptr) {
        return false;
    }

    ptr->uStart = (UINT)m_fFrame;
    ptr->uStop = ptr->uStart + uCount - 1;
    ptr->ptrNext = m_ptrSkipList;
    m_ptrSkipList = ptr;

    Log(LOG_SKIP, TEXT("Skipping tests %d to %d"), ptr->uStart, ptr->uStop);

    return true;
}

//******************************************************************************
bool CD3DTest::AddTestRange(UINT uStart, UINT uStop, bool bConstraint) {

    UINT i;
    bool bRet = true;

    for (i = uStart; i <= uStop; i++) {
        bRet = AddTest(i) && bRet;
    }
    return bRet;
}

//******************************************************************************
bool CD3DTest::AddTest(UINT uTest) {

    PTRANGE ptr;

    if ((float)uTest < m_fFrame) {
        return false;   // Don't add a test that occurs in the past
    }

    if ((float)uTest > m_fFrameDuration) {

        // Increase the duration, adding a skip list between the old duration and the new
        if (uTest != (UINT)m_fFrameDuration + 1) {

            ptr = (PTRANGE)MemAlloc(sizeof(TRANGE));
            if (!ptr) {
                return false;
            }

            ptr->uStart = (UINT)m_fFrameDuration + 1;
            ptr->uStop = uTest - 1;
            ptr->ptrNext = m_ptrSkipList;
            m_ptrSkipList = ptr;
        }

        m_fFrameDuration = (float)uTest;
    }
    else {

        PTRANGE ptr2;

        // See if the test falls within the range of a skip entry
        for (ptr = m_ptrSkipList; ptr; ) {
            if (uTest >= ptr->uStart && uTest <= ptr->uStop) {
                // Split the skip entry in two at the test.  First, remove the node from the list.
                if (ptr == m_ptrSkipList) {
                    m_ptrSkipList = ptr->ptrNext;
                }
                else {
                    for (ptr2 = m_ptrSkipList; ptr2->ptrNext != ptr; ptr2 = ptr2->ptrNext);
                    ptr2->ptrNext = ptr->ptrNext;
                }

                if (uTest != ptr->uStart) {
                    
                    ptr2 = (PTRANGE)MemAlloc(sizeof(TRANGE));
                    if (!ptr2) {
                        ptr->ptrNext = m_ptrSkipList;
                        m_ptrSkipList = ptr;
                        return false;
                    }

                    ptr2->uStart = ptr->uStart;
                    ptr2->uStop = uTest - 1;
                    ptr2->ptrNext = m_ptrSkipList;
                    m_ptrSkipList = ptr2;
                }

                if (uTest != ptr->uStop) {
                    
                    ptr2 = (PTRANGE)MemAlloc(sizeof(TRANGE));
                    if (!ptr2) {
                        ptr->ptrNext = m_ptrSkipList;
                        m_ptrSkipList = ptr;
                        return false;
                    }

                    ptr2->uStart = uTest + 1;
                    ptr2->uStop = ptr->uStop;
                    ptr2->ptrNext = m_ptrSkipList;
                    m_ptrSkipList = ptr2;
                }

                MemFree(ptr);
                break;
            }
            else {
                ptr = ptr->ptrNext;
            }
        }
    }

    return true;
}

//******************************************************************************
void CD3DTest::ClearRangeList() {

    PTRANGE ptr;

    // Release the test range list
    for (ptr = m_ptrSkipList; m_ptrSkipList; ptr = m_ptrSkipList) {
        m_ptrSkipList = m_ptrSkipList->ptrNext;
        MemFree(ptr);
    }

    m_fFrame = 0.0f;
    m_fFrameDuration = 1.0f;
}

//******************************************************************************
void CD3DTest::Pass(void) {

	Log(LOG_PASS, TEXT("CD3DTest::Pass"));
}

//******************************************************************************
void CD3DTest::Fail(void) {

    Log(LOG_FAIL, TEXT("CD3DTest::Fail"));
}

//******************************************************************************
void CD3DTest::Abort(void) {

    Log(LOG_ABORT, TEXT("CD3DTest::Abort"));
}

/*
//******************************************************************************
void CD3DTest::BeginTestCase(LPCSTR szTestCase, UINT uTestNumber) {

    m_fInTestCase=true;
    if (uTestNumber == 0) {
        uTestNumber = (UINT)m_fFrame;
    }
    LPTSTR szTCase = (LPTSTR)MemAlloc(2048 * sizeof(TCHAR));
    if (!szTCase) {
        OutputDebugString(TEXT("Insufficient memory for case buffer allocation\n"));
        __asm int 3;
        return;
    }
    wsprintf(szTCase + _tcslen(szTestCase), TEXT(" (Test %d)"), uTestNumber);
    LogBeginVariation(szTCase);
    MemFree(szTCase);
}
*/

//******************************************************************************
void CD3DTest::BeginTestCase(LPCSTR szTestCase, UINT uTestNumber) {

    if (m_fInTestCase) {
        EndTestCase();
    }
    m_fInTestCase=true;
    if (uTestNumber == 0) {
        uTestNumber = (UINT)m_fFrame;
    }
#ifndef UNICODE
    char szVariation[2048];
    sprintf(szVariation, "%s (Test %d)", szTestCase, uTestNumber);
    LogBeginVariation(szVariation);
#else
#ifndef UNDER_XBOX
    WCHAR wszTestCase[2048];
#else
    LPWSTR wszTestCase = (LPWSTR)MemAlloc(2048 * sizeof(WCHAR));
    if (!wszTestCase) {
        OutputDebugString(TEXT("Insufficient memory for case buffer allocation\n"));
//        __asm int 3;
        return;
    }
#endif // UNDER_XBOX
    mbstowcs(wszTestCase, szTestCase, 2048);
    wsprintf(wszTestCase + wcslen(wszTestCase), TEXT(" (Test %d)"), uTestNumber);
    LogBeginVariation(wszTestCase);
#ifdef UNDER_XBOX
    MemFree(wszTestCase);
#endif // UNDER_XBOX
#endif // UNICODE
}

//******************************************************************************
void CD3DTest::BeginTestCase(LPCWSTR szTestCase, UINT uTestNumber) {

    if (m_fInTestCase) {
        EndTestCase();
    }
    m_fInTestCase=true;
    if (uTestNumber == 0) {
        uTestNumber = (UINT)m_fFrame;
    }
#ifndef UNICODE
    char szVariation[2048];
    sprintf(szVariation, "%S (Test %d)", szTestCase, uTestNumber);
    LogBeginVariation(szVariation);
#else
    LPWSTR wszTestCase = (LPWSTR)MemAlloc(2048 * sizeof(WCHAR));
    if (!wszTestCase) {
        OutputDebugString(TEXT("Insufficient memory for case buffer allocation\n"));
//        __asm int 3;
        return;
    }
    wsprintf(wszTestCase, L"%s (Test %d)", szTestCase, uTestNumber);
    LogBeginVariation(wszTestCase);
    MemFree(wszTestCase);
#endif // UNICODE
}

//******************************************************************************
void CD3DTest::EndTestCase(void) {

    if (m_fInTestCase) {
        LogEndVariation();
    }

    m_fInTestCase = false;
}
/*
//******************************************************************************
void CD3DTest::WriteToLog(LPCSTR szFormat, ...) {

    LPTSTR szBuffer = (LPWSTR)MemAlloc(2048 * sizeof(TCHAR));
    if (!szBuffer) {
        OutputDebugString(TEXT("Insufficient memory for log buffer allocations\n"));
        __asm int 3;
        return;
    }
    va_list vl;
    va_start(vl, szFormat);
//    wvsprintf(wszBuffer, szFormat, vl);
    _vstprintf(szBuffer, szFormat, vl);
    va_end(vl);
    Log(LOG_COMMENT, szBuffer);
    MemFree(szBuffer);
}

//******************************************************************************
void CD3DTest::WriteToLog(LOGLEVEL ll, LPCSTR szFormat, ...) {

    LPTSTR szBuffer = (LPWSTR)MemAlloc(2048 * sizeof(TCHAR));
    if (!szBuffer) {
        OutputDebugString(TEXT("Insufficient memory for log buffer allocations\n"));
        __asm int 3;
        return;
    }
    va_list vl;
    va_start(vl, szFormat);
//    wvsprintf(wszBuffer, szFormat, vl);
    _vstprintf(szBuffer, szFormat, vl);
    va_end(vl);
    Log(ll, szBuffer);
    MemFree(szBuffer);
}
*/

//******************************************************************************
void CD3DTest::WriteToLog(LPCSTR szFormat, ...) {

#ifndef UNICODE
    char szBuffer[2048];
    va_list vl;
    va_start(vl, szFormat);
    wvsprintf(szBuffer, szFormat, vl);
    va_end(vl);
    Log(LOG_COMMENT, szBuffer);
#else
#ifndef UNDER_XBOX
    WCHAR wszFormat[2048], wszBuffer[2048];
#else
    LPWSTR wszBuffer, wszFormat = (LPWSTR)MemAlloc(4096 * sizeof(WCHAR));
    if (!wszFormat) {
        OutputDebugString(TEXT("Insufficient memory for log buffer allocations\n"));
//        __asm int 3;
        return;
    }
    wszBuffer = wszFormat + 2048;
#endif // UNDER_XBOX
    va_list vl;
    mbstowcs(wszFormat, szFormat, 2048);
    va_start(vl, wszFormat);
//    wvsprintf(wszBuffer, szFormat, vl);
    _vstprintf(wszBuffer, wszFormat, vl);
    va_end(vl);
    Log(LOG_COMMENT, wszBuffer);
#ifdef UNDER_XBOX
    MemFree(wszFormat);
#endif // UNDER_XBOX
#endif // UNICODE
}

//******************************************************************************
void CD3DTest::WriteToLog(LPCWSTR szFormat, ...) {

#ifndef UNICODE
    char szFmt[2048];
    char szBuffer[2048];
    va_list vl;
    wcstombs(szFmt, szFormat, 2048);
    va_start(vl, szFmt);
    wvsprintf(szBuffer, szFmt, vl);
    va_end(vl);
    Log(LOG_COMMENT, szBuffer);
#else
#ifndef UNDER_XBOX
    WCHAR wszBuffer[2048];
#else
    LPWSTR wszBuffer = (LPWSTR)MemAlloc(4096 * sizeof(WCHAR));
    if (!wszBuffer) {
        OutputDebugString(TEXT("Insufficient memory for log buffer allocations\n"));
//        __asm int 3;
        return;
    }
#endif // UNDER_XBOX
    va_list vl;
    va_start(vl, szFormat);
//    wvsprintf(wszBuffer, szFormat, vl);
    _vstprintf(wszBuffer, szFormat, vl);
    va_end(vl);
    Log(LOG_COMMENT, wszBuffer);
#ifdef UNDER_XBOX
    MemFree(wszBuffer);
#endif // UNDER_XBOX
#endif // UNICODE
}

//******************************************************************************
void CD3DTest::WriteToLog(LOGLEVEL ll, LPCSTR szFormat, ...) {

#ifndef UNICODE
    char szBuffer[2048];
    va_list vl;
    va_start(vl, szFormat);
    wvsprintf(szBuffer, szFormat, vl);
    va_end(vl);
    Log(ll, szBuffer);
#else
#ifndef UNDER_XBOX
    WCHAR wszFormat[2048], wszBuffer[2048];
#else
    LPWSTR wszBuffer, wszFormat = (LPWSTR)MemAlloc(4096 * sizeof(WCHAR));
    if (!wszFormat) {
        OutputDebugString(TEXT("Insufficient memory for log buffer allocations\n"));
//        __asm int 3;
        return;
    }
    wszBuffer = wszFormat + 2048;
#endif // UNDER_XBOX
    va_list vl;
    mbstowcs(wszFormat, szFormat, 2048);
    va_start(vl, wszFormat);
//    wvsprintf(wszBuffer, szFormat, vl);
    _vstprintf(wszBuffer, wszFormat, vl);
    va_end(vl);
    Log(ll, wszBuffer);
#ifdef UNDER_XBOX
    MemFree(wszFormat);
#endif // UNDER_XBOX
#endif // UNICODE
}

//******************************************************************************
void CD3DTest::WriteToLog(LOGLEVEL ll, LPCWSTR szFormat, ...) {

#ifndef UNICODE
    char szFmt[2048];
    char szBuffer[2048];
    va_list vl;
    wcstombs(szFmt, szFormat, 2048);
    va_start(vl, szFmt);
    wvsprintf(szBuffer, szFmt, vl);
    va_end(vl);
    Log(LOG_COMMENT, szBuffer);
#else
#ifndef UNDER_XBOX
    WCHAR wszBuffer[2048];
#else
    LPWSTR wszBuffer = (LPWSTR)MemAlloc(4096 * sizeof(WCHAR));
    if (!wszBuffer) {
        OutputDebugString(TEXT("Insufficient memory for log buffer allocations\n"));
//        __asm int 3;
        return;
    }
#endif // UNDER_XBOX
    va_list vl;
    va_start(vl, szFormat);
//    wvsprintf(wszBuffer, szFormat, vl);
    _vstprintf(wszBuffer, szFormat, vl);
    va_end(vl);
    Log(LOG_COMMENT, wszBuffer);
#ifdef UNDER_XBOX
    MemFree(wszBuffer);
#endif // UNDER_XBOX
#endif // UNICODE
}

//******************************************************************************
void CD3DTest::ReadInteger(LPSTR pKey, int iDefault, int * szValue, BOOL bRemove)
{
    *szValue = iDefault;
}

//******************************************************************************
void CD3DTest::ReadInteger(LPWSTR pKey, int iDefault, int * szValue, BOOL bRemove)
{
    *szValue = iDefault;
}

//******************************************************************************
bool CD3DTest::SetLastError(HRESULT hrResult)
{
    if (FAILED(hrResult))
    {
        m_hrLastError = hrResult;
    }

    if (FAILED(hrResult))
        return false;

    return true;
}

//******************************************************************************
HRESULT CD3DTest::GetLastError(void)
{
    return m_hrLastError;
}

//******************************************************************************
bool CD3DTest::BeginScene(void) {

    HRESULT hr = m_pDevice->BeginScene();
    return SetLastError(hr);
}

//******************************************************************************
bool CD3DTest::EndScene(void) {

    HRESULT hr = m_pDevice->EndScene();
    return SetLastError(hr);
}

//******************************************************************************
bool CD3DTest::Clear(D3DCOLOR c) {

    CSurface8*      pd3ds;
    DWORD           dwClearFlags = D3DCLEAR_TARGET;
    D3DSURFACE_DESC d3dsd;
    HRESULT         hr;

    hr = m_pDevice->GetDepthStencilSurface(&pd3ds);
    if (SUCCEEDED(hr) && pd3ds) {
        dwClearFlags |= D3DCLEAR_ZBUFFER;
        hr = pd3ds->GetDesc(&d3dsd);
#ifndef UNDER_XBOX
        if (SUCCEEDED(hr) && (d3dsd.Format == D3DFMT_D15S1 ||
                              d3dsd.Format == D3DFMT_D24S8 ||
                              d3dsd.Format == D3DFMT_D24X4S4)) 
#else
        if (SUCCEEDED(hr) && (d3dsd.Format == D3DFMT_D24S8 ||
                              d3dsd.Format == D3DFMT_F24S8 ||
                              d3dsd.Format == D3DFMT_LIN_D24S8 ||
                              d3dsd.Format == D3DFMT_LIN_F24S8)) 
#endif // UNDER_XBOX
        {
            dwClearFlags |= D3DCLEAR_STENCIL;
        }
        pd3ds->Release();
    }

    hr = m_pDevice->GetRenderTarget(&pd3ds);
    if (SUCCEEDED(hr) && pd3ds) {
        hr = pd3ds->GetDesc(&d3dsd);
        if (SUCCEEDED(hr)) {
            m_dwClearColor = ColorToPixel(d3dsd.Format, NULL, c);
        }
        pd3ds->Release();
    }

    hr = m_pDevice->Clear(0, NULL, dwClearFlags, c, 1.0f, 0);
    return SUCCEEDED(hr);
}

//******************************************************************************
bool CD3DTest::Clear(DWORD dwRGB, float fZ, DWORD dwStencil, DWORD dwFlags, DWORD dwCount, D3DRECT* lpRects) {

    CSurface8*      pd3ds;
    DWORD           dwClearFlags = dwFlags;
    D3DSURFACE_DESC d3dsd;
    HRESULT         hr;

    hr = m_pDevice->GetDepthStencilSurface(&pd3ds);
    if (SUCCEEDED(hr) && pd3ds) {
        hr = pd3ds->GetDesc(&d3dsd);
#ifndef UNDER_XBOX
        if (!(SUCCEEDED(hr) && (d3dsd.Format == D3DFMT_D15S1 ||
                              d3dsd.Format == D3DFMT_D24S8 ||
                              d3dsd.Format == D3DFMT_D24X4S4))) 
#else
        if (!(SUCCEEDED(hr) && (d3dsd.Format == D3DFMT_D24S8 ||
                              d3dsd.Format == D3DFMT_F24S8 ||
                              d3dsd.Format == D3DFMT_LIN_D24S8 ||
                              d3dsd.Format == D3DFMT_LIN_F24S8))) 
#endif // UNDER_XBOX
        {
            dwClearFlags &= ~(D3DCLEAR_STENCIL);
        }
        pd3ds->Release();
    }
    else {
        dwClearFlags &= ~(D3DCLEAR_ZBUFFER | D3DCLEAR_STENCIL);
    }

    hr = m_pDevice->GetRenderTarget(&pd3ds);
    if (SUCCEEDED(hr) && pd3ds) {
        hr = pd3ds->GetDesc(&d3dsd);
        if (SUCCEEDED(hr)) {
            m_dwClearColor = ColorToPixel(d3dsd.Format, NULL, dwRGB);
        }
        pd3ds->Release();
    }

    hr = m_pDevice->Clear(dwCount, lpRects, dwClearFlags, dwRGB, fZ, dwStencil);
    return SUCCEEDED(hr);
}

//******************************************************************************
bool CD3DTest::ClearFrame(void) {

    return Clear(RGB_MAKE(0,0,50));
}

//******************************************************************************
bool CD3DTest::SetTexture(int nIndex, CBaseTexture8* pTextures, DWORD dwFlags) {

    HRESULT hr = m_pDevice->SetTexture(nIndex, pTextures);
    return SetLastError(hr);
}

//******************************************************************************
bool CD3DTest::SetRenderState(D3DRENDERSTATETYPE Type, DWORD dwValue, DWORD dwFlags) {

    HRESULT hr;
    
    if (Type == D3DRENDERSTATE_TEXTUREMAPBLEND) {

        switch (dwValue) {

            case D3DTBLEND_ADD:

                m_pDevice->SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_ADD);
                m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TEXTURE);
                m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_DIFFUSE); 

                m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_SELECTARG2); 
                m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);

                break;
 
            case D3DTBLEND_COPY:
            case D3DTBLEND_DECAL:

                m_pDevice->SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_SELECTARG1);
                m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TEXTURE);
 
                m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_SELECTARG1);
                m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG2, D3DTA_TEXTURE);

                break;
                 
            case D3DTBLEND_DECALALPHA:

                m_pDevice->SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_BLENDTEXTUREALPHA);
                m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TEXTURE);
                m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_DIFFUSE);

                m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_SELECTARG2); 
                m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);
 
                break;

            case D3DTBLEND_MODULATE:
            case D3DTBLEND_MODULATE_ALPHATEXTURE:

                m_pDevice->SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_MODULATE);
                m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TEXTURE);
                m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_DIFFUSE); 
 
                if ( dwValue == D3DTBLEND_MODULATE_ALPHATEXTURE )
                {
                    m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_SELECTARG1); 
                    m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);
                }
                else
                { 
                    m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_SELECTARG2); 
                    m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);
                } 

                break;

            case D3DTBLEND_MODULATEALPHA:

                m_pDevice->SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_MODULATE);
                m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TEXTURE);
                m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_DIFFUSE); 

                m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_MODULATE);
                m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);
                m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE); 

                break;
        }

        return SetLastError(D3D_OK);
    }
    else {
        hr = m_pDevice->SetRenderState(Type, dwValue);
        return SetLastError(hr);
    }
}

//******************************************************************************
bool CD3DTest::SetTransform(D3DTRANSFORMSTATETYPE Type, D3DMATRIX* Matrix, DWORD dwFlags) {

    HRESULT hr = m_pDevice->SetTransform(Type, Matrix);
    return SetLastError(hr);
}

//******************************************************************************
bool CD3DTest::SetTextureStageState(DWORD dwStage, D3DTEXTURESTAGESTATETYPE Type, DWORD dwValue, DWORD dwFlags) {

    HRESULT hr = m_pDevice->SetTextureStageState(dwStage, Type, dwValue);
    return SetLastError(hr);
}

//******************************************************************************
bool CD3DTest::GetTextureStageState(DWORD dwStage, D3DTEXTURESTAGESTATETYPE Type, DWORD *pdwSrcValue, DWORD *pdwRefValue, DWORD dwFlags) {

    DWORD dwValue;
    HRESULT hr = m_pDevice->GetTextureStageState(dwStage, Type, &dwValue);
    if (SUCCEEDED(hr)) {
        if (pdwSrcValue) {
            *pdwSrcValue = dwValue;
        }
        if (pdwRefValue) {
            *pdwRefValue = dwValue;
        }
    }
    return SetLastError(hr);
}

//******************************************************************************
bool CD3DTest::SetViewport(UINT nX, UINT nY, UINT nWidth, UINT nHeight, float fMinZ, float fMaxZ, DWORD dwFlags) {

    D3DVIEWPORT8    viewport;
    HRESULT         hr;

    // Set a viewport for the device
    viewport.X = nX;
    viewport.Y = nY;
    viewport.Width = nWidth;
    viewport.Height = nHeight;
    viewport.MinZ = fMinZ;
    viewport.MaxZ = fMaxZ;

    hr = m_pDevice->SetViewport(&viewport);
    return SetLastError(hr);
}

//******************************************************************************
bool CD3DTest::SetClipPlane(DWORD dwIndex, float* pPlane, DWORD dwFlags) {

    HRESULT hr;
    hr = m_pDevice->SetClipPlane(dwIndex, pPlane);
    return SetLastError(hr);
}

//******************************************************************************
bool CD3DTest::SetVertexShader(DWORD dwHandle, DWORD dwFlags)
{
    HRESULT hr;
    hr = m_pDevice->SetVertexShader(dwHandle);
    return SetLastError(hr);
}

//******************************************************************************
bool CD3DTest::SetStreamSource(DWORD dwStream, CVertexBuffer8 *pSrcVB, CVertexBuffer8 *pRefVB, DWORD dwStride, DWORD dwFlags)
{
    HRESULT hr;
    hr = m_pDevice->SetStreamSource(dwStream, pSrcVB, dwStride);
    return SetLastError(hr);
}

//******************************************************************************
bool CD3DTest::SetIndices(CIndexBuffer8 *pSrcIB, CIndexBuffer8 *pRefIB, DWORD dwBaseVertexIndex, DWORD dwFlags)
{
    HRESULT hr;
    hr = m_pDevice->SetIndices(pSrcIB, dwBaseVertexIndex);
    return SetLastError(hr);
}

//******************************************************************************
bool CD3DTest::LightEnable(DWORD dwLightNum, DWORD dwEnable, DWORD dwFlags) {

    HRESULT hr;
    hr = m_pDevice->LightEnable(dwLightNum, (BOOL)dwEnable);
    return SetLastError(hr);
}

//******************************************************************************
bool CD3DTest::CreateVertexShader(LPDWORD pdwDeclaration, LPDWORD pdwFunction, LPDWORD pdwHandle, DWORD dwUsage, DWORD dwFlags) {

    HRESULT hr;
    hr = m_pDevice->CreateVertexShader(pdwDeclaration, pdwFunction, pdwHandle, dwUsage);
    return SetLastError(hr);
}

//******************************************************************************
bool CD3DTest::DeleteVertexShader(DWORD dwHandle) {

    HRESULT hr;
    hr = m_pDevice->DeleteVertexShader(dwHandle);
    return SetLastError(hr);
}

//******************************************************************************
bool CD3DTest::SetVertexShaderConstant(DWORD dwRegister, LPVOID lpvConstantData, DWORD dwConstantCount, DWORD dwFlags) {

    HRESULT hr;
    hr = m_pDevice->SetVertexShaderConstant(dwRegister, lpvConstantData, dwConstantCount);
    return SetLastError(hr);
}

//******************************************************************************
bool CD3DTest::ValidateDevice(HRESULT *phSrcResult, DWORD *pdwSrcPasses, HRESULT *phRefResult, DWORD *pdwRefPasses) {

    DWORD   dwPasses;
    HRESULT hr;

    hr = m_pDevice->ValidateDevice(&dwPasses);

    if (pdwSrcPasses) {
        *pdwSrcPasses = dwPasses;
    }
    if (pdwRefPasses) {
        *pdwRefPasses = dwPasses;
    }
    if (phSrcResult) {
        *phSrcResult = hr;
    }
    if (phRefResult) {
        *phRefResult = hr;
    }

    return SetLastError(hr);
}

//******************************************************************************
bool CD3DTest::SetupViewport() {

    CSurface8* pd3ds;
    D3DSURFACE_DESC d3dsd;
    m_pDevice->GetRenderTarget(&pd3ds);
    pd3ds->GetDesc(&d3dsd);
    pd3ds->Release();
    return SetViewport(0,0,d3dsd.Width,d3dsd.Height);
}

//******************************************************************************
void CD3DTest::SetAPI(RENDERPRIMITIVEAPI dwAPI)
{
    // Set new API and disable cycling
    m_dwRPCurrentAPI = dwAPI;
    m_pRPAPIList = NULL;
    m_dwRPAPIListSize = 0;
    m_dwRPAPICyclingFrequency = 0;
    m_dwRPAPICyclingIndex = 0;
}
    
//******************************************************************************
void CD3DTest::SetAPI(PRENDERPRIMITIVEAPI pAPIList, DWORD dwAPIListSize, DWORD dwAPICyclingFrequency)
{
    if (NULL == pAPIList || 0 == dwAPIListSize)
    {
        // Disbale API switching
        m_pRPAPIList = NULL;
        m_dwRPAPIListSize = 0;
        m_dwRPAPICyclingFrequency = 0;
        m_dwRPAPICyclingIndex = 0;
    }
    else
    {
        // Set new API list
        m_pRPAPIList = pAPIList;
        m_dwRPAPIListSize = dwAPIListSize;
        m_dwRPAPICyclingFrequency = dwAPICyclingFrequency;

        // Reset current API settings
        m_dwRPAPICyclingIndex = 0;
        m_dwRPCurrentAPI = m_pRPAPIList[m_dwRPAPICyclingIndex];
    }
}

//******************************************************************************
void CD3DTest::SwitchAPI(DWORD dwTestNumber)
{
    // Don't do anything if API switching is disabled
    if (0 == m_dwRPAPICyclingFrequency || 
        NULL == m_pRPAPIList ||
        0 == m_dwRPAPIListSize)
    {
        return;
    }

    // Check if we are ready to switch
    DWORD dwTest = dwTestNumber - 1; // zero-based test number
    m_dwRPAPICyclingIndex = (dwTest / m_dwRPAPICyclingFrequency) % m_dwRPAPIListSize;
    m_dwRPCurrentAPI = m_pRPAPIList[m_dwRPAPICyclingIndex];
}

//******************************************************************************
RENDERPRIMITIVEAPI CD3DTest::GetAPI(void)
{
    return m_dwRPCurrentAPI;
}

//******************************************************************************
// Remap invalid API combinations
// - APIs not supported in current version
// - Indexed to non-indexed for point primitives
// - APIs that require untransformed vertices
//******************************************************************************
DWORD CD3DTest::RemapAPI(DWORD dwCurrentAPI, D3DPRIMITIVETYPE d3dptPrimitiveType, DWORD dwVertexTypeDesc)
{
    DWORD   dwAPI = dwCurrentAPI;

    // DX8: Remap old interfaces to DrawPrimitive and DrawIndexedPrimitive
    if (0x0800 == m_dwVersion)
    {
        switch (dwAPI)
        {
        case RP_BE:
        case RP_DPVB_PV:
        case RP_DPVB_OPT:
        case RP_DPVB_OPT_PV:
        case RP_DPVB_PVS:
            dwAPI = RP_DP;
            break;
        case RP_BIE:
        case RP_DIPVB_PV:
        case RP_DIPVB_OPT:
        case RP_DIPVB_OPT_PV:
        case RP_DIPVB_PVS:
            dwAPI = RP_DIP;
            break;
        }
    }

    // DX8: Remap multi-stream APIs to single-stream if devices do not support
    // enough streams
    DWORD   dwStreams = 0;
    if (0 != (dwVertexTypeDesc & D3DFVF_POSITION_MASK))
        dwStreams += 1;
//    if (0 != (dwVertexTypeDesc & (D3DFVF_NORMAL | D3DFVF_RESERVED1)))
    if (0 != (dwVertexTypeDesc & (D3DFVF_NORMAL)))
        dwStreams += 1;
    if (0 != (dwVertexTypeDesc & D3DFVF_DIFFUSE))
        dwStreams += 1;
    if (0 != (dwVertexTypeDesc & D3DFVF_SPECULAR))
        dwStreams += 1;
    dwStreams += (dwVertexTypeDesc & D3DFVF_TEXCOUNT_MASK) >> D3DFVF_TEXCOUNT_SHIFT;

    if (m_d3dcaps.MaxStreams < dwStreams ||
        m_d3dcaps.MaxStreams < dwStreams)
    {
        switch(dwAPI)
        {
        case RP_DPS:
            dwAPI = RP_DPVB;
            break;
        case RP_DIPS:
            dwAPI = RP_DIPVB;
            break;
        }
    }

    // Remap indexed APIs to non-indexed analogs for POINTLIST primitive
    if (D3DPT_POINTLIST == d3dptPrimitiveType)
    {
        switch (dwAPI)
        {
        case RP_BIE:            dwAPI = RP_BE;              break;
        case RP_DIP:            dwAPI = RP_DP;              break;
        case RP_DIPS:           dwAPI = RP_DPS;             break;
        case RP_DIPVB:          dwAPI = RP_DPVB;            break;
        case RP_DIPVB_PV:       dwAPI = RP_DPVB_PV;         break;
        case RP_DIPVB_OPT:      dwAPI = RP_DPVB_OPT;        break;
        case RP_DIPVB_OPT_PV:   dwAPI = RP_DPVB_OPT_PV;     break;
        case RP_DIPVB_PVS:      dwAPI = RP_DPVB_PVS;        break;
        }
    }

    // Remap APIs that require untransfortmed vertices
    if (D3DFVF_XYZRHW == (dwVertexTypeDesc & D3DFVF_POSITION_MASK))
    {
        switch (dwAPI)
        {
        case RP_DPS:
        case RP_DPVB_PVS:
        case RP_DPVB_PV:
        case RP_DPVB_OPT:
        case RP_DPVB_OPT_PV:
            dwAPI = RP_DP;
            break;
        case RP_DIPS:
        case RP_DIPVB_PVS:
        case RP_DIPVB_PV:
        case RP_DIPVB_OPT:
        case RP_DIPVB_OPT_PV:
            dwAPI = RP_DIP;
            break;
        }
    }
    return dwAPI;
}

//******************************************************************************
bool CD3DTest::RenderPrimitive(D3DPRIMITIVETYPE d3dptPrimitiveType, DWORD dwVertexTypeDesc,
                               LPVOID lpvVertices, DWORD dwVertexCount,
                               LPWORD lpwIndices, DWORD dwIndexCount, DWORD dwFlags)
{
    DWORD       dwAPI = RemapAPI(m_dwRPCurrentAPI, d3dptPrimitiveType, dwVertexTypeDesc);
    DWORD       dwVertexSize = GetVertexSize(dwVertexTypeDesc);
    bool        bRet = true;

    LPVOID      pVertices;
    DWORD       dwVCount;
    LPWORD      pIndices;
    DWORD       dwICount;

    DWORD       dwClip;
    DWORD       dwLight;
//    DWORD       dwExtents;

    DWORD       dwPCount, dwNCount;
    HRESULT     hr;

    if ((dwVertexTypeDesc & D3DFVF_RESERVED0)) { // || (dwVertexTypeDesc & D3DFVF_RESERVED1)) {
        Log(LOG_ABORT, TEXT("Reserved field are unsupported in vertex formats in DX8"));
        return false;
    }

    // Filling local vertices and indices pointers/counters
    // with correct data for selected API
    switch(dwAPI)
    {
    case RP_DP:
    case RP_DPS:
    case RP_DPVB:
        dwVCount = dwVertexCount;
        pVertices = lpvVertices;

        // Non-indexed API selected: need to dereference vertices in case of indexed call
        if (NULL != lpwIndices)
        {
            dwVCount = dwIndexCount;
            pVertices = CreateVertexArray(lpvVertices, dwVertexCount, dwVertexSize, 
                                         lpwIndices, dwIndexCount);
            if (NULL == pVertices)
                bRet = false;
        }

        pIndices = NULL;
        dwICount = 0;
        dwNCount = dwVCount;

        break;
    case RP_DIP:
    case RP_DIPS:
    case RP_DIPVB:
        dwVCount = dwVertexCount;
        pVertices = lpvVertices;
        dwICount = dwIndexCount;
        pIndices = lpwIndices;
        
        // Indexed API selected: need to build index array in case of non-indexed call
        if (NULL == lpwIndices)
        {
            dwICount = dwVertexCount;
            pIndices = CreateIndexArray(dwICount);
            if (NULL == pIndices)
                bRet = false;
        }

        dwNCount = dwICount;

        break;
    default:
        // Incorrect API
        Log(LOG_ABORT, TEXT("RenderPrimitive: Render type %d is unsupported in DX8"), dwAPI);
        bRet = false;
        break;
    }
/*
    case RP_BE:
    case RP_BIE:
    case RP_DPVB_PV:
    case RP_DPVB_OPT_PV:
    case RP_DIPVB_PV:
    case RP_DIPVB_OPT_PV:
    case RP_DPVB_OPT:
    case RP_DPVB_PVS:
    case RP_DIPVB_OPT:
    case RP_DIPVB_PVS:
        Log(LOG_ABORT, TEXT("RenderPrimitive: Render type %d is unsupported in DX8"), dwAPI);
        return false;
*/    
    // Choose and call low level rendering function
    if (bRet)
    {
        switch (d3dptPrimitiveType) {
            case D3DPT_POINTLIST:
                dwPCount = dwNCount;
                break;
            case D3DPT_LINELIST:
                dwPCount = dwNCount / 2;
                break;
            case D3DPT_LINESTRIP:
                dwPCount = dwNCount - 1;
                break;
            case D3DPT_TRIANGLELIST:
                dwPCount = dwNCount / 3;
                break;
            case D3DPT_TRIANGLESTRIP:
            case D3DPT_TRIANGLEFAN:
                dwPCount = dwNCount - 2;
                break;
        }

#ifndef UNDER_XBOX
        if (dwFlags & D3DDP_DONOTCLIP) {
//            m_pDevice->GetRenderState(D3DRS_CLIPPING, &dwClip);
            dwClip = FALSE;
            hr = m_pDevice->SetRenderState(D3DRS_CLIPPING, FALSE);
            if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState(D3DRS_CLIPPING, ...)"))) {
                SetLastError(hr);
                return false;
            }
        }
#endif // !UNDER_XBOX
/*
        if (dwFlags & D3DDP_DONOTUPDATEEXTENTS) {
            m_pDevice->GetRenderState(D3DRS_EXTENTS, &dwExtents);
            hr = m_pDevice->SetRenderState(D3DRS_EXTENTS, FALSE);
            if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState(D3DRS_EXTENTS, ...)"))) {
                bRet = false;
            }
        }
*/
        if (dwFlags & D3DDP_DONOTLIGHT || !(dwVertexTypeDesc & D3DFVF_NORMAL)) {
//            m_pDevice->GetRenderState(D3DRS_LIGHTING, &dwLight);
            dwLight = FALSE;
            hr = m_pDevice->SetRenderState(D3DRS_LIGHTING, FALSE);
            if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState(D3DRS_LIGHTING, ...)"))) {
                SetLastError(hr);
                return false;
            }
        }

        // TODO: Copy the vertices to a larger buffer and actually space them out in a strided
        // manner for the strided calls....modify dwVertexSize to be the strided amount and replace
        // pVertices with the strided buffer

        hr = m_pDevice->SetVertexShader(dwVertexTypeDesc);
        if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetVertexShader"))) {
            SetLastError(hr);
            return false;
        }

        switch (dwAPI)
        {

        case RP_DPS:
        case RP_DP:
            hr = m_pDevice->DrawPrimitiveUP(d3dptPrimitiveType, dwPCount, pVertices, dwVertexSize);
            if (ResultFailed(hr, TEXT("IDirect3DDevice8::DrawPrimitiveUP"))) {
                SetLastError(hr);
                return false;
            }

            break;
        case RP_DIPS:
        case RP_DIP:
            hr = m_pDevice->DrawIndexedPrimitiveUP(d3dptPrimitiveType, 0, dwVCount, dwPCount, pIndices, D3DFMT_INDEX16, pVertices, dwVertexSize);
            if (ResultFailed(hr, TEXT("IDirect3DDevice8::DrawPrimitiveUP"))) {
                SetLastError(hr);
                return false;
            }

            break;
        case RP_DPVB:
            {
                CVertexBuffer8  *pSrcVB;

                // Source vertex buffer
                pSrcVB = CreateVertexBuffer(m_pDevice, pVertices, dwVCount * dwVertexSize, 0, dwVertexTypeDesc);
                if (NULL == pSrcVB) {
                    SetLastError(hr);
                    return false;
                }

                // Rendering
                hr = m_pDevice->SetStreamSource(0, pSrcVB, dwVertexSize);
                if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetStreamSource"))) {
                    ReleaseVertexBuffer(pSrcVB);
                    SetLastError(hr);
                    return false;
                }
                else {
                    hr = m_pDevice->DrawPrimitive(d3dptPrimitiveType, 0, dwPCount);
                    if (ResultFailed(hr, TEXT("IDirect3DDevice8::DrawPrimitive"))) {
                        ReleaseVertexBuffer(pSrcVB);
                        SetLastError(hr);
                        return false;
                    }
                }

                ReleaseVertexBuffer(pSrcVB);
            }
            break;    
        case RP_DIPVB:
            {
                CVertexBuffer8  *pSrcVB;
                CIndexBuffer8   *pSrcIB;

                // Source vertex buffer
                pSrcVB = CreateVertexBuffer(m_pDevice, pVertices, dwVCount * dwVertexSize, 0, dwVertexTypeDesc);
                if (NULL == pSrcVB) {
                    SetLastError(hr);
                    return false;
                }

                pSrcIB = CreateIndexBuffer(m_pDevice, pIndices, dwICount * sizeof(WORD));
                if (NULL == pSrcIB) {
                    ReleaseVertexBuffer(pSrcVB);
                    SetLastError(hr);
                    return false;
                }

                // Rendering
                hr = m_pDevice->SetStreamSource(0, pSrcVB, dwVertexSize);
                if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetStreamSource"))) {
                    ReleaseIndexBuffer(pSrcIB);
                    ReleaseVertexBuffer(pSrcVB);
                    SetLastError(hr);
                    return false;
                }
                else {
                    hr = m_pDevice->SetIndices(pSrcIB, 0);
                    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetIndices"))) {
                        ReleaseIndexBuffer(pSrcIB);
                        ReleaseVertexBuffer(pSrcVB);
                        SetLastError(hr);
                        return false;
                    }
                    else {
                        hr = m_pDevice->DrawIndexedPrimitive(d3dptPrimitiveType, 0, dwVCount, 0, dwPCount);
                        if (ResultFailed(hr, TEXT("IDirect3DDevice8::DrawPrimitive"))) {
                            ReleaseIndexBuffer(pSrcIB);
                            ReleaseVertexBuffer(pSrcVB);
                            SetLastError(hr);
                            return false;
                        }
                    }
                }

                ReleaseIndexBuffer(pSrcIB);
                ReleaseVertexBuffer(pSrcVB);
                break;
            }
            break;
        default:
            // Incorrect API
            bRet = false;
            break;
        }

#ifndef UNDER_XBOX
        if (dwFlags & D3DDP_DONOTCLIP) {
            hr = m_pDevice->SetRenderState(D3DRS_CLIPPING, dwClip);
            if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState(D3DRS_CLIPPING, ...)"))) {
                bRet = false;
            }
        }
#endif // !UNDER_XBOX
/*
        if (dwFlags & D3DDP_DONOTUPDATEEXTENTS) {
            hr = m_pDevice->SetRenderState(D3DRS_EXTENTS, dwExtents);
            if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState(D3DRS_EXTENTS, ...)"))) {
                bRet = false;
            }
        }
*/
        if (dwFlags & D3DDP_DONOTLIGHT || !(dwVertexTypeDesc & D3DFVF_NORMAL)) {
            hr = m_pDevice->SetRenderState(D3DRS_LIGHTING, dwLight);
            if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState(D3DRS_LIGHTING, ...)"))) {
                bRet = false;
            }
        }
    }

    SetLastError(hr);

    return bRet;
}

//******************************************************************************
DWORD CD3DTest::GetVertexSize(DWORD dwVertexTypeDesc) {

    static const DWORD  dwTextureSize[4] = {2*sizeof(float), 3*sizeof(float), 4*sizeof(float), sizeof(float)};
    DWORD               dwVertexSize = 0;

    if (0 != (dwVertexTypeDesc & D3DFVF_POSITION_MASK))
    {
        switch (dwVertexTypeDesc & D3DFVF_POSITION_MASK)
        {
            case D3DFVF_XYZ:
                dwVertexSize += sizeof(float) * 3;
                break;
            case D3DFVF_XYZRHW:
                dwVertexSize += sizeof(float) * 4;
                break;
            case D3DFVF_XYZB1:
                dwVertexSize += sizeof(float) * 4;
                break;
            case D3DFVF_XYZB2:
                dwVertexSize += sizeof(float) * 5;
                break;
            case D3DFVF_XYZB3:
                dwVertexSize += sizeof(float) * 6;
                break;
            case D3DFVF_XYZB4:
                dwVertexSize += sizeof(float) * 7;
                break;
#ifndef UNDER_XBOX
            case D3DFVF_XYZB5:
                dwVertexSize += sizeof(float) * 8;
                break;
#endif // !UNDER_XBOX
            default:
                break;
        }
    }

//    if (0 != (dwVertexTypeDesc & D3DFVF_RESERVED0))
//        dwVertexSize += sizeof(DWORD);

#ifndef UNDER_XBOX
    if (0 != (dwVertexTypeDesc & D3DFVF_PSIZE))
        dwVertexSize += sizeof(DWORD);
#endif

    if (0 != (dwVertexTypeDesc & D3DFVF_NORMAL))
        dwVertexSize += sizeof(float) * 3;

    if (0 != (dwVertexTypeDesc & D3DFVF_DIFFUSE))
        dwVertexSize += sizeof(DWORD);

    if (0 != (dwVertexTypeDesc & D3DFVF_SPECULAR))
        dwVertexSize += sizeof(DWORD);

    // Texture formats:
	// 00 - D3DFVF_TEXTUREFORMAT2
	// 01 - D3DFVF_TEXTUREFORMAT3
	// 10 - D3DFVF_TEXTUREFORMAT4
	// 11 - D3DFVF_TEXTUREFORMAT1
    {
		DWORD dwTextureFormats = dwVertexTypeDesc >> CDIRECT3D_TEXTUREFORMATS_SHIFT;
		DWORD dwTexCoordSize = 0;
		DWORD dwNumTexCoords = ((dwVertexTypeDesc & D3DFVF_TEXCOUNT_MASK) >> D3DFVF_TEXCOUNT_SHIFT);
		if (0 == dwTextureFormats)
		{
			dwTexCoordSize = sizeof(float) * 2 * dwNumTexCoords;
		}
		else
		{
			for (DWORD i=0; i < dwNumTexCoords; i++)
			{
				dwTexCoordSize += dwTextureSize[dwTextureFormats & CDIRECT3D_TEXTUREFORMAT_MASK];
				dwTextureFormats >>= CDIRECT3D_TEXTUREFORMAT_SIZE;
			}
		}
		dwVertexSize += dwTexCoordSize; 
	}
    
    return dwVertexSize;
}

//******************************************************************************
LPVOID CD3DTest::CreateVertexArray(LPVOID lpvVertices, DWORD  dwVertexCount, DWORD dwVertexSize,
                                     LPWORD lpwIndices, DWORD  dwIndexCount) {

    DWORD   dwRequiredMemory = dwIndexCount * dwVertexSize;
    LPBYTE  p;

    // Check size of currenty allocated memory and reallocate if necessary
    if (m_dwRPVertexArraySize < dwRequiredMemory)
    {
        if (NULL != m_pRPVertexArray)
            MemFree(m_pRPVertexArray);
        m_pRPVertexArray = MemAlloc(dwRequiredMemory);
        m_dwRPVertexArraySize = dwRequiredMemory;
        if (NULL == m_pRPVertexArray) 
        {
            m_dwRPVertexArraySize = 0;
            return NULL;
        }
    }

    // Dereference vertices to the allocated memory
    p = (LPBYTE)m_pRPVertexArray;
    for (DWORD i = 0; i < dwIndexCount; i++)
    {
        if (dwIndexCount < lpwIndices[i])
            return NULL;
        memcpy(p, (((LPBYTE)lpvVertices) + dwVertexSize*lpwIndices[i]), 
               dwVertexSize);
        p += dwVertexSize;
    }
    return m_pRPVertexArray;
}

//******************************************************************************
LPWORD CD3DTest::CreateIndexArray(DWORD dwSize)
{
    if (m_dwRPIndexArraySize < dwSize)
    {
        if (NULL != m_pRPIndexArray)
            MemFree(m_pRPIndexArray);
        m_pRPIndexArray = (LPWORD)MemAlloc(dwSize * sizeof(WORD));
        m_dwRPIndexArraySize = dwSize;
        if (NULL == m_pRPIndexArray)
        {
            m_dwRPIndexArraySize = 0;
            return NULL;
        }

        for (unsigned short i = 0; i < dwSize; i++)
            m_pRPIndexArray[i] = i;
    }
    return m_pRPIndexArray;
}

//******************************************************************************
CTexture8* CD3DTest::CreateCommonTexture(CDevice8* pDevice, UINT uWidth, UINT uHeight, UINT uFormat, LPCTSTR szName) {

    CTexture8* pd3dt;
    
    if (!szName) {
        pd3dt = (CTexture8*)CreateTexture(pDevice, uWidth, uHeight, m_fmtCommon[uFormat]);
    }
    else {
        pd3dt = (CTexture8*)CreateTexture(pDevice, szName, m_fmtCommon[uFormat]);
    }

    if (pd3dt) {
        RemoveTexture(pd3dt);
    }

    return pd3dt;
}

//******************************************************************************
bool CD3DTest::ColorFillTarget(DWORD dwRGB, LPRECT pRect) {

    D3DRECT d3drect;
    HRESULT hr;

    if (pRect) {
        d3drect.x1 = pRect->left;
        d3drect.y1 = pRect->top;
        d3drect.x2 = pRect->right;
        d3drect.y2 = pRect->bottom;
    }
    else {
        d3drect.x1 = 0;
        d3drect.y1 = 0;
        d3drect.x2 = m_pDisplay->GetWidth();
        d3drect.y2 = m_pDisplay->GetHeight();
    }

    hr = m_pDevice->Clear(1, &d3drect, D3DCLEAR_TARGET, dwRGB, 0.0f, 0);

    return SUCCEEDED(hr);
}

//******************************************************************************
TCHAR* CD3DTest::D3DFmtToString(D3DFORMAT d3dfmt)
{
	switch(d3dfmt)
	{
        case D3DFMT_UNKNOWN:
			return _T("D3DFMT_UNKNOWN"); 

        case D3DFMT_R8G8B8:
			return _T("D3DFMT_R8G8B8"); 

        case D3DFMT_A8R8G8B8:
			return _T("D3DFMT_A8R8G8B8");

        case D3DFMT_X8R8G8B8:
			return _T("D3DFMT_X8R8G8B8");

        case D3DFMT_R5G6B5:
			return _T("D3DFMT_R5G6B5");

        case D3DFMT_X1R5G5B5:
			return _T("D3DFMT_X1R5G5B5");

        case D3DFMT_A1R5G5B5:
			return _T("D3DFMT_A1R5G5B5");

        case D3DFMT_A4R4G4B4:
			return _T("D3DFMT_A4R4G4B4");

#ifdef UNDER_XBOX
        case D3DFMT_LIN_A8R8G8B8:
			return _T("D3DFMT_LIN_A8R8G8B8");

        case D3DFMT_LIN_X8R8G8B8:
			return _T("D3DFMT_LIN_X8R8G8B8");

        case D3DFMT_LIN_R5G6B5:
			return _T("D3DFMT_LIN_R5G6B5");

        case D3DFMT_LIN_X1R5G5B5:
			return _T("D3DFMT_LIN_X1R5G5B5");

        case D3DFMT_LIN_A1R5G5B5:
			return _T("D3DFMT_LIN_A1R5G5B5");

        case D3DFMT_LIN_A4R4G4B4:
			return _T("D3DFMT_LIN_A4R4G4B4");
#endif

        case D3DFMT_R3G3B2:
			return _T("D3DFMT_R3G3B2");

        case D3DFMT_A8:
			return _T("D3DFMT_A8");

        case D3DFMT_A8R3G3B2:
			return _T("D3DFMT_A8R3G3B2");

        case D3DFMT_X4R4G4B4:
			return _T("D3DFMT_X4R4G4B4");

        case D3DFMT_A8P8:
			return _T("D3DFMT_A8P8");

        case D3DFMT_P8:
            return _T("D3DFMT_P8");

        case D3DFMT_L8:
			return _T("D3DFMT_L8");

		case D3DFMT_A8L8:
			return _T("D3DFMT_A8L8");

		case D3DFMT_A4L4:
			return _T("D3DFMT_A4L4");

		case D3DFMT_V8U8:
			return _T("D3DFMT_V8U8");

		case D3DFMT_L6V5U5:
			return _T("D3DFMT_L6V5U5");

#ifndef UNDER_XBOX
		case D3DFMT_X8L8V8U8:
			return _T("D3DFMT_X8L8V8U8");
#endif // !UNDER_XBOX

		case D3DFMT_Q8W8V8U8:
			return _T("D3DFMT_Q8W8V8U8");

		case D3DFMT_V16U16:
			return _T("D3DFMT_V16U16");

		case D3DFMT_W11V11U10:
			return _T("D3DFMT_W11V11U10");
	
		case D3DFMT_UYVY:
			return _T("D3DFMT_UYVY");
		
		case D3DFMT_YUY2:
			return _T("D3DFMT_YUY2");
		
		case D3DFMT_DXT1:
			return _T("D3DFMT_DXT1");

		case D3DFMT_DXT2:
			return _T("D3DFMT_DXT2");

#ifndef UNDER_XBOX
		case D3DFMT_DXT3:
			return _T("D3DFMT_DXT3");
#endif // !UNDER_XBOX

		case D3DFMT_DXT4:
			return _T("D3DFMT_DXT4");

#ifndef UNDER_XBOX
		case D3DFMT_DXT5:
			return _T("D3DFMT_DXT5");
#endif // !UNDER_XBOX
            
#ifndef UNDER_XBOX
		case D3DFMT_D16_LOCKABLE:
			return _T("D3DFMT_D16_LOCKABLE");
#endif // !UNDER_XBOX

		case D3DFMT_D32:
			return _T("D3DFMT_D32");

		case D3DFMT_D15S1:
			return _T("D3DFMT_D15S1");

		case D3DFMT_D24S8:
			return _T("D3DFMT_D24S8");

		case D3DFMT_D16:
			return _T("D3DFMT_D16");

#ifndef UNDER_XBOX
		case D3DFMT_D24X8:
			return _T("D3DFMT_D24X8");
#endif

		case D3DFMT_D24X4S4:
			return _T("D3DFMT_D24X4S4");

		case D3DFMT_VERTEXDATA:
			return _T("D3DFMT_VERTEXDATA");

		case D3DFMT_INDEX16:
			return _T("D3DFMT_INDEX16");

#ifndef UNDER_XBOX
		case D3DFMT_INDEX32:
			return _T("D3DFMT_INDEX32");
#endif

		default:
			return _T("<Unrecognized Format>");
	}
}

//******************************************************************************
// Scene window procedure (pseudo-subclassed off the main window procedure)
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     WndProc
//
// Description:
//
//     Scene window procedure to process messages received by the main 
//     application window.
//
// Arguments:
//
//     LRESULT* plr             - Result of the message processing
//
//     HWND hWnd                - Application window
//
//     UINT uMsg                - Message to process
//
//     WPARAM wParam            - First message parameter
//
//     LPARAM lParam            - Second message parameter
//
// Return Value:
//
//     TRUE if the message was handled, FALSE otherwise.
//
//******************************************************************************
BOOL CD3DTest::WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    *plr = 0;

#ifndef UNDER_XBOX

    switch (uMsg) {

        case WM_KEYDOWN:

            switch (wParam) {

                case VK_F12: // Toggle pause state
                    m_bPaused = !m_bPaused;
                    return TRUE;
            }

            break;
    }

#endif // !UNDER_XBOX

    return CScene::WndProc(plr, hWnd, uMsg, wParam, lParam);
}

//******************************************************************************
// Texture utilities
//******************************************************************************

//******************************************************************************
CTexture8* CreateGradientTexture(CDevice8* pDevice, DWORD dwWidth, DWORD dwHeight, 
                            DWORD dwColors[4], D3DFORMAT fmt)
{
    CTexture8*      pd3dt;
    D3DLOCKED_RECT  d3dlr;
    LPDWORD         pdwPixel;
    UINT            x, y;
    HRESULT         hr;

	// Interpolants
	float fRed, fGreen, fBlue, fAlpha;
	float fRedPct[4], fGreenPct[4], fBluePct[4], fAlphaPct[4];

	for(int i=0; i<4; i++)
	{
		fRedPct[i] = CIL_MAKEPCT(CIL_RED(dwColors[i]));
		fGreenPct[i] = CIL_MAKEPCT(CIL_GREEN(dwColors[i]));
		fBluePct[i] = CIL_MAKEPCT(CIL_BLUE(dwColors[i]));
		fAlphaPct[i] = CIL_MAKEPCT(CIL_ALPHA(dwColors[i]));
	}

#ifndef UNDER_XBOX
    pd3dt = (CTexture8*)CreateTexture(pDevice, dwWidth, dwHeight, D3DFMT_A8R8G8B8);
#else
    pd3dt = (CTexture8*)CreateTexture(pDevice, dwWidth, dwHeight, D3DFMT_LIN_A8R8G8B8);
#endif // UNDER_XBOX
    if (!pd3dt) {
        return NULL;
    }

    hr = pd3dt->LockRect(0, &d3dlr, NULL, 0);
    if (ResultFailed(hr, TEXT("IDirect3DTexture8::LockRect"))) {
        ReleaseTexture(pd3dt);
        return NULL;
    }

    pdwPixel = (LPDWORD)d3dlr.pBits;

    for (x = 0; x < dwWidth; x++) {

        for (y = 0; y < dwHeight; y++) {

            float fXPct, fYPct;
            if(dwWidth > 1)
                fXPct = (float)x/(float)(dwWidth - 1);
            else
                fXPct = 0;
            if(dwHeight > 1)
                fYPct = (float)y/(float)(dwHeight - 1);
            else
                fYPct = 0;
			
			fRed = ((1.0f - fYPct) * (fXPct * fRedPct[1]   + (1.0f - fXPct) * fRedPct[0])) +
				   (fYPct          * (fXPct * fRedPct[3]   + (1.0f - fXPct) * fRedPct[2]));
			fGreen = ((1.0f - fYPct) * (fXPct * fGreenPct[1] + (1.0f - fXPct) * fGreenPct[0])) +
				   (fYPct            * (fXPct * fGreenPct[3] + (1.0f - fXPct) * fGreenPct[2]));				   
			fBlue = ((1.0f - fYPct) * (fXPct * fBluePct[1]  + (1.0f - fXPct) * fBluePct[0])) +
				   (fYPct           * (fXPct * fBluePct[3]  + (1.0f - fXPct) * fBluePct[2]));				   
			fAlpha = ((1.0f - fYPct)* (fXPct * fAlphaPct[1] + (1.0f - fXPct) * fAlphaPct[0])) +
				   (fYPct           * (fXPct * fAlphaPct[3] + (1.0f - fXPct) * fAlphaPct[2]));				   

			// Plug the color into our data
            pdwPixel[x + y * (d3dlr.Pitch / 4)] = RGBA_MAKE(CIL_MAKEDWORD(fRed),CIL_MAKEDWORD(fGreen),CIL_MAKEDWORD(fBlue),CIL_MAKEDWORD(fAlpha));
        }
    }

    hr = pd3dt->UnlockRect(0);
    if (ResultFailed(hr, TEXT("IDirect3DTexture8::UnlockRect"))) {
        ReleaseTexture(pd3dt);
        return NULL;
    }

#ifndef UNDER_XBOX
    if (fmt != D3DFMT_A8R8G8B8) {
#else
    if (fmt != D3DFMT_LIN_A8R8G8B8) {
#endif // UNDER_XBOX

        CTexture8* pd3dt2;
        pd3dt2 = (CTexture8*)CreateTexture(pDevice, dwWidth, dwHeight, fmt);
        if (!pd3dt2) {
            ReleaseTexture(pd3dt);
            return NULL;
        }

        hr = CopyTexture(pd3dt2, NULL, pd3dt, NULL, D3DX_FILTER_NONE);

        ReleaseTexture(pd3dt);

        if (FAILED(hr)) {
            ReleaseTexture(pd3dt2);
            return NULL;
        }

        pd3dt = pd3dt2;
    }

    return pd3dt;
}

//******************************************************************************
CVolumeTexture8* CreateGradientVolumeTexture(CDevice8* pDevice, DWORD dwWidth, DWORD dwHeight, 
                            DWORD dwDepth, DWORD* dwColors, DWORD dwColorStride, D3DFORMAT fmt)
{
    CVolumeTexture8* pd3dt;
    D3DLOCKED_BOX    d3dlb;
    LPDWORD          pdwPixel;
    UINT             x, y, z;
    HRESULT          hr;
#ifdef UNDER_XBOX
    Swizzler         swz(dwWidth, dwHeight, dwDepth);
#endif

	// Interpolants
	float fRed, fGreen, fBlue, fAlpha;
	float fRedPct[4], fGreenPct[4], fBluePct[4], fAlphaPct[4];

    pd3dt = (CVolumeTexture8*)CreateTexture(pDevice, dwWidth, dwHeight, dwDepth, D3DFMT_A8R8G8B8, TTYPE_VOLUME);
    if (!pd3dt) {
        return NULL;
    }

    hr = pd3dt->LockBox(0, &d3dlb, NULL, 0);
    if (ResultFailed(hr, TEXT("IDirect3DVolumeTexture8::LockRect"))) {
        ReleaseTexture(pd3dt);
        return NULL;
    }

    pdwPixel = (LPDWORD)d3dlb.pBits;

    for (x = 0; x < dwWidth; x++) {

        for (y = 0; y < dwHeight; y++) {

            for (z = 0; z < dwDepth; z++) {

                float fXPct, fYPct;

	            for(int i=0; i<4; i++)
	            {
		            fRedPct[i] = CIL_MAKEPCT(CIL_RED(dwColors[i + z * dwColorStride]));
		            fGreenPct[i] = CIL_MAKEPCT(CIL_GREEN(dwColors[i + z * dwColorStride]));
		            fBluePct[i] = CIL_MAKEPCT(CIL_BLUE(dwColors[i + z * dwColorStride]));
		            fAlphaPct[i] = CIL_MAKEPCT(CIL_ALPHA(dwColors[i + z * dwColorStride]));
	            }

                if(dwWidth > 1)
                    fXPct = (float)x/(float)(dwWidth - 1);
                else
                    fXPct = 0;
                if(dwHeight > 1)
                    fYPct = (float)y/(float)(dwHeight - 1);
                else
                    fYPct = 0;
			    
			    fRed = ((1.0f - fYPct) * (fXPct * fRedPct[1]   + (1.0f - fXPct) * fRedPct[0])) +
				       (fYPct          * (fXPct * fRedPct[3]   + (1.0f - fXPct) * fRedPct[2]));
			    fGreen = ((1.0f - fYPct) * (fXPct * fGreenPct[1] + (1.0f - fXPct) * fGreenPct[0])) +
				       (fYPct            * (fXPct * fGreenPct[3] + (1.0f - fXPct) * fGreenPct[2]));				   
			    fBlue = ((1.0f - fYPct) * (fXPct * fBluePct[1]  + (1.0f - fXPct) * fBluePct[0])) +
				       (fYPct           * (fXPct * fBluePct[3]  + (1.0f - fXPct) * fBluePct[2]));				   
			    fAlpha = ((1.0f - fYPct)* (fXPct * fAlphaPct[1] + (1.0f - fXPct) * fAlphaPct[0])) +
				       (fYPct           * (fXPct * fAlphaPct[3] + (1.0f - fXPct) * fAlphaPct[2]));				   

			    // Plug the color into our data
#ifndef UNDER_XBOX
                pdwPixel[x + y * (d3dlb.RowPitch >> 2) + z * (d3dlb.SlicePitch >> 2)] = RGBA_MAKE(CIL_MAKEDWORD(fRed),CIL_MAKEDWORD(fGreen),CIL_MAKEDWORD(fBlue),CIL_MAKEDWORD(fAlpha));
#else
                pdwPixel[swz.SwizzleU(x) | swz.SwizzleV(y) | swz.SwizzleW(z)] = RGBA_MAKE(CIL_MAKEDWORD(fRed),CIL_MAKEDWORD(fGreen),CIL_MAKEDWORD(fBlue),CIL_MAKEDWORD(fAlpha));
#endif // UNDER_XBOX
            }
        }
    }

    hr = pd3dt->UnlockBox(0);
    if (ResultFailed(hr, TEXT("IDirect3DVolumeTexture8::UnlockRect"))) {
        ReleaseTexture(pd3dt);
        return NULL;
    }

    if (fmt != D3DFMT_A8R8G8B8) {

        CVolumeTexture8* pd3dt2;
        pd3dt2 = (CVolumeTexture8*)CreateTexture(pDevice, dwWidth, dwHeight, dwDepth, fmt, TTYPE_VOLUME);
        if (!pd3dt2) {
            ReleaseTexture(pd3dt);
            return NULL;
        }

        hr = CopyTexture(pd3dt2, NULL, pd3dt, NULL, D3DX_FILTER_NONE);

        ReleaseTexture(pd3dt);

        if (FAILED(hr)) {
            ReleaseTexture(pd3dt2);
            return NULL;
        }

        pd3dt = pd3dt2;
    }

    return pd3dt;
}

//******************************************************************************
CTexture8* CreateStripedTexture(CDevice8* pDevice, DWORD dwWidth, DWORD dwHeight, 
                            DWORD dwStripes, DWORD dwColorArray[], bool bHorizontal,
                            bool bDiagonal, D3DFORMAT fmt)
{
    CTexture8*      pd3dt;
    D3DLOCKED_RECT  d3dlr;
    LPDWORD         pdwPixel;
	DWORD           dwStripeWidth;
    UINT            x, y;
    HRESULT         hr;

    if (dwWidth == 0)
        dwWidth = 1;
    if (dwHeight == 0)
        dwHeight = 1;

	if(true == bHorizontal)
		dwStripeWidth = dwWidth / dwStripes;
	else
		dwStripeWidth = dwHeight / dwStripes;

	if(dwStripeWidth < 1)
		dwStripeWidth = 1;

#ifndef UNDER_XBOX
    pd3dt = (CTexture8*)CreateTexture(pDevice, dwWidth, dwHeight, D3DFMT_A8R8G8B8);
#else
    pd3dt = (CTexture8*)CreateTexture(pDevice, dwWidth, dwHeight, D3DFMT_LIN_A8R8G8B8);
#endif // UNDER_XBOX
    if (!pd3dt) {
        return NULL;
    }

    hr = pd3dt->LockRect(0, &d3dlr, NULL, 0);
    if (ResultFailed(hr, TEXT("IDirect3DTexture8::LockRect"))) {
        ReleaseTexture(pd3dt);
        return NULL;
    }

    pdwPixel = (LPDWORD)d3dlr.pBits;

    for (x = 0; x < dwWidth; x++) {

        for (y = 0; y < dwHeight; y++) {

			// Determine which color we will be using.
			DWORD dwStripe;

			if(true == bHorizontal)
                if(true == bDiagonal)
                    dwStripe = (x + y) / dwStripeWidth;
                else
                    dwStripe = x / dwStripeWidth;
			else
                if(true == bDiagonal)
                    dwStripe = (y + x) / dwStripeWidth;
                else
                    dwStripe = y / dwStripeWidth;

			// Plug the color into our data
            pdwPixel[x + y * (d3dlr.Pitch / 4)] = dwColorArray[dwStripe % dwStripes];
        }
    }

    hr = pd3dt->UnlockRect(0);
    if (ResultFailed(hr, TEXT("IDirect3DTexture8::UnlockRect"))) {
        ReleaseTexture(pd3dt);
        return NULL;
    }

#ifndef UNDER_XBOX
    if (fmt != D3DFMT_A8R8G8B8) {
#else
    if (fmt != D3DFMT_LIN_A8R8G8B8) {
#endif // UNDER_XBOX

        CTexture8* pd3dt2;
        pd3dt2 = (CTexture8*)CreateTexture(pDevice, dwWidth, dwHeight, fmt);
        if (!pd3dt2) {
            ReleaseTexture(pd3dt);
            return NULL;
        }

        hr = CopyTexture(pd3dt2, NULL, pd3dt, NULL, D3DX_FILTER_NONE);

        ReleaseTexture(pd3dt);

        if (FAILED(hr)) {
            ReleaseTexture(pd3dt2);
            return NULL;
        }

        pd3dt = pd3dt2;
    }

    return pd3dt;
}

//******************************************************************************
CVolumeTexture8* CreateStripedVolumeTexture(CDevice8* pDevice, DWORD dwWidth, DWORD dwHeight, 
                            DWORD dwDepth, DWORD dwStripes, DWORD dwColorArray[], DWORD dwArrayStride, 
                            bool bHorizontal, bool bDiagonal, D3DFORMAT fmt)
{
    CVolumeTexture8* pd3dt;
    D3DLOCKED_BOX    d3dlb;
    LPDWORD          pdwPixel;
	DWORD            dwStripeWidth;
    UINT             x, y, z;
    HRESULT          hr;
#ifdef UNDER_XBOX
    Swizzler         swz(dwWidth, dwHeight, dwDepth);
#endif

    if (dwWidth == 0)
        dwWidth = 1;
    if (dwHeight == 0)
        dwHeight = 1;
    if (dwDepth == 0)
        dwDepth = 1;

	if(true == bHorizontal)
		dwStripeWidth = dwWidth / dwStripes;
	else
		dwStripeWidth = dwHeight / dwStripes;

	if(dwStripeWidth < 1)
		dwStripeWidth = 1;

    pd3dt = (CVolumeTexture8*)CreateTexture(pDevice, dwWidth, dwHeight, dwDepth, D3DFMT_A8R8G8B8, TTYPE_VOLUME);
    if (!pd3dt) {
        return NULL;
    }

    hr = pd3dt->LockBox(0, &d3dlb, NULL, 0);
    if (ResultFailed(hr, TEXT("IDirect3DVolumeTexture8::LockRect"))) {
        ReleaseTexture(pd3dt);
        return NULL;
    }

    pdwPixel = (LPDWORD)d3dlb.pBits;

    for (x = 0; x < dwWidth; x++) {

        for (y = 0; y < dwHeight; y++) {

			// Determine which color we will be using.
			DWORD dwStripe;

			if(true == bHorizontal)
                if(true == bDiagonal)
                    dwStripe = (x + y) / dwStripeWidth;
                else
                    dwStripe = x / dwStripeWidth;
			else
                if(true == bDiagonal)
                    dwStripe = (y + x) / dwStripeWidth;
                else
                    dwStripe = y / dwStripeWidth;

            for (z = 0; z < dwDepth; z++) {

			    // Plug the color into our data
#ifndef UNDER_XBOX
                pdwPixel[x + y * (d3dlb.RowPitch >> 2) + z * (d3dlb.SlicePitch >> 2)] = dwColorArray[(dwStripe % dwStripes) + z * dwArrayStride];
#else
                pdwPixel[swz.SwizzleU(x) | swz.SwizzleV(y) | swz.SwizzleW(z)] = dwColorArray[(dwStripe % dwStripes) + z * dwArrayStride];
#endif // UNDER_XBOX
            }
        }
    }

    hr = pd3dt->UnlockBox(0);
    if (ResultFailed(hr, TEXT("IDirect3DVolumeTexture8::UnlockRect"))) {
        ReleaseTexture(pd3dt);
        return NULL;
    }

    if (fmt != D3DFMT_A8R8G8B8) {

        CVolumeTexture8* pd3dt2;
        pd3dt2 = (CVolumeTexture8*)CreateTexture(pDevice, dwWidth, dwHeight, dwDepth, fmt, TTYPE_VOLUME);
        if (!pd3dt2) {
            ReleaseTexture(pd3dt);
            return NULL;
        }

        hr = CopyTexture(pd3dt2, NULL, pd3dt, NULL, D3DX_FILTER_NONE);

        ReleaseTexture(pd3dt);

        if (FAILED(hr)) {
            ReleaseTexture(pd3dt2);
            return NULL;
        }

        pd3dt = pd3dt2;
    }

    return pd3dt;
}

//******************************************************************************
CTexture8* CreateChannelDataTexture(CDevice8* pDevice, DWORD dwWidth, DWORD dwHeight, PCHANNELDATA pData, D3DFORMAT fmt)
{
    CTexture8*      pd3dt;
    D3DLOCKED_RECT  d3dlr;
    LPDWORD         pdwPixel;
    FLOAT           u, v;
    FLOAT           fDelta[2];
    FLOAT           fChannel[4];
    UINT            i, j;
    BYTE            a, r, g, b;
    BOOL            bBump;
    HRESULT         hr;
#ifdef UNDER_XBOX
    Swizzler        swz(dwWidth, dwHeight, 1);
#endif

    if (!pData)
    {
        return NULL;
    }

    bBump = (fmt == D3DFMT_V8U8 || fmt == D3DFMT_Q8W8V8U8 || fmt == D3DFMT_V16U16 || fmt == D3DFMT_W11V11U10 || fmt == D3DFMT_L6V5U5 || fmt == D3DFMT_X8L8V8U8);

    if (bBump) {
        pd3dt = (CTexture8*)CreateTexture(pDevice, dwWidth, dwHeight, D3DFMT_X8L8V8U8);
    }
    else {
        pd3dt = (CTexture8*)CreateTexture(pDevice, dwWidth, dwHeight, D3DFMT_A8R8G8B8);
    }
    if (!pd3dt) {
        return NULL;
    }

#ifdef UNDER_XBOX
    swz.SetU(0);
    swz.SetV(0);
#endif

    hr = pd3dt->LockRect(0, &d3dlr, NULL, 0);
    if (ResultFailed(hr, TEXT("IDirect3DTexture8::LockRect"))) {
        ReleaseTexture(pd3dt);
        return NULL;
    }

    pdwPixel = (LPDWORD)d3dlr.pBits;

    fDelta[0] = (FLOAT) 1.0 / (FLOAT) (dwWidth - 1);
    fDelta[1] = (FLOAT) 1.0 / (FLOAT) (dwHeight - 1); 

    for (v = 1.0f, j = 0; j < dwHeight; j++, v -= fDelta[1])
    {
        for (u = 0.0f, i = 0; i < dwWidth; i++, u += fDelta[0])
        {
            fChannel[ALPHA_CHANNEL] = (pData->fAlpha) ? pData->fAlpha(u, v) : 0.0f;       
            fChannel[  RED_CHANNEL] = (pData->fRed)   ? pData->fRed(u, v) : 0.0f;       
            fChannel[GREEN_CHANNEL] = (pData->fGreen) ? pData->fGreen(u, v) : 0.0f;       
            fChannel[ BLUE_CHANNEL] = (pData->fBlue)  ? pData->fBlue(u, v) : 0.0f;       

            if (pData->dwAlpha & CIL_UNSIGNED)
                a = (BYTE)(UINT8) ((fChannel[ALPHA_CHANNEL] + 1.0)*127.5);
            else
                a = (BYTE)(INT8) (fChannel[ALPHA_CHANNEL]*127.0);

            if (pData->dwRed & CIL_UNSIGNED)
                r = (BYTE)(UINT8) ((fChannel[RED_CHANNEL] + 1.0)*127.5);
            else
                r = (BYTE)(INT8) (fChannel[RED_CHANNEL]*127.0);

            if (pData->dwGreen & CIL_UNSIGNED)
                g = (BYTE)(UINT8) ((fChannel[GREEN_CHANNEL] + 1.0)*127.5);
            else
                g = (BYTE)(INT8) (fChannel[GREEN_CHANNEL]*127.0);

            if (pData->dwBlue & CIL_UNSIGNED)
                b = (BYTE)(UINT8) ((fChannel[BLUE_CHANNEL] + 1.0)*127.5);
            else
                b = (BYTE)(INT8) (fChannel[BLUE_CHANNEL]*127.0);

#ifndef UNDER_XBOX
            if (bBump) {
                pdwPixel[i] = b << 16 | g << 8 | r;
            }
            else {
                pdwPixel[i] = a << 24 | r << 16 | g << 8 | b;
            }
#else
            if (bBump) {
                pdwPixel[swz.Get2D()] = b << 16 | g << 8 | r;
            }
            else {
                pdwPixel[swz.Get2D()] = a << 24 | r << 16 | g << 8 | b;
            }
            swz.IncU();
#endif // UNDER_XBOX
        }
#ifndef UNDER_XBOX
        pdwPixel += d3dlr.Pitch / 4;
#else
        swz.IncV();
#endif // UNDER_XBOX
    }

    hr = pd3dt->UnlockRect(0);
    if (ResultFailed(hr, TEXT("IDirect3DTexture8::UnlockRect"))) {
        ReleaseTexture(pd3dt);
        return NULL;
    }

    if ((bBump && fmt != D3DFMT_X8L8V8U8) || (!bBump && fmt != D3DFMT_A8R8G8B8)) {

        CTexture8* pd3dt2;
        pd3dt2 = (CTexture8*)CreateTexture(pDevice, dwWidth, dwHeight, fmt);
        if (!pd3dt2) {
            ReleaseTexture(pd3dt);
            return NULL;
        }

        hr = CopyTexture(pd3dt2, NULL, pd3dt, NULL, D3DX_FILTER_NONE);

        ReleaseTexture(pd3dt);

        if (FAILED(hr)) {
            ReleaseTexture(pd3dt2);
            return NULL;
        }

        pd3dt = pd3dt2;
    }

    return pd3dt;
}

// ----------------------------------------------------------------------------

void SetVertex(D3DVERTEX *lpVrt,
               float x, float y, float z,
               float nx, float ny, float nz)
{
    // set homogeneous coordinates
    //    These describe the location of the vertex in "model" coordinates.
    lpVrt->x = D3DVAL(x);  
    lpVrt->y = D3DVAL(y);  
    lpVrt->z = D3DVAL(z);  

    // set normal coordinates
    //    These describe a vector determining which way the vertex is
    //    facing, used by the lighting module.
    lpVrt->nx = D3DVAL(nx);            
    lpVrt->ny = D3DVAL(ny);           
    lpVrt->nz = D3DVAL(nz);

    // set texture coordinates
    lpVrt->tu = D3DVAL(0.0);
    lpVrt->tv = D3DVAL(0.0);
}

// ----------------------------------------------------------------------------

void SetVertex(D3DTLVERTEX *lpVrt, float x, float y, float z)
{
    // set coordinates
    //    These describe the location of the vertex in screen coordinates.
    lpVrt->sx = D3DVAL(x);
    lpVrt->sy = D3DVAL(y);
    lpVrt->sz = D3DVAL(z);

    // protect against a divide be zero fault for rhw.
    if (z == 0.0f)
        z = 0.00001f;

    // set homogeneous W value
    lpVrt->rhw = D3DVAL(1.0/z);
//  lpVrt->rhw = D3DVAL(z);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dbase\vibuffer.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    vibuffer.cpp

Author:

    Matt Bronder

Description:

    Direct3D vertex and index buffer routines.

*******************************************************************************/

#include "d3dbase.h"

//******************************************************************************
// Structures
//******************************************************************************

typedef struct _VERTEXBUFFERDESC {
    LPDIRECT3DVERTEXBUFFER8     pd3dr;
    UINT                        uSize;
    DWORD                       dwFVF;
    DWORD                       dwUsage;
    D3DPOOL                     pool;
    struct _VERTEXBUFFERDESC*   pvbdNext;
} VERTEXBUFFERDESC, *PVERTEXBUFFERDESC;

typedef struct _INDEXBUFFERDESC {
    LPDIRECT3DINDEXBUFFER8      pd3di;
    UINT                        uSize;
    DWORD                       dwUsage;
    D3DPOOL                     pool;
    D3DFORMAT                   fmt;
    struct _INDEXBUFFERDESC*   pibdNext;
} INDEXBUFFERDESC, *PINDEXBUFFERDESC;

//******************************************************************************
// Globals
//******************************************************************************

PVERTEXBUFFERDESC               g_pvbdList = NULL;
PINDEXBUFFERDESC                g_pibdList = NULL;

//******************************************************************************
// Vertex buffer functions
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     CreateVertexBuffer
//
// Description:
//
//     Create a vertex buffer object of the given size, format, and usage and
//     populate it with the given vertices.  The size of the vertex list must
//     be at least as large as the buffer being created.
//
// Arguments:
//
//     LPDIRECT3DDEVICE8 pDevice            - Pointer to the device object
//
//     LPVOID pvVertices                    - Vertex list to store in the buffer
//
//     UINT uSize                           - Size of the vertex buffer
//
//     DWORD dwUsage                        - Resource usage for the vertex
//                                            buffer
//
//     DWORD dwFVF                          - Format of the vertex buffer
//
//     D3DPOOL pool                         - Memory pool in which to create the
//                                            vertex buffer
//
// Return Value:
//
//     A pointer to the created vertex buffer object on success, NULL on 
//     failure.
//
//******************************************************************************
LPDIRECT3DVERTEXBUFFER8 CreateVertexBuffer(LPDIRECT3DDEVICE8 pDevice, 
                                           LPVOID pvVertices, 
                                           UINT uSize, DWORD dwUsage, 
                                           DWORD dwFVF, D3DPOOL pool) 
{
    LPDIRECT3DVERTEXBUFFER8 pd3dr;
    PVERTEXBUFFERDESC       pvbdNode;
    LPBYTE                  pData;
    HRESULT                 hr;

    hr = pDevice->CreateVertexBuffer(uSize, dwUsage, dwFVF, pool, &pd3dr);
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DDevice8::CreateVertexBuffer"));
        return NULL;
    }

    if (pvVertices) {

        hr = pd3dr->Lock(0, uSize, &pData, 0);
        if (FAILED(hr)) {
            ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Lock"));
            pd3dr->Release();
            return NULL;
        }

        memcpy(pData, pvVertices, uSize);

        hr = pd3dr->Unlock();
        if (FAILED(hr)) {
            ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Unlock"));
            pd3dr->Release();
            return NULL;
        }
    }

    // Add the buffer to the vertex buffer list
    pvbdNode = (PVERTEXBUFFERDESC)MemAlloc(sizeof(VERTEXBUFFERDESC));
    if (!pvbdNode) {
        pd3dr->Release();
        return NULL;
    }
    memset(pvbdNode, 0, sizeof(VERTEXBUFFERDESC));
    pvbdNode->pd3dr = pd3dr;
    pvbdNode->uSize = uSize;
    pvbdNode->dwFVF = dwFVF;
    pvbdNode->dwUsage = dwUsage;
    pvbdNode->pool = pool;
    pvbdNode->pvbdNext = g_pvbdList;
    g_pvbdList = pvbdNode;

    return pd3dr;
}

//******************************************************************************
//
// Function:
//
//     ReleaseVertexBuffer
//
// Description:
//
//     Release the given vertex buffer object and remove it from the vertex
//     buffer table.
//
// Arguments:
//
//     LPDIRECT3DVERTEXBUFFER8 pd3dr            - Pointer to the buffer object
//
// Return Value:
//
//     None.
//
//******************************************************************************
void ReleaseVertexBuffer(LPDIRECT3DVERTEXBUFFER8 pd3dr) {

    PVERTEXBUFFERDESC   pvbd, pvbdDel;
#if defined(DEBUG) || defined(_DEBUG)
    UINT                uRef;
#endif

    if (!pd3dr) {
        return;
    }

    if (g_pvbdList) {

        if (g_pvbdList->pd3dr == pd3dr) {
            pvbd = g_pvbdList->pvbdNext;
            MemFree(g_pvbdList);
            g_pvbdList = pvbd;
        }

        else {

            for (pvbd = g_pvbdList; 
                 pvbd->pvbdNext && pvbd->pvbdNext->pd3dr != pd3dr; 
                 pvbd = pvbd->pvbdNext
            );

            if (pvbd->pvbdNext) {
                pvbdDel = pvbd->pvbdNext;
                pvbd->pvbdNext = pvbdDel->pvbdNext;
                MemFree(pvbdDel);
            }
        }
    }

#if defined(DEBUG) || defined(_DEBUG)
    uRef = pd3dr->Release();
    if (uRef != 0) {
        DebugString(TEXT("WARNING: Vertex buffer has a ref count of %d on release"), uRef);
    }
#else
    pd3dr->Release();
#endif
}

//******************************************************************************
//
// Function:
//
//     ReleaseVertexBuffers
//
// Description:
//
//     Release all vertex buffers.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void ReleaseVertexBuffers() {

    while (g_pvbdList) {
        ReleaseVertexBuffer(g_pvbdList->pd3dr);
    }
}

//******************************************************************************
//
// Function:
//
//     RemoveVertexBuffer
//
// Description:
//
//     Remove the given vertex buffer from the vertex buffer table (if present)
//
// Arguments:
//
//     LPDIRECT3DVERTEXBUFFER8 pd3dr           - Pointer to the buffer object
//
// Return Value:
//
//     None.
//
//******************************************************************************
void RemoveVertexBuffer(LPDIRECT3DVERTEXBUFFER8 pd3dr) {

    PVERTEXBUFFERDESC   pvbd, pvbdDel;

    if (!pd3dr) {
        return;
    }

    if (g_pvbdList) {

        if (g_pvbdList->pd3dr == pd3dr) {
            pvbd = g_pvbdList->pvbdNext;
            MemFree(g_pvbdList);
            g_pvbdList = pvbd;
        }

        else {

            for (pvbd = g_pvbdList; 
                 pvbd->pvbdNext && pvbd->pvbdNext->pd3dr != pd3dr; 
                 pvbd = pvbd->pvbdNext
            );

            if (pvbd->pvbdNext) {
                pvbdDel = pvbd->pvbdNext;
                pvbd->pvbdNext = pvbdDel->pvbdNext;
                MemFree(pvbdDel);
            }
        }
    }
}

//******************************************************************************
// Index buffer functions
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     CreateIndexBuffer
//
// Description:
//
//     Create an index buffer object of the given size, format, and usage and
//     populate it with the given indices.  The size of the index list must
//     be at least as large as the buffer being created.
//
// Arguments:
//
//     LPDIRECT3DDEVICE8 pDevice            - Pointer to the device object
//
//     LPVOID pvIndices                     - Index list to store in the buffer
//
//     UINT uSize                           - Size of the index buffer
//
//     DWORD dwUsage                        - Resource usage for the index
//                                            buffer
//
//     D3DFORMAT fmt                        - Format of the index buffer
//
//     D3DPOOL pool                         - Memory pool in which to create the
//                                            index buffer
//
// Return Value:
//
//     A pointer to the created index buffer object on success, NULL on 
//     failure.
//
//******************************************************************************
LPDIRECT3DINDEXBUFFER8 CreateIndexBuffer(LPDIRECT3DDEVICE8 pDevice, 
                                         LPVOID pvIndices, 
                                         UINT uSize, DWORD dwUsage, 
                                         D3DFORMAT fmt, D3DPOOL pool)
{
    LPDIRECT3DINDEXBUFFER8  pd3di;
    PINDEXBUFFERDESC        pibdNode;
    LPBYTE                  pData;
    HRESULT                 hr;

    hr = pDevice->CreateIndexBuffer(uSize, dwUsage, fmt, pool, &pd3di);
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DDevice8::CreateIndexBuffer"));
        return NULL;
    }

    if (pvIndices) {

        hr = pd3di->Lock(0, uSize, &pData, 0);
        if (FAILED(hr)) {
            ResultFailed(hr, TEXT("IDirect3DIndexBuffer8::Lock"));
            pd3di->Release();
            return NULL;
        }

        memcpy(pData, pvIndices, uSize);

        hr = pd3di->Unlock();
        if (FAILED(hr)) {
            ResultFailed(hr, TEXT("IDirect3DIndexBuffer8::Unlock"));
            pd3di->Release();
            return NULL;
        }
    }

    // Add the buffer to the index buffer list
    pibdNode = (PINDEXBUFFERDESC)MemAlloc(sizeof(INDEXBUFFERDESC));
    if (!pibdNode) {
        pd3di->Release();
        return NULL;
    }
    memset(pibdNode, 0, sizeof(INDEXBUFFERDESC));
    pibdNode->pd3di = pd3di;
    pibdNode->uSize = uSize;
    pibdNode->dwUsage = dwUsage;
    pibdNode->pool = pool;
    pibdNode->fmt = fmt;
    pibdNode->pibdNext = g_pibdList;
    g_pibdList = pibdNode;

    return pd3di;
}

//******************************************************************************
//
// Function:
//
//     ReleaseIndexBuffer
//
// Description:
//
//     Release the given index buffer object and remove it from the index
//     buffer table.
//
// Arguments:
//
//     LPDIRECT3DINDEXBUFFER8 pd3di          - Pointer to the buffer object
//
// Return Value:
//
//     None.
//
//******************************************************************************
void ReleaseIndexBuffer(LPDIRECT3DINDEXBUFFER8 pd3di) {

    PINDEXBUFFERDESC    pibd, pibdDel;
#if defined(DEBUG) || defined(_DEBUG)
    UINT                uRef;
#endif

    if (!pd3di) {
        return;
    }

    if (g_pibdList) {

        if (g_pibdList->pd3di == pd3di) {
            pibd = g_pibdList->pibdNext;
            MemFree(g_pibdList);
            g_pibdList = pibd;
        }

        else {

            for (pibd = g_pibdList; 
                 pibd->pibdNext && pibd->pibdNext->pd3di != pd3di; 
                 pibd = pibd->pibdNext
            );

            if (pibd->pibdNext) {
                pibdDel = pibd->pibdNext;
                pibd->pibdNext = pibdDel->pibdNext;
                MemFree(pibdDel);
            }
        }
    }

#if defined(DEBUG) || defined(_DEBUG)
    uRef = pd3di->Release();
    if (uRef != 0) {
        DebugString(TEXT("WARNING: Index buffer has a ref count of %d on release"), uRef);
    }
#else
    pd3di->Release();
#endif
}

//******************************************************************************
//
// Function:
//
//     ReleaseIndexBuffers
//
// Description:
//
//     Release all index buffers.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void ReleaseIndexBuffers() {

    while (g_pibdList) {
        ReleaseIndexBuffer(g_pibdList->pd3di);
    }
}

//******************************************************************************
//
// Function:
//
//     RemoveVertexBuffer
//
// Description:
//
//     Remove the given vertex buffer from the vertex buffer table (if present)
//
// Arguments:
//
//     LPDIRECT3DINDEXBUFFER8 pd3di         - Pointer to the buffer object
//
// Return Value:
//
//     None.
//
//******************************************************************************
void RemoveIndexBuffer(LPDIRECT3DINDEXBUFFER8 pd3di) {

    PINDEXBUFFERDESC    pibd, pibdDel;

    if (!pd3di) {
        return;
    }

    if (g_pibdList) {

        if (g_pibdList->pd3di == pd3di) {
            pibd = g_pibdList->pibdNext;
            MemFree(g_pibdList);
            g_pibdList = pibd;
        }

        else {

            for (pibd = g_pibdList; 
                 pibd->pibdNext && pibd->pibdNext->pd3di != pd3di; 
                 pibd = pibd->pibdNext
            );

            if (pibd->pibdNext) {
                pibdDel = pibd->pibdNext;
                pibd->pibdNext = pibdDel->pibdNext;
                MemFree(pibdDel);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dbase\vpshader.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    vpshader.cpp

Author:

    Matt Bronder

Description:

    Direct3D vertex and pixel shader routines.

*******************************************************************************/

#include "d3dbase.h"

//******************************************************************************
// Vertex shader functions
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     CreateVertexShader
//
// Description:
//
//     Create a vertex shader using the given declaration, function, and
//     usage.  The given function is specified in shader source code in a
//     file or resource of the given name.
//
// Arguments:
//
//     LPDIRECT3DDEVICE8 pDevice            - Pointer to the device object
//
//     LPDWORD pdwDeclaration               - Shader declaration token array
//
//     LPCTSTR szFunction                   - Shader function source code
//
//     DWORD dwUsage                        - Usage controls
//
// Return Value:
//
//     A handle to the created vertex shader on success, INVALID_SHADER_HANDLE
//     on failure.
//
//******************************************************************************
DWORD CreateVertexShader(LPDIRECT3DDEVICE8 pDevice, LPDWORD pdwDeclaration,
                            LPCTSTR szFunction, DWORD dwUsage)
{
#ifndef UNDER_XBOX
    LPD3DXBUFFER    pxbufShader, pxbufErrors;
#else
    LPXGBUFFER      pxbufShader, pxbufErrors;
#endif // UNDER_XBOX
    LPVOID          pData;
    DWORD           dwSize;
    DWORD           dwHandle;
    HRESULT         hr;

    if (LoadResourceFile(szFunction, &pData, &dwSize)) {

#ifndef UNDER_XBOX
        hr = D3DXAssembleShader(pData, dwSize, 0, NULL, &pxbufShader, &pxbufErrors);
#else
        hr = AssembleShader("<memory>", pData, dwSize, 0, NULL, 
                            &pxbufShader, &pxbufErrors, NULL, NULL, NULL, NULL);
#endif // UNDER_XBOX

        UnloadResourceFile(szFunction);

        if (FAILED(hr)) {
            ResultFailed(hr, TEXT("AssembleShader"));
#ifndef UNICODE
            DebugString(TEXT("Assembly errors:\n%s"), (LPSTR)pxbufErrors->GetBufferPointer());
#else
            DebugString(TEXT("Assembly errors:\n%S"), (LPSTR)pxbufErrors->GetBufferPointer());
#endif
            pxbufErrors->Release();
            return INVALID_SHADER_HANDLE;
        }

        pxbufErrors->Release();

        hr = pDevice->CreateVertexShader(pdwDeclaration, (LPDWORD)pxbufShader->GetBufferPointer(), &dwHandle, dwUsage);
        if (ResultFailed(hr, TEXT("IDirect3DDevice8::CreateVertexShader"))) {
            pxbufShader->Release();
            return INVALID_SHADER_HANDLE;            
        }

        if (dwHandle == INVALID_SHADER_HANDLE) {

            hr = pDevice->CreateVertexShader(pdwDeclaration, (LPDWORD)pxbufShader->GetBufferPointer(), &dwHandle, dwUsage);

            pDevice->DeleteVertexShader(INVALID_SHADER_HANDLE);
            if (ResultFailed(hr, TEXT("IDirect3DDevice8::CreateVertexShader"))) {
                pxbufShader->Release();
                return INVALID_SHADER_HANDLE;
            }
        }

        pxbufShader->Release();
    }

    else {

        // Attempt to load the shader as a file
        HANDLE  hFile;
        DWORD   dwRead;
#ifdef UNDER_XBOX
        char    aszFunction[MAX_PATH];

        wcstombs(aszFunction, szFunction, MAX_PATH);
        hFile = CreateFile(aszFunction, GENERIC_READ, FILE_SHARE_READ, NULL, 
                           OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
#else
        hFile = CreateFile(szFunction, GENERIC_READ, FILE_SHARE_READ, NULL, 
                           OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
#endif // !UNDER_XBOX

        if (hFile == INVALID_HANDLE_VALUE) {
            DebugString(TEXT("Shader file %s not found"), szFunction);
            return INVALID_SHADER_HANDLE;
        }

        // Get the size of the file
        dwSize = GetFileSize(hFile, NULL);
        if (dwSize == 0xFFFFFFFF) {
            CloseHandle(hFile);
            return INVALID_SHADER_HANDLE;
        }

        // Allocate a buffer for the file data
        pData = MemAlloc(dwSize);
        if (!pData) {
            CloseHandle(hFile);
            return INVALID_SHADER_HANDLE;
        }                

        // Read the file into the buffer
        if (!ReadFile(hFile, pData, dwSize, &dwRead, NULL)
            || dwSize != dwRead)
        {
            MemFree(pData);
            CloseHandle(hFile);
            return INVALID_SHADER_HANDLE;
        }

        // Close the file
        CloseHandle(hFile);

#ifndef UNDER_XBOX
        hr = D3DXAssembleShader(pData, dwSize, 0, NULL, &pxbufShader, &pxbufErrors);
#else
        hr = AssembleShader("<memory>", pData, dwSize, 0, NULL, 
                            &pxbufShader, &pxbufErrors, NULL, NULL, NULL, NULL);
#endif // UNDER_XBOX
        MemFree(pData);
        if (FAILED(hr)) {
            ResultFailed(hr, TEXT("AssembleShader"));
#ifndef UNICODE
            DebugString(TEXT("Assembly errors:\n%s"), (LPSTR)pxbufErrors->GetBufferPointer());
#else
            DebugString(TEXT("Assembly errors:\n%S"), (LPSTR)pxbufErrors->GetBufferPointer());
#endif
            pxbufErrors->Release();
            return INVALID_SHADER_HANDLE;
        }

        pxbufErrors->Release();

        hr = pDevice->CreateVertexShader(pdwDeclaration, (LPDWORD)pxbufShader->GetBufferPointer(), &dwHandle, dwUsage);
        if (ResultFailed(hr, TEXT("IDirect3DDevice8::CreateVertexShader"))) {
            pxbufShader->Release();
            return INVALID_SHADER_HANDLE;            
        }

        if (dwHandle == INVALID_SHADER_HANDLE) {

            hr = pDevice->CreateVertexShader(pdwDeclaration, (LPDWORD)pxbufShader->GetBufferPointer(), &dwHandle, dwUsage);

            pDevice->DeleteVertexShader(INVALID_SHADER_HANDLE);

            if (ResultFailed(hr, TEXT("IDirect3DDevice8::CreateVertexShader"))) {
                pxbufShader->Release();
                return INVALID_SHADER_HANDLE;
            }
        }

        pxbufShader->Release();
    }

    return dwHandle;
}

//******************************************************************************
//
// Function:
//
//     ReleaseVertexShader
//
// Description:
//
//     Delete the vertex shader corresponding to the given handle.
//
// Arguments:
//
//     LPDIRECT3DDEVICE8 pDevice            - Pointer to the device object
//
//     DWORD dwHandle                       - Shader handle
//
// Return Value:
//
//     None.
//
//******************************************************************************
void ReleaseVertexShader(LPDIRECT3DDEVICE8 pDevice, DWORD dwHandle) {

    if (dwHandle != INVALID_SHADER_HANDLE) {
        pDevice->DeleteVertexShader(dwHandle);
    }
}

//******************************************************************************
// Pixel shader functions
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     CreatePixelShader
//
// Description:
//
//     Create a pixel shader using the given function.  The given function is 
//     specified in shader source code in a file or resource of the given name.
//
// Arguments:
//
//     LPDIRECT3DDEVICE8 pDevice            - Pointer to the device object
//
//     LPCTSTR szFunction                   - Shader function source code
//
// Return Value:
//
//     A handle to the created pixel shader on success, INVALID_SHADER_HANDLE
//     on failure.
//
//******************************************************************************
DWORD CreatePixelShader(LPDIRECT3DDEVICE8 pDevice, LPCTSTR szFunction) {

    DWORD           dwHandle;
#ifndef UNDER_XBOX
    LPD3DXBUFFER    pxbufShader, pxbufErrors;
#else
    LPXGBUFFER      pxbufShader, pxbufErrors;
#endif // UNDER_XBOX
    HRSRC           hrsrc;
    LPVOID          pData;
    DWORD           dwSize;
    HRESULT         hr;

    if (LoadResourceFile(szFunction, &pData, &dwSize)) {

#ifndef UNDER_XBOX
        hr = D3DXAssembleShader(pData, dwSize, 0, NULL, &pxbufShader, &pxbufErrors);
#else
        hr = AssembleShader("<memory>", pData, dwSize, 0, NULL, 
                            &pxbufShader, &pxbufErrors, NULL, NULL, NULL, NULL);
#endif // UNDER_XBOX

        UnloadResourceFile(szFunction);

        if (FAILED(hr)) {
            ResultFailed(hr, TEXT("AssembleShader"));
#ifndef UNICODE
            DebugString(TEXT("Assembly errors:\n%s"), (LPSTR)pxbufErrors->GetBufferPointer());
#else
            DebugString(TEXT("Assembly errors:\n%S"), (LPSTR)pxbufErrors->GetBufferPointer());
#endif
            pxbufErrors->Release();
            return INVALID_SHADER_HANDLE;
        }

        pxbufErrors->Release();

#ifndef UNDER_XBOX
        hr = pDevice->CreatePixelShader((LPDWORD)pxbufShader->GetBufferPointer(), &dwHandle);
#else
        hr = pDevice->CreatePixelShader((D3DPIXELSHADERDEF*)pxbufShader->GetBufferPointer(), &dwHandle);
#endif // UNDER_XBOX
        if (ResultFailed(hr, TEXT("IDirect3DDevice8::CreatePixelShader"))) {
            pxbufShader->Release();
            return INVALID_SHADER_HANDLE;            
        }

        if (dwHandle == INVALID_SHADER_HANDLE) {

#ifndef UNDER_XBOX
            hr = pDevice->CreatePixelShader((LPDWORD)pxbufShader->GetBufferPointer(), &dwHandle);
#else
            hr = pDevice->CreatePixelShader((D3DPIXELSHADERDEF*)pxbufShader->GetBufferPointer(), &dwHandle);
#endif // UNDER_XBOX

            pDevice->DeletePixelShader(INVALID_SHADER_HANDLE);

            if (ResultFailed(hr, TEXT("IDirect3DDevice8::CreatePixelShader"))) {
                pxbufShader->Release();
                return INVALID_SHADER_HANDLE;
            }
        }

        pxbufShader->Release();
    }

    else {

        // Attempt to load the shader as a file
        HANDLE  hFile;
        DWORD   dwRead;
#ifdef UNDER_XBOX
        char    aszFunction[MAX_PATH];

        wcstombs(aszFunction, szFunction, MAX_PATH);
        hFile = CreateFile(aszFunction, GENERIC_READ, FILE_SHARE_READ, NULL, 
                           OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
#else
        hFile = CreateFile(szFunction, GENERIC_READ, FILE_SHARE_READ, NULL, 
                           OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
#endif // !UNDER_XBOX

        if (hFile == INVALID_HANDLE_VALUE) {
            DebugString(TEXT("Shader file %s not found"), szFunction);
            return INVALID_SHADER_HANDLE;
        }

        // Get the size of the file
        dwSize = GetFileSize(hFile, NULL);
        if (dwSize == 0xFFFFFFFF) {
            CloseHandle(hFile);
            return INVALID_SHADER_HANDLE;
        }

        // Allocate a buffer for the file data
        pData = MemAlloc(dwSize);
        if (!pData) {
            CloseHandle(hFile);
            return INVALID_SHADER_HANDLE;
        }                

        // Read the file into the buffer
        if (!ReadFile(hFile, pData, dwSize, &dwRead, NULL)
            || dwSize != dwRead)
        {
            MemFree(pData);
            CloseHandle(hFile);
            return INVALID_SHADER_HANDLE;
        }

        // Close the file
        CloseHandle(hFile);

#ifndef UNDER_XBOX
        hr = D3DXAssembleShader(pData, dwSize, 0, NULL, &pxbufShader, &pxbufErrors);
#else
        hr = AssembleShader("<memory>", pData, dwSize, 0, NULL, 
                            &pxbufShader, &pxbufErrors, NULL, NULL, NULL, NULL);
#endif // UNDER_XBOX
        MemFree(pData);
        if (FAILED(hr)) {
            ResultFailed(hr, TEXT("AssembleShader"));
#ifndef UNICODE
            DebugString(TEXT("Assembly errors:\n%s"), (LPSTR)pxbufErrors->GetBufferPointer());
#else
            DebugString(TEXT("Assembly errors:\n%S"), (LPSTR)pxbufErrors->GetBufferPointer());
#endif
            pxbufErrors->Release();
            return INVALID_SHADER_HANDLE;
        }

        pxbufErrors->Release();

#ifndef UNDER_XBOX
        hr = pDevice->CreatePixelShader((LPDWORD)pxbufShader->GetBufferPointer(), &dwHandle);
#else
        hr = pDevice->CreatePixelShader((D3DPIXELSHADERDEF*)pxbufShader->GetBufferPointer(), &dwHandle);
#endif // UNDER_XBOX
        if (ResultFailed(hr, TEXT("IDirect3DDevice8::CreatePixelShader"))) {
            pxbufShader->Release();
            return INVALID_SHADER_HANDLE;            
        }

        if (dwHandle == INVALID_SHADER_HANDLE) {

#ifndef UNDER_XBOX
            hr = pDevice->CreatePixelShader((LPDWORD)pxbufShader->GetBufferPointer(), &dwHandle);
#else
            hr = pDevice->CreatePixelShader((D3DPIXELSHADERDEF*)pxbufShader->GetBufferPointer(), &dwHandle);
#endif // UNDER_XBOX

            pDevice->DeletePixelShader(INVALID_SHADER_HANDLE);

            if (ResultFailed(hr, TEXT("IDirect3DDevice8::CreatePixelShader"))) {
                pxbufShader->Release();
                return INVALID_SHADER_HANDLE;
            }
        }

        pxbufShader->Release();
    }

    return dwHandle;
}

//******************************************************************************
//
// Function:
//
//     ReleasePixelShader
//
// Description:
//
//     Delete the pixel shader corresponding to the given handle.
//
// Arguments:
//
//     LPDIRECT3DDEVICE8 pDevice            - Pointer to the device object
//
//     DWORD dwHandle                       - Shader handle
//
// Return Value:
//
//     None.
//
//******************************************************************************
void ReleasePixelShader(LPDIRECT3DDEVICE8 pDevice, DWORD dwHandle) {

    if (dwHandle != INVALID_SHADER_HANDLE) {
        pDevice->DeletePixelShader(dwHandle);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dfutil\3dmath\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=3dmath
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SOURCES=\
    3dmath.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dfutil\cshapes\box.cpp ===
//
//  Box.cpp
//
//  CShapes class routine for generating a triangle-list box.
//

#include "d3dlocus.h"
#include "..\..\..\inc\3DMath.h"
#include "..\..\..\inc\CShapes.h"

// ----------------------------------------------------------------------------

bool CShapes::GenerateBox()  // called by NewShape
{
	D3DVERTEX * pVertices;
	WORD *      pIndices;
	const int   nVertices = 24;
	const int   nIndices = 36;

	// define a basic cube, centered at the origin.
	D3DVERTEX VertexList[nVertices] = {
		//  x      y      z      Nx     Ny     Nz    u     v
		D3DVERTEX(cD3DVECTOR(  0.5f, -0.5f, -0.5f), cD3DVECTOR( 0.0f,  0.0f, -1.0f), 1.0f, 1.0f ), // face 1 (front)
		D3DVERTEX(cD3DVECTOR( -0.5f, -0.5f, -0.5f), cD3DVECTOR( 0.0f,  0.0f, -1.0f), 0.0f, 1.0f ),
		D3DVERTEX(cD3DVECTOR( -0.5f,  0.5f, -0.5f), cD3DVECTOR( 0.0f,  0.0f, -1.0f), 0.0f, 0.0f ),
		D3DVERTEX(cD3DVECTOR(  0.5f,  0.5f, -0.5f), cD3DVECTOR( 0.0f,  0.0f, -1.0f), 1.0f, 0.0f ),

		D3DVERTEX(cD3DVECTOR(  0.5f, -0.5f,  0.5f), cD3DVECTOR( 1.0f,  0.0f,  0.0f), 1.0f, 1.0f ), // face 2 (right)
		D3DVERTEX(cD3DVECTOR(  0.5f, -0.5f, -0.5f), cD3DVECTOR( 1.0f,  0.0f,  0.0f), 0.0f, 1.0f ),
		D3DVERTEX(cD3DVECTOR(  0.5f,  0.5f, -0.5f), cD3DVECTOR( 1.0f,  0.0f,  0.0f), 0.0f, 0.0f ),
		D3DVERTEX(cD3DVECTOR(  0.5f,  0.5f,  0.5f), cD3DVECTOR( 1.0f,  0.0f,  0.0f), 1.0f, 0.0f ),

		D3DVERTEX(cD3DVECTOR( -0.5f, -0.5f,  0.5f), cD3DVECTOR( 0.0f,  0.0f,  1.0f), 1.0f, 1.0f ), // face 3 (back)
		D3DVERTEX(cD3DVECTOR(  0.5f, -0.5f,  0.5f), cD3DVECTOR( 0.0f,  0.0f,  1.0f), 0.0f, 1.0f ),
		D3DVERTEX(cD3DVECTOR(  0.5f,  0.5f,  0.5f), cD3DVECTOR( 0.0f,  0.0f,  1.0f), 0.0f, 0.0f ),
		D3DVERTEX(cD3DVECTOR( -0.5f,  0.5f,  0.5f), cD3DVECTOR( 0.0f,  0.0f,  1.0f), 1.0f, 0.0f ),

		D3DVERTEX(cD3DVECTOR( -0.5f, -0.5f, -0.5f), cD3DVECTOR(-1.0f,  0.0f,  0.0f), 1.0f, 1.0f ), // face 4 (left)
		D3DVERTEX(cD3DVECTOR( -0.5f, -0.5f,  0.5f), cD3DVECTOR(-1.0f,  0.0f,  0.0f), 0.0f, 1.0f ),
		D3DVERTEX(cD3DVECTOR( -0.5f,  0.5f,  0.5f), cD3DVECTOR(-1.0f,  0.0f,  0.0f), 0.0f, 0.0f ),
		D3DVERTEX(cD3DVECTOR( -0.5f,  0.5f, -0.5f), cD3DVECTOR(-1.0f,  0.0f,  0.0f), 1.0f, 0.0f ),

		D3DVERTEX(cD3DVECTOR(  0.5f,  0.5f, -0.5f), cD3DVECTOR( 0.0f,  1.0f,  0.0f), 1.0f, 1.0f ), // face 5 (top)
		D3DVERTEX(cD3DVECTOR( -0.5f,  0.5f, -0.5f), cD3DVECTOR( 0.0f,  1.0f,  0.0f), 0.0f, 1.0f ),
		D3DVERTEX(cD3DVECTOR( -0.5f,  0.5f,  0.5f), cD3DVECTOR( 0.0f,  1.0f,  0.0f), 0.0f, 0.0f ),
		D3DVERTEX(cD3DVECTOR(  0.5f,  0.5f,  0.5f), cD3DVECTOR( 0.0f,  1.0f,  0.0f), 1.0f, 0.0f ),
		
		D3DVERTEX(cD3DVECTOR(  0.5f, -0.5f,  0.5f), cD3DVECTOR( 0.0f, -1.0f,  0.0f), 1.0f, 1.0f ), // face 6 (bottom)
		D3DVERTEX(cD3DVECTOR( -0.5f, -0.5f,  0.5f), cD3DVECTOR( 0.0f, -1.0f,  0.0f), 0.0f, 1.0f ),
		D3DVERTEX(cD3DVECTOR( -0.5f, -0.5f, -0.5f), cD3DVECTOR( 0.0f, -1.0f,  0.0f), 0.0f, 0.0f ),
		D3DVERTEX(cD3DVECTOR(  0.5f, -0.5f, -0.5f), cD3DVECTOR( 0.0f, -1.0f,  0.0f), 1.0f, 0.0f ),
	};

	WORD IndexList[nIndices] = {
		 0,  1,  2,  0,  2,  3,  // face 1
		 4,  5,  6,  4,  6,  7,  // face 2
		 8,  9, 10,  8, 10, 11,  // face 3
		12, 13, 14, 12, 14, 15,  // face 4
		16, 17, 18, 16, 18, 19,  // face 5
		20, 21, 22, 20, 22, 23,  // face 6
	};

	int i;

	// allocate the needed memory
	pVertices = (D3DVERTEX *)malloc(sizeof(D3DVERTEX) * nVertices);
    if (!pVertices) {
        return false;
    }
	pIndices = (WORD *)malloc(sizeof(WORD) * nIndices);
    if (!pIndices) {
        free(pVertices);
        return false;
    }

	//
	// set vertex data
	//
	for(i = 0; i < nVertices; i++)
	{
		pVertices[i].dvX = VertexList[i].dvX;
		pVertices[i].dvY = VertexList[i].dvY;
		pVertices[i].dvZ = VertexList[i].dvZ;
		pVertices[i].dvNX = VertexList[i].dvNX;
		pVertices[i].dvNY = VertexList[i].dvNY;
		pVertices[i].dvNZ = VertexList[i].dvNZ;
		pVertices[i].dvTU = VertexList[i].dvTU;
		pVertices[i].dvTV = VertexList[i].dvTV;
	}
	
	//
	// set index data
	//
	for(i = 0; i < nIndices; i++)
		pIndices[i] = IndexList[i];
	
	//
	// set class data
	//
	m_pVertices = pVertices;
	m_nVertices = nVertices;
	m_pIndices = pIndices;
	m_nIndices = nIndices;
	m_bWrapU = false;
	m_bWrapV = false;

	return true;
}

// ----------------------------------------------------------------------------
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dfutil\cshapes\cone.cpp ===
// Cone.cpp
//
//  CShapes class routine for generating a triangle-list cone.
//

#include "d3dlocus.h"
#include "..\..\..\inc\3DMath.h"
#include "..\..\..\inc\CShapes.h"

bool CShapes::GenerateCone(const int nDivisions)
{
	const float	pi = 3.1415926535f;
	const float fRadius = 0.5f;
	const float fTheta = 360.0f / nDivisions;

	const int   nVertices = (3 * nDivisions + 1);
	const int   nIndices = (6 * nDivisions); // 3*nDivisions (top) + 3*nDivisions (bottom) 
	D3DVERTEX * pVertices = NULL;
	WORD *      pIndices = NULL;
	
	float       fRads;

	int i, n;
	float fX, fZ, fU;
	D3DVECTOR Normal;

	// allocate memory for the vertices and indices
	pVertices = (D3DVERTEX *)malloc(sizeof(D3DVERTEX) * nVertices);
    if (!pVertices) {
        return false;
    }
	pIndices = (WORD *)malloc(sizeof(WORD) * nIndices);
    if (!pIndices) {
        free(pVertices);
        return false;
    }
	
	memset(pVertices, 0, sizeof(D3DVERTEX) * nVertices);
	memset(pIndices, 0, sizeof(WORD) * nIndices);

	// 
	// Set Vertex Data
	//
	
	// Initialize the bottom center point
	pVertices[nVertices - 1].dvX = 0.0f;
	pVertices[nVertices - 1].dvY = -0.5f;
	pVertices[nVertices - 1].dvZ = 0.0f;
	pVertices[nVertices - 1].dvNX = 0.0f;
	pVertices[nVertices - 1].dvNY = -1.0f;
	pVertices[nVertices - 1].dvNZ = 0.0f;
	pVertices[nVertices - 1].dvTU = 0.5f;
	pVertices[nVertices - 1].dvTV = 1.0f;

	// generate the cone vertices
	for (i=0; i < (nDivisions); i++)
	{
		// cos takes a radian value, so convert.
		fRads = (fTheta * (float)i * pi) / 180.0f;
		fX = (float)(fRadius * cos(fRads));
		fZ = (float)(fRadius * sin(fRads));
		fU = (float)(i+1) / (float)nDivisions;

		Normal = Normalize(cD3DVECTOR(fX, 0.5f, fZ));

		// top -- these are the same physical point, but
		// with normals facing outward.
		pVertices[i].dvX = 0.0f;
		pVertices[i].dvY = 0.5f;
		pVertices[i].dvZ = 0.0f;
		pVertices[i].dvNX = Normal.x;
		pVertices[i].dvNY = Normal.y;
		pVertices[i].dvNZ = Normal.z;
		pVertices[i].dvTU = fU;
		pVertices[i].dvTV = 0.0f;

		// bottom side
		pVertices[nDivisions + i].dvX = fX;
		pVertices[nDivisions + i].dvY = -0.5f;
		pVertices[nDivisions + i].dvZ = fZ;
		pVertices[nDivisions + i].dvNX = Normal.x;
		pVertices[nDivisions + i].dvNY = Normal.y;
		pVertices[nDivisions + i].dvNZ = Normal.z;
		pVertices[nDivisions + i].dvTU = fU;
		pVertices[nDivisions + i].dvTV = 0.75f;

		// bottom
		pVertices[(nDivisions * 2) + i].dvX = fX;
		pVertices[(nDivisions * 2) + i].dvY = -0.5f;
		pVertices[(nDivisions * 2) + i].dvZ = fZ;
		pVertices[(nDivisions * 2) + i].dvNX = 0.0f;
		pVertices[(nDivisions * 2) + i].dvNY = -1.0f;
		pVertices[(nDivisions * 2) + i].dvNZ = 0.0f;
		pVertices[(nDivisions * 2) + i].dvTU = fU;
		pVertices[(nDivisions * 2) + i].dvTV = 0.75f;
	}

	//
	// Set Index Data
	//
	n = 0;
	// top
	for(i = 0; i < nDivisions; i++)
	{
		pIndices[n] = (WORD)(nDivisions + i);
		pIndices[n+1] = (WORD)i;
		if(i < (nDivisions - 1))
			pIndices[n+2] = (WORD)(nDivisions + i + 1);
		else
			pIndices[n+2] = (WORD)nDivisions;  // the last index on the top.
		n += 3;
	}

	// bottom
	for(i = 0; i < nDivisions; i++)
	{
		if(i < (nDivisions - 1))
			pIndices[n] = (WORD)((nDivisions * 2) + i + 1);
		else
			pIndices[n] = (WORD)(nDivisions * 2);
		pIndices[n+1] = (WORD)(nVertices - 1);
		pIndices[n+2] = (WORD)((nDivisions * 2) + i);
		n += 3;
	}

	//
	// set class data
	//
	m_pVertices = pVertices;
	m_nVertices = nVertices;
	m_pIndices = pIndices;
	m_nIndices = nIndices;
	m_bWrapU = true;
	m_bWrapV = false;

	return true;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dfutil\3dmath\3dmath.cpp ===
#include <d3dlocus.h>
#include "..\..\..\inc\3DMath.h"

// ============================================================================
//
//  Functions
//
// ============================================================================

// ----------------------------------------------------------------------------
//  Name:       ZeroMatrix
//  Purpose:	sets D3D matrix to all 0's
// ----------------------------------------------------------------------------

D3DMATRIX ZeroMatrix(void)
{
    D3DMATRIX ret;
    ret._11 = 0.0f;
    ret._12 = 0.0f;
    ret._13 = 0.0f;
    ret._14 = 0.0f;
    ret._21 = 0.0f;
    ret._22 = 0.0f;
    ret._23 = 0.0f;
    ret._24 = 0.0f;
    ret._31 = 0.0f;
    ret._32 = 0.0f;
    ret._33 = 0.0f;
    ret._34 = 0.0f;
    ret._41 = 0.0f;
    ret._42 = 0.0f;
    ret._43 = 0.0f;
    ret._44 = 0.0f;
    return ret;
} // end ZeroMatrix

// ----------------------------------------------------------------------------
//  Name:       IdentityMatrix
//  Purpose:	sets D3D matrix to Identiy (1's on diagonal, zero's elsewhere)
// ----------------------------------------------------------------------------

D3DMATRIX IdentityMatrix(void)
{
    D3DMATRIX ret;
    ret._11 = 1.0f;
    ret._12 = 0.0f;
    ret._13 = 0.0f;
    ret._14 = 0.0f;
    ret._21 = 0.0f;
    ret._22 = 1.0f;
    ret._23 = 0.0f;
    ret._24 = 0.0f;
    ret._31 = 0.0f;
    ret._32 = 0.0f;
    ret._33 = 1.0f;
    ret._34 = 0.0f;
    ret._41 = 0.0f;
    ret._42 = 0.0f;
    ret._43 = 0.0f;
    ret._44 = 1.0f;
    return ret;
} // end IdentityMatrix
  
// ----------------------------------------------------------------------------
//  Name:       ProjectionMatrix
//  Purpose:	sets Projection matrix from fovy, aspect ratio, near and far planes
//  Notes:		
//		1. fovy		- field of view in Y direction in radians (for example pi/2)
//		2. aspect	- window_width / window_height
// ----------------------------------------------------------------------------

D3DMATRIX ProjectionMatrix(const float fovy, const float aspect, const float zNear, const float zFar) 
{
	float f = 1.f / (float)tan(fovy/2.f);

	D3DMATRIX ret = ZeroMatrix();
	ret._11 = f / aspect;
	ret._22 = f;
	ret._33 = (zFar)/(zFar-zNear);
	ret._34 = 1.f;
	ret._43 = zNear*zFar / (zNear - zFar);

	return ret;
} // end ProjectionMatrix


// ----------------------------------------------------------------------------
//  Name:       ProjectionMatrix
//  Purpose:	sets "shifted" projection matrix from left, right, bottom, top, near and far planes
// ----------------------------------------------------------------------------

D3DMATRIX ProjectionMatrix(const float left, const float right, const float bottom, const float top, const float zNear, const float zFar) 
{

	D3DMATRIX ret = ZeroMatrix();
	ret._11 = 2.f * zNear / (right - left);
	ret._22 = 2.f * zNear / (top - bottom);
	ret._31 = (right + left) / (left - right);
	ret._32 = (top + bottom) / (bottom - top);
	ret._33 = (zFar)/(zFar-zNear);
	ret._34 = 1.f;
	ret._43 = zNear*zFar / (zNear - zFar);

	return ret;
} // end ProjectionMatrix


// ----------------------------------------------------------------------------
//  Name:       ProjectionMatrix
//  Purpose:	sets Projection matrix from fov, near and far planes
// ----------------------------------------------------------------------------

D3DMATRIX ProjectionMatrix(const float near_plane, 
				 const float far_plane, 
				 const float fov)
{
	float	c, s, Q;

	c = (float) cos(fov*0.5);
	s = (float) sin(fov*0.5);
	Q = s/(1.0f - near_plane/far_plane);

    D3DMATRIX ret = ZeroMatrix();
    ret._11 = c;
    ret._22 = c;
	ret._33 = Q;
	ret._43 = -Q*near_plane;
    ret._34 = s;
    return ret;
}	// end ProjectionMatrix


// ----------------------------------------------------------------------------
//  Name:       OrthoMatrix
//  Purpose:	sets orthogonal projection matrix from width, height, near and far planes
// ----------------------------------------------------------------------------

D3DMATRIX OrthoMatrix(const float width, const float height, const float zNear, const float zFar)
{
	D3DMATRIX ret = IdentityMatrix();
	ret._11 = 2.f / width;
	ret._22 = 2.f / height;
	ret._33 = 1.f / (zFar - zNear);
	ret._43 = zNear / (zNear - zFar);
	return ret;
}

// ----------------------------------------------------------------------------
//  Name:       OrthoMatrix
//  Purpose:	sets "shifted" orthogonal projection matrix from left, right, bottom, top, near and far planes
// ----------------------------------------------------------------------------

D3DMATRIX OrthoMatrix(const float left, const float right, const float bottom, const float top, const float zNear, const float zFar)
{
	D3DMATRIX ret = IdentityMatrix();
	ret._11 = 2.f / (right - left);
	ret._22 = 2.f / (top - bottom);
	ret._33 = 1.f / (zFar - zNear);
	ret._41 = (right + left) / (left - right);
	ret._42 = (top + bottom) / (bottom - top);
	ret._43 = zNear / (zNear - zFar);
	return ret;
}

// ----------------------------------------------------------------------------
//  Name:       ViewMatrix
//  Purpose:	Controls where the camara is.
//  Notes:		
//		1. Note the roll parameter is in radians and rools the viewpoint
//			around the viewing direction
// ----------------------------------------------------------------------------

D3DMATRIX ViewMatrix(const D3DVECTOR& from, 
		   const D3DVECTOR& at, 
		   const D3DVECTOR& world_up, 
		   const float roll)
{
    D3DMATRIX view = IdentityMatrix();
    D3DVECTOR up, right, view_dir;

    view_dir.x = at.x - from.x;
    view_dir.y = at.y - from.y;
    view_dir.z = at.z - from.z;
    view_dir = Normalize(view_dir);
	right = CrossProduct(world_up, view_dir);
	up = CrossProduct(view_dir, right);

	right = Normalize(right);
	up = Normalize(up);
	
    view._11 = right.x;
    view._21 = right.y;
    view._31 = right.z;
    view._12 = up.x;
    view._22 = up.y;
    view._32 = up.z;
    view._13 = view_dir.x;
    view._23 = view_dir.y;
    view._33 = view_dir.z;
	
    view._41 = -DotProduct(right, from);
    view._42 = -DotProduct(up, from);
    view._43 = -DotProduct(view_dir, from);

	// Set roll
	if (roll != 0.0f) {
		view = MatrixMult(RotateZMatrix(-roll), view);
	}

    return view;
} // end ViewMatrix

// ----------------------------------------------------------------------------
//  Name:       RotateXMatrix
//  Purpose:	Rotate matrix about X axis
// ----------------------------------------------------------------------------

D3DMATRIX RotateXMatrix(const float rads)
{
	float	cosine, sine;

	cosine = (float) cos(rads);
	sine = (float) sin(rads);
    D3DMATRIX ret = IdentityMatrix();
    ret._22 = cosine;
	ret._33 = cosine;
	ret._23 = -sine;
	ret._32 = sine;
    return ret;
} // end RotateXMatrix

// ----------------------------------------------------------------------------
//  Name:       RotateYMatrix
//  Purpose:	Rotate matrix about Y axis
// ----------------------------------------------------------------------------

D3DMATRIX RotateYMatrix(const float rads)
{
	float	cosine, sine;

	cosine = (float) cos(rads);
	sine = (float) sin(rads);
    D3DMATRIX ret = IdentityMatrix();
    ret._11 = cosine;
	ret._33 = cosine;
	ret._13 = sine;
	ret._31 = -sine;
    return ret;
} // end RotateY
  
// ----------------------------------------------------------------------------
//  Name:       RotateZMatrix
//  Purpose:	Rotate matrix about Z axis
// ----------------------------------------------------------------------------

D3DMATRIX RotateZMatrix(const float rads)
{
	float	cosine, sine;

	cosine = (float) cos(rads);
	sine = (float) sin(rads);
    D3DMATRIX ret = IdentityMatrix();
    ret._11 = cosine;
	ret._22 = cosine;
	ret._12 = -sine;
	ret._21 = sine;
    return ret;
} // end RotateZMatrix

// ----------------------------------------------------------------------------
//  Name:       TranslateMatrix
//  Purpose:    Returns matrix to translate by (dx, dy, dz)
// ----------------------------------------------------------------------------

D3DMATRIX TranslateMatrix(const float dx, const float dy, const float dz)
{
    D3DMATRIX ret = IdentityMatrix();
	ret._41 = dx;
	ret._42 = dy;
	ret._43 = dz;
	return ret;
} // end TranslateMatrix

// ----------------------------------------------------------------------------
//  Name:       TranslateMatrix
//  Purpose:    Returns matrix to translate by v
// ----------------------------------------------------------------------------

D3DMATRIX TranslateMatrix(const D3DVECTOR& v)
{
    D3DMATRIX ret = IdentityMatrix();
	ret._41 = v.x;
	ret._42 = v.y;
	ret._43 = v.z;
	return ret;
} // end TranslateMatrix

// ----------------------------------------------------------------------------
//  Name:       ScaleMatrix
//  Purpose:    scale matrix (uniform)
// ----------------------------------------------------------------------------

D3DMATRIX ScaleMatrix(const float size)
{
    D3DMATRIX ret = IdentityMatrix();
	ret._11 = size;
	ret._22 = size;
	ret._33 = size;
	return ret;
} // end ScaleMatrix
  
// ----------------------------------------------------------------------------
//  Name:       ScaleMatrix
//  Purpose:	scale matrix
// ----------------------------------------------------------------------------

D3DMATRIX ScaleMatrix(const float a, const float b, const float c)
{
    D3DMATRIX ret = IdentityMatrix();
	ret._11 = a;
	ret._22 = b;
	ret._33 = c;
	return ret;
} // end ScaleMatrix
  
// ----------------------------------------------------------------------------
//  Name:       ScaleMatrix
//  Purpose:	scale matrix
// ----------------------------------------------------------------------------

D3DMATRIX ScaleMatrix(const D3DVECTOR& v)
{
    D3DMATRIX ret = IdentityMatrix();
	ret._11 = v.x;
	ret._22 = v.y;
	ret._33 = v.z;
	return ret;
} // end ScaleMatrix

// ----------------------------------------------------------------------------
//  Name:       MatrixMult
//  Purpose:	[C] = [A] * [B]
// ----------------------------------------------------------------------------

D3DMATRIX MatrixMult(const D3DMATRIX & a, const D3DMATRIX & b)
{
	D3DMATRIX ret = ZeroMatrix();

	for (int i=0; i<4; i++) {
		for (int j=0; j<4; j++) {
			for (int k=0; k<4; k++) {
				*((float*)&ret + i * 4 + j) += *((float*)&a + k * 4 + j) * *((float*)&b + i * 4 + k);
			}
		}
	}
	return ret;
} // end MatrixMult


// ----------------------------------------------------------------------------
//  Name:       MatrixMult
//  Purpose:	[C] = [A] * scalar
// ----------------------------------------------------------------------------

D3DMATRIX MatrixMult(const D3DMATRIX & a, const float scalar)
{
	D3DMATRIX ret = ZeroMatrix();

	for (int i=0; i<4; i++) {
		for (int j=0; j<4; j++) {
				*((float*)&ret + i * 4 + j) += *((float*)&a + i * 4 + j) * scalar;
		}
	}
	return ret;
} // end MatrixMult


// ----------------------------------------------------------------------------
//  Name:       TransformVector
//  Purpose:	V' = V * [M]
// ----------------------------------------------------------------------------

D3DVECTOR TransformVector(const D3DVECTOR& v, const D3DMATRIX & m)
{
	float	hvec[4];

	for (int i=0; i<4; i++) {
		hvec[i] = 0.0f;
		for (int j=0; j<4; j++) {
			if (j==3) {
				hvec[i] += *((float*)&m + j * 4 + i);
			} else {
				hvec[i] += *((float*)&v + j) * *((float*)&m + j * 4 + i);
			}
		}
	}
	D3DVECTOR ret;
    
    ret.x = hvec[0]/hvec[3];
    ret.y = hvec[1]/hvec[3];
    ret.z = hvec[2]/hvec[3];

	return ret;
} // end TransformVector

// ----------------------------------------------------------------------------
//  Name:       TransformNormal
//  Purpose:	N' = N * [M]
// ----------------------------------------------------------------------------

D3DVECTOR TransformNormal(const D3DVECTOR& v, const D3DMATRIX & mat)
{
	D3DMATRIX	m;
	m = MatrixInverse(mat);
	m = MatrixTranspose(m);
	return Normalize(TransformVector(v, m));
	return TransformVector(v, m);
}  // end TransformNormal

// ----------------------------------------------------------------------------
//  Name:       MatrixInverse
//  Purpose:	Creates the inverse of a 4x4 matrix
// ----------------------------------------------------------------------------

static void	lubksb(D3DMATRIX & a, int *indx, float *b);
static void ludcmp(D3DMATRIX & a, int *indx, float *d);

D3DMATRIX MatrixInverse(const D3DMATRIX & m)
{
	D3DMATRIX	n, y;
	int			i, j, indx[4];
	float		d, col[4];

	n = m;
	ludcmp(n, indx, &d);

	for (j=0; j<4; j++) {
		for (i=0; i<4; i++) {
			col[i] = 0.0f;
		}
		col[j] = 1.0f;
		lubksb(n, indx, col);
		for (i=0; i<4; i++) {
			*((float*)&y + i * 4 + j) = col[i];
		}
	}
	return y;
} // end MatrixInverse

// ----------------------------------------------------------------------------
//  Name:       lubksb
//  Purpose:	backward subsitution
// ----------------------------------------------------------------------------

static void lubksb(D3DMATRIX & a, int *indx, float *b)
{
	int		i, j, ii=-1, ip;
	float	sum;

	for (i=0; i<4; i++) {
		ip = indx[i];
		sum = b[ip];
		b[ip] = b[i];
		if (ii>=0) {
			for (j=ii; j<=i-1; j++) {
				sum -= *((float*)&a + i * 4 + j) * b[j];
			}
		} else if (sum != 0.0) {
			ii = i;
		}
		b[i] = sum;
	}
	for (i=3; i>=0; i--) {
		sum = b[i];
		for (j=i+1; j<4; j++) {
			sum -= *((float*)&a + i * 4 + j) * b[j];
		}
		b[i] = sum/ *((float*)&a + i * 4 + i);
	}
} // end lubksb

// ----------------------------------------------------------------------------
//  Name:       ludcmp
//  Purpose:	LU decomposition
// ----------------------------------------------------------------------------

static void ludcmp(D3DMATRIX & a, int *indx, float *d)
{
	float	vv[4]; // implicit scale for each row
	float	big, dum, sum, tmp;
	int		i, imax, j, k;

	*d = 1.0f;
	for (i=0; i<4; i++) {
		big = 0.0f;
		for (j=0; j<4; j++) {
			if ((tmp = (float) fabs(*((float*)&a + i * 4 + j))) > big) {
				big = tmp;
			}
		}
		vv[i] = 1.0f/big;
	}
	for (j=0; j<4; j++) {
		for (i=0; i<j; i++) {
			sum = *((float*)&a + i * 4 + j);
			for (k=0; k<i; k++) {
				sum -= *((float*)&a + i * 4 + k) * *((float*)&a + k * 4 + j);
			}
			*((float*)&a + i * 4 + j) = sum;
		}
		big = 0.0f;
		for (i=j; i<4; i++) {
			sum = *((float*)&a + i * 4 + j);
			for (k=0; k<j; k++) {
				sum -= *((float*)&a + i * 4 + k)* *((float*)&a + k * 4 + j);
			}
			*((float*)&a + i * 4 + j) = sum;
			if ((dum = vv[i] * (float)fabs(sum)) >= big) {
				big = dum;
				imax = i;
			}
		}
		if (j != imax) {
			for (k=0; k<4; k++) {
				dum = *((float*)&a + imax * 4 + k);
				*((float*)&a + imax * 4 + k) = *((float*)&a + j * 4 + k);
				*((float*)&a + j * 4 + k) = dum;
			}
			*d = -(*d);
			vv[imax] = vv[j];
		}
		indx[j] = imax;
		if (*((float*)&a + j * 4 + j) == 0.0f) {
			*((float*)&a + j * 4 + j) = 1.0e-20f; // can be 0.0 also...
		}
		if (j != 3) {
			dum = 1.0f/ *((float*)&a + j * 4 + j);
			for (i=j+1; i<4; i++) {
				*((float*)&a + i * 4 + j) *= dum;
			}
		}
	}
} // end ludcmp
  
// ----------------------------------------------------------------------------
//  Name:       Matrix Transpose
//  Purpose:	[M] = [M]'
// ----------------------------------------------------------------------------

D3DMATRIX MatrixTranspose(const D3DMATRIX & m)
{
	D3DMATRIX	ret;
	int			i, j;

	for (i=0; i<4; i++) {
		for (j=0; j<4; j++) {
			*((float*)&ret + i * 4 + j) = *((float*)&m + j * 4 + i);
		}
	}

	return ret;
} // end MatrixTranspose

// ----------------------------------------------------------------------------
//  Name:       TextureMapSpherical
//  Purpose:    Spherically map a texture to an object
//              Requires untransformed data, assumes object is centered
//              at the origin, and that all vertices are surface vertices.
// ----------------------------------------------------------------------------

void TextureMapSpherical(D3DVERTEX * pVertices, int nCount)
{
	const float	pi = 3.1415926535f;
	float u, v;
	float maxx, minx, x_radius;
	float maxy, miny, y_radius;
	int i;

	maxx = minx = maxy = miny = 0;

	// get the x and y radius of the shape
	for(i = 0; i < nCount; i++)
	{
		if((pVertices[i].x) < minx)
			minx = pVertices[i].x;

		if((pVertices[i].x) > maxx)
			maxx = pVertices[i].x;

		if((pVertices[i].y) < miny)
			miny = pVertices[i].y;

		if((pVertices[i].y) > maxy)
			maxy = pVertices[i].y;
	}
	
	// we need the x_radius to be *slightly* off, so we don't get any results where
	// acos(x / x_radius) == 0 or pi.  This would mess up our later calculation of u+=pi.

	x_radius = (maxx - minx) / 1.99999f; // we need this to be slightly off
	y_radius = (maxy - miny) / 2.0f;

	for(i = 0; i < nCount; i++)
	{
		// calculate texture U coordinate based on model x-z coordinates.
		u = (float)acos(pVertices[i].x / x_radius);

		if(pVertices[i].z < 0.0f)
			u += pi;

		u /= (2.0f * pi); // convert to a value between 0 and 1.

		// calculate texture V coordinate based on model y coordinates.
		v = (float)acos(pVertices[i].y / y_radius);

		v /= pi;

		// now assign the calculated values.
		pVertices[i].tu = u;
		pVertices[i].tv = v;
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dfutil\cshapes\boid.cpp ===
//
//  Boid.cpp
//
//  CShapes class routine for generating a triangle-list Boid.
//  (Courtesy of the father-of-boid Steve Coy)
//

#include "d3dlocus.h"
#include "..\..\..\inc\3DMath.h"
#include "..\..\..\inc\CShapes.h"

// ----------------------------------------------------------------------------

bool CShapes::GenerateBoid()  // called by NewShape
{
	D3DVERTEX * pVertices;
	WORD *      pIndices;
	const int   nVertices = 16;
	const int   nIndices = 30;
	int         i;

	// the boid vertices
	D3DVERTEX VertexList[nVertices] = {
		//   x      y       z      Nx        Ny        Nz       u       v
		D3DVERTEX(cD3DVECTOR(   0.0f,  0.0f,  10.0f),  cD3DVECTOR(0.1961f,  0.9806f,  0.0000f), 0.000f, 0.500f ), // boid top
		D3DVERTEX(cD3DVECTOR(  10.0f,  0.0f, -10.0f),  cD3DVECTOR(0.0995f,  0.9950f,  0.0000f), 0.500f, 1.000f ),
		D3DVERTEX(cD3DVECTOR(   3.0f,  3.0f,  -7.0f),  cD3DVECTOR(0.0000f,  1.0000f,  0.0000f), 0.425f, 0.575f ),
		D3DVERTEX(cD3DVECTOR(  -3.0f,  3.0f,  -7.0f),  cD3DVECTOR(-0.0995f,  0.9950f,  0.0000f), 0.425f, 0.425f ),
		D3DVERTEX(cD3DVECTOR( -10.0f,  0.0f, -10.0f),  cD3DVECTOR(-0.1961f,  0.9806f,  0.0000f), 0.500f, 0.000f ),

		D3DVERTEX(cD3DVECTOR(   0.0f,  0.0f,  10.0f),  cD3DVECTOR(0.1961f, -0.9806f,  0.0000f), 1.000f, 0.500f ), // boid bottom
		D3DVERTEX(cD3DVECTOR(  10.0f,  0.0f, -10.0f),  cD3DVECTOR(0.0995f, -0.9950f,  0.0000f), 0.500f, 1.000f ),
		D3DVERTEX(cD3DVECTOR(   3.0f, -3.0f,  -7.0f),  cD3DVECTOR(0.0000f, -1.0000f,  0.0000f), 0.575f, 0.575f ),
		D3DVERTEX(cD3DVECTOR(  -3.0f, -3.0f,  -7.0f),  cD3DVECTOR(-0.0995f, -0.9950f,  0.0000f), 0.575f, 0.425f ),
		D3DVERTEX(cD3DVECTOR( -10.0f,  0.0f, -10.0f),  cD3DVECTOR(-0.1961f, -0.9806f,  0.0000f), 0.500f, 0.000f ),

		D3DVERTEX(cD3DVECTOR(  10.0f,  0.0f, -10.0f),  cD3DVECTOR(-0.3714f,  0.0000f, -0.9285f), 0.500f, 1.000f ), // boid rear
		D3DVERTEX(cD3DVECTOR(   3.0f,  3.0f,  -7.0f),  cD3DVECTOR(-0.1961f,  0.0000f, -0.9806f), 0.425f, 0.575f ),
		D3DVERTEX(cD3DVECTOR(  -3.0f,  3.0f,  -7.0f),  cD3DVECTOR(0.1961f,  0.0000f, -0.9806f), 0.425f, 0.425f ),
		D3DVERTEX(cD3DVECTOR( -10.0f,  0.0f, -10.0f),  cD3DVECTOR(0.3714f,  0.0000f, -0.9285f), 0.500f, 0.000f ),
		D3DVERTEX(cD3DVECTOR(  -3.0f, -3.0f,  -7.0f),  cD3DVECTOR(0.1961f,  0.0000f, -0.9806f), 0.575f, 0.425f ),
		D3DVERTEX(cD3DVECTOR(   3.0f, -3.0f,  -7.0f),  cD3DVECTOR(-0.1961f,  0.0000f, -0.9806f), 0.575f, 0.575f )
	};

	// scale the boid to be unit length and normalize vectors
	for(i = 0; i < 16; i++)
	{
		VertexList[i].x /= 20.0f;
		VertexList[i].y /= 20.0f;
		VertexList[i].z /= 20.0f;
	}

	WORD IndexList[nIndices] = {
		 0,  1,  2,  0,  2,  3,  0,  3,  4, // top
		 5,  7,  6,  5,  8,  7,  5,  9,  8, // bottom
		10, 15, 11, 11, 15, 12, 12, 15, 14, 12, 14, 13 // rear
	};

	// allocate the needed memory
	pVertices = (D3DVERTEX *)malloc(sizeof(D3DVERTEX) * nVertices);
    if (!pVertices) {
        return false;
    }
	pIndices = (WORD *)malloc(sizeof(WORD) * nIndices);
    if (!pIndices) {
        free(pVertices);
        return false;
    }

	//
	// set vertex data
	//
	for(i = 0; i < nVertices; i++)
	{
		pVertices[i].dvX = VertexList[i].dvX;
		pVertices[i].dvY = VertexList[i].dvY;
		pVertices[i].dvZ = VertexList[i].dvZ;
		pVertices[i].dvNX = VertexList[i].dvNX;
		pVertices[i].dvNY = VertexList[i].dvNY;
		pVertices[i].dvNZ = VertexList[i].dvNZ;
		pVertices[i].dvTU = VertexList[i].dvTU;
		pVertices[i].dvTV = VertexList[i].dvTV;
	}
	
	//
	// set index data
	//
	for(i = 0; i < nIndices; i++)
		pIndices[i] = IndexList[i];
	
	//
	// set class data
	//
	m_pVertices = pVertices;
	m_nVertices = nVertices;
	m_pIndices = pIndices;
	m_nIndices = nIndices;
	m_bWrapU = true;
	m_bWrapV = true;

	return true;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dfutil\cshapes\cshapes.cpp ===
//
//  CShapes.cpp
//
//  Source for CShapes class
//

#include "d3dlocus.h"
#include "..\..\..\inc\3DMath.h"
#include "..\..\..\inc\CShapes.h"

// ============================================================================
//
//  HELPER FUNCTIONS
//
// ============================================================================

void CShapes::Initialize()
{
	m_pVertices = 0;
	m_pIndices  = 0;
	m_nVertices = 0;
	m_nIndices  = 0;
	m_pCenter = NULL;
	
	m_pCenter = new D3DVECTOR();
	if(m_pCenter)
	{
		m_pCenter->x = 0;
		m_pCenter->y = 0;
		m_pCenter->z = 0;
	}
	else
		OutputDebugString(_T("Couldn't allocate memory.\n"));
}

// ----------------------------------------------------------------------------

void CShapes::Cleanup()
{
	if(m_pCenter)
		delete m_pCenter;
	if(m_pVertices)
		free(m_pVertices);
	if(m_pIndices)
		free(m_pIndices);
}

// ----------------------------------------------------------------------------

bool CShapes::CopyShape(const CShapes &Shape)
{
	int i;

	if(!m_pCenter)
		return false;

	if(m_pVertices)
	{
		Cleanup();
		Initialize();
	}

	//
	// allocate Vertices and Indices
	//
	m_pVertices = (D3DVERTEX *)malloc(sizeof(D3DVERTEX) * Shape.m_nVertices);
	m_pIndices = (WORD *)malloc(sizeof(WORD) * Shape.m_nIndices);
	
	if((!m_pVertices) || (!m_pIndices))
		return false;

	m_nVertices = Shape.m_nVertices;
	m_nIndices = Shape.m_nIndices;

	//
	// copy the shape vertices and indices
	//
	for(i = 0; i < m_nVertices; i++)
	{
		m_pVertices[i].x = Shape.m_pVertices[i].x;
		m_pVertices[i].y = Shape.m_pVertices[i].y;
		m_pVertices[i].z = Shape.m_pVertices[i].z;
		m_pVertices[i].nx = Shape.m_pVertices[i].nx;
		m_pVertices[i].ny = Shape.m_pVertices[i].ny;
		m_pVertices[i].nz = Shape.m_pVertices[i].nz;
		m_pVertices[i].tu = Shape.m_pVertices[i].tu;
		m_pVertices[i].tv = Shape.m_pVertices[i].tv;
	}

	for(i = 0; i < m_nIndices; i++)
		m_pIndices[i] = Shape.m_pIndices[i];

	m_pCenter->x = Shape.m_pCenter->x;
	m_pCenter->y = Shape.m_pCenter->y;
	m_pCenter->z = Shape.m_pCenter->z;
	m_CurShape = Shape.m_CurShape;

	return true;
}

// ----------------------------------------------------------------------------

bool CShapes::AddShape(const CShapes &Shape)
{
	int nCurVtx = 0;
	int nCurIdx = 0;
	int i;
	D3DVERTEX * pVertices;
	WORD * pIndices;
	int nVertices, nIndices, nPrevVtx;

    if(!m_pCenter)
		return false;
	if(!m_pVertices)
		return CopyShape(Shape);

	//
	// allocate new shape memory large enough for both shapes
	//
	nVertices = m_nVertices + Shape.m_nVertices;
	nIndices =  m_nIndices + Shape.m_nIndices;

	pVertices = (D3DVERTEX *)malloc(sizeof(D3DVERTEX) * nVertices);
	pIndices = (WORD *)malloc(sizeof(WORD) * nIndices);

	if((!pVertices) || (!pIndices))
	{
		OutputDebugString(TEXT("Couldn't allocate object memory"));
		return false;
	}

	//
	// add first (this) shape to composite
	// 
	for(i = 0; i < m_nVertices; i++)
	{
		pVertices[nCurVtx] = m_pVertices[i];
		nCurVtx++;
	}
	for(i = 0; i < m_nIndices; i++)
	{
		pIndices[nCurIdx] = m_pIndices[i];
		nCurIdx++;
	}

	nPrevVtx = nCurVtx;

	//
	// add second (passed-in) shape to composite
	//
	for(i = 0; i < Shape.m_nVertices; i++)
	{
		pVertices[nCurVtx] = Shape.m_pVertices[i];
		nCurVtx++;
	}
	for(i = 0; i < Shape.m_nIndices; i++)
	{
		pIndices[nCurIdx] = (WORD)(Shape.m_pIndices[i] + (WORD)nPrevVtx);
		nCurIdx++;
	}

	free(m_pVertices);
	free(m_pIndices);

	m_pVertices = pVertices;
	m_nVertices = nVertices;
	m_pIndices = pIndices;
	m_nIndices = nIndices;
	m_pCenter->x = 0.0f;
	m_pCenter->y = 0.0f;
	m_pCenter->z = 0.0f;
	m_CurShape = CS_COMPOSITE;

	return true;
}

// ============================================================================
//
//  CONSTRUCTOR / DESTRUCTOR
//
// ============================================================================

CShapes::CShapes()
{
	Initialize();
}

// ----------------------------------------------------------------------------

CShapes::CShapes(const CShapes &Shape)
{
	CopyShape(Shape);
}

// ----------------------------------------------------------------------------

CShapes::~CShapes()
{
	Cleanup();
}

// ----------------------------------------------------------------------------

CShapes &CShapes::operator=(const CShapes &Shape)
{
	CopyShape(Shape);
	return *this;
}

// ----------------------------------------------------------------------------

CShapes &CShapes::operator+=(const CShapes &Shape)
{
	AddShape(Shape);
	return *this;
}

// ============================================================================
//
//  PUBLIC MEMBER FUNCTIONS
//
// ============================================================================

bool CShapes::NewShape(
	CS_SHAPES Type,
	const int Divisions1,
	const int Divisions2,
	const int Divisions3)
{
	// if old shape exists... destroy it first.
	if(m_pVertices)
	{
		Cleanup();
		Initialize();
	}

	// hack to keep the warnings out.
	Divisions3;

	// now make the shape type requested.
	m_CurShape = Type;

	switch(Type)
	{
		case CS_COMPOSITE:
			return true;

		case CS_BOX:
			return GenerateBox();

		case CS_ICOSOHEDRON:
			return GenerateIcosohedron();

		case CS_SPHERE:
			if(Divisions1)
				return GenerateSphere(Divisions1);
			else
				return GenerateSphere();

		case CS_PYRAMID:
			return GeneratePyramid();

		case CS_CYLINDER:
			if(Divisions1 && Divisions2)
				return GenerateCylinder(Divisions1, Divisions2);
			else if(Divisions1)
				return GenerateCylinder(Divisions1);
			else
				return GenerateCylinder();
		
		case CS_CONE:
			if(Divisions1)
				return GenerateCone(Divisions1);
			else
				return GenerateCone();

		case CS_MESH:
			if(Divisions1 && Divisions2)
				return GenerateMesh(Divisions1, Divisions2);
			else if(Divisions1)
				return GenerateMesh(Divisions1, Divisions1);
			else
				return GenerateMesh();

		case CS_BOID:
			return GenerateBoid();

		default:
			return false;
	}
}

// ----------------------------------------------------------------------------

void CShapes::Rotate(float x, float y, float z)
{
	D3DMATRIX RotX, RotY, RotZ;
	D3DMATRIX RMatrix;
	D3DVECTOR OldPos;

    if(m_pCenter)
	{
		RotX = RotateXMatrix(x);
		RotY = RotateYMatrix(y);
		RotZ = RotateZMatrix(z);

		RMatrix = MatrixMult(RotX, RotY);
		RMatrix = MatrixMult(RMatrix, RotZ);

		// translate back to the origin, rotate, then translate back
		// to original position
		OldPos.x = m_pCenter->x;
		OldPos.y = m_pCenter->y;
		OldPos.z = m_pCenter->z;
		Translate(-m_pCenter->x, -m_pCenter->y, -m_pCenter->z);
		Transform(RMatrix, true);
		Translate(OldPos.x, OldPos.y, OldPos.z);
	}
}

// ----------------------------------------------------------------------------

void CShapes::Translate(float x, float y, float z)
{
	D3DMATRIX TMatrix;

	TMatrix = TranslateMatrix(x, y, z);

	Transform(TMatrix, false);
}

// ----------------------------------------------------------------------------

void CShapes::Scale(float factor)
{
	Scale(factor, factor, factor);
}

// ----------------------------------------------------------------------------

void CShapes::Scale(float x, float y, float z)
{
	D3DMATRIX SMatrix;
	
	SMatrix = ScaleMatrix(x, y, z);

	Transform(SMatrix, false);
}

// ----------------------------------------------------------------------------

void CShapes::Orbit(D3DVECTOR point1, float xRot, float yRot, float ZRot)
{
	// not implemented yet
	point1.x = 0;
	xRot = yRot = ZRot = 0.0f;
}

// ----------------------------------------------------------------------------

void CShapes::Fit(D3DVECTOR point1, D3DVECTOR point2)
{
	// not implemented yet
	point1.x = point2.x = 0;
}

// ----------------------------------------------------------------------------

void CShapes::MoveTo(D3DVECTOR point1)
{
    if(m_pCenter)
	{
		// translate back to the origin
		Translate(-m_pCenter->x, -m_pCenter->y, -m_pCenter->z);
	
		// now translate to the new point
		Translate(point1.x, point1.y, point1.z);
	}
}

// ----------------------------------------------------------------------------

void CShapes::Transform(D3DMATRIX& Matrix, bool bTransformNormals)
{
	D3DVECTOR SrcVector;
	D3DVECTOR DstVector;

	if(m_pCenter)
	{
		memset(&SrcVector, 0, sizeof(D3DVECTOR));
		memset(&DstVector, 0, sizeof(D3DVECTOR));
	
		// transform center
		*m_pCenter = TransformVector(*m_pCenter, Matrix);
	
		// apply transformation to every vertex in model.
		for(int i = 0; i < m_nVertices; i++)
		{
			// transform vertices
			SrcVector.x = m_pVertices[i].x;
			SrcVector.y = m_pVertices[i].y;
			SrcVector.z = m_pVertices[i].z;
			DstVector = TransformVector(SrcVector, Matrix);
			m_pVertices[i].x = DstVector.x;
			m_pVertices[i].y = DstVector.y;
			m_pVertices[i].z = DstVector.z;
		}
	
		if(bTransformNormals)
		{
			// apply transformation to every normal in model.
			for(int i = 0; i < m_nVertices; i++)
			{
				SrcVector.x = m_pVertices[i].dvNX;
				SrcVector.y = m_pVertices[i].dvNY;
				SrcVector.z = m_pVertices[i].dvNZ;
				DstVector = TransformNormal(SrcVector, Matrix);
				m_pVertices[i].dvNX = DstVector.x;
				m_pVertices[i].dvNY = DstVector.y;
				m_pVertices[i].dvNZ = DstVector.z;
			}
		}
	}
}

// ----------------------------------------------------------------------------

PTSTR CShapes::GetShapeName()
{
	switch(m_CurShape)
	{
		case CS_COMPOSITE :
			return _T("Composite");
		case CS_BOX :
			return _T("Box");
		case CS_SPHERE :
			return _T("Sphere");
		case CS_PYRAMID :
			return _T("Pyramid");
		case CS_CYLINDER :
			return _T("Cylinder");
		case CS_CONE :
			return _T("Cone");
		case CS_MESH :
			return _T("Flat Mesh");
		case CS_BOID :
			return _T("Boid");
		case CS_ICOSOHEDRON :
			return _T("Icosohedron");
		default:
			return _T("Unknown");
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dfutil\cshapes\cshapesfvf.cpp ===
#include "d3dlocus.h"
#include "..\..\..\inc\3DMath.h"
#include "..\..\..\inc\CShapes.h"
#include "..\..\..\inc\cshapesfvf.h"

CShapesFVF::CShapesFVF()
{
    CShapes::CShapes();
    m_TexCoords = NULL;
    m_FVFTypes = 0;
}

CShapesFVF::~CShapesFVF()
{
    if(NULL != m_TexCoords)
        free(m_TexCoords);
}

BOOL
CShapesFVF::ConvertToFVF(DWORD dwFlags)
{
    //
    // Clear out the current data
    //

    memset(&m_StrideData, 0, sizeof(m_StrideData));

    //
    // Set the appropriate values depending on the flags passed in
    // 

    if(dwFlags & D3DFVF_XYZ)
    {
        m_StrideData.position.lpvData = (LPVOID)(&(m_pVertices->x));
        m_StrideData.position.dwStride = sizeof(D3DVERTEX);
    }
    if(dwFlags & D3DFVF_NORMAL)
    {
        m_StrideData.normal.lpvData = (LPVOID)(&(m_pVertices->nx));
        m_StrideData.normal.dwStride = sizeof(D3DVERTEX);
    }

    //
    // Reserve memory for the texture coords
    //

    m_TexCoords = (TEXCOORDS *)malloc(sizeof(TEXCOORDS) * m_nVertices);
    if(NULL == m_TexCoords)
    {
        return FALSE;
    }

    //
    // Copy tex coords over into new array, replicating into each slot
    //

    for(int i=0; i<m_nVertices; i++)
    {
        for(int j=0; j<D3DDP_MAXTEXCOORD; j++)
        {
            m_TexCoords[i].Pair[j].tu = m_pVertices[i].tu;
            m_TexCoords[i].Pair[j].tv = m_pVertices[i].tv;
        }
    }

    for(int j=0; j<D3DDP_MAXTEXCOORD; j++)
    {
        m_StrideData.textureCoords[j].lpvData = (LPVOID)(&(m_TexCoords[0].Pair[j].tu));
        m_StrideData.textureCoords[j].dwStride = sizeof(TEXCOORDS);
    }
    m_FVFTypes = dwFlags;
    return TRUE;
}

void
CShapesFVF::ScaleCoords(DWORD dwCoord, float uScale, float vScale)
{
    int i;

    for(i=0; i<m_nVertices; i++)
    {
        m_TexCoords[i].Pair[dwCoord].tu *= uScale;
        m_TexCoords[i].Pair[dwCoord].tv *= vScale;
    }
}

void
CShapesFVF::OffsetCoords(DWORD dwCoord, float uOffset, float vOffset)
{
    int i;

    for(i=0; i<m_nVertices; i++)
    {
        m_TexCoords[i].Pair[dwCoord].tu += uOffset;
        m_TexCoords[i].Pair[dwCoord].tv += vOffset;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dfutil\cshapes\sphere.cpp ===
//
//  Sphere.cpp
//
//  CShapes class routines for generating and drawing Spheres.
//

#include "d3dlocus.h"
#include "..\..\..\inc\3DMath.h"
#include "..\..\..\inc\CShapes.h"

// ----------------------------------------------------------------------------

bool CShapes::GenerateSphere(const int nDivisions)  // called by NewShape
{
	bool bInvertFaces = FALSE;
	bool bInvertNormal = FALSE;
	const float	pi = 3.1415926535f;
	const int   nVertices = (2 * nDivisions * nDivisions) + 2;
	const int   nIndices = 12 * nDivisions * nDivisions;
	const float fRadius = 0.5f;
	D3DVERTEX * pVertices;
	WORD *      pIndices;


	int     i, j;
	float   dj = (float)(pi/(nDivisions+1.0f));
	float	di = (float)(pi/nDivisions);
	int	    v;		// vertex offset
	int     ind;	// indices offset

	// allocate the needed memory
	pVertices = (D3DVERTEX *)malloc(sizeof(D3DVERTEX) * nVertices);
	pIndices = (WORD *)malloc(sizeof(WORD) * nIndices);

	if(pVertices && pIndices)
	{
		// generate the sphere data, note the random texture coords
		// vertices 0 and 1 are the north and south poles
		pVertices[0] = cD3DVERTEX(cD3DVECTOR(0.0f, fRadius, 0.0f), Normalize(cD3DVECTOR(0.0f, 1.0f, 0.0f)), 0.0f, 0.0f);
		pVertices[1] = cD3DVERTEX(cD3DVECTOR(0.0f, -fRadius, 0.0f), Normalize(cD3DVECTOR(0.0f, -1.0f, 0.0f)), 1.0f, 1.0f);

		for (j=0; j<nDivisions; j++) 
		{
			for (i=0; i<nDivisions*2; i++) 
			{
				D3DVECTOR	p;
				D3DVECTOR	n;
				float		u, v;

				// Calculate points and normal vectors
				n.y=p.y = (float) cos((j+1) * dj);
				n.x=p.x = (float) sin(i * di) * (float) sin((j+1) * dj);
				n.z=p.z = (float) cos(i * di) * (float) sin((j+1) * dj);

				// apply radius
				p.y *= fRadius;
				p.x *= fRadius;
				p.z *= fRadius;

				// Determine normal direction
				if(bInvertNormal)
				{
					n.x *= -1.0f;
					n.y *= -1.0f;
					n.z *= -1.0f;
				}

				u = ((float)i/nDivisions) / 2.0f;

				if (u>1.0f) 
					u -= 1.0f;

				u = 1.0f - u;	// flip so texture is not mirrored
				v = (float)j/nDivisions;

				pVertices[2+i+j*nDivisions*2] = cD3DVERTEX(p, n, u, v);
			}
		}

		// now generate the triangle indices
		// strip around north pole first
		for (i=0; i<nDivisions*2; i++) 
		{
			if (bInvertFaces)
			{
				pIndices[3*i] = (WORD)(i+3);
				pIndices[3*i+1] = (WORD)(i+2);
				pIndices[3*i+2] = (WORD)0;
			}
			else
			{
				pIndices[3*i] = (WORD)0;
				pIndices[3*i+1] = (WORD)(i+2);
				pIndices[3*i+2] = (WORD)(i+3);
			}

			if (i==nDivisions*2-1)
				pIndices[3*i+2] = 2;
		}

		// now all the middle strips
		for (j=0; j<nDivisions-1; j++) 
		{
			v = 2+j*nDivisions*2;
			ind = 3*nDivisions*2 + j*6*nDivisions*2;

			for (i=0; i<nDivisions*2; i++) 
			{
				if (bInvertFaces)
				{
					pIndices[6*i+ind]   = (WORD)(v + i + nDivisions * 2);
					pIndices[6*i+2+ind] = (WORD)(v + i + 1);
					pIndices[6*i+1+ind] = (WORD)(v + i);

					pIndices[6*i+ind+3]   = (WORD)(v + i + 1);
					pIndices[6*i+2+ind+3] = (WORD)(v + i + nDivisions * 2);
					pIndices[6*i+1+ind+3] = (WORD)(v + i + nDivisions * 2 + 1);

					if (i==nDivisions*2-1) 
					{
						pIndices[6*i+2+ind] = (WORD)(v + i + 1 - 2 * nDivisions);
						pIndices[6*i+2+ind+3] = (WORD)(v + i + 1 - 2 * nDivisions);
						pIndices[6*i+1+ind+3] = (WORD)(v + i + nDivisions * 2 + 1 - 2 * nDivisions);
					}
				}
				else
				{
					pIndices[6*i+ind] = (WORD)(v + i);
					pIndices[6*i+2+ind] = (WORD)(v + i + 1);
					pIndices[6*i+1+ind] = (WORD)(v + i + nDivisions * 2);

					pIndices[6*i+ind+3] = (WORD)(v + i + nDivisions * 2);
					pIndices[6*i+2+ind+3] = (WORD)(v + i + 1);
					pIndices[6*i+1+ind+3] = (WORD)(v + i + nDivisions * 2 + 1);

					if (i==nDivisions*2-1) 
					{
						pIndices[6*i+2+ind] = (WORD)(v + i + 1 - 2 * nDivisions);
						pIndices[6*i+2+ind+3] = (WORD)(v + i + 1 - 2 * nDivisions);
						pIndices[6*i+1+ind+3] = (WORD)(v + i + nDivisions * 2 + 1 - 2 * nDivisions);
					}
				}
			}
		}

		// finally strip around south pole
		v = nVertices - nDivisions * 2;
		ind = nIndices - 3 * nDivisions * 2;

		for (i=0; i<nDivisions*2; i++) 
		{
			if (bInvertFaces)
			{
				pIndices[3*i+ind] = (WORD)(v + i);
				pIndices[3*i+1+ind] = (WORD)(v + i + 1);
				pIndices[3*i+2+ind] = (WORD)1;
			}
			else
			{
				pIndices[3*i+ind] = (WORD)1;
				pIndices[3*i+1+ind] = (WORD)(v + i + 1);
				pIndices[3*i+2+ind] = (WORD)(v + i);
			}

			if (i==nDivisions*2-1)
				pIndices[3*i+1+ind] = (WORD)v;
		}

		m_pVertices = pVertices;
		m_nVertices = nVertices;
		m_pIndices = pIndices;
		m_nIndices = nIndices;
		m_bWrapU = true;
		m_bWrapV = true;

		return true;
	}
	else {
	    if(pVertices)
		    free(pVertices);
	    if(pIndices)
		    free(pIndices);
		return false;
    }
}

// ----------------------------------------------------------------------------
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dfutil\cshapes\mesh.cpp ===
//
//  Mesh.cpp
//
//  CShapes class routine for generating a triangle-list mesh.
//

#include "d3dlocus.h"
#include "..\..\..\inc\3DMath.h"
#include "..\..\..\inc\CShapes.h"

// ----------------------------------------------------------------------------

bool CShapes::GenerateMesh(const int xDivisions, const int yDivisions)  // called by NewShape
{
	const int   nVertices = (xDivisions + 1) * (yDivisions + 1);
	const int   nIndices =  xDivisions * yDivisions * 6;
	D3DVERTEX * pVertices = NULL;
	WORD *      pIndices = NULL;
	int         nCurVtx = 0;
	int         nCurIdx = 0;
	int i, j;
	float xPos, yPos;

	if((xDivisions < 1) || (yDivisions < 1))
		return false;

	pVertices = (D3DVERTEX *)malloc(sizeof(D3DVERTEX) * nVertices);
    if (!pVertices) {
        return false;
    }
	pIndices = (WORD *)malloc(sizeof(WORD) * nIndices);
    if (!pIndices) {
        free(pVertices);
        return false;
    }

	memset(pVertices, 0, sizeof(D3DVERTEX) * nVertices);
	memset(pIndices, 0, sizeof(WORD) * nIndices);

	// create vertices
	for(i = yDivisions; i >= 0; i--)
	{
		for(j = 0; j <= xDivisions; j++)
		{
			xPos = (1.0f / xDivisions) * float(j);
			yPos = (1.0f / yDivisions) * float(i);
			pVertices[nCurVtx].x = xPos - 0.5f;
			pVertices[nCurVtx].y = yPos - 0.5f;
			pVertices[nCurVtx].z = 0.0f;
			pVertices[nCurVtx].nx = 0.0f;
			pVertices[nCurVtx].ny = 0.0f;
			pVertices[nCurVtx].nz = -1.0f;
			pVertices[nCurVtx].tu = xPos;
			pVertices[nCurVtx].tv = 1.0f - yPos;
			nCurVtx++;
		}
	}

	// create indices
	for(i = (xDivisions + 1); i < nVertices; i += (xDivisions + 1))
	{
		for(j = 0; j < (xDivisions); j++)
		{
			// tri 1
			pIndices[nCurIdx    ] = (WORD)(i + j + 1);
			pIndices[nCurIdx + 1] = (WORD)(i + j);
			pIndices[nCurIdx + 2] = (WORD)(i + j - (xDivisions + 1));
			// tri 2
			pIndices[nCurIdx + 3] = (WORD)(i + j - (xDivisions + 1));
			pIndices[nCurIdx + 4] = (WORD)(i + j - (xDivisions + 1) + 1);
			pIndices[nCurIdx + 5] = (WORD)(i + j + 1);
			nCurIdx += 6;
		}
	}

	//
	// set class data
	//
	m_pVertices = pVertices;
	m_nVertices = nVertices;
	m_pIndices = pIndices;
	m_nIndices = nIndices;
	m_bWrapU = false;
	m_bWrapV = false;

	return true;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dfutil\cshapes\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=CShapes
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SOURCES=\
    Boid.cpp \
    Box.cpp \
    Cone.cpp \
    CShapes.cpp \
    CShapesFVF.cpp \
    Cylinder.cpp \
    Icosohedron.cpp \
    Mesh.cpp \
    Pyramid.cpp \
    Sphere.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dfutil\cshapes\pyramid.cpp ===
//
//  Pyramid.cpp
//
//  CShapes class routines for generating and drawing Pyramids.
//

#include "d3dlocus.h"
#include "..\..\..\inc\3DMath.h"
#include "..\..\..\inc\CShapes.h"

// ----------------------------------------------------------------------------

bool CShapes::GeneratePyramid()  // called by NewShape
{
	D3DVERTEX * pVertices;
	WORD *      pIndices;
	const int   nVertices = 16;
	const int   nIndices = 18;

	// define a basic pyramid, centered at the origin.
	D3DVERTEX VertexList[nVertices] = {
		//  x      y      z      xN        yN        zN       u     v
		D3DVERTEX(cD3DVECTOR(  0.5f, -0.5f, -0.5f), cD3DVECTOR( 0.0000f,  0.4472f, -0.8944f), 1.0f, 1.0f ), // face 1 (front)
		D3DVERTEX(cD3DVECTOR( -0.5f, -0.5f, -0.5f), cD3DVECTOR( 0.0000f,  0.4472f, -0.8944f), 0.0f, 1.0f ),
		D3DVERTEX(cD3DVECTOR(  0.0f,  0.5f,  0.0f), cD3DVECTOR( 0.0000f,  0.4472f, -0.8944f), 0.5f, 0.5f ),

		D3DVERTEX(cD3DVECTOR(  0.5f, -0.5f,  0.5f), cD3DVECTOR( 0.8944f,  0.4472f,  0000.0f), 1.0f, 0.0f ),  // face 2 (right)
		D3DVERTEX(cD3DVECTOR(  0.5f, -0.5f, -0.5f), cD3DVECTOR( 0.8944f,  0.4472f,  0000.0f), 1.0f, 1.0f ),
		D3DVERTEX(cD3DVECTOR(  0.0f,  0.5f,  0.0f), cD3DVECTOR( 0.8944f,  0.4472f,  0000.0f), 0.5f, 0.5f ),

		D3DVERTEX(cD3DVECTOR( -0.5f, -0.5f,  0.5f), cD3DVECTOR( 0.0000f,  0.4472f,  0.8944f), 0.0f, 0.0f ),  // face 3 (back)
		D3DVERTEX(cD3DVECTOR(  0.5f, -0.5f,  0.5f), cD3DVECTOR( 0.0000f,  0.4472f,  0.8944f), 1.0f, 0.0f ),
		D3DVERTEX(cD3DVECTOR(  0.0f,  0.5f,  0.0f), cD3DVECTOR( 0.0000f,  0.4472f,  0.8944f), 0.5f, 0.5f ),

		D3DVERTEX(cD3DVECTOR( -0.5f, -0.5f, -0.5f), cD3DVECTOR(-0.8944f,  0.4472f,  0000.0f), 0.0f, 1.0f ), // face 4 (left)
		D3DVERTEX(cD3DVECTOR( -0.5f, -0.5f,  0.5f), cD3DVECTOR(-0.8944f,  0.4472f,  0000.0f), 0.0f, 0.0f ),
		D3DVERTEX(cD3DVECTOR(  0.0f,  0.5f,  0.0f), cD3DVECTOR(-0.8944f,  0.4472f,  0000.0f), 0.5f, 0.5f ),
		
		D3DVERTEX(cD3DVECTOR(  0.5f, -0.5f,  0.5f), cD3DVECTOR( 0.0000f, -1.0000f,  0.0000f), 1.0f, 0.0f ),  // face 5 (bottom)
		D3DVERTEX(cD3DVECTOR( -0.5f, -0.5f,  0.5f), cD3DVECTOR( 0.0000f, -1.0000f,  0.0000f), 0.0f, 0.0f ),
		D3DVERTEX(cD3DVECTOR( -0.5f, -0.5f, -0.5f), cD3DVECTOR( 0.0000f, -1.0000f,  0.0000f), 0.0f, 1.0f ),
		D3DVERTEX(cD3DVECTOR(  0.5f, -0.5f, -0.5f), cD3DVECTOR( 0.0000f, -1.0000f,  0.0000f), 1.0f, 1.0f ),
	};

	WORD IndexList[nIndices] = {
		 0,  1,  2,  // face 1
		 3,  4,  5,  // face 2
		 6,  7,  8,  // face 3
		 9, 10, 11,  // face 4
		12, 13, 14,  // face 5
		12, 14, 15,  // face 6
	};

	// allocate the needed memory
	pVertices = (D3DVERTEX *)malloc(sizeof(D3DVERTEX) * nVertices);
    if (!pVertices) {
        return false;
    }
	pIndices = (WORD *)malloc(sizeof(WORD) * nIndices);
    if (!pIndices) {
        free(pVertices);
        return false;
    }

	int i;
	//
	// set vertex data
	//
	for(i = 0; i < nVertices; i++)
	{
		pVertices[i].dvX = VertexList[i].dvX;
		pVertices[i].dvY = VertexList[i].dvY;
		pVertices[i].dvZ = VertexList[i].dvZ;
		pVertices[i].dvNX = VertexList[i].dvNX;
		pVertices[i].dvNY = VertexList[i].dvNY;
		pVertices[i].dvNZ = VertexList[i].dvNZ;
		pVertices[i].dvTU = VertexList[i].dvTU;
		pVertices[i].dvTV = VertexList[i].dvTV;
	}
	
	//
	// set index data
	//
	for(i = 0; i < nIndices; i++)
		pIndices[i] = IndexList[i];
	
	//
	// set class data
	//
	m_pVertices = pVertices;
	m_nVertices = nVertices;
	m_pIndices = pIndices;
	m_nIndices = nIndices;
	m_bWrapU = false;
	m_bWrapV = false;

	return true;
}

// ----------------------------------------------------------------------------
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dfutil\cshapes\cylinder.cpp ===
// Cylinder.cpp
//
//  CShapes class routine for generating a triangle-list cylinder.
//

#include "d3dlocus.h"
#include "..\..\..\inc\3DMath.h"
#include "..\..\..\inc\CShapes.h"

bool CShapes::GenerateCylinder(const int nDivisions, const int hDivisions)
{
	const float	pi = 3.1415926535f;
	const float fRadius = 0.5f;
	const float fTheta = 360.0f / nDivisions;

	const int   nVertices = nDivisions * (3 + hDivisions) + 2;
	const int   nIndices = 6 * nDivisions * (1 + hDivisions); // 3*nDivisions (top) + 6 * nDivisions * hDivisions(middle) + 3*nDivisions (bottom) 
	D3DVERTEX * pVertices = NULL;
	WORD *      pIndices = NULL;
	
	float       fRads;

	int i, j, n, idx;
	float fX, fZ, fU;
	D3DVECTOR Normal;

	// allocate memory for the vertices and indices
	pVertices = (D3DVERTEX *)malloc(sizeof(D3DVERTEX) * nVertices);
    if (!pVertices) {
        return false;
    }
	pIndices = (WORD *)malloc(sizeof(WORD) * nIndices);
    if (!pIndices) {
        free(pVertices);
        return false;
    }
	
	memset(pVertices, 0, sizeof(D3DVERTEX) * nVertices);
	memset(pIndices, 0, sizeof(WORD) * nIndices);

	// 
	// Set Vertex Data
	//
	
	// Initialize the two center points
	// top
	pVertices[0].x  = 0.0f;
	pVertices[0].y  = 0.5f;
	pVertices[0].z  = 0.0f;
	pVertices[0].nx = 0.0f;
	pVertices[0].ny = 1.0f;
	pVertices[0].nz = 0.0f;
	pVertices[0].tu = 0.5f;
	pVertices[0].tv = 0.0f;
	// bottom
	pVertices[nVertices - 1].x  = 0.0f;
	pVertices[nVertices - 1].y  = -0.5f;
	pVertices[nVertices - 1].z  = 0.0f;
	pVertices[nVertices - 1].nx = 0.0f;
	pVertices[nVertices - 1].ny = -1.0f;
	pVertices[nVertices - 1].nz = 0.0f;
	pVertices[nVertices - 1].tu = 0.5f;
	pVertices[nVertices - 1].tv = 0.0f;

	// generate the outer points
	for(i=1; i <= nDivisions; i++)
	{
		// cos takes a radian value, so convert.
		fRads = (fTheta * (float)(i-1) * pi) / 180.0f;
		fX = (float)(fRadius * cos(fRads));
		fZ = (float)(fRadius * sin(fRads));
		fU = (float)(i+1) / (float)nDivisions;

		Normal = Normalize(cD3DVECTOR(fX, 0.0f, fZ));

		// top vertex
		pVertices[i].x = fX;
		pVertices[i].y = 0.5f;
		pVertices[i].z = fZ;
		pVertices[i].nx = 0.0f;
		pVertices[i].ny = 1.0f;
		pVertices[i].nz = 0.0f;
		pVertices[i].tu = fU;
		pVertices[i].tv = 1.0f;

		// side vertices
		for(int j = 0; j <= hDivisions; j++)
		{
			idx = (nDivisions * (j + 1)) + i;
			pVertices[idx].x  = fX;
			pVertices[idx].y  = 0.5f - ((1.0f / (float)hDivisions) * (float)j);
			pVertices[idx].z  = fZ;
			pVertices[idx].nx = Normal.x;
			pVertices[idx].ny = 0.0f;
			pVertices[idx].nz = Normal.z;
			pVertices[idx].tu = fU;
			pVertices[idx].tv = (1.0f / (float)hDivisions) * (float)j;
		}

		// bottom vertex
		idx = (nVertices - nDivisions - 2 + i);
		pVertices[idx].x  = fX;
		pVertices[idx].y  = -0.5f;
		pVertices[idx].z  = fZ;
		pVertices[idx].nx = 0.0f;
		pVertices[idx].ny = -1.0f;
		pVertices[idx].nz = 0.0f;
		pVertices[idx].tu = fU;
		pVertices[idx].tv = 1.0f;
	}

	//
	// Set Index Data
	//
	n = 0;
	// top
	for(i = 0; i < nDivisions; i++)
	{
		if(i < (nDivisions - 1))
			pIndices[n] = (WORD)(i+2);
		else
			pIndices[n] = (WORD)1;  // the last index on the top.
		pIndices[n+1] = (WORD)(i+1);
		pIndices[n+2] = (WORD)0;
		n += 3;
	}
	// middle
	for(j = 1; j <= hDivisions; j++)
	{
		for(i = 0; i < nDivisions; i++)
		{
			// triangle 1
			if(i < (nDivisions - 1))
				pIndices[n] = (WORD)((nDivisions * (j+1)) + i + 2);
			else
				pIndices[n] = (WORD)((nDivisions * (j+1)) + 1);
			pIndices[n+1] = (WORD)((nDivisions * (j+1)) + i + 1);
			pIndices[n+2] = (WORD)((nDivisions * j) + i + 1);
			// triangle 2
			pIndices[n+3] = pIndices[n];
			pIndices[n+4] = pIndices[n+2];
			if(i < (nDivisions - 1))
				pIndices[n+5] = (WORD)((nDivisions * j) + i + 2);
			else
				pIndices[n+5] = (WORD)((nDivisions * j) + 1); // last index on the side
			n += 6;
		}
	}
	// bottom
	for(i = 0; i < nDivisions; i++)
	{
		pIndices[n] = (WORD)((nDivisions * (2 + hDivisions)) + i + 1);
		if(i < (nDivisions - 1))
			pIndices[n+1] = (WORD)((nDivisions * (2 + hDivisions)) + i + 2);
		else
			pIndices[n+1] = (WORD)((nDivisions * (2 + hDivisions)) + 1);
		pIndices[n+2] = (WORD)(nVertices - 1);
		n += 3;
	}

	//
	// set class data
	//
	m_pVertices = pVertices;
	m_nVertices = nVertices;
	m_pIndices = pIndices;
	m_nIndices = nIndices;
	m_bWrapU = true;
	m_bWrapV = false;

	return true;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dfutil\cshapes\icosohedron.cpp ===
//
//  Icosohedron.cpp
//
//  CShapes class routine for generating a triangle-list Icosohedron.
//
//  Icosohedron added by cliffo May 16, 1998

#include "d3dlocus.h"
#include "..\..\..\inc\3DMath.h"
#include "..\..\..\inc\CShapes.h"

#pragma intrinsic(sqrt)

// ----------------------------------------------------------------------------

bool CShapes::GenerateIcosohedron()  // called by NewShape
{
    D3DVERTEX   VertexList[12];
    WORD        wIndexList[]={6,5,0,   6,4,10, 5,6,10, 2,4,6, 0,2,6, 
                              4,2,8,   8,2,1,  1,2,0,  1,0,7, 7,0,5,
                              5,10,11, 5,11,7, 7,11,3, 7,3,1, 11,9,3,
                              1,3,8,   9,4,8,  4,9,10, 9,11,10, 9,8,3};
    LPD3DVERTEX pVertices;
    PWORD       pIndices;
    float       t = (float)((sqrt(5.0f)-1.0f)/2.0f);

	pVertices = (D3DVERTEX *)malloc(sizeof(D3DVERTEX) * sizeof(VertexList)/sizeof(D3DVERTEX));
	pIndices = (WORD *)malloc(sizeof(WORD) * sizeof(wIndexList)/sizeof(WORD));

    if (NULL == pVertices || NULL == pIndices)
    {
        if (NULL != pVertices)
            free(pVertices);

        if (NULL == pIndices)
            free(pIndices);

        return false;
    }

    // Generate the vertex list

    VertexList[0] = cD3DVERTEX(Normalize(cD3DVECTOR(1,0,t)),Normalize(cD3DVECTOR(1,0,t)),0.0f,0.0f);
    VertexList[1] = cD3DVERTEX(Normalize(cD3DVECTOR(0,t,1)),Normalize(cD3DVECTOR(0,t,1)),0.0f,0.0f);
    VertexList[2] = cD3DVERTEX(Normalize(cD3DVECTOR(t,1,0)),Normalize(cD3DVECTOR(t,1,0)),0.0f,0.0f);
    VertexList[3] = cD3DVERTEX(Normalize(cD3DVECTOR(-1,0,t)),Normalize(cD3DVECTOR(-1,0,t)),0.0f,0.0f);
    VertexList[4] = cD3DVERTEX(Normalize(cD3DVECTOR(0,t,-1)),Normalize(cD3DVECTOR(0,t,-1)),0.0f,0.0f);
    VertexList[5] = cD3DVERTEX(Normalize(cD3DVECTOR(t,-1,0)),Normalize(cD3DVECTOR(t,-1,0)),0.0f,0.0f);
    VertexList[6] = cD3DVERTEX(Normalize(cD3DVECTOR(1,0,-t)),Normalize(cD3DVECTOR(1,0,-t)),0.0f,0.0f);
    VertexList[7] = cD3DVERTEX(Normalize(cD3DVECTOR(0,-t,1)),Normalize(cD3DVECTOR(0,-t,1)),0.0f,0.0f);
    VertexList[8] = cD3DVERTEX(Normalize(cD3DVECTOR(-t,1,0)),Normalize(cD3DVECTOR(-t,1,0)),0.0f,0.0f);
    VertexList[9] = cD3DVERTEX(Normalize(cD3DVECTOR(-1,0,-t)),Normalize(cD3DVECTOR(-1,0,-t)),0.0f,0.0f);
    VertexList[10] = cD3DVERTEX(Normalize(cD3DVECTOR(0,-t,-1)),Normalize(cD3DVECTOR(0,-t,-1)),0.0f,0.0f);
    VertexList[11] = cD3DVERTEX(Normalize(cD3DVECTOR(-t,-1,0)),Normalize(cD3DVECTOR(-t,-1,0)),0.0f,0.0f);

	// scale the shape to be unit length and normalize vectors
	// (a-eronh 5/18/98)
	for(int i = 0; i < 12; i++)
	{
		VertexList[i].x *= 0.5f;
		VertexList[i].y *= 0.5f;
		VertexList[i].z *= 0.5f;
	}

    memcpy(pVertices,VertexList,sizeof(VertexList));
    memcpy(pIndices,wIndexList,sizeof(wIndexList));

	m_pVertices = pVertices;
	m_nVertices = sizeof(VertexList)/sizeof(D3DVERTEX);
	m_pIndices = pIndices;
	m_nIndices = sizeof(wIndexList)/sizeof(WORD);
	m_bWrapU = true;
	m_bWrapV = true;

	// calculate texture coordinates
	// (a-eronh 6/01/98)
	TextureMapSpherical(m_pVertices, m_nVertices);

    return true;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\basetex.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    basetex.cpp

Author:

    Matt Bronder

Description:

    CBaseTexture methods.

*******************************************************************************/

#include "d3dlocus.h"

//******************************************************************************
// CBaseTexture
//******************************************************************************

//******************************************************************************
CBaseTexture::CBaseTexture() {
}

//******************************************************************************
CBaseTexture::~CBaseTexture() {
}

//******************************************************************************
// CBaseTexture8
//******************************************************************************

//******************************************************************************
CBaseTexture8::CBaseTexture8() {

    m_pd3dtb = NULL;
}

//******************************************************************************
CBaseTexture8::~CBaseTexture8() {
}

//******************************************************************************
BOOL CBaseTexture8::Create(CDevice8* pDevice, LPDIRECT3DBASETEXTURE8 pd3dtb) {

    if (m_pd3dtb) {
        return FALSE;
    }

    if (pDevice && pd3dtb) {

        if (CResource8::Create(pDevice, (LPDIRECT3DRESOURCE8)pd3dtb)) {
            m_pd3dtb = pd3dtb;
        }
    }

    return (BOOL)m_pd3dtb;
}

//******************************************************************************
LPDIRECT3DBASETEXTURE8 CBaseTexture8::GetIDirect3DBaseTexture8() {

    return m_pd3dtb;
}

//******************************************************************************
DWORD CBaseTexture8::GetLevelCount() {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dtb) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dtb->GetLevelCount();
}

//******************************************************************************
DWORD CBaseTexture8::GetLOD() {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dtb) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX
    return m_pd3dtb->GetLOD();
#else
    Log(LOG_FAIL, TEXT("IDirect3DBaseTexture8::GetLOD is not implemented on XBox"));
    return 0;
#endif // UNDER_XBOX
}

//******************************************************************************
DWORD CBaseTexture8::SetLOD(DWORD dwNewLOD) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dtb) {
        return 0;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX
    return m_pd3dtb->SetLOD(dwNewLOD);
#else
    Log(LOG_FAIL, TEXT("IDirect3DBaseTexture8::SetLOD is not implemented on XBox"));
    return 0;
#endif // UNDER_XBOX
}

//******************************************************************************
// CCBaseTexture8
//******************************************************************************

//******************************************************************************
DWORD CCBaseTexture8_GetLevelCount(CBaseTexture8* pBaseTexture, CClient* pClient) {

    LPDIRECT3DBASETEXTURE8  pd3dtb = pBaseTexture->GetIDirect3DBaseTexture8();
    DWORD                   dwCountC, dwCountS;

#ifdef D3DLOCUS_DEBUG
    if (!pd3dtb) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    dwCountC = pd3dtb->GetLevelCount();

    if (pClient->CallMethod(MID_BTX8_GetLevelCount, pBaseTexture, &dwCountS)) {

        if (dwCountC != dwCountS) {
            Log(LOG_WARN, TEXT("IDirect3DBaseTexture8::GetLevelCount result inconsistent [C: %d, S: %d]"), dwCountC, dwCountS);
        }
    }

    return dwCountC;
}

//******************************************************************************
DWORD CCBaseTexture8_GetLOD(CBaseTexture8* pBaseTexture, CClient* pClient) {

    LPDIRECT3DBASETEXTURE8  pd3dtb = pBaseTexture->GetIDirect3DBaseTexture8();
    DWORD                   dwLODC, dwLODS;

#ifdef D3DLOCUS_DEBUG
    if (!pd3dtb) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX
    dwLODC = pd3dtb->GetLOD();

    if (pClient->CallMethod(MID_BTX8_GetLOD, pBaseTexture, &dwLODS)) {

        if (dwLODC != dwLODS) {
            Log(LOG_WARN, TEXT("IDirect3DBaseTexture8::GetLOD result inconsistent [C: %d, S: %d]"), dwLODC, dwLODS);
        }
    }

    return dwLODC;
#else
    Log(LOG_FAIL, TEXT("IDirect3DBaseTexture8::GetLOD is not implemented on XBox"));
    return 0;
#endif // UNDER_XBOX
}

//******************************************************************************
DWORD CCBaseTexture8_SetLOD(CBaseTexture8* pBaseTexture, CClient* pClient, DWORD dwNewLOD) {

    LPDIRECT3DBASETEXTURE8  pd3dtb = pBaseTexture->GetIDirect3DBaseTexture8();
    DWORD                   dwLODC, dwLODS;

#ifdef D3DLOCUS_DEBUG
    if (!pd3dtb) {
        return 0;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX
    dwLODC = pd3dtb->SetLOD(dwNewLOD);

    if (pClient->CallMethod(MID_BTX8_SetLOD, pBaseTexture, &dwLODS, dwNewLOD)) {

        if (dwLODC != dwLODS) {
            Log(LOG_WARN, TEXT("IDirect3DBaseTexture8::SetLOD result inconsistent [C: %d, S: %d]"), dwLODC, dwLODS);
        }
    }

    return dwLODC;
#else
    Log(LOG_FAIL, TEXT("IDirect3DBaseTexture8::SetLOD is not implemented on XBox"));
    return 0;
#endif // UNDER_XBOX
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\basetex.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    basetex.h

Description:

    IDirect3DBaseTexture classes.

*******************************************************************************/

#ifndef __BASETEX_H__
#define __BASETEX_H__

//******************************************************************************
// CBaseTexture
//******************************************************************************

//******************************************************************************
class CBaseTexture : public CResource {

protected:

public:

                        CBaseTexture();
                        ~CBaseTexture();
};

//******************************************************************************
class CBaseTexture8 : public CResource8 {

protected:

    LPDIRECT3DBASETEXTURE8 m_pd3dtb;

public:

                        CBaseTexture8();
                        ~CBaseTexture8();
    virtual BOOL        Create(CDevice8* pDevice, LPDIRECT3DBASETEXTURE8 pd3dtb);

    virtual LPDIRECT3DBASETEXTURE8 GetIDirect3DBaseTexture8();
/*
    virtual BOOL        AddObject(LPVOID pvInterface, LPVOID pvObject);
    virtual BOOL        RemoveObject(LPVOID pvInterface);
    virtual BOOL        FindObject(LPVOID pvInterface, LPVOID* ppvObject);
*/
    // Information

    virtual DWORD       GetLevelCount();

    // Detail

    virtual DWORD       GetLOD();
    virtual DWORD       SetLOD(DWORD dwNewLOD);
};

//******************************************************************************
// Client base texture function prototypes
//******************************************************************************

DWORD CCBaseTexture8_GetLevelCount(CBaseTexture8* pBaseTexture, CClient* pClient);
DWORD CCBaseTexture8_GetLOD(CBaseTexture8* pBaseTexture, CClient* pClient);
DWORD CCBaseTexture8_SetLOD(CBaseTexture8* pBaseTexture, CClient* pClient, DWORD dwNewLOD);

#endif // __BASETEX_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\cd3d.h ===
#if defined(_DEBUG) || defined(DBG)
#ifndef DEBUG
#define DEBUG
#endif
#endif

#ifdef UNDER_XBOX
#define DEMO_HACK
#endif

#ifdef DEMO_HACK
#define D3DFMT_D24X4S4          ((D3DFORMAT)0xFFFF0002)
#define D3DFMT_D15S1            ((D3DFORMAT)0xFFFF0003)
#define D3DFMT_D32              ((D3DFORMAT)0xFFFF0004)
#define D3DFMT_R3G3B2           ((D3DFORMAT)0xFFFF0005)
#define D3DFMT_A4L4             ((D3DFORMAT)0xFFFF0006)
#define D3DFMT_A8R3G3B2         ((D3DFORMAT)0xFFFF0007)
#define D3DFMT_X4R4G4B4         ((D3DFORMAT)0xFFFF0008)
#define D3DFMT_A8P8             ((D3DFORMAT)0xFFFF0009)
#define D3DFMT_R8G8B8           ((D3DFORMAT)0xFFFF000A)
#define D3DFMT_W11V11U10        ((D3DFORMAT)0xFFFF000B)
#endif

#ifndef UNDER_XBOX
#define POOL_DEFAULT    D3DPOOL_MANAGED
#else
#define POOL_DEFAULT    D3DPOOL_DEFAULT
#endif

class CObject;
class CDirect3D8;
class CDevice8;
class CSurface8;
class CVolume8;
class CSwapChain8;
class CResource8;
class CVertexBuffer8;
class CIndexBuffer8;
class CPalette8;
class CBaseTexture8;
class CTexture8;
class CCubeTexture8;
class CVolumeTexture8;

#include "util.h"
#include "transprt.h"
#include "client.h"
#include "typetran.h"
#include "object.h"
#include "direct3d.h"
#include "device.h"
#include "surface.h"
#include "volume.h"
#include "swapchn.h"
#include "resource.h"
#include "vertbuff.h"
#include "indxbuff.h"
#include "pal.h"
#include "basetex.h"
#include "tex.h"
#include "cubetex.h"
#include "voltex.h"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\conio.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    conio.h

Author:

    Matt Bronder

Description:

    Console and text output functions.

*******************************************************************************/

#ifndef __CONIO_H__
#define __CONIO_H__

//******************************************************************************
// Function prototypes
//******************************************************************************

BOOL __cdecl LoadConsole();
void __cdecl UnloadConsole();

#endif //__CONIO_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\client.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    client.h

Author:

    Matt Bronder

Description:

    Client code for remote reference verification.

*******************************************************************************/

#ifndef __CLIENT_H__
#define __CLIENT_H__

//******************************************************************************
// Preprocessor definitions
//******************************************************************************

#define PORT_SERVICE        2202
#define PORT_ENUMERATE      2203

#define ARG_BUFFER_SIZE     512

//******************************************************************************
class CClient {

private:

    SOCKET                  m_sEnumerate;
    SOCKET                  m_sListen;
    SOCKET                  m_sServer;

    BOOL                    m_bWSAStartup;
#ifdef UNDER_XBOX
    BOOL                    m_bXnetStartup;
#endif // UNDER_XBOX

    BOOL                    m_bMCallsEnabled;

    PPACKET                 m_pPacket;

    PACKET_ENUM             m_pkEnum;

    static LPCSTR           m_szSigs[];

public:

                            CClient();
                            ~CClient();
    BOOL                    Create();

    void                    Disconnect();
    BOOL                    IsConnected();

    void                    EnableMethodCalls(BOOL bEnable);
    BOOL                    MethodCallsEnabled();

    BOOL                    CheckDeviceAffinity(CDirect3D8* pDirect3D, BOOL* bEquivalent);
    BOOL                    CallDirect3DCreate8(LPVOID pvDirect3D);
    BOOL                    CallMethod(METHODID methodID, LPVOID pvObject, ...);
    BOOL                    GetRefFrameCRC32(CDevice8* pDevice, LPDWORD pdwCRC);
    BOOL                    GetRefFrame(CDevice8* pDevice, DWORD dwWidth, DWORD dwHeight, DWORD dwPitch, LPVOID pvBits);

    int                     SendPacket(PPACKET ppk, SOCKET s = INVALID_SOCKET);
    BOOL                    RecvPacket(PPACKET ppk = NULL, SOCKET s = INVALID_SOCKET);

    int                     Send(LPVOID pv, int nSize, SOCKET s = INVALID_SOCKET);
    int                     Recv(LPVOID pv, int nSize, SOCKET s = INVALID_SOCKET);
};

//******************************************************************************
typedef struct _SLOCKDESC {
    D3DLOCKED_RECT          d3dlr;
    RECT                    rect;
    DWORD                   dwFlags;
    D3DLOCKED_RECT          d3dlrSrv;
} SLOCKDESC, *PSLOCKDESC;

typedef struct _VLOCKDESC {
    D3DLOCKED_BOX           d3dlb;
    D3DBOX                  box;
    DWORD                   dwFlags;
    D3DLOCKED_BOX           d3dlbSrv;
} VLOCKDESC, *PVLOCKDESC;

typedef struct _RLOCKDESC {
    LPBYTE              pData;
    UINT                uSize;
//    DWORD               dwFlags;
    LPBYTE              pDataSrv;
} RLOCKDESC, *PRLOCKDESC;

typedef struct _ILOCKDESC {
    LPBYTE              pData;
    UINT                uSize;
//    DWORD               dwFlags;
    LPBYTE              pDataSrv;
} ILOCKDESC, *PILOCKDESC;

int                         gethostaddr(IN_ADDR* psin);
int                         gethostaddr(char* addr, int addrlen);

#endif // __CLIENT_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\cubetex.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    cubetex.cpp

Author:

    Matt Bronder

Description:

    CCubeTexture methods.

*******************************************************************************/

#include "d3dlocus.h"

//******************************************************************************
// CCubeTexture
//******************************************************************************

//******************************************************************************
CCubeTexture::CCubeTexture() {
}

//******************************************************************************
CCubeTexture::~CCubeTexture() {
}

//******************************************************************************
// CCubeTexture8
//******************************************************************************

//******************************************************************************
CCubeTexture8::CCubeTexture8() {

    m_pd3dtc = NULL;
}

//******************************************************************************
CCubeTexture8::~CCubeTexture8() {
}

//******************************************************************************
BOOL CCubeTexture8::Create(CDevice8* pDevice, LPDIRECT3DCUBETEXTURE8 pd3dtc) {

    if (m_pd3dtc) {
        return FALSE;
    }

    if (CBaseTexture8::Create(pDevice, (LPDIRECT3DBASETEXTURE8)pd3dtc)) {
        m_pd3dtc = pd3dtc;
    }

    return (BOOL)m_pd3dtc;
}

//******************************************************************************
LPDIRECT3DCUBETEXTURE8 CCubeTexture8::GetIDirect3DCubeTexture8() {

    return m_pd3dtc;
}

//******************************************************************************
HRESULT CCubeTexture8::GetLevelDesc(UINT uLevel, D3DSURFACE_DESC* pd3dsd) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dtc) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dtc->GetLevelDesc(uLevel, pd3dsd);
}

//******************************************************************************
HRESULT CCubeTexture8::LockRect(D3DCUBEMAP_FACES d3dcf, UINT uLevel, D3DLOCKED_RECT* pd3dlr, RECT* prect, DWORD dwFlags) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dtc) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dtc->LockRect(d3dcf, uLevel, pd3dlr, prect, dwFlags);
}

//******************************************************************************
HRESULT CCubeTexture8::UnlockRect(D3DCUBEMAP_FACES d3dcf, UINT uLevel) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dtc) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dtc->UnlockRect(d3dcf, uLevel);
}

//******************************************************************************
HRESULT CCubeTexture8::AddDirtyRect(D3DCUBEMAP_FACES d3dcf, RECT* prectDirty) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dtc) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX
    return m_pd3dtc->AddDirtyRect(d3dcf, prectDirty);
#else
    Log(LOG_FAIL, TEXT("IDirect3DCubeTexture8::AddDirtyRect is not implemented on XBox"));
    return E_NOTIMPL;
#endif // UNDER_XBOX
}

//******************************************************************************
HRESULT CCubeTexture8::GetCubeMapSurface(D3DCUBEMAP_FACES d3dcf, UINT uLevel, CSurface8** ppCubeMapSurface) {

    LPDIRECT3DSURFACE8  pd3ds;
    CSurface8*          pSurface;
    HRESULT             hr;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dtc) {
        return ERR_NOTCREATED;
    }

    if (!ppCubeMapSurface) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppCubeMapSurface = NULL;

    hr = m_pd3dtc->GetCubeMapSurface(d3dcf, uLevel, &pd3ds);
    if (SUCCEEDED(hr)) {
        
        if (m_pDevice->FindObject((LPVOID)pd3ds, (LPVOID*)&pSurface)) {
            pSurface->CObject::AddRef();
        }
        else {
            pSurface = new CSurface8();
            if (!pSurface) {
                pd3ds->Release();
                return E_OUTOFMEMORY;
            }

            if (!pSurface->Create(m_pDevice, pd3ds)) {
                pd3ds->Release();
                return ERR_LOCUSFAIL;
            }
        }

        *ppCubeMapSurface = pSurface;
    }

    return hr;
}

//******************************************************************************
// CCCubeTexture8
//******************************************************************************

//******************************************************************************
CCCubeTexture8::CCCubeTexture8() {

    memset(m_pslockd, 0, 6 * sizeof(PSLOCKDESC));
}

//******************************************************************************
CCCubeTexture8::~CCCubeTexture8() {

    UINT i;
    for (i = 0; i < 6; i++) {
        if (m_pslockd[i]) {
            MemFree(m_pslockd[i]);
        }
    }
}

//******************************************************************************
BOOL CCCubeTexture8::Create(CClient* pClient, CDevice8* pDevice, LPDIRECT3DCUBETEXTURE8 pd3dtc) {

    UINT i;

    if (!pClient) {
        return FALSE;
    }
    m_pClient = pClient;
    if (!CCubeTexture8::Create(pDevice, pd3dtc)) {
        return FALSE;
    }

    for (i = 0; i < 6; i++) {
        m_pslockd[i] = (PSLOCKDESC)MemAlloc(pd3dtc->GetLevelCount() * sizeof(SLOCKDESC));
        if (!m_pslockd[i]) {
            return FALSE;
        }
    }

    return TRUE;
}

//******************************************************************************
ULONG CCCubeTexture8::AddRef() {

    return CCResource8_AddRef(this, m_pClient);
}

//******************************************************************************
ULONG CCCubeTexture8::Release() {

    return CCResource8_Release(this, m_pClient);
}

//******************************************************************************
D3DRESOURCETYPE CCCubeTexture8::GetType() {

    return CCResource8_GetType(this, m_pClient);
}

//******************************************************************************
HRESULT CCCubeTexture8::GetDevice(CDevice8** ppDevice) {

    return CCResource8_GetDevice(this, m_pClient, ppDevice);
}

//******************************************************************************
HRESULT CCCubeTexture8::GetPrivateData(REFGUID refguid, void* pvData, DWORD* pdwSizeOfData) {

    return CCResource8_GetPrivateData(this, m_pClient, refguid, pvData, pdwSizeOfData);
}

//******************************************************************************
HRESULT CCCubeTexture8::SetPrivateData(REFGUID refguid, void* pvData, DWORD dwSizeOfData, DWORD dwFlags) {

    return CCResource8_SetPrivateData(this, m_pClient, refguid, pvData, dwSizeOfData, dwFlags);
}

//******************************************************************************
HRESULT CCCubeTexture8::FreePrivateData(REFGUID refguid) {

    return CCResource8_FreePrivateData(this, m_pClient, refguid);
}

//******************************************************************************
DWORD CCCubeTexture8::GetPriority() {

    return CCResource8_GetPriority(this, m_pClient);
}

//******************************************************************************
DWORD CCCubeTexture8::SetPriority(DWORD dwNewPriority) {

    return CCResource8_SetPriority(this, m_pClient, dwNewPriority);
}

//******************************************************************************
void CCCubeTexture8::PreLoad() {

    CCResource8_PreLoad(this, m_pClient);
}

//******************************************************************************
DWORD CCCubeTexture8::GetLevelCount() {

    return CCBaseTexture8_GetLevelCount(this, m_pClient);
}

//******************************************************************************
DWORD CCCubeTexture8::GetLOD() {

    return CCBaseTexture8_GetLOD(this, m_pClient);
}

//******************************************************************************
DWORD CCCubeTexture8::SetLOD(DWORD dwNewLOD) {

    return CCBaseTexture8_SetLOD(this, m_pClient, dwNewLOD);
}

//******************************************************************************
HRESULT CCCubeTexture8::GetLevelDesc(UINT uLevel, D3DSURFACE_DESC* pd3dsd) {

#ifndef UNDER_XBOX
    D3DSURFACE_DESC         d3dsd;
#else
    WINX_D3DSURFACE_DESC    d3dsd;
#endif // UNDER_XBOX
    HRESULT                 hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dtc) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dtc->GetLevelDesc(uLevel, pd3dsd);

#ifndef UNDER_XBOX
    if (m_pClient->CallMethod(MID_CTX8_GetLevelDesc, this, &hrS, uLevel, &d3dsd, sizeof(D3DSURFACE_DESC))) {
#else
    if (m_pClient->CallMethod(MID_CTX8_GetLevelDesc, this, &hrS, uLevel, &d3dsd, sizeof(WINX_D3DSURFACE_DESC))) {
#endif // UNDER_XBOX
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DCubeTexture8::GetLevelDesc result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
        else {
#ifndef UNDER_XBOX
            if (memcmp(pd3dsd, &d3dsd, sizeof(D3DSURFACE_DESC))) {
#else
            if (pd3dsd->Type != d3dsd.Type ||
                pd3dsd->Width != d3dsd.Width ||
                pd3dsd->Height != d3dsd.Height ||
                pd3dsd->MultiSampleType != d3dsd.MultiSampleType)
            {
#endif // UNDER_XBOX
                Log(LOG_WARN, TEXT("IDirect3DCubeTexture8::GetLevelDesc returned an inconsistent description"));
            }
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCCubeTexture8::LockRect(D3DCUBEMAP_FACES d3dcf, UINT uLevel, D3DLOCKED_RECT* pd3dlr, RECT* prect, DWORD dwFlags) {

    RECT    rectNULL = {-1, -1, -1, -1};
    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dtc) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dtc->LockRect(d3dcf, uLevel, pd3dlr, prect, dwFlags);

    if (pd3dlr) {
        memcpy(&m_pslockd[d3dcf][uLevel].d3dlr, pd3dlr, sizeof(D3DLOCKED_RECT));
    }
    else {
        m_pslockd[d3dcf][uLevel].d3dlr.pBits = 0;
    }
    if (!prect) {
        prect = &rectNULL;
    }
    memcpy(&m_pslockd[d3dcf][uLevel].rect, prect, sizeof(RECT));
    m_pslockd[d3dcf][uLevel].dwFlags = dwFlags;

    if (m_pClient->CallMethod(MID_CTX8_LockRect, this, &hrS, d3dcf, uLevel, &m_pslockd[d3dcf][uLevel].d3dlrSrv, sizeof(D3DLOCKED_RECT), &m_pslockd[d3dcf][uLevel].rect, sizeof(RECT), dwFlags)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DCubeTexture8::LockRect result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCCubeTexture8::UnlockRect(D3DCUBEMAP_FACES d3dcf, UINT uLevel) {

    LPBYTE  pBits;
    DWORD   dwSize;
    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dtc) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    if (m_pslockd[d3dcf][uLevel].dwFlags & D3DLOCK_READONLY) {
        pBits = NULL;
        dwSize = 0;
    }
    else {
        D3DSURFACE_DESC d3dsd;
        DWORD           dwWidth, dwHeight, dwBitDepth;
        UINT            i;

        m_pd3dtc->GetLevelDesc(uLevel, &d3dsd);
        if (m_pslockd[d3dcf][uLevel].rect.left == -1) {
            dwWidth = d3dsd.Width;
            dwHeight = d3dsd.Height;
        }
        else {
            dwWidth = m_pslockd[d3dcf][uLevel].rect.right - m_pslockd[d3dcf][uLevel].rect.left;
            dwHeight = m_pslockd[d3dcf][uLevel].rect.bottom - m_pslockd[d3dcf][uLevel].rect.top;
        }
        dwBitDepth = FormatToBitDepth(d3dsd.Format);
        dwSize = dwHeight * dwWidth * dwBitDepth / 8;
        pBits = (LPBYTE)MemAlloc(dwSize);

#ifdef UNDER_XBOX
        if (!XGIsSwizzledFormat(d3dsd.Format)) {
#endif
            if (IsCompressedFormat(d3dsd.Format)) {
                memcpy(pBits, m_pslockd[d3dcf][uLevel].d3dlr.pBits, dwWidth * dwHeight * dwBitDepth / 8);
            }
            else {
                for (i = 0; i < dwHeight; i++) {
                    memcpy(pBits + i * dwWidth * dwBitDepth / 8, (LPBYTE)m_pslockd[d3dcf][uLevel].d3dlr.pBits + i * m_pslockd[d3dcf][uLevel].d3dlr.Pitch, dwWidth * dwBitDepth / 8);
                }
            }
#ifdef UNDER_XBOX
        }
        else {
            // Since locking a subrect on a swizzled surface is unsupported on Xbox, simply unswizzle the entire surface
            XGUnswizzleRect(m_pslockd[d3dcf][uLevel].d3dlr.pBits, dwWidth, dwHeight, NULL, pBits, 
                            dwWidth * dwBitDepth / 8, NULL, dwBitDepth / 8);
        }
#endif
    }

    hrC = m_pd3dtc->UnlockRect(d3dcf, uLevel);

    if (m_pClient->CallMethod(MID_CTX8_UnlockRect, this, &hrS, d3dcf, uLevel, &m_pslockd[d3dcf][uLevel].d3dlrSrv, sizeof(D3DLOCKED_RECT), &m_pslockd[d3dcf][uLevel].rect, sizeof(RECT), m_pslockd[d3dcf][uLevel].dwFlags, pBits, dwSize)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DCubeTexture8::UnlockRect result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    if (pBits) {
        MemFree(pBits);
    }

    return hrC;
}

//******************************************************************************
HRESULT CCCubeTexture8::AddDirtyRect(D3DCUBEMAP_FACES d3dcf, RECT* prectDirty) {

    RECT    rectNULL = {-1, -1, -1, -1};
    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dtc) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX
    hrC = m_pd3dtc->AddDirtyRect(d3dcf, prectDirty);

    if (!prectDirty) {
        prectDirty = &rectNULL;
    }

    if (m_pClient->CallMethod(MID_CTX8_AddDirtyRect, this, &hrS, d3dcf, prectDirty, sizeof(RECT))) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DCubeTexture8::AddDirtyRect result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
#else
    Log(LOG_FAIL, TEXT("IDirect3DCubeTexture8::AddDirtyRect is not implemented on XBox"));
    return E_NOTIMPL;
#endif // UNDER_XBOX
}

//******************************************************************************
HRESULT CCCubeTexture8::GetCubeMapSurface(D3DCUBEMAP_FACES d3dcf, UINT uLevel, CSurface8** ppCubeMapSurface) {

    LPDIRECT3DSURFACE8  pd3ds;
    CCSurface8*         pSurface;
    HRESULT             hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dtc) {
        return ERR_NOTCREATED;
    }

    if (!ppCubeMapSurface) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppCubeMapSurface = NULL;

    hrC = m_pd3dtc->GetCubeMapSurface(d3dcf, uLevel, &pd3ds);
    if (SUCCEEDED(hrC)) {
        
        if (m_pDevice->FindObject((LPVOID)pd3ds, (LPVOID*)&pSurface)) {
            pSurface->CObject::AddRef();
        }
        else {
            pSurface = new CCSurface8();
            if (!pSurface) {
                pd3ds->Release();
                return E_OUTOFMEMORY;
            }

            if (!pSurface->Create(m_pClient, m_pDevice, pd3ds)) {
                pd3ds->Release();
                return ERR_LOCUSFAIL;
            }
        }

        *ppCubeMapSurface = pSurface;
    }
    else {
        pSurface = NULL;
    }

    if (m_pClient->CallMethod(MID_CTX8_GetCubeMapSurface, this, &hrS, d3dcf, uLevel, &pSurface)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DCubeTexture8::GetCubeMapSurface result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\consolbk.bmp.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    consolbk.bmp.cpp

Description

    Data file for the resource consolbk.bmp.

*******************************************************************************/

#include "d3dlocus.h"

static BYTE g_consolbk[] = {

   0x42, 0x4D, 0x38, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x28, 0x00, 
   0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC3, 0x0E, 0x00, 0x00, 0xC3, 0x0E, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 0x27, 
   0x27, 0x27, 0x28, 0x28, 0x28, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 
   0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 
   0x37, 0x36, 0x37, 0x38, 0x37, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x39, 
   0x39, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3B, 0x3C, 0x3B, 0x3D, 0x3C, 0x3D, 
   0x3F, 0x3F, 0x3F, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x40, 
   0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 
   0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x40, 0x3D, 0x40, 0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x40, 0x41, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x42, 0x40, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x41, 0x3F, 0x41, 0x3F, 0x3E, 0x3F, 0x3C, 0x3B, 
   0x3C, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x35, 0x37, 0x35, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x30, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2B, 0x2C, 0x2B, 
   0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x25, 0x25, 0x25, 0x22, 0x23, 0x22, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 0x23, 
   0x23, 0x24, 0x23, 0x24, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 
   0x25, 0x24, 0x25, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 0x25, 0x25, 0x27, 
   0x26, 0x27, 0x26, 0x25, 0x26, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x25, 0x24, 
   0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x23, 0x24, 0x23, 0x23, 0x24, 0x23, 
   0x21, 0x22, 0x21, 0x21, 0x20, 0x21, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 0x21, 0x21, 0x21, 0x22, 
   0x23, 0x22, 0x25, 0x24, 0x25, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 
   0x29, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x2A, 0x28, 0x2A, 0x28, 0x28, 0x28, 
   0x27, 0x26, 0x27, 0x23, 0x24, 0x23, 0x23, 0x22, 0x23, 0x20, 0x20, 0x20, 0x1E, 0x1D, 0x1E, 0x1B, 
   0x1A, 0x1B, 0x1A, 0x19, 0x1A, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x15, 0x16, 0x15, 0x14, 0x15, 
   0x14, 0x14, 0x15, 0x14, 0x14, 0x15, 0x14, 0x14, 0x15, 0x14, 0x14, 0x15, 0x14, 0x12, 0x14, 0x12, 
   0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x13, 0x13, 0x13, 0x15, 0x15, 0x15, 0x19, 
   0x18, 0x19, 0x1B, 0x1B, 0x1B, 0x1C, 0x1D, 0x1C, 0x1E, 0x1E, 0x1E, 0x20, 0x1F, 0x20, 0x21, 0x20, 
   0x21, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x25, 0x24, 0x25, 0x25, 0x26, 0x25, 0x29, 0x28, 0x29, 
   0x2A, 0x2B, 0x2A, 0x2F, 0x2E, 0x2F, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x35, 
   0x34, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x3B, 0x3B, 0x3B, 
   0x3E, 0x3D, 0x3E, 0x41, 0x3F, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x42, 
   0x44, 0x42, 0x44, 0x45, 0x44, 0x46, 0x47, 0x46, 0x47, 0x48, 0x47, 0x48, 0x49, 0x48, 0x4A, 0x4A, 
   0x4A, 0x4A, 0x4C, 0x4A, 0x4C, 0x4D, 0x4C, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 
   0x50, 0x50, 0x50, 0x4F, 0x4F, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4E, 
   0x4D, 0x4E, 0x4C, 0x4C, 0x4C, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x49, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x46, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x44, 0x44, 0x44, 0x44, 0x43, 
   0x44, 0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3D, 0x3E, 
   0x3C, 0x3B, 0x3C, 0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 
   0x34, 0x34, 0x33, 0x34, 0x33, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x37, 0x36, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 
   0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x25, 0x26, 0x25, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 
   0x27, 0x27, 0x29, 0x28, 0x29, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 
   0x33, 0x33, 0x33, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x37, 
   0x37, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x39, 0x3A, 
   0x39, 0x3B, 0x3B, 0x3B, 0x3D, 0x3B, 0x3D, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3D, 0x3B, 0x3D, 
   0x40, 0x40, 0x40, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x42, 0x41, 0x42, 0x3E, 
   0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3D, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 
   0x3C, 0x3D, 0x3C, 0x3F, 0x3D, 0x3F, 0x3E, 0x3F, 0x3E, 0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x3F, 0x40, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 
   0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x3E, 
   0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 
   0x3B, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 
   0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x35, 0x36, 0x35, 0x33, 
   0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 0x31, 
   0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2B, 0x2B, 0x2B, 
   0x2A, 0x29, 0x2A, 0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 0x23, 0x25, 0x23, 0x23, 0x23, 0x23, 0x21, 
   0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x24, 0x23, 
   0x24, 0x24, 0x25, 0x24, 0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 
   0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x26, 
   0x26, 0x26, 0x27, 0x26, 0x27, 0x25, 0x25, 0x25, 0x23, 0x24, 0x23, 0x25, 0x24, 0x25, 0x25, 0x26, 
   0x25, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x27, 0x25, 0x27, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 
   0x22, 0x23, 0x22, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x21, 0x20, 0x21, 0x21, 0x21, 0x24, 
   0x23, 0x24, 0x25, 0x24, 0x25, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x28, 0x28, 
   0x28, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x27, 0x27, 0x27, 
   0x26, 0x26, 0x26, 0x25, 0x24, 0x25, 0x22, 0x22, 0x22, 0x20, 0x1F, 0x20, 0x1C, 0x1E, 0x1C, 0x1A, 
   0x1B, 0x1A, 0x1A, 0x19, 0x1A, 0x18, 0x19, 0x18, 0x17, 0x18, 0x17, 0x17, 0x17, 0x17, 0x15, 0x16, 
   0x15, 0x16, 0x16, 0x16, 0x15, 0x16, 0x15, 0x15, 0x16, 0x15, 0x16, 0x16, 0x16, 0x14, 0x15, 0x14, 
   0x13, 0x14, 0x13, 0x14, 0x14, 0x14, 0x13, 0x14, 0x13, 0x15, 0x14, 0x15, 0x17, 0x17, 0x17, 0x19, 
   0x19, 0x19, 0x1D, 0x1C, 0x1D, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x21, 0x20, 0x21, 0x21, 0x22, 
   0x21, 0x23, 0x23, 0x23, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x28, 0x28, 0x28, 0x29, 0x2B, 0x29, 
   0x2B, 0x2D, 0x2B, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x39, 0x38, 
   0x39, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x37, 0x39, 0x37, 0x3A, 0x3A, 0x3A, 0x3D, 0x3B, 0x3D, 
   0x3F, 0x3D, 0x3F, 0x40, 0x41, 0x40, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 
   0x44, 0x44, 0x45, 0x45, 0x45, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x4A, 
   0x49, 0x4C, 0x4B, 0x4C, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4F, 0x4F, 0x4F, 0x4E, 0x4F, 0x4E, 
   0x4F, 0x4F, 0x4F, 0x4F, 0x4E, 0x4F, 0x4E, 0x4F, 0x4E, 0x4C, 0x4E, 0x4C, 0x4D, 0x4C, 0x4D, 0x4C, 
   0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 0x48, 0x49, 
   0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x44, 
   0x46, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x43, 0x42, 
   0x43, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3E, 0x3E, 
   0x3B, 0x3B, 0x3B, 0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 0x37, 0x35, 0x37, 0x35, 0x34, 0x35, 0x33, 
   0x34, 0x33, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 
   0x36, 0x37, 0x36, 0x37, 0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 
   0x28, 0x28, 0x29, 0x29, 0x29, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2E, 0x2D, 0x30, 0x2F, 0x30, 0x30, 0x31, 0x30, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 
   0x37, 0x36, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 
   0x3A, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3E, 0x3C, 0x3E, 
   0x40, 0x3F, 0x40, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x42, 0x41, 0x42, 0x41, 
   0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x40, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 
   0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3C, 0x3D, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3E, 0x3E, 0x3E, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x3F, 0x3F, 0x3F, 0x3D, 0x3E, 
   0x3D, 0x3E, 0x3C, 0x3E, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 
   0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3D, 
   0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3B, 0x3C, 0x3B, 0x3B, 0x3A, 
   0x3B, 0x38, 0x39, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x37, 0x36, 0x37, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 0x31, 
   0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2B, 0x2B, 0x2B, 
   0x2A, 0x2A, 0x2A, 0x27, 0x28, 0x27, 0x27, 0x26, 0x27, 0x25, 0x25, 0x25, 0x24, 0x23, 0x24, 0x22, 
   0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x23, 0x23, 0x23, 0x24, 0x24, 
   0x24, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x28, 0x26, 0x28, 0x27, 0x26, 0x27, 
   0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x25, 0x26, 0x25, 0x27, 0x26, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x25, 0x27, 0x25, 0x26, 0x25, 0x25, 0x26, 0x25, 0x27, 0x26, 
   0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x25, 0x26, 0x24, 0x25, 0x24, 
   0x23, 0x24, 0x23, 0x22, 0x23, 0x22, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x22, 
   0x23, 0x22, 0x23, 0x25, 0x23, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x28, 0x28, 
   0x28, 0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 
   0x26, 0x26, 0x26, 0x23, 0x24, 0x23, 0x23, 0x22, 0x23, 0x20, 0x1F, 0x20, 0x1E, 0x1D, 0x1E, 0x1C, 
   0x1B, 0x1C, 0x1A, 0x1A, 0x1A, 0x19, 0x19, 0x19, 0x17, 0x19, 0x17, 0x18, 0x18, 0x18, 0x16, 0x17, 
   0x16, 0x14, 0x16, 0x14, 0x16, 0x15, 0x16, 0x16, 0x17, 0x16, 0x17, 0x16, 0x17, 0x17, 0x16, 0x17, 
   0x14, 0x15, 0x14, 0x14, 0x15, 0x14, 0x14, 0x14, 0x14, 0x17, 0x17, 0x17, 0x18, 0x19, 0x18, 0x1A, 
   0x1A, 0x1A, 0x1D, 0x1D, 0x1D, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x22, 0x22, 0x22, 0x22, 
   0x22, 0x24, 0x23, 0x24, 0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 0x29, 0x29, 0x29, 0x2B, 0x2C, 0x2B, 
   0x2E, 0x2E, 0x2E, 0x32, 0x31, 0x32, 0x32, 0x33, 0x32, 0x34, 0x35, 0x34, 0x36, 0x36, 0x36, 0x39, 
   0x37, 0x39, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x39, 0x39, 0x39, 0x3B, 0x3A, 0x3B, 0x3C, 0x3C, 0x3C, 
   0x41, 0x3F, 0x41, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x44, 
   0x45, 0x44, 0x44, 0x45, 0x44, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x49, 
   0x49, 0x4B, 0x4B, 0x4B, 0x4C, 0x4D, 0x4C, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 
   0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4D, 0x4E, 0x4D, 0x4B, 0x4D, 0x4B, 0x4A, 0x4C, 0x4A, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x49, 0x49, 
   0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x48, 0x47, 0x48, 
   0x46, 0x47, 0x46, 0x48, 0x47, 0x48, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x45, 0x46, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 
   0x42, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3F, 0x3E, 0x3C, 0x3D, 0x3C, 
   0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 0x38, 0x37, 0x38, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x37, 0x36, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x29, 0x28, 0x29, 0x2A, 
   0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x30, 0x31, 0x30, 0x31, 0x33, 0x31, 0x35, 0x33, 0x35, 
   0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x37, 
   0x37, 0x37, 0x38, 0x37, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3B, 0x3B, 0x3B, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3E, 0x3C, 
   0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x41, 
   0x42, 0x41, 0x3F, 0x3F, 0x3F, 0x3D, 0x3F, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 
   0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 
   0x3C, 0x3B, 0x3C, 0x3E, 0x3B, 0x3E, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3C, 
   0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3F, 0x3E, 0x3F, 0x3D, 0x3D, 0x3D, 0x3B, 0x3C, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 
   0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x41, 0x40, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3E, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3E, 0x3B, 0x3E, 0x3A, 0x3A, 
   0x3A, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 0x33, 0x34, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x30, 0x30, 
   0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2E, 0x2F, 0x2E, 0x2D, 0x2D, 0x2D, 
   0x2A, 0x2B, 0x2A, 0x28, 0x28, 0x28, 0x25, 0x26, 0x25, 0x24, 0x25, 0x24, 0x25, 0x24, 0x25, 0x23, 
   0x22, 0x23, 0x22, 0x22, 0x22, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 
   0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 
   0x26, 0x26, 0x26, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x27, 0x25, 0x27, 0x27, 0x26, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 
   0x28, 0x27, 0x28, 0x27, 0x28, 0x28, 0x28, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 
   0x23, 0x24, 0x23, 0x25, 0x23, 0x25, 0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x22, 0x23, 
   0x23, 0x23, 0x24, 0x24, 0x24, 0x24, 0x26, 0x24, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 
   0x28, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 
   0x27, 0x26, 0x27, 0x25, 0x24, 0x25, 0x22, 0x21, 0x22, 0x20, 0x1F, 0x20, 0x1C, 0x1E, 0x1C, 0x1A, 
   0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x1A, 0x19, 0x17, 0x19, 0x17, 0x16, 0x17, 
   0x16, 0x17, 0x17, 0x17, 0x16, 0x16, 0x16, 0x16, 0x17, 0x16, 0x17, 0x18, 0x17, 0x17, 0x17, 0x17, 
   0x16, 0x18, 0x16, 0x17, 0x18, 0x17, 0x17, 0x17, 0x17, 0x19, 0x18, 0x19, 0x1A, 0x1A, 0x1A, 0x1B, 
   0x1C, 0x1B, 0x1E, 0x1D, 0x1E, 0x20, 0x1F, 0x20, 0x22, 0x21, 0x22, 0x22, 0x23, 0x22, 0x24, 0x23, 
   0x24, 0x25, 0x24, 0x25, 0x26, 0x27, 0x26, 0x27, 0x28, 0x27, 0x2A, 0x2A, 0x2A, 0x2D, 0x2D, 0x2D, 
   0x2F, 0x30, 0x2F, 0x32, 0x32, 0x32, 0x34, 0x34, 0x34, 0x37, 0x36, 0x37, 0x38, 0x38, 0x38, 0x39, 
   0x39, 0x39, 0x37, 0x39, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x35, 0x36, 
   0x35, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x3A, 0x39, 0x3A, 0x3C, 0x3C, 0x3C, 0x3C, 0x3E, 0x3C, 
   0x40, 0x40, 0x40, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x44, 
   0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x47, 0x45, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x4A, 0x49, 
   0x4A, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4C, 0x4E, 0x4C, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4C, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4A, 0x4A, 0x4A, 0x49, 
   0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4A, 0x4B, 0x4A, 0x4A, 0x49, 
   0x4A, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x45, 0x47, 0x45, 0x45, 0x45, 0x45, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x40, 0x41, 
   0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3C, 0x3E, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3B, 0x3C, 0x39, 0x3A, 0x39, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x36, 
   0x36, 0x36, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 
   0x35, 0x37, 0x36, 0x37, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 
   0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x2A, 0x29, 0x2A, 0x2A, 
   0x2B, 0x2A, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 
   0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 
   0x35, 0x33, 0x35, 0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x37, 
   0x37, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3C, 0x3B, 0x3C, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3E, 0x3E, 0x3E, 
   0x40, 0x40, 0x40, 0x44, 0x42, 0x44, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x41, 
   0x42, 0x41, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3F, 
   0x3E, 0x3D, 0x3F, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x3B, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 0x3E, 0x3C, 0x3E, 
   0x3F, 0x3E, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3D, 0x3E, 0x3C, 
   0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 0x3A, 0x3B, 0x39, 0x39, 
   0x39, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 0x37, 0x38, 0x37, 0x36, 0x37, 0x37, 0x36, 0x37, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x33, 0x33, 0x33, 0x31, 
   0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x30, 0x32, 0x30, 0x30, 0x2F, 
   0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 
   0x2B, 0x2B, 0x2B, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x23, 
   0x23, 0x23, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x25, 0x23, 0x25, 0x23, 0x24, 0x23, 0x25, 0x24, 
   0x25, 0x25, 0x26, 0x25, 0x26, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 
   0x25, 0x26, 0x25, 0x25, 0x26, 0x25, 0x25, 0x24, 0x25, 0x25, 0x26, 0x25, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x28, 
   0x29, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x24, 0x24, 0x24, 0x22, 0x24, 0x22, 0x22, 0x23, 0x22, 0x23, 
   0x22, 0x23, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x28, 0x27, 
   0x28, 0x29, 0x27, 0x29, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 
   0x26, 0x26, 0x26, 0x23, 0x24, 0x23, 0x22, 0x22, 0x22, 0x20, 0x1F, 0x20, 0x1E, 0x1D, 0x1E, 0x1C, 
   0x1B, 0x1C, 0x1A, 0x1B, 0x1A, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x18, 0x19, 0x18, 0x18, 0x18, 
   0x18, 0x18, 0x18, 0x18, 0x16, 0x17, 0x16, 0x18, 0x18, 0x18, 0x19, 0x19, 0x19, 0x19, 0x18, 0x19, 
   0x18, 0x19, 0x18, 0x19, 0x19, 0x19, 0x19, 0x1A, 0x19, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1F, 
   0x1E, 0x1F, 0x20, 0x1F, 0x20, 0x22, 0x21, 0x22, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x25, 0x24, 
   0x25, 0x25, 0x26, 0x25, 0x26, 0x27, 0x26, 0x28, 0x29, 0x28, 0x2C, 0x2B, 0x2C, 0x2D, 0x2D, 0x2D, 
   0x30, 0x30, 0x30, 0x33, 0x33, 0x33, 0x35, 0x35, 0x35, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x39, 
   0x3A, 0x39, 0x39, 0x3A, 0x39, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 
   0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x39, 0x3B, 0x39, 0x3B, 0x3C, 0x3B, 0x40, 0x3E, 0x40, 
   0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x44, 
   0x44, 0x44, 0x45, 0x45, 0x45, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 
   0x48, 0x49, 0x4B, 0x49, 0x4B, 0x4B, 0x4B, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4C, 0x4D, 0x4B, 0x4A, 0x4B, 0x49, 0x49, 0x49, 0x48, 
   0x48, 0x48, 0x49, 0x49, 0x49, 0x4B, 0x4A, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 0x4C, 0x4B, 0x4A, 0x4A, 
   0x4A, 0x4A, 0x49, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x42, 
   0x43, 0x42, 0x43, 0x43, 0x43, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3F, 0x40, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3B, 0x3C, 
   0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x37, 
   0x36, 0x37, 0x35, 0x36, 0x35, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 
   0x35, 0x36, 0x35, 0x33, 0x34, 0x33, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x2B, 
   0x2A, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x32, 0x31, 0x32, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 
   0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x37, 0x35, 0x37, 0x36, 0x36, 0x36, 0x36, 
   0x36, 0x36, 0x36, 0x37, 0x36, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x3A, 0x3A, 
   0x3A, 0x3B, 0x3B, 0x3B, 0x3E, 0x3D, 0x3E, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3E, 0x3F, 0x3E, 
   0x41, 0x42, 0x41, 0x43, 0x44, 0x43, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x43, 0x43, 0x43, 0x42, 
   0x43, 0x42, 0x40, 0x41, 0x40, 0x3D, 0x3F, 0x3D, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3A, 0x3B, 0x3A, 
   0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x38, 
   0x38, 0x38, 0x38, 0x3A, 0x38, 0x3A, 0x39, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x38, 0x39, 
   0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3B, 0x3A, 0x3B, 0x3C, 0x3C, 0x3C, 
   0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3C, 0x3E, 0x3B, 
   0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x37, 0x38, 0x35, 0x36, 0x35, 
   0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x35, 0x35, 0x35, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 
   0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x2F, 
   0x30, 0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 
   0x2B, 0x2B, 0x2B, 0x29, 0x28, 0x29, 0x28, 0x27, 0x28, 0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 0x23, 
   0x25, 0x23, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x23, 0x25, 0x23, 0x25, 0x25, 0x25, 0x25, 0x25, 
   0x25, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 
   0x27, 0x25, 0x27, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x28, 0x28, 0x28, 0x29, 0x29, 
   0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 
   0x27, 0x27, 0x27, 0x27, 0x25, 0x27, 0x26, 0x26, 0x26, 0x23, 0x25, 0x23, 0x25, 0x23, 0x25, 0x23, 
   0x24, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x25, 0x26, 0x25, 0x27, 0x26, 0x27, 0x25, 0x26, 
   0x25, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x29, 0x28, 0x29, 
   0x26, 0x27, 0x26, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x1F, 0x20, 0x1F, 0x1E, 0x1E, 0x1E, 0x1C, 
   0x1C, 0x1C, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1A, 0x19, 0x1A, 0x18, 0x19, 
   0x18, 0x18, 0x18, 0x18, 0x17, 0x18, 0x17, 0x1A, 0x19, 0x1A, 0x19, 0x1B, 0x19, 0x1A, 0x1A, 0x1A, 
   0x1B, 0x1B, 0x1B, 0x1C, 0x1B, 0x1C, 0x1A, 0x1C, 0x1A, 0x1C, 0x1C, 0x1C, 0x1D, 0x1E, 0x1D, 0x20, 
   0x20, 0x20, 0x22, 0x20, 0x22, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x25, 0x24, 0x25, 0x25, 0x26, 
   0x25, 0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x2B, 0x2A, 0x2B, 0x2D, 0x2C, 0x2D, 0x2F, 0x2E, 0x2F, 
   0x32, 0x31, 0x32, 0x33, 0x34, 0x33, 0x35, 0x35, 0x35, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x39, 
   0x3A, 0x39, 0x38, 0x3A, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 
   0x38, 0x37, 0x37, 0x37, 0x37, 0x39, 0x37, 0x3B, 0x3B, 0x3B, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 
   0x40, 0x41, 0x40, 0x42, 0x43, 0x42, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x46, 0x45, 0x46, 0x44, 
   0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x47, 0x45, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 
   0x48, 0x4A, 0x4B, 0x4A, 0x4C, 0x4D, 0x4C, 0x4C, 0x4E, 0x4C, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 
   0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4C, 0x4C, 0x4C, 0x4A, 0x4A, 0x4A, 0x48, 0x49, 0x48, 0x47, 
   0x48, 0x47, 0x48, 0x48, 0x48, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 
   0x4A, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 
   0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x43, 
   0x43, 0x43, 0x41, 0x42, 0x41, 0x40, 0x41, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3D, 0x3B, 0x3D, 0x3A, 0x3A, 0x3A, 
   0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x38, 0x39, 0x38, 0x38, 0x37, 0x38, 0x37, 
   0x37, 0x37, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 
   0x33, 0x35, 0x33, 0x33, 0x33, 0x33, 0x28, 0x28, 0x28, 0x29, 0x2A, 0x29, 0x2A, 0x2B, 0x2A, 0x2D, 
   0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2F, 0x2E, 0x2F, 0x30, 0x2F, 
   0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 
   0x36, 0x36, 0x37, 0x36, 0x37, 0x38, 0x37, 0x38, 0x37, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x3A, 
   0x39, 0x3A, 0x3A, 0x3A, 0x3B, 0x3C, 0x3B, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 0x3F, 0x41, 0x41, 0x41, 
   0x43, 0x42, 0x43, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x43, 0x44, 0x43, 0x44, 
   0x43, 0x44, 0x41, 0x42, 0x41, 0x3F, 0x40, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 
   0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x38, 0x3A, 0x38, 
   0x38, 0x39, 0x38, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x36, 0x38, 0x38, 0x37, 0x38, 0x38, 
   0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 
   0x38, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x37, 0x39, 0x37, 0x3A, 0x3A, 0x3A, 0x3B, 0x3C, 0x3B, 
   0x3D, 0x3E, 0x3D, 0x3F, 0x3E, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3E, 0x3C, 0x3E, 0x3A, 
   0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 
   0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x35, 0x33, 0x35, 0x32, 0x33, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2D, 0x2F, 
   0x2C, 0x2B, 0x2C, 0x29, 0x29, 0x29, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x27, 0x26, 0x27, 0x26, 
   0x25, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x27, 0x25, 
   0x27, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 
   0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x25, 0x26, 0x25, 0x25, 0x26, 0x25, 0x27, 0x26, 0x27, 0x27, 
   0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x2B, 0x29, 0x2B, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 
   0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x25, 0x24, 0x25, 0x24, 
   0x24, 0x24, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x27, 0x26, 
   0x27, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 
   0x28, 0x27, 0x28, 0x26, 0x25, 0x26, 0x24, 0x23, 0x24, 0x20, 0x21, 0x20, 0x1E, 0x1E, 0x1E, 0x1C, 
   0x1D, 0x1C, 0x1B, 0x1C, 0x1B, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1A, 0x1A, 0x1A, 0x19, 0x19, 
   0x19, 0x18, 0x19, 0x18, 0x19, 0x19, 0x19, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x1C, 0x1C, 
   0x1C, 0x1B, 0x1C, 0x1C, 0x1D, 0x1C, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x20, 
   0x20, 0x20, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 
   0x26, 0x28, 0x27, 0x28, 0x2B, 0x29, 0x2B, 0x2E, 0x2B, 0x2E, 0x2D, 0x2D, 0x2D, 0x31, 0x30, 0x31, 
   0x32, 0x32, 0x32, 0x32, 0x35, 0x32, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 
   0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x3A, 0x3B, 0x3A, 0x3C, 0x3D, 0x3C, 0x40, 0x3E, 0x40, 
   0x40, 0x40, 0x40, 0x43, 0x41, 0x43, 0x43, 0x44, 0x43, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x49, 0x49, 
   0x49, 0x4B, 0x4B, 0x4B, 0x4C, 0x4E, 0x4C, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 
   0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4C, 0x4D, 0x4A, 0x4A, 0x4A, 0x48, 0x48, 0x48, 0x48, 
   0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x46, 0x48, 0x46, 0x46, 0x47, 0x46, 
   0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x43, 
   0x43, 0x43, 0x40, 0x42, 0x40, 0x3F, 0x40, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 
   0x3D, 0x3A, 0x3C, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x39, 0x3A, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 
   0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 
   0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2C, 0x2C, 0x2C, 0x2D, 
   0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 
   0x2F, 0x31, 0x30, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x36, 
   0x36, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x3A, 
   0x39, 0x3A, 0x3B, 0x3A, 0x3C, 0x3B, 0x3C, 0x3D, 0x3C, 0x3D, 0x40, 0x40, 0x40, 0x41, 0x43, 0x41, 
   0x43, 0x44, 0x43, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x44, 
   0x43, 0x44, 0x43, 0x42, 0x43, 0x41, 0x41, 0x41, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3C, 0x3E, 0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 
   0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x36, 0x35, 0x36, 0x36, 0x37, 0x36, 0x36, 
   0x37, 0x36, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x37, 0x38, 
   0x37, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 0x3A, 0x39, 0x3C, 0x3B, 0x3C, 
   0x3C, 0x3D, 0x3C, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3D, 0x3D, 0x3D, 0x3B, 
   0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x39, 0x38, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 
   0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x35, 0x33, 0x35, 0x33, 
   0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2D, 0x2D, 
   0x2C, 0x2C, 0x2C, 0x2B, 0x2A, 0x2B, 0x28, 0x28, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 
   0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x26, 
   0x26, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x25, 0x26, 0x25, 0x26, 0x26, 0x26, 0x26, 0x25, 0x26, 
   0x26, 0x25, 0x26, 0x26, 0x26, 0x26, 0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 
   0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x29, 0x29, 
   0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x2A, 0x28, 0x2A, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 
   0x25, 0x26, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x25, 0x24, 0x25, 0x25, 0x26, 
   0x25, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 
   0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x25, 0x24, 0x25, 0x22, 0x22, 0x22, 0x1F, 0x20, 0x1F, 0x1D, 
   0x1D, 0x1D, 0x1D, 0x1C, 0x1D, 0x1C, 0x1C, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1A, 0x1A, 
   0x1A, 0x19, 0x19, 0x19, 0x1B, 0x1A, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x1C, 0x1C, 0x1D, 0x1E, 0x1D, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x21, 0x20, 0x21, 0x22, 0x20, 0x22, 0x22, 0x22, 0x22, 0x23, 
   0x23, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x27, 0x26, 
   0x27, 0x29, 0x28, 0x29, 0x2B, 0x2A, 0x2B, 0x2B, 0x2D, 0x2B, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 
   0x32, 0x32, 0x32, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x39, 
   0x38, 0x39, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 
   0x37, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x3B, 0x3A, 0x3B, 0x3E, 0x3C, 0x3E, 0x3E, 0x3E, 0x3E, 
   0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 0x44, 0x43, 0x44, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 
   0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x48, 0x47, 0x48, 0x4A, 0x49, 
   0x4A, 0x4B, 0x4B, 0x4B, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4F, 0x4F, 0x4F, 0x4E, 0x4F, 0x4E, 
   0x4F, 0x4F, 0x4F, 0x4D, 0x4E, 0x4D, 0x4C, 0x4D, 0x4C, 0x4A, 0x4A, 0x4A, 0x48, 0x48, 0x48, 0x46, 
   0x47, 0x46, 0x47, 0x48, 0x47, 0x49, 0x49, 0x49, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4A, 0x4B, 0x49, 0x49, 0x49, 0x46, 0x49, 0x46, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 
   0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x43, 0x43, 0x43, 0x41, 
   0x42, 0x41, 0x40, 0x40, 0x40, 0x3E, 0x3E, 0x3E, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3B, 0x3B, 
   0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x38, 0x3A, 0x38, 0x38, 0x3A, 0x38, 0x39, 0x38, 0x39, 
   0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x37, 0x37, 
   0x37, 0x36, 0x37, 0x36, 0x35, 0x37, 0x35, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x35, 0x35, 0x35, 
   0x34, 0x33, 0x34, 0x31, 0x32, 0x31, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2E, 0x2D, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 
   0x36, 0x36, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x3A, 
   0x39, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3F, 0x3F, 0x3F, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 
   0x45, 0x44, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x43, 
   0x44, 0x43, 0x44, 0x43, 0x44, 0x41, 0x40, 0x41, 0x40, 0x3E, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 
   0x3F, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3A, 0x39, 0x3A, 0x38, 0x37, 0x38, 0x35, 0x36, 0x35, 
   0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x36, 
   0x35, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x36, 
   0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 
   0x3C, 0x3B, 0x3C, 0x3E, 0x3D, 0x3E, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3A, 
   0x3C, 0x3A, 0x3A, 0x39, 0x3A, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 
   0x38, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 
   0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 
   0x33, 0x34, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x33, 
   0x32, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x31, 0x32, 0x30, 0x30, 0x30, 0x2E, 0x2F, 0x2E, 
   0x2C, 0x2D, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 
   0x28, 0x28, 0x28, 0x28, 0x28, 0x29, 0x27, 0x29, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x27, 0x27, 
   0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 0x25, 0x26, 0x25, 
   0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x26, 
   0x26, 0x26, 0x27, 0x26, 0x27, 0x29, 0x27, 0x29, 0x28, 0x27, 0x28, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 
   0x2B, 0x29, 0x2B, 0x29, 0x29, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x27, 
   0x26, 0x27, 0x25, 0x25, 0x25, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x25, 0x26, 
   0x25, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 
   0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 0x23, 0x23, 0x23, 0x21, 0x20, 0x21, 0x1F, 
   0x1E, 0x1F, 0x1D, 0x1D, 0x1D, 0x1E, 0x1D, 0x1E, 0x1C, 0x1E, 0x1C, 0x1C, 0x1C, 0x1C, 0x1A, 0x1B, 
   0x1A, 0x1B, 0x1B, 0x1B, 0x1A, 0x1B, 0x1A, 0x1D, 0x1D, 0x1D, 0x1E, 0x1E, 0x1E, 0x20, 0x1F, 0x20, 
   0x20, 0x20, 0x20, 0x23, 0x22, 0x23, 0x22, 0x23, 0x22, 0x24, 0x23, 0x24, 0x25, 0x24, 0x25, 0x26, 
   0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x2A, 0x29, 
   0x2A, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2E, 0x2F, 0x2E, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 
   0x33, 0x32, 0x33, 0x34, 0x35, 0x34, 0x35, 0x36, 0x35, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x38, 0x37, 0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 
   0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x3B, 0x3B, 0x3B, 0x3C, 0x3D, 0x3C, 0x3F, 0x3F, 0x3F, 
   0x40, 0x40, 0x40, 0x43, 0x41, 0x43, 0x43, 0x43, 0x43, 0x45, 0x44, 0x45, 0x46, 0x46, 0x46, 0x46, 
   0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x49, 0x4A, 
   0x49, 0x4D, 0x4C, 0x4D, 0x4E, 0x4E, 0x4E, 0x4F, 0x50, 0x4F, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 
   0x50, 0x51, 0x50, 0x4F, 0x4F, 0x4F, 0x4D, 0x4D, 0x4D, 0x4A, 0x4B, 0x4A, 0x48, 0x48, 0x48, 0x48, 
   0x47, 0x48, 0x47, 0x47, 0x47, 0x4A, 0x49, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x49, 0x4A, 0x48, 0x47, 0x48, 0x47, 0x46, 0x47, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x40, 
   0x41, 0x40, 0x3F, 0x3D, 0x3F, 0x3C, 0x3C, 0x3C, 0x3B, 0x3A, 0x3B, 0x3B, 0x39, 0x3B, 0x39, 0x39, 
   0x39, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x37, 0x37, 
   0x37, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x34, 0x35, 0x34, 
   0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x2C, 0x2D, 0x2C, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x31, 0x31, 
   0x31, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x37, 
   0x37, 0x37, 0x37, 0x38, 0x37, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3A, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3E, 0x3F, 0x3E, 0x40, 0x41, 0x40, 0x42, 0x43, 0x42, 
   0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 
   0x44, 0x44, 0x43, 0x43, 0x43, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3C, 0x3E, 0x3C, 0x3D, 0x3C, 0x3D, 0x3A, 0x39, 0x3A, 0x36, 0x37, 0x36, 0x35, 0x35, 0x35, 
   0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x32, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x34, 0x34, 
   0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x37, 0x38, 0x37, 0x39, 0x3A, 0x39, 
   0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 0x3F, 0x3E, 0x3F, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 
   0x3A, 0x3C, 0x39, 0x39, 0x39, 0x38, 0x37, 0x38, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x39, 0x38, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x37, 0x38, 
   0x37, 0x38, 0x37, 0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 
   0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 
   0x2E, 0x2E, 0x2E, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x28, 
   0x29, 0x28, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x27, 0x28, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2B, 0x2A, 
   0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x27, 0x28, 0x27, 0x26, 
   0x26, 0x26, 0x27, 0x25, 0x27, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x25, 0x25, 
   0x25, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x27, 0x28, 0x27, 
   0x28, 0x28, 0x28, 0x27, 0x26, 0x27, 0x26, 0x25, 0x26, 0x23, 0x23, 0x23, 0x21, 0x20, 0x21, 0x1F, 
   0x1F, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1C, 0x1C, 
   0x1C, 0x1C, 0x1C, 0x1C, 0x1D, 0x1C, 0x1D, 0x1F, 0x1D, 0x1F, 0x20, 0x1F, 0x20, 0x21, 0x20, 0x21, 
   0x22, 0x21, 0x22, 0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x29, 0x2A, 0x29, 0x2B, 0x2B, 
   0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x32, 0x32, 0x32, 
   0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 
   0x37, 0x37, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 
   0x37, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x3B, 0x3A, 0x3B, 0x3D, 0x3C, 0x3D, 0x3E, 0x3E, 0x3E, 
   0x41, 0x42, 0x41, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x45, 
   0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x47, 0x45, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x4A, 0x4A, 
   0x4A, 0x4C, 0x4D, 0x4C, 0x4F, 0x4E, 0x4F, 0x50, 0x50, 0x50, 0x50, 0x51, 0x50, 0x50, 0x51, 0x50, 
   0x50, 0x50, 0x50, 0x4E, 0x4F, 0x4E, 0x4D, 0x4E, 0x4D, 0x4B, 0x4C, 0x4B, 0x48, 0x49, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x4A, 0x49, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4A, 0x4A, 0x4A, 0x48, 0x49, 0x48, 0x47, 0x47, 0x47, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 
   0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x42, 0x42, 0x42, 0x3F, 0x3F, 0x3F, 0x40, 
   0x3F, 0x40, 0x3D, 0x3D, 0x3D, 0x3A, 0x3A, 0x3A, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x38, 0x38, 
   0x38, 0x37, 0x38, 0x37, 0x36, 0x37, 0x36, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 
   0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x37, 0x37, 
   0x37, 0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x37, 0x36, 0x37, 0x35, 0x34, 0x35, 
   0x34, 0x33, 0x34, 0x32, 0x31, 0x32, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x2F, 0x31, 0x2F, 
   0x30, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 
   0x31, 0x33, 0x33, 0x33, 0x31, 0x33, 0x31, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 
   0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x36, 0x35, 0x36, 0x37, 0x36, 0x37, 0x37, 
   0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3C, 0x3B, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 0x3F, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 
   0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x45, 0x44, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x43, 
   0x44, 0x43, 0x44, 0x43, 0x44, 0x42, 0x42, 0x42, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x40, 0x3F, 0x3E, 
   0x3F, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x38, 0x38, 0x38, 0x37, 0x36, 0x37, 0x35, 0x34, 0x35, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x34, 0x34, 0x34, 0x33, 0x34, 
   0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x39, 0x38, 0x39, 
   0x3A, 0x3A, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3C, 0x3A, 0x3C, 0x3A, 
   0x39, 0x3A, 0x38, 0x38, 0x38, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 
   0x38, 0x38, 0x39, 0x38, 0x38, 0x3A, 0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x34, 
   0x35, 0x34, 0x35, 0x34, 0x35, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x2F, 0x30, 0x2D, 0x2E, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x29, 0x29, 0x29, 0x27, 
   0x28, 0x27, 0x28, 0x29, 0x28, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x28, 0x28, 
   0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x29, 0x27, 0x29, 
   0x27, 0x27, 0x27, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x28, 
   0x27, 0x28, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 
   0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2A, 0x2C, 
   0x29, 0x2B, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x27, 
   0x26, 0x27, 0x25, 0x26, 0x25, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x25, 0x25, 
   0x25, 0x26, 0x26, 0x26, 0x29, 0x28, 0x29, 0x27, 0x28, 0x27, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 
   0x27, 0x28, 0x27, 0x27, 0x26, 0x27, 0x25, 0x24, 0x25, 0x22, 0x23, 0x22, 0x21, 0x21, 0x21, 0x1F, 
   0x21, 0x1F, 0x20, 0x1F, 0x20, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 
   0x1E, 0x1E, 0x1D, 0x1E, 0x1F, 0x1E, 0x1F, 0x20, 0x1F, 0x20, 0x21, 0x20, 0x21, 0x22, 0x20, 0x22, 
   0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x25, 0x24, 0x25, 0x25, 0x26, 0x25, 0x27, 0x26, 0x27, 0x27, 
   0x27, 0x27, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 
   0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 
   0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 
   0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 
   0x38, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 0x3F, 0x3E, 0x3F, 
   0x3F, 0x42, 0x3F, 0x43, 0x44, 0x43, 0x42, 0x43, 0x42, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x45, 
   0x46, 0x45, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 
   0x4A, 0x4D, 0x4C, 0x4D, 0x4E, 0x4E, 0x4E, 0x50, 0x50, 0x50, 0x52, 0x51, 0x52, 0x51, 0x50, 0x51, 
   0x51, 0x50, 0x51, 0x4E, 0x4F, 0x4E, 0x4D, 0x4D, 0x4D, 0x4C, 0x4B, 0x4C, 0x4A, 0x4A, 0x4A, 0x48, 
   0x4A, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 
   0x4A, 0x4C, 0x4B, 0x4C, 0x4A, 0x49, 0x4A, 0x46, 0x47, 0x46, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 
   0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x40, 0x40, 0x40, 0x3E, 0x3D, 0x3E, 0x3D, 
   0x3C, 0x3D, 0x3B, 0x39, 0x3B, 0x39, 0x39, 0x39, 0x37, 0x39, 0x37, 0x38, 0x37, 0x38, 0x38, 0x37, 
   0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x38, 0x38, 0x38, 
   0x37, 0x38, 0x37, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x35, 0x37, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x32, 
   0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x33, 0x31, 0x31, 0x32, 0x31, 0x33, 0x32, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x37, 0x36, 0x37, 0x39, 
   0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3C, 
   0x3B, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x41, 0x44, 0x41, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 
   0x44, 0x44, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x3E, 
   0x3F, 0x3D, 0x3D, 0x3D, 0x3A, 0x3B, 0x3A, 0x38, 0x38, 0x38, 0x37, 0x36, 0x37, 0x35, 0x35, 0x35, 
   0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 
   0x39, 0x38, 0x39, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x39, 
   0x38, 0x39, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x38, 0x37, 0x38, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x38, 0x37, 0x38, 
   0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x36, 
   0x35, 0x36, 0x36, 0x35, 0x36, 0x35, 0x33, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x30, 0x2F, 0x30, 
   0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2C, 0x2C, 0x2C, 0x2A, 0x29, 0x2A, 0x29, 
   0x29, 0x29, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x2B, 0x29, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x27, 
   0x27, 0x27, 0x26, 0x27, 0x26, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x25, 0x24, 0x25, 0x25, 0x25, 
   0x25, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x28, 
   0x27, 0x27, 0x27, 0x25, 0x26, 0x25, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x22, 
   0x21, 0x22, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x1E, 0x1F, 0x1E, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 
   0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x23, 0x22, 0x23, 
   0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x28, 
   0x27, 0x28, 0x2A, 0x29, 0x2A, 0x2C, 0x2A, 0x2C, 0x2B, 0x2D, 0x2B, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 0x35, 0x35, 0x35, 0x35, 
   0x36, 0x35, 0x37, 0x35, 0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x39, 0x39, 
   0x39, 0x39, 0x3B, 0x39, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3E, 0x3E, 0x3E, 
   0x40, 0x41, 0x40, 0x42, 0x43, 0x42, 0x44, 0x43, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x48, 0x47, 0x48, 0x48, 0x4A, 0x48, 0x4A, 0x4B, 
   0x4A, 0x4C, 0x4C, 0x4C, 0x4E, 0x4F, 0x4E, 0x50, 0x50, 0x50, 0x50, 0x51, 0x50, 0x50, 0x50, 0x50, 
   0x50, 0x50, 0x50, 0x4E, 0x50, 0x4E, 0x4C, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4B, 0x4A, 
   0x4B, 0x4A, 0x4B, 0x4A, 0x48, 0x49, 0x48, 0x47, 0x47, 0x47, 0x45, 0x44, 0x45, 0x44, 0x43, 0x44, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x3E, 0x3E, 0x3E, 0x3D, 0x3C, 0x3D, 0x3A, 
   0x3A, 0x3A, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x37, 0x38, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x37, 0x38, 
   0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x32, 0x34, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x33, 
   0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x33, 
   0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x31, 0x33, 0x31, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x35, 0x34, 0x36, 0x37, 0x36, 0x37, 
   0x38, 0x37, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x3B, 0x39, 0x3D, 0x3D, 
   0x3D, 0x40, 0x3F, 0x40, 0x3F, 0x41, 0x3F, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x40, 0x42, 0x40, 0x42, 0x41, 0x42, 0x3F, 0x3F, 
   0x3F, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 0x37, 0x38, 0x37, 0x36, 0x36, 0x36, 0x34, 0x35, 0x34, 
   0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x32, 0x32, 0x32, 0x2F, 0x31, 0x2F, 0x30, 0x30, 0x30, 0x30, 
   0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x31, 0x33, 0x31, 0x33, 0x33, 0x33, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 
   0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x39, 0x37, 0x39, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 
   0x38, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x36, 
   0x35, 0x36, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x36, 0x35, 
   0x36, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 
   0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2C, 0x2D, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 
   0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 
   0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 
   0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x27, 
   0x28, 0x27, 0x27, 0x26, 0x27, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 
   0x25, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x2B, 0x28, 0x2B, 0x29, 0x28, 0x29, 
   0x27, 0x27, 0x27, 0x25, 0x25, 0x25, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x22, 
   0x23, 0x22, 0x23, 0x21, 0x23, 0x20, 0x20, 0x20, 0x1E, 0x1F, 0x1E, 0x1E, 0x1F, 0x1E, 0x21, 0x1F, 
   0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x20, 0x21, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 
   0x24, 0x23, 0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x2B, 0x29, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 
   0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x34, 0x34, 0x34, 0x35, 
   0x34, 0x35, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x38, 0x38, 
   0x38, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3E, 0x3D, 
   0x40, 0x40, 0x40, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x4B, 0x4A, 0x4B, 0x4A, 0x4B, 
   0x4A, 0x4C, 0x4C, 0x4C, 0x4E, 0x4E, 0x4E, 0x50, 0x50, 0x50, 0x51, 0x51, 0x51, 0x50, 0x51, 0x50, 
   0x4F, 0x50, 0x4F, 0x4D, 0x4E, 0x4D, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 
   0x4A, 0x48, 0x4A, 0x48, 0x49, 0x49, 0x49, 0x47, 0x46, 0x47, 0x45, 0x44, 0x45, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x40, 0x40, 0x40, 0x3D, 0x3C, 0x3D, 0x39, 0x3A, 0x39, 0x37, 
   0x39, 0x37, 0x39, 0x37, 0x39, 0x37, 0x37, 0x37, 0x35, 0x37, 0x35, 0x35, 0x36, 0x35, 0x38, 0x37, 
   0x38, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 
   0x38, 0x37, 0x38, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x38, 
   0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x37, 0x37, 
   0x37, 0x36, 0x37, 0x36, 0x35, 0x37, 0x35, 0x36, 0x35, 0x36, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 
   0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x34, 0x35, 0x34, 0x35, 
   0x34, 0x35, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x35, 0x35, 0x35, 0x37, 0x37, 0x37, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3C, 0x3B, 0x3C, 0x3E, 0x3E, 
   0x3E, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x40, 0x42, 0x40, 0x3F, 0x3F, 
   0x3F, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 0x39, 0x38, 0x39, 0x36, 0x36, 0x36, 0x34, 0x35, 0x34, 
   0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x34, 0x31, 0x34, 0x30, 0x30, 0x30, 0x2E, 0x2F, 0x2E, 0x2E, 
   0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x32, 0x31, 0x33, 0x31, 
   0x33, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 
   0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x37, 
   0x36, 0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x36, 0x37, 
   0x36, 0x39, 0x37, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 
   0x37, 0x38, 0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 
   0x37, 0x36, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x35, 0x37, 0x35, 0x34, 0x35, 0x34, 0x33, 0x33, 0x33, 
   0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x30, 0x2F, 0x30, 0x2D, 0x2E, 0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 
   0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2B, 0x2C, 0x2B, 0x2B, 0x2C, 
   0x2B, 0x2B, 0x2C, 0x2B, 0x2B, 0x2C, 0x2B, 0x2D, 0x2C, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 
   0x2E, 0x2D, 0x2E, 0x2C, 0x2D, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x28, 
   0x28, 0x28, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x26, 0x25, 0x25, 
   0x25, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x28, 
   0x27, 0x27, 0x27, 0x26, 0x25, 0x26, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x23, 
   0x24, 0x23, 0x24, 0x22, 0x24, 0x20, 0x20, 0x20, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x21, 0x20, 
   0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 
   0x24, 0x24, 0x24, 0x25, 0x26, 0x25, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 
   0x28, 0x29, 0x29, 0x2A, 0x29, 0x2C, 0x2C, 0x2C, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x31, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 
   0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x31, 0x33, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x34, 
   0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x36, 0x35, 0x36, 0x38, 0x37, 0x38, 0x39, 0x39, 
   0x39, 0x3B, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3E, 0x3D, 
   0x40, 0x3F, 0x40, 0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x45, 
   0x45, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 0x49, 0x48, 0x4A, 0x4B, 0x4A, 0x4C, 0x4B, 
   0x4C, 0x4D, 0x4C, 0x4D, 0x4E, 0x4F, 0x4E, 0x4F, 0x50, 0x4F, 0x50, 0x51, 0x50, 0x50, 0x51, 0x50, 
   0x4F, 0x50, 0x4F, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 
   0x4A, 0x48, 0x49, 0x48, 0x47, 0x48, 0x47, 0x45, 0x45, 0x45, 0x42, 0x44, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x3E, 0x3F, 0x3B, 0x3B, 0x3B, 0x39, 0x39, 0x39, 0x39, 
   0x38, 0x39, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x35, 0x37, 0x35, 0x36, 0x36, 
   0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 
   0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x36, 
   0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x37, 0x36, 
   0x37, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x34, 0x33, 0x34, 0x33, 0x32, 0x33, 0x33, 0x31, 0x33, 
   0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x35, 0x36, 0x35, 0x35, 
   0x34, 0x35, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x31, 0x32, 
   0x31, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x37, 
   0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 
   0x3E, 0x3F, 0x40, 0x3F, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x40, 0x42, 0x40, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 
   0x42, 0x43, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x44, 0x43, 0x44, 0x41, 0x41, 0x41, 0x3E, 0x3F, 
   0x3E, 0x3C, 0x3E, 0x3C, 0x3D, 0x3B, 0x3D, 0x3A, 0x39, 0x3A, 0x37, 0x37, 0x37, 0x35, 0x34, 0x35, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x31, 0x32, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2D, 
   0x2E, 0x2D, 0x2E, 0x2F, 0x2E, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x32, 0x32, 0x32, 0x32, 0x31, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 
   0x33, 0x33, 0x33, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 
   0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 
   0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 0x39, 
   0x39, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x36, 0x37, 0x36, 0x37, 0x36, 0x37, 0x33, 0x34, 0x33, 
   0x32, 0x33, 0x32, 0x31, 0x32, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2D, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 
   0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 
   0x2F, 0x2D, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 
   0x2A, 0x2A, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x27, 0x26, 0x27, 0x26, 0x26, 
   0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x2B, 0x29, 0x2B, 0x29, 0x28, 0x29, 
   0x27, 0x27, 0x27, 0x25, 0x26, 0x25, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 
   0x23, 0x24, 0x23, 0x23, 0x23, 0x21, 0x20, 0x21, 0x1F, 0x20, 0x1F, 0x20, 0x20, 0x20, 0x1F, 0x20, 
   0x1F, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x23, 0x23, 0x23, 0x25, 0x23, 0x25, 
   0x24, 0x26, 0x24, 0x26, 0x26, 0x26, 0x29, 0x27, 0x29, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x29, 
   0x29, 0x29, 0x2B, 0x2A, 0x2B, 0x2D, 0x2B, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x30, 0x2F, 
   0x30, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x33, 0x31, 0x33, 0x32, 0x31, 0x32, 
   0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x33, 0x32, 0x33, 0x32, 0x33, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x37, 0x36, 0x38, 0x39, 
   0x38, 0x3B, 0x3B, 0x3B, 0x3D, 0x3B, 0x3D, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 
   0x3F, 0x3E, 0x3F, 0x3F, 0x40, 0x3F, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x44, 
   0x45, 0x44, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 0x49, 0x48, 0x4B, 0x4B, 0x4B, 0x4A, 0x4C, 
   0x4A, 0x4D, 0x4E, 0x4D, 0x4F, 0x4F, 0x4F, 0x50, 0x51, 0x50, 0x50, 0x51, 0x50, 0x50, 0x51, 0x50, 
   0x50, 0x50, 0x50, 0x4E, 0x4F, 0x4E, 0x4D, 0x4D, 0x4D, 0x4C, 0x4C, 0x4C, 0x4A, 0x4B, 0x4A, 0x49, 
   0x49, 0x49, 0x4A, 0x49, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 
   0x48, 0x47, 0x48, 0x47, 0x46, 0x47, 0x46, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x42, 0x41, 0x42, 
   0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3D, 0x3C, 0x3D, 0x3B, 0x3A, 0x3B, 0x39, 0x38, 0x39, 0x38, 
   0x37, 0x38, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x36, 0x37, 0x36, 0x35, 0x36, 
   0x35, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 
   0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x35, 
   0x36, 0x35, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 
   0x35, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x32, 0x31, 0x32, 
   0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 0x35, 
   0x36, 0x35, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x33, 0x33, 0x33, 0x36, 0x35, 0x36, 0x37, 
   0x36, 0x37, 0x39, 0x38, 0x39, 0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 0x3C, 0x3C, 0x3D, 0x3C, 0x3F, 0x3F, 
   0x3F, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 
   0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x40, 0x40, 
   0x40, 0x3E, 0x3E, 0x3E, 0x3C, 0x3C, 0x3C, 0x3A, 0x39, 0x3A, 0x37, 0x37, 0x37, 0x33, 0x35, 0x33, 
   0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x30, 0x31, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 
   0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x32, 0x31, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 
   0x36, 0x35, 0x35, 0x36, 0x35, 0x37, 0x36, 0x37, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x39, 0x38, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 
   0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 
   0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x39, 0x3A, 0x39, 0x3B, 0x3A, 
   0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x39, 0x3A, 0x38, 0x39, 0x38, 0x37, 0x36, 0x37, 0x34, 0x35, 0x34, 
   0x33, 0x34, 0x33, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2E, 
   0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 
   0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2B, 
   0x2A, 0x2B, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 
   0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x23, 0x24, 
   0x24, 0x24, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x24, 0x23, 0x24, 0x25, 0x24, 0x25, 
   0x26, 0x25, 0x26, 0x27, 0x26, 0x27, 0x27, 0x28, 0x27, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2A, 
   0x29, 0x2A, 0x2B, 0x2A, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2E, 0x2F, 0x2E, 0x2F, 0x30, 
   0x2F, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x32, 0x30, 0x32, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x32, 
   0x32, 0x32, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x35, 0x35, 0x35, 0x37, 0x37, 0x37, 0x39, 0x38, 
   0x39, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 0x3D, 0x3C, 0x3D, 
   0x3E, 0x3E, 0x3E, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x42, 0x41, 0x42, 0x42, 0x43, 0x42, 0x44, 
   0x44, 0x44, 0x46, 0x46, 0x46, 0x48, 0x47, 0x48, 0x48, 0x49, 0x48, 0x4A, 0x4B, 0x4A, 0x4B, 0x4D, 
   0x4B, 0x4E, 0x4F, 0x4E, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 
   0x50, 0x50, 0x50, 0x4F, 0x4F, 0x4F, 0x4D, 0x4D, 0x4D, 0x4B, 0x4B, 0x4B, 0x48, 0x49, 0x48, 0x48, 
   0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x43, 0x43, 0x43, 0x41, 0x42, 0x41, 
   0x40, 0x40, 0x40, 0x3E, 0x3D, 0x3E, 0x3C, 0x3B, 0x3C, 0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 0x37, 
   0x36, 0x37, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 
   0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 
   0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x37, 0x36, 0x37, 0x34, 0x36, 0x34, 0x35, 0x35, 0x35, 0x35, 
   0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x34, 0x35, 0x34, 0x34, 0x33, 
   0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 
   0x32, 0x30, 0x32, 0x2F, 0x30, 0x2F, 0x39, 0x3B, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x38, 0x39, 0x36, 
   0x36, 0x36, 0x35, 0x35, 0x35, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 
   0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x38, 
   0x37, 0x38, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 
   0x3D, 0x3F, 0x40, 0x3F, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 
   0x40, 0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x3F, 0x40, 
   0x3F, 0x3F, 0x3E, 0x3F, 0x3D, 0x3C, 0x3D, 0x38, 0x39, 0x38, 0x37, 0x36, 0x37, 0x34, 0x34, 0x34, 
   0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2B, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x30, 0x31, 
   0x30, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 
   0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x34, 0x35, 0x34, 0x35, 
   0x35, 0x35, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x38, 0x38, 
   0x38, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x38, 0x37, 0x38, 0x36, 0x37, 0x36, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x3A, 0x39, 0x3A, 0x3A, 0x3B, 0x3A, 0x3C, 0x3C, 
   0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x35, 0x37, 0x35, 
   0x34, 0x35, 0x34, 0x33, 0x34, 0x33, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x30, 0x31, 0x2F, 
   0x30, 0x2F, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x30, 
   0x2F, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 
   0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 
   0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x28, 0x29, 0x28, 0x28, 0x27, 
   0x28, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 
   0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x25, 0x26, 0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 0x24, 
   0x24, 0x24, 0x25, 0x23, 0x25, 0x23, 0x22, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x22, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 
   0x27, 0x25, 0x27, 0x26, 0x27, 0x26, 0x28, 0x27, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 
   0x29, 0x2A, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2E, 0x2E, 0x2E, 0x30, 0x30, 
   0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x31, 0x30, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x33, 0x32, 0x33, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x37, 0x36, 0x37, 0x38, 0x38, 
   0x38, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3F, 0x3D, 0x3F, 0x3E, 0x3E, 0x3E, 0x40, 0x41, 0x40, 0x43, 0x42, 0x43, 0x45, 
   0x44, 0x45, 0x46, 0x45, 0x46, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x4B, 0x4A, 0x4B, 0x4D, 0x4D, 
   0x4D, 0x4E, 0x4F, 0x4E, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4E, 0x4F, 0x4E, 
   0x4F, 0x4F, 0x4F, 0x4D, 0x4F, 0x4D, 0x4C, 0x4C, 0x4C, 0x49, 0x4A, 0x49, 0x48, 0x49, 0x48, 0x46, 
   0x47, 0x46, 0x44, 0x46, 0x44, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x43, 0x44, 0x43, 0x43, 0x42, 0x43, 0x3F, 0x40, 0x3F, 
   0x3F, 0x3E, 0x3F, 0x3D, 0x3C, 0x3D, 0x3A, 0x3A, 0x3A, 0x38, 0x38, 0x38, 0x36, 0x36, 0x36, 0x36, 
   0x35, 0x36, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 
   0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x34, 0x35, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x31, 
   0x33, 0x31, 0x32, 0x33, 0x32, 0x35, 0x34, 0x35, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x31, 
   0x32, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x39, 0x3B, 0x39, 0x39, 0x3A, 0x39, 0x38, 0x37, 0x38, 0x36, 
   0x36, 0x36, 0x35, 0x35, 0x35, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 
   0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 
   0x37, 0x36, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x3A, 0x3A, 0x3A, 0x3C, 0x3D, 0x3C, 0x3E, 0x3F, 
   0x3E, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 
   0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x43, 0x41, 0x43, 0x41, 0x41, 0x41, 0x40, 0x40, 
   0x40, 0x3E, 0x3E, 0x3E, 0x3B, 0x3B, 0x3B, 0x38, 0x39, 0x38, 0x35, 0x35, 0x35, 0x33, 0x33, 0x33, 
   0x31, 0x32, 0x31, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 
   0x2B, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x35, 
   0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x39, 0x38, 
   0x39, 0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x38, 0x37, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x3B, 0x3A, 0x3B, 0x3C, 0x3C, 0x3C, 0x3E, 0x3E, 
   0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3B, 0x3A, 0x3B, 0x37, 0x37, 0x37, 
   0x35, 0x36, 0x35, 0x35, 0x34, 0x35, 0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x31, 
   0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 
   0x32, 0x33, 0x31, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 
   0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x29, 0x29, 
   0x29, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 
   0x29, 0x28, 0x29, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x25, 
   0x24, 0x25, 0x23, 0x24, 0x23, 0x23, 0x24, 0x23, 0x23, 0x22, 0x23, 0x22, 0x21, 0x22, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x22, 0x23, 0x22, 0x24, 0x24, 0x24, 0x25, 0x26, 0x25, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 
   0x2B, 0x2A, 0x2C, 0x2B, 0x2C, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2F, 0x2E, 0x30, 0x30, 
   0x30, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x35, 0x35, 0x35, 0x36, 0x37, 0x36, 0x38, 0x38, 
   0x38, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3D, 0x3B, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3F, 0x3E, 0x40, 0x40, 0x40, 0x41, 0x42, 0x41, 0x44, 
   0x44, 0x44, 0x44, 0x45, 0x44, 0x46, 0x47, 0x46, 0x48, 0x47, 0x48, 0x49, 0x4A, 0x49, 0x4C, 0x4C, 
   0x4C, 0x4D, 0x4E, 0x4D, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x4E, 0x50, 0x4E, 0x4E, 0x4E, 0x4E, 0x4C, 0x4C, 0x4C, 0x49, 0x4A, 0x49, 0x47, 0x47, 0x47, 0x46, 
   0x46, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x44, 0x44, 0x44, 0x46, 0x45, 
   0x46, 0x46, 0x45, 0x46, 0x45, 0x44, 0x45, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x40, 0x40, 0x40, 
   0x3D, 0x3D, 0x3D, 0x3B, 0x3A, 0x3B, 0x38, 0x39, 0x38, 0x37, 0x38, 0x37, 0x35, 0x36, 0x35, 0x35, 
   0x34, 0x35, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x37, 0x36, 0x37, 
   0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 0x31, 
   0x31, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x36, 
   0x37, 0x36, 0x35, 0x36, 0x35, 0x33, 0x34, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 
   0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x33, 0x32, 0x36, 0x35, 0x36, 0x36, 
   0x36, 0x36, 0x37, 0x36, 0x37, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 0x3C, 0x3E, 0x3E, 
   0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x41, 0x40, 0x41, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 
   0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3D, 
   0x3E, 0x3C, 0x3C, 0x3C, 0x3A, 0x3A, 0x3A, 0x37, 0x38, 0x37, 0x34, 0x35, 0x34, 0x31, 0x32, 0x31, 
   0x32, 0x31, 0x32, 0x31, 0x30, 0x31, 0x2F, 0x2E, 0x2F, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2E, 0x2C, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x2F, 0x32, 0x2F, 0x31, 0x32, 0x31, 0x31, 0x30, 0x31, 
   0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x35, 
   0x35, 0x35, 0x37, 0x35, 0x37, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x39, 0x38, 
   0x39, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 
   0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x37, 
   0x39, 0x37, 0x3A, 0x38, 0x3A, 0x3A, 0x3A, 0x3A, 0x3C, 0x3C, 0x3C, 0x3F, 0x3D, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3D, 0x3F, 0x3C, 0x3C, 0x3C, 0x38, 0x39, 0x38, 
   0x36, 0x36, 0x36, 0x34, 0x36, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x32, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x31, 0x33, 0x32, 
   0x33, 0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x33, 0x32, 0x33, 0x32, 0x31, 0x32, 0x30, 0x31, 0x30, 0x2F, 
   0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 
   0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2D, 0x2B, 0x2D, 0x2B, 0x2A, 0x2B, 0x29, 0x2B, 0x29, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 
   0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x28, 0x29, 
   0x28, 0x28, 0x28, 0x27, 0x26, 0x27, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x24, 
   0x25, 0x24, 0x24, 0x23, 0x24, 0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x22, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x23, 0x23, 0x23, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 
   0x27, 0x26, 0x27, 0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2B, 0x29, 0x2B, 
   0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2F, 0x2E, 0x30, 0x30, 
   0x30, 0x33, 0x31, 0x33, 0x31, 0x32, 0x31, 0x2F, 0x31, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 
   0x30, 0x31, 0x30, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 
   0x31, 0x30, 0x32, 0x32, 0x32, 0x34, 0x33, 0x34, 0x35, 0x35, 0x35, 0x36, 0x37, 0x36, 0x39, 0x38, 
   0x39, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 
   0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x43, 
   0x42, 0x43, 0x44, 0x43, 0x44, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x47, 0x49, 0x47, 0x4B, 0x4A, 
   0x4B, 0x4C, 0x4C, 0x4C, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 
   0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4C, 0x4C, 0x49, 0x49, 0x49, 0x46, 0x47, 0x46, 0x47, 
   0x47, 0x47, 0x46, 0x45, 0x46, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 
   0x43, 0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x42, 0x43, 0x41, 0x41, 0x41, 0x3E, 0x3F, 0x3E, 
   0x3C, 0x3D, 0x3C, 0x39, 0x3A, 0x39, 0x38, 0x39, 0x38, 0x38, 0x37, 0x38, 0x35, 0x34, 0x35, 0x33, 
   0x34, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x32, 0x33, 
   0x32, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x33, 0x35, 0x33, 0x37, 0x35, 0x37, 0x36, 0x35, 0x36, 
   0x37, 0x35, 0x37, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x30, 0x30, 
   0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 
   0x2E, 0x2F, 0x2E, 0x2E, 0x2F, 0x2E, 0x37, 0x37, 0x37, 0x38, 0x36, 0x38, 0x37, 0x37, 0x37, 0x36, 
   0x36, 0x36, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x31, 0x31, 
   0x31, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x35, 0x33, 0x36, 
   0x36, 0x36, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x3B, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 0x3D, 0x3C, 
   0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 
   0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3D, 
   0x3E, 0x3D, 0x3D, 0x3E, 0x3D, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3C, 0x3E, 0x3D, 0x3B, 
   0x3D, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 0x33, 0x32, 0x33, 
   0x31, 0x32, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 
   0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x35, 0x33, 0x35, 0x33, 0x34, 0x33, 0x35, 
   0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x34, 0x36, 0x34, 0x36, 0x37, 0x36, 0x38, 0x38, 
   0x38, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 
   0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x39, 
   0x3A, 0x39, 0x3B, 0x3A, 0x3B, 0x3C, 0x3C, 0x3C, 0x3F, 0x3F, 0x3F, 0x42, 0x41, 0x42, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x41, 0x40, 0x41, 0x3E, 0x3D, 0x3E, 0x3B, 0x3B, 0x3B, 
   0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x36, 0x35, 0x36, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x35, 
   0x33, 0x35, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x35, 0x34, 
   0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 
   0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x35, 0x33, 0x35, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x31, 
   0x32, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x31, 0x32, 0x32, 0x31, 
   0x32, 0x30, 0x31, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 
   0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 
   0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x25, 
   0x25, 0x25, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x23, 0x22, 0x23, 0x24, 0x23, 0x24, 0x26, 0x26, 0x26, 
   0x27, 0x26, 0x27, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2D, 
   0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2F, 0x2E, 0x2F, 0x31, 0x30, 
   0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x31, 0x2F, 0x32, 0x31, 0x32, 0x34, 0x34, 0x34, 0x36, 0x36, 0x36, 0x38, 0x37, 0x38, 0x37, 0x37, 
   0x37, 0x38, 0x38, 0x38, 0x3A, 0x39, 0x3A, 0x3A, 0x39, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 
   0x3A, 0x3A, 0x3A, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3E, 0x3E, 0x3E, 0x41, 0x41, 0x41, 0x42, 
   0x42, 0x42, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x4A, 0x49, 
   0x4A, 0x4B, 0x4B, 0x4B, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 
   0x4B, 0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4A, 0x4A, 0x4A, 0x49, 0x48, 0x49, 0x47, 0x48, 0x47, 0x45, 
   0x47, 0x45, 0x45, 0x45, 0x45, 0x45, 0x43, 0x45, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x41, 0x43, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x40, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x3C, 0x3E, 0x3A, 0x3A, 0x3A, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x31, 0x32, 
   0x31, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x35, 0x33, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x34, 0x35, 0x34, 0x33, 0x34, 0x35, 0x33, 0x35, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x32, 0x33, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 
   0x30, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2C, 0x2E, 0x2C, 
   0x2E, 0x2E, 0x2E, 0x30, 0x2E, 0x30, 0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x36, 0x36, 0x36, 0x36, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 
   0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x32, 0x32, 0x32, 0x35, 0x34, 0x35, 0x35, 
   0x35, 0x35, 0x36, 0x37, 0x36, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x3C, 0x3A, 0x3C, 0x3A, 0x3B, 
   0x3A, 0x3B, 0x3B, 0x3B, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 
   0x3E, 0x3D, 0x3E, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3C, 
   0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 
   0x3A, 0x38, 0x3A, 0x38, 0x38, 0x38, 0x38, 0x36, 0x36, 0x36, 0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 
   0x31, 0x32, 0x31, 0x30, 0x30, 0x30, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 
   0x2D, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2E, 0x2C, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 
   0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x2F, 0x31, 0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 
   0x30, 0x31, 0x30, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x35, 
   0x35, 0x35, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x38, 0x38, 
   0x38, 0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 
   0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3B, 0x3A, 0x3C, 0x3B, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3E, 0x3F, 0x3E, 0x41, 0x41, 0x41, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x42, 0x43, 0x3F, 0x3F, 0x3F, 0x3D, 0x3C, 0x3D, 
   0x3A, 0x3B, 0x3A, 0x38, 0x39, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x36, 
   0x35, 0x36, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x36, 0x34, 0x36, 0x36, 0x36, 
   0x36, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x36, 0x35, 0x36, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 
   0x32, 0x33, 0x33, 0x33, 0x33, 0x35, 0x33, 0x35, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x30, 0x32, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2D, 0x2F, 0x2D, 0x2D, 0x2D, 0x2B, 
   0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 0x2A, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 0x28, 0x28, 0x28, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x25, 0x26, 0x25, 0x27, 0x25, 0x27, 0x25, 0x24, 0x25, 0x23, 
   0x25, 0x23, 0x24, 0x23, 0x24, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x22, 0x22, 0x22, 0x21, 0x21, 
   0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x23, 0x22, 0x23, 0x24, 0x23, 0x24, 0x24, 0x25, 0x24, 
   0x27, 0x26, 0x27, 0x28, 0x29, 0x28, 0x29, 0x2A, 0x29, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2B, 
   0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x31, 0x30, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 
   0x30, 0x2F, 0x32, 0x31, 0x32, 0x35, 0x33, 0x35, 0x36, 0x35, 0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 
   0x39, 0x39, 0x39, 0x3B, 0x3A, 0x3B, 0x3C, 0x3C, 0x3C, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x41, 
   0x42, 0x41, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x47, 0x46, 0x47, 0x47, 0x48, 
   0x47, 0x49, 0x49, 0x49, 0x4C, 0x4B, 0x4C, 0x4C, 0x4B, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x47, 
   0x47, 0x47, 0x46, 0x44, 0x46, 0x43, 0x43, 0x43, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x41, 0x41, 
   0x41, 0x41, 0x40, 0x41, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3D, 0x3E, 
   0x3B, 0x3B, 0x3B, 0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 0x34, 0x35, 0x34, 0x32, 0x32, 0x32, 0x33, 
   0x31, 0x33, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x33, 0x31, 0x33, 0x31, 0x32, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x30, 0x30, 
   0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2D, 0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x32, 0x32, 0x32, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 
   0x35, 0x35, 0x36, 0x34, 0x36, 0x34, 0x34, 0x34, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 
   0x32, 0x30, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 
   0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x32, 0x33, 0x33, 0x34, 0x33, 0x35, 
   0x36, 0x35, 0x35, 0x36, 0x35, 0x38, 0x37, 0x38, 0x37, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x3A, 0x39, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3D, 0x3C, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3C, 0x3D, 0x3C, 0x3B, 
   0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x39, 0x3A, 0x3A, 0x39, 0x3A, 0x37, 0x38, 0x37, 0x38, 0x37, 
   0x38, 0x38, 0x37, 0x38, 0x36, 0x37, 0x36, 0x34, 0x35, 0x34, 0x33, 0x33, 0x33, 0x32, 0x31, 0x32, 
   0x31, 0x31, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x2F, 0x31, 0x2F, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x34, 0x32, 0x34, 0x34, 0x34, 0x34, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x38, 0x38, 
   0x38, 0x3B, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x39, 0x3B, 0x39, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3F, 
   0x3E, 0x3F, 0x40, 0x3F, 0x40, 0x42, 0x41, 0x42, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x45, 0x44, 
   0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x42, 0x43, 0x42, 0x41, 0x41, 0x41, 0x3F, 0x3F, 0x3F, 
   0x3E, 0x3C, 0x3E, 0x3A, 0x3B, 0x3A, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 
   0x37, 0x38, 0x35, 0x37, 0x35, 0x35, 0x35, 0x35, 0x34, 0x36, 0x34, 0x36, 0x36, 0x36, 0x39, 0x37, 
   0x39, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x38, 0x36, 0x38, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x35, 
   0x34, 0x35, 0x35, 0x34, 0x35, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x34, 0x35, 0x33, 0x34, 0x33, 0x32, 0x32, 0x32, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x2F, 0x30, 0x2E, 0x2F, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2D, 0x2B, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 
   0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x29, 0x2A, 0x29, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 
   0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x28, 0x26, 0x28, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x25, 
   0x24, 0x25, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
   0x22, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x26, 0x24, 0x26, 
   0x27, 0x26, 0x27, 0x28, 0x29, 0x28, 0x29, 0x2A, 0x29, 0x2A, 0x2B, 0x2A, 0x2B, 0x2C, 0x2B, 0x2D, 
   0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x2F, 0x31, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x30, 0x30, 
   0x2F, 0x30, 0x32, 0x31, 0x32, 0x34, 0x34, 0x34, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x37, 0x39, 0x37, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 
   0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3D, 0x3D, 0x3D, 0x40, 0x40, 0x40, 0x40, 
   0x41, 0x40, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x43, 0x45, 0x43, 0x47, 0x47, 
   0x47, 0x47, 0x48, 0x47, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4B, 0x49, 0x4A, 0x49, 
   0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x49, 0x47, 0x49, 0x48, 0x47, 0x48, 0x45, 
   0x47, 0x45, 0x44, 0x45, 0x44, 0x41, 0x42, 0x41, 0x40, 0x42, 0x40, 0x41, 0x40, 0x41, 0x3F, 0x3F, 
   0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3C, 0x3E, 0x3C, 0x3B, 0x3C, 
   0x3A, 0x39, 0x3A, 0x38, 0x37, 0x38, 0x36, 0x35, 0x36, 0x34, 0x33, 0x34, 0x31, 0x31, 0x31, 0x2F, 
   0x31, 0x2F, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 
   0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 
   0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 
   0x32, 0x32, 0x33, 0x31, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x2F, 
   0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 
   0x33, 0x33, 0x33, 0x34, 0x33, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x31, 0x31, 
   0x31, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x34, 
   0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x39, 0x38, 
   0x39, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 
   0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3B, 
   0x3A, 0x3B, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x36, 0x36, 
   0x36, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x33, 0x35, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 
   0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x31, 0x30, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x34, 0x33, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x39, 0x38, 
   0x39, 0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 
   0x3C, 0x3B, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 
   0x40, 0x40, 0x42, 0x40, 0x42, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x40, 0x42, 
   0x3F, 0x3F, 0x3F, 0x3D, 0x3D, 0x3D, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 0x39, 
   0x38, 0x39, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x39, 0x39, 
   0x39, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 
   0x37, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 
   0x35, 0x37, 0x36, 0x37, 0x35, 0x35, 0x35, 0x31, 0x32, 0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2B, 
   0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 
   0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x27, 0x25, 0x27, 0x25, 0x25, 0x25, 0x23, 
   0x24, 0x23, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 
   0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 
   0x28, 0x25, 0x28, 0x27, 0x28, 0x27, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2B, 0x2A, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x31, 
   0x30, 0x31, 0x31, 0x32, 0x31, 0x35, 0x33, 0x35, 0x37, 0x35, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 
   0x36, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3F, 0x3D, 0x3F, 0x3F, 
   0x3E, 0x3F, 0x3F, 0x40, 0x3F, 0x3F, 0x41, 0x3F, 0x41, 0x41, 0x41, 0x43, 0x44, 0x43, 0x45, 0x46, 
   0x45, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 
   0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x44, 
   0x45, 0x44, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x3F, 0x40, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 
   0x3E, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x39, 0x3A, 
   0x37, 0x37, 0x37, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x32, 0x32, 0x32, 0x31, 0x30, 0x31, 0x2F, 
   0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x32, 0x33, 0x31, 0x32, 0x31, 0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2D, 0x2F, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 
   0x2B, 0x2C, 0x2B, 0x2D, 0x2D, 0x2D, 0x30, 0x2E, 0x30, 0x30, 0x2F, 0x30, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x32, 0x31, 0x32, 0x30, 0x31, 0x30, 0x30, 0x31, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x2F, 0x30, 0x31, 0x2F, 0x31, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x2F, 0x30, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 
   0x33, 0x33, 0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x36, 0x36, 
   0x36, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x37, 0x36, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 
   0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 
   0x3A, 0x3A, 0x37, 0x39, 0x37, 0x38, 0x38, 0x38, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x35, 0x36, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x30, 0x32, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 
   0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 
   0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x35, 
   0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x37, 0x36, 0x38, 0x38, 
   0x38, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3B, 0x3C, 0x3B, 0x3D, 0x3C, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x3F, 0x3E, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 0x41, 
   0x42, 0x41, 0x44, 0x43, 0x44, 0x43, 0x45, 0x43, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x47, 
   0x46, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x42, 0x44, 0x42, 
   0x41, 0x42, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3D, 0x3E, 0x3C, 0x3B, 0x3C, 0x3A, 
   0x3B, 0x3A, 0x39, 0x3B, 0x39, 0x39, 0x39, 0x39, 0x38, 0x3A, 0x38, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 
   0x39, 0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 0x37, 0x38, 
   0x38, 0x37, 0x38, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 
   0x37, 0x38, 0x37, 0x37, 0x37, 0x39, 0x37, 0x39, 0x38, 0x37, 0x38, 0x39, 0x38, 0x39, 0x37, 0x37, 
   0x37, 0x37, 0x36, 0x37, 0x35, 0x36, 0x35, 0x33, 0x34, 0x33, 0x32, 0x31, 0x32, 0x30, 0x30, 0x30, 
   0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2B, 
   0x2D, 0x2A, 0x2C, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x28, 0x2A, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 
   0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x24, 
   0x25, 0x24, 0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 
   0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 
   0x27, 0x25, 0x27, 0x27, 0x26, 0x27, 0x28, 0x27, 0x28, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x2B, 
   0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 
   0x2F, 0x2E, 0x2E, 0x2E, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 
   0x30, 0x30, 0x33, 0x31, 0x33, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x37, 
   0x36, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3E, 
   0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x40, 0x3F, 0x40, 0x40, 0x3F, 0x40, 0x42, 0x41, 0x42, 0x42, 0x44, 
   0x42, 0x45, 0x46, 0x45, 0x47, 0x46, 0x47, 0x48, 0x47, 0x48, 0x49, 0x47, 0x49, 0x48, 0x48, 0x48, 
   0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x44, 0x45, 0x44, 0x42, 
   0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x3E, 0x3F, 0x3D, 0x3C, 
   0x3D, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 
   0x35, 0x35, 0x35, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 
   0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 
   0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x29, 0x2A, 0x29, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2E, 0x2D, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 
   0x31, 0x30, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x33, 0x34, 0x33, 0x33, 0x34, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 
   0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x38, 
   0x39, 0x38, 0x37, 0x38, 0x37, 0x36, 0x37, 0x36, 0x37, 0x35, 0x37, 0x35, 0x35, 0x35, 0x34, 0x35, 
   0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 0x30, 0x31, 0x30, 
   0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2F, 
   0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x34, 
   0x33, 0x34, 0x34, 0x33, 0x34, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x39, 0x38, 
   0x39, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3C, 0x3D, 0x3C, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 
   0x3F, 0x3F, 0x3F, 0x41, 0x41, 0x41, 0x42, 0x43, 0x42, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 
   0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x47, 0x45, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x46, 0x47, 0x46, 
   0x45, 0x45, 0x45, 0x43, 0x44, 0x43, 0x43, 0x42, 0x43, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x3E, 
   0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3C, 0x3D, 0x3D, 0x3C, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3B, 
   0x3C, 0x3C, 0x3B, 0x3C, 0x3D, 0x3B, 0x3D, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x3B, 0x3A, 0x3D, 0x3B, 0x3D, 0x3C, 
   0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3A, 0x3B, 0x3A, 0x39, 0x39, 
   0x39, 0x38, 0x38, 0x38, 0x35, 0x36, 0x35, 0x34, 0x35, 0x34, 0x33, 0x32, 0x33, 0x30, 0x30, 0x30, 
   0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 
   0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x25, 0x26, 0x25, 0x23, 
   0x25, 0x23, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 
   0x24, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 
   0x24, 0x24, 0x24, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 0x29, 
   0x29, 0x29, 0x2B, 0x2A, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2F, 0x2E, 0x2F, 0x30, 0x2F, 
   0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x33, 0x34, 0x33, 0x36, 0x35, 0x36, 0x36, 0x36, 
   0x36, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x3B, 0x3A, 0x3B, 0x3B, 
   0x3A, 0x3B, 0x3B, 0x3C, 0x3B, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3F, 0x3F, 0x3F, 0x42, 0x42, 
   0x42, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x45, 0x46, 0x45, 0x46, 0x45, 0x46, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x41, 
   0x41, 0x41, 0x3F, 0x41, 0x3F, 0x3E, 0x3F, 0x3E, 0x40, 0x3F, 0x40, 0x3E, 0x3C, 0x3E, 0x3B, 0x3B, 
   0x3B, 0x38, 0x3A, 0x38, 0x39, 0x39, 0x39, 0x36, 0x37, 0x36, 0x34, 0x35, 0x34, 0x33, 0x34, 0x33, 
   0x34, 0x31, 0x34, 0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2D, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 
   0x2E, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x28, 0x29, 0x28, 
   0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x2B, 0x2A, 0x2B, 0x2C, 0x2D, 0x2C, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 
   0x30, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 
   0x32, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 
   0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x37, 
   0x39, 0x37, 0x37, 0x37, 0x37, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x33, 0x34, 0x33, 0x35, 0x34, 
   0x35, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x30, 0x31, 
   0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x2F, 0x31, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2E, 0x2F, 0x31, 0x30, 0x31, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x33, 
   0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x36, 0x35, 0x36, 0x37, 0x37, 0x37, 0x38, 0x37, 
   0x38, 0x3C, 0x3A, 0x3C, 0x3B, 0x3D, 0x3B, 0x3E, 0x3E, 0x3E, 0x40, 0x40, 0x40, 0x3F, 0x41, 0x3F, 
   0x40, 0x40, 0x40, 0x43, 0x42, 0x43, 0x42, 0x44, 0x42, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 
   0x45, 0x45, 0x45, 0x46, 0x45, 0x47, 0x48, 0x47, 0x49, 0x48, 0x49, 0x4A, 0x49, 0x4A, 0x49, 0x49, 
   0x49, 0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x49, 0x4B, 0x49, 0x48, 0x49, 0x48, 0x47, 0x48, 0x47, 
   0x45, 0x47, 0x45, 0x46, 0x46, 0x46, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x42, 0x41, 0x42, 0x40, 
   0x3F, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 
   0x3D, 0x3E, 0x3D, 0x3D, 0x3C, 0x3D, 0x3D, 0x3B, 0x3D, 0x3C, 0x3E, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 
   0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3D, 0x3C, 0x3D, 0x3A, 0x3B, 
   0x3A, 0x38, 0x39, 0x38, 0x36, 0x36, 0x36, 0x34, 0x35, 0x34, 0x33, 0x33, 0x33, 0x31, 0x30, 0x31, 
   0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2B, 
   0x2C, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x25, 0x25, 0x25, 0x24, 
   0x24, 0x24, 0x24, 0x23, 0x24, 0x23, 0x23, 0x23, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x24, 0x23, 
   0x24, 0x24, 0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 
   0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 0x25, 0x26, 0x25, 0x28, 0x28, 0x28, 0x28, 
   0x28, 0x28, 0x2A, 0x29, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2C, 0x2B, 0x2E, 0x2D, 0x2E, 0x2F, 0x2E, 0x2F, 0x30, 0x30, 0x30, 
   0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x2F, 0x31, 0x2F, 0x31, 0x31, 0x31, 0x30, 
   0x31, 0x30, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x38, 0x37, 
   0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x37, 0x38, 0x39, 0x38, 0x39, 0x38, 0x37, 0x38, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x39, 
   0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3E, 0x3D, 0x3E, 0x41, 0x40, 
   0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 
   0x43, 0x44, 0x43, 0x44, 0x43, 0x44, 0x42, 0x43, 0x42, 0x40, 0x42, 0x40, 0x42, 0x40, 0x42, 0x3F, 
   0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3C, 0x3B, 0x3C, 0x39, 0x39, 
   0x39, 0x37, 0x39, 0x37, 0x38, 0x38, 0x38, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 
   0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2E, 0x2E, 0x2E, 0x2E, 0x2C, 0x2E, 0x2C, 0x2D, 0x2C, 0x2C, 
   0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x31, 0x2E, 0x31, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x2F, 
   0x30, 0x2F, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 0x2C, 
   0x2C, 0x2A, 0x2C, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x28, 0x2A, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
   0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2C, 
   0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2D, 0x2C, 0x2E, 0x2D, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x35, 0x33, 0x35, 
   0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x36, 
   0x36, 0x36, 0x37, 0x36, 0x37, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x30, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 
   0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x2E, 0x30, 
   0x2E, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x30, 0x2E, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 
   0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x36, 0x34, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x39, 0x39, 
   0x39, 0x3B, 0x3A, 0x3B, 0x3D, 0x3D, 0x3D, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 
   0x41, 0x42, 0x41, 0x43, 0x43, 0x43, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 
   0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x49, 0x48, 0x49, 
   0x47, 0x48, 0x47, 0x48, 0x47, 0x48, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x43, 0x43, 0x43, 0x42, 
   0x43, 0x42, 0x43, 0x42, 0x43, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x40, 
   0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x40, 0x3F, 0x40, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 
   0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3D, 0x3C, 0x3D, 0x3B, 0x3B, 
   0x3B, 0x39, 0x39, 0x39, 0x37, 0x38, 0x37, 0x35, 0x36, 0x35, 0x33, 0x33, 0x33, 0x30, 0x31, 0x30, 
   0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2A, 0x2B, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x25, 0x27, 0x25, 0x25, 0x25, 0x24, 
   0x24, 0x24, 0x24, 0x23, 0x24, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 
   0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 
   0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x25, 0x24, 0x25, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x29, 
   0x28, 0x29, 0x29, 0x29, 0x29, 0x2B, 0x29, 0x2B, 0x29, 0x2A, 0x29, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 
   0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2C, 0x2D, 0x2C, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x35, 0x35, 0x35, 0x35, 0x36, 
   0x35, 0x39, 0x37, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 
   0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 
   0x3D, 0x40, 0x40, 0x40, 0x40, 0x42, 0x40, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3D, 
   0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x38, 0x37, 
   0x38, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x33, 0x35, 0x33, 0x34, 0x32, 0x34, 0x30, 0x31, 0x30, 
   0x2E, 0x30, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 0x2D, 0x2B, 0x2A, 0x2B, 0x2C, 
   0x2A, 0x2C, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 0x2C, 
   0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2E, 0x2D, 0x2E, 0x2E, 0x2D, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 
   0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 
   0x2B, 0x29, 0x2A, 0x29, 0x29, 0x28, 0x29, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 
   0x25, 0x26, 0x25, 0x26, 0x27, 0x26, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x29, 
   0x29, 0x29, 0x2C, 0x2A, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2D, 0x2C, 0x2E, 0x2D, 0x2E, 0x2E, 0x2D, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x30, 
   0x2F, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x2F, 0x2E, 
   0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 
   0x33, 0x33, 0x33, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 
   0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x34, 0x35, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x31, 0x31, 
   0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x31, 0x30, 0x30, 0x31, 0x30, 0x30, 0x31, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 
   0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x31, 0x33, 0x31, 0x33, 0x31, 0x35, 
   0x33, 0x35, 0x34, 0x35, 0x34, 0x35, 0x36, 0x35, 0x38, 0x37, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 
   0x39, 0x3B, 0x3C, 0x3B, 0x3F, 0x3D, 0x3F, 0x41, 0x3F, 0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 
   0x43, 0x42, 0x43, 0x43, 0x44, 0x43, 0x45, 0x44, 0x45, 0x45, 0x46, 0x45, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 
   0x48, 0x4A, 0x48, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x45, 0x46, 0x45, 0x46, 0x45, 0x46, 0x43, 
   0x44, 0x43, 0x43, 0x44, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x40, 
   0x40, 0x40, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3E, 0x3E, 0x3C, 0x3C, 
   0x3C, 0x3A, 0x3B, 0x3A, 0x39, 0x38, 0x39, 0x37, 0x36, 0x37, 0x35, 0x34, 0x35, 0x31, 0x32, 0x31, 
   0x2F, 0x30, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 
   0x2C, 0x2A, 0x2C, 0x2A, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x28, 0x29, 
   0x27, 0x29, 0x27, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x25, 0x27, 0x25, 0x24, 
   0x25, 0x24, 0x24, 0x23, 0x24, 0x23, 0x22, 0x23, 0x21, 0x23, 0x21, 0x22, 0x23, 0x22, 0x22, 0x22, 
   0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x24, 0x22, 0x24, 
   0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x28, 
   0x27, 0x28, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x27, 0x29, 0x27, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2C, 0x2C, 0x2C, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x32, 0x31, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x34, 0x35, 0x34, 0x35, 0x36, 
   0x35, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x35, 0x35, 0x35, 
   0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x37, 
   0x39, 0x37, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 
   0x3C, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x41, 0x40, 0x41, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x3E, 0x3E, 0x3E, 0x3C, 0x3D, 0x3C, 0x3B, 
   0x3C, 0x3B, 0x3B, 0x3A, 0x3B, 0x38, 0x3A, 0x38, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x37, 0x37, 
   0x37, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 0x31, 0x30, 0x31, 
   0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2C, 0x2B, 0x2C, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x29, 0x2B, 
   0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2C, 0x2B, 
   0x2C, 0x2B, 0x2C, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x2F, 
   0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2C, 0x2B, 0x2C, 0x2A, 0x29, 
   0x2A, 0x28, 0x28, 0x28, 0x26, 0x27, 0x26, 0x25, 0x25, 0x25, 0x24, 0x23, 0x24, 0x24, 0x22, 0x24, 
   0x23, 0x23, 0x23, 0x24, 0x22, 0x24, 0x26, 0x27, 0x26, 0x27, 0x26, 0x27, 0x26, 0x27, 0x26, 0x27, 
   0x27, 0x27, 0x29, 0x29, 0x29, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 
   0x2E, 0x2D, 0x2C, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x30, 0x2F, 0x30, 0x32, 0x32, 0x32, 
   0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x34, 0x35, 0x34, 0x34, 0x35, 0x34, 0x34, 
   0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x31, 0x33, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x33, 0x31, 0x33, 
   0x31, 0x33, 0x31, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x34, 0x33, 0x34, 0x34, 
   0x35, 0x34, 0x36, 0x35, 0x36, 0x37, 0x36, 0x37, 0x39, 0x38, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3A, 
   0x3B, 0x3D, 0x3B, 0x3D, 0x3F, 0x3E, 0x3F, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 
   0x42, 0x44, 0x42, 0x45, 0x44, 0x45, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4C, 0x4B, 0x4C, 0x4D, 0x4C, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 
   0x4C, 0x4A, 0x4C, 0x4A, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4D, 0x4C, 0x4D, 0x4B, 0x4C, 0x4B, 
   0x4A, 0x4C, 0x4A, 0x49, 0x4A, 0x49, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x45, 0x47, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x44, 0x44, 
   0x44, 0x45, 0x44, 0x45, 0x45, 0x43, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 
   0x42, 0x42, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x43, 0x41, 0x43, 0x40, 0x40, 0x40, 0x3D, 0x3E, 
   0x3D, 0x3B, 0x3C, 0x3B, 0x39, 0x3A, 0x39, 0x37, 0x38, 0x37, 0x36, 0x35, 0x36, 0x34, 0x33, 0x34, 
   0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x26, 0x27, 0x26, 0x26, 0x27, 0x26, 0x26, 
   0x25, 0x26, 0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 
   0x23, 0x21, 0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x23, 0x22, 0x23, 
   0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x28, 0x27, 0x28, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x29, 0x28, 
   0x29, 0x29, 0x29, 0x29, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x32, 0x31, 0x32, 
   0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x34, 0x36, 
   0x34, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x34, 0x35, 0x34, 0x34, 0x35, 0x34, 
   0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x39, 
   0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3B, 0x3A, 0x3B, 0x3C, 0x3C, 0x3C, 0x3D, 0x3F, 0x3D, 0x40, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3C, 0x3D, 0x3C, 0x3B, 0x3C, 0x3C, 
   0x3A, 0x3C, 0x39, 0x3A, 0x39, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x36, 0x36, 0x36, 0x36, 0x35, 
   0x36, 0x34, 0x35, 0x34, 0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x2F, 0x30, 
   0x2C, 0x2E, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2B, 0x2C, 0x28, 0x29, 0x28, 0x29, 0x28, 0x29, 0x29, 
   0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2B, 0x29, 
   0x2B, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2B, 0x2A, 0x2B, 
   0x2C, 0x2B, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 
   0x2D, 0x2F, 0x2C, 0x2E, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x28, 0x28, 
   0x28, 0x27, 0x26, 0x27, 0x26, 0x25, 0x26, 0x24, 0x24, 0x24, 0x23, 0x22, 0x23, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x27, 
   0x25, 0x27, 0x27, 0x27, 0x27, 0x29, 0x2A, 0x29, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2E, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2D, 0x2E, 0x2E, 
   0x2D, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 
   0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x31, 0x30, 0x31, 
   0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x33, 0x34, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x30, 0x31, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 
   0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x34, 
   0x36, 0x34, 0x37, 0x35, 0x37, 0x38, 0x37, 0x38, 0x37, 0x39, 0x37, 0x3A, 0x3B, 0x3A, 0x3D, 0x3C, 
   0x3D, 0x3E, 0x3D, 0x3E, 0x3F, 0x3F, 0x3F, 0x42, 0x42, 0x42, 0x44, 0x43, 0x44, 0x42, 0x45, 0x42, 
   0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x47, 0x45, 0x48, 0x48, 0x48, 0x4A, 0x49, 0x4A, 0x4A, 
   0x4B, 0x4A, 0x4C, 0x4B, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 0x4C, 0x4C, 
   0x4C, 0x4C, 0x4D, 0x4C, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4D, 0x4D, 0x4D, 
   0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 0x49, 0x4A, 0x49, 0x47, 0x48, 0x47, 0x48, 
   0x47, 0x48, 0x46, 0x47, 0x46, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x46, 
   0x45, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 0x47, 0x45, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x48, 0x47, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x44, 0x45, 0x44, 0x43, 
   0x43, 0x43, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x41, 0x42, 0x41, 0x3F, 0x3F, 
   0x3F, 0x3C, 0x3C, 0x3C, 0x3A, 0x3B, 0x3A, 0x38, 0x39, 0x38, 0x37, 0x36, 0x37, 0x34, 0x33, 0x34, 
   0x32, 0x32, 0x32, 0x31, 0x30, 0x31, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2A, 0x2A, 0x2A, 0x2B, 0x28, 0x2B, 0x29, 0x29, 0x29, 
   0x27, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x26, 0x26, 0x26, 0x26, 
   0x25, 0x26, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x21, 
   0x22, 0x23, 0x21, 0x23, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x22, 0x21, 0x22, 0x22, 0x21, 0x22, 
   0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x24, 0x23, 0x24, 0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x25, 0x26, 0x25, 0x28, 0x28, 
   0x28, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2E, 0x2D, 
   0x2D, 0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x32, 0x31, 0x32, 
   0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x32, 0x33, 0x32, 0x34, 0x34, 
   0x34, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x37, 
   0x38, 0x37, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3E, 0x3E, 0x3E, 0x3D, 0x3C, 0x3D, 
   0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3B, 0x3C, 0x3C, 0x3A, 0x3C, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x39, 0x3A, 0x38, 0x37, 0x38, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x33, 0x34, 0x33, 0x34, 0x34, 
   0x34, 0x34, 0x33, 0x34, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x30, 0x2F, 0x30, 0x2E, 0x2E, 0x2E, 
   0x2C, 0x2D, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x28, 0x29, 0x28, 0x26, 0x27, 0x26, 0x27, 
   0x28, 0x27, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
   0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x27, 0x29, 0x27, 0x29, 0x28, 0x29, 0x2A, 0x2A, 0x2A, 
   0x2B, 0x2B, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2D, 0x2E, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x29, 0x27, 0x29, 0x27, 0x26, 
   0x27, 0x26, 0x25, 0x26, 0x24, 0x23, 0x24, 0x22, 0x21, 0x22, 0x21, 0x1F, 0x21, 0x1E, 0x1E, 0x1E, 
   0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x23, 0x23, 0x23, 0x24, 
   0x24, 0x24, 0x26, 0x26, 0x26, 0x28, 0x28, 0x28, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 
   0x2B, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2C, 0x2D, 0x2F, 0x2E, 0x2F, 
   0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 0x34, 
   0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x31, 0x30, 0x31, 0x2F, 0x30, 
   0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x31, 0x2F, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x31, 
   0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x30, 0x32, 0x30, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 
   0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x36, 
   0x36, 0x36, 0x35, 0x36, 0x35, 0x38, 0x38, 0x38, 0x3A, 0x39, 0x3A, 0x3C, 0x3A, 0x3C, 0x3D, 0x3C, 
   0x3D, 0x3F, 0x3E, 0x3F, 0x40, 0x40, 0x40, 0x43, 0x41, 0x43, 0x44, 0x43, 0x44, 0x44, 0x45, 0x44, 
   0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x49, 0x48, 0x49, 0x4C, 0x4A, 0x4C, 0x4B, 
   0x4C, 0x4B, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 
   0x4D, 0x4D, 0x4E, 0x4D, 0x4D, 0x4E, 0x4D, 0x4F, 0x4E, 0x4F, 0x4F, 0x4F, 0x4F, 0x4E, 0x4F, 0x4E, 
   0x4E, 0x4F, 0x4E, 0x4C, 0x4D, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 0x48, 
   0x49, 0x48, 0x47, 0x48, 0x47, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x45, 0x47, 0x45, 0x47, 0x47, 
   0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x45, 0x46, 0x45, 0x44, 
   0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x45, 0x43, 0x45, 0x42, 0x42, 0x42, 0x40, 0x40, 
   0x40, 0x3E, 0x3D, 0x3E, 0x3B, 0x3B, 0x3B, 0x38, 0x38, 0x38, 0x36, 0x36, 0x36, 0x33, 0x34, 0x33, 
   0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x27, 0x28, 0x27, 
   0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x26, 0x28, 0x26, 0x26, 0x26, 0x26, 0x26, 
   0x25, 0x26, 0x24, 0x24, 0x24, 0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 0x22, 0x22, 0x22, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x22, 0x21, 0x22, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x24, 0x24, 0x24, 0x27, 0x26, 0x27, 0x27, 
   0x26, 0x27, 0x27, 0x26, 0x27, 0x25, 0x25, 0x25, 0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 0x25, 0x27, 
   0x25, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2D, 0x2C, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 
   0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x34, 0x33, 0x34, 0x35, 0x34, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x37, 
   0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x3B, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 
   0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x38, 0x39, 0x37, 0x37, 0x37, 0x36, 0x35, 0x36, 0x34, 0x34, 0x34, 0x33, 0x32, 0x33, 0x33, 0x32, 
   0x33, 0x31, 0x32, 0x31, 0x32, 0x30, 0x32, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2C, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2D, 0x2A, 0x2A, 0x2A, 0x28, 0x27, 0x28, 0x26, 0x27, 0x26, 0x26, 0x26, 0x26, 0x26, 
   0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 
   0x2A, 0x2A, 0x2A, 0x2B, 0x2C, 0x2B, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x29, 0x2B, 0x29, 0x28, 0x29, 0x27, 0x26, 0x27, 0x27, 0x25, 
   0x27, 0x24, 0x23, 0x24, 0x22, 0x22, 0x22, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1E, 0x1D, 0x1E, 
   0x1B, 0x1C, 0x1B, 0x1B, 0x1C, 0x1B, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x22, 0x22, 0x23, 
   0x23, 0x23, 0x25, 0x24, 0x25, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2B, 0x2D, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2B, 
   0x2D, 0x2B, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 
   0x2A, 0x28, 0x29, 0x28, 0x2A, 0x29, 0x2A, 0x2B, 0x2A, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2E, 0x2D, 
   0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x31, 
   0x32, 0x31, 0x33, 0x31, 0x33, 0x32, 0x31, 0x32, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 
   0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 
   0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x36, 
   0x36, 0x36, 0x37, 0x37, 0x37, 0x39, 0x37, 0x39, 0x39, 0x39, 0x39, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 
   0x3C, 0x40, 0x3E, 0x40, 0x42, 0x41, 0x42, 0x44, 0x42, 0x44, 0x44, 0x45, 0x44, 0x46, 0x46, 0x46, 
   0x45, 0x46, 0x45, 0x47, 0x48, 0x47, 0x49, 0x49, 0x49, 0x4C, 0x4A, 0x4C, 0x4C, 0x4D, 0x4C, 0x4D, 
   0x4F, 0x4D, 0x4F, 0x4E, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 
   0x4F, 0x4E, 0x4F, 0x4E, 0x4F, 0x4F, 0x4F, 0x4F, 0x50, 0x4F, 0x50, 0x50, 0x50, 0x4F, 0x4F, 0x4F, 
   0x50, 0x4F, 0x50, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4D, 0x4D, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4A, 0x4B, 0x49, 0x4A, 0x49, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x49, 0x49, 
   0x49, 0x4A, 0x4A, 0x4A, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 
   0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x45, 
   0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x43, 0x42, 0x43, 0x40, 0x41, 
   0x40, 0x3E, 0x3E, 0x3E, 0x3D, 0x3B, 0x3D, 0x38, 0x39, 0x38, 0x37, 0x36, 0x37, 0x34, 0x33, 0x34, 
   0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x29, 0x2A, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
   0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x27, 0x28, 0x27, 0x26, 0x26, 0x26, 0x26, 
   0x25, 0x26, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x23, 0x25, 0x26, 0x25, 0x26, 0x26, 
   0x25, 0x26, 0x25, 0x25, 0x25, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x25, 0x25, 0x25, 0x25, 0x25, 
   0x25, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2B, 0x2A, 0x2B, 0x2C, 0x2B, 0x2C, 
   0x2C, 0x2D, 0x2C, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2F, 0x2E, 0x31, 0x30, 0x31, 0x30, 
   0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x36, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x30, 
   0x31, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 
   0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 
   0x25, 0x26, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x29, 0x28, 0x29, 
   0x28, 0x29, 0x28, 0x2A, 0x2A, 0x2A, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 
   0x2A, 0x2A, 0x2B, 0x29, 0x2B, 0x2A, 0x28, 0x2A, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x24, 0x24, 
   0x24, 0x24, 0x22, 0x24, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1E, 0x1D, 0x1E, 0x1C, 0x1C, 0x1C, 
   0x1B, 0x1B, 0x1B, 0x1A, 0x1A, 0x1A, 0x1E, 0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x22, 
   0x21, 0x22, 0x22, 0x22, 0x22, 0x26, 0x24, 0x26, 0x27, 0x26, 0x27, 0x28, 0x27, 0x28, 0x29, 0x28, 
   0x29, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2D, 0x2C, 0x2D, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2D, 0x2B, 0x2D, 0x2C, 0x2B, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x2B, 0x29, 0x2B, 0x28, 0x28, 
   0x28, 0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x2C, 0x2C, 0x2C, 
   0x2E, 0x2E, 0x2E, 0x2F, 0x30, 0x2F, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 
   0x32, 0x33, 0x32, 0x31, 0x32, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x33, 0x32, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x2F, 
   0x30, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x39, 0x39, 0x39, 0x3B, 0x3A, 0x3B, 0x3E, 0x3D, 
   0x3E, 0x41, 0x40, 0x41, 0x43, 0x42, 0x43, 0x45, 0x45, 0x45, 0x47, 0x46, 0x47, 0x47, 0x47, 0x47, 
   0x48, 0x48, 0x48, 0x49, 0x4A, 0x49, 0x4B, 0x4B, 0x4B, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x50, 
   0x50, 0x50, 0x50, 0x51, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x51, 0x50, 0x52, 0x52, 
   0x52, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 
   0x51, 0x51, 0x51, 0x52, 0x52, 0x52, 0x51, 0x52, 0x51, 0x4E, 0x50, 0x4E, 0x4D, 0x4D, 0x4D, 0x4C, 
   0x4D, 0x4C, 0x4A, 0x4C, 0x4A, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 
   0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 
   0x4C, 0x4C, 0x4C, 0x4A, 0x4C, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x48, 0x49, 0x48, 0x47, 
   0x48, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x44, 0x45, 0x44, 0x41, 0x42, 
   0x41, 0x3F, 0x3E, 0x3F, 0x3B, 0x3B, 0x3B, 0x38, 0x39, 0x38, 0x36, 0x36, 0x36, 0x34, 0x32, 0x34, 
   0x2F, 0x30, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 
   0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2A, 0x2B, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x27, 0x27, 0x26, 0x27, 0x25, 
   0x25, 0x25, 0x23, 0x23, 0x23, 0x23, 0x21, 0x23, 0x21, 0x20, 0x21, 0x20, 0x1F, 0x20, 0x21, 0x20, 
   0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 0x25, 
   0x24, 0x25, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x25, 0x24, 
   0x25, 0x25, 0x26, 0x25, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x29, 0x28, 0x29, 0x2B, 0x2A, 0x2B, 
   0x2D, 0x2B, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2D, 
   0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 
   0x33, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x34, 
   0x35, 0x34, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 
   0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 
   0x35, 0x36, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x29, 0x2B, 
   0x28, 0x27, 0x28, 0x26, 0x26, 0x26, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x25, 0x24, 0x25, 0x25, 
   0x24, 0x25, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 
   0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x27, 0x26, 0x27, 
   0x27, 0x27, 0x27, 0x28, 0x29, 0x28, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x29, 
   0x29, 0x29, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x24, 0x25, 0x24, 0x23, 0x23, 
   0x23, 0x22, 0x21, 0x22, 0x20, 0x1F, 0x20, 0x1F, 0x1E, 0x1F, 0x1C, 0x1C, 0x1C, 0x1A, 0x1B, 0x1A, 
   0x19, 0x1A, 0x19, 0x19, 0x19, 0x19, 0x1A, 0x1B, 0x1A, 0x1C, 0x1C, 0x1C, 0x1D, 0x1E, 0x1D, 0x20, 
   0x20, 0x20, 0x20, 0x22, 0x20, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x26, 0x26, 0x26, 0x29, 0x28, 
   0x29, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2C, 0x2A, 0x2C, 0x2C, 0x2A, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2A, 0x2B, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2B, 0x2A, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 
   0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 0x2B, 0x2A, 0x2B, 
   0x2D, 0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 
   0x32, 0x33, 0x30, 0x31, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 
   0x2D, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x30, 0x31, 0x2F, 
   0x2F, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x32, 0x33, 0x32, 0x34, 0x33, 
   0x34, 0x34, 0x33, 0x34, 0x35, 0x33, 0x35, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x37, 0x36, 0x37, 0x36, 0x37, 0x36, 0x37, 
   0x37, 0x37, 0x38, 0x37, 0x38, 0x37, 0x38, 0x37, 0x37, 0x39, 0x37, 0x3A, 0x3B, 0x3A, 0x3E, 0x3E, 
   0x3E, 0x41, 0x40, 0x41, 0x43, 0x43, 0x43, 0x45, 0x46, 0x45, 0x48, 0x47, 0x48, 0x47, 0x48, 0x47, 
   0x48, 0x4A, 0x48, 0x4B, 0x4C, 0x4B, 0x4D, 0x4C, 0x4D, 0x4E, 0x4E, 0x4E, 0x4F, 0x51, 0x4F, 0x51, 
   0x52, 0x51, 0x51, 0x52, 0x51, 0x51, 0x51, 0x51, 0x50, 0x51, 0x50, 0x52, 0x52, 0x52, 0x52, 0x53, 
   0x52, 0x53, 0x54, 0x53, 0x54, 0x54, 0x54, 0x53, 0x54, 0x53, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 
   0x52, 0x52, 0x52, 0x53, 0x53, 0x53, 0x52, 0x52, 0x52, 0x50, 0x51, 0x50, 0x4E, 0x4F, 0x4E, 0x4C, 
   0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4B, 0x4D, 0x4B, 0x4D, 0x4D, 
   0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 0x4F, 0x4E, 0x4D, 0x4E, 0x4D, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 
   0x4C, 0x4D, 0x4C, 0x4B, 0x4D, 0x4B, 0x4A, 0x4C, 0x4A, 0x4C, 0x4A, 0x4C, 0x4A, 0x49, 0x4A, 0x48, 
   0x48, 0x48, 0x49, 0x48, 0x49, 0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 0x46, 0x46, 0x46, 0x42, 0x43, 
   0x42, 0x40, 0x3F, 0x40, 0x3D, 0x3B, 0x3D, 0x38, 0x39, 0x38, 0x36, 0x35, 0x36, 0x31, 0x32, 0x31, 
   0x2F, 0x2F, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2D, 0x2C, 0x2B, 
   0x2D, 0x2B, 0x2C, 0x2C, 0x2C, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2A, 0x2A, 0x2A, 0x28, 0x29, 0x28, 0x27, 0x25, 0x27, 0x26, 0x25, 0x26, 
   0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x27, 0x26, 0x27, 0x26, 
   0x25, 0x26, 0x24, 0x23, 0x24, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x20, 0x20, 0x21, 0x20, 0x21, 0x20, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x21, 0x20, 0x21, 
   0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x24, 0x22, 0x24, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x23, 
   0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x24, 0x24, 
   0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 
   0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 
   0x2C, 0x2B, 0x2E, 0x2E, 0x2E, 0x31, 0x30, 0x31, 0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 
   0x32, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x33, 
   0x34, 0x33, 0x37, 0x35, 0x37, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x35, 0x35, 
   0x35, 0x37, 0x35, 0x37, 0x35, 0x36, 0x35, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 
   0x35, 0x37, 0x34, 0x34, 0x34, 0x32, 0x31, 0x32, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 
   0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2A, 0x29, 0x2A, 
   0x27, 0x27, 0x27, 0x24, 0x25, 0x24, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x23, 
   0x23, 0x23, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x24, 
   0x25, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x24, 0x25, 0x24, 
   0x27, 0x26, 0x27, 0x27, 0x28, 0x27, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x28, 
   0x29, 0x28, 0x29, 0x28, 0x29, 0x27, 0x26, 0x27, 0x27, 0x25, 0x27, 0x24, 0x23, 0x24, 0x22, 0x21, 
   0x22, 0x21, 0x20, 0x21, 0x1F, 0x1E, 0x1F, 0x1E, 0x1D, 0x1E, 0x1B, 0x1C, 0x1B, 0x18, 0x1A, 0x18, 
   0x16, 0x19, 0x16, 0x18, 0x17, 0x18, 0x19, 0x1A, 0x19, 0x1B, 0x1C, 0x1B, 0x1D, 0x1D, 0x1D, 0x1E, 
   0x1E, 0x1E, 0x21, 0x21, 0x21, 0x22, 0x23, 0x22, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x27, 0x26, 
   0x27, 0x2A, 0x28, 0x2A, 0x29, 0x29, 0x29, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x27, 0x28, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x2A, 0x29, 0x2A, 
   0x2E, 0x2D, 0x2E, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x31, 
   0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 
   0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x33, 0x32, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 0x30, 0x31, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 0x34, 
   0x33, 0x35, 0x34, 0x35, 0x33, 0x34, 0x33, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x37, 0x35, 0x37, 0x37, 0x37, 0x37, 
   0x38, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x3C, 0x3C, 0x3C, 0x3F, 0x3F, 
   0x3F, 0x41, 0x42, 0x41, 0x44, 0x44, 0x44, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x48, 0x49, 0x48, 
   0x48, 0x4A, 0x48, 0x4C, 0x4C, 0x4C, 0x4E, 0x4D, 0x4E, 0x4E, 0x4F, 0x4E, 0x50, 0x52, 0x50, 0x51, 
   0x52, 0x51, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 0x52, 0x52, 0x52, 0x53, 0x53, 
   0x53, 0x55, 0x54, 0x55, 0x55, 0x55, 0x55, 0x54, 0x55, 0x54, 0x53, 0x54, 0x53, 0x53, 0x53, 0x53, 
   0x54, 0x54, 0x54, 0x54, 0x55, 0x54, 0x53, 0x54, 0x53, 0x51, 0x52, 0x51, 0x4F, 0x50, 0x4F, 0x4E, 
   0x4F, 0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 
   0x4E, 0x4F, 0x4F, 0x4F, 0x50, 0x50, 0x50, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x4E, 0x4E, 0x4E, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 
   0x49, 0x49, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x47, 0x47, 0x47, 0x46, 0x45, 0x46, 0x44, 0x43, 
   0x44, 0x41, 0x3F, 0x41, 0x3B, 0x3B, 0x3B, 0x38, 0x38, 0x38, 0x35, 0x35, 0x35, 0x33, 0x32, 0x33, 
   0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2C, 
   0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x28, 0x28, 0x28, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 
   0x27, 0x26, 0x27, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x26, 0x27, 0x26, 0x24, 
   0x25, 0x24, 0x23, 0x23, 0x23, 0x22, 0x21, 0x22, 0x20, 0x20, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x20, 
   0x20, 0x20, 0x20, 0x20, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 
   0x22, 0x22, 0x22, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x25, 0x24, 0x25, 0x23, 0x24, 0x23, 0x25, 
   0x24, 0x25, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 
   0x24, 0x24, 0x24, 0x24, 0x25, 0x26, 0x25, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x28, 0x28, 0x28, 
   0x2A, 0x2A, 0x2A, 0x2B, 0x2C, 0x2B, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D, 
   0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 
   0x31, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 
   0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x35, 
   0x34, 0x35, 0x35, 0x34, 0x35, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 
   0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x34, 
   0x34, 0x34, 0x33, 0x33, 0x33, 0x30, 0x31, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 0x2D, 
   0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 
   0x26, 0x26, 0x26, 0x22, 0x24, 0x22, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x22, 
   0x23, 0x22, 0x23, 0x24, 0x23, 0x25, 0x24, 0x25, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x23, 
   0x24, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x22, 0x23, 0x22, 0x24, 0x23, 0x24, 0x25, 0x24, 0x25, 
   0x26, 0x25, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x28, 0x29, 0x28, 0x27, 
   0x28, 0x27, 0x28, 0x27, 0x28, 0x26, 0x26, 0x26, 0x25, 0x24, 0x25, 0x22, 0x22, 0x22, 0x21, 0x21, 
   0x21, 0x20, 0x1F, 0x20, 0x1E, 0x1E, 0x1E, 0x1C, 0x1D, 0x1C, 0x1A, 0x1B, 0x1A, 0x18, 0x19, 0x18, 
   0x17, 0x18, 0x17, 0x17, 0x16, 0x17, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1D, 0x1C, 0x1D, 0x20, 
   0x1F, 0x20, 0x21, 0x20, 0x21, 0x22, 0x22, 0x22, 0x23, 0x23, 0x23, 0x26, 0x25, 0x26, 0x25, 0x26, 
   0x25, 0x28, 0x26, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 
   0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 0x27, 0x26, 
   0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x2A, 0x28, 0x2A, 0x2D, 0x2A, 0x2D, 
   0x2C, 0x2D, 0x2C, 0x2E, 0x2E, 0x2E, 0x31, 0x30, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2E, 0x2F, 0x2E, 0x2E, 0x2F, 0x2E, 0x30, 0x2F, 
   0x30, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x34, 0x35, 0x34, 0x34, 0x35, 0x34, 
   0x33, 0x35, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 
   0x33, 0x35, 0x33, 0x36, 0x35, 0x36, 0x36, 0x35, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x3B, 0x3A, 0x3B, 0x3E, 0x3C, 0x3E, 0x3E, 0x3F, 
   0x3E, 0x43, 0x43, 0x43, 0x44, 0x45, 0x44, 0x44, 0x46, 0x44, 0x48, 0x47, 0x48, 0x49, 0x49, 0x49, 
   0x49, 0x4A, 0x49, 0x4B, 0x4B, 0x4B, 0x4D, 0x4E, 0x4D, 0x50, 0x50, 0x50, 0x51, 0x51, 0x51, 0x52, 
   0x52, 0x52, 0x53, 0x53, 0x53, 0x52, 0x53, 0x52, 0x52, 0x53, 0x52, 0x52, 0x53, 0x52, 0x54, 0x54, 
   0x54, 0x54, 0x56, 0x54, 0x56, 0x56, 0x56, 0x54, 0x56, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 
   0x54, 0x54, 0x54, 0x54, 0x55, 0x54, 0x54, 0x54, 0x54, 0x52, 0x52, 0x52, 0x51, 0x51, 0x51, 0x4F, 
   0x50, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 
   0x4E, 0x4F, 0x4F, 0x4F, 0x4F, 0x50, 0x4F, 0x4F, 0x50, 0x4F, 0x4F, 0x4F, 0x4F, 0x4E, 0x4F, 0x4E, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4D, 0x4D, 0x4D, 0x4B, 0x4C, 0x4B, 0x4A, 0x4B, 0x4A, 0x4B, 
   0x4A, 0x4B, 0x48, 0x4A, 0x48, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x45, 0x46, 0x45, 0x43, 0x43, 
   0x43, 0x40, 0x40, 0x40, 0x3E, 0x3C, 0x3E, 0x3A, 0x39, 0x3A, 0x36, 0x36, 0x36, 0x33, 0x31, 0x33, 
   0x2E, 0x2F, 0x2E, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2D, 0x2B, 0x2D, 0x2C, 
   0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 
   0x2D, 0x2C, 0x2B, 0x2C, 0x29, 0x2A, 0x29, 0x28, 0x28, 0x28, 0x27, 0x25, 0x27, 0x25, 0x25, 0x25, 
   0x27, 0x26, 0x27, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x25, 0x26, 0x25, 0x26, 
   0x25, 0x26, 0x24, 0x23, 0x24, 0x22, 0x21, 0x22, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x21, 0x20, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x20, 0x22, 
   0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x24, 0x22, 0x24, 0x24, 0x23, 0x24, 0x25, 0x23, 0x25, 0x23, 
   0x23, 0x23, 0x22, 0x23, 0x22, 0x23, 0x22, 0x23, 0x22, 0x23, 0x22, 0x22, 0x23, 0x22, 0x23, 0x22, 
   0x23, 0x24, 0x22, 0x24, 0x24, 0x25, 0x24, 0x25, 0x26, 0x25, 0x27, 0x26, 0x27, 0x28, 0x28, 0x28, 
   0x29, 0x29, 0x29, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2A, 0x2C, 0x2B, 0x2A, 0x2B, 0x2C, 
   0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2E, 0x2C, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 
   0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x34, 
   0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x34, 0x34, 
   0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x37, 0x35, 0x37, 0x35, 0x35, 0x35, 0x33, 
   0x34, 0x33, 0x33, 0x32, 0x33, 0x30, 0x31, 0x30, 0x2E, 0x2F, 0x2E, 0x2C, 0x2E, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x28, 0x27, 0x28, 
   0x27, 0x25, 0x27, 0x25, 0x23, 0x25, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x24, 
   0x23, 0x24, 0x24, 0x22, 0x24, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x25, 0x23, 0x25, 0x22, 0x22, 
   0x22, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x24, 0x24, 0x24, 
   0x25, 0x25, 0x25, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 
   0x27, 0x26, 0x26, 0x26, 0x26, 0x25, 0x24, 0x25, 0x23, 0x23, 0x23, 0x21, 0x22, 0x21, 0x21, 0x20, 
   0x21, 0x20, 0x1F, 0x20, 0x1C, 0x1C, 0x1C, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x18, 0x18, 0x18, 
   0x17, 0x17, 0x17, 0x16, 0x16, 0x16, 0x1A, 0x1A, 0x1A, 0x1C, 0x1A, 0x1C, 0x1C, 0x1C, 0x1C, 0x1E, 
   0x1F, 0x1E, 0x21, 0x20, 0x21, 0x22, 0x22, 0x22, 0x25, 0x23, 0x25, 0x25, 0x25, 0x25, 0x25, 0x26, 
   0x25, 0x27, 0x26, 0x27, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 
   0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x2A, 
   0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x2A, 0x29, 0x2A, 0x2C, 0x2C, 0x2C, 
   0x2E, 0x2D, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x31, 0x30, 0x31, 0x32, 0x31, 0x32, 
   0x32, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 
   0x30, 0x2F, 0x30, 0x2F, 0x32, 0x31, 0x32, 0x34, 0x32, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x35, 0x33, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 0x40, 0x41, 
   0x40, 0x44, 0x43, 0x44, 0x44, 0x45, 0x44, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x49, 0x48, 0x49, 
   0x49, 0x4A, 0x49, 0x4B, 0x4C, 0x4B, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x51, 0x52, 0x51, 0x52, 
   0x53, 0x52, 0x53, 0x53, 0x53, 0x52, 0x53, 0x52, 0x53, 0x53, 0x53, 0x54, 0x53, 0x54, 0x54, 0x54, 
   0x54, 0x55, 0x56, 0x55, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 
   0x56, 0x54, 0x56, 0x54, 0x55, 0x54, 0x54, 0x54, 0x54, 0x52, 0x53, 0x52, 0x51, 0x52, 0x51, 0x51, 
   0x50, 0x51, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x50, 0x50, 
   0x50, 0x50, 0x50, 0x50, 0x50, 0x51, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 
   0x51, 0x50, 0x51, 0x4F, 0x50, 0x4F, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4C, 0x4D, 0x4C, 0x4C, 
   0x4C, 0x4C, 0x4A, 0x4B, 0x4A, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x47, 0x46, 0x47, 0x43, 0x43, 
   0x43, 0x40, 0x40, 0x40, 0x3E, 0x3C, 0x3E, 0x3A, 0x3A, 0x3A, 0x37, 0x36, 0x37, 0x34, 0x33, 0x34, 
   0x30, 0x2F, 0x30, 0x2E, 0x2D, 0x2E, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 
   0x2B, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 
   0x27, 0x26, 0x27, 0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x26, 0x26, 0x26, 0x24, 
   0x26, 0x24, 0x22, 0x23, 0x22, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 
   0x23, 0x22, 0x23, 0x22, 0x23, 0x22, 0x24, 0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x21, 
   0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x21, 0x22, 
   0x21, 0x22, 0x22, 0x22, 0x23, 0x24, 0x23, 0x25, 0x25, 0x25, 0x25, 0x26, 0x25, 0x28, 0x27, 0x28, 
   0x29, 0x2A, 0x29, 0x29, 0x2B, 0x29, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2B, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x31, 0x30, 0x31, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x35, 
   0x33, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x35, 0x35, 
   0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 
   0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x32, 0x32, 0x32, 0x30, 0x31, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2C, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 0x29, 0x2A, 0x29, 0x27, 0x28, 0x27, 0x26, 0x27, 0x26, 
   0x25, 0x25, 0x25, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x23, 
   0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x21, 0x21, 
   0x21, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 
   0x25, 0x25, 0x25, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x25, 
   0x26, 0x25, 0x25, 0x24, 0x25, 0x24, 0x23, 0x24, 0x21, 0x23, 0x21, 0x20, 0x21, 0x20, 0x1F, 0x1F, 
   0x1F, 0x1D, 0x1E, 0x1D, 0x1D, 0x1C, 0x1D, 0x19, 0x1A, 0x19, 0x19, 0x19, 0x19, 0x18, 0x17, 0x18, 
   0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1D, 0x1C, 0x1D, 0x20, 
   0x1E, 0x20, 0x21, 0x20, 0x21, 0x23, 0x22, 0x23, 0x23, 0x24, 0x23, 0x25, 0x25, 0x25, 0x25, 0x25, 
   0x25, 0x27, 0x25, 0x27, 0x25, 0x26, 0x25, 0x27, 0x26, 0x27, 0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 
   0x28, 0x29, 0x28, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x28, 0x29, 0x28, 
   0x28, 0x28, 0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x26, 0x28, 0x26, 
   0x28, 0x27, 0x27, 0x27, 0x28, 0x29, 0x28, 0x2A, 0x29, 0x2A, 0x29, 0x2B, 0x29, 0x2C, 0x2D, 0x2C, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x31, 0x32, 0x31, 0x32, 
   0x32, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 
   0x2F, 0x31, 0x30, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x32, 
   0x32, 0x32, 0x33, 0x33, 0x33, 0x35, 0x33, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x33, 0x35, 0x33, 0x35, 0x34, 0x35, 0x36, 0x36, 0x36, 
   0x36, 0x35, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x37, 
   0x38, 0x37, 0x39, 0x38, 0x39, 0x39, 0x3A, 0x39, 0x3C, 0x3C, 0x3C, 0x3F, 0x3F, 0x3F, 0x41, 0x42, 
   0x41, 0x43, 0x44, 0x43, 0x46, 0x45, 0x46, 0x44, 0x45, 0x44, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 
   0x49, 0x49, 0x49, 0x4B, 0x4B, 0x4B, 0x4D, 0x4E, 0x4D, 0x50, 0x50, 0x50, 0x50, 0x51, 0x50, 0x51, 
   0x53, 0x51, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x54, 0x53, 0x53, 0x54, 0x53, 0x55, 0x55, 
   0x55, 0x55, 0x55, 0x55, 0x56, 0x57, 0x56, 0x57, 0x57, 0x57, 0x55, 0x57, 0x55, 0x55, 0x56, 0x55, 
   0x54, 0x55, 0x54, 0x56, 0x55, 0x56, 0x54, 0x54, 0x54, 0x53, 0x53, 0x53, 0x51, 0x52, 0x51, 0x4F, 
   0x50, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x50, 0x4F, 0x4E, 0x4F, 
   0x4E, 0x50, 0x50, 0x50, 0x51, 0x51, 0x51, 0x50, 0x50, 0x50, 0x51, 0x50, 0x51, 0x50, 0x50, 0x50, 
   0x50, 0x50, 0x50, 0x51, 0x50, 0x51, 0x4E, 0x4F, 0x4E, 0x50, 0x4F, 0x50, 0x4E, 0x4F, 0x4E, 0x4C, 
   0x4E, 0x4C, 0x4C, 0x4B, 0x4C, 0x4A, 0x4A, 0x4A, 0x47, 0x49, 0x47, 0x45, 0x47, 0x45, 0x44, 0x44, 
   0x44, 0x41, 0x41, 0x41, 0x3D, 0x3E, 0x3D, 0x3A, 0x3A, 0x3A, 0x38, 0x37, 0x38, 0x34, 0x33, 0x34, 
   0x30, 0x30, 0x30, 0x2E, 0x2D, 0x2E, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 
   0x29, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 
   0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x28, 0x26, 0x28, 0x27, 0x25, 0x27, 0x25, 0x25, 0x25, 
   0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x26, 0x26, 
   0x25, 0x26, 0x24, 0x23, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x21, 
   0x21, 0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 
   0x23, 0x23, 0x23, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x21, 0x22, 0x21, 0x21, 
   0x21, 0x21, 0x20, 0x21, 0x20, 0x20, 0x21, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x25, 0x26, 0x25, 
   0x28, 0x28, 0x28, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 
   0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x34, 0x33, 0x35, 0x34, 0x35, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x34, 0x35, 
   0x34, 0x37, 0x35, 0x37, 0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 
   0x36, 0x37, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x33, 0x35, 0x33, 0x35, 0x33, 0x35, 0x32, 
   0x32, 0x32, 0x32, 0x31, 0x32, 0x30, 0x31, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 
   0x2D, 0x2B, 0x2C, 0x2B, 0x2D, 0x2C, 0x2D, 0x2A, 0x29, 0x2A, 0x27, 0x27, 0x27, 0x25, 0x26, 0x25, 
   0x25, 0x25, 0x25, 0x25, 0x23, 0x25, 0x23, 0x21, 0x23, 0x23, 0x22, 0x23, 0x25, 0x23, 0x25, 0x23, 
   0x23, 0x23, 0x24, 0x23, 0x24, 0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x22, 0x21, 0x20, 
   0x21, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 
   0x23, 0x25, 0x23, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x27, 0x25, 0x27, 0x25, 0x25, 0x25, 0x24, 
   0x24, 0x24, 0x24, 0x22, 0x24, 0x22, 0x22, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x1F, 0x1E, 
   0x1F, 0x1E, 0x1D, 0x1E, 0x1D, 0x1C, 0x1D, 0x19, 0x1A, 0x19, 0x17, 0x18, 0x17, 0x16, 0x15, 0x16, 
   0x15, 0x16, 0x15, 0x15, 0x16, 0x15, 0x1A, 0x1A, 0x1A, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x1B, 0x1E, 
   0x1E, 0x1E, 0x21, 0x20, 0x21, 0x21, 0x22, 0x21, 0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 
   0x24, 0x24, 0x25, 0x24, 0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x28, 0x27, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x28, 0x28, 0x28, 0x27, 
   0x27, 0x27, 0x28, 0x27, 0x28, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x28, 0x27, 
   0x28, 0x28, 0x28, 0x28, 0x2A, 0x29, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2C, 0x2B, 0x2D, 0x2E, 0x2D, 
   0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 
   0x32, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x35, 0x33, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 
   0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x33, 0x32, 0x33, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 
   0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x38, 
   0x37, 0x38, 0x39, 0x39, 0x39, 0x3A, 0x3C, 0x3A, 0x3D, 0x3E, 0x3D, 0x3F, 0x40, 0x3F, 0x42, 0x42, 
   0x42, 0x43, 0x44, 0x43, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x47, 0x46, 
   0x48, 0x48, 0x48, 0x4C, 0x4B, 0x4C, 0x4E, 0x4D, 0x4E, 0x4F, 0x4F, 0x4F, 0x51, 0x51, 0x51, 0x51, 
   0x52, 0x51, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x55, 0x53, 0x55, 0x55, 
   0x55, 0x55, 0x57, 0x55, 0x56, 0x56, 0x56, 0x56, 0x57, 0x56, 0x56, 0x57, 0x56, 0x56, 0x56, 0x56, 
   0x56, 0x56, 0x56, 0x54, 0x55, 0x54, 0x54, 0x54, 0x54, 0x53, 0x53, 0x53, 0x52, 0x52, 0x52, 0x50, 
   0x51, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x4F, 0x4F, 0x4F, 0x51, 0x50, 0x51, 0x50, 0x50, 
   0x50, 0x51, 0x50, 0x51, 0x51, 0x51, 0x51, 0x51, 0x50, 0x51, 0x51, 0x51, 0x51, 0x50, 0x51, 0x50, 
   0x50, 0x50, 0x50, 0x52, 0x51, 0x52, 0x50, 0x50, 0x50, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x4E, 0x4E, 0x4C, 0x4B, 0x4C, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 0x46, 0x47, 0x46, 0x44, 0x44, 
   0x44, 0x41, 0x41, 0x41, 0x3D, 0x3D, 0x3D, 0x3A, 0x3A, 0x3A, 0x38, 0x37, 0x38, 0x33, 0x34, 0x33, 
   0x30, 0x30, 0x30, 0x2E, 0x2D, 0x2E, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 
   0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x25, 
   0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
   0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 
   0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x25, 0x24, 0x25, 0x23, 0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 
   0x20, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x20, 0x1F, 0x21, 0x20, 0x21, 0x21, 0x20, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x23, 0x22, 0x23, 0x24, 0x24, 0x24, 0x25, 0x26, 0x25, 
   0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2C, 0x2B, 
   0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 
   0x2E, 0x2E, 0x2E, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x34, 
   0x34, 0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x35, 0x34, 
   0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x2F, 0x30, 0x2E, 0x2E, 0x2E, 0x2F, 0x2D, 
   0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2A, 0x29, 0x2A, 0x28, 0x27, 0x28, 0x27, 0x26, 0x27, 
   0x25, 0x25, 0x25, 0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x24, 
   0x23, 0x24, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x22, 0x23, 0x22, 0x22, 0x22, 0x22, 0x21, 0x20, 
   0x21, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 
   0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x23, 0x24, 0x23, 0x23, 
   0x22, 0x23, 0x23, 0x22, 0x23, 0x21, 0x22, 0x21, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x1F, 0x1F, 
   0x1F, 0x1D, 0x1D, 0x1D, 0x1B, 0x1C, 0x1B, 0x19, 0x19, 0x19, 0x17, 0x17, 0x17, 0x16, 0x17, 0x16, 
   0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1C, 0x1C, 0x1C, 0x1C, 
   0x1D, 0x1C, 0x1F, 0x1F, 0x1F, 0x21, 0x22, 0x21, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 
   0x24, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 
   0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x27, 0x28, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 
   0x27, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2C, 0x2C, 0x2C, 0x2D, 0x2E, 0x2D, 
   0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 
   0x31, 0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x34, 0x35, 
   0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x39, 
   0x38, 0x39, 0x39, 0x39, 0x39, 0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 0x3F, 0x40, 0x3F, 0x42, 0x42, 
   0x42, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x47, 0x46, 
   0x49, 0x48, 0x49, 0x4B, 0x4B, 0x4B, 0x4C, 0x4D, 0x4C, 0x4E, 0x4F, 0x4E, 0x4F, 0x50, 0x4F, 0x52, 
   0x51, 0x52, 0x52, 0x52, 0x52, 0x52, 0x53, 0x52, 0x53, 0x54, 0x53, 0x54, 0x54, 0x54, 0x55, 0x56, 
   0x55, 0x57, 0x56, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x56, 0x57, 0x56, 
   0x56, 0x56, 0x56, 0x55, 0x56, 0x55, 0x54, 0x55, 0x54, 0x52, 0x54, 0x52, 0x52, 0x52, 0x52, 0x51, 
   0x51, 0x51, 0x50, 0x50, 0x50, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x50, 0x4F, 0x50, 0x51, 
   0x50, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x50, 0x51, 0x50, 0x50, 0x51, 0x50, 
   0x50, 0x51, 0x50, 0x50, 0x51, 0x50, 0x50, 0x50, 0x50, 0x4F, 0x50, 0x4F, 0x4E, 0x4F, 0x4E, 0x4C, 
   0x4D, 0x4C, 0x4B, 0x4C, 0x4B, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x46, 0x46, 0x46, 0x44, 0x44, 
   0x44, 0x40, 0x41, 0x40, 0x3E, 0x3C, 0x3E, 0x39, 0x3A, 0x39, 0x37, 0x37, 0x37, 0x34, 0x34, 0x34, 
   0x31, 0x30, 0x31, 0x2D, 0x2D, 0x2D, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 
   0x2B, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x26, 
   0x24, 0x26, 0x25, 0x24, 0x25, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x22, 0x22, 
   0x22, 0x22, 0x23, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x23, 0x22, 0x23, 
   0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x24, 0x22, 0x24, 0x21, 0x20, 0x21, 0x21, 
   0x20, 0x21, 0x21, 0x20, 0x21, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 0x21, 0x20, 
   0x21, 0x21, 0x20, 0x21, 0x21, 0x22, 0x21, 0x23, 0x22, 0x23, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 
   0x28, 0x26, 0x28, 0x27, 0x28, 0x27, 0x29, 0x29, 0x29, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 
   0x2F, 0x2D, 0x2F, 0x2E, 0x2F, 0x2E, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x34, 0x34, 
   0x34, 0x37, 0x35, 0x37, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x34, 0x34, 0x34, 0x33, 
   0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 
   0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2A, 0x2A, 0x2A, 0x27, 0x28, 0x27, 0x27, 0x26, 0x27, 
   0x26, 0x24, 0x26, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x24, 
   0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x22, 0x23, 0x22, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x23, 0x23, 0x23, 0x25, 0x23, 0x25, 
   0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x23, 
   0x22, 0x23, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1D, 0x1F, 
   0x1D, 0x1D, 0x1D, 0x1D, 0x1B, 0x1A, 0x1B, 0x19, 0x18, 0x19, 0x16, 0x17, 0x16, 0x16, 0x16, 0x16, 
   0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x18, 0x1A, 0x18, 0x1A, 0x1A, 0x1A, 0x1B, 0x1C, 0x1B, 0x1E, 
   0x1D, 0x1E, 0x1E, 0x1F, 0x1E, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x23, 0x23, 
   0x23, 0x24, 0x23, 0x24, 0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x28, 0x27, 0x28, 
   0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 
   0x29, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x29, 
   0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2D, 0x2B, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2E, 0x2D, 
   0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x32, 
   0x31, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x30, 0x30, 
   0x30, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x34, 0x33, 0x34, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x35, 0x34, 0x35, 0x36, 0x35, 0x36, 0x35, 0x34, 0x35, 
   0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x37, 
   0x38, 0x37, 0x3B, 0x39, 0x3B, 0x3B, 0x3C, 0x3B, 0x3D, 0x3E, 0x3D, 0x3F, 0x40, 0x3F, 0x41, 0x41, 
   0x41, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x44, 0x45, 0x44, 
   0x47, 0x47, 0x47, 0x4A, 0x4A, 0x4A, 0x4A, 0x4C, 0x4A, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x50, 
   0x50, 0x50, 0x51, 0x51, 0x51, 0x52, 0x52, 0x52, 0x53, 0x53, 0x53, 0x53, 0x55, 0x53, 0x56, 0x57, 
   0x56, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x57, 0x58, 0x57, 
   0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x54, 0x56, 0x54, 0x54, 0x55, 0x54, 0x52, 0x53, 0x52, 0x51, 
   0x52, 0x51, 0x52, 0x51, 0x52, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x51, 0x50, 0x51, 0x51, 
   0x51, 0x51, 0x52, 0x51, 0x52, 0x52, 0x52, 0x51, 0x53, 0x51, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 
   0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x50, 0x50, 0x50, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4C, 
   0x4D, 0x4C, 0x4B, 0x4C, 0x4B, 0x4A, 0x4A, 0x4A, 0x48, 0x48, 0x48, 0x46, 0x46, 0x46, 0x43, 0x43, 
   0x43, 0x40, 0x40, 0x40, 0x3E, 0x3C, 0x3E, 0x3A, 0x3A, 0x3A, 0x37, 0x36, 0x37, 0x33, 0x34, 0x33, 
   0x2F, 0x30, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2C, 
   0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x28, 0x29, 0x28, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x25, 
   0x25, 0x25, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x22, 0x22, 
   0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x21, 
   0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x20, 0x21, 0x20, 
   0x20, 0x20, 0x1F, 0x1F, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x1F, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 
   0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x27, 
   0x27, 0x27, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x30, 0x2F, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x32, 
   0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x34, 
   0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x34, 
   0x35, 0x34, 0x33, 0x33, 0x33, 0x32, 0x31, 0x32, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2C, 0x2D, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x27, 0x27, 0x27, 
   0x27, 0x25, 0x27, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x25, 
   0x26, 0x25, 0x25, 0x25, 0x25, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x23, 0x23, 0x22, 0x23, 
   0x22, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x23, 0x22, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 
   0x24, 0x24, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x22, 
   0x22, 0x22, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 0x1E, 0x1E, 
   0x1E, 0x1D, 0x1C, 0x1D, 0x1B, 0x1A, 0x1B, 0x19, 0x19, 0x19, 0x17, 0x18, 0x17, 0x16, 0x17, 0x16, 
   0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x1B, 0x1A, 0x1B, 0x1A, 0x1B, 0x1A, 0x1B, 0x1C, 0x1B, 0x1D, 
   0x1C, 0x1D, 0x1E, 0x1F, 0x1E, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 
   0x22, 0x23, 0x24, 0x23, 0x26, 0x25, 0x26, 0x26, 0x25, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2E, 0x2D, 
   0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x30, 
   0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x31, 0x30, 
   0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 
   0x32, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x34, 0x33, 0x34, 0x33, 0x32, 
   0x33, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x39, 
   0x39, 0x39, 0x39, 0x3A, 0x39, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3F, 0x40, 0x3F, 0x41, 0x41, 
   0x41, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x45, 0x44, 0x45, 
   0x45, 0x46, 0x45, 0x48, 0x48, 0x48, 0x4A, 0x4A, 0x4A, 0x4C, 0x4C, 0x4C, 0x4D, 0x4E, 0x4D, 0x50, 
   0x50, 0x50, 0x51, 0x51, 0x51, 0x52, 0x52, 0x52, 0x52, 0x53, 0x52, 0x55, 0x55, 0x55, 0x56, 0x56, 
   0x56, 0x58, 0x59, 0x58, 0x58, 0x59, 0x58, 0x59, 0x59, 0x59, 0x58, 0x59, 0x58, 0x58, 0x59, 0x58, 
   0x57, 0x58, 0x57, 0x57, 0x58, 0x57, 0x56, 0x57, 0x56, 0x54, 0x55, 0x54, 0x53, 0x53, 0x53, 0x52, 
   0x52, 0x52, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x50, 0x51, 0x50, 0x50, 0x51, 0x50, 0x52, 0x52, 
   0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x53, 0x52, 0x52, 0x53, 0x52, 0x52, 0x53, 0x52, 
   0x52, 0x51, 0x52, 0x50, 0x50, 0x50, 0x4F, 0x50, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 
   0x4C, 0x4D, 0x4B, 0x4B, 0x4B, 0x49, 0x4A, 0x49, 0x48, 0x48, 0x48, 0x46, 0x46, 0x46, 0x44, 0x43, 
   0x44, 0x41, 0x3F, 0x41, 0x3E, 0x3C, 0x3E, 0x3A, 0x39, 0x3A, 0x37, 0x37, 0x37, 0x34, 0x34, 0x34, 
   0x31, 0x31, 0x31, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x28, 0x28, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x26, 
   0x25, 0x26, 0x23, 0x24, 0x23, 0x23, 0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x21, 
   0x22, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x20, 
   0x20, 0x20, 0x1E, 0x1F, 0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x21, 0x20, 
   0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x23, 0x23, 0x23, 0x24, 0x22, 0x24, 
   0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 0x25, 0x24, 0x25, 0x26, 0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 
   0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2B, 0x2A, 
   0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 
   0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x32, 
   0x31, 0x32, 0x33, 0x32, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x36, 0x35, 0x36, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 
   0x37, 0x38, 0x37, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x36, 
   0x37, 0x36, 0x34, 0x33, 0x34, 0x33, 0x31, 0x33, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x28, 0x27, 0x28, 
   0x27, 0x26, 0x27, 0x24, 0x25, 0x24, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x26, 0x26, 0x26, 0x26, 
   0x26, 0x26, 0x26, 0x25, 0x26, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x23, 0x23, 
   0x23, 0x24, 0x23, 0x24, 0x23, 0x22, 0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 
   0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x24, 0x22, 0x24, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x21, 
   0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1E, 0x1D, 
   0x1E, 0x1C, 0x1C, 0x1C, 0x19, 0x1A, 0x19, 0x17, 0x18, 0x17, 0x17, 0x18, 0x17, 0x17, 0x17, 0x17, 
   0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x1A, 0x1A, 0x1A, 0x1B, 0x1B, 0x1B, 0x1C, 0x1D, 0x1C, 0x1D, 
   0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x22, 0x21, 0x22, 0x21, 0x22, 
   0x21, 0x24, 0x23, 0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x29, 0x27, 0x29, 
   0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 
   0x29, 0x2A, 0x2B, 0x2A, 0x2B, 0x29, 0x2A, 0x29, 0x2A, 0x2B, 0x2A, 0x2A, 0x2B, 0x2A, 0x2C, 0x2B, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x31, 
   0x30, 0x31, 0x31, 0x2F, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 
   0x30, 0x34, 0x32, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x33, 0x31, 0x33, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x31, 0x32, 
   0x31, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x37, 
   0x39, 0x37, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3D, 0x3C, 0x3F, 0x40, 0x3F, 0x41, 0x40, 
   0x41, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 0x43, 0x45, 0x43, 
   0x45, 0x46, 0x45, 0x47, 0x48, 0x47, 0x49, 0x4A, 0x49, 0x4D, 0x4B, 0x4D, 0x4D, 0x4D, 0x4D, 0x4F, 
   0x50, 0x4F, 0x52, 0x51, 0x52, 0x52, 0x52, 0x52, 0x53, 0x53, 0x53, 0x53, 0x55, 0x53, 0x57, 0x56, 
   0x57, 0x58, 0x58, 0x58, 0x5A, 0x5A, 0x5A, 0x58, 0x5A, 0x58, 0x59, 0x5A, 0x59, 0x59, 0x59, 0x59, 
   0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x55, 0x56, 0x55, 0x55, 0x54, 0x55, 0x53, 
   0x53, 0x53, 0x51, 0x52, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x52, 0x51, 0x51, 0x53, 
   0x51, 0x54, 0x52, 0x54, 0x53, 0x53, 0x53, 0x53, 0x54, 0x53, 0x54, 0x54, 0x54, 0x52, 0x53, 0x52, 
   0x50, 0x52, 0x50, 0x50, 0x51, 0x50, 0x4F, 0x50, 0x4F, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4A, 
   0x4D, 0x4A, 0x4C, 0x4B, 0x4C, 0x4B, 0x4A, 0x4B, 0x49, 0x48, 0x49, 0x46, 0x45, 0x46, 0x43, 0x43, 
   0x43, 0x40, 0x3F, 0x40, 0x3C, 0x3C, 0x3C, 0x39, 0x39, 0x39, 0x37, 0x36, 0x37, 0x33, 0x34, 0x33, 
   0x31, 0x30, 0x31, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2A, 0x2C, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 
   0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2B, 0x29, 0x2B, 0x29, 0x28, 0x29, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x25, 
   0x25, 0x25, 0x25, 0x23, 0x25, 0x24, 0x22, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 
   0x21, 0x23, 0x21, 0x23, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x23, 0x22, 0x23, 0x21, 0x21, 0x21, 
   0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x20, 0x20, 
   0x20, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 
   0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x26, 0x25, 0x26, 0x26, 
   0x25, 0x26, 0x26, 0x26, 0x26, 0x28, 0x26, 0x28, 0x27, 0x26, 0x27, 0x29, 0x28, 0x29, 0x29, 0x29, 
   0x29, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x31, 0x30, 0x31, 0x2F, 
   0x30, 0x2F, 0x33, 0x31, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x33, 0x34, 0x33, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 
   0x37, 0x37, 0x37, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x36, 
   0x37, 0x36, 0x34, 0x34, 0x34, 0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x28, 0x2A, 
   0x28, 0x27, 0x28, 0x25, 0x25, 0x25, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 
   0x26, 0x26, 0x26, 0x25, 0x26, 0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x24, 0x23, 
   0x24, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 
   0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x22, 0x22, 0x22, 0x22, 
   0x21, 0x22, 0x20, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x20, 0x1E, 0x1F, 0x1E, 0x1C, 0x1D, 
   0x1C, 0x19, 0x1B, 0x19, 0x19, 0x1A, 0x19, 0x19, 0x19, 0x19, 0x17, 0x17, 0x17, 0x15, 0x17, 0x15, 
   0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1C, 0x1C, 0x1C, 0x1E, 
   0x1E, 0x1E, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 
   0x21, 0x24, 0x23, 0x24, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 
   0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x2A, 
   0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 
   0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 
   0x31, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x32, 
   0x33, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x36, 0x34, 0x36, 
   0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x39, 
   0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 0x3C, 0x3E, 0x3D, 0x3E, 0x40, 0x3F, 0x40, 0x40, 0x41, 
   0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x45, 0x44, 0x45, 
   0x45, 0x45, 0x45, 0x47, 0x48, 0x47, 0x4A, 0x4A, 0x4A, 0x4C, 0x4C, 0x4C, 0x4E, 0x4E, 0x4E, 0x50, 
   0x50, 0x50, 0x51, 0x51, 0x51, 0x52, 0x52, 0x52, 0x53, 0x54, 0x53, 0x55, 0x56, 0x55, 0x56, 0x57, 
   0x56, 0x59, 0x58, 0x59, 0x5A, 0x5B, 0x5A, 0x5A, 0x5B, 0x5A, 0x5A, 0x5A, 0x5A, 0x59, 0x5A, 0x59, 
   0x58, 0x59, 0x58, 0x58, 0x58, 0x58, 0x57, 0x58, 0x57, 0x56, 0x56, 0x56, 0x55, 0x55, 0x55, 0x52, 
   0x53, 0x52, 0x52, 0x52, 0x52, 0x50, 0x52, 0x50, 0x51, 0x51, 0x51, 0x52, 0x53, 0x52, 0x52, 0x53, 
   0x52, 0x52, 0x54, 0x52, 0x53, 0x54, 0x53, 0x53, 0x54, 0x53, 0x54, 0x54, 0x54, 0x54, 0x53, 0x54, 
   0x52, 0x52, 0x52, 0x50, 0x51, 0x50, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4E, 0x4E, 0x4E, 0x4C, 
   0x4D, 0x4C, 0x4B, 0x4B, 0x4B, 0x49, 0x4A, 0x49, 0x48, 0x48, 0x48, 0x46, 0x45, 0x46, 0x44, 0x42, 
   0x44, 0x41, 0x40, 0x41, 0x3D, 0x3C, 0x3D, 0x39, 0x39, 0x39, 0x37, 0x36, 0x37, 0x33, 0x34, 0x33, 
   0x31, 0x31, 0x31, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 
   0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 
   0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 
   0x25, 0x26, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x24, 0x22, 0x24, 0x22, 0x22, 0x22, 0x23, 0x22, 
   0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 0x1F, 0x1D, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 
   0x1E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x22, 0x21, 0x22, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x25, 0x24, 0x25, 0x24, 
   0x24, 0x24, 0x24, 0x24, 0x24, 0x26, 0x25, 0x26, 0x27, 0x25, 0x27, 0x27, 0x27, 0x27, 0x29, 0x28, 
   0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x2B, 0x2A, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 
   0x2C, 0x2A, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2D, 0x2C, 0x2F, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 
   0x31, 0x31, 0x31, 0x32, 0x31, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 
   0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x36, 
   0x36, 0x36, 0x34, 0x34, 0x34, 0x32, 0x31, 0x32, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x28, 0x28, 0x28, 
   0x27, 0x27, 0x27, 0x26, 0x25, 0x26, 0x25, 0x24, 0x25, 0x25, 0x24, 0x25, 0x26, 0x26, 0x26, 0x26, 
   0x26, 0x26, 0x26, 0x25, 0x26, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x24, 0x24, 
   0x24, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 
   0x24, 0x23, 0x24, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x20, 0x21, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1F, 0x1F, 0x1E, 0x1E, 0x1E, 0x1B, 0x1C, 
   0x1B, 0x19, 0x1A, 0x19, 0x18, 0x19, 0x18, 0x18, 0x18, 0x18, 0x16, 0x16, 0x16, 0x15, 0x16, 0x15, 
   0x15, 0x15, 0x15, 0x16, 0x16, 0x16, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1C, 0x1D, 0x1C, 0x1E, 
   0x1D, 0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x21, 0x20, 0x21, 0x21, 0x21, 
   0x21, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2A, 
   0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 
   0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x31, 
   0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x33, 0x31, 0x33, 0x32, 0x33, 0x32, 0x32, 0x34, 0x32, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x31, 0x32, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x31, 0x32, 
   0x31, 0x33, 0x32, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x36, 0x35, 0x36, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 
   0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3E, 0x3E, 0x3E, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x41, 0x41, 
   0x41, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 
   0x45, 0x46, 0x45, 0x47, 0x48, 0x47, 0x4B, 0x4B, 0x4B, 0x4C, 0x4D, 0x4C, 0x4F, 0x4F, 0x4F, 0x51, 
   0x50, 0x51, 0x52, 0x52, 0x52, 0x52, 0x53, 0x52, 0x54, 0x54, 0x54, 0x56, 0x55, 0x56, 0x58, 0x57, 
   0x58, 0x59, 0x5A, 0x59, 0x5A, 0x5B, 0x5A, 0x59, 0x5A, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 
   0x59, 0x59, 0x59, 0x58, 0x59, 0x58, 0x57, 0x57, 0x57, 0x55, 0x57, 0x55, 0x56, 0x55, 0x56, 0x55, 
   0x54, 0x55, 0x54, 0x54, 0x54, 0x53, 0x54, 0x53, 0x53, 0x53, 0x53, 0x53, 0x54, 0x53, 0x53, 0x54, 
   0x53, 0x53, 0x54, 0x53, 0x53, 0x54, 0x53, 0x53, 0x53, 0x53, 0x53, 0x54, 0x53, 0x52, 0x53, 0x52, 
   0x52, 0x52, 0x52, 0x52, 0x51, 0x52, 0x4F, 0x4F, 0x4F, 0x4F, 0x4E, 0x4F, 0x4D, 0x4D, 0x4D, 0x4B, 
   0x4B, 0x4B, 0x49, 0x4A, 0x49, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x45, 0x46, 0x45, 0x42, 0x43, 
   0x42, 0x41, 0x40, 0x41, 0x3E, 0x3C, 0x3E, 0x39, 0x39, 0x39, 0x37, 0x36, 0x37, 0x33, 0x34, 0x33, 
   0x2F, 0x31, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2A, 
   0x2C, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x28, 0x2A, 0x29, 0x28, 0x29, 
   0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x26, 
   0x26, 0x26, 0x24, 0x25, 0x24, 0x24, 0x23, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 
   0x22, 0x22, 0x23, 0x22, 0x22, 0x23, 0x22, 0x22, 0x23, 0x22, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1C, 0x1D, 
   0x1C, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 
   0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x23, 0x22, 0x23, 0x24, 0x23, 0x24, 0x23, 
   0x23, 0x23, 0x23, 0x24, 0x23, 0x23, 0x24, 0x23, 0x25, 0x25, 0x25, 0x26, 0x27, 0x26, 0x28, 0x27, 
   0x28, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 
   0x2B, 0x2A, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2F, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x31, 0x2F, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x34, 0x32, 0x34, 0x35, 0x35, 0x35, 0x35, 0x34, 
   0x35, 0x35, 0x35, 0x35, 0x36, 0x37, 0x36, 0x37, 0x38, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x36, 0x37, 0x36, 0x36, 
   0x35, 0x36, 0x34, 0x33, 0x34, 0x31, 0x31, 0x31, 0x2F, 0x31, 0x2F, 0x31, 0x30, 0x31, 0x2E, 0x2F, 
   0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x27, 0x28, 0x27, 
   0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 0x26, 
   0x25, 0x26, 0x26, 0x25, 0x26, 0x25, 0x24, 0x25, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x23, 0x23, 
   0x23, 0x23, 0x23, 0x23, 0x21, 0x23, 0x21, 0x22, 0x23, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
   0x22, 0x23, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1D, 0x1E, 0x1D, 0x1F, 0x1D, 0x1D, 0x1D, 0x1D, 0x1A, 0x1B, 
   0x1A, 0x19, 0x19, 0x19, 0x18, 0x18, 0x18, 0x16, 0x17, 0x16, 0x15, 0x15, 0x15, 0x14, 0x14, 0x14, 
   0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x1A, 0x1A, 0x1A, 0x1B, 0x1B, 0x1B, 0x1D, 0x1D, 0x1D, 0x1E, 
   0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1E, 0x1D, 0x1E, 0x1F, 0x1D, 0x1F, 0x1E, 0x1F, 0x1E, 0x20, 0x1F, 
   0x20, 0x22, 0x22, 0x22, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 
   0x27, 0x25, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x2A, 
   0x2A, 0x2A, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2E, 0x2F, 0x2E, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x31, 0x33, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 
   0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x34, 0x32, 0x34, 0x33, 0x32, 
   0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 
   0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x3A, 
   0x3B, 0x3A, 0x3D, 0x3C, 0x3D, 0x3E, 0x3D, 0x3E, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x41, 
   0x42, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 
   0x46, 0x46, 0x46, 0x48, 0x48, 0x48, 0x4A, 0x4B, 0x4A, 0x4D, 0x4C, 0x4D, 0x4F, 0x4F, 0x4F, 0x52, 
   0x51, 0x52, 0x52, 0x53, 0x52, 0x54, 0x53, 0x54, 0x54, 0x53, 0x54, 0x56, 0x56, 0x56, 0x58, 0x59, 
   0x58, 0x5A, 0x5A, 0x5A, 0x5A, 0x5B, 0x5A, 0x5A, 0x5B, 0x5A, 0x5A, 0x5A, 0x5A, 0x59, 0x5A, 0x59, 
   0x58, 0x59, 0x58, 0x58, 0x58, 0x58, 0x57, 0x58, 0x57, 0x57, 0x57, 0x57, 0x56, 0x57, 0x56, 0x56, 
   0x56, 0x56, 0x54, 0x55, 0x54, 0x54, 0x55, 0x54, 0x54, 0x55, 0x54, 0x54, 0x55, 0x54, 0x54, 0x54, 
   0x54, 0x54, 0x54, 0x54, 0x52, 0x53, 0x52, 0x53, 0x53, 0x53, 0x52, 0x53, 0x52, 0x52, 0x53, 0x52, 
   0x52, 0x53, 0x52, 0x50, 0x52, 0x50, 0x50, 0x50, 0x50, 0x4F, 0x4F, 0x4F, 0x4D, 0x4D, 0x4D, 0x4B, 
   0x4B, 0x4B, 0x48, 0x49, 0x48, 0x47, 0x48, 0x47, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x42, 0x42, 
   0x42, 0x41, 0x40, 0x41, 0x3E, 0x3D, 0x3E, 0x3A, 0x39, 0x3A, 0x35, 0x36, 0x35, 0x33, 0x32, 0x33, 
   0x31, 0x30, 0x31, 0x2E, 0x2E, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2C, 0x2D, 0x2C, 0x2C, 0x2B, 
   0x2C, 0x2B, 0x2A, 0x2B, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x26, 
   0x25, 0x26, 0x25, 0x24, 0x25, 0x23, 0x23, 0x23, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 
   0x21, 0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x23, 0x22, 0x23, 0x23, 0x21, 0x23, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 0x21, 0x20, 0x21, 0x21, 
   0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1E, 0x1D, 0x1E, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1C, 0x1D, 
   0x1C, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1F, 0x1D, 0x1F, 0x1E, 0x1E, 0x1E, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x23, 0x21, 0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 
   0x22, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x26, 0x25, 0x26, 0x26, 0x26, 
   0x26, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 
   0x29, 0x2A, 0x29, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x31, 
   0x30, 0x31, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 
   0x35, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x34, 
   0x35, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2C, 0x2D, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x28, 0x27, 0x28, 
   0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x24, 
   0x25, 0x24, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 0x23, 
   0x23, 0x23, 0x21, 0x23, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x1F, 0x20, 0x1F, 0x1E, 
   0x1F, 0x1E, 0x1F, 0x1D, 0x1F, 0x1D, 0x1D, 0x1D, 0x1C, 0x1E, 0x1C, 0x1C, 0x1D, 0x1C, 0x1A, 0x1A, 
   0x1A, 0x18, 0x19, 0x18, 0x16, 0x17, 0x16, 0x16, 0x16, 0x16, 0x14, 0x14, 0x14, 0x13, 0x13, 0x13, 
   0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x1A, 0x1A, 0x1A, 0x1B, 0x1B, 0x1B, 0x1E, 0x1D, 0x1E, 0x1E, 
   0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1C, 0x1D, 0x1D, 0x1E, 0x1D, 0x20, 0x1F, 
   0x20, 0x21, 0x20, 0x21, 0x22, 0x22, 0x22, 0x23, 0x24, 0x23, 0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 
   0x26, 0x25, 0x26, 0x26, 0x26, 0x26, 0x25, 0x24, 0x25, 0x26, 0x26, 0x26, 0x29, 0x29, 0x29, 0x29, 
   0x2A, 0x29, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x2F, 0x31, 0x2F, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 
   0x33, 0x31, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x31, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 
   0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x32, 0x32, 
   0x32, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 
   0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x3C, 
   0x3A, 0x3C, 0x3D, 0x3D, 0x3D, 0x40, 0x3F, 0x40, 0x42, 0x43, 0x42, 0x44, 0x43, 0x44, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 
   0x46, 0x46, 0x46, 0x48, 0x49, 0x48, 0x4A, 0x4C, 0x4A, 0x4D, 0x4E, 0x4D, 0x4F, 0x51, 0x4F, 0x52, 
   0x53, 0x52, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x55, 0x54, 0x57, 0x58, 0x57, 0x59, 0x59, 
   0x59, 0x5A, 0x5A, 0x5A, 0x5B, 0x5B, 0x5B, 0x5B, 0x5A, 0x5B, 0x59, 0x5A, 0x59, 0x59, 0x59, 0x59, 
   0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x57, 0x58, 0x57, 0x58, 0x56, 0x58, 0x56, 0x57, 0x56, 0x55, 
   0x56, 0x55, 0x55, 0x56, 0x55, 0x55, 0x56, 0x55, 0x55, 0x56, 0x55, 0x56, 0x56, 0x56, 0x55, 0x55, 
   0x55, 0x54, 0x54, 0x54, 0x53, 0x54, 0x53, 0x53, 0x54, 0x53, 0x53, 0x53, 0x53, 0x52, 0x53, 0x52, 
   0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 0x50, 0x51, 0x50, 0x50, 0x4F, 0x50, 0x4E, 0x4D, 0x4E, 0x4B, 
   0x4B, 0x4B, 0x49, 0x49, 0x49, 0x46, 0x47, 0x46, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x43, 0x42, 
   0x43, 0x40, 0x41, 0x40, 0x3E, 0x3D, 0x3E, 0x3A, 0x39, 0x3A, 0x36, 0x35, 0x36, 0x31, 0x31, 0x31, 
   0x2F, 0x30, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 
   0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 
   0x25, 0x26, 0x23, 0x24, 0x23, 0x21, 0x22, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x22, 0x21, 0x22, 0x23, 0x21, 0x23, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x20, 0x21, 0x1F, 
   0x1F, 0x1F, 0x1E, 0x1E, 0x1E, 0x1C, 0x1C, 0x1C, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x1B, 0x1A, 0x1C, 
   0x1A, 0x1B, 0x1C, 0x1B, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1E, 0x1C, 0x1E, 0x1C, 0x1E, 0x1C, 
   0x1E, 0x1F, 0x1E, 0x23, 0x21, 0x23, 0x22, 0x21, 0x22, 0x23, 0x21, 0x23, 0x22, 0x22, 0x22, 0x22, 
   0x21, 0x22, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x23, 0x23, 0x23, 0x25, 0x25, 0x25, 0x26, 0x26, 
   0x26, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x29, 0x27, 0x29, 
   0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2D, 0x2C, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x31, 0x2F, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x35, 0x35, 0x35, 0x35, 0x36, 
   0x35, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2F, 
   0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2C, 0x2D, 0x2A, 0x2A, 0x2A, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 
   0x27, 0x27, 0x27, 0x29, 0x27, 0x29, 0x27, 0x27, 0x27, 0x27, 0x25, 0x27, 0x25, 0x25, 0x25, 0x23, 
   0x25, 0x23, 0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
   0x22, 0x23, 0x21, 0x23, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x20, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x1F, 0x21, 0x1E, 
   0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1C, 0x1C, 0x1C, 0x1D, 0x1C, 0x1D, 0x1C, 0x1C, 0x1C, 0x18, 0x1A, 
   0x18, 0x17, 0x18, 0x17, 0x16, 0x16, 0x16, 0x15, 0x14, 0x15, 0x12, 0x13, 0x12, 0x10, 0x12, 0x10, 
   0x11, 0x12, 0x11, 0x11, 0x12, 0x11, 0x1A, 0x1A, 0x1A, 0x1B, 0x1B, 0x1B, 0x1C, 0x1C, 0x1C, 0x1E, 
   0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1E, 0x1E, 
   0x1E, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x23, 0x23, 0x23, 0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 
   0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x26, 0x25, 0x27, 0x27, 0x27, 0x2A, 
   0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 
   0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 
   0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x32, 0x30, 0x32, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x32, 0x30, 0x32, 0x31, 0x31, 
   0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x35, 0x33, 0x35, 0x34, 0x34, 0x34, 0x35, 0x36, 0x35, 
   0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3C, 
   0x3A, 0x3C, 0x3E, 0x3E, 0x3E, 0x42, 0x41, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x44, 0x44, 0x44, 
   0x46, 0x47, 0x46, 0x48, 0x49, 0x48, 0x4B, 0x4B, 0x4B, 0x4E, 0x4F, 0x4E, 0x50, 0x52, 0x50, 0x53, 
   0x54, 0x53, 0x54, 0x54, 0x54, 0x54, 0x55, 0x54, 0x56, 0x56, 0x56, 0x58, 0x58, 0x58, 0x5A, 0x59, 
   0x5A, 0x5A, 0x5B, 0x5A, 0x5B, 0x5B, 0x5B, 0x5A, 0x5B, 0x5A, 0x5A, 0x5A, 0x5A, 0x59, 0x5A, 0x59, 
   0x58, 0x59, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x55, 0x57, 0x55, 0x56, 0x57, 0x56, 0x56, 
   0x56, 0x56, 0x56, 0x57, 0x56, 0x56, 0x57, 0x56, 0x57, 0x57, 0x57, 0x56, 0x56, 0x56, 0x55, 0x56, 
   0x55, 0x54, 0x55, 0x54, 0x54, 0x54, 0x54, 0x53, 0x54, 0x53, 0x52, 0x53, 0x52, 0x52, 0x52, 0x52, 
   0x52, 0x52, 0x52, 0x50, 0x52, 0x50, 0x50, 0x51, 0x50, 0x4D, 0x4E, 0x4D, 0x4B, 0x4D, 0x4B, 0x4A, 
   0x4A, 0x4A, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x46, 0x45, 0x46, 0x43, 0x43, 0x43, 0x42, 0x42, 
   0x42, 0x40, 0x41, 0x40, 0x3E, 0x3D, 0x3E, 0x39, 0x39, 0x39, 0x36, 0x35, 0x36, 0x33, 0x32, 0x33, 
   0x30, 0x30, 0x30, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2D, 0x2F, 0x2C, 0x2D, 
   0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 
   0x29, 0x28, 0x29, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x24, 
   0x25, 0x24, 0x23, 0x23, 0x23, 0x23, 0x21, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x1C, 0x1E, 0x1C, 0x1A, 0x1B, 0x1A, 0x1B, 0x1B, 0x1B, 0x1A, 0x1B, 0x1A, 0x1A, 0x1B, 
   0x1A, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1E, 0x1C, 
   0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x21, 0x21, 0x21, 0x22, 0x20, 0x22, 0x21, 0x20, 0x21, 0x21, 
   0x20, 0x21, 0x22, 0x20, 0x22, 0x21, 0x21, 0x21, 0x23, 0x22, 0x23, 0x23, 0x24, 0x23, 0x27, 0x26, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x31, 
   0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x36, 
   0x35, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x37, 0x37, 0x37, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x33, 
   0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x2F, 0x31, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 
   0x29, 0x28, 0x29, 0x27, 0x28, 0x27, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x25, 0x25, 0x25, 0x24, 
   0x24, 0x24, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x20, 0x20, 0x20, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1E, 0x1F, 0x1D, 0x1E, 0x1D, 0x1C, 0x1E, 0x1C, 0x1D, 0x1C, 0x1D, 0x1B, 0x1A, 0x1B, 0x1A, 0x19, 
   0x1A, 0x17, 0x18, 0x17, 0x15, 0x16, 0x15, 0x14, 0x15, 0x14, 0x12, 0x13, 0x12, 0x12, 0x12, 0x12, 
   0x10, 0x12, 0x10, 0x10, 0x11, 0x10, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1C, 0x1C, 0x1C, 0x1B, 
   0x1B, 0x1B, 0x1B, 0x1C, 0x1B, 0x19, 0x1B, 0x19, 0x1A, 0x1B, 0x1A, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 
   0x1C, 0x1F, 0x1F, 0x1F, 0x22, 0x21, 0x22, 0x24, 0x23, 0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 
   0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x28, 
   0x28, 0x28, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2F, 0x2E, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x33, 0x33, 
   0x33, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 
   0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x34, 0x35, 0x34, 
   0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3C, 
   0x3D, 0x3C, 0x3F, 0x3F, 0x3F, 0x42, 0x40, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x44, 0x44, 0x44, 
   0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x4B, 0x4B, 0x4B, 0x4E, 0x4F, 0x4E, 0x51, 0x52, 0x51, 0x53, 
   0x54, 0x53, 0x54, 0x55, 0x54, 0x55, 0x55, 0x55, 0x56, 0x56, 0x56, 0x58, 0x59, 0x58, 0x59, 0x5B, 
   0x59, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5A, 0x5C, 0x5A, 0x5B, 0x5B, 0x5B, 0x5A, 0x59, 0x5A, 
   0x57, 0x58, 0x57, 0x57, 0x58, 0x57, 0x56, 0x56, 0x56, 0x54, 0x56, 0x54, 0x55, 0x56, 0x55, 0x56, 
   0x56, 0x56, 0x56, 0x57, 0x56, 0x56, 0x57, 0x56, 0x57, 0x57, 0x57, 0x56, 0x57, 0x56, 0x55, 0x56, 
   0x55, 0x55, 0x55, 0x55, 0x54, 0x54, 0x54, 0x53, 0x53, 0x53, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 
   0x51, 0x52, 0x51, 0x51, 0x51, 0x51, 0x50, 0x50, 0x50, 0x4C, 0x4E, 0x4C, 0x4B, 0x4C, 0x4B, 0x49, 
   0x49, 0x49, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x45, 0x46, 0x45, 0x44, 0x45, 0x44, 0x42, 0x42, 
   0x42, 0x40, 0x40, 0x40, 0x3E, 0x3E, 0x3E, 0x39, 0x3A, 0x39, 0x37, 0x37, 0x37, 0x34, 0x34, 0x34, 
   0x32, 0x31, 0x32, 0x30, 0x30, 0x30, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 
   0x2E, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 
   0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x26, 0x27, 0x26, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x24, 
   0x24, 0x24, 0x24, 0x23, 0x24, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x20, 0x21, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 0x1F, 0x1E, 0x1F, 0x1E, 
   0x1D, 0x1E, 0x1B, 0x1C, 0x1B, 0x1A, 0x1A, 0x1A, 0x19, 0x1A, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 
   0x19, 0x1A, 0x1A, 0x1A, 0x19, 0x1A, 0x19, 0x1B, 0x1A, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x1B, 
   0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x21, 0x20, 0x21, 0x22, 0x21, 0x22, 0x23, 0x22, 0x23, 0x25, 0x24, 
   0x25, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 
   0x27, 0x27, 0x27, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2C, 0x2B, 0x2C, 0x2E, 0x2E, 0x2E, 0x2F, 
   0x30, 0x2F, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x35, 0x35, 0x35, 0x35, 0x36, 
   0x35, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x32, 
   0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 
   0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 
   0x2B, 0x28, 0x2B, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x25, 0x26, 0x25, 0x24, 
   0x24, 0x24, 0x24, 0x23, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x21, 
   0x21, 0x22, 0x21, 0x22, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x20, 0x20, 0x20, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x1F, 
   0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 0x1D, 0x1C, 0x1B, 0x1C, 0x19, 0x19, 
   0x19, 0x17, 0x17, 0x17, 0x15, 0x16, 0x15, 0x15, 0x15, 0x15, 0x13, 0x13, 0x13, 0x11, 0x12, 0x11, 
   0x11, 0x10, 0x11, 0x10, 0x10, 0x10, 0x1A, 0x1B, 0x1A, 0x1A, 0x1B, 0x1A, 0x1B, 0x1B, 0x1B, 0x1B, 
   0x1B, 0x1B, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1B, 0x1B, 0x1A, 0x1B, 0x1C, 0x1C, 
   0x1C, 0x1F, 0x1E, 0x1F, 0x21, 0x21, 0x21, 0x23, 0x23, 0x23, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x29, 
   0x29, 0x29, 0x29, 0x2A, 0x29, 0x2D, 0x2C, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 
   0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 
   0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x33, 
   0x34, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x34, 0x32, 
   0x32, 0x32, 0x32, 0x2F, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x34, 0x33, 0x34, 
   0x36, 0x36, 0x36, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3C, 0x3E, 0x3C, 0x3F, 
   0x3E, 0x3F, 0x3F, 0x40, 0x3F, 0x41, 0x42, 0x41, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x42, 
   0x45, 0x46, 0x45, 0x48, 0x48, 0x48, 0x4A, 0x4B, 0x4A, 0x4D, 0x4D, 0x4D, 0x51, 0x50, 0x51, 0x53, 
   0x53, 0x53, 0x55, 0x55, 0x55, 0x56, 0x56, 0x56, 0x57, 0x57, 0x57, 0x58, 0x5A, 0x58, 0x5A, 0x5B, 
   0x5A, 0x5C, 0x5C, 0x5C, 0x5D, 0x5D, 0x5D, 0x5C, 0x5D, 0x5C, 0x5B, 0x5C, 0x5B, 0x59, 0x5A, 0x59, 
   0x58, 0x58, 0x58, 0x57, 0x57, 0x57, 0x54, 0x56, 0x54, 0x55, 0x55, 0x55, 0x54, 0x55, 0x54, 0x56, 
   0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x57, 0x56, 0x56, 0x57, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 
   0x56, 0x55, 0x55, 0x55, 0x53, 0x54, 0x53, 0x52, 0x52, 0x52, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 
   0x50, 0x51, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x4E, 0x4E, 0x4E, 0x4B, 0x4C, 0x4B, 0x49, 
   0x4A, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x44, 0x45, 0x44, 0x43, 0x43, 
   0x43, 0x40, 0x40, 0x40, 0x3E, 0x3D, 0x3E, 0x3A, 0x3A, 0x3A, 0x38, 0x37, 0x38, 0x34, 0x34, 0x34, 
   0x32, 0x32, 0x32, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 
   0x29, 0x29, 0x29, 0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x25, 
   0x24, 0x25, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x20, 0x1F, 0x20, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1C, 
   0x1E, 0x1C, 0x1D, 0x1B, 0x1D, 0x1B, 0x19, 0x1B, 0x19, 0x1A, 0x19, 0x19, 0x19, 0x19, 0x18, 0x19, 
   0x18, 0x19, 0x19, 0x19, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1B, 0x1A, 0x1B, 0x1A, 0x1A, 0x1B, 0x1A, 
   0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1E, 0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 0x1F, 0x1E, 0x1F, 0x1F, 
   0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x21, 0x21, 0x21, 0x22, 0x23, 0x22, 0x25, 0x24, 
   0x25, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 
   0x27, 0x26, 0x27, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2C, 0x2C, 0x2C, 0x2E, 0x2D, 0x2E, 0x2F, 
   0x2E, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x34, 0x33, 0x35, 0x36, 
   0x35, 0x38, 0x37, 0x38, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x32, 
   0x32, 0x32, 0x32, 0x31, 0x32, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 
   0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 0x25, 0x25, 0x25, 0x25, 
   0x25, 0x25, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x23, 0x22, 
   0x23, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x21, 0x20, 
   0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x20, 0x21, 0x20, 0x1F, 0x20, 0x1C, 0x1E, 0x1C, 0x1B, 0x1C, 0x1B, 0x18, 0x19, 
   0x18, 0x15, 0x17, 0x15, 0x14, 0x15, 0x14, 0x14, 0x15, 0x14, 0x14, 0x14, 0x14, 0x12, 0x12, 0x12, 
   0x10, 0x11, 0x10, 0x10, 0x10, 0x10, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x1A, 0x19, 0x19, 
   0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x19, 0x19, 0x19, 0x1A, 0x19, 0x19, 0x1A, 0x19, 0x1B, 0x1C, 
   0x1B, 0x1E, 0x1E, 0x1E, 0x21, 0x20, 0x21, 0x23, 0x23, 0x23, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 0x28, 
   0x28, 0x28, 0x2A, 0x2A, 0x2A, 0x2C, 0x2C, 0x2C, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 
   0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 
   0x33, 0x32, 0x32, 0x33, 0x32, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x34, 0x35, 0x34, 0x34, 0x33, 
   0x34, 0x34, 0x33, 0x34, 0x35, 0x34, 0x35, 0x34, 0x33, 0x34, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 
   0x32, 0x32, 0x32, 0x30, 0x30, 0x30, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 
   0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x30, 0x30, 0x30, 0x32, 0x32, 0x32, 0x34, 0x34, 0x34, 
   0x38, 0x37, 0x38, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3F, 0x3D, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x40, 0x41, 0x40, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 0x42, 
   0x43, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x40, 0x42, 0x40, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 
   0x44, 0x44, 0x44, 0x47, 0x47, 0x47, 0x49, 0x4A, 0x49, 0x4E, 0x4C, 0x4E, 0x51, 0x51, 0x51, 0x52, 
   0x53, 0x52, 0x53, 0x55, 0x53, 0x56, 0x57, 0x56, 0x57, 0x58, 0x57, 0x59, 0x59, 0x59, 0x5A, 0x5A, 
   0x5A, 0x5C, 0x5C, 0x5C, 0x5E, 0x5D, 0x5E, 0x5C, 0x5C, 0x5C, 0x5C, 0x5B, 0x5C, 0x59, 0x5A, 0x59, 
   0x57, 0x58, 0x57, 0x55, 0x56, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x53, 0x55, 0x53, 0x54, 
   0x55, 0x54, 0x55, 0x56, 0x55, 0x55, 0x57, 0x55, 0x56, 0x57, 0x56, 0x56, 0x57, 0x56, 0x55, 0x56, 
   0x55, 0x55, 0x55, 0x55, 0x54, 0x55, 0x54, 0x52, 0x52, 0x52, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 
   0x50, 0x51, 0x50, 0x50, 0x51, 0x50, 0x4E, 0x50, 0x4E, 0x4C, 0x4D, 0x4C, 0x4B, 0x4B, 0x4B, 0x49, 
   0x49, 0x49, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x48, 0x47, 0x48, 0x45, 0x45, 0x45, 0x42, 0x42, 
   0x42, 0x40, 0x40, 0x40, 0x3D, 0x3C, 0x3D, 0x3A, 0x3A, 0x3A, 0x38, 0x38, 0x38, 0x35, 0x35, 0x35, 
   0x32, 0x33, 0x32, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2C, 0x2D, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 
   0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 0x26, 0x28, 0x25, 0x25, 0x25, 0x24, 0x24, 0x24, 0x23, 
   0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x23, 0x22, 0x23, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x1F, 0x21, 0x1F, 0x1F, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x1D, 0x1E, 0x1B, 0x1B, 0x1B, 0x1A, 0x1A, 0x1A, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x18, 0x19, 
   0x18, 0x1A, 0x19, 0x1A, 0x19, 0x19, 0x19, 0x19, 0x1A, 0x19, 0x19, 0x1A, 0x19, 0x1B, 0x1A, 0x1B, 
   0x1B, 0x1C, 0x1B, 0x1B, 0x1C, 0x1B, 0x1B, 0x1C, 0x1B, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x20, 0x1E, 0x20, 0x1F, 0x20, 0x1F, 0x22, 0x22, 0x22, 0x24, 0x25, 
   0x24, 0x28, 0x26, 0x28, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x27, 0x25, 0x27, 0x25, 0x25, 0x25, 
   0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x2A, 0x2B, 0x2A, 0x2E, 0x2C, 0x2E, 0x30, 
   0x2F, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x33, 0x32, 0x35, 0x35, 
   0x35, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x39, 0x39, 0x39, 0x38, 0x37, 0x38, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x33, 
   0x32, 0x33, 0x30, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2D, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2A, 0x2B, 
   0x2A, 0x29, 0x2A, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x25, 0x26, 0x25, 0x24, 
   0x24, 0x24, 0x24, 0x22, 0x24, 0x23, 0x22, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
   0x22, 0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 
   0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 
   0x21, 0x22, 0x21, 0x1F, 0x21, 0x1F, 0x1F, 0x1F, 0x1E, 0x1E, 0x1E, 0x1C, 0x1C, 0x1C, 0x18, 0x19, 
   0x18, 0x16, 0x17, 0x16, 0x15, 0x16, 0x15, 0x15, 0x14, 0x15, 0x13, 0x14, 0x13, 0x12, 0x13, 0x12, 
   0x11, 0x11, 0x11, 0x10, 0x10, 0x10, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 
   0x1A, 0x1A, 0x1A, 0x19, 0x1A, 0x19, 0x19, 0x19, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1D, 0x1C, 
   0x1D, 0x1D, 0x1E, 0x1D, 0x21, 0x21, 0x21, 0x23, 0x23, 0x23, 0x25, 0x26, 0x25, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x2A, 0x29, 0x2A, 0x2D, 0x2C, 0x2D, 0x2F, 0x2E, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x32, 
   0x33, 0x32, 0x34, 0x33, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 
   0x31, 0x32, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2D, 
   0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x30, 0x2F, 0x32, 0x31, 0x32, 0x34, 0x34, 0x34, 
   0x36, 0x36, 0x36, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3D, 0x3B, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 
   0x3F, 0x3F, 0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x42, 0x43, 0x42, 
   0x44, 0x45, 0x44, 0x47, 0x47, 0x47, 0x49, 0x4A, 0x49, 0x4E, 0x4D, 0x4E, 0x50, 0x51, 0x50, 0x52, 
   0x54, 0x52, 0x55, 0x55, 0x55, 0x56, 0x57, 0x56, 0x56, 0x58, 0x56, 0x59, 0x5A, 0x59, 0x5A, 0x5B, 
   0x5A, 0x5C, 0x5C, 0x5C, 0x5D, 0x5D, 0x5D, 0x5C, 0x5C, 0x5C, 0x5B, 0x5B, 0x5B, 0x59, 0x5A, 0x59, 
   0x58, 0x57, 0x58, 0x57, 0x56, 0x57, 0x55, 0x55, 0x55, 0x54, 0x55, 0x54, 0x54, 0x55, 0x54, 0x55, 
   0x55, 0x55, 0x55, 0x56, 0x55, 0x56, 0x56, 0x56, 0x56, 0x57, 0x56, 0x56, 0x57, 0x56, 0x57, 0x56, 
   0x57, 0x55, 0x55, 0x55, 0x54, 0x54, 0x54, 0x52, 0x52, 0x52, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 
   0x50, 0x51, 0x50, 0x50, 0x50, 0x50, 0x4E, 0x4F, 0x4E, 0x4E, 0x4D, 0x4E, 0x4B, 0x4C, 0x4B, 0x49, 
   0x49, 0x49, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x46, 0x48, 0x46, 0x44, 0x46, 0x44, 0x43, 0x43, 
   0x43, 0x40, 0x40, 0x40, 0x3E, 0x3D, 0x3E, 0x3A, 0x3A, 0x3A, 0x38, 0x39, 0x38, 0x35, 0x36, 0x35, 
   0x33, 0x32, 0x33, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x29, 0x29, 0x29, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x25, 0x25, 0x25, 0x23, 0x24, 0x23, 0x23, 
   0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x22, 0x22, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x1F, 0x20, 0x1E, 0x1E, 0x1E, 0x1C, 
   0x1D, 0x1C, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x18, 0x1A, 0x18, 0x18, 0x19, 0x18, 0x18, 0x19, 
   0x18, 0x19, 0x19, 0x19, 0x1A, 0x19, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 
   0x1C, 0x1C, 0x1C, 0x1B, 0x1C, 0x1B, 0x1D, 0x1C, 0x1D, 0x1D, 0x1C, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x1E, 0x1E, 0x1D, 0x1E, 0x1D, 0x1F, 0x1E, 0x1F, 0x20, 0x20, 0x20, 0x22, 0x22, 0x22, 0x25, 0x24, 
   0x25, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x25, 0x25, 0x25, 0x25, 0x26, 0x25, 
   0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x2C, 0x2A, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 
   0x2E, 0x2E, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x35, 0x35, 
   0x35, 0x37, 0x38, 0x37, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 
   0x39, 0x39, 0x39, 0x38, 0x37, 0x38, 0x36, 0x35, 0x36, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x33, 
   0x32, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 
   0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x25, 0x26, 0x25, 0x25, 
   0x24, 0x25, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x22, 0x22, 
   0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
   0x21, 0x22, 0x20, 0x20, 0x20, 0x1E, 0x1F, 0x1E, 0x1C, 0x1E, 0x1C, 0x1A, 0x1C, 0x1A, 0x1A, 0x19, 
   0x1A, 0x17, 0x17, 0x17, 0x15, 0x15, 0x15, 0x14, 0x15, 0x14, 0x14, 0x14, 0x14, 0x13, 0x13, 0x13, 
   0x10, 0x12, 0x10, 0x10, 0x10, 0x10, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1B, 0x1B, 0x1B, 0x1B, 
   0x1B, 0x1B, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1B, 0x1B, 0x1B, 0x1D, 
   0x1B, 0x1E, 0x1F, 0x1E, 0x21, 0x21, 0x21, 0x23, 0x23, 0x23, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 
   0x27, 0x27, 0x29, 0x29, 0x29, 0x2D, 0x2C, 0x2D, 0x2F, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 
   0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x33, 0x31, 0x33, 0x33, 0x32, 0x33, 0x33, 
   0x32, 0x33, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x33, 0x35, 0x33, 0x34, 0x35, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 
   0x32, 0x31, 0x32, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2F, 0x2D, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 
   0x2E, 0x2D, 0x2F, 0x2D, 0x2F, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 
   0x2E, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x31, 0x2F, 0x32, 0x32, 0x32, 0x35, 0x34, 0x35, 
   0x38, 0x37, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3B, 0x3B, 0x3B, 0x3D, 0x3D, 0x3D, 0x3E, 
   0x3D, 0x3E, 0x3F, 0x40, 0x3F, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x43, 0x41, 0x43, 0x42, 0x43, 0x42, 
   0x44, 0x46, 0x44, 0x47, 0x48, 0x47, 0x4A, 0x4A, 0x4A, 0x4D, 0x4D, 0x4D, 0x4F, 0x4F, 0x4F, 0x52, 
   0x52, 0x52, 0x54, 0x55, 0x54, 0x56, 0x57, 0x56, 0x57, 0x58, 0x57, 0x58, 0x59, 0x58, 0x5A, 0x5A, 
   0x5A, 0x5C, 0x5D, 0x5C, 0x5F, 0x5D, 0x5F, 0x5D, 0x5D, 0x5D, 0x5A, 0x5B, 0x5A, 0x59, 0x5A, 0x59, 
   0x57, 0x58, 0x57, 0x55, 0x57, 0x55, 0x55, 0x56, 0x55, 0x55, 0x55, 0x55, 0x55, 0x56, 0x55, 0x54, 
   0x56, 0x54, 0x55, 0x55, 0x55, 0x55, 0x56, 0x55, 0x56, 0x57, 0x56, 0x55, 0x57, 0x55, 0x55, 0x56, 
   0x55, 0x56, 0x55, 0x56, 0x54, 0x55, 0x54, 0x52, 0x53, 0x52, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 
   0x50, 0x51, 0x50, 0x50, 0x50, 0x50, 0x4F, 0x4F, 0x4F, 0x4D, 0x4E, 0x4D, 0x4C, 0x4C, 0x4C, 0x4A, 
   0x49, 0x4A, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x45, 0x46, 0x43, 0x42, 
   0x43, 0x40, 0x40, 0x40, 0x3E, 0x3D, 0x3E, 0x3A, 0x3A, 0x3A, 0x38, 0x39, 0x38, 0x35, 0x36, 0x35, 
   0x33, 0x32, 0x33, 0x31, 0x30, 0x31, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 
   0x2E, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2A, 0x2B, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 
   0x28, 0x29, 0x28, 0x28, 0x27, 0x28, 0x25, 0x26, 0x25, 0x23, 0x25, 0x23, 0x25, 0x24, 0x25, 0x23, 
   0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x22, 0x22, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x1F, 0x1F, 0x1F, 0x1D, 0x1E, 0x1D, 0x1E, 
   0x1D, 0x1E, 0x1B, 0x1B, 0x1B, 0x1A, 0x1A, 0x1A, 0x18, 0x19, 0x18, 0x18, 0x19, 0x18, 0x18, 0x1A, 
   0x18, 0x19, 0x1A, 0x19, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x1B, 
   0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1D, 0x1C, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1C, 0x1D, 0x1C, 0x20, 0x20, 0x20, 0x22, 0x23, 0x22, 0x24, 0x24, 
   0x24, 0x27, 0x25, 0x27, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x25, 0x25, 0x25, 0x25, 0x26, 0x25, 
   0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x2A, 0x2C, 0x2A, 0x2E, 0x2D, 0x2E, 0x2F, 
   0x2E, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x35, 0x33, 0x35, 0x35, 0x35, 
   0x35, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 
   0x38, 0x39, 0x38, 0x37, 0x37, 0x37, 0x36, 0x35, 0x36, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 
   0x32, 0x33, 0x31, 0x31, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2D, 0x2F, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2C, 0x2B, 0x2C, 0x2A, 0x2B, 0x2A, 
   0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 0x25, 0x26, 0x25, 0x23, 
   0x25, 0x23, 0x25, 0x23, 0x25, 0x22, 0x22, 0x22, 0x23, 0x22, 0x23, 0x21, 0x22, 0x21, 0x22, 0x21, 
   0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1E, 0x1D, 0x1E, 0x1C, 0x1C, 0x1C, 0x1A, 0x1A, 
   0x1A, 0x16, 0x17, 0x16, 0x14, 0x16, 0x14, 0x15, 0x16, 0x15, 0x13, 0x13, 0x13, 0x12, 0x13, 0x12, 
   0x11, 0x11, 0x11, 0x10, 0x10, 0x10, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1B, 0x1B, 0x1B, 0x1C, 
   0x1C, 0x1C, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1D, 
   0x1C, 0x1F, 0x1F, 0x1F, 0x21, 0x20, 0x21, 0x23, 0x22, 0x23, 0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 
   0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 
   0x27, 0x27, 0x29, 0x29, 0x29, 0x2B, 0x2A, 0x2B, 0x2C, 0x2C, 0x2C, 0x2E, 0x2E, 0x2E, 0x2F, 0x30, 
   0x2F, 0x30, 0x32, 0x30, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 
   0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 
   0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x35, 0x33, 0x35, 0x34, 0x33, 0x34, 0x35, 0x33, 
   0x35, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x31, 0x31, 0x31, 
   0x32, 0x30, 0x32, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 
   0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x30, 0x31, 0x30, 0x32, 0x32, 0x32, 0x34, 0x34, 0x34, 
   0x36, 0x36, 0x36, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3A, 0x3B, 0x3B, 0x3C, 0x3B, 0x3E, 
   0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x40, 0x41, 0x40, 0x41, 0x42, 0x41, 0x40, 0x42, 0x40, 0x44, 0x43, 0x44, 0x43, 0x45, 0x43, 
   0x46, 0x46, 0x46, 0x49, 0x48, 0x49, 0x4A, 0x4B, 0x4A, 0x4E, 0x4D, 0x4E, 0x50, 0x50, 0x50, 0x50, 
   0x52, 0x50, 0x53, 0x54, 0x53, 0x55, 0x57, 0x55, 0x57, 0x58, 0x57, 0x5A, 0x5A, 0x5A, 0x5A, 0x5B, 
   0x5A, 0x5C, 0x5D, 0x5C, 0x5D, 0x5D, 0x5D, 0x5B, 0x5C, 0x5B, 0x5A, 0x5B, 0x5A, 0x59, 0x5A, 0x59, 
   0x59, 0x59, 0x59, 0x57, 0x57, 0x57, 0x55, 0x56, 0x55, 0x56, 0x56, 0x56, 0x54, 0x56, 0x54, 0x56, 
   0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x57, 0x56, 0x56, 0x57, 0x56, 0x56, 0x57, 
   0x56, 0x54, 0x54, 0x54, 0x55, 0x55, 0x55, 0x54, 0x53, 0x54, 0x51, 0x53, 0x51, 0x52, 0x53, 0x52, 
   0x51, 0x52, 0x51, 0x50, 0x51, 0x50, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4C, 0x4D, 0x4C, 0x4B, 
   0x4B, 0x4B, 0x4A, 0x49, 0x4A, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x44, 0x45, 0x44, 0x42, 0x43, 
   0x42, 0x40, 0x40, 0x40, 0x3D, 0x3C, 0x3D, 0x3A, 0x3A, 0x3A, 0x38, 0x38, 0x38, 0x34, 0x35, 0x34, 
   0x32, 0x33, 0x32, 0x2F, 0x30, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x30, 0x2E, 0x30, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 
   0x27, 0x28, 0x27, 0x28, 0x28, 0x28, 0x27, 0x26, 0x27, 0x25, 0x24, 0x25, 0x23, 0x23, 0x23, 0x21, 
   0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x22, 0x22, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x20, 0x1F, 0x20, 0x1F, 0x1E, 0x1F, 0x1C, 
   0x1D, 0x1C, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x1A, 0x19, 0x19, 0x1A, 
   0x19, 0x1A, 0x1B, 0x1A, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1D, 0x1C, 0x1C, 0x1D, 0x1C, 
   0x1C, 0x1D, 0x1C, 0x1C, 0x1D, 0x1C, 0x1D, 0x1C, 0x1D, 0x1C, 0x1D, 0x1C, 0x1D, 0x1D, 0x1D, 0x1D, 
   0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1F, 0x1E, 0x1F, 0x1F, 0x1E, 0x1F, 0x21, 0x21, 0x21, 0x23, 0x23, 
   0x23, 0x24, 0x24, 0x24, 0x26, 0x25, 0x26, 0x25, 0x24, 0x25, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x2C, 0x2B, 0x2C, 0x2E, 0x2D, 0x2E, 0x30, 
   0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x35, 0x35, 0x35, 0x35, 0x36, 
   0x35, 0x37, 0x36, 0x37, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x3B, 0x39, 0x3B, 0x39, 0x39, 0x39, 
   0x37, 0x39, 0x37, 0x36, 0x36, 0x36, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x31, 
   0x32, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 
   0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2A, 0x29, 0x2A, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x27, 0x26, 0x27, 0x24, 
   0x24, 0x24, 0x23, 0x23, 0x23, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x20, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x23, 0x21, 0x23, 0x21, 0x22, 0x21, 
   0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x23, 0x21, 0x23, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 0x1C, 0x1E, 0x1C, 0x1D, 0x1D, 0x1D, 0x19, 0x1A, 
   0x19, 0x17, 0x17, 0x17, 0x15, 0x17, 0x15, 0x13, 0x15, 0x13, 0x14, 0x13, 0x14, 0x13, 0x13, 0x13, 
   0x11, 0x12, 0x11, 0x10, 0x11, 0x10, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1C, 0x1B, 0x1C, 0x1B, 
   0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 
   0x1D, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x24, 0x25, 0x24, 
   0x25, 0x25, 0x25, 0x27, 0x25, 0x27, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x28, 
   0x27, 0x28, 0x28, 0x28, 0x28, 0x2A, 0x29, 0x2A, 0x2B, 0x2B, 0x2B, 0x2E, 0x2C, 0x2E, 0x30, 0x2F, 
   0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 
   0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 
   0x31, 0x32, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 
   0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x31, 0x33, 0x30, 0x32, 0x30, 0x30, 0x31, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2B, 
   0x2C, 0x2B, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x31, 0x31, 0x31, 0x32, 0x33, 0x32, 0x34, 0x36, 0x34, 
   0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3C, 
   0x3C, 0x3C, 0x3D, 0x3E, 0x3D, 0x3E, 0x40, 0x3E, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 
   0x41, 0x3F, 0x41, 0x3F, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x43, 0x42, 0x45, 0x45, 0x45, 
   0x48, 0x47, 0x48, 0x49, 0x48, 0x49, 0x4A, 0x4B, 0x4A, 0x4B, 0x4C, 0x4B, 0x4E, 0x4E, 0x4E, 0x51, 
   0x51, 0x51, 0x51, 0x53, 0x51, 0x56, 0x55, 0x56, 0x56, 0x57, 0x56, 0x56, 0x59, 0x56, 0x59, 0x5A, 
   0x59, 0x5B, 0x5B, 0x5B, 0x5C, 0x5D, 0x5C, 0x5B, 0x5C, 0x5B, 0x59, 0x5B, 0x59, 0x59, 0x5A, 0x59, 
   0x58, 0x59, 0x58, 0x58, 0x58, 0x58, 0x56, 0x58, 0x56, 0x58, 0x57, 0x58, 0x56, 0x57, 0x56, 0x54, 
   0x56, 0x54, 0x55, 0x56, 0x55, 0x55, 0x57, 0x55, 0x56, 0x57, 0x56, 0x56, 0x57, 0x56, 0x55, 0x56, 
   0x55, 0x55, 0x55, 0x55, 0x53, 0x53, 0x53, 0x54, 0x54, 0x54, 0x53, 0x53, 0x53, 0x52, 0x53, 0x52, 
   0x52, 0x52, 0x52, 0x50, 0x50, 0x50, 0x4E, 0x4F, 0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 0x4B, 
   0x4B, 0x4B, 0x49, 0x4A, 0x49, 0x49, 0x48, 0x49, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x43, 0x42, 
   0x43, 0x40, 0x40, 0x40, 0x3E, 0x3D, 0x3E, 0x3A, 0x3A, 0x3A, 0x37, 0x37, 0x37, 0x35, 0x35, 0x35, 
   0x32, 0x33, 0x32, 0x2F, 0x31, 0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 
   0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x28, 0x29, 0x28, 0x27, 0x28, 0x26, 0x26, 0x26, 0x24, 0x24, 0x24, 0x22, 0x22, 0x22, 0x22, 
   0x22, 0x22, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 
   0x21, 0x22, 0x21, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x1F, 0x1F, 0x1F, 0x1C, 0x1D, 0x1C, 0x1A, 
   0x1C, 0x1A, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1B, 0x1A, 0x1B, 0x1A, 0x1B, 0x1A, 
   0x1B, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1C, 0x1D, 0x1C, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1D, 
   0x1E, 0x1E, 0x1E, 0x1B, 0x1D, 0x1B, 0x1B, 0x1C, 0x1B, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1B, 
   0x1C, 0x1B, 0x1C, 0x1D, 0x1C, 0x1D, 0x1E, 0x1D, 0x1F, 0x1F, 0x1F, 0x21, 0x21, 0x21, 0x22, 0x21, 
   0x22, 0x23, 0x23, 0x23, 0x25, 0x24, 0x25, 0x23, 0x24, 0x23, 0x25, 0x24, 0x25, 0x25, 0x26, 0x25, 
   0x27, 0x26, 0x27, 0x28, 0x27, 0x28, 0x29, 0x29, 0x29, 0x2B, 0x2B, 0x2B, 0x2D, 0x2E, 0x2D, 0x30, 
   0x30, 0x30, 0x32, 0x32, 0x32, 0x35, 0x33, 0x35, 0x33, 0x35, 0x33, 0x36, 0x35, 0x36, 0x35, 0x36, 
   0x35, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 
   0x37, 0x38, 0x37, 0x35, 0x36, 0x35, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 0x32, 
   0x31, 0x32, 0x30, 0x31, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 
   0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x29, 0x2A, 
   0x28, 0x29, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x25, 
   0x25, 0x25, 0x22, 0x23, 0x22, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x20, 0x21, 0x22, 0x21, 0x22, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x20, 
   0x20, 0x20, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 0x1D, 0x1E, 0x1C, 0x1D, 0x1C, 0x1A, 0x1A, 
   0x1A, 0x18, 0x19, 0x18, 0x17, 0x17, 0x17, 0x15, 0x14, 0x15, 0x13, 0x13, 0x13, 0x12, 0x12, 0x12, 
   0x10, 0x11, 0x10, 0x10, 0x11, 0x10, 0x1A, 0x1A, 0x1A, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 
   0x1D, 0x1C, 0x1C, 0x1D, 0x1C, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1D, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 
   0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 
   0x27, 0x27, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x2A, 0x2A, 0x2A, 0x2B, 0x2C, 0x2B, 0x2F, 0x2E, 
   0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 
   0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 
   0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x30, 0x2F, 0x33, 0x32, 0x33, 0x35, 0x34, 0x35, 
   0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x3A, 0x3B, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3C, 0x3D, 0x3C, 0x41, 0x40, 0x41, 0x40, 0x41, 0x40, 0x41, 0x40, 0x41, 0x3F, 0x40, 
   0x3F, 0x3F, 0x40, 0x3F, 0x41, 0x40, 0x41, 0x45, 0x46, 0x45, 0x47, 0x48, 0x47, 0x49, 0x49, 0x49, 
   0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4F, 0x4E, 0x4F, 0x52, 0x52, 0x52, 0x51, 
   0x51, 0x51, 0x51, 0x52, 0x51, 0x54, 0x55, 0x54, 0x58, 0x59, 0x58, 0x5B, 0x5C, 0x5B, 0x5C, 0x5D, 
   0x5C, 0x5F, 0x5E, 0x5F, 0x5C, 0x5D, 0x5C, 0x5B, 0x5B, 0x5B, 0x59, 0x5A, 0x59, 0x59, 0x59, 0x59, 
   0x59, 0x59, 0x59, 0x5A, 0x59, 0x5A, 0x58, 0x59, 0x58, 0x58, 0x58, 0x58, 0x57, 0x57, 0x57, 0x56, 
   0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x55, 0x56, 0x55, 0x56, 0x55, 
   0x56, 0x54, 0x54, 0x54, 0x53, 0x54, 0x53, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x53, 0x54, 0x53, 
   0x50, 0x52, 0x50, 0x50, 0x51, 0x50, 0x50, 0x50, 0x50, 0x4E, 0x4F, 0x4E, 0x4E, 0x4D, 0x4E, 0x4B, 
   0x4B, 0x4B, 0x49, 0x4A, 0x49, 0x47, 0x49, 0x47, 0x47, 0x47, 0x47, 0x44, 0x45, 0x44, 0x42, 0x43, 
   0x42, 0x40, 0x40, 0x40, 0x3C, 0x3D, 0x3C, 0x3A, 0x3A, 0x3A, 0x38, 0x38, 0x38, 0x34, 0x35, 0x34, 
   0x32, 0x33, 0x32, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2A, 0x2C, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 
   0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 0x27, 0x26, 0x27, 0x23, 0x23, 0x23, 0x22, 0x22, 0x22, 0x22, 
   0x21, 0x22, 0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
   0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x1F, 0x1F, 0x1F, 0x1C, 0x1C, 0x1C, 0x1B, 
   0x1B, 0x1B, 0x1A, 0x1B, 0x1A, 0x1B, 0x1B, 0x1B, 0x1A, 0x1B, 0x1A, 0x1B, 0x1B, 0x1B, 0x1D, 0x1C, 
   0x1D, 0x1D, 0x1D, 0x1D, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 
   0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1D, 0x1C, 0x1D, 0x1D, 0x1C, 0x1D, 0x1B, 0x1C, 0x1B, 0x1C, 
   0x1C, 0x1C, 0x1D, 0x1C, 0x1D, 0x1D, 0x1D, 0x1D, 0x1F, 0x1E, 0x1F, 0x21, 0x20, 0x21, 0x21, 0x21, 
   0x21, 0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 
   0x27, 0x26, 0x27, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x2C, 0x2C, 0x2C, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x30, 0x2F, 0x33, 0x31, 0x33, 0x33, 0x33, 0x33, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 
   0x35, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x38, 0x39, 0x38, 0x37, 0x38, 0x37, 
   0x35, 0x37, 0x35, 0x35, 0x35, 0x35, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x31, 0x32, 0x2F, 0x31, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x2F, 0x2E, 
   0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x29, 0x29, 0x29, 
   0x27, 0x28, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x25, 
   0x24, 0x25, 0x23, 0x23, 0x23, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x1F, 
   0x1F, 0x21, 0x20, 0x21, 0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 
   0x23, 0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x20, 
   0x1F, 0x20, 0x20, 0x1F, 0x20, 0x1E, 0x1F, 0x1E, 0x1C, 0x1E, 0x1C, 0x1C, 0x1D, 0x1C, 0x1B, 0x1B, 
   0x1B, 0x18, 0x19, 0x18, 0x17, 0x17, 0x17, 0x15, 0x15, 0x15, 0x14, 0x14, 0x14, 0x12, 0x13, 0x12, 
   0x11, 0x12, 0x11, 0x12, 0x11, 0x12, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1D, 0x1C, 0x1D, 0x1E, 
   0x1C, 0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x20, 0x1F, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x1F, 0x20, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x23, 0x22, 0x23, 
   0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x25, 
   0x25, 0x25, 0x27, 0x27, 0x27, 0x29, 0x27, 0x29, 0x28, 0x28, 0x28, 0x2A, 0x2A, 0x2A, 0x2C, 0x2B, 
   0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 
   0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 
   0x32, 0x30, 0x32, 0x30, 0x31, 0x31, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2F, 0x2D, 0x2F, 0x2F, 0x2E, 0x2F, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x35, 0x36, 0x35, 
   0x37, 0x38, 0x37, 0x39, 0x3B, 0x39, 0x47, 0x48, 0x47, 0x45, 0x46, 0x45, 0x40, 0x40, 0x40, 0x3C, 
   0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 
   0x3E, 0x3B, 0x3B, 0x3B, 0x41, 0x41, 0x41, 0x65, 0x66, 0x65, 0x6F, 0x6F, 0x6F, 0x6F, 0x6E, 0x6F, 
   0x7A, 0x7C, 0x7A, 0x59, 0x59, 0x59, 0x55, 0x54, 0x55, 0x75, 0x75, 0x75, 0x77, 0x77, 0x77, 0x58, 
   0x5A, 0x58, 0x5D, 0x5E, 0x5D, 0x6C, 0x6F, 0x6C, 0x86, 0x85, 0x86, 0x89, 0x88, 0x89, 0x89, 0x8B, 
   0x89, 0x8B, 0x8A, 0x8B, 0x64, 0x64, 0x64, 0x5A, 0x5D, 0x5A, 0x59, 0x59, 0x59, 0x58, 0x58, 0x58, 
   0x57, 0x58, 0x57, 0x59, 0x59, 0x59, 0x58, 0x58, 0x58, 0x56, 0x57, 0x56, 0x56, 0x57, 0x56, 0x57, 
   0x56, 0x57, 0x55, 0x56, 0x55, 0x54, 0x55, 0x54, 0x54, 0x55, 0x54, 0x54, 0x55, 0x54, 0x54, 0x54, 
   0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x53, 0x54, 
   0x52, 0x52, 0x52, 0x50, 0x50, 0x50, 0x4F, 0x50, 0x4F, 0x4F, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4C, 
   0x4C, 0x4C, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 0x44, 0x46, 0x44, 0x43, 0x44, 0x43, 0x40, 0x42, 
   0x40, 0x3F, 0x3F, 0x3F, 0x3D, 0x3C, 0x3D, 0x3A, 0x3A, 0x3A, 0x37, 0x37, 0x37, 0x34, 0x35, 0x34, 
   0x34, 0x33, 0x34, 0x32, 0x31, 0x32, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x29, 0x2A, 
   0x29, 0x29, 0x29, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x23, 0x24, 0x23, 0x22, 0x22, 0x22, 0x21, 
   0x21, 0x21, 0x21, 0x22, 0x21, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x21, 0x22, 0x21, 0x21, 0x22, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
   0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x1F, 0x20, 0x1F, 0x1D, 0x1E, 0x1D, 0x1D, 
   0x1D, 0x1D, 0x1D, 0x1C, 0x1D, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1D, 0x1D, 
   0x1D, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 
   0x1F, 0x1D, 0x1F, 0x1C, 0x1D, 0x1C, 0x1B, 0x1C, 0x1B, 0x1B, 0x1B, 0x1B, 0x1A, 0x1B, 0x1A, 0x1B, 
   0x1B, 0x1B, 0x1B, 0x1C, 0x1B, 0x1C, 0x1D, 0x1C, 0x1F, 0x1D, 0x1F, 0x1E, 0x1F, 0x1E, 0x21, 0x21, 
   0x21, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x25, 0x26, 0x25, 
   0x27, 0x27, 0x27, 0x27, 0x29, 0x27, 0x2B, 0x29, 0x2B, 0x2B, 0x2B, 0x2B, 0x2E, 0x2E, 0x2E, 0x30, 
   0x31, 0x30, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x34, 0x35, 
   0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x37, 0x36, 0x37, 0x35, 0x36, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 0x30, 
   0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x28, 0x28, 0x28, 
   0x27, 0x26, 0x27, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x24, 0x25, 0x24, 0x25, 0x24, 
   0x23, 0x24, 0x21, 0x22, 0x21, 0x1F, 0x20, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 
   0x24, 0x22, 0x24, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x20, 
   0x20, 0x20, 0x1E, 0x1F, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1C, 0x1C, 0x1C, 0x1A, 0x1A, 
   0x1A, 0x18, 0x18, 0x18, 0x17, 0x17, 0x17, 0x14, 0x16, 0x14, 0x15, 0x15, 0x15, 0x14, 0x14, 0x14, 
   0x12, 0x12, 0x12, 0x12, 0x11, 0x12, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1D, 0x1D, 0x1D, 0x1E, 
   0x1E, 0x1E, 0x1E, 0x1F, 0x1E, 0x21, 0x20, 0x21, 0x20, 0x1F, 0x20, 0x21, 0x20, 0x21, 0x20, 0x20, 
   0x20, 0x20, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x1F, 0x1F, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 
   0x22, 0x21, 0x22, 0x22, 0x21, 0x22, 0x23, 0x22, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x25, 
   0x25, 0x25, 0x25, 0x26, 0x25, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 
   0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2C, 0x2B, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x31, 0x2F, 0x31, 
   0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 
   0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 
   0x2D, 0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 0x2E, 
   0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x33, 0x34, 0x33, 0x35, 0x36, 0x35, 
   0x37, 0x38, 0x37, 0x38, 0x39, 0x38, 0x50, 0x51, 0x50, 0x4A, 0x49, 0x4A, 0x3B, 0x3D, 0x3B, 0x41, 
   0x40, 0x41, 0x42, 0x41, 0x42, 0x4B, 0x49, 0x4B, 0x5A, 0x58, 0x5A, 0x47, 0x47, 0x47, 0x41, 0x42, 
   0x41, 0x53, 0x52, 0x53, 0x64, 0x65, 0x64, 0x6E, 0x6E, 0x6E, 0x83, 0x83, 0x83, 0x8A, 0x8B, 0x8A, 
   0x8D, 0x8D, 0x8D, 0x59, 0x59, 0x59, 0x56, 0x58, 0x56, 0x97, 0x98, 0x97, 0x86, 0x86, 0x86, 0x52, 
   0x52, 0x52, 0x8C, 0x8B, 0x8C, 0x97, 0x97, 0x97, 0xA4, 0xA4, 0xA4, 0xA6, 0xA6, 0xA6, 0xAC, 0xAD, 
   0xAC, 0x9A, 0x9A, 0x9A, 0x59, 0x5B, 0x59, 0x55, 0x56, 0x55, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 
   0x60, 0x63, 0x60, 0x62, 0x63, 0x62, 0x64, 0x63, 0x64, 0x64, 0x67, 0x64, 0x5C, 0x5D, 0x5C, 0x5A, 
   0x58, 0x5A, 0x56, 0x56, 0x56, 0x54, 0x55, 0x54, 0x54, 0x54, 0x54, 0x54, 0x55, 0x54, 0x54, 0x55, 
   0x54, 0x54, 0x55, 0x54, 0x54, 0x54, 0x54, 0x52, 0x53, 0x52, 0x53, 0x52, 0x53, 0x52, 0x52, 0x52, 
   0x50, 0x51, 0x50, 0x51, 0x51, 0x51, 0x4F, 0x50, 0x4F, 0x4F, 0x4F, 0x4F, 0x4E, 0x4E, 0x4E, 0x4B, 
   0x4C, 0x4B, 0x49, 0x4A, 0x49, 0x47, 0x47, 0x47, 0x43, 0x44, 0x43, 0x41, 0x42, 0x41, 0x3F, 0x41, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3D, 0x3C, 0x3D, 0x3A, 0x3A, 0x3A, 0x38, 0x38, 0x38, 0x36, 0x36, 0x36, 
   0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x2F, 
   0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 
   0x2E, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x29, 0x2A, 0x29, 
   0x29, 0x28, 0x29, 0x28, 0x27, 0x28, 0x27, 0x26, 0x27, 0x25, 0x25, 0x25, 0x23, 0x22, 0x23, 0x22, 
   0x21, 0x22, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x21, 0x22, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 
   0x23, 0x21, 0x23, 0x20, 0x21, 0x20, 0x21, 0x20, 0x21, 0x1F, 0x20, 0x1F, 0x1E, 0x1F, 0x1E, 0x1E, 
   0x1F, 0x1E, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1C, 0x1D, 
   0x1C, 0x1E, 0x1D, 0x1E, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 
   0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1B, 0x1C, 0x1B, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 
   0x1A, 0x1A, 0x1B, 0x1B, 0x1B, 0x1C, 0x1B, 0x1C, 0x1E, 0x1D, 0x1E, 0x21, 0x1F, 0x21, 0x21, 0x21, 
   0x21, 0x23, 0x22, 0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x26, 0x27, 0x26, 
   0x27, 0x27, 0x27, 0x2A, 0x28, 0x2A, 0x29, 0x2B, 0x29, 0x2C, 0x2C, 0x2C, 0x2E, 0x2E, 0x2E, 0x2F, 
   0x30, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x34, 
   0x35, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 
   0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x33, 0x34, 0x33, 0x31, 0x32, 0x31, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x2D, 0x2D, 0x2D, 0x2E, 0x2C, 0x2E, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x26, 0x27, 
   0x26, 0x25, 0x26, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x24, 0x22, 0x24, 0x22, 
   0x22, 0x22, 0x20, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x20, 0x1E, 0x1F, 0x1E, 0x20, 0x20, 
   0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x24, 0x23, 0x24, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 
   0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x20, 
   0x1F, 0x20, 0x20, 0x1F, 0x20, 0x1E, 0x1E, 0x1E, 0x1E, 0x1C, 0x1E, 0x1B, 0x1B, 0x1B, 0x18, 0x1A, 
   0x18, 0x16, 0x18, 0x16, 0x17, 0x17, 0x17, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x14, 0x15, 0x14, 
   0x13, 0x13, 0x13, 0x12, 0x12, 0x12, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1D, 0x1D, 0x1D, 0x1F, 
   0x1F, 0x1F, 0x20, 0x20, 0x20, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x1F, 
   0x21, 0x1E, 0x1F, 0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x20, 0x1F, 0x20, 0x21, 0x20, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x23, 0x21, 0x23, 0x24, 0x23, 0x24, 0x24, 0x22, 0x24, 0x24, 
   0x25, 0x24, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x29, 0x29, 
   0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2B, 0x2A, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 
   0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x33, 0x31, 0x33, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x31, 0x32, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 
   0x2C, 0x2E, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x32, 0x31, 0x32, 0x33, 0x33, 0x33, 0x35, 0x36, 0x35, 
   0x3A, 0x3A, 0x3A, 0x31, 0x31, 0x31, 0x3C, 0x3D, 0x3C, 0x59, 0x59, 0x59, 0x39, 0x3A, 0x39, 0x3A, 
   0x39, 0x3A, 0x45, 0x46, 0x45, 0x61, 0x61, 0x61, 0x89, 0x89, 0x89, 0x4F, 0x4F, 0x4F, 0x4B, 0x4B, 
   0x4B, 0x80, 0x81, 0x80, 0x86, 0x87, 0x86, 0x77, 0x75, 0x77, 0x82, 0x81, 0x82, 0x89, 0x8B, 0x89, 
   0x80, 0x80, 0x80, 0x59, 0x5A, 0x59, 0x67, 0x69, 0x67, 0x96, 0x98, 0x96, 0x87, 0x86, 0x87, 0x5C, 
   0x5B, 0x5C, 0xA6, 0xA3, 0xA6, 0xA5, 0xA6, 0xA5, 0x9E, 0x9F, 0x9E, 0xA1, 0xA2, 0xA1, 0xA7, 0xA7, 
   0xA7, 0xA1, 0xA3, 0xA1, 0x6F, 0x71, 0x6F, 0x52, 0x54, 0x52, 0x51, 0x50, 0x51, 0x6D, 0x6B, 0x6D, 
   0x86, 0x86, 0x86, 0x8C, 0x8B, 0x8C, 0x90, 0x8F, 0x90, 0x79, 0x7A, 0x79, 0x61, 0x60, 0x61, 0x5C, 
   0x5E, 0x5C, 0x55, 0x56, 0x55, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x55, 
   0x54, 0x54, 0x55, 0x54, 0x55, 0x55, 0x55, 0x52, 0x53, 0x52, 0x52, 0x52, 0x52, 0x51, 0x51, 0x51, 
   0x50, 0x51, 0x50, 0x50, 0x51, 0x50, 0x50, 0x50, 0x50, 0x4F, 0x4F, 0x4F, 0x4E, 0x4D, 0x4E, 0x4C, 
   0x4B, 0x4C, 0x4A, 0x49, 0x4A, 0x46, 0x46, 0x46, 0x43, 0x44, 0x43, 0x42, 0x41, 0x42, 0x40, 0x40, 
   0x40, 0x3F, 0x3F, 0x3F, 0x3D, 0x3D, 0x3D, 0x3A, 0x3A, 0x3A, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 
   0x36, 0x36, 0x36, 0x33, 0x35, 0x33, 0x34, 0x34, 0x34, 0x32, 0x32, 0x32, 0x31, 0x30, 0x31, 0x2F, 
   0x30, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2D, 
   0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 
   0x29, 0x29, 0x29, 0x27, 0x27, 0x27, 0x26, 0x25, 0x26, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x23, 
   0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 
   0x20, 0x21, 0x1E, 0x1F, 0x1E, 0x1F, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1D, 0x1D, 
   0x1D, 0x1C, 0x1D, 0x1C, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x1E, 0x1E, 0x1E, 0x1C, 0x1C, 0x1C, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 
   0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1C, 0x1C, 0x1C, 0x1E, 0x1D, 0x1E, 0x1E, 0x1F, 0x1E, 0x21, 0x21, 
   0x21, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 
   0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 
   0x30, 0x2F, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x34, 0x32, 0x34, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x34, 0x32, 0x34, 
   0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x31, 0x32, 0x31, 0x31, 
   0x2F, 0x31, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 0x2B, 0x2C, 0x29, 0x2A, 0x29, 0x2B, 0x2A, 
   0x2B, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x26, 0x25, 0x26, 
   0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x21, 
   0x21, 0x21, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x1E, 0x1F, 0x1E, 0x1E, 0x1F, 0x1E, 0x1D, 0x1E, 
   0x1D, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x23, 0x23, 0x23, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 
   0x23, 0x24, 0x23, 0x22, 0x22, 0x22, 0x23, 0x21, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 
   0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1D, 0x1E, 0x1D, 0x1B, 0x1C, 0x1B, 0x1A, 0x1A, 0x1A, 0x19, 0x19, 
   0x19, 0x17, 0x17, 0x17, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x16, 0x16, 0x16, 
   0x15, 0x14, 0x15, 0x14, 0x13, 0x14, 0x1B, 0x1B, 0x1B, 0x1D, 0x1C, 0x1D, 0x1E, 0x1D, 0x1E, 0x1F, 
   0x1F, 0x1F, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x1F, 0x20, 0x1E, 0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 0x21, 0x1F, 0x21, 0x20, 0x1F, 0x20, 
   0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 
   0x24, 0x24, 0x26, 0x24, 0x26, 0x26, 0x25, 0x26, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x28, 0x28, 
   0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x29, 0x2A, 0x29, 0x2C, 0x2C, 0x2C, 0x2D, 0x2E, 0x2D, 
   0x2F, 0x2F, 0x2F, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x32, 
   0x33, 0x32, 0x32, 0x31, 0x32, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 
   0x30, 0x30, 0x2F, 0x30, 0x31, 0x30, 0x31, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 
   0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2F, 0x2E, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x35, 0x36, 0x35, 
   0x39, 0x3B, 0x39, 0x26, 0x26, 0x26, 0x29, 0x28, 0x29, 0x53, 0x54, 0x53, 0x3F, 0x3F, 0x3F, 0x34, 
   0x34, 0x34, 0x48, 0x49, 0x48, 0x67, 0x69, 0x67, 0x69, 0x6A, 0x69, 0x48, 0x47, 0x48, 0x4C, 0x4C, 
   0x4C, 0x78, 0x79, 0x78, 0x6D, 0x6D, 0x6D, 0x56, 0x56, 0x56, 0x57, 0x56, 0x57, 0x5C, 0x5A, 0x5C, 
   0x55, 0x56, 0x55, 0x4E, 0x4E, 0x4E, 0x5B, 0x5B, 0x5B, 0x5C, 0x5D, 0x5C, 0x5D, 0x5D, 0x5D, 0x5D, 
   0x5F, 0x5D, 0x76, 0x77, 0x76, 0x6F, 0x6E, 0x6F, 0x65, 0x66, 0x65, 0x67, 0x68, 0x67, 0x67, 0x67, 
   0x67, 0x67, 0x66, 0x67, 0x6C, 0x6B, 0x6C, 0x5E, 0x5F, 0x5E, 0x4B, 0x4C, 0x4B, 0x7C, 0x7B, 0x7C, 
   0xBC, 0xB9, 0xBC, 0xB6, 0xB6, 0xB6, 0xB9, 0xB9, 0xB9, 0x71, 0x72, 0x71, 0x55, 0x54, 0x55, 0x57, 
   0x56, 0x57, 0x57, 0x58, 0x57, 0x54, 0x54, 0x54, 0x52, 0x54, 0x52, 0x53, 0x54, 0x53, 0x54, 0x54, 
   0x54, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x53, 0x53, 0x53, 0x51, 0x52, 0x51, 0x50, 0x51, 0x50, 
   0x50, 0x51, 0x50, 0x52, 0x51, 0x52, 0x50, 0x50, 0x50, 0x4F, 0x4E, 0x4F, 0x4D, 0x4D, 0x4D, 0x4B, 
   0x4C, 0x4B, 0x49, 0x4A, 0x49, 0x45, 0x46, 0x45, 0x43, 0x44, 0x43, 0x41, 0x41, 0x41, 0x40, 0x40, 
   0x40, 0x3F, 0x40, 0x3F, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 0x38, 0x39, 0x38, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x32, 
   0x31, 0x32, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x30, 0x31, 0x30, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2D, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 0x2D, 0x2B, 0x2A, 0x2B, 
   0x2A, 0x29, 0x2A, 0x28, 0x28, 0x28, 0x26, 0x25, 0x26, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x22, 
   0x23, 0x22, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 
   0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 
   0x21, 0x21, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x20, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x20, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 0x1E, 0x1D, 
   0x1E, 0x1D, 0x1C, 0x1D, 0x1E, 0x1D, 0x1E, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x1E, 0x1E, 0x1E, 0x1D, 0x1C, 0x1D, 0x1B, 0x1B, 0x1B, 0x1A, 0x1C, 0x1A, 0x19, 0x1A, 0x19, 0x19, 
   0x1A, 0x19, 0x19, 0x1A, 0x19, 0x1B, 0x1B, 0x1B, 0x1E, 0x1D, 0x1E, 0x1F, 0x1F, 0x1F, 0x21, 0x22, 
   0x21, 0x23, 0x24, 0x23, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x27, 0x25, 0x27, 0x28, 0x27, 0x28, 
   0x29, 0x29, 0x29, 0x2A, 0x2B, 0x2A, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x30, 
   0x2F, 0x30, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x33, 0x32, 0x32, 0x34, 0x32, 0x31, 0x33, 
   0x31, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 
   0x33, 0x33, 0x33, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x2F, 
   0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x28, 
   0x2A, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 0x27, 0x26, 0x27, 0x26, 0x25, 0x26, 0x24, 0x24, 0x24, 
   0x24, 0x24, 0x24, 0x24, 0x22, 0x24, 0x21, 0x22, 0x21, 0x23, 0x21, 0x23, 0x21, 0x21, 0x21, 0x20, 
   0x21, 0x20, 0x20, 0x1F, 0x20, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 
   0x1E, 0x1E, 0x1F, 0x1E, 0x21, 0x20, 0x21, 0x24, 0x23, 0x24, 0x25, 0x25, 0x25, 0x24, 0x24, 0x24, 
   0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1D, 0x1E, 0x1C, 0x1C, 0x1C, 0x1A, 0x1A, 0x1A, 0x18, 0x18, 
   0x18, 0x17, 0x18, 0x17, 0x16, 0x17, 0x16, 0x17, 0x17, 0x17, 0x18, 0x17, 0x18, 0x16, 0x17, 0x16, 
   0x14, 0x15, 0x14, 0x14, 0x14, 0x14, 0x1D, 0x1C, 0x1D, 0x1E, 0x1C, 0x1E, 0x1E, 0x1D, 0x1E, 0x1F, 
   0x1F, 0x1F, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 
   0x20, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 0x20, 0x1F, 0x20, 0x21, 0x20, 0x21, 
   0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x22, 0x21, 0x21, 0x22, 0x21, 0x23, 0x22, 0x23, 0x24, 
   0x24, 0x24, 0x24, 0x24, 0x24, 0x26, 0x25, 0x26, 0x27, 0x26, 0x27, 0x26, 0x27, 0x26, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x2A, 0x28, 0x2A, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 
   0x2F, 0x2E, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2F, 0x2D, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x30, 0x2F, 0x32, 0x31, 0x32, 0x34, 0x33, 0x34, 0x35, 0x36, 0x35, 
   0x3C, 0x3B, 0x3C, 0x21, 0x21, 0x21, 0x15, 0x16, 0x15, 0x3F, 0x3F, 0x3F, 0x3D, 0x3E, 0x3D, 0x46, 
   0x46, 0x46, 0x6B, 0x6A, 0x6B, 0x5E, 0x5E, 0x5E, 0x40, 0x42, 0x40, 0x2C, 0x2D, 0x2C, 0x30, 0x31, 
   0x30, 0x46, 0x48, 0x46, 0x47, 0x47, 0x47, 0x32, 0x31, 0x32, 0x13, 0x15, 0x13, 0x19, 0x19, 0x19, 
   0x1F, 0x1F, 0x1F, 0x1D, 0x1B, 0x1D, 0x1A, 0x18, 0x1A, 0x19, 0x18, 0x19, 0x18, 0x19, 0x18, 0x1D, 
   0x1D, 0x1D, 0x1F, 0x1F, 0x1F, 0x1D, 0x1B, 0x1D, 0x1A, 0x19, 0x1A, 0x1B, 0x1A, 0x1B, 0x1A, 0x19, 
   0x1A, 0x23, 0x22, 0x23, 0x1B, 0x1C, 0x1B, 0x2F, 0x2F, 0x2F, 0x54, 0x54, 0x54, 0x86, 0x85, 0x86, 
   0xB6, 0xB7, 0xB6, 0xAE, 0xB0, 0xAE, 0xB1, 0xB1, 0xB1, 0x7C, 0x7C, 0x7C, 0x43, 0x43, 0x43, 0x39, 
   0x39, 0x39, 0x5B, 0x5B, 0x5B, 0x54, 0x55, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x55, 
   0x54, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x53, 0x53, 0x53, 0x50, 0x51, 0x50, 0x4F, 0x50, 0x4F, 
   0x4F, 0x50, 0x4F, 0x4F, 0x50, 0x4F, 0x4F, 0x4F, 0x4F, 0x4D, 0x4E, 0x4D, 0x4C, 0x4D, 0x4C, 0x4A, 
   0x4C, 0x4A, 0x48, 0x49, 0x48, 0x44, 0x46, 0x44, 0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x40, 0x40, 
   0x40, 0x3F, 0x3F, 0x3F, 0x3D, 0x3E, 0x3D, 0x3D, 0x3C, 0x3D, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 
   0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x34, 0x33, 0x34, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 
   0x29, 0x2B, 0x29, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x26, 0x25, 0x26, 0x24, 0x24, 0x24, 0x23, 
   0x23, 0x23, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x20, 0x21, 0x21, 0x20, 0x21, 0x20, 0x1F, 0x20, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1D, 0x1D, 
   0x1D, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x1E, 0x1F, 0x1E, 0x1D, 0x1D, 0x1D, 0x1B, 0x1B, 0x1B, 0x1A, 0x1B, 0x1A, 0x19, 0x1A, 0x19, 0x19, 
   0x1A, 0x19, 0x1A, 0x1A, 0x1A, 0x1B, 0x1B, 0x1B, 0x1E, 0x1D, 0x1E, 0x1F, 0x1F, 0x1F, 0x21, 0x21, 
   0x21, 0x23, 0x23, 0x23, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 0x27, 0x27, 0x27, 
   0x29, 0x29, 0x29, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2E, 0x2E, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 
   0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x2F, 
   0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2B, 0x2C, 0x2B, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x28, 0x28, 
   0x28, 0x27, 0x28, 0x27, 0x27, 0x26, 0x27, 0x27, 0x25, 0x27, 0x24, 0x25, 0x24, 0x24, 0x23, 0x24, 
   0x24, 0x23, 0x24, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x1F, 0x21, 0x1E, 0x1F, 0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x1E, 0x1F, 0x1E, 0x1F, 0x20, 0x20, 0x20, 0x23, 0x23, 0x23, 0x25, 0x24, 0x25, 0x24, 0x23, 0x24, 
   0x24, 0x23, 0x24, 0x22, 0x23, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 
   0x1F, 0x21, 0x1F, 0x1F, 0x1F, 0x1E, 0x1D, 0x1E, 0x1C, 0x1C, 0x1C, 0x1A, 0x1A, 0x1A, 0x18, 0x19, 
   0x18, 0x17, 0x18, 0x17, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x18, 0x17, 0x18, 0x17, 0x17, 0x17, 
   0x14, 0x15, 0x14, 0x14, 0x14, 0x14, 0x1D, 0x1D, 0x1D, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 
   0x20, 0x1F, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 
   0x21, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 
   0x1F, 0x20, 0x1F, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x24, 
   0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x25, 0x24, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x26, 0x26, 
   0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x27, 0x2B, 0x2A, 0x2B, 0x2D, 0x2B, 0x2D, 
   0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 
   0x31, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x34, 0x32, 0x34, 0x35, 0x34, 0x35, 0x38, 0x37, 0x38, 
   0x3F, 0x3D, 0x3F, 0x21, 0x22, 0x21, 0x03, 0x03, 0x03, 0x2E, 0x2C, 0x2E, 0x40, 0x40, 0x40, 0x44, 
   0x45, 0x44, 0x53, 0x52, 0x53, 0x3F, 0x3F, 0x3F, 0x35, 0x37, 0x35, 0x10, 0x10, 0x10, 0x00, 0x00, 
   0x00, 0x22, 0x22, 0x22, 0x4A, 0x4A, 0x4A, 0x29, 0x28, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x12, 0x12, 0x45, 0x46, 0x45, 
   0x63, 0x64, 0x63, 0x6B, 0x6B, 0x6B, 0x6D, 0x6D, 0x6D, 0x71, 0x71, 0x71, 0x55, 0x55, 0x55, 0x33, 
   0x33, 0x33, 0x5D, 0x5D, 0x5D, 0x57, 0x58, 0x57, 0x53, 0x54, 0x53, 0x53, 0x55, 0x53, 0x56, 0x55, 
   0x56, 0x56, 0x55, 0x56, 0x54, 0x55, 0x54, 0x53, 0x53, 0x53, 0x52, 0x51, 0x52, 0x4E, 0x50, 0x4E, 
   0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4C, 0x4D, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 
   0x4A, 0x4B, 0x48, 0x48, 0x48, 0x45, 0x45, 0x45, 0x43, 0x43, 0x43, 0x41, 0x41, 0x41, 0x41, 0x40, 
   0x41, 0x41, 0x40, 0x41, 0x3E, 0x3F, 0x3E, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x39, 0x3A, 0x39, 
   0x3A, 0x3A, 0x3A, 0x38, 0x3A, 0x38, 0x38, 0x38, 0x38, 0x38, 0x36, 0x38, 0x36, 0x35, 0x36, 0x33, 
   0x35, 0x33, 0x33, 0x34, 0x33, 0x33, 0x34, 0x33, 0x32, 0x33, 0x32, 0x31, 0x32, 0x31, 0x30, 0x30, 
   0x30, 0x30, 0x2F, 0x30, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2B, 0x2B, 0x2B, 0x28, 0x29, 0x28, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x25, 0x24, 0x25, 0x23, 
   0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x22, 0x22, 0x23, 0x22, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x20, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x20, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1D, 
   0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x20, 0x1E, 0x20, 0x20, 0x1F, 0x20, 0x1F, 0x1E, 0x1F, 
   0x1E, 0x1F, 0x1E, 0x1C, 0x1D, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1A, 0x1B, 0x1A, 0x1A, 
   0x1B, 0x1A, 0x1A, 0x1B, 0x1A, 0x1C, 0x1B, 0x1C, 0x1F, 0x1D, 0x1F, 0x20, 0x20, 0x20, 0x22, 0x23, 
   0x22, 0x24, 0x25, 0x24, 0x28, 0x26, 0x28, 0x29, 0x27, 0x29, 0x2A, 0x28, 0x2A, 0x2B, 0x29, 0x2B, 
   0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2A, 0x2A, 0x2A, 0x2C, 0x2C, 0x2C, 0x2D, 0x2E, 0x2D, 0x30, 
   0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x2E, 
   0x2E, 0x2E, 0x2C, 0x2E, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2A, 0x2A, 0x28, 0x29, 0x28, 0x28, 0x28, 
   0x28, 0x28, 0x27, 0x28, 0x27, 0x26, 0x27, 0x25, 0x25, 0x25, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 
   0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x1F, 
   0x1E, 0x1F, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 
   0x1E, 0x1E, 0x1F, 0x1E, 0x21, 0x20, 0x21, 0x24, 0x23, 0x24, 0x24, 0x22, 0x24, 0x24, 0x23, 0x24, 
   0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x20, 0x21, 0x20, 0x20, 0x20, 0x20, 0x1F, 
   0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1B, 0x1C, 0x1B, 0x1A, 0x1B, 0x1A, 0x18, 0x1A, 
   0x18, 0x17, 0x17, 0x17, 0x18, 0x17, 0x18, 0x16, 0x18, 0x16, 0x17, 0x18, 0x17, 0x16, 0x17, 0x16, 
   0x15, 0x16, 0x15, 0x13, 0x14, 0x13, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1D, 0x1F, 0x1F, 0x1F, 0x21, 
   0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x20, 0x20, 0x20, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x20, 0x20, 0x20, 0x21, 0x20, 0x21, 
   0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x24, 0x23, 0x24, 0x24, 
   0x24, 0x24, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 
   0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2C, 0x2B, 0x2C, 
   0x2C, 0x2D, 0x2C, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 
   0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 
   0x2E, 0x30, 0x2F, 0x30, 0x32, 0x31, 0x32, 0x34, 0x33, 0x34, 0x35, 0x35, 0x35, 0x38, 0x38, 0x38, 
   0x3D, 0x3E, 0x3D, 0x2A, 0x29, 0x2A, 0x00, 0x00, 0x00, 0x10, 0x11, 0x10, 0x38, 0x39, 0x38, 0x3D, 
   0x3C, 0x3D, 0x3B, 0x3B, 0x3B, 0x33, 0x33, 0x33, 0x28, 0x28, 0x28, 0x23, 0x24, 0x23, 0x00, 0x00, 
   0x00, 0x0B, 0x0B, 0x0B, 0x47, 0x46, 0x47, 0x2B, 0x2B, 0x2B, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03, 
   0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 
   0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 
   0x03, 0x01, 0x02, 0x01, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x0D, 0x0C, 0x0D, 0x1B, 0x1C, 0x1B, 0x20, 0x1F, 0x20, 0x1E, 0x1E, 0x1E, 0x40, 0x40, 0x40, 0x4D, 
   0x4D, 0x4D, 0x46, 0x46, 0x46, 0x5A, 0x5B, 0x5A, 0x64, 0x63, 0x64, 0x59, 0x5A, 0x59, 0x56, 0x56, 
   0x56, 0x56, 0x56, 0x56, 0x55, 0x55, 0x55, 0x52, 0x53, 0x52, 0x50, 0x50, 0x50, 0x4F, 0x50, 0x4F, 
   0x4E, 0x4F, 0x4E, 0x4E, 0x4D, 0x4E, 0x4C, 0x4D, 0x4C, 0x4A, 0x4C, 0x4A, 0x4C, 0x4C, 0x4C, 0x4A, 
   0x4A, 0x4A, 0x48, 0x48, 0x48, 0x44, 0x46, 0x44, 0x42, 0x43, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 
   0x41, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3C, 0x3D, 0x3C, 
   0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 0x3A, 0x3B, 0x39, 0x38, 0x39, 0x37, 0x36, 0x37, 0x36, 
   0x36, 0x36, 0x36, 0x35, 0x36, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x32, 0x32, 0x32, 0x30, 0x31, 
   0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2C, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2D, 0x2A, 0x2A, 0x2A, 0x28, 0x29, 0x28, 0x27, 0x27, 0x27, 0x25, 0x26, 0x25, 0x25, 
   0x24, 0x25, 0x23, 0x24, 0x23, 0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x23, 0x22, 
   0x23, 0x21, 0x22, 0x21, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 
   0x21, 0x20, 0x21, 0x22, 0x20, 0x22, 0x21, 0x20, 0x21, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1E, 
   0x1F, 0x1E, 0x1E, 0x1F, 0x1E, 0x1E, 0x1F, 0x1E, 0x20, 0x1F, 0x20, 0x1F, 0x1E, 0x1F, 0x1E, 0x1E, 
   0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1F, 0x1F, 0x1F, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1C, 0x1D, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1A, 
   0x1B, 0x1A, 0x1B, 0x1B, 0x1B, 0x1C, 0x1C, 0x1C, 0x1E, 0x1E, 0x1E, 0x24, 0x25, 0x24, 0x31, 0x31, 
   0x31, 0x37, 0x35, 0x37, 0x3A, 0x38, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x3D, 0x3C, 0x3D, 
   0x3B, 0x3B, 0x3B, 0x2C, 0x2D, 0x2C, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 
   0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 
   0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2E, 0x2E, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 
   0x29, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x23, 0x25, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 
   0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1E, 
   0x1E, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1C, 0x1D, 0x1C, 0x1D, 0x1D, 0x1D, 0x1D, 0x1E, 
   0x1D, 0x20, 0x1F, 0x20, 0x21, 0x21, 0x21, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x23, 0x22, 0x23, 
   0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1E, 
   0x1E, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1C, 0x1D, 0x1B, 0x1B, 0x1B, 0x1A, 0x1A, 
   0x1A, 0x18, 0x18, 0x18, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 
   0x14, 0x16, 0x14, 0x15, 0x15, 0x15, 0x1F, 0x1E, 0x1F, 0x20, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x20, 
   0x21, 0x1F, 0x1F, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x1F, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x20, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 
   0x24, 0x24, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x24, 0x25, 0x24, 0x26, 0x25, 0x26, 0x26, 0x26, 
   0x26, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2B, 0x2A, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x3