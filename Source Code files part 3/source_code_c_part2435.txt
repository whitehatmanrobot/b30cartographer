, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x00, 0x33, 0x33, 0x00, 0x45, 0x45, 0x00, 0x59, 
   0x59, 0x00, 0x6B, 0x6B, 0x00, 0x7F, 0x7F, 0x00, 0x8F, 0x8F, 0x00, 0xA0, 0xA0, 0x00, 0xAF, 0xAF, 
   0x00, 0xBD, 0xBD, 0x00, 0xC9, 0xC9, 0x00, 0xD2, 0xD2, 0x00, 0xDA, 0xDA, 0x00, 0xDF, 0xDF, 0x00, 
   0xE3, 0xE3, 0x00, 0xE6, 0xE6, 0x00, 0xE8, 0xE8, 0x00, 0xE7, 0xE7, 0x00, 0xE5, 0xE5, 0x00, 0xE2, 
   0xE2, 0x00, 0xDD, 0xDD, 0x00, 0xD6, 0xD6, 0x00, 0xCC, 0xCC, 0x00, 0xC2, 0xC2, 0x00, 0xB5, 0xB5, 
   0x00, 0xA7, 0xA7, 0x00, 0x97, 0x97, 0x00, 0x86, 0x86, 0x00, 0x75, 0x75, 0x00, 0x61, 0x61, 0x00, 
   0x4D, 0x4D, 0x00, 0x3A, 0x3A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x19, 0x00, 0x2B, 0x2B, 0x00, 0x3C, 0x3C, 0x00, 0x4E, 
   0x4E, 0x00, 0x61, 0x61, 0x00, 0x73, 0x73, 0x00, 0x84, 0x84, 0x00, 0x95, 0x95, 0x00, 0xA4, 0xA4, 
   0x00, 0xB2, 0xB2, 0x00, 0xBD, 0xBD, 0x00, 0xC8, 0xC8, 0x00, 0xCF, 0xCF, 0x00, 0xD5, 0xD5, 0x00, 
   0xDA, 0xDA, 0x00, 0xDB, 0xDB, 0x00, 0xDE, 0xDE, 0x00, 0xDD, 0xDD, 0x00, 0xDA, 0xDA, 0x00, 0xD7, 
   0xD7, 0x00, 0xD2, 0xD2, 0x00, 0xCA, 0xCA, 0x00, 0xC2, 0xC2, 0x00, 0xB7, 0xB7, 0x00, 0xAB, 0xAB, 
   0x00, 0x9C, 0x9C, 0x00, 0x8D, 0x8D, 0x00, 0x7A, 0x7A, 0x00, 0x6A, 0x6A, 0x00, 0x58, 0x58, 0x00, 
   0x44, 0x44, 0x00, 0x32, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x23, 0x23, 0x00, 0x33, 0x33, 0x00, 0x44, 
   0x44, 0x00, 0x57, 0x57, 0x00, 0x68, 0x68, 0x00, 0x77, 0x77, 0x00, 0x88, 0x88, 0x00, 0x97, 0x97, 
   0x00, 0xA5, 0xA5, 0x00, 0xB1, 0xB1, 0x00, 0xBB, 0xBB, 0x00, 0xC2, 0xC2, 0x00, 0xC8, 0xC8, 0x00, 
   0xCD, 0xCD, 0x00, 0xD0, 0xD0, 0x00, 0xD1, 0xD1, 0x00, 0xD1, 0xD1, 0x00, 0xCF, 0xCF, 0x00, 0xCB, 
   0xCB, 0x00, 0xC5, 0xC5, 0x00, 0xBE, 0xBE, 0x00, 0xB5, 0xB5, 0x00, 0xAA, 0xAA, 0x00, 0x9E, 0x9E, 
   0x00, 0x8F, 0x8F, 0x00, 0x7F, 0x7F, 0x00, 0x6E, 0x6E, 0x00, 0x5D, 0x5D, 0x00, 0x4C, 0x4C, 0x00, 
   0x3A, 0x3A, 0x00, 0x28, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x00, 0x18, 0x18, 0x00, 0x2A, 0x2A, 0x00, 0x3A, 
   0x3A, 0x00, 0x4B, 0x4B, 0x00, 0x5B, 0x5B, 0x00, 0x6A, 0x6A, 0x00, 0x7A, 0x7A, 0x00, 0x88, 0x88, 
   0x00, 0x96, 0x96, 0x00, 0xA2, 0xA2, 0x00, 0xAC, 0xAC, 0x00, 0xB4, 0xB4, 0x00, 0xB9, 0xB9, 0x00, 
   0xBF, 0xBF, 0x00, 0xC2, 0xC2, 0x00, 0xC3, 0xC3, 0x00, 0xC2, 0xC2, 0x00, 0xC1, 0xC1, 0x00, 0xBC, 
   0xBC, 0x00, 0xB7, 0xB7, 0x00, 0xB0, 0xB0, 0x00, 0xA6, 0xA6, 0x00, 0x9B, 0x9B, 0x00, 0x8E, 0x8E, 
   0x00, 0x81, 0x81, 0x00, 0x71, 0x71, 0x00, 0x61, 0x61, 0x00, 0x51, 0x51, 0x00, 0x41, 0x41, 0x00, 
   0x2F, 0x2F, 0x00, 0x1E, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x0E, 0x00, 0x1E, 0x1E, 0x00, 0x2E, 
   0x2E, 0x00, 0x3D, 0x3D, 0x00, 0x4D, 0x4D, 0x00, 0x5B, 0x5B, 0x00, 0x6A, 0x6A, 0x00, 0x78, 0x78, 
   0x00, 0x85, 0x85, 0x00, 0x90, 0x90, 0x00, 0x9B, 0x9B, 0x00, 0xA3, 0xA3, 0x00, 0xA8, 0xA8, 0x00, 
   0xAE, 0xAE, 0x00, 0xB2, 0xB2, 0x00, 0xB2, 0xB2, 0x00, 0xB2, 0xB2, 0x00, 0xAF, 0xAF, 0x00, 0xAB, 
   0xAB, 0x00, 0xA6, 0xA6, 0x00, 0x9E, 0x9E, 0x00, 0x96, 0x96, 0x00, 0x8C, 0x8C, 0x00, 0x7E, 0x7E, 
   0x00, 0x71, 0x71, 0x00, 0x62, 0x62, 0x00, 0x52, 0x52, 0x00, 0x44, 0x44, 0x00, 0x34, 0x34, 0x00, 
   0x24, 0x24, 0x00, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x14, 0x14, 0x00, 0x23, 
   0x23, 0x00, 0x32, 0x32, 0x00, 0x41, 0x41, 0x00, 0x4D, 0x4D, 0x00, 0x5C, 0x5C, 0x00, 0x69, 0x69, 
   0x00, 0x76, 0x76, 0x00, 0x80, 0x80, 0x00, 0x89, 0x89, 0x00, 0x91, 0x91, 0x00, 0x97, 0x97, 0x00, 
   0x9D, 0x9D, 0x00, 0xA1, 0xA1, 0x00, 0xA1, 0xA1, 0x00, 0xA2, 0xA2, 0x00, 0x9F, 0x9F, 0x00, 0x9C, 
   0x9C, 0x00, 0x96, 0x96, 0x00, 0x8E, 0x8E, 0x00, 0x85, 0x85, 0x00, 0x7A, 0x7A, 0x00, 0x6F, 0x6F, 
   0x00, 0x62, 0x62, 0x00, 0x53, 0x53, 0x00, 0x45, 0x45, 0x00, 0x37, 0x37, 0x00, 0x28, 0x28, 0x00, 
   0x18, 0x18, 0x00, 0x05, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x00, 0x15, 
   0x15, 0x00, 0x24, 0x24, 0x00, 0x32, 0x32, 0x00, 0x3D, 0x3D, 0x00, 0x4B, 0x4B, 0x00, 0x58, 0x58, 
   0x00, 0x63, 0x63, 0x00, 0x6E, 0x6E, 0x00, 0x77, 0x77, 0x00, 0x7F, 0x7F, 0x00, 0x83, 0x83, 0x00, 
   0x89, 0x89, 0x00, 0x8D, 0x8D, 0x00, 0x8E, 0x8E, 0x00, 0x8D, 0x8D, 0x00, 0x8C, 0x8C, 0x00, 0x87, 
   0x87, 0x00, 0x81, 0x81, 0x00, 0x7B, 0x7B, 0x00, 0x72, 0x72, 0x00, 0x68, 0x68, 0x00, 0x5D, 0x5D, 
   0x00, 0x51, 0x51, 0x00, 0x43, 0x43, 0x00, 0x35, 0x35, 0x00, 0x2A, 0x2A, 0x00, 0x1B, 0x1B, 0x00, 
   0x09, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 
   0x07, 0x00, 0x16, 0x16, 0x00, 0x23, 0x23, 0x00, 0x2F, 0x2F, 0x00, 0x3B, 0x3B, 0x00, 0x45, 0x45, 
   0x00, 0x51, 0x51, 0x00, 0x5B, 0x5B, 0x00, 0x63, 0x63, 0x00, 0x6B, 0x6B, 0x00, 0x6F, 0x6F, 0x00, 
   0x75, 0x75, 0x00, 0x78, 0x78, 0x00, 0x78, 0x78, 0x00, 0x78, 0x78, 0x00, 0x76, 0x76, 0x00, 0x72, 
   0x72, 0x00, 0x6E, 0x6E, 0x00, 0x66, 0x66, 0x00, 0x5F, 0x5F, 0x00, 0x55, 0x55, 0x00, 0x4B, 0x4B, 
   0x00, 0x3F, 0x3F, 0x00, 0x33, 0x33, 0x00, 0x27, 0x27, 0x00, 0x1B, 0x1B, 0x00, 0x0B, 0x0B, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x06, 0x06, 0x00, 0x14, 0x14, 0x00, 0x1F, 0x1F, 0x00, 0x2A, 0x2A, 0x00, 0x34, 0x34, 
   0x00, 0x3E, 0x3E, 0x00, 0x48, 0x48, 0x00, 0x50, 0x50, 0x00, 0x56, 0x56, 0x00, 0x5A, 0x5A, 0x00, 
   0x5F, 0x5F, 0x00, 0x62, 0x62, 0x00, 0x63, 0x63, 0x00, 0x62, 0x62, 0x00, 0x61, 0x61, 0x00, 0x5E, 
   0x5E, 0x00, 0x59, 0x59, 0x00, 0x52, 0x52, 0x00, 0x4B, 0x4B, 0x00, 0x43, 0x43, 0x00, 0x39, 0x39, 
   0x00, 0x2E, 0x2E, 0x00, 0x23, 0x23, 0x00, 0x17, 0x17, 0x00, 0x09, 0x09, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x0E, 0x0E, 0x00, 0x1B, 0x1B, 0x00, 0x24, 0x24, 
   0x00, 0x2D, 0x2D, 0x00, 0x34, 0x34, 0x00, 0x3C, 0x3C, 0x00, 0x42, 0x42, 0x00, 0x45, 0x45, 0x00, 
   0x49, 0x49, 0x00, 0x4C, 0x4C, 0x00, 0x4D, 0x4D, 0x00, 0x4C, 0x4C, 0x00, 0x4B, 0x4B, 0x00, 0x49, 
   0x49, 0x00, 0x44, 0x44, 0x00, 0x3D, 0x3D, 0x00, 0x37, 0x37, 0x00, 0x2F, 0x2F, 0x00, 0x26, 0x26, 
   0x00, 0x1D, 0x1D, 0x00, 0x11, 0x11, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x11, 
   0x11, 0x00, 0x1A, 0x1A, 0x00, 0x23, 0x23, 0x00, 0x28, 0x28, 0x00, 0x2E, 0x2E, 0x00, 0x32, 0x32, 
   0x00, 0x34, 0x34, 0x00, 0x39, 0x39, 0x00, 0x39, 0x39, 0x00, 0x39, 0x39, 0x00, 0x38, 0x38, 0x00, 
   0x34, 0x34, 0x00, 0x2F, 0x2F, 0x00, 0x2B, 0x2B, 0x00, 0x24, 0x24, 0x00, 0x1D, 0x1D, 0x00, 0x15, 
   0x15, 0x00, 0x09, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x07, 0x11, 0x00, 
   0x11, 0x1A, 0x00, 0x1A, 0x23, 0x00, 0x23, 0x28, 0x00, 0x28, 0x2E, 0x00, 0x2E, 0x32, 0x00, 0x32, 
   0x34, 0x00, 0x34, 0x39, 0x00, 0x39, 0x39, 0x00, 0x39, 0x39, 0x00, 0x39, 0x38, 0x00, 0x38, 0x34, 
   0x00, 0x34, 0x2F, 0x00, 0x2F, 0x2B, 0x00, 0x2B, 0x24, 0x00, 0x24, 0x1D, 0x00, 0x1D, 0x15, 0x00, 
   0x15, 0x09, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x11, 0x11, 
   0x11, 0x1A, 0x1A, 0x1A, 0x23, 0x23, 0x23, 0x28, 0x28, 0x28, 0x2E, 0x2E, 0x2E, 0x32, 0x32, 0x32, 
   0x34, 0x34, 0x34, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x34, 
   0x34, 0x34, 0x2F, 0x2F, 0x2F, 0x2B, 0x2B, 0x2B, 0x24, 0x24, 0x24, 0x1D, 0x1D, 0x1D, 0x15, 0x15, 
   0x15, 0x09, 0x09, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x11, 0x11, 
   0x00, 0x1A, 0x1A, 0x00, 0x23, 0x23, 0x00, 0x28, 0x28, 0x00, 0x2E, 0x2E, 0x00, 0x32, 0x32, 0x00, 
   0x34, 0x34, 0x00, 0x39, 0x39, 0x00, 0x39, 0x39, 0x00, 0x39, 0x39, 0x00, 0x38, 0x38, 0x00, 0x34, 
   0x34, 0x00, 0x2F, 0x2F, 0x00, 0x2B, 0x2B, 0x00, 0x24, 0x24, 0x00, 0x1D, 0x1D, 0x00, 0x15, 0x15, 
   0x00, 0x09, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

static RESOURCEDATA g_rd_tex6(TEXT(MODULE_STRING), TEXT("tex6.bmp"), g_tex6, sizeof(g_tex6));

extern "C" LPVOID PREPEND_MODULE(_tex6) = (LPVOID)&g_rd_tex6;
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\VBIB\CVertexIndexBufferTest.cpp ===
//
//  CVertexIndexBufferTest.cpp
//
//  Class implementation for CDevice8Test.
//
//  ---------------------------------------------------------------------------
//
//  Copyright (C) 2000 Microsoft Corporation.
//

#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "cshapes.h"
#include "CVertexIndexBufferTest.h"

//
// Declare the framework
//
                   
//CD3DWindowFramework	App;

//
// Define the groups here
//

//******************************************************************************
//
// Function:
//
//     ValidateDisplay
//
// Description:
//
//     Evaluate the given display information in order to determine whether or
//     not the display is capable of rendering the scene.  If not, the given 
//     display will not be included in the display list.
//
// Arguments:
//
//     CDirect3D8* pd3d                 - Pointer to the Direct3D object
//
//     D3DCAPS8* pd3dcaps               - Capabilities of the device
//
//     D3DDISPLAYMODE*                  - Display mode into which the device
//                                        will be placed
//
// Return Value:
//
//     TRUE if the scene can be rendered using the given display, FALSE if
//     it cannot.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ValidateDisplay)(CDirect3D8* pd3d, D3DCAPS8* pd3dcaps, D3DDISPLAYMODE* pd3ddm) {

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ExhibitScene
//
// Description:
//
//     Create the scene, pump messages, process user input,
//     update the scene, render the scene, and release the scene when finished.
//
// Arguments:
//
//     CDisplay* pDisplay           - Pointer to the Display object
//
//     int* pnExitCode              - Optional pointer to an integer that will
//                                    be set to the exit value contained in the 
//                                    wParam parameter of the WM_QUIT message 
//                                    (if received)
//
// Return Value:
//
//     TRUE if the display remains functional on exit, FALSE otherwise.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ExhibitScene)(CDisplay* pDisplay, int* pnExitCode) {

    CVertexIndexBufferTest* pVBIB;
    BOOL                    bQuit = FALSE, bRet = TRUE;
    UINT                    i;

    // Verify that the display has been initialized
    if (!pDisplay) {
        return FALSE;
    }

#ifdef UNDER_XBOX
    if (!(GetStartupContext() & TSTART_STRESS)) {
        pDisplay->ReleaseDevice();
        pDisplay->GetDirect3D8()->SetPushBufferSize(786432, 32768);
        pDisplay->CreateDevice();
    }
#endif

    for (i = 0; i < 4 && !bQuit && bRet; i++) {

        // Create the scene
        switch (i) {
            case 0:
                pVBIB = new NormalBuffer();
                break;
            case 1:
                pVBIB = new LockActive();
                break;
            case 2:
                pVBIB = new MultipleLocks();
                break;
            case 3:
                pVBIB = new HugeBuffer();
                break;
        }

        if (!pVBIB) {
            return FALSE;
        }

        // Initialize the scene
        if (!pVBIB->Create(pDisplay)) {
            pVBIB->Release();
            return FALSE;
        }

        bRet = pVBIB->Exhibit(pnExitCode);

        bQuit = pVBIB->AbortedExit();

        // Clean up the scene
        pVBIB->Release();
    }

#ifdef UNDER_XBOX
    if (!(GetStartupContext() & TSTART_STRESS)) {
        pDisplay->ReleaseDevice();
        pDisplay->GetDirect3D8()->SetPushBufferSize(524288, 32768);
        pDisplay->CreateDevice();
    }
#endif

    return bRet;
}

//
// CDevice8Test Member functions
//

CVertexIndexBufferTest::CVertexIndexBufferTest()
{
    m_ModeOptions.fReference = true;
    m_ModeOptions.fRefEqualsSrc = false;
    m_ModeOptions.fTextures = false;
    m_ModeOptions.fZBuffer = false;
	m_ModeOptions.bSWDevices = true;
	m_ModeOptions.bHWDevices = true;
//    m_ModeOptions.dwDeviceTypes = DEVICETYPE_ALL;
    m_ModeOptions.uMinDXVersion = 0x800;

    m_pD3D =  NULL;
//    m_pDevice = NULL;
//    m_pRefDevice = NULL;

    m_bExit = FALSE;
}


UINT
CVertexIndexBufferTest::TestInitialize()
{
//    if( m_pD3D8 && m_pSrcDevice8 && m_pRefDevice8 )
//    {
        m_pD3D =  m_pDisplay->GetDirect3D8();
//        m_pDevice = m_pSrcDevice8;
//        m_pRefDevice = m_pRefDevice8;
//    }
//    else
//        return D3DTESTINIT_ABORT;

    // Set the test range to 1 - one pass through
    SetTestRange(1,1);

    return D3DTESTINIT_RUN;    
}


UINT
CVertexIndexBufferTest::GetAvailMemory
(
    D3DPOOL Pool
)
{
    UINT iRet = 0;

    // since there is no real way to get vertex and index buffer memory, assume it's in sysmem

    MEMORYSTATUS memstat;

    // check if really out of memory
    GlobalMemoryStatus( &memstat );

    iRet = memstat.dwAvailVirtual;

    return( iRet );
}

//******************************************************************************
BOOL CVertexIndexBufferTest::AbortedExit(void) {

    return m_bExit;
}

//******************************************************************************
void CVertexIndexBufferTest::ProcessInput() {

    CD3DTest::ProcessInput();

    if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_BACK)) {
        m_bExit = TRUE;
    }
}

//******************************************************************************
BOOL CVertexIndexBufferTest::WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    *plr = 0;

#ifndef UNDER_XBOX

    switch (uMsg) {

        case WM_KEYDOWN:

            switch (wParam) {

                case VK_ESCAPE: // Exit
                    m_bExit = TRUE;
            }

            break;
    }

#endif // !UNDER_XBOX

    return CD3DTest::WndProc(plr, hWnd, uMsg, wParam, lParam);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\VBIB\CVertexIndexBufferTest.h ===
//
//  CVertexIndexBufferTest.h
//
//  Class specification for CVertexIndexBufferTest.
//
//  ---------------------------------------------------------------------------
//
//  Copyright (C) 2000 Microsoft Corporation.
//

#ifndef __CVertexIndexBufferTest_H__
#define __CVertexIndexBufferTest_H__


#define TESTDXVER 0x0800

//#define STRICT


//USETESTFRAME

//
// fun macros
//


#define COUNTOF(a) (sizeof(a)/sizeof((a)[0]))
#define DecodeHResult(hr) (TEXT(""))//(GetHResultString(hr).c_str())

//#define GROUP_CREATE(GroupName)  \
//GroupName Class##GroupName

#ifdef UNDER_XBOX
#define D3DUSAGE_DONOTCLIP 0
#define D3DUSAGE_NPATCHES 0
#define D3DUSAGE_SOFTWAREPROCESSING 0
#endif

//
// test info structures
//
typedef struct __D3DTEST_NORMALBUFFER
{
    LPTSTR szName;

    CShapes *shape;

    DWORD VBFVF;
    D3DFORMAT IBFormat;

    DWORD Usage;
    D3DPOOL Pool;

} D3DTEST_NORMALBUFFER, *LPD3DTEST_NORMALBUFFER;

typedef struct __D3DTEST_OPTIMIZEDBUFFER
{
    LPTSTR szName;

    CShapes *shape;
    UINT iReps;

    DWORD VBFVF;
    D3DFORMAT IBFormat;

    DWORD SrcUsage;
    D3DPOOL SrcPool;

    DWORD RefUsage;
    D3DPOOL RefPool;

} D3DTEST_OPTIMIZEDBUFFER, *LPD3DTEST_OPTIMIZEDBUFFER;

typedef struct __D3DTEST_LOCKACTIVE
{
    LPCTSTR szName;
    BOOL fCreate;
    BOOL fAppendVB;
    BOOL fAppendIB;
    BOOL fDraw1;
    BOOL fDraw2;

} D3DTEST_LOCKACTIVE, *LPD3DTEST_LOCKACTIVE;

typedef struct __D3DTEST_HUGEBUFFER
{
    LPTSTR szName;

    CShapes *shape;
    UINT iReps;

    DWORD VBFVF;
    D3DFORMAT IBFormat;

    DWORD Usage;
    D3DPOOL Pool;

} D3DTEST_HUGEBUFFER, *LPD3DTEST_HUGEBUFFER;


//
//  The CDevice8Test specification
//


class CVertexIndexBufferTest : public CD3DTest
{
public:
    CDirect3D8*       m_pD3D;
//	LPDIRECT3D8       m_pD3D;
//	LPDIRECT3DDEVICE8 m_pDevice;
//    LPDIRECT3DDEVICE8 m_pRefDevice;

    CShapes m_shape;

    BOOL                    m_bExit;

public:

    CVertexIndexBufferTest();

    virtual UINT TestInitialize();
    UINT GetAvailMemory( D3DPOOL Pool );

    virtual BOOL    AbortedExit(void);

protected:

    virtual void    ProcessInput();
    virtual BOOL    WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, 
                        WPARAM wParam, LPARAM lParam);
};



//
// Declare all groups here
//


class NormalBuffer : public CVertexIndexBufferTest
{

public:

    NormalBuffer();

    bool ExecuteTest(UINT nTest);
    UINT TestInitialize();

    UINT TestInitReal( CDevice8* pDevice );
    BOOL ExecuteReal( CDevice8* pDevice, const D3DTEST_NORMALBUFFER *lpCIB, BOOL fRef );
};

/*
class OptimizedBuffer : public CVertexIndexBufferTest
{
    LARGE_INTEGER m_liFreq;
    CShapes m_shape15bit;
    CShapes m_shape16bit;

public:

    OptimizedBuffer();

    bool ExecuteTest(UINT nTest);
    UINT TestInitialize();
    BOOL ShapeReplicate(UINT iTimes);

    UINT TestInitReal( CDevice8* pDevice );
    BOOL ExecuteReal( CDevice8* pDevice, const D3DTEST_NORMALBUFFER *lpCIB, UINT iReps, BOOL fMixedMode );
};
*/

class LockActive : public CVertexIndexBufferTest
{
    CVertexBuffer8* m_pSrcVB;
    CIndexBuffer8* m_pSrcIB;
    CVertexBuffer8* m_pRefVB;
    CIndexBuffer8* m_pRefIB;

    CShapes m_shape2;

public:

    LockActive();
    ~LockActive();

    bool ExecuteTest(UINT nTest);
    UINT TestInitialize();

    UINT TestInitReal( CDevice8* pDevice );
    BOOL ExecuteReal( CDevice8* pDevice, CVertexBuffer8 **ppVB, CIndexBuffer8 **ppIB, DWORD Usage, D3DPOOL Pool, DWORD LockFlags, const D3DTEST_LOCKACTIVE *Test, BOOL fMixedMode );
};

/*
class Priority : public CVertexIndexBufferTest
{

public:

    Priority();

    bool ExecuteTest(UINT nTest);
    UINT TestInitialize();

    UINT TestInitReal( CDevice8* pDevice );
    BOOL ExecuteReal( CDevice8* pDevice, const D3DTEST_NORMALBUFFER *lpCIB, DWORD dwThisPriority, BOOL fMixedMode );
};


class SwitchRenderState : public CVertexIndexBufferTest
{

public:

    SwitchRenderState();

    bool ExecuteTest(UINT nTest);
    UINT TestInitialize();

    UINT TestInitReal( CDevice8* pDevice );
    BOOL ExecuteReal( CDevice8* pDevice, const D3DTEST_NORMALBUFFER *curtest, BOOL fReference );
};
*/

class MultipleLocks : public CVertexIndexBufferTest
{

public:

    MultipleLocks();


    bool ExecuteTest(UINT nTest);
    UINT TestInitialize();

    UINT TestInitReal( CDevice8* pDevice );
    BOOL ExecuteReal( CDevice8* pDevice, DWORD Usage, D3DPOOL Pool, DWORD LockFlags, BOOL fMixedMode );
};

/*
class LostOnReset : public CVertexIndexBufferTest
{
    D3DPRESENT_PARAMETERS m_SrcParam;

public:

    LostOnReset();
    ~LostOnReset();

    bool ExecuteTest(UINT nTest);
    UINT TestInitialize();

    UINT TestInitReal( CDevice8* *ppDevice );
    BOOL ExecuteReal( CDevice8* pDevice, const D3DTEST_NORMALBUFFER *lpCIB, BOOL fMixedMode );
};
*/

class HugeBuffer : public CVertexIndexBufferTest
{
    CShapes m_shape15bit;
    CShapes m_shape16bit;
    SIZE_T m_MemSize;

public:

    HugeBuffer();

    bool ExecuteTest(UINT nTest);
    UINT TestInitialize();

    UINT TestInitReal( CDevice8* pDevice );
    BOOL ExecuteReal( CDevice8* pDevice, const D3DTEST_HUGEBUFFER *lpCIB, BOOL fMixedMode );
};

/*
class RelockDynamic : public CVertexIndexBufferTest
{
    CShapes m_shape2;

public:

    RelockDynamic();
    ~RelockDynamic();

    bool ExecuteTest(UINT nTest);
    UINT TestInitialize();

    UINT TestInitReal( CDevice8* pDevice );
    BOOL ExecuteReal( CDevice8* pDevice, DWORD Usage, D3DPOOL Pool, DWORD LockFlags1, DWORD LockFlags2, BOOL fMixedMode );
};


class DiscardDynamic : public CVertexIndexBufferTest
{
    CShapes m_shape2;

public:

    DiscardDynamic();
    ~DiscardDynamic();

    bool ExecuteTest(UINT nTest);
    UINT TestInitialize();

    UINT TestInitReal( CDevice8* pDevice );
    BOOL ExecuteReal( CDevice8* pDevice, DWORD Usage, D3DPOOL Pool, DWORD LockFlags1, DWORD LockFlags2, BOOL fMixedMode );
};
*/

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\VBIB\DiscardDynamic.cpp ===
//
//  DiscardDynamic.cpp
//

#include "CVertexIndexBufferTest.h"
#include <d3d8.h>
#include <d3dx8.h>



//-----------------------------------------------------------------------------
// Constructor / Destructor
//-----------------------------------------------------------------------------

DiscardDynamic::DiscardDynamic()
{
    m_szTestName = _T("Discard Dynamic");
    m_szCommandKey = _T("DiscardDynamic");
}

DiscardDynamic::~DiscardDynamic()
{
}

//-----------------------------------------------------------------------------
// Member Functions
//-----------------------------------------------------------------------------

UINT DiscardDynamic::TestInitialize()
{

    if( m_pD3D8 && m_pSrcDevice8 && m_pRefDevice8 )
    {
        m_pD3D =  m_pD3D8;
        m_pDevice = m_pSrcDevice8;
        m_pRefDevice = m_pRefDevice8;
    }
    else
	{
		WriteToLog(_T("TestInitialize() - Framework devices == NULL\n"));
        return D3DTESTINIT_ABORT;
	}


    // set the test range
    ExecuteTest( (UINT)(-1) );


    if (!m_shape.NewShape( CS_SPHERE, 10 )) {
        return D3DTESTINIT_ABORT;
    }
    if (!m_shape2.NewShape( CS_PYRAMID )) {
        return D3DTESTINIT_ABORT;
    }

    UINT uiRet;

    uiRet = TestInitReal(
        m_pDevice
    );
    if( uiRet != D3DTESTINIT_RUN )
    {
        return( uiRet );
    }

    uiRet = TestInitReal(
        m_pRefDevice
    );
    if( uiRet != D3DTESTINIT_RUN )
    {
        return( uiRet );
    }

    return D3DTESTINIT_RUN;
}

//-----------------------------------------------------------------------------

bool
DiscardDynamic::ExecuteTest
(
    UINT nTest
)
{

    static const UINT Usages[] =
    {
        D3DUSAGE_DYNAMIC,
        D3DUSAGE_DYNAMIC | D3DUSAGE_WRITEONLY,
        D3DUSAGE_DYNAMIC | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_DYNAMIC | D3DUSAGE_POINTS,
        D3DUSAGE_DYNAMIC | D3DUSAGE_RTPATCHES,
        D3DUSAGE_DYNAMIC | D3DUSAGE_NPATCHES,
        D3DUSAGE_DYNAMIC | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_DYNAMIC | D3DUSAGE_POINTS | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_DYNAMIC | D3DUSAGE_RTPATCHES | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_DYNAMIC | D3DUSAGE_NPATCHES | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_DYNAMIC | D3DUSAGE_POINTS | D3DUSAGE_RTPATCHES | D3DUSAGE_NPATCHES,
    };

    static const D3DPOOL Pools[] =
    {
        D3DPOOL_DEFAULT,
        D3DPOOL_SYSTEMMEM,
    };

    static const UINT LockFlags[] =
    {
        NULL,
        D3DLOCK_DISCARD,
        D3DLOCK_NOSYSLOCK,
        D3DLOCK_DISCARD|D3DLOCK_NOSYSLOCK,
    };


    typedef union __TESTCASE
    {
        struct
        {
            UINT LockFlag2 : 4;
            UINT LockFlag1 : 4;
            UINT Pool : 3;
            UINT Usage : 5;
        };
        UINT nTest;

    } TESTCASE, *LPTESTCASE;

    static const TESTCASE tcCount =
    {
        COUNTOF(LockFlags),
        COUNTOF(LockFlags),
        COUNTOF(Pools),
        COUNTOF(Usages)
    };


    TESTCASE tc;
    tc.nTest = (nTest - 1);

    if( nTest == (UINT)(-1) )
    {
        ClearRangeList();

        tc.nTest = 0;
        for( tc.Usage = 0; tc.Usage < tcCount.Usage; tc.Usage++ )
        {
            for( tc.Pool = 0; tc.Pool < tcCount.Pool; tc.Pool++ )
            {
                for( tc.LockFlag1 = 0; tc.LockFlag1 < tcCount.LockFlag1; tc.LockFlag1++ )
                {
                    for( tc.LockFlag2 = 0; tc.LockFlag2 < tcCount.LockFlag2; tc.LockFlag2++ )
                    {
                        AddTestRange( (tc.nTest + 1), (tc.nTest + 1) );
                    }
                }
            }
        }

        return( FALSE );
    }

    if(
        (tc.Usage >= tcCount.Usage) ||
        (tc.Pool >= tcCount.Pool) ||
        (tc.LockFlag1 >= tcCount.LockFlag1) ||
        (tc.LockFlag2 >= tcCount.LockFlag2)
    )
    {
        WriteToLog(
            TEXT("No such test (%d)\n"),
            nTest
        );

        return(FALSE);
    }


    ClearFrame();


    TCHAR sz[256];

    wsprintf( sz,
        TEXT("Usage = 0x%x, Pool = %d, LockFlags = 0x%x, 0x%x"),
        Usages[tc.Usage],
        Pools[tc.Pool],
        LockFlags[tc.LockFlag1],
        LockFlags[tc.LockFlag2]
    );

    BeginTestCase( sz, nTest );


    BOOL bRetTest;
    BOOL bRetRef;

    bRetTest = ExecuteReal(
        m_pDevice,
        Usages[tc.Usage],
        Pools[tc.Pool],
        LockFlags[tc.LockFlag1],
        LockFlags[tc.LockFlag2],
        (m_pAdapter->Devices[m_pMode->nSrcDevice].dwBehaviorFlags & D3DCREATE_MIXED_VERTEXPROCESSING)
    );

    bRetRef = ExecuteReal(
        m_pRefDevice,
        Usages[tc.Usage],
        Pools[tc.Pool],
        LockFlags[tc.LockFlag1],
        LockFlags[tc.LockFlag2],
        (m_pAdapter->Devices[m_pMode->nRefDevice].dwBehaviorFlags & D3DCREATE_MIXED_VERTEXPROCESSING)
    );


    bool bRet = bRetTest && bRetRef;
    if( !bRet )
    {
        Fail();
    }

    return( bRet );
}



UINT
DiscardDynamic::TestInitReal
(
    LPDIRECT3DDEVICE8 pDevice
)
{

    HRESULT hr;


    // Set the magic matricies
    D3DMATRIX matView =
    {
        1.0f,    0,       0,       0,
        0,       1.0f,    0,       0,
        0,       0,       1.0f,    0,
        0,       0,       2.0f,/*10.0f,*/   1.0f
    };
    pDevice->SetTransform( D3DTS_VIEW, &matView );

    D3DMATRIX matProj =
    {
        2.0f,    0,       0,       0,
        0,       2.0f,    0,       0,
        0,       0,       1.0f,    1.0f,
        0,       0,       -1.0f,   0.0f
    };
    pDevice->SetTransform( D3DTS_PROJECTION, &matProj );

    // Set appropiate states
    pDevice->SetRenderState( D3DRS_AMBIENT, D3DCOLOR_XRGB( 0xff, 0xff, 0xff ) );
    pDevice->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );
    pDevice->SetRenderState( D3DRS_SRCBLEND, D3DBLEND_ONE );
    pDevice->SetRenderState( D3DRS_DESTBLEND, D3DBLEND_ONE );
    pDevice->SetRenderState( D3DRS_CLIPPING, FALSE );

    D3DXMATRIX d3dMat;
    D3DXMATRIX d3dMatOut;

    D3DMATRIX matWorld =
    {
        1.0f,    0,       0,       0,
        0,       1.0f,    0,       0,
        0,       0,       1.0f,    0,
        0,       0,       0,       1.0f
    };

    d3dMat = matWorld;

    D3DXMatrixMultiply(
        &d3dMatOut,
        &d3dMat,
        D3DXMatrixRotationY( &d3dMatOut, 2.0f )
    );

    d3dMat = d3dMatOut;

    D3DXMatrixMultiply(
        &d3dMatOut,
        &d3dMat,
        D3DXMatrixRotationZ( &d3dMatOut, 0.40f )
    );

    d3dMat = d3dMatOut;

    D3DXMatrixMultiply(
        &d3dMatOut,
        &d3dMat,
        D3DXMatrixRotationX( &d3dMatOut, -0.46f )
    );

    d3dMat = d3dMatOut;

    hr = pDevice->SetTransform(
        D3DTS_WORLD,
        &d3dMat
    );
    if( FAILED(hr) )
    {
        WriteToLog(
            TEXT("SetTransform() returned %s (0x%x)\n"),
            DecodeHResult(hr),
            hr
        );
        return(D3DTESTINIT_ABORT);
    }


    D3DMATERIAL8 mtrl =
    {
        { 0.8f, 0.0f, 0.0f, 0.0f },  // diffuse
        { 0.0f, 0.3f, 0.0f, 0.5f },  // ambient
        { 0.0f, 0.0f, 1.0f, 0.0f },	 // specular
        { 0.0f, 0.0f, 0.0f, 0.0f },	 // emissive
        0.0f  // sharpness (for specular)
    };

    hr = pDevice->SetMaterial(
        &mtrl
    );
    if( FAILED(hr) )
    {
        WriteToLog(
            TEXT("SetMaterial() returned %s (0x%x)\n"),
            DecodeHResult(hr),
            hr
        );
        return(D3DTESTINIT_ABORT);
    }


    return(D3DTESTINIT_RUN);
}



BOOL
DiscardDynamic::ExecuteReal
(
    LPDIRECT3DDEVICE8 pDevice,
    DWORD Usage,
    D3DPOOL Pool,
    DWORD LockFlags1,
    DWORD LockFlags2,
    BOOL fMixedMode
)
{

    HRESULT hr = D3D_OK;
    LPBYTE pbObject = NULL;
    BOOL fRet = TRUE;
    LPDIRECT3DVERTEXBUFFER8 pVB = NULL;
    LPDIRECT3DINDEXBUFFER8 pIB = NULL;


    pDevice->Clear( 0, NULL, D3DCLEAR_TARGET, D3DCOLOR_XRGB(0x00, 0x00, 0x00), 0.0f, 0 );

    if( SUCCEEDED( pDevice->BeginScene() ) )
    {
        do
        {
            BOOL fSoftwareUsage = FALSE;

            // determine sw usage
            if( fMixedMode )
            {
                DWORD dwSW;
                pDevice->GetRenderState( D3DRS_SOFTWAREVERTEXPROCESSING, &dwSW );
                fSoftwareUsage = dwSW;
            }

            // create buffers
            hr = pDevice->CreateVertexBuffer(
                (m_shape.m_nVertices + m_shape2.m_nVertices) * sizeof(D3DVERTEX),
                Usage ^ (fSoftwareUsage ? D3DUSAGE_SOFTWAREPROCESSING : NULL),
                D3DFVF_VERTEX,
                Pool,
                &pVB
            );
            if( FAILED(hr) )
            {
                WriteToLog(
                    TEXT("CreateVertexBuffer(%d,0x%x,0x%x,%d,) failed, returned %s (0x%x)\n"),
                    (m_shape.m_nVertices + m_shape2.m_nVertices) * sizeof(D3DVERTEX),
                    Usage ^ (fSoftwareUsage ? D3DUSAGE_SOFTWAREPROCESSING : NULL),
                    D3DFVF_VERTEX,
                    Pool,
                    DecodeHResult(hr),
                    hr
                );
                fRet = FALSE;
                continue;
            }

            hr = pDevice->CreateIndexBuffer(
                (m_shape.m_nIndices + m_shape2.m_nIndices) * sizeof(WORD),
                Usage ^ (fSoftwareUsage ? D3DUSAGE_SOFTWAREPROCESSING : NULL),
                D3DFMT_INDEX16,
                Pool,
                &pIB
            );
            if( FAILED(hr) )
            {
                WriteToLog(
                    TEXT("CreateIndexBuffer(%d,0x%x,%d,%d,) failed, returned %s (0x%x)\n"),
                    (m_shape.m_nIndices + m_shape2.m_nIndices) * sizeof(WORD),
                    Usage ^ (fSoftwareUsage ? D3DUSAGE_SOFTWAREPROCESSING : NULL),
                    D3DFMT_INDEX16,
                    Pool,
                    DecodeHResult(hr),
                    hr
                );
                fRet = FALSE;
                continue;
            }


            // setup streams
            hr = pDevice->SetStreamSource(
                0,
                pVB,
                sizeof(D3DVERTEX)
            );
            if( FAILED(hr) )
            {
                WriteToLog(
                    TEXT("SetStreamSource() returned %s (0x%x)\n"),
                    DecodeHResult(hr),
                    hr
                );
                fRet = FALSE;
                continue;
            }

            hr = pDevice->SetIndices(
                pIB,
                0
            );
            if( FAILED(hr) )
            {
                WriteToLog(
                    TEXT("SetIndices() returned %s (0x%x)\n"),
                    DecodeHResult(hr),
                    hr
                );
                fRet = FALSE;
                continue;
            }

            
            hr = pDevice->SetVertexShader( D3DFVF_VERTEX );
            if( FAILED(hr) )
            {
                WriteToLog(
                    TEXT("SetVertexShader(D3DFVF_VERTEX) returned %s (0x%x)\n"),
                    DecodeHResult(hr),
                    hr
                );
                fRet = FALSE;
                continue;
            }


            // first vb lock
            hr = pVB->Lock(
                0,
                m_shape.m_nVertices * sizeof(D3DVERTEX),
                &pbObject,
                LockFlags1
            );
            if( FAILED(hr) )
            {
                WriteToLog(
                    TEXT("VB::Lock(0,%d,,0x%x) returned %s (0x%x)\n"),
                    m_shape.m_nVertices * sizeof(D3DVERTEX),
                    LockFlags1,
                    DecodeHResult(hr),
                    hr
                );
                fRet = FALSE;
                continue;
            }

            CopyMemory( pbObject, m_shape.m_pVertices, m_shape.m_nVertices * sizeof(D3DVERTEX) );

            hr = pVB->Unlock();
            if( FAILED(hr) )
            {
                WriteToLog(
                    TEXT("VB::Unlock() returned %s (0x%x)\n"),
                    DecodeHResult(hr),
                    hr
                );
                fRet = FALSE;
                continue;
            }


            // first ib lock
            hr = pIB->Lock(
                0,
                m_shape.m_nIndices * sizeof(WORD),
                &pbObject,
                LockFlags1
            );
            if( FAILED(hr) )
            {
                WriteToLog(
                    TEXT("IB::Lock(0,%d,,0x%x) returned %s (0x%x)\n"),
                    m_shape.m_nIndices * sizeof(WORD),
                    LockFlags1,
                    DecodeHResult(hr),
                    hr
                );
                fRet = FALSE;
                continue;
            }

            CopyMemory( pbObject, m_shape.m_pIndices, m_shape.m_nIndices * sizeof(WORD) );

            hr = pIB->Unlock();
            if( FAILED(hr) )
            {
                WriteToLog(
                    TEXT("IB::Unlock() returned %s (0x%x)\n"),
                    DecodeHResult(hr),
                    hr
                );
                fRet = FALSE;
                continue;
            }


            // draw first object
            hr = pDevice->DrawIndexedPrimitive(
                D3DPT_TRIANGLELIST,
                0,
                m_shape.m_nVertices,
                0,
                m_shape.m_nIndices / 3
            );
            if( FAILED(hr) )
            {
                WriteToLog(
                    TEXT("DrawIndexedPrimitive() returned %s (0x%x)\n"),
                    DecodeHResult(hr),
                    hr
                );
                fRet = FALSE;
                continue;
            }


            // second vb lock
            hr = pVB->Lock(
                0,
                m_shape2.m_nVertices * sizeof(D3DVERTEX),
                &pbObject,
                LockFlags2
            );
            if( FAILED(hr) )
            {
                WriteToLog(
                    TEXT("VB::Lock(%d,%d,,0x%x) returned %s (0x%x)\n"),
                    0,
                    m_shape2.m_nVertices * sizeof(D3DVERTEX),
                    LockFlags2,
                    DecodeHResult(hr),
                    hr
                );
                fRet = FALSE;
                continue;
            }

            CopyMemory( pbObject, m_shape2.m_pVertices, m_shape2.m_nVertices * sizeof(D3DVERTEX) );

            hr = pVB->Unlock();
            if( FAILED(hr) )
            {
                WriteToLog(
                    TEXT("VB::Unlock() returned %s (0x%x)\n"),
                    DecodeHResult(hr),
                    hr
                );
                fRet = FALSE;
                continue;
            }


            // second ib lock
            hr = pIB->Lock(
                0,
                m_shape2.m_nIndices * sizeof(WORD),
                &pbObject,
                LockFlags2
            );
            if( FAILED(hr) )
            {
                WriteToLog(
                    TEXT("IB::Lock(%d,%d,,0x%x) returned %s (0x%x)\n"),
                    0,
                    m_shape2.m_nIndices * sizeof(WORD),
                    LockFlags2,
                    DecodeHResult(hr),
                    hr
                );
                fRet = FALSE;
                continue;
            }

            CopyMemory( pbObject, m_shape2.m_pIndices, m_shape2.m_nIndices * sizeof(WORD) );

            hr = pIB->Unlock();
            if( FAILED(hr) )
            {
                WriteToLog(
                    TEXT("IB::Unlock() returned %s (0x%x)\n"),
                    DecodeHResult(hr),
                    hr
                );
                fRet = FALSE;
                continue;
            }


            // draw second object
            hr = pDevice->DrawIndexedPrimitive(
                D3DPT_TRIANGLELIST,
                0,
                m_shape2.m_nVertices,
                0,
                m_shape2.m_nIndices / 3
            );
            if( FAILED(hr) )
            {
                WriteToLog(
                    TEXT("DrawIndexedPrimitive() returned %s (0x%x)\n"),
                    DecodeHResult(hr),
                    hr
                );
                fRet = FALSE;
                continue;
            }
        }
        while(0);  // execute once, so continue can bust out


        hr = pDevice->EndScene();
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("EndScene() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
        }

        RELEASE(pVB);
        RELEASE(pIB);
    }


    return(fRet);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\VBIB\HugeBuffer.cpp ===
//
//  HugeBuffer.cpp
//
//  tests for optimized buffers.
//
//  ---------------------------------------------------------------------------
//
//  Copyright (C) 2000 Microsoft Corporation.
//
//

#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "cshapes.h"
#include "CVertexIndexBufferTest.h"



//-----------------------------------------------------------------------------
// Constructor / Destructor
//-----------------------------------------------------------------------------

HugeBuffer::HugeBuffer()
{
    m_szTestName = _T("Huge Buffer");
    m_szCommandKey = _T("HugeBuffer");
    m_MemSize = 0;
}

//-----------------------------------------------------------------------------
// Member Functions
//-----------------------------------------------------------------------------

UINT HugeBuffer::TestInitialize()
{

    m_pD3D = m_pDisplay->GetDirect3D8();
/*
    if( m_pD3D8 && m_pSrcDevice8 && m_pRefDevice8 )
    {
        m_pD3D =  m_pD3D8;
        m_pDevice = m_pSrcDevice8;
        m_pRefDevice = m_pRefDevice8;
    }
    else
	{
		WriteToLog(_T("TestInitialize() - Framework devices == NULL\n"));
        return D3DTESTINIT_ABORT;
	}
*/

    // set the test range
    ExecuteTest( (UINT)(-1) );


    if (!m_shape15bit.NewShape( CS_SPHERE, 127 )) {
        return D3DTESTINIT_ABORT;
    }

    if (!m_shape16bit.NewShape( CS_SPHERE, 128 )) {
        return D3DTESTINIT_ABORT;
    }

    if (!m_shape.NewShape( CS_SPHERE, 181 )) {
        return D3DTESTINIT_ABORT;
    }


    // get amount of system memory
    MEMORYSTATUS memstat;
    GlobalMemoryStatus(&memstat);
    m_MemSize = memstat.dwTotalPhys;


    UINT uiRet;

    uiRet = TestInitReal(
        m_pDevice
    );
    if( uiRet != D3DTESTINIT_RUN )
    {
        return( uiRet );
    }

/*
    uiRet = TestInitReal(
        m_pRefDevice
    );
    if( uiRet != D3DTESTINIT_RUN )
    {
        return( uiRet );
    }
*/
    return D3DTESTINIT_RUN;
}

//-----------------------------------------------------------------------------

bool
HugeBuffer::ExecuteTest
(
    UINT nTest
)
{
    D3DTEST_HUGEBUFFER HugeBufferTests[] =
    {
    //  { szName, shape, VBFVF, IBFormat, Usage, Pool },

        { TEXT("Pool = DEFAULT"), &m_shape15bit, 1, D3DFVF_VERTEX, D3DFMT_INDEX16, NULL, POOL_DEFAULT },
//        { TEXT("Pool = DEFAULT"), &m_shape15bit, 1, D3DFVF_VERTEX, D3DFMT_INDEX16, NULL, D3DPOOL_DEFAULT },
//        { TEXT("Pool = MANAGED"), &m_shape15bit, 1, D3DFVF_VERTEX, D3DFMT_INDEX16, NULL, D3DPOOL_MANAGED },
//        { TEXT("Pool = SYSTEMMEM"), &m_shape15bit, 1, D3DFVF_VERTEX, D3DFMT_INDEX16, NULL, D3DPOOL_SYSTEMMEM },

        { TEXT("Pool = DEFAULT"), &m_shape16bit, 1, D3DFVF_VERTEX, D3DFMT_INDEX16, NULL, POOL_DEFAULT },
//        { TEXT("Pool = DEFAULT"), &m_shape16bit, 1, D3DFVF_VERTEX, D3DFMT_INDEX16, NULL, D3DPOOL_DEFAULT },
//        { TEXT("Pool = MANAGED"), &m_shape16bit, 1, D3DFVF_VERTEX, D3DFMT_INDEX16, NULL, D3DPOOL_MANAGED },
//        { TEXT("Pool = SYSTEMMEM"), &m_shape16bit, 1, D3DFVF_VERTEX, D3DFMT_INDEX16, NULL, D3DPOOL_SYSTEMMEM },

        { TEXT("Pool = DEFAULT"), &m_shape, 1, D3DFVF_VERTEX, D3DFMT_INDEX16, NULL, POOL_DEFAULT },
//        { TEXT("Pool = DEFAULT"), &m_shape, 1, D3DFVF_VERTEX, D3DFMT_INDEX16, NULL, D3DPOOL_DEFAULT },
//        { TEXT("Pool = MANAGED"), &m_shape, 1, D3DFVF_VERTEX, D3DFMT_INDEX16, NULL, D3DPOOL_MANAGED },
//        { TEXT("Pool = SYSTEMMEM"), &m_shape, 1, D3DFVF_VERTEX, D3DFMT_INDEX16, NULL, D3DPOOL_SYSTEMMEM },

//        { TEXT("Pool = DEFAULT"), &m_shape, 10, D3DFVF_VERTEX, D3DFMT_INDEX32, NULL, D3DPOOL_DEFAULT },
//        { TEXT("Pool = MANAGED"), &m_shape, 10, D3DFVF_VERTEX, D3DFMT_INDEX32, NULL, D3DPOOL_MANAGED },
//        { TEXT("Pool = SYSTEMMEM"), &m_shape, 10, D3DFVF_VERTEX, D3DFMT_INDEX32, NULL, D3DPOOL_SYSTEMMEM },
    };
    static const UINT iHugeBufferTests = COUNTOF(HugeBufferTests);


    static const UINT iNumTests = iHugeBufferTests;

    if( nTest == (UINT)(-1) )
    {
        SetTestRange( 1, iNumTests );
        return( FALSE );
    }

    if( nTest > iNumTests )
    {
        return( FALSE );
    }

    ClearFrame();

    const D3DTEST_HUGEBUFFER *curtest = &HugeBufferTests[nTest-1];


    UINT NumVertices = curtest->shape->m_nVertices * curtest->iReps;
    UINT NumPrims = (curtest->shape->m_nIndices * curtest->iReps) / 3;

    // skip test if number of vertices > maxindex
    if(
        (NumVertices > m_d3dcaps.MaxVertexIndex) ||
        (NumVertices > m_d3dcaps.MaxVertexIndex)
    )
    {
        WriteToLog(
            TEXT("skipping test %d: NumVertices (%x) greater than supported by device (%x,%x)\n"),
            nTest,
            NumVertices,
            m_d3dcaps.MaxVertexIndex,
            m_d3dcaps.MaxVertexIndex
        );
        return(FALSE);
    }

    // skip test if number of prim > maxprim
    if(
        (NumPrims > m_d3dcaps.MaxPrimitiveCount) ||
        (NumPrims > m_d3dcaps.MaxPrimitiveCount)
    )
    {
        WriteToLog(
            TEXT("skipping test %d: NumPrimitives (%x) greater than supported by device (%x,%x)\n"),
            nTest,
            NumPrims,
            m_d3dcaps.MaxPrimitiveCount,
            m_d3dcaps.MaxPrimitiveCount
        );
        return(FALSE);
    }

    // skip larger shapes if not enough memory
    if( (NumVertices > 500000) && (m_MemSize < 0x10000000 /*256M*/) )
    {
        return(FALSE);
    }


    TCHAR sz[MAX_PATH];
    wsprintf( sz,
        TEXT("%d vertices, %d indices: %s"),
        curtest->shape->m_nVertices * curtest->iReps,
        curtest->shape->m_nIndices * curtest->iReps,
        curtest->szName
    );

    BeginTestCase( sz, nTest );


    BOOL bSrcRet;
    BOOL bRefRet;


    bSrcRet = ExecuteReal(
        m_pDevice,
        curtest,
        false
//        (m_pAdapter->Devices[m_pMode->nSrcDevice].dwBehaviorFlags & D3DCREATE_MIXED_VERTEXPROCESSING)
    );

//    bRefRet = ExecuteReal(
//        m_pRefDevice,
//        curtest,
//        (m_pAdapter->Devices[m_pMode->nRefDevice].dwBehaviorFlags & D3DCREATE_MIXED_VERTEXPROCESSING)
//    );


    bool bRet = (bSrcRet == TRUE);// && bRefRet;

    if( !bRet )
    {
        Fail();
    }

    return( bRet );
}



UINT
HugeBuffer::TestInitReal
(
    CDevice8* pDevice
)
{

    HRESULT hr;


    // Set the magic matricies
    D3DMATRIX matView =
    {
        1.0f,    0,       0,       0,
        0,       1.0f,    0,       0,
        0,       0,       1.0f,    0,
        0,       0,       2.0f,/*10.0f,*/   1.0f
    };
    pDevice->SetTransform( D3DTS_VIEW, &matView );

    D3DMATRIX matProj =
    {
        2.0f,    0,       0,       0,
        0,       2.0f,    0,       0,
        0,       0,       1.0f,    1.0f,
        0,       0,       -1.0f,   0.0f
    };
    pDevice->SetTransform( D3DTS_PROJECTION, &matProj );

    // Set appropiate states
    pDevice->SetRenderState( D3DRS_AMBIENT, D3DCOLOR_XRGB( 0xff, 0xff, 0xff ) );
    pDevice->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );
    pDevice->SetRenderState( D3DRS_SRCBLEND, D3DBLEND_ONE );
    pDevice->SetRenderState( D3DRS_DESTBLEND, D3DBLEND_ONE );
#ifndef UNDER_XBOX
    pDevice->SetRenderState( D3DRS_CLIPPING, FALSE );
#endif

    D3DXMATRIX d3dMat;
    D3DXMATRIX d3dMatOut;

    D3DMATRIX matWorld =
    {
        1.0f,    0,       0,       0,
        0,       1.0f,    0,       0,
        0,       0,       1.0f,    0,
        0,       0,       0,       1.0f
    };

    d3dMat = matWorld;

    D3DXMatrixMultiply(
        &d3dMatOut,
        &d3dMat,
        D3DXMatrixRotationY( &d3dMatOut, 2.0f )
    );

    d3dMat = d3dMatOut;

    D3DXMatrixMultiply(
        &d3dMatOut,
        &d3dMat,
        D3DXMatrixRotationZ( &d3dMatOut, 0.40f )
    );

    d3dMat = d3dMatOut;

    D3DXMatrixMultiply(
        &d3dMatOut,
        &d3dMat,
        D3DXMatrixRotationX( &d3dMatOut, 2.0f )
    );

    d3dMat = d3dMatOut;

    hr = pDevice->SetTransform(
        D3DTS_WORLD,
        &d3dMat
    );
    if( FAILED(hr) )
    {
        WriteToLog(
            TEXT("SetTransform() returned %s (0x%x)\n"),
            DecodeHResult(hr),
            hr
        );
        return(D3DTESTINIT_ABORT);
    }


    D3DMATERIAL8 mtrl =
    {
        { 1.0f, 0.0f, 0.0f, 0.0f },  // diffuse
        { 0.0f, 0.3f, 0.0f, 0.5f },  // ambient
        { 1.0f, 0.0f, 0.0f, 0.0f },	 // specular
        { 0.0f, 0.0f, 0.0f, 0.0f },	 // emissive
        0.0f  // sharpness (for specular)
    };

    hr = pDevice->SetMaterial(
        &mtrl
    );
    if( FAILED(hr) )
    {
        WriteToLog(
            TEXT("SetMaterial() returned %s (0x%x)\n"),
            DecodeHResult(hr),
            hr
        );
        return(D3DTESTINIT_ABORT);
    }

    return(D3DTESTINIT_RUN);
}



BOOL
HugeBuffer::ExecuteReal
(
    CDevice8* pDevice,
    const D3DTEST_HUGEBUFFER *lpBufInfo,
    BOOL fMixedMode
)
{

    HRESULT hr = D3D_OK;
    CVertexBuffer8* pVB = NULL;
    CIndexBuffer8* pIB = NULL;
    LPBYTE pVertices = NULL;
    LPBYTE pIndices = NULL;
    BOOL fRet = TRUE;

    BOOL fSoftwareUsage = FALSE;


    // determine sw usage
    if( fMixedMode )
    {
//        DWORD dwSW;
//        pDevice->GetRenderState( D3DRS_SOFTWAREVERTEXPROCESSING, &dwSW );
//        fSoftwareUsage = dwSW;
    }

    UINT nVertices = lpBufInfo->iReps * lpBufInfo->shape->m_nVertices;
    UINT nIndices = lpBufInfo->iReps * lpBufInfo->shape->m_nIndices;

    if( ((nVertices > (UINT)0xffff) && (lpBufInfo->IBFormat == D3DFMT_INDEX16)) )
    {
        WriteToLog(
            TEXT("nVertices (%d) is greater than WORD index can hold, image may look strange\n"),
            nVertices
        );
    }

    do
    {
        hr = pDevice->CreateVertexBuffer(
            nVertices * sizeof(D3DVERTEX),
            lpBufInfo->Usage ^ (fSoftwareUsage ? D3DUSAGE_SOFTWAREPROCESSING : 0),
            lpBufInfo->VBFVF,
            lpBufInfo->Pool,
            &pVB
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("CreateVertexBuffer(%d,0x%x,0x%x,%d,) failed, returned %s (0x%x)\n"),
                nVertices * sizeof(D3DVERTEX),
                lpBufInfo->Usage ^ (fSoftwareUsage ? D3DUSAGE_SOFTWAREPROCESSING : 0),
                lpBufInfo->VBFVF,
                lpBufInfo->Pool,
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }


        hr = pDevice->CreateIndexBuffer(
#ifndef UNDER_XBOX
            nIndices * ( (lpBufInfo->IBFormat == D3DFMT_INDEX32) ? sizeof(DWORD) : sizeof(WORD) ),
#else
            nIndices * sizeof(WORD),
#endif
            lpBufInfo->Usage ^ (fSoftwareUsage ? D3DUSAGE_SOFTWAREPROCESSING : 0),
            lpBufInfo->IBFormat,
            lpBufInfo->Pool,
            &pIB
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("CreateIndexBuffer(%d,0x%x,%d,%d,) failed, returned %s (0x%x)\n"),
#ifndef UNDER_XBOX
                nIndices * ( (lpBufInfo->IBFormat == D3DFMT_INDEX32) ? sizeof(DWORD) : sizeof(WORD) ),
#else
                nIndices * sizeof(WORD),
#endif
                lpBufInfo->Usage ^ (fSoftwareUsage ? D3DUSAGE_SOFTWAREPROCESSING : 0),
                lpBufInfo->IBFormat,
                lpBufInfo->Pool,
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }


        hr = pVB->Lock(
            0,
            nVertices * sizeof(D3DVERTEX),
            &pVertices,
            0
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("Lock() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            break;
        }

        hr = pIB->Lock(
            0,
#ifndef UNDER_XBOX
            nIndices * ( (lpBufInfo->IBFormat == D3DFMT_INDEX32) ? sizeof(DWORD) : sizeof(WORD) ),
#else
            nIndices * sizeof(WORD),
#endif
            &pIndices,
            0
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("Lock() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            break;
        }

        for(
            UINT iVertStart = 0, iIndexStart = 0;
            ((iVertStart + lpBufInfo->shape->m_nVertices) <= nVertices) && ((iIndexStart + lpBufInfo->shape->m_nIndices) <= nIndices);
            iVertStart += lpBufInfo->shape->m_nVertices, iIndexStart += lpBufInfo->shape->m_nIndices
        )
        {
            UINT iTemp;

            for( iTemp = iVertStart; iTemp < (UINT)lpBufInfo->shape->m_nVertices; iTemp++ )
            {
                ((D3DVERTEX*)pVertices)[iTemp] = lpBufInfo->shape->m_pVertices[iTemp];
            }

            switch( lpBufInfo->IBFormat)
            {
                case D3DFMT_INDEX16:
                    for( iTemp = iIndexStart; iTemp < (UINT)lpBufInfo->shape->m_nIndices; iTemp++ )
                    {
                        ((WORD*)pIndices)[iTemp] = (WORD)lpBufInfo->shape->m_pIndices[iTemp] + (WORD)iVertStart;
                    }
                    break;

//                case D3DFMT_INDEX32:
//                    for( UINT iTemp = iIndexStart; iTemp < lpBufInfo->shape->m_nIndices; iTemp++ )
//                    {
//                        ((DWORD*)pIndices)[iTemp] = (DWORD)lpBufInfo->shape->m_pIndices[iTemp] + (DWORD)iVertStart;
//                    }
//                    break;

                default:
                    break;
            }
        }

        hr = pVB->Unlock();
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("Unlock() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            break;
        }

        hr = pIB->Unlock();
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("Unlock() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            break;
        }


        hr = pDevice->SetStreamSource(
            0,
            pVB,
            sizeof(D3DVERTEX)
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("SetStreamSource() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

        hr = pDevice->SetIndices(
            pIB,
            0
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("SetIndices() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

        hr = pDevice->SetVertexShader( D3DFVF_VERTEX );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("SetVertexShader() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

    } while(0);


    if( !fRet )
    {
        RELEASE(pIB);
        RELEASE(pVB);
        Fail();
        return(fRet);
    }

    hr = pDevice->Clear( 0, NULL, D3DCLEAR_TARGET, D3DCOLOR_XRGB(0x00, 0x00, 0x00), 0.0f, 0 );
    if( FAILED(hr) )
    {
        WriteToLog(
            TEXT("Clear() returned %s (0x%x)\n"),
            DecodeHResult(hr),
            hr
        );
        fRet = FALSE;
    }

    do
    {
        hr = pDevice->BeginScene();
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("BeginScene() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

#ifdef UNDER_XBOX
        if (!(GetStartupContext() & TSTART_STRESS)) {
#endif
            hr = pDevice->DrawIndexedPrimitive(
                D3DPT_TRIANGLELIST,
                0,
                nVertices,
                0,
                nIndices / 3
            );
            if( FAILED(hr) )
            {
                WriteToLog(
                    TEXT("DrawIndexedPrimitive() returned %s (0x%x)\n"),
                    DecodeHResult(hr),
                    hr
                );
                fRet = FALSE;
                continue;
            }
#ifdef UNDER_XBOX
        }
        else {
            pDevice->DrawIndexedPrimitive(D3DPT_TRIANGLELIST, 0, nVertices, 0, nIndices / 12);
            pDevice->DrawIndexedPrimitive(D3DPT_TRIANGLELIST, 0, nVertices, nIndices / 4, nIndices / 12);
            pDevice->DrawIndexedPrimitive(D3DPT_TRIANGLELIST, 0, nVertices, nIndices / 2, nIndices / 12);
            pDevice->DrawIndexedPrimitive(D3DPT_TRIANGLELIST, 0, nVertices, 3 * nIndices / 4, nIndices / 12);
        }
#endif
    }
    while(0);

    hr = pDevice->EndScene();
    if( FAILED(hr) )
    {
        WriteToLog(
            TEXT("EndScene() returned %s (0x%x)\n"),
            DecodeHResult(hr),
            hr
        );
        fRet = FALSE;
    }

    RELEASE(pIB);
    RELEASE(pVB);

    return(fRet);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\VBIB\LockPointerAlias.h ===
#ifndef __LockPointerAlias_h__
#define __LockPointerAlias_h__



#include <CD3DTest.h>
#include <windows.h>



USETESTFRAME



#define COUNTOF(a) (sizeof(a)/sizeof((a)[0]))
#define DecodeHResult(hr) (GetHResultString(hr).c_str())

#define GROUP_CREATE(GroupName)  \
GroupName Class##GroupName



class LockPointerAlias : public CD3DTest
{
public:
    LockPointerAlias();

    UINT TestInitialize();
    UINT TestInitialize7();
    UINT TestInitialize8();
    bool ExecuteTest(UINT nTest);
    bool ExecuteTest7(UINT nTest);
    bool ExecuteTest8(UINT nTest);
};



#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\VBIB\LockActive.cpp ===
//
//  LockActive.cpp
//
//  lock selected vertex/index buffer tests.
//
//  ---------------------------------------------------------------------------
//
//  Copyright (C) 2000 Microsoft Corporation.
//
//

#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "cshapes.h"
#include "CVertexIndexBufferTest.h"



//-----------------------------------------------------------------------------
// Constructor / Destructor
//-----------------------------------------------------------------------------

LockActive::LockActive()
{
    m_szTestName = _T("Lock Active");
    m_szCommandKey = _T("LockActive");

    m_pSrcVB = NULL;
    m_pSrcIB = NULL;
    m_pRefVB = NULL;
    m_pRefIB = NULL;
}

LockActive::~LockActive()
{
    RELEASE( m_pSrcVB );
    RELEASE( m_pSrcIB );
    RELEASE( m_pRefVB );
    RELEASE( m_pRefIB );
}

//-----------------------------------------------------------------------------
// Member Functions
//-----------------------------------------------------------------------------

UINT LockActive::TestInitialize()
{

    m_pD3D =  m_pDisplay->GetDirect3D8();
/*
    if( m_pD3D8 && m_pSrcDevice8 && m_pRefDevice8 )
    {
        m_pD3D =  m_pD3D8;
        m_pDevice = m_pSrcDevice8;
        m_pRefDevice = m_pRefDevice8;
    }
    else
	{
		WriteToLog(_T("TestInitialize() - Framework devices == NULL\n"));
        return D3DTESTINIT_ABORT;
	}
*/

    // set the test range
    ExecuteTest( (UINT)(-1) );


    if (!m_shape.NewShape( CS_SPHERE, 10 )) {
        return D3DTESTINIT_ABORT;
    }
    if (!m_shape2.NewShape( CS_PYRAMID )) {
        return D3DTESTINIT_ABORT;
    }

    UINT uiRet;

    uiRet = TestInitReal(
        m_pDevice
    );
    if( uiRet != D3DTESTINIT_RUN )
    {
        return( uiRet );
    }

/*
    uiRet = TestInitReal(
        m_pRefDevice
    );
    if( uiRet != D3DTESTINIT_RUN )
    {
        return( uiRet );
    }
*/
    return D3DTESTINIT_RUN;
}

//-----------------------------------------------------------------------------

bool
LockActive::ExecuteTest
(
    UINT nTest
)
{

    static const UINT Usages[] =
    {
        NULL,
        D3DUSAGE_WRITEONLY,
        D3DUSAGE_DONOTCLIP,
        D3DUSAGE_POINTS,
        D3DUSAGE_RTPATCHES,
        D3DUSAGE_NPATCHES,
//        D3DUSAGE_DYNAMIC,
        D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_POINTS | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_RTPATCHES | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_NPATCHES | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_POINTS | D3DUSAGE_RTPATCHES | D3DUSAGE_NPATCHES,
//        D3DUSAGE_WRITEONLY | D3DUSAGE_DYNAMIC,
//        D3DUSAGE_DONOTCLIP | D3DUSAGE_DYNAMIC,
//        D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP | D3DUSAGE_DYNAMIC,
    };

    static const D3DPOOL Pools[] =
    {
        POOL_DEFAULT
//        D3DPOOL_DEFAULT,
//        D3DPOOL_MANAGED,
//        D3DPOOL_SYSTEMMEM,
    };

    static const UINT LockFlags[] =
    {
        NULL,
#ifndef UNDER_XBOX
        D3DLOCK_DISCARD,
#endif
        D3DLOCK_NOOVERWRITE,
//        D3DLOCK_NOSYSLOCK,
#ifndef UNDER_XBOX
        D3DLOCK_DISCARD|D3DLOCK_NOOVERWRITE,
#endif
//        D3DLOCK_DISCARD|D3DLOCK_NOSYSLOCK,
//        D3DLOCK_NOOVERWRITE|D3DLOCK_NOSYSLOCK,
//        D3DLOCK_DISCARD|D3DLOCK_NOOVERWRITE|D3DLOCK_NOSYSLOCK,
    };

    static const D3DTEST_LOCKACTIVE LockActiveTests[] =
    {
    //  { szName, fCreate, fAppendVB, fAppendIB, fDraw1, fDraw2 },

        { TEXT("Creating buffers, rendering base objects"), TRUE, FALSE, FALSE, TRUE, FALSE },
        { TEXT("Locking Vertex Buffer and adding second object"), FALSE, TRUE, FALSE, TRUE, FALSE },
        { TEXT("Locking Index Buffer and adding second object"), FALSE, FALSE, TRUE, TRUE, FALSE },
        { TEXT("Rendering second object"), FALSE, FALSE, FALSE, FALSE, TRUE },
        { TEXT("Rendering both objects"), FALSE, FALSE, FALSE, TRUE, TRUE },
        { TEXT("Multiple locks and drawprim in one scene"), TRUE, TRUE, TRUE, TRUE, TRUE },

    };


    typedef union __TESTCASE
    {
        struct
        {
            UINT TestStage : 3;
            UINT LockFlag : 6;
            UINT Pool : 3;
            UINT Usage : 5;
        };
        UINT nTest;

    } TESTCASE, *LPTESTCASE;

    static const TESTCASE tcCount =
    {
        COUNTOF(LockActiveTests),
        COUNTOF(LockFlags),
        COUNTOF(Pools),
        COUNTOF(Usages)
    };


    static TESTCASE prevtest = {0};
    static BOOL bSkip = FALSE;

    TESTCASE tc;
    tc.nTest = (nTest - 1);

    if( nTest == (UINT)(-1) )
    {
        ClearRangeList();

        tc.nTest = 0;
        for( tc.Usage = 0; tc.Usage < tcCount.Usage; tc.Usage++ )
        {
            for( tc.Pool = 0; tc.Pool < tcCount.Pool; tc.Pool++ )
            {
                for( tc.LockFlag = 0; tc.LockFlag < tcCount.LockFlag; tc.LockFlag++ )
                {
                    for( tc.TestStage = 0; tc.TestStage < tcCount.TestStage; tc.TestStage++ )
                    {
                        AddTestRange( (tc.nTest + 1), (tc.nTest + 1) );
                    }
                }
            }
        }

        return( FALSE );
    }

    if( (tc.Usage >= tcCount.Usage) ||
        (tc.Pool >= tcCount.Pool) ||
        (tc.LockFlag >= tcCount.LockFlag ) ||
        (tc.TestStage >= tcCount.TestStage) )
    {
        WriteToLog(
            TEXT("No such test (%d)\n"),
            nTest
        );

        return(FALSE);
    }

    if( tc.TestStage == 0 || tc.TestStage == 5 )
    {
        bSkip = FALSE;
    }
    else if( tc.TestStage != (prevtest.TestStage + 1) % tcCount.TestStage )
    {
        bSkip = TRUE;
    }

    if( bSkip )
    {
        return(FALSE);
    }

    prevtest.nTest = tc.nTest;

/*
    if(
        ((Usages[tc.Usage] & D3DUSAGE_DYNAMIC) && (Pools[tc.Pool] == D3DPOOL_MANAGED)) ||
        (!(Usages[tc.Usage] & D3DUSAGE_DYNAMIC) && (LockFlags[tc.LockFlag] & D3DLOCK_DISCARD)) ||
        (!(Usages[tc.Usage] & D3DUSAGE_DYNAMIC) && (LockFlags[tc.LockFlag] & D3DLOCK_NOOVERWRITE))
    )
    {
        return(FALSE);
    }
*/

    ClearFrame();


    TCHAR sz[256];

    wsprintf( sz,
        TEXT("Usage = 0x%x, Pool = %d, LockFlags = 0x%x; %s"),
        Usages[tc.Usage],
        Pools[tc.Pool],
        LockFlags[tc.LockFlag],
        LockActiveTests[tc.TestStage].szName
    );

    BeginTestCase( sz, nTest );

 
    BOOL bRetTest;
    BOOL bRetRef;

#if 0
    wsprintf( sz,
        TEXT("%d: Usage = 0x%x, Pool = %d, LockFlags = 0x%x; %s\n"),
        nTest,
        Usages[tc.Usage],
        Pools[tc.Pool],
        LockFlags[tc.LockFlag],
        LockActiveTests[tc.TestStage].szName
    );
    OutputDebugString(sz);
#endif

    bRetTest = ExecuteReal(
        m_pDevice,
        &m_pSrcVB,
        &m_pSrcIB,
        Usages[tc.Usage],
        Pools[tc.Pool],
        LockFlags[tc.LockFlag],
        &LockActiveTests[tc.TestStage],
        false
//        (m_pAdapter->Devices[m_pMode->nSrcDevice].dwBehaviorFlags & D3DCREATE_MIXED_VERTEXPROCESSING)
    );

#if 0
    OutputDebugString(TEXT("...\n"));
#endif

/*
    bRetRef = ExecuteReal(
        m_pRefDevice,
        &m_pRefVB,
        &m_pRefIB,
        Usages[tc.Usage],
        Pools[tc.Pool],
        LockFlags[tc.LockFlag],
        &LockActiveTests[tc.TestStage],
        (m_pAdapter->Devices[m_pMode->nRefDevice].dwBehaviorFlags & D3DCREATE_MIXED_VERTEXPROCESSING)
    );
*/
#if 0
    OutputDebugString(TEXT("done.\n"));
#endif

    bool bRet = (bRetTest == TRUE);// && bRetRef;
    if( !bRet )
    {
        bSkip = TRUE;
        Fail();
    }

    return( bRet );
}



UINT
LockActive::TestInitReal
(
    CDevice8* pDevice
)
{

    HRESULT hr;


    // Set the magic matricies
    D3DMATRIX matView =
    {
        1.0f,    0,       0,       0,
        0,       1.0f,    0,       0,
        0,       0,       1.0f,    0,
        0,       0,       2.0f,/*10.0f,*/   1.0f
    };
    pDevice->SetTransform( D3DTS_VIEW, &matView );

    D3DMATRIX matProj =
    {
        2.0f,    0,       0,       0,
        0,       2.0f,    0,       0,
        0,       0,       1.0f,    1.0f,
        0,       0,       -1.0f,   0.0f
    };
    pDevice->SetTransform( D3DTS_PROJECTION, &matProj );

    // Set appropiate states
    pDevice->SetRenderState( D3DRS_AMBIENT, D3DCOLOR_XRGB( 0xff, 0xff, 0xff ) );
    pDevice->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );
    pDevice->SetRenderState( D3DRS_SRCBLEND, D3DBLEND_ONE );
    pDevice->SetRenderState( D3DRS_DESTBLEND, D3DBLEND_ONE );
#ifndef UNDER_XBOX
    pDevice->SetRenderState( D3DRS_CLIPPING, FALSE );
#endif

    D3DXMATRIX d3dMat;
    D3DXMATRIX d3dMatOut;

    D3DMATRIX matWorld =
    {
        1.0f,    0,       0,       0,
        0,       1.0f,    0,       0,
        0,       0,       1.0f,    0,
        0,       0,       0,       1.0f
    };

    d3dMat = matWorld;

    D3DXMatrixMultiply(
        &d3dMatOut,
        &d3dMat,
        D3DXMatrixRotationY( &d3dMatOut, 2.0f )
    );

    d3dMat = d3dMatOut;

    D3DXMatrixMultiply(
        &d3dMatOut,
        &d3dMat,
        D3DXMatrixRotationZ( &d3dMatOut, 0.40f )
    );

    d3dMat = d3dMatOut;

    D3DXMatrixMultiply(
        &d3dMatOut,
        &d3dMat,
        D3DXMatrixRotationX( &d3dMatOut, -0.46f )
    );

    d3dMat = d3dMatOut;

    hr = pDevice->SetTransform(
        D3DTS_WORLD,
        &d3dMat
    );
    if( FAILED(hr) )
    {
        WriteToLog(
            TEXT("SetTransform() returned %s (0x%x)\n"),
            DecodeHResult(hr),
            hr
        );
        return(D3DTESTINIT_ABORT);
    }


    D3DMATERIAL8 mtrl =
    {
        { 0.8f, 0.0f, 0.0f, 0.0f },  // diffuse
        { 0.0f, 0.3f, 0.0f, 0.5f },  // ambient
        { 0.0f, 0.0f, 1.0f, 0.0f },	 // specular
        { 0.0f, 0.0f, 0.0f, 0.0f },	 // emissive
        0.0f  // sharpness (for specular)
    };

    hr = pDevice->SetMaterial(
        &mtrl
    );
    if( FAILED(hr) )
    {
        WriteToLog(
            TEXT("SetMaterial() returned %s (0x%x)\n"),
            DecodeHResult(hr),
            hr
        );
        return(D3DTESTINIT_ABORT);
    }


    return(D3DTESTINIT_RUN);
}



BOOL
LockActive::ExecuteReal
(
    CDevice8* pDevice,
    CVertexBuffer8 **ppVB,
    CIndexBuffer8 **ppIB,
    DWORD Usage,
    D3DPOOL Pool,
    DWORD LockFlags,
    const D3DTEST_LOCKACTIVE *Test,
    BOOL fMixedMode
)
{

    HRESULT hr = D3D_OK;
    LPBYTE pbObject = NULL;
    BOOL fRet = TRUE;

    LPTSTR szLastCall = TEXT("");

    do
    {
//        try
        {
            if( Test->fCreate )  // create buffers, copy first object
            {
                BOOL fSoftwareUsage = FALSE;

                // determine sw usage
                if( fMixedMode )
                {
//                    DWORD dwSW;
//                    pDevice->GetRenderState( D3DRS_SOFTWAREVERTEXPROCESSING, &dwSW );
//                    fSoftwareUsage = dwSW;
                }

                szLastCall = TEXT("Release(VB)");
                RELEASE(*ppVB);

                szLastCall = TEXT("CreateVertexBuffer()");
                hr = pDevice->CreateVertexBuffer(
                    (m_shape.m_nVertices + m_shape2.m_nVertices) * sizeof(D3DVERTEX),
                    Usage ^ (fSoftwareUsage ? D3DUSAGE_SOFTWAREPROCESSING : NULL),
                    D3DFVF_VERTEX,
                    Pool,
                    ppVB
                );
                if( FAILED(hr) )
                {
                    WriteToLog(
                        TEXT("CreateVertexBuffer(%d,0x%x,0x%x,%d,) failed, returned %s (0x%x)\n"),
                        (m_shape.m_nVertices + m_shape2.m_nVertices) * sizeof(D3DVERTEX),
                        Usage ^ (fSoftwareUsage ? D3DUSAGE_SOFTWAREPROCESSING : NULL),
                        D3DFVF_VERTEX,
                        Pool,
                        DecodeHResult(hr),
                        hr
                    );
                    fRet = FALSE;
                    continue;
                }

                szLastCall = TEXT("VB->Lock()");
                hr = (*ppVB)->Lock(
                    0,
                    m_shape.m_nVertices * sizeof(D3DVERTEX),
                    &pbObject,
                    LockFlags
                );
                if( FAILED(hr) )
                {
                    WriteToLog(
                        TEXT("VB::Lock(0,%d,,0x%x) returned %s (0x%x)\n"),
                        m_shape.m_nVertices * sizeof(D3DVERTEX),
                        LockFlags,
                        DecodeHResult(hr),
                        hr
                    );
                    fRet = FALSE;
                    continue;
                }

                szLastCall = TEXT("CopyMemory(,VB,)");
                CopyMemory( pbObject, m_shape.m_pVertices, m_shape.m_nVertices * sizeof(D3DVERTEX) );

                szLastCall = TEXT("VB->Unlock()");
                hr = (*ppVB)->Unlock();
                if( FAILED(hr) )
                {
                    WriteToLog(
                        TEXT("VB::Unlock() returned %s (0x%x)\n"),
                        DecodeHResult(hr),
                        hr
                    );
                    fRet = FALSE;
                    continue;
                }

                szLastCall = TEXT("SetStreamSource()");
                hr = pDevice->SetStreamSource(
                    0,
                    *ppVB,
                    sizeof(D3DVERTEX)
                );
                if( FAILED(hr) )
                {
                    WriteToLog(
                        TEXT("SetStreamSource() returned %s (0x%x)\n"),
                        DecodeHResult(hr),
                        hr
                    );
                    fRet = FALSE;
                    continue;
                }


                szLastCall = TEXT("Release(IB)");
                RELEASE(*ppIB);

                szLastCall = TEXT("CreateIndexBuffer()");
                hr = pDevice->CreateIndexBuffer(
                    (m_shape.m_nIndices + m_shape2.m_nIndices) * sizeof(WORD),
                    Usage ^ (fSoftwareUsage ? D3DUSAGE_SOFTWAREPROCESSING : NULL),
                    D3DFMT_INDEX16,
                    Pool,
                    ppIB
                );
                if( FAILED(hr) )
                {
                    WriteToLog(
                        TEXT("CreateIndexBuffer(%d,0x%x,%d,%d,) failed, returned %s (0x%x)\n"),
                        (m_shape.m_nIndices + m_shape2.m_nIndices) * sizeof(WORD),
                        Usage ^ (fSoftwareUsage ? D3DUSAGE_SOFTWAREPROCESSING : NULL),
                        D3DFMT_INDEX16,
                        Pool,
                        DecodeHResult(hr),
                        hr
                    );
                    fRet = FALSE;
                    continue;
                }

                szLastCall = TEXT("IB->Lock()");
                hr = (*ppIB)->Lock(
                    0,
                    m_shape.m_nIndices * sizeof(WORD),
                    &pbObject,
                    LockFlags
                );
                if( FAILED(hr) )
                {
                    WriteToLog(
                        TEXT("IB::Lock(0,%d,,0x%x) returned %s (0x%x)\n"),
                        m_shape.m_nIndices * sizeof(WORD),
                        LockFlags,
                        DecodeHResult(hr),
                        hr
                    );
                    fRet = FALSE;
                    continue;
                }

                szLastCall = TEXT("CopyMemory(,IB,)");
                CopyMemory( pbObject, m_shape.m_pIndices, m_shape.m_nIndices * sizeof(WORD) );

                szLastCall = TEXT("IB->Unlock()");
                hr = (*ppIB)->Unlock();
                if( FAILED(hr) )
                {
                    WriteToLog(
                        TEXT("IB::Unlock() returned %s (0x%x)\n"),
                        DecodeHResult(hr),
                        hr
                    );
                    fRet = FALSE;
                    continue;
                }

                szLastCall = TEXT("SetIndices()");
                hr = pDevice->SetIndices(
                    *ppIB,
                    0
                );
                if( FAILED(hr) )
                {
                    WriteToLog(
                        TEXT("SetIndices() returned %s (0x%x)\n"),
                        DecodeHResult(hr),
                        hr
                    );
                    fRet = FALSE;
                    continue;
                }
            }


            if( Test->fAppendVB )  // add second object to vb
            {
                szLastCall = TEXT("VB->Lock()");
                hr = (*ppVB)->Lock(
                    m_shape.m_nVertices * sizeof(D3DVERTEX),
                    m_shape2.m_nVertices * sizeof(D3DVERTEX),
                    &pbObject,
                    LockFlags
                );
                if( FAILED(hr) )
                {
                    WriteToLog(
                        TEXT("VB::Lock(%d,%d,,0x%x) returned %s (0x%x)\n"),
                        m_shape.m_nVertices * sizeof(D3DVERTEX),
                        m_shape2.m_nVertices * sizeof(D3DVERTEX),
                        LockFlags,
                        DecodeHResult(hr),
                        hr
                    );
                    fRet = FALSE;
                    continue;
                }

                szLastCall = TEXT("CopyMemory(,VB,)");
                CopyMemory( pbObject, m_shape2.m_pVertices, m_shape2.m_nVertices * sizeof(D3DVERTEX) );

                szLastCall = TEXT("VB->Unlock()");
                hr = (*ppVB)->Unlock();
                if( FAILED(hr) )
                {
                    WriteToLog(
                        TEXT("VB::Unlock() returned %s (0x%x)\n"),
                        DecodeHResult(hr),
                        hr
                    );
                    fRet = FALSE;
                    continue;
                }
            }


            if( Test->fAppendIB )  // add second object to ib
            {
                szLastCall = TEXT("IB->Lock()");
                hr = (*ppIB)->Lock(
                    m_shape.m_nIndices * sizeof(WORD),
                    m_shape2.m_nIndices * sizeof(WORD),
                    &pbObject,
                    LockFlags
                );
                if( FAILED(hr) )
                {
                    WriteToLog(
                        TEXT("IB::Lock(%d,%d,,0x%x) returned %s (0x%x)\n"),
                        m_shape.m_nIndices * sizeof(WORD),
                        m_shape2.m_nIndices * sizeof(WORD),
                        LockFlags,
                        DecodeHResult(hr),
                        hr
                    );
                    fRet = FALSE;
                    continue;
                }

                szLastCall = TEXT("IB mem copy");
                for( UINT iIndex = 0; iIndex < (UINT)m_shape2.m_nIndices; iIndex++ )
                {
                    ((WORD*)pbObject)[iIndex] = m_shape2.m_pIndices[iIndex] + m_shape.m_nVertices;
                }

                szLastCall = TEXT("IB->Unlock()");
                hr = (*ppIB)->Unlock();
                if( FAILED(hr) )
                {
                    WriteToLog(
                        TEXT("IB::Unlock() returned %s (0x%x)\n"),
                        DecodeHResult(hr),
                        hr
                    );
                    fRet = FALSE;
                    continue;
                }
            }
        }
/*
        catch(...)
        {
            WriteToLog(
                TEXT("%s caused unhandled exception\n"),
                szLastCall
            );
            fRet = FALSE;
        }
*/
    }
    while(0);

    if( !fRet )
    {
        return(fRet);
    }
 

    pDevice->Clear( 0, NULL, D3DCLEAR_TARGET, D3DCOLOR_XRGB(0x00, 0x00, 0x00), 0.0f, 0 );

    // Begin the scene
    if( SUCCEEDED( pDevice->BeginScene() ) )
    {
        do
        {
//            try
            {
                szLastCall = TEXT("SetVertexShader()");
                hr = pDevice->SetVertexShader( D3DFVF_VERTEX );
                if( FAILED(hr) )
                {
                    WriteToLog(
                        TEXT("SetVertexShader(D3DFVF_VERTEX) returned %s (0x%x)\n"),
                        DecodeHResult(hr),
                        hr
                    );
                    fRet = FALSE;
                    continue;
                }

                if( Test->fDraw1 )  // draw first opject
                {
                    szLastCall = TEXT("DrawIndexedPrimitive(1)");
                    hr = pDevice->DrawIndexedPrimitive(
                        D3DPT_TRIANGLELIST,
                        0,
                        m_shape.m_nVertices,
                        0,
                        m_shape.m_nIndices / 3
                    );
                    if( FAILED(hr) )
                    {
                        WriteToLog(
                            TEXT("DrawIndexedPrimitive() returned %s (0x%x)\n"),
                            DecodeHResult(hr),
                            hr
                        );
                        fRet = FALSE;
                        continue;
                    }
                }

                if( Test->fDraw2 )  // draw second object
                {
                    szLastCall = TEXT("DrawIndexedPrimitive(2)");
                    hr = pDevice->DrawIndexedPrimitive(
                        D3DPT_TRIANGLELIST,
                        m_shape.m_nVertices,
                        m_shape2.m_nVertices,
                        m_shape.m_nIndices,
                        m_shape2.m_nIndices / 3
                    );
                    if( FAILED(hr) )
                    {
                        WriteToLog(
                            TEXT("DrawIndexedPrimitive() returned %s (0x%x)\n"),
                            DecodeHResult(hr),
                            hr
                        );
                        fRet = FALSE;
                        continue;
                    }
                }
            }
/*
            catch(...)
            {
                WriteToLog(
                    TEXT("%s caused unhandled exception\n"),
                    szLastCall
                );
                fRet = FALSE;
            }
*/
        }
        while(0);  // execute once, so continue can bust out

        // End the scene.
        hr = pDevice->EndScene();
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("EndScene() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
        }
    }


    return(fRet);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\VBIB\LockPointerAlias.cpp ===
//
//  LockPointerAlias.cpp
//

#include "LockPointerAlias.h"



// create instance of this class
GROUP_CREATE(LockPointerAlias);



//-----------------------------------------------------------------------------
// Constructor / Destructor
//-----------------------------------------------------------------------------

LockPointerAlias::LockPointerAlias()
{
    m_szTestName = _T("Lock Pointer Alias");
    m_szCommandKey = _T("LockPointerAlias");

    m_ModeOptions.fReference = false;
    m_ModeOptions.fRefEqualsSrc = false;
    m_ModeOptions.fTextures = false;
    m_ModeOptions.fZBuffer = false;
	m_ModeOptions.bSWDevices = true;
	m_ModeOptions.bHWDevices = true;
    m_ModeOptions.dwDeviceTypes = DEVICETYPE_ALL;
    m_ModeOptions.dwWinMode = WINMODE_FULLSCREEN;
    m_ModeOptions.uMinDXVersion = 0x700;
    m_ModeOptions.uMaxDXVersion = 0x800;
    m_ModeOptions.bFlipVersions = false;
}

//-----------------------------------------------------------------------------
// Member Functions
//-----------------------------------------------------------------------------

UINT LockPointerAlias::TestInitialize()
{
    if( m_dwVersion == 0x800 )
    {
        return(TestInitialize8());
    }
    else if( m_dwVersion == 0x700 )
    {
        return(TestInitialize7());
    }
    else
    {
        return(0);
    }
}

//-----------------------------------------------------------------------------

bool
LockPointerAlias::ExecuteTest
(
    UINT nTest
)
{
    if( m_dwVersion == 0x800 )
    {
        return(ExecuteTest8(nTest));
    }
    else if( m_dwVersion == 0x700 )
    {
        return(ExecuteTest7(nTest));
    }
    else
    {
        return(false);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\VBIB\modulex.h ===
#define PREPEND_MODULE(Suffix) vbib##Suffix
#define MODULE_STRING "vbib"
#pragma comment(linker, "/include:_vbib_ExhibitScene@8")
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\VBIB\NormalBuffer.cpp ===
//
//  NormalBuffer.cpp
//
//  normal vb/ib rendering tests.
//
//  ---------------------------------------------------------------------------
//
//  Copyright (C) 2000 Microsoft Corporation.
//
//

#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "cshapes.h"
#include "CVertexIndexBufferTest.h"



//#define SWPUREDEVICEHACK



//-----------------------------------------------------------------------------
// Constructor / Destructor
//-----------------------------------------------------------------------------

NormalBuffer::NormalBuffer()
{
    m_szTestName = _T("Normal Buffer");
    m_szCommandKey = _T("NormalBuffer");
}

//-----------------------------------------------------------------------------
// Member Functions
//-----------------------------------------------------------------------------

UINT NormalBuffer::TestInitialize()
{

    m_pD3D =  m_pDisplay->GetDirect3D8();
/*
    if( m_pD3D8 && m_pSrcDevice8 && m_pRefDevice8 )
    {
        m_pD3D =  m_pD3D8;
        m_pDevice = m_pSrcDevice8;
        m_pRefDevice = m_pRefDevice8;
    }
    else
	{
		WriteToLog(_T("TestInitialize() - Framework devices == NULL\n"));
        return D3DTESTINIT_ABORT;
	}
*/

    // set the test range
    ExecuteTest( (UINT)(-1) );


    if (!m_shape.NewShape( CS_SPHERE, 10 )) {
        return D3DTESTINIT_ABORT;
    }


    UINT uiRet;

    uiRet = TestInitReal(
        m_pDevice
    );
    if( uiRet != D3DTESTINIT_RUN )
    {
        return( uiRet );
    }

/*
    uiRet = TestInitReal(
        m_pRefDevice
    );
    if( uiRet != D3DTESTINIT_RUN )
    {
        return( uiRet );
    }
*/
    return D3DTESTINIT_RUN;
}

//-----------------------------------------------------------------------------

bool
NormalBuffer::ExecuteTest
(
    UINT nTest
)
{

    static const UINT Usages[] =
    {
        NULL,
        D3DUSAGE_WRITEONLY,
        D3DUSAGE_DONOTCLIP,
        D3DUSAGE_POINTS,
        D3DUSAGE_RTPATCHES,
        D3DUSAGE_NPATCHES,
//        D3DUSAGE_DYNAMIC,
        D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_POINTS | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_RTPATCHES | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_NPATCHES | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_POINTS | D3DUSAGE_RTPATCHES | D3DUSAGE_NPATCHES,
//        D3DUSAGE_WRITEONLY | D3DUSAGE_DYNAMIC,
//        D3DUSAGE_DONOTCLIP | D3DUSAGE_DYNAMIC,
//        D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP | D3DUSAGE_DYNAMIC,
//        D3DUSAGE_SOFTWAREPROCESSING,
//        D3DUSAGE_SOFTWAREPROCESSING | D3DUSAGE_WRITEONLY,
//        D3DUSAGE_SOFTWAREPROCESSING | D3DUSAGE_DONOTCLIP,
//        D3DUSAGE_SOFTWAREPROCESSING | D3DUSAGE_POINTS,
//        D3DUSAGE_SOFTWAREPROCESSING | D3DUSAGE_RTPATCHES,
//        D3DUSAGE_SOFTWAREPROCESSING | D3DUSAGE_NPATCHES,
//        D3DUSAGE_SOFTWAREPROCESSING | D3DUSAGE_DYNAMIC,
//        D3DUSAGE_SOFTWAREPROCESSING | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
//        D3DUSAGE_SOFTWAREPROCESSING | D3DUSAGE_POINTS | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
//        D3DUSAGE_SOFTWAREPROCESSING | D3DUSAGE_RTPATCHES | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
//        D3DUSAGE_SOFTWAREPROCESSING | D3DUSAGE_NPATCHES | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
 //       D3DUSAGE_SOFTWAREPROCESSING | D3DUSAGE_POINTS | D3DUSAGE_RTPATCHES | D3DUSAGE_NPATCHES,
//        D3DUSAGE_SOFTWAREPROCESSING | D3DUSAGE_WRITEONLY | D3DUSAGE_DYNAMIC,
//        D3DUSAGE_SOFTWAREPROCESSING | D3DUSAGE_DONOTCLIP | D3DUSAGE_DYNAMIC,
//        D3DUSAGE_SOFTWAREPROCESSING | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP | D3DUSAGE_DYNAMIC,
#ifdef D3DUSAGE_LOADONCE
        D3DUSAGE_LOADONCE,
        D3DUSAGE_LOADONCE | D3DUSAGE_WRITEONLY,
        D3DUSAGE_LOADONCE | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_LOADONCE | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
#endif
    };

    static const D3DPOOL Pools[] =
    {
        POOL_DEFAULT
//        D3DPOOL_DEFAULT,
//        D3DPOOL_MANAGED,
//        D3DPOOL_SYSTEMMEM,
    };

    typedef union __TESTCASE
    {
        struct
        {
            UINT Pool : 3;
            UINT Usage : 6;
        };
        UINT nTest;

    } TESTCASE, *LPTESTCASE;

    static const TESTCASE tcCount =
    {
        COUNTOF(Pools),
        COUNTOF(Usages)
    };


    TESTCASE tc;
    tc.nTest = (nTest - 1);

    if( nTest == (UINT)(-1) )
    {
        ClearRangeList();

        tc.nTest = 0;
        for( tc.Usage = 0; tc.Usage < tcCount.Usage; tc.Usage++ )
        {
            for( tc.Pool = 0; tc.Pool < tcCount.Pool; tc.Pool++ )
            {
                AddTestRange( (tc.nTest + 1), (tc.nTest + 1) );
            }
        }

        return( FALSE );
    }

    if( (tc.Usage >= tcCount.Usage) ||
        (tc.Pool >= tcCount.Pool)  )
    {
        WriteToLog(
            TEXT("No such test (%d)\n"),
            nTest
        );

        return(FALSE);
    }


    TCHAR sz[256];

    wsprintf( sz,
        TEXT("Usage = 0x%x, Pool = %d"),
        Usages[tc.Usage],
        Pools[tc.Pool]
    );

    D3DTEST_NORMALBUFFER curtest;

    curtest.szName = TEXT("");
    curtest.shape = &m_shape;
#ifdef SWPUREDEVICEHACK
    curtest.VBFVF = D3DFVF_TLVERTEX;
#else
    curtest.VBFVF = D3DFVF_VERTEX;
#endif
    curtest.IBFormat = D3DFMT_INDEX16;
    curtest.Usage = Usages[tc.Usage];
    curtest.Pool = Pools[tc.Pool];


    // skip buffer if not valid
    DWORD dwSW = FALSE;
//    if( m_pAdapter->Devices[m_pMode->nSrcDevice].dwBehaviorFlags & D3DCREATE_MIXED_VERTEXPROCESSING )
//    {
//        m_pDevice->GetRenderState( D3DRS_SOFTWAREVERTEXPROCESSING, &dwSW );
//    }

/*
    if(
        (  // dynamic is valid on managed buffers
            (curtest.Usage & D3DUSAGE_DYNAMIC) &&
            (curtest.Pool == D3DPOOL_MANAGED)
        ) ||
        (  // software usage is not valid on hardware device
            (curtest.Usage & D3DUSAGE_SOFTWAREPROCESSING) &&
            (m_pAdapter->Devices[m_pMode->nSrcDevice].dwBehaviorFlags & D3DCREATE_HARDWARE_VERTEXPROCESSING)
        ) ||
        (  // software usage is required on mixed device with SW renderstate when pool is not sysmem
            !(curtest.Usage & D3DUSAGE_SOFTWAREPROCESSING) &&
            (m_pAdapter->Devices[m_pMode->nSrcDevice].dwBehaviorFlags & D3DCREATE_MIXED_VERTEXPROCESSING) &&
            dwSW &&
            (curtest.Pool != D3DPOOL_SYSTEMMEM)
        )
    )
    {
        return(FALSE);
    }
*/

    ClearFrame();

    BeginTestCase( sz, nTest );

    BOOL bRetTest;
    BOOL bRetRef;

    bRetTest = ExecuteReal(
        m_pDevice,
        &curtest,
        FALSE
    );

/*
    bRetRef = ExecuteReal(
        m_pRefDevice,
        &curtest,
        TRUE
    );
*/

    bool bRet = (bRetTest == TRUE);// && bRetRef;
    if( !bRet )
    {
        Fail();
    }

    return( bRet );
}



UINT
NormalBuffer::TestInitReal
(
    CDevice8* pDevice
)
{

    HRESULT hr;


    // Set the magic matricies
    D3DMATRIX matView =
    {
        1.0f,    0,       0,       0,
        0,       1.0f,    0,       0,
        0,       0,       1.0f,    0,
        0,       0,       2.0f,/*10.0f,*/   1.0f
    };
    pDevice->SetTransform( D3DTS_VIEW, &matView );

    D3DMATRIX matProj =
    {
        2.0f,    0,       0,       0,
        0,       2.0f,    0,       0,
        0,       0,       1.0f,    1.0f,
        0,       0,       -1.0f,   0.0f
    };
    pDevice->SetTransform( D3DTS_PROJECTION, &matProj );

    // Set appropiate states
    pDevice->SetRenderState( D3DRS_AMBIENT, D3DCOLOR_XRGB( 0xff, 0xff, 0xff ) );
    pDevice->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );
    pDevice->SetRenderState( D3DRS_SRCBLEND, D3DBLEND_ONE );
    pDevice->SetRenderState( D3DRS_DESTBLEND, D3DBLEND_ONE );
#ifndef UNDER_XBOX
    pDevice->SetRenderState( D3DRS_CLIPPING, FALSE );
#endif

    D3DXMATRIX d3dMat;
    D3DXMATRIX d3dMatOut;

    D3DMATRIX matWorld =
    {
        1.0f,    0,       0,       0,
        0,       1.0f,    0,       0,
        0,       0,       1.0f,    0,
        0,       0,       0,       1.0f
    };

    d3dMat = matWorld;

    D3DXMatrixMultiply(
        &d3dMatOut,
        &d3dMat,
        D3DXMatrixRotationY( &d3dMatOut, 2.0f )
    );

    d3dMat = d3dMatOut;

    D3DXMatrixMultiply(
        &d3dMatOut,
        &d3dMat,
        D3DXMatrixRotationZ( &d3dMatOut, 0.40f )
    );

    d3dMat = d3dMatOut;

    D3DXMatrixMultiply(
        &d3dMatOut,
        &d3dMat,
        D3DXMatrixRotationX( &d3dMatOut, 2.0f )
    );

    d3dMat = d3dMatOut;

    hr = pDevice->SetTransform(
        D3DTS_WORLD,
        &d3dMat
    );
    if( FAILED(hr) )
    {
        WriteToLog(
            TEXT("SetTransform() returned %s (0x%x)\n"),
            DecodeHResult(hr),
            hr
        );
        return(D3DTESTINIT_ABORT);
    }


    D3DMATERIAL8 mtrl =
    {
        { 1.0f, 0.0f, 0.0f, 0.0f },  // diffuse
        { 0.0f, 0.3f, 0.0f, 0.5f },  // ambient
        { 1.0f, 0.0f, 0.0f, 0.0f },	 // specular
        { 0.0f, 0.0f, 0.0f, 0.0f },	 // emissive
        0.0f  // sharpness (for specular)
    };

    hr = pDevice->SetMaterial(
        &mtrl
    );
    if( FAILED(hr) )
    {
        WriteToLog(
            TEXT("SetMaterial() returned %s (0x%x)\n"),
            DecodeHResult(hr),
            hr
        );
        return(D3DTESTINIT_ABORT);
    }


    return(D3DTESTINIT_RUN);
}



BOOL
NormalBuffer::ExecuteReal
(
    CDevice8* pDevice,
    const D3DTEST_NORMALBUFFER *lpBufInfo,
    BOOL fRef
)
{

    HRESULT hr = D3D_OK;
    CVertexBuffer8* pVB = NULL;
    CIndexBuffer8* pIB = NULL;
    LPBYTE pbObject = NULL;
    BOOL fRet = TRUE;

#if 0
    DWORD Usage = lpBufInfo->Usage;


    // strip sw usage for ref device
    if( fRef )
    {
        Usage = Usage & (!D3DUSAGE_SOFTWAREPROCESSING);
    }
#endif

    do
    {
        hr = pDevice->CreateVertexBuffer(
            lpBufInfo->shape->m_nVertices * sizeof(D3DVERTEX),
            lpBufInfo->Usage,
            lpBufInfo->VBFVF,
            lpBufInfo->Pool,
            &pVB
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("CreateVertexBuffer(%d,0x%x,0x%x,%d,) failed, returned %s (0x%x)\n"),
                lpBufInfo->shape->m_nVertices * sizeof(D3DVERTEX),
                lpBufInfo->Usage,
                lpBufInfo->VBFVF,
                lpBufInfo->Pool,
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

        hr = pVB->Lock(
            0,
            lpBufInfo->shape->m_nVertices * sizeof(D3DVERTEX),
            &pbObject,
            0
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("Lock() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

#ifdef SWPUREDEVICEHACK
        {
            D3DTLVERTEX *pdata = (D3DTLVERTEX*)pbObject;

            pdata[0].sx = 0.0f;
            pdata[0].sy = 0.0f;
            pdata[0].sz = 0.0f;
            pdata[0].rhw = 1.0f;
            pdata[0].color = D3DCOLOR_ARGB( 0x40, 0x40, 0x40, 0x40 );
            pdata[0].specular = 0.0f;
            pdata[0].tu = 0.0f;
            pdata[0].tv = 0.0f;

            pdata[1].sx = 500.0f;
            pdata[1].sy = 0.0f;
            pdata[1].sz = 0.0f;
            pdata[1].rhw = 1.0f;
            pdata[1].color = D3DCOLOR_ARGB( 0x40, 0x40, 0x40, 0x40 );
            pdata[1].specular = 0.0f;
            pdata[1].tu = 0.0f;
            pdata[1].tv = 0.0f;

            pdata[2].sx = 0.0f;
            pdata[2].sy = 500.0f;
            pdata[2].sz = 0.0f;
            pdata[2].rhw = 1.0f;
            pdata[2].color = D3DCOLOR_ARGB( 0x40, 0x40, 0x40, 0x40 );
            pdata[2].specular = 0.0f;
            pdata[2].tu = 0.0f;
            pdata[2].tv = 0.0f;
        }
#else
        CopyMemory( pbObject, lpBufInfo->shape->m_pVertices, lpBufInfo->shape->m_nVertices * sizeof(D3DVERTEX) );
#endif

        hr = pVB->Unlock();
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("Unlock() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

        hr = pDevice->SetStreamSource(
            0,
            pVB,
            sizeof(D3DVERTEX)
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("SetStreamSource() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }


        hr = pDevice->CreateIndexBuffer(
            lpBufInfo->shape->m_nIndices * sizeof(WORD),
            lpBufInfo->Usage,
            lpBufInfo->IBFormat,
            lpBufInfo->Pool,
            &pIB
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("CreateIndexBuffer(%d,0x%x,%d,%d,) failed, returned %s (0x%x)\n"),
                lpBufInfo->shape->m_nIndices * sizeof(WORD),
                lpBufInfo->Usage,
                lpBufInfo->IBFormat,
                lpBufInfo->Pool,
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

        hr = pIB->Lock(
            0,
            lpBufInfo->shape->m_nIndices * sizeof(WORD),
            &pbObject,
            0
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("Lock() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

#ifdef SWPUREDEVICEHACK
        {
            PWORD pdata = (PWORD)pbObject;

            pdata[0] = 0;
            pdata[1] = 1;
            pdata[2] = 2;
        }
#else
        CopyMemory( pbObject, lpBufInfo->shape->m_pIndices, lpBufInfo->shape->m_nIndices * sizeof(WORD) );
#endif

        hr = pIB->Unlock();
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("Unlock() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

        hr = pDevice->SetIndices(
            pIB,
            0
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("SetIndices() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }


#ifdef SWPUREDEVICEHACK
        hr = pDevice->SetVertexShader( D3DFVF_TLVERTEX );
#else
        hr = pDevice->SetVertexShader( D3DFVF_VERTEX );
#endif
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("SetVertexShader() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

    } while(0);


    if( !fRet )
    {
        RELEASE(pIB);
        RELEASE(pVB);
        return(fRet);
    }

    pDevice->Clear( 0, NULL, D3DCLEAR_TARGET, D3DCOLOR_XRGB(0x00, 0x00, 0x00), 0.0f, 0 );

    // Begin the scene
    if( SUCCEEDED( pDevice->BeginScene() ) )
    {
        hr = pDevice->DrawIndexedPrimitive(
            D3DPT_TRIANGLELIST,
#ifdef SWPUREDEVICEHACK
            0,
            3,
            0,
            1
#else
            0,
            lpBufInfo->shape->m_nVertices,
            0,
            lpBufInfo->shape->m_nIndices / 3
#endif
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("DrawIndexedPrimitive() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
        }

        // End the scene.
        hr = pDevice->EndScene();
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("EndScene() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
        }
    }

    RELEASE(pIB);
    RELEASE(pVB);

    return(fRet);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\VBIB\MultipleLocks.cpp ===
//
//  MultipleLocks.cpp
//
//  lock selected vertex/index buffer tests.
//
//  ---------------------------------------------------------------------------
//
//  Copyright (C) 2000 Microsoft Corporation.
//
//

#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "cshapes.h"
#include "CVertexIndexBufferTest.h"



//-----------------------------------------------------------------------------
// Constructor / Destructor
//-----------------------------------------------------------------------------

MultipleLocks::MultipleLocks()
{
    m_szTestName = _T("Multiple Locks");
    m_szCommandKey = _T("MultipleLocks");
}

//-----------------------------------------------------------------------------
// Member Functions
//-----------------------------------------------------------------------------

UINT MultipleLocks::TestInitialize()
{

    m_pD3D = m_pDisplay->GetDirect3D8();
/*
    if( m_pD3D8 && m_pSrcDevice8 && m_pRefDevice8 )
    {
        m_pD3D =  m_pD3D8;
        m_pDevice = m_pSrcDevice8;
        m_pRefDevice = m_pRefDevice8;
    }
    else
	{
		WriteToLog(_T("TestInitialize() - Framework devices == NULL\n"));
        return D3DTESTINIT_ABORT;
	}
*/

    // set the test range
    ExecuteTest( (UINT)(-1) );


    if (!m_shape.NewShape( CS_SPHERE, 10 )) {
        return D3DTESTINIT_ABORT;
    }


    UINT uiRet;

    uiRet = TestInitReal(
        m_pDevice
    );
    if( uiRet != D3DTESTINIT_RUN )
    {
        return( uiRet );
    }

/*
    uiRet = TestInitReal(
        m_pRefDevice
    );
    if( uiRet != D3DTESTINIT_RUN )
    {
        return( uiRet );
    }
*/
    return D3DTESTINIT_RUN;
}

//-----------------------------------------------------------------------------

bool
MultipleLocks::ExecuteTest
(
    UINT nTest
)
{

    static const UINT Usages[] =
    {
        NULL,
        D3DUSAGE_WRITEONLY,
        D3DUSAGE_DONOTCLIP,
        D3DUSAGE_POINTS,
        D3DUSAGE_RTPATCHES,
        D3DUSAGE_NPATCHES,
//        D3DUSAGE_DYNAMIC,
        D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_POINTS | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_RTPATCHES | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_NPATCHES | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_POINTS | D3DUSAGE_RTPATCHES | D3DUSAGE_NPATCHES,
//        D3DUSAGE_WRITEONLY | D3DUSAGE_DYNAMIC,
//        D3DUSAGE_DONOTCLIP | D3DUSAGE_DYNAMIC,
//        D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP | D3DUSAGE_DYNAMIC,
    };

    static const D3DPOOL Pools[] =
    {
        POOL_DEFAULT
//        D3DPOOL_DEFAULT,
//        D3DPOOL_MANAGED,
//        D3DPOOL_SYSTEMMEM,
    };

    static const UINT LockFlags[] =
    {
        NULL,
//        D3DLOCK_DISCARD,
        D3DLOCK_NOOVERWRITE,
//        D3DLOCK_NOSYSLOCK,
//        D3DLOCK_DISCARD|D3DLOCK_NOOVERWRITE,
//        D3DLOCK_DISCARD|D3DLOCK_NOSYSLOCK,
//        D3DLOCK_NOOVERWRITE|D3DLOCK_NOSYSLOCK,
//        D3DLOCK_DISCARD|D3DLOCK_NOOVERWRITE|D3DLOCK_NOSYSLOCK,
    };


    typedef union __TESTCASE
    {
        struct
        {
            UINT LockFlag : 6;
            UINT Pool : 3;
            UINT Usage : 5;
        };
        UINT nTest;

    } TESTCASE, *LPTESTCASE;

    static const TESTCASE tcCount =
    {
        COUNTOF(LockFlags),
        COUNTOF(Pools),
        COUNTOF(Usages)
    };


    TESTCASE tc;
    tc.nTest = (nTest - 1);

    if( nTest == (UINT)(-1) )
    {
        ClearRangeList();

        tc.nTest = 0;
        for( tc.Usage = 0; tc.Usage < tcCount.Usage; tc.Usage++ )
        {
            for( tc.Pool = 0; tc.Pool < tcCount.Pool; tc.Pool++ )
            {
                for( tc.LockFlag = 0; tc.LockFlag < tcCount.LockFlag; tc.LockFlag++ )
                {
                    AddTestRange( (tc.nTest + 1), (tc.nTest + 1) );
                }
            }
        }

        return( FALSE );
    }

    if( (tc.Usage >= tcCount.Usage) ||
        (tc.Pool >= tcCount.Pool) ||
        (tc.LockFlag >= tcCount.LockFlag )  )
    {
        WriteToLog(
            TEXT("No such test (%d)\n"),
            nTest
        );

        return(FALSE);
    }

/*
    if( (Usages[tc.Usage] & D3DUSAGE_DYNAMIC) && (Pools[tc.Pool] == D3DPOOL_MANAGED) )
    {
        return(FALSE);
    }
*/

    ClearFrame();


    TCHAR sz[256];

    wsprintf( sz,
        TEXT("Usage = 0x%x, Pool = %d, LockFlags = 0x%x"),
        Usages[tc.Usage],
        Pools[tc.Pool],
        LockFlags[tc.LockFlag]
    );

    BeginTestCase( sz, nTest );


    BOOL bRetTest;
    BOOL bRetRef;

    bRetTest = ExecuteReal(
        m_pDevice,
        Usages[tc.Usage],
        Pools[tc.Pool],
        LockFlags[tc.LockFlag],
        false
//        (m_pAdapter->Devices[m_pMode->nSrcDevice].dwBehaviorFlags & D3DCREATE_MIXED_VERTEXPROCESSING)
    );

/*
    bRetRef = ExecuteReal(
        m_pRefDevice,
        Usages[tc.Usage],
        Pools[tc.Pool],
        LockFlags[tc.LockFlag],
        (m_pAdapter->Devices[m_pMode->nRefDevice].dwBehaviorFlags & D3DCREATE_MIXED_VERTEXPROCESSING)
    );
*/

    bool bRet = (bRetTest == TRUE);// && bRetRef;
    if( !bRet )
    {
        Fail();
    }

    return( bRet );
}



UINT
MultipleLocks::TestInitReal
(
    CDevice8* pDevice
)
{

    HRESULT hr;


    // Set the magic matricies
    D3DMATRIX matView =
    {
        1.0f,    0,       0,       0,
        0,       1.0f,    0,       0,
        0,       0,       1.0f,    0,
        0,       0,       2.0f,/*10.0f,*/   1.0f
    };
    pDevice->SetTransform( D3DTS_VIEW, &matView );

    D3DMATRIX matProj =
    {
        2.0f,    0,       0,       0,
        0,       2.0f,    0,       0,
        0,       0,       1.0f,    1.0f,
        0,       0,       -1.0f,   0.0f
    };
    pDevice->SetTransform( D3DTS_PROJECTION, &matProj );

    // Set appropiate states
    pDevice->SetRenderState( D3DRS_AMBIENT, D3DCOLOR_XRGB( 0xff, 0xff, 0xff ) );
    pDevice->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );
    pDevice->SetRenderState( D3DRS_SRCBLEND, D3DBLEND_ONE );
    pDevice->SetRenderState( D3DRS_DESTBLEND, D3DBLEND_ONE );
#ifndef UNDER_XBOX
    pDevice->SetRenderState( D3DRS_CLIPPING, FALSE );
#endif

    D3DXMATRIX d3dMat;
    D3DXMATRIX d3dMatOut;

    D3DMATRIX matWorld =
    {
        1.0f,    0,       0,       0,
        0,       1.0f,    0,       0,
        0,       0,       1.0f,    0,
        0,       0,       0,       1.0f
    };

    d3dMat = matWorld;

    D3DXMatrixMultiply(
        &d3dMatOut,
        &d3dMat,
        D3DXMatrixRotationY( &d3dMatOut, 2.0f )
    );

    d3dMat = d3dMatOut;

    D3DXMatrixMultiply(
        &d3dMatOut,
        &d3dMat,
        D3DXMatrixRotationZ( &d3dMatOut, 0.40f )
    );

    d3dMat = d3dMatOut;

    D3DXMatrixMultiply(
        &d3dMatOut,
        &d3dMat,
        D3DXMatrixRotationX( &d3dMatOut, -0.46f )
    );

    d3dMat = d3dMatOut;

    hr = pDevice->SetTransform(
        D3DTS_WORLD,
        &d3dMat
    );
    if( FAILED(hr) )
    {
        WriteToLog(
            TEXT("SetTransform() returned %s (0x%x)\n"),
            DecodeHResult(hr),
            hr
        );
        return(D3DTESTINIT_ABORT);
    }


    D3DMATERIAL8 mtrl =
    {
        { 0.8f, 0.0f, 0.0f, 0.0f },  // diffuse
        { 0.0f, 0.3f, 0.0f, 0.5f },  // ambient
        { 0.0f, 0.0f, 1.0f, 0.0f },	 // specular
        { 0.0f, 0.0f, 0.0f, 0.0f },	 // emissive
        0.0f  // sharpness (for specular)
    };

    hr = pDevice->SetMaterial(
        &mtrl
    );
    if( FAILED(hr) )
    {
        WriteToLog(
            TEXT("SetMaterial() returned %s (0x%x)\n"),
            DecodeHResult(hr),
            hr
        );
        return(D3DTESTINIT_ABORT);
    }


    return(D3DTESTINIT_RUN);
}



BOOL
MultipleLocks::ExecuteReal
(
    CDevice8* pDevice,
    DWORD Usage,
    D3DPOOL Pool,
    DWORD LockFlags,
    BOOL fMixedMode
)
{
    HRESULT hr = D3D_OK;
    BOOL fRet = TRUE;

    LPBYTE pbObject = NULL;
    CVertexBuffer8* pVB = NULL;
    CIndexBuffer8* pIB = NULL;

    do
    {
        BOOL fSoftwareUsage = FALSE;

        // determine sw usage
        if( fMixedMode )
        {
//            DWORD dwSW;
//            pDevice->GetRenderState( D3DRS_SOFTWAREVERTEXPROCESSING, &dwSW );
//            fSoftwareUsage = dwSW;
        }


        // create buffers
        hr = pDevice->CreateVertexBuffer(
            m_shape.m_nVertices * sizeof(D3DVERTEX),
            Usage ^ (fSoftwareUsage ? D3DUSAGE_SOFTWAREPROCESSING : NULL),
            D3DFVF_VERTEX,
            Pool,
            &pVB
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("CreateVertexBuffer(%d,0x%x,0x%x,%d,) failed, returned %s (0x%x)\n"),
                m_shape.m_nVertices * sizeof(D3DVERTEX),
                Usage ^ (fSoftwareUsage ? D3DUSAGE_SOFTWAREPROCESSING : NULL),
                D3DFVF_VERTEX,
                Pool,
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

        hr = pDevice->CreateIndexBuffer(
            m_shape.m_nIndices * sizeof(WORD),
            Usage ^ (fSoftwareUsage ? D3DUSAGE_SOFTWAREPROCESSING : NULL),
            D3DFMT_INDEX16,
            Pool,
            &pIB
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("CreateIndexBuffer(%d,0x%x,%d,%d,) failed, returned %s (0x%x)\n"),
                m_shape.m_nIndices * sizeof(WORD),
                Usage ^ (fSoftwareUsage ? D3DUSAGE_SOFTWAREPROCESSING : NULL),
                D3DFMT_INDEX16,
                Pool,
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }


        // setup streams
        hr = pDevice->SetStreamSource(
            0,
            pVB,
            sizeof(D3DVERTEX)
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("SetStreamSource() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

        hr = pDevice->SetIndices(
            pIB,
            0
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("SetIndices() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

        hr = pDevice->SetVertexShader( D3DFVF_VERTEX );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("SetVertexShader(D3DFVF_VERTEX) returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }
    }
    while(0);

    if( !fRet )
    {
        return(fRet);
    }


    pDevice->Clear( 0, NULL, D3DCLEAR_TARGET, D3DCOLOR_XRGB(0x00, 0x00, 0x00), 0.0f, 0 );

    // Begin the scene
    if( SUCCEEDED( pDevice->BeginScene() ) )
    {
        do
        {
            // lock buffers mutiple times
            for( INT iIndex = 0; iIndex < 10; iIndex++ )
            {
                pbObject = NULL;
                hr = pVB->Lock(
                    0,
                    m_shape.m_nVertices * sizeof(D3DVERTEX),
                    &pbObject,
                    LockFlags
                );
                if( FAILED(hr) )
                {
                    WriteToLog(
                        TEXT("VB::Lock(0,%d,,0x%x) returned %s (0x%x)\n"),
                        m_shape.m_nVertices * sizeof(D3DVERTEX),
                        LockFlags,
                        DecodeHResult(hr),
                        hr
                    );
                    fRet = FALSE;
                    continue;
                }
                else if( pbObject == NULL )
                {
                    WriteToLog(
                        TEXT("VB::Lock(0,%d,,0x%x) returned %s (0x%x) but pointer was NULL\n"),
                        m_shape.m_nVertices * sizeof(D3DVERTEX),
                        LockFlags,
                        DecodeHResult(hr),
                        hr
                    );
                    fRet = FALSE;
                    continue;
                }


                CopyMemory( pbObject, m_shape.m_pVertices, m_shape.m_nVertices * sizeof(D3DVERTEX) );

                hr = pVB->Unlock();
                if( FAILED(hr) )
                {
                    WriteToLog(
                        TEXT("VB::Unlock() returned %s (0x%x)\n"),
                        DecodeHResult(hr),
                        hr
                    );
                    fRet = FALSE;
                    continue;
                }


                pbObject = NULL;
                hr = pIB->Lock(
                    0,
                    m_shape.m_nIndices * sizeof(WORD),
                    &pbObject,
                    LockFlags
                );
                if( FAILED(hr) )
                {
                    WriteToLog(
                        TEXT("IB::Lock(0,%d,,0x%x) returned %s (0x%x)\n"),
                        m_shape.m_nIndices * sizeof(WORD),
                        LockFlags,
                        DecodeHResult(hr),
                        hr
                    );
                    fRet = FALSE;
                    continue;
                }
                else if( pbObject == NULL )
                {
                    WriteToLog(
                        TEXT("IB::Lock(0,%d,,0x%x) returned %s (0x%x) but pointer was NULL\n"),
                        m_shape.m_nIndices * sizeof(WORD),
                        LockFlags,
                        DecodeHResult(hr),
                        hr
                    );
                    fRet = FALSE;
                    continue;
                }

                CopyMemory( pbObject, m_shape.m_pIndices, m_shape.m_nIndices * sizeof(WORD) );

                hr = pIB->Unlock();
                if( FAILED(hr) )
                {
                    WriteToLog(
                        TEXT("IB::Unlock() returned %s (0x%x)\n"),
                        DecodeHResult(hr),
                        hr
                    );
                    fRet = FALSE;
                    continue;
                }
            }


            // draw opject
            hr = pDevice->DrawIndexedPrimitive(
                D3DPT_TRIANGLELIST,
                0,
                m_shape.m_nVertices,
                0,
                m_shape.m_nIndices / 3
            );
            if( FAILED(hr) )
            {
                WriteToLog(
                    TEXT("DrawIndexedPrimitive() returned %s (0x%x)\n"),
                    DecodeHResult(hr),
                    hr
                );
                fRet = FALSE;
                continue;
            }
        }
        while(0);

        hr = pDevice->EndScene();
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("EndScene() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
        }
    }


    RELEASE(pVB);
    RELEASE(pIB);


    return(fRet);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\VBIB\LostOnReset.cpp ===
//
//  LostOnReset.cpp
//
//  normal vb/ib rendering tests.
//
//  ---------------------------------------------------------------------------
//
//  Copyright (C) 2000 Microsoft Corporation.
//
//

#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "cshapes.h"
#include "CVertexIndexBufferTest.h"



extern CD3DWindowFramework   *g_pD3DFramework;



//-----------------------------------------------------------------------------
// Constructor / Destructor
//-----------------------------------------------------------------------------

LostOnReset::LostOnReset()
{
    m_szTestName = _T("Lost on Reset");
    m_szCommandKey = _T("LostOnReset");

    m_ModeOptions.fReference = false;

    m_pDevice = NULL;
    m_pRefDevice = NULL;
}

LostOnReset::~LostOnReset()
{
    RELEASE(m_pDevice);
}

//-----------------------------------------------------------------------------
// Member Functions
//-----------------------------------------------------------------------------

UINT LostOnReset::TestInitialize()
{

    m_pD3D = m_pDisplay->GetDirect3D8();
/*
    if( m_pD3D8 && m_pSrcDevice8 )
    {
        m_pD3D =  m_pD3D8;
    }
    else
	{
		WriteToLog(_T("TestInitialize() - Framework devices == NULL\n"));
        return D3DTESTINIT_ABORT;
	}
*/

    // set the test range
    ExecuteTest( (UINT)(-1) );


    if (!m_shape.NewShape( CS_SPHERE, 10 )) {
        return D3DTESTINIT_ABORT;
    }


    return D3DTESTINIT_RUN;
}

//-----------------------------------------------------------------------------

bool
LostOnReset::ExecuteTest
(
    UINT nTest
)
{

    static const UINT Usages[] =
    {
        NULL,
        D3DUSAGE_WRITEONLY,
        D3DUSAGE_DONOTCLIP,
        D3DUSAGE_POINTS,
        D3DUSAGE_RTPATCHES,
        D3DUSAGE_NPATCHES,
        D3DUSAGE_DYNAMIC,
        D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_POINTS | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_RTPATCHES | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_NPATCHES | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_POINTS | D3DUSAGE_RTPATCHES | D3DUSAGE_NPATCHES,
        D3DUSAGE_WRITEONLY | D3DUSAGE_DYNAMIC,
        D3DUSAGE_DONOTCLIP | D3DUSAGE_DYNAMIC,
        D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP | D3DUSAGE_DYNAMIC,
#ifdef D3DUSAGE_LOADONCE
        D3DUSAGE_LOADONCE,
        D3DUSAGE_LOADONCE | D3DUSAGE_WRITEONLY,
        D3DUSAGE_LOADONCE | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_LOADONCE | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
#endif
    };

    static const D3DPOOL Pools[] =
    {
        D3DPOOL_DEFAULT,
        D3DPOOL_MANAGED,
        D3DPOOL_SYSTEMMEM,
    };

    typedef union __TESTCASE
    {
        struct
        {
            UINT Pool : 3;
            UINT Usage : 5;
        };
        UINT nTest;

    } TESTCASE, *LPTESTCASE;

    static const TESTCASE tcCount =
    {
        COUNTOF(Pools),
        COUNTOF(Usages)
    };


    TESTCASE tc;
    tc.nTest = (nTest - 1);

    if( nTest == (UINT)(-1) )
    {
        ClearRangeList();

        tc.nTest = 0;
        for( tc.Usage = 0; tc.Usage < tcCount.Usage; tc.Usage++ )
        {
            for( tc.Pool = 0; tc.Pool < tcCount.Pool; tc.Pool++ )
            {
                AddTestRange( (tc.nTest + 1), (tc.nTest + 1) );
            }
        }

        return( FALSE );
    }

    if( (tc.Usage >= tcCount.Usage) ||
        (tc.Pool >= tcCount.Pool)  )
    {
        WriteToLog(
            TEXT("No such test (%d)\n"),
            nTest
        );

        return(FALSE);
    }

    if( (Usages[tc.Usage] & D3DUSAGE_DYNAMIC) && (Pools[tc.Pool] == D3DPOOL_MANAGED) )
    {
        return(FALSE);
    }

    ClearFrame();


    TCHAR sz[256];

    wsprintf( sz,
        TEXT("Usage = 0x%x, Pool = %d"),
        Usages[tc.Usage],
        Pools[tc.Pool]
    );

    BeginTestCase( sz, nTest );

    D3DTEST_NORMALBUFFER curtest;

    curtest.szName = TEXT("");
    curtest.shape = &m_shape;
    curtest.VBFVF = D3DFVF_VERTEX;
    curtest.IBFormat = D3DFMT_INDEX16;
    curtest.Usage = Usages[tc.Usage];
    curtest.Pool = Pools[tc.Pool];


    // initialize every test case because Reset() from previous test may fail
    UINT uiRet;

    uiRet = TestInitReal( &m_pDevice );
    if( uiRet != D3DTESTINIT_RUN )
    {
        Fail();
        return(FALSE);
    }


    BOOL bRetTest;

    bRetTest = ExecuteReal(
        m_pDevice,
        &curtest,
        (m_pAdapter->Devices[m_pMode->nSrcDevice].dwBehaviorFlags & D3DCREATE_MIXED_VERTEXPROCESSING)
    );

    if( !bRetTest )
    {
        Fail();
    }

    RELEASE(m_pDevice);

    return(FALSE);
}



UINT
LostOnReset::TestInitReal
(
    LPDIRECT3DDEVICE8 *ppDevice
)
{

    HRESULT hr;
    LPDIRECT3DDEVICE8 pDevice = NULL;
    D3DDISPLAYMODE Mode;


    m_pD3D->GetAdapterDisplayMode(m_pMode->nAdapter, &Mode);

    // Fill presentation m_SrcParameters
    m_SrcParam.BackBufferWidth = m_pMode->dwWidth;
    m_SrcParam.BackBufferHeight = m_pMode->dwHeight;
    m_SrcParam.BackBufferFormat = Mode.Format;
    m_SrcParam.BackBufferCount = 1;
    m_SrcParam.MultiSampleType = m_MultiSampleTypeList[m_pMode->nSrcMultiSampleType];
    m_SrcParam.SwapEffect = (m_SrcParam.MultiSampleType == D3DMULTISAMPLE_NONE) ? D3DSWAPEFFECT_COPY_VSYNC : D3DSWAPEFFECT_DISCARD;
    m_SrcParam.hDeviceWindow = g_pD3DFramework->m_DisplayWindow.m_hWindow;
    m_SrcParam.Windowed = m_pMode->fFullScreen ? FALSE : TRUE;
    m_SrcParam.EnableAutoDepthStencil = (m_pMode->nZBufferFormat == DISABLE_ZBUFFER) ? FALSE : TRUE;
    m_SrcParam.AutoDepthStencilFormat = (m_pMode->nZBufferFormat == DISABLE_ZBUFFER) ? D3DFMT_UNKNOWN : m_pCommonZBufferFormats[m_pMode->nZBufferFormat].d3dfFormat;
    m_SrcParam.Flags = 0;
    m_SrcParam.FullScreen_RefreshRateInHz = m_pMode->fFullScreen ? m_pMode->dwRefreshRate : 0;
    m_SrcParam.FullScreen_PresentationInterval = 0;


    // createdevice
    hr = m_pD3D->CreateDevice(
        m_pMode->nAdapter,
        m_pAdapter->Devices[m_pMode->nSrcDevice].DeviceType,
        g_pD3DFramework->m_DisplayWindow.m_hWindow,
        m_pAdapter->Devices[m_pMode->nSrcDevice].dwBehaviorFlags, 
        &m_SrcParam,
        ppDevice
    );
    if( FAILED(hr) )
    {
        WriteToLog(
            TEXT("CreateDevice() returned %s (0x%x)\n"),
            DecodeHResult(hr),
            hr
        );
        return(D3DTESTINIT_ABORT);
    }

    pDevice = *ppDevice;


    // Set the magic matricies
    D3DMATRIX matView =
    {
        1.0f,    0,       0,       0,
        0,       1.0f,    0,       0,
        0,       0,       1.0f,    0,
        0,       0,       2.0f,/*10.0f,*/   1.0f
    };
    pDevice->SetTransform( D3DTS_VIEW, &matView );

    D3DMATRIX matProj =
    {
        2.0f,    0,       0,       0,
        0,       2.0f,    0,       0,
        0,       0,       1.0f,    1.0f,
        0,       0,       -1.0f,   0.0f
    };
    pDevice->SetTransform( D3DTS_PROJECTION, &matProj );

    // Set appropiate states
    pDevice->SetRenderState( D3DRS_AMBIENT, D3DCOLOR_XRGB( 0xff, 0xff, 0xff ) );
    pDevice->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );
    pDevice->SetRenderState( D3DRS_SRCBLEND, D3DBLEND_ONE );
    pDevice->SetRenderState( D3DRS_DESTBLEND, D3DBLEND_ONE );
    pDevice->SetRenderState( D3DRS_CLIPPING, FALSE );

    D3DXMATRIX d3dMat;
    D3DXMATRIX d3dMatOut;

    D3DMATRIX matWorld =
    {
        1.0f,    0,       0,       0,
        0,       1.0f,    0,       0,
        0,       0,       1.0f,    0,
        0,       0,       0,       1.0f
    };

    d3dMat = matWorld;

    D3DXMatrixMultiply(
        &d3dMatOut,
        &d3dMat,
        D3DXMatrixRotationY( &d3dMatOut, 2.0f )
    );

    d3dMat = d3dMatOut;

    D3DXMatrixMultiply(
        &d3dMatOut,
        &d3dMat,
        D3DXMatrixRotationZ( &d3dMatOut, 0.40f )
    );

    d3dMat = d3dMatOut;

    D3DXMatrixMultiply(
        &d3dMatOut,
        &d3dMat,
        D3DXMatrixRotationX( &d3dMatOut, 2.0f )
    );

    d3dMat = d3dMatOut;

    hr = pDevice->SetTransform(
        D3DTS_WORLD,
        &d3dMat
    );
    if( FAILED(hr) )
    {
        WriteToLog(
            TEXT("SetTransform() returned %s (0x%x)\n"),
            DecodeHResult(hr),
            hr
        );
        return(D3DTESTINIT_ABORT);
    }


    D3DMATERIAL8 mtrl =
    {
        { 1.0f, 0.0f, 0.0f, 0.0f },  // diffuse
        { 0.0f, 0.3f, 0.0f, 0.5f },  // ambient
        { 1.0f, 0.0f, 0.0f, 0.0f },	 // specular
        { 0.0f, 0.0f, 0.0f, 0.0f },	 // emissive
        0.0f  // sharpness (for specular)
    };

    hr = pDevice->SetMaterial(
        &mtrl
    );
    if( FAILED(hr) )
    {
        WriteToLog(
            TEXT("SetMaterial() returned %s (0x%x)\n"),
            DecodeHResult(hr),
            hr
        );
        return(D3DTESTINIT_ABORT);
    }


    return(D3DTESTINIT_RUN);
}



BOOL
LostOnReset::ExecuteReal
(
    LPDIRECT3DDEVICE8 pDevice,
    const D3DTEST_NORMALBUFFER *lpBufInfo,
    BOOL fMixedMode
)
{

    HRESULT hr = D3D_OK;
    LPDIRECT3DVERTEXBUFFER8 pVB = NULL;
    LPDIRECT3DINDEXBUFFER8 pIB = NULL;
    LPBYTE pbObject = NULL;
    BOOL fRet = TRUE;

    BOOL fSoftwareUsage = FALSE;


    // determine sw usage
    if( fMixedMode )
    {
        DWORD dwSW;
        pDevice->GetRenderState( D3DRS_SOFTWAREVERTEXPROCESSING, &dwSW );
        fSoftwareUsage = dwSW;
    }

    do
    {
        hr = pDevice->CreateVertexBuffer(
            lpBufInfo->shape->m_nVertices * sizeof(D3DVERTEX),
            lpBufInfo->Usage ^ (fSoftwareUsage ? D3DUSAGE_SOFTWAREPROCESSING : 0),
            lpBufInfo->VBFVF,
            lpBufInfo->Pool,
            &pVB
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("CreateVertexBuffer(%d,0x%x,0x%x,%d,) failed, returned %s (0x%x)\n"),
                lpBufInfo->shape->m_nVertices * sizeof(D3DVERTEX),
                lpBufInfo->Usage ^ (fSoftwareUsage ? D3DUSAGE_SOFTWAREPROCESSING : 0),
                lpBufInfo->VBFVF,
                lpBufInfo->Pool,
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

        hr = pVB->Lock(
            0,
            lpBufInfo->shape->m_nVertices * sizeof(D3DVERTEX),
            &pbObject,
            0
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("Lock() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

        CopyMemory( pbObject, lpBufInfo->shape->m_pVertices, lpBufInfo->shape->m_nVertices * sizeof(D3DVERTEX) );

        hr = pVB->Unlock();
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("Unlock() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

        hr = pDevice->SetStreamSource(
            0,
            pVB,
            sizeof(D3DVERTEX)
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("SetStreamSource() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }


        hr = pDevice->CreateIndexBuffer(
            lpBufInfo->shape->m_nIndices * sizeof(WORD),
            lpBufInfo->Usage ^ (fSoftwareUsage ? D3DUSAGE_SOFTWAREPROCESSING : 0),
            lpBufInfo->IBFormat,
            lpBufInfo->Pool,
            &pIB
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("CreateIndexBuffer(%d,0x%x,%d,%d,) failed, returned %s (0x%x)\n"),
                lpBufInfo->shape->m_nIndices * sizeof(WORD),
                lpBufInfo->Usage ^ (fSoftwareUsage ? D3DUSAGE_SOFTWAREPROCESSING : 0),
                lpBufInfo->IBFormat,
                lpBufInfo->Pool,
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

        hr = pIB->Lock(
            0,
            lpBufInfo->shape->m_nIndices * sizeof(WORD),
            &pbObject,
            0
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("Lock() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

        CopyMemory( pbObject, lpBufInfo->shape->m_pIndices, lpBufInfo->shape->m_nIndices * sizeof(WORD) );

        hr = pIB->Unlock();
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("Unlock() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

        hr = pDevice->SetIndices(
            pIB,
            0
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("SetIndices() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }


        hr = pDevice->SetVertexShader( D3DFVF_VERTEX );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("SetVertexShader() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

    } while(0);


    if( !fRet )
    {
        RELEASE(pIB);
        RELEASE(pVB);
        return(fRet);
    }


    do
    {
        if( lpBufInfo->Pool == D3DPOOL_DEFAULT )
        {
            // make sure reset fails until buffers freed

            hr = pDevice->Reset( &m_SrcParam );
            if( hr != D3DERR_DEVICELOST )
            {
                WriteToLog(
                    TEXT("Reset() (with VB and IB) returned %s (0x%x)\n"),
                    DecodeHResult(hr),
                    hr
                );
                fRet = FALSE;
                continue;
            }

            try
            {
                RELEASE(pVB);
            }
            catch(...)
            {
                WriteToLog(
                    TEXT("VB->Release() caused unhandled exception\n")
                );
                Fail();
            }

            hr = pDevice->Reset( &m_SrcParam );
            if( hr != D3DERR_DEVICELOST )
            {
                WriteToLog(
                    TEXT("Reset() (with IB) returned %s (0x%x)\n"),
                    DecodeHResult(hr),
                    hr
                );
                fRet = FALSE;
                continue;
            }

            try
            {
                RELEASE(pIB);
            }
            catch(...)
            {
                WriteToLog(
                    TEXT("IB->Release() caused unhandled exception\n")
                );
                Fail();
            }

            hr = pDevice->Reset( &m_SrcParam );
            if( FAILED(hr) )
            {
                WriteToLog(
                    TEXT("Reset() returned %s (0x%x)\n"),
                    DecodeHResult(hr),
                    hr
                );
                fRet = FALSE;
                continue;
            }

        }
        else
        {
            // buffers should not be lost

            hr = pDevice->Reset( &m_SrcParam );
            if( FAILED(hr) )
            {
                WriteToLog(
                    TEXT("Reset() returned %s (0x%x)\n"),
                    DecodeHResult(hr),
                    hr
                );
                fRet = FALSE;
                continue;
            }

#ifdef D3DUSAGE_LOADONCE
            if( !(lpBufInfo->Usage & D3DUSAGE_LOADONCE) )
            {
#endif
                hr = pVB->Lock(
                    0,
                    0,
                    &pbObject,
                    0
                );
                if( FAILED(hr) )
                {
                    WriteToLog(
                        TEXT("VB::Lock() after Reset() returned %s (0x%x)\n"),
                        DecodeHResult(hr),
                        hr
                    );
                    fRet = FALSE;
                    continue;
                }

                hr = pVB->Unlock();
                if( FAILED(hr) )
                {
                    WriteToLog(
                        TEXT("VB::Unlock() after Reset() returned %s (0x%x)\n"),
                        DecodeHResult(hr),
                        hr
                    );
                    fRet = FALSE;
                    continue;
                }

                hr = pIB->Lock(
                    0,
                    0,
                    &pbObject,
                    0
                );
                if( FAILED(hr) )
                {
                    WriteToLog(
                        TEXT("IB::Lock() after Reset() returned %s (0x%x)\n"),
                        DecodeHResult(hr),
                        hr
                    );
                    fRet = FALSE;
                    continue;
                }

                hr = pIB->Unlock();
                if( FAILED(hr) )
                {
                    WriteToLog(
                        TEXT("IB::Unlock() after Reset() returned %s (0x%x)\n"),
                        DecodeHResult(hr),
                        hr
                    );
                    fRet = FALSE;
                    continue;
                }
#ifdef D3DUSAGE_LOADONCE
            }
#endif
        }
    }
    while(0);


    RELEASE(pIB);
    RELEASE(pVB);

    return(fRet);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\VBIB\RelockDynamic.cpp ===
//
//  RelockDynamic.cpp
//
//  lock selected vertex/index buffer tests.
//
//  ---------------------------------------------------------------------------
//
//  Copyright (C) 2000 Microsoft Corporation.
//
//

#include "CVertexIndexBufferTest.h"
#include <d3d8.h>
#include <d3dx8.h>



//-----------------------------------------------------------------------------
// Constructor / Destructor
//-----------------------------------------------------------------------------

RelockDynamic::RelockDynamic()
{
    m_szTestName = _T("Relock Dynamic");
    m_szCommandKey = _T("RelockDynamic");
}

RelockDynamic::~RelockDynamic()
{
}

//-----------------------------------------------------------------------------
// Member Functions
//-----------------------------------------------------------------------------

UINT RelockDynamic::TestInitialize()
{

    if( m_pD3D8 && m_pSrcDevice8 && m_pRefDevice8 )
    {
        m_pD3D =  m_pD3D8;
        m_pDevice = m_pSrcDevice8;
        m_pRefDevice = m_pRefDevice8;
    }
    else
	{
		WriteToLog(_T("TestInitialize() - Framework devices == NULL\n"));
        return D3DTESTINIT_ABORT;
	}


    // set the test range
    ExecuteTest( (UINT)(-1) );


    if (!m_shape.NewShape( CS_SPHERE, 10 )) {
        return D3DTESTINIT_ABORT;
    }

    if (!m_shape2.NewShape( CS_PYRAMID )) {
        return D3DTESTINIT_ABORT;
    }

    UINT uiRet;

    uiRet = TestInitReal(
        m_pDevice
    );
    if( uiRet != D3DTESTINIT_RUN )
    {
        return( uiRet );
    }

    uiRet = TestInitReal(
        m_pRefDevice
    );
    if( uiRet != D3DTESTINIT_RUN )
    {
        return( uiRet );
    }

    return D3DTESTINIT_RUN;
}

//-----------------------------------------------------------------------------

bool
RelockDynamic::ExecuteTest
(
    UINT nTest
)
{

    static const UINT Usages[] =
    {
        D3DUSAGE_DYNAMIC,
        D3DUSAGE_DYNAMIC | D3DUSAGE_WRITEONLY,
        D3DUSAGE_DYNAMIC | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_DYNAMIC | D3DUSAGE_POINTS,
        D3DUSAGE_DYNAMIC | D3DUSAGE_RTPATCHES,
        D3DUSAGE_DYNAMIC | D3DUSAGE_NPATCHES,
        D3DUSAGE_DYNAMIC | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_DYNAMIC | D3DUSAGE_POINTS | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_DYNAMIC | D3DUSAGE_RTPATCHES | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_DYNAMIC | D3DUSAGE_NPATCHES | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_DYNAMIC | D3DUSAGE_POINTS | D3DUSAGE_RTPATCHES | D3DUSAGE_NPATCHES,
    };

    static const D3DPOOL Pools[] =
    {
        D3DPOOL_DEFAULT,
        D3DPOOL_SYSTEMMEM,
    };

    static const UINT LockFlags[] =
    {
        NULL,
        D3DLOCK_DISCARD,
        D3DLOCK_NOOVERWRITE,
        D3DLOCK_NOSYSLOCK,
        D3DLOCK_DISCARD|D3DLOCK_NOOVERWRITE,
        D3DLOCK_DISCARD|D3DLOCK_NOSYSLOCK,
        D3DLOCK_NOOVERWRITE|D3DLOCK_NOSYSLOCK,
        D3DLOCK_DISCARD|D3DLOCK_NOOVERWRITE|D3DLOCK_NOSYSLOCK,
    };


    typedef union __TESTCASE
    {
        struct
        {
            UINT LockFlag2 : 4;
            UINT LockFlag1 : 4;
            UINT Pool : 3;
            UINT Usage : 5;
        };
        UINT nTest;

    } TESTCASE, *LPTESTCASE;

    static const TESTCASE tcCount =
    {
        COUNTOF(LockFlags),
        COUNTOF(LockFlags),
        COUNTOF(Pools),
        COUNTOF(Usages)
    };


    TESTCASE tc;
    tc.nTest = (nTest - 1);

    if( nTest == (UINT)(-1) )
    {
        ClearRangeList();

        tc.nTest = 0;
        for( tc.Usage = 0; tc.Usage < tcCount.Usage; tc.Usage++ )
        {
            for( tc.Pool = 0; tc.Pool < tcCount.Pool; tc.Pool++ )
            {
                for( tc.LockFlag1 = 0; tc.LockFlag1 < tcCount.LockFlag1; tc.LockFlag1++ )
                {
                    for( tc.LockFlag2 = 0; tc.LockFlag2 < tcCount.LockFlag2; tc.LockFlag2++ )
                    {
                        AddTestRange( (tc.nTest + 1), (tc.nTest + 1) );
                    }
                }
            }
        }

        return( FALSE );
    }

    if(
        (tc.Usage >= tcCount.Usage) ||
        (tc.Pool >= tcCount.Pool) ||
        (tc.LockFlag1 >= tcCount.LockFlag1) ||
        (tc.LockFlag2 >= tcCount.LockFlag2)
    )
    {
        WriteToLog(
            TEXT("No such test (%d)\n"),
            nTest
        );

        return(FALSE);
    }


    ClearFrame();


    TCHAR sz[256];

    wsprintf( sz,
        TEXT("Usage = 0x%x, Pool = %d, LockFlags = 0x%x, 0x%x"),
        Usages[tc.Usage],
        Pools[tc.Pool],
        LockFlags[tc.LockFlag1],
        LockFlags[tc.LockFlag2]
    );

    BeginTestCase( sz, nTest );


    BOOL bRetTest;
    BOOL bRetRef;

    bRetTest = ExecuteReal(
        m_pDevice,
        Usages[tc.Usage],
        Pools[tc.Pool],
        LockFlags[tc.LockFlag1],
        LockFlags[tc.LockFlag2],
        (m_pAdapter->Devices[m_pMode->nSrcDevice].dwBehaviorFlags & D3DCREATE_MIXED_VERTEXPROCESSING)
    );

    bRetRef = ExecuteReal(
        m_pRefDevice,
        Usages[tc.Usage],
        Pools[tc.Pool],
        LockFlags[tc.LockFlag1],
        LockFlags[tc.LockFlag2],
        (m_pAdapter->Devices[m_pMode->nRefDevice].dwBehaviorFlags & D3DCREATE_MIXED_VERTEXPROCESSING)
    );


    bool bRet = bRetTest && bRetRef;
    if( !bRet )
    {
        Fail();
    }

    return( bRet );
}



UINT
RelockDynamic::TestInitReal
(
    LPDIRECT3DDEVICE8 pDevice
)
{

    HRESULT hr;


    // Set the magic matricies
    D3DMATRIX matView =
    {
        1.0f,    0,       0,       0,
        0,       1.0f,    0,       0,
        0,       0,       1.0f,    0,
        0,       0,       2.0f,/*10.0f,*/   1.0f
    };
    pDevice->SetTransform( D3DTS_VIEW, &matView );

    D3DMATRIX matProj =
    {
        2.0f,    0,       0,       0,
        0,       2.0f,    0,       0,
        0,       0,       1.0f,    1.0f,
        0,       0,       -1.0f,   0.0f
    };
    pDevice->SetTransform( D3DTS_PROJECTION, &matProj );

    // Set appropiate states
    pDevice->SetRenderState( D3DRS_AMBIENT, D3DCOLOR_XRGB( 0xff, 0xff, 0xff ) );
    pDevice->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );
    pDevice->SetRenderState( D3DRS_SRCBLEND, D3DBLEND_ONE );
    pDevice->SetRenderState( D3DRS_DESTBLEND, D3DBLEND_ONE );
    pDevice->SetRenderState( D3DRS_CLIPPING, FALSE );

    D3DXMATRIX d3dMat;
    D3DXMATRIX d3dMatOut;

    D3DMATRIX matWorld =
    {
        1.0f,    0,       0,       0,
        0,       1.0f,    0,       0,
        0,       0,       1.0f,    0,
        0,       0,       0,       1.0f
    };

    d3dMat = matWorld;

    D3DXMatrixMultiply(
        &d3dMatOut,
        &d3dMat,
        D3DXMatrixRotationY( &d3dMatOut, 2.0f )
    );

    d3dMat = d3dMatOut;

    D3DXMatrixMultiply(
        &d3dMatOut,
        &d3dMat,
        D3DXMatrixRotationZ( &d3dMatOut, 0.40f )
    );

    d3dMat = d3dMatOut;

    D3DXMatrixMultiply(
        &d3dMatOut,
        &d3dMat,
        D3DXMatrixRotationX( &d3dMatOut, -0.46f )
    );

    d3dMat = d3dMatOut;

    hr = pDevice->SetTransform(
        D3DTS_WORLD,
        &d3dMat
    );
    if( FAILED(hr) )
    {
        WriteToLog(
            TEXT("SetTransform() returned %s (0x%x)\n"),
            DecodeHResult(hr),
            hr
        );
        return(D3DTESTINIT_ABORT);
    }


    D3DMATERIAL8 mtrl =
    {
        { 0.8f, 0.0f, 0.0f, 0.0f },  // diffuse
        { 0.0f, 0.3f, 0.0f, 0.5f },  // ambient
        { 0.0f, 0.0f, 1.0f, 0.0f },	 // specular
        { 0.0f, 0.0f, 0.0f, 0.0f },	 // emissive
        0.0f  // sharpness (for specular)
    };

    hr = pDevice->SetMaterial(
        &mtrl
    );
    if( FAILED(hr) )
    {
        WriteToLog(
            TEXT("SetMaterial() returned %s (0x%x)\n"),
            DecodeHResult(hr),
            hr
        );
        return(D3DTESTINIT_ABORT);
    }


    return(D3DTESTINIT_RUN);
}



BOOL
RelockDynamic::ExecuteReal
(
    LPDIRECT3DDEVICE8 pDevice,
    DWORD Usage,
    D3DPOOL Pool,
    DWORD LockFlags1,
    DWORD LockFlags2,
    BOOL fMixedMode
)
{

    HRESULT hr = D3D_OK;
    LPBYTE pbObject = NULL;
    BOOL fRet = TRUE;
    LPDIRECT3DVERTEXBUFFER8 pVB = NULL;
    LPDIRECT3DINDEXBUFFER8 pIB = NULL;


    do
    {
        BOOL fSoftwareUsage = FALSE;

        // determine sw usage
        if( fMixedMode )
        {
            DWORD dwSW;
            pDevice->GetRenderState( D3DRS_SOFTWAREVERTEXPROCESSING, &dwSW );
            fSoftwareUsage = dwSW;
        }

        // create buffers
        hr = pDevice->CreateVertexBuffer(
            (m_shape.m_nVertices + m_shape2.m_nVertices) * sizeof(D3DVERTEX),
            Usage ^ (fSoftwareUsage ? D3DUSAGE_SOFTWAREPROCESSING : NULL),
            D3DFVF_VERTEX,
            Pool,
            &pVB
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("CreateVertexBuffer(%d,0x%x,0x%x,%d,) failed, returned %s (0x%x)\n"),
                (m_shape.m_nVertices + m_shape2.m_nVertices) * sizeof(D3DVERTEX),
                Usage ^ (fSoftwareUsage ? D3DUSAGE_SOFTWAREPROCESSING : NULL),
                D3DFVF_VERTEX,
                Pool,
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

        hr = pDevice->CreateIndexBuffer(
            (m_shape.m_nIndices + m_shape2.m_nIndices) * sizeof(WORD),
            Usage ^ (fSoftwareUsage ? D3DUSAGE_SOFTWAREPROCESSING : NULL),
            D3DFMT_INDEX16,
            Pool,
            &pIB
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("CreateIndexBuffer(%d,0x%x,%d,%d,) failed, returned %s (0x%x)\n"),
                (m_shape.m_nIndices + m_shape2.m_nIndices) * sizeof(WORD),
                Usage ^ (fSoftwareUsage ? D3DUSAGE_SOFTWAREPROCESSING : NULL),
                D3DFMT_INDEX16,
                Pool,
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }


        // first vb lock
        hr = pVB->Lock(
            0,
            m_shape.m_nVertices * sizeof(D3DVERTEX),
            &pbObject,
            LockFlags1
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("VB::Lock(0,%d,,0x%x) returned %s (0x%x)\n"),
                m_shape.m_nVertices * sizeof(D3DVERTEX),
                LockFlags1,
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

        CopyMemory( pbObject, m_shape.m_pVertices, m_shape.m_nVertices * sizeof(D3DVERTEX) );


        hr = pIB->Lock(
            0,
            m_shape.m_nIndices * sizeof(WORD),
            &pbObject,
            LockFlags1
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("IB::Lock(0,%d,,0x%x) returned %s (0x%x)\n"),
                m_shape.m_nIndices * sizeof(WORD),
                LockFlags1,
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

        CopyMemory( pbObject, m_shape.m_pIndices, m_shape.m_nIndices * sizeof(WORD) );


        // add second object to vb
        hr = pVB->Lock(
            m_shape.m_nVertices * sizeof(D3DVERTEX),
            m_shape2.m_nVertices * sizeof(D3DVERTEX),
            &pbObject,
            LockFlags2
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("VB::Lock(%d,%d,,0x%x) returned %s (0x%x)\n"),
                m_shape.m_nVertices * sizeof(D3DVERTEX),
                m_shape2.m_nVertices * sizeof(D3DVERTEX),
                LockFlags2,
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

        CopyMemory( pbObject, m_shape2.m_pVertices, m_shape2.m_nVertices * sizeof(D3DVERTEX) );

        
        // add second object to ib
        hr = pIB->Lock(
            m_shape.m_nIndices * sizeof(WORD),
            m_shape2.m_nIndices * sizeof(WORD),
            &pbObject,
            LockFlags2
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("IB::Lock(%d,%d,,0x%x) returned %s (0x%x)\n"),
                m_shape.m_nIndices * sizeof(WORD),
                m_shape2.m_nIndices * sizeof(WORD),
                LockFlags2,
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

        for( UINT iIndex = 0; iIndex < m_shape2.m_nIndices; iIndex++ )
        {
            ((WORD*)pbObject)[iIndex] = m_shape2.m_pIndices[iIndex] + m_shape.m_nVertices;
        }


        // unlock second locks
        hr = pVB->Unlock();
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("VB::Unlock() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

        hr = pIB->Unlock();
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("IB::Unlock() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }


        // unlock first locks
        hr = pVB->Unlock();
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("VB::Unlock() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

        hr = pIB->Unlock();
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("IB::Unlock() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }


        // setup streams
        hr = pDevice->SetStreamSource(
            0,
            pVB,
            sizeof(D3DVERTEX)
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("SetStreamSource() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

        hr = pDevice->SetIndices(
            pIB,
            0
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("SetIndices() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }
    }
    while(0);

    if( !fRet )
    {
        RELEASE(pVB);
        RELEASE(pIB);
        return(fRet);
    }
 

    pDevice->Clear( 0, NULL, D3DCLEAR_TARGET, D3DCOLOR_XRGB(0x00, 0x00, 0x00), 0.0f, 0 );

    // Begin the scene
    if( SUCCEEDED( pDevice->BeginScene() ) )
    {
        do
        {
            hr = pDevice->SetVertexShader( D3DFVF_VERTEX );
            if( FAILED(hr) )
            {
                WriteToLog(
                    TEXT("SetVertexShader(D3DFVF_VERTEX) returned %s (0x%x)\n"),
                    DecodeHResult(hr),
                    hr
                );
                fRet = FALSE;
                continue;
            }

            hr = pDevice->DrawIndexedPrimitive(
                D3DPT_TRIANGLELIST,
                0,
                m_shape.m_nVertices + m_shape2.m_nVertices,
                0,
                (m_shape.m_nIndices + m_shape2.m_nIndices) / 3
            );
            if( FAILED(hr) )
            {
                WriteToLog(
                    TEXT("DrawIndexedPrimitive() returned %s (0x%x)\n"),
                    DecodeHResult(hr),
                    hr
                );
                fRet = FALSE;
                continue;
            }
        }
        while(0);  // execute once, so continue can bust out

        // End the scene.
        hr = pDevice->EndScene();
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("EndScene() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
        }
    }


    RELEASE(pVB);
    RELEASE(pIB);

    return(fRet);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\VBIB\priority.cpp ===
//
//  Priority.cpp
//
//  priority rendering tests.
//
//  ---------------------------------------------------------------------------
//
//  Copyright (C) 2000 Microsoft Corporation.
//
//

#include "CVertexIndexBufferTest.h"
#include <d3d8.h>
#include <d3dx8.h>



//-----------------------------------------------------------------------------
// Constructor / Destructor
//-----------------------------------------------------------------------------

Priority::Priority()
{
    m_szTestName = _T("Priority");
    m_szCommandKey = _T("Priority");
}

//-----------------------------------------------------------------------------
// Member Functions
//-----------------------------------------------------------------------------

UINT Priority::TestInitialize()
{

    if( m_pD3D8 && m_pSrcDevice8 && m_pRefDevice8 )
    {
        m_pD3D =  m_pD3D8;
        m_pDevice = m_pSrcDevice8;
        m_pRefDevice = m_pRefDevice8;
    }
    else
	{
		WriteToLog(_T("TestInitialize() - Framework devices == NULL\n"));
        return D3DTESTINIT_ABORT;
	}


    // set the test range
    ExecuteTest( (UINT)(-1) );


    // skip devices that don't allow SW VP
    if( (m_pAdapter->Devices[m_pMode->nSrcDevice].dwBehaviorFlags & D3DCREATE_PUREDEVICE) ||
        (m_pAdapter->Devices[m_pMode->nRefDevice].dwBehaviorFlags & D3DCREATE_PUREDEVICE) ||
        (m_pAdapter->Devices[m_pMode->nSrcDevice].dwBehaviorFlags & D3DCREATE_HARDWARE_VERTEXPROCESSING) ||
        (m_pAdapter->Devices[m_pMode->nRefDevice].dwBehaviorFlags & D3DCREATE_HARDWARE_VERTEXPROCESSING) )
    {
        return( D3DTESTINIT_SKIPALL );
    }


    if (!m_shape.NewShape( CS_SPHERE, 10 )) {
        return D3DTESTINIT_ABORT;
    }


    UINT uiRet;

    uiRet = TestInitReal(
        m_pDevice
    );
    if( uiRet != D3DTESTINIT_RUN )
    {
        return( uiRet );
    }

    uiRet = TestInitReal(
        m_pRefDevice
    );
    if( uiRet != D3DTESTINIT_RUN )
    {
        return( uiRet );
    }

    return D3DTESTINIT_RUN;
}

//-----------------------------------------------------------------------------

bool
Priority::ExecuteTest
(
    UINT nTest
)
{

    static const UINT Usages[] =
    {
        NULL,
        D3DUSAGE_WRITEONLY,
        D3DUSAGE_DONOTCLIP,
        D3DUSAGE_POINTS,
        D3DUSAGE_RTPATCHES,
        D3DUSAGE_NPATCHES,
        D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_POINTS | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_RTPATCHES | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_NPATCHES | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_POINTS | D3DUSAGE_RTPATCHES | D3DUSAGE_NPATCHES,
#ifdef D3DUSAGE_LOADONCE
        D3DUSAGE_LOADONCE,
        D3DUSAGE_LOADONCE | D3DUSAGE_WRITEONLY,
        D3DUSAGE_LOADONCE | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_LOADONCE | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
#endif
    };

    static const DWORD Priorities[] = { 0, 1, 2, 3, 4, 5, 6, 7, 0xff, 0x100, 0xffff, 0x10000, 0xffffffff };


    typedef union __TESTCASE
    {
        struct
        {
            UINT Usage : 5;
            UINT Priority : 5;
        };
        UINT nTest;

    } TESTCASE, *LPTESTCASE;

    static const TESTCASE tcCount =
    {
        COUNTOF(Usages),
        COUNTOF(Priorities),  // priorities
    };


    TESTCASE tc;
    tc.nTest = (nTest - 1);

    if( nTest == (UINT)(-1) )
    {
        ClearRangeList();

        tc.nTest = 0;
        for( tc.Usage = 0; tc.Usage < tcCount.Usage; tc.Usage++ )
        {
            for( tc.Priority = 0; tc.Priority < tcCount.Priority; tc.Priority++ )
            {
                AddTestRange( (tc.nTest + 1), (tc.nTest + 1) );
            }
        }

        return( FALSE );
    }

    if( (tc.Usage >= tcCount.Usage) ||
        (tc.Priority >= tcCount.Priority)  )
    {
        WriteToLog(
            TEXT("No such test (%d)\n"),
            nTest
        );

        return(FALSE);
    }

    ClearFrame();


    TCHAR sz[256];

    wsprintf( sz,
        TEXT("Usage = 0x%x, Priority = %d"),
        Usages[tc.Usage],
        Priorities[tc.Priority]
    );

    BeginTestCase( sz, nTest );

    D3DTEST_NORMALBUFFER curtest;

    curtest.szName = TEXT("");
    curtest.shape = &m_shape;
    curtest.VBFVF = D3DFVF_VERTEX;
    curtest.IBFormat = D3DFMT_INDEX16;
    curtest.Usage = Usages[tc.Usage];
    curtest.Pool = D3DPOOL_MANAGED;


    BOOL bRetTest;
    BOOL bRetRef;

    bRetTest = ExecuteReal(
        m_pDevice,
        &curtest,
        Priorities[tc.Priority],
        (m_pAdapter->Devices[m_pMode->nSrcDevice].dwBehaviorFlags & D3DCREATE_MIXED_VERTEXPROCESSING)
    );

    bRetRef = ExecuteReal(
        m_pRefDevice,
        &curtest,
        Priorities[tc.Priority],
        (m_pAdapter->Devices[m_pMode->nRefDevice].dwBehaviorFlags & D3DCREATE_MIXED_VERTEXPROCESSING)
    );


    bool bRet = bRetTest && bRetRef;
    if( !bRet )
    {
        Fail();
    }

    return( bRet );
}



UINT
Priority::TestInitReal
(
    LPDIRECT3DDEVICE8 pDevice
)
{

    HRESULT hr;


    // Set the magic matricies
    D3DMATRIX matView =
    {
        1.0f,    0,       0,       0,
        0,       1.0f,    0,       0,
        0,       0,       1.0f,    0,
        0,       0,       2.0f,/*10.0f,*/   1.0f
    };
    pDevice->SetTransform( D3DTS_VIEW, &matView );

    D3DMATRIX matProj =
    {
        2.0f,    0,       0,       0,
        0,       2.0f,    0,       0,
        0,       0,       1.0f,    1.0f,
        0,       0,       -1.0f,   0.0f
    };
    pDevice->SetTransform( D3DTS_PROJECTION, &matProj );

    // Set appropiate states
    pDevice->SetRenderState( D3DRS_AMBIENT, D3DCOLOR_XRGB( 0xff, 0xff, 0xff ) );
    pDevice->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );
    pDevice->SetRenderState( D3DRS_SRCBLEND, D3DBLEND_ONE );
    pDevice->SetRenderState( D3DRS_DESTBLEND, D3DBLEND_ONE );
    pDevice->SetRenderState( D3DRS_CLIPPING, FALSE );

    D3DXMATRIX d3dMat;
    D3DXMATRIX d3dMatOut;

    D3DMATRIX matWorld =
    {
        1.0f,    0,       0,       0,
        0,       1.0f,    0,       0,
        0,       0,       1.0f,    0,
        0,       0,       0,       1.0f
    };

    d3dMat = matWorld;

    D3DXMatrixMultiply(
        &d3dMatOut,
        &d3dMat,
        D3DXMatrixRotationY( &d3dMatOut, 2.0f )
    );

    d3dMat = d3dMatOut;

    D3DXMatrixMultiply(
        &d3dMatOut,
        &d3dMat,
        D3DXMatrixRotationZ( &d3dMatOut, 0.40f )
    );

    d3dMat = d3dMatOut;

    D3DXMatrixMultiply(
        &d3dMatOut,
        &d3dMat,
        D3DXMatrixRotationX( &d3dMatOut, 2.0f )
    );

    d3dMat = d3dMatOut;

    hr = pDevice->SetTransform(
        D3DTS_WORLD,
        &d3dMat
    );
    if( FAILED(hr) )
    {
        WriteToLog(
            TEXT("SetTransform() returned %s (0x%x)\n"),
            DecodeHResult(hr),
            hr
        );
        return(D3DTESTINIT_ABORT);
    }


    D3DMATERIAL8 mtrl =
    {
        { 1.0f, 0.0f, 0.0f, 0.0f },  // diffuse
        { 0.0f, 0.3f, 0.0f, 0.5f },  // ambient
        { 1.0f, 0.0f, 0.0f, 0.0f },	 // specular
        { 0.0f, 0.0f, 0.0f, 0.0f },	 // emissive
        0.0f  // sharpness (for specular)
    };

    hr = pDevice->SetMaterial(
        &mtrl
    );
    if( FAILED(hr) )
    {
        WriteToLog(
            TEXT("SetMaterial() returned %s (0x%x)\n"),
            DecodeHResult(hr),
            hr
        );
        return(D3DTESTINIT_ABORT);
    }


    return(D3DTESTINIT_RUN);
}



BOOL
Priority::ExecuteReal
(
    LPDIRECT3DDEVICE8 pDevice,
    const D3DTEST_NORMALBUFFER *lpBufInfo,
    DWORD dwThisPriority,
    BOOL fMixedMode
)
{

    HRESULT hr = D3D_OK;
    LPDIRECT3DVERTEXBUFFER8 pVB = NULL;
    LPDIRECT3DVERTEXBUFFER8 pVBTL = NULL;
    LPDIRECT3DINDEXBUFFER8 pIB = NULL;
    LPBYTE pbObject = NULL;
    BOOL fRet = TRUE;

    BOOL fSoftwareUsage = FALSE;
    DWORD dwSWVertProc = TRUE;


    // determine sw usage
    if( fMixedMode )
    {
        pDevice->GetRenderState( D3DRS_SOFTWAREVERTEXPROCESSING, &dwSWVertProc );
        fSoftwareUsage = dwSWVertProc;
    }

    do
    {
        // create D3DVERTEX buffer
        hr = pDevice->CreateVertexBuffer(
            lpBufInfo->shape->m_nVertices * sizeof(D3DVERTEX),
            //lpBufInfo->Usage ^ (fSoftwareUsage ? D3DUSAGE_SOFTWAREPROCESSING : 0),
            lpBufInfo->Usage ^ (fMixedMode ? D3DUSAGE_SOFTWAREPROCESSING : 0),
            D3DFVF_VERTEX,
            lpBufInfo->Pool,
            &pVB
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("CreateVertexBuffer(%d,0x%x,0x%x,%d,) failed, returned %s (0x%x)\n"),
                lpBufInfo->shape->m_nVertices * sizeof(D3DVERTEX),
                lpBufInfo->Usage ^ (fSoftwareUsage ? D3DUSAGE_SOFTWAREPROCESSING : 0),
                D3DFVF_VERTEX,
                lpBufInfo->Pool,
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

        hr = pVB->Lock(
            0,
            lpBufInfo->shape->m_nVertices * sizeof(D3DVERTEX),
            &pbObject,
            0
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("Lock() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

        CopyMemory( pbObject, lpBufInfo->shape->m_pVertices, lpBufInfo->shape->m_nVertices * sizeof(D3DVERTEX) );

        hr = pVB->Unlock();
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("Unlock() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }


        // create index buffer
        hr = pDevice->CreateIndexBuffer(
            lpBufInfo->shape->m_nIndices * sizeof(WORD),
            //lpBufInfo->Usage ^ (fSoftwareUsage ? D3DUSAGE_SOFTWAREPROCESSING : 0),
            lpBufInfo->Usage ^ (fMixedMode ? D3DUSAGE_SOFTWAREPROCESSING : 0),
            lpBufInfo->IBFormat,
            lpBufInfo->Pool,
            &pIB
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("CreateIndexBuffer(%d,0x%x,%d,%d,) failed, returned %s (0x%x)\n"),
                lpBufInfo->shape->m_nIndices * sizeof(WORD),
                lpBufInfo->Usage ^ (fSoftwareUsage ? D3DUSAGE_SOFTWAREPROCESSING : 0),
                lpBufInfo->IBFormat,
                lpBufInfo->Pool,
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

        hr = pIB->Lock(
            0,
            lpBufInfo->shape->m_nIndices * sizeof(WORD),
            &pbObject,
            0
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("Lock() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

        CopyMemory( pbObject, lpBufInfo->shape->m_pIndices, lpBufInfo->shape->m_nIndices * sizeof(WORD) );

        hr = pIB->Unlock();
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("Unlock() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }


        // create D3DTLVERTEX buffer and process vertices
        hr = pDevice->CreateVertexBuffer(
            lpBufInfo->shape->m_nVertices * sizeof(D3DTLVERTEX),
            lpBufInfo->Usage ^ (fSoftwareUsage ? D3DUSAGE_SOFTWAREPROCESSING : 0),
            D3DFVF_TLVERTEX,
            lpBufInfo->Pool,
            &pVBTL
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("CreateVertexBuffer(%d,0x%x,0x%x,%d,) failed, returned %s (0x%x)\n"),
                lpBufInfo->shape->m_nVertices * sizeof(D3DTLVERTEX),
                lpBufInfo->Usage ^ (fSoftwareUsage ? D3DUSAGE_SOFTWAREPROCESSING : 0),
                D3DFVF_TLVERTEX,
                lpBufInfo->Pool,
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

        hr = pDevice->SetRenderState( D3DRS_SOFTWAREVERTEXPROCESSING, TRUE );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("SetRenderState( D3DRS_SOFTWAREVERTEXPROCESSING, TRUE ) returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

        hr = pDevice->SetStreamSource(
            0,
            pVB,
            sizeof(D3DVERTEX)
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("SetStreamSource(pVB) returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

        hr = pDevice->SetIndices(
            pIB,
            0
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("SetIndices() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

        hr = pDevice->SetVertexShader( D3DFVF_VERTEX );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("SetVertexShader(D3DFVF_VERTEX) returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

        hr = pDevice->ProcessVertices(
            0,
            0,
            lpBufInfo->shape->m_nVertices,
            pVBTL,
            0
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("ProcessVertices() failed, returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

        hr = pDevice->SetRenderState( D3DRS_SOFTWAREVERTEXPROCESSING, dwSWVertProc );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("SetRenderState( D3DRS_SOFTWAREVERTEXPROCESSING, dwSWVertProc ) returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }


        // setup streams and shader for rendering
        hr = pDevice->SetStreamSource(
            0,
            pVBTL,
            sizeof(D3DTLVERTEX)
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("SetStreamSource(pVBTL) returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

        hr = pDevice->SetIndices(
            pIB,
            0
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("SetIndices() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

        hr = pDevice->SetVertexShader( D3DFVF_TLVERTEX );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("SetVertexShader(D3DFVF_TLVERTEX) returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

    } while(0);


    if( !fRet )
    {
        RELEASE(pIB);
        RELEASE(pVB);
        RELEASE(pVBTL);
        return(fRet);
    }

    pDevice->Clear( 0, NULL, D3DCLEAR_TARGET, D3DCOLOR_XRGB(0x00, 0x00, 0x00), 0.0f, 0 );

    // Begin the scene
    if( SUCCEEDED( pDevice->BeginScene() ) )
    {
        do
        {
            DWORD dwOldPriority;
            DWORD dwTemp;


            dwOldPriority = pVBTL->SetPriority( dwThisPriority );

            dwTemp = pVBTL->GetPriority();
            if( dwTemp != dwThisPriority )
            {
                WriteToLog(
                    TEXT("GetPriority() returned %d, expected %d\n"),
                    dwTemp,
                    dwThisPriority
                );
                fRet = FALSE;
            }

            hr = pDevice->DrawIndexedPrimitive(
                D3DPT_TRIANGLELIST,
                0,
                lpBufInfo->shape->m_nVertices,
                0,
                lpBufInfo->shape->m_nIndices / 3
            );
            if( FAILED(hr) )
            {
                WriteToLog(
                    TEXT("DrawIndexedPrimitive() returned %s (0x%x)\n"),
                    DecodeHResult(hr),
                    hr
                );
                fRet = FALSE;
                continue;
            }

            dwTemp = pVBTL->SetPriority( dwOldPriority );
            if( dwTemp != dwThisPriority )
            {
                WriteToLog(
                    TEXT("SetPriority() returned %d, expected %d\n"),
                    dwTemp,
                    dwThisPriority
                );
                fRet = FALSE;
            }

            dwTemp = pVBTL->SetPriority( dwThisPriority );
            if( dwTemp != dwOldPriority )
            {
                WriteToLog(
                    TEXT("SetPriority() returned %d, expected %d\n"),
                    dwTemp,
                    dwOldPriority
                );
                fRet = FALSE;
            }

            dwTemp = pVBTL->GetPriority();
            if( dwTemp != dwThisPriority )
            {
                WriteToLog(
                    TEXT("GetPriority() returned %d, expected %d\n"),
                    dwTemp,
                    dwThisPriority
                );
                fRet = FALSE;
            }

            dwTemp = pVBTL->SetPriority( dwOldPriority );

        } while(0);  // execute once, so continue can bust out

        // End the scene.
        hr = pDevice->EndScene();
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("EndScene() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
        }
    }

    RELEASE(pIB);
    RELEASE(pVB);
    RELEASE(pVBTL);

    return(fRet);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\VBIB\dll\include.cpp ===
#include "dll\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\VBIB\LockPointerAlias7.cpp ===
//
//  LockPointerAlias7.cpp
//



#include <d3d.h>
#include <d3dx.h>
#include <tchar.h>
#include <windows.h>
#include "LockPointerAlias.h"



UINT LockPointerAlias::TestInitialize7()
{
    if( !m_pD3D7 || !m_pSrcDevice7 )
	{
		WriteToLog(_T("TestInitialize() - Framework devices == NULL\n"));
        return D3DTESTINIT_ABORT;
	}

    ExecuteTest7((UINT)(-1));

    return(D3DTESTINIT_RUN);
}



bool
LockPointerAlias::ExecuteTest7
(
    UINT nTest
)
{
    static const DWORD CapsList[] =
    {
        NULL,
        D3DVBCAPS_DONOTCLIP,
        D3DVBCAPS_WRITEONLY,
        D3DVBCAPS_SYSTEMMEMORY,
        D3DVBCAPS_DONOTCLIP | D3DVBCAPS_WRITEONLY,
        D3DVBCAPS_DONOTCLIP | D3DVBCAPS_SYSTEMMEMORY,
        D3DVBCAPS_WRITEONLY | D3DVBCAPS_SYSTEMMEMORY,
        D3DVBCAPS_DONOTCLIP | D3DVBCAPS_WRITEONLY | D3DVBCAPS_SYSTEMMEMORY,
    };

    static const DWORD LockFlags[] =
    {
        DDLOCK_NOSYSLOCK,
        DDLOCK_DISCARDCONTENTS,
        DDLOCK_NOSYSLOCK | DDLOCK_DISCARDCONTENTS,
    };

    typedef union __TESTCASE
    {
        struct
        {
            UINT LockFlag : 4;
            UINT CapsList : 6;
        };
        UINT nTest;

    } TESTCASE, *LPTESTCASE;

    static const TESTCASE tcCount =
    {
        COUNTOF(LockFlags),
        COUNTOF(CapsList),
    };


    TESTCASE tc;
    tc.nTest = (nTest - 1);

    if( nTest == (UINT)(-1) )
    {
        ClearRangeList();

        tc.nTest = 0;
        for( tc.CapsList = 0; tc.CapsList < tcCount.CapsList; tc.CapsList++ )
        {
            for( tc.LockFlag = 0; tc.LockFlag < tcCount.LockFlag; tc.LockFlag++ )
            {
                AddTestRange( (tc.nTest + 1), (tc.nTest + 1) );
            }
        }

        return( FALSE );
    }

    if(
        (tc.CapsList >= tcCount.CapsList) ||
        (tc.LockFlag >= tcCount.LockFlag)
    )
    {
        WriteToLog(
            TEXT("No such test (%d)\n"),
            nTest
        );

        return(FALSE);
    }


    D3DVERTEXBUFFERDESC vbdesc =
    {
        sizeof(vbdesc),
        CapsList[tc.CapsList],
        D3DFVF_VERTEX,
        4096  // size
    };
    DWORD Flags = LockFlags[tc.LockFlag];

    TCHAR sz[256];

    wsprintf( sz,
        TEXT("Caps = 0x%x, LockFlags = 0x%x"),
        vbdesc.dwCaps,
        Flags
    );


    // skip buffer if not valid
    // no cases to consider?


    ClearFrame();

    BeginTestCase( sz, nTest );


    BOOL fFail = FALSE;
    HRESULT hr;
    LPDIRECT3DVERTEXBUFFER7 pVB = NULL;
    LPBYTE pbVB = NULL;

    LONG lRet;
    DEVMODE dmnew;
    DEVMODE dmcur;


    dmnew.dmSize = sizeof(dmnew);
    dmnew.dmPelsWidth = 640;
    dmnew.dmPelsHeight = 480;
    dmnew.dmBitsPerPel = 8;
    dmnew.dmFields = DM_PELSWIDTH | DM_PELSHEIGHT | DM_BITSPERPEL;

    dmcur.dmSize = sizeof(dmcur);


    do
    {
        lRet = EnumDisplaySettings(
            NULL,
            ENUM_CURRENT_SETTINGS,
            &dmcur
        );
        if( !lRet )
        {
            WriteToLog(
                TEXT("EnumDisplaySettings() returned %d\n"),
                lRet
            );
            fFail = TRUE;
            continue;
        }


        hr = m_pD3D7->CreateVertexBuffer(
            &vbdesc,
            &pVB,
            0
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("CreateVertexBuffer() failed\n")
            );
            continue;
        }

        hr = pVB->Lock(
            Flags,
            (LPVOID*)&pbVB,
            NULL
        );
        if( FAILED(hr) )
        {
            WriteToLog( TEXT("Lock() failed\n") );
            continue;
        }

        // write to buffer
        try
        {
            for( INT iIndex = 0; iIndex < vbdesc.dwSize; iIndex++ )
            {
                pbVB[iIndex] = 0x49;
            }
        }
        catch(...)
        {
            WriteToLog(
                TEXT("writing to pointer from Lock() caused unhandled exception\n")
            );
            fFail = TRUE;
            continue;
        }

        // cause lost condition
        lRet = ChangeDisplaySettings( &dmnew, 0 );
        if( lRet != DISP_CHANGE_SUCCESSFUL )
        {
            WriteToLog(
                TEXT("ChangeDisplaySettings() returned %d\n"),
                lRet
            );
            fFail = TRUE;
            continue;
        }

        // check if device lost
        hr = (m_pSrcTarget->GetSurface7())->IsLost();
        if( hr != DDERR_SURFACELOST )
        {
            WriteToLog(
                TEXT("device is not lost; test won't be too useful\n"),
                lRet
            );
            //fFail = TRUE;
            //continue;
        }

        // write to buffer
        try
        {
            for( INT iIndex = 0; iIndex < vbdesc.dwSize; iIndex++ )
            {
                pbVB[iIndex] = iIndex & 0xff;
            }
        }
        catch(...)
        {
            WriteToLog(
                TEXT("writing to pointer after device lost caused unhandled exception\n")
            );
            fFail = TRUE;
            continue;
        }

        // read and verify
        try
        {
            for( INT iIndex = 0; iIndex < vbdesc.dwSize; iIndex++ )
            {
                if( pbVB[iIndex] != (iIndex & 0xff) )
                {
                    WriteToLog(
                        TEXT("data mismatch at offset %d: was %x, expected %x\n"),
                        iIndex,
                        pbVB[iIndex],
                        (iIndex & 0xff)
                    );
                    fFail = TRUE;
                }
            }

            if( fFail )
            {
                continue;
            }
        }
        catch(...)
        {
            WriteToLog(
                TEXT("reading from pointer after device lost caused unhandled exception\n")
            );
            fFail = TRUE;
            continue;
        }

        pVB->Unlock();

    }
    while(0);

    RELEASE(pVB);

    // restore prior display settings
    lRet = ChangeDisplaySettings( &dmcur, 0 );
    if( lRet != DISP_CHANGE_SUCCESSFUL )
    {
        WriteToLog(
            TEXT("ChangeDisplaySettings() returned %d\n"),
            lRet
        );
        fFail = TRUE;
    }

    hr = m_pDDraw7->RestoreAllSurfaces();
    WriteToLog(TEXT("%s 0x%x\n"),DecodeHResult(hr),hr);

    if( fFail )
    {
        Fail();
    }

    return(false);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\VBIB\exe\include.cpp ===
#include "exe\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\VBIB\LockPointerAlias8.cpp ===
//
//  LockPointerAlias8.cpp
//



#include <d3dx8.h>
#include <tchar.h>
#include <windows.h>
#include <types.h>
#include "LockPointerAlias.h"



UINT LockPointerAlias::TestInitialize8()
{
    if( !m_pD3D8 || !m_pSrcDevice8 )
	{
		WriteToLog(_T("TestInitialize() - Framework devices == NULL\n"));
        return D3DTESTINIT_ABORT;
	}

    ExecuteTest8((UINT)(-1));

    return(D3DTESTINIT_RUN);
}



bool
LockPointerAlias::ExecuteTest8
(
    UINT nTest
)
{
    static const UINT Usages[] =
    {
        NULL,
        D3DUSAGE_WRITEONLY,
        D3DUSAGE_DONOTCLIP,
        D3DUSAGE_POINTS,
        D3DUSAGE_RTPATCHES,
        D3DUSAGE_NPATCHES,
        D3DUSAGE_DYNAMIC,
        D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_POINTS | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_RTPATCHES | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_NPATCHES | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_POINTS | D3DUSAGE_RTPATCHES | D3DUSAGE_NPATCHES,
        D3DUSAGE_WRITEONLY | D3DUSAGE_DYNAMIC,
        D3DUSAGE_DONOTCLIP | D3DUSAGE_DYNAMIC,
        D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP | D3DUSAGE_DYNAMIC,
        D3DUSAGE_SOFTWAREPROCESSING,
        D3DUSAGE_SOFTWAREPROCESSING | D3DUSAGE_WRITEONLY,
        D3DUSAGE_SOFTWAREPROCESSING | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_SOFTWAREPROCESSING | D3DUSAGE_POINTS,
        D3DUSAGE_SOFTWAREPROCESSING | D3DUSAGE_RTPATCHES,
        D3DUSAGE_SOFTWAREPROCESSING | D3DUSAGE_NPATCHES,
        D3DUSAGE_SOFTWAREPROCESSING | D3DUSAGE_DYNAMIC,
        D3DUSAGE_SOFTWAREPROCESSING | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_SOFTWAREPROCESSING | D3DUSAGE_POINTS | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_SOFTWAREPROCESSING | D3DUSAGE_RTPATCHES | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_SOFTWAREPROCESSING | D3DUSAGE_NPATCHES | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_SOFTWAREPROCESSING | D3DUSAGE_POINTS | D3DUSAGE_RTPATCHES | D3DUSAGE_NPATCHES,
        D3DUSAGE_SOFTWAREPROCESSING | D3DUSAGE_WRITEONLY | D3DUSAGE_DYNAMIC,
        D3DUSAGE_SOFTWAREPROCESSING | D3DUSAGE_DONOTCLIP | D3DUSAGE_DYNAMIC,
        D3DUSAGE_SOFTWAREPROCESSING | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP | D3DUSAGE_DYNAMIC,
    };

    static const D3DPOOL Pools[] =
    {
        D3DPOOL_DEFAULT,
        D3DPOOL_MANAGED,
        D3DPOOL_SYSTEMMEM,
    };

    static const DWORD LockFlags[] =
    {
        D3DLOCK_DISCARD,
        D3DLOCK_NOSYSLOCK,
        D3DLOCK_DISCARD | D3DLOCK_NOSYSLOCK,
    };

    typedef union __TESTCASE
    {
        struct
        {
            UINT LockFlag : 4;
            UINT Pool : 3;
            UINT Usage : 6;
        };
        UINT nTest;

    } TESTCASE, *LPTESTCASE;

    static const TESTCASE tcCount =
    {
        COUNTOF(LockFlags),
        COUNTOF(Pools),
        COUNTOF(Usages),
    };


    TESTCASE tc;
    tc.nTest = (nTest - 1);

    if( nTest == (UINT)(-1) )
    {
        ClearRangeList();

        tc.nTest = 0;
        for( tc.Usage = 0; tc.Usage < tcCount.Usage; tc.Usage++ )
        {
            for( tc.Pool = 0; tc.Pool < tcCount.Pool; tc.Pool++ )
            {
                for( tc.LockFlag = 0; tc.LockFlag < tcCount.LockFlag; tc.LockFlag++ )
                {
                    AddTestRange( (tc.nTest + 1), (tc.nTest + 1) );
                }
            }
        }

        return( FALSE );
    }

    if(
        (tc.Usage >= tcCount.Usage) ||
        (tc.Pool >= tcCount.Pool) ||
        (tc.LockFlag >= tcCount.LockFlag)
    )
    {
        WriteToLog(
            TEXT("No such test (%d)\n"),
            nTest
        );

        return(FALSE);
    }


    static const UINT Size = 4096;
    static const DWORD FVF = D3DFVF_VERTEX;

    UINT Usage = Usages[tc.Usage];
    D3DPOOL Pool = Pools[tc.Pool];
    DWORD Flags = LockFlags[tc.LockFlag];

    TCHAR sz[256];

    wsprintf( sz,
        TEXT("Usage = 0x%x, Pool = %d, LockFlags = 0x%x"),
        Usage,
        Pool,
        Flags
    );


    // skip buffer if not valid
    DWORD dwSW;
    if( m_pAdapter->Devices[m_pMode->nSrcDevice].dwBehaviorFlags & D3DCREATE_MIXED_VERTEXPROCESSING )
    {
        m_pSrcDevice8->GetRenderState( D3DRS_SOFTWAREVERTEXPROCESSING, &dwSW );
    }

    if(
        (  // dynamic is not valid on managed buffers
            (Usage & D3DUSAGE_DYNAMIC) &&
            (Pool == D3DPOOL_MANAGED)
        ) ||
        (  // discard is only valid for dynamic buffers
            !(Usage & D3DUSAGE_DYNAMIC) &&
            (Flags & D3DLOCK_DISCARD)
        ) ||
        (  // software usage is not valid on hardware device
            (Usage & D3DUSAGE_SOFTWAREPROCESSING) &&
            (m_pAdapter->Devices[m_pMode->nSrcDevice].dwBehaviorFlags & D3DCREATE_HARDWARE_VERTEXPROCESSING)
        ) ||
        (  // software usage is required on mixed device with SW renderstate when pool is not sysmem
            !(Usage & D3DUSAGE_SOFTWAREPROCESSING) &&
            (m_pAdapter->Devices[m_pMode->nSrcDevice].dwBehaviorFlags & D3DCREATE_MIXED_VERTEXPROCESSING) &&
            dwSW &&
            (Pool != D3DPOOL_SYSTEMMEM)
        )
    )
    {
        return(FALSE);
    }


    ClearFrame();

    BeginTestCase( sz, nTest );


    BOOL fFail = FALSE;
    HRESULT hr;
    LPDIRECT3DVERTEXBUFFER8 pVB = NULL;
    LPDIRECT3DINDEXBUFFER8 pIB = NULL;
    LPBYTE pbVB = NULL;
    LPBYTE pbIB = NULL;

    LONG lRet;
    DEVMODE dmnew;
    DEVMODE dmcur;


    dmnew.dmSize = sizeof(dmnew);
    dmnew.dmPelsWidth = 640;
    dmnew.dmPelsHeight = 480;
    dmnew.dmBitsPerPel = 8;
    dmnew.dmFields = DM_PELSWIDTH | DM_PELSHEIGHT | DM_BITSPERPEL;

    dmcur.dmSize = sizeof(dmcur);


    do
    {
        lRet = EnumDisplaySettings(
            NULL,
            ENUM_CURRENT_SETTINGS,
            &dmcur
        );
        if( !lRet )
        {
            WriteToLog(
                TEXT("EnumDisplaySettings() returned %d\n"),
                lRet
            );
            fFail = TRUE;
            continue;
        }


        hr = m_pSrcDevice8->CreateVertexBuffer(
            Size,
            Usage,
            FVF,
            Pool,
            &pVB
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("CreateVertexBuffer(%d,0x%x,0x%x,%d,) failed, returned %s (0x%x)\n"),
                Size,
                Usage,
                FVF,
                Pool,
                DecodeHResult(hr),
                hr
            );
            fFail = TRUE;
            continue;
        }

        hr = pVB->Lock( 0, 0, &pbVB, Flags );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("Lock() failed, returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fFail = TRUE;
            continue;
        }

        // write to buffer
        try
        {
            for( INT iIndex = 0; iIndex < Size; iIndex++ )
            {
                pbVB[iIndex] = 0x49;
            }
        }
        catch(...)
        {
            WriteToLog(
                TEXT("writing to pointer from Lock() caused unhandled exception\n")
            );
            fFail = TRUE;
            continue;
        }

        // cause lost condition
        lRet = ChangeDisplaySettings( &dmnew, 0 );
        if( lRet != DISP_CHANGE_SUCCESSFUL )
        {
            WriteToLog(
                TEXT("ChangeDisplaySettings() returned %d\n"),
                lRet
            );
            fFail = TRUE;
            continue;
        }

        // check if device lost
        hr = m_pSrcDevice8->TestCooperativeLevel();
        if(
            (hr != D3DERR_DEVICELOST) &&
            (hr != D3DERR_DEVICENOTRESET)
        )
        {
            WriteToLog(
                TEXT("device is not lost; test won't be too useful\n"),
                lRet
            );
            //fFail = TRUE;
            //continue;
        }

        // write to buffer
        try
        {
            for( INT iIndex = 0; iIndex < Size; iIndex++ )
            {
                pbVB[iIndex] = iIndex & 0xff;
            }
        }
        catch(...)
        {
            WriteToLog(
                TEXT("writing to pointer after device lost caused unhandled exception\n")
            );
            fFail = TRUE;
            continue;
        }

        // read and verify
        try
        {
            for( INT iIndex = 0; iIndex < Size; iIndex++ )
            {
                if( pbVB[iIndex] != (iIndex & 0xff) )
                {
                    WriteToLog(
                        TEXT("data mismatch at offset %d: was %x, expected %x\n"),
                        iIndex,
                        pbVB[iIndex],
                        (iIndex & 0xff)
                    );
                    fFail = TRUE;
                }
            }

            if( fFail )
            {
                continue;
            }
        }
        catch(...)
        {
            WriteToLog(
                TEXT("reading from pointer after device lost caused unhandled exception\n")
            );
            fFail = TRUE;
            continue;
        }

        pVB->Unlock();
    }
    while(0);

    RELEASE(pVB);
    RELEASE(pIB);

    // restore prior display settings
    lRet = ChangeDisplaySettings( &dmcur, 0 );
    if( lRet != DISP_CHANGE_SUCCESSFUL )
    {
        WriteToLog(
            TEXT("ChangeDisplaySettings() returned %d\n"),
            lRet
        );
        fFail = TRUE;
    }

    if( fFail )
    {
        Fail();
    }

    return(false);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\VBIB\dll\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=VBIB
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

OBJLIBFILES=\
    $(OBJLIBFILES) \
    $(TEST_LIB_PATH)\l_vbib.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\videomode\bitfont.cpp ===
//-----------------------------------------------------------------------------
// FILE: BITFONT.CPP
//
// Desc: bit font rasterizer
//
// Copyright (c) 1999-2000 Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------

#include "bitfont.h"
#include <stdio.h>
#include <assert.h>
#include <D3DX8Math.h>
#ifdef XBOX
#include <xgraphics.h>
#endif
DWORD dwColorFromD3DXColor(D3DFORMAT dwSurfaceFormat, D3DCOLOR color);

// default font: 'Small Fonts' size 7
static const DWORD rgSmallFont[] =
{
    0x30304246, 0x0000000b, 0x00000060, 0x00000002,
    0x000b0200, 0x16040000, 0x06000000, 0x00000021,
    0x00002c06, 0x00370700, 0x42060000, 0x02000000,
    0x0000004d, 0x00005803, 0x00630300, 0x6e030000,
    0x04000000, 0x00000079, 0x00008402, 0x008f0300,
    0x9a020000, 0x03000000, 0x000000a5, 0x0000b005,
    0x00bb0300, 0xc6050000, 0x05000000, 0x000000d1,
    0x0000dc05, 0x00e70500, 0xf2050000, 0x05000000,
    0x000000fd, 0x00010805, 0x01130500, 0x1e020000,
    0x02000001, 0x00000129, 0x00013405, 0x013f0500,
    0x4a050000, 0x05000001, 0x00000155, 0x00016009,
    0x01760700, 0x81070000, 0x07000001, 0x0000018c,
    0x00019707, 0x01a20600, 0xad060000, 0x07000001,
    0x000001b8, 0x0001c307, 0x01ce0200, 0xd9050000,
    0x06000001, 0x000001e4, 0x0001ef05, 0x01fa0900,
    0x10070000, 0x07000002, 0x0000021b, 0x00022607,
    0x02310700, 0x3c070000, 0x06000002, 0x00000247,
    0x00025206, 0x025d0600, 0x68060000, 0x08000002,
    0x00000273, 0x00027e06, 0x02890600, 0x94060000,
    0x03000002, 0x0000029f, 0x0002aa03, 0x02b50300,
    0xc0040000, 0x05000002, 0x000002cb, 0x0002d603,
    0x02e10500, 0xec050000, 0x05000002, 0x000002f7,
    0x00030205, 0x030d0500, 0x18030000, 0x05000003,
    0x00000323, 0x00032e05, 0x03390200, 0x44020000,
    0x05000003, 0x0000034f, 0x00035a02, 0x03650800,
    0x70050000, 0x06000003, 0x0000037b, 0x00038605,
    0x03910500, 0x9c030000, 0x05000003, 0x000003a7,
    0x0003b203, 0x03bd0500, 0xc8050000, 0x06000003,
    0x000003d3, 0x0003de04, 0x03e90400, 0xf4040000,
    0x03000003, 0x000003ff, 0x00040a02, 0x04150300,
    0x20050000, 0x02000004, 0x0000042b, 0xc0c0c0c0,
    0xc0c0c0c0, 0xc0c0c0c0, 0x808080c0, 0x80c08080,
    0xf0f0c0c0, 0xf0f0a0a0, 0xf0f0f0f0, 0xd4fcfcf0,
    0x80d480d4, 0xfcfcd4d4, 0xc4ecfcfc, 0xa8e4cca8,
    0xfefcecc4, 0x9a9cfefe, 0xb8d8eef6, 0xfefefefe,
    0xaadeacde, 0xfec8b4b6, 0x9efefefe, 0xf6eadeac,
    0xfefec8f4, 0xacdefefe, 0xb4b6aabe, 0xfedebea8,
    0xdeccbefe, 0xc8d4d6ca, 0xfefebede, 0xeafe8c9e,
    0xfee8f4f6, 0xfefefefe, 0x86dafefc, 0xfefef8d4,
    0xfcfefefe, 0xd4c6dafe, 0xfefebeb8, 0xfefcfefe,
    0xf8f486fa, 0xfefefefe, 0xfafefcfe, 0xfeb8f4c6,
    0xdefefefe, 0xa69adedc, 0xfefeb8b4, 0xb4cefefe,
    0xb4b6b2b6, 0xfefefec8, 0xd694cefe, 0xc8d4d6d2,
    0xfefefefe, 0xeaf6b4ce, 0xfe80bcde, 0xcefefefe,
    0xf6eaf6b4, 0xfefec8b4, 0xcceefefe, 0xec86aace,
    0xfefefee8, 0x8ebc86fe, 0xc8b4f6b2, 0xfefefefe,
    0x8abeb4ce, 0xfec8b4b6, 0x86fefefe, 0xdeeaeef4,
    0xfefed8dc, 0xb4cefefe, 0xb4b6cab6, 0xfefefec8,
    0xb6b4cefe, 0xc8b4f6c2, 0xfefefefe, 0x82f6f4ce,
    0xfe88f4f6, 0xcefefefe, 0xf682f6f4, 0xfebe88f4,
    0xfcfefefe, 0xdcbedaee, 0xfefefee8, 0xfefcfefe,
    0xf88cfe8a, 0xfefefefe, 0xdabefcfe, 0xfeb8dcee,
    0xcefefefe, 0xdeeaf6b4, 0xfefed8fc, 0x80ff80ff,
    0x80de80e1, 0x00ab00b3, 0x80b400ab, 0x80e180df,
    0xffff80ff, 0xdbdbe6e7, 0xffbdbcc3, 0x83ffffff,
    0xbd83bdbc, 0xffff83bc, 0xbcc3ffff, 0xbcbfbfbf,
    0xffffffc3, 0xbdbc83ff, 0x83bcbdbd, 0xffffffff,
    0x85bdbc83, 0xff83bcbd, 0x83ffffff, 0xbd85bdbc,
    0xffffbfbc, 0xbcc3ffff, 0xb8bdb1bf, 0xffffffc5,
    0xbdbcbdff, 0xbdbcbd81, 0xffffffff, 0x81bdbcbd,
    0xffbdbcbd, 0xf5ffffff, 0xb5f1f5f4, 0xffffcdb4,
    0xb4b9ffff, 0xb4ad9dad, 0xffffffb9, 0xbdbcb9ff,
    0x81bcbdbd, 0x80ffffff, 0x009e80ff, 0x00ad009e,
    0x00b300ad, 0x00bf00b3, 0x80ff80ff, 0x9c9cffff,
    0xb5b5adad, 0xffffffb9, 0xbdbcc2ff, 0xc3bdbdbd,
    0xffffffff, 0x83bdbc82, 0xffbfbfbf, 0xc2ffffff,
    0xb5bdbdbc, 0xfffdc3b9, 0xbc82ffff, 0xbdbd83bd,
    0xffffffbd, 0xbdb8c6ff, 0xc5b9f9c7, 0xffffffff,
    0xefedec82, 0xffededed, 0xbaffffff, 0xb9bbb9b8,
    0xffffc5b9, 0xb8baffff, 0xedd5d7d5, 0xffffffed,
    0xddbebeff, 0xebebd5d5, 0xffffffff, 0xedd5baba,
    0xffbbbbd5, 0xbaffffff, 0xededd5ba, 0xffffefef,
    0xfa82ffff, 0xbfddedf5, 0xffffff83, 0xb5ba82ff,
    0xa3bfbdad, 0xffff9fbf, 0xadb5bae2, 0xffc3df9d,
    0x82ffffff, 0xddcdd5da, 0x9fdfc3df, 0xaad2ffff,
    0xfffdfdf5, 0xfffffff3, 0xfdfafaff, 0xfbfffdfd,
    0xffff07ff, 0xfdfddaba, 0xfffbfffd, 0xfaffffe7,
    0xc5f5cdfa, 0xffffc3b7, 0xbabaffff, 0xb7b5b58d,
    0xffffff8b, 0xcdfafaff, 0xcbb7bdb5, 0xffffffff,
    0xb5c5f2f2, 0xffc3b7b5, 0xfaffffff, 0x85b5cdfa,
    0xffffcbbf, 0xbadaffff, 0xbfa595ad, 0xffffffab,
    0xc5fafaff, 0xc3b7b5b5, 0xffff8ff7, 0x95adbaba,
    0xffb3b7b5, 0xbaffffff, 0xb595adfa, 0xffffb3b7,
    0xfabaffff, 0xb7b595ad, 0xffbfbfb3, 0xadbabaff,
    0xb3af9d9d, 0xffffffff, 0x9dadbaba, 0xffb3af9d,
    0xffffffff, 0xb6b681ff, 0xffffb6b6, 0xffffffff,
    0xb6b6b689, 0xffffffb6, 0xc5ffffff, 0xc6bababa,
    0xffffffff, 0xb28dffff, 0xbf8eb2b2, 0xffffffbf,
    0xb2b2c5ff, 0xf7f7c6b2, 0xffffffff, 0xb2b2b285,
    0xfff7f7a6, 0xc5ffffff, 0x8ef2caba, 0xffffffff,
    0xba85bfff, 0xffceb2aa, 0xffffffff, 0xb2b2b5ff,
    0xffffc6b2, 0xffffffff, 0xcab2b2b5, 0xffffffce,
    0xb9ffffff, 0xd6d6aaaa, 0xffffffff, 0xaaa9ffff,
    0xffa6a6da, 0xffffffff, 0xaaaaa9ff, 0x9fefc6a6,
    0xffffffff, 0xb6daea89, 0xffffff86, 0xc9dfdfff,
    0xc6d69aca, 0xffffdfdf, 0x8a899fdf, 0x9f86969a,
    0xbfffffdf, 0xdaaaa9bf, 0xbfbfa6b6, 0xd7ffffff,
    0xfefafaa9, 0xfffffffe, 0xa997ffff, 0xbebebaba,
    0x0000ffbf, 0x0006fe21, 0x0fffff9d, 0x00000002,
};

//----------------------------------------------------------------------------
BitFont::BitFont()
{
    // start out with our default font
    m_pBitFontInfo = (BitFontInfo *)rgSmallFont;
}

//----------------------------------------------------------------------------
BitFont::~BitFont()
{
    if(m_pBitFontInfo != (BitFontInfo *)rgSmallFont)
        delete m_pBitFontInfo;
}

#if 0

//----------------------------------------------------------------------------
// Intialize a BitFont from a specified filename
bool BitFont::Load(const WCHAR* filename)
{
	bool retval = false;
	BitFontInfo *pBitFontInfo = NULL;

	HANDLE hFile = CreateFile(filename, 
		                      GENERIC_READ, 
							  FILE_SHARE_READ, 
							  NULL, 
							  OPEN_EXISTING, 
							  FILE_ATTRIBUTE_NORMAL, 
							  NULL);


    if (hFile == INVALID_HANDLE_VALUE)
    {
		goto err;
	}

    // Get the file size.
	BY_HANDLE_FILE_INFORMATION info;

	if (!GetFileInformationByHandle(hFile, &info))
	{
		goto err;
	}

    // need at least a BITFONT and one BITFONTINFO, but the
	// file can be too big as well.
	//
	if (info.nFileSizeLow < sizeof(BitFontInfo) + sizeof(BitFontCharInfo)
		|| info.nFileSizeHigh != 0)
	{
		goto err;
	}

	// Allocate the BITFONT.
	pBitFontInfo = (BitFontInfo *)new BYTE[info.nFileSizeLow];

	if (!pBitFontInfo)
	{
		goto err;
	}

	// Load it.
	if (!ReadFile(hFile, pBitFontInfo, info.nFileSizeLow, NULL, NULL))
	{
		goto err;
	}

    // if the sig doesn't match or we don't have any bitfontinfos then bail
    if (pBitFontInfo->dwSig != BITFONT_SIG || !pBitFontInfo->cBfis)
	{
        goto err;
	}

	// Delete any old fonts.
    if(m_pBitFontInfo != (BitFontInfo *)rgSmallFont)
	{
		delete m_pBitFontInfo;
	}

	// Set the new.
	m_pBitFontInfo = pBitFontInfo;
	pBitFontInfo = NULL;

	retval = true;

err:
	if (pBitFontInfo)
	{
		delete pBitFontInfo;
	}

    if (hFile != INVALID_HANDLE_VALUE)
	{
        CloseHandle(hFile);
	}

    return retval;
}

#endif 0

//----------------------------------------------------------------------------
// Returns pixel height and width of string
void BitFont::GetTextStringLength(DWORD *pdwWidth, DWORD *pdwHeight, const WCHAR *str)
{
    if(pdwHeight)
        *pdwHeight = m_pBitFontInfo->dwFontHeight;

    if(pdwWidth)
    {
        DWORD dwWidth = 0;

        // go through the string adding up the widths
        for(const WCHAR *sz = str; *sz; sz++)
        {
            DWORD iBfi = *sz - 32;

            if(iBfi >= m_pBitFontInfo->cBfis)
                iBfi = 0;

            dwWidth += m_pBitFontInfo->rgBfi[iBfi].bWidth;
        }

        *pdwWidth = dwWidth;
    }
}

//----------------------------------------------------------------------------
void DrawText16
(
    D3DSURFACE_DESC*    pDesc,
    D3DLOCKED_RECT*     pLock,
    BitFontInfo*        m_pBitFontInfo,
    const WCHAR*        str,
    int                 iX,
    int                 iY,
    DWORD               dwFlags,
    DWORD               dwcolFore,
    DWORD               dwcolBack
)
{
    bool fdrawBkgnd = !(dwFlags & DRAWTEXT_TRANSPARENTBKGND);

    // rgColor[0] is background color
    WORD rgColor[2] = { LOWORD(dwcolBack), LOWORD(dwcolFore) };

    // pointer to font bytestream data
    BYTE *lpData = (BYTE *)&m_pBitFontInfo->rgBfi[m_pBitFontInfo->cBfis];
    // pointer to end of dest surface
    WORD *pwSurfaceMaxY = (WORD *)((BYTE *)pLock->pBits + pLock->Pitch * pDesc->Height);

    // go through the string
    for(const WCHAR *sz = str; *sz; sz++)
    {
        DWORD iBfi = *sz - 32;

        if(iBfi >= m_pBitFontInfo->cBfis)
            iBfi = 0;

        // get data for this char
        BitFontCharInfo *pbfi = &m_pBitFontInfo->rgBfi[iBfi];
        BYTE *lpBits = &lpData[pbfi->dwOffset];

        // where we're drawing
        WORD *pwSurface = (WORD *)((BYTE *)pLock->pBits + pLock->Pitch * iY) + iX;
        // max x for the line we're on
        WORD *pwSurfaceMaxX = (WORD *)((BYTE *)pLock->pBits + pLock->Pitch * iY) + pDesc->Width;

        // go through bitfont drawing each line
        for(DWORD y = 0; y < m_pBitFontInfo->dwFontHeight; y++)
        {
            DWORD dwWidth = pbfi->bWidth;

            while(dwWidth)
            {
                DWORD dwByte = *lpBits++;
                DWORD dwNumBits = min(dwWidth, 8);

                dwWidth -= dwNumBits;

                // check number of bits and clipping
                while(dwNumBits-- && (pwSurface < pwSurfaceMaxX))
                {
                    DWORD iIndex = !(dwByte & 0x80);

                    if(fdrawBkgnd || iIndex)
                        *pwSurface = rgColor[iIndex];

                    pwSurface++;
                    dwByte <<= 1;
                }
            }

            // get next line data
            pwSurface = (WORD *)((BYTE *)(pwSurface - pbfi->bWidth - dwWidth) + pLock->Pitch);
            pwSurfaceMaxX = (WORD *)((BYTE *)pwSurfaceMaxX + pLock->Pitch);

            // check clipping
            if(pwSurface >= pwSurfaceMaxY)
                break;
        }

        // move to next char position
        iX += pbfi->bWidth;
    }
}

//----------------------------------------------------------------------------
void DrawText32
(
    D3DSURFACE_DESC*    pDesc,
    D3DLOCKED_RECT*     pLock,
    BitFontInfo*        m_pBitFontInfo,
    const WCHAR*        str,
    int                 iX,
    int                 iY,
    DWORD               dwFlags,
    DWORD               dwcolFore,
    DWORD               dwcolBack
)
{
    bool fdrawBkgnd = !(dwFlags & DRAWTEXT_TRANSPARENTBKGND);
    DWORD rgColor[2] = { dwcolBack, dwcolFore };

    BYTE *lpData = (BYTE *)&m_pBitFontInfo->rgBfi[m_pBitFontInfo->cBfis];
    DWORD *pdwSurfaceMaxY = (DWORD *)((BYTE *)pLock->pBits + pLock->Pitch * pDesc->Height);

    for(const WCHAR *sz = str; *sz; sz++)
    {
        DWORD iBfi = *sz - 32;

        if(iBfi >= m_pBitFontInfo->cBfis)
            iBfi = 0;

        BitFontCharInfo *pbfi = &m_pBitFontInfo->rgBfi[iBfi];
        BYTE *lpBits = &lpData[pbfi->dwOffset];

        DWORD *pdwSurface = (DWORD *)((BYTE *)pLock->pBits + pLock->Pitch * iY) + iX;
        DWORD *pdwSurfaceMaxX = (DWORD *)((BYTE *)pLock->pBits + pLock->Pitch * iY) + pDesc->Width;

        for(DWORD y = 0; y < m_pBitFontInfo->dwFontHeight; y++)
        {
            DWORD dwWidth = pbfi->bWidth;

            while(dwWidth)
            {
                DWORD dwByte = *lpBits++;
                DWORD dwNumBits = min(dwWidth, 8);

                dwWidth -= dwNumBits;

                while(dwNumBits-- && (pdwSurface < pdwSurfaceMaxX))
                {
                    DWORD iIndex = !(dwByte & 0x80);

                    if(fdrawBkgnd || iIndex)
                        *pdwSurface = rgColor[iIndex];

                    pdwSurface++;
                    dwByte <<= 1;
                }
            }

            pdwSurface = (DWORD *)((BYTE *)(pdwSurface - pbfi->bWidth - dwWidth) + pLock->Pitch);
            pdwSurfaceMaxX = (DWORD *)((BYTE *)pdwSurfaceMaxX + pLock->Pitch);
            if(pdwSurface >= pdwSurfaceMaxY)
                break;
        }

        iX += pbfi->bWidth;
    }
}

//----------------------------------------------------------------------------
// Draw the specified text to a surface
void BitFont::DrawText
(
    IDirect3DSurface8 *pSurface,
    const WCHAR*    str,
    int             iX,
    int             iY,
    DWORD           dwFlags,
    D3DCOLOR        colFore,
    D3DCOLOR        colBack
)
{
    typedef void (*PFNDRAWTEXT)(
        D3DSURFACE_DESC*    pDesc,
        D3DLOCKED_RECT*     pLock,
        BitFontInfo*        m_pBitFontInfo,
        const WCHAR*        str,
        int                 iX,
        int                 iY,
        DWORD               dwFlags,
        DWORD               dwcolFore,
        DWORD               dwcolBack
    );

    PFNDRAWTEXT rgpfnDrawText[] =
    {
        DrawText16,
        DrawText32
    };
    D3DLOCKED_RECT lockRect;
    D3DSURFACE_DESC desc;
    (void)pSurface->GetDesc(&desc);

    if(pSurface->LockRect(&lockRect, NULL, D3DLOCK_TILED) != S_OK)
    {
        assert(FALSE);
        return;
    }

    UINT BitsPerPixel =

#ifdef XBOX
        (desc.Format == D3DFMT_X8R8G8B8 
          || desc.Format == D3DFMT_A8R8G8B8
          || desc.Format == D3DFMT_LIN_X8R8G8B8
          || desc.Format == D3DFMT_LIN_A8R8G8B8) ? 32 : 16;
#else
        (desc.Format == D3DFMT_X8R8G8B8 
          || desc.Format == D3DFMT_A8R8G8B8) ? 32 : 16;
#endif

    // use the correct draw routine for the job
    rgpfnDrawText[BitsPerPixel == 32](
        &desc,
        &lockRect,
        m_pBitFontInfo,
        str,
        iX,
        iY,
        dwFlags,
        dwColorFromD3DXColor(desc.Format, colFore),
        dwColorFromD3DXColor(desc.Format, colBack)
    );
    // Relase the lock on the surface
    pSurface->UnlockRect();
}

//----------------------------------------------------------------------------
// Given a surfaceformet and color, return the dude as a native pixel
DWORD dwColorFromD3DXColor(D3DFORMAT dwSurfaceFormat, D3DCOLOR color)
{
    DWORD dwColor;
    D3DXCOLOR col(color);

    switch(dwSurfaceFormat)
    {
    // 32-bit
    case D3DFMT_A8R8G8B8:
#ifdef XBOX
    case D3DFMT_LIN_A8R8G8B8:
#endif
        dwColor =
            (((long)(col.a * 255)) << 24) |
            (((long)(col.r * 255)) << 16) |
            (((long)(col.g * 255)) << 8) |
            (long)(col.b * 255);
        break;

    // 32-bit
    case D3DFMT_X8R8G8B8:
#ifdef XBOX
    case D3DFMT_LIN_X8R8G8B8:
#endif
        dwColor =
            0xff000000L |
            (((long)(col.r * 255)) << 16) |
            (((long)(col.g * 255)) << 8) |
            (long)(col.b * 255);
        break;

    // 16-bit
    case D3DFMT_R5G6B5:
#ifdef XBOX
    case D3DFMT_LIN_R5G6B5:
#endif
        dwColor =
            (((long)(col.r * 255)) << 11) |
            (((long)(col.g * 255)) << 5) |
            (long)(col.b * 255);
        break;
    case D3DFMT_X1R5G5B5:
#ifdef XBOX
    case D3DFMT_LIN_X1R5G5B5:
#endif
        dwColor =
            (1 << 15) |
            (((long)(col.r * 255)) << 10) |
            (((long)(col.g * 255)) << 5) |
            (long)(col.b * 255);
        break;
    case D3DFMT_A4R4G4B4:
#ifdef XBOX
    case D3DFMT_LIN_A4R4G4B4:
#endif
        dwColor =
            (((long)(col.a * 15)) << 12) |
            (((long)(col.r * 15)) << 8) |
            (((long)(col.g * 15)) << 4) |
            (long)(col.b * 15);
        break;
    case D3DFMT_A1R5G5B5:
#ifdef XBOX
    case D3DFMT_LIN_A1R5G5B5:
#endif
        dwColor =
            (((long)(col.a > .9f)) << 15) |
            (((long)(col.r * 31)) << 10) |
            (((long)(col.g * 31)) << 5) |
            (long)(col.b * 31);
        break;

    default:
        dwColor = 0;
        assert(FALSE);
        break;
    }
    return dwColor;
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\VBIB\sources.inc ===
!include ..\..\..\sources.inc

TARGETNAME=l_vbib
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SYNCHRONIZE_BLOCK=1

SOURCES=\
	CVertexIndexBufferTest.cpp  \
	NormalBuffer.cpp  \
	LockActive.cpp  \
	MultipleLocks.cpp  \
	HugeBuffer.cpp  \
#	Priority.cpp  \
#	SwitchRenderState.cpp  \
#	LostOnReset.cpp  \
#	RelockDynamic.cpp  \
#	DiscardDynamic.cpp  \
#	LockPointerAlias.cpp  \
#	LockPointerAlias7.cpp  \
#	LockPointerAlias8.cpp  \
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\VBIB\SwitchRenderState.cpp ===
//
//  SwitchRenderState.cpp
//
//  SwitchRenderState rendering tests.
//
//  ---------------------------------------------------------------------------
//
//  Copyright (C) 2000 Microsoft Corporation.
//
//

#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "cshapes.h"
#include "CVertexIndexBufferTest.h"



//-----------------------------------------------------------------------------
// Constructor / Destructor
//-----------------------------------------------------------------------------

SwitchRenderState::SwitchRenderState()
{
    m_szTestName = _T("SwitchRenderState");
    m_szCommandKey = _T("SwitchRenderState");
}

//-----------------------------------------------------------------------------
// Member Functions
//-----------------------------------------------------------------------------

UINT SwitchRenderState::TestInitialize()
{

    m_pD3D =  m_pDisplay->GetDirect3D();
/*
    if( m_pD3D8 && m_pSrcDevice8 && m_pRefDevice8 )
    {
        m_pD3D =  m_pD3D8;
        m_pDevice = m_pSrcDevice8;
        m_pRefDevice = m_pRefDevice8;
    }
    else
	{
		WriteToLog(_T("TestInitialize() - Framework devices == NULL\n"));
        return D3DTESTINIT_ABORT;
	}
*/

    // set the test range
    ExecuteTest( (UINT)(-1) );


    // skip devices that aren't mixed mode
    if( !(m_pAdapter->Devices[m_pMode->nSrcDevice].dwBehaviorFlags & D3DCREATE_MIXED_VERTEXPROCESSING) )
    {
        return( D3DTESTINIT_SKIPALL );
    }


    // create the object
    if (!m_shape.NewShape( CS_SPHERE, 10 )) {
        return D3DTESTINIT_ABORT;
    }


    // init the devices
    UINT uiRet;

    uiRet = TestInitReal(
        m_pDevice
    );
    if( uiRet != D3DTESTINIT_RUN )
    {
        return( uiRet );
    }

    uiRet = TestInitReal(
        m_pRefDevice
    );
    if( uiRet != D3DTESTINIT_RUN )
    {
        return( uiRet );
    }

    return D3DTESTINIT_RUN;
}

//-----------------------------------------------------------------------------

bool
SwitchRenderState::ExecuteTest
(
    UINT nTest
)
{

    static const UINT Usages[] =
    {
        NULL,
        D3DUSAGE_WRITEONLY,
        D3DUSAGE_DONOTCLIP,
        D3DUSAGE_POINTS,
        D3DUSAGE_RTPATCHES,
        D3DUSAGE_NPATCHES,
        D3DUSAGE_DYNAMIC,
        D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_POINTS | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_RTPATCHES | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_NPATCHES | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_POINTS | D3DUSAGE_RTPATCHES | D3DUSAGE_NPATCHES,
        D3DUSAGE_WRITEONLY | D3DUSAGE_DYNAMIC,
        D3DUSAGE_DONOTCLIP | D3DUSAGE_DYNAMIC,
        D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP | D3DUSAGE_DYNAMIC,
#ifdef D3DUSAGE_LOADONCE
        D3DUSAGE_LOADONCE,
        D3DUSAGE_LOADONCE | D3DUSAGE_WRITEONLY,
        D3DUSAGE_LOADONCE | D3DUSAGE_DONOTCLIP,
        D3DUSAGE_LOADONCE | D3DUSAGE_WRITEONLY | D3DUSAGE_DONOTCLIP,
#endif
    };

    static const D3DPOOL Pools[] =
    {
        D3DPOOL_DEFAULT,
        D3DPOOL_MANAGED,
        D3DPOOL_SYSTEMMEM,
    };


    static const D3DTEST_NORMALBUFFER TestStages[] =
    {
    //  { szName, shape, VBFVF, IBFormat, Usage, Pool },

        { TEXT("FVF = VERTEX, FMT = INDEX16"), NULL, D3DFVF_VERTEX, D3DFMT_INDEX16, NULL, D3DPOOL_DEFAULT },
    };


    typedef union __TESTCASE
    {
        struct
        {
            UINT TestStage : 3;
            UINT Pool : 3;
            UINT Usage : 5;
        };
        UINT nTest;

    } TESTCASE, *LPTESTCASE;

    static const TESTCASE tcCount =
    {
        COUNTOF(TestStages),
        COUNTOF(Pools),
        COUNTOF(Usages),
    };


    TESTCASE tc;
    tc.nTest = (nTest - 1);

    if( nTest == (UINT)(-1) )
    {
        ClearRangeList();

        tc.nTest = 0;
        for( tc.Usage = 0; tc.Usage < tcCount.Usage; tc.Usage++ )
        {
            for( tc.Pool = 0; tc.Pool < tcCount.Pool; tc.Pool++ )
            {
                for( tc.TestStage = 0; tc.TestStage < tcCount.TestStage; tc.TestStage++ )
                {
                    AddTestRange( (tc.nTest + 1), (tc.nTest + 1) );
                }
            }
        }

        return( FALSE );
    }

    if( (tc.Usage >= tcCount.Usage) ||
        (tc.Pool >= tcCount.Pool) ||
        (tc.TestStage >= tcCount.TestStage)
    )
    {
        WriteToLog(
            TEXT("No such test (%d)\n"),
            nTest
        );

        return(FALSE);
    }


    D3DTEST_NORMALBUFFER curtest;

    curtest.szName = TestStages[tc.TestStage].szName;
    curtest.VBFVF = TestStages[tc.TestStage].VBFVF;
    curtest.IBFormat = TestStages[tc.TestStage].IBFormat;
    curtest.Usage = Usages[tc.Usage];
    curtest.Pool = Pools[tc.Pool];


    if( (Usages[tc.Usage] & D3DUSAGE_DYNAMIC) && (Pools[tc.Pool] == D3DPOOL_MANAGED) )
    {
        return(FALSE);
    }

    ClearFrame();


    TCHAR sz[256];

    wsprintf( sz,
        TEXT("Usage = 0x%x, Pool = %d, %s"),
        Usages[tc.Usage],
        Pools[tc.Pool],
        TestStages[tc.TestStage].szName
    );

    BeginTestCase( sz, nTest );


    BOOL bRetTest;
    BOOL bRetRef;

    bRetTest = ExecuteReal(
        m_pDevice,
        &curtest,
        FALSE
    );

    bRetRef = ExecuteReal(
        m_pRefDevice,
        &curtest,
        TRUE
    );


    bool bRet = bRetTest && bRetRef;
    if( !bRet )
    {
        Fail();
    }

    return( bRet );
}



UINT
SwitchRenderState::TestInitReal
(
    LPDIRECT3DDEVICE8 pDevice
)
{

    HRESULT hr;


    // Set the magic matricies
    D3DMATRIX matView =
    {
        1.0f,    0,       0,       0,
        0,       1.0f,    0,       0,
        0,       0,       1.0f,    0,
        0,       0,       2.0f,/*10.0f,*/   1.0f
    };
    pDevice->SetTransform( D3DTS_VIEW, &matView );

    D3DMATRIX matProj =
    {
        2.0f,    0,       0,       0,
        0,       2.0f,    0,       0,
        0,       0,       1.0f,    1.0f,
        0,       0,       -1.0f,   0.0f
    };
    pDevice->SetTransform( D3DTS_PROJECTION, &matProj );

    // Set appropiate states
    pDevice->SetRenderState( D3DRS_AMBIENT, D3DCOLOR_XRGB( 0xff, 0xff, 0xff ) );
    pDevice->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );
    pDevice->SetRenderState( D3DRS_SRCBLEND, D3DBLEND_ONE );
    pDevice->SetRenderState( D3DRS_DESTBLEND, D3DBLEND_ONE );
    pDevice->SetRenderState( D3DRS_CLIPPING, FALSE );  // so donotclip buffers won't die in process vertices

    D3DXMATRIX d3dMat;
    D3DXMATRIX d3dMatOut;

    D3DMATRIX matWorld =
    {
        1.0f,    0,       0,       0,
        0,       1.0f,    0,       0,
        0,       0,       1.0f,    0,
        0,       0,       0,       1.0f
    };

    d3dMat = matWorld;

    D3DXMatrixMultiply(
        &d3dMatOut,
        &d3dMat,
        D3DXMatrixRotationY( &d3dMatOut, 2.0f )
    );

    d3dMat = d3dMatOut;

    D3DXMatrixMultiply(
        &d3dMatOut,
        &d3dMat,
        D3DXMatrixRotationZ( &d3dMatOut, 0.40f )
    );

    d3dMat = d3dMatOut;

    D3DXMatrixMultiply(
        &d3dMatOut,
        &d3dMat,
        D3DXMatrixRotationX( &d3dMatOut, 2.0f )
    );

    d3dMat = d3dMatOut;

    hr = pDevice->SetTransform(
        D3DTS_WORLD,
        &d3dMat
    );
    if( FAILED(hr) )
    {
        WriteToLog(
            TEXT("SetTransform() returned %s (0x%x)\n"),
            DecodeHResult(hr),
            hr
        );
        return(D3DTESTINIT_ABORT);
    }


    D3DMATERIAL8 mtrl =
    {
        { 1.0f, 0.0f, 0.0f, 0.0f },  // diffuse
        { 0.0f, 0.3f, 0.0f, 0.5f },  // ambient
        { 1.0f, 0.0f, 0.0f, 0.0f },	 // specular
        { 0.0f, 0.0f, 0.0f, 0.0f },	 // emissive
        0.0f  // sharpness (for specular)
    };

    hr = pDevice->SetMaterial(
        &mtrl
    );
    if( FAILED(hr) )
    {
        WriteToLog(
            TEXT("SetMaterial() returned %s (0x%x)\n"),
            DecodeHResult(hr),
            hr
        );
        return(D3DTESTINIT_ABORT);
    }


    return(D3DTESTINIT_RUN);
}



BOOL
SwitchRenderState::ExecuteReal
(
    LPDIRECT3DDEVICE8 pDevice,
    const D3DTEST_NORMALBUFFER *curtest,
    BOOL fReference
)
{

    HRESULT hr = D3D_OK;
    LPDIRECT3DVERTEXBUFFER8 pVB = NULL;
    LPDIRECT3DINDEXBUFFER8 pIB = NULL;
    LPBYTE pbObject = NULL;
    BOOL fRet = TRUE;
    DWORD dwSWVertProc;
    UINT iMemFreeStart;
    UINT iMemFreeEnd;


    if( !fReference )
    {
        pDevice->GetRenderState( D3DRS_SOFTWAREVERTEXPROCESSING, &dwSWVertProc );

        iMemFreeStart = GetAvailMemory( curtest->Pool );
    }

    do
    {
        hr = pDevice->CreateVertexBuffer(
            m_shape.m_nVertices * sizeof(D3DVERTEX),
            curtest->Usage | (fReference ? 0 : D3DUSAGE_SOFTWAREPROCESSING),
            D3DFVF_VERTEX,
            curtest->Pool,
            &pVB
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("CreateVertexBuffer(%d,0x%x,0x%x,%d,) failed, returned %s (0x%x)\n"),
                m_shape.m_nVertices * sizeof(D3DVERTEX),
                curtest->Usage | (fReference ? 0 : D3DUSAGE_SOFTWAREPROCESSING),
                D3DFVF_VERTEX,
                curtest->Pool,
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

        hr = pVB->Lock(
            0,
            m_shape.m_nVertices * sizeof(D3DVERTEX),
            &pbObject,
            0
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("Lock() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

        CopyMemory( pbObject, m_shape.m_pVertices, m_shape.m_nVertices * sizeof(D3DVERTEX) );

        hr = pVB->Unlock();
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("Unlock() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }


        hr = pDevice->CreateIndexBuffer(
            m_shape.m_nIndices * sizeof(WORD),
            curtest->Usage | (fReference ? 0 : D3DUSAGE_SOFTWAREPROCESSING),
            curtest->IBFormat,
            curtest->Pool,
            &pIB
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("CreateIndexBuffer(%d,0x%x,%d,%d,) failed, returned %s (0x%x)\n"),
                m_shape.m_nIndices * sizeof(WORD),
                curtest->Usage | (fReference ? 0 : D3DUSAGE_SOFTWAREPROCESSING),
                curtest->IBFormat,
                curtest->Pool,
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

        hr = pIB->Lock(
            0,
            m_shape.m_nIndices * sizeof(WORD),
            &pbObject,
            0
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("Lock() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

        CopyMemory( pbObject, m_shape.m_pIndices, m_shape.m_nIndices * sizeof(WORD) );

        hr = pIB->Unlock();
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("Unlock() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }


        hr = pDevice->SetStreamSource(
            0,
            pVB,
            sizeof(D3DVERTEX)
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("SetStreamSource(pVB) returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

        hr = pDevice->SetIndices(
            pIB,
            0
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("SetIndices() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }


        hr = pDevice->SetVertexShader( D3DFVF_VERTEX );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("SetVertexShader(D3DFVF_VERTEX) returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
            continue;
        }

        if( !fReference )
        {
            // switch render state
            hr = pDevice->SetRenderState( D3DRS_SOFTWAREVERTEXPROCESSING, !dwSWVertProc );
            if( FAILED(hr) )
            {
                WriteToLog(
                    TEXT("SetRenderState( D3DRS_SOFTWAREVERTEXPROCESSING, %d ) returned %s (0x%x)\n"),
                    !dwSWVertProc,
                    DecodeHResult(hr),
                    hr
                );
                fRet = FALSE;
                continue;
            }


            // set stream source
            LPDIRECT3DVERTEXBUFFER8 pVBRet = NULL;
            UINT iStride;

            // get and compare
            hr = pDevice->GetStreamSource(
                0,
                &pVBRet,
                &iStride
            );
            if( FAILED(hr) )
            {
                WriteToLog(
                    TEXT("GetStreamSource() returned %s (0x%x)\n"),
                    DecodeHResult(hr),
                    hr
                );
                fRet = FALSE;
            }
            else if( pVBRet != NULL )
            {
                RELEASE(pVBRet);
                WriteToLog(TEXT("GetStreamSource() didn't return NULL pointer after renderstate change\n"));
                fRet = FALSE;
            }

            hr = pDevice->SetStreamSource(
                0,
                pVB,
                sizeof(D3DVERTEX)
            );
            if( FAILED(hr) )
            {
                WriteToLog(
                    TEXT("SetStreamSource(pVB) returned %s (0x%x)\n"),
                    DecodeHResult(hr),
                    hr
                );
                fRet = FALSE;
                continue;
            }


            // set indices
            LPDIRECT3DINDEXBUFFER8 pIBRet = NULL;
            UINT iBaseIndex = 0;

            // get and compare
            hr = pDevice->GetIndices(
                &pIBRet,
                &iBaseIndex
            );
            if( FAILED(hr) )
            {
                WriteToLog(
                    TEXT("GetIndices() returned %s (0x%x)\n"),
                    DecodeHResult(hr),
                    hr
                );
                fRet = FALSE;
            }
            else if( pIBRet != NULL )
            {
                RELEASE(pIBRet);
                WriteToLog(TEXT("GetIndices() didn't return NULL pointer after renderstate change\n"));
                fRet = FALSE;
            }

            hr = pDevice->SetIndices(
                pIB,
                0
            );
            if( FAILED(hr) )
            {
                WriteToLog(
                    TEXT("SetIndices() returned %s (0x%x)\n"),
                    DecodeHResult(hr),
                    hr
                );
                fRet = FALSE;
                continue;
            }

            // set vertex shader
            DWORD dwShader;

            // get and compare
            hr = pDevice->GetVertexShader( &dwShader );
            if( FAILED(hr) )
            {
                WriteToLog(
                    TEXT("GetVertexShader() returned %s (0x%x)\n"),
                    DecodeHResult(hr),
                    hr
                );
                fRet = FALSE;
            }
            else if( dwShader != NULL )
            {
                WriteToLog(TEXT("GetVertexShader() didn't return empty handle after renderstate change\n"));
                fRet = FALSE;
            }

            hr = pDevice->SetVertexShader( D3DFVF_VERTEX );
            if( FAILED(hr) )
            {
                WriteToLog(
                    TEXT("SetVertexShader(D3DFVF_VERTEX) returned %s (0x%x)\n"),
                    DecodeHResult(hr),
                    hr
                );
                fRet = FALSE;
                continue;
            }
        }

    } while(0);


    if( !fRet )
    {
        RELEASE(pIB);
        RELEASE(pVB);

        if( !fReference )
        {
            hr = pDevice->SetRenderState( D3DRS_SOFTWAREVERTEXPROCESSING, dwSWVertProc );
            if( FAILED(hr) )
            {
                WriteToLog(
                    TEXT("SetRenderState( D3DRS_SOFTWAREVERTEXPROCESSING, dwSWVertProc ) returned %s (0x%x)\n"),
                    DecodeHResult(hr),
                    hr
                );
            }
        }

        return(fRet);
    }

    pDevice->Clear( 0, NULL, D3DCLEAR_TARGET, D3DCOLOR_XRGB(0x00, 0x00, 0x00), 0.0f, 0 );

    // Begin the scene
    if( SUCCEEDED( pDevice->BeginScene() ) )
    {
        hr = pDevice->DrawIndexedPrimitive(
            D3DPT_TRIANGLELIST,
            0,
            m_shape.m_nVertices,
            0,
            m_shape.m_nIndices / 3
        );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("DrawIndexedPrimitive() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
        }

        // End the scene.
        hr = pDevice->EndScene();
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("EndScene() returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
        }
    }

    RELEASE(pIB);
    RELEASE(pVB);

    if( !fReference )
    {
        hr = pDevice->SetRenderState( D3DRS_SOFTWAREVERTEXPROCESSING, dwSWVertProc );
        if( FAILED(hr) )
        {
            WriteToLog(
                TEXT("SetRenderState( D3DRS_SOFTWAREVERTEXPROCESSING, dwSWVertProc ) returned %s (0x%x)\n"),
                DecodeHResult(hr),
                hr
            );
            fRet = FALSE;
        }


        // get avail memory, compare to start
        iMemFreeEnd = GetAvailMemory( curtest->Pool );

        if( iMemFreeEnd < iMemFreeStart )
        {
            WriteToLog(
                TEXT("memory leaked: %d\n"),
                iMemFreeStart - iMemFreeEnd
            );
            fRet = FALSE;
        }
    }


    return(fRet);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\VBIB\exe\sources.inc ===
TARGETNAME=VBIB
TARGETTYPE=PROGRAM
TARGETPATH=obj

!include ..\..\..\..\sources.inc

#UMRES=$(TEST_RES_PATH)\3dt.res

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\d3dftest.lib \
    $(TEST_LIB_PATH)\3dmath.lib \
    $(TEST_LIB_PATH)\CShapes.lib \
    $(TEST_LIB_PATH)\l_vbib.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\videomode\videomode.cpp ===
/*++

Copyright (c) 2001 Microsoft Corporation

Module Name:

    videomode.cpp

Abstract:

    Provides a basic video mode tests to test for visible area and refresh rates

Author:

    Robert Heitkamp (robheit) 12-Apr-2001

Environment:

    Xbox only

Revision History:

    12-Apr-2001 robheit
        Initial Version

--*/

//------------------------------------------------------------------------------
//  Includes:
//------------------------------------------------------------------------------
#include <stdio.h>
#include <xtl.h>
#include "bitfont.h"

extern "C" int DebugPrint(char* format, ...);

//------------------------------------------------------------------------------
//  Constants
//------------------------------------------------------------------------------
static const float g_pi = 3.14159265359f;

//------------------------------------------------------------------------------
//  Vertex formats
//------------------------------------------------------------------------------
struct VERTEX
{
    float       x, y, z, rhw;
    D3DCOLOR    color;
};
#define FVF_VERTEX (D3DFVF_XYZRHW | D3DFVF_DIFFUSE)

//------------------------------------------------------------------------------
//  Joystick
//------------------------------------------------------------------------------
struct DMTHJoystick
{
    float   leftStickX;
    float   leftStickY;
    float   rightStickX;
    float   rightStickY;
    float   a;
    float   b;
    float   x;
    float   y;
    float   black;
    float   white;
    float   leftTrigger;
    float   rightTrigger;
    BOOL    back;
    BOOL    start;
    BOOL    dPadLeft;
    BOOL    dPadRight;
    BOOL    dPadUp;
    BOOL    dPadDown;
    BOOL    leftStick;
    BOOL    rightStick;
};
static const DWORD DMTH_JOYBUTTON_X         = 0x00000001;
static const DWORD DMTH_JOYBUTTON_Y         = 0x00000002;
static const DWORD DMTH_JOYBUTTON_WHITE     = 0x00000004;
static const DWORD DMTH_JOYBUTTON_A         = 0x00000008;
static const DWORD DMTH_JOYBUTTON_B         = 0x00000010;
static const DWORD DMTH_JOYBUTTON_BLACK     = 0x00000020;
static const DWORD DMTH_JOYBUTTON_LTRIG     = 0x00000040;
static const DWORD DMTH_JOYBUTTON_RTRIG     = 0x00000080;
static const DWORD DMTH_JOYBUTTON_LSTICK    = 0x00000100;
static const DWORD DMTH_JOYBUTTON_RSTICK    = 0x00000200;
static const DWORD DMTH_JOYBUTTON_UP        = 0x00000400;
static const DWORD DMTH_JOYBUTTON_DOWN      = 0x00000800;
static const DWORD DMTH_JOYBUTTON_LEFT      = 0x00001000;
static const DWORD DMTH_JOYBUTTON_RIGHT     = 0x00002000;
static const DWORD DMTH_JOYBUTTON_BACK      = 0x00004000;
static const DWORD DMTH_JOYBUTTON_START     = 0x00008000;
static const DWORD DMTH_JOYBUTTON_ALL       = 0xffffffff;

//------------------------------------------------------------------------------
//  Global Variables:
//------------------------------------------------------------------------------
static double               g_lastTime;
static UINT                 g_numModes;
static UINT                 g_currentMode;
static BitFont              g_font;
static UINT                 g_visibleWidth;
static UINT                 g_visibleHeight;
static UINT                 g_visibleHDTVWidth;
static UINT                 g_visibleHDTVHeight;
static double               g_frequency;
static DMTHJoystick         g_joysticks[4];
static VERTEX               g_bw1Verts[512];
static VERTEX               g_bw2Verts[512];
static VERTEX               g_redVerts[512];
static VERTEX               g_blueVerts[512];
static VERTEX               g_greenVerts[512];
static VERTEX               g_box[4];
static VERTEX               g_circle1[722];
static VERTEX               g_circle2[722];
static BOOL                 g_inputInitialized  = FALSE;
static HANDLE               g_inputHandles[4]   = {NULL, NULL, NULL, NULL};
static double               g_frameRate         = 0.0f;
static UINT                 g_frame             = 0;
static double               g_elapsedTime       = 0.0f;
static IDirect3DSurface8*   g_backBuffer        = NULL;
static IDirect3D8*          g_d3d               = NULL;
static IDirect3DDevice8*    g_device            = NULL;
static D3DDISPLAYMODE*      g_modeList          = NULL;
static D3DFORMAT*           g_depthFormat       = NULL;
static VERTEX               g_verts[5]          = 
{
    { 0.0f, 0.0f, 0.0f, 1.0f, 0xffff0000 },
    { 0.0f, 0.0f, 0.0f, 1.0f, 0xffff0000 },
    { 0.0f, 0.0f, 0.0f, 1.0f, 0xffff0000 },
    { 0.0f, 0.0f, 0.0f, 1.0f, 0xffff0000 },
    { 0.0f, 0.0f, 0.0f, 1.0f, 0xffff0000 }
};
static VERTEX               g_hdtvVerts[5]		= 
{
    { 0.0f, 0.0f, 0.0f, 1.0f, 0xff0000ff },
    { 0.0f, 0.0f, 0.0f, 1.0f, 0xff0000ff },
    { 0.0f, 0.0f, 0.0f, 1.0f, 0xff0000ff },
    { 0.0f, 0.0f, 0.0f, 1.0f, 0xff0000ff },
    { 0.0f, 0.0f, 0.0f, 1.0f, 0xff0000ff }
};

//------------------------------------------------------------------------------
//  Function Declarations
//------------------------------------------------------------------------------
static void DrawTestPattern(void);
static BOOL Initialize(void);
static BOOL CreateDevice(void);
static void Cleanup(void);
static void CreateTestPattern(void);
static const WCHAR* FormatToWChar(DWORD);
static const PCHAR FormatToString(DWORD);
static BOOL IsAnyButtonDown(void);
static void GetJoystickStates(void);
static BOOL GetJoystickState(UINT);
static BOOL IsPortValid(UINT);
static void OpenInput(void);
static void ReleaseInput(UINT);
static void OpenInput(UINT);
static void ReleaseInput(void);
static DWORD UINTToPort(UINT);
static DWORD HSV2D3DCOLOR(float, float, float);
static BOOL IsBButtonDown(void);
static BOOL IsAButtonDown(void);
static BOOL IsQuitButtonDown(void);

//------------------------------------------------------------------------------
//	Reboot Code
//------------------------------------------------------------------------------
typedef enum _FIRMWARE_REENTRY 
{
    HalHaltRoutine,
    HalRebootRoutine,
    HalQuickRebootRoutine,
    HalKdRebootRoutine,
    HalMaximumRoutine
} FIRMWARE_REENTRY, *PFIRMWARE_REENTRY;

extern "C" VOID HalReturnToFirmware(IN FIRMWARE_REENTRY Routine);

//------------------------------------------------------------------------------
//  main
//------------------------------------------------------------------------------
void __cdecl 
main(void)
/*++

Routine Description:

    Main routine. Initializes, loops and draws

Arguments:

    None

Return Value:

    None

--*/
{
    static BOOL switchingMode = FALSE;

    // Initialize
    if(Initialize())
    {
        Cleanup();
        return; 
    }

    // Create the first device
    if(CreateDevice())
    {
        Cleanup();
        return;
    }

    // Create the data
    CreateTestPattern();
    
    // Create data for the 
    while(1)
    {
        // Poll for input
        if(IsQuitButtonDown())
			HalReturnToFirmware(HalQuickRebootRoutine);

        else if(IsAButtonDown())
        {
            if(!switchingMode)
            {
                ++g_currentMode;
                if(g_currentMode == g_numModes)
                    g_currentMode = 0;

                // Create a new device
                if(CreateDevice())
                {
                    Cleanup();
                    return;
                }

                // Create a new test pattern
                CreateTestPattern();

                switchingMode = TRUE;
            }
        }

		else if(IsBButtonDown())
		{
            if(!switchingMode)
            {
				if(g_currentMode == 0)
					g_currentMode = g_numModes-1;
				else
					--g_currentMode;

                // Create a new device
                if(CreateDevice())
                {
                    Cleanup();
                    return;
                }

                // Create a new test pattern
                CreateTestPattern();

                switchingMode = TRUE;
            }
        }
        else
            switchingMode = FALSE;

        // Draw
        DrawTestPattern();
    }
}

//------------------------------------------------------------------------------
//  Initialize
//------------------------------------------------------------------------------
static BOOL
Initialize(void)
/*++

Routine Description:

    Initializes the device

Arguments:

    None

Return Value:

    None

--*/
{
    UINT        i;
    UINT        ii;
    UINT        index;
    D3DFORMAT   formats[]   = 
    { 
        D3DFMT_D24S8, 
        D3DFMT_D16, 
        D3DFMT_F24S8, 
        D3DFMT_F16, 
        D3DFMT_D16_LOCKABLE 
    };
    UINT        numFormats = sizeof(formats) / sizeof(formats[0]);
    
    // Create an instance of a Direct3D8 object 
    g_d3d = Direct3DCreate8(D3D_SDK_VERSION);
    if(g_d3d == NULL)
        return TRUE;

    // Query the number of display modes
    g_numModes  = g_d3d->GetAdapterModeCount(D3DADAPTER_DEFAULT);
    if(g_numModes  == 0)
        return TRUE;

    // Enumerate the adapter modes
    g_modeList      = new D3DDISPLAYMODE [g_numModes];
    g_depthFormat   = new D3DFORMAT [g_numModes];
    for(index=0, i=0; i<g_numModes; ++i)
    {
        if(g_d3d->EnumAdapterModes(D3DADAPTER_DEFAULT, i, &g_modeList[index]) == D3D_OK)
        {
            // Find the first valid depth format for the mode
            for(ii=0; ii<numFormats; ++ii)
            {
                // Is it a good match?
                if(g_d3d->CheckDepthStencilMatch(D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL,
                                                 g_modeList[index].Format,
                                                 g_modeList[index].Format,
                                                 formats[ii]) == D3D_OK)
                {
                    g_depthFormat[index] = formats[ii];
                    ++index;
                    break;
                }
            }
        }
    }

    // Adjust the number of modes in the event IDirect3D8::EnumAdapterModes 
    // failed for a particular mode
    g_numModes = index;
    
    // Set the starting mode
    g_currentMode = 0;

    // Initialize input
    XDEVICE_PREALLOC_TYPE   devicePreallocType = {XDEVICE_TYPE_GAMEPAD, 4};
    XInitDevices(1, &devicePreallocType);
    OpenInput();

    // Query the performance frequency
    LONGLONG frequency;
    QueryPerformanceFrequency((LARGE_INTEGER*)&frequency);
    g_frequency = (double)frequency;

    // Initialize the color bars
    for(ii=0, i=0; i<256; ++i)
    {
        g_bw1Verts[ii].z        = 0.0f;
        g_bw1Verts[ii].rhw      = 1.0f;
        g_bw1Verts[ii].color    = (i << 16) | (i << 8) | i;
        g_bw2Verts[ii].z        = 0.0f;
        g_bw2Verts[ii].rhw      = 1.0f;
        g_bw2Verts[ii].color    = ((255 - i) << 16) | ((255 - i) << 8) | (255 - i);
        g_redVerts[ii].z        = 0.0f;
        g_redVerts[ii].rhw      = 1.0f;
        g_redVerts[ii].color    = (i << 16);
        g_greenVerts[ii].z      = 0.0f;
        g_greenVerts[ii].rhw    = 1.0f;
        g_greenVerts[ii].color  = (i << 8);
        g_blueVerts[ii].z       = 0.0f;
        g_blueVerts[ii].rhw     = 1.0f;
        g_blueVerts[ii++].color = i;

        g_bw1Verts[ii].z        = 0.0f;
        g_bw1Verts[ii].rhw      = 1.0f;
        g_bw1Verts[ii].color    = (i << 16) | (i << 8) | i;
        g_bw2Verts[ii].z        = 0.0f;
        g_bw2Verts[ii].rhw      = 1.0f;
        g_bw2Verts[ii].color    = ((255 - i) << 16) | ((255 - i) << 8) | (255 - i);
        g_redVerts[ii].z        = 0.0f;
        g_redVerts[ii].rhw      = 1.0f;
        g_redVerts[ii].color    = (i << 16);
        g_greenVerts[ii].z      = 0.0f;
        g_greenVerts[ii].rhw    = 1.0f;
        g_greenVerts[ii].color  = (i << 8);
        g_blueVerts[ii].z       = 0.0f;
        g_blueVerts[ii].rhw     = 1.0f;
        g_blueVerts[ii++].color = i;
    }

    // Center 1:1 box
    g_box[0].z      = 0.5f;
    g_box[0].rhw    = 1.0f;
    g_box[0].color  = 0xff000000;
    g_box[1].z      = 0.5f;
    g_box[1].rhw    = 1.0f;
    g_box[1].color  = 0xff000000;
    g_box[2].z      = 0.5f;
    g_box[2].rhw    = 1.0f;
    g_box[2].color  = 0xff000000;
    g_box[3].z      = 0.5f;
    g_box[3].rhw    = 1.0f;
    g_box[3].color  = 0xff000000;

    // Center 1:1 circles
    for(i=0; i<722; ++i)
    {
        g_circle1[i].z      = 0.25f;
        g_circle1[i].rhw    = 1.0f;
        g_circle1[i].color  = 0xffffffff;
        g_circle2[i].z      = 0.0f;
        g_circle2[i].rhw    = 1.0f;
        g_circle2[i].color  = 0xffffffff;
    }

    // Query the timer
    LONGLONG    timer;
    QueryPerformanceCounter((LARGE_INTEGER*)&timer);
    g_lastTime = (double)timer / g_frequency;

    return FALSE;
}

//------------------------------------------------------------------------------
//  CreateDevice
//------------------------------------------------------------------------------
static BOOL
CreateDevice(void)
/*++

Routine Description:

    Creates a device for the current mode

Arguments:

    None

Return Value:

    TRUE on error, FALSE otherwise

--*/
{
    D3DPRESENT_PARAMETERS   d3dpp;
	CHAR					buffer[256];
    
    // Release the previous device
    if(g_device)
        g_device->Release();
    
    // Setup the present parameters
    ZeroMemory(&d3dpp, sizeof(D3DPRESENT_PARAMETERS));
    d3dpp.BackBufferWidth                   = g_modeList[g_currentMode].Width;
    d3dpp.BackBufferHeight                  = g_modeList[g_currentMode].Height;
    d3dpp.BackBufferFormat                  = g_modeList[g_currentMode].Format;
    d3dpp.BackBufferCount                   = 1;
    d3dpp.Flags                             = g_modeList[g_currentMode].Flags;
    d3dpp.MultiSampleType                   = D3DMULTISAMPLE_NONE;
    d3dpp.SwapEffect                        = D3DSWAPEFFECT_DISCARD;
    d3dpp.hDeviceWindow                     = NULL;
    d3dpp.Windowed                          = FALSE;
    d3dpp.EnableAutoDepthStencil            = TRUE;
    d3dpp.AutoDepthStencilFormat            = g_depthFormat[g_currentMode];
    d3dpp.FullScreen_RefreshRateInHz        = g_modeList[g_currentMode].RefreshRate;
    d3dpp.FullScreen_PresentationInterval   = D3DPRESENT_INTERVAL_ONE;

    // Create the device
    if(g_d3d->CreateDevice(D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL, NULL, 
                           D3DCREATE_HARDWARE_VERTEXPROCESSING, &d3dpp, 
                           &g_device) != D3D_OK)
    {
        return TRUE;
    }

    // Get the back buffer
    g_device->GetBackBuffer(0, D3DBACKBUFFER_TYPE_MONO, &g_backBuffer);

    // Setup a few device parameters
    float lw = 1.0f;
    g_device->SetRenderState(D3DRS_LINEWIDTH, *(DWORD*)&lw);

    // Initialize a few things
    g_frameRate     = 0.0f;
    g_frame         = 0;
    g_elapsedTime   = 0.0f;

	// Debug print relevent information
	sprintf(buffer, "videomode: %dx%d %s %dHz", d3dpp.BackBufferWidth, 
			d3dpp.BackBufferHeight,
			FormatToString(d3dpp.BackBufferFormat),
			d3dpp.FullScreen_RefreshRateInHz);

	if(g_modeList[g_currentMode].Flags & D3DPRESENTFLAG_WIDESCREEN)
		strcat(buffer, " Widescreen");
	if(g_modeList[g_currentMode].Flags & D3DPRESENTFLAG_INTERLACED)
		strcat(buffer, " Interlaced");
	if(g_modeList[g_currentMode].Flags & D3DPRESENTFLAG_PROGRESSIVE)
		strcat(buffer, " Progressive");
	if(g_modeList[g_currentMode].Flags & D3DPRESENTFLAG_LOCKABLE_BACKBUFFER)
		strcat(buffer, " LockableBackbuffer");
	if(g_modeList[g_currentMode].Flags & D3DPRESENTFLAG_FIELD)
		strcat(buffer, " Field");
	if(g_modeList[g_currentMode].Flags & D3DPRESENTFLAG_10X11PIXELASPECTRATIO)
		strcat(buffer, " 10x11");
	strcat(buffer, "\n");

	DebugPrint(buffer);

    return FALSE;
}

//------------------------------------------------------------------------------
//  DrawTestPattern
//------------------------------------------------------------------------------
static void
DrawTestPattern(void)
/*++

Routine Description:

    Draws the test pattern

Arguments:

    None

Return Value:

    None

--*/
{
    WCHAR           buffer[128];
    DWORD           width;
    DWORD           height;
    LONGLONG        timer;
    double          currentTime;
    int             centerX = g_modeList[g_currentMode].Width / 2;
    int             centerY = g_modeList[g_currentMode].Height / 2;
    int             y;
	float			inc = (g_modeList[g_currentMode].Height <= 240) ? 1.0f : 1.25f;

    // Clear the viewport
    g_device->Clear(0L, NULL, D3DCLEAR_TARGET | D3DCLEAR_ZBUFFER, 0xffffffff, 1.0f, 0L);

    // Begin the scene
    g_device->BeginScene();

    // Set the vertex shader for the lines
    g_device->SetVertexShader(FVF_VERTEX);

    // Draw the visible lines
    g_device->DrawPrimitiveUP(D3DPT_LINESTRIP, 4, g_verts, sizeof(VERTEX));
    g_device->DrawPrimitiveUP(D3DPT_LINESTRIP, 4, g_hdtvVerts, sizeof(VERTEX));

    // Draw the color bars
    g_device->DrawPrimitiveUP(D3DPT_LINELIST, 256, g_bw1Verts, sizeof(VERTEX));
    g_device->DrawPrimitiveUP(D3DPT_LINELIST, 256, g_bw2Verts, sizeof(VERTEX));
    g_device->DrawPrimitiveUP(D3DPT_LINELIST, 256, g_redVerts, sizeof(VERTEX));
    g_device->DrawPrimitiveUP(D3DPT_LINELIST, 256, g_greenVerts, sizeof(VERTEX));
    g_device->DrawPrimitiveUP(D3DPT_LINELIST, 256, g_blueVerts, sizeof(VERTEX));

    // Draw the 1:1 box
    g_device->DrawPrimitiveUP(D3DPT_TRIANGLESTRIP, 2, g_box, sizeof(VERTEX));

    // Draw the 1:1 circles
    g_device->DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 720, g_circle1, sizeof(VERTEX));
    g_device->DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 720, g_circle2, sizeof(VERTEX));

    // Start for labeling
    g_font.GetTextStringLength(&width, &height, L"XBOX");
    y = centerY - (int)((float)height * 9.0f);

    // Mode
    swprintf(buffer, L"Mode:");
    g_font.GetTextStringLength(&width, &height, buffer);
    g_font.DrawText(g_backBuffer, buffer, centerX - width - 10, y, 0, 0xff000000, 0xffffffff);
    swprintf(buffer, L"%d / %d", g_currentMode+1, g_numModes);
    g_font.DrawText(g_backBuffer, buffer, centerX - 5, y, 0, 0xff0000ff, 0xffffffff);
    y += (int)((float)height * inc);

    // Width
    swprintf(buffer, L"Width:");
    g_font.GetTextStringLength(&width, &height, buffer);
    g_font.DrawText(g_backBuffer, buffer, centerX - width - 10, y, 0, 0xff000000, 0xffffffff);
    swprintf(buffer, L"%d - %d - %d", g_modeList[g_currentMode].Width, g_visibleHDTVWidth, g_visibleWidth);
    g_font.DrawText(g_backBuffer, buffer, centerX - 5, y, 0, 0xff0000ff, 0xffffffff);
    y += (int)((float)height * inc);

    // Height
    swprintf(buffer, L"Height:");
    g_font.GetTextStringLength(&width, &height, buffer);
    g_font.DrawText(g_backBuffer, buffer, centerX - width - 10, y, 0, 0xff000000, 0xffffffff);
    swprintf(buffer, L"%d - %d - %d", g_modeList[g_currentMode].Height, g_visibleHDTVHeight, g_visibleHeight);
    g_font.DrawText(g_backBuffer, buffer, centerX - 5, y, 0, 0xff0000ff, 0xffffffff);
    y += (int)((float)height * inc);

    // Format
    swprintf(buffer, L"Format:");
    g_font.GetTextStringLength(&width, &height, buffer);
    g_font.DrawText(g_backBuffer, buffer, centerX - width - 10, y, 0, 0xff000000, 0xffffffff);
    swprintf(buffer, L"%s", FormatToWChar(g_modeList[g_currentMode].Format));
    g_font.DrawText(g_backBuffer, buffer, centerX - 5, y, 0, 0xff0000ff, 0xffffffff);
    y += (int)((float)height * inc);

    // Widescreen
    swprintf(buffer, L"Widescreen:");
    g_font.GetTextStringLength(&width, &height, buffer);
    g_font.DrawText(g_backBuffer, buffer, centerX - width - 10, y, 0, 0xff000000, 0xffffffff);
    swprintf(buffer, L"%s", (g_modeList[g_currentMode].Flags & D3DPRESENTFLAG_WIDESCREEN) ? L"Yes" : L"No");
    g_font.DrawText(g_backBuffer, buffer, centerX - 5, y, 0, 0xff0000ff, 0xffffffff);
    y += (int)((float)height * inc);

    // Interlaced
    swprintf(buffer, L"Interlaced:");
    g_font.GetTextStringLength(&width, &height, buffer);
    g_font.DrawText(g_backBuffer, buffer, centerX - width - 10, y, 0, 0xff000000, 0xffffffff);
    swprintf(buffer, L"%s", (g_modeList[g_currentMode].Flags & D3DPRESENTFLAG_INTERLACED) ? L"Yes" : L"No");
    g_font.DrawText(g_backBuffer, buffer, centerX - 5, y, 0, 0xff0000ff, 0xffffffff);
    y += (int)((float)height * inc);

    // Progressive
    swprintf(buffer, L"Progressive:");
    g_font.GetTextStringLength(&width, &height, buffer);
    g_font.DrawText(g_backBuffer, buffer, centerX - width - 10, y, 0, 0xff000000, 0xffffffff);
    swprintf(buffer, L"%s", (g_modeList[g_currentMode].Flags & D3DPRESENTFLAG_PROGRESSIVE) ? L"Yes" : L"No");
    g_font.DrawText(g_backBuffer, buffer, centerX - 5, y, 0, 0xff0000ff, 0xffffffff);
    y += (int)((float)height * inc);

    // Lockable Backbuffer
    swprintf(buffer, L"Lockable Backbuffer:");
    g_font.GetTextStringLength(&width, &height, buffer);
    g_font.DrawText(g_backBuffer, buffer, centerX - width - 10, y, 0, 0xff000000, 0xffffffff);
    swprintf(buffer, L"%s", (g_modeList[g_currentMode].Flags & D3DPRESENTFLAG_LOCKABLE_BACKBUFFER) ? L"Yes" : L"No");
    g_font.DrawText(g_backBuffer, buffer, centerX - 5, y, 0, 0xff0000ff, 0xffffffff);
    y += (int)((float)height * inc);

    // Field
    swprintf(buffer, L"Field:");
    g_font.GetTextStringLength(&width, &height, buffer);
    g_font.DrawText(g_backBuffer, buffer, centerX - width - 10, y, 0, 0xff000000, 0xffffffff);
    swprintf(buffer, L"%s", (g_modeList[g_currentMode].Flags & D3DPRESENTFLAG_FIELD) ? L"Yes" : L"No");
    g_font.DrawText(g_backBuffer, buffer, centerX - 5, y, 0, 0xff0000ff, 0xffffffff);
    y += (int)((float)height * inc);

    // 10x11 Aspect
    swprintf(buffer, L"10x11 Aspect:");
    g_font.GetTextStringLength(&width, &height, buffer);
    g_font.DrawText(g_backBuffer, buffer, centerX - width - 10, y, 0, 0xff000000, 0xffffffff);
    swprintf(buffer, L"%s", (g_modeList[g_currentMode].Flags & D3DPRESENTFLAG_10X11PIXELASPECTRATIO) ? L"Yes" : L"No");
    g_font.DrawText(g_backBuffer, buffer, centerX - 5, y, 0, 0xff0000ff, 0xffffffff);
    y += (int)((float)height * inc);

    // Refresh Rate
    swprintf(buffer, L"Refresh Rate:");
    g_font.GetTextStringLength(&width, &height, buffer);
    g_font.DrawText(g_backBuffer, buffer, centerX - width - 10, y, 0, 0xff000000, 0xffffffff);
    if(g_frameRate != 0.0f)
        swprintf(buffer, L"%d Hz (%.2lf fps)", g_modeList[g_currentMode].RefreshRate, g_frameRate);
    else
        swprintf(buffer, L"%d Hz", g_modeList[g_currentMode].RefreshRate);
    g_font.DrawText(g_backBuffer, buffer, centerX - 5, y, 0, 0xff0000ff, 0xffffffff);
    y += (int)((float)height * 2.0f);

    // Info
    DWORD w1, w2, w3, w4, w5;
    g_font.GetTextStringLength(&w1, &height, L"The ");
    g_font.GetTextStringLength(&w2, &height, L"red (normal) ");
    g_font.GetTextStringLength(&w3, &height, L"and ");
    g_font.GetTextStringLength(&w4, &height, L"blue (HDTV) ");
    g_font.GetTextStringLength(&w5, &height, L"boxes represent");
    width = w1 + w2 + w3 + w4 + w5;
    g_font.DrawText(g_backBuffer, L"The ", centerX - (int)(width / 2), y, 0, 0xff000000, 0xffffffff);
    g_font.DrawText(g_backBuffer, L"red (normal)", centerX - (int)(width / 2) + w1, y, 0, 0xffff0000, 0xffffffff);
    g_font.DrawText(g_backBuffer, L"and ", centerX - (int)(width / 2) + w1 + w2, y, 0, 0xff000000, 0xffffffff);
    g_font.DrawText(g_backBuffer, L"blue (HDTV)", centerX - (int)(width / 2) + w1 + w2 + w3, y, 0, 0xff0000ff, 0xffffffff);
    g_font.DrawText(g_backBuffer, L"boxes represent", 
                    centerX - (int)(width / 2) + w1 + w2 + w3 + w4, y, 0, 0xff000000, 0xffffffff);
    y += (int)((float)height * 1.0f);
    swprintf(buffer, L"the minimum screen resolutions and should be"); // completely visible for their respective modes");
    g_font.GetTextStringLength(&width, &height, buffer);
    g_font.DrawText(g_backBuffer, buffer, centerX - (int)(width / 2), y, 0, 0xff000000, 0xffffffff);
    y += (int)((float)height * 1.0f);

    swprintf(buffer, L"completely visible for their respective modes");
    g_font.GetTextStringLength(&width, &height, buffer);
    g_font.DrawText(g_backBuffer, buffer, centerX - (int)(width / 2), y, 0, 0xff000000, 0xffffffff);
    y += (int)((float)height * 1.5f);

    // Continue
    swprintf(buffer, L"Press A for next mode, or");
    g_font.GetTextStringLength(&width, &height, buffer);
    g_font.DrawText(g_backBuffer, buffer, centerX - (int)(width / 2), y, 0, 0xffff0000, 0xffffffff);
    y += (int)((float)height * 1.0f);

    swprintf(buffer, L"press B for previous mode");
    g_font.GetTextStringLength(&width, &height, buffer);
    g_font.DrawText(g_backBuffer, buffer, centerX - (int)(width / 2), y, 0, 0xffff0000, 0xffffffff);
    y += (int)((float)height * 1.5f);

    // End the scene
    g_device->EndScene();

    // Update the screen
    g_device->Present(NULL, NULL, NULL, NULL);
    
    // Stop timer
    QueryPerformanceCounter((LARGE_INTEGER*)&timer);
    currentTime     = (double)timer / g_frequency;
    g_elapsedTime   += currentTime - g_lastTime;
    g_lastTime      = currentTime;

    // Frame counter
    ++g_frame;

    // Frame rate calculations (twice per second)
    if(g_elapsedTime > 1.0)
    {
        g_frameRate     = (double)g_frame / g_elapsedTime;
        g_frame         = 0;
        g_elapsedTime   = 0.0;
    }
}

//------------------------------------------------------------------------------
//  Cleaup
//------------------------------------------------------------------------------
static void
Cleanup(void)
/*++

Routine Description:

    Frees all global resources

Arguments:

    None

Return Value:

    None

--*/
{
    // Mode list
    if(g_modeList)
    {
        delete [] g_modeList;
        g_modeList = NULL;
    }

    // Depth format list
    if(g_depthFormat)
    {
        delete [] g_depthFormat;
        g_depthFormat = NULL;
    }

    // IDirect3DDevice8
    if(g_device)
    {
        g_device->Release();
        g_device = NULL;
    }

    // IDirect3D8
    if(g_d3d)
    {
        g_d3d->Release();
        g_d3d = NULL;
    }

    // Input devices
    ReleaseInput();
}

//------------------------------------------------------------------------------
//  CreateTestPattern
//------------------------------------------------------------------------------
static void
CreateTestPattern(void)
/*++

Routine Description:

    Creats the test pattern data

Arguments:

    None

Return Value:

    None

--*/
{
    UINT    i;
    UINT    ii;
    float   y;
    float   x;
    float   visibleWidth    = (float)g_modeList[g_currentMode].Width * 0.85f;
    float   visibleHeight   = (float)g_modeList[g_currentMode].Height * 0.85f;
    float   dx              = ((float)g_modeList[g_currentMode].Width - visibleWidth) / 2.0f;
    float   dy              = ((float)g_modeList[g_currentMode].Height - visibleHeight) / 2.0f;
    float   x0              = dx;
    float   x1              = dx + visibleWidth - 1.0f;
    float   y0              = dy;
    float   y1              = dy + visibleHeight - 1.0f;
	float	yInc;
	
    // Visible vertices
    g_verts[0].x    = x0;
    g_verts[0].y    = y0;
    g_verts[1].x    = x1;
    g_verts[1].y    = y0;
    g_verts[2].x    = x1;
    g_verts[2].y    = y1;
    g_verts[3].x    = x0;
    g_verts[3].y    = y1;
    g_verts[4].x    = x0;
    g_verts[4].y    = y0;

    // Visible region
    g_visibleWidth  = (UINT)visibleWidth;
    g_visibleHeight = (UINT)visibleHeight;

    visibleWidth    = (float)g_modeList[g_currentMode].Width * 0.95f;
    visibleHeight   = (float)g_modeList[g_currentMode].Height * 0.95f;
    dx              = ((float)g_modeList[g_currentMode].Width - visibleWidth) / 2.0f;
    dy              = ((float)g_modeList[g_currentMode].Height - visibleHeight) / 2.0f;
    x0              = dx;
    x1              = dx + visibleWidth - 1.0f;
    y0              = dy;
    y1              = dy + visibleHeight - 1.0f;

    // Visible HDTV vertices
    g_hdtvVerts[0].x    = x0;
    g_hdtvVerts[0].y    = y0;
    g_hdtvVerts[1].x    = x1;
    g_hdtvVerts[1].y    = y0;
    g_hdtvVerts[2].x    = x1;
    g_hdtvVerts[2].y    = y1;
    g_hdtvVerts[3].x    = x0;
    g_hdtvVerts[3].y    = y1;
    g_hdtvVerts[4].x    = x0;
    g_hdtvVerts[4].y    = y0;

    // Visible region
    g_visibleHDTVWidth  = (UINT)visibleWidth;
    g_visibleHDTVHeight = (UINT)visibleHeight;

	if(g_modeList[g_currentMode].Height > 256)
	{
		y = (float)((g_modeList[g_currentMode].Height - 256) / 2);
		yInc = 1.0;
	}
	else
	{
		y = (float)(g_modeList[g_currentMode].Height / 2) - ((float)g_modeList[g_currentMode].Height * 0.25f);
		yInc = (float)g_modeList[g_currentMode].Height * 0.5f / 256.0f;
	}
    x = (float)((g_modeList[g_currentMode].Width - g_visibleWidth) / 2);

    // Color bars (centered)
    for(ii=0, i=0; i<256; ++i, y+=yInc)
    {
        g_bw1Verts[ii].x    = g_modeList[g_currentMode].Width - x - 20.0f;
        g_bw1Verts[ii].y    = y;
        g_bw2Verts[ii].x    = g_modeList[g_currentMode].Width - x - 60.0f;
        g_bw2Verts[ii].y    = y;
        g_redVerts[ii].x    = x + 20.0f;
        g_redVerts[ii].y    = y;
        g_greenVerts[ii].x  = x + 50.0f;
        g_greenVerts[ii].y  = y;
        g_blueVerts[ii].x   = x + 80.0f;
        g_blueVerts[ii++].y = y;

        g_bw1Verts[ii].x    = g_modeList[g_currentMode].Width - x - 50.0f;
        g_bw1Verts[ii].y    = y;
        g_bw2Verts[ii].x    = g_modeList[g_currentMode].Width - x - 90.0f;
        g_bw2Verts[ii].y    = y;
        g_redVerts[ii].x    = x + 40.0f;
        g_redVerts[ii].y    = y;
        g_greenVerts[ii].x  = x + 70.0f;
        g_greenVerts[ii].y  = y;
        g_blueVerts[ii].x   = x + 100.0f;
        g_blueVerts[ii++].y = y;
    }

    // Center 1:1 box
    x   = (float)g_modeList[g_currentMode].Height * 0.6f;
    y   = x / 2.0f;
    dx  = (float)(g_modeList[g_currentMode].Width / 2);
    dy  = (float)(g_modeList[g_currentMode].Height / 2);
    g_box[0].x  = dx - y;
    g_box[0].y  = dy - y;
    g_box[1].x  = dx + y;
    g_box[1].y  = dy - y;
    g_box[2].x  = dx - y;
    g_box[2].y  = dy + y;
    g_box[3].x  = dx + y;
    g_box[3].y  = dy + y;

    // Center 1:1 circles
    x               = (float)g_modeList[g_currentMode].Height * 0.55f / 2.0f;
    g_circle1[0].x  = dx;
    g_circle1[0].y  = dy;
    g_circle2[0].x  = dx;
    g_circle2[0].y  = dy;
    for(x0=0.0f, x1=0.0f, i=1; i<722; ++i, x1+=0.5f, x0+=(0.5f * g_pi / 180.0f))
    {
        g_circle1[i].x  = (float)(cos(x0) * y + g_circle1[0].x);
        g_circle1[i].y  = (float)(sin(x0) * y + g_circle1[0].y);
        g_circle1[i].color = HSV2D3DCOLOR(x1, 1.0, 1.0);
        g_circle2[i].x  = (float)(cos(x0) * x + g_circle2[0].x);
        g_circle2[i].y  = (float)(sin(x0) * x + g_circle2[0].y);
    }
}

//------------------------------------------------------------------------------
//  FormatToWChar
//------------------------------------------------------------------------------
static const WCHAR* 
FormatToWChar(
              IN DWORD  format
              )
/*++

Routine Description:

    Converts a format to a WCHAR* for text output

Arguments:

    IN format - Format

Return Value:

    constant WCHAR*

--*/
{
    switch(format)
    {
    case D3DFMT_A8R8G8B8:
        return L"D3DFMT_A8R8G8B8";
    case D3DFMT_X8R8G8B8: // D3DFMT_X8L8V8U8
        return L"D3DFMT_X8R8G8B8 / D3DFMT_X8L8V8U8";
    case D3DFMT_R5G6B5:
        return L"D3DFMT_R5G6B5";
    case D3DFMT_X1R5G5B5:
        return L"D3DFMT_X1R5G5B5";
    case D3DFMT_A1R5G5B5:
        return L"D3DFMT_A1R5G5B5";
    case D3DFMT_A4R4G4B4:
        return L"D3DFMT_A4R4G4B4";
    case D3DFMT_A8:
        return L"D3DFMT_A8";
    case D3DFMT_A8B8G8R8:
        return L"D3DFMT_A8B8G8R8";
    case D3DFMT_B8G8R8A8: // D3DFMT_Q8W8V8U8
        return L"D3DFMT_B8G8R8A8 / D3DFMT_Q8W8V8U8";
    case D3DFMT_R4G4B4A4:
        return L"D3DFMT_R4G4B4A4";
    case D3DFMT_R5G5B5A1:
        return L"D3DFMT_R5G5B5A1";
    case D3DFMT_R8G8B8A8:
        return L"D3DFMT_R8G8B8A8";
    case D3DFMT_R8B8:
        return L"D3DFMT_R8B8";
    case D3DFMT_G8B8: // D3DFMT_V8U8:
        return L"D3DFMT_G8B8 / D3DFMT_V8U8";
    case D3DFMT_P8:
        return L"D3DFMT_P8";
    case D3DFMT_L8:
        return L"D3DFMT_L8";
    case D3DFMT_A8L8:
        return L"D3DFMT_A8L8";
    case D3DFMT_AL8:
        return L"D3DFMT_AL8";
    case D3DFMT_L16:
        return L"D3DFMT_L16";
    case D3DFMT_L6V5U5:
        return L"D3DFMT_L6V5U5";
    case D3DFMT_V16U16:
        return L"D3DFMT_V16U16";
    case D3DFMT_D16_LOCKABLE: // D3DFMT_D16
        return L"D3DFMT_D16_LOCKABLE / D3DFMT_D16";
    case D3DFMT_D24S8:
        return L"D3DFMT_D24S8";
    case D3DFMT_F16:
        return L"D3DFMT_F16";
    case D3DFMT_F24S8:
        return L"D3DFMT_F24S8";
    case D3DFMT_UYVY:
        return L"D3DFMT_UYVY";
    case D3DFMT_YUY2:
        return L"D3DFMT_YUY2";
    case D3DFMT_DXT1:
        return L"D3DFMT_DXT1";
    case D3DFMT_DXT2: // D3DFMT_DXT3
        return L"D3DFMT_DXT2 / D3DFMT_DXT3";
    case D3DFMT_DXT4: // D3DFMT_DXT5
        return L"D3DFMT_DXT4 / D3DFMT_DXT5";
    case D3DFMT_LIN_A1R5G5B5:
        return L"D3DFMT_LIN_A1R5G5B5";
    case D3DFMT_LIN_A4R4G4B4:
        return L"D3DFMT_LIN_A4R4G4B4";
    case D3DFMT_LIN_A8:
        return L"D3DFMT_LIN_A8";
    case D3DFMT_LIN_A8B8G8R8:
        return L"D3DFMT_LIN_A8B8G8R8";
    case D3DFMT_LIN_A8R8G8B8:
        return L"D3DFMT_LIN_A8R8G8B8";
    case D3DFMT_LIN_B8G8R8A8:
        return L"D3DFMT_LIN_B8G8R8A8";
    case D3DFMT_LIN_G8B8:
        return L"D3DFMT_LIN_G8B8";
    case D3DFMT_LIN_R4G4B4A4:
        return L"D3DFMT_LIN_R4G4B4A4";
    case D3DFMT_LIN_R5G5B5A1:
        return L"D3DFMT_LIN_R5G5B5A1";
    case D3DFMT_LIN_R5G6B5:
        return L"D3DFMT_LIN_R5G6B5";
    case D3DFMT_LIN_R6G5B5:
        return L"D3DFMT_LIN_R6G5B5";
    case D3DFMT_LIN_R8B8:
        return L"D3DFMT_LIN_R8B8";
    case D3DFMT_LIN_R8G8B8A8:
        return L"D3DFMT_LIN_R8G8B8A8";
    case D3DFMT_LIN_X1R5G5B5:
        return L"D3DFMT_LIN_X1R5G5B5";
    case D3DFMT_LIN_X8R8G8B8:
        return L"D3DFMT_LIN_X8R8G8B8";
    case D3DFMT_LIN_A8L8:
        return L"D3DFMT_LIN_A8L8";
    case D3DFMT_LIN_AL8:
        return L"D3DFMT_LIN_AL8";
    case D3DFMT_LIN_L16:
        return L"D3DFMT_LIN_L16";
    case D3DFMT_LIN_L8:
        return L"D3DFMT_LIN_L8";
    case D3DFMT_LIN_D24S8:
        return L"D3DFMT_LIN_D24S8";
    case D3DFMT_LIN_F24S8:
        return L"D3DFMT_LIN_F24S8";
    case D3DFMT_LIN_D16:
        return L"D3DFMT_LIN_D16";
    case D3DFMT_LIN_F16:
        return L"D3DFMT_LIN_F16";
    case D3DFMT_VERTEXDATA:
        return L"D3DFMT_VERTEXDATA";
    case D3DFMT_INDEX16:
        return L"D3DFMT_INDEX16";
    }

    return L"Unknown";
}

//------------------------------------------------------------------------------
//  FormatToString
//------------------------------------------------------------------------------
static const PCHAR
FormatToString(
               IN DWORD  format
               )
/*++

Routine Description:

    Converts a format to a string for text output

Arguments:

    IN format - Format

Return Value:

    PCHAR

--*/
{
    switch(format)
    {
    case D3DFMT_A8R8G8B8:
        return "D3DFMT_A8R8G8B8";
    case D3DFMT_X8R8G8B8: // D3DFMT_X8L8V8U8
        return "D3DFMT_X8R8G8B8 / D3DFMT_X8L8V8U8";
    case D3DFMT_R5G6B5:
        return "D3DFMT_R5G6B5";
    case D3DFMT_X1R5G5B5:
        return "D3DFMT_X1R5G5B5";
    case D3DFMT_A1R5G5B5:
        return "D3DFMT_A1R5G5B5";
    case D3DFMT_A4R4G4B4:
        return "D3DFMT_A4R4G4B4";
    case D3DFMT_A8:
        return "D3DFMT_A8";
    case D3DFMT_A8B8G8R8:
        return "D3DFMT_A8B8G8R8";
    case D3DFMT_B8G8R8A8: // D3DFMT_Q8W8V8U8
        return "D3DFMT_B8G8R8A8 / D3DFMT_Q8W8V8U8";
    case D3DFMT_R4G4B4A4:
        return "D3DFMT_R4G4B4A4";
    case D3DFMT_R5G5B5A1:
        return "D3DFMT_R5G5B5A1";
    case D3DFMT_R8G8B8A8:
        return "D3DFMT_R8G8B8A8";
    case D3DFMT_R8B8:
        return "D3DFMT_R8B8";
    case D3DFMT_G8B8: // D3DFMT_V8U8:
        return "D3DFMT_G8B8 / D3DFMT_V8U8";
    case D3DFMT_P8:
        return "D3DFMT_P8";
    case D3DFMT_L8:
        return "D3DFMT_L8";
    case D3DFMT_A8L8:
        return "D3DFMT_A8L8";
    case D3DFMT_AL8:
        return "D3DFMT_AL8";
    case D3DFMT_L16:
        return "D3DFMT_L16";
    case D3DFMT_L6V5U5:
        return "D3DFMT_L6V5U5";
    case D3DFMT_V16U16:
        return "D3DFMT_V16U16";
    case D3DFMT_D16_LOCKABLE: // D3DFMT_D16
        return "D3DFMT_D16_LOCKABLE / D3DFMT_D16";
    case D3DFMT_D24S8:
        return "D3DFMT_D24S8";
    case D3DFMT_F16:
        return "D3DFMT_F16";
    case D3DFMT_F24S8:
        return "D3DFMT_F24S8";
    case D3DFMT_UYVY:
        return "D3DFMT_UYVY";
    case D3DFMT_YUY2:
        return "D3DFMT_YUY2";
    case D3DFMT_DXT1:
        return "D3DFMT_DXT1";
    case D3DFMT_DXT2: // D3DFMT_DXT3
        return "D3DFMT_DXT2 / D3DFMT_DXT3";
    case D3DFMT_DXT4: // D3DFMT_DXT5
        return "D3DFMT_DXT4 / D3DFMT_DXT5";
    case D3DFMT_LIN_A1R5G5B5:
        return "D3DFMT_LIN_A1R5G5B5";
    case D3DFMT_LIN_A4R4G4B4:
        return "D3DFMT_LIN_A4R4G4B4";
    case D3DFMT_LIN_A8:
        return "D3DFMT_LIN_A8";
    case D3DFMT_LIN_A8B8G8R8:
        return "D3DFMT_LIN_A8B8G8R8";
    case D3DFMT_LIN_A8R8G8B8:
        return "D3DFMT_LIN_A8R8G8B8";
    case D3DFMT_LIN_B8G8R8A8:
        return "D3DFMT_LIN_B8G8R8A8";
    case D3DFMT_LIN_G8B8:
        return "D3DFMT_LIN_G8B8";
    case D3DFMT_LIN_R4G4B4A4:
        return "D3DFMT_LIN_R4G4B4A4";
    case D3DFMT_LIN_R5G5B5A1:
        return "D3DFMT_LIN_R5G5B5A1";
    case D3DFMT_LIN_R5G6B5:
        return "D3DFMT_LIN_R5G6B5";
    case D3DFMT_LIN_R6G5B5:
        return "D3DFMT_LIN_R6G5B5";
    case D3DFMT_LIN_R8B8:
        return "D3DFMT_LIN_R8B8";
    case D3DFMT_LIN_R8G8B8A8:
        return "D3DFMT_LIN_R8G8B8A8";
    case D3DFMT_LIN_X1R5G5B5:
        return "D3DFMT_LIN_X1R5G5B5";
    case D3DFMT_LIN_X8R8G8B8:
        return "D3DFMT_LIN_X8R8G8B8";
    case D3DFMT_LIN_A8L8:
        return "D3DFMT_LIN_A8L8";
    case D3DFMT_LIN_AL8:
        return "D3DFMT_LIN_AL8";
    case D3DFMT_LIN_L16:
        return "D3DFMT_LIN_L16";
    case D3DFMT_LIN_L8:
        return "D3DFMT_LIN_L8";
    case D3DFMT_LIN_D24S8:
        return "D3DFMT_LIN_D24S8";
    case D3DFMT_LIN_F24S8:
        return "D3DFMT_LIN_F24S8";
    case D3DFMT_LIN_D16:
        return "D3DFMT_LIN_D16";
    case D3DFMT_LIN_F16:
        return "D3DFMT_LIN_F16";
    case D3DFMT_VERTEXDATA:
        return "D3DFMT_VERTEXDATA";
    case D3DFMT_INDEX16:
        return "D3DFMT_INDEX16";
    }

    return "Unknown";
}

//------------------------------------------------------------------------------
//  IsAnyButtonDown
//------------------------------------------------------------------------------
static BOOL
IsAnyButtonDown(void)
/*++

Routine Description:

    Returns TRUE if any controller button is down

Arguments:

    None

Return Value:

    TRUE if any controller button is down (at least 50%), FALSE otherwise

--*/
{
    UINT i;

    GetJoystickStates();

    for(i=0; i<4; ++i)
    {
        // Only check valid joysticks
        if(g_inputHandles[i])
        {
            if((g_joysticks[i].x > 0.25f) ||
               (g_joysticks[i].y > 0.25f) ||
               (g_joysticks[i].white > 0.25f) ||
               (g_joysticks[i].a > 0.25f) ||
               (g_joysticks[i].b > 0.25f) ||
               (g_joysticks[i].black > 0.25f) ||
               (g_joysticks[i].leftTrigger > 0.25f) ||
               (g_joysticks[i].rightTrigger > 0.25f) ||
               (g_joysticks[i].leftStick > 0.25f) ||
               (g_joysticks[i].rightStick > 0.25f) ||
               (g_joysticks[i].dPadUp == TRUE) ||
               (g_joysticks[i].dPadDown == TRUE) ||
               (g_joysticks[i].dPadLeft == TRUE) ||
               (g_joysticks[i].dPadRight == TRUE) ||
               (g_joysticks[i].back == TRUE) ||
               (g_joysticks[i].start == TRUE))
            {
               return TRUE;
            }
        }
    }
    return FALSE;
}

//------------------------------------------------------------------------------
//  IsAButtonDown
//------------------------------------------------------------------------------
static BOOL
IsAButtonDown(void)
/*++

Routine Description:

    Returns TRUE if the A button is down on one controller

Arguments:

    None

Return Value:

    TRUE if any controller button is down (at least 50%), FALSE otherwise

--*/
{
    UINT	i;
	BOOL	down	= FALSE;

    GetJoystickStates();

    for(i=0; i<4; ++i)
    {
        // Only check valid joysticks
        if(g_inputHandles[i])
        {
            if((g_joysticks[i].x > 0.25f) ||
               (g_joysticks[i].y > 0.25f) ||
               (g_joysticks[i].white > 0.25f) ||
               (g_joysticks[i].b > 0.25f) ||
               (g_joysticks[i].black > 0.25f) ||
               (g_joysticks[i].leftTrigger > 0.25f) ||
               (g_joysticks[i].rightTrigger > 0.25f) ||
               (g_joysticks[i].leftStick > 0.25f) ||
               (g_joysticks[i].rightStick > 0.25f) ||
               (g_joysticks[i].dPadUp == TRUE) ||
               (g_joysticks[i].dPadDown == TRUE) ||
               (g_joysticks[i].dPadLeft == TRUE) ||
               (g_joysticks[i].dPadRight == TRUE) ||
               (g_joysticks[i].back == TRUE) ||
               (g_joysticks[i].start == TRUE))
            {
               return FALSE;
            }
			else if(g_joysticks[i].a > 0.25f)
			{
				if(down)
					return FALSE;
				down = TRUE;
			}
		}
    }
    return down;
}

//------------------------------------------------------------------------------
//  IsBButtonDown
//------------------------------------------------------------------------------
static BOOL
IsBButtonDown(void)
/*++

Routine Description:

    Returns TRUE if any controller button is down

Arguments:

    None

Return Value:

    TRUE if any controller button is down (at least 50%), FALSE otherwise

--*/
{
    UINT	i;
	BOOL	down	= FALSE;

    GetJoystickStates();

    for(i=0; i<4; ++i)
    {
        // Only check valid joysticks
        if(g_inputHandles[i])
        {
            if((g_joysticks[i].x > 0.25f) ||
               (g_joysticks[i].y > 0.25f) ||
               (g_joysticks[i].white > 0.25f) ||
               (g_joysticks[i].a > 0.25f) ||
               (g_joysticks[i].black > 0.25f) ||
               (g_joysticks[i].leftTrigger > 0.25f) ||
               (g_joysticks[i].rightTrigger > 0.25f) ||
               (g_joysticks[i].leftStick > 0.25f) ||
               (g_joysticks[i].rightStick > 0.25f) ||
               (g_joysticks[i].dPadUp == TRUE) ||
               (g_joysticks[i].dPadDown == TRUE) ||
               (g_joysticks[i].dPadLeft == TRUE) ||
               (g_joysticks[i].dPadRight == TRUE) ||
               (g_joysticks[i].back == TRUE) ||
               (g_joysticks[i].start == TRUE))
            {
               return FALSE;
            }
			else if(g_joysticks[i].b > 0.25f)
			{
				if(down)
					return FALSE;
				down = TRUE;
			}
		}
    }
    return down;
}

//------------------------------------------------------------------------------
//  IsQuitButtonDown
//------------------------------------------------------------------------------
static BOOL
IsQuitButtonDown(void)
/*++

Routine Description:

    Returns TRUE if the back or start buttons are down on one controller

Arguments:

    None

Return Value:

    TRUE if the back or start buttons are down on one controller

--*/
{
    UINT	i;

    GetJoystickStates();

    for(i=0; i<4; ++i)
    {
        if(g_inputHandles[i] && ((g_joysticks[i].back == TRUE) ||
								 (g_joysticks[i].start == TRUE)))
		{
			return TRUE;
		}
    }
    return FALSE;
}

//------------------------------------------------------------------------------
//  GetJoystickStates
//------------------------------------------------------------------------------
static void 
GetJoystickStates(void)
/*++

Routine Description:

    Polls the state of all attached joysticks, storing the results in 
    g_joysticks

Arguments:

    None

Return Value:

    None

--*/
{
    UINT i;

    // Get the state of all ports
    for(i=0; i<4; ++i)
        GetJoystickState(i);
}

//------------------------------------------------------------------------------
//  GetJoystickState
//------------------------------------------------------------------------------
static BOOL
GetJoystickState(
                 IN UINT    port
                 )
/*++

Routine Description:

    Polls the state of a single joystick, storing the result in 
    g_joysticks[port]

Arguments:

    IN port -   Port to poll

Return Value:

    TRUE for a valid poll, FLASE otherwise

--*/
{
    XINPUT_STATE    istate;

    // Simple error checking
    if(!IsPortValid(port))
        return FALSE;

    // Query the input state
    if(XInputGetState(g_inputHandles[port], &istate) != ERROR_SUCCESS) 
        return FALSE;

    // Joystick stick states
    g_joysticks[port].leftStickX    =  (float)istate.Gamepad.sThumbLX / 32768.0f;
    g_joysticks[port].leftStickY    = -(float)istate.Gamepad.sThumbLY / 32768.0f;
    g_joysticks[port].rightStickX   =  (float)istate.Gamepad.sThumbRX / 32768.0f;
    g_joysticks[port].rightStickY   = -(float)istate.Gamepad.sThumbRY / 32768.0f;

    // Analog buttons
    g_joysticks[port].x             = istate.Gamepad.bAnalogButtons[XINPUT_GAMEPAD_X] / 255.0f;
    g_joysticks[port].y             = istate.Gamepad.bAnalogButtons[XINPUT_GAMEPAD_Y] / 255.0f;
    g_joysticks[port].white         = istate.Gamepad.bAnalogButtons[XINPUT_GAMEPAD_WHITE] / 255.0f;
    g_joysticks[port].a             = istate.Gamepad.bAnalogButtons[XINPUT_GAMEPAD_A] / 255.0f;
    g_joysticks[port].b             = istate.Gamepad.bAnalogButtons[XINPUT_GAMEPAD_B] / 255.0f;
    g_joysticks[port].black         = istate.Gamepad.bAnalogButtons[XINPUT_GAMEPAD_BLACK] / 255.0f;
    g_joysticks[port].leftTrigger   = istate.Gamepad.bAnalogButtons[XINPUT_GAMEPAD_LEFT_TRIGGER] / 255.0f;
    g_joysticks[port].rightTrigger  = istate.Gamepad.bAnalogButtons[XINPUT_GAMEPAD_RIGHT_TRIGGER] / 255.0f;

    // Digital buttons
    if(istate.Gamepad.wButtons & XINPUT_GAMEPAD_LEFT_THUMB)
        g_joysticks[port].leftStick = TRUE;
    else
        g_joysticks[port].leftStick = FALSE;
    
    if(istate.Gamepad.wButtons & XINPUT_GAMEPAD_RIGHT_THUMB)
        g_joysticks[port].rightStick = TRUE;
    else
        g_joysticks[port].rightStick = FALSE;
    
    if(istate.Gamepad.wButtons & XINPUT_GAMEPAD_DPAD_UP) 
        g_joysticks[port].dPadUp = TRUE;
    else
        g_joysticks[port].dPadUp = FALSE;
    
    if(istate.Gamepad.wButtons & XINPUT_GAMEPAD_DPAD_DOWN) 
        g_joysticks[port].dPadDown = TRUE;
    else
        g_joysticks[port].dPadDown = FALSE;
    
    if(istate.Gamepad.wButtons & XINPUT_GAMEPAD_DPAD_LEFT) 
        g_joysticks[port].dPadLeft = TRUE;
    else
        g_joysticks[port].dPadLeft = FALSE;
    
    if(istate.Gamepad.wButtons & XINPUT_GAMEPAD_DPAD_RIGHT) 
        g_joysticks[port].dPadRight = TRUE;
    else
        g_joysticks[port].dPadRight = FALSE;
    
    if(istate.Gamepad.wButtons & XINPUT_GAMEPAD_BACK) 
        g_joysticks[port].back = TRUE;
    else
        g_joysticks[port].back = FALSE;
    
    if(istate.Gamepad.wButtons & XINPUT_GAMEPAD_START) 
        g_joysticks[port].start = TRUE;
    else
        g_joysticks[port].start = FALSE;

    return TRUE;
}

//------------------------------------------------------------------------------
//  IsPortValid
//------------------------------------------------------------------------------
static BOOL
IsPortValid(
            IN UINT port
            )
/*++

Routine Description:

    Returns TRUE if the port number is valid

Arguments:

    IN port -   Port to query

Return Value:

    TRUE if the port is valid (has a controller attached) FALSE otherwise

--*/
{
    if(g_inputHandles[port] == NULL)
    {
        OpenInput(port);
        return (g_inputHandles[port] != NULL) ? TRUE : FALSE;
    }
    return TRUE;
}

//------------------------------------------------------------------------------
//  OpenInput
//------------------------------------------------------------------------------
static void 
OpenInput(void)
/*++

Routine Description:

    Initializes the DirectInput device for joystick polling

Arguments:

    None

Return Value:

    None

--*/
{
    DWORD   dwInputDevices;
    UINT    i;
    
    // Get the devices
    dwInputDevices = XGetDevices(XDEVICE_TYPE_GAMEPAD);

    // Save time and drop out now if no joysticks are plugged in
    if(!dwInputDevices)
    {
        ReleaseInput();
        return;
    }
    
    // Create a device for each port
    for(i=0; i<4; ++i) 
    {
        if(dwInputDevices & (1 << i)) 
            OpenInput(i);
        else
            ReleaseInput(i);
    }
}

//------------------------------------------------------------------------------
//  ReleaseInput
//------------------------------------------------------------------------------
static void 
ReleaseInput(
             IN UINT port
             )
/*++

Routine Description:

    Releases the DirectInput devices

Arguments:

    IN port -   Port to release

Return Value:

    None

--*/
{
    if(g_inputHandles[port]) 
    {
        XInputClose(g_inputHandles[port]);
        g_inputHandles[port] = NULL;
    }
}

//------------------------------------------------------------------------------
//  OpenInput
//------------------------------------------------------------------------------
static void 
OpenInput(
          IN UINT port
          )
/*++

Routine Description:

    Initializes the DirectInput device for joystick polling

Arguments:

    IN port -   Port to initialize

Return Value:

    None

--*/
{
    // If the port has already been initialized, just return
    if(g_inputHandles[port] != NULL)
        return;
    
    // Create a device
    g_inputHandles[port] = XInputOpen(XDEVICE_TYPE_GAMEPAD, UINTToPort(port),
                                      0, NULL);
}

//------------------------------------------------------------------------------
//  ReleaseInput
//------------------------------------------------------------------------------
static void 
ReleaseInput(void)
/*++

Routine Description:

    Releases the DirectInput devices

Arguments:

    None

Return Value:

    None

--*/
{
    UINT    i;

    for(i=0; i<4; ++i)
        ReleaseInput(i);
}

//------------------------------------------------------------------------------
//  UINTToPort
//------------------------------------------------------------------------------
static DWORD
UINTToPort(
           IN UINT port
           )
/*++

Routine Description:

    Converts an unsigned integer in the range of 0-3 to a XDEVICE port

Arguments:

    IN port -   Value to convert

Return Value:

    A port XDEVICE_PORT0 - XDEVICE_PORT3

--*/
{
    switch(port)
    {
    case 0:
        return XDEVICE_PORT0;
    case 1:
        return XDEVICE_PORT1;
    case 2:
        return XDEVICE_PORT2;
    case 3:
        return XDEVICE_PORT3;
    }

    // This should never happen
    __asm int 3;
    return 0xFFFFFFFF;
}

//------------------------------------------------------------------------------
//  HSV2D3DCOLOR
//------------------------------------------------------------------------------
static DWORD
HSV2D3DCOLOR(
             IN float   h,
             IN float   s,
             IN float   v
             )
/*++

Routine Description:

    Converts a color in HSV space to a D3DCOLOR

Arguments:

    IN h    - Hue (0.0 - 360.0)
    IN s    - Saturation (0.0 - 1.0)
    IN v    - Value (0.0 - 1.0)

Return Value:

    A D3DCOLOR (rgb)

--*/
{
    int     i;
    float   p;
    float   q;
    float   t;
    float   f;
    DWORD   r = 0;
    DWORD   g = 0;
    DWORD   b = 0;

    while(h >= 360.0f)
        h -= 360.0f;
    h = h / 60.0f;
    i = (int)floor(h);
    f = h - i;
    p = v * (1.0f - s);
    q = v * (1.0f - (s * f));
    t = v * (1.0f - (s * (1.0f - f)));
    switch(i)
    {
    case 0:
        r = (DWORD)(v * 255.0f);
        g = (DWORD)(t * 255.0f);
        b = (DWORD)(p * 255.0f);
        break;
    case 1:
        r = (DWORD)(q * 255.0f);
        g = (DWORD)(v * 255.0f);
        b = (DWORD)(p * 255.0f);
        break;
    case 2:
        r = (DWORD)(p * 255.0f);
        g = (DWORD)(v * 255.0f);
        b = (DWORD)(t * 255.0f);
        break;
    case 3:
        r = (DWORD)(p * 255.0f);
        g = (DWORD)(q * 255.0f);
        b = (DWORD)(v * 255.0f);
        break;
    case 4:
        r = (DWORD)(t * 255.0f);
        g = (DWORD)(p * 255.0f);
        b = (DWORD)(v * 255.0f);
        break;
    case 5:
        r = (DWORD)(v * 255.0f);
        g = (DWORD)(p * 255.0f);
        b = (DWORD)(q * 255.0f);
        break;
    }

    // Bounds check
    if(r > 0xff)
        r = 0xff;
    if(g > 0xff)
        g = 0xff;
    if(b > 0xff)
        b = 0xff;

    return 0xff000000 | (r << 16) | (g << 8) | b;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\videomode\bitfont.h ===
//-----------------------------------------------------------------------------
// FILE: BITFONT.H
//
// Desc: bit font header file
//
// Copyright (c) 1999-2000 Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------

#pragma once
#ifndef _BITFONT_H_
#define _BITFONT_H_


#ifdef XBOX
#include <xtl.h>
#else
#include <windows.h>
#include <d3d8.h>
#endif

// disable C4200: nonstandard extension used : zero-sized array in struct/union
#pragma warning(push)
#pragma warning(disable:4200)

// pack the structure as we're reading it from the disk
#pragma pack(1)

//----------------------------------------------------------------------------
// BXF file signature
#define BITFONT_SIG     '00BF'

//----------------------------------------------------------------------------
struct BitFontCharInfo
{
    BYTE bWidth;
    DWORD dwOffset;
};

//----------------------------------------------------------------------------
struct BitFontInfo
{
    DWORD   dwSig;
    DWORD   dwFontHeight;
    DWORD   cBfis;
    BitFontCharInfo rgBfi[];
};

#pragma warning(pop)
#pragma pack()


//----------------------------------------------------------------------------
// Draw flags
const DWORD DRAWTEXT_TRANSPARENTBKGND =     0x00000001;


//----------------------------------------------------------------------------
// A BitFont class that can be used with the DrawText routines above to
//  render text to various surfaces.
class BitFont
{
public:
    //----------------------------------------------------------------------------
    BitFont();

    //----------------------------------------------------------------------------
    ~BitFont();

#if 0

    //----------------------------------------------------------------------------
    // Load a BitFont font from a file
    bool Load(const WCHAR* filename);

#endif 0

    //----------------------------------------------------------------------------
    // Returns pixel height and width of string
    void GetTextStringLength(DWORD *pdwWidth, DWORD *pdwHeight, 
        const WCHAR* Message);

    //----------------------------------------------------------------------------
    // Draw the text to a surface
    void BitFont::DrawText
    (
        IDirect3DSurface8 *pSurface,
        const WCHAR*    str,
        int             iX,
        int             iY,
        DWORD           dwFlags,
        D3DCOLOR        colFore,
        D3DCOLOR        colBack
    );

private:
    //----------------------------------------------------------------------------
    // various pointers to font data, index tables and width tables
    BitFontInfo     *m_pBitFontInfo;
};

#endif // _BITFONT_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\vistest\dll\include.cpp ===
#include "dll\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\vistest\sources.inc ===
!include ..\..\..\sources.inc

MSC_OPTIMIZATION =  $(MSC_OPTIMIZATION) /Od

TARGETNAME=l_vistest
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SYNCHRONIZE_BLOCK=1

INCLUDES=$(INCLUDES);$(BASEDIR)\private\ntos\inc

SOURCES=\
    vistest.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\vigil\vigil.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    vigil.h

Description:

    Memory surveillance.

*******************************************************************************/

#ifndef __VIGIL_H__
#define __VIGIL_H__

#define FVF_TVERTEX             (D3DFVF_XYZRHW | D3DFVF_TEX1)

//******************************************************************************
typedef struct _TVERTEX {
    XGVECTOR4 vPosition;
    float       u0, v0;

    _TVERTEX() { }
    _TVERTEX(const D3DVECTOR& v, float fRHW, float _u0, float _v0) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z; vPosition.w = fRHW;
        u0 = _u0; v0 = _v0;
    }
} TVERTEX, *PTVERTEX;

//******************************************************************************
typedef enum _TEXLAYOUT {
    TL_SWIZZLED = 0,
    TL_LINEAR   = 1,
    TL_TILED    = 2
} TEXLAYOUT, *PTEXLAYOUT;

//******************************************************************************
class CVigil {

protected:

    LPDIRECT3D8                     m_pd3d;
    LPDIRECT3DDEVICE8               m_pDevice;

    DWORD                           m_dwCRCTable[256];
    POINT                           m_wQuadOrder[2][2][5];

    UINT                            m_uNumTiles;
    UINT                            m_uTileDim;

    LPDIRECT3DTEXTURE8*             m_ppd3dt;
    LPVOID                          m_ppvTexture[6];
    D3DTexture                      m_pd3dt[6];
    UINT                            m_uTiledTexIndex[6];
    UINT                            m_uTextureSize;
    LPDIRECT3DVERTEXBUFFER8*        m_ppd3dr;
    UINT                            m_uVertexBufferSize;
    LPWORD*                         m_ppwTile;
    UINT                            m_uNumTileIndexLists;
    UINT                            m_uIndexListSize;
    UINT                            m_uNumTileIndices;

    D3DTexture                      m_d3dtColorBuffer[2];
    TVERTEX                         m_prSwizzledQuad[4];
    TVERTEX                         m_prLinearQuad[4];

    DWORD                           m_dwFrontBufferCRC;
    DWORD                           m_dwBackBufferCRC;
    DWORD                           m_dwDepthBufferCRC;
    LPDWORD                         m_pdwTextureCRC;
    LPDWORD                         m_pdwVertexBufferCRC;
    LPDWORD                         m_pdwIndexListCRC;
#if defined(VIGILGENERATECRCS)
    HANDLE                          m_hCRCFile;
#else
    LPDWORD                         m_pdwCRCs;
#endif


    BOOL                            m_b128M;

    TCHAR                           m_szOutput[2304];

public:

                                    CVigil();
                                    ~CVigil();

    virtual BOOL                    Create();
    virtual BOOL                    Run();

    BOOL                            CreateVertexBuffers();
    BOOL                            CreateTextures();
    BOOL                            CreateIndexLists();

    DWORD                           ComputeCRC32(LPVOID pvData, UINT uNumBytes);
    DWORD                           ComputeTextureCRC32(LPDIRECT3DTEXTURE8 pd3dt);
    DWORD                           ComputeSurfaceCRC32(LPDIRECT3DSURFACE8 pd3ds);

    void                            OutputString(LPCTSTR szFormat, ...);
#if VIGILVERBOSE
    void                            OutputStringV(LPCTSTR szFormat, ...);
    inline void                     OutputStringN(LPCTSTR szFormat, ...) {}
#else
    inline void                     OutputStringV(LPCTSTR szFormat, ...) {}
    void                            OutputStringN(LPCTSTR szFormat, ...);
#endif
    BOOL                            ResultFailed(HRESULT hr, LPCTSTR sz);
};

#endif //__VIGIL_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\vistest\exe\include.cpp ===
#include "exe\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\vistest\modulex.h ===
#define PREPEND_MODULE(Suffix) vistest##Suffix
#define MODULE_STRING "vistest"
#pragma comment(linker, "/include:_vistest_ExhibitScene@8")
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\vistest\vistest.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    vistest.h

Author:

    Robert Heitkamp

Description:

    Visibilty Test functions

*******************************************************************************/

#ifndef __VISTEST_H__
#define __VISTEST_H__

//------------------------------------------------------------------------------
//	Vertex structure
//------------------------------------------------------------------------------
struct VISTEST_VERTEX
{
	FLOAT x, y, z, rhw; // The transformed position for the vertex
	DWORD color;        // The vertex color
};
#define FVF_VISTEST_VERTEX (D3DFVF_XYZRHW | D3DFVF_DIFFUSE)

//------------------------------------------------------------------------------
//	Constantes
//------------------------------------------------------------------------------
static const int testMaxIterations		= 4;
static const int obscureMaxIterations	= 10;

//------------------------------------------------------------------------------
//	CVisibilityTest
//------------------------------------------------------------------------------
class CVisibilityTest : public CScene {
public:

                                    CVisibilityTest();
                                    ~CVisibilityTest();

    virtual BOOL                    Create(CDisplay* pDisplay);
    virtual int                     Exhibit(int *pnExitCode);

protected:

    virtual BOOL                    Prepare();
    virtual BOOL                    Setup();
    virtual BOOL                    Initialize();
    virtual void                    Efface();
    virtual void                    Update();
    virtual BOOL                    Render();

    virtual void                    ProcessInput();
    virtual BOOL                    InitView();

    virtual BOOL                    WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, 
                                            WPARAM wParam, LPARAM lParam);

private:

	BOOL UpdateIndices(void);
	UINT Max(UINT a, UINT b);
	UINT Min(UINT a, UINT b);
    void RenderStage1(void);
    void RenderStage2(void);
    void RenderStage3(void);
    void RenderStage4(void);
    void RenderStage5(void);
	HRESULT GetVisibilityTestResult(DWORD id, UINT& uResult);

private:

	VISTEST_VERTEX			m_testTris[6];
	VISTEST_VERTEX			m_obscureTris[6];
	float					m_testY[testMaxIterations];
	float					m_testX[testMaxIterations];
	float					m_obscureY[obscureMaxIterations];
	float					m_obscureX[obscureMaxIterations];
	int						m_indices[8];
	DWORD					m_index;
	UINT					m_uVisible;
	UINT					m_height;
	UINT					m_width;
	int						m_stage;
	int						m_nextStage;
	DWORD					m_testId;
	BOOL					m_bDvt4;
	UINT					m_multiplier;


};

#endif //__VISTEST_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\vistest\dll\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=vistest
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

INCLUDES=$(INCLUDES);$(BASEDIR)\private\ntos\inc

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\vigil\vigil.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    vigil.cpp

Description:

    Memory surveillance.

*******************************************************************************/

#include <xtl.h>
#include <tchar.h>
#include <stdio.h>
#include <math.h>
#include <xgraphics.h>
#include <xgmath.h>
#include "vigil.h"

//******************************************************************************
// main
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     main
//
// Description:
//
//     Entry point for the application.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void __cdecl main()
{
    CVigil* pVigil;

    // Seed the pseudo-random number generator
    srand(0x5C7B82F4);

    pVigil = new CVigil();
    if (!pVigil) {
        return;
    }

    if (!pVigil->Create()) {
        OutputDebugString(TEXT("CVigil::Create failed"));
        delete pVigil;
        return;
    }

    pVigil->Run();

    delete pVigil;
}

//******************************************************************************
CVigil::CVigil() {

    DWORD dwCRC;
    UINT  i, j;

    m_pd3d = NULL;
    m_pDevice = NULL;
    m_ppd3dt = NULL;
    m_ppd3dr = NULL;
    m_ppwTile = NULL;
    m_pdwTextureCRC = NULL;
    m_pdwVertexBufferCRC = NULL;
    m_pdwIndexListCRC = NULL;
    m_uNumTileIndexLists = 0;
    m_uNumTiles = 0;
    memset(m_ppvTexture, 0, 6 * sizeof(LPVOID));
    memset(m_pd3dt, 0, 6 * sizeof(D3DTexture));

    // Initialize the CRC table
    for (i = 0; i < 256; i++) {
        dwCRC = i;
        for (j = 0; j < 8; j++) {
            dwCRC = (dwCRC & 1) ? ((dwCRC >> 1) ^ 0xEDB88320L) : (dwCRC >> 1);
        }
        m_dwCRCTable[i] = dwCRC;
    }

    // Initialize the blt quads
    m_prSwizzledQuad[0] = TVERTEX(XGVECTOR3(-0.5f, 255.5f, 0.5f), 2.0f, 0.0f, 1.0f);
    m_prSwizzledQuad[1] = TVERTEX(XGVECTOR3(-0.5f, -0.5f, 0.5f), 2.0f, 0.0f, 0.0f);
    m_prSwizzledQuad[2] = TVERTEX(XGVECTOR3(255.5f, -0.5f, 0.5f), 2.0f, 1.0f, 0.0f);
    m_prSwizzledQuad[3] = TVERTEX(XGVECTOR3(255.5f, 255.5f, 0.5f), 2.0f, 1.0f, 1.0f);
    memcpy(m_prLinearQuad, m_prSwizzledQuad, 4 * sizeof(TVERTEX));
    for (i = 0; i < 4; i++) {
        m_prLinearQuad[i].u0 *= 256.0f;
        m_prLinearQuad[i].v0 *= 256.0f;
    }

    // Initialize quad index list order configurations
    m_wQuadOrder[0][0][0].x = 0;
    m_wQuadOrder[0][0][0].y = 1;
    m_wQuadOrder[0][0][1].x = 0;
    m_wQuadOrder[0][0][1].y = 0;
    m_wQuadOrder[0][0][2].x = 1;
    m_wQuadOrder[0][0][2].y = 1;
    m_wQuadOrder[0][0][3].x = 0;
    m_wQuadOrder[0][0][3].y = 1;
    m_wQuadOrder[0][0][4].x = 0;
    m_wQuadOrder[0][0][4].y = 0;

    m_wQuadOrder[0][1][0].x = 0;
    m_wQuadOrder[0][1][0].y = 0;
    m_wQuadOrder[0][1][1].x = 1;
    m_wQuadOrder[0][1][1].y = 0;
    m_wQuadOrder[0][1][2].x = 1;
    m_wQuadOrder[0][1][2].y = 1;
    m_wQuadOrder[0][1][3].x = 0;
    m_wQuadOrder[0][1][3].y = 0;
    m_wQuadOrder[0][1][4].x = 1;
    m_wQuadOrder[0][1][4].y = 0;

    m_wQuadOrder[1][0][0].x = 0;
    m_wQuadOrder[1][0][0].y = 1;
    m_wQuadOrder[1][0][1].x = 0;
    m_wQuadOrder[1][0][1].y = 0;
    m_wQuadOrder[1][0][2].x = 1;
    m_wQuadOrder[1][0][2].y = 0;
    m_wQuadOrder[1][0][3].x = 0;
    m_wQuadOrder[1][0][3].y = 1;
    m_wQuadOrder[1][0][4].x = 0;
    m_wQuadOrder[1][0][4].y = 0;

    m_wQuadOrder[1][1][0].x = 0;
    m_wQuadOrder[1][1][0].y = 1;
    m_wQuadOrder[1][1][1].x = 1;
    m_wQuadOrder[1][1][1].y = 0;
    m_wQuadOrder[1][1][2].x = 1;
    m_wQuadOrder[1][1][2].y = 1;
    m_wQuadOrder[1][1][3].x = 0;
    m_wQuadOrder[1][1][3].y = 1;
    m_wQuadOrder[1][1][4].x = 1;
    m_wQuadOrder[1][1][4].y = 0;
}

//******************************************************************************
CVigil::~CVigil() {

    UINT i;

    for (i = 0; i < 6; i++) {
        if (m_ppvTexture[i]) {
            D3D_FreeContiguousMemory(m_ppvTexture[i]);
            m_ppd3dt[m_uTiledTexIndex[i]] = NULL;
        }
    }
    for (i = 0; m_ppd3dt && i < m_uNumTiles; i++) {
        if (m_ppd3dt[i]) {
            m_ppd3dt[i]->Release();
        }
    }
    if (m_ppd3dt) {
        HeapFree(GetProcessHeap(), 0, m_ppd3dt);
    }
#if defined(VIGILGENERATECRCS)
    if (m_pdwTextureCRC) {
        HeapFree(GetProcessHeap(), 0, m_pdwTextureCRC);
    }
#endif

    for (i = 0; m_ppwTile && i < m_uNumTileIndexLists; i++) {
        if (m_ppwTile[i]) {
            HeapFree(GetProcessHeap(), 0, m_ppwTile[i]);
        }
    }
    if (m_ppwTile) {
        HeapFree(GetProcessHeap(), 0, m_ppwTile);
    }
#if defined(VIGILGENERATECRCS)
    if (m_pdwIndexListCRC) {
        HeapFree(GetProcessHeap(), 0, m_pdwIndexListCRC);
    }
#endif

    for (i = 0; m_ppd3dr && i < m_uNumTiles; i++) {
        if (m_ppd3dr[i]) {
            m_ppd3dr[i]->Release();
        }
    }
    if (m_ppd3dr) {
        HeapFree(GetProcessHeap(), 0, m_ppd3dr);
    }
#if defined(VIGILGENERATECRCS)
    if (m_pdwVertexBufferCRC) {
        HeapFree(GetProcessHeap(), 0, m_pdwVertexBufferCRC);
    }
#endif

#if !defined(VIGILGENERATECRCS)
    XFreeSection("crc.log");
#endif

    if (m_pDevice) {
        m_pDevice->Release();
        m_pDevice = NULL;
    }

    if (m_pd3d) {
        m_pd3d->Release();
        m_pd3d = NULL;
    }
}

//******************************************************************************
BOOL CVigil::Create() {

    D3DPRESENT_PARAMETERS   d3dpp;
    D3DVIEWPORT8            viewport = {0, 0, 640, 480, 0.0f, 1.0f};
    LPDIRECT3DSURFACE8      pd3ds;
    D3DLOCKED_RECT          d3dlr;
    XGMATRIX                mTransform;
    PTVERTEX                prVertices;
    MEMORYSTATUS            ms;
    UINT                    i, j;
    int                     n;
    HRESULT                 hr;

    GlobalMemoryStatus(&ms);
    m_b128M = (ms.dwTotalPhys > 67108864);

    m_pd3d = Direct3DCreate8(D3D_SDK_VERSION);
    if (!m_pd3d) {
        OutputString(TEXT("Direct3DCreate8 failed"));
        return FALSE;
    }

    // Initialize the presentation parameters
    memset(&d3dpp, 0, sizeof(D3DPRESENT_PARAMETERS));
    d3dpp.BackBufferWidth                   = 640;
    d3dpp.BackBufferHeight                  = 480;
    d3dpp.BackBufferFormat                  = D3DFMT_LIN_A8R8G8B8;
    d3dpp.MultiSampleType                   = D3DMULTISAMPLE_NONE;
    d3dpp.AutoDepthStencilFormat            = D3DFMT_LIN_D24S8;
    d3dpp.FullScreen_RefreshRateInHz        = 0;
    d3dpp.FullScreen_PresentationInterval   = D3DPRESENT_INTERVAL_IMMEDIATE;
    d3dpp.BackBufferCount                   = 1;
    d3dpp.SwapEffect                        = D3DSWAPEFFECT_DISCARD;
    d3dpp.hDeviceWindow                     = NULL;
    d3dpp.Windowed                          = FALSE;
    d3dpp.EnableAutoDepthStencil            = TRUE;

    // Create the device
    hr = m_pd3d->CreateDevice(D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL, NULL, D3DCREATE_HARDWARE_VERTEXPROCESSING, &d3dpp, &m_pDevice);
    if (ResultFailed(hr, TEXT("IDirect3D8::CreateDevice failed"))) {
        return FALSE;
    }

    // Set a viewport
    hr = m_pDevice->SetViewport(&viewport);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetViewport"))) {
        return FALSE;
    }

    // Initialize the view matrix
    XGMatrixLookAtLH(&mTransform, &XGVECTOR3(0.0f, 0.0f, -50.0f), &XGVECTOR3(0.0f, 0.0f, 0.0f), &XGVECTOR3(0.0f, 1.0f, 0.0f));
    hr = m_pDevice->SetTransform(D3DTS_VIEW, &mTransform);
    if (FAILED(hr)) {
        OutputString(TEXT("IDirect3DDevice8::SetTransform failed"));
    }

    // Initialize the projection matrix
    XGMatrixPerspectiveFovLH(&mTransform, 3.14159f / 4.0f, 640.0f / 480.0f, 0.1f, 1000.0f);
    hr = m_pDevice->SetTransform(D3DTS_PROJECTION, &mTransform);
    if (FAILED(hr)) {
        OutputString(TEXT("IDirect3DDevice8::SetTransform failed"));
    }

    m_uNumTiles = 192;
    m_uTileDim = 40;

    for (i = 0; i < 6;) {
        m_uTiledTexIndex[i] = rand() % m_uNumTiles;
        for (j = 0; j < i; j++) {
            if (m_uTiledTexIndex[i] == m_uTiledTexIndex[j]) {
                break;
            }
        }
        if (j == i) {
            i++;
        }
    }

#if defined(VIGILGENERATECRCS)
#if defined(DBG)
    m_hCRCFile = CreateFile("t:\\crc_debug.log", GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
#else
    m_hCRCFile = CreateFile("t:\\crc_retail.log", GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
#endif
    if (m_hCRCFile == INVALID_HANDLE_VALUE) {
        return FALSE;
    }
#else
#if defined(DBG)
    m_pdwCRCs = (LPDWORD)XLoadSection("crc_debug.log");
#else
    m_pdwCRCs = (LPDWORD)XLoadSection("crc_retail.log");
#endif
#endif

    if (!CreateTextures()) {
        return FALSE;
    }

    // The vertex buffers must be created after the textures since the texture coordinate format is dependent on the layout of each texture
    if (!CreateVertexBuffers()) {
        return FALSE;
    }

    // Note: The index lists must be created last since the number of them is determined by remaining memory available
    if (!CreateIndexLists()) {
        return FALSE;
    }

    GlobalMemoryStatus(&ms);
//    OutputString(TEXT("Available memory: %d / %d bytes"), ms.dwAvailPhys, ms.dwTotalPhys);
    OutputString(TEXT("%d bytes of memory were left unallocated"), ms.dwAvailPhys);

    m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TEXTURE);
    m_pDevice->SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_SELECTARG1);
    m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);
    m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_SELECTARG1);

    m_pDevice->SetTextureStageState(0, D3DTSS_ADDRESSU, D3DTADDRESS_CLAMP);
    m_pDevice->SetTextureStageState(0, D3DTSS_ADDRESSV, D3DTADDRESS_CLAMP);

    m_pDevice->SetRenderState(D3DRS_SRCBLEND, D3DBLEND_ONE);
    m_pDevice->SetRenderState(D3DRS_DESTBLEND, D3DBLEND_ZERO);
    m_pDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, TRUE);

    m_pDevice->SetRenderState(D3DRS_ZFUNC, D3DCMP_ALWAYS);

    m_pDevice->SetRenderState(D3DRS_STENCILFUNC, D3DCMP_ALWAYS);
    m_pDevice->SetRenderState(D3DRS_STENCILPASS, D3DSTENCILOP_REPLACE);
    m_pDevice->SetRenderState(D3DRS_STENCILREF, 0xFF);
    m_pDevice->SetRenderState(D3DRS_STENCILENABLE, TRUE);

    // Create texture objects that point to color buffer memory
    for (n = 0; n < 2; n++) {
        m_pDevice->GetBackBuffer(n-1, D3DBACKBUFFER_TYPE_MONO, &pd3ds);
        pd3ds->LockRect(&d3dlr, NULL, D3DLOCK_TILED);
        XGSetTextureHeader(256, 256, 1, 0, D3DFMT_LIN_A8R8G8B8, 0, &m_d3dtColorBuffer[n], 0, 0xA00);
//        m_d3dtColorBuffer[n].Register((LPVOID)((DWORD)d3dlr.pBits & 0x0FFFFFFF));
        m_d3dtColorBuffer[n].Data = ((DWORD)d3dlr.pBits & 0x0FFFFFFF);
        pd3ds->UnlockRect();
        pd3ds->Release();
    }

    return TRUE;
}

//******************************************************************************
BOOL CVigil::CreateVertexBuffers() {

    PTVERTEX                prVertices;
    float                   fX, fY, fLen, fScale;
    D3DSURFACE_DESC         d3dsd;
    UINT                    i, j, k;
    HRESULT                 hr;

    OutputStringN(TEXT("Creating %d vertex buffers."), m_uNumTiles);

#if defined(VIGILGENERATECRCS)
    DWORD dwWritten;
    WriteFile(m_hCRCFile, &m_uNumTiles, sizeof(DWORD), &dwWritten, NULL);

    m_pdwVertexBufferCRC = (LPDWORD)HeapAlloc(GetProcessHeap(), 0, m_uNumTiles * sizeof(DWORD));
    if (!m_pdwVertexBufferCRC) {
        return FALSE;
    }
#else
    if (*m_pdwCRCs++ != m_uNumTiles) {
        OutputString(TEXT("the number of vertex buffer CRCs required does not match the number stored in the CRC file"));
        __asm int 3;
    }
    m_pdwVertexBufferCRC = m_pdwCRCs;
    m_pdwCRCs += m_uNumTiles;
#endif

    m_ppd3dr = (LPDIRECT3DVERTEXBUFFER8*)HeapAlloc(GetProcessHeap(), 0, m_uNumTiles * sizeof(LPDIRECT3DVERTEXBUFFER8));
    if (!m_ppd3dr) {
        return FALSE;
    }
    memset(m_ppd3dr, 0, m_uNumTiles * sizeof(LPDIRECT3DVERTEXBUFFER8));

    m_uVertexBufferSize = (m_uTileDim + 1) * (m_uTileDim + 1) * sizeof(TVERTEX);

    for (i = 0; i < m_uNumTiles; i++) {

        m_ppd3dt[i]->GetLevelDesc(0, &d3dsd);
        if (XGIsSwizzledFormat(d3dsd.Format)) {
            fScale = 1.0f;
        }
        else {
            fScale = 256.0f;
        }

        OutputStringV(TEXT("Creating vertex buffer %d..."), i+1);
        hr = m_pDevice->CreateVertexBuffer(m_uVertexBufferSize, 0, FVF_TVERTEX, 0, &m_ppd3dr[i]);
        if (FAILED(hr)) {
            OutputString(TEXT("Failed to create vertex buffer %d [0x%X]"), i+1, hr);
            return FALSE;
        }
        else {
            OutputStringV(TEXT("succeeded.\r\n"));
        }

        m_ppd3dr[i]->Lock(0, 0, (LPBYTE*)&prVertices, 0);

        OutputStringV(TEXT("Populating vertex buffer %d..."), i+1);

        fX = (float)((i % (640 / m_uTileDim)) * m_uTileDim);
        fY = (float)((i / (640 / m_uTileDim)) * m_uTileDim);
        fLen = (float)(256 / m_uTileDim) * (float)m_uTileDim / 256.0f * fScale;

        for (j = 0; j <= m_uTileDim; j++) {
            for (k = 0; k <= m_uTileDim; k++) {
                prVertices[j * (m_uTileDim + 1) + k] = TVERTEX(XGVECTOR3(fX + (float)k, fY + (float)j, 0.5f), 2.0f, (float)k / (float)m_uTileDim * fLen, (float)j / (float)m_uTileDim * fLen);
            }
        }

        OutputStringV(TEXT("succeeded.\r\n"));

#if defined(VIGILGENERATECRCS)
        OutputStringV(TEXT("Generating CRC for vertex buffer %d..."), i+1);
        m_pdwVertexBufferCRC[i] = ComputeCRC32(prVertices, m_uVertexBufferSize);
        WriteFile(m_hCRCFile, &m_pdwVertexBufferCRC[i], sizeof(DWORD), &dwWritten, NULL);
        OutputStringV(TEXT("succeeded with 0x%X.\r\n"), m_pdwVertexBufferCRC[i]);
#endif

        m_ppd3dr[i]->Unlock();

        if (i % 10 == 0) {
            OutputStringN(TEXT("."));
        }
    }

    OutputStringN(TEXT("completed.\r\n"));

    return TRUE;
}

//******************************************************************************
BOOL CVigil::CreateTextures() {

    PTVERTEX                prVertices;
    TEXLAYOUT               layout;
    D3DLOCKED_RECT          d3dlr;
    LPDWORD                 pdwTexel;
    Swizzler                swz(256, 256, 1);
    D3DTILE                 tile;
    UINT                    uNumTiledTextures = 0;
    UINT                    x, y;
    UINT                    uInterval;
    UINT                    i, j, k;
    UINT                    u, v;
    HRESULT                 hr;

    OutputStringN(TEXT("Creating %d textures."), m_uNumTiles);

#if defined(VIGILGENERATECRCS)
    DWORD dwWritten;
    WriteFile(m_hCRCFile, &m_uNumTiles, sizeof(DWORD), &dwWritten, NULL);

    m_pdwTextureCRC = (LPDWORD)HeapAlloc(GetProcessHeap(), 0, m_uNumTiles * sizeof(DWORD));
    if (!m_pdwTextureCRC) {
        return FALSE;
    }
#else
    if (*m_pdwCRCs++ != m_uNumTiles) {
        OutputString(TEXT("the number of texture CRCs required does not match the number stored in the CRC file"));
        __asm int 3;
    }
    m_pdwTextureCRC = m_pdwCRCs;
    m_pdwCRCs += m_uNumTiles;
#endif

    m_ppd3dt = (LPDIRECT3DTEXTURE8*)HeapAlloc(GetProcessHeap(), 0, m_uNumTiles * sizeof(LPDIRECT3DTEXTURE8));
    if (!m_ppd3dt) {
        return FALSE;
    }
    memset(m_ppd3dt, 0, m_uNumTiles * sizeof(LPDIRECT3DTEXTURE8));

    m_uTextureSize = 256 * 256 * 4;

    uInterval = (256 / m_uTileDim);

    memset(&tile, 0, sizeof(D3DTILE));
    tile.Size = 256 * 256 * 4;
    tile.Pitch = D3DTILE_PITCH_0400;

    for (i = 0; i < m_uNumTiles; i++) {

        OutputStringV(TEXT("Creating texture %d..."), i+1);

        layout = (TEXLAYOUT)(rand() % 2);
        for (j = 0; j < 6; j++) {
            if (i == m_uTiledTexIndex[j]) {
                layout = TL_TILED;
                break;
            }
        }

        if (layout == TL_TILED) {

            m_ppvTexture[uNumTiledTextures] = D3D_AllocContiguousMemory(256 * 256 * 4, D3DTILE_ALIGNMENT);
            if (!m_ppvTexture[uNumTiledTextures]) {
                OutputString(TEXT("Failed to allocate contiguous memory for texture %d [0x%X]"), i+1, hr);
                return FALSE;
            }
            tile.pMemory = m_ppvTexture[uNumTiledTextures];

            hr = m_pDevice->SetTile(2+uNumTiledTextures, &tile);
            if (FAILED(hr)) {
                OutputString(TEXT("Failed to set tile region for texture %d [0x%X]"), i+1, hr);
                return FALSE;
            }

            XGSetTextureHeader(256, 256, 1, 0, D3DFMT_LIN_A8R8G8B8, 0, &m_pd3dt[uNumTiledTextures], 0, 0x400);
            m_pd3dt[uNumTiledTextures].Register(m_ppvTexture[uNumTiledTextures]);

            m_ppd3dt[i] = &m_pd3dt[uNumTiledTextures];

            uNumTiledTextures++;
        }
        else {
            hr = m_pDevice->CreateTexture(256, 256, 1, 0, (layout == TL_SWIZZLED) ? D3DFMT_A8R8G8B8 : D3DFMT_LIN_A8R8G8B8, 0, &m_ppd3dt[i]);
            if (FAILED(hr)) {
                OutputString(TEXT("Failed to create texture %d [0x%X]"), i+1, hr);
                return FALSE;
            }
        }

        OutputStringV(TEXT("succeeded.\r\n"));

        OutputStringV(TEXT("Populating texture %d..."), i+1);

        m_ppd3dt[i]->LockRect(0, &d3dlr, NULL, (layout == TL_TILED) ? D3DLOCK_TILED : 0);

        x = i % (640 / m_uTileDim) * m_uTileDim;
        y = i / (640 / m_uTileDim) * m_uTileDim;

        pdwTexel = (LPDWORD)d3dlr.pBits;

        for (j = 0; j < 256; j++, swz.IncV()) {
            for (k = 0; k < 256; k++, swz.IncU()) {
                if (!(j % uInterval) && !(k % uInterval)) {
                    u = x + k / uInterval;
                    v = y + j / uInterval;
                    if (u >= 512) {
                        u -= 512;
                    }
                    else if (u >= 256) {
                        u = 255 - (u - 256);
                    }
                    if (v >= 256) {
                        v = 255 - (v - 256);
                    }
                    if (layout == TL_SWIZZLED) {
                        pdwTexel[swz.Get2D()] = D3DCOLOR_RGBA((BYTE)v, (BYTE)u, 255 - (BYTE)u, rand() % 256);
                    }
                    else {
                        pdwTexel[k] = D3DCOLOR_RGBA((BYTE)v, (BYTE)u, 255 - (BYTE)u, rand() % 256);
                    }
                }
                else {
                    if (layout == TL_SWIZZLED) {
                        pdwTexel[swz.Get2D()] = D3DCOLOR_RGBA(rand() % 256, rand() % 256, rand() % 256, rand() % 256);
                    }
                    else {
                        pdwTexel[k] = D3DCOLOR_RGBA(rand() % 256, rand() % 256, rand() % 256, rand() % 256);
                    }
                }
            }
            if (layout != TL_SWIZZLED) {
                pdwTexel += d3dlr.Pitch >> 2;
            }
        }

        m_ppd3dt[i]->UnlockRect(0);

        OutputStringV(TEXT("succeeded.\r\n"));

#if 0
        if (layout != TL_SWIZZLED) {
            m_ppd3dr[i]->Lock(0, 0, (LPBYTE*)&prVertices, 0);
            for (j = 0; j < (m_uTileDim + 1) * (m_uTileDim + 1); j++) {
                prVertices[j].u0 *= 256.0f;
                prVertices[j].v0 *= 256.0f;
            }
            m_ppd3dr[i]->Unlock();
        }
#endif

#if defined(VIGILGENERATECRCS)
        OutputStringV(TEXT("Generating CRC for texture %d..."), i+1);
        m_pdwTextureCRC[i] = ComputeTextureCRC32(m_ppd3dt[i]);
        WriteFile(m_hCRCFile, &m_pdwTextureCRC[i], sizeof(DWORD), &dwWritten, NULL);
        OutputStringV(TEXT("succeeded with 0x%X.\r\n"), m_pdwTextureCRC[i]);
#endif

        if (i % 10 == 0) {
            OutputStringN(TEXT("."));
        }
    }

    OutputStringN(TEXT("completed.\r\n"));

    return TRUE;
}

//******************************************************************************
BOOL CVigil::CreateIndexLists() {

    MEMORYSTATUS            ms;
    UINT                    uIndex;
    UINT                    i, j, k;
    BYTE                    def, ord;
    HRESULT                 hr;

    GlobalMemoryStatus(&ms);
    if (ms.dwAvailPhys > 67108864) {
        ms.dwAvailPhys -= 67108864;
    }

    OutputStringN(TEXT("Creating index lists."));

    m_uNumTileIndices = m_uTileDim * m_uTileDim * 6;
    m_uIndexListSize = m_uNumTileIndices * sizeof(WORD);
#if 0
    m_uNumTileIndexLists = (ms.dwAvailPhys - (ms.dwAvailPhys / m_uIndexListSize) * sizeof(DWORD)) / m_uIndexListSize;
//    m_uNumTileIndexLists = ms.dwAvailPhys / m_uIndexListSize;
    if (m_uNumTileIndexLists == 0) {
        return FALSE;
    }
#else
#if defined(DBG)
    m_uNumTileIndexLists = 113;
#else
    m_uNumTileIndexLists = 139;
#endif
#endif

#if defined(VIGILGENERATECRCS)
    DWORD dwWritten;
    WriteFile(m_hCRCFile, &m_uNumTileIndexLists, sizeof(DWORD), &dwWritten, NULL);

    m_pdwIndexListCRC = (LPDWORD)HeapAlloc(GetProcessHeap(), 0, m_uNumTileIndexLists * sizeof(DWORD));
    if (!m_pdwIndexListCRC) {
        return FALSE;
    }
#else
    if (*m_pdwCRCs++ != m_uNumTileIndexLists) {
        OutputString(TEXT("the number of index list CRCs required does not match the number stored in the CRC file"));
        __asm int 3;
    }
    m_pdwIndexListCRC = m_pdwCRCs;
    m_pdwCRCs += m_uNumTileIndexLists;
#endif

    m_ppwTile = (LPWORD*)HeapAlloc(GetProcessHeap(), 0, m_uNumTileIndexLists * sizeof(LPWORD));
    if (!m_ppwTile) {
        return FALSE;
    }
    memset(m_ppwTile, 0, m_uNumTileIndexLists * sizeof(LPWORD));

    for (i = 0; i < m_uNumTileIndexLists; i++) {
        OutputStringV(TEXT("Creating index list %d..."), i+1);
        m_ppwTile[i] = (LPWORD)HeapAlloc(GetProcessHeap(), 0, m_uIndexListSize);
        if (!m_ppwTile[i]) {
#if 0
            if (i == 0) {
                OutputString(TEXT("Failed to create index list %d"), i+1);
                return FALSE;
            }
            else {
                m_uNumTileIndexLists = i;
                break;
            }
#else
            OutputString(TEXT("Failed to create index list %d"), i+1);
            return FALSE;
#endif
        }
        else {
            OutputStringV(TEXT("succeeded.\r\n"));
        }

        OutputStringV(TEXT("Populating index list %d..."), i+1);

        uIndex = 0;

        for (j = 0; j < m_uTileDim; j++) {
            for (k = 0; k < m_uTileDim; k++) {
                def = rand() % 2;
                ord = rand() % 3;
                m_ppwTile[i][uIndex++] = (WORD)((j + m_wQuadOrder[def][0][ord  ].y) * (m_uTileDim + 1) + (k + m_wQuadOrder[def][0][ord  ].x));
                m_ppwTile[i][uIndex++] = (WORD)((j + m_wQuadOrder[def][0][ord+1].y) * (m_uTileDim + 1) + (k + m_wQuadOrder[def][0][ord+1].x));
                m_ppwTile[i][uIndex++] = (WORD)((j + m_wQuadOrder[def][0][ord+2].y) * (m_uTileDim + 1) + (k + m_wQuadOrder[def][0][ord+2].x));
                ord = rand() % 3;
                m_ppwTile[i][uIndex++] = (WORD)((j + m_wQuadOrder[def][1][ord  ].y) * (m_uTileDim + 1) + (k + m_wQuadOrder[def][1][ord  ].x));
                m_ppwTile[i][uIndex++] = (WORD)((j + m_wQuadOrder[def][1][ord+1].y) * (m_uTileDim + 1) + (k + m_wQuadOrder[def][1][ord+1].x));
                m_ppwTile[i][uIndex++] = (WORD)((j + m_wQuadOrder[def][1][ord+2].y) * (m_uTileDim + 1) + (k + m_wQuadOrder[def][1][ord+2].x));
            }
        }

        OutputStringV(TEXT("succeeded.\r\n"));

#if defined(VIGILGENERATECRCS)
        OutputStringV(TEXT("Generating CRC for index list %d..."), i+1);
        m_pdwIndexListCRC[i] = ComputeCRC32(m_ppwTile[i], m_uIndexListSize);
        WriteFile(m_hCRCFile, &m_pdwIndexListCRC[i], sizeof(DWORD), &dwWritten, NULL);
        OutputStringV(TEXT("succeeded with 0x%X.\r\n"), m_pdwIndexListCRC[i]);
#endif

        if (i % 10 == 0) {
            OutputStringN(TEXT("."));
        }
    }

    OutputStringN(TEXT("completed. (%d created)\r\n"), m_uNumTileIndexLists);

    return TRUE;
}

//******************************************************************************
BOOL CVigil::Run() {

    float fTime, fLastTime, fTimeFreq, fFPS, fPPS;
    LARGE_INTEGER qwCounter;
    LPDIRECT3DSURFACE8 pd3ds, pd3dsColor, pd3dsDepth;
    D3DSURFACE_DESC d3dsd;
    D3DLOCKED_RECT d3dlr;
    LPBYTE pData;
    DWORD dwCRC;
    RECT rect = {0, 0, 256, 256};
    UINT uFrame = 1;
    UINT uFrameCycle = 0;
    BOOL bOutputFPS = FALSE;
    BOOL bCheckResources = FALSE;
    UINT i, j;

    QueryPerformanceFrequency(&qwCounter);
    fTimeFreq = 1.0f / (float)qwCounter.QuadPart;
    QueryPerformanceCounter(&qwCounter);
    fLastTime = (float)qwCounter.QuadPart * fTimeFreq;

    do {

        // Clear the rendering target
        m_pDevice->Clear(0, NULL, D3DCLEAR_TARGET | D3DCLEAR_ZBUFFER | D3DCLEAR_STENCIL, 0, (float)rand() / (float)RAND_MAX, 0);

#if !defined (VIGILNORESOURCECHECK)
        bCheckResources = TRUE;
#endif

        if (bCheckResources && uFrame > 1) {

            // Verify index lists
            for (i = 0; i < m_uNumTileIndexLists; i++) {
                OutputStringV(TEXT("Checking memory integrity of index list %d..."), i);
                dwCRC = ComputeCRC32(m_ppwTile[i], m_uIndexListSize);
                if (dwCRC != m_pdwIndexListCRC[i]) {
                    OutputString(TEXT("Index list %d memory corrupt on frame %d (Expected CRC: 0x%X, Actual CRC: 0x%X)"), i, uFrame, m_pdwIndexListCRC[i], dwCRC);
                }
                else {
                    OutputStringV(TEXT("passed.\r\n"));
                }
            }

            // Verify vertex buffers and textures
            for (i = 0; i < m_uNumTiles; i++) {

                OutputStringV(TEXT("Checking memory integrity of vertex buffer %d..."), i);
                m_ppd3dr[i]->Lock(0, 0, &pData, 0);
                dwCRC = ComputeCRC32(pData, m_uVertexBufferSize);
                m_ppd3dr[i]->Unlock();
                if (dwCRC != m_pdwVertexBufferCRC[i]) {
                    OutputString(TEXT("Vertex buffer %d memory corrupt on frame %d (Expected CRC: 0x%X, Actual CRC: 0x%X)"), i, uFrame, m_pdwVertexBufferCRC[i], dwCRC);
                }
                else {
                    OutputStringV(TEXT("passed.\r\n"));
                }

                OutputStringV(TEXT("Checking memory integrity of texture %d..."), i);
                dwCRC = ComputeTextureCRC32(m_ppd3dt[i]);
                if (dwCRC != m_pdwTextureCRC[i]) {
                    OutputString(TEXT("Texture %d memory corrupt on frame %d (Expected CRC: 0x%X, Actual CRC: 0x%X)"), i, uFrame, m_pdwTextureCRC[i], dwCRC);
                }
                else {
                    OutputStringV(TEXT("passed.\r\n"));
                }
            }
        }

        bCheckResources = FALSE;

        // Begin the scene
        m_pDevice->BeginScene();

        // Disable lighting
        m_pDevice->SetRenderState(D3DRS_LIGHTING, FALSE);

        m_pDevice->SetVertexShader(FVF_TVERTEX);

#if !defined (VIGILNOTEXTUREWRITES)

        m_pDevice->GetBackBuffer(0, D3DBACKBUFFER_TYPE_MONO, &pd3dsColor);
        m_pDevice->GetDepthStencilSurface(&pd3dsDepth);

        for (i = 0; i < m_uNumTiles; i++) {

            m_ppd3dt[i]->GetSurfaceLevel(0, &pd3ds);
            pd3ds->GetDesc(&d3dsd);

            m_pDevice->SetTexture(0, m_ppd3dt[i]);
            m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 2, (d3dsd.Format == D3DFMT_A8R8G8B8) ? m_prSwizzledQuad : m_prLinearQuad, sizeof(TVERTEX));

            m_pDevice->SetRenderTarget(pd3ds, NULL);
            if (uFrame % 2) {
                pd3ds->LockRect(&d3dlr, NULL, 0);
                pData = (LPBYTE)d3dlr.pBits;
                for (j = 0; j < d3dsd.Height; j++) {
                    memset(pData, 0, d3dsd.Width << 2);
                    pData += d3dlr.Pitch;
                }
                pd3ds->UnlockRect();
            }
            else {
                m_pDevice->Clear(0, NULL, D3DCLEAR_TARGET, 0, 1.0f, 0);
            }

            m_pDevice->SetTexture(0, &m_d3dtColorBuffer[uFrame%2]);
            m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 2, m_prLinearQuad, sizeof(TVERTEX));

            m_pDevice->SetRenderTarget(pd3dsColor, pd3dsDepth);

//            m_pDevice->CopyRects(pd3ds, NULL, 0, pd3dsColor, NULL);
//            m_pDevice->CopyRects(pd3dsColor, &rect, 1, pd3ds, NULL);
            pd3ds->Release();
        }

        pd3dsDepth->Release();
        pd3dsColor->Release();

#endif

        for (i = 0; i < m_uNumTiles; i++) {
            m_pDevice->SetStreamSource(0, m_ppd3dr[i], sizeof(TVERTEX));
            m_pDevice->SetTexture(0, m_ppd3dt[i]);
            m_pDevice->DrawIndexedVertices(D3DPT_TRIANGLELIST, m_uNumTileIndices, m_ppwTile[i % m_uNumTileIndexLists]);
        }

        // End the scene
        m_pDevice->EndScene();

        if (uFrame > 1) {
            // Verify the front buffer
            OutputStringV(TEXT("Checking memory integrity of the front buffer..."));
            m_pDevice->GetBackBuffer(-1, D3DBACKBUFFER_TYPE_MONO, &pd3ds);
            dwCRC = ComputeSurfaceCRC32(pd3ds);
            pd3ds->Release();
            if (dwCRC != m_dwFrontBufferCRC) {
                OutputString(TEXT("Front buffer memory corrupt on frame %d (Expected CRC: 0x%X, Actual CRC: 0x%X)"), uFrame, m_dwFrontBufferCRC, dwCRC);
            }
            else {
                OutputStringV(TEXT("passed.\r\n"));
            }

            // Verify the back buffer
            OutputStringV(TEXT("Checking memory integrity of the back buffer..."));
            m_pDevice->GetBackBuffer(0, D3DBACKBUFFER_TYPE_MONO, &pd3ds);
            dwCRC = ComputeSurfaceCRC32(pd3ds);
            pd3ds->Release();
            if (dwCRC != m_dwBackBufferCRC) {
                OutputString(TEXT("Back buffer memory corrupt on frame %d (Expected CRC: 0x%X, Actual CRC: 0x%X)"), uFrame, m_dwBackBufferCRC, dwCRC);
                bCheckResources = TRUE;
            }
            else {
                OutputStringV(TEXT("passed.\r\n"));
            }

            // Verify the depth buffer
            OutputStringV(TEXT("Checking memory integrity of the depth buffer..."));
            m_pDevice->GetDepthStencilSurface(&pd3ds);
            dwCRC = ComputeSurfaceCRC32(pd3ds);
            pd3ds->Release();
            if (dwCRC != m_dwDepthBufferCRC) {
                OutputString(TEXT("Depth buffer memory corrupt on frame %d (Expected CRC: 0x%X, Actual CRC: 0x%X)"), uFrame, m_dwDepthBufferCRC, dwCRC);
            }
            else {
                OutputStringV(TEXT("passed.\r\n"));
            }

            m_pDevice->Present(NULL, NULL, NULL, NULL);
        }
        else {
#if defined(VIGILGENERATECRCS)
            DWORD dwWritten;
            m_pDevice->GetBackBuffer(0, D3DBACKBUFFER_TYPE_MONO, &pd3ds);
            m_dwBackBufferCRC = ComputeSurfaceCRC32(pd3ds);
            pd3ds->Release();
            m_pDevice->GetDepthStencilSurface(&pd3ds);
            m_dwDepthBufferCRC = ComputeSurfaceCRC32(pd3ds);
            pd3ds->Release();
            m_pDevice->Present(NULL, NULL, NULL, NULL);
            m_pDevice->GetBackBuffer(-1, D3DBACKBUFFER_TYPE_MONO, &pd3ds);
            m_dwFrontBufferCRC = ComputeSurfaceCRC32(pd3ds);
            pd3ds->Release();
            WriteFile(m_hCRCFile, &m_dwFrontBufferCRC, sizeof(DWORD), &dwWritten, NULL);
            WriteFile(m_hCRCFile, &m_dwBackBufferCRC, sizeof(DWORD), &dwWritten, NULL);
            WriteFile(m_hCRCFile, &m_dwDepthBufferCRC, sizeof(DWORD), &dwWritten, NULL);
            CloseHandle(m_hCRCFile);
            OutputString(TEXT("CRC file generation complete."));
#else
            m_dwFrontBufferCRC = *m_pdwCRCs++;
            m_dwBackBufferCRC = *m_pdwCRCs++;
            m_dwDepthBufferCRC = *m_pdwCRCs++;
            m_pDevice->Present(NULL, NULL, NULL, NULL);
#endif
            OutputString(TEXT("Initialization complete."));
        }

        uFrame++;
        uFrameCycle++;

        QueryPerformanceCounter(&qwCounter);
        fTime = (float)qwCounter.QuadPart * fTimeFreq;

        if (fTime - fLastTime > 1.0f) {
            fFPS = (float)uFrameCycle / (fTime - fLastTime);
            fPPS = (float)(uFrameCycle * m_uTileDim * m_uTileDim * 2 * m_uNumTiles) / (fTime - fLastTime);
            if (bOutputFPS) {
                OutputStringV(TEXT("\r\n"));
                OutputString(TEXT("%3.3f frames per second (%3.3f triangles per second)"), fFPS, fPPS);
                OutputStringV(TEXT("\r\n"));
            }
            QueryPerformanceCounter(&qwCounter);
            fLastTime = (float)qwCounter.QuadPart * fTimeFreq;
            uFrameCycle = 0;
            bOutputFPS = TRUE;
        }

    } while (TRUE);

    return TRUE;
}

//******************************************************************************
DWORD CVigil::ComputeCRC32(LPVOID pvData, UINT uNumBytes) {

    LPBYTE pData = (LPBYTE)pvData;
    DWORD  dwCRC = 0;
    UINT   i;

    for (i = 0; i < uNumBytes; i++) {
        dwCRC = m_dwCRCTable[(dwCRC ^ pData[i]) & 0xFF] ^ (dwCRC >> 8);
    }

    return dwCRC;
}

//******************************************************************************
DWORD CVigil::ComputeTextureCRC32(LPDIRECT3DTEXTURE8 pd3dt) {
    
    LPDIRECT3DSURFACE8 pd3ds;
    DWORD              dwCRC;

    pd3dt->GetSurfaceLevel(0, &pd3ds);
    dwCRC = ComputeSurfaceCRC32(pd3ds);
    pd3ds->Release();
    return dwCRC;
}

//******************************************************************************
DWORD CVigil::ComputeSurfaceCRC32(LPDIRECT3DSURFACE8 pd3ds) {

    D3DSURFACE_DESC d3dsd;
    D3DLOCKED_RECT  d3dlr;
    DWORD           dwCRC = 0;
    LPBYTE          pbData;
    UINT            i, j, k;
    HRESULT         hr;

    hr = pd3ds->GetDesc(&d3dsd);
    if (FAILED(hr)) {
        return 0;
    }

    hr = pd3ds->LockRect(&d3dlr, NULL, 0);
    if (FAILED(hr)) {
        return 0;
    }

    switch (d3dsd.Format) {

        case D3DFMT_LIN_R5G6B5:
        case D3DFMT_R5G6B5: {
            DWORD  dwPixel;
            LPWORD pwPixel = (LPWORD)d3dlr.pBits;
            for (i = 0; i < d3dsd.Height; i++) {
                for (j = 0; j < d3dsd.Width; j++) {
                    dwPixel = (pwPixel[j] & 0xF800) << 8 |
                              (pwPixel[j] & 0x07E0) << 5 |
                              (pwPixel[j] & 0x001F) << 3;
                    pbData = (LPBYTE)&dwPixel;
                    for (k = 0; k < 3; k++) {
                        dwCRC = m_dwCRCTable[(dwCRC ^ pbData[k]) & 0xFF] ^ (dwCRC >> 8);
                    }
                }
                pwPixel += d3dlr.Pitch >> 1;
            }
            break;
        }

        case D3DFMT_LIN_X1R5G5B5:
        case D3DFMT_X1R5G5B5: {
            DWORD  dwPixel;
            LPWORD pwPixel = (LPWORD)d3dlr.pBits;
            for (i = 0; i < d3dsd.Height; i++) {
                for (j = 0; j < d3dsd.Width; j++) {
                    dwPixel = (pwPixel[j] & 0x7C00) << 9 |
                              (pwPixel[j] & 0x03E0) << 6 |
                              (pwPixel[j] & 0x001F) << 3;
                    pbData = (LPBYTE)&dwPixel;
                    for (k = 0; k < 3; k++) {
                        dwCRC = m_dwCRCTable[(dwCRC ^ pbData[k]) & 0xFF] ^ (dwCRC >> 8);
                    }
                }
                pwPixel += d3dlr.Pitch >> 1;
            }
            break;
        }

        case D3DFMT_LIN_A1R5G5B5:
        case D3DFMT_A1R5G5B5: {
            DWORD  dwPixel;
            LPWORD pwPixel = (LPWORD)d3dlr.pBits;
            for (i = 0; i < d3dsd.Height; i++) {
                for (j = 0; j < d3dsd.Width; j++) {
                    dwPixel = (pwPixel[j] & 0x8000) << 16 |
                              (pwPixel[j] & 0x7C00) << 9 |
                              (pwPixel[j] & 0x03E0) << 6 |
                              (pwPixel[j] & 0x001F) << 3;
                    pbData = (LPBYTE)&dwPixel;
                    for (k = 0; k < 4; k++) {
                        dwCRC = m_dwCRCTable[(dwCRC ^ pbData[k]) & 0xFF] ^ (dwCRC >> 8);
                    }
                }
                pwPixel += d3dlr.Pitch >> 1;
            }
            break;
        }

        case D3DFMT_LIN_X8R8G8B8:
        case D3DFMT_X8R8G8B8: {
            LPDWORD pdwPixel = (LPDWORD)d3dlr.pBits;
            for (i = 0; i < d3dsd.Height; i++) {
                for (j = 0; j < d3dsd.Width; j++) {
                    pbData = (LPBYTE)&pdwPixel[j];
                    for (k = 0; k < 3; k++) {
                        dwCRC = m_dwCRCTable[(dwCRC ^ pbData[k]) & 0xFF] ^ (dwCRC >> 8);
                    }
                }
                pdwPixel += d3dlr.Pitch >> 2;
            }
            break;
        }

        case D3DFMT_LIN_D24S8:
        case D3DFMT_LIN_A8R8G8B8:
        case D3DFMT_D24S8:
        case D3DFMT_A8R8G8B8: {
            LPDWORD pdwPixel = (LPDWORD)d3dlr.pBits;
            for (i = 0; i < d3dsd.Height; i++) {
                for (j = 0; j < d3dsd.Width; j++) {
                    pbData = (LPBYTE)&pdwPixel[j];
                    for (k = 0; k < 4; k++) {
                        dwCRC = m_dwCRCTable[(dwCRC ^ pbData[k]) & 0xFF] ^ (dwCRC >> 8);
                    }
                }
                pdwPixel += d3dlr.Pitch >> 2;
            }
            break;
        }

        default: // Unsupported format
            __asm int 3;
    }

    pd3ds->UnlockRect();

    return dwCRC;
}

//******************************************************************************
//
// Function:
//
//     OutputString
//
// Description:
//
//     Take the formatted output and send the output to the debugger.
//
// Arguments:
//
//     LPCTSTR szFormat         - Formatting string describing the output
//
//     Variable argument list   - Data to be placed in the output string
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CVigil::OutputString(LPCTSTR szFormat, ...) {

    va_list vl;

    va_start(vl, szFormat);
    _vstprintf(m_szOutput, szFormat, vl);
    va_end(vl);

    _tcscat(m_szOutput, TEXT("\r\n"));

    OutputDebugString(m_szOutput);
}

#if VIGILVERBOSE

//******************************************************************************
//
// Function:
//
//     OutputStringV
//
// Description:
//
//     Take the formatted output and send the output to the debugger.
//
// Arguments:
//
//     LPCTSTR szFormat         - Formatting string describing the output
//
//     Variable argument list   - Data to be placed in the output string
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CVigil::OutputStringV(LPCTSTR szFormat, ...) {

    va_list vl;

    va_start(vl, szFormat);
    _vstprintf(m_szOutput, szFormat, vl);
    va_end(vl);

    OutputDebugString(m_szOutput);
}

#else

//******************************************************************************
//
// Function:
//
//     OutputStringN
//
// Description:
//
//     Take the formatted output and send the output to the debugger.
//
// Arguments:
//
//     LPCTSTR szFormat         - Formatting string describing the output
//
//     Variable argument list   - Data to be placed in the output string
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CVigil::OutputStringN(LPCTSTR szFormat, ...) {

    va_list vl;

    va_start(vl, szFormat);
    _vstprintf(m_szOutput, szFormat, vl);
    va_end(vl);

    OutputDebugString(m_szOutput);
}

#endif

//******************************************************************************
//
// Function:
//
//     ResultFailed
//
// Description:
//
//     Test a given return code: if the code is an error, output a debug 
//     message with the error value.  If the code is a warning, output
//     a debug message with the warning value.
//
// Arguments:
//
//     HRESULT hr               - Return code to test for an error
//
//     LPCTSTR sz               - String describing the method that produced 
//                                the return code
//
// Return Value:
//
//     TRUE if the given return code is an error, FALSE otherwise.
//
//******************************************************************************
BOOL CVigil::ResultFailed(HRESULT hr, LPCTSTR sz) {

//    TCHAR szError[256];

    if (SUCCEEDED(hr)) {
        return FALSE;
    }

//    XGGetErrorString(hr, szError, 256);

    if (FAILED(hr)) {
//        OutputString(TEXT("%s failed with %s [0x%X]"), sz, szError, hr);
        OutputString(TEXT("%s failed with [0x%X]"), sz, hr);
        return TRUE;
    }
    else {
//        OutputString(TEXT("%s returned %s [0x%X]"), sz, szError, hr);
        OutputString(TEXT("%s returned [0x%X]"), sz, hr);
    }

    return FALSE;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\vistest2\modulex.h ===
#define PREPEND_MODULE(Suffix) vistest2##Suffix
#define MODULE_STRING "vistest2"
#pragma comment(linker, "/include:_vistest2_ExhibitScene@8")
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\vistest2\dll\include.cpp ===
#include "dll\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\vistest\vistest.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    vistest.cpp

Author:

    Robert Heitkamp

Description:

    Visibility Test functions.

*******************************************************************************/
#include <ntos.h>
#include "d3dlocus.h"
#include "vistest.h"

//------------------------------------------------------------------------------
//	Constants
//------------------------------------------------------------------------------
static const unsigned int testMinX		= 0;
static const unsigned int testMaxX		= 1;
static const unsigned int testMinY		= 2;
static const unsigned int testMaxY		= 3;
static const unsigned int obscureMinX	= 4;
static const unsigned int obscureMaxX	= 5;
static const unsigned int obscureMinY	= 6;
static const unsigned int obscureMaxY	= 7;

//******************************************************************************
//
// Function:
//
//     ExhibitScene
//
// Description:
//
//     Create the scene, pump messages, process user input,
//     update the scene, render the scene, and release the scene when finished.
//
// Arguments:
//
//     CDisplay* pDisplay           - Pointer to the Display object
//
//     int* pnExitCode              - Optional pointer to an integer that will
//                                    be set to the exit value contained in the 
//                                    wParam parameter of the WM_QUIT message 
//                                    (if received)
//
// Return Value:
//
//     TRUE if the display remains functional on exit, FALSE otherwise.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ExhibitScene)(CDisplay* pDisplay, int* pnExitCode) {

    CVisibilityTest*	pTest;
    BOOL							bRet;

    // Verify that the display has been initialized
    if (!pDisplay) {
        return FALSE;
    }

    // Create the scene
    pTest = new CVisibilityTest();
    if (!pTest) {
        return FALSE;
    }

    // Initialize the scene
    if (!pTest->Create(pDisplay)) {
        pTest->Release();
        return FALSE;
    }

    bRet = pTest->Exhibit(pnExitCode);

    // Clean up the scene
    pTest->Release();

    return bRet;
}

//******************************************************************************
//
// Function:
//
//     ValidateDisplay
//
// Description:
//
//     Evaluate the given display information in order to determine whether or
//     not the display is capable of rendering the scene.  If not, the given 
//     display will not be included in the display list.
//
// Arguments:
//
//     CDirect3D8* pd3d                 - Pointer to the Direct3D object
//
//     D3DCAPS8* pd3dcaps               - Capabilities of the device
//
//     D3DDISPLAYMODE*                  - Display mode into which the device
//                                        will be placed
//
// Return Value:
//
//     TRUE if the scene can be rendered using the given display, FALSE if
//     it cannot.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ValidateDisplay)(CDirect3D8* pd3d, D3DCAPS8* pd3dcaps, D3DDISPLAYMODE* pd3ddm) {

    return TRUE;
}

//******************************************************************************
// CVisibilityTest
//******************************************************************************

//******************************************************************************
//
// Method:
//
//     CVisibilityTest
//
// Description:
//
//     Initialize the test.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
CVisibilityTest::CVisibilityTest() 
{

	DWORD* pDword = (DWORD*)MmMapIoSpace(0xFFF00078, 4, PAGE_READONLY);
	
	// Is this a dvt4?
	if(*pDword >= 0x46)
		m_bDvt4 = TRUE;
	else
		m_bDvt4 = FALSE;

	m_multiplier = 1;

	MmUnmapIoSpace(pDword, 4);

	m_d3dpp.FullScreen_PresentationInterval = D3DPRESENT_INTERVAL_IMMEDIATE;
}

//******************************************************************************
//
// Method:
//
//     ~CVisibilityTest
//
// Description:
//
//     Clean up the test.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
CVisibilityTest::~CVisibilityTest() {
}

//******************************************************************************
//
// Method:
//
//     Create
//
// Description:
//
//     Prepare the test for rendering.
//
// Arguments:
//
//     CDisplay* pDisplay               - Pointer to a Display object.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CVisibilityTest::Create(CDisplay* pDisplay) {

    return CScene::Create(pDisplay);
}

//******************************************************************************
//
// Method:
//
//     Exhibit
//
// Description:
//
//     Execute the test.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     The exit value contained in the wParam parameter of the WM_QUIT message.
//
//******************************************************************************
int 
CVisibilityTest::Exhibit(int *pnExitCode) {
    BOOL            bMsgReady;
    float           fTime, fLastTime, fPrevTime, fTimeFreq;
    LARGE_INTEGER   qwCounter;
    DWORD           dwNumFrames = 0;

    if (!m_bCreated) 
        return TRUE;

    QueryPerformanceFrequency(&qwCounter);
    fTimeFreq = 1.0f / (float)qwCounter.QuadPart;
    QueryPerformanceCounter(&qwCounter);
    fLastTime = (float)qwCounter.QuadPart * fTimeFreq;
    fPrevTime = fLastTime;

	do
	{
		// and draw it
		QueryPerformanceCounter(&qwCounter);
		fTime = (float)qwCounter.QuadPart * fTimeFreq;

		// Process user input
		m_pDisplay->ProcessInput();
		if (!m_pDisplay->ConsoleVisible()) 
			ProcessInput();

		if (m_pDisplay->m_bTimeSync) 
			m_pDisplay->m_bTimeSync = FALSE;
		else 
		{
			m_fTime += (fTime - fLastTime) * m_fTimeDilation;
			m_fFrame += 1.0f;//(1.0f * m_fTimeDilation); // ##REVIEW
			if (m_fFrameDuration != FLT_INFINITE && m_fFrame > m_fFrameDuration) 
				break;
			if (m_fTimeDuration != FLT_INFINITE && m_fTime > m_fTimeDuration) 
				break;
			m_fTimeDelta = m_fTime - m_fLastTime;
			m_fFrameDelta = m_fFrame - m_fLastFrame;
			Update();
			m_fLastTime = m_fTime;
			m_fLastFrame = m_fFrame;
		}

		fLastTime = fTime;

		if (!Render()) 
			break;

		dwNumFrames++;

		if (fTime - fPrevTime > 1.0f) 
		{
			m_fFPS = (float)dwNumFrames / (fTime - fPrevTime);
			fPrevTime = fTime;
			dwNumFrames = 0;
		}
	} while(!m_bQuit);

    if (pnExitCode) 
        *pnExitCode = 0;
    
    return m_bDisplayOK;;
}

//******************************************************************************
//
// Method:
//
//     Prepare
//
// Description:
//
//     Initialize all device-independent data to be used in the scene.  This
//     method is called only once at creation (as opposed to Setup and
//     Initialize, which get called each time the device is Reset).
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the scene was successfully prepared, FALSE if it was not.
//
//******************************************************************************
BOOL CVisibilityTest::Prepare() {
	float	intervalX;
	float	intervalY;

	// Setup indices 
	m_indices[0] = 0;
	m_indices[1] = 1;
	m_indices[2] = 0;
	m_indices[3] = 1;
	m_indices[4] = 0;
	m_indices[5] = 1;
	m_indices[6] = 0;
	m_indices[7] = 1;

	// Store local copy of width and height
	m_width		= m_pDisplay->GetWidth();
	m_height	= m_pDisplay->GetHeight();
	intervalY	= (float)(m_height / 9);
	intervalX	= (float)(m_width / 9);

	// Y coordinates of test triangles
	m_testY[0]	= 0.0f;					
	m_testY[1]	= intervalY * 3.0f;
	m_testY[2]	= intervalY * 6.0f;
	m_testY[3]	= (float)m_height;

	// X coordinates of test triangles
	m_testX[0]	= 0.0f;					
	m_testX[1]	= intervalX * 3.0f;
	m_testX[2]	= intervalX * 6.0f;
	m_testX[3]	= (float)m_width;
	
	// Y coordinates of obscure triangles
	m_obscureY[0]	= 0.0f;					
	m_obscureY[1]	= intervalY;
	m_obscureY[2]	= intervalY * 2.0f;
	m_obscureY[3]	= intervalY * 3.0f;
	m_obscureY[4]	= intervalY * 4.0f;
	m_obscureY[5]	= intervalY * 5.0f;
	m_obscureY[6]	= intervalY * 6.0f;
	m_obscureY[7]	= intervalY * 7.0f;
	m_obscureY[8]	= intervalY * 8.0f;
	m_obscureY[9]	= (float)m_height;

	// X coordinates of obscure triangles
	m_obscureX[0]	= 0.0f;					
	m_obscureX[1]	= intervalX;
	m_obscureX[2]	= intervalX * 2.0f;
	m_obscureX[3]	= intervalX * 3.0f;
	m_obscureX[4]	= intervalX * 4.0f;
	m_obscureX[5]	= intervalX * 5.0f;
	m_obscureX[6]	= intervalX * 6.0f;
	m_obscureX[7]	= intervalX * 7.0f;
	m_obscureX[8]	= intervalX * 8.0f;
	m_obscureX[9]	= (float)m_width;

	// Setup color and rhw component of triangles
	for(int i=0; i<6; ++i)
	{
		m_testTris[i].rhw	= 1.0f;
		m_testTris[i].color	= 0xff0000ff;

		m_obscureTris[i].rhw	= 1.0f;
		m_obscureTris[i].color	= 0xffff0000;
	}

	// Test Id to query
	m_testId = -1;

	// Test state to run
	m_stage = 0;

	m_nextStage = 1;

	return TRUE;
}

//******************************************************************************
//
// Method:
//
//     Setup
//
// Description:
//
//     Obtain the device interface pointer from the display, save the current
//     state of the device, and initialize the background vertices to the
//     dimensions of the render target.
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the scene was successfully prepared for initialization, FALSE if
//     it was not.
//
//******************************************************************************
BOOL CVisibilityTest::Setup() {

    return CScene::Setup();
}

//******************************************************************************
//
// Method:
//
//     Initialize
//
// Description:
//
//     Initialize the device and all device objects to be used in the test (or
//     at least all device resource objects to be created in the video, 
//     non-local video, or default memory pools).
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the test was successfully initialized for rendering, FALSE if
//     it was not.
//
//******************************************************************************
BOOL CVisibilityTest::Initialize() {
	D3DPRESENT_PARAMETERS	d3dpp;
	DWORD					param;

	// Read the multisample render state to adjust the pixel count
	m_pDevice->GetRenderState(D3DRS_MULTISAMPLEMODE, &param);
	switch(param)
	{
	case D3DMULTISAMPLEMODE_1X:
		m_multiplier = 1;
		break;
    case D3DMULTISAMPLEMODE_2X:
		m_multiplier = 2;
		break;
    case D3DMULTISAMPLEMODE_4X:
		m_multiplier = 4;
		break;
	}

	return TRUE;
}

//******************************************************************************
//
// Method:
//
//     Efface
//
// Description:
//
//     Release all device resource objects (or at least those objects created
//     in video memory, non-local video memory, or the default memory pools)
//     and restore the device to its initial state.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CVisibilityTest::Efface() {
    CScene::Efface();
}

//******************************************************************************
//
// Method:
//
//     Update
//
// Description:
//
//     Update the state of the scene to coincide with the given time.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CVisibilityTest::Update() {
	UINT	minX;
	UINT	maxX;
	UINT	minY;
	UINT	maxY;
	UINT	osTestMinX;
	UINT	osTestMaxX;
	UINT	osTestMinY;
	UINT	osTestMaxY;
	UINT	osObscureMinX;
	UINT	osObscureMaxX;
	UINT	osObscureMinY;
	UINT	osObscureMaxY;
	UINT	width1	= m_width - 1;
	UINT	height1	= m_height - 1;

	// Not created? do nothing
	if(!m_bCreated)
		return;
    
	// Adjust the stage
	m_stage = m_nextStage;

	switch(m_stage)
	{
	case 1:	// Basic functionality testing
		{
			// Setup the triangles
			m_testTris[0].x = m_testX[m_indices[testMinX]];
			m_testTris[0].y = m_testY[m_indices[testMaxY]];
			m_testTris[0].z	= 0.75f;

			m_testTris[1].x = m_testX[m_indices[testMinX]];
			m_testTris[1].y = m_testY[m_indices[testMinY]];
			m_testTris[1].z	= 0.75f;

			m_testTris[2].x = m_testX[m_indices[testMaxX]];
			m_testTris[2].y = m_testY[m_indices[testMaxY]];
			m_testTris[2].z	= 0.75f;

			m_testTris[3].x = m_testX[m_indices[testMinX]];
			m_testTris[3].y = m_testY[m_indices[testMinY]];
			m_testTris[3].z	= 0.75f;

			m_testTris[4].x = m_testX[m_indices[testMaxX]];
			m_testTris[4].y = m_testY[m_indices[testMinY]];
			m_testTris[4].z	= 0.75f;

			m_testTris[5].x = m_testX[m_indices[testMaxX]];
			m_testTris[5].y = m_testY[m_indices[testMaxY]];
			m_testTris[5].z	= 0.75f;

			m_obscureTris[0].x	= m_obscureX[m_indices[obscureMinX]];
			m_obscureTris[0].y	= m_obscureY[m_indices[obscureMaxY]];
			m_obscureTris[0].z	= 0.25f;

			m_obscureTris[1].x	= m_obscureX[m_indices[obscureMinX]];
			m_obscureTris[1].y	= m_obscureY[m_indices[obscureMinY]];
			m_obscureTris[1].z	= 0.25f;

			m_obscureTris[2].x	= m_obscureX[m_indices[obscureMaxX]];
			m_obscureTris[2].y	= m_obscureY[m_indices[obscureMaxY]];
			m_obscureTris[2].z	= 0.25f;

			m_obscureTris[3].x	= m_obscureX[m_indices[obscureMinX]];
			m_obscureTris[3].y	= m_obscureY[m_indices[obscureMinY]];
			m_obscureTris[3].z	= 0.25f;

			m_obscureTris[4].x	= m_obscureX[m_indices[obscureMaxX]];
			m_obscureTris[4].y	= m_obscureY[m_indices[obscureMinY]];
			m_obscureTris[4].z	= 0.25f;

			m_obscureTris[5].x	= m_obscureX[m_indices[obscureMaxX]];
			m_obscureTris[5].y	= m_obscureY[m_indices[obscureMaxY]];
			m_obscureTris[5].z	= 0.25f;

			// -----Calculate the number of visible pixels-----

			// Shotcuts for clearer code
			osTestMinX		= (UINT)m_testX[m_indices[testMinX]];
			osTestMaxX		= (UINT)m_testX[m_indices[testMaxX]];
			osTestMinY		= (UINT)m_testY[m_indices[testMinY]];
			osTestMaxY		= (UINT)m_testY[m_indices[testMaxY]];
			osObscureMinX	= (UINT)m_obscureX[m_indices[obscureMinX]];
			osObscureMaxX	= (UINT)m_obscureX[m_indices[obscureMaxX]];
			osObscureMinY	= (UINT)m_obscureY[m_indices[obscureMinY]];
			osObscureMaxY	= (UINT)m_obscureY[m_indices[obscureMaxY]];

			// Is box completely offscreen or
			// does the obscuring box completely cover the screen or
			// does the obscuring box completely cover the test box?
			if((osTestMinX > osTestMaxX) || (osTestMinY > osTestMaxY) ||
			   ((osObscureMinX == 0) && (osObscureMinY == 0) &&
				(osObscureMaxX == width1) && (osObscureMaxY == height1)) ||
			   ((osObscureMinX <= osTestMinX) && (osObscureMinY <= osTestMinY) &&
				(osObscureMaxX >= osTestMaxX) && (osObscureMaxY >= osTestMaxY)))
			{
				m_uVisible = 0;
			}

			// Is the obscuring box completely offscreen or
			// does the obscuring box not obscure the test box at all?
			else if((osObscureMinX > osObscureMaxX) || (osObscureMinY > osObscureMaxY) ||
					(osObscureMaxX < osTestMinX) || (osObscureMaxY < osTestMinY) ||
					(osObscureMinX > osTestMaxX) || (osObscureMinY > osTestMaxY))
			{
				m_uVisible = (osTestMaxX - osTestMinX) * 
							 (osTestMaxY - osTestMinY);
			}

			// Calculate the unobscured area
			else
			{
				// Intersection of two boxes (obscured area)
				minX = Max(osTestMinX, osObscureMinX);
				minY = Max(osTestMinY, osObscureMinY);
				maxX = Min(osTestMaxX, osObscureMaxX);
				maxY = Min(osTestMaxY, osObscureMaxY);

				// Unobscured pixels
				m_uVisible = ((osTestMaxX - osTestMinX) * 
							  (osTestMaxY - osTestMinY)) - 
							 ((maxX - minX) * (maxY - minY));
			}	

			// Test Id
			// Note: 0-9 are reserved for hard coded valid tests
			// 10-19 are reserved for invalid test and should never
			// be used with EndVisibilityTest()
			++m_testId;

			// The following number is taken from REPORTS_MAX_INDEX in
			// private\windows\directx\dxg\d3d8\se\device.h
			// I don't believe this header file is publicly available
			// and will need to be checked over time to ensure for a valid
			// test id.
			if(m_testId >= 2048)
				m_testId = 20;

			// HACK: Bug in EndVisibilityTest() when passed id 768 
			// (maybe >= 768) to renable testing of id's >= 768, comment
			// or remove the next two lines
//			else if(m_testId >= 768)
//				m_testId = 20;

			// Save slots 10-19 for invalid tests
			else if(m_testId < 20)
				m_testId = 20;

			// Update for next test (TRUE == end of test)
			if(UpdateIndices())
				m_nextStage = m_stage + 1;;
		}
		break;

	case 2:	// Invalid parameters
		{
			m_testTris[0].x = 50.0f;
			m_testTris[0].y = 50.0f;
			m_testTris[0].z	= 0.75f;

			m_testTris[1].x = 100.0f;
			m_testTris[1].y = 50.0f;
			m_testTris[1].z	= 0.75f;

			m_testTris[2].x = 50.0f;
			m_testTris[2].y = 100.0f;
			m_testTris[2].z	= 0.75f;

			m_testTris[3].x = 50.0f;
			m_testTris[3].y = 100.0f;
			m_testTris[3].z	= 0.75f;

			m_testTris[4].x = 100.0f;
			m_testTris[4].y = 50.0f;
			m_testTris[4].z	= 0.75f;

			m_testTris[5].x = 100.0f;
			m_testTris[5].y = 100.0f;
			m_testTris[5].z	= 0.75f;

			// 50 x 50
			m_uVisible = 2500;
			m_nextStage = m_stage + 1;
		}
		break;

	case 3: // valid count
	case 4: // Overflow
		{
			m_testTris[0].x		= 0.0f;
			m_testTris[0].y		= 0.0f;
			m_testTris[0].z		= 1.0f;
			m_testTris[0].color	= 0xff00ff00;

			m_testTris[1].x		= (float)m_width;
			m_testTris[1].y		= 0.0f;
			m_testTris[1].z		= 1.0f;
			m_testTris[1].color	= 0xff00ff00;

			m_testTris[2].x		= 0.0f;
			m_testTris[2].y		= (float)m_height;
			m_testTris[2].z		= 1.0f;
			m_testTris[2].color	= 0xff00ff00;

			m_testTris[3].x		= 0.0f;
			m_testTris[3].y		= (float)m_height;
			m_testTris[3].z		= 1.0f;
			m_testTris[3].color	= 0xff00ff00;

			m_testTris[4].x		= (float)m_width;
			m_testTris[4].y		= 0.0f;
			m_testTris[4].z		= 1.0f;
			m_testTris[4].color	= 0xff00ff00;

			m_testTris[5].x		= (float)m_width;
			m_testTris[5].y		= (float)m_height;
			m_testTris[5].z		= 1.0f;
			m_testTris[5].color	= 0xff00ff00;

			m_nextStage = m_stage + 1;
		}
		break;

	case 5:	// Exit without end

		m_nextStage = m_stage + 1;
		break;

	default:
		// End the test
		m_bQuit = TRUE;
	}

	// Adjust for multisampling
	m_uVisible *= m_multiplier;
}

//******************************************************************************
//
// Method:
//
//     Render
//
// Description:
//
//     Render the test scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CVisibilityTest::Render() {
    if(!m_bCreated) 
        return FALSE;

#ifndef UNDER_XBOX
	HRESULT	hr;

    hr = m_pDevice->TestCooperativeLevel();
    if (FAILED(hr)) {
        if (hr == D3DERR_DEVICELOST) 
            return TRUE;
        if (hr == D3DERR_DEVICENOTRESET) {
            if (!Reset()) 
                return FALSE;
        }
    }
#endif // !UNDER_XBOX

	switch(m_stage) {
	case 1:
		RenderStage1();
		break;
	case 2:
		RenderStage2();
		break;
	case 3:
		RenderStage3();
		break;
	case 4:
		RenderStage4();
		break;
	case 5:
		RenderStage5();
		break;
	}

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     ProcessInput
//
// Description:
//
//     Process user input for the scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CVisibilityTest::ProcessInput() {

    CScene::ProcessInput();
}

//******************************************************************************
//
// Method:
//
//     InitView
//
// Description:
//
//     Initialize the camera view in the scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CVisibilityTest::InitView() {

    return CScene::InitView();
}

//******************************************************************************
// Scene window procedure (pseudo-subclassed off the main window procedure)
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     WndProc
//
// Description:
//
//     Scene window procedure to process messages received by the main 
//     application window.
//
// Arguments:
//
//     LRESULT* plr             - Result of the message processing
//
//     HWND hWnd                - Application window
//
//     UINT uMsg                - Message to process
//
//     WPARAM wParam            - First message parameter
//
//     LPARAM lParam            - Second message parameter
//
// Return Value:
//
//     TRUE if the message was handled, FALSE otherwise.
//
//******************************************************************************
BOOL CVisibilityTest::WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    *plr = 0;

#ifndef UNDER_XBOX

    switch (uMsg) {

        case WM_KEYDOWN:

            switch (wParam) {

                case VK_F12: // Toggle pause state
                    m_bPaused = !m_bPaused;
                    return TRUE;
            }

            break;
    }

#endif // !UNDER_XBOX

    return CScene::WndProc(plr, hWnd, uMsg, wParam, lParam);
}

//------------------------------------------------------------------------------
//	CVisibilityTest::UpdateIndices
//------------------------------------------------------------------------------
BOOL 
CVisibilityTest::UpdateIndices(void)
/*++

Routine Description:

	Updates the index list to adjust for the next state of operation.
	There are 8 indices: 76543210
	Indices 7-4 are the states of the obscuring box.
	Indices 3-0 are the states of the obscuring box

Arguments:

	None

Return Value:

	TRUE when the indices have completely cycled through their entire
	range, FALSE otherwise.

--*/
{
	int		i;
	BOOL	reset;

	++m_indices[7];

	// Obscure m_indices
	for(i=7; i>=4; --i) {

		// Odd numbered m_indices cannot be > 9
		if(i & 1) {
			if(m_indices[i] > 9) {
				++m_indices[i-1];
				m_indices[i]	= 0;
				reset			= TRUE;
			}
			else
				reset = FALSE;
		}

		// Even numbered m_indices cannot be > 8
		else {
			if(m_indices[i] > 8) {
				++m_indices[i-1];
				m_indices[i] = 0;
			}

			if(reset)
				m_indices[i+1] = m_indices[i] + 1;
		}		
	}

	// Test m_indices
	for(; i>=0; --i) {

		// Odd numbered m_indices cannot be > 3
		if(i & 1) {
			if(m_indices[i] > 3) {
				++m_indices[i-1];
				m_indices[i]	= 0;
				reset			= TRUE;
			}
			else
				reset = FALSE;
		}

		// Even numbered m_indices cannot be > 2
		else {
			if(m_indices[i] > 2) {
				if(i) {
					++m_indices[i-1];
					m_indices[i] = 0;
				}
				else
					return TRUE;
			}

			if(reset)
				m_indices[i+1] = m_indices[i] + 1;
		}		
	}
	return FALSE;
}

//------------------------------------------------------------------------------
//	CVisibilityTest::Max
//------------------------------------------------------------------------------
UINT 
CVisibilityTest::Max(
					 IN	UINT a, 
					 IN	UINT b
					 )
/*++

Routine Description:

	Returns the max of two unsinged ints

Arguments:

	IN a	- First value
	IN b	- Second value

Return Value:

	The larger of the two values

--*/
{
	return (a >= b ? a : b);
}
	
//------------------------------------------------------------------------------
//	CVisibilityTest::Min
//------------------------------------------------------------------------------
UINT 
CVisibilityTest::Min(
					 IN	UINT a, 
					 IN	UINT b
					 )
/*++

Routine Description:

	Returns the min of two unsigned ints

Arguments:

	IN a	- First value
	IN b	- Second value

Return Value:

	The lesser of the two values

--*/
{
	return (a <= b ? a : b);
}

//------------------------------------------------------------------------------
//	CVisibilityTest::RenderStage1
//------------------------------------------------------------------------------
void
CVisibilityTest::RenderStage1(void)
/*++

Routine Description:

	Handles all the rendering for stage 1 testing
	This is mostly a stress test. aprox 72,899 tests are performed with 
	varying degrees of obscurity.

Arguments:

	None

Return Value:

	None

--*/
{
    DWORD	dwClearFlags = D3DCLEAR_TARGET;
    HRESULT	hr;
	UINT	uResult;
	BOOL	failure = FALSE;
	
    // Clear the rendering target
    if (m_pDisplay->IsDepthBuffered()) 
        dwClearFlags |= (D3DCLEAR_ZBUFFER | D3DCLEAR_STENCIL);
    m_pDevice->Clear(0, NULL, dwClearFlags, RGB_MAKE(0, 0, 0), 1.0f, 0);

    // Begin the scene
    m_pDevice->BeginScene();

    // Position the view using the default camera
    m_pDisplay->SetView();

    // Use a fixed function shader
    m_pDevice->SetVertexShader(FVF_VISTEST_VERTEX);

	// Render obscuring triangles
	m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLELIST, 2, m_obscureTris, 
							  sizeof(VISTEST_VERTEX));

	// Setup for the test?
	hr = m_pDevice->GetIDirect3DDevice8()->BeginVisibilityTest();
	if(ResultFailed(hr, TEXT("IDirect3DDevice8::BeginVisibilityTest")))
	{
		m_pDevice->EndScene();
		return;
	}

	// Render triangles to test
	m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLELIST, 2, m_testTris, 
							   sizeof(VISTEST_VERTEX));

	// Do the test?
	hr = m_pDevice->GetIDirect3DDevice8()->EndVisibilityTest(m_testId);
	if(ResultFailed(hr, TEXT("IDirect3DDevice8::EndVisibilityTest")))
	{
		m_pDevice->EndScene();
		return;
	}

    // Display the adapter mode
    ShowDisplayMode();

    // Display the frame rate
    ShowFrameRate();

    // Display the console
    m_pDisplay->ShowConsole();

    // End the scene
    m_pDevice->EndScene();

    // Update the screen
    m_pDevice->Present(NULL, NULL, NULL, NULL);

	// Query the test results
	hr = GetVisibilityTestResult(m_testId, uResult);
	if(ResultFailed(hr, TEXT("IDirect3DDevice8::GetVisibilitTestResult")))
		failure = TRUE;

	// Is the count correct
	else if(uResult != m_uVisible)
	{
		WCHAR buffer[128];
		wsprintf(buffer, TEXT("vistest: RenderStage1: Incorrect pixel count: Result=%u  Expected=%u  Diff=%d"), 
				 uResult, m_uVisible, abs((long)uResult - (long)m_uVisible));
		Log(LOG_FAIL, buffer);
		if(m_bDvt4)
			__asm int 3;
	}
}

//------------------------------------------------------------------------------
//	CVisibilityTest::RenderStage2
//------------------------------------------------------------------------------
void
CVisibilityTest::RenderStage2(void)
/*++

Routine Description:

	Handles all the rendering for stage 2 testing
	Simple testing of api used in invalid manners

Arguments:

	None

Return Value:

	None

--*/
{
    DWORD	dwClearFlags = D3DCLEAR_TARGET;
    HRESULT	hr;
	UINT	uResult;

	// Test 1: Begin - End0 - Get1 -> Error

    // Clear the rendering target
    if (m_pDisplay->IsDepthBuffered()) 
        dwClearFlags |= (D3DCLEAR_ZBUFFER | D3DCLEAR_STENCIL);
    m_pDevice->Clear(0, NULL, dwClearFlags, RGB_MAKE(0, 0, 0), 1.0f, 0);

    // Begin the scene
    m_pDevice->BeginScene();

    // Position the view using the default camera
    m_pDisplay->SetView();

    // Use a fixed function shader
    m_pDevice->SetVertexShader(FVF_VISTEST_VERTEX);

	// Setup for the test?
	hr = m_pDevice->GetIDirect3DDevice8()->BeginVisibilityTest();
	if(ResultFailed(hr, TEXT("IDirect3DDevice8::BeginVisibilityTest")))
	{
		m_pDevice->EndScene();
		return;
	}

	// Render triangles to test
	m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLELIST, 2, m_testTris, 
							   sizeof(VISTEST_VERTEX));

	// Valid call
	hr = m_pDevice->GetIDirect3DDevice8()->EndVisibilityTest(0);
	if(ResultFailed(hr, TEXT("IDirect3DDevice8::EndVisibilityTest")))
	{
		m_pDevice->EndScene();
		return;
	}

    // Display the adapter mode
    ShowDisplayMode();

    // Display the frame rate
    ShowFrameRate();

    // Display the console
    m_pDisplay->ShowConsole();

    // End the scene
    m_pDevice->EndScene();

    // Update the screen
    m_pDevice->Present(NULL, NULL, NULL, NULL);

	// Invalid query the test results
#if !defined(DEBUG) && !defined(_DEBUG)
	hr = GetVisibilityTestResult(5, uResult);
	if(SUCCEEDED(hr))
	{
		Log(LOG_FAIL, TEXT("IDirect3DDevice8::GetVisibilitTestResult failed by not failing"));
		return;
	}
#endif

	// Valid call
	hr = m_pDevice->GetIDirect3DDevice8()->EndVisibilityTest(1);
	if(ResultFailed(hr, TEXT("IDirect3DDevice8::EndVisibilityTest")))
		return;

	// Valid query the test results
	hr = GetVisibilityTestResult(0, uResult);
	if(ResultFailed(hr, TEXT("IDirect3DDevice8::GetVisibilityTestResult")))
		return;
	else if(uResult != m_uVisible)
		return;

	// Valid query the test results
	hr = GetVisibilityTestResult(1, uResult);
	if(ResultFailed(hr, TEXT("IDirect3DDevice8::GetVisibilityTestResult")))
		return;
	else if(uResult != m_uVisible)
		return;

	// Test 2: Get3 -> Error

    // Clear the rendering target
    if (m_pDisplay->IsDepthBuffered()) 
        dwClearFlags |= (D3DCLEAR_ZBUFFER | D3DCLEAR_STENCIL);
    m_pDevice->Clear(0, NULL, dwClearFlags, RGB_MAKE(0, 0, 0), 1.0f, 0);

    // Begin the scene
    m_pDevice->BeginScene();

    // Position the view using the default camera
    m_pDisplay->SetView();

    // Use a fixed function shader
    m_pDevice->SetVertexShader(FVF_VISTEST_VERTEX);

	// Render triangles to test
	m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLELIST, 2, m_testTris, 
							   sizeof(VISTEST_VERTEX));

    // Display the adapter mode
    ShowDisplayMode();

    // Display the frame rate
    ShowFrameRate();

    // Display the console
    m_pDisplay->ShowConsole();

    // End the scene
    m_pDevice->EndScene();

    // Update the screen
    m_pDevice->Present(NULL, NULL, NULL, NULL);

	// Invalid query the test results
#if !defined(DEBUG) && !defined(_DEBUG)
	hr = GetVisibilityTestResult(3, uResult);
	if(SUCCEEDED(hr))
	{
		Log(LOG_FAIL, TEXT("IDirect3DDevice8::GetVisibilityTestResult failed by not failing"));
		return;
	}
#endif
}

//------------------------------------------------------------------------------
//	CVisibilityTest::RenderStage3
//------------------------------------------------------------------------------
void
CVisibilityTest::RenderStage3(void)
/*++

Routine Description:

	Handles all the rendering for stage 3 testing
	This test verifies that multiple poltgons drawn on top of each other
	generates the correct result (which will be more pixels than those
	normally visible). The counter should include all pixels drawn, not just
	those that show up on the screen.

Arguments:

	None

Return Value:

	None

--*/
{
    DWORD	dwClearFlags = D3DCLEAR_TARGET;
    HRESULT	hr;
	UINT	uResult;
	float	z;
	float	zInc;
	BOOL	failure = FALSE;
	UINT	expected = m_width * m_height * 5 * m_multiplier;

    // Clear the rendering target
    if (m_pDisplay->IsDepthBuffered()) 
        dwClearFlags |= (D3DCLEAR_ZBUFFER | D3DCLEAR_STENCIL);
    m_pDevice->Clear(0, NULL, dwClearFlags, RGB_MAKE(0, 0, 0), 1.0f, 0);

    // Begin the scene
    m_pDevice->BeginScene();

    // Position the view using the default camera
    m_pDisplay->SetView();

    // Use a fixed function shader
    m_pDevice->SetVertexShader(FVF_VISTEST_VERTEX);

	// Render obscuring triangles
	m_pDevice->DrawPrimitiveUP(D3DPT_POINTLIST, 1, m_testTris, 
							  sizeof(VISTEST_VERTEX));

	// Setup for the test?
	hr = m_pDevice->GetIDirect3DDevice8()->BeginVisibilityTest();
	if(ResultFailed(hr, TEXT("IDirect3DDevice8::BeginVisibilityTest")))
	{
		m_pDevice->EndScene();
		return;
	}

	// Draw 5 layers
	zInc = 0.25;
	for(z=1.0f; z>=0.0f; z-=zInc)
	{
		m_testTris[0].z	= z;
		m_testTris[1].z	= z;
		m_testTris[2].z	= z;
		m_testTris[3].z	= z;
		m_testTris[4].z	= z;
		m_testTris[5].z	= z;

		// Render triangles to test
		m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLELIST, 2, m_testTris, 
								   sizeof(VISTEST_VERTEX));
	}

	// Do the test?
	hr = m_pDevice->GetIDirect3DDevice8()->EndVisibilityTest(4);
	if(ResultFailed(hr, TEXT("IDirect3DDevice8::EndVisibilityTest")))
	{
		m_pDevice->EndScene();
		return;
	}

    // Display the adapter mode
    ShowDisplayMode();

    // Display the frame rate
    ShowFrameRate();

    // Display the console
    m_pDisplay->ShowConsole();

    // End the scene
    m_pDevice->EndScene();

    // Update the screen
    m_pDevice->Present(NULL, NULL, NULL, NULL);

	// Query the test results
	hr = GetVisibilityTestResult(4, uResult);
	if(ResultFailed(hr, TEXT("IDirect3DDevice8::GetVisibilityTestResult")))
		failure = TRUE;

	// Is the count correct
	else if(uResult != expected)
	{
		WCHAR buffer[128];
		wsprintf(buffer, TEXT("vistest: RenderStage3: Incorrect pixel count: Result=%u  Expected=%u  Diff=%d"), 
				 uResult, expected, abs((long)uResult - (long)expected));
		Log(LOG_FAIL, buffer);
		if(m_bDvt4)
			__asm int 3;
	}
}

//------------------------------------------------------------------------------
//	CVisibilityTest::RenderStage4
//------------------------------------------------------------------------------
void
CVisibilityTest::RenderStage4(void)
/*++

Routine Description:

	Handles all the rendering for stage 4 testing
	Test for internal overflow by drawing more than UINT_MAX pixels.

Arguments:

	None

Return Value:

	None

--*/
{
    DWORD	dwClearFlags = D3DCLEAR_TARGET;
    HRESULT	hr;
	UINT	uResult;
	float	z;
	float	zInc;
	BOOL	failure = FALSE;

    // Clear the rendering target
    if (m_pDisplay->IsDepthBuffered()) 
        dwClearFlags |= (D3DCLEAR_ZBUFFER | D3DCLEAR_STENCIL);
    m_pDevice->Clear(0, NULL, dwClearFlags, RGB_MAKE(0, 0, 0), 1.0f, 0);

    // Begin the scene
    m_pDevice->BeginScene();

    // Position the view using the default camera
    m_pDisplay->SetView();

    // Use a fixed function shader
    m_pDevice->SetVertexShader(FVF_VISTEST_VERTEX);

	// Render obscuring triangles
	m_pDevice->DrawPrimitiveUP(D3DPT_POINTLIST, 1, m_testTris, 
							  sizeof(VISTEST_VERTEX));

	// Setup for the test?
	hr = m_pDevice->GetIDirect3DDevice8()->BeginVisibilityTest();
	if(ResultFailed(hr, TEXT("IDirect3DDevice8::BeginVisibilityTest")))
	{
		m_pDevice->EndScene();
		return;
	}

	// Calculate how many layers to draw: width*height pixels per screen
	// need to draw more than UINT_MAX pixels
	zInc = (float)(1.0 / ((double)UINT_MAX / ((double)m_width * (double)m_height) + 1.0));
	for(z=1.0f; z>0.0f; z-=zInc)
	{
		m_testTris[0].z	= z;
		m_testTris[1].z	= z;
		m_testTris[2].z	= z;
		m_testTris[3].z	= z;
		m_testTris[4].z	= z;
		m_testTris[5].z	= z;

		// Render triangles to test
		m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLELIST, 2, m_testTris, 
								   sizeof(VISTEST_VERTEX));
	}

	m_testTris[0].z	= 0.0f;
	m_testTris[1].z	= 0.0f;
	m_testTris[2].z	= 0.0f;
	m_testTris[3].z	= 0.0f;
	m_testTris[4].z	= 0.0f;
	m_testTris[5].z	= 0.0f;

	// Render 1 more triangle to ensure overflow won't wrap to valid count
	m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLELIST, 1, m_testTris, 
							   sizeof(VISTEST_VERTEX));

	// Do the test?
	hr = m_pDevice->GetIDirect3DDevice8()->EndVisibilityTest(5);
	if(ResultFailed(hr, TEXT("IDirect3DDevice8::EndVisibilityTest")))
	{
		m_pDevice->EndScene();
		return;
	}

    // Display the adapter mode
    ShowDisplayMode();

    // Display the frame rate
    ShowFrameRate();

    // Display the console
    m_pDisplay->ShowConsole();

    // End the scene
    m_pDevice->EndScene();

    // Update the screen
    m_pDevice->Present(NULL, NULL, NULL, NULL);

	// Query the test results
	hr = GetVisibilityTestResult(5, uResult);
	if(ResultFailed(hr, TEXT("IDirect3DDevice8::GetVisibilityTestResult")))
		failure = TRUE;

	// Is the count correct
	else if(uResult != UINT_MAX)
	{
		WCHAR buffer[128];
		wsprintf(buffer, TEXT("vistest: RenderStage4: Incorrect pixel count: Result=%u  Expected=%u  Diff=%d"), 
				 uResult, UINT_MAX, abs(UINT_MAX - (long)uResult));
		Log(LOG_FAIL, buffer);
		if(m_bDvt4)
			__asm int 3;
	}
}

//------------------------------------------------------------------------------
//	CVisibilityTest::RenderStage5
//------------------------------------------------------------------------------
void
CVisibilityTest::RenderStage5(void)
/*++

Routine Description:

	Handles all the rendering for stage 5 testing
	Starts a test, but never finishes to test for possible leaks on exit.

Arguments:

	None

Return Value:

	None

--*/
{
    DWORD	dwClearFlags = D3DCLEAR_TARGET;
    HRESULT	hr;
	UINT	uResult;

    // Clear the rendering target
    if (m_pDisplay->IsDepthBuffered()) 
        dwClearFlags |= (D3DCLEAR_ZBUFFER | D3DCLEAR_STENCIL);
    m_pDevice->Clear(0, NULL, dwClearFlags, RGB_MAKE(0, 0, 0), 1.0f, 0);

    // Begin the scene
    m_pDevice->BeginScene();

    // Position the view using the default camera
    m_pDisplay->SetView();

    // Use a fixed function shader
    m_pDevice->SetVertexShader(FVF_VISTEST_VERTEX);

	// Render obscuring triangles
	m_pDevice->DrawPrimitiveUP(D3DPT_POINTLIST, 1, m_testTris, 
							  sizeof(VISTEST_VERTEX));

	// Setup for the test?
	hr = m_pDevice->GetIDirect3DDevice8()->BeginVisibilityTest();
	if(ResultFailed(hr, TEXT("IDirect3DDevice8::BeginVibilityTest")))
	{
		m_pDevice->EndScene();
		return;
	}
	
    // Display the adapter mode
    ShowDisplayMode();

    // Display the frame rate
    ShowFrameRate();

    // Display the console
    m_pDisplay->ShowConsole();

    // End the scene
    m_pDevice->EndScene();

    // Update the screen
    m_pDevice->Present(NULL, NULL, NULL, NULL);
}

//------------------------------------------------------------------------------
//	CVisibilityTest::GetVisibilityTestResult
//------------------------------------------------------------------------------
HRESULT 
CVisibilityTest::GetVisibilityTestResult(
										 IN  DWORD	id, 
										 OUT UINT&	uResult
										 )
/*++

Routine Description:

	Blocks the device and ensures GetVisibilityTestResult returns a valid 
	answer (errors are still valid).

Arguments:

	IN id		- Test id
	OUT uResult	- Result of test

Return Value:

	None

--*/
{
	HRESULT	hr;

	// Intialize result
	uResult = 0;

	// Block to flush the push-buffer
	m_pDevice->GetIDirect3DDevice8()->BlockUntilIdle();

	// Just to make sure the test returns something valid (error or not), spin...
	do
	{
		hr = m_pDevice->GetIDirect3DDevice8()->GetVisibilityTestResult(id, &uResult, NULL);
	}
	while(hr == D3DERR_TESTINCOMPLETE);
	return hr;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\vistest\exe\sources.inc ===
TARGETNAME=vistest
TARGETTYPE=PROGRAM
TARGETPATH=obj

!include ..\..\..\..\sources.inc

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\l_vistest.lib 

INCLUDES=$(INCLUDES);$(BASEDIR)\private\ntos\inc

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\vistest2\exe\include.cpp ===
#include "exe\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\vistest2\sources.inc ===
!include ..\..\..\sources.inc

MSC_OPTIMIZATION =  $(MSC_OPTIMIZATION) /Od

TARGETNAME=l_vistest2
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SYNCHRONIZE_BLOCK=1

SOURCES=\
    vistest2.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\vistest2\vistest2.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    vistest2.cpp

Author:

    Robert Heitkamp

Description:

    Visibility Test functions.

*******************************************************************************/

#include "d3dlocus.h"
#include "vistest2.h"

//------------------------------------------------------------------------------
//	Constants
//------------------------------------------------------------------------------
static const unsigned int testMinX		= 0;
static const unsigned int testMaxX		= 1;
static const unsigned int testMinY		= 2;
static const unsigned int testMaxY		= 3;
static const unsigned int obscureMinX	= 4;
static const unsigned int obscureMaxX	= 5;
static const unsigned int obscureMinY	= 6;
static const unsigned int obscureMaxY	= 7;

//******************************************************************************
//
// Function:
//
//     ExhibitScene
//
// Description:
//
//     Create the scene, pump messages, process user input,
//     update the scene, render the scene, and release the scene when finished.
//
// Arguments:
//
//     CDisplay* pDisplay           - Pointer to the Display object
//
//     int* pnExitCode              - Optional pointer to an integer that will
//                                    be set to the exit value contained in the 
//                                    wParam parameter of the WM_QUIT message 
//                                    (if received)
//
// Return Value:
//
//     TRUE if the display remains functional on exit, FALSE otherwise.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ExhibitScene)(CDisplay* pDisplay, int* pnExitCode) {

    CVisibilityTest*	pTest;
    BOOL							bRet;

    // Verify that the display has been initialized
    if (!pDisplay) {
        return FALSE;
    }

    // Create the scene
    pTest = new CVisibilityTest();
    if (!pTest) {
        return FALSE;
    }

    // Initialize the scene
    if (!pTest->Create(pDisplay)) {
        pTest->Release();
        return FALSE;
    }

    bRet = pTest->Exhibit(pnExitCode);

    // Clean up the scene
    pTest->Release();

    return bRet;
}

//******************************************************************************
//
// Function:
//
//     ValidateDisplay
//
// Description:
//
//     Evaluate the given display information in order to determine whether or
//     not the display is capable of rendering the scene.  If not, the given 
//     display will not be included in the display list.
//
// Arguments:
//
//     CDirect3D8* pd3d                 - Pointer to the Direct3D object
//
//     D3DCAPS8* pd3dcaps               - Capabilities of the device
//
//     D3DDISPLAYMODE*                  - Display mode into which the device
//                                        will be placed
//
// Return Value:
//
//     TRUE if the scene can be rendered using the given display, FALSE if
//     it cannot.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ValidateDisplay)(CDirect3D8* pd3d, D3DCAPS8* pd3dcaps, D3DDISPLAYMODE* pd3ddm) {

    return TRUE;
}

//******************************************************************************
// CVisibilityTest
//******************************************************************************

//******************************************************************************
//
// Method:
//
//     CVisibilityTest
//
// Description:
//
//     Initialize the test.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
CVisibilityTest::CVisibilityTest() 
{
	//__asm int 3
}

//******************************************************************************
//
// Method:
//
//     ~CVisibilityTest
//
// Description:
//
//     Clean up the test.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
CVisibilityTest::~CVisibilityTest() {
}

//******************************************************************************
//
// Method:
//
//     Create
//
// Description:
//
//     Prepare the test for rendering.
//
// Arguments:
//
//     CDisplay* pDisplay               - Pointer to a Display object.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CVisibilityTest::Create(CDisplay* pDisplay) {

    return CScene::Create(pDisplay);
}

//******************************************************************************
//
// Method:
//
//     Exhibit
//
// Description:
//
//     Execute the test.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     The exit value contained in the wParam parameter of the WM_QUIT message.
//
//******************************************************************************
int 
CVisibilityTest::Exhibit(int *pnExitCode) {
    BOOL            bMsgReady;
    float           fTime, fLastTime, fPrevTime, fTimeFreq;
    LARGE_INTEGER   qwCounter;
    DWORD           dwNumFrames = 0;

    if (!m_bCreated) 
        return TRUE;

    QueryPerformanceFrequency(&qwCounter);
    fTimeFreq = 1.0f / (float)qwCounter.QuadPart;
    QueryPerformanceCounter(&qwCounter);
    fLastTime = (float)qwCounter.QuadPart * fTimeFreq;
    fPrevTime = fLastTime;

	do
	{
		// and draw it
		QueryPerformanceCounter(&qwCounter);
		fTime = (float)qwCounter.QuadPart * fTimeFreq;

		// Process user input
		m_pDisplay->ProcessInput();
		if (!m_pDisplay->ConsoleVisible()) 
			ProcessInput();

		if (m_pDisplay->m_bTimeSync) 
			m_pDisplay->m_bTimeSync = FALSE;
		else 
		{
			m_fTime += (fTime - fLastTime) * m_fTimeDilation;
			m_fFrame += 1.0f;//(1.0f * m_fTimeDilation); // ##REVIEW
			if (m_fFrameDuration != FLT_INFINITE && m_fFrame > m_fFrameDuration) 
				break;
			if (m_fTimeDuration != FLT_INFINITE && m_fTime > m_fTimeDuration) 
				break;
			m_fTimeDelta = m_fTime - m_fLastTime;
			m_fFrameDelta = m_fFrame - m_fLastFrame;
			Update();
			m_fLastTime = m_fTime;
			m_fLastFrame = m_fFrame;
		}

		fLastTime = fTime;

		if (!Render()) 
			break;

		dwNumFrames++;

		if (fTime - fPrevTime > 1.0f) 
		{
			m_fFPS = (float)dwNumFrames / (fTime - fPrevTime);
			fPrevTime = fTime;
			dwNumFrames = 0;
		}
	} while(!m_bQuit);

    if (pnExitCode) 
        *pnExitCode = 0;
    
    return m_bDisplayOK;;
}

//******************************************************************************
//
// Method:
//
//     Prepare
//
// Description:
//
//     Initialize all device-independent data to be used in the scene.  This
//     method is called only once at creation (as opposed to Setup and
//     Initialize, which get called each time the device is Reset).
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the scene was successfully prepared, FALSE if it was not.
//
//******************************************************************************
BOOL CVisibilityTest::Prepare() {
	float	intervalX;
	float	intervalY;

	// Setup indices 
	m_indices[0] = 0;
	m_indices[1] = 1;
	m_indices[2] = 0;
	m_indices[3] = 1;
	m_indices[4] = 0;
	m_indices[5] = 1;
	m_indices[6] = 0;
	m_indices[7] = 1;

	// Store local copy of width and height
	m_width		= m_pDisplay->GetWidth();
	m_height	= m_pDisplay->GetHeight();
	intervalY	= (float)(m_height / 9);
	intervalX	= (float)(m_width / 9);

	// Y coordinates of test triangles
	m_testY[0]	= 0.0f;					
	m_testY[1]	= intervalY * 3.0f;
	m_testY[2]	= intervalY * 6.0f;
	m_testY[3]	= (float)m_height;

	// X coordinates of test triangles
	m_testX[0]	= 0.0f;					
	m_testX[1]	= intervalX * 3.0f;
	m_testX[2]	= intervalX * 6.0f;
	m_testX[3]	= (float)m_width;
	
	// Y coordinates of obscure triangles
	m_obscureY[0]	= 0.0f;					
	m_obscureY[1]	= intervalY;
	m_obscureY[2]	= intervalY * 2.0f;
	m_obscureY[3]	= intervalY * 3.0f;
	m_obscureY[4]	= intervalY * 4.0f;
	m_obscureY[5]	= intervalY * 5.0f;
	m_obscureY[6]	= intervalY * 6.0f;
	m_obscureY[7]	= intervalY * 7.0f;
	m_obscureY[8]	= intervalY * 8.0f;
	m_obscureY[9]	= (float)m_height;

	// X coordinates of obscure triangles
	m_obscureX[0]	= 0.0f;					
	m_obscureX[1]	= intervalX;
	m_obscureX[2]	= intervalX * 2.0f;
	m_obscureX[3]	= intervalX * 3.0f;
	m_obscureX[4]	= intervalX * 4.0f;
	m_obscureX[5]	= intervalX * 5.0f;
	m_obscureX[6]	= intervalX * 6.0f;
	m_obscureX[7]	= intervalX * 7.0f;
	m_obscureX[8]	= intervalX * 8.0f;
	m_obscureX[9]	= (float)m_width;

	// Setup color and rhw component of triangles
	for(int i=0; i<6; ++i)
	{
		m_testTris[i].rhw	= 1.0f;
		m_testTris[i].color	= 0xff0000ff;

		m_obscureTris[i].rhw	= 1.0f;
		m_obscureTris[i].color	= 0xffff0000;
	}

	// Test Id to query
	m_testId = -1;

	// Test state to run
	m_stage = 0;

	m_nextStage = 1;

	return TRUE;
}

//******************************************************************************
//
// Method:
//
//     Setup
//
// Description:
//
//     Obtain the device interface pointer from the display, save the current
//     state of the device, and initialize the background vertices to the
//     dimensions of the render target.
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the scene was successfully prepared for initialization, FALSE if
//     it was not.
//
//******************************************************************************
BOOL CVisibilityTest::Setup() {

    return CScene::Setup();
}

//******************************************************************************
//
// Method:
//
//     Initialize
//
// Description:
//
//     Initialize the device and all device objects to be used in the test (or
//     at least all device resource objects to be created in the video, 
//     non-local video, or default memory pools).
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the test was successfully initialized for rendering, FALSE if
//     it was not.
//
//******************************************************************************
BOOL CVisibilityTest::Initialize() {
	D3DPRESENT_PARAMETERS	d3dpp;

    m_pDisplay->GetPresentParameters(&d3dpp);
	CopyMemory(&m_savedD3dpp, &d3dpp, sizeof(D3DPRESENT_PARAMETERS));
	d3dpp.FullScreen_PresentationInterval = D3DPRESENT_INTERVAL_IMMEDIATE;
	m_pDevice->Reset(&d3dpp);
	return TRUE;
}

//******************************************************************************
//
// Method:
//
//     Efface
//
// Description:
//
//     Release all device resource objects (or at least those objects created
//     in video memory, non-local video memory, or the default memory pools)
//     and restore the device to its initial state.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CVisibilityTest::Efface() {
	m_pDevice->Reset(&m_savedD3dpp);
    CScene::Efface();
}

//******************************************************************************
//
// Method:
//
//     Update
//
// Description:
//
//     Update the state of the scene to coincide with the given time.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CVisibilityTest::Update() {
	UINT	minX;
	UINT	maxX;
	UINT	minY;
	UINT	maxY;
	UINT	osTestMinX;
	UINT	osTestMaxX;
	UINT	osTestMinY;
	UINT	osTestMaxY;
	UINT	osObscureMinX;
	UINT	osObscureMaxX;
	UINT	osObscureMinY;
	UINT	osObscureMaxY;
	UINT	width1	= m_width - 1;
	UINT	height1	= m_height - 1;

	// Not created? do nothing
	if(!m_bCreated)
		return;
    
	// Adjust the stage
	m_stage = m_nextStage;

	switch(m_stage)
	{
	case 1:	// Basic functionality testing
		{
			// Setup the triangles
			m_testTris[0].x = m_testX[m_indices[testMinX]];
			m_testTris[0].y = m_testY[m_indices[testMaxY]];
			m_testTris[0].z	= 0.75f;

			m_testTris[1].x = m_testX[m_indices[testMinX]];
			m_testTris[1].y = m_testY[m_indices[testMinY]];
			m_testTris[1].z	= 0.75f;

			m_testTris[2].x = m_testX[m_indices[testMaxX]];
			m_testTris[2].y = m_testY[m_indices[testMaxY]];
			m_testTris[2].z	= 0.75f;

			m_testTris[3].x = m_testX[m_indices[testMinX]];
			m_testTris[3].y = m_testY[m_indices[testMinY]];
			m_testTris[3].z	= 0.75f;

			m_testTris[4].x = m_testX[m_indices[testMaxX]];
			m_testTris[4].y = m_testY[m_indices[testMinY]];
			m_testTris[4].z	= 0.75f;

			m_testTris[5].x = m_testX[m_indices[testMaxX]];
			m_testTris[5].y = m_testY[m_indices[testMaxY]];
			m_testTris[5].z	= 0.75f;

			m_obscureTris[0].x	= m_obscureX[m_indices[obscureMinX]];
			m_obscureTris[0].y	= m_obscureY[m_indices[obscureMaxY]];
			m_obscureTris[0].z	= 0.25f;

			m_obscureTris[1].x	= m_obscureX[m_indices[obscureMinX]];
			m_obscureTris[1].y	= m_obscureY[m_indices[obscureMinY]];
			m_obscureTris[1].z	= 0.25f;

			m_obscureTris[2].x	= m_obscureX[m_indices[obscureMaxX]];
			m_obscureTris[2].y	= m_obscureY[m_indices[obscureMaxY]];
			m_obscureTris[2].z	= 0.25f;

			m_obscureTris[3].x	= m_obscureX[m_indices[obscureMinX]];
			m_obscureTris[3].y	= m_obscureY[m_indices[obscureMinY]];
			m_obscureTris[3].z	= 0.25f;

			m_obscureTris[4].x	= m_obscureX[m_indices[obscureMaxX]];
			m_obscureTris[4].y	= m_obscureY[m_indices[obscureMinY]];
			m_obscureTris[4].z	= 0.25f;

			m_obscureTris[5].x	= m_obscureX[m_indices[obscureMaxX]];
			m_obscureTris[5].y	= m_obscureY[m_indices[obscureMaxY]];
			m_obscureTris[5].z	= 0.25f;

			// -----Calculate the number of visible pixels-----

			// Shotcuts for clearer code
			osTestMinX		= (UINT)m_testX[m_indices[testMinX]];
			osTestMaxX		= (UINT)m_testX[m_indices[testMaxX]];
			osTestMinY		= (UINT)m_testY[m_indices[testMinY]];
			osTestMaxY		= (UINT)m_testY[m_indices[testMaxY]];
			osObscureMinX	= (UINT)m_obscureX[m_indices[obscureMinX]];
			osObscureMaxX	= (UINT)m_obscureX[m_indices[obscureMaxX]];
			osObscureMinY	= (UINT)m_obscureY[m_indices[obscureMinY]];
			osObscureMaxY	= (UINT)m_obscureY[m_indices[obscureMaxY]];

			// Is box completely offscreen or
			// does the obscuring box completely cover the screen or
			// does the obscuring box completely cover the test box?
			if((osTestMinX > osTestMaxX) || (osTestMinY > osTestMaxY) ||
			   ((osObscureMinX == 0) && (osObscureMinY == 0) &&
				(osObscureMaxX == width1) && (osObscureMaxY == height1)) ||
			   ((osObscureMinX <= osTestMinX) && (osObscureMinY <= osTestMinY) &&
				(osObscureMaxX >= osTestMaxX) && (osObscureMaxY >= osTestMaxY)))
			{
				m_uVisible = 0;
			}

			// Is the obscuring box completely offscreen or
			// does the obscuring box not obscure the test box at all?
			else if((osObscureMinX > osObscureMaxX) || (osObscureMinY > osObscureMaxY) ||
					(osObscureMaxX < osTestMinX) || (osObscureMaxY < osTestMinY) ||
					(osObscureMinX > osTestMaxX) || (osObscureMinY > osTestMaxY))
			{
				m_uVisible = (osTestMaxX - osTestMinX) * 
							 (osTestMaxY - osTestMinY);
			}

			// Calculate the unobscured area
			else
			{
				// Intersection of two boxes (obscured area)
				minX = Max(osTestMinX, osObscureMinX);
				minY = Max(osTestMinY, osObscureMinY);
				maxX = Min(osTestMaxX, osObscureMaxX);
				maxY = Min(osTestMaxY, osObscureMaxY);

				// Unobscured pixels
				m_uVisible = ((osTestMaxX - osTestMinX) * 
							  (osTestMaxY - osTestMinY)) - 
							 ((maxX - minX) * (maxY - minY));
			}	

			// Test Id
			// Note: 0-9 are reserved for hard coded valid tests
			// 10-19 are reserved for invalid test and should never
			// be used with EndVisibilityTest()
			++m_testId;

			// The following number is taken from REPORTS_MAX_INDEX in
			// private\windows\directx\dxg\d3d8\se\device.h
			// I don't believe this header file is publicly available
			// and will need to be checked over time to ensure for a valid
			// test id.
			if(m_testId >= 2048)
				m_testId = 20;

			// HACK: Bug in EndVisibilityTest() when passed id 768 
			// (maybe >= 768) to renable testing of id's >= 768, comment
			// or remove the next two lines
//			else if(m_testId >= 768)
//				m_testId = 20;

			// Save slots 10-19 for invalid tests
			else if(m_testId < 20)
				m_testId = 20;

			// Update for next test (TRUE == end of test)
			if(UpdateIndices())
				m_nextStage = m_stage + 1;;
		}
		break;

	case 2:	// Invalid parameters
		{
			m_testTris[0].x = 50.0f;
			m_testTris[0].y = 50.0f;
			m_testTris[0].z	= 0.75f;

			m_testTris[1].x = 100.0f;
			m_testTris[1].y = 50.0f;
			m_testTris[1].z	= 0.75f;

			m_testTris[2].x = 50.0f;
			m_testTris[2].y = 100.0f;
			m_testTris[2].z	= 0.75f;

			m_testTris[3].x = 50.0f;
			m_testTris[3].y = 100.0f;
			m_testTris[3].z	= 0.75f;

			m_testTris[4].x = 100.0f;
			m_testTris[4].y = 50.0f;
			m_testTris[4].z	= 0.75f;

			m_testTris[5].x = 100.0f;
			m_testTris[5].y = 100.0f;
			m_testTris[5].z	= 0.75f;

			// 50 x 50
			m_uVisible = 2500;
			m_nextStage = m_stage + 1;
		}
		break;

	case 3: // valid count
	case 4: // Overflow
		{
			m_testTris[0].x		= 0.0f;
			m_testTris[0].y		= 0.0f;
			m_testTris[0].z		= 1.0f;
			m_testTris[0].color	= 0xff00ff00;

			m_testTris[1].x		= (float)m_width;
			m_testTris[1].y		= 0.0f;
			m_testTris[1].z		= 1.0f;
			m_testTris[1].color	= 0xff00ff00;

			m_testTris[2].x		= 0.0f;
			m_testTris[2].y		= (float)m_height;
			m_testTris[2].z		= 1.0f;
			m_testTris[2].color	= 0xff00ff00;

			m_testTris[3].x		= 0.0f;
			m_testTris[3].y		= (float)m_height;
			m_testTris[3].z		= 1.0f;
			m_testTris[3].color	= 0xff00ff00;

			m_testTris[4].x		= (float)m_width;
			m_testTris[4].y		= 0.0f;
			m_testTris[4].z		= 1.0f;
			m_testTris[4].color	= 0xff00ff00;

			m_testTris[5].x		= (float)m_width;
			m_testTris[5].y		= (float)m_height;
			m_testTris[5].z		= 1.0f;
			m_testTris[5].color	= 0xff00ff00;

			m_nextStage = m_stage + 1;
		}
		break;

	case 5:	// Exit without end

		m_nextStage = m_stage + 1;
		break;

	default:
		// End the test
		m_bQuit = TRUE;
	}
}

//******************************************************************************
//
// Method:
//
//     Render
//
// Description:
//
//     Render the test scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CVisibilityTest::Render() {
    if(!m_bCreated) 
        return FALSE;

#ifndef UNDER_XBOX
	HRESULT	hr;

    hr = m_pDevice->TestCooperativeLevel();
    if (FAILED(hr)) {
        if (hr == D3DERR_DEVICELOST) 
            return TRUE;
        if (hr == D3DERR_DEVICENOTRESET) {
            if (!Reset()) 
                return FALSE;
        }
    }
#endif // !UNDER_XBOX

	switch(m_stage) {
	case 1:
		RenderStage1();
		break;
	case 2:
		RenderStage2();
		break;
	case 3:
		RenderStage3();
		break;
	case 4:
		RenderStage4();
		break;
	case 5:
		RenderStage5();
		break;
	}

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     ProcessInput
//
// Description:
//
//     Process user input for the scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CVisibilityTest::ProcessInput() {

    CScene::ProcessInput();
}

//******************************************************************************
//
// Method:
//
//     InitView
//
// Description:
//
//     Initialize the camera view in the scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CVisibilityTest::InitView() {

    return CScene::InitView();
}

//******************************************************************************
// Scene window procedure (pseudo-subclassed off the main window procedure)
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     WndProc
//
// Description:
//
//     Scene window procedure to process messages received by the main 
//     application window.
//
// Arguments:
//
//     LRESULT* plr             - Result of the message processing
//
//     HWND hWnd                - Application window
//
//     UINT uMsg                - Message to process
//
//     WPARAM wParam            - First message parameter
//
//     LPARAM lParam            - Second message parameter
//
// Return Value:
//
//     TRUE if the message was handled, FALSE otherwise.
//
//******************************************************************************
BOOL CVisibilityTest::WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    *plr = 0;

#ifndef UNDER_XBOX

    switch (uMsg) {

        case WM_KEYDOWN:

            switch (wParam) {

                case VK_F12: // Toggle pause state
                    m_bPaused = !m_bPaused;
                    return TRUE;
            }

            break;
    }

#endif // !UNDER_XBOX

    return CScene::WndProc(plr, hWnd, uMsg, wParam, lParam);
}

//------------------------------------------------------------------------------
//	CVisibilityTest::UpdateIndices
//------------------------------------------------------------------------------
BOOL 
CVisibilityTest::UpdateIndices(void)
/*++

Routine Description:

	Updates the index list to adjust for the next state of operation.
	There are 8 indices: 76543210
	Indices 7-4 are the states of the obscuring box.
	Indices 3-0 are the states of the obscuring box

Arguments:

	None

Return Value:

	TRUE when the indices have completely cycled through their entire
	range, FALSE otherwise.

--*/
{
	int		i;
	BOOL	reset;

	++m_indices[7];

	// Obscure m_indices
	for(i=7; i>=4; --i) {

		// Odd numbered m_indices cannot be > 9
		if(i & 1) {
			if(m_indices[i] > 9) {
				++m_indices[i-1];
				m_indices[i]	= 0;
				reset			= TRUE;
			}
			else
				reset = FALSE;
		}

		// Even numbered m_indices cannot be > 8
		else {
			if(m_indices[i] > 8) {
				++m_indices[i-1];
				m_indices[i] = 0;
			}

			if(reset)
				m_indices[i+1] = m_indices[i] + 1;
		}		
	}

	// Test m_indices
	for(; i>=0; --i) {

		// Odd numbered m_indices cannot be > 3
		if(i & 1) {
			if(m_indices[i] > 3) {
				++m_indices[i-1];
				m_indices[i]	= 0;
				reset			= TRUE;
			}
			else
				reset = FALSE;
		}

		// Even numbered m_indices cannot be > 2
		else {
			if(m_indices[i] > 2) {
				if(i) {
					++m_indices[i-1];
					m_indices[i] = 0;
				}
				else
					return TRUE;
			}

			if(reset)
				m_indices[i+1] = m_indices[i] + 1;
		}		
	}
	return FALSE;
}

//------------------------------------------------------------------------------
//	CVisibilityTest::Max
//------------------------------------------------------------------------------
UINT 
CVisibilityTest::Max(
					 IN	UINT a, 
					 IN	UINT b
					 )
/*++

Routine Description:

	Returns the max of two unsinged ints

Arguments:

	IN a	- First value
	IN b	- Second value

Return Value:

	The larger of the two values

--*/
{
	return (a >= b ? a : b);
}
	
//------------------------------------------------------------------------------
//	CVisibilityTest::Min
//------------------------------------------------------------------------------
UINT 
CVisibilityTest::Min(
					 IN	UINT a, 
					 IN	UINT b
					 )
/*++

Routine Description:

	Returns the min of two unsigned ints

Arguments:

	IN a	- First value
	IN b	- Second value

Return Value:

	The lesser of the two values

--*/
{
	return (a <= b ? a : b);
}

//------------------------------------------------------------------------------
//	CVisibilityTest::RenderStage1
//------------------------------------------------------------------------------
void
CVisibilityTest::RenderStage1(void)
/*++

Routine Description:

	Handles all the rendering for stage 1 testing
	This is mostly a stress test. aprox 72,899 tests are performed with 
	varying degrees of obscurity.

Arguments:

	None

Return Value:

	None

--*/
{
    DWORD	dwClearFlags = D3DCLEAR_TARGET;
    HRESULT	hr;
	UINT	uResult;
	BOOL	failure = FALSE;
	
    // Clear the rendering target
    if (m_pDisplay->IsDepthBuffered()) 
        dwClearFlags |= (D3DCLEAR_ZBUFFER | D3DCLEAR_STENCIL);
    m_pDevice->Clear(0, NULL, dwClearFlags, RGB_MAKE(0, 0, 0), 1.0f, 0);

    // Begin the scene
    m_pDevice->BeginScene();

    // Position the view using the default camera
    m_pDisplay->SetView();

    // Use a fixed function shader
    m_pDevice->SetVertexShader(FVF_VISTEST_VERTEX);

	// Render obscuring triangles
	m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLELIST, 2, m_obscureTris, 
							  sizeof(VISTEST_VERTEX));

	// Setup for the test?
	hr = m_pDevice->GetIDirect3DDevice8()->BeginVisibilityTest();
	if(ResultFailed(hr, TEXT("IDirect3DDevice8::BeginVisibilityTest")))
	{
		m_pDevice->EndScene();
		return;
	}

	// Render triangles to test
	m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLELIST, 2, m_testTris, 
							   sizeof(VISTEST_VERTEX));

	// Do the test?
	hr = m_pDevice->GetIDirect3DDevice8()->EndVisibilityTest(m_testId);
	if(ResultFailed(hr, TEXT("IDirect3DDevice8::EndVisibilityTest")))
	{
		m_pDevice->EndScene();
		return;
	}

    // Display the adapter mode
    ShowDisplayMode();

    // Display the frame rate
    ShowFrameRate();

    // Display the console
    m_pDisplay->ShowConsole();

    // End the scene
    m_pDevice->EndScene();

    // Update the screen
    m_pDevice->Present(NULL, NULL, NULL, NULL);

	// Query the test results
	hr = GetVisibilityTestResult(m_testId, uResult);
	if(ResultFailed(hr, TEXT("IDirect3DDevice8::GetVisibilitTestResult")))
		failure = TRUE;

	// Is the count correct
	else if(uResult != m_uVisible)
	{
		WCHAR buffer[128];
		wsprintf(buffer, TEXT("vistest: RenderStage1: Incorrect pixel count: Result=%u  Expected=%u  Diff=%d"), 
				 uResult, m_uVisible, abs((long)uResult - (long)m_uVisible));
		Log(LOG_FAIL, buffer);
		__asm int 3;
	}
}

//------------------------------------------------------------------------------
//	CVisibilityTest::RenderStage2
//------------------------------------------------------------------------------
void
CVisibilityTest::RenderStage2(void)
/*++

Routine Description:

	Handles all the rendering for stage 2 testing
	Simple testing of api used in invalid manners

Arguments:

	None

Return Value:

	None

--*/
{
    DWORD	dwClearFlags = D3DCLEAR_TARGET;
    HRESULT	hr;
	UINT	uResult;

	// Test 1: Begin - End0 - Get1 -> Error

    // Clear the rendering target
    if (m_pDisplay->IsDepthBuffered()) 
        dwClearFlags |= (D3DCLEAR_ZBUFFER | D3DCLEAR_STENCIL);
    m_pDevice->Clear(0, NULL, dwClearFlags, RGB_MAKE(0, 0, 0), 1.0f, 0);

    // Begin the scene
    m_pDevice->BeginScene();

    // Position the view using the default camera
    m_pDisplay->SetView();

    // Use a fixed function shader
    m_pDevice->SetVertexShader(FVF_VISTEST_VERTEX);

	// Setup for the test?
	hr = m_pDevice->GetIDirect3DDevice8()->BeginVisibilityTest();
	if(ResultFailed(hr, TEXT("IDirect3DDevice8::BeginVisibilityTest")))
	{
		m_pDevice->EndScene();
		return;
	}

	// Render triangles to test
	m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLELIST, 2, m_testTris, 
							   sizeof(VISTEST_VERTEX));

	// Valid call
	hr = m_pDevice->GetIDirect3DDevice8()->EndVisibilityTest(0);
	if(ResultFailed(hr, TEXT("IDirect3DDevice8::EndVisibilityTest")))
	{
		m_pDevice->EndScene();
		return;
	}

    // Display the adapter mode
    ShowDisplayMode();

    // Display the frame rate
    ShowFrameRate();

    // Display the console
    m_pDisplay->ShowConsole();

    // End the scene
    m_pDevice->EndScene();

    // Update the screen
    m_pDevice->Present(NULL, NULL, NULL, NULL);

	// Invalid query the test results
#if !defined(DEBUG) && !defined(_DEBUG)
	hr = GetVisibilityTestResult(5, uResult);
	if(SUCCEEDED(hr))
	{
		Log(LOG_FAIL, TEXT("IDirect3DDevice8::GetVisibilitTestResult failed by not failing"));
		return;
	}
#endif

	// Valid call
	hr = m_pDevice->GetIDirect3DDevice8()->EndVisibilityTest(1);
	if(ResultFailed(hr, TEXT("IDirect3DDevice8::EndVisibilityTest")))
		return;

	// Valid query the test results
	hr = GetVisibilityTestResult(0, uResult);
	if(ResultFailed(hr, TEXT("IDirect3DDevice8::GetVisibilityTestResult")))
		return;
	else if(uResult != m_uVisible)
		return;

	// Valid query the test results
	hr = GetVisibilityTestResult(1, uResult);
	if(ResultFailed(hr, TEXT("IDirect3DDevice8::GetVisibilityTestResult")))
		return;
	else if(uResult != m_uVisible)
		return;

	// Test 2: Get3 -> Error

    // Clear the rendering target
    if (m_pDisplay->IsDepthBuffered()) 
        dwClearFlags |= (D3DCLEAR_ZBUFFER | D3DCLEAR_STENCIL);
    m_pDevice->Clear(0, NULL, dwClearFlags, RGB_MAKE(0, 0, 0), 1.0f, 0);

    // Begin the scene
    m_pDevice->BeginScene();

    // Position the view using the default camera
    m_pDisplay->SetView();

    // Use a fixed function shader
    m_pDevice->SetVertexShader(FVF_VISTEST_VERTEX);

	// Render triangles to test
	m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLELIST, 2, m_testTris, 
							   sizeof(VISTEST_VERTEX));

    // Display the adapter mode
    ShowDisplayMode();

    // Display the frame rate
    ShowFrameRate();

    // Display the console
    m_pDisplay->ShowConsole();

    // End the scene
    m_pDevice->EndScene();

    // Update the screen
    m_pDevice->Present(NULL, NULL, NULL, NULL);

	// Invalid query the test results
#if !defined(DEBUG) && !defined(_DEBUG)
	hr = GetVisibilityTestResult(3, uResult);
	if(SUCCEEDED(hr))
	{
		Log(LOG_FAIL, TEXT("IDirect3DDevice8::GetVisibilityTestResult failed by not failing"));
		return;
	}
#endif
}

//------------------------------------------------------------------------------
//	CVisibilityTest::RenderStage3
//------------------------------------------------------------------------------
void
CVisibilityTest::RenderStage3(void)
/*++

Routine Description:

	Handles all the rendering for stage 3 testing
	This test verifies that multiple poltgons drawn on top of each other
	generates the correct result (which will be more pixels than those
	normally visible). The counter should include all pixels drawn, not just
	those that show up on the screen.

Arguments:

	None

Return Value:

	None

--*/
{
    DWORD	dwClearFlags = D3DCLEAR_TARGET;
    HRESULT	hr;
	UINT	uResult;
	float	z;
	float	zInc;
	BOOL	failure = FALSE;
	UINT	expected = m_width * m_height * 5;

    // Clear the rendering target
    if (m_pDisplay->IsDepthBuffered()) 
        dwClearFlags |= (D3DCLEAR_ZBUFFER | D3DCLEAR_STENCIL);
    m_pDevice->Clear(0, NULL, dwClearFlags, RGB_MAKE(0, 0, 0), 1.0f, 0);

    // Begin the scene
    m_pDevice->BeginScene();

    // Position the view using the default camera
    m_pDisplay->SetView();

    // Use a fixed function shader
    m_pDevice->SetVertexShader(FVF_VISTEST_VERTEX);

	// Render obscuring triangles
	m_pDevice->DrawPrimitiveUP(D3DPT_POINTLIST, 1, m_testTris, 
							  sizeof(VISTEST_VERTEX));

	// Setup for the test?
	hr = m_pDevice->GetIDirect3DDevice8()->BeginVisibilityTest();
	if(ResultFailed(hr, TEXT("IDirect3DDevice8::BeginVisibilityTest")))
	{
		m_pDevice->EndScene();
		return;
	}

	// Draw 5 layers
	zInc = 0.25;
	for(z=1.0f; z>=0.0f; z-=zInc)
	{
		m_testTris[0].z	= z;
		m_testTris[1].z	= z;
		m_testTris[2].z	= z;
		m_testTris[3].z	= z;
		m_testTris[4].z	= z;
		m_testTris[5].z	= z;

		// Render triangles to test
		m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLELIST, 2, m_testTris, 
								   sizeof(VISTEST_VERTEX));
	}

	// Do the test?
	hr = m_pDevice->GetIDirect3DDevice8()->EndVisibilityTest(4);
	if(ResultFailed(hr, TEXT("IDirect3DDevice8::EndVisibilityTest")))
	{
		m_pDevice->EndScene();
		return;
	}

    // Display the adapter mode
    ShowDisplayMode();

    // Display the frame rate
    ShowFrameRate();

    // Display the console
    m_pDisplay->ShowConsole();

    // End the scene
    m_pDevice->EndScene();

    // Update the screen
    m_pDevice->Present(NULL, NULL, NULL, NULL);

	// Query the test results
	hr = GetVisibilityTestResult(4, uResult);
	if(ResultFailed(hr, TEXT("IDirect3DDevice8::GetVisibilityTestResult")))
		failure = TRUE;

	// Is the count correct
	else if(uResult != expected)
	{
		WCHAR buffer[128];
		wsprintf(buffer, TEXT("vistest: RenderStage3: Incorrect pixel count: Result=%u  Expected=%u  Diff=%d"), 
				 uResult, expected, abs((long)uResult - (long)expected));
		Log(LOG_FAIL, buffer);
		__asm int 3;
	}
}

//------------------------------------------------------------------------------
//	CVisibilityTest::RenderStage4
//------------------------------------------------------------------------------
void
CVisibilityTest::RenderStage4(void)
/*++

Routine Description:

	Handles all the rendering for stage 4 testing
	Test for internal overflow by drawing more than UINT_MAX pixels.

Arguments:

	None

Return Value:

	None

--*/
{
    DWORD	dwClearFlags = D3DCLEAR_TARGET;
    HRESULT	hr;
	UINT	uResult;
	float	z;
	float	zInc;
	BOOL	failure = FALSE;

    // Clear the rendering target
    if (m_pDisplay->IsDepthBuffered()) 
        dwClearFlags |= (D3DCLEAR_ZBUFFER | D3DCLEAR_STENCIL);
    m_pDevice->Clear(0, NULL, dwClearFlags, RGB_MAKE(0, 0, 0), 1.0f, 0);

    // Begin the scene
    m_pDevice->BeginScene();

    // Position the view using the default camera
    m_pDisplay->SetView();

    // Use a fixed function shader
    m_pDevice->SetVertexShader(FVF_VISTEST_VERTEX);

	// Render obscuring triangles
	m_pDevice->DrawPrimitiveUP(D3DPT_POINTLIST, 1, m_testTris, 
							  sizeof(VISTEST_VERTEX));

	// Setup for the test?
	hr = m_pDevice->GetIDirect3DDevice8()->BeginVisibilityTest();
	if(ResultFailed(hr, TEXT("IDirect3DDevice8::BeginVisibilityTest")))
	{
		m_pDevice->EndScene();
		return;
	}

	// Calculate how many layers to draw: width*height pixels per screen
	// need to draw more than UINT_MAX pixels
	zInc = (float)(1.0 / ((double)UINT_MAX / ((double)m_width * (double)m_height) + 1.0));
	for(z=1.0f; z>0.0f; z-=zInc)
	{
		m_testTris[0].z	= z;
		m_testTris[1].z	= z;
		m_testTris[2].z	= z;
		m_testTris[3].z	= z;
		m_testTris[4].z	= z;
		m_testTris[5].z	= z;

		// Render triangles to test
		m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLELIST, 2, m_testTris, 
								   sizeof(VISTEST_VERTEX));
	}

	m_testTris[0].z	= 0.0f;
	m_testTris[1].z	= 0.0f;
	m_testTris[2].z	= 0.0f;
	m_testTris[3].z	= 0.0f;
	m_testTris[4].z	= 0.0f;
	m_testTris[5].z	= 0.0f;

	// Render 1 more triangle to ensure overflow won't wrap to valid count
	m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLELIST, 1, m_testTris, 
							   sizeof(VISTEST_VERTEX));

	// Do the test?
	hr = m_pDevice->GetIDirect3DDevice8()->EndVisibilityTest(5);
	if(ResultFailed(hr, TEXT("IDirect3DDevice8::EndVisibilityTest")))
	{
		m_pDevice->EndScene();
		return;
	}

    // Display the adapter mode
    ShowDisplayMode();

    // Display the frame rate
    ShowFrameRate();

    // Display the console
    m_pDisplay->ShowConsole();

    // End the scene
    m_pDevice->EndScene();

    // Update the screen
    m_pDevice->Present(NULL, NULL, NULL, NULL);

	// Query the test results
	hr = GetVisibilityTestResult(5, uResult);
	if(ResultFailed(hr, TEXT("IDirect3DDevice8::GetVisibilityTestResult")))
		failure = TRUE;

	// Is the count correct
	else if(uResult != UINT_MAX)
	{
		WCHAR buffer[128];
		wsprintf(buffer, TEXT("vistest: RenderStage4: Incorrect pixel count: Result=%u  Expected=%u  Diff=%d"), 
				 uResult, UINT_MAX, abs(UINT_MAX - (long)uResult));
		Log(LOG_FAIL, buffer);
		__asm int 3;
	}
}

//------------------------------------------------------------------------------
//	CVisibilityTest::RenderStage5
//------------------------------------------------------------------------------
void
CVisibilityTest::RenderStage5(void)
/*++

Routine Description:

	Handles all the rendering for stage 5 testing
	Starts a test, but never finishes to test for possible leaks on exit.

Arguments:

	None

Return Value:

	None

--*/
{
    DWORD	dwClearFlags = D3DCLEAR_TARGET;
    HRESULT	hr;
	UINT	uResult;

    // Clear the rendering target
    if (m_pDisplay->IsDepthBuffered()) 
        dwClearFlags |= (D3DCLEAR_ZBUFFER | D3DCLEAR_STENCIL);
    m_pDevice->Clear(0, NULL, dwClearFlags, RGB_MAKE(0, 0, 0), 1.0f, 0);

    // Begin the scene
    m_pDevice->BeginScene();

    // Position the view using the default camera
    m_pDisplay->SetView();

    // Use a fixed function shader
    m_pDevice->SetVertexShader(FVF_VISTEST_VERTEX);

	// Render obscuring triangles
	m_pDevice->DrawPrimitiveUP(D3DPT_POINTLIST, 1, m_testTris, 
							  sizeof(VISTEST_VERTEX));

	// Setup for the test?
	hr = m_pDevice->GetIDirect3DDevice8()->BeginVisibilityTest();
	if(ResultFailed(hr, TEXT("IDirect3DDevice8::BeginVibilityTest")))
	{
		m_pDevice->EndScene();
		return;
	}
	
    // Display the adapter mode
    ShowDisplayMode();

    // Display the frame rate
    ShowFrameRate();

    // Display the console
    m_pDisplay->ShowConsole();

    // End the scene
    m_pDevice->EndScene();

    // Update the screen
    m_pDevice->Present(NULL, NULL, NULL, NULL);
}

//------------------------------------------------------------------------------
//	CVisibilityTest::GetVisibilityTestResult
//------------------------------------------------------------------------------
HRESULT 
CVisibilityTest::GetVisibilityTestResult(
										 IN  DWORD	id, 
										 OUT UINT&	uResult
										 )
/*++

Routine Description:

	Blocks the device and ensures GetVisibilityTestResult returns a valid 
	answer (errors are still valid).

Arguments:

	IN id		- Test id
	OUT uResult	- Result of test

Return Value:

	None

--*/
{
	HRESULT	hr;

	// Intialize result
	uResult = 0;

	// Block to flush the push-buffer
	m_pDevice->GetIDirect3DDevice8()->BlockUntilIdle();

	// Just to make sure the test returns something valid (error or not), spin...
	do
	{
		hr = m_pDevice->GetIDirect3DDevice8()->GetVisibilityTestResult(id, &uResult, NULL);
	}
	while(hr == D3DERR_TESTINCOMPLETE);
	return hr;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\vistest2\dll\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=vistest2
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\vpshadr1\dll\include.cpp ===
#include "dll\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\vistest2\vistest2.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    vistest2.h

Author:

    Robert Heitkamp

Description:

    Visibilty Test functions

*******************************************************************************/

#ifndef __VISTEST2_H__
#define __VISTEST2_H__

//------------------------------------------------------------------------------
//	Vertex structure
//------------------------------------------------------------------------------
struct VISTEST_VERTEX
{
	FLOAT x, y, z, rhw; // The transformed position for the vertex
	DWORD color;        // The vertex color
};
#define FVF_VISTEST_VERTEX (D3DFVF_XYZRHW | D3DFVF_DIFFUSE)

//------------------------------------------------------------------------------
//	Constantes
//------------------------------------------------------------------------------
static const int testMaxIterations		= 4;
static const int obscureMaxIterations	= 10;

//------------------------------------------------------------------------------
//	CVisibilityTest
//------------------------------------------------------------------------------
class CVisibilityTest : public CScene {
public:

                                    CVisibilityTest();
                                    ~CVisibilityTest();

    virtual BOOL                    Create(CDisplay* pDisplay);
    virtual int                     Exhibit(int *pnExitCode);

protected:

    virtual BOOL                    Prepare();
    virtual BOOL                    Setup();
    virtual BOOL                    Initialize();
    virtual void                    Efface();
    virtual void                    Update();
    virtual BOOL                    Render();

    virtual void                    ProcessInput();
    virtual BOOL                    InitView();

    virtual BOOL                    WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, 
                                            WPARAM wParam, LPARAM lParam);

private:

	BOOL UpdateIndices(void);
	UINT Max(UINT a, UINT b);
	UINT Min(UINT a, UINT b);
    void RenderStage1(void);
    void RenderStage2(void);
    void RenderStage3(void);
    void RenderStage4(void);
    void RenderStage5(void);
	HRESULT GetVisibilityTestResult(DWORD id, UINT& uResult);

private:

	VISTEST_VERTEX			m_testTris[6];
	VISTEST_VERTEX			m_obscureTris[6];
	float					m_testY[testMaxIterations];
	float					m_testX[testMaxIterations];
	float					m_obscureY[obscureMaxIterations];
	float					m_obscureX[obscureMaxIterations];
	int						m_indices[8];
	DWORD					m_index;
	UINT					m_uVisible;
	UINT					m_height;
	UINT					m_width;
	int						m_stage;
	int						m_nextStage;
	DWORD					m_testId;
	D3DPRESENT_PARAMETERS	m_savedD3dpp;


};

#endif //__VISTEST_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\vistest2\exe\sources.inc ===
TARGETNAME=vistest2
TARGETTYPE=PROGRAM
TARGETPATH=obj

!include ..\..\..\..\sources.inc

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\l_vistest2.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\vpshadr1\modulex.h ===
#define PREPEND_MODULE(Suffix) vpshadr1##Suffix
#define MODULE_STRING "vpshadr1"
#pragma comment(linker, "/include:_vpshadr1_ExhibitScene@8")
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\vpshadr1\vpshader.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    vpshader.cpp

Author:

    Matt Bronder

Description:

    Basic vertex and pixel shader test.

*******************************************************************************/

#include "d3dlocus.h"
#include "vpshader.h"

#define WINX_D3DVSDE_POSITION        0
#define WINX_D3DVSDE_BLENDWEIGHT     1
#define WINX_D3DVSDE_BLENDINDICES    2
#define WINX_D3DVSDE_NORMAL          3
#define WINX_D3DVSDE_PSIZE           4
#define WINX_D3DVSDE_DIFFUSE         5
#define WINX_D3DVSDE_SPECULAR        6
#define WINX_D3DVSDE_TEXCOORD0       7
#define WINX_D3DVSDE_TEXCOORD1       8
#define WINX_D3DVSDE_TEXCOORD2       9
#define WINX_D3DVSDE_TEXCOORD3       10
#define WINX_D3DVSDE_TEXCOORD4       11
#define WINX_D3DVSDE_TEXCOORD5       12
#define WINX_D3DVSDE_TEXCOORD6       13
#define WINX_D3DVSDE_TEXCOORD7       14
#define WINX_D3DVSDE_POSITION2       15
#define WINX_D3DVSDE_NORMAL2         16

//******************************************************************************
CVertexBuffer8* CreateComponentVB(CDevice8* pDevice, LPVOID pvComponent, 
                                  UINT uNumComponents, UINT uCompSize, 
                                  UINT uCompStride);

//******************************************************************************
//
// Function:
//
//     ExhibitScene
//
// Description:
//
//     Create the scene, pump messages, process user input,
//     update the scene, render the scene, and release the scene when finished.
//
// Arguments:
//
//     CDisplay* pDisplay           - Pointer to the Display object
//
//     int* pnExitCode              - Optional pointer to an integer that will
//                                    be set to the exit value contained in the 
//                                    wParam parameter of the WM_QUIT message 
//                                    (if received)
//
// Return Value:
//
//     TRUE if the display remains functional on exit, FALSE otherwise.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ExhibitScene)(CDisplay* pDisplay, int* pnExitCode) {

    CVPShader*  pVPShader;
    BOOL        bRet;

    // Verify that the display has been initialized
    if (!pDisplay) {
        return FALSE;
    }

    // Create the scene
    pVPShader = new CVPShader();
    if (!pVPShader) {
        return FALSE;
    }

    // Initialize the scene
    if (!pVPShader->Create(pDisplay)) {
        pVPShader->Release();
        return FALSE;
    }

    bRet = pVPShader->Exhibit(pnExitCode);

    // Clean up the scene
    pVPShader->Release();

    return bRet;
}

//******************************************************************************
//
// Function:
//
//     ValidateDisplay
//
// Description:
//
//     Evaluate the given display information in order to determine whether or
//     not the display is capable of rendering the scene.  If not, the given 
//     display will not be included in the display list.
//
// Arguments:
//
//     CDirect3D8* pd3d                 - Pointer to the Direct3D object
//
//     D3DCAPS8* pd3dcaps               - Capabilities of the device
//
//     D3DDISPLAYMODE*                  - Display mode into which the device
//                                        will be placed
//
// Return Value:
//
//     TRUE if the scene can be rendered using the given display, FALSE if
//     it cannot.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ValidateDisplay)(CDirect3D8* pd3d, D3DCAPS8* pd3dcaps, D3DDISPLAYMODE* pd3ddm) {

    if (pd3dcaps->VertexShaderVersion < 0x100) {
        return FALSE;
    }

    if (pd3dcaps->PixelShaderVersion < 0x100) {
        return FALSE;
    }

    return TRUE;
}

//******************************************************************************
// CVPShader
//******************************************************************************

//******************************************************************************
//
// Method:
//
//     CVPShader
//
// Description:
//
//     Initialize the test.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
CVPShader::CVPShader() {

    m_pd3drSphere = NULL;
    m_pd3drSPosX = NULL;
    m_pd3drSPosY = NULL;
    m_pd3drSPosZ = NULL;
    m_pd3drSNorX = NULL;
    m_pd3drSNorY = NULL;
    m_pd3drSNorZ = NULL;
    m_pd3drSTxcU = NULL;
    m_pd3drSTxcV = NULL;
    m_pd3diSphere = NULL;
    m_prSphere = NULL;
    m_pwSphere = NULL;
    m_dwPShader1 = INVALID_SHADER_HANDLE;
    m_dwVShader1 = INVALID_SHADER_HANDLE;
}

//******************************************************************************
//
// Method:
//
//     ~CVPShader
//
// Description:
//
//     Clean up the test.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
CVPShader::~CVPShader() {

    ReleaseSphere(&m_prSphere, &m_pwSphere);
}

//******************************************************************************
//
// Method:
//
//     Create
//
// Description:
//
//     Prepare the test for rendering.
//
// Arguments:
//
//     CDisplay* pDisplay               - Pointer to a Display object.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CVPShader::Create(CDisplay* pDisplay) {

    if (!CreateSphere(&m_prSphere, &m_dwSphereVertices, &m_pwSphere,
        &m_dwSphereIndices, 10.0f, 32, 32))
    {
        return FALSE;
    }

    return CScene::Create(pDisplay);
}

//******************************************************************************
//
// Method:
//
//     Exhibit
//
// Description:
//
//     Execute the test.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     The exit value contained in the wParam parameter of the WM_QUIT message.
//
//******************************************************************************
int CVPShader::Exhibit(int *pnExitCode) {

    return CScene::Exhibit(pnExitCode);
}

//******************************************************************************
//
// Method:
//
//     Setup
//
// Description:
//
//     Obtain the device interface pointer from the display, save the current
//     state of the device, and initialize the background vertices to the
//     dimensions of the render target.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the scene was successfully prepared for initialization, FALSE if
//     it was not.
//
//******************************************************************************
BOOL CVPShader::Setup() {

    return CScene::Setup();
}

//******************************************************************************
//
// Method:
//
//     Initialize
//
// Description:
//
//     Initialize the device and all device objects to be used in the test (or
//     at least all device resource objects to be created in the video, 
//     non-local video, or default memory pools).
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the test was successfully initialized for rendering, FALSE if
//     it was not.
//
//******************************************************************************
BOOL CVPShader::Initialize() {

    D3DXVECTOR4     vPower, vDBase, vDOffset, vSBase;
    D3DXVECTOR3     vLightDir;
    D3DCOLORVALUE   dcvAmbient;
    HRESULT         hr;
    DWORD           dwSDecl1[] = {
                        D3DVSD_STREAM(1),
                        D3DVSD_REG(WINX_D3DVSDE_POSITION, D3DVSDT_FLOAT3),
                        D3DVSD_REG(WINX_D3DVSDE_NORMAL, D3DVSDT_FLOAT3),
                        D3DVSD_REG(WINX_D3DVSDE_TEXCOORD0, D3DVSDT_FLOAT2),
                        D3DVSD_END()
                    };
    DWORD           dwSDecl2[] = {
                        D3DVSD_STREAM(0),
                        D3DVSD_REG(1,  D3DVSDT_FLOAT1),
                        D3DVSD_STREAM(1),
                        D3DVSD_REG(3,  D3DVSDT_FLOAT1),
                        D3DVSD_STREAM(2),
                        D3DVSD_REG(5,  D3DVSDT_FLOAT1),
                        D3DVSD_STREAM(3),
                        D3DVSD_REG(7,  D3DVSDT_FLOAT1),
                        D3DVSD_STREAM(4),
                        D3DVSD_REG(9,  D3DVSDT_FLOAT1),
                        D3DVSD_STREAM(5),
                        D3DVSD_REG(11, D3DVSDT_FLOAT1),
                        D3DVSD_STREAM(6),
                        D3DVSD_REG(13, D3DVSDT_FLOAT1),
                        D3DVSD_STREAM(7),
                        D3DVSD_REG(15, D3DVSDT_FLOAT1),
                    };

    if (!CScene::Initialize()) {
        return FALSE;
    }

    // Create a directional light
    memset(&m_light, 0, sizeof(D3DLIGHT8));
    m_light.Type = D3DLIGHT_DIRECTIONAL;
    m_light.Diffuse.r = 1.0f;
    m_light.Diffuse.g = 1.0f;
    m_light.Diffuse.b = 1.0f;
    m_light.Diffuse.a = 1.0f;
    m_light.Specular.r = 1.0f;
    m_light.Specular.g = 1.0f;
    m_light.Specular.b = 1.0f;
    m_light.Specular.a = 1.0f;
    m_light.Ambient.r = 1.0f;
    m_light.Ambient.g = 1.0f;
    m_light.Ambient.b = 1.0f;
    m_light.Ambient.a = 1.0f;
    m_light.Direction = D3DXVECTOR3(1.0f, -1.0f, 1.0f);

    hr = m_pDevice->SetLight(0, &m_light);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetLight"))) {
        return FALSE;
    }

//    hr = m_pDevice->GetMaterial(&m_material);
//    if (ResultFailed(hr, TEXT("IDirect3DDevice8::GetMaterial"))) {
//        return FALSE;
//    }

    SetMaterial(&m_material, RGBA_MAKE(255, 255, 255, 230), RGBA_MAKE(0, 0, 0, 230), RGBA_MAKE(255, 255, 255, 255), 0, 40.0f);
//    m_pDevice->SetMaterial(&m_material);

    // Create the textures
    m_pd3dtSphere = (CTexture8*)CreateTexture(m_pDevice, TEXT("edge.bmp"), D3DFMT_A4R4G4B4, TTYPE_TEXTURE, NULL, 0.9f);
    if (!m_pd3dtSphere) {
        return FALSE;
    }

    m_pd3dtBack = (CTexture8*)CreateTexture(m_pDevice, TEXT("brick.bmp"));
    if (!m_pd3dtBack) {
        return FALSE;
    }

    // Create the vertex buffers
    m_pd3drSphere = CreateVertexBuffer(m_pDevice, (LPVOID)m_prSphere, m_dwSphereVertices * sizeof(VERTEX), 0);
    if (!m_pd3drSphere) {
        return FALSE;
    }
    m_pd3drSPosX = CreateComponentVB(m_pDevice, (LPVOID)&m_prSphere[0].vPosition.x, m_dwSphereVertices, sizeof(float), sizeof(VERTEX));
    if (!m_pd3drSPosX) {
        return FALSE;
    }
    m_pd3drSPosY = CreateComponentVB(m_pDevice, (LPVOID)&m_prSphere[0].vPosition.y, m_dwSphereVertices, sizeof(float), sizeof(VERTEX));
    if (!m_pd3drSPosY) {
        return FALSE;
    }
    m_pd3drSPosZ = CreateComponentVB(m_pDevice, (LPVOID)&m_prSphere[0].vPosition.z, m_dwSphereVertices, sizeof(float), sizeof(VERTEX));
    if (!m_pd3drSPosZ) {
        return FALSE;
    }
    m_pd3drSNorX = CreateComponentVB(m_pDevice, (LPVOID)&m_prSphere[0].vNormal.x, m_dwSphereVertices, sizeof(float), sizeof(VERTEX));
    if (!m_pd3drSNorX) {
        return FALSE;
    }
    m_pd3drSNorY = CreateComponentVB(m_pDevice, (LPVOID)&m_prSphere[0].vNormal.y, m_dwSphereVertices, sizeof(float), sizeof(VERTEX));
    if (!m_pd3drSNorY) {
        return FALSE;
    }
    m_pd3drSNorZ = CreateComponentVB(m_pDevice, (LPVOID)&m_prSphere[0].vNormal.z, m_dwSphereVertices, sizeof(float), sizeof(VERTEX));
    if (!m_pd3drSNorZ) {
        return FALSE;
    }
    m_pd3drSTxcU = CreateComponentVB(m_pDevice, (LPVOID)&m_prSphere[0].u0, m_dwSphereVertices, sizeof(float), sizeof(VERTEX));
    if (!m_pd3drSTxcU) {
        return FALSE;
    }
    m_pd3drSTxcV = CreateComponentVB(m_pDevice, (LPVOID)&m_prSphere[0].v0, m_dwSphereVertices, sizeof(float), sizeof(VERTEX));
    if (!m_pd3drSTxcV) {
        return FALSE;
    }

    // Create the index buffer
    m_pd3diSphere = CreateIndexBuffer(m_pDevice, m_pwSphere, m_dwSphereIndices * sizeof(WORD));
    if (!m_pd3diSphere) {
        return FALSE;
    }

    // Create the vertex shaders
    m_dwVShader1 = CreateVertexShader(m_pDevice, dwSDecl1, TEXT("vshader1.vsh"));
    if (m_dwVShader1 == INVALID_SHADER_HANDLE) {
        return FALSE;
    }

    // Set the vertex shader constant registers
    D3DXVec3Normalize(&vLightDir, (D3DXVECTOR3*)&m_light.Direction);
    m_pDevice->SetVertexShaderConstant(4, &vLightDir, 1);

    vPower = D3DXVECTOR4(40.0f, 0.0f, 1.0f, 0.0f);
    m_pDevice->SetVertexShaderConstant(6, &vPower, 1);

    vDBase = D3DXVECTOR4(m_light.Diffuse.r * m_material.Diffuse.r, m_light.Diffuse.g * m_material.Diffuse.g, m_light.Diffuse.b * m_material.Diffuse.b, m_material.Diffuse.a);
    m_pDevice->SetVertexShaderConstant(7, &vDBase, 1);

    // Set the room ambient color
    dcvAmbient.r = 0.125f;
    dcvAmbient.g = 0.125f;
    dcvAmbient.b = 0.125f;
    dcvAmbient.a = 1.0f;
    vDOffset = D3DXVECTOR4((dcvAmbient.r + m_light.Ambient.r) * m_material.Ambient.r + m_material.Emissive.r,
                           (dcvAmbient.g + m_light.Ambient.g) * m_material.Ambient.g + m_material.Emissive.g,
                           (dcvAmbient.b + m_light.Ambient.b) * m_material.Ambient.b + m_material.Emissive.b,
                           0.0f);
    m_pDevice->SetVertexShaderConstant(8, &vDOffset, 1);

    vSBase = D3DXVECTOR4(m_light.Specular.r * m_material.Specular.r, m_light.Specular.g * m_material.Specular.g, m_light.Specular.b * m_material.Specular.b, m_material.Specular.a);
    m_pDevice->SetVertexShaderConstant(9, &vSBase, 1);

    // Create the pixel shader
    m_dwPShader1 = CreatePixelShader(m_pDevice, TEXT("pshader1.psh"));
    if (m_dwPShader1 == INVALID_SHADER_HANDLE) {
        return FALSE;
    }

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     Efface
//
// Description:
//
//     Release all device resource objects (or at least those objects created
//     in video memory, non-local video memory, or the default memory pools)
//     and restore the device to its initial state.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CVPShader::Efface() {

    m_pDevice->SetVertexShader(D3DFVF_XYZ);
    m_pDevice->SetPixelShader(NULL);
    if (m_dwPShader1 != INVALID_SHADER_HANDLE) {
        ReleasePixelShader(m_pDevice, m_dwPShader1);
    }
    if (m_dwVShader1 != INVALID_SHADER_HANDLE) {
        ReleaseVertexShader(m_pDevice, m_dwVShader1);
    }
    CScene::Efface();
}

//******************************************************************************
//
// Method:
//
//     Update
//
// Description:
//
//     Update the state of the scene to coincide with the given time.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CVPShader::Update() {

    CScene::Update();
}

//******************************************************************************
//
// Method:
//
//     Render
//
// Description:
//
//     Render the test scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CVPShader::Render() {

    D3DXMATRIX  mTransform, mView, mProj;
    HRESULT     hr;

    hr = m_pDevice->TestCooperativeLevel();
    if (FAILED(hr)) {
        if (hr == D3DERR_DEVICELOST) {
            return TRUE;
        }
        if (hr == D3DERR_DEVICENOTRESET) {
            if (!Reset()) {
                return FALSE;
            }
        }
    }

    // Clear the rendering target
    if (m_pDisplay->IsDepthBuffered()) {
        m_pDevice->Clear(0, NULL, D3DCLEAR_ZBUFFER, RGB_MAKE(0, 0, 0), 1.0f, 0);
    }

    // Begin the scene
    m_pDevice->BeginScene();

    m_pDevice->SetTexture(0, m_pd3dtBack);
    m_pDevice->SetVertexShader(FVF_TLVERTEX);
    m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 2, m_prBackground, sizeof(TLVERTEX));

    // Position the view using the default camera
//    m_pDisplay->SetView();

    m_pDevice->SetTexture(0, m_pd3dtSphere);

    CAMERA cam;
    m_pDisplay->GetCamera(&cam);
    SetView((LPD3DXMATRIX)&mView, &cam.vPosition, &cam.vInterest, 
            &D3DXVECTOR3((float)sin(cam.fRoll), (float)cos(cam.fRoll), 
            0.0f));
    SetPerspectiveProjection(&mProj, cam.fNearPlane, cam.fFarPlane, 
            cam.fFieldOfView, (float)m_pDisplay->GetHeight() / (float)m_pDisplay->GetWidth());

    D3DXMatrixMultiply(&mTransform, &mView, &mProj);
    D3DXMatrixTranspose(&mTransform, &mTransform);

    m_pDevice->SetVertexShaderConstant(0, &mTransform, 4);
    m_pDevice->SetVertexShaderConstant(5, &cam.vPosition, 1);

    m_pDevice->SetVertexShader(m_dwVShader1);
    m_pDevice->SetPixelShader(m_dwPShader1);

    m_pDevice->SetStreamSource(1, m_pd3drSphere, sizeof(VERTEX));

    m_pDevice->SetIndices(m_pd3diSphere, 0);

    m_pDevice->SetRenderState(D3DRS_SPECULARENABLE, TRUE);

    m_pDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, TRUE);

    m_pDevice->DrawIndexedPrimitive(D3DPT_TRIANGLELIST, 0, m_dwSphereVertices, 0, m_dwSphereIndices / 3);
//    m_pDevice->DrawIndexedPrimitiveUP(D3DPT_TRIANGLELIST, 0, m_dwSphereVertices, m_dwSphereIndices / 3, m_pwSphere, D3DFMT_INDEX16, m_prSphere, sizeof(VERTEX));

    m_pDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, FALSE);

    m_pDevice->SetPixelShader(NULL);

    // Display the adapter mode
    ShowDisplayMode();

    // Display the frame rate
    ShowFrameRate();

    // Display the console
    m_pDisplay->ShowConsole();

    // Fade out the scene on exit
    if (m_pfnFade) {
        (this->*m_pfnFade)();
    }

    // End the scene
    m_pDevice->EndScene();

    // Update the screen
    m_pDevice->Present(NULL, NULL, NULL, NULL);

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     ProcessInput
//
// Description:
//
//     Process user input for the scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CVPShader::ProcessInput() {

    CScene::ProcessInput();
}

//******************************************************************************
//
// Method:
//
//     InitView
//
// Description:
//
//     Initialize the camera view in the scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CVPShader::InitView() {

    return CScene::InitView();
}

//******************************************************************************
// Scene window procedure (pseudo-subclassed off the main window procedure)
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     WndProc
//
// Description:
//
//     Scene window procedure to process messages received by the main 
//     application window.
//
// Arguments:
//
//     LRESULT* plr             - Result of the message processing
//
//     HWND hWnd                - Application window
//
//     UINT uMsg                - Message to process
//
//     WPARAM wParam            - First message parameter
//
//     LPARAM lParam            - Second message parameter
//
// Return Value:
//
//     TRUE if the message was handled, FALSE otherwise.
//
//******************************************************************************
BOOL CVPShader::WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    *plr = 0;

#ifndef UNDER_XBOX

    switch (uMsg) {

        case WM_KEYDOWN:

            switch (wParam) {

                case VK_F12: // Toggle pause state
                    m_bPaused = !m_bPaused;
                    return TRUE;
            }

            break;
    }

#endif // !UNDER_XBOX

    return CScene::WndProc(plr, hWnd, uMsg, wParam, lParam);
}

//******************************************************************************
CVertexBuffer8* CreateComponentVB(CDevice8* pDevice, LPVOID pvComponent, 
                                  UINT uNumComponents, UINT uCompSize, 
                                  UINT uCompStride)
{
    CVertexBuffer8* pd3dr;
    LPBYTE          pData;
    UINT            i;
    HRESULT         hr;

    pd3dr = CreateVertexBuffer(pDevice, NULL, uNumComponents * uCompSize, 0);
    if (pd3dr) {

        hr = pd3dr->Lock(0, uNumComponents * uCompSize, &pData, 0);
        if (FAILED(hr)) {
            ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Lock"));
            pd3dr->Release();
            return NULL;
        }

        for (i = 0; i < uNumComponents; i++) {
            memcpy(pData + i * uCompSize, (LPBYTE)pvComponent + i * uCompStride, uCompSize);
        }

        hr = pd3dr->Unlock();
        if (FAILED(hr)) {
            ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Unlock"));
            pd3dr->Release();
            return NULL;
        }
    }

    return pd3dr;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\vpshadr1\sources.inc ===
!include ..\..\..\sources.inc

TARGETNAME=l_vpshd1
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SYNCHRONIZE_BLOCK=1

SOURCES=\
    vpshader.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\vpshadr1\dll\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=vpshadr1
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

OBJLIBFILES=\
    $(OBJLIBFILES) \
    $(TEST_LIB_PATH)\l_vpshd1.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\vpshadr1\vpshader.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    vpshader.h

Author:

    Matt Bronder

Description:

    Basic vertex and pixel shader test.

*******************************************************************************/

#ifndef __VPSHADR_H__
#define __VPSHADR_H__

//******************************************************************************
class CVPShader : public CScene {

protected:

    CTexture8*                      m_pd3dtSphere;
    CTexture8*                      m_pd3dtBack;
    CVertexBuffer8*                 m_pd3drSphere;
    CVertexBuffer8*                 m_pd3drSPosX;
    CVertexBuffer8*                 m_pd3drSPosY;
    CVertexBuffer8*                 m_pd3drSPosZ;
    CVertexBuffer8*                 m_pd3drSNorX;
    CVertexBuffer8*                 m_pd3drSNorY;
    CVertexBuffer8*                 m_pd3drSNorZ;
    CVertexBuffer8*                 m_pd3drSTxcU;
    CVertexBuffer8*                 m_pd3drSTxcV;
    CIndexBuffer8*                  m_pd3diSphere;
    PVERTEX                         m_prSphere;
    DWORD                           m_dwSphereVertices;
    LPWORD                          m_pwSphere;
    DWORD                           m_dwSphereIndices;
    D3DLIGHT8                       m_light;
    D3DMATERIAL8                    m_material;
    DWORD                           m_dwVShader1;
    DWORD                           m_dwPShader1;

public:

                                    CVPShader();
                                    ~CVPShader();

    virtual BOOL                    Create(CDisplay* pDisplay);
    virtual int                     Exhibit(int *pnExitCode);

protected:

    virtual BOOL                    Setup();
    virtual BOOL                    Initialize();
    virtual void                    Efface();
    virtual void                    Update();
    virtual BOOL                    Render();

    virtual void                    ProcessInput();
    virtual BOOL                    InitView();

    virtual BOOL                    WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, 
                                            WPARAM wParam, LPARAM lParam);
};

#endif //__VPSHADR_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\vpshadr1\exe\include.cpp ===
#pragma comment(linker, "/include:_vpshadr1_edge")
#pragma comment(linker, "/include:_vpshadr1_brick")
#pragma comment(linker, "/include:_vpshadr1_vshader1")
#pragma comment(linker, "/include:_vpshadr1_pshader1")
#include "exe\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\vpshadr1\exe\sources.inc ===
TARGETNAME=vpshadr1
TARGETTYPE=PROGRAM
TARGETPATH=obj

!include ..\..\..\..\sources.inc

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\m_vpshd1.lib \
    $(TEST_LIB_PATH)\l_vpshd1.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\vpshadr1\media\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=m_vpshd1
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

USER_C_FLAGS=$(USER_C_FLAGS) /Zm180

SOURCES=\
    edge.bmp.cpp \
    brick.bmp.cpp \
    vshader1.vsh.cpp \
    pshader1.psh.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\vpshadr1\media\pshader1.psh.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    pshader1.psh.cpp

Description

    Data file for the resource pshader1.psh.

*******************************************************************************/

#include "d3dlocus.h"

static BYTE g_pshader1[] = {

   0x3B, 0x0D, 0x0A, 0x3B, 0x20, 0x43, 0x6F, 0x6C, 0x6F, 0x72, 0x20, 0x69, 0x6E, 0x70, 0x75, 0x74, 
   0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x73, 0x3A, 0x0D, 0x0A, 0x3B, 0x0D, 0x0A, 
   0x3B, 0x20, 0x76, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x44, 0x69, 0x66, 0x66, 0x75, 0x73, 0x65, 0x20, 0x63, 0x6F, 0x6C, 0x6F, 0x72, 0x0D, 0x0A, 0x3B, 
   0x20, 0x76, 0x31, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x53, 
   0x70, 0x65, 0x63, 0x75, 0x6C, 0x61, 0x72, 0x20, 0x63, 0x6F, 0x6C, 0x6F, 0x72, 0x0D, 0x0A, 0x3B, 
   0x0D, 0x0A, 0x0D, 0x0A, 0x70, 0x73, 0x2E, 0x31, 0x2E, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3B, 0x20, 0x50, 0x69, 0x78, 0x65, 0x6C, 0x20, 
   0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x20, 0x31, 
   0x2E, 0x30, 0x0D, 0x0A, 0x74, 0x65, 0x78, 0x20, 0x74, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3B, 0x20, 0x53, 0x61, 0x6D, 0x70, 0x6C, 0x65, 
   0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x20, 0x73, 0x65, 0x74, 
   0x20, 0x69, 0x6E, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x20, 0x30, 0x0D, 0x0A, 0x6D, 0x75, 0x6C, 
   0x20, 0x72, 0x31, 0x2C, 0x20, 0x74, 0x30, 0x2C, 0x20, 0x76, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x3B, 0x20, 0x4D, 0x6F, 0x64, 0x75, 0x6C, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 
   0x70, 0x69, 0x78, 0x65, 0x6C, 0x27, 0x73, 0x20, 0x64, 0x69, 0x66, 0x66, 0x75, 0x73, 0x65, 0x20, 
   0x63, 0x6F, 0x6C, 0x6F, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 
   0x65, 0x78, 0x65, 0x6C, 0x20, 0x63, 0x6F, 0x6C, 0x6F, 0x72, 0x0D, 0x0A, 0x61, 0x64, 0x64, 0x20, 
   0x72, 0x30, 0x2E, 0x78, 0x79, 0x7A, 0x2C, 0x20, 0x72, 0x31, 0x2C, 0x20, 0x76, 0x31, 0x20, 0x20, 
   0x3B, 0x20, 0x41, 0x64, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x69, 0x78, 0x65, 0x6C, 0x27, 
   0x73, 0x20, 0x73, 0x70, 0x65, 0x63, 0x75, 0x6C, 0x61, 0x72, 0x20, 0x63, 0x6F, 0x6C, 0x6F, 0x72, 
   0x0D, 0x0A, 0x6D, 0x6F, 0x76, 0x20, 0x72, 0x30, 0x2E, 0x61, 0x2C, 0x20, 0x72, 0x31, 0x2E, 0x61, 
   0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3B, 0x20, 0x55, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 
   0x6D, 0x6F, 0x64, 0x75, 0x6C, 0x61, 0x74, 0x65, 0x64, 0x20, 0x64, 0x69, 0x66, 0x66, 0x75, 0x73, 
   0x65, 0x2F, 0x74, 0x65, 0x78, 0x65, 0x6C, 0x20, 0x61, 0x6C, 0x70, 0x68, 0x61, 0x20, 0x66, 0x6F, 
   0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x69, 0x78, 0x65, 0x6C, 
};

static RESOURCEDATA g_rd_pshader1(TEXT(MODULE_STRING), TEXT("pshader1.psh"), g_pshader1, sizeof(g_pshader1));

extern "C" LPVOID PREPEND_MODULE(_pshader1) = (LPVOID)&g_rd_pshader1;
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\vpshadr1\media\vshader1.vsh.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    vshader1.vsh.cpp

Description

    Data file for the resource vshader1.vsh.

*******************************************************************************/

#include "d3dlocus.h"

static BYTE g_vshader1[] = {

   0x3B, 0x0D, 0x0A, 0x3B, 0x20, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x20, 0x69, 0x6E, 0x70, 0x75, 
   0x74, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x73, 0x3A, 0x0D, 0x0A, 0x3B, 0x0D, 
   0x0A, 0x3B, 0x20, 0x76, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x20, 0x70, 0x6F, 0x73, 0x69, 0x74, 0x69, 0x6F, 0x6E, 
   0x0D, 0x0A, 0x3B, 0x20, 0x76, 0x33, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x20, 0x6E, 0x6F, 0x72, 0x6D, 0x61, 0x6C, 0x0D, 
   0x0A, 0x3B, 0x20, 0x76, 0x37, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x20, 
   0x63, 0x6F, 0x6F, 0x72, 0x64, 0x69, 0x6E, 0x61, 0x74, 0x65, 0x73, 0x0D, 0x0A, 0x3B, 0x0D, 0x0A, 
   0x3B, 0x20, 0x43, 0x6F, 0x6E, 0x73, 0x74, 0x61, 0x6E, 0x74, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 
   0x74, 0x65, 0x72, 0x73, 0x3A, 0x0D, 0x0A, 0x3B, 0x0D, 0x0A, 0x3B, 0x20, 0x63, 0x30, 0x20, 0x2D, 
   0x20, 0x63, 0x33, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x54, 0x72, 0x61, 0x6E, 0x73, 0x70, 
   0x6F, 0x73, 0x65, 0x64, 0x20, 0x63, 0x6F, 0x6E, 0x63, 0x61, 0x74, 0x65, 0x6E, 0x61, 0x74, 0x69, 
   0x6F, 0x6E, 0x20, 0x6F, 0x66, 0x20, 0x77, 0x6F, 0x72, 0x6C, 0x64, 0x2C, 0x20, 0x76, 0x69, 0x65, 
   0x77, 0x2C, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x70, 0x72, 0x6F, 0x6A, 0x65, 0x63, 0x74, 0x69, 0x6F, 
   0x6E, 0x20, 0x6D, 0x61, 0x74, 0x72, 0x69, 0x63, 0x65, 0x73, 0x0D, 0x0A, 0x3B, 0x0D, 0x0A, 0x3B, 
   0x20, 0x63, 0x34, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x4E, 
   0x6F, 0x72, 0x6D, 0x61, 0x6C, 0x69, 0x7A, 0x65, 0x64, 0x20, 0x6C, 0x69, 0x67, 0x68, 0x74, 0x20, 
   0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x0D, 0x0A, 0x3B, 0x20, 0x63, 0x35, 0x20, 
   0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x56, 0x69, 0x65, 0x77, 0x20, 
   0x70, 0x6F, 0x73, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x0D, 0x0A, 0x3B, 0x20, 0x63, 0x36, 0x2E, 0x78, 
   0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x4D, 0x61, 0x74, 0x65, 0x72, 0x69, 
   0x61, 0x6C, 0x20, 0x70, 0x6F, 0x77, 0x65, 0x72, 0x0D, 0x0A, 0x3B, 0x20, 0x63, 0x36, 0x2E, 0x79, 
   0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x2E, 0x30, 0x66, 0x0D, 0x0A, 
   0x3B, 0x20, 0x63, 0x36, 0x2E, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x31, 0x2E, 0x30, 0x66, 0x0D, 0x0A, 0x3B, 0x20, 0x63, 0x37, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x44, 0x69, 0x66, 0x66, 0x75, 0x73, 0x65, 0x20, 0x62, 0x61, 
   0x73, 0x65, 0x20, 0x63, 0x6F, 0x6C, 0x6F, 0x72, 0x20, 0x28, 0x64, 0x69, 0x66, 0x66, 0x75, 0x73, 
   0x65, 0x20, 0x6C, 0x69, 0x67, 0x68, 0x74, 0x20, 0x63, 0x6F, 0x6C, 0x6F, 0x72, 0x20, 0x6D, 0x6F, 
   0x64, 0x75, 0x6C, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x64, 0x69, 0x66, 
   0x66, 0x75, 0x73, 0x65, 0x20, 0x6D, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6C, 0x20, 0x63, 0x6F, 
   0x6C, 0x6F, 0x72, 0x29, 0x0D, 0x0A, 0x3B, 0x20, 0x63, 0x38, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x44, 0x69, 0x66, 0x66, 0x75, 0x73, 0x65, 0x20, 0x6F, 0x66, 
   0x66, 0x73, 0x65, 0x74, 0x20, 0x63, 0x6F, 0x6C, 0x6F, 0x72, 0x20, 0x28, 0x61, 0x6D, 0x62, 0x69, 
   0x65, 0x6E, 0x74, 0x20, 0x72, 0x6F, 0x6F, 0x6D, 0x20, 0x63, 0x6F, 0x6C, 0x6F, 0x72, 0x20, 0x6D, 
   0x6F, 0x64, 0x75, 0x6C, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x6D, 
   0x62, 0x69, 0x65, 0x6E, 0x74, 0x20, 0x6D, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6C, 0x20, 0x63, 
   0x6F, 0x6C, 0x6F, 0x72, 0x20, 0x2B, 0x0D, 0x0A, 0x3B, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x61, 0x6D, 
   0x62, 0x69, 0x65, 0x6E, 0x74, 0x20, 0x6C, 0x69, 0x67, 0x68, 0x74, 0x20, 0x63, 0x6F, 0x6C, 0x6F, 
   0x72, 0x20, 0x6D, 0x6F, 0x64, 0x75, 0x6C, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 
   0x20, 0x61, 0x6D, 0x62, 0x69, 0x65, 0x6E, 0x74, 0x20, 0x6D, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 
   0x6C, 0x20, 0x63, 0x6F, 0x6C, 0x6F, 0x72, 0x20, 0x2B, 0x0D, 0x0A, 0x3B, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x65, 0x6D, 0x69, 0x73, 0x73, 0x69, 0x76, 0x65, 0x20, 0x6D, 0x61, 0x74, 0x65, 0x72, 0x69, 
   0x61, 0x6C, 0x20, 0x63, 0x6F, 0x6C, 0x6F, 0x72, 0x29, 0x0D, 0x0A, 0x3B, 0x20, 0x63, 0x39, 0x20, 
   0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x53, 0x70, 0x65, 0x63, 0x75, 
   0x6C, 0x61, 0x72, 0x20, 0x62, 0x61, 0x73, 0x65, 0x20, 0x63, 0x6F, 0x6C, 0x6F, 0x72, 0x20, 0x28, 
   0x73, 0x70, 0x65, 0x63, 0x75, 0x6C, 0x61, 0x72, 0x20, 0x6C, 0x69, 0x67, 0x68, 0x74, 0x20, 0x63, 
   0x6F, 0x6C, 0x6F, 0x72, 0x20, 0x6D, 0x6F, 0x64, 0x75, 0x6C, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 
   0x69, 0x74, 0x68, 0x20, 0x73, 0x70, 0x65, 0x63, 0x75, 0x6C, 0x61, 0x72, 0x20, 0x6D, 0x61, 0x74, 
   0x65, 0x72, 0x69, 0x61, 0x6C, 0x20, 0x63, 0x6F, 0x6C, 0x6F, 0x72, 0x29, 0x0D, 0x0A, 0x3B, 0x0D, 
   0x0A, 0x0D, 0x0A, 0x76, 0x73, 0x2E, 0x31, 0x2E, 0x30, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 
   0x09, 0x3B, 0x20, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x20, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 
   0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x20, 0x31, 0x2E, 0x30, 0x0D, 0x0A, 0x0D, 0x0A, 
   0x3B, 0x20, 0x54, 0x72, 0x61, 0x6E, 0x73, 0x66, 0x6F, 0x72, 0x6D, 0x20, 0x74, 0x68, 0x65, 0x20, 
   0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x0D, 0x0A, 0x0D, 0x0A, 0x64, 0x70, 0x34, 0x20, 0x6F, 0x50, 
   0x6F, 0x73, 0x2E, 0x78, 0x2C, 0x20, 0x76, 0x30, 0x2C, 0x20, 0x63, 0x30, 0x0D, 0x0A, 0x64, 0x70, 
   0x34, 0x20, 0x6F, 0x50, 0x6F, 0x73, 0x2E, 0x79, 0x2C, 0x20, 0x76, 0x30, 0x2C, 0x20, 0x63, 0x31, 
   0x0D, 0x0A, 0x64, 0x70, 0x34, 0x20, 0x6F, 0x50, 0x6F, 0x73, 0x2E, 0x7A, 0x2C, 0x20, 0x76, 0x30, 
   0x2C, 0x20, 0x63, 0x32, 0x0D, 0x0A, 0x64, 0x70, 0x34, 0x20, 0x6F, 0x50, 0x6F, 0x73, 0x2E, 0x77, 
   0x2C, 0x20, 0x76, 0x30, 0x2C, 0x20, 0x63, 0x33, 0x0D, 0x0A, 0x0D, 0x0A, 0x3B, 0x20, 0x4C, 0x69, 
   0x67, 0x68, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x20, 0x77, 
   0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x61, 
   0x6C, 0x20, 0x6C, 0x69, 0x67, 0x68, 0x74, 0x0D, 0x0A, 0x0D, 0x0A, 0x64, 0x70, 0x33, 0x20, 0x72, 
   0x32, 0x2E, 0x78, 0x2C, 0x20, 0x76, 0x33, 0x2C, 0x20, 0x2D, 0x63, 0x34, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3B, 
   0x20, 0x44, 0x69, 0x66, 0x66, 0x75, 0x73, 0x65, 0x20, 0x69, 0x6E, 0x74, 0x65, 0x6E, 0x73, 0x69, 
   0x74, 0x79, 0x20, 0x3D, 0x20, 0x64, 0x6F, 0x74, 0x70, 0x72, 0x6F, 0x64, 0x75, 0x63, 0x74, 0x28, 
   0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x20, 0x6E, 0x6F, 0x72, 0x6D, 0x61, 0x6C, 0x2C, 0x20, 0x6C, 
   0x69, 0x67, 0x68, 0x74, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x29, 0x0D, 
   0x0A, 0x0D, 0x0A, 0x61, 0x64, 0x64, 0x20, 0x72, 0x30, 0x2C, 0x20, 0x76, 0x30, 0x2C, 0x20, 0x2D, 
   0x63, 0x35, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3B, 0x20, 0x43, 0x61, 0x6C, 0x63, 0x75, 0x6C, 0x61, 
   0x74, 0x65, 0x20, 0x61, 0x20, 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x20, 0x66, 0x72, 0x6F, 0x6D, 
   0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x79, 0x65, 0x20, 0x74, 0x6F, 0x20, 0x74, 0x68, 0x65, 0x20, 
   0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x0D, 0x0A, 0x64, 0x70, 0x33, 0x20, 0x72, 0x31, 0x2E, 0x77, 
   0x2C, 0x20, 0x72, 0x30, 0x2C, 0x20, 0x72, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3B, 0x20, 0x6E, 0x6D, 
   0x33, 0x20, 0x72, 0x30, 0x2C, 0x20, 0x72, 0x30, 0x0D, 0x0A, 0x72, 0x73, 0x71, 0x20, 0x72, 0x31, 
   0x2E, 0x77, 0x2C, 0x20, 0x72, 0x31, 0x2E, 0x77, 0x0D, 0x0A, 0x6D, 0x75, 0x6C, 0x20, 0x72, 0x31, 
   0x2E, 0x78, 0x79, 0x7A, 0x2C, 0x20, 0x72, 0x30, 0x2C, 0x20, 0x72, 0x31, 0x2E, 0x77, 0x0D, 0x0A, 
   0x61, 0x64, 0x64, 0x20, 0x72, 0x30, 0x2C, 0x20, 0x72, 0x31, 0x2C, 0x20, 0x63, 0x34, 0x20, 0x20, 
   0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x20, 0x20, 0x3B, 0x20, 0x43, 0x61, 0x6C, 0x63, 0x75, 0x6C, 0x61, 0x74, 0x65, 0x20, 
   0x74, 0x68, 0x65, 0x20, 0x68, 0x61, 0x6C, 0x66, 0x2D, 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x0D, 
   0x0A, 0x64, 0x70, 0x33, 0x20, 0x72, 0x31, 0x2E, 0x77, 0x2C, 0x20, 0x72, 0x30, 0x2C, 0x20, 0x72, 
   0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x20, 0x20, 0x20, 0x3B, 0x20, 0x6E, 0x6D, 0x33, 0x20, 0x72, 0x30, 0x2C, 0x20, 0x72, 
   0x30, 0x0D, 0x0A, 0x72, 0x73, 0x71, 0x20, 0x72, 0x31, 0x2E, 0x77, 0x2C, 0x20, 0x72, 0x31, 0x2E, 
   0x77, 0x0D, 0x0A, 0x6D, 0x75, 0x6C, 0x20, 0x72, 0x31, 0x2E, 0x78, 0x79, 0x7A, 0x2C, 0x20, 0x72, 
   0x30, 0x2C, 0x20, 0x72, 0x31, 0x2E, 0x77, 0x0D, 0x0A, 0x64, 0x70, 0x33, 0x20, 0x72, 0x32, 0x2E, 
   0x79, 0x2C, 0x20, 0x76, 0x33, 0x2C, 0x20, 0x2D, 0x72, 0x31, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3B, 0x20, 0x53, 
   0x70, 0x65, 0x63, 0x75, 0x6C, 0x61, 0x72, 0x20, 0x69, 0x6E, 0x74, 0x65, 0x6E, 0x73, 0x69, 0x74, 
   0x79, 0x20, 0x3D, 0x20, 0x64, 0x6F, 0x74, 0x70, 0x72, 0x6F, 0x64, 0x75, 0x63, 0x74, 0x28, 0x76, 
   0x65, 0x72, 0x74, 0x65, 0x78, 0x20, 0x6E, 0x6F, 0x72, 0x6D, 0x61, 0x6C, 0x2C, 0x20, 0x6C, 0x69, 
   0x67, 0x68, 0x74, 0x2F, 0x65, 0x79, 0x65, 0x20, 0x68, 0x61, 0x6C, 0x66, 0x2D, 0x76, 0x65, 0x63, 
   0x74, 0x6F, 0x72, 0x29, 0x0D, 0x0A, 0x0D, 0x0A, 0x6D, 0x6F, 0x76, 0x20, 0x72, 0x32, 0x2E, 0x77, 
   0x2C, 0x20, 0x63, 0x36, 0x2E, 0x78, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3B, 0x20, 0x4D, 0x61, 
   0x74, 0x65, 0x72, 0x69, 0x61, 0x6C, 0x20, 0x70, 0x6F, 0x77, 0x65, 0x72, 0x0D, 0x0A, 0x0D, 0x0A, 
   0x6C, 0x69, 0x74, 0x20, 0x72, 0x33, 0x2C, 0x20, 0x72, 0x32, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x20, 0x20, 0x3B, 0x20, 0x4C, 0x69, 0x67, 0x68, 0x74, 0x20, 0x63, 0x6F, 0x65, 0x66, 
   0x66, 0x69, 0x63, 0x69, 0x65, 0x6E, 0x74, 0x73, 0x0D, 0x0A, 0x0D, 0x0A, 0x3B, 0x6D, 0x61, 0x64, 
   0x20, 0x72, 0x30, 0x2E, 0x78, 0x79, 0x7A, 0x2C, 0x20, 0x72, 0x33, 0x2E, 0x79, 0x2C, 0x20, 0x63, 
   0x37, 0x2E, 0x78, 0x79, 0x7A, 0x2C, 0x20, 0x63, 0x38, 0x2E, 0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 
   0x20, 0x3B, 0x20, 0x44, 0x69, 0x66, 0x66, 0x75, 0x73, 0x65, 0x20, 0x63, 0x6F, 0x6C, 0x6F, 0x72, 
   0x20, 0x3D, 0x20, 0x64, 0x69, 0x66, 0x66, 0x75, 0x73, 0x65, 0x20, 0x69, 0x6E, 0x74, 0x65, 0x6E, 
   0x73, 0x69, 0x74, 0x79, 0x20, 0x2A, 0x20, 0x64, 0x69, 0x66, 0x66, 0x75, 0x73, 0x65, 0x20, 0x62, 
   0x61, 0x73, 0x65, 0x20, 0x63, 0x6F, 0x6C, 0x6F, 0x72, 0x20, 0x2B, 0x20, 0x64, 0x69, 0x66, 0x66, 
   0x75, 0x73, 0x65, 0x20, 0x6F, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x63, 0x6F, 0x6C, 0x6F, 0x72, 
   0x0D, 0x0A, 0x6D, 0x75, 0x6C, 0x20, 0x72, 0x30, 0x2E, 0x78, 0x79, 0x7A, 0x2C, 0x20, 0x72, 0x33, 
   0x2E, 0x79, 0x2C, 0x20, 0x63, 0x37, 0x2E, 0x78, 0x79, 0x7A, 0x0D, 0x0A, 0x61, 0x64, 0x64, 0x20, 
   0x72, 0x30, 0x2E, 0x78, 0x79, 0x7A, 0x2C, 0x20, 0x72, 0x30, 0x2E, 0x78, 0x79, 0x7A, 0x2C, 0x20, 
   0x63, 0x38, 0x2E, 0x78, 0x79, 0x7A, 0x0D, 0x0A, 0x0D, 0x0A, 0x6D, 0x6F, 0x76, 0x20, 0x72, 0x30, 
   0x2E, 0x77, 0x2C, 0x20, 0x63, 0x37, 0x2E, 0x77, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3B, 0x20, 
   0x44, 0x69, 0x66, 0x66, 0x75, 0x73, 0x65, 0x20, 0x61, 0x6C, 0x70, 0x68, 0x61, 0x20, 0x3D, 0x20, 
   0x64, 0x69, 0x66, 0x66, 0x75, 0x73, 0x65, 0x20, 0x62, 0x61, 0x73, 0x65, 0x20, 0x61, 0x6C, 0x70, 
   0x68, 0x61, 0x0D, 0x0A, 0x6D, 0x69, 0x6E, 0x20, 0x6F, 0x44, 0x30, 0x2C, 0x20, 0x72, 0x30, 0x2C, 
   0x20, 0x72, 0x33, 0x2E, 0x77, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3B, 0x20, 0x43, 0x6C, 0x61, 0x6D, 0x70, 0x20, 
   0x64, 0x69, 0x66, 0x66, 0x75, 0x73, 0x65, 0x20, 0x63, 0x6F, 0x6C, 0x6F, 0x72, 0x73, 0x20, 0x74, 
   0x6F, 0x20, 0x31, 0x2E, 0x30, 0x66, 0x0D, 0x0A, 0x0D, 0x0A, 0x6D, 0x75, 0x6C, 0x20, 0x72, 0x30, 
   0x2E, 0x78, 0x79, 0x7A, 0x2C, 0x20, 0x72, 0x33, 0x2E, 0x7A, 0x2C, 0x20, 0x63, 0x39, 0x2E, 0x78, 
   0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3B, 0x20, 
   0x53, 0x70, 0x65, 0x63, 0x75, 0x6C, 0x61, 0x72, 0x20, 0x63, 0x6F, 0x6C, 0x6F, 0x72, 0x20, 0x3D, 
   0x20, 0x73, 0x70, 0x65, 0x63, 0x75, 0x6C, 0x61, 0x72, 0x20, 0x69, 0x6E, 0x74, 0x65, 0x6E, 0x73, 
   0x69, 0x74, 0x79, 0x20, 0x2A, 0x20, 0x73, 0x70, 0x65, 0x63, 0x75, 0x6C, 0x61, 0x72, 0x20, 0x62, 
   0x61, 0x73, 0x65, 0x20, 0x63, 0x6F, 0x6C, 0x6F, 0x72, 0x0D, 0x0A, 0x6D, 0x6F, 0x76, 0x20, 0x72, 
   0x30, 0x2E, 0x77, 0x2C, 0x20, 0x63, 0x39, 0x2E, 0x77, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3B, 
   0x20, 0x53, 0x70, 0x65, 0x63, 0x75, 0x6C, 0x61, 0x72, 0x20, 0x61, 0x6C, 0x70, 0x68, 0x61, 0x20, 
   0x3D, 0x20, 0x73, 0x70, 0x65, 0x63, 0x75, 0x6C, 0x61, 0x72, 0x20, 0x62, 0x61, 0x73, 0x65, 0x20, 
   0x61, 0x6C, 0x70, 0x68, 0x61, 0x0D, 0x0A, 0x6D, 0x69, 0x6E, 0x20, 0x6F, 0x44, 0x31, 0x2C, 0x20, 
   0x72, 0x30, 0x2C, 0x20, 0x72, 0x33, 0x2E, 0x77, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3B, 0x20, 0x43, 0x6C, 0x61, 
   0x6D, 0x70, 0x20, 0x73, 0x70, 0x65, 0x63, 0x75, 0x6C, 0x61, 0x72, 0x20, 0x63, 0x6F, 0x6C, 0x6F, 
   0x72, 0x73, 0x20, 0x74, 0x6F, 0x20, 0x31, 0x2E, 0x30, 0x66, 0x0D, 0x0A, 0x0D, 0x0A, 0x6D, 0x6F, 
   0x76, 0x20, 0x6F, 0x54, 0x30, 0x2C, 0x20, 0x76, 0x37, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x3B, 0x20, 0x50, 0x72, 0x6F, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x20, 0x74, 0x65, 
   0x78, 0x74, 0x75, 0x72, 0x65, 0x20, 0x63, 0x6F, 0x6F, 0x72, 0x64, 0x69, 0x6E, 0x61, 0x74, 0x65, 
   0x73, 0x0D, 0x0A, 0x0D, 0x0A, 0x3B, 0x20, 0x4C, 0x69, 0x67, 0x68, 0x74, 0x20, 0x69, 0x6E, 0x74, 
   0x65, 0x6E, 0x73, 0x69, 0x74, 0x79, 0x20, 0x66, 0x61, 0x63, 0x74, 0x6F, 0x72, 0x65, 0x64, 0x20, 
   0x69, 0x6E, 0x74, 0x6F, 0x20, 0x61, 0x6C, 0x70, 0x68, 0x61, 0x20, 0x63, 0x61, 0x6C, 0x63, 0x75, 
   0x6C, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x73, 0x0D, 0x0A, 0x0D, 0x0A, 0x3B, 0x64, 0x70, 0x33, 0x20, 
   0x72, 0x32, 0x2E, 0x78, 0x2C, 0x20, 0x76, 0x33, 0x2C, 0x20, 0x2D, 0x63, 0x34, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x20, 0x20, 0x3B, 0x20, 0x44, 0x69, 0x66, 0x66, 0x75, 0x73, 0x65, 0x20, 0x69, 0x6E, 
   0x74, 0x65, 0x6E, 0x73, 0x69, 0x74, 0x79, 0x20, 0x3D, 0x20, 0x64, 0x6F, 0x74, 0x70, 0x72, 0x6F, 
   0x64, 0x75, 0x63, 0x74, 0x28, 0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x20, 0x6E, 0x6F, 0x72, 0x6D, 
   0x61, 0x6C, 0x2C, 0x20, 0x6C, 0x69, 0x67, 0x68, 0x74, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 
   0x69, 0x6F, 0x6E, 0x29, 0x0D, 0x0A, 0x0D, 0x0A, 0x3B, 0x61, 0x64, 0x64, 0x20, 0x72, 0x30, 0x2C, 
   0x20, 0x76, 0x30, 0x2C, 0x20, 0x2D, 0x63, 0x35, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x3B, 0x20, 0x43, 0x61, 0x6C, 0x63, 0x75, 0x6C, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x76, 
   0x65, 0x63, 0x74, 0x6F, 0x72, 0x20, 0x66, 0x72, 0x6F, 0x6D, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 
   0x79, 0x65, 0x20, 0x74, 0x6F, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 
   0x0D, 0x0A, 0x3B, 0x6E, 0x6D, 0x33, 0x20, 0x72, 0x30, 0x2C, 0x20, 0x72, 0x30, 0x0D, 0x0A, 0x3B, 
   0x61, 0x64, 0x64, 0x20, 0x72, 0x31, 0x2C, 0x20, 0x72, 0x30, 0x2C, 0x20, 0x63, 0x34, 0x20, 0x20, 
   0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3B, 0x20, 0x43, 0x61, 0x6C, 0x63, 0x75, 0x6C, 
   0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x68, 0x61, 0x6C, 0x66, 0x2D, 0x76, 0x65, 0x63, 
   0x74, 0x6F, 0x72, 0x0D, 0x0A, 0x3B, 0x6E, 0x6D, 0x33, 0x20, 0x72, 0x31, 0x2C, 0x20, 0x72, 0x31, 
   0x0D, 0x0A, 0x3B, 0x64, 0x70, 0x33, 0x20, 0x72, 0x32, 0x2E, 0x79, 0x2C, 0x20, 0x76, 0x33, 0x2C, 
   0x20, 0x2D, 0x72, 0x31, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3B, 0x20, 0x53, 0x70, 0x65, 
   0x63, 0x75, 0x6C, 0x61, 0x72, 0x20, 0x69, 0x6E, 0x74, 0x65, 0x6E, 0x73, 0x69, 0x74, 0x79, 0x20, 
   0x3D, 0x20, 0x64, 0x6F, 0x74, 0x70, 0x72, 0x6F, 0x64, 0x75, 0x63, 0x74, 0x28, 0x76, 0x65, 0x72, 
   0x74, 0x65, 0x78, 0x20, 0x6E, 0x6F, 0x72, 0x6D, 0x61, 0x6C, 0x2C, 0x20, 0x6C, 0x69, 0x67, 0x68, 
   0x74, 0x2F, 0x65, 0x79, 0x65, 0x20, 0x68, 0x61, 0x6C, 0x66, 0x2D, 0x76, 0x65, 0x63, 0x74, 0x6F, 
   0x72, 0x29, 0x0D, 0x0A, 0x0D, 0x0A, 0x3B, 0x6D, 0x6F, 0x76, 0x20, 0x72, 0x32, 0x2E, 0x77, 0x2C, 
   0x20, 0x63, 0x36, 0x2E, 0x78, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3B, 
   0x20, 0x4D, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6C, 0x20, 0x70, 0x6F, 0x77, 0x65, 0x72, 0x0D, 
   0x0A, 0x0D, 0x0A, 0x3B, 0x6C, 0x69, 0x74, 0x20, 0x72, 0x33, 0x2C, 0x20, 0x72, 0x32, 0x20, 0x20, 
   0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3B, 0x20, 0x4C, 0x69, 
   0x67, 0x68, 0x74, 0x20, 0x63, 0x6F, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6E, 0x74, 0x73, 
   0x0D, 0x0A, 0x0D, 0x0A, 0x3B, 0x6D, 0x61, 0x64, 0x20, 0x72, 0x30, 0x2C, 0x20, 0x72, 0x33, 0x2E, 
   0x79, 0x2C, 0x20, 0x63, 0x37, 0x2C, 0x20, 0x63, 0x38, 0x20, 0x20, 0x20, 0x20, 0x3B, 0x20, 0x44, 
   0x69, 0x66, 0x66, 0x75, 0x73, 0x65, 0x20, 0x63, 0x6F, 0x6C, 0x6F, 0x72, 0x20, 0x3D, 0x20, 0x64, 
   0x69, 0x66, 0x66, 0x75, 0x73, 0x65, 0x20, 0x69, 0x6E, 0x74, 0x65, 0x6E, 0x73, 0x69, 0x74, 0x79, 
   0x20, 0x2A, 0x20, 0x64, 0x69, 0x66, 0x66, 0x75, 0x73, 0x65, 0x20, 0x62, 0x61, 0x73, 0x65, 0x20, 
   0x63, 0x6F, 0x6C, 0x6F, 0x72, 0x20, 0x2B, 0x20, 0x64, 0x69, 0x66, 0x66, 0x75, 0x73, 0x65, 0x20, 
   0x6F, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x63, 0x6F, 0x6C, 0x6F, 0x72, 0x0D, 0x0A, 0x3B, 0x6D, 
   0x69, 0x6E, 0x20, 0x6F, 0x44, 0x30, 0x2C, 0x20, 0x72, 0x30, 0x2C, 0x20, 0x72, 0x33, 0x2E, 0x77, 
   0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3B, 0x20, 0x43, 0x6C, 0x61, 0x6D, 0x70, 0x20, 0x64, 
   0x69, 0x66, 0x66, 0x75, 0x73, 0x65, 0x20, 0x63, 0x6F, 0x6C, 0x6F, 0x72, 0x73, 0x20, 0x74, 0x6F, 
   0x20, 0x31, 0x2E, 0x30, 0x66, 0x0D, 0x0A, 0x0D, 0x0A, 0x3B, 0x6D, 0x75, 0x6C, 0x20, 0x72, 0x30, 
   0x2C, 0x20, 0x72, 0x33, 0x2E, 0x7A, 0x2C, 0x20, 0x63, 0x39, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x3B, 0x20, 0x53, 0x70, 0x65, 0x63, 0x75, 0x6C, 0x61, 0x72, 0x20, 0x63, 0x6F, 0x6C, 
   0x6F, 0x72, 0x20, 0x3D, 0x20, 0x73, 0x70, 0x65, 0x63, 0x75, 0x6C, 0x61, 0x72, 0x20, 0x69, 0x6E, 
   0x74, 0x65, 0x6E, 0x73, 0x69, 0x74, 0x79, 0x20, 0x2A, 0x20, 0x73, 0x70, 0x65, 0x63, 0x75, 0x6C, 
   0x61, 0x72, 0x20, 0x62, 0x61, 0x73, 0x65, 0x20, 0x63, 0x6F, 0x6C, 0x6F, 0x72, 0x0D, 0x0A, 0x3B, 
   0x6D, 0x69, 0x6E, 0x20, 0x6F, 0x44, 0x31, 0x2C, 0x20, 0x72, 0x30, 0x2C, 0x20, 0x72, 0x33, 0x2E, 
   0x77, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3B, 0x20, 0x43, 0x6C, 0x61, 0x6D, 0x70, 0x20, 
   0x73, 0x70, 0x65, 0x63, 0x75, 0x6C, 0x61, 0x72, 0x20, 0x63, 0x6F, 0x6C, 0x6F, 0x72, 0x73, 0x20, 
   0x74, 0x6F, 0x20, 0x31, 0x2E, 0x30, 0x66, 0x0D, 0x0A, 
};

static RESOURCEDATA g_rd_vshader1(TEXT(MODULE_STRING), TEXT("vshader1.vsh"), g_vshader1, sizeof(g_vshader1));

extern "C" LPVOID PREPEND_MODULE(_vshader1) = (LPVOID)&g_rd_vshader1;
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\vpshadr1\media\edge.bmp.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    edge.bmp.cpp

Description

    Data file for the resource edge.bmp.

*******************************************************************************/

#include "d3dlocus.h"

static BYTE g_edge[] = {

   0x42, 0x4D, 0x36, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x28, 0x00, 
   0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4D, 0x8F, 0xE0, 0x4D, 0x8F, 0xE0, 0x31, 0x72, 0xC7, 0x31, 
   0x72, 0xC7, 0x23, 0x66, 0xBD, 0x23, 0x66, 0xBD, 0x38, 0x80, 0xCE, 0x38, 0x80, 0xCE, 0x48, 0x96, 
   0xD9, 0x48, 0x96, 0xD9, 0x34, 0x84, 0xC3, 0x34, 0x84, 0xC3, 0x45, 0x92, 0xDB, 0x45, 0x92, 0xDB, 
   0x1F, 0x6B, 0xBE, 0x1F, 0x6B, 0xBE, 0x1F, 0x6A, 0xCC, 0x1F, 0x6A, 0xCC, 0x16, 0x61, 0xC3, 0x16, 
   0x61, 0xC3, 0x17, 0x61, 0xC1, 0x17, 0x61, 0xC1, 0x1F, 0x66, 0xC7, 0x1F, 0x66, 0xC7, 0x22, 0x68, 
   0xC6, 0x22, 0x68, 0xC6, 0x1E, 0x60, 0xBF, 0x1E, 0x60, 0xBF, 0x1D, 0x60, 0xBD, 0x1D, 0x60, 0xBD, 
   0x24, 0x64, 0xC2, 0x24, 0x64, 0xC2, 0x10, 0x4C, 0xB0, 0x10, 0x4C, 0xB0, 0x28, 0x69, 0xCC, 0x28, 
   0x69, 0xCC, 0x15, 0x59, 0xBE, 0x15, 0x59, 0xBE, 0x23, 0x6B, 0xD0, 0x23, 0x6B, 0xD0, 0x13, 0x5C, 
   0xBE, 0x13, 0x5C, 0xBE, 0x2A, 0x70, 0xCE, 0x2A, 0x70, 0xCE, 0x22, 0x66, 0xBF, 0x22, 0x66, 0xBF, 
   0x49, 0x8A, 0xDF, 0x49, 0x8A, 0xDF, 0x3E, 0x84, 0xD1, 0x3E, 0x84, 0xD1, 0x1D, 0x62, 0xB1, 0x1D, 
   0x62, 0xB1, 0x39, 0x7B, 0xCC, 0x39, 0x7B, 0xCC, 0x0C, 0x4D, 0xA2, 0x0C, 0x4D, 0xA2, 0x38, 0x78, 
   0xD0, 0x38, 0x78, 0xD0, 0x29, 0x68, 0xC4, 0x29, 0x68, 0xC4, 0x27, 0x63, 0xC3, 0x27, 0x63, 0xC3, 
   0x12, 0x4E, 0xAE, 0x12, 0x4E, 0xAE, 0x2D, 0x6E, 0xCA, 0x2D, 0x6E, 0xCA, 0x22, 0x64, 0xBD, 0x22, 
   0x64, 0xBD, 0x24, 0x67, 0xBC, 0x24, 0x67, 0xBC, 0x21, 0x66, 0xB6, 0x21, 0x66, 0xB6, 0x34, 0x79, 
   0xC9, 0x34, 0x79, 0xC9, 0x1F, 0x63, 0xB6, 0x1F, 0x63, 0xB6, 0x1E, 0x61, 0xB6, 0x1E, 0x61, 0xB6, 
   0x3A, 0x7D, 0xD4, 0x3A, 0x7D, 0xD4, 0x1D, 0x63, 0xC1, 0x1D, 0x63, 0xC1, 0x0D, 0x55, 0xB3, 0x0D, 
   0x55, 0xB3, 0x21, 0x69, 0xC7, 0x21, 0x69, 0xC7, 0x2E, 0x78, 0xD6, 0x2E, 0x78, 0xD6, 0x1D, 0x67, 
   0xC5, 0x1D, 0x67, 0xC5, 0x1C, 0x69, 0xC6, 0x1C, 0x69, 0xC6, 0x2A, 0x77, 0xD4, 0x2A, 0x77, 0xD4, 
   0x22, 0x70, 0xCD, 0x22, 0x70, 0xCD, 0x4E, 0x9C, 0xDE, 0x4E, 0x9C, 0xDE, 0x46, 0x8B, 0xE8, 0x46, 
   0x8B, 0xE8, 0x4A, 0x9A, 0xDB, 0x4A, 0x9A, 0xDB, 0x2D, 0x73, 0xD0, 0x2D, 0x73, 0xD0, 0x34, 0x7D, 
   0xD8, 0x34, 0x7D, 0xD8, 0x50, 0xA6, 0xE2, 0x50, 0xA6, 0xE2, 0x3C, 0x8B, 0xE2, 0x3C, 0x8B, 0xE2, 
   0x46, 0x9F, 0xD8, 0x46, 0x9F, 0xD8, 0x3C, 0x87, 0xCC, 0x3C, 0x87, 0xCC, 0x3C, 0x86, 0xC6, 0x3C, 
   0x86, 0xC6, 0x62, 0xAD, 0xE5, 0x62, 0xAD, 0xE5, 0x6D, 0xBA, 0xEB, 0x6D, 0xBA, 0xEB, 0x73, 0xC2, 
   0xF3, 0x73, 0xC2, 0xF3, 0x54, 0xA7, 0xDA, 0x54, 0xA7, 0xDA, 0x4F, 0xA6, 0xDE, 0x4F, 0xA6, 0xDE, 
   0x5B, 0xB3, 0xEF, 0x5B, 0xB3, 0xEF, 0x4D, 0x8F, 0xE0, 0x4D, 0x8F, 0xE0, 0x31, 0x72, 0xC7, 0x31, 
   0x72, 0xC7, 0x23, 0x66, 0xBD, 0x23, 0x66, 0xBD, 0x38, 0x80, 0xCE, 0x38, 0x80, 0xCE, 0x48, 0x96, 
   0xD9, 0x48, 0x96, 0xD9, 0x34, 0x84, 0xC3, 0x34, 0x84, 0xC3, 0x45, 0x92, 0xDB, 0x45, 0x92, 0xDB, 
   0x1F, 0x6B, 0xBE, 0x1F, 0x6B, 0xBE, 0x1F, 0x6A, 0xCC, 0x1F, 0x6A, 0xCC, 0x16, 0x61, 0xC3, 0x16, 
   0x61, 0xC3, 0x17, 0x61, 0xC1, 0x17, 0x61, 0xC1, 0x1F, 0x66, 0xC7, 0x1F, 0x66, 0xC7, 0x22, 0x68, 
   0xC6, 0x22, 0x68, 0xC6, 0x1E, 0x60, 0xBF, 0x1E, 0x60, 0xBF, 0x1D, 0x60, 0xBD, 0x1D, 0x60, 0xBD, 
   0x24, 0x64, 0xC2, 0x24, 0x64, 0xC2, 0x10, 0x4C, 0xB0, 0x10, 0x4C, 0xB0, 0x28, 0x69, 0xCC, 0x28, 
   0x69, 0xCC, 0x15, 0x59, 0xBE, 0x15, 0x59, 0xBE, 0x23, 0x6B, 0xD0, 0x23, 0x6B, 0xD0, 0x13, 0x5C, 
   0xBE, 0x13, 0x5C, 0xBE, 0x2A, 0x70, 0xCE, 0x2A, 0x70, 0xCE, 0x22, 0x66, 0xBF, 0x22, 0x66, 0xBF, 
   0x49, 0x8A, 0xDF, 0x49, 0x8A, 0xDF, 0x3E, 0x84, 0xD1, 0x3E, 0x84, 0xD1, 0x1D, 0x62, 0xB1, 0x1D, 
   0x62, 0xB1, 0x39, 0x7B, 0xCC, 0x39, 0x7B, 0xCC, 0x0C, 0x4D, 0xA2, 0x0C, 0x4D, 0xA2, 0x38, 0x78, 
   0xD0, 0x38, 0x78, 0xD0, 0x29, 0x68, 0xC4, 0x29, 0x68, 0xC4, 0x27, 0x63, 0xC3, 0x27, 0x63, 0xC3, 
   0x12, 0x4E, 0xAE, 0x12, 0x4E, 0xAE, 0x2D, 0x6E, 0xCA, 0x2D, 0x6E, 0xCA, 0x22, 0x64, 0xBD, 0x22, 
   0x64, 0xBD, 0x24, 0x67, 0xBC, 0x24, 0x67, 0xBC, 0x21, 0x66, 0xB6, 0x21, 0x66, 0xB6, 0x34, 0x79, 
   0xC9, 0x34, 0x79, 0xC9, 0x1F, 0x63, 0xB6, 0x1F, 0x63, 0xB6, 0x1E, 0x61, 0xB6, 0x1E, 0x61, 0xB6, 
   0x3A, 0x7D, 0xD4, 0x3A, 0x7D, 0xD4, 0x1D, 0x63, 0xC1, 0x1D, 0x63, 0xC1, 0x0D, 0x55, 0xB3, 0x0D, 
   0x55, 0xB3, 0x21, 0x69, 0xC7, 0x21, 0x69, 0xC7, 0x2E, 0x78, 0xD6, 0x2E, 0x78, 0xD6, 0x1D, 0x67, 
   0xC5, 0x1D, 0x67, 0xC5, 0x1C, 0x69, 0xC6, 0x1C, 0x69, 0xC6, 0x2A, 0x77, 0xD4, 0x2A, 0x77, 0xD4, 
   0x22, 0x70, 0xCD, 0x22, 0x70, 0xCD, 0x4E, 0x9C, 0xDE, 0x4E, 0x9C, 0xDE, 0x46, 0x8B, 0xE8, 0x46, 
   0x8B, 0xE8, 0x4A, 0x9A, 0xDB, 0x4A, 0x9A, 0xDB, 0x2D, 0x73, 0xD0, 0x2D, 0x73, 0xD0, 0x34, 0x7D, 
   0xD8, 0x34, 0x7D, 0xD8, 0x50, 0xA6, 0xE2, 0x50, 0xA6, 0xE2, 0x3C, 0x8B, 0xE2, 0x3C, 0x8B, 0xE2, 
   0x46, 0x9F, 0xD8, 0x46, 0x9F, 0xD8, 0x3C, 0x87, 0xCC, 0x3C, 0x87, 0xCC, 0x3C, 0x86, 0xC6, 0x3C, 
   0x86, 0xC6, 0x62, 0xAD, 0xE5, 0x62, 0xAD, 0xE5, 0x6D, 0xBA, 0xEB, 0x6D, 0xBA, 0xEB, 0x73, 0xC2, 
   0xF3, 0x73, 0xC2, 0xF3, 0x54, 0xA7, 0xDA, 0x54, 0xA7, 0xDA, 0x4F, 0xA6, 0xDE, 0x4F, 0xA6, 0xDE, 
   0x5B, 0xB3, 0xEF, 0x5B, 0xB3, 0xEF, 0x38, 0x79, 0xCA, 0x38, 0x79, 0xCA, 0x2B, 0x6B, 0xC3, 0x2B, 
   0x6B, 0xC3, 0x2D, 0x6C, 0xC6, 0x2D, 0x6C, 0xC6, 0x44, 0x89, 0xD9, 0x44, 0x89, 0xD9, 0x50, 0x9B, 
   0xE0, 0x50, 0x9B, 0xE0, 0x3A, 0x88, 0xCB, 0x3A, 0x88, 0xCB, 0x48, 0x93, 0xDF, 0x48, 0x93, 0xDF, 
   0x1D, 0x66, 0xBC, 0x1D, 0x66, 0xBC, 0x24, 0x6A, 0xCF, 0x24, 0x6A, 0xCF, 0x20, 0x66, 0xCB, 0x20, 
   0x66, 0xCB, 0x1F, 0x63, 0xC6, 0x1F, 0x63, 0xC6, 0x1E, 0x62, 0xC5, 0x1E, 0x62, 0xC5, 0x1B, 0x5F, 
   0xC0, 0x1B, 0x5F, 0xC0, 0x15, 0x59, 0xBA, 0x15, 0x59, 0xBA, 0x12, 0x56, 0xB5, 0x12, 0x56, 0xB5, 
   0x15, 0x57, 0xB6, 0x15, 0x57, 0xB6, 0x0F, 0x4C, 0xAE, 0x0F, 0x4C, 0xAE, 0x19, 0x5A, 0xBD, 0x19, 
   0x5A, 0xBD, 0x02, 0x46, 0xAB, 0x02, 0x46, 0xAB, 0x0A, 0x50, 0xB5, 0x0A, 0x50, 0xB5, 0x06, 0x4D, 
   0xAF, 0x06, 0x4D, 0xAF, 0x16, 0x5C, 0xB9, 0x16, 0x5C, 0xB9, 0x0F, 0x53, 0xAC, 0x0F, 0x53, 0xAC, 
   0x2D, 0x6E, 0xC3, 0x2D, 0x6E, 0xC3, 0x4E, 0x94, 0xE1, 0x4E, 0x94, 0xE1, 0x38, 0x7E, 0xCB, 0x38, 
   0x7E, 0xCB, 0x43, 0x88, 0xD8, 0x43, 0x88, 0xD8, 0x15, 0x57, 0xAA, 0x15, 0x57, 0xAA, 0x3E, 0x7E, 
   0xD6, 0x3E, 0x7E, 0xD6, 0x33, 0x70, 0xCD, 0x33, 0x70, 0xCD, 0x37, 0x74, 0xD2, 0x37, 0x74, 0xD2, 
   0x13, 0x4F, 0xAF, 0x13, 0x4F, 0xAF, 0x31, 0x70, 0xCA, 0x31, 0x70, 0xCA, 0x39, 0x79, 0xD1, 0x39, 
   0x79, 0xD1, 0x2F, 0x71, 0xC4, 0x2F, 0x71, 0xC4, 0x25, 0x67, 0xB8, 0x25, 0x67, 0xB8, 0x45, 0x87, 
   0xD8, 0x45, 0x87, 0xD8, 0x3B, 0x7D, 0xD0, 0x3B, 0x7D, 0xD0, 0x43, 0x84, 0xD9, 0x43, 0x84, 0xD9, 
   0x1A, 0x5A, 0xB2, 0x1A, 0x5A, 0xB2, 0x1A, 0x5F, 0xBC, 0x1A, 0x5F, 0xBC, 0x21, 0x66, 0xC3, 0x21, 
   0x66, 0xC3, 0x2F, 0x75, 0xD2, 0x2F, 0x75, 0xD2, 0x29, 0x72, 0xCE, 0x29, 0x72, 0xCE, 0x20, 0x69, 
   0xC5, 0x20, 0x69, 0xC5, 0x30, 0x7B, 0xD7, 0x30, 0x7B, 0xD7, 0x3C, 0x87, 0xE3, 0x3C, 0x87, 0xE3, 
   0x2C, 0x77, 0xD3, 0x2C, 0x77, 0xD3, 0x3C, 0x88, 0xCA, 0x3C, 0x88, 0xCA, 0x3A, 0x7D, 0xDA, 0x3A, 
   0x7D, 0xDA, 0x3D, 0x8B, 0xCD, 0x3D, 0x8B, 0xCD, 0x2D, 0x72, 0xCF, 0x2D, 0x72, 0xCF, 0x26, 0x6D, 
   0xC8, 0x26, 0x6D, 0xC8, 0x59, 0xAC, 0xE9, 0x59, 0xAC, 0xE9, 0x45, 0x92, 0xE8, 0x45, 0x92, 0xE8, 
   0x53, 0xAA, 0xE3, 0x53, 0xAA, 0xE3, 0x39, 0x83, 0xCB, 0x39, 0x83, 0xCB, 0x42, 0x8B, 0xCF, 0x42, 
   0x8B, 0xCF, 0x64, 0xAE, 0xE8, 0x64, 0xAE, 0xE8, 0x6A, 0xB5, 0xE9, 0x6A, 0xB5, 0xE9, 0x75, 0xC1, 
   0xF1, 0x75, 0xC1, 0xF1, 0x62, 0xB1, 0xE2, 0x62, 0xB1, 0xE2, 0x5C, 0xAE, 0xE5, 0x5C, 0xAE, 0xE5, 
   0x5A, 0xAD, 0xE5, 0x5A, 0xAD, 0xE5, 0x38, 0x79, 0xCA, 0x38, 0x79, 0xCA, 0x2B, 0x6B, 0xC3, 0x2B, 
   0x6B, 0xC3, 0x2D, 0x6C, 0xC6, 0x2D, 0x6C, 0xC6, 0x44, 0x89, 0xD9, 0x44, 0x89, 0xD9, 0x50, 0x9B, 
   0xE0, 0x50, 0x9B, 0xE0, 0x3A, 0x88, 0xCB, 0x3A, 0x88, 0xCB, 0x48, 0x93, 0xDF, 0x48, 0x93, 0xDF, 
   0x1D, 0x66, 0xBC, 0x1D, 0x66, 0xBC, 0x24, 0x6A, 0xCF, 0x24, 0x6A, 0xCF, 0x20, 0x66, 0xCB, 0x20, 
   0x66, 0xCB, 0x1F, 0x63, 0xC6, 0x1F, 0x63, 0xC6, 0x1E, 0x62, 0xC5, 0x1E, 0x62, 0xC5, 0x1B, 0x5F, 
   0xC0, 0x1B, 0x5F, 0xC0, 0x15, 0x59, 0xBA, 0x15, 0x59, 0xBA, 0x12, 0x56, 0xB5, 0x12, 0x56, 0xB5, 
   0x15, 0x57, 0xB6, 0x15, 0x57, 0xB6, 0x0F, 0x4C, 0xAE, 0x0F, 0x4C, 0xAE, 0x19, 0x5A, 0xBD, 0x19, 
   0x5A, 0xBD, 0x02, 0x46, 0xAB, 0x02, 0x46, 0xAB, 0x0A, 0x50, 0xB5, 0x0A, 0x50, 0xB5, 0x06, 0x4D, 
   0xAF, 0x06, 0x4D, 0xAF, 0x16, 0x5C, 0xB9, 0x16, 0x5C, 0xB9, 0x0F, 0x53, 0xAC, 0x0F, 0x53, 0xAC, 
   0x2D, 0x6E, 0xC3, 0x2D, 0x6E, 0xC3, 0x4E, 0x94, 0xE1, 0x4E, 0x94, 0xE1, 0x38, 0x7E, 0xCB, 0x38, 
   0x7E, 0xCB, 0x43, 0x88, 0xD8, 0x43, 0x88, 0xD8, 0x15, 0x57, 0xAA, 0x15, 0x57, 0xAA, 0x3E, 0x7E, 
   0xD6, 0x3E, 0x7E, 0xD6, 0x33, 0x70, 0xCD, 0x33, 0x70, 0xCD, 0x37, 0x74, 0xD2, 0x37, 0x74, 0xD2, 
   0x13, 0x4F, 0xAF, 0x13, 0x4F, 0xAF, 0x31, 0x70, 0xCA, 0x31, 0x70, 0xCA, 0x39, 0x79, 0xD1, 0x39, 
   0x79, 0xD1, 0x2F, 0x71, 0xC4, 0x2F, 0x71, 0xC4, 0x25, 0x67, 0xB8, 0x25, 0x67, 0xB8, 0x45, 0x87, 
   0xD8, 0x45, 0x87, 0xD8, 0x3B, 0x7D, 0xD0, 0x3B, 0x7D, 0xD0, 0x43, 0x84, 0xD9, 0x43, 0x84, 0xD9, 
   0x1A, 0x5A, 0xB2, 0x1A, 0x5A, 0xB2, 0x1A, 0x5F, 0xBC, 0x1A, 0x5F, 0xBC, 0x21, 0x66, 0xC3, 0x21, 
   0x66, 0xC3, 0x2F, 0x75, 0xD2, 0x2F, 0x75, 0xD2, 0x29, 0x72, 0xCE, 0x29, 0x72, 0xCE, 0x20, 0x69, 
   0xC5, 0x20, 0x69, 0xC5, 0x30, 0x7B, 0xD7, 0x30, 0x7B, 0xD7, 0x3C, 0x87, 0xE3, 0x3C, 0x87, 0xE3, 
   0x2C, 0x77, 0xD3, 0x2C, 0x77, 0xD3, 0x3C, 0x88, 0xCA, 0x3C, 0x88, 0xCA, 0x3A, 0x7D, 0xDA, 0x3A, 
   0x7D, 0xDA, 0x3D, 0x8B, 0xCD, 0x3D, 0x8B, 0xCD, 0x2D, 0x72, 0xCF, 0x2D, 0x72, 0xCF, 0x26, 0x6D, 
   0xC8, 0x26, 0x6D, 0xC8, 0x59, 0xAC, 0xE9, 0x59, 0xAC, 0xE9, 0x45, 0x92, 0xE8, 0x45, 0x92, 0xE8, 
   0x53, 0xAA, 0xE3, 0x53, 0xAA, 0xE3, 0x39, 0x83, 0xCB, 0x39, 0x83, 0xCB, 0x42, 0x8B, 0xCF, 0x42, 
   0x8B, 0xCF, 0x64, 0xAE, 0xE8, 0x64, 0xAE, 0xE8, 0x6A, 0xB5, 0xE9, 0x6A, 0xB5, 0xE9, 0x75, 0xC1, 
   0xF1, 0x75, 0xC1, 0xF1, 0x62, 0xB1, 0xE2, 0x62, 0xB1, 0xE2, 0x5C, 0xAE, 0xE5, 0x5C, 0xAE, 0xE5, 
   0x5A, 0xAD, 0xE5, 0x5A, 0xAD, 0xE5, 0x25, 0x65, 0xB9, 0x25, 0x65, 0xB9, 0x28, 0x67, 0xBF, 0x28, 
   0x67, 0xBF, 0x31, 0x70, 0xCC, 0x31, 0x70, 0xCC, 0x47, 0x89, 0xDC, 0x47, 0x89, 0xDC, 0x53, 0x9B, 
   0xE3, 0x53, 0x9B, 0xE3, 0x45, 0x8D, 0xD3, 0x45, 0x8D, 0xD3, 0x55, 0x9A, 0xEA, 0x55, 0x9A, 0xEA, 
   0x25, 0x68, 0xC4, 0x25, 0x68, 0xC4, 0x06, 0x45, 0xAD, 0x06, 0x45, 0xAD, 0x0C, 0x4B, 0xB3, 0x0C, 
   0x4B, 0xB3, 0x0F, 0x4E, 0xB6, 0x0F, 0x4E, 0xB6, 0x0A, 0x4C, 0xB2, 0x0A, 0x4C, 0xB2, 0x08, 0x4B, 
   0xAE, 0x08, 0x4B, 0xAE, 0x0A, 0x4D, 0xB0, 0x0A, 0x4D, 0xB0, 0x0C, 0x51, 0xB2, 0x0C, 0x51, 0xB2, 
   0x0C, 0x51, 0xB2, 0x0C, 0x51, 0xB2, 0x17, 0x54, 0xB6, 0x17, 0x54, 0xB6, 0x1A, 0x58, 0xBC, 0x1A, 
   0x58, 0xBC, 0x09, 0x4A, 0xAD, 0x09, 0x4A, 0xAD, 0x0C, 0x4F, 0xB2, 0x0C, 0x4F, 0xB2, 0x19, 0x5D, 
   0xBE, 0x19, 0x5D, 0xBE, 0x1E, 0x61, 0xBE, 0x1E, 0x61, 0xBE, 0x18, 0x5B, 0xB2, 0x18, 0x5B, 0xB2, 
   0x2B, 0x6C, 0xC1, 0x2B, 0x6C, 0xC1, 0x4E, 0x97, 0xE1, 0x4E, 0x97, 0xE1, 0x44, 0x8C, 0xD9, 0x44, 
   0x8C, 0xD9, 0x3F, 0x84, 0xD3, 0x3F, 0x84, 0xD3, 0x15, 0x57, 0xAA, 0x15, 0x57, 0xAA, 0x37, 0x77, 
   0xCF, 0x37, 0x77, 0xCF, 0x29, 0x66, 0xC3, 0x29, 0x66, 0xC3, 0x38, 0x72, 0xD1, 0x38, 0x72, 0xD1, 
   0x09, 0x43, 0xA3, 0x09, 0x43, 0xA3, 0x3A, 0x76, 0xD0, 0x3A, 0x76, 0xD0, 0x2A, 0x66, 0xBF, 0x2A, 
   0x66, 0xBF, 0x53, 0x91, 0xE5, 0x53, 0x91, 0xE5, 0x1D, 0x5C, 0xAD, 0x1D, 0x5C, 0xAD, 0x30, 0x6F, 
   0xC0, 0x30, 0x6F, 0xC0, 0x3C, 0x7A, 0xCE, 0x3C, 0x7A, 0xCE, 0x39, 0x75, 0xCE, 0x39, 0x75, 0xCE, 
   0x17, 0x53, 0xAD, 0x17, 0x53, 0xAD, 0x17, 0x5A, 0xB7, 0x17, 0x5A, 0xB7, 0x24, 0x67, 0xC4, 0x24, 
   0x67, 0xC4, 0x28, 0x6B, 0xC8, 0x28, 0x6B, 0xC8, 0x1B, 0x60, 0xBD, 0x1B, 0x60, 0xBD, 0x1A, 0x5F, 
   0xBC, 0x1A, 0x5F, 0xBC, 0x28, 0x6E, 0xCB, 0x28, 0x6E, 0xCB, 0x2D, 0x76, 0xD2, 0x2D, 0x76, 0xD2, 
   0x25, 0x6E, 0xCA, 0x25, 0x6E, 0xCA, 0x42, 0x8C, 0xCC, 0x42, 0x8C, 0xCC, 0x40, 0x80, 0xDE, 0x40, 
   0x80, 0xDE, 0x46, 0x90, 0xD0, 0x46, 0x90, 0xD0, 0x35, 0x78, 0xD4, 0x35, 0x78, 0xD4, 0x1F, 0x62, 
   0xBE, 0x1F, 0x62, 0xBE, 0x62, 0xB2, 0xEF, 0x62, 0xB2, 0xEF, 0x4B, 0x92, 0xE9, 0x4B, 0x92, 0xE9, 
   0x57, 0xAA, 0xE2, 0x57, 0xAA, 0xE2, 0x48, 0x90, 0xDE, 0x48, 0x90, 0xDE, 0x55, 0x9D, 0xE5, 0x55, 
   0x9D, 0xE5, 0x68, 0xAF, 0xEE, 0x68, 0xAF, 0xEE, 0x63, 0xA9, 0xDE, 0x63, 0xA9, 0xDE, 0x6E, 0xB6, 
   0xE6, 0x6E, 0xB6, 0xE6, 0x67, 0xB1, 0xE1, 0x67, 0xB1, 0xE1, 0x6C, 0xB7, 0xEB, 0x6C, 0xB7, 0xEB, 
   0x61, 0xAD, 0xE2, 0x61, 0xAD, 0xE2, 0x25, 0x65, 0xB9, 0x25, 0x65, 0xB9, 0x28, 0x67, 0xBF, 0x28, 
   0x67, 0xBF, 0x31, 0x70, 0xCC, 0x31, 0x70, 0xCC, 0x47, 0x89, 0xDC, 0x47, 0x89, 0xDC, 0x53, 0x9B, 
   0xE3, 0x53, 0x9B, 0xE3, 0x45, 0x8D, 0xD3, 0x45, 0x8D, 0xD3, 0x55, 0x9A, 0xEA, 0x55, 0x9A, 0xEA, 
   0x25, 0x68, 0xC4, 0x25, 0x68, 0xC4, 0x06, 0x45, 0xAD, 0x06, 0x45, 0xAD, 0x0C, 0x4B, 0xB3, 0x0C, 
   0x4B, 0xB3, 0x0F, 0x4E, 0xB6, 0x0F, 0x4E, 0xB6, 0x0A, 0x4C, 0xB2, 0x0A, 0x4C, 0xB2, 0x08, 0x4B, 
   0xAE, 0x08, 0x4B, 0xAE, 0x0A, 0x4D, 0xB0, 0x0A, 0x4D, 0xB0, 0x0C, 0x51, 0xB2, 0x0C, 0x51, 0xB2, 
   0x0C, 0x51, 0xB2, 0x0C, 0x51, 0xB2, 0x17, 0x54, 0xB6, 0x17, 0x54, 0xB6, 0x1A, 0x58, 0xBC, 0x1A, 
   0x58, 0xBC, 0x09, 0x4A, 0xAD, 0x09, 0x4A, 0xAD, 0x0C, 0x4F, 0xB2, 0x0C, 0x4F, 0xB2, 0x19, 0x5D, 
   0xBE, 0x19, 0x5D, 0xBE, 0x1E, 0x61, 0xBE, 0x1E, 0x61, 0xBE, 0x18, 0x5B, 0xB2, 0x18, 0x5B, 0xB2, 
   0x2B, 0x6C, 0xC1, 0x2B, 0x6C, 0xC1, 0x4E, 0x97, 0xE1, 0x4E, 0x97, 0xE1, 0x44, 0x8C, 0xD9, 0x44, 
   0x8C, 0xD9, 0x3F, 0x84, 0xD3, 0x3F, 0x84, 0xD3, 0x15, 0x57, 0xAA, 0x15, 0x57, 0xAA, 0x37, 0x77, 
   0xCF, 0x37, 0x77, 0xCF, 0x29, 0x66, 0xC3, 0x29, 0x66, 0xC3, 0x38, 0x72, 0xD1, 0x38, 0x72, 0xD1, 
   0x09, 0x43, 0xA3, 0x09, 0x43, 0xA3, 0x3A, 0x76, 0xD0, 0x3A, 0x76, 0xD0, 0x2A, 0x66, 0xBF, 0x2A, 
   0x66, 0xBF, 0x53, 0x91, 0xE5, 0x53, 0x91, 0xE5, 0x1D, 0x5C, 0xAD, 0x1D, 0x5C, 0xAD, 0x30, 0x6F, 
   0xC0, 0x30, 0x6F, 0xC0, 0x3C, 0x7A, 0xCE, 0x3C, 0x7A, 0xCE, 0x39, 0x75, 0xCE, 0x39, 0x75, 0xCE, 
   0x17, 0x53, 0xAD, 0x17, 0x53, 0xAD, 0x17, 0x5A, 0xB7, 0x17, 0x5A, 0xB7, 0x24, 0x67, 0xC4, 0x24, 
   0x67, 0xC4, 0x28, 0x6B, 0xC8, 0x28, 0x6B, 0xC8, 0x1B, 0x60, 0xBD, 0x1B, 0x60, 0xBD, 0x1A, 0x5F, 
   0xBC, 0x1A, 0x5F, 0xBC, 0x28, 0x6E, 0xCB, 0x28, 0x6E, 0xCB, 0x2D, 0x76, 0xD2, 0x2D, 0x76, 0xD2, 
   0x25, 0x6E, 0xCA, 0x25, 0x6E, 0xCA, 0x42, 0x8C, 0xCC, 0x42, 0x8C, 0xCC, 0x40, 0x80, 0xDE, 0x40, 
   0x80, 0xDE, 0x46, 0x90, 0xD0, 0x46, 0x90, 0xD0, 0x35, 0x78, 0xD4, 0x35, 0x78, 0xD4, 0x1F, 0x62, 
   0xBE, 0x1F, 0x62, 0xBE, 0x62, 0xB2, 0xEF, 0x62, 0xB2, 0xEF, 0x4B, 0x92, 0xE9, 0x4B, 0x92, 0xE9, 
   0x57, 0xAA, 0xE2, 0x57, 0xAA, 0xE2, 0x48, 0x90, 0xDE, 0x48, 0x90, 0xDE, 0x55, 0x9D, 0xE5, 0x55, 
   0x9D, 0xE5, 0x68, 0xAF, 0xEE, 0x68, 0xAF, 0xEE, 0x63, 0xA9, 0xDE, 0x63, 0xA9, 0xDE, 0x6E, 0xB6, 
   0xE6, 0x6E, 0xB6, 0xE6, 0x67, 0xB1, 0xE1, 0x67, 0xB1, 0xE1, 0x6C, 0xB7, 0xEB, 0x6C, 0xB7, 0xEB, 
   0x61, 0xAD, 0xE2, 0x61, 0xAD, 0xE2, 0x37, 0x78, 0xC9, 0x37, 0x78, 0xC9, 0x36, 0x75, 0xCD, 0x36, 
   0x75, 0xCD, 0x31, 0x6E, 0xCB, 0x31, 0x6E, 0xCB, 0x32, 0x73, 0xC8, 0x32, 0x73, 0xC8, 0x37, 0x7B, 
   0xC6, 0x37, 0x7B, 0xC6, 0x2B, 0x70, 0xB9, 0x2B, 0x70, 0xB9, 0x39, 0x7B, 0xCE, 0x39, 0x7B, 0xCE, 
   0x05, 0x43, 0xA1, 0x05, 0x43, 0xA1, 0x00, 0x30, 0x9B, 0x00, 0x30, 0x9B, 0x05, 0x3D, 0xA8, 0x05, 
   0x3D, 0xA8, 0x0C, 0x46, 0xAF, 0x0C, 0x46, 0xAF, 0x08, 0x45, 0xAD, 0x08, 0x45, 0xAD, 0x07, 0x47, 
   0xAD, 0x07, 0x47, 0xAD, 0x10, 0x53, 0xB6, 0x10, 0x53, 0xB6, 0x17, 0x5B, 0xBE, 0x17, 0x5B, 0xBE, 
   0x15, 0x5C, 0xBE, 0x15, 0x5C, 0xBE, 0x16, 0x53, 0xB3, 0x16, 0x53, 0xB3, 0x1E, 0x5B, 0xBD, 0x1E, 
   0x5B, 0xBD, 0x1A, 0x58, 0xBC, 0x1A, 0x58, 0xBC, 0x1D, 0x5B, 0xBF, 0x1D, 0x5B, 0xBF, 0x2F, 0x6E, 
   0xD0, 0x2F, 0x6E, 0xD0, 0x27, 0x68, 0xC4, 0x27, 0x68, 0xC4, 0x28, 0x68, 0xC0, 0x28, 0x68, 0xC0, 
   0x3B, 0x7D, 0xD0, 0x3B, 0x7D, 0xD0, 0x50, 0x9B, 0xE5, 0x50, 0x9B, 0xE5, 0x4E, 0x97, 0xE1, 0x4E, 
   0x97, 0xE1, 0x41, 0x86, 0xD5, 0x41, 0x86, 0xD5, 0x25, 0x6A, 0xBA, 0x25, 0x6A, 0xBA, 0x40, 0x80, 
   0xD5, 0x40, 0x80, 0xD5, 0x26, 0x64, 0xBE, 0x26, 0x64, 0xBE, 0x3A, 0x75, 0xD2, 0x3A, 0x75, 0xD2, 
   0x13, 0x4B, 0xAA, 0x13, 0x4B, 0xAA, 0x2B, 0x65, 0xBE, 0x2B, 0x65, 0xBE, 0x1F, 0x5A, 0xB0, 0x1F, 
   0x5A, 0xB0, 0x31, 0x6D, 0xC1, 0x31, 0x6D, 0xC1, 0x2C, 0x68, 0xBA, 0x2C, 0x68, 0xBA, 0x3A, 0x76, 
   0xC8, 0x3A, 0x76, 0xC8, 0x11, 0x4C, 0xA2, 0x11, 0x4C, 0xA2, 0x46, 0x7F, 0xDA, 0x46, 0x7F, 0xDA, 
   0x0F, 0x48, 0xA5, 0x0F, 0x48, 0xA5, 0x3B, 0x7A, 0xD6, 0x3B, 0x7A, 0xD6, 0x37, 0x78, 0xD4, 0x37, 
   0x78, 0xD4, 0x30, 0x71, 0xCD, 0x30, 0x71, 0xCD, 0x2E, 0x71, 0xCD, 0x2E, 0x71, 0xCD, 0x30, 0x73, 
   0xCF, 0x30, 0x73, 0xCF, 0x28, 0x6E, 0xC9, 0x28, 0x6E, 0xC9, 0x29, 0x6F, 0xCA, 0x29, 0x6F, 0xCA, 
   0x37, 0x7E, 0xD9, 0x37, 0x7E, 0xD9, 0x51, 0x9B, 0xDB, 0x51, 0x9B, 0xDB, 0x44, 0x85, 0xE1, 0x44, 
   0x85, 0xE1, 0x56, 0xA0, 0xE0, 0x56, 0xA0, 0xE0, 0x37, 0x78, 0xD4, 0x37, 0x78, 0xD4, 0x29, 0x6B, 
   0xC4, 0x29, 0x6B, 0xC4, 0x68, 0xB4, 0xEF, 0x68, 0xB4, 0xEF, 0x4E, 0x91, 0xE6, 0x4E, 0x91, 0xE6, 
   0x50, 0x9F, 0xD8, 0x50, 0x9F, 0xD8, 0x41, 0x87, 0xDA, 0x41, 0x87, 0xDA, 0x55, 0x9C, 0xE6, 0x55, 
   0x9C, 0xE6, 0x6A, 0xAE, 0xEF, 0x6A, 0xAE, 0xEF, 0x6A, 0xAD, 0xE4, 0x6A, 0xAD, 0xE4, 0x76, 0xB9, 
   0xEA, 0x76, 0xB9, 0xEA, 0x6C, 0xB0, 0xDF, 0x6C, 0xB0, 0xDF, 0x76, 0xBB, 0xEC, 0x76, 0xBB, 0xEC, 
   0x6A, 0xAF, 0xE1, 0x6A, 0xAF, 0xE1, 0x37, 0x78, 0xC9, 0x37, 0x78, 0xC9, 0x36, 0x75, 0xCD, 0x36, 
   0x75, 0xCD, 0x31, 0x6E, 0xCB, 0x31, 0x6E, 0xCB, 0x32, 0x73, 0xC8, 0x32, 0x73, 0xC8, 0x37, 0x7B, 
   0xC6, 0x37, 0x7B, 0xC6, 0x2B, 0x70, 0xB9, 0x2B, 0x70, 0xB9, 0x39, 0x7B, 0xCE, 0x39, 0x7B, 0xCE, 
   0x05, 0x43, 0xA1, 0x05, 0x43, 0xA1, 0x00, 0x30, 0x9B, 0x00, 0x30, 0x9B, 0x05, 0x3D, 0xA8, 0x05, 
   0x3D, 0xA8, 0x0C, 0x46, 0xAF, 0x0C, 0x46, 0xAF, 0x08, 0x45, 0xAD, 0x08, 0x45, 0xAD, 0x07, 0x47, 
   0xAD, 0x07, 0x47, 0xAD, 0x10, 0x53, 0xB6, 0x10, 0x53, 0xB6, 0x17, 0x5B, 0xBE, 0x17, 0x5B, 0xBE, 
   0x15, 0x5C, 0xBE, 0x15, 0x5C, 0xBE, 0x16, 0x53, 0xB3, 0x16, 0x53, 0xB3, 0x1E, 0x5B, 0xBD, 0x1E, 
   0x5B, 0xBD, 0x1A, 0x58, 0xBC, 0x1A, 0x58, 0xBC, 0x1D, 0x5B, 0xBF, 0x1D, 0x5B, 0xBF, 0x2F, 0x6E, 
   0xD0, 0x2F, 0x6E, 0xD0, 0x27, 0x68, 0xC4, 0x27, 0x68, 0xC4, 0x28, 0x68, 0xC0, 0x28, 0x68, 0xC0, 
   0x3B, 0x7D, 0xD0, 0x3B, 0x7D, 0xD0, 0x50, 0x9B, 0xE5, 0x50, 0x9B, 0xE5, 0x4E, 0x97, 0xE1, 0x4E, 
   0x97, 0xE1, 0x41, 0x86, 0xD5, 0x41, 0x86, 0xD5, 0x25, 0x6A, 0xBA, 0x25, 0x6A, 0xBA, 0x40, 0x80, 
   0xD5, 0x40, 0x80, 0xD5, 0x26, 0x64, 0xBE, 0x26, 0x64, 0xBE, 0x3A, 0x75, 0xD2, 0x3A, 0x75, 0xD2, 
   0x13, 0x4B, 0xAA, 0x13, 0x4B, 0xAA, 0x2B, 0x65, 0xBE, 0x2B, 0x65, 0xBE, 0x1F, 0x5A, 0xB0, 0x1F, 
   0x5A, 0xB0, 0x31, 0x6D, 0xC1, 0x31, 0x6D, 0xC1, 0x2C, 0x68, 0xBA, 0x2C, 0x68, 0xBA, 0x3A, 0x76, 
   0xC8, 0x3A, 0x76, 0xC8, 0x11, 0x4C, 0xA2, 0x11, 0x4C, 0xA2, 0x46, 0x7F, 0xDA, 0x46, 0x7F, 0xDA, 
   0x0F, 0x48, 0xA5, 0x0F, 0x48, 0xA5, 0x3B, 0x7A, 0xD6, 0x3B, 0x7A, 0xD6, 0x37, 0x78, 0xD4, 0x37, 
   0x78, 0xD4, 0x30, 0x71, 0xCD, 0x30, 0x71, 0xCD, 0x2E, 0x71, 0xCD, 0x2E, 0x71, 0xCD, 0x30, 0x73, 
   0xCF, 0x30, 0x73, 0xCF, 0x28, 0x6E, 0xC9, 0x28, 0x6E, 0xC9, 0x29, 0x6F, 0xCA, 0x29, 0x6F, 0xCA, 
   0x37, 0x7E, 0xD9, 0x37, 0x7E, 0xD9, 0x51, 0x9B, 0xDB, 0x51, 0x9B, 0xDB, 0x44, 0x85, 0xE1, 0x44, 
   0x85, 0xE1, 0x56, 0xA0, 0xE0, 0x56, 0xA0, 0xE0, 0x37, 0x78, 0xD4, 0x37, 0x78, 0xD4, 0x29, 0x6B, 
   0xC4, 0x29, 0x6B, 0xC4, 0x68, 0xB4, 0xEF, 0x68, 0xB4, 0xEF, 0x4E, 0x91, 0xE6, 0x4E, 0x91, 0xE6, 
   0x50, 0x9F, 0xD8, 0x50, 0x9F, 0xD8, 0x41, 0x87, 0xDA, 0x41, 0x87, 0xDA, 0x55, 0x9C, 0xE6, 0x55, 
   0x9C, 0xE6, 0x6A, 0xAE, 0xEF, 0x6A, 0xAE, 0xEF, 0x6A, 0xAD, 0xE4, 0x6A, 0xAD, 0xE4, 0x76, 0xB9, 
   0xEA, 0x76, 0xB9, 0xEA, 0x6C, 0xB0, 0xDF, 0x6C, 0xB0, 0xDF, 0x76, 0xBB, 0xEC, 0x76, 0xBB, 0xEC, 
   0x6A, 0xAF, 0xE1, 0x6A, 0xAF, 0xE1, 0x44, 0x89, 0xD8, 0x44, 0x89, 0xD8, 0x3C, 0x7F, 0xD4, 0x3C, 
   0x7F, 0xD4, 0x2F, 0x71, 0xCA, 0x2F, 0x71, 0xCA, 0x31, 0x73, 0xC6, 0x31, 0x73, 0xC6, 0x3D, 0x81, 
   0xCC, 0x3D, 0x81, 0xCC, 0x37, 0x7C, 0xC5, 0x37, 0x7C, 0xC5, 0x44, 0x86, 0xD9, 0x44, 0x86, 0xD9, 
   0x0C, 0x4A, 0xA8, 0x0C, 0x4A, 0xA8, 0x13, 0x47, 0xB1, 0x13, 0x47, 0xB1, 0x1E, 0x55, 0xBE, 0x1E, 
   0x55, 0xBE, 0x22, 0x5B, 0xC4, 0x22, 0x5B, 0xC4, 0x1B, 0x56, 0xBD, 0x1B, 0x56, 0xBD, 0x18, 0x56, 
   0xBA, 0x18, 0x56, 0xBA, 0x1E, 0x5F, 0xC2, 0x1E, 0x5F, 0xC2, 0x22, 0x66, 0xC7, 0x22, 0x66, 0xC7, 
   0x21, 0x65, 0xC6, 0x21, 0x65, 0xC6, 0x10, 0x4D, 0xAD, 0x10, 0x4D, 0xAD, 0x1C, 0x59, 0xBB, 0x1C, 
   0x59, 0xBB, 0x1D, 0x58, 0xBB, 0x1D, 0x58, 0xBB, 0x1A, 0x55, 0xB8, 0x1A, 0x55, 0xB8, 0x21, 0x5D, 
   0xBD, 0x21, 0x5D, 0xBD, 0x16, 0x53, 0xB0, 0x16, 0x53, 0xB0, 0x1D, 0x5E, 0xB3, 0x1D, 0x5E, 0xB3, 
   0x3D, 0x7F, 0xD2, 0x3D, 0x7F, 0xD2, 0x4A, 0x98, 0xDF, 0x4A, 0x98, 0xDF, 0x43, 0x8E, 0xD8, 0x43, 
   0x8E, 0xD8, 0x3A, 0x82, 0xCF, 0x3A, 0x82, 0xCF, 0x33, 0x78, 0xC8, 0x33, 0x78, 0xC8, 0x45, 0x85, 
   0xDA, 0x45, 0x85, 0xDA, 0x21, 0x5D, 0xB6, 0x21, 0x5D, 0xB6, 0x34, 0x6D, 0xCA, 0x34, 0x6D, 0xCA, 
   0x20, 0x56, 0xB4, 0x20, 0x56, 0xB4, 0x35, 0x70, 0xC6, 0x35, 0x70, 0xC6, 0x00, 0x31, 0x85, 0x00, 
   0x31, 0x85, 0x37, 0x73, 0xC5, 0x37, 0x73, 0xC5, 0x29, 0x65, 0xB7, 0x29, 0x65, 0xB7, 0x45, 0x81, 
   0xD3, 0x45, 0x81, 0xD3, 0x39, 0x74, 0xCA, 0x39, 0x74, 0xCA, 0x35, 0x6E, 0xCB, 0x35, 0x6E, 0xCB, 
   0x11, 0x49, 0xA8, 0x11, 0x49, 0xA8, 0x32, 0x71, 0xCD, 0x32, 0x71, 0xCD, 0x2D, 0x6E, 0xCA, 0x2D, 
   0x6E, 0xCA, 0x25, 0x66, 0xC2, 0x25, 0x66, 0xC2, 0x23, 0x66, 0xC2, 0x23, 0x66, 0xC2, 0x26, 0x69, 
   0xC5, 0x26, 0x69, 0xC5, 0x20, 0x66, 0xC1, 0x20, 0x66, 0xC1, 0x21, 0x67, 0xC2, 0x21, 0x67, 0xC2, 
   0x2E, 0x75, 0xD0, 0x2E, 0x75, 0xD0, 0x4F, 0x9C, 0xDA, 0x4F, 0x9C, 0xDA, 0x3B, 0x7D, 0xD6, 0x3B, 
   0x7D, 0xD6, 0x60, 0xAB, 0xE9, 0x60, 0xAB, 0xE9, 0x2D, 0x6F, 0xC8, 0x2D, 0x6F, 0xC8, 0x3E, 0x80, 
   0xD9, 0x3E, 0x80, 0xD9, 0x68, 0xB5, 0xEE, 0x68, 0xB5, 0xEE, 0x50, 0x93, 0xE8, 0x50, 0x93, 0xE8, 
   0x50, 0x9D, 0xD5, 0x50, 0x9D, 0xD5, 0x24, 0x6A, 0xBD, 0x24, 0x6A, 0xBD, 0x45, 0x89, 0xD4, 0x45, 
   0x89, 0xD4, 0x64, 0xA8, 0xE9, 0x64, 0xA8, 0xE9, 0x79, 0xBA, 0xF1, 0x79, 0xBA, 0xF1, 0x82, 0xC4, 
   0xF5, 0x82, 0xC4, 0xF5, 0x68, 0xAA, 0xDA, 0x68, 0xAA, 0xDA, 0x75, 0xB8, 0xE9, 0x75, 0xB8, 0xE9, 
   0x68, 0xAD, 0xDF, 0x68, 0xAD, 0xDF, 0x44, 0x89, 0xD8, 0x44, 0x89, 0xD8, 0x3C, 0x7F, 0xD4, 0x3C, 
   0x7F, 0xD4, 0x2F, 0x71, 0xCA, 0x2F, 0x71, 0xCA, 0x31, 0x73, 0xC6, 0x31, 0x73, 0xC6, 0x3D, 0x81, 
   0xCC, 0x3D, 0x81, 0xCC, 0x37, 0x7C, 0xC5, 0x37, 0x7C, 0xC5, 0x44, 0x86, 0xD9, 0x44, 0x86, 0xD9, 
   0x0C, 0x4A, 0xA8, 0x0C, 0x4A, 0xA8, 0x13, 0x47, 0xB1, 0x13, 0x47, 0xB1, 0x1E, 0x55, 0xBE, 0x1E, 
   0x55, 0xBE, 0x22, 0x5B, 0xC4, 0x22, 0x5B, 0xC4, 0x1B, 0x56, 0xBD, 0x1B, 0x56, 0xBD, 0x18, 0x56, 
   0xBA, 0x18, 0x56, 0xBA, 0x1E, 0x5F, 0xC2, 0x1E, 0x5F, 0xC2, 0x22, 0x66, 0xC7, 0x22, 0x66, 0xC7, 
   0x21, 0x65, 0xC6, 0x21, 0x65, 0xC6, 0x10, 0x4D, 0xAD, 0x10, 0x4D, 0xAD, 0x1C, 0x59, 0xBB, 0x1C, 
   0x59, 0xBB, 0x1D, 0x58, 0xBB, 0x1D, 0x58, 0xBB, 0x1A, 0x55, 0xB8, 0x1A, 0x55, 0xB8, 0x21, 0x5D, 
   0xBD, 0x21, 0x5D, 0xBD, 0x16, 0x53, 0xB0, 0x16, 0x53, 0xB0, 0x1D, 0x5E, 0xB3, 0x1D, 0x5E, 0xB3, 
   0x3D, 0x7F, 0xD2, 0x3D, 0x7F, 0xD2, 0x4A, 0x98, 0xDF, 0x4A, 0x98, 0xDF, 0x43, 0x8E, 0xD8, 0x43, 
   0x8E, 0xD8, 0x3A, 0x82, 0xCF, 0x3A, 0x82, 0xCF, 0x33, 0x78, 0xC8, 0x33, 0x78, 0xC8, 0x45, 0x85, 
   0xDA, 0x45, 0x85, 0xDA, 0x21, 0x5D, 0xB6, 0x21, 0x5D, 0xB6, 0x34, 0x6D, 0xCA, 0x34, 0x6D, 0xCA, 
   0x20, 0x56, 0xB4, 0x20, 0x56, 0xB4, 0x35, 0x70, 0xC6, 0x35, 0x70, 0xC6, 0x00, 0x31, 0x85, 0x00, 
   0x31, 0x85, 0x37, 0x73, 0xC5, 0x37, 0x73, 0xC5, 0x29, 0x65, 0xB7, 0x29, 0x65, 0xB7, 0x45, 0x81, 
   0xD3, 0x45, 0x81, 0xD3, 0x39, 0x74, 0xCA, 0x39, 0x74, 0xCA, 0x35, 0x6E, 0xCB, 0x35, 0x6E, 0xCB, 
   0x11, 0x49, 0xA8, 0x11, 0x49, 0xA8, 0x32, 0x71, 0xCD, 0x32, 0x71, 0xCD, 0x2D, 0x6E, 0xCA, 0x2D, 
   0x6E, 0xCA, 0x25, 0x66, 0xC2, 0x25, 0x66, 0xC2, 0x23, 0x66, 0xC2, 0x23, 0x66, 0xC2, 0x26, 0x69, 
   0xC5, 0x26, 0x69, 0xC5, 0x20, 0x66, 0xC1, 0x20, 0x66, 0xC1, 0x21, 0x67, 0xC2, 0x21, 0x67, 0xC2, 
   0x2E, 0x75, 0xD0, 0x2E, 0x75, 0xD0, 0x4F, 0x9C, 0xDA, 0x4F, 0x9C, 0xDA, 0x3B, 0x7D, 0xD6, 0x3B, 
   0x7D, 0xD6, 0x60, 0xAB, 0xE9, 0x60, 0xAB, 0xE9, 0x2D, 0x6F, 0xC8, 0x2D, 0x6F, 0xC8, 0x3E, 0x80, 
   0xD9, 0x3E, 0x80, 0xD9, 0x68, 0xB5, 0xEE, 0x68, 0xB5, 0xEE, 0x50, 0x93, 0xE8, 0x50, 0x93, 0xE8, 
   0x50, 0x9D, 0xD5, 0x50, 0x9D, 0xD5, 0x24, 0x6A, 0xBD, 0x24, 0x6A, 0xBD, 0x45, 0x89, 0xD4, 0x45, 
   0x89, 0xD4, 0x64, 0xA8, 0xE9, 0x64, 0xA8, 0xE9, 0x79, 0xBA, 0xF1, 0x79, 0xBA, 0xF1, 0x82, 0xC4, 
   0xF5, 0x82, 0xC4, 0xF5, 0x68, 0xAA, 0xDA, 0x68, 0xAA, 0xDA, 0x75, 0xB8, 0xE9, 0x75, 0xB8, 0xE9, 
   0x68, 0xAD, 0xDF, 0x68, 0xAD, 0xDF, 0x42, 0x8E, 0xD6, 0x42, 0x8E, 0xD6, 0x38, 0x82, 0xD0, 0x38, 
   0x82, 0xD0, 0x30, 0x79, 0xCB, 0x30, 0x79, 0xCB, 0x3F, 0x87, 0xD5, 0x3F, 0x87, 0xD5, 0x55, 0xA0, 
   0xE5, 0x55, 0xA0, 0xE5, 0x52, 0x9A, 0xE0, 0x52, 0x9A, 0xE0, 0x5B, 0xA0, 0xF0, 0x5B, 0xA0, 0xF0, 
   0x1E, 0x5E, 0xBC, 0x1E, 0x5E, 0xBC, 0x17, 0x4F, 0xB4, 0x17, 0x4F, 0xB4, 0x1C, 0x54, 0xB9, 0x1C, 
   0x54, 0xB9, 0x1D, 0x58, 0xBC, 0x1D, 0x58, 0xBC, 0x1A, 0x55, 0xB8, 0x1A, 0x55, 0xB8, 0x17, 0x52, 
   0xB5, 0x17, 0x52, 0xB5, 0x19, 0x56, 0xB6, 0x19, 0x56, 0xB6, 0x1B, 0x58, 0xB8, 0x1B, 0x58, 0xB8, 
   0x1B, 0x59, 0xB7, 0x1B, 0x59, 0xB7, 0x1C, 0x5A, 0xB8, 0x1C, 0x5A, 0xB8, 0x27, 0x63, 0xC3, 0x27, 
   0x63, 0xC3, 0x1C, 0x55, 0xB8, 0x1C, 0x55, 0xB8, 0x1A, 0x51, 0xB4, 0x1A, 0x51, 0xB4, 0x12, 0x4A, 
   0xA9, 0x12, 0x4A, 0xA9, 0x0B, 0x47, 0xA1, 0x0B, 0x47, 0xA1, 0x15, 0x55, 0xAA, 0x15, 0x55, 0xAA, 
   0x41, 0x83, 0xD4, 0x41, 0x83, 0xD4, 0x44, 0x92, 0xD7, 0x44, 0x92, 0xD7, 0x33, 0x81, 0xC8, 0x33, 
   0x81, 0xC8, 0x30, 0x7B, 0xC5, 0x30, 0x7B, 0xC5, 0x33, 0x78, 0xC7, 0x33, 0x78, 0xC7, 0x40, 0x80, 
   0xD4, 0x40, 0x80, 0xD4, 0x22, 0x5C, 0xB5, 0x22, 0x5C, 0xB5, 0x29, 0x60, 0xBB, 0x29, 0x60, 0xBB, 
   0x21, 0x57, 0xB5, 0x21, 0x57, 0xB5, 0x37, 0x75, 0xC9, 0x37, 0x75, 0xC9, 0x27, 0x66, 0xB7, 0x27, 
   0x66, 0xB7, 0x30, 0x6F, 0xC0, 0x30, 0x6F, 0xC0, 0x29, 0x68, 0xB8, 0x29, 0x68, 0xB8, 0x34, 0x72, 
   0xC6, 0x34, 0x72, 0xC6, 0x21, 0x5D, 0xB6, 0x21, 0x5D, 0xB6, 0x4D, 0x88, 0xE5, 0x4D, 0x88, 0xE5, 
   0x0E, 0x48, 0xA8, 0x0E, 0x48, 0xA8, 0x26, 0x6A, 0xC3, 0x26, 0x6A, 0xC3, 0x2F, 0x73, 0xCC, 0x2F, 
   0x73, 0xCC, 0x2F, 0x73, 0xCC, 0x2F, 0x73, 0xCC, 0x23, 0x6A, 0xC2, 0x23, 0x6A, 0xC2, 0x25, 0x6C, 
   0xC4, 0x25, 0x6C, 0xC4, 0x35, 0x7D, 0xD5, 0x35, 0x7D, 0xD5, 0x3A, 0x84, 0xDC, 0x3A, 0x84, 0xDC, 
   0x31, 0x7B, 0xD3, 0x31, 0x7B, 0xD3, 0x50, 0xA2, 0xDC, 0x50, 0xA2, 0xDC, 0x39, 0x80, 0xD8, 0x39, 
   0x80, 0xD8, 0x66, 0xB6, 0xF3, 0x66, 0xB6, 0xF3, 0x29, 0x6D, 0xC6, 0x29, 0x6D, 0xC6, 0x4F, 0x94, 
   0xEB, 0x4F, 0x94, 0xEB, 0x68, 0xB5, 0xEE, 0x68, 0xB5, 0xEE, 0x4A, 0x8E, 0xE1, 0x4A, 0x8E, 0xE1, 
   0x58, 0xA6, 0xDB, 0x58, 0xA6, 0xDB, 0x2C, 0x6F, 0xBE, 0x2C, 0x6F, 0xBE, 0x49, 0x8D, 0xD6, 0x49, 
   0x8D, 0xD6, 0x5D, 0xA0, 0xDF, 0x5D, 0xA0, 0xDF, 0x69, 0xAD, 0xE2, 0x69, 0xAD, 0xE2, 0x6F, 0xB2, 
   0xE3, 0x6F, 0xB2, 0xE3, 0x52, 0x97, 0xC8, 0x52, 0x97, 0xC8, 0x6B, 0xB1, 0xE6, 0x6B, 0xB1, 0xE6, 
   0x61, 0xA9, 0xDF, 0x61, 0xA9, 0xDF, 0x42, 0x8E, 0xD6, 0x42, 0x8E, 0xD6, 0x38, 0x82, 0xD0, 0x38, 
   0x82, 0xD0, 0x30, 0x79, 0xCB, 0x30, 0x79, 0xCB, 0x3F, 0x87, 0xD5, 0x3F, 0x87, 0xD5, 0x55, 0xA0, 
   0xE5, 0x55, 0xA0, 0xE5, 0x52, 0x9A, 0xE0, 0x52, 0x9A, 0xE0, 0x5B, 0xA0, 0xF0, 0x5B, 0xA0, 0xF0, 
   0x1E, 0x5E, 0xBC, 0x1E, 0x5E, 0xBC, 0x17, 0x4F, 0xB4, 0x17, 0x4F, 0xB4, 0x1C, 0x54, 0xB9, 0x1C, 
   0x54, 0xB9, 0x1D, 0x58, 0xBC, 0x1D, 0x58, 0xBC, 0x1A, 0x55, 0xB8, 0x1A, 0x55, 0xB8, 0x17, 0x52, 
   0xB5, 0x17, 0x52, 0xB5, 0x19, 0x56, 0xB6, 0x19, 0x56, 0xB6, 0x1B, 0x58, 0xB8, 0x1B, 0x58, 0xB8, 
   0x1B, 0x59, 0xB7, 0x1B, 0x59, 0xB7, 0x1C, 0x5A, 0xB8, 0x1C, 0x5A, 0xB8, 0x27, 0x63, 0xC3, 0x27, 
   0x63, 0xC3, 0x1C, 0x55, 0xB8, 0x1C, 0x55, 0xB8, 0x1A, 0x51, 0xB4, 0x1A, 0x51, 0xB4, 0x12, 0x4A, 
   0xA9, 0x12, 0x4A, 0xA9, 0x0B, 0x47, 0xA1, 0x0B, 0x47, 0xA1, 0x15, 0x55, 0xAA, 0x15, 0x55, 0xAA, 
   0x41, 0x83, 0xD4, 0x41, 0x83, 0xD4, 0x44, 0x92, 0xD7, 0x44, 0x92, 0xD7, 0x33, 0x81, 0xC8, 0x33, 
   0x81, 0xC8, 0x30, 0x7B, 0xC5, 0x30, 0x7B, 0xC5, 0x33, 0x78, 0xC7, 0x33, 0x78, 0xC7, 0x40, 0x80, 
   0xD4, 0x40, 0x80, 0xD4, 0x22, 0x5C, 0xB5, 0x22, 0x5C, 0xB5, 0x29, 0x60, 0xBB, 0x29, 0x60, 0xBB, 
   0x21, 0x57, 0xB5, 0x21, 0x57, 0xB5, 0x37, 0x75, 0xC9, 0x37, 0x75, 0xC9, 0x27, 0x66, 0xB7, 0x27, 
   0x66, 0xB7, 0x30, 0x6F, 0xC0, 0x30, 0x6F, 0xC0, 0x29, 0x68, 0xB8, 0x29, 0x68, 0xB8, 0x34, 0x72, 
   0xC6, 0x34, 0x72, 0xC6, 0x21, 0x5D, 0xB6, 0x21, 0x5D, 0xB6, 0x4D, 0x88, 0xE5, 0x4D, 0x88, 0xE5, 
   0x0E, 0x48, 0xA8, 0x0E, 0x48, 0xA8, 0x26, 0x6A, 0xC3, 0x26, 0x6A, 0xC3, 0x2F, 0x73, 0xCC, 0x2F, 
   0x73, 0xCC, 0x2F, 0x73, 0xCC, 0x2F, 0x73, 0xCC, 0x23, 0x6A, 0xC2, 0x23, 0x6A, 0xC2, 0x25, 0x6C, 
   0xC4, 0x25, 0x6C, 0xC4, 0x35, 0x7D, 0xD5, 0x35, 0x7D, 0xD5, 0x3A, 0x84, 0xDC, 0x3A, 0x84, 0xDC, 
   0x31, 0x7B, 0xD3, 0x31, 0x7B, 0xD3, 0x50, 0xA2, 0xDC, 0x50, 0xA2, 0xDC, 0x39, 0x80, 0xD8, 0x39, 
   0x80, 0xD8, 0x66, 0xB6, 0xF3, 0x66, 0xB6, 0xF3, 0x29, 0x6D, 0xC6, 0x29, 0x6D, 0xC6, 0x4F, 0x94, 
   0xEB, 0x4F, 0x94, 0xEB, 0x68, 0xB5, 0xEE, 0x68, 0xB5, 0xEE, 0x4A, 0x8E, 0xE1, 0x4A, 0x8E, 0xE1, 
   0x58, 0xA6, 0xDB, 0x58, 0xA6, 0xDB, 0x2C, 0x6F, 0xBE, 0x2C, 0x6F, 0xBE, 0x49, 0x8D, 0xD6, 0x49, 
   0x8D, 0xD6, 0x5D, 0xA0, 0xDF, 0x5D, 0xA0, 0xDF, 0x69, 0xAD, 0xE2, 0x69, 0xAD, 0xE2, 0x6F, 0xB2, 
   0xE3, 0x6F, 0xB2, 0xE3, 0x52, 0x97, 0xC8, 0x52, 0x97, 0xC8, 0x6B, 0xB1, 0xE6, 0x6B, 0xB1, 0xE6, 
   0x61, 0xA9, 0xDF, 0x61, 0xA9, 0xDF, 0x41, 0x95, 0xD6, 0x41, 0x95, 0xD6, 0x34, 0x86, 0xCE, 0x34, 
   0x86, 0xCE, 0x2E, 0x7C, 0xC9, 0x2E, 0x7C, 0xC9, 0x3D, 0x8C, 0xD5, 0x3D, 0x8C, 0xD5, 0x50, 0xA0, 
   0xE1, 0x50, 0xA0, 0xE1, 0x3F, 0x8D, 0xCF, 0x3F, 0x8D, 0xCF, 0x3F, 0x87, 0xD5, 0x3F, 0x87, 0xD5, 
   0x00, 0x44, 0x9D, 0x00, 0x44, 0x9D, 0x05, 0x42, 0xA2, 0x05, 0x42, 0xA2, 0x05, 0x41, 0xA1, 0x05, 
   0x41, 0xA1, 0x06, 0x42, 0xA2, 0x06, 0x42, 0xA2, 0x0A, 0x47, 0xA5, 0x0A, 0x47, 0xA5, 0x0E, 0x48, 
   0xA7, 0x0E, 0x48, 0xA7, 0x0D, 0x48, 0xA5, 0x0D, 0x48, 0xA5, 0x10, 0x49, 0xA6, 0x10, 0x49, 0xA6, 
   0x14, 0x4D, 0xA8, 0x14, 0x4D, 0xA8, 0x1D, 0x5B, 0xB9, 0x1D, 0x5B, 0xB9, 0x28, 0x62, 0xC2, 0x28, 
   0x62, 0xC2, 0x14, 0x49, 0xAA, 0x14, 0x49, 0xAA, 0x1F, 0x52, 0xB3, 0x1F, 0x52, 0xB3, 0x13, 0x46, 
   0xA6, 0x13, 0x46, 0xA6, 0x18, 0x4F, 0xAA, 0x18, 0x4F, 0xAA, 0x16, 0x54, 0xA8, 0x16, 0x54, 0xA8, 
   0x40, 0x82, 0xD3, 0x40, 0x82, 0xD3, 0x4D, 0x9E, 0xE2, 0x4D, 0x9E, 0xE2, 0x36, 0x84, 0xCB, 0x36, 
   0x84, 0xCB, 0x38, 0x83, 0xCD, 0x38, 0x83, 0xCD, 0x32, 0x77, 0xC6, 0x32, 0x77, 0xC6, 0x40, 0x80, 
   0xD4, 0x40, 0x80, 0xD4, 0x35, 0x70, 0xC6, 0x35, 0x70, 0xC6, 0x2B, 0x62, 0xBD, 0x2B, 0x62, 0xBD, 
   0x27, 0x5C, 0xB7, 0x27, 0x5C, 0xB7, 0x38, 0x7A, 0xCB, 0x38, 0x7A, 0xCB, 0x28, 0x6A, 0xBB, 0x28, 
   0x6A, 0xBB, 0x48, 0x8B, 0xDA, 0x48, 0x8B, 0xDA, 0x1E, 0x61, 0xB0, 0x1E, 0x61, 0xB0, 0x14, 0x56, 
   0xA9, 0x14, 0x56, 0xA9, 0x24, 0x64, 0xBC, 0x24, 0x64, 0xBC, 0x32, 0x70, 0xCE, 0x32, 0x70, 0xCE, 
   0x1A, 0x57, 0xB9, 0x1A, 0x57, 0xB9, 0x1B, 0x62, 0xBA, 0x1B, 0x62, 0xBA, 0x1D, 0x64, 0xBC, 0x1D, 
   0x64, 0xBC, 0x24, 0x6C, 0xC4, 0x24, 0x6C, 0xC4, 0x1D, 0x67, 0xBF, 0x1D, 0x67, 0xBF, 0x16, 0x60, 
   0xB8, 0x16, 0x60, 0xB8, 0x28, 0x75, 0xCC, 0x28, 0x75, 0xCC, 0x32, 0x7F, 0xD6, 0x32, 0x7F, 0xD6, 
   0x1F, 0x6C, 0xC3, 0x1F, 0x6C, 0xC3, 0x4B, 0xA2, 0xDB, 0x4B, 0xA2, 0xDB, 0x3E, 0x8B, 0xE1, 0x3E, 
   0x8B, 0xE1, 0x65, 0xB9, 0xF3, 0x65, 0xB9, 0xF3, 0x2B, 0x74, 0xCA, 0x2B, 0x74, 0xCA, 0x4E, 0x95, 
   0xEC, 0x4E, 0x95, 0xEC, 0x62, 0xB4, 0xEB, 0x62, 0xB4, 0xEB, 0x39, 0x7F, 0xD2, 0x39, 0x7F, 0xD2, 
   0x64, 0xB4, 0xE9, 0x64, 0xB4, 0xE9, 0x36, 0x7A, 0xC3, 0x36, 0x7A, 0xC3, 0x58, 0x9B, 0xE0, 0x58, 
   0x9B, 0xE0, 0x5A, 0x9E, 0xD9, 0x5A, 0x9E, 0xD9, 0x59, 0x9D, 0xD2, 0x59, 0x9D, 0xD2, 0x5B, 0xA3, 
   0xD3, 0x5B, 0xA3, 0xD3, 0x48, 0x91, 0xC3, 0x48, 0x91, 0xC3, 0x69, 0xB4, 0xEC, 0x69, 0xB4, 0xEC, 
   0x54, 0xA3, 0xDC, 0x54, 0xA3, 0xDC, 0x41, 0x95, 0xD6, 0x41, 0x95, 0xD6, 0x34, 0x86, 0xCE, 0x34, 
   0x86, 0xCE, 0x2E, 0x7C, 0xC9, 0x2E, 0x7C, 0xC9, 0x3D, 0x8C, 0xD5, 0x3D, 0x8C, 0xD5, 0x50, 0xA0, 
   0xE1, 0x50, 0xA0, 0xE1, 0x3F, 0x8D, 0xCF, 0x3F, 0x8D, 0xCF, 0x3F, 0x87, 0xD5, 0x3F, 0x87, 0xD5, 
   0x00, 0x44, 0x9D, 0x00, 0x44, 0x9D, 0x05, 0x42, 0xA2, 0x05, 0x42, 0xA2, 0x05, 0x41, 0xA1, 0x05, 
   0x41, 0xA1, 0x06, 0x42, 0xA2, 0x06, 0x42, 0xA2, 0x0A, 0x47, 0xA5, 0x0A, 0x47, 0xA5, 0x0E, 0x48, 
   0xA7, 0x0E, 0x48, 0xA7, 0x0D, 0x48, 0xA5, 0x0D, 0x48, 0xA5, 0x10, 0x49, 0xA6, 0x10, 0x49, 0xA6, 
   0x14, 0x4D, 0xA8, 0x14, 0x4D, 0xA8, 0x1D, 0x5B, 0xB9, 0x1D, 0x5B, 0xB9, 0x28, 0x62, 0xC2, 0x28, 
   0x62, 0xC2, 0x14, 0x49, 0xAA, 0x14, 0x49, 0xAA, 0x1F, 0x52, 0xB3, 0x1F, 0x52, 0xB3, 0x13, 0x46, 
   0xA6, 0x13, 0x46, 0xA6, 0x18, 0x4F, 0xAA, 0x18, 0x4F, 0xAA, 0x16, 0x54, 0xA8, 0x16, 0x54, 0xA8, 
   0x40, 0x82, 0xD3, 0x40, 0x82, 0xD3, 0x4D, 0x9E, 0xE2, 0x4D, 0x9E, 0xE2, 0x36, 0x84, 0xCB, 0x36, 
   0x84, 0xCB, 0x38, 0x83, 0xCD, 0x38, 0x83, 0xCD, 0x32, 0x77, 0xC6, 0x32, 0x77, 0xC6, 0x40, 0x80, 
   0xD4, 0x40, 0x80, 0xD4, 0x35, 0x70, 0xC6, 0x35, 0x70, 0xC6, 0x2B, 0x62, 0xBD, 0x2B, 0x62, 0xBD, 
   0x27, 0x5C, 0xB7, 0x27, 0x5C, 0xB7, 0x38, 0x7A, 0xCB, 0x38, 0x7A, 0xCB, 0x28, 0x6A, 0xBB, 0x28, 
   0x6A, 0xBB, 0x48, 0x8B, 0xDA, 0x48, 0x8B, 0xDA, 0x1E, 0x61, 0xB0, 0x1E, 0x61, 0xB0, 0x14, 0x56, 
   0xA9, 0x14, 0x56, 0xA9, 0x24, 0x64, 0xBC, 0x24, 0x64, 0xBC, 0x32, 0x70, 0xCE, 0x32, 0x70, 0xCE, 
   0x1A, 0x57, 0xB9, 0x1A, 0x57, 0xB9, 0x1B, 0x62, 0xBA, 0x1B, 0x62, 0xBA, 0x1D, 0x64, 0xBC, 0x1D, 
   0x64, 0xBC, 0x24, 0x6C, 0xC4, 0x24, 0x6C, 0xC4, 0x1D, 0x67, 0xBF, 0x1D, 0x67, 0xBF, 0x16, 0x60, 
   0xB8, 0x16, 0x60, 0xB8, 0x28, 0x75, 0xCC, 0x28, 0x75, 0xCC, 0x32, 0x7F, 0xD6, 0x32, 0x7F, 0xD6, 
   0x1F, 0x6C, 0xC3, 0x1F, 0x6C, 0xC3, 0x4B, 0xA2, 0xDB, 0x4B, 0xA2, 0xDB, 0x3E, 0x8B, 0xE1, 0x3E, 
   0x8B, 0xE1, 0x65, 0xB9, 0xF3, 0x65, 0xB9, 0xF3, 0x2B, 0x74, 0xCA, 0x2B, 0x74, 0xCA, 0x4E, 0x95, 
   0xEC, 0x4E, 0x95, 0xEC, 0x62, 0xB4, 0xEB, 0x62, 0xB4, 0xEB, 0x39, 0x7F, 0xD2, 0x39, 0x7F, 0xD2, 
   0x64, 0xB4, 0xE9, 0x64, 0xB4, 0xE9, 0x36, 0x7A, 0xC3, 0x36, 0x7A, 0xC3, 0x58, 0x9B, 0xE0, 0x58, 
   0x9B, 0xE0, 0x5A, 0x9E, 0xD9, 0x5A, 0x9E, 0xD9, 0x59, 0x9D, 0xD2, 0x59, 0x9D, 0xD2, 0x5B, 0xA3, 
   0xD3, 0x5B, 0xA3, 0xD3, 0x48, 0x91, 0xC3, 0x48, 0x91, 0xC3, 0x69, 0xB4, 0xEC, 0x69, 0xB4, 0xEC, 
   0x54, 0xA3, 0xDC, 0x54, 0xA3, 0xDC, 0x33, 0x8C, 0xC9, 0x33, 0x8C, 0xC9, 0x26, 0x7D, 0xC0, 0x26, 
   0x7D, 0xC0, 0x25, 0x79, 0xC1, 0x25, 0x79, 0xC1, 0x3E, 0x91, 0xD5, 0x3E, 0x91, 0xD5, 0x55, 0xA8, 
   0xE6, 0x55, 0xA8, 0xE6, 0x46, 0x96, 0xD5, 0x46, 0x96, 0xD5, 0x49, 0x95, 0xE1, 0x49, 0x95, 0xE1, 
   0x10, 0x57, 0xAE, 0x10, 0x57, 0xAE, 0x08, 0x48, 0xA6, 0x08, 0x48, 0xA6, 0x03, 0x41, 0x9F, 0x03, 
   0x41, 0x9F, 0x04, 0x43, 0x9F, 0x04, 0x43, 0x9F, 0x10, 0x4B, 0xA8, 0x10, 0x4B, 0xA8, 0x15, 0x4E, 
   0xA9, 0x15, 0x4E, 0xA9, 0x13, 0x4A, 0xA5, 0x13, 0x4A, 0xA5, 0x16, 0x4B, 0xA5, 0x16, 0x4B, 0xA5, 
   0x1C, 0x51, 0xAB, 0x1C, 0x51, 0xAB, 0x04, 0x42, 0xA0, 0x04, 0x42, 0xA0, 0x10, 0x4A, 0xA9, 0x10, 
   0x4A, 0xA9, 0x00, 0x2E, 0x8F, 0x00, 0x2E, 0x8F, 0x17, 0x48, 0xAA, 0x17, 0x48, 0xAA, 0x10, 0x42, 
   0xA2, 0x10, 0x42, 0xA2, 0x1D, 0x55, 0xAE, 0x1D, 0x55, 0xAE, 0x0D, 0x4B, 0x9F, 0x0D, 0x4B, 0x9F, 
   0x32, 0x75, 0xC4, 0x32, 0x75, 0xC4, 0x48, 0x9B, 0xDF, 0x48, 0x9B, 0xDF, 0x2D, 0x7E, 0xC2, 0x2D, 
   0x7E, 0xC2, 0x32, 0x7D, 0xC7, 0x32, 0x7D, 0xC7, 0x20, 0x65, 0xB4, 0x20, 0x65, 0xB4, 0x31, 0x72, 
   0xC3, 0x31, 0x72, 0xC3, 0x37, 0x72, 0xC8, 0x37, 0x72, 0xC8, 0x23, 0x58, 0xB2, 0x23, 0x58, 0xB2, 
   0x1A, 0x4D, 0xA9, 0x1A, 0x4D, 0xA9, 0x1F, 0x64, 0xB4, 0x1F, 0x64, 0xB4, 0x1C, 0x61, 0xB0, 0x1C, 
   0x61, 0xB0, 0x2A, 0x6F, 0xBE, 0x2A, 0x6F, 0xBE, 0x2B, 0x70, 0xBF, 0x2B, 0x70, 0xBF, 0x2F, 0x73, 
   0xC6, 0x2F, 0x73, 0xC6, 0x30, 0x73, 0xCA, 0x30, 0x73, 0xCA, 0x35, 0x75, 0xD3, 0x35, 0x75, 0xD3, 
   0x0C, 0x4B, 0xAD, 0x0C, 0x4B, 0xAD, 0x38, 0x81, 0xD7, 0x38, 0x81, 0xD7, 0x20, 0x6B, 0xC1, 0x20, 
   0x6B, 0xC1, 0x2B, 0x76, 0xCC, 0x2B, 0x76, 0xCC, 0x36, 0x83, 0xD9, 0x36, 0x83, 0xD9, 0x26, 0x73, 
   0xC9, 0x26, 0x73, 0xC9, 0x25, 0x75, 0xCA, 0x25, 0x75, 0xCA, 0x2F, 0x7F, 0xD4, 0x2F, 0x7F, 0xD4, 
   0x24, 0x75, 0xCA, 0x24, 0x75, 0xCA, 0x3A, 0x93, 0xCC, 0x3A, 0x93, 0xCC, 0x38, 0x88, 0xDD, 0x38, 
   0x88, 0xDD, 0x57, 0xAE, 0xE7, 0x57, 0xAE, 0xE7, 0x28, 0x73, 0xC9, 0x28, 0x73, 0xC9, 0x43, 0x8C, 
   0xE0, 0x43, 0x8C, 0xE0, 0x5F, 0xB2, 0xE9, 0x5F, 0xB2, 0xE9, 0x2B, 0x74, 0xC4, 0x2B, 0x74, 0xC4, 
   0x71, 0xC4, 0xF8, 0x71, 0xC4, 0xF8, 0x22, 0x64, 0xAB, 0x22, 0x64, 0xAB, 0x53, 0x97, 0xD8, 0x53, 
   0x97, 0xD8, 0x5E, 0xA3, 0xDC, 0x5E, 0xA3, 0xDC, 0x5D, 0xA4, 0xD6, 0x5D, 0xA4, 0xD6, 0x66, 0xAF, 
   0xE1, 0x66, 0xAF, 0xE1, 0x58, 0xA4, 0xD8, 0x58, 0xA4, 0xD8, 0x6D, 0xBE, 0xF7, 0x6D, 0xBE, 0xF7, 
   0x46, 0x97, 0xD4, 0x46, 0x97, 0xD4, 0x33, 0x8C, 0xC9, 0x33, 0x8C, 0xC9, 0x26, 0x7D, 0xC0, 0x26, 
   0x7D, 0xC0, 0x25, 0x79, 0xC1, 0x25, 0x79, 0xC1, 0x3E, 0x91, 0xD5, 0x3E, 0x91, 0xD5, 0x55, 0xA8, 
   0xE6, 0x55, 0xA8, 0xE6, 0x46, 0x96, 0xD5, 0x46, 0x96, 0xD5, 0x49, 0x95, 0xE1, 0x49, 0x95, 0xE1, 
   0x10, 0x57, 0xAE, 0x10, 0x57, 0xAE, 0x08, 0x48, 0xA6, 0x08, 0x48, 0xA6, 0x03, 0x41, 0x9F, 0x03, 
   0x41, 0x9F, 0x04, 0x43, 0x9F, 0x04, 0x43, 0x9F, 0x10, 0x4B, 0xA8, 0x10, 0x4B, 0xA8, 0x15, 0x4E, 
   0xA9, 0x15, 0x4E, 0xA9, 0x13, 0x4A, 0xA5, 0x13, 0x4A, 0xA5, 0x16, 0x4B, 0xA5, 0x16, 0x4B, 0xA5, 
   0x1C, 0x51, 0xAB, 0x1C, 0x51, 0xAB, 0x04, 0x42, 0xA0, 0x04, 0x42, 0xA0, 0x10, 0x4A, 0xA9, 0x10, 
   0x4A, 0xA9, 0x00, 0x2E, 0x8F, 0x00, 0x2E, 0x8F, 0x17, 0x48, 0xAA, 0x17, 0x48, 0xAA, 0x10, 0x42, 
   0xA2, 0x10, 0x42, 0xA2, 0x1D, 0x55, 0xAE, 0x1D, 0x55, 0xAE, 0x0D, 0x4B, 0x9F, 0x0D, 0x4B, 0x9F, 
   0x32, 0x75, 0xC4, 0x32, 0x75, 0xC4, 0x48, 0x9B, 0xDF, 0x48, 0x9B, 0xDF, 0x2D, 0x7E, 0xC2, 0x2D, 
   0x7E, 0xC2, 0x32, 0x7D, 0xC7, 0x32, 0x7D, 0xC7, 0x20, 0x65, 0xB4, 0x20, 0x65, 0xB4, 0x31, 0x72, 
   0xC3, 0x31, 0x72, 0xC3, 0x37, 0x72, 0xC8, 0x37, 0x72, 0xC8, 0x23, 0x58, 0xB2, 0x23, 0x58, 0xB2, 
   0x1A, 0x4D, 0xA9, 0x1A, 0x4D, 0xA9, 0x1F, 0x64, 0xB4, 0x1F, 0x64, 0xB4, 0x1C, 0x61, 0xB0, 0x1C, 
   0x61, 0xB0, 0x2A, 0x6F, 0xBE, 0x2A, 0x6F, 0xBE, 0x2B, 0x70, 0xBF, 0x2B, 0x70, 0xBF, 0x2F, 0x73, 
   0xC6, 0x2F, 0x73, 0xC6, 0x30, 0x73, 0xCA, 0x30, 0x73, 0xCA, 0x35, 0x75, 0xD3, 0x35, 0x75, 0xD3, 
   0x0C, 0x4B, 0xAD, 0x0C, 0x4B, 0xAD, 0x38, 0x81, 0xD7, 0x38, 0x81, 0xD7, 0x20, 0x6B, 0xC1, 0x20, 
   0x6B, 0xC1, 0x2B, 0x76, 0xCC, 0x2B, 0x76, 0xCC, 0x36, 0x83, 0xD9, 0x36, 0x83, 0xD9, 0x26, 0x73, 
   0xC9, 0x26, 0x73, 0xC9, 0x25, 0x75, 0xCA, 0x25, 0x75, 0xCA, 0x2F, 0x7F, 0xD4, 0x2F, 0x7F, 0xD4, 
   0x24, 0x75, 0xCA, 0x24, 0x75, 0xCA, 0x3A, 0x93, 0xCC, 0x3A, 0x93, 0xCC, 0x38, 0x88, 0xDD, 0x38, 
   0x88, 0xDD, 0x57, 0xAE, 0xE7, 0x57, 0xAE, 0xE7, 0x28, 0x73, 0xC9, 0x28, 0x73, 0xC9, 0x43, 0x8C, 
   0xE0, 0x43, 0x8C, 0xE0, 0x5F, 0xB2, 0xE9, 0x5F, 0xB2, 0xE9, 0x2B, 0x74, 0xC4, 0x2B, 0x74, 0xC4, 
   0x71, 0xC4, 0xF8, 0x71, 0xC4, 0xF8, 0x22, 0x64, 0xAB, 0x22, 0x64, 0xAB, 0x53, 0x97, 0xD8, 0x53, 
   0x97, 0xD8, 0x5E, 0xA3, 0xDC, 0x5E, 0xA3, 0xDC, 0x5D, 0xA4, 0xD6, 0x5D, 0xA4, 0xD6, 0x66, 0xAF, 
   0xE1, 0x66, 0xAF, 0xE1, 0x58, 0xA4, 0xD8, 0x58, 0xA4, 0xD8, 0x6D, 0xBE, 0xF7, 0x6D, 0xBE, 0xF7, 
   0x46, 0x97, 0xD4, 0x46, 0x97, 0xD4, 0x4F, 0x9B, 0xD6, 0x4F, 0x9B, 0xD6, 0x42, 0x90, 0xD3, 0x42, 
   0x90, 0xD3, 0x22, 0x71, 0xBA, 0x22, 0x71, 0xBA, 0x3E, 0x93, 0xD7, 0x3E, 0x93, 0xD7, 0x45, 0x9C, 
   0xDC, 0x45, 0x9C, 0xDC, 0x3F, 0x90, 0xD3, 0x3F, 0x90, 0xD3, 0x39, 0x82, 0xD2, 0x39, 0x82, 0xD2, 
   0x00, 0x39, 0x97, 0x00, 0x39, 0x97, 0x06, 0x38, 0x9C, 0x06, 0x38, 0x9C, 0x00, 0x2B, 0x8F, 0x00, 
   0x2B, 0x8F, 0x00, 0x2B, 0x90, 0x00, 0x2B, 0x90, 0x00, 0x3C, 0xA0, 0x00, 0x3C, 0xA0, 0x06, 0x44, 
   0xAA, 0x06, 0x44, 0xAA, 0x00, 0x3D, 0xA3, 0x00, 0x3D, 0xA3, 0x00, 0x3A, 0xA3, 0x00, 0x3A, 0xA3, 
   0x09, 0x42, 0xAB, 0x09, 0x42, 0xAB, 0x03, 0x44, 0xA6, 0x03, 0x44, 0xA6, 0x14, 0x55, 0xB7, 0x14, 
   0x55, 0xB7, 0x13, 0x51, 0xB7, 0x13, 0x51, 0xB7, 0x0A, 0x48, 0xAE, 0x0A, 0x48, 0xAE, 0x03, 0x3E, 
   0xA5, 0x03, 0x3E, 0xA5, 0x0F, 0x4C, 0xAE, 0x0F, 0x4C, 0xAE, 0x03, 0x40, 0x9E, 0x03, 0x40, 0x9E, 
   0x22, 0x60, 0xBA, 0x22, 0x60, 0xBA, 0x45, 0x90, 0xD5, 0x45, 0x90, 0xD5, 0x35, 0x7C, 0xC6, 0x35, 
   0x7C, 0xC6, 0x40, 0x82, 0xD3, 0x40, 0x82, 0xD3, 0x29, 0x69, 0xBE, 0x29, 0x69, 0xBE, 0x20, 0x5A, 
   0xB3, 0x20, 0x5A, 0xB3, 0x2E, 0x66, 0xBF, 0x2E, 0x66, 0xBF, 0x1D, 0x53, 0xAA, 0x1D, 0x53, 0xAA, 
   0x30, 0x65, 0xBC, 0x30, 0x65, 0xBC, 0x24, 0x63, 0xB4, 0x24, 0x63, 0xB4, 0x14, 0x53, 0xA4, 0x14, 
   0x53, 0xA4, 0x3C, 0x7D, 0xCE, 0x3C, 0x7D, 0xCE, 0x2B, 0x6D, 0xBE, 0x2B, 0x6D, 0xBE, 0x1F, 0x64, 
   0xB4, 0x1F, 0x64, 0xB4, 0x3F, 0x86, 0xD6, 0x3F, 0x86, 0xD6, 0x35, 0x7C, 0xCC, 0x35, 0x7C, 0xCC, 
   0x20, 0x69, 0xB9, 0x20, 0x69, 0xB9, 0x23, 0x78, 0xC8, 0x23, 0x78, 0xC8, 0x2C, 0x7E, 0xD0, 0x2C, 
   0x7E, 0xD0, 0x3E, 0x8B, 0xE1, 0x3E, 0x8B, 0xE1, 0x2A, 0x74, 0xCC, 0x2A, 0x74, 0xCC, 0x2A, 0x70, 
   0xCD, 0x2A, 0x70, 0xCD, 0x14, 0x5C, 0xBA, 0x14, 0x5C, 0xBA, 0x19, 0x65, 0xC5, 0x19, 0x65, 0xC5, 
   0x14, 0x61, 0xC2, 0x14, 0x61, 0xC2, 0x45, 0x8F, 0xC7, 0x45, 0x8F, 0xC7, 0x44, 0x86, 0xD9, 0x44, 
   0x86, 0xD9, 0x70, 0xC0, 0xF5, 0x70, 0xC0, 0xF5, 0x2E, 0x79, 0xC8, 0x2E, 0x79, 0xC8, 0x40, 0x8C, 
   0xDE, 0x40, 0x8C, 0xDE, 0x6B, 0xBE, 0xF6, 0x6B, 0xBE, 0xF6, 0x3C, 0x83, 0xDA, 0x3C, 0x83, 0xDA, 
   0x53, 0xA0, 0xDE, 0x53, 0xA0, 0xDE, 0x26, 0x6B, 0xB0, 0x26, 0x6B, 0xB0, 0x63, 0xA9, 0xEC, 0x63, 
   0xA9, 0xEC, 0x6E, 0xB7, 0xF3, 0x6E, 0xB7, 0xF3, 0x50, 0x9B, 0xD3, 0x50, 0x9B, 0xD3, 0x62, 0xAD, 
   0xE5, 0x62, 0xAD, 0xE5, 0x69, 0xB4, 0xEC, 0x69, 0xB4, 0xEC, 0x79, 0xC6, 0xFF, 0x79, 0xC6, 0xFF, 
   0x4E, 0x9A, 0xD5, 0x4E, 0x9A, 0xD5, 0x4F, 0x9B, 0xD6, 0x4F, 0x9B, 0xD6, 0x42, 0x90, 0xD3, 0x42, 
   0x90, 0xD3, 0x22, 0x71, 0xBA, 0x22, 0x71, 0xBA, 0x3E, 0x93, 0xD7, 0x3E, 0x93, 0xD7, 0x45, 0x9C, 
   0xDC, 0x45, 0x9C, 0xDC, 0x3F, 0x90, 0xD3, 0x3F, 0x90, 0xD3, 0x39, 0x82, 0xD2, 0x39, 0x82, 0xD2, 
   0x00, 0x39, 0x97, 0x00, 0x39, 0x97, 0x06, 0x38, 0x9C, 0x06, 0x38, 0x9C, 0x00, 0x2B, 0x8F, 0x00, 
   0x2B, 0x8F, 0x00, 0x2B, 0x90, 0x00, 0x2B, 0x90, 0x00, 0x3C, 0xA0, 0x00, 0x3C, 0xA0, 0x06, 0x44, 
   0xAA, 0x06, 0x44, 0xAA, 0x00, 0x3D, 0xA3, 0x00, 0x3D, 0xA3, 0x00, 0x3A, 0xA3, 0x00, 0x3A, 0xA3, 
   0x09, 0x42, 0xAB, 0x09, 0x42, 0xAB, 0x03, 0x44, 0xA6, 0x03, 0x44, 0xA6, 0x14, 0x55, 0xB7, 0x14, 
   0x55, 0xB7, 0x13, 0x51, 0xB7, 0x13, 0x51, 0xB7, 0x0A, 0x48, 0xAE, 0x0A, 0x48, 0xAE, 0x03, 0x3E, 
   0xA5, 0x03, 0x3E, 0xA5, 0x0F, 0x4C, 0xAE, 0x0F, 0x4C, 0xAE, 0x03, 0x40, 0x9E, 0x03, 0x40, 0x9E, 
   0x22, 0x60, 0xBA, 0x22, 0x60, 0xBA, 0x45, 0x90, 0xD5, 0x45, 0x90, 0xD5, 0x35, 0x7C, 0xC6, 0x35, 
   0x7C, 0xC6, 0x40, 0x82, 0xD3, 0x40, 0x82, 0xD3, 0x29, 0x69, 0xBE, 0x29, 0x69, 0xBE, 0x20, 0x5A, 
   0xB3, 0x20, 0x5A, 0xB3, 0x2E, 0x66, 0xBF, 0x2E, 0x66, 0xBF, 0x1D, 0x53, 0xAA, 0x1D, 0x53, 0xAA, 
   0x30, 0x65, 0xBC, 0x30, 0x65, 0xBC, 0x24, 0x63, 0xB4, 0x24, 0x63, 0xB4, 0x14, 0x53, 0xA4, 0x14, 
   0x53, 0xA4, 0x3C, 0x7D, 0xCE, 0x3C, 0x7D, 0xCE, 0x2B, 0x6D, 0xBE, 0x2B, 0x6D, 0xBE, 0x1F, 0x64, 
   0xB4, 0x1F, 0x64, 0xB4, 0x3F, 0x86, 0xD6, 0x3F, 0x86, 0xD6, 0x35, 0x7C, 0xCC, 0x35, 0x7C, 0xCC, 
   0x20, 0x69, 0xB9, 0x20, 0x69, 0xB9, 0x23, 0x78, 0xC8, 0x23, 0x78, 0xC8, 0x2C, 0x7E, 0xD0, 0x2C, 
   0x7E, 0xD0, 0x3E, 0x8B, 0xE1, 0x3E, 0x8B, 0xE1, 0x2A, 0x74, 0xCC, 0x2A, 0x74, 0xCC, 0x2A, 0x70, 
   0xCD, 0x2A, 0x70, 0xCD, 0x14, 0x5C, 0xBA, 0x14, 0x5C, 0xBA, 0x19, 0x65, 0xC5, 0x19, 0x65, 0xC5, 
   0x14, 0x61, 0xC2, 0x14, 0x61, 0xC2, 0x45, 0x8F, 0xC7, 0x45, 0x8F, 0xC7, 0x44, 0x86, 0xD9, 0x44, 
   0x86, 0xD9, 0x70, 0xC0, 0xF5, 0x70, 0xC0, 0xF5, 0x2E, 0x79, 0xC8, 0x2E, 0x79, 0xC8, 0x40, 0x8C, 
   0xDE, 0x40, 0x8C, 0xDE, 0x6B, 0xBE, 0xF6, 0x6B, 0xBE, 0xF6, 0x3C, 0x83, 0xDA, 0x3C, 0x83, 0xDA, 
   0x53, 0xA0, 0xDE, 0x53, 0xA0, 0xDE, 0x26, 0x6B, 0xB0, 0x26, 0x6B, 0xB0, 0x63, 0xA9, 0xEC, 0x63, 
   0xA9, 0xEC, 0x6E, 0xB7, 0xF3, 0x6E, 0xB7, 0xF3, 0x50, 0x9B, 0xD3, 0x50, 0x9B, 0xD3, 0x62, 0xAD, 
   0xE5, 0x62, 0xAD, 0xE5, 0x69, 0xB4, 0xEC, 0x69, 0xB4, 0xEC, 0x79, 0xC6, 0xFF, 0x79, 0xC6, 0xFF, 
   0x4E, 0x9A, 0xD5, 0x4E, 0x9A, 0xD5, 0x47, 0x94, 0xD3, 0x47, 0x94, 0xD3, 0x3E, 0x8B, 0xD0, 0x3E, 
   0x8B, 0xD0, 0x37, 0x85, 0xD1, 0x37, 0x85, 0xD1, 0x45, 0x97, 0xDE, 0x45, 0x97, 0xDE, 0x49, 0x9E, 
   0xDC, 0x49, 0x9E, 0xDC, 0x3F, 0x91, 0xD2, 0x3F, 0x91, 0xD2, 0x44, 0x8F, 0xDB, 0x44, 0x8F, 0xDB, 
   0x14, 0x58, 0xB1, 0x14, 0x58, 0xB1, 0x2A, 0x5F, 0xC0, 0x2A, 0x5F, 0xC0, 0x1E, 0x58, 0xB8, 0x1E, 
   0x58, 0xB8, 0x1A, 0x57, 0xB7, 0x1A, 0x57, 0xB7, 0x20, 0x61, 0xC3, 0x20, 0x61, 0xC3, 0x22, 0x66, 
   0xC7, 0x22, 0x66, 0xC7, 0x1F, 0x60, 0xC3, 0x1F, 0x60, 0xC3, 0x1D, 0x5B, 0xBF, 0x1D, 0x5B, 0xBF, 
   0x22, 0x5D, 0xC4, 0x22, 0x5D, 0xC4, 0x1E, 0x63, 0xC0, 0x1E, 0x63, 0xC0, 0x20, 0x64, 0xC3, 0x20, 
   0x64, 0xC3, 0x16, 0x57, 0xBA, 0x16, 0x57, 0xBA, 0x13, 0x54, 0xB7, 0x13, 0x54, 0xB7, 0x10, 0x4F, 
   0xB1, 0x10, 0x4F, 0xB1, 0x1D, 0x5D, 0xBC, 0x1D, 0x5D, 0xBC, 0x20, 0x5F, 0xBB, 0x20, 0x5F, 0xBB, 
   0x51, 0x91, 0xE9, 0x51, 0x91, 0xE9, 0x43, 0x90, 0xD5, 0x43, 0x90, 0xD5, 0x3E, 0x87, 0xD1, 0x3E, 
   0x87, 0xD1, 0x47, 0x8C, 0xDB, 0x47, 0x8C, 0xDB, 0x2E, 0x6F, 0xC4, 0x2E, 0x6F, 0xC4, 0x24, 0x60, 
   0xB9, 0x24, 0x60, 0xB9, 0x1E, 0x58, 0xB1, 0x1E, 0x58, 0xB1, 0x1C, 0x55, 0xAB, 0x1C, 0x55, 0xAB, 
   0x27, 0x60, 0xB5, 0x27, 0x60, 0xB5, 0x19, 0x55, 0xA7, 0x19, 0x55, 0xA7, 0x11, 0x50, 0xA1, 0x11, 
   0x50, 0xA1, 0x38, 0x77, 0xC8, 0x38, 0x77, 0xC8, 0x2F, 0x70, 0xC1, 0x2F, 0x70, 0xC1, 0x1C, 0x5E, 
   0xAF, 0x1C, 0x5E, 0xAF, 0x3D, 0x82, 0xD2, 0x3D, 0x82, 0xD2, 0x2A, 0x6F, 0xBF, 0x2A, 0x6F, 0xBF, 
   0x18, 0x5F, 0xAF, 0x18, 0x5F, 0xAF, 0x21, 0x76, 0xC6, 0x21, 0x76, 0xC6, 0x21, 0x73, 0xC5, 0x21, 
   0x73, 0xC5, 0x2C, 0x79, 0xCF, 0x2C, 0x79, 0xCF, 0x25, 0x6D, 0xC5, 0x25, 0x6D, 0xC5, 0x2E, 0x74, 
   0xD1, 0x2E, 0x74, 0xD1, 0x1C, 0x64, 0xC2, 0x1C, 0x64, 0xC2, 0x11, 0x5D, 0xBD, 0x11, 0x5D, 0xBD, 
   0x00, 0x4B, 0xAC, 0x00, 0x4B, 0xAC, 0x5F, 0xA7, 0xE3, 0x5F, 0xA7, 0xE3, 0x4A, 0x8D, 0xE2, 0x4A, 
   0x8D, 0xE2, 0x6C, 0xBE, 0xF5, 0x6C, 0xBE, 0xF5, 0x2E, 0x79, 0xC8, 0x2E, 0x79, 0xC8, 0x3D, 0x8A, 
   0xD9, 0x3D, 0x8A, 0xD9, 0x5E, 0xB1, 0xE8, 0x5E, 0xB1, 0xE8, 0x36, 0x7E, 0xD2, 0x36, 0x7E, 0xD2, 
   0x55, 0xA4, 0xDD, 0x55, 0xA4, 0xDD, 0x2B, 0x71, 0xB7, 0x2B, 0x71, 0xB7, 0x53, 0x9A, 0xDD, 0x53, 
   0x9A, 0xDD, 0x63, 0xAC, 0xEA, 0x63, 0xAC, 0xEA, 0x63, 0xAD, 0xE7, 0x63, 0xAD, 0xE7, 0x72, 0xBD, 
   0xF5, 0x72, 0xBD, 0xF5, 0x5E, 0xA9, 0xE1, 0x5E, 0xA9, 0xE1, 0x6C, 0xB6, 0xF0, 0x6C, 0xB6, 0xF0, 
   0x63, 0xAD, 0xE7, 0x63, 0xAD, 0xE7, 0x47, 0x94, 0xD3, 0x47, 0x94, 0xD3, 0x3E, 0x8B, 0xD0, 0x3E, 
   0x8B, 0xD0, 0x37, 0x85, 0xD1, 0x37, 0x85, 0xD1, 0x45, 0x97, 0xDE, 0x45, 0x97, 0xDE, 0x49, 0x9E, 
   0xDC, 0x49, 0x9E, 0xDC, 0x3F, 0x91, 0xD2, 0x3F, 0x91, 0xD2, 0x44, 0x8F, 0xDB, 0x44, 0x8F, 0xDB, 
   0x14, 0x58, 0xB1, 0x14, 0x58, 0xB1, 0x2A, 0x5F, 0xC0, 0x2A, 0x5F, 0xC0, 0x1E, 0x58, 0xB8, 0x1E, 
   0x58, 0xB8, 0x1A, 0x57, 0xB7, 0x1A, 0x57, 0xB7, 0x20, 0x61, 0xC3, 0x20, 0x61, 0xC3, 0x22, 0x66, 
   0xC7, 0x22, 0x66, 0xC7, 0x1F, 0x60, 0xC3, 0x1F, 0x60, 0xC3, 0x1D, 0x5B, 0xBF, 0x1D, 0x5B, 0xBF, 
   0x22, 0x5D, 0xC4, 0x22, 0x5D, 0xC4, 0x1E, 0x63, 0xC0, 0x1E, 0x63, 0xC0, 0x20, 0x64, 0xC3, 0x20, 
   0x64, 0xC3, 0x16, 0x57, 0xBA, 0x16, 0x57, 0xBA, 0x13, 0x54, 0xB7, 0x13, 0x54, 0xB7, 0x10, 0x4F, 
   0xB1, 0x10, 0x4F, 0xB1, 0x1D, 0x5D, 0xBC, 0x1D, 0x5D, 0xBC, 0x20, 0x5F, 0xBB, 0x20, 0x5F, 0xBB, 
   0x51, 0x91, 0xE9, 0x51, 0x91, 0xE9, 0x43, 0x90, 0xD5, 0x43, 0x90, 0xD5, 0x3E, 0x87, 0xD1, 0x3E, 
   0x87, 0xD1, 0x47, 0x8C, 0xDB, 0x47, 0x8C, 0xDB, 0x2E, 0x6F, 0xC4, 0x2E, 0x6F, 0xC4, 0x24, 0x60, 
   0xB9, 0x24, 0x60, 0xB9, 0x1E, 0x58, 0xB1, 0x1E, 0x58, 0xB1, 0x1C, 0x55, 0xAB, 0x1C, 0x55, 0xAB, 
   0x27, 0x60, 0xB5, 0x27, 0x60, 0xB5, 0x19, 0x55, 0xA7, 0x19, 0x55, 0xA7, 0x11, 0x50, 0xA1, 0x11, 
   0x50, 0xA1, 0x38, 0x77, 0xC8, 0x38, 0x77, 0xC8, 0x2F, 0x70, 0xC1, 0x2F, 0x70, 0xC1, 0x1C, 0x5E, 
   0xAF, 0x1C, 0x5E, 0xAF, 0x3D, 0x82, 0xD2, 0x3D, 0x82, 0xD2, 0x2A, 0x6F, 0xBF, 0x2A, 0x6F, 0xBF, 
   0x18, 0x5F, 0xAF, 0x18, 0x5F, 0xAF, 0x21, 0x76, 0xC6, 0x21, 0x76, 0xC6, 0x21, 0x73, 0xC5, 0x21, 
   0x73, 0xC5, 0x2C, 0x79, 0xCF, 0x2C, 0x79, 0xCF, 0x25, 0x6D, 0xC5, 0x25, 0x6D, 0xC5, 0x2E, 0x74, 
   0xD1, 0x2E, 0x74, 0xD1, 0x1C, 0x64, 0xC2, 0x1C, 0x64, 0xC2, 0x11, 0x5D, 0xBD, 0x11, 0x5D, 0xBD, 
   0x00, 0x4B, 0xAC, 0x00, 0x4B, 0xAC, 0x5F, 0xA7, 0xE3, 0x5F, 0xA7, 0xE3, 0x4A, 0x8D, 0xE2, 0x4A, 
   0x8D, 0xE2, 0x6C, 0xBE, 0xF5, 0x6C, 0xBE, 0xF5, 0x2E, 0x79, 0xC8, 0x2E, 0x79, 0xC8, 0x3D, 0x8A, 
   0xD9, 0x3D, 0x8A, 0xD9, 0x5E, 0xB1, 0xE8, 0x5E, 0xB1, 0xE8, 0x36, 0x7E, 0xD2, 0x36, 0x7E, 0xD2, 
   0x55, 0xA4, 0xDD, 0x55, 0xA4, 0xDD, 0x2B, 0x71, 0xB7, 0x2B, 0x71, 0xB7, 0x53, 0x9A, 0xDD, 0x53, 
   0x9A, 0xDD, 0x63, 0xAC, 0xEA, 0x63, 0xAC, 0xEA, 0x63, 0xAD, 0xE7, 0x63, 0xAD, 0xE7, 0x72, 0xBD, 
   0xF5, 0x72, 0xBD, 0xF5, 0x5E, 0xA9, 0xE1, 0x5E, 0xA9, 0xE1, 0x6C, 0xB6, 0xF0, 0x6C, 0xB6, 0xF0, 
   0x63, 0xAD, 0xE7, 0x63, 0xAD, 0xE7, 0x50, 0x9B, 0xDF, 0x50, 0x9B, 0xDF, 0x2F, 0x7A, 0xC4, 0x2F, 
   0x7A, 0xC4, 0x33, 0x81, 0xCE, 0x33, 0x81, 0xCE, 0x34, 0x86, 0xCD, 0x34, 0x86, 0xCD, 0x50, 0xA5, 
   0xE3, 0x50, 0xA5, 0xE3, 0x4B, 0x9E, 0xDB, 0x4B, 0x9E, 0xDB, 0x49, 0x95, 0xDD, 0x49, 0x95, 0xDD, 
   0x18, 0x5E, 0xB2, 0x18, 0x5E, 0xB2, 0x11, 0x4E, 0xAB, 0x11, 0x4E, 0xAB, 0x10, 0x4F, 0xAB, 0x10, 
   0x4F, 0xAB, 0x0E, 0x51, 0xAD, 0x0E, 0x51, 0xAD, 0x0F, 0x55, 0xB2, 0x0F, 0x55, 0xB2, 0x14, 0x5A, 
   0xB7, 0x14, 0x5A, 0xB7, 0x16, 0x5A, 0xB9, 0x16, 0x5A, 0xB9, 0x14, 0x56, 0xB5, 0x14, 0x56, 0xB5, 
   0x12, 0x51, 0xB3, 0x12, 0x51, 0xB3, 0x0F, 0x56, 0xB1, 0x0F, 0x56, 0xB1, 0x11, 0x57, 0xB4, 0x11, 
   0x57, 0xB4, 0x0F, 0x55, 0xB3, 0x0F, 0x55, 0xB3, 0x1D, 0x61, 0xC0, 0x1D, 0x61, 0xC0, 0x1E, 0x60, 
   0xBF, 0x1E, 0x60, 0xBF, 0x21, 0x64, 0xC0, 0x21, 0x64, 0xC0, 0x1C, 0x5F, 0xB6, 0x1C, 0x5F, 0xB6, 
   0x4F, 0x92, 0xE7, 0x4F, 0x92, 0xE7, 0x34, 0x82, 0xC7, 0x34, 0x82, 0xC7, 0x39, 0x85, 0xCD, 0x39, 
   0x85, 0xCD, 0x40, 0x88, 0xD6, 0x40, 0x88, 0xD6, 0x2D, 0x71, 0xC4, 0x2D, 0x71, 0xC4, 0x2E, 0x6F, 
   0xC4, 0x2E, 0x6F, 0xC4, 0x13, 0x53, 0xA8, 0x13, 0x53, 0xA8, 0x2A, 0x67, 0xBD, 0x2A, 0x67, 0xBD, 
   0x26, 0x64, 0xB8, 0x26, 0x64, 0xB8, 0x25, 0x61, 0xB3, 0x25, 0x61, 0xB3, 0x28, 0x64, 0xB6, 0x28, 
   0x64, 0xB6, 0x3E, 0x7D, 0xCE, 0x3E, 0x7D, 0xCE, 0x40, 0x7F, 0xD0, 0x40, 0x7F, 0xD0, 0x21, 0x62, 
   0xB3, 0x21, 0x62, 0xB3, 0x48, 0x89, 0xDA, 0x48, 0x89, 0xDA, 0x34, 0x75, 0xC6, 0x34, 0x75, 0xC6, 
   0x2C, 0x6E, 0xBF, 0x2C, 0x6E, 0xBF, 0x31, 0x83, 0xD5, 0x31, 0x83, 0xD5, 0x2A, 0x7A, 0xCF, 0x2A, 
   0x7A, 0xCF, 0x2B, 0x76, 0xCC, 0x2B, 0x76, 0xCC, 0x20, 0x68, 0xC0, 0x20, 0x68, 0xC0, 0x28, 0x6E, 
   0xCB, 0x28, 0x6E, 0xCB, 0x22, 0x6A, 0xC8, 0x22, 0x6A, 0xC8, 0x1F, 0x6C, 0xC9, 0x1F, 0x6C, 0xC9, 
   0x14, 0x61, 0xC1, 0x14, 0x61, 0xC1, 0x60, 0xA8, 0xE8, 0x60, 0xA8, 0xE8, 0x40, 0x81, 0xDD, 0x40, 
   0x81, 0xDD, 0x61, 0xB2, 0xEB, 0x61, 0xB2, 0xEB, 0x2C, 0x78, 0xCA, 0x2C, 0x78, 0xCA, 0x42, 0x8F, 
   0xDE, 0x42, 0x8F, 0xDE, 0x58, 0xAF, 0xE1, 0x58, 0xAF, 0xE1, 0x3D, 0x88, 0xD7, 0x3D, 0x88, 0xD7, 
   0x5D, 0xB0, 0xE4, 0x5D, 0xB0, 0xE4, 0x31, 0x77, 0xBD, 0x31, 0x77, 0xBD, 0x4F, 0x96, 0xDA, 0x4F, 
   0x96, 0xDA, 0x5C, 0xA5, 0xE3, 0x5C, 0xA5, 0xE3, 0x63, 0xAD, 0xE7, 0x63, 0xAD, 0xE7, 0x70, 0xBC, 
   0xF1, 0x70, 0xBC, 0xF1, 0x59, 0xA5, 0xDA, 0x59, 0xA5, 0xDA, 0x65, 0xB0, 0xE8, 0x65, 0xB0, 0xE8, 
   0x73, 0xBD, 0xF7, 0x73, 0xBD, 0xF7, 0x50, 0x9B, 0xDF, 0x50, 0x9B, 0xDF, 0x2F, 0x7A, 0xC4, 0x2F, 
   0x7A, 0xC4, 0x33, 0x81, 0xCE, 0x33, 0x81, 0xCE, 0x34, 0x86, 0xCD, 0x34, 0x86, 0xCD, 0x50, 0xA5, 
   0xE3, 0x50, 0xA5, 0xE3, 0x4B, 0x9E, 0xDB, 0x4B, 0x9E, 0xDB, 0x49, 0x95, 0xDD, 0x49, 0x95, 0xDD, 
   0x18, 0x5E, 0xB2, 0x18, 0x5E, 0xB2, 0x11, 0x4E, 0xAB, 0x11, 0x4E, 0xAB, 0x10, 0x4F, 0xAB, 0x10, 
   0x4F, 0xAB, 0x0E, 0x51, 0xAD, 0x0E, 0x51, 0xAD, 0x0F, 0x55, 0xB2, 0x0F, 0x55, 0xB2, 0x14, 0x5A, 
   0xB7, 0x14, 0x5A, 0xB7, 0x16, 0x5A, 0xB9, 0x16, 0x5A, 0xB9, 0x14, 0x56, 0xB5, 0x14, 0x56, 0xB5, 
   0x12, 0x51, 0xB3, 0x12, 0x51, 0xB3, 0x0F, 0x56, 0xB1, 0x0F, 0x56, 0xB1, 0x11, 0x57, 0xB4, 0x11, 
   0x57, 0xB4, 0x0F, 0x55, 0xB3, 0x0F, 0x55, 0xB3, 0x1D, 0x61, 0xC0, 0x1D, 0x61, 0xC0, 0x1E, 0x60, 
   0xBF, 0x1E, 0x60, 0xBF, 0x21, 0x64, 0xC0, 0x21, 0x64, 0xC0, 0x1C, 0x5F, 0xB6, 0x1C, 0x5F, 0xB6, 
   0x4F, 0x92, 0xE7, 0x4F, 0x92, 0xE7, 0x34, 0x82, 0xC7, 0x34, 0x82, 0xC7, 0x39, 0x85, 0xCD, 0x39, 
   0x85, 0xCD, 0x40, 0x88, 0xD6, 0x40, 0x88, 0xD6, 0x2D, 0x71, 0xC4, 0x2D, 0x71, 0xC4, 0x2E, 0x6F, 
   0xC4, 0x2E, 0x6F, 0xC4, 0x13, 0x53, 0xA8, 0x13, 0x53, 0xA8, 0x2A, 0x67, 0xBD, 0x2A, 0x67, 0xBD, 
   0x26, 0x64, 0xB8, 0x26, 0x64, 0xB8, 0x25, 0x61, 0xB3, 0x25, 0x61, 0xB3, 0x28, 0x64, 0xB6, 0x28, 
   0x64, 0xB6, 0x3E, 0x7D, 0xCE, 0x3E, 0x7D, 0xCE, 0x40, 0x7F, 0xD0, 0x40, 0x7F, 0xD0, 0x21, 0x62, 
   0xB3, 0x21, 0x62, 0xB3, 0x48, 0x89, 0xDA, 0x48, 0x89, 0xDA, 0x34, 0x75, 0xC6, 0x34, 0x75, 0xC6, 
   0x2C, 0x6E, 0xBF, 0x2C, 0x6E, 0xBF, 0x31, 0x83, 0xD5, 0x31, 0x83, 0xD5, 0x2A, 0x7A, 0xCF, 0x2A, 
   0x7A, 0xCF, 0x2B, 0x76, 0xCC, 0x2B, 0x76, 0xCC, 0x20, 0x68, 0xC0, 0x20, 0x68, 0xC0, 0x28, 0x6E, 
   0xCB, 0x28, 0x6E, 0xCB, 0x22, 0x6A, 0xC8, 0x22, 0x6A, 0xC8, 0x1F, 0x6C, 0xC9, 0x1F, 0x6C, 0xC9, 
   0x14, 0x61, 0xC1, 0x14, 0x61, 0xC1, 0x60, 0xA8, 0xE8, 0x60, 0xA8, 0xE8, 0x40, 0x81, 0xDD, 0x40, 
   0x81, 0xDD, 0x61, 0xB2, 0xEB, 0x61, 0xB2, 0xEB, 0x2C, 0x78, 0xCA, 0x2C, 0x78, 0xCA, 0x42, 0x8F, 
   0xDE, 0x42, 0x8F, 0xDE, 0x58, 0xAF, 0xE1, 0x58, 0xAF, 0xE1, 0x3D, 0x88, 0xD7, 0x3D, 0x88, 0xD7, 
   0x5D, 0xB0, 0xE4, 0x5D, 0xB0, 0xE4, 0x31, 0x77, 0xBD, 0x31, 0x77, 0xBD, 0x4F, 0x96, 0xDA, 0x4F, 
   0x96, 0xDA, 0x5C, 0xA5, 0xE3, 0x5C, 0xA5, 0xE3, 0x63, 0xAD, 0xE7, 0x63, 0xAD, 0xE7, 0x70, 0xBC, 
   0xF1, 0x70, 0xBC, 0xF1, 0x59, 0xA5, 0xDA, 0x59, 0xA5, 0xDA, 0x65, 0xB0, 0xE8, 0x65, 0xB0, 0xE8, 
   0x73, 0xBD, 0xF7, 0x73, 0xBD, 0xF7, 0x56, 0xA2, 0xEA, 0x56, 0xA2, 0xEA, 0x25, 0x70, 0xBE, 0x25, 
   0x70, 0xBE, 0x33, 0x7E, 0xCD, 0x33, 0x7E, 0xCD, 0x2A, 0x79, 0xC2, 0x2A, 0x79, 0xC2, 0x53, 0xA6, 
   0xE4, 0x53, 0xA6, 0xE4, 0x50, 0xA2, 0xDC, 0x50, 0xA2, 0xDC, 0x45, 0x93, 0xD8, 0x45, 0x93, 0xD8, 
   0x15, 0x5E, 0xAE, 0x15, 0x5E, 0xAE, 0x17, 0x5A, 0xB1, 0x17, 0x5A, 0xB1, 0x1B, 0x60, 0xB7, 0x1B, 
   0x60, 0xB7, 0x1A, 0x63, 0xB9, 0x1A, 0x63, 0xB9, 0x17, 0x61, 0xB9, 0x17, 0x61, 0xB9, 0x19, 0x62, 
   0xBD, 0x19, 0x62, 0xBD, 0x20, 0x67, 0xC2, 0x20, 0x67, 0xC2, 0x1C, 0x61, 0xBE, 0x1C, 0x61, 0xBE, 
   0x16, 0x56, 0xB4, 0x16, 0x56, 0xB4, 0x00, 0x45, 0x9D, 0x00, 0x45, 0x9D, 0x07, 0x50, 0xAB, 0x07, 
   0x50, 0xAB, 0x10, 0x56, 0xB3, 0x10, 0x56, 0xB3, 0x1F, 0x65, 0xC2, 0x1F, 0x65, 0xC2, 0x1F, 0x64, 
   0xC1, 0x1F, 0x64, 0xC1, 0x20, 0x64, 0xBD, 0x20, 0x64, 0xBD, 0x0E, 0x54, 0xA8, 0x0E, 0x54, 0xA8, 
   0x34, 0x7A, 0xCD, 0x34, 0x7A, 0xCD, 0x31, 0x80, 0xC3, 0x31, 0x80, 0xC3, 0x35, 0x83, 0xCA, 0x35, 
   0x83, 0xCA, 0x2F, 0x7A, 0xC6, 0x2F, 0x7A, 0xC6, 0x27, 0x6D, 0xC0, 0x27, 0x6D, 0xC0, 0x3A, 0x80, 
   0xD4, 0x3A, 0x80, 0xD4, 0x15, 0x58, 0xAD, 0x15, 0x58, 0xAD, 0x39, 0x7B, 0xCE, 0x39, 0x7B, 0xCE, 
   0x20, 0x62, 0xB3, 0x20, 0x62, 0xB3, 0x21, 0x5D, 0xAF, 0x21, 0x5D, 0xAF, 0x27, 0x63, 0xB5, 0x27, 
   0x63, 0xB5, 0x2A, 0x66, 0xB8, 0x2A, 0x66, 0xB8, 0x2D, 0x6C, 0xBD, 0x2D, 0x6C, 0xBD, 0x0B, 0x4A, 
   0x9B, 0x0B, 0x4A, 0x9B, 0x38, 0x77, 0xC8, 0x38, 0x77, 0xC8, 0x2A, 0x69, 0xBA, 0x2A, 0x69, 0xBA, 
   0x31, 0x70, 0xC1, 0x31, 0x70, 0xC1, 0x21, 0x6E, 0xC4, 0x21, 0x6E, 0xC4, 0x28, 0x73, 0xC9, 0x28, 
   0x73, 0xC9, 0x2B, 0x73, 0xCB, 0x2B, 0x73, 0xCB, 0x1D, 0x63, 0xBE, 0x1D, 0x63, 0xBE, 0x15, 0x5C, 
   0xB7, 0x15, 0x5C, 0xB7, 0x14, 0x5D, 0xB9, 0x14, 0x5D, 0xB9, 0x1D, 0x6A, 0xC7, 0x1D, 0x6A, 0xC7, 
   0x24, 0x72, 0xCF, 0x24, 0x72, 0xCF, 0x52, 0x99, 0xDD, 0x52, 0x99, 0xDD, 0x32, 0x75, 0xD2, 0x32, 
   0x75, 0xD2, 0x5C, 0xAE, 0xE8, 0x5C, 0xAE, 0xE8, 0x2C, 0x78, 0xCA, 0x2C, 0x78, 0xCA, 0x44, 0x94, 
   0xE1, 0x44, 0x94, 0xE1, 0x5A, 0xB2, 0xE1, 0x5A, 0xB2, 0xE1, 0x49, 0x95, 0xE1, 0x49, 0x95, 0xE1, 
   0x5C, 0xB0, 0xE0, 0x5C, 0xB0, 0xE0, 0x33, 0x7B, 0xC3, 0x33, 0x7B, 0xC3, 0x59, 0xA2, 0xE6, 0x59, 
   0xA2, 0xE6, 0x59, 0xA3, 0xE3, 0x59, 0xA3, 0xE3, 0x4A, 0x94, 0xCE, 0x4A, 0x94, 0xCE, 0x58, 0xA4, 
   0xD9, 0x58, 0xA4, 0xD9, 0x5F, 0xA9, 0xDF, 0x5F, 0xA9, 0xDF, 0x67, 0xB1, 0xE7, 0x67, 0xB1, 0xE7, 
   0x73, 0xBD, 0xF5, 0x73, 0xBD, 0xF5, 0x56, 0xA2, 0xEA, 0x56, 0xA2, 0xEA, 0x25, 0x70, 0xBE, 0x25, 
   0x70, 0xBE, 0x33, 0x7E, 0xCD, 0x33, 0x7E, 0xCD, 0x2A, 0x79, 0xC2, 0x2A, 0x79, 0xC2, 0x53, 0xA6, 
   0xE4, 0x53, 0xA6, 0xE4, 0x50, 0xA2, 0xDC, 0x50, 0xA2, 0xDC, 0x45, 0x93, 0xD8, 0x45, 0x93, 0xD8, 
   0x15, 0x5E, 0xAE, 0x15, 0x5E, 0xAE, 0x17, 0x5A, 0xB1, 0x17, 0x5A, 0xB1, 0x1B, 0x60, 0xB7, 0x1B, 
   0x60, 0xB7, 0x1A, 0x63, 0xB9, 0x1A, 0x63, 0xB9, 0x17, 0x61, 0xB9, 0x17, 0x61, 0xB9, 0x19, 0x62, 
   0xBD, 0x19, 0x62, 0xBD, 0x20, 0x67, 0xC2, 0x20, 0x67, 0xC2, 0x1C, 0x61, 0xBE, 0x1C, 0x61, 0xBE, 
   0x16, 0x56, 0xB4, 0x16, 0x56, 0xB4, 0x00, 0x45, 0x9D, 0x00, 0x45, 0x9D, 0x07, 0x50, 0xAB, 0x07, 
   0x50, 0xAB, 0x10, 0x56, 0xB3, 0x10, 0x56, 0xB3, 0x1F, 0x65, 0xC2, 0x1F, 0x65, 0xC2, 0x1F, 0x64, 
   0xC1, 0x1F, 0x64, 0xC1, 0x20, 0x64, 0xBD, 0x20, 0x64, 0xBD, 0x0E, 0x54, 0xA8, 0x0E, 0x54, 0xA8, 
   0x34, 0x7A, 0xCD, 0x34, 0x7A, 0xCD, 0x31, 0x80, 0xC3, 0x31, 0x80, 0xC3, 0x35, 0x83, 0xCA, 0x35, 
   0x83, 0xCA, 0x2F, 0x7A, 0xC6, 0x2F, 0x7A, 0xC6, 0x27, 0x6D, 0xC0, 0x27, 0x6D, 0xC0, 0x3A, 0x80, 
   0xD4, 0x3A, 0x80, 0xD4, 0x15, 0x58, 0xAD, 0x15, 0x58, 0xAD, 0x39, 0x7B, 0xCE, 0x39, 0x7B, 0xCE, 
   0x20, 0x62, 0xB3, 0x20, 0x62, 0xB3, 0x21, 0x5D, 0xAF, 0x21, 0x5D, 0xAF, 0x27, 0x63, 0xB5, 0x27, 
   0x63, 0xB5, 0x2A, 0x66, 0xB8, 0x2A, 0x66, 0xB8, 0x2D, 0x6C, 0xBD, 0x2D, 0x6C, 0xBD, 0x0B, 0x4A, 
   0x9B, 0x0B, 0x4A, 0x9B, 0x38, 0x77, 0xC8, 0x38, 0x77, 0xC8, 0x2A, 0x69, 0xBA, 0x2A, 0x69, 0xBA, 
   0x31, 0x70, 0xC1, 0x31, 0x70, 0xC1, 0x21, 0x6E, 0xC4, 0x21, 0x6E, 0xC4, 0x28, 0x73, 0xC9, 0x28, 
   0x73, 0xC9, 0x2B, 0x73, 0xCB, 0x2B, 0x73, 0xCB, 0x1D, 0x63, 0xBE, 0x1D, 0x63, 0xBE, 0x15, 0x5C, 
   0xB7, 0x15, 0x5C, 0xB7, 0x14, 0x5D, 0xB9, 0x14, 0x5D, 0xB9, 0x1D, 0x6A, 0xC7, 0x1D, 0x6A, 0xC7, 
   0x24, 0x72, 0xCF, 0x24, 0x72, 0xCF, 0x52, 0x99, 0xDD, 0x52, 0x99, 0xDD, 0x32, 0x75, 0xD2, 0x32, 
   0x75, 0xD2, 0x5C, 0xAE, 0xE8, 0x5C, 0xAE, 0xE8, 0x2C, 0x78, 0xCA, 0x2C, 0x78, 0xCA, 0x44, 0x94, 
   0xE1, 0x44, 0x94, 0xE1, 0x5A, 0xB2, 0xE1, 0x5A, 0xB2, 0xE1, 0x49, 0x95, 0xE1, 0x49, 0x95, 0xE1, 
   0x5C, 0xB0, 0xE0, 0x5C, 0xB0, 0xE0, 0x33, 0x7B, 0xC3, 0x33, 0x7B, 0xC3, 0x59, 0xA2, 0xE6, 0x59, 
   0xA2, 0xE6, 0x59, 0xA3, 0xE3, 0x59, 0xA3, 0xE3, 0x4A, 0x94, 0xCE, 0x4A, 0x94, 0xCE, 0x58, 0xA4, 
   0xD9, 0x58, 0xA4, 0xD9, 0x5F, 0xA9, 0xDF, 0x5F, 0xA9, 0xDF, 0x67, 0xB1, 0xE7, 0x67, 0xB1, 0xE7, 
   0x73, 0xBD, 0xF5, 0x73, 0xBD, 0xF5, 0x4D, 0x9D, 0xE4, 0x4D, 0x9D, 0xE4, 0x2A, 0x75, 0xC3, 0x2A, 
   0x75, 0xC3, 0x42, 0x8D, 0xDC, 0x42, 0x8D, 0xDC, 0x38, 0x83, 0xCD, 0x38, 0x83, 0xCD, 0x52, 0xA1, 
   0xE0, 0x52, 0xA1, 0xE0, 0x45, 0x97, 0xD1, 0x45, 0x97, 0xD1, 0x45, 0x93, 0xD8, 0x45, 0x93, 0xD8, 
   0x21, 0x6E, 0xBD, 0x21, 0x6E, 0xBD, 0x1B, 0x5E, 0xB3, 0x1B, 0x5E, 0xB3, 0x1E, 0x66, 0xBA, 0x1E, 
   0x66, 0xBA, 0x1D, 0x66, 0xBC, 0x1D, 0x66, 0xBC, 0x13, 0x5E, 0xB4, 0x13, 0x5E, 0xB4, 0x10, 0x5A, 
   0xB2, 0x10, 0x5A, 0xB2, 0x13, 0x5A, 0xB5, 0x13, 0x5A, 0xB5, 0x0F, 0x52, 0xAE, 0x0F, 0x52, 0xAE, 
   0x05, 0x46, 0xA2, 0x05, 0x46, 0xA2, 0x15, 0x5D, 0xB5, 0x15, 0x5D, 0xB5, 0x23, 0x6A, 0xC5, 0x23, 
   0x6A, 0xC5, 0x1E, 0x64, 0xC1, 0x1E, 0x64, 0xC1, 0x1C, 0x61, 0xBE, 0x1C, 0x61, 0xBE, 0x1A, 0x5D, 
   0xBA, 0x1A, 0x5D, 0xBA, 0x25, 0x69, 0xC2, 0x25, 0x69, 0xC2, 0x19, 0x5C, 0xB1, 0x19, 0x5C, 0xB1, 
   0x39, 0x7D, 0xD0, 0x39, 0x7D, 0xD0, 0x48, 0x96, 0xD9, 0x48, 0x96, 0xD9, 0x40, 0x8D, 0xD2, 0x40, 
   0x8D, 0xD2, 0x27, 0x72, 0xBE, 0x27, 0x72, 0xBE, 0x26, 0x6D, 0xBD, 0x26, 0x6D, 0xBD, 0x46, 0x8C, 
   0xDF, 0x46, 0x8C, 0xDF, 0x20, 0x64, 0xB7, 0x20, 0x64, 0xB7, 0x3A, 0x7E, 0xD1, 0x3A, 0x7E, 0xD1, 
   0x0E, 0x53, 0xA3, 0x0E, 0x53, 0xA3, 0x2A, 0x6B, 0xBC, 0x2A, 0x6B, 0xBC, 0x34, 0x75, 0xC6, 0x34, 
   0x75, 0xC6, 0x2A, 0x6B, 0xBC, 0x2A, 0x6B, 0xBC, 0x32, 0x71, 0xC2, 0x32, 0x71, 0xC2, 0x15, 0x54, 
   0xA5, 0x15, 0x54, 0xA5, 0x3C, 0x7B, 0xCC, 0x3C, 0x7B, 0xCC, 0x34, 0x73, 0xC4, 0x34, 0x73, 0xC4, 
   0x3F, 0x7E, 0xCF, 0x3F, 0x7E, 0xCF, 0x12, 0x5C, 0xB4, 0x12, 0x5C, 0xB4, 0x25, 0x6D, 0xC5, 0x25, 
   0x6D, 0xC5, 0x30, 0x77, 0xCF, 0x30, 0x77, 0xCF, 0x2E, 0x71, 0xCD, 0x2E, 0x71, 0xCD, 0x1D, 0x63, 
   0xBE, 0x1D, 0x63, 0xBE, 0x18, 0x61, 0xBD, 0x18, 0x61, 0xBD, 0x17, 0x64, 0xC0, 0x17, 0x64, 0xC0, 
   0x1A, 0x6B, 0xC6, 0x1A, 0x6B, 0xC6, 0x53, 0x9C, 0xE0, 0x53, 0x9C, 0xE0, 0x3A, 0x7D, 0xDA, 0x3A, 
   0x7D, 0xDA, 0x65, 0xB7, 0xF1, 0x65, 0xB7, 0xF1, 0x29, 0x78, 0xC9, 0x29, 0x78, 0xC9, 0x3F, 0x91, 
   0xDE, 0x3F, 0x91, 0xDE, 0x54, 0xAE, 0xDD, 0x54, 0xAE, 0xDD, 0x4E, 0x9C, 0xE8, 0x4E, 0x9C, 0xE8, 
   0x50, 0xA5, 0xD5, 0x50, 0xA5, 0xD5, 0x32, 0x7B, 0xC5, 0x32, 0x7B, 0xC5, 0x5A, 0xA5, 0xEA, 0x5A, 
   0xA5, 0xEA, 0x53, 0x9D, 0xDD, 0x53, 0x9D, 0xDD, 0x3E, 0x88, 0xC2, 0x3E, 0x88, 0xC2, 0x50, 0x9C, 
   0xD1, 0x50, 0x9C, 0xD1, 0x63, 0xAE, 0xE2, 0x63, 0xAE, 0xE2, 0x5D, 0xA6, 0xDA, 0x5D, 0xA6, 0xDA, 
   0x6B, 0xB3, 0xE9, 0x6B, 0xB3, 0xE9, 0x4D, 0x9D, 0xE4, 0x4D, 0x9D, 0xE4, 0x2A, 0x75, 0xC3, 0x2A, 
   0x75, 0xC3, 0x42, 0x8D, 0xDC, 0x42, 0x8D, 0xDC, 0x38, 0x83, 0xCD, 0x38, 0x83, 0xCD, 0x52, 0xA1, 
   0xE0, 0x52, 0xA1, 0xE0, 0x45, 0x97, 0xD1, 0x45, 0x97, 0xD1, 0x45, 0x93, 0xD8, 0x45, 0x93, 0xD8, 
   0x21, 0x6E, 0xBD, 0x21, 0x6E, 0xBD, 0x1B, 0x5E, 0xB3, 0x1B, 0x5E, 0xB3, 0x1E, 0x66, 0xBA, 0x1E, 
   0x66, 0xBA, 0x1D, 0x66, 0xBC, 0x1D, 0x66, 0xBC, 0x13, 0x5E, 0xB4, 0x13, 0x5E, 0xB4, 0x10, 0x5A, 
   0xB2, 0x10, 0x5A, 0xB2, 0x13, 0x5A, 0xB5, 0x13, 0x5A, 0xB5, 0x0F, 0x52, 0xAE, 0x0F, 0x52, 0xAE, 
   0x05, 0x46, 0xA2, 0x05, 0x46, 0xA2, 0x15, 0x5D, 0xB5, 0x15, 0x5D, 0xB5, 0x23, 0x6A, 0xC5, 0x23, 
   0x6A, 0xC5, 0x1E, 0x64, 0xC1, 0x1E, 0x64, 0xC1, 0x1C, 0x61, 0xBE, 0x1C, 0x61, 0xBE, 0x1A, 0x5D, 
   0xBA, 0x1A, 0x5D, 0xBA, 0x25, 0x69, 0xC2, 0x25, 0x69, 0xC2, 0x19, 0x5C, 0xB1, 0x19, 0x5C, 0xB1, 
   0x39, 0x7D, 0xD0, 0x39, 0x7D, 0xD0, 0x48, 0x96, 0xD9, 0x48, 0x96, 0xD9, 0x40, 0x8D, 0xD2, 0x40, 
   0x8D, 0xD2, 0x27, 0x72, 0xBE, 0x27, 0x72, 0xBE, 0x26, 0x6D, 0xBD, 0x26, 0x6D, 0xBD, 0x46, 0x8C, 
   0xDF, 0x46, 0x8C, 0xDF, 0x20, 0x64, 0xB7, 0x20, 0x64, 0xB7, 0x3A, 0x7E, 0xD1, 0x3A, 0x7E, 0xD1, 
   0x0E, 0x53, 0xA3, 0x0E, 0x53, 0xA3, 0x2A, 0x6B, 0xBC, 0x2A, 0x6B, 0xBC, 0x34, 0x75, 0xC6, 0x34, 
   0x75, 0xC6, 0x2A, 0x6B, 0xBC, 0x2A, 0x6B, 0xBC, 0x32, 0x71, 0xC2, 0x32, 0x71, 0xC2, 0x15, 0x54, 
   0xA5, 0x15, 0x54, 0xA5, 0x3C, 0x7B, 0xCC, 0x3C, 0x7B, 0xCC, 0x34, 0x73, 0xC4, 0x34, 0x73, 0xC4, 
   0x3F, 0x7E, 0xCF, 0x3F, 0x7E, 0xCF, 0x12, 0x5C, 0xB4, 0x12, 0x5C, 0xB4, 0x25, 0x6D, 0xC5, 0x25, 
   0x6D, 0xC5, 0x30, 0x77, 0xCF, 0x30, 0x77, 0xCF, 0x2E, 0x71, 0xCD, 0x2E, 0x71, 0xCD, 0x1D, 0x63, 
   0xBE, 0x1D, 0x63, 0xBE, 0x18, 0x61, 0xBD, 0x18, 0x61, 0xBD, 0x17, 0x64, 0xC0, 0x17, 0x64, 0xC0, 
   0x1A, 0x6B, 0xC6, 0x1A, 0x6B, 0xC6, 0x53, 0x9C, 0xE0, 0x53, 0x9C, 0xE0, 0x3A, 0x7D, 0xDA, 0x3A, 
   0x7D, 0xDA, 0x65, 0xB7, 0xF1, 0x65, 0xB7, 0xF1, 0x29, 0x78, 0xC9, 0x29, 0x78, 0xC9, 0x3F, 0x91, 
   0xDE, 0x3F, 0x91, 0xDE, 0x54, 0xAE, 0xDD, 0x54, 0xAE, 0xDD, 0x4E, 0x9C, 0xE8, 0x4E, 0x9C, 0xE8, 
   0x50, 0xA5, 0xD5, 0x50, 0xA5, 0xD5, 0x32, 0x7B, 0xC5, 0x32, 0x7B, 0xC5, 0x5A, 0xA5, 0xEA, 0x5A, 
   0xA5, 0xEA, 0x53, 0x9D, 0xDD, 0x53, 0x9D, 0xDD, 0x3E, 0x88, 0xC2, 0x3E, 0x88, 0xC2, 0x50, 0x9C, 
   0xD1, 0x50, 0x9C, 0xD1, 0x63, 0xAE, 0xE2, 0x63, 0xAE, 0xE2, 0x5D, 0xA6, 0xDA, 0x5D, 0xA6, 0xDA, 
   0x6B, 0xB3, 0xE9, 0x6B, 0xB3, 0xE9, 0x4C, 0xA0, 0xE2, 0x4C, 0xA0, 0xE2, 0x2C, 0x7B, 0xC4, 0x2C, 
   0x7B, 0xC4, 0x36, 0x80, 0xCE, 0x36, 0x80, 0xCE, 0x3E, 0x88, 0xD0, 0x3E, 0x88, 0xD0, 0x55, 0xA2, 
   0xE1, 0x55, 0xA2, 0xE1, 0x47, 0x97, 0xD4, 0x47, 0x97, 0xD4, 0x42, 0x92, 0xD9, 0x42, 0x92, 0xD9, 
   0x16, 0x64, 0xB7, 0x16, 0x64, 0xB7, 0x22, 0x65, 0xBC, 0x22, 0x65, 0xBC, 0x26, 0x6B, 0xC2, 0x26, 
   0x6B, 0xC2, 0x24, 0x6B, 0xC2, 0x24, 0x6B, 0xC2, 0x1C, 0x64, 0xBC, 0x1C, 0x64, 0xBC, 0x18, 0x5F, 
   0xBA, 0x18, 0x5F, 0xBA, 0x1B, 0x5E, 0xBA, 0x1B, 0x5E, 0xBA, 0x1A, 0x58, 0xB6, 0x1A, 0x58, 0xB6, 
   0x12, 0x4F, 0xAD, 0x12, 0x4F, 0xAD, 0x0B, 0x4E, 0xAA, 0x0B, 0x4E, 0xAA, 0x18, 0x5B, 0xB8, 0x18, 
   0x5B, 0xB8, 0x0E, 0x50, 0xAF, 0x0E, 0x50, 0xAF, 0x06, 0x46, 0xA5, 0x06, 0x46, 0xA5, 0x00, 0x40, 
   0x9F, 0x00, 0x40, 0x9F, 0x11, 0x50, 0xAC, 0x11, 0x50, 0xAC, 0x04, 0x44, 0x9C, 0x04, 0x44, 0x9C, 
   0x21, 0x61, 0xB6, 0x21, 0x61, 0xB6, 0x59, 0xA3, 0xE5, 0x59, 0xA3, 0xE5, 0x47, 0x8F, 0xD5, 0x47, 
   0x8F, 0xD5, 0x24, 0x6B, 0xB5, 0x24, 0x6B, 0xB5, 0x27, 0x6C, 0xBB, 0x27, 0x6C, 0xBB, 0x49, 0x8D, 
   0xE0, 0x49, 0x8D, 0xE0, 0x2F, 0x73, 0xC6, 0x2F, 0x73, 0xC6, 0x3A, 0x7F, 0xCF, 0x3A, 0x7F, 0xCF, 
   0x0C, 0x51, 0xA0, 0x0C, 0x51, 0xA0, 0x1E, 0x63, 0xB3, 0x1E, 0x63, 0xB3, 0x2D, 0x72, 0xC2, 0x2D, 
   0x72, 0xC2, 0x24, 0x69, 0xB9, 0x24, 0x69, 0xB9, 0x2C, 0x6E, 0xBF, 0x2C, 0x6E, 0xBF, 0x1A, 0x5C, 
   0xAD, 0x1A, 0x5C, 0xAD, 0x30, 0x71, 0xC2, 0x30, 0x71, 0xC2, 0x27, 0x68, 0xB9, 0x27, 0x68, 0xB9, 
   0x2B, 0x6C, 0xBD, 0x2B, 0x6C, 0xBD, 0x25, 0x6B, 0xC6, 0x25, 0x6B, 0xC6, 0x2D, 0x70, 0xCC, 0x2D, 
   0x70, 0xCC, 0x28, 0x6B, 0xC7, 0x28, 0x6B, 0xC7, 0x2B, 0x6E, 0xCA, 0x2B, 0x6E, 0xCA, 0x21, 0x67, 
   0xC2, 0x21, 0x67, 0xC2, 0x27, 0x70, 0xCB, 0x27, 0x70, 0xCB, 0x1C, 0x6A, 0xC4, 0x1C, 0x6A, 0xC4, 
   0x17, 0x69, 0xC2, 0x17, 0x69, 0xC2, 0x59, 0xA3, 0xE3, 0x59, 0xA3, 0xE3, 0x3F, 0x85, 0xE0, 0x3F, 
   0x85, 0xE0, 0x68, 0xBD, 0xF5, 0x68, 0xBD, 0xF5, 0x27, 0x78, 0xC9, 0x27, 0x78, 0xC9, 0x3B, 0x8D, 
   0xDB, 0x3B, 0x8D, 0xDB, 0x4A, 0xA6, 0xD7, 0x4A, 0xA6, 0xD7, 0x56, 0xA3, 0xF2, 0x56, 0xA3, 0xF2, 
   0x50, 0xA4, 0xD8, 0x50, 0xA4, 0xD8, 0x2D, 0x78, 0xC4, 0x2D, 0x78, 0xC4, 0x4B, 0x95, 0xDD, 0x4B, 
   0x95, 0xDD, 0x49, 0x95, 0xD7, 0x49, 0x95, 0xD7, 0x4D, 0x9A, 0xD3, 0x4D, 0x9A, 0xD3, 0x64, 0xAE, 
   0xE4, 0x64, 0xAE, 0xE4, 0x66, 0xAF, 0xE3, 0x66, 0xAF, 0xE3, 0x46, 0x8F, 0xC3, 0x46, 0x8F, 0xC3, 
   0x68, 0xAE, 0xE3, 0x68, 0xAE, 0xE3, 0x4C, 0xA0, 0xE2, 0x4C, 0xA0, 0xE2, 0x2C, 0x7B, 0xC4, 0x2C, 
   0x7B, 0xC4, 0x36, 0x80, 0xCE, 0x36, 0x80, 0xCE, 0x3E, 0x88, 0xD0, 0x3E, 0x88, 0xD0, 0x55, 0xA2, 
   0xE1, 0x55, 0xA2, 0xE1, 0x47, 0x97, 0xD4, 0x47, 0x97, 0xD4, 0x42, 0x92, 0xD9, 0x42, 0x92, 0xD9, 
   0x16, 0x64, 0xB7, 0x16, 0x64, 0xB7, 0x22, 0x65, 0xBC, 0x22, 0x65, 0xBC, 0x26, 0x6B, 0xC2, 0x26, 
   0x6B, 0xC2, 0x24, 0x6B, 0xC2, 0x24, 0x6B, 0xC2, 0x1C, 0x64, 0xBC, 0x1C, 0x64, 0xBC, 0x18, 0x5F, 
   0xBA, 0x18, 0x5F, 0xBA, 0x1B, 0x5E, 0xBA, 0x1B, 0x5E, 0xBA, 0x1A, 0x58, 0xB6, 0x1A, 0x58, 0xB6, 
   0x12, 0x4F, 0xAD, 0x12, 0x4F, 0xAD, 0x0B, 0x4E, 0xAA, 0x0B, 0x4E, 0xAA, 0x18, 0x5B, 0xB8, 0x18, 
   0x5B, 0xB8, 0x0E, 0x50, 0xAF, 0x0E, 0x50, 0xAF, 0x06, 0x46, 0xA5, 0x06, 0x46, 0xA5, 0x00, 0x40, 
   0x9F, 0x00, 0x40, 0x9F, 0x11, 0x50, 0xAC, 0x11, 0x50, 0xAC, 0x04, 0x44, 0x9C, 0x04, 0x44, 0x9C, 
   0x21, 0x61, 0xB6, 0x21, 0x61, 0xB6, 0x59, 0xA3, 0xE5, 0x59, 0xA3, 0xE5, 0x47, 0x8F, 0xD5, 0x47, 
   0x8F, 0xD5, 0x24, 0x6B, 0xB5, 0x24, 0x6B, 0xB5, 0x27, 0x6C, 0xBB, 0x27, 0x6C, 0xBB, 0x49, 0x8D, 
   0xE0, 0x49, 0x8D, 0xE0, 0x2F, 0x73, 0xC6, 0x2F, 0x73, 0xC6, 0x3A, 0x7F, 0xCF, 0x3A, 0x7F, 0xCF, 
   0x0C, 0x51, 0xA0, 0x0C, 0x51, 0xA0, 0x1E, 0x63, 0xB3, 0x1E, 0x63, 0xB3, 0x2D, 0x72, 0xC2, 0x2D, 
   0x72, 0xC2, 0x24, 0x69, 0xB9, 0x24, 0x69, 0xB9, 0x2C, 0x6E, 0xBF, 0x2C, 0x6E, 0xBF, 0x1A, 0x5C, 
   0xAD, 0x1A, 0x5C, 0xAD, 0x30, 0x71, 0xC2, 0x30, 0x71, 0xC2, 0x27, 0x68, 0xB9, 0x27, 0x68, 0xB9, 
   0x2B, 0x6C, 0xBD, 0x2B, 0x6C, 0xBD, 0x25, 0x6B, 0xC6, 0x25, 0x6B, 0xC6, 0x2D, 0x70, 0xCC, 0x2D, 
   0x70, 0xCC, 0x28, 0x6B, 0xC7, 0x28, 0x6B, 0xC7, 0x2B, 0x6E, 0xCA, 0x2B, 0x6E, 0xCA, 0x21, 0x67, 
   0xC2, 0x21, 0x67, 0xC2, 0x27, 0x70, 0xCB, 0x27, 0x70, 0xCB, 0x1C, 0x6A, 0xC4, 0x1C, 0x6A, 0xC4, 
   0x17, 0x69, 0xC2, 0x17, 0x69, 0xC2, 0x59, 0xA3, 0xE3, 0x59, 0xA3, 0xE3, 0x3F, 0x85, 0xE0, 0x3F, 
   0x85, 0xE0, 0x68, 0xBD, 0xF5, 0x68, 0xBD, 0xF5, 0x27, 0x78, 0xC9, 0x27, 0x78, 0xC9, 0x3B, 0x8D, 
   0xDB, 0x3B, 0x8D, 0xDB, 0x4A, 0xA6, 0xD7, 0x4A, 0xA6, 0xD7, 0x56, 0xA3, 0xF2, 0x56, 0xA3, 0xF2, 
   0x50, 0xA4, 0xD8, 0x50, 0xA4, 0xD8, 0x2D, 0x78, 0xC4, 0x2D, 0x78, 0xC4, 0x4B, 0x95, 0xDD, 0x4B, 
   0x95, 0xDD, 0x49, 0x95, 0xD7, 0x49, 0x95, 0xD7, 0x4D, 0x9A, 0xD3, 0x4D, 0x9A, 0xD3, 0x64, 0xAE, 
   0xE4, 0x64, 0xAE, 0xE4, 0x66, 0xAF, 0xE3, 0x66, 0xAF, 0xE3, 0x46, 0x8F, 0xC3, 0x46, 0x8F, 0xC3, 
   0x68, 0xAE, 0xE3, 0x68, 0xAE, 0xE3, 0x50, 0xA5, 0xE3, 0x50, 0xA5, 0xE3, 0x32, 0x83, 0xC7, 0x32, 
   0x83, 0xC7, 0x21, 0x6C, 0xB8, 0x21, 0x6C, 0xB8, 0x3F, 0x89, 0xD1, 0x3F, 0x89, 0xD1, 0x54, 0xA1, 
   0xE0, 0x54, 0xA1, 0xE0, 0x45, 0x93, 0xD5, 0x45, 0x93, 0xD5, 0x39, 0x87, 0xD3, 0x39, 0x87, 0xD3, 
   0x00, 0x4B, 0xA2, 0x00, 0x4B, 0xA2, 0x10, 0x4F, 0xA9, 0x10, 0x4F, 0xA9, 0x10, 0x52, 0xAB, 0x10, 
   0x52, 0xAB, 0x0F, 0x52, 0xAE, 0x0F, 0x52, 0xAE, 0x0C, 0x52, 0xAD, 0x0C, 0x52, 0xAD, 0x0C, 0x4F, 
   0xAC, 0x0C, 0x4F, 0xAC, 0x0F, 0x4D, 0xAB, 0x0F, 0x4D, 0xAB, 0x10, 0x4A, 0xAA, 0x10, 0x4A, 0xAA, 
   0x12, 0x47, 0xA8, 0x12, 0x47, 0xA8, 0x1B, 0x59, 0xB7, 0x1B, 0x59, 0xB7, 0x24, 0x61, 0xC1, 0x24, 
   0x61, 0xC1, 0x1F, 0x5B, 0xBF, 0x1F, 0x5B, 0xBF, 0x20, 0x5B, 0xBF, 0x20, 0x5B, 0xBF, 0x1D, 0x58, 
   0xBB, 0x1D, 0x58, 0xBB, 0x25, 0x5F, 0xBF, 0x25, 0x5F, 0xBF, 0x14, 0x4F, 0xAC, 0x14, 0x4F, 0xAC, 
   0x36, 0x70, 0xC9, 0x36, 0x70, 0xC9, 0x55, 0x9B, 0xDE, 0x55, 0x9B, 0xDE, 0x42, 0x87, 0xCC, 0x42, 
   0x87, 0xCC, 0x20, 0x63, 0xAE, 0x20, 0x63, 0xAE, 0x27, 0x69, 0xB8, 0x27, 0x69, 0xB8, 0x40, 0x81, 
   0xD2, 0x40, 0x81, 0xD2, 0x39, 0x7A, 0xCB, 0x39, 0x7A, 0xCB, 0x39, 0x7B, 0xCC, 0x39, 0x7B, 0xCC, 
   0x18, 0x5B, 0xAA, 0x18, 0x5B, 0xAA, 0x29, 0x74, 0xC3, 0x29, 0x74, 0xC3, 0x38, 0x83, 0xD2, 0x38, 
   0x83, 0xD2, 0x31, 0x7A, 0xCA, 0x31, 0x7A, 0xCA, 0x32, 0x7B, 0xCB, 0x32, 0x7B, 0xCB, 0x31, 0x78, 
   0xC8, 0x31, 0x78, 0xC8, 0x34, 0x79, 0xC9, 0x34, 0x79, 0xC9, 0x2E, 0x70, 0xC1, 0x2E, 0x70, 0xC1, 
   0x29, 0x6B, 0xBC, 0x29, 0x6B, 0xBC, 0x24, 0x67, 0xC3, 0x24, 0x67, 0xC3, 0x23, 0x64, 0xC0, 0x23, 
   0x64, 0xC0, 0x11, 0x52, 0xAE, 0x11, 0x52, 0xAE, 0x17, 0x58, 0xB4, 0x17, 0x58, 0xB4, 0x11, 0x54, 
   0xB0, 0x11, 0x54, 0xB0, 0x21, 0x6A, 0xC5, 0x21, 0x6A, 0xC5, 0x17, 0x67, 0xC0, 0x17, 0x67, 0xC0, 
   0x15, 0x67, 0xC0, 0x15, 0x67, 0xC0, 0x55, 0xA3, 0xDE, 0x55, 0xA3, 0xDE, 0x37, 0x7F, 0xD3, 0x37, 
   0x7F, 0xD3, 0x66, 0xBC, 0xF2, 0x66, 0xBC, 0xF2, 0x2E, 0x80, 0xCE, 0x2E, 0x80, 0xCE, 0x3E, 0x91, 
   0xDF, 0x3E, 0x91, 0xDF, 0x3D, 0x97, 0xCD, 0x3D, 0x97, 0xCD, 0x50, 0x9E, 0xF1, 0x50, 0x9E, 0xF1, 
   0x4D, 0xA2, 0xDA, 0x4D, 0xA2, 0xDA, 0x21, 0x6C, 0xBA, 0x21, 0x6C, 0xBA, 0x3E, 0x89, 0xD3, 0x3E, 
   0x89, 0xD3, 0x49, 0x95, 0xD7, 0x49, 0x95, 0xD7, 0x5F, 0xAC, 0xE5, 0x5F, 0xAC, 0xE5, 0x75, 0xBF, 
   0xF5, 0x75, 0xBF, 0xF5, 0x6B, 0xB4, 0xE6, 0x6B, 0xB4, 0xE6, 0x3E, 0x85, 0xB7, 0x3E, 0x85, 0xB7, 
   0x6D, 0xB2, 0xE4, 0x6D, 0xB2, 0xE4, 0x50, 0xA5, 0xE3, 0x50, 0xA5, 0xE3, 0x32, 0x83, 0xC7, 0x32, 
   0x83, 0xC7, 0x21, 0x6C, 0xB8, 0x21, 0x6C, 0xB8, 0x3F, 0x89, 0xD1, 0x3F, 0x89, 0xD1, 0x54, 0xA1, 
   0xE0, 0x54, 0xA1, 0xE0, 0x45, 0x93, 0xD5, 0x45, 0x93, 0xD5, 0x39, 0x87, 0xD3, 0x39, 0x87, 0xD3, 
   0x00, 0x4B, 0xA2, 0x00, 0x4B, 0xA2, 0x10, 0x4F, 0xA9, 0x10, 0x4F, 0xA9, 0x10, 0x52, 0xAB, 0x10, 
   0x52, 0xAB, 0x0F, 0x52, 0xAE, 0x0F, 0x52, 0xAE, 0x0C, 0x52, 0xAD, 0x0C, 0x52, 0xAD, 0x0C, 0x4F, 
   0xAC, 0x0C, 0x4F, 0xAC, 0x0F, 0x4D, 0xAB, 0x0F, 0x4D, 0xAB, 0x10, 0x4A, 0xAA, 0x10, 0x4A, 0xAA, 
   0x12, 0x47, 0xA8, 0x12, 0x47, 0xA8, 0x1B, 0x59, 0xB7, 0x1B, 0x59, 0xB7, 0x24, 0x61, 0xC1, 0x24, 
   0x61, 0xC1, 0x1F, 0x5B, 0xBF, 0x1F, 0x5B, 0xBF, 0x20, 0x5B, 0xBF, 0x20, 0x5B, 0xBF, 0x1D, 0x58, 
   0xBB, 0x1D, 0x58, 0xBB, 0x25, 0x5F, 0xBF, 0x25, 0x5F, 0xBF, 0x14, 0x4F, 0xAC, 0x14, 0x4F, 0xAC, 
   0x36, 0x70, 0xC9, 0x36, 0x70, 0xC9, 0x55, 0x9B, 0xDE, 0x55, 0x9B, 0xDE, 0x42, 0x87, 0xCC, 0x42, 
   0x87, 0xCC, 0x20, 0x63, 0xAE, 0x20, 0x63, 0xAE, 0x27, 0x69, 0xB8, 0x27, 0x69, 0xB8, 0x40, 0x81, 
   0xD2, 0x40, 0x81, 0xD2, 0x39, 0x7A, 0xCB, 0x39, 0x7A, 0xCB, 0x39, 0x7B, 0xCC, 0x39, 0x7B, 0xCC, 
   0x18, 0x5B, 0xAA, 0x18, 0x5B, 0xAA, 0x29, 0x74, 0xC3, 0x29, 0x74, 0xC3, 0x38, 0x83, 0xD2, 0x38, 
   0x83, 0xD2, 0x31, 0x7A, 0xCA, 0x31, 0x7A, 0xCA, 0x32, 0x7B, 0xCB, 0x32, 0x7B, 0xCB, 0x31, 0x78, 
   0xC8, 0x31, 0x78, 0xC8, 0x34, 0x79, 0xC9, 0x34, 0x79, 0xC9, 0x2E, 0x70, 0xC1, 0x2E, 0x70, 0xC1, 
   0x29, 0x6B, 0xBC, 0x29, 0x6B, 0xBC, 0x24, 0x67, 0xC3, 0x24, 0x67, 0xC3, 0x23, 0x64, 0xC0, 0x23, 
   0x64, 0xC0, 0x11, 0x52, 0xAE, 0x11, 0x52, 0xAE, 0x17, 0x58, 0xB4, 0x17, 0x58, 0xB4, 0x11, 0x54, 
   0xB0, 0x11, 0x54, 0xB0, 0x21, 0x6A, 0xC5, 0x21, 0x6A, 0xC5, 0x17, 0x67, 0xC0, 0x17, 0x67, 0xC0, 
   0x15, 0x67, 0xC0, 0x15, 0x67, 0xC0, 0x55, 0xA3, 0xDE, 0x55, 0xA3, 0xDE, 0x37, 0x7F, 0xD3, 0x37, 
   0x7F, 0xD3, 0x66, 0xBC, 0xF2, 0x66, 0xBC, 0xF2, 0x2E, 0x80, 0xCE, 0x2E, 0x80, 0xCE, 0x3E, 0x91, 
   0xDF, 0x3E, 0x91, 0xDF, 0x3D, 0x97, 0xCD, 0x3D, 0x97, 0xCD, 0x50, 0x9E, 0xF1, 0x50, 0x9E, 0xF1, 
   0x4D, 0xA2, 0xDA, 0x4D, 0xA2, 0xDA, 0x21, 0x6C, 0xBA, 0x21, 0x6C, 0xBA, 0x3E, 0x89, 0xD3, 0x3E, 
   0x89, 0xD3, 0x49, 0x95, 0xD7, 0x49, 0x95, 0xD7, 0x5F, 0xAC, 0xE5, 0x5F, 0xAC, 0xE5, 0x75, 0xBF, 
   0xF5, 0x75, 0xBF, 0xF5, 0x6B, 0xB4, 0xE6, 0x6B, 0xB4, 0xE6, 0x3E, 0x85, 0xB7, 0x3E, 0x85, 0xB7, 
   0x6D, 0xB2, 0xE4, 0x6D, 0xB2, 0xE4, 0x47, 0xA0, 0xD9, 0x47, 0xA0, 0xD9, 0x40, 0x91, 0xD4, 0x40, 
   0x91, 0xD4, 0x2A, 0x75, 0xBF, 0x2A, 0x75, 0xBF, 0x50, 0x98, 0xDE, 0x50, 0x98, 0xDE, 0x4C, 0x96, 
   0xD8, 0x4C, 0x96, 0xD8, 0x32, 0x80, 0xC3, 0x32, 0x80, 0xC3, 0x2F, 0x7C, 0xCB, 0x2F, 0x7C, 0xCB, 
   0x00, 0x47, 0xA3, 0x00, 0x47, 0xA3, 0x0A, 0x47, 0xA4, 0x0A, 0x47, 0xA4, 0x07, 0x46, 0xA2, 0x07, 
   0x46, 0xA2, 0x05, 0x45, 0xA3, 0x05, 0x45, 0xA3, 0x04, 0x44, 0xA2, 0x04, 0x44, 0xA2, 0x01, 0x41, 
   0xA0, 0x01, 0x41, 0xA0, 0x00, 0x3A, 0x9A, 0x00, 0x3A, 0x9A, 0x02, 0x36, 0x9A, 0x02, 0x36, 0x9A, 
   0x06, 0x38, 0x9C, 0x06, 0x38, 0x9C, 0x02, 0x3D, 0xA0, 0x02, 0x3D, 0xA0, 0x00, 0x3A, 0x9D, 0x00, 
   0x3A, 0x9D, 0x00, 0x30, 0x98, 0x00, 0x30, 0x98, 0x02, 0x39, 0xA1, 0x02, 0x39, 0xA1, 0x03, 0x38, 
   0xA0, 0x03, 0x38, 0xA0, 0x06, 0x3D, 0xA0, 0x06, 0x3D, 0xA0, 0x00, 0x33, 0x92, 0x00, 0x33, 0x92, 
   0x2A, 0x61, 0xBC, 0x2A, 0x61, 0xBC, 0x53, 0x95, 0xD6, 0x53, 0x95, 0xD6, 0x42, 0x83, 0xC8, 0x42, 
   0x83, 0xC8, 0x21, 0x62, 0xAC, 0x21, 0x62, 0xAC, 0x27, 0x66, 0xB6, 0x27, 0x66, 0xB6, 0x32, 0x71, 
   0xC2, 0x32, 0x71, 0xC2, 0x36, 0x75, 0xC6, 0x36, 0x75, 0xC6, 0x2E, 0x70, 0xBF, 0x2E, 0x70, 0xBF, 
   0x1B, 0x5D, 0xAC, 0x1B, 0x5D, 0xAC, 0x23, 0x72, 0xC1, 0x23, 0x72, 0xC1, 0x2F, 0x7E, 0xCD, 0x2F, 
   0x7E, 0xCD, 0x28, 0x75, 0xC4, 0x28, 0x75, 0xC4, 0x23, 0x6E, 0xBD, 0x23, 0x6E, 0xBD, 0x2A, 0x73, 
   0xC3, 0x2A, 0x73, 0xC3, 0x23, 0x6A, 0xBA, 0x23, 0x6A, 0xBA, 0x1F, 0x66, 0xB6, 0x1F, 0x66, 0xB6, 
   0x18, 0x5D, 0xAD, 0x18, 0x5D, 0xAD, 0x17, 0x57, 0xB5, 0x17, 0x57, 0xB5, 0x1E, 0x5E, 0xBC, 0x1E, 
   0x5E, 0xBC, 0x18, 0x57, 0xB3, 0x18, 0x57, 0xB3, 0x23, 0x64, 0xC0, 0x23, 0x64, 0xC0, 0x1A, 0x5D, 
   0xB9, 0x1A, 0x5D, 0xB9, 0x28, 0x71, 0xCC, 0x28, 0x71, 0xCC, 0x1B, 0x6B, 0xC2, 0x1B, 0x6B, 0xC2, 
   0x1B, 0x6E, 0xC4, 0x1B, 0x6E, 0xC4, 0x54, 0xA4, 0xDB, 0x54, 0xA4, 0xDB, 0x30, 0x79, 0xCB, 0x30, 
   0x79, 0xCB, 0x66, 0xBC, 0xF0, 0x66, 0xBC, 0xF0, 0x39, 0x8B, 0xD9, 0x39, 0x8B, 0xD9, 0x45, 0x97, 
   0xE8, 0x45, 0x97, 0xE8, 0x2F, 0x89, 0xC0, 0x2F, 0x89, 0xC0, 0x40, 0x8D, 0xE3, 0x40, 0x8D, 0xE3, 
   0x3F, 0x92, 0xCF, 0x3F, 0x92, 0xCF, 0x15, 0x60, 0xAE, 0x15, 0x60, 0xAE, 0x3F, 0x8A, 0xD4, 0x3F, 
   0x8A, 0xD4, 0x50, 0x9C, 0xDE, 0x50, 0x9C, 0xDE, 0x62, 0xAF, 0xE8, 0x62, 0xAF, 0xE8, 0x76, 0xC0, 
   0xF6, 0x76, 0xC0, 0xF6, 0x73, 0xBC, 0xEE, 0x73, 0xBC, 0xEE, 0x42, 0x89, 0xBB, 0x42, 0x89, 0xBB, 
   0x72, 0xB7, 0xE9, 0x72, 0xB7, 0xE9, 0x47, 0xA0, 0xD9, 0x47, 0xA0, 0xD9, 0x40, 0x91, 0xD4, 0x40, 
   0x91, 0xD4, 0x2A, 0x75, 0xBF, 0x2A, 0x75, 0xBF, 0x50, 0x98, 0xDE, 0x50, 0x98, 0xDE, 0x4C, 0x96, 
   0xD8, 0x4C, 0x96, 0xD8, 0x32, 0x80, 0xC3, 0x32, 0x80, 0xC3, 0x2F, 0x7C, 0xCB, 0x2F, 0x7C, 0xCB, 
   0x00, 0x47, 0xA3, 0x00, 0x47, 0xA3, 0x0A, 0x47, 0xA4, 0x0A, 0x47, 0xA4, 0x07, 0x46, 0xA2, 0x07, 
   0x46, 0xA2, 0x05, 0x45, 0xA3, 0x05, 0x45, 0xA3, 0x04, 0x44, 0xA2, 0x04, 0x44, 0xA2, 0x01, 0x41, 
   0xA0, 0x01, 0x41, 0xA0, 0x00, 0x3A, 0x9A, 0x00, 0x3A, 0x9A, 0x02, 0x36, 0x9A, 0x02, 0x36, 0x9A, 
   0x06, 0x38, 0x9C, 0x06, 0x38, 0x9C, 0x02, 0x3D, 0xA0, 0x02, 0x3D, 0xA0, 0x00, 0x3A, 0x9D, 0x00, 
   0x3A, 0x9D, 0x00, 0x30, 0x98, 0x00, 0x30, 0x98, 0x02, 0x39, 0xA1, 0x02, 0x39, 0xA1, 0x03, 0x38, 
   0xA0, 0x03, 0x38, 0xA0, 0x06, 0x3D, 0xA0, 0x06, 0x3D, 0xA0, 0x00, 0x33, 0x92, 0x00, 0x33, 0x92, 
   0x2A, 0x61, 0xBC, 0x2A, 0x61, 0xBC, 0x53, 0x95, 0xD6, 0x53, 0x95, 0xD6, 0x42, 0x83, 0xC8, 0x42, 
   0x83, 0xC8, 0x21, 0x62, 0xAC, 0x21, 0x62, 0xAC, 0x27, 0x66, 0xB6, 0x27, 0x66, 0xB6, 0x32, 0x71, 
   0xC2, 0x32, 0x71, 0xC2, 0x36, 0x75, 0xC6, 0x36, 0x75, 0xC6, 0x2E, 0x70, 0xBF, 0x2E, 0x70, 0xBF, 
   0x1B, 0x5D, 0xAC, 0x1B, 0x5D, 0xAC, 0x23, 0x72, 0xC1, 0x23, 0x72, 0xC1, 0x2F, 0x7E, 0xCD, 0x2F, 
   0x7E, 0xCD, 0x28, 0x75, 0xC4, 0x28, 0x75, 0xC4, 0x23, 0x6E, 0xBD, 0x23, 0x6E, 0xBD, 0x2A, 0x73, 
   0xC3, 0x2A, 0x73, 0xC3, 0x23, 0x6A, 0xBA, 0x23, 0x6A, 0xBA, 0x1F, 0x66, 0xB6, 0x1F, 0x66, 0xB6, 
   0x18, 0x5D, 0xAD, 0x18, 0x5D, 0xAD, 0x17, 0x57, 0xB5, 0x17, 0x57, 0xB5, 0x1E, 0x5E, 0xBC, 0x1E, 
   0x5E, 0xBC, 0x18, 0x57, 0xB3, 0x18, 0x57, 0xB3, 0x23, 0x64, 0xC0, 0x23, 0x64, 0xC0, 0x1A, 0x5D, 
   0xB9, 0x1A, 0x5D, 0xB9, 0x28, 0x71, 0xCC, 0x28, 0x71, 0xCC, 0x1B, 0x6B, 0xC2, 0x1B, 0x6B, 0xC2, 
   0x1B, 0x6E, 0xC4, 0x1B, 0x6E, 0xC4, 0x54, 0xA4, 0xDB, 0x54, 0xA4, 0xDB, 0x30, 0x79, 0xCB, 0x30, 
   0x79, 0xCB, 0x66, 0xBC, 0xF0, 0x66, 0xBC, 0xF0, 0x39, 0x8B, 0xD9, 0x39, 0x8B, 0xD9, 0x45, 0x97, 
   0xE8, 0x45, 0x97, 0xE8, 0x2F, 0x89, 0xC0, 0x2F, 0x89, 0xC0, 0x40, 0x8D, 0xE3, 0x40, 0x8D, 0xE3, 
   0x3F, 0x92, 0xCF, 0x3F, 0x92, 0xCF, 0x15, 0x60, 0xAE, 0x15, 0x60, 0xAE, 0x3F, 0x8A, 0xD4, 0x3F, 
   0x8A, 0xD4, 0x50, 0x9C, 0xDE, 0x50, 0x9C, 0xDE, 0x62, 0xAF, 0xE8, 0x62, 0xAF, 0xE8, 0x76, 0xC0, 
   0xF6, 0x76, 0xC0, 0xF6, 0x73, 0xBC, 0xEE, 0x73, 0xBC, 0xEE, 0x42, 0x89, 0xBB, 0x42, 0x89, 0xBB, 
   0x72, 0xB7, 0xE9, 0x72, 0xB7, 0xE9, 0x49, 0xA6, 0xDE, 0x49, 0xA6, 0xDE, 0x3F, 0x94, 0xD8, 0x3F, 
   0x94, 0xD8, 0x2F, 0x7A, 0xC8, 0x2F, 0x7A, 0xC8, 0x39, 0x81, 0xCE, 0x39, 0x81, 0xCE, 0x51, 0x99, 
   0xDF, 0x51, 0x99, 0xDF, 0x2D, 0x78, 0xBC, 0x2D, 0x78, 0xBC, 0x29, 0x75, 0xC1, 0x29, 0x75, 0xC1, 
   0x32, 0x7F, 0xD5, 0x32, 0x7F, 0xD5, 0x22, 0x6D, 0xB7, 0x22, 0x6D, 0xB7, 0x25, 0x70, 0xBA, 0x25, 
   0x70, 0xBA, 0x27, 0x72, 0xBE, 0x27, 0x72, 0xBE, 0x25, 0x70, 0xBC, 0x25, 0x70, 0xBC, 0x20, 0x6A, 
   0xB8, 0x20, 0x6A, 0xB8, 0x1D, 0x66, 0xB6, 0x1D, 0x66, 0xB6, 0x1E, 0x67, 0xB9, 0x1E, 0x67, 0xB9, 
   0x20, 0x69, 0xBB, 0x20, 0x69, 0xBB, 0x1A, 0x5F, 0xB6, 0x1A, 0x5F, 0xB6, 0x17, 0x5C, 0xB3, 0x17, 
   0x5C, 0xB3, 0x13, 0x58, 0xAF, 0x13, 0x58, 0xAF, 0x12, 0x57, 0xAE, 0x12, 0x57, 0xAE, 0x18, 0x5D, 
   0xB4, 0x18, 0x5D, 0xB4, 0x23, 0x68, 0xBF, 0x23, 0x68, 0xBF, 0x29, 0x6E, 0xC5, 0x29, 0x6E, 0xC5, 
   0x2B, 0x70, 0xC7, 0x2B, 0x70, 0xC7, 0x28, 0x71, 0xC3, 0x28, 0x71, 0xC3, 0x24, 0x6D, 0xBF, 0x24, 
   0x6D, 0xBF, 0x21, 0x69, 0xBD, 0x21, 0x69, 0xBD, 0x21, 0x69, 0xBD, 0x21, 0x69, 0xBD, 0x1B, 0x62, 
   0xB9, 0x1B, 0x62, 0xB9, 0x15, 0x5C, 0xB3, 0x15, 0x5C, 0xB3, 0x16, 0x5D, 0xB5, 0x16, 0x5D, 0xB5, 
   0x1D, 0x64, 0xBC, 0x1D, 0x64, 0xBC, 0x12, 0x57, 0xB4, 0x12, 0x57, 0xB4, 0x0E, 0x53, 0xB0, 0x0E, 
   0x53, 0xB0, 0x0E, 0x53, 0xB0, 0x0E, 0x53, 0xB0, 0x12, 0x57, 0xB4, 0x12, 0x57, 0xB4, 0x17, 0x5C, 
   0xB9, 0x17, 0x5C, 0xB9, 0x1B, 0x60, 0xBD, 0x1B, 0x60, 0xBD, 0x23, 0x68, 0xC5, 0x23, 0x68, 0xC5, 
   0x2A, 0x6F, 0xCC, 0x2A, 0x6F, 0xCC, 0x27, 0x70, 0xC2, 0x27, 0x70, 0xC2, 0x2E, 0x77, 0xCB, 0x2E, 
   0x77, 0xCB, 0x29, 0x72, 0xC6, 0x29, 0x72, 0xC6, 0x27, 0x72, 0xC8, 0x27, 0x72, 0xC8, 0x16, 0x61, 
   0xB7, 0x16, 0x61, 0xB7, 0x2A, 0x77, 0xCE, 0x2A, 0x77, 0xCE, 0x2A, 0x77, 0xCE, 0x2A, 0x77, 0xCE, 
   0x1E, 0x6C, 0xC6, 0x1E, 0x6C, 0xC6, 0x52, 0x9F, 0xE8, 0x52, 0x9F, 0xE8, 0x45, 0x96, 0xDA, 0x45, 
   0x96, 0xDA, 0x6B, 0xBD, 0xFE, 0x6B, 0xBD, 0xFE, 0x32, 0x88, 0xC4, 0x32, 0x88, 0xC4, 0x44, 0x9A, 
   0xD6, 0x44, 0x9A, 0xD6, 0x4C, 0xA3, 0xE3, 0x4C, 0xA3, 0xE3, 0x3F, 0x94, 0xD8, 0x3F, 0x94, 0xD8, 
   0x37, 0x8C, 0xD4, 0x37, 0x8C, 0xD4, 0x22, 0x64, 0xBD, 0x22, 0x64, 0xBD, 0x21, 0x68, 0xC0, 0x21, 
   0x68, 0xC0, 0x1E, 0x66, 0xBE, 0x1E, 0x66, 0xBE, 0x17, 0x61, 0xB9, 0x17, 0x61, 0xB9, 0x13, 0x5D, 
   0xB5, 0x13, 0x5D, 0xB5, 0x16, 0x5E, 0xB6, 0x16, 0x5E, 0xB6, 0x17, 0x5E, 0xB6, 0x17, 0x5E, 0xB6, 
   0x18, 0x5A, 0xB3, 0x18, 0x5A, 0xB3, 0x49, 0xA6, 0xDE, 0x49, 0xA6, 0xDE, 0x3F, 0x94, 0xD8, 0x3F, 
   0x94, 0xD8, 0x2F, 0x7A, 0xC8, 0x2F, 0x7A, 0xC8, 0x39, 0x81, 0xCE, 0x39, 0x81, 0xCE, 0x51, 0x99, 
   0xDF, 0x51, 0x99, 0xDF, 0x2D, 0x78, 0xBC, 0x2D, 0x78, 0xBC, 0x29, 0x75, 0xC1, 0x29, 0x75, 0xC1, 
   0x32, 0x7F, 0xD5, 0x32, 0x7F, 0xD5, 0x22, 0x6D, 0xB7, 0x22, 0x6D, 0xB7, 0x25, 0x70, 0xBA, 0x25, 
   0x70, 0xBA, 0x27, 0x72, 0xBE, 0x27, 0x72, 0xBE, 0x25, 0x70, 0xBC, 0x25, 0x70, 0xBC, 0x20, 0x6A, 
   0xB8, 0x20, 0x6A, 0xB8, 0x1D, 0x66, 0xB6, 0x1D, 0x66, 0xB6, 0x1E, 0x67, 0xB9, 0x1E, 0x67, 0xB9, 
   0x20, 0x69, 0xBB, 0x20, 0x69, 0xBB, 0x1A, 0x5F, 0xB6, 0x1A, 0x5F, 0xB6, 0x17, 0x5C, 0xB3, 0x17, 
   0x5C, 0xB3, 0x13, 0x58, 0xAF, 0x13, 0x58, 0xAF, 0x12, 0x57, 0xAE, 0x12, 0x57, 0xAE, 0x18, 0x5D, 
   0xB4, 0x18, 0x5D, 0xB4, 0x23, 0x68, 0xBF, 0x23, 0x68, 0xBF, 0x29, 0x6E, 0xC5, 0x29, 0x6E, 0xC5, 
   0x2B, 0x70, 0xC7, 0x2B, 0x70, 0xC7, 0x28, 0x71, 0xC3, 0x28, 0x71, 0xC3, 0x24, 0x6D, 0xBF, 0x24, 
   0x6D, 0xBF, 0x21, 0x69, 0xBD, 0x21, 0x69, 0xBD, 0x21, 0x69, 0xBD, 0x21, 0x69, 0xBD, 0x1B, 0x62, 
   0xB9, 0x1B, 0x62, 0xB9, 0x15, 0x5C, 0xB3, 0x15, 0x5C, 0xB3, 0x16, 0x5D, 0xB5, 0x16, 0x5D, 0xB5, 
   0x1D, 0x64, 0xBC, 0x1D, 0x64, 0xBC, 0x12, 0x57, 0xB4, 0x12, 0x57, 0xB4, 0x0E, 0x53, 0xB0, 0x0E, 
   0x53, 0xB0, 0x0E, 0x53, 0xB0, 0x0E, 0x53, 0xB0, 0x12, 0x57, 0xB4, 0x12, 0x57, 0xB4, 0x17, 0x5C, 
   0xB9, 0x17, 0x5C, 0xB9, 0x1B, 0x60, 0xBD, 0x1B, 0x60, 0xBD, 0x23, 0x68, 0xC5, 0x23, 0x68, 0xC5, 
   0x2A, 0x6F, 0xCC, 0x2A, 0x6F, 0xCC, 0x27, 0x70, 0xC2, 0x27, 0x70, 0xC2, 0x2E, 0x77, 0xCB, 0x2E, 
   0x77, 0xCB, 0x29, 0x72, 0xC6, 0x29, 0x72, 0xC6, 0x27, 0x72, 0xC8, 0x27, 0x72, 0xC8, 0x16, 0x61, 
   0xB7, 0x16, 0x61, 0xB7, 0x2A, 0x77, 0xCE, 0x2A, 0x77, 0xCE, 0x2A, 0x77, 0xCE, 0x2A, 0x77, 0xCE, 
   0x1E, 0x6C, 0xC6, 0x1E, 0x6C, 0xC6, 0x52, 0x9F, 0xE8, 0x52, 0x9F, 0xE8, 0x45, 0x96, 0xDA, 0x45, 
   0x96, 0xDA, 0x6B, 0xBD, 0xFE, 0x6B, 0xBD, 0xFE, 0x32, 0x88, 0xC4, 0x32, 0x88, 0xC4, 0x44, 0x9A, 
   0xD6, 0x44, 0x9A, 0xD6, 0x4C, 0xA3, 0xE3, 0x4C, 0xA3, 0xE3, 0x3F, 0x94, 0xD8, 0x3F, 0x94, 0xD8, 
   0x37, 0x8C, 0xD4, 0x37, 0x8C, 0xD4, 0x22, 0x64, 0xBD, 0x22, 0x64, 0xBD, 0x21, 0x68, 0xC0, 0x21, 
   0x68, 0xC0, 0x1E, 0x66, 0xBE, 0x1E, 0x66, 0xBE, 0x17, 0x61, 0xB9, 0x17, 0x61, 0xB9, 0x13, 0x5D, 
   0xB5, 0x13, 0x5D, 0xB5, 0x16, 0x5E, 0xB6, 0x16, 0x5E, 0xB6, 0x17, 0x5E, 0xB6, 0x17, 0x5E, 0xB6, 
   0x18, 0x5A, 0xB3, 0x18, 0x5A, 0xB3, 0x47, 0xA1, 0xDA, 0x47, 0xA1, 0xDA, 0x42, 0x95, 0xD9, 0x42, 
   0x95, 0xD9, 0x2C, 0x76, 0xC4, 0x2C, 0x76, 0xC4, 0x3A, 0x80, 0xCD, 0x3A, 0x80, 0xCD, 0x4C, 0x94, 
   0xDA, 0x4C, 0x94, 0xDA, 0x31, 0x7C, 0xC0, 0x31, 0x7C, 0xC0, 0x27, 0x71, 0xBF, 0x27, 0x71, 0xBF, 
   0x2E, 0x77, 0xCD, 0x2E, 0x77, 0xCD, 0x2F, 0x77, 0xC4, 0x2F, 0x77, 0xC4, 0x2C, 0x74, 0xC2, 0x2C, 
   0x74, 0xC2, 0x27, 0x6F, 0xBD, 0x27, 0x6F, 0xBD, 0x20, 0x67, 0xB7, 0x20, 0x67, 0xB7, 0x1A, 0x60, 
   0xB3, 0x1A, 0x60, 0xB3, 0x13, 0x59, 0xAD, 0x13, 0x59, 0xAD, 0x0D, 0x53, 0xA7, 0x0D, 0x53, 0xA7, 
   0x09, 0x4E, 0xA5, 0x09, 0x4E, 0xA5, 0x0C, 0x4E, 0xA7, 0x0C, 0x4E, 0xA7, 0x0B, 0x4D, 0xA6, 0x0B, 
   0x4D, 0xA6, 0x0A, 0x4C, 0xA5, 0x0A, 0x4C, 0xA5, 0x09, 0x4B, 0xA4, 0x09, 0x4B, 0xA4, 0x08, 0x4A, 
   0xA3, 0x08, 0x4A, 0xA3, 0x05, 0x47, 0xA0, 0x05, 0x47, 0xA0, 0x00, 0x42, 0x9B, 0x00, 0x42, 0x9B, 
   0x00, 0x3C, 0x95, 0x00, 0x3C, 0x95, 0x12, 0x58, 0xAC, 0x12, 0x58, 0xAC, 0x10, 0x55, 0xAC, 0x10, 
   0x55, 0xAC, 0x12, 0x57, 0xAE, 0x12, 0x57, 0xAE, 0x13, 0x57, 0xB0, 0x13, 0x57, 0xB0, 0x0F, 0x53, 
   0xAC, 0x0F, 0x53, 0xAC, 0x07, 0x4A, 0xA6, 0x07, 0x4A, 0xA6, 0x06, 0x49, 0xA5, 0x06, 0x49, 0xA5, 
   0x0A, 0x4D, 0xA9, 0x0A, 0x4D, 0xA9, 0x0A, 0x4C, 0xAB, 0x0A, 0x4C, 0xAB, 0x06, 0x48, 0xA7, 0x06, 
   0x48, 0xA7, 0x05, 0x47, 0xA6, 0x05, 0x47, 0xA6, 0x08, 0x4A, 0xA9, 0x08, 0x4A, 0xA9, 0x09, 0x4B, 
   0xAA, 0x09, 0x4B, 0xAA, 0x09, 0x4B, 0xAA, 0x09, 0x4B, 0xAA, 0x0C, 0x4E, 0xAD, 0x0C, 0x4E, 0xAD, 
   0x10, 0x52, 0xB1, 0x10, 0x52, 0xB1, 0x21, 0x6A, 0xBA, 0x21, 0x6A, 0xBA, 0x22, 0x6D, 0xBC, 0x22, 
   0x6D, 0xBC, 0x22, 0x6C, 0xBE, 0x22, 0x6C, 0xBE, 0x2B, 0x77, 0xCA, 0x2B, 0x77, 0xCA, 0x1B, 0x67, 
   0xBA, 0x1B, 0x67, 0xBA, 0x28, 0x75, 0xCB, 0x28, 0x75, 0xCB, 0x2A, 0x77, 0xCD, 0x2A, 0x77, 0xCD, 
   0x29, 0x79, 0xCE, 0x29, 0x79, 0xCE, 0x4F, 0x9B, 0xE3, 0x4F, 0x9B, 0xE3, 0x41, 0x8E, 0xD3, 0x41, 
   0x8E, 0xD3, 0x67, 0xB7, 0xF8, 0x67, 0xB7, 0xF8, 0x35, 0x88, 0xC6, 0x35, 0x88, 0xC6, 0x4B, 0x9E, 
   0xDC, 0x4B, 0x9E, 0xDC, 0x54, 0xA8, 0xE9, 0x54, 0xA8, 0xE9, 0x4B, 0x9E, 0xE2, 0x4B, 0x9E, 0xE2, 
   0x4A, 0x9C, 0xE3, 0x4A, 0x9C, 0xE3, 0x23, 0x66, 0xBB, 0x23, 0x66, 0xBB, 0x24, 0x6A, 0xBE, 0x24, 
   0x6A, 0xBE, 0x24, 0x6C, 0xC0, 0x24, 0x6C, 0xC0, 0x23, 0x6C, 0xC0, 0x23, 0x6C, 0xC0, 0x26, 0x6F, 
   0xC3, 0x26, 0x6F, 0xC3, 0x2C, 0x74, 0xC8, 0x2C, 0x74, 0xC8, 0x2E, 0x74, 0xC8, 0x2E, 0x74, 0xC8, 
   0x2C, 0x6F, 0xC4, 0x2C, 0x6F, 0xC4, 0x47, 0xA1, 0xDA, 0x47, 0xA1, 0xDA, 0x42, 0x95, 0xD9, 0x42, 
   0x95, 0xD9, 0x2C, 0x76, 0xC4, 0x2C, 0x76, 0xC4, 0x3A, 0x80, 0xCD, 0x3A, 0x80, 0xCD, 0x4C, 0x94, 
   0xDA, 0x4C, 0x94, 0xDA, 0x31, 0x7C, 0xC0, 0x31, 0x7C, 0xC0, 0x27, 0x71, 0xBF, 0x27, 0x71, 0xBF, 
   0x2E, 0x77, 0xCD, 0x2E, 0x77, 0xCD, 0x2F, 0x77, 0xC4, 0x2F, 0x77, 0xC4, 0x2C, 0x74, 0xC2, 0x2C, 
   0x74, 0xC2, 0x27, 0x6F, 0xBD, 0x27, 0x6F, 0xBD, 0x20, 0x67, 0xB7, 0x20, 0x67, 0xB7, 0x1A, 0x60, 
   0xB3, 0x1A, 0x60, 0xB3, 0x13, 0x59, 0xAD, 0x13, 0x59, 0xAD, 0x0D, 0x53, 0xA7, 0x0D, 0x53, 0xA7, 
   0x09, 0x4E, 0xA5, 0x09, 0x4E, 0xA5, 0x0C, 0x4E, 0xA7, 0x0C, 0x4E, 0xA7, 0x0B, 0x4D, 0xA6, 0x0B, 
   0x4D, 0xA6, 0x0A, 0x4C, 0xA5, 0x0A, 0x4C, 0xA5, 0x09, 0x4B, 0xA4, 0x09, 0x4B, 0xA4, 0x08, 0x4A, 
   0xA3, 0x08, 0x4A, 0xA3, 0x05, 0x47, 0xA0, 0x05, 0x47, 0xA0, 0x00, 0x42, 0x9B, 0x00, 0x42, 0x9B, 
   0x00, 0x3C, 0x95, 0x00, 0x3C, 0x95, 0x12, 0x58, 0xAC, 0x12, 0x58, 0xAC, 0x10, 0x55, 0xAC, 0x10, 
   0x55, 0xAC, 0x12, 0x57, 0xAE, 0x12, 0x57, 0xAE, 0x13, 0x57, 0xB0, 0x13, 0x57, 0xB0, 0x0F, 0x53, 
   0xAC, 0x0F, 0x53, 0xAC, 0x07, 0x4A, 0xA6, 0x07, 0x4A, 0xA6, 0x06, 0x49, 0xA5, 0x06, 0x49, 0xA5, 
   0x0A, 0x4D, 0xA9, 0x0A, 0x4D, 0xA9, 0x0A, 0x4C, 0xAB, 0x0A, 0x4C, 0xAB, 0x06, 0x48, 0xA7, 0x06, 
   0x48, 0xA7, 0x05, 0x47, 0xA6, 0x05, 0x47, 0xA6, 0x08, 0x4A, 0xA9, 0x08, 0x4A, 0xA9, 0x09, 0x4B, 
   0xAA, 0x09, 0x4B, 0xAA, 0x09, 0x4B, 0xAA, 0x09, 0x4B, 0xAA, 0x0C, 0x4E, 0xAD, 0x0C, 0x4E, 0xAD, 
   0x10, 0x52, 0xB1, 0x10, 0x52, 0xB1, 0x21, 0x6A, 0xBA, 0x21, 0x6A, 0xBA, 0x22, 0x6D, 0xBC, 0x22, 
   0x6D, 0xBC, 0x22, 0x6C, 0xBE, 0x22, 0x6C, 0xBE, 0x2B, 0x77, 0xCA, 0x2B, 0x77, 0xCA, 0x1B, 0x67, 
   0xBA, 0x1B, 0x67, 0xBA, 0x28, 0x75, 0xCB, 0x28, 0x75, 0xCB, 0x2A, 0x77, 0xCD, 0x2A, 0x77, 0xCD, 
   0x29, 0x79, 0xCE, 0x29, 0x79, 0xCE, 0x4F, 0x9B, 0xE3, 0x4F, 0x9B, 0xE3, 0x41, 0x8E, 0xD3, 0x41, 
   0x8E, 0xD3, 0x67, 0xB7, 0xF8, 0x67, 0xB7, 0xF8, 0x35, 0x88, 0xC6, 0x35, 0x88, 0xC6, 0x4B, 0x9E, 
   0xDC, 0x4B, 0x9E, 0xDC, 0x54, 0xA8, 0xE9, 0x54, 0xA8, 0xE9, 0x4B, 0x9E, 0xE2, 0x4B, 0x9E, 0xE2, 
   0x4A, 0x9C, 0xE3, 0x4A, 0x9C, 0xE3, 0x23, 0x66, 0xBB, 0x23, 0x66, 0xBB, 0x24, 0x6A, 0xBE, 0x24, 
   0x6A, 0xBE, 0x24, 0x6C, 0xC0, 0x24, 0x6C, 0xC0, 0x23, 0x6C, 0xC0, 0x23, 0x6C, 0xC0, 0x26, 0x6F, 
   0xC3, 0x26, 0x6F, 0xC3, 0x2C, 0x74, 0xC8, 0x2C, 0x74, 0xC8, 0x2E, 0x74, 0xC8, 0x2E, 0x74, 0xC8, 
   0x2C, 0x6F, 0xC4, 0x2C, 0x6F, 0xC4, 0x47, 0x9D, 0xD9, 0x47, 0x9D, 0xD9, 0x48, 0x96, 0xDB, 0x48, 
   0x96, 0xDB, 0x2F, 0x79, 0xC7, 0x2F, 0x79, 0xC7, 0x37, 0x7C, 0xCB, 0x37, 0x7C, 0xCB, 0x4F, 0x95, 
   0xDB, 0x4F, 0x95, 0xDB, 0x38, 0x80, 0xC6, 0x38, 0x80, 0xC6, 0x2B, 0x73, 0xC1, 0x2B, 0x73, 0xC1, 
   0x26, 0x6A, 0xC3, 0x26, 0x6A, 0xC3, 0x1F, 0x62, 0xB7, 0x1F, 0x62, 0xB7, 0x1C, 0x5F, 0xB4, 0x1C, 
   0x5F, 0xB4, 0x1A, 0x5D, 0xB2, 0x1A, 0x5D, 0xB2, 0x1D, 0x60, 0xB7, 0x1D, 0x60, 0xB7, 0x22, 0x65, 
   0xBC, 0x22, 0x65, 0xBC, 0x25, 0x67, 0xC0, 0x25, 0x67, 0xC0, 0x23, 0x65, 0xBE, 0x23, 0x65, 0xBE, 
   0x20, 0x62, 0xBB, 0x20, 0x62, 0xBB, 0x14, 0x53, 0xAD, 0x14, 0x53, 0xAD, 0x16, 0x55, 0xAF, 0x16, 
   0x55, 0xAF, 0x1B, 0x5A, 0xB4, 0x1B, 0x5A, 0xB4, 0x21, 0x60, 0xBA, 0x21, 0x60, 0xBA, 0x24, 0x63, 
   0xBD, 0x24, 0x63, 0xBD, 0x21, 0x60, 0xBA, 0x21, 0x60, 0xBA, 0x1C, 0x5B, 0xB5, 0x1C, 0x5B, 0xB5, 
   0x18, 0x57, 0xB1, 0x18, 0x57, 0xB1, 0x0E, 0x50, 0xA9, 0x0E, 0x50, 0xA9, 0x10, 0x51, 0xAD, 0x10, 
   0x51, 0xAD, 0x15, 0x56, 0xB2, 0x15, 0x56, 0xB2, 0x1A, 0x5A, 0xB8, 0x1A, 0x5A, 0xB8, 0x19, 0x59, 
   0xB7, 0x19, 0x59, 0xB7, 0x13, 0x53, 0xB2, 0x13, 0x53, 0xB2, 0x10, 0x50, 0xAF, 0x10, 0x50, 0xAF, 
   0x11, 0x51, 0xB0, 0x11, 0x51, 0xB0, 0x22, 0x61, 0xC3, 0x22, 0x61, 0xC3, 0x15, 0x54, 0xB6, 0x15, 
   0x54, 0xB6, 0x08, 0x47, 0xA9, 0x08, 0x47, 0xA9, 0x01, 0x40, 0xA2, 0x01, 0x40, 0xA2, 0x02, 0x41, 
   0xA3, 0x02, 0x41, 0xA3, 0x0A, 0x49, 0xAB, 0x0A, 0x49, 0xAB, 0x18, 0x57, 0xB9, 0x18, 0x57, 0xB9, 
   0x25, 0x64, 0xC6, 0x25, 0x64, 0xC6, 0x2F, 0x79, 0xC7, 0x2F, 0x79, 0xC7, 0x36, 0x81, 0xCF, 0x36, 
   0x81, 0xCF, 0x37, 0x82, 0xD0, 0x37, 0x82, 0xD0, 0x3B, 0x88, 0xD7, 0x3B, 0x88, 0xD7, 0x27, 0x74, 
   0xC3, 0x27, 0x74, 0xC3, 0x35, 0x84, 0xD5, 0x35, 0x84, 0xD5, 0x34, 0x82, 0xD5, 0x34, 0x82, 0xD5, 
   0x2F, 0x7F, 0xD2, 0x2F, 0x7F, 0xD2, 0x52, 0x9C, 0xE4, 0x52, 0x9C, 0xE4, 0x3E, 0x89, 0xCE, 0x3E, 
   0x89, 0xCE, 0x63, 0xAF, 0xF1, 0x63, 0xAF, 0xF1, 0x35, 0x84, 0xC3, 0x35, 0x84, 0xC3, 0x4A, 0x99, 
   0xD8, 0x4A, 0x99, 0xD8, 0x50, 0xA0, 0xE1, 0x50, 0xA0, 0xE1, 0x47, 0x98, 0xDC, 0x47, 0x98, 0xDC, 
   0x4C, 0x9C, 0xE3, 0x4C, 0x9C, 0xE3, 0x24, 0x65, 0xB6, 0x24, 0x65, 0xB6, 0x2B, 0x70, 0xC0, 0x2B, 
   0x70, 0xC0, 0x34, 0x7B, 0xCB, 0x34, 0x7B, 0xCB, 0x3A, 0x83, 0xD3, 0x3A, 0x83, 0xD3, 0x40, 0x89, 
   0xD9, 0x40, 0x89, 0xD9, 0x45, 0x8C, 0xDC, 0x45, 0x8C, 0xDC, 0x43, 0x88, 0xD8, 0x43, 0x88, 0xD8, 
   0x3F, 0x80, 0xD1, 0x3F, 0x80, 0xD1, 0x47, 0x9D, 0xD9, 0x47, 0x9D, 0xD9, 0x48, 0x96, 0xDB, 0x48, 
   0x96, 0xDB, 0x2F, 0x79, 0xC7, 0x2F, 0x79, 0xC7, 0x37, 0x7C, 0xCB, 0x37, 0x7C, 0xCB, 0x4F, 0x95, 
   0xDB, 0x4F, 0x95, 0xDB, 0x38, 0x80, 0xC6, 0x38, 0x80, 0xC6, 0x2B, 0x73, 0xC1, 0x2B, 0x73, 0xC1, 
   0x26, 0x6A, 0xC3, 0x26, 0x6A, 0xC3, 0x1F, 0x62, 0xB7, 0x1F, 0x62, 0xB7, 0x1C, 0x5F, 0xB4, 0x1C, 
   0x5F, 0xB4, 0x1A, 0x5D, 0xB2, 0x1A, 0x5D, 0xB2, 0x1D, 0x60, 0xB7, 0x1D, 0x60, 0xB7, 0x22, 0x65, 
   0xBC, 0x22, 0x65, 0xBC, 0x25, 0x67, 0xC0, 0x25, 0x67, 0xC0, 0x23, 0x65, 0xBE, 0x23, 0x65, 0xBE, 
   0x20, 0x62, 0xBB, 0x20, 0x62, 0xBB, 0x14, 0x53, 0xAD, 0x14, 0x53, 0xAD, 0x16, 0x55, 0xAF, 0x16, 
   0x55, 0xAF, 0x1B, 0x5A, 0xB4, 0x1B, 0x5A, 0xB4, 0x21, 0x60, 0xBA, 0x21, 0x60, 0xBA, 0x24, 0x63, 
   0xBD, 0x24, 0x63, 0xBD, 0x21, 0x60, 0xBA, 0x21, 0x60, 0xBA, 0x1C, 0x5B, 0xB5, 0x1C, 0x5B, 0xB5, 
   0x18, 0x57, 0xB1, 0x18, 0x57, 0xB1, 0x0E, 0x50, 0xA9, 0x0E, 0x50, 0xA9, 0x10, 0x51, 0xAD, 0x10, 
   0x51, 0xAD, 0x15, 0x56, 0xB2, 0x15, 0x56, 0xB2, 0x1A, 0x5A, 0xB8, 0x1A, 0x5A, 0xB8, 0x19, 0x59, 
   0xB7, 0x19, 0x59, 0xB7, 0x13, 0x53, 0xB2, 0x13, 0x53, 0xB2, 0x10, 0x50, 0xAF, 0x10, 0x50, 0xAF, 
   0x11, 0x51, 0xB0, 0x11, 0x51, 0xB0, 0x22, 0x61, 0xC3, 0x22, 0x61, 0xC3, 0x15, 0x54, 0xB6, 0x15, 
   0x54, 0xB6, 0x08, 0x47, 0xA9, 0x08, 0x47, 0xA9, 0x01, 0x40, 0xA2, 0x01, 0x40, 0xA2, 0x02, 0x41, 
   0xA3, 0x02, 0x41, 0xA3, 0x0A, 0x49, 0xAB, 0x0A, 0x49, 0xAB, 0x18, 0x57, 0xB9, 0x18, 0x57, 0xB9, 
   0x25, 0x64, 0xC6, 0x25, 0x64, 0xC6, 0x2F, 0x79, 0xC7, 0x2F, 0x79, 0xC7, 0x36, 0x81, 0xCF, 0x36, 
   0x81, 0xCF, 0x37, 0x82, 0xD0, 0x37, 0x82, 0xD0, 0x3B, 0x88, 0xD7, 0x3B, 0x88, 0xD7, 0x27, 0x74, 
   0xC3, 0x27, 0x74, 0xC3, 0x35, 0x84, 0xD5, 0x35, 0x84, 0xD5, 0x34, 0x82, 0xD5, 0x34, 0x82, 0xD5, 
   0x2F, 0x7F, 0xD2, 0x2F, 0x7F, 0xD2, 0x52, 0x9C, 0xE4, 0x52, 0x9C, 0xE4, 0x3E, 0x89, 0xCE, 0x3E, 
   0x89, 0xCE, 0x63, 0xAF, 0xF1, 0x63, 0xAF, 0xF1, 0x35, 0x84, 0xC3, 0x35, 0x84, 0xC3, 0x4A, 0x99, 
   0xD8, 0x4A, 0x99, 0xD8, 0x50, 0xA0, 0xE1, 0x50, 0xA0, 0xE1, 0x47, 0x98, 0xDC, 0x47, 0x98, 0xDC, 
   0x4C, 0x9C, 0xE3, 0x4C, 0x9C, 0xE3, 0x24, 0x65, 0xB6, 0x24, 0x65, 0xB6, 0x2B, 0x70, 0xC0, 0x2B, 
   0x70, 0xC0, 0x34, 0x7B, 0xCB, 0x34, 0x7B, 0xCB, 0x3A, 0x83, 0xD3, 0x3A, 0x83, 0xD3, 0x40, 0x89, 
   0xD9, 0x40, 0x89, 0xD9, 0x45, 0x8C, 0xDC, 0x45, 0x8C, 0xDC, 0x43, 0x88, 0xD8, 0x43, 0x88, 0xD8, 
   0x3F, 0x80, 0xD1, 0x3F, 0x80, 0xD1, 0x4C, 0x9D, 0xDA, 0x4C, 0x9D, 0xDA, 0x47, 0x93, 0xDB, 0x47, 
   0x93, 0xDB, 0x3D, 0x84, 0xD4, 0x3D, 0x84, 0xD4, 0x2E, 0x73, 0xC2, 0x2E, 0x73, 0xC2, 0x59, 0xA1, 
   0xE9, 0x59, 0xA1, 0xE9, 0x37, 0x7F, 0xC5, 0x37, 0x7F, 0xC5, 0x34, 0x79, 0xC9, 0x34, 0x79, 0xC9, 
   0x1F, 0x61, 0xBA, 0x1F, 0x61, 0xBA, 0x19, 0x5A, 0xB6, 0x19, 0x5A, 0xB6, 0x17, 0x58, 0xB4, 0x17, 
   0x58, 0xB4, 0x15, 0x56, 0xB2, 0x15, 0x56, 0xB2, 0x15, 0x56, 0xB2, 0x15, 0x56, 0xB2, 0x17, 0x58, 
   0xB4, 0x17, 0x58, 0xB4, 0x17, 0x57, 0xB5, 0x17, 0x57, 0xB5, 0x16, 0x56, 0xB4, 0x16, 0x56, 0xB4, 
   0x14, 0x54, 0xB2, 0x14, 0x54, 0xB2, 0x2E, 0x6D, 0xC9, 0x2E, 0x6D, 0xC9, 0x29, 0x68, 0xC4, 0x29, 
   0x68, 0xC4, 0x26, 0x65, 0xC1, 0x26, 0x65, 0xC1, 0x23, 0x62, 0xBE, 0x23, 0x62, 0xBE, 0x1F, 0x5E, 
   0xBA, 0x1F, 0x5E, 0xBA, 0x18, 0x57, 0xB3, 0x18, 0x57, 0xB3, 0x14, 0x53, 0xAF, 0x14, 0x53, 0xAF, 
   0x14, 0x53, 0xAF, 0x14, 0x53, 0xAF, 0x1A, 0x5A, 0xB8, 0x1A, 0x5A, 0xB8, 0x1C, 0x5C, 0xBA, 0x1C, 
   0x5C, 0xBA, 0x20, 0x60, 0xBF, 0x20, 0x60, 0xBF, 0x22, 0x62, 0xC1, 0x22, 0x62, 0xC1, 0x20, 0x5F, 
   0xC1, 0x20, 0x5F, 0xC1, 0x1C, 0x5A, 0xBE, 0x1C, 0x5A, 0xBE, 0x17, 0x55, 0xB9, 0x17, 0x55, 0xB9, 
   0x15, 0x53, 0xB7, 0x15, 0x53, 0xB7, 0x0B, 0x4A, 0xAC, 0x0B, 0x4A, 0xAC, 0x0F, 0x4E, 0xB0, 0x0F, 
   0x4E, 0xB0, 0x19, 0x58, 0xBA, 0x19, 0x58, 0xBA, 0x24, 0x63, 0xC5, 0x24, 0x63, 0xC5, 0x27, 0x66, 
   0xC8, 0x27, 0x66, 0xC8, 0x22, 0x61, 0xC3, 0x22, 0x61, 0xC3, 0x1C, 0x5B, 0xBD, 0x1C, 0x5B, 0xBD, 
   0x1B, 0x5A, 0xBC, 0x1B, 0x5A, 0xBC, 0x2B, 0x76, 0xC0, 0x2B, 0x76, 0xC0, 0x3D, 0x89, 0xD5, 0x3D, 
   0x89, 0xD5, 0x3E, 0x8A, 0xD6, 0x3E, 0x8A, 0xD6, 0x37, 0x85, 0xD2, 0x37, 0x85, 0xD2, 0x20, 0x6E, 
   0xBB, 0x20, 0x6E, 0xBB, 0x34, 0x83, 0xD2, 0x34, 0x83, 0xD2, 0x31, 0x80, 0xCF, 0x31, 0x80, 0xCF, 
   0x22, 0x73, 0xC4, 0x22, 0x73, 0xC4, 0x57, 0x9D, 0xE3, 0x57, 0x9D, 0xE3, 0x3B, 0x84, 0xC8, 0x3B, 
   0x84, 0xC8, 0x5E, 0xA7, 0xEB, 0x5E, 0xA7, 0xEB, 0x32, 0x7E, 0xC0, 0x32, 0x7E, 0xC0, 0x47, 0x93, 
   0xD5, 0x47, 0x93, 0xD5, 0x49, 0x97, 0xDA, 0x49, 0x97, 0xDA, 0x43, 0x91, 0xD4, 0x43, 0x91, 0xD4, 
   0x4C, 0x9A, 0xDF, 0x4C, 0x9A, 0xDF, 0x25, 0x67, 0xB5, 0x25, 0x67, 0xB5, 0x2E, 0x72, 0xBF, 0x2E, 
   0x72, 0xBF, 0x33, 0x7B, 0xC8, 0x33, 0x7B, 0xC8, 0x33, 0x7E, 0xCA, 0x33, 0x7E, 0xCA, 0x33, 0x7E, 
   0xCA, 0x33, 0x7E, 0xCA, 0x38, 0x80, 0xCD, 0x38, 0x80, 0xCD, 0x3E, 0x82, 0xCF, 0x3E, 0x82, 0xCF, 
   0x3E, 0x80, 0xCE, 0x3E, 0x80, 0xCE, 0x4C, 0x9D, 0xDA, 0x4C, 0x9D, 0xDA, 0x47, 0x93, 0xDB, 0x47, 
   0x93, 0xDB, 0x3D, 0x84, 0xD4, 0x3D, 0x84, 0xD4, 0x2E, 0x73, 0xC2, 0x2E, 0x73, 0xC2, 0x59, 0xA1, 
   0xE9, 0x59, 0xA1, 0xE9, 0x37, 0x7F, 0xC5, 0x37, 0x7F, 0xC5, 0x34, 0x79, 0xC9, 0x34, 0x79, 0xC9, 
   0x1F, 0x61, 0xBA, 0x1F, 0x61, 0xBA, 0x19, 0x5A, 0xB6, 0x19, 0x5A, 0xB6, 0x17, 0x58, 0xB4, 0x17, 
   0x58, 0xB4, 0x15, 0x56, 0xB2, 0x15, 0x56, 0xB2, 0x15, 0x56, 0xB2, 0x15, 0x56, 0xB2, 0x17, 0x58, 
   0xB4, 0x17, 0x58, 0xB4, 0x17, 0x57, 0xB5, 0x17, 0x57, 0xB5, 0x16, 0x56, 0xB4, 0x16, 0x56, 0xB4, 
   0x14, 0x54, 0xB2, 0x14, 0x54, 0xB2, 0x2E, 0x6D, 0xC9, 0x2E, 0x6D, 0xC9, 0x29, 0x68, 0xC4, 0x29, 
   0x68, 0xC4, 0x26, 0x65, 0xC1, 0x26, 0x65, 0xC1, 0x23, 0x62, 0xBE, 0x23, 0x62, 0xBE, 0x1F, 0x5E, 
   0xBA, 0x1F, 0x5E, 0xBA, 0x18, 0x57, 0xB3, 0x18, 0x57, 0xB3, 0x14, 0x53, 0xAF, 0x14, 0x53, 0xAF, 
   0x14, 0x53, 0xAF, 0x14, 0x53, 0xAF, 0x1A, 0x5A, 0xB8, 0x1A, 0x5A, 0xB8, 0x1C, 0x5C, 0xBA, 0x1C, 
   0x5C, 0xBA, 0x20, 0x60, 0xBF, 0x20, 0x60, 0xBF, 0x22, 0x62, 0xC1, 0x22, 0x62, 0xC1, 0x20, 0x5F, 
   0xC1, 0x20, 0x5F, 0xC1, 0x1C, 0x5A, 0xBE, 0x1C, 0x5A, 0xBE, 0x17, 0x55, 0xB9, 0x17, 0x55, 0xB9, 
   0x15, 0x53, 0xB7, 0x15, 0x53, 0xB7, 0x0B, 0x4A, 0xAC, 0x0B, 0x4A, 0xAC, 0x0F, 0x4E, 0xB0, 0x0F, 
   0x4E, 0xB0, 0x19, 0x58, 0xBA, 0x19, 0x58, 0xBA, 0x24, 0x63, 0xC5, 0x24, 0x63, 0xC5, 0x27, 0x66, 
   0xC8, 0x27, 0x66, 0xC8, 0x22, 0x61, 0xC3, 0x22, 0x61, 0xC3, 0x1C, 0x5B, 0xBD, 0x1C, 0x5B, 0xBD, 
   0x1B, 0x5A, 0xBC, 0x1B, 0x5A, 0xBC, 0x2B, 0x76, 0xC0, 0x2B, 0x76, 0xC0, 0x3D, 0x89, 0xD5, 0x3D, 
   0x89, 0xD5, 0x3E, 0x8A, 0xD6, 0x3E, 0x8A, 0xD6, 0x37, 0x85, 0xD2, 0x37, 0x85, 0xD2, 0x20, 0x6E, 
   0xBB, 0x20, 0x6E, 0xBB, 0x34, 0x83, 0xD2, 0x34, 0x83, 0xD2, 0x31, 0x80, 0xCF, 0x31, 0x80, 0xCF, 
   0x22, 0x73, 0xC4, 0x22, 0x73, 0xC4, 0x57, 0x9D, 0xE3, 0x57, 0x9D, 0xE3, 0x3B, 0x84, 0xC8, 0x3B, 
   0x84, 0xC8, 0x5E, 0xA7, 0xEB, 0x5E, 0xA7, 0xEB, 0x32, 0x7E, 0xC0, 0x32, 0x7E, 0xC0, 0x47, 0x93, 
   0xD5, 0x47, 0x93, 0xD5, 0x49, 0x97, 0xDA, 0x49, 0x97, 0xDA, 0x43, 0x91, 0xD4, 0x43, 0x91, 0xD4, 
   0x4C, 0x9A, 0xDF, 0x4C, 0x9A, 0xDF, 0x25, 0x67, 0xB5, 0x25, 0x67, 0xB5, 0x2E, 0x72, 0xBF, 0x2E, 
   0x72, 0xBF, 0x33, 0x7B, 0xC8, 0x33, 0x7B, 0xC8, 0x33, 0x7E, 0xCA, 0x33, 0x7E, 0xCA, 0x33, 0x7E, 
   0xCA, 0x33, 0x7E, 0xCA, 0x38, 0x80, 0xCD, 0x38, 0x80, 0xCD, 0x3E, 0x82, 0xCF, 0x3E, 0x82, 0xCF, 
   0x3E, 0x80, 0xCE, 0x3E, 0x80, 0xCE, 0x4D, 0x9C, 0xDB, 0x4D, 0x9C, 0xDB, 0x40, 0x8C, 0xD4, 0x40, 
   0x8C, 0xD4, 0x44, 0x8D, 0xDF, 0x44, 0x8D, 0xDF, 0x1F, 0x68, 0xB8, 0x1F, 0x68, 0xB8, 0x61, 0xAC, 
   0xF6, 0x61, 0xAC, 0xF6, 0x2D, 0x77, 0xBF, 0x2D, 0x77, 0xBF, 0x3A, 0x7F, 0xCF, 0x3A, 0x7F, 0xCF, 
   0x19, 0x58, 0xB4, 0x19, 0x58, 0xB4, 0x20, 0x60, 0xBF, 0x20, 0x60, 0xBF, 0x21, 0x61, 0xC0, 0x21, 
   0x61, 0xC0, 0x20, 0x60, 0xBF, 0x20, 0x60, 0xBF, 0x1C, 0x5C, 0xBB, 0x1C, 0x5C, 0xBB, 0x18, 0x58, 
   0xB6, 0x18, 0x58, 0xB6, 0x16, 0x56, 0xB4, 0x16, 0x56, 0xB4, 0x17, 0x57, 0xB5, 0x17, 0x57, 0xB5, 
   0x18, 0x58, 0xB6, 0x18, 0x58, 0xB6, 0x06, 0x45, 0xA1, 0x06, 0x45, 0xA1, 0x03, 0x42, 0x9E, 0x03, 
   0x42, 0x9E, 0x06, 0x45, 0xA1, 0x06, 0x45, 0xA1, 0x0D, 0x4C, 0xA8, 0x0D, 0x4C, 0xA8, 0x12, 0x51, 
   0xAD, 0x12, 0x51, 0xAD, 0x15, 0x54, 0xB0, 0x15, 0x54, 0xB0, 0x1C, 0x5B, 0xB7, 0x1C, 0x5B, 0xB7, 
   0x24, 0x63, 0xBF, 0x24, 0x63, 0xBF, 0x1C, 0x5C, 0xBB, 0x1C, 0x5C, 0xBB, 0x1C, 0x5C, 0xBB, 0x1C, 
   0x5C, 0xBB, 0x1B, 0x5B, 0xBA, 0x1B, 0x5B, 0xBA, 0x18, 0x57, 0xB9, 0x18, 0x57, 0xB9, 0x16, 0x54, 
   0xB8, 0x16, 0x54, 0xB8, 0x13, 0x51, 0xB5, 0x13, 0x51, 0xB5, 0x0E, 0x4C, 0xB2, 0x0E, 0x4C, 0xB2, 
   0x0B, 0x49, 0xAF, 0x0B, 0x49, 0xAF, 0x1A, 0x59, 0xBB, 0x1A, 0x59, 0xBB, 0x12, 0x51, 0xB3, 0x12, 
   0x51, 0xB3, 0x0A, 0x49, 0xAB, 0x0A, 0x49, 0xAB, 0x09, 0x48, 0xAA, 0x09, 0x48, 0xAA, 0x0C, 0x4B, 
   0xAD, 0x0C, 0x4B, 0xAD, 0x13, 0x52, 0xB4, 0x13, 0x52, 0xB4, 0x1E, 0x5D, 0xBF, 0x1E, 0x5D, 0xBF, 
   0x29, 0x68, 0xCA, 0x29, 0x68, 0xCA, 0x2D, 0x78, 0xC2, 0x2D, 0x78, 0xC2, 0x32, 0x7E, 0xCA, 0x32, 
   0x7E, 0xCA, 0x34, 0x80, 0xCC, 0x34, 0x80, 0xCC, 0x3C, 0x8A, 0xD7, 0x3C, 0x8A, 0xD7, 0x27, 0x75, 
   0xC2, 0x27, 0x75, 0xC2, 0x30, 0x7F, 0xCE, 0x30, 0x7F, 0xCE, 0x2D, 0x7C, 0xCB, 0x2D, 0x7C, 0xCB, 
   0x2A, 0x7B, 0xCC, 0x2A, 0x7B, 0xCC, 0x54, 0x9B, 0xDE, 0x54, 0x9B, 0xDE, 0x38, 0x81, 0xC5, 0x38, 
   0x81, 0xC5, 0x5C, 0xA5, 0xE9, 0x5C, 0xA5, 0xE9, 0x31, 0x7C, 0xC1, 0x31, 0x7C, 0xC1, 0x48, 0x93, 
   0xD8, 0x48, 0x93, 0xD8, 0x4C, 0x9A, 0xDD, 0x4C, 0x9A, 0xDD, 0x49, 0x97, 0xDA, 0x49, 0x97, 0xDA, 
   0x54, 0xA4, 0xE5, 0x54, 0xA4, 0xE5, 0x28, 0x6A, 0xB8, 0x28, 0x6A, 0xB8, 0x2F, 0x75, 0xC2, 0x2F, 
   0x75, 0xC2, 0x30, 0x78, 0xC5, 0x30, 0x78, 0xC5, 0x24, 0x6F, 0xBB, 0x24, 0x6F, 0xBB, 0x1A, 0x65, 
   0xB1, 0x1A, 0x65, 0xB1, 0x1D, 0x65, 0xB2, 0x1D, 0x65, 0xB2, 0x27, 0x6D, 0xBA, 0x27, 0x6D, 0xBA, 
   0x30, 0x72, 0xC0, 0x30, 0x72, 0xC0, 0x4D, 0x9C, 0xDB, 0x4D, 0x9C, 0xDB, 0x40, 0x8C, 0xD4, 0x40, 
   0x8C, 0xD4, 0x44, 0x8D, 0xDF, 0x44, 0x8D, 0xDF, 0x1F, 0x68, 0xB8, 0x1F, 0x68, 0xB8, 0x61, 0xAC, 
   0xF6, 0x61, 0xAC, 0xF6, 0x2D, 0x77, 0xBF, 0x2D, 0x77, 0xBF, 0x3A, 0x7F, 0xCF, 0x3A, 0x7F, 0xCF, 
   0x19, 0x58, 0xB4, 0x19, 0x58, 0xB4, 0x20, 0x60, 0xBF, 0x20, 0x60, 0xBF, 0x21, 0x61, 0xC0, 0x21, 
   0x61, 0xC0, 0x20, 0x60, 0xBF, 0x20, 0x60, 0xBF, 0x1C, 0x5C, 0xBB, 0x1C, 0x5C, 0xBB, 0x18, 0x58, 
   0xB6, 0x18, 0x58, 0xB6, 0x16, 0x56, 0xB4, 0x16, 0x56, 0xB4, 0x17, 0x57, 0xB5, 0x17, 0x57, 0xB5, 
   0x18, 0x58, 0xB6, 0x18, 0x58, 0xB6, 0x06, 0x45, 0xA1, 0x06, 0x45, 0xA1, 0x03, 0x42, 0x9E, 0x03, 
   0x42, 0x9E, 0x06, 0x45, 0xA1, 0x06, 0x45, 0xA1, 0x0D, 0x4C, 0xA8, 0x0D, 0x4C, 0xA8, 0x12, 0x51, 
   0xAD, 0x12, 0x51, 0xAD, 0x15, 0x54, 0xB0, 0x15, 0x54, 0xB0, 0x1C, 0x5B, 0xB7, 0x1C, 0x5B, 0xB7, 
   0x24, 0x63, 0xBF, 0x24, 0x63, 0xBF, 0x1C, 0x5C, 0xBB, 0x1C, 0x5C, 0xBB, 0x1C, 0x5C, 0xBB, 0x1C, 
   0x5C, 0xBB, 0x1B, 0x5B, 0xBA, 0x1B, 0x5B, 0xBA, 0x18, 0x57, 0xB9, 0x18, 0x57, 0xB9, 0x16, 0x54, 
   0xB8, 0x16, 0x54, 0xB8, 0x13, 0x51, 0xB5, 0x13, 0x51, 0xB5, 0x0E, 0x4C, 0xB2, 0x0E, 0x4C, 0xB2, 
   0x0B, 0x49, 0xAF, 0x0B, 0x49, 0xAF, 0x1A, 0x59, 0xBB, 0x1A, 0x59, 0xBB, 0x12, 0x51, 0xB3, 0x12, 
   0x51, 0xB3, 0x0A, 0x49, 0xAB, 0x0A, 0x49, 0xAB, 0x09, 0x48, 0xAA, 0x09, 0x48, 0xAA, 0x0C, 0x4B, 
   0xAD, 0x0C, 0x4B, 0xAD, 0x13, 0x52, 0xB4, 0x13, 0x52, 0xB4, 0x1E, 0x5D, 0xBF, 0x1E, 0x5D, 0xBF, 
   0x29, 0x68, 0xCA, 0x29, 0x68, 0xCA, 0x2D, 0x78, 0xC2, 0x2D, 0x78, 0xC2, 0x32, 0x7E, 0xCA, 0x32, 
   0x7E, 0xCA, 0x34, 0x80, 0xCC, 0x34, 0x80, 0xCC, 0x3C, 0x8A, 0xD7, 0x3C, 0x8A, 0xD7, 0x27, 0x75, 
   0xC2, 0x27, 0x75, 0xC2, 0x30, 0x7F, 0xCE, 0x30, 0x7F, 0xCE, 0x2D, 0x7C, 0xCB, 0x2D, 0x7C, 0xCB, 
   0x2A, 0x7B, 0xCC, 0x2A, 0x7B, 0xCC, 0x54, 0x9B, 0xDE, 0x54, 0x9B, 0xDE, 0x38, 0x81, 0xC5, 0x38, 
   0x81, 0xC5, 0x5C, 0xA5, 0xE9, 0x5C, 0xA5, 0xE9, 0x31, 0x7C, 0xC1, 0x31, 0x7C, 0xC1, 0x48, 0x93, 
   0xD8, 0x48, 0x93, 0xD8, 0x4C, 0x9A, 0xDD, 0x4C, 0x9A, 0xDD, 0x49, 0x97, 0xDA, 0x49, 0x97, 0xDA, 
   0x54, 0xA4, 0xE5, 0x54, 0xA4, 0xE5, 0x28, 0x6A, 0xB8, 0x28, 0x6A, 0xB8, 0x2F, 0x75, 0xC2, 0x2F, 
   0x75, 0xC2, 0x30, 0x78, 0xC5, 0x30, 0x78, 0xC5, 0x24, 0x6F, 0xBB, 0x24, 0x6F, 0xBB, 0x1A, 0x65, 
   0xB1, 0x1A, 0x65, 0xB1, 0x1D, 0x65, 0xB2, 0x1D, 0x65, 0xB2, 0x27, 0x6D, 0xBA, 0x27, 0x6D, 0xBA, 
   0x30, 0x72, 0xC0, 0x30, 0x72, 0xC0, 0x49, 0x99, 0xD8, 0x49, 0x99, 0xD8, 0x38, 0x87, 0xD0, 0x38, 
   0x87, 0xD0, 0x3E, 0x8D, 0xDE, 0x3E, 0x8D, 0xDE, 0x17, 0x66, 0xB7, 0x17, 0x66, 0xB7, 0x5E, 0xAD, 
   0xF6, 0x5E, 0xAD, 0xF6, 0x24, 0x71, 0xBA, 0x24, 0x71, 0xBA, 0x34, 0x7A, 0xCD, 0x34, 0x7A, 0xCD, 
   0x15, 0x56, 0xB2, 0x15, 0x56, 0xB2, 0x04, 0x48, 0xA9, 0x04, 0x48, 0xA9, 0x08, 0x4C, 0xAD, 0x08, 
   0x4C, 0xAD, 0x0C, 0x50, 0xAF, 0x0C, 0x50, 0xAF, 0x0D, 0x51, 0xB0, 0x0D, 0x51, 0xB0, 0x0C, 0x51, 
   0xAE, 0x0C, 0x51, 0xAE, 0x0F, 0x54, 0xB1, 0x0F, 0x54, 0xB1, 0x15, 0x5B, 0xB6, 0x15, 0x5B, 0xB6, 
   0x1B, 0x61, 0xBC, 0x1B, 0x61, 0xBC, 0x20, 0x63, 0xC0, 0x20, 0x63, 0xC0, 0x1C, 0x5F, 0xBC, 0x1C, 
   0x5F, 0xBC, 0x1C, 0x5F, 0xBC, 0x1C, 0x5F, 0xBC, 0x20, 0x63, 0xC0, 0x20, 0x63, 0xC0, 0x1C, 0x5F, 
   0xBC, 0x1C, 0x5F, 0xBC, 0x13, 0x56, 0xB3, 0x13, 0x56, 0xB3, 0x11, 0x54, 0xB1, 0x11, 0x54, 0xB1, 
   0x16, 0x59, 0xB6, 0x16, 0x59, 0xB6, 0x11, 0x56, 0xB3, 0x11, 0x56, 0xB3, 0x13, 0x58, 0xB5, 0x13, 
   0x58, 0xB5, 0x13, 0x57, 0xB6, 0x13, 0x57, 0xB6, 0x12, 0x56, 0xB5, 0x12, 0x56, 0xB5, 0x15, 0x59, 
   0xBA, 0x15, 0x59, 0xBA, 0x1A, 0x5D, 0xC0, 0x1A, 0x5D, 0xC0, 0x1A, 0x5D, 0xC0, 0x1A, 0x5D, 0xC0, 
   0x17, 0x5A, 0xBD, 0x17, 0x5A, 0xBD, 0x14, 0x59, 0xB6, 0x14, 0x59, 0xB6, 0x13, 0x58, 0xB5, 0x13, 
   0x58, 0xB5, 0x15, 0x5A, 0xB7, 0x15, 0x5A, 0xB7, 0x1A, 0x5F, 0xBC, 0x1A, 0x5F, 0xBC, 0x1A, 0x5F, 
   0xBC, 0x1A, 0x5F, 0xBC, 0x15, 0x5A, 0xB7, 0x15, 0x5A, 0xB7, 0x13, 0x58, 0xB5, 0x13, 0x58, 0xB5, 
   0x14, 0x59, 0xB6, 0x14, 0x59, 0xB6, 0x41, 0x8B, 0xD9, 0x41, 0x8B, 0xD9, 0x2B, 0x76, 0xC4, 0x2B, 
   0x76, 0xC4, 0x29, 0x74, 0xC2, 0x29, 0x74, 0xC2, 0x49, 0x96, 0xE5, 0x49, 0x96, 0xE5, 0x35, 0x82, 
   0xD1, 0x35, 0x82, 0xD1, 0x26, 0x75, 0xC6, 0x26, 0x75, 0xC6, 0x20, 0x6E, 0xC1, 0x20, 0x6E, 0xC1, 
   0x32, 0x82, 0xD5, 0x32, 0x82, 0xD5, 0x51, 0x9E, 0xDD, 0x51, 0x9E, 0xDD, 0x3B, 0x87, 0xC9, 0x3B, 
   0x87, 0xC9, 0x5D, 0xA8, 0xED, 0x5D, 0xA8, 0xED, 0x2C, 0x78, 0xC0, 0x2C, 0x78, 0xC0, 0x41, 0x8D, 
   0xD5, 0x41, 0x8D, 0xD5, 0x49, 0x97, 0xDC, 0x49, 0x97, 0xDC, 0x43, 0x95, 0xD6, 0x43, 0x95, 0xD6, 
   0x4A, 0x9D, 0xDB, 0x4A, 0x9D, 0xDB, 0x25, 0x6B, 0xB8, 0x25, 0x6B, 0xB8, 0x35, 0x7D, 0xCA, 0x35, 
   0x7D, 0xCA, 0x3F, 0x8B, 0xD7, 0x3F, 0x8B, 0xD7, 0x3A, 0x88, 0xD4, 0x3A, 0x88, 0xD4, 0x2C, 0x7A, 
   0xC6, 0x2C, 0x7A, 0xC6, 0x23, 0x6F, 0xBB, 0x23, 0x6F, 0xBB, 0x20, 0x68, 0xB5, 0x20, 0x68, 0xB5, 
   0x20, 0x66, 0xB3, 0x20, 0x66, 0xB3, 0x49, 0x99, 0xD8, 0x49, 0x99, 0xD8, 0x38, 0x87, 0xD0, 0x38, 
   0x87, 0xD0, 0x3E, 0x8D, 0xDE, 0x3E, 0x8D, 0xDE, 0x17, 0x66, 0xB7, 0x17, 0x66, 0xB7, 0x5E, 0xAD, 
   0xF6, 0x5E, 0xAD, 0xF6, 0x24, 0x71, 0xBA, 0x24, 0x71, 0xBA, 0x34, 0x7A, 0xCD, 0x34, 0x7A, 0xCD, 
   0x15, 0x56, 0xB2, 0x15, 0x56, 0xB2, 0x04, 0x48, 0xA9, 0x04, 0x48, 0xA9, 0x08, 0x4C, 0xAD, 0x08, 
   0x4C, 0xAD, 0x0C, 0x50, 0xAF, 0x0C, 0x50, 0xAF, 0x0D, 0x51, 0xB0, 0x0D, 0x51, 0xB0, 0x0C, 0x51, 
   0xAE, 0x0C, 0x51, 0xAE, 0x0F, 0x54, 0xB1, 0x0F, 0x54, 0xB1, 0x15, 0x5B, 0xB6, 0x15, 0x5B, 0xB6, 
   0x1B, 0x61, 0xBC, 0x1B, 0x61, 0xBC, 0x20, 0x63, 0xC0, 0x20, 0x63, 0xC0, 0x1C, 0x5F, 0xBC, 0x1C, 
   0x5F, 0xBC, 0x1C, 0x5F, 0xBC, 0x1C, 0x5F, 0xBC, 0x20, 0x63, 0xC0, 0x20, 0x63, 0xC0, 0x1C, 0x5F, 
   0xBC, 0x1C, 0x5F, 0xBC, 0x13, 0x56, 0xB3, 0x13, 0x56, 0xB3, 0x11, 0x54, 0xB1, 0x11, 0x54, 0xB1, 
   0x16, 0x59, 0xB6, 0x16, 0x59, 0xB6, 0x11, 0x56, 0xB3, 0x11, 0x56, 0xB3, 0x13, 0x58, 0xB5, 0x13, 
   0x58, 0xB5, 0x13, 0x57, 0xB6, 0x13, 0x57, 0xB6, 0x12, 0x56, 0xB5, 0x12, 0x56, 0xB5, 0x15, 0x59, 
   0xBA, 0x15, 0x59, 0xBA, 0x1A, 0x5D, 0xC0, 0x1A, 0x5D, 0xC0, 0x1A, 0x5D, 0xC0, 0x1A, 0x5D, 0xC0, 
   0x17, 0x5A, 0xBD, 0x17, 0x5A, 0xBD, 0x14, 0x59, 0xB6, 0x14, 0x59, 0xB6, 0x13, 0x58, 0xB5, 0x13, 
   0x58, 0xB5, 0x15, 0x5A, 0xB7, 0x15, 0x5A, 0xB7, 0x1A, 0x5F, 0xBC, 0x1A, 0x5F, 0xBC, 0x1A, 0x5F, 
   0xBC, 0x1A, 0x5F, 0xBC, 0x15, 0x5A, 0xB7, 0x15, 0x5A, 0xB7, 0x13, 0x58, 0xB5, 0x13, 0x58, 0xB5, 
   0x14, 0x59, 0xB6, 0x14, 0x59, 0xB6, 0x41, 0x8B, 0xD9, 0x41, 0x8B, 0xD9, 0x2B, 0x76, 0xC4, 0x2B, 
   0x76, 0xC4, 0x29, 0x74, 0xC2, 0x29, 0x74, 0xC2, 0x49, 0x96, 0xE5, 0x49, 0x96, 0xE5, 0x35, 0x82, 
   0xD1, 0x35, 0x82, 0xD1, 0x26, 0x75, 0xC6, 0x26, 0x75, 0xC6, 0x20, 0x6E, 0xC1, 0x20, 0x6E, 0xC1, 
   0x32, 0x82, 0xD5, 0x32, 0x82, 0xD5, 0x51, 0x9E, 0xDD, 0x51, 0x9E, 0xDD, 0x3B, 0x87, 0xC9, 0x3B, 
   0x87, 0xC9, 0x5D, 0xA8, 0xED, 0x5D, 0xA8, 0xED, 0x2C, 0x78, 0xC0, 0x2C, 0x78, 0xC0, 0x41, 0x8D, 
   0xD5, 0x41, 0x8D, 0xD5, 0x49, 0x97, 0xDC, 0x49, 0x97, 0xDC, 0x43, 0x95, 0xD6, 0x43, 0x95, 0xD6, 
   0x4A, 0x9D, 0xDB, 0x4A, 0x9D, 0xDB, 0x25, 0x6B, 0xB8, 0x25, 0x6B, 0xB8, 0x35, 0x7D, 0xCA, 0x35, 
   0x7D, 0xCA, 0x3F, 0x8B, 0xD7, 0x3F, 0x8B, 0xD7, 0x3A, 0x88, 0xD4, 0x3A, 0x88, 0xD4, 0x2C, 0x7A, 
   0xC6, 0x2C, 0x7A, 0xC6, 0x23, 0x6F, 0xBB, 0x23, 0x6F, 0xBB, 0x20, 0x68, 0xB5, 0x20, 0x68, 0xB5, 
   0x20, 0x66, 0xB3, 0x20, 0x66, 0xB3, 0x45, 0x97, 0xD8, 0x45, 0x97, 0xD8, 0x38, 0x8A, 0xD2, 0x38, 
   0x8A, 0xD2, 0x31, 0x83, 0xD5, 0x31, 0x83, 0xD5, 0x1E, 0x73, 0xC3, 0x1E, 0x73, 0xC3, 0x50, 0xA5, 
   0xEF, 0x50, 0xA5, 0xEF, 0x24, 0x76, 0xBE, 0x24, 0x76, 0xBE, 0x2A, 0x74, 0xC6, 0x2A, 0x74, 0xC6, 
   0x19, 0x5C, 0xB9, 0x19, 0x5C, 0xB9, 0x27, 0x6E, 0xCF, 0x27, 0x6E, 0xCF, 0x27, 0x6E, 0xCF, 0x27, 
   0x6E, 0xCF, 0x25, 0x6D, 0xCB, 0x25, 0x6D, 0xCB, 0x24, 0x6D, 0xC9, 0x24, 0x6D, 0xC9, 0x23, 0x6C, 
   0xC7, 0x23, 0x6C, 0xC7, 0x23, 0x6C, 0xC7, 0x23, 0x6C, 0xC7, 0x26, 0x70, 0xC8, 0x26, 0x70, 0xC8, 
   0x27, 0x71, 0xC9, 0x27, 0x71, 0xC9, 0x16, 0x5C, 0xB9, 0x16, 0x5C, 0xB9, 0x13, 0x59, 0xB6, 0x13, 
   0x59, 0xB6, 0x19, 0x5F, 0xBC, 0x19, 0x5F, 0xBC, 0x23, 0x69, 0xC6, 0x23, 0x69, 0xC6, 0x25, 0x6B, 
   0xC8, 0x25, 0x6B, 0xC8, 0x1F, 0x65, 0xC2, 0x1F, 0x65, 0xC2, 0x22, 0x68, 0xC5, 0x22, 0x68, 0xC5, 
   0x2B, 0x71, 0xCE, 0x2B, 0x71, 0xCE, 0x11, 0x5A, 0xB5, 0x11, 0x5A, 0xB5, 0x15, 0x5E, 0xB9, 0x15, 
   0x5E, 0xB9, 0x16, 0x5F, 0xBB, 0x16, 0x5F, 0xBB, 0x17, 0x60, 0xBC, 0x17, 0x60, 0xBC, 0x1D, 0x65, 
   0xC3, 0x1D, 0x65, 0xC3, 0x25, 0x6D, 0xCB, 0x25, 0x6D, 0xCB, 0x26, 0x6D, 0xCE, 0x26, 0x6D, 0xCE, 
   0x21, 0x68, 0xC9, 0x21, 0x68, 0xC9, 0x2A, 0x74, 0xCC, 0x2A, 0x74, 0xCC, 0x21, 0x6B, 0xC3, 0x21, 
   0x6B, 0xC3, 0x17, 0x61, 0xB9, 0x17, 0x61, 0xB9, 0x13, 0x5D, 0xB5, 0x13, 0x5D, 0xB5, 0x14, 0x5E, 
   0xB6, 0x14, 0x5E, 0xB6, 0x18, 0x62, 0xBA, 0x18, 0x62, 0xBA, 0x22, 0x6C, 0xC4, 0x22, 0x6C, 0xC4, 
   0x2C, 0x76, 0xCE, 0x2C, 0x76, 0xCE, 0x3A, 0x83, 0xD3, 0x3A, 0x83, 0xD3, 0x24, 0x6F, 0xBE, 0x24, 
   0x6F, 0xBE, 0x1F, 0x69, 0xBB, 0x1F, 0x69, 0xBB, 0x39, 0x85, 0xD8, 0x39, 0x85, 0xD8, 0x28, 0x74, 
   0xC7, 0x28, 0x74, 0xC7, 0x1D, 0x6A, 0xC0, 0x1D, 0x6A, 0xC0, 0x15, 0x62, 0xB8, 0x15, 0x62, 0xB8, 
   0x20, 0x70, 0xC5, 0x20, 0x70, 0xC5, 0x51, 0xA0, 0xDF, 0x51, 0xA0, 0xDF, 0x3F, 0x8D, 0xCF, 0x3F, 
   0x8D, 0xCF, 0x5F, 0xAD, 0xF2, 0x5F, 0xAD, 0xF2, 0x27, 0x77, 0xBE, 0x27, 0x77, 0xBE, 0x3B, 0x8B, 
   0xD2, 0x3B, 0x8B, 0xD2, 0x44, 0x97, 0xDB, 0x44, 0x97, 0xDB, 0x3E, 0x92, 0xD3, 0x3E, 0x92, 0xD3, 
   0x3F, 0x94, 0xD2, 0x3F, 0x94, 0xD2, 0x26, 0x6F, 0xBF, 0x26, 0x6F, 0xBF, 0x33, 0x7E, 0xCD, 0x33, 
   0x7E, 0xCD, 0x3D, 0x8C, 0xDB, 0x3D, 0x8C, 0xDB, 0x3C, 0x8E, 0xDC, 0x3C, 0x8E, 0xDC, 0x35, 0x87, 
   0xD5, 0x35, 0x87, 0xD5, 0x2E, 0x7D, 0xCC, 0x2E, 0x7D, 0xCC, 0x28, 0x73, 0xC2, 0x28, 0x73, 0xC2, 
   0x21, 0x6A, 0xBA, 0x21, 0x6A, 0xBA, 0x45, 0x97, 0xD8, 0x45, 0x97, 0xD8, 0x38, 0x8A, 0xD2, 0x38, 
   0x8A, 0xD2, 0x31, 0x83, 0xD5, 0x31, 0x83, 0xD5, 0x1E, 0x73, 0xC3, 0x1E, 0x73, 0xC3, 0x50, 0xA5, 
   0xEF, 0x50, 0xA5, 0xEF, 0x24, 0x76, 0xBE, 0x24, 0x76, 0xBE, 0x2A, 0x74, 0xC6, 0x2A, 0x74, 0xC6, 
   0x19, 0x5C, 0xB9, 0x19, 0x5C, 0xB9, 0x27, 0x6E, 0xCF, 0x27, 0x6E, 0xCF, 0x27, 0x6E, 0xCF, 0x27, 
   0x6E, 0xCF, 0x25, 0x6D, 0xCB, 0x25, 0x6D, 0xCB, 0x24, 0x6D, 0xC9, 0x24, 0x6D, 0xC9, 0x23, 0x6C, 
   0xC7, 0x23, 0x6C, 0xC7, 0x23, 0x6C, 0xC7, 0x23, 0x6C, 0xC7, 0x26, 0x70, 0xC8, 0x26, 0x70, 0xC8, 
   0x27, 0x71, 0xC9, 0x27, 0x71, 0xC9, 0x16, 0x5C, 0xB9, 0x16, 0x5C, 0xB9, 0x13, 0x59, 0xB6, 0x13, 
   0x59, 0xB6, 0x19, 0x5F, 0xBC, 0x19, 0x5F, 0xBC, 0x23, 0x69, 0xC6, 0x23, 0x69, 0xC6, 0x25, 0x6B, 
   0xC8, 0x25, 0x6B, 0xC8, 0x1F, 0x65, 0xC2, 0x1F, 0x65, 0xC2, 0x22, 0x68, 0xC5, 0x22, 0x68, 0xC5, 
   0x2B, 0x71, 0xCE, 0x2B, 0x71, 0xCE, 0x11, 0x5A, 0xB5, 0x11, 0x5A, 0xB5, 0x15, 0x5E, 0xB9, 0x15, 
   0x5E, 0xB9, 0x16, 0x5F, 0xBB, 0x16, 0x5F, 0xBB, 0x17, 0x60, 0xBC, 0x17, 0x60, 0xBC, 0x1D, 0x65, 
   0xC3, 0x1D, 0x65, 0xC3, 0x25, 0x6D, 0xCB, 0x25, 0x6D, 0xCB, 0x26, 0x6D, 0xCE, 0x26, 0x6D, 0xCE, 
   0x21, 0x68, 0xC9, 0x21, 0x68, 0xC9, 0x2A, 0x74, 0xCC, 0x2A, 0x74, 0xCC, 0x21, 0x6B, 0xC3, 0x21, 
   0x6B, 0xC3, 0x17, 0x61, 0xB9, 0x17, 0x61, 0xB9, 0x13, 0x5D, 0xB5, 0x13, 0x5D, 0xB5, 0x14, 0x5E, 
   0xB6, 0x14, 0x5E, 0xB6, 0x18, 0x62, 0xBA, 0x18, 0x62, 0xBA, 0x22, 0x6C, 0xC4, 0x22, 0x6C, 0xC4, 
   0x2C, 0x76, 0xCE, 0x2C, 0x76, 0xCE, 0x3A, 0x83, 0xD3, 0x3A, 0x83, 0xD3, 0x24, 0x6F, 0xBE, 0x24, 
   0x6F, 0xBE, 0x1F, 0x69, 0xBB, 0x1F, 0x69, 0xBB, 0x39, 0x85, 0xD8, 0x39, 0x85, 0xD8, 0x28, 0x74, 
   0xC7, 0x28, 0x74, 0xC7, 0x1D, 0x6A, 0xC0, 0x1D, 0x6A, 0xC0, 0x15, 0x62, 0xB8, 0x15, 0x62, 0xB8, 
   0x20, 0x70, 0xC5, 0x20, 0x70, 0xC5, 0x51, 0xA0, 0xDF, 0x51, 0xA0, 0xDF, 0x3F, 0x8D, 0xCF, 0x3F, 
   0x8D, 0xCF, 0x5F, 0xAD, 0xF2, 0x5F, 0xAD, 0xF2, 0x27, 0x77, 0xBE, 0x27, 0x77, 0xBE, 0x3B, 0x8B, 
   0xD2, 0x3B, 0x8B, 0xD2, 0x44, 0x97, 0xDB, 0x44, 0x97, 0xDB, 0x3E, 0x92, 0xD3, 0x3E, 0x92, 0xD3, 
   0x3F, 0x94, 0xD2, 0x3F, 0x94, 0xD2, 0x26, 0x6F, 0xBF, 0x26, 0x6F, 0xBF, 0x33, 0x7E, 0xCD, 0x33, 
   0x7E, 0xCD, 0x3D, 0x8C, 0xDB, 0x3D, 0x8C, 0xDB, 0x3C, 0x8E, 0xDC, 0x3C, 0x8E, 0xDC, 0x35, 0x87, 
   0xD5, 0x35, 0x87, 0xD5, 0x2E, 0x7D, 0xCC, 0x2E, 0x7D, 0xCC, 0x28, 0x73, 0xC2, 0x28, 0x73, 0xC2, 
   0x21, 0x6A, 0xBA, 0x21, 0x6A, 0xBA, 0x43, 0x97, 0xD8, 0x43, 0x97, 0xD8, 0x3B, 0x90, 0xDA, 0x3B, 
   0x90, 0xDA, 0x26, 0x7C, 0xCE, 0x26, 0x7C, 0xCE, 0x28, 0x81, 0xD1, 0x28, 0x81, 0xD1, 0x44, 0x9D, 
   0xE7, 0x44, 0x9D, 0xE7, 0x29, 0x7E, 0xC6, 0x29, 0x7E, 0xC6, 0x22, 0x6E, 0xC0, 0x22, 0x6E, 0xC0, 
   0x1E, 0x63, 0xC0, 0x1E, 0x63, 0xC0, 0x13, 0x5F, 0xBF, 0x13, 0x5F, 0xBF, 0x0F, 0x5C, 0xB9, 0x0F, 
   0x5C, 0xB9, 0x0C, 0x59, 0xB6, 0x0C, 0x59, 0xB6, 0x0D, 0x5A, 0xB6, 0x0D, 0x5A, 0xB6, 0x11, 0x5F, 
   0xB9, 0x11, 0x5F, 0xB9, 0x15, 0x64, 0xBB, 0x15, 0x64, 0xBB, 0x16, 0x66, 0xBB, 0x16, 0x66, 0xBB, 
   0x15, 0x65, 0xBA, 0x15, 0x65, 0xBA, 0x16, 0x60, 0xBE, 0x16, 0x60, 0xBE, 0x10, 0x5A, 0xB8, 0x10, 
   0x5A, 0xB8, 0x10, 0x5A, 0xB8, 0x10, 0x5A, 0xB8, 0x16, 0x60, 0xBE, 0x16, 0x60, 0xBE, 0x15, 0x5F, 
   0xBD, 0x15, 0x5F, 0xBD, 0x0F, 0x59, 0xB7, 0x0F, 0x59, 0xB7, 0x13, 0x5D, 0xBB, 0x13, 0x5D, 0xBB, 
   0x1F, 0x69, 0xC7, 0x1F, 0x69, 0xC7, 0x13, 0x62, 0xB9, 0x13, 0x62, 0xB9, 0x16, 0x65, 0xBC, 0x16, 
   0x65, 0xBC, 0x15, 0x63, 0xBD, 0x15, 0x63, 0xBD, 0x11, 0x5F, 0xB9, 0x11, 0x5F, 0xB9, 0x13, 0x60, 
   0xBC, 0x13, 0x60, 0xBC, 0x15, 0x62, 0xBE, 0x15, 0x62, 0xBE, 0x11, 0x5E, 0xBB, 0x11, 0x5E, 0xBB, 
   0x09, 0x56, 0xB3, 0x09, 0x56, 0xB3, 0x0C, 0x5C, 0xAF, 0x0C, 0x5C, 0xAF, 0x0C, 0x5C, 0xAF, 0x0C, 
   0x5C, 0xAF, 0x11, 0x61, 0xB4, 0x11, 0x61, 0xB4, 0x19, 0x69, 0xBC, 0x19, 0x69, 0xBC, 0x1C, 0x6C, 
   0xBF, 0x1C, 0x6C, 0xBF, 0x1B, 0x6B, 0xBE, 0x1B, 0x6B, 0xBE, 0x1B, 0x6B, 0xBE, 0x1B, 0x6B, 0xBE, 
   0x1E, 0x6E, 0xC1, 0x1E, 0x6E, 0xC1, 0x2B, 0x74, 0xC6, 0x2B, 0x74, 0xC6, 0x2D, 0x76, 0xCA, 0x2D, 
   0x76, 0xCA, 0x28, 0x71, 0xC5, 0x28, 0x71, 0xC5, 0x2D, 0x78, 0xCE, 0x2D, 0x78, 0xCE, 0x21, 0x6C, 
   0xC2, 0x21, 0x6C, 0xC2, 0x34, 0x81, 0xD8, 0x34, 0x81, 0xD8, 0x2E, 0x7B, 0xD2, 0x2E, 0x7B, 0xD2, 
   0x20, 0x6E, 0xC8, 0x20, 0x6E, 0xC8, 0x4C, 0x9D, 0xDA, 0x4C, 0x9D, 0xDA, 0x3D, 0x8F, 0xD0, 0x3D, 
   0x8F, 0xD0, 0x60, 0xB1, 0xF5, 0x60, 0xB1, 0xF5, 0x28, 0x7A, 0xC2, 0x28, 0x7A, 0xC2, 0x3E, 0x90, 
   0xD8, 0x3E, 0x90, 0xD8, 0x4E, 0xA3, 0xE7, 0x4E, 0xA3, 0xE7, 0x49, 0xA0, 0xE0, 0x49, 0xA0, 0xE0, 
   0x46, 0xA0, 0xDB, 0x46, 0xA0, 0xDB, 0x2E, 0x7B, 0xCA, 0x2E, 0x7B, 0xCA, 0x27, 0x76, 0xC5, 0x27, 
   0x76, 0xC5, 0x1C, 0x6E, 0xBC, 0x1C, 0x6E, 0xBC, 0x12, 0x65, 0xB3, 0x12, 0x65, 0xB3, 0x14, 0x67, 
   0xB5, 0x14, 0x67, 0xB5, 0x1F, 0x71, 0xBF, 0x1F, 0x71, 0xBF, 0x2B, 0x7A, 0xC9, 0x2B, 0x7A, 0xC9, 
   0x30, 0x7D, 0xCC, 0x30, 0x7D, 0xCC, 0x43, 0x97, 0xD8, 0x43, 0x97, 0xD8, 0x3B, 0x90, 0xDA, 0x3B, 
   0x90, 0xDA, 0x26, 0x7C, 0xCE, 0x26, 0x7C, 0xCE, 0x28, 0x81, 0xD1, 0x28, 0x81, 0xD1, 0x44, 0x9D, 
   0xE7, 0x44, 0x9D, 0xE7, 0x29, 0x7E, 0xC6, 0x29, 0x7E, 0xC6, 0x22, 0x6E, 0xC0, 0x22, 0x6E, 0xC0, 
   0x1E, 0x63, 0xC0, 0x1E, 0x63, 0xC0, 0x13, 0x5F, 0xBF, 0x13, 0x5F, 0xBF, 0x0F, 0x5C, 0xB9, 0x0F, 
   0x5C, 0xB9, 0x0C, 0x59, 0xB6, 0x0C, 0x59, 0xB6, 0x0D, 0x5A, 0xB6, 0x0D, 0x5A, 0xB6, 0x11, 0x5F, 
   0xB9, 0x11, 0x5F, 0xB9, 0x15, 0x64, 0xBB, 0x15, 0x64, 0xBB, 0x16, 0x66, 0xBB, 0x16, 0x66, 0xBB, 
   0x15, 0x65, 0xBA, 0x15, 0x65, 0xBA, 0x16, 0x60, 0xBE, 0x16, 0x60, 0xBE, 0x10, 0x5A, 0xB8, 0x10, 
   0x5A, 0xB8, 0x10, 0x5A, 0xB8, 0x10, 0x5A, 0xB8, 0x16, 0x60, 0xBE, 0x16, 0x60, 0xBE, 0x15, 0x5F, 
   0xBD, 0x15, 0x5F, 0xBD, 0x0F, 0x59, 0xB7, 0x0F, 0x59, 0xB7, 0x13, 0x5D, 0xBB, 0x13, 0x5D, 0xBB, 
   0x1F, 0x69, 0xC7, 0x1F, 0x69, 0xC7, 0x13, 0x62, 0xB9, 0x13, 0x62, 0xB9, 0x16, 0x65, 0xBC, 0x16, 
   0x65, 0xBC, 0x15, 0x63, 0xBD, 0x15, 0x63, 0xBD, 0x11, 0x5F, 0xB9, 0x11, 0x5F, 0xB9, 0x13, 0x60, 
   0xBC, 0x13, 0x60, 0xBC, 0x15, 0x62, 0xBE, 0x15, 0x62, 0xBE, 0x11, 0x5E, 0xBB, 0x11, 0x5E, 0xBB, 
   0x09, 0x56, 0xB3, 0x09, 0x56, 0xB3, 0x0C, 0x5C, 0xAF, 0x0C, 0x5C, 0xAF, 0x0C, 0x5C, 0xAF, 0x0C, 
   0x5C, 0xAF, 0x11, 0x61, 0xB4, 0x11, 0x61, 0xB4, 0x19, 0x69, 0xBC, 0x19, 0x69, 0xBC, 0x1C, 0x6C, 
   0xBF, 0x1C, 0x6C, 0xBF, 0x1B, 0x6B, 0xBE, 0x1B, 0x6B, 0xBE, 0x1B, 0x6B, 0xBE, 0x1B, 0x6B, 0xBE, 
   0x1E, 0x6E, 0xC1, 0x1E, 0x6E, 0xC1, 0x2B, 0x74, 0xC6, 0x2B, 0x74, 0xC6, 0x2D, 0x76, 0xCA, 0x2D, 
   0x76, 0xCA, 0x28, 0x71, 0xC5, 0x28, 0x71, 0xC5, 0x2D, 0x78, 0xCE, 0x2D, 0x78, 0xCE, 0x21, 0x6C, 
   0xC2, 0x21, 0x6C, 0xC2, 0x34, 0x81, 0xD8, 0x34, 0x81, 0xD8, 0x2E, 0x7B, 0xD2, 0x2E, 0x7B, 0xD2, 
   0x20, 0x6E, 0xC8, 0x20, 0x6E, 0xC8, 0x4C, 0x9D, 0xDA, 0x4C, 0x9D, 0xDA, 0x3D, 0x8F, 0xD0, 0x3D, 
   0x8F, 0xD0, 0x60, 0xB1, 0xF5, 0x60, 0xB1, 0xF5, 0x28, 0x7A, 0xC2, 0x28, 0x7A, 0xC2, 0x3E, 0x90, 
   0xD8, 0x3E, 0x90, 0xD8, 0x4E, 0xA3, 0xE7, 0x4E, 0xA3, 0xE7, 0x49, 0xA0, 0xE0, 0x49, 0xA0, 0xE0, 
   0x46, 0xA0, 0xDB, 0x46, 0xA0, 0xDB, 0x2E, 0x7B, 0xCA, 0x2E, 0x7B, 0xCA, 0x27, 0x76, 0xC5, 0x27, 
   0x76, 0xC5, 0x1C, 0x6E, 0xBC, 0x1C, 0x6E, 0xBC, 0x12, 0x65, 0xB3, 0x12, 0x65, 0xB3, 0x14, 0x67, 
   0xB5, 0x14, 0x67, 0xB5, 0x1F, 0x71, 0xBF, 0x1F, 0x71, 0xBF, 0x2B, 0x7A, 0xC9, 0x2B, 0x7A, 0xC9, 
   0x30, 0x7D, 0xCC, 0x30, 0x7D, 0xCC, 0x44, 0x96, 0xDE, 0x44, 0x96, 0xDE, 0x3F, 0x8E, 0xD7, 0x3F, 
   0x8E, 0xD7, 0x41, 0x8F, 0xDB, 0x41, 0x8F, 0xDB, 0x2B, 0x77, 0xC3, 0x2B, 0x77, 0xC3, 0x58, 0xA0, 
   0xEE, 0x58, 0xA0, 0xEE, 0x45, 0x8A, 0xD9, 0x45, 0x8A, 0xD9, 0x19, 0x5E, 0xAE, 0x19, 0x5E, 0xAE, 
   0x23, 0x65, 0xB6, 0x23, 0x65, 0xB6, 0x13, 0x56, 0xAB, 0x13, 0x56, 0xAB, 0x15, 0x5B, 0xAF, 0x15, 
   0x5B, 0xAF, 0x1C, 0x61, 0xB8, 0x1C, 0x61, 0xB8, 0x1C, 0x63, 0xBA, 0x1C, 0x63, 0xBA, 0x11, 0x58, 
   0xB0, 0x11, 0x58, 0xB0, 0x05, 0x4D, 0xA5, 0x05, 0x4D, 0xA5, 0x0C, 0x53, 0xAE, 0x0C, 0x53, 0xAE, 
   0x19, 0x62, 0xBD, 0x19, 0x62, 0xBD, 0x15, 0x59, 0xB8, 0x15, 0x59, 0xB8, 0x1D, 0x63, 0xC1, 0x1D, 
   0x63, 0xC1, 0x12, 0x5C, 0xBA, 0x12, 0x5C, 0xBA, 0x17, 0x64, 0xC1, 0x17, 0x64, 0xC1, 0x1F, 0x6C, 
   0xC9, 0x1F, 0x6C, 0xC9, 0x20, 0x6A, 0xC8, 0x20, 0x6A, 0xC8, 0x22, 0x68, 0xC6, 0x22, 0x68, 0xC6, 
   0x0D, 0x51, 0xB0, 0x0D, 0x51, 0xB0, 0x17, 0x5E, 0xBF, 0x17, 0x5E, 0xBF, 0x1F, 0x66, 0xC7, 0x1F, 
   0x66, 0xC7, 0x18, 0x5F, 0xC0, 0x18, 0x5F, 0xC0, 0x0D, 0x54, 0xB5, 0x0D, 0x54, 0xB5, 0x12, 0x5A, 
   0xB8, 0x12, 0x5A, 0xB8, 0x17, 0x5F, 0xBD, 0x17, 0x5F, 0xBD, 0x19, 0x61, 0xBF, 0x19, 0x61, 0xBF, 
   0x1F, 0x67, 0xC5, 0x1F, 0x67, 0xC5, 0x12, 0x62, 0xBB, 0x12, 0x62, 0xBB, 0x1F, 0x6F, 0xC8, 0x1F, 
   0x6F, 0xC8, 0x19, 0x69, 0xC2, 0x19, 0x69, 0xC2, 0x1A, 0x6A, 0xC3, 0x1A, 0x6A, 0xC3, 0x17, 0x67, 
   0xC0, 0x17, 0x67, 0xC0, 0x14, 0x64, 0xBD, 0x14, 0x64, 0xBD, 0x20, 0x70, 0xC9, 0x20, 0x70, 0xC9, 
   0x1A, 0x6A, 0xC3, 0x1A, 0x6A, 0xC3, 0x2D, 0x7D, 0xD6, 0x2D, 0x7D, 0xD6, 0x22, 0x72, 0xC9, 0x22, 
   0x72, 0xC9, 0x24, 0x76, 0xC8, 0x24, 0x76, 0xC8, 0x33, 0x85, 0xD6, 0x33, 0x85, 0xD6, 0x36, 0x88, 
   0xD9, 0x36, 0x88, 0xD9, 0x28, 0x7A, 0xCC, 0x28, 0x7A, 0xCC, 0x20, 0x70, 0xC7, 0x20, 0x70, 0xC7, 
   0x25, 0x75, 0xCE, 0x25, 0x75, 0xCE, 0x34, 0x7C, 0xC2, 0x34, 0x7C, 0xC2, 0x3D, 0x88, 0xCD, 0x3D, 
   0x88, 0xCD, 0x58, 0xA6, 0xEB, 0x58, 0xA6, 0xEB, 0x38, 0x89, 0xCD, 0x38, 0x89, 0xCD, 0x3D, 0x8F, 
   0xD0, 0x3D, 0x8F, 0xD0, 0x61, 0xB3, 0xED, 0x61, 0xB3, 0xED, 0x54, 0xA4, 0xD9, 0x54, 0xA4, 0xD9, 
   0x6B, 0xBA, 0xEB, 0x6B, 0xBA, 0xEB, 0x39, 0x76, 0xCC, 0x39, 0x76, 0xCC, 0x23, 0x60, 0xB6, 0x23, 
   0x60, 0xB6, 0x1E, 0x5B, 0xB1, 0x1E, 0x5B, 0xB1, 0x28, 0x65, 0xBB, 0x28, 0x65, 0xBB, 0x2B, 0x68, 
   0xBE, 0x2B, 0x68, 0xBE, 0x2C, 0x69, 0xBF, 0x2C, 0x69, 0xBF, 0x29, 0x66, 0xBC, 0x29, 0x66, 0xBC, 
   0x20, 0x5D, 0xB3, 0x20, 0x5D, 0xB3, 0x44, 0x96, 0xDE, 0x44, 0x96, 0xDE, 0x3F, 0x8E, 0xD7, 0x3F, 
   0x8E, 0xD7, 0x41, 0x8F, 0xDB, 0x41, 0x8F, 0xDB, 0x2B, 0x77, 0xC3, 0x2B, 0x77, 0xC3, 0x58, 0xA0, 
   0xEE, 0x58, 0xA0, 0xEE, 0x45, 0x8A, 0xD9, 0x45, 0x8A, 0xD9, 0x19, 0x5E, 0xAE, 0x19, 0x5E, 0xAE, 
   0x23, 0x65, 0xB6, 0x23, 0x65, 0xB6, 0x13, 0x56, 0xAB, 0x13, 0x56, 0xAB, 0x15, 0x5B, 0xAF, 0x15, 
   0x5B, 0xAF, 0x1C, 0x61, 0xB8, 0x1C, 0x61, 0xB8, 0x1C, 0x63, 0xBA, 0x1C, 0x63, 0xBA, 0x11, 0x58, 
   0xB0, 0x11, 0x58, 0xB0, 0x05, 0x4D, 0xA5, 0x05, 0x4D, 0xA5, 0x0C, 0x53, 0xAE, 0x0C, 0x53, 0xAE, 
   0x19, 0x62, 0xBD, 0x19, 0x62, 0xBD, 0x15, 0x59, 0xB8, 0x15, 0x59, 0xB8, 0x1D, 0x63, 0xC1, 0x1D, 
   0x63, 0xC1, 0x12, 0x5C, 0xBA, 0x12, 0x5C, 0xBA, 0x17, 0x64, 0xC1, 0x17, 0x64, 0xC1, 0x1F, 0x6C, 
   0xC9, 0x1F, 0x6C, 0xC9, 0x20, 0x6A, 0xC8, 0x20, 0x6A, 0xC8, 0x22, 0x68, 0xC6, 0x22, 0x68, 0xC6, 
   0x0D, 0x51, 0xB0, 0x0D, 0x51, 0xB0, 0x17, 0x5E, 0xBF, 0x17, 0x5E, 0xBF, 0x1F, 0x66, 0xC7, 0x1F, 
   0x66, 0xC7, 0x18, 0x5F, 0xC0, 0x18, 0x5F, 0xC0, 0x0D, 0x54, 0xB5, 0x0D, 0x54, 0xB5, 0x12, 0x5A, 
   0xB8, 0x12, 0x5A, 0xB8, 0x17, 0x5F, 0xBD, 0x17, 0x5F, 0xBD, 0x19, 0x61, 0xBF, 0x19, 0x61, 0xBF, 
   0x1F, 0x67, 0xC5, 0x1F, 0x67, 0xC5, 0x12, 0x62, 0xBB, 0x12, 0x62, 0xBB, 0x1F, 0x6F, 0xC8, 0x1F, 
   0x6F, 0xC8, 0x19, 0x69, 0xC2, 0x19, 0x69, 0xC2, 0x1A, 0x6A, 0xC3, 0x1A, 0x6A, 0xC3, 0x17, 0x67, 
   0xC0, 0x17, 0x67, 0xC0, 0x14, 0x64, 0xBD, 0x14, 0x64, 0xBD, 0x20, 0x70, 0xC9, 0x20, 0x70, 0xC9, 
   0x1A, 0x6A, 0xC3, 0x1A, 0x6A, 0xC3, 0x2D, 0x7D, 0xD6, 0x2D, 0x7D, 0xD6, 0x22, 0x72, 0xC9, 0x22, 
   0x72, 0xC9, 0x24, 0x76, 0xC8, 0x24, 0x76, 0xC8, 0x33, 0x85, 0xD6, 0x33, 0x85, 0xD6, 0x36, 0x88, 
   0xD9, 0x36, 0x88, 0xD9, 0x28, 0x7A, 0xCC, 0x28, 0x7A, 0xCC, 0x20, 0x70, 0xC7, 0x20, 0x70, 0xC7, 
   0x25, 0x75, 0xCE, 0x25, 0x75, 0xCE, 0x34, 0x7C, 0xC2, 0x34, 0x7C, 0xC2, 0x3D, 0x88, 0xCD, 0x3D, 
   0x88, 0xCD, 0x58, 0xA6, 0xEB, 0x58, 0xA6, 0xEB, 0x38, 0x89, 0xCD, 0x38, 0x89, 0xCD, 0x3D, 0x8F, 
   0xD0, 0x3D, 0x8F, 0xD0, 0x61, 0xB3, 0xED, 0x61, 0xB3, 0xED, 0x54, 0xA4, 0xD9, 0x54, 0xA4, 0xD9, 
   0x6B, 0xBA, 0xEB, 0x6B, 0xBA, 0xEB, 0x39, 0x76, 0xCC, 0x39, 0x76, 0xCC, 0x23, 0x60, 0xB6, 0x23, 
   0x60, 0xB6, 0x1E, 0x5B, 0xB1, 0x1E, 0x5B, 0xB1, 0x28, 0x65, 0xBB, 0x28, 0x65, 0xBB, 0x2B, 0x68, 
   0xBE, 0x2B, 0x68, 0xBE, 0x2C, 0x69, 0xBF, 0x2C, 0x69, 0xBF, 0x29, 0x66, 0xBC, 0x29, 0x66, 0xBC, 
   0x20, 0x5D, 0xB3, 0x20, 0x5D, 0xB3, 0x53, 0xA0, 0xE9, 0x53, 0xA0, 0xE9, 0x46, 0x93, 0xDC, 0x46, 
   0x93, 0xDC, 0x36, 0x83, 0xCC, 0x36, 0x83, 0xCC, 0x21, 0x6C, 0xB8, 0x21, 0x6C, 0xB8, 0x44, 0x8E, 
   0xDC, 0x44, 0x8E, 0xDC, 0x3F, 0x87, 0xD5, 0x3F, 0x87, 0xD5, 0x30, 0x77, 0xC7, 0x30, 0x77, 0xC7, 
   0x39, 0x80, 0xD0, 0x39, 0x80, 0xD0, 0x43, 0x8C, 0xDE, 0x43, 0x8C, 0xDE, 0x3F, 0x88, 0xDA, 0x3F, 
   0x88, 0xDA, 0x40, 0x89, 0xDB, 0x40, 0x89, 0xDB, 0x41, 0x8A, 0xDE, 0x41, 0x8A, 0xDE, 0x3A, 0x83, 
   0xD7, 0x3A, 0x83, 0xD7, 0x29, 0x74, 0xCA, 0x29, 0x74, 0xCA, 0x1E, 0x6B, 0xC1, 0x1E, 0x6B, 0xC1, 
   0x1D, 0x6A, 0xC1, 0x1D, 0x6A, 0xC1, 0x2B, 0x72, 0xCD, 0x2B, 0x72, 0xCD, 0x2B, 0x74, 0xCF, 0x2B, 
   0x74, 0xCF, 0x20, 0x6E, 0xC8, 0x20, 0x6E, 0xC8, 0x2B, 0x7B, 0xD4, 0x2B, 0x7B, 0xD4, 0x2D, 0x7D, 
   0xD6, 0x2D, 0x7D, 0xD6, 0x20, 0x6E, 0xC8, 0x20, 0x6E, 0xC8, 0x20, 0x69, 0xC4, 0x20, 0x69, 0xC4, 
   0x14, 0x5B, 0xB6, 0x14, 0x5B, 0xB6, 0x26, 0x70, 0xCE, 0x26, 0x70, 0xCE, 0x20, 0x6A, 0xC8, 0x20, 
   0x6A, 0xC8, 0x20, 0x6B, 0xC7, 0x20, 0x6B, 0xC7, 0x2C, 0x77, 0xD3, 0x2C, 0x77, 0xD3, 0x2D, 0x78, 
   0xD4, 0x2D, 0x78, 0xD4, 0x19, 0x64, 0xC0, 0x19, 0x64, 0xC0, 0x1C, 0x67, 0xC3, 0x1C, 0x67, 0xC3, 
   0x3A, 0x85, 0xE1, 0x3A, 0x85, 0xE1, 0x20, 0x70, 0xC7, 0x20, 0x70, 0xC7, 0x26, 0x76, 0xCD, 0x26, 
   0x76, 0xCD, 0x2A, 0x7A, 0xD1, 0x2A, 0x7A, 0xD1, 0x3C, 0x8C, 0xE3, 0x3C, 0x8C, 0xE3, 0x33, 0x83, 
   0xDA, 0x33, 0x83, 0xDA, 0x1C, 0x6C, 0xC3, 0x1C, 0x6C, 0xC3, 0x2A, 0x7A, 0xD1, 0x2A, 0x7A, 0xD1, 
   0x39, 0x89, 0xE0, 0x39, 0x89, 0xE0, 0x29, 0x77, 0xD1, 0x29, 0x77, 0xD1, 0x27, 0x76, 0xCD, 0x27, 
   0x76, 0xCD, 0x2C, 0x7C, 0xCF, 0x2C, 0x7C, 0xCF, 0x36, 0x87, 0xD8, 0x36, 0x87, 0xD8, 0x36, 0x87, 
   0xD8, 0x36, 0x87, 0xD8, 0x2D, 0x7D, 0xD0, 0x2D, 0x7D, 0xD0, 0x29, 0x78, 0xCF, 0x29, 0x78, 0xCF, 
   0x2E, 0x7C, 0xD6, 0x2E, 0x7C, 0xD6, 0x30, 0x78, 0xC0, 0x30, 0x78, 0xC0, 0x39, 0x83, 0xCB, 0x39, 
   0x83, 0xCB, 0x54, 0xA1, 0xEA, 0x54, 0xA1, 0xEA, 0x36, 0x86, 0xCD, 0x36, 0x86, 0xCD, 0x3C, 0x8D, 
   0xD0, 0x3C, 0x8D, 0xD0, 0x5F, 0xB0, 0xED, 0x5F, 0xB0, 0xED, 0x50, 0xA0, 0xD7, 0x50, 0xA0, 0xD7, 
   0x66, 0xB4, 0xE9, 0x66, 0xB4, 0xE9, 0x13, 0x50, 0xA6, 0x13, 0x50, 0xA6, 0x03, 0x40, 0x96, 0x03, 
   0x40, 0x96, 0x02, 0x3F, 0x95, 0x02, 0x3F, 0x95, 0x0A, 0x47, 0x9D, 0x0A, 0x47, 0x9D, 0x08, 0x45, 
   0x9B, 0x08, 0x45, 0x9B, 0x0A, 0x47, 0x9D, 0x0A, 0x47, 0x9D, 0x12, 0x4F, 0xA5, 0x12, 0x4F, 0xA5, 
   0x14, 0x51, 0xA7, 0x14, 0x51, 0xA7, 0x53, 0xA0, 0xE9, 0x53, 0xA0, 0xE9, 0x46, 0x93, 0xDC, 0x46, 
   0x93, 0xDC, 0x36, 0x83, 0xCC, 0x36, 0x83, 0xCC, 0x21, 0x6C, 0xB8, 0x21, 0x6C, 0xB8, 0x44, 0x8E, 
   0xDC, 0x44, 0x8E, 0xDC, 0x3F, 0x87, 0xD5, 0x3F, 0x87, 0xD5, 0x30, 0x77, 0xC7, 0x30, 0x77, 0xC7, 
   0x39, 0x80, 0xD0, 0x39, 0x80, 0xD0, 0x43, 0x8C, 0xDE, 0x43, 0x8C, 0xDE, 0x3F, 0x88, 0xDA, 0x3F, 
   0x88, 0xDA, 0x40, 0x89, 0xDB, 0x40, 0x89, 0xDB, 0x41, 0x8A, 0xDE, 0x41, 0x8A, 0xDE, 0x3A, 0x83, 
   0xD7, 0x3A, 0x83, 0xD7, 0x29, 0x74, 0xCA, 0x29, 0x74, 0xCA, 0x1E, 0x6B, 0xC1, 0x1E, 0x6B, 0xC1, 
   0x1D, 0x6A, 0xC1, 0x1D, 0x6A, 0xC1, 0x2B, 0x72, 0xCD, 0x2B, 0x72, 0xCD, 0x2B, 0x74, 0xCF, 0x2B, 
   0x74, 0xCF, 0x20, 0x6E, 0xC8, 0x20, 0x6E, 0xC8, 0x2B, 0x7B, 0xD4, 0x2B, 0x7B, 0xD4, 0x2D, 0x7D, 
   0xD6, 0x2D, 0x7D, 0xD6, 0x20, 0x6E, 0xC8, 0x20, 0x6E, 0xC8, 0x20, 0x69, 0xC4, 0x20, 0x69, 0xC4, 
   0x14, 0x5B, 0xB6, 0x14, 0x5B, 0xB6, 0x26, 0x70, 0xCE, 0x26, 0x70, 0xCE, 0x20, 0x6A, 0xC8, 0x20, 
   0x6A, 0xC8, 0x20, 0x6B, 0xC7, 0x20, 0x6B, 0xC7, 0x2C, 0x77, 0xD3, 0x2C, 0x77, 0xD3, 0x2D, 0x78, 
   0xD4, 0x2D, 0x78, 0xD4, 0x19, 0x64, 0xC0, 0x19, 0x64, 0xC0, 0x1C, 0x67, 0xC3, 0x1C, 0x67, 0xC3, 
   0x3A, 0x85, 0xE1, 0x3A, 0x85, 0xE1, 0x20, 0x70, 0xC7, 0x20, 0x70, 0xC7, 0x26, 0x76, 0xCD, 0x26, 
   0x76, 0xCD, 0x2A, 0x7A, 0xD1, 0x2A, 0x7A, 0xD1, 0x3C, 0x8C, 0xE3, 0x3C, 0x8C, 0xE3, 0x33, 0x83, 
   0xDA, 0x33, 0x83, 0xDA, 0x1C, 0x6C, 0xC3, 0x1C, 0x6C, 0xC3, 0x2A, 0x7A, 0xD1, 0x2A, 0x7A, 0xD1, 
   0x39, 0x89, 0xE0, 0x39, 0x89, 0xE0, 0x29, 0x77, 0xD1, 0x29, 0x77, 0xD1, 0x27, 0x76, 0xCD, 0x27, 
   0x76, 0xCD, 0x2C, 0x7C, 0xCF, 0x2C, 0x7C, 0xCF, 0x36, 0x87, 0xD8, 0x36, 0x87, 0xD8, 0x36, 0x87, 
   0xD8, 0x36, 0x87, 0xD8, 0x2D, 0x7D, 0xD0, 0x2D, 0x7D, 0xD0, 0x29, 0x78, 0xCF, 0x29, 0x78, 0xCF, 
   0x2E, 0x7C, 0xD6, 0x2E, 0x7C, 0xD6, 0x30, 0x78, 0xC0, 0x30, 0x78, 0xC0, 0x39, 0x83, 0xCB, 0x39, 
   0x83, 0xCB, 0x54, 0xA1, 0xEA, 0x54, 0xA1, 0xEA, 0x36, 0x86, 0xCD, 0x36, 0x86, 0xCD, 0x3C, 0x8D, 
   0xD0, 0x3C, 0x8D, 0xD0, 0x5F, 0xB0, 0xED, 0x5F, 0xB0, 0xED, 0x50, 0xA0, 0xD7, 0x50, 0xA0, 0xD7, 
   0x66, 0xB4, 0xE9, 0x66, 0xB4, 0xE9, 0x13, 0x50, 0xA6, 0x13, 0x50, 0xA6, 0x03, 0x40, 0x96, 0x03, 
   0x40, 0x96, 0x02, 0x3F, 0x95, 0x02, 0x3F, 0x95, 0x0A, 0x47, 0x9D, 0x0A, 0x47, 0x9D, 0x08, 0x45, 
   0x9B, 0x08, 0x45, 0x9B, 0x0A, 0x47, 0x9D, 0x0A, 0x47, 0x9D, 0x12, 0x4F, 0xA5, 0x12, 0x4F, 0xA5, 
   0x14, 0x51, 0xA7, 0x14, 0x51, 0xA7, 0x4C, 0x96, 0xDE, 0x4C, 0x96, 0xDE, 0x48, 0x91, 0xDB, 0x48, 
   0x91, 0xDB, 0x35, 0x7E, 0xC8, 0x35, 0x7E, 0xC8, 0x2D, 0x78, 0xC4, 0x2D, 0x78, 0xC4, 0x44, 0x8F, 
   0xDB, 0x44, 0x8F, 0xDB, 0x3C, 0x87, 0xD5, 0x3C, 0x87, 0xD5, 0x3D, 0x88, 0xD6, 0x3D, 0x88, 0xD6, 
   0x35, 0x80, 0xCE, 0x35, 0x80, 0xCE, 0x35, 0x80, 0xCE, 0x35, 0x80, 0xCE, 0x2F, 0x7A, 0xC8, 0x2F, 
   0x7A, 0xC8, 0x2D, 0x7B, 0xC8, 0x2D, 0x7B, 0xC8, 0x36, 0x85, 0xD4, 0x36, 0x85, 0xD4, 0x42, 0x91, 
   0xE0, 0x42, 0x91, 0xE0, 0x41, 0x92, 0xE3, 0x41, 0x92, 0xE3, 0x38, 0x89, 0xDA, 0x38, 0x89, 0xDA, 
   0x30, 0x80, 0xD3, 0x30, 0x80, 0xD3, 0x2C, 0x79, 0xCF, 0x2C, 0x79, 0xCF, 0x24, 0x74, 0xC9, 0x24, 
   0x74, 0xC9, 0x15, 0x68, 0xBD, 0x15, 0x68, 0xBD, 0x1E, 0x74, 0xC8, 0x1E, 0x74, 0xC8, 0x1E, 0x74, 
   0xC8, 0x1E, 0x74, 0xC8, 0x13, 0x66, 0xBB, 0x13, 0x66, 0xBB, 0x1D, 0x6D, 0xC2, 0x1D, 0x6D, 0xC2, 
   0x21, 0x6E, 0xC4, 0x21, 0x6E, 0xC4, 0x1A, 0x6A, 0xC1, 0x1A, 0x6A, 0xC1, 0x28, 0x78, 0xCF, 0x28, 
   0x78, 0xCF, 0x2A, 0x7A, 0xD1, 0x2A, 0x7A, 0xD1, 0x23, 0x73, 0xCA, 0x23, 0x73, 0xCA, 0x20, 0x70, 
   0xC7, 0x20, 0x70, 0xC7, 0x1C, 0x6C, 0xC3, 0x1C, 0x6C, 0xC3, 0x23, 0x73, 0xCA, 0x23, 0x73, 0xCA, 
   0x35, 0x85, 0xDC, 0x35, 0x85, 0xDC, 0x37, 0x87, 0xDE, 0x37, 0x87, 0xDE, 0x31, 0x81, 0xD8, 0x31, 
   0x81, 0xD8, 0x1A, 0x6A, 0xC1, 0x1A, 0x6A, 0xC1, 0x1F, 0x6F, 0xC6, 0x1F, 0x6F, 0xC6, 0x30, 0x80, 
   0xD7, 0x30, 0x80, 0xD7, 0x37, 0x87, 0xDE, 0x37, 0x87, 0xDE, 0x35, 0x85, 0xDC, 0x35, 0x85, 0xDC, 
   0x1B, 0x6B, 0xC2, 0x1B, 0x6B, 0xC2, 0x24, 0x72, 0xCC, 0x24, 0x72, 0xCC, 0x2B, 0x7A, 0xD1, 0x2B, 
   0x7A, 0xD1, 0x31, 0x81, 0xD4, 0x31, 0x81, 0xD4, 0x33, 0x84, 0xD5, 0x33, 0x84, 0xD5, 0x30, 0x81, 
   0xD2, 0x30, 0x81, 0xD2, 0x2C, 0x7C, 0xCF, 0x2C, 0x7C, 0xCF, 0x2C, 0x7B, 0xD2, 0x2C, 0x7B, 0xD2, 
   0x2D, 0x7B, 0xD5, 0x2D, 0x7B, 0xD5, 0x2C, 0x72, 0xBF, 0x2C, 0x72, 0xBF, 0x33, 0x7B, 0xC8, 0x33, 
   0x7B, 0xC8, 0x4F, 0x9B, 0xE7, 0x4F, 0x9B, 0xE7, 0x34, 0x82, 0xCE, 0x34, 0x82, 0xCE, 0x3D, 0x8D, 
   0xD4, 0x3D, 0x8D, 0xD4, 0x5F, 0xAF, 0xF0, 0x5F, 0xAF, 0xF0, 0x4F, 0x9D, 0xD8, 0x4F, 0x9D, 0xD8, 
   0x64, 0xB1, 0xE9, 0x64, 0xB1, 0xE9, 0x30, 0x6D, 0xC3, 0x30, 0x6D, 0xC3, 0x1D, 0x5A, 0xB0, 0x1D, 
   0x5A, 0xB0, 0x17, 0x54, 0xAA, 0x17, 0x54, 0xAA, 0x1A, 0x57, 0xAD, 0x1A, 0x57, 0xAD, 0x14, 0x51, 
   0xA7, 0x14, 0x51, 0xA7, 0x10, 0x4D, 0xA3, 0x10, 0x4D, 0xA3, 0x11, 0x4E, 0xA4, 0x11, 0x4E, 0xA4, 
   0x0F, 0x4C, 0xA2, 0x0F, 0x4C, 0xA2, 0x4C, 0x96, 0xDE, 0x4C, 0x96, 0xDE, 0x48, 0x91, 0xDB, 0x48, 
   0x91, 0xDB, 0x35, 0x7E, 0xC8, 0x35, 0x7E, 0xC8, 0x2D, 0x78, 0xC4, 0x2D, 0x78, 0xC4, 0x44, 0x8F, 
   0xDB, 0x44, 0x8F, 0xDB, 0x3C, 0x87, 0xD5, 0x3C, 0x87, 0xD5, 0x3D, 0x88, 0xD6, 0x3D, 0x88, 0xD6, 
   0x35, 0x80, 0xCE, 0x35, 0x80, 0xCE, 0x35, 0x80, 0xCE, 0x35, 0x80, 0xCE, 0x2F, 0x7A, 0xC8, 0x2F, 
   0x7A, 0xC8, 0x2D, 0x7B, 0xC8, 0x2D, 0x7B, 0xC8, 0x36, 0x85, 0xD4, 0x36, 0x85, 0xD4, 0x42, 0x91, 
   0xE0, 0x42, 0x91, 0xE0, 0x41, 0x92, 0xE3, 0x41, 0x92, 0xE3, 0x38, 0x89, 0xDA, 0x38, 0x89, 0xDA, 
   0x30, 0x80, 0xD3, 0x30, 0x80, 0xD3, 0x2C, 0x79, 0xCF, 0x2C, 0x79, 0xCF, 0x24, 0x74, 0xC9, 0x24, 
   0x74, 0xC9, 0x15, 0x68, 0xBD, 0x15, 0x68, 0xBD, 0x1E, 0x74, 0xC8, 0x1E, 0x74, 0xC8, 0x1E, 0x74, 
   0xC8, 0x1E, 0x74, 0xC8, 0x13, 0x66, 0xBB, 0x13, 0x66, 0xBB, 0x1D, 0x6D, 0xC2, 0x1D, 0x6D, 0xC2, 
   0x21, 0x6E, 0xC4, 0x21, 0x6E, 0xC4, 0x1A, 0x6A, 0xC1, 0x1A, 0x6A, 0xC1, 0x28, 0x78, 0xCF, 0x28, 
   0x78, 0xCF, 0x2A, 0x7A, 0xD1, 0x2A, 0x7A, 0xD1, 0x23, 0x73, 0xCA, 0x23, 0x73, 0xCA, 0x20, 0x70, 
   0xC7, 0x20, 0x70, 0xC7, 0x1C, 0x6C, 0xC3, 0x1C, 0x6C, 0xC3, 0x23, 0x73, 0xCA, 0x23, 0x73, 0xCA, 
   0x35, 0x85, 0xDC, 0x35, 0x85, 0xDC, 0x37, 0x87, 0xDE, 0x37, 0x87, 0xDE, 0x31, 0x81, 0xD8, 0x31, 
   0x81, 0xD8, 0x1A, 0x6A, 0xC1, 0x1A, 0x6A, 0xC1, 0x1F, 0x6F, 0xC6, 0x1F, 0x6F, 0xC6, 0x30, 0x80, 
   0xD7, 0x30, 0x80, 0xD7, 0x37, 0x87, 0xDE, 0x37, 0x87, 0xDE, 0x35, 0x85, 0xDC, 0x35, 0x85, 0xDC, 
   0x1B, 0x6B, 0xC2, 0x1B, 0x6B, 0xC2, 0x24, 0x72, 0xCC, 0x24, 0x72, 0xCC, 0x2B, 0x7A, 0xD1, 0x2B, 
   0x7A, 0xD1, 0x31, 0x81, 0xD4, 0x31, 0x81, 0xD4, 0x33, 0x84, 0xD5, 0x33, 0x84, 0xD5, 0x30, 0x81, 
   0xD2, 0x30, 0x81, 0xD2, 0x2C, 0x7C, 0xCF, 0x2C, 0x7C, 0xCF, 0x2C, 0x7B, 0xD2, 0x2C, 0x7B, 0xD2, 
   0x2D, 0x7B, 0xD5, 0x2D, 0x7B, 0xD5, 0x2C, 0x72, 0xBF, 0x2C, 0x72, 0xBF, 0x33, 0x7B, 0xC8, 0x33, 
   0x7B, 0xC8, 0x4F, 0x9B, 0xE7, 0x4F, 0x9B, 0xE7, 0x34, 0x82, 0xCE, 0x34, 0x82, 0xCE, 0x3D, 0x8D, 
   0xD4, 0x3D, 0x8D, 0xD4, 0x5F, 0xAF, 0xF0, 0x5F, 0xAF, 0xF0, 0x4F, 0x9D, 0xD8, 0x4F, 0x9D, 0xD8, 
   0x64, 0xB1, 0xE9, 0x64, 0xB1, 0xE9, 0x30, 0x6D, 0xC3, 0x30, 0x6D, 0xC3, 0x1D, 0x5A, 0xB0, 0x1D, 
   0x5A, 0xB0, 0x17, 0x54, 0xAA, 0x17, 0x54, 0xAA, 0x1A, 0x57, 0xAD, 0x1A, 0x57, 0xAD, 0x14, 0x51, 
   0xA7, 0x14, 0x51, 0xA7, 0x10, 0x4D, 0xA3, 0x10, 0x4D, 0xA3, 0x11, 0x4E, 0xA4, 0x11, 0x4E, 0xA4, 
   0x0F, 0x4C, 0xA2, 0x0F, 0x4C, 0xA2, 0x45, 0x8A, 0xD3, 0x45, 0x8A, 0xD3, 0x4B, 0x93, 0xDB, 0x4B, 
   0x93, 0xDB, 0x39, 0x81, 0xC9, 0x39, 0x81, 0xC9, 0x3D, 0x86, 0xD0, 0x3D, 0x86, 0xD0, 0x43, 0x8F, 
   0xDB, 0x43, 0x8F, 0xDB, 0x38, 0x86, 0xD2, 0x38, 0x86, 0xD2, 0x3E, 0x8C, 0xD9, 0x3E, 0x8C, 0xD9, 
   0x24, 0x74, 0xC1, 0x24, 0x74, 0xC1, 0x33, 0x82, 0xCB, 0x33, 0x82, 0xCB, 0x2A, 0x7C, 0xC4, 0x2A, 
   0x7C, 0xC4, 0x24, 0x76, 0xBE, 0x24, 0x76, 0xBE, 0x25, 0x78, 0xC3, 0x25, 0x78, 0xC3, 0x2F, 0x81, 
   0xCE, 0x2F, 0x81, 0xCE, 0x34, 0x88, 0xD4, 0x34, 0x88, 0xD4, 0x2F, 0x82, 0xD0, 0x2F, 0x82, 0xD0, 
   0x25, 0x7A, 0xC8, 0x25, 0x7A, 0xC8, 0x2E, 0x7F, 0xD0, 0x2E, 0x7F, 0xD0, 0x2F, 0x81, 0xD2, 0x2F, 
   0x81, 0xD2, 0x22, 0x79, 0xC9, 0x22, 0x79, 0xC9, 0x27, 0x80, 0xD0, 0x27, 0x80, 0xD0, 0x27, 0x80, 
   0xD0, 0x27, 0x80, 0xD0, 0x22, 0x79, 0xC9, 0x22, 0x79, 0xC9, 0x32, 0x84, 0xD5, 0x32, 0x84, 0xD5, 
   0x33, 0x84, 0xD5, 0x33, 0x84, 0xD5, 0x18, 0x6D, 0xBD, 0x18, 0x6D, 0xBD, 0x2B, 0x80, 0xD0, 0x2B, 
   0x80, 0xD0, 0x28, 0x7C, 0xCE, 0x28, 0x7C, 0xCE, 0x16, 0x6A, 0xBC, 0x16, 0x6A, 0xBC, 0x12, 0x65, 
   0xBA, 0x12, 0x65, 0xBA, 0x19, 0x6C, 0xC1, 0x19, 0x6C, 0xC1, 0x21, 0x74, 0xC9, 0x21, 0x74, 0xC9, 
   0x2A, 0x7D, 0xD2, 0x2A, 0x7D, 0xD2, 0x1E, 0x6F, 0xC4, 0x1E, 0x6F, 0xC4, 0x2D, 0x7E, 0xD3, 0x2D, 
   0x7E, 0xD3, 0x25, 0x76, 0xCB, 0x25, 0x76, 0xCB, 0x22, 0x73, 0xC8, 0x22, 0x73, 0xC8, 0x20, 0x71, 
   0xC6, 0x20, 0x71, 0xC6, 0x20, 0x71, 0xC6, 0x20, 0x71, 0xC6, 0x29, 0x7A, 0xCF, 0x29, 0x7A, 0xCF, 
   0x1E, 0x6F, 0xC4, 0x1E, 0x6F, 0xC4, 0x24, 0x70, 0xCA, 0x24, 0x70, 0xCA, 0x2D, 0x7A, 0xD1, 0x2D, 
   0x7A, 0xD1, 0x30, 0x7E, 0xD1, 0x30, 0x7E, 0xD1, 0x2B, 0x7A, 0xCB, 0x2B, 0x7A, 0xCB, 0x28, 0x77, 
   0xC8, 0x28, 0x77, 0xC8, 0x2A, 0x78, 0xCB, 0x2A, 0x78, 0xCB, 0x29, 0x76, 0xCD, 0x29, 0x76, 0xCD, 
   0x23, 0x6F, 0xC9, 0x23, 0x6F, 0xC9, 0x2D, 0x72, 0xC1, 0x2D, 0x72, 0xC1, 0x31, 0x79, 0xC7, 0x31, 
   0x79, 0xC7, 0x4D, 0x98, 0xE6, 0x4D, 0x98, 0xE6, 0x35, 0x83, 0xD0, 0x35, 0x83, 0xD0, 0x40, 0x8F, 
   0xD8, 0x40, 0x8F, 0xD8, 0x61, 0xB0, 0xF3, 0x61, 0xB0, 0xF3, 0x50, 0x9D, 0xDB, 0x50, 0x9D, 0xDB, 
   0x65, 0xB2, 0xEB, 0x65, 0xB2, 0xEB, 0x1F, 0x5C, 0xB2, 0x1F, 0x5C, 0xB2, 0x0A, 0x47, 0x9D, 0x0A, 
   0x47, 0x9D, 0x09, 0x46, 0x9C, 0x09, 0x46, 0x9C, 0x19, 0x56, 0xAC, 0x19, 0x56, 0xAC, 0x23, 0x60, 
   0xB6, 0x23, 0x60, 0xB6, 0x28, 0x65, 0xBB, 0x28, 0x65, 0xBB, 0x27, 0x64, 0xBA, 0x27, 0x64, 0xBA, 
   0x1E, 0x5B, 0xB1, 0x1E, 0x5B, 0xB1, 0x45, 0x8A, 0xD3, 0x45, 0x8A, 0xD3, 0x4B, 0x93, 0xDB, 0x4B, 
   0x93, 0xDB, 0x39, 0x81, 0xC9, 0x39, 0x81, 0xC9, 0x3D, 0x86, 0xD0, 0x3D, 0x86, 0xD0, 0x43, 0x8F, 
   0xDB, 0x43, 0x8F, 0xDB, 0x38, 0x86, 0xD2, 0x38, 0x86, 0xD2, 0x3E, 0x8C, 0xD9, 0x3E, 0x8C, 0xD9, 
   0x24, 0x74, 0xC1, 0x24, 0x74, 0xC1, 0x33, 0x82, 0xCB, 0x33, 0x82, 0xCB, 0x2A, 0x7C, 0xC4, 0x2A, 
   0x7C, 0xC4, 0x24, 0x76, 0xBE, 0x24, 0x76, 0xBE, 0x25, 0x78, 0xC3, 0x25, 0x78, 0xC3, 0x2F, 0x81, 
   0xCE, 0x2F, 0x81, 0xCE, 0x34, 0x88, 0xD4, 0x34, 0x88, 0xD4, 0x2F, 0x82, 0xD0, 0x2F, 0x82, 0xD0, 
   0x25, 0x7A, 0xC8, 0x25, 0x7A, 0xC8, 0x2E, 0x7F, 0xD0, 0x2E, 0x7F, 0xD0, 0x2F, 0x81, 0xD2, 0x2F, 
   0x81, 0xD2, 0x22, 0x79, 0xC9, 0x22, 0x79, 0xC9, 0x27, 0x80, 0xD0, 0x27, 0x80, 0xD0, 0x27, 0x80, 
   0xD0, 0x27, 0x80, 0xD0, 0x22, 0x79, 0xC9, 0x22, 0x79, 0xC9, 0x32, 0x84, 0xD5, 0x32, 0x84, 0xD5, 
   0x33, 0x84, 0xD5, 0x33, 0x84, 0xD5, 0x18, 0x6D, 0xBD, 0x18, 0x6D, 0xBD, 0x2B, 0x80, 0xD0, 0x2B, 
   0x80, 0xD0, 0x28, 0x7C, 0xCE, 0x28, 0x7C, 0xCE, 0x16, 0x6A, 0xBC, 0x16, 0x6A, 0xBC, 0x12, 0x65, 
   0xBA, 0x12, 0x65, 0xBA, 0x19, 0x6C, 0xC1, 0x19, 0x6C, 0xC1, 0x21, 0x74, 0xC9, 0x21, 0x74, 0xC9, 
   0x2A, 0x7D, 0xD2, 0x2A, 0x7D, 0xD2, 0x1E, 0x6F, 0xC4, 0x1E, 0x6F, 0xC4, 0x2D, 0x7E, 0xD3, 0x2D, 
   0x7E, 0xD3, 0x25, 0x76, 0xCB, 0x25, 0x76, 0xCB, 0x22, 0x73, 0xC8, 0x22, 0x73, 0xC8, 0x20, 0x71, 
   0xC6, 0x20, 0x71, 0xC6, 0x20, 0x71, 0xC6, 0x20, 0x71, 0xC6, 0x29, 0x7A, 0xCF, 0x29, 0x7A, 0xCF, 
   0x1E, 0x6F, 0xC4, 0x1E, 0x6F, 0xC4, 0x24, 0x70, 0xCA, 0x24, 0x70, 0xCA, 0x2D, 0x7A, 0xD1, 0x2D, 
   0x7A, 0xD1, 0x30, 0x7E, 0xD1, 0x30, 0x7E, 0xD1, 0x2B, 0x7A, 0xCB, 0x2B, 0x7A, 0xCB, 0x28, 0x77, 
   0xC8, 0x28, 0x77, 0xC8, 0x2A, 0x78, 0xCB, 0x2A, 0x78, 0xCB, 0x29, 0x76, 0xCD, 0x29, 0x76, 0xCD, 
   0x23, 0x6F, 0xC9, 0x23, 0x6F, 0xC9, 0x2D, 0x72, 0xC1, 0x2D, 0x72, 0xC1, 0x31, 0x79, 0xC7, 0x31, 
   0x79, 0xC7, 0x4D, 0x98, 0xE6, 0x4D, 0x98, 0xE6, 0x35, 0x83, 0xD0, 0x35, 0x83, 0xD0, 0x40, 0x8F, 
   0xD8, 0x40, 0x8F, 0xD8, 0x61, 0xB0, 0xF3, 0x61, 0xB0, 0xF3, 0x50, 0x9D, 0xDB, 0x50, 0x9D, 0xDB, 
   0x65, 0xB2, 0xEB, 0x65, 0xB2, 0xEB, 0x1F, 0x5C, 0xB2, 0x1F, 0x5C, 0xB2, 0x0A, 0x47, 0x9D, 0x0A, 
   0x47, 0x9D, 0x09, 0x46, 0x9C, 0x09, 0x46, 0x9C, 0x19, 0x56, 0xAC, 0x19, 0x56, 0xAC, 0x23, 0x60, 
   0xB6, 0x23, 0x60, 0xB6, 0x28, 0x65, 0xBB, 0x28, 0x65, 0xBB, 0x27, 0x64, 0xBA, 0x27, 0x64, 0xBA, 
   0x1E, 0x5B, 0xB1, 0x1E, 0x5B, 0xB1, 0x4C, 0x92, 0xD8, 0x4C, 0x92, 0xD8, 0x54, 0x9C, 0xE2, 0x54, 
   0x9C, 0xE2, 0x38, 0x80, 0xC8, 0x38, 0x80, 0xC8, 0x36, 0x80, 0xC8, 0x36, 0x80, 0xC8, 0x34, 0x81, 
   0xCA, 0x34, 0x81, 0xCA, 0x35, 0x83, 0xCF, 0x35, 0x83, 0xCF, 0x42, 0x90, 0xDC, 0x42, 0x90, 0xDC, 
   0x2F, 0x80, 0xCB, 0x2F, 0x80, 0xCB, 0x40, 0x90, 0xD7, 0x40, 0x90, 0xD7, 0x40, 0x92, 0xD9, 0x40, 
   0x92, 0xD9, 0x3C, 0x8E, 0xD6, 0x3C, 0x8E, 0xD6, 0x32, 0x86, 0xCE, 0x32, 0x86, 0xCE, 0x30, 0x83, 
   0xCE, 0x30, 0x83, 0xCE, 0x32, 0x86, 0xD2, 0x32, 0x86, 0xD2, 0x30, 0x84, 0xD0, 0x30, 0x84, 0xD0, 
   0x29, 0x7F, 0xCB, 0x29, 0x7F, 0xCB, 0x15, 0x66, 0xB7, 0x15, 0x66, 0xB7, 0x29, 0x7B, 0xCC, 0x29, 
   0x7B, 0xCC, 0x24, 0x7B, 0xCB, 0x24, 0x7B, 0xCB, 0x22, 0x7B, 0xCB, 0x22, 0x7B, 0xCB, 0x20, 0x79, 
   0xC9, 0x20, 0x79, 0xC9, 0x21, 0x78, 0xC8, 0x21, 0x78, 0xC8, 0x29, 0x7B, 0xCC, 0x29, 0x7B, 0xCC, 
   0x19, 0x6A, 0xBB, 0x19, 0x6A, 0xBB, 0x2F, 0x84, 0xD2, 0x2F, 0x84, 0xD2, 0x27, 0x7C, 0xCA, 0x27, 
   0x7C, 0xCA, 0x21, 0x76, 0xC6, 0x21, 0x76, 0xC6, 0x29, 0x7E, 0xCE, 0x29, 0x7E, 0xCE, 0x2A, 0x7E, 
   0xD0, 0x2A, 0x7E, 0xD0, 0x17, 0x6A, 0xBF, 0x17, 0x6A, 0xBF, 0x16, 0x69, 0xBE, 0x16, 0x69, 0xBE, 
   0x2D, 0x80, 0xD6, 0x2D, 0x80, 0xD6, 0x0F, 0x60, 0xB5, 0x0F, 0x60, 0xB5, 0x0B, 0x5C, 0xB1, 0x0B, 
   0x5C, 0xB1, 0x13, 0x64, 0xB9, 0x13, 0x64, 0xB9, 0x36, 0x87, 0xDC, 0x36, 0x87, 0xDC, 0x2D, 0x7E, 
   0xD3, 0x2D, 0x7E, 0xD3, 0x04, 0x55, 0xAA, 0x04, 0x55, 0xAA, 0x0D, 0x5E, 0xB3, 0x0D, 0x5E, 0xB3, 
   0x26, 0x77, 0xCC, 0x26, 0x77, 0xCC, 0x21, 0x6D, 0xC7, 0x21, 0x6D, 0xC7, 0x28, 0x75, 0xCC, 0x28, 
   0x75, 0xCC, 0x27, 0x75, 0xC8, 0x27, 0x75, 0xC8, 0x22, 0x71, 0xC2, 0x22, 0x71, 0xC2, 0x23, 0x72, 
   0xC3, 0x23, 0x72, 0xC3, 0x2A, 0x78, 0xCB, 0x2A, 0x78, 0xCB, 0x27, 0x74, 0xCB, 0x27, 0x74, 0xCB, 
   0x1C, 0x68, 0xC2, 0x1C, 0x68, 0xC2, 0x3A, 0x7F, 0xCE, 0x3A, 0x7F, 0xCE, 0x39, 0x81, 0xCF, 0x39, 
   0x81, 0xCF, 0x50, 0x9B, 0xE9, 0x50, 0x9B, 0xE9, 0x37, 0x85, 0xD2, 0x37, 0x85, 0xD2, 0x42, 0x91, 
   0xDA, 0x42, 0x91, 0xDA, 0x61, 0xB0, 0xF3, 0x61, 0xB0, 0xF3, 0x4E, 0x9B, 0xD9, 0x4E, 0x9B, 0xD9, 
   0x64, 0xB1, 0xEA, 0x64, 0xB1, 0xEA, 0x21, 0x5E, 0xB4, 0x21, 0x5E, 0xB4, 0x0D, 0x4A, 0xA0, 0x0D, 
   0x4A, 0xA0, 0x09, 0x46, 0x9C, 0x09, 0x46, 0x9C, 0x0E, 0x4B, 0xA1, 0x0E, 0x4B, 0xA1, 0x0A, 0x47, 
   0x9D, 0x0A, 0x47, 0x9D, 0x06, 0x43, 0x99, 0x06, 0x43, 0x99, 0x06, 0x43, 0x99, 0x06, 0x43, 0x99, 
   0x01, 0x3E, 0x94, 0x01, 0x3E, 0x94, 0x4C, 0x92, 0xD8, 0x4C, 0x92, 0xD8, 0x54, 0x9C, 0xE2, 0x54, 
   0x9C, 0xE2, 0x38, 0x80, 0xC8, 0x38, 0x80, 0xC8, 0x36, 0x80, 0xC8, 0x36, 0x80, 0xC8, 0x34, 0x81, 
   0xCA, 0x34, 0x81, 0xCA, 0x35, 0x83, 0xCF, 0x35, 0x83, 0xCF, 0x42, 0x90, 0xDC, 0x42, 0x90, 0xDC, 
   0x2F, 0x80, 0xCB, 0x2F, 0x80, 0xCB, 0x40, 0x90, 0xD7, 0x40, 0x90, 0xD7, 0x40, 0x92, 0xD9, 0x40, 
   0x92, 0xD9, 0x3C, 0x8E, 0xD6, 0x3C, 0x8E, 0xD6, 0x32, 0x86, 0xCE, 0x32, 0x86, 0xCE, 0x30, 0x83, 
   0xCE, 0x30, 0x83, 0xCE, 0x32, 0x86, 0xD2, 0x32, 0x86, 0xD2, 0x30, 0x84, 0xD0, 0x30, 0x84, 0xD0, 
   0x29, 0x7F, 0xCB, 0x29, 0x7F, 0xCB, 0x15, 0x66, 0xB7, 0x15, 0x66, 0xB7, 0x29, 0x7B, 0xCC, 0x29, 
   0x7B, 0xCC, 0x24, 0x7B, 0xCB, 0x24, 0x7B, 0xCB, 0x22, 0x7B, 0xCB, 0x22, 0x7B, 0xCB, 0x20, 0x79, 
   0xC9, 0x20, 0x79, 0xC9, 0x21, 0x78, 0xC8, 0x21, 0x78, 0xC8, 0x29, 0x7B, 0xCC, 0x29, 0x7B, 0xCC, 
   0x19, 0x6A, 0xBB, 0x19, 0x6A, 0xBB, 0x2F, 0x84, 0xD2, 0x2F, 0x84, 0xD2, 0x27, 0x7C, 0xCA, 0x27, 
   0x7C, 0xCA, 0x21, 0x76, 0xC6, 0x21, 0x76, 0xC6, 0x29, 0x7E, 0xCE, 0x29, 0x7E, 0xCE, 0x2A, 0x7E, 
   0xD0, 0x2A, 0x7E, 0xD0, 0x17, 0x6A, 0xBF, 0x17, 0x6A, 0xBF, 0x16, 0x69, 0xBE, 0x16, 0x69, 0xBE, 
   0x2D, 0x80, 0xD6, 0x2D, 0x80, 0xD6, 0x0F, 0x60, 0xB5, 0x0F, 0x60, 0xB5, 0x0B, 0x5C, 0xB1, 0x0B, 
   0x5C, 0xB1, 0x13, 0x64, 0xB9, 0x13, 0x64, 0xB9, 0x36, 0x87, 0xDC, 0x36, 0x87, 0xDC, 0x2D, 0x7E, 
   0xD3, 0x2D, 0x7E, 0xD3, 0x04, 0x55, 0xAA, 0x04, 0x55, 0xAA, 0x0D, 0x5E, 0xB3, 0x0D, 0x5E, 0xB3, 
   0x26, 0x77, 0xCC, 0x26, 0x77, 0xCC, 0x21, 0x6D, 0xC7, 0x21, 0x6D, 0xC7, 0x28, 0x75, 0xCC, 0x28, 
   0x75, 0xCC, 0x27, 0x75, 0xC8, 0x27, 0x75, 0xC8, 0x22, 0x71, 0xC2, 0x22, 0x71, 0xC2, 0x23, 0x72, 
   0xC3, 0x23, 0x72, 0xC3, 0x2A, 0x78, 0xCB, 0x2A, 0x78, 0xCB, 0x27, 0x74, 0xCB, 0x27, 0x74, 0xCB, 
   0x1C, 0x68, 0xC2, 0x1C, 0x68, 0xC2, 0x3A, 0x7F, 0xCE, 0x3A, 0x7F, 0xCE, 0x39, 0x81, 0xCF, 0x39, 
   0x81, 0xCF, 0x50, 0x9B, 0xE9, 0x50, 0x9B, 0xE9, 0x37, 0x85, 0xD2, 0x37, 0x85, 0xD2, 0x42, 0x91, 
   0xDA, 0x42, 0x91, 0xDA, 0x61, 0xB0, 0xF3, 0x61, 0xB0, 0xF3, 0x4E, 0x9B, 0xD9, 0x4E, 0x9B, 0xD9, 
   0x64, 0xB1, 0xEA, 0x64, 0xB1, 0xEA, 0x21, 0x5E, 0xB4, 0x21, 0x5E, 0xB4, 0x0D, 0x4A, 0xA0, 0x0D, 
   0x4A, 0xA0, 0x09, 0x46, 0x9C, 0x09, 0x46, 0x9C, 0x0E, 0x4B, 0xA1, 0x0E, 0x4B, 0xA1, 0x0A, 0x47, 
   0x9D, 0x0A, 0x47, 0x9D, 0x06, 0x43, 0x99, 0x06, 0x43, 0x99, 0x06, 0x43, 0x99, 0x06, 0x43, 0x99, 
   0x01, 0x3E, 0x94, 0x01, 0x3E, 0x94, 0x40, 0x8B, 0xD0, 0x40, 0x8B, 0xD0, 0x53, 0x9E, 0xE3, 0x53, 
   0x9E, 0xE3, 0x3C, 0x87, 0xCC, 0x3C, 0x87, 0xCC, 0x33, 0x7F, 0xC7, 0x33, 0x7F, 0xC7, 0x33, 0x7F, 
   0xC7, 0x33, 0x7F, 0xC7, 0x3F, 0x8C, 0xD5, 0x3F, 0x8C, 0xD5, 0x3D, 0x8A, 0xD3, 0x3D, 0x8A, 0xD3, 
   0x37, 0x83, 0xCF, 0x37, 0x83, 0xCF, 0x2C, 0x79, 0xC2, 0x2C, 0x79, 0xC2, 0x39, 0x86, 0xCF, 0x39, 
   0x86, 0xCF, 0x3D, 0x8C, 0xD5, 0x3D, 0x8C, 0xD5, 0x33, 0x84, 0xCF, 0x33, 0x84, 0xCF, 0x30, 0x80, 
   0xCD, 0x30, 0x80, 0xCD, 0x32, 0x84, 0xD1, 0x32, 0x84, 0xD1, 0x31, 0x83, 0xD1, 0x31, 0x83, 0xD1, 
   0x2A, 0x7C, 0xCA, 0x2A, 0x7C, 0xCA, 0x24, 0x73, 0xC4, 0x24, 0x73, 0xC4, 0x37, 0x88, 0xD9, 0x37, 
   0x88, 0xD9, 0x2D, 0x82, 0xD2, 0x2D, 0x82, 0xD2, 0x23, 0x7A, 0xCA, 0x23, 0x7A, 0xCA, 0x24, 0x7B, 
   0xCB, 0x24, 0x7B, 0xCB, 0x31, 0x86, 0xD6, 0x31, 0x86, 0xD6, 0x3F, 0x90, 0xE1, 0x3F, 0x90, 0xE1, 
   0x30, 0x7F, 0xD0, 0x30, 0x7F, 0xD0, 0x26, 0x7A, 0xC6, 0x26, 0x7A, 0xC6, 0x27, 0x7A, 0xC8, 0x27, 
   0x7A, 0xC8, 0x24, 0x76, 0xC7, 0x24, 0x76, 0xC7, 0x29, 0x7B, 0xCD, 0x29, 0x7B, 0xCD, 0x2F, 0x80, 
   0xD5, 0x2F, 0x80, 0xD5, 0x22, 0x72, 0xC9, 0x22, 0x72, 0xC9, 0x17, 0x67, 0xC0, 0x17, 0x67, 0xC0, 
   0x1C, 0x6C, 0xC5, 0x1C, 0x6C, 0xC5, 0x40, 0x92, 0xE4, 0x40, 0x92, 0xE4, 0x31, 0x83, 0xD5, 0x31, 
   0x83, 0xD5, 0x26, 0x78, 0xCA, 0x26, 0x78, 0xCA, 0x3C, 0x8E, 0xE0, 0x3C, 0x8E, 0xE0, 0x3D, 0x8F, 
   0xE1, 0x3D, 0x8F, 0xE1, 0x27, 0x79, 0xCB, 0x27, 0x79, 0xCB, 0x2F, 0x81, 0xD3, 0x2F, 0x81, 0xD3, 
   0x3A, 0x8C, 0xDE, 0x3A, 0x8C, 0xDE, 0x21, 0x6A, 0xC5, 0x21, 0x6A, 0xC5, 0x24, 0x6E, 0xC6, 0x24, 
   0x6E, 0xC6, 0x23, 0x6F, 0xC2, 0x23, 0x6F, 0xC2, 0x21, 0x6D, 0xBF, 0x21, 0x6D, 0xBF, 0x27, 0x73, 
   0xC5, 0x27, 0x73, 0xC5, 0x2F, 0x7B, 0xCE, 0x2F, 0x7B, 0xCE, 0x2D, 0x77, 0xCF, 0x2D, 0x77, 0xCF, 
   0x25, 0x6E, 0xC9, 0x25, 0x6E, 0xC9, 0x49, 0x8F, 0xDC, 0x49, 0x8F, 0xDC, 0x41, 0x89, 0xD6, 0x41, 
   0x89, 0xD6, 0x52, 0x9E, 0xEA, 0x52, 0x9E, 0xEA, 0x37, 0x85, 0xD1, 0x37, 0x85, 0xD1, 0x41, 0x91, 
   0xD8, 0x41, 0x91, 0xD8, 0x5F, 0xAF, 0xF0, 0x5F, 0xAF, 0xF0, 0x4C, 0x9A, 0xD5, 0x4C, 0x9A, 0xD5, 
   0x63, 0xB0, 0xE8, 0x63, 0xB0, 0xE8, 0x0A, 0x47, 0x9D, 0x0A, 0x47, 0x9D, 0x04, 0x41, 0x97, 0x04, 
   0x41, 0x97, 0x0B, 0x48, 0x9E, 0x0B, 0x48, 0x9E, 0x10, 0x4D, 0xA3, 0x10, 0x4D, 0xA3, 0x05, 0x42, 
   0x98, 0x05, 0x42, 0x98, 0x07, 0x44, 0x9A, 0x07, 0x44, 0x9A, 0x1A, 0x57, 0xAD, 0x1A, 0x57, 0xAD, 
   0x29, 0x66, 0xBC, 0x29, 0x66, 0xBC, 0x40, 0x8B, 0xD0, 0x40, 0x8B, 0xD0, 0x53, 0x9E, 0xE3, 0x53, 
   0x9E, 0xE3, 0x3C, 0x87, 0xCC, 0x3C, 0x87, 0xCC, 0x33, 0x7F, 0xC7, 0x33, 0x7F, 0xC7, 0x33, 0x7F, 
   0xC7, 0x33, 0x7F, 0xC7, 0x3F, 0x8C, 0xD5, 0x3F, 0x8C, 0xD5, 0x3D, 0x8A, 0xD3, 0x3D, 0x8A, 0xD3, 
   0x37, 0x83, 0xCF, 0x37, 0x83, 0xCF, 0x2C, 0x79, 0xC2, 0x2C, 0x79, 0xC2, 0x39, 0x86, 0xCF, 0x39, 
   0x86, 0xCF, 0x3D, 0x8C, 0xD5, 0x3D, 0x8C, 0xD5, 0x33, 0x84, 0xCF, 0x33, 0x84, 0xCF, 0x30, 0x80, 
   0xCD, 0x30, 0x80, 0xCD, 0x32, 0x84, 0xD1, 0x32, 0x84, 0xD1, 0x31, 0x83, 0xD1, 0x31, 0x83, 0xD1, 
   0x2A, 0x7C, 0xCA, 0x2A, 0x7C, 0xCA, 0x24, 0x73, 0xC4, 0x24, 0x73, 0xC4, 0x37, 0x88, 0xD9, 0x37, 
   0x88, 0xD9, 0x2D, 0x82, 0xD2, 0x2D, 0x82, 0xD2, 0x23, 0x7A, 0xCA, 0x23, 0x7A, 0xCA, 0x24, 0x7B, 
   0xCB, 0x24, 0x7B, 0xCB, 0x31, 0x86, 0xD6, 0x31, 0x86, 0xD6, 0x3F, 0x90, 0xE1, 0x3F, 0x90, 0xE1, 
   0x30, 0x7F, 0xD0, 0x30, 0x7F, 0xD0, 0x26, 0x7A, 0xC6, 0x26, 0x7A, 0xC6, 0x27, 0x7A, 0xC8, 0x27, 
   0x7A, 0xC8, 0x24, 0x76, 0xC7, 0x24, 0x76, 0xC7, 0x29, 0x7B, 0xCD, 0x29, 0x7B, 0xCD, 0x2F, 0x80, 
   0xD5, 0x2F, 0x80, 0xD5, 0x22, 0x72, 0xC9, 0x22, 0x72, 0xC9, 0x17, 0x67, 0xC0, 0x17, 0x67, 0xC0, 
   0x1C, 0x6C, 0xC5, 0x1C, 0x6C, 0xC5, 0x40, 0x92, 0xE4, 0x40, 0x92, 0xE4, 0x31, 0x83, 0xD5, 0x31, 
   0x83, 0xD5, 0x26, 0x78, 0xCA, 0x26, 0x78, 0xCA, 0x3C, 0x8E, 0xE0, 0x3C, 0x8E, 0xE0, 0x3D, 0x8F, 
   0xE1, 0x3D, 0x8F, 0xE1, 0x27, 0x79, 0xCB, 0x27, 0x79, 0xCB, 0x2F, 0x81, 0xD3, 0x2F, 0x81, 0xD3, 
   0x3A, 0x8C, 0xDE, 0x3A, 0x8C, 0xDE, 0x21, 0x6A, 0xC5, 0x21, 0x6A, 0xC5, 0x24, 0x6E, 0xC6, 0x24, 
   0x6E, 0xC6, 0x23, 0x6F, 0xC2, 0x23, 0x6F, 0xC2, 0x21, 0x6D, 0xBF, 0x21, 0x6D, 0xBF, 0x27, 0x73, 
   0xC5, 0x27, 0x73, 0xC5, 0x2F, 0x7B, 0xCE, 0x2F, 0x7B, 0xCE, 0x2D, 0x77, 0xCF, 0x2D, 0x77, 0xCF, 
   0x25, 0x6E, 0xC9, 0x25, 0x6E, 0xC9, 0x49, 0x8F, 0xDC, 0x49, 0x8F, 0xDC, 0x41, 0x89, 0xD6, 0x41, 
   0x89, 0xD6, 0x52, 0x9E, 0xEA, 0x52, 0x9E, 0xEA, 0x37, 0x85, 0xD1, 0x37, 0x85, 0xD1, 0x41, 0x91, 
   0xD8, 0x41, 0x91, 0xD8, 0x5F, 0xAF, 0xF0, 0x5F, 0xAF, 0xF0, 0x4C, 0x9A, 0xD5, 0x4C, 0x9A, 0xD5, 
   0x63, 0xB0, 0xE8, 0x63, 0xB0, 0xE8, 0x0A, 0x47, 0x9D, 0x0A, 0x47, 0x9D, 0x04, 0x41, 0x97, 0x04, 
   0x41, 0x97, 0x0B, 0x48, 0x9E, 0x0B, 0x48, 0x9E, 0x10, 0x4D, 0xA3, 0x10, 0x4D, 0xA3, 0x05, 0x42, 
   0x98, 0x05, 0x42, 0x98, 0x07, 0x44, 0x9A, 0x07, 0x44, 0x9A, 0x1A, 0x57, 0xAD, 0x1A, 0x57, 0xAD, 
   0x29, 0x66, 0xBC, 0x29, 0x66, 0xBC, 0x2A, 0x79, 0xBC, 0x2A, 0x79, 0xBC, 0x4A, 0x99, 0xDC, 0x4A, 
   0x99, 0xDC, 0x40, 0x8E, 0xD3, 0x40, 0x8E, 0xD3, 0x35, 0x82, 0xC7, 0x35, 0x82, 0xC7, 0x38, 0x84, 
   0xCC, 0x38, 0x84, 0xCC, 0x4A, 0x93, 0xDD, 0x4A, 0x93, 0xDD, 0x2A, 0x73, 0xBD, 0x2A, 0x73, 0xBD, 
   0x2F, 0x78, 0xC2, 0x2F, 0x78, 0xC2, 0x27, 0x72, 0xBE, 0x27, 0x72, 0xBE, 0x31, 0x7C, 0xC8, 0x31, 
   0x7C, 0xC8, 0x31, 0x7B, 0xC9, 0x31, 0x7B, 0xC9, 0x25, 0x70, 0xBE, 0x25, 0x70, 0xBE, 0x23, 0x6E, 
   0xBD, 0x23, 0x6E, 0xBD, 0x27, 0x74, 0xC3, 0x27, 0x74, 0xC3, 0x1F, 0x6E, 0xBF, 0x1F, 0x6E, 0xBF, 
   0x11, 0x60, 0xB1, 0x11, 0x60, 0xB1, 0x1C, 0x65, 0xBB, 0x1C, 0x65, 0xBB, 0x25, 0x70, 0xC6, 0x25, 
   0x70, 0xC6, 0x15, 0x65, 0xBA, 0x15, 0x65, 0xBA, 0x10, 0x61, 0xB6, 0x10, 0x61, 0xB6, 0x14, 0x65, 
   0xBA, 0x14, 0x65, 0xBA, 0x1E, 0x6E, 0xC3, 0x1E, 0x6E, 0xC3, 0x31, 0x7C, 0xD2, 0x31, 0x7C, 0xD2, 
   0x29, 0x72, 0xC8, 0x29, 0x72, 0xC8, 0x14, 0x63, 0xB2, 0x14, 0x63, 0xB2, 0x24, 0x73, 0xC2, 0x24, 
   0x73, 0xC2, 0x21, 0x70, 0xC1, 0x21, 0x70, 0xC1, 0x18, 0x65, 0xBB, 0x18, 0x65, 0xBB, 0x20, 0x6D, 
   0xC4, 0x20, 0x6D, 0xC4, 0x27, 0x72, 0xCE, 0x27, 0x72, 0xCE, 0x1D, 0x67, 0xC5, 0x1D, 0x67, 0xC5, 
   0x12, 0x5C, 0xBA, 0x12, 0x5C, 0xBA, 0x1B, 0x6D, 0xBF, 0x1B, 0x6D, 0xBF, 0x33, 0x85, 0xD7, 0x33, 
   0x85, 0xD7, 0x2B, 0x7D, 0xCF, 0x2B, 0x7D, 0xCF, 0x18, 0x6A, 0xBC, 0x18, 0x6A, 0xBC, 0x09, 0x5B, 
   0xAD, 0x09, 0x5B, 0xAD, 0x10, 0x62, 0xB4, 0x10, 0x62, 0xB4, 0x2A, 0x7C, 0xCE, 0x2A, 0x7C, 0xCE, 
   0x2C, 0x7E, 0xD0, 0x2C, 0x7E, 0xD0, 0x21, 0x6A, 0xC5, 0x21, 0x6A, 0xC5, 0x23, 0x6D, 0xC5, 0x23, 
   0x6D, 0xC5, 0x24, 0x70, 0xC3, 0x24, 0x70, 0xC3, 0x25, 0x71, 0xC3, 0x25, 0x71, 0xC3, 0x29, 0x75, 
   0xC7, 0x29, 0x75, 0xC7, 0x2D, 0x79, 0xCC, 0x2D, 0x79, 0xCC, 0x2E, 0x78, 0xD0, 0x2E, 0x78, 0xD0, 
   0x2D, 0x76, 0xD1, 0x2D, 0x76, 0xD1, 0x4C, 0x94, 0xDC, 0x4C, 0x94, 0xDC, 0x3F, 0x89, 0xD1, 0x3F, 
   0x89, 0xD1, 0x4C, 0x99, 0xE2, 0x4C, 0x99, 0xE2, 0x31, 0x81, 0xC8, 0x31, 0x81, 0xC8, 0x3E, 0x8F, 
   0xD2, 0x3E, 0x8F, 0xD2, 0x5E, 0xAF, 0xEC, 0x5E, 0xAF, 0xEC, 0x4F, 0x9F, 0xD6, 0x4F, 0x9F, 0xD6, 
   0x68, 0xB6, 0xEB, 0x68, 0xB6, 0xEB, 0x1B, 0x58, 0xAE, 0x1B, 0x58, 0xAE, 0x13, 0x50, 0xA6, 0x13, 
   0x50, 0xA6, 0x17, 0x54, 0xAA, 0x17, 0x54, 0xAA, 0x17, 0x54, 0xAA, 0x17, 0x54, 0xAA, 0x07, 0x44, 
   0x9A, 0x07, 0x44, 0x9A, 0x00, 0x3D, 0x93, 0x00, 0x3D, 0x93, 0x0B, 0x48, 0x9E, 0x0B, 0x48, 0x9E, 
   0x13, 0x50, 0xA6, 0x13, 0x50, 0xA6, 0x2A, 0x79, 0xBC, 0x2A, 0x79, 0xBC, 0x4A, 0x99, 0xDC, 0x4A, 
   0x99, 0xDC, 0x40, 0x8E, 0xD3, 0x40, 0x8E, 0xD3, 0x35, 0x82, 0xC7, 0x35, 0x82, 0xC7, 0x38, 0x84, 
   0xCC, 0x38, 0x84, 0xCC, 0x4A, 0x93, 0xDD, 0x4A, 0x93, 0xDD, 0x2A, 0x73, 0xBD, 0x2A, 0x73, 0xBD, 
   0x2F, 0x78, 0xC2, 0x2F, 0x78, 0xC2, 0x27, 0x72, 0xBE, 0x27, 0x72, 0xBE, 0x31, 0x7C, 0xC8, 0x31, 
   0x7C, 0xC8, 0x31, 0x7B, 0xC9, 0x31, 0x7B, 0xC9, 0x25, 0x70, 0xBE, 0x25, 0x70, 0xBE, 0x23, 0x6E, 
   0xBD, 0x23, 0x6E, 0xBD, 0x27, 0x74, 0xC3, 0x27, 0x74, 0xC3, 0x1F, 0x6E, 0xBF, 0x1F, 0x6E, 0xBF, 
   0x11, 0x60, 0xB1, 0x11, 0x60, 0xB1, 0x1C, 0x65, 0xBB, 0x1C, 0x65, 0xBB, 0x25, 0x70, 0xC6, 0x25, 
   0x70, 0xC6, 0x15, 0x65, 0xBA, 0x15, 0x65, 0xBA, 0x10, 0x61, 0xB6, 0x10, 0x61, 0xB6, 0x14, 0x65, 
   0xBA, 0x14, 0x65, 0xBA, 0x1E, 0x6E, 0xC3, 0x1E, 0x6E, 0xC3, 0x31, 0x7C, 0xD2, 0x31, 0x7C, 0xD2, 
   0x29, 0x72, 0xC8, 0x29, 0x72, 0xC8, 0x14, 0x63, 0xB2, 0x14, 0x63, 0xB2, 0x24, 0x73, 0xC2, 0x24, 
   0x73, 0xC2, 0x21, 0x70, 0xC1, 0x21, 0x70, 0xC1, 0x18, 0x65, 0xBB, 0x18, 0x65, 0xBB, 0x20, 0x6D, 
   0xC4, 0x20, 0x6D, 0xC4, 0x27, 0x72, 0xCE, 0x27, 0x72, 0xCE, 0x1D, 0x67, 0xC5, 0x1D, 0x67, 0xC5, 
   0x12, 0x5C, 0xBA, 0x12, 0x5C, 0xBA, 0x1B, 0x6D, 0xBF, 0x1B, 0x6D, 0xBF, 0x33, 0x85, 0xD7, 0x33, 
   0x85, 0xD7, 0x2B, 0x7D, 0xCF, 0x2B, 0x7D, 0xCF, 0x18, 0x6A, 0xBC, 0x18, 0x6A, 0xBC, 0x09, 0x5B, 
   0xAD, 0x09, 0x5B, 0xAD, 0x10, 0x62, 0xB4, 0x10, 0x62, 0xB4, 0x2A, 0x7C, 0xCE, 0x2A, 0x7C, 0xCE, 
   0x2C, 0x7E, 0xD0, 0x2C, 0x7E, 0xD0, 0x21, 0x6A, 0xC5, 0x21, 0x6A, 0xC5, 0x23, 0x6D, 0xC5, 0x23, 
   0x6D, 0xC5, 0x24, 0x70, 0xC3, 0x24, 0x70, 0xC3, 0x25, 0x71, 0xC3, 0x25, 0x71, 0xC3, 0x29, 0x75, 
   0xC7, 0x29, 0x75, 0xC7, 0x2D, 0x79, 0xCC, 0x2D, 0x79, 0xCC, 0x2E, 0x78, 0xD0, 0x2E, 0x78, 0xD0, 
   0x2D, 0x76, 0xD1, 0x2D, 0x76, 0xD1, 0x4C, 0x94, 0xDC, 0x4C, 0x94, 0xDC, 0x3F, 0x89, 0xD1, 0x3F, 
   0x89, 0xD1, 0x4C, 0x99, 0xE2, 0x4C, 0x99, 0xE2, 0x31, 0x81, 0xC8, 0x31, 0x81, 0xC8, 0x3E, 0x8F, 
   0xD2, 0x3E, 0x8F, 0xD2, 0x5E, 0xAF, 0xEC, 0x5E, 0xAF, 0xEC, 0x4F, 0x9F, 0xD6, 0x4F, 0x9F, 0xD6, 
   0x68, 0xB6, 0xEB, 0x68, 0xB6, 0xEB, 0x1B, 0x58, 0xAE, 0x1B, 0x58, 0xAE, 0x13, 0x50, 0xA6, 0x13, 
   0x50, 0xA6, 0x17, 0x54, 0xAA, 0x17, 0x54, 0xAA, 0x17, 0x54, 0xAA, 0x17, 0x54, 0xAA, 0x07, 0x44, 
   0x9A, 0x07, 0x44, 0x9A, 0x00, 0x3D, 0x93, 0x00, 0x3D, 0x93, 0x0B, 0x48, 0x9E, 0x0B, 0x48, 0x9E, 
   0x13, 0x50, 0xA6, 0x13, 0x50, 0xA6, 0x22, 0x76, 0xB8, 0x22, 0x76, 0xB8, 0x46, 0x97, 0xDA, 0x46, 
   0x97, 0xDA, 0x3F, 0x90, 0xD4, 0x3F, 0x90, 0xD4, 0x2B, 0x79, 0xBE, 0x2B, 0x79, 0xBE, 0x32, 0x7C, 
   0xC4, 0x32, 0x7C, 0xC4, 0x4A, 0x92, 0xDA, 0x4A, 0x92, 0xDA, 0x1B, 0x62, 0xAC, 0x1B, 0x62, 0xAC, 
   0x2E, 0x72, 0xBD, 0x2E, 0x72, 0xBD, 0x2C, 0x71, 0xC0, 0x2C, 0x71, 0xC0, 0x2E, 0x76, 0xC4, 0x2E, 
   0x76, 0xC4, 0x27, 0x6E, 0xBE, 0x27, 0x6E, 0xBE, 0x1C, 0x65, 0xB5, 0x1C, 0x65, 0xB5, 0x24, 0x6D, 
   0xBF, 0x24, 0x6D, 0xBF, 0x35, 0x7F, 0xD1, 0x35, 0x7F, 0xD1, 0x33, 0x7C, 0xD0, 0x33, 0x7C, 0xD0, 
   0x21, 0x6D, 0xC0, 0x21, 0x6D, 0xC0, 0x14, 0x5B, 0xB2, 0x14, 0x5B, 0xB2, 0x1C, 0x65, 0xBB, 0x1C, 
   0x65, 0xBB, 0x16, 0x63, 0xB9, 0x16, 0x63, 0xB9, 0x20, 0x70, 0xC5, 0x20, 0x70, 0xC5, 0x20, 0x70, 
   0xC5, 0x20, 0x70, 0xC5, 0x16, 0x63, 0xB9, 0x16, 0x63, 0xB9, 0x16, 0x5F, 0xB5, 0x16, 0x5F, 0xB5, 
   0x08, 0x4F, 0xA6, 0x08, 0x4F, 0xA6, 0x22, 0x6F, 0xBE, 0x22, 0x6F, 0xBE, 0x1A, 0x66, 0xB8, 0x1A, 
   0x66, 0xB8, 0x13, 0x5F, 0xB2, 0x13, 0x5F, 0xB2, 0x1C, 0x66, 0xBE, 0x1C, 0x66, 0xBE, 0x25, 0x6E, 
   0xC9, 0x25, 0x6E, 0xC9, 0x1C, 0x64, 0xC2, 0x1C, 0x64, 0xC2, 0x1B, 0x62, 0xC3, 0x1B, 0x62, 0xC3, 
   0x2D, 0x74, 0xD5, 0x2D, 0x74, 0xD5, 0x15, 0x67, 0xB8, 0x15, 0x67, 0xB8, 0x19, 0x6B, 0xBC, 0x19, 
   0x6B, 0xBC, 0x10, 0x62, 0xB3, 0x10, 0x62, 0xB3, 0x1C, 0x6E, 0xBF, 0x1C, 0x6E, 0xBF, 0x2A, 0x7C, 
   0xCD, 0x2A, 0x7C, 0xCD, 0x2E, 0x80, 0xD1, 0x2E, 0x80, 0xD1, 0x30, 0x82, 0xD3, 0x30, 0x82, 0xD3, 
   0x1E, 0x70, 0xC1, 0x1E, 0x70, 0xC1, 0x25, 0x6C, 0xC7, 0x25, 0x6C, 0xC7, 0x26, 0x6E, 0xC6, 0x26, 
   0x6E, 0xC6, 0x29, 0x72, 0xC6, 0x29, 0x72, 0xC6, 0x2B, 0x75, 0xC7, 0x2B, 0x75, 0xC7, 0x29, 0x73, 
   0xC5, 0x29, 0x73, 0xC5, 0x28, 0x71, 0xC5, 0x28, 0x71, 0xC5, 0x2C, 0x74, 0xCC, 0x2C, 0x74, 0xCC, 
   0x32, 0x79, 0xD4, 0x32, 0x79, 0xD4, 0x46, 0x8E, 0xD4, 0x46, 0x8E, 0xD4, 0x38, 0x83, 0xC8, 0x38, 
   0x83, 0xC8, 0x44, 0x92, 0xD7, 0x44, 0x92, 0xD7, 0x2B, 0x7C, 0xC0, 0x2B, 0x7C, 0xC0, 0x3B, 0x8D, 
   0xCE, 0x3B, 0x8D, 0xCE, 0x60, 0xB2, 0xEC, 0x60, 0xB2, 0xEC, 0x54, 0xA4, 0xD9, 0x54, 0xA4, 0xD9, 
   0x71, 0xC0, 0xF1, 0x71, 0xC0, 0xF1, 0x14, 0x51, 0xA7, 0x14, 0x51, 0xA7, 0x06, 0x43, 0x99, 0x06, 
   0x43, 0x99, 0x09, 0x46, 0x9C, 0x09, 0x46, 0x9C, 0x17, 0x54, 0xAA, 0x17, 0x54, 0xAA, 0x17, 0x54, 
   0xAA, 0x17, 0x54, 0xAA, 0x12, 0x4F, 0xA5, 0x12, 0x4F, 0xA5, 0x0C, 0x49, 0x9F, 0x0C, 0x49, 0x9F, 
   0x03, 0x40, 0x96, 0x03, 0x40, 0x96, 0x22, 0x76, 0xB8, 0x22, 0x76, 0xB8, 0x46, 0x97, 0xDA, 0x46, 
   0x97, 0xDA, 0x3F, 0x90, 0xD4, 0x3F, 0x90, 0xD4, 0x2B, 0x79, 0xBE, 0x2B, 0x79, 0xBE, 0x32, 0x7C, 
   0xC4, 0x32, 0x7C, 0xC4, 0x4A, 0x92, 0xDA, 0x4A, 0x92, 0xDA, 0x1B, 0x62, 0xAC, 0x1B, 0x62, 0xAC, 
   0x2E, 0x72, 0xBD, 0x2E, 0x72, 0xBD, 0x2C, 0x71, 0xC0, 0x2C, 0x71, 0xC0, 0x2E, 0x76, 0xC4, 0x2E, 
   0x76, 0xC4, 0x27, 0x6E, 0xBE, 0x27, 0x6E, 0xBE, 0x1C, 0x65, 0xB5, 0x1C, 0x65, 0xB5, 0x24, 0x6D, 
   0xBF, 0x24, 0x6D, 0xBF, 0x35, 0x7F, 0xD1, 0x35, 0x7F, 0xD1, 0x33, 0x7C, 0xD0, 0x33, 0x7C, 0xD0, 
   0x21, 0x6D, 0xC0, 0x21, 0x6D, 0xC0, 0x14, 0x5B, 0xB2, 0x14, 0x5B, 0xB2, 0x1C, 0x65, 0xBB, 0x1C, 
   0x65, 0xBB, 0x16, 0x63, 0xB9, 0x16, 0x63, 0xB9, 0x20, 0x70, 0xC5, 0x20, 0x70, 0xC5, 0x20, 0x70, 
   0xC5, 0x20, 0x70, 0xC5, 0x16, 0x63, 0xB9, 0x16, 0x63, 0xB9, 0x16, 0x5F, 0xB5, 0x16, 0x5F, 0xB5, 
   0x08, 0x4F, 0xA6, 0x08, 0x4F, 0xA6, 0x22, 0x6F, 0xBE, 0x22, 0x6F, 0xBE, 0x1A, 0x66, 0xB8, 0x1A, 
   0x66, 0xB8, 0x13, 0x5F, 0xB2, 0x13, 0x5F, 0xB2, 0x1C, 0x66, 0xBE, 0x1C, 0x66, 0xBE, 0x25, 0x6E, 
   0xC9, 0x25, 0x6E, 0xC9, 0x1C, 0x64, 0xC2, 0x1C, 0x64, 0xC2, 0x1B, 0x62, 0xC3, 0x1B, 0x62, 0xC3, 
   0x2D, 0x74, 0xD5, 0x2D, 0x74, 0xD5, 0x15, 0x67, 0xB8, 0x15, 0x67, 0xB8, 0x19, 0x6B, 0xBC, 0x19, 
   0x6B, 0xBC, 0x10, 0x62, 0xB3, 0x10, 0x62, 0xB3, 0x1C, 0x6E, 0xBF, 0x1C, 0x6E, 0xBF, 0x2A, 0x7C, 
   0xCD, 0x2A, 0x7C, 0xCD, 0x2E, 0x80, 0xD1, 0x2E, 0x80, 0xD1, 0x30, 0x82, 0xD3, 0x30, 0x82, 0xD3, 
   0x1E, 0x70, 0xC1, 0x1E, 0x70, 0xC1, 0x25, 0x6C, 0xC7, 0x25, 0x6C, 0xC7, 0x26, 0x6E, 0xC6, 0x26, 
   0x6E, 0xC6, 0x29, 0x72, 0xC6, 0x29, 0x72, 0xC6, 0x2B, 0x75, 0xC7, 0x2B, 0x75, 0xC7, 0x29, 0x73, 
   0xC5, 0x29, 0x73, 0xC5, 0x28, 0x71, 0xC5, 0x28, 0x71, 0xC5, 0x2C, 0x74, 0xCC, 0x2C, 0x74, 0xCC, 
   0x32, 0x79, 0xD4, 0x32, 0x79, 0xD4, 0x46, 0x8E, 0xD4, 0x46, 0x8E, 0xD4, 0x38, 0x83, 0xC8, 0x38, 
   0x83, 0xC8, 0x44, 0x92, 0xD7, 0x44, 0x92, 0xD7, 0x2B, 0x7C, 0xC0, 0x2B, 0x7C, 0xC0, 0x3B, 0x8D, 
   0xCE, 0x3B, 0x8D, 0xCE, 0x60, 0xB2, 0xEC, 0x60, 0xB2, 0xEC, 0x54, 0xA4, 0xD9, 0x54, 0xA4, 0xD9, 
   0x71, 0xC0, 0xF1, 0x71, 0xC0, 0xF1, 0x14, 0x51, 0xA7, 0x14, 0x51, 0xA7, 0x06, 0x43, 0x99, 0x06, 
   0x43, 0x99, 0x09, 0x46, 0x9C, 0x09, 0x46, 0x9C, 0x17, 0x54, 0xAA, 0x17, 0x54, 0xAA, 0x17, 0x54, 
   0xAA, 0x17, 0x54, 0xAA, 0x12, 0x4F, 0xA5, 0x12, 0x4F, 0xA5, 0x0C, 0x49, 0x9F, 0x0C, 0x49, 0x9F, 
   0x03, 0x40, 0x96, 0x03, 0x40, 0x96, 0x45, 0x80, 0xD0, 0x45, 0x80, 0xD0, 0x53, 0x8E, 0xDE, 0x53, 
   0x8E, 0xDE, 0x4E, 0x89, 0xD9, 0x4E, 0x89, 0xD9, 0x3A, 0x75, 0xC5, 0x3A, 0x75, 0xC5, 0x37, 0x74, 
   0xC4, 0x37, 0x74, 0xC4, 0x4A, 0x87, 0xD7, 0x4A, 0x87, 0xD7, 0x2E, 0x6B, 0xBB, 0x2E, 0x6B, 0xBB, 
   0x46, 0x83, 0xD3, 0x46, 0x83, 0xD3, 0x2F, 0x7D, 0xC9, 0x2F, 0x7D, 0xC9, 0x2C, 0x77, 0xC5, 0x2C, 
   0x77, 0xC5, 0x19, 0x60, 0xB0, 0x19, 0x60, 0xB0, 0x33, 0x76, 0xCB, 0x33, 0x76, 0xCB, 0x2D, 0x6D, 
   0xC5, 0x2D, 0x6D, 0xC5, 0x0F, 0x50, 0xAC, 0x0F, 0x50, 0xAC, 0x22, 0x67, 0xC4, 0x22, 0x67, 0xC4, 
   0x16, 0x5C, 0xBA, 0x16, 0x5C, 0xBA, 0x21, 0x66, 0xBD, 0x21, 0x66, 0xBD, 0x18, 0x5A, 0xB3, 0x18, 
   0x5A, 0xB3, 0x13, 0x51, 0xAF, 0x13, 0x51, 0xAF, 0x16, 0x52, 0xB2, 0x16, 0x52, 0xB2, 0x1A, 0x57, 
   0xB7, 0x1A, 0x57, 0xB7, 0x1C, 0x5C, 0xBA, 0x1C, 0x5C, 0xBA, 0x19, 0x61, 0xB9, 0x19, 0x61, 0xB9, 
   0x1B, 0x66, 0xBC, 0x1B, 0x66, 0xBC, 0x2C, 0x78, 0xCB, 0x2C, 0x78, 0xCB, 0x1B, 0x67, 0xB9, 0x1B, 
   0x67, 0xB9, 0x28, 0x76, 0xC3, 0x28, 0x76, 0xC3, 0x1E, 0x6C, 0xB8, 0x1E, 0x6C, 0xB8, 0x2A, 0x78, 
   0xC4, 0x2A, 0x78, 0xC4, 0x2B, 0x79, 0xC6, 0x2B, 0x79, 0xC6, 0x2B, 0x77, 0xC9, 0x2B, 0x77, 0xC9, 
   0x1A, 0x66, 0xB9, 0x1A, 0x66, 0xB9, 0x1E, 0x63, 0xB2, 0x1E, 0x63, 0xB2, 0x2A, 0x74, 0xC2, 0x2A, 
   0x74, 0xC2, 0x13, 0x5E, 0xAC, 0x13, 0x5E, 0xAC, 0x32, 0x80, 0xCD, 0x32, 0x80, 0xCD, 0x36, 0x84, 
   0xD1, 0x36, 0x84, 0xD1, 0x27, 0x72, 0xC0, 0x27, 0x72, 0xC0, 0x40, 0x8A, 0xD8, 0x40, 0x8A, 0xD8, 
   0x1D, 0x62, 0xB1, 0x1D, 0x62, 0xB1, 0x2A, 0x73, 0xC9, 0x2A, 0x73, 0xC9, 0x28, 0x72, 0xC4, 0x28, 
   0x72, 0xC4, 0x21, 0x6C, 0xBB, 0x21, 0x6C, 0xBB, 0x28, 0x73, 0xC2, 0x28, 0x73, 0xC2, 0x37, 0x81, 
   0xD3, 0x37, 0x81, 0xD3, 0x34, 0x7B, 0xD6, 0x34, 0x7B, 0xD6, 0x26, 0x6B, 0xCC, 0x26, 0x6B, 0xCC, 
   0x24, 0x68, 0xCD, 0x24, 0x68, 0xCD, 0x48, 0x8A, 0xDD, 0x48, 0x8A, 0xDD, 0x3B, 0x80, 0xD0, 0x3B, 
   0x80, 0xD0, 0x27, 0x70, 0xC0, 0x27, 0x70, 0xC0, 0x3E, 0x8C, 0xD9, 0x3E, 0x8C, 0xD9, 0x40, 0x91, 
   0xDC, 0x40, 0x91, 0xDC, 0x52, 0xA4, 0xEC, 0x52, 0xA4, 0xEC, 0x4B, 0x9B, 0xE2, 0x4B, 0x9B, 0xE2, 
   0x54, 0xA2, 0xE9, 0x54, 0xA2, 0xE9, 0x23, 0x63, 0xB8, 0x23, 0x63, 0xB8, 0x15, 0x52, 0xA8, 0x15, 
   0x52, 0xA8, 0x1A, 0x58, 0xAC, 0x1A, 0x58, 0xAC, 0x1D, 0x59, 0xAD, 0x1D, 0x59, 0xAD, 0x08, 0x44, 
   0x96, 0x08, 0x44, 0x96, 0x04, 0x3E, 0x90, 0x04, 0x3E, 0x90, 0x14, 0x4F, 0x9F, 0x14, 0x4F, 0x9F, 
   0x1A, 0x55, 0xA5, 0x1A, 0x55, 0xA5, 0x45, 0x80, 0xD0, 0x45, 0x80, 0xD0, 0x53, 0x8E, 0xDE, 0x53, 
   0x8E, 0xDE, 0x4E, 0x89, 0xD9, 0x4E, 0x89, 0xD9, 0x3A, 0x75, 0xC5, 0x3A, 0x75, 0xC5, 0x37, 0x74, 
   0xC4, 0x37, 0x74, 0xC4, 0x4A, 0x87, 0xD7, 0x4A, 0x87, 0xD7, 0x2E, 0x6B, 0xBB, 0x2E, 0x6B, 0xBB, 
   0x46, 0x83, 0xD3, 0x46, 0x83, 0xD3, 0x2F, 0x7D, 0xC9, 0x2F, 0x7D, 0xC9, 0x2C, 0x77, 0xC5, 0x2C, 
   0x77, 0xC5, 0x19, 0x60, 0xB0, 0x19, 0x60, 0xB0, 0x33, 0x76, 0xCB, 0x33, 0x76, 0xCB, 0x2D, 0x6D, 
   0xC5, 0x2D, 0x6D, 0xC5, 0x0F, 0x50, 0xAC, 0x0F, 0x50, 0xAC, 0x22, 0x67, 0xC4, 0x22, 0x67, 0xC4, 
   0x16, 0x5C, 0xBA, 0x16, 0x5C, 0xBA, 0x21, 0x66, 0xBD, 0x21, 0x66, 0xBD, 0x18, 0x5A, 0xB3, 0x18, 
   0x5A, 0xB3, 0x13, 0x51, 0xAF, 0x13, 0x51, 0xAF, 0x16, 0x52, 0xB2, 0x16, 0x52, 0xB2, 0x1A, 0x57, 
   0xB7, 0x1A, 0x57, 0xB7, 0x1C, 0x5C, 0xBA, 0x1C, 0x5C, 0xBA, 0x19, 0x61, 0xB9, 0x19, 0x61, 0xB9, 
   0x1B, 0x66, 0xBC, 0x1B, 0x66, 0xBC, 0x2C, 0x78, 0xCB, 0x2C, 0x78, 0xCB, 0x1B, 0x67, 0xB9, 0x1B, 
   0x67, 0xB9, 0x28, 0x76, 0xC3, 0x28, 0x76, 0xC3, 0x1E, 0x6C, 0xB8, 0x1E, 0x6C, 0xB8, 0x2A, 0x78, 
   0xC4, 0x2A, 0x78, 0xC4, 0x2B, 0x79, 0xC6, 0x2B, 0x79, 0xC6, 0x2B, 0x77, 0xC9, 0x2B, 0x77, 0xC9, 
   0x1A, 0x66, 0xB9, 0x1A, 0x66, 0xB9, 0x1E, 0x63, 0xB2, 0x1E, 0x63, 0xB2, 0x2A, 0x74, 0xC2, 0x2A, 
   0x74, 0xC2, 0x13, 0x5E, 0xAC, 0x13, 0x5E, 0xAC, 0x32, 0x80, 0xCD, 0x32, 0x80, 0xCD, 0x36, 0x84, 
   0xD1, 0x36, 0x84, 0xD1, 0x27, 0x72, 0xC0, 0x27, 0x72, 0xC0, 0x40, 0x8A, 0xD8, 0x40, 0x8A, 0xD8, 
   0x1D, 0x62, 0xB1, 0x1D, 0x62, 0xB1, 0x2A, 0x73, 0xC9, 0x2A, 0x73, 0xC9, 0x28, 0x72, 0xC4, 0x28, 
   0x72, 0xC4, 0x21, 0x6C, 0xBB, 0x21, 0x6C, 0xBB, 0x28, 0x73, 0xC2, 0x28, 0x73, 0xC2, 0x37, 0x81, 
   0xD3, 0x37, 0x81, 0xD3, 0x34, 0x7B, 0xD6, 0x34, 0x7B, 0xD6, 0x26, 0x6B, 0xCC, 0x26, 0x6B, 0xCC, 
   0x24, 0x68, 0xCD, 0x24, 0x68, 0xCD, 0x48, 0x8A, 0xDD, 0x48, 0x8A, 0xDD, 0x3B, 0x80, 0xD0, 0x3B, 
   0x80, 0xD0, 0x27, 0x70, 0xC0, 0x27, 0x70, 0xC0, 0x3E, 0x8C, 0xD9, 0x3E, 0x8C, 0xD9, 0x40, 0x91, 
   0xDC, 0x40, 0x91, 0xDC, 0x52, 0xA4, 0xEC, 0x52, 0xA4, 0xEC, 0x4B, 0x9B, 0xE2, 0x4B, 0x9B, 0xE2, 
   0x54, 0xA2, 0xE9, 0x54, 0xA2, 0xE9, 0x23, 0x63, 0xB8, 0x23, 0x63, 0xB8, 0x15, 0x52, 0xA8, 0x15, 
   0x52, 0xA8, 0x1A, 0x58, 0xAC, 0x1A, 0x58, 0xAC, 0x1D, 0x59, 0xAD, 0x1D, 0x59, 0xAD, 0x08, 0x44, 
   0x96, 0x08, 0x44, 0x96, 0x04, 0x3E, 0x90, 0x04, 0x3E, 0x90, 0x14, 0x4F, 0x9F, 0x14, 0x4F, 0x9F, 
   0x1A, 0x55, 0xA5, 0x1A, 0x55, 0xA5, 0x2B, 0x69, 0xBD, 0x2B, 0x69, 0xBD, 0x12, 0x4E, 0xA2, 0x12, 
   0x4E, 0xA2, 0x2B, 0x67, 0xBB, 0x2B, 0x67, 0xBB, 0x1C, 0x58, 0xAC, 0x1C, 0x58, 0xAC, 0x29, 0x65, 
   0xB9, 0x29, 0x65, 0xB9, 0x0B, 0x44, 0x99, 0x0B, 0x44, 0x99, 0x17, 0x50, 0xA5, 0x17, 0x50, 0xA5, 
   0x1C, 0x55, 0xAA, 0x1C, 0x55, 0xAA, 0x05, 0x4F, 0xA1, 0x05, 0x4F, 0xA1, 0x21, 0x67, 0xBA, 0x21, 
   0x67, 0xBA, 0x0B, 0x4E, 0xA3, 0x0B, 0x4E, 0xA3, 0x2C, 0x6B, 0xC3, 0x2C, 0x6B, 0xC3, 0x13, 0x51, 
   0xAB, 0x13, 0x51, 0xAB, 0x1C, 0x5B, 0xB7, 0x1C, 0x5B, 0xB7, 0x23, 0x66, 0xC3, 0x23, 0x66, 0xC3, 
   0x10, 0x55, 0xB2, 0x10, 0x55, 0xB2, 0x16, 0x59, 0xB0, 0x16, 0x59, 0xB0, 0x0C, 0x4B, 0xA5, 0x0C, 
   0x4B, 0xA5, 0x02, 0x3F, 0x9D, 0x02, 0x3F, 0x9D, 0x05, 0x3F, 0x9F, 0x05, 0x3F, 0x9F, 0x0A, 0x46, 
   0xA6, 0x0A, 0x46, 0xA6, 0x11, 0x51, 0xAF, 0x11, 0x51, 0xAF, 0x19, 0x60, 0xB8, 0x19, 0x60, 0xB8, 
   0x22, 0x6B, 0xC1, 0x22, 0x6B, 0xC1, 0x2B, 0x77, 0xCA, 0x2B, 0x77, 0xCA, 0x23, 0x6F, 0xC1, 0x23, 
   0x6F, 0xC1, 0x31, 0x7F, 0xCC, 0x31, 0x7F, 0xCC, 0x27, 0x75, 0xC1, 0x27, 0x75, 0xC1, 0x33, 0x81, 
   0xCD, 0x33, 0x81, 0xCD, 0x36, 0x84, 0xD1, 0x36, 0x84, 0xD1, 0x38, 0x84, 0xD6, 0x38, 0x84, 0xD6, 
   0x24, 0x70, 0xC3, 0x24, 0x70, 0xC3, 0x2E, 0x76, 0xC4, 0x2E, 0x76, 0xC4, 0x42, 0x8C, 0xDA, 0x42, 
   0x8C, 0xDA, 0x2D, 0x78, 0xC6, 0x2D, 0x78, 0xC6, 0x3B, 0x8B, 0xD8, 0x3B, 0x8B, 0xD8, 0x30, 0x80, 
   0xCD, 0x30, 0x80, 0xCD, 0x20, 0x6B, 0xB9, 0x20, 0x6B, 0xB9, 0x43, 0x8D, 0xDB, 0x43, 0x8D, 0xDB, 
   0x2C, 0x74, 0xC2, 0x2C, 0x74, 0xC2, 0x1B, 0x63, 0xB7, 0x1B, 0x63, 0xB7, 0x24, 0x6D, 0xBF, 0x24, 
   0x6D, 0xBF, 0x1F, 0x68, 0xB8, 0x1F, 0x68, 0xB8, 0x18, 0x61, 0xB1, 0x18, 0x61, 0xB1, 0x20, 0x68, 
   0xBC, 0x20, 0x68, 0xBC, 0x22, 0x69, 0xC1, 0x22, 0x69, 0xC1, 0x1A, 0x5E, 0xBD, 0x1A, 0x5E, 0xBD, 
   0x17, 0x5A, 0xBD, 0x17, 0x5A, 0xBD, 0x15, 0x55, 0xAA, 0x15, 0x55, 0xAA, 0x17, 0x58, 0xAD, 0x17, 
   0x58, 0xAD, 0x20, 0x66, 0xB9, 0x20, 0x66, 0xB9, 0x0F, 0x5A, 0xA9, 0x0F, 0x5A, 0xA9, 0x21, 0x6F, 
   0xBC, 0x21, 0x6F, 0xBC, 0x21, 0x6F, 0xBC, 0x21, 0x6F, 0xBC, 0x2D, 0x79, 0xC5, 0x2D, 0x79, 0xC5, 
   0x21, 0x6C, 0xB8, 0x21, 0x6C, 0xB8, 0x1F, 0x67, 0xBB, 0x1F, 0x67, 0xBB, 0x1F, 0x67, 0xBB, 0x1F, 
   0x67, 0xBB, 0x32, 0x78, 0xCC, 0x32, 0x78, 0xCC, 0x40, 0x86, 0xD9, 0x40, 0x86, 0xD9, 0x3A, 0x7F, 
   0xCF, 0x3A, 0x7F, 0xCF, 0x32, 0x77, 0xC7, 0x32, 0x77, 0xC7, 0x39, 0x7C, 0xCB, 0x39, 0x7C, 0xCB, 
   0x3F, 0x82, 0xD1, 0x3F, 0x82, 0xD1, 0x2B, 0x69, 0xBD, 0x2B, 0x69, 0xBD, 0x12, 0x4E, 0xA2, 0x12, 
   0x4E, 0xA2, 0x2B, 0x67, 0xBB, 0x2B, 0x67, 0xBB, 0x1C, 0x58, 0xAC, 0x1C, 0x58, 0xAC, 0x29, 0x65, 
   0xB9, 0x29, 0x65, 0xB9, 0x0B, 0x44, 0x99, 0x0B, 0x44, 0x99, 0x17, 0x50, 0xA5, 0x17, 0x50, 0xA5, 
   0x1C, 0x55, 0xAA, 0x1C, 0x55, 0xAA, 0x05, 0x4F, 0xA1, 0x05, 0x4F, 0xA1, 0x21, 0x67, 0xBA, 0x21, 
   0x67, 0xBA, 0x0B, 0x4E, 0xA3, 0x0B, 0x4E, 0xA3, 0x2C, 0x6B, 0xC3, 0x2C, 0x6B, 0xC3, 0x13, 0x51, 
   0xAB, 0x13, 0x51, 0xAB, 0x1C, 0x5B, 0xB7, 0x1C, 0x5B, 0xB7, 0x23, 0x66, 0xC3, 0x23, 0x66, 0xC3, 
   0x10, 0x55, 0xB2, 0x10, 0x55, 0xB2, 0x16, 0x59, 0xB0, 0x16, 0x59, 0xB0, 0x0C, 0x4B, 0xA5, 0x0C, 
   0x4B, 0xA5, 0x02, 0x3F, 0x9D, 0x02, 0x3F, 0x9D, 0x05, 0x3F, 0x9F, 0x05, 0x3F, 0x9F, 0x0A, 0x46, 
   0xA6, 0x0A, 0x46, 0xA6, 0x11, 0x51, 0xAF, 0x11, 0x51, 0xAF, 0x19, 0x60, 0xB8, 0x19, 0x60, 0xB8, 
   0x22, 0x6B, 0xC1, 0x22, 0x6B, 0xC1, 0x2B, 0x77, 0xCA, 0x2B, 0x77, 0xCA, 0x23, 0x6F, 0xC1, 0x23, 
   0x6F, 0xC1, 0x31, 0x7F, 0xCC, 0x31, 0x7F, 0xCC, 0x27, 0x75, 0xC1, 0x27, 0x75, 0xC1, 0x33, 0x81, 
   0xCD, 0x33, 0x81, 0xCD, 0x36, 0x84, 0xD1, 0x36, 0x84, 0xD1, 0x38, 0x84, 0xD6, 0x38, 0x84, 0xD6, 
   0x24, 0x70, 0xC3, 0x24, 0x70, 0xC3, 0x2E, 0x76, 0xC4, 0x2E, 0x76, 0xC4, 0x42, 0x8C, 0xDA, 0x42, 
   0x8C, 0xDA, 0x2D, 0x78, 0xC6, 0x2D, 0x78, 0xC6, 0x3B, 0x8B, 0xD8, 0x3B, 0x8B, 0xD8, 0x30, 0x80, 
   0xCD, 0x30, 0x80, 0xCD, 0x20, 0x6B, 0xB9, 0x20, 0x6B, 0xB9, 0x43, 0x8D, 0xDB, 0x43, 0x8D, 0xDB, 
   0x2C, 0x74, 0xC2, 0x2C, 0x74, 0xC2, 0x1B, 0x63, 0xB7, 0x1B, 0x63, 0xB7, 0x24, 0x6D, 0xBF, 0x24, 
   0x6D, 0xBF, 0x1F, 0x68, 0xB8, 0x1F, 0x68, 0xB8, 0x18, 0x61, 0xB1, 0x18, 0x61, 0xB1, 0x20, 0x68, 
   0xBC, 0x20, 0x68, 0xBC, 0x22, 0x69, 0xC1, 0x22, 0x69, 0xC1, 0x1A, 0x5E, 0xBD, 0x1A, 0x5E, 0xBD, 
   0x17, 0x5A, 0xBD, 0x17, 0x5A, 0xBD, 0x15, 0x55, 0xAA, 0x15, 0x55, 0xAA, 0x17, 0x58, 0xAD, 0x17, 
   0x58, 0xAD, 0x20, 0x66, 0xB9, 0x20, 0x66, 0xB9, 0x0F, 0x5A, 0xA9, 0x0F, 0x5A, 0xA9, 0x21, 0x6F, 
   0xBC, 0x21, 0x6F, 0xBC, 0x21, 0x6F, 0xBC, 0x21, 0x6F, 0xBC, 0x2D, 0x79, 0xC5, 0x2D, 0x79, 0xC5, 
   0x21, 0x6C, 0xB8, 0x21, 0x6C, 0xB8, 0x1F, 0x67, 0xBB, 0x1F, 0x67, 0xBB, 0x1F, 0x67, 0xBB, 0x1F, 
   0x67, 0xBB, 0x32, 0x78, 0xCC, 0x32, 0x78, 0xCC, 0x40, 0x86, 0xD9, 0x40, 0x86, 0xD9, 0x3A, 0x7F, 
   0xCF, 0x3A, 0x7F, 0xCF, 0x32, 0x77, 0xC7, 0x32, 0x77, 0xC7, 0x39, 0x7C, 0xCB, 0x39, 0x7C, 0xCB, 
   0x3F, 0x82, 0xD1, 0x3F, 0x82, 0xD1, 0x0E, 0x4E, 0xA6, 0x0E, 0x4E, 0xA6, 0x18, 0x57, 0xAF, 0x18, 
   0x57, 0xAF, 0x0C, 0x4B, 0xA3, 0x0C, 0x4B, 0xA3, 0x1E, 0x5A, 0xB3, 0x1E, 0x5A, 0xB3, 0x00, 0x31, 
   0x8A, 0x00, 0x31, 0x8A, 0x20, 0x58, 0xB1, 0x20, 0x58, 0xB1, 0x29, 0x5E, 0xB8, 0x29, 0x5E, 0xB8, 
   0x13, 0x48, 0xA2, 0x13, 0x48, 0xA2, 0x11, 0x53, 0xAC, 0x11, 0x53, 0xAC, 0x1E, 0x5D, 0xB7, 0x1E, 
   0x5D, 0xB7, 0x08, 0x44, 0x9E, 0x08, 0x44, 0x9E, 0x0F, 0x48, 0xA5, 0x0F, 0x48, 0xA5, 0x00, 0x36, 
   0x93, 0x00, 0x36, 0x93, 0x07, 0x42, 0x9F, 0x07, 0x42, 0x9F, 0x23, 0x62, 0xBE, 0x23, 0x62, 0xBE, 
   0x1D, 0x5E, 0xBA, 0x1D, 0x5E, 0xBA, 0x1B, 0x5B, 0xB3, 0x1B, 0x5B, 0xB3, 0x14, 0x52, 0xAC, 0x14, 
   0x52, 0xAC, 0x0F, 0x49, 0xA8, 0x0F, 0x49, 0xA8, 0x12, 0x49, 0xAA, 0x12, 0x49, 0xAA, 0x14, 0x4E, 
   0xAE, 0x14, 0x4E, 0xAE, 0x17, 0x54, 0xB2, 0x17, 0x54, 0xB2, 0x1D, 0x5F, 0xB8, 0x1D, 0x5F, 0xB8, 
   0x21, 0x68, 0xBF, 0x21, 0x68, 0xBF, 0x24, 0x70, 0xC3, 0x24, 0x70, 0xC3, 0x28, 0x74, 0xC6, 0x28, 
   0x74, 0xC6, 0x38, 0x86, 0xD3, 0x38, 0x86, 0xD3, 0x2C, 0x7A, 0xC6, 0x2C, 0x7A, 0xC6, 0x37, 0x85, 
   0xD1, 0x37, 0x85, 0xD1, 0x3A, 0x88, 0xD5, 0x3A, 0x88, 0xD5, 0x40, 0x8C, 0xDE, 0x40, 0x8C, 0xDE, 
   0x25, 0x71, 0xC4, 0x25, 0x71, 0xC4, 0x43, 0x8B, 0xD9, 0x43, 0x8B, 0xD9, 0x47, 0x91, 0xDF, 0x47, 
   0x91, 0xDF, 0x28, 0x76, 0xC3, 0x28, 0x76, 0xC3, 0x35, 0x85, 0xD2, 0x35, 0x85, 0xD2, 0x33, 0x83, 
   0xD0, 0x33, 0x83, 0xD0, 0x28, 0x76, 0xC3, 0x28, 0x76, 0xC3, 0x3E, 0x88, 0xD6, 0x3E, 0x88, 0xD6, 
   0x1E, 0x66, 0xB4, 0x1E, 0x66, 0xB4, 0x21, 0x64, 0xB9, 0x21, 0x64, 0xB9, 0x33, 0x77, 0xCA, 0x33, 
   0x77, 0xCA, 0x2F, 0x73, 0xC6, 0x2F, 0x73, 0xC6, 0x1D, 0x61, 0xB4, 0x1D, 0x61, 0xB4, 0x1D, 0x60, 
   0xB5, 0x1D, 0x60, 0xB5, 0x23, 0x65, 0xBE, 0x23, 0x65, 0xBE, 0x21, 0x61, 0xBF, 0x21, 0x61, 0xBF, 
   0x1F, 0x5F, 0xBE, 0x1F, 0x5F, 0xBE, 0x21, 0x5D, 0xB6, 0x21, 0x5D, 0xB6, 0x26, 0x65, 0xBD, 0x26, 
   0x65, 0xBD, 0x36, 0x79, 0xD0, 0x36, 0x79, 0xD0, 0x26, 0x6E, 0xC2, 0x26, 0x6E, 0xC2, 0x31, 0x79, 
   0xCD, 0x31, 0x79, 0xCD, 0x25, 0x6E, 0xC0, 0x25, 0x6E, 0xC0, 0x30, 0x76, 0xC9, 0x30, 0x76, 0xC9, 
   0x2C, 0x70, 0xC3, 0x2C, 0x70, 0xC3, 0x26, 0x76, 0xCB, 0x26, 0x76, 0xCB, 0x2A, 0x78, 0xCB, 0x2A, 
   0x78, 0xCB, 0x28, 0x76, 0xC9, 0x28, 0x76, 0xC9, 0x29, 0x75, 0xC7, 0x29, 0x75, 0xC7, 0x24, 0x70, 
   0xC2, 0x24, 0x70, 0xC2, 0x1A, 0x65, 0xB4, 0x1A, 0x65, 0xB4, 0x1A, 0x65, 0xB4, 0x1A, 0x65, 0xB4, 
   0x28, 0x73, 0xC2, 0x28, 0x73, 0xC2, 0x0E, 0x4E, 0xA6, 0x0E, 0x4E, 0xA6, 0x18, 0x57, 0xAF, 0x18, 
   0x57, 0xAF, 0x0C, 0x4B, 0xA3, 0x0C, 0x4B, 0xA3, 0x1E, 0x5A, 0xB3, 0x1E, 0x5A, 0xB3, 0x00, 0x31, 
   0x8A, 0x00, 0x31, 0x8A, 0x20, 0x58, 0xB1, 0x20, 0x58, 0xB1, 0x29, 0x5E, 0xB8, 0x29, 0x5E, 0xB8, 
   0x13, 0x48, 0xA2, 0x13, 0x48, 0xA2, 0x11, 0x53, 0xAC, 0x11, 0x53, 0xAC, 0x1E, 0x5D, 0xB7, 0x1E, 
   0x5D, 0xB7, 0x08, 0x44, 0x9E, 0x08, 0x44, 0x9E, 0x0F, 0x48, 0xA5, 0x0F, 0x48, 0xA5, 0x00, 0x36, 
   0x93, 0x00, 0x36, 0x93, 0x07, 0x42, 0x9F, 0x07, 0x42, 0x9F, 0x23, 0x62, 0xBE, 0x23, 0x62, 0xBE, 
   0x1D, 0x5E, 0xBA, 0x1D, 0x5E, 0xBA, 0x1B, 0x5B, 0xB3, 0x1B, 0x5B, 0xB3, 0x14, 0x52, 0xAC, 0x14, 
   0x52, 0xAC, 0x0F, 0x49, 0xA8, 0x0F, 0x49, 0xA8, 0x12, 0x49, 0xAA, 0x12, 0x49, 0xAA, 0x14, 0x4E, 
   0xAE, 0x14, 0x4E, 0xAE, 0x17, 0x54, 0xB2, 0x17, 0x54, 0xB2, 0x1D, 0x5F, 0xB8, 0x1D, 0x5F, 0xB8, 
   0x21, 0x68, 0xBF, 0x21, 0x68, 0xBF, 0x24, 0x70, 0xC3, 0x24, 0x70, 0xC3, 0x28, 0x74, 0xC6, 0x28, 
   0x74, 0xC6, 0x38, 0x86, 0xD3, 0x38, 0x86, 0xD3, 0x2C, 0x7A, 0xC6, 0x2C, 0x7A, 0xC6, 0x37, 0x85, 
   0xD1, 0x37, 0x85, 0xD1, 0x3A, 0x88, 0xD5, 0x3A, 0x88, 0xD5, 0x40, 0x8C, 0xDE, 0x40, 0x8C, 0xDE, 
   0x25, 0x71, 0xC4, 0x25, 0x71, 0xC4, 0x43, 0x8B, 0xD9, 0x43, 0x8B, 0xD9, 0x47, 0x91, 0xDF, 0x47, 
   0x91, 0xDF, 0x28, 0x76, 0xC3, 0x28, 0x76, 0xC3, 0x35, 0x85, 0xD2, 0x35, 0x85, 0xD2, 0x33, 0x83, 
   0xD0, 0x33, 0x83, 0xD0, 0x28, 0x76, 0xC3, 0x28, 0x76, 0xC3, 0x3E, 0x88, 0xD6, 0x3E, 0x88, 0xD6, 
   0x1E, 0x66, 0xB4, 0x1E, 0x66, 0xB4, 0x21, 0x64, 0xB9, 0x21, 0x64, 0xB9, 0x33, 0x77, 0xCA, 0x33, 
   0x77, 0xCA, 0x2F, 0x73, 0xC6, 0x2F, 0x73, 0xC6, 0x1D, 0x61, 0xB4, 0x1D, 0x61, 0xB4, 0x1D, 0x60, 
   0xB5, 0x1D, 0x60, 0xB5, 0x23, 0x65, 0xBE, 0x23, 0x65, 0xBE, 0x21, 0x61, 0xBF, 0x21, 0x61, 0xBF, 
   0x1F, 0x5F, 0xBE, 0x1F, 0x5F, 0xBE, 0x21, 0x5D, 0xB6, 0x21, 0x5D, 0xB6, 0x26, 0x65, 0xBD, 0x26, 
   0x65, 0xBD, 0x36, 0x79, 0xD0, 0x36, 0x79, 0xD0, 0x26, 0x6E, 0xC2, 0x26, 0x6E, 0xC2, 0x31, 0x79, 
   0xCD, 0x31, 0x79, 0xCD, 0x25, 0x6E, 0xC0, 0x25, 0x6E, 0xC0, 0x30, 0x76, 0xC9, 0x30, 0x76, 0xC9, 
   0x2C, 0x70, 0xC3, 0x2C, 0x70, 0xC3, 0x26, 0x76, 0xCB, 0x26, 0x76, 0xCB, 0x2A, 0x78, 0xCB, 0x2A, 
   0x78, 0xCB, 0x28, 0x76, 0xC9, 0x28, 0x76, 0xC9, 0x29, 0x75, 0xC7, 0x29, 0x75, 0xC7, 0x24, 0x70, 
   0xC2, 0x24, 0x70, 0xC2, 0x1A, 0x65, 0xB4, 0x1A, 0x65, 0xB4, 0x1A, 0x65, 0xB4, 0x1A, 0x65, 0xB4, 
   0x28, 0x73, 0xC2, 0x28, 0x73, 0xC2, 0x2C, 0x6D, 0xC9, 0x2C, 0x6D, 0xC9, 0x1A, 0x5B, 0xB7, 0x1A, 
   0x5B, 0xB7, 0x18, 0x57, 0xB3, 0x18, 0x57, 0xB3, 0x2C, 0x67, 0xC4, 0x2C, 0x67, 0xC4, 0x28, 0x61, 
   0xBE, 0x28, 0x61, 0xBE, 0x05, 0x3B, 0x99, 0x05, 0x3B, 0x99, 0x1C, 0x50, 0xAE, 0x1C, 0x50, 0xAE, 
   0x11, 0x44, 0xA2, 0x11, 0x44, 0xA2, 0x17, 0x51, 0xB1, 0x17, 0x51, 0xB1, 0x10, 0x48, 0xA7, 0x10, 
   0x48, 0xA7, 0x28, 0x5E, 0xBD, 0x28, 0x5E, 0xBD, 0x29, 0x5C, 0xBC, 0x29, 0x5C, 0xBC, 0x32, 0x68, 
   0xC6, 0x32, 0x68, 0xC6, 0x00, 0x38, 0x93, 0x00, 0x38, 0x93, 0x1A, 0x58, 0xB2, 0x1A, 0x58, 0xB2, 
   0x0F, 0x4E, 0xA8, 0x0F, 0x4E, 0xA8, 0x23, 0x62, 0xBA, 0x23, 0x62, 0xBA, 0x1E, 0x5A, 0xB4, 0x1E, 
   0x5A, 0xB4, 0x1A, 0x52, 0xB1, 0x1A, 0x52, 0xB1, 0x19, 0x4E, 0xAF, 0x19, 0x4E, 0xAF, 0x17, 0x4E, 
   0xAF, 0x17, 0x4E, 0xAF, 0x16, 0x53, 0xB1, 0x16, 0x53, 0xB1, 0x1E, 0x60, 0xB9, 0x1E, 0x60, 0xB9, 
   0x27, 0x6C, 0xC3, 0x27, 0x6C, 0xC3, 0x1F, 0x6B, 0xBE, 0x1F, 0x6B, 0xBE, 0x2D, 0x79, 0xCB, 0x2D, 
   0x79, 0xCB, 0x39, 0x87, 0xD4, 0x39, 0x87, 0xD4, 0x2C, 0x7A, 0xC6, 0x2C, 0x7A, 0xC6, 0x33, 0x81, 
   0xCD, 0x33, 0x81, 0xCD, 0x34, 0x82, 0xCF, 0x34, 0x82, 0xCF, 0x3E, 0x8A, 0xDC, 0x3E, 0x8A, 0xDC, 
   0x1B, 0x67, 0xBA, 0x1B, 0x67, 0xBA, 0x44, 0x8E, 0xDC, 0x44, 0x8E, 0xDC, 0x45, 0x90, 0xDE, 0x45, 
   0x90, 0xDE, 0x2C, 0x7A, 0xC7, 0x2C, 0x7A, 0xC7, 0x38, 0x8A, 0xD7, 0x38, 0x8A, 0xD7, 0x3D, 0x8F, 
   0xDC, 0x3D, 0x8F, 0xDC, 0x3A, 0x88, 0xD5, 0x3A, 0x88, 0xD5, 0x43, 0x8E, 0xDC, 0x43, 0x8E, 0xDC, 
   0x1A, 0x64, 0xB2, 0x1A, 0x64, 0xB2, 0x17, 0x59, 0xAC, 0x17, 0x59, 0xAC, 0x24, 0x66, 0xB9, 0x24, 
   0x66, 0xB9, 0x21, 0x63, 0xB6, 0x21, 0x63, 0xB6, 0x14, 0x56, 0xA9, 0x14, 0x56, 0xA9, 0x13, 0x54, 
   0xA9, 0x13, 0x54, 0xA9, 0x13, 0x53, 0xAB, 0x13, 0x53, 0xAB, 0x12, 0x51, 0xAB, 0x12, 0x51, 0xAB, 
   0x16, 0x55, 0xB1, 0x16, 0x55, 0xB1, 0x27, 0x63, 0xBD, 0x27, 0x63, 0xBD, 0x1E, 0x5C, 0xB6, 0x1E, 
   0x5C, 0xB6, 0x17, 0x59, 0xB2, 0x17, 0x59, 0xB2, 0x33, 0x77, 0xD0, 0x33, 0x77, 0xD0, 0x23, 0x67, 
   0xC0, 0x23, 0x67, 0xC0, 0x1E, 0x61, 0xB8, 0x1E, 0x61, 0xB8, 0x15, 0x55, 0xAD, 0x15, 0x55, 0xAD, 
   0x2A, 0x69, 0xC1, 0x2A, 0x69, 0xC1, 0x28, 0x73, 0xC9, 0x28, 0x73, 0xC9, 0x2E, 0x79, 0xCF, 0x2E, 
   0x79, 0xCF, 0x23, 0x6E, 0xC4, 0x23, 0x6E, 0xC4, 0x1D, 0x66, 0xBA, 0x1D, 0x66, 0xBA, 0x22, 0x6C, 
   0xBE, 0x22, 0x6C, 0xBE, 0x1E, 0x67, 0xB9, 0x1E, 0x67, 0xB9, 0x21, 0x6A, 0xBA, 0x21, 0x6A, 0xBA, 
   0x3B, 0x82, 0xD2, 0x3B, 0x82, 0xD2, 0x2C, 0x6D, 0xC9, 0x2C, 0x6D, 0xC9, 0x1A, 0x5B, 0xB7, 0x1A, 
   0x5B, 0xB7, 0x18, 0x57, 0xB3, 0x18, 0x57, 0xB3, 0x2C, 0x67, 0xC4, 0x2C, 0x67, 0xC4, 0x28, 0x61, 
   0xBE, 0x28, 0x61, 0xBE, 0x05, 0x3B, 0x99, 0x05, 0x3B, 0x99, 0x1C, 0x50, 0xAE, 0x1C, 0x50, 0xAE, 
   0x11, 0x44, 0xA2, 0x11, 0x44, 0xA2, 0x17, 0x51, 0xB1, 0x17, 0x51, 0xB1, 0x10, 0x48, 0xA7, 0x10, 
   0x48, 0xA7, 0x28, 0x5E, 0xBD, 0x28, 0x5E, 0xBD, 0x29, 0x5C, 0xBC, 0x29, 0x5C, 0xBC, 0x32, 0x68, 
   0xC6, 0x32, 0x68, 0xC6, 0x00, 0x38, 0x93, 0x00, 0x38, 0x93, 0x1A, 0x58, 0xB2, 0x1A, 0x58, 0xB2, 
   0x0F, 0x4E, 0xA8, 0x0F, 0x4E, 0xA8, 0x23, 0x62, 0xBA, 0x23, 0x62, 0xBA, 0x1E, 0x5A, 0xB4, 0x1E, 
   0x5A, 0xB4, 0x1A, 0x52, 0xB1, 0x1A, 0x52, 0xB1, 0x19, 0x4E, 0xAF, 0x19, 0x4E, 0xAF, 0x17, 0x4E, 
   0xAF, 0x17, 0x4E, 0xAF, 0x16, 0x53, 0xB1, 0x16, 0x53, 0xB1, 0x1E, 0x60, 0xB9, 0x1E, 0x60, 0xB9, 
   0x27, 0x6C, 0xC3, 0x27, 0x6C, 0xC3, 0x1F, 0x6B, 0xBE, 0x1F, 0x6B, 0xBE, 0x2D, 0x79, 0xCB, 0x2D, 
   0x79, 0xCB, 0x39, 0x87, 0xD4, 0x39, 0x87, 0xD4, 0x2C, 0x7A, 0xC6, 0x2C, 0x7A, 0xC6, 0x33, 0x81, 
   0xCD, 0x33, 0x81, 0xCD, 0x34, 0x82, 0xCF, 0x34, 0x82, 0xCF, 0x3E, 0x8A, 0xDC, 0x3E, 0x8A, 0xDC, 
   0x1B, 0x67, 0xBA, 0x1B, 0x67, 0xBA, 0x44, 0x8E, 0xDC, 0x44, 0x8E, 0xDC, 0x45, 0x90, 0xDE, 0x45, 
   0x90, 0xDE, 0x2C, 0x7A, 0xC7, 0x2C, 0x7A, 0xC7, 0x38, 0x8A, 0xD7, 0x38, 0x8A, 0xD7, 0x3D, 0x8F, 
   0xDC, 0x3D, 0x8F, 0xDC, 0x3A, 0x88, 0xD5, 0x3A, 0x88, 0xD5, 0x43, 0x8E, 0xDC, 0x43, 0x8E, 0xDC, 
   0x1A, 0x64, 0xB2, 0x1A, 0x64, 0xB2, 0x17, 0x59, 0xAC, 0x17, 0x59, 0xAC, 0x24, 0x66, 0xB9, 0x24, 
   0x66, 0xB9, 0x21, 0x63, 0xB6, 0x21, 0x63, 0xB6, 0x14, 0x56, 0xA9, 0x14, 0x56, 0xA9, 0x13, 0x54, 
   0xA9, 0x13, 0x54, 0xA9, 0x13, 0x53, 0xAB, 0x13, 0x53, 0xAB, 0x12, 0x51, 0xAB, 0x12, 0x51, 0xAB, 
   0x16, 0x55, 0xB1, 0x16, 0x55, 0xB1, 0x27, 0x63, 0xBD, 0x27, 0x63, 0xBD, 0x1E, 0x5C, 0xB6, 0x1E, 
   0x5C, 0xB6, 0x17, 0x59, 0xB2, 0x17, 0x59, 0xB2, 0x33, 0x77, 0xD0, 0x33, 0x77, 0xD0, 0x23, 0x67, 
   0xC0, 0x23, 0x67, 0xC0, 0x1E, 0x61, 0xB8, 0x1E, 0x61, 0xB8, 0x15, 0x55, 0xAD, 0x15, 0x55, 0xAD, 
   0x2A, 0x69, 0xC1, 0x2A, 0x69, 0xC1, 0x28, 0x73, 0xC9, 0x28, 0x73, 0xC9, 0x2E, 0x79, 0xCF, 0x2E, 
   0x79, 0xCF, 0x23, 0x6E, 0xC4, 0x23, 0x6E, 0xC4, 0x1D, 0x66, 0xBA, 0x1D, 0x66, 0xBA, 0x22, 0x6C, 
   0xBE, 0x22, 0x6C, 0xBE, 0x1E, 0x67, 0xB9, 0x1E, 0x67, 0xB9, 0x21, 0x6A, 0xBA, 0x21, 0x6A, 0xBA, 
   0x3B, 0x82, 0xD2, 0x3B, 0x82, 0xD2, 0x00, 0x31, 0x8D, 0x00, 0x31, 0x8D, 0x2A, 0x69, 0xC5, 0x2A, 
   0x69, 0xC5, 0x26, 0x65, 0xC1, 0x26, 0x65, 0xC1, 0x0C, 0x49, 0xA6, 0x0C, 0x49, 0xA6, 0x22, 0x5D, 
   0xBA, 0x22, 0x5D, 0xBA, 0x25, 0x5E, 0xBB, 0x25, 0x5E, 0xBB, 0x24, 0x5A, 0xB8, 0x24, 0x5A, 0xB8, 
   0x00, 0x27, 0x85, 0x00, 0x27, 0x85, 0x1D, 0x55, 0xB4, 0x1D, 0x55, 0xB4, 0x08, 0x3E, 0x9D, 0x08, 
   0x3E, 0x9D, 0x19, 0x4D, 0xAB, 0x19, 0x4D, 0xAB, 0x0E, 0x41, 0x9F, 0x0E, 0x41, 0x9F, 0x1D, 0x52, 
   0xAD, 0x1D, 0x52, 0xAD, 0x00, 0x30, 0x8B, 0x00, 0x30, 0x8B, 0x19, 0x58, 0xB0, 0x19, 0x58, 0xB0, 
   0x18, 0x5B, 0xB2, 0x18, 0x5B, 0xB2, 0x1D, 0x5D, 0xB5, 0x1D, 0x5D, 0xB5, 0x16, 0x54, 0xAE, 0x16, 
   0x54, 0xAE, 0x0F, 0x49, 0xA8, 0x0F, 0x49, 0xA8, 0x0B, 0x42, 0xA3, 0x0B, 0x42, 0xA3, 0x08, 0x42, 
   0xA2, 0x08, 0x42, 0xA2, 0x0E, 0x4B, 0xA9, 0x0E, 0x4B, 0xA9, 0x1E, 0x60, 0xB9, 0x1E, 0x60, 0xB9, 
   0x2C, 0x73, 0xCA, 0x2C, 0x73, 0xCA, 0x25, 0x71, 0xC4, 0x25, 0x71, 0xC4, 0x36, 0x82, 0xD4, 0x36, 
   0x82, 0xD4, 0x3C, 0x8A, 0xD7, 0x3C, 0x8A, 0xD7, 0x31, 0x7F, 0xCB, 0x31, 0x7F, 0xCB, 0x36, 0x84, 
   0xD0, 0x36, 0x84, 0xD0, 0x31, 0x7F, 0xCC, 0x31, 0x7F, 0xCC, 0x3E, 0x8A, 0xDC, 0x3E, 0x8A, 0xDC, 
   0x16, 0x62, 0xB5, 0x16, 0x62, 0xB5, 0x35, 0x7F, 0xCD, 0x35, 0x7F, 0xCD, 0x42, 0x90, 0xDD, 0x42, 
   0x90, 0xDD, 0x3D, 0x8D, 0xDA, 0x3D, 0x8D, 0xDA, 0x43, 0x95, 0xE2, 0x43, 0x95, 0xE2, 0x3C, 0x8E, 
   0xDB, 0x3C, 0x8E, 0xDB, 0x3A, 0x8A, 0xD7, 0x3A, 0x8A, 0xD7, 0x4C, 0x9A, 0xE7, 0x4C, 0x9A, 0xE7, 
   0x37, 0x81, 0xCF, 0x37, 0x81, 0xCF, 0x28, 0x6A, 0xBB, 0x28, 0x6A, 0xBB, 0x28, 0x6A, 0xBD, 0x28, 
   0x6A, 0xBD, 0x24, 0x66, 0xB9, 0x24, 0x66, 0xB9, 0x26, 0x67, 0xBC, 0x26, 0x67, 0xBC, 0x29, 0x6A, 
   0xBF, 0x29, 0x6A, 0xBF, 0x20, 0x60, 0xB8, 0x20, 0x60, 0xB8, 0x1C, 0x5D, 0xB2, 0x1C, 0x5D, 0xB2, 
   0x28, 0x69, 0xBE, 0x28, 0x69, 0xBE, 0x24, 0x62, 0xBC, 0x24, 0x62, 0xBC, 0x14, 0x53, 0xAD, 0x14, 
   0x53, 0xAD, 0x03, 0x45, 0x9E, 0x03, 0x45, 0x9E, 0x1B, 0x5F, 0xB8, 0x1B, 0x5F, 0xB8, 0x12, 0x56, 
   0xAF, 0x12, 0x56, 0xAF, 0x13, 0x54, 0xB0, 0x13, 0x54, 0xB0, 0x08, 0x45, 0xA2, 0x08, 0x45, 0xA2, 
   0x18, 0x53, 0xB0, 0x18, 0x53, 0xB0, 0x13, 0x57, 0xB0, 0x13, 0x57, 0xB0, 0x24, 0x66, 0xBF, 0x24, 
   0x66, 0xBF, 0x24, 0x67, 0xBE, 0x24, 0x67, 0xBE, 0x27, 0x67, 0xBF, 0x27, 0x67, 0xBF, 0x2F, 0x70, 
   0xC5, 0x2F, 0x70, 0xC5, 0x28, 0x68, 0xBC, 0x28, 0x68, 0xBC, 0x21, 0x61, 0xB5, 0x21, 0x61, 0xB5, 
   0x2F, 0x6F, 0xC3, 0x2F, 0x6F, 0xC3, 0x00, 0x31, 0x8D, 0x00, 0x31, 0x8D, 0x2A, 0x69, 0xC5, 0x2A, 
   0x69, 0xC5, 0x26, 0x65, 0xC1, 0x26, 0x65, 0xC1, 0x0C, 0x49, 0xA6, 0x0C, 0x49, 0xA6, 0x22, 0x5D, 
   0xBA, 0x22, 0x5D, 0xBA, 0x25, 0x5E, 0xBB, 0x25, 0x5E, 0xBB, 0x24, 0x5A, 0xB8, 0x24, 0x5A, 0xB8, 
   0x00, 0x27, 0x85, 0x00, 0x27, 0x85, 0x1D, 0x55, 0xB4, 0x1D, 0x55, 0xB4, 0x08, 0x3E, 0x9D, 0x08, 
   0x3E, 0x9D, 0x19, 0x4D, 0xAB, 0x19, 0x4D, 0xAB, 0x0E, 0x41, 0x9F, 0x0E, 0x41, 0x9F, 0x1D, 0x52, 
   0xAD, 0x1D, 0x52, 0xAD, 0x00, 0x30, 0x8B, 0x00, 0x30, 0x8B, 0x19, 0x58, 0xB0, 0x19, 0x58, 0xB0, 
   0x18, 0x5B, 0xB2, 0x18, 0x5B, 0xB2, 0x1D, 0x5D, 0xB5, 0x1D, 0x5D, 0xB5, 0x16, 0x54, 0xAE, 0x16, 
   0x54, 0xAE, 0x0F, 0x49, 0xA8, 0x0F, 0x49, 0xA8, 0x0B, 0x42, 0xA3, 0x0B, 0x42, 0xA3, 0x08, 0x42, 
   0xA2, 0x08, 0x42, 0xA2, 0x0E, 0x4B, 0xA9, 0x0E, 0x4B, 0xA9, 0x1E, 0x60, 0xB9, 0x1E, 0x60, 0xB9, 
   0x2C, 0x73, 0xCA, 0x2C, 0x73, 0xCA, 0x25, 0x71, 0xC4, 0x25, 0x71, 0xC4, 0x36, 0x82, 0xD4, 0x36, 
   0x82, 0xD4, 0x3C, 0x8A, 0xD7, 0x3C, 0x8A, 0xD7, 0x31, 0x7F, 0xCB, 0x31, 0x7F, 0xCB, 0x36, 0x84, 
   0xD0, 0x36, 0x84, 0xD0, 0x31, 0x7F, 0xCC, 0x31, 0x7F, 0xCC, 0x3E, 0x8A, 0xDC, 0x3E, 0x8A, 0xDC, 
   0x16, 0x62, 0xB5, 0x16, 0x62, 0xB5, 0x35, 0x7F, 0xCD, 0x35, 0x7F, 0xCD, 0x42, 0x90, 0xDD, 0x42, 
   0x90, 0xDD, 0x3D, 0x8D, 0xDA, 0x3D, 0x8D, 0xDA, 0x43, 0x95, 0xE2, 0x43, 0x95, 0xE2, 0x3C, 0x8E, 
   0xDB, 0x3C, 0x8E, 0xDB, 0x3A, 0x8A, 0xD7, 0x3A, 0x8A, 0xD7, 0x4C, 0x9A, 0xE7, 0x4C, 0x9A, 0xE7, 
   0x37, 0x81, 0xCF, 0x37, 0x81, 0xCF, 0x28, 0x6A, 0xBB, 0x28, 0x6A, 0xBB, 0x28, 0x6A, 0xBD, 0x28, 
   0x6A, 0xBD, 0x24, 0x66, 0xB9, 0x24, 0x66, 0xB9, 0x26, 0x67, 0xBC, 0x26, 0x67, 0xBC, 0x29, 0x6A, 
   0xBF, 0x29, 0x6A, 0xBF, 0x20, 0x60, 0xB8, 0x20, 0x60, 0xB8, 0x1C, 0x5D, 0xB2, 0x1C, 0x5D, 0xB2, 
   0x28, 0x69, 0xBE, 0x28, 0x69, 0xBE, 0x24, 0x62, 0xBC, 0x24, 0x62, 0xBC, 0x14, 0x53, 0xAD, 0x14, 
   0x53, 0xAD, 0x03, 0x45, 0x9E, 0x03, 0x45, 0x9E, 0x1B, 0x5F, 0xB8, 0x1B, 0x5F, 0xB8, 0x12, 0x56, 
   0xAF, 0x12, 0x56, 0xAF, 0x13, 0x54, 0xB0, 0x13, 0x54, 0xB0, 0x08, 0x45, 0xA2, 0x08, 0x45, 0xA2, 
   0x18, 0x53, 0xB0, 0x18, 0x53, 0xB0, 0x13, 0x57, 0xB0, 0x13, 0x57, 0xB0, 0x24, 0x66, 0xBF, 0x24, 
   0x66, 0xBF, 0x24, 0x67, 0xBE, 0x24, 0x67, 0xBE, 0x27, 0x67, 0xBF, 0x27, 0x67, 0xBF, 0x2F, 0x70, 
   0xC5, 0x2F, 0x70, 0xC5, 0x28, 0x68, 0xBC, 0x28, 0x68, 0xBC, 0x21, 0x61, 0xB5, 0x21, 0x61, 0xB5, 
   0x2F, 0x6F, 0xC3, 0x2F, 0x6F, 0xC3, 0x00, 0x3D, 0x9A, 0x00, 0x3D, 0x9A, 0x1C, 0x59, 0xB6, 0x1C, 
   0x59, 0xB6, 0x00, 0x3B, 0x98, 0x00, 0x3B, 0x98, 0x1C, 0x59, 0xB6, 0x1C, 0x59, 0xB6, 0x20, 0x5D, 
   0xBA, 0x20, 0x5D, 0xBA, 0x2B, 0x68, 0xC5, 0x2B, 0x68, 0xC5, 0x11, 0x4E, 0xAB, 0x11, 0x4E, 0xAB, 
   0x22, 0x5F, 0xBC, 0x22, 0x5F, 0xBC, 0x00, 0x38, 0x91, 0x00, 0x38, 0x91, 0x0C, 0x44, 0x9D, 0x0C, 
   0x44, 0x9D, 0x18, 0x4D, 0xA7, 0x18, 0x4D, 0xA7, 0x26, 0x5B, 0xB5, 0x26, 0x5B, 0xB5, 0x18, 0x50, 
   0xA9, 0x18, 0x50, 0xA9, 0x1D, 0x59, 0xB2, 0x1D, 0x59, 0xB2, 0x0E, 0x51, 0xA8, 0x0E, 0x51, 0xA8, 
   0x00, 0x41, 0x98, 0x00, 0x41, 0x98, 0x19, 0x5C, 0xB3, 0x19, 0x5C, 0xB3, 0x1B, 0x5D, 0xB6, 0x1B, 
   0x5D, 0xB6, 0x20, 0x5D, 0xBB, 0x20, 0x5D, 0xBB, 0x1F, 0x5B, 0xBB, 0x1F, 0x5B, 0xBB, 0x19, 0x55, 
   0xB5, 0x19, 0x55, 0xB5, 0x14, 0x54, 0xB2, 0x14, 0x54, 0xB2, 0x1A, 0x61, 0xB9, 0x1A, 0x61, 0xB9, 
   0x24, 0x6F, 0xC5, 0x24, 0x6F, 0xC5, 0x2E, 0x7A, 0xCD, 0x2E, 0x7A, 0xCD, 0x3C, 0x88, 0xDA, 0x3C, 
   0x88, 0xDA, 0x3A, 0x88, 0xD5, 0x3A, 0x88, 0xD5, 0x36, 0x84, 0xD0, 0x36, 0x84, 0xD0, 0x3D, 0x8B, 
   0xD7, 0x3D, 0x8B, 0xD7, 0x33, 0x81, 0xCE, 0x33, 0x81, 0xCE, 0x46, 0x92, 0xE4, 0x46, 0x92, 0xE4, 
   0x1E, 0x6A, 0xBD, 0x1E, 0x6A, 0xBD, 0x24, 0x6F, 0xBD, 0x24, 0x6F, 0xBD, 0x2B, 0x79, 0xC6, 0x2B, 
   0x79, 0xC6, 0x25, 0x77, 0xC4, 0x25, 0x77, 0xC4, 0x28, 0x7C, 0xC8, 0x28, 0x7C, 0xC8, 0x27, 0x7B, 
   0xC7, 0x27, 0x7B, 0xC7, 0x31, 0x83, 0xD0, 0x31, 0x83, 0xD0, 0x43, 0x91, 0xDE, 0x43, 0x91, 0xDE, 
   0x31, 0x7C, 0xCA, 0x31, 0x7C, 0xCA, 0x23, 0x68, 0xB7, 0x23, 0x68, 0xB7, 0x1C, 0x61, 0xB1, 0x1C, 
   0x61, 0xB1, 0x17, 0x5A, 0xAF, 0x17, 0x5A, 0xAF, 0x21, 0x64, 0xBB, 0x21, 0x64, 0xBB, 0x28, 0x6B, 
   0xC2, 0x28, 0x6B, 0xC2, 0x1B, 0x5E, 0xB3, 0x1B, 0x5E, 0xB3, 0x16, 0x5A, 0xAD, 0x16, 0x5A, 0xAD, 
   0x25, 0x6A, 0xBA, 0x25, 0x6A, 0xBA, 0x2F, 0x72, 0xC7, 0x2F, 0x72, 0xC7, 0x26, 0x6B, 0xC2, 0x26, 
   0x6B, 0xC2, 0x25, 0x6C, 0xC3, 0x25, 0x6C, 0xC3, 0x0F, 0x56, 0xAD, 0x0F, 0x56, 0xAD, 0x22, 0x69, 
   0xC1, 0x22, 0x69, 0xC1, 0x25, 0x67, 0xC0, 0x25, 0x67, 0xC0, 0x2C, 0x69, 0xC6, 0x2C, 0x69, 0xC6, 
   0x1A, 0x55, 0xB2, 0x1A, 0x55, 0xB2, 0x11, 0x50, 0xAA, 0x11, 0x50, 0xAA, 0x1B, 0x5A, 0xB4, 0x1B, 
   0x5A, 0xB4, 0x1D, 0x5C, 0xB6, 0x1D, 0x5C, 0xB6, 0x1C, 0x5B, 0xB3, 0x1C, 0x5B, 0xB3, 0x1A, 0x59, 
   0xB1, 0x1A, 0x59, 0xB1, 0x12, 0x4F, 0xA5, 0x12, 0x4F, 0xA5, 0x09, 0x46, 0x9C, 0x09, 0x46, 0x9C, 
   0x0D, 0x49, 0x9D, 0x0D, 0x49, 0x9D, 0x00, 0x3D, 0x9A, 0x00, 0x3D, 0x9A, 0x1C, 0x59, 0xB6, 0x1C, 
   0x59, 0xB6, 0x00, 0x3B, 0x98, 0x00, 0x3B, 0x98, 0x1C, 0x59, 0xB6, 0x1C, 0x59, 0xB6, 0x20, 0x5D, 
   0xBA, 0x20, 0x5D, 0xBA, 0x2B, 0x68, 0xC5, 0x2B, 0x68, 0xC5, 0x11, 0x4E, 0xAB, 0x11, 0x4E, 0xAB, 
   0x22, 0x5F, 0xBC, 0x22, 0x5F, 0xBC, 0x00, 0x38, 0x91, 0x00, 0x38, 0x91, 0x0C, 0x44, 0x9D, 0x0C, 
   0x44, 0x9D, 0x18, 0x4D, 0xA7, 0x18, 0x4D, 0xA7, 0x26, 0x5B, 0xB5, 0x26, 0x5B, 0xB5, 0x18, 0x50, 
   0xA9, 0x18, 0x50, 0xA9, 0x1D, 0x59, 0xB2, 0x1D, 0x59, 0xB2, 0x0E, 0x51, 0xA8, 0x0E, 0x51, 0xA8, 
   0x00, 0x41, 0x98, 0x00, 0x41, 0x98, 0x19, 0x5C, 0xB3, 0x19, 0x5C, 0xB3, 0x1B, 0x5D, 0xB6, 0x1B, 
   0x5D, 0xB6, 0x20, 0x5D, 0xBB, 0x20, 0x5D, 0xBB, 0x1F, 0x5B, 0xBB, 0x1F, 0x5B, 0xBB, 0x19, 0x55, 
   0xB5, 0x19, 0x55, 0xB5, 0x14, 0x54, 0xB2, 0x14, 0x54, 0xB2, 0x1A, 0x61, 0xB9, 0x1A, 0x61, 0xB9, 
   0x24, 0x6F, 0xC5, 0x24, 0x6F, 0xC5, 0x2E, 0x7A, 0xCD, 0x2E, 0x7A, 0xCD, 0x3C, 0x88, 0xDA, 0x3C, 
   0x88, 0xDA, 0x3A, 0x88, 0xD5, 0x3A, 0x88, 0xD5, 0x36, 0x84, 0xD0, 0x36, 0x84, 0xD0, 0x3D, 0x8B, 
   0xD7, 0x3D, 0x8B, 0xD7, 0x33, 0x81, 0xCE, 0x33, 0x81, 0xCE, 0x46, 0x92, 0xE4, 0x46, 0x92, 0xE4, 
   0x1E, 0x6A, 0xBD, 0x1E, 0x6A, 0xBD, 0x24, 0x6F, 0xBD, 0x24, 0x6F, 0xBD, 0x2B, 0x79, 0xC6, 0x2B, 
   0x79, 0xC6, 0x25, 0x77, 0xC4, 0x25, 0x77, 0xC4, 0x28, 0x7C, 0xC8, 0x28, 0x7C, 0xC8, 0x27, 0x7B, 
   0xC7, 0x27, 0x7B, 0xC7, 0x31, 0x83, 0xD0, 0x31, 0x83, 0xD0, 0x43, 0x91, 0xDE, 0x43, 0x91, 0xDE, 
   0x31, 0x7C, 0xCA, 0x31, 0x7C, 0xCA, 0x23, 0x68, 0xB7, 0x23, 0x68, 0xB7, 0x1C, 0x61, 0xB1, 0x1C, 
   0x61, 0xB1, 0x17, 0x5A, 0xAF, 0x17, 0x5A, 0xAF, 0x21, 0x64, 0xBB, 0x21, 0x64, 0xBB, 0x28, 0x6B, 
   0xC2, 0x28, 0x6B, 0xC2, 0x1B, 0x5E, 0xB3, 0x1B, 0x5E, 0xB3, 0x16, 0x5A, 0xAD, 0x16, 0x5A, 0xAD, 
   0x25, 0x6A, 0xBA, 0x25, 0x6A, 0xBA, 0x2F, 0x72, 0xC7, 0x2F, 0x72, 0xC7, 0x26, 0x6B, 0xC2, 0x26, 
   0x6B, 0xC2, 0x25, 0x6C, 0xC3, 0x25, 0x6C, 0xC3, 0x0F, 0x56, 0xAD, 0x0F, 0x56, 0xAD, 0x22, 0x69, 
   0xC1, 0x22, 0x69, 0xC1, 0x25, 0x67, 0xC0, 0x25, 0x67, 0xC0, 0x2C, 0x69, 0xC6, 0x2C, 0x69, 0xC6, 
   0x1A, 0x55, 0xB2, 0x1A, 0x55, 0xB2, 0x11, 0x50, 0xAA, 0x11, 0x50, 0xAA, 0x1B, 0x5A, 0xB4, 0x1B, 
   0x5A, 0xB4, 0x1D, 0x5C, 0xB6, 0x1D, 0x5C, 0xB6, 0x1C, 0x5B, 0xB3, 0x1C, 0x5B, 0xB3, 0x1A, 0x59, 
   0xB1, 0x1A, 0x59, 0xB1, 0x12, 0x4F, 0xA5, 0x12, 0x4F, 0xA5, 0x09, 0x46, 0x9C, 0x09, 0x46, 0x9C, 
   0x0D, 0x49, 0x9D, 0x0D, 0x49, 0x9D, 0x29, 0x60, 0xBB, 0x29, 0x60, 0xBB, 0x21, 0x5A, 0xB5, 0x21, 
   0x5A, 0xB5, 0x29, 0x62, 0xBD, 0x29, 0x62, 0xBD, 0x00, 0x39, 0x93, 0x00, 0x39, 0x93, 0x19, 0x58, 
   0xB2, 0x19, 0x58, 0xB2, 0x19, 0x5B, 0xB4, 0x19, 0x5B, 0xB4, 0x20, 0x64, 0xBD, 0x20, 0x64, 0xBD, 
   0x0F, 0x56, 0xAE, 0x0F, 0x56, 0xAE, 0x22, 0x60, 0xAE, 0x22, 0x60, 0xAE, 0x1F, 0x5A, 0xAA, 0x1F, 
   0x5A, 0xAA, 0x11, 0x4C, 0x9C, 0x11, 0x4C, 0x9C, 0x1D, 0x57, 0xA9, 0x1D, 0x57, 0xA9, 0x0C, 0x48, 
   0x9C, 0x0C, 0x48, 0x9C, 0x2B, 0x6C, 0xC1, 0x2B, 0x6C, 0xC1, 0x1E, 0x63, 0xBA, 0x1E, 0x63, 0xBA, 
   0x19, 0x61, 0xB9, 0x19, 0x61, 0xB9, 0x14, 0x5D, 0xB3, 0x14, 0x5D, 0xB3, 0x1C, 0x63, 0xBB, 0x1C, 
   0x63, 0xBB, 0x29, 0x69, 0xC7, 0x29, 0x69, 0xC7, 0x2A, 0x6A, 0xC9, 0x2A, 0x6A, 0xC9, 0x20, 0x60, 
   0xBF, 0x20, 0x60, 0xBF, 0x14, 0x59, 0xB6, 0x14, 0x59, 0xB6, 0x15, 0x5F, 0xB7, 0x15, 0x5F, 0xB7, 
   0x1B, 0x6B, 0xC0, 0x1B, 0x6B, 0xC0, 0x28, 0x74, 0xC7, 0x28, 0x74, 0xC7, 0x30, 0x7C, 0xCE, 0x30, 
   0x7C, 0xCE, 0x28, 0x76, 0xC3, 0x28, 0x76, 0xC3, 0x2F, 0x7D, 0xC9, 0x2F, 0x7D, 0xC9, 0x3C, 0x8A, 
   0xD6, 0x3C, 0x8A, 0xD6, 0x30, 0x7E, 0xCB, 0x30, 0x7E, 0xCB, 0x4A, 0x96, 0xE8, 0x4A, 0x96, 0xE8, 
   0x26, 0x72, 0xC5, 0x26, 0x72, 0xC5, 0x20, 0x6B, 0xB9, 0x20, 0x6B, 0xB9, 0x1E, 0x6E, 0xBB, 0x1E, 
   0x6E, 0xBB, 0x19, 0x6B, 0xB8, 0x19, 0x6B, 0xB8, 0x1B, 0x6F, 0xBB, 0x1B, 0x6F, 0xBB, 0x20, 0x74, 
   0xC0, 0x20, 0x74, 0xC0, 0x2F, 0x81, 0xCE, 0x2F, 0x81, 0xCE, 0x35, 0x85, 0xD2, 0x35, 0x85, 0xD2, 
   0x1E, 0x69, 0xB7, 0x1E, 0x69, 0xB7, 0x28, 0x72, 0xC0, 0x28, 0x72, 0xC0, 0x26, 0x6F, 0xBF, 0x26, 
   0x6F, 0xBF, 0x20, 0x68, 0xBC, 0x20, 0x68, 0xBC, 0x22, 0x69, 0xC0, 0x22, 0x69, 0xC0, 0x28, 0x6F, 
   0xC6, 0x28, 0x6F, 0xC6, 0x22, 0x6B, 0xBD, 0x22, 0x6B, 0xBD, 0x21, 0x6B, 0xB9, 0x21, 0x6B, 0xB9, 
   0x2E, 0x79, 0xC5, 0x2E, 0x79, 0xC5, 0x1E, 0x67, 0xB7, 0x1E, 0x67, 0xB7, 0x26, 0x70, 0xC2, 0x26, 
   0x70, 0xC2, 0x2D, 0x79, 0xCB, 0x2D, 0x79, 0xCB, 0x11, 0x5D, 0xB0, 0x11, 0x5D, 0xB0, 0x1F, 0x68, 
   0xBE, 0x1F, 0x68, 0xBE, 0x23, 0x67, 0xC0, 0x23, 0x67, 0xC0, 0x2C, 0x6B, 0xC5, 0x2C, 0x6B, 0xC5, 
   0x16, 0x53, 0xB0, 0x16, 0x53, 0xB0, 0x1C, 0x63, 0xBE, 0x1C, 0x63, 0xBE, 0x19, 0x60, 0xBB, 0x19, 
   0x60, 0xBB, 0x1D, 0x64, 0xBC, 0x1D, 0x64, 0xBC, 0x1B, 0x62, 0xBA, 0x1B, 0x62, 0xBA, 0x17, 0x5C, 
   0xB3, 0x17, 0x5C, 0xB3, 0x1D, 0x63, 0xB7, 0x1D, 0x63, 0xB7, 0x28, 0x6B, 0xC0, 0x28, 0x6B, 0xC0, 
   0x28, 0x6B, 0xC0, 0x28, 0x6B, 0xC0, 0x29, 0x60, 0xBB, 0x29, 0x60, 0xBB, 0x21, 0x5A, 0xB5, 0x21, 
   0x5A, 0xB5, 0x29, 0x62, 0xBD, 0x29, 0x62, 0xBD, 0x00, 0x39, 0x93, 0x00, 0x39, 0x93, 0x19, 0x58, 
   0xB2, 0x19, 0x58, 0xB2, 0x19, 0x5B, 0xB4, 0x19, 0x5B, 0xB4, 0x20, 0x64, 0xBD, 0x20, 0x64, 0xBD, 
   0x0F, 0x56, 0xAE, 0x0F, 0x56, 0xAE, 0x22, 0x60, 0xAE, 0x22, 0x60, 0xAE, 0x1F, 0x5A, 0xAA, 0x1F, 
   0x5A, 0xAA, 0x11, 0x4C, 0x9C, 0x11, 0x4C, 0x9C, 0x1D, 0x57, 0xA9, 0x1D, 0x57, 0xA9, 0x0C, 0x48, 
   0x9C, 0x0C, 0x48, 0x9C, 0x2B, 0x6C, 0xC1, 0x2B, 0x6C, 0xC1, 0x1E, 0x63, 0xBA, 0x1E, 0x63, 0xBA, 
   0x19, 0x61, 0xB9, 0x19, 0x61, 0xB9, 0x14, 0x5D, 0xB3, 0x14, 0x5D, 0xB3, 0x1C, 0x63, 0xBB, 0x1C, 
   0x63, 0xBB, 0x29, 0x69, 0xC7, 0x29, 0x69, 0xC7, 0x2A, 0x6A, 0xC9, 0x2A, 0x6A, 0xC9, 0x20, 0x60, 
   0xBF, 0x20, 0x60, 0xBF, 0x14, 0x59, 0xB6, 0x14, 0x59, 0xB6, 0x15, 0x5F, 0xB7, 0x15, 0x5F, 0xB7, 
   0x1B, 0x6B, 0xC0, 0x1B, 0x6B, 0xC0, 0x28, 0x74, 0xC7, 0x28, 0x74, 0xC7, 0x30, 0x7C, 0xCE, 0x30, 
   0x7C, 0xCE, 0x28, 0x76, 0xC3, 0x28, 0x76, 0xC3, 0x2F, 0x7D, 0xC9, 0x2F, 0x7D, 0xC9, 0x3C, 0x8A, 
   0xD6, 0x3C, 0x8A, 0xD6, 0x30, 0x7E, 0xCB, 0x30, 0x7E, 0xCB, 0x4A, 0x96, 0xE8, 0x4A, 0x96, 0xE8, 
   0x26, 0x72, 0xC5, 0x26, 0x72, 0xC5, 0x20, 0x6B, 0xB9, 0x20, 0x6B, 0xB9, 0x1E, 0x6E, 0xBB, 0x1E, 
   0x6E, 0xBB, 0x19, 0x6B, 0xB8, 0x19, 0x6B, 0xB8, 0x1B, 0x6F, 0xBB, 0x1B, 0x6F, 0xBB, 0x20, 0x74, 
   0xC0, 0x20, 0x74, 0xC0, 0x2F, 0x81, 0xCE, 0x2F, 0x81, 0xCE, 0x35, 0x85, 0xD2, 0x35, 0x85, 0xD2, 
   0x1E, 0x69, 0xB7, 0x1E, 0x69, 0xB7, 0x28, 0x72, 0xC0, 0x28, 0x72, 0xC0, 0x26, 0x6F, 0xBF, 0x26, 
   0x6F, 0xBF, 0x20, 0x68, 0xBC, 0x20, 0x68, 0xBC, 0x22, 0x69, 0xC0, 0x22, 0x69, 0xC0, 0x28, 0x6F, 
   0xC6, 0x28, 0x6F, 0xC6, 0x22, 0x6B, 0xBD, 0x22, 0x6B, 0xBD, 0x21, 0x6B, 0xB9, 0x21, 0x6B, 0xB9, 
   0x2E, 0x79, 0xC5, 0x2E, 0x79, 0xC5, 0x1E, 0x67, 0xB7, 0x1E, 0x67, 0xB7, 0x26, 0x70, 0xC2, 0x26, 
   0x70, 0xC2, 0x2D, 0x79, 0xCB, 0x2D, 0x79, 0xCB, 0x11, 0x5D, 0xB0, 0x11, 0x5D, 0xB0, 0x1F, 0x68, 
   0xBE, 0x1F, 0x68, 0xBE, 0x23, 0x67, 0xC0, 0x23, 0x67, 0xC0, 0x2C, 0x6B, 0xC5, 0x2C, 0x6B, 0xC5, 
   0x16, 0x53, 0xB0, 0x16, 0x53, 0xB0, 0x1C, 0x63, 0xBE, 0x1C, 0x63, 0xBE, 0x19, 0x60, 0xBB, 0x19, 
   0x60, 0xBB, 0x1D, 0x64, 0xBC, 0x1D, 0x64, 0xBC, 0x1B, 0x62, 0xBA, 0x1B, 0x62, 0xBA, 0x17, 0x5C, 
   0xB3, 0x17, 0x5C, 0xB3, 0x1D, 0x63, 0xB7, 0x1D, 0x63, 0xB7, 0x28, 0x6B, 0xC0, 0x28, 0x6B, 0xC0, 
   0x28, 0x6B, 0xC0, 0x28, 0x6B, 0xC0, 0x15, 0x49, 0xA3, 0x15, 0x49, 0xA3, 0x00, 0x24, 0x7E, 0x00, 
   0x24, 0x7E, 0x00, 0x39, 0x92, 0x00, 0x39, 0x92, 0x17, 0x56, 0xAE, 0x17, 0x56, 0xAE, 0x09, 0x4C, 
   0xA3, 0x09, 0x4C, 0xA3, 0x15, 0x5C, 0xB3, 0x15, 0x5C, 0xB3, 0x07, 0x50, 0xA6, 0x07, 0x50, 0xA6, 
   0x0F, 0x5A, 0xB0, 0x0F, 0x5A, 0xB0, 0x13, 0x53, 0x9A, 0x13, 0x53, 0x9A, 0x00, 0x32, 0x7C, 0x00, 
   0x32, 0x7C, 0x00, 0x32, 0x7E, 0x00, 0x32, 0x7E, 0x04, 0x41, 0x91, 0x04, 0x41, 0x91, 0x0E, 0x4D, 
   0x9E, 0x0E, 0x4D, 0x9E, 0x10, 0x53, 0xA8, 0x10, 0x53, 0xA8, 0x0B, 0x54, 0xAA, 0x0B, 0x54, 0xAA, 
   0x0E, 0x58, 0xB0, 0x0E, 0x58, 0xB0, 0x0A, 0x55, 0xAB, 0x0A, 0x55, 0xAB, 0x0C, 0x54, 0xAC, 0x0C, 
   0x54, 0xAC, 0x0B, 0x50, 0xAD, 0x0B, 0x50, 0xAD, 0x06, 0x48, 0xA7, 0x06, 0x48, 0xA7, 0x00, 0x41, 
   0xA0, 0x00, 0x41, 0xA0, 0x00, 0x47, 0xA3, 0x00, 0x47, 0xA3, 0x0F, 0x5E, 0xB5, 0x0F, 0x5E, 0xB5, 
   0x25, 0x76, 0xCB, 0x25, 0x76, 0xCB, 0x19, 0x65, 0xB8, 0x19, 0x65, 0xB8, 0x1E, 0x6A, 0xBC, 0x1E, 
   0x6A, 0xBC, 0x14, 0x62, 0xAF, 0x14, 0x62, 0xAF, 0x23, 0x71, 0xBD, 0x23, 0x71, 0xBD, 0x35, 0x83, 
   0xCF, 0x35, 0x83, 0xCF, 0x29, 0x77, 0xC4, 0x29, 0x77, 0xC4, 0x47, 0x93, 0xE5, 0x47, 0x93, 0xE5, 
   0x26, 0x72, 0xC5, 0x26, 0x72, 0xC5, 0x20, 0x6E, 0xBB, 0x20, 0x6E, 0xBB, 0x32, 0x82, 0xCF, 0x32, 
   0x82, 0xCF, 0x3E, 0x90, 0xDD, 0x3E, 0x90, 0xDD, 0x38, 0x8E, 0xDA, 0x38, 0x8E, 0xDA, 0x2C, 0x82, 
   0xCE, 0x2C, 0x82, 0xCE, 0x33, 0x85, 0xD2, 0x33, 0x85, 0xD2, 0x3B, 0x8B, 0xD8, 0x3B, 0x8B, 0xD8, 
   0x2D, 0x7B, 0xC8, 0x2D, 0x7B, 0xC8, 0x17, 0x63, 0xAF, 0x17, 0x63, 0xAF, 0x1E, 0x69, 0xB8, 0x1E, 
   0x69, 0xB8, 0x17, 0x60, 0xB4, 0x17, 0x60, 0xB4, 0x0D, 0x55, 0xAD, 0x0D, 0x55, 0xAD, 0x11, 0x5A, 
   0xB0, 0x11, 0x5A, 0xB0, 0x15, 0x5F, 0xB1, 0x15, 0x5F, 0xB1, 0x17, 0x62, 0xB0, 0x17, 0x62, 0xB0, 
   0x20, 0x6D, 0xB6, 0x20, 0x6D, 0xB6, 0x1A, 0x65, 0xB3, 0x1A, 0x65, 0xB3, 0x2A, 0x77, 0xC6, 0x2A, 
   0x77, 0xC6, 0x29, 0x78, 0xC7, 0x29, 0x78, 0xC7, 0x32, 0x81, 0xD2, 0x32, 0x81, 0xD2, 0x1E, 0x6A, 
   0xBD, 0x1E, 0x6A, 0xBD, 0x27, 0x6E, 0xC5, 0x27, 0x6E, 0xC5, 0x20, 0x62, 0xBB, 0x20, 0x62, 0xBB, 
   0x26, 0x65, 0xBF, 0x26, 0x65, 0xBF, 0x19, 0x69, 0xC2, 0x19, 0x69, 0xC2, 0x11, 0x61, 0xBA, 0x11, 
   0x61, 0xBA, 0x17, 0x67, 0xBE, 0x17, 0x67, 0xBE, 0x18, 0x67, 0xBE, 0x18, 0x67, 0xBE, 0x0B, 0x5B, 
   0xB0, 0x0B, 0x5B, 0xB0, 0x15, 0x62, 0xB8, 0x15, 0x62, 0xB8, 0x22, 0x70, 0xC3, 0x22, 0x70, 0xC3, 
   0x1D, 0x69, 0xBC, 0x1D, 0x69, 0xBC, 0x15, 0x49, 0xA3, 0x15, 0x49, 0xA3, 0x00, 0x24, 0x7E, 0x00, 
   0x24, 0x7E, 0x00, 0x39, 0x92, 0x00, 0x39, 0x92, 0x17, 0x56, 0xAE, 0x17, 0x56, 0xAE, 0x09, 0x4C, 
   0xA3, 0x09, 0x4C, 0xA3, 0x15, 0x5C, 0xB3, 0x15, 0x5C, 0xB3, 0x07, 0x50, 0xA6, 0x07, 0x50, 0xA6, 
   0x0F, 0x5A, 0xB0, 0x0F, 0x5A, 0xB0, 0x13, 0x53, 0x9A, 0x13, 0x53, 0x9A, 0x00, 0x32, 0x7C, 0x00, 
   0x32, 0x7C, 0x00, 0x32, 0x7E, 0x00, 0x32, 0x7E, 0x04, 0x41, 0x91, 0x04, 0x41, 0x91, 0x0E, 0x4D, 
   0x9E, 0x0E, 0x4D, 0x9E, 0x10, 0x53, 0xA8, 0x10, 0x53, 0xA8, 0x0B, 0x54, 0xAA, 0x0B, 0x54, 0xAA, 
   0x0E, 0x58, 0xB0, 0x0E, 0x58, 0xB0, 0x0A, 0x55, 0xAB, 0x0A, 0x55, 0xAB, 0x0C, 0x54, 0xAC, 0x0C, 
   0x54, 0xAC, 0x0B, 0x50, 0xAD, 0x0B, 0x50, 0xAD, 0x06, 0x48, 0xA7, 0x06, 0x48, 0xA7, 0x00, 0x41, 
   0xA0, 0x00, 0x41, 0xA0, 0x00, 0x47, 0xA3, 0x00, 0x47, 0xA3, 0x0F, 0x5E, 0xB5, 0x0F, 0x5E, 0xB5, 
   0x25, 0x76, 0xCB, 0x25, 0x76, 0xCB, 0x19, 0x65, 0xB8, 0x19, 0x65, 0xB8, 0x1E, 0x6A, 0xBC, 0x1E, 
   0x6A, 0xBC, 0x14, 0x62, 0xAF, 0x14, 0x62, 0xAF, 0x23, 0x71, 0xBD, 0x23, 0x71, 0xBD, 0x35, 0x83, 
   0xCF, 0x35, 0x83, 0xCF, 0x29, 0x77, 0xC4, 0x29, 0x77, 0xC4, 0x47, 0x93, 0xE5, 0x47, 0x93, 0xE5, 
   0x26, 0x72, 0xC5, 0x26, 0x72, 0xC5, 0x20, 0x6E, 0xBB, 0x20, 0x6E, 0xBB, 0x32, 0x82, 0xCF, 0x32, 
   0x82, 0xCF, 0x3E, 0x90, 0xDD, 0x3E, 0x90, 0xDD, 0x38, 0x8E, 0xDA, 0x38, 0x8E, 0xDA, 0x2C, 0x82, 
   0xCE, 0x2C, 0x82, 0xCE, 0x33, 0x85, 0xD2, 0x33, 0x85, 0xD2, 0x3B, 0x8B, 0xD8, 0x3B, 0x8B, 0xD8, 
   0x2D, 0x7B, 0xC8, 0x2D, 0x7B, 0xC8, 0x17, 0x63, 0xAF, 0x17, 0x63, 0xAF, 0x1E, 0x69, 0xB8, 0x1E, 
   0x69, 0xB8, 0x17, 0x60, 0xB4, 0x17, 0x60, 0xB4, 0x0D, 0x55, 0xAD, 0x0D, 0x55, 0xAD, 0x11, 0x5A, 
   0xB0, 0x11, 0x5A, 0xB0, 0x15, 0x5F, 0xB1, 0x15, 0x5F, 0xB1, 0x17, 0x62, 0xB0, 0x17, 0x62, 0xB0, 
   0x20, 0x6D, 0xB6, 0x20, 0x6D, 0xB6, 0x1A, 0x65, 0xB3, 0x1A, 0x65, 0xB3, 0x2A, 0x77, 0xC6, 0x2A, 
   0x77, 0xC6, 0x29, 0x78, 0xC7, 0x29, 0x78, 0xC7, 0x32, 0x81, 0xD2, 0x32, 0x81, 0xD2, 0x1E, 0x6A, 
   0xBD, 0x1E, 0x6A, 0xBD, 0x27, 0x6E, 0xC5, 0x27, 0x6E, 0xC5, 0x20, 0x62, 0xBB, 0x20, 0x62, 0xBB, 
   0x26, 0x65, 0xBF, 0x26, 0x65, 0xBF, 0x19, 0x69, 0xC2, 0x19, 0x69, 0xC2, 0x11, 0x61, 0xBA, 0x11, 
   0x61, 0xBA, 0x17, 0x67, 0xBE, 0x17, 0x67, 0xBE, 0x18, 0x67, 0xBE, 0x18, 0x67, 0xBE, 0x0B, 0x5B, 
   0xB0, 0x0B, 0x5B, 0xB0, 0x15, 0x62, 0xB8, 0x15, 0x62, 0xB8, 0x22, 0x70, 0xC3, 0x22, 0x70, 0xC3, 
   0x1D, 0x69, 0xBC, 0x1D, 0x69, 0xBC, 0x05, 0x40, 0x9D, 0x05, 0x40, 0x9D, 0x21, 0x5C, 0xB9, 0x21, 
   0x5C, 0xB9, 0x0B, 0x46, 0xA3, 0x0B, 0x46, 0xA3, 0x07, 0x42, 0x9F, 0x07, 0x42, 0x9F, 0x12, 0x4D, 
   0xAA, 0x12, 0x4D, 0xAA, 0x0D, 0x48, 0xA5, 0x0D, 0x48, 0xA5, 0x17, 0x52, 0xAF, 0x17, 0x52, 0xAF, 
   0x14, 0x4F, 0xAC, 0x14, 0x4F, 0xAC, 0x0D, 0x4D, 0xA2, 0x0D, 0x4D, 0xA2, 0x0F, 0x4E, 0xA6, 0x0F, 
   0x4E, 0xA6, 0x10, 0x50, 0xA8, 0x10, 0x50, 0xA8, 0x12, 0x51, 0xAB, 0x12, 0x51, 0xAB, 0x12, 0x53, 
   0xAF, 0x12, 0x53, 0xAF, 0x13, 0x53, 0xB1, 0x13, 0x53, 0xB1, 0x13, 0x55, 0xB4, 0x13, 0x55, 0xB4, 
   0x15, 0x57, 0xB6, 0x15, 0x57, 0xB6, 0x15, 0x52, 0xB0, 0x15, 0x52, 0xB0, 0x03, 0x40, 0x9E, 0x03, 
   0x40, 0x9E, 0x18, 0x55, 0xB2, 0x18, 0x55, 0xB2, 0x1B, 0x58, 0xB5, 0x1B, 0x58, 0xB5, 0x13, 0x51, 
   0xAB, 0x13, 0x51, 0xAB, 0x0D, 0x4B, 0xA5, 0x0D, 0x4B, 0xA5, 0x0C, 0x4B, 0xA3, 0x0C, 0x4B, 0xA3, 
   0x35, 0x74, 0xCC, 0x35, 0x74, 0xCC, 0x1F, 0x67, 0xCC, 0x1F, 0x67, 0xCC, 0x22, 0x6D, 0xC9, 0x22, 
   0x6D, 0xC9, 0x2C, 0x7B, 0xCC, 0x2C, 0x7B, 0xCC, 0x22, 0x74, 0xBC, 0x22, 0x74, 0xBC, 0x35, 0x88, 
   0xCC, 0x35, 0x88, 0xCC, 0x36, 0x88, 0xD0, 0x36, 0x88, 0xD0, 0x3A, 0x89, 0xD8, 0x3A, 0x89, 0xD8, 
   0x29, 0x77, 0xCA, 0x29, 0x77, 0xCA, 0x28, 0x7B, 0xC9, 0x28, 0x7B, 0xC9, 0x57, 0xA9, 0xF7, 0x57, 
   0xA9, 0xF7, 0x05, 0x57, 0xA5, 0x05, 0x57, 0xA5, 0x39, 0x88, 0xD7, 0x39, 0x88, 0xD7, 0x42, 0x91, 
   0xE0, 0x42, 0x91, 0xE0, 0x27, 0x74, 0xC3, 0x27, 0x74, 0xC3, 0x48, 0x95, 0xE4, 0x48, 0x95, 0xE4, 
   0x28, 0x73, 0xC2, 0x28, 0x73, 0xC2, 0x20, 0x66, 0xC1, 0x20, 0x66, 0xC1, 0x19, 0x5C, 0xB8, 0x19, 
   0x5C, 0xB8, 0x16, 0x53, 0xB0, 0x16, 0x53, 0xB0, 0x14, 0x4F, 0xAC, 0x14, 0x4F, 0xAC, 0x10, 0x4B, 
   0xA8, 0x10, 0x4B, 0xA8, 0x10, 0x4D, 0xAA, 0x10, 0x4D, 0xAA, 0x19, 0x5C, 0xB8, 0x19, 0x5C, 0xB8, 
   0x26, 0x6C, 0xC7, 0x26, 0x6C, 0xC7, 0x0E, 0x58, 0xB0, 0x0E, 0x58, 0xB0, 0x0C, 0x53, 0xAB, 0x0C, 
   0x53, 0xAB, 0x1A, 0x5D, 0xB4, 0x1A, 0x5D, 0xB4, 0x1C, 0x5C, 0xB1, 0x1C, 0x5C, 0xB1, 0x24, 0x64, 
   0xB9, 0x24, 0x64, 0xB9, 0x2E, 0x72, 0xC5, 0x2E, 0x72, 0xC5, 0x24, 0x6D, 0xBD, 0x24, 0x6D, 0xBD, 
   0x24, 0x71, 0xC0, 0x24, 0x71, 0xC0, 0x2D, 0x73, 0xC7, 0x2D, 0x73, 0xC7, 0x28, 0x6E, 0xC2, 0x28, 
   0x6E, 0xC2, 0x2C, 0x72, 0xC6, 0x2C, 0x72, 0xC6, 0x2B, 0x71, 0xC5, 0x2B, 0x71, 0xC5, 0x22, 0x68, 
   0xBC, 0x22, 0x68, 0xBC, 0x24, 0x6A, 0xBE, 0x24, 0x6A, 0xBE, 0x2B, 0x71, 0xC5, 0x2B, 0x71, 0xC5, 
   0x29, 0x6F, 0xC3, 0x29, 0x6F, 0xC3, 0x05, 0x40, 0x9D, 0x05, 0x40, 0x9D, 0x21, 0x5C, 0xB9, 0x21, 
   0x5C, 0xB9, 0x0B, 0x46, 0xA3, 0x0B, 0x46, 0xA3, 0x07, 0x42, 0x9F, 0x07, 0x42, 0x9F, 0x12, 0x4D, 
   0xAA, 0x12, 0x4D, 0xAA, 0x0D, 0x48, 0xA5, 0x0D, 0x48, 0xA5, 0x17, 0x52, 0xAF, 0x17, 0x52, 0xAF, 
   0x14, 0x4F, 0xAC, 0x14, 0x4F, 0xAC, 0x0D, 0x4D, 0xA2, 0x0D, 0x4D, 0xA2, 0x0F, 0x4E, 0xA6, 0x0F, 
   0x4E, 0xA6, 0x10, 0x50, 0xA8, 0x10, 0x50, 0xA8, 0x12, 0x51, 0xAB, 0x12, 0x51, 0xAB, 0x12, 0x53, 
   0xAF, 0x12, 0x53, 0xAF, 0x13, 0x53, 0xB1, 0x13, 0x53, 0xB1, 0x13, 0x55, 0xB4, 0x13, 0x55, 0xB4, 
   0x15, 0x57, 0xB6, 0x15, 0x57, 0xB6, 0x15, 0x52, 0xB0, 0x15, 0x52, 0xB0, 0x03, 0x40, 0x9E, 0x03, 
   0x40, 0x9E, 0x18, 0x55, 0xB2, 0x18, 0x55, 0xB2, 0x1B, 0x58, 0xB5, 0x1B, 0x58, 0xB5, 0x13, 0x51, 
   0xAB, 0x13, 0x51, 0xAB, 0x0D, 0x4B, 0xA5, 0x0D, 0x4B, 0xA5, 0x0C, 0x4B, 0xA3, 0x0C, 0x4B, 0xA3, 
   0x35, 0x74, 0xCC, 0x35, 0x74, 0xCC, 0x1F, 0x67, 0xCC, 0x1F, 0x67, 0xCC, 0x22, 0x6D, 0xC9, 0x22, 
   0x6D, 0xC9, 0x2C, 0x7B, 0xCC, 0x2C, 0x7B, 0xCC, 0x22, 0x74, 0xBC, 0x22, 0x74, 0xBC, 0x35, 0x88, 
   0xCC, 0x35, 0x88, 0xCC, 0x36, 0x88, 0xD0, 0x36, 0x88, 0xD0, 0x3A, 0x89, 0xD8, 0x3A, 0x89, 0xD8, 
   0x29, 0x77, 0xCA, 0x29, 0x77, 0xCA, 0x28, 0x7B, 0xC9, 0x28, 0x7B, 0xC9, 0x57, 0xA9, 0xF7, 0x57, 
   0xA9, 0xF7, 0x05, 0x57, 0xA5, 0x05, 0x57, 0xA5, 0x39, 0x88, 0xD7, 0x39, 0x88, 0xD7, 0x42, 0x91, 
   0xE0, 0x42, 0x91, 0xE0, 0x27, 0x74, 0xC3, 0x27, 0x74, 0xC3, 0x48, 0x95, 0xE4, 0x48, 0x95, 0xE4, 
   0x28, 0x73, 0xC2, 0x28, 0x73, 0xC2, 0x20, 0x66, 0xC1, 0x20, 0x66, 0xC1, 0x19, 0x5C, 0xB8, 0x19, 
   0x5C, 0xB8, 0x16, 0x53, 0xB0, 0x16, 0x53, 0xB0, 0x14, 0x4F, 0xAC, 0x14, 0x4F, 0xAC, 0x10, 0x4B, 
   0xA8, 0x10, 0x4B, 0xA8, 0x10, 0x4D, 0xAA, 0x10, 0x4D, 0xAA, 0x19, 0x5C, 0xB8, 0x19, 0x5C, 0xB8, 
   0x26, 0x6C, 0xC7, 0x26, 0x6C, 0xC7, 0x0E, 0x58, 0xB0, 0x0E, 0x58, 0xB0, 0x0C, 0x53, 0xAB, 0x0C, 
   0x53, 0xAB, 0x1A, 0x5D, 0xB4, 0x1A, 0x5D, 0xB4, 0x1C, 0x5C, 0xB1, 0x1C, 0x5C, 0xB1, 0x24, 0x64, 
   0xB9, 0x24, 0x64, 0xB9, 0x2E, 0x72, 0xC5, 0x2E, 0x72, 0xC5, 0x24, 0x6D, 0xBD, 0x24, 0x6D, 0xBD, 
   0x24, 0x71, 0xC0, 0x24, 0x71, 0xC0, 0x2D, 0x73, 0xC7, 0x2D, 0x73, 0xC7, 0x28, 0x6E, 0xC2, 0x28, 
   0x6E, 0xC2, 0x2C, 0x72, 0xC6, 0x2C, 0x72, 0xC6, 0x2B, 0x71, 0xC5, 0x2B, 0x71, 0xC5, 0x22, 0x68, 
   0xBC, 0x22, 0x68, 0xBC, 0x24, 0x6A, 0xBE, 0x24, 0x6A, 0xBE, 0x2B, 0x71, 0xC5, 0x2B, 0x71, 0xC5, 
   0x29, 0x6F, 0xC3, 0x29, 0x6F, 0xC3, 0x01, 0x40, 0x9C, 0x01, 0x40, 0x9C, 0x1B, 0x5A, 0xB6, 0x1B, 
   0x5A, 0xB6, 0x09, 0x48, 0xA4, 0x09, 0x48, 0xA4, 0x07, 0x46, 0xA2, 0x07, 0x46, 0xA2, 0x11, 0x50, 
   0xAC, 0x11, 0x50, 0xAC, 0x0C, 0x4B, 0xA7, 0x0C, 0x4B, 0xA7, 0x11, 0x50, 0xAC, 0x11, 0x50, 0xAC, 
   0x0D, 0x4C, 0xA8, 0x0D, 0x4C, 0xA8, 0x0F, 0x50, 0xA5, 0x0F, 0x50, 0xA5, 0x0B, 0x4E, 0xA5, 0x0B, 
   0x4E, 0xA5, 0x09, 0x4C, 0xA3, 0x09, 0x4C, 0xA3, 0x08, 0x4C, 0xA5, 0x08, 0x4C, 0xA5, 0x08, 0x4B, 
   0xA7, 0x08, 0x4B, 0xA7, 0x03, 0x49, 0xA4, 0x03, 0x49, 0xA4, 0x00, 0x42, 0x9F, 0x00, 0x42, 0x9F, 
   0x00, 0x3D, 0x9A, 0x00, 0x3D, 0x9A, 0x05, 0x45, 0xA3, 0x05, 0x45, 0xA3, 0x0A, 0x4A, 0xA8, 0x0A, 
   0x4A, 0xA8, 0x0F, 0x50, 0xAC, 0x0F, 0x50, 0xAC, 0x00, 0x40, 0x9C, 0x00, 0x40, 0x9C, 0x00, 0x3D, 
   0x96, 0x00, 0x3D, 0x96, 0x0C, 0x4F, 0xA6, 0x0C, 0x4F, 0xA6, 0x18, 0x5B, 0xB2, 0x18, 0x5B, 0xB2, 
   0x27, 0x6A, 0xC1, 0x27, 0x6A, 0xC1, 0x20, 0x67, 0xC9, 0x20, 0x67, 0xC9, 0x22, 0x6B, 0xC7, 0x22, 
   0x6B, 0xC7, 0x2B, 0x77, 0xC9, 0x2B, 0x77, 0xC9, 0x23, 0x72, 0xBB, 0x23, 0x72, 0xBB, 0x3A, 0x8A, 
   0xD1, 0x3A, 0x8A, 0xD1, 0x3E, 0x8D, 0xD6, 0x3E, 0x8D, 0xD6, 0x42, 0x8F, 0xDE, 0x42, 0x8F, 0xDE, 
   0x30, 0x7C, 0xCF, 0x30, 0x7C, 0xCF, 0x24, 0x77, 0xC5, 0x24, 0x77, 0xC5, 0x3E, 0x90, 0xDE, 0x3E, 
   0x90, 0xDE, 0x2F, 0x81, 0xCF, 0x2F, 0x81, 0xCF, 0x27, 0x76, 0xC5, 0x27, 0x76, 0xC5, 0x44, 0x93, 
   0xE2, 0x44, 0x93, 0xE2, 0x1C, 0x69, 0xB8, 0x1C, 0x69, 0xB8, 0x44, 0x91, 0xE0, 0x44, 0x91, 0xE0, 
   0x3F, 0x8A, 0xD9, 0x3F, 0x8A, 0xD9, 0x15, 0x5D, 0xB5, 0x15, 0x5D, 0xB5, 0x12, 0x59, 0xB1, 0x12, 
   0x59, 0xB1, 0x17, 0x59, 0xB2, 0x17, 0x59, 0xB2, 0x1F, 0x5D, 0xB7, 0x1F, 0x5D, 0xB7, 0x20, 0x5E, 
   0xB8, 0x20, 0x5E, 0xB8, 0x18, 0x5A, 0xB3, 0x18, 0x5A, 0xB3, 0x12, 0x59, 0xB1, 0x12, 0x59, 0xB1, 
   0x13, 0x5B, 0xB3, 0x13, 0x5B, 0xB3, 0x18, 0x60, 0xB8, 0x18, 0x60, 0xB8, 0x1B, 0x62, 0xBA, 0x1B, 
   0x62, 0xBA, 0x2D, 0x70, 0xC7, 0x2D, 0x70, 0xC7, 0x25, 0x66, 0xBB, 0x25, 0x66, 0xBB, 0x1D, 0x5E, 
   0xB3, 0x1D, 0x5E, 0xB3, 0x1E, 0x62, 0xB5, 0x1E, 0x62, 0xB5, 0x16, 0x5F, 0xAF, 0x16, 0x5F, 0xAF, 
   0x20, 0x6B, 0xBA, 0x20, 0x6B, 0xBA, 0x16, 0x5C, 0xB0, 0x16, 0x5C, 0xB0, 0x13, 0x59, 0xAD, 0x13, 
   0x59, 0xAD, 0x1A, 0x60, 0xB4, 0x1A, 0x60, 0xB4, 0x1E, 0x64, 0xB8, 0x1E, 0x64, 0xB8, 0x17, 0x5D, 
   0xB1, 0x17, 0x5D, 0xB1, 0x1A, 0x60, 0xB4, 0x1A, 0x60, 0xB4, 0x21, 0x67, 0xBB, 0x21, 0x67, 0xBB, 
   0x1D, 0x63, 0xB7, 0x1D, 0x63, 0xB7, 0x01, 0x40, 0x9C, 0x01, 0x40, 0x9C, 0x1B, 0x5A, 0xB6, 0x1B, 
   0x5A, 0xB6, 0x09, 0x48, 0xA4, 0x09, 0x48, 0xA4, 0x07, 0x46, 0xA2, 0x07, 0x46, 0xA2, 0x11, 0x50, 
   0xAC, 0x11, 0x50, 0xAC, 0x0C, 0x4B, 0xA7, 0x0C, 0x4B, 0xA7, 0x11, 0x50, 0xAC, 0x11, 0x50, 0xAC, 
   0x0D, 0x4C, 0xA8, 0x0D, 0x4C, 0xA8, 0x0F, 0x50, 0xA5, 0x0F, 0x50, 0xA5, 0x0B, 0x4E, 0xA5, 0x0B, 
   0x4E, 0xA5, 0x09, 0x4C, 0xA3, 0x09, 0x4C, 0xA3, 0x08, 0x4C, 0xA5, 0x08, 0x4C, 0xA5, 0x08, 0x4B, 
   0xA7, 0x08, 0x4B, 0xA7, 0x03, 0x49, 0xA4, 0x03, 0x49, 0xA4, 0x00, 0x42, 0x9F, 0x00, 0x42, 0x9F, 
   0x00, 0x3D, 0x9A, 0x00, 0x3D, 0x9A, 0x05, 0x45, 0xA3, 0x05, 0x45, 0xA3, 0x0A, 0x4A, 0xA8, 0x0A, 
   0x4A, 0xA8, 0x0F, 0x50, 0xAC, 0x0F, 0x50, 0xAC, 0x00, 0x40, 0x9C, 0x00, 0x40, 0x9C, 0x00, 0x3D, 
   0x96, 0x00, 0x3D, 0x96, 0x0C, 0x4F, 0xA6, 0x0C, 0x4F, 0xA6, 0x18, 0x5B, 0xB2, 0x18, 0x5B, 0xB2, 
   0x27, 0x6A, 0xC1, 0x27, 0x6A, 0xC1, 0x20, 0x67, 0xC9, 0x20, 0x67, 0xC9, 0x22, 0x6B, 0xC7, 0x22, 
   0x6B, 0xC7, 0x2B, 0x77, 0xC9, 0x2B, 0x77, 0xC9, 0x23, 0x72, 0xBB, 0x23, 0x72, 0xBB, 0x3A, 0x8A, 
   0xD1, 0x3A, 0x8A, 0xD1, 0x3E, 0x8D, 0xD6, 0x3E, 0x8D, 0xD6, 0x42, 0x8F, 0xDE, 0x42, 0x8F, 0xDE, 
   0x30, 0x7C, 0xCF, 0x30, 0x7C, 0xCF, 0x24, 0x77, 0xC5, 0x24, 0x77, 0xC5, 0x3E, 0x90, 0xDE, 0x3E, 
   0x90, 0xDE, 0x2F, 0x81, 0xCF, 0x2F, 0x81, 0xCF, 0x27, 0x76, 0xC5, 0x27, 0x76, 0xC5, 0x44, 0x93, 
   0xE2, 0x44, 0x93, 0xE2, 0x1C, 0x69, 0xB8, 0x1C, 0x69, 0xB8, 0x44, 0x91, 0xE0, 0x44, 0x91, 0xE0, 
   0x3F, 0x8A, 0xD9, 0x3F, 0x8A, 0xD9, 0x15, 0x5D, 0xB5, 0x15, 0x5D, 0xB5, 0x12, 0x59, 0xB1, 0x12, 
   0x59, 0xB1, 0x17, 0x59, 0xB2, 0x17, 0x59, 0xB2, 0x1F, 0x5D, 0xB7, 0x1F, 0x5D, 0xB7, 0x20, 0x5E, 
   0xB8, 0x20, 0x5E, 0xB8, 0x18, 0x5A, 0xB3, 0x18, 0x5A, 0xB3, 0x12, 0x59, 0xB1, 0x12, 0x59, 0xB1, 
   0x13, 0x5B, 0xB3, 0x13, 0x5B, 0xB3, 0x18, 0x60, 0xB8, 0x18, 0x60, 0xB8, 0x1B, 0x62, 0xBA, 0x1B, 
   0x62, 0xBA, 0x2D, 0x70, 0xC7, 0x2D, 0x70, 0xC7, 0x25, 0x66, 0xBB, 0x25, 0x66, 0xBB, 0x1D, 0x5E, 
   0xB3, 0x1D, 0x5E, 0xB3, 0x1E, 0x62, 0xB5, 0x1E, 0x62, 0xB5, 0x16, 0x5F, 0xAF, 0x16, 0x5F, 0xAF, 
   0x20, 0x6B, 0xBA, 0x20, 0x6B, 0xBA, 0x16, 0x5C, 0xB0, 0x16, 0x5C, 0xB0, 0x13, 0x59, 0xAD, 0x13, 
   0x59, 0xAD, 0x1A, 0x60, 0xB4, 0x1A, 0x60, 0xB4, 0x1E, 0x64, 0xB8, 0x1E, 0x64, 0xB8, 0x17, 0x5D, 
   0xB1, 0x17, 0x5D, 0xB1, 0x1A, 0x60, 0xB4, 0x1A, 0x60, 0xB4, 0x21, 0x67, 0xBB, 0x21, 0x67, 0xBB, 
   0x1D, 0x63, 0xB7, 0x1D, 0x63, 0xB7, 0x1E, 0x62, 0xBB, 0x1E, 0x62, 0xBB, 0x31, 0x75, 0xCE, 0x31, 
   0x75, 0xCE, 0x28, 0x6C, 0xC5, 0x28, 0x6C, 0xC5, 0x28, 0x6C, 0xC5, 0x28, 0x6C, 0xC5, 0x30, 0x74, 
   0xCD, 0x30, 0x74, 0xCD, 0x2C, 0x70, 0xC9, 0x2C, 0x70, 0xC9, 0x2D, 0x71, 0xCA, 0x2D, 0x71, 0xCA, 
   0x26, 0x6A, 0xC3, 0x26, 0x6A, 0xC3, 0x2C, 0x71, 0xC8, 0x2C, 0x71, 0xC8, 0x28, 0x6F, 0xC6, 0x28, 
   0x6F, 0xC6, 0x27, 0x6E, 0xC5, 0x27, 0x6E, 0xC5, 0x2A, 0x72, 0xCA, 0x2A, 0x72, 0xCA, 0x2E, 0x76, 
   0xCE, 0x2E, 0x76, 0xCE, 0x2B, 0x74, 0xCF, 0x2B, 0x74, 0xCF, 0x23, 0x6C, 0xC7, 0x23, 0x6C, 0xC7, 
   0x1B, 0x64, 0xBF, 0x1B, 0x64, 0xBF, 0x24, 0x6A, 0xC5, 0x24, 0x6A, 0xC5, 0x20, 0x66, 0xC1, 0x20, 
   0x66, 0xC1, 0x16, 0x5C, 0xB7, 0x16, 0x5C, 0xB7, 0x1D, 0x64, 0xBC, 0x1D, 0x64, 0xBC, 0x1A, 0x61, 
   0xB9, 0x1A, 0x61, 0xB9, 0x14, 0x5B, 0xB2, 0x14, 0x5B, 0xB2, 0x27, 0x6E, 0xC5, 0x27, 0x6E, 0xC5, 
   0x36, 0x7E, 0xD2, 0x36, 0x7E, 0xD2, 0x33, 0x77, 0xD8, 0x33, 0x77, 0xD8, 0x32, 0x78, 0xD3, 0x32, 
   0x78, 0xD3, 0x34, 0x7D, 0xCF, 0x34, 0x7D, 0xCF, 0x24, 0x6F, 0xBB, 0x24, 0x6F, 0xBB, 0x39, 0x84, 
   0xCE, 0x39, 0x84, 0xCE, 0x3F, 0x8A, 0xD6, 0x3F, 0x8A, 0xD6, 0x46, 0x8F, 0xDF, 0x46, 0x8F, 0xDF, 
   0x34, 0x7C, 0xD0, 0x34, 0x7C, 0xD0, 0x19, 0x6C, 0xBA, 0x19, 0x6C, 0xBA, 0x2C, 0x7E, 0xCC, 0x2C, 
   0x7E, 0xCC, 0x33, 0x85, 0xD3, 0x33, 0x85, 0xD3, 0x2E, 0x7D, 0xCC, 0x2E, 0x7D, 0xCC, 0x2E, 0x7D, 
   0xCC, 0x2E, 0x7D, 0xCC, 0x38, 0x85, 0xD4, 0x38, 0x85, 0xD4, 0x33, 0x80, 0xCF, 0x33, 0x80, 0xCF, 
   0x57, 0xA2, 0xF1, 0x57, 0xA2, 0xF1, 0x1E, 0x6B, 0xC2, 0x1E, 0x6B, 0xC2, 0x1A, 0x64, 0xBC, 0x1A, 
   0x64, 0xBC, 0x1A, 0x61, 0xB9, 0x1A, 0x61, 0xB9, 0x1F, 0x63, 0xBC, 0x1F, 0x63, 0xBC, 0x23, 0x67, 
   0xC0, 0x23, 0x67, 0xC0, 0x1F, 0x66, 0xBE, 0x1F, 0x66, 0xBE, 0x19, 0x63, 0xBB, 0x19, 0x63, 0xBB, 
   0x16, 0x63, 0xBA, 0x16, 0x63, 0xBA, 0x1F, 0x68, 0xBE, 0x1F, 0x68, 0xBE, 0x1E, 0x65, 0xBC, 0x1E, 
   0x65, 0xBC, 0x2B, 0x6E, 0xC5, 0x2B, 0x6E, 0xC5, 0x20, 0x61, 0xB6, 0x20, 0x61, 0xB6, 0x12, 0x53, 
   0xA8, 0x12, 0x53, 0xA8, 0x0B, 0x4F, 0xA2, 0x0B, 0x4F, 0xA2, 0x00, 0x46, 0x98, 0x00, 0x46, 0x98, 
   0x05, 0x4F, 0xA1, 0x05, 0x4F, 0xA1, 0x14, 0x5A, 0xAE, 0x14, 0x5A, 0xAE, 0x12, 0x58, 0xAC, 0x12, 
   0x58, 0xAC, 0x1A, 0x60, 0xB4, 0x1A, 0x60, 0xB4, 0x1F, 0x65, 0xB9, 0x1F, 0x65, 0xB9, 0x1A, 0x60, 
   0xB4, 0x1A, 0x60, 0xB4, 0x1B, 0x61, 0xB5, 0x1B, 0x61, 0xB5, 0x20, 0x66, 0xBA, 0x20, 0x66, 0xBA, 
   0x1B, 0x61, 0xB5, 0x1B, 0x61, 0xB5, 0x1E, 0x62, 0xBB, 0x1E, 0x62, 0xBB, 0x31, 0x75, 0xCE, 0x31, 
   0x75, 0xCE, 0x28, 0x6C, 0xC5, 0x28, 0x6C, 0xC5, 0x28, 0x6C, 0xC5, 0x28, 0x6C, 0xC5, 0x30, 0x74, 
   0xCD, 0x30, 0x74, 0xCD, 0x2C, 0x70, 0xC9, 0x2C, 0x70, 0xC9, 0x2D, 0x71, 0xCA, 0x2D, 0x71, 0xCA, 
   0x26, 0x6A, 0xC3, 0x26, 0x6A, 0xC3, 0x2C, 0x71, 0xC8, 0x2C, 0x71, 0xC8, 0x28, 0x6F, 0xC6, 0x28, 
   0x6F, 0xC6, 0x27, 0x6E, 0xC5, 0x27, 0x6E, 0xC5, 0x2A, 0x72, 0xCA, 0x2A, 0x72, 0xCA, 0x2E, 0x76, 
   0xCE, 0x2E, 0x76, 0xCE, 0x2B, 0x74, 0xCF, 0x2B, 0x74, 0xCF, 0x23, 0x6C, 0xC7, 0x23, 0x6C, 0xC7, 
   0x1B, 0x64, 0xBF, 0x1B, 0x64, 0xBF, 0x24, 0x6A, 0xC5, 0x24, 0x6A, 0xC5, 0x20, 0x66, 0xC1, 0x20, 
   0x66, 0xC1, 0x16, 0x5C, 0xB7, 0x16, 0x5C, 0xB7, 0x1D, 0x64, 0xBC, 0x1D, 0x64, 0xBC, 0x1A, 0x61, 
   0xB9, 0x1A, 0x61, 0xB9, 0x14, 0x5B, 0xB2, 0x14, 0x5B, 0xB2, 0x27, 0x6E, 0xC5, 0x27, 0x6E, 0xC5, 
   0x36, 0x7E, 0xD2, 0x36, 0x7E, 0xD2, 0x33, 0x77, 0xD8, 0x33, 0x77, 0xD8, 0x32, 0x78, 0xD3, 0x32, 
   0x78, 0xD3, 0x34, 0x7D, 0xCF, 0x34, 0x7D, 0xCF, 0x24, 0x6F, 0xBB, 0x24, 0x6F, 0xBB, 0x39, 0x84, 
   0xCE, 0x39, 0x84, 0xCE, 0x3F, 0x8A, 0xD6, 0x3F, 0x8A, 0xD6, 0x46, 0x8F, 0xDF, 0x46, 0x8F, 0xDF, 
   0x34, 0x7C, 0xD0, 0x34, 0x7C, 0xD0, 0x19, 0x6C, 0xBA, 0x19, 0x6C, 0xBA, 0x2C, 0x7E, 0xCC, 0x2C, 
   0x7E, 0xCC, 0x33, 0x85, 0xD3, 0x33, 0x85, 0xD3, 0x2E, 0x7D, 0xCC, 0x2E, 0x7D, 0xCC, 0x2E, 0x7D, 
   0xCC, 0x2E, 0x7D, 0xCC, 0x38, 0x85, 0xD4, 0x38, 0x85, 0xD4, 0x33, 0x80, 0xCF, 0x33, 0x80, 0xCF, 
   0x57, 0xA2, 0xF1, 0x57, 0xA2, 0xF1, 0x1E, 0x6B, 0xC2, 0x1E, 0x6B, 0xC2, 0x1A, 0x64, 0xBC, 0x1A, 
   0x64, 0xBC, 0x1A, 0x61, 0xB9, 0x1A, 0x61, 0xB9, 0x1F, 0x63, 0xBC, 0x1F, 0x63, 0xBC, 0x23, 0x67, 
   0xC0, 0x23, 0x67, 0xC0, 0x1F, 0x66, 0xBE, 0x1F, 0x66, 0xBE, 0x19, 0x63, 0xBB, 0x19, 0x63, 0xBB, 
   0x16, 0x63, 0xBA, 0x16, 0x63, 0xBA, 0x1F, 0x68, 0xBE, 0x1F, 0x68, 0xBE, 0x1E, 0x65, 0xBC, 0x1E, 
   0x65, 0xBC, 0x2B, 0x6E, 0xC5, 0x2B, 0x6E, 0xC5, 0x20, 0x61, 0xB6, 0x20, 0x61, 0xB6, 0x12, 0x53, 
   0xA8, 0x12, 0x53, 0xA8, 0x0B, 0x4F, 0xA2, 0x0B, 0x4F, 0xA2, 0x00, 0x46, 0x98, 0x00, 0x46, 0x98, 
   0x05, 0x4F, 0xA1, 0x05, 0x4F, 0xA1, 0x14, 0x5A, 0xAE, 0x14, 0x5A, 0xAE, 0x12, 0x58, 0xAC, 0x12, 
   0x58, 0xAC, 0x1A, 0x60, 0xB4, 0x1A, 0x60, 0xB4, 0x1F, 0x65, 0xB9, 0x1F, 0x65, 0xB9, 0x1A, 0x60, 
   0xB4, 0x1A, 0x60, 0xB4, 0x1B, 0x61, 0xB5, 0x1B, 0x61, 0xB5, 0x20, 0x66, 0xBA, 0x20, 0x66, 0xBA, 
   0x1B, 0x61, 0xB5, 0x1B, 0x61, 0xB5, 0x18, 0x61, 0xB7, 0x18, 0x61, 0xB7, 0x20, 0x69, 0xBF, 0x20, 
   0x69, 0xBF, 0x1C, 0x65, 0xBB, 0x1C, 0x65, 0xBB, 0x1C, 0x65, 0xBB, 0x1C, 0x65, 0xBB, 0x21, 0x6A, 
   0xC0, 0x21, 0x6A, 0xC0, 0x21, 0x6A, 0xC0, 0x21, 0x6A, 0xC0, 0x1E, 0x67, 0xBD, 0x1E, 0x67, 0xBD, 
   0x16, 0x5F, 0xB5, 0x16, 0x5F, 0xB5, 0x1B, 0x64, 0xBA, 0x1B, 0x64, 0xBA, 0x1B, 0x64, 0xBA, 0x1B, 
   0x64, 0xBA, 0x1B, 0x66, 0xBC, 0x1B, 0x66, 0xBC, 0x20, 0x6B, 0xC1, 0x20, 0x6B, 0xC1, 0x23, 0x70, 
   0xC6, 0x23, 0x70, 0xC6, 0x23, 0x72, 0xC9, 0x23, 0x72, 0xC9, 0x21, 0x70, 0xC7, 0x21, 0x70, 0xC7, 
   0x1E, 0x6D, 0xC4, 0x1E, 0x6D, 0xC4, 0x20, 0x69, 0xC4, 0x20, 0x69, 0xC4, 0x20, 0x69, 0xC4, 0x20, 
   0x69, 0xC4, 0x15, 0x5F, 0xB7, 0x15, 0x5F, 0xB7, 0x30, 0x7A, 0xD2, 0x30, 0x7A, 0xD2, 0x32, 0x7D, 
   0xD3, 0x32, 0x7D, 0xD3, 0x1A, 0x66, 0xB9, 0x1A, 0x66, 0xB9, 0x29, 0x75, 0xC8, 0x29, 0x75, 0xC8, 
   0x2D, 0x79, 0xCC, 0x2D, 0x79, 0xCC, 0x3C, 0x7F, 0xDC, 0x3C, 0x7F, 0xDC, 0x3C, 0x80, 0xD9, 0x3C, 
   0x80, 0xD9, 0x3B, 0x81, 0xD4, 0x3B, 0x81, 0xD4, 0x25, 0x6D, 0xBB, 0x25, 0x6D, 0xBB, 0x34, 0x7C, 
   0xC9, 0x34, 0x7C, 0xC9, 0x3E, 0x86, 0xD4, 0x3E, 0x86, 0xD4, 0x4A, 0x91, 0xE1, 0x4A, 0x91, 0xE1, 
   0x3D, 0x83, 0xD6, 0x3D, 0x83, 0xD6, 0x30, 0x83, 0xD1, 0x30, 0x83, 0xD1, 0x37, 0x89, 0xD7, 0x37, 
   0x89, 0xD7, 0x36, 0x88, 0xD6, 0x36, 0x88, 0xD6, 0x36, 0x85, 0xD4, 0x36, 0x85, 0xD4, 0x2B, 0x7A, 
   0xC9, 0x2B, 0x7A, 0xC9, 0x44, 0x91, 0xE0, 0x44, 0x91, 0xE0, 0x19, 0x66, 0xB5, 0x19, 0x66, 0xB5, 
   0x39, 0x84, 0xD3, 0x39, 0x84, 0xD3, 0x1F, 0x6C, 0xC2, 0x1F, 0x6C, 0xC2, 0x1B, 0x68, 0xBE, 0x1B, 
   0x68, 0xBE, 0x1A, 0x65, 0xBB, 0x1A, 0x65, 0xBB, 0x1A, 0x65, 0xBB, 0x1A, 0x65, 0xBB, 0x1B, 0x66, 
   0xBC, 0x1B, 0x66, 0xBC, 0x1B, 0x66, 0xBC, 0x1B, 0x66, 0xBC, 0x19, 0x66, 0xBC, 0x19, 0x66, 0xBC, 
   0x18, 0x65, 0xBB, 0x18, 0x65, 0xBB, 0x1E, 0x66, 0xBA, 0x1E, 0x66, 0xBA, 0x16, 0x5C, 0xB0, 0x16, 
   0x5C, 0xB0, 0x1E, 0x64, 0xB8, 0x1E, 0x64, 0xB8, 0x23, 0x66, 0xBB, 0x23, 0x66, 0xBB, 0x2B, 0x6E, 
   0xC3, 0x2B, 0x6E, 0xC3, 0x2F, 0x75, 0xC9, 0x2F, 0x75, 0xC9, 0x23, 0x69, 0xBD, 0x23, 0x69, 0xBD, 
   0x24, 0x6C, 0xC0, 0x24, 0x6C, 0xC0, 0x26, 0x6C, 0xC0, 0x26, 0x6C, 0xC0, 0x22, 0x68, 0xBC, 0x22, 
   0x68, 0xBC, 0x27, 0x6D, 0xC1, 0x27, 0x6D, 0xC1, 0x28, 0x6E, 0xC2, 0x28, 0x6E, 0xC2, 0x21, 0x67, 
   0xBB, 0x21, 0x67, 0xBB, 0x21, 0x67, 0xBB, 0x21, 0x67, 0xBB, 0x23, 0x69, 0xBD, 0x23, 0x69, 0xBD, 
   0x1D, 0x63, 0xB7, 0x1D, 0x63, 0xB7, 0x18, 0x61, 0xB7, 0x18, 0x61, 0xB7, 0x20, 0x69, 0xBF, 0x20, 
   0x69, 0xBF, 0x1C, 0x65, 0xBB, 0x1C, 0x65, 0xBB, 0x1C, 0x65, 0xBB, 0x1C, 0x65, 0xBB, 0x21, 0x6A, 
   0xC0, 0x21, 0x6A, 0xC0, 0x21, 0x6A, 0xC0, 0x21, 0x6A, 0xC0, 0x1E, 0x67, 0xBD, 0x1E, 0x67, 0xBD, 
   0x16, 0x5F, 0xB5, 0x16, 0x5F, 0xB5, 0x1B, 0x64, 0xBA, 0x1B, 0x64, 0xBA, 0x1B, 0x64, 0xBA, 0x1B, 
   0x64, 0xBA, 0x1B, 0x66, 0xBC, 0x1B, 0x66, 0xBC, 0x20, 0x6B, 0xC1, 0x20, 0x6B, 0xC1, 0x23, 0x70, 
   0xC6, 0x23, 0x70, 0xC6, 0x23, 0x72, 0xC9, 0x23, 0x72, 0xC9, 0x21, 0x70, 0xC7, 0x21, 0x70, 0xC7, 
   0x1E, 0x6D, 0xC4, 0x1E, 0x6D, 0xC4, 0x20, 0x69, 0xC4, 0x20, 0x69, 0xC4, 0x20, 0x69, 0xC4, 0x20, 
   0x69, 0xC4, 0x15, 0x5F, 0xB7, 0x15, 0x5F, 0xB7, 0x30, 0x7A, 0xD2, 0x30, 0x7A, 0xD2, 0x32, 0x7D, 
   0xD3, 0x32, 0x7D, 0xD3, 0x1A, 0x66, 0xB9, 0x1A, 0x66, 0xB9, 0x29, 0x75, 0xC8, 0x29, 0x75, 0xC8, 
   0x2D, 0x79, 0xCC, 0x2D, 0x79, 0xCC, 0x3C, 0x7F, 0xDC, 0x3C, 0x7F, 0xDC, 0x3C, 0x80, 0xD9, 0x3C, 
   0x80, 0xD9, 0x3B, 0x81, 0xD4, 0x3B, 0x81, 0xD4, 0x25, 0x6D, 0xBB, 0x25, 0x6D, 0xBB, 0x34, 0x7C, 
   0xC9, 0x34, 0x7C, 0xC9, 0x3E, 0x86, 0xD4, 0x3E, 0x86, 0xD4, 0x4A, 0x91, 0xE1, 0x4A, 0x91, 0xE1, 
   0x3D, 0x83, 0xD6, 0x3D, 0x83, 0xD6, 0x30, 0x83, 0xD1, 0x30, 0x83, 0xD1, 0x37, 0x89, 0xD7, 0x37, 
   0x89, 0xD7, 0x36, 0x88, 0xD6, 0x36, 0x88, 0xD6, 0x36, 0x85, 0xD4, 0x36, 0x85, 0xD4, 0x2B, 0x7A, 
   0xC9, 0x2B, 0x7A, 0xC9, 0x44, 0x91, 0xE0, 0x44, 0x91, 0xE0, 0x19, 0x66, 0xB5, 0x19, 0x66, 0xB5, 
   0x39, 0x84, 0xD3, 0x39, 0x84, 0xD3, 0x1F, 0x6C, 0xC2, 0x1F, 0x6C, 0xC2, 0x1B, 0x68, 0xBE, 0x1B, 
   0x68, 0xBE, 0x1A, 0x65, 0xBB, 0x1A, 0x65, 0xBB, 0x1A, 0x65, 0xBB, 0x1A, 0x65, 0xBB, 0x1B, 0x66, 
   0xBC, 0x1B, 0x66, 0xBC, 0x1B, 0x66, 0xBC, 0x1B, 0x66, 0xBC, 0x19, 0x66, 0xBC, 0x19, 0x66, 0xBC, 
   0x18, 0x65, 0xBB, 0x18, 0x65, 0xBB, 0x1E, 0x66, 0xBA, 0x1E, 0x66, 0xBA, 0x16, 0x5C, 0xB0, 0x16, 
   0x5C, 0xB0, 0x1E, 0x64, 0xB8, 0x1E, 0x64, 0xB8, 0x23, 0x66, 0xBB, 0x23, 0x66, 0xBB, 0x2B, 0x6E, 
   0xC3, 0x2B, 0x6E, 0xC3, 0x2F, 0x75, 0xC9, 0x2F, 0x75, 0xC9, 0x23, 0x69, 0xBD, 0x23, 0x69, 0xBD, 
   0x24, 0x6C, 0xC0, 0x24, 0x6C, 0xC0, 0x26, 0x6C, 0xC0, 0x26, 0x6C, 0xC0, 0x22, 0x68, 0xBC, 0x22, 
   0x68, 0xBC, 0x27, 0x6D, 0xC1, 0x27, 0x6D, 0xC1, 0x28, 0x6E, 0xC2, 0x28, 0x6E, 0xC2, 0x21, 0x67, 
   0xBB, 0x21, 0x67, 0xBB, 0x21, 0x67, 0xBB, 0x21, 0x67, 0xBB, 0x23, 0x69, 0xBD, 0x23, 0x69, 0xBD, 
   0x1D, 0x63, 0xB7, 0x1D, 0x63, 0xB7, 0x30, 0x7A, 0xCC, 0x30, 0x7A, 0xCC, 0x2A, 0x74, 0xC6, 0x2A, 
   0x74, 0xC6, 0x2A, 0x74, 0xC6, 0x2A, 0x74, 0xC6, 0x27, 0x71, 0xC3, 0x27, 0x71, 0xC3, 0x25, 0x6F, 
   0xC1, 0x25, 0x6F, 0xC1, 0x28, 0x72, 0xC4, 0x28, 0x72, 0xC4, 0x21, 0x6B, 0xBD, 0x21, 0x6B, 0xBD, 
   0x18, 0x62, 0xB4, 0x18, 0x62, 0xB4, 0x1E, 0x69, 0xBF, 0x1E, 0x69, 0xBF, 0x20, 0x6B, 0xC1, 0x20, 
   0x6B, 0xC1, 0x22, 0x6D, 0xC3, 0x22, 0x6D, 0xC3, 0x1F, 0x6C, 0xC2, 0x1F, 0x6C, 0xC2, 0x1C, 0x6C, 
   0xC1, 0x1C, 0x6C, 0xC1, 0x1C, 0x6C, 0xBF, 0x1C, 0x6C, 0xBF, 0x1E, 0x70, 0xC2, 0x1E, 0x70, 0xC2, 
   0x22, 0x74, 0xC6, 0x22, 0x74, 0xC6, 0x00, 0x4E, 0xA5, 0x00, 0x4E, 0xA5, 0x1D, 0x6C, 0xC3, 0x1D, 
   0x6C, 0xC3, 0x18, 0x67, 0xBE, 0x18, 0x67, 0xBE, 0x1F, 0x6F, 0xC4, 0x1F, 0x6F, 0xC4, 0x24, 0x74, 
   0xC7, 0x24, 0x74, 0xC7, 0x27, 0x77, 0xCA, 0x27, 0x77, 0xCA, 0x30, 0x81, 0xD2, 0x30, 0x81, 0xD2, 
   0x14, 0x65, 0xB6, 0x14, 0x65, 0xB6, 0x27, 0x6C, 0xC3, 0x27, 0x6C, 0xC3, 0x31, 0x77, 0xCB, 0x31, 
   0x77, 0xCB, 0x3A, 0x80, 0xD3, 0x3A, 0x80, 0xD3, 0x26, 0x6D, 0xBD, 0x26, 0x6D, 0xBD, 0x35, 0x7D, 
   0xCB, 0x35, 0x7D, 0xCB, 0x3E, 0x85, 0xD5, 0x3E, 0x85, 0xD5, 0x4C, 0x92, 0xE5, 0x4C, 0x92, 0xE5, 
   0x40, 0x86, 0xD9, 0x40, 0x86, 0xD9, 0x2B, 0x7E, 0xCC, 0x2B, 0x7E, 0xCC, 0x2B, 0x7D, 0xCB, 0x2B, 
   0x7D, 0xCB, 0x3F, 0x91, 0xDF, 0x3F, 0x91, 0xDF, 0x2B, 0x7A, 0xC9, 0x2B, 0x7A, 0xC9, 0x4D, 0x9C, 
   0xEB, 0x4D, 0x9C, 0xEB, 0x3D, 0x8A, 0xD9, 0x3D, 0x8A, 0xD9, 0x30, 0x7D, 0xCC, 0x30, 0x7D, 0xCC, 
   0x35, 0x80, 0xCF, 0x35, 0x80, 0xCF, 0x1D, 0x6A, 0xC0, 0x1D, 0x6A, 0xC0, 0x23, 0x70, 0xC6, 0x23, 
   0x70, 0xC6, 0x28, 0x78, 0xCD, 0x28, 0x78, 0xCD, 0x29, 0x79, 0xCE, 0x29, 0x79, 0xCE, 0x25, 0x75, 
   0xCA, 0x25, 0x75, 0xCA, 0x20, 0x70, 0xC5, 0x20, 0x70, 0xC5, 0x1D, 0x6A, 0xC0, 0x1D, 0x6A, 0xC0, 
   0x1A, 0x67, 0xBD, 0x1A, 0x67, 0xBD, 0x29, 0x6C, 0xC1, 0x29, 0x6C, 0xC1, 0x1C, 0x62, 0xB6, 0x1C, 
   0x62, 0xB6, 0x25, 0x6B, 0xBF, 0x25, 0x6B, 0xBF, 0x28, 0x70, 0xC4, 0x28, 0x70, 0xC4, 0x30, 0x78, 
   0xCC, 0x30, 0x78, 0xCC, 0x37, 0x7D, 0xD1, 0x37, 0x7D, 0xD1, 0x29, 0x6F, 0xC3, 0x29, 0x6F, 0xC3, 
   0x2E, 0x71, 0xC6, 0x2E, 0x71, 0xC6, 0x2D, 0x73, 0xC7, 0x2D, 0x73, 0xC7, 0x25, 0x6B, 0xBF, 0x25, 
   0x6B, 0xBF, 0x25, 0x6B, 0xBF, 0x25, 0x6B, 0xBF, 0x24, 0x6A, 0xBE, 0x24, 0x6A, 0xBE, 0x1B, 0x61, 
   0xB5, 0x1B, 0x61, 0xB5, 0x1C, 0x62, 0xB6, 0x1C, 0x62, 0xB6, 0x1F, 0x65, 0xB9, 0x1F, 0x65, 0xB9, 
   0x18, 0x5E, 0xB2, 0x18, 0x5E, 0xB2, 0x30, 0x7A, 0xCC, 0x30, 0x7A, 0xCC, 0x2A, 0x74, 0xC6, 0x2A, 
   0x74, 0xC6, 0x2A, 0x74, 0xC6, 0x2A, 0x74, 0xC6, 0x27, 0x71, 0xC3, 0x27, 0x71, 0xC3, 0x25, 0x6F, 
   0xC1, 0x25, 0x6F, 0xC1, 0x28, 0x72, 0xC4, 0x28, 0x72, 0xC4, 0x21, 0x6B, 0xBD, 0x21, 0x6B, 0xBD, 
   0x18, 0x62, 0xB4, 0x18, 0x62, 0xB4, 0x1E, 0x69, 0xBF, 0x1E, 0x69, 0xBF, 0x20, 0x6B, 0xC1, 0x20, 
   0x6B, 0xC1, 0x22, 0x6D, 0xC3, 0x22, 0x6D, 0xC3, 0x1F, 0x6C, 0xC2, 0x1F, 0x6C, 0xC2, 0x1C, 0x6C, 
   0xC1, 0x1C, 0x6C, 0xC1, 0x1C, 0x6C, 0xBF, 0x1C, 0x6C, 0xBF, 0x1E, 0x70, 0xC2, 0x1E, 0x70, 0xC2, 
   0x22, 0x74, 0xC6, 0x22, 0x74, 0xC6, 0x00, 0x4E, 0xA5, 0x00, 0x4E, 0xA5, 0x1D, 0x6C, 0xC3, 0x1D, 
   0x6C, 0xC3, 0x18, 0x67, 0xBE, 0x18, 0x67, 0xBE, 0x1F, 0x6F, 0xC4, 0x1F, 0x6F, 0xC4, 0x24, 0x74, 
   0xC7, 0x24, 0x74, 0xC7, 0x27, 0x77, 0xCA, 0x27, 0x77, 0xCA, 0x30, 0x81, 0xD2, 0x30, 0x81, 0xD2, 
   0x14, 0x65, 0xB6, 0x14, 0x65, 0xB6, 0x27, 0x6C, 0xC3, 0x27, 0x6C, 0xC3, 0x31, 0x77, 0xCB, 0x31, 
   0x77, 0xCB, 0x3A, 0x80, 0xD3, 0x3A, 0x80, 0xD3, 0x26, 0x6D, 0xBD, 0x26, 0x6D, 0xBD, 0x35, 0x7D, 
   0xCB, 0x35, 0x7D, 0xCB, 0x3E, 0x85, 0xD5, 0x3E, 0x85, 0xD5, 0x4C, 0x92, 0xE5, 0x4C, 0x92, 0xE5, 
   0x40, 0x86, 0xD9, 0x40, 0x86, 0xD9, 0x2B, 0x7E, 0xCC, 0x2B, 0x7E, 0xCC, 0x2B, 0x7D, 0xCB, 0x2B, 
   0x7D, 0xCB, 0x3F, 0x91, 0xDF, 0x3F, 0x91, 0xDF, 0x2B, 0x7A, 0xC9, 0x2B, 0x7A, 0xC9, 0x4D, 0x9C, 
   0xEB, 0x4D, 0x9C, 0xEB, 0x3D, 0x8A, 0xD9, 0x3D, 0x8A, 0xD9, 0x30, 0x7D, 0xCC, 0x30, 0x7D, 0xCC, 
   0x35, 0x80, 0xCF, 0x35, 0x80, 0xCF, 0x1D, 0x6A, 0xC0, 0x1D, 0x6A, 0xC0, 0x23, 0x70, 0xC6, 0x23, 
   0x70, 0xC6, 0x28, 0x78, 0xCD, 0x28, 0x78, 0xCD, 0x29, 0x79, 0xCE, 0x29, 0x79, 0xCE, 0x25, 0x75, 
   0xCA, 0x25, 0x75, 0xCA, 0x20, 0x70, 0xC5, 0x20, 0x70, 0xC5, 0x1D, 0x6A, 0xC0, 0x1D, 0x6A, 0xC0, 
   0x1A, 0x67, 0xBD, 0x1A, 0x67, 0xBD, 0x29, 0x6C, 0xC1, 0x29, 0x6C, 0xC1, 0x1C, 0x62, 0xB6, 0x1C, 
   0x62, 0xB6, 0x25, 0x6B, 0xBF, 0x25, 0x6B, 0xBF, 0x28, 0x70, 0xC4, 0x28, 0x70, 0xC4, 0x30, 0x78, 
   0xCC, 0x30, 0x78, 0xCC, 0x37, 0x7D, 0xD1, 0x37, 0x7D, 0xD1, 0x29, 0x6F, 0xC3, 0x29, 0x6F, 0xC3, 
   0x2E, 0x71, 0xC6, 0x2E, 0x71, 0xC6, 0x2D, 0x73, 0xC7, 0x2D, 0x73, 0xC7, 0x25, 0x6B, 0xBF, 0x25, 
   0x6B, 0xBF, 0x25, 0x6B, 0xBF, 0x25, 0x6B, 0xBF, 0x24, 0x6A, 0xBE, 0x24, 0x6A, 0xBE, 0x1B, 0x61, 
   0xB5, 0x1B, 0x61, 0xB5, 0x1C, 0x62, 0xB6, 0x1C, 0x62, 0xB6, 0x1F, 0x65, 0xB9, 0x1F, 0x65, 0xB9, 
   0x18, 0x5E, 0xB2, 0x18, 0x5E, 0xB2, 0x34, 0x7F, 0xCE, 0x34, 0x7F, 0xCE, 0x22, 0x6D, 0xBC, 0x22, 
   0x6D, 0xBC, 0x29, 0x74, 0xC3, 0x29, 0x74, 0xC3, 0x24, 0x6F, 0xBE, 0x24, 0x6F, 0xBE, 0x1E, 0x69, 
   0xB8, 0x1E, 0x69, 0xB8, 0x23, 0x6E, 0xBD, 0x23, 0x6E, 0xBD, 0x17, 0x62, 0xB1, 0x17, 0x62, 0xB1, 
   0x0D, 0x58, 0xA7, 0x0D, 0x58, 0xA7, 0x19, 0x62, 0xB8, 0x19, 0x62, 0xB8, 0x1D, 0x66, 0xBC, 0x1D, 
   0x66, 0xBC, 0x1D, 0x68, 0xBE, 0x1D, 0x68, 0xBE, 0x1B, 0x67, 0xBA, 0x1B, 0x67, 0xBA, 0x15, 0x63, 
   0xB6, 0x15, 0x63, 0xB6, 0x14, 0x65, 0xB6, 0x14, 0x65, 0xB6, 0x1B, 0x6C, 0xBD, 0x1B, 0x6C, 0xBD, 
   0x22, 0x73, 0xC4, 0x22, 0x73, 0xC4, 0x16, 0x65, 0xBC, 0x16, 0x65, 0xBC, 0x23, 0x73, 0xC8, 0x23, 
   0x73, 0xC8, 0x20, 0x70, 0xC5, 0x20, 0x70, 0xC5, 0x20, 0x70, 0xC3, 0x20, 0x70, 0xC3, 0x22, 0x72, 
   0xC5, 0x22, 0x72, 0xC5, 0x24, 0x75, 0xC6, 0x24, 0x75, 0xC6, 0x27, 0x78, 0xC9, 0x27, 0x78, 0xC9, 
   0x19, 0x6A, 0xBB, 0x19, 0x6A, 0xBB, 0x19, 0x61, 0xB5, 0x19, 0x61, 0xB5, 0x29, 0x72, 0xC4, 0x29, 
   0x72, 0xC4, 0x38, 0x81, 0xD3, 0x38, 0x81, 0xD3, 0x27, 0x70, 0xC2, 0x27, 0x70, 0xC2, 0x35, 0x7E, 
   0xD0, 0x35, 0x7E, 0xD0, 0x3B, 0x84, 0xD6, 0x3B, 0x84, 0xD6, 0x41, 0x8A, 0xDC, 0x41, 0x8A, 0xDC, 
   0x2D, 0x76, 0xC8, 0x2D, 0x76, 0xC8, 0x18, 0x6B, 0xB9, 0x18, 0x6B, 0xB9, 0x2B, 0x7D, 0xCB, 0x2B, 
   0x7D, 0xCB, 0x37, 0x89, 0xD7, 0x37, 0x89, 0xD7, 0x36, 0x85, 0xD4, 0x36, 0x85, 0xD4, 0x48, 0x97, 
   0xE6, 0x48, 0x97, 0xE6, 0x44, 0x91, 0xE0, 0x44, 0x91, 0xE0, 0x3D, 0x8A, 0xD9, 0x3D, 0x8A, 0xD9, 
   0x4D, 0x98, 0xE7, 0x4D, 0x98, 0xE7, 0x24, 0x6D, 0xC1, 0x24, 0x6D, 0xC1, 0x29, 0x75, 0xC8, 0x29, 
   0x75, 0xC8, 0x29, 0x77, 0xCA, 0x29, 0x77, 0xCA, 0x22, 0x72, 0xC5, 0x22, 0x72, 0xC5, 0x1C, 0x6C, 
   0xBF, 0x1C, 0x6C, 0xBF, 0x1D, 0x6B, 0xBE, 0x1D, 0x6B, 0xBE, 0x20, 0x6C, 0xBF, 0x20, 0x6C, 0xBF, 
   0x22, 0x6B, 0xBF, 0x22, 0x6B, 0xBF, 0x25, 0x67, 0xBA, 0x25, 0x67, 0xBA, 0x1D, 0x61, 0xB4, 0x1D, 
   0x61, 0xB4, 0x26, 0x6F, 0xC1, 0x26, 0x6F, 0xC1, 0x24, 0x6D, 0xC1, 0x24, 0x6D, 0xC1, 0x1C, 0x65, 
   0xB9, 0x1C, 0x65, 0xB9, 0x16, 0x5D, 0xB4, 0x16, 0x5D, 0xB4, 0x0E, 0x51, 0xA8, 0x0E, 0x51, 0xA8, 
   0x1B, 0x5B, 0xB3, 0x1B, 0x5B, 0xB3, 0x26, 0x6C, 0xC0, 0x26, 0x6C, 0xC0, 0x1D, 0x63, 0xB7, 0x1D, 
   0x63, 0xB7, 0x1C, 0x62, 0xB6, 0x1C, 0x62, 0xB6, 0x1C, 0x62, 0xB6, 0x1C, 0x62, 0xB6, 0x16, 0x5C, 
   0xB0, 0x16, 0x5C, 0xB0, 0x18, 0x5E, 0xB2, 0x18, 0x5E, 0xB2, 0x1C, 0x62, 0xB6, 0x1C, 0x62, 0xB6, 
   0x16, 0x5C, 0xB0, 0x16, 0x5C, 0xB0, 0x34, 0x7F, 0xCE, 0x34, 0x7F, 0xCE, 0x22, 0x6D, 0xBC, 0x22, 
   0x6D, 0xBC, 0x29, 0x74, 0xC3, 0x29, 0x74, 0xC3, 0x24, 0x6F, 0xBE, 0x24, 0x6F, 0xBE, 0x1E, 0x69, 
   0xB8, 0x1E, 0x69, 0xB8, 0x23, 0x6E, 0xBD, 0x23, 0x6E, 0xBD, 0x17, 0x62, 0xB1, 0x17, 0x62, 0xB1, 
   0x0D, 0x58, 0xA7, 0x0D, 0x58, 0xA7, 0x19, 0x62, 0xB8, 0x19, 0x62, 0xB8, 0x1D, 0x66, 0xBC, 0x1D, 
   0x66, 0xBC, 0x1D, 0x68, 0xBE, 0x1D, 0x68, 0xBE, 0x1B, 0x67, 0xBA, 0x1B, 0x67, 0xBA, 0x15, 0x63, 
   0xB6, 0x15, 0x63, 0xB6, 0x14, 0x65, 0xB6, 0x14, 0x65, 0xB6, 0x1B, 0x6C, 0xBD, 0x1B, 0x6C, 0xBD, 
   0x22, 0x73, 0xC4, 0x22, 0x73, 0xC4, 0x16, 0x65, 0xBC, 0x16, 0x65, 0xBC, 0x23, 0x73, 0xC8, 0x23, 
   0x73, 0xC8, 0x20, 0x70, 0xC5, 0x20, 0x70, 0xC5, 0x20, 0x70, 0xC3, 0x20, 0x70, 0xC3, 0x22, 0x72, 
   0xC5, 0x22, 0x72, 0xC5, 0x24, 0x75, 0xC6, 0x24, 0x75, 0xC6, 0x27, 0x78, 0xC9, 0x27, 0x78, 0xC9, 
   0x19, 0x6A, 0xBB, 0x19, 0x6A, 0xBB, 0x19, 0x61, 0xB5, 0x19, 0x61, 0xB5, 0x29, 0x72, 0xC4, 0x29, 
   0x72, 0xC4, 0x38, 0x81, 0xD3, 0x38, 0x81, 0xD3, 0x27, 0x70, 0xC2, 0x27, 0x70, 0xC2, 0x35, 0x7E, 
   0xD0, 0x35, 0x7E, 0xD0, 0x3B, 0x84, 0xD6, 0x3B, 0x84, 0xD6, 0x41, 0x8A, 0xDC, 0x41, 0x8A, 0xDC, 
   0x2D, 0x76, 0xC8, 0x2D, 0x76, 0xC8, 0x18, 0x6B, 0xB9, 0x18, 0x6B, 0xB9, 0x2B, 0x7D, 0xCB, 0x2B, 
   0x7D, 0xCB, 0x37, 0x89, 0xD7, 0x37, 0x89, 0xD7, 0x36, 0x85, 0xD4, 0x36, 0x85, 0xD4, 0x48, 0x97, 
   0xE6, 0x48, 0x97, 0xE6, 0x44, 0x91, 0xE0, 0x44, 0x91, 0xE0, 0x3D, 0x8A, 0xD9, 0x3D, 0x8A, 0xD9, 
   0x4D, 0x98, 0xE7, 0x4D, 0x98, 0xE7, 0x24, 0x6D, 0xC1, 0x24, 0x6D, 0xC1, 0x29, 0x75, 0xC8, 0x29, 
   0x75, 0xC8, 0x29, 0x77, 0xCA, 0x29, 0x77, 0xCA, 0x22, 0x72, 0xC5, 0x22, 0x72, 0xC5, 0x1C, 0x6C, 
   0xBF, 0x1C, 0x6C, 0xBF, 0x1D, 0x6B, 0xBE, 0x1D, 0x6B, 0xBE, 0x20, 0x6C, 0xBF, 0x20, 0x6C, 0xBF, 
   0x22, 0x6B, 0xBF, 0x22, 0x6B, 0xBF, 0x25, 0x67, 0xBA, 0x25, 0x67, 0xBA, 0x1D, 0x61, 0xB4, 0x1D, 
   0x61, 0xB4, 0x26, 0x6F, 0xC1, 0x26, 0x6F, 0xC1, 0x24, 0x6D, 0xC1, 0x24, 0x6D, 0xC1, 0x1C, 0x65, 
   0xB9, 0x1C, 0x65, 0xB9, 0x16, 0x5D, 0xB4, 0x16, 0x5D, 0xB4, 0x0E, 0x51, 0xA8, 0x0E, 0x51, 0xA8, 
   0x1B, 0x5B, 0xB3, 0x1B, 0x5B, 0xB3, 0x26, 0x6C, 0xC0, 0x26, 0x6C, 0xC0, 0x1D, 0x63, 0xB7, 0x1D, 
   0x63, 0xB7, 0x1C, 0x62, 0xB6, 0x1C, 0x62, 0xB6, 0x1C, 0x62, 0xB6, 0x1C, 0x62, 0xB6, 0x16, 0x5C, 
   0xB0, 0x16, 0x5C, 0xB0, 0x18, 0x5E, 0xB2, 0x18, 0x5E, 0xB2, 0x1C, 0x62, 0xB6, 0x1C, 0x62, 0xB6, 
   0x16, 0x5C, 0xB0, 0x16, 0x5C, 0xB0, 0x32, 0x7A, 0xC8, 0x32, 0x7A, 0xC8, 0x1B, 0x63, 0xB1, 0x1B, 
   0x63, 0xB1, 0x2B, 0x73, 0xC1, 0x2B, 0x73, 0xC1, 0x2B, 0x73, 0xC1, 0x2B, 0x73, 0xC1, 0x26, 0x6E, 
   0xBC, 0x26, 0x6E, 0xBC, 0x2F, 0x77, 0xC5, 0x2F, 0x77, 0xC5, 0x20, 0x68, 0xB6, 0x20, 0x68, 0xB6, 
   0x16, 0x5E, 0xAC, 0x16, 0x5E, 0xAC, 0x1D, 0x64, 0xBC, 0x1D, 0x64, 0xBC, 0x20, 0x67, 0xBE, 0x20, 
   0x67, 0xBE, 0x22, 0x6B, 0xC1, 0x22, 0x6B, 0xC1, 0x23, 0x6C, 0xC0, 0x23, 0x6C, 0xC0, 0x21, 0x6D, 
   0xBF, 0x21, 0x6D, 0xBF, 0x24, 0x70, 0xC2, 0x24, 0x70, 0xC2, 0x27, 0x76, 0xC5, 0x27, 0x76, 0xC5, 
   0x2B, 0x7A, 0xC9, 0x2B, 0x7A, 0xC9, 0x28, 0x75, 0xCB, 0x28, 0x75, 0xCB, 0x1B, 0x68, 0xBE, 0x1B, 
   0x68, 0xBE, 0x1C, 0x69, 0xBF, 0x1C, 0x69, 0xBF, 0x1A, 0x68, 0xBB, 0x1A, 0x68, 0xBB, 0x18, 0x67, 
   0xB8, 0x18, 0x67, 0xB8, 0x16, 0x65, 0xB6, 0x16, 0x65, 0xB6, 0x12, 0x61, 0xB0, 0x12, 0x61, 0xB0, 
   0x1E, 0x6D, 0xBC, 0x1E, 0x6D, 0xBC, 0x23, 0x70, 0xBF, 0x23, 0x70, 0xBF, 0x2C, 0x79, 0xC8, 0x2C, 
   0x79, 0xC8, 0x33, 0x7F, 0xD1, 0x33, 0x7F, 0xD1, 0x1F, 0x6B, 0xBD, 0x1F, 0x6B, 0xBD, 0x30, 0x7C, 
   0xCF, 0x30, 0x7C, 0xCF, 0x38, 0x84, 0xD6, 0x38, 0x84, 0xD6, 0x3A, 0x86, 0xD8, 0x3A, 0x86, 0xD8, 
   0x21, 0x6D, 0xBF, 0x21, 0x6D, 0xBF, 0x32, 0x85, 0xD3, 0x32, 0x85, 0xD3, 0x40, 0x92, 0xE0, 0x40, 
   0x92, 0xE0, 0x37, 0x89, 0xD7, 0x37, 0x89, 0xD7, 0x3B, 0x8A, 0xD9, 0x3B, 0x8A, 0xD9, 0x29, 0x78, 
   0xC7, 0x29, 0x78, 0xC7, 0x42, 0x8F, 0xDE, 0x42, 0x8F, 0xDE, 0x20, 0x6D, 0xBC, 0x20, 0x6D, 0xBC, 
   0x43, 0x8E, 0xDD, 0x43, 0x8E, 0xDD, 0x25, 0x6B, 0xBF, 0x25, 0x6B, 0xBF, 0x23, 0x6B, 0xBF, 0x23, 
   0x6B, 0xBF, 0x18, 0x66, 0xB9, 0x18, 0x66, 0xB9, 0x0C, 0x5C, 0xAF, 0x0C, 0x5C, 0xAF, 0x0A, 0x5A, 
   0xAD, 0x0A, 0x5A, 0xAD, 0x11, 0x5F, 0xB2, 0x11, 0x5F, 0xB2, 0x1A, 0x62, 0xB6, 0x1A, 0x62, 0xB6, 
   0x1C, 0x62, 0xB6, 0x1C, 0x62, 0xB6, 0x17, 0x59, 0xAA, 0x17, 0x59, 0xAA, 0x10, 0x55, 0xA5, 0x10, 
   0x55, 0xA5, 0x1E, 0x67, 0xB9, 0x1E, 0x67, 0xB9, 0x23, 0x6C, 0xC0, 0x23, 0x6C, 0xC0, 0x23, 0x6C, 
   0xC0, 0x23, 0x6C, 0xC0, 0x22, 0x69, 0xC0, 0x22, 0x69, 0xC0, 0x1E, 0x60, 0xB9, 0x1E, 0x60, 0xB9, 
   0x2D, 0x6C, 0xC6, 0x2D, 0x6C, 0xC6, 0x23, 0x69, 0xBD, 0x23, 0x69, 0xBD, 0x1B, 0x61, 0xB5, 0x1B, 
   0x61, 0xB5, 0x1D, 0x63, 0xB7, 0x1D, 0x63, 0xB7, 0x20, 0x66, 0xBA, 0x20, 0x66, 0xBA, 0x1C, 0x62, 
   0xB6, 0x1C, 0x62, 0xB6, 0x20, 0x66, 0xBA, 0x20, 0x66, 0xBA, 0x23, 0x69, 0xBD, 0x23, 0x69, 0xBD, 
   0x1C, 0x62, 0xB6, 0x1C, 0x62, 0xB6, 0x32, 0x7A, 0xC8, 0x32, 0x7A, 0xC8, 0x1B, 0x63, 0xB1, 0x1B, 
   0x63, 0xB1, 0x2B, 0x73, 0xC1, 0x2B, 0x73, 0xC1, 0x2B, 0x73, 0xC1, 0x2B, 0x73, 0xC1, 0x26, 0x6E, 
   0xBC, 0x26, 0x6E, 0xBC, 0x2F, 0x77, 0xC5, 0x2F, 0x77, 0xC5, 0x20, 0x68, 0xB6, 0x20, 0x68, 0xB6, 
   0x16, 0x5E, 0xAC, 0x16, 0x5E, 0xAC, 0x1D, 0x64, 0xBC, 0x1D, 0x64, 0xBC, 0x20, 0x67, 0xBE, 0x20, 
   0x67, 0xBE, 0x22, 0x6B, 0xC1, 0x22, 0x6B, 0xC1, 0x23, 0x6C, 0xC0, 0x23, 0x6C, 0xC0, 0x21, 0x6D, 
   0xBF, 0x21, 0x6D, 0xBF, 0x24, 0x70, 0xC2, 0x24, 0x70, 0xC2, 0x27, 0x76, 0xC5, 0x27, 0x76, 0xC5, 
   0x2B, 0x7A, 0xC9, 0x2B, 0x7A, 0xC9, 0x28, 0x75, 0xCB, 0x28, 0x75, 0xCB, 0x1B, 0x68, 0xBE, 0x1B, 
   0x68, 0xBE, 0x1C, 0x69, 0xBF, 0x1C, 0x69, 0xBF, 0x1A, 0x68, 0xBB, 0x1A, 0x68, 0xBB, 0x18, 0x67, 
   0xB8, 0x18, 0x67, 0xB8, 0x16, 0x65, 0xB6, 0x16, 0x65, 0xB6, 0x12, 0x61, 0xB0, 0x12, 0x61, 0xB0, 
   0x1E, 0x6D, 0xBC, 0x1E, 0x6D, 0xBC, 0x23, 0x70, 0xBF, 0x23, 0x70, 0xBF, 0x2C, 0x79, 0xC8, 0x2C, 
   0x79, 0xC8, 0x33, 0x7F, 0xD1, 0x33, 0x7F, 0xD1, 0x1F, 0x6B, 0xBD, 0x1F, 0x6B, 0xBD, 0x30, 0x7C, 
   0xCF, 0x30, 0x7C, 0xCF, 0x38, 0x84, 0xD6, 0x38, 0x84, 0xD6, 0x3A, 0x86, 0xD8, 0x3A, 0x86, 0xD8, 
   0x21, 0x6D, 0xBF, 0x21, 0x6D, 0xBF, 0x32, 0x85, 0xD3, 0x32, 0x85, 0xD3, 0x40, 0x92, 0xE0, 0x40, 
   0x92, 0xE0, 0x37, 0x89, 0xD7, 0x37, 0x89, 0xD7, 0x3B, 0x8A, 0xD9, 0x3B, 0x8A, 0xD9, 0x29, 0x78, 
   0xC7, 0x29, 0x78, 0xC7, 0x42, 0x8F, 0xDE, 0x42, 0x8F, 0xDE, 0x20, 0x6D, 0xBC, 0x20, 0x6D, 0xBC, 
   0x43, 0x8E, 0xDD, 0x43, 0x8E, 0xDD, 0x25, 0x6B, 0xBF, 0x25, 0x6B, 0xBF, 0x23, 0x6B, 0xBF, 0x23, 
   0x6B, 0xBF, 0x18, 0x66, 0xB9, 0x18, 0x66, 0xB9, 0x0C, 0x5C, 0xAF, 0x0C, 0x5C, 0xAF, 0x0A, 0x5A, 
   0xAD, 0x0A, 0x5A, 0xAD, 0x11, 0x5F, 0xB2, 0x11, 0x5F, 0xB2, 0x1A, 0x62, 0xB6, 0x1A, 0x62, 0xB6, 
   0x1C, 0x62, 0xB6, 0x1C, 0x62, 0xB6, 0x17, 0x59, 0xAA, 0x17, 0x59, 0xAA, 0x10, 0x55, 0xA5, 0x10, 
   0x55, 0xA5, 0x1E, 0x67, 0xB9, 0x1E, 0x67, 0xB9, 0x23, 0x6C, 0xC0, 0x23, 0x6C, 0xC0, 0x23, 0x6C, 
   0xC0, 0x23, 0x6C, 0xC0, 0x22, 0x69, 0xC0, 0x22, 0x69, 0xC0, 0x1E, 0x60, 0xB9, 0x1E, 0x60, 0xB9, 
   0x2D, 0x6C, 0xC6, 0x2D, 0x6C, 0xC6, 0x23, 0x69, 0xBD, 0x23, 0x69, 0xBD, 0x1B, 0x61, 0xB5, 0x1B, 
   0x61, 0xB5, 0x1D, 0x63, 0xB7, 0x1D, 0x63, 0xB7, 0x20, 0x66, 0xBA, 0x20, 0x66, 0xBA, 0x1C, 0x62, 
   0xB6, 0x1C, 0x62, 0xB6, 0x20, 0x66, 0xBA, 0x20, 0x66, 0xBA, 0x23, 0x69, 0xBD, 0x23, 0x69, 0xBD, 
   0x1C, 0x62, 0xB6, 0x1C, 0x62, 0xB6, 0x21, 0x69, 0xB7, 0x21, 0x69, 0xB7, 0x09, 0x51, 0x9F, 0x09, 
   0x51, 0x9F, 0x21, 0x69, 0xB7, 0x21, 0x69, 0xB7, 0x28, 0x70, 0xBE, 0x28, 0x70, 0xBE, 0x26, 0x6E, 
   0xBC, 0x26, 0x6E, 0xBC, 0x34, 0x7C, 0xCA, 0x34, 0x7C, 0xCA, 0x24, 0x6C, 0xBA, 0x24, 0x6C, 0xBA, 
   0x1A, 0x62, 0xB0, 0x1A, 0x62, 0xB0, 0x1A, 0x5E, 0xB7, 0x1A, 0x5E, 0xB7, 0x1B, 0x60, 0xB7, 0x1B, 
   0x60, 0xB7, 0x1A, 0x61, 0xB8, 0x1A, 0x61, 0xB8, 0x1C, 0x64, 0xB8, 0x1C, 0x64, 0xB8, 0x1E, 0x68, 
   0xBA, 0x1E, 0x68, 0xBA, 0x1E, 0x69, 0xB8, 0x1E, 0x69, 0xB8, 0x1C, 0x6A, 0xB7, 0x1C, 0x6A, 0xB7, 
   0x1B, 0x69, 0xB6, 0x1B, 0x69, 0xB6, 0x17, 0x62, 0xB8, 0x17, 0x62, 0xB8, 0x1C, 0x67, 0xBD, 0x1C, 
   0x67, 0xBD, 0x28, 0x74, 0xC7, 0x28, 0x74, 0xC7, 0x0A, 0x56, 0xA9, 0x0A, 0x56, 0xA9, 0x0B, 0x57, 
   0xA9, 0x0B, 0x57, 0xA9, 0x2A, 0x76, 0xC8, 0x2A, 0x76, 0xC8, 0x22, 0x6F, 0xBE, 0x22, 0x6F, 0xBE, 
   0x21, 0x6E, 0xBD, 0x21, 0x6E, 0xBD, 0x2F, 0x7F, 0xCC, 0x2F, 0x7F, 0xCC, 0x2E, 0x7D, 0xCC, 0x2E, 
   0x7D, 0xCC, 0x29, 0x78, 0xC9, 0x29, 0x78, 0xC9, 0x11, 0x5F, 0xB2, 0x11, 0x5F, 0xB2, 0x2A, 0x78, 
   0xCB, 0x2A, 0x78, 0xCB, 0x3D, 0x8B, 0xDE, 0x3D, 0x8B, 0xDE, 0x45, 0x94, 0xE5, 0x45, 0x94, 0xE5, 
   0x2C, 0x7B, 0xCC, 0x2C, 0x7B, 0xCC, 0x39, 0x8C, 0xDA, 0x39, 0x8C, 0xDA, 0x24, 0x76, 0xC4, 0x24, 
   0x76, 0xC4, 0x37, 0x89, 0xD7, 0x37, 0x89, 0xD7, 0x13, 0x62, 0xB1, 0x13, 0x62, 0xB1, 0x30, 0x7F, 
   0xCE, 0x30, 0x7F, 0xCE, 0x3E, 0x8B, 0xDA, 0x3E, 0x8B, 0xDA, 0x29, 0x76, 0xC5, 0x29, 0x76, 0xC5, 
   0x47, 0x92, 0xE1, 0x47, 0x92, 0xE1, 0x30, 0x74, 0xC7, 0x30, 0x74, 0xC7, 0x32, 0x78, 0xCB, 0x32, 
   0x78, 0xCB, 0x2D, 0x79, 0xCB, 0x2D, 0x79, 0xCB, 0x26, 0x77, 0xC8, 0x26, 0x77, 0xC8, 0x27, 0x78, 
   0xC9, 0x27, 0x78, 0xC9, 0x2C, 0x78, 0xCA, 0x2C, 0x78, 0xCA, 0x29, 0x6F, 0xC2, 0x29, 0x6F, 0xC2, 
   0x20, 0x64, 0xB7, 0x20, 0x64, 0xB7, 0x2B, 0x6C, 0xBD, 0x2B, 0x6C, 0xBD, 0x17, 0x5C, 0xAC, 0x17, 
   0x5C, 0xAC, 0x1A, 0x63, 0xB5, 0x1A, 0x63, 0xB5, 0x1F, 0x6B, 0xBE, 0x1F, 0x6B, 0xBE, 0x27, 0x73, 
   0xC6, 0x27, 0x73, 0xC6, 0x27, 0x6E, 0xC5, 0x27, 0x6E, 0xC5, 0x18, 0x5A, 0xB3, 0x18, 0x5A, 0xB3, 
   0x1D, 0x5B, 0xB5, 0x1D, 0x5B, 0xB5, 0x24, 0x6A, 0xBE, 0x24, 0x6A, 0xBE, 0x1E, 0x64, 0xB8, 0x1E, 
   0x64, 0xB8, 0x23, 0x69, 0xBD, 0x23, 0x69, 0xBD, 0x28, 0x6E, 0xC2, 0x28, 0x6E, 0xC2, 0x25, 0x6B, 
   0xBF, 0x25, 0x6B, 0xBF, 0x28, 0x6E, 0xC2, 0x28, 0x6E, 0xC2, 0x29, 0x6F, 0xC3, 0x29, 0x6F, 0xC3, 
   0x20, 0x66, 0xBA, 0x20, 0x66, 0xBA, 0x21, 0x69, 0xB7, 0x21, 0x69, 0xB7, 0x09, 0x51, 0x9F, 0x09, 
   0x51, 0x9F, 0x21, 0x69, 0xB7, 0x21, 0x69, 0xB7, 0x28, 0x70, 0xBE, 0x28, 0x70, 0xBE, 0x26, 0x6E, 
   0xBC, 0x26, 0x6E, 0xBC, 0x34, 0x7C, 0xCA, 0x34, 0x7C, 0xCA, 0x24, 0x6C, 0xBA, 0x24, 0x6C, 0xBA, 
   0x1A, 0x62, 0xB0, 0x1A, 0x62, 0xB0, 0x1A, 0x5E, 0xB7, 0x1A, 0x5E, 0xB7, 0x1B, 0x60, 0xB7, 0x1B, 
   0x60, 0xB7, 0x1A, 0x61, 0xB8, 0x1A, 0x61, 0xB8, 0x1C, 0x64, 0xB8, 0x1C, 0x64, 0xB8, 0x1E, 0x68, 
   0xBA, 0x1E, 0x68, 0xBA, 0x1E, 0x69, 0xB8, 0x1E, 0x69, 0xB8, 0x1C, 0x6A, 0xB7, 0x1C, 0x6A, 0xB7, 
   0x1B, 0x69, 0xB6, 0x1B, 0x69, 0xB6, 0x17, 0x62, 0xB8, 0x17, 0x62, 0xB8, 0x1C, 0x67, 0xBD, 0x1C, 
   0x67, 0xBD, 0x28, 0x74, 0xC7, 0x28, 0x74, 0xC7, 0x0A, 0x56, 0xA9, 0x0A, 0x56, 0xA9, 0x0B, 0x57, 
   0xA9, 0x0B, 0x57, 0xA9, 0x2A, 0x76, 0xC8, 0x2A, 0x76, 0xC8, 0x22, 0x6F, 0xBE, 0x22, 0x6F, 0xBE, 
   0x21, 0x6E, 0xBD, 0x21, 0x6E, 0xBD, 0x2F, 0x7F, 0xCC, 0x2F, 0x7F, 0xCC, 0x2E, 0x7D, 0xCC, 0x2E, 
   0x7D, 0xCC, 0x29, 0x78, 0xC9, 0x29, 0x78, 0xC9, 0x11, 0x5F, 0xB2, 0x11, 0x5F, 0xB2, 0x2A, 0x78, 
   0xCB, 0x2A, 0x78, 0xCB, 0x3D, 0x8B, 0xDE, 0x3D, 0x8B, 0xDE, 0x45, 0x94, 0xE5, 0x45, 0x94, 0xE5, 
   0x2C, 0x7B, 0xCC, 0x2C, 0x7B, 0xCC, 0x39, 0x8C, 0xDA, 0x39, 0x8C, 0xDA, 0x24, 0x76, 0xC4, 0x24, 
   0x76, 0xC4, 0x37, 0x89, 0xD7, 0x37, 0x89, 0xD7, 0x13, 0x62, 0xB1, 0x13, 0x62, 0xB1, 0x30, 0x7F, 
   0xCE, 0x30, 0x7F, 0xCE, 0x3E, 0x8B, 0xDA, 0x3E, 0x8B, 0xDA, 0x29, 0x76, 0xC5, 0x29, 0x76, 0xC5, 
   0x47, 0x92, 0xE1, 0x47, 0x92, 0xE1, 0x30, 0x74, 0xC7, 0x30, 0x74, 0xC7, 0x32, 0x78, 0xCB, 0x32, 
   0x78, 0xCB, 0x2D, 0x79, 0xCB, 0x2D, 0x79, 0xCB, 0x26, 0x77, 0xC8, 0x26, 0x77, 0xC8, 0x27, 0x78, 
   0xC9, 0x27, 0x78, 0xC9, 0x2C, 0x78, 0xCA, 0x2C, 0x78, 0xCA, 0x29, 0x6F, 0xC2, 0x29, 0x6F, 0xC2, 
   0x20, 0x64, 0xB7, 0x20, 0x64, 0xB7, 0x2B, 0x6C, 0xBD, 0x2B, 0x6C, 0xBD, 0x17, 0x5C, 0xAC, 0x17, 
   0x5C, 0xAC, 0x1A, 0x63, 0xB5, 0x1A, 0x63, 0xB5, 0x1F, 0x6B, 0xBE, 0x1F, 0x6B, 0xBE, 0x27, 0x73, 
   0xC6, 0x27, 0x73, 0xC6, 0x27, 0x6E, 0xC5, 0x27, 0x6E, 0xC5, 0x18, 0x5A, 0xB3, 0x18, 0x5A, 0xB3, 
   0x1D, 0x5B, 0xB5, 0x1D, 0x5B, 0xB5, 0x24, 0x6A, 0xBE, 0x24, 0x6A, 0xBE, 0x1E, 0x64, 0xB8, 0x1E, 
   0x64, 0xB8, 0x23, 0x69, 0xBD, 0x23, 0x69, 0xBD, 0x28, 0x6E, 0xC2, 0x28, 0x6E, 0xC2, 0x25, 0x6B, 
   0xBF, 0x25, 0x6B, 0xBF, 0x28, 0x6E, 0xC2, 0x28, 0x6E, 0xC2, 0x29, 0x6F, 0xC3, 0x29, 0x6F, 0xC3, 
   0x20, 0x66, 0xBA, 0x20, 0x66, 0xBA, 0x2B, 0x7D, 0xCF, 0x2B, 0x7D, 0xCF, 0x15, 0x65, 0xB8, 0x15, 
   0x65, 0xB8, 0x2B, 0x77, 0xCA, 0x2B, 0x77, 0xCA, 0x34, 0x7D, 0xD1, 0x34, 0x7D, 0xD1, 0x2B, 0x77, 
   0xCA, 0x2B, 0x77, 0xCA, 0x2E, 0x7C, 0xCF, 0x2E, 0x7C, 0xCF, 0x22, 0x74, 0xC6, 0x22, 0x74, 0xC6, 
   0x17, 0x6B, 0xBD, 0x17, 0x6B, 0xBD, 0x16, 0x5D, 0xB8, 0x16, 0x5D, 0xB8, 0x16, 0x60, 0xB2, 0x16, 
   0x60, 0xB2, 0x11, 0x5C, 0xAA, 0x11, 0x5C, 0xAA, 0x1B, 0x65, 0xB7, 0x1B, 0x65, 0xB7, 0x1F, 0x65, 
   0xC2, 0x1F, 0x65, 0xC2, 0x22, 0x67, 0xC8, 0x22, 0x67, 0xC8, 0x02, 0x48, 0xA5, 0x02, 0x48, 0xA5, 
   0x15, 0x5E, 0xB2, 0x15, 0x5E, 0xB2, 0x21, 0x67, 0xC4, 0x21, 0x67, 0xC4, 0x1C, 0x62, 0xC0, 0x1C, 
   0x62, 0xC0, 0x0F, 0x54, 0xB5, 0x0F, 0x54, 0xB5, 0x26, 0x6D, 0xCF, 0x26, 0x6D, 0xCF, 0x13, 0x5B, 
   0xB9, 0x13, 0x5B, 0xB9, 0x28, 0x75, 0xCC, 0x28, 0x75, 0xCC, 0x0F, 0x5E, 0xAF, 0x0F, 0x5E, 0xAF, 
   0x1E, 0x71, 0xBC, 0x1E, 0x71, 0xBC, 0x2F, 0x76, 0xCE, 0x2F, 0x76, 0xCE, 0x29, 0x71, 0xC5, 0x29, 
   0x71, 0xC5, 0x25, 0x6E, 0xBE, 0x25, 0x6E, 0xBE, 0x35, 0x80, 0xCC, 0x35, 0x80, 0xCC, 0x36, 0x81, 
   0xCD, 0x36, 0x81, 0xCD, 0x33, 0x7E, 0xCA, 0x33, 0x7E, 0xCA, 0x3E, 0x87, 0xD7, 0x3E, 0x87, 0xD7, 
   0x34, 0x7D, 0xCD, 0x34, 0x7D, 0xCD, 0x33, 0x7D, 0xCF, 0x33, 0x7D, 0xCF, 0x3A, 0x8C, 0xD9, 0x3A, 
   0x8C, 0xD9, 0x46, 0xA1, 0xE4, 0x46, 0xA1, 0xE4, 0x45, 0xA7, 0xE3, 0x45, 0xA7, 0xE3, 0x40, 0xA0, 
   0xDC, 0x40, 0xA0, 0xDC, 0x45, 0x9A, 0xDE, 0x45, 0x9A, 0xDE, 0x41, 0x88, 0xD8, 0x41, 0x88, 0xD8, 
   0x2B, 0x6B, 0xC0, 0x2B, 0x6B, 0xC0, 0x31, 0x78, 0xCF, 0x31, 0x78, 0xCF, 0x22, 0x69, 0xC1, 0x22, 
   0x69, 0xC1, 0x26, 0x6B, 0xC8, 0x26, 0x6B, 0xC8, 0x19, 0x5D, 0xBC, 0x19, 0x5D, 0xBC, 0x24, 0x68, 
   0xC7, 0x24, 0x68, 0xC7, 0x19, 0x5E, 0xBB, 0x19, 0x5E, 0xBB, 0x2B, 0x72, 0xCA, 0x2B, 0x72, 0xCA, 
   0x2F, 0x76, 0xCD, 0x2F, 0x76, 0xCD, 0x2C, 0x80, 0xCC, 0x2C, 0x80, 0xCC, 0x30, 0x84, 0xD0, 0x30, 
   0x84, 0xD0, 0x23, 0x75, 0xC3, 0x23, 0x75, 0xC3, 0x1F, 0x6E, 0xBF, 0x1F, 0x6E, 0xBF, 0x23, 0x6E, 
   0xC4, 0x23, 0x6E, 0xC4, 0x11, 0x59, 0xB1, 0x11, 0x59, 0xB1, 0x0B, 0x51, 0xAC, 0x0B, 0x51, 0xAC, 
   0x29, 0x6F, 0xCA, 0x29, 0x6F, 0xCA, 0x24, 0x6B, 0xC3, 0x24, 0x6B, 0xC3, 0x13, 0x63, 0xB8, 0x13, 
   0x63, 0xB8, 0x1E, 0x74, 0xC8, 0x1E, 0x74, 0xC8, 0x12, 0x64, 0xB6, 0x12, 0x64, 0xB6, 0x27, 0x6A, 
   0xBF, 0x27, 0x6A, 0xBF, 0x23, 0x5C, 0xB1, 0x23, 0x5C, 0xB1, 0x27, 0x60, 0xB5, 0x27, 0x60, 0xB5, 
   0x23, 0x63, 0xB7, 0x23, 0x63, 0xB7, 0x2B, 0x7D, 0xCF, 0x2B, 0x7D, 0xCF, 0x15, 0x65, 0xB8, 0x15, 
   0x65, 0xB8, 0x2B, 0x77, 0xCA, 0x2B, 0x77, 0xCA, 0x34, 0x7D, 0xD1, 0x34, 0x7D, 0xD1, 0x2B, 0x77, 
   0xCA, 0x2B, 0x77, 0xCA, 0x2E, 0x7C, 0xCF, 0x2E, 0x7C, 0xCF, 0x22, 0x74, 0xC6, 0x22, 0x74, 0xC6, 
   0x17, 0x6B, 0xBD, 0x17, 0x6B, 0xBD, 0x16, 0x5D, 0xB8, 0x16, 0x5D, 0xB8, 0x16, 0x60, 0xB2, 0x16, 
   0x60, 0xB2, 0x11, 0x5C, 0xAA, 0x11, 0x5C, 0xAA, 0x1B, 0x65, 0xB7, 0x1B, 0x65, 0xB7, 0x1F, 0x65, 
   0xC2, 0x1F, 0x65, 0xC2, 0x22, 0x67, 0xC8, 0x22, 0x67, 0xC8, 0x02, 0x48, 0xA5, 0x02, 0x48, 0xA5, 
   0x15, 0x5E, 0xB2, 0x15, 0x5E, 0xB2, 0x21, 0x67, 0xC4, 0x21, 0x67, 0xC4, 0x1C, 0x62, 0xC0, 0x1C, 
   0x62, 0xC0, 0x0F, 0x54, 0xB5, 0x0F, 0x54, 0xB5, 0x26, 0x6D, 0xCF, 0x26, 0x6D, 0xCF, 0x13, 0x5B, 
   0xB9, 0x13, 0x5B, 0xB9, 0x28, 0x75, 0xCC, 0x28, 0x75, 0xCC, 0x0F, 0x5E, 0xAF, 0x0F, 0x5E, 0xAF, 
   0x1E, 0x71, 0xBC, 0x1E, 0x71, 0xBC, 0x2F, 0x76, 0xCE, 0x2F, 0x76, 0xCE, 0x29, 0x71, 0xC5, 0x29, 
   0x71, 0xC5, 0x25, 0x6E, 0xBE, 0x25, 0x6E, 0xBE, 0x35, 0x80, 0xCC, 0x35, 0x80, 0xCC, 0x36, 0x81, 
   0xCD, 0x36, 0x81, 0xCD, 0x33, 0x7E, 0xCA, 0x33, 0x7E, 0xCA, 0x3E, 0x87, 0xD7, 0x3E, 0x87, 0xD7, 
   0x34, 0x7D, 0xCD, 0x34, 0x7D, 0xCD, 0x33, 0x7D, 0xCF, 0x33, 0x7D, 0xCF, 0x3A, 0x8C, 0xD9, 0x3A, 
   0x8C, 0xD9, 0x46, 0xA1, 0xE4, 0x46, 0xA1, 0xE4, 0x45, 0xA7, 0xE3, 0x45, 0xA7, 0xE3, 0x40, 0xA0, 
   0xDC, 0x40, 0xA0, 0xDC, 0x45, 0x9A, 0xDE, 0x45, 0x9A, 0xDE, 0x41, 0x88, 0xD8, 0x41, 0x88, 0xD8, 
   0x2B, 0x6B, 0xC0, 0x2B, 0x6B, 0xC0, 0x31, 0x78, 0xCF, 0x31, 0x78, 0xCF, 0x22, 0x69, 0xC1, 0x22, 
   0x69, 0xC1, 0x26, 0x6B, 0xC8, 0x26, 0x6B, 0xC8, 0x19, 0x5D, 0xBC, 0x19, 0x5D, 0xBC, 0x24, 0x68, 
   0xC7, 0x24, 0x68, 0xC7, 0x19, 0x5E, 0xBB, 0x19, 0x5E, 0xBB, 0x2B, 0x72, 0xCA, 0x2B, 0x72, 0xCA, 
   0x2F, 0x76, 0xCD, 0x2F, 0x76, 0xCD, 0x2C, 0x80, 0xCC, 0x2C, 0x80, 0xCC, 0x30, 0x84, 0xD0, 0x30, 
   0x84, 0xD0, 0x23, 0x75, 0xC3, 0x23, 0x75, 0xC3, 0x1F, 0x6E, 0xBF, 0x1F, 0x6E, 0xBF, 0x23, 0x6E, 
   0xC4, 0x23, 0x6E, 0xC4, 0x11, 0x59, 0xB1, 0x11, 0x59, 0xB1, 0x0B, 0x51, 0xAC, 0x0B, 0x51, 0xAC, 
   0x29, 0x6F, 0xCA, 0x29, 0x6F, 0xCA, 0x24, 0x6B, 0xC3, 0x24, 0x6B, 0xC3, 0x13, 0x63, 0xB8, 0x13, 
   0x63, 0xB8, 0x1E, 0x74, 0xC8, 0x1E, 0x74, 0xC8, 0x12, 0x64, 0xB6, 0x12, 0x64, 0xB6, 0x27, 0x6A, 
   0xBF, 0x27, 0x6A, 0xBF, 0x23, 0x5C, 0xB1, 0x23, 0x5C, 0xB1, 0x27, 0x60, 0xB5, 0x27, 0x60, 0xB5, 
   0x23, 0x63, 0xB7, 0x23, 0x63, 0xB7, 0x35, 0x7F, 0xD1, 0x35, 0x7F, 0xD1, 0x1A, 0x63, 0xB5, 0x1A, 
   0x63, 0xB5, 0x1E, 0x64, 0xB7, 0x1E, 0x64, 0xB7, 0x2C, 0x70, 0xC3, 0x2C, 0x70, 0xC3, 0x29, 0x6F, 
   0xC2, 0x29, 0x6F, 0xC2, 0x29, 0x72, 0xC4, 0x29, 0x72, 0xC4, 0x29, 0x75, 0xC7, 0x29, 0x75, 0xC7, 
   0x21, 0x72, 0xC3, 0x21, 0x72, 0xC3, 0x18, 0x5E, 0xB9, 0x18, 0x5E, 0xB9, 0x30, 0x79, 0xCB, 0x30, 
   0x79, 0xCB, 0x2F, 0x7A, 0xC6, 0x2F, 0x7A, 0xC6, 0x2C, 0x75, 0xC7, 0x2C, 0x75, 0xC7, 0x1E, 0x63, 
   0xC0, 0x1E, 0x63, 0xC0, 0x24, 0x68, 0xC9, 0x24, 0x68, 0xC9, 0x12, 0x58, 0xB3, 0x12, 0x58, 0xB3, 
   0x17, 0x60, 0xB2, 0x17, 0x60, 0xB2, 0x1E, 0x62, 0xBB, 0x1E, 0x62, 0xBB, 0x0F, 0x52, 0xAE, 0x0F, 
   0x52, 0xAE, 0x0C, 0x50, 0xAF, 0x0C, 0x50, 0xAF, 0x09, 0x4D, 0xAC, 0x09, 0x4D, 0xAC, 0x1A, 0x60, 
   0xBE, 0x1A, 0x60, 0xBE, 0x13, 0x5A, 0xB5, 0x13, 0x5A, 0xB5, 0x24, 0x70, 0xC3, 0x24, 0x70, 0xC3, 
   0x29, 0x76, 0xC5, 0x29, 0x76, 0xC5, 0x25, 0x6B, 0xC6, 0x25, 0x6B, 0xC6, 0x24, 0x6B, 0xC2, 0x24, 
   0x6B, 0xC2, 0x21, 0x6A, 0xBC, 0x21, 0x6A, 0xBC, 0x31, 0x7A, 0xCA, 0x31, 0x7A, 0xCA, 0x35, 0x7F, 
   0xCD, 0x35, 0x7F, 0xCD, 0x33, 0x7D, 0xCB, 0x33, 0x7D, 0xCB, 0x37, 0x80, 0xD2, 0x37, 0x80, 0xD2, 
   0x21, 0x69, 0xBD, 0x21, 0x69, 0xBD, 0x39, 0x7E, 0xD5, 0x39, 0x7E, 0xD5, 0x39, 0x85, 0xD7, 0x39, 
   0x85, 0xD7, 0x43, 0x98, 0xE0, 0x43, 0x98, 0xE0, 0x41, 0x9D, 0xDE, 0x41, 0x9D, 0xDE, 0x2D, 0x89, 
   0xCA, 0x2D, 0x89, 0xCA, 0x23, 0x78, 0xBE, 0x23, 0x78, 0xBE, 0x23, 0x6D, 0xBB, 0x23, 0x6D, 0xBB, 
   0x20, 0x61, 0xB6, 0x20, 0x61, 0xB6, 0x28, 0x71, 0xC3, 0x28, 0x71, 0xC3, 0x17, 0x5F, 0xB3, 0x17, 
   0x5F, 0xB3, 0x1C, 0x63, 0xBA, 0x1C, 0x63, 0xBA, 0x12, 0x58, 0xB3, 0x12, 0x58, 0xB3, 0x15, 0x5B, 
   0xB6, 0x15, 0x5B, 0xB6, 0x0A, 0x51, 0xA8, 0x0A, 0x51, 0xA8, 0x19, 0x61, 0xB5, 0x19, 0x61, 0xB5, 
   0x16, 0x5F, 0xB1, 0x16, 0x5F, 0xB1, 0x13, 0x62, 0xAB, 0x13, 0x62, 0xAB, 0x1F, 0x6D, 0xB9, 0x1F, 
   0x6D, 0xB9, 0x27, 0x75, 0xC2, 0x27, 0x75, 0xC2, 0x1F, 0x6A, 0xB9, 0x1F, 0x6A, 0xB9, 0x12, 0x5C, 
   0xAE, 0x12, 0x5C, 0xAE, 0x15, 0x5D, 0xB1, 0x15, 0x5D, 0xB1, 0x19, 0x60, 0xB7, 0x19, 0x60, 0xB7, 
   0x14, 0x5B, 0xB3, 0x14, 0x5B, 0xB3, 0x1E, 0x60, 0xB3, 0x1E, 0x60, 0xB3, 0x14, 0x60, 0xB2, 0x14, 
   0x60, 0xB2, 0x17, 0x6C, 0xBC, 0x17, 0x6C, 0xBC, 0x06, 0x56, 0xA9, 0x06, 0x56, 0xA9, 0x19, 0x5C, 
   0xB1, 0x19, 0x5C, 0xB1, 0x19, 0x54, 0xAA, 0x19, 0x54, 0xAA, 0x1F, 0x5C, 0xB2, 0x1F, 0x5C, 0xB2, 
   0x1F, 0x60, 0xB5, 0x1F, 0x60, 0xB5, 0x35, 0x7F, 0xD1, 0x35, 0x7F, 0xD1, 0x1A, 0x63, 0xB5, 0x1A, 
   0x63, 0xB5, 0x1E, 0x64, 0xB7, 0x1E, 0x64, 0xB7, 0x2C, 0x70, 0xC3, 0x2C, 0x70, 0xC3, 0x29, 0x6F, 
   0xC2, 0x29, 0x6F, 0xC2, 0x29, 0x72, 0xC4, 0x29, 0x72, 0xC4, 0x29, 0x75, 0xC7, 0x29, 0x75, 0xC7, 
   0x21, 0x72, 0xC3, 0x21, 0x72, 0xC3, 0x18, 0x5E, 0xB9, 0x18, 0x5E, 0xB9, 0x30, 0x79, 0xCB, 0x30, 
   0x79, 0xCB, 0x2F, 0x7A, 0xC6, 0x2F, 0x7A, 0xC6, 0x2C, 0x75, 0xC7, 0x2C, 0x75, 0xC7, 0x1E, 0x63, 
   0xC0, 0x1E, 0x63, 0xC0, 0x24, 0x68, 0xC9, 0x24, 0x68, 0xC9, 0x12, 0x58, 0xB3, 0x12, 0x58, 0xB3, 
   0x17, 0x60, 0xB2, 0x17, 0x60, 0xB2, 0x1E, 0x62, 0xBB, 0x1E, 0x62, 0xBB, 0x0F, 0x52, 0xAE, 0x0F, 
   0x52, 0xAE, 0x0C, 0x50, 0xAF, 0x0C, 0x50, 0xAF, 0x09, 0x4D, 0xAC, 0x09, 0x4D, 0xAC, 0x1A, 0x60, 
   0xBE, 0x1A, 0x60, 0xBE, 0x13, 0x5A, 0xB5, 0x13, 0x5A, 0xB5, 0x24, 0x70, 0xC3, 0x24, 0x70, 0xC3, 
   0x29, 0x76, 0xC5, 0x29, 0x76, 0xC5, 0x25, 0x6B, 0xC6, 0x25, 0x6B, 0xC6, 0x24, 0x6B, 0xC2, 0x24, 
   0x6B, 0xC2, 0x21, 0x6A, 0xBC, 0x21, 0x6A, 0xBC, 0x31, 0x7A, 0xCA, 0x31, 0x7A, 0xCA, 0x35, 0x7F, 
   0xCD, 0x35, 0x7F, 0xCD, 0x33, 0x7D, 0xCB, 0x33, 0x7D, 0xCB, 0x37, 0x80, 0xD2, 0x37, 0x80, 0xD2, 
   0x21, 0x69, 0xBD, 0x21, 0x69, 0xBD, 0x39, 0x7E, 0xD5, 0x39, 0x7E, 0xD5, 0x39, 0x85, 0xD7, 0x39, 
   0x85, 0xD7, 0x43, 0x98, 0xE0, 0x43, 0x98, 0xE0, 0x41, 0x9D, 0xDE, 0x41, 0x9D, 0xDE, 0x2D, 0x89, 
   0xCA, 0x2D, 0x89, 0xCA, 0x23, 0x78, 0xBE, 0x23, 0x78, 0xBE, 0x23, 0x6D, 0xBB, 0x23, 0x6D, 0xBB, 
   0x20, 0x61, 0xB6, 0x20, 0x61, 0xB6, 0x28, 0x71, 0xC3, 0x28, 0x71, 0xC3, 0x17, 0x5F, 0xB3, 0x17, 
   0x5F, 0xB3, 0x1C, 0x63, 0xBA, 0x1C, 0x63, 0xBA, 0x12, 0x58, 0xB3, 0x12, 0x58, 0xB3, 0x15, 0x5B, 
   0xB6, 0x15, 0x5B, 0xB6, 0x0A, 0x51, 0xA8, 0x0A, 0x51, 0xA8, 0x19, 0x61, 0xB5, 0x19, 0x61, 0xB5, 
   0x16, 0x5F, 0xB1, 0x16, 0x5F, 0xB1, 0x13, 0x62, 0xAB, 0x13, 0x62, 0xAB, 0x1F, 0x6D, 0xB9, 0x1F, 
   0x6D, 0xB9, 0x27, 0x75, 0xC2, 0x27, 0x75, 0xC2, 0x1F, 0x6A, 0xB9, 0x1F, 0x6A, 0xB9, 0x12, 0x5C, 
   0xAE, 0x12, 0x5C, 0xAE, 0x15, 0x5D, 0xB1, 0x15, 0x5D, 0xB1, 0x19, 0x60, 0xB7, 0x19, 0x60, 0xB7, 
   0x14, 0x5B, 0xB3, 0x14, 0x5B, 0xB3, 0x1E, 0x60, 0xB3, 0x1E, 0x60, 0xB3, 0x14, 0x60, 0xB2, 0x14, 
   0x60, 0xB2, 0x17, 0x6C, 0xBC, 0x17, 0x6C, 0xBC, 0x06, 0x56, 0xA9, 0x06, 0x56, 0xA9, 0x19, 0x5C, 
   0xB1, 0x19, 0x5C, 0xB1, 0x19, 0x54, 0xAA, 0x19, 0x54, 0xAA, 0x1F, 0x5C, 0xB2, 0x1F, 0x5C, 0xB2, 
   0x1F, 0x60, 0xB5, 0x1F, 0x60, 0xB5, 0x30, 0x70, 0xC4, 0x30, 0x70, 0xC4, 0x14, 0x52, 0xA6, 0x14, 
   0x52, 0xA6, 0x09, 0x45, 0x99, 0x09, 0x45, 0x99, 0x1D, 0x59, 0xAD, 0x1D, 0x59, 0xAD, 0x1D, 0x59, 
   0xAD, 0x1D, 0x59, 0xAD, 0x0F, 0x4F, 0xA3, 0x0F, 0x4F, 0xA3, 0x16, 0x5A, 0xAD, 0x16, 0x5A, 0xAD, 
   0x14, 0x5D, 0xAF, 0x14, 0x5D, 0xAF, 0x09, 0x4F, 0xAA, 0x09, 0x4F, 0xAA, 0x2B, 0x74, 0xC6, 0x2B, 
   0x74, 0xC6, 0x31, 0x7C, 0xC8, 0x31, 0x7C, 0xC8, 0x38, 0x81, 0xD1, 0x38, 0x81, 0xD1, 0x1A, 0x60, 
   0xBB, 0x1A, 0x60, 0xBB, 0x16, 0x5A, 0xBB, 0x16, 0x5A, 0xBB, 0x1A, 0x60, 0xBB, 0x1A, 0x60, 0xBB, 
   0x24, 0x6D, 0xBF, 0x24, 0x6D, 0xBF, 0x26, 0x66, 0xBA, 0x26, 0x66, 0xBA, 0x24, 0x65, 0xBA, 0x24, 
   0x65, 0xBA, 0x22, 0x61, 0xBB, 0x22, 0x61, 0xBB, 0x29, 0x6A, 0xC6, 0x29, 0x6A, 0xC6, 0x37, 0x77, 
   0xD5, 0x37, 0x77, 0xD5, 0x14, 0x57, 0xB3, 0x14, 0x57, 0xB3, 0x1E, 0x62, 0xBB, 0x1E, 0x62, 0xBB, 
   0x09, 0x50, 0xA8, 0x09, 0x50, 0xA8, 0x23, 0x68, 0xC5, 0x23, 0x68, 0xC5, 0x25, 0x6B, 0xC6, 0x25, 
   0x6B, 0xC6, 0x20, 0x67, 0xBE, 0x20, 0x67, 0xBE, 0x2B, 0x74, 0xC6, 0x2B, 0x74, 0xC6, 0x31, 0x7A, 
   0xCC, 0x31, 0x7A, 0xCC, 0x35, 0x7E, 0xD0, 0x35, 0x7E, 0xD0, 0x36, 0x7E, 0xD2, 0x36, 0x7E, 0xD2, 
   0x19, 0x60, 0xB7, 0x19, 0x60, 0xB7, 0x2C, 0x69, 0xC7, 0x2C, 0x69, 0xC7, 0x25, 0x69, 0xC2, 0x25, 
   0x69, 0xC2, 0x2F, 0x7C, 0xCB, 0x2F, 0x7C, 0xCB, 0x34, 0x89, 0xD1, 0x34, 0x89, 0xD1, 0x28, 0x7E, 
   0xC4, 0x28, 0x7E, 0xC4, 0x24, 0x78, 0xC0, 0x24, 0x78, 0xC0, 0x3D, 0x88, 0xD6, 0x3D, 0x88, 0xD6, 
   0x52, 0x98, 0xEB, 0x52, 0x98, 0xEB, 0x43, 0x8E, 0xD8, 0x43, 0x8E, 0xD8, 0x2F, 0x79, 0xC7, 0x2F, 
   0x79, 0xC7, 0x37, 0x80, 0xD0, 0x37, 0x80, 0xD0, 0x33, 0x7C, 0xCE, 0x33, 0x7C, 0xCE, 0x2F, 0x78, 
   0xCA, 0x2F, 0x78, 0xCA, 0x2E, 0x77, 0xC7, 0x2E, 0x77, 0xC7, 0x40, 0x8A, 0xD8, 0x40, 0x8A, 0xD8, 
   0x39, 0x84, 0xCE, 0x39, 0x84, 0xCE, 0x33, 0x7B, 0xC1, 0x33, 0x7B, 0xC1, 0x44, 0x8C, 0xD2, 0x44, 
   0x8C, 0xD2, 0x56, 0x9E, 0xE6, 0x56, 0x9E, 0xE6, 0x3D, 0x86, 0xD0, 0x3D, 0x86, 0xD0, 0x20, 0x68, 
   0xB6, 0x20, 0x68, 0xB6, 0x36, 0x7F, 0xCF, 0x36, 0x7F, 0xCF, 0x41, 0x8A, 0xDC, 0x41, 0x8A, 0xDC, 
   0x18, 0x61, 0xB3, 0x18, 0x61, 0xB3, 0x14, 0x52, 0xA0, 0x14, 0x52, 0xA0, 0x25, 0x6D, 0xBA, 0x25, 
   0x6D, 0xBA, 0x2E, 0x80, 0xCD, 0x2E, 0x80, 0xCD, 0x26, 0x75, 0xC4, 0x26, 0x75, 0xC4, 0x35, 0x7B, 
   0xCE, 0x35, 0x7B, 0xCE, 0x34, 0x74, 0xC9, 0x34, 0x74, 0xC9, 0x35, 0x75, 0xCD, 0x35, 0x75, 0xCD, 
   0x2A, 0x71, 0xC9, 0x2A, 0x71, 0xC9, 0x30, 0x70, 0xC4, 0x30, 0x70, 0xC4, 0x14, 0x52, 0xA6, 0x14, 
   0x52, 0xA6, 0x09, 0x45, 0x99, 0x09, 0x45, 0x99, 0x1D, 0x59, 0xAD, 0x1D, 0x59, 0xAD, 0x1D, 0x59, 
   0xAD, 0x1D, 0x59, 0xAD, 0x0F, 0x4F, 0xA3, 0x0F, 0x4F, 0xA3, 0x16, 0x5A, 0xAD, 0x16, 0x5A, 0xAD, 
   0x14, 0x5D, 0xAF, 0x14, 0x5D, 0xAF, 0x09, 0x4F, 0xAA, 0x09, 0x4F, 0xAA, 0x2B, 0x74, 0xC6, 0x2B, 
   0x74, 0xC6, 0x31, 0x7C, 0xC8, 0x31, 0x7C, 0xC8, 0x38, 0x81, 0xD1, 0x38, 0x81, 0xD1, 0x1A, 0x60, 
   0xBB, 0x1A, 0x60, 0xBB, 0x16, 0x5A, 0xBB, 0x16, 0x5A, 0xBB, 0x1A, 0x60, 0xBB, 0x1A, 0x60, 0xBB, 
   0x24, 0x6D, 0xBF, 0x24, 0x6D, 0xBF, 0x26, 0x66, 0xBA, 0x26, 0x66, 0xBA, 0x24, 0x65, 0xBA, 0x24, 
   0x65, 0xBA, 0x22, 0x61, 0xBB, 0x22, 0x61, 0xBB, 0x29, 0x6A, 0xC6, 0x29, 0x6A, 0xC6, 0x37, 0x77, 
   0xD5, 0x37, 0x77, 0xD5, 0x14, 0x57, 0xB3, 0x14, 0x57, 0xB3, 0x1E, 0x62, 0xBB, 0x1E, 0x62, 0xBB, 
   0x09, 0x50, 0xA8, 0x09, 0x50, 0xA8, 0x23, 0x68, 0xC5, 0x23, 0x68, 0xC5, 0x25, 0x6B, 0xC6, 0x25, 
   0x6B, 0xC6, 0x20, 0x67, 0xBE, 0x20, 0x67, 0xBE, 0x2B, 0x74, 0xC6, 0x2B, 0x74, 0xC6, 0x31, 0x7A, 
   0xCC, 0x31, 0x7A, 0xCC, 0x35, 0x7E, 0xD0, 0x35, 0x7E, 0xD0, 0x36, 0x7E, 0xD2, 0x36, 0x7E, 0xD2, 
   0x19, 0x60, 0xB7, 0x19, 0x60, 0xB7, 0x2C, 0x69, 0xC7, 0x2C, 0x69, 0xC7, 0x25, 0x69, 0xC2, 0x25, 
   0x69, 0xC2, 0x2F, 0x7C, 0xCB, 0x2F, 0x7C, 0xCB, 0x34, 0x89, 0xD1, 0x34, 0x89, 0xD1, 0x28, 0x7E, 
   0xC4, 0x28, 0x7E, 0xC4, 0x24, 0x78, 0xC0, 0x24, 0x78, 0xC0, 0x3D, 0x88, 0xD6, 0x3D, 0x88, 0xD6, 
   0x52, 0x98, 0xEB, 0x52, 0x98, 0xEB, 0x43, 0x8E, 0xD8, 0x43, 0x8E, 0xD8, 0x2F, 0x79, 0xC7, 0x2F, 
   0x79, 0xC7, 0x37, 0x80, 0xD0, 0x37, 0x80, 0xD0, 0x33, 0x7C, 0xCE, 0x33, 0x7C, 0xCE, 0x2F, 0x78, 
   0xCA, 0x2F, 0x78, 0xCA, 0x2E, 0x77, 0xC7, 0x2E, 0x77, 0xC7, 0x40, 0x8A, 0xD8, 0x40, 0x8A, 0xD8, 
   0x39, 0x84, 0xCE, 0x39, 0x84, 0xCE, 0x33, 0x7B, 0xC1, 0x33, 0x7B, 0xC1, 0x44, 0x8C, 0xD2, 0x44, 
   0x8C, 0xD2, 0x56, 0x9E, 0xE6, 0x56, 0x9E, 0xE6, 0x3D, 0x86, 0xD0, 0x3D, 0x86, 0xD0, 0x20, 0x68, 
   0xB6, 0x20, 0x68, 0xB6, 0x36, 0x7F, 0xCF, 0x36, 0x7F, 0xCF, 0x41, 0x8A, 0xDC, 0x41, 0x8A, 0xDC, 
   0x18, 0x61, 0xB3, 0x18, 0x61, 0xB3, 0x14, 0x52, 0xA0, 0x14, 0x52, 0xA0, 0x25, 0x6D, 0xBA, 0x25, 
   0x6D, 0xBA, 0x2E, 0x80, 0xCD, 0x2E, 0x80, 0xCD, 0x26, 0x75, 0xC4, 0x26, 0x75, 0xC4, 0x35, 0x7B, 
   0xCE, 0x35, 0x7B, 0xCE, 0x34, 0x74, 0xC9, 0x34, 0x74, 0xC9, 0x35, 0x75, 0xCD, 0x35, 0x75, 0xCD, 
   0x2A, 0x71, 0xC9, 0x2A, 0x71, 0xC9, 0x2F, 0x65, 0xB8, 0x2F, 0x65, 0xB8, 0x19, 0x4F, 0xA2, 0x19, 
   0x4F, 0xA2, 0x0D, 0x41, 0x94, 0x0D, 0x41, 0x94, 0x26, 0x5A, 0xAD, 0x26, 0x5A, 0xAD, 0x24, 0x5A, 
   0xAD, 0x24, 0x5A, 0xAD, 0x0A, 0x44, 0x96, 0x0A, 0x44, 0x96, 0x13, 0x52, 0xA3, 0x13, 0x52, 0xA3, 
   0x1D, 0x5F, 0xB0, 0x1D, 0x5F, 0xB0, 0x07, 0x4B, 0xA4, 0x07, 0x4B, 0xA4, 0x1C, 0x63, 0xB3, 0x1C, 
   0x63, 0xB3, 0x25, 0x6E, 0xB8, 0x25, 0x6E, 0xB8, 0x41, 0x88, 0xD8, 0x41, 0x88, 0xD8, 0x1D, 0x60, 
   0xBC, 0x1D, 0x60, 0xBC, 0x04, 0x46, 0xA5, 0x04, 0x46, 0xA5, 0x15, 0x59, 0xB2, 0x15, 0x59, 0xB2, 
   0x35, 0x7C, 0xCC, 0x35, 0x7C, 0xCC, 0x18, 0x56, 0xA4, 0x18, 0x56, 0xA4, 0x31, 0x6E, 0xBE, 0x31, 
   0x6E, 0xBE, 0x10, 0x4E, 0xA2, 0x10, 0x4E, 0xA2, 0x52, 0x8F, 0xE5, 0x52, 0x8F, 0xE5, 0x3E, 0x7C, 
   0xD6, 0x3E, 0x7C, 0xD6, 0x37, 0x76, 0xD2, 0x37, 0x76, 0xD2, 0x1E, 0x5C, 0xBA, 0x1E, 0x5C, 0xBA, 
   0x07, 0x45, 0xA3, 0x07, 0x45, 0xA3, 0x27, 0x6B, 0xCA, 0x27, 0x6B, 0xCA, 0x2B, 0x70, 0xCD, 0x2B, 
   0x70, 0xCD, 0x24, 0x6B, 0xC3, 0x24, 0x6B, 0xC3, 0x27, 0x6F, 0xC3, 0x27, 0x6F, 0xC3, 0x2A, 0x72, 
   0xC6, 0x2A, 0x72, 0xC6, 0x35, 0x7D, 0xD1, 0x35, 0x7D, 0xD1, 0x3D, 0x84, 0xDB, 0x3D, 0x84, 0xDB, 
   0x22, 0x69, 0xC1, 0x22, 0x69, 0xC1, 0x4B, 0x85, 0xE5, 0x4B, 0x85, 0xE5, 0x42, 0x81, 0xDD, 0x42, 
   0x81, 0xDD, 0x43, 0x8B, 0xDF, 0x43, 0x8B, 0xDF, 0x42, 0x92, 0xDF, 0x42, 0x92, 0xDF, 0x2E, 0x81, 
   0xCC, 0x2E, 0x81, 0xCC, 0x26, 0x77, 0xC2, 0x26, 0x77, 0xC2, 0x2F, 0x7D, 0xCA, 0x2F, 0x7D, 0xCA, 
   0x39, 0x84, 0xD3, 0x39, 0x84, 0xD3, 0x3A, 0x87, 0xCC, 0x3A, 0x87, 0xCC, 0x27, 0x73, 0xBB, 0x27, 
   0x73, 0xBB, 0x2C, 0x77, 0xC3, 0x2C, 0x77, 0xC3, 0x2E, 0x78, 0xC6, 0x2E, 0x78, 0xC6, 0x26, 0x70, 
   0xBE, 0x26, 0x70, 0xBE, 0x2E, 0x79, 0xC5, 0x2E, 0x79, 0xC5, 0x40, 0x8C, 0xD4, 0x40, 0x8C, 0xD4, 
   0x38, 0x85, 0xCA, 0x38, 0x85, 0xCA, 0x4A, 0x8B, 0xCF, 0x4A, 0x8B, 0xCF, 0x5E, 0xA2, 0xE5, 0x5E, 
   0xA2, 0xE5, 0x60, 0xA5, 0xEA, 0x60, 0xA5, 0xEA, 0x3D, 0x83, 0xC9, 0x3D, 0x83, 0xC9, 0x2A, 0x72, 
   0xBA, 0x2A, 0x72, 0xBA, 0x45, 0x8E, 0xD8, 0x45, 0x8E, 0xD8, 0x47, 0x92, 0xDE, 0x47, 0x92, 0xDE, 
   0x1D, 0x67, 0xB5, 0x1D, 0x67, 0xB5, 0x12, 0x4C, 0x94, 0x12, 0x4C, 0x94, 0x35, 0x79, 0xC2, 0x35, 
   0x79, 0xC2, 0x33, 0x82, 0xCB, 0x33, 0x82, 0xCB, 0x25, 0x73, 0xC0, 0x25, 0x73, 0xC0, 0x29, 0x6F, 
   0xC2, 0x29, 0x6F, 0xC2, 0x23, 0x64, 0xB9, 0x23, 0x64, 0xB9, 0x19, 0x5E, 0xB5, 0x19, 0x5E, 0xB5, 
   0x08, 0x52, 0xAA, 0x08, 0x52, 0xAA, 0x2F, 0x65, 0xB8, 0x2F, 0x65, 0xB8, 0x19, 0x4F, 0xA2, 0x19, 
   0x4F, 0xA2, 0x0D, 0x41, 0x94, 0x0D, 0x41, 0x94, 0x26, 0x5A, 0xAD, 0x26, 0x5A, 0xAD, 0x24, 0x5A, 
   0xAD, 0x24, 0x5A, 0xAD, 0x0A, 0x44, 0x96, 0x0A, 0x44, 0x96, 0x13, 0x52, 0xA3, 0x13, 0x52, 0xA3, 
   0x1D, 0x5F, 0xB0, 0x1D, 0x5F, 0xB0, 0x07, 0x4B, 0xA4, 0x07, 0x4B, 0xA4, 0x1C, 0x63, 0xB3, 0x1C, 
   0x63, 0xB3, 0x25, 0x6E, 0xB8, 0x25, 0x6E, 0xB8, 0x41, 0x88, 0xD8, 0x41, 0x88, 0xD8, 0x1D, 0x60, 
   0xBC, 0x1D, 0x60, 0xBC, 0x04, 0x46, 0xA5, 0x04, 0x46, 0xA5, 0x15, 0x59, 0xB2, 0x15, 0x59, 0xB2, 
   0x35, 0x7C, 0xCC, 0x35, 0x7C, 0xCC, 0x18, 0x56, 0xA4, 0x18, 0x56, 0xA4, 0x31, 0x6E, 0xBE, 0x31, 
   0x6E, 0xBE, 0x10, 0x4E, 0xA2, 0x10, 0x4E, 0xA2, 0x52, 0x8F, 0xE5, 0x52, 0x8F, 0xE5, 0x3E, 0x7C, 
   0xD6, 0x3E, 0x7C, 0xD6, 0x37, 0x76, 0xD2, 0x37, 0x76, 0xD2, 0x1E, 0x5C, 0xBA, 0x1E, 0x5C, 0xBA, 
   0x07, 0x45, 0xA3, 0x07, 0x45, 0xA3, 0x27, 0x6B, 0xCA, 0x27, 0x6B, 0xCA, 0x2B, 0x70, 0xCD, 0x2B, 
   0x70, 0xCD, 0x24, 0x6B, 0xC3, 0x24, 0x6B, 0xC3, 0x27, 0x6F, 0xC3, 0x27, 0x6F, 0xC3, 0x2A, 0x72, 
   0xC6, 0x2A, 0x72, 0xC6, 0x35, 0x7D, 0xD1, 0x35, 0x7D, 0xD1, 0x3D, 0x84, 0xDB, 0x3D, 0x84, 0xDB, 
   0x22, 0x69, 0xC1, 0x22, 0x69, 0xC1, 0x4B, 0x85, 0xE5, 0x4B, 0x85, 0xE5, 0x42, 0x81, 0xDD, 0x42, 
   0x81, 0xDD, 0x43, 0x8B, 0xDF, 0x43, 0x8B, 0xDF, 0x42, 0x92, 0xDF, 0x42, 0x92, 0xDF, 0x2E, 0x81, 
   0xCC, 0x2E, 0x81, 0xCC, 0x26, 0x77, 0xC2, 0x26, 0x77, 0xC2, 0x2F, 0x7D, 0xCA, 0x2F, 0x7D, 0xCA, 
   0x39, 0x84, 0xD3, 0x39, 0x84, 0xD3, 0x3A, 0x87, 0xCC, 0x3A, 0x87, 0xCC, 0x27, 0x73, 0xBB, 0x27, 
   0x73, 0xBB, 0x2C, 0x77, 0xC3, 0x2C, 0x77, 0xC3, 0x2E, 0x78, 0xC6, 0x2E, 0x78, 0xC6, 0x26, 0x70, 
   0xBE, 0x26, 0x70, 0xBE, 0x2E, 0x79, 0xC5, 0x2E, 0x79, 0xC5, 0x40, 0x8C, 0xD4, 0x40, 0x8C, 0xD4, 
   0x38, 0x85, 0xCA, 0x38, 0x85, 0xCA, 0x4A, 0x8B, 0xCF, 0x4A, 0x8B, 0xCF, 0x5E, 0xA2, 0xE5, 0x5E, 
   0xA2, 0xE5, 0x60, 0xA5, 0xEA, 0x60, 0xA5, 0xEA, 0x3D, 0x83, 0xC9, 0x3D, 0x83, 0xC9, 0x2A, 0x72, 
   0xBA, 0x2A, 0x72, 0xBA, 0x45, 0x8E, 0xD8, 0x45, 0x8E, 0xD8, 0x47, 0x92, 0xDE, 0x47, 0x92, 0xDE, 
   0x1D, 0x67, 0xB5, 0x1D, 0x67, 0xB5, 0x12, 0x4C, 0x94, 0x12, 0x4C, 0x94, 0x35, 0x79, 0xC2, 0x35, 
   0x79, 0xC2, 0x33, 0x82, 0xCB, 0x33, 0x82, 0xCB, 0x25, 0x73, 0xC0, 0x25, 0x73, 0xC0, 0x29, 0x6F, 
   0xC2, 0x29, 0x6F, 0xC2, 0x23, 0x64, 0xB9, 0x23, 0x64, 0xB9, 0x19, 0x5E, 0xB5, 0x19, 0x5E, 0xB5, 
   0x08, 0x52, 0xAA, 0x08, 0x52, 0xAA, 0x28, 0x5A, 0xAD, 0x28, 0x5A, 0xAD, 0x1A, 0x49, 0x9D, 0x1A, 
   0x49, 0x9D, 0x16, 0x44, 0x98, 0x16, 0x44, 0x98, 0x2A, 0x58, 0xAC, 0x2A, 0x58, 0xAC, 0x27, 0x59, 
   0xAC, 0x27, 0x59, 0xAC, 0x0D, 0x43, 0x96, 0x0D, 0x43, 0x96, 0x16, 0x52, 0xA4, 0x16, 0x52, 0xA4, 
   0x33, 0x74, 0xC5, 0x33, 0x74, 0xC5, 0x15, 0x59, 0xB2, 0x15, 0x59, 0xB2, 0x29, 0x70, 0xC0, 0x29, 
   0x70, 0xC0, 0x30, 0x79, 0xC3, 0x30, 0x79, 0xC3, 0x42, 0x8A, 0xD8, 0x42, 0x8A, 0xD8, 0x21, 0x65, 
   0xBE, 0x21, 0x65, 0xBE, 0x0C, 0x4E, 0xAD, 0x0C, 0x4E, 0xAD, 0x13, 0x57, 0xB0, 0x13, 0x57, 0xB0, 
   0x39, 0x80, 0xD0, 0x39, 0x80, 0xD0, 0x30, 0x6C, 0xB8, 0x30, 0x6C, 0xB8, 0x3C, 0x78, 0xC4, 0x3C, 
   0x78, 0xC4, 0x00, 0x38, 0x86, 0x00, 0x38, 0x86, 0x41, 0x7D, 0xCF, 0x41, 0x7D, 0xCF, 0x22, 0x5F, 
   0xB5, 0x22, 0x5F, 0xB5, 0x38, 0x74, 0xCE, 0x38, 0x74, 0xCE, 0x1B, 0x58, 0xB6, 0x1B, 0x58, 0xB6, 
   0x0E, 0x4A, 0xAA, 0x0E, 0x4A, 0xAA, 0x20, 0x64, 0xC3, 0x20, 0x64, 0xC3, 0x29, 0x6E, 0xCB, 0x29, 
   0x6E, 0xCB, 0x26, 0x6D, 0xC5, 0x26, 0x6D, 0xC5, 0x28, 0x70, 0xC4, 0x28, 0x70, 0xC4, 0x27, 0x6F, 
   0xC3, 0x27, 0x6F, 0xC3, 0x31, 0x79, 0xCD, 0x31, 0x79, 0xCD, 0x3D, 0x84, 0xDB, 0x3D, 0x84, 0xDB, 
   0x27, 0x6E, 0xC6, 0x27, 0x6E, 0xC6, 0x1B, 0x5A, 0xB6, 0x1B, 0x5A, 0xB6, 0x1F, 0x61, 0xBA, 0x1F, 
   0x61, 0xBA, 0x32, 0x7A, 0xCE, 0x32, 0x7A, 0xCE, 0x43, 0x90, 0xDF, 0x43, 0x90, 0xDF, 0x46, 0x96, 
   0xE3, 0x46, 0x96, 0xE3, 0x47, 0x99, 0xE6, 0x47, 0x99, 0xE6, 0x46, 0x96, 0xE3, 0x46, 0x96, 0xE3, 
   0x38, 0x87, 0xD6, 0x38, 0x87, 0xD6, 0x3A, 0x87, 0xCC, 0x3A, 0x87, 0xCC, 0x31, 0x7D, 0xC5, 0x31, 
   0x7D, 0xC5, 0x32, 0x7D, 0xC9, 0x32, 0x7D, 0xC9, 0x36, 0x80, 0xCE, 0x36, 0x80, 0xCE, 0x2D, 0x77, 
   0xC5, 0x2D, 0x77, 0xC5, 0x34, 0x7F, 0xCB, 0x34, 0x7F, 0xCB, 0x38, 0x84, 0xCC, 0x38, 0x84, 0xCC, 
   0x2F, 0x7C, 0xC1, 0x2F, 0x7C, 0xC1, 0x3A, 0x7D, 0xBC, 0x3A, 0x7D, 0xBC, 0x57, 0x99, 0xDA, 0x57, 
   0x99, 0xDA, 0x4A, 0x8E, 0xD1, 0x4A, 0x8E, 0xD1, 0x2C, 0x71, 0xB6, 0x2C, 0x71, 0xB6, 0x38, 0x7E, 
   0xC4, 0x38, 0x7E, 0xC4, 0x49, 0x91, 0xD9, 0x49, 0x91, 0xD9, 0x3B, 0x84, 0xCE, 0x3B, 0x84, 0xCE, 
   0x25, 0x70, 0xBC, 0x25, 0x70, 0xBC, 0x15, 0x4B, 0x92, 0x15, 0x4B, 0x92, 0x3D, 0x7F, 0xC6, 0x3D, 
   0x7F, 0xC6, 0x27, 0x75, 0xBC, 0x27, 0x75, 0xBC, 0x1A, 0x67, 0xB0, 0x1A, 0x67, 0xB0, 0x20, 0x65, 
   0xB4, 0x20, 0x65, 0xB4, 0x24, 0x64, 0xB8, 0x24, 0x64, 0xB8, 0x25, 0x6B, 0xBF, 0x25, 0x6B, 0xBF, 
   0x1D, 0x6A, 0xC0, 0x1D, 0x6A, 0xC0, 0x28, 0x5A, 0xAD, 0x28, 0x5A, 0xAD, 0x1A, 0x49, 0x9D, 0x1A, 
   0x49, 0x9D, 0x16, 0x44, 0x98, 0x16, 0x44, 0x98, 0x2A, 0x58, 0xAC, 0x2A, 0x58, 0xAC, 0x27, 0x59, 
   0xAC, 0x27, 0x59, 0xAC, 0x0D, 0x43, 0x96, 0x0D, 0x43, 0x96, 0x16, 0x52, 0xA4, 0x16, 0x52, 0xA4, 
   0x33, 0x74, 0xC5, 0x33, 0x74, 0xC5, 0x15, 0x59, 0xB2, 0x15, 0x59, 0xB2, 0x29, 0x70, 0xC0, 0x29, 
   0x70, 0xC0, 0x30, 0x79, 0xC3, 0x30, 0x79, 0xC3, 0x42, 0x8A, 0xD8, 0x42, 0x8A, 0xD8, 0x21, 0x65, 
   0xBE, 0x21, 0x65, 0xBE, 0x0C, 0x4E, 0xAD, 0x0C, 0x4E, 0xAD, 0x13, 0x57, 0xB0, 0x13, 0x57, 0xB0, 
   0x39, 0x80, 0xD0, 0x39, 0x80, 0xD0, 0x30, 0x6C, 0xB8, 0x30, 0x6C, 0xB8, 0x3C, 0x78, 0xC4, 0x3C, 
   0x78, 0xC4, 0x00, 0x38, 0x86, 0x00, 0x38, 0x86, 0x41, 0x7D, 0xCF, 0x41, 0x7D, 0xCF, 0x22, 0x5F, 
   0xB5, 0x22, 0x5F, 0xB5, 0x38, 0x74, 0xCE, 0x38, 0x74, 0xCE, 0x1B, 0x58, 0xB6, 0x1B, 0x58, 0xB6, 
   0x0E, 0x4A, 0xAA, 0x0E, 0x4A, 0xAA, 0x20, 0x64, 0xC3, 0x20, 0x64, 0xC3, 0x29, 0x6E, 0xCB, 0x29, 
   0x6E, 0xCB, 0x26, 0x6D, 0xC5, 0x26, 0x6D, 0xC5, 0x28, 0x70, 0xC4, 0x28, 0x70, 0xC4, 0x27, 0x6F, 
   0xC3, 0x27, 0x6F, 0xC3, 0x31, 0x79, 0xCD, 0x31, 0x79, 0xCD, 0x3D, 0x84, 0xDB, 0x3D, 0x84, 0xDB, 
   0x27, 0x6E, 0xC6, 0x27, 0x6E, 0xC6, 0x1B, 0x5A, 0xB6, 0x1B, 0x5A, 0xB6, 0x1F, 0x61, 0xBA, 0x1F, 
   0x61, 0xBA, 0x32, 0x7A, 0xCE, 0x32, 0x7A, 0xCE, 0x43, 0x90, 0xDF, 0x43, 0x90, 0xDF, 0x46, 0x96, 
   0xE3, 0x46, 0x96, 0xE3, 0x47, 0x99, 0xE6, 0x47, 0x99, 0xE6, 0x46, 0x96, 0xE3, 0x46, 0x96, 0xE3, 
   0x38, 0x87, 0xD6, 0x38, 0x87, 0xD6, 0x3A, 0x87, 0xCC, 0x3A, 0x87, 0xCC, 0x31, 0x7D, 0xC5, 0x31, 
   0x7D, 0xC5, 0x32, 0x7D, 0xC9, 0x32, 0x7D, 0xC9, 0x36, 0x80, 0xCE, 0x36, 0x80, 0xCE, 0x2D, 0x77, 
   0xC5, 0x2D, 0x77, 0xC5, 0x34, 0x7F, 0xCB, 0x34, 0x7F, 0xCB, 0x38, 0x84, 0xCC, 0x38, 0x84, 0xCC, 
   0x2F, 0x7C, 0xC1, 0x2F, 0x7C, 0xC1, 0x3A, 0x7D, 0xBC, 0x3A, 0x7D, 0xBC, 0x57, 0x99, 0xDA, 0x57, 
   0x99, 0xDA, 0x4A, 0x8E, 0xD1, 0x4A, 0x8E, 0xD1, 0x2C, 0x71, 0xB6, 0x2C, 0x71, 0xB6, 0x38, 0x7E, 
   0xC4, 0x38, 0x7E, 0xC4, 0x49, 0x91, 0xD9, 0x49, 0x91, 0xD9, 0x3B, 0x84, 0xCE, 0x3B, 0x84, 0xCE, 
   0x25, 0x70, 0xBC, 0x25, 0x70, 0xBC, 0x15, 0x4B, 0x92, 0x15, 0x4B, 0x92, 0x3D, 0x7F, 0xC6, 0x3D, 
   0x7F, 0xC6, 0x27, 0x75, 0xBC, 0x27, 0x75, 0xBC, 0x1A, 0x67, 0xB0, 0x1A, 0x67, 0xB0, 0x20, 0x65, 
   0xB4, 0x20, 0x65, 0xB4, 0x24, 0x64, 0xB8, 0x24, 0x64, 0xB8, 0x25, 0x6B, 0xBF, 0x25, 0x6B, 0xBF, 
   0x1D, 0x6A, 0xC0, 0x1D, 0x6A, 0xC0, 0x2B, 0x5B, 0xAD, 0x2B, 0x5B, 0xAD, 0x1A, 0x4A, 0x9C, 0x1A, 
   0x4A, 0x9C, 0x1F, 0x4E, 0xA0, 0x1F, 0x4E, 0xA0, 0x1F, 0x4F, 0xA1, 0x1F, 0x4F, 0xA1, 0x18, 0x4D, 
   0x9E, 0x18, 0x4D, 0x9E, 0x0B, 0x43, 0x94, 0x0B, 0x43, 0x94, 0x0A, 0x49, 0x99, 0x0A, 0x49, 0x99, 
   0x3B, 0x7E, 0xCD, 0x3B, 0x7E, 0xCD, 0x13, 0x56, 0xAD, 0x13, 0x56, 0xAD, 0x3A, 0x7F, 0xCE, 0x3A, 
   0x7F, 0xCE, 0x45, 0x8D, 0xD5, 0x45, 0x8D, 0xD5, 0x35, 0x7A, 0xC9, 0x35, 0x7A, 0xC9, 0x24, 0x66, 
   0xBF, 0x24, 0x66, 0xBF, 0x2C, 0x6C, 0xCA, 0x2C, 0x6C, 0xCA, 0x1A, 0x5D, 0xB4, 0x1A, 0x5D, 0xB4, 
   0x39, 0x7E, 0xCD, 0x39, 0x7E, 0xCD, 0x50, 0x8B, 0xDA, 0x50, 0x8B, 0xDA, 0x42, 0x7E, 0xCA, 0x42, 
   0x7E, 0xCA, 0x0E, 0x4C, 0x98, 0x0E, 0x4C, 0x98, 0x2C, 0x6A, 0xB8, 0x2C, 0x6A, 0xB8, 0x27, 0x66, 
   0xB6, 0x27, 0x66, 0xB6, 0x2D, 0x6A, 0xC0, 0x2D, 0x6A, 0xC0, 0x20, 0x5E, 0xB8, 0x20, 0x5E, 0xB8, 
   0x11, 0x4E, 0xAC, 0x11, 0x4E, 0xAC, 0x16, 0x5B, 0xB8, 0x16, 0x5B, 0xB8, 0x21, 0x67, 0xC2, 0x21, 
   0x67, 0xC2, 0x25, 0x6C, 0xC3, 0x25, 0x6C, 0xC3, 0x2D, 0x76, 0xC8, 0x2D, 0x76, 0xC8, 0x2A, 0x73, 
   0xC5, 0x2A, 0x73, 0xC5, 0x2B, 0x74, 0xC6, 0x2B, 0x74, 0xC6, 0x35, 0x7D, 0xD1, 0x35, 0x7D, 0xD1, 
   0x22, 0x69, 0xC0, 0x22, 0x69, 0xC0, 0x31, 0x7E, 0xCD, 0x31, 0x7E, 0xCD, 0x2D, 0x7A, 0xC9, 0x2D, 
   0x7A, 0xC9, 0x33, 0x80, 0xCF, 0x33, 0x80, 0xCF, 0x37, 0x86, 0xD5, 0x37, 0x86, 0xD5, 0x36, 0x88, 
   0xD6, 0x36, 0x88, 0xD6, 0x3B, 0x8D, 0xDB, 0x3B, 0x8D, 0xDB, 0x36, 0x88, 0xD6, 0x36, 0x88, 0xD6, 
   0x25, 0x77, 0xC5, 0x25, 0x77, 0xC5, 0x1E, 0x69, 0xB3, 0x1E, 0x69, 0xB3, 0x26, 0x70, 0xBE, 0x26, 
   0x70, 0xBE, 0x21, 0x6A, 0xBA, 0x21, 0x6A, 0xBA, 0x28, 0x71, 0xC3, 0x28, 0x71, 0xC3, 0x25, 0x6E, 
   0xC0, 0x25, 0x6E, 0xC0, 0x2B, 0x74, 0xC4, 0x2B, 0x74, 0xC4, 0x1E, 0x68, 0xB6, 0x1E, 0x68, 0xB6, 
   0x1A, 0x65, 0xAF, 0x1A, 0x65, 0xAF, 0x39, 0x80, 0xBF, 0x39, 0x80, 0xBF, 0x55, 0x9C, 0xDC, 0x55, 
   0x9C, 0xDC, 0x47, 0x8E, 0xD1, 0x47, 0x8E, 0xD1, 0x37, 0x7E, 0xC2, 0x37, 0x7E, 0xC2, 0x4B, 0x93, 
   0xD9, 0x4B, 0x93, 0xD9, 0x50, 0x98, 0xE0, 0x50, 0x98, 0xE0, 0x39, 0x80, 0xCA, 0x39, 0x80, 0xCA, 
   0x2F, 0x77, 0xC4, 0x2F, 0x77, 0xC4, 0x0D, 0x43, 0x8A, 0x0D, 0x43, 0x8A, 0x40, 0x82, 0xC9, 0x40, 
   0x82, 0xC9, 0x28, 0x74, 0xBC, 0x28, 0x74, 0xBC, 0x2A, 0x77, 0xC0, 0x2A, 0x77, 0xC0, 0x39, 0x7D, 
   0xCA, 0x39, 0x7D, 0xCA, 0x3E, 0x7D, 0xCD, 0x3E, 0x7D, 0xCD, 0x3D, 0x82, 0xD2, 0x3D, 0x82, 0xD2, 
   0x3B, 0x86, 0xD5, 0x3B, 0x86, 0xD5, 0x2B, 0x5B, 0xAD, 0x2B, 0x5B, 0xAD, 0x1A, 0x4A, 0x9C, 0x1A, 
   0x4A, 0x9C, 0x1F, 0x4E, 0xA0, 0x1F, 0x4E, 0xA0, 0x1F, 0x4F, 0xA1, 0x1F, 0x4F, 0xA1, 0x18, 0x4D, 
   0x9E, 0x18, 0x4D, 0x9E, 0x0B, 0x43, 0x94, 0x0B, 0x43, 0x94, 0x0A, 0x49, 0x99, 0x0A, 0x49, 0x99, 
   0x3B, 0x7E, 0xCD, 0x3B, 0x7E, 0xCD, 0x13, 0x56, 0xAD, 0x13, 0x56, 0xAD, 0x3A, 0x7F, 0xCE, 0x3A, 
   0x7F, 0xCE, 0x45, 0x8D, 0xD5, 0x45, 0x8D, 0xD5, 0x35, 0x7A, 0xC9, 0x35, 0x7A, 0xC9, 0x24, 0x66, 
   0xBF, 0x24, 0x66, 0xBF, 0x2C, 0x6C, 0xCA, 0x2C, 0x6C, 0xCA, 0x1A, 0x5D, 0xB4, 0x1A, 0x5D, 0xB4, 
   0x39, 0x7E, 0xCD, 0x39, 0x7E, 0xCD, 0x50, 0x8B, 0xDA, 0x50, 0x8B, 0xDA, 0x42, 0x7E, 0xCA, 0x42, 
   0x7E, 0xCA, 0x0E, 0x4C, 0x98, 0x0E, 0x4C, 0x98, 0x2C, 0x6A, 0xB8, 0x2C, 0x6A, 0xB8, 0x27, 0x66, 
   0xB6, 0x27, 0x66, 0xB6, 0x2D, 0x6A, 0xC0, 0x2D, 0x6A, 0xC0, 0x20, 0x5E, 0xB8, 0x20, 0x5E, 0xB8, 
   0x11, 0x4E, 0xAC, 0x11, 0x4E, 0xAC, 0x16, 0x5B, 0xB8, 0x16, 0x5B, 0xB8, 0x21, 0x67, 0xC2, 0x21, 
   0x67, 0xC2, 0x25, 0x6C, 0xC3, 0x25, 0x6C, 0xC3, 0x2D, 0x76, 0xC8, 0x2D, 0x76, 0xC8, 0x2A, 0x73, 
   0xC5, 0x2A, 0x73, 0xC5, 0x2B, 0x74, 0xC6, 0x2B, 0x74, 0xC6, 0x35, 0x7D, 0xD1, 0x35, 0x7D, 0xD1, 
   0x22, 0x69, 0xC0, 0x22, 0x69, 0xC0, 0x31, 0x7E, 0xCD, 0x31, 0x7E, 0xCD, 0x2D, 0x7A, 0xC9, 0x2D, 
   0x7A, 0xC9, 0x33, 0x80, 0xCF, 0x33, 0x80, 0xCF, 0x37, 0x86, 0xD5, 0x37, 0x86, 0xD5, 0x36, 0x88, 
   0xD6, 0x36, 0x88, 0xD6, 0x3B, 0x8D, 0xDB, 0x3B, 0x8D, 0xDB, 0x36, 0x88, 0xD6, 0x36, 0x88, 0xD6, 
   0x25, 0x77, 0xC5, 0x25, 0x77, 0xC5, 0x1E, 0x69, 0xB3, 0x1E, 0x69, 0xB3, 0x26, 0x70, 0xBE, 0x26, 
   0x70, 0xBE, 0x21, 0x6A, 0xBA, 0x21, 0x6A, 0xBA, 0x28, 0x71, 0xC3, 0x28, 0x71, 0xC3, 0x25, 0x6E, 
   0xC0, 0x25, 0x6E, 0xC0, 0x2B, 0x74, 0xC4, 0x2B, 0x74, 0xC4, 0x1E, 0x68, 0xB6, 0x1E, 0x68, 0xB6, 
   0x1A, 0x65, 0xAF, 0x1A, 0x65, 0xAF, 0x39, 0x80, 0xBF, 0x39, 0x80, 0xBF, 0x55, 0x9C, 0xDC, 0x55, 
   0x9C, 0xDC, 0x47, 0x8E, 0xD1, 0x47, 0x8E, 0xD1, 0x37, 0x7E, 0xC2, 0x37, 0x7E, 0xC2, 0x4B, 0x93, 
   0xD9, 0x4B, 0x93, 0xD9, 0x50, 0x98, 0xE0, 0x50, 0x98, 0xE0, 0x39, 0x80, 0xCA, 0x39, 0x80, 0xCA, 
   0x2F, 0x77, 0xC4, 0x2F, 0x77, 0xC4, 0x0D, 0x43, 0x8A, 0x0D, 0x43, 0x8A, 0x40, 0x82, 0xC9, 0x40, 
   0x82, 0xC9, 0x28, 0x74, 0xBC, 0x28, 0x74, 0xBC, 0x2A, 0x77, 0xC0, 0x2A, 0x77, 0xC0, 0x39, 0x7D, 
   0xCA, 0x39, 0x7D, 0xCA, 0x3E, 0x7D, 0xCD, 0x3E, 0x7D, 0xCD, 0x3D, 0x82, 0xD2, 0x3D, 0x82, 0xD2, 
   0x3B, 0x86, 0xD5, 0x3B, 0x86, 0xD5, 0x2A, 0x5C, 0xAE, 0x2A, 0x5C, 0xAE, 0x16, 0x48, 0x9A, 0x16, 
   0x48, 0x9A, 0x29, 0x5B, 0xAD, 0x29, 0x5B, 0xAD, 0x19, 0x4E, 0x9F, 0x19, 0x4E, 0x9F, 0x18, 0x50, 
   0xA1, 0x18, 0x50, 0xA1, 0x16, 0x55, 0xA5, 0x16, 0x55, 0xA5, 0x03, 0x48, 0x97, 0x03, 0x48, 0x97, 
   0x3D, 0x87, 0xD5, 0x3D, 0x87, 0xD5, 0x09, 0x4C, 0xA3, 0x09, 0x4C, 0xA3, 0x37, 0x7C, 0xCB, 0x37, 
   0x7C, 0xCB, 0x4A, 0x92, 0xDA, 0x4A, 0x92, 0xDA, 0x26, 0x6C, 0xB9, 0x26, 0x6C, 0xB9, 0x24, 0x67, 
   0xBE, 0x24, 0x67, 0xBE, 0x38, 0x78, 0xD6, 0x38, 0x78, 0xD6, 0x09, 0x4C, 0xA3, 0x09, 0x4C, 0xA3, 
   0x33, 0x78, 0xC7, 0x33, 0x78, 0xC7, 0x35, 0x72, 0xC2, 0x35, 0x72, 0xC2, 0x25, 0x63, 0xB1, 0x25, 
   0x63, 0xB1, 0x24, 0x62, 0xAE, 0x24, 0x62, 0xAE, 0x32, 0x73, 0xBD, 0x32, 0x73, 0xBD, 0x49, 0x8A, 
   0xD5, 0x49, 0x8A, 0xD5, 0x3C, 0x7D, 0xCE, 0x3C, 0x7D, 0xCE, 0x2F, 0x6F, 0xC4, 0x2F, 0x6F, 0xC4, 
   0x1C, 0x5B, 0xB5, 0x1C, 0x5B, 0xB5, 0x1D, 0x63, 0xBE, 0x1D, 0x63, 0xBE, 0x20, 0x67, 0xBE, 0x20, 
   0x67, 0xBE, 0x22, 0x6B, 0xBD, 0x22, 0x6B, 0xBD, 0x30, 0x79, 0xC9, 0x30, 0x79, 0xC9, 0x2F, 0x79, 
   0xC7, 0x2F, 0x79, 0xC7, 0x2B, 0x75, 0xC3, 0x2B, 0x75, 0xC3, 0x33, 0x7C, 0xCE, 0x33, 0x7C, 0xCE, 
   0x23, 0x6B, 0xBF, 0x23, 0x6B, 0xBF, 0x4A, 0xA6, 0xE7, 0x4A, 0xA6, 0xE7, 0x3A, 0x93, 0xD6, 0x3A, 
   0x93, 0xD6, 0x33, 0x8B, 0xD2, 0x33, 0x8B, 0xD2, 0x34, 0x89, 0xD3, 0x34, 0x89, 0xD3, 0x2B, 0x7D, 
   0xCA, 0x2B, 0x7D, 0xCA, 0x2A, 0x7C, 0xCA, 0x2A, 0x7C, 0xCA, 0x33, 0x84, 0xD5, 0x33, 0x84, 0xD5, 
   0x36, 0x87, 0xD8, 0x36, 0x87, 0xD8, 0x1D, 0x66, 0xB8, 0x1D, 0x66, 0xB8, 0x2E, 0x76, 0xCA, 0x2E, 
   0x76, 0xCA, 0x18, 0x5F, 0xB6, 0x18, 0x5F, 0xB6, 0x19, 0x5F, 0xBA, 0x19, 0x5F, 0xBA, 0x1F, 0x65, 
   0xC0, 0x1F, 0x65, 0xC0, 0x29, 0x70, 0xC7, 0x29, 0x70, 0xC7, 0x14, 0x5C, 0xB0, 0x14, 0x5C, 0xB0, 
   0x1F, 0x68, 0xBA, 0x1F, 0x68, 0xBA, 0x3A, 0x89, 0xC8, 0x3A, 0x89, 0xC8, 0x49, 0x97, 0xD9, 0x49, 
   0x97, 0xD9, 0x48, 0x94, 0xD6, 0x48, 0x94, 0xD6, 0x3B, 0x86, 0xCB, 0x3B, 0x86, 0xCB, 0x3E, 0x86, 
   0xCE, 0x3E, 0x86, 0xCE, 0x43, 0x8A, 0xD4, 0x43, 0x8A, 0xD4, 0x39, 0x7D, 0xCA, 0x39, 0x7D, 0xCA, 
   0x2A, 0x6E, 0xBB, 0x2A, 0x6E, 0xBB, 0x00, 0x38, 0x83, 0x00, 0x38, 0x83, 0x3B, 0x7F, 0xC8, 0x3B, 
   0x7F, 0xC8, 0x21, 0x6F, 0xB6, 0x21, 0x6F, 0xB6, 0x32, 0x80, 0xC7, 0x32, 0x80, 0xC7, 0x3D, 0x82, 
   0xCB, 0x3D, 0x82, 0xCB, 0x33, 0x71, 0xBD, 0x33, 0x71, 0xBD, 0x22, 0x65, 0xB0, 0x22, 0x65, 0xB0, 
   0x1A, 0x63, 0xAD, 0x1A, 0x63, 0xAD, 0x2A, 0x5C, 0xAE, 0x2A, 0x5C, 0xAE, 0x16, 0x48, 0x9A, 0x16, 
   0x48, 0x9A, 0x29, 0x5B, 0xAD, 0x29, 0x5B, 0xAD, 0x19, 0x4E, 0x9F, 0x19, 0x4E, 0x9F, 0x18, 0x50, 
   0xA1, 0x18, 0x50, 0xA1, 0x16, 0x55, 0xA5, 0x16, 0x55, 0xA5, 0x03, 0x48, 0x97, 0x03, 0x48, 0x97, 
   0x3D, 0x87, 0xD5, 0x3D, 0x87, 0xD5, 0x09, 0x4C, 0xA3, 0x09, 0x4C, 0xA3, 0x37, 0x7C, 0xCB, 0x37, 
   0x7C, 0xCB, 0x4A, 0x92, 0xDA, 0x4A, 0x92, 0xDA, 0x26, 0x6C, 0xB9, 0x26, 0x6C, 0xB9, 0x24, 0x67, 
   0xBE, 0x24, 0x67, 0xBE, 0x38, 0x78, 0xD6, 0x38, 0x78, 0xD6, 0x09, 0x4C, 0xA3, 0x09, 0x4C, 0xA3, 
   0x33, 0x78, 0xC7, 0x33, 0x78, 0xC7, 0x35, 0x72, 0xC2, 0x35, 0x72, 0xC2, 0x25, 0x63, 0xB1, 0x25, 
   0x63, 0xB1, 0x24, 0x62, 0xAE, 0x24, 0x62, 0xAE, 0x32, 0x73, 0xBD, 0x32, 0x73, 0xBD, 0x49, 0x8A, 
   0xD5, 0x49, 0x8A, 0xD5, 0x3C, 0x7D, 0xCE, 0x3C, 0x7D, 0xCE, 0x2F, 0x6F, 0xC4, 0x2F, 0x6F, 0xC4, 
   0x1C, 0x5B, 0xB5, 0x1C, 0x5B, 0xB5, 0x1D, 0x63, 0xBE, 0x1D, 0x63, 0xBE, 0x20, 0x67, 0xBE, 0x20, 
   0x67, 0xBE, 0x22, 0x6B, 0xBD, 0x22, 0x6B, 0xBD, 0x30, 0x79, 0xC9, 0x30, 0x79, 0xC9, 0x2F, 0x79, 
   0xC7, 0x2F, 0x79, 0xC7, 0x2B, 0x75, 0xC3, 0x2B, 0x75, 0xC3, 0x33, 0x7C, 0xCE, 0x33, 0x7C, 0xCE, 
   0x23, 0x6B, 0xBF, 0x23, 0x6B, 0xBF, 0x4A, 0xA6, 0xE7, 0x4A, 0xA6, 0xE7, 0x3A, 0x93, 0xD6, 0x3A, 
   0x93, 0xD6, 0x33, 0x8B, 0xD2, 0x33, 0x8B, 0xD2, 0x34, 0x89, 0xD3, 0x34, 0x89, 0xD3, 0x2B, 0x7D, 
   0xCA, 0x2B, 0x7D, 0xCA, 0x2A, 0x7C, 0xCA, 0x2A, 0x7C, 0xCA, 0x33, 0x84, 0xD5, 0x33, 0x84, 0xD5, 
   0x36, 0x87, 0xD8, 0x36, 0x87, 0xD8, 0x1D, 0x66, 0xB8, 0x1D, 0x66, 0xB8, 0x2E, 0x76, 0xCA, 0x2E, 
   0x76, 0xCA, 0x18, 0x5F, 0xB6, 0x18, 0x5F, 0xB6, 0x19, 0x5F, 0xBA, 0x19, 0x5F, 0xBA, 0x1F, 0x65, 
   0xC0, 0x1F, 0x65, 0xC0, 0x29, 0x70, 0xC7, 0x29, 0x70, 0xC7, 0x14, 0x5C, 0xB0, 0x14, 0x5C, 0xB0, 
   0x1F, 0x68, 0xBA, 0x1F, 0x68, 0xBA, 0x3A, 0x89, 0xC8, 0x3A, 0x89, 0xC8, 0x49, 0x97, 0xD9, 0x49, 
   0x97, 0xD9, 0x48, 0x94, 0xD6, 0x48, 0x94, 0xD6, 0x3B, 0x86, 0xCB, 0x3B, 0x86, 0xCB, 0x3E, 0x86, 
   0xCE, 0x3E, 0x86, 0xCE, 0x43, 0x8A, 0xD4, 0x43, 0x8A, 0xD4, 0x39, 0x7D, 0xCA, 0x39, 0x7D, 0xCA, 
   0x2A, 0x6E, 0xBB, 0x2A, 0x6E, 0xBB, 0x00, 0x38, 0x83, 0x00, 0x38, 0x83, 0x3B, 0x7F, 0xC8, 0x3B, 
   0x7F, 0xC8, 0x21, 0x6F, 0xB6, 0x21, 0x6F, 0xB6, 0x32, 0x80, 0xC7, 0x32, 0x80, 0xC7, 0x3D, 0x82, 
   0xCB, 0x3D, 0x82, 0xCB, 0x33, 0x71, 0xBD, 0x33, 0x71, 0xBD, 0x22, 0x65, 0xB0, 0x22, 0x65, 0xB0, 
   0x1A, 0x63, 0xAD, 0x1A, 0x63, 0xAD, 0x05, 0x3D, 0x8C, 0x05, 0x3D, 0x8C, 0x00, 0x29, 0x79, 0x00, 
   0x29, 0x79, 0x19, 0x4E, 0x9E, 0x19, 0x4E, 0x9E, 0x09, 0x41, 0x90, 0x09, 0x41, 0x90, 0x13, 0x4E, 
   0x9D, 0x13, 0x4E, 0x9D, 0x1C, 0x60, 0xAD, 0x1C, 0x60, 0xAD, 0x00, 0x44, 0x90, 0x00, 0x44, 0x90, 
   0x35, 0x83, 0xCF, 0x35, 0x83, 0xCF, 0x13, 0x54, 0xA9, 0x13, 0x54, 0xA9, 0x35, 0x79, 0xC6, 0x35, 
   0x79, 0xC6, 0x4C, 0x91, 0xDA, 0x4C, 0x91, 0xDA, 0x29, 0x6D, 0xBA, 0x29, 0x6D, 0xBA, 0x2A, 0x6A, 
   0xC2, 0x2A, 0x6A, 0xC2, 0x30, 0x6F, 0xCB, 0x30, 0x6F, 0xCB, 0x00, 0x2A, 0x82, 0x00, 0x2A, 0x82, 
   0x2C, 0x6F, 0xBE, 0x2C, 0x6F, 0xBE, 0x28, 0x64, 0xB8, 0x28, 0x64, 0xB8, 0x1C, 0x5B, 0xAB, 0x1C, 
   0x5B, 0xAB, 0x2C, 0x6D, 0xB8, 0x2C, 0x6D, 0xB8, 0x3A, 0x7E, 0xC7, 0x3A, 0x7E, 0xC7, 0x47, 0x8B, 
   0xD4, 0x47, 0x8B, 0xD4, 0x39, 0x7D, 0xCA, 0x39, 0x7D, 0xCA, 0x18, 0x5A, 0xAD, 0x18, 0x5A, 0xAD, 
   0x0A, 0x4A, 0xA2, 0x0A, 0x4A, 0xA2, 0x2F, 0x76, 0xCE, 0x2F, 0x76, 0xCE, 0x27, 0x6F, 0xC3, 0x27, 
   0x6F, 0xC3, 0x21, 0x6A, 0xBA, 0x21, 0x6A, 0xBA, 0x31, 0x7C, 0xC8, 0x31, 0x7C, 0xC8, 0x32, 0x7D, 
   0xC9, 0x32, 0x7D, 0xC9, 0x2E, 0x79, 0xC5, 0x2E, 0x79, 0xC5, 0x38, 0x81, 0xD1, 0x38, 0x81, 0xD1, 
   0x2C, 0x75, 0xC5, 0x2C, 0x75, 0xC5, 0x3E, 0xA2, 0xDC, 0x3E, 0xA2, 0xDC, 0x2F, 0x91, 0xCD, 0x2F, 
   0x91, 0xCD, 0x36, 0x94, 0xD5, 0x36, 0x94, 0xD5, 0x45, 0x9D, 0xE4, 0x45, 0x9D, 0xE4, 0x38, 0x8C, 
   0xD8, 0x38, 0x8C, 0xD8, 0x29, 0x7B, 0xC9, 0x29, 0x7B, 0xC9, 0x33, 0x84, 0xD5, 0x33, 0x84, 0xD5, 
   0x43, 0x95, 0xE6, 0x43, 0x95, 0xE6, 0x2B, 0x72, 0xC9, 0x2B, 0x72, 0xC9, 0x3B, 0x82, 0xDA, 0x3B, 
   0x82, 0xDA, 0x10, 0x55, 0xB2, 0x10, 0x55, 0xB2, 0x03, 0x47, 0xA6, 0x03, 0x47, 0xA6, 0x0C, 0x50, 
   0xAF, 0x0C, 0x50, 0xAF, 0x18, 0x5D, 0xBA, 0x18, 0x5D, 0xBA, 0x04, 0x4B, 0xA3, 0x04, 0x4B, 0xA3, 
   0x1C, 0x63, 0xBA, 0x1C, 0x63, 0xBA, 0x3C, 0x8E, 0xCF, 0x3C, 0x8E, 0xCF, 0x3C, 0x8E, 0xCF, 0x3C, 
   0x8E, 0xCF, 0x46, 0x95, 0xD8, 0x46, 0x95, 0xD8, 0x39, 0x86, 0xCB, 0x39, 0x86, 0xCB, 0x25, 0x6F, 
   0xB7, 0x25, 0x6F, 0xB7, 0x37, 0x7D, 0xCA, 0x37, 0x7D, 0xCA, 0x43, 0x87, 0xD4, 0x43, 0x87, 0xD4, 
   0x2B, 0x6D, 0xBC, 0x2B, 0x6D, 0xBC, 0x00, 0x3A, 0x86, 0x00, 0x3A, 0x86, 0x3C, 0x80, 0xCB, 0x3C, 
   0x80, 0xCB, 0x1E, 0x6D, 0xB6, 0x1E, 0x6D, 0xB6, 0x3C, 0x8A, 0xD1, 0x3C, 0x8A, 0xD1, 0x51, 0x95, 
   0xDE, 0x51, 0x95, 0xDE, 0x4D, 0x8B, 0xD2, 0x4D, 0x8B, 0xD2, 0x44, 0x84, 0xCB, 0x44, 0x84, 0xCB, 
   0x44, 0x8B, 0xCF, 0x44, 0x8B, 0xCF, 0x05, 0x3D, 0x8C, 0x05, 0x3D, 0x8C, 0x00, 0x29, 0x79, 0x00, 
   0x29, 0x79, 0x19, 0x4E, 0x9E, 0x19, 0x4E, 0x9E, 0x09, 0x41, 0x90, 0x09, 0x41, 0x90, 0x13, 0x4E, 
   0x9D, 0x13, 0x4E, 0x9D, 0x1C, 0x60, 0xAD, 0x1C, 0x60, 0xAD, 0x00, 0x44, 0x90, 0x00, 0x44, 0x90, 
   0x35, 0x83, 0xCF, 0x35, 0x83, 0xCF, 0x13, 0x54, 0xA9, 0x13, 0x54, 0xA9, 0x35, 0x79, 0xC6, 0x35, 
   0x79, 0xC6, 0x4C, 0x91, 0xDA, 0x4C, 0x91, 0xDA, 0x29, 0x6D, 0xBA, 0x29, 0x6D, 0xBA, 0x2A, 0x6A, 
   0xC2, 0x2A, 0x6A, 0xC2, 0x30, 0x6F, 0xCB, 0x30, 0x6F, 0xCB, 0x00, 0x2A, 0x82, 0x00, 0x2A, 0x82, 
   0x2C, 0x6F, 0xBE, 0x2C, 0x6F, 0xBE, 0x28, 0x64, 0xB8, 0x28, 0x64, 0xB8, 0x1C, 0x5B, 0xAB, 0x1C, 
   0x5B, 0xAB, 0x2C, 0x6D, 0xB8, 0x2C, 0x6D, 0xB8, 0x3A, 0x7E, 0xC7, 0x3A, 0x7E, 0xC7, 0x47, 0x8B, 
   0xD4, 0x47, 0x8B, 0xD4, 0x39, 0x7D, 0xCA, 0x39, 0x7D, 0xCA, 0x18, 0x5A, 0xAD, 0x18, 0x5A, 0xAD, 
   0x0A, 0x4A, 0xA2, 0x0A, 0x4A, 0xA2, 0x2F, 0x76, 0xCE, 0x2F, 0x76, 0xCE, 0x27, 0x6F, 0xC3, 0x27, 
   0x6F, 0xC3, 0x21, 0x6A, 0xBA, 0x21, 0x6A, 0xBA, 0x31, 0x7C, 0xC8, 0x31, 0x7C, 0xC8, 0x32, 0x7D, 
   0xC9, 0x32, 0x7D, 0xC9, 0x2E, 0x79, 0xC5, 0x2E, 0x79, 0xC5, 0x38, 0x81, 0xD1, 0x38, 0x81, 0xD1, 
   0x2C, 0x75, 0xC5, 0x2C, 0x75, 0xC5, 0x3E, 0xA2, 0xDC, 0x3E, 0xA2, 0xDC, 0x2F, 0x91, 0xCD, 0x2F, 
   0x91, 0xCD, 0x36, 0x94, 0xD5, 0x36, 0x94, 0xD5, 0x45, 0x9D, 0xE4, 0x45, 0x9D, 0xE4, 0x38, 0x8C, 
   0xD8, 0x38, 0x8C, 0xD8, 0x29, 0x7B, 0xC9, 0x29, 0x7B, 0xC9, 0x33, 0x84, 0xD5, 0x33, 0x84, 0xD5, 
   0x43, 0x95, 0xE6, 0x43, 0x95, 0xE6, 0x2B, 0x72, 0xC9, 0x2B, 0x72, 0xC9, 0x3B, 0x82, 0xDA, 0x3B, 
   0x82, 0xDA, 0x10, 0x55, 0xB2, 0x10, 0x55, 0xB2, 0x03, 0x47, 0xA6, 0x03, 0x47, 0xA6, 0x0C, 0x50, 
   0xAF, 0x0C, 0x50, 0xAF, 0x18, 0x5D, 0xBA, 0x18, 0x5D, 0xBA, 0x04, 0x4B, 0xA3, 0x04, 0x4B, 0xA3, 
   0x1C, 0x63, 0xBA, 0x1C, 0x63, 0xBA, 0x3C, 0x8E, 0xCF, 0x3C, 0x8E, 0xCF, 0x3C, 0x8E, 0xCF, 0x3C, 
   0x8E, 0xCF, 0x46, 0x95, 0xD8, 0x46, 0x95, 0xD8, 0x39, 0x86, 0xCB, 0x39, 0x86, 0xCB, 0x25, 0x6F, 
   0xB7, 0x25, 0x6F, 0xB7, 0x37, 0x7D, 0xCA, 0x37, 0x7D, 0xCA, 0x43, 0x87, 0xD4, 0x43, 0x87, 0xD4, 
   0x2B, 0x6D, 0xBC, 0x2B, 0x6D, 0xBC, 0x00, 0x3A, 0x86, 0x00, 0x3A, 0x86, 0x3C, 0x80, 0xCB, 0x3C, 
   0x80, 0xCB, 0x1E, 0x6D, 0xB6, 0x1E, 0x6D, 0xB6, 0x3C, 0x8A, 0xD1, 0x3C, 0x8A, 0xD1, 0x51, 0x95, 
   0xDE, 0x51, 0x95, 0xDE, 0x4D, 0x8B, 0xD2, 0x4D, 0x8B, 0xD2, 0x44, 0x84, 0xCB, 0x44, 0x84, 0xCB, 
   0x44, 0x8B, 0xCF, 0x44, 0x8B, 0xCF, 0x1C, 0x4E, 0xA1, 0x1C, 0x4E, 0xA1, 0x18, 0x50, 0xA2, 0x18, 
   0x50, 0xA2, 0x24, 0x60, 0xB4, 0x24, 0x60, 0xB4, 0x1E, 0x55, 0xAA, 0x1E, 0x55, 0xAA, 0x11, 0x3F, 
   0x97, 0x11, 0x3F, 0x97, 0x13, 0x41, 0x99, 0x13, 0x41, 0x99, 0x00, 0x30, 0x89, 0x00, 0x30, 0x89, 
   0x31, 0x76, 0xCD, 0x31, 0x76, 0xCD, 0x18, 0x5E, 0xB1, 0x18, 0x5E, 0xB1, 0x25, 0x6C, 0xBC, 0x25, 
   0x6C, 0xBC, 0x3D, 0x85, 0xD3, 0x3D, 0x85, 0xD3, 0x24, 0x6C, 0xBA, 0x24, 0x6C, 0xBA, 0x26, 0x6E, 
   0xBC, 0x26, 0x6E, 0xBC, 0x38, 0x7E, 0xD1, 0x38, 0x7E, 0xD1, 0x1A, 0x5F, 0xB6, 0x1A, 0x5F, 0xB6, 
   0x18, 0x5B, 0xB7, 0x18, 0x5B, 0xB7, 0x28, 0x6D, 0xBC, 0x28, 0x6D, 0xBC, 0x28, 0x6C, 0xB7, 0x28, 
   0x6C, 0xB7, 0x2B, 0x6E, 0xB3, 0x2B, 0x6E, 0xB3, 0x41, 0x83, 0xC4, 0x41, 0x83, 0xC4, 0x59, 0x9A, 
   0xDE, 0x59, 0x9A, 0xDE, 0x55, 0x96, 0xE1, 0x55, 0x96, 0xE1, 0x17, 0x58, 0xAD, 0x17, 0x58, 0xAD, 
   0x2D, 0x6E, 0xCA, 0x2D, 0x6E, 0xCA, 0x27, 0x6B, 0xC4, 0x27, 0x6B, 0xC4, 0x32, 0x77, 0xCE, 0x32, 
   0x77, 0xCE, 0x31, 0x77, 0xCA, 0x31, 0x77, 0xCA, 0x33, 0x7A, 0xCA, 0x33, 0x7A, 0xCA, 0x31, 0x78, 
   0xC8, 0x31, 0x78, 0xC8, 0x3C, 0x82, 0xD5, 0x3C, 0x82, 0xD5, 0x37, 0x7C, 0xD3, 0x37, 0x7C, 0xD3, 
   0x15, 0x59, 0xB2, 0x15, 0x59, 0xB2, 0x3E, 0x8F, 0xE4, 0x3E, 0x8F, 0xE4, 0x13, 0x63, 0xB6, 0x13, 
   0x63, 0xB6, 0x1C, 0x69, 0xB8, 0x1C, 0x69, 0xB8, 0x4E, 0x99, 0xE7, 0x4E, 0x99, 0xE7, 0x33, 0x7E, 
   0xCC, 0x33, 0x7E, 0xCC, 0x3F, 0x8C, 0xDB, 0x3F, 0x8C, 0xDB, 0x4F, 0x9F, 0xF2, 0x4F, 0x9F, 0xF2, 
   0x30, 0x81, 0xD6, 0x30, 0x81, 0xD6, 0x1C, 0x67, 0xB6, 0x1C, 0x67, 0xB6, 0x27, 0x6F, 0xC3, 0x27, 
   0x6F, 0xC3, 0x20, 0x64, 0xBD, 0x20, 0x64, 0xBD, 0x28, 0x69, 0xC5, 0x28, 0x69, 0xC5, 0x2B, 0x6B, 
   0xC9, 0x2B, 0x6B, 0xC9, 0x1C, 0x62, 0xBD, 0x1C, 0x62, 0xBD, 0x23, 0x6D, 0xC5, 0x23, 0x6D, 0xC5, 
   0x2B, 0x78, 0xCE, 0x2B, 0x78, 0xCE, 0x42, 0x8B, 0xCF, 0x42, 0x8B, 0xCF, 0x3C, 0x83, 0xC6, 0x3C, 
   0x83, 0xC6, 0x5C, 0xA3, 0xE3, 0x5C, 0xA3, 0xE3, 0x44, 0x86, 0xC7, 0x44, 0x86, 0xC7, 0x14, 0x55, 
   0x9A, 0x14, 0x55, 0x9A, 0x41, 0x85, 0xCE, 0x41, 0x85, 0xCE, 0x39, 0x7D, 0xCA, 0x39, 0x7D, 0xCA, 
   0x27, 0x6C, 0xBC, 0x27, 0x6C, 0xBC, 0x05, 0x3D, 0x8C, 0x05, 0x3D, 0x8C, 0x47, 0x81, 0xCC, 0x47, 
   0x81, 0xCC, 0x43, 0x84, 0xC9, 0x43, 0x84, 0xC9, 0x44, 0x8B, 0xCB, 0x44, 0x8B, 0xCB, 0x46, 0x8E, 
   0xCE, 0x46, 0x8E, 0xCE, 0x4A, 0x8F, 0xD4, 0x4A, 0x8F, 0xD4, 0x3A, 0x7B, 0xC5, 0x3A, 0x7B, 0xC5, 
   0x39, 0x77, 0xC5, 0x39, 0x77, 0xC5, 0x1C, 0x4E, 0xA1, 0x1C, 0x4E, 0xA1, 0x18, 0x50, 0xA2, 0x18, 
   0x50, 0xA2, 0x24, 0x60, 0xB4, 0x24, 0x60, 0xB4, 0x1E, 0x55, 0xAA, 0x1E, 0x55, 0xAA, 0x11, 0x3F, 
   0x97, 0x11, 0x3F, 0x97, 0x13, 0x41, 0x99, 0x13, 0x41, 0x99, 0x00, 0x30, 0x89, 0x00, 0x30, 0x89, 
   0x31, 0x76, 0xCD, 0x31, 0x76, 0xCD, 0x18, 0x5E, 0xB1, 0x18, 0x5E, 0xB1, 0x25, 0x6C, 0xBC, 0x25, 
   0x6C, 0xBC, 0x3D, 0x85, 0xD3, 0x3D, 0x85, 0xD3, 0x24, 0x6C, 0xBA, 0x24, 0x6C, 0xBA, 0x26, 0x6E, 
   0xBC, 0x26, 0x6E, 0xBC, 0x38, 0x7E, 0xD1, 0x38, 0x7E, 0xD1, 0x1A, 0x5F, 0xB6, 0x1A, 0x5F, 0xB6, 
   0x18, 0x5B, 0xB7, 0x18, 0x5B, 0xB7, 0x28, 0x6D, 0xBC, 0x28, 0x6D, 0xBC, 0x28, 0x6C, 0xB7, 0x28, 
   0x6C, 0xB7, 0x2B, 0x6E, 0xB3, 0x2B, 0x6E, 0xB3, 0x41, 0x83, 0xC4, 0x41, 0x83, 0xC4, 0x59, 0x9A, 
   0xDE, 0x59, 0x9A, 0xDE, 0x55, 0x96, 0xE1, 0x55, 0x96, 0xE1, 0x17, 0x58, 0xAD, 0x17, 0x58, 0xAD, 
   0x2D, 0x6E, 0xCA, 0x2D, 0x6E, 0xCA, 0x27, 0x6B, 0xC4, 0x27, 0x6B, 0xC4, 0x32, 0x77, 0xCE, 0x32, 
   0x77, 0xCE, 0x31, 0x77, 0xCA, 0x31, 0x77, 0xCA, 0x33, 0x7A, 0xCA, 0x33, 0x7A, 0xCA, 0x31, 0x78, 
   0xC8, 0x31, 0x78, 0xC8, 0x3C, 0x82, 0xD5, 0x3C, 0x82, 0xD5, 0x37, 0x7C, 0xD3, 0x37, 0x7C, 0xD3, 
   0x15, 0x59, 0xB2, 0x15, 0x59, 0xB2, 0x3E, 0x8F, 0xE4, 0x3E, 0x8F, 0xE4, 0x13, 0x63, 0xB6, 0x13, 
   0x63, 0xB6, 0x1C, 0x69, 0xB8, 0x1C, 0x69, 0xB8, 0x4E, 0x99, 0xE7, 0x4E, 0x99, 0xE7, 0x33, 0x7E, 
   0xCC, 0x33, 0x7E, 0xCC, 0x3F, 0x8C, 0xDB, 0x3F, 0x8C, 0xDB, 0x4F, 0x9F, 0xF2, 0x4F, 0x9F, 0xF2, 
   0x30, 0x81, 0xD6, 0x30, 0x81, 0xD6, 0x1C, 0x67, 0xB6, 0x1C, 0x67, 0xB6, 0x27, 0x6F, 0xC3, 0x27, 
   0x6F, 0xC3, 0x20, 0x64, 0xBD, 0x20, 0x64, 0xBD, 0x28, 0x69, 0xC5, 0x28, 0x69, 0xC5, 0x2B, 0x6B, 
   0xC9, 0x2B, 0x6B, 0xC9, 0x1C, 0x62, 0xBD, 0x1C, 0x62, 0xBD, 0x23, 0x6D, 0xC5, 0x23, 0x6D, 0xC5, 
   0x2B, 0x78, 0xCE, 0x2B, 0x78, 0xCE, 0x42, 0x8B, 0xCF, 0x42, 0x8B, 0xCF, 0x3C, 0x83, 0xC6, 0x3C, 
   0x83, 0xC6, 0x5C, 0xA3, 0xE3, 0x5C, 0xA3, 0xE3, 0x44, 0x86, 0xC7, 0x44, 0x86, 0xC7, 0x14, 0x55, 
   0x9A, 0x14, 0x55, 0x9A, 0x41, 0x85, 0xCE, 0x41, 0x85, 0xCE, 0x39, 0x7D, 0xCA, 0x39, 0x7D, 0xCA, 
   0x27, 0x6C, 0xBC, 0x27, 0x6C, 0xBC, 0x05, 0x3D, 0x8C, 0x05, 0x3D, 0x8C, 0x47, 0x81, 0xCC, 0x47, 
   0x81, 0xCC, 0x43, 0x84, 0xC9, 0x43, 0x84, 0xC9, 0x44, 0x8B, 0xCB, 0x44, 0x8B, 0xCB, 0x46, 0x8E, 
   0xCE, 0x46, 0x8E, 0xCE, 0x4A, 0x8F, 0xD4, 0x4A, 0x8F, 0xD4, 0x3A, 0x7B, 0xC5, 0x3A, 0x7B, 0xC5, 
   0x39, 0x77, 0xC5, 0x39, 0x77, 0xC5, 0x31, 0x63, 0xB6, 0x31, 0x63, 0xB6, 0x27, 0x5F, 0xB1, 0x27, 
   0x5F, 0xB1, 0x1F, 0x5B, 0xAD, 0x1F, 0x5B, 0xAD, 0x21, 0x58, 0xAD, 0x21, 0x58, 0xAD, 0x1D, 0x4B, 
   0xA3, 0x1D, 0x4B, 0xA3, 0x1F, 0x4D, 0xA5, 0x1F, 0x4D, 0xA5, 0x04, 0x3C, 0x95, 0x04, 0x3C, 0x95, 
   0x2B, 0x70, 0xC7, 0x2B, 0x70, 0xC7, 0x26, 0x6C, 0xBF, 0x26, 0x6C, 0xBF, 0x22, 0x69, 0xB9, 0x22, 
   0x69, 0xB9, 0x30, 0x78, 0xC6, 0x30, 0x78, 0xC6, 0x3F, 0x87, 0xD5, 0x3F, 0x87, 0xD5, 0x37, 0x7F, 
   0xCD, 0x37, 0x7F, 0xCD, 0x25, 0x6B, 0xBE, 0x25, 0x6B, 0xBE, 0x23, 0x68, 0xBF, 0x23, 0x68, 0xBF, 
   0x31, 0x74, 0xD0, 0x31, 0x74, 0xD0, 0x35, 0x7A, 0xC9, 0x35, 0x7A, 0xC9, 0x32, 0x76, 0xC1, 0x32, 
   0x76, 0xC1, 0x26, 0x69, 0xAE, 0x26, 0x69, 0xAE, 0x5B, 0x9C, 0xE0, 0x5B, 0x9C, 0xE0, 0x4C, 0x8D, 
   0xD2, 0x4C, 0x8D, 0xD2, 0x51, 0x91, 0xDF, 0x51, 0x91, 0xDF, 0x2F, 0x70, 0xC5, 0x2F, 0x70, 0xC5, 
   0x27, 0x68, 0xC4, 0x27, 0x68, 0xC4, 0x2D, 0x71, 0xCA, 0x2D, 0x71, 0xCA, 0x2B, 0x70, 0xC7, 0x2B, 
   0x70, 0xC7, 0x30, 0x76, 0xC9, 0x30, 0x76, 0xC9, 0x31, 0x78, 0xC8, 0x31, 0x78, 0xC8, 0x36, 0x7D, 
   0xCD, 0x36, 0x7D, 0xCD, 0x36, 0x7C, 0xCF, 0x36, 0x7C, 0xCF, 0x3A, 0x7F, 0xD6, 0x3A, 0x7F, 0xD6, 
   0x25, 0x69, 0xC2, 0x25, 0x69, 0xC2, 0x4C, 0x9D, 0xF2, 0x4C, 0x9D, 0xF2, 0x17, 0x67, 0xBA, 0x17, 
   0x67, 0xBA, 0x2C, 0x79, 0xC8, 0x2C, 0x79, 0xC8, 0x4D, 0x98, 0xE6, 0x4D, 0x98, 0xE6, 0x30, 0x7B, 
   0xC9, 0x30, 0x7B, 0xC9, 0x3C, 0x89, 0xD8, 0x3C, 0x89, 0xD8, 0x33, 0x83, 0xD6, 0x33, 0x83, 0xD6, 
   0x31, 0x82, 0xD7, 0x31, 0x82, 0xD7, 0x1D, 0x66, 0xBA, 0x1D, 0x66, 0xBA, 0x1A, 0x61, 0xB8, 0x1A, 
   0x61, 0xB8, 0x06, 0x4A, 0xA3, 0x06, 0x4A, 0xA3, 0x0D, 0x4E, 0xAA, 0x0D, 0x4E, 0xAA, 0x1C, 0x5D, 
   0xB9, 0x1C, 0x5D, 0xB9, 0x20, 0x64, 0xBD, 0x20, 0x64, 0xBD, 0x34, 0x7D, 0xD1, 0x34, 0x7D, 0xD1, 
   0x3E, 0x8A, 0xDC, 0x3E, 0x8A, 0xDC, 0x33, 0x7E, 0xC3, 0x33, 0x7E, 0xC3, 0x36, 0x7D, 0xC1, 0x36, 
   0x7D, 0xC1, 0x5A, 0x9F, 0xE4, 0x5A, 0x9F, 0xE4, 0x49, 0x8C, 0xD1, 0x49, 0x8C, 0xD1, 0x20, 0x62, 
   0xA9, 0x20, 0x62, 0xA9, 0x4B, 0x8E, 0xD9, 0x4B, 0x8E, 0xD9, 0x3D, 0x7F, 0xD0, 0x3D, 0x7F, 0xD0, 
   0x23, 0x69, 0xBC, 0x23, 0x69, 0xBC, 0x03, 0x38, 0x89, 0x03, 0x38, 0x89, 0x37, 0x6F, 0xBE, 0x37, 
   0x6F, 0xBE, 0x2D, 0x6B, 0xB2, 0x2D, 0x6B, 0xB2, 0x2E, 0x71, 0xB6, 0x2E, 0x71, 0xB6, 0x31, 0x74, 
   0xB9, 0x31, 0x74, 0xB9, 0x35, 0x77, 0xBE, 0x35, 0x77, 0xBE, 0x2B, 0x69, 0xB7, 0x2B, 0x69, 0xB7, 
   0x2F, 0x6A, 0xBA, 0x2F, 0x6A, 0xBA, 0x31, 0x63, 0xB6, 0x31, 0x63, 0xB6, 0x27, 0x5F, 0xB1, 0x27, 
   0x5F, 0xB1, 0x1F, 0x5B, 0xAD, 0x1F, 0x5B, 0xAD, 0x21, 0x58, 0xAD, 0x21, 0x58, 0xAD, 0x1D, 0x4B, 
   0xA3, 0x1D, 0x4B, 0xA3, 0x1F, 0x4D, 0xA5, 0x1F, 0x4D, 0xA5, 0x04, 0x3C, 0x95, 0x04, 0x3C, 0x95, 
   0x2B, 0x70, 0xC7, 0x2B, 0x70, 0xC7, 0x26, 0x6C, 0xBF, 0x26, 0x6C, 0xBF, 0x22, 0x69, 0xB9, 0x22, 
   0x69, 0xB9, 0x30, 0x78, 0xC6, 0x30, 0x78, 0xC6, 0x3F, 0x87, 0xD5, 0x3F, 0x87, 0xD5, 0x37, 0x7F, 
   0xCD, 0x37, 0x7F, 0xCD, 0x25, 0x6B, 0xBE, 0x25, 0x6B, 0xBE, 0x23, 0x68, 0xBF, 0x23, 0x68, 0xBF, 
   0x31, 0x74, 0xD0, 0x31, 0x74, 0xD0, 0x35, 0x7A, 0xC9, 0x35, 0x7A, 0xC9, 0x32, 0x76, 0xC1, 0x32, 
   0x76, 0xC1, 0x26, 0x69, 0xAE, 0x26, 0x69, 0xAE, 0x5B, 0x9C, 0xE0, 0x5B, 0x9C, 0xE0, 0x4C, 0x8D, 
   0xD2, 0x4C, 0x8D, 0xD2, 0x51, 0x91, 0xDF, 0x51, 0x91, 0xDF, 0x2F, 0x70, 0xC5, 0x2F, 0x70, 0xC5, 
   0x27, 0x68, 0xC4, 0x27, 0x68, 0xC4, 0x2D, 0x71, 0xCA, 0x2D, 0x71, 0xCA, 0x2B, 0x70, 0xC7, 0x2B, 
   0x70, 0xC7, 0x30, 0x76, 0xC9, 0x30, 0x76, 0xC9, 0x31, 0x78, 0xC8, 0x31, 0x78, 0xC8, 0x36, 0x7D, 
   0xCD, 0x36, 0x7D, 0xCD, 0x36, 0x7C, 0xCF, 0x36, 0x7C, 0xCF, 0x3A, 0x7F, 0xD6, 0x3A, 0x7F, 0xD6, 
   0x25, 0x69, 0xC2, 0x25, 0x69, 0xC2, 0x4C, 0x9D, 0xF2, 0x4C, 0x9D, 0xF2, 0x17, 0x67, 0xBA, 0x17, 
   0x67, 0xBA, 0x2C, 0x79, 0xC8, 0x2C, 0x79, 0xC8, 0x4D, 0x98, 0xE6, 0x4D, 0x98, 0xE6, 0x30, 0x7B, 
   0xC9, 0x30, 0x7B, 0xC9, 0x3C, 0x89, 0xD8, 0x3C, 0x89, 0xD8, 0x33, 0x83, 0xD6, 0x33, 0x83, 0xD6, 
   0x31, 0x82, 0xD7, 0x31, 0x82, 0xD7, 0x1D, 0x66, 0xBA, 0x1D, 0x66, 0xBA, 0x1A, 0x61, 0xB8, 0x1A, 
   0x61, 0xB8, 0x06, 0x4A, 0xA3, 0x06, 0x4A, 0xA3, 0x0D, 0x4E, 0xAA, 0x0D, 0x4E, 0xAA, 0x1C, 0x5D, 
   0xB9, 0x1C, 0x5D, 0xB9, 0x20, 0x64, 0xBD, 0x20, 0x64, 0xBD, 0x34, 0x7D, 0xD1, 0x34, 0x7D, 0xD1, 
   0x3E, 0x8A, 0xDC, 0x3E, 0x8A, 0xDC, 0x33, 0x7E, 0xC3, 0x33, 0x7E, 0xC3, 0x36, 0x7D, 0xC1, 0x36, 
   0x7D, 0xC1, 0x5A, 0x9F, 0xE4, 0x5A, 0x9F, 0xE4, 0x49, 0x8C, 0xD1, 0x49, 0x8C, 0xD1, 0x20, 0x62, 
   0xA9, 0x20, 0x62, 0xA9, 0x4B, 0x8E, 0xD9, 0x4B, 0x8E, 0xD9, 0x3D, 0x7F, 0xD0, 0x3D, 0x7F, 0xD0, 
   0x23, 0x69, 0xBC, 0x23, 0x69, 0xBC, 0x03, 0x38, 0x89, 0x03, 0x38, 0x89, 0x37, 0x6F, 0xBE, 0x37, 
   0x6F, 0xBE, 0x2D, 0x6B, 0xB2, 0x2D, 0x6B, 0xB2, 0x2E, 0x71, 0xB6, 0x2E, 0x71, 0xB6, 0x31, 0x74, 
   0xB9, 0x31, 0x74, 0xB9, 0x35, 0x77, 0xBE, 0x35, 0x77, 0xBE, 0x2B, 0x69, 0xB7, 0x2B, 0x69, 0xB7, 
   0x2F, 0x6A, 0xBA, 0x2F, 0x6A, 0xBA, 0x35, 0x67, 0xB9, 0x35, 0x67, 0xB9, 0x2C, 0x64, 0xB6, 0x2C, 
   0x64, 0xB6, 0x13, 0x4F, 0xA1, 0x13, 0x4F, 0xA1, 0x21, 0x58, 0xAD, 0x21, 0x58, 0xAD, 0x27, 0x56, 
   0xAC, 0x27, 0x56, 0xAC, 0x20, 0x4E, 0xA6, 0x20, 0x4E, 0xA6, 0x02, 0x3B, 0x91, 0x02, 0x3B, 0x91, 
   0x10, 0x56, 0xAA, 0x10, 0x56, 0xAA, 0x32, 0x78, 0xCB, 0x32, 0x78, 0xCB, 0x28, 0x6F, 0xBF, 0x28, 
   0x6F, 0xBF, 0x31, 0x79, 0xC7, 0x31, 0x79, 0xC7, 0x4E, 0x96, 0xE4, 0x4E, 0x96, 0xE4, 0x36, 0x7E, 
   0xCC, 0x36, 0x7E, 0xCC, 0x15, 0x5B, 0xAE, 0x15, 0x5B, 0xAE, 0x27, 0x6C, 0xC3, 0x27, 0x6C, 0xC3, 
   0x31, 0x74, 0xD0, 0x31, 0x74, 0xD0, 0x3E, 0x83, 0xD2, 0x3E, 0x83, 0xD2, 0x38, 0x7C, 0xC7, 0x38, 
   0x7C, 0xC7, 0x21, 0x63, 0xAA, 0x21, 0x63, 0xAA, 0x66, 0xA7, 0xEC, 0x66, 0xA7, 0xEC, 0x36, 0x76, 
   0xBD, 0x36, 0x76, 0xBD, 0x40, 0x80, 0xCE, 0x40, 0x80, 0xCE, 0x37, 0x78, 0xCD, 0x37, 0x78, 0xCD, 
   0x17, 0x58, 0xB4, 0x17, 0x58, 0xB4, 0x32, 0x76, 0xCF, 0x32, 0x76, 0xCF, 0x20, 0x65, 0xBC, 0x20, 
   0x65, 0xBC, 0x2C, 0x72, 0xC5, 0x2C, 0x72, 0xC5, 0x22, 0x69, 0xB9, 0x22, 0x69, 0xB9, 0x2D, 0x74, 
   0xC4, 0x2D, 0x74, 0xC4, 0x1C, 0x62, 0xB5, 0x1C, 0x62, 0xB5, 0x26, 0x6B, 0xC2, 0x26, 0x6B, 0xC2, 
   0x19, 0x5D, 0xB6, 0x19, 0x5D, 0xB6, 0x39, 0x8A, 0xDF, 0x39, 0x8A, 0xDF, 0x2A, 0x7A, 0xCD, 0x2A, 
   0x7A, 0xCD, 0x46, 0x93, 0xE2, 0x46, 0x93, 0xE2, 0x33, 0x7E, 0xCC, 0x33, 0x7E, 0xCC, 0x1C, 0x67, 
   0xB5, 0x1C, 0x67, 0xB5, 0x4C, 0x99, 0xE8, 0x4C, 0x99, 0xE8, 0x2C, 0x7C, 0xCF, 0x2C, 0x7C, 0xCF, 
   0x20, 0x71, 0xC6, 0x20, 0x71, 0xC6, 0x10, 0x5A, 0xB2, 0x10, 0x5A, 0xB2, 0x13, 0x5B, 0xB3, 0x13, 
   0x5B, 0xB3, 0x06, 0x49, 0xA5, 0x06, 0x49, 0xA5, 0x07, 0x48, 0xA4, 0x07, 0x48, 0xA4, 0x03, 0x45, 
   0x9E, 0x03, 0x45, 0x9E, 0x00, 0x46, 0x9A, 0x00, 0x46, 0x9A, 0x15, 0x60, 0xAF, 0x15, 0x60, 0xAF, 
   0x1F, 0x6D, 0xB9, 0x1F, 0x6D, 0xB9, 0x2D, 0x76, 0xC0, 0x2D, 0x76, 0xC0, 0x31, 0x79, 0xC1, 0x31, 
   0x79, 0xC1, 0x50, 0x95, 0xDB, 0x50, 0x95, 0xDB, 0x44, 0x86, 0xCD, 0x44, 0x86, 0xCD, 0x21, 0x62, 
   0xAC, 0x21, 0x62, 0xAC, 0x49, 0x8B, 0xDA, 0x49, 0x8B, 0xDA, 0x36, 0x7A, 0xCD, 0x36, 0x7A, 0xCD, 
   0x1C, 0x61, 0xB8, 0x1C, 0x61, 0xB8, 0x14, 0x43, 0x99, 0x14, 0x43, 0x99, 0x3A, 0x6C, 0xBF, 0x3A, 
   0x6C, 0xBF, 0x2B, 0x63, 0xB2, 0x2B, 0x63, 0xB2, 0x32, 0x6E, 0xBA, 0x32, 0x6E, 0xBA, 0x2F, 0x6B, 
   0xB7, 0x2F, 0x6B, 0xB7, 0x2A, 0x65, 0xB4, 0x2A, 0x65, 0xB4, 0x1D, 0x55, 0xA7, 0x1D, 0x55, 0xA7, 
   0x1E, 0x54, 0xA9, 0x1E, 0x54, 0xA9, 0x35, 0x67, 0xB9, 0x35, 0x67, 0xB9, 0x2C, 0x64, 0xB6, 0x2C, 
   0x64, 0xB6, 0x13, 0x4F, 0xA1, 0x13, 0x4F, 0xA1, 0x21, 0x58, 0xAD, 0x21, 0x58, 0xAD, 0x27, 0x56, 
   0xAC, 0x27, 0x56, 0xAC, 0x20, 0x4E, 0xA6, 0x20, 0x4E, 0xA6, 0x02, 0x3B, 0x91, 0x02, 0x3B, 0x91, 
   0x10, 0x56, 0xAA, 0x10, 0x56, 0xAA, 0x32, 0x78, 0xCB, 0x32, 0x78, 0xCB, 0x28, 0x6F, 0xBF, 0x28, 
   0x6F, 0xBF, 0x31, 0x79, 0xC7, 0x31, 0x79, 0xC7, 0x4E, 0x96, 0xE4, 0x4E, 0x96, 0xE4, 0x36, 0x7E, 
   0xCC, 0x36, 0x7E, 0xCC, 0x15, 0x5B, 0xAE, 0x15, 0x5B, 0xAE, 0x27, 0x6C, 0xC3, 0x27, 0x6C, 0xC3, 
   0x31, 0x74, 0xD0, 0x31, 0x74, 0xD0, 0x3E, 0x83, 0xD2, 0x3E, 0x83, 0xD2, 0x38, 0x7C, 0xC7, 0x38, 
   0x7C, 0xC7, 0x21, 0x63, 0xAA, 0x21, 0x63, 0xAA, 0x66, 0xA7, 0xEC, 0x66, 0xA7, 0xEC, 0x36, 0x76, 
   0xBD, 0x36, 0x76, 0xBD, 0x40, 0x80, 0xCE, 0x40, 0x80, 0xCE, 0x37, 0x78, 0xCD, 0x37, 0x78, 0xCD, 
   0x17, 0x58, 0xB4, 0x17, 0x58, 0xB4, 0x32, 0x76, 0xCF, 0x32, 0x76, 0xCF, 0x20, 0x65, 0xBC, 0x20, 
   0x65, 0xBC, 0x2C, 0x72, 0xC5, 0x2C, 0x72, 0xC5, 0x22, 0x69, 0xB9, 0x22, 0x69, 0xB9, 0x2D, 0x74, 
   0xC4, 0x2D, 0x74, 0xC4, 0x1C, 0x62, 0xB5, 0x1C, 0x62, 0xB5, 0x26, 0x6B, 0xC2, 0x26, 0x6B, 0xC2, 
   0x19, 0x5D, 0xB6, 0x19, 0x5D, 0xB6, 0x39, 0x8A, 0xDF, 0x39, 0x8A, 0xDF, 0x2A, 0x7A, 0xCD, 0x2A, 
   0x7A, 0xCD, 0x46, 0x93, 0xE2, 0x46, 0x93, 0xE2, 0x33, 0x7E, 0xCC, 0x33, 0x7E, 0xCC, 0x1C, 0x67, 
   0xB5, 0x1C, 0x67, 0xB5, 0x4C, 0x99, 0xE8, 0x4C, 0x99, 0xE8, 0x2C, 0x7C, 0xCF, 0x2C, 0x7C, 0xCF, 
   0x20, 0x71, 0xC6, 0x20, 0x71, 0xC6, 0x10, 0x5A, 0xB2, 0x10, 0x5A, 0xB2, 0x13, 0x5B, 0xB3, 0x13, 
   0x5B, 0xB3, 0x06, 0x49, 0xA5, 0x06, 0x49, 0xA5, 0x07, 0x48, 0xA4, 0x07, 0x48, 0xA4, 0x03, 0x45, 
   0x9E, 0x03, 0x45, 0x9E, 0x00, 0x46, 0x9A, 0x00, 0x46, 0x9A, 0x15, 0x60, 0xAF, 0x15, 0x60, 0xAF, 
   0x1F, 0x6D, 0xB9, 0x1F, 0x6D, 0xB9, 0x2D, 0x76, 0xC0, 0x2D, 0x76, 0xC0, 0x31, 0x79, 0xC1, 0x31, 
   0x79, 0xC1, 0x50, 0x95, 0xDB, 0x50, 0x95, 0xDB, 0x44, 0x86, 0xCD, 0x44, 0x86, 0xCD, 0x21, 0x62, 
   0xAC, 0x21, 0x62, 0xAC, 0x49, 0x8B, 0xDA, 0x49, 0x8B, 0xDA, 0x36, 0x7A, 0xCD, 0x36, 0x7A, 0xCD, 
   0x1C, 0x61, 0xB8, 0x1C, 0x61, 0xB8, 0x14, 0x43, 0x99, 0x14, 0x43, 0x99, 0x3A, 0x6C, 0xBF, 0x3A, 
   0x6C, 0xBF, 0x2B, 0x63, 0xB2, 0x2B, 0x63, 0xB2, 0x32, 0x6E, 0xBA, 0x32, 0x6E, 0xBA, 0x2F, 0x6B, 
   0xB7, 0x2F, 0x6B, 0xB7, 0x2A, 0x65, 0xB4, 0x2A, 0x65, 0xB4, 0x1D, 0x55, 0xA7, 0x1D, 0x55, 0xA7, 
   0x1E, 0x54, 0xA9, 0x1E, 0x54, 0xA9, 0x21, 0x53, 0xA5, 0x21, 0x53, 0xA5, 0x25, 0x5D, 0xAE, 0x25, 
   0x5D, 0xAE, 0x0D, 0x4A, 0x9A, 0x0D, 0x4A, 0x9A, 0x28, 0x60, 0xB2, 0x28, 0x60, 0xB2, 0x32, 0x61, 
   0xB7, 0x32, 0x61, 0xB7, 0x25, 0x54, 0xAA, 0x25, 0x54, 0xAA, 0x09, 0x42, 0x98, 0x09, 0x42, 0x98, 
   0x0A, 0x50, 0xA4, 0x0A, 0x50, 0xA4, 0x2C, 0x72, 0xC5, 0x2C, 0x72, 0xC5, 0x25, 0x6C, 0xBC, 0x25, 
   0x6C, 0xBC, 0x40, 0x88, 0xD6, 0x40, 0x88, 0xD6, 0x45, 0x8D, 0xDB, 0x45, 0x8D, 0xDB, 0x29, 0x71, 
   0xBF, 0x29, 0x71, 0xBF, 0x26, 0x6C, 0xBF, 0x26, 0x6C, 0xBF, 0x2D, 0x72, 0xC9, 0x2D, 0x72, 0xC9, 
   0x24, 0x67, 0xC3, 0x24, 0x67, 0xC3, 0x3B, 0x81, 0xCE, 0x3B, 0x81, 0xCE, 0x34, 0x78, 0xC3, 0x34, 
   0x78, 0xC3, 0x26, 0x67, 0xB1, 0x26, 0x67, 0xB1, 0x4E, 0x8D, 0xD7, 0x4E, 0x8D, 0xD7, 0x26, 0x64, 
   0xB0, 0x26, 0x64, 0xB0, 0x2B, 0x6A, 0xBA, 0x2B, 0x6A, 0xBA, 0x22, 0x63, 0xB8, 0x22, 0x63, 0xB8, 
   0x0A, 0x4C, 0xA5, 0x0A, 0x4C, 0xA5, 0x2B, 0x6F, 0xC8, 0x2B, 0x6F, 0xC8, 0x16, 0x5B, 0xB2, 0x16, 
   0x5B, 0xB2, 0x2E, 0x74, 0xC7, 0x2E, 0x74, 0xC7, 0x1B, 0x62, 0xB2, 0x1B, 0x62, 0xB2, 0x36, 0x7D, 
   0xCD, 0x36, 0x7D, 0xCD, 0x2C, 0x72, 0xC5, 0x2C, 0x72, 0xC5, 0x39, 0x7E, 0xD5, 0x39, 0x7E, 0xD5, 
   0x29, 0x6D, 0xC6, 0x29, 0x6D, 0xC6, 0x3A, 0x8B, 0xE0, 0x3A, 0x8B, 0xE0, 0x16, 0x66, 0xB9, 0x16, 
   0x66, 0xB9, 0x26, 0x73, 0xC2, 0x26, 0x73, 0xC2, 0x40, 0x8B, 0xD9, 0x40, 0x8B, 0xD9, 0x36, 0x81, 
   0xCF, 0x36, 0x81, 0xCF, 0x36, 0x83, 0xD2, 0x36, 0x83, 0xD2, 0x14, 0x64, 0xB7, 0x14, 0x64, 0xB7, 
   0x32, 0x83, 0xD8, 0x32, 0x83, 0xD8, 0x2A, 0x76, 0xD0, 0x2A, 0x76, 0xD0, 0x1E, 0x67, 0xC2, 0x1E, 
   0x67, 0xC2, 0x0D, 0x52, 0xAF, 0x0D, 0x52, 0xAF, 0x1C, 0x5D, 0xB9, 0x1C, 0x5D, 0xB9, 0x29, 0x6C, 
   0xC3, 0x29, 0x6C, 0xC3, 0x2E, 0x74, 0xC7, 0x2E, 0x74, 0xC7, 0x36, 0x81, 0xCD, 0x36, 0x81, 0xCD, 
   0x26, 0x74, 0xBB, 0x26, 0x74, 0xBB, 0x34, 0x7F, 0xCB, 0x34, 0x7F, 0xCB, 0x3C, 0x83, 0xCD, 0x3C, 
   0x83, 0xCD, 0x48, 0x8D, 0xD6, 0x48, 0x8D, 0xD6, 0x37, 0x7B, 0xC4, 0x37, 0x7B, 0xC4, 0x19, 0x5B, 
   0xA9, 0x19, 0x5B, 0xA9, 0x3E, 0x80, 0xD1, 0x3E, 0x80, 0xD1, 0x30, 0x73, 0xC8, 0x30, 0x73, 0xC8, 
   0x14, 0x5B, 0xB3, 0x14, 0x5B, 0xB3, 0x0B, 0x35, 0x8E, 0x0B, 0x35, 0x8E, 0x1F, 0x4B, 0xA4, 0x1F, 
   0x4B, 0xA4, 0x0B, 0x3C, 0x92, 0x0B, 0x3C, 0x92, 0x13, 0x49, 0x9E, 0x13, 0x49, 0x9E, 0x0C, 0x43, 
   0x98, 0x0C, 0x43, 0x98, 0x09, 0x3F, 0x94, 0x09, 0x3F, 0x94, 0x02, 0x34, 0x8C, 0x02, 0x34, 0x8C, 
   0x08, 0x38, 0x90, 0x08, 0x38, 0x90, 0x21, 0x53, 0xA5, 0x21, 0x53, 0xA5, 0x25, 0x5D, 0xAE, 0x25, 
   0x5D, 0xAE, 0x0D, 0x4A, 0x9A, 0x0D, 0x4A, 0x9A, 0x28, 0x60, 0xB2, 0x28, 0x60, 0xB2, 0x32, 0x61, 
   0xB7, 0x32, 0x61, 0xB7, 0x25, 0x54, 0xAA, 0x25, 0x54, 0xAA, 0x09, 0x42, 0x98, 0x09, 0x42, 0x98, 
   0x0A, 0x50, 0xA4, 0x0A, 0x50, 0xA4, 0x2C, 0x72, 0xC5, 0x2C, 0x72, 0xC5, 0x25, 0x6C, 0xBC, 0x25, 
   0x6C, 0xBC, 0x40, 0x88, 0xD6, 0x40, 0x88, 0xD6, 0x45, 0x8D, 0xDB, 0x45, 0x8D, 0xDB, 0x29, 0x71, 
   0xBF, 0x29, 0x71, 0xBF, 0x26, 0x6C, 0xBF, 0x26, 0x6C, 0xBF, 0x2D, 0x72, 0xC9, 0x2D, 0x72, 0xC9, 
   0x24, 0x67, 0xC3, 0x24, 0x67, 0xC3, 0x3B, 0x81, 0xCE, 0x3B, 0x81, 0xCE, 0x34, 0x78, 0xC3, 0x34, 
   0x78, 0xC3, 0x26, 0x67, 0xB1, 0x26, 0x67, 0xB1, 0x4E, 0x8D, 0xD7, 0x4E, 0x8D, 0xD7, 0x26, 0x64, 
   0xB0, 0x26, 0x64, 0xB0, 0x2B, 0x6A, 0xBA, 0x2B, 0x6A, 0xBA, 0x22, 0x63, 0xB8, 0x22, 0x63, 0xB8, 
   0x0A, 0x4C, 0xA5, 0x0A, 0x4C, 0xA5, 0x2B, 0x6F, 0xC8, 0x2B, 0x6F, 0xC8, 0x16, 0x5B, 0xB2, 0x16, 
   0x5B, 0xB2, 0x2E, 0x74, 0xC7, 0x2E, 0x74, 0xC7, 0x1B, 0x62, 0xB2, 0x1B, 0x62, 0xB2, 0x36, 0x7D, 
   0xCD, 0x36, 0x7D, 0xCD, 0x2C, 0x72, 0xC5, 0x2C, 0x72, 0xC5, 0x39, 0x7E, 0xD5, 0x39, 0x7E, 0xD5, 
   0x29, 0x6D, 0xC6, 0x29, 0x6D, 0xC6, 0x3A, 0x8B, 0xE0, 0x3A, 0x8B, 0xE0, 0x16, 0x66, 0xB9, 0x16, 
   0x66, 0xB9, 0x26, 0x73, 0xC2, 0x26, 0x73, 0xC2, 0x40, 0x8B, 0xD9, 0x40, 0x8B, 0xD9, 0x36, 0x81, 
   0xCF, 0x36, 0x81, 0xCF, 0x36, 0x83, 0xD2, 0x36, 0x83, 0xD2, 0x14, 0x64, 0xB7, 0x14, 0x64, 0xB7, 
   0x32, 0x83, 0xD8, 0x32, 0x83, 0xD8, 0x2A, 0x76, 0xD0, 0x2A, 0x76, 0xD0, 0x1E, 0x67, 0xC2, 0x1E, 
   0x67, 0xC2, 0x0D, 0x52, 0xAF, 0x0D, 0x52, 0xAF, 0x1C, 0x5D, 0xB9, 0x1C, 0x5D, 0xB9, 0x29, 0x6C, 
   0xC3, 0x29, 0x6C, 0xC3, 0x2E, 0x74, 0xC7, 0x2E, 0x74, 0xC7, 0x36, 0x81, 0xCD, 0x36, 0x81, 0xCD, 
   0x26, 0x74, 0xBB, 0x26, 0x74, 0xBB, 0x34, 0x7F, 0xCB, 0x34, 0x7F, 0xCB, 0x3C, 0x83, 0xCD, 0x3C, 
   0x83, 0xCD, 0x48, 0x8D, 0xD6, 0x48, 0x8D, 0xD6, 0x37, 0x7B, 0xC4, 0x37, 0x7B, 0xC4, 0x19, 0x5B, 
   0xA9, 0x19, 0x5B, 0xA9, 0x3E, 0x80, 0xD1, 0x3E, 0x80, 0xD1, 0x30, 0x73, 0xC8, 0x30, 0x73, 0xC8, 
   0x14, 0x5B, 0xB3, 0x14, 0x5B, 0xB3, 0x0B, 0x35, 0x8E, 0x0B, 0x35, 0x8E, 0x1F, 0x4B, 0xA4, 0x1F, 
   0x4B, 0xA4, 0x0B, 0x3C, 0x92, 0x0B, 0x3C, 0x92, 0x13, 0x49, 0x9E, 0x13, 0x49, 0x9E, 0x0C, 0x43, 
   0x98, 0x0C, 0x43, 0x98, 0x09, 0x3F, 0x94, 0x09, 0x3F, 0x94, 0x02, 0x34, 0x8C, 0x02, 0x34, 0x8C, 
   0x08, 0x38, 0x90, 0x08, 0x38, 0x90, 0x16, 0x49, 0x99, 0x16, 0x49, 0x99, 0x24, 0x5D, 0xAC, 0x24, 
   0x5D, 0xAC, 0x14, 0x51, 0xA1, 0x14, 0x51, 0xA1, 0x2E, 0x66, 0xB7, 0x2E, 0x66, 0xB7, 0x36, 0x65, 
   0xB9, 0x36, 0x65, 0xB9, 0x2D, 0x5C, 0xB2, 0x2D, 0x5C, 0xB2, 0x1C, 0x55, 0xAA, 0x1C, 0x55, 0xAA, 
   0x25, 0x6B, 0xBE, 0x25, 0x6B, 0xBE, 0x21, 0x67, 0xBA, 0x21, 0x67, 0xBA, 0x0E, 0x55, 0xA5, 0x0E, 
   0x55, 0xA5, 0x44, 0x8C, 0xDA, 0x44, 0x8C, 0xDA, 0x37, 0x7F, 0xCD, 0x37, 0x7F, 0xCD, 0x25, 0x6D, 
   0xBB, 0x25, 0x6D, 0xBB, 0x41, 0x87, 0xDA, 0x41, 0x87, 0xDA, 0x2A, 0x6F, 0xC6, 0x2A, 0x6F, 0xC6, 
   0x26, 0x69, 0xC5, 0x26, 0x69, 0xC5, 0x33, 0x79, 0xC6, 0x33, 0x79, 0xC6, 0x2F, 0x73, 0xBE, 0x2F, 
   0x73, 0xBE, 0x31, 0x72, 0xBD, 0x31, 0x72, 0xBD, 0x27, 0x65, 0xB1, 0x27, 0x65, 0xB1, 0x2D, 0x6A, 
   0xBA, 0x2D, 0x6A, 0xBA, 0x28, 0x66, 0xBA, 0x28, 0x66, 0xBA, 0x0D, 0x4D, 0xA5, 0x0D, 0x4D, 0xA5, 
   0x13, 0x55, 0xAE, 0x13, 0x55, 0xAE, 0x2F, 0x73, 0xCC, 0x2F, 0x73, 0xCC, 0x1D, 0x62, 0xB9, 0x1D, 
   0x62, 0xB9, 0x38, 0x7E, 0xD1, 0x38, 0x7E, 0xD1, 0x18, 0x5F, 0xAF, 0x18, 0x5F, 0xAF, 0x34, 0x7B, 
   0xCB, 0x34, 0x7B, 0xCB, 0x36, 0x7C, 0xCF, 0x36, 0x7C, 0xCF, 0x37, 0x7C, 0xD3, 0x37, 0x7C, 0xD3, 
   0x1C, 0x60, 0xB9, 0x1C, 0x60, 0xB9, 0x31, 0x82, 0xD7, 0x31, 0x82, 0xD7, 0x21, 0x71, 0xC4, 0x21, 
   0x71, 0xC4, 0x19, 0x66, 0xB5, 0x19, 0x66, 0xB5, 0x41, 0x8C, 0xDA, 0x41, 0x8C, 0xDA, 0x40, 0x8B, 
   0xD9, 0x40, 0x8B, 0xD9, 0x31, 0x7E, 0xCD, 0x31, 0x7E, 0xCD, 0x1C, 0x6C, 0xBF, 0x1C, 0x6C, 0xBF, 
   0x29, 0x7A, 0xCF, 0x29, 0x7A, 0xCF, 0x04, 0x53, 0xAA, 0x04, 0x53, 0xAA, 0x19, 0x65, 0xBF, 0x19, 
   0x65, 0xBF, 0x27, 0x6D, 0xC8, 0x27, 0x6D, 0xC8, 0x23, 0x64, 0xC0, 0x23, 0x64, 0xC0, 0x01, 0x44, 
   0x9B, 0x01, 0x44, 0x9B, 0x00, 0x42, 0x92, 0x00, 0x42, 0x92, 0x28, 0x71, 0xBB, 0x28, 0x71, 0xBB, 
   0x39, 0x86, 0xCB, 0x39, 0x86, 0xCB, 0x3B, 0x86, 0xD2, 0x3B, 0x86, 0xD2, 0x46, 0x8F, 0xD9, 0x46, 
   0x8F, 0xD9, 0x47, 0x8F, 0xD7, 0x47, 0x8F, 0xD7, 0x39, 0x7D, 0xC6, 0x39, 0x7D, 0xC6, 0x1E, 0x60, 
   0xAE, 0x1E, 0x60, 0xAE, 0x3B, 0x80, 0xD0, 0x3B, 0x80, 0xD0, 0x2E, 0x74, 0xC8, 0x2E, 0x74, 0xC8, 
   0x13, 0x5A, 0xB2, 0x13, 0x5A, 0xB2, 0x13, 0x3B, 0x94, 0x13, 0x3B, 0x94, 0x17, 0x43, 0x9C, 0x17, 
   0x43, 0x9C, 0x00, 0x2C, 0x87, 0x00, 0x2C, 0x87, 0x07, 0x39, 0x93, 0x07, 0x39, 0x93, 0x00, 0x34, 
   0x8E, 0x00, 0x34, 0x8E, 0x0B, 0x3D, 0x97, 0x0B, 0x3D, 0x97, 0x16, 0x46, 0x9E, 0x16, 0x46, 0x9E, 
   0x23, 0x51, 0xA9, 0x23, 0x51, 0xA9, 0x16, 0x49, 0x99, 0x16, 0x49, 0x99, 0x24, 0x5D, 0xAC, 0x24, 
   0x5D, 0xAC, 0x14, 0x51, 0xA1, 0x14, 0x51, 0xA1, 0x2E, 0x66, 0xB7, 0x2E, 0x66, 0xB7, 0x36, 0x65, 
   0xB9, 0x36, 0x65, 0xB9, 0x2D, 0x5C, 0xB2, 0x2D, 0x5C, 0xB2, 0x1C, 0x55, 0xAA, 0x1C, 0x55, 0xAA, 
   0x25, 0x6B, 0xBE, 0x25, 0x6B, 0xBE, 0x21, 0x67, 0xBA, 0x21, 0x67, 0xBA, 0x0E, 0x55, 0xA5, 0x0E, 
   0x55, 0xA5, 0x44, 0x8C, 0xDA, 0x44, 0x8C, 0xDA, 0x37, 0x7F, 0xCD, 0x37, 0x7F, 0xCD, 0x25, 0x6D, 
   0xBB, 0x25, 0x6D, 0xBB, 0x41, 0x87, 0xDA, 0x41, 0x87, 0xDA, 0x2A, 0x6F, 0xC6, 0x2A, 0x6F, 0xC6, 
   0x26, 0x69, 0xC5, 0x26, 0x69, 0xC5, 0x33, 0x79, 0xC6, 0x33, 0x79, 0xC6, 0x2F, 0x73, 0xBE, 0x2F, 
   0x73, 0xBE, 0x31, 0x72, 0xBD, 0x31, 0x72, 0xBD, 0x27, 0x65, 0xB1, 0x27, 0x65, 0xB1, 0x2D, 0x6A, 
   0xBA, 0x2D, 0x6A, 0xBA, 0x28, 0x66, 0xBA, 0x28, 0x66, 0xBA, 0x0D, 0x4D, 0xA5, 0x0D, 0x4D, 0xA5, 
   0x13, 0x55, 0xAE, 0x13, 0x55, 0xAE, 0x2F, 0x73, 0xCC, 0x2F, 0x73, 0xCC, 0x1D, 0x62, 0xB9, 0x1D, 
   0x62, 0xB9, 0x38, 0x7E, 0xD1, 0x38, 0x7E, 0xD1, 0x18, 0x5F, 0xAF, 0x18, 0x5F, 0xAF, 0x34, 0x7B, 
   0xCB, 0x34, 0x7B, 0xCB, 0x36, 0x7C, 0xCF, 0x36, 0x7C, 0xCF, 0x37, 0x7C, 0xD3, 0x37, 0x7C, 0xD3, 
   0x1C, 0x60, 0xB9, 0x1C, 0x60, 0xB9, 0x31, 0x82, 0xD7, 0x31, 0x82, 0xD7, 0x21, 0x71, 0xC4, 0x21, 
   0x71, 0xC4, 0x19, 0x66, 0xB5, 0x19, 0x66, 0xB5, 0x41, 0x8C, 0xDA, 0x41, 0x8C, 0xDA, 0x40, 0x8B, 
   0xD9, 0x40, 0x8B, 0xD9, 0x31, 0x7E, 0xCD, 0x31, 0x7E, 0xCD, 0x1C, 0x6C, 0xBF, 0x1C, 0x6C, 0xBF, 
   0x29, 0x7A, 0xCF, 0x29, 0x7A, 0xCF, 0x04, 0x53, 0xAA, 0x04, 0x53, 0xAA, 0x19, 0x65, 0xBF, 0x19, 
   0x65, 0xBF, 0x27, 0x6D, 0xC8, 0x27, 0x6D, 0xC8, 0x23, 0x64, 0xC0, 0x23, 0x64, 0xC0, 0x01, 0x44, 
   0x9B, 0x01, 0x44, 0x9B, 0x00, 0x42, 0x92, 0x00, 0x42, 0x92, 0x28, 0x71, 0xBB, 0x28, 0x71, 0xBB, 
   0x39, 0x86, 0xCB, 0x39, 0x86, 0xCB, 0x3B, 0x86, 0xD2, 0x3B, 0x86, 0xD2, 0x46, 0x8F, 0xD9, 0x46, 
   0x8F, 0xD9, 0x47, 0x8F, 0xD7, 0x47, 0x8F, 0xD7, 0x39, 0x7D, 0xC6, 0x39, 0x7D, 0xC6, 0x1E, 0x60, 
   0xAE, 0x1E, 0x60, 0xAE, 0x3B, 0x80, 0xD0, 0x3B, 0x80, 0xD0, 0x2E, 0x74, 0xC8, 0x2E, 0x74, 0xC8, 
   0x13, 0x5A, 0xB2, 0x13, 0x5A, 0xB2, 0x13, 0x3B, 0x94, 0x13, 0x3B, 0x94, 0x17, 0x43, 0x9C, 0x17, 
   0x43, 0x9C, 0x00, 0x2C, 0x87, 0x00, 0x2C, 0x87, 0x07, 0x39, 0x93, 0x07, 0x39, 0x93, 0x00, 0x34, 
   0x8E, 0x00, 0x34, 0x8E, 0x0B, 0x3D, 0x97, 0x0B, 0x3D, 0x97, 0x16, 0x46, 0x9E, 0x16, 0x46, 0x9E, 
   0x23, 0x51, 0xA9, 0x23, 0x51, 0xA9, 0x23, 0x56, 0xA6, 0x23, 0x56, 0xA6, 0x2A, 0x63, 0xB2, 0x2A, 
   0x63, 0xB2, 0x19, 0x57, 0xA5, 0x19, 0x57, 0xA5, 0x1F, 0x57, 0xA8, 0x1F, 0x57, 0xA8, 0x1E, 0x4E, 
   0xA0, 0x1E, 0x4E, 0xA0, 0x20, 0x4F, 0xA3, 0x20, 0x4F, 0xA3, 0x13, 0x4D, 0x9F, 0x13, 0x4D, 0x9F, 
   0x2D, 0x73, 0xC6, 0x2D, 0x73, 0xC6, 0x27, 0x6D, 0xC0, 0x27, 0x6D, 0xC0, 0x00, 0x44, 0x94, 0x00, 
   0x44, 0x94, 0x38, 0x80, 0xCE, 0x38, 0x80, 0xCE, 0x30, 0x78, 0xC6, 0x30, 0x78, 0xC6, 0x29, 0x71, 
   0xBF, 0x29, 0x71, 0xBF, 0x3D, 0x83, 0xD6, 0x3D, 0x83, 0xD6, 0x0E, 0x53, 0xAA, 0x0E, 0x53, 0xAA, 
   0x21, 0x64, 0xC0, 0x21, 0x64, 0xC0, 0x30, 0x77, 0xC1, 0x30, 0x77, 0xC1, 0x2F, 0x73, 0xBE, 0x2F, 
   0x73, 0xBE, 0x31, 0x71, 0xBF, 0x31, 0x71, 0xBF, 0x10, 0x4D, 0x9D, 0x10, 0x4D, 0x9D, 0x3E, 0x7A, 
   0xCC, 0x3E, 0x7A, 0xCC, 0x37, 0x74, 0xCA, 0x37, 0x74, 0xCA, 0x0F, 0x4F, 0xA7, 0x0F, 0x4F, 0xA7, 
   0x20, 0x63, 0xBA, 0x20, 0x63, 0xBA, 0x2D, 0x71, 0xCA, 0x2D, 0x71, 0xCA, 0x1F, 0x64, 0xBB, 0x1F, 
   0x64, 0xBB, 0x3A, 0x80, 0xD3, 0x3A, 0x80, 0xD3, 0x18, 0x5F, 0xAF, 0x18, 0x5F, 0xAF, 0x28, 0x6F, 
   0xBF, 0x28, 0x6F, 0xBF, 0x35, 0x7B, 0xCE, 0x35, 0x7B, 0xCE, 0x29, 0x6E, 0xC5, 0x29, 0x6E, 0xC5, 
   0x10, 0x54, 0xAD, 0x10, 0x54, 0xAD, 0x26, 0x77, 0xCC, 0x26, 0x77, 0xCC, 0x41, 0x91, 0xE4, 0x41, 
   0x91, 0xE4, 0x30, 0x7D, 0xCC, 0x30, 0x7D, 0xCC, 0x32, 0x7D, 0xCB, 0x32, 0x7D, 0xCB, 0x2D, 0x78, 
   0xC6, 0x2D, 0x78, 0xC6, 0x42, 0x8F, 0xDE, 0x42, 0x8F, 0xDE, 0x36, 0x86, 0xD9, 0x36, 0x86, 0xD9, 
   0x10, 0x61, 0xB6, 0x10, 0x61, 0xB6, 0x30, 0x82, 0xD4, 0x30, 0x82, 0xD4, 0x20, 0x6D, 0xC3, 0x20, 
   0x6D, 0xC3, 0x17, 0x5F, 0xB7, 0x17, 0x5F, 0xB7, 0x23, 0x67, 0xC0, 0x23, 0x67, 0xC0, 0x26, 0x66, 
   0xBE, 0x26, 0x66, 0xBE, 0x2B, 0x70, 0xC0, 0x2B, 0x70, 0xC0, 0x34, 0x7A, 0xC7, 0x34, 0x7A, 0xC7, 
   0x12, 0x5C, 0xA4, 0x12, 0x5C, 0xA4, 0x2B, 0x78, 0xC1, 0x2B, 0x78, 0xC1, 0x43, 0x8F, 0xD7, 0x43, 
   0x8F, 0xD7, 0x46, 0x8E, 0xD4, 0x46, 0x8E, 0xD4, 0x3D, 0x83, 0xC9, 0x3D, 0x83, 0xC9, 0x28, 0x6D, 
   0xB6, 0x28, 0x6D, 0xB6, 0x3D, 0x82, 0xD1, 0x3D, 0x82, 0xD1, 0x2C, 0x75, 0xC7, 0x2C, 0x75, 0xC7, 
   0x0F, 0x58, 0xAE, 0x0F, 0x58, 0xAE, 0x18, 0x43, 0x9A, 0x18, 0x43, 0x9A, 0x23, 0x4F, 0xA8, 0x23, 
   0x4F, 0xA8, 0x14, 0x43, 0x9E, 0x14, 0x43, 0x9E, 0x21, 0x54, 0xB0, 0x21, 0x54, 0xB0, 0x16, 0x4B, 
   0xA6, 0x16, 0x4B, 0xA6, 0x1E, 0x52, 0xAC, 0x1E, 0x52, 0xAC, 0x25, 0x57, 0xAF, 0x25, 0x57, 0xAF, 
   0x26, 0x57, 0xAD, 0x26, 0x57, 0xAD, 0x23, 0x56, 0xA6, 0x23, 0x56, 0xA6, 0x2A, 0x63, 0xB2, 0x2A, 
   0x63, 0xB2, 0x19, 0x57, 0xA5, 0x19, 0x57, 0xA5, 0x1F, 0x57, 0xA8, 0x1F, 0x57, 0xA8, 0x1E, 0x4E, 
   0xA0, 0x1E, 0x4E, 0xA0, 0x20, 0x4F, 0xA3, 0x20, 0x4F, 0xA3, 0x13, 0x4D, 0x9F, 0x13, 0x4D, 0x9F, 
   0x2D, 0x73, 0xC6, 0x2D, 0x73, 0xC6, 0x27, 0x6D, 0xC0, 0x27, 0x6D, 0xC0, 0x00, 0x44, 0x94, 0x00, 
   0x44, 0x94, 0x38, 0x80, 0xCE, 0x38, 0x80, 0xCE, 0x30, 0x78, 0xC6, 0x30, 0x78, 0xC6, 0x29, 0x71, 
   0xBF, 0x29, 0x71, 0xBF, 0x3D, 0x83, 0xD6, 0x3D, 0x83, 0xD6, 0x0E, 0x53, 0xAA, 0x0E, 0x53, 0xAA, 
   0x21, 0x64, 0xC0, 0x21, 0x64, 0xC0, 0x30, 0x77, 0xC1, 0x30, 0x77, 0xC1, 0x2F, 0x73, 0xBE, 0x2F, 
   0x73, 0xBE, 0x31, 0x71, 0xBF, 0x31, 0x71, 0xBF, 0x10, 0x4D, 0x9D, 0x10, 0x4D, 0x9D, 0x3E, 0x7A, 
   0xCC, 0x3E, 0x7A, 0xCC, 0x37, 0x74, 0xCA, 0x37, 0x74, 0xCA, 0x0F, 0x4F, 0xA7, 0x0F, 0x4F, 0xA7, 
   0x20, 0x63, 0xBA, 0x20, 0x63, 0xBA, 0x2D, 0x71, 0xCA, 0x2D, 0x71, 0xCA, 0x1F, 0x64, 0xBB, 0x1F, 
   0x64, 0xBB, 0x3A, 0x80, 0xD3, 0x3A, 0x80, 0xD3, 0x18, 0x5F, 0xAF, 0x18, 0x5F, 0xAF, 0x28, 0x6F, 
   0xBF, 0x28, 0x6F, 0xBF, 0x35, 0x7B, 0xCE, 0x35, 0x7B, 0xCE, 0x29, 0x6E, 0xC5, 0x29, 0x6E, 0xC5, 
   0x10, 0x54, 0xAD, 0x10, 0x54, 0xAD, 0x26, 0x77, 0xCC, 0x26, 0x77, 0xCC, 0x41, 0x91, 0xE4, 0x41, 
   0x91, 0xE4, 0x30, 0x7D, 0xCC, 0x30, 0x7D, 0xCC, 0x32, 0x7D, 0xCB, 0x32, 0x7D, 0xCB, 0x2D, 0x78, 
   0xC6, 0x2D, 0x78, 0xC6, 0x42, 0x8F, 0xDE, 0x42, 0x8F, 0xDE, 0x36, 0x86, 0xD9, 0x36, 0x86, 0xD9, 
   0x10, 0x61, 0xB6, 0x10, 0x61, 0xB6, 0x30, 0x82, 0xD4, 0x30, 0x82, 0xD4, 0x20, 0x6D, 0xC3, 0x20, 
   0x6D, 0xC3, 0x17, 0x5F, 0xB7, 0x17, 0x5F, 0xB7, 0x23, 0x67, 0xC0, 0x23, 0x67, 0xC0, 0x26, 0x66, 
   0xBE, 0x26, 0x66, 0xBE, 0x2B, 0x70, 0xC0, 0x2B, 0x70, 0xC0, 0x34, 0x7A, 0xC7, 0x34, 0x7A, 0xC7, 
   0x12, 0x5C, 0xA4, 0x12, 0x5C, 0xA4, 0x2B, 0x78, 0xC1, 0x2B, 0x78, 0xC1, 0x43, 0x8F, 0xD7, 0x43, 
   0x8F, 0xD7, 0x46, 0x8E, 0xD4, 0x46, 0x8E, 0xD4, 0x3D, 0x83, 0xC9, 0x3D, 0x83, 0xC9, 0x28, 0x6D, 
   0xB6, 0x28, 0x6D, 0xB6, 0x3D, 0x82, 0xD1, 0x3D, 0x82, 0xD1, 0x2C, 0x75, 0xC7, 0x2C, 0x75, 0xC7, 
   0x0F, 0x58, 0xAE, 0x0F, 0x58, 0xAE, 0x18, 0x43, 0x9A, 0x18, 0x43, 0x9A, 0x23, 0x4F, 0xA8, 0x23, 
   0x4F, 0xA8, 0x14, 0x43, 0x9E, 0x14, 0x43, 0x9E, 0x21, 0x54, 0xB0, 0x21, 0x54, 0xB0, 0x16, 0x4B, 
   0xA6, 0x16, 0x4B, 0xA6, 0x1E, 0x52, 0xAC, 0x1E, 0x52, 0xAC, 0x25, 0x57, 0xAF, 0x25, 0x57, 0xAF, 
   0x26, 0x57, 0xAD, 0x26, 0x57, 0xAD, 0x2F, 0x63, 0xB0, 0x2F, 0x63, 0xB0, 0x27, 0x61, 0xAD, 0x27, 
   0x61, 0xAD, 0x18, 0x56, 0xA4, 0x18, 0x56, 0xA4, 0x0E, 0x47, 0x96, 0x0E, 0x47, 0x96, 0x0C, 0x3C, 
   0x8E, 0x0C, 0x3C, 0x8E, 0x1A, 0x49, 0x9D, 0x1A, 0x49, 0x9D, 0x05, 0x3F, 0x91, 0x05, 0x3F, 0x91, 
   0x28, 0x6F, 0xBF, 0x28, 0x6F, 0xBF, 0x31, 0x77, 0xCA, 0x31, 0x77, 0xCA, 0x0C, 0x53, 0xA3, 0x0C, 
   0x53, 0xA3, 0x32, 0x7A, 0xC8, 0x32, 0x7A, 0xC8, 0x31, 0x79, 0xC7, 0x31, 0x79, 0xC7, 0x30, 0x78, 
   0xC6, 0x30, 0x78, 0xC6, 0x2D, 0x73, 0xC6, 0x2D, 0x73, 0xC6, 0x01, 0x46, 0x9D, 0x01, 0x46, 0x9D, 
   0x1B, 0x5E, 0xBA, 0x1B, 0x5E, 0xBA, 0x31, 0x78, 0xC2, 0x31, 0x78, 0xC2, 0x32, 0x76, 0xC1, 0x32, 
   0x76, 0xC1, 0x18, 0x57, 0xA7, 0x18, 0x57, 0xA7, 0x0D, 0x49, 0x9B, 0x0D, 0x49, 0x9B, 0x3F, 0x7B, 
   0xCF, 0x3F, 0x7B, 0xCF, 0x41, 0x7E, 0xD4, 0x41, 0x7E, 0xD4, 0x1C, 0x5C, 0xB4, 0x1C, 0x5C, 0xB4, 
   0x17, 0x5A, 0xB1, 0x17, 0x5A, 0xB1, 0x1E, 0x62, 0xBB, 0x1E, 0x62, 0xBB, 0x13, 0x58, 0xAF, 0x13, 
   0x58, 0xAF, 0x33, 0x79, 0xCC, 0x33, 0x79, 0xCC, 0x24, 0x6B, 0xBB, 0x24, 0x6B, 0xBB, 0x2B, 0x72, 
   0xC2, 0x2B, 0x72, 0xC2, 0x43, 0x89, 0xDC, 0x43, 0x89, 0xDC, 0x37, 0x7C, 0xD3, 0x37, 0x7C, 0xD3, 
   0x35, 0x79, 0xD2, 0x35, 0x79, 0xD2, 0x3E, 0x8F, 0xE4, 0x3E, 0x8F, 0xE4, 0x2A, 0x7A, 0xCD, 0x2A, 
   0x7A, 0xCD, 0x2B, 0x78, 0xC7, 0x2B, 0x78, 0xC7, 0x41, 0x8C, 0xDA, 0x41, 0x8C, 0xDA, 0x33, 0x7E, 
   0xCC, 0x33, 0x7E, 0xCC, 0x37, 0x84, 0xD3, 0x37, 0x84, 0xD3, 0x26, 0x76, 0xC9, 0x26, 0x76, 0xC9, 
   0x2C, 0x7D, 0xD2, 0x2C, 0x7D, 0xD2, 0x19, 0x6F, 0xBB, 0x19, 0x6F, 0xBB, 0x14, 0x66, 0xB4, 0x14, 
   0x66, 0xB4, 0x1D, 0x66, 0xBA, 0x1D, 0x66, 0xBA, 0x2E, 0x73, 0xCA, 0x2E, 0x73, 0xCA, 0x29, 0x69, 
   0xC1, 0x29, 0x69, 0xC1, 0x30, 0x72, 0xC5, 0x30, 0x72, 0xC5, 0x3E, 0x83, 0xD3, 0x3E, 0x83, 0xD3, 
   0x20, 0x66, 0xB3, 0x20, 0x66, 0xB3, 0x1D, 0x6B, 0xB0, 0x1D, 0x6B, 0xB0, 0x3F, 0x8D, 0xD0, 0x3F, 
   0x8D, 0xD0, 0x41, 0x8C, 0xD0, 0x41, 0x8C, 0xD0, 0x40, 0x87, 0xCB, 0x40, 0x87, 0xCB, 0x2E, 0x74, 
   0xBA, 0x2E, 0x74, 0xBA, 0x3C, 0x85, 0xCF, 0x3C, 0x85, 0xCF, 0x2D, 0x76, 0xC6, 0x2D, 0x76, 0xC6, 
   0x11, 0x5B, 0xAD, 0x11, 0x5B, 0xAD, 0x04, 0x33, 0x85, 0x04, 0x33, 0x85, 0x17, 0x46, 0x9C, 0x17, 
   0x46, 0x9C, 0x10, 0x42, 0x9C, 0x10, 0x42, 0x9C, 0x1C, 0x51, 0xAC, 0x1C, 0x51, 0xAC, 0x07, 0x3E, 
   0x99, 0x07, 0x3E, 0x99, 0x0D, 0x42, 0x9C, 0x0D, 0x42, 0x9C, 0x0D, 0x43, 0x98, 0x0D, 0x43, 0x98, 
   0x02, 0x37, 0x88, 0x02, 0x37, 0x88, 0x2F, 0x63, 0xB0, 0x2F, 0x63, 0xB0, 0x27, 0x61, 0xAD, 0x27, 
   0x61, 0xAD, 0x18, 0x56, 0xA4, 0x18, 0x56, 0xA4, 0x0E, 0x47, 0x96, 0x0E, 0x47, 0x96, 0x0C, 0x3C, 
   0x8E, 0x0C, 0x3C, 0x8E, 0x1A, 0x49, 0x9D, 0x1A, 0x49, 0x9D, 0x05, 0x3F, 0x91, 0x05, 0x3F, 0x91, 
   0x28, 0x6F, 0xBF, 0x28, 0x6F, 0xBF, 0x31, 0x77, 0xCA, 0x31, 0x77, 0xCA, 0x0C, 0x53, 0xA3, 0x0C, 
   0x53, 0xA3, 0x32, 0x7A, 0xC8, 0x32, 0x7A, 0xC8, 0x31, 0x79, 0xC7, 0x31, 0x79, 0xC7, 0x30, 0x78, 
   0xC6, 0x30, 0x78, 0xC6, 0x2D, 0x73, 0xC6, 0x2D, 0x73, 0xC6, 0x01, 0x46, 0x9D, 0x01, 0x46, 0x9D, 
   0x1B, 0x5E, 0xBA, 0x1B, 0x5E, 0xBA, 0x31, 0x78, 0xC2, 0x31, 0x78, 0xC2, 0x32, 0x76, 0xC1, 0x32, 
   0x76, 0xC1, 0x18, 0x57, 0xA7, 0x18, 0x57, 0xA7, 0x0D, 0x49, 0x9B, 0x0D, 0x49, 0x9B, 0x3F, 0x7B, 
   0xCF, 0x3F, 0x7B, 0xCF, 0x41, 0x7E, 0xD4, 0x41, 0x7E, 0xD4, 0x1C, 0x5C, 0xB4, 0x1C, 0x5C, 0xB4, 
   0x17, 0x5A, 0xB1, 0x17, 0x5A, 0xB1, 0x1E, 0x62, 0xBB, 0x1E, 0x62, 0xBB, 0x13, 0x58, 0xAF, 0x13, 
   0x58, 0xAF, 0x33, 0x79, 0xCC, 0x33, 0x79, 0xCC, 0x24, 0x6B, 0xBB, 0x24, 0x6B, 0xBB, 0x2B, 0x72, 
   0xC2, 0x2B, 0x72, 0xC2, 0x43, 0x89, 0xDC, 0x43, 0x89, 0xDC, 0x37, 0x7C, 0xD3, 0x37, 0x7C, 0xD3, 
   0x35, 0x79, 0xD2, 0x35, 0x79, 0xD2, 0x3E, 0x8F, 0xE4, 0x3E, 0x8F, 0xE4, 0x2A, 0x7A, 0xCD, 0x2A, 
   0x7A, 0xCD, 0x2B, 0x78, 0xC7, 0x2B, 0x78, 0xC7, 0x41, 0x8C, 0xDA, 0x41, 0x8C, 0xDA, 0x33, 0x7E, 
   0xCC, 0x33, 0x7E, 0xCC, 0x37, 0x84, 0xD3, 0x37, 0x84, 0xD3, 0x26, 0x76, 0xC9, 0x26, 0x76, 0xC9, 
   0x2C, 0x7D, 0xD2, 0x2C, 0x7D, 0xD2, 0x19, 0x6F, 0xBB, 0x19, 0x6F, 0xBB, 0x14, 0x66, 0xB4, 0x14, 
   0x66, 0xB4, 0x1D, 0x66, 0xBA, 0x1D, 0x66, 0xBA, 0x2E, 0x73, 0xCA, 0x2E, 0x73, 0xCA, 0x29, 0x69, 
   0xC1, 0x29, 0x69, 0xC1, 0x30, 0x72, 0xC5, 0x30, 0x72, 0xC5, 0x3E, 0x83, 0xD3, 0x3E, 0x83, 0xD3, 
   0x20, 0x66, 0xB3, 0x20, 0x66, 0xB3, 0x1D, 0x6B, 0xB0, 0x1D, 0x6B, 0xB0, 0x3F, 0x8D, 0xD0, 0x3F, 
   0x8D, 0xD0, 0x41, 0x8C, 0xD0, 0x41, 0x8C, 0xD0, 0x40, 0x87, 0xCB, 0x40, 0x87, 0xCB, 0x2E, 0x74, 
   0xBA, 0x2E, 0x74, 0xBA, 0x3C, 0x85, 0xCF, 0x3C, 0x85, 0xCF, 0x2D, 0x76, 0xC6, 0x2D, 0x76, 0xC6, 
   0x11, 0x5B, 0xAD, 0x11, 0x5B, 0xAD, 0x04, 0x33, 0x85, 0x04, 0x33, 0x85, 0x17, 0x46, 0x9C, 0x17, 
   0x46, 0x9C, 0x10, 0x42, 0x9C, 0x10, 0x42, 0x9C, 0x1C, 0x51, 0xAC, 0x1C, 0x51, 0xAC, 0x07, 0x3E, 
   0x99, 0x07, 0x3E, 0x99, 0x0D, 0x42, 0x9C, 0x0D, 0x42, 0x9C, 0x0D, 0x43, 0x98, 0x0D, 0x43, 0x98, 
   0x02, 0x37, 0x88, 0x02, 0x37, 0x88, 0x2E, 0x62, 0xAF, 0x2E, 0x62, 0xAF, 0x1E, 0x58, 0xA4, 0x1E, 
   0x58, 0xA4, 0x18, 0x56, 0xA4, 0x18, 0x56, 0xA4, 0x0D, 0x46, 0x95, 0x0D, 0x46, 0x95, 0x14, 0x44, 
   0x96, 0x14, 0x44, 0x96, 0x2E, 0x5E, 0xB0, 0x2E, 0x5E, 0xB0, 0x10, 0x4A, 0x9C, 0x10, 0x4A, 0x9C, 
   0x36, 0x7D, 0xCD, 0x36, 0x7D, 0xCD, 0x32, 0x78, 0xCB, 0x32, 0x78, 0xCB, 0x25, 0x6C, 0xBC, 0x25, 
   0x6C, 0xBC, 0x35, 0x7D, 0xCB, 0x35, 0x7D, 0xCB, 0x35, 0x7D, 0xCB, 0x35, 0x7D, 0xCB, 0x39, 0x81, 
   0xCF, 0x39, 0x81, 0xCF, 0x30, 0x76, 0xC9, 0x30, 0x76, 0xC9, 0x13, 0x58, 0xAF, 0x13, 0x58, 0xAF, 
   0x23, 0x66, 0xC2, 0x23, 0x66, 0xC2, 0x31, 0x79, 0xC1, 0x31, 0x79, 0xC1, 0x33, 0x77, 0xC4, 0x33, 
   0x77, 0xC4, 0x00, 0x3A, 0x8A, 0x00, 0x3A, 0x8A, 0x11, 0x4D, 0xA1, 0x11, 0x4D, 0xA1, 0x34, 0x6F, 
   0xC5, 0x34, 0x6F, 0xC5, 0x3E, 0x7A, 0xD3, 0x3E, 0x7A, 0xD3, 0x22, 0x62, 0xBA, 0x22, 0x62, 0xBA, 
   0x01, 0x44, 0x9B, 0x01, 0x44, 0x9B, 0x28, 0x6C, 0xC5, 0x28, 0x6C, 0xC5, 0x17, 0x5C, 0xB3, 0x17, 
   0x5C, 0xB3, 0x33, 0x79, 0xCC, 0x33, 0x79, 0xCC, 0x28, 0x6F, 0xBF, 0x28, 0x6F, 0xBF, 0x1C, 0x63, 
   0xB3, 0x1C, 0x63, 0xB3, 0x2B, 0x71, 0xC4, 0x2B, 0x71, 0xC4, 0x1A, 0x5F, 0xB6, 0x1A, 0x5F, 0xB6, 
   0x29, 0x6D, 0xC6, 0x29, 0x6D, 0xC6, 0x39, 0x8A, 0xDF, 0x39, 0x8A, 0xDF, 0x1E, 0x6E, 0xC1, 0x1E, 
   0x6E, 0xC1, 0x36, 0x83, 0xD2, 0x36, 0x83, 0xD2, 0x37, 0x82, 0xD0, 0x37, 0x82, 0xD0, 0x24, 0x6F, 
   0xBD, 0x24, 0x6F, 0xBD, 0x41, 0x8E, 0xDD, 0x41, 0x8E, 0xDD, 0x2A, 0x7A, 0xCD, 0x2A, 0x7A, 0xCD, 
   0x3A, 0x8B, 0xE0, 0x3A, 0x8B, 0xE0, 0x22, 0x7A, 0xC1, 0x22, 0x7A, 0xC1, 0x1F, 0x72, 0xBD, 0x1F, 
   0x72, 0xBD, 0x24, 0x6F, 0xBE, 0x24, 0x6F, 0xBE, 0x22, 0x68, 0xBC, 0x22, 0x68, 0xBC, 0x07, 0x47, 
   0x9F, 0x07, 0x47, 0x9F, 0x0B, 0x4C, 0xA1, 0x0B, 0x4C, 0xA1, 0x2D, 0x6F, 0xC2, 0x2D, 0x6F, 0xC2, 
   0x1E, 0x63, 0xB3, 0x1E, 0x63, 0xB3, 0x1D, 0x6E, 0xB1, 0x1D, 0x6E, 0xB1, 0x45, 0x93, 0xD5, 0x45, 
   0x93, 0xD5, 0x44, 0x91, 0xD0, 0x44, 0x91, 0xD0, 0x41, 0x8B, 0xCB, 0x41, 0x8B, 0xCB, 0x30, 0x79, 
   0xBD, 0x30, 0x79, 0xBD, 0x3F, 0x89, 0xD1, 0x3F, 0x89, 0xD1, 0x33, 0x7E, 0xCA, 0x33, 0x7E, 0xCA, 
   0x18, 0x65, 0xB4, 0x18, 0x65, 0xB4, 0x19, 0x4A, 0x9A, 0x19, 0x4A, 0x9A, 0x26, 0x58, 0xAB, 0x26, 
   0x58, 0xAB, 0x16, 0x4B, 0xA2, 0x16, 0x4B, 0xA2, 0x18, 0x4F, 0xAA, 0x18, 0x4F, 0xAA, 0x00, 0x39, 
   0x94, 0x00, 0x39, 0x94, 0x11, 0x4A, 0xA0, 0x11, 0x4A, 0xA0, 0x20, 0x58, 0xAA, 0x20, 0x58, 0xAA, 
   0x1A, 0x52, 0xA1, 0x1A, 0x52, 0xA1, 0x2E, 0x62, 0xAF, 0x2E, 0x62, 0xAF, 0x1E, 0x58, 0xA4, 0x1E, 
   0x58, 0xA4, 0x18, 0x56, 0xA4, 0x18, 0x56, 0xA4, 0x0D, 0x46, 0x95, 0x0D, 0x46, 0x95, 0x14, 0x44, 
   0x96, 0x14, 0x44, 0x96, 0x2E, 0x5E, 0xB0, 0x2E, 0x5E, 0xB0, 0x10, 0x4A, 0x9C, 0x10, 0x4A, 0x9C, 
   0x36, 0x7D, 0xCD, 0x36, 0x7D, 0xCD, 0x32, 0x78, 0xCB, 0x32, 0x78, 0xCB, 0x25, 0x6C, 0xBC, 0x25, 
   0x6C, 0xBC, 0x35, 0x7D, 0xCB, 0x35, 0x7D, 0xCB, 0x35, 0x7D, 0xCB, 0x35, 0x7D, 0xCB, 0x39, 0x81, 
   0xCF, 0x39, 0x81, 0xCF, 0x30, 0x76, 0xC9, 0x30, 0x76, 0xC9, 0x13, 0x58, 0xAF, 0x13, 0x58, 0xAF, 
   0x23, 0x66, 0xC2, 0x23, 0x66, 0xC2, 0x31, 0x79, 0xC1, 0x31, 0x79, 0xC1, 0x33, 0x77, 0xC4, 0x33, 
   0x77, 0xC4, 0x00, 0x3A, 0x8A, 0x00, 0x3A, 0x8A, 0x11, 0x4D, 0xA1, 0x11, 0x4D, 0xA1, 0x34, 0x6F, 
   0xC5, 0x34, 0x6F, 0xC5, 0x3E, 0x7A, 0xD3, 0x3E, 0x7A, 0xD3, 0x22, 0x62, 0xBA, 0x22, 0x62, 0xBA, 
   0x01, 0x44, 0x9B, 0x01, 0x44, 0x9B, 0x28, 0x6C, 0xC5, 0x28, 0x6C, 0xC5, 0x17, 0x5C, 0xB3, 0x17, 
   0x5C, 0xB3, 0x33, 0x79, 0xCC, 0x33, 0x79, 0xCC, 0x28, 0x6F, 0xBF, 0x28, 0x6F, 0xBF, 0x1C, 0x63, 
   0xB3, 0x1C, 0x63, 0xB3, 0x2B, 0x71, 0xC4, 0x2B, 0x71, 0xC4, 0x1A, 0x5F, 0xB6, 0x1A, 0x5F, 0xB6, 
   0x29, 0x6D, 0xC6, 0x29, 0x6D, 0xC6, 0x39, 0x8A, 0xDF, 0x39, 0x8A, 0xDF, 0x1E, 0x6E, 0xC1, 0x1E, 
   0x6E, 0xC1, 0x36, 0x83, 0xD2, 0x36, 0x83, 0xD2, 0x37, 0x82, 0xD0, 0x37, 0x82, 0xD0, 0x24, 0x6F, 
   0xBD, 0x24, 0x6F, 0xBD, 0x41, 0x8E, 0xDD, 0x41, 0x8E, 0xDD, 0x2A, 0x7A, 0xCD, 0x2A, 0x7A, 0xCD, 
   0x3A, 0x8B, 0xE0, 0x3A, 0x8B, 0xE0, 0x22, 0x7A, 0xC1, 0x22, 0x7A, 0xC1, 0x1F, 0x72, 0xBD, 0x1F, 
   0x72, 0xBD, 0x24, 0x6F, 0xBE, 0x24, 0x6F, 0xBE, 0x22, 0x68, 0xBC, 0x22, 0x68, 0xBC, 0x07, 0x47, 
   0x9F, 0x07, 0x47, 0x9F, 0x0B, 0x4C, 0xA1, 0x0B, 0x4C, 0xA1, 0x2D, 0x6F, 0xC2, 0x2D, 0x6F, 0xC2, 
   0x1E, 0x63, 0xB3, 0x1E, 0x63, 0xB3, 0x1D, 0x6E, 0xB1, 0x1D, 0x6E, 0xB1, 0x45, 0x93, 0xD5, 0x45, 
   0x93, 0xD5, 0x44, 0x91, 0xD0, 0x44, 0x91, 0xD0, 0x41, 0x8B, 0xCB, 0x41, 0x8B, 0xCB, 0x30, 0x79, 
   0xBD, 0x30, 0x79, 0xBD, 0x3F, 0x89, 0xD1, 0x3F, 0x89, 0xD1, 0x33, 0x7E, 0xCA, 0x33, 0x7E, 0xCA, 
   0x18, 0x65, 0xB4, 0x18, 0x65, 0xB4, 0x19, 0x4A, 0x9A, 0x19, 0x4A, 0x9A, 0x26, 0x58, 0xAB, 0x26, 
   0x58, 0xAB, 0x16, 0x4B, 0xA2, 0x16, 0x4B, 0xA2, 0x18, 0x4F, 0xAA, 0x18, 0x4F, 0xAA, 0x00, 0x39, 
   0x94, 0x00, 0x39, 0x94, 0x11, 0x4A, 0xA0, 0x11, 0x4A, 0xA0, 0x20, 0x58, 0xAA, 0x20, 0x58, 0xAA, 
   0x1A, 0x52, 0xA1, 0x1A, 0x52, 0xA1, 
};

static RESOURCEDATA g_rd_edge(TEXT(MODULE_STRING), TEXT("edge.bmp"), g_edge, sizeof(g_edge));

extern "C" LPVOID PREPEND_MODULE(_edge) = (LPVOID)&g_rd_edge;
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\func\vpshadr1\media\brick.bmp.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    brick.bmp.cpp

Description

    Data file for the resource brick.bmp.

*******************************************************************************/

#include "d3dlocus.h"

static BYTE g_brick[] = {

   0x42, 0x4D, 0x38, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x28, 0x00, 
   0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC3, 0x0E, 0x00, 0x00, 0xC3, 0x0E, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x5A, 0x94, 0x38, 0x54, 0x94, 0x45, 0x55, 0x94, 0x4C, 
   0x68, 0x9F, 0x4D, 0x62, 0x92, 0x48, 0x4B, 0x69, 0x42, 0x53, 0x84, 0x43, 0x6D, 0xC3, 0x50, 0x74, 
   0xB9, 0x57, 0x68, 0x9A, 0x4B, 0x61, 0x7A, 0x44, 0x59, 0x8C, 0x4A, 0x58, 0x9F, 0x44, 0x5E, 0xB7, 
   0x61, 0x79, 0xA9, 0x48, 0x53, 0x7D, 0x29, 0x13, 0x70, 0x36, 0x57, 0x8A, 0x5C, 0xA2, 0xA6, 0x64, 
   0x74, 0xCB, 0x4C, 0x54, 0xAB, 0x4A, 0x4B, 0x73, 0x3D, 0x5C, 0x82, 0x48, 0x5C, 0xB6, 0x53, 0x61, 
   0x8B, 0x3B, 0x60, 0x4C, 0x30, 0x43, 0xA2, 0x55, 0x55, 0xCF, 0x62, 0x74, 0xB2, 0x4A, 0x62, 0x90, 
   0x37, 0x4A, 0x80, 0x43, 0x51, 0x68, 0x50, 0x59, 0x7E, 0x5C, 0x79, 0xB8, 0x4A, 0x84, 0xD8, 0x3D, 
   0x57, 0xA0, 0x48, 0x31, 0x78, 0x48, 0x65, 0x81, 0x48, 0x54, 0x98, 0x37, 0x4A, 0x8D, 0x50, 0x4E, 
   0x78, 0x58, 0x7C, 0x9F, 0x58, 0x8F, 0xC0, 0x40, 0x5F, 0x9E, 0x45, 0x4C, 0x92, 0x4C, 0x63, 0xA9, 
   0x63, 0x74, 0x97, 0x4F, 0x67, 0xA2, 0x30, 0x54, 0xA1, 0x35, 0x42, 0x8F, 0x38, 0x5C, 0x7E, 0x54, 
   0x72, 0x99, 0x7A, 0x80, 0xBB, 0x62, 0x69, 0xBD, 0x47, 0x6D, 0xBB, 0x38, 0x60, 0x89, 0x42, 0x54, 
   0x92, 0x53, 0x72, 0xAD, 0x2A, 0x72, 0x8F, 0x33, 0x54, 0x83, 0x66, 0x5B, 0x96, 0x79, 0x74, 0xAB, 
   0x54, 0x75, 0xB2, 0x2E, 0x69, 0xA6, 0x3F, 0x5D, 0x9F, 0x41, 0x6E, 0x8C, 0x50, 0x69, 0x98, 0x6F, 
   0x69, 0xB0, 0x5E, 0x63, 0xA4, 0x3F, 0x6F, 0x92, 0x4A, 0x75, 0x92, 0x5C, 0x62, 0x9F, 0x60, 0x6C, 
   0xC2, 0x41, 0x54, 0xB3, 0x3F, 0x6B, 0x74, 0x3F, 0x66, 0x77, 0x41, 0x60, 0x90, 0x50, 0x67, 0x9F, 
   0x6F, 0x68, 0xAD, 0x5E, 0x6E, 0xAD, 0x3F, 0x69, 0x89, 0x3F, 0x6E, 0x8F, 0x63, 0x68, 0xA7, 0x5E, 
   0x67, 0xA7, 0x5C, 0x6B, 0x9F, 0x42, 0x5E, 0x8C, 0x3A, 0x63, 0xAC, 0x51, 0x5C, 0x86, 0x4C, 0x57, 
   0x67, 0x4C, 0x69, 0x8C, 0x4C, 0x75, 0xB8, 0x4C, 0x68, 0xAC, 0x4C, 0x60, 0x7B, 0x4C, 0x4C, 0x90, 
   0x4C, 0x52, 0x89, 0x4C, 0x6F, 0x89, 0x4C, 0x58, 0x8A, 0x4C, 0x53, 0x9D, 0x4C, 0x60, 0x97, 0x51, 
   0x72, 0x91, 0x45, 0x66, 0x90, 0x4B, 0x59, 0x89, 0x4B, 0x58, 0x89, 0x50, 0x5E, 0x9B, 0x3F, 0x6E, 
   0x89, 0x4B, 0x55, 0x89, 0x51, 0x3D, 0x85, 0x4C, 0x56, 0x98, 0x4C, 0x76, 0xA5, 0x4C, 0x6B, 0x99, 
   0x4C, 0x58, 0x87, 0x4C, 0x52, 0x97, 0x51, 0x63, 0x96, 0x50, 0x5E, 0x79, 0x43, 0x69, 0x8B, 0x37, 
   0x67, 0x99, 0x4A, 0x3C, 0xB1, 0x62, 0x48, 0x82, 0x4F, 0x68, 0x67, 0x31, 0x6F, 0xBC, 0x3D, 0x5E, 
   0xCE, 0x56, 0x57, 0x85, 0x57, 0x5D, 0x87, 0x50, 0x62, 0x7A, 0x38, 0x46, 0x92, 0x39, 0x59, 0x9F, 
   0x64, 0x73, 0x9F, 0x5E, 0x85, 0x8C, 0x45, 0x64, 0x8B, 0x49, 0x3D, 0x91, 0x36, 0x37, 0x96, 0x37, 
   0x68, 0x8A, 0x57, 0x86, 0x8A, 0x69, 0x61, 0x91, 0x4B, 0x2B, 0x97, 0x32, 0x4F, 0x97, 0x43, 0x7A, 
   0x96, 0x50, 0x75, 0x89, 0x57, 0x55, 0x83, 0x45, 0x3C, 0x9F, 0x4B, 0x54, 0x7C, 0x4B, 0x68, 0x83, 
   0x4B, 0x5E, 0xA1, 0x4B, 0x54, 0x86, 0x45, 0x72, 0x88, 0x51, 0x78, 0xAD, 0x4C, 0x53, 0xAD, 0x4C, 
   0x56, 0x98, 0x4C, 0x5B, 0x7D, 0x4C, 0x54, 0x7B, 0x4C, 0x4F, 0x7C, 0x51, 0x61, 0xA1, 0x45, 0x6D, 
   0xA2, 0x4B, 0x50, 0x95, 0x4B, 0x50, 0x7C, 0x4B, 0x62, 0x7C, 0x4B, 0x63, 0xA0, 0x45, 0x5E, 0x8A, 
   0x51, 0x5E, 0x96, 0x4C, 0x58, 0x96, 0x4C, 0x6A, 0xA0, 0x4C, 0x6E, 0x8C, 0x4C, 0x49, 0x67, 0x4C, 
   0x48, 0x7F, 0x4C, 0x50, 0x9E, 0x4C, 0x75, 0xA5, 0x4C, 0x6A, 0x91, 0x4C, 0x57, 0x72, 0x51, 0x56, 
   0x82, 0x45, 0x5C, 0x99, 0x4B, 0x56, 0x87, 0x4B, 0x5D, 0x7F, 0x45, 0x63, 0x73, 0x51, 0x63, 0x86, 
   0x4C, 0x57, 0x93, 0x4C, 0x62, 0x98, 0x4C, 0x56, 0x7A, 0x46, 0x56, 0x6E, 0x47, 0x57, 0x81, 0x5F, 
   0x6A, 0xA6, 0x6F, 0x6F, 0xB6, 0x2B, 0x56, 0x65, 0x24, 0x49, 0x56, 0x49, 0x55, 0x75, 0x63, 0x5D, 
   0x8A, 0x52, 0x64, 0x9F, 0x4C, 0x5A, 0x99, 0x45, 0x72, 0x86, 0x45, 0x7C, 0x6D, 0x51, 0x50, 0x7E, 
   0x4C, 0x30, 0x91, 0x4C, 0x49, 0x8B, 0x46, 0x6B, 0x7A, 0x47, 0x7A, 0x7B, 0x5A, 0x6F, 0x99, 0x4F, 
   0x62, 0x8E, 0x5A, 0x5A, 0x93, 0x63, 0x64, 0x8A, 0x36, 0x52, 0x70, 0x1D, 0x52, 0x49, 0x42, 0x54, 
   0x99, 0x52, 0x6E, 0xB0, 0x56, 0x6A, 0x9F, 0x6A, 0x66, 0x81, 0x63, 0x88, 0x96, 0x49, 0x72, 0x98, 
   0x41, 0x39, 0x71, 0x40, 0x2C, 0x5E, 0x51, 0x79, 0x8D, 0x57, 0x80, 0x93, 0x3F, 0x3E, 0x86, 0x44, 
   0x3E, 0x62, 0x4B, 0x7A, 0x6F, 0x57, 0x6F, 0x95, 0x45, 0x51, 0x97, 0x4B, 0x55, 0x96, 0x56, 0x5B, 
   0x82, 0x4E, 0x6B, 0x78, 0x40, 0x5D, 0x5F, 0x33, 0x33, 0x67, 0x3A, 0x3A, 0x83, 0x3D, 0x78, 0xA4, 
   0x58, 0x80, 0xA0, 0x76, 0x5B, 0x92, 0x67, 0x46, 0x82, 0x2D, 0x5B, 0x77, 0x17, 0x49, 0x63, 0x35, 
   0x49, 0x63, 0x44, 0x56, 0x82, 0x58, 0x63, 0x90, 0x54, 0x68, 0x8B, 0x42, 0x4A, 0x73, 0x48, 0x3E, 
   0x73, 0x48, 0x5C, 0x85, 0x48, 0x64, 0x86, 0x58, 0x59, 0x81, 0x45, 0x5E, 0x86, 0x31, 0x5D, 0x8B, 
   0x31, 0x50, 0x67, 0x3F, 0x29, 0x68, 0x54, 0x6C, 0x88, 0x5B, 0x8C, 0xA8, 0x5A, 0x6C, 0x95, 0x46, 
   0x39, 0x6A, 0x26, 0x37, 0x69, 0x43, 0x61, 0x98, 0x4F, 0x5C, 0x91, 0x3D, 0x57, 0x72, 0x32, 0x51, 
   0x65, 0x46, 0x58, 0x7D, 0x64, 0x5E, 0x8A, 0x41, 0x59, 0x7F, 0x40, 0x59, 0x79, 0x46, 0x59, 0x80, 
   0x40, 0x59, 0x86, 0x52, 0x59, 0x81, 0x38, 0x54, 0x94, 0x2D, 0x4F, 0x94, 0x45, 0x50, 0x8E, 0x4C, 
   0x6D, 0xA4, 0x53, 0x68, 0x92, 0x4D, 0x3B, 0x43, 0x3D, 0x42, 0x79, 0x3E, 0x78, 0xEA, 0x56, 0x8A, 
   0xDA, 0x5C, 0x6E, 0x94, 0x4B, 0x61, 0x5F, 0x3F, 0x54, 0x7B, 0x44, 0x4D, 0xA5, 0x44, 0x63, 0xD3, 
   0x77, 0x95, 0xBA, 0x4D, 0x43, 0x67, 0x08, 0x00, 0x4F, 0x20, 0x4C, 0x79, 0x72, 0xD9, 0xB1, 0x7F, 
   0x90, 0xF7, 0x51, 0x4E, 0xC1, 0x4A, 0x40, 0x52, 0x37, 0x5C, 0x7D, 0x4D, 0x61, 0xDC, 0x5E, 0x67, 
   0x7B, 0x2A, 0x60, 0x15, 0x1A, 0x2D, 0xA7, 0x60, 0x50, 0xFB, 0x72, 0x8A, 0xC8, 0x4F, 0x68, 0x8B, 
   0x2C, 0x3A, 0x70, 0x3E, 0x4B, 0x4D, 0x5B, 0x5F, 0x6D, 0x6D, 0x8F, 0xD4, 0x4A, 0x9F, 0xFF, 0x32, 
   0x47, 0xA6, 0x48, 0x16, 0x57, 0x4D, 0x6A, 0x76, 0x48, 0x54, 0x9E, 0x27, 0x3A, 0x7D, 0x50, 0x43, 
   0x57, 0x68, 0x92, 0x9F, 0x68, 0xB6, 0xE1, 0x3A, 0x5F, 0xA3, 0x40, 0x36, 0x87, 0x51, 0x68, 0xAE, 
   0x73, 0x8A, 0x92, 0x55, 0x6D, 0x9D, 0x1F, 0x49, 0xAC, 0x25, 0x2C, 0x89, 0x2D, 0x51, 0x68, 0x5A, 
   0x7D, 0x9F, 0x9B, 0x90, 0xD6, 0x73, 0x74, 0xD8, 0x42, 0x78, 0xC6, 0x2D, 0x5B, 0x78, 0x3D, 0x49, 
   0x8C, 0x5E, 0x7D, 0xB8, 0x1A, 0x82, 0x89, 0x1D, 0x49, 0x72, 0x7C, 0x50, 0x8B, 0xA5, 0x7F, 0xB0, 
   0x5A, 0x80, 0xC3, 0x13, 0x69, 0xA6, 0x29, 0x57, 0x94, 0x36, 0x74, 0x81, 0x50, 0x6E, 0x98, 0x85, 
   0x69, 0xBB, 0x74, 0x63, 0xA4, 0x3A, 0x7A, 0x87, 0x45, 0x80, 0x8C, 0x6C, 0x62, 0x9F, 0x71, 0x72, 
   0xE3, 0x36, 0x54, 0xC9, 0x2E, 0x6B, 0x53, 0x34, 0x66, 0x56, 0x30, 0x60, 0x85, 0x4A, 0x67, 0xA5, 
   0x8B, 0x6D, 0xBE, 0x69, 0x74, 0xBE, 0x2F, 0x69, 0x7E, 0x34, 0x74, 0x7E, 0x74, 0x6D, 0xAC, 0x6E, 
   0x67, 0xBD, 0x61, 0x6B, 0xA5, 0x37, 0x59, 0x86, 0x2A, 0x63, 0xBC, 0x51, 0x57, 0x80, 0x4C, 0x4C, 
   0x41, 0x4C, 0x74, 0x81, 0x4C, 0x8B, 0xD9, 0x4C, 0x79, 0xC2, 0x4C, 0x60, 0x6A, 0x4C, 0x36, 0x85, 
   0x4C, 0x47, 0x89, 0x4C, 0x7A, 0x89, 0x4C, 0x53, 0x8A, 0x4C, 0x48, 0xA8, 0x4C, 0x60, 0x9D, 0x51, 
   0x83, 0x91, 0x40, 0x71, 0x90, 0x4B, 0x54, 0x84, 0x4B, 0x4D, 0x84, 0x50, 0x63, 0xA0, 0x39, 0x7F, 
   0x89, 0x50, 0x50, 0x84, 0x57, 0x22, 0x74, 0x4C, 0x51, 0x98, 0x4C, 0x8C, 0xBB, 0x4C, 0x76, 0x9F, 
   0x4C, 0x4D, 0x7C, 0x4C, 0x47, 0x9D, 0x57, 0x63, 0x96, 0x56, 0x5E, 0x68, 0x38, 0x6E, 0x80, 0x2C, 
   0x6C, 0xA4, 0x4F, 0x26, 0xD2, 0x72, 0x3D, 0x77, 0x55, 0x78, 0x3B, 0x20, 0x80, 0xCC, 0x2C, 0x5E, 
   0xF5, 0x5B, 0x4C, 0x85, 0x62, 0x62, 0x81, 0x56, 0x68, 0x64, 0x28, 0x35, 0x7C, 0x29, 0x54, 0xA4, 
   0x74, 0x84, 0xAF, 0x6F, 0xA0, 0x8C, 0x45, 0x6A, 0x80, 0x49, 0x22, 0x8B, 0x26, 0x1B, 0x96, 0x27, 
   0x73, 0x85, 0x5C, 0xA7, 0x85, 0x7F, 0x67, 0x8B, 0x4B, 0x0A, 0x97, 0x21, 0x44, 0x9D, 0x43, 0x96, 
   0xA1, 0x5B, 0x90, 0x84, 0x57, 0x50, 0x7D, 0x40, 0x26, 0xAA, 0x4B, 0x4F, 0x71, 0x4B, 0x73, 0x78, 
   0x4B, 0x63, 0xAC, 0x4B, 0x4E, 0x80, 0x45, 0x83, 0x7D, 0x57, 0x93, 0xC3, 0x4C, 0x4D, 0xC3, 0x4C, 
   0x4B, 0x98, 0x4C, 0x60, 0x78, 0x4C, 0x4F, 0x70, 0x51, 0x44, 0x77, 0x57, 0x6C, 0xAC, 0x4B, 0x78, 
   0xAD, 0x50, 0x45, 0x9B, 0x4B, 0x45, 0x6C, 0x4B, 0x68, 0x71, 0x4B, 0x69, 0xA6, 0x45, 0x63, 0x90, 
   0x57, 0x5E, 0x96, 0x4C, 0x53, 0x9C, 0x4C, 0x75, 0xB1, 0x4C, 0x7F, 0x86, 0x4C, 0x44, 0x4B, 0x4C, 
   0x32, 0x74, 0x4C, 0x4A, 0xAF, 0x4C, 0x8B, 0xBB, 0x4C, 0x7A, 0x91, 0x4C, 0x57, 0x5C, 0x57, 0x51, 
   0x7D, 0x45, 0x5C, 0xA4, 0x4B, 0x56, 0x8C, 0x4B, 0x5D, 0x7A, 0x45, 0x69, 0x68, 0x57, 0x69, 0x86, 
   0x4C, 0x57, 0x9E, 0x4C, 0x68, 0xA9, 0x4C, 0x51, 0x74, 0x41, 0x4B, 0x58, 0x42, 0x52, 0x7C, 0x75, 
   0x75, 0xCD, 0x90, 0x80, 0xE2, 0x1B, 0x56, 0x4F, 0x03, 0x39, 0x2A, 0x49, 0x50, 0x64, 0x79, 0x62, 
   0x95, 0x5D, 0x6A, 0xB5, 0x46, 0x55, 0xAF, 0x40, 0x83, 0x86, 0x45, 0x98, 0x51, 0x57, 0x45, 0x73, 
   0x51, 0x0A, 0x9C, 0x4C, 0x44, 0x91, 0x3B, 0x7B, 0x6F, 0x42, 0x8A, 0x75, 0x5F, 0x7A, 0xA4, 0x4F, 
   0x5C, 0x99, 0x65, 0x55, 0x9E, 0x79, 0x6A, 0x90, 0x26, 0x4C, 0x5A, 0x00, 0x47, 0x1D, 0x37, 0x4E, 
   0xAA, 0x58, 0x73, 0xD1, 0x5C, 0x70, 0xA5, 0x7A, 0x6B, 0x81, 0x74, 0xA3, 0xAC, 0x44, 0x7D, 0xA9, 
   0x30, 0x12, 0x5B, 0x3A, 0x05, 0x42, 0x5C, 0x95, 0x98, 0x62, 0xA1, 0xA9, 0x39, 0x23, 0x81, 0x44, 
   0x28, 0x4C, 0x56, 0x96, 0x6A, 0x62, 0x85, 0xA6, 0x40, 0x4B, 0xA8, 0x45, 0x4A, 0xA1, 0x5B, 0x5B, 
   0x82, 0x59, 0x7C, 0x73, 0x4B, 0x63, 0x4F, 0x2E, 0x17, 0x56, 0x29, 0x24, 0x83, 0x2C, 0x8E, 0xBA, 
   0x63, 0xA1, 0xBB, 0x9D, 0x5B, 0xA2, 0x83, 0x36, 0x8D, 0x1C, 0x61, 0x77, 0x00, 0x43, 0x52, 0x2A, 
   0x38, 0x4D, 0x44, 0x50, 0x82, 0x63, 0x6E, 0xA1, 0x5F, 0x79, 0x96, 0x3D, 0x3F, 0x68, 0x42, 0x2D, 
   0x62, 0x48, 0x62, 0x8B, 0x48, 0x6F, 0x8C, 0x63, 0x59, 0x81, 0x4A, 0x64, 0x8C, 0x21, 0x68, 0x90, 
   0x1B, 0x4B, 0x56, 0x3A, 0x08, 0x4C, 0x5F, 0x77, 0x8E, 0x6C, 0xBD, 0xC9, 0x6B, 0x7D, 0xA0, 0x46, 
   0x1E, 0x54, 0x10, 0x21, 0x58, 0x43, 0x66, 0xA3, 0x5F, 0x67, 0xA2, 0x3D, 0x57, 0x67, 0x22, 0x4C, 
   0x4F, 0x40, 0x5D, 0x7D, 0x75, 0x64, 0x9A, 0x47, 0x59, 0x7F, 0x3B, 0x59, 0x74, 0x40, 0x59, 0x85, 
   0x40, 0x59, 0x8C, 0x57, 0x59, 0x81, 0x3F, 0x55, 0x94, 0x3F, 0x50, 0x8E, 0x34, 0x67, 0xB6, 0x5D, 
   0x51, 0x88, 0x47, 0x3B, 0x55, 0x31, 0x6F, 0xCE, 0x4E, 0x82, 0xA2, 0x55, 0x4F, 0x6F, 0x44, 0x4A, 
   0x8D, 0x56, 0x7D, 0xB6, 0x50, 0x61, 0xAB, 0x4B, 0x5A, 0x9A, 0x50, 0x81, 0xA4, 0x60, 0x68, 0x8C, 
   0x26, 0x0C, 0x85, 0x20, 0x46, 0xA2, 0x77, 0xB9, 0x91, 0x6C, 0x6A, 0x98, 0x21, 0x14, 0xB4, 0x43, 
   0x6F, 0x76, 0x66, 0x7B, 0x76, 0x44, 0x5E, 0xFD, 0x54, 0x4B, 0x94, 0x3C, 0x50, 0x04, 0x1A, 0x5B, 
   0x9F, 0x5F, 0x4A, 0xDF, 0x65, 0x83, 0x80, 0x21, 0x67, 0x7A, 0x49, 0x28, 0xB9, 0x43, 0x5C, 0xB2, 
   0x55, 0x79, 0x6D, 0x4F, 0x41, 0x6D, 0x3E, 0x5E, 0xA7, 0x43, 0x75, 0xA8, 0x55, 0x48, 0x6B, 0x60, 
   0x91, 0xB5, 0x37, 0x6D, 0xD6, 0x2B, 0x22, 0x6D, 0x32, 0x3E, 0x5B, 0x6C, 0x63, 0x96, 0x56, 0x71, 
   0xC6, 0x3F, 0x67, 0xA5, 0x34, 0x3B, 0x5C, 0x5C, 0x75, 0xAD, 0x51, 0x9D, 0xC5, 0x45, 0x4C, 0x7C, 
   0x44, 0x39, 0xB4, 0x3E, 0x66, 0xC4, 0x43, 0x56, 0x63, 0x33, 0x57, 0x85, 0x4B, 0x69, 0xB9, 0x6F, 
   0x5A, 0x82, 0x43, 0x72, 0x95, 0x65, 0x6C, 0xA7, 0x5E, 0x4A, 0xB3, 0x3A, 0x6C, 0xC3, 0x4E, 0x7D, 
   0x93, 0x09, 0x54, 0x6F, 0x43, 0x32, 0x90, 0x7E, 0x72, 0x96, 0x41, 0x7E, 0xA9, 0x1F, 0x51, 0xA4, 
   0x64, 0x62, 0x89, 0x65, 0x6E, 0xB1, 0x3D, 0x6E, 0xB1, 0x38, 0x57, 0x99, 0x60, 0x57, 0x93, 0x4A, 
   0x6E, 0x93, 0x28, 0x74, 0xAA, 0x67, 0x57, 0xAA, 0x6C, 0x5D, 0x88, 0x32, 0x73, 0xCB, 0x31, 0x55, 
   0x85, 0x64, 0x4F, 0x6D, 0x4D, 0x66, 0xC7, 0x20, 0x5B, 0x93, 0x54, 0x5B, 0x7C, 0x7D, 0x72, 0x99, 
   0x23, 0x5C, 0x9F, 0x4B, 0x68, 0x7E, 0x74, 0x79, 0xA1, 0x5D, 0x68, 0xB8, 0x3A, 0x5C, 0xA6, 0x4A, 
   0x6C, 0x77, 0x55, 0x66, 0xAF, 0x4F, 0x70, 0xC4, 0x59, 0x4D, 0x5C, 0x3B, 0x52, 0x66, 0x4C, 0x7F, 
   0xC1, 0x51, 0x57, 0xAA, 0x4C, 0x56, 0x65, 0x4C, 0x4F, 0x8C, 0x4C, 0x5A, 0xC5, 0x4C, 0x82, 0x9D, 
   0x4C, 0x5F, 0x6E, 0x4C, 0x31, 0x7E, 0x4C, 0x6A, 0x95, 0x4C, 0x6B, 0x7F, 0x4C, 0x6B, 0x96, 0x4C, 
   0x54, 0x9C, 0x57, 0x54, 0x85, 0x40, 0x6B, 0x90, 0x4B, 0x7B, 0x9B, 0x4B, 0x52, 0x84, 0x56, 0x34, 
   0x89, 0x39, 0x4B, 0x7F, 0x4B, 0x7F, 0xB4, 0x57, 0x62, 0xA3, 0x4C, 0x3B, 0x65, 0x4C, 0x5E, 0x9E, 
   0x4C, 0x81, 0xBA, 0x57, 0x64, 0x70, 0x4B, 0x53, 0x86, 0x34, 0x6E, 0x97, 0x5B, 0x68, 0xA3, 0x4A, 
   0x3F, 0x97, 0x3E, 0x72, 0x43, 0x49, 0x5B, 0x8A, 0x38, 0x39, 0xFE, 0x4F, 0x5C, 0x8D, 0x61, 0x6E, 
   0x80, 0x3F, 0x85, 0xBC, 0x44, 0x3B, 0x6C, 0x2E, 0x3B, 0x8E, 0x57, 0x75, 0xD2, 0x6E, 0x6B, 0x93, 
   0x35, 0x6B, 0x75, 0x4B, 0x5F, 0x8C, 0x61, 0x53, 0x9E, 0x2D, 0x69, 0x8C, 0x4A, 0x68, 0x8B, 0x5B, 
   0x50, 0x9C, 0x56, 0x3E, 0x8B, 0x2E, 0x4A, 0x9D, 0x50, 0x7E, 0x9D, 0x5B, 0x67, 0x9C, 0x33, 0x3E, 
   0x6E, 0x33, 0x44, 0xA0, 0x6D, 0x6C, 0x9A, 0x57, 0x67, 0x61, 0x40, 0x50, 0x9F, 0x4B, 0x45, 0xAB, 
   0x4B, 0x52, 0x63, 0x45, 0x86, 0x92, 0x4B, 0x64, 0xC6, 0x40, 0x31, 0x7D, 0x57, 0x80, 0x98, 0x4C, 
   0x79, 0xB9, 0x4C, 0x23, 0x68, 0x57, 0x55, 0x72, 0x40, 0x7D, 0x83, 0x50, 0x3E, 0x89, 0x3F, 0x50, 
   0xA0, 0x39, 0x78, 0x7E, 0x4B, 0x68, 0xA6, 0x4B, 0x46, 0x8F, 0x4B, 0x62, 0x84, 0x4B, 0x52, 0x79, 
   0x40, 0x58, 0xAC, 0x57, 0x7A, 0xA6, 0x4C, 0x5D, 0x6C, 0x4C, 0x3F, 0x87, 0x4C, 0x4A, 0x9D, 0x4C, 
   0x7E, 0x86, 0x4C, 0x61, 0x80, 0x4C, 0x3F, 0x80, 0x4C, 0x56, 0x97, 0x57, 0x62, 0xAD, 0x40, 0x62, 
   0x7E, 0x4B, 0x51, 0x76, 0x4B, 0x56, 0x7B, 0x4B, 0x68, 0x86, 0x4B, 0x5D, 0x86, 0x40, 0x5D, 0x86, 
   0x57, 0x68, 0x91, 0x4C, 0x46, 0x6F, 0x41, 0x5D, 0x75, 0x4D, 0x69, 0x98, 0x7A, 0x6E, 0xAE, 0x4B, 
   0x5D, 0x6E, 0x11, 0x51, 0x4B, 0x55, 0x56, 0xA6, 0x66, 0x6D, 0xA0, 0x2D, 0x4B, 0x6D, 0x2D, 0x46, 
   0x6D, 0x4B, 0x53, 0x90, 0x68, 0x98, 0x7A, 0x4C, 0x6F, 0x80, 0x40, 0x30, 0xB4, 0x45, 0x5D, 0x86, 
   0x40, 0x8A, 0x63, 0x41, 0x29, 0x7F, 0x69, 0x47, 0xA2, 0x59, 0x7C, 0x92, 0x43, 0x62, 0x81, 0x6A, 
   0x84, 0x8C, 0x5D, 0x6C, 0x8B, 0x17, 0x3D, 0x5D, 0x4A, 0x53, 0x69, 0x61, 0x5F, 0xB9, 0x29, 0x5A, 
   0x4F, 0x36, 0x5C, 0x6D, 0x76, 0x74, 0xD5, 0x67, 0x96, 0xAD, 0x45, 0x57, 0x66, 0x60, 0x3F, 0x5E, 
   0x65, 0x82, 0xA1, 0x41, 0x8B, 0x9A, 0x2E, 0x11, 0x59, 0x39, 0x1C, 0x53, 0x61, 0xB1, 0x9D, 0x44, 
   0x7F, 0x8D, 0x2D, 0x1D, 0x6B, 0x3F, 0x4A, 0x77, 0x62, 0x6D, 0x94, 0x5C, 0x6D, 0x9A, 0x4F, 0x66, 
   0x8D, 0x3C, 0x42, 0x69, 0x12, 0x30, 0x5D, 0x34, 0x59, 0x6F, 0x4D, 0x70, 0x8E, 0x71, 0x4E, 0x95, 
   0x61, 0x43, 0x90, 0x43, 0x7C, 0x9F, 0x3C, 0x86, 0x6F, 0x51, 0x1E, 0x5C, 0x3E, 0x44, 0x66, 0x16, 
   0x6D, 0x88, 0x44, 0x62, 0x77, 0x51, 0x50, 0x72, 0x41, 0x2E, 0x73, 0x5F, 0x67, 0x90, 0x54, 0x67, 
   0xA2, 0x42, 0x40, 0x63, 0x5E, 0x4C, 0x80, 0x46, 0x74, 0x97, 0x23, 0x63, 0x80, 0x45, 0x35, 0x69, 
   0x51, 0x36, 0x6F, 0x3B, 0x92, 0xAF, 0x4C, 0x6A, 0x82, 0x5E, 0x20, 0x65, 0x41, 0x64, 0x88, 0x35, 
   0x86, 0xA5, 0x61, 0x51, 0x92, 0x38, 0x3F, 0x80, 0x0F, 0x44, 0x57, 0x32, 0x62, 0x8A, 0x61, 0x68, 
   0xA0, 0x62, 0x41, 0x72, 0x3B, 0x58, 0x50, 0x3B, 0x64, 0x8F, 0x4C, 0x59, 0x90, 0x4C, 0x59, 0x69, 
   0x3B, 0x59, 0x80, 0x40, 0x59, 0x91, 0x53, 0x62, 0x9F, 0x5E, 0x68, 0xA4, 0x40, 0x4B, 0x88, 0x29, 
   0x57, 0x67, 0x35, 0x58, 0xA7, 0x48, 0x6B, 0xB4, 0x60, 0x71, 0xBE, 0x55, 0x6B, 0x5C, 0x3E, 0x42, 
   0x46, 0x38, 0x54, 0xB5, 0x3F, 0x71, 0xDA, 0x62, 0x71, 0xD4, 0x78, 0x6A, 0x81, 0x2C, 0x29, 0x56, 
   0x09, 0x13, 0x5D, 0x3E, 0x7C, 0xB5, 0x7E, 0xB1, 0xD4, 0x6D, 0x7B, 0xC7, 0x26, 0x0C, 0x69, 0x00, 
   0x1C, 0x56, 0x4D, 0x96, 0xAC, 0x82, 0x81, 0xB8, 0x49, 0x69, 0x8A, 0x20, 0x4A, 0x68, 0x37, 0x39, 
   0x8C, 0x4A, 0x67, 0xF8, 0x78, 0x73, 0xB2, 0x55, 0x56, 0x49, 0x15, 0x4A, 0x65, 0x37, 0x34, 0x84, 
   0x6C, 0x75, 0xBC, 0x66, 0x9D, 0xD9, 0x37, 0x5D, 0xBA, 0x14, 0x22, 0x55, 0x5F, 0x33, 0x4F, 0x55, 
   0x85, 0xA7, 0x55, 0x91, 0xD7, 0x33, 0x41, 0xA9, 0x4A, 0x14, 0x42, 0x61, 0x87, 0x9E, 0x4F, 0x99, 
   0xD8, 0x21, 0x27, 0x7D, 0x33, 0x2D, 0x83, 0x5C, 0x8A, 0x95, 0x6E, 0x86, 0xB9, 0x50, 0x6E, 0xCB, 
   0x21, 0x3F, 0x80, 0x33, 0x2E, 0x91, 0x68, 0x69, 0xA2, 0x69, 0x8D, 0x8D, 0x46, 0x71, 0xB0, 0x34, 
   0x53, 0xC1, 0x2D, 0x5E, 0x7C, 0x29, 0x5F, 0x76, 0x74, 0x77, 0xAB, 0x91, 0x7E, 0xCE, 0x1E, 0x72, 
   0xA5, 0x1D, 0x44, 0x88, 0x62, 0x55, 0x7C, 0x79, 0x8F, 0xC0, 0x4A, 0x68, 0xAF, 0x00, 0x5C, 0x93, 
   0x2A, 0x51, 0x8D, 0x89, 0x74, 0xA0, 0x80, 0x80, 0xBD, 0x5D, 0x63, 0xAC, 0x3E, 0x69, 0x99, 0x3D, 
   0x74, 0x7C, 0x4F, 0x5D, 0x93, 0x5B, 0x68, 0xB0, 0x60, 0x68, 0xE3, 0x43, 0x6D, 0x96, 0x3C, 0x61, 
   0x4F, 0x48, 0x6C, 0x83, 0x50, 0x61, 0xAD, 0x68, 0x7E, 0xD0, 0x78, 0x6C, 0xBE, 0x27, 0x50, 0x71, 
   0x38, 0x6C, 0x70, 0x45, 0x5C, 0x8F, 0x74, 0x73, 0xCA, 0x79, 0x5C, 0xD5, 0x2E, 0x67, 0x83, 0x32, 
   0x6C, 0x75, 0x49, 0x6B, 0xA1, 0x72, 0x5A, 0x84, 0x60, 0x54, 0x96, 0x37, 0x7C, 0x9C, 0x46, 0x69, 
   0xCF, 0x3A, 0x56, 0xA4, 0x57, 0x49, 0x63, 0x4C, 0x54, 0x5C, 0x4C, 0x5A, 0xAD, 0x4C, 0x83, 0xA9, 
   0x4C, 0x6C, 0x92, 0x4C, 0x49, 0x91, 0x4C, 0x49, 0x8A, 0x4C, 0x8D, 0x90, 0x4C, 0x5F, 0x8A, 0x4C, 
   0x36, 0x85, 0x4C, 0x4D, 0x9C, 0x57, 0x76, 0x9C, 0x40, 0x81, 0x90, 0x45, 0x4C, 0x84, 0x50, 0x3B, 
   0x6E, 0x3F, 0x75, 0xA8, 0x3F, 0x86, 0xA9, 0x4B, 0x57, 0x92, 0x57, 0x3F, 0x86, 0x4C, 0x46, 0x7B, 
   0x57, 0x75, 0x9E, 0x4B, 0x76, 0x98, 0x34, 0x6F, 0x76, 0x4B, 0x46, 0xB5, 0x57, 0x3F, 0xC5, 0x6D, 
   0x56, 0x53, 0x49, 0x7F, 0x44, 0x04, 0x73, 0xC4, 0x5A, 0x3E, 0xDC, 0x67, 0x27, 0xA1, 0x67, 0x61, 
   0x49, 0x44, 0x6E, 0x60, 0x1D, 0x5E, 0xBD, 0x51, 0x48, 0xC9, 0x6F, 0x76, 0x83, 0x63, 0x8C, 0x75, 
   0x3F, 0x46, 0x69, 0x27, 0x18, 0x9E, 0x38, 0x58, 0xB0, 0x4B, 0x99, 0xA4, 0x68, 0xA8, 0x80, 0x67, 
   0x33, 0x74, 0x2D, 0x04, 0xA2, 0x33, 0x6C, 0xA2, 0x50, 0xA7, 0x9C, 0x79, 0x73, 0x6E, 0x50, 0x26, 
   0x9B, 0x1C, 0x15, 0x9B, 0x33, 0x6C, 0x7E, 0x6D, 0x90, 0x89, 0x57, 0x5D, 0x89, 0x40, 0x2F, 0x73, 
   0x45, 0x68, 0x91, 0x62, 0x79, 0xA9, 0x45, 0x40, 0xA9, 0x4B, 0x4B, 0x9C, 0x40, 0x57, 0x5C, 0x57, 
   0x63, 0x7F, 0x57, 0x6E, 0xC5, 0x40, 0x62, 0xBA, 0x56, 0x50, 0x7F, 0x3F, 0x4F, 0x7D, 0x3F, 0x3E, 
   0x6C, 0x4B, 0x5C, 0x94, 0x5C, 0x7F, 0xAC, 0x40, 0x62, 0x8A, 0x4B, 0x46, 0x8A, 0x4B, 0x57, 0x9B, 
   0x4B, 0x80, 0x9A, 0x40, 0x74, 0x77, 0x57, 0x3F, 0x77, 0x4C, 0x3F, 0x9A, 0x4C, 0x62, 0xAB, 0x4C, 
   0x79, 0xC0, 0x4C, 0x5C, 0x57, 0x4C, 0x44, 0x67, 0x51, 0x3E, 0x9B, 0x40, 0x73, 0xB9, 0x4B, 0x6E, 
   0xA1, 0x4B, 0x5D, 0x60, 0x4B, 0x51, 0x6A, 0x45, 0x56, 0x87, 0x45, 0x5C, 0xA3, 0x4B, 0x5C, 0x91, 
   0x40, 0x51, 0x57, 0x46, 0x5D, 0x63, 0x4D, 0x58, 0xAF, 0x7A, 0x7A, 0xD8, 0x56, 0x62, 0x9C, 0x1B, 
   0x50, 0x32, 0x10, 0x39, 0x2C, 0x5C, 0x51, 0xA1, 0x8B, 0x7A, 0xD1, 0x57, 0x75, 0xA9, 0x16, 0x41, 
   0x62, 0x38, 0x74, 0x5A, 0x62, 0x6D, 0x61, 0x63, 0x28, 0x8B, 0x51, 0x34, 0xB5, 0x40, 0x6F, 0x9E, 
   0x35, 0x82, 0x69, 0x5D, 0x86, 0x5D, 0x47, 0x30, 0x96, 0x47, 0x2A, 0x8B, 0x69, 0x81, 0x91, 0x68, 
   0x6C, 0x85, 0x34, 0x66, 0x58, 0x17, 0x55, 0x76, 0x58, 0x4F, 0xC8, 0x7C, 0x66, 0xB8, 0x5A, 0x56, 
   0x77, 0x4D, 0x72, 0x5F, 0x2A, 0x6C, 0x7C, 0x3B, 0x49, 0xB5, 0x53, 0x2C, 0x65, 0x54, 0x56, 0x6A, 
   0x71, 0xB2, 0xA9, 0x59, 0x88, 0xB3, 0x2F, 0x24, 0x6C, 0x39, 0x0B, 0x48, 0x3F, 0x67, 0x6B, 0x61, 
   0xA6, 0xBC, 0x3F, 0x45, 0x9A, 0x28, 0x1C, 0x4E, 0x5B, 0x7E, 0x7A, 0x78, 0x95, 0x7A, 0x49, 0x4F, 
   0x81, 0x36, 0x0F, 0x7C, 0x3C, 0x44, 0x8F, 0x26, 0xB7, 0xB1, 0x70, 0x82, 0x7C, 0x6B, 0x24, 0x75, 
   0x4C, 0x2E, 0x79, 0x11, 0x6E, 0x6E, 0x11, 0x64, 0x80, 0x63, 0x69, 0x8C, 0x8D, 0x3B, 0x8C, 0x58, 
   0x6E, 0x90, 0x23, 0x6D, 0x89, 0x27, 0x39, 0x49, 0x3F, 0x4B, 0x6C, 0x58, 0x6E, 0x96, 0x5F, 0x63, 
   0x91, 0x58, 0x57, 0x80, 0x40, 0x40, 0x6E, 0x1D, 0x62, 0x79, 0x46, 0x3A, 0x6E, 0x58, 0x36, 0x64, 
   0x5F, 0x7C, 0xAA, 0x63, 0x98, 0xA5, 0x28, 0x46, 0x8C, 0x1C, 0x0B, 0x2A, 0x3A, 0x1E, 0x7B, 0x6E, 
   0x92, 0xCC, 0x74, 0x97, 0x92, 0x28, 0x35, 0x4C, 0x22, 0x28, 0x79, 0x50, 0x56, 0x96, 0x61, 0x6E, 
   0x7F, 0x4A, 0x63, 0x78, 0x28, 0x41, 0x6C, 0x46, 0x52, 0x73, 0x63, 0x5E, 0x96, 0x58, 0x5E, 0x8B, 
   0x47, 0x5E, 0x69, 0x35, 0x59, 0x85, 0x54, 0x5E, 0x92, 0x5F, 0x63, 0x92, 0x41, 0x41, 0x50, 0x35, 
   0x64, 0xA2, 0x41, 0x70, 0xDD, 0x59, 0x60, 0xA9, 0x49, 0x65, 0x85, 0x49, 0x64, 0x95, 0x49, 0x63, 
   0x84, 0x3E, 0x31, 0x7B, 0x4F, 0x70, 0xC7, 0x6C, 0x8D, 0xC7, 0x33, 0x3D, 0x81, 0x2D, 0x21, 0x69, 
   0x56, 0xA0, 0x7B, 0x62, 0x90, 0xA0, 0x40, 0x4A, 0xF0, 0x5B, 0x6A, 0xAA, 0x70, 0x7E, 0x5E, 0x30, 
   0x16, 0xAB, 0x24, 0x27, 0x9E, 0x41, 0xA1, 0x44, 0x49, 0x7A, 0x8C, 0x5B, 0x3B, 0xFF, 0x67, 0x56, 
   0xBC, 0x50, 0x61, 0x53, 0x39, 0x3F, 0xB0, 0x61, 0x6D, 0xB4, 0x55, 0x74, 0x1A, 0x2C, 0x41, 0x52, 
   0x49, 0x48, 0xFF, 0x5A, 0x9C, 0xFF, 0x4E, 0x5C, 0x87, 0x36, 0x21, 0x54, 0x1A, 0x4E, 0x64, 0x54, 
   0x4A, 0x82, 0x50, 0x42, 0x86, 0x6E, 0x9B, 0xBE, 0x5C, 0xA1, 0xDB, 0x2D, 0x5B, 0xA7, 0x3E, 0x32, 
   0x72, 0x55, 0x4E, 0x9A, 0x3F, 0x77, 0xB6, 0x50, 0x4F, 0x78, 0x4B, 0x5B, 0x84, 0x61, 0x79, 0xC9, 
   0x33, 0x5D, 0xA1, 0x29, 0x53, 0x64, 0x70, 0x77, 0x9F, 0x88, 0x9A, 0xDF, 0x5E, 0x77, 0xA1, 0x28, 
   0x64, 0x9F, 0x26, 0x2A, 0x97, 0x3D, 0x52, 0x91, 0x44, 0x7C, 0x8B, 0x58, 0x7D, 0x93, 0x5F, 0x45, 
   0xA1, 0x7C, 0x78, 0xD0, 0x58, 0x84, 0xB2, 0x1D, 0x5D, 0x72, 0x2C, 0x68, 0x98, 0x43, 0x6D, 0x98, 
   0x2F, 0x6D, 0x98, 0x4A, 0x5D, 0x99, 0xAE, 0x69, 0xAC, 0x8C, 0x75, 0xBD, 0x23, 0x80, 0xAC, 0x21, 
   0x57, 0x94, 0x6A, 0x68, 0x88, 0x43, 0x68, 0xBA, 0x3D, 0x68, 0xB9, 0x65, 0x68, 0x79, 0x48, 0x6D, 
   0x7D, 0x17, 0x6D, 0x90, 0x5E, 0x68, 0xA3, 0x9D, 0x6D, 0xC1, 0x52, 0x5C, 0xC5, 0x22, 0x67, 0x79, 
   0x4F, 0x67, 0x4F, 0x60, 0x6C, 0xBC, 0x4A, 0x67, 0xB7, 0x5C, 0x67, 0x84, 0x67, 0x6C, 0xA4, 0x3E, 
   0x7D, 0xB8, 0x38, 0x49, 0x4A, 0x5B, 0x50, 0x56, 0x67, 0x95, 0xBF, 0x6B, 0x89, 0xE2, 0x42, 0x5E, 
   0x85, 0x35, 0x5B, 0x71, 0x40, 0x4E, 0xA1, 0x57, 0x54, 0x6D, 0x4C, 0x65, 0x62, 0x4C, 0x4A, 0xA8, 
   0x4C, 0x72, 0xD1, 0x4C, 0x84, 0xA3, 0x4C, 0x66, 0x74, 0x4C, 0x37, 0x90, 0x4C, 0x53, 0x90, 0x4C, 
   0x6A, 0x8A, 0x4C, 0x6A, 0x96, 0x51, 0x5E, 0x9C, 0x57, 0x47, 0x85, 0x57, 0x5E, 0x7A, 0x40, 0x64, 
   0xA8, 0x56, 0x76, 0x9D, 0x3F, 0x6A, 0x86, 0x44, 0x57, 0x86, 0x4B, 0x51, 0xA2, 0x5C, 0x56, 0x80, 
   0x45, 0x3B, 0x7C, 0x34, 0x7A, 0xB6, 0x4B, 0x7A, 0xB6, 0x57, 0x3B, 0x87, 0x57, 0x51, 0x4E, 0x4B, 
   0x68, 0x7E, 0x38, 0x57, 0xF2, 0x32, 0x5D, 0xBE, 0x4F, 0x73, 0x67, 0x61, 0x50, 0x9E, 0x3F, 0x39, 
   0x98, 0x34, 0x4B, 0x61, 0x4C, 0x76, 0xC9, 0x69, 0x93, 0xC4, 0x52, 0x5F, 0x83, 0x40, 0x4B, 0x7C, 
   0x55, 0x3E, 0x92, 0x2C, 0x3F, 0x8D, 0x28, 0x6F, 0xA5, 0x6E, 0x8D, 0xAB, 0x7F, 0x4D, 0x7C, 0x2E, 
   0x4B, 0x80, 0x33, 0x4A, 0xAD, 0x4F, 0x45, 0x8A, 0x3F, 0x78, 0x79, 0x40, 0x5C, 0x9B, 0x79, 0x5B, 
   0x95, 0x56, 0x49, 0x6E, 0x1C, 0x4A, 0x9C, 0x33, 0x74, 0xB8, 0x6D, 0x6F, 0x74, 0x51, 0x80, 0x86, 
   0x3A, 0x51, 0xB4, 0x45, 0x2E, 0xA2, 0x4B, 0x67, 0x79, 0x4B, 0x78, 0x8E, 0x4B, 0x46, 0x77, 0x4B, 
   0x5E, 0x57, 0x4B, 0x86, 0xB5, 0x56, 0x7A, 0xDE, 0x3F, 0x2F, 0x93, 0x3F, 0x50, 0x73, 0x4B, 0x6C, 
   0x71, 0x57, 0x4A, 0x83, 0x4C, 0x5C, 0x9B, 0x57, 0x62, 0x96, 0x40, 0x57, 0xB3, 0x45, 0x5D, 0xA6, 
   0x4B, 0x6D, 0x60, 0x4B, 0x45, 0x70, 0x40, 0x3F, 0xA5, 0x57, 0x74, 0xA0, 0x4C, 0x80, 0xA6, 0x4C, 
   0x52, 0x99, 0x4C, 0x56, 0x90, 0x4C, 0x55, 0x50, 0x57, 0x44, 0x7D, 0x45, 0x4A, 0x9A, 0x4B, 0x79, 
   0x9B, 0x4B, 0x69, 0xA1, 0x40, 0x5D, 0x7E, 0x57, 0x5C, 0x82, 0x57, 0x50, 0xA9, 0x40, 0x50, 0x6F, 
   0x35, 0x51, 0x63, 0x52, 0x5E, 0x6F, 0x7A, 0x8C, 0xB4, 0x56, 0x69, 0xB3, 0x1B, 0x45, 0x56, 0x1B, 
   0x3E, 0x55, 0x61, 0x4A, 0x9A, 0x5D, 0x5D, 0x6F, 0x59, 0x64, 0x93, 0x6F, 0x6B, 0xCC, 0x4B, 0x91, 
   0x96, 0x16, 0x5C, 0x44, 0x33, 0x16, 0x66, 0x67, 0x44, 0xAC, 0x4C, 0x79, 0x75, 0x41, 0x70, 0x93, 
   0x5D, 0x6C, 0xA4, 0x52, 0x71, 0x8C, 0x4D, 0x64, 0x5D, 0x4C, 0x46, 0x84, 0x66, 0x34, 0x8F, 0x21, 
   0x63, 0x5C, 0x22, 0x6C, 0x70, 0x5D, 0x6E, 0xAC, 0x49, 0x74, 0xA8, 0x51, 0x58, 0x8C, 0x9A, 0x7E, 
   0xB1, 0x53, 0x77, 0x9D, 0x17, 0x41, 0x39, 0x28, 0x35, 0x62, 0x5C, 0x5F, 0xA9, 0x4D, 0x9F, 0xBB, 
   0x4E, 0x57, 0x76, 0x5A, 0x5C, 0x80, 0x70, 0xAA, 0xA1, 0x41, 0x69, 0x89, 0x34, 0x00, 0x61, 0x34, 
   0x3E, 0x6D, 0x84, 0xA0, 0xC2, 0x5B, 0x61, 0xA9, 0x2C, 0x49, 0x4B, 0x4D, 0x65, 0x50, 0x31, 0x44, 
   0x6F, 0x27, 0x68, 0x90, 0x6D, 0x85, 0xCB, 0x78, 0x68, 0x9C, 0x37, 0x5A, 0x81, 0x56, 0x57, 0x66, 
   0x2D, 0x3E, 0x47, 0x2C, 0x16, 0x71, 0x22, 0x4C, 0x7A, 0x36, 0x98, 0xA5, 0x83, 0x7C, 0xBC, 0x88, 
   0x41, 0x7B, 0x41, 0x1D, 0x68, 0x00, 0x5B, 0x6C, 0x2D, 0x73, 0x83, 0x56, 0x41, 0x68, 0x57, 0x5D, 
   0x85, 0x40, 0x68, 0x97, 0x34, 0x67, 0x8B, 0x29, 0x29, 0x57, 0x58, 0x3B, 0x75, 0x49, 0x7C, 0x93, 
   0x6B, 0x8D, 0xB6, 0x63, 0x42, 0x87, 0x17, 0x45, 0x53, 0x1B, 0x50, 0x80, 0x44, 0x57, 0x7A, 0x5C, 
   0x58, 0x7A, 0x35, 0x64, 0x80, 0x47, 0x80, 0x7A, 0x69, 0x46, 0x97, 0x51, 0x34, 0x69, 0x2D, 0x4B, 
   0x74, 0x21, 0x6E, 0x96, 0x44, 0x5D, 0x7F, 0x56, 0x4D, 0x6D, 0x3B, 0x69, 0x68, 0x47, 0x4D, 0x90, 
   0x58, 0x4D, 0x85, 0x36, 0x69, 0x80, 0x48, 0x4E, 0x5E, 0x48, 0x49, 0x32, 0x42, 0x65, 0xCF, 0x42, 
   0x77, 0xBB, 0x42, 0x5A, 0xA4, 0x59, 0x70, 0x97, 0x42, 0x64, 0x74, 0x3D, 0x41, 0x8B, 0x49, 0x47, 
   0xB9, 0x60, 0x80, 0xAD, 0x54, 0x5E, 0x6D, 0x20, 0x31, 0x7F, 0x1C, 0x44, 0xAF, 0x6E, 0x97, 0x9B, 
   0x80, 0xAF, 0xB8, 0x5D, 0x68, 0xC2, 0x3F, 0x20, 0x60, 0x27, 0x4C, 0x76, 0x4E, 0x74, 0xF2, 0x75, 
   0x94, 0xAB, 0x24, 0x0F, 0x2B, 0x02, 0x1B, 0x54, 0x4E, 0x7F, 0xC6, 0x73, 0x81, 0xDA, 0x5D, 0x75, 
   0xC8, 0x4B, 0x46, 0x74, 0x2D, 0x3F, 0x48, 0x3F, 0x46, 0x8C, 0x72, 0x64, 0x95, 0x55, 0x9E, 0xAF, 
   0x1B, 0x86, 0xB6, 0x3D, 0x0D, 0x9F, 0x60, 0x5B, 0x9D, 0x65, 0x88, 0x8A, 0x2B, 0x2D, 0x93, 0x1B, 
   0x1C, 0x5A, 0x5B, 0x48, 0x47, 0x7A, 0xA8, 0xE6, 0x68, 0xC5, 0xFF, 0x22, 0x3A, 0x8C, 0x33, 0x1C, 
   0x5C, 0x56, 0x93, 0xB1, 0x6D, 0x93, 0xA6, 0x3F, 0x2B, 0x9F, 0x3E, 0x31, 0x8D, 0x2D, 0x50, 0x60, 
   0x45, 0x76, 0x9B, 0x52, 0x95, 0xB5, 0x48, 0x73, 0xA1, 0x5A, 0x4A, 0xBE, 0x7B, 0x71, 0xC3, 0x45, 
   0x53, 0x82, 0x32, 0x58, 0xA2, 0x47, 0x63, 0xB2, 0x0F, 0x58, 0x62, 0x18, 0x3D, 0x5E, 0x9F, 0x7E, 
   0xB8, 0x9A, 0x74, 0xE9, 0x31, 0x6E, 0xD2, 0x34, 0x5D, 0x8B, 0x28, 0x68, 0x72, 0x4B, 0x68, 0xB5, 
   0x5D, 0x68, 0x93, 0x48, 0x62, 0x93, 0x2E, 0x52, 0x99, 0x79, 0x8B, 0x8F, 0x74, 0x6E, 0xB8, 0x50, 
   0x5D, 0xBD, 0x2C, 0x62, 0xC1, 0x42, 0x68, 0x7F, 0x53, 0x68, 0x6D, 0x43, 0x62, 0x9B, 0x2E, 0x62, 
   0xA8, 0x63, 0x5D, 0x9E, 0x8D, 0x79, 0xB5, 0x54, 0x5D, 0x93, 0x47, 0x6D, 0x8D, 0x56, 0x73, 0xD7, 
   0x55, 0x67, 0xAD, 0x43, 0x5B, 0x72, 0x37, 0x55, 0x7C, 0x32, 0x77, 0xAF, 0x67, 0x66, 0xB3, 0x83, 
   0x44, 0x74, 0x27, 0x4A, 0x79, 0x38, 0x8A, 0x97, 0x66, 0x7F, 0xAF, 0x60, 0x72, 0xBF, 0x5A, 0x69, 
   0xA1, 0x4D, 0x4B, 0x82, 0x3A, 0x55, 0x92, 0x40, 0x60, 0xA7, 0x51, 0x60, 0x6D, 0x46, 0x55, 0x62, 
   0x4C, 0x4B, 0xAD, 0x4C, 0x90, 0xAE, 0x4C, 0x84, 0x9D, 0x4C, 0x43, 0x7A, 0x4C, 0x42, 0x8A, 0x4C, 
   0x86, 0x8A, 0x51, 0x7A, 0xA1, 0x40, 0x40, 0x7F, 0x45, 0x40, 0x86, 0x57, 0x6A, 0xA9, 0x57, 0x87, 
   0xA9, 0x40, 0x54, 0x86, 0x5B, 0x41, 0x7A, 0x28, 0x57, 0x91, 0x44, 0x79, 0x9D, 0x56, 0x5D, 0x92, 
   0x4B, 0x56, 0x93, 0x45, 0x51, 0x8E, 0x57, 0x57, 0xCC, 0x57, 0x80, 0x5F, 0x40, 0x5E, 0x3F, 0x45, 
   0x4C, 0xE1, 0x4B, 0x57, 0xED, 0x5B, 0x52, 0x7E, 0x55, 0x6E, 0x5D, 0x2C, 0x7F, 0x41, 0x33, 0x3F, 
   0xAA, 0x46, 0x29, 0xEA, 0x75, 0x81, 0x7F, 0x64, 0x9E, 0x78, 0x4C, 0x5E, 0xA0, 0x3F, 0x28, 0xAB, 
   0x2D, 0x33, 0x88, 0x3F, 0x7F, 0x93, 0x62, 0x85, 0x94, 0x57, 0x4C, 0xA0, 0x45, 0x41, 0xB0, 0x39, 
   0x76, 0xA3, 0x56, 0xA3, 0x85, 0x56, 0x56, 0x6D, 0x3F, 0x0B, 0x89, 0x39, 0x5B, 0x95, 0x40, 0x7F, 
   0x85, 0x79, 0x7F, 0x96, 0x56, 0x3F, 0xA8, 0x1C, 0x29, 0x75, 0x28, 0x80, 0x9E, 0x73, 0x97, 0xB5, 
   0x63, 0x40, 0x92, 0x3A, 0x33, 0x9B, 0x50, 0x60, 0x82, 0x4B, 0x50, 0x4E, 0x50, 0x56, 0x88, 0x3F, 
   0x74, 0xB2, 0x4F, 0x58, 0x75, 0x4A, 0x6A, 0xA4, 0x3F, 0x75, 0xCD, 0x4B, 0x47, 0x9E, 0x57, 0x68, 
   0x73, 0x4C, 0x50, 0x83, 0x4C, 0x2E, 0x72, 0x4C, 0x62, 0xB2, 0x51, 0x8B, 0xAC, 0x57, 0x6D, 0x78, 
   0x40, 0x39, 0x82, 0x4B, 0x39, 0x7C, 0x4B, 0x68, 0x9F, 0x40, 0x80, 0x9F, 0x57, 0x5E, 0x93, 0x4C, 
   0x57, 0x65, 0x4C, 0x62, 0x9D, 0x57, 0x6D, 0xA1, 0x40, 0x6C, 0x5A, 0x4B, 0x33, 0x4E, 0x4B, 0x51, 
   0x89, 0x40, 0x6E, 0xB3, 0x57, 0x74, 0xB9, 0x4C, 0x56, 0x89, 0x4C, 0x4A, 0x4E, 0x46, 0x45, 0x75, 
   0x52, 0x5D, 0xAF, 0x7A, 0x80, 0xB9, 0x56, 0x69, 0x78, 0x1B, 0x51, 0x32, 0x1B, 0x4A, 0x6C, 0x61, 
   0x56, 0xBE, 0x6E, 0x74, 0x97, 0x41, 0x58, 0x8B, 0x3B, 0x5F, 0x74, 0x4D, 0x86, 0x80, 0x74, 0x79, 
   0x9D, 0x62, 0x33, 0x91, 0x1C, 0x2D, 0x79, 0x33, 0x67, 0x67, 0x57, 0x69, 0x6E, 0x69, 0x5F, 0x81, 
   0x47, 0x5A, 0xC2, 0x30, 0x61, 0xAB, 0x7A, 0x93, 0x86, 0x61, 0x63, 0x61, 0x00, 0x11, 0x55, 0x0F, 
   0x23, 0x68, 0x62, 0x70, 0xB6, 0x66, 0x8B, 0xA2, 0x68, 0x88, 0x8C, 0x62, 0x87, 0xA7, 0x61, 0x62, 
   0xA5, 0x53, 0x4D, 0x91, 0x45, 0x29, 0x3E, 0x33, 0x46, 0x33, 0x33, 0x85, 0xB8, 0x56, 0x54, 0xCC, 
   0x36, 0x4A, 0x7C, 0x65, 0x62, 0x59, 0x71, 0x8A, 0x92, 0x65, 0x94, 0xA9, 0x36, 0x47, 0x8B, 0x29, 
   0x00, 0x5C, 0x50, 0x5B, 0x88, 0x7C, 0xC1, 0xA8, 0x41, 0x42, 0x73, 0x00, 0x00, 0x1D, 0x26, 0x55, 
   0x7B, 0x5C, 0xBA, 0xB8, 0x80, 0x9D, 0xC0, 0x79, 0x28, 0x8A, 0x52, 0x42, 0x85, 0x00, 0x79, 0x5E, 
   0x30, 0x4A, 0x29, 0x3D, 0x33, 0x59, 0x4B, 0x3A, 0xA7, 0x4D, 0x6A, 0x9F, 0x27, 0x8D, 0x94, 0x55, 
   0x59, 0x7C, 0x82, 0x3A, 0x6A, 0x4C, 0x45, 0x90, 0x17, 0x6E, 0x7F, 0x38, 0x5D, 0x68, 0x44, 0x63, 
   0x79, 0x3F, 0x57, 0x90, 0x3B, 0x40, 0x85, 0x53, 0x3B, 0x6F, 0x49, 0x7C, 0x82, 0x65, 0x88, 0xB0, 
   0x48, 0x53, 0x87, 0x30, 0x35, 0x48, 0x51, 0x35, 0x76, 0x50, 0x7A, 0xCB, 0x3D, 0x85, 0x8B, 0x16, 
   0x23, 0x3A, 0x46, 0x18, 0x68, 0x76, 0x8C, 0xB3, 0x70, 0x98, 0x92, 0x40, 0x3B, 0x6F, 0x16, 0x34, 
   0x80, 0x2C, 0x45, 0x7A, 0x49, 0x63, 0x9C, 0x4A, 0x74, 0x90, 0x3A, 0x4D, 0x62, 0x3B, 0x58, 0x79, 
   0x53, 0x58, 0x8B, 0x59, 0x52, 0x8B, 0x36, 0x68, 0x97, 0x26, 0x6E, 0x86, 0x60, 0x67, 0xB5, 0x66, 
   0x61, 0xC0, 0x3E, 0x6B, 0x7A, 0x3D, 0x4D, 0x74, 0x36, 0x5E, 0xA7, 0x42, 0x58, 0xA3, 0x49, 0x5E, 
   0xB3, 0x59, 0x74, 0xA5, 0x31, 0x3B, 0x4E, 0x1B, 0x1B, 0x2D, 0x56, 0x85, 0xA4, 0x74, 0xC6, 0xFE, 
   0x64, 0x71, 0xEE, 0x4C, 0x4C, 0x84, 0x44, 0x54, 0x48, 0x37, 0x4C, 0xAD, 0x48, 0x5D, 0xC3, 0x48, 
   0x73, 0x77, 0x53, 0x71, 0x49, 0x2B, 0x04, 0xA1, 0x43, 0x45, 0xCB, 0x62, 0xA8, 0x83, 0x68, 0x65, 
   0xB0, 0x3A, 0x53, 0xEB, 0x3F, 0x6E, 0x44, 0x44, 0x3C, 0x28, 0x56, 0x5F, 0xFF, 0x66, 0x92, 0xFF, 
   0x49, 0x75, 0x4C, 0x1B, 0x3A, 0x4B, 0x4E, 0x39, 0xB3, 0x6C, 0x61, 0xDC, 0x4F, 0x7F, 0x80, 0x3E, 
   0x3C, 0x57, 0x33, 0x54, 0x91, 0x50, 0x78, 0xAB, 0x57, 0x5D, 0x97, 0x5C, 0x7A, 0xC0, 0x45, 0x79, 
   0xBF, 0x50, 0x4A, 0x6E, 0x56, 0x5F, 0x94, 0x55, 0x63, 0xD2, 0x21, 0x26, 0x7B, 0x34, 0x40, 0x59, 
   0x69, 0x94, 0x73, 0x81, 0x90, 0xD2, 0x4E, 0x68, 0xCF, 0x36, 0x5B, 0x96, 0x41, 0x4F, 0xA0, 0x6E, 
   0x71, 0xAF, 0x6C, 0x87, 0x8B, 0x04, 0x58, 0x79, 0x20, 0x24, 0x85, 0x6D, 0x65, 0x9E, 0x48, 0x95, 
   0xAC, 0x6B, 0x6E, 0xBA, 0x5F, 0x69, 0xC1, 0x3C, 0x74, 0xCC, 0x4D, 0x5D, 0xA2, 0x4D, 0x62, 0x6C, 
   0x52, 0x5D, 0xAF, 0x58, 0x74, 0x93, 0x14, 0x7F, 0x88, 0x32, 0x51, 0xAB, 0xA1, 0x51, 0xA6, 0x79, 
   0x79, 0xCE, 0x22, 0x74, 0xBA, 0x3C, 0x5D, 0x62, 0x59, 0x5D, 0x61, 0x17, 0x74, 0x9C, 0x63, 0x6E, 
   0xC1, 0x8D, 0x6E, 0xC2, 0x4E, 0x69, 0x88, 0x31, 0x74, 0x87, 0x5E, 0x62, 0x88, 0x69, 0x73, 0xC7, 
   0x61, 0x6C, 0xE8, 0x26, 0x5B, 0x85, 0x25, 0x7D, 0x7B, 0x59, 0x66, 0xA1, 0x44, 0x44, 0x62, 0x61, 
   0x5C, 0x75, 0x72, 0x96, 0xD7, 0x38, 0x74, 0xD2, 0x37, 0x67, 0x9C, 0x48, 0x5F, 0x61, 0x71, 0x52, 
   0x94, 0x5F, 0x73, 0xB6, 0x36, 0x67, 0x88, 0x35, 0x5B, 0x92, 0x4C, 0x4A, 0xA7, 0x63, 0x61, 0x72, 
   0x46, 0x78, 0x5B, 0x4C, 0x4B, 0x95, 0x4C, 0x67, 0xBF, 0x4C, 0x78, 0x92, 0x4C, 0x65, 0x86, 0x4C, 
   0x41, 0x8A, 0x51, 0x51, 0x90, 0x45, 0x51, 0x74, 0x34, 0x52, 0xA9, 0x45, 0x6F, 0xBA, 0x51, 0x70, 
   0x87, 0x57, 0x70, 0x86, 0x3A, 0x4D, 0x91, 0x56, 0x52, 0x91, 0x4A, 0x52, 0x86, 0x2D, 0x79, 0x87, 
   0x56, 0x5C, 0xAA, 0x5C, 0x39, 0xC0, 0x57, 0x3A, 0x3D, 0x40, 0x7A, 0x68, 0x3A, 0x76, 0xFF, 0x46, 
   0x64, 0xC0, 0x68, 0x58, 0x84, 0x67, 0x69, 0x8C, 0x43, 0x47, 0x7F, 0x15, 0x63, 0x7A, 0x39, 0x5E, 
   0x9E, 0x8B, 0x69, 0xB6, 0x75, 0x57, 0x99, 0x2A, 0x5D, 0x77, 0x56, 0x62, 0xA0, 0x2E, 0x5D, 0xB1, 
   0x3A, 0x57, 0x8E, 0x68, 0x84, 0x71, 0x73, 0x45, 0x8D, 0x34, 0x1D, 0x94, 0x28, 0x5E, 0xB6, 0x56, 
   0x93, 0xA3, 0x62, 0x82, 0x68, 0x45, 0x57, 0x89, 0x50, 0x39, 0x9B, 0x56, 0x2E, 0x85, 0x39, 0x7F, 
   0x96, 0x40, 0x7A, 0xAD, 0x79, 0x47, 0x7B, 0x50, 0x62, 0x81, 0x28, 0x51, 0xC1, 0x4B, 0x3B, 0xAA, 
   0x6E, 0x8B, 0x9C, 0x57, 0x84, 0x6C, 0x29, 0x33, 0x6B, 0x56, 0x49, 0x8E, 0x56, 0x72, 0xA0, 0x4F, 
   0x56, 0xA7, 0x2C, 0x40, 0x90, 0x3E, 0x53, 0x52, 0x56, 0x87, 0xB5, 0x57, 0x87, 0xC7, 0x4C, 0x4D, 
   0x93, 0x4C, 0x46, 0x63, 0x4C, 0x56, 0x7D, 0x4C, 0x68, 0x8E, 0x4C, 0x73, 0x8E, 0x4C, 0x50, 0x83, 
   0x57, 0x39, 0x94, 0x40, 0x5C, 0x9A, 0x4B, 0x7F, 0x93, 0x4B, 0x52, 0x76, 0x40, 0x57, 0x76, 0x51, 
   0x57, 0x9E, 0x57, 0x57, 0xAA, 0x40, 0x62, 0xC5, 0x4B, 0x51, 0x6C, 0x4B, 0x61, 0x4E, 0x40, 0x51, 
   0x6B, 0x57, 0x68, 0xB8, 0x4C, 0x6D, 0xB9, 0x4C, 0x4B, 0x8A, 0x41, 0x5D, 0x5B, 0x4D, 0x57, 0x77, 
   0x7A, 0x74, 0xDD, 0x56, 0x68, 0x9C, 0x1B, 0x4A, 0x3D, 0x20, 0x50, 0x31, 0x61, 0x51, 0x94, 0x68, 
   0x69, 0xAE, 0x41, 0x6A, 0x9E, 0x4C, 0x5F, 0x8B, 0x4C, 0x7A, 0x62, 0x41, 0x56, 0x5C, 0x4D, 0x17, 
   0x80, 0x85, 0x5C, 0xD7, 0x3F, 0x7F, 0x92, 0x0B, 0x52, 0x46, 0x45, 0x52, 0x73, 0x6F, 0x53, 0x86, 
   0x59, 0x65, 0x82, 0x4D, 0x71, 0xB0, 0x62, 0x6C, 0xAE, 0x3E, 0x70, 0x57, 0x20, 0x69, 0x3A, 0x33, 
   0x24, 0x97, 0x52, 0x31, 0xA0, 0x6C, 0x79, 0x9B, 0x7F, 0x98, 0x9B, 0x5C, 0x8C, 0x89, 0x32, 0x50, 
   0x75, 0x42, 0x26, 0x7A, 0x63, 0x69, 0x90, 0x56, 0x79, 0x9A, 0x27, 0x2F, 0x44, 0x21, 0x3B, 0x79, 
   0x6D, 0x8D, 0xB4, 0x52, 0x78, 0x93, 0x31, 0x35, 0x6B, 0x6B, 0x7A, 0x94, 0x82, 0xB2, 0xB0, 0x4D, 
   0x6A, 0xB3, 0x3E, 0x16, 0x59, 0x2A, 0x41, 0x46, 0x3B, 0x58, 0x8B, 0x2B, 0x54, 0x8D, 0x4B, 0x68, 
   0x7D, 0x86, 0x80, 0x89, 0x6F, 0x6E, 0x9B, 0x4F, 0x5B, 0xB0, 0x34, 0x4D, 0x79, 0x1A, 0x3A, 0x65, 
   0x1A, 0x45, 0x52, 0x39, 0x73, 0x65, 0x75, 0x63, 0x8A, 0x6B, 0x30, 0xA3, 0x42, 0x53, 0x6C, 0x20, 
   0x7C, 0x94, 0x60, 0x70, 0xAA, 0x82, 0x41, 0x6B, 0x5D, 0x35, 0x6F, 0x04, 0x73, 0x8B, 0x1A, 0x57, 
   0x84, 0x50, 0x40, 0x51, 0x53, 0x36, 0x63, 0x60, 0x7C, 0x9E, 0x5A, 0x82, 0xB0, 0x59, 0x4E, 0x76, 
   0x2A, 0x41, 0x4D, 0x35, 0x46, 0x76, 0x69, 0x74, 0xBB, 0x73, 0x6F, 0x92, 0x16, 0x41, 0x57, 0x04, 
   0x5C, 0x78, 0x5C, 0x3A, 0x73, 0x6A, 0x3C, 0x69, 0x5F, 0x8D, 0xA3, 0x41, 0x81, 0x92, 0x3A, 0x36, 
   0x81, 0x39, 0x40, 0x75, 0x44, 0x5C, 0x7A, 0x39, 0x4C, 0x80, 0x45, 0x63, 0x90, 0x46, 0x52, 0x74, 
   0x31, 0x52, 0x7F, 0x7B, 0x52, 0x68, 0x43, 0x7C, 0xAE, 0x3E, 0x8C, 0xC4, 0x44, 0x58, 0x89, 0x6D, 
   0x5B, 0x8C, 0x5B, 0x5F, 0x7F, 0x49, 0x47, 0x96, 0x20, 0x3C, 0x91, 0x4E, 0x86, 0xD0, 0x76, 0x85, 
   0xA1, 0x31, 0x1E, 0x66, 0x20, 0x31, 0x93, 0x61, 0x9A, 0x78, 0x79, 0x7F, 0x82, 0x35, 0x58, 0xE0, 
   0x45, 0x5D, 0xC4, 0x4B, 0x85, 0x73, 0x5B, 0x78, 0xCB, 0x49, 0x4D, 0x8F, 0x31, 0x4B, 0x2D, 0x26, 
   0x3F, 0x73, 0x55, 0x6D, 0xE1, 0x83, 0x78, 0xC6, 0x33, 0x23, 0x64, 0x33, 0x35, 0x90, 0x50, 0x98, 
   0xA1, 0x6E, 0x60, 0x74, 0x57, 0x3E, 0xAE, 0x3F, 0x87, 0xAF, 0x38, 0x75, 0x91, 0x33, 0x29, 0x9A, 
   0x6C, 0x4B, 0x88, 0x60, 0xA1, 0x77, 0x10, 0x4B, 0x96, 0x38, 0x1E, 0xA4, 0x6D, 0x65, 0xA0, 0x6D, 
   0xAB, 0xD4, 0x33, 0x77, 0xAA, 0x21, 0x09, 0x54, 0x3F, 0x43, 0x71, 0x68, 0xA1, 0xCA, 0x68, 0xB3, 
   0xD7, 0x34, 0x4F, 0xB3, 0x3E, 0x1F, 0x8E, 0x3E, 0x4D, 0x7B, 0x39, 0x78, 0x87, 0x63, 0x59, 0xA0, 
   0x59, 0x77, 0x9D, 0x48, 0x73, 0x9F, 0x69, 0x78, 0xC7, 0x35, 0x6C, 0xAB, 0x29, 0x55, 0x7D, 0x67, 
   0x77, 0xC0, 0x3A, 0x71, 0x9D, 0x4B, 0x4E, 0x53, 0x50, 0x4E, 0xAF, 0x4B, 0x76, 0xD2, 0x40, 0x55, 
   0x7D, 0x19, 0x73, 0x67, 0x5F, 0x74, 0xA8, 0x67, 0x69, 0xF5, 0x61, 0x6E, 0xC7, 0x5A, 0x6E, 0x8B, 
   0x30, 0x6E, 0x89, 0x4C, 0x74, 0x9F, 0x5C, 0x73, 0x9F, 0x2A, 0x4A, 0x99, 0x38, 0x5C, 0xAF, 0x84, 
   0x79, 0xA9, 0x8A, 0x6E, 0x86, 0x27, 0x6E, 0x9C, 0x05, 0x6E, 0x91, 0x79, 0x69, 0x87, 0x8D, 0x69, 
   0xB0, 0x49, 0x69, 0xD3, 0x48, 0x69, 0x89, 0x58, 0x74, 0x82, 0x53, 0x6D, 0xC6, 0x69, 0x61, 0x88, 
   0x4B, 0x55, 0x98, 0x50, 0x66, 0xF7, 0x4F, 0x6B, 0x8D, 0x2C, 0x49, 0x2F, 0x4E, 0x61, 0x7F, 0x44, 
   0x90, 0xC6, 0x77, 0x85, 0xBC, 0x71, 0x6D, 0xBA, 0x20, 0x4F, 0x7E, 0x36, 0x5E, 0x6A, 0x4E, 0x5D, 
   0x81, 0x6B, 0x63, 0x99, 0x5F, 0x63, 0xB0, 0x42, 0x63, 0x88, 0x41, 0x51, 0x92, 0x4C, 0x67, 0xAC, 
   0x51, 0x5B, 0x66, 0x4C, 0x4A, 0x55, 0x4C, 0x5B, 0x95, 0x4C, 0x89, 0xCB, 0x4C, 0x8E, 0xC0, 0x4C, 
   0x4C, 0x6F, 0x4C, 0x1D, 0x63, 0x57, 0x68, 0xA8, 0x45, 0x8B, 0xAE, 0x45, 0x47, 0x70, 0x57, 0x36, 
   0x9D, 0x41, 0x70, 0x97, 0x58, 0x8D, 0x9D, 0x57, 0x4D, 0x86, 0x44, 0x52, 0x7B, 0x38, 0x62, 0xA9, 
   0x44, 0x5C, 0xB4, 0x56, 0x50, 0x59, 0x4B, 0x5C, 0x50, 0x35, 0x4C, 0xE2, 0x58, 0x81, 0xFF, 0x74, 
   0x6B, 0x80, 0x4C, 0x5F, 0x48, 0x3F, 0x53, 0x74, 0x1C, 0x5E, 0x9D, 0x4A, 0x3D, 0xB4, 0x62, 0x87, 
   0x86, 0x51, 0x91, 0x52, 0x5C, 0x33, 0x97, 0x3F, 0x21, 0xAA, 0x17, 0x45, 0x89, 0x63, 0x91, 0x9A, 
   0x75, 0x97, 0xB7, 0x58, 0x34, 0x8E, 0x2E, 0x22, 0x88, 0x44, 0x73, 0x9E, 0x3F, 0x6F, 0x87, 0x50, 
   0x81, 0x97, 0x45, 0x48, 0x91, 0x45, 0x53, 0x85, 0x45, 0x80, 0x85, 0x50, 0x62, 0x9C, 0x44, 0x29, 
   0x9C, 0x3F, 0x5E, 0x69, 0x40, 0x9D, 0x8C, 0x79, 0x80, 0xB5, 0x4B, 0x1D, 0x8D, 0x22, 0x4A, 0xA2, 
   0x3F, 0x84, 0x84, 0x62, 0x74, 0x6C, 0x5C, 0x56, 0x78, 0x34, 0x49, 0xB2, 0x4A, 0x4F, 0x90, 0x5A, 
   0x50, 0x7E, 0x2C, 0x68, 0x8F, 0x3E, 0x63, 0x8F, 0x50, 0x54, 0x52, 0x51, 0x71, 0xB6, 0x46, 0x77, 
   0xDF, 0x4C, 0x59, 0xB0, 0x51, 0x6E, 0x90, 0x51, 0x67, 0x59, 0x4C, 0x2D, 0x5F, 0x4C, 0x44, 0xA5, 
   0x4C, 0x73, 0xB2, 0x57, 0x7F, 0xA6, 0x40, 0x46, 0x82, 0x4B, 0x4B, 0x6A, 0x45, 0x57, 0x81, 0x5C, 
   0x69, 0xA4, 0x45, 0x6E, 0x9E, 0x4B, 0x57, 0x70, 0x4B, 0x57, 0xA2, 0x40, 0x57, 0x95, 0x57, 0x73, 
   0x6B, 0x4C, 0x50, 0x71, 0x4C, 0x33, 0x89, 0x41, 0x62, 0x8B, 0x4D, 0x86, 0xB3, 0x7A, 0x6F, 0xAC, 
   0x56, 0x68, 0x7B, 0x1B, 0x44, 0x5B, 0x20, 0x38, 0x55, 0x4A, 0x50, 0x9A, 0x6E, 0x79, 0x85, 0x5D, 
   0x6A, 0x86, 0x46, 0x4E, 0x9D, 0x4C, 0x86, 0x8B, 0x4C, 0x6D, 0x73, 0x4C, 0x27, 0x79, 0x51, 0x39, 
   0x7F, 0x2F, 0x8B, 0x87, 0x51, 0x7B, 0xA4, 0x73, 0x6A, 0xAA, 0x35, 0x3C, 0x75, 0x2A, 0x53, 0x6F, 
   0x6F, 0x7B, 0x80, 0x8A, 0x54, 0x9D, 0x0B, 0x4E, 0x70, 0x16, 0x55, 0x88, 0x5C, 0x78, 0xA5, 0x69, 
   0x6C, 0x89, 0x31, 0x2C, 0x7D, 0x5A, 0x3E, 0x7D, 0x6B, 0x8F, 0xA4, 0x54, 0x73, 0x97, 0x48, 0x62, 
   0x41, 0x42, 0x61, 0x6F, 0x58, 0x6B, 0xD6, 0x57, 0x63, 0xA7, 0x44, 0x3A, 0x43, 0x2C, 0x45, 0x32, 
   0x3E, 0x69, 0x90, 0x50, 0x5A, 0xC1, 0x3B, 0x6D, 0x78, 0x38, 0x52, 0x73, 0x8E, 0x92, 0xCD, 0x97, 
   0xC8, 0xAD, 0x2C, 0x50, 0x64, 0x00, 0x00, 0x19, 0x1F, 0x2B, 0x65, 0x6D, 0xD3, 0xEB, 0x86, 0x7F, 
   0xB2, 0x5D, 0x1C, 0x49, 0x4F, 0x54, 0x6E, 0x3C, 0x93, 0x84, 0x2F, 0x4E, 0x73, 0x45, 0x36, 0x73, 
   0x3A, 0x5D, 0x8F, 0x24, 0x64, 0x89, 0x5E, 0x64, 0x5B, 0x64, 0x58, 0x51, 0x48, 0x30, 0x98, 0x36, 
   0x65, 0xA6, 0x26, 0x88, 0x79, 0x76, 0x65, 0x8F, 0x6F, 0x46, 0x93, 0x2E, 0x4B, 0x86, 0x0A, 0x4B, 
   0x74, 0x39, 0x36, 0x57, 0x75, 0x7C, 0x81, 0x5A, 0x82, 0xBB, 0x54, 0x65, 0x92, 0x3C, 0x3B, 0x4D, 
   0x2A, 0x41, 0x70, 0x4C, 0x69, 0xB5, 0x5D, 0x6F, 0x8D, 0x2F, 0x41, 0x58, 0x3F, 0x41, 0x6E, 0x4A, 
   0x6F, 0xAD, 0x2E, 0x6F, 0x74, 0x3F, 0x4D, 0x68, 0x30, 0x31, 0x69, 0x64, 0x76, 0xA3, 0x64, 0x93, 
   0x92, 0x57, 0x47, 0x86, 0x23, 0x45, 0x75, 0x33, 0x4B, 0x80, 0x45, 0x4C, 0x80, 0x40, 0x6F, 0x8B, 
   0x5E, 0x5E, 0x7F, 0x42, 0x53, 0x68, 0x57, 0x5F, 0xC3, 0x62, 0x5F, 0xE4, 0x2E, 0x86, 0xAC, 0x39, 
   0x6D, 0x4D, 0x66, 0x37, 0x84, 0x3F, 0x4D, 0xA7, 0x4A, 0x6A, 0xA7, 0x6B, 0x7A, 0x8F, 0x36, 0x30, 
   0x82, 0x14, 0x31, 0x5B, 0x55, 0x88, 0x90, 0x7E, 0xA0, 0xD6, 0x45, 0x61, 0xBA, 0x4A, 0x27, 0x42, 
   0x33, 0x5A, 0x7C, 0x4F, 0x89, 0xEF, 0x61, 0x89, 0xCC, 0x55, 0x65, 0x5D, 0x27, 0x4C, 0x3A, 0x3E, 
   0x24, 0xBF, 0x50, 0x63, 0xD3, 0x62, 0xA3, 0x9F, 0x4F, 0x63, 0x91, 0x32, 0x1E, 0x94, 0x21, 0x53, 
   0x5F, 0x67, 0x83, 0x3B, 0x68, 0x79, 0xDF, 0x4B, 0x8E, 0xFF, 0x33, 0x57, 0x62, 0x3E, 0x27, 0x0E, 
   0x4F, 0x49, 0xA2, 0x66, 0x68, 0xBB, 0x4A, 0x6F, 0x62, 0x22, 0x38, 0x55, 0x56, 0x5C, 0xDB, 0x67, 
   0xB7, 0xF3, 0x5B, 0x66, 0x8A, 0x33, 0x2B, 0x76, 0x2D, 0x41, 0x6F, 0x62, 0x6B, 0x88, 0x6E, 0x83, 
   0xC3, 0x56, 0x7C, 0xCE, 0x1C, 0x2C, 0x7C, 0x28, 0x28, 0x3D, 0x6E, 0x86, 0x94, 0x64, 0x9F, 0xE7, 
   0x47, 0x44, 0xC6, 0x5D, 0x5A, 0x92, 0x41, 0x60, 0x69, 0x51, 0x61, 0xB9, 0x50, 0x83, 0xCB, 0x0C, 
   0x72, 0x6A, 0x5D, 0x3E, 0x82, 0x8C, 0x6C, 0xE5, 0x5E, 0xA5, 0xB2, 0x1E, 0x5B, 0xA0, 0x3F, 0x3D, 
   0x93, 0x3A, 0x60, 0x7C, 0x38, 0x6D, 0x89, 0x7F, 0x74, 0xA3, 0x8B, 0x69, 0xE3, 0x4A, 0x69, 0xBB, 
   0x42, 0x74, 0x80, 0x35, 0x73, 0x9A, 0x50, 0x45, 0xB0, 0x3F, 0x67, 0xBA, 0x13, 0x73, 0x8A, 0x5A, 
   0x62, 0x72, 0x8A, 0x5D, 0x8A, 0x47, 0x6E, 0xB5, 0x36, 0x63, 0xC7, 0x6A, 0x69, 0xB0, 0x5F, 0x69, 
   0x7D, 0x48, 0x69, 0x89, 0x4D, 0x74, 0xD3, 0x58, 0x62, 0xB7, 0x69, 0x5C, 0x9F, 0x35, 0x67, 0x9D, 
   0x3B, 0x77, 0x90, 0x6E, 0x60, 0xA6, 0x79, 0x44, 0xAA, 0x39, 0x50, 0x6B, 0x2C, 0x8A, 0x92, 0x64, 
   0x7F, 0xC6, 0x31, 0x51, 0xAE, 0x5F, 0x72, 0x6D, 0x70, 0x5F, 0x8D, 0x2B, 0x64, 0x92, 0x2B, 0x5D, 
   0x8C, 0x5F, 0x58, 0x8D, 0x5B, 0x5E, 0xAB, 0x6B, 0x7C, 0xB0, 0x42, 0x8C, 0x8D, 0x2F, 0x63, 0x97, 
   0x40, 0x50, 0xB7, 0x57, 0x6C, 0x6C, 0x4C, 0x4F, 0x55, 0x4C, 0x5A, 0x9B, 0x4C, 0x70, 0xB9, 0x4C, 
   0x4D, 0x9E, 0x4C, 0x52, 0x8C, 0x4C, 0x5D, 0x9D, 0x5C, 0x5D, 0x80, 0x45, 0x57, 0x8B, 0x2F, 0x5E, 
   0x86, 0x4D, 0x59, 0x9D, 0x86, 0x65, 0x92, 0x46, 0x7B, 0x87, 0x39, 0x63, 0xA9, 0x4F, 0x4B, 0xAD, 
   0x55, 0x5C, 0x58, 0x38, 0x56, 0x4F, 0x2E, 0x68, 0xDB, 0x5D, 0x4B, 0xE8, 0x74, 0x47, 0x75, 0x46, 
   0x7B, 0x99, 0x45, 0x6B, 0x8C, 0x29, 0x54, 0x70, 0x40, 0x49, 0xA3, 0x6E, 0x77, 0xA3, 0x6D, 0x77, 
   0x8B, 0x21, 0x63, 0x73, 0x2C, 0x49, 0x7F, 0x55, 0x21, 0xAE, 0x35, 0x50, 0xAA, 0x59, 0x96, 0x72, 
   0x92, 0x69, 0x9A, 0x41, 0x4B, 0xB7, 0x17, 0x34, 0xAA, 0x56, 0x7F, 0x8B, 0x62, 0x7F, 0x7A, 0x40, 
   0x24, 0x80, 0x40, 0x4C, 0xAE, 0x57, 0x76, 0x92, 0x5C, 0x82, 0x86, 0x4B, 0x6A, 0x9C, 0x3F, 0x30, 
   0x6F, 0x44, 0x52, 0x92, 0x39, 0x85, 0xB5, 0x3A, 0x5E, 0x93, 0x73, 0x62, 0xA2, 0x56, 0x55, 0x79, 
   0x11, 0x22, 0x72, 0x3F, 0x5C, 0x90, 0x7E, 0xAC, 0xAD, 0x4B, 0x50, 0xA8, 0x33, 0x27, 0x85, 0x3E, 
   0x55, 0x89, 0x55, 0x6D, 0x7D, 0x44, 0x52, 0x94, 0x4B, 0x53, 0x79, 0x51, 0x60, 0x6A, 0x63, 0x72, 
   0xB7, 0x46, 0x88, 0xF0, 0x3A, 0x58, 0x8C, 0x40, 0x33, 0x55, 0x57, 0x38, 0x7B, 0x4C, 0x50, 0x8E, 
   0x4C, 0x84, 0xAB, 0x51, 0x5D, 0x9A, 0x5C, 0x4B, 0x7C, 0x40, 0x5D, 0x87, 0x4B, 0x6E, 0x92, 0x50, 
   0x69, 0x86, 0x39, 0x52, 0x86, 0x50, 0x47, 0x8D, 0x40, 0x6F, 0x99, 0x57, 0x80, 0xBF, 0x4C, 0x56, 
   0x89, 0x4C, 0x44, 0x42, 0x41, 0x39, 0x48, 0x4D, 0x5D, 0xB2, 0x7A, 0x86, 0xF8, 0x56, 0x80, 0xB7, 
   0x1B, 0x45, 0x1F, 0x20, 0x32, 0x4B, 0x61, 0x4F, 0xB8, 0x6E, 0x67, 0xB4, 0x4C, 0x52, 0x91, 0x35, 
   0x5F, 0x73, 0x57, 0x98, 0x73, 0x4C, 0x6E, 0x96, 0x4C, 0x17, 0x8B, 0x57, 0x3E, 0x9C, 0x40, 0x73, 
   0x6E, 0x35, 0x5E, 0x52, 0x5D, 0x5F, 0x8D, 0x69, 0x6B, 0xD9, 0x58, 0x6B, 0x8E, 0x3A, 0x64, 0x70, 
   0x5B, 0x53, 0x95, 0x44, 0x58, 0x45, 0x1D, 0x54, 0x53, 0x3B, 0x50, 0xC4, 0x6B, 0x7B, 0xE8, 0x72, 
   0x9E, 0x80, 0x5A, 0x85, 0x66, 0x41, 0x3D, 0x8B, 0x23, 0x19, 0x8A, 0x46, 0x48, 0x68, 0x75, 0x89, 
   0x96, 0x59, 0xAC, 0x9D, 0x30, 0x56, 0x86, 0x46, 0x3D, 0x7F, 0x79, 0x79, 0xAB, 0x4A, 0x45, 0x5A, 
   0x10, 0x1D, 0x34, 0x33, 0x75, 0x98, 0x6E, 0x72, 0xD4, 0x59, 0x68, 0xA6, 0x5E, 0x6E, 0x70, 0x5C, 
   0x7D, 0x72, 0x38, 0x6A, 0x66, 0x21, 0x51, 0x89, 0x34, 0x2E, 0x8A, 0x7F, 0x6C, 0x85, 0x85, 0x82, 
   0xB1, 0x38, 0x42, 0x9C, 0x19, 0x2A, 0x49, 0x2F, 0x47, 0x43, 0x4C, 0x7C, 0x7E, 0x49, 0x71, 0x9D, 
   0x77, 0x43, 0xC0, 0x64, 0x59, 0x80, 0x19, 0x5E, 0x50, 0x24, 0x64, 0x55, 0x5E, 0x52, 0x85, 0x6A, 
   0x42, 0x9F, 0x47, 0x5A, 0x85, 0x13, 0x93, 0xA1, 0x5E, 0x64, 0x8F, 0x7A, 0x18, 0x65, 0x2F, 0x2A, 
   0x5F, 0x0C, 0x87, 0x92, 0x40, 0x88, 0xAF, 0x7A, 0x4E, 0x6F, 0x3C, 0x3B, 0x47, 0x1F, 0x41, 0x76, 
   0x75, 0x64, 0xC7, 0x63, 0x86, 0x9E, 0x0D, 0x3B, 0x48, 0x24, 0x41, 0x75, 0x75, 0x6F, 0x97, 0x80, 
   0x59, 0x75, 0x28, 0x59, 0x9C, 0x0B, 0x64, 0x74, 0x3A, 0x4D, 0x62, 0x6F, 0x31, 0x6E, 0x70, 0x8D, 
   0x91, 0x3D, 0x81, 0x81, 0x4C, 0x1F, 0x8C, 0x46, 0x45, 0x75, 0x2F, 0x57, 0x80, 0x46, 0x52, 0x8B, 
   0x4C, 0x4E, 0x6E, 0x47, 0x7C, 0x96, 0x47, 0x6A, 0xB0, 0x47, 0x70, 0xC6, 0x6E, 0x6F, 0x8B, 0x44, 
   0x62, 0x99, 0x0B, 0x3F, 0x75, 0x6D, 0x77, 0xAD, 0x8F, 0x8C, 0xB7, 0x2C, 0x2A, 0x66, 0x00, 0x26, 
   0x5B, 0x54, 0x9A, 0xAD, 0x72, 0x84, 0xBB, 0x4B, 0x38, 0xC0, 0x38, 0x53, 0x9C, 0x49, 0x69, 0x68, 
   0x54, 0x41, 0x79, 0x37, 0x4D, 0xBE, 0x43, 0x6B, 0x9D, 0x3F, 0x71, 0x77, 0x62, 0x55, 0xC7, 0x57, 
   0x76, 0xB6, 0x57, 0x42, 0x78, 0x45, 0x4E, 0xB0, 0x44, 0x92, 0xDB, 0x49, 0x6F, 0x66, 0x32, 0x09, 
   0x27, 0x33, 0x6C, 0xD5, 0x6D, 0xD3, 0xEA, 0x5C, 0x49, 0xB0, 0x50, 0x2F, 0x9A, 0x55, 0x6B, 0x59, 
   0x27, 0x32, 0x5E, 0x2D, 0x1D, 0x9F, 0x79, 0x6C, 0x8C, 0x73, 0xBF, 0xBD, 0x1D, 0x96, 0xB4, 0x33, 
   0x00, 0xA9, 0x56, 0x55, 0xA8, 0x67, 0xBB, 0xAB, 0x3F, 0x3C, 0x76, 0x2D, 0x23, 0x80, 0x4F, 0x3A, 
   0x91, 0x5B, 0x4E, 0xA4, 0x45, 0xA1, 0x94, 0x4C, 0x65, 0x9B, 0x58, 0x49, 0x91, 0x58, 0x9F, 0xA9, 
   0x57, 0x7C, 0xC5, 0x23, 0x2C, 0x91, 0x40, 0x54, 0x72, 0x73, 0x94, 0x78, 0x4C, 0x67, 0xA7, 0x2F, 
   0x4A, 0x81, 0x4D, 0x5C, 0xA1, 0x5F, 0x8A, 0xE7, 0x76, 0x68, 0xBE, 0x4D, 0x72, 0x73, 0x18, 0x54, 
   0x9F, 0x41, 0x4F, 0xB5, 0x54, 0x6C, 0x7C, 0x56, 0x62, 0x72, 0x68, 0x6E, 0xA8, 0x61, 0x74, 0xD8, 
   0x5A, 0x73, 0xD2, 0x41, 0x3F, 0x8B, 0x29, 0x67, 0x9F, 0x3F, 0x73, 0xB3, 0x61, 0x68, 0x66, 0x13, 
   0x68, 0x5A, 0x17, 0x62, 0x90, 0x99, 0x69, 0xBB, 0xC8, 0x7A, 0xBD, 0x21, 0x5E, 0xA6, 0x25, 0x69, 
   0x89, 0x69, 0x74, 0x77, 0x75, 0x5D, 0xB0, 0x47, 0x68, 0xCD, 0x35, 0x56, 0x8D, 0x4C, 0x6C, 0xA7, 
   0x5E, 0x50, 0x82, 0x4D, 0x61, 0x49, 0x6A, 0x68, 0xA0, 0x79, 0x7F, 0xFF, 0x4F, 0x6D, 0x9B, 0x19, 
   0x4A, 0x7A, 0x35, 0x66, 0x77, 0x47, 0x76, 0x93, 0x5F, 0x6A, 0x98, 0x65, 0x59, 0x87, 0x31, 0x4D, 
   0x92, 0x26, 0x64, 0x87, 0x6B, 0x5F, 0x8D, 0x77, 0x88, 0x9F, 0x5A, 0x76, 0xAA, 0x4D, 0x4D, 0x87, 
   0x3A, 0x5C, 0x86, 0x40, 0x56, 0xB7, 0x57, 0x7C, 0x77, 0x4C, 0x4D, 0x49, 0x4C, 0x2B, 0x62, 0x4C, 
   0x87, 0xDC, 0x4C, 0x8D, 0xC6, 0x57, 0x47, 0x6A, 0x40, 0x29, 0x8B, 0x35, 0x5D, 0xA8, 0x58, 0x7A, 
   0x8B, 0x6F, 0x5F, 0x80, 0x36, 0x59, 0x87, 0x51, 0x6A, 0xB5, 0x50, 0x69, 0xBF, 0x4F, 0x40, 0x46, 
   0x49, 0x4B, 0x53, 0x16, 0x5D, 0xDF, 0x62, 0x74, 0xEC, 0x7F, 0x4B, 0x78, 0x3A, 0x46, 0x70, 0x34, 
   0x58, 0x70, 0x3A, 0x70, 0xAA, 0x69, 0x66, 0xB6, 0x70, 0x72, 0x88, 0x5D, 0x7D, 0x8C, 0x33, 0x76, 
   0xA2, 0x31, 0x40, 0xA1, 0x2B, 0x3F, 0x73, 0x22, 0x7E, 0x68, 0x9C, 0x72, 0x9D, 0x64, 0x22, 0xAA, 
   0x1F, 0x45, 0x83, 0x5C, 0x85, 0xB6, 0x5C, 0x97, 0x92, 0x35, 0x40, 0x4C, 0x51, 0x33, 0x90, 0x51, 
   0x45, 0xA2, 0x57, 0x63, 0x93, 0x57, 0x76, 0xAA, 0x45, 0x60, 0xA9, 0x50, 0x55, 0x5E, 0x50, 0x98, 
   0x92, 0x50, 0x57, 0xB5, 0x50, 0x00, 0x93, 0x45, 0x68, 0x9D, 0x51, 0xAD, 0x90, 0x57, 0x51, 0x6D, 
   0x5B, 0x2D, 0x73, 0x2D, 0x5A, 0xBF, 0x44, 0x5B, 0xAE, 0x78, 0x5C, 0x86, 0x39, 0x6D, 0x9C, 0x28, 
   0x51, 0x9B, 0x61, 0x56, 0x72, 0x50, 0x62, 0x7E, 0x4B, 0x5E, 0xA7, 0x40, 0x49, 0x91, 0x51, 0x83, 
   0x7B, 0x68, 0x88, 0x98, 0x4C, 0x64, 0xD1, 0x40, 0x3B, 0x86, 0x40, 0x51, 0x78, 0x57, 0x73, 0x82, 
   0x51, 0x51, 0x87, 0x40, 0x56, 0x82, 0x40, 0x62, 0x88, 0x62, 0x6E, 0xBC, 0x50, 0x57, 0xA4, 0x3F, 
   0x5D, 0x63, 0x3F, 0x4C, 0x5E, 0x4B, 0x6A, 0xA9, 0x5C, 0x81, 0xAA, 0x4C, 0x69, 0xA4, 0x4C, 0x3A, 
   0x90, 0x41, 0x3F, 0x60, 0x4D, 0x6D, 0x5A, 0x7A, 0x5D, 0xAA, 0x56, 0x68, 0xA4, 0x1B, 0x5C, 0x76, 
   0x26, 0x4A, 0x87, 0x4A, 0x67, 0x76, 0x6E, 0x56, 0x98, 0x5D, 0x46, 0x92, 0x35, 0x52, 0x7F, 0x4B, 
   0x85, 0x72, 0x40, 0x74, 0x5B, 0x57, 0x34, 0x8A, 0x57, 0x3A, 0xA8, 0x40, 0x79, 0x86, 0x35, 0x69, 
   0x74, 0x68, 0x47, 0x91, 0x41, 0x53, 0x70, 0x36, 0x60, 0x77, 0x74, 0x93, 0xC2, 0x72, 0x59, 0xBA, 
   0x00, 0x47, 0x4C, 0x05, 0x41, 0x35, 0x74, 0x5A, 0x93, 0x83, 0x68, 0xB3, 0x5D, 0x76, 0x99, 0x56, 
   0x89, 0xC5, 0x81, 0xAE, 0x94, 0x1E, 0x60, 0x5C, 0x05, 0x00, 0x38, 0x33, 0x3A, 0x78, 0x68, 0x7B, 
   0xB3, 0x59, 0x67, 0xA8, 0x5E, 0x7E, 0x46, 0x36, 0x66, 0x6E, 0x4C, 0x5F, 0xAD, 0x5C, 0x57, 0x91, 
   0x39, 0x34, 0x5D, 0x1D, 0x2A, 0x48, 0x45, 0x7C, 0xC7, 0x89, 0x9F, 0xE3, 0x38, 0x54, 0x51, 0x00, 
   0x04, 0x1D, 0x40, 0x61, 0x8B, 0x98, 0xE5, 0xEF, 0x7C, 0x87, 0xAF, 0x35, 0x00, 0x4B, 0x32, 0x46, 
   0x75, 0x5D, 0x95, 0xA5, 0x1D, 0x3A, 0x5F, 0x29, 0x2A, 0x43, 0x37, 0x6A, 0x73, 0x7E, 0x89, 0xB4, 
   0x6E, 0x72, 0xA5, 0x55, 0x43, 0x82, 0x30, 0x42, 0x80, 0x18, 0x64, 0x78, 0x40, 0x69, 0x51, 0x63, 
   0x4D, 0x7B, 0x52, 0x47, 0xC2, 0x18, 0x53, 0x9C, 0x19, 0x65, 0x73, 0x76, 0x5A, 0x89, 0x82, 0x54, 
   0x89, 0x3C, 0x76, 0xA5, 0x23, 0x59, 0x86, 0x2E, 0x41, 0x4C, 0x46, 0x41, 0x53, 0x63, 0x69, 0xC0, 
   0x58, 0x86, 0x9E, 0x47, 0x3B, 0x3D, 0x2A, 0x46, 0x81, 0x53, 0x6F, 0xAF, 0x5F, 0x59, 0x81, 0x53, 
   0x59, 0x5E, 0x46, 0x59, 0x91, 0x23, 0x59, 0x91, 0x4A, 0x64, 0x8B, 0x34, 0x52, 0x5D, 0x41, 0x37, 
   0x6E, 0x76, 0x7C, 0x97, 0x4E, 0x81, 0x81, 0x48, 0x42, 0x8C, 0x4C, 0x46, 0x80, 0x40, 0x4D, 0x69, 
   0x46, 0x6A, 0x8B, 0x4B, 0x76, 0x7A, 0x5F, 0x6F, 0x85, 0x6A, 0x7A, 0x74, 0x58, 0x46, 0xBF, 0x29, 
   0x3B, 0xB8, 0x3F, 0xA1, 0x9E, 0x61, 0x83, 0x8A, 0x4F, 0x14, 0x6B, 0x33, 0x26, 0x82, 0x4A, 0x8F, 
   0x96, 0x56, 0x9C, 0xC0, 0x56, 0x6D, 0xD7, 0x4F, 0x42, 0x6F, 0x37, 0x35, 0x62, 0x48, 0x68, 0xD9, 
   0x4D, 0x73, 0xC1, 0x31, 0x3A, 0x1B, 0x2C, 0x35, 0x57, 0x50, 0x77, 0xFF, 0x7A, 0x90, 0xD6, 0x52, 
   0x73, 0x73, 0x4C, 0x4F, 0x93, 0x45, 0x54, 0xA8, 0x50, 0x49, 0x84, 0x3F, 0x71, 0x51, 0x60, 0x77, 
   0xA7, 0x32, 0x59, 0xCA, 0x27, 0x3C, 0xA1, 0x61, 0x74, 0x4A, 0x6D, 0x62, 0x9A, 0x3F, 0x51, 0xF0, 
   0x3E, 0x56, 0x67, 0x2D, 0x25, 0x2F, 0x57, 0x6D, 0xD1, 0x8A, 0xBF, 0xF0, 0x50, 0x7A, 0x85, 0x11, 
   0x22, 0x63, 0x3F, 0x55, 0xC4, 0x79, 0x8E, 0xBF, 0x67, 0x8C, 0xBC, 0x43, 0x33, 0x7F, 0x04, 0x00, 
   0x3E, 0x2D, 0x4D, 0x52, 0x7A, 0x9E, 0xCE, 0x75, 0xC3, 0xE3, 0x30, 0x72, 0xB5, 0x4B, 0x37, 0x7A, 
   0x3F, 0x64, 0x8A, 0x5B, 0x81, 0xC9, 0x56, 0x6B, 0xAB, 0x23, 0x4F, 0x4F, 0x58, 0x55, 0x5C, 0x7B, 
   0x6D, 0xC6, 0x3C, 0x96, 0xEB, 0x20, 0x5D, 0x7A, 0x65, 0x56, 0x96, 0x71, 0x61, 0xC3, 0x3D, 0x72, 
   0x95, 0x3D, 0x60, 0x9F, 0x76, 0x50, 0x9E, 0x4F, 0x73, 0x7C, 0x2D, 0x7F, 0x73, 0x60, 0x73, 0xCB, 
   0x60, 0x3F, 0xE3, 0x43, 0x78, 0xB9, 0x52, 0x6D, 0x98, 0x45, 0x68, 0x6E, 0x44, 0x62, 0x94, 0x1E, 
   0x62, 0x9B, 0x27, 0x62, 0x8B, 0x98, 0x6E, 0xAA, 0x84, 0x75, 0xA6, 0x6C, 0x75, 0xA2, 0x31, 0x69, 
   0xC4, 0x24, 0x62, 0xBC, 0x68, 0x62, 0x5A, 0x52, 0x74, 0x87, 0x3C, 0x84, 0xD6, 0x6A, 0x56, 0x95, 
   0x6A, 0x56, 0x60, 0x53, 0x6E, 0x87, 0x53, 0x97, 0x95, 0x69, 0x85, 0xD6, 0x61, 0x56, 0xFB, 0x31, 
   0x66, 0x6E, 0x2A, 0x6A, 0x48, 0x41, 0x42, 0x9D, 0x4E, 0x5E, 0x9E, 0x66, 0x87, 0x9E, 0x77, 0x5A, 
   0x87, 0x4F, 0x5A, 0x8C, 0x2C, 0x7C, 0x92, 0x48, 0x5A, 0x8C, 0x5F, 0x5F, 0x9E, 0x6A, 0x70, 0x9E, 
   0x3B, 0x69, 0x87, 0x40, 0x62, 0xA2, 0x45, 0x65, 0xA0, 0x57, 0x36, 0x6C, 0x4C, 0x53, 0x66, 0x4C, 
   0x87, 0xA1, 0x51, 0x7C, 0xA9, 0x40, 0x59, 0xAE, 0x35, 0x5E, 0x80, 0x58, 0x52, 0x8B, 0x6F, 0x47, 
   0x8B, 0x41, 0x6F, 0x92, 0x35, 0x75, 0x9E, 0x57, 0x47, 0xB9, 0x50, 0x4C, 0x58, 0x38, 0x80, 0x53, 
   0x1C, 0x58, 0xBC, 0x61, 0x63, 0xDA, 0x62, 0x63, 0x99, 0x50, 0x4C, 0x5D, 0x2D, 0x57, 0x73, 0x39, 
   0x52, 0x86, 0x41, 0x42, 0x99, 0x65, 0x83, 0xC2, 0x87, 0x89, 0x9F, 0x4C, 0x60, 0x70, 0x21, 0x47, 
   0x91, 0x37, 0x40, 0x8B, 0x3E, 0x69, 0xA1, 0x5B, 0x96, 0x7E, 0x51, 0x50, 0x68, 0x5C, 0x21, 0xA9, 
   0x2E, 0x3E, 0xCC, 0x23, 0x6E, 0x7C, 0x68, 0x8C, 0x80, 0x58, 0x57, 0x9C, 0x3B, 0x18, 0x74, 0x51, 
   0x68, 0x86, 0x40, 0x80, 0x9E, 0x4B, 0x4D, 0xAA, 0x3F, 0x49, 0x88, 0x39, 0x8E, 0x88, 0x4B, 0x7C, 
   0xAA, 0x45, 0x53, 0x98, 0x4B, 0x51, 0x9D, 0x4B, 0x45, 0x90, 0x3A, 0x4B, 0x67, 0x57, 0x79, 0x90, 
   0x6D, 0x83, 0xA8, 0x5A, 0x2C, 0x9D, 0x15, 0x0F, 0x8B, 0x38, 0x83, 0x7F, 0x84, 0x9C, 0xA1, 0x57, 
   0x69, 0x85, 0x29, 0x2F, 0x8A, 0x56, 0x4B, 0x9C, 0x50, 0x5E, 0x91, 0x50, 0x81, 0xB2, 0x34, 0x5F, 
   0x72, 0x45, 0x48, 0x40, 0x6E, 0x54, 0xA9, 0x4C, 0x82, 0xF4, 0x40, 0x76, 0x92, 0x40, 0x57, 0x66, 
   0x5C, 0x45, 0x64, 0x40, 0x45, 0x7B, 0x4B, 0x68, 0xB5, 0x50, 0x79, 0xA5, 0x3F, 0x46, 0x87, 0x3F, 
   0x40, 0x6F, 0x50, 0x5E, 0x8C, 0x4B, 0x86, 0x92, 0x40, 0x5E, 0x98, 0x57, 0x3B, 0x76, 0x41, 0x52, 
   0x87, 0x4D, 0x75, 0xBA, 0x7A, 0x75, 0xBC, 0x56, 0x78, 0x4C, 0x1B, 0x32, 0x16, 0x26, 0x32, 0x5D, 
   0x4A, 0x67, 0xCE, 0x79, 0x69, 0xE0, 0x41, 0x6A, 0x61, 0x46, 0x6F, 0x5E, 0x57, 0x74, 0x90, 0x40, 
   0x4A, 0x89, 0x4B, 0x22, 0x78, 0x45, 0x56, 0x84, 0x45, 0x91, 0x7F, 0x35, 0x70, 0x7B, 0x63, 0x48, 
   0x87, 0x58, 0x5E, 0x8C, 0x46, 0x4D, 0x7B, 0x51, 0x76, 0x70, 0x67, 0x6B, 0xA9, 0x44, 0x64, 0x87, 
   0x33, 0x4D, 0x5A, 0x23, 0x37, 0x99, 0x5A, 0x72, 0x9A, 0x79, 0x6F, 0x79, 0x6E, 0x65, 0x85, 0x4A, 
   0x87, 0xA7, 0x26, 0x4D, 0xB0, 0x63, 0x6D, 0x52, 0x5B, 0x81, 0x56, 0x21, 0x24, 0x7D, 0x28, 0x29, 
   0x7E, 0x63, 0x5F, 0x85, 0x75, 0x8F, 0xA1, 0x64, 0x84, 0x74, 0x19, 0x3F, 0x6A, 0x42, 0x5A, 0xAB, 
   0x70, 0x76, 0xB1, 0x6F, 0x4D, 0x93, 0x44, 0x5E, 0x68, 0x3C, 0x6E, 0x78, 0x35, 0x30, 0x79, 0x0A, 
   0x48, 0x70, 0x59, 0x57, 0x94, 0xB1, 0xAE, 0xB1, 0x99, 0xB2, 0xC1, 0x39, 0x5C, 0x9F, 0x0D, 0x00, 
   0x45, 0x17, 0x33, 0x2C, 0x51, 0x84, 0x8D, 0x42, 0x5D, 0x95, 0x44, 0x25, 0x79, 0x79, 0x71, 0x69, 
   0x5C, 0x83, 0x76, 0x3F, 0x5B, 0xA5, 0x54, 0x4E, 0xB0, 0x4C, 0x47, 0x6F, 0x2F, 0x4D, 0x4B, 0x34, 
   0x6F, 0x62, 0x5D, 0x5D, 0x81, 0x57, 0x30, 0x94, 0x30, 0x44, 0x7F, 0x1B, 0x9B, 0x86, 0x83, 0x8F, 
   0xBE, 0x9E, 0x43, 0x8E, 0x29, 0x2A, 0x31, 0x00, 0x51, 0x81, 0x55, 0x6F, 0xC0, 0x73, 0x6F, 0x8D, 
   0x24, 0x46, 0x4D, 0x1F, 0x35, 0x81, 0x76, 0x63, 0xA4, 0x6B, 0x5E, 0x82, 0x36, 0x59, 0x7B, 0x25, 
   0x59, 0x7A, 0x53, 0x59, 0x75, 0x80, 0x59, 0x8C, 0x34, 0x64, 0x8C, 0x05, 0x5D, 0x85, 0x2E, 0x46, 
   0x74, 0x5E, 0x3C, 0x69, 0x60, 0x8D, 0x97, 0x55, 0x82, 0x8C, 0x3D, 0x21, 0x75, 0x3B, 0x64, 0x80, 
   0x45, 0x69, 0x7A, 0x33, 0x47, 0x91, 0x59, 0x56, 0x8F, 0x64, 0x4B, 0x79, 0x2B, 0x58, 0xB9, 0x58, 
   0x92, 0xD6, 0x7E, 0x91, 0xBC, 0x27, 0x44, 0x68, 0x00, 0x16, 0x44, 0x6D, 0x84, 0x8F, 0x96, 0xA1, 
   0xC5, 0x51, 0x5C, 0xAF, 0x28, 0x4A, 0x86, 0x4E, 0x76, 0x96, 0x48, 0x69, 0xA0, 0x3C, 0x3A, 0x93, 
   0x3C, 0x5B, 0x86, 0x42, 0x5B, 0x48, 0x55, 0x2F, 0x74, 0x4B, 0x54, 0xE4, 0x46, 0x90, 0xC4, 0x63, 
   0x86, 0xA1, 0x4C, 0x73, 0xC0, 0x3A, 0x4F, 0x74, 0x57, 0x33, 0x30, 0x62, 0x67, 0xC0, 0x3F, 0xBC, 
   0xFF, 0x54, 0x5E, 0x8A, 0x26, 0x00, 0x2B, 0x3D, 0x55, 0x7A, 0x55, 0x7F, 0x94, 0x50, 0x4D, 0xAE, 
   0x45, 0x5A, 0xBB, 0x50, 0x7D, 0x99, 0x44, 0x7D, 0x76, 0x22, 0x28, 0x92, 0x67, 0x4B, 0xA5, 0x62, 
   0xBD, 0x95, 0x2E, 0x5B, 0x8B, 0x39, 0x20, 0xCA, 0x61, 0x80, 0xC2, 0x4F, 0x63, 0x75, 0x21, 0x47, 
   0x56, 0x3F, 0x27, 0x5E, 0x58, 0x6F, 0xB2, 0x6A, 0xB0, 0xE3, 0x74, 0x8D, 0xD1, 0x1D, 0x1F, 0x79, 
   0x27, 0x2F, 0x71, 0x65, 0xA8, 0xA5, 0x4A, 0x98, 0xB7, 0x29, 0x27, 0x96, 0x52, 0x6C, 0x80, 0x65, 
   0x84, 0xAA, 0x65, 0x74, 0xB7, 0x42, 0x62, 0xAC, 0x1A, 0x68, 0x7F, 0x5B, 0x6D, 0xB8, 0x84, 0x73, 
   0xC8, 0x61, 0x5C, 0x89, 0x21, 0x61, 0x9F, 0x4D, 0x6C, 0x9F, 0x47, 0x72, 0x99, 0x3D, 0x50, 0x84, 
   0x55, 0x61, 0xBE, 0x67, 0x84, 0xC8, 0x71, 0x62, 0x76, 0x46, 0x62, 0x74, 0x00, 0x74, 0x86, 0x5E, 
   0x74, 0xC5, 0x8D, 0x5D, 0x9E, 0x18, 0x5D, 0x76, 0x3C, 0x69, 0xA5, 0x8E, 0x85, 0xBE, 0x93, 0x79, 
   0xCA, 0x30, 0x46, 0xB8, 0x01, 0x62, 0x88, 0x5D, 0x79, 0x80, 0x7B, 0x5D, 0xA1, 0x59, 0x62, 0x90, 
   0x3C, 0x6E, 0x9B, 0x57, 0x80, 0xA0, 0x62, 0x69, 0xB1, 0x46, 0x68, 0x8E, 0x62, 0x61, 0x98, 0x7E, 
   0x6B, 0xB2, 0x38, 0x59, 0x82, 0x2B, 0x58, 0x64, 0x4D, 0x52, 0xA2, 0x3D, 0x65, 0x98, 0x6C, 0x99, 
   0x93, 0x72, 0x77, 0xA3, 0x2C, 0x54, 0x8B, 0x30, 0x4E, 0x7A, 0x42, 0x65, 0x86, 0x6A, 0x76, 0x9E, 
   0x59, 0x8C, 0xB5, 0x46, 0x73, 0x87, 0x29, 0x38, 0x7B, 0x45, 0x5F, 0xB8, 0x51, 0x75, 0x8F, 0x4C, 
   0x3C, 0x4A, 0x57, 0x48, 0x89, 0x2F, 0x87, 0xAD, 0x58, 0x82, 0x9D, 0x6F, 0x48, 0x86, 0x41, 0x47, 
   0x80, 0x35, 0x6E, 0xA9, 0x57, 0x52, 0xBF, 0x5C, 0x57, 0x58, 0x50, 0x4C, 0x48, 0x34, 0x6A, 0xE5, 
   0x4B, 0x81, 0xF1, 0x6D, 0x4D, 0x71, 0x4A, 0x48, 0x5C, 0x27, 0x86, 0x78, 0x33, 0x6F, 0x8A, 0x51, 
   0x36, 0x92, 0x64, 0x4D, 0xB5, 0x64, 0x65, 0x82, 0x46, 0x82, 0xAA, 0x50, 0x53, 0xA3, 0x3F, 0x30, 
   0x59, 0x45, 0x5E, 0xA8, 0x62, 0xA2, 0xAD, 0x5B, 0x40, 0x85, 0x33, 0x4A, 0x73, 0x2D, 0x6C, 0x90, 
   0x72, 0x5C, 0x9C, 0x51, 0x51, 0x86, 0x3B, 0x52, 0x8C, 0x69, 0x6F, 0xA3, 0x5E, 0x86, 0xA3, 0x3B, 
   0x53, 0x75, 0x45, 0x52, 0x9D, 0x50, 0x3C, 0x7C, 0x34, 0x7B, 0x8E, 0x4B, 0x76, 0xD9, 0x57, 0x32, 
   0x8E, 0x57, 0x70, 0x75, 0x40, 0x97, 0x95, 0x40, 0x34, 0x6D, 0x62, 0x28, 0x79, 0x5B, 0x8F, 0xA8, 
   0x38, 0x8A, 0xBF, 0x49, 0x3E, 0x74, 0x3D, 0x43, 0x8A, 0x10, 0x44, 0x90, 0x50, 0x68, 0x7F, 0x85, 
   0x7A, 0x8B, 0x51, 0x58, 0x9D, 0x2E, 0x41, 0x9D, 0x44, 0x6E, 0xA1, 0x5B, 0x74, 0x6D, 0x44, 0x46, 
   0x8E, 0x28, 0x30, 0x88, 0x45, 0x65, 0x5D, 0x6E, 0x89, 0xC1, 0x4C, 0x88, 0xD8, 0x3A, 0x31, 0x80, 
   0x40, 0x4B, 0x66, 0x62, 0x5C, 0x81, 0x50, 0x5C, 0x8C, 0x3F, 0x56, 0x81, 0x3F, 0x5D, 0x87, 0x4B, 
   0x58, 0x99, 0x5C, 0x75, 0xA4, 0x40, 0x69, 0x8C, 0x4B, 0x40, 0x63, 0x2F, 0x4C, 0x76, 0x52, 0x76, 
   0xB1, 0x74, 0x82, 0xD3, 0x50, 0x80, 0xB2, 0x1B, 0x3E, 0x4C, 0x26, 0x31, 0x1C, 0x4A, 0x54, 0x85, 
   0x79, 0x51, 0xB1, 0x41, 0x6A, 0xC5, 0x4C, 0x7C, 0xB2, 0x4C, 0x7B, 0x71, 0x4C, 0x6D, 0x63, 0x57, 
   0x2D, 0x84, 0x45, 0x2D, 0x8F, 0x4B, 0x6D, 0x6D, 0x3A, 0x7B, 0x63, 0x68, 0x77, 0x9E, 0x52, 0x60, 
   0xBB, 0x3B, 0x54, 0x82, 0x51, 0x6F, 0x87, 0x66, 0x58, 0xA1, 0x15, 0x47, 0x35, 0x16, 0x4D, 0x4E, 
   0x7A, 0x71, 0xD4, 0x76, 0x67, 0xD6, 0x2E, 0x63, 0x63, 0x5C, 0x74, 0x7E, 0x78, 0x7F, 0x94, 0x50, 
   0x4C, 0x7D, 0x3D, 0x3A, 0x77, 0x5E, 0x68, 0xB6, 0x68, 0x95, 0xAF, 0x44, 0x65, 0x63, 0x1C, 0x19, 
   0x61, 0x4A, 0x4B, 0x78, 0x51, 0x6A, 0xA7, 0x5E, 0x6D, 0x92, 0x3D, 0x74, 0x55, 0x5B, 0x64, 0x80, 
   0x6C, 0x73, 0xEC, 0x92, 0x98, 0xD1, 0x54, 0x3F, 0x37, 0x00, 0x05, 0x00, 0x02, 0x5D, 0xA1, 0x84, 
   0x88, 0xFF, 0x7C, 0x95, 0x90, 0x43, 0x3A, 0x4F, 0x63, 0x7D, 0xA1, 0x60, 0xB9, 0xA4, 0x1E, 0x37, 
   0x5C, 0x06, 0x00, 0x2D, 0x3C, 0x56, 0x78, 0x7D, 0x96, 0xB9, 0x6D, 0x52, 0x9C, 0x28, 0x25, 0x3B, 
   0x38, 0x71, 0x69, 0x61, 0x89, 0xA4, 0x5B, 0x5B, 0x8F, 0x54, 0x48, 0x9A, 0x40, 0x52, 0x98, 0x0C, 
   0x63, 0x68, 0x3A, 0x46, 0x34, 0x63, 0x3C, 0x76, 0x59, 0x67, 0xBE, 0x37, 0x90, 0xAE, 0x37, 0x73, 
   0x8A, 0x59, 0x43, 0x4F, 0x53, 0x36, 0x60, 0x51, 0x3B, 0xAA, 0x32, 0x7F, 0xA4, 0x1B, 0x51, 0x53, 
   0x3A, 0x3A, 0x53, 0x64, 0x6E, 0xB4, 0x60, 0x52, 0x87, 0x59, 0x5E, 0x76, 0x1A, 0x59, 0x98, 0x3C, 
   0x59, 0x86, 0x64, 0x59, 0x7A, 0x5F, 0x64, 0x7A, 0x4C, 0x58, 0x91, 0x45, 0x46, 0x91, 0x1C, 0x51, 
   0x80, 0x12, 0x4C, 0x74, 0x5F, 0x31, 0x74, 0x7D, 0x83, 0x7A, 0x6C, 0xA0, 0x81, 0x41, 0x3D, 0x86, 
   0x2E, 0x35, 0x6F, 0x2D, 0x50, 0x8C, 0x35, 0x4A, 0xA0, 0x24, 0x2E, 0x9B, 0x5E, 0x96, 0xA1, 0x7B, 
   0xA8, 0xAC, 0x51, 0x2F, 0x9F, 0x11, 0x13, 0x7B, 0x38, 0x9D, 0x91, 0x62, 0x97, 0x9D, 0x5D, 0x40, 
   0xA8, 0x57, 0x3E, 0x90, 0x4A, 0x6B, 0x79, 0x37, 0x70, 0xA6, 0x53, 0x75, 0xC6, 0x3C, 0x51, 0x52, 
   0x2B, 0x1C, 0x1A, 0x43, 0x55, 0xF5, 0x61, 0x79, 0xD0, 0x50, 0x42, 0x37, 0x50, 0x44, 0x99, 0x45, 
   0x90, 0xFF, 0x51, 0x7F, 0x6B, 0x4C, 0x46, 0x48, 0x4C, 0x68, 0xAA, 0x57, 0x89, 0xFF, 0x56, 0x49, 
   0xAF, 0x33, 0x5D, 0x66, 0x64, 0x60, 0x63, 0x1A, 0x1C, 0x7F, 0x1B, 0x40, 0x93, 0x6D, 0x6C, 0x64, 
   0x6F, 0x86, 0xE0, 0x6E, 0xA7, 0xFF, 0x33, 0x5A, 0x60, 0x0A, 0x09, 0x24, 0x50, 0x6B, 0xA3, 0x7A, 
   0x89, 0xDF, 0x6E, 0x9F, 0xB2, 0x28, 0x31, 0x89, 0x1C, 0x00, 0x94, 0x50, 0x77, 0x94, 0x73, 0xA7, 
   0xB1, 0x4C, 0x68, 0xB1, 0x2F, 0x34, 0x6D, 0x63, 0x4B, 0x9B, 0x5D, 0x7A, 0xBE, 0x4B, 0x86, 0xA6, 
   0x54, 0x67, 0x92, 0x0F, 0x0B, 0x42, 0x3E, 0x5D, 0x84, 0x79, 0x99, 0xFF, 0x47, 0x6D, 0xC2, 0x37, 
   0x5C, 0x76, 0x65, 0x5C, 0x6A, 0x65, 0x68, 0xB6, 0x26, 0x79, 0xCE, 0x33, 0x5D, 0x8A, 0x96, 0x5D, 
   0xA0, 0x7F, 0x79, 0xA5, 0x38, 0x95, 0x95, 0x24, 0x49, 0xC7, 0x4C, 0x3D, 0x9F, 0x4E, 0x60, 0x93, 
   0x50, 0x7E, 0x98, 0x7E, 0x62, 0x8D, 0x60, 0x68, 0xB6, 0x10, 0x62, 0xA0, 0x66, 0x6E, 0xA0, 0x77, 
   0x69, 0xA5, 0x38, 0x74, 0xBB, 0x37, 0x5D, 0x88, 0x22, 0x6D, 0x77, 0x5E, 0x61, 0xBC, 0x99, 0x56, 
   0xA6, 0x6B, 0x79, 0x96, 0x25, 0x6E, 0xD9, 0x2A, 0x57, 0xA9, 0x8C, 0x62, 0x41, 0x5F, 0x69, 0xA1, 
   0x52, 0x80, 0xDB, 0x4A, 0x74, 0xB3, 0x44, 0x56, 0x9E, 0x3E, 0x4A, 0x6D, 0x51, 0x94, 0x4A, 0x63, 
   0x66, 0xBD, 0x7F, 0x48, 0xE5, 0x49, 0x69, 0x5F, 0x25, 0x58, 0x52, 0x42, 0x42, 0xAE, 0x49, 0x76, 
   0xAA, 0x6C, 0x82, 0xA3, 0x6B, 0x66, 0x74, 0x3C, 0x5F, 0x90, 0x36, 0x65, 0x7A, 0x42, 0x70, 0x9D, 
   0x6A, 0x6F, 0x9E, 0x59, 0x57, 0x88, 0x41, 0x56, 0x9F, 0x35, 0x7C, 0xB5, 0x57, 0x53, 0xA1, 0x5C, 
   0x3B, 0x71, 0x2F, 0x4C, 0x60, 0x52, 0x5F, 0x8F, 0x6F, 0x71, 0xB3, 0x41, 0x71, 0x92, 0x35, 0x6A, 
   0x97, 0x57, 0x46, 0xB3, 0x62, 0x56, 0x63, 0x34, 0x79, 0x4E, 0x23, 0x5E, 0xCE, 0x63, 0x53, 0xE6, 
   0x8A, 0x64, 0x8E, 0x39, 0x54, 0x6E, 0x32, 0x70, 0x6C, 0x2C, 0x59, 0x89, 0x4B, 0x54, 0xA8, 0x6F, 
   0x82, 0xB4, 0x6F, 0x6B, 0x80, 0x4B, 0x5E, 0x86, 0x1C, 0x57, 0x81, 0x2D, 0x47, 0xA4, 0x4C, 0x6A, 
   0xB5, 0x7B, 0x91, 0x7B, 0x5D, 0x3B, 0x74, 0x28, 0x45, 0xA2, 0x37, 0x4B, 0xBE, 0x2C, 0x6E, 0x61, 
   0x3F, 0x79, 0x4A, 0x79, 0x3A, 0xA7, 0x41, 0x34, 0xBA, 0x2B, 0x6F, 0x77, 0x7B, 0x9E, 0xBB, 0x64, 
   0x76, 0xA3, 0x2A, 0x14, 0x59, 0x40, 0x80, 0x8C, 0x5C, 0x80, 0xB6, 0x51, 0x1F, 0x95, 0x4C, 0x6A, 
   0xB6, 0x4C, 0x87, 0x97, 0x51, 0x4E, 0x51, 0x5C, 0x63, 0x7E, 0x61, 0x67, 0xB8, 0x32, 0x27, 0xAD, 
   0x20, 0x50, 0x7A, 0x43, 0x84, 0x90, 0x66, 0x78, 0x8A, 0x4F, 0x2D, 0x85, 0x22, 0x22, 0x8B, 0x45, 
   0x69, 0xA9, 0x6E, 0x99, 0xA3, 0x5C, 0x87, 0x9D, 0x1D, 0x40, 0x8A, 0x44, 0x39, 0x7D, 0x61, 0x4A, 
   0x88, 0x44, 0x63, 0x9A, 0x39, 0x77, 0x89, 0x40, 0x78, 0x6F, 0x63, 0x5B, 0xA4, 0x58, 0x77, 0xDE, 
   0x2F, 0x5F, 0xA9, 0x50, 0x5D, 0x7C, 0x44, 0x4A, 0x57, 0x3F, 0x23, 0x6E, 0x4B, 0x69, 0x9E, 0x57, 
   0xA3, 0xB6, 0x4C, 0x63, 0x99, 0x57, 0x2F, 0x75, 0x2F, 0x46, 0x58, 0x58, 0x64, 0xA4, 0x74, 0x7C, 
   0xC1, 0x67, 0x81, 0xA4, 0x27, 0x4B, 0x74, 0x1B, 0x2D, 0x88, 0x4A, 0x4F, 0x92, 0x79, 0x67, 0x7B, 
   0x41, 0x57, 0x6A, 0x4C, 0x5F, 0x89, 0x4C, 0x92, 0xB8, 0x4C, 0x69, 0xB1, 0x4C, 0x23, 0x65, 0x57, 
   0x50, 0x73, 0x40, 0x78, 0x84, 0x3A, 0x46, 0x6E, 0x51, 0x47, 0x86, 0x46, 0x6B, 0x9E, 0x52, 0x7D, 
   0x7D, 0x58, 0x71, 0x99, 0x6D, 0x48, 0xAE, 0x32, 0x57, 0x68, 0x04, 0x3B, 0x4C, 0x39, 0x42, 0x88, 
   0x5F, 0x7E, 0xB3, 0x73, 0x86, 0xBB, 0x7E, 0x69, 0xA3, 0x2D, 0x5C, 0x78, 0x21, 0x3F, 0x6A, 0x71, 
   0x50, 0x5E, 0x6B, 0x73, 0x71, 0x31, 0x74, 0xA6, 0x3B, 0x5E, 0xD4, 0x57, 0x9C, 0x8D, 0x66, 0x87, 
   0x5C, 0x10, 0x12, 0x5A, 0x16, 0x01, 0x4B, 0x47, 0x60, 0x8D, 0x89, 0x9E, 0xB3, 0x6D, 0xAB, 0xB4, 
   0x66, 0x6F, 0xAC, 0x51, 0x4D, 0x7A, 0x2B, 0x39, 0x49, 0x00, 0x17, 0x4E, 0x2C, 0x63, 0x74, 0x9C, 
   0x99, 0xB7, 0x8B, 0x8E, 0xEA, 0x28, 0x4D, 0x86, 0x0F, 0x35, 0x4E, 0x48, 0x63, 0x63, 0x70, 0xB8, 
   0x8C, 0x2C, 0x5A, 0xA3, 0x33, 0x00, 0x6A, 0x78, 0x5C, 0x6F, 0x61, 0x85, 0x86, 0x32, 0x41, 0x9C, 
   0x1B, 0x2B, 0x6E, 0x55, 0x71, 0x53, 0x78, 0x83, 0x83, 0x4A, 0x77, 0xB2, 0x48, 0x42, 0xAB, 0x4B, 
   0x2F, 0x64, 0x18, 0x36, 0x46, 0x25, 0x71, 0x5E, 0x82, 0x89, 0x9F, 0x82, 0x4A, 0xD4, 0x1F, 0x3E, 
   0x51, 0x08, 0x60, 0x6E, 0x86, 0x7D, 0xC3, 0x9C, 0x75, 0x9A, 0x00, 0x3A, 0x42, 0x00, 0x34, 0x6A, 
   0x5C, 0x62, 0xB4, 0x8C, 0x5D, 0x76, 0x42, 0x52, 0x6F, 0x26, 0x64, 0x7A, 0x5F, 0x59, 0x86, 0x59, 
   0x53, 0x86, 0x31, 0x5E, 0x7A, 0x36, 0x58, 0x6E, 0x58, 0x41, 0x6E, 0x5E, 0x5D, 0x7A, 0x3B, 0x5D, 
   0x97, 0x2F, 0x46, 0x8B, 0x2A, 0x2B, 0x57, 0x54, 0x60, 0x7A, 0x82, 0x9A, 0xB4, 0x4D, 0x88, 0x82, 
   0x34, 0x24, 0x7B, 0x33, 0x3F, 0x81, 0x41, 0x63, 0xA0, 0x30, 0x68, 0xA6, 0x8B, 0x67, 0xA5, 0x58, 
   0x34, 0x7C, 0x1F, 0x41, 0x88, 0x5D, 0x82, 0xB2, 0x68, 0xBC, 0xB8, 0x29, 0x6A, 0xBC, 0x3F, 0x34, 
   0x85, 0x5B, 0x54, 0x56, 0x66, 0x6A, 0xB7, 0x32, 0x53, 0xB6, 0x2B, 0x53, 0x6A, 0x42, 0x7A, 0x6A, 
   0x55, 0x5D, 0xA5, 0x5B, 0x24, 0xB9, 0x3F, 0x7A, 0xB3, 0x4F, 0x76, 0x9B, 0x38, 0x4E, 0x78, 0x28, 
   0x3E, 0x84, 0x57, 0x57, 0x8D, 0x63, 0x8C, 0xA1, 0x4C, 0xB9, 0xFC, 0x40, 0x5B, 0x99, 0x4B, 0x25, 
   0x51, 0x66, 0x51, 0x8D, 0x3E, 0x73, 0xC0, 0x42, 0x68, 0x6A, 0x37, 0x20, 0x55, 0x39, 0x6E, 0xB9, 
   0x8A, 0xE1, 0xAB, 0x46, 0x3A, 0xBE, 0x34, 0x27, 0xE3, 0x4A, 0x8C, 0x53, 0x34, 0x4D, 0x69, 0x57, 
   0x31, 0xBF, 0x73, 0x76, 0xAF, 0x4B, 0x77, 0x6B, 0x12, 0x39, 0x72, 0x57, 0x3B, 0xBF, 0x64, 0x98, 
   0xC6, 0x69, 0xCB, 0xC5, 0x40, 0x44, 0x9A, 0x17, 0x00, 0x3D, 0x4B, 0x38, 0x92, 0x94, 0xE5, 0xD2, 
   0x3E, 0x7E, 0x99, 0x04, 0x00, 0x70, 0x3E, 0x23, 0x6D, 0x51, 0xAF, 0xCC, 0x69, 0x95, 0xF5, 0x47, 
   0x45, 0x9F, 0x37, 0x50, 0x5E, 0x44, 0x73, 0x92, 0x6C, 0x74, 0xC1, 0x55, 0x6E, 0xB6, 0x2E, 0x6E, 
   0x72, 0x67, 0x7F, 0xA0, 0x8D, 0x67, 0xD3, 0x30, 0x4F, 0x83, 0x0D, 0x4F, 0x9E, 0x64, 0x77, 0xAD, 
   0x76, 0x5C, 0x68, 0x49, 0x73, 0x69, 0x0C, 0x68, 0xB1, 0x74, 0x5D, 0xDC, 0x97, 0x6E, 0xC5, 0x51, 
   0x69, 0x84, 0x21, 0x69, 0x7E, 0x42, 0x84, 0xBC, 0x64, 0x72, 0xB6, 0x32, 0x2D, 0x76, 0x30, 0x50, 
   0x71, 0x8E, 0x96, 0xC2, 0x9A, 0x6F, 0xB7, 0x37, 0x58, 0x99, 0x0E, 0x47, 0xA9, 0x7F, 0x8B, 0x86, 
   0x73, 0x79, 0xAD, 0x27, 0x51, 0xDF, 0x2C, 0x6C, 0x86, 0x43, 0x66, 0x6C, 0x4A, 0x4F, 0x71, 0x69, 
   0x6B, 0x83, 0x75, 0x88, 0xBD, 0x62, 0x54, 0xC2, 0x2D, 0x53, 0x5A, 0x31, 0x6F, 0x75, 0x48, 0x4D, 
   0xB4, 0x4F, 0x53, 0x92, 0x6B, 0x93, 0x91, 0x5F, 0x66, 0x7F, 0x42, 0x70, 0xA7, 0x30, 0x68, 0x7F, 
   0x59, 0x3A, 0x70, 0x5F, 0x57, 0xB6, 0x65, 0x9B, 0xC2, 0x4D, 0x5B, 0x88, 0x40, 0x3D, 0x8B, 0x29, 
   0x5E, 0xAB, 0x41, 0x69, 0x77, 0x86, 0x31, 0x5A, 0x3B, 0x5A, 0x7E, 0x35, 0xA5, 0xC4, 0x57, 0x76, 
   0xB3, 0x62, 0x2F, 0x57, 0x34, 0x33, 0x42, 0x29, 0x4B, 0xD3, 0x63, 0x85, 0xF1, 0x7A, 0x53, 0x72, 
   0x40, 0x42, 0x74, 0x3E, 0x87, 0x8F, 0x27, 0x7C, 0x72, 0x3F, 0x32, 0x90, 0x6E, 0x4E, 0xB8, 0x5D, 
   0x8E, 0x9C, 0x56, 0x98, 0x73, 0x2C, 0x34, 0x8A, 0x32, 0x0C, 0x97, 0x2E, 0x6E, 0x9F, 0x64, 0xA3, 
   0xBB, 0x81, 0x5E, 0x87, 0x4D, 0x34, 0x5E, 0x39, 0x46, 0xBF, 0x33, 0x7A, 0xB3, 0x5A, 0x6A, 0x72, 
   0x38, 0x5E, 0x6C, 0x34, 0x5D, 0x79, 0x6E, 0x46, 0xA9, 0x52, 0x5D, 0xBB, 0x25, 0x53, 0x8E, 0x64, 
   0x65, 0x82, 0x64, 0x8D, 0x98, 0x3B, 0x58, 0x7C, 0x4C, 0x1E, 0x98, 0x4C, 0x57, 0x93, 0x4C, 0x6F, 
   0x93, 0x4C, 0x54, 0x9E, 0x57, 0x60, 0x97, 0x61, 0x98, 0x91, 0x37, 0x6D, 0xA7, 0x2B, 0x16, 0x79, 
   0x54, 0x22, 0x84, 0x44, 0xA1, 0x90, 0x5C, 0x80, 0x9C, 0x5C, 0x51, 0x91, 0x50, 0x28, 0x97, 0x17, 
   0x35, 0xA3, 0x4B, 0x87, 0x97, 0x73, 0xAF, 0x96, 0x5C, 0x40, 0x8A, 0x34, 0x1C, 0x8F, 0x3F, 0x45, 
   0x7D, 0x5B, 0x80, 0x94, 0x56, 0x76, 0x9A, 0x2E, 0x49, 0x67, 0x4C, 0x4A, 0x59, 0x7B, 0x8F, 0xDE, 
   0x6F, 0x88, 0xEF, 0x29, 0x4D, 0x6E, 0x28, 0x40, 0x4D, 0x56, 0x5D, 0x63, 0x57, 0x63, 0xAF, 0x4C, 
   0x69, 0xB0, 0x4C, 0x46, 0x87, 0x41, 0x46, 0x6B, 0x52, 0x53, 0xA9, 0x7A, 0x8D, 0xAF, 0x56, 0x86, 
   0x80, 0x15, 0x40, 0x68, 0x2C, 0x45, 0x79, 0x56, 0x5C, 0x91, 0x6E, 0x62, 0xC9, 0x41, 0x4C, 0x88, 
   0x4C, 0x5E, 0x46, 0x4C, 0x80, 0x63, 0x4C, 0x5D, 0x88, 0x4C, 0x3A, 0xC3, 0x57, 0x51, 0xC7, 0x35, 
   0x6E, 0x4E, 0x4C, 0x7A, 0x52, 0x5D, 0x4C, 0xA2, 0x5D, 0x3B, 0xAE, 0x2A, 0x4D, 0x65, 0x63, 0x8E, 
   0x7C, 0x7E, 0x88, 0xC5, 0x33, 0x54, 0x64, 0x05, 0x36, 0x42, 0x5B, 0x53, 0x93, 0x69, 0x5A, 0xBC, 
   0x44, 0x68, 0x5D, 0x61, 0x7B, 0x7A, 0x6C, 0x91, 0xD0, 0x43, 0x50, 0xA1, 0x25, 0x2D, 0x4F, 0x3C, 
   0x78, 0x70, 0x7C, 0x73, 0x93, 0x54, 0x58, 0x7E, 0x37, 0x64, 0x9B, 0x5D, 0x86, 0xB1, 0x62, 0x7E, 
   0x9E, 0x28, 0x59, 0x4C, 0x17, 0x08, 0x41, 0x52, 0x32, 0x83, 0x82, 0x91, 0xF8, 0x82, 0xD1, 0xEB, 
   0x58, 0x85, 0x42, 0x0B, 0x04, 0x23, 0x11, 0x30, 0x96, 0x79, 0x91, 0xCB, 0x85, 0x6F, 0x80, 0x2E, 
   0x3B, 0x36, 0x49, 0x56, 0xBE, 0x52, 0x77, 0xC1, 0x12, 0x27, 0x3C, 0x1F, 0x23, 0x30, 0x67, 0x86, 
   0xB0, 0x86, 0xC5, 0xC9, 0x68, 0x5B, 0x94, 0x11, 0x00, 0x49, 0x3D, 0x50, 0x81, 0x54, 0x90, 0xA8, 
   0x4E, 0x41, 0x75, 0x2C, 0x2B, 0x4D, 0x3E, 0x76, 0x99, 0x6C, 0x94, 0x84, 0x55, 0x54, 0x90, 0x42, 
   0x31, 0x9B, 0x3C, 0x5F, 0x8E, 0x3C, 0x7D, 0x75, 0x48, 0x49, 0x5D, 0x6A, 0x43, 0x48, 0x41, 0x4F, 
   0x95, 0x35, 0x61, 0xBA, 0x3B, 0x9A, 0xBF, 0x4C, 0x5F, 0x5B, 0x69, 0x13, 0x4E, 0x40, 0x56, 0xA4, 
   0x3A, 0x5C, 0xA4, 0x3F, 0x63, 0x6A, 0x40, 0x58, 0x85, 0x48, 0x47, 0x69, 0x65, 0x59, 0x7A, 0x6B, 
   0x75, 0x8C, 0x26, 0x64, 0x8C, 0x41, 0x36, 0x80, 0x36, 0x58, 0x69, 0x59, 0x69, 0x8B, 0x70, 0x5E, 
   0x80, 0x4D, 0x4E, 0x80, 0x3B, 0x70, 0x85, 0x2F, 0x59, 0x80, 0x3B, 0x31, 0x64, 0x69, 0x81, 0xAF, 
   0x47, 0x7B, 0x82, 0x2A, 0x14, 0x70, 0x65, 0x8C, 0xA5, 0x80, 0xB3, 0xB5, 0x1E, 0x22, 0x7B, 0x0C, 
   0x06, 0x6A, 0x64, 0x87, 0x7D, 0x82, 0xC8, 0xCB, 0x65, 0x61, 0xF3, 0x40, 0x3C, 0x95, 0x27, 0x84, 
   0x58, 0x37, 0x60, 0x9A, 0x60, 0x3C, 0xC1, 0x5A, 0x52, 0x70, 0x3E, 0x4D, 0x3D, 0x33, 0x65, 0xB1, 
   0x6D, 0x82, 0xFD, 0x5C, 0x59, 0x69, 0x44, 0x3D, 0x6D, 0x43, 0x81, 0xE3, 0x43, 0x81, 0x7B, 0x3F, 
   0x10, 0x00, 0x5C, 0x50, 0xBB, 0x51, 0xB3, 0xFF, 0x57, 0x63, 0xAC, 0x40, 0x38, 0x4C, 0x50, 0x69, 
   0x77, 0x44, 0x4B, 0x94, 0x4A, 0x40, 0xA0, 0x4A, 0x4E, 0x84, 0x55, 0x84, 0xAD, 0x43, 0x95, 0xA7, 
   0x2D, 0x45, 0x90, 0x62, 0x44, 0x5F, 0x5D, 0x71, 0x9A, 0x63, 0x6B, 0xFF, 0x4B, 0x69, 0x7A, 0x2D, 
   0x3A, 0x50, 0x22, 0x08, 0x7E, 0x63, 0x7E, 0x98, 0x80, 0xC1, 0xAC, 0x20, 0x6C, 0xAA, 0x4D, 0x48, 
   0xC7, 0x74, 0x7F, 0xCC, 0x51, 0x78, 0x95, 0x3F, 0x3D, 0x8C, 0x49, 0x47, 0x68, 0x27, 0x3D, 0x85, 
   0x4A, 0x6D, 0xAA, 0x6D, 0x96, 0xB7, 0x3A, 0x6F, 0x9B, 0x35, 0x25, 0x68, 0x63, 0x76, 0x92, 0x52, 
   0x83, 0xE3, 0x26, 0x5C, 0xAF, 0x61, 0x56, 0x69, 0x8A, 0x62, 0x74, 0x50, 0x6E, 0xA9, 0x2C, 0x7F, 
   0xB6, 0x42, 0x61, 0xA0, 0x4E, 0x39, 0xA5, 0x6A, 0x77, 0xC1, 0x3C, 0x89, 0x97, 0x3B, 0x5C, 0x85, 
   0x41, 0x67, 0x90, 0x1B, 0x5C, 0x75, 0x57, 0x68, 0xAC, 0x98, 0x79, 0xCB, 0x64, 0x69, 0xBB, 0x3B, 
   0x69, 0x8C, 0x55, 0x7F, 0x90, 0x4E, 0x67, 0xC3, 0x2F, 0x44, 0xAB, 0x2F, 0x60, 0x76, 0x27, 0x6C, 
   0x8C, 0x54, 0x40, 0xB5, 0x95, 0x81, 0x77, 0x94, 0x93, 0xA5, 0x2A, 0x76, 0xE9, 0x22, 0x5D, 0x92, 
   0x4F, 0x4A, 0x7D, 0x60, 0x6C, 0x86, 0x49, 0x72, 0x8B, 0x38, 0x71, 0xA6, 0x44, 0x48, 0xAB, 0x56, 
   0x5F, 0x7D, 0x4C, 0x72, 0x67, 0x6F, 0x7E, 0xB8, 0x69, 0x7D, 0xE5, 0x3F, 0x59, 0x71, 0x43, 0x4C, 
   0x58, 0x47, 0x4C, 0xA1, 0x3C, 0x53, 0xA2, 0x65, 0xA3, 0x91, 0x6A, 0x6F, 0x8A, 0x47, 0x1E, 0x68, 
   0x2B, 0x62, 0x9D, 0x4E, 0x7E, 0xAA, 0x71, 0x62, 0x99, 0x70, 0x6D, 0x98, 0x1F, 0x5B, 0x80, 0x2F, 
   0x65, 0x85, 0x7F, 0x42, 0xA6, 0x52, 0x5F, 0x78, 0x2F, 0x70, 0x7D, 0x57, 0x54, 0xB1, 0x62, 0x6A, 
   0x84, 0x34, 0x69, 0x42, 0x29, 0x4B, 0xC2, 0x63, 0x56, 0xFC, 0x74, 0x52, 0x77, 0x40, 0x6F, 0x7A, 
   0x33, 0x64, 0x84, 0x2D, 0x54, 0x79, 0x45, 0x5A, 0xA7, 0x68, 0x77, 0xAC, 0x51, 0x60, 0x6D, 0x66, 
   0x6A, 0x83, 0x20, 0x5D, 0x9A, 0x2B, 0x3F, 0x79, 0x44, 0x56, 0x91, 0x7F, 0x7F, 0xAE, 0x5E, 0x52, 
   0x82, 0x42, 0x40, 0x99, 0x58, 0x57, 0xC0, 0x46, 0x6A, 0x6F, 0x5C, 0x70, 0x6E, 0x56, 0x59, 0xA7, 
   0x33, 0x42, 0xA1, 0x33, 0x6A, 0x6E, 0x45, 0x90, 0x7F, 0x7F, 0x3A, 0xAE, 0x52, 0x29, 0x94, 0x25, 
   0x81, 0x95, 0x75, 0x9E, 0xB7, 0x59, 0x3D, 0x9F, 0x36, 0x41, 0x70, 0x4C, 0x80, 0x96, 0x4C, 0x53, 
   0x7B, 0x57, 0x42, 0x93, 0x61, 0x92, 0xD1, 0x37, 0x64, 0x9D, 0x14, 0x35, 0x5C, 0x3D, 0x78, 0x83, 
   0x4F, 0x6C, 0x8F, 0x50, 0x1D, 0x90, 0x57, 0x74, 0x96, 0x46, 0x7B, 0x86, 0x63, 0x76, 0x97, 0x67, 
   0x5E, 0xA2, 0x22, 0x5D, 0x7F, 0x39, 0x3B, 0x6E, 0x79, 0x74, 0xAC, 0x57, 0x63, 0x90, 0x34, 0x52, 
   0x89, 0x44, 0x5D, 0x9A, 0x56, 0x52, 0x72, 0x50, 0x48, 0x9B, 0x23, 0x82, 0x9C, 0x68, 0x66, 0x7B, 
   0x74, 0x66, 0xA3, 0x41, 0x55, 0xC5, 0x3A, 0x43, 0x96, 0x45, 0x7B, 0x7C, 0x57, 0x6E, 0x75, 0x4C, 
   0x34, 0x80, 0x41, 0x46, 0x70, 0x4D, 0x6A, 0xC1, 0x7A, 0x8D, 0xAA, 0x56, 0x75, 0x8B, 0x26, 0x3A, 
   0x60, 0x09, 0x33, 0x55, 0x5B, 0x51, 0x97, 0x7A, 0x75, 0xD2, 0x4D, 0x65, 0xA4, 0x46, 0x6B, 0x9A, 
   0x4C, 0x75, 0x6F, 0x4C, 0x5C, 0x45, 0x4C, 0x27, 0x6E, 0x57, 0x4A, 0xA3, 0x35, 0x90, 0x95, 0x4C, 
   0x64, 0xA6, 0x58, 0x54, 0x83, 0x52, 0x81, 0x81, 0x52, 0x53, 0x75, 0x51, 0x47, 0x92, 0x61, 0x5E, 
   0xB3, 0x2C, 0x5F, 0x5D, 0x21, 0x7C, 0x53, 0x5C, 0x61, 0xBC, 0x53, 0x50, 0xAD, 0x4F, 0x62, 0x7F, 
   0x66, 0x68, 0x83, 0x4F, 0x73, 0x8E, 0x38, 0x62, 0x78, 0x5A, 0x4B, 0x9B, 0x75, 0x72, 0xA1, 0x19, 
   0x56, 0x83, 0x20, 0x45, 0x82, 0x93, 0x68, 0x8D, 0x7C, 0x7F, 0x77, 0x30, 0x4C, 0x9A, 0x1F, 0x46, 
   0xA1, 0x64, 0x80, 0x7F, 0x70, 0x91, 0x7F, 0x30, 0x3F, 0x95, 0x40, 0x42, 0xAA, 0x61, 0x59, 0x7A, 
   0x2D, 0x71, 0x3A, 0x23, 0x72, 0x75, 0x4E, 0x57, 0xB7, 0x99, 0x8F, 0xBD, 0x80, 0x75, 0x93, 0x15, 
   0x2D, 0x71, 0x1D, 0x36, 0x35, 0x33, 0x4D, 0x5D, 0x56, 0x7C, 0xB3, 0x20, 0x4A, 0x65, 0x46, 0x47, 
   0x78, 0x98, 0x87, 0xA1, 0x75, 0xC5, 0x91, 0x2D, 0x4F, 0xA6, 0x0F, 0x00, 0x70, 0x54, 0x50, 0x4D, 
   0x71, 0x8A, 0x98, 0x43, 0x4C, 0x9E, 0x20, 0x2A, 0x77, 0x54, 0x53, 0x71, 0x6C, 0x67, 0x73, 0x34, 
   0x6D, 0xAE, 0x66, 0x5C, 0xC4, 0x59, 0x60, 0x8D, 0x1E, 0x48, 0x23, 0x0D, 0x48, 0x1E, 0x6E, 0x66, 
   0xC8, 0x96, 0x77, 0xF8, 0x01, 0x5B, 0x4D, 0x00, 0x49, 0x62, 0x8D, 0x75, 0xB1, 0x9E, 0x41, 0x8E, 
   0x29, 0x40, 0x5F, 0x00, 0x57, 0x80, 0x39, 0x5D, 0x7A, 0x8B, 0x69, 0x80, 0x48, 0x64, 0x80, 0x2C, 
   0x4D, 0x7A, 0x70, 0x47, 0x91, 0x3D, 0x64, 0x81, 0x31, 0x64, 0x91, 0x3D, 0x42, 0x69, 0x5A, 0x43, 
   0x74, 0x6B, 0x88, 0x85, 0x52, 0x76, 0x97, 0x22, 0x3B, 0x7A, 0x16, 0x2E, 0x69, 0x3A, 0x41, 0x6F, 
   0x64, 0x87, 0xAF, 0x6C, 0x5B, 0x6C, 0x64, 0x5C, 0x91, 0x7F, 0x62, 0x91, 0x0C, 0x40, 0x86, 0x1E, 
   0x5D, 0x82, 0x70, 0x98, 0xA0, 0x77, 0x77, 0xBF, 0x54, 0x54, 0xB4, 0x68, 0x64, 0xA7, 0x3E, 0x6E, 
   0x9E, 0x14, 0x6C, 0xB1, 0x2B, 0x42, 0x48, 0x55, 0x31, 0x43, 0x6D, 0x76, 0xD3, 0x45, 0x66, 0xB9, 
   0x3A, 0x62, 0x7A, 0x62, 0x89, 0xAC, 0x44, 0x60, 0xAF, 0x21, 0x1F, 0x4D, 0x33, 0x48, 0x64, 0x72, 
   0x8E, 0xA0, 0x4B, 0x7D, 0xA9, 0x34, 0x4A, 0xD2, 0x45, 0x5A, 0x86, 0x62, 0x82, 0x74, 0x50, 0x5F, 
   0xA6, 0x22, 0x47, 0x8A, 0x50, 0x20, 0x5E, 0x5C, 0x84, 0xD1, 0x61, 0xC9, 0xDC, 0x3D, 0x3F, 0x73, 
   0x04, 0x05, 0x44, 0x44, 0x8E, 0x8A, 0x7A, 0x9A, 0xA4, 0x64, 0x54, 0xC7, 0x57, 0x5D, 0xE0, 0x33, 
   0x46, 0x3E, 0x0B, 0x2B, 0x3E, 0x58, 0x41, 0xC5, 0x88, 0xAC, 0xB8, 0x76, 0xDF, 0xC0, 0x30, 0x42, 
   0x9E, 0x18, 0x00, 0x97, 0x62, 0x7D, 0xA7, 0x7D, 0xCC, 0xCB, 0x1B, 0x47, 0x5C, 0x0F, 0x00, 0x2F, 
   0x61, 0x55, 0xB5, 0x80, 0xE7, 0xE6, 0x6A, 0x93, 0xAD, 0x41, 0x14, 0x72, 0x1E, 0x2B, 0x56, 0x3B, 
   0x9F, 0x9D, 0x6B, 0x84, 0xFF, 0x78, 0x5D, 0xA3, 0x3F, 0x5D, 0x5D, 0x66, 0x8A, 0x6F, 0x5E, 0x61, 
   0xD7, 0x13, 0x50, 0xBB, 0x24, 0x77, 0x71, 0x76, 0x67, 0xB9, 0xA4, 0x61, 0x96, 0x25, 0x7E, 0x7A, 
   0x00, 0x56, 0x92, 0x60, 0x5C, 0xC1, 0xB9, 0x6D, 0x95, 0x48, 0x5D, 0x97, 0x25, 0x74, 0xBB, 0x63, 
   0x7F, 0xCC, 0x79, 0x67, 0xBA, 0x71, 0x44, 0x7F, 0x08, 0x50, 0x7E, 0x0D, 0x8F, 0xD8, 0x6A, 0x6D, 
   0x9E, 0x52, 0x46, 0x6A, 0x4F, 0x64, 0xBA, 0x9A, 0xAA, 0xB6, 0x91, 0x9E, 0xAB, 0x00, 0x35, 0xE1, 
   0x0A, 0x3E, 0x87, 0x7D, 0x88, 0x3B, 0x73, 0x66, 0xAC, 0x4A, 0x5A, 0xC3, 0x49, 0x70, 0x8F, 0x3E, 
   0x43, 0x94, 0x3A, 0x5B, 0x72, 0x6A, 0x95, 0x8A, 0x7C, 0x7E, 0xCF, 0x8C, 0x5A, 0xC2, 0x39, 0x58, 
   0x5E, 0x1F, 0x51, 0x51, 0x3A, 0x73, 0xBE, 0x52, 0x6E, 0xA8, 0x53, 0x51, 0x69, 0x59, 0x68, 0x91, 
   0x47, 0x90, 0xA8, 0x42, 0x5B, 0x7B, 0x53, 0x2D, 0x92, 0x43, 0x62, 0x9E, 0x6A, 0xA1, 0xA9, 0x69, 
   0x57, 0x80, 0x2A, 0x4A, 0x8B, 0x40, 0x87, 0xC9, 0x5C, 0x6A, 0x93, 0x62, 0x35, 0x3D, 0x34, 0x4C, 
   0x40, 0x29, 0x86, 0xEF, 0x63, 0x75, 0xFF, 0x6F, 0x35, 0x6B, 0x51, 0x35, 0x6E, 0x28, 0x7A, 0x84, 
   0x28, 0x6F, 0x73, 0x51, 0x3D, 0x9C, 0x80, 0x5A, 0xB3, 0x6F, 0x83, 0x95, 0x3F, 0x98, 0x77, 0x2B, 
   0x2F, 0x65, 0x2A, 0x17, 0x88, 0x2C, 0x6D, 0xAB, 0x67, 0x9B, 0x9B, 0x63, 0x34, 0x5D, 0x4C, 0x3F, 
   0x9E, 0x35, 0x57, 0xC7, 0x41, 0x64, 0xAA, 0x6F, 0x82, 0x6F, 0x58, 0x55, 0x5D, 0x35, 0x55, 0x9D, 
   0x50, 0x77, 0xC0, 0x4A, 0x70, 0xA8, 0x33, 0x4C, 0x62, 0x34, 0x3F, 0x4C, 0x6E, 0x56, 0xB5, 0x47, 
   0x57, 0xC8, 0x31, 0x3D, 0x9B, 0x70, 0x7C, 0xAB, 0x59, 0x87, 0x97, 0x30, 0x3D, 0x41, 0x51, 0x53, 
   0x9C, 0x61, 0x80, 0xB4, 0x32, 0x5E, 0x8C, 0x26, 0x47, 0xA8, 0x4E, 0x58, 0x90, 0x61, 0x7A, 0x78, 
   0x4B, 0x68, 0x94, 0x4B, 0x33, 0x90, 0x3A, 0x24, 0x8B, 0x4C, 0x82, 0x9D, 0x63, 0xBC, 0xA8, 0x57, 
   0x6F, 0x7A, 0x44, 0x17, 0x8A, 0x1C, 0x22, 0x90, 0x3F, 0x63, 0x85, 0x79, 0xBB, 0xA7, 0x5C, 0x7B, 
   0x9B, 0x1D, 0x24, 0x67, 0x3F, 0x2F, 0x84, 0x67, 0x85, 0xA7, 0x61, 0x6A, 0xB7, 0x11, 0x3D, 0x61, 
   0x2E, 0x4A, 0x45, 0x86, 0x8A, 0xBA, 0x75, 0xA7, 0xFF, 0x24, 0x66, 0x96, 0x45, 0x2A, 0x48, 0x4C, 
   0x2F, 0x35, 0x4D, 0x5E, 0xA3, 0x7A, 0x92, 0xC7, 0x56, 0x8C, 0xB4, 0x20, 0x34, 0x5C, 0x0F, 0x22, 
   0x49, 0x55, 0x67, 0x7E, 0x6E, 0x69, 0xA8, 0x4D, 0x5A, 0x9E, 0x58, 0x89, 0x9D, 0x41, 0x83, 0x74, 
   0x4C, 0x69, 0xA4, 0x4C, 0x22, 0x96, 0x57, 0x38, 0x61, 0x3A, 0x6C, 0x2E, 0x4C, 0x52, 0x82, 0x58, 
   0x6A, 0xD6, 0x58, 0x6B, 0xE1, 0x36, 0x55, 0x4A, 0x63, 0x92, 0x5E, 0x7D, 0x69, 0xC9, 0x26, 0x1D, 
   0x50, 0x00, 0x2F, 0x35, 0x44, 0x5A, 0x9F, 0x87, 0x96, 0xCA, 0x6C, 0x8C, 0x9D, 0x55, 0x5E, 0x6E, 
   0x5A, 0x7E, 0x94, 0x31, 0x33, 0x6A, 0x37, 0x2D, 0x3D, 0x6A, 0x84, 0x8A, 0x65, 0x90, 0xD5, 0x42, 
   0x3A, 0xA7, 0x30, 0x67, 0x72, 0x47, 0x84, 0x70, 0x64, 0x62, 0x75, 0x31, 0x3A, 0x55, 0x2D, 0x37, 
   0x81, 0x61, 0x8A, 0xCE, 0x9A, 0xDA, 0xFB, 0x64, 0x9C, 0xA5, 0x0F, 0x00, 0x1C, 0x00, 0x00, 0x09, 
   0x1B, 0x3B, 0xA7, 0x87, 0xB8, 0xF0, 0xA1, 0xCC, 0x97, 0x67, 0x5D, 0x8B, 0x41, 0x41, 0xCC, 0x58, 
   0x6A, 0x9E, 0x11, 0x23, 0x1C, 0x0B, 0x12, 0x22, 0x3B, 0x75, 0xA3, 0x6C, 0x83, 0xEA, 0x5D, 0x4B, 
   0x5C, 0x47, 0x30, 0x57, 0x6F, 0x7B, 0xB8, 0x62, 0xBE, 0xB8, 0x27, 0x43, 0x61, 0x37, 0x00, 0x54, 
   0x4F, 0x67, 0x7C, 0x71, 0x89, 0xAA, 0x48, 0x29, 0x71, 0x00, 0x0E, 0x55, 0x3E, 0x95, 0x7E, 0x90, 
   0xA3, 0xAE, 0x63, 0x63, 0xBF, 0x4F, 0x39, 0x72, 0x2A, 0x48, 0x54, 0x23, 0x5A, 0x91, 0x50, 0x7C, 
   0x81, 0x3A, 0x53, 0x5A, 0x40, 0x26, 0x9B, 0x53, 0x77, 0xA8, 0x3E, 0x83, 0xA1, 0x82, 0x5F, 0x71, 
   0x63, 0x46, 0x6F, 0x17, 0x45, 0x7A, 0x32, 0x57, 0x91, 0x3E, 0x5D, 0x8C, 0x24, 0x58, 0x7A, 0x59, 
   0x36, 0x74, 0x55, 0x64, 0x63, 0x5A, 0x6A, 0x9D, 0x49, 0x48, 0x98, 0x32, 0x48, 0x75, 0x54, 0x71, 
   0x6E, 0x59, 0x66, 0x74, 0x4C, 0x65, 0x80, 0x39, 0x5D, 0x97, 0x21, 0x39, 0x85, 0x11, 0x34, 0x52, 
   0x3D, 0x21, 0x64, 0xB6, 0xDE, 0xDD, 0x2D, 0x2D, 0x7F, 0x17, 0x07, 0x69, 0x68, 0xA8, 0xA4, 0x75, 
   0xA3, 0xC2, 0x2C, 0x3C, 0xB2, 0x59, 0x36, 0x89, 0x6F, 0x8B, 0x72, 0x46, 0x8B, 0xC2, 0x56, 0x4C, 
   0xE9, 0x43, 0x45, 0x6E, 0x1B, 0x72, 0x4A, 0x3E, 0x61, 0xA6, 0x62, 0x44, 0xD0, 0x68, 0x5B, 0x97, 
   0x4C, 0x73, 0x79, 0x40, 0x7F, 0xB0, 0x50, 0x9A, 0x97, 0x4B, 0x15, 0x30, 0x50, 0x32, 0x77, 0x56, 
   0xB5, 0xFF, 0x44, 0x70, 0xC3, 0x44, 0x25, 0x05, 0x56, 0x4C, 0x7D, 0x50, 0x7B, 0xEB, 0x4B, 0x60, 
   0x98, 0x40, 0x39, 0x6B, 0x4C, 0x73, 0xBB, 0x79, 0x95, 0xBB, 0x44, 0x39, 0x97, 0x2C, 0x3E, 0x7E, 
   0x54, 0x82, 0x6C, 0x33, 0x4F, 0xA1, 0x4B, 0x70, 0xCF, 0x73, 0x6E, 0x6E, 0x4C, 0x0E, 0x74, 0x35, 
   0x4E, 0xC3, 0x51, 0x95, 0x74, 0x30, 0x59, 0x64, 0x4E, 0x5A, 0xC7, 0x81, 0x93, 0xB7, 0x59, 0x80, 
   0x90, 0x2F, 0x40, 0x90, 0x3F, 0x4F, 0xC8, 0x4F, 0x6B, 0x93, 0x49, 0x4E, 0x6F, 0x37, 0x59, 0x97, 
   0x28, 0x4E, 0x71, 0x4D, 0x45, 0xAC, 0x98, 0x92, 0xCA, 0x53, 0x9E, 0xA7, 0x19, 0x37, 0x83, 0x2B, 
   0x2C, 0x6D, 0x7C, 0x8E, 0xA2, 0x60, 0x8B, 0xD1, 0x38, 0x79, 0xB5, 0x4E, 0x55, 0x8B, 0x5E, 0x49, 
   0x74, 0x46, 0x7D, 0xBF, 0x2F, 0x6C, 0xCA, 0x47, 0x72, 0x5D, 0x71, 0x55, 0x85, 0x50, 0x61, 0xA3, 
   0x45, 0x8A, 0xA5, 0x61, 0x68, 0xBC, 0x5C, 0x68, 0x83, 0x4B, 0x68, 0x84, 0x47, 0x73, 0x9D, 0x7A, 
   0x72, 0xD7, 0x62, 0x44, 0xC6, 0x2E, 0x50, 0x7A, 0x54, 0x8F, 0xAC, 0x65, 0x74, 0xAB, 0x21, 0x52, 
   0x93, 0x5B, 0x74, 0x8C, 0x68, 0x6E, 0x9D, 0x4C, 0x58, 0xA2, 0x5E, 0x7B, 0xB3, 0x7F, 0x97, 0xA0, 
   0x2E, 0x5C, 0x87, 0x17, 0x38, 0xA7, 0x83, 0x70, 0x78, 0x73, 0x65, 0x77, 0x2E, 0x54, 0xAB, 0x4F, 
   0x71, 0x8A, 0x39, 0x66, 0xB7, 0x4C, 0x60, 0x8E, 0x70, 0x72, 0x67, 0x70, 0x77, 0xB7, 0x6D, 0x65, 
   0xD2, 0x3C, 0x73, 0x69, 0x23, 0x55, 0x57, 0x40, 0x27, 0x91, 0x58, 0x56, 0xBA, 0x5E, 0xAC, 0xA9, 
   0x5E, 0x5C, 0x74, 0x4D, 0x2D, 0x90, 0x2B, 0x55, 0x7F, 0x48, 0x62, 0x9D, 0x7C, 0x6F, 0x9E, 0x59, 
   0x8B, 0x9E, 0x35, 0x7E, 0x97, 0x34, 0x43, 0xB2, 0x5B, 0x4C, 0x77, 0x3F, 0x51, 0x22, 0x29, 0x3B, 
   0xA2, 0x5D, 0x6A, 0xFF, 0x74, 0x70, 0x8C, 0x4C, 0x70, 0x62, 0x34, 0x6A, 0x78, 0x39, 0x47, 0x90, 
   0x51, 0x3C, 0xA8, 0x64, 0x70, 0xA8, 0x64, 0x77, 0x8A, 0x57, 0x76, 0x94, 0x43, 0x57, 0x88, 0x14, 
   0x45, 0x88, 0x1B, 0x3F, 0x8E, 0x7D, 0x8A, 0x99, 0x62, 0x68, 0x83, 0x34, 0x3F, 0x73, 0x3F, 0x4B, 
   0x9D, 0x4B, 0x7A, 0xC0, 0x4C, 0x76, 0x71, 0x52, 0x55, 0x93, 0x4D, 0x61, 0xAF, 0x4D, 0x6D, 0x71, 
   0x63, 0x72, 0x9E, 0x50, 0x65, 0xB4, 0x43, 0x3C, 0x7F, 0x27, 0x5D, 0x6E, 0x2E, 0x8A, 0x80, 0x91, 
   0x1E, 0xA4, 0x4E, 0x53, 0xAB, 0x2C, 0x93, 0x94, 0x65, 0x61, 0x93, 0x70, 0x5A, 0x9D, 0x57, 0x75, 
   0x7F, 0x2C, 0x4B, 0x9B, 0x26, 0x2F, 0x7E, 0x49, 0x47, 0x7F, 0x56, 0xA3, 0xB8, 0x57, 0x64, 0x79, 
   0x57, 0x4C, 0x6D, 0x3A, 0x5D, 0x90, 0x57, 0x47, 0xA8, 0x57, 0x64, 0xA8, 0x3A, 0x7B, 0x7A, 0x40, 
   0x63, 0x85, 0x67, 0x3A, 0x9C, 0x4A, 0x3F, 0x9C, 0x16, 0x52, 0x8A, 0x3F, 0x7B, 0x90, 0x79, 0x70, 
   0x85, 0x51, 0x53, 0x96, 0x23, 0x4C, 0xA1, 0x5B, 0x5D, 0xA0, 0x55, 0x40, 0x83, 0x2C, 0x4D, 0x7C, 
   0x0B, 0x61, 0x6C, 0x63, 0x85, 0x7F, 0x8C, 0x85, 0xD7, 0x64, 0x6D, 0xAF, 0x08, 0x3E, 0x6F, 0x46, 
   0x54, 0x71, 0x85, 0x81, 0x91, 0x56, 0x69, 0x8B, 0x1B, 0x3F, 0x7F, 0x20, 0x55, 0x68, 0x4F, 0x5C, 
   0x90, 0x73, 0x52, 0x9C, 0x41, 0x48, 0x97, 0x46, 0x71, 0x80, 0x41, 0x8F, 0x80, 0x63, 0x82, 0xA2, 
   0x41, 0x30, 0x8A, 0x51, 0x45, 0xA9, 0x3A, 0x67, 0x5C, 0x35, 0x5C, 0x29, 0x5D, 0x4B, 0x87, 0x52, 
   0x58, 0xC9, 0x36, 0x65, 0xAF, 0x68, 0x82, 0xA7, 0x5B, 0x59, 0x87, 0x20, 0x69, 0x4B, 0x14, 0x4B, 
   0x34, 0x43, 0x1E, 0x92, 0x46, 0x6B, 0xAC, 0x4F, 0x74, 0x97, 0x6C, 0x93, 0x9D, 0x60, 0x8C, 0xB9, 
   0x1B, 0x3A, 0x78, 0x48, 0x38, 0x4F, 0x5E, 0x6C, 0x88, 0x2B, 0x6D, 0xA0, 0x37, 0x4C, 0x7F, 0x7C, 
   0x8A, 0xBD, 0x7B, 0x6D, 0x9A, 0x13, 0x33, 0x54, 0x00, 0x39, 0x5F, 0x6C, 0x5E, 0x73, 0x9C, 0x7E, 
   0x7D, 0x47, 0x8B, 0xE1, 0x5C, 0x95, 0xFF, 0x96, 0x96, 0x6B, 0x0F, 0x47, 0x0A, 0x00, 0x00, 0x37, 
   0x27, 0x28, 0xA1, 0x9E, 0x8E, 0xAB, 0x9A, 0xBF, 0x9B, 0x48, 0x8A, 0xA5, 0x3F, 0x2B, 0x91, 0x2B, 
   0x49, 0x65, 0x57, 0x63, 0x74, 0x19, 0x23, 0x68, 0x26, 0x30, 0x53, 0x78, 0x82, 0x9A, 0x7E, 0x7E, 
   0xAC, 0x17, 0x3F, 0x79, 0x2E, 0x40, 0x67, 0x73, 0x86, 0x90, 0x6D, 0xA2, 0x9C, 0x16, 0x4F, 0x95, 
   0x43, 0x0C, 0x78, 0x60, 0x2D, 0x66, 0x54, 0x79, 0x9F, 0x26, 0x4E, 0x84, 0x27, 0x45, 0x73, 0x67, 
   0x80, 0x9B, 0x68, 0x97, 0x57, 0x40, 0x46, 0x74, 0x65, 0x39, 0xEC, 0x6D, 0x87, 0xAA, 0x00, 0x4D, 
   0x2F, 0x00, 0x1F, 0x12, 0x75, 0x59, 0xB5, 0x99, 0x6C, 0xDA, 0x3D, 0x73, 0x7F, 0x00, 0x77, 0x6C, 
   0x5E, 0x59, 0x81, 0x90, 0x35, 0x75, 0x33, 0x4B, 0x75, 0x00, 0x57, 0x86, 0x45, 0x58, 0x91, 0x81, 
   0x64, 0x63, 0x38, 0x4E, 0x63, 0x4F, 0x5A, 0x8C, 0x66, 0x66, 0x7B, 0x60, 0x5B, 0x98, 0x2B, 0x71, 
   0x91, 0x47, 0x53, 0x6E, 0x57, 0x47, 0x79, 0x4B, 0x74, 0x80, 0x2F, 0x4C, 0x97, 0x35, 0x1F, 0x80, 
   0x42, 0x5A, 0x53, 0x6B, 0xA0, 0xB3, 0x2D, 0x6A, 0x91, 0x12, 0x6A, 0x81, 0x69, 0x65, 0x9F, 0x8D, 
   0x75, 0xBD, 0x59, 0x58, 0xB1, 0x23, 0x4B, 0x7C, 0x28, 0x5B, 0x81, 0x56, 0x67, 0xA8, 0x4C, 0x68, 
   0x9D, 0x63, 0x64, 0x6B, 0x50, 0x7B, 0xBB, 0x28, 0x86, 0xC6, 0x3F, 0x63, 0x6A, 0x5C, 0x40, 0x90, 
   0x6E, 0x72, 0xDE, 0x3A, 0x72, 0x76, 0x2F, 0x35, 0x43, 0x7F, 0x95, 0xAB, 0x57, 0x88, 0xDF, 0x22, 
   0x2B, 0x89, 0x38, 0x4B, 0x7B, 0x5A, 0x7E, 0x7F, 0x55, 0x34, 0x75, 0x28, 0x47, 0x8F, 0x40, 0x50, 
   0xB0, 0x7A, 0xA3, 0xCE, 0x68, 0xC5, 0xCD, 0x2E, 0x35, 0x81, 0x33, 0x16, 0x62, 0x4A, 0x77, 0x9B, 
   0x5B, 0x88, 0xC4, 0x55, 0x76, 0xA6, 0x2C, 0x3B, 0x60, 0x16, 0x1E, 0x88, 0x51, 0x6B, 0x7F, 0x5F, 
   0x69, 0xA9, 0x66, 0x82, 0xEE, 0x59, 0xA9, 0x8D, 0x2A, 0x45, 0x5E, 0x24, 0x00, 0x80, 0x86, 0x7A, 
   0xB4, 0x96, 0xEC, 0xC0, 0x12, 0x44, 0x77, 0x1C, 0x00, 0x88, 0x71, 0x8F, 0xCD, 0x5B, 0xEB, 0xC2, 
   0x34, 0x38, 0x9A, 0x3A, 0x00, 0x61, 0x47, 0x4B, 0xA0, 0x54, 0xB5, 0xDA, 0x7D, 0xA4, 0x90, 0x5F, 
   0x31, 0x88, 0x2B, 0x26, 0x5B, 0x52, 0xAB, 0xA2, 0x69, 0x9A, 0xFF, 0x2B, 0x27, 0xA9, 0x47, 0x65, 
   0x62, 0x64, 0x71, 0x83, 0x63, 0x66, 0xA6, 0x1E, 0x5B, 0xA7, 0x00, 0x60, 0x6A, 0x85, 0x50, 0xC7, 
   0xD6, 0x73, 0xDF, 0x3A, 0x6D, 0x84, 0x00, 0x68, 0x95, 0x49, 0x78, 0x9B, 0x9B, 0x66, 0xB2, 0x5D, 
   0x38, 0x85, 0x1D, 0x5B, 0xA3, 0x4B, 0x95, 0xDC, 0x74, 0x5D, 0xA7, 0x6D, 0x4C, 0x67, 0x32, 0x85, 
   0xA4, 0x3C, 0x90, 0xE7, 0x58, 0x61, 0x7F, 0x1A, 0x33, 0x88, 0x3F, 0x68, 0x8D, 0x8C, 0x97, 0x70, 
   0x91, 0x96, 0xA9, 0x3F, 0x49, 0xDC, 0x05, 0x37, 0x84, 0x6C, 0x65, 0x4F, 0x78, 0x7D, 0x82, 0x2E, 
   0x72, 0xD3, 0x3E, 0x76, 0xAC, 0x56, 0x31, 0x82, 0x57, 0x5F, 0x81, 0x69, 0x8E, 0x77, 0x5D, 0x8D, 
   0xD9, 0x66, 0x57, 0xC6, 0x3B, 0x32, 0x42, 0x29, 0x42, 0x64, 0x45, 0x82, 0xDC, 0x46, 0x61, 0x9E, 
   0x58, 0x56, 0x7A, 0x4D, 0x72, 0x7E, 0x37, 0x67, 0x84, 0x70, 0x62, 0x85, 0x37, 0x4C, 0x97, 0x47, 
   0x7F, 0xC0, 0x5D, 0x7E, 0xB3, 0x4B, 0x60, 0x45, 0x33, 0x3C, 0x41, 0x1D, 0x57, 0xF3, 0x63, 0x6E, 
   0xF3, 0x8B, 0x4D, 0x57, 0x35, 0x4E, 0x4E, 0x39, 0x93, 0xA4, 0x34, 0x87, 0x89, 0x4C, 0x2B, 0x96, 
   0x64, 0x48, 0xBF, 0x69, 0x8D, 0xA1, 0x40, 0x81, 0x78, 0x33, 0x4B, 0x6C, 0x3E, 0x0C, 0x94, 0x4A, 
   0x6D, 0xC2, 0x6D, 0xA1, 0x99, 0x62, 0x34, 0x42, 0x3F, 0x28, 0x71, 0x3E, 0x73, 0xD9, 0x38, 0x6E, 
   0x95, 0x5B, 0x63, 0x46, 0x57, 0x4D, 0xA9, 0x3B, 0x5A, 0xAC, 0x42, 0x67, 0xB2, 0x75, 0x7E, 0xAB, 
   0x4D, 0x6D, 0x65, 0x4B, 0x4A, 0x75, 0x2D, 0x70, 0xA9, 0x43, 0x63, 0xB4, 0x33, 0x35, 0x6F, 0x35, 
   0x6E, 0x7A, 0x86, 0x6F, 0xA2, 0x48, 0x43, 0x98, 0x43, 0x5B, 0x99, 0x86, 0xAA, 0xD1, 0x45, 0x58, 
   0x85, 0x05, 0x0D, 0x4F, 0x49, 0x62, 0x77, 0x5B, 0x85, 0xA0, 0x5C, 0x53, 0xA8, 0x4C, 0x5E, 0xA8, 
   0x4C, 0x48, 0x7F, 0x51, 0x65, 0x8A, 0x5C, 0x98, 0xA7, 0x45, 0x52, 0x85, 0x4B, 0x18, 0x85, 0x45, 
   0x57, 0x9C, 0x51, 0x81, 0x91, 0x5C, 0x81, 0x9C, 0x61, 0x57, 0x90, 0x11, 0x19, 0x6E, 0x29, 0x64, 
   0x8B, 0x91, 0x99, 0xD0, 0x7F, 0x92, 0x9C, 0x1D, 0x30, 0x6C, 0x21, 0x24, 0x65, 0x66, 0x7B, 0x9F, 
   0x78, 0x83, 0xB1, 0x0C, 0x66, 0x71, 0x2F, 0x28, 0x23, 0x75, 0x62, 0xBB, 0x65, 0x91, 0xFF, 0x52, 
   0x8A, 0xCC, 0x4A, 0x59, 0x42, 0x26, 0x33, 0x3E, 0x20, 0x21, 0x67, 0x61, 0x55, 0xA8, 0x68, 0x80, 
   0xD2, 0x58, 0x60, 0x92, 0x46, 0x5A, 0x74, 0x4C, 0x6B, 0x6D, 0x4C, 0x64, 0x79, 0x41, 0x3C, 0xC4, 
   0x63, 0x5E, 0xA6, 0x3B, 0x75, 0x50, 0x41, 0x69, 0x82, 0x5D, 0x4B, 0xB5, 0x4D, 0x46, 0x70, 0x47, 
   0x58, 0x43, 0x5D, 0x7B, 0x8F, 0x72, 0x6A, 0xFF, 0x37, 0x47, 0x8E, 0x09, 0x3C, 0x1A, 0x4A, 0x81, 
   0x81, 0x74, 0x70, 0xD3, 0x5F, 0x38, 0x84, 0x4F, 0x56, 0x56, 0x4F, 0x7A, 0xA1, 0x44, 0x80, 0xA2, 
   0x55, 0x4D, 0x80, 0x77, 0x51, 0x90, 0x43, 0x78, 0xAC, 0x2B, 0x34, 0x7D, 0x42, 0x62, 0x65, 0x70, 
   0x9B, 0x66, 0x59, 0x5B, 0xB7, 0x25, 0x28, 0x9B, 0x16, 0x3B, 0x58, 0x74, 0x83, 0x71, 0x98, 0xAD, 
   0xDF, 0x74, 0x89, 0xBB, 0x4E, 0x1F, 0x56, 0x1E, 0x34, 0x5F, 0x4B, 0x89, 0x9E, 0x68, 0xA5, 0xAE, 
   0x46, 0x2A, 0x4D, 0x35, 0x0C, 0x4D, 0x5C, 0x4C, 0xD0, 0x56, 0x93, 0xAD, 0x3E, 0x9E, 0x3F, 0x2C, 
   0x30, 0x60, 0x44, 0x44, 0xC1, 0x72, 0x75, 0xAA, 0x5B, 0x42, 0x54, 0x38, 0x31, 0x38, 0x49, 0x71, 
   0xC2, 0x4E, 0x7D, 0xBD, 0x38, 0x2E, 0x3F, 0x50, 0x35, 0x4B, 0x6E, 0x92, 0xC4, 0x62, 0xDB, 0xAE, 
   0x38, 0x26, 0x85, 0x15, 0x00, 0x50, 0x38, 0x58, 0x62, 0x83, 0xAA, 0xBE, 0x4F, 0x39, 0xAC, 0x11, 
   0x39, 0x3F, 0x50, 0x5D, 0x50, 0x7E, 0x97, 0xB9, 0x6C, 0x8A, 0xC5, 0x2A, 0x26, 0x72, 0x0C, 0x2A, 
   0x4C, 0x3A, 0x58, 0x7E, 0x5E, 0x5F, 0x6E, 0x5F, 0x60, 0x6B, 0x53, 0x55, 0xBC, 0x2A, 0x5B, 0x8F, 
   0x30, 0x71, 0x77, 0x69, 0x64, 0x81, 0x52, 0x3A, 0x6A, 0x3A, 0x40, 0x86, 0x2F, 0x5D, 0x76, 0x3C, 
   0x70, 0x8D, 0x5F, 0x5F, 0x9D, 0x3E, 0x44, 0x6F, 0x4F, 0x6C, 0x6F, 0x65, 0x94, 0x98, 0x3C, 0x3D, 
   0x81, 0x2F, 0x3B, 0x8B, 0x2F, 0x51, 0x5D, 0x3C, 0x4D, 0x79, 0x60, 0x5A, 0x6F, 0x6C, 0x77, 0x92, 
   0x6A, 0x88, 0xBE, 0x00, 0x16, 0x19, 0x53, 0x90, 0x9F, 0x5E, 0xB1, 0x9A, 0x1A, 0x38, 0xB6, 0x5E, 
   0x30, 0x8E, 0x7F, 0xA1, 0x82, 0x44, 0x78, 0xBA, 0x1B, 0x1B, 0xB8, 0x33, 0x2C, 0x4A, 0x58, 0x6E, 
   0x47, 0x7C, 0xA3, 0xEF, 0x59, 0x4F, 0xEC, 0x57, 0x54, 0x84, 0x28, 0x81, 0x8C, 0x33, 0x85, 0xA0, 
   0x50, 0x38, 0x76, 0x4C, 0x16, 0x54, 0x52, 0x68, 0x84, 0x52, 0xBF, 0xF2, 0x4C, 0x6D, 0xD9, 0x4B, 
   0x35, 0x36, 0x4F, 0x22, 0x45, 0x32, 0x60, 0xD4, 0x32, 0x67, 0x8B, 0x4A, 0x0F, 0x2E, 0x57, 0x73, 
   0xCB, 0x68, 0xCB, 0xFF, 0x45, 0x53, 0x88, 0x3F, 0x46, 0x75, 0x39, 0x89, 0x6E, 0x62, 0x61, 0x97, 
   0x5C, 0x54, 0xDB, 0x4A, 0x6E, 0xA0, 0x37, 0x29, 0x43, 0x21, 0x26, 0x66, 0x3B, 0x74, 0xB2, 0x89, 
   0xB0, 0x93, 0x84, 0x8E, 0xB1, 0x5A, 0x6F, 0xE2, 0x35, 0x38, 0x74, 0x22, 0x32, 0x60, 0x3F, 0x71, 
   0xAA, 0x57, 0x84, 0x8A, 0x73, 0x57, 0x81, 0x34, 0x57, 0x9F, 0x1D, 0x6E, 0xB2, 0x62, 0x73, 0xA1, 
   0x73, 0x72, 0xB7, 0x40, 0x4A, 0x88, 0x02, 0x28, 0x4F, 0x54, 0x4C, 0xA0, 0x9A, 0x9E, 0xE0, 0x6B, 
   0x8D, 0x95, 0x13, 0x42, 0x6C, 0x1D, 0x30, 0x83, 0x5C, 0x6A, 0x9C, 0x5D, 0x98, 0xE1, 0x42, 0x5A, 
   0xBD, 0x64, 0x48, 0x49, 0x58, 0x5F, 0x60, 0x14, 0x77, 0xB3, 0x32, 0x67, 0xDD, 0x8B, 0x67, 0xA0, 
   0x81, 0x61, 0x95, 0x4B, 0x5C, 0xA1, 0x32, 0x83, 0xA2, 0x38, 0x7D, 0xCF, 0x6B, 0x3D, 0x8F, 0x39, 
   0x54, 0x61, 0x2F, 0x89, 0x9B, 0x75, 0x68, 0xD0, 0x64, 0x57, 0xA8, 0x63, 0x85, 0xA1, 0x7D, 0x79, 
   0xAA, 0x46, 0x67, 0x8B, 0x00, 0x49, 0xC1, 0x34, 0x5F, 0x86, 0x65, 0x54, 0x63, 0x57, 0x6C, 0x9C, 
   0x86, 0x8A, 0xAE, 0x74, 0x83, 0x86, 0x1C, 0x49, 0xBE, 0x1C, 0x4F, 0x95, 0x78, 0x7D, 0x6B, 0x62, 
   0x7D, 0x93, 0x3A, 0x54, 0xAA, 0x60, 0x5E, 0x93, 0x32, 0x3C, 0x8C, 0x44, 0x8C, 0x92, 0x67, 0x97, 
   0x71, 0x61, 0x4C, 0xA5, 0x5A, 0x44, 0xE4, 0x3B, 0x76, 0x8D, 0x29, 0x53, 0x53, 0x56, 0x2B, 0xA8, 
   0x3A, 0x77, 0xAD, 0x47, 0x84, 0x8A, 0x87, 0x6E, 0x84, 0x48, 0x51, 0x84, 0x30, 0x6D, 0x90, 0x52, 
   0x61, 0xAC, 0x74, 0x4A, 0x6E, 0x57, 0x77, 0x59, 0x07, 0x6B, 0xC7, 0x57, 0x48, 0xFF, 0x7F, 0x53, 
   0x96, 0x51, 0x64, 0x42, 0x22, 0x5F, 0x57, 0x3F, 0x59, 0x7B, 0x51, 0x43, 0xB1, 0x64, 0x77, 0xAC, 
   0x64, 0x87, 0x95, 0x57, 0x5E, 0x78, 0x38, 0x5C, 0x8E, 0x27, 0x2E, 0x88, 0x39, 0x61, 0x8F, 0x6E, 
   0x7F, 0xB1, 0x6E, 0x5D, 0x77, 0x2E, 0x56, 0x65, 0x38, 0x51, 0xB0, 0x43, 0x5D, 0x9F, 0x49, 0x79, 
   0x71, 0x38, 0x3B, 0x6D, 0x4B, 0x41, 0x87, 0x58, 0x77, 0xC8, 0x59, 0x89, 0xB9, 0x59, 0x56, 0xA1, 
   0x58, 0x56, 0x7D, 0x2F, 0x6D, 0x71, 0x5C, 0x88, 0xAF, 0x4B, 0x3D, 0xAF, 0x4A, 0x36, 0xA2, 0x28, 
   0x7A, 0x67, 0x35, 0x53, 0x50, 0x8B, 0x4E, 0xA1, 0x6F, 0x93, 0xCB, 0x13, 0x65, 0xA3, 0x45, 0x2B, 
   0x9C, 0x62, 0x75, 0x78, 0x45, 0x75, 0x77, 0x4B, 0x57, 0x88, 0x3A, 0x46, 0x8A, 0x4C, 0x3C, 0xB4, 
   0x46, 0x77, 0xB4, 0x62, 0x94, 0x7F, 0x34, 0x70, 0x67, 0x39, 0x4B, 0x89, 0x50, 0x28, 0xA7, 0x45, 
   0x47, 0x91, 0x51, 0x99, 0x9C, 0x4C, 0x93, 0x85, 0x57, 0x31, 0x7F, 0x4B, 0x30, 0x91, 0x29, 0x53, 
   0x9D, 0x51, 0x76, 0xA2, 0x73, 0x6B, 0x9B, 0x4B, 0x59, 0x6C, 0x1D, 0x42, 0x6C, 0x56, 0x76, 0xA6, 
   0x62, 0x76, 0xC8, 0x56, 0x3D, 0x71, 0x0C, 0x43, 0x3F, 0x47, 0x51, 0x87, 0xBA, 0xAE, 0xFF, 0x7A, 
   0xA8, 0xF0, 0x00, 0x49, 0x67, 0x0F, 0x23, 0x3B, 0x4F, 0x4F, 0x68, 0x68, 0x3A, 0xBF, 0x5D, 0x54, 
   0xB5, 0x46, 0xA6, 0x92, 0x4C, 0x9A, 0x69, 0x4C, 0x53, 0x8A, 0x51, 0x2F, 0x9A, 0x51, 0x35, 0x7E, 
   0x41, 0x81, 0x78, 0x5E, 0x82, 0x85, 0x53, 0x5F, 0xAF, 0x3C, 0x41, 0xC4, 0x3C, 0x58, 0x76, 0x69, 
   0x75, 0x46, 0x72, 0x63, 0x7F, 0x20, 0x40, 0x8D, 0x14, 0x52, 0x84, 0x4F, 0x5F, 0xB9, 0x69, 0x61, 
   0xA8, 0x4F, 0x89, 0x80, 0x66, 0x78, 0x8F, 0x5A, 0x43, 0x88, 0x21, 0x3E, 0x66, 0x49, 0x46, 0x62, 
   0x89, 0xB5, 0xB4, 0x61, 0x98, 0xC6, 0x39, 0x14, 0x8B, 0x5A, 0x67, 0x76, 0x69, 0x83, 0x69, 0x2A, 
   0x33, 0x64, 0x1A, 0x34, 0x67, 0x73, 0x5E, 0x9E, 0xA2, 0x7E, 0xC4, 0x3C, 0x9B, 0xD0, 0x40, 0x83, 
   0xD2, 0x81, 0x69, 0x54, 0x1E, 0x28, 0x02, 0x00, 0x17, 0x82, 0x54, 0x75, 0xFF, 0xD4, 0xE8, 0xB4, 
   0x88, 0x9A, 0x72, 0x00, 0x00, 0x67, 0x02, 0x00, 0x70, 0x52, 0x67, 0x76, 0x54, 0xA9, 0x82, 0x45, 
   0x99, 0x7D, 0x5E, 0x4D, 0x8A, 0x70, 0x4B, 0x96, 0x73, 0x66, 0x8A, 0x15, 0x3C, 0x7D, 0x08, 0x30, 
   0x55, 0x58, 0x6A, 0x83, 0x59, 0x6C, 0xA0, 0x16, 0x46, 0x6E, 0x45, 0x52, 0x7A, 0x90, 0x6F, 0xA2, 
   0x45, 0xA7, 0x87, 0x1D, 0x4A, 0x97, 0x56, 0x16, 0x74, 0x67, 0x6B, 0x85, 0x5B, 0x98, 0x95, 0x33, 
   0x1B, 0x5C, 0x38, 0x39, 0x90, 0x65, 0xA1, 0xB3, 0x43, 0x7F, 0x6F, 0x21, 0x44, 0x73, 0x6B, 0x2C, 
   0xB0, 0x6F, 0x65, 0x85, 0x29, 0x76, 0x50, 0x18, 0x5A, 0x50, 0x47, 0x5A, 0x75, 0x91, 0x4F, 0xC1, 
   0x35, 0x66, 0x8F, 0x00, 0x76, 0x6C, 0x6F, 0x3C, 0x8D, 0x81, 0x46, 0x6B, 0x36, 0x41, 0x7C, 0x30, 
   0x5E, 0xB0, 0x3C, 0x54, 0x87, 0x64, 0x77, 0x6A, 0x54, 0x5B, 0x75, 0x3D, 0x4F, 0x8C, 0x63, 0x70, 
   0x97, 0x24, 0x52, 0x7A, 0x13, 0x2A, 0x8B, 0x43, 0x31, 0x5E, 0x7E, 0x7E, 0x81, 0x8F, 0xB1, 0xBF, 
   0x31, 0x4F, 0x8B, 0x00, 0x09, 0x3F, 0x62, 0x68, 0xA7, 0x73, 0x6D, 0xB2, 0x65, 0x82, 0x9F, 0x23, 
   0x47, 0x76, 0x33, 0x62, 0x97, 0x60, 0x6C, 0xB8, 0x27, 0x4E, 0x83, 0x28, 0x3E, 0x4A, 0x5D, 0x62, 
   0xA2, 0x7C, 0x70, 0xB1, 0x5A, 0x7D, 0xB8, 0x5E, 0x67, 0xAC, 0x4B, 0x88, 0xBA, 0x1C, 0x7A, 0x77, 
   0x22, 0x17, 0x2D, 0x63, 0x4B, 0x9B, 0x86, 0xAC, 0xFF, 0x36, 0x63, 0xA7, 0x46, 0x61, 0x43, 0x73, 
   0x7A, 0x90, 0x5B, 0x45, 0xA0, 0x27, 0x22, 0x57, 0x27, 0x3B, 0x80, 0x61, 0x93, 0xCD, 0x6D, 0xA6, 
   0x90, 0x39, 0x29, 0x85, 0x28, 0x45, 0x91, 0x50, 0x9C, 0xA4, 0x57, 0x7A, 0xC0, 0x4C, 0x66, 0xB3, 
   0x62, 0x47, 0x73, 0x3F, 0x24, 0x77, 0x28, 0x42, 0xA5, 0x45, 0x7F, 0x9B, 0x3C, 0x82, 0x86, 0x5B, 
   0x82, 0xCB, 0x94, 0x8B, 0x8D, 0x38, 0x29, 0x86, 0x58, 0x4F, 0xE5, 0x6C, 0xB4, 0x8C, 0x00, 0x2A, 
   0x18, 0x1C, 0x00, 0x70, 0x8A, 0xA1, 0xD5, 0x74, 0xF9, 0xBC, 0x2A, 0x3B, 0x84, 0x3A, 0x00, 0x9B, 
   0x51, 0x73, 0xA7, 0x36, 0xD0, 0xB7, 0x59, 0x63, 0x9A, 0x5F, 0x06, 0x61, 0x4F, 0x35, 0x9B, 0x65, 
   0xC5, 0xD5, 0x68, 0x97, 0xC2, 0x22, 0x18, 0x70, 0x22, 0x40, 0x5F, 0x57, 0x8B, 0xB0, 0x7A, 0x81, 
   0xC8, 0x36, 0x5F, 0x94, 0x15, 0x3D, 0x56, 0x72, 0x72, 0x9C, 0x95, 0x73, 0xDC, 0x28, 0x73, 0x88, 
   0x1D, 0x5C, 0x6C, 0x5D, 0x77, 0xB8, 0xA1, 0x5F, 0xE0, 0x4F, 0x48, 0x96, 0x00, 0x54, 0x8F, 0x38, 
   0x7D, 0xB7, 0x8B, 0x67, 0xA0, 0x6B, 0x56, 0x62, 0x42, 0x79, 0xD5, 0x68, 0xA1, 0xF1, 0x54, 0x55, 
   0x98, 0x41, 0x32, 0x78, 0x1D, 0x71, 0x81, 0x3F, 0x81, 0x80, 0x4C, 0x52, 0xA2, 0x43, 0x36, 0xB2, 
   0x51, 0x5F, 0x84, 0x63, 0x78, 0x79, 0x6E, 0x84, 0xA8, 0x2F, 0x67, 0xDB, 0x0D, 0x4F, 0x94, 0x96, 
   0x5A, 0x42, 0x7F, 0x6B, 0x74, 0x27, 0x71, 0xB9, 0x36, 0x7A, 0x92, 0x36, 0x39, 0x8B, 0x43, 0x39, 
   0x64, 0x72, 0x8A, 0x82, 0x61, 0xA7, 0xCE, 0x71, 0x4F, 0xC7, 0x46, 0x25, 0x70, 0x1D, 0x52, 0x63, 
   0x3F, 0x5F, 0xA7, 0x63, 0x4F, 0x9C, 0x53, 0x79, 0x8A, 0x59, 0x95, 0x94, 0x4D, 0x66, 0x99, 0x4C, 
   0x32, 0x55, 0x3A, 0x59, 0x52, 0x36, 0x55, 0xF0, 0x7B, 0x88, 0xFF, 0x6F, 0x77, 0x64, 0x29, 0x49, 
   0x43, 0x2D, 0x76, 0xAE, 0x4A, 0x6A, 0x81, 0x40, 0x26, 0x76, 0x58, 0x5A, 0xA4, 0x6F, 0x9F, 0x99, 
   0x57, 0x81, 0x7C, 0x33, 0x2E, 0x7C, 0x27, 0x10, 0x83, 0x3F, 0x72, 0x9A, 0x6E, 0x84, 0xA5, 0x63, 
   0x4B, 0x66, 0x3A, 0x3A, 0x7D, 0x5B, 0x5D, 0xD8, 0x3F, 0x85, 0x8E, 0x4F, 0x52, 0x59, 0x43, 0x40, 
   0x65, 0x27, 0x57, 0xB7, 0x3F, 0x53, 0x92, 0x68, 0x6B, 0x82, 0x6F, 0x7C, 0xB7, 0x36, 0x38, 0x90, 
   0x3B, 0x61, 0xB2, 0x52, 0x89, 0xB7, 0x5E, 0x45, 0x60, 0x58, 0x56, 0x87, 0x40, 0x99, 0xB9, 0x44, 
   0x3D, 0x85, 0x33, 0x36, 0x83, 0x4A, 0x91, 0x7C, 0x61, 0x6F, 0x8E, 0x23, 0x26, 0x89, 0x41, 0x65, 
   0x96, 0x86, 0x99, 0xB8, 0x52, 0x6F, 0x8F, 0x2A, 0x29, 0x55, 0x4C, 0x46, 0x7D, 0x58, 0x64, 0x9C, 
   0x6E, 0x88, 0xB4, 0x29, 0x93, 0xA2, 0x3F, 0x31, 0x73, 0x56, 0x35, 0x72, 0x4B, 0x69, 0x9B, 0x45, 
   0x6F, 0xA7, 0x51, 0x59, 0x85, 0x4C, 0x60, 0x7A, 0x36, 0x66, 0x9D, 0x6F, 0x88, 0xAE, 0x73, 0x5F, 
   0xA8, 0x22, 0x2A, 0x79, 0x06, 0x42, 0x6D, 0x79, 0x9A, 0x9B, 0x85, 0x9A, 0xAC, 0x23, 0x42, 0x8F, 
   0x34, 0x30, 0x61, 0x62, 0x4D, 0x79, 0x57, 0x83, 0xE5, 0x40, 0x7E, 0x79, 0x4B, 0x57, 0x2F, 0x5B, 
   0x67, 0xB9, 0x34, 0x6C, 0xD7, 0x3A, 0x5F, 0x9C, 0x68, 0x36, 0x70, 0x63, 0x4D, 0x6E, 0x35, 0x65, 
   0x6E, 0x40, 0x8E, 0xA8, 0x57, 0x76, 0x9D, 0x57, 0x35, 0x90, 0x45, 0x24, 0x82, 0x45, 0x8B, 0x5A, 
   0x2A, 0x59, 0x51, 0x70, 0x6B, 0xC0, 0x66, 0x60, 0xEF, 0x44, 0x5A, 0x6B, 0x65, 0x87, 0x89, 0x79, 
   0x58, 0xA7, 0x1B, 0x4B, 0x33, 0x0E, 0x3A, 0x13, 0x37, 0x5E, 0xA1, 0x68, 0x77, 0xF5, 0x71, 0x6D, 
   0xB1, 0x60, 0x5C, 0x64, 0x54, 0x94, 0x9A, 0x3D, 0x49, 0x76, 0x54, 0x10, 0x49, 0x54, 0x56, 0x84, 
   0x32, 0x8C, 0xBA, 0x33, 0x89, 0xAF, 0x78, 0x82, 0x90, 0x7D, 0x74, 0x60, 0x30, 0x2D, 0x92, 0x00, 
   0x11, 0x6A, 0x2D, 0x5E, 0x4B, 0x91, 0x9B, 0x7E, 0x65, 0xBE, 0xFF, 0x6E, 0x6C, 0xFF, 0x65, 0x46, 
   0x40, 0x01, 0x34, 0x02, 0x23, 0x5C, 0x7A, 0x5F, 0x86, 0xA5, 0x5D, 0x65, 0x87, 0x80, 0x76, 0xCD, 
   0x82, 0x9C, 0xEC, 0x3E, 0x7A, 0x79, 0x00, 0x15, 0x00, 0x00, 0x02, 0x45, 0x36, 0x50, 0xBA, 0x7A, 
   0xA4, 0xA0, 0x82, 0x8F, 0x6F, 0x5A, 0x55, 0x81, 0x46, 0x69, 0xD1, 0x5A, 0x76, 0xB3, 0x31, 0x14, 
   0x33, 0x25, 0x00, 0x33, 0x4D, 0x8E, 0xC9, 0x60, 0xAC, 0xC4, 0x4A, 0x23, 0x4C, 0x2E, 0x12, 0x46, 
   0x5D, 0x92, 0xB5, 0x86, 0xC7, 0xC2, 0x4C, 0x58, 0x98, 0x1D, 0x10, 0x46, 0x3F, 0x37, 0x4C, 0x83, 
   0x87, 0xD5, 0x5F, 0x65, 0xA1, 0x00, 0x21, 0x4B, 0x32, 0x55, 0x79, 0x90, 0x7F, 0xA8, 0x85, 0x7F, 
   0xA7, 0x49, 0x50, 0x76, 0x18, 0x48, 0x67, 0x17, 0x42, 0x5A, 0x56, 0x59, 0x50, 0x63, 0x6A, 0x8C, 
   0x36, 0x54, 0xB6, 0x4D, 0x50, 0x9B, 0x37, 0x89, 0x67, 0x4E, 0x54, 0x7D, 0x76, 0x47, 0x88, 0x31, 
   0x42, 0x77, 0x35, 0x5F, 0x65, 0x3B, 0x88, 0x92, 0x4C, 0x5F, 0x8C, 0x47, 0x3C, 0x74, 0x3C, 0x59, 
   0x57, 0x42, 0x70, 0x80, 0x44, 0x32, 0x76, 0x67, 0x72, 0x87, 0x61, 0x89, 0xAE, 0x49, 0x44, 0x62, 
   0x3D, 0x48, 0x56, 0x42, 0x65, 0xA0, 0x63, 0x50, 0xA7, 0x74, 0x45, 0xB7, 0x7C, 0x94, 0x83, 0x28, 
   0x9D, 0xA3, 0x09, 0x12, 0xAC, 0x43, 0x38, 0x5B, 0x67, 0x7D, 0x61, 0x51, 0x84, 0xC4, 0x2F, 0x40, 
   0xBA, 0x41, 0x36, 0x70, 0x5E, 0x8D, 0x88, 0x6A, 0xB0, 0xFA, 0x4D, 0x5A, 0x98, 0x3A, 0x20, 0x35, 
   0x40, 0x7B, 0xA2, 0x5C, 0xA8, 0xD6, 0x51, 0x29, 0xBE, 0x4C, 0x49, 0x7D, 0x57, 0x76, 0x59, 0x4B, 
   0x59, 0xA8, 0x34, 0x7A, 0xB8, 0x50, 0x1A, 0x58, 0x56, 0x4E, 0x87, 0x4A, 0xBB, 0xDD, 0x3E, 0x49, 
   0x93, 0x3E, 0x20, 0x38, 0x44, 0x60, 0x84, 0x57, 0x84, 0xDD, 0x68, 0x79, 0xDD, 0x57, 0x77, 0x90, 
   0x29, 0x36, 0x55, 0x40, 0x20, 0x67, 0x4D, 0x68, 0xBE, 0x54, 0xB6, 0xA9, 0x76, 0x9F, 0x98, 0x3C, 
   0x46, 0x91, 0x0E, 0x0B, 0x9B, 0x74, 0x77, 0x78, 0x7A, 0x93, 0x9F, 0x2E, 0x5F, 0xB9, 0x32, 0x13, 
   0x41, 0x32, 0x3C, 0x64, 0x2E, 0x78, 0xB1, 0x64, 0x86, 0xAF, 0x92, 0x86, 0xAA, 0x2B, 0x46, 0x8F, 
   0x14, 0x30, 0x9B, 0x6A, 0x98, 0xA1, 0x98, 0xA3, 0xCE, 0x3C, 0x51, 0x94, 0x2A, 0x28, 0x56, 0x4C, 
   0x50, 0xC2, 0x68, 0x8A, 0xC8, 0x5C, 0x95, 0x8D, 0x34, 0x3F, 0x84, 0x3F, 0x1D, 0x4B, 0x4B, 0x7A, 
   0x87, 0x30, 0x8D, 0xE1, 0x55, 0x55, 0xCB, 0x9B, 0x61, 0x85, 0x73, 0x73, 0x68, 0x0B, 0x6D, 0xA9, 
   0x44, 0x7E, 0xC7, 0x6D, 0x76, 0xAC, 0x84, 0x20, 0x9A, 0x55, 0x4E, 0x7E, 0x21, 0x9F, 0xB1, 0x3E, 
   0x67, 0xCE, 0x69, 0x45, 0x7E, 0x76, 0x67, 0x8E, 0x80, 0x94, 0xCD, 0x3E, 0x4F, 0xAA, 0x15, 0x48, 
   0xB3, 0x53, 0x71, 0x88, 0x86, 0x88, 0x64, 0x35, 0x70, 0x9C, 0x1D, 0x4C, 0xCF, 0x45, 0x4B, 0x73, 
   0x48, 0x3B, 0x77, 0x52, 0x72, 0x9A, 0x82, 0xA7, 0xA7, 0x82, 0x7F, 0xA2, 0x41, 0x3E, 0xB1, 0x24, 
   0x38, 0x9E, 0x78, 0x77, 0x5D, 0x60, 0xA4, 0x85, 0x2B, 0x6E, 0xB8, 0x3A, 0x1B, 0x80, 0x41, 0x26, 
   0x97, 0x43, 0x83, 0xA3, 0x72, 0x90, 0x6B, 0x6C, 0x6D, 0x9F, 0x4E, 0x4E, 0xD7, 0x3A, 0x53, 0x74, 
   0x1D, 0x4D, 0x62, 0x4B, 0x3D, 0xAC, 0x4C, 0x82, 0xC9, 0x52, 0x77, 0x88, 0x7A, 0x4E, 0x5F, 0x3A, 
   0x64, 0x3F, 0x00, 0x54, 0xC0, 0x5E, 0x65, 0xFF, 0x9E, 0x4F, 0x7B, 0x4D, 0x66, 0x5A, 0x1D, 0x77, 
   0x6A, 0x33, 0x54, 0x7C, 0x4B, 0x3D, 0xC1, 0x63, 0x60, 0xA4, 0x5D, 0x8E, 0x5E, 0x45, 0x76, 0x79, 
   0x38, 0x46, 0x91, 0x2C, 0x33, 0x8E, 0x3F, 0x55, 0xB1, 0x6E, 0x61, 0x9F, 0x63, 0x73, 0x6C, 0x40, 
   0x4B, 0x78, 0x3F, 0x46, 0xAB, 0x3F, 0x6E, 0x9A, 0x72, 0x75, 0x7C, 0x50, 0x5E, 0x6B, 0x39, 0x41, 
   0x88, 0x4A, 0x6A, 0xA7, 0x4A, 0x86, 0xB3, 0x39, 0x53, 0x6F, 0x45, 0x31, 0x5F, 0x4C, 0x76, 0xB7, 
   0x4D, 0x6C, 0xB9, 0x53, 0x45, 0xA7, 0x65, 0x63, 0xAB, 0x4E, 0x9C, 0x65, 0x52, 0x51, 0x75, 0x62, 
   0x55, 0xC4, 0x54, 0x7A, 0xB6, 0x0E, 0x51, 0x63, 0x04, 0x12, 0x4B, 0xA6, 0x6F, 0x6A, 0x5E, 0xAA, 
   0xB7, 0x37, 0x60, 0xB9, 0x59, 0x3C, 0x91, 0x59, 0x4C, 0x84, 0x47, 0x4D, 0x83, 0x68, 0x7B, 0x7D, 
   0x3A, 0x64, 0x85, 0x4B, 0x3C, 0xAE, 0x4B, 0x58, 0xBF, 0x45, 0x6B, 0x73, 0x4B, 0x82, 0x72, 0x4B, 
   0x6A, 0x89, 0x51, 0x25, 0x85, 0x36, 0x2C, 0x9D, 0x64, 0x95, 0xA9, 0x64, 0xAC, 0x9D, 0x4C, 0x5A, 
   0x90, 0x39, 0x1A, 0x72, 0x28, 0x42, 0x7E, 0x40, 0x83, 0xAD, 0x7F, 0xA5, 0xE0, 0x51, 0x3D, 0x6D, 
   0x1E, 0x1A, 0x45, 0x2F, 0x59, 0xD5, 0x9B, 0x88, 0xCA, 0x60, 0x77, 0x88, 0x00, 0x42, 0x3C, 0x00, 
   0x32, 0x33, 0xA8, 0x7D, 0xF3, 0x9F, 0x85, 0xFF, 0x31, 0x6F, 0x8B, 0x2F, 0x73, 0x3C, 0x4B, 0x65, 
   0x45, 0x4B, 0x35, 0x90, 0x4B, 0x29, 0xDC, 0x50, 0x69, 0xAD, 0x34, 0x8C, 0x3E, 0x45, 0x48, 0x5B, 
   0x51, 0x58, 0xA7, 0x37, 0x37, 0x9E, 0x55, 0x66, 0x8E, 0x89, 0x8F, 0xAF, 0x7B, 0x71, 0x9B, 0x16, 
   0x3C, 0x75, 0x14, 0x46, 0x3A, 0x37, 0x3B, 0x69, 0x56, 0x64, 0xAC, 0x4D, 0x6C, 0x99, 0x5F, 0x72, 
   0xBC, 0x5F, 0x61, 0xB4, 0x21, 0x4A, 0x68, 0x38, 0x61, 0x4A, 0x82, 0x8F, 0xAC, 0x4F, 0x4B, 0xAD, 
   0x16, 0x0D, 0x79, 0x60, 0x7C, 0x7F, 0x8E, 0xCD, 0x9B, 0x49, 0x5A, 0x8F, 0x10, 0x14, 0x61, 0x3F, 
   0x48, 0x5D, 0x80, 0x84, 0x93, 0x54, 0x9C, 0xC3, 0x6F, 0x78, 0xBD, 0x77, 0x5D, 0x86, 0x2A, 0x16, 
   0x4A, 0x00, 0x39, 0x82, 0x2C, 0x7B, 0xB0, 0xBD, 0xAF, 0x73, 0x85, 0x5E, 0x5E, 0x28, 0x2F, 0xCB, 
   0x47, 0x57, 0xD5, 0x6D, 0xB1, 0x75, 0x42, 0x90, 0x53, 0x00, 0x00, 0x3A, 0x0F, 0x02, 0x63, 0x79, 
   0x51, 0x9A, 0x87, 0xA6, 0x97, 0x59, 0xA7, 0x88, 0x2A, 0x60, 0x8D, 0x45, 0x24, 0x87, 0x71, 0x6C, 
   0x91, 0x20, 0x60, 0x73, 0x0F, 0x4F, 0x46, 0x7B, 0x5B, 0xB8, 0x49, 0x6C, 0x91, 0x0B, 0x3F, 0x52, 
   0x63, 0x2B, 0x87, 0x8C, 0xA0, 0xAB, 0x4D, 0xCD, 0xA5, 0x29, 0x35, 0x76, 0x4A, 0x04, 0x80, 0x6B, 
   0x86, 0x96, 0x36, 0x6F, 0x89, 0x1A, 0x0E, 0x44, 0x33, 0x38, 0x79, 0x8A, 0x90, 0xCA, 0x6E, 0xA3, 
   0x91, 0x33, 0x5D, 0x83, 0x3C, 0x38, 0x80, 0x56, 0x4D, 0x67, 0x11, 0x52, 0x6B, 0x12, 0x42, 0x3F, 
   0x64, 0x43, 0x81, 0x83, 0x61, 0xB7, 0x38, 0x8B, 0x97, 0x1B, 0x73, 0x8B, 0x54, 0x4F, 0x89, 0x76, 
   0x4E, 0x61, 0x47, 0x5E, 0x8E, 0x1D, 0x4D, 0x9E, 0x45, 0x5D, 0x8C, 0x46, 0x5D, 0x57, 0x26, 0x3C, 
   0x6E, 0x40, 0x39, 0x70, 0xA2, 0xA1, 0x9A, 0x79, 0x8A, 0xD2, 0x14, 0x38, 0x69, 0x00, 0x2B, 0x33, 
   0x5A, 0x38, 0x83, 0xA7, 0xAB, 0xA1, 0x67, 0x78, 0x94, 0x7D, 0x89, 0x94, 0x3C, 0x4F, 0xAA, 0x3F, 
   0x5E, 0xB3, 0x27, 0x6E, 0x67, 0x17, 0x3A, 0x50, 0x74, 0x57, 0xAD, 0x80, 0x85, 0xD1, 0x4C, 0x5D, 
   0x92, 0x17, 0x63, 0x80, 0x40, 0x58, 0xA1, 0x5E, 0x69, 0x8B, 0x5A, 0x48, 0x76, 0x5F, 0x5B, 0xAB, 
   0x74, 0xAB, 0xEA, 0x17, 0x81, 0xBE, 0x11, 0x3F, 0x2D, 0x7D, 0x36, 0x70, 0x5B, 0x4C, 0xE7, 0x1D, 
   0x64, 0x87, 0x40, 0x50, 0x4E, 0x7A, 0xA7, 0xC0, 0x6E, 0xB1, 0xBA, 0x2D, 0x04, 0x5E, 0x15, 0x30, 
   0x7A, 0x43, 0x97, 0x97, 0x50, 0x59, 0xA5, 0x5C, 0x37, 0xB8, 0x45, 0x7B, 0x8A, 0x4B, 0x49, 0x78, 
   0x35, 0x3F, 0xA1, 0x37, 0x6F, 0x97, 0x67, 0x82, 0x82, 0x8F, 0x82, 0xCC, 0x60, 0x69, 0xAF, 0x36, 
   0x39, 0x74, 0x34, 0x43, 0x8E, 0x44, 0x70, 0xCB, 0x4B, 0x6A, 0x42, 0x5C, 0x1B, 0x65, 0x67, 0x87, 
   0xFF, 0x44, 0xA9, 0x8D, 0x1D, 0x26, 0x4F, 0x4C, 0x05, 0xA0, 0x6A, 0x86, 0xAE, 0x66, 0xBB, 0xAA, 
   0x49, 0x5F, 0x8F, 0x65, 0x25, 0xA6, 0x47, 0x7B, 0x90, 0x57, 0xB9, 0xB7, 0x39, 0x67, 0xBC, 0x2D, 
   0x00, 0x5A, 0x39, 0x37, 0x92, 0x6E, 0x9F, 0xE1, 0x73, 0x72, 0x90, 0x22, 0x33, 0x50, 0x00, 0x23, 
   0x4D, 0x53, 0x87, 0xE6, 0xA5, 0xA5, 0xFF, 0x45, 0x6D, 0x6F, 0x22, 0x5C, 0x40, 0x66, 0x6C, 0xAD, 
   0x5B, 0x8D, 0xCC, 0x54, 0x43, 0xA4, 0x10, 0x65, 0x66, 0x4A, 0x76, 0xC1, 0x84, 0x5B, 0xB0, 0x40, 
   0x61, 0x7E, 0x29, 0x95, 0xC2, 0x78, 0x7D, 0xD7, 0x6C, 0x42, 0x6E, 0x16, 0x36, 0x6C, 0x43, 0x59, 
   0x9A, 0x71, 0x9E, 0xA6, 0x6B, 0x6A, 0xB5, 0x64, 0x52, 0x9C, 0x34, 0x6E, 0x78, 0x11, 0x57, 0x9F, 
   0x2F, 0x41, 0x7D, 0x6C, 0x65, 0x94, 0x65, 0x7E, 0xA5, 0x8F, 0x79, 0x7E, 0x82, 0x79, 0x8F, 0x24, 
   0x56, 0xC2, 0x1C, 0x82, 0x92, 0x88, 0x7B, 0x5C, 0x5F, 0x45, 0x5C, 0x1F, 0x60, 0xB3, 0x40, 0x6A, 
   0xAE, 0x46, 0x31, 0x92, 0x4E, 0x49, 0x86, 0x6B, 0x8F, 0x7B, 0x60, 0x84, 0xA3, 0x65, 0x44, 0xC4, 
   0x46, 0x65, 0x5C, 0x2E, 0x6F, 0x83, 0x3F, 0x35, 0xB0, 0x50, 0x3B, 0x82, 0x3A, 0x63, 0x39, 0x36, 
   0x5F, 0xCF, 0x75, 0x70, 0xF8, 0x75, 0x60, 0x5C, 0x30, 0x55, 0x54, 0x4C, 0x6C, 0x98, 0x57, 0x77, 
   0x93, 0x35, 0x3E, 0x94, 0x4C, 0x4A, 0xB1, 0x68, 0xA5, 0xA9, 0x67, 0x7B, 0x79, 0x38, 0x2F, 0x3F, 
   0x32, 0x28, 0x79, 0x2D, 0x84, 0xCB, 0x73, 0x96, 0xA5, 0x63, 0x3F, 0x71, 0x40, 0x28, 0x72, 0x3F, 
   0x7F, 0xD4, 0x4F, 0x80, 0xAB, 0x33, 0x47, 0x4F, 0x3F, 0x47, 0x88, 0x3A, 0x6A, 0xA6, 0x63, 0x6B, 
   0x9B, 0x57, 0x70, 0x84, 0x44, 0x58, 0x84, 0x3E, 0x52, 0x90, 0x2D, 0x4C, 0x91, 0x5C, 0x6F, 0x98, 
   0x64, 0x5A, 0xB1, 0x48, 0x5C, 0x90, 0x3D, 0x91, 0xA6, 0x5F, 0x59, 0x99, 0x59, 0x6F, 0x81, 0x57, 
   0x94, 0xB8, 0x32, 0x58, 0x8E, 0x13, 0x06, 0x74, 0x25, 0x45, 0x5C, 0x4A, 0x80, 0x79, 0x85, 0x7B, 
   0x99, 0x37, 0x48, 0x96, 0x43, 0x37, 0xA3, 0x7C, 0x6C, 0xB9, 0x5E, 0x8E, 0x84, 0x1E, 0x64, 0x5A, 
   0x34, 0x46, 0x78, 0x5C, 0x29, 0xAD, 0x51, 0x5F, 0xA9, 0x51, 0x9F, 0xA8, 0x45, 0x66, 0x6E, 0x2E, 
   0x37, 0x5C, 0x46, 0x42, 0x96, 0x5E, 0x71, 0xAE, 0x64, 0x84, 0x9D, 0x46, 0x4B, 0x90, 0x2F, 0x56, 
   0x6D, 0x63, 0x7D, 0x84, 0x73, 0x7C, 0xA7, 0x29, 0x4D, 0xB7, 0x29, 0x26, 0x4B, 0x63, 0x77, 0x73, 
   0x7B, 0x8F, 0xCF, 0x63, 0x61, 0x9C, 0x38, 0x59, 0x78, 0x36, 0x4C, 0xA4, 0x1A, 0x40, 0x86, 0x1C, 
   0x58, 0x48, 0x64, 0x39, 0x62, 0x99, 0x6A, 0xE3, 0x4F, 0xC2, 0xEF, 0x2B, 0x93, 0x7F, 0x45, 0x4F, 
   0x58, 0x56, 0x12, 0x61, 0x44, 0x3A, 0x9A, 0x44, 0x7A, 0x8A, 0x4B, 0x8D, 0x74, 0x51, 0x59, 0x8C, 
   0x41, 0x3D, 0xB4, 0x37, 0x65, 0x86, 0x71, 0x78, 0x53, 0x8C, 0x72, 0xB9, 0x40, 0x55, 0xAD, 0x00, 
   0x59, 0x51, 0x44, 0x59, 0x9A, 0x6E, 0x76, 0xB1, 0x52, 0x65, 0x56, 0x4D, 0x55, 0x73, 0x47, 0x77, 
   0xA2, 0x2C, 0x60, 0xAE, 0x6B, 0x2D, 0x6A, 0x60, 0x62, 0x8C, 0x44, 0x96, 0xAE, 0x44, 0x69, 0x9B, 
   0x7D, 0x4C, 0x5B, 0x54, 0x51, 0x6B, 0x1A, 0x59, 0x95, 0x0B, 0x67, 0xA8, 0x64, 0x6F, 0x66, 0xA6, 
   0x93, 0x7F, 0x4B, 0x87, 0xE1, 0x48, 0x73, 0xD8, 0x7D, 0x52, 0x3A, 0x1F, 0x39, 0x10, 0x02, 0x3F, 
   0xB1, 0x76, 0x74, 0xEC, 0x8A, 0x76, 0x6A, 0x40, 0x65, 0x69, 0x72, 0x68, 0xB1, 0x59, 0x56, 0x6C, 
   0x00, 0x44, 0x5B, 0x46, 0x67, 0xC1, 0x86, 0x8F, 0xBF, 0x5D, 0x9C, 0x6C, 0x39, 0x00, 0x2B, 0x1C, 
   0x00, 0x55, 0x44, 0x91, 0xC4, 0x57, 0xAB, 0xD1, 0x58, 0x67, 0x4F, 0x58, 0x28, 0x66, 0x46, 0x82, 
   0xC2, 0x72, 0xA1, 0xBB, 0x4E, 0x04, 0x74, 0x0F, 0x15, 0x24, 0x3D, 0x8E, 0xBF, 0x66, 0x74, 0xC0, 
   0x3A, 0x3C, 0x4E, 0x3B, 0x49, 0x65, 0x5E, 0x84, 0xA5, 0x74, 0x9F, 0xC8, 0x55, 0x6D, 0xA4, 0x00, 
   0x00, 0x4C, 0x0F, 0x2F, 0x5B, 0x8E, 0x9D, 0xAB, 0x72, 0x4F, 0x95, 0x28, 0x4A, 0x57, 0x38, 0x79, 
   0x9B, 0x61, 0x8B, 0x95, 0x6C, 0x56, 0x83, 0x48, 0x3D, 0x8C, 0x24, 0x42, 0x68, 0x29, 0x53, 0x72, 
   0x48, 0x54, 0x46, 0x72, 0x61, 0x66, 0x72, 0x74, 0xE7, 0x43, 0x57, 0xB5, 0x20, 0x5C, 0x47, 0x64, 
   0x6B, 0x95, 0x5E, 0x52, 0x9F, 0x3A, 0x34, 0x70, 0x11, 0x39, 0x6F, 0x1E, 0x46, 0x75, 0x4A, 0x4F, 
   0x7C, 0x86, 0x68, 0x8F, 0x86, 0x90, 0xBC, 0x4A, 0x67, 0x76, 0x03, 0x26, 0x5D, 0x25, 0x2C, 0x73, 
   0x34, 0x72, 0x84, 0xB3, 0x84, 0x84, 0x45, 0x7D, 0x99, 0x40, 0x8D, 0x93, 0x57, 0x53, 0xD1, 0x41, 
   0x3C, 0x80, 0x52, 0x81, 0x57, 0x69, 0x9E, 0xBE, 0x47, 0x42, 0xBF, 0x52, 0x36, 0x7B, 0x68, 0x91, 
   0xA8, 0x34, 0x7F, 0xC8, 0x1D, 0x3F, 0x5A, 0x3B, 0x07, 0x1C, 0x6B, 0x7C, 0x9E, 0x7D, 0xCE, 0xFF, 
   0x4E, 0x56, 0xC8, 0x40, 0x4E, 0x2F, 0x43, 0x89, 0x75, 0x3D, 0x59, 0x9D, 0x2C, 0x13, 0x8C, 0x56, 
   0x3D, 0x93, 0x5D, 0x7F, 0x94, 0x58, 0xBF, 0xB6, 0x51, 0x62, 0xA3, 0x4B, 0x2B, 0x5D, 0x44, 0x52, 
   0x63, 0x39, 0x5E, 0xB3, 0x6D, 0x80, 0xB9, 0x56, 0x68, 0x7B, 0x2D, 0x1E, 0x59, 0x23, 0x43, 0x94, 
   0x59, 0x87, 0xC5, 0x67, 0xA6, 0xC1, 0x7F, 0xA5, 0x9F, 0x5C, 0x47, 0x99, 0x38, 0x29, 0xA8, 0x58, 
   0x6D, 0xAC, 0x6C, 0xAA, 0x87, 0x00, 0x48, 0x58, 0x2C, 0x00, 0x91, 0x72, 0x87, 0x98, 0x5D, 0x9A, 
   0xA5, 0x41, 0x5A, 0xB6, 0x5C, 0x36, 0x87, 0x23, 0x20, 0x59, 0x09, 0x68, 0x7D, 0x89, 0xBB, 0xCA, 
   0xA0, 0xA4, 0xAA, 0x31, 0x36, 0x7D, 0x12, 0x1E, 0x9A, 0x44, 0x7F, 0xAB, 0x66, 0xA1, 0xBC, 0x38, 
   0x5A, 0xA3, 0x1C, 0x1F, 0x57, 0x50, 0x26, 0x7F, 0x6E, 0x9F, 0xC4, 0x3B, 0x6E, 0x6F, 0x37, 0x57, 
   0xA3, 0x76, 0x41, 0x8E, 0x5F, 0x65, 0x85, 0x31, 0x8E, 0xD0, 0x38, 0x72, 0xB4, 0x77, 0x6A, 0x7A, 
   0x71, 0x2B, 0x90, 0x1A, 0x53, 0xA2, 0x31, 0xA4, 0xC0, 0x56, 0x5B, 0x93, 0x81, 0x44, 0x7C, 0x86, 
   0x77, 0xB5, 0x67, 0x94, 0xDC, 0x03, 0x70, 0xA7, 0x25, 0x19, 0x76, 0x76, 0x6F, 0x63, 0x77, 0x80, 
   0x87, 0x2D, 0x52, 0xEA, 0x43, 0x57, 0xC7, 0x70, 0x5C, 0x8B, 0x52, 0x5D, 0x60, 0x23, 0x69, 0x82, 
   0x23, 0x86, 0xC1, 0x37, 0x4D, 0x8D, 0x68, 0x3C, 0x81, 0x65, 0x61, 0x8D, 0x77, 0xA8, 0x9A, 0x85, 
   0xAD, 0xAC, 0x22, 0x43, 0xBB, 0x16, 0x23, 0x7B, 0x8D, 0x56, 0x68, 0x5F, 0x94, 0x8A, 0x2A, 0x65, 
   0xA1, 0x3F, 0x30, 0x9C, 0x4B, 0x35, 0xA1, 0x30, 0x65, 0x90, 0x71, 0x95, 0x7F, 0x72, 0x7F, 0xA8, 
   0x5F, 0x6D, 0xD4, 0x46, 0x64, 0x6B, 0x28, 0x2F, 0x3C, 0x3E, 0x3F, 0x71, 0x1E, 0x5D, 0xE1, 0x70, 
   0x7A, 0xE1, 0xA3, 0x64, 0x77, 0x3B, 0x65, 0x57, 0x12, 0x7C, 0x74, 0x3A, 0x65, 0x8D, 0x64, 0x33, 
   0xB1, 0x75, 0x6D, 0xAB, 0x5D, 0xA6, 0x7C, 0x39, 0x6B, 0x6F, 0x32, 0x34, 0xA2, 0x3D, 0x39, 0x96, 
   0x33, 0x5C, 0x68, 0x62, 0x74, 0x7F, 0x68, 0x6E, 0x8C, 0x3A, 0x4B, 0x71, 0x3F, 0x3A, 0xCD, 0x4A, 
   0x57, 0xA6, 0x4A, 0x80, 0x66, 0x4A, 0x5E, 0x83, 0x29, 0x3C, 0x8A, 0x5D, 0x54, 0xB3, 0x7B, 0x99, 
   0xA7, 0x58, 0x6B, 0x72, 0x34, 0x1F, 0x61, 0x3E, 0x57, 0xAB, 0x43, 0x7F, 0xA0, 0x39, 0x25, 0x51, 
   0x58, 0x4E, 0x92, 0x6A, 0x89, 0xBC, 0x4F, 0x52, 0x90, 0x54, 0x64, 0xB1, 0x64, 0x9C, 0xC0, 0x46, 
   0x5B, 0x62, 0x2E, 0x37, 0x76, 0x55, 0x58, 0x8C, 0x5F, 0x74, 0xA7, 0x04, 0x56, 0x79, 0x28, 0x34, 
   0x53, 0x91, 0x53, 0x8F, 0x5A, 0x89, 0xCB, 0x43, 0x9C, 0xAA, 0x69, 0x78, 0x8B, 0x2F, 0x41, 0x72, 
   0x40, 0x2F, 0x88, 0x51, 0x52, 0x89, 0x46, 0x76, 0x91, 0x63, 0x66, 0xA3, 0x46, 0x61, 0xB5, 0x2A, 
   0x56, 0x81, 0x4D, 0x72, 0x97, 0x86, 0x83, 0xAD, 0x46, 0x55, 0x95, 0x1E, 0x2D, 0x6D, 0x4C, 0x79, 
   0x84, 0x69, 0xA1, 0xA7, 0x4D, 0x71, 0xB7, 0x5C, 0x13, 0x56, 0x0C, 0x25, 0x4B, 0x24, 0x78, 0xCA, 
   0xA2, 0xB8, 0xE1, 0x7E, 0x89, 0x78, 0x00, 0x31, 0x42, 0x04, 0x3A, 0x70, 0x8F, 0x4B, 0xC7, 0x8A, 
   0x5F, 0xB5, 0x0D, 0x62, 0x3D, 0x25, 0x6A, 0x39, 0x88, 0x94, 0xC6, 0x8D, 0x93, 0xFF, 0x19, 0x51, 
   0xB3, 0x44, 0x37, 0x4B, 0x38, 0x69, 0x21, 0x22, 0x4C, 0x5C, 0x5C, 0x4D, 0xDD, 0x58, 0x65, 0xC8, 
   0x31, 0x66, 0x77, 0x75, 0x61, 0x75, 0x6E, 0x6C, 0xAC, 0x11, 0x5A, 0x56, 0x16, 0x5A, 0x6E, 0x57, 
   0x61, 0xA9, 0x6A, 0x6D, 0xBC, 0x5A, 0x5B, 0x9E, 0x53, 0x55, 0x84, 0x4D, 0x70, 0x5A, 0x2B, 0x3D, 
   0x5F, 0x43, 0x3E, 0x57, 0x7D, 0x8F, 0xCC, 0x60, 0x6E, 0xD8, 0x2D, 0x25, 0x81, 0x49, 0xA9, 0x78, 
   0x88, 0xAD, 0x93, 0x4E, 0x17, 0x5F, 0x00, 0x00, 0x4A, 0x30, 0x74, 0x88, 0xA1, 0xD5, 0xD2, 0x7D, 
   0xC5, 0xFC, 0x8B, 0x8E, 0xB9, 0x6E, 0x38, 0x69, 0x02, 0x1D, 0x26, 0x00, 0x56, 0x7C, 0x5F, 0x69, 
   0xA6, 0x90, 0x8D, 0x92, 0x90, 0x98, 0xAA, 0x32, 0x4D, 0xCB, 0x19, 0x40, 0x7E, 0x63, 0x7D, 0x52, 
   0x52, 0x55, 0x52, 0x1B, 0x3F, 0xA4, 0x5C, 0x63, 0xAC, 0xA6, 0x97, 0xB0, 0x81, 0xA6, 0x74, 0x00, 
   0x3B, 0x5B, 0x00, 0x0B, 0x78, 0x3E, 0x3B, 0x74, 0x85, 0x95, 0xAA, 0x59, 0xC5, 0x8A, 0x3C, 0x85, 
   0x90, 0x63, 0x2B, 0xA6, 0x5B, 0x60, 0x88, 0x10, 0x38, 0x69, 0x2C, 0x23, 0x53, 0x83, 0x8B, 0xBA, 
   0x4B, 0x97, 0x9E, 0x13, 0x14, 0x48, 0x6F, 0x3E, 0x76, 0x9C, 0xCD, 0xC2, 0x22, 0xA4, 0xB0, 0x10, 
   0x17, 0x69, 0x5A, 0x09, 0x5C, 0x6D, 0x70, 0x9B, 0x6C, 0x87, 0xA6, 0x26, 0x31, 0x66, 0x04, 0x21, 
   0x5B, 0x71, 0x73, 0xAC, 0x72, 0xA2, 0x9C, 0x39, 0x62, 0x84, 0x60, 0x2E, 0x8D, 0x4D, 0x60, 0x69, 
   0x14, 0x60, 0x5D, 0x4E, 0x55, 0x64, 0x61, 0x51, 0x95, 0x66, 0x6E, 0x9E, 0x3D, 0x74, 0xAA, 0x25, 
   0x72, 0xA8, 0x57, 0x52, 0x6C, 0x52, 0x34, 0x64, 0x2A, 0x2E, 0x76, 0x27, 0x37, 0x61, 0x79, 0x8F, 
   0xAC, 0x90, 0x9B, 0xC2, 0x28, 0x45, 0x6B, 0x15, 0x22, 0x47, 0x60, 0x61, 0x80, 0x4B, 0x62, 0xA8, 
   0x62, 0x73, 0x85, 0x3A, 0x4A, 0x51, 0x30, 0x57, 0xA8, 0x1A, 0x4C, 0xB9, 0x39, 0x69, 0x5E, 0x6A, 
   0x5F, 0x75, 0x72, 0x55, 0xC6, 0x6B, 0x89, 0xBB, 0x36, 0x82, 0x81, 0x1E, 0x53, 0x85, 0x57, 0x58, 
   0xBD, 0x6E, 0x79, 0x8E, 0x2F, 0x29, 0x44, 0x3B, 0x46, 0x8A, 0x75, 0x81, 0xCB, 0x5A, 0x72, 0xCC, 
   0x3D, 0x88, 0x86, 0x74, 0x59, 0x84, 0x4F, 0x4C, 0xB6, 0x00, 0x78, 0x97, 0x20, 0x33, 0x37, 0x72, 
   0x3F, 0x9F, 0x8A, 0xC2, 0xFB, 0x35, 0x45, 0x77, 0x1E, 0x39, 0x65, 0x68, 0x99, 0xAE, 0x5D, 0x5F, 
   0xBF, 0x57, 0x35, 0x5C, 0x3F, 0x6C, 0x6C, 0x3E, 0x39, 0x7D, 0x22, 0x1E, 0x85, 0x4D, 0x45, 0x88, 
   0x55, 0xAB, 0x97, 0x78, 0xAC, 0xC7, 0x67, 0x5F, 0xC7, 0x32, 0x35, 0x7B, 0x5E, 0x4B, 0x84, 0x68, 
   0x9A, 0xC1, 0x1D, 0x5A, 0x80, 0x54, 0x32, 0x52, 0x3D, 0x65, 0xB4, 0x11, 0x8E, 0xBA, 0x63, 0x5A, 
   0x66, 0x70, 0x3E, 0xAA, 0x53, 0x71, 0xC0, 0x2B, 0x88, 0x64, 0x3C, 0x3F, 0x4D, 0x71, 0x40, 0x94, 
   0x6B, 0x8B, 0xC5, 0x5E, 0xA8, 0xB5, 0x29, 0x40, 0x9E, 0x33, 0x17, 0x92, 0x4F, 0x7E, 0x9D, 0x66, 
   0xA0, 0xAE, 0x4F, 0x60, 0xA1, 0x2D, 0x14, 0x34, 0x13, 0x33, 0x86, 0x71, 0xBE, 0xFF, 0xC2, 0x86, 
   0xBB, 0x54, 0x2F, 0x3C, 0x00, 0x2F, 0x49, 0x41, 0x80, 0xDB, 0x87, 0x92, 0xFF, 0x5A, 0x47, 0x9C, 
   0x37, 0x3B, 0x2D, 0x37, 0x80, 0x94, 0x4F, 0x66, 0xC4, 0x56, 0x6C, 0xA3, 0x58, 0x7D, 0xA2, 0x8B, 
   0x65, 0xB7, 0x60, 0x52, 0x83, 0x02, 0x30, 0x7B, 0x1F, 0x7B, 0xA2, 0x65, 0x87, 0x7A, 0x7D, 0x6F, 
   0x97, 0x4F, 0x45, 0xB3, 0x37, 0x44, 0xA2, 0x37, 0x50, 0xA1, 0x71, 0x7A, 0x83, 0x76, 0x75, 0x9F, 
   0x42, 0x7B, 0x98, 0x1F, 0x5D, 0x97, 0x3C, 0x24, 0x64, 0x67, 0x5A, 0x8C, 0x63, 0xA6, 0xC1, 0x69, 
   0x8F, 0x89, 0x61, 0x53, 0x7E, 0x2D, 0x3A, 0xC2, 0x22, 0x67, 0xB5, 0xA4, 0x6D, 0x6E, 0x69, 0x6C, 
   0x6C, 0x06, 0x6A, 0x8E, 0x2C, 0x40, 0xA5, 0x44, 0x30, 0x88, 0x4D, 0x55, 0x83, 0x6B, 0xB2, 0x8F, 
   0x5B, 0x79, 0xBC, 0x70, 0x3E, 0x8D, 0x40, 0x5E, 0x32, 0x00, 0x5D, 0x89, 0x6E, 0x51, 0xFF, 0x91, 
   0x56, 0x93, 0x2F, 0x3B, 0x18, 0x39, 0x7A, 0x7D, 0x4B, 0x6A, 0x9B, 0x41, 0x32, 0x92, 0x59, 0x66, 
   0xA5, 0x75, 0x95, 0xA5, 0x51, 0x88, 0x7B, 0x43, 0x3B, 0x5E, 0x14, 0x17, 0x8C, 0x32, 0x67, 0xC5, 
   0x6D, 0x8A, 0xA1, 0x6E, 0x4B, 0x2E, 0x3A, 0x40, 0x79, 0x56, 0x80, 0xD1, 0x44, 0x7A, 0x99, 0x4A, 
   0x52, 0x70, 0x3F, 0x35, 0x71, 0x45, 0x6F, 0xAC, 0x63, 0x6B, 0xC4, 0x4D, 0x6B, 0x8B, 0x52, 0x54, 
   0x8A, 0x58, 0x6B, 0xA0, 0x57, 0x76, 0x9A, 0x3F, 0x5E, 0x7D, 0x38, 0x30, 0x88, 0x33, 0x63, 0x8E, 
   0x4B, 0x6B, 0x57, 0x47, 0x56, 0x9E, 0x7C, 0x73, 0xD9, 0x6A, 0x8A, 0xA5, 0x0E, 0x56, 0x97, 0x4D, 
   0x2D, 0x78, 0x7B, 0x6D, 0x60, 0x74, 0xB1, 0xAF, 0x39, 0x6A, 0x98, 0x3D, 0x11, 0x6F, 0x10, 0x1C, 
   0x75, 0x45, 0x53, 0x82, 0x91, 0xA6, 0x90, 0x42, 0x90, 0xC0, 0x25, 0x4F, 0xAA, 0x6F, 0x31, 0xA8, 
   0x47, 0x58, 0x78, 0x41, 0x7B, 0x55, 0x4C, 0x4E, 0x89, 0x36, 0x43, 0x87, 0x53, 0x4B, 0xB7, 0x65, 
   0x96, 0xD9, 0x69, 0x8A, 0x7C, 0x35, 0x2D, 0x62, 0x29, 0x32, 0x71, 0x57, 0x6C, 0x8F, 0x5D, 0x79, 
   0xA7, 0x4D, 0x7E, 0xB2, 0x52, 0x4A, 0x62, 0x42, 0x37, 0x6E, 0x64, 0x6B, 0xCF, 0x5D, 0x66, 0xAD, 
   0x2E, 0x5B, 0x67, 0x43, 0x77, 0x82, 0x3E, 0x6A, 0x8D, 0x40, 0x30, 0x77, 0x69, 0x47, 0x94, 0x69, 
   0x5A, 0xCD, 0x35, 0x90, 0x87, 0x13, 0x7A, 0x32, 0x59, 0x41, 0x68, 0x8D, 0x52, 0xFF, 0x70, 0x92, 
   0xFF, 0x08, 0x91, 0x56, 0x2E, 0x55, 0x35, 0x62, 0x30, 0x69, 0x41, 0x3C, 0xB5, 0x31, 0x6C, 0xC8, 
   0x98, 0xA0, 0x88, 0x74, 0x72, 0x9C, 0x10, 0x49, 0x7E, 0x00, 0x42, 0x4A, 0x39, 0x4F, 0x75, 0x7C, 
   0x6E, 0xCD, 0x83, 0x91, 0xB8, 0x55, 0x68, 0x9B, 0x43, 0x61, 0xAE, 0x31, 0x49, 0x6B, 0x43, 0x2C, 
   0x21, 0x76, 0x6C, 0x8A, 0x38, 0x79, 0xD7, 0x32, 0x58, 0xB0, 0x71, 0x74, 0x85, 0x6A, 0x74, 0x67, 
   0x25, 0x63, 0x7D, 0x1B, 0x3B, 0x8E, 0x5E, 0x2D, 0x47, 0x7E, 0x5F, 0x63, 0x54, 0xA1, 0xFF, 0x9F, 
   0xB3, 0xFF, 0xA7, 0x70, 0x67, 0x34, 0x43, 0x0D, 0x00, 0x1E, 0x94, 0x2B, 0x58, 0xBC, 0xA5, 0x98, 
   0x51, 0x62, 0x76, 0x5E, 0x5B, 0x42, 0xD7, 0x58, 0x68, 0xD1, 0x12, 0x67, 0x67, 0x0D, 0x5B, 0x52, 
   0x76, 0x4F, 0x85, 0x7F, 0x50, 0x5A, 0x36, 0x37, 0x90, 0x69, 0x78, 0xD1, 0x8E, 0xE4, 0xC9, 0x4C, 
   0x9F, 0x80, 0x15, 0x00, 0x16, 0x2B, 0x00, 0x3F, 0x44, 0x87, 0xB5, 0x69, 0xDB, 0xD4, 0x92, 0x6F, 
   0x85, 0x25, 0x33, 0x79, 0x41, 0x53, 0xA6, 0x79, 0x6E, 0xA5, 0x3F, 0x5D, 0x76, 0x0B, 0x3B, 0x3D, 
   0x56, 0x69, 0xAA, 0x79, 0x7A, 0xCC, 0x50, 0x63, 0x53, 0x22, 0x2B, 0x64, 0x45, 0x71, 0x98, 0x7F, 
   0xB0, 0xA4, 0x57, 0x52, 0x97, 0x38, 0x21, 0x62, 0x20, 0x52, 0x6C, 0x48, 0x74, 0x99, 0x64, 0x2B, 
   0x61, 0x2C, 0x32, 0x73, 0x28, 0x79, 0xA2, 0x79, 0x76, 0x97, 0x68, 0x81, 0x85, 0x3F, 0x52, 0x72, 
   0x42, 0x50, 0x82, 0x1A, 0x49, 0x75, 0x42, 0x50, 0x37, 0x71, 0x7F, 0x8A, 0x65, 0x7F, 0xFE, 0x30, 
   0x55, 0x86, 0x02, 0x37, 0x44, 0x4D, 0x4D, 0x55, 0x56, 0x43, 0x79, 0x85, 0x67, 0xA8, 0x6D, 0x8F, 
   0xBE, 0x15, 0x55, 0x71, 0x1F, 0x2D, 0x53, 0x27, 0x34, 0x75, 0x5D, 0x98, 0x8D, 0x9D, 0xB4, 0xA4, 
   0x51, 0x51, 0x97, 0x00, 0x04, 0x35, 0x24, 0x43, 0x83, 0x08, 0x28, 0x78, 0x3F, 0x74, 0x8B, 0x7C, 
   0x9F, 0xA4, 0x7E, 0x78, 0xDE, 0x55, 0x34, 0x93, 0x47, 0x89, 0x8C, 0x45, 0x98, 0xAC, 0x23, 0x3B, 
   0x7D, 0x52, 0x24, 0x45, 0x75, 0x75, 0xB3, 0x52, 0xB5, 0xF3, 0x13, 0x4E, 0xA1, 0x3B, 0x36, 0x27, 
   0x92, 0x74, 0x6C, 0x5E, 0x8B, 0xFC, 0x3A, 0x47, 0xB1, 0x44, 0x4E, 0x44, 0x4F, 0xA9, 0xAF, 0x3E, 
   0x90, 0x9F, 0x33, 0x21, 0x88, 0x56, 0x20, 0x98, 0x51, 0x93, 0x88, 0x4D, 0x6D, 0xA4, 0x64, 0x77, 
   0xC5, 0x68, 0x79, 0x84, 0x28, 0x05, 0x4E, 0x11, 0x28, 0x77, 0x46, 0x77, 0x9C, 0x77, 0x92, 0x88, 
   0x78, 0x93, 0x8F, 0x44, 0x5E, 0xA2, 0x37, 0x24, 0xA3, 0x58, 0x6E, 0xCF, 0x51, 0xAB, 0x88, 0x40, 
   0x3E, 0x64, 0x50, 0x10, 0x80, 0x61, 0x83, 0xD0, 0x33, 0xB1, 0x8C, 0x28, 0x38, 0x75, 0x4C, 0x15, 
   0xBF, 0x6A, 0x71, 0x70, 0x55, 0x7E, 0x76, 0x6C, 0x7E, 0xDC, 0x81, 0x65, 0x86, 0x1F, 0x1A, 0x47, 
   0x18, 0x2C, 0xA4, 0x7A, 0x90, 0xDA, 0x7F, 0x9C, 0x9C, 0x34, 0x4B, 0x7F, 0x1C, 0x28, 0x73, 0x4F, 
   0x6D, 0x96, 0x5B, 0x95, 0xB3, 0x23, 0x56, 0x8C, 0x36, 0x2D, 0x87, 0x7C, 0x45, 0xCC, 0x6B, 0x91, 
   0x99, 0x43, 0x86, 0x7B, 0x4D, 0x57, 0x98, 0x41, 0x3F, 0x9A, 0x63, 0x4B, 0xAC, 0x41, 0x7A, 0xCE, 
   0x20, 0x86, 0x94, 0x6B, 0x42, 0x66, 0x61, 0x48, 0x84, 0x3F, 0x99, 0xE0, 0x7D, 0x8D, 0xCD, 0x2D, 
   0x52, 0x6A, 0x38, 0x13, 0x8F, 0x5F, 0x6F, 0x8F, 0x70, 0xA3, 0x7A, 0x25, 0x70, 0xE7, 0x3C, 0x46, 
   0xA1, 0x87, 0x72, 0x3D, 0x4E, 0x56, 0x70, 0x0F, 0x4B, 0xA5, 0x60, 0x6E, 0xCE, 0x78, 0x7A, 0xA4, 
   0x77, 0x47, 0x69, 0x47, 0x69, 0x91, 0x0C, 0x69, 0xA8, 0x3A, 0x6F, 0x8B, 0x70, 0x52, 0x80, 0x45, 
   0x64, 0x93, 0x62, 0x75, 0x8F, 0x73, 0x80, 0xB2, 0x3E, 0x6E, 0xC7, 0x3D, 0x3F, 0x9C, 0x69, 0x71, 
   0x65, 0x5C, 0x82, 0x7A, 0x1C, 0x53, 0x7A, 0x37, 0x3B, 0x8C, 0x44, 0x52, 0xA3, 0x4D, 0x59, 0x91, 
   0x7C, 0x7D, 0x48, 0x4F, 0x6D, 0x83, 0x43, 0x6C, 0xE5, 0x5E, 0x6F, 0xC2, 0x68, 0x4B, 0x48, 0x33, 
   0x28, 0x67, 0x15, 0x6C, 0x9F, 0x2D, 0x56, 0x61, 0x68, 0x30, 0x84, 0x69, 0x76, 0xA2, 0x4D, 0x7D, 
   0x86, 0x46, 0x93, 0x98, 0x44, 0x3C, 0x92, 0x49, 0x34, 0x92, 0x2C, 0x73, 0x81, 0x4A, 0x68, 0x97, 
   0x6D, 0x56, 0x90, 0x45, 0x3F, 0x68, 0x3F, 0x46, 0x8A, 0x4F, 0x75, 0xA1, 0x4F, 0x81, 0x79, 0x3F, 
   0x58, 0x4D, 0x45, 0x25, 0xAA, 0x46, 0x59, 0xA7, 0x6F, 0x99, 0x96, 0x5D, 0x70, 0x8A, 0x18, 0x14, 
   0x79, 0x5C, 0x64, 0xAB, 0x6E, 0xA4, 0x9A, 0x46, 0x43, 0x88, 0x45, 0x42, 0x77, 0x4A, 0x64, 0x93, 
   0x28, 0x70, 0x9A, 0x50, 0x55, 0x6E, 0x63, 0x77, 0xAD, 0x4D, 0x82, 0xAD, 0x42, 0x1C, 0x7A, 0x48, 
   0x56, 0x8A, 0x65, 0xA7, 0xAB, 0x59, 0x79, 0x6C, 0x41, 0x4E, 0x77, 0x45, 0x47, 0xB0, 0x4F, 0x47, 
   0x9E, 0x27, 0x75, 0x7B, 0x28, 0x5F, 0x4E, 0x73, 0x4E, 0x90, 0x5E, 0x60, 0xD7, 0x38, 0x6C, 0xAF, 
   0x7C, 0x61, 0x7A, 0x37, 0x66, 0x78, 0x36, 0x55, 0x62, 0x37, 0x3F, 0x9D, 0x66, 0x6E, 0xB0, 0x93, 
   0x8B, 0xAC, 0x30, 0x63, 0xC6, 0x07, 0x56, 0x68, 0x4B, 0x4A, 0x44, 0x6E, 0x83, 0xAB, 0x46, 0x6C, 
   0xBD, 0x46, 0x28, 0x62, 0x2B, 0x67, 0x63, 0x5A, 0x8A, 0xD6, 0x88, 0x79, 0xB9, 0x7A, 0x5A, 0x84, 
   0x10, 0x3C, 0x65, 0x00, 0x3C, 0x77, 0x7E, 0x70, 0xB1, 0xAE, 0x77, 0xAB, 0x31, 0x44, 0x61, 0x2B, 
   0x5B, 0x7D, 0x6F, 0x72, 0xAB, 0x68, 0x66, 0xB6, 0x23, 0x38, 0x60, 0x24, 0x23, 0x4A, 0x7C, 0x8C, 
   0xA2, 0x7D, 0xAF, 0xF4, 0x38, 0x58, 0xAF, 0x37, 0x1C, 0x84, 0x31, 0x4E, 0x3D, 0x6A, 0x71, 0x7B, 
   0x8B, 0x61, 0xD6, 0x44, 0x77, 0x80, 0x00, 0x54, 0x46, 0x33, 0x27, 0x8B, 0x6F, 0x72, 0xAF, 0x6B, 
   0x7F, 0x78, 0x55, 0x69, 0x9B, 0x5B, 0x7F, 0xC8, 0x39, 0x5C, 0x82, 0x50, 0x40, 0x63, 0x72, 0x84, 
   0x96, 0x4F, 0x62, 0x96, 0x2C, 0x2F, 0x79, 0x6A, 0x85, 0x8A, 0x75, 0xA0, 0x8A, 0x41, 0x1D, 0x8F, 
   0x00, 0x08, 0x5D, 0x29, 0x8F, 0x70, 0xBD, 0xC7, 0xA1, 0x6B, 0x72, 0xC0, 0x5F, 0x49, 0xA3, 0x7E, 
   0x75, 0x8A, 0x4D, 0x74, 0x71, 0x0D, 0x61, 0x8D, 0x51, 0x5B, 0x9D, 0x68, 0x5B, 0x7A, 0x4A, 0x7C, 
   0x74, 0x53, 0x6F, 0x9B, 0x2A, 0x46, 0x9B, 0x3A, 0x6E, 0x6D, 0x4C, 0x67, 0xAB, 0x3C, 0x50, 0x88, 
   0x28, 0x40, 0x5F, 0x8C, 0x5E, 0x66, 0x98, 0x89, 0x96, 0x1E, 0x84, 0xA9, 0x22, 0x6C, 0xD1, 0x87, 
   0x64, 0xA6, 0x6E, 0x77, 0x59, 0x10, 0x35, 0x51, 0x04, 0x34, 0x6F, 0x66, 0x4D, 0x9F, 0x58, 0x89, 
   0xAC, 0x59, 0x96, 0x74, 0x3D, 0x46, 0x85, 0x6A, 0x61, 0xA7, 0x5D, 0x81, 0xA1, 0x29, 0x35, 0x72, 
   0x34, 0x24, 0x66, 0x93, 0xAC, 0xB5, 0x1B, 0x5C, 0xA8, 0x00, 0x00, 0x2A, 0x6E, 0x49, 0x64, 0xA9, 
   0xCF, 0xD8, 0x58, 0xB7, 0xBB, 0x1C, 0x34, 0x63, 0x26, 0x00, 0x55, 0x5F, 0x5D, 0x6C, 0x54, 0x7B, 
   0xA6, 0x2C, 0x3D, 0x5D, 0x33, 0x18, 0x7B, 0x57, 0x98, 0xAF, 0x69, 0x9A, 0x7D, 0x5D, 0x65, 0xAF, 
   0x61, 0x40, 0xB3, 0x31, 0x3E, 0x55, 0x0E, 0x49, 0x53, 0x53, 0x66, 0x7B, 0x76, 0x60, 0x7D, 0x3D, 
   0x55, 0x90, 0x20, 0x4A, 0x80, 0x22, 0x46, 0x7C, 0x7F, 0x80, 0xAA, 0xA1, 0xA1, 0xD0, 0x1C, 0x49, 
   0x67, 0x08, 0x0A, 0x2C, 0x26, 0x45, 0x76, 0x67, 0x86, 0x99, 0x80, 0x82, 0x99, 0x64, 0x6F, 0x76, 
   0x62, 0x67, 0x64, 0x06, 0x10, 0xA8, 0x3F, 0x56, 0x6C, 0x39, 0x50, 0x51, 0x40, 0x4C, 0xB9, 0x52, 
   0x5F, 0xD1, 0x5F, 0x8F, 0x82, 0x6B, 0x8A, 0x92, 0x4E, 0x50, 0xC4, 0x3B, 0x5F, 0x83, 0x2A, 0x4E, 
   0x33, 0x47, 0x4F, 0x9C, 0x8C, 0x99, 0xFF, 0x64, 0x82, 0xC5, 0x1E, 0x64, 0x49, 0x34, 0x50, 0x4D, 
   0x5C, 0x22, 0xB9, 0x41, 0x57, 0xAA, 0x42, 0x7C, 0x7E, 0x75, 0x73, 0xA1, 0x73, 0xB0, 0xC8, 0x15, 
   0x5D, 0x98, 0x14, 0x0A, 0x42, 0x4F, 0x53, 0x87, 0x68, 0x65, 0xDD, 0x4D, 0x66, 0x88, 0x52, 0x7C, 
   0x7B, 0x4C, 0x58, 0xB2, 0x35, 0x1E, 0x6D, 0x36, 0x2C, 0x62, 0x4F, 0x96, 0x9D, 0x7E, 0xBF, 0xC1, 
   0x72, 0x3A, 0xA4, 0x37, 0x17, 0x6B, 0x3A, 0x84, 0xAA, 0x61, 0xA0, 0xBA, 0x28, 0x4F, 0x86, 0x39, 
   0x2C, 0x52, 0x6D, 0x71, 0x9D, 0x35, 0x94, 0xA9, 0x4C, 0x56, 0x80, 0x73, 0x4A, 0x7F, 0x2A, 0x61, 
   0x7F, 0x15, 0x67, 0x86, 0x6C, 0x67, 0x98, 0x9A, 0x7D, 0xA4, 0x43, 0x76, 0xB4, 0x2E, 0x4C, 0x9B, 
   0x1C, 0x30, 0x61, 0x39, 0x49, 0x6E, 0x73, 0x95, 0xD1, 0x73, 0xAC, 0xA5, 0x34, 0x39, 0x6C, 0x22, 
   0x1D, 0x73, 0x35, 0x7A, 0x9D, 0x75, 0xB4, 0xE9, 0x8C, 0x7A, 0xC0, 0x3B, 0x0C, 0x3D, 0x00, 0x40, 
   0x98, 0x5E, 0xB3, 0xF9, 0xA9, 0x95, 0xAF, 0x46, 0x21, 0x6E, 0x00, 0x27, 0x4C, 0x29, 0x84, 0x99, 
   0x75, 0x86, 0xF6, 0x5C, 0x59, 0x95, 0x73, 0x5E, 0x77, 0x76, 0x80, 0xA8, 0x14, 0x58, 0x96, 0x1F, 
   0x58, 0x7D, 0x5A, 0x69, 0x5F, 0x8E, 0x80, 0x77, 0x66, 0x4D, 0xB8, 0x36, 0x68, 0xC4, 0x1E, 0x62, 
   0xAB, 0x3B, 0x40, 0x6F, 0x65, 0x79, 0x41, 0x66, 0x7E, 0xB4, 0x39, 0x4B, 0xCC, 0x5B, 0x40, 0x92, 
   0x72, 0x7A, 0x68, 0x7C, 0x6A, 0x8A, 0x34, 0x9D, 0xBE, 0x04, 0x6D, 0x8A, 0x1C, 0x10, 0x4C, 0x69, 
   0x38, 0x8C, 0x6D, 0x7F, 0xDE, 0x74, 0x97, 0xAC, 0x7D, 0x5D, 0x8D, 0x20, 0x4A, 0xA1, 0x14, 0x49, 
   0x99, 0x91, 0x60, 0x69, 0x5C, 0x82, 0x6D, 0x0A, 0x75, 0x95, 0x2B, 0x45, 0x95, 0x55, 0x06, 0x73, 
   0x41, 0x64, 0x5E, 0x54, 0xA6, 0xAB, 0x7E, 0x89, 0xF7, 0xA4, 0x49, 0xB5, 0x3A, 0x5E, 0x28, 0x00, 
   0x68, 0x48, 0x42, 0x50, 0xB0, 0x5B, 0x33, 0xB8, 0x63, 0x62, 0x7F, 0x5D, 0x86, 0x83, 0x51, 0x8C, 
   0x83, 0x5B, 0x35, 0x6E, 0x21, 0x34, 0x92, 0x33, 0x5D, 0xD7, 0x6D, 0x85, 0xA3, 0x6D, 0x5D, 0x4C, 
   0x1D, 0x2F, 0x75, 0x55, 0x68, 0xF2, 0x5A, 0x74, 0x8F, 0x27, 0x47, 0x2D, 0x3E, 0x53, 0x67, 0x45, 
   0x70, 0xC5, 0x5D, 0x77, 0x9A, 0x5D, 0x5A, 0x8F, 0x41, 0x54, 0x7E, 0x51, 0x59, 0x95, 0x5B, 0x6F, 
   0xAB, 0x28, 0x3C, 0x6C, 0x23, 0x37, 0x77, 0x86, 0x9A, 0xAA, 0x5E, 0x89, 0x88, 0x35, 0x38, 0x6C, 
   0x55, 0x3D, 0xB0, 0x37, 0x9C, 0xA4, 0x27, 0x3B, 0x59, 0x35, 0x08, 0x70, 0x81, 0x82, 0xA6, 0x71, 
   0x9B, 0xBF, 0x2C, 0x62, 0xA2, 0x37, 0x44, 0x73, 0x65, 0x3F, 0x84, 0x65, 0x84, 0xA0, 0x68, 0x9A, 
   0x9A, 0x2C, 0x4D, 0x8D, 0x0F, 0x18, 0x6F, 0x38, 0x46, 0x6B, 0x74, 0x65, 0x90, 0x66, 0x90, 0xC0, 
   0x4A, 0x7A, 0xAA, 0x66, 0x4C, 0x81, 0x22, 0x4C, 0x80, 0x66, 0x7A, 0x8B, 0x76, 0x7A, 0x7B, 0x31, 
   0x4C, 0x9E, 0x47, 0x57, 0xA4, 0x6F, 0x85, 0xBA, 0x46, 0x79, 0x91, 0x40, 0x4F, 0x94, 0x40, 0x32, 
   0x66, 0x41, 0x4F, 0x6E, 0x53, 0x7A, 0xD6, 0x71, 0x92, 0xB9, 0x6A, 0x7A, 0x79, 0x35, 0x60, 0x77, 
   0x33, 0x30, 0x7C, 0x2D, 0x35, 0x9A, 0x51, 0x65, 0x95, 0x64, 0x7F, 0xB2, 0x59, 0x9D, 0x94, 0x2C, 
   0x68, 0x5B, 0x5E, 0x38, 0xA0, 0x73, 0x3D, 0xF6, 0x28, 0x5A, 0x92, 0x00, 0x89, 0x02, 0x37, 0x52, 
   0x38, 0xAC, 0x5F, 0xF0, 0x80, 0x99, 0xFF, 0x30, 0x71, 0xB1, 0x72, 0x63, 0x44, 0x7A, 0x55, 0x62, 
   0x05, 0x48, 0x8A, 0x00, 0x42, 0x80, 0x6D, 0x4F, 0x87, 0x70, 0x84, 0xAA, 0x5F, 0x73, 0x8E, 0x3C, 
   0x5C, 0x7C, 0x31, 0x62, 0x87, 0x3E, 0x4C, 0x82, 0x62, 0x4D, 0x83, 0x74, 0x92, 0xA0, 0x56, 0x6A, 
   0xD3, 0x22, 0x42, 0x7A, 0x4E, 0x8A, 0x5A, 0x5D, 0x7D, 0x53, 0x23, 0x21, 0x94, 0x00, 0x39, 0x97, 
   0x61, 0x4F, 0x7D, 0x77, 0x82, 0x81, 0x37, 0xCF, 0xFB, 0xAF, 0xB7, 0xDC, 0xAC, 0x35, 0x55, 0x00, 
   0x04, 0x1A, 0x00, 0x6B, 0x99, 0x6A, 0x7A, 0xFF, 0xBD, 0x9E, 0x7F, 0x93, 0xA2, 0x5B, 0x22, 0x26, 
   0xC5, 0x29, 0x23, 0x9A, 0x33, 0x8F, 0x4E, 0x3A, 0x79, 0x5E, 0x5A, 0x3A, 0x94, 0x73, 0x5D, 0xAD, 
   0x35, 0x5F, 0x80, 0x3C, 0x5C, 0x96, 0x97, 0xA6, 0x79, 0x5D, 0x8E, 0x7F, 0x17, 0x1B, 0x63, 0x4F, 
   0x49, 0x98, 0x81, 0xD2, 0xDC, 0x46, 0xB7, 0x9A, 0x32, 0x00, 0x36, 0x0F, 0x00, 0x4C, 0x28, 0x5E, 
   0x93, 0x70, 0xAE, 0xB8, 0x8E, 0xBB, 0x91, 0x33, 0x5E, 0x6A, 0x38, 0x39, 0xA3, 0x86, 0x81, 0xC4, 
   0x5B, 0x73, 0x7D, 0x00, 0x05, 0x42, 0x26, 0x39, 0x91, 0x83, 0x90, 0xA8, 0x4C, 0x43, 0x64, 0x41, 
   0x62, 0x75, 0x6E, 0xC9, 0xBA, 0x3A, 0x7C, 0xAE, 0x4A, 0x28, 0x68, 0x32, 0x0A, 0x57, 0x27, 0x65, 
   0x8B, 0x6C, 0x72, 0xB4, 0x56, 0x51, 0x5F, 0x1E, 0x36, 0x77, 0x5D, 0x71, 0xAC, 0x74, 0x94, 0xA6, 
   0x4C, 0x60, 0x82, 0x55, 0x57, 0x96, 0x47, 0x6B, 0x99, 0x12, 0x2B, 0x5D, 0x1F, 0x20, 0x19, 0x56, 
   0x61, 0x67, 0x64, 0x7B, 0xD3, 0x64, 0x7D, 0xD0, 0x5C, 0xA4, 0xAB, 0x33, 0x3A, 0x63, 0x37, 0x0A, 
   0x4B, 0x38, 0x2E, 0x9B, 0x45, 0x86, 0x95, 0x6E, 0xA9, 0x9A, 0x62, 0x63, 0x82, 0x22, 0x28, 0x59, 
   0x29, 0x45, 0x6B, 0x73, 0x84, 0xB5, 0x6C, 0x75, 0xA9, 0x82, 0x86, 0xB4, 0x52, 0x41, 0x97, 0x12, 
   0x2B, 0x74, 0x29, 0x82, 0x8B, 0x69, 0xA0, 0xC9, 0x5A, 0x5B, 0x84, 0x49, 0x17, 0x68, 0x65, 0x73, 
   0x91, 0x4D, 0xC3, 0xE8, 0x19, 0x4A, 0xAE, 0x52, 0x37, 0x61, 0x8A, 0x7F, 0x8D, 0x3F, 0x62, 0xD6, 
   0x00, 0x4A, 0x7E, 0x40, 0x18, 0x1E, 0x87, 0x8D, 0xAA, 0x88, 0xDE, 0xFF, 0x4D, 0x3E, 0x96, 0x33, 
   0x42, 0x49, 0x1B, 0xA6, 0x97, 0x3E, 0x4F, 0x8C, 0x62, 0x32, 0x98, 0x68, 0x81, 0xAE, 0x46, 0x59, 
   0x74, 0x19, 0x33, 0x69, 0x54, 0x63, 0xCB, 0x6D, 0xA3, 0x93, 0x73, 0x86, 0x7C, 0x49, 0x39, 0xAE, 
   0x37, 0x27, 0x8B, 0x68, 0x77, 0x9B, 0x4A, 0x93, 0x88, 0x0A, 0x54, 0x4A, 0x49, 0x1B, 0x90, 0x71, 
   0x77, 0xD0, 0x23, 0x9F, 0x9E, 0x52, 0x33, 0x70, 0x7B, 0x33, 0xAD, 0x42, 0x79, 0xA1, 0x3C, 0x91, 
   0x5D, 0x5A, 0x68, 0x9D, 0x71, 0x4F, 0xC5, 0x5F, 0x53, 0x87, 0x42, 0x3C, 0x9C, 0x57, 0x7A, 0xBB, 
   0x4F, 0x6E, 0x52, 0x37, 0x35, 0x35, 0x21, 0x48, 0x7D, 0x5C, 0x78, 0xBA, 0x74, 0x95, 0xB1, 0x2B, 
   0x4C, 0x74, 0x37, 0x41, 0x97, 0x8C, 0x7B, 0xBF, 0x64, 0x9E, 0xA3, 0x18, 0x86, 0x97, 0x2E, 0x2E, 
   0x7A, 0x68, 0x4F, 0xA2, 0x5D, 0x6C, 0xB8, 0x5C, 0x71, 0x78, 0x29, 0x60, 0x72, 0x2F, 0x28, 0x74, 
   0x48, 0x4C, 0x9A, 0x77, 0xA2, 0xFF, 0x71, 0x7F, 0xBF, 0x36, 0x39, 0x49, 0x13, 0x1D, 0x75, 0x3B, 
   0x7A, 0xA9, 0x70, 0xA9, 0x71, 0x4F, 0x5E, 0xA4, 0x54, 0x40, 0xC1, 0x64, 0x56, 0x76, 0x2F, 0x62, 
   0x87, 0x0D, 0x73, 0xA3, 0x48, 0x73, 0xAD, 0x8E, 0x62, 0x5C, 0x60, 0x56, 0x72, 0x15, 0x4B, 0x9B, 
   0x3C, 0x68, 0xB2, 0x8C, 0x96, 0x89, 0x6E, 0x6E, 0x72, 0x1B, 0x38, 0x9B, 0x00, 0x4D, 0x96, 0x28, 
   0x3D, 0x80, 0x8C, 0x6C, 0x92, 0x7D, 0x6E, 0xB9, 0x38, 0x85, 0x7A, 0x5E, 0x72, 0x84, 0x42, 0x3E, 
   0xAA, 0x37, 0x43, 0x86, 0x86, 0x7C, 0x95, 0x67, 0x81, 0x71, 0x04, 0x2F, 0x65, 0x1F, 0x39, 0x6C, 
   0x38, 0x4B, 0xB3, 0x6F, 0x86, 0xC0, 0x93, 0x77, 0x7B, 0x43, 0x55, 0x69, 0x2F, 0x70, 0xBC, 0x44, 
   0x80, 0x60, 0x3F, 0x2F, 0x50, 0x56, 0x45, 0xC8, 0x50, 0x7E, 0xB1, 0x3F, 0x61, 0x4F, 0x55, 0x3E, 
   0x5F, 0x3E, 0x39, 0xA5, 0x33, 0x62, 0xA7, 0x4B, 0x80, 0x91, 0x73, 0x5E, 0x7A, 0x40, 0x47, 0x75, 
   0x55, 0x69, 0xAE, 0x2C, 0x63, 0xA7, 0x4E, 0x69, 0x83, 0x4E, 0x57, 0x5B, 0x22, 0x3C, 0x73, 0x68, 
   0x55, 0xAE, 0x6F, 0xA6, 0xA4, 0x41, 0x83, 0x6C, 0x3A, 0x15, 0x9A, 0x50, 0x5F, 0xB1, 0x4A, 0x98, 
   0x9A, 0x2D, 0x48, 0x77, 0x29, 0x20, 0x7C, 0x5E, 0x7D, 0x83, 0x7C, 0xA1, 0xB1, 0x64, 0x79, 0xAA, 
   0x44, 0x5F, 0x7B, 0x14, 0x3A, 0x8B, 0x0F, 0x2E, 0x73, 0x56, 0x52, 0x46, 0x80, 0x87, 0x92, 0x5F, 
   0x88, 0xBE, 0x43, 0x33, 0x93, 0x38, 0x39, 0x9E, 0x5B, 0x74, 0x9D, 0x7D, 0x92, 0x7F, 0x53, 0x85, 
   0x89, 0x34, 0x54, 0x8E, 0x42, 0x2F, 0x98, 0x04, 0x2F, 0x7A, 0x34, 0x64, 0x54, 0x87, 0x7E, 0x85, 
   0x5C, 0x75, 0xBC, 0x30, 0x4F, 0xBE, 0x96, 0x6B, 0xB7, 0x67, 0x87, 0x75, 0x1A, 0x58, 0x79, 0x19, 
   0x4B, 0x79, 0x59, 0x45, 0x75, 0x8C, 0x7F, 0xC1, 0x4D, 0x90, 0xED, 0x18, 0x39, 0x3A, 0x35, 0x28, 
   0x2E, 0x4D, 0x6D, 0xDA, 0x70, 0x7F, 0xC4, 0x64, 0x74, 0x62, 0x35, 0x79, 0x7C, 0x1E, 0x4F, 0x77, 
   0x58, 0x5F, 0x9A, 0x91, 0x48, 0xA6, 0x35, 0x33, 0x84, 0x00, 0x7A, 0x7E, 0x5E, 0x98, 0x95, 0xB5, 
   0x80, 0xAB, 0x42, 0x39, 0x71, 0x07, 0x27, 0x82, 0x4B, 0x71, 0xA9, 0x51, 0x78, 0x7B, 0x36, 0x4B, 
   0x3E, 0x22, 0x25, 0x7B, 0x86, 0x84, 0xDB, 0xBB, 0xE0, 0xFE, 0x73, 0x7D, 0xC5, 0x12, 0x34, 0x41, 
   0x00, 0x31, 0x0C, 0x21, 0x37, 0x91, 0x75, 0x84, 0xFB, 0x8E, 0x9C, 0x9C, 0x54, 0x57, 0x72, 0x0E, 
   0x44, 0xB4, 0x42, 0x3F, 0x75, 0x50, 0x58, 0x32, 0x85, 0x7C, 0xA0, 0x58, 0x77, 0xE1, 0x35, 0x67, 
   0xB3, 0x73, 0x93, 0xA8, 0x7C, 0x73, 0x54, 0x18, 0x1B, 0x47, 0x00, 0x0A, 0x60, 0x3E, 0x70, 0x82, 
   0x99, 0xBE, 0xAF, 0x69, 0x71, 0xF6, 0x5E, 0x5B, 0xC2, 0x84, 0xA4, 0x79, 0x5E, 0x8A, 0x53, 0x00, 
   0x1A, 0x69, 0x07, 0x00, 0x8D, 0x83, 0x91, 0x7F, 0x9C, 0xD3, 0xD1, 0x88, 0x82, 0xD0, 0x3E, 0x60, 
   0x7C, 0x0C, 0x40, 0x60, 0x11, 0x33, 0x5D, 0x46, 0x5B, 0x63, 0x61, 0x58, 0x60, 0x70, 0x5B, 0xAF, 
   0x8D, 0x8B, 0xCD, 0x35, 0xA7, 0x88, 0x00, 0x50, 0x85, 0x84, 0x2C, 0x5C, 0x8A, 0x5A, 0x5D, 0x0C, 
   0x73, 0x99, 0x33, 0x96, 0xD4, 0xAA, 0x98, 0xD2, 0x46, 0x59, 0x72, 0x00, 0x00, 0x2A, 0x27, 0x00, 
   0x5D, 0x5D, 0x8F, 0xB0, 0x72, 0xB5, 0xAE, 0x68, 0x82, 0x8D, 0x5C, 0x47, 0x8D, 0x6A, 0x77, 0xA8, 
   0x4B, 0x62, 0xA0, 0x00, 0x1C, 0x5E, 0x4A, 0x2F, 0x42, 0x89, 0xA3, 0xC5, 0x5B, 0x98, 0xB9, 0x16, 
   0x0F, 0x35, 0x23, 0x2C, 0x51, 0xA2, 0xA6, 0xA9, 0x64, 0xAB, 0x9F, 0x01, 0x53, 0x8D, 0x44, 0x00, 
   0x76, 0x50, 0x6D, 0x82, 0x57, 0x80, 0x94, 0x57, 0x36, 0x73, 0x40, 0x42, 0xA6, 0x3A, 0x7D, 0xA1, 
   0x6E, 0xA6, 0x78, 0x62, 0x76, 0xBA, 0x59, 0x50, 0xA6, 0x00, 0x25, 0x31, 0x00, 0x2C, 0x36, 0x5E, 
   0x57, 0x63, 0xBC, 0x83, 0xC3, 0x98, 0xC2, 0xFF, 0x0B, 0x6B, 0x6B, 0x00, 0x02, 0x08, 0x38, 0x13, 
   0x8B, 0x86, 0xAF, 0xD7, 0x92, 0x99, 0xAD, 0x45, 0x47, 0x61, 0x1B, 0x44, 0x5A, 0x10, 0x32, 0x88, 
   0x4C, 0x30, 0x9A, 0xA3, 0xCB, 0x72, 0x6E, 0x6B, 0xC8, 0x8A, 0x71, 0xE9, 0x43, 0x65, 0x7A, 0x2E, 
   0x64, 0x5C, 0x21, 0x4D, 0xB6, 0x29, 0x53, 0x94, 0x5F, 0x61, 0x56, 0x95, 0x91, 0x98, 0x67, 0x81, 
   0xFF, 0x37, 0x69, 0xAE, 0x2A, 0x88, 0x44, 0x57, 0x58, 0x5F, 0x62, 0x51, 0xD7, 0x5B, 0x6E, 0xBF, 
   0x1D, 0x58, 0x34, 0x45, 0x6F, 0x61, 0x5D, 0x6F, 0xA8, 0x69, 0x4D, 0x94, 0x47, 0x59, 0xB1, 0x58, 
   0x92, 0xAC, 0x62, 0x59, 0xAB, 0x28, 0x73, 0x92, 0x38, 0x70, 0x74, 0x3F, 0x2A, 0x96, 0x46, 0x1B, 
   0x8B, 0x32, 0x5E, 0x7C, 0x69, 0xC3, 0x95, 0xA3, 0xD3, 0xE5, 0x6D, 0x41, 0xA4, 0x20, 0x0A, 0x5D, 
   0x40, 0x76, 0x8E, 0x61, 0xA3, 0xA8, 0x38, 0x30, 0x52, 0x49, 0x13, 0x5E, 0x54, 0x81, 0x9A, 0x21, 
   0x93, 0xBF, 0x4B, 0x55, 0x9E, 0x86, 0x43, 0x9D, 0x4E, 0x5B, 0x7A, 0x21, 0x7A, 0x7A, 0x60, 0x80, 
   0xAD, 0x98, 0x85, 0xA8, 0x2A, 0x6B, 0x6F, 0x0C, 0x19, 0xB7, 0x73, 0x5D, 0x93, 0x63, 0x7A, 0x53, 
   0x61, 0x6E, 0x8F, 0x2B, 0x61, 0x78, 0x0F, 0x23, 0x53, 0x39, 0x3C, 0x8A, 0x65, 0x7E, 0xD9, 0x83, 
   0xB9, 0xDB, 0x88, 0x5D, 0xA6, 0x19, 0x1E, 0x55, 0x1E, 0x69, 0x73, 0x68, 0xC0, 0xE0, 0x6E, 0x79, 
   0xBD, 0x3F, 0x00, 0x44, 0x05, 0x31, 0x71, 0x39, 0x9E, 0xCD, 0x8B, 0x72, 0x95, 0x5F, 0x50, 0x6D, 
   0x43, 0x67, 0x8B, 0x6F, 0x7E, 0xD5, 0x35, 0x5B, 0xA5, 0x13, 0x2D, 0x5D, 0x8B, 0x66, 0x73, 0x7B, 
   0x73, 0x87, 0x30, 0x69, 0xDD, 0x3B, 0x7A, 0xA3, 0x64, 0x62, 0x73, 0x4E, 0x34, 0x6D, 0x6A, 0x67, 
   0x6F, 0x48, 0x79, 0xD1, 0x43, 0x45, 0xCB, 0x4F, 0x50, 0x72, 0x71, 0x67, 0x3D, 0x42, 0x7E, 0x8D, 
   0x1E, 0x56, 0xC1, 0x45, 0x55, 0x8E, 0x6E, 0x5A, 0x60, 0x5C, 0x5A, 0x7E, 0x38, 0x77, 0xDB, 0x20, 
   0x76, 0xB3, 0x43, 0x2B, 0x61, 0x50, 0x54, 0x77, 0x36, 0x7D, 0xAA, 0x48, 0x62, 0x83, 0x87, 0x78, 
   0x8E, 0x3C, 0x71, 0xBA, 0x42, 0x49, 0x95, 0x96, 0x59, 0x6A, 0x5B, 0x6A, 0x4E, 0x04, 0x79, 0x94, 
   0x3C, 0x44, 0xC3, 0x54, 0x10, 0xA5, 0x39, 0x57, 0x4F, 0x4C, 0xA9, 0x72, 0x59, 0x60, 0xAD, 0x75, 
   0x3D, 0xAD, 0x5D, 0x80, 0x7E, 0x34, 0x7F, 0x55, 0x49, 0x44, 0xA4, 0x48, 0x42, 0x98, 0x2B, 0x20, 
   0x65, 0x2C, 0x60, 0x87, 0x78, 0x96, 0x93, 0x73, 0x58, 0x61, 0x2F, 0x3C, 0x7A, 0x56, 0x6A, 0xD6, 
   0x55, 0x81, 0xA2, 0x37, 0x58, 0x28, 0x37, 0x4C, 0x61, 0x38, 0x47, 0xCF, 0x67, 0x5F, 0xA2, 0x63, 
   0x77, 0x57, 0x46, 0x66, 0x80, 0x51, 0x66, 0xAF, 0x62, 0x7C, 0xA4, 0x3F, 0x54, 0x70, 0x1D, 0x32, 
   0x7C, 0x5C, 0x7C, 0xA5, 0x63, 0x87, 0x9A, 0x2B, 0x27, 0x78, 0x5E, 0x56, 0xA5, 0x8B, 0xC8, 0xAF, 
   0x35, 0x76, 0x69, 0x28, 0x00, 0x6D, 0x3E, 0x4B, 0x8F, 0x60, 0xAD, 0x8F, 0x22, 0x41, 0x52, 0x41, 
   0x36, 0x6C, 0x71, 0x55, 0xDC, 0x67, 0x6F, 0xB7, 0x50, 0x98, 0x99, 0x44, 0x70, 0x92, 0x5A, 0x4C, 
   0x85, 0x69, 0x66, 0x94, 0x40, 0x6B, 0xA4, 0x38, 0x53, 0x6F, 0x1C, 0x36, 0x75, 0x2F, 0x33, 0x50, 
   0x6C, 0x65, 0xAB, 0x8C, 0xAD, 0xFE, 0x75, 0x90, 0xB3, 0x3F, 0x49, 0x8D, 0x1B, 0x58, 0x73, 0x59, 
   0x57, 0x50, 0x64, 0x67, 0xB2, 0x25, 0x67, 0xAD, 0x59, 0x35, 0x70, 0x48, 0x74, 0x9E, 0x48, 0xA2, 
   0xC5, 0x5E, 0x5D, 0x91, 0x63, 0x5B, 0x72, 0x34, 0x5A, 0x82, 0x17, 0x55, 0x77, 0x58, 0x66, 0x9A, 
   0x7C, 0x6D, 0xA6, 0x5F, 0x62, 0x84, 0x30, 0x62, 0x8F, 0x2F, 0x4C, 0x7E, 0x41, 0x69, 0xA7, 0x6F, 
   0x75, 0xC8, 0x58, 0x7B, 0x81, 0x14, 0x6E, 0x25, 0x53, 0x66, 0x77, 0x87, 0x38, 0xF7, 0x3C, 0x50, 
   0xB8, 0x00, 0x5E, 0x1E, 0x56, 0x89, 0x52, 0xC9, 0x84, 0xEF, 0x60, 0x8E, 0xEF, 0x00, 0x64, 0x63, 
   0x2E, 0x29, 0x4E, 0x58, 0x5B, 0x70, 0x54, 0x7E, 0x8F, 0x66, 0x57, 0xC9, 0x54, 0x72, 0xB1, 0x43, 
   0x56, 0x59, 0x38, 0x2F, 0x5F, 0x55, 0x8C, 0xC1, 0x52, 0x7D, 0xA1, 0x58, 0x3A, 0x85, 0x63, 0xA0, 
   0xBC, 0x8A, 0x98, 0x7B, 0x38, 0x35, 0x7F, 0x00, 0x00, 0x78, 0x39, 0x52, 0x4C, 0x81, 0x8F, 0x84, 
   0x41, 0x86, 0xEF, 0x92, 0x91, 0xDE, 0xC8, 0x5D, 0x7A, 0x0D, 0x1D, 0x3E, 0x00, 0x83, 0x8D, 0x5D, 
   0x6D, 0xC6, 0xB6, 0x5D, 0x5A, 0x5C, 0x69, 0x45, 0x3E, 0x6A, 0xDC, 0x5E, 0x86, 0xFE, 0x5C, 0x84, 
   0x7D, 0x3D, 0x75, 0x51, 0x2B, 0x12, 0x81, 0x31, 0x29, 0x6A, 0x46, 0x7C, 0x61, 0x7C, 0x80, 0x9E, 
   0x8E, 0x98, 0xC3, 0x58, 0x96, 0xD4, 0x18, 0x32, 0x7C, 0x34, 0x26, 0x63, 0x79, 0x8E, 0x9C, 0x74, 
   0xA6, 0x99, 0x46, 0x5C, 0x89, 0x51, 0x49, 0xA6, 0x6C, 0x8C, 0xC6, 0x59, 0x8A, 0x83, 0x29, 0x32, 
   0x30, 0x17, 0x1F, 0x3C, 0x3C, 0x2D, 0xAC, 0x9A, 0xC0, 0xD1, 0xA5, 0xDC, 0x92, 0x0F, 0x2E, 0x7A, 
   0x03, 0x09, 0x7F, 0x9D, 0x6F, 0x89, 0x5D, 0x81, 0x93, 0x0B, 0x31, 0x6A, 0x42, 0x74, 0xA8, 0x37, 
   0x68, 0x90, 0x39, 0x03, 0x2F, 0x59, 0x5B, 0x6A, 0x72, 0xBF, 0xC8, 0x82, 0x9D, 0xAD, 0x42, 0x4A, 
   0x6D, 0x18, 0x20, 0x73, 0x51, 0x70, 0x96, 0x73, 0x98, 0xC3, 0x34, 0x31, 0x56, 0x28, 0x3D, 0x78, 
   0x50, 0x93, 0xC2, 0x72, 0x76, 0x76, 0x34, 0x35, 0x58, 0x2E, 0x2F, 0x7A, 0x52, 0x57, 0x87, 0x71, 
   0x6A, 0xAF, 0x76, 0x7B, 0x81, 0x58, 0x6A, 0x70, 0x2D, 0x10, 0x81, 0x05, 0x5C, 0x94, 0x40, 0xB3, 
   0xAB, 0x92, 0x7E, 0x9E, 0x8B, 0x6F, 0x6E, 0x2D, 0x3E, 0x61, 0x00, 0x1B, 0x89, 0x44, 0x3A, 0xA7, 
   0x64, 0x8D, 0x8A, 0x71, 0x89, 0x62, 0x50, 0x5B, 0x9C, 0x50, 0x50, 0x9C, 0x6B, 0x94, 0xA2, 0x69, 
   0x87, 0xBC, 0x17, 0x35, 0x5F, 0x17, 0x00, 0x43, 0x4D, 0x78, 0xA1, 0x7D, 0xDD, 0xFF, 0x67, 0x82, 
   0xB4, 0x44, 0x4B, 0x5C, 0x6F, 0x59, 0x5A, 0x44, 0x5C, 0xD0, 0x05, 0x40, 0x8B, 0x34, 0x4D, 0x5D, 
   0x9C, 0x98, 0xA1, 0x51, 0xB9, 0xBE, 0x16, 0x39, 0x79, 0x11, 0x00, 0x4C, 0x63, 0xA6, 0x93, 0x7C, 
   0x75, 0xEA, 0x65, 0x5F, 0xB1, 0x5C, 0x9C, 0x70, 0x21, 0x60, 0x73, 0x11, 0x00, 0x63, 0x3C, 0x35, 
   0x87, 0x7F, 0xC2, 0xC2, 0x86, 0xAC, 0xA1, 0x63, 0x5F, 0xAC, 0x3E, 0x35, 0xAA, 0x46, 0x6C, 0x95, 
   0x55, 0x8C, 0x75, 0x10, 0x34, 0x56, 0x43, 0x28, 0x73, 0x7C, 0x79, 0xA2, 0x27, 0x8C, 0x8D, 0x27, 
   0x48, 0x6D, 0x61, 0x37, 0xBE, 0x46, 0x71, 0xA8, 0x2C, 0x84, 0x64, 0x72, 0x68, 0x8B, 0x94, 0x57, 
   0xB3, 0x4D, 0x7D, 0x7F, 0x11, 0x54, 0x9A, 0x2C, 0x47, 0x92, 0x44, 0x5D, 0x7A, 0x78, 0x68, 0x8B, 
   0x44, 0x5C, 0x85, 0x21, 0x4A, 0x8B, 0x43, 0x55, 0x85, 0x29, 0x2F, 0x65, 0x48, 0x49, 0x91, 0xB0, 
   0xAC, 0xEE, 0x71, 0x8A, 0x98, 0x0D, 0x2E, 0x4E, 0x23, 0x29, 0x93, 0x85, 0x7F, 0xA5, 0x79, 0x8A, 
   0xB6, 0x33, 0x71, 0x92, 0x1B, 0x31, 0x5E, 0x28, 0x26, 0x88, 0x5E, 0x7D, 0xBD, 0x8D, 0xA0, 0xC3, 
   0x8B, 0x66, 0x98, 0x00, 0x32, 0x4D, 0x16, 0x3E, 0x8A, 0x67, 0x9A, 0xA0, 0x6F, 0x6D, 0x73, 0x58, 
   0x44, 0xA2, 0x40, 0x61, 0xCB, 0x34, 0x67, 0x9B, 0x40, 0x6E, 0x3E, 0x47, 0x73, 0x71, 0x5B, 0x5C, 
   0xB7, 0x83, 0x67, 0xA8, 0x4F, 0x6D, 0x8B, 0x1A, 0x62, 0xB2, 0x4E, 0x5C, 0x82, 0x9D, 0x89, 0x5E, 
   0x4B, 0x6B, 0x7A, 0x00, 0x1A, 0xA3, 0x34, 0x4D, 0x7C, 0x97, 0x77, 0x8F, 0x91, 0x83, 0xB2, 0x3D, 
   0x6B, 0xC1, 0x00, 0x52, 0x75, 0x08, 0x3B, 0x52, 0x89, 0x4D, 0x97, 0x70, 0x8E, 0xB4, 0x48, 0x72, 
   0x8D, 0x58, 0x6C, 0xA2, 0x3A, 0x49, 0x72, 0x2A, 0x43, 0x71, 0x85, 0x99, 0x99, 0x7D, 0x8C, 0xAA, 
   0x25, 0x44, 0x8B, 0x0C, 0x09, 0x4B, 0x24, 0x5A, 0x84, 0x44, 0x79, 0x98, 0x92, 0x81, 0x85, 0x6B, 
   0x6B, 0xBF, 0x53, 0x64, 0xAD, 0x50, 0x84, 0x66, 0x26, 0x38, 0x4E, 0x30, 0x2B, 0xA3, 0x3C, 0x69, 
   0xCB, 0x54, 0x71, 0x5D, 0x4A, 0x56, 0x46, 0x4B, 0x69, 0x88, 0x6D, 0x64, 0xC4, 0x44, 0x76, 0xAE, 
   0x3E, 0x5F, 0x74, 0x43, 0x53, 0x73, 0x33, 0x53, 0x90, 0x3F, 0x59, 0xA3, 0x6D, 0x87, 0xB9, 0x4B, 
   0x76, 0x62, 0x34, 0x26, 0x68, 0x56, 0x54, 0xB2, 0x56, 0x93, 0x85, 0x23, 0x4F, 0x58, 0x4C, 0x33, 
   0x92, 0x64, 0x83, 0x94, 0x5E, 0x71, 0x9B, 0x63, 0x3D, 0xC1, 0x29, 0x58, 0x7B, 0x23, 0x53, 0x6E, 
   0x6F, 0x54, 0xA6, 0x87, 0x87, 0x79, 0x6E, 0x81, 0x90, 0x10, 0x3B, 0xAD, 0x0F, 0x45, 0x74, 0x39, 
   0x2A, 0x42, 0x65, 0x78, 0xA1, 0x89, 0xB4, 0xD8, 0x50, 0x7C, 0x95, 0x2D, 0x47, 0x9F, 0x5A, 0x51, 
   0x9D, 0x54, 0x51, 0x84, 0x5A, 0x8A, 0x71, 0x6F, 0x6D, 0x8D, 0x34, 0x3E, 0x77, 0x00, 0x1D, 0x89, 
   0x4E, 0x5F, 0x97, 0xB1, 0xC4, 0x9A, 0x30, 0x97, 0xBD, 0x35, 0x4A, 0xA0, 0x8F, 0x4E, 0x81, 0x66, 
   0x7A, 0x90, 0x25, 0x67, 0x88, 0x14, 0x34, 0x4A, 0x49, 0x46, 0x5E, 0x8F, 0x81, 0xF5, 0x83, 0x8D, 
   0xE4, 0x47, 0x85, 0x58, 0x2D, 0x32, 0x65, 0x1C, 0x2A, 0x87, 0x40, 0x53, 0x9F, 0x7B, 0x61, 0xA6, 
   0x5F, 0x69, 0x84, 0x2D, 0x87, 0x8F, 0x66, 0x7B, 0x84, 0x92, 0x51, 0x9B, 0x45, 0x45, 0xAB, 0x00, 
   0x4D, 0x77, 0x41, 0xB5, 0x81, 0x9F, 0x97, 0x76, 0x5C, 0x29, 0x6D, 0x28, 0x28, 0xA3, 0x55, 0x68, 
   0xDD, 0x8D, 0x97, 0xB3, 0x42, 0x5E, 0x43, 0x0D, 0x30, 0x3E, 0x30, 0x65, 0x97, 0x72, 0x89, 0xFC, 
   0x5D, 0x8E, 0xD9, 0x5C, 0x53, 0x63, 0x54, 0x40, 0x43, 0x15, 0x4F, 0x9E, 0x3D, 0x44, 0xB5, 0x89, 
   0x68, 0x5A, 0x56, 0x8C, 0x83, 0x1D, 0x66, 0xB2, 0x4B, 0x4A, 0xB7, 0x74, 0xB0, 0x7C, 0x73, 0x76, 
   0x4D, 0x33, 0x25, 0x7B, 0x0C, 0x4E, 0x9F, 0x63, 0x73, 0x9B, 0x88, 0x97, 0x8A, 0x41, 0x7A, 0x91, 
   0x7A, 0x51, 0xB3, 0x9F, 0x55, 0x84, 0x40, 0x7C, 0x55, 0x00, 0x48, 0x99, 0x0B, 0x23, 0xBC, 0x70, 
   0xBF, 0x7E, 0xC9, 0xDD, 0x9B, 0x78, 0x2A, 0xA0, 0x19, 0x11, 0x84, 0x0C, 0x83, 0x72, 0x5D, 0x84, 
   0xC1, 0x91, 0x6D, 0x99, 0x5E, 0x60, 0x6F, 0x19, 0x27, 0x6E, 0x52, 0x51, 0x97, 0x7A, 0xBE, 0x92, 
   0x42, 0x90, 0x9E, 0x59, 0x28, 0x94, 0x97, 0x5B, 0xAB, 0x29, 0x89, 0x8E, 0x0D, 0x67, 0x76, 0x9B, 
   0x66, 0x9D, 0x6E, 0x5A, 0x7C, 0x08, 0x39, 0x72, 0x75, 0x6E, 0xB2, 0xA7, 0xD5, 0xD8, 0x49, 0xA3, 
   0x74, 0x00, 0x00, 0x43, 0x2E, 0x00, 0x5A, 0x68, 0x92, 0xB7, 0x3C, 0x90, 0xAD, 0x32, 0x5D, 0x7A, 
   0x6D, 0x5D, 0x86, 0x7F, 0x7F, 0xAE, 0x6A, 0x94, 0xB7, 0x28, 0x4C, 0x5E, 0x04, 0x06, 0x3B, 0x59, 
   0x68, 0x9D, 0x5B, 0x8C, 0xB5, 0x09, 0x33, 0x55, 0x72, 0x24, 0x84, 0x9B, 0xC6, 0xB3, 0x56, 0x9F, 
   0x9D, 0x2C, 0x3B, 0x86, 0x4C, 0x4F, 0xA2, 0x40, 0x6B, 0x7F, 0x56, 0x6F, 0x83, 0x4A, 0x52, 0x8E, 
   0x43, 0x52, 0x9F, 0x0B, 0x4D, 0x6B, 0x4D, 0x61, 0x3F, 0x7E, 0x85, 0xAE, 0x8F, 0x79, 0xF3, 0x70, 
   0x7B, 0xBC, 0x00, 0x3F, 0x4B, 0x0B, 0x00, 0x06, 0x6E, 0x4B, 0x7C, 0x7B, 0xF5, 0xFF, 0x64, 0xC7, 
   0xA6, 0x45, 0x44, 0x42, 0x1C, 0x23, 0x67, 0x38, 0x32, 0x7E, 0x45, 0x51, 0x96, 0x69, 0x7B, 0x86, 
   0x59, 0x88, 0x91, 0x3C, 0x39, 0x74, 0x47, 0x73, 0x6A, 0x3C, 0x78, 0x49, 0x5F, 0x77, 0xDE, 0x6B, 
   0x65, 0xB7, 0x48, 0x3C, 0x5B, 0x52, 0x65, 0x77, 0x2F, 0x6C, 0xD9, 0x19, 0x69, 0xB1, 0x54, 0xA2, 
   0x61, 0x9F, 0x83, 0x89, 0x69, 0x25, 0xDD, 0x0B, 0x40, 0x97, 0x1C, 0x68, 0x3A, 0x45, 0x70, 0x8A, 
   0x8B, 0x97, 0xD0, 0x73, 0x57, 0xB9, 0x1C, 0x38, 0x5C, 0x15, 0x64, 0x78, 0x45, 0x21, 0x8A, 0x70, 
   0x5C, 0x87, 0x7C, 0xCF, 0xCC, 0x4D, 0x4C, 0x98, 0x1E, 0x07, 0x70, 0x19, 0x5E, 0x87, 0x5B, 0x9A, 
   0x94, 0x9B, 0xAB, 0xB7, 0x62, 0x36, 0xB0, 0x33, 0x0C, 0x76, 0x59, 0xA0, 0xA8, 0x62, 0xB6, 0xD3, 
   0x16, 0x2A, 0x58, 0x32, 0x00, 0x51, 0x6B, 0x72, 0xA6, 0x33, 0x8A, 0xA7, 0x4A, 0x40, 0x75, 0x6C, 
   0x30, 0x8C, 0x2D, 0x7B, 0x77, 0x1E, 0x6C, 0x7F, 0x6A, 0x56, 0xE2, 0xA4, 0x83, 0xB9, 0x59, 0x65, 
   0x68, 0x07, 0x3D, 0xB6, 0x4F, 0x59, 0xA8, 0x60, 0xA3, 0x51, 0x3D, 0x57, 0x73, 0x1B, 0x33, 0xA2, 
   0x4A, 0x3E, 0x98, 0x73, 0x61, 0x98, 0x58, 0x62, 0x9C, 0x52, 0x5D, 0x8B, 0x63, 0x5D, 0x80, 0x2F, 
   0x31, 0x54, 0x41, 0x66, 0x89, 0x69, 0xAC, 0xD6, 0x63, 0x67, 0xA9, 0x39, 0x28, 0x74, 0x27, 0x5B, 
   0x7F, 0x60, 0xA6, 0xAD, 0x5B, 0x6C, 0x92, 0x3A, 0x15, 0x49, 0x41, 0x70, 0xC7, 0x73, 0x87, 0xE3, 
   0x39, 0x64, 0x5D, 0x1C, 0x31, 0x5A, 0x4F, 0x65, 0x7C, 0x61, 0x72, 0x8F, 0x3F, 0x7D, 0x9B, 0x3F, 
   0x4E, 0xAB, 0x66, 0x48, 0x8E, 0x4A, 0x3E, 0x65, 0x1D, 0x79, 0x99, 0x41, 0x7F, 0xA5, 0x66, 0x62, 
   0x93, 0x7E, 0x44, 0x77, 0x60, 0x5B, 0x78, 0x3C, 0x7E, 0xC9, 0x3B, 0x6D, 0xC8, 0x4C, 0x5A, 0x6A, 
   0x6D, 0x48, 0x51, 0x28, 0x63, 0x69, 0x0C, 0x4D, 0xC6, 0x7A, 0x76, 0xBB, 0x9C, 0x6B, 0x7A, 0x3E, 
   0x64, 0x62, 0x07, 0x52, 0x8F, 0x12, 0x56, 0xA0, 0x54, 0x34, 0x61, 0x79, 0x69, 0x8F, 0x58, 0x70, 
   0xB8, 0x4C, 0x4F, 0x6D, 0x34, 0x6C, 0x60, 0x2E, 0x82, 0x89, 0x5C, 0x7B, 0xE9, 0x8F, 0x69, 0x86, 
   0x4D, 0x56, 0x3E, 0x00, 0x5F, 0x47, 0x17, 0x36, 0x54, 0x58, 0x20, 0x96, 0x5C, 0x5C, 0xC2, 0x59, 
   0xB3, 0xA2, 0x75, 0x63, 0xAD, 0x57, 0x3A, 0xA0, 0x32, 0x66, 0x5F, 0x1A, 0x5F, 0x6F, 0x58, 0x42, 
   0xA7, 0x5F, 0x47, 0x79, 0x2C, 0x38, 0x41, 0x43, 0x6D, 0xA9, 0x5A, 0x91, 0xB6, 0x3E, 0x59, 0x5C, 
   0x33, 0x48, 0x7F, 0x50, 0x59, 0xAE, 0x6E, 0x5A, 0xA3, 0x62, 0x77, 0x7A, 0x28, 0x59, 0x6E, 0x3E, 
   0x3C, 0xBD, 0x5A, 0x69, 0x95, 0x38, 0x58, 0x45, 0x17, 0x3E, 0x73, 0x7A, 0x84, 0xB9, 0x6A, 0x90, 
   0x77, 0x48, 0x45, 0x9F, 0x4D, 0x4A, 0xC7, 0x62, 0x9D, 0x8D, 0x33, 0x46, 0x74, 0x06, 0x00, 0x61, 
   0x52, 0x6F, 0x6D, 0xAF, 0xD8, 0xB8, 0x53, 0x71, 0x80, 0x17, 0x0E, 0x6F, 0x21, 0x29, 0xA3, 0x44, 
   0x75, 0x9D, 0x4C, 0x6C, 0x55, 0x4E, 0x5C, 0x7F, 0x6B, 0x63, 0xE3, 0x66, 0x74, 0xA5, 0x27, 0x69, 
   0x9E, 0x39, 0x5E, 0x7A, 0x83, 0x6A, 0x7E, 0x4A, 0x75, 0x73, 0x38, 0x53, 0xA1, 0x5D, 0x6A, 0xB2, 
   0x40, 0x65, 0x62, 0x0E, 0x49, 0x68, 0x67, 0x83, 0xA3, 0x91, 0x8F, 0xB1, 0x69, 0x6C, 0xCE, 0x2E, 
   0x59, 0xB4, 0x2D, 0x35, 0x3F, 0x44, 0x46, 0x34, 0x5C, 0x8C, 0xDB, 0x68, 0x71, 0xB6, 0x7D, 0x75, 
   0x88, 0x4C, 0x62, 0xB8, 0x00, 0x54, 0x56, 0x3F, 0x47, 0x71, 0x85, 0x31, 0x9F, 0x4D, 0x56, 0x8F, 
   0x15, 0x92, 0x94, 0x60, 0x7D, 0x7E, 0x89, 0x76, 0x95, 0x48, 0x63, 0xB1, 0x2E, 0x2E, 0x82, 0x0B, 
   0x62, 0x5F, 0x36, 0x74, 0x71, 0x89, 0x64, 0xC9, 0x69, 0x64, 0xA2, 0x3C, 0x53, 0x65, 0x5D, 0x75, 
   0xAA, 0x93, 0x7A, 0xF8, 0x3F, 0x5B, 0x82, 0x00, 0x2D, 0x00, 0x08, 0x36, 0x39, 0xC5, 0x8A, 0xFF, 
   0xBD, 0xBF, 0xFF, 0x4E, 0x7F, 0xAC, 0x28, 0x47, 0x5B, 0x2C, 0x44, 0x47, 0x3D, 0x39, 0x59, 0x56, 
   0x69, 0xC2, 0x80, 0x8D, 0xB8, 0x63, 0x50, 0x79, 0x46, 0x88, 0x9E, 0x60, 0x7B, 0x97, 0x26, 0x24, 
   0x53, 0x11, 0x15, 0x83, 0x5F, 0x5E, 0xA9, 0x85, 0xE4, 0xB1, 0x54, 0x9B, 0xCE, 0x7C, 0x64, 0xB9, 
   0x9A, 0x3E, 0x43, 0x11, 0x58, 0x47, 0x00, 0x41, 0xA8, 0x49, 0x70, 0xB0, 0x97, 0x67, 0x62, 0x65, 
   0x5E, 0x7F, 0x32, 0x92, 0xC4, 0x80, 0x97, 0xBD, 0x4B, 0x4A, 0x5F, 0x18, 0x1B, 0x30, 0x47, 0x55, 
   0x82, 0x61, 0x86, 0xE0, 0x7F, 0x8F, 0x9D, 0x84, 0x8F, 0x7F, 0x4D, 0x6A, 0xAA, 0x01, 0x55, 0x8B, 
   0x3A, 0x43, 0x34, 0x7A, 0x49, 0x6A, 0x70, 0x8A, 0xBD, 0x4D, 0xA1, 0xC9, 0x51, 0x6B, 0x77, 0x06, 
   0x25, 0x53, 0x62, 0x43, 0xA3, 0x7B, 0x84, 0x9A, 0x3E, 0x70, 0x7A, 0x49, 0x99, 0xB4, 0x86, 0x97, 
   0xDA, 0x6C, 0x8B, 0x8C, 0x34, 0x3B, 0x48, 0x00, 0x00, 0x41, 0x12, 0x13, 0x81, 0x8E, 0xB3, 0xA2, 
   0xC5, 0xC7, 0xB0, 0x5E, 0x6B, 0xA9, 0x27, 0x5C, 0x7F, 0x5D, 0x4D, 0x76, 0x39, 0x29, 0x6A, 0x0B, 
   0x25, 0x55, 0x4B, 0x82, 0xBD, 0x7A, 0x7D, 0xB2, 0x3D, 0x23, 0x5D, 0x34, 0x3D, 0x5E, 0x9C, 0xBD, 
   0xBB, 0x8F, 0xBC, 0xBB, 0x1A, 0x24, 0x75, 0x29, 0x32, 0x62, 0x5B, 0x85, 0xA5, 0x6C, 0x5C, 0x93, 
   0x1C, 0x0C, 0x2D, 0x07, 0x26, 0x69, 0x55, 0x87, 0xCD, 0xB3, 0xC8, 0xBE, 0x8A, 0xA3, 0xBB, 0x19, 
   0x37, 0x82, 0x05, 0x00, 0x1E, 0x22, 0x1B, 0x62, 0x53, 0xB4, 0xA9, 0xA4, 0xC2, 0xA5, 0x86, 0x80, 
   0xA4, 0x05, 0x48, 0x75, 0x00, 0x1D, 0x69, 0x50, 0x29, 0x86, 0x87, 0x9D, 0x97, 0x71, 0x83, 0x7B, 
   0x47, 0x4A, 0x70, 0x2A, 0x65, 0xAE, 0x40, 0x7E, 0x97, 0x3A, 0x94, 0x9D, 0x25, 0x38, 0x70, 0x5B, 
   0x32, 0x72, 0x95, 0x7E, 0xCF, 0x7D, 0xB1, 0xE5, 0x30, 0x44, 0x70, 0x18, 0x37, 0x24, 0x68, 0x6A, 
   0x97, 0x7A, 0x8D, 0xDD, 0x2A, 0x7C, 0xAF, 0x2A, 0x3C, 0x5E, 0x7F, 0x64, 0x85, 0x57, 0xAD, 0xA1, 
   0x39, 0x40, 0x91, 0x39, 0x16, 0x8B, 0x72, 0x99, 0xA1, 0x39, 0x71, 0x9B, 0x39, 0x32, 0x83, 0x45, 
   0x5F, 0x6C, 0x5D, 0x5A, 0x73, 0x48, 0x3A, 0xBA, 0x45, 0x50, 0xAC, 0x79, 0xB4, 0x9B, 0x73, 0xD0, 
   0xBC, 0x2D, 0x26, 0x93, 0x37, 0x11, 0x86, 0x6F, 0x70, 0xA6, 0x51, 0x7C, 0x82, 0x23, 0x76, 0x76, 
   0x50, 0x41, 0x9D, 0x6C, 0x68, 0xAE, 0x1C, 0x61, 0x74, 0x2D, 0x33, 0x62, 0x72, 0x45, 0xA6, 0x50, 
   0x6E, 0x7F, 0x17, 0x70, 0x53, 0x57, 0x60, 0x9A, 0x85, 0x70, 0xCF, 0x40, 0x58, 0x85, 0x1D, 0x52, 
   0x93, 0x5B, 0x47, 0xB9, 0x6D, 0x6F, 0x67, 0x55, 0x6F, 0x66, 0x31, 0x5D, 0x7E, 0x0F, 0x4A, 0x7A, 
   0x4A, 0x4A, 0xAF, 0x74, 0x5D, 0xBF, 0x5A, 0x7A, 0x79, 0x80, 0x90, 0x94, 0x44, 0x45, 0x76, 0x00, 
   0x17, 0x44, 0x22, 0x47, 0x75, 0xAD, 0xB6, 0xE4, 0x7F, 0x89, 0xB7, 0x27, 0x3E, 0x71, 0x08, 0x37, 
   0x6B, 0x2C, 0x61, 0x73, 0x68, 0x8A, 0xC6, 0x80, 0x94, 0xD8, 0x6D, 0x36, 0x75, 0x00, 0x1D, 0x57, 
   0x15, 0x51, 0xB6, 0x88, 0x75, 0x93, 0x78, 0x7C, 0x60, 0x21, 0x4F, 0x9F, 0x2B, 0x65, 0xD2, 0x4D, 
   0x6F, 0x7A, 0x32, 0x36, 0x46, 0x5A, 0x59, 0x7A, 0x56, 0x7D, 0xD2, 0x46, 0x7E, 0xBB, 0x5E, 0x72, 
   0x53, 0x3D, 0x4F, 0x6E, 0x4F, 0x44, 0x8C, 0x70, 0x7D, 0x8E, 0x5C, 0x77, 0xB1, 0x11, 0x3D, 0xBB, 
   0x29, 0x53, 0x58, 0x91, 0x6F, 0x74, 0x85, 0x80, 0xA7, 0x0B, 0x4C, 0xB1, 0x27, 0x52, 0x54, 0x6C, 
   0x69, 0x5F, 0x71, 0x69, 0xA4, 0x3C, 0x68, 0x9F, 0x07, 0x5B, 0x8C, 0x3C, 0x1C, 0x53, 0x71, 0x5D, 
   0x8D, 0x5C, 0x82, 0xAB, 0x35, 0x88, 0x7E, 0x7D, 0x63, 0xBB, 0x27, 0x44, 0x97, 0x32, 0x33, 0x6D, 
   0x6B, 0x9B, 0x82, 0x64, 0x95, 0x64, 0x24, 0x1A, 0x64, 0x1D, 0x1E, 0x77, 0x3C, 0x5D, 0x9B, 0x61, 
   0x71, 0x97, 0x6E, 0x72, 0x72, 0x4C, 0x45, 0xA6, 0x4B, 0x5C, 0xD2, 0x65, 0x94, 0x68, 0x2B, 0x48, 
   0x22, 0x2B, 0x25, 0x90, 0x6A, 0x5E, 0xE6, 0x48, 0x49, 0x74, 0x2B, 0x51, 0x46, 0x54, 0x80, 0x81, 
   0x5B, 0x54, 0x96, 0x41, 0x66, 0xBA, 0x74, 0x8F, 0x98, 0x57, 0x83, 0x80, 0x33, 0x3D, 0x6D, 0x32, 
   0x47, 0x9A, 0x54, 0x74, 0x9A, 0x33, 0x41, 0x7E, 0x45, 0x49, 0x68, 0x64, 0x79, 0x8C, 0x5F, 0x91, 
   0xC6, 0x6A, 0x68, 0x9D, 0x4C, 0x6C, 0x69, 0x1D, 0x6A, 0x79, 0x3F, 0x52, 0xA1, 0x72, 0x4B, 0x84, 
   0x40, 0x5D, 0x8A, 0x36, 0x4D, 0x79, 0x6A, 0x77, 0x91, 0x76, 0x7D, 0x87, 0x59, 0x4A, 0x99, 0x40, 
   0x6B, 0xA4, 0x2D, 0x5F, 0x81, 0x34, 0x3D, 0x49, 0x4D, 0x5A, 0x9B, 0x66, 0x73, 0xCB, 0x61, 0x6A, 
   0x88, 0x51, 0x6B, 0x93, 0x3B, 0x60, 0x88, 0x53, 0x3F, 0xA4, 0x9C, 0x90, 0xC5, 0x71, 0xB2, 0x7A, 
   0x00, 0x54, 0x83, 0x00, 0x18, 0x7C, 0x75, 0x3B, 0x45, 0xB1, 0x94, 0xC0, 0x30, 0xA6, 0xE4, 0x2A, 
   0x4A, 0x77, 0x6F, 0x38, 0x54, 0x6F, 0x76, 0xD6, 0x62, 0x82, 0xA8, 0x4F, 0x70, 0x63, 0x30, 0x57, 
   0x85, 0x35, 0x3F, 0x9D, 0x51, 0x6C, 0xBF, 0x63, 0x55, 0x85, 0x4C, 0x4A, 0x78, 0x24, 0x67, 0x8E, 
   0x53, 0x69, 0x6D, 0x82, 0x7C, 0xA7, 0x6B, 0x7C, 0xBD, 0x37, 0x59, 0x7C, 0x25, 0x6E, 0x5F, 0x64, 
   0x5B, 0x82, 0x59, 0x22, 0x95, 0x05, 0x3B, 0xA9, 0x5E, 0x89, 0xAF, 0xBB, 0xBD, 0xA9, 0x74, 0x6B, 
   0x7F, 0x14, 0x34, 0x7E, 0x0B, 0x37, 0xB1, 0x39, 0x4F, 0x83, 0x31, 0x58, 0x50, 0x58, 0x6C, 0x6A, 
   0xB1, 0x8C, 0xC4, 0x72, 0xAE, 0xFF, 0x3D, 0x67, 0xA3, 0x51, 0x1A, 0x11, 0x33, 0x58, 0x55, 0x1D, 
   0x70, 0xC3, 0x69, 0x3E, 0xCA, 0x91, 0xAA, 0xA5, 0x78, 0x80, 0x47, 0x15, 0x00, 0x52, 0x00, 0x25, 
   0x9E, 0x63, 0x85, 0x80, 0x85, 0xA6, 0x95, 0x50, 0x7F, 0xCA, 0x8F, 0x89, 0xE0, 0xC5, 0x76, 0x97, 
   0x36, 0x77, 0x59, 0x00, 0x24, 0x62, 0x0E, 0x18, 0x8B, 0x7F, 0x70, 0x71, 0x99, 0xB0, 0xA1, 0x64, 
   0x3F, 0xB9, 0x17, 0x2F, 0xB8, 0x0B, 0xA7, 0x7D, 0x68, 0xAD, 0x86, 0x86, 0x28, 0x69, 0x21, 0x06, 
   0x4E, 0x3A, 0x65, 0x80, 0x9E, 0xB5, 0xE5, 0xA9, 0xFA, 0xEA, 0x44, 0x8E, 0x7F, 0x0D, 0x00, 0x52, 
   0x44, 0x19, 0x50, 0x3F, 0x98, 0x8B, 0x48, 0x8F, 0x9A, 0xA4, 0x67, 0xC3, 0x75, 0x43, 0xAB, 0x06, 
   0x31, 0x59, 0x07, 0x55, 0x4D, 0xA9, 0x97, 0xAA, 0x78, 0x98, 0x9C, 0x17, 0x32, 0x7C, 0x78, 0x7B, 
   0xDD, 0xCA, 0xD3, 0xDA, 0x20, 0x78, 0x8A, 0x00, 0x00, 0x18, 0x44, 0x06, 0x2A, 0x75, 0x78, 0xB1, 
   0x5C, 0xB5, 0xED, 0x6D, 0x98, 0x98, 0x3F, 0x3B, 0x6E, 0x4A, 0x4B, 0x79, 0x71, 0x78, 0xA7, 0x3C, 
   0x5B, 0x9C, 0x2A, 0x29, 0x6F, 0x57, 0x79, 0xB3, 0x36, 0x7F, 0x8C, 0x2D, 0x31, 0x64, 0x84, 0x6C, 
   0xAF, 0x7F, 0xBD, 0xA9, 0x5B, 0x8D, 0x76, 0x3B, 0x39, 0xA7, 0x2D, 0x35, 0x8E, 0x2D, 0x45, 0x44, 
   0x2A, 0x2A, 0x52, 0x66, 0x3A, 0xAC, 0x7F, 0xAB, 0xF3, 0x68, 0xA6, 0xDA, 0x38, 0x70, 0x53, 0x36, 
   0x12, 0x39, 0x36, 0x18, 0x99, 0x53, 0xD0, 0xC1, 0x70, 0x97, 0x86, 0x58, 0x44, 0x45, 0x50, 0x41, 
   0x6E, 0x33, 0x41, 0xC0, 0x22, 0x70, 0xB0, 0x58, 0x77, 0x77, 0x7C, 0x4F, 0x76, 0x65, 0x77, 0x81, 
   0x3B, 0x65, 0x93, 0x3A, 0x4E, 0x7D, 0x45, 0x64, 0xA2, 0x3A, 0x5E, 0xB8, 0x4D, 0x54, 0x30, 0x49, 
   0x6D, 0x8D, 0x72, 0xA2, 0xFF, 0x55, 0x74, 0xC7, 0x54, 0x7C, 0x3B, 0x68, 0x4B, 0x78, 0x2C, 0x11, 
   0xBD, 0x00, 0x51, 0xA7, 0x40, 0xAA, 0x52, 0x9E, 0x94, 0xAE, 0x7C, 0x53, 0xC5, 0x4B, 0x45, 0x7A, 
   0x00, 0x5A, 0x6D, 0x27, 0x6B, 0xA0, 0x73, 0x4A, 0xC3, 0x7A, 0x6D, 0xAC, 0x50, 0xA4, 0x77, 0x10, 
   0x35, 0x6F, 0x06, 0x00, 0x49, 0x44, 0x47, 0x75, 0xA4, 0xE2, 0xEB, 0xB0, 0xD3, 0xD5, 0x4B, 0x69, 
   0x94, 0x14, 0x3C, 0x68, 0x39, 0x61, 0x88, 0x4F, 0x75, 0x97, 0x22, 0x3A, 0x51, 0x5C, 0x12, 0x57, 
   0x8A, 0x9C, 0xBA, 0x3A, 0xA3, 0xC0, 0x34, 0x3B, 0x6A, 0x6D, 0x2E, 0x8A, 0x40, 0x5C, 0x7E, 0x35, 
   0x69, 0x68, 0x63, 0x64, 0xA2, 0x7E, 0x6F, 0x9D, 0x2C, 0x79, 0x77, 0x00, 0x23, 0xAF, 0x42, 0x45, 
   0xAC, 0x6C, 0x84, 0x5F, 0x71, 0x74, 0x53, 0x43, 0x3B, 0x94, 0x21, 0x68, 0x8B, 0x5A, 0x5D, 0x97, 
   0x44, 0x52, 0xA2, 0x2A, 0x63, 0x84, 0xA2, 0x6E, 0x88, 0x5D, 0x51, 0x75, 0x11, 0x50, 0x64, 0x3D, 
   0x66, 0x8C, 0x5A, 0x3E, 0x99, 0x4A, 0x40, 0x6D, 0x5A, 0x7B, 0x9B, 0x59, 0xA9, 0xB2, 0x26, 0x37, 
   0x53, 0x2D, 0x1C, 0x78, 0x63, 0x9B, 0xC5, 0xA1, 0xC2, 0xE2, 0x28, 0x53, 0x79, 0x00, 0x11, 0x3E, 
   0x59, 0x33, 0x9E, 0x60, 0x74, 0xB5, 0x5A, 0x70, 0x9E, 0x54, 0x76, 0xB4, 0x36, 0x58, 0x79, 0x2A, 
   0x3C, 0x5B, 0x41, 0x6F, 0x72, 0x37, 0x6F, 0x9B, 0x61, 0x53, 0x9C, 0x62, 0x5F, 0x85, 0x35, 0x5A, 
   0x9B, 0x3B, 0x6C, 0x84, 0x7B, 0x93, 0x84, 0x69, 0x4E, 0x74, 0x2E, 0x48, 0x81, 0x11, 0x6A, 0x9F, 
   0x3A, 0x6F, 0xC7, 0x86, 0x69, 0x97, 0x90, 0x4B, 0x71, 0x20, 0x50, 0x58, 0x00, 0x4A, 0x85, 0x5A, 
   0x51, 0xA8, 0xB2, 0x7F, 0x7B, 0x6C, 0x68, 0x8B, 0x0D, 0x55, 0x85, 0x00, 0x38, 0x73, 0x19, 0x2E, 
   0x5D, 0x6C, 0x80, 0xA3, 0x9B, 0xB3, 0xE8, 0x44, 0x39, 0x86, 0x2A, 0x00, 0x33, 0x13, 0x52, 0x65, 
   0x49, 0x83, 0xB1, 0xB6, 0x6E, 0x9B, 0x6B, 0x83, 0x93, 0x00, 0x52, 0x69, 0x1C, 0x1C, 0x2F, 0x4B, 
   0x1C, 0x6F, 0x37, 0x52, 0xA1, 0x67, 0x99, 0xB6, 0x85, 0x78, 0xBB, 0x4B, 0x45, 0x6F, 0x27, 0x60, 
   0x45, 0x4D, 0x71, 0x95, 0x3C, 0x48, 0xB2, 0x4C, 0x59, 0x78, 0x30, 0x38, 0x2E, 0x26, 0x4B, 0x9D, 
   0x56, 0x7B, 0xB7, 0x85, 0x83, 0x7A, 0x41, 0x61, 0x91, 0x40, 0x55, 0xBE, 0x61, 0x70, 0x9A, 0x49, 
   0x75, 0x44, 0x05, 0x25, 0x6C, 0x5B, 0x58, 0xB8, 0x6E, 0x87, 0x97, 0x36, 0x56, 0x75, 0x52, 0x57, 
   0xB2, 0x7A, 0xA0, 0x7E, 0x3A, 0x65, 0x5B, 0x29, 0x00, 0x8E, 0x62, 0x6F, 0x7F, 0x6D, 0xB3, 0xA7, 
   0x2D, 0x34, 0x90, 0x00, 0x00, 0x4C, 0x42, 0x4E, 0x9D, 0x9A, 0xBF, 0xCC, 0x95, 0xB4, 0x83, 0x42, 
   0x39, 0x82, 0x16, 0x36, 0x9D, 0x37, 0x5D, 0x9C, 0x39, 0x3C, 0x31, 0x4E, 0x44, 0x7D, 0x73, 0x92, 
   0xC5, 0x69, 0x78, 0x96, 0x20, 0x4C, 0xB9, 0x82, 0x6A, 0xC3, 0x9D, 0x8D, 0x66, 0x34, 0x86, 0x96, 
   0x3C, 0x7D, 0x8F, 0x6D, 0x3A, 0x77, 0x22, 0x1D, 0x87, 0x00, 0x58, 0x83, 0x6D, 0x7E, 0x64, 0x88, 
   0x91, 0x96, 0x79, 0x91, 0xFF, 0x71, 0x5D, 0xA5, 0x51, 0x6B, 0x35, 0x30, 0x63, 0x7C, 0x1E, 0x39, 
   0x78, 0x30, 0x56, 0x86, 0x8C, 0x68, 0xCC, 0x5E, 0x6F, 0xC0, 0x02, 0x91, 0x73, 0x3B, 0x46, 0x56, 
   0x86, 0x40, 0xA0, 0x4D, 0x6E, 0xD4, 0x14, 0x5E, 0x88, 0x3D, 0x87, 0x59, 0x7E, 0x86, 0x82, 0x73, 
   0x45, 0x9B, 0x39, 0x29, 0xA8, 0x17, 0x53, 0x87, 0x52, 0x8F, 0x9E, 0xB9, 0xAD, 0xCF, 0x72, 0x88, 
   0x71, 0x00, 0x2E, 0x2C, 0x1A, 0x11, 0x85, 0x8E, 0x7E, 0xFF, 0x83, 0x8B, 0xC5, 0x11, 0x48, 0x18, 
   0x13, 0x55, 0x68, 0x8E, 0x74, 0xD2, 0xA0, 0x81, 0xAD, 0x44, 0x91, 0xB1, 0x48, 0x46, 0x98, 0x5D, 
   0x4A, 0x63, 0x34, 0x93, 0xAA, 0x6C, 0x6F, 0x9D, 0x49, 0x2F, 0x58, 0x10, 0x20, 0x54, 0x34, 0x6E, 
   0xA1, 0x88, 0xC8, 0xCD, 0x54, 0xA7, 0xA7, 0x8A, 0x39, 0xAD, 0x9F, 0x4E, 0xAB, 0x56, 0x97, 0x69, 
   0x12, 0x62, 0xAA, 0x2D, 0x44, 0x91, 0x61, 0x70, 0x31, 0x5E, 0x53, 0x88, 0x64, 0x5A, 0xCF, 0x7F, 
   0x8D, 0xB8, 0x38, 0x54, 0x61, 0x0A, 0x39, 0x76, 0x4B, 0x85, 0x99, 0x88, 0xA4, 0x9A, 0x63, 0x4F, 
   0x79, 0x47, 0x29, 0x65, 0x5E, 0xA8, 0xC8, 0x59, 0xB9, 0xF1, 0x7A, 0x6D, 0x9E, 0x87, 0x4C, 0x4F, 
   0x1D, 0x49, 0x85, 0x00, 0x53, 0x85, 0x6D, 0x92, 0x86, 0x6F, 0x5A, 0x83, 0x54, 0x55, 0xAC, 0x64, 
   0x84, 0xC2, 0x3C, 0x6E, 0x4F, 0x20, 0x69, 0x6C, 0x7D, 0x58, 0xB7, 0x95, 0x6F, 0x97, 0x56, 0x8B, 
   0x98, 0x3D, 0x56, 0xC4, 0x62, 0x6B, 0xB0, 0x6B, 0xA1, 0x5C, 0x41, 0x33, 0x4E, 0x06, 0x20, 0x8C, 
   0x29, 0x43, 0x88, 0x5F, 0x79, 0x8F, 0x79, 0x6A, 0x8C, 0x5F, 0x60, 0x99, 0x3D, 0x77, 0x9A, 0xA1, 
   0x7D, 0xAA, 0x48, 0x65, 0x7B, 0x00, 0x25, 0x37, 0x46, 0x80, 0xBB, 0x86, 0x9D, 0xC6, 0x2C, 0x20, 
   0x4D, 0x27, 0x5A, 0x58, 0xA5, 0xBB, 0xE1, 0x7C, 0xA8, 0xB9, 0x00, 0x0A, 0x29, 0x08, 0x04, 0x53, 
   0x6C, 0x8A, 0xC3, 0xA7, 0xBB, 0xEE, 0x78, 0x77, 0xA2, 0x26, 0x59, 0x77, 0x09, 0x15, 0x53, 0x4F, 
   0x5C, 0x5F, 0x7F, 0xD5, 0xF3, 0x9A, 0xB7, 0xBD, 0x63, 0x4F, 0x63, 0x00, 0x10, 0x42, 0x00, 0x04, 
   0x4E, 0x73, 0x58, 0x91, 0x87, 0xA7, 0xB7, 0x4E, 0x91, 0xAD, 0x30, 0x39, 0x73, 0x41, 0x3D, 0x7D, 
   0x46, 0x6F, 0x94, 0x4C, 0x54, 0x9A, 0x3B, 0x34, 0x73, 0x30, 0x0D, 0x5D, 0x59, 0x88, 0xBF, 0x75, 
   0xAD, 0xB9, 0x15, 0x63, 0x6F, 0x38, 0x67, 0x6F, 0xAA, 0x7B, 0xB8, 0x85, 0x56, 0xB1, 0x00, 0x3D, 
   0x5F, 0x00, 0x21, 0x42, 0x6D, 0x6F, 0x94, 0x92, 0xC6, 0xCB, 0x5E, 0x8C, 0xB5, 0x29, 0x12, 0x96, 
   0x27, 0x54, 0x66, 0x3E, 0x70, 0x70, 0x45, 0x4A, 0x77, 0x85, 0x9F, 0xB6, 0x62, 0x65, 0x8E, 0x11, 
   0x14, 0x65, 0x00, 0x28, 0x6C, 0x67, 0x72, 0x91, 0xAF, 0xE7, 0xB0, 0x7B, 0x6E, 0xCD, 0x3F, 0x22, 
   0x97, 0x58, 0x92, 0x7D, 0x38, 0xA6, 0xAE, 0x04, 0x2A, 0x51, 0x4E, 0x10, 0x67, 0x78, 0x4F, 0xB1, 
   0x35, 0x68, 0x7A, 0x51, 0x6F, 0x8D, 0x68, 0x6A, 0xD6, 0x46, 0x5E, 0x80, 0x2A, 0x52, 0x40, 0x52, 
   0x52, 0xA1, 0xA1, 0x79, 0xB8, 0x4F, 0x61, 0x5D, 0x08, 0x39, 0x95, 0x3B, 0x66, 0xC1, 0x5E, 0x60, 
   0x58, 0x69, 0x5B, 0x40, 0x0E, 0x55, 0x7B, 0x27, 0x67, 0x9B, 0x7E, 0x40, 0xC5, 0x6E, 0x75, 0xA7, 
   0x2E, 0x7B, 0x67, 0x4F, 0x7A, 0x81, 0x4A, 0x51, 0x80, 0x39, 0x33, 0x69, 0x56, 0x72, 0x80, 0x61, 
   0x7D, 0x97, 0x70, 0x4E, 0x91, 0x02, 0x1A, 0x57, 0x18, 0x49, 0x4C, 0x4D, 0x69, 0x76, 0x5B, 0x82, 
   0xA2, 0x73, 0x77, 0xB0, 0x50, 0x4E, 0x9F, 0x16, 0x48, 0x66, 0x2D, 0x6F, 0xA5, 0x9A, 0x80, 0xB5, 
   0x60, 0x40, 0x54, 0x08, 0x29, 0x75, 0x30, 0x7F, 0xAD, 0x6A, 0x79, 0x95, 0x5F, 0x3B, 0x4F, 0x36, 
   0x63, 0x71, 0x41, 0x91, 0xB0, 0x31, 0x5D, 0xAB, 0x4E, 0x33, 0x60, 0x55, 0x3F, 0x6B, 0x3F, 0x75, 
   0xAB, 0x56, 0x7B, 0x9A, 0x4B, 0x6A, 0x89, 0x4B, 0x47, 0x72, 0x3A, 0x47, 0x5D, 0x63, 0x7A, 0x9E, 
   0x95, 0x69, 0xD8, 0x39, 0x51, 0xC4, 0x27, 0x55, 0x47, 0x5F, 0x44, 0x44, 0x48, 0x60, 0x83, 0x20, 
   0x5B, 0xA6, 0x4F, 0x55, 0x84, 0x83, 0x6C, 0x6D, 0x64, 0x5C, 0x6D, 0x12, 0x67, 0xA6, 0x23, 0x60, 
   0x7D, 0x52, 0x54, 0x6C, 0x76, 0x54, 0x9F, 0x59, 0x7C, 0x8E, 0x1A, 0x59, 0x54, 0x35, 0x19, 0x65, 
   0x3C, 0x3C, 0x7E, 0x3E, 0x78, 0xDA, 0x88, 0xA7, 0xAB, 0x6A, 0x8D, 0x6E, 0x17, 0x11, 0x43, 0x0A, 
   0x03, 0x38, 0x33, 0x60, 0xA2, 0x64, 0x6F, 0xB1, 0x6D, 0x6B, 0x69, 0x51, 0x50, 0x9E, 0x72, 0x61, 
   0xCB, 0x49, 0x83, 0x7E, 0x25, 0x4F, 0x27, 0x40, 0x3C, 0x77, 0x52, 0x53, 0xC8, 0x3D, 0x4A, 0x74, 
   0x4F, 0x6E, 0x81, 0x5B, 0x86, 0xAB, 0x50, 0x54, 0x8F, 0x50, 0x54, 0x9A, 0x56, 0x70, 0x83, 0x34, 
   0x4E, 0x72, 0x4B, 0x64, 0x78, 0x51, 0x64, 0x80, 0x4C, 0x4E, 0xCA, 0x62, 0x60, 0xBD, 0x3F, 0x60, 
   0x44, 0x28, 0x6B, 0x6A, 0x45, 0x49, 0x9E, 0x7F, 0x6B, 0x72, 0x57, 0x6B, 0x8F, 0x1D, 0x6A, 0xA2, 
   0x3F, 0x57, 0x7B, 0x5C, 0x35, 0xA3, 0x2B, 0x49, 0x7B, 0x4F, 0x85, 0x7C, 0x89, 0xB4, 0xB5, 0x71, 
   0x68, 0x82, 0x40, 0x4E, 0x81, 0x05, 0x30, 0x9C, 0x1C, 0x52, 0x74, 0x4C, 0x54, 0x3D, 0x5B, 0x52, 
   0x74, 0x4D, 0x7F, 0xF6, 0x9E, 0x93, 0xD6, 0x76, 0x9F, 0x80, 0x03, 0x65, 0x99, 0x57, 0x63, 0x97, 
   0xA0, 0x67, 0x8A, 0x58, 0x75, 0x9F, 0x00, 0x62, 0xA3, 0x00, 0x0C, 0x31, 0x6C, 0x43, 0x3A, 0x9F, 
   0xB3, 0xFF, 0x85, 0xAA, 0xF8, 0x77, 0x8C, 0x78, 0x45, 0x54, 0x85, 0x09, 0x35, 0x61, 0x30, 0x4B, 
   0x7D, 0x87, 0x68, 0xA1, 0x49, 0x75, 0x8C, 0x32, 0x7C, 0xC0, 0x5F, 0x71, 0x8C, 0x7B, 0x86, 0x8B, 
   0x35, 0x50, 0xA6, 0x1D, 0x28, 0x82, 0x2A, 0x67, 0x5F, 0x77, 0x91, 0x82, 0x80, 0x5E, 0x9B, 0x48, 
   0x31, 0xA8, 0x31, 0x6B, 0x8C, 0x8B, 0x94, 0x97, 0x6C, 0x60, 0xA1, 0x09, 0x5A, 0x78, 0x1F, 0x70, 
   0x6B, 0x55, 0x59, 0x71, 0x86, 0x7B, 0x7B, 0x76, 0x64, 0xD3, 0x62, 0x58, 0xD9, 0x32, 0x63, 0xA7, 
   0x0B, 0x47, 0x10, 0x47, 0x23, 0x1E, 0x84, 0x93, 0xE0, 0x86, 0xC3, 0xFF, 0x6E, 0x84, 0xCB, 0x5F, 
   0x80, 0x7F, 0x49, 0x7B, 0x25, 0x09, 0x00, 0x47, 0x16, 0x2B, 0xC7, 0x90, 0xAD, 0xAD, 0x7C, 0xB6, 
   0x76, 0x1F, 0x67, 0xA5, 0x6B, 0x61, 0xDE, 0xC6, 0x8D, 0x88, 0x45, 0x63, 0x5E, 0x00, 0x40, 0xAC, 
   0x40, 0x80, 0xA6, 0x81, 0xA8, 0x72, 0x70, 0x79, 0x8F, 0x41, 0x43, 0x9B, 0x4A, 0x36, 0xA0, 0x2D, 
   0x86, 0x83, 0x4F, 0x86, 0x76, 0x55, 0x15, 0x59, 0x19, 0x24, 0x94, 0x3F, 0xAC, 0xAE, 0xA3, 0xD8, 
   0xB0, 0x98, 0x92, 0xBB, 0x14, 0x38, 0x5A, 0x35, 0x04, 0x7C, 0xA7, 0x78, 0xC6, 0x79, 0xEB, 0xCB, 
   0x2C, 0x9D, 0x84, 0x51, 0x09, 0x75, 0x44, 0x06, 0x68, 0x06, 0x5D, 0x75, 0x59, 0x84, 0xA6, 0xA6, 
   0xA9, 0xB9, 0x88, 0x81, 0xCA, 0x04, 0x30, 0x62, 0x37, 0x52, 0x61, 0xB5, 0xBD, 0xC8, 0x60, 0x4A, 
   0x95, 0x00, 0x11, 0x57, 0x7C, 0x74, 0x9C, 0xCB, 0xCA, 0xEB, 0x55, 0xB6, 0xB9, 0x00, 0x38, 0x36, 
   0x09, 0x00, 0x06, 0x1E, 0x1B, 0x75, 0x68, 0xBA, 0xBF, 0x94, 0xAE, 0xAC, 0x84, 0x54, 0x91, 0x43, 
   0x86, 0x85, 0x46, 0xA2, 0x84, 0x4F, 0x50, 0x8F, 0x52, 0x3C, 0x9A, 0x40, 0x7F, 0xA4, 0x29, 0x62, 
   0x8C, 0x41, 0x23, 0x6E, 0x5F, 0x63, 0x84, 0x60, 0x92, 0x69, 0x2E, 0x65, 0x6C, 0x3B, 0x2D, 0xB4, 
   0xA2, 0x83, 0xD8, 0x78, 0xBB, 0xB9, 0x0F, 0x5D, 0x60, 0x2B, 0x00, 0x1B, 0x32, 0x45, 0xAB, 0x4C, 
   0xDE, 0xFF, 0xAE, 0xE9, 0x88, 0x72, 0x5A, 0x83, 0x06, 0x1E, 0x85, 0x00, 0x09, 0x55, 0x21, 0x16, 
   0x54, 0x5E, 0x70, 0x4B, 0x99, 0x91, 0x88, 0x5F, 0x8C, 0xDB, 0x1F, 0x90, 0xB3, 0x35, 0x32, 0x68, 
   0x63, 0x0F, 0x5C, 0x52, 0xB3, 0xBC, 0x5B, 0x4E, 0x80, 0x66, 0x43, 0x70, 0x59, 0x66, 0xEC, 0x36, 
   0x83, 0x94, 0x3B, 0x8E, 0x27, 0x74, 0x65, 0x83, 0x68, 0x41, 0xF0, 0x1E, 0x6D, 0x9A, 0x4B, 0x6C, 
   0x36, 0x6D, 0x49, 0x69, 0x3F, 0x43, 0xA4, 0x2D, 0x50, 0x9B, 0x4B, 0x9C, 0x9C, 0x5D, 0x90, 0xB3, 
   0x5D, 0x22, 0xA6, 0x40, 0x27, 0x54, 0x28, 0x98, 0x5E, 0x2D, 0x59, 0x98, 0x3A, 0x2C, 0x94, 0x4E, 
   0x41, 0x9C, 0x72, 0xA0, 0xAD, 0x6C, 0xC2, 0xA1, 0x44, 0x31, 0x84, 0x2D, 0x24, 0x72, 0x7C, 0x7A, 
   0xB0, 0x64, 0x96, 0xA3, 0x2E, 0x5B, 0x6E, 0x32, 0x4D, 0x6D, 0x48, 0x51, 0xB1, 0x2C, 0x66, 0x73, 
   0x44, 0x27, 0x73, 0x5C, 0x40, 0x96, 0x5D, 0x92, 0x8C, 0x3C, 0x93, 0x8D, 0x53, 0x59, 0xBF, 0x7F, 
   0x5D, 0x90, 0x33, 0x66, 0x56, 0x1A, 0x37, 0xAF, 0x47, 0x4E, 0x96, 0x63, 0x76, 0x61, 0x5C, 0x65, 
   0x5A, 0x10, 0x42, 0x73, 0x00, 0x42, 0x8D, 0x77, 0x6B, 0xBD, 0x7A, 0x62, 0xAD, 0x4D, 0x5F, 0x83, 
   0x6D, 0x81, 0x8C, 0x48, 0x4C, 0x6F, 0x00, 0x45, 0x69, 0x4E, 0x60, 0x92, 0x89, 0x66, 0xA9, 0x5B, 
   0x54, 0x91, 0x4D, 0x53, 0x6D, 0x2E, 0x63, 0x7C, 0x00, 0x1F, 0x4F, 0x36, 0x27, 0x4D, 0x89, 0xA8, 
   0xCE, 0x95, 0xAF, 0xC4, 0x38, 0x35, 0x62, 0x00, 0x01, 0x46, 0x6C, 0x69, 0x9D, 0x89, 0x9E, 0xC7, 
   0x43, 0x82, 0xA4, 0x29, 0x5D, 0x6E, 0x28, 0x2D, 0x66, 0x3B, 0x3D, 0x6A, 0x6A, 0x72, 0x81, 0x59, 
   0x7F, 0xA4, 0x3D, 0x57, 0x8D, 0x58, 0x50, 0x70, 0x3C, 0x3D, 0x86, 0x26, 0x38, 0x6F, 0x76, 0x8E, 
   0x7B, 0x54, 0x5C, 0x98, 0x26, 0x34, 0x88, 0x16, 0x62, 0x72, 0x68, 0x74, 0x8A, 0xA7, 0x5D, 0xA2, 
   0x38, 0x5C, 0xA7, 0x30, 0x50, 0x83, 0x08, 0x5B, 0x8B, 0x49, 0x60, 0x94, 0x9E, 0x60, 0x60, 0x31, 
   0x5F, 0x59, 0x0E, 0x37, 0x8D, 0x48, 0x38, 0x8E, 0x77, 0x78, 0x7D, 0x70, 0x84, 0x9A, 0x56, 0x76, 
   0x98, 0x0A, 0x2E, 0x56, 0x16, 0x00, 0x28, 0x52, 0x5E, 0x80, 0x87, 0xD2, 0xAA, 0x54, 0x5A, 0x89, 
   0x30, 0x00, 0x78, 0x0E, 0x5E, 0x78, 0x54, 0x94, 0x99, 0xA4, 0x77, 0x91, 0x52, 0x6F, 0x72, 0x00, 
   0x2C, 0x4D, 0x25, 0x25, 0x4D, 0x27, 0x37, 0x55, 0x3C, 0x63, 0x7C, 0x83, 0x8D, 0xCB, 0x62, 0x5C, 
   0xD7, 0x44, 0x56, 0x73, 0x53, 0x7D, 0x49, 0x19, 0x3D, 0x87, 0x25, 0x38, 0xA5, 0x76, 0x8D, 0x7D, 
   0x54, 0x44, 0x62, 0x0F, 0x33, 0xA1, 0x5F, 0x7F, 0xA8, 0x4F, 0x6A, 0x43, 0x23, 0x49, 0x89, 0x58, 
   0x77, 0xAD, 0x7B, 0x77, 0x91, 0x47, 0x49, 0x8B, 0x40, 0x54, 0x8F, 0x55, 0x81, 0x82, 0x37, 0x69, 
   0x70, 0x10, 0x03, 0x75, 0x5B, 0x6B, 0x7C, 0x90, 0xC1, 0x9F, 0x3A, 0x65, 0x7E, 0x29, 0x0F, 0x63, 
   0x41, 0x54, 0xC6, 0x75, 0xA5, 0xB0, 0x69, 0x71, 0x70, 0x1F, 0x10, 0x7B, 0x2B, 0x4A, 0x8D, 0x87, 
   0xB2, 0xAF, 0x5A, 0x79, 0x7B, 0x42, 0x38, 0x64, 0x40, 0x4D, 0x98, 0x23, 0x42, 0x93, 0x2C, 0x35, 
   0x57, 0x7F, 0x73, 0xA3, 0x91, 0xB5, 0xAC, 0x1F, 0x7D, 0xB2, 0x30, 0x64, 0xA0, 0x90, 0x62, 0x81, 
   0x78, 0x61, 0x96, 0x1B, 0x7D, 0xA5, 0x2B, 0x65, 0x4E, 0x47, 0x36, 0x60, 0x2D, 0x4D, 0xC8, 0x57, 
   0x50, 0x86, 0xA3, 0xA2, 0x7C, 0x58, 0xAD, 0xC6, 0x34, 0x3E, 0xA4, 0x50, 0x42, 0x86, 0x60, 0x6F, 
   0x73, 0x49, 0x5E, 0x9B, 0x39, 0x6A, 0x79, 0x5C, 0x54, 0x5E, 0x89, 0x71, 0xC1, 0x59, 0x70, 0xF9, 
   0x12, 0x51, 0x6D, 0x1D, 0x4F, 0x36, 0x5D, 0x49, 0x81, 0x60, 0x3F, 0xA6, 0x41, 0x53, 0xA8, 0x66, 
   0x96, 0x87, 0x8F, 0xA3, 0xA9, 0x81, 0x6D, 0xB3, 0x53, 0x4D, 0x7D, 0x00, 0x29, 0x60, 0x00, 0x36, 
   0x72, 0xA2, 0x9F, 0xB3, 0xC8, 0xB7, 0xC5, 0x5A, 0x4F, 0x60, 0x1E, 0x41, 0xAA, 0x4A, 0x5C, 0xD6, 
   0x60, 0x42, 0x62, 0x01, 0x5C, 0x1E, 0x2C, 0x7C, 0x95, 0xB3, 0x74, 0xFF, 0xA2, 0xE5, 0xFF, 0x5A, 
   0x91, 0x76, 0x1C, 0x00, 0x21, 0x00, 0x14, 0x54, 0x4A, 0x73, 0x9C, 0x7B, 0x99, 0xD2, 0x4C, 0x9F, 
   0xAB, 0x65, 0x49, 0x87, 0x97, 0x4D, 0x7A, 0x5B, 0x85, 0x8A, 0x25, 0x73, 0x90, 0x1E, 0x23, 0x84, 
   0x54, 0x69, 0x5C, 0x89, 0xA4, 0xA2, 0x78, 0x92, 0xE2, 0x5E, 0x67, 0x9C, 0x16, 0x41, 0x55, 0x1A, 
   0x2E, 0x7B, 0x5B, 0x4C, 0xA9, 0x85, 0x7C, 0x88, 0x43, 0x41, 0x5D, 0x2E, 0x46, 0x9F, 0x86, 0xEF, 
   0xDF, 0x76, 0xE7, 0xC2, 0x69, 0x0A, 0x69, 0x44, 0x00, 0x35, 0x16, 0x82, 0x9D, 0x57, 0xB8, 0xD8, 
   0xC9, 0xBC, 0xC0, 0x70, 0x5B, 0x6C, 0x00, 0x00, 0x46, 0x1C, 0x2A, 0x68, 0x75, 0xA0, 0x82, 0x78, 
   0x98, 0x91, 0x62, 0x65, 0xCC, 0x82, 0x6A, 0xBF, 0x40, 0x8A, 0x4F, 0x00, 0x44, 0x6A, 0x58, 0x2D, 
   0x9D, 0x88, 0x8A, 0x72, 0x50, 0x76, 0x92, 0x5A, 0x82, 0xF3, 0x90, 0xAD, 0xC8, 0x53, 0x69, 0x55, 
   0x00, 0x10, 0x1E, 0x12, 0x00, 0x4D, 0x3E, 0x4D, 0xA2, 0xA4, 0xB9, 0xC9, 0x9B, 0xAA, 0xC0, 0x40, 
   0x44, 0x88, 0x4A, 0x71, 0x93, 0xA7, 0xB9, 0xE1, 0x2C, 0x38, 0x78, 0x00, 0x18, 0x32, 0x4F, 0x88, 
   0xC5, 0x5B, 0x82, 0xCF, 0x08, 0x00, 0x0D, 0x23, 0x1A, 0x32, 0x9F, 0xB4, 0xF3, 0xC2, 0xEA, 0xF1, 
   0x52, 0x85, 0xAF, 0x03, 0x24, 0x6C, 0x1F, 0x00, 0x37, 0x44, 0x3D, 0x89, 0x7A, 0xB4, 0xD6, 0xA3, 
   0xCC, 0xD5, 0x68, 0x6D, 0x81, 0x47, 0x4B, 0x44, 0x12, 0x2A, 0x75, 0x40, 0x24, 0xB9, 0x6F, 0x6A, 
   0x64, 0x4E, 0x83, 0x63, 0x48, 0x45, 0x64, 0x53, 0x73, 0x83, 0x5E, 0x85, 0xB9, 0x36, 0x62, 0xA3, 
   0x41, 0x5A, 0x8B, 0x63, 0x42, 0x68, 0x68, 0x92, 0xD2, 0x89, 0xB9, 0xFF, 0x15, 0x3E, 0x45, 0x2A, 
   0x36, 0x42, 0x89, 0x6E, 0xB3, 0x60, 0x73, 0xA3, 0x00, 0x57, 0x70, 0x2E, 0x51, 0x93, 0xA9, 0x79, 
   0xAA, 0x97, 0x8E, 0x87, 0x38, 0x41, 0x6F, 0x00, 0x02, 0x7A, 0x27, 0x54, 0x70, 0x80, 0xA1, 0xA0, 
   0x7D, 0x9D, 0xB8, 0x65, 0x72, 0xB1, 0x4B, 0x3C, 0x6A, 0x00, 0x08, 0x36, 0x2B, 0x1E, 0x94, 0x9B, 
   0xBD, 0xE2, 0xBE, 0xFF, 0xC5, 0x32, 0x5A, 0x8F, 0x00, 0x00, 0x58, 0x44, 0x54, 0x73, 0x5C, 0x99, 
   0x83, 0x52, 0x5A, 0x7E, 0x69, 0x27, 0x7F, 0x6D, 0x99, 0xB2, 0x10, 0x98, 0x96, 0x20, 0x2F, 0x73, 
   0x65, 0x27, 0x8E, 0x3F, 0x61, 0x72, 0x1F, 0x53, 0x57, 0x76, 0x7C, 0xCB, 0x9E, 0x8D, 0xC6, 0x50, 
   0x6D, 0x69, 0x00, 0x1A, 0xA4, 0x2A, 0x2A, 0xA7, 0x75, 0x74, 0x5F, 0x7F, 0x69, 0x30, 0x10, 0x58, 
   0x60, 0x00, 0x4C, 0xC4, 0x68, 0x2F, 0x9F, 0x77, 0x37, 0x88, 0x3A, 0x7E, 0x87, 0x79, 0x97, 0x80, 
   0x6C, 0x58, 0x74, 0x0F, 0x62, 0x6F, 0x30, 0x5C, 0x97, 0x42, 0x60, 0xA3, 0x65, 0x3D, 0x9D, 0x5F, 
   0x4E, 0x7E, 0x25, 0x7B, 0x77, 0x3B, 0x52, 0x6C, 0x4C, 0x3B, 0x84, 0x42, 0x42, 0x9C, 0x54, 0x6B, 
   0x9D, 0x37, 0x5C, 0x6A, 0x2C, 0x6D, 0x71, 0x7C, 0x5C, 0x89, 0x55, 0x40, 0x74, 0x27, 0x54, 0x81, 
   0x64, 0xB5, 0xCB, 0x52, 0x85, 0xBE, 0x23, 0x21, 0x44, 0x28, 0x19, 0x59, 0x35, 0x5E, 0xA3, 0x5F, 
   0x6B, 0xC0, 0x70, 0x6C, 0x86, 0x31, 0x4A, 0x5D, 0x2A, 0x6B, 0xA1, 0x57, 0x64, 0x90, 0x40, 0x30, 
   0x57, 0x40, 0x42, 0x7F, 0x14, 0x6B, 0x7C, 0x4F, 0x73, 0x9A, 0x94, 0x73, 0xB1, 0x4E, 0x50, 0x93, 
   0x0D, 0x44, 0x5E, 0x18, 0x66, 0x8B, 0x5E, 0x5B, 0x96, 0x65, 0x60, 0x9B, 0x43, 0x6B, 0x99, 0x5E, 
   0x4E, 0x53, 0x2F, 0x47, 0x58, 0x02, 0x48, 0x98, 0x5F, 0x72, 0x99, 0xA9, 0x99, 0x87, 0x4B, 0x6F, 
   0x90, 0x00, 0x16, 0x66, 0x00, 0x2C, 0x38, 0x39, 0x3A, 0x62, 0x92, 0x6B, 0xC1, 0x77, 0xB0, 0xC9, 
   0x26, 0x59, 0x78, 0x40, 0x0C, 0x64, 0x24, 0x2E, 0x53, 0x41, 0x53, 0xA3, 0x91, 0xC6, 0xBE, 0x6D, 
   0x85, 0x7C, 0x0A, 0x09, 0x23, 0x0E, 0x02, 0x24, 0x3D, 0x5F, 0xA0, 0x52, 0x5D, 0xBB, 0x5A, 0x88, 
   0x73, 0x7D, 0x67, 0x90, 0x33, 0x45, 0xB6, 0x3D, 0x67, 0x65, 0x42, 0x72, 0x48, 0x5F, 0x3D, 0x86, 
   0x58, 0x52, 0xA8, 0x24, 0x25, 0x42, 0x13, 0x49, 0x5A, 0x43, 0x74, 0x9C, 0x63, 0x6B, 0x95, 0x6A, 
   0x6C, 0x98, 0x5A, 0x61, 0xCB, 0x80, 0x6C, 0x9B, 0x50, 0x76, 0x5A, 0x15, 0x52, 0x5E, 0x3D, 0x29, 
   0xAE, 0x6B, 0x6E, 0x8D, 0x49, 0x7B, 0x71, 0x1C, 0x4E, 0x8D, 0x4B, 0x4E, 0x7E, 0x5E, 0x55, 0x90, 
   0x5A, 0x62, 0x98, 0x65, 0x90, 0x99, 0x4D, 0x7D, 0x9E, 0x45, 0x36, 0x92, 0x1D, 0x13, 0x6F, 0x14, 
   0x60, 0x86, 0x7E, 0x96, 0xA9, 0xB2, 0xA2, 0x83, 0x3E, 0x3A, 0x79, 0x09, 0x1D, 0xBE, 0x4D, 0x6E, 
   0xBD, 0x70, 0x6B, 0x29, 0x1C, 0x74, 0x7A, 0x62, 0x97, 0xE3, 0xAD, 0x6E, 0xA0, 0x3A, 0x56, 0x8D, 
   0x00, 0x67, 0xB8, 0x62, 0x56, 0x40, 0x9D, 0x7F, 0x6E, 0x80, 0xA0, 0xDA, 0x32, 0x3D, 0xAB, 0x1F, 
   0x41, 0x3D, 0x36, 0x63, 0x4E, 0x4F, 0x5A, 0x91, 0x52, 0x83, 0xDE, 0x91, 0x78, 0xB1, 0x5D, 0x55, 
   0x8C, 0x06, 0x5F, 0x79, 0x5C, 0x5F, 0x62, 0x8A, 0x71, 0x8B, 0x5B, 0x6B, 0xC5, 0x20, 0x4F, 0x97, 
   0x3B, 0x75, 0x89, 0x52, 0x84, 0x55, 0x4D, 0x27, 0x7D, 0x21, 0x11, 0xA7, 0x30, 0x5F, 0x92, 0x9A, 
   0xBA, 0xA9, 0xB1, 0xBB, 0xAD, 0x52, 0x68, 0x8F, 0x03, 0x3B, 0x5A, 0x08, 0x34, 0x72, 0x6B, 0x63, 
   0xC4, 0x75, 0x71, 0xA3, 0x76, 0x7E, 0x87, 0x5F, 0x99, 0xB3, 0x36, 0x59, 0x5D, 0x63, 0x09, 0x6A, 
   0x4C, 0x71, 0xEF, 0x40, 0x96, 0xAB, 0x47, 0x4E, 0x4F, 0x49, 0x87, 0x93, 0x83, 0x86, 0xA0, 0x77, 
   0x57, 0xA1, 0x20, 0x3B, 0xBC, 0x58, 0x7B, 0x71, 0x75, 0xAA, 0x5A, 0x00, 0x60, 0xAB, 0x69, 0x42, 
   0xDD, 0xED, 0x80, 0x85, 0x61, 0x79, 0x38, 0x00, 0x45, 0x93, 0x3A, 0x50, 0xCD, 0x76, 0x73, 0x6E, 
   0x6D, 0x52, 0x69, 0x62, 0x4D, 0xBA, 0x66, 0x9D, 0xB5, 0x6F, 0x8B, 0x9C, 0x28, 0x65, 0x7C, 0x3D, 
   0x1E, 0x5F, 0x33, 0x24, 0x71, 0x37, 0x73, 0xA1, 0xB7, 0xB5, 0xB5, 0x73, 0x72, 0x99, 0x01, 0x61, 
   0xA4, 0x68, 0x56, 0x8D, 0xBE, 0x94, 0xA9, 0x34, 0x71, 0x7F, 0x00, 0x3D, 0x4C, 0x61, 0x6A, 0x97, 
   0x95, 0x76, 0xE3, 0x56, 0x9D, 0xB9, 0x37, 0x68, 0x71, 0x52, 0x38, 0x53, 0x40, 0x43, 0x7B, 0x31, 
   0x51, 0x89, 0x71, 0x98, 0xA9, 0xA4, 0xBF, 0xDC, 0x2F, 0x56, 0xB6, 0x00, 0x00, 0x2A, 0x30, 0x5B, 
   0x2A, 0xC7, 0x9C, 0xC1, 0x7D, 0x9D, 0xCA, 0x04, 0x63, 0x86, 0x47, 0x46, 0x8A, 0x8B, 0x6D, 0xB6, 
   0x56, 0xB0, 0x91, 0x1B, 0x53, 0x45, 0x42, 0x00, 0x5C, 0x27, 0x4F, 0x9D, 0x42, 0xA3, 0xA8, 0xAC, 
   0x94, 0xD3, 0x9C, 0x72, 0xB7, 0x3E, 0x82, 0x87, 0x4A, 0x8F, 0x7E, 0x4D, 0x52, 0xA4, 0x2E, 0x21, 
   0x75, 0x2D, 0x5F, 0x5E, 0x1F, 0x39, 0x71, 0x3C, 0x2E, 0x92, 0xC9, 0xAB, 0xCE, 0xCD, 0xFF, 0xE9, 
   0x01, 0x79, 0x73, 0x00, 0x00, 0x05, 0x3D, 0x0F, 0x7E, 0x6E, 0xDB, 0xFF, 0xA3, 0xD1, 0xA2, 0x6D, 
   0x5B, 0x55, 0x14, 0x1D, 0x96, 0x00, 0x3E, 0x7E, 0x5E, 0x62, 0x61, 0x89, 0x91, 0x90, 0x67, 0x8B, 
   0xD5, 0x53, 0x67, 0xA0, 0x2A, 0x54, 0x5E, 0x30, 0x32, 0x53, 0x87, 0x40, 0x6D, 0x6A, 0xA2, 0xD6, 
   0x36, 0xBD, 0xB4, 0x35, 0x00, 0x36, 0x55, 0x83, 0xA0, 0x5B, 0xA4, 0xB1, 0x5A, 0x6C, 0x77, 0x68, 
   0x2E, 0x7B, 0x37, 0x20, 0xA7, 0x00, 0x49, 0x78, 0x3D, 0x84, 0x34, 0x6E, 0x7F, 0x92, 0x75, 0x79, 
   0xEB, 0x63, 0x6C, 0xC2, 0x33, 0x5E, 0x6F, 0x26, 0x4A, 0x5C, 0x21, 0x12, 0x6D, 0x58, 0x44, 0x8D, 
   0x7D, 0xE1, 0xB2, 0x7D, 0x90, 0xBE, 0x2C, 0x00, 0x89, 0x1A, 0x17, 0x4F, 0x5B, 0x9F, 0x72, 0x7F, 
   0xCF, 0xBE, 0x73, 0x6C, 0xB2, 0x4E, 0x1F, 0x82, 0x3F, 0x7C, 0x7F, 0x2B, 0x7A, 0x81, 0x04, 0x24, 
   0x4D, 0x4B, 0x3B, 0x65, 0xA2, 0x6F, 0xC2, 0x4D, 0x7C, 0x96, 0x45, 0x77, 0x74, 0x4F, 0x5F, 0xAC, 
   0x21, 0x52, 0x83, 0x28, 0x56, 0x4A, 0x5D, 0x4B, 0x95, 0x92, 0x63, 0xA2, 0x68, 0x8B, 0x7A, 0x0A, 
   0x5C, 0xB7, 0x31, 0x43, 0xAD, 0x6F, 0x5D, 0x59, 0x5D, 0x5C, 0x40, 0x17, 0x34, 0x58, 0x17, 0x4B, 
   0x8F, 0x6D, 0x68, 0x97, 0x5E, 0x58, 0xB9, 0x2B, 0x47, 0x68, 0x5F, 0x48, 0x56, 0x59, 0x7D, 0x94, 
   0x1B, 0x5C, 0x7F, 0x59, 0x4B, 0x9D, 0x70, 0x78, 0x97, 0x53, 0x55, 0x8B, 0x24, 0x5A, 0x79, 0x34, 
   0x59, 0x77, 0x4C, 0x47, 0x5A, 0x49, 0x3C, 0x84, 0x71, 0x8C, 0xBE, 0x7B, 0x7A, 0xAB, 0x13, 0x07, 
   0x33, 0x00, 0x19, 0x50, 0x6A, 0x8E, 0xAE, 0x82, 0x79, 0xBC, 0x3D, 0x40, 0x8F, 0x1F, 0x5D, 0x73, 
   0x41, 0x6E, 0x7F, 0x63, 0x5D, 0xAD, 0x57, 0x72, 0xA6, 0x2F, 0x53, 0x7D, 0x2F, 0x2F, 0x86, 0x4C, 
   0x2F, 0x62, 0x6A, 0x5F, 0x7D, 0x42, 0x89, 0xA6, 0x58, 0x88, 0x6E, 0x56, 0x36, 0x7E, 0x05, 0x2E, 
   0x8F, 0x12, 0x40, 0x4C, 0x76, 0x64, 0x87, 0x93, 0x76, 0xD8, 0x36, 0x4F, 0xC0, 0x0C, 0x5A, 0x45, 
   0x2E, 0x54, 0x5A, 0x35, 0x49, 0x7D, 0x6A, 0x6B, 0x8F, 0x64, 0x54, 0x7D, 0x31, 0x5F, 0x8E, 0x41, 
   0x48, 0x8D, 0x52, 0x4E, 0x75, 0x4B, 0x75, 0x63, 0x34, 0x69, 0xA2, 0x51, 0x40, 0x96, 0x67, 0x3F, 
   0x5C, 0x32, 0x56, 0x6C, 0x37, 0x67, 0x9A, 0x26, 0x4B, 0x5D, 0x3A, 0x1F, 0x6A, 0x64, 0x7C, 0xB0, 
   0x82, 0xC0, 0xB0, 0x4D, 0x35, 0x5F, 0x2E, 0x00, 0x69, 0x05, 0x66, 0x7A, 0x4B, 0x8B, 0xB9, 0x85, 
   0x75, 0x8F, 0x46, 0x73, 0x5F, 0x2C, 0x2B, 0x74, 0x0D, 0x02, 0x5D, 0x20, 0x48, 0x3D, 0x56, 0x6E, 
   0x85, 0x65, 0x71, 0xBC, 0x67, 0x51, 0x9B, 0x62, 0x74, 0x83, 0x60, 0x95, 0x64, 0x1A, 0x3D, 0x7F, 
   0x3B, 0x30, 0x73, 0x62, 0x7A, 0x6D, 0x1F, 0x2C, 0x4D, 0x3E, 0x45, 0x7E, 0x8A, 0x97, 0xAB, 0x59, 
   0x55, 0xB3, 0x47, 0x61, 0xBE, 0x51, 0x8E, 0x83, 0x44, 0x6A, 0x6A, 0x2C, 0x24, 0x6F, 0x4E, 0x46, 
   0x65, 0x70, 0x90, 0xC6, 0x2B, 0x69, 0xA4, 0x00, 0x1A, 0x3E, 0x40, 0x55, 0xA5, 0x93, 0x9C, 0xA1, 
   0x77, 0x8B, 0x63, 0x2C, 0x2F, 0x86, 0x41, 0x56, 0xA4, 0x62, 0x92, 0xA9, 0x29, 0x30, 0x7A, 0x14, 
   0x03, 0x5E, 0x6C, 0x6D, 0x7C, 0x91, 0xAA, 0xC3, 0x64, 0x78, 0xB4, 0x6D, 0x5B, 0x9D, 0x47, 0x53, 
   0x85, 0x00, 0x52, 0x83, 0x2A, 0x4D, 0x60, 0x98, 0x6A, 0x6D, 0x72, 0x7D, 0xD0, 0x1C, 0x61, 0xBA, 
   0x18, 0x4B, 0x48, 0x6B, 0x52, 0x76, 0xA0, 0x86, 0xF4, 0x88, 0x7B, 0xC5, 0x55, 0xA5, 0x66, 0x16, 
   0x56, 0x6E, 0x00, 0x00, 0x69, 0x35, 0x39, 0x66, 0xB1, 0xA0, 0xAF, 0x76, 0xA3, 0xF6, 0x3D, 0x85, 
   0xA0, 0x58, 0x45, 0x53, 0x57, 0x4F, 0x8B, 0x5B, 0x71, 0xCF, 0x26, 0x5B, 0x6E, 0x32, 0x8E, 0x62, 
   0x6C, 0x88, 0x96, 0x77, 0x42, 0xD0, 0x1B, 0x46, 0x92, 0x22, 0x4D, 0x64, 0x7F, 0x66, 0xA2, 0x7A, 
   0x84, 0xB8, 0x62, 0x7F, 0x78, 0x33, 0x89, 0x5A, 0x1D, 0x38, 0x72, 0x69, 0x4D, 0xA8, 0xA2, 0x7A, 
   0xBA, 0x45, 0x52, 0x8C, 0x00, 0x59, 0xA1, 0x62, 0x71, 0x7E, 0x8D, 0x67, 0x5C, 0x4A, 0x73, 0x65, 
   0x4F, 0x5D, 0xB9, 0x76, 0x5E, 0xFF, 0x5D, 0xA7, 0xA9, 0x17, 0x6C, 0x00, 0x18, 0x00, 0x29, 0x49, 
   0x2F, 0xE0, 0xA1, 0xBD, 0xFF, 0x96, 0xC0, 0xC2, 0x0D, 0x7A, 0x7A, 0x4C, 0x4E, 0x88, 0xA7, 0x4C, 
   0x8B, 0x55, 0x68, 0x8F, 0x34, 0x83, 0x8D, 0x22, 0x39, 0x64, 0x30, 0x3F, 0x4F, 0x8E, 0xA7, 0xA8, 
   0x84, 0x7A, 0xDD, 0x4A, 0x52, 0x88, 0x3D, 0x52, 0x69, 0x48, 0x96, 0x90, 0x80, 0x6D, 0x8F, 0x35, 
   0x5B, 0x78, 0x13, 0x33, 0x73, 0x54, 0x5E, 0x87, 0x7E, 0xBB, 0xE3, 0x79, 0xB3, 0xA9, 0x4F, 0x00, 
   0x41, 0x37, 0x13, 0x7A, 0x33, 0xD4, 0xCC, 0x7A, 0xE6, 0xC6, 0xA8, 0x54, 0x7A, 0x34, 0x00, 0x40, 
   0x00, 0x18, 0x8B, 0x5C, 0x9A, 0xCC, 0xD5, 0xE5, 0xB5, 0x61, 0x81, 0x85, 0x00, 0x00, 0x6C, 0x3A, 
   0x43, 0x77, 0x7F, 0xAB, 0x94, 0x41, 0x68, 0xB2, 0x3C, 0x46, 0xA0, 0x7A, 0x7F, 0x8E, 0x41, 0x74, 
   0x65, 0x1F, 0x62, 0x99, 0x91, 0x78, 0xB5, 0x6A, 0x50, 0x61, 0x04, 0x2F, 0x58, 0x4A, 0x7B, 0xDD, 
   0xC8, 0x9A, 0xF4, 0x9D, 0xC6, 0xA0, 0x00, 0x6C, 0x46, 0x00, 0x00, 0x0C, 0x38, 0x3E, 0x6B, 0x92, 
   0xCA, 0xFF, 0xA0, 0x99, 0xCD, 0x3F, 0x4E, 0x5A, 0x4D, 0x85, 0x9C, 0x83, 0xAF, 0xC7, 0x3C, 0x12, 
   0x3D, 0x00, 0x00, 0x12, 0x39, 0x76, 0xF4, 0xC5, 0xC5, 0xFF, 0x5F, 0x98, 0x7D, 0x1E, 0x3B, 0x62, 
   0x45, 0x29, 0x5B, 0x40, 0x64, 0x86, 0x58, 0xB0, 0xDD, 0x80, 0xA3, 0xB5, 0x61, 0x71, 0x94, 0x30, 
   0x21, 0x69, 0x01, 0x08, 0x52, 0x42, 0x39, 0xAE, 0x5C, 0x9F, 0x8D, 0x8B, 0xA1, 0x66, 0x73, 0x88, 
   0xE3, 0x31, 0x50, 0xAE, 0x13, 0x31, 0x55, 0x51, 0x20, 0x5F, 0x47, 0x78, 0x77, 0x75, 0xAC, 0x8B, 
   0x69, 0x51, 0xAF, 0x19, 0x4B, 0x88, 0x2C, 0x6A, 0x55, 0x16, 0x6F, 0x29, 0xA3, 0xA0, 0xDC, 0x7E, 
   0x68, 0xE8, 0x00, 0x15, 0x4C, 0x09, 0x2B, 0x50, 0x7D, 0x77, 0x89, 0x7E, 0x9A, 0x7A, 0x39, 0x4F, 
   0xAA, 0x0B, 0x49, 0xBC, 0x56, 0x6F, 0x98, 0x79, 0x5D, 0x68, 0x40, 0x29, 0x67, 0x1E, 0x69, 0x7F, 
   0x58, 0x60, 0x92, 0x49, 0x57, 0x8A, 0x52, 0x66, 0xBA, 0x8C, 0x85, 0xD1, 0x74, 0xC3, 0x85, 0x32, 
   0x53, 0x6B, 0x0E, 0x01, 0x75, 0x7F, 0x8F, 0x97, 0x89, 0xAA, 0xC3, 0x10, 0x35, 0x5A, 0x1A, 0x1C, 
   0x58, 0x54, 0x61, 0x91, 0x45, 0x7F, 0x7C, 0x52, 0x3C, 0x83, 0x7B, 0x49, 0xA6, 0x58, 0x9F, 0x79, 
   0x1E, 0x93, 0x6E, 0x40, 0x25, 0xB8, 0x84, 0x55, 0x8F, 0x44, 0x71, 0x67, 0x15, 0x2D, 0x9F, 0x37, 
   0x5B, 0xBF, 0x82, 0x9F, 0x60, 0x75, 0x5E, 0x35, 0x11, 0x34, 0x6A, 0x00, 0x38, 0xAB, 0x6E, 0x3F, 
   0xB3, 0x81, 0x5D, 0x8A, 0x3C, 0x70, 0x6D, 0x34, 0x80, 0x99, 0x4A, 0x2F, 0x7B, 0x18, 0x13, 0x43, 
   0x4C, 0x70, 0xA0, 0x70, 0x89, 0xB3, 0x6B, 0x5C, 0x7F, 0x4C, 0x55, 0x7E, 0x1C, 0x71, 0x88, 0x00, 
   0x4E, 0x55, 0x3C, 0x37, 0x78, 0x88, 0x6A, 0xB2, 0x71, 0x92, 0xB1, 0x2B, 0x51, 0x49, 0x30, 0x28, 
   0x59, 0x52, 0x40, 0x88, 0x52, 0x54, 0x7F, 0x30, 0x8A, 0x9E, 0x47, 0x8A, 0x9F, 0x69, 0x5B, 0x93, 
   0x30, 0x10, 0x5A, 0x30, 0x55, 0x6C, 0x63, 0x8A, 0xD4, 0x63, 0x94, 0xD3, 0x4B, 0x3B, 0x69, 0x23, 
   0x12, 0x4E, 0x24, 0x5D, 0x4D, 0x7A, 0x8C, 0x8E, 0x7A, 0x4E, 0xA0, 0x18, 0x52, 0x79, 0x0C, 0x51, 
   0x6E, 0x4C, 0x45, 0x91, 0x86, 0x45, 0xB3, 0x6E, 0x51, 0x84, 0x17, 0x58, 0x77, 0x05, 0x4E, 0x70, 
   0x5D, 0x71, 0x6B, 0x8C, 0x66, 0x87, 0x3C, 0x5A, 0x8D, 0x1E, 0x53, 0x70, 0x57, 0x43, 0x77, 0x36, 
   0x71, 0xB0, 0x58, 0x7C, 0x98, 0x6D, 0x5D, 0x68, 0x26, 0x65, 0x66, 0x00, 0x1A, 0x71, 0x32, 0x27, 
   0x6C, 0x84, 0x8A, 0x74, 0x6D, 0x80, 0xA8, 0x21, 0x46, 0xA2, 0x00, 0x56, 0x51, 0x2E, 0x2E, 0x56, 
   0x91, 0x52, 0x9C, 0x86, 0xB4, 0xAF, 0x2F, 0x79, 0x8C, 0x21, 0x04, 0x6D, 0x16, 0x04, 0x56, 0x35, 
   0x63, 0x90, 0xBF, 0xCC, 0xC9, 0x68, 0x74, 0xA4, 0x00, 0x14, 0x1E, 0x17, 0x23, 0x34, 0x1F, 0x3C, 
   0x92, 0x2F, 0x5D, 0x90, 0x83, 0xA0, 0x83, 0x90, 0x79, 0xB7, 0x44, 0x3A, 0xBB, 0x3C, 0x71, 0x46, 
   0x1E, 0x4E, 0x33, 0x25, 0x31, 0x8A, 0x7B, 0x70, 0xA3, 0x3E, 0x4F, 0x4B, 0x28, 0x2F, 0xA2, 0x6D, 
   0x8C, 0xB5, 0x6D, 0x82, 0x4F, 0x22, 0x54, 0x76, 0x44, 0x36, 0xAF, 0x71, 0x5E, 0x71, 0x54, 0x90, 
   0x8C, 0x26, 0x34, 0x65, 0x37, 0x2F, 0x82, 0x61, 0x6A, 0xA5, 0x41, 0x67, 0x78, 0x53, 0x86, 0x73, 
   0x7C, 0x80, 0x9B, 0x53, 0x63, 0x80, 0x41, 0x5C, 0x8C, 0x19, 0x56, 0x98, 0x53, 0x7C, 0x76, 0x81, 
   0x42, 0x7B, 0x16, 0x1C, 0x6C, 0x0D, 0x43, 0xA1, 0xB4, 0xD6, 0xC4, 0xB4, 0xCC, 0x75, 0x17, 0x40, 
   0x80, 0x00, 0x46, 0xD9, 0x71, 0x4E, 0x7B, 0x2D, 0x27, 0x30, 0x08, 0x5D, 0xA9, 0x61, 0x7E, 0x9D, 
   0x8D, 0x86, 0x8A, 0x5B, 0x70, 0xF1, 0x44, 0x60, 0xBC, 0x92, 0x9D, 0x69, 0x7E, 0xA0, 0x71, 0x08, 
   0x2F, 0x81, 0x0A, 0x1B, 0x86, 0x2D, 0x33, 0x70, 0x42, 0x81, 0x62, 0x57, 0xA2, 0xB5, 0x6C, 0x76, 
   0xC3, 0xA5, 0x7A, 0xA1, 0x6E, 0x5C, 0xAA, 0x00, 0x44, 0x7F, 0x21, 0x71, 0x66, 0x8A, 0x82, 0x6D, 
   0x75, 0x5B, 0x92, 0x3C, 0x45, 0xBC, 0x2A, 0x7F, 0xB1, 0x79, 0x90, 0x88, 0x72, 0x67, 0x9C, 0x36, 
   0x4D, 0x88, 0x00, 0x2A, 0x6B, 0x17, 0x54, 0x72, 0xB0, 0xC8, 0xBF, 0xB7, 0x7E, 0xB5, 0x3D, 0x3C, 
   0x87, 0x10, 0x4B, 0xA1, 0x20, 0x45, 0x72, 0x28, 0x2C, 0x62, 0x76, 0x8B, 0x9D, 0x79, 0xBB, 0xAB, 
   0x8A, 0x65, 0x90, 0x6C, 0x69, 0xDA, 0x46, 0x77, 0xAE, 0x26, 0x37, 0x28, 0x05, 0x0F, 0x2E, 0x42, 
   0x5E, 0xAC, 0xB3, 0xBF, 0xCF, 0x4A, 0xBB, 0xFF, 0x56, 0x5E, 0xD9, 0xB5, 0x4F, 0x4A, 0x55, 0x85, 
   0x45, 0x00, 0x45, 0x93, 0x0A, 0x39, 0xC0, 0x73, 0x7E, 0x5A, 0x7B, 0x79, 0x56, 0x43, 0x5E, 0xBF, 
   0x70, 0x8B, 0xD8, 0x5F, 0x79, 0xAA, 0x31, 0x3A, 0x69, 0x4D, 0x34, 0x8A, 0x5A, 0x7A, 0x91, 0x6D, 
   0x8E, 0x9E, 0x67, 0x83, 0x99, 0x4F, 0x81, 0xAA, 0x27, 0x56, 0x7B, 0x60, 0x49, 0x8A, 0xA8, 0x54, 
   0x89, 0x19, 0x51, 0x5C, 0x00, 0x60, 0x97, 0x9C, 0xC8, 0xD8, 0xE8, 0xA4, 0xB5, 0x25, 0x07, 0x6E, 
   0x0C, 0x24, 0x3A, 0x57, 0x83, 0x87, 0x80, 0xB9, 0xEA, 0x7A, 0x96, 0xCE, 0x65, 0x81, 0x7B, 0x4A, 
   0x43, 0x7C, 0x04, 0x18, 0x69, 0x23, 0x37, 0x58, 0x82, 0x85, 0x72, 0xA6, 0xB5, 0xD6, 0x86, 0x86, 
   0xE0, 0x00, 0x3E, 0x5F, 0x00, 0x2C, 0x1E, 0x91, 0x3E, 0x87, 0x67, 0x80, 0xB4, 0x41, 0x7D, 0x84, 
   0x6E, 0x73, 0xDB, 0x9F, 0x90, 0xDE, 0x58, 0x99, 0x79, 0x10, 0x5C, 0x47, 0x24, 0x1A, 0x6D, 0x1A, 
   0x31, 0x5F, 0x52, 0x83, 0xA1, 0xB0, 0x90, 0xE2, 0x6C, 0x5D, 0xA8, 0x26, 0x5C, 0x3A, 0x36, 0x61, 
   0x69, 0x54, 0x2A, 0xCE, 0x76, 0x76, 0xAF, 0x84, 0xDB, 0xE6, 0x0A, 0x4F, 0x91, 0x00, 0x00, 0x00, 
   0x5E, 0x3D, 0x58, 0xBD, 0xFF, 0xFF, 0x89, 0xFD, 0xCE, 0x4B, 0x23, 0x68, 0x2A, 0x2C, 0x6F, 0x0C, 
   0x30, 0x6E, 0x3C, 0x2C, 0x81, 0x8A, 0x75, 0x89, 0x63, 0x9B, 0xAD, 0x46, 0x96, 0xC3, 0x55, 0x76, 
   0x5B, 0x4F, 0x40, 0x7B, 0x59, 0x28, 0xA8, 0x46, 0x8E, 0x8B, 0x23, 0x8D, 0x8E, 0x35, 0x15, 0x4A, 
   0x4D, 0x2E, 0x54, 0x53, 0xE6, 0xFF, 0x66, 0x67, 0x71, 0x7C, 0x6C, 0x60, 0x46, 0x5B, 0x95, 0x00, 
   0x65, 0xA2, 0x50, 0x85, 0x97, 0x85, 0x55, 0x85, 0x62, 0x41, 0x96, 0x27, 0x4C, 0x8A, 0x26, 0x5E, 
   0x62, 0x3E, 0x81, 0x75, 0x4C, 0x49, 0xAF, 0x70, 0x4E, 0xA3, 0x7B, 0xA2, 0x84, 0x45, 0x4A, 0x77, 
   0x00, 0x00, 0x46, 0x1B, 0x08, 0x7D, 0xA9, 0xF9, 0xB6, 0xAB, 0xFF, 0xFF, 0x5E, 0x34, 0xC4, 0x20, 
   0x00, 0x36, 0x2D, 0x64, 0x55, 0x3E, 0x92, 0xB0, 0x39, 0x6A, 0x8A, 0x72, 0x35, 0x83, 0x65, 0x56, 
   0x9E, 0x14, 0x6C, 0x69, 0x15, 0x2E, 0x4D, 0x62, 0x51, 0x9E, 0x70, 0x6A, 0x95, 0x49, 0x61, 0x75, 
   0x71, 0x89, 0xBA, 0x7A, 0x92, 0xAE, 0x27, 0x3E, 0x73, 0x13, 0x1F, 0x87, 0x25, 0x41, 0x95, 0x7B, 
   0x70, 0x6B, 0x81, 0x76, 0x41, 0x1E, 0x5E, 0x64, 0x00, 0x3A, 0xA6, 0x63, 0x56, 0xAD, 0x76, 0x40, 
   0xA7, 0x42, 0x58, 0x6C, 0x5D, 0x7B, 0x64, 0x44, 0x64, 0x7A, 0x04, 0x62, 0x75, 0x38, 0x22, 0x76, 
   0x56, 0x40, 0x93, 0x4C, 0x75, 0x7D, 0x52, 0x66, 0x7D, 0x46, 0x66, 0x88, 0x34, 0x54, 0x61, 0x30, 
   0x4F, 0x84, 0x59, 0x71, 0xAC, 0x76, 0x7B, 0x9F, 0x31, 0x2F, 0x3D, 0x1A, 0x2E, 0x64, 0x6A, 0x62, 
   0xB0, 0x80, 0x63, 0x9A, 0x18, 0x3C, 0x61, 0x1C, 0x5F, 0x62, 0x5C, 0x7C, 0xA1, 0x57, 0x43, 0x86, 
   0x52, 0x48, 0x80, 0x3B, 0x4F, 0x75, 0x35, 0x72, 0x8D, 0x74, 0x6C, 0xA4, 0x46, 0x65, 0xAD, 0x28, 
   0x46, 0x6C, 0x33, 0x50, 0x48, 0x3F, 0x34, 0x70, 0x51, 0x4C, 0x94, 0x2A, 0x75, 0x7F, 0x5F, 0x70, 
   0x7B, 0x97, 0x63, 0xCF, 0x2E, 0x3F, 0x99, 0x00, 0x38, 0x2F, 0x3D, 0x4B, 0x34, 0x56, 0x6F, 0xA8, 
   0x5E, 0x5F, 0xBB, 0x58, 0x7C, 0x76, 0x46, 0x4E, 0x58, 0x1D, 0x37, 0x75, 0x35, 0x65, 0x92, 0x7A, 
   0x71, 0x7C, 0x63, 0x80, 0xA3, 0x45, 0x55, 0xA5, 0x3C, 0x00, 0x3C, 0x19, 0x29, 0x37, 0x16, 0x65, 
   0xA0, 0x7F, 0x5D, 0xA8, 0x85, 0x75, 0x8D, 0x3F, 0x6F, 0x97, 0x26, 0x5B, 0x8E, 0x25, 0x15, 0x2C, 
   0x21, 0x11, 0x49, 0x5C, 0x91, 0xCF, 0x7F, 0xD5, 0xB9, 0x3F, 0x16, 0x56, 0x0B, 0x00, 0x39, 0x33, 
   0x55, 0x8A, 0x63, 0x7C, 0xC4, 0x85, 0xC1, 0x84, 0x60, 0x89, 0x75, 0x13, 0x00, 0x6D, 0x00, 0x00, 
   0x3F, 0x3C, 0x5F, 0x42, 0x57, 0x7B, 0xAD, 0x60, 0x77, 0xC7, 0x55, 0x55, 0x8E, 0x49, 0x50, 0x6A, 
   0x3D, 0x72, 0x74, 0x37, 0x5B, 0x63, 0x5A, 0x44, 0x87, 0x6B, 0x54, 0xCC, 0x26, 0x44, 0x66, 0x36, 
   0x5C, 0x61, 0x48, 0x79, 0x8A, 0x43, 0x53, 0x81, 0x61, 0x59, 0x89, 0x5A, 0x98, 0xC2, 0x2B, 0x63, 
   0x8D, 0x26, 0x1D, 0x4E, 0x4A, 0x3B, 0x7D, 0x7F, 0x82, 0xCE, 0x7A, 0x84, 0x84, 0x18, 0x51, 0x68, 
   0x2F, 0x4C, 0x9B, 0x74, 0x7F, 0x96, 0x26, 0x74, 0x69, 0x3E, 0x3B, 0x76, 0x83, 0x7F, 0xB1, 0x6C, 
   0x79, 0x90, 0x2D, 0x23, 0xA0, 0x44, 0x25, 0x8F, 0x46, 0x8B, 0x51, 0x64, 0xCD, 0xBF, 0x86, 0xC6, 
   0xD0, 0x88, 0x43, 0x85, 0x1C, 0x04, 0x98, 0x00, 0x1E, 0x77, 0x1D, 0x44, 0x00, 0x8A, 0x72, 0x79, 
   0x9A, 0xAF, 0xFF, 0x7D, 0x7D, 0xAD, 0x41, 0x8D, 0x54, 0x23, 0x6D, 0x85, 0x3A, 0x27, 0x9B, 0x8A, 
   0x7C, 0x89, 0x71, 0x97, 0x9A, 0x29, 0x3A, 0x9E, 0x00, 0x1E, 0x81, 0x4F, 0x5A, 0x34, 0xBA, 0x97, 
   0xB0, 0x7C, 0x9E, 0xFF, 0x2A, 0x64, 0x95, 0x28, 0x61, 0x52, 0x3A, 0x53, 0x62, 0x6E, 0x37, 0xA1, 
   0x54, 0x45, 0x98, 0x4B, 0x92, 0x8A, 0xA0, 0x89, 0xC4, 0x86, 0xA5, 0xDE, 0x2B, 0x9A, 0x68, 0x00, 
   0x12, 0x32, 0x00, 0x0A, 0x5A, 0x73, 0x58, 0xB8, 0xAB, 0xA6, 0xAF, 0x90, 0xB2, 0x9E, 0x43, 0x66, 
   0x91, 0x29, 0x2F, 0x84, 0x50, 0x2F, 0x50, 0x3F, 0x5A, 0x8B, 0x1A, 0x85, 0xAB, 0x8E, 0x83, 0xCE, 
   0x89, 0xB5, 0xB5, 0x60, 0x7F, 0x47, 0x3B, 0x04, 0x65, 0x1D, 0x38, 0xEF, 0x6D, 0x9B, 0x8E, 0x58, 
   0x7C, 0x1D, 0x00, 0x5C, 0x92, 0x8A, 0x69, 0xEC, 0xFE, 0xA2, 0xEC, 0x7D, 0x7E, 0xA3, 0x14, 0x64, 
   0x69, 0x00, 0x56, 0x60, 0x27, 0x3F, 0x4A, 0x69, 0x79, 0xC3, 0x9D, 0x90, 0xCF, 0x41, 0x68, 0x68, 
   0x07, 0x3A, 0x68, 0x52, 0x8F, 0xBF, 0x6F, 0x84, 0xB4, 0x2C, 0x2A, 0x53, 0x29, 0x38, 0x6B, 0x8C, 
   0xA8, 0xB8, 0xB5, 0xDB, 0xE0, 0x4C, 0x7B, 0xB6, 0x26, 0x00, 0x46, 0x56, 0x14, 0x6D, 0x1D, 0x9F, 
   0xBD, 0x4C, 0xA1, 0x9B, 0x76, 0x3A, 0x51, 0x3F, 0x18, 0x86, 0x30, 0x81, 0xCC, 0x9F, 0xB1, 0xAF, 
   0x94, 0x72, 0x80, 0x2B, 0x33, 0x59, 0x13, 0x40, 0x89, 0x7A, 0x9D, 0xE0, 0xB6, 0xF6, 0xD9, 0x29, 
   0x51, 0x89, 0x00, 0x00, 0x3B, 0x45, 0x3B, 0x3B, 0x92, 0xC3, 0x9F, 0x8E, 0x9E, 0xED, 0x4D, 0x91, 
   0xCA, 0x3E, 0x33, 0x65, 0x00, 0x22, 0x1A, 0x0F, 0x68, 0x83, 0xCF, 0x87, 0xDC, 0xB4, 0x89, 0x95, 
   0x00, 0x5C, 0x79, 0x00, 0x51, 0xA7, 0xB7, 0x85, 0xDF, 0xD7, 0xD2, 0xCA, 0x04, 0x5B, 0x52, 0x00, 
   0x00, 0x05, 0x24, 0x40, 0x8B, 0x79, 0xA9, 0xEA, 0x8E, 0x6C, 0x86, 0x24, 0x09, 0x39, 0x44, 0x86, 
   0xBF, 0xF4, 0xFF, 0xFF, 0x89, 0xA1, 0xAF, 0x00, 0x00, 0x66, 0x00, 0x00, 0x52, 0x5B, 0x45, 0x8C, 
   0x5A, 0xC8, 0xCD, 0x9C, 0xB9, 0x9A, 0xC1, 0xA4, 0xB9, 0x27, 0x46, 0x7C, 0x00, 0x00, 0x41, 0x2A, 
   0x37, 0x86, 0x83, 0x91, 0xA0, 0x81, 0x9A, 0x87, 0x80, 0x6D, 0xCC, 0x2E, 0x6B, 0xB4, 0x0B, 0x3C, 
   0x72, 0x7D, 0x53, 0x4A, 0x7D, 0xA2, 0xD8, 0x3C, 0x9A, 0xD2, 0x45, 0x03, 0x41, 0x23, 0x08, 0x40, 
   0x3C, 0x6D, 0x82, 0xAA, 0xCB, 0xFC, 0x75, 0x64, 0xB1, 0x9C, 0x5E, 0xD8, 0x00, 0x5A, 0x26, 0x0C, 
   0x77, 0x44, 0x92, 0xA4, 0xDB, 0xA9, 0x95, 0xC6, 0x2E, 0x13, 0x8C, 0x0F, 0x22, 0x7E, 0x2B, 0x50, 
   0x66, 0x61, 0x58, 0x78, 0x58, 0x7D, 0xA3, 0x4E, 0x9A, 0xC0, 0x75, 0x6F, 0x9C, 0x36, 0x00, 0x3F, 
   0x0E, 0x04, 0x68, 0x39, 0x76, 0x88, 0x8C, 0xCB, 0xBF, 0x87, 0xA9, 0xB5, 0x52, 0x55, 0x9C, 0x5E, 
   0x39, 0xA8, 0x3E, 0x6E, 0x66, 0x00, 0x2E, 0x26, 0x33, 0x18, 0x89, 0xA0, 0x97, 0xD4, 0x5B, 0x8C, 
   0x8F, 0x15, 0x29, 0x6B, 0x42, 0x39, 0x86, 0x33, 0x5C, 0x59, 0x36, 0x69, 0x67, 0x77, 0x54, 0xD0, 
   0xAB, 0x71, 0xB4, 0x58, 0xBA, 0x75, 0x04, 0x4A, 0xA5, 0x13, 0x14, 0x9C, 0x6E, 0x5C, 0x5F, 0x5D, 
   0x57, 0x35, 0x18, 0x3B, 0x7B, 0x19, 0x64, 0xA0, 0x70, 0x64, 0xAD, 0x8E, 0x47, 0x90, 0x32, 0x6F, 
   0x6C, 0x3B, 0x58, 0x81, 0x4A, 0x4C, 0x8B, 0x2D, 0x5C, 0x57, 0x3D, 0x57, 0x7A, 0x38, 0x78, 0xBF, 
   0x4F, 0x28, 0x5F, 0x4F, 0x2E, 0x6F, 0x27, 0x74, 0x98, 0x3A, 0x6A, 0x66, 0x4D, 0x38, 0x79, 0x93, 
   0x82, 0xB8, 0x70, 0x8D, 0xBD, 0x00, 0x30, 0x49, 0x29, 0x29, 0x53, 0x75, 0x5C, 0x8D, 0x64, 0x74, 
   0x9F, 0x30, 0x5E, 0x88, 0x4A, 0x7A, 0x82, 0x2D, 0x45, 0x8D, 0x2D, 0x1E, 0x55, 0x2E, 0x64, 0x84, 
   0x62, 0x8D, 0xB8, 0x5D, 0x5F, 0x7F, 0x3F, 0x37, 0x57, 0x1D, 0x5A, 0x7E, 0x4B, 0x7D, 0x8A, 0x62, 
   0x92, 0xA1, 0x50, 0x2E, 0x89, 0x21, 0x05, 0x5A, 0x00, 0x56, 0x56, 0x81, 0x80, 0xA2, 0xBB, 0x81, 
   0xD6, 0x3B, 0x64, 0x9A, 0x09, 0x5B, 0x4B, 0x02, 0x21, 0x54, 0x49, 0x4F, 0x72, 0x7F, 0x67, 0x85, 
   0x52, 0x63, 0xA3, 0x29, 0x47, 0x86, 0x3A, 0x59, 0x75, 0x4B, 0x65, 0x75, 0x62, 0x65, 0x86, 0x4B, 
   0x6F, 0x9C, 0x50, 0x56, 0x8A, 0x32, 0x42, 0x60, 0x1B, 0x30, 0x65, 0x4F, 0x36, 0x71, 0x66, 0x77, 
   0x73, 0x17, 0x5C, 0x9C, 0x3A, 0x58, 0x91, 0x79, 0x7F, 0x6E, 0x7E, 0x40, 0x7E, 0x30, 0x55, 0x87, 
   0x00, 0x59, 0x52, 0x1F, 0x37, 0x53, 0x67, 0x34, 0x94, 0x80, 0xBE, 0xA1, 0x5D, 0x73, 0x84, 0x22, 
   0x00, 0x67, 0x16, 0x3F, 0x4A, 0x45, 0x96, 0xAC, 0x8F, 0x96, 0xBC, 0x44, 0x60, 0x80, 0x14, 0x07, 
   0x22, 0x2F, 0x0D, 0x61, 0x20, 0x54, 0x8B, 0x3F, 0x63, 0x7E, 0x5F, 0x76, 0x70, 0x50, 0x5C, 0xB6, 
   0x62, 0x5D, 0x9A, 0x61, 0x79, 0x65, 0x43, 0x62, 0x81, 0x3D, 0x50, 0x97, 0x6E, 0x7C, 0x74, 0x12, 
   0x31, 0x36, 0x0D, 0x16, 0x9F, 0x6F, 0x79, 0xAE, 0x82, 0x98, 0x94, 0x32, 0x5F, 0xAB, 0x1B, 0x36, 
   0x72, 0x5A, 0x53, 0x7D, 0x4B, 0x70, 0x99, 0x51, 0x5A, 0x5C, 0x5C, 0x6C, 0xA6, 0x44, 0x5B, 0xAD, 
   0x28, 0x56, 0x74, 0x19, 0x4C, 0x7F, 0x83, 0x7B, 0x80, 0xA7, 0x87, 0x77, 0x40, 0x4F, 0xAD, 0x1D, 
   0x5B, 0xCB, 0x77, 0x9F, 0x96, 0x71, 0x65, 0x50, 0x00, 0x04, 0x78, 0x29, 0x73, 0xAC, 0xE7, 0xC5, 
   0xA1, 0xA6, 0xA1, 0x84, 0x00, 0x41, 0xAF, 0x00, 0x0A, 0x57, 0x51, 0x4F, 0x3B, 0x55, 0x70, 0xA4, 
   0x6F, 0x63, 0xAD, 0x8C, 0xB4, 0xA3, 0x45, 0x90, 0x8C, 0x00, 0x0B, 0x80, 0x24, 0x38, 0x9D, 0xC0, 
   0x84, 0xA2, 0x98, 0xB2, 0xA1, 0x17, 0x76, 0x93, 0x24, 0x1E, 0x4D, 0x36, 0x13, 0x54, 0x5A, 0x7D, 
   0x9C, 0x56, 0x8D, 0xB6, 0x4D, 0xB5, 0xBC, 0x82, 0x90, 0x89, 0x81, 0x1B, 0x8D, 0x00, 0x1B, 0x81, 
   0x21, 0x69, 0x8D, 0xB3, 0xA0, 0xA0, 0xAD, 0xA1, 0xA6, 0x58, 0x8E, 0xAB, 0x00, 0x67, 0x86, 0x00, 
   0x35, 0x68, 0x53, 0x3F, 0x91, 0x8F, 0x62, 0xA9, 0x41, 0x59, 0xA9, 0x37, 0x77, 0x91, 0x88, 0xA5, 
   0x95, 0x66, 0x2E, 0x68, 0x49, 0x55, 0x80, 0x4D, 0x8E, 0xB6, 0x52, 0x46, 0xBC, 0x35, 0x85, 0xC0, 
   0x4C, 0x8B, 0x62, 0x53, 0x56, 0x29, 0x37, 0x28, 0x7D, 0x76, 0x63, 0xEE, 0x5F, 0x93, 0xEF, 0x0A, 
   0x8E, 0x86, 0x35, 0x43, 0x51, 0x9F, 0x4A, 0x79, 0xA5, 0xA0, 0xB0, 0x52, 0xAB, 0xFF, 0x0A, 0x3E, 
   0xA6, 0x53, 0x53, 0x25, 0x75, 0x80, 0x63, 0x4C, 0x6E, 0xDB, 0x40, 0x56, 0xC4, 0x73, 0x77, 0x72, 
   0x3A, 0x4F, 0x43, 0x3B, 0x3E, 0x78, 0x54, 0x69, 0xAE, 0x5C, 0x9A, 0xAC, 0x5E, 0x69, 0x91, 0x5F, 
   0x7B, 0xAE, 0x71, 0xB2, 0xB8, 0x80, 0x5F, 0x7D, 0x76, 0x39, 0x91, 0x00, 0x48, 0x7E, 0x00, 0x55, 
   0x79, 0x91, 0xA5, 0xB2, 0xBB, 0x76, 0xA6, 0x10, 0x00, 0x40, 0x00, 0x2A, 0x86, 0xAF, 0xF1, 0xD2, 
   0xE6, 0xD7, 0xBC, 0x45, 0x1F, 0x82, 0x19, 0x34, 0x49, 0x72, 0x9A, 0xA5, 0x5A, 0x6D, 0xE9, 0x42, 
   0x88, 0x80, 0x58, 0x8B, 0x5B, 0x57, 0x32, 0x7C, 0x3A, 0x2C, 0x9E, 0x3A, 0x88, 0x93, 0x5D, 0x68, 
   0x6D, 0x5E, 0x58, 0x96, 0x53, 0x92, 0xCA, 0x2C, 0x65, 0x69, 0x62, 0x5A, 0x70, 0xA7, 0x83, 0xC6, 
   0x40, 0x7E, 0x78, 0x1E, 0x63, 0x69, 0x7A, 0x85, 0xE1, 0xAC, 0x89, 0xEA, 0x5E, 0x97, 0x67, 0x0E, 
   0x64, 0x6C, 0x0B, 0x0A, 0x53, 0x19, 0x1C, 0x29, 0x2C, 0x44, 0x7B, 0x95, 0x8A, 0xFF, 0xDD, 0xAD, 
   0xC4, 0x8B, 0xF7, 0xBD, 0x30, 0xA8, 0xBD, 0x32, 0x00, 0x16, 0x1F, 0x00, 0x4A, 0x6A, 0xE8, 0xFF, 
   0x87, 0xBC, 0xCF, 0x5F, 0x35, 0x5E, 0x51, 0x2B, 0x55, 0x32, 0x50, 0x81, 0x32, 0x3A, 0x8D, 0x50, 
   0x53, 0x67, 0x5D, 0x72, 0xAE, 0x6E, 0xA0, 0xE3, 0x46, 0x76, 0x88, 0x45, 0x2B, 0x75, 0x55, 0x2C, 
   0x96, 0x39, 0xB6, 0xB7, 0x66, 0xA9, 0x67, 0x65, 0x1D, 0x89, 0x2B, 0x1B, 0x9B, 0x36, 0x71, 0x95, 
   0x4E, 0x7E, 0x8F, 0x6B, 0x57, 0x94, 0x31, 0x50, 0x8D, 0x15, 0x3A, 0x98, 0x62, 0x75, 0x75, 0x75, 
   0x82, 0x65, 0x70, 0x71, 0x78, 0x3B, 0x7F, 0xBE, 0x3F, 0x59, 0xB9, 0x3E, 0x45, 0x6D, 0x38, 0x22, 
   0x66, 0x4B, 0x35, 0x7D, 0x63, 0xBB, 0x84, 0x5D, 0x93, 0xAE, 0x20, 0x05, 0x92, 0x39, 0x1E, 0x76, 
   0x96, 0xB6, 0x82, 0x8A, 0xD3, 0xBB, 0x17, 0x32, 0x7C, 0x3E, 0x0F, 0x82, 0x8D, 0xC0, 0x9E, 0x64, 
   0xC3, 0xBA, 0x18, 0x1F, 0x79, 0x39, 0x00, 0x4A, 0x6C, 0x50, 0x89, 0x2D, 0x91, 0xA6, 0x3F, 0x8D, 
   0x8B, 0x7D, 0x64, 0xC3, 0x4A, 0x57, 0x77, 0x0B, 0x51, 0x4F, 0x3A, 0x46, 0x94, 0x86, 0x79, 0xA6, 
   0x64, 0x6D, 0x79, 0x3A, 0x2F, 0xB1, 0x44, 0x7E, 0xBA, 0x6B, 0x88, 0x7D, 0x5D, 0x41, 0x3C, 0x0B, 
   0x22, 0x48, 0x00, 0x45, 0xA6, 0x6A, 0x5E, 0xAD, 0x9F, 0x76, 0xA7, 0x4A, 0x6B, 0x6C, 0x58, 0x65, 
   0x6A, 0x3A, 0x5D, 0x8B, 0x1C, 0x39, 0x74, 0x3E, 0x28, 0x74, 0x72, 0x72, 0x85, 0x4F, 0x62, 0x7A, 
   0x2B, 0x61, 0x9B, 0x24, 0x33, 0x62, 0x20, 0x3F, 0x4D, 0x3A, 0x63, 0x94, 0x6A, 0x75, 0xBE, 0x82, 
   0x65, 0x9B, 0x42, 0x53, 0x55, 0x07, 0x47, 0x6B, 0x34, 0x58, 0x99, 0x74, 0x58, 0x8E, 0x4C, 0x4D, 
   0x82, 0x29, 0x7A, 0x7B, 0x5C, 0x6D, 0x91, 0x55, 0x1C, 0x6F, 0x2D, 0x2D, 0x6A, 0x32, 0x63, 0x82, 
   0x50, 0x8C, 0x8F, 0x67, 0x64, 0xA0, 0x39, 0x2A, 0x8E, 0x28, 0x52, 0x49, 0x46, 0x87, 0x56, 0x7F, 
   0x5F, 0xB9, 0x3F, 0x58, 0xCB, 0x00, 0x50, 0x58, 0x3A, 0x39, 0x63, 0x85, 0x45, 0xB8, 0x5D, 0x63, 
   0xC1, 0x32, 0x7F, 0x5D, 0x15, 0x3A, 0x44, 0x43, 0x61, 0x7D, 0x5B, 0x60, 0xA5, 0x4A, 0x2C, 0x7E, 
   0x45, 0x4F, 0x51, 0x3F, 0x57, 0x8B, 0x2F, 0x5E, 0xA3, 0x6D, 0x87, 0x86, 0x50, 0x69, 0x9B, 0x26, 
   0x4A, 0x7D, 0x20, 0x2B, 0x5A, 0x38, 0x3D, 0x66, 0x5C, 0x77, 0x9A, 0x62, 0x66, 0x9B, 0x50, 0x33, 
   0x6D, 0x26, 0x5A, 0x78, 0x16, 0x61, 0x8F, 0x67, 0x40, 0x7F, 0x89, 0x6E, 0x8A, 0x37, 0x84, 0xAA, 
   0x1D, 0x6A, 0x7F, 0x06, 0x00, 0x2E, 0x1A, 0x00, 0x30, 0x79, 0x8B, 0xB1, 0x97, 0xDD, 0xDB, 0x3F, 
   0x7A, 0x6D, 0x00, 0x04, 0x32, 0x20, 0x08, 0x88, 0x45, 0x71, 0xA5, 0x90, 0xB8, 0x8E, 0x7E, 0x7E, 
   0x8B, 0x0E, 0x0F, 0x71, 0x0C, 0x0D, 0x1B, 0x2B, 0x48, 0x35, 0x35, 0x58, 0xBD, 0x89, 0x83, 0xB7, 
   0x7A, 0x69, 0xA8, 0x4B, 0x53, 0xA6, 0x32, 0xA2, 0x7A, 0x41, 0x5C, 0x2E, 0x35, 0x43, 0x6C, 0x51, 
   0x4D, 0xA1, 0x3A, 0x31, 0x4E, 0x34, 0x72, 0xA0, 0x35, 0x7F, 0xA2, 0x37, 0x36, 0x44, 0x5B, 0x60, 
   0x9A, 0x57, 0x89, 0xC3, 0x62, 0x8F, 0x73, 0x34, 0x3E, 0x72, 0x2D, 0x32, 0x78, 0x5A, 0x82, 0xBD, 
   0x2E, 0x5B, 0x90, 0x20, 0x57, 0x5E, 0x89, 0x64, 0x92, 0x74, 0x66, 0x89, 0x30, 0x6D, 0xA8, 0x73, 
   0x75, 0xAE, 0x50, 0x91, 0x97, 0x1C, 0x83, 0x9C, 0x66, 0x41, 0xAB, 0x5F, 0x0C, 0x71, 0x26, 0x53, 
   0x7C, 0x2E, 0xB8, 0xC0, 0x85, 0x9C, 0x5B, 0x80, 0x66, 0x79, 0x39, 0x1F, 0xF5, 0x20, 0x36, 0x6A, 
   0x5E, 0x87, 0x0E, 0x5F, 0x88, 0x99, 0x33, 0x44, 0xDB, 0x62, 0x55, 0x88, 0x75, 0x68, 0x93, 0x49, 
   0x80, 0xA3, 0x6C, 0x75, 0xB3, 0x99, 0x7F, 0x6D, 0x62, 0x6B, 0x83, 0x2F, 0x3B, 0xB5, 0x00, 0x09, 
   0x7C, 0x14, 0x8E, 0x34, 0x97, 0xA2, 0x93, 0xA0, 0x5E, 0xF2, 0x50, 0x47, 0xBF, 0x2D, 0x64, 0x68, 
   0x56, 0x71, 0x82, 0x89, 0x8F, 0xAF, 0x77, 0x93, 0x98, 0x2A, 0x63, 0x76, 0x12, 0x1D, 0x72, 0x62, 
   0x6B, 0xC8, 0xA1, 0x9D, 0xB7, 0x39, 0x40, 0x7C, 0x0A, 0x33, 0x90, 0x28, 0x3A, 0x83, 0x77, 0x5C, 
   0x62, 0x91, 0xC0, 0xA9, 0x5E, 0x93, 0xB1, 0x6D, 0x30, 0xB1, 0x63, 0x6B, 0xB4, 0x27, 0x6A, 0x56, 
   0x10, 0x21, 0x3F, 0x47, 0x51, 0x9D, 0x9A, 0xA4, 0xB2, 0x73, 0x9B, 0x89, 0x0D, 0x67, 0xCF, 0x52, 
   0x5A, 0xFF, 0xB3, 0x5F, 0x6D, 0x50, 0x7A, 0x00, 0x0A, 0x3C, 0x8D, 0x44, 0x4E, 0xDC, 0x7A, 0x9A, 
   0x9F, 0x80, 0x6D, 0xC6, 0x72, 0x82, 0xB7, 0x3B, 0x6E, 0x4D, 0x0B, 0x39, 0x6D, 0x3E, 0x54, 0xBC, 
   0x78, 0x81, 0x93, 0x41, 0x22, 0x33, 0x28, 0x31, 0x64, 0x92, 0xA8, 0xEC, 0xAA, 0xE3, 0xFA, 0x31, 
   0x63, 0x8C, 0x30, 0x00, 0x50, 0xB2, 0x6F, 0x98, 0x5A, 0xB4, 0xC5, 0x03, 0x5E, 0x8B, 0x5D, 0x5B, 
   0x79, 0x69, 0x37, 0x84, 0x2B, 0x5F, 0x9B, 0x70, 0x89, 0xA6, 0x60, 0x4C, 0x51, 0x01, 0x44, 0x87, 
   0x60, 0x9E, 0xC3, 0xD4, 0xD2, 0xBE, 0x8D, 0x9C, 0xAB, 0x0B, 0x09, 0x59, 0x00, 0x04, 0x64, 0x7D, 
   0xBE, 0xAA, 0xCE, 0xFF, 0xDE, 0x64, 0x6A, 0xD0, 0x04, 0x02, 0x5F, 0x03, 0x00, 0x0D, 0x3F, 0x54, 
   0x60, 0x6C, 0xB0, 0xE3, 0x9C, 0xA8, 0xE6, 0x8F, 0x68, 0xAB, 0x00, 0x5A, 0x59, 0x00, 0x2C, 0x6A, 
   0xA7, 0x7D, 0xC2, 0xD6, 0xB2, 0xB2, 0x0D, 0x67, 0x85, 0x12, 0x33, 0x90, 0xB1, 0x98, 0xEE, 0xB3, 
   0xBC, 0xAF, 0x00, 0x23, 0x00, 0x00, 0x00, 0x01, 0x3D, 0x3F, 0xB4, 0xF0, 0xFF, 0xFF, 0xEC, 0xD3, 
   0xF7, 0x01, 0x1B, 0x76, 0x22, 0x2C, 0x12, 0xC2, 0xB0, 0xA2, 0x88, 0xBB, 0xEE, 0x29, 0x62, 0xA4, 
   0x68, 0x73, 0xAB, 0x42, 0x4C, 0x95, 0x00, 0x00, 0x49, 0x45, 0x2B, 0x65, 0xC6, 0xC9, 0xB2, 0x65, 
   0xAF, 0xA9, 0x46, 0x5D, 0xA3, 0x3E, 0x53, 0x87, 0x2E, 0x41, 0x8C, 0x68, 0x37, 0x81, 0x8A, 0xA4, 
   0xA9, 0x3E, 0xAA, 0xAD, 0x26, 0x2B, 0x5C, 0x5F, 0x2F, 0x52, 0x60, 0x8B, 0xD8, 0x60, 0x9D, 0xFF, 
   0x5F, 0x6D, 0x8A, 0x2C, 0x00, 0x10, 0x06, 0x50, 0x63, 0x00, 0x40, 0x47, 0xA6, 0x74, 0xC0, 0xAE, 
   0x80, 0xAA, 0x1F, 0x58, 0x65, 0x1D, 0x4C, 0x5F, 0x4B, 0x9A, 0xA0, 0x68, 0x54, 0xB2, 0x4C, 0x2A, 
   0x84, 0x40, 0x68, 0x77, 0x56, 0x46, 0x71, 0x23, 0x0F, 0x5C, 0x1B, 0x42, 0x9E, 0x7A, 0xCA, 0xD5, 
   0xB4, 0xED, 0xC3, 0x51, 0x60, 0x7B, 0x19, 0x0B, 0x6C, 0x39, 0x37, 0x6B, 0x39, 0x83, 0x89, 0x1F, 
   0x89, 0x75, 0x76, 0x4A, 0xB5, 0xA9, 0x64, 0xE8, 0x29, 0x62, 0x5D, 0x00, 0x2F, 0x2E, 0x60, 0x41, 
   0xBC, 0x62, 0xAF, 0xA7, 0x41, 0x70, 0x7A, 0x63, 0x47, 0xB8, 0x6D, 0x61, 0x89, 0x27, 0x71, 0x54, 
   0x15, 0x20, 0x92, 0x44, 0x37, 0xB3, 0x95, 0x77, 0x72, 0x8E, 0xAB, 0x49, 0x02, 0x4E, 0x6C, 0x00, 
   0x1E, 0xA7, 0x5D, 0x57, 0xA8, 0x7B, 0x64, 0x90, 0x37, 0x54, 0x6C, 0x41, 0x88, 0x81, 0x40, 0x65, 
   0x90, 0x3A, 0x5D, 0x5D, 0x4A, 0x4B, 0x74, 0x45, 0x4A, 0xA2, 0x4A, 0x4A, 0x85, 0x5F, 0x5B, 0x73, 
   0x24, 0x72, 0x6C, 0x18, 0x6C, 0x6D, 0x31, 0x21, 0x76, 0x7E, 0x4A, 0xAB, 0x4B, 0x84, 0xB1, 0x19, 
   0x4C, 0x60, 0x4D, 0x2B, 0x4E, 0x86, 0x81, 0xA5, 0x3B, 0x71, 0xA6, 0x0C, 0x4E, 0x8E, 0x4A, 0x68, 
   0x6A, 0x61, 0x5B, 0x79, 0x3A, 0x16, 0x57, 0x45, 0x55, 0x80, 0x5B, 0x78, 0x97, 0x3D, 0x4B, 0x75, 
   0x3C, 0x40, 0x64, 0x2C, 0x5C, 0xA9, 0x22, 0x62, 0x82, 0x78, 0x45, 0x60, 0x51, 0x2F, 0x78, 0x18, 
   0x5E, 0x8B, 0x3B, 0x76, 0x82, 0x6F, 0x75, 0xAB, 0x90, 0x5C, 0xCB, 0x2D, 0x38, 0x9E, 0x02, 0x43, 
   0x2E, 0x25, 0x56, 0x48, 0x72, 0x73, 0x99, 0x73, 0x79, 0x9A, 0x44, 0x38, 0x72, 0x0F, 0x2B, 0x71, 
   0x38, 0x37, 0x66, 0x56, 0x61, 0x78, 0x68, 0x73, 0xAD, 0x50, 0x63, 0xB8, 0x31, 0x7D, 0x6B, 0x3B, 
   0x26, 0x36, 0x09, 0x1A, 0x5E, 0x3E, 0x5A, 0x8E, 0x79, 0x6E, 0x80, 0x6E, 0x8A, 0xB3, 0x23, 0x4F, 
   0x8A, 0x38, 0x26, 0x4F, 0x59, 0x42, 0x54, 0x2B, 0x4A, 0xAB, 0x20, 0x7E, 0xAB, 0x75, 0x83, 0x5F, 
   0x47, 0x26, 0x74, 0x13, 0x30, 0x68, 0x2A, 0x4D, 0x58, 0x3D, 0x29, 0x7C, 0x51, 0x80, 0x95, 0x8A, 
   0xCF, 0xB8, 0x49, 0x49, 0x8E, 0x03, 0x00, 0x31, 0x21, 0x00, 0x48, 0x6D, 0x84, 0xC7, 0x96, 0xCC, 
   0xC1, 0x44, 0x96, 0x5C, 0x08, 0x00, 0x1B, 0x08, 0x02, 0x60, 0x3E, 0x60, 0x65, 0x70, 0x81, 0x92, 
   0x6D, 0x7F, 0xC9, 0x56, 0x69, 0xBD, 0x43, 0x57, 0x64, 0x36, 0x72, 0x45, 0x30, 0x38, 0x77, 0x57, 
   0x43, 0x8F, 0x78, 0x92, 0x90, 0x11, 0x37, 0x59, 0x00, 0x16, 0x62, 0x6B, 0x6E, 0xAF, 0x8A, 0x8F, 
   0xA6, 0x5D, 0x8A, 0x90, 0x40, 0x5C, 0x9B, 0x61, 0x6C, 0x95, 0x38, 0x59, 0x7D, 0x00, 0x32, 0x4A, 
   0x6F, 0x71, 0x90, 0x98, 0x79, 0xA9, 0x16, 0x47, 0x89, 0x17, 0x5B, 0xB7, 0xA6, 0x75, 0x90, 0x5D, 
   0x9E, 0x52, 0x12, 0x6B, 0x9D, 0x56, 0x7F, 0xCF, 0xB6, 0x91, 0x8F, 0x4C, 0x10, 0x6F, 0x00, 0x00, 
   0x7F, 0x0B, 0x4F, 0x42, 0xDF, 0xF9, 0x96, 0xED, 0xB6, 0xFF, 0x4E, 0x41, 0xCB, 0x24, 0x5E, 0x5F, 
   0x00, 0x55, 0x50, 0x00, 0x16, 0x40, 0x6B, 0x47, 0xA6, 0xA3, 0xAD, 0xE8, 0x64, 0x98, 0x94, 0x03, 
   0x5E, 0x9D, 0x27, 0x47, 0x7F, 0xB7, 0x6A, 0x6F, 0xB0, 0xA3, 0xD5, 0x10, 0x6D, 0x89, 0x00, 0x4D, 
   0x54, 0x1E, 0x35, 0x59, 0x67, 0x3C, 0x74, 0x7C, 0x69, 0xC9, 0x36, 0xAC, 0xDE, 0x97, 0xB4, 0xC0, 
   0xA0, 0x73, 0x83, 0x0E, 0x6A, 0x6F, 0x0C, 0x3A, 0x68, 0x42, 0x2F, 0x76, 0xA1, 0x9C, 0xB9, 0xA7, 
   0x97, 0xD7, 0x48, 0x67, 0xA8, 0x16, 0x6E, 0x9E, 0x25, 0x27, 0x61, 0x38, 0x06, 0x43, 0x31, 0x50, 
   0x73, 0x7A, 0xC2, 0xA5, 0xD1, 0xDA, 0xEB, 0x6F, 0x76, 0xC1, 0x31, 0x43, 0x4B, 0x2D, 0x18, 0x38, 
   0x10, 0x2B, 0x9C, 0x57, 0x74, 0xCE, 0x78, 0xA0, 0x92, 0x3D, 0xA8, 0xAA, 0x73, 0x6E, 0x94, 0xC2, 
   0x4A, 0xA5, 0x6E, 0x8C, 0xD5, 0x0D, 0x68, 0x81, 0x00, 0x28, 0x0D, 0x43, 0x41, 0x55, 0xB5, 0xA0, 
   0xE4, 0xB0, 0xC3, 0xFF, 0x58, 0x5B, 0xB5, 0x31, 0x5E, 0x53, 0x39, 0x6C, 0x4A, 0x2D, 0x54, 0x7D, 
   0x3A, 0x39, 0xB7, 0x5F, 0x74, 0x8A, 0x5C, 0x71, 0x53, 0x75, 0x7A, 0xA1, 0x65, 0xBF, 0xFE, 0x69, 
   0x89, 0x97, 0x5B, 0x09, 0x67, 0x10, 0x3D, 0x81, 0x2D, 0xB1, 0x8C, 0xBD, 0xC1, 0xB4, 0x88, 0x6D, 
   0x9C, 0x00, 0x00, 0x62, 0x0D, 0x3D, 0x84, 0x98, 0xC9, 0xB2, 0x99, 0x91, 0x90, 0x05, 0x00, 0x47, 
   0x01, 0x45, 0x89, 0xBA, 0xFF, 0xFD, 0xAF, 0xA2, 0xC8, 0x1F, 0x00, 0x5E, 0x17, 0x32, 0x19, 0x5C, 
   0x7E, 0x99, 0xA0, 0x97, 0xFF, 0x6A, 0xD3, 0xD8, 0x22, 0x50, 0x3F, 0x16, 0x00, 0x2B, 0x24, 0x37, 
   0x88, 0x7D, 0xA9, 0xB5, 0xA8, 0xA9, 0xC9, 0x68, 0xA3, 0xAD, 0x27, 0x4C, 0x7D, 0x04, 0x43, 0x43, 
   0x61, 0x5F, 0xAA, 0x9C, 0x87, 0xC2, 0x57, 0x77, 0x73, 0x12, 0x76, 0x9A, 0x62, 0x53, 0xDD, 0xAB, 
   0x63, 0x80, 0x49, 0x6E, 0x62, 0x04, 0x5E, 0x84, 0x70, 0x4E, 0x7B, 0x6C, 0x94, 0xA0, 0x13, 0x8F, 
   0xCF, 0x48, 0x00, 0x7A, 0x85, 0x29, 0x4E, 0x7D, 0xFF, 0xF0, 0xD1, 0xFF, 0xFF, 0x96, 0x1E, 0x7A, 
   0x00, 0x00, 0x42, 0x00, 0x4F, 0x84, 0x3B, 0x41, 0xA0, 0x5E, 0x62, 0x5D, 0x95, 0xAB, 0x81, 0xA5, 
   0xC2, 0xEE, 0x2F, 0x90, 0x75, 0x00, 0x00, 0x52, 0x66, 0x19, 0x92, 0x78, 0xC0, 0xD1, 0x56, 0x9E, 
   0x98, 0x66, 0x14, 0x70, 0x26, 0x36, 0x87, 0x16, 0x88, 0x9F, 0x89, 0xA0, 0xA0, 0x7E, 0x81, 0xC6, 
   0x32, 0x5B, 0xA7, 0x20, 0x09, 0x1D, 0x55, 0x7A, 0x80, 0x60, 0x85, 0x7B, 0x16, 0x5C, 0x81, 0x61, 
   0x50, 0xC0, 0x56, 0x56, 0x91, 0x2E, 0x6D, 0x35, 0x46, 0x4C, 0x53, 0x65, 0x7A, 0xBD, 0x6A, 0xAB, 
   0xD0, 0x57, 0x63, 0x8F, 0x06, 0x00, 0x54, 0x00, 0x00, 0x39, 0x8F, 0xDA, 0x8D, 0xA3, 0xFF, 0xEC, 
   0x47, 0x63, 0xE5, 0x49, 0x14, 0x69, 0x62, 0x59, 0x69, 0x26, 0x78, 0x62, 0x00, 0x06, 0x47, 0x4C, 
   0x20, 0x7F, 0xBB, 0xBE, 0xC1, 0x5B, 0xCA, 0xC2, 0x2B, 0x27, 0x8D, 0x61, 0x1D, 0x78, 0x1C, 0x45, 
   0x44, 0x29, 0x5E, 0x6D, 0x80, 0x8D, 0xD6, 0xA2, 0x86, 0xB4, 0x4A, 0x50, 0x73, 0x00, 0x2B, 0x86, 
   0x19, 0x2F, 0x8E, 0x5F, 0x68, 0x58, 0x82, 0x4D, 0x58, 0x3D, 0x3D, 0x61, 0x26, 0x8D, 0xB4, 0x59, 
   0x5A, 0xCC, 0x7B, 0x3C, 0x8B, 0x3C, 0x4D, 0x6C, 0x2F, 0x64, 0x6A, 0x45, 0x5E, 0x90, 0x3F, 0x58, 
   0x5D, 0x51, 0x41, 0x7F, 0x46, 0x6E, 0x90, 0x56, 0x6D, 0x85, 0x44, 0x33, 0xA1, 0x37, 0x43, 0x72, 
   0x3B, 0x55, 0x39, 0x20, 0x66, 0x74, 0x5A, 0x60, 0xC6, 0x6B, 0x48, 0xA4, 0x1B, 0x26, 0x48, 0x11, 
   0x4A, 0x6A, 0x5E, 0x6F, 0x99, 0x8D, 0x66, 0x94, 0x5E, 0x72, 0x9A, 0x11, 0x81, 0x82, 0x38, 0x40, 
   0x80, 0x44, 0x16, 0x57, 0x50, 0x55, 0x74, 0x4A, 0x72, 0xA2, 0x5B, 0x67, 0x80, 0x59, 0x4A, 0x79, 
   0x02, 0x3E, 0x73, 0x20, 0x44, 0x5D, 0x60, 0x72, 0x76, 0x5C, 0x50, 0xAB, 0x45, 0x29, 0x90, 0x07, 
   0x4D, 0x4D, 0x42, 0x8D, 0x7D, 0xB4, 0x71, 0xFB, 0x51, 0x63, 0xBE, 0x0D, 0x4E, 0x2F, 0x00, 0x1F, 
   0x2B, 0x30, 0x3D, 0x59, 0x89, 0x78, 0xB6, 0x73, 0x73, 0xA0, 0x27, 0x50, 0x60, 0x20, 0x5A, 0x5A, 
   0x21, 0x4E, 0x98, 0x6C, 0x4E, 0x7C, 0x72, 0x54, 0x65, 0x2C, 0x64, 0x92, 0x1F, 0x31, 0x69, 0x25, 
   0x48, 0x4D, 0x4F, 0x55, 0x76, 0x61, 0x62, 0x8A, 0x34, 0x63, 0x9C, 0x4B, 0x6E, 0x80, 0x51, 0x66, 
   0x95, 0x55, 0x3D, 0x71, 0x47, 0x2B, 0x5E, 0x12, 0x81, 0x86, 0x12, 0x76, 0x80, 0x42, 0x1B, 0x69, 
   0x77, 0x43, 0x6A, 0x66, 0x78, 0xAA, 0x2B, 0x6D, 0xA9, 0x0D, 0x60, 0x3B, 0x2B, 0x04, 0x2B, 0x5B, 
   0x38, 0xB6, 0x7E, 0xBC, 0xCE, 0x33, 0x64, 0x6B, 0x2C, 0x00, 0x42, 0x15, 0x14, 0x92, 0x3E, 0x91, 
   0x98, 0x95, 0xBB, 0x7C, 0x4A, 0x6F, 0x96, 0x26, 0x15, 0x4B, 0x31, 0x08, 0x3A, 0x39, 0x4A, 0x93, 
   0x41, 0x81, 0xA2, 0x60, 0x89, 0x82, 0x6C, 0x4A, 0x99, 0x43, 0x33, 0xAE, 0x58, 0x72, 0x56, 0x51, 
   0x82, 0x66, 0x23, 0x53, 0x8E, 0x46, 0x30, 0x5E, 0x53, 0x26, 0x50, 0x43, 0x62, 0xCB, 0x5B, 0x9E, 
   0x89, 0x6D, 0x50, 0x6D, 0x3F, 0x56, 0xA1, 0x3F, 0x7D, 0xA6, 0x45, 0x55, 0x67, 0x3B, 0x4E, 0x67, 
   0x6A, 0x38, 0x80, 0x7C, 0x6D, 0xAA, 0x26, 0x5E, 0xBD, 0x3D, 0x5C, 0x84, 0x50, 0x86, 0x62, 0x40, 
   0x7C, 0xB8, 0x7A, 0x81, 0xA8, 0x8A, 0x73, 0x73, 0x37, 0x53, 0x9E, 0x00, 0x6D, 0x8B, 0x36, 0x22, 
   0x40, 0x56, 0x2A, 0x49, 0x44, 0x5D, 0xE1, 0xAD, 0xC3, 0xE3, 0xC1, 0xFF, 0x7B, 0x26, 0x6C, 0x8E, 
   0x00, 0x00, 0x9C, 0x0A, 0x08, 0x46, 0x70, 0x6E, 0x48, 0x90, 0xB8, 0xC3, 0x42, 0xA3, 0xF8, 0x48, 
   0x36, 0x52, 0x59, 0x58, 0x4D, 0x4A, 0x65, 0xE2, 0x83, 0x8F, 0x98, 0x76, 0xC6, 0x7A, 0x51, 0x6B, 
   0x8F, 0x31, 0x06, 0x7D, 0x00, 0x00, 0x79, 0x0E, 0x62, 0x49, 0xBE, 0xBF, 0xBF, 0xC0, 0xC1, 0xFF, 
   0x6C, 0xA0, 0x9B, 0x0B, 0x29, 0x4D, 0x00, 0x10, 0x46, 0x71, 0x6D, 0x99, 0xEE, 0xAF, 0xD1, 0x87, 
   0x8D, 0xA5, 0x21, 0x68, 0xD0, 0x34, 0x53, 0x8D, 0x5B, 0x41, 0x4C, 0x2E, 0x3C, 0x68, 0x40, 0x67, 
   0x9E, 0x49, 0x81, 0xC2, 0x79, 0x88, 0xC6, 0x95, 0xBF, 0x7A, 0x3E, 0x2E, 0x45, 0x1F, 0x0F, 0x7F, 
   0x68, 0x66, 0x9F, 0x30, 0x80, 0xA2, 0x00, 0x6C, 0xA9, 0x83, 0x73, 0xA9, 0xE7, 0x85, 0x97, 0x89, 
   0x9A, 0x58, 0x1C, 0x53, 0xBF, 0x01, 0x34, 0xEB, 0x34, 0x51, 0x2D, 0x60, 0x63, 0x32, 0x7A, 0x7C, 
   0xD5, 0x6A, 0x78, 0xD9, 0x64, 0x8E, 0xB6, 0x56, 0x59, 0x9B, 0x58, 0x62, 0x64, 0x34, 0x3F, 0x5C, 
   0x13, 0x47, 0x86, 0x5A, 0x8E, 0xC1, 0x95, 0xB1, 0xC1, 0x46, 0x60, 0x6A, 0x2F, 0x1B, 0x3D, 0xA0, 
   0x77, 0xD3, 0x5A, 0xB6, 0xEB, 0x00, 0x56, 0x67, 0x61, 0x4A, 0x53, 0xB8, 0xA4, 0xA8, 0x6E, 0x6A, 
   0xA2, 0x2C, 0x56, 0x96, 0x3B, 0x50, 0x73, 0x35, 0x62, 0x79, 0x3D, 0x81, 0xAD, 0x99, 0x8D, 0xA3, 
   0x6B, 0x6A, 0x7C, 0x00, 0x10, 0x98, 0x35, 0x68, 0x99, 0xA5, 0xF3, 0x9A, 0x9A, 0x92, 0x9A, 0x51, 
   0x17, 0x99, 0x0F, 0x60, 0x7C, 0x35, 0x83, 0x7C, 0x5E, 0x9F, 0x9F, 0x70, 0x91, 0xD7, 0x49, 0x06, 
   0x74, 0x49, 0x24, 0x46, 0x4A, 0x9A, 0x93, 0x4C, 0x93, 0xBE, 0x8B, 0xA4, 0xBA, 0x8F, 0x90, 0xB1, 
   0x00, 0x25, 0x43, 0x10, 0x18, 0x70, 0xA0, 0x96, 0xDC, 0xA1, 0x97, 0xA9, 0x0C, 0x41, 0x1B, 0x00, 
   0x1C, 0x7F, 0xAB, 0x81, 0xFF, 0xFF, 0xFF, 0xD6, 0x3F, 0x9C, 0x70, 0x00, 0x00, 0x21, 0x00, 0x00, 
   0x1E, 0x8B, 0x96, 0xC4, 0xA3, 0xDC, 0xFF, 0x83, 0xAB, 0xAD, 0x91, 0xB3, 0x7C, 0x85, 0xB1, 0xC2, 
   0x00, 0x00, 0x5E, 0x00, 0x00, 0x52, 0x55, 0xA0, 0xAA, 0x86, 0xB5, 0xD3, 0x6C, 0x78, 0xA5, 0x54, 
   0x70, 0x76, 0x3B, 0x74, 0x80, 0x50, 0x45, 0xA2, 0x49, 0x88, 0x97, 0x43, 0x80, 0x97, 0x43, 0x35, 
   0x87, 0x44, 0x2A, 0x72, 0x6C, 0x71, 0xB8, 0x4A, 0xAC, 0xDF, 0x2E, 0x83, 0x9E, 0x5B, 0x47, 0x35, 
   0x60, 0x50, 0x85, 0x3E, 0x66, 0xE7, 0x86, 0x84, 0x9F, 0xB7, 0x94, 0xB5, 0x00, 0x4F, 0x64, 0x00, 
   0x49, 0x68, 0x65, 0x65, 0x8A, 0x68, 0x56, 0x85, 0x2C, 0x4D, 0x5E, 0x71, 0xA9, 0x77, 0x81, 0xA1, 
   0xBD, 0x30, 0x0B, 0x90, 0x00, 0x0C, 0x6E, 0x6C, 0xA4, 0x85, 0x90, 0xB2, 0x8C, 0x51, 0x67, 0x92, 
   0x32, 0x48, 0xA8, 0x6F, 0x7F, 0xAB, 0x56, 0x8D, 0x58, 0x05, 0x17, 0x40, 0x33, 0x00, 0x64, 0x79, 
   0x52, 0xBC, 0x42, 0x90, 0xA3, 0x38, 0xA3, 0x78, 0x93, 0x7F, 0xD8, 0x64, 0x54, 0xBF, 0x00, 0x34, 
   0x34, 0x40, 0x23, 0x61, 0x79, 0x74, 0xBE, 0x5B, 0xAD, 0xA3, 0x32, 0x50, 0xB1, 0x36, 0x37, 0xAC, 
   0x63, 0x7F, 0x52, 0x51, 0x57, 0x17, 0x0C, 0x29, 0x5E, 0x00, 0x41, 0xBE, 0xA5, 0x60, 0xBB, 0xA0, 
   0xAC, 0x9E, 0x27, 0x6C, 0x7E, 0x2F, 0x37, 0x70, 0x44, 0x57, 0x90, 0x2D, 0x4B, 0x62, 0x3E, 0x40, 
   0x84, 0x4B, 0x6E, 0x96, 0x57, 0x63, 0x79, 0x5C, 0x57, 0x7E, 0x3D, 0x66, 0x72, 0x20, 0x49, 0x67, 
   0x26, 0x37, 0x7F, 0x88, 0x60, 0x91, 0x5A, 0x87, 0x9C, 0x00, 0x36, 0x5D, 0x15, 0x08, 0x57, 0x7D, 
   0x49, 0x81, 0x46, 0x85, 0xB5, 0x2A, 0x5A, 0x7C, 0x63, 0x71, 0x76, 0x73, 0x7B, 0x8C, 0x0B, 0x2F, 
   0x6F, 0x26, 0x4B, 0x8C, 0x5A, 0x6D, 0x97, 0x54, 0x56, 0x69, 0x53, 0x66, 0x7F, 0x2B, 0x5A, 0x95, 
   0x20, 0x43, 0x72, 0x54, 0x60, 0x3A, 0x66, 0x3F, 0x7B, 0x27, 0x62, 0xB7, 0x12, 0x68, 0x80, 0x81, 
   0x52, 0x7C, 0x92, 0x59, 0xB5, 0x40, 0x7B, 0xB8, 0x31, 0x68, 0x59, 0x1F, 0x3E, 0x4A, 0x36, 0x3C, 
   0x88, 0x64, 0x47, 0x93, 0x2C, 0x37, 0x5A, 0x32, 0x56, 0x71, 0x60, 0x73, 0x9F, 0x39, 0x5C, 0x82, 
   0x4F, 0x55, 0x81, 0x48, 0x58, 0x85, 0x2B, 0x3A, 0x61, 0x46, 0x33, 0x39, 0x25, 0x24, 0x7A, 0x44, 
   0x5A, 0x99, 0x78, 0x90, 0x84, 0x5C, 0x5D, 0x79, 0x1C, 0x62, 0x96, 0x2E, 0x3F, 0x73, 0x78, 0x44, 
   0x67, 0x72, 0x71, 0xA4, 0x20, 0x64, 0x8B, 0x29, 0x29, 0x2E, 0x39, 0x1D, 0x61, 0x14, 0x31, 0x7F, 
   0x72, 0x7E, 0x8D, 0x8F, 0x80, 0xA5, 0x4F, 0x85, 0x88, 0x2F, 0x70, 0x6F, 0x12, 0x18, 0x62, 0x19, 
   0x07, 0x41, 0x4A, 0x71, 0x8D, 0xB2, 0xC3, 0xCD, 0x4A, 0x61, 0x97, 0x00, 0x03, 0x1E, 0x00, 0x04, 
   0x30, 0x4A, 0x80, 0xCD, 0xA2, 0xDE, 0xC3, 0x68, 0x92, 0x71, 0x0F, 0x00, 0x62, 0x02, 0x0E, 0x44, 
   0x43, 0x60, 0x46, 0x52, 0x5D, 0x7E, 0x5A, 0x71, 0xC6, 0x77, 0x5C, 0xB0, 0x58, 0x7E, 0x96, 0x0C, 
   0x71, 0x38, 0x01, 0x15, 0x22, 0x64, 0x54, 0xA8, 0x93, 0x8E, 0xC8, 0x32, 0x3A, 0x52, 0x14, 0x30, 
   0x8C, 0x42, 0x81, 0xB0, 0x43, 0x77, 0x73, 0x29, 0x5B, 0x84, 0x59, 0x72, 0x85, 0xA3, 0x6D, 0x97, 
   0x3C, 0x61, 0x86, 0x00, 0x23, 0x87, 0x92, 0x75, 0xAA, 0x71, 0x8A, 0x72, 0x00, 0x6F, 0x79, 0x46, 
   0x75, 0xBE, 0xCF, 0x7F, 0xAC, 0x60, 0x5B, 0x83, 0x00, 0x38, 0x81, 0x32, 0x60, 0x6A, 0xAD, 0xBA, 
   0x6C, 0x8C, 0x3B, 0xDF, 0x13, 0x00, 0x95, 0x30, 0xA2, 0x4B, 0x9C, 0xFF, 0xB1, 0x62, 0x7A, 0x8A, 
   0x2D, 0x1A, 0x95, 0x3B, 0x39, 0x9E, 0x2F, 0x50, 0x5E, 0x21, 0x69, 0x69, 0x85, 0x61, 0x82, 0x99, 
   0x91, 0x9C, 0x59, 0x77, 0xB5, 0x25, 0x66, 0xA4, 0x0A, 0x83, 0x8D, 0x90, 0x8D, 0x93, 0xC9, 0x73, 
   0x9E, 0x3D, 0x2C, 0x97, 0x00, 0x2C, 0x80, 0x2F, 0x5D, 0x80, 0x92, 0x9F, 0x82, 0x8D, 0xA0, 0xC3, 
   0x30, 0x6B, 0xBD, 0x07, 0x3B, 0x7E, 0x75, 0x4B, 0x77, 0x61, 0x79, 0x8F, 0x57, 0x5E, 0xB9, 0x6E, 
   0x80, 0xC4, 0x62, 0x79, 0x8A, 0x4F, 0x1E, 0x67, 0x37, 0x63, 0x95, 0x5E, 0xB9, 0xB8, 0x5D, 0x6D, 
   0xAC, 0x3F, 0x32, 0xB9, 0x0D, 0x54, 0x39, 0x59, 0x62, 0x4B, 0x7E, 0x86, 0xC5, 0x95, 0x8D, 0xC8, 
   0x44, 0x59, 0x85, 0x06, 0x58, 0x6F, 0x52, 0x4D, 0xC5, 0xAB, 0x60, 0x9C, 0x94, 0x9A, 0x68, 0x46, 
   0x88, 0x95, 0x1C, 0x37, 0x75, 0x49, 0x42, 0x9F, 0x7C, 0x9D, 0xFF, 0x70, 0x75, 0x9B, 0x15, 0x4C, 
   0x16, 0x3F, 0x47, 0x6C, 0x91, 0x76, 0xCB, 0x86, 0xA4, 0xDE, 0x40, 0x49, 0xAE, 0x2D, 0x49, 0x55, 
   0x66, 0x9A, 0x66, 0x56, 0x84, 0xC2, 0x56, 0x82, 0xD8, 0x66, 0x57, 0x74, 0x70, 0x18, 0x34, 0x37, 
   0x48, 0x86, 0x2D, 0xB2, 0xDF, 0xA0, 0xC3, 0xD0, 0x62, 0x43, 0x83, 0x00, 0x00, 0x47, 0x57, 0x92, 
   0x91, 0xC9, 0xD2, 0xCB, 0x5A, 0x58, 0xA2, 0x00, 0x00, 0x46, 0x2A, 0x5E, 0x7B, 0x9D, 0xFE, 0xF3, 
   0x80, 0x52, 0xAD, 0x00, 0x00, 0x0C, 0x00, 0x4A, 0x59, 0xE5, 0xE4, 0xE7, 0xFF, 0xCE, 0xFF, 0x20, 
   0x5C, 0x94, 0x00, 0x08, 0x0D, 0x30, 0x09, 0x48, 0x5B, 0xB3, 0xFF, 0xAD, 0xFE, 0xED, 0x9B, 0x78, 
   0x83, 0x20, 0x02, 0x46, 0x00, 0x0E, 0x3B, 0x62, 0x95, 0xA1, 0xC5, 0xDD, 0xFF, 0x7B, 0xA9, 0xCB, 
   0x38, 0x43, 0x77, 0x00, 0x39, 0x68, 0x43, 0x38, 0x94, 0xB7, 0x67, 0x68, 0x42, 0x54, 0x6C, 0x17, 
   0x6A, 0xB6, 0x9C, 0xB3, 0xEE, 0xE6, 0xBF, 0xFF, 0x52, 0xAE, 0x9A, 0x00, 0x00, 0x00, 0x02, 0x00, 
   0x11, 0x6D, 0xBF, 0xCD, 0x89, 0xFF, 0xFF, 0xB7, 0x4E, 0xD7, 0x4E, 0x12, 0x4B, 0x00, 0x7D, 0x66, 
   0x89, 0xB1, 0xC1, 0x89, 0x3F, 0x78, 0x27, 0x55, 0x85, 0x47, 0xA4, 0xE0, 0x57, 0x7A, 0xAC, 0x25, 
   0x18, 0x4F, 0x7A, 0x2A, 0x92, 0x90, 0xE7, 0xB9, 0x49, 0xBC, 0x96, 0x19, 0x00, 0x46, 0x30, 0x0C, 
   0x7C, 0x44, 0x92, 0xCF, 0x74, 0xA5, 0xCA, 0x90, 0x67, 0x9A, 0x4A, 0x6A, 0x7A, 0x16, 0x41, 0x39, 
   0x5B, 0x46, 0x37, 0x84, 0x91, 0xFF, 0x4A, 0x46, 0x98, 0x4A, 0x35, 0xA3, 0x70, 0x80, 0xA1, 0x26, 
   0x64, 0x45, 0x00, 0x2C, 0x68, 0x7A, 0x45, 0xA9, 0x93, 0xAD, 0xB5, 0x43, 0x7A, 0x65, 0x20, 0x00, 
   0x4F, 0x1C, 0x44, 0x8B, 0x9C, 0xC5, 0xD8, 0xA3, 0xE1, 0xD3, 0x3A, 0x48, 0x85, 0x25, 0x00, 0x5A, 
   0x62, 0x6C, 0x64, 0x39, 0xC8, 0x97, 0x0C, 0x60, 0x7C, 0x63, 0x0E, 0x7D, 0x9C, 0x62, 0xAA, 0x2E, 
   0x6E, 0x76, 0x00, 0x32, 0x4A, 0x7A, 0x57, 0xB9, 0x71, 0xB9, 0x99, 0x33, 0x9C, 0x88, 0x88, 0x49, 
   0xD6, 0x7A, 0x45, 0x74, 0x1B, 0x43, 0x3F, 0x00, 0x3D, 0xB6, 0x4D, 0x6B, 0xCB, 0x7C, 0x76, 0x71, 
   0x75, 0x47, 0x46, 0x05, 0x40, 0x5D, 0x00, 0x4B, 0x77, 0x57, 0x4C, 0xAD, 0x71, 0x43, 0xB9, 0x5B, 
   0x73, 0x6E, 0x5F, 0x8A, 0x71, 0x34, 0x7C, 0x91, 0x2D, 0x23, 0x5D, 0x3D, 0x33, 0x73, 0x27, 0x5B, 
   0x84, 0x56, 0x5C, 0x79, 0x73, 0x57, 0x9A, 0x3E, 0x62, 0x6B, 0x21, 0x56, 0x44, 0x32, 0x5A, 0x79, 
   0x5B, 0x37, 0xBA, 0x60, 0x53, 0xB3, 0x26, 0x4D, 0x3A, 0x2C, 0x59, 0x4A, 0x5A, 0x6B, 0xAD, 0x49, 
   0x43, 0x9D, 0x49, 0x39, 0x7B, 0x33, 0x90, 0x80, 0x51, 0x63, 0x74, 0x5D, 0x1F, 0x63, 0x5C, 0x69, 
   0x81, 0x2D, 0x80, 0xAF, 0x2B, 0x51, 0x81, 0x57, 0x3E, 0x79, 0x18, 0x37, 0x83, 0x20, 0x54, 0x77, 
   0x7D, 0x6B, 0x5C, 0x72, 0x3E, 0x90, 0x16, 0x4A, 0x8D, 0x05, 0x57, 0x62, 0x4C, 0x7A, 0x92, 0x98, 
   0x5D, 0xF3, 0x62, 0x3A, 0xB2, 0x00, 0x4B, 0x1A, 0x00, 0x6D, 0x51, 0x54, 0x56, 0x96, 0x99, 0x65, 
   0xAD, 0x31, 0x31, 0x83, 0x08, 0x31, 0x48, 0x2B, 0x55, 0x53, 0x55, 0x73, 0x98, 0x8F, 0x85, 0xAF, 
   0x5B, 0x66, 0x80, 0x1F, 0x52, 0x61, 0x17, 0x2D, 0x59, 0x13, 0x0B, 0x55, 0x5A, 0x52, 0x5E, 0x7E, 
   0x7D, 0xC3, 0x3F, 0x63, 0xAE, 0x39, 0x79, 0x6E, 0x44, 0x3F, 0x7E, 0x49, 0x33, 0x77, 0x38, 0x61, 
   0x82, 0x3D, 0x7D, 0x93, 0x4E, 0x86, 0x86, 0x47, 0x1D, 0x72, 0x1F, 0x00, 0x28, 0x41, 0x7B, 0x73, 
   0x31, 0x7F, 0xAE, 0x4F, 0x7A, 0x88, 0x76, 0x66, 0x6B, 0x47, 0x31, 0xAE, 0x23, 0x51, 0x85, 0x1E, 
   0x45, 0x2E, 0x31, 0x00, 0x51, 0x73, 0x85, 0xBF, 0x8F, 0xF2, 0x97, 0x32, 0x56, 0x36, 0x09, 0x00, 
   0x69, 0x26, 0x1B, 0x72, 0x6D, 0x97, 0xA2, 0x8B, 0xC2, 0xD4, 0x50, 0x8B, 0x80, 0x00, 0x09, 0x27, 
   0x13, 0x0D, 0x2C, 0x3D, 0x2B, 0x7F, 0x74, 0x74, 0x95, 0x6F, 0xB6, 0xAE, 0x47, 0x5B, 0x97, 0x13, 
   0x1B, 0x5D, 0x58, 0x49, 0x57, 0x60, 0x8F, 0x9D, 0x4A, 0x79, 0xA5, 0x59, 0x56, 0x6D, 0x2A, 0x3F, 
   0x5D, 0x25, 0x4B, 0xA3, 0x3E, 0x5E, 0x8E, 0x58, 0x5A, 0x63, 0x87, 0x5C, 0xC6, 0x53, 0x85, 0xB0, 
   0x2B, 0x5D, 0x98, 0x58, 0x58, 0x80, 0x25, 0x43, 0x54, 0x49, 0x83, 0xAB, 0x6D, 0x8A, 0xD4, 0x89, 
   0x6C, 0x6D, 0x2C, 0x4F, 0x7C, 0x00, 0x44, 0xBA, 0x51, 0x68, 0x49, 0x8D, 0x97, 0x5C, 0x5A, 0x8B, 
   0xFF, 0x6F, 0x50, 0xB8, 0x66, 0x74, 0x65, 0x02, 0x29, 0x63, 0x00, 0x00, 0x60, 0x8C, 0x97, 0xCA, 
   0xEF, 0xFF, 0xBB, 0x63, 0x79, 0xB4, 0x00, 0x23, 0xBF, 0x01, 0x00, 0x22, 0x6B, 0x4C, 0x12, 0x9C, 
   0x96, 0xE4, 0x53, 0x9F, 0xEE, 0x1F, 0x88, 0x49, 0x49, 0x6F, 0x8D, 0x68, 0x35, 0xB7, 0x81, 0x53, 
   0xA1, 0x71, 0x93, 0x95, 0x85, 0x93, 0xB6, 0x63, 0x5E, 0x9D, 0x15, 0x4A, 0x67, 0x00, 0x5B, 0x35, 
   0x28, 0x40, 0x94, 0x88, 0x8D, 0xED, 0xAC, 0xBB, 0xBB, 0x60, 0x58, 0x8B, 0x00, 0x4A, 0x88, 0x32, 
   0x4A, 0x70, 0xA1, 0x4D, 0x60, 0x7C, 0x95, 0x97, 0x5E, 0xA2, 0xD3, 0x66, 0x8F, 0xD3, 0x57, 0x7E, 
   0xC8, 0x32, 0x3A, 0x3A, 0x0F, 0x00, 0x2C, 0x0D, 0x32, 0x90, 0x9F, 0xAA, 0xB7, 0x97, 0xD0, 0xAF, 
   0x1C, 0x8B, 0xAA, 0x67, 0x38, 0xAF, 0xA4, 0x5E, 0x80, 0x68, 0x6E, 0x8F, 0x10, 0x63, 0xA0, 0x15, 
   0x49, 0x84, 0x73, 0x84, 0x75, 0x9D, 0xAC, 0xB1, 0x79, 0x7D, 0xF7, 0x20, 0x5E, 0xE2, 0x24, 0x56, 
   0x3D, 0x3C, 0x4A, 0x19, 0x5B, 0x5D, 0xA0, 0x7B, 0x60, 0xD3, 0x66, 0x90, 0xCF, 0x66, 0x7B, 0xA6, 
   0x87, 0x91, 0x9C, 0x57, 0x8E, 0x82, 0x21, 0x2A, 0x70, 0x69, 0x51, 0xB3, 0x3A, 0x84, 0x9A, 0x00, 
   0x58, 0x28, 0x66, 0x5A, 0x4E, 0xC4, 0xB1, 0xFF, 0x5D, 0x83, 0xF8, 0x00, 0x32, 0x55, 0x56, 0x49, 
   0x4D, 0x85, 0x9A, 0x9D, 0x68, 0x8F, 0xAF, 0x61, 0x54, 0x8D, 0x58, 0x6D, 0x8C, 0x23, 0x23, 0x96, 
   0x18, 0x5D, 0x9B, 0x6F, 0x9D, 0x57, 0x72, 0x3F, 0x65, 0x42, 0x4D, 0xE5, 0x8D, 0xDC, 0xD4, 0x9E, 
   0xA8, 0x6C, 0x2A, 0x22, 0x54, 0x12, 0x27, 0x94, 0x6E, 0x6E, 0xA2, 0x6F, 0x88, 0xA9, 0x5C, 0xDC, 
   0xDC, 0x2D, 0x6D, 0x95, 0x38, 0x00, 0x3D, 0x66, 0x47, 0x88, 0x3A, 0x88, 0xB2, 0x74, 0x8B, 0xBF, 
   0x91, 0xD4, 0xE5, 0x66, 0x58, 0x8A, 0x03, 0x00, 0x00, 0x00, 0x05, 0x51, 0xA4, 0x7D, 0xF7, 0xFF, 
   0xE5, 0xCA, 0x40, 0xC5, 0xA3, 0x00, 0x4B, 0xBE, 0x82, 0x11, 0x9E, 0xDD, 0xB0, 0x8A, 0x30, 0xC6, 
   0xA9, 0x00, 0x51, 0x58, 0x7B, 0x36, 0x74, 0x54, 0x6C, 0xC0, 0x16, 0x23, 0xAA, 0x41, 0x00, 0x50, 
   0x7E, 0xE5, 0x85, 0xD4, 0xFF, 0xDD, 0x75, 0x43, 0xCB, 0x00, 0x1A, 0x47, 0x11, 0x5B, 0x84, 0x6D, 
   0x2F, 0xBC, 0x63, 0x97, 0x8D, 0x62, 0xA7, 0x6F, 0x4F, 0x39, 0x8A, 0x20, 0x37, 0x69, 0x2C, 0x65, 
   0x94, 0x5B, 0x88, 0xCF, 0x6D, 0x76, 0xC8, 0x5D, 0x64, 0x76, 0x5C, 0x3B, 0x59, 0x22, 0x6F, 0x98, 
   0x06, 0x5F, 0xCD, 0xB1, 0x88, 0x84, 0x24, 0x48, 0x84, 0x08, 0x3D, 0x84, 0x65, 0x4A, 0x7E, 0x84, 
   0x6F, 0x8A, 0x35, 0x56, 0x75, 0x1F, 0x95, 0x93, 0x8B, 0x7E, 0xAF, 0x42, 0x00, 0x81, 0x00, 0x22, 
   0x38, 0x7A, 0xC1, 0x79, 0xAA, 0xF0, 0xDE, 0x6A, 0x80, 0xDE, 0x38, 0x1E, 0x8F, 0x34, 0x25, 0x57, 
   0x2C, 0x5D, 0x38, 0x11, 0x3C, 0x41, 0x52, 0x38, 0xA6, 0x98, 0xA6, 0xFF, 0x5E, 0x9A, 0x8A, 0x12, 
   0x2B, 0x2C, 0x3E, 0x3B, 0x7B, 0x39, 0x48, 0x99, 0x20, 0x67, 0x63, 0x83, 0x86, 0x9E, 0xB1, 0xB2, 
   0xC1, 0x52, 0x6E, 0xBA, 0x00, 0x0E, 0x7D, 0x00, 0x13, 0x62, 0x5E, 0x7B, 0x76, 0x92, 0x98, 0x53, 
   0x41, 0x4E, 0x59, 0x00, 0x36, 0xB1, 0x5D, 0x63, 0xA7, 0x80, 0x52, 0x84, 0x1F, 0x59, 0x6C, 0x47, 
   0x4F, 0x87, 0x69, 0x7D, 0x9D, 0x46, 0x7C, 0x75, 0x2E, 0x46, 0x79, 0x3E, 0x39, 0x7F, 0x39, 0x61, 
   0x7F, 0x60, 0x50, 0x9A, 0x3D, 0x56, 0x77, 0x26, 0x5B, 0x44, 0x3E, 0x56, 0x73, 0x78, 0x56, 0xAE, 
   0x6C, 0x87, 0xA8, 0x1B, 0x1F, 0x6E, 0x21, 0x08, 0x5C, 0x7D, 0x65, 0x73, 0x60, 0x94, 0x96, 0x15, 
   0x44, 0x90, 0x2B, 0x37, 0x79, 0x53, 0x42, 0x6D, 0x27, 0x3E, 0x68, 0x3A, 0x51, 0x85, 0x74, 0x81, 
   0xA3, 0x83, 0x7C, 0x76, 0x1F, 0x63, 0x91, 0x00, 0x38, 0x84, 0x17, 0x42, 0x60, 0x6A, 0x48, 0x3E, 
   0x6C, 0x49, 0xA1, 0x39, 0x4F, 0x98, 0x11, 0x56, 0x6C, 0x52, 0x62, 0x67, 0x9C, 0x4C, 0xB2, 0x56, 
   0x73, 0xB6, 0x15, 0x61, 0x5E, 0x25, 0x27, 0x3F, 0x44, 0x33, 0x7F, 0x78, 0x8F, 0xAE, 0x67, 0x62, 
   0x8C, 0x26, 0x4F, 0x74, 0x36, 0x4E, 0x8E, 0x2B, 0x49, 0x87, 0x43, 0x4F, 0x4D, 0x66, 0x7D, 0x85, 
   0x65, 0x6B, 0xA0, 0x24, 0x3B, 0x4F, 0x1E, 0x23, 0x38, 0x2B, 0x46, 0x7E, 0x6B, 0x5F, 0x87, 0x55, 
   0x6C, 0x6D, 0x2D, 0x61, 0xAD, 0x2D, 0x44, 0xA6, 0x66, 0x4A, 0x50, 0x65, 0x61, 0x76, 0x0E, 0x6C, 
   0x92, 0x2B, 0x64, 0x64, 0x5F, 0x25, 0x6F, 0x5B, 0x47, 0x8B, 0x4F, 0x64, 0x7F, 0x42, 0x33, 0x73, 
   0x35, 0x88, 0x57, 0x1E, 0x6B, 0x74, 0x3B, 0x14, 0x97, 0x5E, 0x4C, 0x70, 0x3C, 0x63, 0x7B, 0x3B, 
   0x41, 0xA7, 0x35, 0x47, 0x6C, 0x14, 0x27, 0x11, 0x44, 0x5D, 0x74, 0x8A, 0xB9, 0xD8, 0x61, 0x72, 
   0x89, 0x0F, 0x00, 0x3E, 0x00, 0x00, 0x83, 0x55, 0x96, 0xC8, 0xA1, 0xC6, 0x82, 0x5B, 0x68, 0x5D, 
   0x00, 0x00, 0x66, 0x18, 0x0D, 0x4F, 0x52, 0x5F, 0x67, 0x2D, 0x73, 0x7C, 0x30, 0x4E, 0x7A, 0x82, 
   0x50, 0xC1, 0x61, 0x84, 0xC7, 0x38, 0x57, 0x3D, 0x49, 0x40, 0x48, 0x54, 0x68, 0xB5, 0x53, 0x83, 
   0x95, 0x20, 0x33, 0x42, 0x39, 0x2F, 0x7D, 0x96, 0x70, 0xBE, 0x58, 0x7E, 0x9E, 0x08, 0x52, 0xA9, 
   0x6F, 0x6A, 0x91, 0x75, 0x88, 0x47, 0x00, 0x66, 0x81, 0x39, 0x5A, 0xC1, 0xE4, 0x7B, 0x9A, 0x53, 
   0x4D, 0x92, 0x00, 0x31, 0x69, 0x1C, 0x5C, 0x48, 0xE3, 0xA8, 0x95, 0x9C, 0x8D, 0xF9, 0x33, 0x27, 
   0xA3, 0x4B, 0xBE, 0x72, 0x5E, 0xB9, 0x75, 0x0C, 0x00, 0x6E, 0x00, 0x00, 0x59, 0x5D, 0x83, 0x8B, 
   0xD9, 0xFF, 0xEF, 0x9B, 0xCD, 0xDC, 0x3B, 0x33, 0x66, 0x1F, 0x00, 0x46, 0x07, 0x22, 0x73, 0x37, 
   0x5A, 0x76, 0x5D, 0xBE, 0xA7, 0x60, 0x97, 0xC0, 0x88, 0x2F, 0x67, 0x2E, 0x29, 0xA1, 0x00, 0x56, 
   0xB9, 0xC4, 0xC6, 0x9C, 0xF0, 0xD7, 0xB1, 0x54, 0x86, 0x97, 0x00, 0x02, 0x6C, 0x00, 0x00, 0x3E, 
   0x6C, 0x66, 0x70, 0xDF, 0xBB, 0xE8, 0x85, 0x94, 0xFB, 0x2C, 0x6F, 0xB3, 0x40, 0x33, 0x42, 0x1A, 
   0x0C, 0x2F, 0x35, 0x4F, 0x94, 0xA5, 0xDD, 0xC7, 0xB7, 0xC7, 0xD5, 0x46, 0x6D, 0xD8, 0x2A, 0x39, 
   0x73, 0x39, 0x2F, 0x52, 0x44, 0x35, 0x7A, 0x50, 0x54, 0x98, 0x1A, 0x6B, 0x7F, 0x1A, 0x92, 0x9E, 
   0xCB, 0xC6, 0xEA, 0xE3, 0x74, 0xAA, 0x66, 0x59, 0x6E, 0x00, 0x50, 0x72, 0x00, 0x11, 0x89, 0x2B, 
   0x5F, 0xA7, 0xB3, 0xC3, 0xA3, 0x9E, 0xAD, 0xA9, 0x41, 0x61, 0x8E, 0x43, 0x41, 0xBB, 0x41, 0x73, 
   0xD4, 0x40, 0x50, 0x5F, 0x14, 0x3A, 0x21, 0x3B, 0x49, 0x86, 0xA6, 0x92, 0xDC, 0x9C, 0xDD, 0xFF, 
   0x5C, 0x6F, 0xB6, 0x4D, 0x3D, 0x3E, 0x76, 0x46, 0x58, 0x1D, 0x57, 0xB8, 0x00, 0x7A, 0xA7, 0x6E, 
   0x85, 0x72, 0x7C, 0x46, 0x62, 0x3A, 0x1A, 0x82, 0x6F, 0x9A, 0xEC, 0x9C, 0xCE, 0xE7, 0x34, 0x3F, 
   0x6C, 0x00, 0x06, 0x2C, 0x7A, 0xBE, 0x99, 0xCA, 0xFB, 0xFF, 0x65, 0x30, 0xBA, 0x00, 0x00, 0x12, 
   0x18, 0x6E, 0x40, 0x93, 0xDF, 0xF9, 0xC7, 0x95, 0xE3, 0x00, 0x32, 0x58, 0x00, 0x15, 0x19, 0x97, 
   0x7A, 0xAC, 0xCF, 0xE3, 0xFF, 0x6D, 0x87, 0xAE, 0x53, 0x2A, 0x2F, 0x35, 0x46, 0x79, 0x13, 0x6B, 
   0xB5, 0x8B, 0xD8, 0xD3, 0xB3, 0xBD, 0xD0, 0x22, 0x00, 0x5A, 0x04, 0x00, 0x30, 0x44, 0xA2, 0xC0, 
   0x9D, 0xA6, 0xDD, 0xA8, 0xA6, 0x76, 0x0B, 0x49, 0x59, 0x00, 0x09, 0x66, 0x86, 0x78, 0xA3, 0xD9, 
   0xC0, 0xDF, 0x3F, 0x7D, 0xAB, 0x00, 0x23, 0x34, 0x35, 0x59, 0x96, 0xD2, 0xDF, 0xFF, 0xF2, 0xFF, 
   0xDC, 0x39, 0x55, 0x50, 0x00, 0x00, 0x00, 0x00, 0x17, 0x47, 0x5E, 0x5B, 0xCF, 0xA3, 0x73, 0xC4, 
   0x5E, 0x7A, 0x83, 0x7B, 0xE3, 0xD3, 0xC2, 0xF0, 0xB0, 0x34, 0x00, 0x64, 0x00, 0x00, 0x97, 0x61, 
   0xD4, 0xCF, 0x61, 0xC9, 0xB0, 0x39, 0x00, 0x59, 0x33, 0x27, 0x59, 0x5C, 0xB8, 0xC6, 0x78, 0xAD, 
   0xC7, 0x5B, 0x4F, 0x93, 0x32, 0x35, 0x69, 0x3E, 0x50, 0x70, 0x62, 0x4C, 0x8F, 0x7A, 0x5F, 0xD5, 
   0x6E, 0x8E, 0xC3, 0x1E, 0x51, 0x33, 0x46, 0x53, 0x6A, 0x40, 0x59, 0x5F, 0x10, 0x10, 0x5B, 0x7A, 
   0x53, 0x9D, 0xAE, 0xD8, 0xC6, 0x46, 0x72, 0x76, 0x00, 0x00, 0x43, 0x31, 0x26, 0x9F, 0x97, 0xC6, 
   0xB7, 0x88, 0xF0, 0x7F, 0x5F, 0x70, 0x7F, 0x3F, 0x2D, 0xA0, 0x69, 0x5C, 0x9E, 0x44, 0xA3, 0x6E, 
   0x00, 0x18, 0x45, 0x2F, 0x00, 0x6A, 0xAE, 0x93, 0xD4, 0x5F, 0xC4, 0xC5, 0x1A, 0x6F, 0x85, 0x68, 
   0x5A, 0x94, 0x50, 0x4C, 0x75, 0x06, 0x46, 0x26, 0x57, 0x31, 0xA5, 0x87, 0x83, 0xB3, 0x65, 0xAB, 
   0x6B, 0x41, 0x6A, 0xCA, 0x4A, 0x32, 0xD7, 0x4D, 0x4C, 0x37, 0x40, 0x3A, 0x0D, 0x24, 0x36, 0x86, 
   0x1A, 0x87, 0xA7, 0x8D, 0x76, 0xA9, 0x82, 0x43, 0xBE, 0x25, 0x59, 0x60, 0x33, 0x5E, 0x4C, 0x27, 
   0x58, 0x84, 0x2E, 0x41, 0x6E, 0x68, 0x52, 0x85, 0x52, 0x8B, 0x80, 0x3B, 0x63, 0x85, 0x72, 0x2E, 
   0x8F, 0x37, 0x6C, 0x5B, 0x00, 0x55, 0x5B, 0x31, 0x33, 0x84, 0x72, 0x61, 0xB3, 0x61, 0x78, 0xA2, 
   0x27, 0x4A, 0x4B, 0x26, 0x4E, 0x62, 0x54, 0x4E, 0xA2, 0x55, 0x55, 0xA7, 0x49, 0x50, 0x56, 0x3C, 
   0x9A, 0x5B, 0x1F, 0x5F, 0x8E, 0x36, 0x00, 0x73, 0x53, 0x31, 0x79, 0x44, 0x84, 0x90, 0x5C, 0x75, 
   0x85, 0x72, 0x59, 0x80, 0x47, 0x68, 0x8B, 0x00, 0x50, 0x84, 0x2F, 0x5A, 0x56, 0x7B, 0x2C, 0x73, 
   0x38, 0x55, 0x80, 0x0C, 0x6D, 0x77, 0x5E, 0x62, 0x95, 0xA8, 0x4B, 0xC8, 0x45, 0x56, 0x8C, 0x02, 
   0x5B, 0x33, 0x00, 0x55, 0x44, 0x4F, 0x4E, 0xAC, 0xAC, 0x4E, 0x97, 0x3F, 0x3F, 0x75, 0x0B, 0x79, 
   0x75, 0x5F, 0x6E, 0x97, 0x4F, 0x56, 0x96, 0x4E, 0x4E, 0x8D, 0x41, 0x3C, 0x7E, 0x1E, 0x4C, 0x43, 
   0x35, 0x52, 0x60, 0x4D, 0x36, 0x89, 0x38, 0x54, 0x8B, 0x71, 0x77, 0x7C, 0x3D, 0x60, 0x8D, 0x2C, 
   0x3D, 0x88, 0x43, 0x48, 0x66, 0x5A, 0x43, 0x7D, 0x4E, 0x5B, 0xA4, 0x25, 0x7D, 0x87, 0x41, 0x64, 
   0x58, 0x36, 0x02, 0x6E, 0x21, 0x30, 0x64, 0x61, 0x71, 0x8D, 0x78, 0x95, 0xB5, 0x43, 0x6C, 0x7A, 
   0x29, 0x2A, 0x39, 0x1C, 0x1D, 0x7D, 0x1D, 0x68, 0x8A, 0x3C, 0x53, 0x64, 0x82, 0x49, 0x8C, 0x5F, 
   0x77, 0xAD, 0x18, 0x76, 0x61, 0x06, 0x1A, 0x21, 0x14, 0x05, 0x68, 0x73, 0x8B, 0xC7, 0x9C, 0xE7, 
   0xB8, 0x50, 0x5B, 0x8E, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x48, 0x55, 0x7A, 0x8E, 0x96, 0xC1, 0xD9, 
   0x72, 0x86, 0x8C, 0x1E, 0x26, 0x60, 0x00, 0x0C, 0x1F, 0x13, 0x0E, 0x39, 0x6D, 0x63, 0x95, 0x83, 
   0xAC, 0xD3, 0x67, 0x6F, 0xB2, 0x33, 0x47, 0x7C, 0x42, 0x5D, 0x53, 0x4D, 0x73, 0x5F, 0x2C, 0x45, 
   0xA6, 0x5B, 0x50, 0x8C, 0x62, 0x46, 0x72, 0x4B, 0x5F, 0xAC, 0x22, 0x78, 0x9B, 0x50, 0x58, 0x6E, 
   0x47, 0x76, 0x6F, 0x3E, 0x7E, 0x92, 0x89, 0x99, 0xB4, 0x8D, 0x58, 0x81, 0x19, 0x1D, 0x75, 0x00, 
   0x45, 0xAD, 0x4F, 0x71, 0x5E, 0x91, 0x90, 0x4A, 0x50, 0x6A, 0xE6, 0x7E, 0x3E, 0xD7, 0x87, 0xBB, 
   0x74, 0x28, 0x9C, 0x77, 0x00, 0x16, 0x76, 0x5E, 0x5C, 0x87, 0x70, 0x62, 0x88, 0x21, 0x30, 0x9B, 
   0x00, 0x51, 0xAC, 0xB6, 0xB0, 0x8A, 0xE4, 0xC1, 0x7F, 0x46, 0x74, 0xB7, 0x00, 0x20, 0xA4, 0x00, 
   0x45, 0x30, 0x6C, 0x63, 0x42, 0xC6, 0x65, 0xCF, 0x39, 0x5C, 0xD3, 0x13, 0x43, 0x63, 0x8D, 0x9D, 
   0x9C, 0x9B, 0xB0, 0xC4, 0x8D, 0xAE, 0x95, 0x60, 0x6A, 0x92, 0x00, 0x20, 0x6E, 0x26, 0x13, 0x79, 
   0x4A, 0x5F, 0x64, 0x5E, 0x8B, 0x78, 0x59, 0x76, 0xEC, 0x54, 0x81, 0xC4, 0x59, 0x4D, 0x60, 0x49, 
   0x49, 0x54, 0x1E, 0x90, 0x90, 0x7C, 0x98, 0xD2, 0xB0, 0xAE, 0xC7, 0x64, 0x6C, 0x86, 0x1C, 0x24, 
   0x5D, 0x3C, 0x50, 0x9B, 0x7F, 0x8E, 0xC4, 0x51, 0x51, 0x7A, 0x00, 0x41, 0x7A, 0x37, 0x5B, 0xA3, 
   0xED, 0x8C, 0x99, 0xD6, 0xD0, 0xBB, 0x37, 0x7D, 0xAE, 0x00, 0x00, 0x6D, 0x30, 0x3F, 0x51, 0x76, 
   0x91, 0xC9, 0x50, 0x71, 0xBE, 0x51, 0x6C, 0x74, 0x63, 0x82, 0x6D, 0x73, 0x64, 0x80, 0x71, 0x5E, 
   0xCB, 0x31, 0x57, 0xD0, 0x09, 0x41, 0x51, 0x57, 0x6C, 0x41, 0x89, 0x8B, 0xD9, 0x8B, 0x97, 0xFF, 
   0x68, 0x84, 0xAC, 0x80, 0x2C, 0x85, 0x43, 0x6A, 0x81, 0x03, 0x81, 0x52, 0x5E, 0x64, 0x91, 0x86, 
   0x79, 0xD5, 0x31, 0x4A, 0x89, 0x15, 0x2F, 0x39, 0x7E, 0x65, 0x5A, 0xA8, 0xBE, 0xFE, 0x46, 0x8B, 
   0xDD, 0x12, 0x3A, 0x69, 0x6D, 0x78, 0x72, 0x84, 0x83, 0xAF, 0x56, 0x65, 0xA9, 0x3E, 0x6F, 0x64, 
   0x49, 0x3D, 0x6A, 0x7B, 0x61, 0xCC, 0x41, 0xDE, 0xE6, 0x4A, 0x5E, 0x17, 0x00, 0x00, 0x13, 0x13, 
   0x61, 0xEA, 0xE6, 0xDE, 0xFF, 0xD6, 0xB8, 0xAA, 0x18, 0x5F, 0x85, 0x1A, 0x24, 0x52, 0x64, 0x5E, 
   0x82, 0x87, 0xBB, 0xF0, 0x70, 0xC0, 0xEF, 0x62, 0x70, 0x78, 0x32, 0x04, 0x50, 0x20, 0x0E, 0x54, 
   0x5B, 0x51, 0x40, 0x6A, 0x96, 0xBD, 0x94, 0xD3, 0xFF, 0x9D, 0x9F, 0xA5, 0x00, 0x2E, 0x42, 0x00, 
   0x20, 0xAD, 0x99, 0x23, 0x86, 0xED, 0x8B, 0x84, 0x3E, 0xFF, 0xD7, 0x2C, 0xB7, 0xE8, 0xE6, 0x5C, 
   0xCC, 0xBD, 0x86, 0x91, 0x00, 0x36, 0x4B, 0x00, 0x00, 0x05, 0x62, 0x62, 0x4F, 0x8C, 0xEC, 0xFF, 
   0xA1, 0x78, 0xFF, 0x5D, 0x51, 0x56, 0x3F, 0xA5, 0x71, 0xA3, 0x93, 0xF4, 0x7D, 0x72, 0xAF, 0x02, 
   0x5D, 0x62, 0x38, 0x49, 0x89, 0x27, 0x32, 0x9A, 0x57, 0x68, 0x95, 0x8C, 0x9D, 0xAB, 0x79, 0xA2, 
   0xAE, 0x38, 0x65, 0x67, 0x2B, 0x2E, 0x2E, 0x2C, 0x34, 0x8D, 0x46, 0x6F, 0xFF, 0x98, 0x7D, 0xD1, 
   0x8C, 0x6D, 0x68, 0x00, 0x84, 0x6B, 0x3C, 0x54, 0x6A, 0x36, 0x4F, 0x54, 0x2C, 0x4A, 0x94, 0x45, 
   0x79, 0x97, 0x7F, 0x63, 0xAA, 0x68, 0x37, 0x8D, 0x00, 0x25, 0x66, 0x23, 0xAE, 0x73, 0xD1, 0xCC, 
   0xB8, 0x8D, 0x63, 0xC7, 0x1D, 0x21, 0x69, 0x4D, 0x58, 0x2E, 0x35, 0x95, 0x79, 0x0D, 0x4A, 0x8C, 
   0x59, 0x1B, 0x89, 0xA3, 0x7B, 0xBC, 0x25, 0x55, 0x7D, 0x19, 0x4B, 0x39, 0x80, 0x90, 0xBD, 0x6A, 
   0x89, 0xC4, 0x47, 0x4E, 0x51, 0x45, 0x2A, 0x88, 0x4F, 0x56, 0x7D, 0x43, 0x51, 0x7E, 0x11, 0x4C, 
   0xB7, 0x57, 0x75, 0x99, 0x91, 0x9B, 0x85, 0x7D, 0x5F, 0x6B, 0x00, 0x1E, 0x3D, 0x00, 0x2E, 0x6D, 
   0x6F, 0x64, 0xD6, 0x8E, 0x7D, 0xB4, 0x60, 0x72, 0x62, 0x30, 0x54, 0x81, 0x44, 0x6F, 0x8A, 0x31, 
   0x4B, 0x4A, 0x26, 0x28, 0x7E, 0x3F, 0x34, 0x8B, 0x75, 0x63, 0x8C, 0x80, 0x91, 0xA2, 0x39, 0x5C, 
   0x78, 0x09, 0x2D, 0x50, 0x2B, 0x43, 0x68, 0x65, 0x5A, 0xB3, 0x4F, 0x55, 0x9C, 0x32, 0x4F, 0x51, 
   0x38, 0x3F, 0x45, 0x54, 0x67, 0x90, 0x4F, 0x84, 0xA3, 0x32, 0x39, 0x91, 0x38, 0x3E, 0x78, 0x65, 
   0x6B, 0x4F, 0x42, 0x59, 0x66, 0x1F, 0x4D, 0x95, 0x3B, 0x42, 0xB2, 0x4D, 0x55, 0x6D, 0x47, 0x6D, 
   0x61, 0x20, 0x67, 0x9A, 0x3D, 0x3A, 0x6D, 0x82, 0x73, 0x69, 0x43, 0x57, 0xA3, 0x00, 0x50, 0x98, 
   0x15, 0x4B, 0x4E, 0x62, 0x62, 0x7D, 0xA8, 0x62, 0xDF, 0x62, 0x5B, 0xAF, 0x09, 0x55, 0x3E, 0x00, 
   0x49, 0x25, 0x53, 0x4E, 0x76, 0x77, 0x70, 0xA1, 0x50, 0x49, 0xA2, 0x2D, 0x38, 0x63, 0x3D, 0x4B, 
   0x80, 0x27, 0x7F, 0x9C, 0x77, 0x6E, 0xA1, 0x5F, 0x60, 0x7C, 0x29, 0x46, 0x78, 0x10, 0x1C, 0x48, 
   0x00, 0x0D, 0x2C, 0x4E, 0x82, 0x7F, 0xA0, 0x8A, 0xB6, 0x4A, 0x6E, 0xA0, 0x15, 0x55, 0x6B, 0x2B, 
   0x3C, 0x80, 0x59, 0x25, 0x52, 0x64, 0x70, 0x69, 0x14, 0x83, 0x97, 0x3B, 0x6B, 0x80, 0x47, 0x25, 
   0x63, 0x31, 0x30, 0x58, 0x32, 0x54, 0x87, 0x4A, 0x5C, 0x9F, 0x67, 0x8A, 0x88, 0x5F, 0x87, 0x80, 
   0x2F, 0x18, 0x8F, 0x2D, 0x0B, 0x38, 0x17, 0x5C, 0x61, 0x47, 0x64, 0xA1, 0x6B, 0x61, 0xA8, 0x6B, 
   0x78, 0x5D, 0x3C, 0x4F, 0x63, 0x18, 0x54, 0xA1, 0x35, 0x48, 0x5D, 0x21, 0x1C, 0x42, 0x6D, 0x63, 
   0xAA, 0x84, 0xCF, 0xBB, 0x49, 0x55, 0x53, 0x19, 0x00, 0x2B, 0x09, 0x15, 0x8D, 0x6C, 0x8C, 0xC3, 
   0xB1, 0xE9, 0xB6, 0x3C, 0x8A, 0x62, 0x00, 0x00, 0x1B, 0x29, 0x00, 0x4A, 0x4F, 0x71, 0x92, 0x58, 
   0x82, 0x8B, 0x71, 0x85, 0x8E, 0x77, 0x6F, 0xB1, 0x26, 0x6E, 0x9E, 0x0F, 0x3F, 0x26, 0x4F, 0x4A, 
   0x56, 0x90, 0x62, 0xE7, 0x67, 0x85, 0xBB, 0x16, 0x53, 0x54, 0x21, 0x43, 0x5A, 0x4B, 0x73, 0x62, 
   0x31, 0x5A, 0x9E, 0x67, 0x82, 0xE9, 0xAB, 0x81, 0x76, 0x52, 0x51, 0x68, 0x00, 0x22, 0x94, 0x03, 
   0x2F, 0x3B, 0xE6, 0xA4, 0x8E, 0x7C, 0x90, 0xFF, 0x1B, 0x2B, 0x7A, 0x53, 0x98, 0x62, 0x80, 0xAE, 
   0xBC, 0x40, 0x24, 0x72, 0x18, 0x3A, 0x7E, 0x73, 0xA6, 0xA7, 0x94, 0xC1, 0xB2, 0x25, 0x1E, 0xAF, 
   0x00, 0x00, 0x2A, 0x34, 0x50, 0x3E, 0xAA, 0xD9, 0xE7, 0xAA, 0xE1, 0xE4, 0x2F, 0x91, 0x9D, 0x0E, 
   0x12, 0x6B, 0x42, 0x00, 0x47, 0x51, 0x28, 0x44, 0x44, 0x74, 0xD8, 0x7B, 0xB8, 0xDB, 0xA9, 0xA9, 
   0x85, 0x6E, 0x6E, 0x95, 0x00, 0x60, 0x9F, 0x2E, 0x48, 0x6B, 0xCA, 0x7A, 0x99, 0x9B, 0x8A, 0xBC, 
   0x24, 0x49, 0xA4, 0x00, 0x3D, 0x6F, 0x3E, 0x6C, 0x52, 0x8C, 0x54, 0x94, 0x50, 0x8A, 0xC5, 0x6E, 
   0xB9, 0xB5, 0x95, 0x7A, 0xA9, 0x23, 0x4F, 0x8B, 0x35, 0x4E, 0x78, 0x8B, 0x60, 0x5D, 0x86, 0x83, 
   0xAF, 0x6D, 0x88, 0xC2, 0x1B, 0x60, 0x9C, 0x00, 0x7B, 0xB2, 0x7F, 0x53, 0xB5, 0x9E, 0x4D, 0x80, 
   0x59, 0x7C, 0x74, 0x24, 0x79, 0x97, 0x63, 0x7F, 0xB4, 0x6F, 0x84, 0xA9, 0x6E, 0x65, 0xAE, 0x55, 
   0x63, 0x7F, 0x2B, 0x51, 0x83, 0x27, 0x46, 0xB0, 0x7E, 0x75, 0x77, 0x7A, 0x87, 0x78, 0x51, 0x6C, 
   0x98, 0x45, 0x61, 0xC8, 0x67, 0x72, 0xD3, 0x5C, 0x84, 0x98, 0x3B, 0x83, 0x52, 0x5A, 0x3E, 0x75, 
   0xB5, 0x55, 0xC7, 0x52, 0x9A, 0xDE, 0x01, 0x67, 0x91, 0x84, 0x6C, 0x66, 0x94, 0x8C, 0x7B, 0x37, 
   0x3B, 0xA8, 0x25, 0x4B, 0xA0, 0x63, 0x9B, 0x55, 0x37, 0x3C, 0x50, 0x29, 0x1D, 0x7E, 0x97, 0xD0, 
   0xEA, 0xB3, 0xEC, 0xFF, 0x27, 0x00, 0x8A, 0x00, 0x00, 0x02, 0x5C, 0xB6, 0x5E, 0xD1, 0xCA, 0xFC, 
   0xA1, 0x67, 0xFF, 0x08, 0x3C, 0x58, 0x0B, 0x52, 0x12, 0x56, 0x6F, 0xB3, 0x86, 0x9D, 0xF3, 0x3F, 
   0x2D, 0x66, 0x25, 0x4D, 0x51, 0x95, 0xC2, 0xD1, 0xA8, 0x9B, 0xBC, 0x5E, 0x60, 0x93, 0x6B, 0x63, 
   0x8D, 0x36, 0x35, 0x87, 0x41, 0x69, 0xB0, 0x7A, 0xE5, 0xF2, 0x84, 0xA2, 0xA2, 0x42, 0x00, 0x00, 
   0x00, 0x00, 0x16, 0x30, 0x78, 0xDF, 0xF1, 0xF8, 0xF2, 0xCE, 0xFF, 0xF9, 0x00, 0x4E, 0xBB, 0x00, 
   0x00, 0x00, 0x64, 0x28, 0x51, 0xD1, 0xEA, 0xFF, 0xC7, 0xE9, 0xD6, 0x4B, 0x90, 0x90, 0x00, 0x2F, 
   0x86, 0x50, 0x2B, 0x94, 0x9E, 0x63, 0xBD, 0x31, 0x8C, 0x48, 0x00, 0x3E, 0x2C, 0x66, 0x5C, 0xB4, 
   0x80, 0xCE, 0xD5, 0x5A, 0x35, 0xB0, 0x32, 0x00, 0x88, 0x88, 0xFF, 0x99, 0xA2, 0xFF, 0xCA, 0x54, 
   0x00, 0x68, 0x00, 0x00, 0x5D, 0x34, 0xA5, 0xDC, 0x97, 0xAE, 0xE7, 0x75, 0x5E, 0x7D, 0x3F, 0x50, 
   0x57, 0x2C, 0x64, 0x5B, 0x3C, 0x63, 0x74, 0x38, 0x4D, 0xB6, 0x67, 0x6A, 0xBD, 0x5D, 0x7D, 0x96, 
   0x31, 0x5C, 0x84, 0x86, 0x6D, 0xA1, 0x3F, 0x46, 0x84, 0x34, 0x35, 0x84, 0x7D, 0xA1, 0x7E, 0x43, 
   0x77, 0x95, 0x00, 0x00, 0x69, 0x19, 0x10, 0x82, 0xB1, 0xD9, 0xBD, 0x9C, 0xF9, 0xAD, 0x1E, 0x57, 
   0x89, 0x60, 0x14, 0x8B, 0x5E, 0x4B, 0x83, 0x13, 0x7E, 0x49, 0x1F, 0x51, 0x35, 0x60, 0x3B, 0x9A, 
   0xB1, 0xA2, 0xFE, 0x60, 0x9C, 0xB2, 0x00, 0x38, 0x2C, 0x40, 0x26, 0x4D, 0x52, 0x6B, 0x94, 0x3D, 
   0x72, 0xA3, 0x71, 0x79, 0xC6, 0x7A, 0x8E, 0x97, 0x1B, 0x51, 0x55, 0x00, 0x1A, 0x80, 0x35, 0x2C, 
   0xAC, 0x5B, 0x78, 0x83, 0x7F, 0x90, 0x28, 0x57, 0x5C, 0x85, 0x2D, 0x53, 0xCB, 0x54, 0x3A, 0x8C, 
   0x53, 0x2F, 0x7A, 0x25, 0x6A, 0x8F, 0x47, 0x94, 0x77, 0x79, 0x71, 0x8C, 0x2E, 0x41, 0x7F, 0x2C, 
   0x34, 0x67, 0x31, 0x61, 0x61, 0x22, 0x61, 0x84, 0x6D, 0x34, 0xB2, 0x73, 0x5C, 0x7F, 0x1C, 0x79, 
   0x4B, 0x2D, 0x4B, 0x8B, 0x6B, 0x3F, 0xA8, 0x43, 0x77, 0x97, 0x20, 0x3E, 0x62, 0x31, 0x33, 0x6D, 
   0x54, 0x72, 0x90, 0x49, 0x68, 0x9C, 0x38, 0x58, 0x80, 0x43, 0x84, 0x85, 0x43, 0x54, 0x96, 0x38, 
   0x03, 0x7E, 0x65, 0x42, 0x5B, 0x42, 0x93, 0x77, 0x2F, 0x60, 0xA5, 0x3F, 0x31, 0x72, 0x28, 0x41, 
   0x76, 0x0D, 0x42, 0x6B, 0x44, 0x61, 0x56, 0x96, 0x58, 0x8C, 0x73, 0x64, 0xA5, 0x00, 0x69, 0x84, 
   0x22, 0x5D, 0x84, 0x9A, 0x40, 0xAA, 0x50, 0x61, 0x97, 0x1A, 0x60, 0x50, 0x0E, 0x54, 0x54, 0x4F, 
   0x48, 0x88, 0x8E, 0x4D, 0x94, 0x38, 0x37, 0x67, 0x00, 0x60, 0x6D, 0x4E, 0x66, 0x96, 0x66, 0x39, 
   0x96, 0x3E, 0x62, 0x6D, 0x4F, 0x89, 0x82, 0x64, 0x65, 0x8B, 0x29, 0x3B, 0x4B, 0x00, 0x18, 0x61, 
   0x35, 0x4C, 0x7E, 0x4E, 0x66, 0x70, 0x5B, 0x85, 0x94, 0x5B, 0x6E, 0xAB, 0x38, 0x44, 0x81, 0x47, 
   0x42, 0x4D, 0x46, 0x3C, 0x90, 0x13, 0x4D, 0x7E, 0x4C, 0x7A, 0x57, 0x42, 0x25, 0x85, 0x38, 0x31, 
   0x7B, 0x55, 0x77, 0x7C, 0x6C, 0x5C, 0x93, 0x49, 0x7E, 0x7C, 0x37, 0x60, 0x75, 0x4D, 0x1F, 0x91, 
   0x58, 0x68, 0x90, 0x19, 0x5C, 0x61, 0x3B, 0x0D, 0x55, 0x63, 0x53, 0x88, 0x1F, 0x8E, 0x78, 0x2C, 
   0x39, 0x46, 0x82, 0x3F, 0x9E, 0x54, 0x83, 0xB6, 0x25, 0x6B, 0x92, 0x2A, 0x25, 0x45, 0x1A, 0x04, 
   0x45, 0x50, 0x73, 0x86, 0x95, 0xC4, 0xAF, 0x4F, 0x67, 0x93, 0x08, 0x00, 0x4E, 0x0D, 0x27, 0x6A, 
   0x4E, 0x7F, 0x98, 0x60, 0x8C, 0x76, 0x76, 0x63, 0x8C, 0x20, 0x43, 0x91, 0x0E, 0x04, 0x2F, 0x26, 
   0x39, 0x4D, 0x51, 0x76, 0x8A, 0x64, 0x9B, 0xB0, 0x49, 0x6E, 0xA0, 0x33, 0x2F, 0x6D, 0x61, 0x4B, 
   0x78, 0x5B, 0x74, 0x79, 0x28, 0x69, 0xB8, 0x44, 0x47, 0x80, 0x45, 0x2C, 0x39, 0x2B, 0x51, 0xAE, 
   0x71, 0xA2, 0xCC, 0x93, 0x64, 0x77, 0x36, 0x41, 0x9C, 0x00, 0x5D, 0x83, 0x65, 0x80, 0x28, 0x95, 
   0x7B, 0x6F, 0x3C, 0x3D, 0xDF, 0x5E, 0x51, 0xBE, 0x84, 0xA2, 0x83, 0x17, 0x9B, 0x5F, 0x06, 0x01, 
   0x5A, 0x86, 0x46, 0xA7, 0xB0, 0xBA, 0xBA, 0x48, 0x8D, 0xA3, 0x28, 0x62, 0xCD, 0x59, 0x69, 0x47, 
   0x4C, 0x1D, 0x2F, 0x02, 0x08, 0x87, 0x0C, 0x5E, 0xAE, 0xA5, 0xFC, 0xC7, 0xD9, 0xEA, 0xAB, 0x57, 
   0x3D, 0xB4, 0x00, 0x00, 0x78, 0x00, 0x06, 0x33, 0xA9, 0xB2, 0x6F, 0xE0, 0xEB, 0xE9, 0x33, 0x8F, 
   0xB7, 0x07, 0x30, 0x66, 0x03, 0x0D, 0x76, 0x52, 0x70, 0x9A, 0xDA, 0xC9, 0xA8, 0xC2, 0xB1, 0xD6, 
   0x3E, 0x4B, 0xCE, 0x00, 0x0E, 0x73, 0x0E, 0x0A, 0x00, 0x40, 0x7B, 0x59, 0x94, 0xAE, 0xF4, 0x7A, 
   0xAF, 0xFF, 0x62, 0x89, 0xC1, 0x3D, 0x19, 0x45, 0x00, 0x12, 0x38, 0x40, 0x60, 0x9B, 0xB4, 0xCF, 
   0xC2, 0x6A, 0x8C, 0x98, 0x00, 0x47, 0xB0, 0x60, 0x79, 0xCC, 0xD9, 0x87, 0xA0, 0x96, 0x62, 0x63, 
   0x00, 0x28, 0x89, 0x00, 0x31, 0x78, 0x5C, 0x91, 0x81, 0xE4, 0xE3, 0xE3, 0x99, 0x91, 0xD7, 0x29, 
   0x31, 0x68, 0x0F, 0x2D, 0x5A, 0x53, 0x54, 0x98, 0x5A, 0x51, 0x9F, 0x62, 0x6B, 0x83, 0x42, 0x85, 
   0x7A, 0x76, 0x8C, 0xA0, 0x8C, 0x97, 0xEC, 0x40, 0x8F, 0xEE, 0x1C, 0x36, 0x39, 0x65, 0x40, 0x15, 
   0x44, 0x59, 0xAC, 0x2A, 0x90, 0xD8, 0x81, 0xB3, 0xD4, 0x98, 0x6D, 0xAF, 0x4C, 0x42, 0x77, 0x27, 
   0x63, 0x69, 0x6F, 0x75, 0x7F, 0x5E, 0x6A, 0xB7, 0x25, 0x53, 0x62, 0x21, 0x4E, 0x37, 0xA1, 0x8F, 
   0xC4, 0xA7, 0x95, 0xFF, 0x1C, 0x6D, 0xB9, 0x00, 0x44, 0x2D, 0x5D, 0x3A, 0x49, 0xD1, 0xAE, 0xFC, 
   0x7A, 0xE0, 0xFF, 0x25, 0x25, 0x19, 0x00, 0x00, 0x2A, 0x40, 0x85, 0xEE, 0x9E, 0xD3, 0xF4, 0x9E, 
   0x78, 0x37, 0x00, 0x11, 0x3C, 0x00, 0x30, 0x96, 0xCF, 0xDF, 0xDF, 0xF4, 0xEB, 0xE0, 0x24, 0x31, 
   0x99, 0x08, 0x11, 0x3B, 0x4B, 0x71, 0x8A, 0x63, 0x79, 0xCF, 0x90, 0xB6, 0xA1, 0x3F, 0x69, 0x93, 
   0x11, 0x00, 0x64, 0x62, 0x36, 0x50, 0x6A, 0xA3, 0xB0, 0x5C, 0xAE, 0xFF, 0x95, 0xA8, 0xBE, 0x81, 
   0x67, 0x59, 0x00, 0x52, 0x5D, 0x1A, 0x62, 0x9C, 0xEF, 0x7E, 0xC5, 0x9E, 0x6D, 0x91, 0x00, 0x61, 
   0x69, 0x00, 0x23, 0xB8, 0xC6, 0x75, 0x9B, 0xDE, 0xE8, 0xC6, 0x41, 0x86, 0xA6, 0x00, 0x2C, 0x00, 
   0x20, 0x2A, 0x41, 0x79, 0x65, 0xFF, 0x8B, 0xA1, 0xEE, 0x42, 0x81, 0x5F, 0x58, 0x8C, 0x69, 0x79, 
   0x84, 0xA2, 0x3F, 0x42, 0x98, 0x59, 0x4C, 0xAF, 0x57, 0x90, 0xC9, 0x4A, 0x7E, 0x8D, 0x44, 0x4E, 
   0x4D, 0x49, 0x2B, 0x70, 0x55, 0x65, 0xFA, 0x7D, 0xAA, 0xAA, 0x4F, 0x49, 0x37, 0x00, 0x49, 0x76, 
   0x4C, 0x77, 0xB2, 0xBB, 0x73, 0xCB, 0x65, 0x7D, 0x98, 0x75, 0x99, 0xAE, 0x5C, 0x5D, 0x79, 0x21, 
   0x00, 0x44, 0x00, 0x24, 0x5C, 0x38, 0x73, 0x8D, 0xAD, 0xB6, 0xB8, 0xA6, 0x99, 0xCE, 0x1A, 0x52, 
   0x80, 0x01, 0x39, 0x33, 0x62, 0x66, 0x65, 0x25, 0x45, 0x7E, 0x33, 0x30, 0x82, 0xAC, 0x8D, 0xA7, 
   0x56, 0xA5, 0xB3, 0x27, 0x5F, 0x7F, 0x7B, 0x56, 0x82, 0x36, 0x58, 0x8C, 0x14, 0x0E, 0x27, 0x65, 
   0x43, 0x85, 0x88, 0xA7, 0xDE, 0x69, 0xB7, 0xC1, 0x49, 0x4C, 0xAC, 0x07, 0x1A, 0x6D, 0x29, 0x46, 
   0x3B, 0x6F, 0x59, 0x3B, 0x2D, 0x4A, 0x7D, 0x2A, 0x7F, 0xAB, 0x9D, 0x95, 0xCF, 0x8A, 0x43, 0xC6, 
   0x0F, 0x2A, 0x4B, 0x17, 0x2A, 0x42, 0x3E, 0x69, 0xB9, 0x56, 0x86, 0x75, 0x5C, 0x36, 0x69, 0x33, 
   0x51, 0x90, 0x3E, 0x62, 0x84, 0x5A, 0x56, 0x72, 0x37, 0x55, 0x60, 0x0F, 0x38, 0x61, 0x55, 0x4B, 
   0x80, 0x79, 0x85, 0xAF, 0x56, 0x73, 0xA3, 0x21, 0x1D, 0x5D, 0x25, 0x5A, 0x51, 0x53, 0x66, 0x8B, 
   0x54, 0x45, 0xB3, 0x49, 0x51, 0x74, 0x38, 0x6E, 0x56, 0x3D, 0x6D, 0x6D, 0x43, 0x43, 0x8B, 0x43, 
   0x2B, 0xA2, 0x3D, 0x54, 0x95, 0x7B, 0x66, 0x54, 0x62, 0x7C, 0x48, 0x0A, 0x41, 0xAE, 0x00, 0x18, 
   0x6A, 0x5D, 0x24, 0x44, 0x66, 0x5A, 0x9B, 0x2F, 0x6F, 0x8D, 0x3C, 0x5F, 0x6D, 0x86, 0x5F, 0x91, 
   0x74, 0x7B, 0xE5, 0x2C, 0x5C, 0x8C, 0x07, 0x49, 0x1B, 0x0D, 0x31, 0x37, 0x4F, 0x53, 0xB0, 0xAC, 
   0x53, 0xBD, 0x45, 0x48, 0x73, 0x15, 0x54, 0x5B, 0x36, 0x4F, 0x72, 0x37, 0x72, 0x9A, 0x54, 0x61, 
   0x83, 0x81, 0x43, 0x93, 0x2B, 0x48, 0x64, 0x13, 0x53, 0x5D, 0x36, 0x37, 0x6F, 0x5A, 0x65, 0x87, 
   0x6B, 0x60, 0x88, 0x37, 0x3E, 0x8D, 0x09, 0x55, 0x65, 0x43, 0x5B, 0x7B, 0x8D, 0x6D, 0x80, 0x3C, 
   0x56, 0x91, 0x18, 0x70, 0x73, 0x29, 0x62, 0x61, 0x41, 0x01, 0x66, 0x48, 0x3B, 0x4C, 0x50, 0x71, 
   0x9E, 0x5C, 0x63, 0xB6, 0x5B, 0x8A, 0x71, 0x47, 0x77, 0x69, 0x17, 0x13, 0x73, 0x12, 0x2F, 0x5C, 
   0x3C, 0x63, 0x68, 0x82, 0x64, 0xAC, 0x7C, 0x53, 0x88, 0x13, 0x36, 0x42, 0x00, 0x54, 0x27, 0x3B, 
   0x61, 0xA7, 0x55, 0x72, 0x9F, 0x78, 0x56, 0x83, 0x66, 0x55, 0x98, 0x19, 0x53, 0x7E, 0x1E, 0x30, 
   0x38, 0x2B, 0x0A, 0x34, 0x5B, 0x6F, 0xA9, 0x83, 0xCC, 0xD2, 0x53, 0x8A, 0x70, 0x00, 0x00, 0x2F, 
   0x00, 0x00, 0x3C, 0x71, 0x6F, 0xB1, 0x96, 0xF0, 0xDB, 0x51, 0x88, 0x95, 0x2C, 0x0B, 0x52, 0x18, 
   0x14, 0x29, 0x19, 0x43, 0x69, 0x3A, 0x64, 0x74, 0x6C, 0x6D, 0x90, 0x9B, 0x75, 0xF8, 0x44, 0x7A, 
   0xA0, 0x15, 0x5D, 0x2B, 0x3E, 0x46, 0x3D, 0x63, 0x48, 0x8B, 0x54, 0x84, 0xC9, 0x5B, 0x7A, 0xBB, 
   0x81, 0x57, 0x8D, 0x3A, 0x56, 0x6F, 0x00, 0x3A, 0x8B, 0x37, 0x5E, 0x69, 0xCF, 0xAF, 0x70, 0x7A, 
   0x71, 0xDE, 0x18, 0x16, 0x9F, 0x3E, 0x7D, 0x60, 0x6B, 0xB6, 0x9D, 0x38, 0x1C, 0x76, 0x11, 0x2E, 
   0x61, 0x64, 0x91, 0xA2, 0xBC, 0x9E, 0xE3, 0x65, 0x7B, 0xC4, 0x24, 0x47, 0x4F, 0x4F, 0x6D, 0x48, 
   0x64, 0x8D, 0x9E, 0x35, 0x2B, 0xA6, 0x00, 0x30, 0x73, 0x30, 0x50, 0x69, 0xE4, 0xA3, 0xBB, 0x9F, 
   0xBA, 0xC3, 0x00, 0x46, 0xA5, 0x1C, 0x2D, 0x9D, 0x6D, 0x66, 0x62, 0x84, 0x89, 0x5C, 0x39, 0x72, 
   0xCF, 0x00, 0x39, 0x9E, 0x70, 0x4B, 0x50, 0x9D, 0x7C, 0xAD, 0x50, 0xA7, 0xD1, 0x7D, 0x8A, 0xA3, 
   0x96, 0x87, 0x9A, 0x3C, 0x2F, 0x6A, 0x00, 0x1D, 0x74, 0x2E, 0x76, 0x5A, 0x81, 0xB2, 0x9C, 0x83, 
   0x90, 0xFF, 0x4F, 0x60, 0xB0, 0x3D, 0x4C, 0x6E, 0x5F, 0x41, 0x73, 0x5A, 0x82, 0x86, 0x2A, 0x52, 
   0x96, 0x51, 0x77, 0xC2, 0xAA, 0xBC, 0xCF, 0xB0, 0x76, 0xBC, 0x77, 0x66, 0x91, 0x27, 0x56, 0x98, 
   0x01, 0x05, 0x6D, 0x1E, 0x3B, 0x5C, 0x66, 0x8F, 0xB2, 0x87, 0xA3, 0x9D, 0x88, 0xB4, 0xB4, 0x59, 
   0x7D, 0xA7, 0x56, 0x29, 0x77, 0x48, 0x4F, 0x5A, 0x1F, 0x4A, 0xAA, 0x28, 0x59, 0x8F, 0x87, 0x96, 
   0x6F, 0x9A, 0xAF, 0xBB, 0x66, 0x9D, 0xC1, 0x51, 0x4F, 0x9E, 0x6A, 0x3B, 0xAC, 0x1D, 0x4B, 0x70, 
   0x00, 0x6A, 0x2C, 0x73, 0x78, 0x85, 0xD2, 0x90, 0xEB, 0x5B, 0x89, 0xE5, 0x36, 0x33, 0x86, 0x61, 
   0x6B, 0x5B, 0x4E, 0x87, 0x81, 0x2B, 0x4F, 0x98, 0x42, 0x6C, 0x9E, 0x86, 0xAE, 0xA8, 0x4D, 0x19, 
   0x63, 0x0A, 0x00, 0x48, 0x68, 0xCF, 0xB9, 0xA9, 0xD1, 0xFF, 0x6F, 0x25, 0xB3, 0x0C, 0x5C, 0x43, 
   0x55, 0x89, 0x2B, 0x7C, 0x87, 0xC1, 0x59, 0x4C, 0xFB, 0x3C, 0x30, 0x6B, 0x47, 0x6B, 0x4E, 0x58, 
   0xBC, 0xCB, 0x58, 0x66, 0x8D, 0x0A, 0x22, 0x3A, 0x25, 0x69, 0xB4, 0xB2, 0xBC, 0xD9, 0xB9, 0xA5, 
   0xAB, 0x3E, 0x63, 0x96, 0x2F, 0x37, 0x5F, 0x61, 0x3D, 0x39, 0x1E, 0x5C, 0xBA, 0x64, 0xD6, 0xFF, 
   0xBF, 0xB2, 0xAF, 0x56, 0x0F, 0x45, 0x00, 0x08, 0x66, 0x2C, 0x2B, 0x6A, 0xE2, 0xD8, 0xC4, 0xE9, 
   0xFF, 0xFF, 0x4F, 0x95, 0xAA, 0x00, 0x00, 0x27, 0x00, 0x00, 0x4D, 0x66, 0x33, 0xAF, 0x8C, 0x84, 
   0xBD, 0x5B, 0xC2, 0x70, 0x19, 0x9C, 0xAA, 0xCA, 0x63, 0xF8, 0xE4, 0xD1, 0xA4, 0x00, 0x6B, 0x44, 
   0x00, 0x00, 0x32, 0x6F, 0x85, 0x7A, 0x71, 0xF3, 0xEA, 0x61, 0x00, 0xAE, 0x18, 0x07, 0x59, 0x43, 
   0xFF, 0x99, 0xD1, 0xDC, 0xF9, 0x89, 0x2C, 0x8B, 0x00, 0x3E, 0x44, 0x1A, 0x70, 0x88, 0x5A, 0x4E, 
   0xAC, 0x56, 0x5A, 0xBD, 0x73, 0x77, 0xA5, 0x49, 0x6C, 0x7B, 0x26, 0x7D, 0x68, 0x49, 0x66, 0x70, 
   0x57, 0x3E, 0x96, 0x86, 0x9F, 0xF3, 0x71, 0x8F, 0xA4, 0x92, 0xBB, 0xBA, 0x0D, 0x00, 0x6F, 0x00, 
   0x09, 0x51, 0x99, 0xAC, 0x74, 0xAC, 0xDB, 0xA3, 0x27, 0x39, 0x9E, 0x24, 0x00, 0x8B, 0x83, 0x6F, 
   0x8F, 0x2D, 0x88, 0x55, 0x00, 0x3A, 0x40, 0x83, 0x47, 0x82, 0xBE, 0x8D, 0xFF, 0x2F, 0x83, 0xA7, 
   0x16, 0x61, 0x34, 0x54, 0x76, 0x7E, 0x60, 0x7F, 0xCE, 0x4F, 0x55, 0x79, 0x48, 0x2B, 0x8A, 0x59, 
   0x59, 0x74, 0x58, 0x77, 0x81, 0x3A, 0x77, 0xD6, 0x56, 0x6F, 0xD3, 0x6B, 0x72, 0x61, 0x35, 0x30, 
   0x01, 0x12, 0x13, 0x3B, 0x31, 0x59, 0xA1, 0x73, 0x7E, 0xE5, 0x81, 0x6E, 0x9B, 0x69, 0x84, 0x7C, 
   0x54, 0x6B, 0x9A, 0x33, 0x51, 0x63, 0x0F, 0x28, 0x40, 0x38, 0x2E, 0x96, 0x56, 0x91, 0x81, 0x57, 
   0x7B, 0x92, 0x78, 0x46, 0xA7, 0x53, 0x56, 0x60, 0x00, 0x60, 0x3D, 0x02, 0x2C, 0x7E, 0x5B, 0x4A, 
   0xC5, 0x90, 0x73, 0x98, 0x3B, 0x7A, 0x69, 0x39, 0x5C, 0x5D, 0x43, 0x34, 0x8B, 0x31, 0x56, 0x91, 
   0x2C, 0x62, 0x80, 0x54, 0x62, 0x68, 0x49, 0x61, 0x78, 0x4F, 0x28, 0x73, 0x38, 0x5B, 0x79, 0x48, 
   0x7D, 0x9C, 0x42, 0x4A, 0x96, 0x35, 0x49, 0x7D, 0x2D, 0x59, 0x64, 0x16, 0x6A, 0x58, 0x2E, 0x47, 
   0x6A, 0x69, 0x25, 0x9A, 0x43, 0x3E, 0x8C, 0x0C, 0x7A, 0x6C, 0x48, 0x81, 0x73, 0xB5, 0x5F, 0xCE, 
   0x90, 0x64, 0xAA, 0x00, 0x67, 0x46, 0x00, 0x32, 0x43, 0x58, 0x3C, 0x7C, 0x7D, 0x58, 0x89, 0x4A, 
   0x4D, 0x8A, 0x27, 0x59, 0x8A, 0x43, 0x60, 0x7E, 0x4E, 0x4A, 0x7D, 0x42, 0x61, 0x76, 0x41, 0x77, 
   0x80, 0x35, 0x5E, 0x7A, 0x45, 0x12, 0x63, 0x00, 0x1F, 0x59, 0x44, 0x8F, 0x94, 0x9B, 0x91, 0x96, 
   0x68, 0x5C, 0x96, 0x26, 0x54, 0x94, 0x1F, 0x1A, 0x74, 0x36, 0x3D, 0x3A, 0x5E, 0x6D, 0x79, 0x42, 
   0x9B, 0xA1, 0x36, 0x6B, 0x73, 0x46, 0x07, 0x5B, 0x30, 0x1D, 0x6D, 0x38, 0x48, 0x7A, 0x6C, 0x7E, 
   0x87, 0x55, 0x85, 0x93, 0x3C, 0x6C, 0x87, 0x45, 0x25, 0x7A, 0x11, 0x2F, 0x62, 0x0C, 0x57, 0x67, 
   0x53, 0x3D, 0x85, 0x7D, 0x6C, 0xA7, 0x54, 0x93, 0x7D, 0x1F, 0x42, 0x3E, 0x23, 0x09, 0x71, 0x46, 
   0x87, 0x85, 0x43, 0x66, 0x87, 0x50, 0x3F, 0x93, 0x6C, 0x6C, 0x87, 0x43, 0x5A, 0x74, 0x2A, 0x54, 
   0x7E, 0x29, 0x3D, 0x5B, 0x14, 0x17, 0x57, 0x71, 0x97, 0x9D, 0x88, 0xD6, 0xAE, 0x30, 0x2D, 0x53, 
   0x01, 0x00, 0x5F, 0x25, 0x3F, 0x95, 0x51, 0x94, 0x9C, 0x97, 0xB8, 0x9C, 0x7E, 0x7C, 0xA0, 0x02, 
   0x2C, 0x64, 0x00, 0x00, 0x24, 0x21, 0x1B, 0x49, 0x91, 0x7C, 0xCB, 0x88, 0xB9, 0xC9, 0x43, 0x75, 
   0x9A, 0x15, 0x29, 0x58, 0x2D, 0x24, 0x09, 0x59, 0x5A, 0x7A, 0x8F, 0xB8, 0xF6, 0x9A, 0x96, 0x9D, 
   0x2B, 0x17, 0x53, 0x00, 0x22, 0xAD, 0x46, 0x85, 0x5F, 0x9F, 0x7B, 0x72, 0x5D, 0x48, 0xFF, 0x40, 
   0x5B, 0xA6, 0x77, 0xB0, 0x4D, 0x31, 0x6A, 0x7F, 0x03, 0x00, 0x64, 0x6B, 0x5A, 0x9F, 0x84, 0xAD, 
   0xC3, 0x35, 0xA3, 0x8B, 0x1F, 0x41, 0xB2, 0x81, 0x41, 0x7D, 0x86, 0x7B, 0x50, 0x29, 0x71, 0xA1, 
   0x38, 0x87, 0xD6, 0x5E, 0xB0, 0xA8, 0x47, 0x34, 0x72, 0x31, 0x00, 0x5B, 0x07, 0x20, 0x7B, 0x6D, 
   0xA6, 0xB8, 0xE6, 0xFF, 0xD1, 0x7C, 0xB6, 0xD4, 0x03, 0x0E, 0x8A, 0x00, 0x00, 0x31, 0x3B, 0x33, 
   0x32, 0x90, 0x8D, 0xBF, 0x6D, 0x91, 0xDA, 0x73, 0x70, 0x8C, 0x40, 0x49, 0xAD, 0x24, 0x66, 0x8F, 
   0x8C, 0x7F, 0x51, 0x9D, 0x8B, 0xA7, 0x4F, 0x89, 0xDC, 0x29, 0x59, 0xB2, 0x17, 0x52, 0x49, 0x56, 
   0x57, 0x49, 0x6F, 0x53, 0xB2, 0x49, 0x77, 0xCC, 0x76, 0xA5, 0x9A, 0x3D, 0x34, 0x6D, 0x00, 0x3B, 
   0x9D, 0x6A, 0x99, 0xC7, 0xFF, 0xB2, 0xC3, 0xC1, 0xAB, 0x9A, 0x00, 0x57, 0xA9, 0x00, 0x20, 0xA0, 
   0x6B, 0x75, 0x87, 0xA5, 0x86, 0xA2, 0x2C, 0x48, 0x95, 0x10, 0x54, 0x6C, 0x51, 0x67, 0x7F, 0xBA, 
   0xC9, 0xCA, 0x92, 0x8E, 0xBE, 0x28, 0x2A, 0x83, 0x04, 0x46, 0x45, 0x4A, 0x6A, 0xAD, 0x7B, 0x72, 
   0xEC, 0x7D, 0x95, 0x90, 0x54, 0x67, 0x56, 0x7E, 0x60, 0x90, 0x63, 0x6A, 0xD0, 0x00, 0x53, 0xC3, 
   0x4C, 0x6A, 0x49, 0x7D, 0x6F, 0x5B, 0x5E, 0x49, 0xC5, 0x5F, 0x6D, 0xD4, 0x6A, 0xB7, 0xB2, 0x58, 
   0x62, 0x99, 0x2E, 0x2E, 0x7A, 0x44, 0x90, 0x74, 0x9E, 0xCD, 0xD9, 0x5D, 0x31, 0xC4, 0x00, 0x18, 
   0x32, 0x00, 0x58, 0x00, 0xAE, 0x6F, 0x95, 0xE4, 0xC2, 0xFF, 0x4D, 0xD7, 0xFF, 0x00, 0x12, 0x05, 
   0x0F, 0x10, 0x00, 0x78, 0xA5, 0xFF, 0xAC, 0xD3, 0xFF, 0x65, 0x3D, 0x44, 0x00, 0x19, 0x3C, 0x07, 
   0x64, 0xA4, 0x8D, 0xC1, 0xE5, 0xAA, 0x8E, 0xA6, 0x00, 0x00, 0x46, 0x00, 0x35, 0x81, 0xC2, 0xFA, 
   0xFF, 0xC9, 0xCC, 0xCA, 0x43, 0x17, 0x39, 0x00, 0x1B, 0x50, 0x3A, 0x45, 0xAF, 0xA3, 0xB0, 0xBF, 
   0xA9, 0xFB, 0xFD, 0x1E, 0x79, 0xC5, 0x0B, 0x00, 0x04, 0x4D, 0x10, 0x2D, 0x74, 0xCE, 0xCC, 0xB5, 
   0xEF, 0xFF, 0xEA, 0xF1, 0xF0, 0x20, 0x2B, 0x6C, 0x00, 0x00, 0x0C, 0x00, 0x1A, 0x62, 0xFA, 0x9F, 
   0xA0, 0xD1, 0xD4, 0xC1, 0x41, 0xA9, 0xE4, 0x12, 0x79, 0x77, 0x7E, 0x5F, 0x80, 0xCB, 0x57, 0xEE, 
   0x38, 0x9D, 0x7D, 0x00, 0x56, 0x0F, 0x2E, 0x05, 0x4B, 0x42, 0x61, 0xD4, 0x52, 0x61, 0xE4, 0x94, 
   0x82, 0xA6, 0x9F, 0xE3, 0x98, 0x5C, 0xA5, 0x83, 0x46, 0x05, 0x4F, 0x04, 0x0E, 0x6D, 0x2D, 0x7C, 
   0xFE, 0x95, 0x9A, 0xD5, 0x73, 0x73, 0x55, 0x0B, 0x33, 0x5E, 0x38, 0x6B, 0x9D, 0x72, 0x88, 0x88, 
   0x67, 0x76, 0x9A, 0x2E, 0x3D, 0xA6, 0x40, 0x3B, 0x74, 0x35, 0x1A, 0x64, 0x2C, 0x72, 0x98, 0x7F, 
   0x98, 0xB0, 0x8C, 0xAA, 0xA4, 0x7E, 0x84, 0x91, 0x3A, 0x3A, 0x77, 0x00, 0x00, 0x4D, 0x1A, 0x1C, 
   0x60, 0x56, 0x87, 0x96, 0x49, 0x75, 0xA0, 0x90, 0x89, 0xAD, 0x90, 0x7E, 0x90, 0x23, 0x50, 0x73, 
   0x2D, 0x66, 0x83, 0x66, 0x6A, 0x83, 0x3A, 0x69, 0x57, 0x73, 0x5D, 0xBA, 0x82, 0x8F, 0xC0, 0x3B, 
   0x76, 0x85, 0x11, 0x24, 0x72, 0x33, 0x2F, 0x7C, 0x5C, 0x8B, 0x97, 0x84, 0x8B, 0x8A, 0x42, 0x5B, 
   0x56, 0x00, 0x36, 0x67, 0x35, 0x41, 0x86, 0x71, 0x48, 0xAF, 0x51, 0x5C, 0x9E, 0x5C, 0x85, 0x6F, 
   0x60, 0x8F, 0x9A, 0x40, 0x4D, 0x86, 0x21, 0x16, 0x5D, 0x0A, 0x21, 0x47, 0x4A, 0x73, 0xB4, 0x8A, 
   0x80, 0xA9, 0x60, 0x58, 0x80, 0x09, 0x50, 0x61, 0x1F, 0x33, 0x6C, 0x64, 0x5A, 0x73, 0x38, 0x5A, 
   0x96, 0x2E, 0x28, 0x79, 0x6D, 0x5C, 0x52, 0x5D, 0x7A, 0x97, 0x45, 0x5D, 0x9D, 0x38, 0x35, 0x8C, 
   0x2C, 0x6D, 0x69, 0x43, 0x6C, 0x79, 0x54, 0x21, 0x90, 0x44, 0x4F, 0x79, 0x4F, 0x73, 0x6D, 0x48, 
   0x63, 0x84, 0x63, 0x78, 0x7F, 0x17, 0x3D, 0xA0, 0x00, 0x1A, 0x81, 0x68, 0x59, 0x25, 0x64, 0x71, 
   0x76, 0x25, 0x66, 0x9B, 0x0A, 0x44, 0x65, 0x56, 0x45, 0x9B, 0x85, 0x63, 0xD9, 0x3B, 0x7A, 0x70, 
   0x33, 0x51, 0x3B, 0x43, 0x50, 0x84, 0x26, 0x55, 0x9B, 0x4E, 0x54, 0x95, 0x53, 0x42, 0x5B, 0x0A, 
   0x48, 0x5B, 0x5A, 0x54, 0x95, 0x5B, 0x55, 0xAC, 0x4F, 0x71, 0x7D, 0x58, 0x4E, 0x74, 0x28, 0x58, 
   0x56, 0x0A, 0x40, 0x56, 0x1E, 0x24, 0x74, 0x76, 0x3D, 0x9F, 0x6D, 0x73, 0x80, 0x3B, 0x80, 0x9D, 
   0x56, 0x68, 0xA2, 0x3E, 0x38, 0x7D, 0x53, 0x3C, 0x52, 0x35, 0x36, 0x89, 0x01, 0x6B, 0x56, 0x58, 
   0x82, 0x6D, 0x70, 0x37, 0x9B, 0x2C, 0x3D, 0x68, 0x2C, 0x60, 0x6F, 0x54, 0x56, 0xA8, 0x49, 0x6D, 
   0x69, 0x5E, 0x82, 0x52, 0x23, 0x25, 0x9C, 0x17, 0x24, 0x7F, 0x3A, 0x69, 0x6E, 0x69, 0x54, 0x79, 
   0x59, 0x5A, 0xA0, 0x25, 0x6C, 0x50, 0x37, 0x4A, 0x45, 0x65, 0x5A, 0xAC, 0x59, 0x5F, 0x85, 0x19, 
   0x2B, 0x57, 0x41, 0x42, 0x7E, 0x3C, 0x7C, 0x85, 0x44, 0x3F, 0x69, 0x7D, 0x5B, 0x70, 0x4E, 0x6D, 
   0xB4, 0x13, 0x61, 0x8A, 0x39, 0x54, 0x4F, 0x13, 0x0A, 0x33, 0x4E, 0x3A, 0x6F, 0x82, 0xB4, 0xCD, 
   0x54, 0x91, 0x95, 0x00, 0x00, 0x55, 0x21, 0x01, 0x55, 0x78, 0x88, 0x9B, 0x6D, 0xDE, 0xB3, 0x44, 
   0x69, 0x96, 0x15, 0x00, 0x55, 0x47, 0x03, 0x65, 0x2C, 0x61, 0x6B, 0x28, 0x7C, 0x6D, 0x48, 0x6D, 
   0x7B, 0x78, 0x5E, 0x89, 0x2A, 0x4E, 0xA7, 0x3C, 0x93, 0x74, 0x93, 0x56, 0x65, 0x71, 0x5C, 0xA0, 
   0x15, 0x68, 0xB2, 0x31, 0x52, 0x42, 0x8D, 0x80, 0x8F, 0x49, 0x64, 0xE6, 0x16, 0x15, 0xA1, 0x6B, 
   0x7D, 0x82, 0x66, 0xB6, 0x74, 0x4E, 0x37, 0x52, 0x20, 0x09, 0x98, 0x3E, 0x82, 0x9B, 0xA6, 0xA6, 
   0xB8, 0x56, 0x68, 0xC7, 0x0C, 0x34, 0x31, 0x3B, 0x58, 0x27, 0x98, 0x78, 0xEC, 0x81, 0xA7, 0xD2, 
   0x24, 0xAB, 0x82, 0x3E, 0x79, 0xA2, 0x87, 0x5C, 0x7E, 0x30, 0x00, 0x78, 0x00, 0x00, 0x63, 0x4E, 
   0x8D, 0x89, 0xFF, 0xFF, 0xE7, 0xE4, 0xF1, 0xD5, 0x00, 0x21, 0x87, 0x00, 0x00, 0x6B, 0x1E, 0x00, 
   0x2B, 0xAD, 0x9D, 0x6E, 0x8E, 0xC4, 0xFB, 0x27, 0x6F, 0xDA, 0x4D, 0x30, 0x50, 0x3E, 0x2C, 0x77, 
   0x3C, 0x87, 0x9C, 0xA0, 0xF1, 0xA0, 0xC6, 0xB6, 0xE0, 0x4F, 0x4E, 0xDD, 0x00, 0x00, 0x6B, 0x00, 
   0x2C, 0x13, 0x61, 0x74, 0x4F, 0xAE, 0xB6, 0xFF, 0x37, 0x6F, 0xD7, 0x00, 0x5E, 0x88, 0x82, 0x8C, 
   0xA9, 0x9D, 0x5F, 0x92, 0x8D, 0x76, 0x98, 0x73, 0x93, 0xC6, 0x20, 0x65, 0xAF, 0x1F, 0x5E, 0x87, 
   0x8B, 0xA1, 0xC3, 0xA7, 0x93, 0xC6, 0x37, 0x40, 0x56, 0x00, 0x11, 0x5F, 0x31, 0x5D, 0x77, 0x79, 
   0x7D, 0xAD, 0x8C, 0xA1, 0xC5, 0x53, 0x79, 0x9D, 0x5D, 0x4F, 0x8C, 0x5C, 0x5F, 0xA2, 0x3A, 0x80, 
   0xBC, 0x58, 0x3C, 0x7C, 0xA1, 0x64, 0x4E, 0x4A, 0x7C, 0x9F, 0x00, 0x7D, 0xA2, 0x6A, 0x88, 0xAF, 
   0x92, 0x86, 0xEB, 0x20, 0x1E, 0x71, 0x21, 0x4C, 0x1B, 0x85, 0x71, 0x91, 0x93, 0x85, 0xEC, 0x5B, 
   0x80, 0xCC, 0x5A, 0x59, 0x9D, 0x7F, 0xA7, 0xB0, 0x70, 0x66, 0x9A, 0x00, 0x3D, 0x7A, 0x18, 0x7B, 
   0x66, 0x6B, 0x7C, 0x6D, 0x8A, 0x4B, 0x97, 0x52, 0x6F, 0xB1, 0x73, 0xB4, 0x92, 0x66, 0x8A, 0xD2, 
   0x27, 0x33, 0xC5, 0x44, 0x33, 0x4B, 0x9B, 0xA0, 0x67, 0x7D, 0xBC, 0xD3, 0x20, 0x3C, 0xB7, 0x36, 
   0x0D, 0x4A, 0x54, 0x75, 0x9A, 0x88, 0xB5, 0xE5, 0x76, 0x6B, 0x78, 0x00, 0x1B, 0x6C, 0x07, 0x50, 
   0xB1, 0xDD, 0xB4, 0x9C, 0x8F, 0x98, 0x98, 0x1C, 0x53, 0xA9, 0x64, 0x58, 0x55, 0x6E, 0x5E, 0x9B, 
   0x08, 0x72, 0xEC, 0x59, 0xBC, 0xBD, 0x9E, 0x97, 0x75, 0x64, 0x33, 0x72, 0x02, 0x3D, 0x72, 0x69, 
   0x50, 0x8B, 0x98, 0x9E, 0xC6, 0x86, 0xC5, 0xE1, 0x27, 0x66, 0x8D, 0x00, 0x02, 0x00, 0x41, 0x36, 
   0x6B, 0xBD, 0x7B, 0xFF, 0xB9, 0xCE, 0x94, 0x0C, 0x89, 0x6C, 0x00, 0x16, 0xC6, 0xB5, 0x8C, 0xB9, 
   0xB8, 0xEF, 0xB4, 0x1A, 0x2F, 0x54, 0x00, 0x00, 0x00, 0x31, 0x61, 0x93, 0xCA, 0xD7, 0xFF, 0xA3, 
   0x79, 0xD8, 0x1F, 0x4B, 0x53, 0x4A, 0xA4, 0x68, 0x7B, 0x6E, 0xB2, 0x52, 0x2E, 0xB3, 0x4A, 0x60, 
   0x9C, 0x39, 0x78, 0x7F, 0x4A, 0x84, 0x9A, 0x5C, 0x89, 0x89, 0x5C, 0x2D, 0x83, 0x5B, 0x53, 0xC2, 
   0x53, 0x80, 0xAA, 0x14, 0x3C, 0x53, 0x16, 0x1E, 0x63, 0x00, 0x00, 0x47, 0x83, 0xAE, 0x94, 0xCB, 
   0xFF, 0xDA, 0x69, 0x75, 0xBB, 0x15, 0x03, 0x78, 0x55, 0x32, 0x40, 0x41, 0x81, 0x34, 0x00, 0x17, 
   0x5A, 0x46, 0x1B, 0x94, 0xF4, 0xBF, 0xFE, 0x45, 0xAC, 0xAE, 0x00, 0x4B, 0x34, 0x8E, 0x60, 0x6C, 
   0x73, 0x81, 0xD3, 0x0D, 0x42, 0x74, 0x73, 0x42, 0x58, 0x73, 0x97, 0x99, 0x4F, 0x85, 0xCC, 0x51, 
   0x59, 0xA7, 0x16, 0x28, 0x86, 0x33, 0x2D, 0x33, 0x67, 0x4A, 0x3F, 0x51, 0x74, 0x98, 0x50, 0x90, 
   0xE6, 0x70, 0x60, 0xB8, 0x1F, 0x2B, 0x75, 0x35, 0x36, 0x50, 0x58, 0x65, 0x78, 0x4E, 0x7E, 0xBC, 
   0x49, 0x7E, 0x61, 0x64, 0x54, 0x82, 0x3B, 0x63, 0x8D, 0x2E, 0x44, 0x7B, 0x44, 0x28, 0x8C, 0x4E, 
   0x62, 0x80, 0x09, 0x8A, 0x63, 0x37, 0x4C, 0x75, 0x6B, 0x45, 0xB3, 0x4F, 0x72, 0x84, 0x37, 0x4F, 
   0x50, 0x15, 0x3E, 0x61, 0x39, 0x39, 0xA2, 0x79, 0x52, 0x98, 0x57, 0x8C, 0x81, 0x3F, 0x74, 0x75, 
   0x4F, 0x44, 0x80, 0x26, 0x2C, 0x7A, 0x26, 0x43, 0x91, 0x54, 0x56, 0xA2, 0x5A, 0x68, 0x6D, 0x52, 
   0x68, 0x61, 0x18, 0x56, 0x89, 0x35, 0x4E, 0x7E, 0x47, 0x3D, 0x78, 0x5F, 0x38, 0x83, 0x5F, 0x62, 
   0x6D, 0x16, 0x7F, 0x63, 0x2E, 0x57, 0x99, 0x95, 0x4A, 0xCD, 0x60, 0x43, 0xA9, 0x00, 0x5A, 0x2F, 
   0x00, 0x4A, 0x3A, 0x79, 0x4B, 0x97, 0xC9, 0x67, 0xBF, 0x22, 0x56, 0x80, 0x00, 0x55, 0x61, 0x52, 
   0x49, 0x60, 0x38, 0x49, 0x77, 0x66, 0x65, 0x8E, 0x65, 0x70, 0x9E, 0x2F, 0x47, 0x6E, 0x21, 0x29, 
   0x44, 0x00, 0x30, 0x50, 0x3B, 0x70, 0x7B, 0x77, 0x78, 0x73, 0x5C, 0x40, 0xAE, 0x2E, 0x57, 0xA3, 
   0x2E, 0x6E, 0x84, 0x6C, 0x62, 0x66, 0x6B, 0x4F, 0x7B, 0x1F, 0x53, 0x85, 0x17, 0x51, 0x78, 0x35, 
   0x0D, 0x4A, 0x4E, 0x42, 0x5C, 0x60, 0x90, 0x97, 0x55, 0x75, 0xA3, 0x4F, 0x85, 0x5E, 0x4D, 0x54, 
   0x8A, 0x2E, 0x07, 0x89, 0x22, 0x3A, 0x4B, 0x35, 0x69, 0x79, 0x59, 0x49, 0xA1, 0x70, 0x6C, 0x7E, 
   0x36, 0x6C, 0x5B, 0x00, 0x38, 0x4B, 0x36, 0x38, 0x91, 0x76, 0x88, 0x9E, 0x66, 0x7C, 0x97, 0x3C, 
   0x31, 0x84, 0x13, 0x25, 0x3E, 0x18, 0x59, 0x4F, 0x4D, 0x6C, 0x7F, 0x4F, 0x40, 0xA9, 0x66, 0x68, 
   0x7C, 0x5E, 0x84, 0x91, 0x29, 0x54, 0x83, 0x16, 0x0E, 0x21, 0x13, 0x00, 0x51, 0x60, 0x9E, 0xAB, 
   0x96, 0xCE, 0xBD, 0x61, 0x65, 0x6C, 0x1A, 0x00, 0x3D, 0x0E, 0x28, 0x60, 0x27, 0x64, 0x7A, 0x8B, 
   0x99, 0xA5, 0x9B, 0x98, 0xED, 0x31, 0x44, 0x77, 0x00, 0x03, 0x18, 0x08, 0x15, 0x2A, 0x52, 0x4E, 
   0x6E, 0x7F, 0x98, 0xDB, 0x87, 0xB6, 0xF4, 0x63, 0x43, 0x75, 0x06, 0x14, 0x18, 0x13, 0x44, 0x74, 
   0x77, 0xA3, 0xAC, 0xB2, 0x99, 0x83, 0x4B, 0x38, 0xC4, 0x16, 0x38, 0xCF, 0x47, 0x82, 0x44, 0x47, 
   0x88, 0x75, 0x37, 0x26, 0x91, 0x5A, 0x54, 0x87, 0x6B, 0xC2, 0x83, 0x54, 0x72, 0xB1, 0x27, 0x26, 
   0xBB, 0x60, 0x3D, 0x5E, 0x72, 0x68, 0x41, 0x1D, 0x7C, 0xA5, 0x30, 0x84, 0xB4, 0x92, 0x89, 0xC6, 
   0x92, 0x8D, 0x8D, 0x3B, 0x46, 0x75, 0x1C, 0x49, 0x91, 0x32, 0x5F, 0x8B, 0x66, 0x76, 0x86, 0x5C, 
   0x5B, 0x92, 0x35, 0x3B, 0x88, 0x69, 0xA8, 0xB0, 0x8A, 0xB2, 0xB6, 0x38, 0x4E, 0x8C, 0x1A, 0x1D, 
   0x95, 0x3E, 0x34, 0x6D, 0x84, 0x70, 0x68, 0x5D, 0x8F, 0xC4, 0x19, 0x53, 0x87, 0x42, 0x4A, 0x56, 
   0x68, 0x70, 0xBB, 0x66, 0xB1, 0xF7, 0x89, 0xB6, 0x9C, 0xA2, 0x6D, 0x8E, 0x36, 0x3A, 0xB2, 0x0A, 
   0x16, 0x76, 0x37, 0x67, 0x3D, 0x4A, 0x5A, 0x5F, 0x1C, 0x75, 0xEE, 0x66, 0xAB, 0xFF, 0xE0, 0x9F, 
   0x82, 0x94, 0x5D, 0x57, 0x00, 0x34, 0x8F, 0x00, 0x3B, 0x96, 0xAB, 0xA5, 0x98, 0xD4, 0xDA, 0xE8, 
   0x49, 0x71, 0xB4, 0x18, 0x3F, 0x72, 0x60, 0x74, 0xA2, 0x6F, 0x5B, 0x78, 0x29, 0x22, 0x99, 0x03, 
   0x41, 0x77, 0x51, 0x85, 0x69, 0xAB, 0xC6, 0xC1, 0xA0, 0xA9, 0xFA, 0x42, 0x60, 0x9B, 0x28, 0x28, 
   0x20, 0x59, 0x44, 0x85, 0x59, 0x62, 0xC4, 0x2D, 0x6B, 0x5A, 0x62, 0x8F, 0x7E, 0x9B, 0x9F, 0xD0, 
   0x5A, 0x54, 0xCA, 0x2A, 0x47, 0x94, 0x35, 0x5E, 0x37, 0x32, 0x76, 0x4A, 0x4D, 0x3A, 0xA0, 0x8A, 
   0x98, 0xEA, 0xA6, 0xF9, 0xFF, 0x74, 0x35, 0xC9, 0x00, 0x05, 0x45, 0x14, 0x8E, 0x47, 0x88, 0x95, 
   0x98, 0xA5, 0x62, 0xFF, 0x26, 0x82, 0x83, 0x08, 0x42, 0x00, 0x65, 0x33, 0x67, 0x95, 0xC3, 0xFF, 
   0x79, 0xAD, 0xFF, 0x38, 0x2E, 0x2B, 0x1B, 0x33, 0x17, 0x44, 0x9A, 0xC3, 0xA7, 0xB0, 0xE7, 0x89, 
   0x52, 0xA6, 0x04, 0x01, 0x49, 0x3C, 0x5E, 0x72, 0x7B, 0xE2, 0xF4, 0x8C, 0x86, 0x9D, 0x08, 0x00, 
   0x00, 0x00, 0x22, 0x73, 0x9A, 0xD9, 0xFF, 0xFF, 0xE7, 0xDC, 0x50, 0x67, 0x8A, 0x00, 0x08, 0x82, 
   0x13, 0x25, 0x55, 0xB0, 0xA2, 0xA1, 0xAC, 0xFF, 0xFF, 0x5E, 0xA7, 0xBA, 0x4D, 0x00, 0x30, 0x00, 
   0x00, 0x22, 0x00, 0x48, 0x81, 0xC2, 0xDF, 0xF8, 0xFF, 0xFF, 0xE3, 0x5F, 0x5F, 0x9C, 0x00, 0x00, 
   0x6B, 0x12, 0x58, 0x39, 0xB6, 0x78, 0xB9, 0xC8, 0x65, 0xEE, 0x3D, 0xB6, 0xAA, 0x00, 0xC5, 0x8C, 
   0x7A, 0x0C, 0x95, 0xA1, 0x64, 0x9E, 0x17, 0x8B, 0x8A, 0x49, 0x3B, 0x57, 0x8D, 0x62, 0x75, 0x43, 
   0x95, 0xD3, 0x4E, 0x34, 0xA8, 0x43, 0x1A, 0x7C, 0x44, 0xB5, 0xC0, 0x9E, 0xC6, 0xD0, 0x57, 0x1E, 
   0x51, 0x00, 0x3E, 0x61, 0x33, 0x72, 0xC4, 0x9B, 0x7E, 0xBA, 0x7F, 0x99, 0x9C, 0x38, 0x37, 0xAB, 
   0x2A, 0x36, 0x91, 0x4B, 0x9C, 0x4B, 0x43, 0x6A, 0x89, 0x2D, 0x6A, 0x89, 0x73, 0x6A, 0x89, 0x84, 
   0x8B, 0xA4, 0x4F, 0x77, 0xA1, 0x40, 0x29, 0x70, 0x16, 0x2E, 0x41, 0x34, 0x68, 0x54, 0x7F, 0x80, 
   0x74, 0x47, 0x54, 0xBC, 0x30, 0x2E, 0xA2, 0x4D, 0x8C, 0x80, 0x5A, 0xAB, 0xA1, 0x2F, 0x60, 0x7E, 
   0x63, 0x48, 0x46, 0x85, 0x59, 0xA3, 0x46, 0x75, 0xC7, 0x49, 0x80, 0x88, 0x42, 0x62, 0x91, 0x41, 
   0x43, 0xBB, 0x5C, 0x69, 0x6E, 0x4B, 0x67, 0x49, 0x2E, 0x27, 0x34, 0x45, 0x4A, 0x83, 0x68, 0x90, 
   0xFF, 0x73, 0x74, 0xF4, 0x5F, 0x55, 0x71, 0x00, 0x47, 0x2C, 0x1B, 0x35, 0x6E, 0x5C, 0x5D, 0x64, 
   0x4D, 0x3D, 0x9E, 0x55, 0x7D, 0x72, 0x71, 0x8D, 0xA0, 0x75, 0x5D, 0xBB, 0x4F, 0x33, 0x47, 0x00, 
   0x2C, 0x46, 0x1F, 0x39, 0x8C, 0x66, 0x85, 0xB0, 0x78, 0x7A, 0xA4, 0x3E, 0x57, 0x79, 0x31, 0x3F, 
   0x4A, 0x42, 0x61, 0x5C, 0x26, 0x4B, 0xA7, 0x4A, 0x52, 0x8C, 0x62, 0x75, 0x75, 0x5D, 0x85, 0x75, 
   0x3A, 0x1D, 0x8C, 0x49, 0x38, 0x8C, 0x3D, 0x7D, 0x75, 0x4E, 0x5C, 0x85, 0x58, 0x57, 0x84, 0x1E, 
   0x6D, 0x89, 0x18, 0x3F, 0x55, 0x4E, 0x44, 0x56, 0x88, 0x6D, 0x97, 0x2D, 0x57, 0xA4, 0x00, 0x46, 
   0x87, 0x6D, 0x6F, 0x5F, 0xA1, 0x8A, 0xB3, 0x38, 0x55, 0x96, 0x00, 0x25, 0x34, 0x19, 0x2A, 0x68, 
   0x55, 0x49, 0xA8, 0x6E, 0x7E, 0x92, 0x69, 0x5D, 0x6A, 0x45, 0x6E, 0x8C, 0x21, 0x5C, 0x97, 0x37, 
   0x56, 0x8A, 0x59, 0x5A, 0x60, 0x42, 0x48, 0x7B, 0x41, 0x52, 0x85, 0x40, 0x46, 0x68, 0x18, 0x30, 
   0x74, 0x3B, 0x54, 0x70, 0x6A, 0x6D, 0x7D, 0x32, 0x73, 0x8A, 0x32, 0x56, 0x96, 0x49, 0x2D, 0x95, 
   0x44, 0x4B, 0x55, 0x3E, 0x7F, 0x88, 0x4F, 0x90, 0x9E, 0x53, 0x6A, 0x69, 0x46, 0x00, 0x79, 0x13, 
   0x1C, 0x62, 0x25, 0x54, 0x58, 0x60, 0x80, 0xA9, 0x72, 0x9E, 0x9E, 0x53, 0x7E, 0x6F, 0x39, 0x1F, 
   0x67, 0x00, 0x23, 0x66, 0x29, 0x4B, 0x66, 0x5E, 0x59, 0x6D, 0x6A, 0x66, 0xA0, 0x20, 0x61, 0x6D, 
   0x30, 0x4A, 0x40, 0x58, 0x4F, 0x91, 0x36, 0x60, 0x9E, 0x20, 0x49, 0x7C, 0x5F, 0x49, 0x80, 0x76, 
   0x76, 0x7E, 0x37, 0x48, 0x4F, 0x2F, 0x26, 0x4A, 0x1E, 0x55, 0x95, 0x30, 0x79, 0x86, 0x5F, 0x68, 
   0x86, 0x65, 0x56, 0x74, 0x3B, 0x3E, 0x5D, 0x12, 0x49, 0x8A, 0x2E, 0x5A, 0x74, 0x15, 0x1F, 0x6A, 
   0x6D, 0x72, 0x8E, 0x9B, 0xC8, 0xB7, 0x32, 0x9D, 0x89, 0x00, 0x00, 0x2E, 0x15, 0x00, 0x69, 0x8A, 
   0x7C, 0xD7, 0x90, 0xF1, 0xBB, 0x44, 0x81, 0x8F, 0x02, 0x00, 0x47, 0x00, 0x00, 0x14, 0x34, 0x40, 
   0x73, 0x6D, 0xA1, 0xC2, 0xB3, 0xA4, 0x8D, 0x50, 0x59, 0xA4, 0x00, 0x2B, 0x96, 0x22, 0x4A, 0x13, 
   0xAA, 0x92, 0x55, 0x85, 0xA5, 0xFF, 0x4C, 0x4B, 0xCA, 0x67, 0x74, 0x51, 0x48, 0xA1, 0xA4, 0x1F, 
   0x44, 0x4E, 0x3B, 0x15, 0x6C, 0x5F, 0x77, 0xD9, 0x88, 0xC3, 0xA6, 0x48, 0x60, 0xA3, 0x2B, 0x25, 
   0x4B, 0x2C, 0x3D, 0x35, 0x6C, 0x85, 0xBB, 0x7E, 0xA5, 0xDF, 0x23, 0x93, 0x5C, 0x30, 0x5E, 0x63, 
   0x98, 0x2F, 0xCB, 0x70, 0x5D, 0x88, 0x26, 0x60, 0x77, 0x5E, 0xBC, 0xB6, 0x95, 0xBE, 0xBA, 0x52, 
   0x24, 0x85, 0x00, 0x00, 0x5B, 0x00, 0x13, 0x51, 0xB9, 0xB9, 0xBB, 0xDE, 0xFF, 0xCF, 0x41, 0x8A, 
   0xB7, 0x00, 0x00, 0x8A, 0x14, 0x00, 0x42, 0x6B, 0x6A, 0x2C, 0x57, 0xA4, 0xA8, 0x3D, 0xA1, 0xC9, 
   0x88, 0x7F, 0x8E, 0x4C, 0x46, 0xBC, 0x3C, 0x63, 0xA5, 0x81, 0x9C, 0x71, 0x96, 0x89, 0xB0, 0x58, 
   0x75, 0xCB, 0x00, 0x07, 0x80, 0x00, 0x3D, 0x36, 0x73, 0xA8, 0x9B, 0xFF, 0xB0, 0xF4, 0x8E, 0x7C, 
   0xD2, 0x0B, 0x67, 0x85, 0x03, 0x3E, 0x5A, 0x34, 0x40, 0x7D, 0xA0, 0x99, 0xBE, 0xBE, 0xB8, 0xB4, 
   0x50, 0x77, 0x9D, 0x14, 0x51, 0xA1, 0x50, 0x54, 0x8F, 0x9E, 0x7F, 0xBF, 0x2A, 0x3F, 0x95, 0x07, 
   0x3B, 0x3E, 0x33, 0x61, 0x7F, 0x9E, 0x9E, 0xE2, 0x9A, 0xD7, 0xE2, 0x71, 0x7D, 0x8A, 0x6C, 0x18, 
   0x5E, 0x12, 0x4F, 0x68, 0x00, 0x5C, 0xA8, 0x83, 0x7A, 0xA3, 0xD6, 0x98, 0x8D, 0x58, 0x49, 0x99, 
   0x1C, 0x60, 0x8F, 0x58, 0x93, 0x96, 0x57, 0x65, 0xC3, 0x08, 0x27, 0x57, 0x2E, 0x78, 0x55, 0xC1, 
   0x9C, 0xED, 0xB6, 0x6F, 0xFF, 0x0E, 0x57, 0xA7, 0x1E, 0x62, 0x58, 0x74, 0x63, 0x57, 0xB8, 0x8B, 
   0xFF, 0x43, 0x95, 0xC5, 0x28, 0x5F, 0x21, 0x2D, 0x45, 0x3D, 0x24, 0x34, 0xB3, 0x6C, 0x4A, 0xAE, 
   0xA7, 0xD0, 0xBE, 0x5B, 0xBF, 0xFF, 0x00, 0x17, 0x87, 0x38, 0x21, 0x30, 0xAD, 0xB0, 0xB8, 0x91, 
   0x9E, 0xD4, 0x49, 0x35, 0x67, 0x00, 0x2E, 0x87, 0x3B, 0x6D, 0xAD, 0x9C, 0xA2, 0x8A, 0x52, 0x5E, 
   0x52, 0x00, 0x00, 0x78, 0x52, 0x7C, 0xB2, 0xEB, 0xDC, 0xFA, 0x69, 0xBA, 0xED, 0x00, 0x2E, 0x44, 
   0x71, 0x26, 0x37, 0x77, 0x9F, 0xBC, 0x76, 0xA5, 0xDA, 0x84, 0xC3, 0xF4, 0x52, 0x50, 0x81, 0x00, 
   0x00, 0x10, 0x00, 0x10, 0x4E, 0x81, 0x9D, 0x77, 0xE3, 0xFA, 0xFB, 0xC6, 0xF5, 0xFF, 0x47, 0x81, 
   0x5E, 0x00, 0x00, 0x04, 0x1C, 0x00, 0x98, 0xCB, 0xB5, 0xBD, 0xA4, 0xE6, 0xAE, 0x30, 0x52, 0x8C, 
   0x00, 0x1E, 0x7B, 0x89, 0x7F, 0xD1, 0xFF, 0xC9, 0xF5, 0x56, 0x97, 0x72, 0x00, 0x1A, 0x00, 0x26, 
   0x18, 0x3F, 0x79, 0x70, 0xEB, 0x5A, 0x69, 0xFF, 0x78, 0x83, 0x88, 0x66, 0xA6, 0x69, 0x48, 0x92, 
   0xA5, 0x5D, 0x3F, 0x8F, 0x34, 0x43, 0x86, 0x3F, 0x54, 0xDD, 0x77, 0x9F, 0xD0, 0x4E, 0x76, 0x6B, 
   0x2A, 0x42, 0x67, 0x4B, 0x63, 0x99, 0x7C, 0xB5, 0xB4, 0xA3, 0xF7, 0xD0, 0x39, 0x3B, 0x99, 0x02, 
   0x00, 0x67, 0x50, 0x34, 0x48, 0x50, 0x90, 0x59, 0x0D, 0x6A, 0x90, 0x54, 0x2C, 0x9F, 0xC2, 0x77, 
   0xBC, 0x75, 0x99, 0x8E, 0x00, 0x1B, 0x3E, 0x1D, 0x1C, 0x9A, 0xA3, 0xA1, 0xCF, 0x57, 0x81, 0x85, 
   0x4D, 0x4F, 0x58, 0x7A, 0x7C, 0x93, 0x5C, 0x7B, 0xC8, 0x2C, 0x51, 0xD1, 0x36, 0x39, 0x5B, 0x47, 
   0x78, 0x46, 0x5E, 0x6C, 0x84, 0x58, 0x5E, 0x74, 0x3A, 0x5B, 0x93, 0x2E, 0x2D, 0x8F, 0x51, 0x3F, 
   0x7A, 0x68, 0x80, 0xB9, 0x77, 0xA2, 0xB0, 0x33, 0x71, 0x78, 0x00, 0x17, 0x30, 0x15, 0x11, 0x62, 
   0x51, 0x68, 0x8D, 0x5A, 0x76, 0xA0, 0x7D, 0x66, 0xB2, 0x6F, 0x70, 0x6C, 0x17, 0x62, 0x75, 0x1A, 
   0x21, 0x58, 0x48, 0x38, 0x92, 0x5B, 0x67, 0xBB, 0x50, 0x6E, 0x76, 0x49, 0x51, 0x53, 0x38, 0x45, 
   0x9C, 0x48, 0x5C, 0x8B, 0x37, 0x46, 0x5D, 0x26, 0x7F, 0x7F, 0x39, 0x57, 0x80, 0x68, 0x23, 0x86, 
   0x5D, 0x84, 0x81, 0x3F, 0x57, 0x8C, 0x5A, 0x3A, 0x80, 0x41, 0x6D, 0x74, 0x12, 0x5B, 0x8A, 0x23, 
   0x28, 0x73, 0x42, 0x5B, 0x68, 0x6B, 0x51, 0x85, 0x39, 0x64, 0x7C, 0x2E, 0x7B, 0x9B, 0x40, 0x52, 
   0xB2, 0x74, 0x57, 0xAF, 0x77, 0x56, 0x55, 0x02, 0x6B, 0x20, 0x00, 0x41, 0x66, 0x5F, 0x2A, 0xA3, 
   0xA0, 0x54, 0xC7, 0x28, 0x67, 0x87, 0x00, 0x68, 0x36, 0x73, 0x41, 0x8C, 0x8A, 0x63, 0xAF, 0x22, 
   0x6E, 0x8C, 0x36, 0x6C, 0x9F, 0x34, 0x47, 0x57, 0x1D, 0x18, 0x1D, 0x24, 0x3B, 0x7A, 0x76, 0x70, 
   0xAB, 0x72, 0x6D, 0x9B, 0x44, 0x57, 0x79, 0x31, 0x5C, 0x9A, 0x31, 0x5B, 0x71, 0x5A, 0x33, 0x48, 
   0x54, 0x4A, 0x87, 0x3D, 0x67, 0x8D, 0x26, 0x94, 0x76, 0x65, 0x3D, 0x7B, 0x43, 0x24, 0x59, 0x31, 
   0x30, 0x87, 0x37, 0x5A, 0xA9, 0x4E, 0x79, 0x53, 0x64, 0x89, 0x74, 0x45, 0x27, 0xAC, 0x00, 0x3C, 
   0x62, 0x1D, 0x69, 0x56, 0x69, 0x2B, 0x9A, 0x65, 0x60, 0x83, 0x37, 0x83, 0x4A, 0x25, 0x3F, 0x62, 
   0x4E, 0x3F, 0xA2, 0x65, 0x83, 0x98, 0x42, 0x60, 0x7C, 0x2A, 0x20, 0x7B, 0x24, 0x48, 0x7A, 0x4E, 
   0x65, 0x63, 0x8D, 0x77, 0x9C, 0x4E, 0x3E, 0x8A, 0x0D, 0x33, 0x5C, 0x45, 0x7D, 0x6D, 0x46, 0x78, 
   0x79, 0x3C, 0x22, 0x5E, 0x65, 0x4B, 0x93, 0x53, 0x8A, 0xA4, 0x2B, 0x5C, 0x8C, 0x3B, 0x34, 0x41, 
   0x31, 0x19, 0x52, 0x50, 0x93, 0x77, 0x78, 0xAF, 0xA7, 0x4A, 0x46, 0x91, 0x43, 0x06, 0x8B, 0x20, 
   0x3A, 0x6D, 0x21, 0x93, 0x56, 0x5C, 0x94, 0x79, 0x74, 0x6A, 0xA7, 0x3B, 0x40, 0x96, 0x24, 0x39, 
   0x62, 0x5D, 0x41, 0x36, 0x2B, 0x39, 0x7E, 0x4A, 0x75, 0xE3, 0x89, 0x88, 0xA0, 0x40, 0x61, 0x4F, 
   0x0D, 0x34, 0x66, 0x48, 0x48, 0xA7, 0x8A, 0xA2, 0xB0, 0x6E, 0xA9, 0x94, 0x50, 0x53, 0x79, 0x37, 
   0x4B, 0xA7, 0x30, 0x67, 0x91, 0x52, 0x77, 0xA7, 0x47, 0x49, 0xCB, 0x4D, 0x5A, 0x46, 0x4D, 0x6B, 
   0x2F, 0x37, 0x5C, 0xBA, 0x4F, 0x6E, 0xD3, 0x77, 0xA2, 0x7D, 0x5B, 0x68, 0x82, 0x39, 0x44, 0x66, 
   0x19, 0x2E, 0x86, 0x6C, 0x43, 0xBC, 0xAC, 0xC4, 0xBE, 0x8E, 0xBF, 0x9B, 0x50, 0x81, 0x9E, 0x17, 
   0x51, 0x89, 0x0F, 0x13, 0x6B, 0x06, 0x00, 0x4F, 0x34, 0x66, 0x87, 0xC8, 0xF5, 0xE0, 0xDE, 0xDE, 
   0xF7, 0x11, 0x44, 0x98, 0x00, 0x00, 0x5A, 0x20, 0x08, 0x37, 0xA6, 0xC4, 0x6F, 0x6F, 0xC2, 0xF6, 
   0x09, 0x56, 0xC5, 0x5F, 0x3D, 0x36, 0x5B, 0x32, 0x97, 0x42, 0x8A, 0xB5, 0xBA, 0xC5, 0x8A, 0x91, 
   0x86, 0xA2, 0x00, 0x39, 0xCF, 0x22, 0x55, 0xA5, 0xA8, 0x6D, 0x37, 0xA2, 0x8A, 0x5B, 0x3E, 0x79, 
   0xFD, 0x00, 0x56, 0xDB, 0x31, 0x5B, 0x67, 0x94, 0x79, 0x99, 0x42, 0x64, 0x99, 0x32, 0x5A, 0x78, 
   0x89, 0xA4, 0x9C, 0xB0, 0xA3, 0xC5, 0x2B, 0x5C, 0xBF, 0x22, 0x3E, 0x9A, 0x6B, 0x81, 0x6A, 0x54, 
   0x5F, 0x8B, 0x54, 0x54, 0xC3, 0x28, 0x77, 0x8E, 0x5D, 0x72, 0x5B, 0xC4, 0x83, 0xA5, 0x56, 0x81, 
   0xEF, 0x00, 0x35, 0x65, 0x25, 0x61, 0x47, 0x77, 0x72, 0xCF, 0x79, 0x34, 0xBE, 0x57, 0x5E, 0x41, 
   0x5B, 0x88, 0x7C, 0x60, 0x90, 0xB9, 0x3D, 0x73, 0xB6, 0x37, 0x67, 0xB1, 0x65, 0x88, 0x9E, 0x4F, 
   0x49, 0x64, 0x23, 0x22, 0x81, 0x48, 0x96, 0x94, 0x95, 0xB5, 0xAD, 0xB0, 0x5A, 0xFF, 0x4C, 0x6F, 
   0x9B, 0x30, 0x9F, 0x2B, 0x3E, 0x5E, 0x79, 0x49, 0x2E, 0xE4, 0x39, 0x60, 0x6C, 0x35, 0x4C, 0x07, 
   0x6C, 0x62, 0x90, 0x85, 0xAE, 0xFF, 0x79, 0xC4, 0xFF, 0x39, 0x3F, 0x87, 0x34, 0x05, 0x12, 0x62, 
   0xA5, 0x84, 0x89, 0xDD, 0xFF, 0x5F, 0x3F, 0x9D, 0x23, 0x00, 0x00, 0x18, 0x4A, 0x57, 0x64, 0xB5, 
   0xFF, 0xA9, 0xAB, 0x85, 0x10, 0x0D, 0x65, 0x00, 0x3E, 0xBD, 0xA3, 0xC0, 0xB4, 0xFF, 0xD8, 0xB4, 
   0x59, 0x9B, 0xC2, 0x1A, 0x35, 0x81, 0x43, 0x1B, 0x6E, 0x3C, 0x65, 0xA2, 0x3C, 0xBB, 0xEA, 0x69, 
   0x85, 0xB8, 0x4C, 0x17, 0x00, 0x0B, 0x13, 0x4B, 0x4A, 0x4F, 0xD3, 0xC0, 0xFF, 0xC8, 0xD5, 0xFF, 
   0xDF, 0x57, 0x13, 0xC4, 0x00, 0x00, 0x1A, 0x00, 0x5A, 0x4C, 0xA7, 0x3B, 0xAA, 0xA4, 0x5B, 0xA3, 
   0x2E, 0xC5, 0xB6, 0x56, 0x94, 0xD8, 0xCD, 0x96, 0xA7, 0x7E, 0x90, 0xA1, 0x06, 0x41, 0x41, 0x00, 
   0x00, 0x14, 0x39, 0x4D, 0x9D, 0x8C, 0xCE, 0xFF, 0x77, 0x54, 0xAF, 0x3E, 0x4F, 0x69, 0x49, 0xBB, 
   0x73, 0x87, 0x80, 0xA1, 0x80, 0x32, 0xA2, 0x22, 0x5D, 0xA7, 0x1A, 0x3C, 0xB1, 0x64, 0x98, 0xA9, 
   0x6F, 0xB4, 0x67, 0x19, 0x00, 0x87, 0x88, 0x90, 0xA7, 0xBA, 0xBC, 0xC3, 0x2D, 0x62, 0x97, 0x0B, 
   0x07, 0x4E, 0x10, 0x11, 0x25, 0x3A, 0x5E, 0x56, 0x88, 0x8F, 0xB7, 0x95, 0x90, 0xF8, 0x4A, 0x45, 
   0xA2, 0x4E, 0x66, 0x50, 0x62, 0x81, 0x6A, 0x00, 0x30, 0x81, 0x14, 0x0F, 0x61, 0xA5, 0x79, 0xA3, 
   0x80, 0xAF, 0xBC, 0x3B, 0x71, 0x94, 0x60, 0x58, 0x92, 0x43, 0x45, 0x95, 0x31, 0x40, 0x80, 0x65, 
   0x85, 0x3A, 0x54, 0x95, 0x47, 0x4E, 0x65, 0xBC, 0x7A, 0x46, 0xDB, 0x35, 0x5B, 0xA6, 0x4B, 0x33, 
   0x54, 0x5B, 0x68, 0x5A, 0x60, 0x96, 0xCC, 0x4C, 0x72, 0xB4, 0x3E, 0x3B, 0x61, 0x04, 0x1D, 0x36, 
   0x1C, 0x50, 0x64, 0x85, 0x63, 0xAA, 0x6F, 0x5E, 0x9A, 0x13, 0x70, 0x66, 0x46, 0x64, 0x83, 0x6D, 
   0x57, 0xB5, 0x45, 0x61, 0x7B, 0x32, 0x33, 0x58, 0x2C, 0x3F, 0x64, 0x38, 0x73, 0x93, 0x60, 0x58, 
   0x9F, 0x3E, 0x4D, 0x98, 0x43, 0x7A, 0x5D, 0x3C, 0x5C, 0x56, 0x2C, 0x28, 0x90, 0x39, 0x3F, 0x9D, 
   0x6D, 0x63, 0x81, 0x56, 0x86, 0x75, 0x48, 0x63, 0x85, 0x1E, 0x39, 0x7F, 0x0C, 0x4F, 0x68, 0x4D, 
   0x3F, 0x69, 0x71, 0x51, 0xA3, 0x44, 0x69, 0x7C, 0x0C, 0x5F, 0x72, 0x47, 0x5F, 0x90, 0xB9, 0x6F, 
   0xBD, 0x4A, 0x39, 0xA8, 0x00, 0x3D, 0x32, 0x2A, 0x48, 0x1A, 0x6A, 0x64, 0x89, 0x66, 0x59, 0xCA, 
   0x2D, 0x49, 0x82, 0x38, 0x4A, 0x82, 0x49, 0x62, 0x98, 0x2F, 0x68, 0x64, 0x6E, 0x58, 0x81, 0x83, 
   0x79, 0xC9, 0x2B, 0x5A, 0x82, 0x06, 0x36, 0x41, 0x17, 0x30, 0x57, 0x3C, 0x48, 0x6A, 0x72, 0x66, 
   0x9B, 0x5C, 0x79, 0xA3, 0x3E, 0x57, 0xA7, 0x31, 0x4B, 0x7D, 0x42, 0x4B, 0x47, 0x37, 0x72, 0x74, 
   0x31, 0x4F, 0x7B, 0x53, 0x48, 0x81, 0x3C, 0x2B, 0x81, 0x21, 0x49, 0x71, 0x55, 0x78, 0x8E, 0x78, 
   0x62, 0x9A, 0x4F, 0x6C, 0x7D, 0x35, 0x53, 0x91, 0x16, 0x19, 0x50, 0x21, 0x47, 0x50, 0x29, 0x76, 
   0x95, 0x5E, 0x44, 0x90, 0x65, 0x66, 0x6D, 0x37, 0x55, 0x71, 0x20, 0x33, 0x44, 0x53, 0x61, 0x85, 
   0x5A, 0x7D, 0xA9, 0x32, 0x4A, 0x7C, 0x53, 0x3E, 0x7B, 0x4C, 0x70, 0x7A, 0x12, 0x37, 0x63, 0x1E, 
   0x32, 0x69, 0x53, 0x66, 0xA3, 0x71, 0x89, 0x92, 0x64, 0x66, 0x73, 0x0C, 0x1B, 0x4F, 0x06, 0x37, 
   0x4B, 0x2F, 0x5B, 0xA9, 0x5A, 0x74, 0x9A, 0x6C, 0x7B, 0x7E, 0x66, 0x4D, 0x8D, 0x30, 0x51, 0x6F, 
   0x07, 0x66, 0x41, 0x0E, 0x00, 0x54, 0x51, 0x2B, 0x97, 0xC4, 0xD8, 0xE8, 0x5B, 0x9E, 0x96, 0x00, 
   0x06, 0x26, 0x00, 0x00, 0x43, 0x51, 0x59, 0x90, 0x94, 0xDA, 0xC1, 0xA0, 0xA0, 0xD3, 0x5E, 0x2A, 
   0x70, 0x00, 0x00, 0x2A, 0x00, 0x2A, 0x6A, 0x5F, 0x62, 0x74, 0xB3, 0xC7, 0xCF, 0x7A, 0x83, 0xFF, 
   0x06, 0x00, 0x83, 0x06, 0x2F, 0x0F, 0x70, 0xB7, 0x72, 0x8A, 0x98, 0xB5, 0x57, 0x49, 0x92, 0x56, 
   0x87, 0xB6, 0x5A, 0xAE, 0xDC, 0x24, 0x4A, 0x83, 0x1E, 0x15, 0x3B, 0x46, 0x54, 0x5D, 0x59, 0x84, 
   0xB4, 0x70, 0xA7, 0xC7, 0x42, 0x67, 0x82, 0x1A, 0x31, 0x64, 0x6A, 0x52, 0x92, 0x54, 0x38, 0x88, 
   0x12, 0x4D, 0x58, 0x5A, 0xA7, 0xA0, 0xBD, 0xB9, 0xF2, 0x70, 0x84, 0xB2, 0x10, 0x4C, 0x6A, 0x1E, 
   0x59, 0x6D, 0x4B, 0x56, 0x83, 0x63, 0x3E, 0x8F, 0x2C, 0x2E, 0x7A, 0x2F, 0x44, 0x9E, 0x98, 0xAF, 
   0xAB, 0xAE, 0xD2, 0xB0, 0x28, 0x68, 0x81, 0x0A, 0x20, 0x8B, 0x44, 0x2C, 0x8B, 0x8A, 0x7F, 0x76, 
   0x5D, 0x92, 0xC2, 0x19, 0x5F, 0xAC, 0x58, 0x36, 0x47, 0x71, 0x55, 0x9E, 0x2B, 0x7B, 0xBF, 0x51, 
   0x9A, 0xA5, 0xB4, 0xC2, 0xDE, 0xC9, 0x69, 0xCB, 0x51, 0x32, 0x6C, 0x00, 0x47, 0x41, 0x00, 0x5F, 
   0x76, 0x6E, 0x72, 0xCE, 0x8E, 0x85, 0xE0, 0x56, 0x7F, 0x8E, 0x3F, 0x5C, 0x58, 0x1E, 0x40, 0x86, 
   0x65, 0x74, 0xA0, 0xB7, 0x9E, 0xCB, 0x7D, 0x7C, 0xCB, 0x09, 0x64, 0x6F, 0x51, 0x68, 0x95, 0x94, 
   0x9A, 0xF4, 0x54, 0x75, 0xA0, 0x19, 0x28, 0x2A, 0x35, 0x3A, 0x5C, 0x59, 0x76, 0xA9, 0x50, 0xA6, 
   0xAC, 0x85, 0xA5, 0xC8, 0xA6, 0x57, 0xA3, 0x1B, 0x1B, 0x56, 0x00, 0x4F, 0x65, 0x82, 0x79, 0x7D, 
   0x84, 0x7C, 0x70, 0x3A, 0x68, 0x9C, 0x3A, 0x7B, 0xBE, 0xB6, 0xC3, 0xF2, 0x6F, 0x5A, 0xD2, 0x00, 
   0x0F, 0x44, 0x00, 0x82, 0x00, 0xBB, 0x69, 0x99, 0xE0, 0x94, 0xFF, 0x5B, 0xC6, 0xF7, 0x2D, 0x6E, 
   0x13, 0x29, 0x26, 0x4F, 0x4A, 0x79, 0xEE, 0x61, 0x84, 0xC4, 0x55, 0x3A, 0x43, 0x22, 0x5C, 0x2B, 
   0x0E, 0x58, 0x74, 0x7E, 0x50, 0xAF, 0xB4, 0xC4, 0xFF, 0x63, 0xA8, 0xD5, 0x16, 0x34, 0x60, 0x21, 
   0x3E, 0x7F, 0x89, 0xA4, 0xC6, 0xAA, 0xA2, 0x86, 0x13, 0x1C, 0x68, 0x00, 0x06, 0x8B, 0x86, 0xA9, 
   0x83, 0xC0, 0xBD, 0xE0, 0x09, 0x5C, 0xA2, 0x00, 0x03, 0x14, 0x84, 0x69, 0x84, 0xFF, 0xFF, 0xFF, 
   0xB0, 0xDB, 0xF1, 0x3C, 0x1D, 0x57, 0x00, 0x00, 0x42, 0x00, 0x24, 0x6A, 0x7B, 0x95, 0xC2, 0xB6, 
   0xFF, 0xD3, 0x60, 0x6B, 0xAE, 0x09, 0x00, 0x66, 0x1D, 0x30, 0x06, 0x66, 0x8C, 0x72, 0xB9, 0xB4, 
   0xFF, 0xC7, 0xFF, 0xFF, 0x27, 0x83, 0x83, 0x00, 0x00, 0x12, 0x00, 0x00, 0x46, 0x93, 0x97, 0xDA, 
   0xFF, 0xC5, 0xE9, 0x71, 0xDC, 0xA9, 0x00, 0x55, 0x73, 0x66, 0x11, 0x93, 0xD2, 0x5F, 0xB8, 0x25, 
   0x87, 0x93, 0x17, 0x37, 0x32, 0x50, 0x3D, 0x51, 0x52, 0x9A, 0xDE, 0x64, 0x80, 0xE7, 0x6B, 0x42, 
   0x6F, 0x65, 0xB3, 0x96, 0x75, 0x8E, 0xCD, 0x55, 0x19, 0x6A, 0x2B, 0x50, 0x64, 0x3B, 0x79, 0xA8, 
   0x64, 0x52, 0xC2, 0x53, 0x7B, 0x22, 0x49, 0x49, 0x85, 0x44, 0x38, 0x8A, 0x8C, 0x83, 0x89, 0x51, 
   0x8E, 0x61, 0x00, 0x42, 0x57, 0x36, 0x1B, 0x8D, 0xA4, 0x89, 0xC4, 0x6B, 0xA2, 0xA8, 0x15, 0x68, 
   0x63, 0x31, 0x44, 0xAC, 0x7C, 0x76, 0x9F, 0x7B, 0x74, 0x4E, 0x02, 0x07, 0x44, 0x25, 0x37, 0x9D, 
   0x93, 0xAC, 0xDF, 0x66, 0x86, 0xC7, 0x10, 0x36, 0x68, 0x66, 0x52, 0x31, 0x55, 0x8B, 0x80, 0x39, 
   0x58, 0x88, 0x71, 0x67, 0x8A, 0x53, 0x77, 0x9C, 0x2B, 0x4D, 0xAD, 0x73, 0x5D, 0x94, 0x44, 0x6C, 
   0x6F, 0x20, 0x54, 0x62, 0x2B, 0x3D, 0x58, 0x59, 0x60, 0xAF, 0x7B, 0x94, 0xDD, 0x52, 0x70, 0x74, 
   0x1C, 0x23, 0x65, 0x3D, 0x2D, 0x75, 0x2D, 0x5B, 0x59, 0x34, 0x5D, 0x9A, 0x6F, 0x6A, 0xAC, 0x64, 
   0x7B, 0x94, 0x5D, 0x57, 0x6F, 0x2D, 0x38, 0x41, 0x15, 0x2D, 0x7C, 0x43, 0x51, 0xB7, 0x50, 0x7B, 
   0x9B, 0x67, 0x75, 0x71, 0x44, 0x63, 0x97, 0x31, 0x34, 0x68, 0x3C, 0x44, 0x62, 0x2C, 0x72, 0xA2, 
   0x49, 0x46, 0x8C, 0x88, 0x69, 0x75, 0x2C, 0x7F, 0x8B, 0x0E, 0x2E, 0x74, 0x3C, 0x34, 0x63, 0x54, 
   0x73, 0x98, 0x49, 0x69, 0x88, 0x11, 0x48, 0x7E, 0x52, 0x76, 0xAC, 0x97, 0x65, 0x94, 0x51, 0x6F, 
   0x81, 0x15, 0x61, 0x52, 0x14, 0x26, 0x79, 0x31, 0x36, 0xAD, 0x8D, 0x54, 0x7F, 0x43, 0x77, 0x56, 
   0x00, 0x55, 0x5D, 0x4E, 0x38, 0x9D, 0x5B, 0x44, 0xBB, 0x45, 0x62, 0x7B, 0x4A, 0x7E, 0x84, 0x60, 
   0x4A, 0x60, 0x4E, 0x2C, 0x5A, 0x09, 0x5A, 0x82, 0x37, 0x66, 0x89, 0x76, 0x61, 0x5C, 0x22, 0x3F, 
   0x79, 0x44, 0x5B, 0xB2, 0x60, 0x72, 0x95, 0x38, 0x40, 0x54, 0x37, 0x57, 0x64, 0x42, 0x73, 0x8B, 
   0x42, 0x77, 0x64, 0x3C, 0x0E, 0x80, 0x37, 0x13, 0x65, 0x32, 0x61, 0x72, 0x3A, 0x87, 0xA1, 0x84, 
   0xAE, 0x9B, 0x71, 0x5A, 0x82, 0x12, 0x0C, 0x7F, 0x04, 0x10, 0x5B, 0x0B, 0x5D, 0x56, 0x80, 0x4A, 
   0x90, 0x8D, 0x85, 0xA7, 0x26, 0x85, 0x62, 0x20, 0x39, 0x4B, 0x59, 0x38, 0x95, 0x43, 0x71, 0x8B, 
   0x38, 0x55, 0x5E, 0x5A, 0x3E, 0x91, 0x4E, 0x55, 0x74, 0x36, 0x61, 0x5D, 0x4B, 0x6C, 0x6F, 0x1D, 
   0x3E, 0x92, 0x13, 0x2D, 0x7C, 0x5E, 0x72, 0x8C, 0x70, 0x88, 0x9C, 0x3B, 0x20, 0x45, 0x23, 0x1B, 
   0x5C, 0x35, 0x78, 0x87, 0x37, 0x74, 0xA5, 0x55, 0x37, 0x7E, 0x6C, 0x70, 0x77, 0x48, 0x91, 0x88, 
   0x0D, 0x44, 0x6B, 0x1F, 0x15, 0x72, 0x54, 0x29, 0x8F, 0x61, 0x88, 0xA1, 0x60, 0xD8, 0x8E, 0x2C, 
   0x46, 0x54, 0x0A, 0x00, 0x60, 0x3A, 0x29, 0x84, 0x7C, 0x99, 0x8D, 0xA6, 0xA1, 0x79, 0x59, 0x60, 
   0xAC, 0x00, 0x30, 0xAA, 0x1B, 0x30, 0x31, 0x40, 0x54, 0x21, 0x4A, 0x57, 0xAF, 0x73, 0x5A, 0xF7, 
   0x72, 0x84, 0xA6, 0x05, 0x57, 0x3C, 0x06, 0x2B, 0x15, 0x53, 0x61, 0x91, 0x7F, 0xA9, 0xED, 0x91, 
   0x9A, 0xC7, 0x6D, 0x6B, 0xB9, 0x2C, 0x62, 0x60, 0x3B, 0x4A, 0x14, 0x3B, 0x56, 0xAF, 0x69, 0x79, 
   0xE3, 0x64, 0xAC, 0x82, 0x36, 0x6A, 0x5E, 0x4C, 0x29, 0x80, 0x30, 0x13, 0x82, 0x2D, 0x56, 0x95, 
   0x7F, 0xCD, 0x9D, 0x6F, 0xBE, 0x8D, 0x41, 0x4F, 0x8E, 0x51, 0x47, 0xD2, 0x50, 0x73, 0x98, 0x44, 
   0x51, 0x64, 0x49, 0x83, 0x8B, 0x76, 0x9D, 0xB3, 0x5D, 0x2D, 0xA6, 0x00, 0x00, 0x44, 0x04, 0x32, 
   0x51, 0x8C, 0xDE, 0xB6, 0xD7, 0xF6, 0xD5, 0x52, 0x74, 0xC9, 0x00, 0x00, 0x81, 0x2C, 0x19, 0x3A, 
   0x8E, 0xA6, 0x5D, 0x5C, 0x9E, 0xC7, 0x28, 0x70, 0xAE, 0x40, 0x32, 0x44, 0x18, 0x2F, 0xBF, 0x54, 
   0xA0, 0xE9, 0xFF, 0xD0, 0x8F, 0xD7, 0xB0, 0xA5, 0x00, 0x3E, 0xFF, 0x00, 0x01, 0x98, 0x21, 0x3B, 
   0x02, 0x80, 0xA5, 0x91, 0x93, 0x96, 0xFF, 0x2D, 0x7A, 0x9F, 0x55, 0x67, 0x64, 0x77, 0x77, 0x75, 
   0x29, 0x33, 0xAF, 0x2C, 0x58, 0xA6, 0x95, 0xAB, 0x7B, 0xA6, 0xAC, 0xCC, 0x49, 0x6B, 0xDC, 0x35, 
   0x7E, 0xA5, 0x59, 0x6E, 0x5B, 0x5C, 0x26, 0x6E, 0x26, 0x2C, 0x8F, 0x00, 0x5D, 0x68, 0x77, 0x9A, 
   0x7D, 0xD0, 0xC2, 0xF6, 0x86, 0x76, 0xE8, 0x2C, 0x23, 0x44, 0x24, 0x60, 0x37, 0x25, 0x5C, 0xB6, 
   0x61, 0x48, 0xA3, 0x75, 0x7E, 0x63, 0x9D, 0xB8, 0xD3, 0x66, 0x5C, 0xEB, 0x0E, 0x3E, 0x92, 0x13, 
   0x70, 0x67, 0x6C, 0x5B, 0x5C, 0x92, 0x68, 0xAE, 0x5F, 0x7B, 0xD7, 0x63, 0x91, 0x6C, 0x5A, 0x8E, 
   0x9E, 0x41, 0x2A, 0xDC, 0x3B, 0x40, 0x95, 0x6D, 0x97, 0x5E, 0x5C, 0x80, 0x9B, 0x28, 0x46, 0x9F, 
   0x2F, 0x5C, 0x61, 0x4E, 0x57, 0x5D, 0x6E, 0x28, 0x7A, 0x91, 0xB9, 0xDB, 0x62, 0xE1, 0xFF, 0x27, 
   0x38, 0xA2, 0x59, 0x08, 0x00, 0x5A, 0x86, 0x74, 0x71, 0xBB, 0xFF, 0x76, 0x64, 0x89, 0x30, 0x25, 
   0x55, 0x00, 0x32, 0xB7, 0x6C, 0xA7, 0xB2, 0xA7, 0x9E, 0x7A, 0x2B, 0x5A, 0x92, 0x1B, 0x5F, 0xB0, 
   0xCD, 0xA9, 0xC6, 0x98, 0xA0, 0xA6, 0x06, 0x14, 0x59, 0x1F, 0x2A, 0x79, 0x5F, 0x83, 0x5E, 0x6C, 
   0x92, 0xB1, 0x66, 0xC4, 0xFF, 0x5A, 0x92, 0x7B, 0x42, 0x00, 0x05, 0x0A, 0x00, 0x77, 0x58, 0x8A, 
   0x82, 0xAB, 0xFF, 0xED, 0xBA, 0xC2, 0xFE, 0x33, 0x43, 0x66, 0x00, 0x00, 0x3B, 0x66, 0x49, 0x92, 
   0xE6, 0xA7, 0xCD, 0x67, 0x9D, 0x9A, 0x00, 0x57, 0x72, 0x10, 0x18, 0x95, 0x8A, 0x74, 0xD9, 0xD9, 
   0xE0, 0xCF, 0x41, 0x77, 0x4D, 0x00, 0x00, 0x13, 0x3D, 0x52, 0x6D, 0x73, 0x88, 0xEA, 0x69, 0x61, 
   0xF8, 0x52, 0x73, 0xA1, 0x4B, 0x83, 0x64, 0x77, 0x75, 0x72, 0x59, 0x44, 0x8F, 0x1F, 0x15, 0x9B, 
   0x25, 0x1E, 0x90, 0x92, 0xF2, 0x90, 0x27, 0x31, 0x68, 0x11, 0x0B, 0x57, 0x4C, 0x5F, 0x55, 0x6A, 
   0xB8, 0x87, 0x54, 0x86, 0xCF, 0x70, 0x4B, 0xB3, 0x3B, 0x1D, 0x7F, 0x13, 0x79, 0x51, 0x58, 0x95, 
   0xA1, 0x5A, 0x61, 0xB2, 0x45, 0x37, 0x8A, 0x89, 0x53, 0x61, 0x75, 0x85, 0x8A, 0x07, 0x47, 0x91, 
   0x00, 0x1A, 0xA3, 0x6E, 0x6C, 0xA2, 0x5A, 0x75, 0x83, 0x4B, 0x82, 0x5A, 0x7F, 0x81, 0x4A, 0x61, 
   0x6E, 0xCA, 0x32, 0x28, 0xD7, 0x42, 0x5A, 0x8C, 0x58, 0x82, 0x55, 0x57, 0x6A, 0x80, 0x5A, 0x6C, 
   0xAC, 0x2B, 0x30, 0x6D, 0x31, 0x0D, 0x4B, 0x49, 0x48, 0x6A, 0x56, 0x95, 0xD4, 0x93, 0x95, 0xEA, 
   0x61, 0x59, 0x6E, 0x00, 0x28, 0x1A, 0x02, 0x10, 0x5E, 0x72, 0x39, 0x9F, 0x6F, 0x8B, 0xBD, 0x4D, 
   0x75, 0x83, 0x52, 0x58, 0x4E, 0x3A, 0x3A, 0x7C, 0x3E, 0x5C, 0xA0, 0x2D, 0x46, 0x95, 0x49, 0x6F, 
   0x89, 0x50, 0x7A, 0x7D, 0x55, 0x35, 0x82, 0x32, 0x4B, 0x85, 0x48, 0x6D, 0x6D, 0x4D, 0x40, 0x51, 
   0x2A, 0x62, 0x96, 0x1F, 0x5C, 0xA2, 0x43, 0x4C, 0x5E, 0x5C, 0x68, 0x75, 0x6D, 0x58, 0x92, 0x4A, 
   0x47, 0x88, 0x0C, 0x53, 0x62, 0x40, 0x65, 0xA7, 0x9C, 0x70, 0xB7, 0x56, 0x52, 0x81, 0x00, 0x57, 
   0x2F, 0x15, 0x5B, 0x52, 0x7D, 0x55, 0xB0, 0x5B, 0x49, 0xDE, 0x21, 0x49, 0x75, 0x20, 0x55, 0x28, 
   0x64, 0x66, 0x77, 0x26, 0x61, 0x7F, 0x4F, 0x4A, 0x86, 0x71, 0x4F, 0xC4, 0x1A, 0x5A, 0x6C, 0x09, 
   0x2C, 0x31, 0x49, 0x33, 0x66, 0x84, 0x73, 0xA8, 0x5D, 0x6F, 0xA5, 0x2E, 0x5D, 0x8D, 0x43, 0x5B, 
   0x84, 0x21, 0x2C, 0x54, 0x49, 0x38, 0x65, 0x6B, 0x7E, 0x93, 0x3D, 0x68, 0x93, 0x3C, 0x67, 0x65, 
   0x47, 0x55, 0x80, 0x37, 0x48, 0x59, 0x2D, 0x32, 0x6B, 0x61, 0x57, 0x9A, 0x61, 0x92, 0x7F, 0x3E, 
   0x96, 0x9A, 0x3C, 0x32, 0x81, 0x40, 0x1D, 0x3B, 0x0C, 0x2E, 0x79, 0x46, 0x3C, 0x95, 0x59, 0x61, 
   0x62, 0x31, 0x7F, 0x67, 0x37, 0x58, 0x85, 0x53, 0x57, 0x8B, 0x48, 0x66, 0x7B, 0x48, 0x49, 0x86, 
   0x43, 0x2C, 0x7F, 0x48, 0x5A, 0x51, 0x37, 0x5B, 0x85, 0x47, 0x4B, 0x7B, 0x3B, 0x62, 0x87, 0x35, 
   0x62, 0x81, 0x45, 0x61, 0x7B, 0x18, 0x43, 0x6F, 0x36, 0x43, 0x5E, 0x70, 0x77, 0x9D, 0x4E, 0x66, 
   0x80, 0x2B, 0x39, 0x5E, 0x30, 0x57, 0x7C, 0x4E, 0x69, 0x99, 0x44, 0x7B, 0x5C, 0x55, 0x63, 0x79, 
   0x49, 0x29, 0xA7, 0x53, 0x50, 0xB1, 0x41, 0x78, 0x6A, 0x08, 0x29, 0x3B, 0x1B, 0x30, 0x4E, 0x96, 
   0x9E, 0xB7, 0x80, 0x92, 0xB8, 0x12, 0x18, 0x4B, 0x0C, 0x01, 0x41, 0x3B, 0x65, 0x94, 0x59, 0x96, 
   0xC4, 0x7B, 0x80, 0xBF, 0x4C, 0x67, 0x67, 0x12, 0x31, 0x65, 0x24, 0x00, 0x61, 0x4E, 0x5F, 0x59, 
   0x84, 0xDA, 0xBC, 0x6D, 0x7A, 0xC3, 0x0B, 0x01, 0x5C, 0x0C, 0x2B, 0x3B, 0x65, 0xB1, 0xCC, 0x84, 
   0x9D, 0xDF, 0x4C, 0x59, 0x62, 0x51, 0x59, 0x6E, 0x60, 0x87, 0xE0, 0x42, 0x86, 0x9B, 0x35, 0x6C, 
   0x65, 0x3A, 0x47, 0x80, 0x68, 0x57, 0x80, 0x3B, 0x4C, 0x81, 0x20, 0x32, 0x7D, 0x60, 0x97, 0xA8, 
   0x8F, 0xB0, 0xC5, 0x72, 0x7B, 0xA2, 0x0A, 0x3A, 0x57, 0x1B, 0x3E, 0x63, 0x84, 0x46, 0xB5, 0x7B, 
   0x98, 0xB7, 0x58, 0xA9, 0xAB, 0x60, 0x73, 0x9D, 0x35, 0x63, 0x78, 0x33, 0x2D, 0x70, 0x07, 0x13, 
   0x61, 0x33, 0x56, 0x71, 0x9E, 0xBC, 0xE7, 0xBB, 0xBC, 0xE8, 0x3F, 0x6C, 0x8F, 0x00, 0x00, 0x85, 
   0x42, 0x31, 0x34, 0x98, 0xC4, 0x71, 0x32, 0x88, 0xE8, 0x00, 0x4B, 0xB7, 0x58, 0x6E, 0x7F, 0xE1, 
   0x6A, 0x9D, 0x8E, 0x89, 0xAA, 0x68, 0xB0, 0xBB, 0x4C, 0x85, 0xA9, 0x26, 0x3D, 0x9B, 0x40, 0x47, 
   0xB3, 0x40, 0x5F, 0x3F, 0x3C, 0x83, 0x46, 0x7B, 0x84, 0xE8, 0x65, 0x78, 0xD8, 0x37, 0x6B, 0x9D, 
   0x49, 0x3D, 0x5D, 0x35, 0x45, 0x64, 0x50, 0x7D, 0xA7, 0xB9, 0xB2, 0xE8, 0x9B, 0xB0, 0xE7, 0x37, 
   0x51, 0x61, 0x4E, 0x3C, 0x68, 0x61, 0x60, 0xBA, 0x0B, 0x4F, 0x7A, 0x39, 0x50, 0x57, 0x58, 0x7F, 
   0xB8, 0x66, 0x54, 0xAE, 0x62, 0x93, 0x7B, 0x83, 0x98, 0x95, 0x64, 0x57, 0x8F, 0x03, 0x2F, 0x51, 
   0x11, 0x5E, 0x9E, 0xD5, 0xA4, 0xC8, 0xA1, 0x6C, 0x8B, 0x00, 0x4F, 0x9B, 0x1B, 0x78, 0x6E, 0x9F, 
   0x79, 0x87, 0x84, 0x68, 0xFF, 0x33, 0x79, 0x9A, 0x26, 0x83, 0x00, 0x59, 0x37, 0x7F, 0x5A, 0x58, 
   0xFF, 0x5A, 0x9C, 0xEF, 0x6A, 0x31, 0x4C, 0x24, 0x5F, 0x4F, 0x4B, 0x9D, 0xC0, 0x85, 0x85, 0xC4, 
   0x5E, 0x3F, 0x88, 0x2A, 0x50, 0x0A, 0x26, 0x4C, 0x42, 0x67, 0x78, 0xF3, 0xA7, 0xB8, 0xFF, 0x7C, 
   0x9A, 0x8C, 0x00, 0x0F, 0x38, 0x0F, 0x10, 0x70, 0xB1, 0xD9, 0x95, 0xBC, 0xC2, 0xCF, 0x00, 0x1B, 
   0xA5, 0x00, 0x0F, 0x27, 0x9B, 0x7E, 0x6D, 0xD5, 0xF2, 0xFF, 0x43, 0x89, 0xBD, 0x00, 0x00, 0x2C, 
   0x0F, 0x2A, 0x6A, 0xA8, 0xBD, 0xDE, 0xC1, 0xBF, 0xD2, 0x5D, 0x5C, 0x4D, 0x20, 0x27, 0x62, 0x14, 
   0x3F, 0xAD, 0x4F, 0xAD, 0x7E, 0xB1, 0xE5, 0xF0, 0x59, 0x41, 0xEC, 0x18, 0x00, 0x20, 0x00, 0x2C, 
   0x1F, 0x4B, 0x33, 0x7A, 0xA5, 0xCE, 0xD0, 0xCE, 0xFF, 0xFF, 0x73, 0x79, 0xAB, 0x00, 0x00, 0x34, 
   0x00, 0x0A, 0x43, 0x5C, 0x29, 0xAC, 0xA3, 0x72, 0x9F, 0x4A, 0xBF, 0xB8, 0x29, 0x70, 0xB1, 0xA0, 
   0x58, 0x97, 0x99, 0xA5, 0xA5, 0x1D, 0x6F, 0x80, 0x1A, 0x07, 0x1F, 0x3C, 0x5C, 0x67, 0x5F, 0x9C, 
   0xFF, 0x54, 0x31, 0xCC, 0x43, 0x6B, 0x46, 0x48, 0xC5, 0x77, 0x4E, 0x57, 0xA9, 0x4E, 0x06, 0x71, 
   0x4E, 0x7E, 0x63, 0x48, 0x9D, 0xFF, 0x3C, 0x3C, 0x54, 0x31, 0x26, 0x28, 0x0C, 0x35, 0x78, 0x6B, 
   0x63, 0xBD, 0xC8, 0xC1, 0xEE, 0x4F, 0x98, 0xB4, 0x00, 0x3A, 0x40, 0x28, 0x33, 0x77, 0x58, 0x55, 
   0xAB, 0x6B, 0x8E, 0x6D, 0x67, 0x55, 0x7A, 0x3F, 0x43, 0xAF, 0x71, 0x7B, 0xB4, 0x73, 0x8B, 0xA1, 
   0x00, 0x00, 0x49, 0x00, 0x09, 0x54, 0x80, 0xCA, 0xA0, 0x8A, 0xB6, 0xA2, 0x52, 0x43, 0x92, 0x5C, 
   0x4C, 0x83, 0x49, 0x5B, 0xAA, 0x37, 0x44, 0xB3, 0x6E, 0x77, 0x6B, 0x3F, 0x86, 0x57, 0x27, 0x3F, 
   0x6D, 0x54, 0x37, 0x95, 0x49, 0x52, 0x7F, 0x33, 0x59, 0x53, 0x66, 0x49, 0x83, 0x7C, 0x7E, 0xDF, 
   0x3B, 0x89, 0x9F, 0x26, 0x59, 0x57, 0x09, 0x2E, 0x60, 0x3D, 0x4F, 0x92, 0x67, 0x56, 0x70, 0x46, 
   0x51, 0x77, 0x30, 0x5E, 0x84, 0x5E, 0x65, 0x9C, 0x69, 0x70, 0xAC, 0x45, 0x58, 0x5B, 0x16, 0x40, 
   0x61, 0x38, 0x2E, 0xB1, 0x5B, 0x62, 0x9A, 0x55, 0x68, 0x76, 0x54, 0x4C, 0x90, 0x41, 0x62, 0x5C, 
   0x22, 0x61, 0x67, 0x00, 0x28, 0x7F, 0x4F, 0x45, 0x86, 0x9C, 0x64, 0x7C, 0x53, 0x7C, 0x7D, 0x0E, 
   0x54, 0x73, 0x47, 0x5F, 0xA7, 0x85, 0x7B, 0x9B, 0x56, 0x3B, 0x8D, 0x00, 0x50, 0x52, 0x15, 0x44, 
   0x52, 0x55, 0x39, 0x92, 0x79, 0x84, 0xB6, 0x5C, 0x62, 0x72, 0x10, 0x44, 0x7C, 0x31, 0x3E, 0xA2, 
   0x48, 0x4A, 0x5C, 0x4E, 0x78, 0x5B, 0x31, 0x66, 0x99, 0x3C, 0x49, 0x6C, 0x3B, 0x32, 0x7D, 0x03, 
   0x4F, 0x5B, 0x2E, 0x73, 0x62, 0x91, 0x59, 0x9F, 0x81, 0x65, 0xCA, 0x29, 0x7B, 0xBD, 0x2D, 0x5C, 
   0x7F, 0x43, 0x27, 0x25, 0x3D, 0x2C, 0x58, 0x38, 0x78, 0x9E, 0x5F, 0x72, 0x94, 0x37, 0x33, 0x7D, 
   0x20, 0x3E, 0x66, 0x38, 0x56, 0x66, 0x5C, 0x6E, 0xA0, 0x73, 0x6E, 0x8A, 0x49, 0x5B, 0x8E, 0x25, 
   0x21, 0x76, 0x1F, 0x54, 0x6A, 0x3C, 0x70, 0x92, 0x71, 0x43, 0x75, 0x76, 0x5A, 0x96, 0x20, 0x66, 
   0x6D, 0x14, 0x45, 0x2E, 0x64, 0x4C, 0x91, 0x4E, 0x8A, 0x9E, 0x37, 0x50, 0x87, 0x3C, 0x21, 0x69, 
   0x53, 0x60, 0x8A, 0x31, 0x56, 0x57, 0x3C, 0x5C, 0x52, 0x4E, 0x57, 0xA3, 0x48, 0x46, 0x88, 0x5E, 
   0x85, 0x87, 0x41, 0x72, 0x74, 0x2E, 0x1B, 0x52, 0x1E, 0x26, 0x87, 0x4E, 0x66, 0x9F, 0x7D, 0x89, 
   0x93, 0x54, 0x34, 0x64, 0x30, 0x2E, 0x4D, 0x1F, 0x84, 0x6B, 0x26, 0x5C, 0x96, 0x56, 0x18, 0x92, 
   0x8F, 0x74, 0xAE, 0x5A, 0xA2, 0x99, 0x07, 0x4B, 0x51, 0x00, 0x1B, 0x2E, 0x2C, 0x06, 0x64, 0x75, 
   0x76, 0xB1, 0xA4, 0xCE, 0xA2, 0x69, 0x7C, 0x63, 0x00, 0x00, 0x64, 0x00, 0x00, 0x93, 0x69, 0x84, 
   0x62, 0x9A, 0xD2, 0x9D, 0x66, 0x81, 0xE7, 0x47, 0x23, 0x90, 0x11, 0x1C, 0x2C, 0x18, 0x6E, 0x3E, 
   0x49, 0x61, 0x7C, 0x85, 0x7F, 0xD1, 0x74, 0x91, 0xEE, 0x29, 0x51, 0x6E, 0x17, 0x13, 0x54, 0x3C, 
   0x6A, 0x49, 0x84, 0x85, 0x70, 0x86, 0x6D, 0xDC, 0x69, 0xAC, 0xE9, 0x54, 0xA9, 0x91, 0x18, 0x43, 
   0x54, 0x22, 0x06, 0x63, 0x57, 0x34, 0xA3, 0x4E, 0x71, 0x88, 0x6B, 0xBE, 0x9B, 0x76, 0x97, 0xB8, 
   0x3C, 0x45, 0x96, 0x1F, 0x3D, 0xA6, 0x4C, 0x6A, 0x7C, 0x2C, 0x55, 0x3F, 0x30, 0x63, 0x81, 0xAA, 
   0x93, 0xF6, 0x9E, 0x9E, 0xC3, 0x28, 0x52, 0x70, 0x13, 0x5B, 0x6D, 0x4B, 0x8C, 0x83, 0x57, 0x7A, 
   0x90, 0x2B, 0x00, 0x8C, 0x2E, 0x3F, 0x89, 0x8C, 0xDD, 0xB2, 0xB9, 0xCB, 0xDA, 0x38, 0x3E, 0xA4, 
   0x01, 0x02, 0x52, 0x2A, 0x21, 0x5A, 0x45, 0x8D, 0x9D, 0x61, 0xC4, 0xFF, 0x8C, 0x86, 0x7E, 0xA3, 
   0x40, 0x40, 0x24, 0x50, 0xCE, 0x02, 0x7A, 0xD5, 0x98, 0x8C, 0x64, 0xC6, 0xA8, 0xCA, 0x5C, 0x66, 
   0xEA, 0x08, 0x2A, 0x79, 0x1D, 0x52, 0x27, 0x5D, 0x81, 0x7F, 0x7A, 0x87, 0xFF, 0x26, 0x43, 0xAF, 
   0x49, 0x5A, 0x2A, 0x62, 0x79, 0x7A, 0x59, 0x70, 0xD2, 0x50, 0x93, 0xA0, 0x8A, 0x81, 0x73, 0xB5, 
   0x7F, 0xC8, 0x2D, 0x71, 0xBB, 0x00, 0x4D, 0x8B, 0x74, 0x84, 0x8D, 0x90, 0x71, 0xA7, 0x3F, 0x0A, 
   0x71, 0x01, 0x4A, 0x43, 0x5E, 0x8D, 0x89, 0x77, 0xA5, 0xB4, 0x56, 0x5A, 0xB5, 0x56, 0x5F, 0x65, 
   0x71, 0x8B, 0x76, 0x37, 0x46, 0xDC, 0x37, 0x35, 0x8B, 0x44, 0x6B, 0x15, 0x85, 0x90, 0x79, 0x7A, 
   0x75, 0xFF, 0x66, 0xA2, 0xD1, 0x3B, 0x72, 0x44, 0x22, 0x53, 0x42, 0x34, 0x5C, 0xAA, 0x70, 0x2F, 
   0xA7, 0x8F, 0x81, 0x82, 0x6C, 0xB5, 0xBB, 0x25, 0x5A, 0xAE, 0x1E, 0x4D, 0x83, 0x75, 0x8B, 0x97, 
   0x81, 0x62, 0x85, 0x41, 0x34, 0x79, 0x19, 0x89, 0xA6, 0x53, 0x46, 0x7E, 0x82, 0x48, 0x43, 0x60, 
   0x94, 0xC4, 0x37, 0xA7, 0xFF, 0x42, 0x6D, 0x58, 0x59, 0x39, 0x57, 0x2D, 0x79, 0xCF, 0x57, 0xAC, 
   0xAD, 0xA1, 0x6D, 0x6D, 0x4B, 0x43, 0xA0, 0x32, 0x76, 0xB0, 0x9A, 0xA2, 0xCA, 0x25, 0x54, 0x4F, 
   0x00, 0x00, 0x33, 0x32, 0x4E, 0xA8, 0xFA, 0xFF, 0xE9, 0xB6, 0xD8, 0xC6, 0x0C, 0x1E, 0x79, 0x20, 
   0x48, 0x28, 0x6B, 0x4E, 0x7A, 0x77, 0x79, 0xEF, 0x64, 0xFA, 0xE3, 0x4B, 0x94, 0x83, 0x1C, 0x00, 
   0x2F, 0x00, 0x00, 0x1F, 0x4D, 0x90, 0x9E, 0xEB, 0xFF, 0xFF, 0xF3, 0xFF, 0xFF, 0x06, 0x45, 0x62, 
   0x00, 0x00, 0x00, 0x18, 0x00, 0x5F, 0x85, 0x7B, 0xCA, 0xBC, 0xE1, 0xE9, 0x5A, 0x92, 0x93, 0x00, 
   0x29, 0x58, 0x82, 0x49, 0xAC, 0xC5, 0x92, 0xB6, 0x39, 0x7E, 0x91, 0x0D, 0x27, 0x5C, 0x34, 0x2C, 
   0x40, 0x62, 0x78, 0xBB, 0x4C, 0x85, 0xFB, 0x36, 0x3B, 0x88, 0x43, 0x69, 0x42, 0x77, 0xA2, 0x60, 
   0x66, 0x6E, 0xC9, 0x21, 0x17, 0x97, 0x3D, 0x68, 0x58, 0x27, 0x68, 0x32, 0x62, 0x41, 0x96, 0x4E, 
   0x61, 0xCE, 0x7D, 0x70, 0x91, 0x66, 0x9F, 0x6A, 0x42, 0x92, 0xC9, 0x2A, 0x3F, 0x83, 0x36, 0x26, 
   0x49, 0x48, 0x4E, 0x5C, 0x66, 0x8F, 0xA4, 0x66, 0x89, 0xCD, 0x3D, 0x2C, 0xB4, 0x64, 0x53, 0x67, 
   0x62, 0x6F, 0x64, 0x00, 0x3D, 0x59, 0x1E, 0x4A, 0x73, 0x8C, 0x8A, 0xBB, 0x67, 0x80, 0xD4, 0x34, 
   0x53, 0xA0, 0x6C, 0x6F, 0x6B, 0x70, 0x7E, 0x8B, 0x29, 0x49, 0xBB, 0x3E, 0x5E, 0x58, 0x38, 0x5D, 
   0x40, 0x4A, 0x5C, 0x8B, 0x5B, 0x66, 0xAA, 0x6C, 0x53, 0xAA, 0x3D, 0x2B, 0x6A, 0x1F, 0x43, 0x49, 
   0x41, 0x7E, 0xC8, 0x80, 0x8F, 0xE5, 0x61, 0x81, 0x86, 0x0F, 0x34, 0x48, 0x09, 0x15, 0x3B, 0x4F, 
   0x28, 0x77, 0x52, 0x7B, 0xC4, 0x5F, 0x94, 0xB4, 0x5F, 0x5B, 0x6E, 0x52, 0x64, 0x61, 0x3E, 0x40, 
   0x8E, 0x21, 0x39, 0x7D, 0x32, 0x57, 0x9F, 0x60, 0x6F, 0x7C, 0x5F, 0x5D, 0x81, 0x1F, 0x67, 0xA1, 
   0x13, 0x28, 0x45, 0x52, 0x4A, 0x4B, 0x3E, 0x57, 0xB4, 0x57, 0x59, 0x9B, 0x42, 0x60, 0x69, 0x5A, 
   0x7D, 0xA2, 0x8D, 0x65, 0xA7, 0x4B, 0x36, 0x82, 0x00, 0x67, 0x2A, 0x3D, 0x3F, 0x5E, 0x61, 0x44, 
   0xBB, 0x62, 0x5B, 0x9A, 0x40, 0x51, 0x61, 0x29, 0x7A, 0x61, 0x78, 0x68, 0xB1, 0x4A, 0x34, 0xA5, 
   0x2D, 0x4F, 0x80, 0x53, 0x4F, 0x71, 0x47, 0x60, 0x47, 0x25, 0x43, 0x53, 0x26, 0x38, 0x83, 0x72, 
   0x62, 0xB9, 0x46, 0x64, 0x60, 0x19, 0x5F, 0x72, 0x69, 0x65, 0xB7, 0x69, 0x5E, 0xBC, 0x2F, 0x58, 
   0x58, 0x3E, 0x62, 0x71, 0x3D, 0x4A, 0x64, 0x2C, 0x38, 0x59, 0x48, 0x4E, 0x8D, 0x43, 0x4E, 0x95, 
   0x2D, 0x34, 0x90, 0x45, 0x69, 0x74, 0x78, 0x9D, 0x84, 0x3E, 0x6D, 0x94, 0x20, 0x0F, 0x70, 0x41, 
   0x2A, 0x47, 0x20, 0x60, 0x6A, 0x44, 0x68, 0xA4, 0x83, 0x91, 0x98, 0x39, 0x5C, 0x64, 0x2C, 0x2D, 
   0x63, 0x47, 0x4A, 0x7A, 0x2B, 0x6D, 0x70, 0x47, 0x57, 0x87, 0x4D, 0x62, 0x97, 0x30, 0x56, 0x74, 
   0x42, 0x50, 0x5D, 0x59, 0x5C, 0x8B, 0x37, 0x63, 0x87, 0x43, 0x58, 0x71, 0x54, 0x5D, 0x9E, 0x3D, 
   0x51, 0x75, 0x47, 0x5B, 0x4D, 0x35, 0x60, 0x75, 0x1E, 0x49, 0x8D, 0x30, 0x55, 0x7D, 0x54, 0x50, 
   0x88, 0x71, 0x7E, 0x87, 0x37, 0x78, 0x53, 0x09, 0x1C, 0x5B, 0x43, 0x38, 0x97, 0x72, 0x5C, 0xD6, 
   0x50, 0x7B, 0x84, 0x48, 0x80, 0x3C, 0x0E, 0x40, 0x4C, 0x25, 0x28, 0x8B, 0x5A, 0x5B, 0x87, 0x3F, 
   0x4D, 0x66, 0x30, 0x5B, 0x5D, 0x85, 0xA0, 0xA9, 0x5D, 0x76, 0xC1, 0x11, 0x00, 0x77, 0x18, 0x49, 
   0x4E, 0x59, 0x80, 0x6D, 0x83, 0x60, 0xB9, 0x65, 0x77, 0xB4, 0x1E, 0x86, 0x79, 0x11, 0x3B, 0x44, 
   0x13, 0x0E, 0x4D, 0x45, 0x5B, 0x9C, 0xB4, 0xC4, 0xFA, 0x85, 0x90, 0xF1, 0x00, 0x10, 0x08, 0x06, 
   0x00, 0x00, 0x65, 0x6C, 0xB8, 0x8B, 0xD8, 0xFD, 0x7A, 0x9B, 0x9F, 0x51, 0x6F, 0x9D, 0x53, 0x3D, 
   0x89, 0x1E, 0x2F, 0x60, 0x02, 0x2B, 0x77, 0x81, 0x83, 0xB6, 0x93, 0xC9, 0xA0, 0x36, 0x72, 0x7D, 
   0x1D, 0x24, 0x87, 0x39, 0x4B, 0x76, 0x3B, 0x42, 0x77, 0x66, 0x7E, 0x9B, 0x57, 0x91, 0x9D, 0x64, 
   0x81, 0xA4, 0x86, 0x4D, 0xB0, 0x62, 0x69, 0x98, 0x16, 0x74, 0x8B, 0x3C, 0x78, 0x6F, 0x6F, 0x7C, 
   0xB4, 0x51, 0x46, 0xB9, 0x13, 0x24, 0x58, 0x26, 0x44, 0x69, 0x8F, 0xA8, 0xA4, 0xA5, 0xDC, 0xAC, 
   0x0E, 0x50, 0xA6, 0x00, 0x00, 0x95, 0x53, 0x57, 0x79, 0xFF, 0xD4, 0x82, 0x90, 0x8B, 0xC8, 0x00, 
   0x71, 0xDE, 0x01, 0x1F, 0x59, 0x4E, 0x32, 0x5F, 0x71, 0x8B, 0xD8, 0xB8, 0xC1, 0xB8, 0x72, 0xAD, 
   0x8A, 0x56, 0x42, 0xB0, 0x4B, 0x2E, 0x9B, 0x17, 0x50, 0x54, 0x29, 0x5E, 0x50, 0x86, 0x83, 0xBA, 
   0x44, 0x6E, 0xDE, 0x6D, 0x8A, 0xA9, 0x62, 0x89, 0x6E, 0x2A, 0x3F, 0x6E, 0x64, 0x56, 0x92, 0x80, 
   0x8A, 0xCD, 0x4C, 0x7A, 0xC8, 0x34, 0x89, 0x99, 0x77, 0x86, 0xA1, 0x69, 0x39, 0xB3, 0x27, 0x37, 
   0x49, 0x31, 0x54, 0x4D, 0x44, 0x79, 0x83, 0x36, 0x4F, 0xA3, 0x6E, 0x9B, 0xB8, 0xC4, 0xBC, 0xD4, 
   0x8E, 0x41, 0xAF, 0x00, 0x17, 0x45, 0x00, 0x5C, 0x44, 0xB7, 0x70, 0x92, 0xA3, 0x68, 0xDF, 0x51, 
   0x9D, 0xDA, 0x4D, 0x9C, 0x34, 0x50, 0x6B, 0x78, 0x21, 0x46, 0xFF, 0x27, 0x4A, 0x6A, 0x4C, 0x56, 
   0x1A, 0x71, 0x4D, 0x9B, 0x6D, 0x8E, 0xFF, 0x77, 0xBB, 0xF5, 0x4D, 0x3C, 0x7F, 0x1F, 0x30, 0x38, 
   0x4D, 0x91, 0x82, 0x7B, 0xAD, 0xFF, 0x69, 0x33, 0xB0, 0x2E, 0x59, 0x00, 0x0C, 0x22, 0x25, 0x42, 
   0x3E, 0xC6, 0xCD, 0xFD, 0xE4, 0x8E, 0xA8, 0xEB, 0x00, 0x00, 0x9E, 0x06, 0x23, 0x25, 0xD7, 0xAE, 
   0x91, 0xCC, 0xEC, 0xFF, 0x38, 0x5E, 0xBB, 0x10, 0x00, 0x44, 0x2B, 0x5E, 0x48, 0x6F, 0x98, 0xBF, 
   0x37, 0x60, 0x98, 0x06, 0x19, 0x3E, 0x4F, 0x67, 0x85, 0xAE, 0xCC, 0xFF, 0x81, 0xD0, 0x92, 0x67, 
   0x3E, 0x40, 0x4D, 0x07, 0x93, 0x13, 0x63, 0x6D, 0x4C, 0xB4, 0x8B, 0x75, 0x90, 0xF1, 0x52, 0x53, 
   0x88, 0x1E, 0x1F, 0x3C, 0x37, 0x28, 0x76, 0x84, 0xAB, 0x9C, 0x90, 0xDB, 0xD1, 0x81, 0xA4, 0xCB, 
   0x21, 0x20, 0x7D, 0x00, 0x00, 0x42, 0x3D, 0x61, 0x7B, 0x85, 0x5F, 0xB6, 0x7B, 0xB1, 0x90, 0x31, 
   0x95, 0x8A, 0x2B, 0x2D, 0x8B, 0x6A, 0x5E, 0xA7, 0x95, 0x9B, 0xEC, 0x52, 0x4E, 0x7B, 0x05, 0x1F, 
   0x00, 0x26, 0x75, 0x4D, 0x4F, 0x70, 0xE6, 0x41, 0x17, 0xAA, 0x5A, 0x86, 0x5B, 0x6C, 0xC5, 0x94, 
   0x55, 0x57, 0xC2, 0x27, 0x0A, 0x5C, 0x40, 0x60, 0x95, 0x35, 0x65, 0xA5, 0x73, 0x5F, 0x6B, 0x4B, 
   0x4E, 0x65, 0x00, 0x39, 0x5B, 0x5F, 0x69, 0x9B, 0xA0, 0xA3, 0xBE, 0x4A, 0x7A, 0x7F, 0x48, 0x38, 
   0x51, 0x47, 0x15, 0x80, 0x42, 0x7D, 0xD7, 0x5E, 0xBD, 0xC0, 0x42, 0x4A, 0x69, 0x2C, 0x11, 0x77, 
   0x71, 0xB1, 0x71, 0x97, 0xB0, 0x7D, 0x12, 0x00, 0x79, 0x00, 0x00, 0x87, 0x64, 0x84, 0xA6, 0x83, 
   0xAA, 0xCD, 0x67, 0x6B, 0x76, 0x5E, 0x90, 0x68, 0x12, 0x32, 0x89, 0x22, 0x1A, 0xA4, 0x72, 0x75, 
   0x76, 0x45, 0x91, 0x66, 0x56, 0x62, 0xAB, 0x65, 0x4F, 0xBB, 0x25, 0x52, 0x53, 0x19, 0x30, 0x3C, 
   0x4D, 0x4F, 0x78, 0x7C, 0x95, 0xF7, 0x6F, 0x89, 0xC7, 0x44, 0x4D, 0x34, 0x00, 0x1D, 0x26, 0x15, 
   0x3F, 0x88, 0x7E, 0x5D, 0xB8, 0x53, 0x71, 0x91, 0x48, 0x88, 0x68, 0x58, 0x48, 0xA6, 0x4B, 0x58, 
   0x88, 0x39, 0x51, 0x65, 0x38, 0x46, 0x77, 0x4E, 0x7A, 0x93, 0x37, 0x68, 0x87, 0x2C, 0x40, 0x6A, 
   0x49, 0x50, 0x8B, 0x5B, 0x5C, 0x63, 0x44, 0x58, 0x49, 0x00, 0x4E, 0x9C, 0x48, 0x6B, 0xCC, 0xB0, 
   0x71, 0xA9, 0x64, 0x59, 0x72, 0x00, 0x4C, 0x5F, 0x21, 0x45, 0x5F, 0x45, 0x4B, 0x93, 0x79, 0x6D, 
   0xA6, 0x40, 0x4B, 0x84, 0x2F, 0x40, 0x6D, 0x4B, 0x58, 0x94, 0x52, 0x80, 0x84, 0x5D, 0x6F, 0x8F, 
   0x5B, 0x45, 0xB4, 0x15, 0x3E, 0x67, 0x25, 0x27, 0x3C, 0x43, 0x6C, 0x6A, 0x4A, 0x62, 0x68, 0x63, 
   0x52, 0x8E, 0x7A, 0x48, 0xCE, 0x18, 0x7C, 0x94, 0x06, 0x59, 0x4D, 0x74, 0x30, 0x58, 0x7A, 0x64, 
   0xC5, 0x3B, 0x75, 0x97, 0x3E, 0x5D, 0x6C, 0x48, 0x4F, 0x53, 0x21, 0x20, 0x48, 0x39, 0x33, 0x73, 
   0x68, 0x7A, 0xB4, 0x68, 0x92, 0xAF, 0x3E, 0x68, 0x84, 0x3C, 0x38, 0x65, 0x3B, 0x36, 0x4D, 0x1A, 
   0x31, 0x7B, 0x66, 0x44, 0x93, 0x6C, 0x6F, 0x82, 0x2E, 0x8C, 0x7C, 0x39, 0x58, 0x65, 0x60, 0x34, 
   0x71, 0x5A, 0x55, 0x9F, 0x25, 0x55, 0x98, 0x3B, 0x3F, 0x69, 0x46, 0x62, 0x68, 0x41, 0x6E, 0x85, 
   0x36, 0x4C, 0x64, 0x47, 0x51, 0x7C, 0x3C, 0x58, 0x9F, 0x43, 0x69, 0x7C, 0x4F, 0x7A, 0x59, 0x54, 
   0x4B, 0x75, 0x48, 0x22, 0x76, 0x42, 0x66, 0x9F, 0x52, 0x6C, 0x88, 0x36, 0x38, 0x76, 0x30, 0x33, 
   0x71, 0x37, 0x7D, 0x7D, 0x4F, 0x66, 0x89, 0x55, 0x21, 0x8A, 0x4F, 0x2D, 0x9B, 0x37, 0x89, 0x9A, 
   0x2B, 0x6E, 0x76, 0x1B, 0x24, 0x53, 0x78, 0x58, 0x76, 0x84, 0x86, 0xB6, 0x33, 0x58, 0x88, 0x2C, 
   0x40, 0x32, 0x26, 0x24, 0x6D, 0x0D, 0x5B, 0xA9, 0x98, 0xA2, 0x9F, 0x81, 0xA1, 0x77, 0x07, 0x10, 
   0x76, 0x18, 0x00, 0x70, 0x58, 0x7B, 0x50, 0x6C, 0xCE, 0xA2, 0x77, 0x89, 0xCC, 0x26, 0x26, 0x76, 
   0x14, 0x2A, 0x5F, 0x54, 0x5F, 0x82, 0x56, 0x6C, 0xAB, 0x57, 0x78, 0x94, 0x67, 0x66, 0x71, 0x1D, 
   0x17, 0x7C, 0x12, 0x59, 0x6C, 0x69, 0xB7, 0x91, 0x67, 0x90, 0xA6, 0x74, 0x35, 0x97, 0x62, 0x68, 
   0xC0, 0x33, 0x79, 0x97, 0x5A, 0x84, 0x73, 0x59, 0x77, 0x7D, 0x4C, 0x53, 0xBB, 0x3F, 0x51, 0x86, 
   0x2D, 0x5B, 0x6E, 0x4B, 0x29, 0x53, 0x42, 0x64, 0x94, 0x6C, 0x83, 0xD5, 0x83, 0x84, 0x90, 0x22, 
   0x4B, 0x40, 0x11, 0x5D, 0x91, 0x8B, 0x75, 0xB5, 0x91, 0x91, 0x94, 0x51, 0x57, 0x9F, 0x37, 0x55, 
   0x98, 0x40, 0x9D, 0x8B, 0x44, 0x62, 0x89, 0x22, 0x00, 0x5B, 0x1F, 0x43, 0x58, 0x77, 0xBA, 0xAC, 
   0x6E, 0xA5, 0xED, 0x42, 0x6F, 0xA8, 0x77, 0x24, 0x5D, 0x7C, 0x3C, 0x63, 0x57, 0xC0, 0xD1, 0x10, 
   0x82, 0xDC, 0x10, 0x41, 0x68, 0x63, 0x36, 0x45, 0x73, 0x83, 0xA7, 0x50, 0x96, 0xB5, 0xB1, 0x86, 
   0x90, 0x92, 0x9F, 0xCF, 0x15, 0x46, 0xEE, 0x23, 0x05, 0x55, 0x34, 0x3B, 0x00, 0x59, 0xAB, 0x9C, 
   0x8E, 0xB3, 0xFF, 0x4A, 0x67, 0xB5, 0x3E, 0x42, 0x2F, 0x76, 0x52, 0x7D, 0x49, 0x4D, 0xAC, 0x07, 
   0x67, 0x81, 0x8C, 0xA8, 0x88, 0xCC, 0xA7, 0xE9, 0x51, 0x55, 0xC4, 0x08, 0x47, 0x43, 0x49, 0x89, 
   0x84, 0x53, 0x49, 0x9F, 0x0A, 0x23, 0x67, 0x24, 0x81, 0x75, 0xA5, 0xB6, 0xC3, 0x7E, 0x78, 0xE6, 
   0x33, 0x5F, 0xB5, 0x31, 0x57, 0x29, 0x4E, 0x4C, 0x35, 0x62, 0x6B, 0xFF, 0x9B, 0x94, 0xD6, 0x60, 
   0x94, 0x00, 0x1E, 0x6B, 0x8D, 0x39, 0x4C, 0xFF, 0x5B, 0x62, 0xBD, 0x50, 0x52, 0x70, 0x3A, 0x80, 
   0x52, 0x36, 0x75, 0x88, 0x77, 0x53, 0xC4, 0x72, 0x75, 0xBA, 0x6C, 0x75, 0x8C, 0x42, 0x48, 0x75, 
   0x31, 0x8C, 0xDF, 0x86, 0x90, 0xB9, 0x90, 0x60, 0x64, 0x22, 0x0F, 0x50, 0x00, 0x4F, 0x6D, 0x62, 
   0x8B, 0x5C, 0x82, 0x56, 0xB9, 0x50, 0x86, 0xFC, 0x35, 0x9E, 0xCA, 0x6F, 0x65, 0x56, 0x7B, 0x6F, 
   0x92, 0x73, 0x9F, 0xE5, 0x80, 0x78, 0xA7, 0x25, 0x1E, 0x47, 0x00, 0x06, 0x3A, 0x42, 0x59, 0xAD, 
   0xB6, 0xCE, 0xC5, 0x60, 0x7F, 0x75, 0x00, 0x00, 0x53, 0x32, 0x60, 0x4B, 0xF8, 0xDA, 0xEE, 0x74, 
   0x95, 0xFF, 0x09, 0x47, 0x3F, 0x3A, 0x4F, 0x2A, 0x30, 0x05, 0x92, 0x70, 0x6D, 0xA8, 0x71, 0xD4, 
   0xED, 0x76, 0x82, 0xC1, 0x67, 0x2E, 0x45, 0x00, 0x00, 0x21, 0x0C, 0x27, 0x58, 0xA5, 0xBC, 0xF2, 
   0xD4, 0xFF, 0xFA, 0x5E, 0x79, 0xA6, 0x00, 0x00, 0x23, 0x0E, 0x14, 0x3E, 0x73, 0x4B, 0xAE, 0xBA, 
   0xAA, 0xA1, 0x48, 0x99, 0xB9, 0x29, 0x4D, 0xC1, 0x5B, 0x39, 0x67, 0x80, 0x87, 0x84, 0x4A, 0x80, 
   0x81, 0x00, 0x0D, 0x31, 0x2C, 0x13, 0x24, 0x6E, 0x9E, 0xBF, 0x65, 0x79, 0xFF, 0x49, 0x4C, 0x96, 
   0x4A, 0x78, 0x4A, 0x78, 0x4A, 0xA8, 0x66, 0x68, 0xCA, 0x81, 0x79, 0xF6, 0x2F, 0x4A, 0x85, 0x11, 
   0x54, 0x1B, 0x3F, 0x54, 0x87, 0x31, 0x4A, 0xB6, 0x68, 0x68, 0x5D, 0xA7, 0x97, 0x8C, 0x45, 0x86, 
   0xB5, 0x2B, 0x56, 0xA4, 0x45, 0x32, 0x80, 0x3A, 0x3E, 0x5C, 0x4D, 0x84, 0x89, 0x4F, 0x85, 0x8A, 
   0x5C, 0x51, 0x8B, 0x94, 0x6C, 0x91, 0x5D, 0x75, 0xA3, 0x00, 0x0E, 0x7B, 0x1E, 0x21, 0x81, 0x9D, 
   0xCA, 0x8D, 0x6A, 0xAE, 0xC5, 0x20, 0x19, 0x74, 0x5D, 0x5B, 0x4B, 0x58, 0x77, 0x90, 0x41, 0x4E, 
   0xB9, 0x6D, 0x6F, 0x96, 0x55, 0x6E, 0x72, 0x1B, 0x61, 0x66, 0x3C, 0x43, 0xA4, 0x58, 0x4D, 0x99, 
   0x3D, 0x47, 0x77, 0x54, 0x4E, 0x67, 0x4D, 0x66, 0xB7, 0x52, 0x6C, 0xAB, 0x50, 0x71, 0x8C, 0x21, 
   0x58, 0x73, 0x16, 0x1E, 0x56, 0x61, 0x51, 0x67, 0x47, 0x64, 0xB2, 0x58, 0x65, 0x9B, 0x41, 0x5F, 
   0x6C, 0x68, 0x59, 0x65, 0x4F, 0x63, 0x77, 0x0E, 0x3A, 0x8E, 0x15, 0x45, 0x93, 0x61, 0x51, 0x6C, 
   0x8B, 0x63, 0x83, 0x40, 0x52, 0xA5, 0x18, 0x53, 0x50, 0x46, 0x65, 0x7A, 0x63, 0x70, 0xD6, 0x4C, 
   0x42, 0xA1, 0x29, 0x58, 0x4A, 0x34, 0x63, 0x4F, 0x46, 0x41, 0xC2, 0x62, 0x68, 0x90, 0x40, 0x4C, 
   0x62, 0x29, 0x57, 0x7E, 0x46, 0x57, 0xB2, 0x46, 0x4C, 0x79, 0x40, 0x47, 0x72, 0x62, 0x92, 0x8E, 
   0x45, 0x69, 0x82, 0x2D, 0x40, 0x7A, 0x2D, 0x3F, 0x6D, 0x50, 0x4B, 0x68, 0x4B, 0x5D, 0x75, 0x36, 
   0x6A, 0x7D, 0x6A, 0x7C, 0xD4, 0x62, 0x65, 0xB0, 0x11, 0x42, 0x19, 0x23, 0x52, 0x45, 0x69, 0x53, 
   0x97, 0x7A, 0x71, 0xB5, 0x29, 0x81, 0x92, 0x22, 0x4C, 0x68, 0x39, 0x1D, 0x50, 0x46, 0x5C, 0x68, 
   0x79, 0x96, 0xA3, 0x61, 0x7E, 0xC5, 0x15, 0x16, 0x78, 0x24, 0x43, 0x43, 0x25, 0x66, 0x75, 0x49, 
   0x45, 0x93, 0x6C, 0x57, 0x88, 0x39, 0x68, 0x76, 0x22, 0x4D, 0x54, 0x5B, 0x64, 0x8E, 0x55, 0x8A, 
   0xA1, 0x44, 0x44, 0x8F, 0x53, 0x2C, 0x7C, 0x3B, 0x60, 0x68, 0x13, 0x50, 0x45, 0x51, 0x63, 0x63, 
   0x3B, 0x7A, 0xA9, 0x30, 0x3B, 0x77, 0x47, 0x5D, 0x99, 0x4E, 0x63, 0x81, 0x3D, 0x4C, 0x53, 0x3D, 
   0x40, 0x71, 0x3D, 0x6D, 0xB0, 0x43, 0x4B, 0x8E, 0x53, 0x56, 0x54, 0x4D, 0x61, 0x6A, 0x24, 0x60, 
   0x6B, 0x0E, 0x32, 0x78, 0x5B, 0x38, 0x96, 0xAC, 0x84, 0xAC, 0x4F, 0x84, 0x7C, 0x0D, 0x2D, 0x2A, 
   0x08, 0x33, 0x58, 0x44, 0x51, 0xA4, 0x80, 0x65, 0xB1, 0x75, 0x8D, 0x78, 0x45, 0x70, 0x61, 0x1A, 
   0x3A, 0x78, 0x20, 0x2E, 0x9B, 0x33, 0x26, 0x6F, 0x54, 0x8B, 0x70, 0x8E, 0xCA, 0x99, 0x6F, 0x46, 
   0x93, 0x06, 0x06, 0x6B, 0x00, 0x52, 0x65, 0x64, 0x77, 0x51, 0x73, 0x62, 0xAB, 0x7A, 0x7E, 0xDB, 
   0x7D, 0x88, 0xC3, 0x1F, 0x58, 0x74, 0x00, 0x0D, 0x11, 0x3E, 0x42, 0x2B, 0x8B, 0x96, 0xFF, 0x96, 
   0xB9, 0xFF, 0x21, 0x67, 0x3E, 0x00, 0x00, 0x00, 0x40, 0x3A, 0x95, 0x78, 0x9A, 0xB7, 0x65, 0x6C, 
   0xA0, 0x82, 0xA6, 0xDF, 0x84, 0xBA, 0xBA, 0x1F, 0x3D, 0x61, 0x05, 0x0B, 0x63, 0x49, 0x49, 0x8A, 
   0x56, 0x6D, 0x69, 0x3B, 0x74, 0x87, 0x4E, 0x6A, 0xC8, 0x76, 0x76, 0xB2, 0x4E, 0x5A, 0x7D, 0x30, 
   0x4F, 0x7C, 0x0F, 0x73, 0x6D, 0x46, 0x80, 0x87, 0xAF, 0x6A, 0xC8, 0x86, 0x85, 0xBD, 0x22, 0x67, 
   0x88, 0x2A, 0x4E, 0x7A, 0x61, 0x79, 0x9B, 0x49, 0x4F, 0x84, 0x00, 0x01, 0x5D, 0x00, 0x2F, 0x94, 
   0x9A, 0xD4, 0xCA, 0xFD, 0xEC, 0xA4, 0x77, 0x59, 0x92, 0x00, 0x0B, 0xB8, 0x14, 0x44, 0x77, 0x98, 
   0x85, 0x5B, 0x5C, 0x87, 0xC7, 0x29, 0x7B, 0xAB, 0x31, 0x41, 0x33, 0x6D, 0x31, 0x68, 0x87, 0x8E, 
   0xC7, 0x76, 0xA6, 0xCF, 0x63, 0x71, 0x95, 0x3E, 0x48, 0x87, 0x36, 0x48, 0xA2, 0x4D, 0x77, 0x7F, 
   0x54, 0x9A, 0x69, 0x5F, 0x82, 0xCA, 0x63, 0x4C, 0xC4, 0x34, 0x51, 0x6C, 0x19, 0x4C, 0x66, 0x4F, 
   0x7C, 0x8F, 0x75, 0x94, 0xB9, 0xAA, 0x4B, 0xAE, 0x64, 0x6D, 0x8B, 0x3E, 0x9F, 0x95, 0x46, 0x5F, 
   0x9F, 0x39, 0x4B, 0x8C, 0x33, 0x56, 0x86, 0x78, 0x8A, 0x80, 0x5D, 0x4C, 0xA9, 0x14, 0x54, 0xA3, 
   0x44, 0x8E, 0x5F, 0xA1, 0x88, 0xA4, 0x90, 0x5A, 0xEE, 0x27, 0x76, 0x8A, 0x13, 0x7A, 0x16, 0x68, 
   0x4B, 0x8F, 0x62, 0x4A, 0xD7, 0x29, 0x56, 0xB6, 0x68, 0x7A, 0x6B, 0x68, 0x92, 0x8D, 0x3A, 0x6B, 
   0xD1, 0x51, 0x80, 0x86, 0x41, 0x5C, 0x41, 0x60, 0x07, 0x5B, 0x72, 0x81, 0xB5, 0x61, 0xCB, 0xFF, 
   0x4D, 0x41, 0xC3, 0x3A, 0x28, 0x17, 0x2E, 0x89, 0x58, 0x56, 0x6D, 0xD0, 0x73, 0x73, 0x7B, 0x45, 
   0x67, 0x4E, 0x00, 0x13, 0x74, 0x45, 0x4C, 0x76, 0xF4, 0xEA, 0xDC, 0xAA, 0xD9, 0xFF, 0x0B, 0x4B, 
   0xBB, 0x18, 0x0D, 0x36, 0x66, 0x7C, 0x48, 0x43, 0x91, 0xA7, 0x42, 0x18, 0xB1, 0x2C, 0x41, 0x3F, 
   0x66, 0x7D, 0x84, 0x82, 0xAC, 0xD4, 0x21, 0x77, 0x5E, 0x00, 0x00, 0x32, 0x6B, 0x36, 0xC9, 0xAB, 
   0xFA, 0xE2, 0x55, 0xA9, 0xB2, 0x36, 0x01, 0x58, 0x53, 0x2C, 0x35, 0x38, 0x55, 0x88, 0x83, 0x9B, 
   0xE6, 0xBF, 0xE3, 0xEA, 0x3D, 0x49, 0x7D, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x25, 0x5F, 0x80, 0x9E, 
   0xE2, 0xFF, 0xFF, 0xE0, 0xFF, 0xFF, 0x0C, 0x2D, 0x46, 0x00, 0x00, 0x0E, 0x24, 0x02, 0x50, 0x8A, 
   0x6D, 0xE3, 0xA2, 0xD6, 0xFB, 0x45, 0x74, 0x85, 0x1A, 0x2D, 0x41, 0x41, 0x5F, 0x55, 0x79, 0x6F, 
   0xBA, 0x34, 0x47, 0x53, 0x1D, 0x47, 0x11, 0x4B, 0x86, 0x89, 0x63, 0x59, 0xFF, 0x2C, 0x4E, 0xD5, 
   0x4A, 0x4A, 0x7C, 0x84, 0x9A, 0x52, 0x6C, 0x70, 0xA2, 0x88, 0x7B, 0xB3, 0x2B, 0x68, 0x9A, 0x29, 
   0x4F, 0x8B, 0x51, 0x5F, 0x6B, 0x53, 0x4D, 0x48, 0x2E, 0x21, 0x78, 0x79, 0x58, 0x8E, 0x8A, 0xB5, 
   0xF6, 0x4E, 0xAD, 0xB0, 0x12, 0x21, 0x51, 0x1D, 0x00, 0x48, 0x4D, 0x89, 0x82, 0x82, 0xCF, 0x97, 
   0x72, 0x57, 0xAA, 0x22, 0x11, 0x9F, 0x54, 0x77, 0x8E, 0x9D, 0x99, 0xA3, 0x40, 0x3D, 0x62, 0x00, 
   0x26, 0x73, 0x3F, 0x61, 0x8B, 0x69, 0x8B, 0xA8, 0x4F, 0x70, 0x98, 0x76, 0x85, 0x7C, 0x52, 0x5A, 
   0xB0, 0x2D, 0x1F, 0xC5, 0x32, 0x5D, 0x56, 0x4E, 0x79, 0x5B, 0x49, 0x61, 0xA0, 0x49, 0x5F, 0xC8, 
   0x59, 0x5D, 0x99, 0x36, 0x0D, 0x2C, 0x25, 0x26, 0x45, 0x5F, 0x9B, 0xDC, 0x81, 0xA2, 0xE7, 0x4B, 
   0x50, 0x66, 0x00, 0x4C, 0x45, 0x26, 0x22, 0x88, 0x6C, 0x2E, 0x94, 0x47, 0x7B, 0x78, 0x5E, 0x7D, 
   0x78, 0x57, 0x71, 0x89, 0x3E, 0x4D, 0x9A, 0x04, 0x40, 0x6C, 0x3E, 0x35, 0x5B, 0x5D, 0x74, 0xB2, 
   0x5E, 0x5E, 0x8B, 0x31, 0x48, 0x75, 0x48, 0x76, 0xC4, 0x7A, 0x70, 0x8A, 0x5C, 0x3B, 0x4F, 0x00, 
   0x57, 0x65, 0x28, 0x51, 0x8F, 0x8C, 0x52, 0x96, 0x76, 0x80, 0x9D, 0x2A, 0x5E, 0x8B, 0x24, 0x52, 
   0x68, 0x52, 0x58, 0x79, 0x69, 0x5D, 0x90, 0x40, 0x4C, 0x90, 0x45, 0x4C, 0x94, 0x45, 0x4D, 0x5A, 
   0x34, 0x70, 0x77, 0x57, 0x6A, 0x9A, 0x4C, 0x64, 0x8F, 0x35, 0x36, 0x7D, 0x35, 0x47, 0x88, 0x69, 
   0x75, 0xA9, 0x47, 0x5E, 0x59, 0x52, 0x42, 0x76, 0x68, 0x5E, 0xCA, 0x01, 0x53, 0x52, 0x1D, 0x4E, 
   0x35, 0x6E, 0x5A, 0xA9, 0x75, 0x6B, 0xBD, 0x1A, 0x4F, 0x84, 0x4C, 0x65, 0x82, 0x7F, 0x74, 0x80, 
   0x23, 0x4F, 0x78, 0x3D, 0x0F, 0x72, 0x42, 0x48, 0x61, 0x15, 0x56, 0x7E, 0x44, 0x59, 0x72, 0x89, 
   0x9E, 0x82, 0x2E, 0x64, 0x71, 0x1C, 0x18, 0x6B, 0x66, 0x3A, 0x77, 0x44, 0x7A, 0x7F, 0x2D, 0x5D, 
   0xAD, 0x5A, 0x50, 0x9A, 0x48, 0x3E, 0x5F, 0x3C, 0x43, 0x6F, 0x3B, 0x4A, 0x7A, 0x1F, 0x57, 0x64, 
   0x58, 0x4D, 0x76, 0x4D, 0x6F, 0xAA, 0x2B, 0x63, 0x71, 0x3C, 0x3A, 0x5F, 0x4E, 0x51, 0x88, 0x38, 
   0x63, 0x8E, 0x4F, 0x63, 0x72, 0x54, 0x51, 0x7D, 0x2C, 0x3A, 0x88, 0x3C, 0x78, 0x60, 0x42, 0x5A, 
   0x83, 0x37, 0x15, 0x9B, 0x43, 0x33, 0xA6, 0x5F, 0x9B, 0x88, 0x42, 0x84, 0x63, 0x0E, 0x1C, 0x34, 
   0x2C, 0x11, 0x5D, 0x6C, 0x85, 0xA4, 0x46, 0x87, 0x9A, 0x46, 0x38, 0x46, 0x61, 0x70, 0x85, 0x22, 
   0x4D, 0xB9, 0x2D, 0x30, 0x69, 0x4A, 0x75, 0x79, 0x4C, 0x49, 0x75, 0x3D, 0x29, 0x82, 0x76, 0x9D, 
   0xA5, 0x53, 0xB4, 0x83, 0x24, 0x25, 0x7D, 0x03, 0x03, 0x57, 0x4B, 0x66, 0x6B, 0x9D, 0xB3, 0xCF, 
   0x79, 0x95, 0xF5, 0x14, 0x58, 0x63, 0x0D, 0x06, 0x00, 0x2B, 0x14, 0x7F, 0x73, 0xAC, 0xB8, 0x91, 
   0xCA, 0xD6, 0x4A, 0x5A, 0xAC, 0x03, 0x00, 0x42, 0x00, 0x04, 0x0F, 0x43, 0x77, 0x8C, 0xA9, 0xD8, 
   0xDC, 0xB6, 0xB2, 0xDA, 0x5E, 0x5F, 0xB0, 0x25, 0x5F, 0xA0, 0x1C, 0x39, 0x47, 0x1C, 0x1C, 0x46, 
   0x57, 0x67, 0xA8, 0x70, 0xA2, 0xD2, 0x70, 0x70, 0x7C, 0x41, 0x4D, 0x70, 0x18, 0x41, 0x8D, 0x52, 
   0x5E, 0x99, 0x76, 0x77, 0x6D, 0x2E, 0x68, 0x75, 0x3B, 0x69, 0xB7, 0x97, 0x85, 0xC3, 0x79, 0x7E, 
   0x9F, 0x48, 0x4E, 0x64, 0x2E, 0x41, 0x74, 0x33, 0x6E, 0x9D, 0x23, 0x4D, 0xAE, 0x33, 0x39, 0x76, 
   0x88, 0x6B, 0x51, 0xBD, 0xC3, 0xAF, 0x63, 0xCC, 0xFF, 0x02, 0x44, 0xAC, 0x00, 0x00, 0x36, 0x48, 
   0x5B, 0x5D, 0xA6, 0xCB, 0xA4, 0x3B, 0x9E, 0xCE, 0x23, 0x35, 0xA0, 0x3A, 0x39, 0x4A, 0x32, 0x51, 
   0xAD, 0x6F, 0x60, 0xC1, 0xA4, 0x91, 0x74, 0x7C, 0xB4, 0xD6, 0x45, 0x84, 0xFF, 0x3D, 0x36, 0x69, 
   0x41, 0x46, 0x16, 0x5D, 0x79, 0x89, 0x67, 0x74, 0xFF, 0x00, 0x4C, 0x96, 0x3B, 0x6E, 0x55, 0x9E, 
   0x8B, 0xAA, 0x56, 0x31, 0xA4, 0x0D, 0x5A, 0x55, 0x8B, 0x90, 0x7F, 0x9C, 0x9C, 0xEC, 0x28, 0x67, 
   0xA8, 0x26, 0x65, 0x74, 0x96, 0x9B, 0xB0, 0x55, 0x2D, 0xA8, 0x00, 0x16, 0x61, 0x34, 0x90, 0x39, 
   0x94, 0x7D, 0x81, 0x97, 0x85, 0xFF, 0x7F, 0xA0, 0xF4, 0x6A, 0x64, 0x17, 0x05, 0x3E, 0x37, 0x16, 
   0x42, 0xE3, 0x8A, 0x48, 0xB7, 0x75, 0x5C, 0x35, 0x3C, 0x75, 0x7A, 0x5D, 0x87, 0xCC, 0x61, 0x98, 
   0xE8, 0x4A, 0x52, 0x8A, 0x1D, 0x2F, 0x12, 0x41, 0x74, 0x5F, 0x61, 0x86, 0xFF, 0xA0, 0x86, 0xF8, 
   0x81, 0x84, 0x66, 0x00, 0x33, 0x56, 0x05, 0x40, 0x7C, 0x96, 0xD5, 0x8F, 0x9C, 0x8B, 0xCD, 0x19, 
   0x01, 0x77, 0x03, 0x4B, 0x17, 0x67, 0x7D, 0x7D, 0xA3, 0x98, 0xE4, 0x91, 0xCB, 0xFF, 0x58, 0x77, 
   0xD0, 0x00, 0x22, 0x2E, 0x09, 0x25, 0x41, 0x7D, 0x81, 0xCF, 0x8F, 0xBA, 0xA6, 0x66, 0x47, 0x7D, 
   0x00, 0x1F, 0x6B, 0x38, 0x75, 0x51, 0xB6, 0x9E, 0xDC, 0x49, 0x53, 0xD6, 0x00, 0x31, 0x2B, 0x4C, 
   0x56, 0x65, 0xBB, 0x98, 0xFF, 0x3F, 0xA4, 0xAB, 0x4A, 0x5E, 0x42, 0x82, 0x60, 0x8B, 0x5E, 0x4D, 
   0x91, 0x33, 0x67, 0xA7, 0x42, 0x76, 0x94, 0x46, 0x30, 0x75, 0x2B, 0x2B, 0x69, 0x2E, 0x52, 0x54, 
   0x65, 0x7B, 0x80, 0x95, 0xCE, 0xDE, 0xA9, 0xE8, 0xC6, 0x38, 0x37, 0x51, 0x00, 0x00, 0x44, 0x35, 
   0x40, 0xB0, 0x76, 0x37, 0xA5, 0x88, 0x9F, 0x87, 0x42, 0x8E, 0x79, 0x0D, 0x1B, 0x77, 0x2B, 0x37, 
   0x60, 0x9E, 0xA9, 0x9F, 0x7B, 0x8C, 0xBD, 0x0C, 0x24, 0x4D, 0x12, 0x3A, 0x50, 0x5E, 0x5E, 0xE1, 
   0x6C, 0x60, 0xDC, 0x56, 0x88, 0x08, 0x37, 0x5F, 0x72, 0x26, 0x5A, 0x5C, 0x81, 0x97, 0xBE, 0x48, 
   0x62, 0xEA, 0x31, 0x49, 0x69, 0x5F, 0x42, 0x11, 0x54, 0x43, 0x96, 0x22, 0x67, 0xDD, 0x77, 0x7A, 
   0x83, 0x6B, 0x6F, 0x98, 0x2B, 0x63, 0xA1, 0x2F, 0x6D, 0x60, 0x52, 0x33, 0x4A, 0x59, 0x4A, 0xA8, 
   0x4E, 0x94, 0xC8, 0x38, 0x67, 0x90, 0x55, 0x35, 0x9A, 0x88, 0xA0, 0x9D, 0x79, 0xA3, 0x78, 0x00, 
   0x00, 0x5B, 0x00, 0x03, 0x56, 0x85, 0xC9, 0xA3, 0x82, 0xAF, 0xB6, 0x5B, 0x53, 0xA6, 0x69, 0x72, 
   0x88, 0x00, 0x5F, 0x70, 0x27, 0x25, 0x97, 0x71, 0x6E, 0x9B, 0x5B, 0x84, 0x5C, 0x4F, 0x5B, 0x99, 
   0x54, 0x37, 0x99, 0x3C, 0x42, 0x6C, 0x1F, 0x4F, 0x6E, 0x59, 0x68, 0xA9, 0x55, 0x80, 0xB5, 0x7B, 
   0x9B, 0xB9, 0x61, 0x54, 0x7C, 0x00, 0x3A, 0x5B, 0x0F, 0x22, 0x6B, 0x6C, 0x41, 0x6C, 0x5D, 0x81, 
   0x90, 0x46, 0x76, 0xB8, 0x24, 0x4E, 0x73, 0x57, 0x42, 0x67, 0x6E, 0x69, 0x7E, 0x40, 0x59, 0x86, 
   0x08, 0x3D, 0x8D, 0x65, 0x66, 0x99, 0x93, 0x76, 0x9E, 0x41, 0x4D, 0xAB, 0x00, 0x40, 0x31, 0x38, 
   0x50, 0x26, 0x34, 0x40, 0xBD, 0x64, 0x63, 0xCB, 0x70, 0x5E, 0x5F, 0x26, 0x53, 0x87, 0x3C, 0x59, 
   0xAE, 0x5E, 0x5E, 0x7A, 0x47, 0x64, 0x5C, 0x5C, 0x58, 0xA0, 0x22, 0x51, 0x89, 0x1C, 0x24, 0x66, 
   0x3B, 0x53, 0x6D, 0x65, 0x7D, 0x8B, 0x6C, 0x61, 0xB5, 0x3E, 0x55, 0xA3, 0x3C, 0x65, 0xA0, 0x51, 
   0x58, 0x58, 0x28, 0x2F, 0x3A, 0x29, 0x5D, 0x63, 0x6F, 0x6A, 0xB0, 0x75, 0x6B, 0xAA, 0x0D, 0x5F, 
   0x4D, 0x01, 0x48, 0x2B, 0x6A, 0x39, 0xA0, 0xA5, 0x7F, 0xDC, 0x4E, 0xAC, 0xB4, 0x2F, 0x6F, 0x92, 
   0x43, 0x04, 0x38, 0x1A, 0x19, 0x0A, 0x38, 0x54, 0xA6, 0x5C, 0x5D, 0xDC, 0x73, 0x88, 0x85, 0x28, 
   0x72, 0x6C, 0x2E, 0x5A, 0x60, 0x67, 0x4D, 0x89, 0x33, 0x51, 0x84, 0x38, 0x51, 0xA1, 0x48, 0x51, 
   0x7E, 0x2C, 0x73, 0x66, 0x31, 0x67, 0x7C, 0x5F, 0x3F, 0x71, 0x5F, 0x44, 0x88, 0x3C, 0x57, 0x88, 
   0x2B, 0x6F, 0x7C, 0x4D, 0x6F, 0x70, 0x42, 0x4C, 0x6A, 0x42, 0x3A, 0x66, 0x31, 0x63, 0xA0, 0x54, 
   0x6F, 0xA0, 0x44, 0x47, 0x5B, 0x4F, 0x5E, 0x60, 0x38, 0x85, 0x83, 0x32, 0x34, 0x8A, 0x49, 0x3F, 
   0x7F, 0x7C, 0x72, 0x9A, 0x3B, 0x72, 0x7C, 0x00, 0x2D, 0x5D, 0x24, 0x38, 0x63, 0x7D, 0x72, 0x8B, 
   0x6D, 0x73, 0x97, 0x45, 0x41, 0x6A, 0x2D, 0x58, 0x50, 0x27, 0x69, 0xA2, 0x3A, 0x43, 0xAF, 0x79, 
   0x6B, 0x81, 0x52, 0x82, 0x74, 0x2F, 0x65, 0x5D, 0x45, 0x2B, 0x8B, 0x34, 0x10, 0x81, 0x2B, 0x8C, 
   0x71, 0x93, 0xA5, 0x89, 0x71, 0x60, 0x96, 0x05, 0x37, 0x97, 0x55, 0x5A, 0x8C, 0x78, 0x83, 0x8B, 
   0x39, 0x77, 0x58, 0x55, 0x32, 0x7B, 0x4E, 0x54, 0xBA, 0x2B, 0x87, 0x98, 0x3D, 0x54, 0x4E, 0x44, 
   0x42, 0x72, 0x72, 0x5F, 0xCF, 0x61, 0x76, 0xB8, 0x0B, 0x22, 0x4A, 0x2F, 0x59, 0x3A, 0x7D, 0xB1, 
   0xAF, 0x6E, 0x9C, 0xB3, 0x4C, 0x57, 0xA9, 0x6C, 0x6C, 0xAD, 0x3C, 0x7C, 0x72, 0x2A, 0x58, 0x65, 
   0x36, 0x40, 0x92, 0x86, 0x57, 0xA8, 0x63, 0x85, 0x69, 0x12, 0x63, 0x6E, 0x34, 0x4C, 0x8C, 0x47, 
   0x52, 0x88, 0x7D, 0x65, 0xA1, 0x66, 0x5B, 0xAE, 0x16, 0x78, 0x93, 0x2E, 0x73, 0x88, 0xA6, 0x6C, 
   0xA4, 0x72, 0x71, 0xAA, 0x09, 0x43, 0x7D, 0x0E, 0x3E, 0x9F, 0x5B, 0x9A, 0xA4, 0x9B, 0x7E, 0x7D, 
   0x62, 0x23, 0x78, 0x11, 0x62, 0xC3, 0x54, 0xA2, 0xBC, 0x75, 0x84, 0x7C, 0x30, 0x49, 0x74, 0x15, 
   0x16, 0x9C, 0x56, 0x78, 0x70, 0xA7, 0x91, 0x83, 0x61, 0x9C, 0xDF, 0x00, 0x50, 0xB6, 0x1C, 0x10, 
   0x32, 0x5A, 0x3C, 0x69, 0x76, 0xA2, 0xE5, 0xB1, 0xC7, 0xDC, 0x71, 0xA2, 0x96, 0x34, 0x3C, 0xAF, 
   0x52, 0x1B, 0x83, 0x3E, 0x4F, 0x43, 0x17, 0x74, 0x72, 0x6D, 0xA8, 0xEB, 0x7A, 0x74, 0xC8, 0x58, 
   0x23, 0x6A, 0x36, 0x4B, 0x58, 0x49, 0x87, 0x87, 0x51, 0x84, 0xB1, 0x75, 0x58, 0x81, 0x81, 0x8B, 
   0xB0, 0x85, 0xA6, 0xD2, 0x48, 0x58, 0xB2, 0x22, 0x32, 0x96, 0x1B, 0x48, 0x38, 0x51, 0x51, 0x56, 
   0x6B, 0x65, 0xD6, 0x61, 0x95, 0xCC, 0x5A, 0xA6, 0x4E, 0x58, 0x7A, 0x90, 0x55, 0x38, 0xD8, 0x04, 
   0x30, 0x49, 0x2E, 0x5A, 0x48, 0xA2, 0x8F, 0xA4, 0x6A, 0x69, 0xA0, 0x40, 0x69, 0xAC, 0x33, 0x74, 
   0x79, 0x50, 0x4C, 0x68, 0x5C, 0x6F, 0xAE, 0x30, 0xAE, 0xD1, 0x5F, 0x5D, 0xAE, 0x87, 0x2E, 0x47, 
   0x48, 0x72, 0x91, 0x3B, 0x73, 0xD6, 0x51, 0x7F, 0x7B, 0x4B, 0x52, 0x7A, 0x25, 0x63, 0x9C, 0x55, 
   0x75, 0x91, 0x9B, 0x5F, 0x91, 0x78, 0x81, 0x86, 0x1B, 0x6A, 0xAE, 0x4C, 0x31, 0x93, 0x8A, 0xA2, 
   0xA3, 0x49, 0x95, 0xA7, 0x0A, 0x16, 0xBA, 0x55, 0x48, 0x4B, 0x84, 0xAF, 0x5B, 0x56, 0x97, 0xB5, 
   0x3D, 0x45, 0x71, 0x26, 0x22, 0x50, 0x5B, 0x51, 0xCF, 0x7D, 0xB8, 0xBE, 0x3D, 0x5C, 0x67, 0x00, 
   0x00, 0x39, 0x3C, 0x56, 0x64, 0xB1, 0xEA, 0xFF, 0x7E, 0xC8, 0xEA, 0x6F, 0x6C, 0x4B, 0x3D, 0x2C, 
   0x52, 0x00, 0x00, 0x52, 0x37, 0x49, 0x82, 0x83, 0xB7, 0xE5, 0x83, 0x8F, 0xBB, 0x2C, 0x10, 0x5C, 
   0x00, 0x11, 0x17, 0x3B, 0x49, 0x66, 0xAA, 0xBB, 0xEE, 0xAF, 0xFF, 0xFF, 0x43, 0x6A, 0xB1, 0x00, 
   0x00, 0x12, 0x21, 0x10, 0x42, 0x68, 0x62, 0x93, 0x70, 0x8D, 0xB7, 0x43, 0x66, 0x8F, 0x32, 0x66, 
   0x4F, 0x72, 0x65, 0xA6, 0x8D, 0x69, 0xC3, 0x36, 0x4A, 0x94, 0x13, 0x2E, 0x33, 0x64, 0x6E, 0x58, 
   0x76, 0x8C, 0xC7, 0x2D, 0x3D, 0xA7, 0x3C, 0x6B, 0x89, 0x2C, 0x71, 0x7E, 0x60, 0x6A, 0xA7, 0x89, 
   0x6E, 0x9C, 0x50, 0x50, 0x95, 0x44, 0x50, 0xA5, 0x65, 0x94, 0x7B, 0x47, 0x77, 0x8B, 0x15, 0x1C, 
   0x84, 0x66, 0x35, 0x74, 0x89, 0xBA, 0xA2, 0x44, 0xC5, 0x9C, 0x52, 0x2D, 0x80, 0x1E, 0x03, 0x6A, 
   0x24, 0x49, 0x8E, 0x81, 0xA7, 0xC8, 0x88, 0x96, 0xA5, 0x37, 0x56, 0x8C, 0x2A, 0x3D, 0x84, 0x72, 
   0x69, 0x84, 0x28, 0x47, 0x79, 0x0C, 0x27, 0x6A, 0x7A, 0x9B, 0xA5, 0x6A, 0x91, 0xC2, 0x43, 0x46, 
   0x72, 0x74, 0x78, 0x6C, 0x45, 0x70, 0xAA, 0x22, 0x47, 0xAF, 0x6C, 0x56, 0xA0, 0x5A, 0x67, 0x21, 
   0x32, 0x3F, 0x55, 0x3D, 0x73, 0xC5, 0x64, 0x7E, 0xDD, 0x37, 0x39, 0x59, 0x54, 0x39, 0x64, 0x54, 
   0x78, 0xD6, 0x5E, 0x7E, 0xDA, 0x50, 0x6B, 0x52, 0x0A, 0x30, 0x33, 0x31, 0x51, 0x83, 0x49, 0x4C, 
   0xAC, 0x1E, 0x47, 0x8B, 0x64, 0x71, 0x69, 0x82, 0x7D, 0xA8, 0x48, 0x54, 0x7B, 0x0E, 0x32, 0x5A, 
   0x31, 0x77, 0xAB, 0x7C, 0x99, 0xCD, 0x65, 0x43, 0x80, 0x25, 0x41, 0x50, 0x2F, 0x62, 0x7C, 0x4B, 
   0x3A, 0x93, 0x62, 0x5C, 0x67, 0x30, 0x46, 0x8B, 0x26, 0x47, 0x9E, 0x7C, 0x6A, 0x82, 0x60, 0x65, 
   0xA4, 0x31, 0x53, 0x92, 0x4B, 0x59, 0x6E, 0x28, 0x64, 0x62, 0x39, 0x47, 0x84, 0x34, 0x69, 0x8A, 
   0x4D, 0x48, 0x80, 0x5B, 0x45, 0x71, 0x41, 0x80, 0xA5, 0x9B, 0xA7, 0xBB, 0x59, 0x60, 0x8A, 0x01, 
   0x24, 0x4D, 0x2D, 0x4B, 0x6D, 0x45, 0x4C, 0x7A, 0x42, 0x53, 0x56, 0x8E, 0x8D, 0xE5, 0x81, 0x4F, 
   0xBD, 0x00, 0x27, 0x38, 0x0E, 0x5C, 0x3F, 0xA4, 0x96, 0xBF, 0x76, 0x83, 0xED, 0x18, 0x30, 0x7D, 
   0x26, 0x33, 0x24, 0x1B, 0x49, 0x67, 0x3A, 0x34, 0x96, 0x96, 0x6F, 0xB3, 0x46, 0x76, 0xA7, 0x06, 
   0x44, 0x62, 0x67, 0x60, 0x73, 0x6D, 0x93, 0x79, 0x45, 0x47, 0xA1, 0x2D, 0x3A, 0x89, 0x43, 0x4B, 
   0x5A, 0x4E, 0x57, 0x65, 0x37, 0x63, 0x82, 0x43, 0x6E, 0x9A, 0x49, 0x35, 0x7F, 0x54, 0x4C, 0x9A, 
   0x31, 0x6E, 0x7C, 0x25, 0x51, 0x3C, 0x64, 0x4C, 0x76, 0x3C, 0x63, 0xAB, 0x37, 0x5D, 0x7E, 0x5F, 
   0x4D, 0x6C, 0x4F, 0x53, 0x8E, 0x22, 0x8C, 0x73, 0x50, 0x58, 0x79, 0x5C, 0x23, 0xA7, 0x50, 0x51, 
   0xA6, 0x48, 0x85, 0x7C, 0x35, 0x84, 0x51, 0x00, 0x27, 0x3A, 0x14, 0x0A, 0x80, 0x8E, 0x84, 0xBA, 
   0x84, 0x96, 0x8C, 0x28, 0x46, 0x2C, 0x21, 0x23, 0x6C, 0x3D, 0x51, 0xB9, 0x3A, 0x65, 0x9D, 0x53, 
   0x67, 0x6F, 0x81, 0x8E, 0x80, 0x57, 0x38, 0x85, 0x17, 0x2C, 0x63, 0x1C, 0x71, 0x75, 0x3B, 0x46, 
   0x7C, 0x2D, 0x37, 0x73, 0x68, 0x94, 0x92, 0xA0, 0xA6, 0xBA, 0x37, 0x70, 0xC9, 0x00, 0x1E, 0x27, 
   0x37, 0x1F, 0x11, 0x79, 0x78, 0xB5, 0x90, 0xB8, 0xFF, 0x4E, 0xA5, 0xA5, 0x00, 0x12, 0x2A, 0x30, 
   0x00, 0x4C, 0x44, 0x58, 0x7E, 0x80, 0xA1, 0xD7, 0x86, 0xB9, 0xF4, 0x39, 0x62, 0x6D, 0x00, 0x00, 
   0x16, 0x2A, 0x50, 0x7E, 0x89, 0x93, 0xB0, 0x75, 0x5D, 0x8C, 0x63, 0x85, 0xDD, 0x5C, 0xA0, 0xC5, 
   0x59, 0x52, 0x71, 0x29, 0x28, 0x40, 0x2D, 0x4A, 0x9A, 0x5B, 0x84, 0x96, 0x51, 0x7A, 0x64, 0x42, 
   0x5E, 0x7D, 0x5A, 0x53, 0xB8, 0x5A, 0x65, 0xA2, 0x59, 0x76, 0x7F, 0x20, 0x5F, 0x7A, 0x3D, 0x5A, 
   0x8C, 0x67, 0x67, 0xA0, 0x57, 0x63, 0xD4, 0x4D, 0x81, 0x8A, 0x8C, 0x81, 0x5C, 0x78, 0x8A, 0xA1, 
   0x36, 0x75, 0xF5, 0x00, 0x13, 0x86, 0x2F, 0x1A, 0x12, 0x6B, 0x96, 0x90, 0x89, 0xE1, 0xD6, 0x3E, 
   0x61, 0x8C, 0x1C, 0x00, 0x80, 0x7E, 0x54, 0x98, 0x73, 0xB8, 0xB0, 0x3E, 0x74, 0xAA, 0x22, 0x2F, 
   0x43, 0x35, 0x58, 0x5C, 0x4B, 0x89, 0xE2, 0x82, 0x9D, 0xC2, 0xA5, 0x96, 0x62, 0x86, 0x92, 0xAB, 
   0x31, 0x33, 0xED, 0x00, 0x16, 0x6C, 0x45, 0x7E, 0x26, 0x85, 0xA7, 0xBB, 0x74, 0x57, 0xEF, 0x01, 
   0x34, 0x65, 0x3A, 0x62, 0x47, 0x7A, 0x8C, 0xA9, 0x44, 0x4F, 0x9A, 0x20, 0x6E, 0x75, 0xC1, 0xAD, 
   0xB0, 0xA9, 0x79, 0xF4, 0x11, 0x4E, 0xA6, 0x0E, 0x57, 0x37, 0x84, 0x56, 0x7A, 0x5D, 0x40, 0xD5, 
   0x46, 0x75, 0x9B, 0x4B, 0x98, 0x34, 0x40, 0x6A, 0x90, 0x52, 0x62, 0xE6, 0x74, 0x77, 0xBE, 0x61, 
   0x3E, 0x5A, 0x1C, 0x6C, 0x48, 0x1D, 0x73, 0x9D, 0x9B, 0x83, 0xBF, 0x57, 0x5B, 0x75, 0x1D, 0x23, 
   0x2C, 0x3F, 0x80, 0x80, 0x5D, 0xBA, 0xFF, 0x79, 0x58, 0xBE, 0x51, 0x55, 0x09, 0x18, 0x4E, 0x63, 
   0x47, 0x2D, 0x8F, 0xA4, 0xA0, 0xC6, 0x86, 0x8F, 0xE4, 0x00, 0x0D, 0x93, 0x09, 0x53, 0x3D, 0xB2, 
   0xC1, 0xBB, 0xCF, 0xBB, 0xFF, 0x49, 0x4B, 0x9A, 0x1B, 0x3C, 0x2E, 0x00, 0x36, 0x27, 0x3D, 0x4F, 
   0x86, 0x95, 0xA1, 0xFF, 0x73, 0xC8, 0x93, 0x2E, 0x43, 0x68, 0x28, 0x2A, 0x93, 0x73, 0x7E, 0x5A, 
   0x7E, 0x89, 0xA4, 0x49, 0x33, 0xC6, 0x1B, 0x49, 0x2D, 0x49, 0x6C, 0x71, 0x8E, 0x56, 0xCC, 0x45, 
   0x62, 0x76, 0x07, 0x1B, 0x28, 0x81, 0x7A, 0xCB, 0xC5, 0xFE, 0xFF, 0x2E, 0x82, 0xAB, 0x00, 0x05, 
   0x29, 0x3B, 0x08, 0x39, 0x39, 0x61, 0x92, 0x85, 0xBF, 0xCE, 0x90, 0xA1, 0xC1, 0x32, 0x4D, 0x72, 
   0x24, 0x06, 0x3C, 0x1A, 0x0F, 0x33, 0x52, 0x66, 0x9A, 0xB5, 0xF4, 0xFF, 0xB3, 0xEC, 0xBD, 0x41, 
   0x3A, 0x3E, 0x00, 0x00, 0x11, 0x1B, 0x0A, 0x51, 0x64, 0x35, 0xBB, 0x95, 0xBC, 0xA6, 0x78, 0xAB, 
   0x78, 0x27, 0x48, 0x66, 0x1B, 0x34, 0x77, 0x7C, 0x61, 0x9D, 0x65, 0x56, 0x6E, 0x2B, 0x6D, 0x3C, 
   0x3B, 0x4B, 0x2F, 0x5D, 0x56, 0xFF, 0x60, 0x76, 0xA7, 0x6B, 0x81, 0xB7, 0x27, 0x5E, 0x5C, 0x4A, 
   0x36, 0x58, 0x7E, 0x6F, 0xC1, 0x5B, 0x91, 0xFF, 0x3C, 0x78, 0x88, 0x46, 0x26, 0x2E, 0x36, 0x3D, 
   0x65, 0x27, 0x67, 0x8E, 0x84, 0x75, 0x6F, 0xAC, 0x8C, 0xB5, 0x26, 0x7E, 0xC7, 0x1E, 0x32, 0x6B, 
   0x40, 0x1B, 0x6A, 0x63, 0x83, 0xA8, 0x63, 0xAB, 0x91, 0x2A, 0x2D, 0x6E, 0x30, 0x1C, 0x63, 0x87, 
   0xB0, 0xB4, 0x80, 0x92, 0xA9, 0x34, 0x19, 0x81, 0x00, 0x0E, 0x76, 0x4B, 0x99, 0x7D, 0x70, 0x85, 
   0xB2, 0x71, 0x5D, 0xA1, 0x69, 0x83, 0x95, 0x34, 0x5E, 0xA9, 0x27, 0x18, 0x7F, 0x3D, 0x46, 0x5C, 
   0x49, 0x91, 0x69, 0x60, 0x86, 0xC0, 0x49, 0x5D, 0xB0, 0x48, 0x4F, 0x86, 0x36, 0x37, 0x74, 0x3C, 
   0x3D, 0x74, 0x48, 0x61, 0xB2, 0x75, 0x96, 0xA5, 0x6C, 0x89, 0x75, 0x00, 0x47, 0x79, 0x00, 0x0C, 
   0x67, 0x79, 0x35, 0x7A, 0x65, 0x81, 0xAE, 0x65, 0x83, 0x7D, 0x2C, 0x3A, 0x83, 0x43, 0x67, 0xA5, 
   0x82, 0x7D, 0x99, 0x37, 0x32, 0x92, 0x14, 0x59, 0x63, 0x4D, 0x58, 0x68, 0x76, 0x3B, 0x96, 0x4D, 
   0x7A, 0xAC, 0x40, 0x4D, 0x4B, 0x29, 0x4D, 0x57, 0x3C, 0x5E, 0xB4, 0x77, 0x65, 0x9F, 0x71, 0x65, 
   0x7D, 0x4D, 0x53, 0x93, 0x24, 0x59, 0x8C, 0x34, 0x4E, 0x74, 0x3B, 0x6A, 0x5D, 0x58, 0x5F, 0x92, 
   0x3E, 0x44, 0xAB, 0x40, 0x4B, 0x9A, 0x85, 0x85, 0x8E, 0x5C, 0x79, 0x9E, 0x4E, 0x5B, 0x7A, 0x40, 
   0x42, 0x8E, 0x23, 0x46, 0x54, 0x1D, 0x46, 0x77, 0x57, 0x5D, 0xA5, 0x4E, 0x4E, 0x5C, 0x61, 0x5B, 
   0xAD, 0x99, 0x79, 0xC4, 0x1A, 0x6E, 0x5C, 0x07, 0x50, 0x55, 0x68, 0x2C, 0x83, 0x6D, 0x59, 0x90, 
   0x02, 0x70, 0xA7, 0x52, 0x53, 0xBB, 0x74, 0x69, 0x51, 0x24, 0x52, 0x2D, 0x2F, 0x47, 0x6C, 0x78, 
   0x6A, 0xA7, 0x23, 0x6B, 0x81, 0x2E, 0x60, 0x9C, 0x67, 0x5F, 0x7E, 0x50, 0x52, 0x5A, 0x2D, 0x40, 
   0x6A, 0x48, 0x40, 0x7C, 0x37, 0x5D, 0x72, 0x2C, 0x5E, 0x7F, 0x4F, 0x75, 0xAD, 0x50, 0x74, 0x8A, 
   0x60, 0x29, 0x60, 0x31, 0x34, 0x71, 0x25, 0x6E, 0x94, 0x47, 0x74, 0x8E, 0x4D, 0x3B, 0x7D, 0x20, 
   0x4D, 0x60, 0x43, 0x80, 0x73, 0x55, 0x64, 0xA2, 0x46, 0x2B, 0x7A, 0x68, 0x64, 0x84, 0x60, 0x8B, 
   0x93, 0x1A, 0x3A, 0x58, 0x20, 0x3F, 0x4C, 0x65, 0x61, 0x8B, 0x6A, 0x66, 0xA9, 0x0F, 0x3F, 0x70, 
   0x38, 0x4B, 0x43, 0x7D, 0x90, 0x94, 0x3E, 0x51, 0xAC, 0x17, 0x08, 0x68, 0x56, 0x75, 0x68, 0x41, 
   0x88, 0x8B, 0x53, 0x39, 0x81, 0x52, 0x50, 0x9D, 0x29, 0x7E, 0x86, 0x2F, 0x5C, 0x54, 0x47, 0x3F, 
   0x7D, 0x4A, 0x47, 0x96, 0x6E, 0x71, 0xA2, 0x8F, 0xB0, 0xB2, 0x26, 0x63, 0x55, 0x00, 0x00, 0x54, 
   0x42, 0x36, 0x8F, 0x67, 0xA0, 0x9E, 0x73, 0xB2, 0xA0, 0x5A, 0x49, 0xB6, 0x30, 0x3A, 0x80, 0x02, 
   0x2E, 0x3B, 0x21, 0x31, 0x4F, 0x7B, 0x95, 0xA3, 0xAE, 0xCF, 0xFF, 0x4A, 0x71, 0xBE, 0x00, 0x01, 
   0x47, 0x1A, 0x00, 0x18, 0x4D, 0x7E, 0x6C, 0x80, 0xA6, 0xCE, 0x88, 0x98, 0xC8, 0x98, 0x80, 0xF0, 
   0x4F, 0x71, 0x85, 0x06, 0x45, 0x47, 0x10, 0x2C, 0x5C, 0x5B, 0x38, 0x8B, 0x58, 0x6E, 0x99, 0x64, 
   0x92, 0xA0, 0x42, 0x6A, 0x90, 0x42, 0x69, 0xA0, 0x64, 0x5D, 0x72, 0x63, 0x4C, 0x84, 0x00, 0x3C, 
   0x6F, 0x23, 0x57, 0x9F, 0x9F, 0xBC, 0xCF, 0xC3, 0xA0, 0x91, 0x70, 0x70, 0x8C, 0x15, 0x55, 0xCF, 
   0x21, 0x73, 0xBA, 0x37, 0x2D, 0x44, 0x23, 0x18, 0x4E, 0x4F, 0x72, 0x89, 0x7F, 0xBF, 0x9D, 0x8A, 
   0xA7, 0xAE, 0x54, 0x43, 0x80, 0x00, 0x02, 0x9C, 0x55, 0x54, 0x6F, 0x96, 0x97, 0x71, 0x52, 0x99, 
   0xD9, 0x29, 0x70, 0xB7, 0x41, 0x3C, 0x45, 0x4B, 0x58, 0x74, 0x7B, 0x76, 0xD7, 0xA2, 0x7C, 0xB2, 
   0x39, 0x7B, 0xA0, 0x31, 0x6D, 0xBF, 0x69, 0x44, 0xA4, 0x57, 0x33, 0x41, 0x34, 0x74, 0x58, 0x55, 
   0xB3, 0xD1, 0x50, 0x63, 0xCD, 0x24, 0x30, 0x5B, 0x65, 0x64, 0x83, 0x90, 0xA5, 0xBE, 0x47, 0x6D, 
   0xB3, 0x4D, 0x56, 0x8F, 0x74, 0x89, 0x72, 0x79, 0x84, 0x8F, 0x49, 0x61, 0xCE, 0x51, 0x81, 0xBF, 
   0x38, 0x68, 0x38, 0x2C, 0x49, 0x59, 0x4F, 0x5A, 0xC7, 0x51, 0x55, 0x84, 0x63, 0x5D, 0x6E, 0x75, 
   0xA2, 0xC3, 0x68, 0x74, 0xCD, 0x27, 0x66, 0x80, 0x1C, 0x59, 0x5B, 0x84, 0x3D, 0x34, 0x75, 0x61, 
   0x88, 0x3C, 0x90, 0xFF, 0x5D, 0x6E, 0xCA, 0x6C, 0x78, 0x59, 0x3D, 0x60, 0x67, 0x1B, 0x5A, 0x73, 
   0x4B, 0x81, 0x76, 0x98, 0x49, 0x96, 0x33, 0x3F, 0xBB, 0x4A, 0x90, 0x95, 0x7D, 0x70, 0xBC, 0x66, 
   0x8D, 0xB0, 0x4E, 0x96, 0xE1, 0x73, 0x65, 0xAD, 0x42, 0x29, 0x23, 0x07, 0x55, 0x38, 0x19, 0x45, 
   0x91, 0x6C, 0x65, 0xA1, 0x9B, 0xC7, 0xA8, 0x4B, 0x87, 0xBD, 0x2E, 0x22, 0x7D, 0x50, 0x10, 0x5F, 
   0x5C, 0x88, 0x9E, 0x61, 0xA5, 0xA3, 0x4F, 0x42, 0x8B, 0x16, 0x0F, 0x5D, 0x3A, 0x6C, 0x7B, 0xA7, 
   0x8B, 0xB5, 0x68, 0x9D, 0xA9, 0x1B, 0x41, 0x48, 0x30, 0x2A, 0x8C, 0x52, 0x85, 0x9D, 0x31, 0x7A, 
   0x74, 0x55, 0x68, 0x8A, 0x84, 0x79, 0x85, 0x57, 0x4B, 0x96, 0x4B, 0x66, 0x7A, 0x72, 0x8C, 0x94, 
   0x4E, 0x3A, 0x81, 0x1F, 0x23, 0x5E, 0x25, 0x3D, 0x5A, 0x45, 0x4E, 0x86, 0x9C, 0xB2, 0xC5, 0x8E, 
   0xDE, 0xC8, 0x22, 0x34, 0x79, 0x00, 0x00, 0x3E, 0x3A, 0x4A, 0x68, 0x99, 0x75, 0x99, 0x6D, 0x86, 
   0xBD, 0x39, 0x5D, 0x83, 0x2D, 0x3A, 0x53, 0x55, 0x62, 0x62, 0xA4, 0x84, 0x8F, 0x47, 0x45, 0x7F, 
   0x1E, 0x44, 0x64, 0x56, 0x6B, 0xAA, 0x55, 0x63, 0x94, 0x5B, 0x5D, 0x8F, 0x49, 0x64, 0x8A, 0x3E, 
   0x65, 0x81, 0x5B, 0x76, 0xC7, 0x7C, 0x96, 0xC1, 0x30, 0x2D, 0xAB, 0x1F, 0x1B, 0x68, 0x59, 0x77, 
   0x38, 0x6B, 0x89, 0x6C, 0x2E, 0x40, 0xAE, 0x6C, 0x3A, 0x88, 0x66, 0x7F, 0xA6, 0x4E, 0xA1, 0xC1, 
   0x5C, 0x6C, 0x7A, 0x27, 0x1F, 0x45, 0x05, 0x31, 0x89, 0x62, 0x83, 0x8B, 0x75, 0x9B, 0x92, 0x44, 
   0x45, 0x9F, 0x7C, 0x6B, 0xA5, 0x6E, 0x79, 0x8D, 0x05, 0x11, 0x64, 0x00, 0x02, 0x7C, 0x6E, 0xB0, 
   0xAC, 0x70, 0xA7, 0xC4, 0x4E, 0x4B, 0xBD, 0x68, 0x54, 0x54, 0x28, 0x4D, 0x48, 0x10, 0x48, 0xD2, 
   0x6B, 0x81, 0xC1, 0x55, 0x64, 0x6B, 0x4E, 0x52, 0x6F, 0x48, 0x5B, 0xBE, 0x41, 0x4E, 0xA1, 0x2A, 
   0x37, 0x50, 0x53, 0x3E, 0x56, 0x6A, 0x7F, 0xBE, 0x4C, 0x84, 0xDA, 0x3F, 0x55, 0x65, 0x1D, 0x3C, 
   0x35, 0x57, 0x4C, 0x8A, 0x63, 0x36, 0x7C, 0x04, 0x55, 0x84, 0x4F, 0x9B, 0xBE, 0x8F, 0x8F, 0xAC, 
   0x4A, 0x2D, 0x75, 0x26, 0x53, 0x35, 0x36, 0x70, 0x7A, 0x4E, 0x4E, 0xBA, 0x71, 0x59, 0xAA, 0x5F, 
   0x53, 0x65, 0x0E, 0x65, 0x9C, 0x40, 0x5F, 0x73, 0x52, 0x4E, 0x5D, 0x36, 0x59, 0xB4, 0x4D, 0x53, 
   0x88, 0x4D, 0x4E, 0x6C, 0x36, 0x43, 0xA5, 0x48, 0x5F, 0x94, 0x54, 0x5A, 0x71, 0x33, 0x3E, 0x5B, 
   0x50, 0x6D, 0xB1, 0x67, 0x96, 0xB7, 0x61, 0x5C, 0x76, 0x27, 0x22, 0x47, 0x32, 0x66, 0x96, 0x54, 
   0x77, 0x8B, 0x5F, 0x4F, 0x6F, 0x4C, 0x69, 0xA7, 0x18, 0x2A, 0x83, 0x1E, 0x30, 0x3E, 0x43, 0x50, 
   0x68, 0xA0, 0xB3, 0xF3, 0x82, 0x8C, 0xEC, 0x00, 0x0C, 0x1B, 0x00, 0x15, 0x00, 0x40, 0x66, 0xAC, 
   0x8E, 0x7F, 0xFF, 0x83, 0x7F, 0x91, 0x31, 0x66, 0x4C, 0x0D, 0x36, 0x43, 0x51, 0x35, 0x49, 0x68, 
   0x5D, 0xA2, 0x45, 0x53, 0xCB, 0x22, 0x49, 0x91, 0x3E, 0x7D, 0x55, 0x67, 0x76, 0x5F, 0x4A, 0x42, 
   0x8D, 0x27, 0x46, 0x77, 0x48, 0x52, 0x83, 0x48, 0x4E, 0x8A, 0x2D, 0x81, 0x8A, 0x50, 0x64, 0x73, 
   0x6C, 0x3A, 0x73, 0x49, 0x4B, 0x95, 0x26, 0x57, 0x8E, 0x42, 0x58, 0x4F, 0x36, 0x52, 0x76, 0x30, 
   0x7A, 0x77, 0x26, 0x46, 0x79, 0x4A, 0x1F, 0xA8, 0x73, 0x70, 0xB9, 0x50, 0x93, 0x77, 0x21, 0x64, 
   0x36, 0x26, 0x34, 0x63, 0x4A, 0x1D, 0x92, 0x95, 0x84, 0xA3, 0x4F, 0x84, 0x80, 0x02, 0x33, 0x3C, 
   0x0D, 0x10, 0x7D, 0x4E, 0x56, 0xC3, 0x61, 0x8B, 0x8F, 0x5D, 0x75, 0x5B, 0x30, 0x3C, 0x55, 0x62, 
   0x42, 0x7F, 0x40, 0x49, 0xAE, 0x25, 0x7F, 0x70, 0x81, 0x80, 0x77, 0x54, 0x4C, 0x8F, 0x0A, 0x3B, 
   0x7F, 0x82, 0x74, 0xBE, 0x6B, 0x7F, 0x9A, 0x00, 0x3A, 0x3D, 0x59, 0x34, 0x42, 0x7C, 0x7A, 0x9A, 
   0x33, 0x93, 0xBE, 0x43, 0x77, 0x7A, 0x49, 0x2B, 0x46, 0x43, 0x47, 0x7B, 0x60, 0x6A, 0xB6, 0x21, 
   0x6B, 0x9A, 0x4A, 0x70, 0x89, 0x6D, 0x53, 0x72, 0x4B, 0x36, 0x6D, 0x4F, 0x6F, 0xC8, 0x53, 0x74, 
   0xAF, 0x03, 0x24, 0x2A, 0x11, 0x10, 0x30, 0x66, 0xA2, 0xA2, 0xA3, 0xA6, 0xCA, 0x7B, 0x69, 0xB6, 
   0x4A, 0x73, 0xC0, 0x41, 0x81, 0xAB, 0x34, 0x40, 0x42, 0x23, 0x33, 0x5F, 0x68, 0x56, 0xC1, 0x58, 
   0x7A, 0xC2, 0x41, 0x8B, 0x83, 0x4C, 0x4C, 0x71, 0x4C, 0x50, 0x88, 0x36, 0x40, 0x95, 0x43, 0x48, 
   0xA1, 0x3B, 0x80, 0x80, 0x88, 0x94, 0x67, 0xB1, 0x8F, 0xBA, 0x63, 0x91, 0xFF, 0x19, 0x4E, 0xA5, 
   0x05, 0x07, 0x35, 0x33, 0x62, 0x6C, 0x68, 0x91, 0xC8, 0x4F, 0x31, 0x85, 0x4A, 0x44, 0x7A, 0x72, 
   0x8F, 0xA2, 0x54, 0xC2, 0xBE, 0x1A, 0x37, 0x62, 0x2D, 0x00, 0x57, 0x6E, 0x6E, 0x93, 0x9D, 0xD8, 
   0xDF, 0x41, 0x93, 0xC2, 0x12, 0x3A, 0x4E, 0x62, 0x2C, 0x5F, 0x42, 0x3E, 0xB2, 0x4B, 0x76, 0xCC, 
   0x96, 0xD3, 0x9B, 0x8A, 0x98, 0xCC, 0x49, 0x28, 0xCE, 0x24, 0x27, 0x41, 0x3F, 0x84, 0x29, 0x61, 
   0x8C, 0xAE, 0x4A, 0x75, 0xF0, 0x1D, 0x47, 0x7F, 0x63, 0x74, 0x68, 0x8D, 0x69, 0xD3, 0x33, 0x4D, 
   0xB5, 0x18, 0x5A, 0x25, 0xA3, 0x74, 0x55, 0xB5, 0x93, 0xFF, 0x50, 0xAE, 0xF7, 0x2F, 0x83, 0x2C, 
   0x37, 0x5B, 0x71, 0x30, 0x18, 0xAF, 0x31, 0x35, 0x76, 0x5B, 0x71, 0x4E, 0x40, 0x85, 0x94, 0x7A, 
   0x98, 0xD5, 0x85, 0x9B, 0xEF, 0x55, 0x3C, 0x62, 0x04, 0x02, 0x00, 0x28, 0x76, 0x85, 0xA3, 0xB1, 
   0xF5, 0x92, 0x61, 0xC1, 0x51, 0x38, 0x47, 0x15, 0x65, 0x67, 0x2B, 0x76, 0xA0, 0x65, 0x71, 0x79, 
   0x55, 0x5F, 0x7A, 0x03, 0x32, 0x7C, 0x56, 0x56, 0x5E, 0xBF, 0x91, 0xC2, 0x9B, 0xC4, 0xEF, 0x13, 
   0x5B, 0x9B, 0x26, 0x14, 0x74, 0x42, 0x79, 0x7B, 0x59, 0x78, 0x83, 0x59, 0x3E, 0x81, 0x42, 0x64, 
   0x42, 0x31, 0x49, 0x45, 0x39, 0x35, 0xD7, 0x8A, 0x96, 0x89, 0x6D, 0x84, 0x77, 0x17, 0x2C, 0xBA, 
   0x39, 0x3D, 0x69, 0x78, 0x8D, 0x51, 0x51, 0x59, 0xB7, 0x45, 0x42, 0x79, 0x34, 0x4F, 0x4C, 0x79, 
   0x95, 0xB8, 0xBB, 0xB6, 0xB2, 0x29, 0x47, 0x70, 0x00, 0x00, 0x0F, 0x45, 0x1C, 0x61, 0x94, 0xCB, 
   0xFD, 0x6E, 0xCC, 0xCA, 0x68, 0x6E, 0x71, 0x33, 0x20, 0x3D, 0x22, 0x4C, 0x82, 0x72, 0x63, 0xAA, 
   0x7D, 0x8B, 0xA9, 0x64, 0x68, 0x96, 0x29, 0x28, 0x5B, 0x01, 0x19, 0x28, 0x5A, 0x51, 0x8C, 0x95, 
   0xC8, 0xBB, 0x60, 0xF5, 0xB3, 0x41, 0x8F, 0x77, 0x2E, 0x3F, 0x22, 0x1F, 0x38, 0x6E, 0x6B, 0x32, 
   0xCC, 0x6D, 0x55, 0xBC, 0x73, 0x6D, 0x8C, 0x44, 0x74, 0x56, 0x31, 0x68, 0x61, 0x5D, 0x5B, 0x8F, 
   0x5C, 0x5A, 0xC2, 0x12, 0x43, 0x1D, 0x3E, 0x44, 0x6B, 0x39, 0x2E, 0x4A, 0x5B, 0x64, 0xA2, 0x71, 
   0xA4, 0xE3, 0x37, 0xA3, 0x9E, 0x30, 0x2A, 0x68, 0x4D, 0x50, 0x94, 0x53, 0x84, 0xBB, 0x54, 0x67, 
   0x6A, 0x71, 0x5B, 0x63, 0x4E, 0x71, 0xAE, 0x0A, 0x44, 0x87, 0x6B, 0x51, 0x83, 0xAA, 0xA8, 0xC7, 
   0x46, 0xAB, 0xAE, 0x00, 0x08, 0x50, 0x2B, 0x00, 0x3E, 0x50, 0x93, 0xAD, 0x64, 0xAC, 0xB0, 0x70, 
   0x67, 0x94, 0x37, 0x27, 0x83, 0x4D, 0x75, 0x93, 0x73, 0x7F, 0x82, 0x39, 0x23, 0x82, 0x1D, 0x24, 
   0x83, 0x45, 0x98, 0xB6, 0x74, 0x7D, 0x83, 0x4E, 0x3A, 0x6C, 0x6F, 0x9B, 0x89, 0x50, 0x83, 0xB8, 
   0x1C, 0x20, 0xB7, 0x59, 0x5E, 0x76, 0x42, 0x8B, 0x68, 0x48, 0x51, 0x7E, 0x53, 0x60, 0xA0, 0x3C, 
   0x49, 0x7E, 0x47, 0x66, 0x68, 0x2A, 0x50, 0xA2, 0x31, 0x2F, 0xB3, 0x70, 0x90, 0x9B, 0x86, 0xAC, 
   0x88, 0x19, 0x43, 0x4E, 0x07, 0x00, 0x60, 0x4D, 0x65, 0xCF, 0x83, 0x94, 0xB9, 0x5B, 0x55, 0x83, 
   0x38, 0x43, 0x59, 0x49, 0x59, 0x5D, 0x4E, 0x43, 0x92, 0x4E, 0x71, 0x99, 0x4E, 0x6B, 0x83, 0x32, 
   0x32, 0x94, 0x5F, 0x66, 0x8D, 0x53, 0x7D, 0x91, 0x3B, 0x5A, 0x62, 0x3F, 0x3C, 0x46, 0x29, 0x53, 
   0x98, 0x53, 0x60, 0xAC, 0x5A, 0x77, 0x85, 0x56, 0x60, 0x9C, 0x45, 0x3E, 0x9C, 0x51, 0x5C, 0x96, 
   0x79, 0x7F, 0x7E, 0x55, 0x78, 0x8D, 0x09, 0x32, 0x87, 0x31, 0x4E, 0x80, 0x5A, 0x44, 0x6A, 0x50, 
   0x8A, 0x83, 0x72, 0x8F, 0xD9, 0x6B, 0x49, 0x9E, 0x13, 0x37, 0x40, 0x29, 0x4E, 0x71, 0x41, 0x6B, 
   0x83, 0x3E, 0x4B, 0x79, 0x93, 0x8C, 0xAC, 0x6E, 0x81, 0x8F, 0x00, 0x35, 0x4A, 0x13, 0x40, 0x72, 
   0xC1, 0x75, 0x91, 0x62, 0x97, 0xAD, 0x1C, 0x51, 0x9A, 0x63, 0x4E, 0x5E, 0x46, 0x51, 0x5C, 0x18, 
   0x35, 0x78, 0x67, 0x4D, 0x9B, 0x5B, 0x81, 0x9B, 0x0B, 0x60, 0x61, 0x33, 0x50, 0x77, 0x6D, 0x82, 
   0x89, 0x51, 0x3D, 0x7E, 0x22, 0x48, 0x83, 0x3D, 0x70, 0x94, 0x54, 0x53, 0x55, 0x4F, 0x47, 0x78, 
   0x27, 0x74, 0xAD, 0x55, 0x63, 0x90, 0x72, 0x2A, 0x61, 0x2D, 0x58, 0x6B, 0x15, 0x7A, 0x66, 0x4E, 
   0x4C, 0x83, 0x49, 0x2A, 0xA1, 0x5B, 0x4D, 0x79, 0x54, 0x87, 0xA0, 0x31, 0x70, 0x7C, 0x21, 0x3B, 
   0x47, 0x45, 0x46, 0x75, 0x84, 0x73, 0xC0, 0x34, 0x40, 0x7B, 0x2D, 0x4B, 0x2B, 0x64, 0x7D, 0x7C, 
   0x24, 0x3E, 0xBC, 0x00, 0x11, 0x78, 0x5B, 0x68, 0x5B, 0x80, 0xAE, 0x7D, 0x6E, 0x59, 0x89, 0x18, 
   0x03, 0x73, 0x18, 0x71, 0x6E, 0x47, 0x7F, 0x7B, 0x55, 0x4D, 0x84, 0x67, 0x76, 0x9D, 0x88, 0x81, 
   0xAD, 0x36, 0x73, 0x83, 0x18, 0x37, 0x58, 0x24, 0x09, 0x58, 0x49, 0x50, 0x8E, 0x89, 0x9D, 0xB2, 
   0x7D, 0x9E, 0x8A, 0x20, 0x3C, 0x8F, 0x08, 0x18, 0x5B, 0x32, 0x47, 0x41, 0x68, 0x78, 0x9A, 0x91, 
   0xAC, 0xEC, 0x6D, 0xA4, 0xBD, 0x09, 0x11, 0x53, 0x03, 0x04, 0x4C, 0x6B, 0x68, 0x70, 0x78, 0x82, 
   0xBC, 0x4A, 0x99, 0xCD, 0x1C, 0x4D, 0x4E, 0x39, 0x04, 0x37, 0x59, 0x62, 0x8F, 0x72, 0x9F, 0x9A, 
   0x61, 0x74, 0xAE, 0x50, 0x7F, 0xB5, 0x54, 0x7D, 0xA2, 0x52, 0x5D, 0x84, 0x3A, 0x44, 0x77, 0x45, 
   0x4F, 0x98, 0x67, 0x78, 0x86, 0x50, 0x72, 0x8D, 0x18, 0x45, 0x7D, 0x2C, 0x52, 0xB7, 0x8A, 0x7D, 
   0x90, 0x8B, 0x8B, 0x63, 0x40, 0x64, 0x6B, 0x28, 0x80, 0xDA, 0x66, 0x7E, 0xD9, 0x65, 0x4E, 0x5E, 
   0x36, 0x47, 0x62, 0x41, 0x6A, 0x9B, 0x3C, 0x9E, 0xAD, 0x81, 0x69, 0xA2, 0x4E, 0x24, 0x74, 0x0F, 
   0x42, 0x9B, 0x54, 0x89, 0x89, 0x7D, 0x8F, 0x7E, 0x39, 0x61, 0x8B, 0x1D, 0x4B, 0xC0, 0x75, 0x6F, 
   0x8D, 0x9D, 0xA8, 0x71, 0x46, 0x7E, 0xB4, 0x1B, 0x25, 0x86, 0x1B, 0x1A, 0x53, 0x41, 0x95, 0x8F, 
   0x90, 0x92, 0xF3, 0xA2, 0x6B, 0x9D, 0x4B, 0x75, 0x79, 0x31, 0x62, 0xB6, 0x62, 0x56, 0x9D, 0x46, 
   0x46, 0x36, 0x46, 0x6F, 0x66, 0x7E, 0xAE, 0xFF, 0x39, 0x4B, 0xD4, 0x0C, 0x1C, 0x6A, 0x5E, 0x6D, 
   0x3A, 0x78, 0x5A, 0x6F, 0x4D, 0x86, 0xD2, 0x86, 0x9F, 0xA1, 0x89, 0xA3, 0x9A, 0x3C, 0x88, 0xB5, 
   0x22, 0x33, 0x96, 0x4E, 0x35, 0x88, 0x48, 0x35, 0x54, 0x4F, 0x65, 0x92, 0x5B, 0x8F, 0xA9, 0x45, 
   0x7F, 0xA3, 0x56, 0x7D, 0x69, 0x61, 0x31, 0x6E, 0x55, 0x48, 0x8D, 0x0C, 0x82, 0xCC, 0x4B, 0x7D, 
   0xB9, 0xA6, 0x5F, 0x44, 0x50, 0x58, 0x5E, 0x0F, 0x46, 0x93, 0x42, 0x69, 0x84, 0x65, 0x81, 0xB9, 
   0x28, 0x39, 0x86, 0x2B, 0x78, 0x38, 0x89, 0x9B, 0xA7, 0xA7, 0x78, 0xD0, 0x5A, 0x53, 0xB1, 0x44, 
   0x50, 0x77, 0x1E, 0x3E, 0x4B, 0x07, 0x5A, 0x55, 0x59, 0x8E, 0xB5, 0x99, 0x92, 0x92, 0x6B, 0x35, 
   0x47, 0x20, 0x2F, 0x69, 0x25, 0x53, 0x71, 0x5B, 0x61, 0x8B, 0x84, 0x9B, 0xAF, 0x56, 0x9A, 0xA3, 
   0x33, 0x26, 0x8A, 0x3A, 0x1A, 0x61, 0x69, 0x76, 0x50, 0x75, 0x8E, 0xA0, 0x73, 0x6B, 0xB6, 0x37, 
   0x6E, 0x60, 0x23, 0x28, 0x80, 0x4F, 0x32, 0x7F, 0x38, 0x4A, 0x57, 0x08, 0x54, 0x64, 0x82, 0x79, 
   0xAA, 0x95, 0x8A, 0xA9, 0x28, 0x61, 0x69, 0x54, 0x63, 0x62, 0x5F, 0x3F, 0x96, 0x2D, 0x3F, 0x80, 
   0x5A, 0x79, 0x8B, 0x64, 0x90, 0x8E, 0x4B, 0x55, 0x69, 0x1C, 0x2C, 0x4C, 0x0C, 0x18, 0x53, 0x4F, 
   0x5C, 0x72, 0xA7, 0xD1, 0x8F, 0x95, 0xA6, 0x78, 0x1F, 0x28, 0x94, 0x00, 0x36, 0x7D, 0x30, 0x36, 
   0x51, 0x83, 0x5A, 0x97, 0x8A, 0x7E, 0x97, 0x54, 0x6D, 0x7F, 0x1F, 0x45, 0x83, 0x3A, 0x4F, 0x93, 
   0x79, 0x5F, 0x5E, 0x2F, 0x4E, 0x63, 0x5C, 0x51, 0x73, 0x61, 0x46, 0x5D, 0x5B, 0x6F, 0xBF, 0x4E, 
   0x91, 0xBF, 0x41, 0x4C, 0x84, 0x1F, 0x35, 0x5A, 0x59, 0x6F, 0x66, 0x76, 0xA2, 0xA1, 0x5A, 0x5C, 
   0xF7, 0x37, 0x3E, 0x8F, 0x47, 0x49, 0x32, 0x4D, 0x77, 0x91, 0x42, 0x61, 0xA8, 0x64, 0x5B, 0x64, 
   0x63, 0x5B, 0x97, 0x34, 0x71, 0xAD, 0x38, 0x6B, 0x62, 0x4A, 0x37, 0x69, 0x50, 0x49, 0xB4, 0x57, 
   0xA5, 0xA5, 0x46, 0x71, 0x72, 0x42, 0x2C, 0x8F, 0x70, 0x81, 0xB6, 0x74, 0xA6, 0x8E, 0x3F, 0x10, 
   0x8C, 0x0A, 0x00, 0x58, 0x34, 0x76, 0x60, 0x7B, 0xB3, 0xBE, 0x7C, 0x70, 0xCB, 0x69, 0x73, 0x86, 
   0x3F, 0x49, 0x84, 0x20, 0x41, 0xAF, 0x41, 0x5D, 0x84, 0x4D, 0x6D, 0x49, 0x3D, 0x46, 0x55, 0x6A, 
   0x7E, 0xB2, 0x36, 0x55, 0xC9, 0x1A, 0x39, 0x5D, 0x54, 0x5C, 0x4C, 0x6C, 0x74, 0xC5, 0x5A, 0x6E, 
   0xBA, 0x36, 0x68, 0x5E, 0x1A, 0x60, 0x8A, 0x64, 0x59, 0x8F, 0x59, 0x19, 0x7E, 0x15, 0x64, 0x72, 
   0x43, 0x87, 0x99, 0x66, 0x38, 0xA4, 0x55, 0x5A, 0x82, 0x3D, 0x66, 0x6C, 0x20, 0x67, 0x95, 0x49, 
   0x6C, 0xA6, 0x71, 0x50, 0xA0, 0x54, 0x55, 0x87, 0x40, 0x71, 0x7A, 0x17, 0x48, 0x4D, 0x2E, 0x38, 
   0x7C, 0x3C, 0x8E, 0xB7, 0x61, 0x61, 0x91, 0x63, 0x45, 0x82, 0x42, 0x51, 0xB5, 0x7A, 0x84, 0xCA, 
   0x56, 0x67, 0x72, 0x1B, 0x32, 0x3C, 0x36, 0x4E, 0x9D, 0x37, 0x5F, 0x93, 0x61, 0x44, 0x56, 0x62, 
   0x61, 0xC9, 0x4B, 0x6D, 0xB2, 0x3F, 0x4B, 0x6C, 0x65, 0x73, 0x87, 0x48, 0x77, 0xA7, 0x40, 0x4E, 
   0x82, 0x29, 0x15, 0x31, 0x3C, 0x3B, 0x2D, 0x60, 0xD3, 0xDB, 0x77, 0x90, 0xFF, 0x3D, 0x38, 0x40, 
   0x00, 0x5E, 0x21, 0x55, 0x4C, 0xA6, 0x9A, 0x7F, 0xBF, 0x3E, 0x72, 0xB8, 0x30, 0x37, 0x92, 0x3F, 
   0x41, 0x44, 0x28, 0x63, 0x37, 0x50, 0x4D, 0x82, 0x50, 0x43, 0xAC, 0x23, 0x72, 0x79, 0x40, 0x68, 
   0x62, 0x85, 0x6D, 0x95, 0x40, 0x72, 0x7D, 0x22, 0x48, 0x54, 0x4E, 0x4D, 0x71, 0x31, 0x52, 0x83, 
   0x26, 0x69, 0x96, 0x49, 0x5E, 0x96, 0x5C, 0x59, 0x7F, 0x6D, 0x6F, 0x84, 0x3F, 0x51, 0x73, 0x2E, 
   0x2A, 0x7E, 0x6B, 0x7B, 0x8E, 0x59, 0x8C, 0x87, 0x08, 0x4D, 0x42, 0x14, 0x35, 0x70, 0x5B, 0x3B, 
   0xAA, 0x84, 0x92, 0x8D, 0x51, 0x80, 0x5E, 0x39, 0x3A, 0x4D, 0x4F, 0x34, 0x81, 0x49, 0x62, 0xAB, 
   0x54, 0x7E, 0x83, 0x2C, 0x56, 0x5B, 0x16, 0x28, 0x66, 0x72, 0x40, 0x8E, 0x56, 0x7B, 0x95, 0x24, 
   0x76, 0x73, 0x52, 0x3E, 0x5D, 0x4D, 0x3F, 0x70, 0x33, 0x5E, 0x9C, 0x78, 0x87, 0xC5, 0x8D, 0xA8, 
   0xB7, 0x12, 0x3E, 0x4D, 0x00, 0x00, 0x30, 0x68, 0x52, 0x92, 0x59, 0x7D, 0xC8, 0x38, 0x62, 0x7E, 
   0x65, 0x52, 0x6C, 0x59, 0x5D, 0x6C, 0x1B, 0x52, 0x95, 0x28, 0x4E, 0x70, 0x7A, 0x8F, 0x8E, 0x8B, 
   0x9A, 0xAC, 0x56, 0x53, 0xAB, 0x1F, 0x49, 0x8B, 0x24, 0x26, 0x56, 0x26, 0x3A, 0x35, 0x62, 0x87, 
   0x99, 0x91, 0xAB, 0xD5, 0x78, 0x70, 0xD3, 0x03, 0x18, 0x3B, 0x0E, 0x02, 0x23, 0x44, 0x72, 0x82, 
   0x60, 0xAB, 0xB1, 0x7A, 0x6A, 0xAB, 0x8B, 0x9C, 0xDF, 0x54, 0x82, 0xBA, 0x1E, 0x4B, 0x60, 0x3E, 
   0x2B, 0x51, 0x49, 0x31, 0x73, 0x22, 0x60, 0xA3, 0x4D, 0x68, 0xA5, 0x6C, 0x7C, 0x89, 0x74, 0x72, 
   0x73, 0x67, 0x61, 0x7B, 0x47, 0x7D, 0xDC, 0x07, 0x4E, 0xAD, 0x1F, 0x3C, 0x29, 0x82, 0x54, 0x7E, 
   0x7E, 0xAB, 0xCA, 0x55, 0x77, 0x80, 0x43, 0x43, 0x69, 0x4D, 0x74, 0xB4, 0x3B, 0x79, 0xCF, 0x42, 
   0x18, 0x50, 0x44, 0x3D, 0x44, 0x78, 0xAD, 0xA1, 0x73, 0xB3, 0xD6, 0x2E, 0x5C, 0x86, 0x18, 0x38, 
   0x63, 0x8B, 0x6B, 0xA8, 0xA1, 0x8E, 0xA9, 0x16, 0x5B, 0xB3, 0x09, 0x75, 0x62, 0x49, 0x37, 0x68, 
   0x4D, 0x3E, 0xC0, 0x6D, 0x7A, 0x94, 0x90, 0xB0, 0x7F, 0x66, 0x8D, 0xDB, 0x2B, 0x35, 0xC8, 0x47, 
   0x34, 0x5F, 0x74, 0x90, 0x43, 0x61, 0x97, 0xCD, 0x26, 0x6D, 0xE3, 0x0A, 0x39, 0x47, 0x51, 0x46, 
   0x36, 0x8D, 0x82, 0xE2, 0x55, 0x7F, 0xD7, 0x1C, 0x91, 0x4D, 0x5A, 0x67, 0x52, 0x82, 0x6B, 0xE2, 
   0x53, 0x74, 0xC0, 0x3A, 0x55, 0x58, 0x54, 0x65, 0x9A, 0x53, 0x53, 0xC6, 0x59, 0x75, 0x95, 0x31, 
   0x6F, 0x48, 0x38, 0x1A, 0x1C, 0x3A, 0x72, 0x82, 0x80, 0xC3, 0xFF, 0xA1, 0x55, 0xD7, 0x21, 0x25, 
   0x16, 0x00, 0x7F, 0x50, 0x6A, 0x6E, 0x79, 0x99, 0x50, 0x87, 0x49, 0x40, 0x95, 0x05, 0x48, 0x8C, 
   0x4C, 0x95, 0x83, 0xBB, 0x90, 0xB2, 0x6B, 0x89, 0xB2, 0x25, 0x74, 0xB4, 0x61, 0x16, 0x76, 0x5F, 
   0x48, 0x55, 0x2A, 0x97, 0x69, 0x40, 0x41, 0x8B, 0x4D, 0x4C, 0x7B, 0x5A, 0x79, 0x87, 0x66, 0x56, 
   0xB9, 0x5F, 0x45, 0x6D, 0x30, 0x73, 0x19, 0x1A, 0x47, 0x9E, 0x50, 0x43, 0xC9, 0x8A, 0x9A, 0x5D, 
   0x4B, 0x71, 0x7E, 0x24, 0x32, 0x84, 0x5E, 0x49, 0x7E, 0x97, 0xA9, 0x9A, 0x7D, 0x84, 0x98, 0x1D, 
   0x15, 0x7E, 0x00, 0x19, 0x2D, 0x44, 0x38, 0x5C, 0x86, 0x6E, 0xD5, 0x70, 0xBF, 0x9C, 0x20, 0x31, 
   0x3F, 0x42, 0x25, 0x32, 0x70, 0x80, 0x8D, 0x3D, 0x79, 0xC1, 0x43, 0x55, 0x66, 0x70, 0x49, 0x6B, 
   0x42, 0x33, 0x88, 0x46, 0x73, 0x6A, 0x57, 0x77, 0x63, 0x5B, 0x3C, 0x7E, 0x1D, 0x37, 0x7E, 0x09, 
   0x3A, 0x5D, 0x95, 0x5F, 0x76, 0x90, 0x4D, 0x9A, 0x4F, 0x55, 0xAB, 0x2A, 0x42, 0x59, 0x2A, 0x52, 
   0x4D, 0x5E, 0x5E, 0x82, 0x65, 0x5A, 0x84, 0x4E, 0x5B, 0xA1, 0x63, 0x7D, 0x99, 0x2E, 0x49, 0x52, 
   0x1E, 0x5F, 0x50, 0x90, 0x48, 0x9A, 0x5C, 0x7D, 0xBD, 0x67, 0x93, 0xE4, 0x5A, 0x6E, 0x6F, 0x2B, 
   0x1C, 0x60, 0x3B, 0x2D, 0x76, 0x64, 0x96, 0x99, 0x48, 0x81, 0x84, 0x4E, 0x5E, 0x91, 0x5E, 0x62, 
   0xA3, 0x2B, 0x55, 0xD0, 0x4D, 0x49, 0x9B, 0x7A, 0x70, 0x59, 0x45, 0x81, 0x79, 0x00, 0x26, 0x84, 
   0x4C, 0x38, 0x58, 0xA2, 0xB2, 0xAF, 0x46, 0xAC, 0xCB, 0x38, 0x32, 0x75, 0x26, 0x07, 0x47, 0x2C, 
   0x58, 0x8D, 0x50, 0x93, 0xC2, 0x6F, 0x71, 0x90, 0x4E, 0x5F, 0x89, 0x64, 0x5D, 0xC6, 0x62, 0x66, 
   0x63, 0x21, 0x05, 0x47, 0x21, 0x2A, 0x8E, 0x62, 0xB6, 0xBF, 0x4D, 0x86, 0xBA, 0x64, 0x4D, 0x91, 
   0x6E, 0x94, 0x7D, 0x38, 0x64, 0x8D, 0x14, 0x24, 0x9C, 0x53, 0x46, 0x62, 0x64, 0x96, 0x62, 0x32, 
   0x5D, 0xB2, 0x49, 0x3A, 0x90, 0x60, 0x5C, 0x7F, 0x55, 0x7E, 0x90, 0x3E, 0x45, 0x65, 0x38, 0x24, 
   0x95, 0x44, 0x97, 0xFB, 0x93, 0xB2, 0x8D, 0x3D, 0x3D, 0x3F, 0x03, 0x07, 0x66, 0x53, 0x45, 0x8E, 
   0x55, 0x59, 0xAC, 0x61, 0x8D, 0x8F, 0x55, 0x5B, 0x78, 0x2C, 0x22, 0x8F, 0x49, 0x72, 0x8A, 0x55, 
   0x73, 0x8F, 0x4F, 0x56, 0xA5, 0x4E, 0x55, 0x5B, 0x41, 0x44, 0x67, 0x2F, 0x66, 0xC7, 0x34, 0x60, 
   0x66, 0x41, 0x55, 0x3E, 0x4A, 0x45, 0xA7, 0x4D, 0x57, 0xB5, 0x97, 0x90, 0x99, 0x51, 0x73, 0x7A, 
   0x21, 0x2D, 0x8E, 0x37, 0x4E, 0x70, 0x60, 0x5A, 0x48, 0x4F, 0x5B, 0x78, 0x3F, 0x77, 0xE0, 0x61, 
   0x39, 0x9C, 0x34, 0x3F, 0x46, 0x4B, 0x85, 0x8A, 0x67, 0x91, 0xD3, 0x7C, 0x5C, 0x8C, 0x19, 0x37, 
   0x44, 0x27, 0x2B, 0x59, 0x00, 0x33, 0x71, 0x4A, 0x44, 0x8B, 0xD5, 0xE1, 0xD1, 0x62, 0xA1, 0xAD, 
   0x00, 0x1B, 0x33, 0x2B, 0x2F, 0x3E, 0x77, 0x6D, 0x9C, 0x71, 0x6D, 0xDC, 0x3D, 0x67, 0xB7, 0x4C, 
   0x65, 0x51, 0x3A, 0x41, 0x30, 0x18, 0x2A, 0x53, 0x5D, 0x5E, 0x8F, 0x57, 0x5B, 0xAE, 0x1E, 0x62, 
   0x91, 0x41, 0x8B, 0x8A, 0x9C, 0x73, 0x60, 0x51, 0x3D, 0x71, 0x00, 0x4D, 0x88, 0x3C, 0x5D, 0x7D, 
   0x70, 0x30, 0x72, 0x21, 0x53, 0x5C, 0x22, 0xA9, 0x8B, 0x5D, 0x4D, 0x9D, 0x75, 0x0D, 0x97, 0x5D, 
   0x58, 0x7E, 0x2C, 0x8C, 0x7B, 0x23, 0x64, 0x5C, 0x1E, 0x40, 0x57, 0x37, 0x23, 0x70, 0x7D, 0x7A, 
   0xBB, 0x50, 0x7B, 0xAA, 0x0B, 0x42, 0x2C, 0x48, 0x5D, 0x5F, 0x38, 0x51, 0xB6, 0x2E, 0x35, 0x8E, 
   0x68, 0x63, 0x5B, 0x78, 0x95, 0x8E, 0x43, 0x33, 0x89, 0x00, 0x00, 0x6C, 0x21, 0x63, 0x78, 0x96, 
   0x99, 0x7F, 0x59, 0x56, 0x75, 0x27, 0x29, 0x71, 0x70, 0x79, 0xB2, 0x5E, 0x79, 0xC8, 0x12, 0x5C, 
   0x4E, 0x45, 0x49, 0x53, 0x4B, 0x5F, 0x92, 0x25, 0x5F, 0x8E, 0x63, 0x65, 0x83, 0x4C, 0x43, 0x93, 
   0x03, 0x3E, 0x65, 0x49, 0x5D, 0x44, 0x84, 0x6B, 0x97, 0x6E, 0x88, 0xD8, 0x4B, 0x70, 0x8D, 0x33, 
   0x30, 0x4D, 0x43, 0x3F, 0x7F, 0x54, 0x61, 0x96, 0x42, 0x73, 0x74, 0x1B, 0x46, 0x74, 0x44, 0x47, 
   0x5A, 0x90, 0x76, 0xA6, 0x78, 0x8D, 0xDA, 0x24, 0x6E, 0xAE, 0x00, 0x2E, 0x28, 0x00, 0x00, 0x29, 
   0x74, 0x6E, 0x7F, 0xAD, 0xC3, 0xD0, 0x6F, 0x8C, 0xDA, 0x45, 0x78, 0xD2, 0x63, 0x74, 0x94, 0x2C, 
   0x49, 0x4B, 0x04, 0x36, 0x50, 0x34, 0x2C, 0x90, 0x7C, 0x90, 0xAF, 0x78, 0x98, 0x72, 0x77, 0x66, 
   0x86, 0x30, 0x70, 0xE7, 0x3F, 0x68, 0xC9, 0x38, 0x2E, 0x37, 0x23, 0x41, 0x48, 0x54, 0x8D, 0xA6, 
   0x7F, 0x95, 0xC0, 0x74, 0x72, 0xBA, 0x6B, 0x53, 0x80, 0x02, 0x41, 0x96, 0x2A, 0x6E, 0x96, 0x70, 
   0x5D, 0x85, 0x60, 0x4E, 0x7F, 0x23, 0x67, 0xB3, 0x73, 0xA1, 0x96, 0x78, 0x88, 0x84, 0x49, 0x40, 
   0x78, 0x1B, 0x0C, 0x9B, 0x5B, 0x65, 0xA1, 0x89, 0xE4, 0x85, 0x3E, 0x66, 0x9F, 0x26, 0x19, 0x7B, 
   0x38, 0x30, 0x27, 0x30, 0x67, 0x79, 0x88, 0x92, 0xE3, 0x84, 0x83, 0xA2, 0x3F, 0x7C, 0x91, 0x59, 
   0x69, 0xC9, 0x5D, 0x45, 0xC1, 0x33, 0x55, 0x4C, 0x49, 0x73, 0x35, 0x6B, 0x6E, 0xBA, 0x33, 0x53, 
   0xE9, 0x4B, 0x6B, 0x98, 0x74, 0x99, 0x51, 0x47, 0x70, 0x83, 0x26, 0x3C, 0x78, 0x71, 0x53, 0x5D, 
   0x9F, 0x8D, 0xA3, 0x5F, 0x98, 0xD7, 0x3E, 0x8A, 0xA1, 0x24, 0x69, 0xAD, 0x40, 0x44, 0x3C, 0x5D, 
   0x06, 0x15, 0x32, 0x4D, 0x90, 0x4B, 0xAC, 0xD8, 0x80, 0xA2, 0xCC, 0x8A, 0x77, 0x78, 0x47, 0x41, 
   0x74, 0x00, 0x4B, 0x62, 0x2A, 0x78, 0x79, 0x8D, 0x56, 0x80, 0x4B, 0x35, 0x8E, 0x25, 0x65, 0x59, 
   0x86, 0x9A, 0xB2, 0x97, 0x99, 0xFC, 0x33, 0x41, 0xB4, 0x20, 0x38, 0x59, 0x30, 0x75, 0x59, 0x59, 
   0x57, 0x6D, 0x5E, 0x51, 0x72, 0x58, 0x72, 0x67, 0x4C, 0x4F, 0x6E, 0x1F, 0x2D, 0xB3, 0x53, 0x77, 
   0x8B, 0x8D, 0x77, 0x68, 0x3D, 0x3E, 0x95, 0x31, 0x50, 0x5D, 0x3D, 0x57, 0x6A, 0x3F, 0x3E, 0xAA, 
   0x69, 0x84, 0x73, 0x75, 0xA6, 0x9C, 0x52, 0x6B, 0xD4, 0x66, 0x56, 0x70, 0x41, 0x37, 0x61, 0x2D, 
   0x2A, 0x5F, 0x3E, 0x53, 0x5F, 0x2A, 0x78, 0x83, 0x7C, 0x90, 0xA7, 0x9E, 0x57, 0xA1, 0x2A, 0x50, 
   0x6B, 0x00, 0x3E, 0x4D, 0x57, 0x55, 0x73, 0x7B, 0x60, 0x73, 0x53, 0x4F, 0x6E, 0x4D, 0x71, 0x7A, 
   0x57, 0x4F, 0x86, 0x23, 0x5B, 0x86, 0x5C, 0x66, 0x7A, 0x46, 0x4E, 0x7E, 0x5D, 0x5E, 0x66, 0x5D, 
   0x48, 0x56, 0x15, 0x3E, 0x69, 0x60, 0x78, 0xAA, 0x7E, 0x78, 0x88, 0x60, 0x49, 0x52, 0x52, 0x5E, 
   0x5C, 0x17, 0x3B, 0x74, 0x1D, 0x3B, 0x98, 0x6E, 0x5E, 0x9F, 0x5D, 0x5A, 0x7C, 0x3A, 0x71, 0x68, 
   0x3A, 0x54, 0x61, 0x73, 0x65, 0x71, 0x4F, 0x89, 0xC4, 0x5A, 0xAF, 0xF0, 0x37, 0x45, 0x85, 0x47, 
   0x1B, 0x26, 0x3C, 0x4A, 0x6A, 0x65, 0x86, 0x94, 0x6A, 0x8C, 0xBE, 0x30, 0x4D, 0x91, 0x3B, 0x51, 
   0x64, 0x74, 0x72, 0xA9, 0x5D, 0x82, 0xF8, 0x45, 0x36, 0x94, 0x44, 0x30, 0x3C, 0x44, 0x58, 0x6E, 
   0x2F, 0x65, 0xA8, 0x70, 0x4B, 0x7C, 0x86, 0x8A, 0xB0, 0x39, 0xA5, 0xA9, 0x0F, 0x2A, 0x53, 0x36, 
   0x07, 0x5F, 0x3E, 0x6F, 0xBC, 0x5C, 0xB4, 0xC2, 0x63, 0x58, 0x93, 0x41, 0x24, 0x64, 0x4C, 0x52, 
   0x6A, 0x67, 0xA7, 0x93, 0x38, 0x57, 0xA6, 0x21, 0x00, 0x8A, 0x4A, 0x93, 0x96, 0x57, 0xAC, 0xB2, 
   0x58, 0x57, 0x83, 0x73, 0x60, 0x65, 0x33, 0x4D, 0x77, 0x2B, 0x52, 0xC1, 0x36, 0x5D, 0xCB, 0x49, 
   0x4C, 0x52, 0x5B, 0x69, 0x5C, 0x56, 0x7F, 0xA6, 0x4F, 0x45, 0x86, 0x21, 0x28, 0x78, 0x3F, 0x6D, 
   0xB8, 0x84, 0x74, 0xAD, 0x50, 0x5D, 0xAB, 0x32, 0x72, 0x6A, 0x36, 0x5E, 0x73, 0x3D, 0x13, 0x7E, 
   0x65, 0x51, 0x8A, 0x3E, 0x65, 0x79, 0x3E, 0x83, 0x90, 0x55, 0x67, 0xA7, 0x66, 0x2E, 0x84, 0x4F, 
   0x56, 0x72, 0x3E, 0x8A, 0x61, 0x43, 0x56, 0x85, 0x4E, 0x45, 0xCB, 0x5F, 0x67, 0xAF, 0x36, 0x72, 
   0x84, 0x31, 0x28, 0x4A, 0x33, 0x46, 0x74, 0x79, 0xAD, 0xBF, 0x73, 0x68, 0xA3, 0x28, 0x39, 0x69, 
   0x27, 0x5A, 0x84, 0x4F, 0x4F, 0x8A, 0x50, 0x55, 0x5D, 0x5B, 0x67, 0xB2, 0x4F, 0x6C, 0xAD, 0x11, 
   0x50, 0x74, 0x61, 0x3A, 0x74, 0x62, 0x74, 0xAD, 0x45, 0x85, 0xA1, 0x4F, 0x4B, 0x77, 0x5E, 0x39, 
   0x75, 0x02, 0x5B, 0x91, 0x35, 0x56, 0xA0, 0x6B, 0x58, 0x5B, 0x35, 0x5B, 0x4C, 0x74, 0xA7, 0xDB, 
   0xA0, 0x78, 0xC4, 0x0A, 0x41, 0x29, 0x03, 0x34, 0x61, 0x6A, 0x46, 0xB2, 0x65, 0x9B, 0xA7, 0x4E, 
   0x67, 0x9E, 0x36, 0x26, 0x51, 0x41, 0x47, 0x44, 0x48, 0x4E, 0x61, 0x6A, 0x4F, 0xA2, 0x4C, 0x67, 
   0xB9, 0x29, 0x73, 0x62, 0x3B, 0x61, 0x6C, 0x79, 0x60, 0x8E, 0x45, 0x4E, 0x77, 0x21, 0x42, 0x71, 
   0x37, 0x64, 0x71, 0x4E, 0x69, 0x67, 0x32, 0x52, 0x85, 0x2F, 0x4D, 0xAF, 0x75, 0x75, 0xA3, 0x9B, 
   0x75, 0x94, 0x15, 0x58, 0x4C, 0x00, 0x3A, 0x39, 0x52, 0x3A, 0x90, 0x81, 0x73, 0xAD, 0x21, 0x68, 
   0x5E, 0x2C, 0x2F, 0x5A, 0x70, 0x58, 0xA0, 0x1B, 0x70, 0xA6, 0x22, 0x6A, 0x6C, 0x51, 0x4D, 0x5A, 
   0x4C, 0x4C, 0x66, 0x6D, 0x5C, 0x9A, 0x6A, 0x6D, 0x9A, 0x00, 0x3F, 0x61, 0x0E, 0x1E, 0x68, 0x5C, 
   0x54, 0x7A, 0x54, 0x90, 0x9E, 0x77, 0x9C, 0xAA, 0x5E, 0x61, 0x9D, 0x05, 0x37, 0x3B, 0x00, 0x20, 
   0x52, 0x4B, 0x66, 0x99, 0x86, 0xA0, 0xC8, 0x6A, 0x60, 0x83, 0x1E, 0x25, 0x54, 0x3A, 0x36, 0x70, 
   0x35, 0x5A, 0x83, 0x38, 0x47, 0x7F, 0x79, 0x99, 0x9E, 0x89, 0xA9, 0xB5, 0x2C, 0x3B, 0xAD, 0x00, 
   0x33, 0x56, 0x42, 0x4A, 0x44, 0x61, 0x57, 0x7F, 0x62, 0x86, 0xC6, 0x61, 0x80, 0xAB, 0x32, 0x3A, 
   0x76, 0x20, 0x23, 0x70, 0x5F, 0x6E, 0x81, 0x63, 0x8C, 0xBA, 0x12, 0x74, 0x8B, 0x07, 0x1D, 0x35, 
   0x43, 0x1A, 0x48, 0x59, 0x90, 0xBF, 0x78, 0x9F, 0xC3, 0x83, 0x72, 0xA8, 0x5E, 0x70, 0xB7, 0x17, 
   0x57, 0x82, 0x22, 0x61, 0x6E, 0x63, 0x55, 0x68, 0x65, 0x3F, 0x58, 0x6A, 0x68, 0x94, 0x41, 0x96, 
   0xE6, 0x33, 0x67, 0xB7, 0x21, 0x33, 0x42, 0x44, 0x3F, 0x4C, 0x57, 0x7F, 0xB4, 0x31, 0x70, 0x84, 
   0x55, 0x5A, 0x8B, 0x9A, 0x71, 0xB9, 0x55, 0x87, 0xB8, 0x31, 0x47, 0x51, 0x42, 0x25, 0x5D, 0x48, 
   0x8C, 0xC5, 0x66, 0x87, 0xDC, 0x5B, 0x37, 0x74, 0x28, 0x5E, 0x72, 0x77, 0x7F, 0x8E, 0x70, 0x3F, 
   0x99, 0x0D, 0x38, 0x71, 0x0E, 0x62, 0x83, 0x7E, 0x6A, 0xB1, 0xB2, 0x7D, 0xAA, 0x33, 0x71, 0x5F, 
   0x00, 0x59, 0x75, 0x4E, 0x4E, 0x6B, 0x3B, 0x56, 0x79, 0x66, 0x7C, 0xAA, 0xB7, 0xC2, 0x9C, 0x6C, 
   0x8D, 0xE7, 0x19, 0x39, 0xE3, 0x33, 0x0F, 0x34, 0x67, 0x61, 0x1E, 0x61, 0xBA, 0xE8, 0x4F, 0x99, 
   0xFF, 0x2C, 0x64, 0x75, 0x32, 0x4B, 0x5B, 0x73, 0x50, 0xA5, 0x58, 0x5C, 0xA6, 0x32, 0x58, 0x68, 
   0x71, 0x7C, 0x7B, 0xA9, 0xA9, 0xED, 0x56, 0x8A, 0xDE, 0x24, 0x41, 0x23, 0x00, 0x11, 0x1B, 0x24, 
   0x45, 0xA2, 0x77, 0x92, 0xF5, 0x84, 0x7D, 0xD6, 0x4A, 0x5B, 0x38, 0x26, 0x7C, 0x35, 0x47, 0x7A, 
   0xB8, 0x6E, 0x3F, 0x9D, 0x1E, 0x33, 0x6F, 0x00, 0x62, 0x64, 0x80, 0x80, 0x5C, 0xD2, 0x81, 0xC0, 
   0x5E, 0x75, 0xCD, 0x0A, 0x5C, 0xA3, 0x40, 0x49, 0x8C, 0x67, 0x53, 0x59, 0x13, 0x6E, 0x5C, 0x4D, 
   0x61, 0x7D, 0x7B, 0x38, 0x66, 0x52, 0x59, 0x55, 0x35, 0x47, 0xAB, 0x4B, 0x42, 0x83, 0x2A, 0x5F, 
   0x3F, 0x48, 0x5A, 0x95, 0x77, 0x48, 0xB1, 0x6C, 0x4F, 0x60, 0x22, 0x51, 0x33, 0x2E, 0x5F, 0x81, 
   0x6E, 0x72, 0xAB, 0x9C, 0x9F, 0xA0, 0x7D, 0x90, 0x99, 0x00, 0x0A, 0x84, 0x16, 0x2A, 0x49, 0x50, 
   0x42, 0x5A, 0x4D, 0x6C, 0xA4, 0x7B, 0x8F, 0x99, 0x42, 0x4A, 0x66, 0x30, 0x32, 0x66, 0x6E, 0x5A, 
   0x9F, 0x3F, 0x76, 0xB9, 0x06, 0x3D, 0x3F, 0x62, 0x37, 0x3D, 0x6E, 0x59, 0x8D, 0x3A, 0x65, 0x83, 
   0x34, 0x5F, 0x62, 0x56, 0x54, 0x8A, 0x2A, 0x54, 0x9C, 0x4D, 0x65, 0x79, 0x7B, 0x53, 0x3F, 0x58, 
   0x64, 0x78, 0x1E, 0x3C, 0x90, 0x14, 0x4F, 0x64, 0x7D, 0x83, 0x8C, 0x9A, 0x7E, 0x97, 0x5F, 0x4F, 
   0x68, 0x1D, 0x52, 0x56, 0x10, 0x4C, 0x72, 0x4A, 0x46, 0x68, 0x57, 0x4D, 0x8B, 0x5D, 0x6A, 0x96, 
   0x79, 0x65, 0x8F, 0x07, 0x48, 0x4F, 0x4D, 0x6E, 0x96, 0x4D, 0x79, 0x96, 0x42, 0x50, 0xA7, 0x65, 
   0x50, 0x89, 0x5F, 0x73, 0x6D, 0x48, 0x63, 0xA0, 0x64, 0x5D, 0x9C, 0x41, 0x7A, 0x91, 0x2F, 0x7A, 
   0xA1, 0x57, 0x6D, 0x6E, 0x5B, 0x65, 0x85, 0x16, 0x53, 0xCE, 0x2D, 0x36, 0x89, 0x67, 0x7B, 0x6C, 
   0x4C, 0x87, 0x9E, 0x3B, 0x43, 0x87, 0x58, 0x4F, 0x60, 0x6E, 0x78, 0x9F, 0x3F, 0x8E, 0xB6, 0x32, 
   0x58, 0x82, 0x3D, 0x3A, 0x5F, 0x43, 0x3F, 0xA8, 0x4A, 0x62, 0x8C, 0x45, 0x53, 0x54, 0x41, 0x6B, 
   0x94, 0x7A, 0x87, 0xE0, 0x50, 0x6F, 0x90, 0x32, 0x2F, 0x66, 0x26, 0x24, 0x93, 0x3E, 0x86, 0x83, 
   0x5C, 0x7D, 0x9A, 0x64, 0x45, 0x84, 0x8A, 0xA5, 0x8A, 0x33, 0x64, 0xC9, 0x00, 0x08, 0x8F, 0x60, 
   0x80, 0x5F, 0x6D, 0x97, 0x68, 0x50, 0x57, 0x52, 0x3F, 0x29, 0x7C, 0x3F, 0x7F, 0xD9, 0x6D, 0x8F, 
   0xA1, 0x4B, 0x33, 0x46, 0x3F, 0x33, 0xA1, 0x4F, 0x78, 0xDF, 0x55, 0x95, 0x87, 0x49, 0x5F, 0x74, 
   0x3D, 0x13, 0x74, 0x3D, 0x24, 0x9C, 0x49, 0x82, 0x91, 0x5A, 0x84, 0x97, 0x55, 0x46, 0xA1, 0x3E, 
   0x56, 0x56, 0x3E, 0x51, 0x69, 0x4F, 0x5D, 0xBB, 0x4A, 0x79, 0xB1, 0x66, 0x51, 0x83, 0x4F, 0x34, 
   0x82, 0x2D, 0x74, 0xA8, 0x60, 0x8B, 0x96, 0x54, 0x5C, 0x6D, 0x15, 0x2D, 0x8A, 0x43, 0x54, 0xA7, 
   0x5B, 0x5B, 0x6B, 0x57, 0x61, 0x94, 0x5C, 0x73, 0xE9, 0x39, 0x67, 0x80, 0x4A, 0x28, 0x23, 0x4A, 
   0x73, 0x8A, 0x39, 0x8A, 0xE0, 0x56, 0x3A, 0x85, 0x61, 0x3A, 0x3B, 0x33, 0x6E, 0x96, 0x38, 0x6A, 
   0xAD, 0x71, 0x64, 0xC2, 0x6B, 0x69, 0x6F, 0x2B, 0x5C, 0x55, 0x15, 0x0D, 0x6B, 0x5C, 0x65, 0x4C, 
   0x86, 0xC8, 0xEE, 0x84, 0x61, 0xE2, 0x00, 0x2B, 0x39, 0x02, 0x62, 0x26, 0x6F, 0x5D, 0x93, 0x6C, 
   0x5D, 0xC3, 0x3F, 0x8A, 0xAC, 0x4F, 0x56, 0x82, 0x49, 0x5B, 0x5D, 0x42, 0x54, 0x67, 0x6E, 0x65, 
   0x78, 0x3F, 0x43, 0x8A, 0x0C, 0x49, 0x7F, 0x46, 0x8E, 0x84, 0x96, 0x50, 0x89, 0x45, 0x49, 0x6B, 
   0x0A, 0x7B, 0x60, 0x4E, 0x57, 0x9A, 0x3E, 0x01, 0x79, 0x4A, 0x58, 0x8B, 0x50, 0xA9, 0xAC, 0x39, 
   0x5E, 0x6B, 0x44, 0x18, 0x52, 0x3E, 0x3A, 0x6E, 0x4F, 0x85, 0x95, 0x4E, 0x6E, 0x6D, 0x30, 0x4B, 
   0x40, 0x3B, 0x34, 0x5F, 0x37, 0x63, 0xCF, 0x55, 0x65, 0xB9, 0x52, 0x7D, 0x5C, 0x53, 0x76, 0x44, 
   0x5D, 0x46, 0x99, 0x27, 0x0C, 0x83, 0x0A, 0x6E, 0x61, 0x6A, 0x91, 0x84, 0x38, 0x2B, 0x91, 0x00, 
   0x26, 0x6B, 0x6E, 0x83, 0x99, 0xAE, 0xB7, 0xB3, 0x29, 0x43, 0x4A, 0x10, 0x13, 0x22, 0x3E, 0x41, 
   0x8B, 0x57, 0x7C, 0xC7, 0x4D, 0x67, 0x84, 0x7A, 0x72, 0x8E, 0x29, 0x43, 0x70, 0x0D, 0x37, 0x55, 
   0x5E, 0x39, 0x85, 0x82, 0x90, 0xCB, 0x43, 0x85, 0xA2, 0x2B, 0x3A, 0x50, 0x58, 0x3E, 0x71, 0x4D, 
   0x61, 0xA5, 0x27, 0x57, 0x6D, 0x4B, 0x58, 0x58, 0x7F, 0x7B, 0x9F, 0x79, 0x75, 0xCE, 0x42, 0x5C, 
   0xAA, 0x12, 0x32, 0x57, 0x29, 0x3E, 0x39, 0x54, 0x6E, 0x7B, 0x78, 0x70, 0xD9, 0x82, 0x80, 0xAB, 
   0x03, 0x4A, 0x5E, 0x09, 0x00, 0x4D, 0x7E, 0x70, 0x71, 0x75, 0x96, 0x85, 0x26, 0x5F, 0x94, 0x48, 
   0x65, 0xE5, 0x65, 0x7B, 0xB1, 0x53, 0x79, 0x59, 0x46, 0x33, 0x5F, 0x39, 0x4E, 0xB5, 0x49, 0x7B, 
   0xDD, 0x2C, 0x42, 0x58, 0x4A, 0x38, 0x57, 0x57, 0x79, 0xA3, 0x4D, 0x7A, 0x9A, 0x69, 0x4C, 0x89, 
   0x36, 0x51, 0x94, 0x25, 0x6F, 0x78, 0x4F, 0x5F, 0x7E, 0x89, 0x82, 0x96, 0x5B, 0x72, 0x97, 0x26, 
   0x66, 0xA3, 0x43, 0x75, 0xAE, 0x66, 0x6E, 0x85, 0x71, 0x39, 0x78, 0x31, 0x4A, 0x82, 0x41, 0x78, 
   0x98, 0x57, 0x83, 0xA3, 0x24, 0x43, 0x7B, 0x38, 0x0C, 0x92, 0x79, 0x93, 0x82, 0x90, 0xB1, 0x8E, 
   0x49, 0x6B, 0xB0, 0x0E, 0x30, 0x92, 0x2C, 0x2C, 0x32, 0x5D, 0x7F, 0x73, 0x7C, 0xA4, 0xF3, 0x77, 
   0x92, 0xC6, 0x4D, 0x5D, 0x42, 0x46, 0x39, 0x74, 0x51, 0x50, 0xF8, 0x67, 0x6E, 0x75, 0x5A, 0x9D, 
   0x58, 0x30, 0x8B, 0xB7, 0x0E, 0x2D, 0x8F, 0x39, 0x31, 0x56, 0x8B, 0x61, 0x90, 0x5E, 0x91, 0xCA, 
   0x2A, 0x8C, 0xA7, 0x57, 0x5D, 0x82, 0x7E, 0x71, 0x74, 0x4F, 0x42, 0x52, 0x20, 0x37, 0x77, 0x31, 
   0x9E, 0xFB, 0x82, 0x70, 0xDD, 0x82, 0x41, 0x66, 0x37, 0x57, 0x44, 0x14, 0x63, 0x55, 0x5E, 0x85, 
   0x7A, 0x70, 0x67, 0xC0, 0x37, 0x23, 0x8D, 0x0B, 0x58, 0x50, 0x74, 0x97, 0x8B, 0xB9, 0x7A, 0xDC, 
   0x5B, 0x4F, 0xBD, 0x0C, 0x2B, 0x52, 0x10, 0x69, 0x5F, 0x4A, 0x79, 0x78, 0x73, 0x5C, 0x7D, 0x52, 
   0x6B, 0x7D, 0x3B, 0x59, 0x83, 0x4C, 0x30, 0xB0, 0x5C, 0x52, 0x5A, 0x45, 0x64, 0x43, 0x40, 0x53, 
   0xA4, 0x2B, 0x53, 0x83, 0x66, 0x4E, 0x77, 0x84, 0x4F, 0x71, 0x57, 0x51, 0x55, 0x56, 0x75, 0x7A, 
   0x55, 0x97, 0xB4, 0x65, 0x4B, 0x97, 0x46, 0x2D, 0x5C, 0x22, 0x59, 0x5B, 0x17, 0x3D, 0x94, 0x47, 
   0x67, 0x89, 0x8D, 0x95, 0x82, 0x5F, 0x50, 0x75, 0x2A, 0x43, 0x58, 0x23, 0x59, 0x64, 0x68, 0x4E, 
   0xA3, 0x73, 0x5A, 0x9D, 0x44, 0x7C, 0x7D, 0x21, 0x53, 0x53, 0x3E, 0x47, 0x4C, 0x61, 0x47, 0x75, 
   0x34, 0x59, 0x87, 0x35, 0x6A, 0x66, 0x69, 0x5F, 0x84, 0x59, 0x65, 0x85, 0x42, 0x59, 0x8A, 0x3B, 
   0x4D, 0x7E, 0x57, 0x58, 0x6D, 0x35, 0x47, 0x62, 0x30, 0x38, 0x6F, 0x5F, 0x8E, 0xA9, 0x76, 0x77, 
   0xA8, 0x52, 0x4E, 0x61, 0x44, 0x58, 0x42, 0x16, 0x4C, 0x65, 0x3F, 0x4C, 0x89, 0x7E, 0x4D, 0x95, 
   0x45, 0x5E, 0x78, 0x1D, 0x59, 0x5A, 0x3A, 0x3B, 0x62, 0x2F, 0x1A, 0x3C, 0x4D, 0x78, 0xA0, 0x5F, 
   0x97, 0xD7, 0x5F, 0x7B, 0xC0, 0x4D, 0x40, 0x5D, 0x1F, 0x3F, 0x79, 0x63, 0x6D, 0xA1, 0x6E, 0xA6, 
   0xAC, 0x39, 0x4A, 0x83, 0x1C, 0x2C, 0x4F, 0x55, 0x65, 0x6E, 0x50, 0x82, 0xED, 0x4C, 0x4E, 0xB9, 
   0x68, 0x42, 0x5C, 0x3A, 0x6F, 0x93, 0x1E, 0x42, 0x71, 0x5D, 0x33, 0x73, 0x96, 0xAB, 0xDA, 0x45, 
   0xA9, 0xB1, 0x32, 0x28, 0x69, 0x3C, 0x00, 0x45, 0x20, 0x4B, 0x69, 0x61, 0xA4, 0xBC, 0x68, 0x8E, 
   0xB3, 0x52, 0x1C, 0x8B, 0x5C, 0x70, 0xA0, 0x5A, 0xAD, 0x87, 0x26, 0x22, 0x6F, 0x2B, 0x00, 0x7B, 
   0x38, 0x91, 0x7E, 0x73, 0xAB, 0xB9, 0x52, 0x62, 0xC4, 0x63, 0x4A, 0x5D, 0x50, 0x70, 0x7A, 0x28, 
   0x58, 0xE0, 0x4F, 0x4B, 0x72, 0x3F, 0x40, 0x61, 0x45, 0x80, 0xB1, 0x67, 0x90, 0x84, 0x50, 0x33, 
   0x73, 0x22, 0x3D, 0xA1, 0x44, 0x6B, 0x91, 0x50, 0x3F, 0x9C, 0x6D, 0x79, 0xB1, 0x55, 0xAC, 0x65, 
   0x1B, 0x3D, 0x86, 0x42, 0x24, 0x9D, 0x5F, 0x37, 0x91, 0x3D, 0x73, 0x8B, 0x37, 0xA2, 0x69, 0x43, 
   0x4C, 0x86, 0x4A, 0x24, 0xB0, 0x61, 0x79, 0x9A, 0x4A, 0x80, 0x78, 0x2E, 0x47, 0x84, 0x4C, 0x3C, 
   0xB2, 0x9B, 0x91, 0xC1, 0x49, 0x8A, 0x74, 0x00, 0x10, 0x54, 0x30, 0x4E, 0x4F, 0x5A, 0x66, 0x75, 
   0x5C, 0x5C, 0xAC, 0x63, 0x6D, 0xDB, 0x51, 0x73, 0xB7, 0x34, 0x3F, 0x64, 0x34, 0x5C, 0x62, 0x67, 
   0x62, 0x8F, 0x50, 0x73, 0x7F, 0x2D, 0x50, 0x80, 0x3E, 0x1D, 0x98, 0x4A, 0x6A, 0x93, 0x35, 0x94, 
   0xA9, 0x90, 0x8F, 0x90, 0x4A, 0x64, 0x76, 0x0F, 0x23, 0x7E, 0x41, 0x38, 0x5A, 0x49, 0x3F, 0x55, 
   0x40, 0x49, 0x69, 0x9C, 0xB7, 0xF3, 0x83, 0xA0, 0xBE, 0x08, 0x20, 0x20, 0x00, 0x24, 0x31, 0x5A, 
   0x57, 0x95, 0x85, 0x6A, 0xE3, 0x5D, 0x86, 0xC0, 0x44, 0x57, 0x82, 0x36, 0x5A, 0x33, 0x29, 0x36, 
   0x4F, 0x45, 0x41, 0x95, 0x4A, 0x59, 0xA7, 0x23, 0x50, 0x90, 0x40, 0x84, 0x78, 0x84, 0xA0, 0x6C, 
   0x2E, 0x37, 0x83, 0x00, 0x13, 0x8A, 0x77, 0x6E, 0x83, 0x71, 0x5D, 0x76, 0x0E, 0x41, 0x4E, 0x00, 
   0x63, 0x81, 0x62, 0x52, 0xA4, 0xCA, 0x6F, 0xA9, 0x34, 0x68, 0x62, 0x00, 0x39, 0x2D, 0x57, 0x44, 
   0x73, 0x35, 0x50, 0x9E, 0x00, 0x4C, 0x83, 0x5C, 0x47, 0x84, 0x7B, 0x76, 0x90, 0x76, 0x88, 0x96, 
   0x46, 0x53, 0x73, 0x10, 0x46, 0x72, 0x27, 0x36, 0x67, 0x62, 0x54, 0x85, 0x63, 0x94, 0x99, 0x51, 
   0x71, 0xA5, 0x2D, 0x3B, 0xA8, 0x21, 0x3A, 0x4A, 0x44, 0x6E, 0x4F, 0x51, 0x52, 0x95, 0x52, 0x69, 
   0x91, 0x57, 0x3C, 0x70, 0x2F, 0x43, 0x8D, 0x29, 0x72, 0x77, 0x52, 0x78, 0x78, 0x53, 0x46, 0x85, 
   0x31, 0x68, 0x9D, 0x63, 0x89, 0xAD, 0x46, 0x3D, 0x94, 0x00, 0x1A, 0x53, 0x35, 0x54, 0x3C, 0x70, 
   0x79, 0x88, 0x56, 0x86, 0xB3, 0x4B, 0x64, 0x87, 0x4B, 0x5E, 0x5F, 0x61, 0x57, 0x9E, 0x4D, 0x73, 
   0xB4, 0x3F, 0x6B, 0x7E, 0x00, 0x21, 0x4A, 0x3E, 0x2F, 0x4D, 0xBE, 0xA9, 0xBD, 0x79, 0x98, 0xFD, 
   0x25, 0x4A, 0x93, 0x17, 0x25, 0x2D, 0x12, 0x00, 0x32, 0x33, 0x64, 0x74, 0x76, 0xA2, 0xA2, 0x90, 
   0x8E, 0xB7, 0x7F, 0x82, 0xAD, 0x5A, 0x5E, 0x96, 0x34, 0x7D, 0xB6, 0x31, 0x4C, 0x90, 0x1A, 0x06, 
   0x2D, 0x49, 0x35, 0x66, 0x62, 0x9A, 0xA7, 0x4D, 0x91, 0xA5, 0x64, 0x63, 0xA0, 0x5D, 0x56, 0xB1, 
   0x34, 0x4A, 0x82, 0x07, 0x4B, 0x59, 0x59, 0x5E, 0x6D, 0x78, 0x78, 0xD0, 0x73, 0xBD, 0xC0, 0x49, 
   0x60, 0x6F, 0x26, 0x3B, 0x6E, 0x53, 0x7D, 0xAC, 0x69, 0x5A, 0xB7, 0x4C, 0x1C, 0x82, 0x18, 0x8E, 
   0x74, 0x5D, 0x88, 0x7F, 0x6F, 0x21, 0x96, 0x25, 0x55, 0x63, 0x22, 0x64, 0x70, 0xA1, 0x94, 0xCD, 
   0x8A, 0x77, 0x9B, 0x16, 0x3D, 0x83, 0x30, 0x64, 0x87, 0x42, 0x59, 0x98, 0x33, 0x4F, 0x86, 0x5E, 
   0x5D, 0x65, 0x92, 0x9D, 0x63, 0x4D, 0xAE, 0xD7, 0x4B, 0x51, 0xD1, 0x44, 0x22, 0x6E, 0x3D, 0x72, 
   0x55, 0x4E, 0x83, 0x7D, 0x4E, 0x66, 0xB7, 0x49, 0x27, 0x95, 0x61, 0x83, 0x85, 0x7E, 0xA1, 0xC9, 
   0x5B, 0x67, 0xD1, 0x1B, 0x53, 0x33, 0x22, 0x1A, 0x00, 0x7F, 0x72, 0xC8, 0x80, 0xC4, 0xFF, 0x61, 
   0x84, 0x9B, 0x2B, 0x47, 0x44, 0x23, 0x4F, 0x5B, 0x51, 0x49, 0x71, 0x69, 0x5A, 0x89, 0x48, 0x50, 
   0x74, 0x27, 0x58, 0x5F, 0x62, 0xA3, 0x8F, 0xB8, 0x7C, 0xC5, 0x49, 0x63, 0xD5, 0x00, 0x60, 0x7D, 
   0x57, 0x3C, 0x67, 0x6D, 0x68, 0x7A, 0x16, 0x5C, 0x5C, 0x1C, 0x60, 0x6B, 0x6D, 0x4E, 0x76, 0x6E, 
   0x42, 0x60, 0x35, 0x64, 0xB0, 0x45, 0x5E, 0x9F, 0x45, 0x5E, 0x43, 0x40, 0x59, 0x70, 0x4C, 0x59, 
   0x93, 0x5D, 0x4E, 0x8D, 0x15, 0x54, 0x49, 0x3F, 0x50, 0x67, 0xA7, 0x73, 0x9B, 0x73, 0x83, 0xB8, 
   0x36, 0x43, 0x67, 0x00, 0x30, 0x65, 0x1C, 0x3C, 0x5E, 0x6E, 0x5B, 0x7C, 0x65, 0x7F, 0xA0, 0x60, 
   0x9B, 0xBC, 0x6B, 0x4A, 0x76, 0x53, 0x43, 0x58, 0x46, 0x59, 0x73, 0x45, 0x59, 0x90, 0x3A, 0x59, 
   0x73, 0x57, 0x4E, 0x62, 0x78, 0x5F, 0x94, 0x32, 0x6A, 0x87, 0x09, 0x59, 0x4C, 0x60, 0x4D, 0x4B, 
   0x62, 0x52, 0x96, 0x4D, 0x47, 0x6A, 0x75, 0x5E, 0x5A, 0x53, 0x53, 0x95, 0x42, 0x5E, 0xAD, 0x4D, 
   0x4D, 0x6E, 0x52, 0x58, 0x56, 0x6E, 0x58, 0x7D, 0x2E, 0x4D, 0x7E, 0x1E, 0x43, 0x7A, 0x5E, 0x71, 
   0x9C, 0x87, 0x5F, 0x9A, 0x4D, 0x59, 0x3D, 0x50, 0x58, 0x6F, 0x38, 0x46, 0x70, 0x38, 0x5D, 0x7C, 
   0x39, 0x4D, 0x77, 0x84, 0x69, 0x77, 0x46, 0x3A, 0x67, 0x41, 0x19, 0x46, 0x4D, 0x61, 0x7D, 0x59, 
   0xB4, 0xD7, 0x5E, 0x8C, 0xD2, 0x3B, 0x51, 0x8C, 0x51, 0x55, 0x68, 0x4C, 0x42, 0xA6, 0x62, 0x42, 
   0x8F, 0x3F, 0x65, 0x83, 0x2D, 0x5B, 0x7D, 0x56, 0x6D, 0x6E, 0x5C, 0x7D, 0xA9, 0x4C, 0x60, 0xCC, 
   0x4C, 0x48, 0x92, 0x57, 0x53, 0x5D, 0x40, 0x64, 0x90, 0x2F, 0x6B, 0xC3, 0x52, 0x6B, 0x85, 0x85, 
   0x6F, 0xC1, 0x44, 0x62, 0x97, 0x09, 0x2F, 0x1E, 0x3C, 0x52, 0x75, 0x49, 0x86, 0xCD, 0x56, 0x5A, 
   0xB3, 0x5C, 0x77, 0x7F, 0x4B, 0x6B, 0x9A, 0x3F, 0x63, 0x98, 0x60, 0x6C, 0x58, 0x37, 0x2D, 0x4E, 
   0x26, 0x1D, 0xAC, 0x43, 0x97, 0xD6, 0x40, 0x5B, 0x80, 0x7B, 0x6E, 0x69, 0x86, 0xAB, 0xA3, 0x4B, 
   0x4D, 0xAB, 0x11, 0x00, 0x8E, 0x3F, 0x68, 0xD1, 0x7E, 0xAD, 0x8B, 0x40, 0x4B, 0x45, 0x34, 0x2D, 
   0x90, 0x56, 0x5F, 0xCA, 0x50, 0x60, 0x96, 0x56, 0x5B, 0x6E, 0x56, 0x45, 0x8A, 0x3F, 0x62, 0xBD, 
   0x5A, 0xB1, 0x7D, 0x54, 0x49, 0x92, 0x31, 0x15, 0x80, 0x3C, 0x4F, 0x63, 0x3D, 0x6E, 0x70, 0x55, 
   0x81, 0xB1, 0x61, 0x75, 0xB7, 0x4A, 0x35, 0x6D, 0x22, 0x47, 0x78, 0x51, 0x6B, 0xAC, 0x7A, 0xA4, 
   0xBE, 0x5C, 0x69, 0x9F, 0x32, 0x17, 0x85, 0x25, 0x65, 0x72, 0x31, 0x4F, 0x3F, 0x5A, 0x50, 0x87, 
   0x50, 0x7E, 0xF7, 0x57, 0x5C, 0xB3, 0x4C, 0x3F, 0x4B, 0x51, 0x56, 0x88, 0x51, 0x79, 0xE2, 0x4C, 
   0x6D, 0x69, 0x5C, 0x23, 0x2F, 0x4A, 0x56, 0x97, 0x1C, 0x69, 0xD3, 0x45, 0x49, 0xB2, 0x96, 0x78, 
   0x8E, 0x3B, 0x8F, 0x75, 0x34, 0x5A, 0xAC, 0x6B, 0x69, 0x88, 0x2B, 0x50, 0x74, 0x2A, 0x27, 0x78, 
   0x36, 0x34, 0x66, 0x44, 0x77, 0x51, 0x84, 0xC3, 0xD5, 0x66, 0x73, 0xB2, 0x00, 0x38, 0x33, 0x27, 
   0x48, 0x3F, 0x73, 0x59, 0xAE, 0x86, 0x82, 0xE8, 0x5C, 0x91, 0xA1, 0x3D, 0x39, 0x58, 0x24, 0x36, 
   0x50, 0x2F, 0x46, 0x6C, 0x6D, 0x4D, 0x8F, 0x3A, 0x54, 0x7F, 0x23, 0x89, 0x62, 0x3B, 0x6C, 0x8A, 
   0x7A, 0x32, 0x84, 0x52, 0x48, 0x8F, 0x3E, 0x92, 0x93, 0x36, 0x63, 0x58, 0x13, 0x12, 0x4C, 0x1A, 
   0x35, 0x70, 0x78, 0x9D, 0xC1, 0x75, 0x75, 0x9E, 0x62, 0x35, 0x41, 0x43, 0x2D, 0x51, 0x08, 0x5B, 
   0xA8, 0x24, 0x6E, 0x97, 0x5F, 0x5D, 0x3C, 0x2F, 0x46, 0x49, 0x69, 0x41, 0xB2, 0x69, 0x5E, 0xC5, 
   0x24, 0x71, 0x69, 0x34, 0x6B, 0x5C, 0x57, 0x32, 0x73, 0x37, 0x50, 0x6F, 0x87, 0x95, 0x93, 0x9B, 
   0xA9, 0xCB, 0x03, 0x1C, 0x62, 0x00, 0x00, 0x32, 0x53, 0x4F, 0x72, 0x90, 0xA8, 0xC4, 0x6A, 0x65, 
   0x8C, 0x3B, 0x42, 0x63, 0x2E, 0x42, 0x58, 0x12, 0x44, 0x71, 0x48, 0x5E, 0x8B, 0x9E, 0xAF, 0xC0, 
   0x58, 0x90, 0xB3, 0x06, 0x0A, 0x4A, 0x33, 0x2F, 0x6A, 0x6D, 0x69, 0x7A, 0x1F, 0x3E, 0x64, 0x2C, 
   0x68, 0x5B, 0x9A, 0x80, 0x97, 0x56, 0x80, 0xDD, 0x27, 0x40, 0x92, 0x4D, 0x3F, 0x40, 0x4C, 0x6C, 
   0x78, 0x25, 0x55, 0x95, 0x48, 0x39, 0x6F, 0x60, 0x51, 0x92, 0x3F, 0x80, 0x7D, 0x66, 0x69, 0x9A, 
   0x6F, 0x61, 0xC6, 0x33, 0x5F, 0x84, 0x00, 0x37, 0x20, 0x0E, 0x0C, 0x5A, 0x86, 0x77, 0x97, 0xA1, 
   0xAE, 0x91, 0x5D, 0x66, 0xA1, 0x5A, 0x70, 0xFE, 0x3F, 0x8F, 0xD9, 0x14, 0x41, 0x45, 0x31, 0x18, 
   0x19, 0x4F, 0x4C, 0x81, 0x51, 0x8E, 0xA7, 0x6F, 0x79, 0xAA, 0x5D, 0x67, 0x9A, 0x3A, 0x61, 0x93, 
   0x29, 0x4F, 0x70, 0x62, 0x39, 0x65, 0x2B, 0x58, 0xA6, 0x54, 0x88, 0xA8, 0x67, 0x7E, 0xAD, 0x61, 
   0x81, 0x95, 0x6B, 0x62, 0x6D, 0x41, 0x16, 0x84, 0x1D, 0x77, 0xC8, 0x56, 0x99, 0xAF, 0x4C, 0x21, 
   0x40, 0x47, 0x38, 0x67, 0x59, 0x88, 0x8A, 0x42, 0x61, 0x85, 0x47, 0x56, 0x9D, 0x16, 0x52, 0x9F, 
   0x73, 0x77, 0xA0, 0xAC, 0xBC, 0x90, 0x3D, 0x6A, 0xCC, 0x00, 0x34, 0xA0, 0x35, 0x12, 0x00, 0x44, 
   0x5F, 0x2F, 0x7A, 0xA2, 0xFF, 0x86, 0x92, 0xC5, 0x57, 0x80, 0x5E, 0x17, 0x4F, 0xA0, 0x49, 0x2B, 
   0x8E, 0x55, 0x48, 0x61, 0x5B, 0x7E, 0x9B, 0x65, 0xAC, 0xAC, 0x2B, 0x5B, 0xBC, 0x36, 0x59, 0x9C, 
   0x64, 0x63, 0x5B, 0x31, 0x36, 0x2E, 0x1C, 0x3D, 0x82, 0x53, 0x79, 0xD0, 0xC0, 0xBF, 0xF8, 0x90, 
   0x7F, 0xAE, 0x08, 0x52, 0x24, 0x00, 0x43, 0x43, 0x4A, 0x53, 0x94, 0x6F, 0x42, 0xA2, 0x44, 0x3F, 
   0xA3, 0x24, 0x64, 0x5B, 0x97, 0x9F, 0x8B, 0xA6, 0xA9, 0xF2, 0x24, 0x3F, 0xAB, 0x00, 0x1F, 0x5B, 
   0x21, 0x6D, 0x46, 0x79, 0x67, 0x72, 0x85, 0x5A, 0x9F, 0x34, 0x47, 0x66, 0x16, 0x46, 0x6B, 0x4A, 
   0x46, 0x9E, 0x6D, 0x47, 0x6A, 0x40, 0x75, 0x43, 0x40, 0x53, 0xB5, 0x4C, 0x59, 0x93, 0x58, 0x4E, 
   0x4E, 0x47, 0x4F, 0x65, 0x37, 0x67, 0x83, 0x4F, 0x73, 0xA2, 0x6C, 0x7D, 0xAD, 0x7C, 0x52, 0x7D, 
   0x45, 0x12, 0x58, 0x00, 0x40, 0x5C, 0x21, 0x65, 0x6E, 0x5E, 0x68, 0x86, 0x8E, 0x96, 0x81, 0x7D, 
   0x5C, 0x7C, 0x15, 0x3D, 0x7B, 0x41, 0x59, 0x74, 0x63, 0x59, 0x7E, 0x4C, 0x59, 0x83, 0x45, 0x59, 
   0x5A, 0x3F, 0x59, 0x65, 0x4A, 0x53, 0x83, 0x60, 0x4E, 0x9A, 0x3D, 0x70, 0x98, 0x0A, 0x59, 0x56, 
   0x50, 0x52, 0x33, 0x7F, 0x58, 0x8F, 0x2B, 0x4D, 0x6F, 0x47, 0x64, 0x6C, 0x59, 0x5E, 0x95, 0x53, 
   0x64, 0x85, 0x4D, 0x4D, 0x7E, 0x57, 0x58, 0x66, 0x44, 0x58, 0x7C, 0x28, 0x4D, 0x77, 0x3A, 0x53, 
   0x66, 0x59, 0x65, 0x83, 0x75, 0x65, 0x9E, 0x6E, 0x5E, 0x5F, 0x38, 0x52, 0x63, 0x10, 0x58, 0x5E, 
   0x4A, 0x58, 0x76, 0x79, 0x52, 0x93, 0x53, 0x60, 0x87, 0x59, 0x60, 0x82, 0x52, 0x55, 0x8E, 0x41, 
   0x56, 0x73, 0x46, 0x6E, 0x8C, 0x4C, 0x85, 0xD1, 0x57, 0x7D, 0xA8, 0x50, 0x36, 0x5B, 0x1D, 0x0E, 
   0x77, 0x56, 0x65, 0x89, 0x62, 0xB2, 0xB8, 0x3A, 0x6E, 0xAD, 0x40, 0x34, 0x4D, 0x5C, 0x71, 0x8C, 
   0x3A, 0x6B, 0xD2, 0x4C, 0x3D, 0xAB, 0x68, 0x64, 0x8C, 0x4C, 0x9C, 0x95, 0x35, 0x29, 0x7C, 0x4C, 
   0x12, 0x59, 0x6E, 0x6F, 0x77, 0x5B, 0xC0, 0xD8, 0x37, 0x6F, 0x83, 0x36, 0x00, 0x5A, 0x3D, 0x5E, 
   0x9F, 0x5A, 0xA4, 0xCD, 0x44, 0x64, 0x6C, 0x56, 0x1E, 0x65, 0x4B, 0x5D, 0x8E, 0x6C, 0xA6, 0xA0, 
   0x3D, 0x3E, 0xB2, 0x09, 0x00, 0x6E, 0x3E, 0x86, 0x6F, 0x6E, 0xBD, 0xC0, 0x58, 0x57, 0x7E, 0x51, 
   0x4A, 0x8B, 0x40, 0x7B, 0xDB, 0x45, 0x5D, 0xAD, 0x45, 0x2E, 0x77, 0x4B, 0x55, 0x7B, 0x45, 0x7D, 
   0x9C, 0x5C, 0x39, 0x90, 0x50, 0x5B, 0x9B, 0x2D, 0x66, 0x85, 0x2D, 0x4F, 0x8B, 0x5B, 0x39, 0xA8, 
   0x61, 0x68, 0xBD, 0x43, 0x96, 0x7C, 0x31, 0x67, 0x5F, 0x31, 0x10, 0x71, 0x54, 0x3F, 0xB7, 0x55, 
   0x8C, 0x9C, 0x4F, 0x92, 0x85, 0x28, 0x2B, 0x9B, 0x40, 0x26, 0x79, 0x7F, 0xAF, 0xA0, 0x5C, 0x9D, 
   0x9F, 0x28, 0x29, 0x6B, 0x38, 0x44, 0x86, 0x71, 0x55, 0x70, 0x4F, 0x67, 0x99, 0x3E, 0x67, 0xAA, 
   0x43, 0x50, 0x8E, 0x3F, 0x50, 0x6C, 0x57, 0x56, 0x8F, 0x58, 0x62, 0xB2, 0x58, 0x7F, 0xA0, 0x41, 
   0x46, 0x77, 0x5C, 0x46, 0x8C, 0x50, 0x53, 0x5F, 0x2E, 0x82, 0x8E, 0x57, 0x77, 0xCD, 0x5D, 0x49, 
   0x83, 0x41, 0x43, 0x7B, 0x51, 0x77, 0x8C, 0x45, 0x7C, 0x9C, 0x60, 0x53, 0xB1, 0x25, 0x5C, 0x75, 
   0x18, 0x49, 0x66, 0x3B, 0x23, 0x4E, 0x28, 0x38, 0x45, 0x80, 0xBF, 0xED, 0xA8, 0xA3, 0xC0, 0x0C, 
   0x3A, 0x46, 0x16, 0x4E, 0x56, 0x78, 0x64, 0x73, 0x67, 0x7A, 0xAD, 0x44, 0x68, 0xB2, 0x37, 0x44, 
   0x76, 0x47, 0x59, 0x56, 0x30, 0x47, 0x4A, 0x68, 0x74, 0x84, 0x34, 0x47, 0xA2, 0x0E, 0x2D, 0x85, 
   0x76, 0x8F, 0x7F, 0xAE, 0x95, 0x99, 0x17, 0x38, 0x59, 0x00, 0x41, 0x63, 0x4D, 0x5C, 0x7A, 0x87, 
   0x51, 0x91, 0x1B, 0x5D, 0x6F, 0x16, 0x74, 0x59, 0x72, 0x68, 0x8D, 0x6C, 0x45, 0xA4, 0x10, 0x45, 
   0x70, 0x1B, 0x63, 0x58, 0x6C, 0x6F, 0x6F, 0x67, 0x6E, 0x87, 0x22, 0x34, 0x6C, 0x22, 0x18, 0x8B, 
   0x62, 0x7C, 0xAE, 0x5F, 0x79, 0x6A, 0x38, 0x69, 0x6A, 0x6B, 0x73, 0x9D, 0x5E, 0x65, 0xAE, 0x28, 
   0x40, 0x5D, 0x4E, 0x49, 0x67, 0x36, 0x48, 0x83, 0x03, 0x27, 0x8A, 0x5B, 0x5C, 0x69, 0x79, 0x7B, 
   0x8B, 0x35, 0x5F, 0x85, 0x19, 0x43, 0x59, 0x58, 0x33, 0x79, 0x54, 0x80, 0xCB, 0x5F, 0xA8, 0xB9, 
   0x62, 0x68, 0x72, 0x17, 0x31, 0x6A, 0x0C, 0x14, 0x4D, 0x63, 0x65, 0x87, 0x76, 0x8E, 0xAB, 0x37, 
   0x4A, 0x7F, 0x37, 0x3E, 0x69, 0x76, 0x6C, 0xB4, 0x4D, 0x78, 0xB3, 0x19, 0x61, 0x66, 0x08, 0x28, 
   0x1C, 0x5A, 0x4B, 0x7F, 0x94, 0x90, 0xE3, 0x49, 0x84, 0xA4, 0x03, 0x2E, 0x69, 0x47, 0x44, 0x63, 
   0x5E, 0x72, 0x9D, 0x4C, 0x5C, 0xB4, 0x29, 0x72, 0x9B, 0x30, 0x4F, 0x60, 0x3E, 0x18, 0x38, 0x52, 
   0x60, 0x75, 0x76, 0x9C, 0xA8, 0x6A, 0x9C, 0xCD, 0x35, 0x39, 0x93, 0x2D, 0x3E, 0x57, 0x4A, 0x8D, 
   0x77, 0x50, 0x64, 0x77, 0x45, 0x2B, 0x6D, 0x67, 0x64, 0xB3, 0x2E, 0x60, 0x98, 0x40, 0x61, 0x6B, 
   0x63, 0x5C, 0x8E, 0x47, 0x6E, 0xB1, 0x52, 0x68, 0xAB, 0x2B, 0x58, 0x7D, 0x43, 0x6F, 0x66, 0x77, 
   0x63, 0x9A, 0x8D, 0x6D, 0xB1, 0x3A, 0x4A, 0x8E, 0x0A, 0x55, 0x76, 0x22, 0x7C, 0x81, 0x7F, 0x4F, 
   0xB3, 0x53, 0x4B, 0x69, 0x43, 0x7E, 0x6E, 0x70, 0x6C, 0xA7, 0x4D, 0x32, 0x80, 0x14, 0x28, 0x6A, 
   0x38, 0x7B, 0x88, 0x95, 0xB6, 0xE4, 0x83, 0x75, 0xB4, 0x2B, 0x23, 0x1C, 0x07, 0x3F, 0x4E, 0x41, 
   0x73, 0xA5, 0x49, 0x5A, 0x98, 0x68, 0x5D, 0x83, 0x69, 0xB9, 0xA0, 0x57, 0x7E, 0x90, 0x40, 0x1A, 
   0x79, 0x68, 0x37, 0xA6, 0x72, 0x89, 0x84, 0x42, 0xB7, 0xB5, 0x39, 0x5E, 0xAC, 0x11, 0x28, 0x3C, 
   0x35, 0x22, 0x00, 0x66, 0x70, 0xA4, 0x74, 0xA1, 0xFF, 0x63, 0x74, 0xB8, 0x4C, 0x4B, 0x3C, 0x7E, 
   0x88, 0x7C, 0x59, 0x6F, 0x9C, 0x1D, 0x44, 0x57, 0x11, 0x37, 0x6E, 0x24, 0x3E, 0x97, 0x7E, 0x79, 
   0x72, 0xB3, 0x8B, 0xA6, 0x62, 0x6F, 0xC8, 0x15, 0x62, 0x71, 0x3F, 0x65, 0x72, 0x4E, 0x63, 0x85, 
   0x2C, 0x61, 0x5B, 0x29, 0x5F, 0x5F, 0x91, 0x52, 0x71, 0x7A, 0x4C, 0x94, 0x28, 0x4C, 0x99, 0x15, 
   0x58, 0x70, 0x55, 0x64, 0x4D, 0x62, 0x53, 0x7B, 0x3B, 0x59, 0x93, 0x58, 0x53, 0x93, 0x4D, 0x54, 
   0x6A, 0x48, 0x67, 0x44, 0x7C, 0x68, 0x9B, 0x5E, 0x94, 0xC4, 0x35, 0x52, 0x8E, 0x34, 0x1D, 0x58, 
   0x56, 0x4A, 0x6D, 0x4B, 0x41, 0x72, 0x2A, 0x60, 0x79, 0x5E, 0x95, 0x6E, 0x65, 0x4A, 0x6E, 0x48, 
   0x3D, 0x68, 0x52, 0x59, 0x74, 0x2A, 0x59, 0xB8, 0x46, 0x59, 0x72, 0x5D, 0x59, 0x49, 0x62, 0x59, 
   0x86, 0x33, 0x59, 0x64, 0x27, 0x59, 0x6B, 0x55, 0x59, 0x8E, 0x61, 0x4E, 0xA4, 0x44, 0x75, 0x6E, 
   0x3F, 0x42, 0x39, 0x40, 0x52, 0x55, 0x46, 0x58, 0x8F, 0x4D, 0x52, 0x6F, 0x53, 0x4D, 0x4F, 0x70, 
   0x64, 0x95, 0x63, 0x64, 0xA7, 0x2E, 0x4D, 0x6C, 0x3F, 0x58, 0x4D, 0x5B, 0x58, 0x63, 0x29, 0x4D, 
   0x6F, 0x4C, 0x59, 0x6B, 0x68, 0x6A, 0x99, 0x40, 0x53, 0x92, 0x3F, 0x64, 0x5E, 0x4F, 0x4D, 0x57, 
   0x3F, 0x52, 0x6F, 0x5B, 0x52, 0xA9, 0x5F, 0x7B, 0xAE, 0x70, 0x96, 0xCA, 0x3B, 0x4F, 0x72, 0x3A, 
   0x0F, 0x55, 0x40, 0x54, 0x84, 0x62, 0x9A, 0xBF, 0x50, 0x72, 0xCA, 0x39, 0x5A, 0x67, 0x3F, 0x54, 
   0x56, 0x40, 0x43, 0x9B, 0x63, 0x78, 0xA2, 0x63, 0x7E, 0xAE, 0x35, 0x62, 0x91, 0x45, 0x4B, 0x42, 
   0x45, 0x61, 0x94, 0x57, 0x87, 0xFF, 0x46, 0x69, 0x9F, 0x6E, 0x34, 0x67, 0x40, 0x45, 0x81, 0x1E, 
   0x3B, 0x49, 0x63, 0x5F, 0x95, 0x8A, 0x9E, 0xED, 0x44, 0x5F, 0xBE, 0x1A, 0x3B, 0x43, 0x3B, 0x46, 
   0x5E, 0x36, 0x6E, 0xA3, 0x49, 0x63, 0x8E, 0x50, 0x4C, 0x73, 0x5C, 0x5E, 0xA8, 0x50, 0x7A, 0xDA, 
   0x4F, 0x5D, 0x62, 0x4E, 0x3F, 0x4B, 0x32, 0x40, 0xAD, 0x43, 0x6A, 0x83, 0x39, 0x56, 0xA7, 0x3B, 
   0x7A, 0xAE, 0x86, 0xC8, 0x8C, 0x5D, 0x41, 0x8C, 0x23, 0x00, 0xB3, 0x56, 0x6B, 0xD3, 0x62, 0x5C, 
   0x80, 0x51, 0x78, 0x44, 0x4B, 0x67, 0x61, 0x44, 0x44, 0xBE, 0x44, 0x5A, 0xB4, 0x5B, 0x4F, 0x86, 
   0x3F, 0x23, 0x7E, 0x55, 0x8B, 0x78, 0x43, 0x97, 0x73, 0x49, 0x40, 0xBF, 0x49, 0x45, 0xA9, 0x49, 
   0x4B, 0x8B, 0x2D, 0x54, 0x7F, 0x40, 0x9A, 0x91, 0x7F, 0x9E, 0xC3, 0x5C, 0x35, 0x7D, 0x16, 0x28, 
   0x64, 0x3E, 0x61, 0x86, 0x5B, 0x62, 0x6D, 0x57, 0x57, 0xB9, 0x6D, 0x62, 0xDB, 0x3E, 0x61, 0x8E, 
   0x1B, 0x39, 0x25, 0x43, 0x45, 0x6A, 0x4B, 0x84, 0xD8, 0x63, 0x68, 0xA7, 0x4D, 0x2F, 0x58, 0x68, 
   0x52, 0xBE, 0x1E, 0x76, 0xA7, 0x35, 0x6C, 0x8E, 0x8A, 0x66, 0x5F, 0x46, 0x82, 0x76, 0x13, 0x3D, 
   0xBB, 0x6E, 0x42, 0x8E, 0x69, 0x65, 0x71, 0x52, 0x78, 0x99, 0x57, 0x83, 0xAF, 0x65, 0x75, 0xAC, 
   0x24, 0x39, 0x69, 0x00, 0x16, 0x66, 0x32, 0x3B, 0x4F, 0x80, 0x68, 0x64, 0x99, 0xD2, 0xFB, 0x80, 
   0x8D, 0xE3, 0x05, 0x39, 0x2E, 0x00, 0x35, 0x2C, 0x49, 0x24, 0x9B, 0x79, 0x8B, 0xD6, 0x79, 0x8B, 
   0xBE, 0x38, 0x3F, 0x60, 0x3C, 0x69, 0x4C, 0x30, 0x2E, 0x74, 0x41, 0x07, 0xA7, 0x6F, 0x65, 0x90, 
   0x3C, 0x9B, 0x9A, 0x35, 0x7F, 0x54, 0x68, 0x44, 0x64, 0x3F, 0x31, 0x80, 0x49, 0x69, 0xA8, 0x4E, 
   0x73, 0x79, 0x41, 0x1D, 0x29, 0x18, 0x39, 0x5E, 0x20, 0x73, 0xCE, 0x51, 0x7A, 0xC3, 0x97, 0x41, 
   0x54, 0x41, 0x46, 0x42, 0x3A, 0x6E, 0x9D, 0x5F, 0x57, 0x92, 0x2B, 0x4B, 0x4E, 0x00, 0x40, 0x55, 
   0x51, 0x21, 0x8C, 0x6C, 0x85, 0xBC, 0x84, 0xB4, 0x94, 0x59, 0x73, 0x86, 0x11, 0x18, 0x61, 0x00, 
   0x0A, 0x49, 0x5B, 0x77, 0x83, 0x8E, 0x9A, 0xAD, 0x2C, 0x4F, 0x80, 0x00, 0x11, 0x7F, 0x38, 0x4C, 
   0x5D, 0x6E, 0x8D, 0x6A, 0x60, 0x4B, 0x94, 0x6C, 0x68, 0xB3, 0x6A, 0x83, 0xA7, 0x1D, 0x22, 0x6C, 
   0x11, 0x44, 0x5F, 0x6D, 0x89, 0x7B, 0x41, 0x6C, 0x93, 0x26, 0x33, 0x62, 0x7B, 0x7D, 0x86, 0x75, 
   0x7C, 0xD0, 0x02, 0x25, 0x85, 0x2F, 0x25, 0x3F, 0x79, 0x76, 0x88, 0x2B, 0x6D, 0xA6, 0x33, 0x41, 
   0x63, 0x7E, 0x6F, 0x7B, 0x67, 0x80, 0xBA, 0x3D, 0x5C, 0xAE, 0x51, 0x43, 0x7E, 0x28, 0x37, 0x3E, 
   0x19, 0x44, 0x50, 0x65, 0x84, 0xAE, 0x88, 0x7F, 0xC5, 0x5F, 0x55, 0x84, 0x00, 0x32, 0x2C, 0x1F, 
   0x28, 0x66, 0x66, 0x8B, 0xAD, 0x58, 0x6B, 0x6C, 0x59, 0x34, 0x6F, 0x5E, 0x8A, 0xCC, 0x52, 0x90, 
   0xC7, 0x57, 0x60, 0x75, 0x4A, 0x52, 0x6C, 0x21, 0x24, 0x72, 0x38, 0x5E, 0x7F, 0x5C, 0x5B, 0x8D, 
   0x5E, 0x91, 0xB6, 0x65, 0x8B, 0xB1, 0x59, 0x51, 0x71, 0x3B, 0x3F, 0x70, 0x3B, 0x5A, 0x7B, 0x58, 
   0x55, 0x82, 0x5D, 0x56, 0xC0, 0x4B, 0xB1, 0xA3, 0x39, 0x55, 0x47, 0x45, 0x00, 0x7A, 0x41, 0x89, 
   0xB5, 0x5E, 0xAD, 0xA5, 0x65, 0x63, 0x87, 0x48, 0x4F, 0x7A, 0x37, 0x49, 0x79, 0x74, 0x5A, 0x74, 
   0x3B, 0x66, 0xA2, 0x0F, 0x5C, 0xB9, 0x94, 0x4D, 0x5E, 0x89, 0x97, 0x69, 0x31, 0x85, 0xCF, 0x35, 
   0x22, 0x95, 0x3A, 0x2E, 0x33, 0x26, 0x70, 0x68, 0x62, 0x73, 0xB5, 0x81, 0x79, 0x96, 0x5F, 0x73, 
   0xA2, 0x57, 0x5B, 0x9C, 0x4F, 0x65, 0xB0, 0x41, 0x6F, 0x9A, 0x39, 0x6D, 0x36, 0x33, 0x2D, 0x25, 
   0x0D, 0x23, 0x9C, 0x67, 0x82, 0xEC, 0xA7, 0xC4, 0xDB, 0x61, 0x68, 0x98, 0x15, 0x48, 0x31, 0x15, 
   0x30, 0x2F, 0x8D, 0x7A, 0xB4, 0x76, 0x7F, 0xCC, 0x25, 0x46, 0x5F, 0x14, 0x68, 0x5A, 0x6B, 0x85, 
   0xAB, 0xA5, 0x72, 0xD9, 0x43, 0x54, 0x98, 0x1E, 0x26, 0x61, 0x39, 0x6A, 0x52, 0x5B, 0x90, 0x78, 
   0x44, 0x49, 0x94, 0x4A, 0x41, 0x71, 0x23, 0x40, 0x54, 0x7F, 0x51, 0xA4, 0x79, 0x58, 0xAF, 0x21, 
   0x64, 0x48, 0x0A, 0x59, 0x7B, 0x50, 0x59, 0x9D, 0x91, 0x59, 0x5E, 0x3C, 0x43, 0x6A, 0x20, 0x55, 
   0x72, 0x6A, 0x6D, 0xA6, 0x75, 0x94, 0xA6, 0x4B, 0x4D, 0x88, 0x20, 0x17, 0x63, 0x09, 0x44, 0x56, 
   0x39, 0x4C, 0x78, 0x8C, 0x65, 0x67, 0x8D, 0x7D, 0x95, 0x3C, 0x60, 0x7E, 0x13, 0x48, 0x6D, 0x4C, 
   0x59, 0x6D, 0x6F, 0x59, 0x84, 0x4D, 0x59, 0x84, 0x36, 0x59, 0x71, 0x63, 0x59, 0x7B, 0x40, 0x59, 
   0x6A, 0x4A, 0x59, 0x75, 0x43, 0x59, 0x6F, 0x28, 0x59, 0x6A, 0x5C, 0x59, 0x5F, 0x79, 0x4E, 0xA3, 
   0x34, 0x75, 0x90, 0x29, 0x59, 0x4A, 0x63, 0x52, 0x39, 0x47, 0x58, 0x8A, 0x4D, 0x58, 0x7B, 0x63, 
   0x4D, 0x78, 0x29, 0x5E, 0xA0, 0x3F, 0x64, 0x88, 0x50, 0x4D, 0x6A, 0x57, 0x58, 0x52, 0x5C, 0x58, 
   0x74, 0x50, 0x4D, 0x80, 0x22, 0x59, 0x5F, 0x3F, 0x59, 0x7B, 0x62, 0x59, 0x91, 0x57, 0x5E, 0x69, 
   0x5B, 0x5E, 0x69, 0x16, 0x5E, 0x80, 0x4D, 0x81, 0xAA, 0x52, 0x97, 0xC0, 0x46, 0x67, 0x7F, 0x57, 
   0x4D, 0x83, 0x50, 0x3B, 0x82, 0x44, 0x41, 0x77, 0x28, 0x65, 0x84, 0x50, 0x79, 0xAD, 0x57, 0x95, 
   0xB9, 0x4C, 0x55, 0x7A, 0x41, 0x15, 0x7F, 0x58, 0x55, 0x97, 0x63, 0x90, 0x9E, 0x35, 0x74, 0x9E, 
   0x4B, 0x67, 0x76, 0x4B, 0x81, 0x8D, 0x45, 0x34, 0xED, 0x40, 0x23, 0x6E, 0x5C, 0x63, 0x34, 0x57, 
   0xAF, 0xBD, 0x3A, 0x64, 0xA8, 0x3A, 0x1A, 0x75, 0x84, 0x64, 0xA8, 0x49, 0xA8, 0xDE, 0x0E, 0x4B, 
   0x47, 0x3B, 0x11, 0x19, 0x42, 0x68, 0x9F, 0x61, 0x8C, 0xE2, 0x67, 0x6A, 0xC5, 0x2E, 0x26, 0x5D, 
   0x50, 0x7B, 0x79, 0x66, 0xB9, 0xA1, 0x54, 0x3A, 0x71, 0x04, 0x00, 0xA1, 0x2D, 0x87, 0xCA, 0x85, 
   0xD4, 0xA3, 0x53, 0x40, 0x6A, 0x47, 0x59, 0x9D, 0x57, 0x7F, 0xDC, 0x1D, 0x18, 0xAD, 0x3F, 0x67, 
   0x93, 0x67, 0x78, 0x68, 0x45, 0x5C, 0x67, 0x50, 0x5B, 0x90, 0x56, 0x3E, 0xB8, 0x3F, 0x6C, 0xB3, 
   0x4A, 0x61, 0x52, 0x3F, 0x1E, 0x70, 0x5B, 0x6A, 0xC6, 0x66, 0xBF, 0xAB, 0x3E, 0x4C, 0x8D, 0x16, 
   0x00, 0x7B, 0x45, 0x53, 0x86, 0x7F, 0xC7, 0xA8, 0x6E, 0x98, 0xA7, 0x28, 0x0C, 0x99, 0x2C, 0x16, 
   0x53, 0x55, 0x73, 0x5A, 0x4B, 0x86, 0xB9, 0x5C, 0x7B, 0xE4, 0x4B, 0x63, 0xC0, 0x4A, 0x4B, 0x5B, 
   0x3E, 0x56, 0x6F, 0x38, 0x68, 0x9C, 0x44, 0x6D, 0x70, 0x40, 0x51, 0x89, 0x6E, 0x3B, 0xC4, 0x41, 
   0x5F, 0x8D, 0x41, 0x78, 0xC0, 0x5D, 0x89, 0xA7, 0x3B, 0x5A, 0x70, 0x63, 0x32, 0x4C, 0x51, 0x7B, 
   0x86, 0x13, 0x76, 0xB6, 0x63, 0x27, 0xB2, 0x69, 0x66, 0x89, 0x52, 0x94, 0x93, 0x62, 0x60, 0xA3, 
   0x33, 0x47, 0x8F, 0x2C, 0x51, 0x87, 0x49, 0x46, 0x79, 0x34, 0x37, 0x40, 0x42, 0x69, 0x92, 0xA9, 
   0xE3, 0xE3, 0x62, 0x86, 0x9D, 0x00, 0x10, 0x34, 0x14, 0x40, 0x55, 0x7D, 0x47, 0x84, 0x74, 0x81, 
   0x9D, 0x57, 0xA7, 0xB4, 0x38, 0x38, 0xA0, 0x10, 0x0D, 0x6A, 0x4E, 0x41, 0x56, 0x86, 0x70, 0x82, 
   0x34, 0x66, 0x88, 0x00, 0x50, 0x76, 0x5E, 0x78, 0x7C, 0xBF, 0x83, 0x92, 0x2F, 0x5A, 0x85, 0x09, 
   0x4C, 0x40, 0x4B, 0x4A, 0x6E, 0x34, 0x33, 0x8C, 0x00, 0x34, 0x94, 0x3F, 0x6F, 0x7E, 0x7C, 0x75, 
   0x83, 0xA4, 0x63, 0x9F, 0x3A, 0x2E, 0x65, 0x00, 0x45, 0x64, 0x41, 0x63, 0x7B, 0x4E, 0x5E, 0x66, 
   0x0D, 0x49, 0x5E, 0x70, 0x68, 0xB1, 0xB0, 0x96, 0xE4, 0x36, 0x77, 0x6A, 0x0C, 0x2A, 0x3E, 0x3E, 
   0x3E, 0x71, 0x3A, 0x3E, 0x7E, 0x68, 0x5B, 0x8B, 0x7D, 0x6D, 0xA2, 0x03, 0x39, 0x69, 0x00, 0x1E, 
   0x5E, 0x51, 0x49, 0x77, 0x9E, 0xC9, 0xB2, 0x7C, 0xA1, 0xC2, 0x3B, 0x26, 0x59, 0x0B, 0x1F, 0x52, 
   0x11, 0x48, 0x7A, 0x4D, 0x84, 0x71, 0x99, 0x9C, 0xA7, 0x5F, 0x73, 0x97, 0x08, 0x1B, 0x8C, 0x4B, 
   0x47, 0xA2, 0x72, 0x7A, 0xAB, 0x05, 0x46, 0x64, 0x00, 0x00, 0x1B, 0x7C, 0x68, 0x85, 0xA7, 0xC0, 
   0xFF, 0x4C, 0x87, 0x98, 0x38, 0x3B, 0x35, 0x47, 0x44, 0x83, 0x3F, 0x65, 0x9F, 0x0C, 0x43, 0x71, 
   0x2A, 0x44, 0x5B, 0x66, 0x78, 0x96, 0x7E, 0x68, 0xA3, 0x4F, 0x51, 0x92, 0x35, 0x77, 0x9B, 0x17, 
   0x5E, 0x70, 0x0D, 0x00, 0x2B, 0x4F, 0x28, 0x4B, 0x87, 0xBC, 0xA6, 0x77, 0x9D, 0xBD, 0x5A, 0x68, 
   0xCF, 0x4C, 0x5A, 0xC1, 0x33, 0x5E, 0x68, 0x32, 0x46, 0x32, 0x3E, 0x1F, 0x67, 0x45, 0x77, 0xD5, 
   0x4D, 0x8A, 0x9E, 0x6A, 0x58, 0x7C, 0x4E, 0x73, 0x82, 0x4D, 0x77, 0x9E, 0x67, 0x2B, 0x92, 0x1C, 
   0x53, 0xA7, 0x27, 0x70, 0x62, 0x34, 0x66, 0x7F, 0x7F, 0x56, 0xAD, 0x6F, 0x72, 0x64, 0x1F, 0x51, 
   0x83, 0x41, 0x8A, 0xD9, 0x5E, 0x7E, 0xC2, 0x43, 0x2E, 0x65, 0x70, 0x78, 0x80, 0x4D, 0x99, 0xB1, 
   0x3A, 0x1A, 0x76, 0x29, 0x09, 0x16, 0x15, 0x79, 0x8B, 0x9A, 0xC0, 0xFF, 0xA0, 0x7B, 0xB0, 0x25, 
   0x2E, 0x5D, 0x00, 0x4A, 0x76, 0x41, 0x62, 0x5B, 0x4A, 0x48, 0x5F, 0x6A, 0x74, 0xC9, 0x98, 0xBA, 
   0xCB, 0x5D, 0xA6, 0xAC, 0x26, 0x41, 0xAD, 0x46, 0x10, 0x42, 0x4C, 0x38, 0x09, 0x36, 0x7A, 0x79, 
   0x4E, 0x81, 0xFF, 0x77, 0x66, 0xD4, 0x60, 0x77, 0x5F, 0x42, 0x8D, 0x72, 0x2F, 0x5E, 0x97, 0x1F, 
   0x4C, 0x4D, 0x49, 0x3B, 0x5F, 0x79, 0x65, 0xBC, 0x90, 0x9F, 0xAC, 0x4F, 0x81, 0x89, 0x35, 0x6D, 
   0x9E, 0x17, 0x3C, 0x7A, 0x4B, 0x1E, 0x83, 0x51, 0x74, 0x91, 0x4C, 0x74, 0x56, 0x51, 0x67, 0x72, 
   0x67, 0x5E, 0x94, 0x44, 0x3A, 0x89, 0x1C, 0x40, 0x8D, 0x39, 0x5D, 0x5E, 0x79, 0x64, 0x42, 0x62, 
   0x59, 0xA9, 0x39, 0x59, 0x98, 0x1D, 0x59, 0x5E, 0x4C, 0x43, 0x58, 0x70, 0x5B, 0x5A, 0x5F, 0x73, 
   0xAC, 0x64, 0x94, 0xC3, 0x45, 0x52, 0x7C, 0x32, 0x17, 0x45, 0x31, 0x56, 0x4F, 0x3D, 0x5D, 0x83, 
   0x29, 0x5F, 0x84, 0x6A, 0x88, 0x7E, 0x88, 0x54, 0x7E, 0x59, 0x3C, 0x6D, 0x23, 0x4D, 0x72, 0x34, 
   0x64, 0x7D, 0x41, 0x59, 0x77, 0x80, 0x59, 0x65, 0x64, 0x59, 0x76, 0x41, 0x59, 0x7B, 0x45, 0x59, 
   0x6A, 0x56, 0x59, 0x75, 0x39, 0x59, 0x8B, 0x50, 0x59, 0x6E, 0x5C, 0x59, 0x5E, 0x57, 0x59, 0x7B, 
   0x40, 0x4E, 0x98, 0x4C, 0x75, 0x8B, 0x47, 0x47, 0x4A, 0x6F, 0x58, 0x45, 0x57, 0x58, 0x96, 0x34, 
   0x52, 0x81, 0x3F, 0x64, 0x65, 0x56, 0x59, 0x82, 0x40, 0x64, 0x92, 0x51, 0x4D, 0x7A, 0x62, 0x58, 
   0x5D, 0x3F, 0x52, 0x5D, 0x33, 0x64, 0x8B, 0x3F, 0x59, 0x6F, 0x57, 0x59, 0x6F, 0x6E, 0x59, 0x7A, 
   0x56, 0x59, 0x79, 0x1C, 0x59, 0x51, 0x45, 0x5C, 0x86, 0x40, 0x57, 0x7B, 0x57, 0x7E, 0xC4, 0x5C, 
   0x7C, 0xB2, 0x3F, 0x3B, 0x70, 0x33, 0x1D, 0x41, 0x44, 0x36, 0x5A, 0x57, 0xA6, 0xBF, 0x58, 0x8B, 
   0xE8, 0x58, 0x5C, 0x75, 0x41, 0x43, 0x63, 0x41, 0x27, 0x86, 0x58, 0x67, 0xA4, 0x63, 0xB8, 0xD2, 
   0x3A, 0x78, 0xAE, 0x34, 0x1F, 0x40, 0x5B, 0x2F, 0x5C, 0x34, 0x63, 0xBF, 0x40, 0x70, 0xB5, 0x79, 
   0x8D, 0x98, 0x4B, 0x53, 0x9D, 0x17, 0x25, 0x74, 0x62, 0x75, 0x8A, 0x72, 0x86, 0xA6, 0x4E, 0x57, 
   0x99, 0x1F, 0x2E, 0x3E, 0x41, 0x3F, 0x84, 0x4E, 0x8B, 0xF7, 0x3F, 0x54, 0x8B, 0x4B, 0x6B, 0x58, 
   0x67, 0x76, 0xA2, 0x3F, 0x53, 0x88, 0x38, 0x4C, 0x95, 0x38, 0x6E, 0xB8, 0x61, 0x5E, 0x85, 0x3A, 
   0x48, 0x86, 0x5D, 0x6B, 0xBA, 0x5E, 0x71, 0xB3, 0x64, 0x77, 0x7F, 0x40, 0x75, 0x7E, 0x28, 0x34, 
   0x8F, 0x44, 0x39, 0xC2, 0x56, 0x72, 0xAE, 0x4B, 0x5C, 0x6D, 0x50, 0x56, 0x55, 0x3F, 0x5D, 0x8A, 
   0x3F, 0x6E, 0xB0, 0x5B, 0x52, 0xC4, 0x5B, 0x4C, 0x90, 0x3F, 0x64, 0xA0, 0x34, 0x82, 0x94, 0x51, 
   0x65, 0x88, 0x7F, 0x58, 0xA9, 0x5C, 0x4B, 0x9C, 0x28, 0x3A, 0x78, 0x3E, 0x7E, 0x7C, 0x55, 0x51, 
   0x71, 0x3F, 0x3B, 0x85, 0x56, 0x75, 0xC0, 0x50, 0x81, 0xC0, 0x34, 0x4D, 0x64, 0x4B, 0x47, 0x90, 
   0x67, 0x69, 0xC7, 0x4B, 0x7F, 0x6A, 0x3F, 0x1D, 0x41, 0x4A, 0x46, 0x7C, 0x34, 0x81, 0xA8, 0x41, 
   0x61, 0xB5, 0x7B, 0x72, 0x93, 0x64, 0x7D, 0x9D, 0x1F, 0x3E, 0xAB, 0x3B, 0x5F, 0x6A, 0x74, 0x54, 
   0x36, 0x51, 0x60, 0x99, 0x23, 0x77, 0xD9, 0x5C, 0x55, 0xA0, 0x63, 0x55, 0x6C, 0x1A, 0x61, 0x82, 
   0x65, 0x78, 0xAF, 0xA2, 0x77, 0x9C, 0x2E, 0x48, 0x88, 0x15, 0x35, 0x8F, 0x43, 0x31, 0x33, 0x4C, 
   0x62, 0x46, 0x80, 0xAE, 0xDD, 0x95, 0x86, 0xE3, 0x10, 0x44, 0x40, 0x00, 0x31, 0x21, 0x72, 0x63, 
   0x7F, 0x74, 0x90, 0xDD, 0x42, 0x40, 0xC0, 0x74, 0x51, 0x7D, 0x66, 0xA4, 0x67, 0x30, 0x47, 0x47, 
   0x28, 0x2A, 0x64, 0x3F, 0x3C, 0x98, 0x47, 0x89, 0xAA, 0x6A, 0x8A, 0x86, 0x7F, 0x66, 0x35, 0x2C, 
   0x36, 0x7A, 0x00, 0x62, 0xA9, 0x35, 0x6D, 0x8C, 0x4E, 0x23, 0x3C, 0x3A, 0x58, 0x5A, 0x63, 0xA8, 
   0xBC, 0x7A, 0x63, 0xAC, 0x51, 0x23, 0x60, 0x1B, 0x51, 0x53, 0x0A, 0x53, 0x81, 0x55, 0x5B, 0x83, 
   0x73, 0x94, 0x8B, 0x34, 0x5F, 0x8C, 0x1D, 0x25, 0x9D, 0x46, 0x5E, 0x97, 0x63, 0x92, 0x62, 0x5E, 
   0x5D, 0x7E, 0x40, 0x28, 0x78, 0x1D, 0x28, 0x6D, 0x3A, 0x73, 0x74, 0x78, 0x86, 0x81, 0x45, 0x31, 
   0x83, 0x11, 0x43, 0xA6, 0x61, 0x8D, 0xAA, 0x56, 0x65, 0x75, 0x1D, 0x2B, 0x56, 0x2F, 0x4D, 0x68, 
   0x58, 0x4E, 0x81, 0x4E, 0x50, 0x94, 0x6B, 0x79, 0x7B, 0x4D, 0x7F, 0xBA, 0x4B, 0x49, 0xA8, 0x1C, 
   0x2B, 0x5B, 0x44, 0x5D, 0x76, 0x45, 0x64, 0x70, 0x1F, 0x32, 0x66, 0x5A, 0x51, 0x7F, 0x72, 0x97, 
   0xC0, 0x5B, 0x75, 0xD6, 0x3D, 0x4B, 0x61, 0x3B, 0x44, 0x26, 0x1E, 0x49, 0x87, 0x41, 0x77, 0xA0, 
   0x70, 0x77, 0x9B, 0x4F, 0x39, 0x5C, 0x39, 0x4A, 0x6F, 0x61, 0x8A, 0xB5, 0x81, 0x89, 0xDB, 0x18, 
   0x4D, 0x71, 0x00, 0x00, 0x14, 0x25, 0x26, 0x55, 0x73, 0x8C, 0xAA, 0x71, 0x94, 0xA9, 0x76, 0x56, 
   0xAB, 0x36, 0x65, 0xB6, 0x34, 0x59, 0x8D, 0x4A, 0x59, 0x79, 0x3F, 0x76, 0x8E, 0x45, 0x4E, 0x67, 
   0x4C, 0x55, 0x84, 0x4D, 0x72, 0x86, 0x59, 0x89, 0x93, 0x74, 0x55, 0xAA, 0x3F, 0x4D, 0xAE, 0x26, 
   0x4C, 0x67, 0x15, 0x4C, 0x54, 0x5B, 0x2C, 0x6C, 0x58, 0x7E, 0x9C, 0x5E, 0xA1, 0xA9, 0x74, 0x6D, 
   0x99, 0x1F, 0x16, 0x66, 0x30, 0x4A, 0xB1, 0x7B, 0x9B, 0xBC, 0x53, 0x73, 0x9D, 0x36, 0x55, 0x8E, 
   0x57, 0x36, 0x42, 0x45, 0x4D, 0x48, 0x2F, 0x77, 0xBD, 0x3D, 0x57, 0xC0, 0x83, 0x69, 0x93, 0x6C, 
   0x8B, 0x8C, 0x21, 0x5C, 0x68, 0x37, 0x1D, 0x6D, 0x54, 0x41, 0x97, 0x61, 0x89, 0x8E, 0x73, 0xA7, 
   0xD3, 0x72, 0x89, 0xC5, 0x43, 0x51, 0x44, 0x20, 0x0A, 0x10, 0x43, 0x29, 0xAE, 0x6C, 0xAA, 0xFB, 
   0x72, 0xAB, 0x94, 0x59, 0x5E, 0x79, 0x1E, 0x29, 0x65, 0x29, 0x62, 0x53, 0x5D, 0x7A, 0x99, 0x53, 
   0x5E, 0xBC, 0x22, 0x48, 0x6C, 0x4C, 0x60, 0x5C, 0xBF, 0xA5, 0xC3, 0x8E, 0x92, 0xCD, 0x00, 0x3E, 
   0x63, 0x00, 0x1E, 0x48, 0x49, 0x68, 0x62, 0x90, 0x8F, 0x8A, 0x69, 0x66, 0xA0, 0x41, 0x3C, 0x77, 
   0x40, 0x41, 0x39, 0x56, 0x51, 0xB6, 0x60, 0x5D, 0xAA, 0x27, 0x64, 0x3C, 0x1D, 0x59, 0x58, 0x68, 
   0x59, 0x97, 0x91, 0x59, 0xA3, 0x3A, 0x3D, 0x6A, 0x01, 0x55, 0x5A, 0x6F, 0x73, 0x94, 0x9D, 0x94, 
   0xAB, 0x3A, 0x52, 0x87, 0x2C, 0x06, 0x62, 0x2B, 0x4A, 0x4F, 0x49, 0x5D, 0x71, 0x4B, 0x5A, 0x72, 
   0x6E, 0x88, 0x7E, 0x41, 0x4F, 0x7E, 0x30, 0x53, 0x6D, 0x69, 0x4D, 0x78, 0x5D, 0x58, 0x9A, 0x1E, 
   0x4D, 0x8E, 0x45, 0x64, 0x54, 0x46, 0x59, 0x6F, 0x63, 0x59, 0x6A, 0x4C, 0x59, 0x7B, 0x40, 0x59, 
   0x86, 0x40, 0x59, 0x8B, 0x57, 0x59, 0x46, 0x62, 0x59, 0x62, 0x34, 0x59, 0x85, 0x2E, 0x59, 0x6A, 
   0x4C, 0x59, 0x76, 0x64, 0x53, 0x98, 0x64, 0x64, 0x80, 0x57, 0x4D, 0x5C, 0x2D, 0x58, 0x50, 0x33, 
   0x58, 0x7E, 0x5B, 0x4D, 0x74, 0x45, 0x64, 0x6F, 0x5C, 0x59, 0x81, 0x62, 0x64, 0x86, 0x34, 0x4D, 
   0x69, 0x3F, 0x58, 0x68, 0x56, 0x4D, 0x5D, 0x50, 0x64, 0x85, 0x45, 0x59, 0x6A, 0x4B, 0x59, 0x97, 
   0x39, 0x5E, 0x84, 0x4A, 0x5E, 0x45, 0x3F, 0x54, 0x85, 0x39, 0x43, 0x7F, 0x56, 0x83, 0x9C, 0x50, 
   0x83, 0xAC, 0x3F, 0x54, 0x7D, 0x3F, 0x41, 0x65, 0x4B, 0x47, 0x93, 0x4C, 0x49, 0x90, 0x58, 0x79, 
   0x92, 0x52, 0x8B, 0xC0, 0x5D, 0x7F, 0x81, 0x46, 0x5B, 0x70, 0x41, 0x38, 0xA9, 0x58, 0x82, 0xA3, 
   0x68, 0x6B, 0xB3, 0x40, 0x37, 0x7D, 0x29, 0x49, 0x2E, 0x56, 0x99, 0xAE, 0x5B, 0x7B, 0xFF, 0x2E, 
   0x14, 0x8E, 0x50, 0x4D, 0x65, 0x56, 0xA8, 0xBE, 0x2E, 0x3C, 0x84, 0x4B, 0x2A, 0x45, 0x78, 0x7A, 
   0x9D, 0x49, 0x90, 0xFF, 0x1F, 0x3F, 0x9B, 0x36, 0x0D, 0x05, 0x55, 0x8C, 0x83, 0x6D, 0xA4, 0xD6, 
   0x50, 0x48, 0x78, 0x34, 0x14, 0x96, 0x40, 0x76, 0xD4, 0x7E, 0xC5, 0x7F, 0x56, 0x2F, 0x5D, 0x28, 
   0x00, 0xB9, 0x34, 0x79, 0xD0, 0x5D, 0x71, 0x8A, 0x70, 0x6D, 0x66, 0x64, 0x8E, 0x67, 0x40, 0x5E, 
   0xBE, 0x28, 0x2E, 0xD0, 0x4F, 0x39, 0xBB, 0x5B, 0x6D, 0x8F, 0x4B, 0x69, 0x27, 0x50, 0x58, 0x46, 
   0x56, 0x64, 0xDA, 0x4A, 0x97, 0xF9, 0x33, 0x40, 0x86, 0x34, 0x08, 0x4B, 0x58, 0x7D, 0xA0, 0x86, 
   0xF6, 0xCD, 0x51, 0x6F, 0xA3, 0x1C, 0x00, 0x79, 0x32, 0x2C, 0x6C, 0x55, 0x7F, 0x6D, 0x56, 0xA3, 
   0xA2, 0x56, 0x53, 0xE2, 0x39, 0x35, 0x8B, 0x3F, 0x4C, 0x40, 0x50, 0x81, 0x95, 0x5C, 0x70, 0xDA, 
   0x46, 0x6F, 0x90, 0x6E, 0x4C, 0x6C, 0x4B, 0x40, 0x8D, 0x33, 0x4D, 0x71, 0x22, 0x6C, 0x9B, 0x6E, 
   0x9A, 0xAD, 0x5E, 0x4F, 0x92, 0x37, 0x38, 0x92, 0x64, 0x7C, 0xA2, 0x42, 0x60, 0x95, 0x47, 0x3E, 
   0x99, 0x6E, 0x55, 0x59, 0x39, 0x93, 0x70, 0x0B, 0x65, 0xB0, 0x2A, 0x1C, 0x94, 0x7D, 0x6D, 0x72, 
   0x8A, 0x91, 0x8F, 0x50, 0x69, 0xC7, 0x5D, 0x89, 0xB2, 0x32, 0x58, 0x58, 0x13, 0x2E, 0x49, 0x26, 
   0x00, 0x39, 0x73, 0x73, 0x8D, 0x97, 0xD2, 0xFF, 0x57, 0x82, 0xAA, 0x00, 0x61, 0x2A, 0x15, 0x2F, 
   0x79, 0x46, 0x00, 0xA2, 0x7D, 0x9D, 0x8C, 0xAF, 0xDD, 0xD9, 0x3F, 0x46, 0x6E, 0x00, 0x1F, 0x3C, 
   0x34, 0x2E, 0x63, 0x7F, 0x57, 0x86, 0x4B, 0x59, 0x9D, 0x01, 0x6B, 0x52, 0x67, 0x6B, 0x52, 0x77, 
   0x53, 0xA3, 0x16, 0x36, 0x93, 0x1B, 0x52, 0x70, 0x72, 0x74, 0x59, 0x72, 0x5C, 0x75, 0x26, 0x22, 
   0x7C, 0x04, 0x50, 0x89, 0x5C, 0x7A, 0xB7, 0x85, 0x3D, 0x67, 0x2A, 0x55, 0x50, 0x46, 0x89, 0x95, 
   0x77, 0x7C, 0xB7, 0x31, 0x40, 0x49, 0x00, 0x16, 0x2D, 0x55, 0x29, 0xA1, 0x86, 0x92, 0xC5, 0x5A, 
   0x93, 0x64, 0x53, 0x47, 0x79, 0x29, 0x40, 0x78, 0x1E, 0x24, 0x52, 0x64, 0x66, 0x8E, 0xA8, 0xC2, 
   0xC9, 0x3E, 0x75, 0xBC, 0x00, 0x00, 0x57, 0x14, 0x1D, 0x44, 0x61, 0x86, 0x72, 0x65, 0x82, 0x8B, 
   0x7D, 0x54, 0x82, 0x54, 0x48, 0x79, 0x0E, 0x49, 0xA2, 0x46, 0x78, 0xA2, 0x78, 0x9A, 0x8F, 0x22, 
   0x5F, 0x64, 0x00, 0x03, 0x1B, 0x53, 0x49, 0x84, 0xB5, 0xC8, 0xE6, 0x32, 0x5C, 0x8A, 0x00, 0x05, 
   0x28, 0x7A, 0x5B, 0x88, 0x53, 0x95, 0xCC, 0x0F, 0x56, 0x60, 0x54, 0x45, 0x33, 0x71, 0x6C, 0xC2, 
   0x55, 0x5B, 0xA7, 0x2C, 0x49, 0x5C, 0x49, 0x44, 0x6E, 0x5A, 0x82, 0xB8, 0x43, 0x54, 0x7A, 0x64, 
   0x1B, 0x68, 0x4C, 0x76, 0xB7, 0x19, 0x71, 0x73, 0x26, 0x1C, 0x52, 0x67, 0x51, 0xAA, 0x5E, 0x97, 
   0x7F, 0x59, 0x54, 0x76, 0x52, 0x5A, 0xD8, 0x46, 0x7D, 0xD2, 0x51, 0x88, 0x68, 0x57, 0x42, 0x43, 
   0x40, 0x3C, 0x6B, 0x35, 0x6A, 0xA7, 0x68, 0x65, 0xBB, 0x5C, 0x60, 0xB4, 0x28, 0x8D, 0x84, 0x33, 
   0x4D, 0x5B, 0x61, 0x14, 0x82, 0x4B, 0x6B, 0x78, 0x40, 0x8F, 0x75, 0x46, 0x62, 0xBA, 0x42, 0x6C, 
   0x98, 0x5E, 0x49, 0x64, 0x4D, 0x2D, 0x70, 0x3B, 0x89, 0xCB, 0x5D, 0x84, 0xB3, 0x58, 0x2E, 0x3A, 
   0x3B, 0x66, 0x60, 0x46, 0x8D, 0xDD, 0x57, 0x36, 0x72, 0x2A, 0x20, 0x3A, 0x16, 0x79, 0xAE, 0x8B, 
   0xA3, 0xC1, 0xB3, 0x6A, 0x83, 0x3A, 0x36, 0x92, 0x37, 0x63, 0xA2, 0x51, 0x74, 0x73, 0x18, 0x6F, 
   0x8D, 0x36, 0x4D, 0x70, 0x7C, 0x69, 0x2E, 0x4A, 0x53, 0x99, 0x40, 0x76, 0xFD, 0x9B, 0x77, 0xD5, 
   0x7D, 0x7C, 0x80, 0x13, 0x62, 0x37, 0x1C, 0x26, 0x6E, 0x39, 0x20, 0x75, 0x59, 0x62, 0x84, 0x6C, 
   0x82, 0xC5, 0x56, 0x95, 0x9C, 0x51, 0x72, 0x7E, 0x5C, 0x70, 0x88, 0x5F, 0x62, 0x97, 0x51, 0x49, 
   0x94, 0x3E, 0x58, 0x69, 0x20, 0x8F, 0x60, 0x38, 0x48, 0x76, 0x73, 0x2F, 0x82, 0x5D, 0x57, 0x7E, 
   0x35, 0x5D, 0x99, 0x5B, 0x4D, 0x5A, 0x33, 0x64, 0x5A, 0x3E, 0x53, 0xB5, 0x44, 0x59, 0x8C, 0x35, 
   0x59, 0x41, 0x69, 0x3D, 0x52, 0x5E, 0x67, 0x82, 0x4C, 0x7F, 0xA6, 0x39, 0x8E, 0xAB, 0x4F, 0x52, 
   0x6F, 0x49, 0x1D, 0x44, 0x3D, 0x4A, 0x5A, 0x32, 0x51, 0x9A, 0x4B, 0x65, 0x79, 0x7A, 0x88, 0x79, 
   0x68, 0x4F, 0x7E, 0x2E, 0x4E, 0x84, 0x34, 0x59, 0x78, 0x46, 0x64, 0x71, 0x7B, 0x4D, 0x65, 0x64, 
   0x58, 0x70, 0x35, 0x4D, 0x81, 0x3F, 0x64, 0x6A, 0x34, 0x59, 0x6F, 0x5C, 0x59, 0x8C, 0x4C, 0x59, 
   0x80, 0x41, 0x59, 0x5D, 0x68, 0x59, 0x68, 0x40, 0x59, 0x74, 0x34, 0x59, 0x7A, 0x40, 0x59, 0x75, 
   0x58, 0x59, 0x64, 0x64, 0x59, 0x6B, 0x68, 0x59, 0xAF, 0x28, 0x64, 0x90, 0x27, 0x52, 0x44, 0x4F, 
   0x58, 0x3D, 0x4B, 0x58, 0x7D, 0x4B, 0x4D, 0x84, 0x56, 0x64, 0x5E, 0x3F, 0x59, 0x86, 0x3F, 0x64, 
   0x8C, 0x50, 0x52, 0x69, 0x62, 0x58, 0x5D, 0x45, 0x4D, 0x63, 0x50, 0x64, 0xA2, 0x39, 0x64, 0x74, 
   0x50, 0x4D, 0x56, 0x62, 0x52, 0x6C, 0x56, 0x58, 0xA1, 0x61, 0x58, 0xB2, 0x2D, 0x48, 0x67, 0x4A, 
   0x5A, 0x7E, 0x4B, 0x89, 0xB3, 0x57, 0x8F, 0xB3, 0x4C, 0x54, 0x84, 0x4C, 0x1A, 0x6C, 0x46, 0x43, 
   0x62, 0x46, 0x85, 0x98, 0x46, 0x92, 0xE4, 0x4C, 0x8A, 0xA4, 0x4C, 0x6A, 0x74, 0x4C, 0x00, 0x78, 
   0x46, 0x3C, 0x78, 0x5D, 0xA6, 0x90, 0x5D, 0x9C, 0xB8, 0x4B, 0x61, 0x69, 0x2D, 0x26, 0x6A, 0x4A, 
   0x53, 0xCC, 0x50, 0x7B, 0xB5, 0x67, 0x7B, 0x74, 0x4B, 0x58, 0x79, 0x2E, 0x3C, 0x5E, 0x45, 0x6F, 
   0xB0, 0x83, 0x75, 0xFF, 0x32, 0x52, 0x85, 0x14, 0x46, 0x2C, 0x5F, 0x5D, 0x5A, 0x5A, 0x69, 0xA3, 
   0x22, 0x42, 0xE0, 0x57, 0x87, 0xBF, 0x7F, 0x8D, 0x63, 0x51, 0x36, 0x7F, 0x22, 0x5C, 0xBD, 0x60, 
   0x60, 0xA1, 0x38, 0x12, 0x83, 0x34, 0x8C, 0x82, 0x52, 0x88, 0x77, 0x6A, 0x56, 0xA1, 0x69, 0x87, 
   0xB3, 0x4B, 0x63, 0xB8, 0x16, 0x29, 0x7C, 0x38, 0x5D, 0x5D, 0x56, 0x6F, 0x8B, 0x4B, 0x5F, 0x93, 
   0x5B, 0x6A, 0x8F, 0x33, 0x58, 0xA8, 0x28, 0x4C, 0xCB, 0x4C, 0x53, 0xA3, 0x80, 0x6B, 0x8A, 0x58, 
   0x8D, 0x98, 0x3F, 0x69, 0x96, 0x27, 0x39, 0x79, 0x43, 0x2D, 0x68, 0x4A, 0x51, 0x87, 0x56, 0x81, 
   0xCC, 0x50, 0x98, 0xAE, 0x56, 0x41, 0x79, 0x39, 0x1E, 0x66, 0x56, 0x75, 0x9F, 0x40, 0x98, 0x7E, 
   0x51, 0x3D, 0x7F, 0x51, 0x48, 0xB3, 0x5C, 0x65, 0x9C, 0x23, 0x83, 0x89, 0x56, 0x66, 0x6C, 0x45, 
   0x60, 0x5B, 0x41, 0x54, 0xA7, 0x5E, 0x60, 0x92, 0x5F, 0x66, 0x8D, 0x6A, 0x50, 0xB5, 0x47, 0x89, 
   0xB8, 0x2F, 0x6C, 0x87, 0x6D, 0x32, 0x47, 0x1E, 0x49, 0x5F, 0x25, 0x83, 0xCD, 0x94, 0x51, 0xB8, 
   0x68, 0x69, 0x8A, 0x45, 0x92, 0x9F, 0x6A, 0x91, 0xA8, 0x5B, 0x65, 0x6C, 0x08, 0x2F, 0x59, 0x12, 
   0x28, 0x9C, 0x31, 0x37, 0x74, 0x4C, 0x81, 0x4F, 0xA9, 0xFB, 0xCE, 0x7A, 0x75, 0xE9, 0x00, 0x00, 
   0x4D, 0x35, 0x4C, 0x39, 0xB4, 0x76, 0x9F, 0x5E, 0x98, 0x94, 0x34, 0x62, 0x98, 0x32, 0x38, 0x7E, 
   0x58, 0x63, 0x64, 0x3B, 0x50, 0x67, 0x4A, 0x34, 0x51, 0x43, 0x46, 0x7B, 0x00, 0x65, 0xB5, 0x34, 
   0x82, 0x8D, 0x97, 0x44, 0x5F, 0x36, 0x4F, 0x54, 0x45, 0x9D, 0xCC, 0x64, 0x5B, 0x92, 0x07, 0x04, 
   0x24, 0x00, 0x33, 0x64, 0x33, 0x6A, 0x95, 0x7C, 0x8A, 0xB3, 0xAA, 0x7F, 0x7A, 0x52, 0x71, 0x78, 
   0x00, 0x35, 0x7C, 0x3B, 0x33, 0x6F, 0x52, 0x6B, 0x52, 0x10, 0x4F, 0x5B, 0x3B, 0x2A, 0xA3, 0x92, 
   0x76, 0xD2, 0x43, 0x94, 0x70, 0x3D, 0x4F, 0x47, 0x42, 0x21, 0x6F, 0x3D, 0x60, 0xAA, 0x7A, 0xA4, 
   0xC7, 0x66, 0x63, 0x7A, 0x08, 0x05, 0x3E, 0x00, 0x1C, 0x4F, 0x45, 0x69, 0x7E, 0x99, 0x99, 0x91, 
   0x72, 0x66, 0x83, 0x37, 0x42, 0x90, 0x34, 0x3B, 0xB2, 0x39, 0x4E, 0x83, 0x2E, 0x72, 0x59, 0x46, 
   0x61, 0x65, 0x42, 0x3F, 0x90, 0x5A, 0x51, 0xA9, 0x77, 0x8A, 0xAE, 0x53, 0x77, 0xA0, 0x23, 0x31, 
   0x53, 0x0C, 0x20, 0x35, 0x47, 0x66, 0x6B, 0x6C, 0x7F, 0xDF, 0x62, 0x79, 0x9B, 0x56, 0x4A, 0x45, 
   0x38, 0x3E, 0x7E, 0x3D, 0x77, 0xAC, 0x4D, 0x81, 0xA6, 0x48, 0x25, 0x4A, 0x2C, 0x26, 0x4B, 0x66, 
   0x8F, 0xAE, 0x6C, 0x9C, 0xB6, 0x4D, 0x5C, 0xAE, 0x02, 0x3C, 0x5C, 0x1A, 0x14, 0x45, 0x56, 0x4F, 
   0x6F, 0x80, 0x63, 0x7E, 0x5A, 0x71, 0xAF, 0x48, 0x78, 0xCC, 0x52, 0x6C, 0x8C, 0x4C, 0x64, 0x72, 
   0x40, 0x5D, 0x4F, 0x56, 0x2F, 0x83, 0x4A, 0x57, 0xC8, 0x2D, 0x75, 0x7E, 0x50, 0x60, 0x4A, 0x68, 
   0x5B, 0x95, 0x63, 0x78, 0x8B, 0x40, 0x66, 0x8C, 0x39, 0x49, 0xB9, 0x40, 0x59, 0x63, 0x59, 0x3E, 
   0x80, 0x7C, 0x7D, 0xB9, 0x64, 0x9F, 0x96, 0x1E, 0x33, 0x56, 0x29, 0x3F, 0x74, 0x63, 0xA1, 0xA8, 
   0x5E, 0x9C, 0xB9, 0x69, 0x4F, 0x78, 0x4C, 0x25, 0x5F, 0x2F, 0x41, 0x65, 0x31, 0x55, 0x5D, 0x62, 
   0x64, 0xAB, 0x98, 0x89, 0xEC, 0x8B, 0xAB, 0xA0, 0x3C, 0x6F, 0x6E, 0x05, 0x32, 0xA1, 0x31, 0x1F, 
   0x21, 0x22, 0x4A, 0x00, 0x3D, 0x66, 0xC5, 0x90, 0xC4, 0xFF, 0x97, 0x8B, 0xA9, 0x3A, 0x49, 0x82, 
   0x3C, 0x4C, 0x77, 0x40, 0x6C, 0x74, 0x34, 0x54, 0x4D, 0x3A, 0x32, 0x88, 0x48, 0x1E, 0xB2, 0x73, 
   0xAA, 0x92, 0x84, 0xB1, 0xC5, 0x6B, 0x81, 0xA5, 0x19, 0x34, 0x58, 0x08, 0x27, 0x61, 0x80, 0x82, 
   0xA9, 0x96, 0xA3, 0xA2, 0x16, 0x50, 0x66, 0x00, 0x1E, 0x4D, 0x43, 0x33, 0x43, 0x73, 0x4B, 0xC7, 
   0x6E, 0x6F, 0xAB, 0x29, 0x70, 0x38, 0x3F, 0x4E, 0x5F, 0x50, 0x70, 0x9F, 0x67, 0x4E, 0xAF, 0x45, 
   0x3D, 0x47, 0x19, 0x50, 0x3C, 0x92, 0x7F, 0xA5, 0x96, 0xA0, 0xE5, 0x10, 0x4D, 0x81, 0x02, 0x06, 
   0x44, 0x52, 0x4A, 0x5F, 0x54, 0x6E, 0x65, 0x34, 0x53, 0x7E, 0x68, 0x76, 0x9C, 0x68, 0x54, 0x8A, 
   0x2E, 0x53, 0x67, 0x4F, 0x5E, 0x72, 0x4A, 0x59, 0x83, 0x29, 0x59, 0x82, 0x4D, 0x64, 0x5F, 0x92, 
   0x4D, 0x6A, 0x5D, 0x58, 0x81, 0x1D, 0x4D, 0x81, 0x38, 0x5E, 0x75, 0x4B, 0x59, 0x79, 0x5D, 0x59, 
   0x68, 0x74, 0x59, 0x5D, 0x41, 0x59, 0x8B, 0x35, 0x59, 0x7A, 0x51, 0x59, 0x75, 0x58, 0x59, 0x6F, 
   0x58, 0x59, 0x81, 0x5C, 0x59, 0x7B, 0x3F, 0x59, 0x81, 0x33, 0x5E, 0x80, 0x4A, 0x4D, 0x78, 0x4B, 
   0x58, 0x54, 0x62, 0x58, 0x43, 0x56, 0x58, 0x7D, 0x33, 0x4D, 0x84, 0x2D, 0x64, 0x75, 0x56, 0x64, 
   0x86, 0x45, 0x4D, 0x86, 0x45, 0x58, 0x6A, 0x50, 0x58, 0x8B, 0x56, 0x58, 0x6D, 0x39, 0x58, 0x61, 
   0x4B, 0x58, 0x73, 0x5C, 0x52, 0x84, 0x4A, 0x63, 0x89, 0x4F, 0x6E, 0x8F, 0x43, 0x30, 0x7D, 0x2D, 
   0x3D, 0x57, 0x62, 0x7E, 0xB4, 0x58, 0x96, 0xDC, 0x58, 0x62, 0x91, 0x46, 0x49, 0x56, 0x4C, 0x3D, 
   0x6D, 0x4C, 0x4A, 0x9D, 0x4C, 0x9B, 0xB6, 0x4C, 0x94, 0xD1, 0x57, 0x42, 0x90, 0x40, 0x24, 0x43, 
   0x35, 0x26, 0x55, 0x58, 0x9B, 0xB8, 0x8B, 0xBE, 0xDC, 0x35, 0x29, 0x86, 0x22, 0x38, 0x4C, 0x4F, 
   0x92, 0x91, 0x4A, 0x6A, 0xDB, 0x39, 0x1F, 0x59, 0x67, 0x6F, 0x4F, 0x5C, 0x9D, 0xFF, 0x45, 0x48, 
   0xDD, 0x29, 0x31, 0x1A, 0x7D, 0x81, 0x8B, 0x4E, 0xA2, 0xF1, 0x1A, 0x23, 0x41, 0x2B, 0x00, 0x53, 
   0x4A, 0x8C, 0xCE, 0x73, 0x9E, 0xC5, 0x46, 0x48, 0x81, 0x40, 0x40, 0xA2, 0x44, 0x68, 0xB1, 0x38, 
   0x68, 0x88, 0x49, 0x5C, 0x6A, 0x38, 0x29, 0x88, 0x40, 0x58, 0xA6, 0x64, 0x87, 0xC4, 0x53, 0x4F, 
   0xA1, 0x58, 0x77, 0x88, 0x4B, 0x70, 0x65, 0x22, 0x26, 0x6C, 0x61, 0x6A, 0xE6, 0x61, 0x86, 0xC9, 
   0x39, 0x53, 0x50, 0x34, 0x36, 0x4A, 0x51, 0x54, 0xAE, 0x74, 0xBA, 0xFF, 0x63, 0x68, 0x9B, 0x34, 
   0x00, 0x4D, 0x28, 0x5C, 0x67, 0x61, 0xBE, 0x86, 0x56, 0x5E, 0xA5, 0x3F, 0x2F, 0xEA, 0x44, 0x46, 
   0x98, 0x3F, 0x6F, 0x51, 0x56, 0x9D, 0x89, 0x56, 0x58, 0xBC, 0x34, 0x3B, 0x66, 0x4B, 0x47, 0x5B, 
   0x67, 0x76, 0xBE, 0x29, 0x5B, 0xB5, 0x41, 0x79, 0xAA, 0x96, 0x84, 0xA2, 0x46, 0x60, 0x6D, 0x0C, 
   0x2B, 0x77, 0x45, 0x4D, 0x84, 0x52, 0x82, 0x9D, 0x53, 0x4B, 0xC1, 0x4E, 0x73, 0xB6, 0x69, 0x90, 
   0x92, 0x2A, 0x5B, 0x89, 0x14, 0x27, 0x70, 0x87, 0x5A, 0x64, 0x76, 0x84, 0x6C, 0x16, 0x6E, 0xCE, 
   0x54, 0x46, 0xBD, 0x82, 0x68, 0x55, 0x4F, 0x6E, 0x6B, 0x47, 0x50, 0xBB, 0x66, 0x6B, 0xC5, 0x35, 
   0x58, 0x99, 0x00, 0x25, 0x46, 0x3D, 0x49, 0x41, 0x64, 0x69, 0x99, 0x7E, 0xA4, 0xE5, 0x99, 0x65, 
   0x9F, 0x3B, 0x7D, 0x56, 0x1C, 0x57, 0x53, 0x1C, 0x01, 0x6A, 0x51, 0x6D, 0xA4, 0xA1, 0xA6, 0xCA, 
   0x4A, 0x54, 0x88, 0x1E, 0x2E, 0x18, 0x49, 0x43, 0x51, 0x43, 0x3F, 0xAE, 0x10, 0x4D, 0x98, 0x30, 
   0x67, 0x5F, 0x78, 0x96, 0x6B, 0xD2, 0x8E, 0xA4, 0x28, 0x41, 0x88, 0x00, 0x3E, 0x70, 0x34, 0x49, 
   0x68, 0x47, 0x23, 0x3B, 0x1D, 0x54, 0x55, 0x64, 0xA1, 0xB4, 0x8D, 0xA0, 0xE8, 0x52, 0x2B, 0x73, 
   0x1B, 0x28, 0x2B, 0x20, 0x65, 0x85, 0x53, 0x3E, 0x86, 0x5F, 0x55, 0x5A, 0x1C, 0x34, 0x6D, 0x35, 
   0x42, 0xA9, 0x60, 0x7E, 0xB1, 0x62, 0x75, 0x6D, 0x78, 0x8B, 0x93, 0x53, 0x76, 0x97, 0x11, 0x18, 
   0x56, 0x1B, 0x34, 0x5B, 0x66, 0x84, 0x83, 0x50, 0x51, 0xA1, 0x1D, 0x46, 0x69, 0x52, 0x5E, 0x5F, 
   0x5F, 0x87, 0x9F, 0x6A, 0x5E, 0xB6, 0x4B, 0x35, 0x65, 0x1C, 0x3A, 0x63, 0x00, 0x38, 0x4D, 0x49, 
   0x63, 0x6E, 0xC8, 0xD1, 0xE8, 0x4F, 0x85, 0xB5, 0x00, 0x00, 0x46, 0x68, 0x48, 0x8E, 0x6C, 0xA3, 
   0xA8, 0x00, 0x31, 0x4C, 0x25, 0x0A, 0x48, 0x9A, 0x89, 0xB1, 0x6E, 0x9B, 0xC9, 0x29, 0x34, 0x6E, 
   0x4F, 0x50, 0x57, 0x5F, 0x88, 0xAB, 0x1F, 0x3C, 0x88, 0x1F, 0x0E, 0x38, 0x54, 0x4F, 0x7E, 0x50, 
   0x90, 0xAF, 0x67, 0x8C, 0xAB, 0x71, 0x62, 0x93, 0x36, 0x65, 0x85, 0x13, 0x2F, 0x50, 0x2B, 0x03, 
   0x62, 0x40, 0x78, 0xA2, 0x7C, 0x92, 0x6C, 0x88, 0x5A, 0x80, 0x31, 0x54, 0xD6, 0x41, 0x75, 0x9D, 
   0x62, 0x5D, 0x8A, 0x55, 0x4A, 0x87, 0x20, 0x55, 0x58, 0x27, 0x2F, 0x59, 0x5C, 0x3E, 0x9A, 0x64, 
   0x96, 0x9D, 0x47, 0xA2, 0x99, 0x57, 0x6D, 0xC6, 0x39, 0x2B, 0x7A, 0x23, 0x3C, 0x73, 0x74, 0x70, 
   0x8A, 0x59, 0x83, 0xB1, 0x4D, 0x71, 0xA4, 0x57, 0x32, 0x2D, 0x29, 0x33, 0x74, 0x35, 0x9B, 0xF9, 
   0x74, 0x8A, 0xBB, 0x52, 0x45, 0x52, 0x19, 0x55, 0x82, 0x47, 0x70, 0x7D, 0x6A, 0x2C, 0x5D, 0x2D, 
   0x3A, 0x99, 0x45, 0x9F, 0xC9, 0x9A, 0xC2, 0xDF, 0x6A, 0x7A, 0xAC, 0x11, 0x1F, 0x29, 0x09, 0x00, 
   0x11, 0x44, 0x43, 0x93, 0x43, 0xA4, 0xD3, 0x6D, 0xA3, 0xEC, 0x95, 0x97, 0xA5, 0x3D, 0x71, 0x4B, 
   0x14, 0x2E, 0x65, 0x58, 0x33, 0x81, 0x5E, 0x6D, 0x94, 0x31, 0x7A, 0x8A, 0x43, 0x74, 0x79, 0x60, 
   0x52, 0x9B, 0x76, 0x85, 0xAC, 0x36, 0x67, 0x93, 0x29, 0x33, 0x84, 0x3A, 0x4E, 0x64, 0x69, 0x81, 
   0x52, 0x70, 0x79, 0xAC, 0x85, 0x5F, 0x94, 0x21, 0x3A, 0x38, 0x09, 0x3F, 0x92, 0x65, 0x4B, 0x7C, 
   0x67, 0x58, 0x60, 0x4C, 0x75, 0xB0, 0x46, 0x53, 0x94, 0x51, 0x48, 0x54, 0x3A, 0x4F, 0x71, 0x3A, 
   0x61, 0x99, 0x5C, 0x84, 0x89, 0x4C, 0x89, 0x88, 0x6D, 0x47, 0x80, 0x5F, 0x17, 0x67, 0x0D, 0x4A, 
   0x5A, 0x0D, 0x57, 0x65, 0x43, 0x53, 0x6C, 0x8A, 0x7C, 0x7E, 0x5D, 0x5A, 0x8A, 0x2E, 0x53, 0x79, 
   0x38, 0x4D, 0x6D, 0x38, 0x4D, 0x83, 0x4A, 0x5E, 0x77, 0x56, 0x59, 0x6B, 0x40, 0x59, 0x81, 0x4C, 
   0x64, 0x6A, 0x68, 0x4D, 0x6A, 0x5C, 0x4D, 0x8C, 0x1D, 0x5E, 0x8B, 0x3F, 0x59, 0x3A, 0x62, 0x59, 
   0x5C, 0x46, 0x59, 0x96, 0x41, 0x59, 0x75, 0x58, 0x59, 0x75, 0x47, 0x59, 0x6F, 0x69, 0x59, 0x6A, 
   0x67, 0x59, 0x8C, 0x21, 0x59, 0x80, 0x27, 0x59, 0x52, 0x61, 0x59, 0x69, 0x5C, 0x64, 0xA2, 0x5C, 
   0x4D, 0x8F, 0x4B, 0x58, 0x54, 0x4A, 0x58, 0x43, 0x2D, 0x58, 0x7D, 0x56, 0x58, 0x8A, 0x57, 0x52, 
   0x5E, 0x57, 0x6F, 0x76, 0x4B, 0x52, 0xBA, 0x3F, 0x63, 0x79, 0x44, 0x51, 0x3E, 0x5B, 0x51, 0x60, 
   0x4B, 0x58, 0x8A, 0x45, 0x69, 0x85, 0x49, 0x57, 0x88, 0x49, 0x52, 0x7D, 0x38, 0x63, 0x90, 0x44, 
   0x59, 0xB3, 0x3A, 0x61, 0x80, 0x5D, 0x68, 0x75, 0x52, 0x8B, 0xAE, 0x41, 0x85, 0x97, 0x4C, 0x4A, 
   0x91, 0x4C, 0x53, 0x85, 0x4C, 0x4C, 0x8A, 0x57, 0x3C, 0x90, 0x40, 0x65, 0x9B, 0x40, 0x78, 0x84, 
   0x62, 0x88, 0x89, 0x3A, 0x43, 0x8A, 0x46, 0x28, 0x97, 0x5D, 0x95, 0xB4, 0x68, 0xAC, 0xA7, 0x2E, 
   0x38, 0x56, 0x38, 0x3C, 0x4C, 0x3E, 0x52, 0xB6, 0x3F, 0x5E, 0xE6, 0x67, 0x6A, 0xB7, 0x57, 0x5F, 
   0x59, 0x3A, 0x54, 0x58, 0x5C, 0x7B, 0x98, 0x66, 0x5E, 0xB7, 0x1B, 0x40, 0xC7, 0x1B, 0x52, 0x93, 
   0x77, 0x80, 0x38, 0x4B, 0x63, 0x8A, 0x40, 0x52, 0xFE, 0x57, 0x5D, 0xB9, 0x62, 0x52, 0x60, 0x3F, 
   0x69, 0x80, 0x3E, 0x7F, 0x70, 0x43, 0x3A, 0x99, 0x44, 0x34, 0xC8, 0x4C, 0x63, 0xAC, 0x64, 0x65, 
   0x93, 0x53, 0x62, 0x43, 0x5E, 0x90, 0x78, 0x57, 0x7D, 0xDC, 0x33, 0x3D, 0xB0, 0x21, 0x41, 0xBA, 
   0x4B, 0x53, 0x84, 0x58, 0x65, 0x6C, 0x74, 0xA4, 0x83, 0x57, 0x63, 0xBD, 0x22, 0x22, 0xD9, 0x33, 
   0x4E, 0x70, 0x5B, 0x33, 0x30, 0x57, 0x6F, 0x9F, 0x57, 0xC0, 0xEB, 0x4B, 0x4D, 0xC8, 0x3F, 0x1D, 
   0x5E, 0x4A, 0x3A, 0x62, 0x3F, 0x75, 0xA6, 0x56, 0xAE, 0x7E, 0x50, 0x30, 0x8F, 0x56, 0x13, 0x94, 
   0x39, 0x6B, 0x6E, 0x2E, 0x95, 0x92, 0x6E, 0x85, 0xC1, 0x47, 0x5B, 0xA4, 0x64, 0x49, 0xA8, 0x58, 
   0x6A, 0x6D, 0x2A, 0x48, 0x78, 0x4C, 0x38, 0x8A, 0x5D, 0x89, 0x9D, 0x58, 0x79, 0xA3, 0x47, 0x45, 
   0x87, 0x4E, 0x62, 0x92, 0x44, 0x84, 0xB3, 0x6C, 0x50, 0x8F, 0x66, 0x4B, 0x6B, 0x42, 0x7E, 0x8D, 
   0x19, 0x84, 0x99, 0x4D, 0x34, 0x88, 0x5F, 0x50, 0x67, 0x66, 0x8A, 0xCE, 0x80, 0x6F, 0xD8, 0x38, 
   0x7E, 0x69, 0x1E, 0x6F, 0x5A, 0x0E, 0x0D, 0x91, 0x0C, 0x00, 0x69, 0x83, 0x88, 0x3E, 0xDA, 0xFF, 
   0xFF, 0x6F, 0x69, 0xB3, 0x00, 0x02, 0x26, 0x14, 0x32, 0x62, 0x9B, 0x5C, 0x9C, 0x7B, 0x96, 0x97, 
   0x62, 0x7E, 0x84, 0x47, 0x30, 0x66, 0x05, 0x22, 0x8C, 0x22, 0x4A, 0x80, 0x5D, 0x3B, 0x4D, 0x54, 
   0x55, 0x65, 0x65, 0xB1, 0xC1, 0x6A, 0x7C, 0x93, 0x4A, 0x0C, 0x4E, 0x00, 0x11, 0x81, 0x15, 0x6E, 
   0x93, 0x67, 0x7C, 0x6B, 0x7F, 0x66, 0x67, 0x3F, 0x65, 0x96, 0x11, 0x52, 0xA2, 0x5C, 0x57, 0x9A, 
   0x73, 0x56, 0x53, 0x2E, 0x44, 0x47, 0x16, 0x44, 0x8C, 0x4E, 0x4B, 0x98, 0x43, 0x67, 0x49, 0x00, 
   0x3B, 0x35, 0x4E, 0x23, 0xA0, 0x9B, 0xBA, 0xF8, 0x72, 0xCA, 0xB1, 0x47, 0x26, 0x3F, 0x0B, 0x00, 
   0x42, 0x05, 0x39, 0x5A, 0x69, 0x86, 0xA1, 0xA3, 0xA2, 0x98, 0x46, 0x35, 0x82, 0x00, 0x12, 0x7C, 
   0x44, 0x51, 0xA4, 0x73, 0x91, 0x86, 0x40, 0x63, 0x79, 0x25, 0x08, 0x47, 0x4E, 0x54, 0x66, 0x7D, 
   0x8B, 0xD6, 0x50, 0x81, 0xAA, 0x4E, 0x6E, 0x8B, 0x5D, 0x4F, 0x83, 0x0C, 0x1A, 0x59, 0x1D, 0x5A, 
   0x76, 0x74, 0xA4, 0xA4, 0x48, 0x5A, 0x92, 0x2C, 0x21, 0x42, 0x66, 0x5B, 0x66, 0x62, 0x8F, 0xD5, 
   0x56, 0x7E, 0xB8, 0x2C, 0x32, 0x3F, 0x48, 0x21, 0x55, 0x42, 0x82, 0xAB, 0x43, 0x83, 0x8B, 0x6C, 
   0x3A, 0x8C, 0x3F, 0x56, 0x87, 0x3F, 0x78, 0x87, 0x6C, 0x55, 0x87, 0x54, 0x3D, 0xAD, 0x0F, 0x65, 
   0x73, 0x27, 0x39, 0x5C, 0x68, 0x68, 0x7F, 0x65, 0x80, 0x6B, 0x65, 0x5E, 0x80, 0x52, 0x52, 0xE2, 
   0x56, 0x6D, 0xDB, 0x32, 0x72, 0x53, 0x1B, 0x33, 0x0C, 0x4A, 0x19, 0x6F, 0x4C, 0x88, 0xB8, 0x64, 
   0x91, 0xB0, 0x69, 0x74, 0xB0, 0x46, 0x72, 0x98, 0x3A, 0x4E, 0x6E, 0x5C, 0x42, 0x78, 0x35, 0x6A, 
   0xAA, 0x3A, 0x6A, 0x64, 0x4C, 0x32, 0x3C, 0x5D, 0x77, 0x99, 0x68, 0x99, 0xB2, 0x3A, 0x21, 0x64, 
   0x3A, 0x2D, 0x92, 0x36, 0xA7, 0xBF, 0x65, 0x8B, 0x58, 0x60, 0x51, 0x80, 0x49, 0x3F, 0xB9, 0x4D, 
   0x5B, 0x7A, 0x2F, 0x7E, 0x63, 0x30, 0x6E, 0xD4, 0x7B, 0x67, 0x94, 0x6F, 0x5A, 0x21, 0x0D, 0x32, 
   0x77, 0x36, 0x44, 0xD0, 0x92, 0x69, 0xBF, 0x59, 0x7D, 0x52, 0x14, 0x83, 0x83, 0x58, 0x6B, 0x9F, 
   0x59, 0x41, 0x5B, 0x2D, 0x3A, 0x78, 0x6C, 0x64, 0xB9, 0x83, 0xAF, 0xA8, 0x49, 0x97, 0x84, 0x58, 
   0x38, 0x7C, 0x29, 0x08, 0x69, 0x2E, 0x42, 0x8A, 0x51, 0x9F, 0x9A, 0x73, 0x99, 0x86, 0x1E, 0x46, 
   0x67, 0x2F, 0x26, 0x44, 0x80, 0x47, 0x83, 0x85, 0x6F, 0xDE, 0x32, 0x58, 0x71, 0x00, 0x4C, 0x2B, 
   0x2C, 0x4C, 0x70, 0x7A, 0x52, 0xAB, 0x70, 0x5E, 0xA5, 0x42, 0x4F, 0x49, 0x36, 0x56, 0x39, 0x6E, 
   0x7F, 0xA1, 0x5B, 0x89, 0xF0, 0x37, 0x4D, 0x69, 0x09, 0x12, 0x1C, 0x64, 0x56, 0x6B, 0x64, 0x63, 
   0x9A, 0x00, 0x53, 0x79, 0x4F, 0x7C, 0x79, 0x79, 0x5A, 0x84, 0x57, 0x53, 0x6D, 0x39, 0x64, 0x72, 
   0x4A, 0x4D, 0x94, 0x4A, 0x4D, 0x6C, 0x44, 0x5E, 0x65, 0x61, 0x59, 0x7B, 0x4F, 0x59, 0x7B, 0x16, 
   0x59, 0x81, 0x34, 0x5E, 0x75, 0x7F, 0x5E, 0x6E, 0x5D, 0x59, 0x74, 0x2E, 0x59, 0x68, 0x28, 0x59, 
   0x68, 0x45, 0x59, 0x79, 0x58, 0x59, 0x80, 0x59, 0x59, 0x6A, 0x5E, 0x59, 0x81, 0x73, 0x59, 0x8C, 
   0x1C, 0x59, 0x69, 0x20, 0x59, 0x62, 0x43, 0x59, 0x68, 0x50, 0x59, 0x6E, 0x5C, 0x59, 0x7A, 0x4B, 
   0x64, 0x85, 0x4A, 0x4D, 0x7E, 0x28, 0x58, 0x5A, 0x56, 0x5D, 0x48, 0x57, 0x4C, 0x60, 0x51, 0x4C, 
   0x79, 0x57, 0x5D, 0x91, 0x4B, 0x5D, 0x80, 0x44, 0x51, 0x56, 0x33, 0x45, 0x60, 0x44, 0x40, 0x5B, 
   0x56, 0x63, 0x73, 0x4B, 0x69, 0x96, 0x3D, 0x52, 0x7D, 0x2C, 0x47, 0x67, 0x61, 0x6A, 0xAD, 0x57, 
   0x70, 0xB4, 0x4C, 0x43, 0x8B, 0x41, 0x3F, 0x69, 0x58, 0x74, 0x93, 0x5D, 0x92, 0xCD, 0x46, 0x9B, 
   0xB5, 0x4C, 0x4C, 0x7E, 0x57, 0x0B, 0x70, 0x40, 0x18, 0x54, 0x45, 0x83, 0x89, 0x62, 0xCA, 0xE1, 
   0x4B, 0x84, 0xA8, 0x3F, 0x04, 0x51, 0x23, 0x20, 0x73, 0x5D, 0x8F, 0xB3, 0x7B, 0xAC, 0xC3, 0x52, 
   0x39, 0x62, 0x2E, 0x4E, 0x2B, 0x3E, 0x75, 0xD9, 0x49, 0x52, 0xFF, 0x28, 0x2A, 0x44, 0x5C, 0x7B, 
   0x37, 0x6E, 0xA9, 0xD7, 0x35, 0x4D, 0x8F, 0x3A, 0x1F, 0x6E, 0x62, 0x7B, 0xCF, 0x61, 0xBF, 0xB7, 
   0x1C, 0x1E, 0x4F, 0x3E, 0x11, 0x71, 0x56, 0x7E, 0xBC, 0x57, 0x69, 0xC2, 0x4C, 0x63, 0x76, 0x62, 
   0x69, 0x65, 0x44, 0x47, 0xAF, 0x3E, 0x7F, 0x9F, 0x43, 0x51, 0x98, 0x3F, 0x24, 0xA2, 0x41, 0x5F, 
   0x4E, 0x53, 0x7E, 0x7E, 0x81, 0x6F, 0xD1, 0x6F, 0x90, 0xC7, 0x1D, 0x5A, 0x82, 0x0B, 0x26, 0x76, 
   0x68, 0x59, 0xBF, 0x86, 0xA9, 0xD4, 0x51, 0x7A, 0x65, 0x28, 0x23, 0x41, 0x38, 0x44, 0x92, 0x4A, 
   0x77, 0xC2, 0x4B, 0x50, 0x96, 0x51, 0x24, 0x9B, 0x4C, 0x76, 0xAB, 0x57, 0xC0, 0x7C, 0x4B, 0x53, 
   0x86, 0x3F, 0x1D, 0xB8, 0x4A, 0x45, 0x74, 0x3F, 0x4C, 0x7F, 0x61, 0x81, 0xAC, 0x39, 0x6B, 0x95, 
   0x2E, 0x33, 0x79, 0x72, 0x7D, 0x85, 0x45, 0x7D, 0x97, 0x2F, 0x33, 0xAF, 0x59, 0x6B, 0xAA, 0x76, 
   0x60, 0x86, 0x59, 0x55, 0x79, 0x35, 0x66, 0x8F, 0x39, 0x7D, 0x6D, 0x34, 0x66, 0x85, 0x2B, 0x39, 
   0x9E, 0x67, 0x6E, 0xB0, 0xA1, 0x8B, 0xAB, 0x3A, 0x63, 0xB9, 0x38, 0x50, 0x82, 0x69, 0x4A, 0x35, 
   0x57, 0x71, 0x53, 0x01, 0x66, 0xC8, 0x4D, 0x2E, 0xDA, 0x93, 0x58, 0x79, 0x4F, 0x9E, 0x61, 0x52, 
   0x92, 0x99, 0x3F, 0x44, 0xB9, 0x21, 0x14, 0x82, 0x39, 0x32, 0x42, 0x74, 0x85, 0x8B, 0x59, 0xAF, 
   0x92, 0x58, 0x91, 0xB3, 0x5B, 0x2C, 0x9F, 0x21, 0x51, 0x47, 0x3E, 0x5B, 0x6C, 0x56, 0x28, 0x56, 
   0x78, 0x8F, 0x97, 0x54, 0x7E, 0xD5, 0x13, 0x4E, 0x7E, 0x25, 0x19, 0x3C, 0x6B, 0x64, 0x4D, 0x98, 
   0x97, 0xAE, 0x34, 0x52, 0x8C, 0x00, 0x35, 0x47, 0x51, 0x6E, 0x64, 0x97, 0x42, 0x82, 0x31, 0x44, 
   0x84, 0x4C, 0xA5, 0xA7, 0x83, 0x87, 0xA6, 0x1A, 0x1D, 0x4F, 0x00, 0x0A, 0x48, 0x38, 0x83, 0x9F, 
   0x69, 0x73, 0xA0, 0x86, 0x41, 0x6C, 0x4B, 0x58, 0x6B, 0x00, 0x7A, 0x93, 0x32, 0x41, 0x77, 0x6D, 
   0x3C, 0x52, 0x48, 0x77, 0x8E, 0x5F, 0x73, 0xDF, 0x58, 0x67, 0xA4, 0x2A, 0x4F, 0x3F, 0x3B, 0x59, 
   0x3D, 0x4C, 0x4D, 0x82, 0x4D, 0x58, 0x74, 0x64, 0x58, 0x82, 0x6E, 0x6E, 0xB1, 0x32, 0x50, 0xAA, 
   0x00, 0x22, 0x5E, 0x1A, 0x45, 0x50, 0x3B, 0x69, 0x51, 0x78, 0x54, 0x7C, 0x95, 0x72, 0xBE, 0x3F, 
   0x6C, 0xA8, 0x20, 0x2E, 0x79, 0x4C, 0x61, 0x66, 0x62, 0x83, 0xA9, 0x18, 0x4F, 0x54, 0x30, 0x21, 
   0x55, 0x76, 0x71, 0xB6, 0x7B, 0x93, 0xB5, 0x00, 0x31, 0x36, 0x0F, 0x15, 0x42, 0x93, 0x93, 0xAB, 
   0x6D, 0x72, 0xC3, 0x1D, 0x23, 0x57, 0x4A, 0x73, 0x5C, 0x55, 0x7F, 0x96, 0x49, 0x5C, 0xA8, 0x32, 
   0x4F, 0x74, 0x49, 0x3D, 0x63, 0x3F, 0x5B, 0x80, 0x5C, 0x68, 0xAF, 0x62, 0x74, 0x93, 0x4A, 0x73, 
   0x91, 0x37, 0x4F, 0x62, 0x27, 0x1B, 0x62, 0x40, 0x5B, 0x8B, 0x86, 0x73, 0x72, 0x63, 0x51, 0xA6, 
   0x28, 0x5B, 0xB1, 0x21, 0x39, 0x72, 0x5B, 0x4C, 0x7C, 0x68, 0x82, 0x66, 0x46, 0x7D, 0x79, 0x51, 
   0x66, 0xD0, 0x4C, 0x55, 0x91, 0x46, 0x4A, 0x5E, 0x5D, 0x78, 0xA7, 0x63, 0x93, 0xB7, 0x40, 0x3C, 
   0x75, 0x34, 0x1E, 0x2A, 0x45, 0x6A, 0x6A, 0x46, 0x8E, 0xD3, 0x63, 0x60, 0x96, 0x5C, 0x48, 0x62, 
   0x13, 0x2C, 0x75, 0x47, 0x73, 0xAA, 0x7D, 0x87, 0xAB, 0x68, 0x6B, 0x94, 0x72, 0x86, 0x92, 0x46, 
   0x71, 0xA0, 0x27, 0x19, 0x74, 0x27, 0x29, 0x2A, 0x2A, 0x65, 0x44, 0x77, 0x8B, 0xE8, 0x8A, 0xA3, 
   0xD4, 0x5B, 0x6F, 0xA4, 0x3B, 0x39, 0x66, 0x2D, 0x44, 0x51, 0x16, 0x5D, 0x63, 0x2F, 0x93, 0x8D, 
   0x76, 0x77, 0xB2, 0x73, 0x66, 0x81, 0x3B, 0x5A, 0x92, 0x6D, 0x6A, 0xC5, 0x7C, 0x85, 0xB7, 0x0C, 
   0x54, 0x4D, 0x0A, 0x02, 0x66, 0x5B, 0x4C, 0x7C, 0x8A, 0xAF, 0x82, 0x4C, 0x86, 0xAE, 0x3F, 0x33, 
   0x73, 0x22, 0x2B, 0x3E, 0x46, 0x4D, 0x7D, 0x91, 0x65, 0xAB, 0x6D, 0x81, 0x7D, 0x00, 0x59, 0x65, 
   0x10, 0x46, 0x7B, 0x79, 0x4C, 0x6A, 0x70, 0x3C, 0x72, 0x4F, 0x67, 0x90, 0x6A, 0x90, 0x97, 0x57, 
   0x83, 0x8A, 0x32, 0x4D, 0x81, 0x2A, 0x12, 0x67, 0x3B, 0x56, 0x54, 0x20, 0x5D, 0x4E, 0x67, 0x65, 
   0x89, 0xA1, 0x76, 0xAD, 0x40, 0x5A, 0x91, 0x16, 0x59, 0x5C, 0x5A, 0x4D, 0x66, 0x5B, 0x4D, 0x6C, 
   0x4B, 0x64, 0x88, 0x56, 0x5E, 0x71, 0x4A, 0x59, 0x87, 0x3E, 0x59, 0x5F, 0x49, 0x59, 0x6A, 0x4E, 
   0x59, 0x8C, 0x28, 0x59, 0x8B, 0x41, 0x59, 0x3B, 0x9D, 0x59, 0x6E, 0x58, 0x59, 0x9C, 0x0C, 0x59, 
   0x85, 0x4B, 0x59, 0x3B, 0x52, 0x59, 0x74, 0x5E, 0x59, 0x91, 0x6E, 0x59, 0x86, 0x28, 0x59, 0x80, 
   0x27, 0x59, 0x62, 0x55, 0x59, 0x68, 0x5B, 0x59, 0x74, 0x4B, 0x59, 0x8B, 0x50, 0x59, 0x63, 0x4A, 
   0x59, 0x80, 0x28, 0x64, 0x8B, 0x56, 0x4D, 0x7E, 0x57, 0x5D, 0x49, 0x51, 0x4C, 0x44, 0x40, 0x57, 
   0xA5, 0x45, 0x51, 0x8F, 0x4B, 0x6E, 0x51, 0x50, 0x4C, 0x73, 0x39, 0x57, 0x8A, 0x44, 0x57, 0x73, 
   0x3F, 0x46, 0x5C, 0x5B, 0x63, 0x83, 0x3E, 0x5F, 0x91, 0x33, 0x5F, 0x8B, 0x4B, 0x54, 0xA2, 0x63, 
   0x6B, 0x86, 0x58, 0x65, 0x8B, 0x46, 0x4F, 0x92, 0x4C, 0x62, 0x8D, 0x46, 0x8A, 0xB6, 0x4C, 0x9A, 
   0xC0, 0x57, 0x41, 0x89, 0x40, 0x1D, 0x59, 0x4B, 0x52, 0x6A, 0x4B, 0x77, 0x88, 0x50, 0x8F, 0xAD, 
   0x3F, 0x50, 0xA9, 0x34, 0x61, 0xA8, 0x67, 0x7C, 0x7E, 0x2F, 0x32, 0x7D, 0x42, 0x38, 0x57, 0x87, 
   0xA6, 0x9E, 0x69, 0x84, 0xEF, 0x39, 0x49, 0x9E, 0x2C, 0x47, 0x25, 0x43, 0x57, 0xA9, 0x56, 0x69, 
   0xC2, 0x5C, 0x63, 0x6E, 0x46, 0x36, 0xB9, 0x47, 0x59, 0xB9, 0x86, 0x8D, 0x69, 0x6E, 0x5F, 0x90, 
   0x2D, 0x62, 0xF0, 0x27, 0x4A, 0x81, 0x55, 0x28, 0x46, 0x4B, 0x84, 0x74, 0x57, 0x69, 0xB5, 0x57, 
   0x4C, 0xA0, 0x50, 0x6E, 0xA0, 0x55, 0x5E, 0xAE, 0x2C, 0x69, 0x6D, 0x38, 0x47, 0x29, 0x57, 0x3D, 
   0x8D, 0x58, 0x83, 0xDC, 0x52, 0x79, 0xC7, 0x4D, 0x51, 0x7C, 0x52, 0x62, 0x92, 0x58, 0x72, 0x8D, 
   0x58, 0x6B, 0xAF, 0x5C, 0x62, 0xCF, 0x28, 0x17, 0x92, 0x33, 0x55, 0x39, 0x5B, 0x73, 0x2A, 0x4B, 
   0x5D, 0xB8, 0x40, 0x6D, 0xFF, 0x57, 0x5C, 0xB9, 0x51, 0x24, 0x2C, 0x4C, 0x5F, 0x6E, 0x57, 0xBB, 
   0xB3, 0x4B, 0x6F, 0x87, 0x3F, 0x18, 0x9E, 0x55, 0x29, 0xB9, 0x2D, 0x82, 0x74, 0x4B, 0x9B, 0x85, 
   0x7E, 0x78, 0xAC, 0x34, 0x32, 0x7E, 0x2D, 0x3D, 0x5C, 0x4B, 0x8D, 0x8B, 0x42, 0x4F, 0xC1, 0x71, 
   0x56, 0xB6, 0x81, 0x84, 0x92, 0x46, 0x7D, 0x84, 0x28, 0x2C, 0x71, 0x12, 0x2C, 0x62, 0x59, 0x7D, 
   0xB4, 0x7E, 0x63, 0xA5, 0x57, 0x5E, 0xAC, 0x67, 0x86, 0xAF, 0x43, 0x7E, 0x89, 0x30, 0x4E, 0x5F, 
   0x51, 0x15, 0x5F, 0x40, 0x7D, 0xA5, 0x3A, 0x85, 0xC2, 0x36, 0x4D, 0x6D, 0x5F, 0x7B, 0x62, 0x72, 
   0x87, 0xCE, 0x55, 0x3D, 0xBC, 0x4E, 0x75, 0x58, 0x6D, 0xA6, 0x9F, 0x20, 0x26, 0xA7, 0x00, 0x09, 
   0x33, 0x45, 0x78, 0x61, 0xBF, 0xD9, 0xFF, 0x7E, 0x60, 0xA9, 0x00, 0x28, 0x18, 0x35, 0x38, 0x55, 
   0x48, 0x3A, 0xAD, 0x44, 0x9C, 0xA3, 0x62, 0x6F, 0x8B, 0x62, 0x51, 0x5C, 0x60, 0x7B, 0x98, 0x51, 
   0x44, 0x80, 0x0A, 0x04, 0x41, 0x0A, 0x16, 0x7A, 0x30, 0x6A, 0x81, 0x89, 0xA1, 0x78, 0xA6, 0x79, 
   0x80, 0x41, 0x60, 0xB3, 0x0F, 0x57, 0xAC, 0x35, 0x37, 0x5E, 0x46, 0x3C, 0x35, 0x0F, 0x2C, 0x53, 
   0x46, 0x57, 0xBD, 0x8D, 0x87, 0xDB, 0x7B, 0x71, 0x5C, 0x24, 0x4E, 0x1C, 0x18, 0x31, 0x84, 0x68, 
   0x71, 0xD0, 0x78, 0xA3, 0x8B, 0x05, 0x24, 0x3A, 0x00, 0x00, 0x6D, 0x63, 0x8E, 0xB9, 0x6C, 0xAD, 
   0x8C, 0x77, 0x72, 0x63, 0x3C, 0x1F, 0x63, 0x07, 0x29, 0x92, 0x68, 0x68, 0xAA, 0x8E, 0x85, 0x9E, 
   0x1A, 0x50, 0x7F, 0x00, 0x0C, 0x28, 0x52, 0x4E, 0x53, 0xB1, 0xC7, 0xD9, 0x5C, 0x67, 0xBE, 0x38, 
   0x26, 0x61, 0x4C, 0x47, 0x6A, 0x1D, 0x54, 0x80, 0x24, 0x73, 0x4E, 0x58, 0x8A, 0x9A, 0x76, 0x60, 
   0xB7, 0x37, 0x15, 0x6D, 0x42, 0x4E, 0x6C, 0x75, 0x98, 0x99, 0x30, 0x64, 0x92, 0x00, 0x00, 0x3D, 
   0x55, 0x3D, 0x5B, 0x8A, 0xB2, 0xDB, 0x58, 0x81, 0xAA, 0x50, 0x4C, 0x70, 0x49, 0x50, 0x7F, 0x26, 
   0x65, 0x90, 0x37, 0x3C, 0x6E, 0x66, 0x32, 0x74, 0x46, 0x74, 0xA3, 0x4D, 0x9D, 0x8D, 0x90, 0x58, 
   0x81, 0x38, 0x50, 0x96, 0x0F, 0x4E, 0x68, 0x37, 0x2C, 0x6F, 0x66, 0x66, 0xCF, 0x56, 0x99, 0x58, 
   0x34, 0x1C, 0x26, 0x40, 0x12, 0xD4, 0x58, 0xA4, 0xC6, 0x6F, 0xB6, 0x81, 0x57, 0x4E, 0x95, 0x22, 
   0x30, 0x66, 0x39, 0x47, 0x77, 0x57, 0x60, 0x9B, 0x63, 0x8F, 0xB2, 0x41, 0x7D, 0x94, 0x51, 0x42, 
   0x43, 0x40, 0x2A, 0x76, 0x40, 0x75, 0xCD, 0x62, 0x76, 0x6D, 0x40, 0x32, 0x78, 0x2A, 0x65, 0x8F, 
   0x69, 0x77, 0x75, 0x4E, 0x29, 0x78, 0x2D, 0x53, 0xCF, 0x89, 0xC7, 0xD5, 0x88, 0x98, 0x8D, 0x35, 
   0x5A, 0x87, 0x1B, 0x1C, 0x4A, 0x26, 0x00, 0x0C, 0x29, 0x3C, 0x78, 0x5C, 0x97, 0xF7, 0xBF, 0xB1, 
   0xFF, 0x84, 0x8D, 0x8D, 0x02, 0x2D, 0x2B, 0x0A, 0x0E, 0x60, 0x5A, 0x42, 0x5B, 0x46, 0x69, 0x5A, 
   0x2D, 0xA6, 0xD0, 0x8A, 0xA2, 0xD2, 0x79, 0x72, 0x7B, 0x3F, 0x41, 0x73, 0x53, 0x3F, 0x93, 0x40, 
   0x6C, 0x96, 0x28, 0x8D, 0x66, 0x4F, 0x52, 0x6A, 0x39, 0x28, 0x90, 0x50, 0x55, 0x63, 0x50, 0x77, 
   0x7A, 0x3F, 0x4F, 0xC3, 0x44, 0x43, 0x6B, 0x29, 0x5F, 0x21, 0x58, 0x54, 0x99, 0x91, 0x81, 0xC7, 
   0x45, 0x42, 0x65, 0x06, 0x36, 0x30, 0x35, 0x43, 0x55, 0xA3, 0x7E, 0xC6, 0x87, 0xA5, 0xFF, 0x29, 
   0x42, 0x6C, 0x20, 0x0C, 0x13, 0x47, 0x56, 0x83, 0x41, 0x63, 0x9F, 0x2C, 0x53, 0x61, 0x4C, 0x76, 
   0x56, 0x97, 0x5A, 0x8A, 0x6E, 0x59, 0x8B, 0x10, 0x4D, 0x7F, 0x0F, 0x58, 0x72, 0x60, 0x4D, 0x77, 
   0x6D, 0x5E, 0x60, 0x50, 0x59, 0x87, 0x55, 0x59, 0x82, 0x37, 0x59, 0x76, 0x3D, 0x59, 0x6F, 0x3E, 
   0x59, 0x69, 0x5B, 0x59, 0x52, 0x40, 0x59, 0x8B, 0x36, 0x59, 0x75, 0x75, 0x59, 0x6A, 0x64, 0x59, 
   0x8C, 0x14, 0x59, 0x7A, 0x63, 0x59, 0x4C, 0x7E, 0x59, 0x79, 0x2D, 0x59, 0x7F, 0x21, 0x59, 0x62, 
   0x61, 0x59, 0x62, 0x62, 0x59, 0x74, 0x45, 0x59, 0x8B, 0x5B, 0x59, 0x69, 0x4A, 0x59, 0x74, 0x28, 
   0x59, 0x63, 0x56, 0x59, 0x80, 0x51, 0x64, 0x7A, 0x4C, 0x4D, 0x8B, 0x5C, 0x5D, 0x89, 0x45, 0x51, 
   0x48, 0x4B, 0x4B, 0x4E, 0x45, 0x40, 0x7D, 0x51, 0x6E, 0x7F, 0x6E, 0x5D, 0x80, 0x40, 0x58, 0x85, 
   0x3F, 0x5D, 0x7E, 0x4F, 0x4C, 0x3E, 0x51, 0x61, 0x9F, 0x57, 0x66, 0xAF, 0x3A, 0x60, 0x75, 0x4C, 
   0x43, 0x7A, 0x63, 0x5A, 0x80, 0x51, 0x7C, 0xBA, 0x35, 0x70, 0x9E, 0x51, 0x53, 0x86, 0x51, 0x36, 
   0x90, 0x40, 0x59, 0x89, 0x4B, 0x71, 0x94, 0x4B, 0x7C, 0x88, 0x5B, 0x5E, 0x77, 0x39, 0x03, 0x67, 
   0x2E, 0x5A, 0xA8, 0x62, 0xCE, 0xD6, 0x57, 0x89, 0x9B, 0x40, 0x26, 0x3F, 0x3B, 0x0F, 0x58, 0x53, 
   0x88, 0xE4, 0x7B, 0x9B, 0xFF, 0x46, 0x50, 0x41, 0x28, 0x4E, 0x0C, 0x4E, 0x74, 0xA3, 0x49, 0x45, 
   0xE6, 0x17, 0x0D, 0x98, 0x5D, 0x86, 0x98, 0x80, 0xC0, 0xAE, 0x30, 0x42, 0x85, 0x2F, 0x2A, 0x90, 
   0x6D, 0x69, 0xC8, 0x4A, 0x90, 0xA9, 0x1C, 0x3A, 0x4B, 0x55, 0x3F, 0x45, 0x56, 0x6D, 0x98, 0x45, 
   0x5D, 0xE5, 0x56, 0x52, 0xC2, 0x4A, 0x58, 0x74, 0x38, 0x54, 0x3F, 0x28, 0x82, 0x58, 0x72, 0x6B, 
   0xC8, 0x56, 0x32, 0xD1, 0x12, 0x60, 0x87, 0x36, 0x62, 0x76, 0x76, 0x64, 0xA4, 0x81, 0xBE, 0xCB, 
   0x4C, 0x7B, 0xA2, 0x11, 0x00, 0x67, 0x43, 0x38, 0xA3, 0x5B, 0x78, 0x92, 0x57, 0x69, 0x5A, 0x51, 
   0x69, 0x9A, 0x57, 0x52, 0xC4, 0x40, 0x6D, 0xC3, 0x40, 0x45, 0x7C, 0x51, 0x24, 0x68, 0x4C, 0x81, 
   0x7A, 0x57, 0x99, 0x9E, 0x5B, 0x4E, 0xCC, 0x33, 0x31, 0x7C, 0x28, 0x49, 0x86, 0x67, 0x8F, 0x96, 
   0x62, 0x9A, 0x96, 0x3F, 0x32, 0x90, 0x28, 0x36, 0x89, 0x40, 0x59, 0x5C, 0x5D, 0x66, 0x97, 0x4D, 
   0x79, 0xD2, 0x52, 0x7E, 0xC1, 0x5D, 0x5B, 0x69, 0x19, 0x3E, 0x67, 0x4D, 0x55, 0xA6, 0x65, 0x6D, 
   0x6F, 0x49, 0x6E, 0x98, 0x5B, 0x74, 0xD2, 0x5B, 0x7A, 0x8D, 0x54, 0x67, 0x75, 0x37, 0x38, 0xB3, 
   0x30, 0x49, 0xB1, 0x8A, 0x4B, 0x59, 0x45, 0x9C, 0x59, 0x0C, 0x7F, 0xAB, 0x42, 0x0D, 0xCF, 0x5D, 
   0x21, 0x91, 0x92, 0xBE, 0x73, 0xA1, 0xDB, 0xCC, 0x3A, 0x74, 0xB8, 0x00, 0x07, 0x4C, 0x19, 0x05, 
   0x58, 0x55, 0x52, 0x69, 0x68, 0x9F, 0x76, 0x79, 0xBC, 0xC0, 0x64, 0x31, 0x98, 0x00, 0x45, 0x5D, 
   0x00, 0x4A, 0x67, 0x6D, 0x42, 0x68, 0x98, 0xB1, 0x86, 0x9D, 0xD6, 0xE7, 0x48, 0x37, 0x7E, 0x00, 
   0x00, 0x42, 0x2C, 0x2B, 0x68, 0x5C, 0x4B, 0x7B, 0x37, 0x5B, 0x77, 0x50, 0xA7, 0x96, 0x9F, 0xA6, 
   0xAD, 0x62, 0x3C, 0x73, 0x00, 0x11, 0x6B, 0x18, 0x64, 0x80, 0x64, 0x59, 0x74, 0x38, 0x21, 0x42, 
   0x33, 0x40, 0x77, 0x35, 0x87, 0xAD, 0x4E, 0x7D, 0x8C, 0x77, 0x2E, 0x64, 0x64, 0x72, 0x86, 0x23, 
   0x9E, 0xB8, 0x37, 0x35, 0x7C, 0x30, 0x16, 0x1F, 0x10, 0x3A, 0x3D, 0x4D, 0x6C, 0xBF, 0x9A, 0xA2, 
   0xD9, 0x61, 0x7F, 0x7E, 0x3C, 0x48, 0x60, 0x2E, 0x2F, 0x75, 0x27, 0x57, 0x69, 0x39, 0x63, 0x90, 
   0x51, 0x58, 0x5E, 0x52, 0x47, 0x70, 0x41, 0x6A, 0xB1, 0x3C, 0x4F, 0xA6, 0x42, 0x7C, 0x7C, 0x81, 
   0x59, 0x85, 0x47, 0x36, 0x6D, 0x0D, 0x47, 0x57, 0x47, 0x5B, 0x82, 0x70, 0x7F, 0xA7, 0x6B, 0x9A, 
   0xBE, 0x31, 0x3D, 0x6D, 0x1A, 0x15, 0x50, 0x6F, 0x8C, 0xC8, 0x63, 0x7B, 0xAA, 0x13, 0x14, 0x3D, 
   0x1B, 0x2C, 0x38, 0x79, 0x84, 0x9D, 0x91, 0x86, 0xEF, 0x3A, 0x5E, 0x93, 0x2D, 0x50, 0x41, 0x4E, 
   0x43, 0x73, 0x32, 0x4E, 0xA7, 0x28, 0x49, 0x7F, 0x6E, 0x68, 0x64, 0x74, 0x6F, 0xA3, 0x46, 0x8C, 
   0xAF, 0x56, 0x57, 0x71, 0x4E, 0x5B, 0x92, 0x41, 0x53, 0xAC, 0x0E, 0x42, 0x5B, 0x32, 0x38, 0x44, 
   0x6E, 0x62, 0x69, 0x6A, 0x76, 0x91, 0x53, 0x77, 0xD9, 0x41, 0x5F, 0xFA, 0x50, 0x5D, 0x73, 0x2D, 
   0x34, 0x14, 0x44, 0x3B, 0x5E, 0x50, 0x8C, 0xDD, 0x40, 0x60, 0x94, 0x51, 0x4A, 0x3E, 0x58, 0x83, 
   0x95, 0x5D, 0x87, 0xC9, 0x57, 0x31, 0x79, 0x34, 0x36, 0x7E, 0x29, 0x6B, 0x7E, 0x4D, 0x78, 0x79, 
   0x76, 0x67, 0x98, 0x5F, 0x5C, 0x9A, 0x3C, 0x52, 0x90, 0x52, 0x97, 0xC2, 0x41, 0x7F, 0xC4, 0x62, 
   0x5A, 0x37, 0x3F, 0x52, 0x24, 0x22, 0x2F, 0xAF, 0x2F, 0x36, 0xA8, 0x76, 0x79, 0x9F, 0x68, 0x88, 
   0xBC, 0x73, 0x9F, 0xA8, 0x65, 0x68, 0x76, 0x18, 0x31, 0x35, 0x23, 0x0E, 0x6E, 0x6F, 0x44, 0x9E, 
   0x5A, 0x82, 0x74, 0x3E, 0xB8, 0xBF, 0x7D, 0x94, 0xC4, 0x76, 0x41, 0x44, 0x0F, 0x1D, 0x4D, 0x64, 
   0x67, 0xBE, 0x85, 0xB6, 0xA6, 0x22, 0x69, 0x6F, 0x2C, 0x0A, 0x34, 0x4F, 0x20, 0x74, 0x62, 0x7D, 
   0xC5, 0x6D, 0x8A, 0xA2, 0x33, 0x61, 0x50, 0x06, 0x4F, 0x5A, 0x4D, 0x48, 0x82, 0xAA, 0x5A, 0xA5, 
   0x70, 0x71, 0x77, 0x0C, 0x3E, 0x44, 0x1C, 0x7D, 0x78, 0x5B, 0x81, 0xC4, 0x5C, 0x41, 0x96, 0x4B, 
   0x29, 0x71, 0x4F, 0x62, 0x6E, 0x32, 0x58, 0x4B, 0x27, 0x53, 0x79, 0x61, 0x65, 0xAC, 0x62, 0x65, 
   0x67, 0x2F, 0x59, 0x4B, 0x62, 0x4D, 0x85, 0x6C, 0x58, 0xB3, 0x1B, 0x4D, 0x73, 0x20, 0x64, 0x66, 
   0x60, 0x59, 0x76, 0x55, 0x59, 0x5F, 0x49, 0x59, 0x76, 0x3D, 0x59, 0x92, 0x2C, 0x59, 0x86, 0x4A, 
   0x59, 0x5E, 0x6D, 0x59, 0x63, 0x50, 0x59, 0x86, 0x18, 0x59, 0x81, 0x53, 0x59, 0x6A, 0x7D, 0x59, 
   0x59, 0x81, 0x59, 0xA9, 0x40, 0x59, 0x8C, 0x15, 0x5E, 0x51, 0x20, 0x5E, 0x50, 0x55, 0x59, 0x73, 
   0x5C, 0x59, 0x8B, 0x51, 0x59, 0x80, 0x50, 0x59, 0x69, 0x33, 0x59, 0x74, 0x33, 0x59, 0x6E, 0x56, 
   0x59, 0x8B, 0x51, 0x59, 0x58, 0x63, 0x59, 0x76, 0x57, 0x5E, 0xBA, 0x34, 0x69, 0x8F, 0x56, 0x63, 
   0x20, 0x4B, 0x40, 0x3B, 0x45, 0x4B, 0x7C, 0x4C, 0x51, 0x8A, 0x58, 0x58, 0x7A, 0x68, 0x64, 0x9C, 
   0x56, 0x74, 0x73, 0x16, 0x2A, 0x3E, 0x59, 0x6E, 0xA0, 0x64, 0x79, 0xAB, 0x41, 0x50, 0x93, 0x40, 
   0x61, 0x70, 0x4B, 0x77, 0x97, 0x45, 0x6A, 0xA9, 0x57, 0x51, 0xB3, 0x4C, 0x17, 0x78, 0x51, 0x24, 
   0x55, 0x40, 0x7D, 0x89, 0x4B, 0xCA, 0xCF, 0x61, 0x89, 0xAD, 0x1D, 0x00, 0x5C, 0x40, 0x29, 0x83, 
   0x6E, 0x7A, 0x94, 0x51, 0x77, 0x9B, 0x40, 0x5B, 0x73, 0x3A, 0x6C, 0x80, 0x6E, 0x76, 0xD1, 0x46, 
   0x20, 0xCB, 0x30, 0x4F, 0x36, 0x86, 0xB2, 0x7A, 0x6E, 0x8F, 0xD6, 0x1C, 0x41, 0x5B, 0x10, 0x12, 
   0x79, 0x5B, 0x57, 0xE7, 0x68, 0x7A, 0x92, 0x58, 0x5E, 0x6F, 0x46, 0x4C, 0xD4, 0x51, 0x69, 0xB1, 
   0x51, 0x53, 0x60, 0x62, 0x6F, 0x92, 0x4A, 0x79, 0xA2, 0x21, 0x3A, 0x7B, 0x3E, 0x45, 0x87, 0x6C, 
   0x73, 0xBA, 0x44, 0x47, 0xB4, 0x39, 0x5F, 0x64, 0x62, 0x6C, 0x65, 0x6D, 0x78, 0xDE, 0x33, 0x7C, 
   0xAD, 0x27, 0x48, 0x6E, 0x39, 0x15, 0x97, 0x69, 0x6D, 0xAF, 0x81, 0xBE, 0xA9, 0x59, 0x6D, 0x9C, 
   0x40, 0x2B, 0x83, 0x33, 0x6D, 0x7C, 0x33, 0x51, 0x5B, 0x56, 0x5D, 0xC9, 0x57, 0x6E, 0xFD, 0x4C, 
   0x5E, 0x77, 0x51, 0x69, 0x25, 0x40, 0x52, 0x8C, 0x40, 0x6D, 0xFF, 0x51, 0x67, 0x6B, 0x4C, 0x02, 
   0x59, 0x62, 0x60, 0xBF, 0x39, 0xCE, 0x81, 0x34, 0x73, 0x9E, 0x6D, 0x3E, 0xA9, 0x50, 0x42, 0x80, 
   0x22, 0x49, 0x91, 0x56, 0x99, 0x96, 0x51, 0x60, 0xA1, 0x5D, 0x21, 0x7E, 0x57, 0x6C, 0x62, 0x3F, 
   0x94, 0x96, 0x17, 0x39, 0xAF, 0x3C, 0x56, 0xBB, 0x89, 0x7E, 0x8C, 0x67, 0x79, 0x74, 0x3D, 0x4B, 
   0x8A, 0x2B, 0x56, 0x85, 0x4D, 0x72, 0x8B, 0x48, 0x50, 0x7C, 0x5B, 0x4B, 0xA5, 0x77, 0x7E, 0xCD, 
   0x53, 0x73, 0xB3, 0x24, 0x67, 0x54, 0x50, 0x45, 0x36, 0x45, 0x73, 0xB0, 0x0F, 0x3C, 0xC9, 0x5D, 
   0x3A, 0x7A, 0xBA, 0xCA, 0x95, 0x79, 0xB2, 0xBC, 0x0E, 0x2B, 0xA2, 0x1C, 0x48, 0x69, 0x59, 0x6C, 
   0x7B, 0x5F, 0x2D, 0x78, 0x1B, 0x1D, 0x28, 0x4E, 0x76, 0x53, 0x70, 0xB5, 0xFF, 0x42, 0x5F, 0xA9, 
   0x1B, 0x13, 0x12, 0x50, 0x53, 0x4A, 0x96, 0xA9, 0xAD, 0x84, 0x90, 0xB3, 0x1A, 0x37, 0x6D, 0x0C, 
   0x0C, 0x6B, 0x29, 0x57, 0x65, 0x59, 0x65, 0x71, 0x8E, 0x7D, 0x7E, 0x54, 0x54, 0xAC, 0x24, 0x5E, 
   0x89, 0x44, 0x6E, 0x6A, 0x65, 0x44, 0x64, 0x0A, 0x21, 0x65, 0x32, 0x61, 0xA4, 0x82, 0x79, 0x98, 
   0x39, 0x51, 0x4E, 0x06, 0x36, 0x2E, 0x4D, 0x49, 0xB5, 0x94, 0xA1, 0xFF, 0x99, 0x9A, 0xA9, 0x33, 
   0x36, 0x32, 0x00, 0x11, 0x4C, 0x25, 0x3F, 0x7F, 0x67, 0x7A, 0x65, 0x58, 0x65, 0x52, 0x42, 0x3E, 
   0xA0, 0x59, 0x78, 0xE7, 0x53, 0x7E, 0xB3, 0x5C, 0x65, 0x59, 0x16, 0x35, 0x55, 0x00, 0x2F, 0x3F, 
   0x76, 0x5F, 0x82, 0xBC, 0xA4, 0xDA, 0x48, 0x65, 0xC3, 0x00, 0x24, 0x54, 0x49, 0x46, 0x5C, 0x4B, 
   0x80, 0x7D, 0x47, 0x5E, 0x67, 0x4D, 0x2B, 0x5E, 0x59, 0x59, 0xAA, 0x48, 0x71, 0xA6, 0x36, 0x45, 
   0x5C, 0x53, 0x83, 0x79, 0x58, 0x7C, 0xBD, 0x25, 0x09, 0x67, 0x41, 0x3C, 0x5B, 0x6F, 0xAF, 0xAB, 
   0x37, 0x60, 0x9B, 0x27, 0x17, 0x51, 0x61, 0x6D, 0x8B, 0x5C, 0xA7, 0xC0, 0x51, 0x4B, 0x87, 0x4B, 
   0x39, 0x69, 0x44, 0x5B, 0x85, 0x3F, 0x72, 0x8A, 0x50, 0x55, 0x85, 0x50, 0x3F, 0x6F, 0x2E, 0x6E, 
   0x7C, 0x67, 0x80, 0xB0, 0x71, 0x62, 0xBA, 0x3C, 0x5A, 0x62, 0x07, 0x2B, 0x33, 0x26, 0x00, 0x7E, 
   0x5D, 0x9D, 0x98, 0x8D, 0xBC, 0x85, 0x6A, 0x59, 0xAF, 0x35, 0x23, 0xBF, 0x34, 0x45, 0x84, 0x56, 
   0x79, 0x71, 0x50, 0x74, 0x8B, 0x39, 0x40, 0x5D, 0x3F, 0x47, 0x59, 0x40, 0x60, 0x7E, 0x58, 0x89, 
   0xCA, 0x58, 0x78, 0xBF, 0x51, 0x49, 0x6E, 0x1E, 0x32, 0x8A, 0x41, 0x77, 0x79, 0x75, 0x6D, 0x6F, 
   0x5A, 0x46, 0xA4, 0x53, 0x85, 0xB5, 0x79, 0x8F, 0x8D, 0x11, 0x21, 0x96, 0x21, 0x48, 0x6C, 0x4B, 
   0x65, 0x61, 0x5E, 0x6D, 0x8B, 0x5F, 0x89, 0xAF, 0x64, 0x55, 0xC5, 0x2F, 0x2C, 0x5C, 0x2A, 0x5B, 
   0x3E, 0x3D, 0x7B, 0xB1, 0x83, 0xA9, 0xC9, 0x72, 0x63, 0x8A, 0x21, 0x33, 0x77, 0x37, 0x3E, 0x8D, 
   0x80, 0x6D, 0x8D, 0x41, 0x74, 0x6C, 0x18, 0x53, 0x95, 0x3B, 0x70, 0xBB, 0x70, 0x69, 0x64, 0x5A, 
   0x79, 0x51, 0x5E, 0x5A, 0xBC, 0x4B, 0x69, 0x8D, 0x21, 0x60, 0x3C, 0x27, 0x2C, 0x96, 0x6C, 0x32, 
   0x9B, 0x56, 0x95, 0x57, 0x2E, 0x7F, 0x90, 0x57, 0x4A, 0xAC, 0x58, 0x43, 0x49, 0x2C, 0x3D, 0x49, 
   0x71, 0x5C, 0x9B, 0xA2, 0xA1, 0xCA, 0x38, 0x82, 0xA6, 0x00, 0x29, 0x4E, 0x31, 0x05, 0x36, 0x7D, 
   0x61, 0x9D, 0x6E, 0x74, 0xA9, 0x2A, 0x5F, 0x64, 0x57, 0x76, 0x52, 0x62, 0x65, 0x91, 0x39, 0x42, 
   0x85, 0x38, 0x52, 0x62, 0x28, 0x58, 0x72, 0x6D, 0x4D, 0x7E, 0x78, 0x64, 0x90, 0x2C, 0x59, 0x89, 
   0x31, 0x59, 0x60, 0x4D, 0x59, 0x6A, 0x37, 0x59, 0x6F, 0x3E, 0x59, 0x75, 0x61, 0x59, 0x6A, 0x5B, 
   0x59, 0x81, 0x3F, 0x59, 0x7B, 0x34, 0x59, 0x70, 0x51, 0x59, 0x70, 0x37, 0x59, 0x76, 0x71, 0x59, 
   0x70, 0x92, 0x59, 0x82, 0x2E, 0x5E, 0xA3, 0x00, 0x4D, 0x5D, 0x54, 0x4D, 0x45, 0x5B, 0x64, 0x73, 
   0x57, 0x59, 0x90, 0x57, 0x59, 0x80, 0x56, 0x59, 0x69, 0x2D, 0x59, 0x74, 0x3F, 0x59, 0x79, 0x5C, 
   0x59, 0x69, 0x46, 0x59, 0x6A, 0x4C, 0x59, 0x9D, 0x4B, 0x64, 0x75, 0x2D, 0x4D, 0x68, 0x4A, 0x58, 
   0x82, 0x56, 0x63, 0x65, 0x40, 0x4C, 0x43, 0x51, 0x4C, 0x77, 0x4C, 0x58, 0x8A, 0x57, 0x6F, 0x79, 
   0x50, 0x58, 0x6D, 0x28, 0x41, 0x73, 0x48, 0x5D, 0x8E, 0x48, 0x5D, 0x89, 0x69, 0x63, 0xA0, 0x40, 
   0x84, 0xB6, 0x28, 0x70, 0x8C, 0x44, 0x4B, 0x95, 0x5C, 0x39, 0x83, 0x4C, 0x3F, 0x7C, 0x4C, 0x53, 
   0x7C, 0x5C, 0x7D, 0x9A, 0x5B, 0x95, 0x8B, 0x1D, 0x57, 0xB5, 0x45, 0x61, 0xD6, 0x7F, 0x86, 0x89, 
   0x63, 0x2F, 0x59, 0x3A, 0x12, 0x60, 0x40, 0x76, 0x6F, 0x5C, 0xA6, 0xF4, 0x45, 0x7D, 0xE2, 0x2E, 
   0x26, 0x29, 0x40, 0x26, 0x39, 0x5D, 0x8E, 0xC5, 0x7F, 0x9F, 0xBD, 0x3A, 0x11, 0xA1, 0x29, 0x5A, 
   0x73, 0x72, 0xAF, 0x74, 0x34, 0x40, 0xD5, 0x34, 0x11, 0xAD, 0x62, 0x73, 0x6C, 0x51, 0x75, 0x9E, 
   0x35, 0x6A, 0x8C, 0x51, 0x53, 0x5A, 0x67, 0x58, 0xB0, 0x4F, 0x79, 0xE4, 0x32, 0x45, 0x92, 0x37, 
   0x3A, 0x44, 0x38, 0x7A, 0x39, 0x45, 0x55, 0xAF, 0x6E, 0x83, 0xDB, 0x6D, 0x6C, 0xAE, 0x1C, 0x3E, 
   0x8A, 0x1C, 0x60, 0x61, 0x6D, 0x71, 0x96, 0x6E, 0x71, 0xCA, 0x2F, 0x70, 0xB3, 0x40, 0x2B, 0x73, 
   0x40, 0x53, 0x82, 0x62, 0x81, 0x77, 0x50, 0x6A, 0x7F, 0x34, 0x4C, 0xBF, 0x4B, 0x35, 0xE7, 0x57, 
   0x6E, 0x94, 0x4C, 0x63, 0x5C, 0x51, 0x69, 0x4B, 0x51, 0x5D, 0x8D, 0x4C, 0x4B, 0xFF, 0x62, 0x46, 
   0xAB, 0x34, 0x37, 0x3C, 0x2E, 0x6E, 0x7F, 0x79, 0xCF, 0xB4, 0x5C, 0x72, 0x9E, 0x3F, 0x0F, 0x97, 
   0x33, 0x41, 0x86, 0x45, 0x77, 0x8B, 0x74, 0x7E, 0x9D, 0x6F, 0x84, 0xBE, 0x34, 0x4F, 0x83, 0x2C, 
   0x4E, 0x33, 0x1D, 0x5A, 0x7F, 0x5A, 0x5C, 0xEF, 0xAD, 0x7A, 0xB1, 0x6E, 0x74, 0x88, 0x49, 0x62, 
   0x96, 0x46, 0x55, 0x78, 0x1E, 0x49, 0x40, 0x36, 0x55, 0x9E, 0x66, 0x5C, 0xF0, 0x89, 0x6F, 0xA5, 
   0x54, 0x8B, 0x70, 0x3B, 0x5C, 0x9B, 0x13, 0x28, 0x99, 0x42, 0x0E, 0x59, 0x77, 0xB1, 0x5A, 0x61, 
   0xE6, 0xCD, 0x39, 0x3F, 0xB6, 0x39, 0x2C, 0x6B, 0x72, 0x8B, 0x96, 0x7C, 0x9B, 0xB5, 0x4B, 0x58, 
   0x72, 0x1A, 0x38, 0x4C, 0x3A, 0x0F, 0x67, 0x29, 0x34, 0x68, 0x1B, 0x87, 0x70, 0x89, 0x89, 0xC1, 
   0x73, 0x61, 0x99, 0x3E, 0x85, 0x6E, 0x35, 0x4F, 0x77, 0x19, 0x00, 0x50, 0x48, 0x7C, 0x8F, 0x6C, 
   0x83, 0xAD, 0x56, 0x46, 0x74, 0x4A, 0x7E, 0x68, 0x76, 0x87, 0xA0, 0x56, 0x22, 0x6B, 0x00, 0x10, 
   0x69, 0x00, 0x61, 0x63, 0x67, 0x90, 0x64, 0x74, 0x2A, 0x82, 0x34, 0x41, 0x9A, 0x17, 0x96, 0x99, 
   0x55, 0x5D, 0x5A, 0x3A, 0x19, 0x2E, 0x35, 0x43, 0x92, 0x5E, 0xB0, 0xF5, 0x63, 0x76, 0x91, 0x3A, 
   0x08, 0x2C, 0x22, 0x3A, 0x3B, 0x2E, 0x74, 0xA9, 0x6D, 0x6F, 0x99, 0x6D, 0x4C, 0x51, 0x00, 0x1F, 
   0x54, 0x46, 0x54, 0xBE, 0x74, 0x9A, 0xDB, 0x40, 0x8E, 0x9F, 0x1E, 0x1A, 0x19, 0x4D, 0x25, 0x35, 
   0x55, 0x98, 0xC7, 0x61, 0x66, 0xC3, 0x76, 0x5E, 0x94, 0x50, 0x4B, 0x74, 0x00, 0x12, 0x5A, 0x1B, 
   0x58, 0x3D, 0x4C, 0x8C, 0x6D, 0x7C, 0x75, 0xBA, 0x65, 0x41, 0x93, 0x1F, 0x1F, 0x55, 0x19, 0x5F, 
   0x72, 0x53, 0x9A, 0xAC, 0x6A, 0x6C, 0x90, 0x2A, 0x2C, 0x67, 0x25, 0x2C, 0x57, 0x54, 0x77, 0xA2, 
   0x92, 0x83, 0xC4, 0x1A, 0x44, 0x78, 0x00, 0x16, 0x11, 0x66, 0x6C, 0x7F, 0x91, 0x79, 0xE8, 0x42, 
   0x63, 0xAA, 0x41, 0x5D, 0x47, 0x6D, 0x67, 0x73, 0x33, 0x3D, 0x9B, 0x27, 0x48, 0x63, 0x60, 0x4A, 
   0x70, 0x66, 0x74, 0xCC, 0x38, 0x96, 0x8C, 0x37, 0x34, 0x41, 0x42, 0x1D, 0x7A, 0x33, 0x8B, 0x98, 
   0x51, 0x70, 0x83, 0x69, 0x76, 0xC7, 0x58, 0x79, 0x6B, 0x3A, 0x11, 0x27, 0x45, 0x3F, 0xAC, 0x57, 
   0x90, 0xFC, 0x57, 0x7F, 0x7C, 0x4B, 0x18, 0x0D, 0x39, 0x3B, 0x70, 0x45, 0x7B, 0xE5, 0x68, 0x6C, 
   0x91, 0x46, 0x4B, 0x5E, 0x36, 0x79, 0x90, 0x5E, 0x84, 0x75, 0x70, 0x34, 0x87, 0x37, 0x45, 0xB5, 
   0x52, 0xA7, 0x87, 0x5C, 0x7E, 0x85, 0x28, 0x54, 0xBB, 0x3D, 0x51, 0x37, 0x32, 0x0D, 0x22, 0x1E, 
   0x49, 0xDD, 0x82, 0x9D, 0xF7, 0xAC, 0xA4, 0xA0, 0x5F, 0x7F, 0x8B, 0x00, 0x26, 0x69, 0x05, 0x13, 
   0x4B, 0x4C, 0x65, 0x4E, 0x5C, 0x75, 0xB3, 0x91, 0xB0, 0xEE, 0x90, 0x98, 0xA3, 0x2D, 0x5B, 0x60, 
   0x35, 0x2A, 0x6F, 0x55, 0x1F, 0x6F, 0x16, 0x5C, 0x7C, 0x1E, 0xA4, 0xB6, 0x80, 0xB5, 0xB5, 0x65, 
   0x62, 0x73, 0x37, 0x0F, 0x33, 0x58, 0x57, 0x83, 0x62, 0x74, 0xE9, 0x3E, 0x73, 0x63, 0x1B, 0x2D, 
   0x17, 0x33, 0x2D, 0x73, 0x63, 0x7E, 0xBA, 0x80, 0x8A, 0xA8, 0x3B, 0x45, 0x67, 0x24, 0x28, 0x33, 
   0x5E, 0x6D, 0x8B, 0x86, 0xA5, 0xF2, 0x66, 0x64, 0x8E, 0x13, 0x06, 0x18, 0x0D, 0x49, 0x4F, 0x3D, 
   0x5B, 0x6E, 0x58, 0x52, 0x93, 0x8D, 0x81, 0xAB, 0x65, 0x54, 0x82, 0x2A, 0x4E, 0x4E, 0x4A, 0x4D, 
   0x8B, 0x43, 0x58, 0xB2, 0x3E, 0x52, 0x4A, 0x34, 0x69, 0x3E, 0x7E, 0x59, 0x9A, 0x71, 0x59, 0xA0, 
   0x0F, 0x59, 0x7D, 0x1F, 0x59, 0x70, 0x54, 0x59, 0x7A, 0x56, 0x59, 0x47, 0x6D, 0x59, 0x75, 0x3F, 
   0x59, 0x87, 0x28, 0x59, 0x77, 0x40, 0x59, 0x77, 0x69, 0x59, 0x77, 0x69, 0x59, 0x77, 0x46, 0x59, 
   0x8D, 0x1E, 0x59, 0x64, 0x67, 0x5E, 0x53, 0x67, 0x4D, 0x97, 0x34, 0x58, 0x80, 0x3F, 0x4D, 0x62, 
   0x56, 0x5E, 0x56, 0x56, 0x59, 0x7F, 0x34, 0x59, 0x8B, 0x4B, 0x59, 0x74, 0x5C, 0x59, 0x5D, 0x46, 
   0x59, 0x5E, 0x63, 0x59, 0xAE, 0x51, 0x64, 0x80, 0x4B, 0x4D, 0x4B, 0x4A, 0x58, 0x68, 0x2D, 0x4D, 
   0x96, 0x3F, 0x64, 0x84, 0x67, 0x64, 0x55, 0x57, 0x52, 0x5A, 0x50, 0x68, 0x76, 0x39, 0x51, 0x72, 
   0x4B, 0x41, 0x62, 0x5C, 0x86, 0xA7, 0x5A, 0x64, 0x8E, 0x5F, 0x5E, 0x83, 0x59, 0x91, 0xAC, 0x4C, 
   0x78, 0xC2, 0x3F, 0x47, 0xA2, 0x2D, 0x28, 0x4F, 0x56, 0x2F, 0x5F, 0x57, 0x81, 0x9E, 0x57, 0x99, 
   0xB0, 0x56, 0x59, 0x61, 0x1D, 0x00, 0x73, 0x45, 0x6D, 0xB9, 0x68, 0xD5, 0xB4, 0x51, 0x78, 0xA0, 
   0x29, 0x24, 0x3E, 0x40, 0x17, 0x50, 0x57, 0x57, 0xDB, 0x62, 0x7C, 0xE7, 0x2E, 0x6D, 0x4C, 0x56, 
   0x88, 0x56, 0x61, 0x6A, 0x9C, 0x22, 0x0E, 0x8E, 0x13, 0x21, 0xA2, 0x7B, 0xB3, 0xD5, 0x9D, 0xB9, 
   0x9B, 0x13, 0x66, 0x5C, 0x3E, 0x2F, 0x9A, 0x43, 0x49, 0xD8, 0x3F, 0x45, 0x70, 0x5C, 0x74, 0x4D, 
   0x51, 0x75, 0xA3, 0x57, 0x4D, 0xB0, 0x45, 0x6A, 0x8A, 0x61, 0x80, 0xBC, 0x43, 0x56, 0xC4, 0x10, 
   0x2F, 0x2D, 0x55, 0x64, 0x2E, 0x89, 0x99, 0xC7, 0x4B, 0x55, 0xF8, 0x1D, 0x49, 0x91, 0x56, 0x55, 
   0x6D, 0x67, 0x6D, 0xA0, 0x50, 0xA5, 0xA0, 0x2D, 0x5E, 0x83, 0x38, 0x00, 0xA5, 0x3F, 0x68, 0x89, 
   0x5C, 0x81, 0x73, 0x5D, 0x5A, 0x97, 0x4C, 0x7C, 0xE1, 0x4B, 0x54, 0x8B, 0x34, 0x63, 0x5C, 0x4B, 
   0x52, 0xD1, 0x57, 0x57, 0xB3, 0x4C, 0x6E, 0x3A, 0x4C, 0x47, 0x64, 0x62, 0x53, 0xDE, 0x34, 0x7B, 
   0xDF, 0x34, 0x6B, 0x88, 0x67, 0x43, 0x58, 0x5C, 0x61, 0x7F, 0x34, 0x8F, 0xA2, 0x44, 0x77, 0x92, 
   0x3F, 0x2B, 0x97, 0x4B, 0x2C, 0x80, 0x4C, 0x84, 0xA2, 0x73, 0xB2, 0x96, 0x3F, 0x55, 0x8F, 0x06, 
   0x04, 0x77, 0x51, 0x5A, 0x61, 0x65, 0x9B, 0x7B, 0x45, 0x58, 0xD9, 0x83, 0x7A, 0xCE, 0x66, 0x79, 
   0x81, 0x25, 0x4F, 0x51, 0x2F, 0x32, 0x85, 0x41, 0x4F, 0xAE, 0x64, 0x90, 0x9E, 0x48, 0x69, 0x81, 
   0x5A, 0x6F, 0x93, 0x5A, 0x5D, 0xB5, 0x2D, 0x20, 0xBE, 0x45, 0x7D, 0x5A, 0xA0, 0xA6, 0x6F, 0x65, 
   0x94, 0xA8, 0x00, 0x36, 0x91, 0x31, 0x1E, 0x90, 0xA6, 0x85, 0x73, 0xA6, 0xA7, 0x99, 0x42, 0x55, 
   0x92, 0x1B, 0x3B, 0x67, 0x18, 0x50, 0x86, 0x12, 0x4A, 0x84, 0x37, 0x0F, 0x30, 0x63, 0x9B, 0x6C, 
   0xC3, 0xFF, 0xFF, 0x5E, 0x46, 0xBA, 0x00, 0x00, 0x05, 0x00, 0x23, 0x4E, 0x6B, 0x50, 0x7E, 0x92, 
   0xA9, 0x9D, 0x92, 0xB0, 0xB5, 0x4F, 0x57, 0x9D, 0x12, 0x41, 0x7E, 0x26, 0x2B, 0x69, 0x42, 0x30, 
   0x57, 0x1B, 0x2C, 0x5D, 0x30, 0x6F, 0x81, 0xA9, 0xAA, 0xAB, 0x64, 0x65, 0x89, 0x02, 0x19, 0x4A, 
   0x2F, 0x4D, 0x7F, 0x7F, 0x81, 0xBE, 0x61, 0x7B, 0x7F, 0x00, 0x2A, 0x45, 0x0B, 0x2A, 0x89, 0x4C, 
   0x70, 0xA0, 0x8D, 0x7D, 0x72, 0x6F, 0x7C, 0x5B, 0x1D, 0x41, 0x83, 0x27, 0x2E, 0x9B, 0x54, 0x67, 
   0x6E, 0x3E, 0x58, 0x4D, 0x28, 0x43, 0x8E, 0x2A, 0x6C, 0xAC, 0x66, 0x6D, 0x85, 0xA0, 0x6C, 0x8F, 
   0x3E, 0x43, 0x82, 0x14, 0x52, 0x6F, 0x69, 0x63, 0x85, 0x6D, 0x51, 0x8F, 0x10, 0x57, 0x55, 0x10, 
   0x41, 0x5C, 0x5D, 0x4D, 0xA2, 0x70, 0x8B, 0x9D, 0x49, 0x41, 0x76, 0x48, 0x2F, 0x55, 0x36, 0x58, 
   0xAB, 0x53, 0x5A, 0x9B, 0x48, 0x61, 0x57, 0x4D, 0x95, 0x96, 0x42, 0x67, 0xAE, 0x42, 0x17, 0x87, 
   0x3D, 0x6C, 0x91, 0x58, 0xB0, 0x89, 0x25, 0x43, 0x71, 0x15, 0x00, 0x50, 0x57, 0x68, 0x80, 0x87, 
   0xBA, 0xC1, 0x6A, 0x64, 0xAF, 0x35, 0x51, 0x74, 0x3E, 0x43, 0x4C, 0x42, 0x3C, 0x96, 0x36, 0x65, 
   0xB3, 0x48, 0x5B, 0x74, 0x3E, 0x3B, 0x53, 0x4B, 0x6B, 0x9F, 0x46, 0x78, 0xA6, 0x6E, 0x93, 0x96, 
   0x50, 0x4C, 0xB0, 0x28, 0x2E, 0x80, 0x39, 0x3F, 0x46, 0x5C, 0x7F, 0x5E, 0x51, 0x74, 0x99, 0x4C, 
   0x56, 0xB7, 0x4C, 0x34, 0x7E, 0x51, 0x79, 0x77, 0x40, 0x7A, 0x99, 0x4B, 0x53, 0x7E, 0x45, 0x32, 
   0x84, 0x2A, 0x67, 0x8B, 0x53, 0x8B, 0x81, 0x71, 0x80, 0x8E, 0x5A, 0x58, 0xC2, 0x4D, 0x57, 0xB1, 
   0x4B, 0x7D, 0xA8, 0x33, 0x5F, 0x71, 0x49, 0x46, 0x46, 0x43, 0x3A, 0x52, 0x44, 0x52, 0x8A, 0x46, 
   0x4A, 0xBD, 0x5A, 0x7B, 0xCA, 0x7D, 0x9F, 0xBC, 0x5F, 0x81, 0x73, 0x46, 0x66, 0x63, 0x1D, 0x24, 
   0x56, 0x23, 0x02, 0x52, 0x5A, 0x61, 0x8F, 0x69, 0x9F, 0xBB, 0x8C, 0xCD, 0xDD, 0x8E, 0x79, 0x73, 
   0x00, 0x00, 0x47, 0x00, 0x00, 0x73, 0x61, 0x7C, 0x7A, 0x73, 0xAD, 0x6A, 0x24, 0x6F, 0xC0, 0x5D, 
   0x5B, 0xA8, 0x59, 0x64, 0x35, 0x4E, 0x36, 0x84, 0x74, 0x5F, 0xCD, 0x5B, 0x9D, 0x7B, 0x05, 0x6D, 
   0x3B, 0x28, 0x1B, 0x6E, 0x7F, 0x38, 0xA8, 0x5E, 0x73, 0x86, 0x30, 0x6A, 0x6F, 0x51, 0x8C, 0x9C, 
   0x50, 0x89, 0x8F, 0x22, 0x14, 0x49, 0x4F, 0x23, 0x75, 0x7B, 0x7E, 0x9C, 0x25, 0x5C, 0x62, 0x00, 
   0x2E, 0x45, 0x5C, 0x57, 0x70, 0xAA, 0x5E, 0xAC, 0x66, 0x6A, 0xB8, 0x52, 0x5F, 0x77, 0x34, 0x53, 
   0x64, 0x38, 0x4D, 0x79, 0x5A, 0x58, 0x88, 0x4F, 0x4D, 0x70, 0x44, 0x64, 0x54, 0x4F, 0x59, 0x77, 
   0x65, 0x59, 0x9F, 0x21, 0x59, 0x71, 0x33, 0x59, 0x5F, 0x83, 0x59, 0x7A, 0x34, 0x59, 0x64, 0x39, 
   0x59, 0x7C, 0x45, 0x59, 0x88, 0x58, 0x59, 0x78, 0x69, 0x59, 0x78, 0x57, 0x59, 0x93, 0x33, 0x59, 
   0x70, 0x1C, 0x59, 0x6F, 0x40, 0x59, 0x53, 0x91, 0x64, 0x76, 0x58, 0x4D, 0xB4, 0x34, 0x4D, 0x7A, 
   0x3E, 0x5E, 0x3A, 0x2D, 0x59, 0x61, 0x4B, 0x59, 0x84, 0x6E, 0x59, 0x6E, 0x46, 0x59, 0x58, 0x4C, 
   0x59, 0x9C, 0x51, 0x64, 0x74, 0x40, 0x4D, 0x56, 0x4B, 0x58, 0x5C, 0x4B, 0x4D, 0x79, 0x56, 0x64, 
   0x6A, 0x3F, 0x4E, 0x98, 0x44, 0x6A, 0xAD, 0x66, 0x6F, 0x54, 0x33, 0x40, 0x2B, 0x2D, 0x34, 0x5F, 
   0x40, 0x4C, 0x8A, 0x7F, 0x97, 0x91, 0x53, 0x70, 0x8F, 0x59, 0x7B, 0x8F, 0x42, 0x73, 0xA5, 0x58, 
   0x54, 0x93, 0x57, 0x30, 0x9C, 0x3F, 0x41, 0x83, 0x28, 0x6B, 0x65, 0x5B, 0x88, 0x9E, 0x5B, 0x82, 
   0x83, 0x1D, 0x2B, 0x89, 0x40, 0x36, 0xA0, 0x7F, 0x7C, 0x7E, 0x63, 0x84, 0x84, 0x23, 0x6D, 0x85, 
   0x29, 0x60, 0x97, 0x73, 0x63, 0xCB, 0x5C, 0x2F, 0xAC, 0x29, 0x30, 0x44, 0x56, 0x87, 0x56, 0x61, 
   0x9F, 0xC4, 0x33, 0x76, 0xAB, 0x28, 0x00, 0x8F, 0x4C, 0x33, 0xA6, 0x70, 0xC4, 0x8B, 0x6A, 0xA8, 
   0xAD, 0x63, 0x28, 0xC7, 0x2D, 0x4C, 0x70, 0x37, 0x5C, 0x58, 0x3E, 0x50, 0xBE, 0x50, 0x45, 0x75, 
   0x62, 0x5D, 0x82, 0x4B, 0x7A, 0xBC, 0x39, 0x75, 0xBC, 0x3F, 0x4C, 0x7C, 0x56, 0x35, 0x64, 0x61, 
   0x5E, 0x97, 0x38, 0x5F, 0xAF, 0x43, 0x59, 0x8E, 0x38, 0x5F, 0x8F, 0x34, 0x43, 0x9B, 0x6E, 0x7D, 
   0x9B, 0x73, 0x9A, 0xB7, 0x3F, 0x5F, 0x8D, 0x2C, 0x34, 0x5E, 0x49, 0x50, 0x70, 0x44, 0x40, 0xA5, 
   0x40, 0x6F, 0xA3, 0x63, 0x65, 0xD2, 0x58, 0x5B, 0xBA, 0x4C, 0x93, 0x83, 0x4B, 0x5F, 0x7B, 0x34, 
   0x52, 0x69, 0x4B, 0x4B, 0x92, 0x57, 0x4C, 0xC5, 0x62, 0x64, 0x8B, 0x34, 0x77, 0x30, 0x2E, 0x61, 
   0xAA, 0x67, 0x87, 0xFB, 0x50, 0x4C, 0x93, 0x3F, 0x0E, 0x5D, 0x3F, 0x6B, 0x85, 0x4B, 0xAB, 0xA2, 
   0x62, 0x50, 0xA3, 0x50, 0x4F, 0x92, 0x4A, 0x5A, 0x91, 0x28, 0x4F, 0x85, 0x3A, 0x66, 0x8A, 0x64, 
   0x61, 0xBD, 0x6A, 0x5B, 0x78, 0x42, 0x56, 0x50, 0x3B, 0x78, 0x9D, 0x2B, 0x62, 0xD2, 0x65, 0x67, 
   0xA0, 0x60, 0x6D, 0x77, 0x4F, 0x56, 0xC0, 0x52, 0x56, 0x96, 0x29, 0x67, 0x40, 0x29, 0x84, 0x7A, 
   0x59, 0x41, 0xCC, 0x46, 0x3E, 0xB6, 0x8C, 0xAD, 0x7C, 0x8B, 0xB8, 0xBD, 0x27, 0x4E, 0x91, 0x1F, 
   0x07, 0x45, 0x51, 0x72, 0x66, 0x42, 0x8F, 0xB0, 0x5A, 0x44, 0x89, 0x55, 0x3F, 0x61, 0x5B, 0x7E, 
   0xB1, 0x47, 0x6D, 0xD2, 0x16, 0x70, 0x73, 0x37, 0x3C, 0x42, 0x6C, 0x58, 0x80, 0x61, 0x8C, 0x8C, 
   0x5F, 0x6E, 0x7B, 0x34, 0x60, 0x91, 0x27, 0x1A, 0x84, 0x1D, 0x4E, 0x67, 0x43, 0x5C, 0x5C, 0x8B, 
   0x6B, 0x75, 0x91, 0xBB, 0xB5, 0x49, 0x8A, 0xB4, 0x0C, 0x1F, 0x67, 0x0A, 0x37, 0x52, 0x49, 0x53, 
   0x5D, 0x62, 0x21, 0x8C, 0x53, 0x3B, 0x93, 0x2C, 0xA4, 0x93, 0x5A, 0x88, 0x60, 0x82, 0x0F, 0x5D, 
   0x26, 0x3D, 0xAF, 0x4B, 0xBA, 0xE7, 0x54, 0x63, 0x66, 0x03, 0x00, 0x08, 0x10, 0x23, 0x4E, 0x6F, 
   0x9F, 0xCF, 0x9A, 0xB7, 0xC5, 0x65, 0x49, 0x4C, 0x18, 0x36, 0x46, 0x1B, 0x45, 0xB8, 0x4E, 0x56, 
   0xA6, 0x48, 0x5B, 0x55, 0x0C, 0x2A, 0x19, 0x3D, 0x2E, 0x7F, 0x9B, 0xCA, 0xFF, 0x73, 0x9C, 0xD7, 
   0x32, 0x21, 0x3D, 0x3A, 0x2E, 0x2D, 0x11, 0x4B, 0x7C, 0x4B, 0x5D, 0x7E, 0x74, 0x7B, 0x7A, 0x40, 
   0x6F, 0xBA, 0x29, 0x3A, 0x86, 0x35, 0x35, 0x47, 0x42, 0x6F, 0x5F, 0x5A, 0x80, 0xBC, 0x6B, 0x24, 
   0x89, 0x2B, 0x1F, 0x56, 0x36, 0x71, 0x79, 0x4E, 0x79, 0x92, 0x7C, 0x8B, 0xB5, 0x37, 0x5C, 0x9D, 
   0x20, 0x2D, 0x4C, 0x4E, 0x5A, 0x79, 0x70, 0x76, 0xB2, 0x2C, 0x49, 0x84, 0x06, 0x3F, 0x3A, 0x7A, 
   0x69, 0x86, 0x92, 0x91, 0xD7, 0x3B, 0x69, 0x71, 0x3F, 0x4A, 0x70, 0x64, 0x4E, 0xB8, 0x19, 0x52, 
   0x6D, 0x0E, 0x31, 0x23, 0x4F, 0x30, 0x98, 0x75, 0xAC, 0xB3, 0x8D, 0xDB, 0xA4, 0x64, 0x5B, 0xC4, 
   0x28, 0x3F, 0x87, 0x1B, 0x16, 0x18, 0x3E, 0x45, 0x7A, 0x67, 0xA2, 0xE7, 0x4C, 0x90, 0x75, 0x4C, 
   0x01, 0x1B, 0x46, 0x45, 0xB8, 0x58, 0x90, 0xFE, 0x63, 0x75, 0x79, 0x45, 0x31, 0x3E, 0x1E, 0x4E, 
   0x89, 0x4D, 0x8F, 0x97, 0x7C, 0x58, 0x8E, 0x4F, 0x4E, 0xA6, 0x4E, 0xA9, 0xB1, 0x68, 0x90, 0x8D, 
   0x28, 0x26, 0xB1, 0x2C, 0x45, 0x5E, 0x49, 0x4A, 0x19, 0x3F, 0x47, 0x88, 0x4C, 0x77, 0xC5, 0x74, 
   0x84, 0xA5, 0x46, 0x46, 0x82, 0x08, 0x4D, 0xA2, 0x42, 0x92, 0x8E, 0x8D, 0x8B, 0x5F, 0x5F, 0x55, 
   0x70, 0x19, 0x2A, 0xAE, 0x36, 0x3C, 0x6B, 0x5A, 0x83, 0x78, 0x67, 0x7F, 0xB9, 0x6C, 0x63, 0xBE, 
   0x4E, 0x67, 0x83, 0x1F, 0x5A, 0x53, 0x57, 0x48, 0x85, 0x7E, 0x4D, 0x95, 0x39, 0x54, 0x58, 0x0C, 
   0x5A, 0x7C, 0x74, 0x77, 0xF9, 0x7B, 0x5A, 0x7F, 0x36, 0x5A, 0x2D, 0x2A, 0x60, 0x8E, 0x68, 0x6F, 
   0xD3, 0x4C, 0x6C, 0x82, 0x35, 0x1B, 0x47, 0x3B, 0x1D, 0x58, 0x8B, 0xBF, 0xB5, 0x6E, 0xBF, 0xE8, 
   0x16, 0x27, 0x67, 0x20, 0x07, 0x1F, 0x49, 0x40, 0x63, 0x4F, 0x86, 0xB4, 0x61, 0x7B, 0x8C, 0x4A, 
   0x46, 0x47, 0x28, 0x40, 0x59, 0x3A, 0x51, 0x7D, 0x6F, 0x47, 0xA6, 0x5E, 0x81, 0xB7, 0x4C, 0x71, 
   0x6A, 0x3F, 0x4E, 0x40, 0x3E, 0x4D, 0x8E, 0x54, 0x58, 0x8D, 0x3D, 0x4D, 0x4D, 0x2C, 0x5E, 0x4D, 
   0x4B, 0x59, 0x7C, 0x8A, 0x59, 0x9F, 0x50, 0x59, 0x6C, 0x11, 0x59, 0x6B, 0x44, 0x59, 0x70, 0x57, 
   0x59, 0x82, 0x52, 0x59, 0x66, 0x6F, 0x59, 0x8F, 0x5C, 0x59, 0x94, 0x2D, 0x59, 0x5A, 0x21, 0x59, 
   0x5F, 0x4F, 0x59, 0x70, 0x4B, 0x59, 0x8D, 0x3B, 0x59, 0x76, 0x91, 0x5E, 0x54, 0x51, 0x5E, 0x9D, 
   0x06, 0x59, 0x85, 0x4A, 0x59, 0x51, 0x62, 0x59, 0x51, 0x46, 0x59, 0x6F, 0x51, 0x59, 0xB4, 0x57, 
   0x64, 0x80, 0x40, 0x4D, 0x3A, 0x4B, 0x58, 0x67, 0x40, 0x4D, 0x7F, 0x57, 0x64, 0x6F, 0x57, 0x48, 
   0x76, 0x5B, 0x5F, 0x8D, 0x2C, 0x70, 0x97, 0x3D, 0x58, 0x67, 0x43, 0x40, 0x3D, 0x56, 0x45, 0x54, 
   0x51, 0x4C, 0x83, 0x58, 0x74, 0x96, 0x46, 0x74, 0xAD, 0x41, 0x8A, 0xC3, 0x58, 0x55, 0x8D, 0x47, 
   0x26, 0x7A, 0x58, 0x49, 0x73, 0x57, 0x7E, 0xB2, 0x44, 0x9B, 0xA6, 0x3E, 0x5A, 0x5B, 0x2D, 0x1B, 
   0x72, 0x40, 0x70, 0xD4, 0x85, 0x9D, 0xA0, 0x4C, 0x41, 0x77, 0x3A, 0x14, 0x4A, 0x4C, 0x6C, 0x7B, 
   0x68, 0xAC, 0xFF, 0x5C, 0x8F, 0xF3, 0x2E, 0x36, 0x1D, 0x56, 0x34, 0x37, 0x61, 0x4B, 0xBD, 0x33, 
   0x63, 0x94, 0x28, 0x3E, 0xB8, 0x57, 0x84, 0xAC, 0x74, 0x9B, 0x67, 0x36, 0x3F, 0x83, 0x24, 0x38, 
   0xBC, 0x90, 0x93, 0xAA, 0x4B, 0x77, 0x7F, 0x1C, 0x53, 0x56, 0x49, 0x5C, 0x68, 0x4F, 0x3E, 0xD7, 
   0x4A, 0x50, 0xA5, 0x44, 0x6D, 0x77, 0x5B, 0x52, 0xC5, 0x29, 0x3C, 0x5E, 0x51, 0x70, 0x4F, 0x7E, 
   0x93, 0xD4, 0x43, 0x70, 0xEB, 0x00, 0x31, 0x5B, 0x38, 0x48, 0x43, 0x84, 0x7C, 0xB0, 0x57, 0x77, 
   0xCE, 0x2E, 0x75, 0x89, 0x4F, 0x2F, 0x81, 0x3E, 0x3A, 0x8B, 0x33, 0x7F, 0x59, 0x61, 0x69, 0x7E, 
   0x4B, 0x36, 0xE1, 0x35, 0x54, 0xC6, 0x63, 0x93, 0x74, 0x58, 0x4F, 0x93, 0x4C, 0x5F, 0x91, 0x4B, 
   0x63, 0x52, 0x39, 0x30, 0x81, 0x61, 0x58, 0xFA, 0x3F, 0x65, 0xA9, 0x2E, 0x78, 0x40, 0x79, 0x88, 
   0x51, 0x67, 0x5F, 0xB5, 0x2D, 0x3B, 0xDD, 0x33, 0x56, 0x92, 0x56, 0x25, 0x68, 0x57, 0x5B, 0x7F, 
   0x5C, 0xB8, 0xB4, 0x4A, 0x95, 0xB4, 0x32, 0x2C, 0x74, 0x0B, 0x20, 0x7F, 0x64, 0x72, 0x9C, 0x99, 
   0xB3, 0x91, 0x66, 0x6E, 0xB2, 0x3B, 0x3E, 0x88, 0x3F, 0x42, 0x4F, 0x22, 0x70, 0x58, 0x25, 0x39, 
   0xCE, 0x9A, 0x68, 0xFF, 0xA1, 0x91, 0x8E, 0x43, 0x79, 0x63, 0x1D, 0x3E, 0x6D, 0x16, 0x27, 0x95, 
   0x20, 0x2B, 0x9D, 0x85, 0xA7, 0x8D, 0xA4, 0xD1, 0xB5, 0x69, 0x7E, 0xBE, 0x21, 0x1E, 0x76, 0x14, 
   0x2C, 0x72, 0x69, 0x77, 0x59, 0x85, 0x99, 0x70, 0x00, 0x27, 0x9F, 0x0A, 0x00, 0x84, 0x90, 0x96, 
   0x80, 0xB9, 0xB4, 0xD4, 0x55, 0x4D, 0x82, 0x36, 0x56, 0x63, 0x6C, 0xAD, 0xA4, 0x62, 0x31, 0x8A, 
   0x00, 0x00, 0x17, 0x11, 0x5F, 0x6D, 0x91, 0xBD, 0xE1, 0x60, 0x5E, 0x8D, 0x27, 0x40, 0x58, 0x54, 
   0x73, 0x74, 0x37, 0x45, 0x8B, 0x4D, 0x54, 0x9B, 0x6E, 0x86, 0x8E, 0x29, 0x35, 0x54, 0x13, 0x2E, 
   0x71, 0x75, 0x79, 0xAF, 0x64, 0x68, 0x7B, 0x20, 0x30, 0x2B, 0x38, 0x4F, 0x55, 0x84, 0x9A, 0xCA, 
   0x99, 0x94, 0xBF, 0x0D, 0x2B, 0x51, 0x00, 0x2E, 0x6A, 0x54, 0x4B, 0x69, 0x51, 0x58, 0x48, 0x47, 
   0x6A, 0x73, 0x48, 0x43, 0xA9, 0x59, 0x5F, 0xC1, 0x63, 0x76, 0x7B, 0x50, 0x6F, 0x4B, 0x0F, 0x44, 
   0x82, 0x00, 0x11, 0x60, 0x5D, 0x46, 0x4C, 0x82, 0x77, 0x95, 0x4A, 0x69, 0xE3, 0x3E, 0x90, 0xC0, 
   0x75, 0x88, 0x82, 0x3F, 0x0D, 0x4F, 0x05, 0x34, 0x20, 0x29, 0x63, 0x67, 0x7B, 0x75, 0xD1, 0x7B, 
   0x6F, 0xAA, 0x35, 0x40, 0x76, 0x0D, 0x23, 0x4D, 0x4D, 0x64, 0x87, 0x6C, 0x8D, 0xB6, 0x55, 0x4E, 
   0x72, 0x3D, 0x36, 0x67, 0x26, 0x3C, 0x96, 0x4E, 0x55, 0x9D, 0x5A, 0x69, 0x86, 0x3E, 0x9B, 0x7A, 
   0x5A, 0x54, 0x85, 0x4A, 0x03, 0x7A, 0x39, 0x5F, 0x8B, 0x72, 0xA0, 0x91, 0x4F, 0x61, 0xA0, 0x11, 
   0x1C, 0x50, 0x4B, 0x5C, 0x4D, 0x85, 0x80, 0xD8, 0x5C, 0x80, 0xD8, 0x27, 0x60, 0x58, 0x41, 0x09, 
   0x34, 0x31, 0x21, 0x7F, 0x39, 0x80, 0x95, 0x80, 0x8F, 0xAF, 0x7C, 0x7E, 0xD6, 0x47, 0x70, 0x95, 
   0x34, 0x19, 0x37, 0x43, 0x56, 0x6F, 0x43, 0x78, 0xB4, 0x3F, 0x51, 0x9D, 0x62, 0x40, 0x52, 0x46, 
   0x7F, 0x5F, 0x3B, 0x62, 0xA1, 0x58, 0x34, 0xC5, 0x63, 0x52, 0x97, 0x1F, 0x70, 0x73, 0x4D, 0x71, 
   0x56, 0x70, 0x39, 0x8C, 0x48, 0x51, 0xBC, 0x59, 0x7B, 0xB6, 0x58, 0x80, 0x81, 0x3A, 0x72, 0x89, 
   0x44, 0x4C, 0x54, 0x55, 0x17, 0x66, 0x22, 0x34, 0xAC, 0x57, 0x8D, 0x91, 0x6F, 0x79, 0xA3, 0x63, 
   0x73, 0xA7, 0x34, 0x72, 0x6C, 0x34, 0x39, 0x4F, 0x2B, 0x4C, 0x77, 0x67, 0x92, 0xB2, 0xA1, 0x97, 
   0xB2, 0x66, 0x7D, 0x77, 0x24, 0x24, 0x86, 0x34, 0x22, 0x58, 0x3A, 0x35, 0x5A, 0x38, 0x63, 0xAD, 
   0x8A, 0xCD, 0xD6, 0xA5, 0xCB, 0x9B, 0x14, 0x1B, 0x69, 0x0B, 0x00, 0x5B, 0x5A, 0x5C, 0x57, 0x39, 
   0x7B, 0xA9, 0x40, 0x5B, 0xCC, 0x57, 0x89, 0x96, 0x36, 0x6D, 0x34, 0x43, 0x4A, 0x62, 0x82, 0x70, 
   0xE0, 0x6A, 0x63, 0xA6, 0x0D, 0x46, 0x32, 0x4B, 0x5C, 0x6F, 0x67, 0x5C, 0xC5, 0x50, 0x72, 0x80, 
   0x4A, 0x4F, 0x72, 0x43, 0x4E, 0x7B, 0x49, 0x64, 0x58, 0x17, 0x37, 0x53, 0x7A, 0x70, 0xA5, 0x9C, 
   0x7B, 0xAC, 0x28, 0x3B, 0x77, 0x00, 0x40, 0x48, 0x33, 0x57, 0x65, 0x7F, 0x42, 0x99, 0x64, 0x7C, 
   0xA4, 0x51, 0x71, 0x7A, 0x3E, 0x4E, 0x44, 0x31, 0x4D, 0x6B, 0x36, 0x4D, 0x98, 0x27, 0x5E, 0x5F, 
   0x57, 0x59, 0x49, 0x91, 0x59, 0x7D, 0x51, 0x59, 0xA6, 0x12, 0x59, 0x6D, 0x45, 0x59, 0x71, 0x58, 
   0x59, 0x5A, 0x6F, 0x59, 0x77, 0x5C, 0x59, 0x83, 0x11, 0x59, 0x83, 0x3E, 0x59, 0x77, 0x61, 0x59, 
   0x5A, 0x62, 0x59, 0x8E, 0x45, 0x59, 0x93, 0x2E, 0x59, 0x70, 0x35, 0x59, 0x64, 0x7A, 0x59, 0x70, 
   0x5D, 0x59, 0x98, 0x35, 0x59, 0x6F, 0x40, 0x59, 0x31, 0x5C, 0x59, 0x9D, 0x40, 0x64, 0x9D, 0x50, 
   0x52, 0x52, 0x50, 0x58, 0x73, 0x40, 0x4D, 0x62, 0x57, 0x64, 0x75, 0x4C, 0x43, 0x92, 0x57, 0x71, 
   0x92, 0x61, 0x81, 0x75, 0x37, 0x47, 0x4C, 0x09, 0x41, 0x80, 0x43, 0x58, 0xA2, 0x67, 0x6F, 0x73, 
   0x4C, 0x63, 0x3E, 0x46, 0x35, 0x93, 0x45, 0x65, 0xA5, 0x40, 0x70, 0xBB, 0x46, 0x37, 0x80, 0x6F, 
   0x4F, 0x73, 0x47, 0x7A, 0x79, 0x5D, 0xB9, 0x9C, 0x50, 0x6E, 0xA2, 0x0B, 0x1C, 0x8B, 0x34, 0x49, 
   0x90, 0x95, 0x9E, 0x8F, 0x57, 0x6A, 0x93, 0x1D, 0x2F, 0x6C, 0x29, 0x46, 0x6E, 0x85, 0x54, 0xCB, 
   0x6E, 0x84, 0xC5, 0x17, 0x7F, 0x74, 0x4F, 0x7D, 0x84, 0x6C, 0x6E, 0x79, 0x33, 0x2D, 0x75, 0x28, 
   0x01, 0xB0, 0x57, 0x6C, 0xC3, 0x6F, 0xDB, 0x8A, 0x4D, 0x90, 0x89, 0x57, 0x0F, 0xAA, 0x3F, 0x19, 
   0x8C, 0x12, 0x76, 0x6F, 0x7E, 0x9A, 0xA7, 0x62, 0x77, 0x95, 0x28, 0x47, 0x63, 0x4E, 0x55, 0x93, 
   0x32, 0x49, 0xD8, 0x3E, 0x39, 0x92, 0x4B, 0x5D, 0x30, 0x68, 0x70, 0x7C, 0x68, 0x83, 0xCF, 0x45, 
   0x6C, 0xB4, 0x28, 0x49, 0x9C, 0x44, 0x64, 0xA5, 0x5B, 0x4E, 0x71, 0x5B, 0x92, 0x81, 0x44, 0x74, 
   0x9E, 0x4A, 0x06, 0x98, 0x44, 0x50, 0x93, 0x5B, 0x7F, 0x8D, 0x56, 0x53, 0x99, 0x34, 0x6A, 0xA0, 
   0x56, 0x64, 0x8F, 0x4B, 0x5F, 0xAC, 0x35, 0x54, 0x99, 0x63, 0x70, 0x87, 0x58, 0x54, 0x65, 0x51, 
   0x54, 0xB5, 0x4A, 0x70, 0x9E, 0x27, 0x60, 0x65, 0x33, 0x55, 0xAE, 0x6D, 0x7C, 0xCA, 0x62, 0x5F, 
   0x57, 0x28, 0x3C, 0x51, 0x3E, 0x69, 0x9D, 0x4F, 0x69, 0xCB, 0x50, 0x41, 0x8B, 0x62, 0x49, 0x6E, 
   0x56, 0x8F, 0x8A, 0x3E, 0x84, 0x9C, 0x0B, 0x44, 0x8B, 0x51, 0x38, 0xA2, 0x6A, 0x56, 0x80, 0x4F, 
   0x85, 0x8B, 0x6A, 0x95, 0xA1, 0x51, 0x60, 0x9A, 0x28, 0x25, 0x60, 0x28, 0x31, 0x50, 0x4C, 0x83, 
   0xBA, 0x54, 0x7A, 0xD3, 0x83, 0x8B, 0x94, 0x6B, 0x7E, 0x65, 0x36, 0x3E, 0xB8, 0x08, 0x00, 0x79, 
   0x43, 0x93, 0x51, 0x8F, 0xCF, 0xB3, 0x62, 0x73, 0xCA, 0x3F, 0x37, 0x6E, 0x50, 0x5C, 0x99, 0x66, 
   0x71, 0xAD, 0x64, 0x4D, 0x76, 0x18, 0x04, 0x42, 0x24, 0x72, 0x6B, 0x49, 0xB3, 0xD4, 0x69, 0x42, 
   0xA7, 0x7B, 0x48, 0x52, 0x91, 0xAA, 0xB8, 0x82, 0xBE, 0xFA, 0x2C, 0x2F, 0x78, 0x00, 0x0C, 0x34, 
   0x26, 0x22, 0x76, 0x3B, 0x43, 0x50, 0x61, 0x86, 0x6F, 0xA0, 0xB5, 0xD8, 0x6B, 0x5E, 0xBC, 0x00, 
   0x3D, 0x69, 0x1C, 0x2F, 0x5A, 0x40, 0x2A, 0x4E, 0x54, 0x6A, 0x77, 0x66, 0x88, 0xA1, 0x71, 0x49, 
   0xA6, 0x20, 0x7B, 0x76, 0x31, 0x5C, 0x52, 0x59, 0x00, 0x3D, 0x43, 0x48, 0xA1, 0x55, 0xC7, 0xBE, 
   0x6B, 0x88, 0x78, 0x4C, 0x00, 0x38, 0x12, 0x2A, 0x66, 0x46, 0x97, 0xBC, 0x9B, 0x92, 0xA5, 0x34, 
   0x3B, 0x28, 0x01, 0x13, 0x58, 0x52, 0x5E, 0xEA, 0x6F, 0xAA, 0xD3, 0x4C, 0x6A, 0x57, 0x12, 0x13, 
   0x22, 0x24, 0x2F, 0x6D, 0x75, 0x70, 0xCB, 0x6A, 0x8D, 0x93, 0x1F, 0x3D, 0x43, 0x40, 0x38, 0x93, 
   0x4B, 0x82, 0xD2, 0x2F, 0x7C, 0x75, 0x46, 0x25, 0x3A, 0x47, 0x46, 0x73, 0x48, 0x68, 0x9C, 0x59, 
   0x41, 0x76, 0x4D, 0x5D, 0x71, 0x1F, 0x58, 0xA5, 0x48, 0x37, 0x93, 0x65, 0x5B, 0x55, 0x38, 0x8E, 
   0x7D, 0x55, 0x6B, 0xA1, 0x55, 0x31, 0xA8, 0x43, 0x3D, 0x8A, 0x27, 0x83, 0x62, 0x55, 0x6D, 0x68, 
   0x56, 0x5B, 0xA2, 0x4B, 0x4E, 0x92, 0x3A, 0x21, 0x70, 0x73, 0x77, 0xA8, 0x66, 0x94, 0x90, 0x20, 
   0x38, 0x56, 0x04, 0x16, 0x51, 0x66, 0x68, 0xAE, 0x7E, 0xAE, 0xC0, 0x34, 0x47, 0x53, 0x2D, 0x2F, 
   0x6A, 0x4A, 0x5D, 0x8E, 0x61, 0x85, 0x96, 0x39, 0x52, 0xBD, 0x40, 0x3B, 0x94, 0x5D, 0x53, 0x44, 
   0x5D, 0x87, 0x72, 0x45, 0x92, 0xD2, 0x33, 0x46, 0x92, 0x38, 0x1C, 0x19, 0x34, 0x51, 0x6A, 0x63, 
   0x97, 0xF4, 0x6F, 0x85, 0x6C, 0x41, 0x12, 0x3A, 0x19, 0x3B, 0xC4, 0x75, 0xA9, 0xBF, 0x76, 0x72, 
   0x64, 0x48, 0x45, 0x7B, 0x3B, 0x68, 0xA9, 0x57, 0xA1, 0xA8, 0x40, 0x50, 0x89, 0x4B, 0x4E, 0x4E, 
   0x4B, 0x6F, 0x4F, 0x3A, 0x3C, 0x9C, 0x4C, 0x42, 0xD8, 0x58, 0x6C, 0xB0, 0x68, 0x8F, 0x74, 0x2E, 
   0x50, 0x71, 0x22, 0x4F, 0x7B, 0x57, 0x65, 0x6A, 0x59, 0x39, 0x5C, 0x39, 0x52, 0xDC, 0x68, 0x98, 
   0xD1, 0x83, 0xAD, 0x78, 0x58, 0x69, 0x6F, 0x10, 0x00, 0x6D, 0x00, 0x00, 0x4C, 0x52, 0x9F, 0x6C, 
   0x8A, 0xBB, 0xD1, 0x96, 0x8D, 0xFE, 0x5A, 0x78, 0x60, 0x01, 0x1E, 0x1F, 0x22, 0x0C, 0xAC, 0x9F, 
   0x6E, 0xA7, 0x39, 0x71, 0x41, 0x00, 0x51, 0x69, 0x64, 0x73, 0xD6, 0x8E, 0x78, 0x96, 0x51, 0x5A, 
   0x40, 0x55, 0x3E, 0x90, 0x69, 0xA4, 0xD4, 0x4A, 0x8A, 0x92, 0x09, 0x14, 0x3F, 0x32, 0x00, 0x49, 
   0x7D, 0x93, 0x94, 0x56, 0xAC, 0xB0, 0x17, 0x4A, 0x76, 0x67, 0x4E, 0x38, 0x58, 0x37, 0x84, 0x52, 
   0x65, 0xCA, 0x6D, 0x92, 0xAD, 0x32, 0x3B, 0x71, 0x09, 0x40, 0x36, 0x4A, 0x57, 0x64, 0x7A, 0x42, 
   0xB5, 0x7A, 0x7C, 0xA3, 0x44, 0x76, 0x6E, 0x20, 0x48, 0x4A, 0x2C, 0x59, 0x77, 0x66, 0x59, 0x8E, 
   0x6D, 0x5E, 0x8E, 0x1E, 0x5E, 0x61, 0x46, 0x59, 0x7E, 0x86, 0x59, 0xA7, 0x37, 0x59, 0x6E, 0x58, 
   0x59, 0x72, 0x62, 0x59, 0x77, 0x22, 0x59, 0x6B, 0x3E, 0x59, 0x60, 0x4A, 0x59, 0x7D, 0x4B, 0x59, 
   0x94, 0x57, 0x59, 0x83, 0x5C, 0x59, 0x60, 0x56, 0x59, 0x76, 0x12, 0x59, 0x76, 0x41, 0x59, 0x76, 
   0x92, 0x59, 0x60, 0x53, 0x59, 0x8F, 0x2A, 0x59, 0xAB, 0x50, 0x64, 0x6B, 0x61, 0x58, 0x57, 0x28, 
   0x41, 0x68, 0x39, 0x52, 0x85, 0x5C, 0x64, 0x6F, 0x4C, 0x43, 0x7B, 0x57, 0x71, 0x7B, 0x56, 0x76, 
   0x75, 0x2D, 0x42, 0x5D, 0x55, 0x41, 0x52, 0x4F, 0x4D, 0x8D, 0x3F, 0x70, 0xB0, 0x4B, 0x75, 0x8C, 
   0x5C, 0x63, 0x60, 0x4C, 0x1E, 0x25, 0x45, 0x3F, 0x90, 0x45, 0x29, 0x90, 0x40, 0x54, 0x85, 0x46, 
   0x8A, 0x96, 0x58, 0xA2, 0x9C, 0x58, 0x58, 0x69, 0x3B, 0x3A, 0x93, 0x58, 0x62, 0xE8, 0x6E, 0x9A, 
   0xAD, 0x34, 0x54, 0x55, 0x33, 0x35, 0x49, 0x3F, 0x40, 0x90, 0x67, 0x6E, 0xED, 0x40, 0x58, 0xBE, 
   0x39, 0x2C, 0x33, 0x55, 0x8F, 0x44, 0x49, 0xA6, 0xDB, 0x32, 0x64, 0xC7, 0x33, 0x00, 0x83, 0x57, 
   0x35, 0x88, 0x6F, 0x99, 0x7D, 0x4D, 0x89, 0xA0, 0x4C, 0x4A, 0xD2, 0x4B, 0x6F, 0x92, 0x44, 0x57, 
   0x6E, 0x28, 0x25, 0x7E, 0x3A, 0x70, 0x85, 0x8A, 0x8E, 0xAD, 0x67, 0x76, 0x9D, 0x1C, 0x40, 0x8C, 
   0x3D, 0x55, 0x9D, 0x3E, 0x2E, 0x91, 0x45, 0x4C, 0x5F, 0x79, 0x8D, 0xAC, 0x40, 0x77, 0xE7, 0x23, 
   0x3E, 0xA8, 0x46, 0x65, 0x52, 0x9C, 0x55, 0xA1, 0x4B, 0x98, 0xE9, 0x10, 0x5D, 0x75, 0x3D, 0x1C, 
   0x4C, 0x5A, 0x66, 0x91, 0x3F, 0x51, 0xAA, 0x4B, 0x6E, 0x95, 0x62, 0x6F, 0xC3, 0x4B, 0x4E, 0xB0, 
   0x34, 0x76, 0x4E, 0x50, 0x6A, 0x8B, 0x4B, 0x36, 0xA2, 0x35, 0x6A, 0x71, 0x63, 0x60, 0xA0, 0x6E, 
   0x61, 0xD9, 0x39, 0x6D, 0x93, 0x1C, 0x72, 0x58, 0x5A, 0x7C, 0x74, 0x66, 0x53, 0xCB, 0x44, 0x30, 
   0xB9, 0x2D, 0x69, 0x6E, 0x4A, 0x6F, 0x62, 0x4A, 0x59, 0x9C, 0x4A, 0x7B, 0xBF, 0x4F, 0x6F, 0x9C, 
   0x38, 0x14, 0x67, 0x12, 0x3E, 0x67, 0x74, 0xAC, 0xB8, 0x81, 0x96, 0xA3, 0x4E, 0x50, 0xA3, 0x3B, 
   0x3E, 0x9D, 0x51, 0x5A, 0x85, 0x45, 0x7C, 0x79, 0x40, 0x4E, 0x95, 0x57, 0x37, 0xA6, 0x5C, 0x77, 
   0x67, 0x1E, 0x78, 0x68, 0x3B, 0x5B, 0xB5, 0x5F, 0x3F, 0xE4, 0x5C, 0x41, 0x88, 0x68, 0x98, 0x6F, 
   0x6C, 0xA4, 0xA0, 0x31, 0x59, 0x88, 0x14, 0x35, 0x77, 0x38, 0x51, 0xA5, 0x84, 0x96, 0xA5, 0x9A, 
   0x89, 0x98, 0x15, 0x15, 0x7F, 0x00, 0x1C, 0x77, 0x82, 0x91, 0x60, 0x95, 0xA3, 0xA0, 0x3A, 0x37, 
   0x8F, 0x18, 0x37, 0x73, 0x95, 0xB9, 0xBC, 0xB5, 0xB1, 0xB5, 0x0B, 0x18, 0x6D, 0x00, 0x14, 0x53, 
   0x40, 0x74, 0x84, 0x76, 0x44, 0x78, 0x4A, 0x47, 0x35, 0x4F, 0x92, 0x8D, 0x6A, 0xAD, 0xE9, 0x23, 
   0x21, 0xA2, 0x10, 0x23, 0x2C, 0x3A, 0x40, 0x30, 0x43, 0x43, 0x77, 0x8A, 0x8A, 0xC4, 0x8A, 0xCE, 
   0xC3, 0x16, 0x38, 0x32, 0x20, 0x00, 0x27, 0x76, 0x7A, 0xDA, 0x5F, 0x86, 0xC4, 0x25, 0x19, 0x50, 
   0x08, 0x36, 0x43, 0x5F, 0x81, 0x88, 0x87, 0x60, 0x8A, 0x3C, 0x5F, 0x8B, 0x23, 0x52, 0x8B, 0x49, 
   0x4C, 0x84, 0x3E, 0x57, 0x57, 0x3A, 0x4C, 0x64, 0x4C, 0x4D, 0xC0, 0x49, 0x5F, 0x8D, 0x72, 0x50, 
   0x42, 0x83, 0x83, 0x76, 0x31, 0x6B, 0xD1, 0x12, 0x4D, 0x96, 0x72, 0x4B, 0x32, 0x39, 0x35, 0x44, 
   0x0C, 0x3D, 0x86, 0x52, 0x95, 0xB7, 0x76, 0xA0, 0xC2, 0x59, 0x37, 0x6A, 0x1A, 0x1E, 0x2F, 0x2B, 
   0x4C, 0x5E, 0x5A, 0x6A, 0xB6, 0x71, 0x71, 0xBD, 0x37, 0x4F, 0x66, 0x2B, 0x60, 0x5A, 0x49, 0x61, 
   0x78, 0x5B, 0x7E, 0xAC, 0x6D, 0x5B, 0x95, 0x44, 0x48, 0x56, 0x3E, 0x48, 0x72, 0x4A, 0x49, 0x9C, 
   0x45, 0x67, 0x87, 0x46, 0x7E, 0x93, 0x6E, 0x66, 0xA9, 0x45, 0x2C, 0x74, 0x2D, 0x43, 0x68, 0x76, 
   0x88, 0x96, 0x36, 0x44, 0xC3, 0x09, 0x33, 0x45, 0x4A, 0x4C, 0x24, 0x74, 0x71, 0xB6, 0x59, 0xA6, 
   0xCA, 0x63, 0x99, 0x98, 0x4F, 0x4B, 0xB1, 0x14, 0x2C, 0x6F, 0x1B, 0x21, 0x02, 0x62, 0x52, 0x94, 
   0x80, 0xAA, 0xF2, 0x69, 0x8E, 0x9B, 0x3A, 0x3C, 0x2D, 0x39, 0x2F, 0x76, 0x34, 0x6D, 0xD2, 0x57, 
   0x57, 0x89, 0x68, 0x5E, 0x76, 0x36, 0x7A, 0x6B, 0x3C, 0x41, 0x62, 0x65, 0x2B, 0xA9, 0x5A, 0x6C, 
   0xD3, 0x59, 0x95, 0x99, 0x40, 0x7E, 0x74, 0x28, 0x4F, 0x82, 0x44, 0x4D, 0x70, 0x4B, 0x31, 0x54, 
   0x41, 0x55, 0x96, 0x59, 0x95, 0xAA, 0x75, 0x90, 0xBD, 0x5D, 0x44, 0xC0, 0x29, 0x43, 0x83, 0x3F, 
   0x7C, 0x42, 0x45, 0x55, 0x5E, 0x47, 0x38, 0x99, 0x65, 0x83, 0xA6, 0x5A, 0x51, 0x7A, 0x3E, 0x74, 
   0x9C, 0x71, 0x8A, 0xB1, 0x74, 0x60, 0x5A, 0x17, 0x40, 0x5D, 0x11, 0x34, 0x7F, 0x62, 0x58, 0x87, 
   0x5E, 0x71, 0x8E, 0x3E, 0x4C, 0x9B, 0x7E, 0x8B, 0xA7, 0x7D, 0xA0, 0xB7, 0x24, 0x26, 0x86, 0x0B, 
   0x0E, 0x39, 0x61, 0x70, 0x62, 0x46, 0x95, 0x8C, 0x4E, 0x6E, 0xCC, 0x60, 0x5B, 0xA2, 0x61, 0x3F, 
   0x23, 0x6C, 0x72, 0x79, 0x7B, 0xB5, 0xF6, 0x2D, 0x51, 0x92, 0x03, 0x19, 0x28, 0x3C, 0x1E, 0x65, 
   0x55, 0x4E, 0x8D, 0x57, 0x95, 0x78, 0x5D, 0x7F, 0x84, 0x46, 0x4A, 0x84, 0x40, 0x43, 0x7F, 0x3A, 
   0x4E, 0x79, 0x57, 0x65, 0x9B, 0x78, 0x7B, 0x9A, 0x2C, 0x41, 0x70, 0x04, 0x3A, 0x4C, 0x60, 0x51, 
   0x5D, 0x67, 0x47, 0x92, 0x45, 0x65, 0xAE, 0x29, 0x76, 0x7F, 0x67, 0x5A, 0x4B, 0x5B, 0x59, 0x7D, 
   0x33, 0x4D, 0x83, 0x28, 0x4D, 0x6C, 0x41, 0x5E, 0x56, 0x71, 0x59, 0x7A, 0x93, 0x59, 0x97, 0x41, 
   0x59, 0x96, 0x06, 0x59, 0x66, 0x55, 0x59, 0x54, 0x5B, 0x59, 0x60, 0x4B, 0x59, 0x94, 0x4B, 0x59, 
   0x8F, 0x4B, 0x59, 0x6C, 0x4B, 0x59, 0x6B, 0x40, 0x59, 0x6B, 0x5C, 0x59, 0x8D, 0x2A, 0x59, 0x6B, 
   0x37, 0x59, 0x3F, 0x9E, 0x59, 0x9C, 0x69, 0x64, 0xE0, 0x17, 0x58, 0x60, 0x3E, 0x41, 0x24, 0x4F, 
   0x58, 0x6D, 0x4B, 0x5E, 0x8C, 0x57, 0x43, 0x82, 0x57, 0x71, 0x87, 0x50, 0x71, 0x6F, 0x33, 0x59, 
   0x6E, 0x33, 0x36, 0x57, 0x4B, 0x47, 0x7A, 0x6E, 0x70, 0x87, 0x57, 0x70, 0x77, 0x39, 0x4D, 0x9D, 
   0x39, 0x41, 0x9A, 0x6D, 0x6E, 0x00, 0x57, 0x34, 0x75, 0x5C, 0x13, 0x59, 0x40, 0x82, 0xA6, 0x40, 
   0xA0, 0xBF, 0x57, 0x5C, 0x87, 0x36, 0x29, 0x7C, 0x43, 0x68, 0xAF, 0x98, 0xB8, 0xA3, 0x58, 0x6D, 
   0x9C, 0x11, 0x26, 0x6D, 0x1C, 0x3C, 0x5C, 0x72, 0x8C, 0xCA, 0x62, 0x6A, 0xE0, 0x39, 0x5E, 0x55, 
   0x33, 0x4C, 0x48, 0x6B, 0x58, 0x93, 0x3D, 0x76, 0x7C, 0x10, 0x4A, 0xCF, 0x50, 0x6D, 0xEB, 0x74, 
   0x9F, 0x50, 0x4D, 0x48, 0x65, 0x4C, 0x19, 0xCB, 0x4B, 0x69, 0x97, 0x34, 0x81, 0x6E, 0x4B, 0x6A, 
   0x89, 0x67, 0x52, 0x9B, 0x4B, 0x30, 0x8A, 0x29, 0x6F, 0x8B, 0x6D, 0x8D, 0xB4, 0x56, 0x5F, 0xB8, 
   0x28, 0x3C, 0x40, 0x44, 0x5E, 0x47, 0x83, 0x75, 0xFF, 0x28, 0x58, 0xB2, 0x34, 0x48, 0x62, 0x58, 
   0x6B, 0xA1, 0x80, 0x66, 0xB2, 0x4D, 0x93, 0xA6, 0x50, 0x63, 0x99, 0x32, 0x22, 0x9D, 0x26, 0x32, 
   0x6E, 0x49, 0x5C, 0x63, 0x61, 0x84, 0x98, 0x4B, 0x35, 0xBC, 0x45, 0x53, 0xB1, 0x62, 0x92, 0x88, 
   0x45, 0x59, 0xA7, 0x4B, 0x58, 0x50, 0x4B, 0x6E, 0x46, 0x4B, 0x26, 0xC1, 0x45, 0x71, 0xE5, 0x40, 
   0x79, 0x78, 0x51, 0x6E, 0x93, 0x6D, 0x78, 0xA8, 0x43, 0x59, 0x63, 0x20, 0x2A, 0x69, 0x3E, 0x5D, 
   0xCB, 0x72, 0x69, 0xBF, 0x62, 0x4D, 0x62, 0x39, 0x76, 0x56, 0x49, 0x76, 0xB2, 0x32, 0x5E, 0xB8, 
   0x22, 0x35, 0x90, 0x6F, 0x3D, 0x6D, 0x76, 0x79, 0x79, 0x5A, 0xB3, 0xA8, 0x52, 0x67, 0xA9, 0x39, 
   0x26, 0x9D, 0x2D, 0x3C, 0x74, 0x2E, 0x55, 0x80, 0x7A, 0xA0, 0xD6, 0x74, 0x72, 0xAC, 0x45, 0x32, 
   0x65, 0x43, 0x5E, 0x2C, 0x16, 0x42, 0x90, 0x1A, 0x1E, 0xDD, 0x9C, 0xA4, 0x9A, 0xBB, 0xDE, 0xAA, 
   0x62, 0x47, 0xB7, 0x00, 0x05, 0x53, 0x0C, 0x37, 0x3B, 0x5E, 0x83, 0xB3, 0x94, 0x90, 0xA9, 0x3F, 
   0x46, 0x77, 0x1D, 0x3B, 0x99, 0x6D, 0x9D, 0xB4, 0x79, 0x70, 0x8A, 0x3F, 0x2C, 0x44, 0x4F, 0xA3, 
   0x82, 0x64, 0xB8, 0xD1, 0x1E, 0x2C, 0x69, 0x23, 0x13, 0x45, 0x90, 0x9B, 0xA0, 0x51, 0x62, 0xB7, 
   0x39, 0x2F, 0x66, 0x5A, 0x6D, 0x81, 0x59, 0x6D, 0xA7, 0x1A, 0x3F, 0x40, 0x30, 0x50, 0x6D, 0x84, 
   0x88, 0xAC, 0x29, 0x48, 0x73, 0x19, 0x3C, 0x61, 0x64, 0x65, 0x89, 0x56, 0x66, 0x94, 0x46, 0x55, 
   0x50, 0x79, 0x5B, 0x68, 0x44, 0x5B, 0xB3, 0x20, 0x81, 0xAE, 0x52, 0x6E, 0x7E, 0x3B, 0x06, 0x43, 
   0x25, 0x0D, 0x5A, 0x43, 0xAB, 0x95, 0x9A, 0xC3, 0xAD, 0x64, 0x38, 0x5E, 0x00, 0x0D, 0x75, 0x1B, 
   0x73, 0xAE, 0x6B, 0x85, 0xA7, 0x33, 0x4B, 0x3A, 0x02, 0x00, 0x30, 0x4A, 0x44, 0xA6, 0xA2, 0xCA, 
   0xF8, 0x85, 0xA8, 0xAB, 0x2B, 0x49, 0x3B, 0x27, 0x2E, 0x6A, 0x2C, 0x21, 0x85, 0x38, 0x5B, 0x2B, 
   0x3A, 0x5E, 0x3B, 0x48, 0x5C, 0xE0, 0x5A, 0xA1, 0xF9, 0x60, 0x77, 0x79, 0x3D, 0x1A, 0x26, 0x27, 
   0x42, 0x6A, 0x56, 0x6B, 0xB5, 0x8F, 0x67, 0x78, 0x49, 0x72, 0x6D, 0x09, 0x49, 0x9B, 0x59, 0x3E, 
   0x84, 0x4F, 0x5C, 0x7D, 0x50, 0xA0, 0x6C, 0x50, 0x54, 0x7D, 0x44, 0x20, 0x79, 0x39, 0x4E, 0x8B, 
   0x51, 0x67, 0x87, 0x7A, 0x84, 0x9E, 0x51, 0x8E, 0x97, 0x44, 0x31, 0x58, 0x43, 0x15, 0x74, 0x43, 
   0x72, 0xBF, 0x5F, 0x95, 0x91, 0x2B, 0x3A, 0x40, 0x00, 0x03, 0x52, 0x80, 0x94, 0x9B, 0x9F, 0xBE, 
   0xC1, 0x59, 0x77, 0xE8, 0x33, 0x33, 0x88, 0x1F, 0x20, 0x01, 0x36, 0x48, 0x5D, 0x3E, 0x78, 0xD3, 
   0x57, 0x6F, 0xCA, 0x5E, 0x49, 0x4D, 0x59, 0x71, 0x7A, 0x4D, 0x8D, 0xCF, 0x57, 0x52, 0x7E, 0x39, 
   0x1D, 0x54, 0x07, 0x47, 0x71, 0x64, 0x9E, 0xB0, 0x98, 0x7C, 0x68, 0x26, 0x1B, 0x5F, 0x42, 0x59, 
   0xE9, 0x7A, 0x99, 0xD1, 0x40, 0x65, 0x61, 0x2D, 0x36, 0x42, 0x4A, 0x47, 0x4E, 0x35, 0x4E, 0xA1, 
   0x53, 0x57, 0xB5, 0x7C, 0x92, 0x9F, 0x5E, 0x97, 0x92, 0x35, 0x56, 0x79, 0x34, 0x1B, 0x7D, 0x40, 
   0x54, 0x71, 0x52, 0x88, 0x72, 0x70, 0x56, 0xAC, 0x4E, 0x50, 0xA6, 0x42, 0x7D, 0x7E, 0x74, 0x4A, 
   0x67, 0x24, 0x33, 0x8F, 0x14, 0x67, 0xC8, 0x8C, 0xA7, 0x7E, 0x86, 0x99, 0x7C, 0x1D, 0x18, 0xA1, 
   0x0A, 0x00, 0x40, 0x3A, 0x6F, 0x2C, 0x61, 0x86, 0xE6, 0xC9, 0x9F, 0xFF, 0x82, 0xA2, 0x44, 0x00, 
   0x22, 0x24, 0x18, 0x0A, 0xA8, 0xA8, 0x99, 0xCB, 0x4E, 0x83, 0x53, 0x0F, 0x2E, 0x75, 0x6A, 0x89, 
   0xCA, 0x70, 0xA5, 0x89, 0x36, 0x31, 0x37, 0x50, 0x3A, 0x6F, 0x65, 0x72, 0xC4, 0x26, 0x7C, 0x6C, 
   0x10, 0x25, 0x32, 0x5C, 0x26, 0x78, 0x92, 0x8F, 0xA3, 0x42, 0x85, 0xBA, 0x23, 0x5C, 0x79, 0x56, 
   0x43, 0x39, 0x3A, 0x37, 0x50, 0x4C, 0x6A, 0xB1, 0x8F, 0x75, 0xB0, 0x42, 0x52, 0x69, 0x00, 0x4C, 
   0x45, 0x3D, 0x4C, 0x6E, 0x68, 0x4D, 0x8C, 0x87, 0x65, 0x93, 0x69, 0x76, 0x86, 0x1D, 0x4E, 0x5C, 
   0x16, 0x47, 0x61, 0x56, 0x47, 0x83, 0x58, 0x5E, 0x62, 0x4E, 0x59, 0x6F, 0x75, 0x59, 0xA9, 0x41, 
   0x59, 0x97, 0x34, 0x59, 0x57, 0x39, 0x59, 0x61, 0x4B, 0x59, 0x83, 0x5C, 0x59, 0x83, 0x4B, 0x59, 
   0x71, 0x44, 0x59, 0x77, 0x34, 0x59, 0x77, 0x51, 0x59, 0x77, 0x6F, 0x59, 0x55, 0x52, 0x59, 0x56, 
   0x36, 0x59, 0xB7, 0x47, 0x64, 0x90, 0x7A, 0x52, 0x4B, 0x4B, 0x41, 0x93, 0x11, 0x58, 0x7B, 0x44, 
   0x59, 0x3C, 0x67, 0x54, 0x6A, 0x45, 0x6B, 0x9E, 0x5B, 0x71, 0x8D, 0x4A, 0x59, 0x5E, 0x2D, 0x2B, 
   0x63, 0x56, 0x59, 0x75, 0x46, 0x81, 0x81, 0x52, 0x6A, 0x76, 0x68, 0x4D, 0x6F, 0x39, 0x41, 0x6E, 
   0x33, 0x5D, 0x7F, 0x5A, 0x69, 0x62, 0x45, 0x6D, 0x79, 0x40, 0x78, 0x63, 0x62, 0x60, 0x9E, 0x50, 
   0x3D, 0x8B, 0x1E, 0x43, 0x99, 0x47, 0x6D, 0xCD, 0x9E, 0x90, 0xAE, 0x5A, 0x62, 0x51, 0x30, 0x3F, 
   0x68, 0x3A, 0x4F, 0xA3, 0x50, 0x77, 0xDC, 0x50, 0x6B, 0xB2, 0x39, 0x4D, 0x37, 0x61, 0x63, 0x6F, 
   0x60, 0x73, 0xB5, 0x1B, 0x1C, 0x68, 0x2C, 0x00, 0x8C, 0x56, 0x7E, 0xA5, 0x63, 0xEE, 0xAD, 0x52, 
   0x91, 0xC8, 0x4C, 0x1F, 0xA3, 0x4B, 0x22, 0x5C, 0x34, 0x45, 0x78, 0x4B, 0x63, 0x94, 0x57, 0x81, 
   0x89, 0x57, 0x7A, 0xA0, 0x56, 0x56, 0x90, 0x33, 0x1D, 0x8A, 0x1D, 0x5E, 0xB2, 0x73, 0x88, 0x73, 
   0x68, 0x62, 0x63, 0x56, 0x83, 0x9E, 0x2C, 0x6A, 0xBC, 0x10, 0x1E, 0xA5, 0x4B, 0x52, 0x60, 0x91, 
   0x70, 0x72, 0x4D, 0x77, 0xDE, 0x2F, 0x86, 0x9F, 0x4B, 0x34, 0x4E, 0x66, 0x39, 0x97, 0x43, 0x78, 
   0xB4, 0x27, 0x74, 0x70, 0x55, 0x4C, 0x8C, 0x5B, 0x57, 0xA3, 0x39, 0x63, 0x9E, 0x4B, 0x75, 0xA2, 
   0x62, 0x63, 0x85, 0x40, 0x4C, 0x6E, 0x4B, 0x36, 0x8B, 0x5B, 0x70, 0xB5, 0x3F, 0x56, 0x99, 0x23, 
   0x73, 0x88, 0x7F, 0x84, 0x8D, 0x73, 0x55, 0x9E, 0x27, 0x3D, 0xA2, 0x14, 0x75, 0x7F, 0x54, 0x63, 
   0x7A, 0x5B, 0x47, 0xC4, 0x57, 0x5E, 0xAD, 0x78, 0x6F, 0x72, 0x27, 0x58, 0x4F, 0x16, 0x3C, 0x8F, 
   0x51, 0x6A, 0xBE, 0x8C, 0x76, 0xA1, 0x48, 0x43, 0x62, 0x4D, 0x4A, 0x84, 0x5C, 0xA5, 0xA7, 0x28, 
   0x65, 0x80, 0x2D, 0x1B, 0x81, 0x4B, 0x4F, 0xC0, 0x63, 0x85, 0x9D, 0x51, 0xB2, 0x7E, 0x4A, 0x59, 
   0x83, 0x2C, 0x00, 0x9E, 0x11, 0x32, 0x5A, 0x4D, 0xAD, 0x63, 0x6D, 0xA4, 0xE3, 0x97, 0x6A, 0xE3, 
   0x5D, 0x4B, 0x68, 0x32, 0x49, 0x6A, 0x3B, 0x6A, 0x8F, 0x57, 0x53, 0x56, 0x14, 0x33, 0x6E, 0x23, 
   0x59, 0xB5, 0xA9, 0xB7, 0xAC, 0x93, 0x8F, 0xBD, 0x41, 0x32, 0x98, 0x22, 0x47, 0x5C, 0x69, 0xA7, 
   0x8C, 0x78, 0x8D, 0x90, 0x00, 0x06, 0x77, 0x00, 0x00, 0x43, 0x74, 0x7A, 0x7E, 0xCD, 0xA5, 0xD0, 
   0x5F, 0x61, 0x97, 0x06, 0x5F, 0x62, 0x3C, 0x67, 0xA3, 0x62, 0x3C, 0x99, 0x29, 0x1A, 0x15, 0x25, 
   0x77, 0x39, 0x81, 0x8F, 0xDC, 0x64, 0x5C, 0xDD, 0x1A, 0x65, 0x78, 0x26, 0x36, 0x1A, 0x50, 0x15, 
   0x3E, 0x6F, 0x78, 0xDC, 0x90, 0xDF, 0xE2, 0x32, 0x38, 0x57, 0x00, 0x00, 0x27, 0x47, 0x62, 0x82, 
   0x7B, 0x64, 0x95, 0x43, 0x4F, 0x7F, 0x43, 0x77, 0x74, 0x64, 0x71, 0x9C, 0x5D, 0x47, 0x86, 0x33, 
   0x2F, 0x6F, 0x27, 0x67, 0xAD, 0x45, 0x35, 0x6D, 0x31, 0x42, 0x1A, 0x61, 0x6C, 0x9B, 0x73, 0x8B, 
   0xFF, 0x4B, 0x7F, 0xA6, 0x6A, 0x5A, 0x45, 0x39, 0x3A, 0x41, 0x00, 0x38, 0x63, 0x2D, 0x3F, 0x7C, 
   0x6E, 0x5D, 0x7F, 0x6B, 0x65, 0x71, 0x38, 0x39, 0x91, 0x38, 0x78, 0xB5, 0x44, 0x8F, 0xAE, 0x67, 
   0x3F, 0x72, 0x56, 0x4A, 0x37, 0x2D, 0x67, 0x65, 0x38, 0x6C, 0xAC, 0x65, 0x3E, 0xB9, 0x32, 0x66, 
   0x9B, 0x37, 0x60, 0x5A, 0x4A, 0x5B, 0x5A, 0x62, 0x6B, 0xA0, 0x40, 0x5A, 0x96, 0x40, 0x38, 0x80, 
   0x5C, 0x71, 0xA8, 0x67, 0x60, 0x8B, 0x44, 0x3E, 0x5E, 0x3E, 0x66, 0x97, 0x43, 0x60, 0x97, 0x43, 
   0x3F, 0x64, 0x38, 0x57, 0x5E, 0x6C, 0x6A, 0x98, 0x34, 0x7C, 0x9A, 0x3B, 0x66, 0x75, 0x7B, 0x6B, 
   0xCA, 0x6F, 0x5E, 0xAC, 0x29, 0x34, 0x38, 0x3E, 0x50, 0x65, 0x59, 0x60, 0xC6, 0x26, 0x54, 0x77, 
   0x1C, 0x2E, 0x40, 0x5D, 0x42, 0xB5, 0x71, 0xA6, 0xFB, 0x76, 0x8F, 0x82, 0x4D, 0x3D, 0x56, 0x1E, 
   0x30, 0x7D, 0x3A, 0x58, 0x89, 0x64, 0x55, 0x7F, 0x5F, 0x89, 0xA2, 0x59, 0xA5, 0xA2, 0x4C, 0x31, 
   0x5D, 0x23, 0x2F, 0x7E, 0x6D, 0x6D, 0xB0, 0x50, 0x69, 0x55, 0x1E, 0x32, 0x73, 0x4D, 0x84, 0xB4, 
   0x81, 0x8B, 0xBC, 0x59, 0x59, 0xA9, 0x2A, 0x69, 0x62, 0x3A, 0x73, 0x5B, 0x4C, 0x6C, 0x67, 0x52, 
   0x21, 0xAD, 0x59, 0x5B, 0xB9, 0x53, 0x9B, 0x79, 0x4D, 0x67, 0x72, 0x40, 0x5A, 0x93, 0x39, 0x64, 
   0x71, 0x23, 0x27, 0x67, 0x3C, 0x68, 0x97, 0x94, 0xCB, 0xE1, 0x93, 0x95, 0xA5, 0x2E, 0x3B, 0x46, 
   0x00, 0x00, 0x3F, 0x27, 0x1D, 0x90, 0x74, 0x7D, 0x93, 0x50, 0x82, 0x84, 0x68, 0x84, 0xA7, 0x7E, 
   0xB6, 0xA6, 0x38, 0x67, 0x88, 0x20, 0x00, 0x6F, 0x64, 0x2B, 0x5D, 0x6F, 0xAA, 0x92, 0x3A, 0x83, 
   0xDB, 0x34, 0x48, 0x9A, 0x45, 0x1E, 0x0F, 0x51, 0x57, 0x6F, 0x62, 0x97, 0xD6, 0x3F, 0x74, 0x80, 
   0x33, 0x3D, 0x46, 0x2E, 0x0E, 0x69, 0x64, 0x49, 0xA3, 0x92, 0xAD, 0x98, 0x41, 0x7A, 0x7A, 0x1E, 
   0x3A, 0x6D, 0x5C, 0x3D, 0x72, 0x51, 0x4E, 0x7D, 0x62, 0x65, 0x99, 0x65, 0x70, 0x9E, 0x25, 0x47, 
   0x63, 0x00, 0x41, 0x3A, 0x62, 0x46, 0x5E, 0xA3, 0x4D, 0xBB, 0x4E, 0x70, 0x99, 0x24, 0x5A, 0x75, 
   0x57, 0x4F, 0x57, 0x46, 0x65, 0x5C, 0x63, 0x53, 0x9C, 0x57, 0x59, 0x8B, 0x0D, 0x59, 0x64, 0x5D, 
   0x59, 0x75, 0x6F, 0x59, 0x8C, 0x41, 0x53, 0x86, 0x3A, 0x59, 0x84, 0x62, 0x59, 0x5A, 0x50, 0x59, 
   0x4E, 0x22, 0x59, 0x82, 0x56, 0x59, 0x83, 0x4C, 0x59, 0x7E, 0x47, 0x59, 0x5D, 0x5E, 0x59, 0x96, 
   0x58, 0x5E, 0x8A, 0x23, 0x4D, 0x61, 0x29, 0x52, 0x3E, 0x79, 0x52, 0x72, 0x4C, 0x53, 0xB7, 0x3A, 
   0x49, 0x7D, 0x50, 0x77, 0x4E, 0x4F, 0x6B, 0x8C, 0x27, 0x59, 0x7A, 0x38, 0x2B, 0x58, 0x56, 0x59, 
   0x7B, 0x41, 0x7C, 0x8D, 0x69, 0x5F, 0x70, 0x52, 0x47, 0x86, 0x4C, 0x41, 0x79, 0x50, 0x5D, 0x3A, 
   0x5A, 0x4D, 0x41, 0x10, 0x64, 0xED, 0x4B, 0x98, 0x8C, 0x4B, 0xC4, 0x97, 0x50, 0x38, 0x32, 0x23, 
   0x03, 0x8A, 0x41, 0x5F, 0xE3, 0x6F, 0xA5, 0xC6, 0x36, 0x66, 0x63, 0x36, 0x11, 0x62, 0x53, 0x62, 
   0x6A, 0x8C, 0x9C, 0xE9, 0x58, 0x7E, 0xE2, 0x2E, 0x3E, 0x4F, 0x38, 0x53, 0x30, 0x60, 0x79, 0x81, 
   0x49, 0x5C, 0xA7, 0x21, 0x23, 0xC5, 0x4B, 0x36, 0xA9, 0x7A, 0x84, 0x59, 0x4D, 0xA2, 0x8D, 0x46, 
   0x6E, 0xEF, 0x4B, 0x54, 0xB4, 0x34, 0x4B, 0x3F, 0x4B, 0x45, 0x7C, 0x57, 0x51, 0xA5, 0x57, 0x6E, 
   0x9A, 0x4B, 0x6E, 0x72, 0x3F, 0x56, 0xAB, 0x4A, 0x39, 0xA5, 0x34, 0x13, 0x4F, 0x46, 0x72, 0x68, 
   0x8A, 0xCA, 0xCC, 0x50, 0x6E, 0xD2, 0x00, 0x32, 0x4F, 0x55, 0x52, 0x76, 0x72, 0x47, 0xCC, 0x40, 
   0x75, 0x98, 0x40, 0x8B, 0x70, 0x62, 0x2F, 0x86, 0x4B, 0x45, 0x9D, 0x4B, 0x6D, 0x7C, 0x56, 0x69, 
   0x99, 0x55, 0x63, 0xD8, 0x1C, 0x5E, 0x97, 0x55, 0x69, 0x5C, 0x4A, 0x62, 0x94, 0x39, 0x34, 0x84, 
   0x45, 0x51, 0x6F, 0x62, 0x58, 0xC0, 0x56, 0x60, 0xC0, 0x28, 0x78, 0x5E, 0x3F, 0x6D, 0x6F, 0x6D, 
   0x72, 0xAE, 0x51, 0x4F, 0xAA, 0x40, 0x43, 0x88, 0x3F, 0x6B, 0xA9, 0x49, 0x70, 0xA7, 0x3D, 0x4D, 
   0x56, 0x2C, 0x5E, 0x57, 0x71, 0x69, 0xE6, 0x44, 0x52, 0xB3, 0x17, 0x47, 0x61, 0x68, 0x5F, 0x55, 
   0x69, 0x7C, 0x9B, 0x47, 0x6B, 0xCA, 0x4C, 0x5E, 0xAC, 0x4B, 0x35, 0x66, 0x2E, 0x48, 0x56, 0x4B, 
   0x83, 0x9D, 0x5C, 0x7E, 0xE3, 0x5C, 0x62, 0x9E, 0x45, 0x56, 0x6E, 0x44, 0x6C, 0x62, 0x33, 0x60, 
   0xB2, 0x34, 0x33, 0xC2, 0x63, 0x62, 0x5A, 0x6F, 0xA7, 0x65, 0x30, 0x67, 0xAB, 0x0A, 0x22, 0x96, 
   0x5C, 0x5B, 0xA1, 0xB8, 0x9F, 0x9A, 0x6B, 0x5F, 0x8C, 0x00, 0x00, 0x56, 0x00, 0x27, 0x51, 0x73, 
   0x9E, 0x92, 0xAA, 0xAD, 0xC2, 0x66, 0x5E, 0x90, 0x53, 0x78, 0x9A, 0x71, 0x9C, 0xE0, 0x2E, 0x3C, 
   0x7B, 0x1B, 0x00, 0x27, 0x53, 0x82, 0x6A, 0x32, 0x6D, 0xA4, 0x18, 0x20, 0x62, 0x8D, 0x7E, 0x75, 
   0xB0, 0xCF, 0xE8, 0x3B, 0x7D, 0xBF, 0x09, 0x23, 0x54, 0x2F, 0x30, 0x60, 0x46, 0x4D, 0x6A, 0x31, 
   0x39, 0x45, 0x6B, 0x79, 0xA3, 0x6B, 0xC3, 0xF3, 0x2B, 0x2D, 0x5D, 0x14, 0x14, 0x17, 0x60, 0x59, 
   0x8F, 0x67, 0x7D, 0xBE, 0x5C, 0x72, 0x69, 0x66, 0x5F, 0x68, 0x2C, 0x2C, 0x68, 0x37, 0x5A, 0x90, 
   0x59, 0xA9, 0xA7, 0x6A, 0x30, 0x7F, 0x1F, 0x0E, 0x4B, 0x25, 0x76, 0x80, 0x80, 0xA4, 0xAE, 0x57, 
   0x4D, 0x74, 0x00, 0x00, 0x35, 0x25, 0x59, 0x76, 0xA9, 0xAB, 0xDE, 0x5A, 0x72, 0x7D, 0x15, 0x26, 
   0x49, 0x53, 0x42, 0xAE, 0x58, 0x75, 0xAC, 0x3B, 0x7B, 0x38, 0x3A, 0x41, 0x38, 0x2F, 0x3A, 0xB7, 
   0x4C, 0x57, 0xAD, 0x5F, 0x63, 0x41, 0x55, 0x3C, 0x28, 0x34, 0x3A, 0xC1, 0x51, 0x86, 0xFF, 0x8A, 
   0x81, 0x93, 0x39, 0x52, 0x39, 0x16, 0x4A, 0x5A, 0x61, 0x50, 0x9B, 0x78, 0x72, 0xBE, 0x43, 0x60, 
   0x67, 0x20, 0x48, 0x6C, 0x43, 0x31, 0x7D, 0x5C, 0x4F, 0x90, 0x58, 0x89, 0x91, 0x6E, 0x7D, 0xA1, 
   0x4F, 0x31, 0x62, 0x1B, 0x42, 0x57, 0x37, 0x4F, 0x9D, 0x43, 0x6D, 0xAA, 0x4F, 0x79, 0x8D, 0x4A, 
   0x57, 0x5A, 0x39, 0x31, 0x7D, 0x46, 0x71, 0xAD, 0x8A, 0xBC, 0xB4, 0x50, 0x6A, 0xC9, 0x06, 0x01, 
   0x71, 0x45, 0x4B, 0x15, 0x7A, 0x81, 0x89, 0x5D, 0x98, 0xFD, 0x39, 0x73, 0x9B, 0x37, 0x04, 0x27, 
   0x32, 0x27, 0x61, 0x40, 0x97, 0xDD, 0x7B, 0x78, 0xC9, 0x5F, 0x4B, 0x78, 0x3D, 0x72, 0x6A, 0x4E, 
   0x78, 0x90, 0x69, 0x4F, 0x8B, 0x36, 0x38, 0x75, 0x36, 0x5B, 0xAE, 0x7F, 0x9F, 0xBD, 0x40, 0x80, 
   0x54, 0x28, 0x0B, 0x37, 0x3F, 0x1B, 0x89, 0x51, 0x74, 0xD5, 0x59, 0x7D, 0xA4, 0x65, 0x74, 0x87, 
   0x59, 0x6F, 0xA3, 0x24, 0x63, 0x8B, 0x35, 0x46, 0x78, 0x58, 0x63, 0x78, 0x59, 0x85, 0x85, 0x53, 
   0x62, 0xB4, 0x59, 0x4B, 0xB4, 0x47, 0x67, 0x96, 0x6E, 0x88, 0x60, 0x44, 0x37, 0x5F, 0x00, 0x20, 
   0x8D, 0x5D, 0x71, 0x78, 0x87, 0x7E, 0x80, 0x3D, 0x5C, 0xD5, 0x37, 0x56, 0x8F, 0x7A, 0x82, 0x54, 
   0x50, 0x63, 0x96, 0x27, 0x24, 0xAB, 0x2C, 0x2B, 0x2E, 0x13, 0x7A, 0x38, 0x51, 0x84, 0xF8, 0xCB, 
   0xCF, 0xF9, 0x80, 0x81, 0x6D, 0x00, 0x0B, 0x1A, 0x41, 0x2B, 0x9C, 0x89, 0x97, 0xC3, 0x16, 0x5E, 
   0x4B, 0x0A, 0x1F, 0x61, 0x61, 0x80, 0xC7, 0x6E, 0x6A, 0x82, 0x30, 0x54, 0x42, 0x6F, 0x7B, 0x8D, 
   0x63, 0x74, 0xBC, 0x29, 0x4F, 0x93, 0x2E, 0x1A, 0x58, 0x63, 0x3E, 0x63, 0x64, 0x97, 0x92, 0x47, 
   0x92, 0xBA, 0x46, 0x5D, 0x9A, 0x56, 0x38, 0x37, 0x33, 0x4E, 0x64, 0x33, 0x54, 0x98, 0x61, 0x6B, 
   0x8D, 0x5B, 0x5F, 0x5A, 0x1D, 0x52, 0x6A, 0x3A, 0x51, 0x76, 0x5E, 0x2B, 0x8E, 0x76, 0x66, 0xB0, 
   0x5A, 0x9A, 0x71, 0x4D, 0x55, 0x53, 0x4B, 0x48, 0x86, 0x28, 0x59, 0x7F, 0x50, 0x59, 0x5D, 0x52, 
   0x59, 0x6A, 0x65, 0x53, 0xB6, 0x70, 0x6A, 0xAF, 0x41, 0x4E, 0x5D, 0x2E, 0x53, 0x61, 0x50, 0x53, 
   0x7C, 0x4B, 0x59, 0x5A, 0x40, 0x59, 0x56, 0x4C, 0x59, 0x7B, 0x4D, 0x53, 0xC6, 0x5E, 0x53, 0xA3, 
   0x6F, 0x5E, 0x51, 0x40, 0x47, 0x61, 0x1D, 0x5E, 0x7D, 0x2A, 0x48, 0x6E, 0x9D, 0x5B, 0x80, 0x69, 
   0x7E, 0xB8, 0x2E, 0x77, 0x8E, 0x49, 0x53, 0x2A, 0x2C, 0x2B, 0x46, 0x44, 0x59, 0x8C, 0x51, 0x7C, 
   0x99, 0x69, 0x5A, 0x77, 0x5E, 0x59, 0x76, 0x41, 0x4D, 0x7A, 0x3A, 0x52, 0x57, 0x56, 0x64, 0x57, 
   0x5A, 0x5E, 0x7B, 0x27, 0x59, 0xB6, 0x50, 0x68, 0x88, 0x56, 0x73, 0x88, 0x18, 0x5B, 0x78, 0x4D, 
   0x65, 0x90, 0x97, 0x64, 0xAC, 0x5D, 0x4D, 0x9B, 0x07, 0x32, 0x57, 0x2F, 0x56, 0x87, 0x75, 0x91, 
   0xF4, 0x5F, 0x8B, 0xB5, 0x47, 0x57, 0x51, 0x62, 0x6C, 0x7C, 0x43, 0x6F, 0x9E, 0x26, 0x2F, 0x6D, 
   0x27, 0x1E, 0x91, 0x5C, 0x6B, 0xCB, 0x69, 0xBC, 0x8C, 0x3C, 0x5A, 0x6E, 0x58, 0x15, 0x94, 0x62, 
   0x65, 0x7E, 0x34, 0xA5, 0x95, 0x50, 0x65, 0xAB, 0x5C, 0x4C, 0x78, 0x57, 0x45, 0x6C, 0x4B, 0x50, 
   0x8E, 0x3F, 0x61, 0x8E, 0x3F, 0x68, 0xA4, 0x40, 0x4C, 0x76, 0x6E, 0x64, 0x4A, 0x62, 0x66, 0xB9, 
   0x17, 0x73, 0xCD, 0x45, 0x73, 0x94, 0x73, 0x56, 0x81, 0x67, 0x60, 0x87, 0x38, 0x7A, 0xAE, 0x21, 
   0x5C, 0xAD, 0x4F, 0x2D, 0x68, 0x5B, 0x49, 0x68, 0x39, 0x6D, 0xB4, 0x45, 0x69, 0x99, 0x5C, 0x63, 
   0x83, 0x50, 0x41, 0xC6, 0x4F, 0x80, 0x96, 0x33, 0x63, 0x77, 0x4F, 0x4B, 0x59, 0x5B, 0x50, 0x61, 
   0x4B, 0x29, 0xBF, 0x50, 0x76, 0xC6, 0x3F, 0x8F, 0x98, 0x3F, 0x62, 0x91, 0x61, 0x66, 0x6E, 0x44, 
   0x60, 0x7A, 0x39, 0x3E, 0xA9, 0x35, 0x71, 0xBA, 0x7F, 0x6C, 0x97, 0x62, 0x5A, 0x7F, 0x27, 0x59, 
   0x84, 0x3C, 0x75, 0x72, 0x31, 0x57, 0x73, 0x28, 0x40, 0xCF, 0x74, 0x53, 0xB8, 0x87, 0x82, 0x72, 
   0x47, 0x7C, 0x61, 0x3A, 0x64, 0xA0, 0x44, 0x5D, 0xB7, 0x2D, 0x3F, 0x6D, 0x4B, 0x19, 0x62, 0x63, 
   0x6C, 0xAD, 0x63, 0xB8, 0xB4, 0x40, 0x85, 0x8B, 0x4A, 0x43, 0x63, 0x38, 0x04, 0xA7, 0x2E, 0x45, 
   0x9C, 0x64, 0xCB, 0x7F, 0x92, 0xA8, 0xBC, 0x41, 0x21, 0x91, 0x1D, 0x0E, 0x30, 0x23, 0x6F, 0x76, 
   0x5F, 0x88, 0xD4, 0x95, 0x78, 0xB3, 0x5C, 0x55, 0x89, 0x17, 0x33, 0x92, 0x50, 0x62, 0x75, 0x62, 
   0x7B, 0x6F, 0x47, 0x45, 0x87, 0x58, 0x85, 0xAA, 0x96, 0xD9, 0xB5, 0x65, 0x72, 0xA7, 0x16, 0x00, 
   0x75, 0x09, 0x20, 0x55, 0x5A, 0x55, 0x54, 0x8F, 0x8C, 0x8E, 0x39, 0x55, 0xA0, 0x00, 0x39, 0x63, 
   0x75, 0x84, 0x86, 0xCB, 0x9F, 0xDA, 0x45, 0x41, 0x7C, 0x00, 0x1C, 0x1E, 0x41, 0x54, 0x8A, 0x8C, 
   0x82, 0xDA, 0x1B, 0x55, 0x5C, 0x32, 0x50, 0x23, 0x82, 0x72, 0x97, 0x4E, 0x50, 0xD7, 0x2B, 0x76, 
   0xA8, 0x36, 0x52, 0x28, 0x2C, 0x00, 0x33, 0x45, 0x4F, 0x9C, 0x90, 0xC3, 0xC6, 0x56, 0x73, 0x7B, 
   0x09, 0x26, 0x69, 0x30, 0x4C, 0x79, 0x57, 0x3B, 0x74, 0x3B, 0x4E, 0x85, 0x25, 0x93, 0x8B, 0x5F, 
   0x6B, 0x69, 0x5A, 0x27, 0x4E, 0x60, 0x6C, 0xA6, 0x3D, 0x83, 0xD9, 0x47, 0x65, 0x9D, 0x4B, 0x40, 
   0x17, 0x18, 0x1D, 0x49, 0x35, 0x4C, 0xA1, 0x54, 0x7C, 0xA8, 0x77, 0x7D, 0x8C, 0x59, 0x6A, 0x69, 
   0x19, 0x35, 0x79, 0x13, 0x23, 0x75, 0x5A, 0x42, 0x6C, 0x68, 0x6D, 0x86, 0x5D, 0x6B, 0xA5, 0x3A, 
   0x93, 0xAC, 0x39, 0x81, 0xA4, 0x56, 0x29, 0x68, 0x56, 0x50, 0x6C, 0x3F, 0x77, 0x6C, 0x55, 0x66, 
   0x78, 0x49, 0x43, 0x9B, 0x1C, 0x48, 0x90, 0x40, 0x4F, 0x6E, 0x85, 0x72, 0x9B, 0x6D, 0x82, 0x89, 
   0x1B, 0x3C, 0x56, 0x1A, 0x20, 0x79, 0x54, 0x66, 0x97, 0x4F, 0x7F, 0x82, 0x5B, 0x58, 0x78, 0x45, 
   0x54, 0xA1, 0x46, 0x77, 0x85, 0x74, 0x77, 0x7B, 0x57, 0x64, 0xD0, 0x3E, 0x56, 0x9F, 0x1B, 0x1C, 
   0x0E, 0x28, 0x35, 0x48, 0x74, 0x9E, 0xD4, 0x8C, 0x99, 0xB4, 0x52, 0x3C, 0x6F, 0x39, 0x3A, 0x7F, 
   0x38, 0x5C, 0x8F, 0x55, 0x5D, 0x57, 0x34, 0x64, 0x82, 0x2B, 0x5B, 0xCE, 0x77, 0x74, 0xAC, 0x83, 
   0x92, 0x61, 0x32, 0x69, 0x82, 0x3B, 0x67, 0xB4, 0x4B, 0x60, 0x8B, 0x2E, 0x48, 0x67, 0x56, 0x74, 
   0x98, 0x61, 0x6C, 0x5A, 0x0C, 0x00, 0x61, 0x36, 0x35, 0xA8, 0xA3, 0x9F, 0xD7, 0x5F, 0x7F, 0x8C, 
   0x2B, 0x4C, 0x56, 0x46, 0x51, 0x6C, 0x4D, 0x68, 0x84, 0x4E, 0x58, 0x8C, 0x6A, 0x64, 0xBA, 0x59, 
   0x8B, 0x86, 0x47, 0x6E, 0x80, 0x51, 0x44, 0x96, 0x39, 0x4E, 0x95, 0x1D, 0x6B, 0x6C, 0x4C, 0x56, 
   0x73, 0x75, 0x89, 0xB8, 0x5E, 0x71, 0xB7, 0x46, 0x1B, 0x4A, 0x24, 0x49, 0x68, 0x53, 0x84, 0xF1, 
   0x9D, 0x95, 0xAA, 0x4B, 0x71, 0x29, 0x00, 0x04, 0x3F, 0x28, 0x2D, 0x9D, 0x71, 0xA8, 0xA1, 0x64, 
   0x55, 0x9D, 0x87, 0x61, 0x9D, 0xA1, 0xD1, 0xAC, 0x14, 0x88, 0x80, 0x00, 0x00, 0x6C, 0x6B, 0x2E, 
   0x4E, 0x55, 0xA7, 0x78, 0x28, 0x70, 0xCE, 0x3A, 0x59, 0x9A, 0x64, 0x59, 0x27, 0x5A, 0x60, 0x66, 
   0x65, 0x87, 0xE0, 0x68, 0x8B, 0xBD, 0x16, 0x38, 0x3D, 0x0B, 0x00, 0x36, 0x6F, 0x51, 0xAF, 0x9E, 
   0xCB, 0xBA, 0x52, 0x98, 0x73, 0x28, 0x3A, 0x64, 0x2C, 0x2D, 0x41, 0x34, 0x50, 0x5F, 0x64, 0x6D, 
   0x9B, 0xA8, 0x8E, 0xDB, 0x29, 0x53, 0x78, 0x00, 0x19, 0x26, 0x4C, 0x4D, 0x81, 0x82, 0x6B, 0x73, 
   0x72, 0x78, 0xA7, 0x64, 0x67, 0xAC, 0x17, 0x4F, 0x5F, 0x1C, 0x4E, 0x46, 0x5B, 0x59, 0x7A, 0x46, 
   0x59, 0x8C, 0x53, 0x53, 0x93, 0x65, 0x65, 0x7C, 0x6F, 0x5A, 0x7B, 0x18, 0x54, 0x74, 0x3A, 0x65, 
   0x73, 0x6E, 0x4E, 0x67, 0x41, 0x53, 0x58, 0x3B, 0x4E, 0x9E, 0x63, 0x65, 0xAF, 0x41, 0x6A, 0x75, 
   0x3B, 0x4E, 0x63, 0x58, 0x4E, 0x68, 0x3B, 0x54, 0x74, 0x3B, 0x50, 0x80, 0x47, 0x6D, 0x7B, 0x74, 
   0x83, 0x7A, 0x45, 0x43, 0x9A, 0x0B, 0x2B, 0x5F, 0x4F, 0x59, 0x41, 0x5C, 0x71, 0x86, 0x41, 0x54, 
   0x82, 0x58, 0x59, 0x82, 0x58, 0x42, 0x7B, 0x46, 0x64, 0x4D, 0x67, 0x5E, 0x6A, 0x4A, 0x59, 0x92, 
   0x16, 0x53, 0x82, 0x77, 0x59, 0x71, 0x34, 0x37, 0x80, 0x1E, 0x1C, 0x70, 0x64, 0x94, 0xD6, 0x8C, 
   0xB6, 0xC2, 0x52, 0x3D, 0x2B, 0x13, 0x03, 0x48, 0x51, 0x60, 0xA1, 0x5D, 0xAC, 0xF4, 0x52, 0x7A, 
   0xBA, 0x4D, 0x3A, 0x62, 0x58, 0x56, 0x6C, 0x5C, 0x88, 0x89, 0x38, 0x5F, 0xA2, 0x0A, 0x14, 0xAE, 
   0x34, 0x55, 0x91, 0x80, 0xAC, 0x58, 0x5A, 0x84, 0xCF, 0x5E, 0x31, 0xC8, 0x57, 0x34, 0x48, 0x22, 
   0x35, 0x4C, 0x4F, 0x82, 0x8D, 0x50, 0x9A, 0xB7, 0x45, 0x82, 0xBE, 0x50, 0x4B, 0x7E, 0x3F, 0x38, 
   0x83, 0x3F, 0x2D, 0xB4, 0x40, 0x57, 0x53, 0x63, 0x82, 0x4E, 0x6E, 0x8E, 0xBD, 0x3F, 0x4E, 0xCB, 
   0x06, 0x27, 0x76, 0x57, 0x6D, 0x7C, 0xA1, 0x9C, 0xBA, 0x4B, 0x84, 0xB9, 0x05, 0x58, 0x57, 0x59, 
   0x32, 0x6D, 0x49, 0x20, 0xB7, 0x38, 0x4F, 0x7F, 0x44, 0x84, 0x6A, 0x62, 0x5E, 0xC7, 0x57, 0x58, 
   0xD2, 0x4B, 0x6E, 0x5E, 0x56, 0x52, 0x8F, 0x44, 0x79, 0x99, 0x2D, 0x62, 0x5A, 0x44, 0x3B, 0x94, 
   0x61, 0x5E, 0xB8, 0x3F, 0x60, 0x80, 0x34, 0x7D, 0x86, 0x78, 0x88, 0xA8, 0x4A, 0x49, 0xA1, 0x21, 
   0x32, 0x73, 0x3F, 0x77, 0x8A, 0x63, 0x72, 0xA1, 0x64, 0x56, 0x7A, 0x5D, 0x66, 0x80, 0x61, 0x6B, 
   0xBF, 0x31, 0x58, 0xAC, 0x00, 0x3B, 0x44, 0x61, 0x47, 0x6D, 0x8B, 0x7B, 0xDA, 0x59, 0x70, 0xB8, 
   0x41, 0x53, 0x78, 0x56, 0x52, 0x60, 0x33, 0x46, 0x78, 0x2D, 0x5D, 0xB3, 0x5C, 0x5E, 0xC4, 0x5D, 
   0x4E, 0x8A, 0x4C, 0x61, 0x4B, 0x56, 0x94, 0x90, 0x33, 0x44, 0xC4, 0x1D, 0x1D, 0x9D, 0x5D, 0x86, 
   0x74, 0x92, 0xB5, 0xA7, 0x47, 0x85, 0xBC, 0x3A, 0x20, 0x7A, 0x29, 0x24, 0x5C, 0x50, 0x57, 0x62, 
   0x4B, 0x75, 0x82, 0x09, 0x3E, 0xC3, 0x46, 0x46, 0xA2, 0xB0, 0xC5, 0x96, 0x8E, 0x87, 0xB1, 0x35, 
   0x03, 0x70, 0x0B, 0x4E, 0x63, 0x65, 0xD1, 0x9B, 0x70, 0x7F, 0xAC, 0x3B, 0x20, 0x6C, 0x34, 0x56, 
   0x93, 0x44, 0x5B, 0xA8, 0x34, 0x1D, 0x7E, 0x5C, 0x6B, 0x4B, 0x67, 0xC2, 0xA0, 0x2D, 0x66, 0xAB, 
   0x06, 0x00, 0x55, 0x51, 0x4E, 0x55, 0x9D, 0xA5, 0xB6, 0x5D, 0x82, 0x9A, 0x1C, 0x46, 0x76, 0x2B, 
   0x5A, 0xAC, 0x53, 0x47, 0x5A, 0x32, 0x0A, 0x00, 0x55, 0x6D, 0xA3, 0x82, 0xCF, 0xFF, 0x36, 0x5B, 
   0x82, 0x02, 0x00, 0x2F, 0x36, 0x41, 0x6D, 0x72, 0x5B, 0x98, 0x6F, 0x96, 0xAA, 0x8A, 0x8A, 0x8D, 
   0x38, 0x27, 0x53, 0x1F, 0x2C, 0x6F, 0x57, 0x97, 0xAE, 0x57, 0x52, 0x90, 0x1A, 0x00, 0x35, 0x28, 
   0x67, 0x65, 0xAC, 0xD0, 0xE5, 0x72, 0x69, 0xAC, 0x00, 0x32, 0x4E, 0x28, 0x4C, 0x84, 0x5B, 0x56, 
   0x93, 0x28, 0x44, 0x1B, 0x25, 0x1E, 0x40, 0x6C, 0x48, 0xDE, 0x73, 0xA0, 0xDF, 0x78, 0x89, 0x54, 
   0x2B, 0x31, 0x1A, 0x03, 0x25, 0xA4, 0x3E, 0x4F, 0xD3, 0x95, 0x7F, 0x4B, 0x63, 0x6A, 0x30, 0x1E, 
   0x54, 0xB7, 0x45, 0x70, 0xFD, 0x7E, 0x7A, 0x9F, 0x39, 0x5C, 0x34, 0x33, 0x32, 0x43, 0x4A, 0x5A, 
   0x9A, 0x56, 0x55, 0x9C, 0x45, 0x61, 0x8B, 0x6D, 0x6B, 0xA0, 0x4F, 0x4E, 0x66, 0x32, 0x43, 0x61, 
   0x37, 0x54, 0x9B, 0x43, 0x60, 0x91, 0x55, 0x4A, 0x70, 0x55, 0x56, 0x77, 0x34, 0x4D, 0xA2, 0x46, 
   0x7D, 0x9E, 0x74, 0x9A, 0x93, 0x6E, 0x6A, 0xCA, 0x2D, 0x28, 0x99, 0x27, 0x33, 0x15, 0x60, 0x79, 
   0x88, 0x4A, 0x86, 0xDA, 0x2E, 0x59, 0x85, 0x58, 0x3D, 0x58, 0x75, 0x65, 0xA4, 0x47, 0x99, 0xD7, 
   0x50, 0x7A, 0x97, 0x32, 0x01, 0x23, 0x0A, 0x29, 0x5D, 0x51, 0x82, 0xC2, 0x82, 0x6F, 0xDC, 0x68, 
   0x6B, 0xA3, 0x61, 0x93, 0x85, 0x59, 0x7A, 0xA4, 0x2E, 0x4E, 0x6D, 0x33, 0x2F, 0x66, 0x4A, 0x34, 
   0x7E, 0x3A, 0x7A, 0xBD, 0x6F, 0x81, 0x96, 0x64, 0x42, 0x52, 0x30, 0x4E, 0xAD, 0x58, 0x83, 0xA6, 
   0x47, 0x57, 0x67, 0x37, 0x5D, 0x5C, 0x65, 0x6F, 0x8C, 0x65, 0x69, 0xBB, 0x3C, 0x64, 0x92, 0x30, 
   0x64, 0x74, 0x63, 0x85, 0x6D, 0x4B, 0x6C, 0x7F, 0x17, 0x15, 0xA7, 0x41, 0x44, 0x97, 0x92, 0xCE, 
   0x97, 0x64, 0x5C, 0xAC, 0x1E, 0x32, 0x5A, 0x34, 0x58, 0x3D, 0x4C, 0x43, 0xAC, 0x59, 0x57, 0xDB, 
   0x48, 0x7B, 0x7E, 0x75, 0x8C, 0x48, 0x4D, 0x73, 0xA2, 0x2A, 0x43, 0xA8, 0x3B, 0x27, 0x37, 0x44, 
   0x51, 0x56, 0x69, 0x99, 0xE8, 0xAD, 0xCD, 0xFF, 0x5F, 0x6E, 0x6A, 0x00, 0x0E, 0x0B, 0x38, 0x28, 
   0x87, 0x88, 0x68, 0xBC, 0x2E, 0x75, 0x5C, 0x35, 0x59, 0x6E, 0x64, 0x54, 0xC3, 0x5F, 0x65, 0x73, 
   0x5F, 0x65, 0x6D, 0x69, 0x76, 0x84, 0x34, 0x63, 0x90, 0x11, 0x50, 0x94, 0x4B, 0x2D, 0x86, 0x7A, 
   0x45, 0x68, 0x63, 0x8B, 0x8E, 0x2E, 0x75, 0x88, 0x12, 0x3C, 0x54, 0x63, 0x69, 0x55, 0x80, 0x7F, 
   0x96, 0x37, 0x50, 0xBA, 0x74, 0x49, 0xAE, 0x4C, 0x6B, 0x6C, 0x08, 0x5A, 0x2D, 0x5E, 0x43, 0x78, 
   0x81, 0x4F, 0xCA, 0x3C, 0x72, 0xA8, 0x4C, 0x72, 0x78, 0x4B, 0x44, 0x43, 0x2E, 0x43, 0x80, 0x45, 
   0x53, 0x8B, 0x63, 0x59, 0x58, 0x4D, 0x3D, 0x64, 0x3C, 0x5B, 0x8D, 0x64, 0x7D, 0x99, 0x4D, 0x44, 
   0x71, 0x2B, 0x54, 0x54, 0x5E, 0x54, 0xB5, 0x69, 0x54, 0x92, 0x2F, 0x65, 0x41, 0x45, 0x4E, 0x5D, 
   0x3B, 0x5A, 0x8C, 0x5A, 0x50, 0x88, 0x7D, 0x4B, 0x77, 0x5F, 0x74, 0x88, 0x1F, 0x8A, 0x9D, 0x35, 
   0x49, 0x62, 0x68, 0x3C, 0x50, 0x63, 0x4E, 0xAB, 0x24, 0x66, 0x83, 0x63, 0x77, 0x54, 0x68, 0x5A, 
   0x6F, 0x35, 0x3C, 0x81, 0x40, 0x5E, 0x6B, 0x67, 0x59, 0x7C, 0x39, 0x5E, 0x88, 0x2D, 0x59, 0x8E, 
   0x3F, 0x70, 0x6B, 0x67, 0x48, 0x59, 0x3C, 0x5A, 0xA7, 0x2C, 0x5A, 0xB8, 0x8C, 0x60, 0xBA, 0x58, 
   0x60, 0x88, 0x00, 0x5A, 0x47, 0x46, 0x4A, 0x37, 0x80, 0x78, 0xCE, 0x58, 0x6D, 0xE6, 0x1E, 0x56, 
   0x56, 0x4B, 0x61, 0x4E, 0x67, 0x77, 0xA5, 0x45, 0x60, 0x80, 0x35, 0x28, 0xB0, 0x58, 0x6E, 0xD2, 
   0x59, 0x9D, 0x75, 0x43, 0x7A, 0x67, 0x75, 0x4F, 0x9F, 0x5D, 0x5E, 0xA4, 0x2E, 0x68, 0x80, 0x38, 
   0x34, 0x62, 0x38, 0x35, 0x69, 0x61, 0x76, 0x93, 0x5B, 0x9E, 0xBE, 0x39, 0x5E, 0xBE, 0x39, 0x2E, 
   0x9F, 0x40, 0x33, 0x64, 0x63, 0x5E, 0x5F, 0x6E, 0x99, 0xBC, 0x34, 0x77, 0xAC, 0x17, 0x42, 0x7F, 
   0x84, 0x4D, 0x91, 0x62, 0x4F, 0x9D, 0x12, 0x95, 0xA2, 0x44, 0x8F, 0xA1, 0x6C, 0x53, 0x78, 0x38, 
   0x33, 0x5B, 0x32, 0x54, 0x95, 0x49, 0x5B, 0xA8, 0x4A, 0x4B, 0x81, 0x56, 0x63, 0xB5, 0x50, 0x80, 
   0xB4, 0x34, 0x5D, 0x84, 0x45, 0x45, 0x66, 0x62, 0x3F, 0x72, 0x50, 0x52, 0xBD, 0x4A, 0x70, 0x9B, 
   0x38, 0x6C, 0x67, 0x3F, 0x60, 0x8F, 0x78, 0x48, 0x95, 0x3F, 0x53, 0x9C, 0x38, 0x5F, 0x9C, 0x33, 
   0x60, 0x9B, 0x4B, 0x61, 0x7D, 0x68, 0x6D, 0x61, 0x3B, 0x67, 0x8A, 0x4C, 0x78, 0xCB, 0x67, 0x60, 
   0x98, 0x22, 0x48, 0xA8, 0x4F, 0x4D, 0x8F, 0x61, 0x7B, 0x5A, 0x34, 0x76, 0x61, 0x4B, 0x5E, 0xD4, 
   0x67, 0x46, 0xBD, 0x2E, 0x62, 0x4F, 0x39, 0x47, 0x5B, 0x50, 0x5F, 0xD5, 0x5C, 0x92, 0xC4, 0x57, 
   0x6F, 0x7E, 0x4B, 0x25, 0x61, 0x39, 0x2C, 0x84, 0x29, 0x7A, 0xB3, 0x63, 0x98, 0x9D, 0x6F, 0x92, 
   0x96, 0x46, 0x40, 0xB1, 0x1E, 0x28, 0x65, 0x46, 0x8E, 0x75, 0x91, 0x92, 0xAD, 0x62, 0x3B, 0x7F, 
   0x00, 0x0D, 0x4C, 0x00, 0x49, 0x8E, 0x5D, 0x9D, 0xC4, 0xBD, 0x89, 0xB5, 0x90, 0x61, 0x92, 0x48, 
   0x71, 0xB1, 0x4E, 0x8A, 0x9B, 0x22, 0x5F, 0x53, 0x05, 0x02, 0x5D, 0x50, 0x52, 0x80, 0x69, 0xA3, 
   0xA4, 0x7B, 0x5F, 0x99, 0x41, 0x36, 0x98, 0x1E, 0x54, 0x91, 0x5C, 0x83, 0x62, 0x94, 0x93, 0xA4, 
   0x2C, 0x42, 0x7A, 0x00, 0x10, 0x26, 0x6F, 0x89, 0x7E, 0xE3, 0xD4, 0xFF, 0x42, 0x5F, 0x99, 0x00, 
   0x10, 0x00, 0x3D, 0x25, 0x50, 0x70, 0x5A, 0xD4, 0x32, 0x7E, 0x6F, 0x42, 0x73, 0x48, 0x6A, 0x50, 
   0x98, 0x31, 0x3E, 0x9E, 0x31, 0x5B, 0x82, 0x4E, 0x88, 0x7B, 0x44, 0x22, 0x76, 0x40, 0x3F, 0x7C, 
   0x89, 0x9B, 0x93, 0x49, 0x6D, 0x93, 0x13, 0x54, 0x86, 0x2A, 0x52, 0x4C, 0x60, 0x20, 0x59, 0x67, 
   0x56, 0x9B, 0x57, 0xA8, 0xD5, 0x5B, 0x90, 0x9F, 0x6A, 0x43, 0x40, 0x28, 0x23, 0x60, 0x05, 0x50, 
   0x83, 0x51, 0x5D, 0x90, 0x5F, 0x5E, 0x5F, 0x4A, 0x4E, 0x71, 0x56, 0x54, 0xA6, 0x45, 0x67, 0x90, 
   0x4B, 0x5D, 0x79, 0x61, 0x69, 0x72, 0x3E, 0x5D, 0x83, 0x1C, 0x4B, 0x78, 0x50, 0x68, 0x6E, 0x6E, 
   0x47, 0x76, 0x51, 0x64, 0xA6, 0x45, 0x8C, 0xC8, 0x3F, 0x68, 0x7C, 0x4A, 0x32, 0x6E, 0x39, 0x27, 
   0x62, 0x51, 0x7F, 0x8A, 0x95, 0xB2, 0xC9, 0x5A, 0x49, 0x78, 0x03, 0x0E, 0x55, 0x14, 0x48, 0x6D, 
   0x66, 0x73, 0x91, 0x84, 0x8B, 0x8C, 0x3F, 0x68, 0x71, 0x11, 0x0D, 0x78, 0x45, 0x6A, 0x9D, 0x7A, 
   0xA5, 0xB1, 0x51, 0x6B, 0xD7, 0x2D, 0x51, 0xA0, 0x27, 0x22, 0x03, 0x4F, 0x3A, 0x5A, 0x56, 0x91, 
   0xE0, 0x66, 0x86, 0xBA, 0x21, 0x3C, 0x41, 0x17, 0x26, 0x58, 0x5E, 0x83, 0xBB, 0x98, 0xA0, 0x9A, 
   0x58, 0x5A, 0x99, 0x06, 0x47, 0xA2, 0x3E, 0x35, 0x40, 0x5B, 0x42, 0x59, 0x30, 0x7E, 0xA8, 0x60, 
   0x87, 0xEF, 0xA0, 0x7C, 0xB5, 0x49, 0x7A, 0x66, 0x2F, 0x60, 0x6D, 0x4F, 0x40, 0x61, 0x1D, 0x1E, 
   0x96, 0x41, 0x60, 0xA3, 0x8C, 0xBD, 0xAE, 0x69, 0x83, 0x8F, 0x07, 0x09, 0x44, 0x1E, 0x26, 0x6B, 
   0x7B, 0x94, 0xAC, 0x6B, 0x8B, 0x81, 0x54, 0x5E, 0xB0, 0x4E, 0x69, 0xAA, 0x42, 0x69, 0x7B, 0x58, 
   0x5D, 0x74, 0x57, 0x67, 0x8A, 0x23, 0x5B, 0x84, 0x3B, 0x56, 0x7A, 0x92, 0x67, 0xB4, 0x53, 0x5C, 
   0xD0, 0x2F, 0x78, 0x61, 0x34, 0x3E, 0x38, 0x29, 0x43, 0xAF, 0x68, 0x7D, 0xB6, 0x6F, 0x63, 0x56, 
   0x15, 0x48, 0x74, 0x33, 0x8E, 0xE6, 0xCE, 0xC0, 0xA0, 0x66, 0x5B, 0x3C, 0x00, 0x00, 0x58, 0x40, 
   0x54, 0x98, 0x6F, 0xAB, 0xB7, 0x27, 0x36, 0x95, 0x77, 0x52, 0x7D, 0x92, 0xC8, 0xA8, 0x0C, 0x64, 
   0x6D, 0x0B, 0x00, 0x6C, 0x84, 0x4B, 0x6D, 0x58, 0x86, 0x80, 0x30, 0x60, 0xD7, 0x58, 0x70, 0xB8, 
   0x4D, 0x3D, 0x1D, 0x3C, 0x38, 0x3A, 0x64, 0xA5, 0xFF, 0x79, 0xA3, 0xF1, 0x16, 0x49, 0x3C, 0x0A, 
   0x00, 0x38, 0x56, 0x2D, 0x6B, 0x5E, 0x92, 0x74, 0x5F, 0xA6, 0xA3, 0x5E, 0x60, 0xA2, 0x2A, 0x4B, 
   0x56, 0x24, 0x1C, 0x46, 0x43, 0x5C, 0xAE, 0x93, 0xA1, 0x9D, 0x5E, 0x61, 0x69, 0x13, 0x38, 0x73, 
   0x35, 0x31, 0x6D, 0x52, 0x4F, 0x85, 0x70, 0x56, 0x9D, 0x59, 0x84, 0xA7, 0x4C, 0x61, 0x60, 0x34, 
   0x54, 0x63, 0x3F, 0x3D, 0x57, 0x35, 0x5B, 0x64, 0x59, 0x89, 0x99, 0x71, 0x45, 0x96, 0x4F, 0x67, 
   0x75, 0x3D, 0x5C, 0xAD, 0x65, 0x61, 0x89, 0x64, 0x77, 0x42, 0x3A, 0x43, 0x35, 0x1E, 0x2C, 0x64, 
   0x4D, 0x4A, 0x8E, 0x60, 0x7A, 0x96, 0x78, 0x7B, 0xAD, 0x77, 0x80, 0x83, 0x4D, 0x50, 0x69, 0x1E, 
   0x2C, 0x50, 0x41, 0x43, 0x67, 0x87, 0x77, 0x8B, 0x6A, 0x67, 0xB8, 0x36, 0x5B, 0x66, 0x40, 0x5A, 
   0x36, 0x56, 0x48, 0x5E, 0x44, 0x70, 0x7C, 0x4A, 0x5E, 0x8F, 0x39, 0x47, 0x94, 0x40, 0x47, 0x6C, 
   0x73, 0x53, 0x6B, 0x41, 0x6A, 0x70, 0x79, 0x84, 0xCB, 0x9A, 0xA5, 0xFF, 0x31, 0x26, 0x5E, 0x00, 
   0x00, 0x33, 0x4C, 0x7E, 0x9F, 0x7B, 0xCA, 0xE4, 0x5E, 0x57, 0x88, 0x41, 0x21, 0x5F, 0x56, 0x54, 
   0x75, 0x3E, 0x92, 0x8D, 0x27, 0x3D, 0x73, 0x29, 0x1C, 0xC0, 0x65, 0x6F, 0xC2, 0x83, 0xB6, 0x7E, 
   0x6C, 0x93, 0xC5, 0x4E, 0x40, 0xAB, 0x35, 0x48, 0x48, 0x34, 0x69, 0x52, 0x56, 0x63, 0xB9, 0x5B, 
   0x79, 0xAE, 0x33, 0x3A, 0x63, 0x43, 0x3A, 0x58, 0x38, 0x69, 0x9E, 0x56, 0x81, 0xC1, 0x51, 0x5F, 
   0x99, 0x5D, 0x48, 0x3E, 0x68, 0x75, 0xA5, 0x2E, 0x58, 0xC8, 0x1D, 0x53, 0x72, 0x62, 0x64, 0x61, 
   0x73, 0x59, 0xA6, 0x34, 0x5F, 0xBD, 0x2D, 0x5F, 0x6D, 0x3F, 0x64, 0x72, 0x6D, 0x6A, 0xA0, 0x56, 
   0x58, 0xB2, 0x38, 0x5D, 0x5D, 0x43, 0x51, 0x9D, 0x60, 0x4B, 0xE1, 0x3E, 0x7F, 0x6E, 0x4A, 0x5D, 
   0x66, 0x4B, 0x56, 0x8E, 0x57, 0x55, 0x84, 0x4C, 0x34, 0xA1, 0x62, 0x48, 0xB3, 0x3F, 0x8F, 0x90, 
   0x11, 0x90, 0x7D, 0x71, 0x7C, 0x7C, 0x4A, 0x35, 0x8E, 0x33, 0x24, 0x89, 0x3F, 0x6F, 0x9B, 0x6D, 
   0x93, 0xAB, 0x5C, 0x56, 0x78, 0x35, 0x56, 0x61, 0x62, 0x78, 0xA0, 0x40, 0x66, 0xA8, 0x2A, 0x5A, 
   0x97, 0x74, 0x5A, 0x7B, 0x85, 0x77, 0xBE, 0x22, 0x6B, 0x9F, 0x20, 0x5E, 0x59, 0x3D, 0x51, 0x6B, 
   0x4A, 0x3F, 0xB1, 0x5C, 0x52, 0xA7, 0x5D, 0x70, 0x95, 0x51, 0x7C, 0x72, 0x34, 0x5F, 0x83, 0x4A, 
   0x52, 0x89, 0x3F, 0x3B, 0xB7, 0x35, 0x16, 0x7E, 0x69, 0xA3, 0x5C, 0x7B, 0xD8, 0xB2, 0x46, 0x58, 
   0xC8, 0x12, 0x05, 0x55, 0x4B, 0x49, 0x7B, 0x5D, 0x94, 0x98, 0x74, 0x88, 0x98, 0x35, 0x48, 0x97, 
   0x0D, 0x0F, 0x74, 0x6A, 0x71, 0x4D, 0x6D, 0x91, 0x8F, 0x3D, 0x3E, 0xCB, 0x7C, 0x8F, 0xBA, 0xAE, 
   0xEE, 0xBD, 0x5A, 0x6B, 0x8A, 0x00, 0x00, 0x46, 0x00, 0x37, 0x3F, 0x44, 0x8A, 0x79, 0x7B, 0x55, 
   0xA9, 0x66, 0x79, 0x8E, 0x65, 0x89, 0x9A, 0x46, 0x54, 0xAF, 0x39, 0x25, 0x89, 0x3F, 0x48, 0x31, 
   0x5B, 0x8E, 0x5E, 0x44, 0x7D, 0x9E, 0x01, 0x2D, 0x84, 0x4E, 0x6C, 0xA6, 0xBB, 0xA4, 0x93, 0x4E, 
   0x41, 0x4E, 0x17, 0x34, 0x6B, 0x59, 0x94, 0xD1, 0x5E, 0x54, 0x85, 0x03, 0x00, 0x24, 0x3D, 0x51, 
   0x5F, 0x9E, 0xC5, 0xD9, 0x4E, 0x80, 0xBD, 0x1A, 0x22, 0x54, 0x31, 0x2C, 0x48, 0x3E, 0x3F, 0x8E, 
   0x67, 0x97, 0xA0, 0x83, 0xB2, 0xBC, 0x15, 0x17, 0x49, 0x10, 0x16, 0x38, 0x7D, 0x94, 0xCE, 0x72, 
   0x73, 0xC9, 0x1C, 0x2E, 0x55, 0x37, 0x6B, 0x80, 0x86, 0x81, 0xA0, 0x35, 0x30, 0x33, 0x0D, 0x19, 
   0x47, 0x41, 0x7C, 0xCD, 0x70, 0x99, 0xD9, 0x49, 0x65, 0x33, 0x1C, 0x00, 0x17, 0x3A, 0x28, 0xC5, 
   0x75, 0x9E, 0xFF, 0x8B, 0xBD, 0x64, 0x3F, 0x60, 0x12, 0x00, 0x2F, 0xA0, 0x3E, 0x2E, 0xB3, 0x89, 
   0x78, 0x6F, 0x5C, 0x79, 0x4E, 0x29, 0x52, 0x9A, 0x50, 0x5D, 0xDA, 0x45, 0x4B, 0xA0, 0x40, 0x4B, 
   0x64, 0x72, 0x84, 0x7D, 0x60, 0x78, 0x7C, 0x1A, 0x49, 0x4F, 0x25, 0x3D, 0x84, 0x49, 0x55, 0xAD, 
   0x67, 0x74, 0x7C, 0x5C, 0x75, 0x82, 0x45, 0x58, 0x9A, 0x2F, 0x53, 0x8B, 0x5D, 0x5F, 0x76, 0x6E, 
   0x7A, 0xD6, 0x44, 0x51, 0xB1, 0x1C, 0x23, 0x21, 0x4A, 0x68, 0x4F, 0x72, 0x85, 0xCF, 0x50, 0x69, 
   0x98, 0x44, 0x30, 0x6B, 0x38, 0x53, 0x9E, 0x39, 0x7C, 0xB5, 0x41, 0x61, 0x77, 0x75, 0x61, 0x7C, 
   0x48, 0x56, 0x9F, 0x5E, 0x94, 0xC1, 0x57, 0x77, 0x98, 0x0B, 0x20, 0x42, 0x33, 0x43, 0x66, 0x57, 
   0x89, 0xB9, 0x43, 0x6E, 0xF3, 0x8D, 0x62, 0x85, 0x59, 0x6C, 0x4E, 0x0D, 0x43, 0x97, 0x4C, 0x60, 
   0x8C, 0x6F, 0x61, 0x8C, 0x47, 0x62, 0x9C, 0x3B, 0x84, 0xAC, 0x57, 0x71, 0x71, 0x2A, 0x1B, 0x32, 
   0x42, 0x43, 0x96, 0x87, 0x7E, 0xD7, 0x43, 0x74, 0x9F, 0x31, 0x4D, 0x7C, 0x5E, 0x74, 0x92, 0x5D, 
   0x84, 0x86, 0x13, 0x1D, 0x85, 0x3B, 0x40, 0x74, 0x92, 0xB3, 0x8B, 0x53, 0x7F, 0xAD, 0x41, 0x17, 
   0x79, 0x2F, 0x5B, 0x62, 0x63, 0x89, 0xB1, 0x68, 0x5C, 0xA4, 0x2F, 0x51, 0x31, 0x1F, 0x74, 0x66, 
   0x5F, 0x5F, 0xB9, 0x61, 0x93, 0xC0, 0x52, 0x4E, 0x7A, 0x8F, 0x5D, 0x6C, 0x75, 0x8E, 0xA9, 0x11, 
   0x47, 0x9C, 0x00, 0x02, 0x45, 0x45, 0x54, 0x36, 0x6B, 0x9C, 0xCD, 0x8E, 0x7B, 0xE4, 0x59, 0x84, 
   0x69, 0x00, 0x48, 0x29, 0x3A, 0x19, 0x90, 0x7F, 0x5E, 0xC4, 0x63, 0x98, 0x7B, 0x23, 0x4E, 0x69, 
   0x2F, 0x43, 0x86, 0x53, 0x78, 0x80, 0x81, 0x72, 0x96, 0x69, 0x7B, 0x9A, 0x4A, 0x61, 0x80, 0x09, 
   0x1A, 0x4A, 0x00, 0x00, 0x2F, 0x8D, 0x64, 0x9E, 0xB7, 0xD9, 0xDF, 0x38, 0x7D, 0x99, 0x00, 0x1A, 
   0x4B, 0x47, 0x46, 0x55, 0x6B, 0x79, 0x58, 0x55, 0x57, 0xB1, 0x87, 0x6D, 0xD8, 0x2F, 0x78, 0x63, 
   0x0C, 0x33, 0x1C, 0x4C, 0x33, 0x51, 0x65, 0x6D, 0xBB, 0x71, 0x85, 0xC7, 0x5E, 0x7F, 0x96, 0x45, 
   0x3A, 0x21, 0x0B, 0x45, 0x69, 0x50, 0x83, 0x97, 0x69, 0x4A, 0x55, 0x44, 0x4A, 0x75, 0x67, 0x62, 
   0xD2, 0x72, 0x74, 0x9E, 0x3D, 0x68, 0x4C, 0x30, 0x67, 0x72, 0x3B, 0x33, 0x82, 0x42, 0x3A, 0x7E, 
   0x48, 0x58, 0x74, 0x5A, 0x87, 0x80, 0x54, 0x98, 0xAD, 0x54, 0x5D, 0xA5, 0x53, 0x27, 0x4E, 0x3B, 
   0x54, 0x58, 0x19, 0x61, 0x7A, 0x4E, 0x68, 0x86, 0x81, 0x67, 0x80, 0x4D, 0x3E, 0xA7, 0x23, 0x44, 
   0x6C, 0x55, 0x7C, 0x32, 0x4E, 0x53, 0x99, 0x16, 0x42, 0x9A, 0x62, 0x5E, 0x66, 0x7A, 0x53, 0x77, 
   0x3B, 0x4E, 0x6C, 0x4C, 0x6A, 0x83, 0x73, 0x65, 0xAF, 0x8E, 0x6B, 0xC5, 0x1B, 0x38, 0x6F, 0x20, 
   0x4B, 0x5D, 0x7B, 0x7A, 0xCA, 0x64, 0x8B, 0xD9, 0x1F, 0x73, 0x53, 0x5C, 0x55, 0x3A, 0x61, 0x53, 
   0x90, 0x32, 0x41, 0x9F, 0x00, 0x3D, 0x96, 0x46, 0x51, 0x92, 0x77, 0xA4, 0x93, 0x5D, 0x8E, 0xAF, 
   0x61, 0x53, 0x9D, 0x64, 0x66, 0x8F, 0x17, 0x3C, 0x86, 0x33, 0x35, 0x5D, 0x56, 0x63, 0x85, 0x62, 
   0x7A, 0xB4, 0x61, 0x73, 0xAF, 0x21, 0x27, 0x7A, 0x27, 0x11, 0x6D, 0x56, 0x6A, 0x68, 0x63, 0x9B, 
   0x70, 0x63, 0xA6, 0xE4, 0x40, 0x48, 0xB2, 0x2E, 0x18, 0x5B, 0x62, 0x46, 0x99, 0x79, 0x81, 0x99, 
   0x29, 0x8D, 0x87, 0x34, 0x69, 0x70, 0x78, 0x2E, 0x87, 0x56, 0x23, 0x83, 0x23, 0x64, 0x95, 0x62, 
   0xAA, 0xA2, 0x56, 0x5A, 0x9D, 0x3E, 0x58, 0x91, 0x48, 0x6D, 0x8F, 0x2B, 0x45, 0x98, 0x38, 0x50, 
   0x5F, 0x6D, 0x6C, 0x6C, 0x4C, 0x2F, 0xC9, 0x57, 0x75, 0xA8, 0x40, 0x71, 0x74, 0x5C, 0x67, 0x90, 
   0x72, 0x9A, 0xB6, 0x33, 0x49, 0x6B, 0x2C, 0x47, 0x76, 0x4A, 0x5D, 0xA4, 0x67, 0x47, 0x99, 0x45, 
   0x54, 0x61, 0x50, 0x8E, 0xB7, 0x56, 0x66, 0xB2, 0x34, 0x5A, 0x6D, 0x3A, 0x49, 0x6D, 0x4D, 0x55, 
   0xA1, 0x75, 0x78, 0xA8, 0x4D, 0x7D, 0x8B, 0x50, 0x5F, 0xA6, 0x3D, 0x40, 0x98, 0x1A, 0x3F, 0x36, 
   0x32, 0x51, 0x55, 0x5C, 0x4D, 0xF7, 0x86, 0x99, 0xDA, 0x58, 0x82, 0x55, 0x3F, 0x3C, 0x3D, 0x1C, 
   0x30, 0x9F, 0x34, 0x49, 0xBE, 0x6F, 0x95, 0xA1, 0x70, 0x80, 0x94, 0x47, 0x5D, 0x7C, 0x2F, 0x4B, 
   0x70, 0x40, 0x61, 0x92, 0x57, 0x71, 0x99, 0x62, 0x5A, 0x99, 0x18, 0x33, 0x82, 0x20, 0x67, 0x8D, 
   0x94, 0xAC, 0x98, 0x78, 0x40, 0x86, 0x39, 0x1E, 0x54, 0x38, 0x86, 0x9A, 0x4F, 0xB9, 0xDF, 0x66, 
   0x66, 0x99, 0x65, 0x29, 0x68, 0x46, 0x3D, 0x87, 0x39, 0x3D, 0x85, 0x39, 0x34, 0x62, 0x46, 0x5A, 
   0x6E, 0x5F, 0xA8, 0x9E, 0x6B, 0xA8, 0xC2, 0x6F, 0x55, 0xA4, 0x1D, 0x13, 0x8A, 0x0B, 0x1F, 0x3E, 
   0x68, 0x7D, 0x55, 0xAD, 0xC2, 0xD3, 0x35, 0x49, 0xC0, 0x00, 0x00, 0x04, 0x71, 0x54, 0x3F, 0xD9, 
   0xB6, 0xFF, 0x53, 0x93, 0xCA, 0x00, 0x2F, 0x21, 0x2A, 0x2C, 0x6E, 0x5E, 0x44, 0x97, 0x3D, 0x69, 
   0x65, 0x49, 0x92, 0x94, 0x70, 0x8C, 0xB1, 0x26, 0x24, 0x66, 0x36, 0x3A, 0x66, 0x48, 0x95, 0x94, 
   0x43, 0x56, 0xA5, 0x2E, 0x34, 0x56, 0x6E, 0x7F, 0x6E, 0x6E, 0x58, 0xB9, 0x34, 0x5E, 0xBF, 0x49, 
   0x8E, 0x8E, 0x58, 0x30, 0x46, 0x30, 0x0D, 0x55, 0x25, 0x70, 0x7E, 0x59, 0x8E, 0x7A, 0x77, 0x45, 
   0x7D, 0x3E, 0x5B, 0x96, 0x3D, 0x6B, 0xA8, 0x42, 0x49, 0x6F, 0x2D, 0x45, 0x64, 0x58, 0x41, 0x87, 
   0x87, 0x6C, 0xB6, 0x3C, 0x95, 0xAB, 0x4C, 0x8F, 0x7C, 0x66, 0x48, 0x64, 0x32, 0x45, 0x9C, 0x1B, 
   0x4F, 0x8A, 0x55, 0x54, 0x63, 0x67, 0x4A, 0x7C, 0x3B, 0x58, 0x96, 0x52, 0x8D, 0xD0, 0x7E, 0xA2, 
   0xC1, 0x3D, 0x44, 0x4A, 0x02, 0x0F, 0x20, 0x30, 0x60, 0x9F, 0x55, 0x7F, 0xA2, 0x67, 0x47, 0x71, 
   0x56, 0x5D, 0x9F, 0x1D, 0x4C, 0x78, 0x3B, 0x4E, 0x8B, 0x9E, 0xB0, 0x9D, 0x64, 0x8C, 0xBE, 0x1D, 
   0x11, 0x8D, 0x21, 0x2D, 0x0E, 0x66, 0x68, 0x66, 0x67, 0x81, 0xE7, 0x34, 0x7A, 0xBB, 0x4F, 0x24, 
   0x54, 0x44, 0x3B, 0x7C, 0x40, 0x6B, 0xC2, 0x73, 0x9A, 0xA6, 0x40, 0x5A, 0x77, 0x08, 0x21, 0x6B, 
   0x5F, 0x72, 0x93, 0xAB, 0x74, 0x8F, 0x4F, 0x7F, 0x9B, 0x40, 0x61, 0xBC, 0x32, 0x42, 0x65, 0x20, 
   0x3C, 0x4E, 0x3F, 0x6A, 0xA0, 0x64, 0x60, 0xD6, 0x6B, 0x4B, 0x9D, 0x44, 0x7A, 0x79, 0x5F, 0x91, 
   0x87, 0x4D, 0x62, 0x8B, 0x2A, 0x2D, 0x6D, 0x41, 0x4B, 0x78, 0x5E, 0xA7, 0x95, 0x7B, 0x89, 0x8A, 
   0x36, 0x1C, 0x69, 0x1F, 0x3E, 0xA8, 0x64, 0x84, 0x98, 0x65, 0x7F, 0x70, 0x59, 0x79, 0x9E, 0x30, 
   0x34, 0xB0, 0x3C, 0x5C, 0x82, 0x6A, 0x74, 0x8C, 0x5E, 0x5E, 0xA6, 0x2A, 0x74, 0x50, 0x35, 0x62, 
   0x51, 0x58, 0x45, 0xD0, 0x5E, 0x68, 0xDB, 0x52, 0x91, 0x50, 0x3B, 0x47, 0x43, 0x1A, 0x3C, 0x94, 
   0x82, 0xA2, 0xA7, 0x6C, 0x47, 0x87, 0x28, 0x2B, 0x99, 0x50, 0xA2, 0xD5, 0xA9, 0xB7, 0x93, 0x34, 
   0x3C, 0x66, 0x00, 0x00, 0x37, 0x49, 0x57, 0x72, 0x68, 0x9F, 0xC0, 0x44, 0x58, 0x8E, 0x83, 0x69, 
   0x99, 0x88, 0xA7, 0x93, 0x14, 0x5A, 0x86, 0x2E, 0x2A, 0x7E, 0x72, 0x47, 0x57, 0x18, 0x54, 0x5A, 
   0x3B, 0x72, 0xEA, 0x86, 0xA0, 0xE8, 0x47, 0x60, 0x28, 0x41, 0x1F, 0x25, 0x5C, 0x63, 0xA8, 0x29, 
   0x75, 0x8E, 0x2F, 0x63, 0x6D, 0x70, 0x4C, 0xA6, 0x5B, 0x48, 0x8F, 0x50, 0x77, 0x8E, 0x50, 0x78, 
   0x86, 0x50, 0x71, 0x4C, 0x66, 0x53, 0x64, 0x43, 0x34, 0xB1, 0x31, 0x3A, 0xB2, 0x69, 0x85, 0x93, 
   0x52, 0x81, 0x5E, 0x19, 0x58, 0x4C, 0x47, 0x4B, 0x9D, 0x6A, 0x5C, 0x93, 0x53, 0x3B, 0x82, 0x52, 
   0x80, 0x97, 0x40, 0x85, 0x73, 0x29, 0x4B, 0x44, 0x2A, 0x2E, 0x61, 0x5F, 0x5C, 0x91, 0x67, 0x74, 
   0x99, 0x72, 0x79, 0x88, 0x54, 0x56, 0x99, 0x21, 0x1E, 0x82, 0x3E, 0x64, 0x6B, 0x83, 0x83, 0x8D, 
   0x60, 0x7D, 0x92, 0x47, 0x5F, 0x8B, 0x2A, 0x4B, 0x50, 0x4D, 0x5B, 0x60, 0x5A, 0x55, 0x89, 0x60, 
   0x40, 0xA0, 0x54, 0x80, 0x71, 0x31, 0x74, 0x69, 0x42, 0x3A, 0x58, 0x6F, 0x61, 0x80, 0x73, 0x8E, 
   0xA8, 0x1C, 0x54, 0x84, 0x20, 0x42, 0x55, 0x55, 0x5E, 0x76, 0x57, 0x5A, 0x76, 0x5D, 0x6B, 0x66, 
   0x41, 0x5F, 0x79, 0x46, 0x48, 0x85, 0x2A, 0x40, 0x52, 0x03, 0x0F, 0x1B, 0x99, 0xA7, 0xCF, 0x9A, 
   0xD1, 0xFA, 0x38, 0x4D, 0x97, 0x1F, 0x12, 0x4F, 0x62, 0x78, 0x90, 0x56, 0xA5, 0x84, 0x33, 0x42, 
   0x48, 0x22, 0x0F, 0xAB, 0x63, 0x50, 0xCF, 0x5A, 0xA9, 0x69, 0x4A, 0x8D, 0x7F, 0x83, 0x59, 0xC3, 
   0x6B, 0x73, 0x79, 0x2B, 0x66, 0x7D, 0x4B, 0x59, 0xBB, 0x3F, 0x53, 0x91, 0x3F, 0x5E, 0x52, 0x56, 
   0x63, 0x75, 0x4B, 0x57, 0xC6, 0x5B, 0x5C, 0xD5, 0x3F, 0x3A, 0x55, 0x34, 0x2B, 0x22, 0x72, 0xB1, 
   0x9C, 0x50, 0xA0, 0xD3, 0x29, 0x49, 0xA6, 0x62, 0x3B, 0x71, 0x67, 0x46, 0x87, 0x2E, 0x63, 0xB4, 
   0x34, 0x85, 0x75, 0x72, 0x5C, 0x63, 0x39, 0x2D, 0x98, 0x3F, 0x39, 0xA5, 0x67, 0x75, 0x73, 0x46, 
   0x72, 0x97, 0x67, 0x8F, 0xD0, 0x60, 0x70, 0xBD, 0x0F, 0x40, 0x4D, 0x31, 0x44, 0x52, 0x65, 0x54, 
   0x9D, 0x34, 0x3F, 0x9A, 0x67, 0x5E, 0x90, 0x45, 0x71, 0x9C, 0x29, 0x83, 0x9C, 0x5C, 0x6B, 0x95, 
   0x67, 0x26, 0x9A, 0x33, 0x6A, 0x87, 0x1C, 0x76, 0x86, 0x5B, 0x64, 0x7A, 0x67, 0x47, 0x6F, 0x39, 
   0x47, 0x7C, 0x2D, 0x64, 0xB2, 0x4F, 0x76, 0xBE, 0x2E, 0x49, 0x7E, 0x58, 0x43, 0x5B, 0x7B, 0x66, 
   0x89, 0x3C, 0x78, 0xA7, 0x3B, 0x77, 0xA7, 0x79, 0x53, 0x89, 0x44, 0x5D, 0x83, 0x2C, 0x52, 0x99, 
   0x32, 0x53, 0x77, 0x4F, 0x81, 0x8E, 0x5C, 0x5F, 0xA5, 0x6E, 0x58, 0xAA, 0x40, 0x53, 0x77, 0x29, 
   0x33, 0x88, 0x51, 0x8A, 0x7E, 0x6F, 0xA1, 0xBD, 0x4D, 0x5B, 0xAA, 0x3B, 0x05, 0x6A, 0x52, 0x61, 
   0x5E, 0x6F, 0xBD, 0x98, 0x57, 0x56, 0xAA, 0x12, 0x21, 0x83, 0x1F, 0x3F, 0x8E, 0x77, 0x80, 0x88, 
   0x96, 0xAF, 0x9A, 0x51, 0x59, 0xAA, 0x43, 0x2F, 0x8C, 0x45, 0x93, 0x6D, 0x27, 0x79, 0x83, 0x11, 
   0x00, 0x8F, 0x52, 0x55, 0x9B, 0x88, 0xBD, 0xAC, 0x7C, 0x4C, 0x9F, 0x2A, 0x2A, 0x74, 0x07, 0x70, 
   0x39, 0x5D, 0x89, 0x89, 0x7B, 0x6E, 0xB3, 0x42, 0x67, 0x80, 0x46, 0x66, 0x6A, 0x40, 0x5A, 0xAE, 
   0x4C, 0x65, 0xB8, 0x42, 0x60, 0x77, 0x75, 0x92, 0x36, 0x58, 0x48, 0x59, 0x00, 0x0A, 0x8A, 0x71, 
   0x89, 0xCC, 0xC6, 0xC8, 0xCB, 0x36, 0x2B, 0x56, 0x00, 0x00, 0x27, 0x59, 0xA1, 0xBB, 0x64, 0x90, 
   0xC0, 0x0F, 0x19, 0x54, 0x3D, 0x36, 0x38, 0x82, 0xA4, 0xAC, 0x4E, 0x8D, 0xC4, 0x36, 0x4B, 0x8F, 
   0x20, 0x1B, 0x27, 0x40, 0x17, 0x62, 0x87, 0x7B, 0xCC, 0x8C, 0xD8, 0xE3, 0x2E, 0x7B, 0x79, 0x14, 
   0x2D, 0x41, 0x4B, 0x5C, 0x94, 0x4B, 0x29, 0x5B, 0x03, 0x15, 0x30, 0x55, 0x90, 0xB1, 0x90, 0xD0, 
   0xE1, 0x72, 0x3F, 0x6F, 0x15, 0x04, 0x31, 0x15, 0x3A, 0xD9, 0x67, 0xB5, 0xFF, 0x6F, 0x8F, 0x31, 
   0x47, 0x3E, 0x00, 0x36, 0x2C, 0xD3, 0x6F, 0x88, 0xFF, 0x6E, 0xAA, 0x77, 0x49, 0x69, 0x3B, 0x03, 
   0x2C, 0x84, 0x2B, 0x19, 0x95, 0x50, 0x44, 0x64, 0x7B, 0x86, 0x72, 0x7B, 0xA4, 0xDF, 0x61, 0x68, 
   0xB6, 0x13, 0x15, 0x41, 0x07, 0x1A, 0x56, 0x32, 0x56, 0x7F, 0x95, 0x8D, 0x98, 0x6E, 0xAF, 0x8E, 
   0x1D, 0x25, 0x73, 0x17, 0x25, 0x96, 0x69, 0x92, 0x86, 0x98, 0x87, 0xCA, 0x52, 0x57, 0xB6, 0x1D, 
   0x22, 0x08, 0x38, 0x2E, 0x30, 0x5B, 0x85, 0xDA, 0x67, 0x9D, 0xD2, 0x4A, 0x31, 0x6C, 0x16, 0x4C, 
   0x77, 0x34, 0x5F, 0x9A, 0x7F, 0x77, 0xA0, 0x5D, 0x71, 0x89, 0x3A, 0x3E, 0x9F, 0x2F, 0x5A, 0x93, 
   0x53, 0x62, 0x77, 0x50, 0x6F, 0x72, 0x83, 0x70, 0xBE, 0x70, 0x9C, 0xB3, 0x33, 0x6B, 0xB0, 0x08, 
   0x1D, 0x3B, 0x47, 0x2E, 0x25, 0x17, 0x53, 0xBE, 0x66, 0x6E, 0xFF, 0xB8, 0x98, 0xB0, 0x56, 0x76, 
   0x84, 0x15, 0x5D, 0x69, 0x41, 0x3F, 0x83, 0x47, 0x56, 0x68, 0x4E, 0x5D, 0x91, 0x6A, 0x91, 0xD6, 
   0x52, 0x84, 0x97, 0x13, 0x1C, 0x3B, 0x46, 0x49, 0x79, 0x8B, 0x9E, 0xAE, 0x37, 0x4A, 0x7C, 0x1B, 
   0x23, 0x9A, 0x99, 0x9D, 0xB1, 0x66, 0x81, 0xAF, 0x14, 0x42, 0x68, 0x40, 0x52, 0x4A, 0x46, 0x7A, 
   0x9B, 0x64, 0x63, 0xBE, 0x64, 0x46, 0x6E, 0x1A, 0x5E, 0x79, 0x5A, 0x93, 0xB8, 0x7D, 0x87, 0x8A, 
   0x3E, 0x3B, 0x46, 0x38, 0x46, 0x91, 0x87, 0x9C, 0xDD, 0x3C, 0x6E, 0xB3, 0x0E, 0x34, 0x70, 0x7A, 
   0x60, 0x28, 0x84, 0x9C, 0x82, 0x05, 0x1E, 0xA5, 0x00, 0x1F, 0x5C, 0x58, 0x83, 0x59, 0x5C, 0x5E, 
   0xAC, 0x9B, 0x87, 0xFF, 0x81, 0xB2, 0x8C, 0x00, 0x32, 0x0C, 0x00, 0x0F, 0x63, 0x9C, 0x6B, 0xD2, 
   0x80, 0x9F, 0xC3, 0x2A, 0x71, 0x9E, 0x39, 0x48, 0x77, 0x40, 0x31, 0x36, 0x31, 0x4F, 0x44, 0x82, 
   0xA7, 0xC0, 0x87, 0xAB, 0xFF, 0x02, 0x30, 0x68, 0x0E, 0x00, 0x32, 0x78, 0x4D, 0x8D, 0xA8, 0xC9, 
   0xAB, 0x6E, 0x8B, 0x84, 0x22, 0x44, 0x8E, 0x42, 0x52, 0x65, 0x42, 0x34, 0x6C, 0x38, 0x36, 0x95, 
   0x88, 0xA5, 0xC9, 0x5A, 0xAA, 0x8E, 0x2B, 0x30, 0x36, 0x41, 0x0C, 0x64, 0x42, 0x62, 0x8F, 0x5F, 
   0x86, 0xC9, 0x6A, 0x6A, 0x8F, 0x47, 0x47, 0x37, 0x14, 0x5D, 0x9C, 0x5E, 0x5D, 0x97, 0x70, 0x6D, 
   0x42, 0x26, 0x45, 0x82, 0x44, 0x29, 0x95, 0x5D, 0x6B, 0x97, 0x6F, 0x74, 0x9D, 0x69, 0x97, 0x8A, 
   0x66, 0x9B, 0xAA, 0x24, 0x41, 0x8B, 0x1D, 0x16, 0x39, 0x35, 0x1B, 0x45, 0x4F, 0x68, 0xA7, 0x79, 
   0x98, 0xD0, 0x7F, 0x76, 0x84, 0x54, 0x47, 0x54, 0x24, 0x46, 0x5E, 0x3A, 0x7E, 0x70, 0x7E, 0x5B, 
   0x9E, 0x39, 0x48, 0xA2, 0x11, 0x42, 0x61, 0x66, 0x48, 0x36, 0x50, 0x60, 0x4D, 0x3A, 0x77, 0x8F, 
   0x68, 0x4F, 0x97, 0x4D, 0x43, 0x76, 0x23, 0x36, 0x5C, 0x02, 0x10, 0x2A, 0x71, 0x85, 0xBD, 0xA0, 
   0xBA, 0xFF, 0x44, 0x69, 0x91, 0x36, 0x44, 0x60, 0x56, 0x4E, 0x6A, 0x33, 0x6B, 0x8D, 0x17, 0x4F, 
   0x9F, 0x4D, 0x51, 0x7E, 0x77, 0x8C, 0x85, 0x61, 0x8C, 0xD4, 0x4F, 0x4C, 0x83, 0x42, 0x4F, 0x60, 
   0x36, 0x60, 0x9E, 0x58, 0x55, 0x8E, 0x5D, 0x6C, 0x88, 0x57, 0x82, 0xA4, 0x39, 0x48, 0x8C, 0x28, 
   0x47, 0x69, 0x56, 0x69, 0x9B, 0x4C, 0x6F, 0x84, 0x6E, 0x81, 0x78, 0x61, 0x6F, 0x95, 0x10, 0x36, 
   0x9B, 0x21, 0x37, 0x5E, 0x72, 0x99, 0x98, 0x6D, 0x7C, 0xCB, 0x1D, 0x58, 0x7B, 0x3F, 0x5C, 0x7A, 
   0x72, 0x3E, 0x85, 0x50, 0x44, 0x80, 0x2D, 0x6C, 0x86, 0x2D, 0x56, 0x93, 0x50, 0x47, 0x95, 0x84, 
   0x65, 0xBE, 0x34, 0x8E, 0xA0, 0x38, 0x65, 0x8D, 0x4E, 0x69, 0x69, 0x49, 0x50, 0x63, 0x3E, 0x22, 
   0xA4, 0x55, 0x5D, 0xBC, 0x44, 0x87, 0x6D, 0x50, 0x88, 0x89, 0x62, 0x6B, 0xC2, 0x4B, 0x47, 0x94, 
   0x34, 0x3B, 0x6C, 0x50, 0x53, 0xA4, 0x67, 0x87, 0xA3, 0x4B, 0x77, 0x5E, 0x39, 0x5F, 0x6F, 0x61, 
   0x57, 0xA9, 0x4A, 0x46, 0x83, 0x1D, 0x47, 0x7E, 0x5C, 0x82, 0xC3, 0x6F, 0x6D, 0xA7, 0x42, 0x78, 
   0x6D, 0x58, 0x65, 0x83, 0x51, 0x4D, 0xA5, 0x2F, 0x4C, 0x72, 0x4C, 0x3C, 0x90, 0x79, 0x76, 0xC3, 
   0x4A, 0x87, 0xCC, 0x1B, 0x6F, 0x30, 0x1B, 0x4B, 0x40, 0x44, 0x1E, 0xC6, 0x5D, 0x55, 0xCD, 0x7B, 
   0xAD, 0x6D, 0x4D, 0xA2, 0x93, 0x35, 0x39, 0x8D, 0x40, 0x3D, 0x81, 0x41, 0x59, 0x91, 0x64, 0x71, 
   0x8C, 0x69, 0x5B, 0x76, 0x24, 0x6D, 0x99, 0x14, 0x46, 0x9F, 0x6B, 0x6F, 0x8F, 0x78, 0x70, 0x8F, 
   0x34, 0x44, 0xA0, 0x60, 0x99, 0xB1, 0x86, 0xE5, 0xBE, 0x3E, 0x29, 0x5E, 0x02, 0x00, 0x0C, 0x0E, 
   0x63, 0x74, 0x4B, 0x60, 0xCD, 0x88, 0x53, 0x9B, 0x7E, 0x99, 0xA1, 0x4F, 0x71, 0xBB, 0x41, 0x48, 
   0x73, 0x2E, 0x25, 0x42, 0x2E, 0x54, 0x53, 0x4D, 0x73, 0x67, 0x81, 0x9D, 0xBB, 0x64, 0x9B, 0xD3, 
   0x2A, 0x31, 0xC4, 0x1F, 0x07, 0x21, 0x7C, 0x4D, 0x2C, 0x8D, 0x9F, 0xD4, 0x41, 0x94, 0xCA, 0x00, 
   0x2D, 0x3B, 0x37, 0x3F, 0x58, 0xD8, 0xA6, 0xD6, 0x5F, 0x83, 0xA8, 0x12, 0x53, 0x61, 0x3D, 0x3F, 
   0x75, 0x4D, 0x2F, 0x6F, 0x1B, 0x3D, 0x61, 0x65, 0x9F, 0xA8, 0x70, 0xB0, 0xDB, 0x1B, 0x25, 0x57, 
   0x1C, 0x23, 0x29, 0x79, 0x68, 0xA2, 0x5E, 0x5F, 0xD1, 0x59, 0x87, 0x8B, 0x7E, 0x96, 0x6B, 0x48, 
   0x26, 0x6D, 0x00, 0x19, 0x5C, 0x35, 0x64, 0x69, 0x70, 0x44, 0x88, 0x39, 0x68, 0x9C, 0x50, 0x90, 
   0xAD, 0x56, 0x6D, 0x5E, 0x39, 0x0D, 0x6B, 0x29, 0x48, 0xB7, 0x79, 0x9B, 0xB1, 0x4C, 0xAC, 0x82, 
   0x2F, 0x5A, 0x5A, 0x4C, 0x2A, 0x6C, 0x5D, 0x3C, 0xBD, 0x57, 0x98, 0xC8, 0x44, 0x91, 0x7C, 0x54, 
   0x2E, 0x46, 0x15, 0x0A, 0x73, 0x28, 0x5B, 0x91, 0x90, 0xA1, 0xA8, 0x84, 0x8A, 0x5E, 0x10, 0x17, 
   0x5A, 0x0F, 0x44, 0xCD, 0x5A, 0x6D, 0xAB, 0x67, 0x58, 0x5B, 0x62, 0x7B, 0x72, 0x45, 0x70, 0xB1, 
   0x2A, 0x4E, 0x85, 0x5D, 0x70, 0x86, 0x68, 0x75, 0xC4, 0x35, 0x4B, 0xAB, 0x3A, 0x34, 0x31, 0x6E, 
   0x74, 0x4E, 0x4B, 0x80, 0xBC, 0x2D, 0x4C, 0xA2, 0x55, 0x47, 0x5F, 0x44, 0x6A, 0x8E, 0x45, 0x5A, 
   0xC2, 0x4C, 0x8E, 0xA0, 0x6E, 0x60, 0x78, 0x2F, 0x2C, 0x83, 0x41, 0x71, 0x9A, 0x6F, 0x6D, 0x9A, 
   0x3C, 0x57, 0x78, 0x21, 0x58, 0x8F, 0x82, 0x86, 0x8A, 0x71, 0x7A, 0xA1, 0x4C, 0x77, 0xAB, 0x48, 
   0x4B, 0x86, 0x00, 0x0C, 0x35, 0x32, 0x41, 0x5A, 0x69, 0xA0, 0xBA, 0x78, 0x81, 0xFF, 0x79, 0x6B, 
   0x92, 0x4A, 0x6A, 0x54, 0x38, 0x5D, 0x52, 0x6A, 0x57, 0x9C, 0x53, 0x57, 0x98, 0x37, 0x58, 0x8D, 
   0x53, 0x8B, 0xA3, 0x7A, 0x89, 0x8B, 0x2E, 0x36, 0x5D, 0x07, 0x02, 0x85, 0x53, 0x54, 0x98, 0x8E, 
   0x9C, 0x88, 0x5C, 0x71, 0xC7, 0x60, 0x76, 0x87, 0x37, 0x70, 0x53, 0x30, 0x59, 0xA2, 0x58, 0x5E, 
   0xC9, 0x58, 0x8B, 0x4B, 0x25, 0x4D, 0x4B, 0x5A, 0x37, 0xBF, 0x5C, 0x9E, 0xC0, 0x78, 0x92, 0x6A, 
   0x4F, 0x1F, 0x7F, 0x30, 0x7E, 0x84, 0x4C, 0x8F, 0xA6, 0x51, 0x22, 0x83, 0x19, 0x3F, 0x71, 0x59, 
   0x8F, 0x86, 0x9D, 0x83, 0x9B, 0x35, 0x53, 0x71, 0x00, 0x13, 0x4F, 0x40, 0x4E, 0x7A, 0x65, 0xB2, 
   0xC6, 0x6C, 0x69, 0x8E, 0x60, 0x41, 0x76, 0x3C, 0x7E, 0x6A, 0x1F, 0x84, 0x93, 0x63, 0x60, 0xC0, 
   0x73, 0x63, 0x8B, 0x44, 0x35, 0x51, 0x16, 0x42, 0x7E, 0x2A, 0x7D, 0x85, 0x72, 0x58, 0x65, 0xA1, 
   0x86, 0xB6, 0x55, 0x9B, 0xBB, 0x0E, 0x54, 0x7F, 0x14, 0x1E, 0x4E, 0x60, 0x30, 0x2C, 0x90, 0x66, 
   0xA7, 0x69, 0xB3, 0xF2, 0x45, 0x9C, 0x90, 0x21, 0x44, 0x32, 0x48, 0x42, 0x54, 0x60, 0x4D, 0x95, 
   0x3F, 0x60, 0xD0, 0x99, 0x88, 0xB8, 0x4E, 0x65, 0x33, 0x00, 0x36, 0x49, 0x4D, 0x69, 0xAB, 0x71, 
   0x5E, 0x76, 0x4A, 0x48, 0xA5, 0x67, 0x76, 0xD0, 0x71, 0x76, 0x56, 0x3B, 0x69, 0x48, 0x1E, 0x45, 
   0x8C, 0x30, 0x18, 0x4A, 0x3A, 0x37, 0x64, 0x8D, 0x7A, 0xCD, 0x99, 0xBA, 0xC7, 0x4C, 0x7B, 0x86, 
   0x32, 0x5B, 0x77, 0x52, 0x58, 0x53, 0x2F, 0x2F, 0x75, 0x1F, 0x34, 0xA8, 0x4F, 0x5E, 0x7A, 0x7F, 
   0x98, 0x63, 0x79, 0x54, 0x9C, 0x55, 0x42, 0x8B, 0x41, 0x96, 0x7E, 0x2D, 0x45, 0x76, 0x12, 0x32, 
   0x65, 0x7F, 0x5A, 0x8C, 0x7A, 0x4F, 0xA1, 0x1E, 0x55, 0x4A, 0x33, 0x72, 0x3E, 0x4F, 0x5B, 0x7E, 
   0x3A, 0x66, 0x98, 0x7F, 0x55, 0xA5, 0x66, 0x7B, 0xA5, 0x81, 0x96, 0xBB, 0x09, 0x29, 0x59, 0x1A, 
   0x2E, 0x4E, 0x9E, 0x9B, 0xC7, 0x7B, 0x9A, 0xB1, 0x07, 0x20, 0x67, 0x17, 0x04, 0x85, 0x64, 0x6E, 
   0xD5, 0x6C, 0xBB, 0x8A, 0x62, 0x99, 0x78, 0x83, 0x41, 0x9E, 0x5E, 0x54, 0x86, 0x0C, 0x47, 0x58, 
   0x34, 0x3C, 0x86, 0x6E, 0x6B, 0xA4, 0x52, 0x88, 0x8E, 0x58, 0x66, 0x88, 0x57, 0x6B, 0xBB, 0x39, 
   0x53, 0xAD, 0x29, 0x3C, 0x39, 0x68, 0x5F, 0x50, 0x68, 0x8D, 0xB8, 0x44, 0x7A, 0xC9, 0x10, 0x0D, 
   0x6D, 0x49, 0x40, 0x5B, 0x71, 0x6B, 0x83, 0x28, 0xA5, 0x96, 0x4A, 0x81, 0xAD, 0x61, 0x2E, 0x5E, 
   0x3F, 0x2C, 0x97, 0x39, 0x49, 0xB9, 0x56, 0x84, 0x6F, 0x61, 0x69, 0x6B, 0x33, 0x47, 0xD2, 0x3E, 
   0x74, 0xA9, 0x55, 0x41, 0x69, 0x3F, 0x6F, 0x57, 0x5B, 0x75, 0xA8, 0x5B, 0x4C, 0xA9, 0x33, 0x35, 
   0x82, 0x4E, 0x6F, 0x77, 0x27, 0x76, 0xBB, 0x4A, 0x6F, 0x87, 0x78, 0x52, 0x70, 0x39, 0x3B, 0x8D, 
   0x34, 0x74, 0xA4, 0x57, 0x63, 0x92, 0x6E, 0x48, 0x76, 0x45, 0x82, 0x92, 0x28, 0x87, 0xA9, 0x44, 
   0x47, 0x8D, 0x4B, 0x3F, 0x76, 0x5C, 0x2F, 0x71, 0x4C, 0x70, 0x95, 0x4C, 0xB6, 0xDA, 0x51, 0x6C, 
   0xA0, 0x57, 0x2B, 0x65, 0x35, 0x4C, 0x4E, 0x46, 0x53, 0x9A, 0x69, 0x6B, 0xBE, 0x64, 0x71, 0xA7, 
   0x5C, 0x7B, 0x93, 0x3E, 0x46, 0x7F, 0x26, 0x23, 0x45, 0x21, 0x41, 0x74, 0x68, 0x89, 0xB5, 0x87, 
   0xA8, 0xD8, 0x64, 0x73, 0x92, 0x1E, 0x27, 0x52, 0x29, 0x42, 0x79, 0x6E, 0x92, 0x97, 0x5D, 0x70, 
   0xB4, 0x2B, 0x0A, 0x8D, 0x38, 0x4C, 0x65, 0x78, 0xC6, 0x88, 0x79, 0x77, 0xA6, 0x3A, 0x38, 0x7E, 
   0x5A, 0x5F, 0x9A, 0x52, 0xBF, 0xBA, 0x56, 0x77, 0x9A, 0x37, 0x22, 0x74, 0x1F, 0x19, 0x61, 0x36, 
   0x69, 0x5B, 0x3E, 0x4F, 0x7A, 0x46, 0x47, 0x93, 0x60, 0x78, 0x95, 0x8F, 0xC8, 0xB1, 0x71, 0x54, 
   0xD6, 0x23, 0x12, 0x54, 0x00, 0x30, 0x00, 0x6E, 0x78, 0x82, 0x8C, 0xB3, 0xF2, 0x48, 0x7E, 0xC5, 
   0x47, 0x48, 0x3B, 0x36, 0x3B, 0x6E, 0x37, 0x36, 0xAD, 0x7C, 0x88, 0x9D, 0x80, 0xAB, 0x85, 0x23, 
   0x33, 0x72, 0x00, 0x0B, 0x41, 0x6B, 0x9C, 0xA4, 0xDE, 0xE5, 0xFF, 0x48, 0x2C, 0x72, 0x00, 0x00, 
   0x00, 0x55, 0x81, 0x6B, 0x6B, 0xB0, 0xD4, 0x20, 0x2C, 0x8A, 0x20, 0x3D, 0x4C, 0x66, 0x87, 0x7B, 
   0x6E, 0x6C, 0xDD, 0x40, 0x6B, 0xAF, 0x34, 0x79, 0x6E, 0x50, 0x39, 0x65, 0x5B, 0x38, 0x85, 0x5A, 
   0x6B, 0x74, 0x37, 0x3F, 0x48, 0x21, 0x57, 0x84, 0x78, 0xB1, 0xE6, 0x7D, 0x44, 0x85, 0x16, 0x00, 
   0x0D, 0x12, 0x52, 0xA3, 0x86, 0xB6, 0xFF, 0x9D, 0x79, 0x4F, 0x0D, 0x39, 0x16, 0x2E, 0x55, 0xCE, 
   0x62, 0x8D, 0xF6, 0x5C, 0x5E, 0x5B, 0x4B, 0x45, 0x21, 0x34, 0x28, 0xB0, 0x4B, 0x6E, 0xC8, 0x5C, 
   0x9D, 0x72, 0x62, 0x6A, 0x53, 0x55, 0x67, 0xAC, 0x31, 0x30, 0x78, 0x2A, 0x14, 0x34, 0x32, 0x60, 
   0x70, 0x4C, 0x64, 0xC4, 0x80, 0x93, 0xA9, 0x7E, 0x7B, 0xAE, 0x00, 0x30, 0x79, 0x0C, 0x0F, 0x57, 
   0xA9, 0xA5, 0xAE, 0x8C, 0xB5, 0xD5, 0x17, 0x29, 0x82, 0x1B, 0x10, 0x30, 0x39, 0x51, 0x54, 0x8B, 
   0x92, 0xE0, 0x63, 0x98, 0xD6, 0x38, 0x35, 0x41, 0x15, 0x19, 0x5E, 0x3F, 0x76, 0xB0, 0x96, 0x9F, 
   0xA0, 0x7A, 0x61, 0x8F, 0x00, 0x43, 0x83, 0x40, 0x49, 0x8E, 0x74, 0x78, 0x88, 0x4E, 0x6E, 0x84, 
   0x4E, 0x63, 0xB2, 0x69, 0x68, 0x90, 0x20, 0x5C, 0x84, 0x59, 0x61, 0x89, 0x8B, 0x60, 0x7E, 0x35, 
   0x54, 0xC2, 0x33, 0x64, 0xB0, 0x49, 0x48, 0x54, 0x33, 0x49, 0x5A, 0x19, 0x5C, 0xAD, 0x7E, 0x81, 
   0xE2, 0x8B, 0x7D, 0x86, 0x51, 0x76, 0x72, 0x38, 0x64, 0x99, 0x42, 0x4C, 0x92, 0x37, 0x51, 0x6F, 
   0x6A, 0x74, 0x86, 0x6F, 0xB7, 0xBA, 0x29, 0x54, 0x91, 0x00, 0x00, 0x5E, 0x7B, 0x54, 0x91, 0x8D, 
   0xA7, 0xAE, 0x27, 0x70, 0x5F, 0x3E, 0x48, 0x82, 0x72, 0x65, 0xC7, 0x66, 0x81, 0xA4, 0x42, 0x59, 
   0x69, 0x1F, 0x37, 0x6D, 0x37, 0x87, 0x8B, 0x72, 0x9D, 0xA9, 0x78, 0x36, 0x88, 0x45, 0x41, 0xB5, 
   0x65, 0xB7, 0xAE, 0x57, 0x56, 0x7D, 0x00, 0x00, 0x42, 0x3A, 0x6C, 0x65, 0xA8, 0x9B, 0xB7, 0x37, 
   0x57, 0xD9, 0x0F, 0x50, 0x7B, 0x9E, 0x83, 0x34, 0x87, 0x6B, 0x7D, 0x02, 0x26, 0xC2, 0x45, 0x54, 
   0x79, 0x36, 0x83, 0x4D, 0x33, 0x46, 0x7E, 0xA1, 0x5E, 0xEB, 0xA4, 0xDA, 0xDD, 0x01, 0x59, 0x2E, 
   0x1B, 0x00, 0x37, 0x54, 0x1D, 0x7D, 0x29, 0x82, 0x7C, 0x4E, 0x86, 0xB2, 0x94, 0xB4, 0xEB, 0x45, 
   0x4C, 0x5B, 0x3A, 0x00, 0x47, 0x78, 0x89, 0xB8, 0x60, 0xB1, 0xA1, 0x1A, 0x3D, 0x5C, 0x15, 0x0E, 
   0x73, 0x67, 0x4E, 0x96, 0x90, 0x8A, 0x9C, 0x46, 0x7B, 0x84, 0x28, 0x7A, 0x66, 0x6C, 0x5A, 0x83, 
   0x5B, 0x36, 0x73, 0x22, 0x2C, 0x92, 0x71, 0x9B, 0xCB, 0x5A, 0xA0, 0x7A, 0x26, 0x27, 0x1F, 0x38, 
   0x1A, 0x94, 0x5C, 0x6A, 0xE1, 0x74, 0x7C, 0xA2, 0x8E, 0x87, 0x87, 0x19, 0x5E, 0x45, 0x00, 0x03, 
   0x67, 0x48, 0x4F, 0x86, 0x74, 0xA2, 0xB5, 0x76, 0x81, 0x94, 0x6A, 0x69, 0x9F, 0x51, 0x61, 0x9C, 
   0x22, 0x27, 0x44, 0x49, 0x4A, 0x5B, 0x66, 0x84, 0xBD, 0x3E, 0x67, 0xAB, 0x49, 0x4E, 0x4D, 0x4F, 
   0x1F, 0x40, 0x3E, 0x6F, 0x8C, 0x88, 0xB4, 0xC0, 0x64, 0x3C, 0xA3, 0x07, 0x45, 0x5C, 0x29, 0x4A, 
   0x65, 0x64, 0x51, 0x70, 0x81, 0x62, 0x76, 0x69, 0x84, 0x9E, 0x17, 0x50, 0x86, 0x1C, 0x38, 0x36, 
   0x44, 0x39, 0x70, 0x78, 0xA0, 0xC1, 0x73, 0x95, 0xBE, 0x94, 0xC1, 0xEA, 0x25, 0x3A, 0x5E, 0x1E, 
   0x1B, 0x2E, 0x51, 0x5F, 0x74, 0x6F, 0x7C, 0xA6, 0x3C, 0x6C, 0xC0, 0x21, 0x1E, 0xB5, 0x6C, 0x70, 
   0x70, 0x68, 0x9F, 0xB7, 0x61, 0x87, 0xA9, 0x48, 0x56, 0x41, 0x2F, 0x3C, 0x8B, 0x3F, 0x46, 0xB9, 
   0x4F, 0x52, 0x6A, 0x3F, 0x6F, 0x86, 0x57, 0x54, 0xA4, 0x52, 0x65, 0x8E, 0x52, 0x71, 0xAF, 0x41, 
   0x60, 0x90, 0x4C, 0x54, 0x56, 0x57, 0x6A, 0x95, 0x50, 0x5E, 0xA1, 0x34, 0x47, 0x7F, 0x7D, 0x79, 
   0x9A, 0x55, 0x52, 0x88, 0x0A, 0x47, 0x6A, 0x49, 0x6F, 0x5F, 0x6C, 0x7A, 0x78, 0x44, 0x56, 0xC4, 
   0x28, 0x39, 0x97, 0x50, 0x50, 0x58, 0x62, 0x5D, 0x91, 0x5B, 0x7A, 0xB3, 0x54, 0x90, 0x8A, 0x09, 
   0x23, 0x6B, 0x43, 0x3E, 0x71, 0x78, 0x6D, 0x6D, 0x3A, 0x48, 0xBA, 0x5C, 0x6C, 0xB5, 0x61, 0x88, 
   0x7C, 0x21, 0x6B, 0x7B, 0x59, 0x57, 0x8C, 0x54, 0x2E, 0x85, 0x27, 0x3F, 0x74, 0x44, 0x7F, 0x85, 
   0x62, 0x6E, 0xB9, 0x57, 0x5D, 0x6A, 0x35, 0x3B, 0x8D, 0x5C, 0x53, 0xB0, 0x4B, 0x7B, 0x99, 0x29, 
   0x6F, 0x76, 0x57, 0x4C, 0x7B, 0x68, 0x46, 0xA9, 0x51, 0x57, 0x7C, 0x39, 0x5E, 0x88, 0x4A, 0x6F, 
   0xBC, 0x34, 0x64, 0x83, 0x57, 0x37, 0x66, 0x58, 0x60, 0x94, 0x47, 0x88, 0xB6, 0x52, 0x82, 0x93, 
   0x4C, 0x41, 0x6B, 0x62, 0x2F, 0xA3, 0x3F, 0x47, 0xB8, 0x33, 0x87, 0x3A, 0x44, 0x88, 0x73, 0x57, 
   0x55, 0xCF, 0x58, 0x3E, 0x8B, 0x58, 0x77, 0x7F, 0x4C, 0x70, 0x84, 0x4B, 0x53, 0x74, 0x23, 0x4D, 
   0x8C, 0x2C, 0x4A, 0xA9, 0x7F, 0x5E, 0x8E, 0x86, 0x8E, 0x6D, 0x63, 0x78, 0x9B, 0x5B, 0x77, 0xCD, 
   0x5D, 0x9C, 0x9D, 0x3E, 0x48, 0x55, 0x00, 0x00, 0x59, 0x49, 0x6C, 0x86, 0x83, 0xB0, 0xB8, 0x6C, 
   0x1C, 0x6D, 0x37, 0x22, 0x4F, 0x05, 0x79, 0x73, 0x41, 0x76, 0xA3, 0x9F, 0x55, 0x93, 0x6C, 0x87, 
   0x97, 0x4E, 0x48, 0x90, 0x3A, 0x36, 0x71, 0x39, 0x75, 0x64, 0x1E, 0x59, 0x7A, 0x5E, 0x4E, 0x54, 
   0x71, 0x60, 0x68, 0x65, 0x7C, 0xD2, 0x36, 0x5F, 0xD2, 0x24, 0x31, 0x64, 0x4D, 0x49, 0x40, 0x7B, 
   0x89, 0x73, 0x5D, 0x79, 0xC4, 0x00, 0x50, 0x97, 0x4E, 0x3F, 0x6F, 0xB0, 0x84, 0x90, 0x5B, 0x68, 
   0x6E, 0x30, 0x6E, 0x85, 0x55, 0x93, 0xBD, 0x42, 0x3C, 0x5B, 0x0A, 0x09, 0x2F, 0x62, 0x72, 0xAA, 
   0xB3, 0xD5, 0xF5, 0x23, 0x83, 0x92, 0x32, 0x33, 0x3E, 0x53, 0x2A, 0x74, 0x20, 0x0E, 0x52, 0x44, 
   0x62, 0x65, 0x7F, 0xB0, 0x9C, 0x5D, 0x99, 0xBA, 0x34, 0x40, 0x92, 0x3E, 0x3D, 0x58, 0x22, 0x05, 
   0x69, 0x46, 0x42, 0xA3, 0x75, 0xD5, 0x98, 0x70, 0xA8, 0x65, 0x3B, 0x4F, 0x76, 0x3A, 0x1F, 0x95, 
   0x56, 0x63, 0xBD, 0x4A, 0xA7, 0xAB, 0x2D, 0x50, 0x53, 0x44, 0x04, 0x3D, 0x57, 0x1D, 0xAD, 0x47, 
   0x93, 0xF3, 0x9C, 0xFA, 0xB7, 0x70, 0x73, 0x4C, 0x00, 0x00, 0x38, 0x00, 0x01, 0x89, 0x5B, 0x6D, 
   0x8D, 0xC6, 0xB6, 0x6F, 0x87, 0x89, 0xBB, 0x17, 0x59, 0xAA, 0x11, 0x1A, 0x8D, 0x4C, 0x5F, 0x6F, 
   0x92, 0x9E, 0xA7, 0x74, 0x6F, 0xBB, 0x33, 0x3A, 0x36, 0x00, 0x23, 0x25, 0x4F, 0x6E, 0xD3, 0x63, 
   0x86, 0xC6, 0x6E, 0x48, 0x7C, 0x3F, 0x53, 0x7B, 0x11, 0x64, 0x92, 0x44, 0x4E, 0x93, 0x5C, 0x6B, 
   0x88, 0x46, 0x5A, 0x83, 0x4C, 0x66, 0x9F, 0x4C, 0x66, 0x88, 0x36, 0x50, 0x66, 0x53, 0x68, 0xA6, 
   0x75, 0x7F, 0x9C, 0x36, 0x79, 0xA7, 0x40, 0x55, 0x89, 0x40, 0x3D, 0x78, 0x2B, 0x38, 0x89, 0x76, 
   0x79, 0x9C, 0x8C, 0xAC, 0xBE, 0x2E, 0x71, 0xB5, 0x00, 0x0F, 0x30, 0x1C, 0x32, 0x36, 0x4E, 0x85, 
   0x9C, 0x7F, 0x88, 0xFF, 0x96, 0x72, 0xB6, 0x2E, 0x71, 0x63, 0x1B, 0x5E, 0x87, 0x6A, 0x57, 0x75, 
   0x64, 0x66, 0x6F, 0x19, 0x28, 0x92, 0x42, 0x62, 0xA9, 0x97, 0xB7, 0x98, 0x30, 0x39, 0x85, 0x0D, 
   0x28, 0x68, 0x69, 0x79, 0x69, 0x50, 0x7B, 0x99, 0x62, 0x5A, 0xD3, 0x7E, 0x7C, 0x93, 0x27, 0x5A, 
   0x48, 0x21, 0x54, 0x9C, 0x71, 0x8C, 0xA3, 0x5B, 0x63, 0x70, 0x44, 0x50, 0x8D, 0x65, 0x61, 0xC0, 
   0x4D, 0x61, 0xB3, 0x35, 0x66, 0x6B, 0x4B, 0x44, 0x36, 0x3A, 0x6D, 0x75, 0x58, 0x7E, 0xC7, 0x5E, 
   0x62, 0xAC, 0x26, 0x45, 0x72, 0x39, 0x6E, 0x92, 0xAB, 0x9B, 0xA0, 0x7B, 0x76, 0x70, 0x00, 0x00, 
   0x20, 0x01, 0x26, 0x63, 0x88, 0xBD, 0xE5, 0x9B, 0x96, 0xD4, 0x72, 0x56, 0x7B, 0x4B, 0x58, 0x49, 
   0x00, 0x30, 0x3D, 0x05, 0x42, 0x6E, 0x91, 0x5B, 0xA6, 0x93, 0x90, 0xC6, 0x26, 0x85, 0xC5, 0x0A, 
   0x57, 0x88, 0x6D, 0x35, 0x46, 0xA3, 0x69, 0x52, 0x90, 0xA2, 0xB5, 0x2C, 0x94, 0xD7, 0x00, 0x25, 
   0x63, 0x37, 0x02, 0x2E, 0x79, 0x4A, 0x85, 0x9D, 0xB5, 0xD0, 0x53, 0xBB, 0x9C, 0x2F, 0x51, 0x4F, 
   0x4F, 0x20, 0x38, 0x38, 0x2C, 0x8B, 0x2E, 0x85, 0xD3, 0x9A, 0x97, 0xA1, 0x5C, 0x7A, 0x3F, 0x0C, 
   0x56, 0x8A, 0x67, 0x43, 0xBF, 0x7E, 0x64, 0x82, 0x33, 0x53, 0x91, 0x38, 0x2C, 0x8A, 0x44, 0x68, 
   0x56, 0x56, 0x9F, 0xD2, 0x7F, 0xA0, 0x93, 0x51, 0x6A, 0x5E, 0x28, 0x4A, 0xA7, 0x45, 0x26, 0x68, 
   0x68, 0x55, 0x64, 0x3C, 0x70, 0xC5, 0x3D, 0x8A, 0x81, 0x91, 0xAC, 0x80, 0x50, 0x5D, 0x7D, 0x0E, 
   0x2A, 0x6A, 0x51, 0x51, 0x6F, 0x58, 0x90, 0x92, 0x4E, 0x63, 0xA4, 0x5F, 0x3C, 0x86, 0x59, 0x6F, 
   0x51, 0x2B, 0x7B, 0x44, 0x37, 0x64, 0x7E, 0x7C, 0x69, 0xA2, 0x59, 0x3F, 0x96, 0x35, 0x3E, 0x82, 
   0x65, 0x67, 0x48, 0x0F, 0x73, 0x80, 0x38, 0x5F, 0x82, 0x2D, 0x5F, 0x82, 0x92, 0x9C, 0xB9, 0x67, 
   0x6B, 0x7E, 0x00, 0x00, 0x0D, 0x13, 0x14, 0x88, 0xA0, 0x7A, 0xF3, 0x91, 0xD2, 0xAB, 0x41, 0x7D, 
   0x97, 0x67, 0x36, 0x88, 0x70, 0x5B, 0x7A, 0x24, 0x82, 0x7F, 0x40, 0x48, 0x6E, 0x6D, 0x47, 0x97, 
   0x33, 0x74, 0xB3, 0x0A, 0x4C, 0x53, 0x3F, 0x4C, 0x86, 0x63, 0x4D, 0xD0, 0x53, 0x77, 0x69, 0x6A, 
   0x6D, 0x47, 0x6F, 0x8E, 0xD5, 0x34, 0x53, 0xA2, 0x11, 0x19, 0x5C, 0x61, 0x57, 0x72, 0x6D, 0x7A, 
   0xAB, 0x44, 0x80, 0xA4, 0x43, 0x51, 0x75, 0x49, 0x33, 0x5E, 0x43, 0x5C, 0x8D, 0x4F, 0x6E, 0xAC, 
   0x56, 0x80, 0x80, 0x62, 0x52, 0x8C, 0x56, 0x46, 0xB3, 0x3E, 0x6D, 0xC7, 0x37, 0x73, 0x52, 0x42, 
   0x60, 0x40, 0x43, 0x3D, 0x7B, 0x3F, 0x2E, 0xC2, 0x62, 0x59, 0x80, 0x4C, 0xA7, 0x70, 0x45, 0x85, 
   0xC0, 0x55, 0x6B, 0x9D, 0x3D, 0x34, 0x69, 0x36, 0x27, 0x8A, 0x20, 0x72, 0x95, 0x66, 0x73, 0x83, 
   0x62, 0x56, 0x56, 0x3A, 0x51, 0x90, 0x45, 0x6D, 0xB4, 0x51, 0x5D, 0x99, 0x5D, 0x41, 0x7C, 0x5D, 
   0x64, 0x87, 0x4C, 0x87, 0x8D, 0x3A, 0x75, 0x9D, 0x6D, 0x4A, 0x85, 0x33, 0x10, 0x52, 0x21, 0x3F, 
   0x76, 0x4A, 0x8D, 0xB7, 0x57, 0x89, 0xDA, 0x52, 0x6D, 0x9A, 0x58, 0x65, 0x53, 0x4C, 0x58, 0x69, 
   0x2F, 0x47, 0xA3, 0x52, 0x42, 0x9E, 0x6F, 0x99, 0x92, 0x67, 0x82, 0xB1, 0x10, 0x41, 0x53, 0x20, 
   0x29, 0x30, 0x56, 0x53, 0x93, 0x86, 0xB5, 0xC3, 0x74, 0x76, 0x8B, 0x07, 0x08, 0x7F, 0x18, 0x1B, 
   0x79, 0x88, 0xA7, 0x81, 0x85, 0x9E, 0xAB, 0x63, 0x1C, 0xC3, 0x56, 0x77, 0x89, 0x5E, 0xD0, 0x9D, 
   0x33, 0x6B, 0xA0, 0x0F, 0x00, 0x4E, 0x42, 0x54, 0x6F, 0x4A, 0x73, 0x97, 0x6D, 0x5E, 0xA9, 0x61, 
   0x80, 0xA7, 0x1C, 0x4C, 0x44, 0x37, 0x62, 0x66, 0x43, 0x51, 0xA6, 0x23, 0x35, 0x7E, 0x65, 0x65, 
   0x41, 0x8E, 0xB1, 0xBA, 0x8C, 0x9E, 0xFF, 0x07, 0x12, 0x7B, 0x06, 0x22, 0x00, 0x63, 0x57, 0x23, 
   0x76, 0x83, 0xD4, 0x71, 0x95, 0xE9, 0x4D, 0x7C, 0x72, 0x18, 0x2A, 0x70, 0x1F, 0x09, 0x7B, 0x87, 
   0xA0, 0x7B, 0x92, 0xCE, 0xB8, 0x2E, 0x38, 0x78, 0x00, 0x00, 0x17, 0x4F, 0x86, 0x70, 0xF1, 0xFF, 
   0xFF, 0x77, 0x80, 0xC0, 0x00, 0x00, 0x12, 0x33, 0x4D, 0x50, 0x83, 0x93, 0xD0, 0x2E, 0x40, 0xAA, 
   0x45, 0x89, 0x75, 0x88, 0x9D, 0x84, 0x48, 0x22, 0x92, 0x02, 0x14, 0x53, 0x30, 0x3D, 0x4E, 0x34, 
   0x64, 0x91, 0x81, 0xB1, 0xCD, 0xA9, 0x9E, 0xBB, 0x23, 0x19, 0x26, 0x00, 0x19, 0x76, 0x7F, 0x9D, 
   0xFF, 0x97, 0x66, 0x70, 0x0E, 0x34, 0x0E, 0x19, 0x7D, 0xBA, 0x8B, 0x82, 0xD2, 0x7A, 0x4C, 0x71, 
   0x22, 0x23, 0x43, 0x27, 0x67, 0xC1, 0x5A, 0x61, 0xB0, 0x39, 0x56, 0x33, 0x46, 0x3B, 0x62, 0x85, 
   0x69, 0xF2, 0x61, 0x8B, 0xC8, 0x25, 0x5C, 0x53, 0x12, 0x32, 0x46, 0x14, 0x39, 0x7B, 0x73, 0x63, 
   0x9A, 0xA8, 0xA4, 0xB9, 0x35, 0x65, 0x70, 0x00, 0x1C, 0x88, 0x7A, 0x88, 0xAB, 0x96, 0xA9, 0xCB, 
   0x17, 0x40, 0x8E, 0x1C, 0x0C, 0x0E, 0x66, 0x74, 0x5E, 0x56, 0x98, 0xC7, 0x39, 0x6A, 0x8B, 0x4A, 
   0x35, 0x75, 0x39, 0x41, 0x82, 0x46, 0x77, 0xBC, 0x96, 0x9A, 0x9F, 0x45, 0x6B, 0x77, 0x06, 0x0F, 
   0x7C, 0x45, 0x54, 0x93, 0x91, 0x9A, 0x9F, 0x3C, 0x67, 0x8F, 0x2B, 0x45, 0x8F, 0x6F, 0x79, 0x7E, 
   0x4D, 0x62, 0x9B, 0x4C, 0x6C, 0xA0, 0x56, 0x59, 0x89, 0x17, 0x32, 0x8F, 0x30, 0x6D, 0x84, 0x94, 
   0x91, 0x90, 0x83, 0x6F, 0xA7, 0x4E, 0x5C, 0xB1, 0x29, 0x5A, 0x91, 0x2D, 0x3D, 0x35, 0x45, 0x33, 
   0x5A, 0x53, 0x7A, 0xCC, 0x61, 0x8D, 0xFC, 0x7F, 0x6C, 0x9F, 0x6D, 0x8D, 0x5C, 0x5A, 0x73, 0x87, 
   0x19, 0x27, 0x98, 0x20, 0x16, 0x76, 0x88, 0x86, 0x87, 0x88, 0xCC, 0xCB, 0x3B, 0x7A, 0x80, 0x00, 
   0x16, 0x46, 0x2F, 0x38, 0xAD, 0x8D, 0x8A, 0xBF, 0x73, 0x8C, 0x65, 0x24, 0x32, 0x8E, 0x6E, 0x77, 
   0xBC, 0x74, 0xBB, 0x66, 0x45, 0x47, 0x8D, 0x48, 0x1D, 0xAE, 0x52, 0x82, 0x8B, 0x4C, 0x76, 0x7F, 
   0x2F, 0x10, 0x8A, 0x3B, 0x5B, 0x7E, 0x7A, 0xB7, 0x9F, 0x57, 0x5C, 0x87, 0x00, 0x1D, 0x59, 0x5E, 
   0x78, 0x6B, 0xA4, 0x73, 0xC3, 0x39, 0x63, 0xE4, 0x32, 0x79, 0x6E, 0x7B, 0x71, 0x26, 0x30, 0x4D, 
   0x4E, 0x36, 0x31, 0xAD, 0x6F, 0x70, 0xD1, 0x47, 0x9D, 0x86, 0x47, 0x1A, 0x40, 0x63, 0x1B, 0x8F, 
   0x3A, 0xA6, 0x7A, 0x24, 0xA8, 0x66, 0x6F, 0x5C, 0xDA, 0x64, 0x37, 0xB9, 0x2B, 0x1B, 0x62, 0x37, 
   0x73, 0x88, 0x72, 0xC5, 0x8C, 0x62, 0x65, 0x6A, 0x57, 0x36, 0x8D, 0x6C, 0x79, 0xC1, 0x3C, 0x88, 
   0x87, 0x0E, 0x20, 0x5D, 0x2D, 0x2C, 0x5D, 0x75, 0x85, 0xB9, 0xA9, 0xA3, 0xBF, 0x5E, 0x75, 0x6E, 
   0x01, 0x41, 0x56, 0x55, 0x5C, 0x5D, 0x61, 0x51, 0x6D, 0x19, 0x47, 0xC7, 0x7A, 0x98, 0xFA, 0x8B, 
   0x9E, 0x48, 0x2E, 0x6D, 0x36, 0x1B, 0x36, 0xC7, 0x33, 0x09, 0x86, 0x5E, 0x4C, 0x9D, 0x98, 0xC2, 
   0xDE, 0x5E, 0x90, 0x57, 0x33, 0x61, 0x5E, 0x26, 0x7F, 0x9F, 0x3D, 0x27, 0x28, 0x3F, 0x1B, 0x58, 
   0x5F, 0x57, 0xE4, 0x73, 0x8F, 0xA1, 0x7A, 0x71, 0x5C, 0x7D, 0xB5, 0xAB, 0x51, 0x99, 0xA3, 0x4C, 
   0x42, 0x89, 0x2C, 0x21, 0x6F, 0x00, 0x00, 0x4C, 0x53, 0x74, 0x6B, 0xB1, 0x8E, 0xBD, 0x5C, 0x56, 
   0xA6, 0x31, 0x71, 0x4E, 0x25, 0x6B, 0x6A, 0x49, 0x3D, 0x9E, 0x8E, 0x69, 0x93, 0x97, 0x62, 0x86, 
   0x32, 0x7E, 0x99, 0x00, 0x23, 0x20, 0x53, 0x57, 0x7F, 0x53, 0x4C, 0x74, 0x74, 0x90, 0x9C, 0x40, 
   0x78, 0x9D, 0x17, 0x32, 0x8D, 0x14, 0x16, 0x6C, 0x68, 0x80, 0x85, 0xA9, 0xC2, 0xD6, 0x7A, 0x8D, 
   0xDA, 0x21, 0x39, 0x49, 0x07, 0x1F, 0x57, 0x56, 0x53, 0xAD, 0x5C, 0x8D, 0xA2, 0x51, 0x70, 0x63, 
   0x4B, 0x36, 0x91, 0x44, 0x57, 0xAE, 0x3F, 0x5D, 0x96, 0x3A, 0x47, 0x61, 0x64, 0x49, 0x73, 0x70, 
   0xA5, 0xAE, 0x58, 0x6C, 0xAF, 0x29, 0x32, 0x9C, 0x4A, 0x6F, 0x78, 0x55, 0x5E, 0x82, 0x38, 0x4C, 
   0x7C, 0x4A, 0x7F, 0x8C, 0x6C, 0x72, 0x87, 0x43, 0x21, 0x8C, 0x1B, 0x27, 0x7B, 0x43, 0x79, 0x54, 
   0x56, 0x8D, 0xA1, 0x5B, 0x7B, 0xDB, 0x3E, 0x6D, 0xA5, 0x32, 0x2D, 0x3B, 0x49, 0x3D, 0x61, 0x60, 
   0x76, 0x62, 0x55, 0x44, 0x8B, 0x28, 0x2F, 0x8D, 0x50, 0x70, 0x73, 0x6E, 0x95, 0x9C, 0x4C, 0x84, 
   0x9D, 0x61, 0x49, 0x91, 0x32, 0x52, 0x90, 0x20, 0x5C, 0x73, 0x59, 0x55, 0x94, 0x55, 0x49, 0x7D, 
   0x34, 0x44, 0x6C, 0x67, 0x6C, 0x8F, 0x45, 0x5C, 0x8B, 0x3A, 0x56, 0x86, 0x5D, 0x57, 0x99, 0x6F, 
   0x42, 0xA5, 0x46, 0xA4, 0xAF, 0x34, 0x86, 0x80, 0x44, 0x3A, 0x84, 0x4F, 0x3D, 0x6D, 0x4A, 0x17, 
   0x53, 0x3F, 0x6A, 0xBC, 0x45, 0xAB, 0xD9, 0x68, 0x94, 0x9E, 0x46, 0x2B, 0x52, 0x35, 0x0E, 0x62, 
   0x46, 0x59, 0x97, 0x5E, 0x9F, 0xA4, 0x70, 0x83, 0xA4, 0x5D, 0x53, 0xB8, 0x43, 0x3F, 0x7B, 0x03, 
   0x2E, 0x2E, 0x2B, 0x73, 0x6E, 0x78, 0x63, 0x9F, 0x5D, 0x53, 0xB8, 0x4D, 0x65, 0x96, 0x3C, 0x62, 
   0x62, 0x54, 0x69, 0x5E, 0x5B, 0x5A, 0xA5, 0x44, 0x93, 0xDF, 0x75, 0x96, 0xB4, 0x4B, 0x59, 0x50, 
   0x10, 0x12, 0x4E, 0x32, 0x5B, 0xAE, 0x6C, 0x67, 0x8C, 0x66, 0x46, 0x80, 0x2D, 0x48, 0x8B, 0x1D, 
   0x93, 0x86, 0x89, 0xA9, 0xA7, 0x61, 0x35, 0x83, 0x2B, 0x22, 0x54, 0x00, 0x50, 0x65, 0x50, 0x53, 
   0x7E, 0x97, 0x93, 0xA9, 0x54, 0xA9, 0xD6, 0x59, 0x34, 0x8E, 0x4C, 0x16, 0x1E, 0x18, 0x3A, 0x62, 
   0x46, 0x8D, 0xA9, 0x5E, 0x94, 0x85, 0x4E, 0x4F, 0x87, 0x64, 0x49, 0x89, 0x58, 0x6B, 0xCE, 0x36, 
   0x6B, 0xC0, 0x52, 0x43, 0x50, 0x68, 0x5B, 0x38, 0x35, 0x6E, 0x8A, 0x0E, 0x64, 0x9F, 0x6B, 0x80, 
   0xCD, 0x8E, 0x85, 0x8C, 0x4F, 0x39, 0x36, 0x25, 0x34, 0x7B, 0x5C, 0x95, 0xDC, 0x4F, 0x9F, 0x91, 
   0x15, 0x1A, 0x44, 0x4D, 0x3A, 0x70, 0x5E, 0x83, 0x87, 0x25, 0x40, 0x72, 0x15, 0x53, 0x7B, 0x67, 
   0x98, 0xB0, 0x6F, 0x4D, 0xB0, 0x47, 0x25, 0x50, 0x42, 0x59, 0x89, 0x53, 0x79, 0xC2, 0x65, 0x86, 
   0x7D, 0x53, 0xA0, 0x70, 0x4D, 0x37, 0x75, 0x41, 0x25, 0x98, 0x46, 0x7A, 0x9E, 0x79, 0xA2, 0x8B, 
   0x39, 0x4A, 0x51, 0x33, 0x0B, 0x48, 0x44, 0x4B, 0xB2, 0x45, 0xA4, 0xE1, 0x84, 0xCA, 0x8A, 0x5A, 
   0x38, 0x43, 0x0E, 0x00, 0x5F, 0x03, 0x4A, 0xBC, 0x5B, 0xB5, 0xAD, 0xA1, 0x8F, 0x5D, 0x72, 0x53, 
   0x9A, 0x00, 0x1D, 0xA1, 0x06, 0x25, 0x7A, 0xB4, 0x8F, 0x88, 0x8D, 0xB7, 0xD3, 0x57, 0x53, 0xAE, 
   0x0F, 0x0B, 0x4F, 0x09, 0x27, 0x4E, 0x50, 0x7A, 0xB7, 0xA1, 0xBB, 0xDB, 0x62, 0x59, 0x6E, 0x05, 
   0x0E, 0x4C, 0x16, 0x53, 0xAF, 0x7A, 0x8E, 0xAB, 0x8C, 0x72, 0x8F, 0x41, 0x55, 0x88, 0x2E, 0x54, 
   0x99, 0x34, 0x54, 0x7C, 0x3B, 0x5A, 0x66, 0x87, 0x6D, 0xA0, 0x70, 0x6E, 0xA7, 0x19, 0x62, 0x9B, 
   0x40, 0x60, 0x7D, 0x6D, 0x48, 0x71, 0x2E, 0x37, 0x9A, 0x3A, 0x61, 0x9B, 0x6F, 0x90, 0x95, 0x3D, 
   0x63, 0x8F, 0x39, 0x41, 0x83, 0x7E, 0x6F, 0x83, 0x7D, 0xA1, 0xA5, 0x41, 0x61, 0xA9, 0x1C, 0x37, 
   0x54, 0x1C, 0x3E, 0x56, 0x30, 0x5D, 0xBA, 0x7E, 0x8D, 0xF5, 0xA6, 0x98, 0x8D, 0x1C, 0x46, 0x6E, 
   0x00, 0x29, 0x8E, 0x93, 0x6E, 0x8D, 0x6B, 0x86, 0x81, 0x21, 0x4E, 0x86, 0x64, 0x86, 0x91, 0x63, 
   0x7E, 0xA2, 0x13, 0x1C, 0x79, 0x41, 0x38, 0x6D, 0x5A, 0x7F, 0x69, 0x3B, 0x71, 0x88, 0x87, 0x7D, 
   0xD5, 0x92, 0x76, 0xC3, 0x56, 0x58, 0x7C, 0x30, 0x6C, 0x7F, 0x3F, 0x42, 0x7D, 0x1D, 0x2B, 0x54, 
   0x4C, 0x6B, 0x72, 0x8B, 0x78, 0xB2, 0x47, 0x5C, 0xCF, 0x3B, 0x7E, 0x82, 0x46, 0x56, 0x30, 0x2B, 
   0x34, 0x59, 0x5A, 0x84, 0xDD, 0x98, 0x7E, 0x9F, 0x1A, 0x39, 0x64, 0x00, 0x39, 0x4C, 0xAA, 0x94, 
   0xA7, 0xA9, 0x98, 0xD9, 0x00, 0x23, 0x55, 0x04, 0x05, 0x32, 0x4F, 0x5D, 0x94, 0x37, 0x72, 0x76, 
   0x83, 0x6A, 0xC3, 0xC1, 0xC0, 0xCE, 0x00, 0x9B, 0x5B, 0x01, 0x0F, 0x7C, 0x6F, 0x03, 0x93, 0x6A, 
   0x7D, 0x72, 0x37, 0x92, 0xA0, 0x1A, 0x97, 0xB6, 0x55, 0x46, 0x65, 0x74, 0x2A, 0x43, 0x62, 0x91, 
   0xBB, 0x49, 0xA1, 0xD2, 0x0F, 0x4A, 0x75, 0x44, 0x1B, 0x3A, 0x69, 0x28, 0x68, 0x7B, 0x81, 0xCB, 
   0x64, 0xB1, 0x98, 0x41, 0x72, 0x4F, 0x57, 0x30, 0x52, 0x41, 0x46, 0xA6, 0x5F, 0x6A, 0xE6, 0x9C, 
   0xC0, 0x94, 0x3A, 0x63, 0x3E, 0x00, 0x00, 0x58, 0x52, 0x41, 0xE5, 0x88, 0x9F, 0xF7, 0x78, 0x74, 
   0x93, 0x75, 0x73, 0x86, 0x11, 0x8C, 0x7B, 0x26, 0x35, 0x3F, 0x54, 0x50, 0x50, 0x40, 0x6E, 0xA3, 
   0x22, 0x38, 0xC8, 0xAE, 0x6A, 0x80, 0x9E, 0xB6, 0xA2, 0x4B, 0x8E, 0xA7, 0x5C, 0x89, 0x9A, 0x57, 
   0x6C, 0xA8, 0x00, 0x0C, 0x60, 0x11, 0x00, 0x36, 0x64, 0x4C, 0x5A, 0x5C, 0xAB, 0x9D, 0x84, 0x8A, 
   0xD8, 0x45, 0x34, 0xBA, 0x2D, 0x4F, 0x51, 0x49, 0x8E, 0x78, 0x71, 0x60, 0xA6, 0x7A, 0x6E, 0xC1, 
   0x32, 0x3A, 0x96, 0x00, 0x55, 0x0B, 0x68, 0x6C, 0x89, 0x84, 0x77, 0x89, 0x00, 0x28, 0x47, 0x24, 
   0x51, 0x9A, 0x8D, 0x92, 0xFF, 0x6C, 0x87, 0x89, 0x1D, 0x47, 0x54, 0x68, 0x3B, 0x7B, 0x9A, 0x8A, 
   0x99, 0x4E, 0x8E, 0xA4, 0x0C, 0x1A, 0x6F, 0x4A, 0x2A, 0x80, 0x50, 0x7B, 0xA2, 0x4C, 0x93, 0x85, 
   0x5D, 0x65, 0x75, 0x68, 0x53, 0xCF, 0x40, 0x47, 0x89, 0x2E, 0x58, 0x27, 0x5C, 0x75, 0x7E, 0x57, 
   0x4D, 0xE0, 0x2A, 0x4E, 0x75, 0x6E, 0x83, 0x6E, 0x6D, 0x83, 0xAC, 0x21, 0x64, 0x99, 0x15, 0x51, 
   0x5E, 0x60, 0x3E, 0x4D, 0x4A, 0x49, 0xA3, 0x4F, 0x66, 0xBA, 0x38, 0x5B, 0x59, 0x33, 0x2F, 0x59, 
   0x77, 0x7A, 0xB5, 0x49, 0x97, 0xBA, 0x32, 0x51, 0x7A, 0x49, 0x43, 0x4B, 0x60, 0x42, 0x68, 0x38, 
   0x32, 0xC4, 0x4A, 0x68, 0x7B, 0x66, 0x8C, 0x4E, 0x22, 0x59, 0xA4, 0x4B, 0x5F, 0xB1, 0x84, 0x54, 
   0x79, 0x29, 0x65, 0x74, 0x3F, 0x70, 0xB8, 0x6C, 0x85, 0xA0, 0x43, 0x45, 0x55, 0x2C, 0x38, 0x6C, 
   0x55, 0x5F, 0xC2, 0x56, 0x66, 0x89, 0x50, 0x5B, 0x67, 0x4B, 0x3F, 0x6E, 0x40, 0x6E, 0xA9, 0x46, 
   0x80, 0xC0, 0x6E, 0x47, 0x6F, 0x50, 0x52, 0x68, 0x28, 0x6E, 0x79, 0x3F, 0x57, 0x97, 0x67, 0x6D, 
   0xAE, 0x50, 0x40, 0x80, 0x3F, 0x63, 0x79, 0x56, 0x81, 0x80, 0x5C, 0x4E, 0xA8, 0x41, 0x55, 0x91, 
   0x58, 0x7D, 0x5E, 0x4D, 0x88, 0x97, 0x47, 0x59, 0xBE, 0x58, 0x35, 0x6D, 0x67, 0x51, 0x93, 0x54, 
   0x89, 0x96, 0x19, 0x44, 0x3A, 0x0E, 0x2D, 0x68, 0x3F, 0x3B, 0xAF, 0x9E, 0xA6, 0x9B, 0x77, 0xAE, 
   0x91, 0x26, 0x31, 0x86, 0x36, 0x5E, 0x91, 0x62, 0xD4, 0x96, 0x3F, 0x5E, 0x94, 0x16, 0x00, 0x6A, 
   0x4A, 0x5B, 0x53, 0x72, 0x9B, 0x9E, 0x61, 0x4C, 0xA9, 0x3E, 0x41, 0x7A, 0x33, 0x81, 0x4C, 0x4B, 
   0x60, 0x8B, 0x68, 0x65, 0xC4, 0x67, 0x80, 0x8F, 0x21, 0x34, 0x2C, 0x3C, 0x45, 0x60, 0x3C, 0x89, 
   0xC1, 0x00, 0x3A, 0xA5, 0x5D, 0x46, 0x28, 0x9F, 0x96, 0x73, 0x66, 0x52, 0xF7, 0x3B, 0x4B, 0x8E, 
   0x12, 0x46, 0x00, 0x35, 0x58, 0x41, 0x75, 0x4F, 0xA1, 0x65, 0x9B, 0xBC, 0x58, 0xB5, 0xD3, 0x29, 
   0x13, 0x80, 0x23, 0x00, 0x34, 0x47, 0x8A, 0x46, 0xAE, 0xF9, 0xD7, 0x63, 0x73, 0xE7, 0x00, 0x00, 
   0x19, 0x31, 0x4A, 0x37, 0xDA, 0xBF, 0xFF, 0x8A, 0x81, 0xC7, 0x03, 0x51, 0x4D, 0x5A, 0x86, 0x6C, 
   0x63, 0x50, 0x92, 0x02, 0x00, 0x59, 0x2A, 0x47, 0x39, 0x6C, 0xB1, 0x98, 0x68, 0x9B, 0xDA, 0x62, 
   0x5F, 0xB1, 0x28, 0x1D, 0x17, 0x00, 0x13, 0x7E, 0x82, 0x7E, 0xF1, 0xBC, 0xCC, 0x8F, 0x2D, 0x7C, 
   0x2D, 0x00, 0x40, 0x88, 0x80, 0x75, 0xE3, 0x7F, 0x3A, 0x70, 0x22, 0x33, 0x4C, 0x16, 0x7E, 0x9B, 
   0x7D, 0x73, 0x7F, 0x5C, 0x2F, 0x54, 0x35, 0x3C, 0x85, 0x78, 0xBF, 0xFF, 0x54, 0x8F, 0xB7, 0x1E, 
   0x0E, 0x00, 0x00, 0x00, 0x2B, 0x39, 0x3B, 0x9C, 0xA3, 0xB3, 0xF6, 0xA2, 0xF8, 0xCC, 0x1C, 0x59, 
   0x2F, 0x00, 0x00, 0x3E, 0x56, 0x41, 0x84, 0xB4, 0xD3, 0xE7, 0x6F, 0x8E, 0xAE, 0x11, 0x19, 0x51, 
   0x20, 0x45, 0x4A, 0x5A, 0x78, 0xAC, 0x56, 0x62, 0xA7, 0x45, 0x3C, 0x63, 0x67, 0x70, 0x85, 0x2E, 
   0x7C, 0x97, 0x34, 0x60, 0x7B, 0x62, 0x4E, 0x99, 0x41, 0x5A, 0x9A, 0x4D, 0x5B, 0x94, 0x8B, 0x9A, 
   0x83, 0x24, 0x5A, 0x83, 0x18, 0x10, 0x8F, 0x6F, 0x61, 0x8A, 0x70, 0xAC, 0xA1, 0x58, 0x72, 0x9B, 
   0x34, 0x42, 0x8E, 0x28, 0x31, 0x60, 0x40, 0x6C, 0x83, 0x7A, 0x95, 0x95, 0x4D, 0x57, 0xB7, 0x2B, 
   0x3A, 0x83, 0x38, 0x63, 0x65, 0x68, 0x86, 0x71, 0x96, 0x69, 0xA0, 0x71, 0x79, 0xB2, 0x1D, 0x5A, 
   0xAA, 0x00, 0x1B, 0x42, 0x55, 0x55, 0x33, 0x5D, 0x9B, 0xC0, 0x44, 0x58, 0xF0, 0x5D, 0x37, 0x9F, 
   0x90, 0x8D, 0x68, 0x4A, 0x98, 0x99, 0x20, 0x3B, 0x8C, 0x4D, 0x45, 0x58, 0x3D, 0x58, 0x91, 0x76, 
   0xA8, 0xD0, 0x7A, 0x84, 0x74, 0x00, 0x00, 0x34, 0x0E, 0x2E, 0x90, 0x95, 0xC4, 0x99, 0x7B, 0x75, 
   0x90, 0x53, 0x30, 0xD9, 0x72, 0x95, 0xA9, 0x36, 0x78, 0x56, 0x00, 0x21, 0x76, 0x39, 0x49, 0x7C, 
   0x73, 0x8E, 0x77, 0x46, 0x6C, 0xAC, 0x41, 0x2D, 0x9B, 0x59, 0x6D, 0x8F, 0x87, 0x90, 0x94, 0x42, 
   0x62, 0x9D, 0x2A, 0x44, 0x46, 0x52, 0x6C, 0x4D, 0x54, 0x4B, 0xA5, 0x6C, 0x68, 0xE5, 0x60, 0xA0, 
   0xB4, 0x69, 0x86, 0x3D, 0x4F, 0x22, 0x3A, 0x00, 0x00, 0x5E, 0x05, 0x53, 0x7F, 0x70, 0xBE, 0xA6, 
   0xA6, 0x7B, 0xD0, 0x5C, 0x35, 0xA5, 0x3C, 0x44, 0x58, 0x14, 0x6C, 0x35, 0x64, 0x77, 0x80, 0x7B, 
   0x3E, 0xAB, 0x3B, 0x4F, 0xA1, 0x0D, 0x67, 0xA0, 0x43, 0x85, 0x71, 0x6E, 0x69, 0x65, 0x8D, 0x48, 
   0x82, 0x75, 0xA9, 0xC2, 0x49, 0x95, 0xC6, 0x0E, 0x1B, 0x46, 0x21, 0x00, 0x3A, 0x63, 0x7B, 0x98, 
   0xAA, 0xB9, 0xA7, 0x4F, 0xA8, 0x8D, 0x10, 0x45, 0xB5, 0x8C, 0x47, 0x89, 0x69, 0x5C, 0x7A, 0x00, 
   0x2F, 0xA8, 0x5E, 0x4E, 0xA3, 0x6B, 0x84, 0x5C, 0x3F, 0xA8, 0xBE, 0x83, 0x53, 0xEC, 0x65, 0x6D, 
   0xA0, 0x26, 0x6A, 0x9A, 0x74, 0x35, 0x6C, 0x5C, 0x2F, 0x31, 0x0D, 0x70, 0xA3, 0x54, 0x7E, 0xAF, 
   0x7E, 0x53, 0x2E, 0x64, 0x82, 0xA1, 0x7A, 0x92, 0xB3, 0x87, 0x8F, 0x85, 0x39, 0x48, 0xA0, 0x09, 
   0x5D, 0x7C, 0x64, 0x78, 0x6F, 0x70, 0x43, 0x85, 0x42, 0x32, 0x7F, 0x31, 0x4A, 0x7B, 0x5C, 0x90, 
   0x89, 0x80, 0x6E, 0xE5, 0x63, 0x40, 0xAA, 0x60, 0x6D, 0x41, 0x3A, 0x99, 0x83, 0x16, 0x2B, 0x9E, 
   0x5A, 0x46, 0x5F, 0x5B, 0x68, 0x8B, 0x31, 0x53, 0x72, 0x1B, 0x4D, 0x5C, 0x4B, 0x33, 0x91, 0x44, 
   0x53, 0xB1, 0x85, 0xA6, 0x9C, 0x8B, 0xC3, 0xD8, 0x5B, 0x59, 0x85, 0x0E, 0x21, 0x28, 0x1F, 0x48, 
   0x62, 0x80, 0x6B, 0xE2, 0x74, 0x9E, 0xB0, 0x0C, 0x59, 0x64, 0x28, 0x14, 0x63, 0x62, 0x5F, 0xA7, 
   0x58, 0x99, 0xC3, 0x4D, 0x55, 0x4A, 0x5D, 0x49, 0x5B, 0x4B, 0x91, 0xC2, 0x33, 0x5D, 0x8F, 0x0B, 
   0x0D, 0x5C, 0x6D, 0x53, 0x9A, 0x73, 0xA5, 0xA6, 0x40, 0x78, 0x8F, 0x44, 0x5F, 0x94, 0x5A, 0x5C, 
   0x76, 0x3E, 0x38, 0x70, 0x38, 0x44, 0x92, 0x50, 0x7E, 0x7C, 0x79, 0x6D, 0x93, 0x61, 0x5C, 0xB9, 
   0x26, 0x50, 0x72, 0x1F, 0x50, 0x37, 0x59, 0x6C, 0x60, 0x60, 0x66, 0xA1, 0x3E, 0x2D, 0xB5, 0x3E, 
   0x3F, 0x88, 0x44, 0x7A, 0x7C, 0x56, 0x98, 0x92, 0x4A, 0x69, 0x7B, 0x38, 0x18, 0x70, 0x28, 0x40, 
   0x9F, 0x67, 0x92, 0x9A, 0x68, 0x82, 0x83, 0x5C, 0x48, 0x6C, 0x2D, 0x68, 0x8F, 0x32, 0x5B, 0xA6, 
   0x4E, 0x43, 0x89, 0x38, 0x4E, 0x71, 0x44, 0x49, 0x72, 0x5B, 0x5C, 0xA1, 0x39, 0x7F, 0xAD, 0x56, 
   0x73, 0x8B, 0x4B, 0x33, 0x90, 0x4B, 0x2F, 0x69, 0x4B, 0x86, 0x86, 0x40, 0x87, 0xB4, 0x5C, 0x6F, 
   0xC4, 0x50, 0x50, 0x6B, 0x43, 0x04, 0x1A, 0x10, 0x23, 0x8E, 0x44, 0x93, 0xD6, 0x7F, 0xC3, 0xB0, 
   0x4D, 0x6D, 0x8C, 0x3B, 0x26, 0x78, 0x46, 0x52, 0x77, 0x4C, 0x6E, 0x82, 0x57, 0x74, 0x89, 0x7D, 
   0x61, 0xAB, 0x36, 0x43, 0xA2, 0x00, 0x26, 0x39, 0x20, 0x45, 0x3A, 0x6F, 0x6C, 0x8E, 0x99, 0x8C, 
   0xD1, 0x5F, 0x81, 0xD6, 0x4B, 0x94, 0x8E, 0x20, 0x2F, 0x41, 0x26, 0x0A, 0x4C, 0x4A, 0x5F, 0xA9, 
   0x73, 0x73, 0xBB, 0x67, 0x5E, 0x71, 0x21, 0x5F, 0x8B, 0x10, 0x70, 0x7A, 0x61, 0x59, 0x74, 0x79, 
   0x53, 0x96, 0x35, 0x4D, 0x85, 0x3A, 0x5F, 0x68, 0x89, 0x91, 0xAC, 0x65, 0x73, 0xB1, 0x0E, 0x26, 
   0x6F, 0x19, 0x3B, 0x46, 0x33, 0x1B, 0x3D, 0x6A, 0x69, 0xA2, 0x89, 0xCB, 0xFF, 0x6B, 0x6F, 0xB9, 
   0x24, 0x0C, 0x37, 0x2E, 0x18, 0x25, 0x68, 0x8D, 0x8E, 0x6F, 0xC1, 0xDA, 0x41, 0x32, 0x8B, 0x40, 
   0x1A, 0x36, 0x35, 0x60, 0x81, 0x58, 0x90, 0xE9, 0x69, 0x90, 0x98, 0x68, 0x60, 0x40, 0x29, 0x1A, 
   0x4B, 0x00, 0x16, 0x98, 0x72, 0x92, 0xDF, 0xB8, 0xEE, 0xB6, 0x71, 0x50, 0x51, 0x0B, 0x00, 0x49, 
   0x30, 0x49, 0x8D, 0x3B, 0x62, 0x67, 0x00, 0x33, 0x7C, 0x6E, 0xA7, 0xBD, 0xCA, 0xBD, 0xC9, 0x23, 
   0x1B, 0x52, 0x00, 0x0E, 0x79, 0x7A, 0x65, 0xB8, 0x7D, 0x74, 0x84, 0x3F, 0x81, 0x73, 0x55, 0x86, 
   0x95, 0x5A, 0x56, 0x9A, 0x4D, 0x48, 0x88, 0x50, 0x83, 0x91, 0x43, 0x26, 0x67, 0x15, 0x04, 0x40, 
   0x2D, 0x68, 0x8C, 0x6E, 0xA9, 0xD3, 0x90, 0xA8, 0xA0, 0x43, 0x44, 0x66, 0x0D, 0x00, 0x88, 0x00, 
   0x4E, 0x94, 0x3F, 0x79, 0x62, 0xA9, 0x60, 0x6B, 0x92, 0x78, 0xD4, 0x0C, 0x7D, 0xD4, 0x00, 0x3E, 
   0x76, 0x95, 0x43, 0x5D, 0x79, 0x8D, 0x99, 0x16, 0x5E, 0x81, 0x3D, 0x29, 0x5A, 0x3E, 0x57, 0x6D, 
   0x4B, 0x91, 0xC5, 0x7E, 0x74, 0xB4, 0x4F, 0x2E, 0x75, 0x0A, 0x1D, 0x5E, 0x29, 0x7B, 0x9D, 0xA8, 
   0xB1, 0xB4, 0x7F, 0x83, 0x6F, 0x00, 0x15, 0x6A, 0x2D, 0x4E, 0x9E, 0x68, 0x83, 0xB1, 0x5A, 0x62, 
   0x84, 0x81, 0x6D, 0x95, 0x41, 0x66, 0xA1, 0x07, 0x4F, 0xA1, 0x57, 0x77, 0x95, 0x8A, 0x70, 0x8F, 
   0x40, 0x37, 0x7D, 0x0C, 0x43, 0x9A, 0x79, 0x9A, 0x84, 0x58, 0x79, 0xA6, 0x36, 0x3A, 0x8F, 0x42, 
   0x68, 0x88, 0x54, 0x7A, 0x83, 0x50, 0x5D, 0x94, 0x5C, 0x46, 0x95, 0x72, 0x68, 0xA1, 0x4E, 0x79, 
   0xB2, 0x50, 0x71, 0x99, 0x26, 0x53, 0x42, 0x04, 0x1A, 0x56, 0x14, 0x34, 0xC6, 0xAD, 0xA4, 0xEA, 
   0xBA, 0xB8, 0x93, 0x34, 0x6C, 0x67, 0x03, 0x41, 0x70, 0x42, 0x34, 0xA8, 0x71, 0x67, 0x80, 0x66, 
   0x58, 0x5E, 0x43, 0x80, 0xA8, 0x42, 0x74, 0x9D, 0x37, 0x4B, 0x70, 0x54, 0x4A, 0x98, 0x72, 0x66, 
   0xA8, 0x5B, 0x7D, 0x6F, 0x38, 0x39, 0xA2, 0x5F, 0x45, 0x84, 0x4E, 0x8A, 0x61, 0x5D, 0x7E, 0x94, 
   0x45, 0x4A, 0xA4, 0x1D, 0x4E, 0x71, 0x3A, 0x70, 0x5B, 0x5E, 0x3F, 0x96, 0x54, 0x73, 0xF6, 0x86, 
   0x9B, 0x81, 0x0C, 0x2D, 0x23, 0x00, 0x0B, 0x42, 0x82, 0x90, 0xDA, 0xD9, 0xC9, 0xFF, 0x1A, 0x49, 
   0x80, 0x00, 0x19, 0x1A, 0x83, 0x52, 0x46, 0x4B, 0x86, 0x7C, 0x13, 0x4A, 0x81, 0x6F, 0x79, 0xEA, 
   0x5F, 0xA0, 0xB1, 0x22, 0x1D, 0x3D, 0x67, 0x17, 0x7F, 0xA4, 0xAC, 0x8A, 0x20, 0xAC, 0x5E, 0x2A, 
   0x3E, 0xAA, 0x63, 0x25, 0xAB, 0x52, 0x2B, 0x5C, 0x2C, 0x67, 0xA0, 0x3F, 0x9D, 0xB6, 0x81, 0x75, 
   0x5F, 0x87, 0x47, 0x43, 0x62, 0x63, 0x99, 0x0F, 0x73, 0xAA, 0x0E, 0x45, 0x6A, 0x33, 0x36, 0x2E, 
   0x65, 0x6C, 0xAF, 0x90, 0x9D, 0xF6, 0x84, 0xB4, 0x95, 0x3D, 0x6C, 0x72, 0x24, 0x18, 0x73, 0x25, 
   0x00, 0x66, 0x50, 0x56, 0xCA, 0x9D, 0xE4, 0xFF, 0x9C, 0xA8, 0x47, 0x21, 0x61, 0x4A, 0x1A, 0x78, 
   0xF3, 0x64, 0x36, 0x86, 0x76, 0x0D, 0x39, 0x37, 0x92, 0xB4, 0x38, 0x68, 0xA2, 0x7E, 0x55, 0x3F, 
   0x7E, 0xC2, 0x72, 0x4F, 0x9E, 0x8A, 0x53, 0x44, 0xA1, 0x6C, 0x1E, 0x9A, 0x2D, 0x3A, 0x72, 0x28, 
   0x76, 0x61, 0x96, 0x84, 0x96, 0x8F, 0xB1, 0xB2, 0x1A, 0x5E, 0x8E, 0x0D, 0x06, 0x48, 0x38, 0x5B, 
   0x65, 0x75, 0x9C, 0x89, 0xC5, 0x96, 0xB7, 0x66, 0x4B, 0xCB, 0x00, 0x38, 0x44, 0x0F, 0x87, 0x3D, 
   0x29, 0x49, 0x99, 0xC4, 0x5F, 0xA0, 0x0E, 0x36, 0x6F, 0x00, 0x15, 0x5F, 0x6F, 0x73, 0xAF, 0xA6, 
   0x9F, 0x99, 0x58, 0x68, 0x87, 0x46, 0x7E, 0x86, 0x7C, 0xA2, 0x96, 0x29, 0x4E, 0x83, 0x00, 0x07, 
   0x4A, 0x51, 0x30, 0x7A, 0x92, 0x99, 0xCC, 0x64, 0x9A, 0xAA, 0x18, 0x54, 0x81, 0x2E, 0x1F, 0x84, 
   0x51, 0x54, 0x7D, 0x47, 0x9A, 0x66, 0x69, 0xA5, 0x83, 0x5C, 0x31, 0xBD, 0x1D, 0x29, 0xB1, 0x55, 
   0x68, 0x44, 0x55, 0x69, 0x76, 0x2D, 0x48, 0xAA, 0x50, 0x81, 0x82, 0x62, 0x75, 0x67, 0x50, 0x4B, 
   0xB7, 0x33, 0x2E, 0xBB, 0x38, 0x72, 0x48, 0x50, 0x51, 0x65, 0x79, 0x68, 0xDC, 0x6C, 0x94, 0xC3, 
   0x0F, 0x2C, 0x53, 0x2A, 0x20, 0x34, 0x64, 0x7C, 0x64, 0x49, 0x56, 0xBE, 0x3E, 0x63, 0xBB, 0x4A, 
   0x8C, 0x67, 0x56, 0x58, 0xA4, 0x4B, 0x5D, 0xAE, 0x61, 0x5C, 0x68, 0x38, 0x4A, 0x40, 0x1C, 0x3A, 
   0x8B, 0x5B, 0x74, 0xBA, 0x6E, 0x6F, 0x66, 0x41, 0x64, 0x5C, 0x62, 0x5E, 0xC9, 0x4A, 0x73, 0xB2, 
   0x27, 0x54, 0x5B, 0x4E, 0x26, 0x4F, 0x5A, 0x60, 0xB0, 0x4A, 0x89, 0xB0, 0x55, 0x5B, 0x5A, 0x3E, 
   0x32, 0x54, 0x33, 0x49, 0xA1, 0x4B, 0x68, 0xAF, 0x63, 0x5F, 0xB5, 0x63, 0x87, 0x97, 0x3A, 0x81, 
   0x72, 0x5B, 0x5C, 0x70, 0x38, 0x26, 0x64, 0x37, 0x17, 0x5F, 0x21, 0x8C, 0x8A, 0x67, 0x9A, 0xD6, 
   0x5D, 0x6C, 0xD0, 0x58, 0x3C, 0x55, 0x46, 0x40, 0x53, 0x45, 0x74, 0x7C, 0x39, 0x79, 0x95, 0x56, 
   0x45, 0xB2, 0x5B, 0x3E, 0xB6, 0x55, 0x77, 0x5D, 0x2C, 0x34, 0x35, 0x16, 0x26, 0x87, 0x6E, 0x6E, 
   0xCE, 0x9C, 0xF0, 0xC2, 0x3F, 0x63, 0x6F, 0x00, 0x00, 0x44, 0x26, 0x3B, 0x56, 0x7D, 0xA4, 0x97, 
   0x79, 0x5D, 0xD8, 0x34, 0x31, 0x9E, 0x2D, 0x7C, 0x2B, 0x4A, 0x88, 0x86, 0x56, 0x59, 0xD6, 0x4B, 
   0x41, 0x7A, 0x4B, 0x5E, 0x3A, 0x4B, 0x5F, 0x91, 0x72, 0x8C, 0xD0, 0x4A, 0x73, 0xB6, 0x37, 0x31, 
   0x24, 0x3C, 0x1F, 0x0D, 0x26, 0x70, 0xC0, 0x34, 0x51, 0xBE, 0x65, 0x6A, 0x4E, 0x83, 0x9D, 0x98, 
   0x76, 0x41, 0xC5, 0x23, 0x40, 0x7E, 0x1C, 0x84, 0x63, 0x44, 0x35, 0x46, 0x51, 0x26, 0x49, 0x47, 
   0x84, 0x8C, 0x6F, 0xC9, 0xDA, 0x5C, 0x60, 0xF0, 0x06, 0x00, 0x69, 0x1E, 0x3C, 0x07, 0x9D, 0xA5, 
   0x91, 0x69, 0x79, 0xDC, 0x00, 0x35, 0x65, 0x59, 0x7E, 0x64, 0xC5, 0xA4, 0xCE, 0x35, 0x1E, 0x7D, 
   0x00, 0x00, 0x29, 0x4F, 0x8E, 0x8D, 0x7E, 0xB7, 0xE0, 0x57, 0x39, 0x96, 0x29, 0x27, 0x29, 0x40, 
   0x6C, 0x8C, 0x4D, 0x68, 0xFF, 0x7B, 0x86, 0x85, 0x31, 0x7F, 0x23, 0x2D, 0x40, 0x8A, 0x7E, 0x50, 
   0xDB, 0x9F, 0x8E, 0xA6, 0x2A, 0x64, 0x43, 0x00, 0x46, 0x74, 0x60, 0x60, 0x96, 0x66, 0x1C, 0x59, 
   0x1D, 0x35, 0x77, 0x66, 0xD0, 0xF4, 0x82, 0xA0, 0x96, 0x41, 0x00, 0x00, 0x00, 0x02, 0x4E, 0x39, 
   0x62, 0xE2, 0xA9, 0xC8, 0xE0, 0x97, 0xB6, 0x9A, 0x17, 0x25, 0x43, 0x00, 0x00, 0x7D, 0x69, 0x72, 
   0xD4, 0xC5, 0xFF, 0xF4, 0x5B, 0x83, 0x6B, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x46, 0x71, 0x96, 0xDA, 
   0x9C, 0x9D, 0xD2, 0x51, 0x41, 0x77, 0x1C, 0x3A, 0x6B, 0x27, 0x5C, 0xA4, 0x4B, 0x52, 0x99, 0x7A, 
   0x64, 0x8D, 0x63, 0x71, 0x91, 0x3F, 0x71, 0x7A, 0x1C, 0x5A, 0x6A, 0x2E, 0x5A, 0x8E, 0x59, 0x56, 
   0x9B, 0x82, 0x6E, 0x96, 0x6A, 0x95, 0x9C, 0x29, 0x65, 0x9B, 0x21, 0x13, 0x78, 0x28, 0x1F, 0x7D, 
   0x6E, 0x93, 0x84, 0x7A, 0x94, 0xA1, 0x24, 0x2D, 0xB7, 0x35, 0x44, 0x7D, 0x4D, 0x6E, 0x71, 0x5A, 
   0x91, 0x7D, 0x71, 0x63, 0xBD, 0x48, 0x5C, 0x90, 0x2C, 0x79, 0x7E, 0x3E, 0x58, 0x7E, 0xA0, 0x7A, 
   0x8A, 0x8C, 0x9F, 0xB2, 0x00, 0x36, 0xAA, 0x00, 0x00, 0x43, 0x6D, 0x66, 0x62, 0x6B, 0xA3, 0xD1, 
   0x46, 0x7E, 0xE9, 0x84, 0x6C, 0x87, 0x45, 0x65, 0x6D, 0x2D, 0x63, 0xA9, 0x65, 0x50, 0x75, 0x3D, 
   0x40, 0x58, 0x33, 0x65, 0x9E, 0x95, 0xE8, 0xC8, 0x88, 0x85, 0xB6, 0x00, 0x00, 0x80, 0x2E, 0x40, 
   0x60, 0x5C, 0x8C, 0x4F, 0x15, 0x39, 0x73, 0x5C, 0x52, 0xB9, 0xB1, 0xA9, 0xAE, 0x3D, 0x6F, 0x84, 
   0x1E, 0x4A, 0x7C, 0x3F, 0x42, 0x59, 0x57, 0x54, 0x71, 0x52, 0x7C, 0xC2, 0x69, 0x5B, 0x9A, 0x42, 
   0x62, 0x66, 0x3C, 0x73, 0x66, 0x53, 0x68, 0xAB, 0x70, 0x89, 0x9F, 0x59, 0x76, 0x75, 0x57, 0x19, 
   0x85, 0x28, 0x1F, 0x89, 0x00, 0x7D, 0x57, 0x98, 0xA1, 0x8B, 0xBA, 0x8F, 0xD6, 0x02, 0x32, 0x75, 
   0x00, 0x21, 0x64, 0x65, 0x9B, 0x9D, 0x95, 0x96, 0x81, 0x67, 0x46, 0x87, 0x3C, 0x67, 0x9D, 0x13, 
   0x93, 0x5E, 0x46, 0x42, 0x65, 0x75, 0x31, 0xAB, 0x5A, 0x60, 0x9B, 0x2D, 0x79, 0x95, 0x3F, 0x8A, 
   0x88, 0x7A, 0x4C, 0x54, 0x5F, 0x25, 0x89, 0x6E, 0xAA, 0xB2, 0x39, 0xAA, 0x91, 0x22, 0x42, 0x81, 
   0x1F, 0x0E, 0x82, 0x8F, 0x61, 0xA5, 0xB7, 0xD6, 0x8F, 0x16, 0x91, 0x73, 0x00, 0x23, 0x70, 0x7D, 
   0x45, 0xA6, 0x70, 0x86, 0xC6, 0x76, 0x6E, 0xC7, 0x7A, 0xA2, 0xB9, 0x0B, 0xC8, 0x5A, 0x20, 0x2A, 
   0x42, 0x81, 0x16, 0xB6, 0x2D, 0x7C, 0xD4, 0x41, 0x4B, 0xB0, 0x9D, 0x4E, 0x68, 0x7A, 0xB7, 0x65, 
   0x38, 0xB7, 0xB9, 0x5C, 0x90, 0x95, 0x4D, 0x35, 0x71, 0x00, 0x0A, 0x81, 0x4F, 0x40, 0x5C, 0xB9, 
   0x83, 0x87, 0x59, 0x99, 0xC2, 0x52, 0xB1, 0xAB, 0x44, 0x91, 0x87, 0x15, 0x3C, 0x7F, 0x2C, 0x00, 
   0x66, 0x82, 0x61, 0x5A, 0x77, 0xA6, 0xAF, 0x5E, 0x72, 0xC0, 0x17, 0x28, 0x6E, 0x1D, 0x6D, 0x3F, 
   0x58, 0x9B, 0x6E, 0x7C, 0x35, 0xE1, 0x47, 0x58, 0xB4, 0x42, 0x4D, 0xD5, 0x38, 0x65, 0x6C, 0x67, 
   0x8D, 0x8B, 0x78, 0x7C, 0x95, 0x44, 0x47, 0x56, 0x3C, 0x62, 0x7F, 0x5C, 0x77, 0xCF, 0x44, 0x53, 
   0x84, 0x17, 0x3B, 0x40, 0x36, 0x36, 0x86, 0x93, 0x8E, 0xC7, 0x7C, 0x9F, 0xCB, 0x19, 0x32, 0x78, 
   0x2F, 0x26, 0x2D, 0x7F, 0x76, 0xB6, 0x5D, 0x87, 0xB7, 0x24, 0x3D, 0x56, 0x73, 0x53, 0x83, 0x5B, 
   0x80, 0xC6, 0x15, 0x57, 0x70, 0x20, 0x3F, 0x52, 0x66, 0x45, 0x75, 0x51, 0x68, 0xB0, 0x57, 0x63, 
   0xAC, 0x4B, 0x8B, 0x83, 0x3F, 0x3B, 0x82, 0x55, 0x5C, 0xAE, 0x49, 0x77, 0x84, 0x27, 0x38, 0x64, 
   0x76, 0x64, 0x5D, 0x48, 0x5D, 0x79, 0x2B, 0x0A, 0x8C, 0x32, 0x62, 0x56, 0x4F, 0x9E, 0x8C, 0x56, 
   0x82, 0xD8, 0x4B, 0x5D, 0x88, 0x56, 0x22, 0x64, 0x39, 0x39, 0x90, 0x5B, 0x95, 0x84, 0x71, 0x7E, 
   0x6D, 0x16, 0x17, 0x63, 0x34, 0x3F, 0x8D, 0x68, 0x9C, 0xC8, 0x58, 0x6A, 0x90, 0x57, 0x57, 0x8A, 
   0x4F, 0x45, 0x73, 0x32, 0x50, 0x9A, 0x37, 0x7D, 0x9F, 0x4E, 0x5A, 0x7B, 0x4E, 0x3C, 0x63, 0x32, 
   0x4E, 0x5E, 0x3E, 0x50, 0x78, 0x50, 0x7F, 0xC5, 0x63, 0x69, 0xDC, 0x5D, 0x47, 0x73, 0x40, 0x6E, 
   0x38, 0x2E, 0x52, 0x82, 0x56, 0x57, 0xD2, 0x61, 0x8F, 0x71, 0x3E, 0x23, 0x31, 0x1C, 0x2F, 0x9E, 
   0x56, 0x97, 0xAB, 0x63, 0x86, 0x94, 0x5D, 0x47, 0x71, 0x45, 0x4B, 0x60, 0x33, 0x56, 0xA0, 0x22, 
   0x56, 0xAC, 0x63, 0x62, 0x6D, 0x9D, 0x5E, 0xA5, 0x5C, 0x6A, 0xA4, 0x09, 0x59, 0x64, 0x19, 0x97, 
   0x72, 0x48, 0x46, 0x6C, 0x6C, 0x27, 0x78, 0x5B, 0x70, 0x9B, 0x4F, 0x4E, 0x90, 0x43, 0x2D, 0x6E, 
   0x3E, 0x6D, 0x7F, 0x2E, 0x7B, 0x92, 0x63, 0x66, 0x98, 0x68, 0x6C, 0x81, 0x2E, 0x59, 0x80, 0x28, 
   0x53, 0x7A, 0x6C, 0x58, 0x74, 0x5A, 0x85, 0xA8, 0x05, 0x40, 0xB2, 0x4A, 0x45, 0x55, 0x8F, 0x88, 
   0x54, 0x3F, 0x38, 0x9E, 0x37, 0x54, 0xAA, 0x1B, 0x71, 0x6C, 0x23, 0x23, 0x4B, 0x76, 0x4D, 0x71, 
   0x99, 0xBB, 0xF6, 0x58, 0x97, 0xFF, 0x0A, 0x00, 0x25, 0x10, 0x00, 0x00, 0x5C, 0x82, 0x64, 0x92, 
   0xCA, 0xFE, 0x69, 0x7E, 0xD2, 0x39, 0x2A, 0x31, 0x16, 0x23, 0x52, 0x35, 0x36, 0xBA, 0x76, 0x9B, 
   0xBB, 0x7C, 0xB8, 0x69, 0x4B, 0x55, 0x5B, 0x00, 0x00, 0x83, 0x34, 0x47, 0x89, 0xA8, 0x8E, 0x7A, 
   0x3D, 0x5D, 0x5B, 0x38, 0x69, 0xB3, 0x8B, 0xA0, 0xDC, 0x39, 0x49, 0x47, 0x00, 0x00, 0x4C, 0x5D, 
   0x7A, 0xDC, 0xDC, 0xD2, 0xA9, 0x0A, 0x82, 0x53, 0x0E, 0x35, 0x90, 0x6A, 0x4E, 0x90, 0x71, 0x59, 
   0x96, 0x53, 0x5F, 0x95, 0x57, 0x75, 0x8D, 0x2D, 0x3C, 0x5A, 0x1D, 0x48, 0x72, 0x73, 0x98, 0xC8, 
   0x9A, 0x96, 0xD8, 0x2A, 0x31, 0x51, 0x00, 0x13, 0x43, 0x19, 0x42, 0x78, 0x57, 0x68, 0x4A, 0xA4, 
   0x65, 0xAB, 0x92, 0xA5, 0xFF, 0x06, 0x7B, 0x9B, 0x00, 0x0E, 0x37, 0x74, 0x2B, 0x6B, 0xBA, 0x9A, 
   0xD8, 0x46, 0xB7, 0xDD, 0x20, 0x5A, 0x67, 0x35, 0x40, 0x36, 0x1F, 0x2E, 0x64, 0x5A, 0x67, 0xA5, 
   0x72, 0x57, 0x8C, 0x4B, 0x6F, 0x8E, 0x2E, 0x64, 0xAB, 0x67, 0x6E, 0xAB, 0x72, 0x50, 0x93, 0x06, 
   0x06, 0x76, 0x3F, 0x6F, 0x86, 0x84, 0xA5, 0xAE, 0x3A, 0x61, 0x64, 0x23, 0x16, 0x7C, 0x4C, 0x66, 
   0xA0, 0x53, 0x7E, 0xB8, 0x7C, 0x84, 0x90, 0x7F, 0x6B, 0x7D, 0x11, 0x1F, 0x83, 0x05, 0x48, 0x84, 
   0x62, 0x88, 0x9C, 0x86, 0x8F, 0xB8, 0x4D, 0x28, 0x84, 0x0E, 0x3F, 0x66, 0x53, 0x9B, 0x7D, 0x7C, 
   0x6E, 0x8F, 0x4E, 0x4B, 0x95, 0x36, 0x44, 0xAC, 0x30, 0x45, 0x90, 0x43, 0x85, 0x7E, 0x77, 0x84, 
   0x90, 0x60, 0x2D, 0x9C, 0x4E, 0x55, 0xAC, 0x68, 0x7D, 0xA5, 0x34, 0x72, 0x4E, 0x17, 0x34, 0x44, 
   0x30, 0x58, 0xAE, 0x62, 0x82, 0xF4, 0xA8, 0x8E, 0x92, 0x68, 0x87, 0x50, 0x00, 0x2A, 0x7C, 0x21, 
   0x3A, 0xA4, 0x7E, 0x7F, 0x71, 0x79, 0x64, 0x8F, 0x60, 0x90, 0xE9, 0x67, 0x81, 0x74, 0x00, 0x00, 
   0x38, 0x00, 0x00, 0x87, 0x7B, 0xB1, 0x7E, 0x8A, 0xA3, 0x8C, 0x57, 0x5A, 0xCB, 0x55, 0x6F, 0xA7, 
   0x3C, 0x67, 0x3E, 0x35, 0x3E, 0x7C, 0x62, 0x5F, 0xBA, 0x4B, 0x5F, 0x70, 0x29, 0x54, 0x48, 0x15, 
   0x39, 0x84, 0xA0, 0x8B, 0xE8, 0xC6, 0xE0, 0xEB, 0x01, 0x3D, 0x41, 0x00, 0x00, 0x05, 0x6C, 0x4C, 
   0x79, 0x5D, 0x94, 0xB0, 0x38, 0x86, 0xD4, 0x72, 0x7A, 0x9F, 0x76, 0x77, 0x62, 0x36, 0x1F, 0x49, 
   0x0D, 0x1B, 0x61, 0x6F, 0x9B, 0x9D, 0x5F, 0xB3, 0xB6, 0x2D, 0x4B, 0x94, 0x76, 0x27, 0x87, 0x5E, 
   0x60, 0x69, 0x19, 0x88, 0x59, 0x42, 0x77, 0x99, 0x76, 0x37, 0xAC, 0x5F, 0x42, 0x6D, 0x0F, 0x3E, 
   0x8F, 0x2E, 0x73, 0xB1, 0x7B, 0x7C, 0x5D, 0x9F, 0x56, 0x5F, 0x4E, 0x78, 0xC2, 0x2A, 0x8D, 0xEB, 
   0x62, 0x30, 0x77, 0x41, 0x36, 0x26, 0x33, 0x55, 0x88, 0x8A, 0x76, 0xA3, 0x5E, 0xA0, 0x9B, 0x38, 
   0x95, 0xBE, 0x98, 0x4B, 0x80, 0x59, 0x44, 0x6A, 0x03, 0x6C, 0xF7, 0xA8, 0x6C, 0xB0, 0x79, 0x77, 
   0x00, 0x00, 0x70, 0x90, 0x2F, 0x4E, 0xFF, 0xB6, 0x4F, 0x8F, 0x72, 0x8F, 0x85, 0x5C, 0xA5, 0xC5, 
   0x8A, 0x74, 0x93, 0x3B, 0x3C, 0x7D, 0x00, 0x2E, 0x58, 0x2A, 0x40, 0x2C, 0x55, 0x59, 0x8C, 0x80, 
   0x56, 0xEC, 0x4D, 0x8D, 0xA9, 0x26, 0x79, 0x80, 0x64, 0x9B, 0xA8, 0x85, 0x9D, 0xB7, 0x5A, 0x5E, 
   0x97, 0x17, 0x26, 0x8C, 0x05, 0x1F, 0x57, 0x4B, 0x77, 0x58, 0x70, 0x84, 0xC0, 0x66, 0x46, 0xA4, 
   0x5F, 0x6F, 0x71, 0x31, 0x7B, 0x8C, 0x77, 0x81, 0xB0, 0x98, 0x97, 0xD7, 0x45, 0x6C, 0x88, 0x0F, 
   0x2B, 0x3F, 0x64, 0x6D, 0x54, 0x69, 0x77, 0x9F, 0x30, 0x1C, 0x8A, 0x41, 0x66, 0x75, 0x6E, 0x9F, 
   0xAE, 0x3A, 0x59, 0xA2, 0x18, 0x19, 0x4C, 0x53, 0x3C, 0xA2, 0x94, 0x83, 0xA7, 0x66, 0xA0, 0x68, 
   0x30, 0x82, 0x8E, 0x2E, 0x13, 0x89, 0x2E, 0x25, 0x8E, 0x68, 0xA9, 0x94, 0x74, 0x93, 0x7D, 0x45, 
   0x42, 0x93, 0x3E, 0x68, 0x9D, 0x3D, 0x66, 0x52, 0x3E, 0x21, 0x69, 0x6D, 0x33, 0xA9, 0x41, 0x8B, 
   0x82, 0x5D, 0x7B, 0x67, 0x6D, 0x7A, 0xD2, 0x37, 0x5C, 0xB8, 0x03, 0x3D, 0x31, 0x53, 0x47, 0x34, 
   0x6B, 0x69, 0x90, 0x4E, 0x37, 0xA3, 0x27, 0x49, 0x70, 0x55, 0x6E, 0x5A, 0x61, 0x98, 0x84, 0x50, 
   0x6F, 0xA2, 0x56, 0x4B, 0x97, 0x3F, 0x3E, 0x69, 0x3F, 0x60, 0x7A, 0x5B, 0x67, 0xB7, 0x4A, 0x72, 
   0x50, 0x38, 0x54, 0x40, 0x39, 0x2D, 0xB4, 0x51, 0x51, 0xB0, 0x58, 0x8B, 0x67, 0x5D, 0x58, 0x4B, 
   0x4B, 0x58, 0xC9, 0x3E, 0xA1, 0xDA, 0x42, 0x44, 0x5A, 0x4D, 0x30, 0x46, 0x3D, 0x36, 0x7A, 0x49, 
   0x54, 0x9E, 0x55, 0x83, 0x99, 0x3F, 0x56, 0x7D, 0x4B, 0x6C, 0x88, 0x5C, 0x55, 0x77, 0x51, 0x2F, 
   0x78, 0x51, 0x75, 0x9B, 0x51, 0xA9, 0x90, 0x5C, 0x7A, 0xC2, 0x61, 0x32, 0x9C, 0x2C, 0x20, 0x11, 
   0x27, 0x44, 0x67, 0x56, 0x8B, 0xCC, 0x6E, 0x8C, 0x96, 0x57, 0x3B, 0xA6, 0x34, 0x45, 0x77, 0x34, 
   0x68, 0x5B, 0x46, 0x64, 0x8A, 0x70, 0x55, 0xA8, 0x8B, 0x83, 0xE0, 0x76, 0xB3, 0xAD, 0x00, 0x21, 
   0x0E, 0x00, 0x00, 0x23, 0x5F, 0x5E, 0x9D, 0xB2, 0xB0, 0xC3, 0x6D, 0x6C, 0xB8, 0x04, 0x27, 0x83, 
   0x00, 0x3A, 0x16, 0x7E, 0x8C, 0x7A, 0x87, 0x77, 0xFA, 0x53, 0x5A, 0xA4, 0x4C, 0x4E, 0x37, 0x4A, 
   0x76, 0x80, 0x37, 0x5E, 0xDB, 0x42, 0x51, 0x9B, 0x37, 0x55, 0x27, 0x44, 0x50, 0x4A, 0x4C, 0x51, 
   0xD5, 0x8A, 0x9A, 0xDA, 0x50, 0x55, 0x33, 0x27, 0x21, 0x3D, 0x3E, 0x4F, 0x94, 0x3A, 0x52, 0xA9, 
   0x64, 0xA3, 0xAA, 0x80, 0x75, 0xA2, 0x35, 0x13, 0x61, 0x22, 0x3C, 0x43, 0x34, 0x8E, 0x8E, 0x84, 
   0xA5, 0xB1, 0x4B, 0x48, 0x72, 0x0C, 0x30, 0x57, 0x57, 0x75, 0x76, 0x69, 0x70, 0xEA, 0x48, 0x4A, 
   0xC2, 0x75, 0x83, 0x3B, 0x7E, 0x9D, 0x6B, 0x26, 0x12, 0x86, 0x00, 0x00, 0x1D, 0x3C, 0x8B, 0x72, 
   0xE0, 0xFF, 0xFF, 0xA7, 0x81, 0xB5, 0x04, 0x00, 0x2C, 0x13, 0x4A, 0x8D, 0x73, 0x9C, 0xED, 0x52, 
   0x4F, 0x6A, 0x31, 0x7D, 0x3C, 0x6A, 0xA3, 0xAF, 0x5A, 0x57, 0xD7, 0x64, 0x37, 0x85, 0x45, 0x74, 
   0x50, 0x17, 0x40, 0x7D, 0x57, 0x3C, 0x9A, 0x63, 0x71, 0x8B, 0x41, 0x73, 0x8C, 0x62, 0xC1, 0xDF, 
   0x7B, 0x8E, 0xA2, 0x17, 0x00, 0x0A, 0x00, 0x00, 0x27, 0x10, 0x95, 0x9E, 0xD7, 0xCD, 0xE1, 0xBB, 
   0x93, 0x8E, 0x00, 0x24, 0x66, 0x00, 0x00, 0x9F, 0x63, 0x7C, 0xB6, 0xC0, 0xEA, 0x8D, 0x63, 0x4D, 
   0x62, 0x00, 0x00, 0x51, 0x0F, 0x5E, 0x9C, 0x77, 0xD2, 0xD0, 0x88, 0x8C, 0x95, 0x37, 0x00, 0x2D, 
   0x00, 0x1C, 0x61, 0x4A, 0x8C, 0xC6, 0x85, 0xB0, 0xB7, 0x6E, 0x6A, 0x89, 0x3F, 0x23, 0x77, 0x32, 
   0x44, 0x98, 0x27, 0x4B, 0x81, 0x40, 0x59, 0x70, 0x9D, 0x89, 0xA9, 0x64, 0x73, 0x88, 0x18, 0x50, 
   0x72, 0x29, 0x65, 0xB1, 0x6E, 0x54, 0x9F, 0x52, 0x3E, 0x66, 0x5D, 0x88, 0x84, 0x4B, 0x93, 0x96, 
   0x22, 0x21, 0xB3, 0x35, 0x44, 0x90, 0x5F, 0x95, 0x67, 0x7D, 0x73, 0x95, 0x54, 0x3F, 0xC3, 0x4D, 
   0x4F, 0x95, 0x46, 0x7D, 0x6D, 0x36, 0x4B, 0x84, 0x64, 0x62, 0xAC, 0x69, 0x94, 0x8A, 0x1A, 0x38, 
   0x90, 0x1C, 0x28, 0x8A, 0xAC, 0x7F, 0x85, 0x94, 0xC4, 0xB7, 0x13, 0x6D, 0x93, 0x10, 0x00, 0x3D, 
   0x1D, 0x33, 0x5B, 0x6B, 0x8B, 0xC5, 0x9C, 0x88, 0xD8, 0x7A, 0x5B, 0x7C, 0x29, 0x6B, 0x91, 0x45, 
   0x80, 0x9B, 0x67, 0x56, 0x88, 0x60, 0x2C, 0x98, 0x42, 0x60, 0x7A, 0x40, 0x99, 0x9B, 0x22, 0x59, 
   0x95, 0x23, 0x09, 0x5C, 0x64, 0x66, 0x9A, 0x6B, 0x9C, 0x90, 0x3F, 0x5E, 0x97, 0x6D, 0x4D, 0x97, 
   0x89, 0x7F, 0x8B, 0x3C, 0x84, 0xA0, 0x34, 0x49, 0x92, 0x38, 0x36, 0x41, 0x00, 0x42, 0x43, 0x87, 
   0x71, 0xBE, 0xA4, 0x9A, 0xFF, 0x42, 0x65, 0x8A, 0x33, 0x35, 0x4C, 0x2B, 0x13, 0x44, 0x00, 0x77, 
   0x5E, 0x65, 0x91, 0xAD, 0xD3, 0x8B, 0xFF, 0x39, 0x5B, 0xAB, 0x00, 0x15, 0x1D, 0x8C, 0x54, 0x53, 
   0x97, 0x9E, 0x87, 0x0D, 0x33, 0x7A, 0x1E, 0x4F, 0xAF, 0x64, 0x93, 0xB0, 0x60, 0x43, 0x5B, 0x66, 
   0x21, 0x93, 0x4E, 0x88, 0x9E, 0x20, 0x94, 0x6B, 0x59, 0x60, 0x89, 0x6A, 0x36, 0x8F, 0x37, 0x26, 
   0x90, 0x16, 0x5C, 0x8C, 0x57, 0xAA, 0x87, 0x78, 0x8A, 0x78, 0x85, 0x3B, 0xA7, 0x83, 0x73, 0xB8, 
   0x35, 0x98, 0x94, 0x00, 0x24, 0x55, 0x09, 0x00, 0x41, 0x87, 0x6F, 0xB7, 0xB2, 0xED, 0xF8, 0x84, 
   0xA0, 0x86, 0x32, 0x7C, 0x68, 0x20, 0x78, 0xA5, 0x6A, 0x26, 0x73, 0x9F, 0x15, 0x8B, 0x66, 0xB2, 
   0xD0, 0x0B, 0x98, 0x65, 0x4A, 0x5B, 0x57, 0xA1, 0x98, 0xFD, 0x88, 0xA0, 0xD5, 0x48, 0x51, 0xA7, 
   0x24, 0x2A, 0x88, 0x00, 0x29, 0x44, 0x2A, 0x59, 0x48, 0x9F, 0x9A, 0x62, 0x5C, 0x84, 0xB1, 0x0D, 
   0x4B, 0xD6, 0x4D, 0x47, 0x81, 0x78, 0x77, 0x76, 0x68, 0x7F, 0xB6, 0xB5, 0xD9, 0xD1, 0x6B, 0xB1, 
   0xB0, 0x00, 0x00, 0x65, 0x00, 0x00, 0x28, 0x1C, 0x5F, 0x5C, 0x9F, 0xA0, 0x8E, 0xB2, 0x74, 0xDB, 
   0x33, 0x26, 0xC8, 0x03, 0xA9, 0x00, 0x7F, 0x90, 0x9D, 0xA6, 0xB1, 0xA8, 0x4C, 0x6E, 0xBC, 0x36, 
   0x4C, 0x69, 0x00, 0x26, 0x60, 0x34, 0x3C, 0x88, 0x85, 0x7B, 0x8F, 0x47, 0x56, 0x91, 0x37, 0x79, 
   0x8D, 0x80, 0x94, 0xB4, 0x46, 0x5F, 0x96, 0x02, 0x0E, 0x55, 0x3D, 0x37, 0x50, 0xAB, 0xB6, 0xC3, 
   0x76, 0x88, 0xB8, 0x00, 0x1A, 0x72, 0x28, 0x3B, 0x54, 0x6D, 0x6F, 0xB5, 0x51, 0x8D, 0x9E, 0x35, 
   0x6A, 0x53, 0x6D, 0x4B, 0x6A, 0x38, 0x44, 0xBA, 0x1B, 0x4F, 0x97, 0x33, 0x5B, 0x3B, 0x6E, 0x4B, 
   0x7B, 0x7A, 0x69, 0xD7, 0x50, 0x8B, 0xB4, 0x37, 0x5C, 0x61, 0x41, 0x43, 0x5E, 0x41, 0x52, 0x6E, 
   0x2B, 0x37, 0x91, 0x38, 0x5B, 0x82, 0x78, 0x84, 0x7D, 0x56, 0x62, 0xAA, 0x2D, 0x3A, 0x65, 0x5A, 
   0x45, 0x55, 0x4A, 0x6D, 0x95, 0x3F, 0x73, 0xC4, 0x61, 0x5B, 0x8B, 0x4A, 0x3D, 0x58, 0x28, 0x43, 
   0x9C, 0x56, 0x6B, 0xA1, 0x62, 0x60, 0x63, 0x3A, 0x44, 0x64, 0x51, 0x3A, 0x8E, 0x63, 0x75, 0xB8, 
   0x4C, 0x9D, 0x9B, 0x61, 0x52, 0x89, 0x3D, 0x4F, 0x7C, 0x1A, 0x37, 0x70, 0x42, 0x4E, 0x81, 0x55, 
   0x7D, 0xAA, 0x4A, 0x72, 0xB4, 0x55, 0x5F, 0x62, 0x3E, 0x37, 0x18, 0x28, 0x43, 0xA4, 0x5C, 0x67, 
   0xEC, 0x63, 0x63, 0x98, 0x46, 0x81, 0x69, 0x3A, 0x5E, 0xB0, 0x50, 0x5B, 0xA7, 0x5A, 0x4D, 0x3D, 
   0x32, 0x0E, 0x20, 0x2C, 0x44, 0x6F, 0x4A, 0xA7, 0xFC, 0x57, 0x80, 0xBE, 0x5D, 0x24, 0x3F, 0x63, 
   0x30, 0x55, 0x35, 0x77, 0x9B, 0x35, 0x84, 0xAE, 0x67, 0x99, 0xBD, 0x65, 0x61, 0x91, 0x24, 0x08, 
   0x53, 0x0C, 0x2E, 0x3F, 0x24, 0x5D, 0x5D, 0x76, 0x4F, 0xA9, 0x6C, 0x7E, 0x9F, 0x33, 0x6D, 0x6C, 
   0x38, 0x4B, 0x6C, 0x45, 0x35, 0x7E, 0x69, 0x75, 0x80, 0x53, 0x6B, 0x93, 0x69, 0x55, 0x9F, 0x5B, 
   0x87, 0x81, 0x09, 0x69, 0x95, 0x2B, 0x2E, 0x60, 0x65, 0x49, 0x33, 0x56, 0x67, 0xA7, 0x40, 0x68, 
   0xCB, 0x4C, 0x62, 0x86, 0x6E, 0x78, 0x6D, 0x50, 0x2E, 0x56, 0x43, 0x55, 0x7E, 0x3D, 0x9F, 0xCD, 
   0x16, 0x0C, 0x4F, 0x58, 0x1A, 0x07, 0x93, 0xC8, 0xC6, 0x70, 0xAC, 0xFF, 0x4A, 0x5F, 0x85, 0x00, 
   0x0C, 0x02, 0x21, 0x2E, 0x1E, 0x7F, 0x6F, 0xB7, 0x6A, 0x83, 0xDD, 0x59, 0x77, 0x6C, 0x51, 0x58, 
   0x8D, 0x34, 0x24, 0xCA, 0x3F, 0x52, 0x61, 0x5B, 0x7B, 0x21, 0x29, 0x50, 0x69, 0x15, 0x59, 0xD5, 
   0x95, 0xAF, 0xC7, 0x9B, 0x75, 0x66, 0x18, 0x24, 0x7D, 0x44, 0x37, 0xD3, 0x8C, 0xB6, 0x93, 0x36, 
   0x99, 0x42, 0x00, 0x20, 0x6A, 0x65, 0x3A, 0xC0, 0xC0, 0xB1, 0xBB, 0x2F, 0x6B, 0x85, 0x00, 0x1E, 
   0x77, 0x32, 0x3A, 0x5B, 0x4C, 0x3D, 0x63, 0x65, 0x90, 0xCC, 0xA8, 0xD9, 0xFE, 0x3E, 0x53, 0x54, 
   0x00, 0x04, 0x29, 0x12, 0x36, 0x89, 0x5A, 0x3E, 0x65, 0x7A, 0x5F, 0x90, 0x74, 0xCC, 0xF3, 0x40, 
   0x75, 0x91, 0x18, 0x00, 0x2A, 0x4E, 0x25, 0x6B, 0xBA, 0xD3, 0xFF, 0x4C, 0xC7, 0xD1, 0x00, 0x18, 
   0x17, 0x31, 0x00, 0x1C, 0x4A, 0x4B, 0xD1, 0x5C, 0x9E, 0xFF, 0x78, 0x99, 0x9E, 0x37, 0x4C, 0x51, 
   0x09, 0x18, 0x4A, 0x4F, 0x5D, 0x85, 0x89, 0x8C, 0xBB, 0x39, 0x5F, 0x9A, 0x33, 0x5E, 0x88, 0x60, 
   0x6D, 0x82, 0x3E, 0x45, 0x8D, 0x12, 0x13, 0x99, 0x69, 0x7D, 0x7D, 0x8C, 0xCF, 0xB1, 0x5D, 0x84, 
   0xAA, 0x33, 0x0F, 0x59, 0x00, 0x1F, 0x76, 0x35, 0x71, 0x8F, 0xA3, 0xA0, 0xA8, 0x7B, 0x5B, 0xC4, 
   0x07, 0x3E, 0x85, 0x00, 0x34, 0x5C, 0x76, 0x9C, 0x90, 0xA0, 0xA7, 0xB8, 0x5F, 0x2D, 0x96, 0x00, 
   0x32, 0x90, 0x29, 0x61, 0x89, 0x7A, 0x95, 0x6D, 0x6F, 0x8F, 0x9B, 0x1F, 0x27, 0xA7, 0x1A, 0x1C, 
   0x85, 0x7D, 0x90, 0x90, 0x6D, 0x86, 0x95, 0x61, 0x63, 0x85, 0x75, 0x56, 0xB2, 0x1E, 0x5A, 0xA5, 
   0x22, 0x60, 0x65, 0x45, 0x3F, 0x50, 0x26, 0x52, 0xBA, 0x52, 0x6C, 0xF0, 0xB4, 0xC3, 0x9A, 0x75, 
   0x93, 0x75, 0x22, 0x28, 0xB0, 0x41, 0x3B, 0x79, 0x3A, 0x3B, 0x2E, 0x2B, 0x33, 0x84, 0x76, 0xB8, 
   0xCA, 0x9E, 0xB2, 0xAE, 0x14, 0x11, 0x5D, 0x0D, 0x1C, 0x89, 0x70, 0xA0, 0x56, 0x5C, 0x6F, 0x7A, 
   0x6D, 0x4D, 0xFF, 0x76, 0x90, 0xA1, 0x13, 0x5B, 0x21, 0x00, 0x33, 0x5F, 0x91, 0x5A, 0xBC, 0x8B, 
   0x8C, 0xB7, 0x0C, 0x51, 0x66, 0x16, 0x01, 0x6A, 0x6C, 0x53, 0x93, 0x45, 0xB6, 0x8E, 0x1F, 0x58, 
   0x95, 0x6A, 0x6E, 0x9A, 0x77, 0x78, 0x83, 0x5B, 0x33, 0x93, 0x2D, 0x4F, 0xA1, 0x54, 0x94, 0x61, 
   0x7B, 0x7D, 0x5A, 0x35, 0x48, 0x9F, 0x0C, 0x25, 0x63, 0x4C, 0x4E, 0x8D, 0x5F, 0x9A, 0xB7, 0x4A, 
   0x7D, 0x95, 0x72, 0x16, 0x88, 0x65, 0x5A, 0x81, 0x0E, 0x8E, 0x7D, 0x47, 0x4F, 0x95, 0x76, 0x4F, 
   0x80, 0x60, 0x50, 0x6C, 0x01, 0x47, 0xBE, 0x42, 0x8E, 0xCF, 0xB7, 0xA7, 0x6E, 0x90, 0x58, 0x67, 
   0x1C, 0x73, 0x7F, 0x26, 0x5B, 0xA4, 0x3F, 0x3E, 0xA1, 0x49, 0x57, 0x90, 0x96, 0x51, 0xB3, 0x9B, 
   0xAB, 0xA8, 0x23, 0xCD, 0x9B, 0x4F, 0x4D, 0x82, 0x87, 0x3F, 0x33, 0x00, 0x4A, 0x92, 0x31, 0x42, 
   0xF7, 0xEF, 0x8B, 0xA2, 0x7D, 0xD7, 0x4D, 0x1E, 0xB8, 0xA9, 0xB7, 0x6C, 0xFF, 0x50, 0x20, 0xBF, 
   0x00, 0x06, 0x51, 0x07, 0x46, 0x41, 0x93, 0x9A, 0x70, 0x84, 0xAF, 0xD9, 0x4B, 0x6B, 0xA7, 0x1E, 
   0x58, 0x41, 0x43, 0x35, 0x97, 0x8A, 0x58, 0xB6, 0xB2, 0xA4, 0xA5, 0x48, 0x82, 0xC5, 0x3D, 0x63, 
   0xA5, 0x4B, 0x76, 0x61, 0x0A, 0x2E, 0x47, 0x16, 0x37, 0x75, 0x5E, 0x3E, 0x8E, 0x78, 0x6F, 0xB2, 
   0x7E, 0xAF, 0xAD, 0x0C, 0x33, 0x57, 0x4F, 0x7D, 0x87, 0x55, 0x88, 0x82, 0x85, 0xA7, 0x88, 0x3D, 
   0x69, 0xDD, 0x17, 0x1B, 0x8B, 0x1C, 0x2A, 0x2E, 0x4B, 0x5F, 0x7E, 0x64, 0x88, 0xB9, 0x54, 0x45, 
   0x8D, 0x5A, 0x62, 0x98, 0x59, 0x8F, 0xBD, 0x52, 0x55, 0x55, 0x2B, 0x53, 0x66, 0x43, 0x36, 0xA0, 
   0x88, 0x60, 0xAC, 0x6A, 0xA5, 0x89, 0x3A, 0x5F, 0x87, 0x11, 0x0D, 0x64, 0x44, 0x4B, 0x86, 0x6E, 
   0x9B, 0x87, 0x52, 0x57, 0x82, 0x62, 0x24, 0xB6, 0x38, 0x78, 0x9E, 0x21, 0x5C, 0x52, 0x66, 0x55, 
   0x95, 0x61, 0x60, 0x9A, 0x33, 0x50, 0x6B, 0x49, 0x6C, 0x59, 0x64, 0x71, 0xA4, 0x31, 0x21, 0xA9, 
   0x20, 0x44, 0x49, 0x6C, 0x7F, 0x6C, 0x62, 0x8B, 0xC8, 0x50, 0x61, 0x9F, 0x43, 0x38, 0x5F, 0x1B, 
   0x32, 0x58, 0x49, 0x7E, 0x6B, 0x71, 0x8A, 0xA6, 0x4F, 0x5B, 0x91, 0x28, 0x48, 0x7B, 0x56, 0x31, 
   0xB4, 0x57, 0x66, 0xB3, 0x57, 0x94, 0x51, 0x4B, 0x39, 0x30, 0x2E, 0x2E, 0xC1, 0x40, 0x84, 0xDE, 
   0x79, 0x85, 0x66, 0x45, 0x40, 0x43, 0x3E, 0x45, 0x9F, 0x3D, 0x77, 0xB7, 0x43, 0x5B, 0x89, 0x66, 
   0x6B, 0x92, 0x4A, 0x53, 0x72, 0x43, 0x3B, 0x55, 0x32, 0x41, 0x6D, 0x3E, 0x53, 0x7C, 0x50, 0x7D, 
   0xAD, 0x4C, 0x5C, 0xBA, 0x63, 0x40, 0xBD, 0x51, 0x79, 0x6A, 0x50, 0x78, 0x57, 0x44, 0x4F, 0xB6, 
   0x60, 0x64, 0x56, 0x3D, 0x25, 0x45, 0x15, 0x49, 0x92, 0x56, 0x90, 0xA6, 0x6F, 0x70, 0xAE, 0x59, 
   0x2D, 0x8C, 0x46, 0x6D, 0x8B, 0x55, 0xB5, 0xAB, 0x1B, 0x5D, 0x75, 0x27, 0x00, 0x5D, 0x88, 0x69, 
   0xBD, 0x87, 0x8B, 0xA4, 0x18, 0x36, 0x46, 0x00, 0x30, 0x55, 0x3C, 0x5B, 0x79, 0xA0, 0x85, 0x88, 
   0x68, 0x7A, 0xCE, 0x12, 0x46, 0x84, 0x2E, 0x29, 0x2E, 0x68, 0x75, 0x7B, 0x7A, 0xA4, 0xFF, 0x40, 
   0x4E, 0xC5, 0x38, 0x4C, 0x1D, 0x43, 0x67, 0x2D, 0x38, 0x2E, 0xDA, 0x66, 0x61, 0xB4, 0x56, 0x78, 
   0x58, 0x29, 0x34, 0x58, 0x51, 0x52, 0x9E, 0x7E, 0xAD, 0xDC, 0x3E, 0x6C, 0xA0, 0x1F, 0x15, 0x36, 
   0x1A, 0x16, 0x3C, 0x23, 0x5F, 0x73, 0x8D, 0xB3, 0xCE, 0xB5, 0xD4, 0xF1, 0x23, 0x2A, 0xAD, 0x00, 
   0x00, 0x00, 0x33, 0x39, 0x35, 0x91, 0x8D, 0xC1, 0x6A, 0x89, 0xCA, 0x5D, 0x60, 0x6F, 0x33, 0x73, 
   0x5D, 0x26, 0x2D, 0xB8, 0x16, 0x02, 0x86, 0x53, 0x7E, 0x27, 0xAB, 0xE2, 0xBD, 0x81, 0x7A, 0xD0, 
   0x00, 0x00, 0x37, 0x00, 0x41, 0x83, 0xE0, 0xC7, 0xF6, 0x97, 0x96, 0x84, 0x00, 0x2F, 0x39, 0x31, 
   0x8D, 0xD3, 0x70, 0x7F, 0xC1, 0x47, 0x11, 0x5F, 0x3A, 0x4E, 0x74, 0x61, 0x92, 0xA1, 0x33, 0x4D, 
   0x79, 0x17, 0x20, 0x5E, 0x52, 0x8E, 0x9E, 0x86, 0xA5, 0xDD, 0x62, 0x5E, 0x8F, 0x3C, 0x22, 0x36, 
   0x00, 0x0C, 0x36, 0x1D, 0x7B, 0x95, 0xD1, 0xD8, 0xF8, 0xBF, 0x76, 0xA8, 0x00, 0x18, 0x46, 0x00, 
   0x12, 0x78, 0x86, 0x8D, 0xAD, 0xF5, 0xC1, 0x9C, 0x48, 0x6A, 0x85, 0x00, 0x00, 0x8B, 0x08, 0x50, 
   0x8B, 0x4A, 0x9A, 0x80, 0xA7, 0x56, 0x81, 0x62, 0x1E, 0x77, 0x11, 0x59, 0xB1, 0x33, 0xAA, 0xC7, 
   0x88, 0x9D, 0x91, 0x55, 0x1D, 0x56, 0x1B, 0x0C, 0x5D, 0x42, 0x7A, 0xA9, 0x5A, 0xA9, 0xB6, 0x39, 
   0x4D, 0x7D, 0x4B, 0x3B, 0x71, 0x6D, 0x5D, 0xAA, 0x1E, 0x48, 0x94, 0x4C, 0x71, 0x9A, 0x90, 0x88, 
   0xA9, 0x34, 0x3E, 0x58, 0x11, 0x3E, 0x59, 0x56, 0x93, 0xBD, 0x69, 0x61, 0xCA, 0x5F, 0x34, 0x7A, 
   0x5A, 0x73, 0x6E, 0x43, 0x95, 0x9C, 0x4E, 0x40, 0xB8, 0x53, 0x50, 0x85, 0x59, 0x83, 0x73, 0x52, 
   0x44, 0x8A, 0x2A, 0x4A, 0xA7, 0x5C, 0x8E, 0x9B, 0x35, 0x55, 0x62, 0x25, 0x11, 0x9B, 0x93, 0x79, 
   0xAC, 0x66, 0xA8, 0x90, 0x1B, 0x6E, 0x7E, 0x38, 0x1D, 0x95, 0x5B, 0x50, 0x9C, 0x88, 0xA0, 0xB2, 
   0x5D, 0x61, 0x8E, 0x00, 0x1C, 0x43, 0x12, 0x3A, 0x5C, 0x66, 0x9E, 0xB6, 0x8C, 0x94, 0xF1, 0x91, 
   0x65, 0xC1, 0x49, 0x78, 0x66, 0x00, 0x3C, 0x62, 0x13, 0x13, 0x83, 0x76, 0x5A, 0x79, 0x95, 0x9D, 
   0x86, 0x67, 0x97, 0xCB, 0x4D, 0x72, 0x9C, 0x0C, 0x15, 0x51, 0x35, 0x3E, 0x83, 0x70, 0xA0, 0xAC, 
   0x60, 0x85, 0x7F, 0x5B, 0x2A, 0x84, 0x33, 0x5D, 0x6E, 0x60, 0xA2, 0xAE, 0x86, 0xB1, 0xE5, 0x22, 
   0x34, 0x64, 0x09, 0x00, 0x17, 0x4D, 0x3E, 0x52, 0x29, 0x82, 0xAD, 0x71, 0x8B, 0xD2, 0xBB, 0xB3, 
   0xCA, 0x20, 0x3F, 0x5A, 0x00, 0x15, 0x2F, 0x6B, 0x71, 0x7A, 0xD9, 0x9B, 0xC5, 0x2D, 0x62, 0xB4, 
   0x00, 0x55, 0x62, 0x7F, 0x6A, 0x65, 0x7A, 0x41, 0x4F, 0x02, 0x42, 0x80, 0x42, 0x7D, 0xC2, 0x77, 
   0x9B, 0xB1, 0x56, 0x61, 0x5B, 0x60, 0x2C, 0x6A, 0x47, 0x4F, 0x98, 0x0E, 0x90, 0x73, 0x5F, 0x91, 
   0x70, 0x7E, 0x57, 0xAC, 0x56, 0x34, 0xB9, 0x2F, 0x2B, 0xA2, 0x3C, 0x95, 0x95, 0x56, 0xB3, 0x51, 
   0x80, 0x10, 0x66, 0x71, 0x8D, 0xE8, 0x60, 0xBF, 0xFF, 0x82, 0x0F, 0x53, 0x27, 0x27, 0x29, 0x23, 
   0xA7, 0xDA, 0xB8, 0x81, 0xCF, 0x8F, 0x60, 0x40, 0x00, 0x94, 0x85, 0x24, 0x60, 0xAB, 0x84, 0x1D, 
   0x82, 0xAA, 0x81, 0xE5, 0xCF, 0xF9, 0xE9, 0x67, 0xA5, 0x69, 0x00, 0x37, 0x82, 0x1B, 0x1B, 0xB8, 
   0x44, 0x3C, 0x72, 0x78, 0x6B, 0x54, 0x67, 0x62, 0xD1, 0x28, 0x70, 0xD1, 0x2A, 0x72, 0x64, 0x5A, 
   0x8F, 0x5D, 0x72, 0x7B, 0x8C, 0x66, 0x56, 0xCC, 0x7A, 0x66, 0xB9, 0x22, 0x33, 0x67, 0x21, 0x53, 
   0x7C, 0x7D, 0xC7, 0xA9, 0x82, 0xC4, 0x9D, 0x36, 0x24, 0x90, 0x0C, 0x00, 0x7D, 0x36, 0x7E, 0x49, 
   0x5C, 0x98, 0x52, 0x97, 0x55, 0xFF, 0x52, 0x68, 0x73, 0x52, 0x6D, 0x62, 0x5D, 0x6C, 0x91, 0x78, 
   0x65, 0xB0, 0x6A, 0x6E, 0xB0, 0x29, 0x4F, 0x8C, 0x00, 0x32, 0x5D, 0x5D, 0x60, 0x79, 0x9E, 0x83, 
   0xC4, 0x2D, 0x40, 0x90, 0x43, 0x5D, 0x4B, 0x70, 0xD4, 0xB1, 0x58, 0x54, 0xA5, 0x08, 0x00, 0x4F, 
   0x37, 0x4D, 0x6B, 0xAA, 0xCD, 0xBB, 0x6A, 0x9A, 0x9E, 0x12, 0x35, 0x5D, 0x1C, 0x32, 0x4D, 0x67, 
   0x1C, 0xAF, 0x6F, 0x85, 0xC1, 0x47, 0xAF, 0x60, 0x51, 0x42, 0x71, 0x55, 0x6D, 0xE6, 0x2B, 0x5A, 
   0x8E, 0x14, 0x25, 0x29, 0x5F, 0x42, 0x45, 0x6B, 0x7C, 0x97, 0x2C, 0x4A, 0xAA, 0x49, 0x6D, 0x72, 
   0x55, 0x6E, 0x8F, 0x44, 0x74, 0x94, 0x3F, 0x56, 0x88, 0x5B, 0x44, 0x60, 0x4F, 0x5A, 0x92, 0x2C, 
   0x5A, 0x8C, 0x42, 0x54, 0x69, 0x3D, 0x6B, 0x3D, 0x21, 0x44, 0xA0, 0x5B, 0x66, 0xCA, 0x57, 0x54, 
   0x7A, 0x57, 0x54, 0x3B, 0x40, 0x33, 0x92, 0x4B, 0x78, 0xC0, 0x56, 0x89, 0x86, 0x3F, 0x27, 0x5D, 
   0x34, 0x39, 0x91, 0x6D, 0x84, 0x81, 0x4B, 0x69, 0x83, 0x44, 0x5D, 0xBD, 0x4F, 0x6C, 0xC2, 0x4A, 
   0x48, 0x7A, 0x5A, 0x41, 0x16, 0x3E, 0x51, 0x7D, 0x43, 0x58, 0xBE, 0x55, 0x64, 0x7B, 0x3F, 0x4E, 
   0x4F, 0x4B, 0x5A, 0xD8, 0x57, 0x60, 0xAA, 0x62, 0x5C, 0x58, 0x34, 0x56, 0x4C, 0x4A, 0x67, 0x87, 
   0x55, 0x71, 0xFE, 0x49, 0x58, 0x8A, 0x37, 0x00, 0x00, 0x38, 0x23, 0x65, 0x51, 0xB1, 0xF3, 0x75, 
   0xB9, 0xDE, 0x7A, 0x89, 0x96, 0x1C, 0x24, 0x4D, 0x09, 0x1B, 0x34, 0x3E, 0x65, 0x90, 0x79, 0x71, 
   0xB4, 0xAB, 0x5A, 0xBE, 0x41, 0x5E, 0x9C, 0x00, 0x25, 0x04, 0x18, 0x38, 0x2D, 0x88, 0x7F, 0xC5, 
   0x96, 0x91, 0xBD, 0x4C, 0x6E, 0x79, 0x28, 0x3F, 0x72, 0x43, 0x3F, 0x84, 0x3F, 0x74, 0xAC, 0x57, 
   0x75, 0x90, 0x63, 0x58, 0x63, 0x5C, 0x4C, 0x7B, 0x33, 0x7F, 0xCB, 0x21, 0x51, 0x8B, 0x4A, 0x3F, 
   0x41, 0x56, 0x51, 0x70, 0x4B, 0x69, 0xCD, 0x56, 0x96, 0xD1, 0x5A, 0x60, 0x83, 0x32, 0x00, 0x00, 
   0x27, 0x68, 0x5A, 0x61, 0xAF, 0xF1, 0x57, 0x65, 0xA9, 0x3B, 0x31, 0x42, 0x58, 0x7F, 0x7B, 0x63, 
   0x40, 0xE1, 0x40, 0x47, 0x8F, 0x23, 0x70, 0x31, 0x6D, 0x9E, 0x4D, 0x61, 0x85, 0xC0, 0x32, 0x11, 
   0x93, 0x1B, 0x28, 0x13, 0x23, 0x59, 0x8A, 0x77, 0x7F, 0xFF, 0xA6, 0xA2, 0x9F, 0x54, 0x62, 0x1A, 
   0x02, 0x0B, 0x7A, 0x15, 0x30, 0xCC, 0x84, 0x9B, 0x84, 0x86, 0xC5, 0x5C, 0x58, 0x6D, 0xAC, 0x40, 
   0x2C, 0xB8, 0x99, 0x8A, 0xB6, 0x51, 0x8E, 0x80, 0x00, 0x09, 0x4A, 0x43, 0x42, 0x68, 0x7A, 0x78, 
   0x9E, 0x5A, 0x8A, 0xB7, 0x8B, 0x8E, 0xE3, 0x4F, 0x61, 0x7F, 0x1A, 0x00, 0x26, 0x00, 0x11, 0x76, 
   0x5D, 0x99, 0x9C, 0x94, 0x9D, 0x9F, 0x98, 0xA7, 0xC7, 0x39, 0x69, 0xA7, 0x00, 0x00, 0x39, 0x16, 
   0x19, 0x50, 0x8B, 0xF5, 0xEA, 0x92, 0xB5, 0xB0, 0x45, 0x00, 0x0A, 0x00, 0x0A, 0x3F, 0x33, 0x89, 
   0xF4, 0x84, 0x96, 0xEF, 0x62, 0x51, 0x54, 0x2D, 0x23, 0x36, 0x28, 0x41, 0xA5, 0x67, 0x93, 0xC9, 
   0x6D, 0x9E, 0xCC, 0x4E, 0x35, 0x62, 0x0E, 0x0C, 0x4A, 0x2A, 0x62, 0x85, 0x5A, 0x86, 0xA5, 0x57, 
   0x65, 0xB7, 0x63, 0x65, 0x89, 0x57, 0x75, 0x66, 0x4A, 0x51, 0xC0, 0x27, 0x12, 0x8D, 0x28, 0x3D, 
   0x59, 0x73, 0xBD, 0x98, 0x85, 0xB2, 0x93, 0x17, 0x16, 0x94, 0x06, 0x27, 0x8F, 0x37, 0x7E, 0x79, 
   0xA1, 0xA8, 0x91, 0xAC, 0x68, 0xCA, 0x20, 0x4A, 0x7F, 0x00, 0x38, 0x79, 0x46, 0x67, 0x95, 0x98, 
   0xB2, 0xA1, 0x75, 0x71, 0x91, 0x00, 0x09, 0x9C, 0x18, 0x3E, 0x9B, 0x92, 0xA7, 0x6D, 0x6B, 0xA2, 
   0x8F, 0x2C, 0x51, 0xA0, 0x42, 0x39, 0x84, 0x3D, 0x56, 0x7E, 0x4A, 0x79, 0x95, 0x9A, 0x73, 0x8A, 
   0x6B, 0x62, 0x95, 0x24, 0x5C, 0xB6, 0x29, 0x79, 0x56, 0x4C, 0x62, 0x63, 0x43, 0x3A, 0xD7, 0x72, 
   0x73, 0xDC, 0x72, 0x79, 0x62, 0x2D, 0x50, 0x59, 0x38, 0x4A, 0x97, 0x71, 0x66, 0xA2, 0x44, 0x62, 
   0x69, 0x49, 0x4C, 0x91, 0x65, 0x90, 0xA8, 0x63, 0x7D, 0x97, 0x12, 0x15, 0x8F, 0x39, 0x3D, 0x93, 
   0x41, 0x83, 0x2D, 0x18, 0x52, 0x63, 0xBA, 0x5F, 0xFA, 0xCF, 0xBF, 0xF4, 0x00, 0x77, 0x50, 0x0A, 
   0x06, 0x40, 0x75, 0x27, 0x62, 0x10, 0x5D, 0x66, 0x2F, 0x7C, 0xBA, 0xA4, 0x6D, 0xE9, 0x89, 0x72, 
   0xAE, 0x2C, 0x55, 0x54, 0x19, 0x27, 0x5C, 0x47, 0x6C, 0x67, 0x71, 0x89, 0x80, 0x6B, 0x5B, 0xCC, 
   0x31, 0x43, 0xBF, 0x20, 0x4E, 0x2E, 0x7B, 0x76, 0x71, 0x5E, 0x64, 0xA0, 0x1A, 0x32, 0x70, 0x54, 
   0x61, 0x99, 0x72, 0xAB, 0xCD, 0x55, 0x44, 0x6B, 0x54, 0x28, 0x49, 0x59, 0x73, 0x74, 0x0A, 0x9D, 
   0xB1, 0x5B, 0x69, 0xD5, 0x95, 0x40, 0x7F, 0x55, 0x45, 0x6E, 0x00, 0x37, 0x74, 0x32, 0x63, 0x88, 
   0x9F, 0xC8, 0xAD, 0x98, 0x7A, 0xC0, 0x75, 0x51, 0xB6, 0x55, 0x9A, 0xBB, 0x26, 0x87, 0x96, 0x4F, 
   0x1B, 0x4A, 0xA0, 0x29, 0x84, 0x57, 0xC2, 0xC0, 0x1B, 0xAA, 0xA7, 0x7E, 0x6E, 0x87, 0x97, 0xA6, 
   0xA0, 0x5E, 0x86, 0xBE, 0xA5, 0x66, 0xEA, 0xA9, 0x67, 0xE4, 0x00, 0x43, 0x0D, 0x00, 0x65, 0x2F, 
   0xD7, 0x8D, 0xEE, 0xAA, 0x7A, 0xF6, 0x00, 0x35, 0x76, 0x00, 0x37, 0x45, 0x77, 0x95, 0x8D, 0xAD, 
   0xB3, 0xC6, 0x89, 0x99, 0xA3, 0x4B, 0x54, 0x90, 0x00, 0x00, 0x82, 0x36, 0x25, 0x6A, 0x44, 0x91, 
   0x60, 0x53, 0xC3, 0xA7, 0xBA, 0xB7, 0xDB, 0x73, 0x63, 0xBC, 0x00, 0x47, 0x46, 0x00, 0x2E, 0x39, 
   0x44, 0x3B, 0x8B, 0xEC, 0xD0, 0xE2, 0x4F, 0x63, 0x83, 0x54, 0x63, 0x83, 0x22, 0x42, 0x6D, 0x7E, 
   0x71, 0x64, 0x73, 0x94, 0xAB, 0x44, 0x87, 0xDF, 0x52, 0x4B, 0x87, 0x0D, 0x27, 0x51, 0x30, 0x5A, 
   0x82, 0x87, 0x8F, 0x8E, 0x4F, 0x73, 0x6D, 0x4E, 0x5C, 0xB2, 0x47, 0x61, 0xB1, 0x46, 0x76, 0x6B, 
   0x2F, 0x41, 0x6A, 0x3C, 0x2B, 0x8C, 0x98, 0xA4, 0x8C, 0x7B, 0xA3, 0x70, 0x12, 0x23, 0x87, 0x16, 
   0x10, 0xA3, 0x5C, 0x5D, 0x65, 0x75, 0xA4, 0x98, 0x80, 0x8D, 0xA9, 0x5B, 0x57, 0x9B, 0x0F, 0x38, 
   0x75, 0x35, 0x58, 0x4A, 0x47, 0x51, 0x50, 0x48, 0x20, 0x96, 0x3E, 0x61, 0x7C, 0x56, 0x8C, 0x79, 
   0x72, 0x91, 0xC3, 0x44, 0x4B, 0x94, 0x33, 0x3E, 0x4E, 0x44, 0x4F, 0x81, 0x56, 0x66, 0xA4, 0x8E, 
   0x87, 0x98, 0x32, 0x36, 0x5E, 0x1B, 0x25, 0x63, 0x55, 0x6B, 0x8D, 0x62, 0x7E, 0xA5, 0x57, 0x72, 
   0x57, 0x40, 0x3E, 0x65, 0x4B, 0x4A, 0xCD, 0x4B, 0x95, 0xE2, 0x56, 0x77, 0x39, 0x4F, 0x31, 0x2C, 
   0x33, 0x21, 0x7E, 0x2E, 0x78, 0xC0, 0x73, 0x9C, 0x94, 0x57, 0x5E, 0x7D, 0x3F, 0x61, 0xA3, 0x43, 
   0x53, 0x69, 0x27, 0x3B, 0x68, 0x5A, 0x41, 0x9C, 0x4A, 0x74, 0x8B, 0x4A, 0x4D, 0x91, 0x4A, 0x41, 
   0xA6, 0x4F, 0x58, 0x4A, 0x4A, 0x53, 0x78, 0x39, 0x66, 0x96, 0x5B, 0x5C, 0x8D, 0x4A, 0x78, 0x94, 
   0x33, 0x60, 0xAA, 0x4F, 0x53, 0xA2, 0x5A, 0x3C, 0x51, 0x21, 0x28, 0x4D, 0x28, 0x71, 0x9A, 0x7E, 
   0xEB, 0xFD, 0x6E, 0x7C, 0x9A, 0x23, 0x00, 0x42, 0x56, 0x3D, 0x62, 0x61, 0x8D, 0x90, 0x38, 0x5B, 
   0x91, 0x21, 0x49, 0xAC, 0x7C, 0x60, 0x99, 0x7B, 0x7D, 0x68, 0x19, 0x49, 0x60, 0x00, 0x3E, 0x67, 
   0x55, 0x5C, 0x6F, 0xB2, 0x7F, 0xAB, 0x61, 0x7E, 0xC8, 0x00, 0x38, 0x86, 0x26, 0x1B, 0x07, 0x67, 
   0x78, 0x27, 0x7B, 0x8C, 0xF3, 0x5E, 0x59, 0xFF, 0x40, 0x6F, 0x2C, 0x28, 0x52, 0x3B, 0x4A, 0x35, 
   0xA3, 0x66, 0x74, 0xB6, 0x55, 0x95, 0xA9, 0x21, 0x1C, 0x62, 0x33, 0x0C, 0x34, 0x62, 0xA2, 0xA7, 
   0x7E, 0x92, 0xCA, 0x5A, 0x6E, 0x79, 0x09, 0x44, 0x65, 0x11, 0x10, 0x33, 0x7B, 0x47, 0x70, 0x99, 
   0xC1, 0xFF, 0x53, 0x7D, 0xE2, 0x2D, 0x3C, 0x1B, 0x14, 0x50, 0x39, 0x3C, 0x44, 0x89, 0x43, 0x2F, 
   0x64, 0x2F, 0x5A, 0x4D, 0x65, 0xB2, 0xA8, 0x88, 0x84, 0xFF, 0x3D, 0x0B, 0xAC, 0x1B, 0x2E, 0x4A, 
   0x7D, 0x9D, 0x9D, 0x8D, 0x7D, 0x92, 0x00, 0x45, 0x56, 0x2F, 0x73, 0xB8, 0xD1, 0xB0, 0xCA, 0x8C, 
   0x42, 0x7E, 0x39, 0x23, 0x6B, 0x35, 0x88, 0xAD, 0x43, 0x65, 0x62, 0x00, 0x0B, 0x48, 0x6A, 0x74, 
   0xBD, 0xF3, 0xF1, 0xFF, 0x50, 0x63, 0x81, 0x00, 0x00, 0x2D, 0x00, 0x26, 0x54, 0x4D, 0x76, 0x7B, 
   0xBE, 0xA2, 0xF7, 0xD3, 0xCA, 0xE5, 0x00, 0x38, 0x59, 0x00, 0x03, 0x46, 0x79, 0x6F, 0xB7, 0xDB, 
   0xA9, 0xAB, 0x39, 0x64, 0x5F, 0x00, 0x29, 0x69, 0x2C, 0x55, 0x6A, 0x9C, 0x72, 0x8A, 0x80, 0x50, 
   0xA4, 0x4B, 0x45, 0xB1, 0x10, 0x68, 0x9F, 0x1C, 0x69, 0x65, 0x84, 0x63, 0x7C, 0x6E, 0x47, 0xAA, 
   0x22, 0x42, 0x99, 0x37, 0xA4, 0x8C, 0x58, 0x86, 0x79, 0x14, 0x2F, 0x57, 0x3E, 0x07, 0x7B, 0x79, 
   0x8D, 0xBD, 0x5D, 0xB6, 0xBE, 0x45, 0x59, 0x88, 0x60, 0x3A, 0x58, 0x26, 0x2E, 0x80, 0x0A, 0x4C, 
   0x8D, 0x5C, 0x8E, 0x9A, 0xA8, 0xA0, 0xC1, 0x46, 0x34, 0x7C, 0x00, 0x39, 0x3E, 0x52, 0x84, 0xA6, 
   0x89, 0x79, 0xD5, 0x7E, 0x50, 0x7A, 0x53, 0x66, 0x79, 0x18, 0x4A, 0x90, 0x18, 0x56, 0x8A, 0x80, 
   0x94, 0x85, 0x7C, 0x5A, 0x96, 0x31, 0x0A, 0x91, 0x42, 0x5B, 0xA1, 0x5E, 0xA7, 0x89, 0x47, 0x73, 
   0x61, 0x4D, 0x22, 0x9A, 0x48, 0x50, 0xA0, 0x66, 0x90, 0x9B, 0x66, 0x79, 0x79, 0x1C, 0x29, 0x90, 
   0x4A, 0x4C, 0x9C, 0x94, 0xB3, 0x91, 0x64, 0x7E, 0xB7, 0x06, 0x15, 0x77, 0x32, 0x58, 0x49, 0x1E, 
   0x5A, 0x89, 0x45, 0x41, 0xCA, 0xAE, 0x98, 0xB3, 0x8B, 0xA3, 0x78, 0x10, 0x3A, 0x86, 0x30, 0x38, 
   0x84, 0x59, 0x55, 0x62, 0x5A, 0x5C, 0x7A, 0x70, 0xAC, 0xF2, 0x62, 0x93, 0x95, 0x00, 0x00, 0x16, 
   0x00, 0x05, 0x72, 0xA5, 0xCF, 0xBF, 0xAE, 0xD0, 0xD7, 0x46, 0x2E, 0xA2, 0x3C, 0x0F, 0x49, 0x50, 
   0x53, 0x4E, 0x11, 0x92, 0x94, 0x39, 0x65, 0xC4, 0x8A, 0x54, 0x9C, 0x36, 0x58, 0x68, 0x15, 0x20, 
   0x73, 0x82, 0x7D, 0xC2, 0xBA, 0xAB, 0xA3, 0x0D, 0x3F, 0x4C, 0x00, 0x3E, 0x62, 0x87, 0x7C, 0x91, 
   0xB0, 0x66, 0x9E, 0x2D, 0x5B, 0xB4, 0x0A, 0x71, 0x6E, 0x87, 0x54, 0x44, 0x5F, 0x4D, 0x7D, 0x2C, 
   0x3D, 0x6F, 0x48, 0x61, 0xA4, 0x49, 0x95, 0x95, 0x55, 0x73, 0x63, 0x5B, 0x29, 0x87, 0x54, 0x57, 
   0xD3, 0x21, 0x9D, 0x89, 0x54, 0x75, 0x78, 0x50, 0x5D, 0x85, 0x4B, 0x19, 0x77, 0x27, 0x45, 0xE0, 
   0x4F, 0xD8, 0xDB, 0xD1, 0x87, 0x52, 0x8D, 0x48, 0x4D, 0x02, 0xA7, 0xF4, 0x6B, 0x71, 0xD6, 0x86, 
   0x09, 0x29, 0x00, 0x38, 0x35, 0x1F, 0x55, 0xE4, 0xE1, 0x85, 0xCD, 0xA5, 0xDF, 0x9B, 0x6A, 0xFA, 
   0xBD, 0x7B, 0x74, 0xC2, 0x38, 0x05, 0xAD, 0x00, 0x03, 0x87, 0x74, 0x84, 0x69, 0x8C, 0xC6, 0x43, 
   0x42, 0x9E, 0xB9, 0x68, 0x45, 0xFF, 0x45, 0x33, 0x8C, 0x12, 0x5B, 0x55, 0x73, 0x84, 0x90, 0xB2, 
   0x9A, 0xC7, 0x75, 0x97, 0xB8, 0x0F, 0x38, 0x59, 0x1E, 0x19, 0x40, 0x25, 0x4E, 0x85, 0x7E, 0x8F, 
   0x9A, 0x86, 0x70, 0x8C, 0x38, 0x5C, 0xDC, 0x98, 0xD9, 0x91, 0x6D, 0xA8, 0x78, 0x00, 0x00, 0x7C, 
   0x2C, 0x34, 0xA3, 0x9F, 0x9A, 0x58, 0x46, 0x42, 0x95, 0x41, 0x2C, 0x9A, 0x4D, 0x62, 0x68, 0x22, 
   0x71, 0x7A, 0x57, 0x8A, 0xA5, 0x97, 0x8F, 0xA7, 0x6D, 0x81, 0xEA, 0x42, 0x4B, 0x96, 0x13, 0x21, 
   0x04, 0x4D, 0x70, 0x7C, 0x92, 0x8D, 0xDE, 0x21, 0x22, 0x84, 0x4E, 0x7E, 0x61, 0x8B, 0xCD, 0xBB, 
   0x3A, 0x4D, 0x9E, 0x12, 0x0C, 0x47, 0x36, 0x3A, 0x70, 0x9E, 0x97, 0xBB, 0x80, 0x81, 0xC1, 0x00, 
   0x52, 0x59, 0x11, 0x34, 0x52, 0x84, 0x4B, 0xCF, 0x68, 0x90, 0xC2, 0x29, 0x74, 0x37, 0x60, 0x55, 
   0x4C, 0x53, 0x64, 0xB2, 0x13, 0x1F, 0x96, 0x14, 0x37, 0x30, 0x71, 0x78, 0x76, 0x6D, 0x8B, 0xC8, 
   0x39, 0x62, 0x95, 0x4A, 0x4A, 0x66, 0x44, 0x55, 0x81, 0x4A, 0x5B, 0x6F, 0x5A, 0x7C, 0x86, 0x3E, 
   0x4D, 0x76, 0x3E, 0x2A, 0x98, 0x4A, 0x47, 0x97, 0x56, 0x76, 0x68, 0x4B, 0x77, 0x1A, 0x45, 0x4A, 
   0x85, 0x4B, 0x5C, 0xFF, 0x4B, 0x83, 0xA4, 0x56, 0x49, 0x46, 0x4A, 0x2C, 0x7C, 0x33, 0x65, 0x77, 
   0x4A, 0x76, 0x6D, 0x4B, 0x27, 0x91, 0x4C, 0x5C, 0xB9, 0x6E, 0xA1, 0x74, 0x50, 0x56, 0x36, 0x33, 
   0x32, 0xA3, 0x43, 0x70, 0xD8, 0x4A, 0x5E, 0x71, 0x61, 0x47, 0x58, 0x3F, 0x7A, 0xB6, 0x5A, 0x51, 
   0x91, 0x37, 0x40, 0x1D, 0x32, 0x4C, 0x3C, 0x4F, 0x4E, 0x91, 0x5B, 0x77, 0xF0, 0x3F, 0x6C, 0xB0, 
   0x3F, 0x49, 0x1A, 0x50, 0x33, 0x65, 0x4B, 0x68, 0xE3, 0x66, 0x79, 0x92, 0x59, 0x56, 0x45, 0x09, 
   0x3A, 0x5C, 0x28, 0x57, 0x8C, 0x8B, 0xA7, 0xD8, 0x75, 0x68, 0x93, 0x4B, 0x1C, 0x63, 0x2B, 0x71, 
   0x8E, 0x00, 0x50, 0x55, 0x4F, 0x51, 0x78, 0xBD, 0x84, 0xC7, 0x5A, 0x67, 0x8B, 0x00, 0x3D, 0x10, 
   0x18, 0x2C, 0x3E, 0x6A, 0x71, 0xD5, 0x77, 0x77, 0xBA, 0x49, 0x5A, 0x62, 0x1B, 0x2B, 0x1D, 0x38, 
   0x21, 0x76, 0x68, 0x7F, 0xDB, 0x6A, 0x98, 0xB6, 0x48, 0x49, 0x66, 0x58, 0x49, 0x55, 0x39, 0x92, 
   0xC2, 0x32, 0x74, 0xD7, 0x3D, 0x22, 0x4B, 0x3E, 0x1C, 0x11, 0x29, 0x5E, 0x8B, 0x85, 0xB5, 0xFF, 
   0x89, 0x91, 0xC0, 0x15, 0x10, 0x43, 0x03, 0x1F, 0x25, 0x4E, 0x43, 0x93, 0x52, 0x4D, 0xBF, 0x77, 
   0x95, 0x82, 0x93, 0xC8, 0x93, 0x50, 0x57, 0xEF, 0x0E, 0x00, 0x56, 0x00, 0x04, 0x00, 0x45, 0x8D, 
   0x54, 0x9F, 0xCA, 0xFA, 0x99, 0x7F, 0xBE, 0x30, 0x33, 0x15, 0x00, 0x21, 0xAB, 0x5F, 0x5D, 0xFF, 
   0xA6, 0xA0, 0x50, 0x46, 0xA6, 0x0A, 0x44, 0x4F, 0xC1, 0x17, 0x2B, 0xD5, 0x6D, 0x64, 0x8A, 0x7E, 
   0xAD, 0x99, 0x38, 0x57, 0x75, 0x25, 0x12, 0x53, 0x53, 0x73, 0x99, 0x65, 0x75, 0xB7, 0x64, 0x86, 
   0xB1, 0x4F, 0x87, 0x8C, 0x1E, 0x11, 0x5C, 0x00, 0x00, 0x5C, 0x18, 0x5F, 0x7B, 0xB1, 0xB2, 0xCE, 
   0xCF, 0x90, 0xCF, 0x26, 0x49, 0x9A, 0x00, 0x0F, 0x58, 0x2F, 0x3F, 0x79, 0x9E, 0xCE, 0xB8, 0xAD, 
   0xA9, 0xBB, 0x0F, 0x00, 0x36, 0x00, 0x16, 0x30, 0x26, 0x95, 0xD2, 0xB3, 0xA1, 0xC9, 0x9D, 0x33, 
   0x41, 0x12, 0x22, 0x54, 0x00, 0x5D, 0xD9, 0x66, 0x9D, 0xC9, 0x5C, 0x80, 0x7C, 0x5C, 0x18, 0x5E, 
   0x39, 0x35, 0x6A, 0x33, 0x93, 0xBB, 0x5A, 0xB0, 0xB5, 0x5A, 0x3C, 0x81, 0x33, 0x24, 0x58, 0x39, 
   0x58, 0x7C, 0x67, 0x8D, 0xDF, 0x44, 0x5F, 0xC1, 0x27, 0x3C, 0x36, 0x43, 0x6E, 0x5E, 0x77, 0x78, 
   0xC6, 0x28, 0x18, 0xC1, 0x13, 0x2C, 0x71, 0x87, 0xBE, 0x82, 0x98, 0xAD, 0x8E, 0x2B, 0x39, 0x9F, 
   0x35, 0x37, 0x8F, 0x36, 0x60, 0x84, 0x5A, 0x67, 0x90, 0x9E, 0x84, 0xB8, 0x46, 0x7C, 0x96, 0x00, 
   0x10, 0x7F, 0x42, 0x3F, 0x96, 0xB0, 0xBE, 0x91, 0x7D, 0x85, 0x91, 0x0E, 0x28, 0xA7, 0x29, 0x43, 
   0x8F, 0x41, 0x5B, 0x61, 0x5F, 0x90, 0x9A, 0x71, 0x6E, 0xA0, 0x38, 0x3A, 0x95, 0x32, 0x51, 0x8A, 
   0x61, 0x85, 0x91, 0x8A, 0x6E, 0x9D, 0x76, 0x66, 0xC3, 0x4A, 0x5E, 0x98, 0x00, 0x19, 0x24, 0x00, 
   0x3D, 0x42, 0x7D, 0x7A, 0xD5, 0x98, 0xA0, 0xE8, 0x86, 0xA0, 0xA2, 0x33, 0x5E, 0x77, 0x0E, 0x39, 
   0x69, 0x41, 0x49, 0x8A, 0x64, 0x60, 0x95, 0x59, 0x61, 0x78, 0x4D, 0x78, 0x7E, 0x30, 0x66, 0x79, 
   0x5E, 0x4A, 0xAE, 0x75, 0x6C, 0xCF, 0x31, 0x82, 0x55, 0x21, 0x32, 0x2D, 0x98, 0x38, 0xB1, 0x54, 
   0x9B, 0xA3, 0x15, 0x7A, 0x87, 0x7A, 0x67, 0xD0, 0x57, 0x5F, 0x89, 0x00, 0x1E, 0x2C, 0x35, 0x4C, 
   0x7C, 0x97, 0x8E, 0xBC, 0x65, 0x7E, 0x9A, 0x46, 0x83, 0xA9, 0x17, 0x32, 0x67, 0x24, 0x37, 0x34, 
   0x6B, 0x88, 0x86, 0xA0, 0x9B, 0xD8, 0x39, 0x45, 0xAF, 0x16, 0x55, 0x57, 0x87, 0x7B, 0x55, 0x53, 
   0x4D, 0x88, 0x15, 0x21, 0x53, 0x5A, 0x73, 0x9C, 0x61, 0xB3, 0xE4, 0x46, 0x62, 0xA6, 0x83, 0x00, 
   0x6B, 0x48, 0x68, 0x6A, 0x00, 0x9E, 0x6C, 0x3F, 0x66, 0x87, 0x9D, 0x6A, 0xDF, 0x5B, 0x48, 0xC4, 
   0x36, 0x00, 0x68, 0x61, 0xCF, 0x7E, 0x7B, 0xDD, 0xA1, 0x8D, 0x15, 0x81, 0x73, 0x3A, 0x8E, 0x00, 
   0xA0, 0xDE, 0x05, 0x47, 0x7D, 0x71, 0x07, 0x3B, 0xA4, 0x8A, 0xE4, 0xA5, 0xFF, 0xF2, 0x9B, 0xD0, 
   0xAC, 0x38, 0x50, 0xB2, 0x00, 0x00, 0x53, 0x03, 0x09, 0x26, 0xBE, 0x91, 0xC3, 0xFF, 0xC8, 0xFF, 
   0x00, 0x79, 0x66, 0x00, 0x3A, 0x3F, 0xD4, 0x94, 0xFF, 0xB8, 0xAE, 0xFB, 0x36, 0x5A, 0x83, 0x46, 
   0x4A, 0x87, 0x1A, 0x49, 0x77, 0x41, 0x5C, 0x80, 0x42, 0xA1, 0x6E, 0x5A, 0x8E, 0x59, 0x45, 0x21, 
   0xB7, 0x57, 0x17, 0xE6, 0x58, 0x86, 0x5E, 0x33, 0x8A, 0x75, 0x9B, 0x9C, 0xD8, 0xB5, 0xAE, 0xE8, 
   0x1C, 0x4C, 0x83, 0x00, 0x00, 0x1E, 0x3F, 0x4D, 0x7E, 0x34, 0x3D, 0x6D, 0x3B, 0x56, 0xA7, 0x49, 
   0x75, 0x86, 0x4C, 0x6C, 0x7B, 0x7B, 0x73, 0x87, 0x7A, 0x7E, 0xB5, 0x55, 0x7C, 0x9D, 0x36, 0x7D, 
   0x7E, 0x23, 0x13, 0x54, 0x1F, 0x00, 0x76, 0x92, 0x9D, 0x9F, 0x65, 0x7D, 0x77, 0x2B, 0x44, 0x82, 
   0x5C, 0x86, 0x98, 0x3F, 0x61, 0x65, 0x17, 0x00, 0x7C, 0x36, 0x18, 0xAA, 0x98, 0xC0, 0x8D, 0x80, 
   0xA5, 0x70, 0x28, 0x57, 0xB7, 0x00, 0x0F, 0x65, 0x43, 0x2C, 0x47, 0x72, 0x94, 0x8B, 0x6D, 0x89, 
   0x8C, 0x38, 0x22, 0x7B, 0x2C, 0x4F, 0x98, 0x43, 0x72, 0x7B, 0x5A, 0x6C, 0x76, 0x55, 0x49, 0x8D, 
   0x33, 0x32, 0x7C, 0x3F, 0x60, 0x99, 0x78, 0x83, 0x92, 0x5A, 0x7D, 0x7A, 0x20, 0x42, 0x5E, 0x1B, 
   0x1F, 0x81, 0x61, 0x59, 0xAF, 0x79, 0x8C, 0xA2, 0x45, 0x42, 0x24, 0x39, 0x37, 0x48, 0x56, 0x55, 
   0xC9, 0x50, 0x95, 0xD0, 0x50, 0x72, 0x68, 0x44, 0x31, 0x61, 0x33, 0x3C, 0x72, 0x4A, 0x71, 0xB7, 
   0x4B, 0x7D, 0x84, 0x62, 0x43, 0x5B, 0x45, 0x31, 0x7D, 0x4B, 0x4F, 0x7E, 0x4B, 0x83, 0x6F, 0x50, 
   0x61, 0x88, 0x3F, 0x55, 0xAC, 0x44, 0x5F, 0xBC, 0x3F, 0x47, 0x96, 0x71, 0x46, 0x6F, 0x4E, 0x62, 
   0x4A, 0x2B, 0x4B, 0x6C, 0x42, 0x40, 0x6A, 0x60, 0x58, 0x90, 0x3F, 0x70, 0xDC, 0x50, 0x5A, 0x88, 
   0x5C, 0x2E, 0x54, 0x46, 0x75, 0x83, 0x57, 0x93, 0xC8, 0x6C, 0xA7, 0xD6, 0x36, 0x2B, 0x37, 0x00, 
   0x00, 0x00, 0x27, 0x48, 0x88, 0x91, 0xC4, 0xD8, 0x97, 0x91, 0xD3, 0x3A, 0x3A, 0x91, 0x1C, 0x17, 
   0x27, 0x59, 0x78, 0x59, 0x21, 0x74, 0xA6, 0x2E, 0x52, 0xBE, 0xA0, 0x73, 0x9A, 0x76, 0x66, 0x74, 
   0x00, 0x4D, 0x54, 0x00, 0x24, 0x59, 0x4C, 0x5E, 0x5F, 0x9F, 0x93, 0x62, 0x5B, 0x5A, 0xBA, 0x15, 
   0x31, 0xB4, 0x16, 0x2D, 0x27, 0x64, 0x74, 0x41, 0x8E, 0x71, 0xDA, 0x77, 0x7E, 0xF8, 0x51, 0x93, 
   0x7E, 0x15, 0x3B, 0x57, 0x15, 0x00, 0x3F, 0x67, 0x75, 0x74, 0x85, 0xC0, 0xC6, 0x50, 0x64, 0xA4, 
   0x0A, 0x4A, 0x7F, 0x4E, 0x5E, 0x60, 0x5A, 0x0F, 0x4E, 0x2D, 0x5C, 0x9F, 0x34, 0xA3, 0xA0, 0x68, 
   0x65, 0x57, 0x74, 0x6A, 0x90, 0x57, 0x79, 0xBD, 0x28, 0x18, 0x71, 0x17, 0x0E, 0x21, 0x59, 0x9F, 
   0x8A, 0xA4, 0xAC, 0xD8, 0x53, 0x34, 0x7E, 0x00, 0x28, 0x5C, 0x51, 0x79, 0x75, 0x6A, 0x81, 0xA0, 
   0x3F, 0x61, 0xC4, 0x52, 0x7E, 0x96, 0x8B, 0x8C, 0x72, 0x77, 0x45, 0x99, 0x03, 0x28, 0x87, 0x19, 
   0x62, 0x76, 0x70, 0x9C, 0x7B, 0x3F, 0x3C, 0x66, 0x5E, 0x3E, 0xA8, 0xCE, 0xFA, 0xFF, 0x67, 0xA6, 
   0x7B, 0x00, 0x00, 0x05, 0x00, 0x07, 0x67, 0x7F, 0xC8, 0xAA, 0xBD, 0xAE, 0xCA, 0x83, 0x6E, 0xC3, 
   0x14, 0x58, 0x5A, 0x00, 0x00, 0x4D, 0x66, 0x4A, 0xAE, 0xD3, 0xFD, 0xB3, 0x59, 0x90, 0x78, 0x00, 
   0x08, 0x5F, 0x3C, 0x44, 0x8C, 0x59, 0x5B, 0x8D, 0x4E, 0x67, 0x83, 0x2C, 0x5C, 0xA1, 0x44, 0x61, 
   0x90, 0x4C, 0x51, 0x64, 0x7A, 0x52, 0x8F, 0x57, 0x8B, 0xF0, 0x28, 0x5D, 0x93, 0x3F, 0x4B, 0x3C, 
   0x7E, 0x57, 0x80, 0x57, 0x58, 0x93, 0x1E, 0x54, 0xA6, 0x6D, 0x7C, 0xBC, 0x5B, 0x92, 0x76, 0x2D, 
   0x30, 0x63, 0x55, 0x24, 0x6F, 0x4F, 0x6A, 0x9E, 0x28, 0x8E, 0xB0, 0x61, 0x9D, 0x82, 0x61, 0x28, 
   0x6F, 0x2D, 0x00, 0x97, 0x07, 0x4C, 0x70, 0x5F, 0x9B, 0x83, 0xBB, 0xA1, 0xE9, 0x58, 0x55, 0x65, 
   0x00, 0x14, 0x4E, 0x11, 0x4E, 0xAA, 0x80, 0x89, 0xA0, 0x88, 0x9A, 0x7F, 0x59, 0x2C, 0x96, 0x0D, 
   0x21, 0x96, 0x1F, 0x6E, 0x91, 0x76, 0xB4, 0x91, 0x7D, 0x8A, 0x91, 0x53, 0x1C, 0x91, 0x08, 0x21, 
   0xAC, 0x46, 0x9A, 0x94, 0x86, 0x7E, 0x6C, 0x31, 0x3A, 0x88, 0x43, 0x5D, 0xA6, 0x66, 0xA8, 0x7F, 
   0x5B, 0x6E, 0x91, 0x49, 0x38, 0xBE, 0x5E, 0x59, 0x94, 0x5C, 0x64, 0x70, 0x0B, 0x48, 0x91, 0x2E, 
   0x3E, 0x86, 0x75, 0x73, 0x66, 0x4A, 0x81, 0xAD, 0x57, 0x5B, 0xD0, 0x96, 0x88, 0x8A, 0x5B, 0x80, 
   0x87, 0x14, 0x3F, 0x9B, 0x40, 0x53, 0x88, 0x41, 0x31, 0x38, 0x2D, 0x39, 0x5D, 0xA0, 0xB3, 0xFF, 
   0xA3, 0xCD, 0xDC, 0x00, 0x00, 0x44, 0x00, 0x00, 0x3B, 0x84, 0x86, 0x5F, 0x2D, 0x9C, 0x98, 0x6E, 
   0x65, 0xF0, 0xB8, 0x75, 0xD3, 0x38, 0x85, 0x52, 0x0D, 0x4F, 0x5A, 0x62, 0x3C, 0x9D, 0x7D, 0x52, 
   0x70, 0x0B, 0x58, 0x71, 0x23, 0x54, 0xB0, 0x8B, 0x77, 0xBB, 0x6F, 0x7C, 0x64, 0x18, 0x37, 0x5C, 
   0x02, 0x37, 0x6E, 0x7D, 0x78, 0x81, 0xAC, 0x90, 0xCD, 0x3E, 0x6D, 0xBA, 0x15, 0x3E, 0x62, 0x5E, 
   0x4E, 0x2D, 0x65, 0x71, 0x6F, 0x2D, 0x50, 0x91, 0x61, 0x57, 0xF0, 0x7F, 0x8A, 0xC2, 0x51, 0x5C, 
   0x3D, 0x33, 0x18, 0x58, 0x4A, 0x59, 0x8F, 0x5D, 0xB0, 0xD1, 0x59, 0x89, 0xC2, 0x83, 0x27, 0x6C, 
   0x50, 0x2E, 0x72, 0x00, 0x60, 0xBC, 0x68, 0xCB, 0xAC, 0xFF, 0x89, 0x63, 0x32, 0x55, 0x78, 0x00, 
   0x61, 0xE2, 0xA5, 0x81, 0xDD, 0x91, 0xB6, 0x71, 0x42, 0x7D, 0x66, 0xAB, 0x70, 0xFA, 0x9B, 0x79, 
   0xF1, 0x00, 0x55, 0x42, 0x20, 0x65, 0x35, 0xAC, 0x80, 0x8F, 0x81, 0x4E, 0xE4, 0x2C, 0x45, 0xDB, 
   0x82, 0x70, 0x90, 0x56, 0xC8, 0x5D, 0x5C, 0xAA, 0xA8, 0xF3, 0x99, 0xFF, 0x8A, 0x63, 0xCE, 0x00, 
   0x00, 0x20, 0x00, 0x0E, 0x3C, 0x52, 0xB8, 0x91, 0x77, 0xD1, 0xA5, 0x6C, 0x57, 0x84, 0x3E, 0x10, 
   0x89, 0x39, 0x65, 0x78, 0x4B, 0x5C, 0x7E, 0x3E, 0x5A, 0x81, 0x86, 0xB3, 0xC8, 0xE6, 0xEA, 0xF5, 
   0x8B, 0x7C, 0x8A, 0x00, 0x00, 0x15, 0x3F, 0x5B, 0x74, 0x2E, 0x5B, 0x63, 0x3C, 0x4B, 0xA3, 0x67, 
   0x5D, 0xAF, 0x79, 0x6A, 0x7A, 0x4C, 0x5B, 0x73, 0x57, 0x7E, 0x52, 0x6D, 0xB0, 0xAF, 0x71, 0x74, 
   0xED, 0x24, 0x15, 0x8A, 0x1E, 0x3B, 0x26, 0x5D, 0x69, 0x92, 0x6F, 0x6F, 0xD1, 0x36, 0x42, 0x66, 
   0x46, 0x6A, 0x60, 0x5C, 0x8B, 0xD2, 0x50, 0x45, 0xA4, 0x0C, 0x23, 0x48, 0x47, 0x48, 0x75, 0xA9, 
   0xB5, 0xE1, 0x73, 0x91, 0x94, 0x00, 0x1B, 0x46, 0x1A, 0x18, 0x2E, 0x70, 0x41, 0x96, 0x56, 0x66, 
   0xBA, 0x24, 0x6E, 0x60, 0x74, 0x6F, 0x66, 0x84, 0x7F, 0xC7, 0x10, 0x4F, 0x92, 0x20, 0x20, 0x30, 
   0x5A, 0x5E, 0x6E, 0x61, 0x5F, 0xA3, 0x55, 0x71, 0x86, 0x37, 0x6A, 0x80, 0x37, 0x25, 0x7A, 0x43, 
   0x48, 0x91, 0x56, 0xA4, 0x85, 0x62, 0x65, 0x36, 0x50, 0x1F, 0x7C, 0x3F, 0x2B, 0xD8, 0x44, 0x98, 
   0x93, 0x44, 0x66, 0x3D, 0x61, 0x3D, 0x76, 0x3F, 0x53, 0x9A, 0x3F, 0x6A, 0x90, 0x4B, 0x4F, 0x9C, 
   0x62, 0x66, 0xA0, 0x4B, 0x81, 0x87, 0x4A, 0x4D, 0x2C, 0x22, 0x09, 0x84, 0x4B, 0x6B, 0xCB, 0x6E, 
   0x8A, 0x77, 0x51, 0x62, 0x61, 0x4B, 0x50, 0xDD, 0x4F, 0x70, 0xBD, 0x37, 0x41, 0x1E, 0x2B, 0x40, 
   0x39, 0x48, 0x5C, 0x8B, 0x48, 0x57, 0xC0, 0x2C, 0x62, 0x87, 0x4F, 0x3A, 0x16, 0x4B, 0x31, 0x86, 
   0x46, 0x62, 0xDF, 0x74, 0x93, 0xC4, 0x62, 0xB5, 0x7D, 0x27, 0x4B, 0x68, 0x20, 0x09, 0x8E, 0x6B, 
   0x5C, 0x86, 0x5A, 0x3B, 0x20, 0x33, 0x32, 0x84, 0x3F, 0x7F, 0xE2, 0x51, 0x8C, 0x8C, 0x63, 0x3C, 
   0x5C, 0x5C, 0x4C, 0x61, 0x4A, 0x74, 0x9A, 0x11, 0x62, 0x73, 0x56, 0x56, 0x9C, 0xB0, 0x82, 0xD8, 
   0x3B, 0x64, 0xA0, 0x00, 0x23, 0x00, 0x17, 0x23, 0x0D, 0x76, 0x59, 0xCE, 0xB1, 0x99, 0xFF, 0x2D, 
   0x7D, 0x64, 0x05, 0x21, 0x25, 0x40, 0x0C, 0x4B, 0x76, 0x98, 0xD3, 0x99, 0xD3, 0xFF, 0x3C, 0x33, 
   0x88, 0x29, 0x1B, 0x00, 0x29, 0x7C, 0x80, 0x68, 0xA5, 0xFF, 0x89, 0x6A, 0x9F, 0x2C, 0x3E, 0x51, 
   0x00, 0x1A, 0x56, 0x61, 0x38, 0x90, 0x85, 0x84, 0xC3, 0x57, 0x6A, 0x62, 0x49, 0x69, 0x3E, 0x25, 
   0x60, 0xA3, 0x20, 0x00, 0x7B, 0x57, 0x3C, 0x12, 0x6B, 0xC9, 0xA4, 0x7E, 0xAD, 0xFF, 0x76, 0x44, 
   0x89, 0x24, 0x1B, 0x37, 0x18, 0x55, 0x75, 0x7A, 0x8A, 0xDD, 0x64, 0x6A, 0x51, 0x1A, 0x71, 0x10, 
   0x2D, 0x71, 0xF2, 0x7F, 0x6A, 0xFF, 0x85, 0x58, 0x57, 0x55, 0x78, 0x25, 0x2F, 0x49, 0x96, 0x07, 
   0x16, 0x92, 0x1B, 0x47, 0x73, 0x91, 0xB7, 0xB4, 0xBF, 0xB1, 0xE6, 0x6B, 0x6F, 0x7D, 0x1C, 0x1B, 
   0x7F, 0x00, 0x09, 0x3F, 0x01, 0x51, 0x54, 0xB1, 0xBB, 0xEC, 0xFC, 0xBA, 0xF2, 0x0E, 0x4F, 0x6D, 
   0x00, 0x00, 0x4D, 0x4E, 0x42, 0x7A, 0xE0, 0xC9, 0xA3, 0xA1, 0xA7, 0xC4, 0x1E, 0x37, 0x72, 0x00, 
   0x1E, 0x38, 0x33, 0x7F, 0xB0, 0xD4, 0x95, 0xD9, 0x77, 0x22, 0x4A, 0x00, 0x32, 0x45, 0x00, 0x6D, 
   0xAD, 0xAC, 0x9C, 0xBA, 0xA3, 0x7F, 0x76, 0x41, 0x11, 0x76, 0x1C, 0x2E, 0x99, 0x27, 0x96, 0xB5, 
   0x45, 0x8B, 0x65, 0x69, 0x24, 0x87, 0x6F, 0x25, 0x9A, 0x2A, 0x99, 0x9B, 0x56, 0xA5, 0xC7, 0x65, 
   0x53, 0x80, 0x10, 0x07, 0x2F, 0x4A, 0x53, 0x6A, 0x84, 0xC0, 0xDF, 0x45, 0x54, 0xE4, 0x12, 0x2A, 
   0x36, 0x51, 0x5D, 0x1E, 0x74, 0x6E, 0xC5, 0x4D, 0x53, 0xD7, 0x36, 0x54, 0x60, 0x6E, 0x82, 0x81, 
   0x4B, 0x5A, 0x92, 0x1D, 0x4F, 0x77, 0x56, 0x87, 0x83, 0x3B, 0x32, 0x95, 0x4F, 0x2D, 0x96, 0xA4, 
   0xA1, 0x91, 0x3C, 0x96, 0x91, 0x08, 0x40, 0x91, 0x47, 0x39, 0x91, 0x88, 0x84, 0x9C, 0x6B, 0x7E, 
   0x85, 0x30, 0x4A, 0xA0, 0x1E, 0x33, 0x88, 0x46, 0x62, 0x5A, 0x6A, 0x96, 0x78, 0x6B, 0x7A, 0xC9, 
   0x48, 0x61, 0xAC, 0x46, 0x42, 0x83, 0x13, 0x42, 0x4E, 0x3C, 0x4F, 0x7C, 0x93, 0x89, 0xC7, 0x70, 
   0x89, 0xA4, 0x08, 0x34, 0x48, 0x1E, 0x45, 0x65, 0x43, 0x64, 0xAC, 0x79, 0x7D, 0xCA, 0x96, 0xA4, 
   0xB1, 0x5A, 0x8A, 0x74, 0x00, 0x10, 0x3E, 0x14, 0x26, 0x67, 0x94, 0x7D, 0xB9, 0xA5, 0x9B, 0xC5, 
   0x3C, 0x77, 0x8F, 0x2D, 0x3B, 0x43, 0x42, 0x0D, 0x65, 0x11, 0x4E, 0x8F, 0x37, 0xB8, 0x9E, 0xA7, 
   0x81, 0xB1, 0x91, 0x59, 0xC0, 0x28, 0x58, 0x5D, 0x37, 0x73, 0x66, 0x9B, 0x8E, 0xA3, 0x27, 0x53, 
   0x92, 0x00, 0x34, 0x64, 0x49, 0x51, 0x80, 0x5D, 0x42, 0x88, 0x87, 0x88, 0xB0, 0x5E, 0x93, 0xB5, 
   0x13, 0x1B, 0x5D, 0x14, 0x32, 0x51, 0x82, 0x9A, 0x92, 0x94, 0x79, 0xC6, 0x1B, 0x4B, 0x98, 0x15, 
   0x50, 0x37, 0x87, 0x8F, 0x7C, 0x4F, 0x6C, 0xB1, 0x3E, 0x28, 0x81, 0x6C, 0x68, 0x93, 0x2F, 0xB9, 
   0xAA, 0x47, 0x5E, 0x56, 0x9C, 0x2B, 0xA0, 0x4C, 0x6A, 0xBE, 0x13, 0x7E, 0x5E, 0x5F, 0x8B, 0x7C, 
   0x50, 0x8F, 0xBB, 0x6E, 0x01, 0x94, 0x52, 0x16, 0x61, 0x18, 0xFF, 0x97, 0x7E, 0xA9, 0xBD, 0xC2, 
   0x0C, 0x7D, 0x6D, 0xA8, 0xC4, 0x75, 0xFF, 0xFF, 0x98, 0x85, 0x8C, 0x1B, 0x00, 0x6B, 0x00, 0x01, 
   0x84, 0x4F, 0x9A, 0x63, 0xA8, 0xE8, 0x67, 0x9D, 0xA8, 0xF3, 0x1F, 0x2F, 0xA1, 0x00, 0x13, 0x59, 
   0xA9, 0x9F, 0xE3, 0xFF, 0xE6, 0xF9, 0x5D, 0xB6, 0x74, 0x34, 0x71, 0x7C, 0x7D, 0x3C, 0xFA, 0x3A, 
   0x1B, 0x94, 0x00, 0x3D, 0x22, 0x53, 0x8E, 0x4A, 0x94, 0x74, 0xB9, 0x4A, 0x6A, 0xE7, 0x4F, 0xA7, 
   0x7E, 0x38, 0x50, 0x21, 0x1D, 0x10, 0x8F, 0x8C, 0x73, 0xD0, 0x71, 0xA8, 0x93, 0x55, 0x91, 0x8C, 
   0x76, 0x73, 0x97, 0x0F, 0x2E, 0x87, 0x36, 0x75, 0x9F, 0x20, 0x80, 0xB0, 0x71, 0x5D, 0x5A, 0x67, 
   0x4C, 0xB4, 0x4A, 0x58, 0xAD, 0x39, 0x75, 0x3F, 0x33, 0x6A, 0x6C, 0x67, 0x6A, 0xA7, 0x67, 0x5F, 
   0xA9, 0x5A, 0xAD, 0xC5, 0x63, 0x7C, 0x94, 0x0C, 0x02, 0x2B, 0x29, 0x3A, 0x6F, 0x85, 0xA1, 0xBA, 
   0x4D, 0x3C, 0x8E, 0x3B, 0x48, 0x8E, 0x6E, 0x86, 0x88, 0x45, 0x7A, 0x8C, 0x2E, 0x40, 0x7F, 0x3A, 
   0x40, 0x94, 0x68, 0x80, 0x76, 0x78, 0xAC, 0x5D, 0x31, 0x47, 0x9A, 0x00, 0x00, 0x62, 0x28, 0x26, 
   0x6A, 0xA3, 0xCA, 0xA5, 0x88, 0xB5, 0xA0, 0x46, 0x41, 0x78, 0x27, 0x2D, 0x92, 0x32, 0x5E, 0x6E, 
   0x60, 0x5E, 0x62, 0x6B, 0x58, 0x84, 0x26, 0x46, 0x84, 0x20, 0x36, 0x6E, 0x71, 0x5F, 0xA2, 0x56, 
   0x8E, 0x90, 0x44, 0x60, 0x2A, 0x33, 0x31, 0x71, 0x4A, 0x59, 0xFF, 0x5B, 0x7B, 0xB6, 0x44, 0x4D, 
   0x3B, 0x3E, 0x36, 0x33, 0x33, 0x59, 0x6E, 0x56, 0x65, 0xAA, 0x5C, 0x5F, 0x9B, 0x57, 0x65, 0x7E, 
   0x4B, 0x4E, 0x8E, 0x4A, 0x53, 0x65, 0x28, 0x5E, 0x71, 0x5B, 0x64, 0x73, 0x40, 0x26, 0x87, 0x4C, 
   0x67, 0xB6, 0x63, 0x96, 0xBA, 0x5C, 0x6D, 0x73, 0x55, 0x49, 0x70, 0x1B, 0x64, 0x75, 0x3D, 0x36, 
   0x5F, 0x6B, 0x63, 0x87, 0x2C, 0x7E, 0xBA, 0x4E, 0x39, 0x63, 0x4F, 0x07, 0x1A, 0x4B, 0x5F, 0x79, 
   0x51, 0x8B, 0xEF, 0x79, 0x8C, 0xD9, 0x3F, 0x57, 0x59, 0x16, 0x23, 0x1E, 0x3F, 0x72, 0xB2, 0x89, 
   0x88, 0xD4, 0x60, 0x4D, 0x70, 0x08, 0x08, 0x2A, 0x00, 0x27, 0x65, 0x7E, 0xAF, 0xB9, 0x92, 0xB1, 
   0xD2, 0x3C, 0x49, 0x97, 0x51, 0x3B, 0x34, 0x71, 0x67, 0x61, 0x1B, 0x66, 0xB7, 0x15, 0x43, 0xB1, 
   0x87, 0x59, 0x7A, 0x8C, 0x74, 0x4F, 0x01, 0x35, 0x59, 0x00, 0x2F, 0x81, 0x4D, 0x6A, 0x83, 0x8F, 
   0x83, 0x58, 0x5C, 0x56, 0x88, 0x17, 0x50, 0xB7, 0x34, 0x4A, 0x73, 0x58, 0x52, 0x5D, 0x5F, 0x55, 
   0x81, 0x60, 0x74, 0xA0, 0x81, 0xB3, 0xA1, 0x62, 0x77, 0xAB, 0x00, 0x23, 0x91, 0x26, 0x37, 0x39, 
   0x71, 0x3D, 0x67, 0x35, 0x40, 0xB4, 0x58, 0xA4, 0xAF, 0xA0, 0xB4, 0xA8, 0x53, 0x45, 0x82, 0x00, 
   0x03, 0x5D, 0x00, 0x38, 0x3C, 0x35, 0x3E, 0x5D, 0x96, 0xCC, 0xCA, 0xD0, 0xEE, 0xFF, 0x38, 0x17, 
   0xA2, 0x00, 0x00, 0x3C, 0x39, 0x7C, 0x57, 0x86, 0x86, 0x7C, 0x3D, 0x76, 0x90, 0x38, 0x5F, 0x92, 
   0x4F, 0x69, 0x62, 0x60, 0x51, 0xCA, 0x5B, 0x56, 0xF0, 0x5A, 0x61, 0x59, 0x47, 0x61, 0x30, 0x31, 
   0x40, 0x71, 0x2F, 0x43, 0xDC, 0xA7, 0xC2, 0xF3, 0x93, 0xD6, 0x7D, 0x00, 0x00, 0x3B, 0x00, 0x00, 
   0x47, 0x89, 0xD1, 0xC1, 0xD5, 0xCF, 0xCA, 0x6C, 0x60, 0x9C, 0x08, 0x45, 0x78, 0x01, 0x33, 0x77, 
   0x48, 0x4B, 0x99, 0x9A, 0xAC, 0xA9, 0x7D, 0xAA, 0x8B, 0x36, 0x03, 0x61, 0x18, 0x1E, 0x89, 0x6E, 
   0x9C, 0xA5, 0x68, 0x6F, 0x7E, 0x4B, 0x40, 0x73, 0x4E, 0x60, 0xAC, 0x2A, 0x1C, 0x7F, 0x25, 0x5C, 
   0x69, 0x43, 0x8A, 0xC4, 0x62, 0x5C, 0xA1, 0x68, 0x39, 0x1E, 0x4B, 0x55, 0x92, 0x2D, 0x73, 0xD9, 
   0x29, 0x5D, 0xAB, 0x6F, 0x52, 0x5A, 0x75, 0x69, 0x7C, 0x58, 0x53, 0xA5, 0x39, 0x54, 0xA5, 0x2C, 
   0x82, 0x92, 0x32, 0x70, 0x7A, 0x4A, 0x63, 0x6A, 0x62, 0x30, 0x8E, 0x4C, 0x42, 0xC8, 0x30, 0x9A, 
   0xA5, 0x70, 0xAA, 0x7B, 0x80, 0x4C, 0x80, 0x4B, 0x1C, 0x85, 0x00, 0x2E, 0x6F, 0x29, 0x5F, 0x8D, 
   0xA8, 0xAB, 0xB0, 0x90, 0xA5, 0x88, 0x00, 0x04, 0x66, 0x06, 0x20, 0xA6, 0x87, 0x95, 0x9C, 0x95, 
   0xB9, 0x91, 0x71, 0x5C, 0x91, 0x13, 0x21, 0x91, 0x00, 0x28, 0x9C, 0x5A, 0x9C, 0x85, 0xBC, 0xBE, 
   0x90, 0x54, 0x17, 0x90, 0x00, 0x2D, 0xA0, 0x45, 0x94, 0x8F, 0x58, 0x6D, 0x7D, 0x64, 0x4F, 0xA5, 
   0x63, 0x4E, 0x9E, 0x1E, 0x54, 0x65, 0x1F, 0x4A, 0x7C, 0x5B, 0x79, 0xBC, 0xA1, 0x7F, 0x8F, 0x67, 
   0x6E, 0x8E, 0x3B, 0x5B, 0xA3, 0x00, 0x28, 0x4D, 0x40, 0x62, 0x65, 0x54, 0x86, 0xD3, 0x73, 0x70, 
   0xBC, 0x73, 0x64, 0x54, 0x2E, 0x63, 0x64, 0x44, 0x5C, 0xBF, 0x92, 0x99, 0xCF, 0x24, 0x3C, 0x44, 
   0x1E, 0x03, 0x43, 0x9A, 0x87, 0xAB, 0x2D, 0xC1, 0x97, 0x00, 0x2D, 0x92, 0x5D, 0x22, 0xC5, 0x6B, 
   0x95, 0x69, 0x29, 0x69, 0x47, 0x84, 0x4D, 0xC9, 0x98, 0x85, 0xAC, 0x07, 0x67, 0x49, 0x1B, 0x81, 
   0x9D, 0x6A, 0x34, 0xA1, 0x32, 0x28, 0x2A, 0x22, 0x79, 0x7B, 0x4D, 0x65, 0xC7, 0x93, 0x78, 0xB7, 
   0x70, 0x93, 0x87, 0x18, 0x3D, 0x62, 0x13, 0x1B, 0x50, 0x5F, 0x72, 0x59, 0xA5, 0x8B, 0xB8, 0x3E, 
   0x74, 0xE7, 0x0A, 0x4B, 0x7F, 0x7B, 0x3E, 0x5F, 0x53, 0x5A, 0x54, 0x05, 0x45, 0x6F, 0x5D, 0x53, 
   0xC3, 0xA3, 0xBA, 0xFD, 0x3D, 0x80, 0x79, 0x4C, 0x00, 0x2D, 0x4B, 0x4F, 0x84, 0x0F, 0xEB, 0xC5, 
   0x83, 0x80, 0xA4, 0xB6, 0x28, 0x66, 0x00, 0x0D, 0x7E, 0x00, 0x30, 0x98, 0x91, 0xC1, 0xA7, 0xFF, 
   0xF4, 0x9F, 0xA4, 0xA4, 0xA7, 0x58, 0x77, 0xF1, 0x54, 0x70, 0xF6, 0x00, 0x16, 0x22, 0x00, 0x00, 
   0x00, 0xBD, 0xB0, 0xC6, 0xEE, 0xC0, 0xFF, 0x00, 0x67, 0x8B, 0x11, 0x6E, 0x63, 0xAD, 0x90, 0xBB, 
   0x6C, 0x67, 0xCE, 0x9F, 0x7C, 0xE3, 0xD7, 0xA6, 0xD2, 0x00, 0x53, 0x28, 0x00, 0x1E, 0x58, 0xC7, 
   0xAA, 0xFF, 0x98, 0xB2, 0x9B, 0x00, 0x00, 0x45, 0x2C, 0x00, 0xB6, 0x65, 0xC4, 0xB5, 0x49, 0xBB, 
   0x96, 0x39, 0x53, 0x84, 0x67, 0x5B, 0x7E, 0x5C, 0x69, 0xBD, 0x54, 0x45, 0x9A, 0x00, 0x00, 0x23, 
   0x22, 0x2B, 0x72, 0xFF, 0xFF, 0xFF, 0x5D, 0x66, 0x9C, 0x68, 0x6B, 0xA7, 0x45, 0x70, 0xAA, 0x49, 
   0x5D, 0x6A, 0x3D, 0x4C, 0x6E, 0x54, 0x79, 0xBD, 0x54, 0x50, 0x7E, 0x2D, 0x13, 0x5B, 0x55, 0x92, 
   0x73, 0x7D, 0xB5, 0xB9, 0x4E, 0x63, 0xCF, 0x40, 0x4D, 0x76, 0x1D, 0x28, 0x19, 0x40, 0x33, 0x86, 
   0x74, 0x79, 0xD7, 0x47, 0x65, 0x60, 0x30, 0x6C, 0x71, 0x79, 0x98, 0xD6, 0x4A, 0x5C, 0x8F, 0x00, 
   0x00, 0x26, 0x56, 0x5B, 0x80, 0xA0, 0xAC, 0x9C, 0x4F, 0x67, 0x8B, 0x00, 0x38, 0x5D, 0x34, 0x38, 
   0x4D, 0x9D, 0x5C, 0xA5, 0x70, 0x80, 0xC8, 0x1F, 0x7A, 0x61, 0x50, 0x51, 0x65, 0x6C, 0x4F, 0xA8, 
   0x37, 0x69, 0x96, 0x1F, 0x40, 0x50, 0x36, 0x34, 0x5B, 0x49, 0x41, 0xA0, 0x56, 0x8D, 0x8A, 0x6D, 
   0x8E, 0x4C, 0x4A, 0x2D, 0x60, 0x27, 0x38, 0xD9, 0x3E, 0x93, 0xAB, 0x61, 0x75, 0x4D, 0x66, 0x13, 
   0x56, 0x33, 0x35, 0x78, 0x33, 0x86, 0x74, 0x56, 0x65, 0x81, 0x57, 0x48, 0x99, 0x5C, 0x5E, 0xA4, 
   0x3F, 0x4D, 0x4E, 0x28, 0x47, 0x66, 0x56, 0x53, 0xC3, 0x57, 0x81, 0x86, 0x5C, 0x43, 0x59, 0x3A, 
   0x32, 0xC4, 0x5C, 0x6C, 0xB1, 0x5B, 0x78, 0x3C, 0x2D, 0x4A, 0x1A, 0x55, 0x44, 0xAB, 0x4A, 0x87, 
   0xEC, 0x44, 0x58, 0x9F, 0x5A, 0x29, 0x1F, 0x3E, 0x40, 0x58, 0x33, 0x5E, 0xC6, 0x5B, 0x77, 0x93, 
   0x6C, 0x8E, 0x4A, 0x21, 0x54, 0x7E, 0x2D, 0x10, 0xA2, 0x73, 0x78, 0x97, 0x7A, 0xA2, 0x5E, 0x4B, 
   0x5D, 0x9C, 0x32, 0x4F, 0xCC, 0x2B, 0x47, 0x40, 0x54, 0x26, 0x00, 0x2E, 0x4C, 0x94, 0x5D, 0xC1, 
   0xFF, 0x80, 0xA5, 0xB7, 0x58, 0x3C, 0x5E, 0x44, 0x3E, 0x78, 0x31, 0x53, 0x87, 0x0F, 0x3C, 0x54, 
   0x4A, 0x53, 0x77, 0xAB, 0x7C, 0xD7, 0x6A, 0x80, 0xD3, 0x00, 0x35, 0x02, 0x00, 0x02, 0x00, 0x77, 
   0x55, 0xBE, 0xB3, 0xC4, 0xFC, 0x62, 0x95, 0xC2, 0x00, 0x00, 0x2A, 0x00, 0x00, 0x00, 0x6A, 0x8E, 
   0x8C, 0xAC, 0xFF, 0xFF, 0x82, 0x69, 0xD0, 0x17, 0x31, 0x2C, 0x00, 0x44, 0x4B, 0x43, 0x1C, 0xA0, 
   0x6E, 0x69, 0x86, 0x63, 0x8D, 0x87, 0x56, 0x76, 0x81, 0x42, 0x62, 0xCA, 0x40, 0x4F, 0x99, 0x0D, 
   0x00, 0x00, 0x20, 0x63, 0x4A, 0x58, 0xAA, 0xE3, 0x8E, 0x6E, 0xD0, 0x78, 0x41, 0x4E, 0x38, 0x95, 
   0xB9, 0x46, 0x56, 0xB6, 0x35, 0x17, 0x25, 0x20, 0x68, 0x32, 0x5B, 0x92, 0xE7, 0x95, 0x7B, 0xE3, 
   0x60, 0x4C, 0x64, 0x14, 0x61, 0x1A, 0x35, 0x4A, 0xBB, 0x4D, 0x39, 0xEA, 0x1C, 0x58, 0x3A, 0x63, 
   0x82, 0x63, 0xE0, 0xB5, 0xFD, 0x5F, 0x62, 0xB2, 0x00, 0x00, 0x31, 0x00, 0x1D, 0x4C, 0x55, 0x99, 
   0x83, 0xF5, 0xA9, 0xCB, 0xED, 0xD5, 0xFF, 0x00, 0x42, 0x56, 0x00, 0x00, 0x26, 0x59, 0x41, 0x9E, 
   0xFF, 0xFF, 0xC2, 0x94, 0xAC, 0xBB, 0x00, 0x00, 0x6D, 0x00, 0x22, 0x3E, 0x7A, 0x7F, 0x9A, 0xBB, 
   0x86, 0xC3, 0x69, 0x6F, 0x6D, 0x00, 0x4C, 0x46, 0x15, 0x47, 0x97, 0x99, 0x90, 0xBF, 0x70, 0x67, 
   0x90, 0x00, 0x1B, 0x50, 0x08, 0x44, 0x72, 0x83, 0x9A, 0xA6, 0x7A, 0x6C, 0x76, 0x3B, 0x1C, 0x94, 
   0x57, 0x34, 0xB7, 0x35, 0xA2, 0x94, 0x4C, 0x80, 0x82, 0x8A, 0x29, 0x81, 0x3A, 0x2A, 0x76, 0x1D, 
   0x71, 0x88, 0x6C, 0xD2, 0xBC, 0x4A, 0x3C, 0xA4, 0x12, 0x00, 0x53, 0x4D, 0x5F, 0x43, 0x93, 0xC2, 
   0xD9, 0x65, 0x72, 0xEF, 0x3A, 0x47, 0x41, 0x38, 0x3E, 0x34, 0x3E, 0x1C, 0xC4, 0x39, 0x57, 0x9E, 
   0x6E, 0x98, 0x7D, 0x63, 0x60, 0xB6, 0x40, 0x3E, 0x94, 0x29, 0x56, 0x6D, 0x46, 0x95, 0x9B, 0x48, 
   0x62, 0x9C, 0x6B, 0x28, 0x91, 0x65, 0x61, 0x9C, 0x2B, 0x89, 0x85, 0x2B, 0x62, 0x90, 0x4F, 0x35, 
   0x90, 0x89, 0x8A, 0x90, 0x76, 0x90, 0x7F, 0x1F, 0x4A, 0xC9, 0x39, 0x48, 0xAA, 0x4A, 0x53, 0x58, 
   0x2E, 0x54, 0x47, 0x36, 0x56, 0xA9, 0x6B, 0x85, 0xB1, 0x7E, 0x7A, 0x89, 0x34, 0x51, 0x83, 0x67, 
   0x57, 0x8E, 0x71, 0x79, 0x8E, 0x46, 0x6D, 0xAF, 0x17, 0x4A, 0x80, 0x4B, 0x55, 0x57, 0x2C, 0x4B, 
   0x76, 0x41, 0x4E, 0xAC, 0xC6, 0xB0, 0xE6, 0xAC, 0xBF, 0xB0, 0x00, 0x15, 0x50, 0x00, 0x00, 0x4D, 
   0x87, 0x52, 0x5F, 0x29, 0x78, 0x9C, 0x41, 0x96, 0xE3, 0x91, 0x84, 0xBB, 0x4C, 0x21, 0x57, 0x00, 
   0x1C, 0x50, 0x65, 0x9B, 0x95, 0xB0, 0x91, 0xA7, 0x43, 0x46, 0xAD, 0x18, 0x6C, 0x94, 0x4A, 0x54, 
   0x5E, 0x5A, 0x69, 0x7A, 0x49, 0x51, 0x9C, 0x38, 0x3A, 0x69, 0x29, 0x52, 0x70, 0x53, 0x65, 0x99, 
   0x98, 0x83, 0xBB, 0x5D, 0x7C, 0x86, 0x00, 0x10, 0x40, 0x0D, 0x3F, 0x42, 0x94, 0xB3, 0xA7, 0xAC, 
   0x9D, 0xFF, 0x2D, 0x41, 0xCA, 0x14, 0x34, 0x16, 0x25, 0x72, 0x31, 0x55, 0x57, 0x96, 0x79, 0x63, 
   0xAB, 0x53, 0x64, 0xCF, 0x48, 0x6A, 0x8A, 0x4D, 0x70, 0x56, 0x31, 0x37, 0x89, 0x64, 0x2D, 0xAD, 
   0x64, 0x8A, 0x7C, 0x15, 0xB3, 0x89, 0x1E, 0x48, 0xA2, 0x7E, 0x00, 0x93, 0x63, 0x6A, 0x7A, 0x96, 
   0xFF, 0xCC, 0xFF, 0xDA, 0xD8, 0x83, 0x01, 0xAD, 0x00, 0x08, 0x7B, 0x0D, 0x86, 0x56, 0x98, 0xC0, 
   0x4C, 0x68, 0x32, 0x9B, 0x31, 0x29, 0xE4, 0x4B, 0x7A, 0xA3, 0x88, 0xE6, 0x93, 0xAC, 0xD4, 0xD8, 
   0x81, 0x7E, 0xCC, 0x3E, 0x3E, 0x8B, 0x29, 0x02, 0xAE, 0x76, 0x6A, 0xAF, 0x2C, 0xBC, 0x1E, 0x53, 
   0xD1, 0x4E, 0xCE, 0x71, 0xFF, 0x48, 0x1D, 0xFC, 0x00, 0x38, 0x63, 0x2B, 0x50, 0x42, 0x66, 0x6F, 
   0x96, 0x78, 0xC6, 0xE6, 0x6C, 0xAC, 0xA0, 0x4D, 0x39, 0x42, 0x00, 0x00, 0x53, 0x00, 0x00, 0x73, 
   0x6E, 0x9F, 0xA2, 0xFF, 0xFF, 0xFF, 0x77, 0x72, 0x9C, 0x92, 0x77, 0xA7, 0x40, 0x71, 0xA5, 0x32, 
   0x5E, 0x6A, 0x31, 0x79, 0x63, 0x6A, 0x4A, 0xBE, 0x5F, 0x33, 0xAC, 0x43, 0x78, 0x4F, 0x5A, 0x6E, 
   0x75, 0x4F, 0x4D, 0x7D, 0x5F, 0x86, 0x90, 0x5E, 0x9B, 0xC9, 0x51, 0x58, 0x9F, 0x0C, 0x00, 0x36, 
   0x4C, 0x40, 0x5D, 0x80, 0xAF, 0xD0, 0x69, 0x77, 0xA3, 0x35, 0x4D, 0x68, 0x39, 0x56, 0x82, 0x60, 
   0x65, 0x6F, 0x32, 0x30, 0x75, 0x16, 0x21, 0x91, 0x51, 0x74, 0x64, 0x8B, 0xBF, 0x7B, 0x6E, 0x73, 
   0xB4, 0x00, 0x00, 0x6B, 0x34, 0x21, 0x65, 0x85, 0xA1, 0xB5, 0x5D, 0x9C, 0x8E, 0x5B, 0x5C, 0x76, 
   0x3D, 0x3C, 0x96, 0x14, 0x40, 0x67, 0x54, 0x40, 0x6B, 0x71, 0x63, 0x7C, 0x44, 0x64, 0x4A, 0x44, 
   0x3D, 0x6B, 0x4F, 0x60, 0xF6, 0x55, 0x99, 0xB1, 0x3E, 0x54, 0x36, 0x49, 0x42, 0x5D, 0x38, 0x5D, 
   0x97, 0x61, 0x5D, 0xA8, 0x56, 0x30, 0x85, 0x34, 0x64, 0x5D, 0x56, 0x7B, 0x84, 0x56, 0x47, 0x69, 
   0x34, 0x52, 0x76, 0x50, 0x64, 0xA6, 0x57, 0x53, 0x92, 0x51, 0x4F, 0x9E, 0x3A, 0x88, 0xB8, 0x56, 
   0x5F, 0x60, 0x4F, 0x26, 0x46, 0x1C, 0x60, 0x62, 0x44, 0x8A, 0x77, 0x62, 0x68, 0xA8, 0x57, 0x66, 
   0xE1, 0x45, 0x4D, 0x6D, 0x3F, 0x1F, 0x27, 0x4F, 0x4E, 0x99, 0x4A, 0x9F, 0xD2, 0x60, 0x7C, 0x80, 
   0x2B, 0x2A, 0x28, 0x14, 0x01, 0x1F, 0x4F, 0x64, 0xBE, 0x7F, 0x83, 0xEF, 0x7F, 0x69, 0x8D, 0x1D, 
   0x6E, 0x51, 0x1C, 0x62, 0x88, 0x66, 0x61, 0xAF, 0x72, 0x66, 0x5E, 0x44, 0x2D, 0x31, 0x06, 0x34, 
   0x79, 0x67, 0x8C, 0xD2, 0x79, 0xA8, 0xEF, 0x34, 0x3A, 0x85, 0x33, 0x21, 0x20, 0x65, 0x7B, 0x4D, 
   0x33, 0x4E, 0xB6, 0x3F, 0x5F, 0xEA, 0x88, 0x6A, 0x75, 0x5F, 0x59, 0x22, 0x00, 0x31, 0x49, 0x0E, 
   0x4F, 0x79, 0x7C, 0x8E, 0xDC, 0x8F, 0x6C, 0x86, 0x1D, 0x2E, 0x30, 0x1D, 0x46, 0x59, 0x58, 0x76, 
   0x91, 0x87, 0x83, 0xC2, 0x53, 0x99, 0xC7, 0x24, 0x36, 0x70, 0x40, 0x30, 0x3B, 0x46, 0x59, 0x86, 
   0x58, 0x8F, 0xBA, 0x89, 0x99, 0x81, 0x4D, 0x56, 0x90, 0x00, 0x00, 0x83, 0x19, 0x28, 0x56, 0x83, 
   0xAF, 0x74, 0x7B, 0x94, 0xAA, 0x6F, 0x59, 0x8E, 0x1E, 0x30, 0x6C, 0x08, 0x10, 0x9A, 0x7C, 0x96, 
   0x8B, 0x77, 0xB5, 0x9C, 0x32, 0x53, 0x90, 0x38, 0x35, 0x79, 0x6C, 0x62, 0x80, 0x73, 0x79, 0xC5, 
   0x71, 0x67, 0xA2, 0x2F, 0x39, 0x45, 0x00, 0x67, 0x13, 0x20, 0x4D, 0xA1, 0x80, 0x50, 0xFF, 0xB4, 
   0xD9, 0xC1, 0x77, 0xA1, 0x44, 0x0B, 0x00, 0x5E, 0x00, 0x00, 0x7B, 0x3D, 0xAF, 0x90, 0xC5, 0xED, 
   0xD0, 0x97, 0x8C, 0xA8, 0x0B, 0x3E, 0x62, 0x09, 0x37, 0x99, 0x54, 0x54, 0x7C, 0x78, 0x9F, 0x88, 
   0x88, 0xBF, 0xCC, 0x50, 0x27, 0x81, 0x00, 0x18, 0x5D, 0x00, 0x5C, 0x9A, 0x8A, 0x8A, 0x9A, 0x8C, 
   0x3B, 0x6D, 0x4D, 0x52, 0x9C, 0x2E, 0x5F, 0xAF, 0x3F, 0x7C, 0x77, 0x56, 0xA3, 0xBA, 0x7C, 0x45, 
   0xB8, 0x2A, 0x0A, 0x33, 0x00, 0x5F, 0x5B, 0x14, 0x99, 0xBD, 0x79, 0x50, 0xAE, 0x92, 0x45, 0x65, 
   0x47, 0x73, 0x8F, 0x34, 0x5D, 0xC8, 0x21, 0x62, 0x9E, 0x1D, 0x3B, 0x58, 0x85, 0x5E, 0x5F, 0x74, 
   0x8C, 0xB1, 0x35, 0x42, 0xB7, 0x34, 0x54, 0xA5, 0x3A, 0x7C, 0x54, 0x59, 0x60, 0x76, 0x87, 0x49, 
   0xAA, 0x5D, 0x76, 0xB6, 0x11, 0x64, 0x8D, 0x1C, 0x58, 0x69, 0x7D, 0x79, 0x69, 0x6C, 0x67, 0xA8, 
   0x00, 0x0C, 0x93, 0x1E, 0x31, 0x72, 0xB9, 0xB2, 0xB1, 0x7B, 0xB3, 0x8F, 0x00, 0x39, 0x6D, 0x23, 
   0x27, 0x9B, 0x53, 0x61, 0xA1, 0x83, 0x90, 0x85, 0x99, 0x84, 0x90, 0x25, 0x28, 0x90, 0x00, 0x34, 
   0x8A, 0x71, 0x96, 0x85, 0xA0, 0xA1, 0xA7, 0x5F, 0x43, 0xA0, 0x1D, 0x30, 0x87, 0x00, 0x47, 0x63, 
   0x34, 0x4F, 0x5E, 0x76, 0x7F, 0xA4, 0x7E, 0x8B, 0xB6, 0x4A, 0x63, 0x8F, 0x2D, 0x40, 0x83, 0x3E, 
   0x5C, 0x83, 0x72, 0x68, 0x9A, 0x81, 0x9B, 0xBB, 0x45, 0x60, 0xA1, 0x00, 0x0F, 0x11, 0x0E, 0x33, 
   0x4D, 0x96, 0x97, 0xEC, 0xBA, 0xC1, 0xFF, 0x51, 0x69, 0x7C, 0x1F, 0x2D, 0x2E, 0x49, 0x3D, 0x71, 
   0x10, 0x70, 0x9A, 0x29, 0x61, 0x8C, 0x8C, 0x51, 0xA9, 0x87, 0x85, 0xA8, 0x14, 0x8F, 0x57, 0x40, 
   0x27, 0x7E, 0x67, 0x43, 0xB0, 0x2F, 0x8F, 0x61, 0x2B, 0x89, 0x95, 0x97, 0x33, 0xCD, 0x52, 0x4E, 
   0x5A, 0x17, 0x70, 0x59, 0x38, 0x7A, 0xB4, 0x66, 0x29, 0xA2, 0x34, 0x34, 0x3B, 0x40, 0x74, 0x8B, 
   0x58, 0x4E, 0xB5, 0x5E, 0x6D, 0x99, 0x74, 0xA0, 0x77, 0x13, 0x5B, 0x8E, 0x14, 0x2D, 0x7E, 0x82, 
   0x57, 0x79, 0xB0, 0xB4, 0xB3, 0x05, 0x6A, 0xA2, 0x22, 0x42, 0x6E, 0xAB, 0x8A, 0x9B, 0x34, 0x67, 
   0x80, 0x19, 0x18, 0x4F, 0x81, 0x65, 0xBE, 0x66, 0xCD, 0xDB, 0x5B, 0x6B, 0x63, 0x92, 0x03, 0x57, 
   0x08, 0x32, 0x92, 0x00, 0x98, 0xB8, 0xAF, 0x86, 0x99, 0xAF, 0x8D, 0x9B, 0x5A, 0x66, 0xB8, 0x3D, 
   0x50, 0xB8, 0x75, 0xB6, 0xC7, 0x69, 0x6B, 0x63, 0x3C, 0x17, 0x1A, 0x81, 0xAC, 0xB2, 0xB2, 0xCE, 
   0xFF, 0x06, 0x27, 0x6A, 0x00, 0x00, 0x10, 0xBF, 0xA2, 0xF2, 0xDB, 0xFE, 0xFF, 0x7F, 0xE6, 0x93, 
   0x9A, 0x94, 0xAC, 0x11, 0x26, 0x92, 0x00, 0x00, 0x73, 0x85, 0x82, 0xA5, 0xFD, 0xFF, 0x93, 0x17, 
   0x4F, 0x4C, 0x00, 0x02, 0xBB, 0xDE, 0xD8, 0xFF, 0x63, 0x97, 0x9F, 0x00, 0x00, 0x32, 0x65, 0x49, 
   0x68, 0x82, 0xCE, 0xB7, 0x6A, 0xA4, 0xC7, 0x08, 0x1E, 0x42, 0x00, 0x00, 0x1C, 0x6F, 0x6C, 0xC0, 
   0xB2, 0xC8, 0xF7, 0x37, 0x8C, 0x7C, 0x54, 0x60, 0x9A, 0x59, 0x60, 0xA5, 0x69, 0x6B, 0x6C, 0x3F, 
   0x7B, 0x9E, 0x3D, 0x57, 0xA3, 0x25, 0x28, 0x6E, 0x47, 0x71, 0x8F, 0x64, 0x8E, 0xC6, 0x3C, 0x33, 
   0x3C, 0x3C, 0x39, 0x47, 0x4E, 0x8A, 0x89, 0x5F, 0x91, 0xC5, 0x6A, 0x73, 0xDB, 0x46, 0x65, 0x7C, 
   0x18, 0x3C, 0x1E, 0x51, 0x4C, 0x84, 0x68, 0x8B, 0xD9, 0x2A, 0x47, 0x61, 0x62, 0x68, 0x4E, 0x6C, 
   0x93, 0xB4, 0x1B, 0x1F, 0x7B, 0x00, 0x03, 0x5F, 0x6F, 0x79, 0xA4, 0xB5, 0xC0, 0xA5, 0x52, 0x7A, 
   0x82, 0x05, 0x21, 0x80, 0x1B, 0x19, 0x4C, 0x78, 0x43, 0x81, 0x84, 0x95, 0xC0, 0x17, 0x8A, 0x76, 
   0x38, 0x3E, 0x47, 0x5A, 0x3C, 0xB1, 0x4F, 0x6F, 0x99, 0x38, 0x68, 0x10, 0x43, 0x13, 0x46, 0x3E, 
   0x47, 0xF4, 0x38, 0x93, 0xBC, 0x6C, 0x71, 0x53, 0x60, 0x37, 0x4B, 0x1B, 0x47, 0x7A, 0x32, 0x75, 
   0xAF, 0x5B, 0x70, 0x92, 0x62, 0x4D, 0x80, 0x5B, 0x46, 0x83, 0x38, 0x63, 0x3E, 0x2D, 0x5D, 0x56, 
   0x6D, 0x4D, 0x9D, 0x4C, 0x64, 0x84, 0x4C, 0x4E, 0x80, 0x4C, 0x5A, 0xBF, 0x67, 0x71, 0xB6, 0x4A, 
   0x6A, 0x5D, 0x21, 0x47, 0x11, 0x38, 0x1B, 0x6A, 0x6D, 0x78, 0xEB, 0x46, 0xAC, 0xA1, 0x5D, 0x2E, 
   0x23, 0x63, 0x27, 0x6E, 0x3A, 0x72, 0xE6, 0x34, 0x7E, 0x9B, 0x77, 0x71, 0x58, 0x3D, 0x4C, 0x6C, 
   0x14, 0x12, 0x67, 0x42, 0x4B, 0x74, 0x5A, 0x7A, 0x66, 0x4A, 0x48, 0xAE, 0x39, 0x55, 0xF3, 0x4B, 
   0x57, 0x63, 0x57, 0x6F, 0x17, 0x57, 0x75, 0xA0, 0x40, 0x73, 0xF5, 0x5B, 0x4E, 0x4D, 0x4E, 0x14, 
   0x00, 0x20, 0x38, 0x9A, 0x3E, 0x9B, 0xD6, 0x5C, 0x85, 0xA2, 0x6E, 0x56, 0x5C, 0x50, 0x32, 0x6C, 
   0x60, 0x5E, 0xAF, 0x0A, 0x5E, 0x59, 0x1D, 0x26, 0x3E, 0xAC, 0x67, 0xDF, 0x9A, 0xB7, 0xE9, 0x02, 
   0x5F, 0x4A, 0x00, 0x00, 0x09, 0x3D, 0x1B, 0x55, 0xB3, 0xBA, 0xB0, 0x7B, 0xD2, 0xE0, 0x39, 0x46, 
   0x94, 0x05, 0x00, 0x27, 0x3A, 0x5B, 0x50, 0x8D, 0x81, 0xD7, 0x78, 0x51, 0xBC, 0x66, 0x86, 0x4A, 
   0x57, 0xAC, 0x8D, 0x2B, 0x53, 0xD5, 0x1E, 0x0B, 0x60, 0x35, 0x27, 0x00, 0x1C, 0x4D, 0x64, 0x64, 
   0xBD, 0xFF, 0xD7, 0xBC, 0xE1, 0x46, 0x08, 0x50, 0x00, 0x01, 0x52, 0x21, 0x85, 0x97, 0x70, 0x46, 
   0x73, 0x79, 0x83, 0x77, 0x69, 0xDE, 0xDF, 0x56, 0x47, 0xD7, 0x49, 0x1C, 0x34, 0x4E, 0x4E, 0x39, 
   0x37, 0x78, 0xBD, 0x69, 0x46, 0xB3, 0x1A, 0x4E, 0x37, 0x1D, 0x73, 0x41, 0xD5, 0xC8, 0xFF, 0xAB, 
   0x9D, 0xFF, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x08, 0x89, 0x8B, 0xA6, 0xE9, 0xA1, 0xFA, 0x97, 0x9B, 
   0xCC, 0x00, 0x5A, 0x67, 0x00, 0x00, 0x37, 0x73, 0x5C, 0x99, 0xFF, 0xFF, 0xEA, 0x9A, 0xA4, 0x8E, 
   0x00, 0x00, 0x58, 0x00, 0x30, 0x69, 0x94, 0xAE, 0xB3, 0xA1, 0x7A, 0xB2, 0x1D, 0x18, 0x67, 0x05, 
   0x5B, 0x3A, 0x62, 0x35, 0x98, 0x92, 0x8D, 0xC8, 0x69, 0xA4, 0xD2, 0x1D, 0x31, 0x47, 0x21, 0x40, 
   0x5D, 0x8D, 0x8E, 0xCF, 0x4D, 0x48, 0x7F, 0x08, 0x03, 0x56, 0x2C, 0x4F, 0x84, 0x85, 0xA6, 0x91, 
   0x80, 0x6D, 0x9E, 0x57, 0x2E, 0x93, 0x21, 0x2F, 0x8D, 0x21, 0x9C, 0x70, 0x57, 0x9C, 0x8E, 0x86, 
   0x29, 0xB6, 0x42, 0x00, 0x7D, 0x2B, 0x7D, 0x6D, 0x69, 0xE0, 0xC8, 0x74, 0x6C, 0xC0, 0x23, 0x13, 
   0x36, 0x44, 0x3B, 0x5F, 0x3F, 0x76, 0xE3, 0x56, 0x8E, 0xC7, 0x61, 0x8C, 0x53, 0x38, 0x33, 0x47, 
   0x33, 0x05, 0xB4, 0x4B, 0x58, 0xA5, 0x42, 0xA6, 0x6D, 0x87, 0x95, 0xB1, 0x6F, 0x28, 0x94, 0x18, 
   0x2D, 0x6D, 0x1F, 0x8F, 0xA6, 0x76, 0x84, 0x9B, 0x72, 0x34, 0x90, 0x65, 0x56, 0x85, 0x24, 0x84, 
   0x96, 0x19, 0x62, 0xA1, 0x5A, 0x61, 0xA6, 0xAF, 0x70, 0x77, 0x4D, 0x42, 0x6B, 0x00, 0x27, 0x9E, 
   0x46, 0x89, 0xBB, 0x93, 0x9C, 0x65, 0x55, 0x46, 0x6B, 0x49, 0x57, 0xB5, 0x54, 0x73, 0x94, 0x4F, 
   0x6E, 0x9A, 0x49, 0x62, 0xB5, 0x5F, 0x61, 0x8C, 0x42, 0x60, 0x52, 0x25, 0x3E, 0x80, 0x6A, 0x61, 
   0xA4, 0x7C, 0x8F, 0xB0, 0x1B, 0x50, 0x7C, 0x27, 0x13, 0x7B, 0xBA, 0xA2, 0xA3, 0x36, 0xA2, 0x86, 
   0x00, 0x3A, 0x8C, 0x73, 0x4A, 0xAD, 0x80, 0x61, 0x62, 0x0A, 0x57, 0x4C, 0x7B, 0x90, 0xE0, 0xA0, 
   0x93, 0xBD, 0x00, 0x14, 0x3E, 0x00, 0x36, 0x92, 0x79, 0x87, 0x81, 0x76, 0x61, 0x55, 0x71, 0x61, 
   0xC7, 0x4D, 0x6C, 0x94, 0x23, 0x5A, 0x5A, 0x4B, 0x81, 0x97, 0x72, 0x5D, 0xA7, 0x2D, 0x18, 0x45, 
   0x06, 0x4C, 0x41, 0x5D, 0x7D, 0x9A, 0x98, 0xA7, 0xD6, 0x7B, 0x83, 0xD0, 0x07, 0x00, 0x66, 0x07, 
   0x21, 0x15, 0x4F, 0x80, 0x73, 0xA7, 0xA5, 0xE9, 0x85, 0x88, 0xFA, 0x00, 0x41, 0x41, 0x39, 0x34, 
   0x3F, 0x68, 0x5C, 0x7A, 0x32, 0x7B, 0x95, 0x6D, 0x50, 0xE2, 0xAB, 0x9A, 0xAE, 0x1C, 0x82, 0x52, 
   0x05, 0x00, 0x70, 0x7F, 0x0A, 0xB2, 0x6D, 0xD8, 0xB6, 0x91, 0xFF, 0xB8, 0xA5, 0x6E, 0xC2, 0x34, 
   0x00, 0xA2, 0x00, 0x00, 0x44, 0x16, 0xBA, 0x45, 0xFF, 0xFF, 0x9A, 0xE6, 0x5F, 0xFB, 0x00, 0x19, 
   0xD0, 0x20, 0x5F, 0x9B, 0x89, 0xB7, 0x5C, 0x4F, 0x6A, 0x7F, 0xB6, 0x97, 0xEB, 0xC9, 0xA0, 0xD9, 
   0x00, 0x64, 0x59, 0x0B, 0x46, 0x94, 0x6D, 0x95, 0x9A, 0x81, 0x8E, 0x58, 0x76, 0x38, 0xBB, 0xA1, 
   0x43, 0xFB, 0x31, 0xAF, 0x88, 0x18, 0x98, 0x64, 0xAA, 0x84, 0xFF, 0x69, 0x79, 0xC5, 0x04, 0x30, 
   0x80, 0x40, 0x2D, 0x37, 0x2F, 0x2E, 0x54, 0x00, 0x4A, 0xB2, 0x87, 0xC0, 0xAF, 0xC8, 0x9F, 0xAB, 
   0x49, 0x5F, 0x99, 0x13, 0x35, 0x82, 0x57, 0x6B, 0x7A, 0x52, 0x6B, 0x6A, 0x58, 0x7C, 0x99, 0x7A, 
   0x5E, 0xBC, 0x68, 0x52, 0xAF, 0x21, 0x79, 0x5D, 0x41, 0x71, 0x6C, 0x46, 0x32, 0x94, 0x52, 0x59, 
   0xAA, 0x4D, 0x8D, 0x5A, 0x42, 0x38, 0x76, 0x43, 0x45, 0x9A, 0x71, 0x97, 0xA2, 0x65, 0xB4, 0xC8, 
   0x63, 0x77, 0xA8, 0x0C, 0x01, 0x1C, 0x29, 0x22, 0x42, 0x90, 0xA0, 0xBA, 0x5C, 0x78, 0x7C, 0x22, 
   0x27, 0x7C, 0x34, 0x43, 0x8D, 0x6E, 0x6B, 0x6B, 0x58, 0x67, 0x7C, 0x36, 0x3B, 0xB0, 0x63, 0x80, 
   0x70, 0x78, 0x9B, 0x69, 0x26, 0x5F, 0x8A, 0x1F, 0x13, 0x5D, 0x37, 0x36, 0x7A, 0x78, 0x7D, 0xBA, 
   0x4C, 0xA1, 0x86, 0x57, 0x56, 0x5D, 0x56, 0x65, 0x68, 0x38, 0x30, 0x75, 0x43, 0x3B, 0xB4, 0x60, 
   0x7A, 0x97, 0x43, 0x5D, 0x56, 0x49, 0x3B, 0x5C, 0x4E, 0x69, 0x80, 0x4E, 0x53, 0xB4, 0x43, 0x48, 
   0x76, 0x44, 0x65, 0x75, 0x5B, 0x80, 0x96, 0x55, 0x3A, 0x6D, 0x2C, 0x39, 0x5C, 0x38, 0x57, 0x7F, 
   0x45, 0x6F, 0x7B, 0x6E, 0x37, 0x72, 0x41, 0x6A, 0xB7, 0x5C, 0x75, 0x99, 0x44, 0x42, 0x52, 0x33, 
   0x47, 0x68, 0x4F, 0x4E, 0x6F, 0x5B, 0x76, 0x9F, 0x40, 0x4F, 0xBD, 0x57, 0x44, 0x72, 0x41, 0x6D, 
   0x40, 0x4D, 0x6A, 0x92, 0x6F, 0x81, 0xF3, 0x62, 0x95, 0xA6, 0x27, 0x25, 0x1E, 0x20, 0x00, 0x28, 
   0x60, 0x90, 0xB2, 0x71, 0x7F, 0xA8, 0x54, 0x35, 0x53, 0x14, 0x3A, 0x59, 0x27, 0x48, 0x95, 0x6E, 
   0x62, 0xB4, 0x80, 0x7B, 0x97, 0x30, 0x81, 0x6F, 0x40, 0x62, 0x90, 0x61, 0x5A, 0xB0, 0x5F, 0x4C, 
   0x80, 0x0E, 0x1E, 0x29, 0x09, 0x2C, 0x53, 0x89, 0x9B, 0x96, 0x7F, 0xAE, 0xFF, 0x34, 0x56, 0xC3, 
   0x33, 0x31, 0x0F, 0x4F, 0x3C, 0x1F, 0x34, 0x44, 0x95, 0x46, 0x8A, 0xFF, 0xB2, 0x95, 0xDA, 0x5F, 
   0x5A, 0x61, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x49, 0x9B, 0xCA, 0xFF, 0xCF, 0xB4, 0xE5, 0x1C, 0x44, 
   0x59, 0x00, 0x00, 0x2E, 0x33, 0x00, 0x2A, 0x7D, 0x76, 0x9D, 0x9C, 0xEE, 0xF2, 0x83, 0xA4, 0xD0, 
   0x3F, 0x56, 0x71, 0x00, 0x19, 0x61, 0x25, 0x24, 0x3E, 0x72, 0x7B, 0x63, 0x86, 0xAA, 0xBC, 0x4D, 
   0x60, 0xBF, 0x35, 0x2B, 0xA8, 0x44, 0x7A, 0xB6, 0x43, 0x5E, 0x46, 0x1C, 0x26, 0x24, 0x1F, 0x61, 
   0x83, 0x73, 0x81, 0xE3, 0xA8, 0x89, 0xB8, 0x74, 0xA9, 0xB6, 0x26, 0x3F, 0x8A, 0x13, 0x04, 0x3D, 
   0x41, 0x5B, 0x56, 0x33, 0x9E, 0xB1, 0x7A, 0x41, 0xE7, 0xB9, 0xBE, 0xB3, 0x5A, 0xAE, 0x3F, 0x00, 
   0x00, 0x77, 0x00, 0x00, 0xCD, 0x51, 0xA9, 0x69, 0xBC, 0xDA, 0x8C, 0xDD, 0x72, 0xE2, 0x1C, 0x1F, 
   0x8B, 0x00, 0x1F, 0x6D, 0x31, 0x66, 0x82, 0xA7, 0xB2, 0x65, 0xBE, 0xD3, 0xB5, 0x42, 0x46, 0xB4, 
   0x00, 0x00, 0x3C, 0x00, 0x4D, 0x85, 0xAD, 0x8D, 0xDB, 0xBF, 0x86, 0x6E, 0x1C, 0x4B, 0x57, 0x00, 
   0x18, 0x91, 0x27, 0x7F, 0x99, 0xA8, 0x80, 0xBB, 0x8C, 0x4C, 0xA8, 0x3A, 0x41, 0x52, 0x1C, 0x86, 
   0x58, 0x4F, 0x8B, 0xCB, 0x7D, 0x44, 0xBF, 0x4E, 0x15, 0x5D, 0x03, 0x5A, 0x5C, 0x26, 0x8E, 0xA6, 
   0x7D, 0x50, 0x9C, 0x68, 0x3F, 0x6F, 0x40, 0x62, 0x6B, 0x4F, 0x7F, 0xB1, 0x2D, 0x51, 0xC8, 0x2A, 
   0x24, 0x6C, 0x7C, 0x6A, 0x55, 0x7D, 0x9A, 0xA6, 0x53, 0x67, 0xD9, 0x50, 0x6B, 0x7C, 0x15, 0x52, 
   0x63, 0x21, 0x1E, 0x63, 0x84, 0x6A, 0x82, 0x7E, 0xAF, 0xCD, 0x0B, 0x53, 0xA5, 0x16, 0x19, 0x64, 
   0x8F, 0x69, 0x6A, 0x57, 0x91, 0xA4, 0x1E, 0x36, 0xA5, 0x3B, 0x32, 0x72, 0x7B, 0x89, 0x9A, 0x5E, 
   0xAC, 0x9F, 0x46, 0x50, 0x66, 0x2A, 0x33, 0x88, 0x42, 0x56, 0x9B, 0x76, 0x90, 0x96, 0x70, 0x84, 
   0xB3, 0x2A, 0x49, 0xA0, 0x23, 0x2B, 0x77, 0x2B, 0x49, 0x6B, 0x7D, 0x7E, 0x88, 0x89, 0x7F, 0xA6, 
   0x38, 0x57, 0xA6, 0x25, 0x50, 0x99, 0x47, 0x5B, 0x6A, 0x4E, 0x67, 0x5F, 0x5A, 0x6E, 0xC0, 0x5A, 
   0x73, 0xA9, 0x4E, 0x6C, 0x80, 0x26, 0x27, 0x4C, 0x4A, 0x39, 0x70, 0xAC, 0xB2, 0xEF, 0x7C, 0x9F, 
   0xDD, 0x00, 0x1A, 0x29, 0x00, 0x00, 0x2E, 0x8B, 0x7E, 0x91, 0x50, 0x9F, 0xDF, 0x5C, 0x94, 0xAC, 
   0x88, 0x75, 0xA4, 0x2B, 0x40, 0x62, 0x08, 0x4A, 0x5C, 0x6F, 0x6C, 0xA6, 0x96, 0x61, 0x9B, 0x1D, 
   0x71, 0x95, 0x1B, 0x75, 0x98, 0x4E, 0x24, 0x64, 0x39, 0x1F, 0x64, 0x36, 0xB0, 0x88, 0x6B, 0x7E, 
   0xA6, 0x7D, 0x45, 0xC3, 0x4E, 0x56, 0x6C, 0x2F, 0x8E, 0x6A, 0x56, 0x64, 0xA1, 0x4A, 0x3B, 0x79, 
   0x2D, 0x3B, 0x30, 0x2E, 0x75, 0xA0, 0x52, 0x60, 0xE7, 0x97, 0x4A, 0xAE, 0x73, 0x8E, 0x67, 0x00, 
   0x44, 0x65, 0x09, 0x2A, 0x55, 0xBD, 0xC0, 0xAE, 0xA3, 0xAA, 0xE9, 0x25, 0x31, 0x87, 0x24, 0x36, 
   0x4D, 0x4C, 0x7F, 0x91, 0x54, 0x47, 0x87, 0x7C, 0x48, 0x6E, 0x4F, 0x7E, 0xC0, 0x23, 0x7A, 0xC6, 
   0x75, 0x60, 0x60, 0x8E, 0x51, 0x62, 0x4A, 0x8C, 0xBB, 0x75, 0xC4, 0xEF, 0x71, 0x81, 0xB9, 0x00, 
   0x00, 0x4E, 0x00, 0x00, 0x1A, 0x46, 0x6E, 0x7A, 0x97, 0xFF, 0xFF, 0xB2, 0x7C, 0xC8, 0x26, 0x00, 
   0x54, 0x72, 0xA9, 0xCD, 0xC7, 0xFF, 0xFF, 0x80, 0xB3, 0x7E, 0x37, 0x1E, 0x35, 0x1D, 0x04, 0xB6, 
   0x45, 0x56, 0xC1, 0x58, 0xC0, 0x4A, 0xBA, 0xFF, 0x73, 0x5E, 0x56, 0xAB, 0x00, 0x00, 0xD1, 0x96, 
   0x98, 0xF2, 0xB6, 0xCD, 0xAE, 0x00, 0x4F, 0x2D, 0x40, 0x58, 0x77, 0xD7, 0xE8, 0xFF, 0x55, 0x6F, 
   0xAB, 0x00, 0x00, 0x06, 0x00, 0x00, 0x22, 0xA4, 0xDD, 0xBB, 0xEC, 0xFF, 0xFF, 0x66, 0xA7, 0x99, 
   0x17, 0x23, 0x2A, 0x19, 0x08, 0xAA, 0x39, 0x6A, 0x74, 0x28, 0x70, 0x5E, 0x5D, 0x5E, 0xBA, 0x6A, 
   0x37, 0xA4, 0x86, 0x8C, 0x70, 0x73, 0x9C, 0xA7, 0x1A, 0x28, 0x7E, 0x13, 0x42, 0x45, 0x63, 0x75, 
   0xAC, 0x52, 0x58, 0xD9, 0x47, 0x31, 0x5A, 0x53, 0x38, 0x3C, 0x43, 0x7F, 0x88, 0x6A, 0xB4, 0xBC, 
   0x5E, 0x7E, 0xCC, 0x4C, 0x4C, 0x84, 0x29, 0x10, 0x2B, 0x61, 0x4E, 0x5E, 0x44, 0x71, 0xD1, 0x13, 
   0x34, 0x66, 0x75, 0x79, 0x6C, 0x97, 0x95, 0xBB, 0x35, 0x32, 0x65, 0x06, 0x21, 0x6B, 0x50, 0x5C, 
   0x9D, 0x89, 0xA7, 0x75, 0x59, 0x83, 0x79, 0x0D, 0x2A, 0x83, 0x00, 0x0B, 0x3A, 0x71, 0x1F, 0x8B, 
   0x91, 0x9A, 0xE7, 0x4D, 0xB2, 0x37, 0x40, 0x18, 0x38, 0x4A, 0x49, 0xFF, 0x3E, 0xAE, 0xE2, 0x49, 
   0x51, 0x17, 0x59, 0x0B, 0x20, 0x2B, 0x39, 0x89, 0x26, 0x74, 0xC5, 0x65, 0x81, 0x8D, 0x4A, 0x5A, 
   0x75, 0x4F, 0x4E, 0x84, 0x43, 0x69, 0x62, 0x2C, 0x62, 0x85, 0x43, 0x28, 0xA3, 0x61, 0x4B, 0x76, 
   0x45, 0x69, 0x5A, 0x35, 0x65, 0xAA, 0x73, 0x70, 0xBF, 0x50, 0x3B, 0x45, 0x16, 0x51, 0x27, 0x4F, 
   0x47, 0x75, 0x56, 0x76, 0xE4, 0x4B, 0x93, 0xAB, 0x4B, 0x42, 0x21, 0x3A, 0x00, 0x44, 0x4C, 0x74, 
   0xE6, 0x4D, 0xC7, 0xC5, 0x69, 0x8D, 0x68, 0x62, 0x28, 0x71, 0x0B, 0x37, 0x8D, 0x33, 0x64, 0x7B, 
   0x83, 0x64, 0x7B, 0x60, 0x68, 0xA3, 0x31, 0x4B, 0xA1, 0x1A, 0x23, 0x28, 0x49, 0x59, 0x2B, 0x57, 
   0x78, 0xC4, 0x5E, 0x80, 0xEF, 0x7B, 0x63, 0x81, 0x51, 0x51, 0x2F, 0x3E, 0x66, 0x94, 0x26, 0x64, 
   0xD6, 0x53, 0x3A, 0x45, 0x42, 0x18, 0x00, 0x3E, 0x3D, 0x9E, 0x66, 0xA1, 0xFF, 0x3F, 0x9B, 0x9C, 
   0x29, 0x28, 0x34, 0x68, 0x2E, 0x62, 0x79, 0xA0, 0xCA, 0x2D, 0x7D, 0xAD, 0x11, 0x00, 0x5B, 0x6D, 
   0x28, 0x70, 0x8F, 0xBE, 0xB9, 0x32, 0x96, 0x62, 0x08, 0x00, 0x51, 0x4D, 0x4E, 0x9B, 0x65, 0x92, 
   0x96, 0x55, 0x37, 0x62, 0x17, 0x1B, 0x69, 0x42, 0x48, 0x4B, 0x9F, 0xC9, 0xB0, 0x81, 0xAC, 0xFF, 
   0x01, 0x11, 0x98, 0x21, 0x21, 0x00, 0x34, 0x89, 0x64, 0x5E, 0x90, 0xFF, 0xA9, 0x82, 0xA7, 0x5C, 
   0x24, 0x45, 0x00, 0x07, 0x88, 0x3E, 0x92, 0xA4, 0x84, 0x9A, 0x76, 0x46, 0x44, 0x54, 0x19, 0x3E, 
   0x7E, 0x43, 0x78, 0xAE, 0x67, 0x3B, 0xA4, 0x78, 0x80, 0x87, 0x54, 0xA7, 0xA2, 0x1F, 0x39, 0x78, 
   0x15, 0x18, 0x2A, 0x69, 0x51, 0x8A, 0xC0, 0xFF, 0xFF, 0xBC, 0xBC, 0xE0, 0x00, 0x00, 0x0D, 0x00, 
   0x00, 0x00, 0x6C, 0x8C, 0xC4, 0xFF, 0xC9, 0xFF, 0x82, 0x84, 0x89, 0x00, 0x52, 0x23, 0x0F, 0x00, 
   0x6C, 0x68, 0x48, 0xCE, 0xBE, 0xF0, 0xC3, 0x6B, 0x9E, 0x87, 0x00, 0x00, 0x4C, 0x00, 0x2C, 0x7A, 
   0x9D, 0xEA, 0xE1, 0xAE, 0x6D, 0x97, 0x0D, 0x1B, 0x40, 0x1D, 0x41, 0x69, 0x66, 0x6F, 0xB0, 0x5A, 
   0x6F, 0xC8, 0x1B, 0x62, 0xB4, 0x27, 0x3E, 0x56, 0x62, 0x11, 0x34, 0x7F, 0x8B, 0xCA, 0x4B, 0x9D, 
   0xD7, 0x00, 0x36, 0x5A, 0x67, 0x52, 0x92, 0x8F, 0x8F, 0xCA, 0x42, 0x4F, 0x7F, 0x00, 0x1A, 0x50, 
   0x00, 0x32, 0x89, 0x7D, 0x9B, 0x8B, 0xA1, 0x9B, 0x99, 0x45, 0x17, 0xC8, 0x0B, 0x0C, 0x8F, 0x23, 
   0x97, 0x66, 0x6A, 0x9E, 0x9F, 0xAA, 0x4E, 0xBC, 0x4D, 0x36, 0x71, 0x06, 0x4D, 0x60, 0x37, 0x7B, 
   0xC0, 0x3E, 0x6F, 0x9D, 0x5B, 0x5D, 0x4D, 0x4B, 0x24, 0x71, 0x4B, 0x31, 0xD9, 0x4B, 0x8E, 0xB1, 
   0x3A, 0xAA, 0x54, 0x5C, 0x58, 0x6A, 0x4B, 0x01, 0xA4, 0x29, 0x30, 0xA5, 0x36, 0x9F, 0x7D, 0x9D, 
   0x9B, 0xAA, 0x58, 0x44, 0x99, 0x0C, 0x28, 0x55, 0x29, 0x94, 0x94, 0x64, 0x89, 0xB2, 0x81, 0x55, 
   0xA0, 0x74, 0x48, 0x77, 0x12, 0x42, 0x6B, 0x00, 0x39, 0x83, 0x67, 0x92, 0xB7, 0xD0, 0xC0, 0x95, 
   0x6D, 0x41, 0x84, 0x03, 0x28, 0x9F, 0x35, 0x5A, 0x8D, 0x5D, 0x5B, 0x75, 0x5E, 0x6D, 0x90, 0x59, 
   0x7D, 0x95, 0x31, 0x33, 0x46, 0x22, 0x3F, 0x76, 0x7F, 0x90, 0xCD, 0xAC, 0x9B, 0xB6, 0x2C, 0x4E, 
   0x6F, 0x01, 0x03, 0x67, 0x66, 0x3D, 0x61, 0x2F, 0x9B, 0x75, 0x22, 0x6A, 0xA6, 0xA2, 0x49, 0xEB, 
   0xA2, 0x8D, 0x88, 0x22, 0x75, 0x41, 0x19, 0x4B, 0xA6, 0x8F, 0x54, 0xC2, 0x28, 0x4D, 0x49, 0x11, 
   0x64, 0x7C, 0x78, 0x81, 0xA9, 0x6D, 0x5E, 0x75, 0x22, 0x30, 0x6A, 0x2E, 0x42, 0xAF, 0x59, 0x7D, 
   0x67, 0x67, 0x7F, 0x79, 0x94, 0x73, 0xDF, 0x47, 0x3F, 0x88, 0x07, 0x4F, 0x25, 0x50, 0x82, 0x97, 
   0x84, 0x69, 0xC6, 0x39, 0x1D, 0x82, 0x16, 0x40, 0x4F, 0x39, 0x65, 0x83, 0x52, 0x8A, 0xA7, 0x70, 
   0x85, 0xA7, 0x47, 0x61, 0x94, 0x00, 0x11, 0x32, 0x34, 0x46, 0x40, 0xC6, 0xB6, 0xE3, 0x61, 0x9A, 
   0xEB, 0x1C, 0x2D, 0x66, 0x9C, 0x64, 0x53, 0x30, 0x5E, 0x6B, 0x00, 0x33, 0x8B, 0x9D, 0x55, 0xC2, 
   0xA1, 0xD7, 0xAD, 0x57, 0xE8, 0x85, 0x9D, 0x3F, 0x96, 0x2B, 0x00, 0xC7, 0x00, 0x50, 0x7B, 0x2A, 
   0x85, 0x31, 0xCD, 0xA3, 0x96, 0x84, 0x3D, 0xFA, 0x00, 0x00, 0x8B, 0x00, 0x99, 0x4A, 0xFF, 0xFB, 
   0xC0, 0xCD, 0x9C, 0xE6, 0x52, 0x8D, 0xF6, 0x9E, 0xAF, 0xD8, 0x04, 0x2C, 0x20, 0x00, 0x00, 0x34, 
   0x84, 0x7D, 0xB9, 0xE2, 0xDB, 0xA6, 0x4E, 0x6A, 0x77, 0x30, 0x47, 0xE1, 0x78, 0x9A, 0xFF, 0x3A, 
   0x6B, 0x84, 0x6C, 0x43, 0x8B, 0xA3, 0x97, 0xBB, 0x24, 0x8A, 0x58, 0x3E, 0x76, 0x69, 0x7A, 0x4F, 
   0xC4, 0x00, 0x00, 0x90, 0x21, 0x3A, 0x84, 0xCD, 0xC7, 0xBC, 0x88, 0xB2, 0x99, 0x2F, 0x87, 0x9D, 
   0x52, 0x76, 0x9F, 0x01, 0x00, 0x37, 0x45, 0x63, 0x9D, 0x45, 0x63, 0xAE, 0x45, 0x42, 0x69, 0x46, 
   0x8C, 0x69, 0x5E, 0x92, 0xAE, 0x85, 0x36, 0xA3, 0x61, 0x67, 0x7A, 0x31, 0x7C, 0x90, 0x41, 0x3C, 
   0x79, 0x46, 0x25, 0xAC, 0x4D, 0x7B, 0x9F, 0x5E, 0x82, 0x59, 0x4D, 0x43, 0x7F, 0x30, 0x55, 0x7A, 
   0x42, 0x6D, 0x75, 0x80, 0x9F, 0xDB, 0x7E, 0x8A, 0xB1, 0x00, 0x00, 0x14, 0x06, 0x04, 0x53, 0x9D, 
   0xCF, 0xD7, 0x8D, 0x98, 0x8F, 0x25, 0x40, 0x66, 0x4B, 0x38, 0x8D, 0x4A, 0x5E, 0x76, 0x38, 0x4E, 
   0x7B, 0x49, 0x55, 0xA8, 0x59, 0x89, 0x80, 0x3C, 0x81, 0x68, 0x35, 0x2F, 0x99, 0x09, 0x29, 0x3E, 
   0x72, 0x42, 0x41, 0x74, 0x6D, 0xD9, 0x41, 0x97, 0xCF, 0x4B, 0x84, 0x6C, 0x55, 0x4E, 0x6D, 0x32, 
   0x29, 0x71, 0x42, 0x4A, 0x49, 0x48, 0x5B, 0x83, 0x42, 0x35, 0x90, 0x43, 0x64, 0x85, 0x77, 0x87, 
   0xA1, 0x5A, 0x5E, 0x51, 0x27, 0x41, 0x62, 0x43, 0x62, 0x86, 0x4F, 0x50, 0x9F, 0x4B, 0x3A, 0x7E, 
   0x5C, 0x4D, 0xB6, 0x45, 0x97, 0xB3, 0x56, 0x64, 0x3E, 0x44, 0x35, 0x4E, 0x44, 0x2F, 0x5C, 0x50, 
   0x6F, 0xA4, 0x4B, 0x7B, 0xCD, 0x45, 0x42, 0x7D, 0x40, 0x37, 0x4A, 0x57, 0x66, 0x89, 0x46, 0x52, 
   0xBE, 0x63, 0x91, 0xAB, 0x51, 0x74, 0x2C, 0x0D, 0x18, 0x38, 0x7F, 0x61, 0xCE, 0x73, 0x9F, 0xC3, 
   0x3E, 0x42, 0x4F, 0x1A, 0x23, 0x74, 0x31, 0x5C, 0x7E, 0x6B, 0x52, 0x61, 0x4F, 0x53, 0x69, 0x39, 
   0x54, 0x78, 0x3A, 0x60, 0xAE, 0x7F, 0x67, 0xC6, 0x62, 0x67, 0x92, 0x1C, 0x5B, 0x6D, 0x32, 0x4F, 
   0x6B, 0x65, 0x70, 0x8C, 0x76, 0x5D, 0x90, 0x1A, 0x35, 0x78, 0x09, 0x2B, 0x1E, 0x5B, 0x67, 0x50, 
   0x6F, 0x86, 0xF4, 0x5E, 0x81, 0xD9, 0x5C, 0x61, 0x74, 0x32, 0x1A, 0x37, 0x00, 0x21, 0x32, 0x41, 
   0x80, 0xA1, 0xD7, 0xCC, 0xFF, 0xA0, 0xA2, 0xB4, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x0D, 0x75, 0x3B, 
   0x9F, 0xB8, 0xB2, 0xBA, 0x4D, 0x8D, 0x88, 0x3F, 0x74, 0x77, 0x27, 0x11, 0x55, 0x29, 0x29, 0x79, 
   0x70, 0x7D, 0x8D, 0x72, 0x93, 0xAD, 0x60, 0xA4, 0xA8, 0x5E, 0x95, 0x8C, 0x3A, 0x0F, 0xB1, 0x33, 
   0x2F, 0x7B, 0x4E, 0x79, 0x3B, 0x2D, 0x43, 0x54, 0x3B, 0x73, 0xC9, 0x93, 0xC9, 0xE1, 0x71, 0x2D, 
   0x79, 0x36, 0x20, 0x44, 0x13, 0x76, 0x7D, 0x59, 0x50, 0xA1, 0x88, 0x5D, 0x81, 0x33, 0x97, 0x8E, 
   0x24, 0x2E, 0xAB, 0xAD, 0x84, 0x9B, 0x99, 0xEF, 0x94, 0x00, 0x1F, 0x8D, 0x00, 0x00, 0x6A, 0x67, 
   0x8D, 0x60, 0xA9, 0xDB, 0x80, 0x98, 0x79, 0xF5, 0x44, 0x4E, 0xFA, 0x00, 0x0E, 0x35, 0x24, 0x5F, 
   0x3E, 0xFF, 0xCD, 0xA6, 0xBE, 0xA3, 0xE0, 0x00, 0x33, 0x8E, 0x00, 0x02, 0x35, 0x3F, 0x3C, 0x68, 
   0xCD, 0xA6, 0xC4, 0x99, 0xAC, 0xA2, 0x07, 0x4A, 0x36, 0x00, 0x10, 0x82, 0x67, 0x77, 0xD4, 0xC3, 
   0xCB, 0xCD, 0x55, 0x46, 0x6E, 0x00, 0x0B, 0x27, 0x1F, 0x6B, 0x6C, 0x8F, 0x73, 0xB3, 0x6F, 0x4C, 
   0xBB, 0x4C, 0x48, 0x8D, 0x23, 0x87, 0x5F, 0x50, 0xA3, 0xA3, 0x99, 0x4A, 0xC4, 0x30, 0x0F, 0x6C, 
   0x00, 0x54, 0x44, 0x52, 0xA5, 0x8F, 0x6C, 0x61, 0xCA, 0x4C, 0x23, 0x7C, 0x52, 0x57, 0x61, 0x5D, 
   0x86, 0xB1, 0x35, 0x6A, 0xBC, 0x3A, 0x4C, 0x6B, 0x57, 0x3B, 0x54, 0x57, 0x4D, 0xB0, 0x40, 0x82, 
   0xB1, 0x6C, 0xA8, 0x8E, 0x21, 0x29, 0x76, 0x22, 0x02, 0x6B, 0x85, 0x82, 0x8F, 0x74, 0xB7, 0xC9, 
   0x2A, 0x5B, 0xB1, 0x40, 0x31, 0x54, 0x62, 0x57, 0x6A, 0x40, 0x6E, 0xAF, 0x45, 0x58, 0x9E, 0x2F, 
   0x37, 0x60, 0x63, 0x61, 0x99, 0x73, 0xAB, 0xA5, 0x2E, 0x4F, 0x83, 0x34, 0x48, 0x99, 0x57, 0x53, 
   0x87, 0x58, 0x49, 0x6B, 0x3C, 0x67, 0x83, 0x48, 0x74, 0xB2, 0x44, 0x7B, 0xA1, 0x4B, 0x53, 0x7E, 
   0x84, 0x80, 0x8F, 0x60, 0x68, 0x8F, 0x14, 0x39, 0x9F, 0x2E, 0x77, 0xAE, 0x50, 0x65, 0x55, 0x36, 
   0x3E, 0x2D, 0x3E, 0x50, 0x85, 0x8A, 0x9C, 0xEA, 0x83, 0x9B, 0xCD, 0x00, 0x27, 0x64, 0x2C, 0x10, 
   0x52, 0xB9, 0x9A, 0x9C, 0x24, 0x9B, 0xBF, 0x00, 0x23, 0x7B, 0x87, 0x57, 0x81, 0x68, 0x80, 0x7C, 
   0x3C, 0x60, 0x9F, 0x9B, 0xAA, 0xC0, 0x92, 0x7F, 0x96, 0x00, 0x32, 0x4F, 0x04, 0x46, 0x8B, 0x88, 
   0x46, 0x86, 0x5D, 0x4D, 0x4E, 0x46, 0x8D, 0x98, 0x50, 0x86, 0xAA, 0x2E, 0x1A, 0x66, 0x24, 0x2C, 
   0x82, 0x6A, 0xBD, 0x9A, 0x66, 0x7F, 0xA6, 0x5A, 0x35, 0x9A, 0x4D, 0x73, 0x72, 0x2F, 0xA6, 0x67, 
   0x62, 0x64, 0xD8, 0x78, 0x1D, 0x8C, 0x2C, 0x3A, 0x1F, 0x00, 0x5F, 0x5A, 0x4D, 0x73, 0xCA, 0xE4, 
   0xAC, 0xED, 0x66, 0x77, 0x8A, 0x00, 0x00, 0x48, 0x15, 0x11, 0x49, 0x7B, 0xAA, 0x92, 0xB8, 0xBE, 
   0xF7, 0xB1, 0x79, 0xBE, 0x00, 0x44, 0x4F, 0x00, 0x43, 0x70, 0x83, 0x3A, 0x84, 0x66, 0x7D, 0x77, 
   0x79, 0xB5, 0xE7, 0xAB, 0xCB, 0xE7, 0x4B, 0x6A, 0x81, 0x00, 0x00, 0x33, 0x00, 0x00, 0x12, 0x7C, 
   0xE2, 0xBC, 0xCE, 0xEF, 0xFF, 0x2E, 0x0A, 0x90, 0x00, 0x00, 0x30, 0x2F, 0x82, 0x9A, 0x9F, 0xFF, 
   0xEE, 0xFF, 0xFC, 0xFA, 0xA4, 0x39, 0x97, 0x00, 0x0C, 0xA3, 0x0F, 0x6B, 0xC6, 0x66, 0xAB, 0x2F, 
   0x74, 0x88, 0x13, 0x69, 0x2C, 0xC9, 0x4C, 0x28, 0xFF, 0x69, 0xD6, 0xD0, 0x8A, 0xD6, 0x9A, 0x44, 
   0x2E, 0x92, 0x16, 0x30, 0x85, 0x8D, 0x90, 0xB6, 0xB8, 0x99, 0xAE, 0x00, 0x1A, 0x0E, 0x00, 0x00, 
   0x71, 0xFF, 0xED, 0xFF, 0xE5, 0xFF, 0xFF, 0x00, 0x0F, 0x56, 0x15, 0x04, 0x23, 0x51, 0x7B, 0xAA, 
   0x41, 0x70, 0xD7, 0x46, 0x59, 0x2C, 0x63, 0x4B, 0xA3, 0x79, 0x35, 0xB9, 0x28, 0x91, 0x5D, 0x44, 
   0x86, 0x6D, 0x4A, 0x30, 0x96, 0x3B, 0x58, 0x86, 0x8B, 0x9C, 0x9E, 0x7E, 0x6D, 0xCB, 0x15, 0x2C, 
   0x74, 0x2F, 0x54, 0x45, 0x63, 0x82, 0xAB, 0x58, 0x81, 0xD7, 0x41, 0x40, 0x57, 0x41, 0x07, 0x43, 
   0x5D, 0x7B, 0x88, 0x63, 0xC1, 0x91, 0x51, 0x65, 0xCA, 0x35, 0x46, 0x9A, 0x3B, 0x28, 0x26, 0x7B, 
   0x68, 0x64, 0x5E, 0x8B, 0xD2, 0x2A, 0x4C, 0x78, 0x40, 0x72, 0x77, 0x78, 0x64, 0x98, 0x54, 0x3A, 
   0x6F, 0x00, 0x4C, 0x7A, 0x42, 0x48, 0x9C, 0x77, 0x77, 0x8B, 0x65, 0x88, 0x89, 0x1F, 0x5D, 0x44, 
   0x04, 0x00, 0x1A, 0x72, 0x38, 0xEB, 0x7A, 0xDA, 0xFF, 0x46, 0x8A, 0x3C, 0x3F, 0x04, 0x00, 0x49, 
   0x41, 0xA5, 0x32, 0x68, 0xE6, 0x4E, 0x57, 0x57, 0x4E, 0x4B, 0x55, 0x48, 0x40, 0x8D, 0x31, 0x6E, 
   0x6C, 0x3D, 0x63, 0x84, 0x55, 0x51, 0x91, 0x5B, 0x35, 0x65, 0x39, 0x63, 0x7E, 0x4B, 0x74, 0xC9, 
   0x67, 0x68, 0xC0, 0x66, 0x35, 0x39, 0x1C, 0x51, 0x2B, 0x33, 0x58, 0x5B, 0x6D, 0x69, 0xCA, 0x57, 
   0x63, 0xBA, 0x3A, 0x3A, 0x2B, 0x5C, 0x1F, 0x55, 0x51, 0x66, 0xE5, 0x4C, 0xA1, 0xA7, 0x5C, 0x7E, 
   0x4E, 0x4B, 0x16, 0x3C, 0x1E, 0x1C, 0x8D, 0x58, 0xAD, 0x9B, 0x92, 0x91, 0x80, 0x73, 0x3F, 0xBF, 
   0x0A, 0x64, 0xD3, 0x0F, 0x1F, 0x25, 0x4E, 0x3C, 0x34, 0x61, 0x93, 0xAD, 0x3F, 0x5A, 0xA8, 0x4F, 
   0x58, 0x4D, 0x43, 0x2A, 0x3E, 0x3E, 0x64, 0xAD, 0x4A, 0x71, 0xFE, 0x56, 0x4A, 0x63, 0x61, 0x61, 
   0x1D, 0x43, 0x77, 0xBC, 0x4D, 0x75, 0xFF, 0x3C, 0x4B, 0x22, 0x1B, 0x00, 0x00, 0x4B, 0x10, 0x83, 
   0x86, 0xCB, 0xFF, 0x6F, 0xDD, 0xFC, 0x29, 0x0D, 0x58, 0x22, 0x00, 0x0A, 0x6D, 0x78, 0x88, 0x5D, 
   0x9C, 0xCA, 0x4D, 0x4C, 0xA2, 0x89, 0x55, 0x9E, 0x4C, 0x7F, 0x71, 0x00, 0x00, 0x13, 0x00, 0x00, 
   0x2C, 0x7E, 0xA8, 0xC5, 0xDA, 0xFF, 0xD9, 0x3D, 0x56, 0xB5, 0x00, 0x00, 0x3A, 0x20, 0x00, 0x00, 
   0x94, 0x9A, 0x76, 0xAF, 0xFF, 0xFF, 0x8B, 0x88, 0xC3, 0x30, 0x12, 0x53, 0x00, 0x42, 0x7C, 0x32, 
   0x64, 0x74, 0x66, 0x59, 0x59, 0x40, 0x49, 0x72, 0x30, 0x56, 0xAE, 0x6B, 0x8A, 0xD7, 0xAA, 0x94, 
   0xBE, 0x3B, 0x3D, 0x48, 0x00, 0x25, 0x3B, 0x28, 0x64, 0x71, 0x32, 0x3A, 0x92, 0x7B, 0x5C, 0xB9, 
   0xD6, 0xFF, 0xE7, 0x5A, 0xAF, 0xB5, 0x00, 0x00, 0x06, 0x00, 0x00, 0x19, 0x80, 0xCD, 0xE0, 0xFF, 
   0xC0, 0xFF, 0x7B, 0x7A, 0x74, 0x00, 0x4E, 0x00, 0x00, 0x09, 0x9C, 0x8A, 0x6C, 0xFF, 0xC0, 0xDF, 
   0x7A, 0x69, 0x92, 0x4A, 0x2B, 0x00, 0x93, 0x06, 0x2A, 0xB6, 0x39, 0x97, 0xBB, 0x5D, 0x58, 0x7F, 
   0x64, 0x0F, 0x2E, 0x42, 0x71, 0x63, 0x69, 0x9C, 0xEF, 0x63, 0x7A, 0xA1, 0x1E, 0x6C, 0x9A, 0x45, 
   0x41, 0x86, 0x78, 0x4B, 0x4C, 0x5F, 0x78, 0x90, 0x00, 0x5B, 0xC3, 0x0F, 0x2D, 0x51, 0x90, 0x2F, 
   0x79, 0x8C, 0x9D, 0xBF, 0x46, 0x87, 0x98, 0x11, 0x48, 0x53, 0x33, 0x52, 0x90, 0x87, 0x78, 0xA1, 
   0x5D, 0x7C, 0x78, 0x00, 0x09, 0x82, 0x02, 0x16, 0x72, 0x7E, 0xA2, 0x7A, 0xAA, 0xAF, 0xC1, 0x70, 
   0x3C, 0xB1, 0x28, 0x2F, 0x7C, 0x00, 0x62, 0x59, 0x3F, 0x58, 0xA9, 0x8B, 0x86, 0xAA, 0x86, 0x7A, 
   0x78, 0x23, 0x30, 0x8F, 0x21, 0x3C, 0xB6, 0x55, 0x82, 0x8E, 0x57, 0x7D, 0x55, 0x52, 0x66, 0x8F, 
   0x7A, 0x55, 0xC9, 0x2A, 0x5A, 0xB1, 0x35, 0x8D, 0x5F, 0x79, 0x69, 0x63, 0x4B, 0x0D, 0xAE, 0x1D, 
   0x2A, 0x8D, 0x45, 0x99, 0x6C, 0x6E, 0x9F, 0xC7, 0x6D, 0x48, 0xA9, 0x21, 0x1E, 0x58, 0x10, 0x3C, 
   0x75, 0x24, 0x6D, 0x8E, 0xA0, 0x92, 0xB2, 0xA1, 0x97, 0xA1, 0x27, 0x41, 0x90, 0x0A, 0x2A, 0x89, 
   0x55, 0x92, 0x8F, 0xA6, 0xA3, 0x84, 0x7D, 0x68, 0xB6, 0x1E, 0x49, 0x9D, 0x00, 0x2B, 0x56, 0x36, 
   0x38, 0x51, 0xA0, 0x95, 0xC5, 0x95, 0xB2, 0xDD, 0x16, 0x38, 0x6A, 0x15, 0x15, 0x57, 0x7C, 0x6D, 
   0x97, 0x66, 0x9D, 0x99, 0x3D, 0x86, 0xA5, 0x59, 0x40, 0xBA, 0x3C, 0x39, 0x52, 0x1B, 0x5C, 0x41, 
   0x61, 0x8B, 0xC0, 0x95, 0x70, 0xDD, 0x5F, 0x7A, 0x6E, 0x29, 0x77, 0x65, 0x38, 0x30, 0x74, 0x39, 
   0x2F, 0x80, 0x6E, 0x63, 0x93, 0x52, 0x70, 0x8E, 0x3B, 0x60, 0x8E, 0x68, 0x76, 0x7D, 0x51, 0x4D, 
   0x88, 0x35, 0x2C, 0x9E, 0x30, 0x67, 0x44, 0x6B, 0x8B, 0x7F, 0x88, 0x7A, 0xEC, 0x58, 0x56, 0xB8, 
   0x00, 0x49, 0x2D, 0x4F, 0x6F, 0x86, 0x56, 0x36, 0x92, 0x40, 0x48, 0x60, 0x46, 0x98, 0xB7, 0x43, 
   0x49, 0x9B, 0x72, 0x43, 0x79, 0x99, 0x77, 0x8F, 0x00, 0x66, 0x89, 0x01, 0x1F, 0x56, 0xBA, 0x77, 
   0x70, 0x88, 0xC4, 0xE0, 0x00, 0x5E, 0xCA, 0x3F, 0x35, 0x5C, 0x8B, 0x75, 0x62, 0x5A, 0x93, 0x92, 
   0x81, 0x71, 0xAC, 0x85, 0x59, 0xFF, 0x21, 0x69, 0x7F, 0x00, 0x74, 0x00, 0x99, 0x69, 0x7A, 0x83, 
   0x4D, 0xE6, 0x00, 0x2D, 0xB6, 0x19, 0x53, 0x58, 0xBC, 0xC8, 0xB6, 0x85, 0x64, 0xE6, 0x03, 0x60, 
   0xBD, 0x70, 0xED, 0x93, 0xB5, 0x6E, 0x7F, 0x2C, 0x00, 0x73, 0x3D, 0x74, 0xAC, 0xB3, 0xFF, 0xC8, 
   0x68, 0x54, 0x56, 0x00, 0x00, 0x68, 0x72, 0x7C, 0xF2, 0xB1, 0xC4, 0xCA, 0x45, 0x86, 0x5C, 0x6B, 
   0xA1, 0xA6, 0x65, 0x81, 0xBD, 0x3C, 0x4F, 0x7E, 0x3C, 0x1A, 0x89, 0x28, 0x0C, 0xAB, 0x66, 0xAD, 
   0x69, 0xF7, 0xFF, 0xDC, 0xEB, 0xC7, 0xFC, 0x0E, 0x40, 0x79, 0x00, 0x00, 0x61, 0x20, 0x1B, 0x57, 
   0x6E, 0x63, 0x7A, 0x76, 0xC6, 0xD6, 0x5E, 0x63, 0x78, 0x69, 0x63, 0x68, 0x61, 0x79, 0xB8, 0x32, 
   0x35, 0x9B, 0x38, 0x63, 0x46, 0x55, 0x96, 0x80, 0x5D, 0x5D, 0xC6, 0x74, 0x4C, 0x99, 0x6C, 0x73, 
   0x97, 0x20, 0x84, 0x78, 0x3A, 0x4E, 0x77, 0x40, 0x3B, 0x9E, 0x4C, 0x5C, 0x95, 0x6E, 0x55, 0x54, 
   0x56, 0x50, 0x58, 0x11, 0x35, 0x82, 0x08, 0x6C, 0x7A, 0xAF, 0xBD, 0xDB, 0x93, 0x92, 0xAB, 0x00, 
   0x00, 0x09, 0x23, 0x11, 0x4D, 0x7E, 0xC8, 0xDD, 0x57, 0x83, 0x83, 0x44, 0x36, 0x70, 0x3D, 0x2D, 
   0x85, 0x31, 0x33, 0x5D, 0x32, 0x4C, 0x79, 0x61, 0x66, 0xBD, 0x72, 0xA0, 0x30, 0x4E, 0x3E, 0x6A, 
   0x1F, 0x3C, 0xED, 0x1B, 0x63, 0x64, 0x78, 0x30, 0x52, 0x8A, 0x5F, 0xA6, 0x3A, 0x8E, 0x62, 0x3F, 
   0x61, 0x52, 0x4F, 0x5A, 0xB3, 0x4A, 0x52, 0xC4, 0x65, 0x5C, 0x60, 0x3C, 0x4F, 0x25, 0x19, 0x1C, 
   0x5F, 0x31, 0x5B, 0x96, 0x6C, 0x73, 0xA4, 0x62, 0x52, 0x72, 0x45, 0x5E, 0xA6, 0x5B, 0x7A, 0xC6, 
   0x3E, 0x45, 0x6D, 0x2C, 0x22, 0x38, 0x43, 0x3A, 0x55, 0x4A, 0x7B, 0xA7, 0x45, 0x92, 0xC5, 0x57, 
   0x24, 0x4C, 0x57, 0x18, 0x30, 0x35, 0x5E, 0x9E, 0x51, 0x89, 0xC9, 0x5C, 0x78, 0xC8, 0x3F, 0x54, 
   0x2B, 0x17, 0x00, 0x25, 0x51, 0x3D, 0xAA, 0x7A, 0x9B, 0xD5, 0x51, 0x9C, 0x74, 0x17, 0x3F, 0x62, 
   0x5B, 0x22, 0x94, 0x62, 0x77, 0x8E, 0x45, 0x5C, 0x65, 0x50, 0x67, 0x7B, 0x5B, 0x8C, 0xA3, 0x5A, 
   0x35, 0x7A, 0x3C, 0x2D, 0x4C, 0x13, 0x39, 0x5F, 0x3D, 0x47, 0x9B, 0x89, 0x89, 0xB4, 0x6D, 0x7F, 
   0xB9, 0x42, 0x50, 0x9F, 0x03, 0x5E, 0x3C, 0x4E, 0x41, 0x52, 0x78, 0x2B, 0x92, 0x45, 0x6B, 0xA6, 
   0x4B, 0x6D, 0x74, 0x4B, 0x47, 0x7B, 0x2F, 0x5F, 0x97, 0x4D, 0x82, 0x9D, 0x69, 0x86, 0x91, 0x6D, 
   0x61, 0x89, 0x10, 0x3C, 0x60, 0x0A, 0x36, 0x76, 0x93, 0x3D, 0xB3, 0x7C, 0xA0, 0x8A, 0x00, 0x57, 
   0x2E, 0x36, 0x3B, 0x51, 0x75, 0x95, 0xD5, 0x41, 0x60, 0xAE, 0x19, 0x21, 0x30, 0x05, 0x39, 0x48, 
   0x65, 0x64, 0xA2, 0xB2, 0xA6, 0x98, 0x8F, 0x73, 0xFF, 0x20, 0x35, 0xB9, 0x3F, 0x73, 0x16, 0x2D, 
   0x79, 0x43, 0x40, 0x50, 0xD3, 0x6F, 0x71, 0xA7, 0x64, 0x65, 0x5D, 0x30, 0x38, 0x7F, 0x30, 0x83, 
   0xBD, 0x85, 0x99, 0x99, 0x3F, 0x26, 0x59, 0x00, 0x26, 0x32, 0x32, 0x5C, 0x92, 0xE1, 0x99, 0xFF, 
   0xB8, 0xD8, 0xD5, 0x00, 0x40, 0x6A, 0x00, 0x00, 0x23, 0x72, 0x52, 0x5F, 0xEF, 0xD5, 0xCB, 0x8F, 
   0xCB, 0xFF, 0x3A, 0x45, 0xA8, 0x00, 0x00, 0x2C, 0x00, 0x49, 0x38, 0xD6, 0xEB, 0xE1, 0xE0, 0xB0, 
   0xFF, 0x00, 0x11, 0x6D, 0x00, 0x07, 0x09, 0x6F, 0x63, 0xA9, 0xE9, 0xA4, 0xFF, 0x70, 0x7B, 0x86, 
   0x00, 0x1E, 0x24, 0x0B, 0x00, 0x64, 0x92, 0xAC, 0xE5, 0xAA, 0xF8, 0xF0, 0x41, 0x44, 0x59, 0x00, 
   0x00, 0x25, 0x44, 0x68, 0xAF, 0xAB, 0xB2, 0xE9, 0x4E, 0x3A, 0x75, 0x00, 0x17, 0x60, 0x27, 0x73, 
   0x3E, 0x9C, 0x85, 0x96, 0x86, 0x47, 0xD6, 0x23, 0x3C, 0xA3, 0x28, 0x81, 0x3C, 0x71, 0xB2, 0x97, 
   0x81, 0x38, 0xF6, 0x12, 0x00, 0x4F, 0x00, 0x4F, 0x15, 0x4E, 0xA2, 0xA0, 0x9C, 0x81, 0xDC, 0x69, 
   0x57, 0x82, 0x2E, 0x34, 0x65, 0x27, 0x4C, 0xA4, 0x33, 0x91, 0xA4, 0x57, 0x74, 0x65, 0x6F, 0x23, 
   0x8E, 0x58, 0x19, 0xA0, 0x4B, 0x8E, 0x90, 0x2D, 0xC2, 0xA0, 0x28, 0x5A, 0x8E, 0x4B, 0x09, 0x55, 
   0x58, 0x6B, 0x8F, 0x69, 0x9A, 0xD4, 0x46, 0x6C, 0xAA, 0x40, 0x26, 0x47, 0x4B, 0x5E, 0x52, 0x56, 
   0x7A, 0xBF, 0x39, 0x5E, 0xC0, 0x39, 0x41, 0x76, 0x61, 0x69, 0x85, 0x60, 0x53, 0x6E, 0x00, 0x38, 
   0x5F, 0x41, 0x85, 0xBC, 0x89, 0x97, 0xB2, 0x7F, 0x47, 0x7E, 0x55, 0x51, 0x8F, 0x31, 0x5C, 0x94, 
   0x15, 0x52, 0x84, 0x5B, 0x80, 0xB1, 0xA5, 0xA1, 0x8E, 0x38, 0x1D, 0x6B, 0x0E, 0x33, 0x8D, 0x64, 
   0x9F, 0xD6, 0x8C, 0x88, 0x85, 0x26, 0x37, 0x45, 0x21, 0x15, 0x6C, 0x93, 0x6D, 0x8B, 0x49, 0xA8, 
   0x9E, 0x00, 0x5E, 0x9F, 0x8E, 0x47, 0x99, 0x94, 0x96, 0x81, 0x04, 0x62, 0x80, 0x47, 0x38, 0xA7, 
   0x8B, 0x5A, 0x8B, 0x2B, 0x5B, 0x6E, 0x20, 0x6D, 0xBD, 0x9D, 0x78, 0x94, 0x58, 0x5A, 0x4E, 0x0C, 
   0x48, 0x6A, 0x23, 0x5E, 0xB6, 0x6F, 0x42, 0x8F, 0x59, 0x5A, 0x6D, 0x4D, 0x93, 0xAB, 0x62, 0x5F, 
   0x98, 0x1D, 0x14, 0x3C, 0x23, 0x4F, 0x81, 0x7B, 0xC3, 0xA1, 0x76, 0x6E, 0xAE, 0x5E, 0x1D, 0xB8, 
   0x45, 0x61, 0x66, 0x00, 0x7E, 0x32, 0x58, 0x8F, 0xCD, 0xC4, 0x6F, 0xDD, 0x35, 0x23, 0x31, 0x00, 
   0x2F, 0x2C, 0x48, 0x60, 0xC3, 0xA2, 0xAC, 0xD1, 0x85, 0x6E, 0xA2, 0x38, 0x3F, 0x60, 0x00, 0x18, 
   0x33, 0x1F, 0x6C, 0x87, 0xE1, 0xC0, 0xFD, 0xAB, 0x8F, 0xAF, 0x27, 0x71, 0x70, 0x73, 0x80, 0x9C, 
   0x4E, 0x3E, 0xA6, 0x00, 0x21, 0x45, 0x4A, 0x40, 0x6F, 0xAD, 0xC1, 0xCD, 0x8B, 0xC7, 0xBD, 0x23, 
   0x00, 0x74, 0x00, 0x00, 0x49, 0x83, 0xF2, 0xB4, 0xDD, 0xFF, 0xFF, 0xA7, 0x9A, 0xD9, 0x2E, 0x00, 
   0x7E, 0x00, 0x00, 0x48, 0x0A, 0x9E, 0x8C, 0xFF, 0xFE, 0x9A, 0xD0, 0xAE, 0x87, 0x1D, 0x28, 0xC8, 
   0x35, 0x44, 0xFF, 0x7D, 0xBB, 0x96, 0x48, 0x71, 0x36, 0x4D, 0x31, 0x67, 0x47, 0x5A, 0xA6, 0x5F, 
   0xC2, 0x92, 0x92, 0xD7, 0x9A, 0x25, 0x17, 0xA1, 0x00, 0x00, 0x93, 0xDA, 0xA1, 0xDE, 0xFF, 0xFF, 
   0xFF, 0x27, 0x92, 0x57, 0x19, 0x30, 0x4E, 0x8F, 0xAC, 0xFF, 0x1E, 0x40, 0xB8, 0x00, 0x00, 0x07, 
   0x35, 0x50, 0x3F, 0xCC, 0xE7, 0xFF, 0x4B, 0x86, 0x77, 0x4B, 0xA7, 0x67, 0x61, 0x07, 0xA1, 0x44, 
   0x50, 0x9C, 0x38, 0x95, 0x80, 0x3D, 0x51, 0x8B, 0x3E, 0x35, 0x80, 0x46, 0x6F, 0x86, 0x96, 0x8C, 
   0x9D, 0x72, 0x96, 0xB2, 0x0E, 0x49, 0x7D, 0x29, 0x19, 0x53, 0x67, 0x73, 0xA1, 0x5B, 0x8D, 0xB0, 
   0x27, 0x20, 0x3C, 0x0B, 0x00, 0x47, 0x6F, 0x9D, 0x8E, 0x7D, 0xBE, 0x9D, 0x60, 0x85, 0xCB, 0x4D, 
   0x59, 0xAB, 0x23, 0x1D, 0x2B, 0x39, 0x5A, 0x58, 0x83, 0x75, 0xD1, 0x38, 0x52, 0x82, 0x21, 0x4B, 
   0x6F, 0x71, 0x22, 0x8A, 0x4A, 0x4B, 0x67, 0x2D, 0x6F, 0x40, 0x5B, 0x45, 0x9E, 0x5B, 0x8B, 0xD4, 
   0x4E, 0xC7, 0xCB, 0x2A, 0x3A, 0x3D, 0x03, 0x00, 0x00, 0x5A, 0x29, 0x8F, 0x73, 0xA5, 0xFF, 0x46, 
   0xB3, 0x76, 0x40, 0x46, 0x1E, 0x66, 0x48, 0xB7, 0x49, 0x6E, 0xA0, 0x31, 0x4A, 0x44, 0x3C, 0x32, 
   0x66, 0x48, 0x43, 0x7F, 0x43, 0x45, 0x77, 0x5B, 0x86, 0xCD, 0x67, 0x80, 0xBF, 0x4F, 0x2A, 0x22, 
   0x1B, 0x4B, 0x2C, 0x32, 0x57, 0x84, 0x6C, 0x58, 0xCB, 0x50, 0x69, 0xA3, 0x4B, 0x5E, 0x4C, 0x45, 
   0x4E, 0x4C, 0x57, 0x5A, 0xC5, 0x51, 0x6B, 0x92, 0x57, 0x7C, 0x4D, 0x56, 0x48, 0x70, 0x17, 0x2D, 
   0xA5, 0x57, 0x99, 0x94, 0x85, 0x6B, 0x56, 0x4B, 0x21, 0x84, 0x1C, 0x66, 0xD3, 0x28, 0x6D, 0x4F, 
   0x5D, 0x58, 0x34, 0x92, 0x7B, 0xCA, 0x52, 0x9C, 0xE6, 0x29, 0x50, 0x4A, 0x55, 0x2B, 0x48, 0x59, 
   0x67, 0xB3, 0x2A, 0x61, 0xB2, 0x24, 0x28, 0x3A, 0x25, 0x3A, 0x14, 0x6B, 0x76, 0xC9, 0x65, 0xA0, 
   0xFF, 0x20, 0x66, 0x28, 0x1B, 0x04, 0x00, 0x56, 0x44, 0xAC, 0x73, 0xB1, 0xFF, 0x61, 0x94, 0x7E, 
   0x10, 0x00, 0x20, 0x06, 0x00, 0x2D, 0x75, 0xBC, 0xA9, 0x99, 0xF1, 0xFF, 0x69, 0x4E, 0xA3, 0x21, 
   0x0F, 0x38, 0x25, 0x34, 0x52, 0x2B, 0x2A, 0x75, 0x29, 0x3A, 0x7D, 0x92, 0x9A, 0xC9, 0xDF, 0xFF, 
   0xD2, 0x00, 0x3E, 0x39, 0x00, 0x00, 0x14, 0x68, 0x48, 0x50, 0xAB, 0xE1, 0xC7, 0x5D, 0xAF, 0xDA, 
   0x29, 0x33, 0x68, 0x2E, 0x00, 0x41, 0x3B, 0x41, 0x98, 0x75, 0xDA, 0xC8, 0x53, 0x82, 0x85, 0x36, 
   0x5A, 0x75, 0x30, 0x7A, 0x9D, 0x5E, 0x5B, 0xCA, 0x74, 0x42, 0x7E, 0x40, 0x47, 0x48, 0x17, 0x42, 
   0x76, 0x5C, 0x6C, 0xB7, 0x69, 0x94, 0x90, 0x38, 0x13, 0x69, 0x71, 0x73, 0x91, 0x75, 0xC7, 0xAE, 
   0x0D, 0x00, 0x80, 0x00, 0x00, 0x42, 0x7F, 0xE8, 0x9A, 0xBB, 0xA7, 0xE5, 0x6F, 0x2F, 0x7F, 0x11, 
   0x60, 0x63, 0x01, 0x5B, 0xB3, 0x98, 0x4B, 0xCE, 0xCC, 0xBD, 0x5A, 0x5D, 0x99, 0x2C, 0x00, 0x23, 
   0xC8, 0x1D, 0x26, 0xE5, 0x41, 0x75, 0x77, 0x6B, 0x6F, 0x4C, 0x94, 0x48, 0x69, 0x5E, 0x7B, 0x9E, 
   0x22, 0x76, 0xC8, 0x11, 0x4D, 0x94, 0x57, 0x42, 0x82, 0x70, 0x77, 0x86, 0x75, 0x78, 0x64, 0x40, 
   0x82, 0x82, 0x0B, 0x47, 0xBC, 0x4B, 0x3B, 0xBC, 0x9B, 0x63, 0x7B, 0x55, 0x7A, 0x7F, 0x00, 0x68, 
   0x8E, 0x20, 0x2E, 0x50, 0x79, 0x3A, 0x84, 0x8B, 0x80, 0xBA, 0x5C, 0xA2, 0xA9, 0x0A, 0x34, 0x8C, 
   0x32, 0x2E, 0x7F, 0x87, 0x7E, 0x8E, 0x4D, 0x78, 0x8D, 0x07, 0x2E, 0x81, 0x0E, 0x50, 0x5B, 0x71, 
   0x6D, 0x85, 0x7F, 0x5E, 0xBB, 0x63, 0x6F, 0xB0, 0x44, 0x79, 0x6B, 0x21, 0x33, 0x7B, 0x2E, 0x23, 
   0x93, 0x91, 0x86, 0xA6, 0x64, 0x9F, 0x8A, 0x2F, 0x4F, 0xA1, 0x44, 0x48, 0xA0, 0x28, 0x58, 0x8E, 
   0x3A, 0x59, 0x5A, 0x8B, 0x7C, 0x83, 0x52, 0x61, 0xD3, 0x18, 0x5B, 0x99, 0x4B, 0x93, 0x5E, 0x67, 
   0x7A, 0x74, 0x5B, 0x23, 0xB2, 0x3E, 0x33, 0x7F, 0x27, 0x4C, 0x52, 0x39, 0x88, 0xA3, 0x7F, 0x85, 
   0xAA, 0x5E, 0x5D, 0x7D, 0x1A, 0x51, 0x8E, 0x3D, 0x6E, 0x99, 0x72, 0x7A, 0x8E, 0x7D, 0x63, 0x78, 
   0x3C, 0x67, 0xB6, 0x14, 0x3F, 0x8E, 0x2D, 0x57, 0x60, 0x96, 0x86, 0x83, 0xA6, 0x91, 0xCD, 0x42, 
   0x71, 0xC0, 0x00, 0x2A, 0x6D, 0x2F, 0x00, 0x32, 0xA3, 0x83, 0x6C, 0x55, 0xAD, 0xAE, 0x33, 0x5E, 
   0xA5, 0x72, 0x3B, 0xB0, 0x45, 0x58, 0x76, 0x45, 0x80, 0x64, 0x8D, 0x90, 0xAE, 0x63, 0x4E, 0xB8, 
   0x00, 0x25, 0x5B, 0x1C, 0x69, 0x54, 0x68, 0x54, 0xA5, 0x54, 0x4B, 0xA1, 0x71, 0xA7, 0x95, 0x59, 
   0x89, 0x72, 0x19, 0x21, 0x67, 0x47, 0x54, 0xA1, 0x7B, 0x82, 0xBD, 0x52, 0x55, 0x89, 0x1E, 0x60, 
   0x7C, 0x56, 0x70, 0x65, 0x5B, 0x54, 0x88, 0x34, 0x43, 0xB0, 0x3A, 0x61, 0x6C, 0x4D, 0x79, 0x5C, 
   0x65, 0x52, 0xBD, 0x5F, 0x69, 0x9B, 0x5E, 0xBD, 0x83, 0x41, 0x5E, 0x87, 0x45, 0x00, 0x6F, 0x45, 
   0x3F, 0x59, 0x03, 0x92, 0x7E, 0x62, 0x68, 0xD0, 0xF7, 0x85, 0xB3, 0x66, 0x6D, 0x78, 0x00, 0x28, 
   0x66, 0x2E, 0x09, 0x3A, 0xB3, 0x97, 0x5B, 0xA1, 0xDF, 0xFF, 0xAA, 0x88, 0xE4, 0x33, 0x3A, 0x79, 
   0x00, 0x36, 0x30, 0x0E, 0x2B, 0x26, 0x7E, 0x6D, 0x98, 0xC5, 0xB0, 0xFF, 0x16, 0x46, 0xB0, 0x11, 
   0x5A, 0x20, 0xAD, 0xA2, 0x77, 0x76, 0x99, 0xDB, 0x63, 0xAD, 0xF3, 0x97, 0xA0, 0xA0, 0x26, 0x00, 
   0x52, 0x00, 0x00, 0x6C, 0x00, 0x56, 0x52, 0x97, 0xFF, 0x9A, 0xFF, 0x9A, 0xBB, 0x52, 0x00, 0xBF, 
   0x3E, 0x8F, 0xFF, 0x9A, 0xF1, 0xE6, 0x46, 0x6B, 0x45, 0x00, 0x23, 0x18, 0x5B, 0x4A, 0x8B, 0x8A, 
   0x78, 0xAC, 0x2B, 0x63, 0x7C, 0x18, 0x33, 0xA2, 0x9B, 0xAF, 0xD9, 0xDC, 0xE9, 0xD3, 0x94, 0x69, 
   0xB9, 0x37, 0x5D, 0x8D, 0x00, 0x4D, 0x56, 0x46, 0x40, 0x99, 0xA5, 0x99, 0xD6, 0x3D, 0x69, 0x71, 
   0x00, 0x29, 0x62, 0xA8, 0x7D, 0x83, 0x55, 0x50, 0x95, 0x55, 0x45, 0xA0, 0x45, 0x7E, 0x51, 0x5C, 
   0x79, 0x9C, 0x72, 0x45, 0xE1, 0x32, 0x4B, 0x85, 0x3D, 0x68, 0x4B, 0x5B, 0x80, 0x9B, 0x46, 0x80, 
   0xBE, 0x7F, 0x63, 0x90, 0x72, 0x56, 0x89, 0x30, 0x76, 0x87, 0x4F, 0x6D, 0x7A, 0x32, 0x26, 0x89, 
   0x11, 0x31, 0xA4, 0x73, 0x76, 0x53, 0x80, 0x3F, 0x6A, 0x15, 0x42, 0x6D, 0x48, 0x85, 0x92, 0x81, 
   0xCF, 0xDB, 0x7A, 0xAE, 0xA5, 0x16, 0x00, 0x08, 0x20, 0x17, 0x57, 0x49, 0xA1, 0xC5, 0x56, 0x65, 
   0x92, 0x51, 0x69, 0x6E, 0x6D, 0x4B, 0x56, 0x2D, 0x01, 0x36, 0x22, 0x5A, 0xCD, 0x67, 0xC8, 0xEF, 
   0x6D, 0x72, 0x30, 0x42, 0x35, 0x37, 0x0D, 0x2C, 0x80, 0x03, 0x33, 0x4A, 0x78, 0x42, 0xA3, 0x86, 
   0xA1, 0xF3, 0x5D, 0xA2, 0x68, 0x28, 0x50, 0x00, 0x2C, 0x3B, 0x95, 0x49, 0x50, 0xDB, 0x60, 0x61, 
   0x5E, 0x49, 0x28, 0x41, 0x1B, 0x3F, 0xA8, 0x37, 0x79, 0xDB, 0x82, 0x68, 0x5B, 0x38, 0x4C, 0x2B, 
   0x43, 0x36, 0x3E, 0x5A, 0x75, 0xD1, 0x3F, 0x86, 0xE3, 0x56, 0x2F, 0x42, 0x50, 0x0E, 0x41, 0x34, 
   0x94, 0xA8, 0x45, 0xA1, 0xAF, 0x62, 0x66, 0x8B, 0x50, 0x08, 0x23, 0x0C, 0x1F, 0x3C, 0x57, 0x82, 
   0xCE, 0x85, 0xAC, 0xF2, 0x50, 0x71, 0x73, 0x27, 0x13, 0x59, 0x21, 0x00, 0x5F, 0x67, 0x6D, 0x88, 
   0x52, 0xB5, 0x7F, 0x53, 0x66, 0x8C, 0x69, 0x5E, 0xCB, 0x5C, 0x66, 0x85, 0x27, 0x30, 0x60, 0x31, 
   0x40, 0x69, 0x48, 0x62, 0x8A, 0x64, 0x62, 0x68, 0x4C, 0x4B, 0x79, 0x29, 0x45, 0x90, 0x25, 0x58, 
   0x4E, 0x55, 0x49, 0x58, 0x73, 0x57, 0xCD, 0x63, 0x6F, 0xBC, 0x50, 0x96, 0x8C, 0x3E, 0x39, 0x83, 
   0x1C, 0x1B, 0x49, 0x3A, 0x56, 0x83, 0x7C, 0x87, 0x96, 0x98, 0x9F, 0x9E, 0x35, 0x91, 0xBF, 0x15, 
   0x3D, 0x7D, 0x48, 0x02, 0x4D, 0x55, 0x32, 0x5F, 0x2A, 0x7B, 0x7E, 0x8B, 0x9F, 0xC5, 0x84, 0x81, 
   0xF7, 0x30, 0x54, 0x8F, 0x00, 0x02, 0x00, 0x00, 0x10, 0x2D, 0x95, 0xBF, 0xFF, 0xE6, 0xDC, 0xD6, 
   0x21, 0x0B, 0x67, 0x00, 0x00, 0x6E, 0x2B, 0x2D, 0x00, 0x80, 0x7D, 0x53, 0x7E, 0xA4, 0xFF, 0x56, 
   0x89, 0xEB, 0x66, 0x65, 0x4F, 0x47, 0x5C, 0x80, 0x23, 0x54, 0xAB, 0x5B, 0x52, 0x5E, 0x55, 0x4C, 
   0x36, 0x00, 0x38, 0x78, 0x49, 0x6A, 0xD8, 0xFF, 0xFF, 0xEF, 0x7B, 0x8F, 0xA1, 0x00, 0x00, 0x09, 
   0x00, 0x00, 0x10, 0xA7, 0x92, 0xC1, 0xFF, 0xCB, 0xFF, 0x7C, 0xDC, 0xAE, 0x00, 0x32, 0x6C, 0x00, 
   0x00, 0x37, 0x4C, 0x61, 0x8F, 0xE5, 0xFF, 0xF8, 0xE9, 0x8F, 0xD9, 0x00, 0x00, 0x30, 0x00, 0x15, 
   0x00, 0x5D, 0x82, 0xE3, 0xD2, 0x93, 0xFF, 0x5F, 0x4D, 0x4D, 0x00, 0x24, 0x00, 0x2F, 0x31, 0xA4, 
   0x91, 0xAA, 0xFF, 0x73, 0xBA, 0xD4, 0x00, 0x06, 0x2A, 0x22, 0x00, 0x0D, 0x8B, 0xA9, 0xCB, 0x92, 
   0xE4, 0xFF, 0x35, 0x2C, 0x66, 0x00, 0x00, 0x54, 0x57, 0x8D, 0xAF, 0xB2, 0xC6, 0xA4, 0x4E, 0x35, 
   0x9C, 0x00, 0x17, 0x7D, 0x2B, 0x67, 0x27, 0x9B, 0xA0, 0x9B, 0x8A, 0x39, 0xF8, 0x11, 0x0C, 0x97, 
   0x0B, 0x80, 0x29, 0x79, 0xB4, 0xAC, 0xA5, 0x74, 0xE9, 0x24, 0x21, 0x37, 0x00, 0x1A, 0x25, 0x0D, 
   0x4A, 0xA5, 0x89, 0xB3, 0xC5, 0x9D, 0x91, 0x87, 0x3A, 0x18, 0x8D, 0x10, 0x17, 0x87, 0x32, 0x79, 
   0x7C, 0x3A, 0x9D, 0x7D, 0x70, 0x64, 0x9B, 0x87, 0x36, 0xA1, 0x36, 0x4D, 0x8A, 0x34, 0x86, 0xA6, 
   0x44, 0x5E, 0x99, 0x3A, 0x0F, 0x59, 0x74, 0x66, 0x71, 0x6F, 0xB7, 0xEA, 0x2F, 0x66, 0xBB, 0x39, 
   0x30, 0x46, 0x55, 0x50, 0x49, 0x49, 0x45, 0x8E, 0x1C, 0x41, 0x97, 0x35, 0x6D, 0x88, 0x8C, 0xAD, 
   0xD3, 0x6A, 0x6E, 0x93, 0x1F, 0x1D, 0x6A, 0x24, 0x56, 0x7A, 0x65, 0x7F, 0x8D, 0x7D, 0x7F, 0xAA, 
   0x65, 0x66, 0x93, 0x0E, 0x10, 0x60, 0x04, 0x29, 0x83, 0x9B, 0xD0, 0xC8, 0xB8, 0xCF, 0xAA, 0x21, 
   0x05, 0x4D, 0x00, 0x00, 0x79, 0x57, 0x7C, 0x96, 0x47, 0x90, 0x80, 0x32, 0x5D, 0x86, 0x67, 0x58, 
   0xBA, 0x78, 0x6F, 0x76, 0x2E, 0x6F, 0x7B, 0x44, 0x5D, 0xBA, 0x92, 0x67, 0x9C, 0x45, 0x6B, 0x67, 
   0x00, 0x5D, 0x8C, 0x37, 0x18, 0x80, 0x5C, 0x41, 0x49, 0x48, 0x7D, 0x9B, 0x55, 0x74, 0xC5, 0x83, 
   0x6F, 0x91, 0x60, 0x73, 0x5D, 0x37, 0x66, 0x95, 0x3B, 0x49, 0xAB, 0x5D, 0x43, 0x60, 0x41, 0x66, 
   0x5B, 0x5C, 0x93, 0xCD, 0x55, 0x6F, 0x99, 0x1B, 0x03, 0x65, 0x21, 0x49, 0x70, 0x41, 0x96, 0x6C, 
   0x67, 0x9E, 0xAE, 0xB7, 0x7A, 0xF2, 0x37, 0x38, 0x6C, 0x00, 0x3C, 0x1A, 0x40, 0x6E, 0xAE, 0x7B, 
   0x63, 0xBB, 0x4E, 0x2B, 0x66, 0x42, 0x82, 0x66, 0x26, 0x67, 0x8F, 0x45, 0x68, 0xA2, 0xAC, 0x5D, 
   0xA7, 0x19, 0x52, 0x62, 0x00, 0x32, 0x48, 0xBD, 0x96, 0xA1, 0xA1, 0xB3, 0xFF, 0x1C, 0x56, 0xA0, 
   0x04, 0x1B, 0x00, 0x87, 0x5A, 0x93, 0x78, 0x83, 0xC5, 0x09, 0x20, 0x86, 0x40, 0x31, 0x9B, 0xAB, 
   0xD2, 0xCA, 0xB8, 0xFF, 0xBE, 0x92, 0x85, 0xAA, 0x47, 0x1D, 0x7A, 0x00, 0x19, 0x7E, 0x32, 0x62, 
   0x83, 0x93, 0x8B, 0x90, 0x6C, 0x79, 0x9D, 0x00, 0x00, 0x79, 0x30, 0x4C, 0xC6, 0xFF, 0xFB, 0xFB, 
   0xBD, 0xAD, 0x88, 0x2F, 0x3F, 0xA0, 0x35, 0x87, 0xC3, 0x4F, 0x85, 0x52, 0x43, 0x5F, 0x2A, 0x38, 
   0x00, 0x8D, 0x00, 0x00, 0x9D, 0x88, 0xEE, 0xAD, 0xFF, 0xFF, 0xF3, 0x6C, 0x7C, 0xB3, 0x00, 0x00, 
   0x4A, 0x55, 0x40, 0xBE, 0x75, 0x61, 0xC6, 0x00, 0x52, 0x20, 0x54, 0x81, 0x75, 0xCB, 0xDA, 0xFF, 
   0x72, 0x68, 0xA4, 0x00, 0x00, 0x00, 0x3D, 0x4A, 0x8A, 0x32, 0x34, 0x8F, 0x50, 0x9B, 0x73, 0x73, 
   0x73, 0x84, 0x56, 0x40, 0x8B, 0x5B, 0x51, 0x90, 0x3D, 0x7F, 0x95, 0x43, 0x6E, 0x77, 0x44, 0x45, 
   0x7D, 0x4B, 0x40, 0x83, 0xA6, 0x90, 0xA0, 0x87, 0xA5, 0xAA, 0x00, 0x35, 0x6F, 0x05, 0x00, 0x57, 
   0x89, 0x8E, 0xAB, 0x74, 0x8E, 0x9E, 0x36, 0x04, 0x32, 0x46, 0x00, 0x7C, 0x4D, 0x98, 0xAB, 0x59, 
   0xBD, 0x7F, 0x7A, 0x7C, 0xC9, 0x4A, 0x5A, 0xC0, 0x00, 0x00, 0x13, 0x38, 0x13, 0x5D, 0x7E, 0xB5, 
   0xDB, 0x68, 0x9F, 0x70, 0x3A, 0x25, 0x55, 0x50, 0x2F, 0xCC, 0x4B, 0x85, 0x99, 0x3A, 0x52, 0x5E, 
   0x7E, 0x30, 0x73, 0x5B, 0x64, 0x6D, 0x42, 0x7A, 0xB1, 0x25, 0x56, 0x7D, 0x10, 0x0B, 0x1C, 0x84, 
   0x30, 0x95, 0x85, 0xA5, 0xDA, 0x1E, 0xA0, 0x46, 0x39, 0x2C, 0x3B, 0x5B, 0x41, 0xB4, 0x50, 0x74, 
   0xB6, 0x50, 0x7A, 0x9E, 0x65, 0x56, 0x89, 0x25, 0x27, 0x36, 0x0E, 0x2D, 0x41, 0x5F, 0x74, 0x82, 
   0x6C, 0x76, 0xBE, 0x3F, 0x7C, 0x9D, 0x44, 0x4D, 0x5F, 0x3F, 0x1F, 0x6B, 0x56, 0x53, 0xB5, 0x50, 
   0x61, 0x87, 0x56, 0x95, 0x63, 0x3F, 0x6B, 0x62, 0x29, 0x09, 0x74, 0x63, 0x4D, 0x81, 0x7F, 0x8C, 
   0x78, 0x56, 0x5F, 0x9C, 0x15, 0x59, 0xE4, 0x2C, 0x47, 0x42, 0x56, 0x2C, 0x14, 0x68, 0x4B, 0xA6, 
   0x46, 0x8D, 0xF8, 0x46, 0xAF, 0x69, 0x46, 0x35, 0x2B, 0x79, 0x3E, 0xDB, 0x2D, 0x8C, 0xCE, 0x10, 
   0x25, 0x31, 0x65, 0x3B, 0x24, 0x82, 0x7F, 0xC4, 0x57, 0x72, 0xF5, 0x00, 0x1B, 0x00, 0x19, 0x00, 
   0x00, 0x72, 0x5B, 0xFF, 0x80, 0xEE, 0xFF, 0x68, 0xB0, 0x8B, 0x11, 0x00, 0x1F, 0x0B, 0x28, 0x44, 
   0x6E, 0x90, 0xC2, 0x80, 0xAD, 0xB2, 0x58, 0x28, 0x5B, 0x29, 0x0B, 0x4F, 0x4A, 0x77, 0x78, 0x5A, 
   0x7E, 0xC2, 0x1D, 0x30, 0x7E, 0x46, 0x60, 0x62, 0xB2, 0xCC, 0x95, 0x33, 0x6E, 0x9B, 0x00, 0x00, 
   0x83, 0x82, 0x39, 0x70, 0x8E, 0xC3, 0x9C, 0x0A, 0x6D, 0x74, 0x1B, 0x22, 0x31, 0x6B, 0x3E, 0xB0, 
   0x6F, 0x83, 0xE2, 0x0D, 0x72, 0x2A, 0x00, 0x27, 0x24, 0x4B, 0x19, 0x6D, 0x7E, 0x9B, 0xA2, 0x9C, 
   0xAA, 0xFB, 0x6D, 0x66, 0xB6, 0x42, 0x6F, 0x58, 0x17, 0x71, 0x7E, 0x4F, 0x3C, 0xAF, 0x34, 0x3C, 
   0x3D, 0x36, 0x3F, 0x4B, 0x71, 0x92, 0xEE, 0xA3, 0xF8, 0xF4, 0x3F, 0x54, 0x61, 0x00, 0x00, 0x00, 
   0x20, 0x5A, 0x61, 0xE1, 0xDD, 0xEA, 0xA5, 0x6E, 0xD0, 0x40, 0x51, 0x7A, 0x00, 0x66, 0x6C, 0x17, 
   0x44, 0x8C, 0xB3, 0x8E, 0x5F, 0x91, 0x9F, 0x9A, 0x06, 0x47, 0xD9, 0x31, 0x2E, 0xA4, 0x48, 0x66, 
   0x46, 0x5B, 0x7D, 0x46, 0x8D, 0x6C, 0xA9, 0x3B, 0x64, 0xD3, 0x12, 0x41, 0x93, 0x3A, 0x53, 0x4E, 
   0x80, 0x86, 0x9E, 0x80, 0x63, 0xBB, 0x39, 0x51, 0x70, 0x00, 0x45, 0x6A, 0x28, 0x40, 0x92, 0x86, 
   0x70, 0xB5, 0x8C, 0x8F, 0x8D, 0x46, 0x89, 0x59, 0x12, 0x55, 0x82, 0x45, 0x42, 0xC7, 0x8F, 0x5E, 
   0x9E, 0x59, 0x74, 0x79, 0x00, 0x7D, 0x8D, 0x25, 0x20, 0x5A, 0x6C, 0x0A, 0x72, 0x68, 0x84, 0x9B, 
   0x74, 0x92, 0xA7, 0x46, 0x5F, 0x8A, 0x39, 0x5D, 0x72, 0x75, 0x60, 0x88, 0x23, 0x3D, 0x8D, 0x00, 
   0x54, 0x71, 0x36, 0x6C, 0x77, 0x7E, 0x62, 0x90, 0x7F, 0x4C, 0x9E, 0x50, 0x58, 0x9F, 0x21, 0x80, 
   0x83, 0x2D, 0x4B, 0x88, 0x5D, 0x1D, 0x94, 0x76, 0x6E, 0x9B, 0x76, 0x7B, 0x90, 0x52, 0x5F, 0x95, 
   0x28, 0x3C, 0x9F, 0x1C, 0x4D, 0x7B, 0x40, 0x7C, 0x64, 0x86, 0x83, 0x93, 0x69, 0x65, 0xC1, 0x2E, 
   0x3C, 0xB9, 0x27, 0x52, 0x39, 0x33, 0x5E, 0x4A, 0x57, 0x54, 0xCA, 0x74, 0x71, 0xB0, 0x3C, 0x67, 
   0x71, 0x5E, 0x62, 0xA3, 0x6F, 0x78, 0x85, 0x2A, 0x34, 0x4C, 0x2F, 0x67, 0x97, 0x52, 0x89, 0xB4, 
   0x54, 0x39, 0x60, 0x6C, 0x5B, 0x83, 0x60, 0x8F, 0xC8, 0x3D, 0x5B, 0xA5, 0x16, 0x2D, 0x5F, 0x67, 
   0x56, 0x75, 0xA5, 0x7F, 0x82, 0x2C, 0x96, 0xBC, 0x00, 0x57, 0xB0, 0x70, 0x29, 0x6F, 0x72, 0x6E, 
   0x57, 0x3A, 0x86, 0x8B, 0x77, 0x74, 0xA8, 0x7B, 0x67, 0xAE, 0x00, 0x4F, 0x84, 0x34, 0x76, 0x6B, 
   0x7D, 0x58, 0x75, 0x22, 0x30, 0x6A, 0x2E, 0x53, 0x82, 0x69, 0x77, 0x7F, 0x44, 0x57, 0x92, 0x4B, 
   0x5E, 0xC7, 0x95, 0xA2, 0xBF, 0x5A, 0x5C, 0x6C, 0x00, 0x28, 0x3D, 0x41, 0x66, 0x9F, 0x91, 0x8E, 
   0xB1, 0x51, 0x54, 0x95, 0x16, 0x36, 0x98, 0x3D, 0x75, 0x59, 0x2D, 0x3E, 0x65, 0x36, 0x51, 0xB0, 
   0x93, 0xB3, 0xA1, 0x6C, 0x67, 0x7F, 0x3D, 0x0A, 0xA0, 0x36, 0x43, 0x7D, 0x25, 0x9F, 0x50, 0x76, 
   0x77, 0xCD, 0xB9, 0x41, 0x98, 0x12, 0x35, 0x20, 0x00, 0x4E, 0x71, 0x67, 0x69, 0xB9, 0xE9, 0x9F, 
   0xAA, 0x82, 0x9E, 0x8E, 0x0C, 0x2F, 0xA8, 0x00, 0x07, 0x5D, 0x46, 0x75, 0x41, 0x72, 0x9B, 0x9F, 
   0xAD, 0x86, 0xE6, 0x5C, 0x74, 0x97, 0x00, 0x29, 0x47, 0x03, 0x1C, 0x34, 0xBB, 0x9A, 0xC3, 0xC5, 
   0xEA, 0xFF, 0x7A, 0xC7, 0xD5, 0x73, 0x92, 0x4B, 0x00, 0x00, 0x41, 0x00, 0x00, 0x52, 0x73, 0xB0, 
   0x9A, 0xA8, 0xF9, 0xC0, 0x6D, 0x33, 0xA0, 0x00, 0x00, 0xA7, 0x00, 0x53, 0xAC, 0x83, 0xF2, 0x9A, 
   0xE6, 0x8D, 0x98, 0x3F, 0x3C, 0x81, 0x0F, 0x53, 0xA3, 0x90, 0xC4, 0xB8, 0x33, 0x66, 0x72, 0x00, 
   0x00, 0x4A, 0x73, 0x4E, 0xA2, 0xFF, 0xFF, 0xE2, 0x82, 0xBC, 0x9E, 0x31, 0x7E, 0x64, 0x15, 0x60, 
   0xB8, 0x31, 0x11, 0x95, 0x65, 0x2E, 0x71, 0x6C, 0x9C, 0xA2, 0x2E, 0x87, 0x75, 0x9A, 0x80, 0x9D, 
   0xAC, 0x96, 0xD8, 0x00, 0x00, 0x10, 0x49, 0x6E, 0x74, 0x44, 0x7E, 0x69, 0x5B, 0x34, 0xC8, 0x4A, 
   0x50, 0x78, 0x3F, 0x85, 0x61, 0x6C, 0x8B, 0xB1, 0x54, 0x6E, 0xBC, 0x2C, 0x3F, 0x65, 0x48, 0x44, 
   0x42, 0x5A, 0x72, 0xA3, 0x4F, 0x89, 0xA4, 0x65, 0x4A, 0x88, 0x47, 0x49, 0x87, 0x41, 0x81, 0x91, 
   0x51, 0x5E, 0x6E, 0x35, 0x46, 0x79, 0x3A, 0x5B, 0xAB, 0x57, 0x65, 0x82, 0x5C, 0x43, 0x5E, 0x4B, 
   0x4A, 0x6F, 0x29, 0x80, 0x83, 0x57, 0x97, 0xC8, 0x6E, 0x6C, 0xAF, 0x40, 0x00, 0x29, 0x39, 0x47, 
   0x0D, 0x56, 0x6B, 0xB5, 0x40, 0x72, 0xEC, 0x46, 0x97, 0xAB, 0x6E, 0x1D, 0x62, 0x56, 0x00, 0x11, 
   0x17, 0x50, 0x96, 0x6D, 0x9E, 0xDC, 0x62, 0x82, 0x81, 0x55, 0x4D, 0x7E, 0x36, 0x33, 0x86, 0x14, 
   0x21, 0x03, 0x44, 0x3A, 0x78, 0x96, 0x81, 0xFF, 0x5E, 0x82, 0x6B, 0x24, 0x32, 0x00, 0x3A, 0x3D, 
   0xD8, 0x79, 0x97, 0xFF, 0x66, 0x62, 0x2C, 0x36, 0x10, 0x00, 0x00, 0x1C, 0x5D, 0x41, 0x74, 0xC8, 
   0x65, 0x9E, 0xD5, 0x56, 0x4E, 0x35, 0x50, 0x15, 0x2A, 0x44, 0x71, 0xD7, 0x3F, 0x89, 0xBD, 0x61, 
   0x66, 0x7C, 0x4A, 0x21, 0x4C, 0x1D, 0x3E, 0x53, 0x51, 0xAB, 0xBB, 0x96, 0x7C, 0xB0, 0x4B, 0x1E, 
   0x4E, 0x1B, 0x28, 0x64, 0x20, 0x36, 0x87, 0x61, 0x83, 0x93, 0x68, 0x90, 0x78, 0x41, 0x5D, 0x7E, 
   0x40, 0x3A, 0x8A, 0x50, 0x56, 0x85, 0x34, 0x78, 0x7A, 0x40, 0x45, 0x86, 0x73, 0x45, 0xB8, 0x62, 
   0x94, 0x84, 0x33, 0x4F, 0x6B, 0x58, 0x58, 0xB1, 0x19, 0x66, 0x44, 0x3B, 0x1C, 0x18, 0x42, 0x1E, 
   0xA5, 0x56, 0x60, 0xBB, 0x79, 0x91, 0x9B, 0x40, 0x76, 0xB7, 0x23, 0x2B, 0x76, 0x5D, 0x48, 0x52, 
   0x70, 0xA8, 0xA7, 0x7A, 0x68, 0x9B, 0x33, 0x42, 0x7C, 0x04, 0x29, 0x75, 0x4E, 0x0E, 0x48, 0x40, 
   0x41, 0x67, 0x5E, 0xC3, 0xC5, 0x91, 0xD5, 0xB5, 0x4F, 0x5F, 0x9B, 0x03, 0x00, 0x58, 0x1A, 0x15, 
   0x1A, 0x3A, 0x62, 0x84, 0xA3, 0xA9, 0xFF, 0xC3, 0xC3, 0xA0, 0x08, 0x00, 0x19, 0x00, 0x00, 0x5B, 
   0x62, 0xB1, 0x74, 0x98, 0xBA, 0x9E, 0x15, 0x52, 0x9A, 0x00, 0x1C, 0x6D, 0x64, 0x1E, 0x47, 0x7E, 
   0x78, 0x84, 0x61, 0xB9, 0xF3, 0x48, 0x80, 0x98, 0x5C, 0x50, 0x52, 0x0C, 0x43, 0x7F, 0x30, 0x34, 
   0xBE, 0xC0, 0xA0, 0x9C, 0x90, 0xA4, 0x7E, 0x00, 0x00, 0x60, 0x00, 0x00, 0x68, 0xCD, 0xDA, 0xBA, 
   0xD5, 0x88, 0xBB, 0x0C, 0x43, 0x65, 0x09, 0x74, 0x60, 0x2D, 0x21, 0xAB, 0x6F, 0x62, 0xB2, 0xC6, 
   0xFF, 0x8E, 0x73, 0x7B, 0x6E, 0x00, 0x00, 0x3B, 0x00, 0x4A, 0x70, 0x73, 0xBE, 0xEF, 0xE7, 0x7A, 
   0xF3, 0x78, 0x39, 0x01, 0x00, 0x49, 0x02, 0x2E, 0x43, 0xEF, 0x95, 0x82, 0xFF, 0x4C, 0x91, 0x87, 
   0x0D, 0x23, 0x0C, 0x58, 0x06, 0x35, 0x96, 0x9C, 0xFF, 0x5B, 0xC4, 0xFB, 0x00, 0x00, 0x42, 0x22, 
   0x00, 0x3B, 0x86, 0xB0, 0xA8, 0x92, 0xE0, 0xD2, 0x3A, 0x44, 0x6C, 0x06, 0x04, 0x77, 0x4B, 0x81, 
   0xB5, 0xB6, 0xC4, 0x92, 0x53, 0x27, 0x9A, 0x00, 0x00, 0x5E, 0x08, 0x6B, 0x25, 0x9B, 0xA7, 0x94, 
   0x92, 0x7A, 0xFF, 0x41, 0x40, 0x68, 0x28, 0x51, 0x1D, 0x38, 0x62, 0xC3, 0x8D, 0x83, 0xE5, 0x47, 
   0x53, 0x5F, 0x00, 0x00, 0x30, 0x25, 0x3E, 0x82, 0x7D, 0xA9, 0xB4, 0x7F, 0xC1, 0xA0, 0x40, 0x4D, 
   0xA0, 0x2D, 0x11, 0x83, 0x22, 0x3E, 0x71, 0x41, 0x79, 0x83, 0x7C, 0x86, 0xA6, 0x7C, 0x4E, 0x95, 
   0x2A, 0x49, 0x8F, 0x38, 0x98, 0xA4, 0x38, 0x53, 0x91, 0x3A, 0x25, 0x4D, 0x8B, 0x6A, 0x98, 0x63, 
   0x82, 0xAF, 0x07, 0x4A, 0x8C, 0x35, 0x66, 0x69, 0x8B, 0x99, 0x7A, 0x4D, 0x37, 0xAE, 0x35, 0x37, 
   0x9C, 0x2A, 0x66, 0x63, 0x6F, 0x79, 0x97, 0x7A, 0x89, 0xB9, 0x2E, 0x4F, 0x6E, 0x00, 0x33, 0x5E, 
   0x43, 0x67, 0x9E, 0xBD, 0xA7, 0xCD, 0x89, 0x83, 0xAA, 0x00, 0x00, 0x64, 0x00, 0x00, 0x6F, 0x9A, 
   0xA8, 0x8E, 0xAE, 0xD8, 0xB2, 0x3B, 0x43, 0x9C, 0x38, 0x35, 0xA6, 0x37, 0x6D, 0x92, 0x43, 0x57, 
   0x52, 0x71, 0x79, 0x8A, 0x70, 0x72, 0xB1, 0x2F, 0x4F, 0x78, 0x1D, 0x59, 0x8E, 0x5C, 0x3D, 0xA4, 
   0x6F, 0x60, 0x5B, 0x5D, 0x93, 0x89, 0x13, 0x60, 0xAC, 0x3B, 0x27, 0x74, 0x5F, 0x61, 0x6A, 0x6C, 
   0x9C, 0xC0, 0x45, 0x5E, 0xBF, 0x5B, 0x4D, 0x5C, 0x5F, 0x7A, 0x4F, 0x2B, 0x7E, 0x8E, 0x4C, 0x49, 
   0xC2, 0x57, 0x36, 0x7D, 0x45, 0x4D, 0x3D, 0x23, 0x71, 0x9E, 0x68, 0x78, 0x9F, 0x8A, 0x6C, 0x88, 
   0x13, 0x3E, 0x81, 0x25, 0x4F, 0x49, 0x77, 0x7E, 0x84, 0x73, 0x7F, 0xD5, 0x60, 0x5D, 0x9B, 0x52, 
   0x7D, 0x55, 0x2E, 0x7A, 0x98, 0x23, 0x07, 0xA3, 0x64, 0x20, 0x49, 0x45, 0x9C, 0x74, 0x42, 0x9F, 
   0xB1, 0xD6, 0x76, 0xEB, 0x7D, 0x89, 0xB4, 0x00, 0x0F, 0x43, 0x00, 0x00, 0x00, 0xBB, 0x83, 0x7B, 
   0xDC, 0xFF, 0xFF, 0x37, 0x50, 0xB7, 0x00, 0x00, 0x1D, 0x6C, 0x7B, 0x85, 0x8E, 0xC8, 0xC8, 0xA0, 
   0x95, 0xD5, 0xA3, 0x64, 0xBB, 0x00, 0x22, 0x7D, 0x1A, 0x5A, 0x41, 0x9E, 0x84, 0x64, 0x81, 0xAB, 
   0xA6, 0x52, 0x64, 0xBC, 0x24, 0x1D, 0xAD, 0x7E, 0x77, 0xD9, 0x7C, 0x73, 0x91, 0x00, 0x1A, 0x49, 
   0x00, 0x6B, 0x6A, 0xB5, 0x9B, 0x9A, 0xAC, 0x91, 0xA4, 0x39, 0x69, 0xC8, 0x00, 0x2D, 0xCD, 0x68, 
   0xB8, 0x82, 0xDB, 0xFC, 0x8F, 0x6C, 0x26, 0x81, 0x18, 0x29, 0x65, 0x37, 0x94, 0xB5, 0x58, 0x8E, 
   0xAA, 0x26, 0x36, 0x8D, 0x39, 0x52, 0x71, 0x96, 0x6F, 0xAF, 0x9B, 0x9C, 0xD6, 0x37, 0x6C, 0x51, 
   0x0E, 0x26, 0x4C, 0x9B, 0x8B, 0xF7, 0x61, 0x74, 0xA9, 0x6C, 0x8A, 0xC5, 0x39, 0x34, 0x57, 0x3E, 
   0x39, 0x8E, 0x72, 0x79, 0x82, 0x50, 0x90, 0x6B, 0x44, 0x4B, 0x98, 0x5A, 0x3F, 0x8C, 0x53, 0x83, 
   0x86, 0x4C, 0x77, 0x7A, 0x1E, 0x49, 0x74, 0x15, 0x2D, 0x87, 0xAB, 0x95, 0xAA, 0x8E, 0xB2, 0x98, 
   0x00, 0x28, 0x53, 0x40, 0x3D, 0x75, 0x62, 0xA1, 0xDA, 0x50, 0x86, 0x8D, 0x3E, 0x05, 0x28, 0x37, 
   0x00, 0x60, 0x2D, 0x5A, 0x74, 0x52, 0x8D, 0x77, 0x9E, 0xC1, 0xD8, 0x69, 0x9B, 0x9E, 0x00, 0x00, 
   0x04, 0x16, 0x2C, 0x7C, 0x67, 0xD8, 0xFF, 0x7A, 0x6B, 0x76, 0x57, 0x23, 0x18, 0x2D, 0x43, 0x89, 
   0x38, 0x3F, 0x8B, 0x29, 0x64, 0x86, 0x7F, 0x7D, 0xA8, 0x79, 0x88, 0x84, 0x48, 0x5D, 0x65, 0x00, 
   0x49, 0x58, 0x14, 0x09, 0x2D, 0x73, 0x2E, 0xA3, 0x98, 0x99, 0xD9, 0x5A, 0x90, 0xA0, 0x3B, 0x5C, 
   0x6A, 0x56, 0x37, 0x77, 0x2D, 0x51, 0x70, 0x4F, 0x57, 0x4E, 0x76, 0x57, 0x8D, 0x14, 0x57, 0x99, 
   0x14, 0x46, 0x5C, 0x7C, 0x3C, 0x7F, 0x6D, 0x77, 0x97, 0x34, 0x79, 0x6B, 0x55, 0x7E, 0x99, 0x3E, 
   0x43, 0x93, 0x28, 0x04, 0x4F, 0x62, 0x6C, 0x9F, 0x6E, 0xAC, 0x8F, 0x50, 0x76, 0x83, 0x32, 0x17, 
   0xA8, 0x1B, 0x00, 0x46, 0x55, 0x4D, 0x25, 0x5C, 0x96, 0xAB, 0x5D, 0x98, 0xFF, 0x63, 0x79, 0x68, 
   0x40, 0x21, 0x17, 0x44, 0x1A, 0x9B, 0x4F, 0x7D, 0xE0, 0x29, 0x7F, 0x51, 0x58, 0x47, 0x1F, 0x9C, 
   0x63, 0xF2, 0x55, 0xA5, 0xFF, 0x00, 0x36, 0x00, 0x36, 0x00, 0x00, 0x71, 0x64, 0xFF, 0x61, 0xAB, 
   0xFF, 0x49, 0x5B, 0x41, 0x10, 0x00, 0x0C, 0x34, 0x35, 0x87, 0x75, 0xD8, 0xFC, 0x6B, 0xAB, 0xC2, 
   0x64, 0x36, 0x36, 0x28, 0x38, 0x77, 0x2B, 0x63, 0x9D, 0x58, 0x3A, 0x6F, 0x11, 0x00, 0x5F, 0x42, 
   0x5A, 0x57, 0xC0, 0xCF, 0xA4, 0x5C, 0x9F, 0xF9, 0x00, 0x07, 0x78, 0x3C, 0x27, 0x03, 0x66, 0x73, 
   0x64, 0x52, 0x9C, 0xC3, 0x59, 0x79, 0x9F, 0x8A, 0x2E, 0xD0, 0x48, 0x5F, 0xCA, 0x00, 0x5A, 0x00, 
   0x00, 0x12, 0x11, 0x93, 0x86, 0xF5, 0xAC, 0xB4, 0xE7, 0x23, 0x46, 0x74, 0x1D, 0x0B, 0x61, 0x51, 
   0x23, 0x45, 0x70, 0x76, 0x66, 0x65, 0x8F, 0xEC, 0x37, 0x46, 0xA4, 0x31, 0x37, 0x3E, 0x87, 0xCB, 
   0xCC, 0x8A, 0x9F, 0xFF, 0x09, 0x00, 0x09, 0x00, 0x00, 0x00, 0x42, 0x66, 0xB9, 0xF8, 0xFF, 0xFF, 
   0xCA, 0xB8, 0xBE, 0x00, 0x19, 0x48, 0x00, 0x00, 0x35, 0x38, 0x7B, 0x9E, 0xF4, 0xCE, 0xEB, 0xCB, 
   0x82, 0xBD, 0x00, 0x2E, 0x76, 0x00, 0x1B, 0x62, 0x58, 0x55, 0x62, 0xA6, 0x8A, 0xA8, 0x7A, 0x91, 
   0xAA, 0x50, 0x57, 0x9E, 0x36, 0x34, 0x6F, 0x1E, 0x78, 0x48, 0x57, 0x93, 0xD7, 0x6E, 0x63, 0xDC, 
   0x40, 0x11, 0x2F, 0x1E, 0x4A, 0x46, 0x5D, 0x90, 0xC6, 0x85, 0x80, 0xD8, 0x44, 0x4B, 0x98, 0x10, 
   0x3F, 0x3B, 0x28, 0x35, 0x63, 0x7A, 0x65, 0xB5, 0x6F, 0x78, 0xC7, 0x45, 0x83, 0x5A, 0x38, 0x6A, 
   0x7C, 0x38, 0x2F, 0xE8, 0x7C, 0x45, 0x7A, 0x48, 0x78, 0x72, 0x03, 0x6D, 0x92, 0x37, 0x4A, 0x6F, 
   0x67, 0x44, 0x43, 0x6E, 0x5B, 0xAC, 0x40, 0x40, 0xD0, 0x2E, 0x85, 0x75, 0x62, 0x8A, 0x95, 0x93, 
   0x43, 0x9E, 0x3B, 0x19, 0x69, 0x00, 0x2D, 0x43, 0x13, 0x9C, 0x90, 0x89, 0x87, 0xBC, 0x8B, 0x5F, 
   0xAC, 0x4C, 0x57, 0x89, 0x28, 0x5C, 0x88, 0x28, 0x45, 0x77, 0x41, 0x35, 0x83, 0x7C, 0x82, 0xB1, 
   0x87, 0x9F, 0x9F, 0x2F, 0x4E, 0x7C, 0x21, 0x3B, 0x7B, 0x2C, 0x3A, 0xA2, 0x4B, 0x41, 0x5E, 0x5E, 
   0x78, 0x65, 0x7C, 0x96, 0xEA, 0x65, 0x6E, 0xBC, 0x47, 0x4F, 0x5E, 0x4C, 0x48, 0x67, 0x40, 0x42, 
   0x89, 0x45, 0x5A, 0x7F, 0x35, 0x7D, 0x91, 0x6E, 0x88, 0xB3, 0x57, 0x3E, 0x69, 0x0D, 0x28, 0x58, 
   0x5E, 0x8F, 0xB4, 0x71, 0x94, 0xAF, 0x49, 0x3E, 0x58, 0x38, 0x27, 0x5E, 0x65, 0x6D, 0x82, 0x27, 
   0x7B, 0xB2, 0x35, 0x71, 0xA8, 0xBA, 0x7C, 0x96, 0x80, 0x59, 0x79, 0x0B, 0x63, 0x9A, 0x36, 0x7D, 
   0xBF, 0x79, 0x49, 0x7E, 0x2E, 0x3D, 0x48, 0x34, 0x7B, 0x80, 0x67, 0x59, 0x7C, 0x3B, 0x43, 0x61, 
   0x31, 0x72, 0xB8, 0x7C, 0x79, 0x97, 0x6A, 0x6D, 0x75, 0x20, 0x55, 0x9C, 0x47, 0x43, 0xA7, 0x70, 
   0x5B, 0x74, 0x2D, 0x58, 0x6E, 0x45, 0x7C, 0xA2, 0xA0, 0xA9, 0xAD, 0x65, 0x73, 0x83, 0x00, 0x21, 
   0x54, 0x35, 0x5F, 0x93, 0x70, 0x5A, 0x94, 0x5F, 0x6D, 0x7E, 0x74, 0x9A, 0xBB, 0x39, 0x64, 0x70, 
   0x00, 0x08, 0x47, 0x2F, 0x49, 0x98, 0x67, 0xAD, 0x8B, 0x9C, 0x7C, 0xAF, 0x94, 0x7A, 0xC4, 0x12, 
   0x4F, 0x50, 0x00, 0x37, 0x4F, 0x6F, 0x4E, 0xB0, 0xBC, 0x71, 0x8F, 0x45, 0x4B, 0x47, 0x1B, 0x73, 
   0xA9, 0x44, 0x6E, 0xD2, 0x72, 0x67, 0x97, 0x54, 0x4F, 0x45, 0x00, 0x1D, 0x82, 0x3A, 0x4E, 0x79, 
   0x56, 0x6B, 0x51, 0x61, 0x8D, 0xB8, 0x9D, 0x9C, 0xFF, 0x76, 0xAD, 0xBD, 0x5D, 0x92, 0x86, 0x54, 
   0x37, 0x78, 0x1B, 0x13, 0x72, 0x61, 0x38, 0xAB, 0x91, 0xAE, 0x9A, 0xAD, 0xFF, 0x9A, 0x43, 0x44, 
   0x74, 0x00, 0x00, 0x88, 0x7B, 0x9C, 0xFB, 0xAE, 0xC5, 0xA9, 0x77, 0x51, 0x82, 0x00, 0x26, 0x7E, 
   0x00, 0x1C, 0x40, 0x67, 0x97, 0x71, 0xCE, 0x93, 0xBF, 0x33, 0x00, 0x91, 0x57, 0x98, 0xC6, 0xFF, 
   0xFF, 0xFF, 0x67, 0xA6, 0x7E, 0x00, 0x09, 0x06, 0x2E, 0x04, 0x92, 0x4B, 0x45, 0xAA, 0x59, 0x99, 
   0x57, 0x56, 0xBD, 0x92, 0x5D, 0x78, 0xC6, 0x7F, 0x5E, 0x93, 0x7C, 0x66, 0x96, 0x03, 0x26, 0x6E, 
   0x00, 0x4A, 0x4F, 0xFF, 0xCF, 0xFF, 0x50, 0x5C, 0x9D, 0x50, 0x51, 0xAE, 0x55, 0x85, 0x79, 0x44, 
   0x73, 0x7E, 0x49, 0x44, 0xAF, 0x44, 0x3E, 0x75, 0x5B, 0x66, 0x47, 0x66, 0x94, 0xA2, 0x69, 0x77, 
   0xC4, 0x12, 0x36, 0x51, 0x17, 0x2B, 0x4B, 0x69, 0x83, 0xA1, 0x61, 0x7A, 0x98, 0x74, 0x3C, 0x78, 
   0x89, 0x80, 0xB1, 0x20, 0xA0, 0xC6, 0x4B, 0x62, 0x63, 0x60, 0x29, 0x7B, 0x2B, 0x2A, 0x7E, 0x09, 
   0x14, 0x49, 0x4F, 0x2A, 0x82, 0x63, 0x7F, 0x84, 0x4E, 0xAA, 0x4A, 0x70, 0x7D, 0xBF, 0x58, 0x63, 
   0xFF, 0x29, 0x2D, 0x54, 0x39, 0x20, 0x0C, 0x72, 0x7B, 0x8E, 0x39, 0x75, 0xA7, 0x28, 0x63, 0x91, 
   0x5B, 0x39, 0x79, 0x45, 0x29, 0x4B, 0x57, 0x64, 0xA6, 0x72, 0x88, 0xA1, 0x33, 0x87, 0x51, 0x42, 
   0x45, 0x94, 0x36, 0x26, 0x88, 0x0A, 0x05, 0x00, 0x58, 0x53, 0xC7, 0xAF, 0xCF, 0xFF, 0x64, 0xAD, 
   0x3A, 0x00, 0x0B, 0x00, 0x28, 0x1A, 0x8E, 0x7E, 0x9E, 0xFF, 0x57, 0x92, 0x9B, 0x5A, 0x1E, 0x04, 
   0x14, 0x0C, 0x38, 0x14, 0x5E, 0xB2, 0x5A, 0x95, 0xBF, 0x7D, 0x9B, 0x5E, 0x38, 0x2E, 0x3C, 0x1C, 
   0x1C, 0x88, 0x56, 0xA5, 0xD5, 0x7E, 0x83, 0xA8, 0x61, 0x32, 0x67, 0x15, 0x59, 0x82, 0x1B, 0x59, 
   0x86, 0x6C, 0x4E, 0x69, 0x5C, 0x4F, 0x6A, 0x40, 0x61, 0x83, 0x45, 0x84, 0x9C, 0x5C, 0x68, 0xA8, 
   0x62, 0x54, 0x8A, 0x22, 0x30, 0x6D, 0x28, 0x21, 0x6D, 0x6D, 0x79, 0x90, 0x5C, 0x98, 0x86, 0x4B, 
   0x6F, 0xBE, 0x4A, 0x61, 0x72, 0x2D, 0x3D, 0x3F, 0x45, 0x22, 0x8A, 0x73, 0x6E, 0xB4, 0x7D, 0xB9, 
   0xA8, 0x15, 0x61, 0x78, 0x00, 0x04, 0x43, 0x4B, 0x3F, 0x51, 0x98, 0xA4, 0xC7, 0x8D, 0xB0, 0xDF, 
   0x51, 0x4C, 0x97, 0x15, 0x2C, 0x43, 0x36, 0x36, 0x5E, 0x21, 0x27, 0x76, 0x46, 0x7B, 0x79, 0xAE, 
   0xDF, 0xB4, 0x58, 0x55, 0xB4, 0x11, 0x00, 0x57, 0x37, 0x5C, 0x6C, 0x3F, 0x7A, 0x94, 0x63, 0x8C, 
   0x95, 0x9C, 0x7E, 0x68, 0x34, 0x0A, 0x85, 0x00, 0x1B, 0xB2, 0x71, 0x8F, 0x7D, 0x93, 0xA7, 0x75, 
   0x20, 0x40, 0x47, 0x00, 0x19, 0x5A, 0x90, 0x86, 0xB8, 0xB8, 0x98, 0xC4, 0x0B, 0x68, 0x6D, 0x00, 
   0x21, 0x54, 0x4F, 0x1B, 0x44, 0x64, 0x3C, 0x94, 0x4A, 0x92, 0xE9, 0xA5, 0xC8, 0xCE, 0x8B, 0xBA, 
   0x9E, 0x00, 0x1B, 0x56, 0x00, 0x00, 0x54, 0x91, 0x7A, 0x67, 0xC7, 0x95, 0xA3, 0x2E, 0x6B, 0xB6, 
   0x26, 0x9F, 0xBD, 0x7B, 0x65, 0x8E, 0x21, 0x20, 0x6F, 0x5B, 0x80, 0x63, 0x8E, 0xBE, 0x86, 0x27, 
   0x07, 0xAA, 0x2C, 0x2E, 0xAB, 0x65, 0xC8, 0xB4, 0x5A, 0x5B, 0x89, 0x48, 0x16, 0x11, 0x2C, 0x6D, 
   0x6B, 0x3D, 0x86, 0xFF, 0x93, 0x7B, 0xF6, 0x5E, 0x7E, 0x29, 0x01, 0x3D, 0x10, 0x4B, 0x2A, 0x7F, 
   0x73, 0x74, 0xED, 0x40, 0x8F, 0xCA, 0x23, 0x17, 0x12, 0x51, 0x18, 0x51, 0x90, 0xB3, 0xE1, 0x4A, 
   0xB3, 0xBB, 0x00, 0x00, 0x59, 0x28, 0x07, 0x6A, 0x85, 0x9E, 0xA9, 0x8A, 0xD8, 0xC0, 0x27, 0x2B, 
   0x7B, 0x00, 0x00, 0x6A, 0x44, 0x80, 0xA3, 0xB2, 0xBA, 0xAE, 0x6C, 0x74, 0xB6, 0x00, 0x21, 0x4C, 
   0x25, 0x2B, 0x08, 0x66, 0x49, 0xAB, 0x7A, 0xA1, 0xFF, 0x58, 0x74, 0xA2, 0x3A, 0x3F, 0x3E, 0x4F, 
   0x50, 0x87, 0x6F, 0x6C, 0xAA, 0x2F, 0x7D, 0x7D, 0x00, 0x27, 0x5C, 0x3C, 0x28, 0x97, 0x7E, 0x97, 
   0xC7, 0x86, 0x8D, 0x9B, 0x4C, 0x63, 0xA0, 0x28, 0x23, 0x88, 0x28, 0x3A, 0x87, 0x41, 0x91, 0x92, 
   0x7C, 0x9E, 0x87, 0x87, 0x49, 0x93, 0x40, 0x53, 0x9E, 0x1B, 0x57, 0x81, 0x00, 0x3C, 0x6F, 0x52, 
   0x56, 0x87, 0x9F, 0xB3, 0x9B, 0x6B, 0x7F, 0xD9, 0x14, 0x39, 0xA3, 0x40, 0x5A, 0x39, 0x57, 0x77, 
   0x49, 0x62, 0x6B, 0xB1, 0x44, 0x4D, 0xA7, 0x0C, 0x1B, 0x58, 0x47, 0x61, 0xA3, 0xA9, 0xC2, 0xD6, 
   0x58, 0x5A, 0x75, 0x00, 0x14, 0x62, 0x31, 0x33, 0x6E, 0xB7, 0xA2, 0xA4, 0x78, 0xA9, 0xA0, 0x00, 
   0x36, 0x96, 0x27, 0x1F, 0x8B, 0x80, 0x87, 0x96, 0x87, 0xA4, 0x85, 0x74, 0x69, 0xA0, 0x3B, 0x38, 
   0xAF, 0x00, 0x41, 0x83, 0x26, 0x52, 0x64, 0x61, 0x5E, 0x5D, 0x41, 0x49, 0x76, 0x59, 0x72, 0xA1, 
   0x5A, 0x73, 0x9D, 0x3E, 0x4C, 0xA4, 0x77, 0x6E, 0x8D, 0x7C, 0x8F, 0x97, 0x19, 0x3E, 0x95, 0x08, 
   0x16, 0x55, 0x70, 0x6E, 0x62, 0x72, 0xB9, 0xBA, 0x45, 0x4D, 0xD1, 0x6B, 0x3A, 0x84, 0x3C, 0x78, 
   0x3D, 0x0F, 0x4B, 0x66, 0x77, 0x6D, 0xCE, 0xAA, 0x83, 0xB1, 0x24, 0x59, 0x66, 0x06, 0x25, 0x75, 
   0x56, 0x63, 0x70, 0x47, 0x43, 0x77, 0x44, 0x68, 0xBD, 0x9F, 0xAD, 0xA2, 0x4E, 0x68, 0x63, 0x02, 
   0x17, 0xBD, 0x41, 0x40, 0x68, 0x5A, 0xB3, 0x57, 0x67, 0x8A, 0xCA, 0x93, 0x3E, 0xBF, 0x2A, 0x2B, 
   0x74, 0x00, 0x5F, 0x50, 0x33, 0x45, 0x62, 0xED, 0x87, 0xD6, 0xB3, 0xC0, 0xBA, 0x00, 0x0A, 0x4C, 
   0x00, 0x00, 0x27, 0xD3, 0xC8, 0x78, 0xFF, 0xFF, 0xFF, 0x8E, 0xBE, 0xFF, 0x37, 0x1C, 0x51, 0x00, 
   0x00, 0x2F, 0x07, 0x1D, 0x63, 0xA6, 0xB6, 0x95, 0xE2, 0xDB, 0xF3, 0x47, 0x63, 0xA9, 0x16, 0x28, 
   0x5F, 0x4E, 0x7C, 0xC5, 0x81, 0x7C, 0xB9, 0x85, 0x7B, 0x7D, 0x37, 0x68, 0x7F, 0x29, 0x4F, 0x62, 
   0x5C, 0x4E, 0x7F, 0x00, 0x32, 0x8D, 0x00, 0x00, 0x6A, 0xEC, 0xA4, 0xBE, 0xFF, 0xFF, 0xE7, 0x6C, 
   0x91, 0xBD, 0x13, 0x41, 0x89, 0x11, 0x78, 0x71, 0x15, 0x19, 0x62, 0x39, 0x09, 0x4B, 0x60, 0x74, 
   0x92, 0x80, 0xB7, 0xB3, 0xA8, 0xCE, 0xC0, 0x5A, 0x69, 0xB3, 0x00, 0x00, 0x1F, 0x3E, 0x38, 0x71, 
   0xB3, 0xA2, 0xFF, 0x3E, 0x93, 0x5F, 0x49, 0x4B, 0x78, 0x3E, 0x35, 0x68, 0x72, 0x8B, 0xC3, 0x5B, 
   0x9C, 0x9A, 0x2D, 0x3F, 0x4F, 0x4F, 0x10, 0x97, 0x66, 0x70, 0x91, 0x65, 0x92, 0x63, 0x30, 0x53, 
   0x7F, 0x2F, 0x25, 0xAC, 0x4C, 0x5F, 0x89, 0x52, 0x78, 0x4B, 0x21, 0x52, 0x53, 0x56, 0x54, 0xC8, 
   0xA1, 0xC6, 0xD4, 0x6B, 0xAC, 0x88, 0x1E, 0x34, 0x62, 0x1B, 0x0C, 0x70, 0x3D, 0x2C, 0x9C, 0x55, 
   0x66, 0x89, 0x5B, 0x57, 0x43, 0x56, 0x4D, 0x44, 0x35, 0x2F, 0x76, 0x3C, 0x8F, 0xB9, 0x93, 0xF0, 
   0xFF, 0x7B, 0x80, 0x98, 0x1D, 0x00, 0x00, 0x10, 0x2F, 0x2C, 0x5A, 0xAE, 0xF1, 0x67, 0x7C, 0xA9, 
   0x4C, 0x46, 0x69, 0x6D, 0x3F, 0x8D, 0x3E, 0x34, 0x38, 0x00, 0x63, 0x73, 0x6D, 0x70, 0xC5, 0x90, 
   0x70, 0x7B, 0x4F, 0x41, 0x63, 0x09, 0x50, 0xB7, 0x27, 0x2E, 0x55, 0x79, 0x42, 0x60, 0x69, 0x7E, 
   0x94, 0x4D, 0x96, 0x5D, 0x46, 0x4B, 0x76, 0x4C, 0x5B, 0xE8, 0x63, 0x6A, 0x91, 0x68, 0x47, 0x4B, 
   0x6C, 0x42, 0x78, 0x09, 0x4E, 0x79, 0x36, 0x5A, 0x85, 0x70, 0x66, 0x8B, 0x2D, 0x3A, 0x4D, 0x50, 
   0x7F, 0x6C, 0x72, 0x8F, 0xC3, 0x3E, 0x5A, 0xA2, 0x26, 0x14, 0x84, 0x37, 0x0A, 0x70, 0x44, 0x8A, 
   0x59, 0x51, 0xAE, 0x77, 0x68, 0x62, 0xCC, 0x4B, 0x26, 0x60, 0x33, 0x15, 0x28, 0x2D, 0x88, 0xBE, 
   0x67, 0x89, 0xE6, 0x51, 0x44, 0x62, 0x40, 0x27, 0x17, 0x61, 0x4B, 0x9C, 0x49, 0xA2, 0xFF, 0x05, 
   0x7F, 0x06, 0x29, 0x00, 0x00, 0x9D, 0x41, 0xFF, 0x81, 0xCC, 0xFF, 0x35, 0x88, 0x21, 0x11, 0x1A, 
   0x22, 0x3F, 0x51, 0xA5, 0x7E, 0x73, 0xA6, 0x35, 0x6C, 0x6D, 0x57, 0x1C, 0x4C, 0x67, 0x3F, 0xB4, 
   0x28, 0xB1, 0xDB, 0x4E, 0x4A, 0x72, 0x2D, 0x00, 0x21, 0x41, 0x76, 0x67, 0xA2, 0xCD, 0xD0, 0x68, 
   0x8E, 0xCB, 0x00, 0x30, 0x84, 0x33, 0x12, 0x1C, 0x73, 0x58, 0x50, 0x6F, 0xB4, 0xF2, 0x51, 0x96, 
   0xAF, 0x4A, 0x00, 0x6E, 0x48, 0x20, 0x76, 0x09, 0x82, 0x32, 0x34, 0x4C, 0x73, 0x91, 0x6A, 0xED, 
   0x90, 0x9C, 0xC3, 0x16, 0x40, 0x1C, 0x00, 0x0E, 0x49, 0x84, 0x9D, 0xC8, 0x8F, 0xA3, 0xB2, 0x09, 
   0x50, 0x77, 0x00, 0x03, 0x53, 0x40, 0x00, 0x29, 0xC1, 0xC3, 0xA1, 0x93, 0xFE, 0xFF, 0x12, 0x2A, 
   0x6A, 0x00, 0x00, 0x00, 0x5E, 0x9B, 0xC6, 0xD3, 0xAD, 0xFF, 0x66, 0x50, 0x6F, 0x00, 0x0A, 0x00, 
   0x00, 0x1E, 0x91, 0x55, 0xA0, 0xE4, 0xFF, 0xFF, 0xD3, 0x77, 0x4C, 0x6E, 0x00, 0x00, 0x17, 0x00, 
   0x5F, 0x69, 0x99, 0xB2, 0xFF, 0xC9, 0x74, 0xBB, 0x60, 0x78, 0x46, 0x00, 0x32, 0x45, 0x2E, 0x11, 
   0x8C, 0x52, 0x96, 0xBD, 0x66, 0xD0, 0xDF, 0x8D, 0x57, 0xA2, 0x36, 0x10, 0x05, 0x07, 0x5F, 0x45, 
   0x62, 0x9D, 0xF8, 0x73, 0x57, 0xD1, 0x40, 0x1C, 0x6C, 0x17, 0x5B, 0x26, 0x62, 0x6E, 0x5D, 0x79, 
   0x76, 0xFA, 0x3F, 0x6F, 0xD3, 0x27, 0x3B, 0x48, 0x38, 0x4B, 0x52, 0x7D, 0x5E, 0xBE, 0x44, 0x6B, 
   0x9C, 0x33, 0x82, 0x3C, 0x34, 0x70, 0xA3, 0x68, 0x58, 0xEC, 0x95, 0x73, 0x6D, 0x54, 0x4F, 0x54, 
   0x00, 0x26, 0xB4, 0x1A, 0x5A, 0x65, 0x89, 0x77, 0x60, 0x8B, 0x55, 0xD2, 0x57, 0x2E, 0x88, 0x00, 
   0x79, 0x27, 0x2C, 0xA7, 0xA0, 0x92, 0x61, 0xBD, 0x3B, 0x15, 0x83, 0x00, 0x1A, 0x49, 0x25, 0x5C, 
   0x6D, 0x7E, 0xA3, 0xBB, 0x80, 0x70, 0xB7, 0x4C, 0x5E, 0x9A, 0x28, 0x5C, 0x8C, 0x28, 0x17, 0x52, 
   0x41, 0x2F, 0x6F, 0x87, 0x9D, 0xBB, 0x7B, 0x8E, 0xAA, 0x18, 0x3E, 0x71, 0x34, 0x4E, 0x99, 0x5C, 
   0x82, 0x9E, 0x47, 0x3F, 0x7C, 0x70, 0x6D, 0x99, 0x64, 0x73, 0xAF, 0x1F, 0x57, 0x80, 0x5C, 0x7D, 
   0x73, 0x56, 0x5F, 0x83, 0x22, 0x1A, 0x8A, 0x35, 0x4E, 0x80, 0x75, 0x9A, 0xA3, 0x97, 0xA5, 0xAE, 
   0x35, 0x36, 0x79, 0x00, 0x00, 0x40, 0x5E, 0x79, 0x8C, 0x5C, 0xCC, 0xB6, 0x5D, 0x6B, 0xA7, 0x7E, 
   0x4D, 0x96, 0x27, 0x4C, 0x91, 0x00, 0x47, 0x8B, 0x85, 0xA9, 0xB8, 0xE0, 0x8B, 0xB1, 0x43, 0x3F, 
   0x6F, 0x00, 0x53, 0x89, 0x2B, 0x57, 0x98, 0x5B, 0x14, 0x38, 0x4D, 0x71, 0x8E, 0x5A, 0x90, 0xB2, 
   0x66, 0x5D, 0x7B, 0x49, 0x68, 0x9E, 0x44, 0x6E, 0xC6, 0x66, 0x57, 0x85, 0x4E, 0x62, 0x4A, 0x19, 
   0x62, 0x6C, 0x47, 0x67, 0xB8, 0x6A, 0x50, 0x8C, 0x3D, 0x50, 0x86, 0x39, 0x6E, 0xA2, 0x73, 0x64, 
   0x84, 0x6D, 0x8B, 0x7E, 0x5B, 0x7E, 0x89, 0x42, 0x4E, 0x9F, 0x2A, 0x25, 0x66, 0x3B, 0x58, 0x7D, 
   0x4E, 0x7C, 0xAB, 0x7C, 0x6C, 0x8E, 0x7A, 0x5A, 0x82, 0x00, 0x38, 0x77, 0x08, 0x62, 0x7F, 0x8E, 
   0x75, 0x92, 0xA1, 0x82, 0xC6, 0x3E, 0x71, 0x76, 0x25, 0x68, 0x76, 0x46, 0x70, 0xDB, 0x41, 0x3B, 
   0x8E, 0x3C, 0x00, 0x04, 0x28, 0x62, 0x78, 0x76, 0xB6, 0xEE, 0xA5, 0x79, 0xA6, 0x4E, 0x25, 0x5B, 
   0x00, 0x4A, 0x79, 0x5E, 0xA9, 0xA9, 0xBE, 0xBB, 0x8F, 0xAD, 0x9C, 0xDA, 0x20, 0x26, 0xB0, 0x00, 
   0x07, 0x47, 0x57, 0x7A, 0x47, 0x76, 0xAF, 0xB0, 0x78, 0x5F, 0xBA, 0x46, 0x05, 0xB6, 0x57, 0x9B, 
   0xDD, 0xA0, 0xE0, 0x8A, 0x6F, 0x4A, 0x64, 0x05, 0x3C, 0x84, 0x26, 0x74, 0x79, 0x82, 0x7F, 0x7B, 
   0x7C, 0x72, 0xC1, 0x00, 0x00, 0x8A, 0x10, 0x4F, 0x7B, 0xEE, 0xFE, 0xE3, 0xCC, 0x93, 0xC0, 0x1C, 
   0x2E, 0x5E, 0x44, 0x5E, 0xB6, 0x5D, 0x6D, 0xD4, 0x1C, 0x6B, 0x47, 0x06, 0x4E, 0x2E, 0x6B, 0x27, 
   0x90, 0xCE, 0x74, 0xBB, 0x7D, 0xC5, 0x9A, 0x00, 0x5E, 0x46, 0x15, 0x4B, 0x98, 0x91, 0x74, 0xDA, 
   0x9F, 0x7B, 0x9C, 0x45, 0x6B, 0x7F, 0x4F, 0x74, 0x82, 0x4F, 0x7A, 0x7D, 0x44, 0x63, 0x8E, 0x55, 
   0x3B, 0xAB, 0x5B, 0x7F, 0x7D, 0x4F, 0x8F, 0x7C, 0x53, 0x4D, 0xA8, 0x30, 0x1D, 0x73, 0x3C, 0x4B, 
   0x62, 0x81, 0x86, 0x9B, 0x6A, 0x77, 0x95, 0x20, 0x29, 0x41, 0x47, 0x5E, 0x92, 0x65, 0xC5, 0xBB, 
   0x39, 0x74, 0x88, 0x88, 0x3E, 0x80, 0x69, 0x68, 0x9B, 0x00, 0x4F, 0x6C, 0x44, 0x31, 0x8D, 0x89, 
   0x80, 0x90, 0x44, 0x7E, 0x50, 0x0A, 0x00, 0x3F, 0x4F, 0x19, 0xB9, 0x41, 0xA7, 0xAF, 0x5F, 0x8F, 
   0x3E, 0x87, 0x88, 0xA4, 0x57, 0x78, 0xDB, 0x05, 0x00, 0x23, 0x27, 0x24, 0x2E, 0x6D, 0x97, 0xDA, 
   0x79, 0x70, 0xB8, 0x44, 0x57, 0x4F, 0x1B, 0x43, 0x3C, 0x27, 0x21, 0x61, 0x5C, 0x4C, 0xC0, 0x74, 
   0x94, 0x9B, 0x4C, 0x8F, 0x88, 0x60, 0x81, 0xCD, 0x30, 0x33, 0x3F, 0x00, 0x00, 0x00, 0x4B, 0x25, 
   0x7E, 0xC0, 0xC4, 0xFF, 0x65, 0xCA, 0xB1, 0x0D, 0x28, 0x00, 0x40, 0x04, 0x69, 0x63, 0x72, 0xFF, 
   0x5D, 0xA6, 0x99, 0x71, 0x60, 0x4C, 0x00, 0x19, 0x51, 0x00, 0x00, 0x6F, 0x71, 0xB7, 0xD7, 0x9B, 
   0xB8, 0x93, 0x4A, 0x22, 0x2D, 0x1A, 0x20, 0xB6, 0x14, 0x5A, 0xB1, 0x66, 0x6D, 0x4A, 0x7F, 0x5F, 
   0x78, 0x4D, 0x99, 0xB7, 0x4C, 0x97, 0x7E, 0x50, 0x2D, 0x6C, 0x38, 0x2A, 0x82, 0x27, 0x30, 0x71, 
   0x29, 0x77, 0x89, 0x91, 0x7A, 0x96, 0x85, 0x6F, 0xA8, 0x1C, 0x56, 0xB1, 0x09, 0x2D, 0x1C, 0x55, 
   0x33, 0x40, 0x58, 0x4D, 0xC7, 0x5A, 0x84, 0xCB, 0xA9, 0x91, 0xBA, 0x24, 0x89, 0x9F, 0x00, 0x1B, 
   0x35, 0x74, 0x2B, 0x4B, 0x8C, 0xBE, 0xD4, 0x5C, 0x67, 0xA6, 0x09, 0x0E, 0x4E, 0x0E, 0x24, 0x48, 
   0x64, 0x54, 0x88, 0x2E, 0x6A, 0xA8, 0x37, 0x90, 0x8D, 0xA9, 0xAC, 0x93, 0x51, 0x5F, 0xAD, 0x00, 
   0x00, 0x78, 0x3E, 0x46, 0x33, 0x5C, 0xAF, 0xB1, 0x59, 0x7C, 0x91, 0x86, 0x57, 0x5A, 0x4A, 0x2D, 
   0xE2, 0x03, 0x38, 0xBD, 0x25, 0x72, 0x20, 0x65, 0x5D, 0x37, 0x5C, 0x69, 0xB3, 0x30, 0x41, 0xC2, 
   0x64, 0x5E, 0xB0, 0x90, 0x85, 0xB2, 0x21, 0x52, 0x2B, 0x00, 0x30, 0x36, 0x9F, 0x8B, 0xD2, 0x83, 
   0x8B, 0xBC, 0x00, 0x1E, 0x43, 0x37, 0x6D, 0x70, 0x8E, 0x7F, 0x7D, 0x28, 0x08, 0x53, 0x00, 0x33, 
   0x85, 0x82, 0x9E, 0xC2, 0xCF, 0xBD, 0xBF, 0x3A, 0x7D, 0xAC, 0x2F, 0x39, 0x8C, 0x16, 0x0F, 0x3E, 
   0x18, 0x0B, 0x45, 0x77, 0xC5, 0xBF, 0xC3, 0xE3, 0xE3, 0x5F, 0x40, 0x92, 0x00, 0x00, 0x51, 0x12, 
   0x5F, 0x6C, 0x8C, 0x9F, 0x9B, 0x83, 0x45, 0x86, 0x49, 0x56, 0x7C, 0x3B, 0x7D, 0xC0, 0x29, 0x61, 
   0x97, 0x40, 0x4A, 0x4B, 0x47, 0x61, 0x6E, 0x4F, 0x62, 0xBB, 0x98, 0x73, 0xDD, 0x52, 0x78, 0x6E, 
   0x01, 0x4E, 0x3F, 0x45, 0x3C, 0x8F, 0x95, 0x8A, 0xC8, 0x39, 0x50, 0x6C, 0x00, 0x06, 0x45, 0x57, 
   0x53, 0x86, 0xA7, 0xCC, 0xDE, 0x4F, 0xB3, 0xBB, 0x00, 0x00, 0x5D, 0x04, 0x00, 0x45, 0x6D, 0xBA, 
   0x90, 0x91, 0xC8, 0xD0, 0x57, 0x4E, 0x85, 0x06, 0x18, 0x51, 0x3F, 0x33, 0x84, 0x8F, 0x78, 0xC9, 
   0x60, 0x8F, 0xB1, 0x00, 0x49, 0x64, 0x1A, 0x20, 0x4B, 0x66, 0x4E, 0x5D, 0x73, 0x6C, 0xBB, 0x4B, 
   0x79, 0xB8, 0x2E, 0x52, 0x5E, 0x6D, 0x4B, 0xAD, 0x8D, 0x72, 0xC2, 0x29, 0x5F, 0x53, 0x00, 0x26, 
   0x37, 0x31, 0x3F, 0x8F, 0x90, 0x86, 0xC6, 0x7B, 0xA4, 0xB5, 0x46, 0x63, 0x64, 0x28, 0x27, 0x63, 
   0x33, 0x16, 0xA2, 0x35, 0x62, 0x8C, 0x5F, 0x83, 0x7C, 0x7D, 0x85, 0xAB, 0x75, 0x6D, 0xA0, 0x12, 
   0x37, 0x82, 0x1C, 0x3C, 0x8B, 0x40, 0x33, 0x52, 0x75, 0xA1, 0x76, 0x75, 0x96, 0xE9, 0x2F, 0x56, 
   0xBA, 0x1D, 0x2C, 0x34, 0x3A, 0x60, 0x5C, 0x96, 0xB0, 0xD4, 0x6E, 0x64, 0x96, 0x00, 0x13, 0x46, 
   0x2F, 0x26, 0x8B, 0x9D, 0xA6, 0xAF, 0x49, 0x80, 0x83, 0x17, 0x3C, 0x83, 0x56, 0x59, 0x94, 0x90, 
   0x81, 0x95, 0x62, 0x75, 0x9C, 0x27, 0x57, 0xA1, 0x37, 0x34, 0xAB, 0x38, 0x62, 0x8D, 0x82, 0xA6, 
   0x79, 0x75, 0x4F, 0x5C, 0x00, 0x27, 0x79, 0x23, 0x71, 0xC9, 0x69, 0x67, 0x85, 0x5A, 0x57, 0x52, 
   0x4F, 0x6E, 0xA7, 0x5A, 0x6E, 0x8C, 0x38, 0x57, 0x91, 0x39, 0x41, 0x8B, 0x83, 0x75, 0x79, 0x6B, 
   0xA2, 0x96, 0x2B, 0x50, 0x96, 0x2A, 0x10, 0x84, 0x42, 0x55, 0x74, 0x3F, 0x7A, 0x86, 0x75, 0x81, 
   0xD6, 0xB2, 0x86, 0xAD, 0x3D, 0x56, 0x4F, 0x00, 0x37, 0x43, 0x59, 0x48, 0xB0, 0x89, 0x60, 0x96, 
   0x61, 0x78, 0x9B, 0x7B, 0x8E, 0xAA, 0x2D, 0x53, 0x47, 0x00, 0x00, 0x4E, 0x3B, 0x45, 0xA6, 0xB2, 
   0xB0, 0x99, 0x81, 0xB8, 0xA0, 0x4A, 0x60, 0xC1, 0x2F, 0x40, 0x8C, 0x00, 0x54, 0x3F, 0x48, 0x42, 
   0x7D, 0xAC, 0x55, 0xA5, 0x6D, 0x73, 0x7F, 0x00, 0x54, 0x59, 0x1C, 0x37, 0x8A, 0xF2, 0xBF, 0xC1, 
   0xB9, 0xFD, 0xE3, 0x00, 0x42, 0x95, 0x1B, 0x00, 0x26, 0x6E, 0x28, 0x2D, 0x5B, 0xA5, 0xD7, 0xA5, 
   0xB8, 0xCF, 0x70, 0xB0, 0xAC, 0x17, 0x23, 0x66, 0x00, 0x00, 0x5C, 0x83, 0x97, 0xE1, 0xE7, 0xBD, 
   0xE7, 0x73, 0x68, 0x7C, 0x18, 0x77, 0x4F, 0x0A, 0x42, 0x60, 0x55, 0x4D, 0x7A, 0x79, 0x97, 0xD2, 
   0x21, 0x21, 0x8B, 0x7E, 0x79, 0x86, 0xCD, 0xEB, 0xF2, 0x25, 0x4F, 0x8A, 0x00, 0x29, 0x32, 0x65, 
   0x66, 0xB4, 0x8E, 0x50, 0xB4, 0x4F, 0x68, 0x91, 0x60, 0x90, 0xA5, 0x42, 0x8A, 0x91, 0x52, 0x6A, 
   0x6D, 0x56, 0x3A, 0x72, 0x0D, 0x03, 0x41, 0x32, 0x79, 0x96, 0x96, 0xB5, 0xEA, 0x81, 0x71, 0xBE, 
   0x16, 0x5F, 0x62, 0x93, 0x5E, 0x94, 0x54, 0x7A, 0x98, 0x5A, 0x8A, 0xA9, 0x32, 0x2F, 0x4E, 0x55, 
   0x5D, 0x6B, 0x72, 0xA2, 0xD8, 0x5F, 0xB2, 0x8D, 0x30, 0x53, 0x64, 0x14, 0x00, 0x90, 0x70, 0x3F, 
   0x8F, 0x66, 0x8C, 0x4B, 0x3E, 0x56, 0x6F, 0x65, 0x5D, 0xD7, 0x4D, 0xAD, 0x9E, 0x24, 0x6D, 0x5D, 
   0x46, 0x31, 0x67, 0x37, 0x35, 0x84, 0x76, 0x58, 0x95, 0x7C, 0x8D, 0x84, 0x2B, 0x8C, 0x83, 0x45, 
   0x5B, 0x60, 0x55, 0x2A, 0x8D, 0x2C, 0x44, 0xAE, 0x33, 0x56, 0x7E, 0x6D, 0x30, 0x48, 0x4C, 0x3F, 
   0x44, 0x3B, 0x99, 0x76, 0x6F, 0xB6, 0xFB, 0x68, 0x84, 0xDD, 0x1D, 0x00, 0x0C, 0x3E, 0x2F, 0x37, 
   0x65, 0xAD, 0xC5, 0x38, 0x74, 0x72, 0x2D, 0x2D, 0x67, 0x78, 0x20, 0x73, 0x40, 0x22, 0x49, 0x2A, 
   0x76, 0xF0, 0x85, 0xB2, 0xFF, 0x72, 0x89, 0x10, 0x1A, 0x18, 0x1D, 0x0D, 0x1C, 0x73, 0x37, 0x4B, 
   0x6D, 0x5D, 0x5F, 0xD7, 0x8C, 0x95, 0xC7, 0x52, 0x73, 0x42, 0x1E, 0x2F, 0x3C, 0x35, 0x6E, 0x9E, 
   0x7A, 0x9C, 0xD3, 0x5D, 0x6D, 0x77, 0x44, 0x05, 0x2B, 0x15, 0x65, 0x86, 0x59, 0x71, 0x9E, 0x6B, 
   0x5F, 0x87, 0x37, 0x53, 0x75, 0x20, 0x27, 0x53, 0x49, 0x74, 0x82, 0x4B, 0x92, 0x95, 0x58, 0x54, 
   0xB3, 0x74, 0x4D, 0x96, 0x2A, 0x5E, 0x5D, 0x45, 0x9A, 0x95, 0x56, 0x4E, 0xB5, 0x39, 0x02, 0x36, 
   0x4B, 0x16, 0x15, 0x5C, 0xB4, 0xC3, 0x6D, 0xDE, 0xFF, 0x33, 0x57, 0x22, 0x11, 0x00, 0x00, 0x57, 
   0x0D, 0xE3, 0x8B, 0xCD, 0xFF, 0x41, 0x97, 0x3C, 0x02, 0x36, 0x34, 0x59, 0x3A, 0xCE, 0x8D, 0x9B, 
   0xC7, 0x32, 0x94, 0x64, 0x64, 0x2B, 0x4B, 0x78, 0x50, 0xB0, 0x2A, 0x7B, 0xB9, 0x01, 0x2F, 0x28, 
   0x20, 0x00, 0x03, 0x59, 0x71, 0xA9, 0xC7, 0xFF, 0xFF, 0x65, 0x90, 0xD3, 0x00, 0x00, 0x29, 0x3E, 
   0x27, 0x2B, 0x67, 0x4C, 0x7C, 0x58, 0xAA, 0xAD, 0x6F, 0xBA, 0xC0, 0x57, 0x06, 0x86, 0x2C, 0x00, 
   0x67, 0x25, 0xA0, 0x61, 0x26, 0x7A, 0x78, 0x61, 0x4D, 0x9B, 0x73, 0x6F, 0x8B, 0x41, 0x69, 0x7C, 
   0x36, 0x30, 0x9F, 0x7A, 0x63, 0xC5, 0x72, 0xB2, 0x93, 0x20, 0x45, 0x29, 0x00, 0x00, 0x3B, 0x7E, 
   0x5F, 0x93, 0xC8, 0xDE, 0xC2, 0x25, 0x90, 0xAF, 0x00, 0x00, 0x2F, 0x00, 0x00, 0x00, 0x98, 0x87, 
   0xB8, 0xC5, 0xDE, 0xFF, 0x5E, 0x91, 0xA9, 0x48, 0x67, 0x3A, 0x00, 0x3C, 0xA4, 0x30, 0x5D, 0xBE, 
   0xC0, 0x9A, 0x6C, 0x74, 0x3D, 0x38, 0x00, 0x00, 0x6D, 0x36, 0x8F, 0xDD, 0xCC, 0xD9, 0xED, 0x70, 
   0x33, 0x67, 0x00, 0x09, 0x00, 0x23, 0x9D, 0x6E, 0x75, 0x4B, 0xFF, 0x93, 0x68, 0xE5, 0x47, 0xB6, 
   0x7A, 0x1E, 0x31, 0x37, 0x40, 0x00, 0x16, 0x52, 0x7D, 0xA9, 0x5A, 0xE1, 0xFF, 0x7C, 0x5D, 0xBB, 
   0x52, 0x28, 0x11, 0x07, 0x7B, 0x38, 0x4B, 0x75, 0xA1, 0x67, 0x3B, 0xD5, 0x4B, 0x4B, 0x9B, 0x2E, 
   0x57, 0x34, 0x6D, 0x80, 0x69, 0x6C, 0x6E, 0xF3, 0x37, 0x3F, 0xB3, 0x15, 0x39, 0x2F, 0x56, 0x46, 
   0x8A, 0x91, 0x86, 0xDA, 0x63, 0x81, 0x8F, 0x33, 0x57, 0x1D, 0x05, 0x34, 0x96, 0x4B, 0x57, 0xD0, 
   0xA1, 0xA7, 0x9B, 0x71, 0x6C, 0x97, 0x00, 0x1A, 0x61, 0x19, 0x37, 0x1D, 0x6C, 0x88, 0x81, 0x7A, 
   0x5C, 0xF2, 0x7A, 0x40, 0xBA, 0x29, 0x6E, 0x5D, 0x33, 0x8B, 0x82, 0x7B, 0x67, 0xA3, 0x35, 0x2C, 
   0x75, 0x00, 0x2C, 0x53, 0x26, 0x61, 0x7D, 0x8A, 0x8C, 0xA2, 0x92, 0x70, 0x99, 0x51, 0x69, 0xC0, 
   0x21, 0x5B, 0x80, 0x0B, 0x00, 0x3B, 0x4E, 0x54, 0x81, 0xB7, 0xD5, 0xBD, 0x72, 0x91, 0xCE, 0x2F, 
   0x2D, 0x82, 0x10, 0x26, 0x5D, 0x1C, 0x6B, 0x6D, 0x63, 0x6D, 0x91, 0x97, 0x89, 0xB0, 0x47, 0x4B, 
   0xAA, 0x19, 0x45, 0x81, 0x85, 0x94, 0x84, 0x5C, 0x7B, 0x83, 0x06, 0x12, 0x72, 0x17, 0x02, 0x73, 
   0x69, 0x83, 0x76, 0x66, 0xB4, 0xC2, 0x67, 0x75, 0xCE, 0x67, 0x1F, 0x61, 0x33, 0x4D, 0x6B, 0x29, 
   0x93, 0x8E, 0xA2, 0x9E, 0xB1, 0xB6, 0x5C, 0xB0, 0x00, 0x10, 0x6A, 0x00, 0x54, 0x74, 0x7C, 0x78, 
   0x90, 0xA7, 0x68, 0x6A, 0x68, 0x69, 0x9E, 0x1B, 0x86, 0xAA, 0x42, 0x63, 0xA4, 0x5E, 0x45, 0x75, 
   0x4E, 0x6D, 0x7F, 0x43, 0x62, 0x9A, 0x54, 0x41, 0x6D, 0x4A, 0x70, 0x80, 0x62, 0x93, 0xBF, 0x7E, 
   0x70, 0xAE, 0x4E, 0x5C, 0x68, 0x02, 0x55, 0x67, 0x2C, 0x44, 0x8A, 0x8F, 0x68, 0x97, 0x7F, 0xAD, 
   0xA3, 0x39, 0x51, 0xAD, 0x21, 0x3F, 0x67, 0x5A, 0x66, 0x66, 0x3F, 0x72, 0x8F, 0x79, 0x6D, 0xC9, 
   0x99, 0x6C, 0xAC, 0x13, 0x59, 0x54, 0x00, 0x2B, 0x64, 0x62, 0x60, 0x7C, 0x6A, 0x63, 0x7F, 0x3F, 
   0x71, 0xA9, 0x79, 0x89, 0xAB, 0x78, 0x8D, 0x9A, 0x10, 0x4C, 0xAE, 0x3D, 0x17, 0x3A, 0x5C, 0x5C, 
   0x56, 0x6E, 0xBE, 0xE6, 0x62, 0x3B, 0x91, 0x29, 0x00, 0x2C, 0x1B, 0x88, 0x86, 0x75, 0xFF, 0xFF, 
   0xEE, 0xC3, 0xD8, 0x70, 0x32, 0x71, 0x00, 0x00, 0x39, 0x00, 0x00, 0x3A, 0xE3, 0xD8, 0x74, 0xE7, 
   0xFF, 0xFF, 0x66, 0x61, 0xED, 0x00, 0x00, 0x3A, 0x16, 0x60, 0x6A, 0x86, 0x96, 0x9E, 0xA4, 0x5F, 
   0xA3, 0x5F, 0x6B, 0xA7, 0x20, 0x66, 0x61, 0x7A, 0x9F, 0x45, 0x5D, 0x77, 0xAE, 0x00, 0x00, 0xA1, 
   0x75, 0x87, 0x92, 0xFF, 0xFF, 0xE1, 0x8D, 0x7E, 0x95, 0x00, 0x1C, 0x5E, 0x00, 0x23, 0x89, 0x3E, 
   0x3A, 0x88, 0x48, 0x65, 0x66, 0x57, 0x6D, 0x9B, 0xA3, 0x75, 0xB8, 0xB7, 0xAD, 0xCD, 0x2E, 0x80, 
   0x84, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x62, 0xAB, 0x9A, 0xFC, 0xAF, 0xBC, 0xA5, 0x3D, 0x8F, 0x8A, 
   0x31, 0x54, 0xC2, 0x76, 0x30, 0x6C, 0x43, 0x44, 0x7F, 0x3D, 0x34, 0x7A, 0x54, 0x73, 0x86, 0x60, 
   0x8A, 0x8C, 0x5A, 0x5B, 0x81, 0x3C, 0x4E, 0xAE, 0x3C, 0x5F, 0x80, 0x75, 0x75, 0x85, 0x43, 0x4C, 
   0x79, 0x2D, 0x0F, 0x63, 0x77, 0x78, 0x8C, 0x66, 0xC3, 0xCC, 0x42, 0x88, 0x9D, 0x40, 0x1E, 0x56, 
   0x39, 0x33, 0x6B, 0x35, 0x68, 0x77, 0x2D, 0x49, 0x84, 0xB1, 0xA0, 0xA7, 0x82, 0xBC, 0x7F, 0x08, 
   0x30, 0x7F, 0x28, 0x21, 0xC3, 0x66, 0x7F, 0xCB, 0x4A, 0x5B, 0x43, 0x49, 0x0A, 0x01, 0x4E, 0x1E, 
   0x80, 0x1D, 0x62, 0xA1, 0x47, 0xBC, 0x61, 0x98, 0xA5, 0xE4, 0x7F, 0x7E, 0xE6, 0x1B, 0x00, 0x00, 
   0x00, 0x1D, 0x00, 0x65, 0x9B, 0xD2, 0x7E, 0x6E, 0xDC, 0x4C, 0x50, 0x59, 0x40, 0x44, 0x7A, 0x50, 
   0x35, 0xA7, 0x4B, 0x7C, 0x8F, 0x50, 0x67, 0x44, 0x55, 0x5B, 0x50, 0x42, 0x75, 0xD3, 0x36, 0x4B, 
   0xC1, 0x10, 0x05, 0x00, 0x62, 0x18, 0x6E, 0x8B, 0x89, 0xFF, 0x4D, 0xBF, 0x88, 0x35, 0x4D, 0x09, 
   0x35, 0x1E, 0x82, 0x59, 0x53, 0xD5, 0x87, 0xC5, 0xB8, 0x89, 0x7E, 0x6C, 0x03, 0x0D, 0x42, 0x00, 
   0x00, 0x91, 0x4D, 0x59, 0xAD, 0x7D, 0x9B, 0x40, 0x5C, 0x60, 0x3D, 0x40, 0x77, 0xE4, 0x45, 0x86, 
   0x96, 0x51, 0x2A, 0x47, 0x63, 0x46, 0xB9, 0x36, 0x68, 0xA8, 0x41, 0x73, 0x56, 0x68, 0x5B, 0x65, 
   0x72, 0x22, 0x87, 0x15, 0x6D, 0xA3, 0x10, 0x9C, 0x32, 0x62, 0x53, 0x63, 0x86, 0x20, 0xE4, 0x42, 
   0x6C, 0xA2, 0x51, 0x63, 0x69, 0x34, 0x86, 0xB1, 0x0D, 0x6F, 0x67, 0x66, 0x36, 0x62, 0xAC, 0x91, 
   0xE6, 0x66, 0xB2, 0xC7, 0x18, 0x32, 0x40, 0x32, 0x3F, 0x5E, 0x5E, 0x71, 0x8A, 0x14, 0x28, 0x5D, 
   0x07, 0x3C, 0x4E, 0xA3, 0x99, 0x80, 0x8D, 0x83, 0xE9, 0x20, 0x49, 0xAA, 0x3A, 0x53, 0x4C, 0x57, 
   0x53, 0x4A, 0x4C, 0x7A, 0x9F, 0x57, 0x74, 0x7F, 0x56, 0x2F, 0xA8, 0x33, 0x68, 0xC8, 0x38, 0x6E, 
   0x11, 0x4A, 0x3C, 0x4B, 0x66, 0x75, 0xE1, 0x3F, 0x81, 0xAE, 0x29, 0x5F, 0x58, 0x73, 0x53, 0x68, 
   0x57, 0x74, 0x8B, 0x1E, 0x4B, 0x92, 0x72, 0x4A, 0xB2, 0x66, 0x72, 0x91, 0x11, 0x19, 0x0E, 0x39, 
   0x60, 0x70, 0xB0, 0xF4, 0xFF, 0x41, 0x5D, 0x76, 0x00, 0x00, 0x00, 0x38, 0x3D, 0x83, 0xC6, 0x6A, 
   0xB0, 0x7F, 0x6F, 0x82, 0x39, 0x99, 0xBD, 0x2C, 0x46, 0xB7, 0x32, 0x69, 0x67, 0x8E, 0xD9, 0xB5, 
   0x92, 0x89, 0xC3, 0x0A, 0x00, 0x20, 0x00, 0x00, 0x1A, 0x40, 0x92, 0xC8, 0xC7, 0xBE, 0xDC, 0x99, 
   0x89, 0x85, 0x07, 0x1A, 0x3A, 0x00, 0x00, 0x84, 0x4B, 0xB0, 0xAF, 0x81, 0x9B, 0xB5, 0x71, 0x4A, 
   0x9C, 0x4D, 0x48, 0x4A, 0x29, 0x58, 0x77, 0x34, 0x4E, 0x90, 0x41, 0x67, 0x82, 0x5F, 0x7F, 0xD2, 
   0x98, 0x8A, 0xC5, 0x52, 0x44, 0x3B, 0x01, 0x2C, 0x5D, 0x3A, 0x6B, 0xB9, 0x90, 0xA3, 0xB9, 0x4A, 
   0x61, 0x95, 0x04, 0x04, 0x44, 0x32, 0x28, 0x61, 0x72, 0xD0, 0xB9, 0x72, 0xA2, 0xD5, 0x16, 0x00, 
   0x83, 0x33, 0x10, 0x1B, 0x6D, 0x84, 0x7E, 0x62, 0x81, 0xDB, 0x39, 0x6A, 0x97, 0x12, 0x52, 0x68, 
   0x6E, 0x4B, 0x9F, 0x9B, 0x61, 0x87, 0x59, 0x77, 0x6F, 0x00, 0x5A, 0x8A, 0x1F, 0x26, 0x42, 0x7D, 
   0x49, 0x89, 0x7F, 0x8A, 0xF6, 0x3A, 0x5E, 0x95, 0x1D, 0x63, 0x2D, 0x56, 0x5D, 0x93, 0x93, 0x72, 
   0xD1, 0x25, 0x4E, 0x6F, 0x00, 0x1A, 0x24, 0x26, 0x2E, 0x55, 0x9B, 0x9D, 0xED, 0x7F, 0x9E, 0xC7, 
   0x18, 0x53, 0x59, 0x29, 0x29, 0x80, 0x63, 0x4C, 0x8C, 0x43, 0x5A, 0x99, 0x71, 0x90, 0xA5, 0x81, 
   0x8B, 0xA9, 0x24, 0x57, 0x6F, 0x33, 0x5A, 0x8B, 0x3E, 0x4D, 0x90, 0x1E, 0x15, 0x4D, 0x6A, 0x79, 
   0x88, 0x98, 0xCA, 0xFF, 0x3B, 0x78, 0x97, 0x06, 0x08, 0x3E, 0x2E, 0x30, 0x5B, 0x86, 0x7C, 0xA2, 
   0x6A, 0x8A, 0xB0, 0x21, 0x4D, 0x79, 0x5B, 0x5E, 0xAC, 0x83, 0x7B, 0xB1, 0x28, 0x59, 0x5A, 0x39, 
   0x64, 0x81, 0x77, 0x6F, 0x9C, 0x5A, 0x6E, 0x7F, 0x4C, 0x71, 0x7E, 0x0C, 0x20, 0x68, 0x00, 0x16, 
   0x76, 0x85, 0x86, 0xCD, 0xCC, 0xBB, 0xB2, 0x6F, 0x60, 0x62, 0x10, 0x64, 0x9F, 0x1F, 0x62, 0xD1, 
   0x58, 0x39, 0x68, 0x4E, 0x40, 0x49, 0x44, 0x80, 0x77, 0x67, 0x93, 0xB8, 0x5C, 0x65, 0xA8, 0x45, 
   0x4D, 0x8C, 0x55, 0x68, 0x79, 0x3E, 0x73, 0x73, 0x55, 0x62, 0x8F, 0x88, 0x5B, 0xAC, 0x4E, 0x4A, 
   0x73, 0x00, 0x4A, 0x5D, 0x55, 0x6D, 0xC9, 0x8B, 0x68, 0x90, 0x63, 0x7A, 0x73, 0x6C, 0x84, 0x94, 
   0x42, 0x4E, 0x7D, 0x02, 0x26, 0x7D, 0x59, 0x55, 0x8E, 0x8D, 0x9C, 0x9A, 0x5A, 0x86, 0x84, 0x1A, 
   0x41, 0x7A, 0x3D, 0x41, 0xB4, 0x46, 0x80, 0x8D, 0x64, 0x65, 0x6B, 0x76, 0x71, 0xBF, 0x63, 0x7C, 
   0x91, 0x2F, 0x48, 0x4D, 0x29, 0x32, 0x82, 0x91, 0x6E, 0xA7, 0x60, 0xBB, 0xB4, 0x22, 0x87, 0xA2, 
   0x72, 0x4B, 0xA0, 0x93, 0x4E, 0x92, 0x25, 0x30, 0x5D, 0x00, 0x5F, 0x5D, 0x78, 0x7F, 0x82, 0x9E, 
   0x7B, 0x98, 0x60, 0x60, 0xD5, 0x75, 0x8D, 0xF7, 0x62, 0x85, 0x8D, 0x3D, 0x2E, 0x4A, 0x00, 0x44, 
   0x64, 0x40, 0x57, 0x83, 0xBB, 0x77, 0x9D, 0x6D, 0x84, 0xBB, 0x00, 0x42, 0x7E, 0x5F, 0x6C, 0x69, 
   0xE2, 0xF0, 0xFF, 0x8A, 0x8C, 0xB8, 0x17, 0x31, 0x43, 0x33, 0x5E, 0x9B, 0x30, 0x39, 0xC0, 0x0A, 
   0x2E, 0x4D, 0x25, 0x7B, 0x53, 0x68, 0x83, 0x99, 0xC0, 0x84, 0xC2, 0x9B, 0x89, 0xD3, 0x12, 0x3C, 
   0x76, 0x00, 0x3A, 0x57, 0x4B, 0x68, 0x8B, 0x9A, 0x49, 0x99, 0x64, 0x69, 0x8A, 0x48, 0x99, 0xA9, 
   0x71, 0x93, 0xA4, 0x5B, 0x32, 0x82, 0x49, 0x50, 0x6D, 0x49, 0x40, 0x57, 0x54, 0x9B, 0xB8, 0x70, 
   0x8E, 0xAD, 0x2B, 0x30, 0x4C, 0x30, 0x02, 0x68, 0x75, 0x76, 0xBE, 0x54, 0xB1, 0x6F, 0x38, 0x5B, 
   0x59, 0x54, 0x38, 0xC0, 0x60, 0x7C, 0xA9, 0x4F, 0x8C, 0x58, 0x5E, 0x28, 0x84, 0x57, 0x3D, 0xA5, 
   0x17, 0x44, 0x60, 0x3A, 0x52, 0x6B, 0x75, 0x92, 0x88, 0x50, 0x6C, 0x7F, 0x77, 0x4A, 0x8C, 0x65, 
   0x82, 0xA9, 0x19, 0x80, 0xAC, 0x62, 0x49, 0x6F, 0x7C, 0x45, 0x4F, 0x03, 0x2C, 0x69, 0x08, 0x33, 
   0x75, 0x60, 0x52, 0x66, 0x5D, 0x56, 0x84, 0x70, 0x8D, 0x81, 0x7F, 0xAF, 0xD5, 0x33, 0x88, 0x8E, 
   0x09, 0x00, 0x0A, 0x49, 0x16, 0x55, 0x6D, 0x90, 0xBF, 0x4C, 0x86, 0xD2, 0x5C, 0x62, 0xB1, 0x4A, 
   0x16, 0x08, 0x1C, 0x0C, 0x00, 0x3F, 0x6B, 0xCF, 0x7E, 0xB9, 0xFF, 0x6D, 0x96, 0x8C, 0x32, 0x52, 
   0x3D, 0x2A, 0x00, 0x4C, 0x0F, 0x15, 0x3D, 0x4B, 0x3C, 0x9D, 0xA2, 0xBE, 0xFA, 0x4D, 0x81, 0x6B, 
   0x00, 0x00, 0x00, 0x69, 0x81, 0xCE, 0xA3, 0xCB, 0xFF, 0x5D, 0x62, 0x74, 0x1B, 0x09, 0x65, 0x00, 
   0x01, 0x74, 0x48, 0x4E, 0x5D, 0x72, 0x85, 0x8B, 0x68, 0xA4, 0xA8, 0x62, 0x54, 0x60, 0x28, 0x36, 
   0x6D, 0x1D, 0x8B, 0xA8, 0x5D, 0x5D, 0xA3, 0x87, 0x1E, 0x9D, 0x43, 0x6F, 0x47, 0x63, 0x98, 0xB3, 
   0x55, 0x8F, 0xFF, 0x0F, 0x09, 0x01, 0x10, 0x00, 0x00, 0x63, 0x70, 0xF9, 0x93, 0xEE, 0xFF, 0x75, 
   0x99, 0x6F, 0x00, 0x1F, 0x28, 0x23, 0x3A, 0xAB, 0x86, 0x86, 0xB7, 0x60, 0xA2, 0x73, 0x39, 0x35, 
   0x62, 0x97, 0x39, 0xD9, 0x50, 0xC6, 0xDA, 0x00, 0x47, 0x1A, 0x21, 0x00, 0x07, 0x52, 0x9A, 0xB5, 
   0xBA, 0xFF, 0xEC, 0x47, 0x42, 0x90, 0x00, 0x00, 0x06, 0x63, 0x46, 0x57, 0x8C, 0xC1, 0xFE, 0x53, 
   0xB1, 0xBA, 0x4C, 0x69, 0x41, 0x4A, 0x00, 0x88, 0x15, 0x00, 0x87, 0x27, 0x97, 0x38, 0x5C, 0xC7, 
   0x9B, 0x7F, 0x49, 0xBF, 0x57, 0x2A, 0x8C, 0x34, 0x69, 0x97, 0x3F, 0x6A, 0x96, 0x56, 0x6A, 0x7E, 
   0x5B, 0x69, 0x67, 0x4F, 0x7D, 0x95, 0x00, 0x00, 0x95, 0x57, 0x24, 0x62, 0xB7, 0xE8, 0xC7, 0x4E, 
   0xA3, 0x9C, 0x00, 0x00, 0x0D, 0x43, 0x2F, 0x4E, 0xB8, 0xBF, 0xF2, 0x69, 0x8D, 0xC6, 0x0D, 0x25, 
   0x53, 0x35, 0x25, 0x26, 0x47, 0x35, 0x8B, 0x28, 0x96, 0xD3, 0xB2, 0xED, 0xB7, 0xAB, 0x95, 0x83, 
   0x00, 0x29, 0x86, 0x00, 0x35, 0x9A, 0x6B, 0x6C, 0x92, 0x5B, 0x2F, 0x2B, 0x1F, 0x3D, 0x55, 0x6A, 
   0xB6, 0xC6, 0x9D, 0x83, 0xFF, 0x2E, 0x20, 0x6E, 0x00, 0x4D, 0x32, 0x40, 0x86, 0x7D, 0x87, 0x27, 
   0x91, 0x76, 0x71, 0xC6, 0x41, 0xA9, 0xB3, 0x1D, 0x36, 0x67, 0x39, 0x09, 0x44, 0x46, 0x7D, 0x6E, 
   0x4E, 0xB3, 0xD3, 0x7C, 0x58, 0xDF, 0x4E, 0x51, 0x70, 0x36, 0x8F, 0x40, 0x62, 0x81, 0x8A, 0x60, 
   0x3E, 0xCE, 0x0F, 0x00, 0x88, 0x10, 0x49, 0x1B, 0x84, 0x85, 0x83, 0x90, 0x97, 0xFC, 0x3E, 0x6C, 
   0x89, 0x00, 0x0F, 0x10, 0x2C, 0x22, 0x95, 0x6E, 0x97, 0xEC, 0x80, 0xA4, 0xA7, 0x5C, 0x58, 0x6B, 
   0x11, 0x23, 0x59, 0x28, 0x4A, 0x7C, 0x8F, 0x8F, 0xB0, 0x60, 0x61, 0xAB, 0x08, 0x38, 0x92, 0x13, 
   0x3D, 0x4C, 0x5A, 0x72, 0x52, 0x85, 0x84, 0xC6, 0x5D, 0x47, 0xA5, 0x2A, 0x63, 0x5B, 0x57, 0x7F, 
   0x9E, 0x88, 0x60, 0x92, 0x3C, 0x37, 0x59, 0x00, 0x21, 0x7C, 0x13, 0x6D, 0x9A, 0x4B, 0x70, 0x8C, 
   0xA3, 0x78, 0xB5, 0x70, 0x99, 0xB5, 0x1E, 0x52, 0x75, 0x22, 0x00, 0x7F, 0x2A, 0x2C, 0x6E, 0x82, 
   0xD0, 0x7B, 0xB6, 0xBA, 0xC0, 0x3B, 0x4B, 0x98, 0x00, 0x0F, 0x63, 0x16, 0x26, 0x80, 0x86, 0x94, 
   0xB4, 0x9E, 0xA0, 0xA4, 0x30, 0x38, 0x91, 0x08, 0x15, 0x5D, 0x64, 0x78, 0x74, 0x81, 0xA1, 0x98, 
   0x2C, 0x63, 0xAA, 0x42, 0x2F, 0x9F, 0x48, 0x69, 0x72, 0x2E, 0x93, 0xA0, 0x9A, 0x92, 0xD3, 0x71, 
   0x35, 0x8C, 0x02, 0x2E, 0x5B, 0x0D, 0x7E, 0x70, 0x92, 0x95, 0x7D, 0x88, 0x45, 0x7A, 0x16, 0x40, 
   0xA5, 0x0C, 0x6F, 0xAC, 0x81, 0x71, 0x96, 0xB5, 0x88, 0xB2, 0x69, 0x65, 0x78, 0x0F, 0x5D, 0x92, 
   0x1F, 0x51, 0x96, 0x59, 0x58, 0x61, 0x66, 0x80, 0x7D, 0x5B, 0x7B, 0x77, 0x44, 0x4D, 0x73, 0x2E, 
   0x68, 0xA2, 0x4C, 0x58, 0xA8, 0x9C, 0x69, 0xA2, 0x94, 0x8A, 0x78, 0x00, 0x55, 0x66, 0x00, 0x20, 
   0x66, 0x81, 0x60, 0x8F, 0x6E, 0x79, 0xA3, 0x64, 0x6F, 0xC5, 0xAC, 0x85, 0xA0, 0x15, 0x5B, 0x31, 
   0x00, 0x21, 0x65, 0x76, 0x4F, 0xB7, 0xA6, 0x73, 0xA2, 0x3A, 0x80, 0x8B, 0x48, 0x74, 0x84, 0x41, 
   0x5B, 0x78, 0x00, 0x38, 0x73, 0x4C, 0x35, 0x85, 0xBD, 0x7D, 0x99, 0x90, 0xCF, 0xB1, 0x32, 0x62, 
   0xA5, 0x2F, 0x1D, 0x4F, 0x29, 0x80, 0x68, 0x59, 0xF3, 0xFF, 0x9E, 0x6D, 0xC9, 0x69, 0x02, 0x2B, 
   0x00, 0x13, 0x40, 0x2D, 0x6C, 0x9D, 0xFF, 0xD0, 0xBC, 0x94, 0xB1, 0xBB, 0x00, 0x00, 0x63, 0x00, 
   0x00, 0x2B, 0xA1, 0xA7, 0x86, 0xC7, 0xFF, 0xFF, 0x91, 0x71, 0xE3, 0x00, 0x2E, 0x43, 0x00, 0x21, 
   0x0D, 0x49, 0x5C, 0x60, 0x99, 0x9D, 0xDD, 0x55, 0x19, 0xE7, 0x86, 0x7F, 0x7B, 0xF0, 0xFF, 0xB8, 
   0x68, 0x6C, 0x94, 0x00, 0x16, 0x65, 0x41, 0x6C, 0xB8, 0x73, 0x6A, 0xA5, 0x2E, 0x58, 0x42, 0x29, 
   0x68, 0x97, 0x6B, 0x47, 0xA8, 0x9A, 0x75, 0x7A, 0x5A, 0x75, 0x79, 0x20, 0x37, 0x4D, 0x49, 0x54, 
   0xAB, 0x8E, 0xAB, 0xFB, 0x6B, 0x77, 0x7B, 0x09, 0x4E, 0x29, 0x38, 0x26, 0x8B, 0x8B, 0x6D, 0x9F, 
   0x82, 0xA4, 0x86, 0x45, 0x78, 0xC0, 0x61, 0x7B, 0x85, 0x72, 0x96, 0x90, 0x53, 0x4F, 0x62, 0x1F, 
   0x35, 0x89, 0x46, 0x3A, 0x94, 0x58, 0x62, 0x78, 0x3C, 0x59, 0x57, 0x5A, 0x57, 0x92, 0x6B, 0x86, 
   0xB6, 0x54, 0xB2, 0xA4, 0x43, 0x58, 0x91, 0x59, 0x0A, 0x5B, 0x4D, 0x1F, 0x60, 0x3B, 0x65, 0x8E, 
   0x4C, 0x56, 0xAA, 0x4C, 0x6E, 0x77, 0x46, 0x6E, 0x55, 0x3B, 0x4C, 0x8A, 0x1B, 0x37, 0xC5, 0x89, 
   0x94, 0xBF, 0x82, 0xA5, 0x66, 0x24, 0x52, 0x3C, 0x2C, 0x2C, 0x96, 0x36, 0x57, 0xAC, 0x2B, 0x66, 
   0x66, 0x4E, 0x3E, 0x59, 0x71, 0x0C, 0xA2, 0x44, 0x66, 0x75, 0x12, 0x91, 0x1D, 0x73, 0x9C, 0xD1, 
   0x84, 0x65, 0xFF, 0x11, 0x00, 0x0E, 0x21, 0x2E, 0x3A, 0x83, 0x9C, 0xFF, 0x6D, 0x58, 0x76, 0x22, 
   0x50, 0x00, 0x38, 0x17, 0x42, 0x44, 0x47, 0xB9, 0x40, 0xB1, 0xF9, 0x73, 0x8B, 0x75, 0x56, 0x55, 
   0x2E, 0x42, 0x46, 0xAE, 0x13, 0x3F, 0x69, 0x26, 0x2E, 0x16, 0x57, 0x32, 0x97, 0x8C, 0x81, 0xEA, 
   0x5E, 0xB5, 0x9A, 0x35, 0x53, 0x21, 0x29, 0x18, 0x6D, 0x4C, 0x62, 0xE6, 0x6F, 0x97, 0xAC, 0x79, 
   0x5D, 0x1B, 0x0B, 0x2E, 0x4C, 0x27, 0x45, 0xA2, 0x71, 0x7F, 0xA2, 0x56, 0x69, 0x31, 0x3F, 0x4C, 
   0x77, 0x3F, 0x63, 0xD4, 0x2F, 0x58, 0x74, 0x6A, 0x42, 0x48, 0xA9, 0x5A, 0xE8, 0x35, 0x99, 0xE1, 
   0x00, 0x9B, 0x21, 0x4F, 0x00, 0x0F, 0x62, 0x00, 0xBC, 0x3B, 0x65, 0x9E, 0x4D, 0xE9, 0x6D, 0x5E, 
   0xB8, 0xBD, 0x53, 0x43, 0xA0, 0x31, 0x13, 0x39, 0x4E, 0x73, 0x94, 0x75, 0xA7, 0xC2, 0x4C, 0x50, 
   0x7D, 0x0C, 0x32, 0x70, 0x6C, 0x59, 0x9C, 0x2E, 0x5B, 0x89, 0x0F, 0x4D, 0x34, 0xAB, 0xA2, 0x85, 
   0x99, 0x8F, 0xF1, 0x0D, 0x3B, 0x8F, 0x11, 0x10, 0x20, 0x57, 0x3A, 0x60, 0x65, 0x92, 0xAE, 0x6A, 
   0xB4, 0xDE, 0x4C, 0x3B, 0xAE, 0x2D, 0x0C, 0x60, 0x27, 0x7E, 0x25, 0x3F, 0x53, 0x49, 0x8A, 0x71, 
   0xFC, 0x5D, 0xBB, 0xC4, 0x2A, 0x36, 0x41, 0x5C, 0x1E, 0x6E, 0x61, 0x74, 0xB7, 0x27, 0x80, 0x8F, 
   0x37, 0x73, 0x77, 0x55, 0x22, 0x7C, 0x4B, 0x28, 0x62, 0x5C, 0x7A, 0xAD, 0x78, 0xAE, 0xFB, 0x48, 
   0x67, 0x52, 0x00, 0x00, 0x00, 0x41, 0x41, 0x7D, 0xEF, 0xD4, 0xFF, 0x7C, 0xA7, 0xA1, 0x00, 0x48, 
   0x4E, 0x00, 0x00, 0x68, 0x36, 0x21, 0x65, 0xB1, 0xD7, 0x8B, 0x8F, 0xB0, 0xE2, 0x15, 0x1A, 0x88, 
   0x13, 0x51, 0x71, 0x7A, 0xB1, 0xDC, 0x7F, 0x6A, 0xA5, 0x33, 0x17, 0x19, 0x00, 0x22, 0x2C, 0x34, 
   0x53, 0xD5, 0x92, 0xC8, 0xFF, 0x92, 0xC7, 0xAD, 0x29, 0x0E, 0x2B, 0x00, 0x00, 0x09, 0x45, 0x9D, 
   0xB8, 0x8C, 0x9A, 0xFF, 0x6A, 0x3E, 0xA9, 0x46, 0x4D, 0x6C, 0x39, 0x5E, 0x59, 0x44, 0x2B, 0x39, 
   0x2A, 0x50, 0x93, 0x4F, 0x92, 0xFF, 0xB0, 0xA9, 0xC9, 0x75, 0x6D, 0x53, 0x00, 0x2A, 0x55, 0x27, 
   0x3F, 0x7D, 0x71, 0x83, 0xA5, 0x61, 0x72, 0xBB, 0x22, 0x22, 0x70, 0x4A, 0x50, 0x37, 0x71, 0x95, 
   0x8E, 0x37, 0x67, 0xF6, 0x10, 0x22, 0x7F, 0x40, 0x4A, 0x4A, 0xA2, 0x8B, 0xB5, 0x68, 0x8C, 0x92, 
   0x21, 0x57, 0x4E, 0x05, 0x3F, 0x82, 0x57, 0x4B, 0xA1, 0xA7, 0x7F, 0xB8, 0x6B, 0x73, 0xBA, 0x00, 
   0x54, 0x61, 0x00, 0x1A, 0x05, 0x78, 0x54, 0x74, 0x80, 0x84, 0xFF, 0x64, 0x80, 0xAB, 0x1F, 0x52, 
   0x16, 0x51, 0x51, 0x82, 0x8E, 0x67, 0xE9, 0x3B, 0x71, 0xA3, 0x00, 0x10, 0x0E, 0x37, 0x35, 0x66, 
   0xB4, 0xBC, 0xD6, 0x93, 0xA6, 0xCC, 0x2F, 0x42, 0x85, 0x21, 0x2F, 0x55, 0x11, 0x2A, 0x67, 0x4D, 
   0x7D, 0x9C, 0x99, 0xB3, 0xBB, 0x7D, 0x69, 0x99, 0x25, 0x46, 0x76, 0x3F, 0x88, 0x9C, 0x4F, 0x6A, 
   0x84, 0x23, 0x14, 0x4B, 0x4E, 0x55, 0x8C, 0x8E, 0x96, 0xC7, 0x55, 0x92, 0x9A, 0x21, 0x4D, 0x82, 
   0x59, 0x4C, 0x76, 0x59, 0x73, 0x92, 0x2C, 0x4D, 0x87, 0x54, 0x80, 0x88, 0x88, 0x74, 0xCC, 0x53, 
   0x5C, 0xA2, 0x1E, 0x61, 0x5F, 0x23, 0x3F, 0x30, 0x21, 0x41, 0x72, 0x9B, 0x9E, 0xD1, 0x96, 0x9E, 
   0xA6, 0x17, 0x2B, 0x62, 0x00, 0x41, 0xA0, 0x6E, 0x80, 0xB2, 0xBA, 0x87, 0xA5, 0x52, 0x43, 0x54, 
   0x10, 0x65, 0x81, 0x31, 0x97, 0xD0, 0x6A, 0x41, 0x84, 0x43, 0x3A, 0x49, 0x2D, 0x7E, 0x76, 0x4B, 
   0x46, 0x95, 0x8C, 0x6F, 0xB3, 0x90, 0x86, 0xAE, 0x38, 0x6E, 0x84, 0x08, 0x4A, 0x5B, 0x30, 0x49, 
   0x82, 0x5B, 0x4F, 0x95, 0x7F, 0x62, 0x8B, 0x7E, 0x9B, 0xB8, 0x21, 0x4B, 0x89, 0x1A, 0x34, 0x5A, 
   0x4F, 0x73, 0x6B, 0x68, 0x8B, 0x8F, 0x6E, 0x69, 0xB9, 0x5C, 0x58, 0x86, 0x32, 0x5C, 0x90, 0x2C, 
   0x4F, 0x94, 0x44, 0x38, 0x44, 0x5E, 0x40, 0x68, 0x78, 0x7C, 0xCB, 0x79, 0x7F, 0x89, 0x61, 0x6A, 
   0x8A, 0x32, 0x76, 0xBF, 0x53, 0x98, 0xC5, 0x53, 0x84, 0x8A, 0x74, 0x4C, 0x81, 0x3F, 0x05, 0x7E, 
   0x0D, 0x18, 0x3A, 0x4A, 0xA1, 0x76, 0xAE, 0xE8, 0xF6, 0xDA, 0x84, 0xC2, 0x2A, 0x08, 0x53, 0x00, 
   0x17, 0x3F, 0x4C, 0x65, 0x85, 0xC9, 0x8C, 0x8F, 0x6F, 0xBB, 0xD5, 0x2D, 0x64, 0xB7, 0x4D, 0x4B, 
   0x4A, 0x27, 0x5C, 0x72, 0x00, 0x1B, 0x98, 0x84, 0x87, 0xA3, 0xFF, 0xFF, 0xFF, 0x78, 0x7F, 0xAC, 
   0x00, 0x5D, 0x14, 0x1F, 0x58, 0x94, 0x5D, 0x39, 0xDE, 0x41, 0x5A, 0x65, 0x4E, 0x7C, 0x6A, 0x78, 
   0x65, 0x92, 0x8E, 0x74, 0xBF, 0x57, 0x50, 0x8F, 0x00, 0x39, 0x27, 0x00, 0x36, 0x40, 0xA1, 0x8E, 
   0xEA, 0xD1, 0xA7, 0xF1, 0x51, 0x7F, 0x93, 0x00, 0x54, 0x56, 0x1F, 0x3B, 0x39, 0x66, 0x20, 0x74, 
   0x53, 0x57, 0x9F, 0xA4, 0xDD, 0xD5, 0x60, 0x8B, 0xA2, 0x76, 0xB2, 0xBE, 0x2B, 0x48, 0x5B, 0x2F, 
   0x18, 0x5A, 0x68, 0x73, 0x9E, 0x58, 0x80, 0x88, 0x2B, 0x2C, 0x51, 0x53, 0x62, 0x9E, 0x65, 0xAD, 
   0xE3, 0x4E, 0xAB, 0x70, 0x4D, 0x51, 0x57, 0x41, 0x0E, 0xA5, 0x36, 0x36, 0x65, 0x59, 0x5B, 0x6B, 
   0x70, 0x96, 0x8E, 0x58, 0x84, 0xA5, 0x29, 0x17, 0x61, 0x23, 0x33, 0x8F, 0x5E, 0x80, 0xA6, 0x61, 
   0x71, 0x83, 0xA5, 0x66, 0x60, 0x5E, 0x82, 0x87, 0x00, 0x5E, 0x9E, 0x61, 0x76, 0x98, 0x88, 0x50, 
   0x8F, 0x26, 0x20, 0x7A, 0x24, 0x31, 0x43, 0x30, 0x39, 0x33, 0x38, 0x5A, 0x65, 0x74, 0x80, 0x99, 
   0x7B, 0xAE, 0xEC, 0x5C, 0x94, 0xE9, 0x1B, 0x02, 0x43, 0x14, 0x29, 0x00, 0x43, 0x85, 0x6E, 0x67, 
   0x75, 0xB0, 0x57, 0x7A, 0xC3, 0x50, 0x29, 0x72, 0x3F, 0x13, 0x1C, 0x45, 0x71, 0xA1, 0x79, 0x9B, 
   0xDB, 0x50, 0x7F, 0x68, 0x42, 0x65, 0x70, 0x25, 0x1E, 0x5D, 0x05, 0x00, 0x00, 0x74, 0x84, 0xC6, 
   0xB9, 0xF3, 0xFF, 0x29, 0x5D, 0x32, 0x00, 0x00, 0x0F, 0x45, 0x35, 0xB1, 0xA4, 0xD9, 0xD0, 0x83, 
   0xB8, 0x92, 0x69, 0x54, 0x94, 0x0A, 0x22, 0x5E, 0x03, 0x04, 0x30, 0x54, 0x82, 0xBE, 0x6D, 0x8F, 
   0xA3, 0x51, 0x31, 0x49, 0x3A, 0x4F, 0x67, 0x45, 0xA6, 0xB4, 0x62, 0x83, 0xD6, 0x40, 0x53, 0x51, 
   0x2A, 0x0E, 0x02, 0x64, 0x5E, 0xD7, 0x75, 0x98, 0xFF, 0x63, 0x38, 0x2B, 0x07, 0x1E, 0x2A, 0x14, 
   0x98, 0xBA, 0xB0, 0xBC, 0xCE, 0x95, 0x81, 0x83, 0x21, 0x17, 0x44, 0x4B, 0x21, 0x9E, 0x49, 0xB5, 
   0xCF, 0x3D, 0x6B, 0x40, 0x00, 0x00, 0x24, 0x66, 0x71, 0xCD, 0xC9, 0xFF, 0xFF, 0x51, 0x59, 0x75, 
   0x15, 0x00, 0x11, 0x51, 0x68, 0x82, 0x67, 0xA7, 0xD7, 0x18, 0x57, 0x5A, 0x58, 0x3E, 0x2E, 0x6F, 
   0x0B, 0xBF, 0x46, 0x5D, 0xE1, 0x2F, 0xAF, 0x40, 0x51, 0x70, 0x4F, 0x72, 0x35, 0xC0, 0x39, 0x35, 
   0x77, 0x29, 0x64, 0x4F, 0x6E, 0x98, 0xB6, 0x68, 0x58, 0x89, 0x3F, 0x34, 0x4A, 0x42, 0x82, 0x98, 
   0x14, 0x3E, 0x91, 0x38, 0x1E, 0x37, 0xA6, 0xB4, 0x9A, 0x4F, 0xC4, 0xEA, 0x00, 0x00, 0x4F, 0x05, 
   0x00, 0x1C, 0xA1, 0xB8, 0xD3, 0x81, 0x8E, 0x9C, 0x0A, 0x29, 0x3D, 0x7A, 0x8F, 0xBB, 0x6D, 0x78, 
   0xBB, 0x00, 0x38, 0x75, 0x63, 0x76, 0x68, 0xAE, 0x59, 0x6F, 0x2B, 0x15, 0x4A, 0x00, 0x61, 0xBF, 
   0x6A, 0x96, 0xD2, 0x9F, 0x8B, 0x87, 0x59, 0x61, 0x80, 0x28, 0x62, 0x8F, 0x36, 0x38, 0x99, 0x2B, 
   0x10, 0x4F, 0x2E, 0x74, 0x7D, 0x92, 0x92, 0xBC, 0x92, 0x5F, 0x83, 0x2E, 0x36, 0x6B, 0x00, 0x64, 
   0x7D, 0x50, 0x8D, 0x84, 0x80, 0x38, 0xB2, 0x7B, 0x71, 0x8F, 0x40, 0x92, 0x6C, 0x00, 0x14, 0x83, 
   0x45, 0x21, 0x80, 0x64, 0xA7, 0x7D, 0x65, 0xB8, 0xEB, 0x69, 0x4F, 0xE3, 0x45, 0x1F, 0x62, 0x12, 
   0x63, 0x2D, 0x5C, 0x9C, 0x99, 0x7E, 0x5C, 0xE3, 0x3E, 0x37, 0x74, 0x00, 0x20, 0x0D, 0x5A, 0x50, 
   0x93, 0x72, 0xAD, 0xEB, 0x4B, 0x8F, 0xB1, 0x44, 0x0A, 0x64, 0x44, 0x0F, 0x40, 0x5B, 0x8F, 0x7A, 
   0x50, 0x97, 0xC6, 0x4B, 0x47, 0x8A, 0x40, 0x40, 0x8A, 0x57, 0x52, 0xB6, 0x72, 0x96, 0x75, 0x54, 
   0x72, 0x79, 0x03, 0x25, 0x83, 0x26, 0x14, 0x61, 0x72, 0x7C, 0x63, 0x80, 0x73, 0xC6, 0x5E, 0x4C, 
   0x8A, 0x46, 0x5E, 0x8A, 0x50, 0x90, 0xBB, 0x5A, 0x5C, 0x75, 0x4D, 0x22, 0x63, 0x1F, 0x4A, 0x64, 
   0x2C, 0x63, 0x94, 0x79, 0x6B, 0xBD, 0x7F, 0x71, 0xA1, 0x35, 0x82, 0x5C, 0x4A, 0x6E, 0x7E, 0x38, 
   0x01, 0x8A, 0x02, 0x0F, 0x75, 0x7E, 0x9D, 0x99, 0xEA, 0xF4, 0xD2, 0x3B, 0x79, 0x97, 0x00, 0x00, 
   0x55, 0x00, 0x0D, 0x5B, 0x87, 0x78, 0x81, 0xB8, 0xBA, 0xC9, 0x62, 0x6B, 0xCF, 0x2D, 0x47, 0x78, 
   0x53, 0x68, 0x6F, 0x48, 0x5D, 0x7A, 0x65, 0x8A, 0x91, 0x6F, 0x45, 0x9C, 0x0D, 0x34, 0x6E, 0x4C, 
   0x89, 0x95, 0x69, 0x6D, 0x94, 0x4E, 0x29, 0x50, 0x2D, 0x52, 0x84, 0x46, 0x99, 0x92, 0x9C, 0x89, 
   0xBC, 0x8A, 0x70, 0x9F, 0x04, 0x40, 0x6C, 0x00, 0x2E, 0x99, 0x5D, 0x69, 0x93, 0xBB, 0x94, 0x8E, 
   0x7B, 0x83, 0x88, 0x2E, 0x5F, 0x93, 0x20, 0x4C, 0xA8, 0x37, 0x56, 0x95, 0x50, 0x4B, 0x65, 0x74, 
   0x6E, 0x6A, 0x8F, 0x7A, 0x94, 0x16, 0x68, 0x96, 0x0A, 0x3A, 0x9C, 0x82, 0x62, 0x96, 0x83, 0x79, 
   0x73, 0x39, 0x67, 0x89, 0x70, 0x71, 0xAF, 0x3B, 0x3E, 0x54, 0x00, 0x4A, 0x6C, 0x72, 0x63, 0xC3, 
   0xAD, 0x87, 0xA1, 0x4C, 0x7C, 0x56, 0x2F, 0x5E, 0x74, 0x61, 0x68, 0xCA, 0x56, 0x62, 0xA2, 0x40, 
   0x45, 0x51, 0x6E, 0x6E, 0x89, 0x4C, 0x7F, 0x8A, 0x25, 0x52, 0x6F, 0x4E, 0x22, 0x9E, 0x79, 0xA3, 
   0x8A, 0x8A, 0xC7, 0xB5, 0x66, 0x80, 0xF8, 0x62, 0x25, 0x4E, 0x00, 0x11, 0x3F, 0x0C, 0x67, 0x8A, 
   0xA8, 0x7C, 0xB3, 0x99, 0x8E, 0x92, 0x05, 0x50, 0x77, 0x2D, 0x50, 0x9A, 0xCC, 0x9F, 0xCC, 0x6E, 
   0x86, 0x8B, 0x00, 0x07, 0x5A, 0x17, 0x1F, 0x4E, 0x83, 0x7F, 0x63, 0xA9, 0xC7, 0xC4, 0x75, 0x93, 
   0xF4, 0x03, 0x20, 0x7C, 0x33, 0x2D, 0x37, 0xC5, 0xE6, 0xC6, 0x9E, 0x8C, 0xB7, 0x51, 0x35, 0x9F, 
   0x41, 0x77, 0xAC, 0x54, 0x97, 0x76, 0x1F, 0x56, 0x41, 0x2C, 0x5B, 0x8C, 0x85, 0x72, 0xC0, 0xBE, 
   0x88, 0xA9, 0x64, 0x85, 0x80, 0x00, 0x1C, 0x78, 0x10, 0x28, 0x73, 0x64, 0x91, 0xAD, 0x96, 0x82, 
   0x81, 0x76, 0x56, 0x70, 0x6A, 0x84, 0xBB, 0x7E, 0x7E, 0xB4, 0x37, 0x65, 0x62, 0x04, 0x25, 0x5C, 
   0x5B, 0x44, 0x8B, 0x9C, 0xC8, 0xBF, 0x4C, 0x58, 0x84, 0x46, 0x5E, 0x84, 0x5D, 0x52, 0x9F, 0x63, 
   0x68, 0x8D, 0x24, 0x46, 0x42, 0x36, 0x53, 0x6C, 0x6F, 0x71, 0xBE, 0x52, 0x7D, 0xA2, 0x3B, 0x76, 
   0x63, 0x5D, 0x46, 0xA0, 0x51, 0x3E, 0x7E, 0x35, 0x66, 0x84, 0x4D, 0x50, 0x93, 0x65, 0x61, 0x70, 
   0x6A, 0x7E, 0x6B, 0x52, 0x55, 0x83, 0x35, 0x4F, 0xBC, 0x3A, 0x39, 0x82, 0x5D, 0x6D, 0x4C, 0x69, 
   0x69, 0x47, 0x2C, 0x37, 0x9E, 0x5A, 0x78, 0xB1, 0x81, 0xD2, 0x78, 0x3C, 0x51, 0x82, 0x6D, 0x24, 
   0xBD, 0x63, 0x5A, 0x7F, 0x00, 0x4D, 0x00, 0x18, 0x36, 0x3E, 0x7B, 0x22, 0xB4, 0x57, 0x71, 0x80, 
   0x47, 0x91, 0x7D, 0x96, 0xA3, 0xFF, 0x4F, 0x7D, 0x93, 0x00, 0x00, 0x00, 0x1B, 0x1E, 0x3B, 0x89, 
   0x97, 0xFF, 0x85, 0x8C, 0xE6, 0x45, 0x56, 0x26, 0x38, 0x00, 0x0D, 0x38, 0x29, 0x8D, 0x40, 0x89, 
   0xE0, 0x8A, 0xC5, 0x9C, 0x4B, 0x5E, 0x5C, 0x27, 0x39, 0x66, 0x3D, 0x5E, 0x9E, 0x3E, 0x4D, 0x39, 
   0x56, 0x2C, 0x69, 0x6D, 0x72, 0xED, 0x39, 0x6E, 0x7B, 0x12, 0x3D, 0x00, 0x59, 0x45, 0x7A, 0x83, 
   0xBF, 0xFF, 0x94, 0xAC, 0xAF, 0x57, 0x3C, 0x1D, 0x00, 0x31, 0x7A, 0x1A, 0x1F, 0x96, 0x66, 0x2D, 
   0x6D, 0x7A, 0x7B, 0x3C, 0x89, 0x90, 0xA5, 0x20, 0x95, 0xF5, 0x00, 0x76, 0x1D, 0x51, 0x03, 0x0E, 
   0x9F, 0x3E, 0xFF, 0x50, 0x9D, 0xE8, 0x53, 0xBA, 0x57, 0x41, 0x67, 0x8B, 0x2F, 0x00, 0x7D, 0x3B, 
   0x21, 0x1E, 0x49, 0xCB, 0x98, 0xA0, 0xD2, 0xEA, 0x92, 0x46, 0xB6, 0x00, 0x14, 0x46, 0x13, 0x53, 
   0x4A, 0x2C, 0x57, 0x8F, 0x31, 0x60, 0x65, 0x8B, 0xAC, 0xA2, 0xB9, 0x8E, 0xFF, 0x2E, 0x63, 0xAA, 
   0x09, 0x49, 0x06, 0x68, 0x20, 0x5F, 0x5D, 0x9D, 0xB0, 0x46, 0xB8, 0x9A, 0x40, 0x04, 0x7C, 0x2E, 
   0x00, 0x49, 0x41, 0x79, 0x40, 0x81, 0xBC, 0xC5, 0x9D, 0x88, 0xED, 0x17, 0x41, 0x6C, 0x05, 0x3F, 
   0x1E, 0x4A, 0x24, 0x57, 0x62, 0x86, 0xAF, 0x62, 0xD0, 0xC1, 0x44, 0x55, 0x82, 0x49, 0x00, 0x47, 
   0x37, 0x27, 0x52, 0x4E, 0xC5, 0xA3, 0x65, 0xD1, 0xC5, 0x3D, 0x28, 0x3C, 0x05, 0x00, 0x21, 0x46, 
   0x5C, 0xD0, 0xAA, 0x99, 0xFF, 0x7C, 0x9F, 0x6A, 0x0C, 0x49, 0x35, 0x00, 0x00, 0x6F, 0x69, 0x8A, 
   0xCC, 0xA9, 0xF1, 0xB5, 0x57, 0x70, 0x68, 0x00, 0x00, 0x56, 0x16, 0x10, 0x63, 0x8B, 0x97, 0xB6, 
   0x7D, 0x7E, 0xB2, 0x49, 0x5D, 0x6A, 0x3C, 0x84, 0x77, 0x5C, 0x6B, 0xE9, 0x43, 0x56, 0xC9, 0x1F, 
   0x47, 0x3B, 0x14, 0x0E, 0x0B, 0x34, 0x23, 0x6A, 0x92, 0xB5, 0xFF, 0x9D, 0xC7, 0xDB, 0x1D, 0x0F, 
   0x38, 0x00, 0x00, 0x3B, 0x4A, 0xA4, 0x7C, 0x85, 0x94, 0x96, 0x47, 0x3F, 0xA8, 0x58, 0x77, 0xA2, 
   0x51, 0x82, 0x73, 0x56, 0x42, 0x5C, 0x28, 0x36, 0x7A, 0x29, 0x59, 0xC6, 0x6F, 0x82, 0xAF, 0x7B, 
   0x70, 0x7F, 0x36, 0x58, 0x87, 0x45, 0x5C, 0x58, 0x55, 0x5A, 0x6F, 0x37, 0x37, 0xBF, 0x1C, 0x38, 
   0x65, 0x57, 0x73, 0x5F, 0xB2, 0xA6, 0xB4, 0x43, 0x5A, 0xA7, 0x00, 0x00, 0x34, 0x20, 0x31, 0x57, 
   0x7E, 0x7F, 0x9F, 0x96, 0x98, 0xC8, 0x4B, 0x64, 0xA4, 0x11, 0x57, 0x52, 0x2E, 0x51, 0x5D, 0xA7, 
   0x5C, 0x9D, 0x78, 0x82, 0xD5, 0x00, 0x47, 0x77, 0x00, 0x02, 0x00, 0x61, 0x43, 0x5E, 0x9C, 0x9B, 
   0xFF, 0x4C, 0x91, 0xC8, 0x01, 0x3C, 0x0A, 0x51, 0x47, 0x69, 0xA6, 0x9B, 0xCB, 0x36, 0x6C, 0x91, 
   0x00, 0x10, 0x45, 0x1E, 0x2F, 0x4C, 0x72, 0x93, 0xA4, 0xA8, 0xAB, 0xC9, 0x5C, 0x6F, 0xA7, 0x00, 
   0x05, 0x4B, 0x11, 0x00, 0x68, 0x70, 0x9A, 0xB3, 0xA5, 0xE1, 0xB4, 0x70, 0x57, 0x8B, 0x00, 0x10, 
   0x61, 0x22, 0x4E, 0x68, 0x5D, 0x6D, 0x98, 0x2D, 0x5E, 0x84, 0x89, 0x81, 0xB8, 0x77, 0x70, 0xBD, 
   0x10, 0x47, 0x6B, 0x48, 0x6E, 0x85, 0x8B, 0x6D, 0xA1, 0x29, 0x4F, 0x8E, 0x1C, 0x5A, 0x7C, 0x29, 
   0x5B, 0x5B, 0x5F, 0x4C, 0x80, 0x68, 0x80, 0xE2, 0x68, 0x6A, 0x87, 0x2E, 0x54, 0x53, 0x23, 0x6B, 
   0x8C, 0x8A, 0x9E, 0xB4, 0x8E, 0x63, 0x9D, 0x00, 0x17, 0x4D, 0x00, 0x2A, 0x70, 0x8C, 0xA4, 0xCD, 
   0xBC, 0x9A, 0xB7, 0x64, 0x49, 0x72, 0x00, 0x6F, 0x82, 0x2D, 0x5C, 0xC4, 0x83, 0x4B, 0x71, 0x94, 
   0x84, 0x63, 0x15, 0x67, 0x52, 0x09, 0x45, 0x7D, 0x60, 0x73, 0xB9, 0x74, 0x6F, 0xB4, 0x7F, 0x86, 
   0xA7, 0x70, 0x89, 0x93, 0x00, 0x32, 0x41, 0x00, 0x26, 0x52, 0x70, 0x5B, 0xA5, 0x8A, 0x9D, 0xB3, 
   0x4C, 0x71, 0xAE, 0x62, 0x65, 0x74, 0x3F, 0x74, 0x68, 0x18, 0x51, 0x9B, 0x63, 0x4C, 0x85, 0x8D, 
   0x64, 0x97, 0x70, 0x8C, 0x91, 0x57, 0x6F, 0x8B, 0x28, 0x2A, 0x79, 0x19, 0x4E, 0x6F, 0x7D, 0x84, 
   0x9A, 0x9C, 0xA7, 0xC3, 0x83, 0x6C, 0x89, 0x13, 0x36, 0x80, 0x06, 0x08, 0x46, 0x5D, 0x7C, 0x7A, 
   0x86, 0xE8, 0xD1, 0x63, 0x47, 0xA8, 0x1D, 0x00, 0x3C, 0x0E, 0x70, 0x76, 0x7D, 0xCE, 0xDE, 0xF4, 
   0x8E, 0xE7, 0x27, 0x40, 0x53, 0x00, 0x00, 0x00, 0x46, 0x30, 0x37, 0xD6, 0xB9, 0xC2, 0x5E, 0x9B, 
   0xFF, 0x81, 0x69, 0xC9, 0xC3, 0xB2, 0x8C, 0x25, 0x4F, 0x67, 0x00, 0x25, 0x4B, 0x5C, 0x84, 0xAC, 
   0xCA, 0x6E, 0xEF, 0x41, 0x4C, 0x64, 0x17, 0x8A, 0x3B, 0x5C, 0x5C, 0x9C, 0x9C, 0x6C, 0xB4, 0x71, 
   0x87, 0x9C, 0x1D, 0x35, 0x62, 0x00, 0x39, 0x52, 0x63, 0x79, 0xDB, 0x99, 0x74, 0xBE, 0x22, 0x47, 
   0x61, 0x1E, 0x4E, 0x39, 0x92, 0x72, 0x97, 0x9E, 0x8F, 0xD8, 0x46, 0x68, 0xB0, 0x27, 0x72, 0x74, 
   0x53, 0x70, 0x76, 0x4D, 0x36, 0x75, 0x2C, 0x3C, 0x70, 0x16, 0x21, 0x65, 0x62, 0x7E, 0x9E, 0x52, 
   0x8B, 0x87, 0x47, 0x2A, 0x49, 0x64, 0x3D, 0x7D, 0x52, 0xB0, 0xB7, 0x3A, 0x91, 0x9A, 0x39, 0x0B, 
   0x37, 0x56, 0x0E, 0x6B, 0x2E, 0x4F, 0xB6, 0x35, 0x8B, 0x95, 0x6F, 0x97, 0x72, 0x64, 0x61, 0x82, 
   0x36, 0x26, 0x6B, 0x36, 0x2C, 0x7C, 0x69, 0x77, 0xA4, 0x5D, 0x89, 0xA2, 0x39, 0x39, 0x34, 0x1C, 
   0x33, 0x62, 0x29, 0x6E, 0xAF, 0x54, 0x8D, 0x8F, 0xA0, 0x7B, 0x94, 0x7C, 0x62, 0x9D, 0x1D, 0x54, 
   0x83, 0x1F, 0x63, 0x4E, 0x40, 0x43, 0x74, 0x40, 0x25, 0x7A, 0x25, 0x3C, 0x5E, 0x54, 0x44, 0x9E, 
   0x56, 0x5F, 0x9E, 0x51, 0x8B, 0x27, 0x57, 0x97, 0x78, 0x56, 0x72, 0xE5, 0x3E, 0x0E, 0x67, 0x32, 
   0x4C, 0x48, 0x5A, 0x85, 0x8C, 0x66, 0x51, 0x9E, 0x33, 0x6C, 0x80, 0x21, 0x0B, 0x30, 0x4A, 0x2A, 
   0x3D, 0x4C, 0x73, 0xC3, 0x6F, 0x93, 0x98, 0x68, 0xA4, 0x97, 0x65, 0x88, 0x9F, 0x1E, 0x16, 0x3B, 
   0x00, 0x00, 0x00, 0x5B, 0x3D, 0xC4, 0xB3, 0xFF, 0xEE, 0x2A, 0x8F, 0x38, 0x0C, 0x16, 0x55, 0x5D, 
   0x4A, 0x8B, 0x66, 0x95, 0xB0, 0x6B, 0xBC, 0xC6, 0x6E, 0x62, 0x94, 0x00, 0x00, 0x29, 0x10, 0x10, 
   0x1D, 0x9E, 0xA8, 0xC4, 0x4E, 0xC1, 0xC4, 0x1A, 0x54, 0x0E, 0x15, 0x00, 0x33, 0x52, 0x3E, 0xC7, 
   0xA0, 0x97, 0xF4, 0x89, 0x9A, 0x8E, 0x0A, 0x78, 0x80, 0x25, 0x86, 0x93, 0x92, 0x5F, 0x73, 0x59, 
   0x00, 0x66, 0x1F, 0x14, 0x57, 0x46, 0xA1, 0xAE, 0x73, 0xE6, 0xE7, 0x5A, 0x43, 0x79, 0x00, 0x00, 
   0x06, 0x19, 0x71, 0x6F, 0xD3, 0xFF, 0xE4, 0x7F, 0x7E, 0xB7, 0x00, 0x00, 0x17, 0x71, 0x5B, 0xA4, 
   0x87, 0xEB, 0xF8, 0x09, 0x72, 0x39, 0x36, 0x1F, 0x2C, 0x96, 0x45, 0xD7, 0x40, 0x6C, 0xC0, 0x00, 
   0x56, 0x15, 0x46, 0x57, 0x4B, 0xA2, 0x58, 0xF9, 0x52, 0x81, 0xDC, 0x1E, 0x7B, 0x4B, 0x50, 0x41, 
   0x5E, 0x61, 0x5C, 0x9A, 0x33, 0x50, 0x3A, 0x3E, 0x5B, 0x85, 0x55, 0x66, 0xD6, 0x39, 0x22, 0x54, 
   0x71, 0x61, 0x53, 0x53, 0xB7, 0xE5, 0x00, 0x3E, 0x3F, 0x1B, 0x00, 0x02, 0x9C, 0x68, 0xB1, 0x98, 
   0xB4, 0xF4, 0x21, 0x43, 0x7F, 0x5D, 0x48, 0x88, 0x5B, 0x86, 0xA1, 0x00, 0x33, 0x45, 0x4E, 0x6D, 
   0x63, 0xE2, 0xB6, 0xC4, 0x29, 0x48, 0x91, 0x00, 0x39, 0x62, 0x37, 0x48, 0x99, 0x85, 0x33, 0x5B, 
   0x70, 0x6F, 0x37, 0x31, 0x83, 0xA7, 0x59, 0x67, 0xD3, 0x64, 0x7D, 0xB1, 0x57, 0x91, 0x97, 0x43, 
   0x38, 0x97, 0x41, 0x08, 0x1D, 0x1A, 0x26, 0x46, 0x3F, 0x9C, 0xD3, 0x80, 0x93, 0xDB, 0xA8, 0x65, 
   0x94, 0x28, 0x3D, 0x3B, 0x00, 0x59, 0x3C, 0x16, 0x5A, 0xB8, 0x80, 0x50, 0xD7, 0x93, 0x8F, 0x98, 
   0x4C, 0x9D, 0x83, 0x1B, 0x28, 0x70, 0x1F, 0x00, 0x53, 0x38, 0x7A, 0x51, 0x64, 0xB0, 0xE8, 0x8D, 
   0x65, 0xFF, 0x59, 0x41, 0x38, 0x1E, 0x4B, 0x13, 0x44, 0x61, 0xA2, 0x61, 0x72, 0xC6, 0x34, 0x5A, 
   0xAE, 0x5B, 0x31, 0x62, 0x55, 0x54, 0x4A, 0x3D, 0x99, 0x89, 0x36, 0x76, 0xBE, 0x20, 0x00, 0x5E, 
   0x4F, 0x2D, 0x81, 0x72, 0x9C, 0xC5, 0x44, 0x98, 0x7A, 0x2D, 0x52, 0x40, 0x34, 0x23, 0x9C, 0x58, 
   0x61, 0xB4, 0x9C, 0x8F, 0x91, 0x4A, 0x7D, 0x6D, 0x00, 0x20, 0x5B, 0x25, 0x2B, 0x73, 0x4E, 0x76, 
   0x9D, 0x5C, 0x68, 0xA9, 0x64, 0x4D, 0x81, 0x5E, 0x81, 0x76, 0x63, 0x80, 0xC0, 0x6B, 0x50, 0xA7, 
   0x23, 0x21, 0x60, 0x00, 0x39, 0x27, 0x35, 0x80, 0x5D, 0x9A, 0x8D, 0xD3, 0x63, 0x4E, 0xA3, 0x40, 
   0x48, 0x97, 0x66, 0x96, 0x8F, 0x33, 0x3A, 0x67, 0x01, 0x00, 0x83, 0x4F, 0x78, 0x7F, 0xC8, 0xC0, 
   0x8C, 0x5B, 0x81, 0x9E, 0x08, 0x2A, 0x93, 0x2E, 0x4B, 0x77, 0x4D, 0x7A, 0x83, 0x55, 0x7C, 0xB1, 
   0x7E, 0x8C, 0xAA, 0x5F, 0x57, 0x7A, 0x1E, 0x2D, 0x82, 0x38, 0x65, 0x69, 0x4A, 0x5A, 0x4D, 0x2F, 
   0x2E, 0x6C, 0x3E, 0x64, 0xA4, 0x97, 0xA4, 0xC3, 0x8C, 0x6B, 0xC2, 0x3F, 0x59, 0x86, 0x21, 0x52, 
   0x56, 0x22, 0x64, 0x78, 0x8A, 0x75, 0xA7, 0x95, 0x7B, 0x86, 0x05, 0x4D, 0x76, 0x00, 0x42, 0x8E, 
   0x75, 0x7C, 0x9B, 0x9F, 0x93, 0xBD, 0x77, 0x5F, 0x88, 0x4C, 0x52, 0x8C, 0x5F, 0x6D, 0x99, 0x2A, 
   0x4F, 0x69, 0x08, 0x38, 0x63, 0x5F, 0x61, 0x70, 0x8F, 0x68, 0x95, 0x5D, 0x6F, 0xBE, 0x60, 0x8A, 
   0xC8, 0x46, 0x3F, 0x65, 0x00, 0x3E, 0x41, 0x2A, 0x55, 0x7B, 0x9E, 0x62, 0xB0, 0x5B, 0x6F, 0x74, 
   0x2E, 0x7B, 0x8C, 0x51, 0x69, 0xC5, 0x5D, 0x4C, 0x96, 0x4C, 0x4C, 0x3F, 0x48, 0x59, 0x7F, 0x70, 
   0x93, 0xC6, 0x5F, 0x7C, 0xAA, 0x35, 0x42, 0x81, 0x3F, 0x47, 0x74, 0x34, 0x97, 0x69, 0x58, 0x64, 
   0xAE, 0x7B, 0x36, 0xA8, 0x4E, 0x59, 0x6A, 0x38, 0x67, 0x76, 0x8E, 0xA1, 0xC0, 0x7B, 0x89, 0xA9, 
   0x2F, 0x30, 0x75, 0x22, 0x3F, 0x6E, 0x55, 0x66, 0xAD, 0x68, 0x4C, 0x80, 0x3C, 0x5A, 0x85, 0x59, 
   0x99, 0x9B, 0x91, 0x7C, 0x99, 0x5C, 0x4C, 0x59, 0x00, 0x22, 0x37, 0x0B, 0x15, 0x69, 0xC9, 0x77, 
   0xAE, 0xFA, 0xFF, 0xFF, 0x6D, 0x8B, 0xBA, 0x00, 0x2A, 0x2D, 0x00, 0x3C, 0x80, 0x3B, 0x42, 0xA2, 
   0x5C, 0x60, 0x4D, 0x8D, 0x6D, 0xA3, 0x72, 0x57, 0xB4, 0x75, 0x78, 0x6F, 0x6C, 0x8D, 0x8A, 0x07, 
   0x42, 0x56, 0x00, 0x3B, 0x8B, 0x81, 0x8B, 0xD0, 0x9A, 0x8B, 0x8B, 0x44, 0x41, 0x78, 0x32, 0x51, 
   0x88, 0x49, 0x63, 0x5F, 0x57, 0x59, 0x5C, 0x5F, 0x4A, 0xA4, 0xAA, 0xA2, 0xEA, 0x8A, 0xB2, 0xD0, 
   0x0E, 0x74, 0x52, 0x16, 0x00, 0x27, 0x43, 0x46, 0x8C, 0x3E, 0x36, 0x91, 0x34, 0x4F, 0x64, 0x58, 
   0x69, 0x71, 0x70, 0x70, 0xBD, 0x53, 0x8D, 0xA0, 0x3B, 0x7A, 0x5A, 0x50, 0x39, 0x6F, 0x38, 0x47, 
   0x90, 0x33, 0x30, 0x5E, 0x50, 0x60, 0x6B, 0x6E, 0x80, 0xB1, 0x46, 0x9C, 0x9B, 0x3A, 0x4A, 0x6D, 
   0x35, 0x2C, 0x8E, 0x4D, 0x48, 0x9D, 0x70, 0x7D, 0x5D, 0x7A, 0x72, 0x56, 0x2D, 0x4F, 0xA6, 0x00, 
   0x2D, 0x8B, 0x44, 0x7D, 0x4D, 0x80, 0x77, 0x87, 0x4F, 0x0C, 0xCB, 0x80, 0x78, 0x84, 0x29, 0x8F, 
   0x17, 0x11, 0x60, 0x6D, 0x82, 0x46, 0xE0, 0x5F, 0x49, 0x9A, 0x19, 0x4C, 0x58, 0x24, 0x19, 0x7C, 
   0x5E, 0x2C, 0x42, 0x28, 0x53, 0x07, 0x58, 0x80, 0x85, 0xA2, 0xBA, 0xFF, 0x72, 0x8E, 0xF2, 0x00, 
   0x00, 0x00, 0x07, 0x11, 0x00, 0x5F, 0x89, 0xE6, 0x78, 0x7A, 0xD2, 0x50, 0x7E, 0x6A, 0x28, 0x00, 
   0x14, 0x29, 0x00, 0x39, 0x6F, 0xD0, 0xFF, 0xA1, 0xDD, 0xD1, 0x38, 0x33, 0x2F, 0x00, 0x00, 0x70, 
   0x24, 0x2D, 0x86, 0x3E, 0x4D, 0x11, 0x6F, 0x52, 0x8D, 0xB3, 0xBB, 0xFF, 0x22, 0x8D, 0x5A, 0x00, 
   0x00, 0x00, 0x63, 0x4D, 0xB4, 0x8E, 0x93, 0xFF, 0x73, 0x78, 0x81, 0x75, 0x60, 0x2D, 0x32, 0x63, 
   0x91, 0x00, 0x3A, 0xC8, 0x12, 0x50, 0x22, 0x4E, 0x2F, 0x02, 0x79, 0x3E, 0xBE, 0x4D, 0x9D, 0xFF, 
   0x31, 0x8E, 0x48, 0x54, 0x61, 0x86, 0x66, 0x77, 0xF2, 0x49, 0x65, 0x6D, 0x49, 0x8F, 0x70, 0x7B, 
   0x5D, 0x9B, 0x5B, 0x00, 0x7C, 0x09, 0x2F, 0x48, 0x20, 0xB0, 0x60, 0x5C, 0x5E, 0xA7, 0x5B, 0x3E, 
   0x8D, 0x7F, 0x95, 0x83, 0x73, 0x9A, 0xB6, 0x3D, 0x4E, 0x81, 0x2B, 0x5B, 0x42, 0x59, 0x2D, 0x7C, 
   0x7C, 0x67, 0xD8, 0x5F, 0xDE, 0xB9, 0x3C, 0x36, 0x55, 0x41, 0x00, 0x41, 0x3B, 0x85, 0x59, 0x6F, 
   0xD1, 0xAB, 0x7E, 0x52, 0xCE, 0x0B, 0x10, 0x62, 0x0C, 0x28, 0x45, 0x8B, 0x9D, 0xD4, 0x8B, 0xA4, 
   0xBC, 0x34, 0x68, 0x57, 0x37, 0x36, 0x4E, 0x26, 0x00, 0x48, 0x38, 0x60, 0x63, 0x8F, 0xE6, 0xFF, 
   0x6C, 0x95, 0xDC, 0x1A, 0x00, 0x00, 0x08, 0x00, 0x39, 0x33, 0x95, 0xCA, 0x86, 0xB5, 0xB7, 0x6A, 
   0x61, 0x53, 0x4C, 0x80, 0xA4, 0x1D, 0x12, 0xB6, 0x35, 0x2B, 0x81, 0x9D, 0xF9, 0x79, 0x86, 0x5F, 
   0x61, 0x00, 0x00, 0x40, 0x4B, 0x7F, 0xBE, 0x89, 0xA7, 0xDF, 0x28, 0x4A, 0x32, 0x21, 0x0F, 0x2B, 
   0x39, 0x4F, 0x73, 0x63, 0x74, 0xA6, 0x59, 0x6B, 0xD6, 0x53, 0x71, 0x81, 0x69, 0x70, 0x6E, 0x5C, 
   0x52, 0x8A, 0x37, 0x55, 0xAF, 0x24, 0x65, 0x7A, 0x13, 0x1B, 0x2A, 0x33, 0x2F, 0x8C, 0x91, 0xB5, 
   0xE9, 0x9C, 0xBC, 0x83, 0x06, 0x0A, 0x50, 0x00, 0x27, 0x73, 0x68, 0xC1, 0xBE, 0x92, 0x82, 0xB9, 
   0x5C, 0x24, 0x7E, 0x1B, 0x44, 0x75, 0x14, 0x55, 0x52, 0x3E, 0x62, 0x6A, 0x51, 0x5E, 0xA0, 0x59, 
   0x6F, 0xB8, 0x70, 0x6F, 0x8F, 0x58, 0x5E, 0x82, 0x18, 0x4C, 0x7C, 0x51, 0x84, 0x75, 0xA0, 0x6B, 
   0xAC, 0x49, 0x2A, 0x93, 0x00, 0x13, 0x37, 0x48, 0x5A, 0x4A, 0x83, 0xA6, 0xB9, 0x6C, 0x7E, 0xCC, 
   0x2B, 0x10, 0x91, 0x1A, 0x44, 0x3F, 0x3E, 0x8A, 0x66, 0x7E, 0x69, 0x95, 0x57, 0x62, 0x96, 0x23, 
   0x45, 0x8A, 0x2A, 0x45, 0x4C, 0x96, 0x68, 0x75, 0x94, 0x9A, 0xFE, 0x0E, 0x53, 0xA6, 0x00, 0x00, 
   0x00, 0x4F, 0x38, 0x33, 0xB9, 0xC4, 0xFF, 0x5E, 0x81, 0xC1, 0x1E, 0x3B, 0x58, 0x44, 0x3A, 0x66, 
   0x76, 0x7E, 0x88, 0x51, 0x6C, 0x9A, 0x00, 0x2D, 0x62, 0x00, 0x1D, 0x53, 0x7D, 0x7C, 0xBD, 0xAD, 
   0xDF, 0xE1, 0x50, 0x91, 0x7F, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x43, 0x54, 0x5A, 0x79, 0xCB, 0xDE, 
   0xBC, 0xA3, 0xAD, 0xC9, 0x21, 0x65, 0x89, 0x11, 0x1D, 0x92, 0x00, 0x1D, 0x6F, 0x6A, 0x96, 0x6B, 
   0xBC, 0x97, 0xD7, 0x54, 0x46, 0xB9, 0x07, 0x66, 0x54, 0x28, 0x4F, 0x52, 0x4C, 0x4B, 0x54, 0x4E, 
   0x74, 0xAD, 0x55, 0x7C, 0xAA, 0x5D, 0x60, 0x9B, 0x69, 0x7C, 0xB1, 0x68, 0x69, 0xBA, 0x3E, 0x3A, 
   0x61, 0x1B, 0x2F, 0x32, 0x23, 0x65, 0x73, 0x9C, 0xAB, 0xDC, 0xB8, 0x8D, 0x9E, 0x00, 0x1F, 0x49, 
   0x00, 0x40, 0x99, 0x7B, 0x6F, 0xBC, 0xD9, 0x93, 0xB0, 0x9D, 0x87, 0x86, 0x00, 0x57, 0x73, 0x00, 
   0x33, 0x8D, 0x74, 0x5A, 0x8C, 0x7D, 0x56, 0x7B, 0x50, 0x79, 0x7B, 0x87, 0x89, 0x97, 0x36, 0x3F, 
   0x6A, 0x00, 0x39, 0x71, 0x81, 0x90, 0x9F, 0x93, 0x74, 0x99, 0x1A, 0x68, 0x5B, 0x14, 0x3A, 0x89, 
   0x5F, 0x5C, 0x8B, 0x4B, 0x79, 0xA8, 0x4D, 0x46, 0x9C, 0x76, 0x59, 0x6D, 0x59, 0x98, 0x68, 0x31, 
   0x76, 0x9D, 0x58, 0x43, 0xCC, 0x53, 0x5A, 0x99, 0x58, 0x9E, 0x76, 0x6D, 0x74, 0xB2, 0x49, 0x38, 
   0x77, 0x00, 0x0A, 0x32, 0x1F, 0x25, 0x84, 0xAC, 0xB9, 0xA5, 0xA8, 0xE2, 0xC2, 0x49, 0x7E, 0xA4, 
   0x17, 0x00, 0x52, 0x21, 0x4F, 0x68, 0x5B, 0x7D, 0xB2, 0x8E, 0x50, 0xB7, 0x3E, 0x3A, 0x54, 0x00, 
   0x4E, 0x4F, 0x77, 0x95, 0xAD, 0xE4, 0xCD, 0xF3, 0x27, 0x1F, 0x8B, 0x00, 0x00, 0x23, 0x96, 0x72, 
   0x6E, 0xC2, 0xB0, 0xAB, 0x54, 0x9F, 0xCF, 0x55, 0x79, 0xB6, 0x3F, 0x2B, 0x74, 0x00, 0x13, 0x3E, 
   0x10, 0x6A, 0x67, 0x9F, 0x95, 0x98, 0xF1, 0x96, 0xE3, 0x6A, 0x72, 0xA8, 0x09, 0x37, 0x45, 0x02, 
   0x42, 0x67, 0x70, 0x87, 0xC4, 0x9B, 0x87, 0xC4, 0x57, 0x47, 0x4A, 0x39, 0x5D, 0x66, 0x65, 0x68, 
   0x94, 0x37, 0x51, 0x94, 0x1C, 0x3B, 0x6C, 0x4C, 0x5A, 0x68, 0x9E, 0x95, 0xC4, 0xA8, 0xB0, 0xCE, 
   0x53, 0x41, 0x85, 0x00, 0x1C, 0x00, 0x4B, 0x5E, 0x79, 0x50, 0x64, 0x79, 0x29, 0x16, 0x58, 0x4C, 
   0x57, 0x83, 0x69, 0xB4, 0xC9, 0x5E, 0x80, 0xA6, 0x5D, 0x27, 0x59, 0x50, 0x20, 0x57, 0x33, 0x70, 
   0x79, 0x33, 0x5A, 0x90, 0x5B, 0x5B, 0x5E, 0x67, 0x72, 0x6B, 0x45, 0x4A, 0xA6, 0x23, 0x50, 0xAC, 
   0x4C, 0x67, 0x9A, 0x6F, 0x60, 0x7A, 0x58, 0x43, 0x4A, 0x35, 0x3D, 0x50, 0x4B, 0x60, 0x9B, 0x56, 
   0x93, 0x97, 0x34, 0x2B, 0x75, 0x56, 0x13, 0x96, 0x56, 0x6F, 0x89, 0x0D, 0x55, 0x2E, 0x6F, 0x68, 
   0x6E, 0x86, 0x84, 0xB5, 0x2A, 0x72, 0xA5, 0x55, 0x5D, 0xAD, 0x63, 0x37, 0x95, 0x23, 0x2F, 0x19, 
   0x00, 0x19, 0x00, 0x5F, 0x2D, 0x90, 0x79, 0x71, 0xDF, 0x58, 0x9C, 0x7B, 0x6D, 0x96, 0xAD, 0x4D, 
   0x59, 0xA9, 0x07, 0x00, 0x1D, 0x0E, 0x28, 0x1D, 0x6C, 0x73, 0xB4, 0x8A, 0x7B, 0xB7, 0x2A, 0x69, 
   0x83, 0x45, 0x3B, 0x5A, 0x61, 0x3C, 0x60, 0x28, 0x82, 0x9B, 0x4A, 0x56, 0x97, 0x55, 0x5C, 0x6E, 
   0x4E, 0x8D, 0x89, 0x32, 0x42, 0x5B, 0x33, 0x03, 0x51, 0x6D, 0x50, 0x98, 0x78, 0x9C, 0x9F, 0x21, 
   0x8B, 0x83, 0x0B, 0x18, 0x56, 0x4E, 0x00, 0x69, 0x96, 0x91, 0xB6, 0xB7, 0xFF, 0xDD, 0x4B, 0xA0, 
   0xC1, 0x00, 0x00, 0x01, 0x07, 0x00, 0x00, 0x88, 0x2F, 0xD2, 0x86, 0xCE, 0xCB, 0x58, 0x8E, 0x55, 
   0x13, 0x50, 0x94, 0x25, 0x5F, 0x95, 0x94, 0x6A, 0x74, 0x73, 0x7B, 0xB8, 0x3E, 0x5D, 0x8F, 0x46, 
   0x77, 0x7B, 0x4E, 0x72, 0x9D, 0x24, 0x00, 0x2E, 0x00, 0x00, 0x12, 0x0F, 0xC2, 0x7A, 0xFF, 0xFF, 
   0xFF, 0xB4, 0x5D, 0xE0, 0x00, 0x00, 0x1B, 0x0D, 0x78, 0x4D, 0x84, 0xD4, 0xDB, 0x1E, 0x5B, 0x70, 
   0x14, 0x14, 0x3D, 0x98, 0x31, 0xDC, 0x7C, 0x99, 0xCE, 0x00, 0x71, 0x00, 0x59, 0x2C, 0x49, 0xCA, 
   0x86, 0xFF, 0x22, 0x84, 0xAB, 0x00, 0x0B, 0x1B, 0x56, 0x1B, 0x48, 0x8B, 0x62, 0xBC, 0x58, 0xB3, 
   0xC2, 0x39, 0x7E, 0x86, 0x49, 0x09, 0x76, 0x37, 0x41, 0x25, 0x4E, 0x54, 0x55, 0x60, 0xA0, 0xE0, 
   0x32, 0x82, 0x9C, 0x21, 0x00, 0x19, 0x6D, 0x26, 0x85, 0x79, 0xAD, 0xAF, 0x2F, 0x7C, 0x6C, 0x4B, 
   0x81, 0x5B, 0x66, 0x3B, 0xA1, 0x00, 0x2F, 0x9E, 0x46, 0x74, 0xAA, 0xA8, 0x69, 0x97, 0x3A, 0x61, 
   0x73, 0x00, 0x22, 0x78, 0x4C, 0x3A, 0x83, 0xB4, 0xA2, 0x88, 0x6E, 0x8B, 0x77, 0x00, 0x4F, 0x5B, 
   0x2B, 0x14, 0x9C, 0x61, 0x31, 0xA3, 0x5D, 0x78, 0x60, 0x47, 0x6A, 0x89, 0x42, 0x3E, 0x8B, 0x74, 
   0x93, 0xB4, 0x56, 0x9D, 0xD0, 0x2B, 0x50, 0x98, 0x29, 0x0E, 0x33, 0x24, 0x1A, 0x21, 0x27, 0x7F, 
   0x6A, 0x6F, 0x83, 0xEC, 0xA3, 0x6D, 0xF3, 0x52, 0x6C, 0x56, 0x17, 0x64, 0x3D, 0x55, 0x51, 0xA4, 
   0x4A, 0x2E, 0xAB, 0x5B, 0x5C, 0x6C, 0x50, 0x8A, 0x8D, 0x56, 0x45, 0xB3, 0x3F, 0x1C, 0x35, 0x29, 
   0x5C, 0x2C, 0x58, 0x7A, 0xF1, 0x75, 0x7B, 0xE7, 0x5E, 0x6A, 0x83, 0x51, 0x5D, 0x73, 0x4F, 0x66, 
   0x43, 0x31, 0x4D, 0x6B, 0x25, 0x2F, 0xB0, 0x32, 0x20, 0x67, 0x78, 0x73, 0x6F, 0x8E, 0xB9, 0xEC, 
   0x1A, 0x83, 0x89, 0x00, 0x00, 0x27, 0x4E, 0x15, 0x66, 0x73, 0x95, 0xD4, 0x63, 0x9C, 0x95, 0x40, 
   0x46, 0x40, 0x23, 0x1D, 0x6F, 0x63, 0x5D, 0xC1, 0x90, 0xAD, 0xD7, 0x38, 0x67, 0x72, 0x0F, 0x15, 
   0x3C, 0x37, 0x42, 0x4D, 0x61, 0x66, 0x89, 0x67, 0x78, 0xE0, 0x40, 0x40, 0x67, 0x3A, 0x69, 0x33, 
   0x6D, 0x85, 0x8F, 0x86, 0x83, 0xBE, 0x00, 0x0A, 0x8A, 0x00, 0x0B, 0x35, 0x52, 0x97, 0x75, 0xA5, 
   0xC6, 0xBC, 0x5B, 0x35, 0xAC, 0x16, 0x22, 0x72, 0x34, 0x45, 0x4A, 0x53, 0x4E, 0x91, 0x46, 0x59, 
   0xB1, 0x91, 0xB7, 0xAC, 0xA6, 0xA0, 0xB1, 0x00, 0x42, 0x76, 0x1D, 0x3F, 0x69, 0x56, 0x4A, 0x90, 
   0x52, 0x62, 0x85, 0x70, 0x95, 0xAC, 0x5E, 0x57, 0x6C, 0x15, 0x2F, 0x51, 0x4F, 0x6F, 0xC4, 0x6C, 
   0x81, 0x92, 0x60, 0x71, 0x87, 0x32, 0x5F, 0x9D, 0x33, 0x59, 0x6A, 0x62, 0x6F, 0x91, 0x74, 0x5D, 
   0xAD, 0x56, 0x52, 0x73, 0x28, 0x65, 0x5C, 0x29, 0x72, 0x80, 0x85, 0x94, 0xC6, 0x84, 0x86, 0xA9, 
   0x00, 0x1D, 0x6F, 0x17, 0x1D, 0x6E, 0x96, 0x96, 0x9C, 0x85, 0x8C, 0xA8, 0x23, 0x4D, 0x7A, 0x3D, 
   0x5C, 0x8A, 0x5A, 0x67, 0x94, 0x6A, 0x72, 0x97, 0x57, 0x77, 0x78, 0x06, 0x32, 0x3E, 0x18, 0x3E, 
   0x51, 0x6B, 0x79, 0xCD, 0xA1, 0x70, 0xC4, 0x6C, 0x87, 0x90, 0x20, 0x64, 0x61, 0x1F, 0x62, 0x72, 
   0x3D, 0x4A, 0xA0, 0x57, 0x34, 0x79, 0x70, 0x6F, 0x97, 0x55, 0x98, 0xB9, 0x70, 0x5F, 0x74, 0x41, 
   0x3C, 0x68, 0x36, 0x5A, 0x80, 0x70, 0x99, 0x99, 0x9D, 0x81, 0xD2, 0x56, 0x4B, 0x90, 0x0A, 0x27, 
   0x48, 0x00, 0x39, 0x37, 0x5E, 0x7C, 0x7F, 0x9B, 0x9B, 0xF4, 0x8A, 0x74, 0x9A, 0x38, 0x50, 0x6B, 
   0x35, 0x7B, 0x9C, 0x50, 0x46, 0x96, 0x5F, 0x4B, 0x83, 0x25, 0x83, 0x81, 0x26, 0x50, 0x69, 0x6D, 
   0x30, 0x3D, 0x33, 0x94, 0x7A, 0x59, 0x90, 0xD9, 0xDC, 0x78, 0xD9, 0x89, 0x75, 0x85, 0x00, 0x2F, 
   0x26, 0x0E, 0x0E, 0x38, 0xAA, 0x99, 0xB3, 0xA0, 0xA6, 0xF9, 0x49, 0x55, 0x6F, 0x08, 0x53, 0x45, 
   0x3D, 0x53, 0x83, 0x6E, 0x54, 0xA2, 0x97, 0xAA, 0xA8, 0x73, 0x5F, 0xA7, 0x00, 0x2C, 0x5D, 0x44, 
   0x7C, 0x8F, 0x95, 0x98, 0x9A, 0x4C, 0x4E, 0x61, 0x35, 0x47, 0x77, 0x7E, 0x80, 0x89, 0x50, 0x69, 
   0x8F, 0x4F, 0x52, 0x9B, 0x55, 0x64, 0xB1, 0x55, 0x8B, 0x87, 0x4A, 0x68, 0x51, 0x66, 0x35, 0x79, 
   0x92, 0x68, 0x9C, 0x00, 0x86, 0x86, 0x4D, 0x54, 0x6D, 0x4D, 0x49, 0x5D, 0x68, 0x6C, 0x86, 0x40, 
   0x6D, 0xB5, 0x23, 0x78, 0x66, 0x5C, 0x4F, 0x71, 0x5C, 0x37, 0xAF, 0x29, 0x53, 0x6F, 0x56, 0x60, 
   0x69, 0x61, 0x72, 0x8B, 0x38, 0x76, 0x8B, 0x21, 0x25, 0x53, 0x56, 0x3C, 0x7C, 0x68, 0x67, 0xBC, 
   0x58, 0xAD, 0x93, 0x51, 0x78, 0x4D, 0x34, 0x1B, 0x84, 0x29, 0x3D, 0x8F, 0x58, 0x88, 0x57, 0x8B, 
   0x76, 0x80, 0x6D, 0x46, 0xDA, 0x04, 0x12, 0x71, 0x0F, 0x51, 0x00, 0x56, 0x70, 0x78, 0x65, 0x50, 
   0xE3, 0x8D, 0x68, 0xBD, 0x64, 0x9B, 0x82, 0x39, 0x72, 0xA5, 0x48, 0x46, 0x5C, 0x35, 0x2C, 0x05, 
   0x24, 0x53, 0x78, 0x47, 0x42, 0xBF, 0x5F, 0x44, 0x9D, 0x49, 0x5E, 0x3B, 0x33, 0x61, 0x38, 0x6C, 
   0x9A, 0xFB, 0x65, 0x87, 0xD1, 0x14, 0x1E, 0x00, 0x20, 0x17, 0x01, 0x57, 0x5E, 0xC7, 0xA2, 0xA4, 
   0xFF, 0x79, 0xA7, 0x88, 0x00, 0x00, 0x00, 0x09, 0x00, 0x32, 0x72, 0xB1, 0xF8, 0x96, 0xE3, 0xC1, 
   0x51, 0x54, 0x43, 0x49, 0x49, 0xC3, 0x30, 0x4C, 0x66, 0x00, 0x02, 0x00, 0x6C, 0x54, 0xC7, 0x9A, 
   0xB1, 0xFF, 0x00, 0x35, 0x2D, 0x18, 0x20, 0x00, 0x8C, 0x85, 0xD0, 0x66, 0xC0, 0xFF, 0x43, 0x85, 
   0x3B, 0x6E, 0x26, 0x00, 0x22, 0x13, 0xC2, 0x28, 0x59, 0xBF, 0x6D, 0x6E, 0x64, 0x51, 0x98, 0x6F, 
   0x51, 0x93, 0xA2, 0x3B, 0x47, 0x8C, 0x32, 0x51, 0x5B, 0x83, 0x68, 0x90, 0xAA, 0x6F, 0xFD, 0x18, 
   0x9B, 0xAA, 0x20, 0x7A, 0x38, 0x26, 0x00, 0x62, 0x1E, 0x00, 0x3C, 0x7D, 0xB5, 0x79, 0x85, 0xD5, 
   0xD8, 0x52, 0x73, 0xB7, 0x60, 0x51, 0x6B, 0x3B, 0x16, 0x70, 0x34, 0x4A, 0x97, 0x44, 0xD2, 0x9D, 
   0x3A, 0x3C, 0x86, 0x3C, 0x00, 0x5E, 0x60, 0x8F, 0x87, 0x77, 0xFF, 0xF2, 0x7B, 0x61, 0x95, 0x17, 
   0x00, 0x37, 0x16, 0x4B, 0x6A, 0x72, 0xB2, 0xB4, 0x79, 0x56, 0x8C, 0x29, 0x3D, 0x31, 0x39, 0x4E, 
   0x98, 0x61, 0x5A, 0xD0, 0x3F, 0x60, 0x57, 0x5A, 0x82, 0x72, 0x48, 0x6F, 0xB9, 0x1F, 0x00, 0x03, 
   0x10, 0x1B, 0x34, 0x73, 0xCF, 0xFF, 0x9D, 0x8C, 0xA0, 0x36, 0x13, 0x16, 0x4F, 0x61, 0x81, 0x20, 
   0x5C, 0xA8, 0x16, 0x35, 0x49, 0x7E, 0xA2, 0x67, 0x8A, 0x8F, 0xB9, 0x07, 0x00, 0x93, 0x1D, 0x38, 
   0x92, 0x7E, 0xBB, 0xB6, 0x58, 0x4A, 0x42, 0x2B, 0x18, 0x2C, 0x7A, 0x9B, 0xAC, 0x78, 0x95, 0xCB, 
   0x00, 0x31, 0x80, 0x26, 0x2A, 0x5C, 0x66, 0x31, 0x62, 0x63, 0x62, 0x6A, 0x4D, 0x8D, 0xA1, 0x4D, 
   0x83, 0xBA, 0x63, 0x82, 0xA3, 0x6D, 0x47, 0x9A, 0x42, 0x60, 0x8A, 0x1D, 0x47, 0x2D, 0x02, 0x00, 
   0x36, 0x34, 0x53, 0xB8, 0xAF, 0xE4, 0xED, 0xBA, 0xAA, 0xA6, 0x28, 0x0D, 0x30, 0x00, 0x10, 0x46, 
   0x31, 0x83, 0x88, 0x79, 0x69, 0xD4, 0x86, 0x6E, 0xD9, 0x4C, 0x5C, 0x4D, 0x28, 0x4F, 0x39, 0x3E, 
   0x2D, 0x6E, 0x2E, 0x51, 0x8E, 0x4D, 0x75, 0xCF, 0x9D, 0x97, 0xC7, 0x4B, 0x4B, 0x68, 0x00, 0x3E, 
   0x49, 0x26, 0x6B, 0x60, 0x7C, 0x76, 0x9B, 0x55, 0x48, 0xBE, 0x37, 0x32, 0x8F, 0x26, 0x7E, 0x27, 
   0x54, 0x95, 0x65, 0x65, 0x5A, 0xB1, 0x38, 0x0E, 0xA6, 0x44, 0x48, 0x61, 0x57, 0x8A, 0x61, 0x63, 
   0x6F, 0x74, 0x67, 0x75, 0xB5, 0x22, 0x62, 0xD0, 0x07, 0x29, 0x35, 0x74, 0x69, 0x56, 0xA7, 0xBD, 
   0xD3, 0x37, 0x43, 0x9E, 0x00, 0x00, 0x25, 0x36, 0x42, 0x58, 0x84, 0x8F, 0xCC, 0x7F, 0x91, 0x90, 
   0x45, 0x52, 0x63, 0x33, 0x34, 0x74, 0x6A, 0x5C, 0xA2, 0x5C, 0x89, 0xAC, 0x00, 0x49, 0x50, 0x00, 
   0x16, 0x4C, 0x4E, 0x3F, 0xA4, 0x80, 0x87, 0x97, 0x71, 0x94, 0xA9, 0x3C, 0x4F, 0x9E, 0x19, 0x1C, 
   0x87, 0x32, 0x4C, 0x8D, 0x85, 0x94, 0x9E, 0xAD, 0xC2, 0x82, 0x59, 0x69, 0x91, 0x00, 0x05, 0x9A, 
   0x00, 0x48, 0x76, 0x5C, 0x5B, 0x39, 0x6C, 0x5E, 0x97, 0x85, 0x8D, 0xDE, 0x58, 0x6B, 0x94, 0x73, 
   0x5A, 0x87, 0x3D, 0x6A, 0x9C, 0x20, 0x7B, 0x68, 0x43, 0x4D, 0x7E, 0x51, 0x4D, 0x74, 0x6F, 0x70, 
   0x98, 0x5F, 0x76, 0xD1, 0x6E, 0x5F, 0x85, 0x28, 0x4E, 0x46, 0x0D, 0x65, 0x85, 0xA8, 0x87, 0xD0, 
   0xB2, 0x63, 0x96, 0x20, 0x4A, 0x3E, 0x00, 0x28, 0x60, 0x27, 0x6E, 0xA7, 0xD6, 0x92, 0xD1, 0x8D, 
   0x70, 0x81, 0x2E, 0x63, 0x95, 0x40, 0x77, 0xAD, 0x1B, 0x2B, 0x55, 0x00, 0x2B, 0x2C, 0x52, 0x6C, 
   0x7E, 0xAB, 0x7A, 0xA4, 0x56, 0x70, 0x90, 0x17, 0x65, 0xA8, 0x76, 0x7B, 0xB9, 0x49, 0x68, 0x73, 
   0x23, 0x34, 0x5B, 0x69, 0x40, 0x72, 0x70, 0x86, 0x90, 0x65, 0x87, 0xA3, 0x59, 0x53, 0xC4, 0x36, 
   0x37, 0x61, 0x53, 0x93, 0x3A, 0x75, 0x93, 0xBE, 0x57, 0x58, 0xD6, 0x23, 0x2E, 0x69, 0x2F, 0x4C, 
   0x5C, 0x80, 0x81, 0x95, 0x64, 0xAA, 0xA1, 0x31, 0x48, 0x69, 0x3D, 0x37, 0x97, 0x88, 0x6B, 0x98, 
   0x83, 0xA0, 0x98, 0x69, 0x88, 0xB8, 0x37, 0x46, 0x71, 0x00, 0x22, 0x47, 0x43, 0x6D, 0x76, 0x85, 
   0x8A, 0xA6, 0x4F, 0x2C, 0x81, 0x30, 0x4B, 0x72, 0xAF, 0xDB, 0xE0, 0xD5, 0xA0, 0xE9, 0x1E, 0x23, 
   0x5B, 0x00, 0x1A, 0x23, 0x43, 0x1C, 0x6E, 0x87, 0x81, 0x7E, 0x6F, 0xB8, 0xD6, 0x7A, 0x84, 0xB4, 
   0x6C, 0x5F, 0x74, 0x30, 0x5C, 0x9F, 0x00, 0x23, 0x54, 0x2D, 0x47, 0x51, 0xAE, 0xA4, 0xF7, 0xA4, 
   0x82, 0xB2, 0x3C, 0x26, 0x33, 0x2F, 0x59, 0x77, 0x68, 0x70, 0xAC, 0x63, 0x6A, 0x96, 0x51, 0x4E, 
   0x6E, 0x5C, 0x65, 0x90, 0x88, 0xA2, 0xC7, 0x58, 0x61, 0x95, 0x23, 0x14, 0x25, 0x1D, 0x20, 0x1F, 
   0x33, 0x58, 0x7A, 0xE5, 0xD8, 0xFF, 0x5A, 0x56, 0x6F, 0x65, 0x4B, 0x64, 0x52, 0x8F, 0xA3, 0x4B, 
   0x6B, 0x81, 0x4A, 0x19, 0x6A, 0x2D, 0x2A, 0x81, 0x3F, 0x75, 0x82, 0x62, 0x55, 0xA9, 0x51, 0x67, 
   0x86, 0x50, 0x7D, 0x5E, 0x3E, 0x53, 0x80, 0x10, 0x24, 0x9C, 0x4A, 0x30, 0x7A, 0x6E, 0x76, 0x58, 
   0x68, 0x7E, 0x86, 0x34, 0x51, 0xB4, 0x1D, 0x5C, 0x86, 0x51, 0x7D, 0x7A, 0x6F, 0x48, 0x85, 0x5D, 
   0x3C, 0x95, 0x61, 0x69, 0x7C, 0x2B, 0x7F, 0x47, 0x04, 0x2F, 0x3D, 0x61, 0x41, 0xAD, 0x7A, 0x75, 
   0xBB, 0x3C, 0x44, 0x87, 0x7F, 0x61, 0x95, 0x4B, 0x84, 0x43, 0x0B, 0x78, 0x26, 0x60, 0x53, 0xB6, 
   0x81, 0x5B, 0xD2, 0x24, 0x58, 0x85, 0x17, 0x1E, 0x20, 0x3F, 0x15, 0x4D, 0x48, 0x6F, 0x89, 0x50, 
   0x7E, 0x55, 0x90, 0x8A, 0xCF, 0x61, 0x71, 0xD9, 0x00, 0x00, 0x0F, 0x3E, 0x58, 0x4D, 0x8F, 0xB3, 
   0xDC, 0x56, 0x4B, 0x8D, 0x21, 0x1B, 0x48, 0x32, 0x00, 0x4F, 0x3F, 0x5B, 0x69, 0x5D, 0xBB, 0xBC, 
   0x85, 0xA5, 0xEF, 0x4F, 0x47, 0x5F, 0x03, 0x3D, 0x2F, 0x40, 0x5C, 0xA6, 0x42, 0x23, 0x86, 0x45, 
   0x16, 0x61, 0xA1, 0x9D, 0xC2, 0x50, 0xB1, 0xB1, 0x00, 0x55, 0x60, 0x13, 0x15, 0x34, 0x89, 0x4B, 
   0x88, 0xA7, 0x9E, 0xFD, 0x82, 0xBB, 0xC9, 0x0C, 0x6F, 0x4F, 0x00, 0x06, 0x63, 0x55, 0x61, 0xB1, 
   0x73, 0x90, 0x5B, 0x52, 0x79, 0x57, 0x47, 0x34, 0xAE, 0x4D, 0x34, 0x89, 0x58, 0xAB, 0xA5, 0x6D, 
   0x72, 0xBA, 0x0C, 0x00, 0x58, 0x15, 0x81, 0x5D, 0xC2, 0xFF, 0xC3, 0x94, 0x29, 0x9F, 0x00, 0x00, 
   0x00, 0x37, 0xCF, 0x79, 0xCC, 0xDC, 0xFF, 0x6A, 0x3A, 0xBB, 0x01, 0x09, 0x20, 0x3F, 0x58, 0x8A, 
   0x84, 0x92, 0xBE, 0x0E, 0x71, 0x47, 0x44, 0x3F, 0x5F, 0xE3, 0x72, 0xFF, 0x41, 0xB5, 0xDA, 0x00, 
   0x31, 0x00, 0x5B, 0x08, 0x3B, 0xA1, 0xAE, 0xE7, 0x40, 0xC3, 0x9D, 0x21, 0x30, 0x62, 0x49, 0x00, 
   0x6C, 0x44, 0x3B, 0x40, 0x6D, 0xCD, 0xBF, 0x66, 0xAB, 0xE6, 0x2B, 0x24, 0x2C, 0x0F, 0x00, 0x00, 
   0x61, 0x54, 0x82, 0x7A, 0xBB, 0xC1, 0x42, 0xB6, 0xC4, 0x73, 0x52, 0xA7, 0x3E, 0x04, 0x6B, 0x00, 
   0x16, 0x52, 0x4F, 0xB1, 0x74, 0x84, 0x96, 0x7B, 0x45, 0x2E, 0x62, 0x22, 0x53, 0xB4, 0x4B, 0x4E, 
   0xDB, 0x7F, 0x49, 0x50, 0x68, 0x82, 0x4E, 0x1E, 0x49, 0x72, 0x2F, 0x33, 0x8C, 0x85, 0x78, 0xCC, 
   0x61, 0x94, 0x9D, 0x09, 0x2C, 0x4B, 0x0F, 0x20, 0x56, 0x6C, 0x60, 0x91, 0x68, 0x79, 0x9F, 0x3B, 
   0x5E, 0x95, 0x3B, 0x37, 0x84, 0x7F, 0x8D, 0xA6, 0x72, 0x91, 0x78, 0x04, 0x4A, 0x82, 0x2A, 0x16, 
   0x9E, 0x48, 0x6C, 0x5F, 0x3F, 0x74, 0x77, 0x79, 0x6E, 0xE4, 0x78, 0x5C, 0x98, 0x00, 0x28, 0x2B, 
   0x09, 0x68, 0x70, 0x5B, 0x90, 0xD8, 0x6F, 0x4C, 0x89, 0x58, 0x68, 0x5A, 0x4B, 0x67, 0x9D, 0x28, 
   0x3E, 0x91, 0x44, 0x5B, 0x5D, 0x4B, 0x67, 0x74, 0x67, 0x5C, 0xA2, 0x44, 0x67, 0x86, 0x38, 0x45, 
   0x85, 0x44, 0x56, 0x79, 0x6D, 0x6D, 0x6E, 0x7C, 0x77, 0xBD, 0x1F, 0x47, 0x99, 0x03, 0x14, 0x26, 
   0x71, 0x54, 0x60, 0x84, 0xAB, 0xE4, 0x4A, 0x81, 0xB1, 0x05, 0x00, 0x38, 0x44, 0x1B, 0x3A, 0x7E, 
   0xA2, 0xE2, 0x50, 0xBA, 0xCB, 0x22, 0x35, 0x40, 0x2F, 0x07, 0x4F, 0x87, 0x7A, 0xA0, 0xA2, 0xB3, 
   0xB8, 0x4E, 0x72, 0xBC, 0x00, 0x19, 0x5D, 0x00, 0x08, 0x00, 0x7B, 0x81, 0x6A, 0x7D, 0x95, 0xFC, 
   0x34, 0x40, 0x9E, 0x23, 0x41, 0x4E, 0x89, 0xAE, 0xA8, 0x86, 0x9A, 0xA7, 0x16, 0x14, 0x6C, 0x00, 
   0x00, 0x33, 0x26, 0x4B, 0x4E, 0xB5, 0xC3, 0xD6, 0xAC, 0xA3, 0xD9, 0x43, 0x79, 0x8E, 0x12, 0x42, 
   0x74, 0x00, 0x04, 0x51, 0x50, 0x6E, 0x6F, 0xC5, 0xB0, 0xDD, 0x95, 0x9F, 0xC5, 0x06, 0x62, 0x60, 
   0x00, 0x00, 0x3C, 0x16, 0x2D, 0x67, 0x72, 0x9E, 0xB0, 0x9E, 0xA6, 0xDA, 0x8D, 0x67, 0x95, 0x2F, 
   0x65, 0x92, 0x26, 0x4D, 0x7F, 0x53, 0x52, 0x6C, 0x3D, 0x6F, 0x72, 0x4A, 0x53, 0x7F, 0x4D, 0x66, 
   0x92, 0x82, 0x8E, 0xAA, 0x76, 0x71, 0xA4, 0x40, 0x4D, 0x90, 0x23, 0x3B, 0x67, 0x52, 0x70, 0x67, 
   0xA1, 0xAE, 0xBC, 0x5E, 0x6E, 0x99, 0x00, 0x16, 0x38, 0x1A, 0x28, 0x72, 0xA3, 0x91, 0xB3, 0xC7, 
   0xA3, 0xE1, 0x6D, 0x85, 0xA0, 0x00, 0x21, 0x36, 0x00, 0x3D, 0x62, 0x73, 0x71, 0xAC, 0x8C, 0x62, 
   0x91, 0x3D, 0x63, 0x59, 0x38, 0x69, 0x7D, 0x66, 0x64, 0xA2, 0x2F, 0x64, 0xBA, 0x69, 0x64, 0x9C, 
   0x75, 0x5E, 0x6D, 0x36, 0x86, 0x67, 0x47, 0x5D, 0x95, 0x5E, 0x41, 0x9B, 0x48, 0x7B, 0x90, 0x5F, 
   0x81, 0x7F, 0x80, 0x75, 0xA5, 0x3F, 0x4C, 0x5B, 0x17, 0x40, 0x61, 0x30, 0x47, 0x97, 0x8E, 0x94, 
   0xB5, 0x8F, 0xAB, 0xC6, 0x64, 0x53, 0x7F, 0x06, 0x23, 0x44, 0x01, 0x3A, 0x67, 0x70, 0x70, 0xBE, 
   0xB6, 0x7E, 0xB3, 0x6A, 0x95, 0x73, 0x05, 0x76, 0x71, 0x1A, 0x24, 0x49, 0x60, 0x67, 0x96, 0x41, 
   0x57, 0xC0, 0x71, 0x4D, 0x99, 0x94, 0x82, 0x70, 0x17, 0x68, 0x82, 0x39, 0x83, 0xB0, 0xDC, 0x96, 
   0xEB, 0x48, 0x26, 0x7F, 0x00, 0x00, 0x00, 0x23, 0x3F, 0x40, 0xDB, 0xB0, 0xCF, 0xCD, 0xB2, 0xEE, 
   0x72, 0x7C, 0xAD, 0x00, 0x1D, 0x31, 0x00, 0x11, 0x30, 0x49, 0x7A, 0xA4, 0xC6, 0xAA, 0xB8, 0x8F, 
   0x5B, 0x7F, 0x2D, 0x4F, 0x73, 0x47, 0x71, 0x8A, 0x74, 0x71, 0x90, 0x3B, 0x54, 0x91, 0x5D, 0x71, 
   0xAE, 0x7E, 0xA3, 0xB1, 0x4E, 0x79, 0x80, 0x45, 0x2B, 0x77, 0x31, 0x30, 0x5E, 0x00, 0x43, 0x37, 
   0x44, 0x64, 0x6F, 0xFF, 0xBB, 0xFF, 0x5F, 0x7A, 0xA0, 0x70, 0x8B, 0xBC, 0x41, 0x6C, 0x5F, 0x34, 
   0x4D, 0x52, 0x4F, 0x29, 0x90, 0x38, 0x35, 0x75, 0x28, 0x5A, 0x81, 0x62, 0xA0, 0x87, 0x73, 0x6C, 
   0x8D, 0x40, 0x43, 0x7B, 0x50, 0x3C, 0x75, 0x61, 0x70, 0x8B, 0x28, 0x7B, 0x8A, 0x4F, 0x36, 0x61, 
   0x61, 0x15, 0x68, 0x2E, 0x56, 0xB3, 0x51, 0xB2, 0x7B, 0x7A, 0x6C, 0x81, 0x51, 0x1A, 0xCF, 0x33, 
   0x52, 0x81, 0x21, 0x5E, 0x00, 0x4A, 0x7B, 0x5F, 0x83, 0x5D, 0xE5, 0x2D, 0x35, 0x90, 0x3E, 0x51, 
   0x5C, 0x65, 0x74, 0xAF, 0x1D, 0x21, 0x43, 0x51, 0x56, 0x33, 0x7A, 0xB3, 0xA8, 0x51, 0x9B, 0xF9, 
   0x60, 0x52, 0xAC, 0x51, 0x2B, 0x34, 0x0A, 0x18, 0x24, 0x00, 0x3B, 0x5D, 0x5D, 0x4F, 0x7C, 0x4F, 
   0x59, 0x6F, 0x51, 0x6D, 0x57, 0x7A, 0x97, 0xF9, 0x6D, 0xA5, 0xFF, 0x31, 0x4C, 0x0C, 0x00, 0x00, 
   0x00, 0x37, 0x27, 0x86, 0xA0, 0x74, 0xFF, 0x57, 0xC5, 0xA2, 0x1D, 0x00, 0x18, 0x4A, 0x17, 0x7F, 
   0x5B, 0xB9, 0xD1, 0x56, 0x9E, 0x61, 0x5A, 0x74, 0x82, 0x3C, 0x47, 0xBE, 0x03, 0x07, 0x29, 0x38, 
   0x15, 0x36, 0xB7, 0xAE, 0xD3, 0x66, 0xD2, 0xFF, 0x00, 0x47, 0x00, 0x22, 0x00, 0x00, 0x82, 0x3F, 
   0xF5, 0x8C, 0xBD, 0xFF, 0x7A, 0xDD, 0x72, 0x5A, 0x6D, 0x73, 0x00, 0x39, 0x9C, 0x1B, 0x08, 0x4F, 
   0x4A, 0x41, 0x59, 0x68, 0x71, 0x7D, 0x79, 0x84, 0x96, 0x1C, 0x7C, 0xC9, 0x15, 0x36, 0x3A, 0x29, 
   0x00, 0x4D, 0x50, 0x74, 0xB7, 0xAE, 0xFF, 0xCA, 0x8B, 0xB1, 0xCD, 0x21, 0x00, 0x61, 0x2E, 0x1C, 
   0x29, 0x2D, 0x1F, 0x30, 0x1E, 0x9C, 0xA0, 0x86, 0xDB, 0xD1, 0x69, 0x55, 0xAE, 0x1E, 0x00, 0x2A, 
   0x18, 0x54, 0x46, 0x6F, 0xFF, 0xDB, 0x91, 0x60, 0xC4, 0x13, 0x00, 0x2F, 0x1E, 0x47, 0x7E, 0x85, 
   0xD7, 0xDE, 0x5D, 0x82, 0x6A, 0x40, 0x24, 0x1E, 0x4A, 0x65, 0xAC, 0x4E, 0x5D, 0xC2, 0x32, 0x3A, 
   0x1C, 0x3E, 0x3A, 0x45, 0x6C, 0x58, 0xE0, 0x55, 0x64, 0x91, 0x21, 0x3C, 0x4B, 0x4A, 0x6A, 0x9F, 
   0x79, 0x6C, 0x72, 0x2F, 0x3C, 0x03, 0x4B, 0x98, 0xAB, 0x5B, 0x97, 0xFF, 0x22, 0x1D, 0x6D, 0x56, 
   0x5A, 0x3C, 0x7D, 0x65, 0x79, 0x11, 0x3D, 0x7A, 0x2D, 0x5A, 0x70, 0x6D, 0x71, 0xA5, 0x62, 0x5F, 
   0x89, 0x2E, 0x26, 0x62, 0x34, 0x5F, 0x74, 0x6D, 0x87, 0xC0, 0x3A, 0x3D, 0x9E, 0x41, 0x3E, 0x59, 
   0x85, 0x73, 0x86, 0x61, 0x8A, 0x8B, 0x0F, 0x55, 0x7F, 0x0F, 0x43, 0x8A, 0x66, 0x4E, 0x7F, 0x6E, 
   0x39, 0x69, 0x4C, 0x80, 0x76, 0x2A, 0x82, 0x74, 0x58, 0x5A, 0xBB, 0x7A, 0x54, 0xD7, 0x66, 0xA6, 
   0xA6, 0x3B, 0x4E, 0x46, 0x17, 0x00, 0x3F, 0x00, 0x42, 0x6F, 0x72, 0x8F, 0xCD, 0xB3, 0xA2, 0xBC, 
   0x3A, 0x3B, 0x75, 0x0B, 0x3A, 0x24, 0x50, 0x78, 0x87, 0x63, 0x5D, 0xD3, 0x58, 0x5D, 0xB1, 0x51, 
   0x7E, 0x87, 0x56, 0x4F, 0x83, 0x4E, 0x3C, 0x3D, 0x00, 0x37, 0x44, 0x3E, 0x60, 0xBF, 0x79, 0x7F, 
   0xB6, 0x6E, 0x58, 0x98, 0x4A, 0x69, 0xA0, 0x20, 0x89, 0x43, 0x36, 0x42, 0x49, 0x3D, 0x18, 0xC1, 
   0x4F, 0x3B, 0xA5, 0x56, 0x76, 0x54, 0x56, 0x7D, 0x54, 0x4A, 0x43, 0x7E, 0x3E, 0x26, 0xCB, 0x43, 
   0x60, 0xB4, 0x2D, 0x62, 0x62, 0x4C, 0x4D, 0x4A, 0x86, 0xA3, 0x9A, 0x63, 0x69, 0xAB, 0x1D, 0x1D, 
   0x7D, 0x3E, 0x67, 0x7C, 0x70, 0xAB, 0xAF, 0x4C, 0x59, 0x80, 0x00, 0x00, 0x2A, 0x19, 0x2B, 0x66, 
   0x66, 0x73, 0xE2, 0x9C, 0x9D, 0xC6, 0x51, 0x80, 0x4D, 0x2C, 0x27, 0x6D, 0x30, 0x31, 0x8F, 0x2A, 
   0x5B, 0x68, 0x2C, 0x4D, 0x5A, 0x4C, 0x7E, 0xA2, 0x7C, 0x96, 0xD7, 0x7C, 0x73, 0xB4, 0x30, 0x5A, 
   0x57, 0x35, 0x3C, 0x56, 0x30, 0x20, 0x9B, 0x5B, 0x62, 0xA2, 0x8F, 0xA3, 0xA6, 0x82, 0x98, 0x50, 
   0x19, 0x36, 0x3A, 0x00, 0x2A, 0xB3, 0x48, 0x70, 0xA5, 0x9B, 0x8E, 0x7E, 0x7A, 0x77, 0xC7, 0x46, 
   0x65, 0x86, 0x33, 0x4D, 0x62, 0x60, 0x58, 0xA0, 0x3E, 0x53, 0x6D, 0x23, 0x6B, 0x8B, 0x79, 0x72, 
   0xA3, 0x64, 0x72, 0x77, 0x54, 0x71, 0xBB, 0x6A, 0x64, 0xB3, 0x62, 0x46, 0x72, 0x44, 0x63, 0x53, 
   0x1B, 0x64, 0x71, 0x3E, 0x75, 0xBC, 0xAB, 0x7F, 0xA5, 0x39, 0x34, 0x49, 0x0B, 0x39, 0x71, 0x8E, 
   0x8F, 0xC1, 0x89, 0x6D, 0x88, 0x22, 0x39, 0x5A, 0x38, 0x67, 0x93, 0x87, 0x85, 0xAF, 0x4D, 0x63, 
   0x87, 0x0D, 0x4C, 0x64, 0x4D, 0x68, 0x6A, 0x50, 0x68, 0x94, 0x5E, 0x4D, 0x90, 0x60, 0x5A, 0xA3, 
   0x77, 0x9F, 0xBA, 0x6A, 0x87, 0x85, 0x29, 0x35, 0x77, 0x2F, 0x29, 0x6B, 0x5E, 0x74, 0x6D, 0x91, 
   0xA8, 0xD4, 0x56, 0x57, 0xBC, 0x10, 0x22, 0x43, 0x18, 0x41, 0x2D, 0x82, 0x8E, 0xAE, 0x95, 0xA6, 
   0xEF, 0x72, 0x66, 0xA5, 0x48, 0x3B, 0x69, 0x4B, 0x5C, 0x77, 0x3A, 0x6E, 0x6B, 0x40, 0x52, 0x94, 
   0x69, 0x70, 0xAB, 0x48, 0x6C, 0x61, 0x5F, 0x84, 0x79, 0x58, 0x9F, 0xA8, 0x30, 0x2B, 0x93, 0x35, 
   0x35, 0x9A, 0x7A, 0x7F, 0xB5, 0x6F, 0x80, 0x97, 0x2A, 0x53, 0x46, 0x25, 0x6A, 0x7F, 0x7B, 0x92, 
   0xBD, 0xA2, 0x73, 0xA4, 0x1C, 0x43, 0x57, 0x00, 0x20, 0x34, 0x8D, 0x4B, 0x7B, 0xCE, 0xB4, 0xD9, 
   0x4A, 0x6A, 0xAC, 0x03, 0x36, 0x50, 0x58, 0x6E, 0x98, 0x60, 0x6E, 0xA9, 0x46, 0x2B, 0x54, 0x60, 
   0x71, 0x78, 0x9A, 0x9A, 0xDB, 0x60, 0x61, 0x91, 0x37, 0x5B, 0x63, 0x52, 0x66, 0x97, 0x85, 0x81, 
   0xCF, 0x61, 0x73, 0x87, 0x4C, 0x32, 0x4A, 0x22, 0x31, 0x49, 0x11, 0x55, 0x89, 0x6F, 0x85, 0xBF, 
   0x89, 0x8B, 0xA2, 0x46, 0x47, 0x3B, 0x46, 0x73, 0x9B, 0x46, 0x8E, 0xB1, 0x57, 0x31, 0x76, 0x50, 
   0x24, 0x74, 0x34, 0x5D, 0x74, 0x56, 0x59, 0x8B, 0x61, 0x5A, 0x75, 0x3F, 0x6B, 0x7B, 0x39, 0x65, 
   0x7C, 0x4B, 0x37, 0xB5, 0x4C, 0x48, 0x81, 0x6E, 0x93, 0x62, 0x6C, 0x75, 0x72, 0x04, 0x19, 0x8D, 
   0x15, 0x2C, 0x66, 0x6D, 0xAB, 0x4B, 0x7A, 0x78, 0xA7, 0x4C, 0x3E, 0xB2, 0x55, 0x6A, 0x82, 0x15, 
   0x59, 0x20, 0x33, 0x47, 0x5A, 0x7E, 0x47, 0xAC, 0x73, 0x74, 0xBD, 0x49, 0x79, 0x88, 0x1E, 0x17, 
   0x57, 0x0D, 0x4B, 0x29, 0x37, 0x6F, 0x43, 0x5D, 0x3E, 0xBA, 0x8C, 0x62, 0xEA, 0x63, 0xA6, 0x92, 
   0x21, 0x5A, 0x60, 0x40, 0x2E, 0x73, 0x39, 0x4D, 0x6B, 0x22, 0x47, 0x4D, 0x2F, 0x31, 0x54, 0x6F, 
   0x3F, 0x79, 0x28, 0x54, 0x88, 0x63, 0xA7, 0x96, 0xB7, 0xB1, 0xD9, 0x2B, 0x51, 0x85, 0x00, 0x00, 
   0x00, 0x30, 0x28, 0x52, 0x84, 0xC0, 0xE6, 0x8B, 0x8F, 0xC6, 0x62, 0x76, 0x95, 0x15, 0x00, 0x0A, 
   0x04, 0x00, 0x00, 0x66, 0xDA, 0xFF, 0xA6, 0xAE, 0xF0, 0x22, 0x0D, 0x27, 0x3D, 0x49, 0x5D, 0x5E, 
   0x76, 0xB8, 0x14, 0x49, 0x74, 0x2C, 0x39, 0x25, 0x83, 0x56, 0x82, 0x45, 0x4D, 0xB3, 0x14, 0x57, 
   0x83, 0x5B, 0x67, 0x76, 0x75, 0x9D, 0xFA, 0x8C, 0xB3, 0xBF, 0x8D, 0x87, 0x5A, 0x00, 0x26, 0x5B, 
   0x0A, 0x00, 0x4F, 0x82, 0x4D, 0xA5, 0x60, 0xE2, 0xA4, 0x3C, 0x80, 0x48, 0x04, 0x00, 0x54, 0x00, 
   0x15, 0x3C, 0xCA, 0xFF, 0xCA, 0xC0, 0xAA, 0xFF, 0x0D, 0x00, 0x5D, 0x25, 0x7B, 0x51, 0x8F, 0x55, 
   0xAE, 0x2C, 0x00, 0x51, 0x00, 0x4C, 0x13, 0x45, 0xB2, 0x9A, 0xB4, 0x92, 0xE2, 0x43, 0x6E, 0x93, 
   0x20, 0x21, 0x59, 0x9B, 0x48, 0xA1, 0x3E, 0xB8, 0xA5, 0x00, 0x2E, 0x3D, 0x51, 0x00, 0x4A, 0xC5, 
   0x81, 0xF6, 0x47, 0xFE, 0xC1, 0x00, 0x3E, 0x46, 0x4E, 0x00, 0x48, 0x49, 0x58, 0x6B, 0x49, 0xCB, 
   0xB1, 0x59, 0x63, 0xB7, 0x26, 0x00, 0x23, 0x27, 0x07, 0x52, 0x6D, 0x8D, 0xED, 0x68, 0xA1, 0x9E, 
   0x46, 0x51, 0x53, 0x56, 0x49, 0x79, 0x43, 0x17, 0x4D, 0x16, 0x63, 0x83, 0x62, 0xD5, 0xD9, 0xA7, 
   0x6C, 0x94, 0x2E, 0x00, 0x54, 0x1C, 0x40, 0x85, 0x4A, 0x7B, 0xA6, 0x6D, 0x66, 0x46, 0x56, 0x5B, 
   0x3D, 0x2D, 0x81, 0xB3, 0x2D, 0x42, 0xC7, 0x50, 0x2B, 0xA5, 0x62, 0x7B, 0x81, 0x35, 0x49, 0x47, 
   0x41, 0x2F, 0x70, 0x85, 0x9C, 0xCC, 0x61, 0x96, 0xA9, 0x09, 0x43, 0x5C, 0x26, 0x08, 0x6C, 0x66, 
   0x47, 0x6D, 0x5C, 0x7E, 0x6A, 0x24, 0x3D, 0x80, 0x31, 0x56, 0xCD, 0xC0, 0xBC, 0xC8, 0x79, 0x7A, 
   0x97, 0x0D, 0x25, 0x69, 0x00, 0x1C, 0x43, 0x10, 0x12, 0x28, 0x43, 0x6B, 0x98, 0xAE, 0xA2, 0xFF, 
   0xA3, 0x6E, 0x88, 0x18, 0x28, 0x08, 0x11, 0x39, 0x69, 0x50, 0x6D, 0xC7, 0x6F, 0x69, 0xAC, 0x74, 
   0x6D, 0xA3, 0x5B, 0x5A, 0x61, 0x1B, 0x36, 0x48, 0x31, 0x3B, 0x65, 0x38, 0x38, 0x69, 0x79, 0x74, 
   0xD2, 0x84, 0xA8, 0xD1, 0x21, 0x6E, 0x62, 0x1B, 0x2E, 0x43, 0x5A, 0x5A, 0x61, 0x83, 0x7B, 0xD9, 
   0x33, 0x46, 0xAA, 0x1C, 0x19, 0x14, 0x56, 0x60, 0x27, 0x8F, 0xA1, 0xD5, 0x3E, 0x99, 0xF8, 0x04, 
   0x00, 0x45, 0x33, 0x05, 0x38, 0xA1, 0xB3, 0xBC, 0x85, 0xAF, 0xB1, 0x1C, 0x46, 0x70, 0x04, 0x10, 
   0x69, 0x44, 0x39, 0x36, 0xB2, 0xAC, 0xA5, 0x7C, 0x99, 0xEA, 0x00, 0x19, 0x65, 0x00, 0x00, 0x04, 
   0x6A, 0x88, 0x8F, 0x89, 0xC3, 0xF2, 0x45, 0x3F, 0x86, 0x12, 0x05, 0x35, 0x46, 0x5D, 0x64, 0xAD, 
   0xA4, 0xC7, 0x67, 0x7C, 0xB7, 0x00, 0x3D, 0x5B, 0x21, 0x3D, 0x6B, 0x6F, 0x61, 0x8F, 0x88, 0x84, 
   0xA8, 0x6A, 0x77, 0xAE, 0x23, 0x47, 0x9A, 0x00, 0x13, 0x65, 0x2C, 0x44, 0x3E, 0x8C, 0x8E, 0xA3, 
   0xBB, 0xBE, 0xEA, 0x40, 0x7E, 0x84, 0x14, 0x1A, 0x77, 0x13, 0x58, 0x9D, 0x3D, 0x7B, 0x6F, 0x84, 
   0x65, 0x8B, 0x69, 0x6A, 0x96, 0x30, 0x48, 0x69, 0x57, 0x66, 0xA7, 0x6D, 0x89, 0x91, 0x23, 0x72, 
   0x6A, 0x3A, 0x4F, 0xA8, 0x58, 0x65, 0x86, 0x7B, 0x75, 0x8B, 0x7F, 0x7A, 0xAB, 0x2C, 0x40, 0x65, 
   0x00, 0x2A, 0x4E, 0x4B, 0x87, 0x8E, 0xD1, 0xA4, 0xDA, 0xA1, 0x91, 0xB6, 0x00, 0x4E, 0x57, 0x00, 
   0x03, 0x1D, 0x25, 0x49, 0x7B, 0xD0, 0xA1, 0xDF, 0xBA, 0x70, 0xAD, 0x17, 0x59, 0x5C, 0x0D, 0x6F, 
   0x7D, 0x45, 0x63, 0x93, 0x2B, 0x62, 0x92, 0x45, 0x40, 0x53, 0x7B, 0x5E, 0x6B, 0x6C, 0x88, 0x8B, 
   0x5A, 0x88, 0xBB, 0x6A, 0x4E, 0xE7, 0x35, 0x5D, 0x4A, 0x2F, 0x73, 0x38, 0x78, 0x6D, 0xC6, 0x6C, 
   0x44, 0x94, 0x0B, 0x4F, 0x55, 0x23, 0x3A, 0x8E, 0x7B, 0x71, 0x8A, 0x7D, 0xB7, 0x8B, 0x5A, 0x72, 
   0x8C, 0x48, 0x37, 0x92, 0x31, 0x5D, 0x9D, 0x64, 0x6F, 0xAD, 0x85, 0x74, 0x8D, 0x39, 0x5C, 0x58, 
   0x00, 0x18, 0x42, 0x53, 0x48, 0x8F, 0xBE, 0xA6, 0xAA, 0x80, 0x8B, 0xB7, 0x56, 0x67, 0xA6, 0x4C, 
   0x53, 0x88, 0x1C, 0x5C, 0x7B, 0x22, 0x44, 0x8B, 0x83, 0x6C, 0x89, 0x61, 0x4B, 0x7C, 0x00, 0x47, 
   0x49, 0x55, 0x93, 0xAC, 0xEA, 0xB9, 0xE5, 0x75, 0x38, 0x92, 0x00, 0x19, 0x38, 0x1B, 0x20, 0x33, 
   0x6A, 0x7A, 0x7C, 0x85, 0xB6, 0xFF, 0xB8, 0x8D, 0xB1, 0x2D, 0x24, 0x20, 0x00, 0x3A, 0x58, 0x5D, 
   0x65, 0x9F, 0xA5, 0x9A, 0xA7, 0x73, 0x6D, 0xA3, 0x44, 0x5C, 0x8C, 0x69, 0x8D, 0xA1, 0x56, 0x85, 
   0x98, 0x48, 0x21, 0x62, 0x46, 0x26, 0x55, 0x1E, 0x66, 0x62, 0x54, 0x86, 0x93, 0xAB, 0x97, 0xEF, 
   0x88, 0x62, 0xB3, 0x00, 0x1C, 0x00, 0x44, 0x46, 0x76, 0x3F, 0x41, 0x70, 0x56, 0x5D, 0xA3, 0x45, 
   0x53, 0x7A, 0x5C, 0x66, 0x74, 0x62, 0x82, 0x6E, 0x44, 0x6A, 0x80, 0x38, 0x36, 0x81, 0x2D, 0x30, 
   0x87, 0x4B, 0x6A, 0x99, 0x6E, 0x81, 0x98, 0x57, 0x53, 0x7F, 0x44, 0x20, 0x66, 0x32, 0x5A, 0x5F, 
   0x27, 0xAA, 0x6B, 0x61, 0x48, 0x8E, 0x6D, 0x25, 0x94, 0x4F, 0x6A, 0x92, 0x0A, 0x71, 0x1A, 0x43, 
   0x5F, 0x50, 0x78, 0x5E, 0xFD, 0x40, 0x5D, 0xB2, 0x5B, 0x4C, 0x38, 0x5F, 0x5C, 0x89, 0x29, 0x5B, 
   0x5A, 0x00, 0x17, 0x13, 0x5F, 0x63, 0x95, 0x79, 0x92, 0xF4, 0x52, 0x48, 0xA9, 0x62, 0x38, 0x4A, 
   0x60, 0x7D, 0x4E, 0x20, 0x88, 0xAE, 0x53, 0x41, 0x97, 0x69, 0x49, 0x73, 0x24, 0x3C, 0x44, 0x24, 
   0x37, 0x67, 0x5E, 0x62, 0xB2, 0x6B, 0x8B, 0x67, 0x2D, 0x47, 0x02, 0x5A, 0x3C, 0x99, 0x64, 0x75, 
   0xFF, 0x1F, 0x5E, 0x44, 0x1B, 0x25, 0x0B, 0x78, 0x65, 0xD9, 0x84, 0x99, 0xB8, 0x2D, 0x5F, 0x34, 
   0x26, 0x2F, 0x61, 0x37, 0x00, 0x91, 0x29, 0x73, 0xA5, 0x8A, 0xB0, 0x94, 0x7D, 0x93, 0x82, 0x13, 
   0x5C, 0x95, 0x00, 0x0D, 0x2D, 0x48, 0x00, 0x00, 0x95, 0x56, 0xDB, 0x68, 0xC8, 0xFF, 0x29, 0x80, 
   0x2D, 0x00, 0x37, 0x1B, 0x6C, 0x54, 0xE5, 0xA8, 0x9A, 0xD0, 0x64, 0xA5, 0x7F, 0x77, 0x5E, 0x66, 
   0x39, 0x4A, 0xB3, 0x00, 0x5D, 0x93, 0x3A, 0x2D, 0x4B, 0x1A, 0x00, 0x2F, 0x24, 0x63, 0x72, 0x9A, 
   0xF1, 0xD2, 0x80, 0x75, 0x96, 0x3B, 0x28, 0x6E, 0x5B, 0xA8, 0xB7, 0x64, 0x4B, 0x93, 0x1E, 0x42, 
   0x79, 0x4F, 0x8E, 0x8C, 0x49, 0x00, 0x56, 0x1C, 0x00, 0x13, 0x14, 0xB5, 0x73, 0xB6, 0xFF, 0xFF, 
   0xC0, 0x73, 0xE8, 0x00, 0x00, 0x3F, 0x00, 0x10, 0x1F, 0x8E, 0xB1, 0x97, 0x7F, 0x7F, 0xB4, 0x25, 
   0x33, 0x2D, 0x7F, 0x3D, 0xBB, 0x6D, 0x81, 0xF1, 0x16, 0x5F, 0x00, 0x49, 0x2C, 0x26, 0x6B, 0x7B, 
   0xEF, 0x3D, 0x7A, 0x95, 0x0F, 0x0D, 0x1D, 0x3E, 0x36, 0x79, 0x79, 0x82, 0x99, 0x58, 0x84, 0x9B, 
   0x51, 0x83, 0x9B, 0x55, 0x43, 0xA4, 0x15, 0x0A, 0x5D, 0x3E, 0x6C, 0x19, 0x78, 0x96, 0x99, 0x40, 
   0x78, 0xE0, 0x29, 0x42, 0xA6, 0x67, 0x1E, 0x69, 0x56, 0x46, 0x44, 0x2D, 0x65, 0x44, 0x33, 0x88, 
   0x75, 0x66, 0x5F, 0xA8, 0x5B, 0x4D, 0xD2, 0x34, 0x3B, 0x72, 0x45, 0x37, 0x60, 0x62, 0x77, 0xAF, 
   0x3A, 0x6D, 0x88, 0x41, 0x52, 0x88, 0x7F, 0x8A, 0xAE, 0x5B, 0x5B, 0x79, 0x04, 0x42, 0x4A, 0x26, 
   0x36, 0x67, 0x4B, 0x27, 0x82, 0x7B, 0x64, 0xAE, 0x70, 0xB6, 0x9E, 0x30, 0x71, 0x87, 0x6C, 0x52, 
   0xAE, 0x3C, 0x5A, 0xA5, 0x23, 0x46, 0x69, 0x2E, 0x4B, 0x6D, 0x35, 0x3B, 0x72, 0x22, 0x5B, 0x64, 
   0x86, 0x96, 0xB0, 0x9D, 0x7F, 0xC2, 0x1E, 0x1D, 0x5F, 0x06, 0x51, 0x5E, 0x72, 0x9B, 0xB4, 0x6D, 
   0x51, 0x97, 0x2D, 0x4F, 0x68, 0x43, 0x53, 0x89, 0x55, 0x4E, 0x79, 0x55, 0x4F, 0x85, 0x43, 0x67, 
   0x9C, 0x32, 0x73, 0x8A, 0x43, 0x5C, 0x51, 0x61, 0x45, 0x9C, 0x4B, 0x67, 0xC3, 0x50, 0x82, 0x56, 
   0x44, 0x42, 0x55, 0x33, 0x0E, 0x89, 0x55, 0x49, 0xBE, 0x4A, 0xB7, 0x9B, 0x5A, 0x61, 0x4F, 0x38, 
   0x22, 0x65, 0x55, 0x55, 0x99, 0x5A, 0x78, 0xAA, 0x37, 0x51, 0x92, 0x26, 0x56, 0x4C, 0x4E, 0x83, 
   0x62, 0x61, 0x5B, 0x80, 0x50, 0x2D, 0x71, 0x44, 0x5B, 0x8A, 0x65, 0x89, 0xE0, 0x41, 0x7C, 0x8E, 
   0x07, 0x1F, 0x09, 0x25, 0x2A, 0x60, 0x5B, 0x5A, 0xD5, 0x65, 0x5E, 0x7D, 0x7E, 0x78, 0x6D, 0x72, 
   0x84, 0xC4, 0x63, 0x82, 0xC3, 0x31, 0x3B, 0x8B, 0x00, 0x02, 0x07, 0x2D, 0x70, 0x48, 0xA9, 0x9B, 
   0xF2, 0x88, 0x89, 0xE7, 0x46, 0x6A, 0x66, 0x00, 0x18, 0x14, 0x00, 0x00, 0x55, 0x5F, 0x7C, 0xD3, 
   0xD0, 0xE2, 0xE2, 0xDF, 0xA9, 0xA8, 0x10, 0x54, 0x7C, 0x00, 0x0C, 0x79, 0x2E, 0x4B, 0x6D, 0x72, 
   0x7B, 0x74, 0x86, 0x72, 0x91, 0x5A, 0x61, 0xA3, 0x65, 0x7E, 0x7B, 0x63, 0x67, 0x98, 0x2E, 0x6B, 
   0x8C, 0x17, 0x6A, 0x8B, 0x73, 0x59, 0x8A, 0x7F, 0x64, 0x7E, 0x45, 0x74, 0x7E, 0x00, 0x46, 0xAB, 
   0x5C, 0x63, 0x88, 0x79, 0x5E, 0x4F, 0x47, 0x8C, 0x99, 0x8E, 0x9C, 0xE2, 0x62, 0x43, 0x62, 0x00, 
   0x0E, 0x11, 0x01, 0x37, 0x74, 0xC3, 0x9C, 0xDF, 0xA9, 0x93, 0xA8, 0x3B, 0x5A, 0x7A, 0x26, 0x59, 
   0x90, 0x3C, 0x7F, 0xA0, 0x38, 0x3A, 0x76, 0x56, 0x2F, 0x7B, 0x6A, 0x9D, 0x65, 0x7B, 0x87, 0x8E, 
   0x4D, 0x37, 0xC3, 0x2B, 0x64, 0x85, 0x8C, 0x80, 0x96, 0x79, 0x85, 0xAB, 0x1B, 0x3E, 0x6A, 0x03, 
   0x26, 0x47, 0x39, 0x3F, 0x7D, 0x76, 0x8C, 0xAE, 0x94, 0xB0, 0xE7, 0x60, 0x49, 0x6D, 0x1E, 0x42, 
   0x33, 0x29, 0x74, 0x9B, 0x64, 0x5E, 0xBA, 0x7C, 0x75, 0xB3, 0x6A, 0x6F, 0x82, 0x2F, 0x46, 0x3B, 
   0x1D, 0x46, 0x3C, 0x3D, 0x64, 0xA7, 0x74, 0x55, 0xDF, 0xA4, 0x69, 0x9C, 0x92, 0xAE, 0x89, 0x4E, 
   0x9A, 0x9E, 0x05, 0x2F, 0x6A, 0x20, 0x31, 0x96, 0x65, 0x41, 0xBB, 0x39, 0x43, 0x53, 0x35, 0x63, 
   0x4E, 0x39, 0x88, 0x8A, 0xA8, 0x9F, 0xE1, 0xD7, 0xA0, 0xE9, 0x03, 0x13, 0x38, 0x00, 0x00, 0x00, 
   0x56, 0x61, 0x8F, 0xF7, 0xC6, 0xE9, 0x71, 0x83, 0xA6, 0x2F, 0x48, 0x66, 0x38, 0x52, 0x75, 0x3F, 
   0x64, 0x92, 0x42, 0x4F, 0x55, 0x89, 0x83, 0xA2, 0xA5, 0xA5, 0xDB, 0x64, 0x5E, 0x88, 0x27, 0x28, 
   0x40, 0x30, 0x49, 0x5B, 0x14, 0x56, 0x74, 0x66, 0x64, 0xA4, 0x9B, 0xA9, 0xD2, 0x5B, 0x7A, 0x8C, 
   0x31, 0x3E, 0x67, 0x40, 0x31, 0x71, 0x49, 0x3E, 0x6E, 0x49, 0x2D, 0x69, 0x33, 0x46, 0x7A, 0x50, 
   0x82, 0x97, 0x62, 0x78, 0x7A, 0x50, 0x6B, 0x80, 0x28, 0x4D, 0x75, 0x44, 0x2A, 0x8C, 0x56, 0x4D, 
   0x86, 0x50, 0x8C, 0x6A, 0x56, 0x64, 0x91, 0x3F, 0x2B, 0x96, 0x2E, 0x3D, 0x67, 0x67, 0xB6, 0x5B, 
   0x78, 0x7C, 0x94, 0x27, 0x13, 0xB5, 0x31, 0x2E, 0x6E, 0x3D, 0x74, 0x00, 0x4F, 0x5F, 0x71, 0x50, 
   0x5F, 0xF2, 0x50, 0x64, 0xA3, 0x4F, 0x4C, 0x72, 0x37, 0x4B, 0x84, 0x31, 0x40, 0x21, 0x48, 0x6E, 
   0x29, 0x5F, 0x5C, 0xBB, 0x2C, 0x3A, 0xC4, 0x43, 0x62, 0x7F, 0x65, 0x45, 0x6B, 0x27, 0x1F, 0x53, 
   0x38, 0x66, 0x75, 0x5B, 0xB8, 0x66, 0x56, 0x7E, 0xA0, 0x55, 0x3B, 0xA5, 0x58, 0x27, 0x70, 0x18, 
   0x53, 0x9A, 0x3E, 0x6E, 0x75, 0x28, 0x13, 0x2A, 0x14, 0x00, 0x2E, 0x6D, 0x77, 0xAC, 0x95, 0xE7, 
   0xE8, 0x38, 0x84, 0xB2, 0x19, 0x02, 0x42, 0x1E, 0x12, 0x00, 0x43, 0x5F, 0x73, 0xA6, 0xC7, 0xFF, 
   0x61, 0x80, 0xB9, 0x00, 0x00, 0x00, 0x44, 0x04, 0x35, 0x9B, 0xF4, 0xFF, 0x72, 0xC3, 0xFA, 0x1B, 
   0x48, 0x00, 0x2A, 0x0A, 0x19, 0x48, 0x20, 0xEA, 0x44, 0x4B, 0xAF, 0x67, 0x9A, 0x55, 0x57, 0x9C, 
   0xC5, 0x40, 0x79, 0x90, 0x1F, 0x22, 0x00, 0x33, 0x3A, 0x81, 0x81, 0x66, 0xE7, 0xC5, 0xB8, 0xD1, 
   0x75, 0xF3, 0xAA, 0x00, 0x41, 0x6B, 0x00, 0x00, 0x07, 0x1D, 0x00, 0x48, 0xC2, 0xFF, 0xBF, 0xB2, 
   0xE0, 0xFF, 0x05, 0x00, 0x60, 0x1A, 0x50, 0x2C, 0x8C, 0x73, 0xA4, 0x59, 0x6F, 0xE4, 0x1F, 0x90, 
   0x71, 0x46, 0x76, 0x73, 0x84, 0x18, 0x92, 0x17, 0x13, 0x3C, 0x1E, 0x84, 0x4E, 0x91, 0xBA, 0xB2, 
   0x85, 0xB8, 0xE0, 0x00, 0x3C, 0x61, 0x28, 0x00, 0x48, 0x84, 0x73, 0x97, 0x4B, 0xF5, 0x8C, 0x28, 
   0x47, 0x8B, 0x39, 0x00, 0x57, 0x6D, 0x4D, 0x69, 0x56, 0xFB, 0xD4, 0x38, 0x7D, 0x94, 0x32, 0x00, 
   0x0A, 0x49, 0x25, 0x55, 0x4F, 0xCD, 0xFF, 0x61, 0x7E, 0x7B, 0x29, 0x1B, 0x27, 0x62, 0x59, 0x9B, 
   0x78, 0x5F, 0xEC, 0x16, 0x44, 0x79, 0x3E, 0x93, 0x6A, 0x7C, 0x53, 0x78, 0x1C, 0x0A, 0x2A, 0x22, 
   0x7D, 0xAA, 0x6E, 0xB0, 0xEF, 0x7F, 0x4E, 0x59, 0x45, 0x1F, 0x3A, 0x33, 0x63, 0x7E, 0x3E, 0x6F, 
   0x8C, 0x4A, 0x47, 0x94, 0x56, 0x59, 0x64, 0x50, 0x6A, 0x88, 0x4B, 0x32, 0xB7, 0x45, 0x6C, 0x8F, 
   0x4B, 0x7E, 0xA4, 0x3A, 0x55, 0x70, 0x4D, 0x17, 0x69, 0x96, 0x89, 0x9C, 0x5B, 0x8E, 0x7A, 0x00, 
   0x22, 0x48, 0x3F, 0x23, 0xB7, 0x8B, 0xA2, 0xC4, 0x74, 0x91, 0x79, 0x2D, 0x3B, 0x6D, 0x00, 0x51, 
   0x96, 0x7C, 0x73, 0x97, 0x6C, 0x77, 0xB2, 0x48, 0x4D, 0xB9, 0x24, 0x23, 0x27, 0x24, 0x2A, 0x00, 
   0x21, 0x66, 0xA4, 0x8B, 0x8B, 0xFF, 0x92, 0x80, 0x9A, 0x40, 0x40, 0x35, 0x15, 0x45, 0x4F, 0x26, 
   0x77, 0x90, 0x43, 0x50, 0xA9, 0x56, 0x55, 0x88, 0x6D, 0x67, 0xA9, 0x60, 0x77, 0xA6, 0x1A, 0x4E, 
   0x2C, 0x00, 0x1A, 0x2D, 0x5A, 0x4F, 0xB3, 0x7E, 0x9A, 0xD7, 0x57, 0x68, 0xA8, 0x23, 0x3F, 0x39, 
   0x62, 0x4A, 0x35, 0x78, 0x89, 0xE2, 0x2C, 0x71, 0xF8, 0x20, 0x0A, 0x38, 0x33, 0x33, 0x1A, 0x9A, 
   0xC4, 0xBF, 0x6B, 0xA6, 0xB4, 0x02, 0x04, 0x5E, 0x07, 0x1A, 0x57, 0x5F, 0x77, 0x90, 0x6C, 0x8A, 
   0x6F, 0x60, 0x77, 0x98, 0x10, 0x0F, 0x82, 0x22, 0x27, 0x50, 0xA7, 0xC3, 0xB3, 0x94, 0xAB, 0xE0, 
   0x13, 0x23, 0x76, 0x00, 0x00, 0x00, 0x2D, 0x43, 0x51, 0x9F, 0xC7, 0xFF, 0x9B, 0xAD, 0xCB, 0x39, 
   0x50, 0x6E, 0x41, 0x48, 0x98, 0x44, 0x47, 0x58, 0x54, 0x69, 0x68, 0x1B, 0x48, 0x7B, 0x2D, 0x65, 
   0xA4, 0x7A, 0x77, 0x99, 0x6A, 0x5A, 0x60, 0x2C, 0x3E, 0x67, 0x2D, 0x6C, 0x9C, 0x41, 0x36, 0x9A, 
   0x8F, 0x78, 0x91, 0x95, 0xCA, 0xE0, 0x6F, 0x84, 0x99, 0x15, 0x30, 0x30, 0x07, 0x12, 0x8F, 0x2B, 
   0x52, 0x9C, 0x47, 0x95, 0x87, 0x9F, 0x8B, 0x9E, 0x7D, 0x68, 0x82, 0x37, 0x60, 0xA4, 0x52, 0x4E, 
   0xAE, 0x67, 0x5E, 0x6D, 0x3D, 0x6F, 0x7D, 0x31, 0x58, 0x82, 0x18, 0x4D, 0x7E, 0x98, 0x80, 0x9B, 
   0xA4, 0x80, 0xAC, 0x40, 0x57, 0x93, 0x3C, 0x4A, 0x6E, 0x19, 0x44, 0x40, 0x3C, 0x72, 0x9C, 0x97, 
   0x78, 0xBF, 0x3B, 0x4A, 0x5E, 0x00, 0x29, 0x54, 0x55, 0x86, 0x9B, 0xB3, 0x98, 0xD1, 0x48, 0x6A, 
   0xB4, 0x2A, 0x42, 0x74, 0x62, 0x64, 0x72, 0x40, 0x86, 0x82, 0x51, 0x58, 0x9E, 0x3F, 0x4C, 0x96, 
   0x4B, 0x68, 0x3B, 0x5E, 0x6F, 0x60, 0x6A, 0x6F, 0xE6, 0x8A, 0x79, 0xBD, 0x1B, 0x38, 0x3D, 0x00, 
   0x33, 0x37, 0x69, 0x63, 0xA0, 0xA5, 0x98, 0xD0, 0x66, 0x76, 0x91, 0x58, 0x4D, 0x7E, 0x1D, 0x4C, 
   0x6B, 0x29, 0x52, 0x72, 0x86, 0x7B, 0xAC, 0x76, 0x7B, 0xA6, 0x20, 0x37, 0x78, 0x49, 0x65, 0x83, 
   0x8E, 0x9E, 0x8F, 0x4A, 0x48, 0x7A, 0x17, 0x38, 0x93, 0x7A, 0x78, 0xB6, 0x97, 0x97, 0x83, 0x5C, 
   0x90, 0x87, 0x63, 0x7B, 0xB3, 0x3D, 0x27, 0x95, 0x00, 0x1A, 0x49, 0x33, 0x6B, 0x7C, 0x98, 0x79, 
   0x9F, 0x9A, 0x69, 0x83, 0x4A, 0x6F, 0x9A, 0x42, 0x6E, 0x99, 0x68, 0x66, 0x80, 0x3E, 0x59, 0x9A, 
   0x0C, 0x37, 0x4E, 0x3D, 0x40, 0x34, 0x8B, 0x8D, 0xA4, 0x93, 0x9A, 0xF1, 0x74, 0x66, 0x89, 0x22, 
   0x42, 0x37, 0x1D, 0x4D, 0x70, 0x74, 0x70, 0xB0, 0x92, 0x97, 0xB6, 0x63, 0x51, 0x6F, 0x2D, 0x1D, 
   0x40, 0x21, 0x57, 0x69, 0x67, 0x8C, 0xC2, 0xB3, 0x9E, 0xCE, 0x73, 0x58, 0x92, 0x37, 0x44, 0x3F, 
   0x13, 0x49, 0x3F, 0x7F, 0x70, 0xE4, 0x37, 0x44, 0x80, 0x32, 0x39, 0x85, 0x3E, 0x36, 0x69, 0x61, 
   0x82, 0x80, 0x44, 0x9F, 0x91, 0x3F, 0x31, 0x86, 0x50, 0x30, 0x91, 0x5C, 0x64, 0x80, 0x67, 0x80, 
   0x8B, 0x4A, 0x63, 0x79, 0x27, 0x08, 0x79, 0x28, 0x4E, 0x74, 0x73, 0xAF, 0x8B, 0x5D, 0x5F, 0x9B, 
   0x67, 0x19, 0x9F, 0x42, 0x67, 0x68, 0x00, 0x4B, 0x1D, 0x26, 0x2F, 0x52, 0x94, 0x6F, 0xC8, 0x73, 
   0x75, 0xBE, 0x39, 0x4D, 0x6C, 0x59, 0x57, 0x7F, 0x36, 0x40, 0x56, 0x1B, 0x4C, 0x2F, 0x66, 0x69, 
   0x82, 0x8F, 0x74, 0xF1, 0x5A, 0x6D, 0xA5, 0x2A, 0x11, 0x36, 0x29, 0x4F, 0x3A, 0x41, 0x79, 0xA8, 
   0x44, 0x2C, 0x88, 0x7F, 0x5C, 0x67, 0x63, 0xB2, 0x74, 0x45, 0x73, 0xB9, 0x60, 0x58, 0xD8, 0x68, 
   0x63, 0x5A, 0x00, 0x16, 0x00, 0x00, 0x00, 0x25, 0x6E, 0x5A, 0xE0, 0x6D, 0xAB, 0xA0, 0x52, 0x76, 
   0x41, 0xA6, 0xA2, 0xDA, 0x3C, 0x6A, 0xAA, 0x00, 0x00, 0x00, 0x29, 0x51, 0x66, 0x82, 0x8C, 0xF2, 
   0x5C, 0x55, 0x92, 0x5C, 0x93, 0x57, 0x5A, 0x21, 0x51, 0x04, 0x1D, 0x74, 0x27, 0xB4, 0x98, 0x94, 
   0x9F, 0x72, 0x6D, 0x5A, 0x8B, 0x21, 0x64, 0xCB, 0x26, 0x4C, 0x75, 0x16, 0x30, 0x59, 0x7E, 0x6A, 
   0xBF, 0x7E, 0x8D, 0xAB, 0x0C, 0x48, 0x32, 0x0E, 0x0A, 0x01, 0x8E, 0x58, 0xCE, 0x7F, 0xD8, 0xFF, 
   0x60, 0x9E, 0x60, 0x3B, 0x08, 0x1E, 0x00, 0x2A, 0x7E, 0x76, 0xBF, 0xA2, 0xA5, 0x65, 0xA2, 0x44, 
   0x42, 0x5E, 0x46, 0x9A, 0xA8, 0x45, 0x27, 0x96, 0x2A, 0x06, 0x4D, 0x42, 0xB3, 0x8D, 0x76, 0x97, 
   0xD9, 0x5F, 0x19, 0x89, 0x15, 0x78, 0x6A, 0x74, 0x98, 0xC2, 0x9F, 0x19, 0x86, 0x00, 0x02, 0x1D, 
   0x00, 0x77, 0x35, 0xA7, 0xC9, 0xE9, 0xB4, 0x99, 0xD3, 0x13, 0x1C, 0x3D, 0x27, 0x1F, 0x68, 0x5F, 
   0x73, 0xB0, 0x32, 0x57, 0x50, 0x28, 0x1F, 0x3B, 0x89, 0x65, 0xF7, 0x56, 0xAA, 0xB8, 0x11, 0x2D, 
   0x00, 0x44, 0x1C, 0x66, 0x89, 0x96, 0xA7, 0x4B, 0xB8, 0x99, 0x4A, 0x43, 0x83, 0x49, 0x00, 0x7D, 
   0x27, 0x2B, 0x79, 0x4F, 0xA4, 0xAC, 0x83, 0x8D, 0x9A, 0x2D, 0x14, 0x6A, 0x1C, 0x3A, 0x73, 0x56, 
   0x3C, 0x51, 0x73, 0x77, 0x6A, 0x35, 0x8E, 0xD2, 0x4B, 0x6A, 0x99, 0x56, 0x23, 0x6A, 0x4A, 0x22, 
   0x80, 0x33, 0x57, 0x59, 0x4A, 0x65, 0x6D, 0x56, 0x67, 0xA3, 0x4B, 0x89, 0xBC, 0x4B, 0x55, 0xA0, 
   0x4B, 0x54, 0x71, 0x40, 0x5F, 0x86, 0x51, 0x54, 0x74, 0x36, 0x4A, 0x6A, 0x5E, 0x52, 0x9A, 0x74, 
   0x7B, 0xB2, 0x23, 0x97, 0x84, 0x4A, 0x4A, 0x7D, 0x5A, 0x0F, 0x7C, 0x4E, 0x4E, 0x7C, 0x0A, 0x61, 
   0x5C, 0x45, 0x6E, 0xA8, 0x9C, 0x96, 0xFE, 0x62, 0x55, 0x7E, 0x31, 0x58, 0x41, 0x23, 0x2E, 0x67, 
   0x12, 0x1F, 0x86, 0x33, 0x67, 0x83, 0xA8, 0xB3, 0xE9, 0x96, 0x8B, 0x96, 0x00, 0x17, 0x00, 0x14, 
   0x2D, 0x61, 0x60, 0x7E, 0xB5, 0x6D, 0x52, 0xCE, 0x5B, 0x7F, 0xB5, 0x27, 0x77, 0x4B, 0x3D, 0x25, 
   0x3E, 0x4E, 0x41, 0x8F, 0x55, 0x59, 0xB8, 0x3F, 0x60, 0x96, 0x62, 0x73, 0x58, 0x4C, 0x47, 0x7B, 
   0x51, 0x6F, 0xCC, 0x5B, 0xAD, 0xA3, 0x27, 0x44, 0x5C, 0x27, 0x00, 0x65, 0x60, 0x5B, 0xA3, 0x6B, 
   0xBD, 0x80, 0x4C, 0x5C, 0x73, 0x12, 0x2C, 0x67, 0x30, 0x3C, 0x68, 0x70, 0x5F, 0x86, 0x65, 0x66, 
   0xA4, 0x1B, 0x55, 0x71, 0x32, 0x60, 0x77, 0x66, 0x60, 0x99, 0x57, 0x49, 0x5B, 0x5C, 0x65, 0x9B, 
   0x4A, 0x59, 0xBD, 0x1C, 0x37, 0x4B, 0x34, 0x1D, 0x30, 0x64, 0x92, 0xB7, 0x71, 0xB6, 0xFF, 0x65, 
   0x55, 0x8E, 0x20, 0x1B, 0x1A, 0x52, 0x70, 0x70, 0x90, 0x87, 0xE3, 0x54, 0x58, 0xB9, 0x00, 0x3B, 
   0x2E, 0x15, 0x36, 0x2A, 0x71, 0x62, 0xA6, 0xA3, 0xA9, 0xE9, 0x7B, 0x92, 0x9F, 0x4B, 0x45, 0x65, 
   0x0C, 0x0C, 0x98, 0x36, 0x5F, 0x82, 0xAB, 0xB8, 0x93, 0xBB, 0xA6, 0xB4, 0x11, 0x38, 0x48, 0x00, 
   0x0A, 0x81, 0x72, 0x8E, 0xB5, 0x76, 0x9B, 0x7D, 0x4F, 0x68, 0x9E, 0x5A, 0x66, 0x98, 0x76, 0x53, 
   0x80, 0x7E, 0x69, 0x89, 0x0E, 0x52, 0x71, 0x00, 0x52, 0x6B, 0x7F, 0x64, 0xA0, 0xC1, 0x70, 0x96, 
   0x82, 0x8B, 0xA6, 0x60, 0x6C, 0xCB, 0x01, 0x0F, 0x34, 0x00, 0x2C, 0x22, 0x5B, 0x85, 0x9D, 0xCF, 
   0xA9, 0xEF, 0x7D, 0x6F, 0x88, 0x00, 0x2E, 0x37, 0x00, 0x2E, 0x71, 0x79, 0x7F, 0xB8, 0xB7, 0x70, 
   0xA8, 0x7F, 0x49, 0x86, 0x4A, 0x88, 0x7A, 0x69, 0x8C, 0xA6, 0x3E, 0x35, 0xAE, 0x0F, 0x39, 0x3F, 
   0x44, 0x67, 0x22, 0x8F, 0x79, 0xA8, 0x56, 0x62, 0xAB, 0x06, 0x4B, 0x7F, 0x46, 0x51, 0x96, 0x81, 
   0x7B, 0x96, 0x65, 0x8C, 0x8A, 0x5F, 0x64, 0x7E, 0x4C, 0x41, 0x78, 0x3B, 0x6E, 0x95, 0x52, 0x58, 
   0xAB, 0x63, 0x69, 0x7C, 0x47, 0x6F, 0x59, 0x1F, 0x37, 0x54, 0x3E, 0x6B, 0x90, 0x85, 0x89, 0xBB, 
   0x80, 0x6C, 0xB5, 0x73, 0x60, 0x6A, 0x43, 0x71, 0x63, 0x10, 0x4F, 0x8C, 0x56, 0x50, 0xB4, 0x90, 
   0x7E, 0x86, 0x88, 0x7D, 0xA1, 0x35, 0x69, 0x67, 0x11, 0x4B, 0x72, 0x51, 0x4A, 0x9A, 0x7A, 0x6C, 
   0xBC, 0x80, 0x77, 0x98, 0x2F, 0x33, 0x47, 0x00, 0x3A, 0x43, 0x83, 0xA2, 0xE9, 0xF5, 0xA1, 0xF3, 
   0x25, 0x21, 0x28, 0x00, 0x00, 0x04, 0x6B, 0x63, 0x85, 0xC5, 0xC2, 0xEA, 0x6B, 0x8A, 0xA7, 0x3B, 
   0x4F, 0x6C, 0x55, 0x63, 0x97, 0x3D, 0x61, 0x85, 0x2C, 0x28, 0x5C, 0x50, 0x62, 0x63, 0x74, 0x80, 
   0x98, 0x5E, 0x6B, 0x8F, 0x8B, 0x8D, 0xC3, 0x57, 0x86, 0xB5, 0x38, 0x34, 0x40, 0x42, 0x38, 0x44, 
   0x53, 0x6C, 0x9B, 0x4D, 0x7D, 0xAD, 0x4A, 0x59, 0x86, 0x4A, 0x53, 0x8C, 0x55, 0x75, 0x85, 0x5A, 
   0x5E, 0x69, 0x21, 0x30, 0x7A, 0x3F, 0x4D, 0x91, 0x62, 0x65, 0x85, 0x62, 0x87, 0x68, 0x39, 0x63, 
   0x78, 0x3E, 0x00, 0x7E, 0x1C, 0x47, 0x73, 0x50, 0xBA, 0x69, 0x63, 0x53, 0xAE, 0x5C, 0x24, 0xBD, 
   0x3F, 0x57, 0x70, 0x3E, 0x63, 0x18, 0x49, 0x63, 0x52, 0x49, 0x57, 0xD2, 0x38, 0x3A, 0xB7, 0x6C, 
   0x68, 0x5A, 0x6B, 0x5D, 0x84, 0x14, 0x41, 0x3F, 0x26, 0x5D, 0x2B, 0x71, 0x69, 0xCE, 0x50, 0x69, 
   0xDB, 0x3F, 0x68, 0x6C, 0x7B, 0x4B, 0x4C, 0x2F, 0x4F, 0x6C, 0x00, 0x2D, 0x56, 0x35, 0x62, 0x69, 
   0x6C, 0x7A, 0x94, 0x63, 0x2C, 0x96, 0x46, 0x3A, 0x85, 0x67, 0xCF, 0xA6, 0x5A, 0xB5, 0xA9, 0x3C, 
   0x00, 0x39, 0x3A, 0x00, 0x27, 0x28, 0x46, 0x9F, 0x3B, 0x7D, 0x91, 0x54, 0x53, 0x65, 0x61, 0x66, 
   0xA3, 0x50, 0x61, 0x39, 0x55, 0x6D, 0x6E, 0x5E, 0xBA, 0xFF, 0x23, 0x1E, 0x5B, 0x00, 0x00, 0x00, 
   0x6C, 0x88, 0xA7, 0xCE, 0xD5, 0xFF, 0x33, 0x83, 0xB9, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x67, 
   0x92, 0xFF, 0x91, 0xC5, 0xFF, 0x5C, 0xA9, 0x27, 0x0B, 0x5A, 0x58, 0x43, 0x1C, 0xCE, 0x55, 0x21, 
   0x67, 0x34, 0x5C, 0x44, 0x5C, 0x64, 0xB1, 0x79, 0x77, 0x95, 0x23, 0x7C, 0x68, 0x2F, 0x4E, 0x69, 
   0x39, 0x00, 0x93, 0x5A, 0x81, 0x79, 0xDE, 0xFF, 0xC5, 0x69, 0x97, 0xEA, 0x00, 0x00, 0x36, 0x4A, 
   0x47, 0x33, 0x4F, 0x86, 0x9A, 0x44, 0x4F, 0xB2, 0x23, 0x56, 0x5C, 0x3C, 0x4C, 0x3B, 0x99, 0x48, 
   0xAB, 0x56, 0xAB, 0xD5, 0x55, 0x9F, 0xA2, 0x91, 0x7D, 0x9E, 0x32, 0x49, 0xA3, 0x00, 0x00, 0x26, 
   0x26, 0x12, 0x15, 0x7F, 0xD4, 0xAD, 0x8C, 0xFF, 0xDE, 0x4C, 0x2E, 0xA9, 0x2C, 0x00, 0x67, 0x31, 
   0x4B, 0x16, 0x48, 0xED, 0x8E, 0x49, 0x69, 0xDE, 0x3F, 0x00, 0x07, 0x62, 0x1A, 0x5E, 0x73, 0xF6, 
   0xFF, 0x45, 0x97, 0x57, 0x3F, 0x0D, 0x00, 0x4A, 0x5B, 0xBF, 0x6B, 0x8D, 0xFA, 0x09, 0x26, 0x4A, 
   0x20, 0x5E, 0x38, 0x77, 0x80, 0xAB, 0x39, 0x3C, 0xA7, 0x34, 0x6F, 0x9F, 0x67, 0x52, 0x96, 0x67, 
   0x3B, 0x2D, 0x34, 0x37, 0x28, 0x3F, 0x7D, 0xA9, 0x4B, 0xA4, 0xDF, 0x5C, 0x3B, 0x83, 0x4B, 0x1D, 
   0x3D, 0x4A, 0x3A, 0x5F, 0x33, 0x5F, 0x88, 0x4A, 0x83, 0x90, 0x56, 0x67, 0x7B, 0x45, 0x65, 0xA3, 
   0x45, 0x25, 0x87, 0x67, 0x3C, 0x7B, 0x40, 0x76, 0x70, 0x14, 0x34, 0x5C, 0x66, 0x37, 0xB4, 0xBB, 
   0xE3, 0xE8, 0x68, 0x9D, 0x8A, 0x00, 0x1B, 0x3C, 0x07, 0x23, 0x85, 0x54, 0x3B, 0x70, 0x89, 0x7D, 
   0x94, 0x46, 0x68, 0xB1, 0x36, 0x52, 0x79, 0x85, 0x8A, 0x85, 0x61, 0x60, 0xC4, 0x25, 0x36, 0xB6, 
   0x23, 0x35, 0x46, 0x29, 0x47, 0x4B, 0x2C, 0x5B, 0x91, 0x79, 0x8A, 0xCB, 0x90, 0x73, 0x96, 0x17, 
   0x1D, 0x2A, 0x38, 0x57, 0x86, 0x65, 0xA2, 0xE2, 0x3E, 0x5D, 0x70, 0x33, 0x3E, 0x4D, 0x56, 0x53, 
   0xA8, 0x78, 0x64, 0xBE, 0x38, 0x52, 0x61, 0x10, 0x1A, 0x33, 0x3F, 0x3F, 0x7A, 0x90, 0xA3, 0xC7, 
   0x5C, 0x9D, 0xEF, 0x12, 0x35, 0x58, 0x4B, 0x2F, 0x22, 0x89, 0x8F, 0xB0, 0x54, 0x77, 0xD1, 0x12, 
   0x04, 0x51, 0x01, 0x43, 0x38, 0x69, 0x99, 0x7D, 0x7B, 0x82, 0x90, 0x42, 0x3C, 0x92, 0x2B, 0x20, 
   0x88, 0x32, 0x5B, 0x94, 0x77, 0x8F, 0x83, 0x55, 0x9F, 0x8D, 0x1C, 0x19, 0x6F, 0x29, 0x00, 0x3E, 
   0x70, 0x6D, 0x70, 0xAA, 0xB0, 0xFF, 0x4D, 0x98, 0xC2, 0x06, 0x00, 0x20, 0x28, 0x28, 0x6E, 0x58, 
   0x8C, 0x9D, 0x76, 0x78, 0x7D, 0x5A, 0x67, 0xA0, 0x58, 0x77, 0xC1, 0x60, 0x63, 0x7F, 0x1E, 0x29, 
   0x28, 0x00, 0x09, 0x36, 0x48, 0x7F, 0xBE, 0xC0, 0xB6, 0xE4, 0xB5, 0x8D, 0xAB, 0x45, 0x67, 0x91, 
   0x00, 0x1B, 0x56, 0x0B, 0x0B, 0x46, 0x8E, 0x76, 0xAF, 0xA2, 0xA3, 0xB7, 0x7E, 0xA4, 0xA0, 0x30, 
   0x79, 0x61, 0x05, 0x22, 0x88, 0x3F, 0x54, 0xC7, 0x64, 0x99, 0x82, 0x7C, 0x5B, 0x75, 0x8C, 0x65, 
   0x9B, 0x1D, 0x59, 0x7E, 0x1C, 0x5E, 0x77, 0x5C, 0x75, 0x7D, 0x74, 0x70, 0x89, 0x57, 0x6F, 0xB0, 
   0x55, 0x72, 0xA3, 0x3C, 0x43, 0x4D, 0x09, 0x43, 0x7A, 0x5A, 0x61, 0xA8, 0x7E, 0x5D, 0x70, 0x35, 
   0x76, 0x60, 0x62, 0x8D, 0xC2, 0x8D, 0x86, 0x9F, 0x00, 0x39, 0x59, 0x00, 0x1D, 0x59, 0xA5, 0x5E, 
   0x7E, 0xC5, 0xC7, 0xC6, 0x63, 0x6C, 0xCC, 0x4D, 0x53, 0xB8, 0x39, 0x68, 0x59, 0x31, 0x62, 0x3A, 
   0x53, 0x61, 0xBD, 0x4E, 0x55, 0x90, 0x3D, 0x4F, 0x30, 0x29, 0x3A, 0x7E, 0x6C, 0x81, 0xD2, 0xBD, 
   0xB6, 0xE9, 0x65, 0x65, 0x79, 0x18, 0x35, 0x32, 0x1C, 0x5B, 0x98, 0x40, 0x4C, 0xA5, 0x81, 0x86, 
   0xA5, 0x81, 0x86, 0x87, 0x1F, 0x2B, 0x4D, 0x26, 0x5F, 0x4F, 0x89, 0xA5, 0xA8, 0x7B, 0x78, 0xC2, 
   0x59, 0x3F, 0xB7, 0x6E, 0x83, 0x9E, 0x60, 0x7D, 0x6E, 0x1A, 0x4E, 0x51, 0x2B, 0x5E, 0xA6, 0x77, 
   0x65, 0xB1, 0x4B, 0x6C, 0x3F, 0x50, 0x8F, 0x7E, 0x77, 0x9F, 0xB8, 0x5E, 0x51, 0xA1, 0x27, 0x42, 
   0x82, 0x15, 0x2A, 0x69, 0x27, 0x3D, 0x52, 0x5E, 0x79, 0x97, 0x84, 0x8C, 0x9F, 0x69, 0x81, 0x8E, 
   0x8F, 0x7A, 0xA9, 0x41, 0x44, 0x7E, 0x00, 0x28, 0x4A, 0x4F, 0x4D, 0x47, 0xA3, 0xA5, 0xDA, 0xB5, 
   0xAB, 0xF1, 0x56, 0x63, 0x75, 0x02, 0x20, 0x3E, 0x0D, 0x2B, 0x43, 0x4A, 0x57, 0x80, 0x9E, 0x99, 
   0xCF, 0xAA, 0xA5, 0xDB, 0x58, 0x59, 0x88, 0x1C, 0x29, 0x3A, 0x37, 0x61, 0x67, 0x60, 0x6D, 0xAD, 
   0x7C, 0x6D, 0xA2, 0x38, 0x56, 0x52, 0x5C, 0x78, 0x81, 0x6D, 0x89, 0x86, 0x38, 0x65, 0x75, 0x2C, 
   0x2F, 0x80, 0x38, 0x18, 0x80, 0x6D, 0x5E, 0x85, 0x50, 0x9E, 0x79, 0x44, 0x64, 0x7E, 0x4A, 0x00, 
   0x72, 0x34, 0x59, 0x6C, 0x62, 0xB5, 0x68, 0x6E, 0x59, 0xAD, 0x5C, 0x13, 0xA6, 0x2D, 0x5C, 0x71, 
   0x33, 0x63, 0x31, 0x40, 0x52, 0x66, 0x95, 0x6F, 0xBC, 0x61, 0x6E, 0xB0, 0x14, 0x34, 0x69, 0x3B, 
   0x34, 0x77, 0x4C, 0x6E, 0x32, 0x20, 0x64, 0x35, 0x4F, 0x53, 0xB1, 0x6D, 0x69, 0xD1, 0x5B, 0x51, 
   0xB2, 0x42, 0x2E, 0x52, 0x30, 0x4B, 0x38, 0x40, 0x84, 0x6C, 0x52, 0x50, 0x9B, 0x31, 0x2E, 0x5E, 
   0x49, 0x57, 0x77, 0x5B, 0x58, 0xBD, 0x50, 0x53, 0xC2, 0x55, 0x7C, 0x5E, 0x32, 0x70, 0x08, 0x2C, 
   0x3B, 0x81, 0x65, 0x40, 0xEF, 0x6A, 0x6D, 0x81, 0x19, 0x56, 0x2F, 0x2F, 0x4A, 0x8F, 0x52, 0x39, 
   0x68, 0x21, 0x20, 0x32, 0x6D, 0xAB, 0xC4, 0xA5, 0xA0, 0xD6, 0x0F, 0x2C, 0x74, 0x0D, 0x1F, 0x3E, 
   0x52, 0x48, 0x45, 0x4E, 0x8F, 0xDB, 0x55, 0xA6, 0xA8, 0x65, 0x70, 0x30, 0x1B, 0x00, 0x4D, 0x27, 
   0x18, 0xA7, 0x62, 0xE0, 0xBB, 0x64, 0xC1, 0x9F, 0x80, 0x8A, 0x86, 0x50, 0x2F, 0x72, 0x00, 0x09, 
   0x5A, 0x38, 0x16, 0x50, 0x89, 0x97, 0xA8, 0x71, 0xD1, 0xF6, 0x08, 0x4B, 0x42, 0x00, 0x00, 0x00, 
   0x2F, 0x1A, 0x82, 0xF8, 0xFF, 0xFF, 0xD1, 0xFA, 0xEB, 0x54, 0x66, 0x7A, 0x13, 0x73, 0x86, 0x00, 
   0x00, 0x71, 0x31, 0x00, 0x32, 0x39, 0xC7, 0x88, 0x5D, 0xB8, 0xBD, 0x5E, 0x0E, 0x63, 0x05, 0x48, 
   0x43, 0x7E, 0xD3, 0xB2, 0xC1, 0xB0, 0xFF, 0x23, 0x39, 0x88, 0x00, 0x28, 0x3E, 0x6B, 0x48, 0x89, 
   0x88, 0x4F, 0x7B, 0x1D, 0x51, 0x0F, 0x29, 0x80, 0x7E, 0xA0, 0xA6, 0xE6, 0x44, 0x53, 0x5D, 0x1B, 
   0x00, 0x3F, 0x48, 0x5D, 0xAB, 0x59, 0x9D, 0x67, 0x21, 0x30, 0x5C, 0x34, 0x09, 0x7A, 0x8A, 0x78, 
   0xA4, 0x62, 0xC4, 0xA9, 0x16, 0x67, 0x75, 0x5F, 0x00, 0x3B, 0x32, 0x55, 0x6F, 0x49, 0xDE, 0xB5, 
   0x6B, 0x65, 0x88, 0x38, 0x00, 0x44, 0x39, 0x4B, 0xB1, 0x73, 0x7B, 0xC1, 0x6E, 0x81, 0x5F, 0x39, 
   0x59, 0x6D, 0x33, 0x3B, 0x83, 0x4A, 0x4D, 0x47, 0x50, 0x65, 0x93, 0x57, 0x7C, 0xB2, 0x51, 0x4E, 
   0x8A, 0x4B, 0x3C, 0x89, 0x4A, 0x65, 0x8E, 0x33, 0x6B, 0x65, 0x44, 0x5F, 0x77, 0x6D, 0x37, 0x79, 
   0x50, 0x64, 0xA8, 0x2E, 0x4E, 0x71, 0x24, 0x28, 0x6D, 0x70, 0x75, 0xBF, 0x71, 0xAF, 0xB5, 0x43, 
   0x48, 0x81, 0x84, 0x51, 0xA0, 0x31, 0x5A, 0x7B, 0x00, 0x30, 0x36, 0x42, 0x36, 0x9D, 0x7E, 0x6A, 
   0xCB, 0x63, 0x5B, 0x53, 0x35, 0x5C, 0x27, 0x35, 0x5D, 0xAE, 0x79, 0x7F, 0xFF, 0x61, 0x67, 0xA8, 
   0x3C, 0x59, 0x64, 0x2E, 0x3A, 0x59, 0x0C, 0x18, 0x32, 0x20, 0x43, 0x96, 0x9C, 0x96, 0xE9, 0xA2, 
   0x86, 0xC1, 0x39, 0x58, 0x51, 0x00, 0x62, 0x28, 0x3D, 0x61, 0x7A, 0x6D, 0x4A, 0xD2, 0x6E, 0x66, 
   0xD2, 0x3A, 0x5F, 0x7A, 0x44, 0x37, 0x3E, 0x3E, 0x43, 0x4A, 0x3E, 0x61, 0xA8, 0x4A, 0x96, 0xE2, 
   0x34, 0x57, 0x59, 0x4C, 0x0E, 0x63, 0x7A, 0x81, 0xBD, 0x89, 0xCA, 0x93, 0x36, 0x4A, 0x63, 0x06, 
   0x0E, 0x83, 0x34, 0x47, 0x55, 0x6F, 0x8D, 0x67, 0x6A, 0x88, 0x96, 0x1A, 0x31, 0x81, 0x26, 0x31, 
   0x71, 0x7C, 0x7D, 0xB1, 0x55, 0x77, 0xA5, 0x32, 0x48, 0x64, 0x27, 0x30, 0x63, 0x35, 0x27, 0x4A, 
   0x60, 0x60, 0x88, 0xAC, 0xEC, 0xE7, 0x7C, 0xB1, 0xF1, 0x16, 0x11, 0x73, 0x00, 0x00, 0x00, 0x34, 
   0x51, 0x5C, 0xA3, 0xD3, 0xFF, 0x76, 0x90, 0xC8, 0x2A, 0x43, 0x3C, 0x28, 0x36, 0x4C, 0x3F, 0x4E, 
   0x8C, 0x51, 0x84, 0xBC, 0x26, 0x69, 0x85, 0x67, 0x5E, 0x6A, 0x78, 0x74, 0xD0, 0x55, 0x57, 0x90, 
   0x38, 0x6C, 0x5C, 0x2D, 0x3E, 0x7E, 0x25, 0x08, 0x59, 0x58, 0x74, 0xA1, 0xD8, 0xE4, 0xE2, 0xB3, 
   0xAA, 0xA8, 0x00, 0x4A, 0x61, 0x00, 0x0E, 0x92, 0x7E, 0x64, 0xA8, 0x7F, 0x93, 0x80, 0x29, 0x60, 
   0x79, 0x0E, 0x54, 0x84, 0x82, 0x65, 0xA1, 0xC6, 0x65, 0x9A, 0x3A, 0x86, 0x98, 0x1F, 0x78, 0x85, 
   0x23, 0x10, 0x4B, 0x15, 0x33, 0x58, 0x95, 0xAC, 0xC1, 0x8B, 0x6F, 0xC2, 0x29, 0x3B, 0x6B, 0x18, 
   0x5E, 0x54, 0x47, 0x71, 0x9A, 0x81, 0x98, 0xD3, 0x8B, 0x5D, 0x81, 0x18, 0x23, 0x24, 0x00, 0x5D, 
   0x4E, 0xAA, 0x9E, 0xC9, 0xAB, 0x81, 0xF2, 0x2C, 0x37, 0x56, 0x40, 0x69, 0x49, 0x60, 0x90, 0xC0, 
   0x4D, 0x4A, 0x9D, 0x00, 0x32, 0x3A, 0x0F, 0x44, 0x4C, 0x91, 0x6F, 0x8E, 0xA0, 0x8D, 0xD1, 0x56, 
   0x6B, 0xBB, 0x5E, 0x64, 0x85, 0x23, 0x62, 0x82, 0x23, 0x23, 0x48, 0x74, 0x6E, 0x92, 0x6F, 0x7A, 
   0x9E, 0x3D, 0x4D, 0x71, 0x49, 0x53, 0x7D, 0x61, 0x8D, 0x9B, 0x57, 0x5B, 0x92, 0x63, 0x4A, 0x88, 
   0x68, 0x78, 0x94, 0x4B, 0x78, 0xA5, 0x4A, 0x66, 0x9D, 0x76, 0x64, 0x7E, 0x3C, 0x51, 0x5F, 0x04, 
   0x1F, 0x71, 0x62, 0x66, 0xA0, 0x9E, 0x96, 0x8B, 0x97, 0xA1, 0xA7, 0x70, 0x86, 0xA0, 0x00, 0x32, 
   0x5F, 0x00, 0x1F, 0x4E, 0x5B, 0x70, 0xCB, 0x8C, 0x89, 0x97, 0x44, 0x3B, 0x42, 0x2F, 0x48, 0x66, 
   0x8B, 0xA4, 0xDF, 0xB7, 0x97, 0xDD, 0x26, 0x34, 0x23, 0x00, 0x06, 0x1D, 0x77, 0x7F, 0xB4, 0xB8, 
   0xAE, 0xD8, 0x62, 0x68, 0x86, 0x2B, 0x1C, 0x4A, 0x1A, 0x3E, 0x56, 0x55, 0x63, 0xA3, 0x85, 0x93, 
   0xC8, 0x74, 0x9E, 0xC7, 0x45, 0x41, 0x52, 0x33, 0x34, 0x29, 0x55, 0x62, 0x96, 0x71, 0x90, 0xDC, 
   0x44, 0x62, 0x87, 0x61, 0x39, 0x4D, 0x56, 0x6C, 0x81, 0x61, 0x7D, 0x81, 0x33, 0x4E, 0x81, 0x33, 
   0x30, 0x8C, 0x5B, 0x64, 0x80, 0x72, 0x7B, 0x74, 0x33, 0x5D, 0x8A, 0x21, 0x14, 0x7E, 0x39, 0x5F, 
   0x61, 0x73, 0xBB, 0x78, 0x68, 0x65, 0xA6, 0x45, 0x13, 0xA5, 0x4A, 0x62, 0x59, 0x16, 0x5D, 0x20, 
   0x34, 0x52, 0x6D, 0x8A, 0x58, 0xF3, 0x41, 0x5D, 0xB2, 0x6C, 0x4C, 0x47, 0x57, 0x6D, 0x59, 0x00, 
   0x34, 0x3C, 0x02, 0x35, 0x28, 0x93, 0x80, 0xA4, 0x79, 0x87, 0xEC, 0x2E, 0x52, 0x90, 0x70, 0x40, 
   0x5F, 0x30, 0x4B, 0x67, 0x07, 0x62, 0x6C, 0x3C, 0x4C, 0x67, 0x82, 0x73, 0x6F, 0x60, 0x57, 0x92, 
   0x20, 0x2F, 0x7C, 0x48, 0x7E, 0x97, 0x81, 0x83, 0x79, 0x20, 0x00, 0x45, 0x27, 0x02, 0x31, 0x6D, 
   0xC8, 0xCF, 0x6E, 0xD0, 0xDC, 0x56, 0x55, 0x73, 0x5E, 0x39, 0x6E, 0x17, 0x31, 0x33, 0x00, 0x1B, 
   0x2F, 0x80, 0x7D, 0xD7, 0x71, 0x52, 0x9A, 0x1E, 0x22, 0x08, 0x89, 0xA6, 0xBA, 0x7B, 0xB7, 0xFF, 
   0x00, 0x15, 0x44, 0x00, 0x08, 0x00, 0x7B, 0x65, 0x6E, 0x9B, 0x8F, 0xFF, 0x56, 0x8F, 0xD4, 0x1B, 
   0x06, 0x00, 0x00, 0x13, 0x39, 0x5D, 0x93, 0xFF, 0xC0, 0xB7, 0xB9, 0x42, 0x7C, 0x29, 0x12, 0x29, 
   0x62, 0x5A, 0x39, 0xCA, 0x5F, 0x82, 0xBE, 0x30, 0x66, 0x4F, 0x03, 0x00, 0x4D, 0x13, 0x1D, 0x3F, 
   0x90, 0xEA, 0x83, 0xA0, 0xB0, 0xF4, 0x57, 0x28, 0xB5, 0x81, 0xCA, 0x5D, 0x6A, 0x94, 0x9E, 0x00, 
   0x12, 0xA1, 0x00, 0x1A, 0x4F, 0x73, 0x4E, 0x43, 0x7B, 0x63, 0x89, 0x38, 0xA3, 0xCA, 0x54, 0x6A, 
   0x75, 0x7B, 0x42, 0x5F, 0x57, 0x85, 0xAA, 0x00, 0x78, 0xAE, 0x5C, 0x27, 0x73, 0x85, 0x96, 0x98, 
   0x4B, 0x87, 0x89, 0x2C, 0x00, 0x52, 0x26, 0x00, 0x2F, 0x38, 0x8E, 0x5A, 0x78, 0xE6, 0xBE, 0x61, 
   0x76, 0xFF, 0x27, 0x00, 0x3B, 0x32, 0x3C, 0x1D, 0x60, 0xDE, 0xDA, 0x4A, 0x5B, 0xB9, 0x34, 0x00, 
   0x00, 0x5B, 0x48, 0xA5, 0x6B, 0x94, 0xFF, 0x04, 0x5C, 0x25, 0x32, 0x45, 0x0D, 0x93, 0x7D, 0xBF, 
   0x33, 0x75, 0xD3, 0x16, 0x23, 0x71, 0x5B, 0x2E, 0x5F, 0x62, 0x5D, 0x5F, 0x50, 0x6A, 0xA4, 0x28, 
   0x87, 0xA9, 0x4F, 0x58, 0x80, 0x44, 0x23, 0x6D, 0x39, 0x1F, 0x2B, 0x3A, 0x77, 0x95, 0x68, 0xA6, 
   0xE7, 0x57, 0x6C, 0xA8, 0x4B, 0x43, 0x6C, 0x4A, 0x4D, 0x5E, 0x33, 0x4D, 0x69, 0x4F, 0x5E, 0x76, 
   0x3F, 0x5F, 0x5D, 0x2A, 0x4A, 0x95, 0x70, 0x5E, 0xB4, 0x81, 0x9D, 0xB0, 0x52, 0x8B, 0x9D, 0x3F, 
   0x1C, 0x6D, 0x11, 0x2D, 0x77, 0x6C, 0x89, 0x99, 0x71, 0x83, 0x8D, 0x21, 0x5A, 0x8B, 0x33, 0x25, 
   0x5C, 0x67, 0x5E, 0x58, 0x5C, 0x6B, 0x9F, 0x29, 0x51, 0xA2, 0x3A, 0x5E, 0x8D, 0x90, 0xA2, 0xBF, 
   0x6C, 0x6C, 0xBB, 0x19, 0x3B, 0x3F, 0x22, 0x39, 0x36, 0x1D, 0x24, 0x44, 0x3E, 0x5C, 0xAF, 0xA7, 
   0xC5, 0xFF, 0x79, 0x80, 0x7F, 0x00, 0x0C, 0x00, 0x27, 0x3E, 0x8A, 0x72, 0xA0, 0xE8, 0x51, 0x56, 
   0x8D, 0x4C, 0x4A, 0x52, 0x51, 0x45, 0x5D, 0x6D, 0x7E, 0xB3, 0x3E, 0x82, 0xB7, 0x0A, 0x1B, 0x3F, 
   0x39, 0x28, 0x56, 0xA1, 0xB3, 0xBE, 0x62, 0xAF, 0xCE, 0x15, 0x25, 0x59, 0x2A, 0x50, 0x2F, 0x47, 
   0x7C, 0x7F, 0x5E, 0x47, 0xC4, 0x4C, 0x24, 0x6E, 0x13, 0x42, 0x5D, 0x53, 0x71, 0x7A, 0x60, 0x72, 
   0x92, 0x5A, 0x6B, 0x7C, 0x32, 0x42, 0x92, 0x27, 0x20, 0x64, 0x4B, 0x4A, 0x2D, 0x64, 0x9D, 0xB3, 
   0x5F, 0x83, 0xC6, 0x32, 0x66, 0x77, 0x7B, 0x60, 0x93, 0x57, 0x81, 0x9D, 0x22, 0x57, 0x51, 0x2D, 
   0x00, 0x51, 0x45, 0x63, 0xA2, 0x8A, 0xAF, 0xD6, 0x4C, 0x3E, 0x42, 0x09, 0x1D, 0x49, 0x5B, 0x7A, 
   0xCF, 0xB1, 0xA9, 0xC5, 0x76, 0x74, 0x7F, 0x00, 0x39, 0x71, 0x00, 0x3F, 0x54, 0x5A, 0x7E, 0x89, 
   0xB8, 0x7A, 0xB8, 0x52, 0x63, 0x6A, 0x00, 0x36, 0x7C, 0x55, 0x44, 0x90, 0x8C, 0x8C, 0x9E, 0x94, 
   0xA4, 0xE7, 0x9C, 0x8B, 0x8F, 0x2A, 0x4E, 0x36, 0x20, 0x0D, 0x7F, 0x2B, 0x5E, 0xAD, 0x0D, 0x94, 
   0x7A, 0x88, 0x83, 0x80, 0xB2, 0x60, 0xA7, 0x65, 0x80, 0xA5, 0x43, 0x67, 0x85, 0x00, 0x21, 0x38, 
   0x00, 0x3E, 0x3F, 0x76, 0x79, 0xB9, 0x97, 0x70, 0xA0, 0x59, 0x87, 0x8A, 0x36, 0x5E, 0x95, 0x5E, 
   0x4D, 0x89, 0x64, 0x5E, 0x72, 0x4A, 0x5F, 0x83, 0x89, 0x76, 0xAB, 0x9E, 0x92, 0x88, 0x1D, 0x57, 
   0x75, 0x00, 0x1D, 0x91, 0x62, 0x57, 0x59, 0x8D, 0x9D, 0x72, 0x70, 0x75, 0xD4, 0x68, 0x51, 0xA6, 
   0x26, 0x61, 0x66, 0x09, 0x39, 0x65, 0x44, 0x63, 0x9E, 0x75, 0x92, 0x8D, 0x8D, 0x70, 0x72, 0x3C, 
   0x4D, 0x73, 0x1E, 0x68, 0xAD, 0x69, 0x52, 0xB2, 0x6F, 0x80, 0x8D, 0x47, 0x74, 0x41, 0x19, 0x2F, 
   0x5D, 0x3D, 0x4D, 0x99, 0x84, 0x9E, 0x9C, 0x85, 0x6B, 0xB4, 0x3A, 0x32, 0x92, 0x39, 0x72, 0x7B, 
   0x66, 0x8F, 0x92, 0x44, 0x67, 0x93, 0x61, 0x5F, 0xC6, 0x6C, 0x69, 0xAC, 0x49, 0x3B, 0x31, 0x21, 
   0x4D, 0x4E, 0x57, 0x76, 0xB7, 0xAE, 0x77, 0xC9, 0x7B, 0x88, 0x84, 0x4A, 0x5E, 0x60, 0x40, 0x40, 
   0x82, 0x2E, 0x6C, 0xBB, 0x5C, 0x55, 0x93, 0x47, 0x4A, 0x64, 0x49, 0x5C, 0x64, 0x78, 0x75, 0x8D, 
   0x46, 0x7D, 0xB1, 0x5E, 0x7D, 0xA1, 0xAC, 0x7B, 0xA4, 0x48, 0x61, 0x8A, 0x00, 0x1B, 0x2D, 0x3B, 
   0x43, 0x61, 0x88, 0x7E, 0xA1, 0x68, 0x86, 0x80, 0x79, 0x5E, 0x92, 0x4F, 0x7F, 0x97, 0x26, 0x62, 
   0x7F, 0x3D, 0x29, 0x51, 0x61, 0x73, 0x7A, 0x73, 0x7F, 0xB4, 0x67, 0x68, 0x92, 0x22, 0x51, 0x64, 
   0x3F, 0x5C, 0x97, 0x89, 0x5C, 0x93, 0x37, 0x58, 0x7B, 0x27, 0x52, 0x76, 0x5B, 0x4E, 0x98, 0x67, 
   0x6B, 0x86, 0x5B, 0x98, 0x80, 0x33, 0x58, 0x7F, 0x3E, 0x00, 0x6D, 0x3F, 0x5E, 0x68, 0x5C, 0xC6, 
   0x9B, 0x57, 0x5F, 0x8A, 0x50, 0x24, 0xA4, 0x33, 0x40, 0x69, 0x28, 0x5D, 0x1F, 0x67, 0x64, 0x55, 
   0x68, 0x64, 0xE8, 0x46, 0x58, 0xDD, 0x5B, 0x51, 0x5C, 0x3D, 0x5C, 0x6D, 0x35, 0x51, 0x26, 0x35, 
   0x6E, 0x33, 0x26, 0x4C, 0xAE, 0x66, 0x41, 0xC8, 0x72, 0x7F, 0x9A, 0x60, 0x41, 0x5E, 0x14, 0x46, 
   0x5C, 0x35, 0x6E, 0x67, 0x53, 0x4C, 0x79, 0x4E, 0x5C, 0x86, 0x4F, 0x46, 0x7C, 0x77, 0x69, 0x81, 
   0x53, 0x8A, 0xB7, 0x1D, 0x43, 0x59, 0x1D, 0x2A, 0x00, 0x3C, 0x09, 0x63, 0x5B, 0x3B, 0xEA, 0x63, 
   0x8B, 0x8C, 0x5D, 0xBB, 0x53, 0x67, 0x96, 0xCE, 0x54, 0x1F, 0x7C, 0x24, 0x0A, 0x0E, 0x2E, 0x6A, 
   0xB8, 0x3F, 0x59, 0x92, 0x1A, 0x0B, 0x2D, 0x56, 0x5E, 0x8F, 0x96, 0x96, 0x8D, 0x7D, 0x9C, 0xD1, 
   0x07, 0x81, 0xA5, 0x05, 0x00, 0x00, 0x24, 0x00, 0x46, 0x6C, 0x73, 0xFF, 0x9B, 0xEE, 0xC4, 0x29, 
   0x8C, 0x5B, 0x33, 0x00, 0x42, 0x4F, 0x00, 0x65, 0x24, 0x74, 0xA6, 0x81, 0xA6, 0x80, 0xAE, 0xA0, 
   0x9E, 0x4A, 0x9B, 0xCF, 0x00, 0x00, 0x66, 0x00, 0x00, 0x27, 0x40, 0x4E, 0x68, 0xCD, 0xFF, 0xF4, 
   0x6D, 0xA6, 0xB7, 0x0C, 0x00, 0x33, 0x55, 0x58, 0x82, 0x73, 0x49, 0xBB, 0x4B, 0x69, 0x5B, 0x5C, 
   0xF1, 0x8D, 0x60, 0x70, 0xBF, 0x3C, 0x00, 0x5C, 0x20, 0x34, 0x39, 0x76, 0xDB, 0xA7, 0xCA, 0x96, 
   0xC4, 0x05, 0x2C, 0x73, 0x00, 0x09, 0x22, 0x90, 0x72, 0x7E, 0xB5, 0xE5, 0xF1, 0x3C, 0x65, 0x73, 
   0x2E, 0x37, 0x6A, 0x6B, 0x32, 0xB5, 0x31, 0x00, 0x35, 0x0F, 0x36, 0x0D, 0x55, 0xB7, 0xCC, 0x84, 
   0xB1, 0x97, 0x50, 0x1B, 0x7B, 0x2D, 0x10, 0xA2, 0x55, 0x9B, 0x52, 0x55, 0xBD, 0x53, 0x3E, 0x31, 
   0xC6, 0x49, 0x00, 0x6C, 0x49, 0x3D, 0x55, 0x3E, 0xFC, 0xDC, 0x5A, 0x7E, 0x7A, 0x33, 0x00, 0x08, 
   0x44, 0x52, 0xAE, 0x6D, 0xA2, 0xD6, 0x56, 0x4D, 0x48, 0x33, 0x2F, 0x3C, 0x2D, 0x51, 0xAF, 0x61, 
   0x6F, 0xAA, 0x4B, 0x6F, 0x76, 0x4B, 0x41, 0x53, 0x45, 0x2B, 0x76, 0x5C, 0x60, 0x72, 0x51, 0x8A, 
   0xA7, 0x3A, 0x7E, 0xAC, 0x5C, 0x65, 0x83, 0x4B, 0x1F, 0x6F, 0x55, 0x46, 0x5D, 0x1C, 0x69, 0x4D, 
   0x29, 0x39, 0x6F, 0x7B, 0x58, 0xC4, 0x81, 0xBF, 0xC0, 0x41, 0x57, 0x92, 0x3E, 0x10, 0x74, 0x20, 
   0x59, 0x7D, 0x27, 0x4F, 0x55, 0x57, 0x51, 0x9B, 0x96, 0x96, 0xF0, 0x4B, 0x78, 0x5E, 0x05, 0x3C, 
   0x07, 0x38, 0x2A, 0xAD, 0x6D, 0x3C, 0xCD, 0x62, 0x6C, 0x78, 0x29, 0x74, 0x5C, 0x40, 0x63, 0xA6, 
   0x6D, 0x6D, 0xAC, 0x60, 0x5A, 0x93, 0x30, 0x36, 0x68, 0x2E, 0x41, 0x66, 0x28, 0x53, 0x83, 0x14, 
   0x55, 0x6E, 0x67, 0x7E, 0x97, 0x9C, 0x67, 0xCB, 0x3A, 0x39, 0x69, 0x22, 0x50, 0x51, 0x3F, 0x6D, 
   0x7A, 0x68, 0x53, 0x82, 0x52, 0x86, 0xD9, 0x57, 0x7F, 0xC5, 0x39, 0x26, 0x2D, 0x3F, 0x03, 0x26, 
   0x5B, 0x66, 0xA4, 0x6C, 0x8A, 0xC1, 0x42, 0x68, 0x71, 0x1A, 0x3A, 0x81, 0x3D, 0x56, 0x75, 0x82, 
   0x89, 0x6A, 0x64, 0x70, 0x92, 0x19, 0x0D, 0x9D, 0x1E, 0x30, 0x53, 0x5F, 0x82, 0x80, 0x82, 0xB0, 
   0x97, 0x2C, 0x4E, 0x80, 0x2C, 0x0E, 0x4D, 0x4B, 0x3E, 0x6D, 0x5E, 0x76, 0xC5, 0x70, 0x9F, 0xAA, 
   0x4D, 0x8C, 0x91, 0x40, 0x00, 0x61, 0x13, 0x13, 0x18, 0x59, 0xA0, 0x8E, 0xA9, 0xEC, 0xFF, 0x45, 
   0x70, 0xA9, 0x00, 0x00, 0x00, 0x0F, 0x11, 0x21, 0x4C, 0x88, 0xBA, 0x84, 0xB5, 0xE7, 0x7B, 0x77, 
   0x87, 0x6E, 0x6A, 0x91, 0x70, 0x62, 0xA5, 0x1D, 0x3E, 0x5E, 0x00, 0x43, 0x3B, 0x47, 0x4B, 0x7C, 
   0x74, 0x75, 0x97, 0x7C, 0x72, 0xB1, 0x87, 0xA4, 0xAC, 0x26, 0x48, 0x73, 0x05, 0x26, 0x95, 0x7B, 
   0x67, 0x96, 0xDD, 0xA7, 0xB7, 0xB0, 0x95, 0x92, 0x00, 0x37, 0x3B, 0x00, 0x2B, 0x6E, 0xA7, 0x76, 
   0xBA, 0xBD, 0x89, 0x98, 0x61, 0x8D, 0x9B, 0x46, 0x4C, 0xA9, 0x31, 0x28, 0x40, 0x2B, 0x3F, 0x50, 
   0x4E, 0x8A, 0xA1, 0x5B, 0x7B, 0x9E, 0x3B, 0x4E, 0x7D, 0x59, 0x5F, 0x73, 0x77, 0x87, 0xA7, 0x60, 
   0x59, 0xB8, 0x2C, 0x47, 0x6C, 0x4F, 0x48, 0x55, 0x51, 0x82, 0x7F, 0xAB, 0xB5, 0xFF, 0x84, 0x5C, 
   0xBF, 0x00, 0x10, 0x00, 0x00, 0x38, 0x0B, 0xA6, 0x90, 0xD1, 0x9D, 0x96, 0xE6, 0x36, 0x35, 0x69, 
   0x35, 0x4C, 0x74, 0x6E, 0x80, 0xC4, 0x74, 0x81, 0xAC, 0x3A, 0x59, 0x65, 0x39, 0x4C, 0x5D, 0x50, 
   0x6D, 0x5E, 0x30, 0x2A, 0x9A, 0x65, 0x70, 0xBE, 0x99, 0xAF, 0xB1, 0x3D, 0x48, 0x53, 0x14, 0x30, 
   0x25, 0x65, 0x86, 0xAB, 0x73, 0x65, 0xC5, 0x5D, 0x54, 0x87, 0x79, 0x6B, 0x86, 0x4A, 0x72, 0x85, 
   0x27, 0x72, 0x69, 0x60, 0x76, 0xA2, 0x66, 0x53, 0xA2, 0x34, 0x4E, 0x7F, 0x57, 0x76, 0x89, 0x95, 
   0x8D, 0x7D, 0x50, 0x70, 0x77, 0x22, 0x4C, 0x94, 0x66, 0x35, 0x94, 0x4B, 0x5E, 0x4A, 0x72, 0x98, 
   0xA5, 0x87, 0x80, 0xB6, 0x25, 0x4B, 0x5A, 0x19, 0x28, 0x65, 0x75, 0x67, 0xB5, 0x60, 0x74, 0x9E, 
   0x3F, 0x4E, 0x38, 0x58, 0x66, 0x78, 0x92, 0xAA, 0xF1, 0xBC, 0x90, 0xC6, 0x11, 0x1F, 0x38, 0x00, 
   0x02, 0x0F, 0x58, 0x3F, 0x95, 0xBF, 0xC1, 0xCD, 0x98, 0xB6, 0xC7, 0x61, 0x4C, 0x85, 0x07, 0x1B, 
   0x32, 0x0D, 0x32, 0x3E, 0x65, 0x7E, 0xA8, 0xA7, 0x91, 0xE3, 0x52, 0x5D, 0x8C, 0x51, 0x51, 0x2A, 
   0x5C, 0x63, 0x53, 0x51, 0x8B, 0xF4, 0x37, 0x2D, 0x87, 0x21, 0x0C, 0x8D, 0x78, 0x7B, 0x81, 0x72, 
   0xB5, 0x75, 0x2D, 0x4E, 0x85, 0x21, 0x15, 0x6E, 0x3F, 0x5A, 0x6E, 0x73, 0x98, 0x85, 0x73, 0x4D, 
   0xB2, 0x3F, 0x23, 0x9F, 0x3E, 0x57, 0x41, 0x33, 0x6F, 0x2F, 0x45, 0x59, 0x60, 0x5D, 0x53, 0xD5, 
   0x63, 0x64, 0xC5, 0x4B, 0x63, 0x51, 0x54, 0x45, 0x97, 0x2A, 0x45, 0x63, 0x09, 0x4C, 0x3B, 0x7D, 
   0x69, 0x93, 0x8F, 0x74, 0xC2, 0x1C, 0x4B, 0x9E, 0x36, 0x17, 0x57, 0x5E, 0x79, 0x4F, 0x36, 0x80, 
   0x7D, 0x20, 0x42, 0x8A, 0x82, 0x6E, 0x5E, 0x55, 0x35, 0x8D, 0x2C, 0x41, 0xBB, 0x48, 0x91, 0xAD, 
   0x79, 0x8F, 0x42, 0x17, 0x1A, 0x24, 0x00, 0x00, 0x43, 0x58, 0x78, 0xBA, 0x8F, 0xA9, 0xCF, 0x4C, 
   0x2E, 0x6E, 0x50, 0x56, 0x83, 0x4A, 0x8A, 0x5C, 0x2D, 0x67, 0x6E, 0x70, 0x6F, 0xF0, 0x74, 0x43, 
   0x5F, 0x00, 0x0F, 0x14, 0x24, 0x4E, 0x76, 0x92, 0x63, 0xB8, 0x56, 0x44, 0xA1, 0x34, 0x6C, 0x2F, 
   0x82, 0x71, 0x5E, 0x5E, 0x69, 0xFF, 0x00, 0x14, 0x85, 0x24, 0x32, 0x00, 0x44, 0x8C, 0x9F, 0xB3, 
   0xCB, 0xFF, 0x79, 0x83, 0x93, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x7A, 0x98, 0xFF, 0xA8, 0xFF, 
   0xF3, 0x4A, 0x7A, 0x2E, 0x00, 0x00, 0x2C, 0x0B, 0x00, 0x85, 0xB5, 0xE5, 0xB1, 0x95, 0xBB, 0xCF, 
   0x37, 0x31, 0xA4, 0x28, 0x6C, 0x51, 0x0B, 0x21, 0x45, 0x25, 0x08, 0x92, 0x58, 0x9B, 0xA5, 0xC2, 
   0xBC, 0x8A, 0xB0, 0x99, 0x8F, 0x00, 0x67, 0xC6, 0x25, 0x35, 0x68, 0xA0, 0x38, 0x39, 0x27, 0x8C, 
   0xAB, 0x00, 0x52, 0xB6, 0x32, 0x0E, 0x49, 0x7F, 0x60, 0x4E, 0x70, 0xC2, 0xA0, 0x4D, 0x98, 0xDA, 
   0x4B, 0x10, 0x9F, 0x38, 0x40, 0x4C, 0x59, 0x78, 0x93, 0x48, 0x3F, 0x8A, 0x1B, 0x00, 0x00, 0x4A, 
   0x5B, 0x44, 0x79, 0xE6, 0xFF, 0x67, 0x74, 0xB5, 0x28, 0x00, 0x26, 0x43, 0x78, 0x54, 0x5F, 0xAB, 
   0xDE, 0x26, 0x26, 0x99, 0x1C, 0x2B, 0x26, 0x9A, 0x5F, 0x87, 0x56, 0x8D, 0xE9, 0x06, 0x53, 0x75, 
   0x56, 0x20, 0x06, 0x84, 0x6A, 0x6D, 0x44, 0x9E, 0xDC, 0x21, 0x52, 0x8D, 0x55, 0x1D, 0x3D, 0x4B, 
   0x39, 0x92, 0x57, 0x52, 0x83, 0x4C, 0x71, 0x7E, 0x57, 0x82, 0xBD, 0x40, 0x4F, 0x93, 0x45, 0x3D, 
   0x3D, 0x45, 0x6A, 0x76, 0x57, 0x65, 0xB5, 0x62, 0x5E, 0x99, 0x34, 0x58, 0x54, 0x29, 0x0A, 0x3F, 
   0x5D, 0x62, 0xA3, 0x7B, 0xBF, 0xC3, 0x5D, 0x58, 0x85, 0x38, 0x3E, 0x90, 0x0F, 0x37, 0x8F, 0x3D, 
   0x48, 0x5C, 0x61, 0x7D, 0x8A, 0x4C, 0x56, 0xB8, 0x47, 0x46, 0x8A, 0x7F, 0x95, 0x82, 0x56, 0x6B, 
   0x8C, 0x1C, 0x1A, 0x70, 0x2D, 0x37, 0x87, 0x6D, 0x6B, 0x9E, 0x67, 0x67, 0x87, 0x34, 0x51, 0x5A, 
   0x34, 0x68, 0x78, 0x84, 0x6D, 0xD5, 0x6C, 0x67, 0xD4, 0x3B, 0x65, 0x85, 0x10, 0x51, 0x2A, 0x00, 
   0x1E, 0x14, 0x4E, 0x37, 0xAD, 0xA8, 0xA5, 0xFF, 0x80, 0x78, 0x98, 0x23, 0x06, 0x0C, 0x0B, 0x35, 
   0x4C, 0x5C, 0xA4, 0xE9, 0x7F, 0x99, 0xE5, 0x24, 0x52, 0x65, 0x41, 0x17, 0x45, 0x8A, 0x7D, 0xB5, 
   0x60, 0x8D, 0x91, 0x02, 0x1A, 0x46, 0x0D, 0x1A, 0x62, 0x64, 0x9F, 0x92, 0x71, 0x8F, 0xBC, 0x5A, 
   0x3F, 0x88, 0x26, 0x49, 0x4F, 0x36, 0x5F, 0x88, 0x53, 0x65, 0xBB, 0x4D, 0x59, 0x6A, 0x31, 0x4D, 
   0x6D, 0x42, 0x30, 0x6D, 0x34, 0x3E, 0x43, 0x64, 0x7B, 0xA9, 0x87, 0xBC, 0xF5, 0x47, 0x76, 0x9E, 
   0x4B, 0x23, 0x4A, 0x28, 0x2D, 0x37, 0x23, 0x35, 0x73, 0x6A, 0x67, 0xB1, 0x9F, 0xB4, 0xF7, 0x7A, 
   0xBD, 0xC6, 0x09, 0x1E, 0x22, 0x00, 0x00, 0x00, 0x2A, 0x77, 0xB5, 0xDB, 0xE3, 0xF8, 0xAF, 0x8E, 
   0x92, 0x2E, 0x4D, 0x7F, 0x00, 0x34, 0x77, 0x58, 0x6C, 0x76, 0x86, 0x61, 0x8C, 0x15, 0x2F, 0x3E, 
   0x06, 0x4F, 0x75, 0x8D, 0xB1, 0xD9, 0x9F, 0x73, 0xBF, 0x42, 0x70, 0xA0, 0x00, 0x3A, 0x60, 0x49, 
   0x1F, 0x77, 0x9B, 0x82, 0xA6, 0x67, 0x96, 0xC2, 0x32, 0x8A, 0x77, 0x36, 0x54, 0x59, 0x6F, 0x37, 
   0xAF, 0x7A, 0x80, 0xD0, 0x4B, 0x91, 0x77, 0x27, 0x24, 0x30, 0x1C, 0x46, 0x6F, 0x84, 0x8B, 0xC0, 
   0x96, 0x6A, 0x98, 0x18, 0x65, 0x5F, 0x12, 0x65, 0x6B, 0x6A, 0x65, 0x95, 0x83, 0x5F, 0xA7, 0x56, 
   0x7C, 0x90, 0x4A, 0x54, 0x84, 0x61, 0x7C, 0x7F, 0x88, 0x70, 0xAC, 0x49, 0x4D, 0xAA, 0x4C, 0x57, 
   0x68, 0x66, 0x78, 0x50, 0x25, 0x60, 0x7E, 0x03, 0x2C, 0x86, 0x55, 0x66, 0x60, 0x59, 0x68, 0x9B, 
   0x6D, 0x65, 0xA9, 0x8F, 0x82, 0xC0, 0x6A, 0x88, 0x8B, 0x32, 0x64, 0x76, 0x00, 0x50, 0x68, 0x2D, 
   0x2E, 0x68, 0x91, 0x7A, 0x81, 0x6C, 0x8C, 0x9A, 0x28, 0x49, 0x90, 0x66, 0x7D, 0xB2, 0x7D, 0x8D, 
   0x8A, 0x39, 0x4E, 0x51, 0x56, 0x3C, 0x96, 0x50, 0x76, 0xAE, 0x6D, 0x7D, 0x86, 0x5B, 0x6B, 0x85, 
   0x3E, 0x53, 0x95, 0x49, 0x4D, 0x72, 0x44, 0x53, 0x50, 0x51, 0x60, 0x79, 0x86, 0x89, 0xD5, 0x7A, 
   0x88, 0xB2, 0x4F, 0x5D, 0x71, 0x1A, 0x2D, 0x3C, 0x04, 0x1D, 0x7D, 0x8F, 0x7B, 0xEA, 0x86, 0xB0, 
   0x9A, 0x5D, 0x60, 0x49, 0x4A, 0x59, 0x88, 0x53, 0x63, 0xB0, 0x30, 0x57, 0x9F, 0x41, 0x57, 0x65, 
   0x49, 0x58, 0x65, 0x72, 0x7B, 0x99, 0x62, 0x7B, 0x95, 0x56, 0x6E, 0xB6, 0x6A, 0x60, 0x96, 0x34, 
   0x1B, 0x3F, 0x00, 0x44, 0x4C, 0x7D, 0x9D, 0xD7, 0xBE, 0xAE, 0xD7, 0x50, 0x57, 0x57, 0x31, 0x1C, 
   0x3E, 0x35, 0x65, 0x88, 0x3C, 0x61, 0xA7, 0x44, 0x5C, 0x7B, 0x7A, 0x6E, 0x8C, 0x75, 0x63, 0x7C, 
   0x52, 0x4D, 0x72, 0x46, 0x86, 0xC2, 0x56, 0x51, 0x8D, 0x61, 0x4C, 0x98, 0x3E, 0x73, 0x75, 0x27, 
   0x40, 0x80, 0x4A, 0x09, 0x75, 0x45, 0x73, 0x86, 0x5C, 0xF1, 0xA3, 0x67, 0x54, 0xA7, 0x4A, 0x00, 
   0x72, 0x37, 0x2D, 0x74, 0x27, 0x68, 0x2A, 0x4B, 0x6A, 0x44, 0x7F, 0x5A, 0xF7, 0x58, 0x6A, 0xB9, 
   0x45, 0x4D, 0x44, 0x70, 0x57, 0x5C, 0x1A, 0x45, 0x4C, 0x09, 0x57, 0x60, 0x61, 0x58, 0xB9, 0x74, 
   0x64, 0xD0, 0x68, 0x7A, 0x88, 0x5F, 0x4B, 0x1D, 0x00, 0x33, 0x48, 0x0D, 0x2E, 0x6A, 0x7B, 0x8B, 
   0x66, 0x71, 0x7B, 0x91, 0x2D, 0x2B, 0x93, 0x60, 0x58, 0x82, 0x64, 0x85, 0xA2, 0x29, 0x61, 0x93, 
   0x1D, 0x1B, 0x03, 0x4B, 0x2C, 0x2C, 0x52, 0x62, 0xE0, 0x31, 0x75, 0x93, 0x49, 0x65, 0x3E, 0x7C, 
   0x6F, 0xAF, 0x27, 0x14, 0x60, 0x1C, 0x27, 0x29, 0x83, 0xDF, 0xEC, 0x61, 0x9A, 0xC5, 0x27, 0x00, 
   0x3A, 0x58, 0x3E, 0x54, 0x57, 0x4F, 0xB6, 0x07, 0x51, 0xA0, 0x25, 0x74, 0x4F, 0x60, 0x4D, 0x39, 
   0x67, 0x2C, 0x9D, 0x7D, 0x89, 0xF5, 0x47, 0xAB, 0x9D, 0x00, 0x26, 0x01, 0x25, 0x15, 0x40, 0x94, 
   0x72, 0xE3, 0x6E, 0xA1, 0xA6, 0x29, 0x6C, 0x3E, 0x4F, 0x0A, 0x60, 0x4E, 0x5F, 0xB6, 0x15, 0x50, 
   0xB1, 0x39, 0x1F, 0x44, 0x6A, 0x6E, 0x3B, 0x94, 0xF9, 0xB7, 0x5B, 0x5E, 0xFF, 0x42, 0x00, 0x6C, 
   0x44, 0x8D, 0x58, 0x31, 0x60, 0x9F, 0x0F, 0x28, 0x44, 0x02, 0x68, 0x52, 0x80, 0x67, 0xC2, 0x90, 
   0x3E, 0x97, 0x63, 0xB8, 0x75, 0x92, 0xFF, 0xBD, 0x70, 0x71, 0xB5, 0x00, 0x00, 0x56, 0x00, 0x00, 
   0x42, 0x70, 0x6D, 0x8D, 0xAB, 0xA8, 0xDD, 0x29, 0x69, 0x5F, 0x17, 0x29, 0x26, 0x89, 0x68, 0xB5, 
   0x5C, 0x8F, 0xAB, 0x22, 0x2E, 0x66, 0x38, 0x80, 0x9C, 0x6B, 0x5B, 0x82, 0x3D, 0x00, 0x30, 0x10, 
   0x36, 0x6F, 0x66, 0x9B, 0x7E, 0x67, 0xA8, 0x82, 0x56, 0x4B, 0xBD, 0x49, 0x00, 0xA0, 0x26, 0x6D, 
   0x4A, 0x32, 0xEA, 0x98, 0x77, 0x4E, 0xAE, 0x34, 0x00, 0x2C, 0x45, 0x46, 0x9F, 0x7E, 0xB5, 0xFF, 
   0x4B, 0x6B, 0x46, 0x33, 0x0A, 0x00, 0x3E, 0x70, 0xAD, 0x4F, 0x9D, 0xE2, 0x3F, 0x35, 0x6B, 0x4B, 
   0x0C, 0x21, 0x4C, 0x47, 0x95, 0x63, 0x94, 0xD0, 0x51, 0x83, 0x96, 0x45, 0x54, 0x65, 0x4B, 0x41, 
   0x68, 0x4B, 0x13, 0x51, 0x4B, 0x69, 0x75, 0x40, 0x81, 0x9A, 0x36, 0x22, 0x80, 0x75, 0x56, 0xAF, 
   0x64, 0xA2, 0xAA, 0x40, 0x69, 0x5A, 0x3E, 0x45, 0x76, 0x3D, 0x44, 0x89, 0x37, 0x71, 0x84, 0x4A, 
   0x44, 0xA2, 0x5C, 0x4A, 0xC4, 0x4C, 0x83, 0x78, 0x46, 0x55, 0x4A, 0x3B, 0x33, 0xA1, 0x6E, 0x5C, 
   0xDA, 0x50, 0x8F, 0x6B, 0x33, 0x6C, 0x3B, 0x2D, 0x3D, 0x90, 0x5B, 0x48, 0x96, 0x61, 0x66, 0x59, 
   0x22, 0x51, 0x6C, 0x45, 0x63, 0xA8, 0x8F, 0x9C, 0xFF, 0x4E, 0x72, 0x9E, 0x24, 0x13, 0x05, 0x2E, 
   0x33, 0x58, 0x24, 0x45, 0x7D, 0x3E, 0x5F, 0x8C, 0x7F, 0x84, 0xD1, 0x80, 0x6F, 0x87, 0x2F, 0x54, 
   0x53, 0x39, 0x7B, 0xA2, 0x3A, 0x6A, 0x7B, 0x4D, 0x31, 0x65, 0x7B, 0x7A, 0xCB, 0x73, 0x9B, 0xC8, 
   0x31, 0x38, 0x40, 0x06, 0x2F, 0x3D, 0x29, 0x3A, 0x55, 0x7B, 0x4D, 0x8C, 0x65, 0x71, 0xAB, 0x2C, 
   0x61, 0x8A, 0x27, 0x46, 0x90, 0x6C, 0x8A, 0x79, 0x60, 0x82, 0x94, 0x3C, 0x24, 0xAE, 0x19, 0x0C, 
   0x2F, 0x2C, 0x31, 0x1F, 0x85, 0x91, 0xBD, 0x70, 0xA5, 0xD1, 0x4D, 0x76, 0x98, 0x50, 0x3A, 0x90, 
   0x22, 0x17, 0x4A, 0x34, 0x5D, 0x4B, 0x73, 0x98, 0xBF, 0x58, 0x60, 0xC5, 0x30, 0x38, 0x37, 0x58, 
   0x62, 0x5F, 0x5D, 0x9C, 0xE4, 0x2A, 0x84, 0xB0, 0x30, 0x00, 0x32, 0x54, 0x50, 0x7D, 0x82, 0xA7, 
   0xE4, 0x43, 0x5D, 0x7E, 0x0F, 0x5C, 0x61, 0x60, 0x5C, 0xAC, 0x78, 0x52, 0x80, 0x3A, 0x71, 0x97, 
   0x3A, 0x89, 0x81, 0x52, 0x5C, 0x6C, 0x5F, 0x7D, 0xC8, 0x87, 0x6A, 0x9F, 0x6F, 0x51, 0x6A, 0x3F, 
   0x5B, 0x75, 0x00, 0x1F, 0x77, 0x23, 0x6C, 0x96, 0xE9, 0xB9, 0xE1, 0xE2, 0x7F, 0xA0, 0x00, 0x64, 
   0x6F, 0x00, 0x2D, 0x94, 0x4D, 0x17, 0x81, 0x39, 0x97, 0x54, 0x69, 0x99, 0xAB, 0x76, 0x66, 0xB7, 
   0x54, 0x5A, 0x6C, 0x48, 0x5A, 0x7D, 0x5E, 0x81, 0x8E, 0x36, 0x6A, 0x9A, 0x49, 0x48, 0x8F, 0x72, 
   0x66, 0x62, 0x6D, 0x94, 0x9C, 0x60, 0x76, 0xDB, 0x41, 0x41, 0xA4, 0x1E, 0x3A, 0x18, 0x41, 0x63, 
   0x2A, 0x9C, 0xA1, 0xF3, 0x99, 0x71, 0xD1, 0x00, 0x1F, 0x30, 0x00, 0x15, 0x4D, 0xA8, 0x85, 0x9A, 
   0xB8, 0xA4, 0xDC, 0x6E, 0x55, 0x87, 0x4D, 0x65, 0x80, 0x3E, 0x7A, 0xAB, 0x15, 0x35, 0x6A, 0x3E, 
   0x51, 0x7A, 0x7A, 0x96, 0x74, 0x7C, 0x42, 0x5F, 0x39, 0x43, 0x84, 0x57, 0x8E, 0xBB, 0x85, 0x89, 
   0xE3, 0x5C, 0x49, 0x75, 0x44, 0x43, 0x3A, 0x49, 0x7C, 0x8A, 0x38, 0x71, 0xB9, 0x78, 0x70, 0xA2, 
   0x7D, 0x58, 0x7E, 0x1D, 0x2B, 0x66, 0x4B, 0x71, 0x67, 0x7F, 0xA5, 0xAD, 0x74, 0x77, 0x91, 0x40, 
   0x59, 0xB8, 0x55, 0x51, 0x7D, 0x54, 0x40, 0x43, 0x37, 0x6E, 0x8D, 0x3F, 0x69, 0xB0, 0x74, 0x5A, 
   0x77, 0x65, 0x72, 0x55, 0x91, 0x7E, 0xA0, 0x66, 0x88, 0xB0, 0x1A, 0x58, 0x6B, 0x30, 0x40, 0x6B, 
   0x75, 0x7E, 0xB6, 0x6A, 0x67, 0x8D, 0x31, 0x39, 0x59, 0x3E, 0x45, 0x65, 0x79, 0x6F, 0xB0, 0xA0, 
   0xA8, 0xB6, 0x59, 0x62, 0x86, 0x00, 0x2C, 0x56, 0x2A, 0x27, 0x61, 0x77, 0x7E, 0x90, 0x89, 0x9C, 
   0xB8, 0x77, 0x62, 0x9B, 0x1A, 0x38, 0x66, 0x2B, 0x55, 0x50, 0x67, 0x57, 0x76, 0x97, 0x69, 0xCF, 
   0x53, 0x86, 0xDA, 0x4D, 0x42, 0x12, 0x62, 0x81, 0x80, 0x7D, 0xA8, 0x85, 0x15, 0x22, 0x6E, 0x15, 
   0x00, 0x75, 0x62, 0x6A, 0x7B, 0x91, 0xDA, 0x98, 0x57, 0x68, 0x97, 0x21, 0x2C, 0x89, 0x2B, 0x5D, 
   0x6F, 0x20, 0x41, 0x14, 0x44, 0x47, 0x6C, 0x6E, 0x65, 0xEC, 0x46, 0x76, 0xAE, 0x6D, 0x6A, 0x5B, 
   0x4E, 0x58, 0x79, 0x03, 0x35, 0x2D, 0x2B, 0x57, 0x2B, 0x72, 0x58, 0xB3, 0x6F, 0x69, 0xF5, 0x58, 
   0x63, 0xA8, 0x5B, 0x35, 0x53, 0x4D, 0x62, 0x4F, 0x24, 0x6D, 0x70, 0x19, 0x39, 0x59, 0x5F, 0x40, 
   0x6C, 0x77, 0x74, 0x6F, 0x3E, 0x6A, 0xB5, 0x3D, 0x7B, 0xCA, 0x6E, 0x78, 0x3E, 0x18, 0x0F, 0x09, 
   0x0D, 0x00, 0x78, 0x6A, 0x7A, 0xD6, 0x82, 0xBB, 0x7C, 0x48, 0x6B, 0x5E, 0x19, 0x3B, 0x85, 0x3B, 
   0x4B, 0x47, 0x48, 0x3A, 0x72, 0x55, 0x52, 0xE5, 0x44, 0x49, 0x6E, 0x39, 0x84, 0x36, 0x4B, 0xAC, 
   0xCA, 0x83, 0x3D, 0xA7, 0x53, 0x2F, 0x55, 0x01, 0x6D, 0x7B, 0x3A, 0x5B, 0x3D, 0x53, 0x29, 0x8F, 
   0x4A, 0x42, 0xBE, 0x6D, 0x78, 0x3D, 0x5B, 0x9B, 0x87, 0x59, 0x81, 0xF7, 0x29, 0x12, 0x2E, 0x00, 
   0x00, 0x00, 0x44, 0x55, 0xB1, 0xCA, 0xE1, 0xFF, 0x84, 0xB7, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x02, 0x2F, 0x2C, 0xA7, 0xF6, 0xFF, 0xEB, 0xA2, 0xE7, 0xB3, 0x1B, 0x1A, 0x83, 0x22, 0x1F, 0x6F, 
   0x48, 0x1E, 0x67, 0x26, 0x43, 0x67, 0x1D, 0xA7, 0x95, 0x70, 0x70, 0x7B, 0x5D, 0x33, 0x5C, 0x43, 
   0x5E, 0xD0, 0x72, 0x9A, 0xBF, 0xCB, 0xBC, 0x4C, 0x70, 0xAB, 0xBB, 0x00, 0x32, 0xD4, 0x1A, 0x00, 
   0x2B, 0x93, 0x56, 0x3B, 0x56, 0xDA, 0xA8, 0x43, 0x49, 0xBA, 0x2B, 0x00, 0x74, 0x10, 0x21, 0x13, 
   0x72, 0xA2, 0x93, 0x73, 0xD5, 0xFF, 0x4B, 0x2E, 0x67, 0x2D, 0x19, 0x59, 0x60, 0x84, 0xEF, 0x59, 
   0x35, 0x4D, 0x15, 0x15, 0x00, 0x38, 0x8A, 0x85, 0x83, 0xB9, 0xF7, 0x33, 0x3B, 0xCA, 0x21, 0x23, 
   0x55, 0x77, 0x89, 0x31, 0x44, 0x8D, 0x81, 0x22, 0x2A, 0xB4, 0x4B, 0x07, 0x54, 0x79, 0x5E, 0x65, 
   0x61, 0xBB, 0xF3, 0x05, 0x76, 0x90, 0x3E, 0x0E, 0x00, 0x72, 0x4D, 0x6E, 0x40, 0x87, 0xC7, 0x3A, 
   0x4F, 0x7F, 0x57, 0x5A, 0x80, 0x57, 0x5F, 0xBF, 0x40, 0x5A, 0x90, 0x45, 0x87, 0x82, 0x4B, 0x4D, 
   0x74, 0x50, 0x35, 0x67, 0x34, 0x3B, 0x35, 0x1F, 0x44, 0x5C, 0x7C, 0x80, 0xDE, 0x8D, 0xA8, 0xDA, 
   0x58, 0x5D, 0x6B, 0x27, 0x22, 0x5D, 0x1F, 0x4F, 0x6F, 0x3D, 0x72, 0x8D, 0x61, 0x51, 0x84, 0x5C, 
   0x78, 0xC9, 0x4C, 0x61, 0x9B, 0x4C, 0x5B, 0x45, 0x4C, 0x4F, 0x83, 0x4C, 0x33, 0xA2, 0x41, 0x57, 
   0xA3, 0x6E, 0x91, 0xAC, 0x4B, 0x79, 0x80, 0x2D, 0x38, 0x29, 0x38, 0x2B, 0x79, 0x4A, 0x48, 0xA3, 
   0x66, 0x67, 0xA0, 0x4A, 0x6E, 0x83, 0x22, 0x80, 0x6C, 0x66, 0x73, 0x89, 0x71, 0x53, 0xCC, 0x4D, 
   0x40, 0x85, 0x23, 0x44, 0x49, 0x01, 0x0D, 0x49, 0x27, 0x45, 0x69, 0xA2, 0xC0, 0xFB, 0x9D, 0xBB, 
   0xFA, 0x00, 0x08, 0x00, 0x1E, 0x13, 0x17, 0x91, 0x98, 0xE1, 0x7A, 0xA9, 0xE7, 0x2D, 0x57, 0x5B, 
   0x1F, 0x32, 0x5D, 0x4C, 0x64, 0x6C, 0x5E, 0x73, 0x7E, 0x41, 0x17, 0x6E, 0x1F, 0x1F, 0x77, 0x49, 
   0x83, 0xA1, 0x67, 0x97, 0xB9, 0x79, 0x69, 0x96, 0x4F, 0x5B, 0x7D, 0x2B, 0x42, 0x4E, 0x0F, 0x15, 
   0x60, 0x4F, 0x56, 0x9B, 0x6E, 0xBA, 0xB8, 0x6E, 0x8C, 0xA0, 0x3F, 0x23, 0x55, 0x11, 0x11, 0x3F, 
   0x50, 0x74, 0x91, 0x6E, 0x82, 0xD7, 0x57, 0x7C, 0x97, 0x3F, 0x63, 0x5B, 0x22, 0x00, 0x2D, 0x0E, 
   0x1D, 0x43, 0x8A, 0xC7, 0xF3, 0xBE, 0xF6, 0xFF, 0x6B, 0x6F, 0x67, 0x00, 0x00, 0x23, 0x00, 0x25, 
   0x4B, 0x69, 0xA5, 0xA9, 0x9A, 0x7A, 0xA6, 0x4C, 0x37, 0x70, 0x2B, 0x5B, 0xB1, 0x98, 0xAC, 0xB7, 
   0x80, 0x78, 0x93, 0x06, 0x4F, 0x75, 0x0C, 0x4E, 0x6A, 0x80, 0x7B, 0xA3, 0xCF, 0x7F, 0x91, 0x05, 
   0x45, 0x75, 0x00, 0x40, 0x65, 0x7E, 0x48, 0xA7, 0xDF, 0x84, 0xC0, 0xA0, 0xB8, 0xEB, 0x65, 0x75, 
   0x7F, 0x00, 0x00, 0x03, 0x00, 0x1D, 0x65, 0x89, 0xA3, 0xDF, 0x98, 0xA0, 0xA2, 0x38, 0x4A, 0x62, 
   0x28, 0x66, 0x8F, 0x9F, 0x7C, 0xA6, 0x71, 0x4E, 0x9A, 0x20, 0x53, 0x72, 0x26, 0x5F, 0x6C, 0x71, 
   0x66, 0x8A, 0x8E, 0x8D, 0xAD, 0x4D, 0x75, 0xC2, 0x07, 0x36, 0x59, 0x40, 0x5D, 0x30, 0x7A, 0x7A, 
   0x9E, 0x5E, 0x73, 0xC2, 0x46, 0x4A, 0x8E, 0x5B, 0x4E, 0x81, 0x22, 0x55, 0x70, 0x1E, 0x51, 0x76, 
   0x92, 0x87, 0x73, 0x7C, 0x9E, 0xAD, 0x26, 0x4D, 0xA7, 0x52, 0x36, 0x79, 0x62, 0x86, 0xAB, 0x56, 
   0x8B, 0x7C, 0x18, 0x36, 0x64, 0x31, 0x4D, 0x70, 0x94, 0x87, 0x7E, 0x63, 0x60, 0x8D, 0x41, 0x4A, 
   0xC2, 0x79, 0x9A, 0xCC, 0x5B, 0x89, 0x6E, 0x2C, 0x38, 0x45, 0x42, 0x6F, 0xA0, 0x55, 0x58, 0xAC, 
   0x3A, 0x42, 0x73, 0x7F, 0x7C, 0x6D, 0x5D, 0x82, 0xB8, 0x5C, 0x71, 0xAD, 0x50, 0x5E, 0x78, 0x4A, 
   0x41, 0x61, 0x3F, 0x4D, 0x8A, 0x6D, 0x8C, 0xD3, 0x7D, 0x92, 0x88, 0x1D, 0x36, 0x2C, 0x2F, 0x2B, 
   0x82, 0xA8, 0x77, 0xDA, 0x59, 0xA1, 0xA6, 0x46, 0x7E, 0x49, 0x6C, 0x4E, 0x71, 0x4D, 0x57, 0xA5, 
   0x51, 0x66, 0xBC, 0x33, 0x4E, 0x81, 0x18, 0x43, 0x5D, 0x54, 0x4C, 0x53, 0x74, 0x88, 0x9B, 0x92, 
   0xB6, 0xFD, 0x9F, 0x8A, 0xC5, 0x1D, 0x00, 0x10, 0x00, 0x00, 0x09, 0x58, 0x7D, 0xBD, 0x9B, 0xBF, 
   0xDB, 0x73, 0x74, 0x73, 0x43, 0x3F, 0x38, 0x31, 0x33, 0x4B, 0x37, 0x79, 0xAA, 0x62, 0x8B, 0xCF, 
   0x80, 0x64, 0x96, 0x43, 0x4D, 0x5C, 0x49, 0x6E, 0x78, 0x49, 0x7E, 0x73, 0x43, 0x0D, 0x69, 0x39, 
   0x42, 0x8D, 0x57, 0xB5, 0xA9, 0x6E, 0x5F, 0x91, 0x5B, 0x20, 0x89, 0x2C, 0x48, 0x5E, 0x32, 0x94, 
   0x20, 0x44, 0x6C, 0x5C, 0x68, 0x49, 0xED, 0x68, 0x53, 0xBF, 0x4A, 0x69, 0x55, 0x3D, 0x52, 0x68, 
   0x41, 0x52, 0x62, 0x0F, 0x52, 0x2B, 0x4A, 0x4D, 0x95, 0x74, 0x69, 0xD1, 0x69, 0x74, 0xA3, 0x56, 
   0x35, 0x67, 0x26, 0x4B, 0x5E, 0x0F, 0x57, 0x85, 0x70, 0x68, 0x9B, 0x70, 0x67, 0x50, 0x0F, 0x22, 
   0x67, 0x31, 0x23, 0x90, 0x8C, 0xB3, 0xA0, 0x47, 0x8A, 0x6B, 0x00, 0x00, 0x31, 0x4C, 0x15, 0x39, 
   0x64, 0x57, 0xDC, 0x49, 0x93, 0xC2, 0x65, 0x72, 0x4F, 0x6F, 0x70, 0x85, 0x3A, 0x40, 0x67, 0x00, 
   0x07, 0x2B, 0x63, 0x9B, 0xD1, 0x99, 0x7E, 0x94, 0x17, 0x00, 0x1D, 0x40, 0x44, 0x85, 0x95, 0xCA, 
   0xBB, 0x4B, 0x91, 0xBA, 0x2C, 0x4F, 0x5B, 0x57, 0x39, 0x00, 0x34, 0x0A, 0x9F, 0x24, 0x56, 0xDA, 
   0x53, 0x80, 0x40, 0x22, 0x66, 0x51, 0x68, 0x60, 0xAE, 0xC8, 0x70, 0xD6, 0x1F, 0x57, 0x95, 0x00, 
   0x0C, 0x00, 0x4C, 0x3C, 0x6B, 0x9F, 0xBC, 0xFF, 0x61, 0xA0, 0xA6, 0x0A, 0x0B, 0x0E, 0x16, 0x02, 
   0x0F, 0x7F, 0xBD, 0xA9, 0x66, 0x99, 0xFF, 0x5B, 0x61, 0x9B, 0x80, 0xB9, 0x37, 0x22, 0x55, 0x7E, 
   0x00, 0x00, 0x90, 0x34, 0x71, 0x69, 0x8C, 0x80, 0x81, 0x77, 0x49, 0xA4, 0x28, 0x7E, 0x83, 0x4B, 
   0x8A, 0x7F, 0x8F, 0x5C, 0xBE, 0x44, 0x49, 0xAC, 0x03, 0x5F, 0x65, 0x85, 0x92, 0x73, 0x79, 0x8F, 
   0xBB, 0x16, 0x40, 0x47, 0x26, 0x15, 0x29, 0x64, 0x57, 0xB2, 0x4D, 0x4C, 0xA7, 0x0F, 0x37, 0x40, 
   0x38, 0x67, 0x69, 0x79, 0x8B, 0x83, 0x6E, 0x74, 0xBE, 0x2E, 0x4A, 0xC2, 0x4F, 0x65, 0x63, 0x49, 
   0x63, 0x54, 0x3D, 0x1E, 0x5A, 0x42, 0x20, 0x73, 0x3E, 0x79, 0x8D, 0x56, 0xE7, 0xA6, 0x6D, 0x5C, 
   0xA6, 0x34, 0x00, 0x6C, 0x39, 0x7C, 0x65, 0x6D, 0xBB, 0xAF, 0x56, 0x3C, 0x6F, 0x33, 0x00, 0x36, 
   0x33, 0x52, 0x8D, 0x6C, 0xAE, 0xE8, 0x39, 0x47, 0x6E, 0x40, 0x00, 0x00, 0x68, 0x6C, 0x7D, 0x63, 
   0xCF, 0xFF, 0x3A, 0x67, 0x97, 0x34, 0x14, 0x45, 0x4B, 0x3A, 0x7C, 0x62, 0x4D, 0x9E, 0x45, 0x70, 
   0x7B, 0x45, 0x75, 0x58, 0x24, 0x26, 0x60, 0x70, 0x34, 0x86, 0x76, 0xCA, 0xC7, 0x42, 0x7A, 0x9A, 
   0x50, 0x2E, 0x7C, 0x3D, 0x43, 0x74, 0x0F, 0x49, 0x6F, 0x43, 0x56, 0x7C, 0x6D, 0x7F, 0xC1, 0x4C, 
   0x5D, 0x77, 0x4C, 0x72, 0x61, 0x51, 0x32, 0xA6, 0x4C, 0x39, 0x90, 0x4C, 0x7F, 0x7A, 0x51, 0x75, 
   0x8C, 0x46, 0x58, 0xA7, 0x68, 0x74, 0xB0, 0x62, 0x61, 0x69, 0x28, 0x32, 0x3B, 0x38, 0x3D, 0x9E, 
   0x5A, 0x66, 0xD8, 0x3E, 0x72, 0x6A, 0x38, 0x45, 0x15, 0x34, 0x56, 0x95, 0x79, 0x83, 0xFF, 0x7D, 
   0x65, 0xB7, 0x30, 0x24, 0x4B, 0x0C, 0x41, 0x26, 0x24, 0x49, 0x66, 0x4F, 0x79, 0xAE, 0x69, 0x7A, 
   0xCC, 0x70, 0x3C, 0x7B, 0x52, 0x53, 0x6E, 0x50, 0x91, 0x94, 0x3E, 0x69, 0x88, 0x37, 0x2F, 0x65, 
   0x37, 0x72, 0x98, 0x6B, 0x76, 0x8C, 0x64, 0x52, 0x85, 0x13, 0x2E, 0x52, 0x0E, 0x2A, 0x6A, 0x60, 
   0x60, 0x9A, 0x84, 0xA1, 0x9C, 0x45, 0x6D, 0xA1, 0x28, 0x23, 0x5C, 0x3F, 0x46, 0x41, 0x62, 0x8C, 
   0xBA, 0x67, 0x8C, 0xF9, 0x33, 0x51, 0x6D, 0x37, 0x32, 0x2A, 0x32, 0x27, 0x41, 0x3F, 0x74, 0x7E, 
   0x6E, 0x7C, 0xC6, 0x68, 0x8E, 0xD8, 0x34, 0x59, 0x85, 0x1C, 0x1F, 0x0B, 0x34, 0x48, 0x79, 0x43, 
   0x67, 0xC6, 0x75, 0x6B, 0x75, 0xB4, 0xA6, 0xAF, 0x8E, 0xC6, 0xFF, 0x0B, 0x38, 0x46, 0x00, 0x00, 
   0x00, 0x40, 0x47, 0x84, 0x9A, 0x8A, 0xA6, 0x4E, 0x83, 0x94, 0x55, 0x90, 0xA8, 0x71, 0x62, 0xCA, 
   0x5F, 0x5B, 0x9F, 0x46, 0x6A, 0x5E, 0x27, 0x4D, 0x68, 0x53, 0x63, 0x79, 0x1B, 0x63, 0x91, 0x2F, 
   0x58, 0x87, 0x82, 0x69, 0x8E, 0x79, 0x64, 0x8F, 0x41, 0x48, 0xA6, 0x58, 0x93, 0x8E, 0x95, 0x49, 
   0x79, 0x64, 0x6A, 0x3E, 0x0C, 0x86, 0x6C, 0x2E, 0x3C, 0xCF, 0x53, 0x5A, 0x97, 0x5B, 0x94, 0x69, 
   0x89, 0x72, 0x96, 0x4B, 0x5F, 0xA1, 0x4B, 0x53, 0x7E, 0x7D, 0x5A, 0x77, 0x43, 0x8D, 0x83, 0x53, 
   0x8C, 0xC2, 0x47, 0x30, 0xBA, 0x47, 0x30, 0x25, 0x58, 0x92, 0x43, 0x6A, 0x87, 0xF5, 0x69, 0x68, 
   0xC8, 0x2F, 0x34, 0x39, 0x25, 0x56, 0x66, 0x8D, 0x73, 0xC7, 0xA8, 0x8A, 0xB6, 0x28, 0x40, 0x5F, 
   0x00, 0x45, 0x70, 0x5C, 0x7E, 0x88, 0x81, 0x46, 0x8F, 0x4F, 0x5E, 0x96, 0x82, 0x8C, 0x96, 0x58, 
   0x59, 0x95, 0x07, 0x42, 0x72, 0x2A, 0x75, 0x7D, 0x71, 0x5F, 0x7E, 0x79, 0x5A, 0x8B, 0x57, 0x5B, 
   0x87, 0x45, 0x6D, 0x9F, 0x72, 0x95, 0xC6, 0x6C, 0x7C, 0x84, 0x27, 0x24, 0x32, 0x28, 0x41, 0x6B, 
   0x63, 0x7C, 0xA1, 0x92, 0x99, 0xB9, 0x7A, 0x65, 0x90, 0x1D, 0x3B, 0x89, 0x43, 0x51, 0x66, 0x4F, 
   0x52, 0x61, 0x67, 0x7C, 0xB8, 0x6E, 0x88, 0xB8, 0x46, 0x5F, 0x72, 0x6E, 0x59, 0x5A, 0x62, 0x4E, 
   0x72, 0x1E, 0x71, 0xC8, 0x63, 0x6C, 0x95, 0x7B, 0x67, 0x55, 0x7F, 0x88, 0x8E, 0x76, 0x7A, 0xAB, 
   0x0C, 0x3E, 0x82, 0x16, 0x2B, 0x70, 0x56, 0x4F, 0x70, 0x4E, 0x86, 0x82, 0x84, 0x8D, 0xB7, 0x73, 
   0x65, 0xA5, 0x44, 0x63, 0x70, 0x53, 0x66, 0x7E, 0x46, 0x54, 0x78, 0x2A, 0x43, 0x72, 0x5A, 0x50, 
   0x84, 0x73, 0x85, 0x90, 0x79, 0x7F, 0x6F, 0x60, 0x40, 0x97, 0x1F, 0x6D, 0xA3, 0x20, 0x5C, 0x71, 
   0x68, 0x5D, 0x67, 0x9E, 0x8B, 0xCE, 0x25, 0x0F, 0x67, 0x09, 0x00, 0x51, 0x5B, 0xB5, 0x8C, 0xA1, 
   0xF5, 0xC0, 0x40, 0x3C, 0x86, 0x1C, 0x00, 0x83, 0x32, 0x4B, 0x59, 0x55, 0x76, 0x2C, 0x40, 0x57, 
   0x6E, 0x5D, 0x85, 0xEE, 0x7F, 0x8F, 0xCB, 0x5B, 0x37, 0x4A, 0x36, 0x29, 0x68, 0x1E, 0x40, 0x40, 
   0x0F, 0x64, 0x48, 0x83, 0x81, 0xC4, 0x5D, 0x65, 0xD1, 0x58, 0x4D, 0x7F, 0x6D, 0x46, 0x43, 0x32, 
   0x57, 0x64, 0x14, 0x57, 0x97, 0x4E, 0x4C, 0x87, 0x6D, 0x68, 0x6A, 0x78, 0x63, 0x9D, 0x3D, 0x5C, 
   0x96, 0x1E, 0x4A, 0x93, 0x34, 0x43, 0x57, 0x40, 0x3E, 0x00, 0x2B, 0x2E, 0x61, 0x5A, 0x5E, 0xED, 
   0x77, 0xAF, 0x77, 0x3D, 0x54, 0x5B, 0x2A, 0x4D, 0xD0, 0x46, 0x46, 0x58, 0x3B, 0x41, 0x19, 0x62, 
   0x90, 0xF7, 0x19, 0x45, 0x64, 0x20, 0x12, 0x0F, 0x83, 0x84, 0xC7, 0x84, 0x31, 0xAE, 0x2E, 0x40, 
   0x5F, 0x3F, 0xC5, 0x97, 0x66, 0xA1, 0x85, 0x49, 0x0E, 0x79, 0x30, 0x28, 0x8A, 0x2F, 0x6D, 0x78, 
   0x1F, 0x58, 0x7E, 0x60, 0x52, 0x89, 0x78, 0x4C, 0x7D, 0x34, 0x41, 0x45, 0x60, 0x75, 0x80, 0x6E, 
   0x97, 0xE1, 0x17, 0x62, 0x6E, 0x00, 0x00, 0x0D, 0x1B, 0x00, 0x76, 0x9D, 0x88, 0xCA, 0xAF, 0xFF, 
   0xAF, 0x41, 0x74, 0x70, 0x00, 0x00, 0x5E, 0x44, 0x55, 0xA8, 0x73, 0x8A, 0x9C, 0x5D, 0x69, 0x46, 
   0x09, 0x85, 0x75, 0x65, 0x3B, 0xB6, 0x7D, 0x59, 0x95, 0x39, 0x77, 0x78, 0x54, 0xA0, 0xBB, 0x8B, 
   0x76, 0x49, 0x29, 0x57, 0x82, 0x00, 0x11, 0xDC, 0x47, 0x2A, 0x74, 0x9F, 0xD2, 0x40, 0x87, 0xFF, 
   0xC2, 0x1D, 0x54, 0xD2, 0x1A, 0x00, 0x57, 0x36, 0x12, 0x23, 0x4E, 0x86, 0x90, 0x6B, 0x8C, 0xE6, 
   0x2C, 0x20, 0x35, 0x38, 0x10, 0x1A, 0x62, 0xAD, 0xE3, 0x79, 0xAE, 0xDF, 0x34, 0x2F, 0x1C, 0x33, 
   0x53, 0x6A, 0x76, 0x6E, 0xE0, 0x26, 0x13, 0x5C, 0x0A, 0x31, 0x1C, 0x78, 0x95, 0x69, 0x6E, 0x9A, 
   0xC2, 0x35, 0x26, 0xDA, 0x45, 0x04, 0x78, 0x6D, 0xA0, 0x43, 0x55, 0xC7, 0x98, 0x10, 0x36, 0xB3, 
   0x3E, 0x06, 0x36, 0x6D, 0x3A, 0x6B, 0x5C, 0x81, 0xC1, 0x35, 0x6C, 0x8F, 0x4C, 0x34, 0x45, 0x68, 
   0x8A, 0x9B, 0x57, 0x8E, 0xC2, 0x2E, 0x47, 0x71, 0x50, 0x1E, 0x37, 0x4B, 0x41, 0x87, 0x45, 0x65, 
   0x94, 0x36, 0x50, 0x5D, 0x6A, 0x62, 0xA9, 0x7C, 0x9B, 0xC0, 0x4D, 0x4B, 0x53, 0x39, 0x39, 0x7B, 
   0x3E, 0x6B, 0xA9, 0x38, 0x60, 0x81, 0x66, 0x61, 0x87, 0x56, 0x5D, 0x9D, 0x2E, 0x5D, 0x6F, 0x5C, 
   0x7E, 0x47, 0x51, 0x3E, 0x94, 0x35, 0x39, 0xBE, 0x57, 0x62, 0x81, 0x51, 0x75, 0x86, 0x3A, 0x80, 
   0x9C, 0x40, 0x40, 0x74, 0x4C, 0x3B, 0x7F, 0x63, 0x80, 0xB1, 0x5C, 0x80, 0x7D, 0x4A, 0x61, 0x6A, 
   0x27, 0x48, 0x80, 0x43, 0x42, 0x75, 0x61, 0x43, 0x8D, 0x4B, 0x61, 0x8F, 0x40, 0x79, 0x85, 0x72, 
   0x68, 0xCF, 0x38, 0x4A, 0x99, 0x58, 0x5B, 0x63, 0x34, 0x81, 0x7C, 0x00, 0x15, 0x43, 0x34, 0x11, 
   0x24, 0xC5, 0xC5, 0xFF, 0x8B, 0xB4, 0xFD, 0x00, 0x07, 0x00, 0x0E, 0x1C, 0x29, 0x59, 0x89, 0xAE, 
   0x6C, 0x78, 0xA5, 0x55, 0x44, 0x83, 0x32, 0x48, 0x7C, 0x42, 0x53, 0x81, 0x59, 0x70, 0x6F, 0x49, 
   0x4E, 0x64, 0x3E, 0x31, 0x82, 0x4A, 0x49, 0x79, 0x3A, 0x5E, 0x76, 0x59, 0x6D, 0xC3, 0x8C, 0xBD, 
   0xC3, 0x57, 0x8C, 0x92, 0x26, 0x00, 0x6B, 0x08, 0x00, 0x25, 0x37, 0x67, 0x60, 0x8F, 0x92, 0xD5, 
   0x51, 0x77, 0xAE, 0x45, 0x5F, 0x74, 0x50, 0x42, 0x46, 0x23, 0x4F, 0x86, 0x47, 0x95, 0xAA, 0x72, 
   0x85, 0x99, 0x78, 0x35, 0x88, 0x33, 0x24, 0x60, 0x3D, 0x81, 0x89, 0x59, 0xD0, 0xE3, 0x63, 0x5A, 
   0x74, 0x00, 0x00, 0x00, 0x10, 0x39, 0x83, 0xBA, 0xCD, 0xFA, 0x94, 0x9C, 0xB3, 0x3E, 0x56, 0x9B, 
   0x32, 0x54, 0x88, 0x9D, 0x6A, 0x8D, 0x8E, 0x74, 0x80, 0x00, 0x2F, 0x4C, 0x00, 0x41, 0x76, 0x98, 
   0x87, 0xBC, 0xFF, 0x8D, 0xB6, 0x44, 0x69, 0x82, 0x00, 0x50, 0x6F, 0x36, 0x00, 0x75, 0x73, 0x94, 
   0x82, 0xC4, 0xCF, 0xF9, 0x83, 0x61, 0x91, 0x00, 0x25, 0x24, 0x14, 0x30, 0x96, 0xB0, 0x81, 0xD0, 
   0x6D, 0x88, 0x80, 0x17, 0x38, 0x6D, 0x5C, 0x5A, 0x83, 0x85, 0x93, 0x83, 0x8E, 0x70, 0xC1, 0x19, 
   0x3B, 0x8B, 0x06, 0x4C, 0x29, 0x52, 0x64, 0x52, 0x8D, 0x7C, 0xBC, 0x81, 0x9D, 0xBE, 0x29, 0x2F, 
   0x7F, 0x0D, 0x4B, 0x72, 0x7B, 0x68, 0x7D, 0x78, 0x7B, 0x94, 0x82, 0x7B, 0x94, 0x61, 0x7E, 0x9E, 
   0x03, 0x49, 0x6F, 0x00, 0x05, 0x4D, 0x85, 0x79, 0x93, 0x9F, 0xAE, 0xAC, 0x50, 0x43, 0x85, 0x44, 
   0x43, 0x8C, 0x7C, 0x98, 0xAE, 0x54, 0x6B, 0x80, 0x1B, 0x5A, 0x8A, 0x60, 0x5A, 0x73, 0x7D, 0x82, 
   0x74, 0x3F, 0x6C, 0x98, 0x3F, 0x60, 0xB0, 0x6D, 0x81, 0xC5, 0x57, 0x37, 0x5C, 0x5D, 0x4E, 0x39, 
   0x74, 0x98, 0xB1, 0x63, 0x7C, 0xCF, 0x5C, 0x52, 0x7E, 0x5B, 0x57, 0x49, 0x33, 0x3B, 0x72, 0x4F, 
   0x75, 0xCE, 0x6D, 0x93, 0x8F, 0x46, 0x5A, 0x56, 0x52, 0x38, 0x84, 0x8B, 0x77, 0xB8, 0x57, 0x99, 
   0xA5, 0x1D, 0x3D, 0x44, 0x3A, 0x48, 0x72, 0x96, 0x71, 0xC8, 0x6E, 0x8D, 0xA6, 0x43, 0x6F, 0x6B, 
   0x40, 0x44, 0x70, 0x29, 0x38, 0x71, 0x63, 0x62, 0xA5, 0x6F, 0x91, 0xC7, 0x48, 0x7A, 0x87, 0x42, 
   0x35, 0x3B, 0x3E, 0x41, 0x5E, 0x78, 0xA2, 0xCC, 0x93, 0x8A, 0xE7, 0x2B, 0x3E, 0x50, 0x09, 0x1B, 
   0x1C, 0x61, 0x4B, 0x74, 0x8A, 0x97, 0xE4, 0x6D, 0x8B, 0xB6, 0x3D, 0x2E, 0x4D, 0x0F, 0x2D, 0x3B, 
   0x3F, 0x67, 0x8D, 0xC3, 0x85, 0xCE, 0x3E, 0x2F, 0x6F, 0x33, 0x09, 0x64, 0x50, 0xB5, 0xA3, 0x79, 
   0x98, 0x97, 0x5B, 0x18, 0x83, 0x2C, 0x16, 0x6A, 0x10, 0x40, 0x1B, 0x4B, 0x71, 0x63, 0x86, 0x79, 
   0xFF, 0x6F, 0x5E, 0xCC, 0x3F, 0x8A, 0x3F, 0x36, 0x65, 0x68, 0x1E, 0x13, 0x51, 0x25, 0x40, 0x48, 
   0x55, 0x69, 0x8B, 0x63, 0x5A, 0xF9, 0x7A, 0x7C, 0xB3, 0x56, 0x47, 0x43, 0x20, 0x46, 0x40, 0x31, 
   0x63, 0x79, 0x49, 0x5D, 0x7B, 0x61, 0x68, 0x88, 0x56, 0x24, 0x72, 0x34, 0x58, 0x93, 0x82, 0x9C, 
   0xBD, 0x52, 0x6C, 0x41, 0x00, 0x00, 0x01, 0x25, 0x05, 0x5F, 0xA5, 0xAE, 0xDB, 0x62, 0xB1, 0x99, 
   0x33, 0x50, 0x5A, 0x5E, 0x58, 0x91, 0x34, 0x2E, 0x52, 0x00, 0x35, 0x70, 0x69, 0x91, 0xDB, 0x8C, 
   0x7A, 0x58, 0x1F, 0x1E, 0x3A, 0x1F, 0x4B, 0x8B, 0x6A, 0x5D, 0x8E, 0x54, 0x64, 0xA1, 0x21, 0x43, 
   0x8A, 0x4A, 0x50, 0x2A, 0x6D, 0x8A, 0x9E, 0x72, 0x83, 0xFF, 0x49, 0x53, 0x63, 0x26, 0x2F, 0x17, 
   0x48, 0x5C, 0xC1, 0x6A, 0x6D, 0xA4, 0x26, 0x28, 0x20, 0x10, 0x29, 0x37, 0x8E, 0x70, 0xA2, 0x98, 
   0xB4, 0xFF, 0x17, 0x4F, 0x95, 0x00, 0x00, 0x00, 0x2B, 0x00, 0x31, 0xCB, 0xFF, 0xFF, 0xB6, 0xF0, 
   0xFF, 0x1F, 0x2B, 0x6A, 0x14, 0x3C, 0x00, 0x1E, 0x1E, 0x5F, 0x00, 0x16, 0xBD, 0x71, 0xAE, 0x81, 
   0xC4, 0xA5, 0x7E, 0x52, 0x55, 0x96, 0x17, 0x32, 0xB2, 0x65, 0x9E, 0x95, 0x8A, 0x7B, 0x5B, 0x15, 
   0x4B, 0x9D, 0x00, 0x4E, 0x7E, 0x5B, 0x37, 0x39, 0x92, 0x66, 0xB1, 0x54, 0x63, 0xA6, 0x48, 0x91, 
   0x40, 0x90, 0x9F, 0xA5, 0x2D, 0x46, 0xBA, 0x0A, 0x00, 0x30, 0x60, 0x75, 0x73, 0x77, 0x80, 0x85, 
   0x59, 0x3B, 0xAE, 0x04, 0x30, 0x96, 0x43, 0x4A, 0x1E, 0x6D, 0x97, 0x65, 0x57, 0xA2, 0xE0, 0x61, 
   0x23, 0xAD, 0x21, 0x48, 0x83, 0x43, 0x7F, 0x84, 0x77, 0x3A, 0x54, 0x22, 0x02, 0x39, 0x40, 0x6B, 
   0x8C, 0x85, 0xC2, 0xC8, 0x57, 0x3E, 0x90, 0x33, 0x10, 0x78, 0x27, 0x88, 0x87, 0x60, 0xA9, 0x86, 
   0x4A, 0x18, 0x7A, 0x2E, 0x00, 0x3E, 0x57, 0x71, 0x74, 0x6E, 0xCF, 0xFF, 0x40, 0x73, 0xBE, 0x29, 
   0x00, 0x00, 0x5C, 0x59, 0x5E, 0x57, 0x87, 0xC6, 0x4B, 0x48, 0x8E, 0x34, 0x4E, 0x39, 0x24, 0x3E, 
   0x7B, 0x6A, 0x57, 0xD3, 0x7C, 0xB9, 0xC3, 0x4D, 0x62, 0x76, 0x39, 0x16, 0x57, 0x32, 0x3C, 0x5C, 
   0x27, 0x5F, 0x86, 0x5B, 0x50, 0xAF, 0x6E, 0x62, 0xAF, 0x57, 0x90, 0x6F, 0x2E, 0x56, 0x51, 0x4B, 
   0x44, 0x7A, 0x57, 0x33, 0x9F, 0x57, 0x6E, 0x7A, 0x35, 0x86, 0xA9, 0x51, 0x5E, 0xB4, 0x57, 0x40, 
   0x7A, 0x45, 0x51, 0x79, 0x40, 0x4C, 0x7A, 0x4C, 0x54, 0xAF, 0x6E, 0xA9, 0xE0, 0x4B, 0x74, 0x76, 
   0x2D, 0x26, 0x14, 0x33, 0x19, 0x87, 0x5B, 0x59, 0xD3, 0x72, 0x77, 0x9A, 0x39, 0x57, 0x44, 0x0C, 
   0x64, 0x73, 0x84, 0x8D, 0xD5, 0x83, 0x8B, 0xEA, 0x14, 0x38, 0x46, 0x19, 0x14, 0x2C, 0x4D, 0x48, 
   0x8E, 0x5B, 0x84, 0xA7, 0x72, 0x8B, 0xB7, 0x4E, 0x56, 0x7B, 0x09, 0x39, 0x40, 0x54, 0x5B, 0x6E, 
   0x7C, 0x6C, 0x99, 0x33, 0x4A, 0x95, 0x2D, 0x5C, 0x8A, 0x5B, 0x73, 0x8F, 0x6C, 0x6C, 0x8D, 0x3D, 
   0x69, 0x69, 0x0F, 0x13, 0x3C, 0x33, 0x10, 0x5C, 0x69, 0x99, 0xC8, 0x8D, 0xD5, 0xFE, 0x65, 0x6D, 
   0xA5, 0x40, 0x30, 0x3A, 0x21, 0x2E, 0x44, 0x37, 0x56, 0x95, 0x4E, 0x63, 0xB3, 0x55, 0x86, 0x90, 
   0x55, 0x7A, 0x6C, 0x28, 0x08, 0x34, 0x4C, 0x49, 0x87, 0x5F, 0xA7, 0xE5, 0x4A, 0x7B, 0xA6, 0x82, 
   0x5D, 0x54, 0x47, 0x61, 0x85, 0x18, 0x21, 0x79, 0x1A, 0x3A, 0x37, 0x95, 0xAF, 0xAC, 0xAD, 0x9F, 
   0xE7, 0x33, 0x64, 0x85, 0x00, 0x13, 0x46, 0x56, 0x52, 0x90, 0x9C, 0xA4, 0xD0, 0x3D, 0x72, 0x54, 
   0x59, 0x49, 0x77, 0x86, 0x65, 0xD3, 0x46, 0x53, 0x89, 0x00, 0x5E, 0x78, 0x4B, 0x53, 0x9A, 0x98, 
   0x71, 0x9A, 0x5A, 0x9E, 0x9E, 0x63, 0x68, 0x8C, 0x2E, 0x17, 0x57, 0x01, 0x4C, 0x63, 0x54, 0x7D, 
   0xCC, 0x86, 0x85, 0xCE, 0x7C, 0x85, 0x9F, 0x5D, 0x6C, 0x58, 0x5A, 0x64, 0x62, 0x26, 0x36, 0xAD, 
   0x49, 0x65, 0xA7, 0x6D, 0x7D, 0x74, 0x73, 0x77, 0x84, 0x67, 0x70, 0xB0, 0x60, 0x46, 0x8B, 0x41, 
   0x4C, 0x44, 0x3B, 0x69, 0x23, 0x4C, 0x92, 0xC6, 0x80, 0x69, 0xDA, 0x4C, 0x24, 0x5D, 0x19, 0x6E, 
   0x6D, 0x53, 0x6F, 0xC3, 0x7C, 0x5E, 0xA0, 0x6B, 0x75, 0x4F, 0x36, 0x6F, 0x7C, 0x4B, 0x6D, 0xA3, 
   0x72, 0x3E, 0x7B, 0x27, 0x43, 0x74, 0x23, 0x6D, 0x64, 0x75, 0x69, 0x82, 0x56, 0x5A, 0x90, 0x68, 
   0x82, 0x9E, 0x7F, 0x5B, 0x9A, 0x6D, 0x66, 0xBB, 0x3D, 0x6B, 0x7A, 0x1A, 0x5A, 0x78, 0x59, 0x5A, 
   0x7E, 0x7C, 0x87, 0x7F, 0x3F, 0x37, 0x97, 0x2F, 0x38, 0x87, 0x7B, 0xAB, 0xC6, 0x92, 0x94, 0xA7, 
   0x51, 0x37, 0x50, 0x21, 0x57, 0x76, 0x38, 0x57, 0x88, 0x89, 0x4D, 0x7E, 0x67, 0x8C, 0xB1, 0x3F, 
   0x6A, 0x9A, 0x34, 0x53, 0x50, 0x63, 0x43, 0x6D, 0x6F, 0x72, 0xAE, 0x52, 0x8A, 0xD0, 0x46, 0x7E, 
   0x78, 0x79, 0x5F, 0x4F, 0x67, 0x5E, 0x7D, 0x3F, 0x64, 0xAC, 0x55, 0x69, 0xBC, 0x4F, 0x52, 0x54, 
   0x4F, 0x52, 0x54, 0x7C, 0x6F, 0xAB, 0x5F, 0x85, 0xBC, 0x4B, 0x56, 0x98, 0x2E, 0x2D, 0x4C, 0x24, 
   0x50, 0x51, 0x6B, 0x6F, 0xAE, 0x84, 0x81, 0x9F, 0x57, 0x86, 0x98, 0x61, 0x67, 0x7F, 0x49, 0x2D, 
   0x4C, 0x3E, 0x4B, 0x81, 0x5B, 0x86, 0xDE, 0x62, 0x97, 0x99, 0x67, 0x5D, 0x4E, 0x61, 0x4B, 0x75, 
   0x43, 0x61, 0x9E, 0x3D, 0x61, 0x88, 0x64, 0xA9, 0xA7, 0x7A, 0xF1, 0xC8, 0x3F, 0x00, 0x6A, 0x10, 
   0x00, 0x66, 0x4E, 0x89, 0x64, 0x61, 0x8B, 0x27, 0x40, 0x37, 0x86, 0x41, 0x38, 0xEA, 0x74, 0x8E, 
   0xCC, 0x67, 0x83, 0x51, 0x26, 0x2E, 0x58, 0x19, 0x66, 0x2F, 0x36, 0x7C, 0x5A, 0x4F, 0x3C, 0xBE, 
   0x79, 0x47, 0xD1, 0x4C, 0x5E, 0x6E, 0x5B, 0x6A, 0x54, 0x4D, 0x64, 0x7A, 0x03, 0x58, 0x7E, 0x37, 
   0x58, 0x57, 0x83, 0x58, 0x64, 0x56, 0x52, 0x8E, 0x2D, 0x6F, 0xCE, 0x65, 0x52, 0x8C, 0x49, 0x5C, 
   0x43, 0x3D, 0x61, 0x4C, 0x3D, 0x28, 0x49, 0x3E, 0x4C, 0xA7, 0x56, 0x6B, 0xA9, 0x7D, 0x8E, 0x5A, 
   0x54, 0x65, 0xB3, 0x25, 0x2F, 0x57, 0x3B, 0x29, 0x24, 0x57, 0x79, 0xDB, 0x47, 0x6E, 0x97, 0x26, 
   0x24, 0x2A, 0x7B, 0x7A, 0x73, 0x80, 0x6F, 0xB3, 0x00, 0x47, 0x5E, 0x0D, 0x6F, 0x70, 0x81, 0x68, 
   0x72, 0x55, 0x08, 0x85, 0x2D, 0x38, 0xA9, 0x5B, 0xC3, 0x99, 0x45, 0x8A, 0x91, 0x6D, 0x31, 0x8E, 
   0x6B, 0x4B, 0x3D, 0x08, 0x4A, 0x8C, 0x30, 0x3F, 0x7C, 0x75, 0x57, 0x49, 0x42, 0x8A, 0xAF, 0x36, 
   0x45, 0x5B, 0x3C, 0x07, 0x67, 0x4D, 0x53, 0xA7, 0x5F, 0x96, 0x56, 0x1C, 0x66, 0x92, 0x40, 0x5D, 
   0xCD, 0xAC, 0xA7, 0xAE, 0x4F, 0x6C, 0x65, 0x00, 0x04, 0x0E, 0x05, 0x49, 0x4A, 0x66, 0x69, 0xD8, 
   0xB4, 0x6D, 0xD0, 0x70, 0xBE, 0x75, 0x3A, 0x83, 0x84, 0x63, 0x3B, 0x95, 0x37, 0x43, 0x94, 0x00, 
   0x48, 0xB3, 0x3D, 0x37, 0x65, 0x89, 0x82, 0x41, 0x63, 0x8D, 0x70, 0x2A, 0x2A, 0xAB, 0x51, 0x0E, 
   0xB1, 0x36, 0x71, 0x28, 0x74, 0xC9, 0x88, 0x73, 0xA9, 0xFF, 0x38, 0x0B, 0x25, 0x26, 0x08, 0x24, 
   0x42, 0x85, 0xE6, 0x64, 0x69, 0xB8, 0x20, 0x31, 0x01, 0x21, 0x39, 0x31, 0x9A, 0x8B, 0xF1, 0x4B, 
   0x9C, 0xE7, 0x22, 0x56, 0x5C, 0x61, 0x59, 0x6A, 0x5B, 0x62, 0x8A, 0x2D, 0x17, 0x77, 0x39, 0x30, 
   0x3E, 0x62, 0x83, 0x47, 0x78, 0xB1, 0xD3, 0x16, 0x43, 0xD9, 0x3E, 0x00, 0x55, 0x5B, 0x70, 0x42, 
   0x4B, 0x9F, 0x77, 0x45, 0x44, 0xB2, 0x40, 0x32, 0x7B, 0x62, 0x77, 0xAE, 0x4B, 0x9F, 0xC9, 0x39, 
   0x59, 0x64, 0x40, 0x00, 0x0D, 0x73, 0x5F, 0x7A, 0x3A, 0xA5, 0xC2, 0x24, 0x40, 0x6A, 0x70, 0x52, 
   0x7E, 0x7C, 0x8B, 0xC9, 0x4D, 0x5D, 0x9B, 0x34, 0x4A, 0x6B, 0x49, 0x6B, 0x7F, 0x2C, 0x3D, 0x73, 
   0x55, 0x38, 0x58, 0x4B, 0x72, 0x9D, 0x51, 0x6D, 0xB4, 0x51, 0x73, 0x64, 0x62, 0x60, 0x91, 0x29, 
   0x17, 0x7B, 0x45, 0x5D, 0x60, 0x57, 0x92, 0x96, 0x4C, 0x70, 0xBF, 0x4C, 0x47, 0x81, 0x57, 0x40, 
   0x80, 0x45, 0x47, 0x75, 0x4B, 0x7B, 0x98, 0x4B, 0x70, 0xA9, 0x40, 0x5F, 0x97, 0x51, 0x6E, 0x78, 
   0x73, 0x61, 0x7D, 0x4B, 0x4F, 0x72, 0x2D, 0x4E, 0xA5, 0x38, 0x3D, 0xA4, 0x56, 0x51, 0x65, 0x57, 
   0x6B, 0x55, 0x57, 0xAA, 0xA2, 0x40, 0x6A, 0xD0, 0x50, 0x18, 0x7E, 0x70, 0x6B, 0x74, 0x29, 0x75, 
   0xAF, 0x0C, 0x25, 0x30, 0x2A, 0x21, 0x31, 0x77, 0xA0, 0xE2, 0x83, 0x95, 0xAF, 0x2C, 0x1C, 0x1F, 
   0x04, 0x44, 0x5F, 0x55, 0x6D, 0xB7, 0x73, 0x75, 0xB4, 0x6E, 0x75, 0x8B, 0x39, 0x7E, 0x83, 0x32, 
   0x1A, 0x64, 0x32, 0x20, 0x49, 0x34, 0x56, 0x7F, 0x7A, 0x8D, 0xDD, 0x64, 0x99, 0xB0, 0x46, 0x48, 
   0x64, 0x2A, 0x0F, 0x46, 0x5D, 0x82, 0x7C, 0x79, 0xA5, 0xDE, 0x43, 0x64, 0xC0, 0x1A, 0x2F, 0x4A, 
   0x36, 0x34, 0x1B, 0x38, 0x5E, 0x7E, 0x3C, 0x7D, 0xD2, 0x8F, 0x7A, 0xA7, 0xA6, 0x6F, 0xA1, 0x31, 
   0x63, 0xA3, 0x06, 0x67, 0x3A, 0x22, 0x5A, 0x56, 0x64, 0x38, 0x96, 0x4B, 0x2B, 0x35, 0x65, 0x90, 
   0xBD, 0xA4, 0xFE, 0xFF, 0x68, 0x7D, 0x92, 0x00, 0x00, 0x0A, 0x00, 0x3F, 0x37, 0xA5, 0x9D, 0xB1, 
   0x8B, 0x99, 0xA4, 0x08, 0x50, 0x6E, 0x0A, 0x4A, 0xA3, 0xBD, 0x83, 0xCC, 0xB1, 0x77, 0x96, 0x08, 
   0x65, 0x7C, 0x00, 0x41, 0x53, 0x50, 0x3A, 0x97, 0x73, 0x58, 0x8C, 0x51, 0x97, 0x7A, 0x13, 0x3D, 
   0x8C, 0x2E, 0x45, 0x6C, 0x83, 0xA2, 0xB2, 0xD3, 0xAD, 0xEF, 0x63, 0x4F, 0x58, 0x00, 0x19, 0x3F, 
   0x36, 0x53, 0x8A, 0xB0, 0x9F, 0xB3, 0x61, 0xAA, 0xAD, 0x32, 0x2B, 0x9E, 0x20, 0x35, 0x40, 0x65, 
   0x7A, 0x35, 0x8D, 0x80, 0xC5, 0x57, 0x6F, 0xBC, 0x0C, 0x4C, 0x61, 0x2F, 0x4C, 0x89, 0x7B, 0x5E, 
   0x8F, 0x8E, 0x81, 0x9B, 0x54, 0x5F, 0x95, 0x30, 0x69, 0x82, 0x4B, 0x62, 0x81, 0x35, 0x2E, 0x6A, 
   0x7A, 0x67, 0xA3, 0x9B, 0x8F, 0xA9, 0x11, 0x2E, 0x5E, 0x00, 0x24, 0x5F, 0x8D, 0x98, 0x7F, 0x85, 
   0x7E, 0xB5, 0x52, 0x50, 0xAB, 0x68, 0x60, 0x9A, 0x66, 0x7D, 0x98, 0x31, 0x71, 0x74, 0x2A, 0x5E, 
   0x89, 0x42, 0x4D, 0x7D, 0x67, 0x59, 0x5C, 0x64, 0x60, 0x81, 0x75, 0x8F, 0xD8, 0x74, 0x94, 0xCB, 
   0x56, 0x4D, 0x72, 0x1B, 0x0C, 0x1A, 0x3D, 0x57, 0x71, 0x61, 0x8C, 0xF0, 0x7E, 0x93, 0x8F, 0x51, 
   0x4E, 0x4A, 0x2F, 0x31, 0x78, 0x85, 0x66, 0xBE, 0x5D, 0x95, 0xB9, 0x41, 0x73, 0x74, 0x68, 0x5B, 
   0x73, 0x6E, 0x65, 0xB7, 0x66, 0x69, 0x89, 0x20, 0x51, 0x6B, 0x15, 0x2F, 0x71, 0x72, 0x53, 0x89, 
   0x7A, 0x94, 0xA6, 0x79, 0xA4, 0xA0, 0x6A, 0x68, 0x8C, 0x0C, 0x27, 0x5D, 0x27, 0x43, 0x63, 0x51, 
   0x7E, 0x9D, 0x64, 0x86, 0xA9, 0x4A, 0x69, 0x7B, 0x57, 0x3B, 0x59, 0x7F, 0x6F, 0x88, 0x67, 0x86, 
   0xC7, 0x43, 0x68, 0xA4, 0x2C, 0x40, 0x4E, 0x56, 0x41, 0x5A, 0x6F, 0x97, 0xC2, 0x9C, 0x8B, 0xBC, 
   0x7B, 0x3F, 0x6A, 0x00, 0x3D, 0x63, 0x6A, 0x98, 0xAC, 0x86, 0xD4, 0xCD, 0x39, 0x1F, 0x8B, 0x0F, 
   0x00, 0x37, 0x00, 0x50, 0x0F, 0x5C, 0x98, 0x8C, 0x92, 0x89, 0xFF, 0x64, 0x5F, 0xC7, 0x34, 0x30, 
   0x28, 0x3D, 0x47, 0x58, 0x3C, 0x5F, 0x6F, 0x20, 0x45, 0x60, 0x5B, 0x8F, 0x9C, 0x6E, 0x6C, 0xCB, 
   0x4C, 0x48, 0xA7, 0x6C, 0x3B, 0x43, 0x36, 0x5D, 0x4C, 0x00, 0x52, 0x90, 0x6A, 0x58, 0x7A, 0x6C, 
   0x58, 0x69, 0x3F, 0x5D, 0x70, 0x4F, 0x4D, 0x88, 0x4E, 0x7B, 0xC6, 0x2B, 0x8A, 0x85, 0x20, 0x00, 
   0x00, 0x39, 0x13, 0x34, 0xA1, 0x9E, 0xF8, 0x6E, 0x99, 0x93, 0x1C, 0x43, 0x25, 0x36, 0x30, 0xBD, 
   0x4C, 0x63, 0x57, 0x36, 0x4D, 0x46, 0x48, 0x7F, 0xC3, 0x6F, 0x67, 0x5D, 0x14, 0x12, 0x41, 0x36, 
   0x5C, 0xC3, 0x75, 0x80, 0x9C, 0x52, 0x53, 0x51, 0x23, 0x6F, 0x78, 0x18, 0x4C, 0x35, 0x58, 0x45, 
   0x71, 0x5F, 0x4B, 0xDF, 0x37, 0x3B, 0x6E, 0x22, 0x3E, 0x30, 0x6E, 0xA6, 0xAD, 0x90, 0x8E, 0xB1, 
   0x33, 0x19, 0x43, 0x1F, 0x17, 0x21, 0x52, 0x7E, 0xD9, 0x57, 0x9B, 0xFF, 0x29, 0x33, 0x14, 0x00, 
   0x00, 0x00, 0x6D, 0x44, 0x4A, 0xC9, 0xED, 0xFF, 0x43, 0xBF, 0xFF, 0x00, 0x00, 0x11, 0x18, 0x34, 
   0x27, 0x77, 0x9E, 0xCE, 0x7A, 0x6F, 0xCA, 0x2B, 0x91, 0x4B, 0x4D, 0x4C, 0x2E, 0x48, 0x19, 0x98, 
   0x2F, 0x66, 0xC9, 0xAE, 0xB8, 0xC4, 0xB7, 0xB0, 0x46, 0x0C, 0x40, 0x83, 0x00, 0x0F, 0xE2, 0x70, 
   0x53, 0x5C, 0x9A, 0x87, 0x5F, 0x28, 0x87, 0x8B, 0x21, 0x6E, 0x53, 0x60, 0x49, 0x82, 0x34, 0x0B, 
   0xB1, 0x41, 0x2B, 0x8F, 0x75, 0xE0, 0x61, 0x96, 0xC9, 0x94, 0x33, 0x47, 0xB0, 0x0F, 0x15, 0x8B, 
   0x4D, 0x3B, 0x33, 0x6B, 0x6F, 0x51, 0x4E, 0x64, 0xC5, 0x31, 0x20, 0x87, 0x1B, 0x33, 0x5A, 0x5B, 
   0xA7, 0x94, 0x7E, 0x9B, 0xBD, 0x40, 0x16, 0x72, 0x2E, 0x41, 0x92, 0x5B, 0x79, 0xA1, 0x66, 0x46, 
   0x44, 0x27, 0x31, 0x49, 0x27, 0x99, 0x90, 0x6C, 0x93, 0x99, 0x50, 0x14, 0x9A, 0x3A, 0x00, 0x62, 
   0x4C, 0x96, 0x74, 0x73, 0xF2, 0xBF, 0x50, 0x39, 0xCE, 0x1D, 0x00, 0x22, 0x5B, 0x35, 0x4F, 0x50, 
   0x8C, 0xE9, 0x4B, 0x71, 0x86, 0x3A, 0x27, 0x00, 0x36, 0x4B, 0x73, 0x6A, 0x9D, 0xFB, 0x7C, 0x92, 
   0xBE, 0x47, 0x5D, 0x57, 0x34, 0x22, 0x78, 0x49, 0x4F, 0xB6, 0x27, 0x83, 0x76, 0x4F, 0x73, 0x8C, 
   0x50, 0x4A, 0xAD, 0x45, 0x55, 0x57, 0x45, 0x71, 0x51, 0x40, 0x3D, 0xA8, 0x57, 0x27, 0x93, 0x5C, 
   0x7F, 0x77, 0x3A, 0x76, 0x83, 0x35, 0x6B, 0x95, 0x68, 0x64, 0x7F, 0x4C, 0x4D, 0x8B, 0x3A, 0x5F, 
   0x81, 0x4B, 0x6B, 0xA4, 0x56, 0x82, 0xA4, 0x3F, 0x64, 0x91, 0x34, 0x35, 0x47, 0x5C, 0x3B, 0x8C, 
   0x5D, 0x85, 0xD6, 0x6E, 0x96, 0x9B, 0x44, 0x39, 0x5F, 0x00, 0x10, 0x5E, 0x56, 0x56, 0x93, 0x90, 
   0x91, 0xA5, 0x0D, 0x54, 0x68, 0x1F, 0x37, 0x4D, 0xAD, 0x9D, 0xFE, 0x78, 0x96, 0xF4, 0x18, 0x31, 
   0x1C, 0x00, 0x23, 0x33, 0x22, 0x35, 0x7E, 0x64, 0x65, 0x7B, 0x9A, 0x89, 0xC7, 0x4A, 0x67, 0x99, 
   0x0A, 0x1D, 0x49, 0x4A, 0x57, 0x5B, 0x73, 0x8C, 0xAD, 0x46, 0x75, 0xB9, 0x45, 0x4B, 0x63, 0x2E, 
   0x1D, 0x4C, 0x57, 0x63, 0xAD, 0x79, 0xB3, 0xBE, 0x34, 0x56, 0x56, 0x38, 0x05, 0x5A, 0x1D, 0x46, 
   0x57, 0x69, 0x9F, 0x99, 0x8D, 0x80, 0xE0, 0x5E, 0x8A, 0xB2, 0x33, 0x64, 0x6A, 0x25, 0x12, 0x4B, 
   0x14, 0x29, 0x62, 0x3F, 0x86, 0xA8, 0x70, 0x83, 0x93, 0x67, 0x45, 0x77, 0x7D, 0x5C, 0x9F, 0x36, 
   0x6E, 0x98, 0x12, 0x6E, 0x86, 0x45, 0x72, 0x4D, 0x69, 0x3F, 0x60, 0x28, 0x1F, 0xB9, 0x59, 0x78, 
   0x7E, 0x9A, 0xA9, 0xCA, 0x92, 0xC4, 0xFF, 0x32, 0x5D, 0x33, 0x00, 0x00, 0x14, 0x3A, 0x3E, 0x93, 
   0x5A, 0x97, 0xA8, 0x20, 0x79, 0x7A, 0x8B, 0x8C, 0xC2, 0xC6, 0x75, 0xE5, 0x74, 0x73, 0x87, 0x2A, 
   0x6A, 0x6C, 0x1B, 0x19, 0x6F, 0x2D, 0x42, 0x70, 0x68, 0xB5, 0xDD, 0x80, 0x6B, 0xA8, 0x14, 0x4E, 
   0x35, 0x17, 0x5A, 0x6F, 0xB5, 0x67, 0xB1, 0x95, 0x7F, 0xC3, 0x4F, 0x68, 0xB5, 0x6D, 0x60, 0x57, 
   0x26, 0x70, 0x46, 0x2A, 0x4D, 0xCF, 0x69, 0x58, 0xC2, 0x48, 0x74, 0x37, 0x43, 0x64, 0x42, 0x83, 
   0x69, 0xC1, 0x7C, 0x68, 0xB7, 0x35, 0x40, 0x77, 0x06, 0x4C, 0x4F, 0x3B, 0x7B, 0x99, 0x8D, 0x71, 
   0xA0, 0x7C, 0x60, 0x78, 0x3C, 0x98, 0x83, 0x2F, 0x58, 0xB0, 0x46, 0x1E, 0x88, 0x69, 0x6E, 0x65, 
   0x53, 0x91, 0x87, 0x53, 0x52, 0x93, 0x63, 0x63, 0x8D, 0x30, 0x74, 0x72, 0x2B, 0x54, 0x7F, 0x71, 
   0x89, 0xA3, 0x5C, 0x7E, 0x9E, 0x68, 0x50, 0x8E, 0x79, 0x66, 0x9E, 0x71, 0x87, 0xAE, 0x2B, 0x4D, 
   0x73, 0x00, 0x2B, 0x5B, 0x7E, 0x76, 0x61, 0xA8, 0x9F, 0xA7, 0x4C, 0x60, 0xA3, 0x1D, 0x3D, 0x91, 
   0x66, 0x92, 0x96, 0x6C, 0x53, 0x7E, 0x49, 0x42, 0x7D, 0x32, 0x86, 0x82, 0x34, 0x4E, 0x72, 0x8B, 
   0x54, 0x8A, 0x86, 0x6C, 0x9C, 0x24, 0x7E, 0xB2, 0x45, 0x6C, 0x61, 0x79, 0x60, 0x6C, 0x57, 0x54, 
   0x8A, 0x5B, 0x70, 0xB8, 0x3E, 0x74, 0xA5, 0x49, 0x4C, 0x5F, 0x4A, 0x47, 0x32, 0x51, 0x7D, 0xC3, 
   0x9C, 0xA0, 0xDB, 0x6D, 0x76, 0x7D, 0x26, 0x3A, 0x2F, 0x40, 0x38, 0x73, 0x40, 0x6C, 0xB4, 0x62, 
   0x62, 0xBA, 0x47, 0x73, 0x64, 0x32, 0x51, 0x5D, 0x6D, 0x41, 0x65, 0x74, 0x5F, 0xA6, 0x68, 0xAF, 
   0xDA, 0x4A, 0x69, 0x8D, 0x21, 0x29, 0x20, 0x39, 0x40, 0x71, 0x8A, 0x80, 0xBD, 0x89, 0x9D, 0xCE, 
   0x41, 0x72, 0x75, 0x0C, 0x10, 0x40, 0x45, 0x35, 0x7F, 0x40, 0x14, 0x7F, 0x67, 0xAE, 0x9A, 0x4B, 
   0x92, 0x34, 0x29, 0x00, 0x48, 0x41, 0x37, 0xF5, 0x80, 0xC6, 0xCC, 0x85, 0x75, 0x56, 0x2C, 0x0C, 
   0x41, 0x08, 0x23, 0x46, 0x3D, 0x70, 0x5B, 0x67, 0x78, 0xBF, 0x69, 0x4C, 0xBB, 0x58, 0x7F, 0x69, 
   0x61, 0x77, 0x4F, 0x31, 0x30, 0x7A, 0x0E, 0x35, 0x79, 0x53, 0x63, 0x4C, 0x5A, 0x58, 0x80, 0x71, 
   0x5D, 0xAF, 0x38, 0x3B, 0x98, 0x43, 0x63, 0x7F, 0x5F, 0x68, 0x4B, 0x1B, 0x35, 0x4C, 0x33, 0x3B, 
   0x9E, 0x73, 0x66, 0xA5, 0x53, 0x8A, 0x78, 0x7F, 0x83, 0xAA, 0x4E, 0x5E, 0x8A, 0x07, 0x29, 0x28, 
   0x07, 0x13, 0x4B, 0x86, 0xB3, 0xD5, 0x65, 0x7A, 0x91, 0x1C, 0x07, 0x35, 0x70, 0x61, 0x8F, 0x7A, 
   0x5C, 0x84, 0x12, 0x58, 0x84, 0x1D, 0x6F, 0x72, 0x79, 0x5D, 0x4B, 0x63, 0x40, 0x79, 0x25, 0x40, 
   0xA2, 0x30, 0x6E, 0x6B, 0x42, 0x63, 0x72, 0x61, 0x2B, 0x9A, 0x72, 0x4F, 0x73, 0x3F, 0xA5, 0x7E, 
   0x4A, 0x77, 0xA0, 0x6B, 0x37, 0x6C, 0x4C, 0x62, 0x77, 0x18, 0x55, 0x93, 0x19, 0x00, 0x53, 0x5A, 
   0x31, 0x43, 0x85, 0xD0, 0x7F, 0x63, 0x9E, 0xD3, 0x60, 0x25, 0xC2, 0x45, 0x70, 0x75, 0x00, 0x0E, 
   0x0D, 0x00, 0x00, 0x54, 0x75, 0xC3, 0xD7, 0xDB, 0xAC, 0xDF, 0x79, 0x5C, 0x7D, 0x0F, 0x5F, 0x3C, 
   0x14, 0x64, 0x75, 0x70, 0x58, 0xA0, 0x80, 0x63, 0xC3, 0x29, 0x7E, 0xA4, 0x22, 0x4A, 0x46, 0x6D, 
   0x49, 0x77, 0x5B, 0x8C, 0x87, 0x37, 0x62, 0x70, 0x3C, 0x2D, 0x91, 0x20, 0x38, 0x4D, 0x3F, 0x6C, 
   0x55, 0x6E, 0x62, 0xEF, 0x51, 0x36, 0x78, 0x2E, 0x60, 0x2E, 0x4A, 0xB5, 0xFA, 0x65, 0x80, 0xC5, 
   0x20, 0x16, 0x00, 0x2C, 0x30, 0x35, 0x82, 0x80, 0xFF, 0x42, 0x53, 0xD7, 0x00, 0x53, 0x19, 0x65, 
   0x44, 0x24, 0x67, 0x7E, 0xB5, 0x4C, 0x89, 0xD4, 0x57, 0x38, 0x7D, 0x56, 0x4D, 0x5F, 0x60, 0x6E, 
   0xAC, 0x26, 0x40, 0x76, 0x20, 0x24, 0x2C, 0x66, 0x65, 0x51, 0x51, 0x89, 0xA6, 0x52, 0x51, 0xC6, 
   0x63, 0x3B, 0xC6, 0x40, 0x8B, 0x68, 0x3F, 0xB6, 0x5A, 0x44, 0x13, 0x81, 0x39, 0x00, 0x49, 0x5B, 
   0x59, 0x94, 0x50, 0xC2, 0xBD, 0x24, 0x4B, 0x57, 0x70, 0x13, 0x4D, 0x7C, 0x91, 0x9F, 0x42, 0x97, 
   0xC3, 0x45, 0x2F, 0x7F, 0x43, 0x54, 0x7E, 0x27, 0x3D, 0x89, 0x4A, 0x45, 0x8E, 0x62, 0x90, 0x9F, 
   0x51, 0x79, 0x9D, 0x57, 0x60, 0x57, 0x40, 0x20, 0x5C, 0x4B, 0x3C, 0x80, 0x45, 0x4A, 0x8E, 0x51, 
   0x8C, 0xB2, 0x63, 0x8D, 0xBD, 0x41, 0x3D, 0x67, 0x4C, 0x2B, 0x55, 0x4C, 0x70, 0x7F, 0x51, 0x83, 
   0xAF, 0x4B, 0x6C, 0xB0, 0x39, 0x59, 0x98, 0x39, 0x63, 0x53, 0x56, 0x57, 0x86, 0x34, 0x52, 0xA5, 
   0x50, 0x63, 0xC1, 0x5C, 0x75, 0xAD, 0x51, 0x58, 0x43, 0x62, 0x69, 0x3C, 0x29, 0x5D, 0x9F, 0x2F, 
   0x46, 0xAC, 0x6F, 0x47, 0x69, 0x75, 0x70, 0x9C, 0x58, 0xA4, 0xC9, 0x4F, 0x69, 0x9F, 0x57, 0x38, 
   0x89, 0x22, 0x5D, 0x5E, 0x32, 0x62, 0x7E, 0x2E, 0x18, 0x46, 0x2B, 0x31, 0x6B, 0x72, 0x8A, 0xCD, 
   0x79, 0x91, 0xA6, 0x2E, 0x53, 0x5B, 0x39, 0x52, 0x6D, 0x57, 0x57, 0x91, 0x4D, 0x2B, 0x7D, 0x53, 
   0x7D, 0xB1, 0x75, 0xC8, 0xD8, 0x57, 0x75, 0x84, 0x37, 0x1A, 0x35, 0x09, 0x00, 0x08, 0x38, 0x3A, 
   0x8A, 0x74, 0xA6, 0xE5, 0x7C, 0xBF, 0xBE, 0x59, 0x57, 0x7E, 0x40, 0x21, 0x4F, 0x28, 0x76, 0x82, 
   0x3F, 0x81, 0xDD, 0x51, 0x42, 0x81, 0x69, 0x49, 0x52, 0x52, 0x6C, 0xA1, 0x19, 0x56, 0x74, 0x52, 
   0x67, 0x6A, 0x80, 0x79, 0xAB, 0x47, 0x41, 0x90, 0x03, 0x64, 0x81, 0x71, 0x8C, 0xA4, 0x79, 0x4F, 
   0xAF, 0x3D, 0x4A, 0x54, 0x76, 0x84, 0x7C, 0x96, 0xB6, 0xF3, 0x58, 0x67, 0x8A, 0x00, 0x00, 0x05, 
   0x00, 0x12, 0x57, 0xC0, 0xC2, 0xD9, 0xC5, 0xA4, 0xBB, 0x31, 0x70, 0xA0, 0x5C, 0x62, 0xAF, 0x65, 
   0x2E, 0x74, 0x35, 0x72, 0x72, 0x2E, 0x94, 0x99, 0x34, 0x5B, 0x87, 0x4E, 0x5A, 0x86, 0x72, 0x65, 
   0x75, 0x8F, 0x7B, 0x91, 0x23, 0x37, 0x7B, 0x2B, 0x3F, 0x8E, 0x9F, 0xAE, 0xAB, 0xAF, 0xA2, 0xA5, 
   0x66, 0x5A, 0x91, 0x00, 0x2E, 0x82, 0x0C, 0x1D, 0x59, 0x7A, 0x7F, 0x66, 0x8E, 0xAE, 0xB8, 0x55, 
   0x64, 0xC4, 0x37, 0x3A, 0x73, 0x3D, 0x40, 0x60, 0x7B, 0x6F, 0xAA, 0x64, 0x71, 0x7D, 0x41, 0x7D, 
   0x77, 0x52, 0x71, 0x94, 0x52, 0x75, 0x7D, 0x52, 0x42, 0x77, 0x47, 0x5E, 0x94, 0x63, 0x7B, 0xAA, 
   0x4C, 0x59, 0x54, 0x26, 0x59, 0x6B, 0x83, 0x75, 0x95, 0xAA, 0x5E, 0xA7, 0x20, 0x59, 0x90, 0x14, 
   0x4F, 0x62, 0x70, 0x83, 0x74, 0x61, 0x83, 0xA8, 0x50, 0x5A, 0x8D, 0x67, 0x42, 0x9D, 0x5C, 0x53, 
   0x75, 0x67, 0x71, 0x80, 0x56, 0x8D, 0xAD, 0x66, 0x48, 0x8F, 0x55, 0x69, 0x55, 0x3E, 0x47, 0x5C, 
   0x3F, 0x49, 0xA3, 0x89, 0xD9, 0xF3, 0x61, 0x7D, 0x8A, 0x1C, 0x09, 0x1B, 0x44, 0x47, 0x7D, 0x7A, 
   0x89, 0xB9, 0x7B, 0xB2, 0xD0, 0x63, 0x73, 0x56, 0x2E, 0x32, 0x4F, 0x61, 0x65, 0x94, 0x6C, 0x87, 
   0xB1, 0x3E, 0x64, 0x7E, 0x38, 0x41, 0x77, 0x67, 0x47, 0x89, 0x85, 0x88, 0x95, 0x5C, 0x94, 0x7F, 
   0x44, 0x5A, 0xB7, 0x4E, 0x4D, 0x93, 0x43, 0x63, 0x4D, 0x6C, 0x6E, 0x74, 0x8D, 0x62, 0x97, 0x25, 
   0x61, 0x92, 0x35, 0x39, 0x69, 0x64, 0x51, 0x65, 0x4A, 0x75, 0xA5, 0x67, 0x93, 0xC8, 0x6E, 0x54, 
   0x67, 0x46, 0x59, 0x44, 0x6E, 0x6F, 0xAB, 0x67, 0x68, 0xAC, 0x60, 0x5C, 0x83, 0x3C, 0x62, 0x76, 
   0x1E, 0x72, 0xAD, 0x84, 0x44, 0x58, 0x37, 0x1A, 0x5C, 0x27, 0x00, 0x46, 0x3A, 0x6A, 0x34, 0x81, 
   0xD4, 0xBD, 0x8D, 0x73, 0xFF, 0x4D, 0x20, 0x93, 0x22, 0x3A, 0x2D, 0x54, 0x67, 0x68, 0x48, 0x57, 
   0x6F, 0x1B, 0x41, 0x5B, 0x3F, 0x31, 0x91, 0x6F, 0x83, 0xC7, 0x75, 0x79, 0xA9, 0x57, 0x57, 0x61, 
   0x37, 0x7E, 0x5E, 0x03, 0x5F, 0x7F, 0x48, 0x36, 0x74, 0x82, 0x63, 0x69, 0x49, 0x5D, 0x70, 0x15, 
   0x4D, 0x9E, 0x5F, 0x7A, 0xB3, 0x59, 0x57, 0x55, 0x0A, 0x29, 0x05, 0x61, 0x14, 0x59, 0x6E, 0x89, 
   0xF2, 0x41, 0xAD, 0xCB, 0x6E, 0x56, 0x46, 0x4B, 0x48, 0x75, 0x49, 0x52, 0x9B, 0x36, 0x3B, 0x1E, 
   0x25, 0x73, 0xA0, 0x4D, 0x40, 0x90, 0x43, 0x3A, 0x41, 0x6C, 0x73, 0xB7, 0x6B, 0x57, 0x83, 0x3B, 
   0x50, 0x37, 0x17, 0x4B, 0x65, 0x2E, 0x62, 0x7E, 0x52, 0x57, 0x96, 0x6F, 0x4C, 0x85, 0x58, 0x63, 
   0x67, 0x03, 0x58, 0x51, 0x48, 0x58, 0x8C, 0x92, 0x6E, 0xBB, 0x26, 0x2A, 0x66, 0x04, 0x21, 0x39, 
   0x7C, 0xAC, 0xB8, 0x82, 0xCD, 0xE5, 0x1F, 0x0D, 0x48, 0x0E, 0x00, 0x00, 0x43, 0x53, 0xC3, 0x89, 
   0xC9, 0xED, 0x56, 0x86, 0x75, 0x1C, 0x0E, 0x3F, 0x5F, 0x77, 0x4B, 0x74, 0x65, 0xBE, 0x0C, 0x30, 
   0xAD, 0x00, 0x00, 0x00, 0x52, 0x55, 0x69, 0xC4, 0xBC, 0xFF, 0x8C, 0xBA, 0xED, 0x39, 0x8F, 0x76, 
   0x50, 0x5C, 0x01, 0x09, 0x0F, 0x7A, 0x00, 0x26, 0xFE, 0x6E, 0x7E, 0x97, 0xB4, 0xB8, 0x50, 0x3B, 
   0x83, 0x6C, 0x1C, 0x24, 0x9A, 0x58, 0x48, 0x9F, 0x31, 0x2C, 0x7C, 0x27, 0x55, 0x7B, 0x78, 0xA6, 
   0x8C, 0x72, 0x83, 0x65, 0x33, 0x00, 0x9F, 0x1C, 0x28, 0xCC, 0x66, 0x8D, 0x32, 0x78, 0xBC, 0x54, 
   0x2D, 0x75, 0xC7, 0x49, 0x10, 0x9F, 0x3E, 0x3C, 0x54, 0x4F, 0x9D, 0x80, 0x82, 0x52, 0xA6, 0x10, 
   0x24, 0x3F, 0x1C, 0x2C, 0x52, 0x7E, 0xA0, 0xC0, 0x73, 0x9A, 0x8F, 0x33, 0x38, 0x8E, 0x15, 0x46, 
   0x97, 0x5F, 0x61, 0x7D, 0x4E, 0x1D, 0x37, 0x22, 0x15, 0x33, 0x4C, 0xA2, 0x7D, 0x8B, 0xD6, 0xEE, 
   0x46, 0x4B, 0xD1, 0x34, 0x00, 0x45, 0x39, 0x65, 0x2C, 0x67, 0x93, 0x9E, 0x50, 0x43, 0xB5, 0x28, 
   0x31, 0x29, 0x29, 0x28, 0x65, 0x69, 0x97, 0xFF, 0x6A, 0xB3, 0xB0, 0x47, 0x24, 0x1A, 0x40, 0x23, 
   0x65, 0x4F, 0x89, 0xE4, 0x1C, 0x67, 0x8A, 0x4A, 0x3E, 0x5C, 0x67, 0x50, 0xB0, 0x51, 0x68, 0xAA, 
   0x4C, 0x8F, 0x4E, 0x4C, 0x5B, 0xA2, 0x5C, 0x21, 0x97, 0x4B, 0x44, 0x5A, 0x34, 0x8A, 0x83, 0x3A, 
   0x58, 0xBD, 0x58, 0x4D, 0x84, 0x74, 0x7B, 0x89, 0x24, 0x60, 0x7E, 0x4C, 0x4F, 0x74, 0x68, 0x83, 
   0xAE, 0x35, 0x7C, 0xA3, 0x40, 0x3C, 0x64, 0x5C, 0x3B, 0x8D, 0x5C, 0x69, 0x9A, 0x4A, 0x85, 0xB6, 
   0x21, 0x35, 0x8D, 0x22, 0x31, 0x69, 0x63, 0x8E, 0x8A, 0x80, 0xA5, 0x95, 0x36, 0x53, 0x78, 0x19, 
   0x0D, 0x57, 0x69, 0x5D, 0xE0, 0x96, 0x9C, 0xD3, 0x1D, 0x41, 0x31, 0x20, 0x4B, 0x3B, 0x53, 0x72, 
   0xE0, 0x69, 0x65, 0xB1, 0x45, 0x41, 0x2B, 0x00, 0x3A, 0x62, 0x18, 0x2B, 0x7A, 0x66, 0x5C, 0x61, 
   0x96, 0xA3, 0xB7, 0x57, 0x91, 0xA6, 0x00, 0x1E, 0x39, 0x3A, 0x1F, 0x30, 0x65, 0x72, 0xE5, 0x7D, 
   0xCA, 0xF2, 0x6A, 0x8F, 0x88, 0x34, 0x24, 0x4F, 0x10, 0x04, 0x4D, 0x4E, 0x5A, 0x71, 0x4F, 0x68, 
   0xAD, 0x39, 0x5F, 0xB5, 0x45, 0x7C, 0x76, 0x58, 0x5B, 0x5B, 0x4E, 0x57, 0x96, 0x5F, 0x9B, 0xD0, 
   0x65, 0x66, 0x90, 0x47, 0x2C, 0x76, 0x40, 0x4E, 0x79, 0x2D, 0x77, 0x61, 0x39, 0x71, 0x56, 0x52, 
   0x4F, 0x7B, 0x71, 0x40, 0x80, 0x5B, 0x6A, 0xC8, 0x3D, 0x8E, 0xD4, 0x31, 0x7D, 0x7C, 0x3D, 0x59, 
   0x84, 0x5B, 0x36, 0x61, 0x46, 0x53, 0x53, 0x96, 0x8E, 0xD3, 0x61, 0x9F, 0xDF, 0x00, 0x5D, 0x65, 
   0x1C, 0x0C, 0x4D, 0x8C, 0x42, 0x8D, 0x83, 0xA1, 0xA6, 0x44, 0x9D, 0x80, 0x3F, 0x42, 0x9F, 0x84, 
   0x64, 0xC2, 0x89, 0xA3, 0xAA, 0x32, 0x57, 0x89, 0x00, 0x3E, 0x59, 0x66, 0x54, 0x6B, 0xBD, 0x92, 
   0xDD, 0x66, 0x4D, 0x98, 0x00, 0x25, 0x52, 0x38, 0x72, 0x5E, 0x91, 0x9C, 0x9F, 0x8C, 0xA2, 0xEB, 
   0x6E, 0x5B, 0xF3, 0x48, 0x41, 0x04, 0x12, 0x5B, 0x09, 0x40, 0x50, 0xEA, 0x91, 0x6E, 0xE8, 0x3D, 
   0x7A, 0x6A, 0x27, 0x4D, 0x73, 0x7D, 0x69, 0x8E, 0x89, 0x6A, 0x94, 0x70, 0x71, 0x82, 0x18, 0x71, 
   0x82, 0x17, 0x69, 0x9F, 0x68, 0x14, 0x82, 0x6A, 0x81, 0x7D, 0x64, 0xB6, 0x94, 0x47, 0x44, 0x7E, 
   0x2A, 0x43, 0x9A, 0x54, 0x81, 0x68, 0x72, 0x7C, 0x80, 0x62, 0x53, 0xC5, 0x82, 0x64, 0x9C, 0x36, 
   0x53, 0x73, 0x25, 0x66, 0x67, 0x5E, 0x99, 0x84, 0x49, 0x5A, 0xA2, 0x2F, 0x21, 0x70, 0x92, 0x77, 
   0xA5, 0xB3, 0xAB, 0xC7, 0x21, 0x5A, 0xA8, 0x00, 0x46, 0x6C, 0x58, 0x4C, 0x5A, 0x71, 0x64, 0x67, 
   0x50, 0x54, 0xB3, 0x45, 0x78, 0xA9, 0x51, 0xA0, 0x97, 0x73, 0x44, 0x68, 0x50, 0x32, 0x62, 0x34, 
   0x7D, 0xB8, 0x51, 0x78, 0x96, 0x7F, 0x6C, 0x73, 0x67, 0x5F, 0x89, 0x21, 0x59, 0x8E, 0x3D, 0x6F, 
   0x99, 0x43, 0x58, 0x6B, 0x56, 0x42, 0x50, 0x68, 0x76, 0xAD, 0x85, 0x9F, 0xDB, 0x66, 0x65, 0x89, 
   0x2B, 0x41, 0x2C, 0x04, 0x41, 0x81, 0x7D, 0x75, 0xD8, 0x90, 0x92, 0x88, 0x56, 0x68, 0x64, 0x42, 
   0x3F, 0x74, 0x36, 0x50, 0x76, 0x6F, 0x6F, 0xBC, 0x64, 0x8C, 0xB1, 0x2C, 0x6A, 0x6C, 0x4B, 0x4E, 
   0x5B, 0x7B, 0x5A, 0x84, 0x92, 0x9E, 0xCA, 0x78, 0x7A, 0xB2, 0x13, 0x33, 0x7C, 0x1D, 0x2C, 0x4C, 
   0x52, 0x5B, 0x5D, 0x81, 0x95, 0xCA, 0x32, 0x50, 0x44, 0x21, 0x4B, 0x0D, 0x35, 0x1A, 0x7A, 0x6B, 
   0x57, 0xFF, 0x8E, 0xFD, 0xF7, 0x7A, 0x7C, 0x4B, 0x0F, 0x00, 0x0C, 0x00, 0x00, 0x34, 0x42, 0x9C, 
   0x88, 0x84, 0x93, 0xBA, 0x52, 0x32, 0xB5, 0x4D, 0x49, 0x76, 0x6E, 0x77, 0x7F, 0x4A, 0x61, 0x88, 
   0x10, 0x3F, 0x7B, 0x49, 0x77, 0x47, 0x77, 0x65, 0x87, 0x43, 0x30, 0xAA, 0x3D, 0x41, 0x87, 0x4D, 
   0x7A, 0x6E, 0x31, 0x63, 0x5A, 0x37, 0x35, 0x3E, 0x44, 0x2B, 0x63, 0x63, 0x77, 0xB0, 0x74, 0x85, 
   0x86, 0x40, 0x79, 0xA9, 0x38, 0x5A, 0xD3, 0x37, 0x14, 0x2B, 0x33, 0x3C, 0x19, 0x78, 0xAE, 0xFF, 
   0x77, 0x74, 0x7A, 0x00, 0x00, 0x0C, 0x42, 0x4B, 0xB1, 0x9D, 0xA1, 0x9B, 0x3C, 0x63, 0x60, 0x0D, 
   0x34, 0x5E, 0x5C, 0x60, 0x49, 0x56, 0x33, 0x90, 0x34, 0x4B, 0xC4, 0x30, 0x7A, 0x90, 0x54, 0x69, 
   0x28, 0x6B, 0x52, 0x77, 0x58, 0x63, 0x84, 0x1E, 0x51, 0x69, 0x24, 0x3A, 0x87, 0x69, 0x30, 0x82, 
   0x4D, 0x71, 0x89, 0x31, 0x82, 0x99, 0x32, 0x32, 0x4F, 0x4B, 0x2E, 0x4A, 0x90, 0xAD, 0x92, 0x56, 
   0xA2, 0xE3, 0x20, 0x24, 0xBE, 0x57, 0x7D, 0x00, 0x30, 0x4F, 0x47, 0x31, 0x32, 0xA5, 0x6B, 0x77, 
   0xBF, 0x61, 0x7E, 0x99, 0x29, 0x00, 0x2A, 0x09, 0x4C, 0x94, 0x89, 0xF5, 0xFD, 0xCD, 0xA0, 0xA1, 
   0x40, 0x29, 0x6F, 0x00, 0x30, 0x6B, 0x03, 0x25, 0x3D, 0x84, 0x71, 0x93, 0x8C, 0xA6, 0xA6, 0x6F, 
   0x9E, 0x79, 0x33, 0x3A, 0x84, 0x04, 0x00, 0x8F, 0x43, 0x6B, 0x72, 0x83, 0x89, 0xA9, 0x5A, 0x50, 
   0x6E, 0x26, 0x44, 0x35, 0x3D, 0x7C, 0xAE, 0x65, 0x2D, 0xBF, 0x2D, 0x29, 0x26, 0x2E, 0x82, 0x34, 
   0x8F, 0xBC, 0xFF, 0x3F, 0x75, 0xFF, 0x11, 0x16, 0x14, 0x66, 0x41, 0x23, 0x72, 0x5C, 0xC3, 0x33, 
   0x57, 0xBD, 0x21, 0x41, 0x3F, 0x55, 0x3D, 0x24, 0x6C, 0x8E, 0xD1, 0x38, 0x99, 0xC7, 0x43, 0x42, 
   0x64, 0x3E, 0x23, 0x62, 0x4A, 0x4C, 0x7F, 0x45, 0x54, 0x75, 0x57, 0x5D, 0x92, 0x57, 0x85, 0x83, 
   0x40, 0x89, 0x79, 0x4B, 0x2B, 0xAC, 0x4B, 0x00, 0x9B, 0x57, 0x95, 0x72, 0x57, 0xDB, 0x67, 0x1E, 
   0x1E, 0x86, 0x46, 0x1D, 0x89, 0x80, 0x90, 0xAD, 0x4D, 0x8B, 0xC8, 0x40, 0x3F, 0x5F, 0x4A, 0x3E, 
   0x3B, 0x28, 0x50, 0x70, 0x5B, 0x73, 0xC7, 0x62, 0x68, 0xB7, 0x40, 0x61, 0x66, 0x40, 0x49, 0x70, 
   0x57, 0x32, 0x8C, 0x51, 0x50, 0x88, 0x40, 0x79, 0x89, 0x4B, 0x69, 0x9A, 0x40, 0x4C, 0x9A, 0x57, 
   0x62, 0x72, 0x4C, 0x35, 0x7D, 0x58, 0x59, 0x78, 0x5D, 0x9F, 0xB2, 0x41, 0x66, 0xAD, 0x41, 0x4E, 
   0x62, 0x5D, 0x6A, 0x62, 0x5D, 0x5E, 0x81, 0x46, 0x47, 0xAB, 0x5C, 0x69, 0xBD, 0x44, 0x63, 0x99, 
   0x33, 0x3C, 0x58, 0x3F, 0x54, 0x6A, 0x4C, 0x7D, 0xB5, 0x48, 0x78, 0xC0, 0x66, 0x55, 0x64, 0x81, 
   0x6A, 0x96, 0x2A, 0x5D, 0xB6, 0x2D, 0x45, 0x64, 0x5F, 0x55, 0x57, 0x3D, 0x5C, 0x89, 0x37, 0x78, 
   0x63, 0x76, 0x60, 0xA8, 0x58, 0x43, 0xA7, 0x12, 0x65, 0x6C, 0x2F, 0x5A, 0x5F, 0x48, 0x44, 0x8D, 
   0x56, 0x67, 0x78, 0x6E, 0x62, 0x95, 0x46, 0x48, 0x8B, 0x25, 0x56, 0x76, 0x65, 0xAC, 0xA5, 0x7C, 
   0x89, 0xBB, 0x47, 0x1B, 0x6F, 0x1E, 0x47, 0x40, 0x4B, 0x7A, 0x7F, 0x67, 0x6F, 0xE1, 0x61, 0x7F, 
   0x7F, 0x37, 0x39, 0x39, 0x00, 0x00, 0x40, 0x45, 0x6B, 0x94, 0x7D, 0xE0, 0xE1, 0x79, 0x47, 0xA9, 
   0x68, 0x35, 0x80, 0x65, 0x8F, 0x99, 0x34, 0x61, 0x7F, 0x0A, 0x43, 0x56, 0x4F, 0x59, 0x67, 0x4C, 
   0x3E, 0x71, 0x2D, 0x46, 0x98, 0x8A, 0x9F, 0xC3, 0x8A, 0x8F, 0xC9, 0x16, 0x5B, 0x98, 0x1F, 0x64, 
   0x1D, 0x46, 0x67, 0x72, 0x47, 0x23, 0xB8, 0x11, 0x48, 0x44, 0x4E, 0x7F, 0xAE, 0xBD, 0xBD, 0xFF, 
   0xA4, 0x81, 0xB2, 0x00, 0x00, 0x1F, 0x0B, 0x3B, 0x57, 0x8A, 0x8A, 0x93, 0x49, 0x8E, 0x9E, 0x35, 
   0xA0, 0xCF, 0x8C, 0x72, 0xFC, 0x71, 0x5F, 0x4E, 0x5E, 0x62, 0x56, 0x67, 0x88, 0xB0, 0x2C, 0x37, 
   0x8E, 0x20, 0x37, 0x98, 0x86, 0x76, 0x80, 0x4D, 0x88, 0x69, 0x2B, 0x49, 0x91, 0x3E, 0x5B, 0xBA, 
   0x6E, 0x8E, 0x86, 0x85, 0x88, 0x68, 0x6B, 0x58, 0x7E, 0x12, 0x3E, 0x84, 0x01, 0x27, 0xA2, 0x5E, 
   0x57, 0x97, 0x83, 0xA3, 0x90, 0x62, 0x66, 0x95, 0x61, 0x5A, 0x72, 0x5F, 0x6A, 0x88, 0x4B, 0x80, 
   0x93, 0x2E, 0x36, 0x71, 0x2F, 0x52, 0x88, 0x75, 0x7C, 0x99, 0x7B, 0x67, 0x67, 0x20, 0x7E, 0x84, 
   0x3D, 0x72, 0xA3, 0x82, 0x4F, 0xA9, 0x4A, 0x5F, 0x9D, 0x4F, 0x70, 0x75, 0x55, 0x59, 0x8B, 0x76, 
   0x69, 0xA1, 0x52, 0x69, 0x7E, 0x02, 0x4E, 0x6C, 0x37, 0x5B, 0x5D, 0x90, 0x8F, 0x8D, 0x80, 0x8A, 
   0xCD, 0x4C, 0x60, 0xA5, 0x6B, 0x69, 0x80, 0x13, 0x4C, 0x5C, 0x25, 0x36, 0x7E, 0x7C, 0x87, 0xAC, 
   0x84, 0x81, 0x79, 0x24, 0x32, 0x5E, 0x64, 0x3A, 0x82, 0x9D, 0xC4, 0xDE, 0x4C, 0x96, 0xBF, 0x22, 
   0x27, 0x3F, 0x44, 0x4E, 0x5B, 0x62, 0x76, 0xC3, 0x84, 0x7C, 0xB2, 0x4F, 0x69, 0x72, 0x21, 0x2F, 
   0x5A, 0x66, 0x58, 0x82, 0x73, 0x93, 0xAC, 0x62, 0x82, 0xA2, 0x55, 0x59, 0x9B, 0x3D, 0x4C, 0x88, 
   0x3D, 0x4C, 0x53, 0x5A, 0x64, 0x5A, 0x6D, 0x81, 0xBC, 0x62, 0x70, 0xC2, 0x45, 0x58, 0x65, 0x61, 
   0x2F, 0x31, 0x76, 0x63, 0xC1, 0x30, 0x8B, 0xC2, 0x40, 0x52, 0x77, 0x36, 0x30, 0x55, 0x39, 0x65, 
   0x84, 0x91, 0x93, 0xC5, 0x7F, 0x6A, 0xAE, 0x49, 0x6E, 0x89, 0x24, 0x4F, 0x80, 0x40, 0x3E, 0x63, 
   0x6A, 0x4B, 0x64, 0x60, 0xA1, 0xAE, 0x4C, 0x5C, 0x51, 0x46, 0x67, 0x2A, 0x4D, 0x44, 0xE1, 0x59, 
   0x4F, 0xA3, 0x69, 0x66, 0x4B, 0x4B, 0x7C, 0x87, 0x42, 0x5E, 0x69, 0x00, 0x1F, 0x2C, 0x3E, 0x25, 
   0x84, 0x7F, 0x88, 0xE2, 0x80, 0x94, 0x8D, 0x57, 0x3D, 0x6D, 0x21, 0x1A, 0x5A, 0x27, 0x76, 0x70, 
   0x5B, 0x6C, 0x81, 0x84, 0x5C, 0x71, 0x4A, 0x72, 0x7D, 0x1B, 0x5A, 0x9F, 0x42, 0x52, 0x9D, 0x6A, 
   0x57, 0x5B, 0x20, 0x2F, 0x05, 0x2D, 0x37, 0x68, 0x79, 0x83, 0xEF, 0x58, 0x85, 0x7F, 0x46, 0x79, 
   0x51, 0x6C, 0x49, 0xA5, 0x26, 0x37, 0x7D, 0x09, 0x4E, 0x5A, 0x6C, 0x81, 0x9D, 0x6E, 0x4E, 0x64, 
   0x4C, 0x47, 0x7F, 0x71, 0x6E, 0x84, 0x47, 0x62, 0x5B, 0x01, 0x1E, 0x7C, 0x3F, 0x7E, 0x7B, 0x57, 
   0x78, 0x59, 0x4C, 0x21, 0x88, 0x51, 0x4E, 0x8F, 0x28, 0x5B, 0x72, 0x19, 0x68, 0x6D, 0x6B, 0x58, 
   0x9A, 0x9E, 0x63, 0x5A, 0x2A, 0x4C, 0x54, 0x01, 0x41, 0x61, 0x56, 0x64, 0x86, 0x62, 0x91, 0xC5, 
   0x29, 0x2A, 0x5E, 0x00, 0x00, 0x0A, 0x67, 0x9C, 0x9B, 0xB9, 0xE3, 0xD7, 0x58, 0x6A, 0x87, 0x21, 
   0x00, 0x4C, 0x46, 0x6A, 0x8A, 0x1D, 0x5A, 0xBB, 0x24, 0x38, 0x4D, 0x2C, 0x55, 0x14, 0x68, 0x69, 
   0x62, 0xA8, 0x7B, 0xE4, 0x45, 0x7A, 0xC9, 0x00, 0x08, 0x0C, 0x44, 0x49, 0x4D, 0x8A, 0xB7, 0xFB, 
   0x51, 0x68, 0xFF, 0x39, 0x3F, 0x37, 0x60, 0x76, 0x05, 0x27, 0x63, 0x68, 0x28, 0x2F, 0xBC, 0x84, 
   0x51, 0xC3, 0x5C, 0x79, 0x6E, 0x23, 0x6E, 0x57, 0x6D, 0x68, 0xD3, 0x77, 0x66, 0x82, 0x1F, 0x2C, 
   0x47, 0x02, 0x43, 0xA0, 0x5E, 0x7D, 0x55, 0x60, 0x72, 0x19, 0x3F, 0x33, 0xBC, 0x5B, 0x29, 0xF7, 
   0x40, 0x82, 0x51, 0x57, 0xC7, 0x6C, 0x72, 0x74, 0xC5, 0x28, 0x00, 0x5D, 0x34, 0x23, 0x3A, 0x79, 
   0x73, 0xA6, 0x7D, 0x5D, 0xA1, 0x09, 0x46, 0x45, 0x1A, 0x30, 0x5C, 0x65, 0x87, 0xAD, 0x78, 0x76, 
   0x81, 0x2E, 0x16, 0x55, 0x3A, 0x60, 0xA6, 0x90, 0xA5, 0xE3, 0x4B, 0x55, 0x63, 0x0B, 0x21, 0x1D, 
   0x5B, 0x5A, 0x58, 0x5C, 0x60, 0xB7, 0x45, 0x5B, 0xC4, 0x40, 0x29, 0x58, 0x52, 0x70, 0x3C, 0x7B, 
   0xB0, 0xCD, 0x5E, 0x75, 0xCE, 0x3B, 0x28, 0x34, 0x4B, 0x1C, 0x6D, 0x4A, 0x8E, 0xFB, 0x28, 0x83, 
   0x7C, 0x56, 0x28, 0x1F, 0x57, 0x51, 0x86, 0x51, 0x96, 0xD1, 0x40, 0x73, 0x76, 0x4B, 0x3D, 0x53, 
   0x40, 0x26, 0x9E, 0x5C, 0x4B, 0x78, 0x40, 0xA9, 0x90, 0x35, 0x77, 0xB2, 0x68, 0x53, 0x9A, 0x57, 
   0x3B, 0x49, 0x29, 0x5D, 0x6B, 0x3A, 0x4D, 0xA0, 0x63, 0x82, 0x96, 0x52, 0x92, 0xA1, 0x36, 0x36, 
   0x73, 0x58, 0x2A, 0x52, 0x5D, 0x6F, 0x9E, 0x4C, 0x86, 0xC8, 0x4B, 0x41, 0xA5, 0x2E, 0x36, 0x64, 
   0x62, 0x82, 0x64, 0x57, 0x83, 0x9F, 0x24, 0x4F, 0xAC, 0x48, 0x28, 0x6E, 0x89, 0x8F, 0xCC, 0x88, 
   0xA5, 0xD3, 0x45, 0x52, 0x24, 0x0F, 0x16, 0x39, 0x1F, 0x43, 0xD9, 0x81, 0x77, 0x8A, 0x4E, 0x61, 
   0x41, 0x27, 0x45, 0x87, 0x5A, 0x56, 0xE3, 0x82, 0x62, 0xA3, 0x4D, 0x7E, 0x4B, 0x13, 0x6A, 0x76, 
   0x1A, 0x09, 0x6B, 0x4B, 0x06, 0x4C, 0x81, 0x9F, 0xC1, 0x8D, 0xD5, 0xEF, 0x37, 0x56, 0x64, 0x2A, 
   0x1A, 0x2E, 0x41, 0x3C, 0x63, 0x59, 0x6C, 0x9F, 0x75, 0x9B, 0xC2, 0x41, 0x93, 0x98, 0x4A, 0x40, 
   0x79, 0x3D, 0x27, 0x44, 0x26, 0x44, 0x4C, 0x17, 0x6E, 0xC6, 0x76, 0x5B, 0x96, 0x7F, 0x91, 0x80, 
   0x7F, 0x70, 0xAD, 0x49, 0x64, 0x9A, 0x2A, 0x7E, 0x5A, 0x44, 0x55, 0x86, 0x3F, 0x21, 0x5F, 0x2F, 
   0x5B, 0x8A, 0x65, 0x8B, 0xA9, 0x4B, 0x66, 0xAA, 0x80, 0x77, 0x7C, 0x8A, 0x76, 0x92, 0x37, 0x6F, 
   0x97, 0x17, 0x45, 0x79, 0x29, 0x40, 0x69, 0x11, 0x48, 0x71, 0x79, 0x84, 0x8C, 0xE8, 0x8C, 0xE4, 
   0x85, 0x96, 0xDC, 0x1D, 0x86, 0x60, 0x00, 0x00, 0x29, 0x0F, 0x31, 0x69, 0x85, 0xC5, 0xA0, 0x51, 
   0x90, 0xAA, 0x33, 0x6E, 0xA1, 0xB3, 0x7D, 0xBD, 0xD4, 0x91, 0xA4, 0x36, 0x3F, 0x79, 0x00, 0x1C, 
   0x70, 0x53, 0x7E, 0x76, 0x86, 0xAB, 0xA9, 0x62, 0x53, 0xBE, 0x17, 0x35, 0x77, 0x07, 0x41, 0x22, 
   0x78, 0x71, 0x58, 0xB4, 0xA0, 0xF5, 0x7F, 0x98, 0xEE, 0x37, 0x34, 0x29, 0x02, 0x2C, 0x39, 0x47, 
   0x4B, 0xC8, 0x99, 0x81, 0xA7, 0x6C, 0x94, 0x79, 0x37, 0x6B, 0x83, 0x36, 0x4D, 0x88, 0x5E, 0x3B, 
   0x76, 0x63, 0x64, 0x7C, 0x40, 0x92, 0x88, 0x3B, 0x48, 0x89, 0x3D, 0x44, 0x8A, 0x88, 0x8F, 0x6F, 
   0x7D, 0x8A, 0x93, 0x33, 0x55, 0xC7, 0x54, 0x5A, 0x92, 0x54, 0x65, 0x69, 0x4E, 0x7B, 0x7F, 0x76, 
   0x63, 0x9B, 0x4D, 0x3A, 0xA6, 0x26, 0x2B, 0x5D, 0x5A, 0x89, 0x80, 0x78, 0xB2, 0xAF, 0x5B, 0x78, 
   0x9E, 0x2D, 0x31, 0x8C, 0x6C, 0x41, 0x63, 0x82, 0x64, 0x97, 0x3D, 0x7C, 0xAE, 0x1B, 0x76, 0x8B, 
   0x56, 0x48, 0x62, 0x91, 0x5A, 0x75, 0x70, 0x56, 0x9A, 0x37, 0x86, 0xDF, 0x74, 0xB9, 0xA4, 0x79, 
   0x50, 0x5C, 0x44, 0x1A, 0x49, 0x3E, 0x69, 0x9A, 0x4A, 0x7B, 0xB8, 0x6D, 0x64, 0x78, 0x62, 0x3B, 
   0x5B, 0x3A, 0x42, 0x89, 0x8F, 0x98, 0xAC, 0x5A, 0x8C, 0xA0, 0x14, 0x2A, 0x66, 0x2B, 0x3A, 0x66, 
   0x6C, 0x69, 0xCD, 0x89, 0x81, 0x89, 0x39, 0x70, 0x55, 0x1D, 0x3C, 0x8E, 0x7E, 0x5F, 0x95, 0x79, 
   0x93, 0x9A, 0x65, 0x6A, 0x88, 0x24, 0x5D, 0x59, 0x24, 0x4C, 0x5F, 0x5F, 0x5E, 0xA6, 0x83, 0x98, 
   0xA8, 0x66, 0x75, 0xB9, 0x54, 0x46, 0x89, 0x2B, 0x40, 0x59, 0x58, 0x62, 0x64, 0x6F, 0x73, 0x98, 
   0x54, 0x63, 0xC1, 0x60, 0x5D, 0x55, 0x5B, 0x72, 0xD3, 0x60, 0x83, 0xFF, 0x70, 0x96, 0x6A, 0x40, 
   0x52, 0x08, 0x21, 0x00, 0x44, 0x27, 0x2B, 0x5E, 0x56, 0xDA, 0xB2, 0x79, 0xA2, 0xBA, 0x3A, 0x17, 
   0x6F, 0x23, 0x21, 0x6E, 0x78, 0x93, 0x8F, 0x5A, 0x81, 0x82, 0x00, 0x25, 0x5E, 0x33, 0x3C, 0x53, 
   0x84, 0x71, 0x82, 0x5C, 0x61, 0xC2, 0x28, 0x4B, 0x8E, 0x54, 0x94, 0x6A, 0x5F, 0x5E, 0x5D, 0x10, 
   0x0D, 0x5D, 0x4A, 0x47, 0x5E, 0x79, 0x83, 0xA4, 0x46, 0x80, 0x8A, 0x5C, 0x6E, 0x8F, 0x61, 0x60, 
   0x9E, 0x27, 0x1A, 0x36, 0x37, 0x43, 0x2C, 0x49, 0xA4, 0xFA, 0x44, 0x71, 0xAA, 0x40, 0x15, 0x0E, 
   0x6E, 0x64, 0x8A, 0x83, 0x8B, 0xCE, 0x35, 0x4C, 0x61, 0x00, 0x3F, 0x48, 0x2E, 0x4A, 0x75, 0x8B, 
   0x61, 0x77, 0x5E, 0x4F, 0xB6, 0x24, 0x3E, 0x65, 0x24, 0x4F, 0x26, 0x63, 0x4B, 0x77, 0x58, 0x62, 
   0xC8, 0x47, 0x57, 0x83, 0x35, 0x46, 0x32, 0x5D, 0x5E, 0x6B, 0x51, 0x92, 0x9A, 0x23, 0x5D, 0x6E, 
   0x24, 0x18, 0x52, 0x4E, 0x38, 0x5B, 0x73, 0x9D, 0xAF, 0x5D, 0xCC, 0xEA, 0x4B, 0x47, 0xA3, 0x5F, 
   0x21, 0x17, 0x1E, 0x42, 0x49, 0x29, 0x48, 0xEF, 0x42, 0x5B, 0x8D, 0x6D, 0x62, 0x15, 0x58, 0x64, 
   0x50, 0x47, 0x77, 0x9E, 0x68, 0xA3, 0xEA, 0x70, 0x66, 0x60, 0x00, 0x00, 0x10, 0x00, 0x18, 0xAB, 
   0x6D, 0xD9, 0xDA, 0xC5, 0xA9, 0x8E, 0x5D, 0x72, 0x4B, 0x04, 0x3A, 0x28, 0x1E, 0x09, 0x85, 0x15, 
   0x0F, 0x9F, 0x63, 0x79, 0xA1, 0xB9, 0xD1, 0xB2, 0x57, 0x69, 0x66, 0x00, 0x0B, 0x70, 0x3B, 0x59, 
   0xB3, 0x62, 0x5F, 0x8F, 0x25, 0x39, 0x17, 0x37, 0x83, 0x4C, 0x88, 0x89, 0xE4, 0x34, 0x1C, 0xD9, 
   0x29, 0x34, 0x3D, 0x79, 0x81, 0x25, 0x62, 0xA9, 0xBF, 0x1D, 0x79, 0xE1, 0x2E, 0x21, 0x40, 0x79, 
   0x36, 0x2F, 0x78, 0x85, 0xC9, 0x26, 0x62, 0xCE, 0x0E, 0x28, 0x21, 0x48, 0x13, 0x16, 0x56, 0x72, 
   0xA3, 0x5D, 0xB9, 0xCF, 0x63, 0x63, 0xBF, 0x40, 0x4A, 0x88, 0x44, 0x7B, 0x62, 0x38, 0x1F, 0x55, 
   0x39, 0x1B, 0x68, 0x67, 0x9B, 0x82, 0x50, 0xB3, 0x91, 0x23, 0x25, 0x94, 0x58, 0x1B, 0xB1, 0x70, 
   0xC7, 0x8A, 0x59, 0x8D, 0x78, 0x35, 0x12, 0xA0, 0x2D, 0x3D, 0x6D, 0x33, 0x4F, 0x7F, 0x5B, 0x67, 
   0xD3, 0x57, 0x73, 0x92, 0x4C, 0x51, 0x29, 0x4C, 0x5C, 0x57, 0x57, 0x72, 0xD6, 0x45, 0x39, 0x8D, 
   0x4B, 0x45, 0x4A, 0x3A, 0x69, 0xB8, 0x4C, 0x60, 0xB3, 0x5D, 0x8E, 0x74, 0x63, 0x60, 0x78, 0x35, 
   0x48, 0xA0, 0x4B, 0x5E, 0x7E, 0x45, 0x6E, 0x83, 0x2A, 0x3B, 0x8E, 0x6F, 0x40, 0x61, 0x69, 0x8B, 
   0x90, 0x41, 0x4D, 0xA9, 0x3A, 0x64, 0xAA, 0x6D, 0x81, 0x8D, 0x23, 0x3D, 0x6F, 0x57, 0x43, 0x5F, 
   0x58, 0x7D, 0x9A, 0x47, 0x72, 0xB3, 0x42, 0x3F, 0x8C, 0x53, 0x61, 0xBE, 0x6A, 0x72, 0xD6, 0x4D, 
   0x71, 0x54, 0x56, 0x5E, 0x4B, 0x42, 0x55, 0x7D, 0x25, 0x38, 0x73, 0x36, 0x4F, 0x74, 0x59, 0x50, 
   0xB9, 0x38, 0x57, 0x81, 0x3F, 0x81, 0x5B, 0x72, 0x7B, 0xDE, 0x55, 0x6D, 0xC0, 0x3C, 0x2C, 0x29, 
   0x0E, 0x0A, 0x3F, 0x38, 0x57, 0x96, 0x86, 0xA5, 0xAF, 0x7C, 0x9A, 0xAE, 0x52, 0x3D, 0x6D, 0x00, 
   0x03, 0x17, 0x3B, 0x6B, 0x76, 0x93, 0x8A, 0xFF, 0x66, 0x85, 0xB8, 0x58, 0x60, 0x43, 0x1D, 0x1F, 
   0x58, 0x38, 0x62, 0x9D, 0x6C, 0x83, 0xC5, 0x45, 0x28, 0x65, 0x36, 0x0E, 0x65, 0x4E, 0x84, 0x94, 
   0x66, 0xC0, 0x8A, 0x60, 0x65, 0x7F, 0x65, 0x41, 0xA1, 0x4D, 0x57, 0x69, 0x2A, 0x68, 0x97, 0x46, 
   0x5D, 0xA3, 0x59, 0x6F, 0xAE, 0x49, 0x5E, 0x79, 0x4B, 0x5E, 0x57, 0x96, 0x69, 0x8D, 0x7D, 0x5D, 
   0xE3, 0x00, 0x3B, 0x71, 0x00, 0x70, 0x33, 0x79, 0x82, 0xC8, 0xA6, 0x5C, 0xB3, 0x4D, 0x5D, 0x59, 
   0x51, 0x90, 0xA3, 0x92, 0x73, 0xE1, 0x50, 0x6A, 0x83, 0x00, 0x15, 0x36, 0x1E, 0x33, 0x91, 0x9B, 
   0x98, 0x78, 0x67, 0xA0, 0x66, 0x90, 0x94, 0xFF, 0x7F, 0x49, 0xEC, 0x4F, 0x3D, 0x65, 0x51, 0x98, 
   0x3F, 0x65, 0xAE, 0x7C, 0x3B, 0x50, 0xCB, 0x39, 0x46, 0xA1, 0x44, 0x50, 0x38, 0x3F, 0x45, 0x3E, 
   0x48, 0x52, 0xBA, 0x67, 0x7C, 0xCE, 0x5E, 0x8D, 0xB7, 0x86, 0x59, 0x8C, 0x7D, 0x51, 0x50, 0x1F, 
   0x57, 0x60, 0x3B, 0x47, 0x95, 0x69, 0x7C, 0xA7, 0x53, 0x9E, 0xA1, 0x4D, 0x37, 0x6C, 0x49, 0x42, 
   0x88, 0x87, 0x92, 0x88, 0x58, 0x5F, 0x7D, 0x08, 0x43, 0x73, 0x42, 0x6B, 0x91, 0x7D, 0x61, 0xB0, 
   0x6D, 0x6D, 0xA5, 0x55, 0x7E, 0x82, 0x3D, 0x5B, 0x81, 0x53, 0x65, 0x9C, 0x5E, 0x69, 0x79, 0x2B, 
   0x46, 0x6D, 0x33, 0x3B, 0x63, 0xA6, 0x70, 0xB4, 0x78, 0x88, 0x9E, 0x1B, 0x55, 0x86, 0x3C, 0x6B, 
   0x7F, 0x5F, 0x6A, 0x62, 0x44, 0x2C, 0x91, 0x67, 0x71, 0xBB, 0x7D, 0x9F, 0xA4, 0x21, 0x4F, 0x6A, 
   0x33, 0x3D, 0x6A, 0x79, 0x72, 0x99, 0x6F, 0x8F, 0xD2, 0x52, 0x62, 0x65, 0x58, 0x3B, 0x7B, 0x6E, 
   0xAC, 0xB3, 0x5B, 0x82, 0x8A, 0x2C, 0x2B, 0x4A, 0x27, 0x46, 0x78, 0x62, 0x75, 0xAD, 0x91, 0x8D, 
   0xA2, 0x79, 0x81, 0x8A, 0x27, 0x58, 0x88, 0x58, 0x51, 0x70, 0x3D, 0x63, 0x6A, 0x4F, 0x59, 0x82, 
   0x72, 0x7C, 0xA6, 0x62, 0x8C, 0xC3, 0x4B, 0x3C, 0x67, 0x4B, 0x43, 0x34, 0x5C, 0x83, 0xBE, 0x78, 
   0x9A, 0xFD, 0x43, 0x81, 0x5B, 0x36, 0x1F, 0x2B, 0x4D, 0x41, 0x76, 0x6B, 0xA2, 0xC9, 0x8C, 0x80, 
   0xC4, 0x29, 0x2F, 0x72, 0x07, 0x57, 0x5E, 0x75, 0x63, 0x69, 0x70, 0x69, 0x76, 0x3D, 0x70, 0xA5, 
   0x42, 0x7B, 0x8F, 0x76, 0x36, 0x7E, 0x68, 0x86, 0xE6, 0x7E, 0xAC, 0xFF, 0x59, 0x69, 0x41, 0x33, 
   0x19, 0x00, 0x0F, 0x0B, 0x27, 0x27, 0x1F, 0x4E, 0x5D, 0x6E, 0xC6, 0x93, 0xCC, 0xF0, 0x75, 0xA3, 
   0x8D, 0x4A, 0x27, 0x33, 0x00, 0x14, 0x6A, 0x26, 0x69, 0x8C, 0x78, 0x8C, 0x5F, 0x79, 0x37, 0x8D, 
   0x2E, 0x37, 0x7D, 0x39, 0x7D, 0x7D, 0x66, 0x9A, 0x9E, 0x3E, 0x50, 0x5E, 0x1C, 0x3D, 0x2C, 0x3F, 
   0x3D, 0x95, 0x6E, 0x4A, 0xE0, 0x63, 0x79, 0x7F, 0x45, 0x79, 0x50, 0x3E, 0x72, 0xBA, 0x3D, 0x21, 
   0x64, 0x27, 0x3D, 0x14, 0x5B, 0x88, 0xAD, 0x6D, 0x49, 0x76, 0x34, 0x38, 0x6B, 0x44, 0x87, 0xB9, 
   0x71, 0x53, 0x46, 0x2C, 0x30, 0x50, 0x3C, 0x6E, 0xBB, 0x62, 0x78, 0x5F, 0x34, 0x1C, 0x2B, 0x2F, 
   0x4A, 0xA4, 0x5D, 0x89, 0x8E, 0x31, 0x4B, 0x54, 0x5F, 0x39, 0x6F, 0x80, 0x66, 0x7B, 0x1D, 0x44, 
   0x55, 0x00, 0x4B, 0x9A, 0x68, 0x5D, 0x9F, 0x90, 0x80, 0x6B, 0x29, 0x58, 0x42, 0x07, 0x13, 0x44, 
   0x48, 0x3C, 0x7C, 0x88, 0xB0, 0xCF, 0x61, 0x5C, 0x81, 0x1C, 0x18, 0x75, 0x5F, 0x7E, 0x74, 0x48, 
   0x89, 0xAB, 0x36, 0x27, 0x65, 0x37, 0x49, 0x1B, 0x56, 0x73, 0x9A, 0x68, 0x58, 0xC9, 0x46, 0x64, 
   0x74, 0x2A, 0x86, 0x56, 0x79, 0x57, 0x53, 0x8D, 0x5F, 0xE2, 0x01, 0x3A, 0xBE, 0x00, 0x00, 0x01, 
   0x54, 0x6F, 0x3B, 0xA2, 0xFF, 0xE9, 0x7B, 0x7E, 0xC8, 0x4F, 0x35, 0x7A, 0x03, 0x3D, 0x28, 0x0F, 
   0x43, 0x52, 0x78, 0x50, 0xD2, 0x85, 0x79, 0xB1, 0x4B, 0x74, 0x43, 0x32, 0x56, 0x86, 0x36, 0x39, 
   0x97, 0x47, 0x66, 0x36, 0x47, 0x66, 0x7B, 0x31, 0x39, 0xCB, 0x43, 0x6C, 0x81, 0x56, 0x7D, 0x3C, 
   0x6D, 0x2D, 0xAD, 0x34, 0x11, 0x96, 0x29, 0x7A, 0x35, 0x73, 0xB5, 0x91, 0x79, 0x91, 0xBF, 0x28, 
   0x38, 0x63, 0x1C, 0x35, 0x68, 0x82, 0x61, 0x9A, 0x59, 0x44, 0x88, 0x04, 0x18, 0x1C, 0x2D, 0x55, 
   0x6A, 0xA7, 0xC5, 0xF6, 0x68, 0x97, 0xC2, 0x12, 0x32, 0x37, 0x44, 0x24, 0x74, 0x5B, 0x47, 0x9B, 
   0x56, 0x77, 0x79, 0x39, 0x57, 0x36, 0x34, 0x5F, 0x4C, 0x62, 0x8D, 0xEA, 0x4C, 0x81, 0xD0, 0x3B, 
   0x20, 0x62, 0x69, 0x59, 0x45, 0x63, 0xAE, 0xB1, 0x2E, 0x56, 0xC3, 0x39, 0x16, 0x40, 0x4B, 0x44, 
   0xA6, 0x57, 0x95, 0xD8, 0x51, 0x7E, 0x68, 0x51, 0x27, 0x2D, 0x57, 0x22, 0x6E, 0x45, 0x79, 0xBB, 
   0x3A, 0x81, 0x9B, 0x46, 0x5F, 0x80, 0x58, 0x48, 0xA2, 0x63, 0x49, 0x79, 0x2F, 0x83, 0x62, 0x51, 
   0x83, 0xAD, 0x46, 0x4E, 0xAD, 0x46, 0x57, 0x73, 0x51, 0x55, 0x5B, 0x41, 0x22, 0x67, 0x5D, 0x5D, 
   0x91, 0x57, 0xAE, 0xD7, 0x39, 0x48, 0xAF, 0x1D, 0x15, 0x4C, 0x5C, 0x83, 0x58, 0x52, 0x9B, 0xA5, 
   0x37, 0x40, 0xAD, 0x54, 0x4B, 0x7C, 0x76, 0x79, 0xD6, 0x4D, 0x7E, 0xCC, 0x2E, 0x4F, 0x3F, 0x33, 
   0x42, 0x42, 0x55, 0x7A, 0xBE, 0x5A, 0x74, 0x96, 0x54, 0x61, 0x42, 0x0F, 0x39, 0x80, 0x37, 0x3F, 
   0xA9, 0x83, 0x7A, 0x81, 0x50, 0x7C, 0x5A, 0x34, 0x98, 0x89, 0x61, 0x3B, 0xB1, 0x4F, 0x12, 0x83, 
   0x2C, 0x7A, 0x7D, 0x37, 0xBA, 0xAE, 0x38, 0x47, 0x90, 0x45, 0x02, 0x39, 0x58, 0x6F, 0x62, 0x69, 
   0x88, 0x9E, 0x3C, 0x51, 0xCE, 0x48, 0x8A, 0x7F, 0x6A, 0x6D, 0x7E, 0x42, 0x11, 0x77, 0x46, 0x99, 
   0x72, 0x3A, 0x92, 0xB0, 0x35, 0x30, 0xAA, 0x6E, 0x3A, 0x64, 0x40, 0x51, 0x58, 0x1D, 0x42, 0x87, 
   0x35, 0x79, 0x89, 0x6A, 0x97, 0x8B, 0x5B, 0x43, 0x93, 0x55, 0x54, 0xB2, 0x5A, 0xAA, 0xB7, 0x42, 
   0x65, 0x92, 0x30, 0x3B, 0x7E, 0x4D, 0x7E, 0x44, 0x53, 0x62, 0x78, 0x44, 0x5C, 0xA3, 0x5C, 0x58, 
   0x73, 0x52, 0x76, 0xAE, 0x4D, 0x83, 0xCB, 0x6A, 0x67, 0x6F, 0x42, 0x55, 0x89, 0x32, 0x50, 0x72, 
   0x6C, 0x4B, 0x74, 0x72, 0x75, 0xC6, 0x71, 0xAE, 0xEE, 0x4D, 0x9A, 0x8F, 0x09, 0x00, 0x1A, 0x39, 
   0x44, 0x53, 0xD5, 0xAD, 0xB7, 0x2C, 0x60, 0xB1, 0x10, 0x4B, 0xD0, 0xA0, 0xA7, 0xA7, 0xBB, 0x9B, 
   0x94, 0x4B, 0x64, 0x95, 0x0D, 0x4F, 0x7A, 0x22, 0x3B, 0x45, 0x67, 0x6E, 0x73, 0x73, 0x6E, 0xB3, 
   0x2F, 0x62, 0xA9, 0x09, 0x35, 0x60, 0x8A, 0x4E, 0x7D, 0xAA, 0xB0, 0xD8, 0x97, 0x77, 0xAE, 0x42, 
   0x4E, 0x33, 0x00, 0x63, 0x60, 0x1C, 0x4C, 0xCE, 0x74, 0x47, 0x8B, 0x49, 0x98, 0x84, 0x77, 0x8D, 
   0x78, 0x5A, 0x38, 0x83, 0x3E, 0x5A, 0x78, 0x77, 0x82, 0x8B, 0x55, 0x72, 0x87, 0x38, 0x55, 0xC7, 
   0x55, 0x67, 0x9E, 0x77, 0x73, 0x5F, 0x59, 0x89, 0x86, 0x47, 0x5A, 0xA3, 0x2A, 0x42, 0x91, 0x2C, 
   0x53, 0x53, 0x7E, 0x8D, 0x8D, 0x85, 0x93, 0xB6, 0x61, 0x3C, 0xCC, 0x36, 0x52, 0x85, 0x13, 0x4E, 
   0x45, 0x48, 0x72, 0x6D, 0x6C, 0x95, 0xA8, 0x57, 0x6C, 0xA4, 0x63, 0x44, 0x77, 0x7E, 0x66, 0x83, 
   0x4A, 0x6C, 0xA0, 0x1C, 0x7E, 0xC1, 0x61, 0x6C, 0x6A, 0x7E, 0x55, 0x52, 0x57, 0x4A, 0x8C, 0x3A, 
   0x68, 0xBB, 0x62, 0xA0, 0xB4, 0x56, 0x5F, 0x74, 0x44, 0x0E, 0x46, 0x4B, 0x59, 0x9C, 0x73, 0xA4, 
   0xDC, 0x83, 0x92, 0xA1, 0x1F, 0x17, 0x4E, 0x03, 0x22, 0x52, 0x93, 0x80, 0xA3, 0x9B, 0x9F, 0x99, 
   0x2E, 0x76, 0x61, 0x2E, 0x25, 0x7F, 0x6E, 0x53, 0xA2, 0x8A, 0x8E, 0xB3, 0x56, 0x95, 0x80, 0x1C, 
   0x5B, 0x7F, 0x5A, 0x43, 0x95, 0x5B, 0x6A, 0x7E, 0x66, 0x80, 0x83, 0x7A, 0x51, 0xA5, 0x17, 0x4B, 
   0x8D, 0x1B, 0x40, 0x64, 0x5C, 0x7A, 0x5E, 0x64, 0x7B, 0x88, 0x65, 0x5A, 0xB1, 0x4E, 0x6B, 0x74, 
   0x48, 0x81, 0x79, 0x53, 0x42, 0xAC, 0x66, 0x83, 0x7A, 0x7C, 0xA4, 0x75, 0x41, 0x30, 0xBD, 0x22, 
   0x33, 0x72, 0x33, 0x6B, 0x32, 0x4B, 0x4F, 0x89, 0x4D, 0x23, 0x81, 0x5F, 0x4D, 0xAA, 0x8B, 0xB4, 
   0xBA, 0x55, 0x8F, 0x6C, 0x00, 0x03, 0x42, 0x1B, 0x02, 0x5E, 0xA6, 0x97, 0xA4, 0x73, 0x87, 0x9A, 
   0x17, 0x20, 0x88, 0x44, 0x47, 0x64, 0x66, 0x65, 0x47, 0x2E, 0x3E, 0x6B, 0x46, 0x40, 0x96, 0x6F, 
   0x8C, 0xB4, 0x5D, 0x81, 0xA9, 0x3A, 0x57, 0x74, 0x6C, 0x4F, 0x92, 0x2B, 0x21, 0x3B, 0x09, 0x49, 
   0x4E, 0x6C, 0xAB, 0xF3, 0x6E, 0x67, 0x65, 0x46, 0x2D, 0x2B, 0x6D, 0x5A, 0x92, 0x49, 0x71, 0xB5, 
   0x14, 0x5F, 0x96, 0x3C, 0x4D, 0x4F, 0x59, 0x62, 0x4E, 0x7B, 0x5B, 0xA4, 0x52, 0x4F, 0x7C, 0x06, 
   0x44, 0x70, 0x02, 0x51, 0x59, 0x92, 0x7F, 0x8D, 0x87, 0x73, 0x92, 0x13, 0x3F, 0x6A, 0x2E, 0x38, 
   0x4D, 0x55, 0x56, 0x77, 0x50, 0x6E, 0xBC, 0x28, 0x68, 0x82, 0x3B, 0x2A, 0x32, 0x6B, 0x42, 0x62, 
   0x71, 0x9F, 0xBB, 0x49, 0x7D, 0xAD, 0x2B, 0x20, 0x95, 0x57, 0x30, 0x39, 0x13, 0x4F, 0x72, 0x36, 
   0x8A, 0xC2, 0x5A, 0x79, 0x82, 0x5C, 0x3B, 0x27, 0x5D, 0x41, 0x79, 0x41, 0x91, 0xE8, 0x51, 0x69, 
   0xD0, 0x6D, 0x51, 0x0C, 0x43, 0x49, 0x3E, 0x04, 0x43, 0xC8, 0x6A, 0x70, 0xB7, 0x75, 0x6F, 0x4E, 
   0x03, 0x00, 0x0F, 0x1B, 0x45, 0x75, 0x94, 0xAE, 0xFF, 0x68, 0x6B, 0xB1, 0x40, 0x58, 0x3B, 0x60, 
   0x7E, 0x66, 0x31, 0x3D, 0x56, 0x0F, 0x04, 0x8C, 0x60, 0x61, 0xBA, 0x78, 0xB9, 0x81, 0x4F, 0x63, 
   0x37, 0x1B, 0x3A, 0x8F, 0x53, 0x60, 0xFC, 0x53, 0x4F, 0x93, 0x10, 0x44, 0x23, 0x77, 0x77, 0x4F, 
   0x66, 0x82, 0x8F, 0x22, 0x38, 0xBD, 0x45, 0x11, 0x56, 0x6E, 0x86, 0x30, 0x67, 0xC0, 0xCB, 0x1C, 
   0x6D, 0xDC, 0x32, 0x19, 0x34, 0x4F, 0x12, 0x33, 0x5B, 0x63, 0x90, 0x44, 0x6A, 0xBF, 0x3E, 0x54, 
   0x75, 0x38, 0x39, 0x62, 0x3F, 0x9F, 0x62, 0x6D, 0x65, 0xA2, 0x40, 0x00, 0x7B, 0x4B, 0x6B, 0x86, 
   0x50, 0x9A, 0x81, 0x34, 0x24, 0x5A, 0x4B, 0x3C, 0x90, 0x5C, 0x9D, 0x99, 0x40, 0x6A, 0x8B, 0x29, 
   0x25, 0xA2, 0x51, 0x53, 0xA1, 0x58, 0x98, 0x56, 0x52, 0x6F, 0x8F, 0x5D, 0x4B, 0xD3, 0x35, 0x3E, 
   0x56, 0x45, 0x49, 0x77, 0x45, 0x66, 0xD0, 0x45, 0x55, 0x6E, 0x45, 0x29, 0x13, 0x3A, 0x81, 0x98, 
   0x52, 0x8E, 0xDA, 0x64, 0x5A, 0x80, 0x58, 0x42, 0x63, 0x2F, 0x3D, 0xA2, 0x35, 0x61, 0x9C, 0x52, 
   0x7E, 0x75, 0x59, 0x83, 0x9C, 0x69, 0x41, 0xA7, 0x46, 0x50, 0x6E, 0x40, 0x49, 0x8B, 0x45, 0x50, 
   0xA7, 0x50, 0x5D, 0x90, 0x50, 0x64, 0x7F, 0x23, 0x61, 0x63, 0x5D, 0x6E, 0x93, 0x4E, 0x7A, 0xA1, 
   0x44, 0x63, 0x9E, 0x72, 0x41, 0xCB, 0x71, 0x7F, 0xBC, 0x4C, 0x79, 0x40, 0x27, 0x60, 0x4F, 0x31, 
   0x47, 0xB4, 0x42, 0x52, 0x6A, 0x4F, 0x6E, 0x6B, 0x6D, 0x63, 0xE9, 0x4A, 0x47, 0x77, 0x1C, 0x4C, 
   0x43, 0x4A, 0x58, 0xA3, 0x5B, 0x7A, 0xAA, 0x39, 0x3C, 0x50, 0x29, 0x3D, 0x5E, 0x63, 0x78, 0xEE, 
   0x8A, 0xAB, 0xF3, 0x3E, 0x6A, 0x5A, 0x08, 0x17, 0x33, 0x26, 0x17, 0x4A, 0x57, 0x5F, 0x70, 0x87, 
   0xAC, 0xF5, 0x6A, 0x96, 0xB1, 0x30, 0x40, 0x3E, 0x30, 0x39, 0x5C, 0x53, 0x78, 0xB3, 0x71, 0x8F, 
   0xD5, 0x5F, 0x44, 0x78, 0x37, 0x43, 0x54, 0x52, 0x76, 0x92, 0x72, 0x63, 0x7B, 0x21, 0x2F, 0x6A, 
   0x1C, 0x1A, 0x82, 0x4C, 0x68, 0x80, 0x60, 0xB0, 0x9B, 0x7F, 0x7F, 0xE2, 0x68, 0x51, 0xBF, 0x44, 
   0x8D, 0x76, 0x4D, 0x63, 0x2E, 0x3A, 0x28, 0x82, 0x34, 0x49, 0xB1, 0x1F, 0x3F, 0x5F, 0x19, 0x4D, 
   0x74, 0xA7, 0x8E, 0xCE, 0xE6, 0x7F, 0xDF, 0x16, 0x51, 0x81, 0x0D, 0x6C, 0x40, 0x5C, 0x61, 0x8E, 
   0x5E, 0x40, 0x84, 0x44, 0x8C, 0x70, 0x6F, 0x87, 0xD2, 0x87, 0x86, 0xCC, 0x7F, 0x99, 0x73, 0x2C, 
   0x19, 0x5F, 0x09, 0x09, 0x6F, 0x4F, 0x69, 0x72, 0x64, 0xBE, 0x6C, 0x7D, 0xAE, 0xE2, 0x88, 0x73, 
   0xFF, 0x5D, 0x4D, 0x8D, 0x32, 0x55, 0x10, 0x35, 0x6A, 0x4C, 0x4B, 0x59, 0xC6, 0x56, 0x7F, 0xC7, 
   0x3A, 0x45, 0x6B, 0x40, 0x34, 0x53, 0x4E, 0x58, 0x92, 0x79, 0x83, 0xB6, 0x91, 0x96, 0xBC, 0x61, 
   0x83, 0x97, 0x24, 0x4D, 0x50, 0x17, 0x2E, 0x44, 0x35, 0x35, 0xB1, 0x9D, 0x8C, 0xAE, 0x60, 0x7D, 
   0x8C, 0x1C, 0x55, 0x7A, 0x5B, 0x5B, 0x75, 0x90, 0x72, 0x98, 0x62, 0x72, 0xAF, 0x38, 0x5B, 0x7B, 
   0x3D, 0x55, 0x6A, 0x5F, 0x6C, 0x9D, 0x6A, 0x72, 0x8D, 0x2B, 0x66, 0x6B, 0x27, 0x44, 0x88, 0x84, 
   0x77, 0xAB, 0x90, 0x94, 0xA6, 0x39, 0x5F, 0x8E, 0x3E, 0x46, 0x8C, 0x70, 0x4C, 0x74, 0x4E, 0x4E, 
   0x74, 0x3E, 0x73, 0xA2, 0x4A, 0xAD, 0x91, 0x5C, 0x4B, 0x5F, 0x52, 0x33, 0x7D, 0x7F, 0x67, 0xA8, 
   0x6D, 0x95, 0xEC, 0x32, 0x6C, 0x83, 0x31, 0x32, 0x41, 0x4E, 0x60, 0x90, 0x5B, 0x83, 0x86, 0x51, 
   0x61, 0x82, 0x58, 0x3F, 0x88, 0x74, 0x95, 0xB0, 0x63, 0x83, 0x98, 0x56, 0x38, 0x63, 0x49, 0x64, 
   0xA1, 0x3D, 0x63, 0x9A, 0x48, 0x4B, 0x6B, 0x3D, 0x35, 0x65, 0x5A, 0x70, 0x93, 0x78, 0x98, 0x99, 
   0x45, 0x5F, 0x7E, 0x57, 0x26, 0x6E, 0x6E, 0x71, 0x9D, 0x67, 0x94, 0xE1, 0x4F, 0x66, 0x7F, 0x33, 
   0x3D, 0x18, 0x40, 0x44, 0x9C, 0x9C, 0xB0, 0xED, 0x9A, 0x8C, 0x96, 0x29, 0x0C, 0x59, 0x0A, 0x3F, 
   0x5C, 0x38, 0x95, 0x7A, 0x78, 0x64, 0xA4, 0x53, 0x43, 0x9B, 0x43, 0x7D, 0x91, 0x7C, 0x7D, 0xA8, 
   0x5F, 0x5A, 0x9C, 0x25, 0x53, 0x5D, 0x44, 0x43, 0x31, 0x3F, 0x27, 0x00, 0x40, 0x6E, 0x8E, 0x58, 
   0x93, 0xF5, 0x5E, 0x8E, 0xBD, 0x59, 0x64, 0x6B, 0x4D, 0x40, 0x62, 0x5C, 0x45, 0x51, 0x28, 0x56, 
   0x84, 0x28, 0x79, 0xB1, 0x78, 0x95, 0x5B, 0x61, 0x43, 0x3D, 0x16, 0x09, 0x8D, 0x33, 0x70, 0xB6, 
   0x78, 0x97, 0x7C, 0x5B, 0x1F, 0x4D, 0x00, 0x0E, 0x43, 0x5D, 0x5C, 0x96, 0x93, 0x9E, 0xD1, 0x5F, 
   0x84, 0x65, 0x2F, 0x93, 0x6A, 0x4F, 0x68, 0xCD, 0x49, 0x00, 0x4D, 0x20, 0x4F, 0x1F, 0x49, 0x94, 
   0xC5, 0x50, 0x50, 0xAB, 0x51, 0x4A, 0x6B, 0x57, 0x72, 0x86, 0x5B, 0x66, 0x74, 0x3D, 0x2D, 0x69, 
   0x25, 0x81, 0xA1, 0x41, 0x9C, 0x83, 0x6A, 0x1D, 0x27, 0x3D, 0x33, 0x77, 0x4D, 0x7D, 0xD2, 0x3C, 
   0x45, 0x49, 0x36, 0x51, 0x48, 0x6A, 0x5D, 0x98, 0x5E, 0x68, 0x70, 0x1E, 0x4B, 0x6A, 0x51, 0x3F, 
   0x7A, 0x6C, 0x61, 0x75, 0x16, 0x5B, 0x5F, 0x00, 0x29, 0x5A, 0x47, 0x4D, 0x8F, 0xAA, 0x88, 0x9C, 
   0x55, 0x82, 0x87, 0x1A, 0x37, 0x7C, 0x4B, 0x46, 0x65, 0x2F, 0x63, 0x8C, 0x3B, 0x37, 0x87, 0x3D, 
   0x3F, 0x49, 0x45, 0x8C, 0x73, 0x6F, 0x7C, 0xD4, 0x64, 0x70, 0x74, 0x41, 0x69, 0x5D, 0x4B, 0x4A, 
   0x80, 0x65, 0x54, 0xB2, 0x14, 0x43, 0x8D, 0x20, 0x4F, 0x24, 0x78, 0x77, 0x5D, 0x9A, 0x87, 0xCB, 
   0x3C, 0x50, 0x7C, 0x00, 0x00, 0x3E, 0x00, 0x2C, 0x75, 0x73, 0xD6, 0xD8, 0xC5, 0x9A, 0xCB, 0x5C, 
   0x53, 0x4A, 0x00, 0x49, 0x31, 0x0C, 0x3C, 0x82, 0x3C, 0x32, 0x96, 0x7D, 0x6E, 0x70, 0x6E, 0xA3, 
   0x62, 0x5B, 0x5E, 0xCA, 0x27, 0x3A, 0xB8, 0x32, 0x66, 0x6B, 0x81, 0x54, 0x61, 0x26, 0x32, 0x76, 
   0x15, 0x66, 0x71, 0x61, 0x82, 0x61, 0x7E, 0x32, 0x9B, 0x39, 0x33, 0x90, 0x28, 0x79, 0x5E, 0x6C, 
   0x8B, 0xA2, 0x4F, 0x67, 0x90, 0x1D, 0x16, 0x36, 0x4C, 0x60, 0x77, 0xA7, 0xB0, 0xFF, 0x4A, 0x65, 
   0xB2, 0x00, 0x29, 0x00, 0x3D, 0x01, 0x2B, 0x6D, 0x5A, 0xA6, 0x6E, 0xC3, 0xC6, 0x35, 0x52, 0x4F, 
   0x40, 0x29, 0x67, 0x5C, 0x7F, 0xC9, 0x57, 0x8B, 0x7A, 0x35, 0x30, 0x3C, 0x5C, 0x41, 0x89, 0x50, 
   0x9C, 0xB9, 0x29, 0x63, 0xBE, 0x46, 0x14, 0x78, 0x75, 0x76, 0x60, 0x65, 0xAF, 0x94, 0x4D, 0x62, 
   0xB6, 0x35, 0x26, 0x6B, 0x4B, 0x1B, 0x6B, 0x4B, 0x7F, 0xBB, 0x3A, 0x9D, 0x8D, 0x3B, 0x3E, 0x3D, 
   0x75, 0x55, 0x7D, 0x59, 0x83, 0xBD, 0x3B, 0x61, 0x8C, 0x4C, 0x55, 0x7B, 0x52, 0x5B, 0xA3, 0x4E, 
   0x62, 0x91, 0x65, 0x94, 0x58, 0x47, 0x5F, 0x7B, 0x51, 0x3B, 0xB5, 0x4B, 0x72, 0xAF, 0x4A, 0x4F, 
   0x78, 0x22, 0x11, 0x3D, 0x57, 0x5F, 0x45, 0x74, 0xB7, 0xA9, 0x2C, 0x58, 0xC3, 0x44, 0x36, 0x75, 
   0x89, 0x7B, 0xBF, 0x5B, 0x92, 0xD3, 0x42, 0x58, 0x2A, 0x50, 0x5B, 0x4A, 0x49, 0x70, 0xDD, 0x36, 
   0x4C, 0x82, 0x1F, 0x4B, 0x60, 0x3E, 0x30, 0x89, 0x6E, 0x6B, 0xB2, 0x74, 0x9A, 0xB2, 0x5C, 0x6C, 
   0x67, 0x1D, 0x5E, 0x4F, 0x3F, 0x2F, 0x99, 0x5C, 0x1F, 0x79, 0x36, 0x7E, 0x92, 0x5E, 0xDB, 0xBC, 
   0x86, 0x7E, 0xCB, 0x5B, 0x08, 0x7D, 0x14, 0x3A, 0x0E, 0x1A, 0x74, 0x8C, 0x55, 0x4E, 0xDD, 0x63, 
   0x61, 0x7D, 0x6F, 0x94, 0x5F, 0x41, 0x45, 0x7D, 0x36, 0x62, 0x9C, 0x48, 0x8F, 0xC6, 0x6C, 0x2E, 
   0x9D, 0x51, 0x51, 0x62, 0x7D, 0x91, 0x6C, 0x4D, 0x8A, 0x94, 0x17, 0x65, 0x9F, 0x60, 0x3B, 0x8D, 
   0x43, 0x19, 0x55, 0x17, 0x4A, 0x8B, 0x59, 0x8D, 0xBC, 0x68, 0xB2, 0xA8, 0x63, 0x62, 0xB8, 0x6D, 
   0x60, 0x7D, 0x43, 0x6F, 0x6F, 0x45, 0x56, 0x8A, 0x0B, 0x2D, 0x57, 0x03, 0x62, 0x55, 0x6A, 0x75, 
   0xC5, 0xA8, 0x6C, 0xC3, 0x81, 0x79, 0x90, 0x6D, 0x79, 0xBC, 0x35, 0x46, 0xAE, 0x10, 0x6E, 0x57, 
   0x1C, 0x80, 0x94, 0x54, 0x58, 0x90, 0x65, 0x58, 0x65, 0xA1, 0x7A, 0xB7, 0xC6, 0x9A, 0xFF, 0x38, 
   0x4D, 0x90, 0x00, 0x00, 0x13, 0x4D, 0x61, 0x36, 0xB6, 0xCC, 0x91, 0x4C, 0x73, 0xD4, 0x24, 0x78, 
   0xDC, 0x80, 0x70, 0xA7, 0x80, 0x52, 0x82, 0x6D, 0x67, 0x7A, 0x31, 0x7C, 0xAB, 0x19, 0x47, 0x7D, 
   0x62, 0x68, 0x8E, 0x6D, 0x6E, 0x98, 0x1D, 0x3B, 0x7A, 0x02, 0x5A, 0x64, 0x60, 0x84, 0xA5, 0x95, 
   0xA6, 0xD3, 0x72, 0x44, 0xA3, 0x37, 0x4D, 0x2E, 0x52, 0x79, 0x50, 0x35, 0x3B, 0xAE, 0x42, 0x54, 
   0xAA, 0x6C, 0xB7, 0x8F, 0x62, 0x68, 0x94, 0x46, 0x45, 0x9E, 0x6E, 0x55, 0x8C, 0x7D, 0x72, 0x63, 
   0x3D, 0x72, 0x75, 0x2A, 0x66, 0xA4, 0x31, 0x44, 0x9A, 0x61, 0x5C, 0x5C, 0x7F, 0xA1, 0x9C, 0x85, 
   0x78, 0xC4, 0x44, 0x49, 0xAC, 0x37, 0x64, 0x7B, 0x54, 0x58, 0x40, 0x44, 0x42, 0x80, 0x7E, 0x76, 
   0xD1, 0x6E, 0x83, 0x92, 0x1E, 0x52, 0x6A, 0x51, 0x80, 0x5A, 0x8A, 0x80, 0x9C, 0x2F, 0x62, 0xE1, 
   0x6D, 0x6C, 0x85, 0x82, 0x66, 0x6C, 0x1A, 0x4F, 0x92, 0x1F, 0x6C, 0x8D, 0x5A, 0x7E, 0x92, 0x85, 
   0x67, 0x82, 0x59, 0x3F, 0x94, 0x4E, 0x63, 0xAC, 0x91, 0xD5, 0xCD, 0x61, 0x83, 0x8B, 0x14, 0x0E, 
   0x2D, 0x20, 0x3A, 0x7D, 0x7D, 0x7B, 0xC8, 0x9F, 0x93, 0xAC, 0x15, 0x75, 0x55, 0x15, 0x0E, 0x5B, 
   0x8F, 0x5A, 0x9B, 0x7F, 0xBC, 0xAE, 0x50, 0x67, 0xA2, 0x27, 0x4E, 0x5D, 0x33, 0x3C, 0x84, 0x73, 
   0x60, 0x97, 0x6F, 0xA0, 0x7C, 0x73, 0x72, 0xC0, 0x5F, 0x4E, 0xC3, 0x12, 0x68, 0x4D, 0x55, 0x5C, 
   0x34, 0x7D, 0x57, 0x7F, 0x23, 0x64, 0xAB, 0x4C, 0x66, 0x9C, 0x76, 0x8E, 0x81, 0x60, 0x60, 0x9D, 
   0x6A, 0x54, 0xB3, 0x1A, 0x71, 0x47, 0x24, 0x12, 0x40, 0x03, 0x00, 0x14, 0x56, 0x7F, 0x43, 0x76, 
   0xBD, 0xE4, 0x67, 0x6F, 0xFF, 0x60, 0x79, 0x9C, 0x63, 0x98, 0x4C, 0x21, 0x3E, 0x5A, 0x00, 0x00, 
   0x54, 0x4B, 0x4A, 0x84, 0xA8, 0xB3, 0xD5, 0x73, 0x96, 0xA6, 0x05, 0x10, 0x3D, 0x1B, 0x3C, 0x69, 
   0x77, 0x80, 0x75, 0x45, 0x53, 0x55, 0x2A, 0x22, 0x96, 0x53, 0x63, 0xA3, 0x71, 0x8E, 0x6B, 0x6A, 
   0x83, 0x9D, 0x40, 0x5F, 0xA6, 0x2C, 0x40, 0x38, 0x2C, 0x51, 0x47, 0x4F, 0x8F, 0xC4, 0x72, 0x55, 
   0x6A, 0x45, 0x10, 0x43, 0x4B, 0x7D, 0xC0, 0x61, 0x7E, 0x92, 0x3E, 0x45, 0x46, 0x37, 0x81, 0x67, 
   0x64, 0x58, 0x67, 0x36, 0x2E, 0x7E, 0x2A, 0x4F, 0xB1, 0x41, 0x44, 0x55, 0x3E, 0x45, 0x49, 0x78, 
   0x73, 0xA9, 0x8D, 0x63, 0x82, 0x00, 0x51, 0x4E, 0x01, 0x4C, 0x81, 0x84, 0x68, 0x86, 0x5D, 0x79, 
   0x80, 0x28, 0x3F, 0x5D, 0x33, 0x2D, 0x3C, 0x4B, 0x40, 0x7D, 0x63, 0x8C, 0xAC, 0x48, 0x8D, 0x79, 
   0x58, 0x31, 0x67, 0x57, 0x41, 0x62, 0x29, 0x63, 0x6E, 0x29, 0x4D, 0x96, 0x4D, 0x59, 0x5E, 0x44, 
   0x50, 0x4F, 0x6E, 0x4D, 0xA1, 0x52, 0xB0, 0xBE, 0x4D, 0x8D, 0x95, 0x68, 0x2F, 0x11, 0x55, 0x3D, 
   0x62, 0x0F, 0x48, 0xFF, 0x2B, 0x4F, 0xA4, 0x77, 0x77, 0x06, 0x50, 0x7D, 0x27, 0x3F, 0x4E, 0x8B, 
   0x91, 0x67, 0xCC, 0x06, 0x27, 0x6A, 0x00, 0x00, 0x04, 0x65, 0x6C, 0xAC, 0x9C, 0xCB, 0xDC, 0x6E, 
   0x65, 0x90, 0x32, 0x40, 0x5F, 0x29, 0x66, 0x4D, 0x2F, 0x3D, 0x39, 0x20, 0x39, 0x93, 0x89, 0x6E, 
   0xFF, 0x68, 0xA8, 0x96, 0x40, 0x5E, 0x4A, 0x55, 0x3A, 0x86, 0x42, 0x66, 0xAD, 0x1A, 0x5A, 0x72, 
   0x3D, 0x32, 0x43, 0x6C, 0x7D, 0x5B, 0x66, 0x88, 0xB2, 0x21, 0x31, 0xB8, 0x3E, 0x0F, 0x61, 0x5B, 
   0x78, 0x12, 0x40, 0x92, 0x8D, 0x4C, 0x8D, 0xEB, 0x68, 0x4C, 0xA0, 0x51, 0x44, 0x53, 0x5B, 0x7F, 
   0x7D, 0x32, 0x22, 0x7B, 0x26, 0x00, 0x42, 0x43, 0x5F, 0x5B, 0x67, 0xBE, 0x9D, 0x63, 0x86, 0x90, 
   0x41, 0x2A, 0xB4, 0x51, 0x6D, 0x92, 0x51, 0x6D, 0x80, 0x51, 0x24, 0x75, 0x51, 0x74, 0x93, 0x40, 
   0x6E, 0xA0, 0x45, 0x4C, 0x84, 0x3A, 0x58, 0xBC, 0x4D, 0x54, 0x6B, 0x65, 0x82, 0x4E, 0x65, 0x7A, 
   0xA3, 0x4D, 0x23, 0x8D, 0x35, 0x2E, 0x45, 0x35, 0x63, 0xA2, 0x58, 0x7C, 0xF2, 0x5E, 0x6C, 0x7E, 
   0x59, 0x2D, 0x1B, 0x47, 0x56, 0x6C, 0x41, 0x9B, 0xD0, 0x36, 0x57, 0xA4, 0x53, 0x67, 0x6B, 0x5F, 
   0x61, 0x98, 0x6A, 0x55, 0x87, 0x36, 0x65, 0x7D, 0x3A, 0x8C, 0xCD, 0x5B, 0x46, 0xC6, 0x28, 0x39, 
   0x56, 0x3F, 0x45, 0x3E, 0x4C, 0x64, 0x8B, 0x4E, 0x67, 0xB1, 0x5B, 0x7A, 0x9D, 0x61, 0x59, 0xCF, 
   0x55, 0x65, 0xA5, 0x59, 0x92, 0x36, 0x3A, 0x6E, 0x5D, 0x2D, 0x33, 0xD3, 0x60, 0x5F, 0x6C, 0x4E, 
   0x5E, 0x55, 0x1B, 0x47, 0xD3, 0x49, 0x48, 0x8A, 0x4B, 0x56, 0x30, 0x6F, 0x85, 0xA3, 0x69, 0xAB, 
   0xE7, 0x51, 0x42, 0x4C, 0x18, 0x03, 0x35, 0x4D, 0x60, 0xC5, 0x92, 0xAC, 0xC0, 0x47, 0x6E, 0x6F, 
   0x35, 0x4F, 0x57, 0x4B, 0x3D, 0x80, 0x61, 0x65, 0xC5, 0x49, 0x6C, 0xB9, 0x20, 0x82, 0x7D, 0x37, 
   0x36, 0x58, 0x44, 0x00, 0x42, 0x4C, 0x9F, 0xA0, 0x64, 0xA0, 0xD0, 0x38, 0x23, 0x81, 0x3F, 0x3A, 
   0x6A, 0x8A, 0x92, 0xA3, 0x67, 0x93, 0xA8, 0x3C, 0x69, 0x74, 0x29, 0x4B, 0x83, 0x44, 0x5A, 0x7E, 
   0x4A, 0x70, 0x8F, 0x3F, 0x3E, 0x84, 0x24, 0x2F, 0x85, 0x66, 0x88, 0x98, 0x79, 0xA0, 0x72, 0x6E, 
   0x55, 0xB3, 0x55, 0x4E, 0xE5, 0x25, 0x6F, 0x4A, 0x00, 0x52, 0x4A, 0x73, 0x64, 0xBE, 0x92, 0x70, 
   0xB5, 0x3F, 0x49, 0x82, 0x40, 0x73, 0x8E, 0xA0, 0x85, 0xB1, 0x87, 0x53, 0xC2, 0x12, 0x7B, 0x92, 
   0x00, 0x81, 0x57, 0x42, 0x5E, 0x84, 0x86, 0x62, 0x6F, 0xA4, 0x7E, 0x7D, 0x43, 0x3F, 0xEA, 0x4C, 
   0x56, 0xC6, 0x7C, 0xB7, 0x40, 0x3C, 0x45, 0x66, 0x19, 0x2E, 0xB6, 0x63, 0x7F, 0x79, 0x2D, 0x6B, 
   0x38, 0x64, 0x8E, 0xBF, 0xAA, 0x87, 0xFF, 0x81, 0x69, 0xB3, 0x2F, 0x55, 0x2B, 0x60, 0x4E, 0x5B, 
   0x53, 0x53, 0xCD, 0x4B, 0x75, 0xB5, 0x5B, 0x64, 0x63, 0x22, 0x3C, 0x5D, 0x19, 0x76, 0x81, 0x72, 
   0x56, 0xAB, 0x8C, 0xA6, 0xD9, 0x9C, 0x94, 0xA4, 0x37, 0x2B, 0x2A, 0x00, 0x35, 0x7A, 0x5E, 0x64, 
   0x94, 0x88, 0x67, 0xB9, 0x57, 0x96, 0xCF, 0x57, 0x74, 0x71, 0x62, 0x56, 0x4D, 0x5B, 0x67, 0x97, 
   0x6B, 0x77, 0x9D, 0x2B, 0x44, 0x6C, 0x21, 0x55, 0x96, 0x85, 0x84, 0xDC, 0xA8, 0x90, 0x98, 0x45, 
   0x61, 0x86, 0x1B, 0x5F, 0xB1, 0x53, 0x37, 0x7B, 0x49, 0x5F, 0x5E, 0x56, 0x88, 0xA3, 0x52, 0x66, 
   0xA4, 0x87, 0x44, 0x87, 0x70, 0x5C, 0x5B, 0x52, 0x86, 0xB3, 0x3A, 0xAF, 0xDB, 0x61, 0x6E, 0x6E, 
   0x4A, 0x1C, 0x61, 0x55, 0x54, 0x9A, 0x6B, 0x77, 0xAB, 0x37, 0x83, 0x94, 0x2C, 0x45, 0x77, 0x62, 
   0x5C, 0x7C, 0x7B, 0x84, 0x94, 0x7B, 0x74, 0x9B, 0x4C, 0x4C, 0xB6, 0x4F, 0x95, 0xA2, 0x1C, 0x71, 
   0x44, 0x5B, 0x04, 0x60, 0x79, 0x88, 0xA1, 0x67, 0xB6, 0xB3, 0x43, 0x43, 0x8B, 0x15, 0x25, 0x57, 
   0x55, 0x6B, 0xA2, 0x9F, 0xA6, 0xC4, 0x4F, 0x89, 0x73, 0x21, 0x15, 0x50, 0x4B, 0x37, 0x69, 0x80, 
   0xB6, 0xE3, 0x9C, 0x8E, 0xC7, 0x49, 0x3D, 0x5E, 0x00, 0x4E, 0x72, 0x79, 0x92, 0xA3, 0x79, 0x7A, 
   0x7B, 0x23, 0x0D, 0x59, 0x33, 0x5E, 0x82, 0x62, 0xAA, 0xAD, 0x5E, 0x60, 0xAE, 0x58, 0x4F, 0x80, 
   0x26, 0x5B, 0x7A, 0x81, 0x89, 0xB3, 0x30, 0x60, 0x7F, 0x1A, 0x60, 0x7A, 0x34, 0x29, 0x70, 0x76, 
   0x65, 0x47, 0x78, 0x8A, 0xB2, 0x88, 0x7F, 0xEC, 0x2F, 0x7C, 0x82, 0x11, 0x3A, 0x50, 0x44, 0x16, 
   0x43, 0x79, 0x44, 0x61, 0x4C, 0x62, 0xB9, 0x35, 0x8C, 0xC4, 0x72, 0xA7, 0x6B, 0x43, 0x27, 0x00, 
   0x00, 0x00, 0x3E, 0x57, 0x72, 0xCA, 0x9E, 0xAE, 0xB0, 0x5F, 0x70, 0x65, 0x25, 0x48, 0x6F, 0x5D, 
   0x6E, 0xBD, 0x6D, 0x3B, 0x6C, 0x11, 0x3C, 0x49, 0x44, 0xA8, 0xA3, 0x67, 0x63, 0x87, 0x40, 0x23, 
   0x5E, 0x5B, 0x76, 0x7A, 0x4F, 0x44, 0x6F, 0x2C, 0x45, 0x86, 0x3D, 0x9F, 0x91, 0x4E, 0x64, 0x79, 
   0x60, 0x34, 0x5B, 0x64, 0x28, 0x84, 0x2A, 0x6D, 0xB2, 0x14, 0x73, 0x83, 0x6C, 0x4C, 0x32, 0x89, 
   0x4C, 0x6B, 0x3E, 0x6E, 0xB5, 0x3B, 0x3A, 0x82, 0x1D, 0x51, 0x5F, 0x51, 0x5D, 0x80, 0x56, 0x68, 
   0x74, 0x12, 0x45, 0x4C, 0x47, 0x45, 0x6B, 0x91, 0x6E, 0xC2, 0x3B, 0x69, 0x84, 0x11, 0x47, 0x55, 
   0x39, 0x5D, 0x60, 0x56, 0x5D, 0x6C, 0x52, 0x4D, 0x7D, 0x31, 0x64, 0x51, 0x4F, 0x43, 0x70, 0x62, 
   0x6C, 0xB6, 0x57, 0x62, 0xA0, 0x35, 0x63, 0x55, 0x57, 0x6E, 0x61, 0x78, 0x61, 0xAC, 0x27, 0x49, 
   0xA0, 0x1B, 0x49, 0x44, 0x60, 0x7D, 0x92, 0x66, 0x66, 0xAC, 0x55, 0x4E, 0x2E, 0x42, 0x58, 0x5C, 
   0x26, 0x3B, 0x97, 0x64, 0x8A, 0xA3, 0x75, 0x67, 0x85, 0x13, 0x00, 0x08, 0x03, 0x44, 0x76, 0x71, 
   0xD0, 0xEA, 0xAB, 0x70, 0xA0, 0x49, 0x52, 0x16, 0x13, 0x5B, 0x50, 0x24, 0x3D, 0xBF, 0x32, 0x22, 
   0x9F, 0x57, 0x57, 0x82, 0x9C, 0xAE, 0x6A, 0x4B, 0x5E, 0x7A, 0x05, 0x3A, 0xA2, 0x54, 0x66, 0x7F, 
   0x6B, 0x5A, 0x61, 0x37, 0x3D, 0x8E, 0x26, 0x7C, 0x8E, 0x59, 0x75, 0x50, 0x55, 0x19, 0x83, 0x29, 
   0x0B, 0x5E, 0x5D, 0x92, 0x6D, 0x96, 0xD9, 0xF1, 0x40, 0x87, 0xD8, 0x06, 0x1B, 0x12, 0x50, 0x18, 
   0x1B, 0x8F, 0x63, 0xBB, 0x3E, 0x7B, 0xB0, 0x0F, 0x48, 0x33, 0x27, 0x11, 0x3C, 0x79, 0x8B, 0xD9, 
   0x7A, 0xC4, 0xCB, 0x2A, 0x07, 0x48, 0x3A, 0x1D, 0x81, 0x57, 0xA6, 0xC5, 0x4C, 0x79, 0x69, 0x46, 
   0x0D, 0x6F, 0x68, 0x52, 0x81, 0x3A, 0x9D, 0x8E, 0x35, 0x5F, 0xC1, 0x4D, 0x48, 0x75, 0x65, 0x4E, 
   0x3C, 0x65, 0x82, 0x94, 0x37, 0x6B, 0xC9, 0x42, 0x37, 0x7B, 0x59, 0x38, 0x82, 0x64, 0x84, 0xB4, 
   0x2B, 0x73, 0x7F, 0x52, 0x45, 0x45, 0x47, 0x5C, 0x7F, 0x4E, 0x8A, 0xBF, 0x5F, 0x79, 0x9E, 0x4E, 
   0x5A, 0x61, 0x42, 0x32, 0x9B, 0x58, 0x70, 0xC2, 0x57, 0x70, 0x77, 0x2E, 0x4D, 0x75, 0x4B, 0x41, 
   0x7A, 0x51, 0x5E, 0x92, 0x30, 0x5F, 0xA5, 0x38, 0x33, 0x73, 0x89, 0x68, 0xB7, 0x83, 0xA9, 0xC6, 
   0x43, 0x70, 0x41, 0x2F, 0x46, 0x5E, 0x61, 0x67, 0xF7, 0x38, 0x66, 0x90, 0x2D, 0x49, 0x3A, 0x4B, 
   0x54, 0x89, 0x72, 0x5A, 0xA1, 0x33, 0x67, 0x75, 0x21, 0x85, 0x98, 0x50, 0x62, 0x82, 0x52, 0x44, 
   0x83, 0x53, 0x39, 0xE4, 0x4E, 0x73, 0x7E, 0x48, 0x90, 0x6C, 0x5E, 0x66, 0xB3, 0x5C, 0x20, 0x68, 
   0x12, 0x49, 0x35, 0x3A, 0x84, 0xA5, 0x85, 0x91, 0xFF, 0x67, 0x6E, 0xBB, 0x37, 0x77, 0x39, 0x08, 
   0x26, 0x42, 0x2B, 0x53, 0x9E, 0x6D, 0x70, 0xA0, 0x4E, 0x44, 0x8A, 0x5B, 0x63, 0x7F, 0x67, 0x70, 
   0x86, 0x50, 0x81, 0x9A, 0x49, 0x70, 0xB1, 0x5A, 0x47, 0x92, 0x64, 0x7A, 0x47, 0x2A, 0x7A, 0x8B, 
   0x40, 0x68, 0xCF, 0x5C, 0x50, 0x83, 0x2F, 0x4A, 0x54, 0x30, 0x40, 0x45, 0x54, 0x6A, 0x76, 0x73, 
   0x99, 0xDA, 0x5D, 0x50, 0xAA, 0x25, 0x50, 0x77, 0x76, 0x99, 0xB0, 0x87, 0x66, 0xAA, 0x36, 0x43, 
   0x7B, 0x35, 0x6A, 0x6F, 0x5E, 0x50, 0x9D, 0x49, 0x69, 0x88, 0x66, 0x92, 0x9A, 0x7D, 0x7C, 0xCD, 
   0x33, 0x54, 0x81, 0x3E, 0x85, 0x53, 0x77, 0x6C, 0xB9, 0x3F, 0x22, 0xA2, 0x2A, 0x46, 0x3D, 0x8C, 
   0x92, 0xB1, 0xB3, 0xC6, 0xF1, 0x4D, 0x83, 0xD1, 0x00, 0x00, 0x55, 0x11, 0x20, 0x14, 0x8C, 0x95, 
   0x6D, 0x5C, 0x7C, 0x9C, 0x42, 0x88, 0xFF, 0x66, 0x76, 0xEB, 0x9F, 0x52, 0x6E, 0x69, 0x61, 0x69, 
   0x49, 0x72, 0x94, 0x24, 0x5B, 0x7C, 0x45, 0x7C, 0x8C, 0x67, 0x64, 0x90, 0x2F, 0x25, 0x69, 0x27, 
   0x5A, 0x70, 0xB3, 0x95, 0x8A, 0x8C, 0x8A, 0xE6, 0x4C, 0x60, 0xC8, 0x54, 0x5E, 0x28, 0x3C, 0x52, 
   0x6D, 0x37, 0x43, 0xF1, 0x83, 0x73, 0xAD, 0x6D, 0xA2, 0x67, 0x4A, 0x6E, 0x93, 0x43, 0x5C, 0x87, 
   0x4F, 0x50, 0x82, 0x4B, 0x67, 0x67, 0x73, 0x73, 0x97, 0x6E, 0x73, 0xBB, 0x40, 0x61, 0xAF, 0x4F, 
   0x5B, 0x8A, 0x54, 0x60, 0x4F, 0x32, 0x50, 0x7C, 0x5A, 0x7E, 0xBB, 0x67, 0x7E, 0x87, 0x52, 0x5B, 
   0x5F, 0x5F, 0x49, 0x66, 0x93, 0x50, 0xBF, 0x6A, 0x79, 0xD7, 0x35, 0x6F, 0x91, 0x55, 0x7A, 0x56, 
   0x43, 0x68, 0x7D, 0x2D, 0x4A, 0xA0, 0x67, 0x77, 0x85, 0x8F, 0x67, 0xA7, 0x2D, 0x5C, 0x89, 0x28, 
   0x68, 0x83, 0x84, 0x79, 0x9A, 0x79, 0x6D, 0x8E, 0x34, 0x50, 0x7B, 0x23, 0x3F, 0x75, 0x96, 0x80, 
   0xB2, 0x8B, 0x9C, 0x84, 0x3A, 0x4A, 0x46, 0x29, 0x3D, 0x91, 0x7E, 0x66, 0xB0, 0x9F, 0x94, 0xBB, 
   0x2B, 0x60, 0x80, 0x0E, 0x49, 0x5C, 0x5F, 0x7D, 0x72, 0x62, 0x72, 0x8A, 0x69, 0x60, 0x86, 0x85, 
   0x65, 0xBB, 0x55, 0x42, 0xBF, 0x14, 0x53, 0x73, 0x4C, 0x87, 0x49, 0x75, 0x6A, 0x94, 0x58, 0x4E, 
   0xCE, 0x35, 0x70, 0x7E, 0x51, 0x70, 0x3E, 0x61, 0x59, 0x99, 0x45, 0x59, 0xB7, 0x3B, 0x66, 0x68, 
   0x59, 0x78, 0x63, 0x83, 0x68, 0xCA, 0x4B, 0x7C, 0xA2, 0x4B, 0x98, 0xBD, 0x2F, 0x35, 0x60, 0x47, 
   0x08, 0x3D, 0x7B, 0x8D, 0x46, 0x47, 0xA5, 0xB5, 0x24, 0x2D, 0xC1, 0x58, 0x49, 0x76, 0x7A, 0xA8, 
   0x62, 0x40, 0x51, 0x94, 0x00, 0x0B, 0x55, 0x4B, 0x51, 0x7E, 0x7F, 0xAF, 0x90, 0x46, 0x7B, 0x86, 
   0x1E, 0x13, 0x82, 0x36, 0x47, 0xA5, 0x87, 0x92, 0x8F, 0x59, 0x7B, 0x8E, 0x35, 0x51, 0xA6, 0x39, 
   0x17, 0x38, 0x34, 0x46, 0x49, 0x5C, 0xA3, 0xEF, 0x63, 0x6B, 0x77, 0x4C, 0x4D, 0x43, 0x5B, 0x84, 
   0xA8, 0x38, 0x4A, 0x7F, 0x49, 0x39, 0x40, 0x3D, 0x93, 0x79, 0x48, 0x69, 0xB8, 0x59, 0x29, 0x7F, 
   0x4E, 0x39, 0x5B, 0x37, 0x6D, 0x7C, 0x3D, 0x4C, 0x61, 0x49, 0x5D, 0x8F, 0x5A, 0x7A, 0xA5, 0x49, 
   0x41, 0x4E, 0x37, 0x51, 0x64, 0x64, 0x57, 0x98, 0x74, 0x63, 0x81, 0x18, 0x63, 0x4C, 0x12, 0x41, 
   0x52, 0x5E, 0x5D, 0x7B, 0x76, 0x7A, 0xA5, 0x4D, 0x4C, 0x78, 0x3A, 0x40, 0x5A, 0x3D, 0x40, 0x6B, 
   0x0F, 0x57, 0x7C, 0x22, 0x5D, 0x8E, 0x63, 0x69, 0x56, 0x4A, 0x4E, 0x63, 0x5C, 0x54, 0xA9, 0x62, 
   0x77, 0x93, 0x2E, 0x60, 0x75, 0x61, 0x2D, 0x37, 0x5A, 0x44, 0x83, 0x10, 0x6C, 0xDF, 0x3E, 0x5C, 
   0x88, 0x7D, 0x61, 0x2A, 0x5B, 0x60, 0x4C, 0x27, 0x59, 0xA9, 0x5E, 0x46, 0xCB, 0x25, 0x41, 0x41, 
   0x15, 0x69, 0x40, 0x83, 0x6A, 0xBE, 0x99, 0x6F, 0xA1, 0x29, 0x50, 0x44, 0x00, 0x00, 0x2D, 0x29, 
   0x4F, 0x74, 0x7C, 0xD0, 0xB1, 0x72, 0x6B, 0xA8, 0x60, 0x52, 0x9C, 0x1F, 0x5B, 0x6D, 0x1A, 0x54, 
   0x4A, 0x65, 0x39, 0x78, 0x67, 0x52, 0xB8, 0x51, 0xA8, 0x74, 0x57, 0x5E, 0x52, 0x50, 0x3A, 0x91, 
   0x49, 0x71, 0xB3, 0x36, 0x42, 0x7E, 0x25, 0x30, 0x43, 0x48, 0x7B, 0x5A, 0x4A, 0x5F, 0x69, 0x57, 
   0x3E, 0xD3, 0x6E, 0x46, 0xC8, 0x40, 0x81, 0x43, 0x39, 0xC5, 0x7A, 0x3F, 0x4A, 0xB2, 0x4B, 0x00, 
   0x5D, 0x57, 0x6B, 0x68, 0x72, 0xAB, 0x9B, 0x27, 0x49, 0x80, 0x20, 0x2C, 0x75, 0x38, 0x4F, 0x65, 
   0x5C, 0x68, 0x73, 0x63, 0x8B, 0xA9, 0x46, 0x52, 0xA4, 0x35, 0x56, 0x97, 0x4C, 0x5C, 0x6D, 0x5D, 
   0x5D, 0x56, 0x52, 0x58, 0x8A, 0x51, 0x6F, 0x92, 0x45, 0x63, 0x93, 0x3A, 0x2B, 0x9E, 0x4D, 0x5B, 
   0x54, 0x4F, 0x91, 0x78, 0x72, 0x8B, 0xB9, 0x60, 0x57, 0x98, 0x48, 0x45, 0x66, 0x2B, 0x58, 0xB7, 
   0x58, 0xA8, 0xCD, 0x42, 0x63, 0x8C, 0x43, 0x23, 0x3A, 0x71, 0x72, 0x62, 0x5F, 0x83, 0xA4, 0x42, 
   0x38, 0xA7, 0x36, 0x70, 0xCA, 0x63, 0x4E, 0xA6, 0x46, 0x3E, 0x64, 0x2A, 0x78, 0x31, 0x58, 0x84, 
   0xA5, 0x4E, 0x56, 0xDA, 0x54, 0x55, 0x80, 0x71, 0x5A, 0xB7, 0x38, 0x4B, 0xB3, 0x53, 0x7F, 0x06, 
   0x63, 0x90, 0x73, 0x34, 0x34, 0xFF, 0x33, 0x56, 0x6F, 0x4A, 0x8F, 0x3C, 0x2F, 0x50, 0xE0, 0x64, 
   0x4B, 0x8B, 0x6F, 0x68, 0x25, 0x4B, 0x80, 0x9E, 0x21, 0x96, 0xEA, 0x1C, 0x39, 0x88, 0x4C, 0x07, 
   0x3F, 0x66, 0x87, 0xB4, 0x83, 0xD8, 0xFF, 0x71, 0x6F, 0x90, 0x24, 0x15, 0x1F, 0x12, 0x25, 0x79, 
   0x62, 0x60, 0xA4, 0x68, 0x7A, 0xC8, 0x41, 0x97, 0x8F, 0x57, 0x68, 0x8D, 0x5B, 0x12, 0x80, 0x42, 
   0x93, 0x7F, 0x1A, 0x92, 0xA0, 0x33, 0x09, 0x82, 0x5E, 0x16, 0x4F, 0x7D, 0xB9, 0x67, 0x66, 0xA4, 
   0xA8, 0x2C, 0x37, 0xC2, 0x2C, 0x3B, 0x96, 0x6B, 0x74, 0x85, 0x5B, 0x64, 0x9A, 0x5A, 0x70, 0x9D, 
   0x37, 0x76, 0x7F, 0x42, 0x80, 0x7D, 0x7A, 0x56, 0x44, 0x3A, 0x27, 0x7E, 0x1E, 0x4B, 0xA2, 0x43, 
   0x71, 0x56, 0x42, 0x9B, 0x72, 0x7F, 0x85, 0xFF, 0xB9, 0x57, 0xF4, 0x56, 0x7E, 0x62, 0x19, 0x66, 
   0x5E, 0x3E, 0x3D, 0x9B, 0x44, 0x66, 0x6E, 0x2F, 0x57, 0x80, 0x2D, 0x7B, 0xA4, 0x9E, 0x82, 0x8A, 
   0xC1, 0x7B, 0xAD, 0x67, 0x7F, 0xC3, 0x00, 0x33, 0x8D, 0x00, 0x3A, 0x63, 0x83, 0xA3, 0x4D, 0xA8, 
   0x9E, 0x84, 0x63, 0x64, 0xFF, 0x43, 0x61, 0xD3, 0x5D, 0x75, 0x3A, 0x1D, 0x30, 0x65, 0x35, 0x21, 
   0x7E, 0x76, 0x9B, 0x9F, 0x1E, 0x87, 0x87, 0x65, 0x77, 0xBE, 0xAB, 0x87, 0xFF, 0x71, 0x64, 0x9B, 
   0x40, 0x69, 0x24, 0x48, 0x73, 0x7C, 0x35, 0x60, 0xA9, 0x5D, 0x6A, 0x81, 0x57, 0x5E, 0x80, 0x4C, 
   0x5E, 0x5F, 0x2C, 0x38, 0x9A, 0x51, 0x5C, 0xAD, 0xAE, 0xA6, 0x93, 0x7F, 0x6C, 0xC0, 0x15, 0x37, 
   0x90, 0x35, 0x64, 0x4A, 0x58, 0x4F, 0x72, 0x76, 0x6D, 0xBE, 0x4E, 0x90, 0xBE, 0x27, 0x5D, 0x62, 
   0x40, 0x4B, 0x51, 0x9D, 0x84, 0xC4, 0x8B, 0x8A, 0x9E, 0x2E, 0x4A, 0x81, 0x38, 0x4F, 0xBF, 0x55, 
   0x60, 0x8A, 0x61, 0x62, 0x62, 0x5B, 0xA2, 0xA6, 0x3F, 0x69, 0xAB, 0x56, 0x51, 0x8E, 0x73, 0x61, 
   0x4F, 0x58, 0x83, 0x8A, 0x3C, 0x6C, 0xED, 0x92, 0x55, 0xA2, 0x7F, 0x56, 0x51, 0x17, 0x75, 0x95, 
   0x44, 0x9D, 0xA1, 0x62, 0x74, 0x7A, 0x63, 0x28, 0x96, 0x5D, 0x50, 0xA8, 0x7E, 0x8A, 0xA1, 0x55, 
   0x79, 0x7E, 0x26, 0x68, 0xA5, 0x42, 0x67, 0x98, 0x56, 0x60, 0x58, 0x64, 0x19, 0x8C, 0x81, 0x88, 
   0xA4, 0x5E, 0xFF, 0xA9, 0x2A, 0x3B, 0x6A, 0x51, 0x00, 0x54, 0x68, 0x94, 0xC7, 0x7D, 0xAC, 0xE3, 
   0x47, 0x66, 0x6F, 0x00, 0x20, 0x56, 0x26, 0x32, 0x6D, 0xA7, 0xC8, 0xAE, 0xB8, 0xBC, 0xCA, 0x3E, 
   0x1A, 0x62, 0x00, 0x2A, 0x50, 0x75, 0xA8, 0xB0, 0x86, 0x70, 0x83, 0x26, 0x26, 0x56, 0x37, 0x60, 
   0x91, 0x98, 0xB0, 0xD6, 0x6E, 0x6A, 0xAC, 0x27, 0x2A, 0x37, 0x1B, 0x41, 0x59, 0x4B, 0x8D, 0xA0, 
   0x6B, 0x84, 0xB9, 0x78, 0x57, 0x81, 0x60, 0x67, 0x98, 0x66, 0x72, 0xA8, 0x70, 0x60, 0x7F, 0x40, 
   0x69, 0x6B, 0x11, 0x23, 0x53, 0x2E, 0x35, 0x50, 0x59, 0x78, 0x92, 0x8D, 0x86, 0xE4, 0x53, 0x8A, 
   0xB5, 0x2A, 0x6A, 0x56, 0x50, 0x27, 0x3C, 0x45, 0x0B, 0x27, 0x2B, 0x4D, 0x87, 0x66, 0xA7, 0xFF, 
   0x99, 0xCF, 0xC4, 0x48, 0x3F, 0x1E, 0x14, 0x31, 0x83, 0x57, 0x84, 0xFE, 0x6D, 0x45, 0x4A, 0x1D, 
   0x28, 0x15, 0x2E, 0x7F, 0xAE, 0x7A, 0x75, 0x7D, 0x64, 0x48, 0x82, 0x57, 0x7A, 0x9E, 0x33, 0x69, 
   0x59, 0x32, 0x3B, 0x7A, 0x54, 0x99, 0x8F, 0x64, 0x58, 0x55, 0x31, 0x06, 0x5B, 0x36, 0x4A, 0xB7, 
   0x4D, 0x7E, 0x94, 0x43, 0x5D, 0x32, 0x5B, 0x63, 0x5F, 0x83, 0x41, 0x88, 0x37, 0x58, 0xB1, 0x08, 
   0x85, 0x92, 0x5E, 0x46, 0x25, 0x6A, 0x51, 0x69, 0x41, 0x6E, 0xB3, 0x35, 0x41, 0x64, 0x36, 0x58, 
   0x54, 0x7B, 0x69, 0x99, 0x5F, 0x69, 0x8E, 0x2A, 0x46, 0x65, 0x45, 0x40, 0x6B, 0x44, 0x67, 0x82, 
   0x32, 0x40, 0x77, 0x1C, 0x57, 0x5B, 0x31, 0x47, 0x6E, 0x94, 0x5F, 0xA8, 0x73, 0x71, 0x86, 0x2E, 
   0x54, 0x6E, 0x55, 0x48, 0x4C, 0x54, 0x59, 0x75, 0x31, 0x48, 0xC6, 0x26, 0x50, 0x71, 0x71, 0x84, 
   0x69, 0x67, 0x8F, 0x90, 0x61, 0x54, 0x41, 0x53, 0x41, 0x70, 0x00, 0x35, 0xC6, 0x31, 0x58, 0xB4, 
   0x93, 0x59, 0x39, 0x4A, 0x6A, 0x38, 0x37, 0x53, 0x94, 0x52, 0x7A, 0xD3, 0x4A, 0x56, 0x54, 0x05, 
   0x00, 0x00, 0x07, 0x49, 0x6B, 0x7C, 0xCA, 0xFF, 0x7E, 0x70, 0xAF, 0x3F, 0x40, 0x33, 0x4D, 0x60, 
   0x52, 0x19, 0x4F, 0x5E, 0x0F, 0x2E, 0x7D, 0x62, 0x69, 0x8F, 0x9D, 0xA3, 0x5E, 0x63, 0x63, 0x92, 
   0x16, 0x4A, 0xBA, 0x4D, 0x64, 0x62, 0x58, 0x2F, 0x44, 0x1B, 0x20, 0x67, 0x4A, 0x8E, 0x7B, 0x89, 
   0xB1, 0xD8, 0x3F, 0x32, 0xB4, 0x11, 0x09, 0x45, 0x56, 0x4F, 0x06, 0x79, 0x8B, 0xAE, 0x40, 0xA8, 
   0xFF, 0x29, 0x4C, 0x42, 0x57, 0x3A, 0x2B, 0x7E, 0x77, 0xE2, 0x4A, 0x81, 0xA9, 0x10, 0x09, 0x26, 
   0x38, 0x10, 0x5A, 0x7E, 0xB2, 0xD5, 0x74, 0xC9, 0xCB, 0x36, 0x01, 0x63, 0x46, 0x11, 0x61, 0x41, 
   0xAD, 0x88, 0x5D, 0x86, 0x72, 0x51, 0x30, 0x84, 0x4B, 0x30, 0x69, 0x2E, 0x60, 0x77, 0x24, 0x85, 
   0xC8, 0x5A, 0x70, 0x96, 0x78, 0x76, 0x52, 0x5C, 0x6B, 0x81, 0x49, 0x5F, 0xB6, 0x31, 0x69, 0x91, 
   0x37, 0x47, 0xAD, 0x48, 0x80, 0xC8, 0x71, 0x90, 0x75, 0x5A, 0x2D, 0x3B, 0x3C, 0x32, 0x7B, 0x4D, 
   0x87, 0xE4, 0x58, 0x71, 0xB7, 0x19, 0x55, 0x61, 0x4D, 0x56, 0x71, 0x75, 0x6F, 0x94, 0x32, 0x87, 
   0x96, 0x5B, 0x7B, 0x81, 0x72, 0x51, 0xDB, 0x54, 0x56, 0xD2, 0x41, 0x77, 0x18, 0x34, 0x4E, 0x4F, 
   0x44, 0x49, 0xD8, 0x6C, 0x7C, 0x6D, 0x12, 0x5B, 0x63, 0x2A, 0x40, 0xBA, 0x8C, 0x74, 0x9E, 0x6B, 
   0x6A, 0x7C, 0x37, 0x65, 0x88, 0x63, 0x8B, 0xB1, 0x62, 0x51, 0x8F, 0x12, 0x2A, 0x7D, 0x2A, 0x7C, 
   0x8F, 0x7C, 0xA0, 0x6F, 0x72, 0x82, 0xCB, 0x54, 0x5D, 0xDA, 0x30, 0x44, 0x44, 0x2A, 0x55, 0x5A, 
   0x68, 0x5B, 0xE9, 0x4C, 0x79, 0x99, 0x3A, 0x63, 0x53, 0x35, 0x5D, 0x54, 0x79, 0x90, 0xD3, 0x61, 
   0x72, 0xDE, 0x2C, 0x33, 0x5E, 0x0B, 0x55, 0x50, 0x6E, 0x67, 0x88, 0x69, 0x64, 0x8E, 0x42, 0x92, 
   0x74, 0x42, 0x5E, 0x99, 0x53, 0x52, 0xA8, 0x44, 0x7F, 0xC1, 0x5C, 0x47, 0xD0, 0x68, 0x38, 0x77, 
   0x5C, 0x99, 0x46, 0x4F, 0x8D, 0x68, 0x4D, 0x5D, 0xB9, 0x5B, 0x38, 0xB9, 0x0B, 0x2D, 0x58, 0x00, 
   0x4D, 0x3F, 0x87, 0x95, 0xB6, 0xC5, 0x97, 0xE2, 0x7C, 0x5E, 0xB6, 0x45, 0x5D, 0xBA, 0x63, 0x78, 
   0x94, 0x3E, 0x50, 0x58, 0x04, 0x4A, 0x79, 0x28, 0x8A, 0x9C, 0x4F, 0x5E, 0x81, 0x71, 0x75, 0x84, 
   0xD8, 0x96, 0xD1, 0x68, 0x34, 0xD6, 0x00, 0x4B, 0x78, 0x3B, 0x91, 0x3D, 0x6F, 0x92, 0xAF, 0x4E, 
   0x5E, 0xD2, 0x38, 0x56, 0x50, 0x61, 0x45, 0x88, 0x83, 0x89, 0xB5, 0x6A, 0x88, 0x98, 0x19, 0x31, 
   0x86, 0x14, 0x3D, 0x69, 0x8E, 0x73, 0x55, 0x63, 0x76, 0xBA, 0x3C, 0x83, 0xE4, 0x8C, 0x83, 0xCC, 
   0x75, 0x65, 0x8F, 0x57, 0x74, 0x58, 0x4E, 0x50, 0x88, 0x31, 0x4F, 0x9E, 0x69, 0x87, 0x77, 0x4B, 
   0x4E, 0xA4, 0x07, 0x48, 0x8D, 0x37, 0x77, 0x40, 0x9C, 0x74, 0xB0, 0x87, 0x9B, 0xFF, 0x62, 0x55, 
   0x97, 0x30, 0x4E, 0x11, 0x1C, 0x5E, 0x77, 0x3A, 0x4F, 0xC9, 0x64, 0x6D, 0x87, 0x45, 0x80, 0x8D, 
   0x6F, 0x80, 0xBB, 0x86, 0x5D, 0x94, 0x4C, 0x5C, 0xA3, 0x44, 0x7D, 0x85, 0x55, 0x49, 0x62, 0x3F, 
   0x4A, 0x85, 0x5C, 0x8B, 0xDB, 0x7F, 0x81, 0x8B, 0x5C, 0x75, 0x62, 0x2D, 0x57, 0x79, 0x4F, 0x68, 
   0xA8, 0x5B, 0x73, 0xCA, 0x4B, 0x77, 0x79, 0x51, 0x32, 0x56, 0x68, 0x3E, 0x95, 0x58, 0x74, 0xAE, 
   0x47, 0x92, 0x9E, 0x74, 0x7B, 0x92, 0x5D, 0x69, 0x8B, 0x41, 0x46, 0x96, 0x79, 0x73, 0x91, 0x82, 
   0x6D, 0xB7, 0x19, 0x61, 0x7C, 0x00, 0x5B, 0x64, 0x72, 0x1E, 0x8C, 0xAE, 0xA9, 0x87, 0x43, 0xB0, 
   0x78, 0x3C, 0x21, 0x9B, 0x75, 0x7B, 0xB7, 0x7B, 0xB9, 0xA5, 0x62, 0x2F, 0x64, 0x27, 0x66, 0x6F, 
   0x42, 0x71, 0xA3, 0x70, 0x54, 0x98, 0x38, 0x5A, 0x81, 0x7C, 0x6B, 0xB3, 0x64, 0x6B, 0xA1, 0x0E, 
   0x75, 0x71, 0x52, 0x63, 0x4E, 0x75, 0x4C, 0x77, 0x3D, 0x3C, 0xD4, 0x49, 0x72, 0x6F, 0x77, 0x8F, 
   0x76, 0x70, 0x6C, 0xC6, 0x5D, 0x53, 0xCF, 0x22, 0x5D, 0x48, 0x22, 0x41, 0x2B, 0x68, 0x53, 0xAF, 
   0x64, 0x89, 0xC3, 0x60, 0x7F, 0x69, 0x62, 0x51, 0x6E, 0x6D, 0x46, 0x5E, 0x76, 0xA0, 0xB9, 0x34, 
   0xA8, 0xAC, 0x00, 0x00, 0x53, 0x2E, 0x00, 0x25, 0x97, 0xB1, 0x61, 0x71, 0xD7, 0xC6, 0x21, 0x53, 
   0xCC, 0x5E, 0x6C, 0x80, 0x5D, 0x6E, 0x45, 0x1F, 0x29, 0x57, 0x2C, 0x14, 0x8E, 0x7E, 0x68, 0xA8, 
   0x84, 0xD1, 0x9E, 0x60, 0xA7, 0xAD, 0x3B, 0x47, 0x87, 0x22, 0x11, 0x3A, 0x44, 0x56, 0x60, 0x62, 
   0x96, 0xC6, 0x4C, 0x57, 0x5F, 0x41, 0x1E, 0x3C, 0x68, 0x7F, 0x92, 0x4B, 0x52, 0x9E, 0x2D, 0x3C, 
   0x70, 0x54, 0xBD, 0x96, 0x48, 0x7C, 0x94, 0x31, 0x12, 0x59, 0x5E, 0x38, 0x48, 0x47, 0x5B, 0x7C, 
   0x14, 0x57, 0xA5, 0x60, 0x63, 0x7C, 0x78, 0x58, 0x5F, 0x4A, 0x63, 0x6A, 0x42, 0x57, 0x81, 0x35, 
   0x35, 0x7B, 0x40, 0x6E, 0x9C, 0x40, 0x51, 0x3B, 0x25, 0x3A, 0x2A, 0x54, 0x68, 0xA4, 0x87, 0x69, 
   0xB1, 0x26, 0x4D, 0x6C, 0x2A, 0x4D, 0x5F, 0x62, 0x6F, 0x5F, 0x34, 0x5D, 0x87, 0x34, 0x4C, 0x77, 
   0x62, 0x62, 0x61, 0x2A, 0x2F, 0x73, 0x4D, 0x64, 0xAD, 0x49, 0x81, 0x91, 0x55, 0x5F, 0x72, 0x55, 
   0x4E, 0x44, 0x59, 0x59, 0x6E, 0x25, 0x59, 0xCA, 0x1F, 0x48, 0x74, 0x64, 0x66, 0x4B, 0x43, 0x6C, 
   0x67, 0x43, 0x66, 0x8B, 0x5F, 0x5E, 0xB9, 0x2B, 0x3B, 0x69, 0x2B, 0x52, 0x42, 0x65, 0x7B, 0xC4, 
   0x77, 0x53, 0x9B, 0x3D, 0x59, 0x2C, 0x1A, 0x5E, 0x48, 0x53, 0x59, 0x9E, 0x80, 0x7A, 0x78, 0x3A, 
   0x50, 0x62, 0x17, 0x00, 0x64, 0x1F, 0x5B, 0x89, 0x67, 0xD0, 0xBD, 0xAC, 0x6A, 0xA0, 0x55, 0x2F, 
   0x53, 0x00, 0x66, 0x63, 0x19, 0x66, 0x59, 0x5A, 0x23, 0x78, 0x6E, 0x6E, 0xCA, 0x5D, 0x9C, 0x8D, 
   0x56, 0x68, 0x5F, 0x2C, 0x38, 0x97, 0x2C, 0x42, 0x81, 0x5A, 0x48, 0x6B, 0x5A, 0x55, 0xC5, 0x43, 
   0x89, 0x7F, 0x27, 0x86, 0x39, 0x55, 0x06, 0x77, 0x4B, 0x00, 0x95, 0x51, 0x8F, 0x58, 0x5C, 0xEE, 
   0x99, 0x40, 0x60, 0xB6, 0x35, 0x1E, 0x7D, 0x63, 0x5B, 0x6C, 0x68, 0x66, 0x77, 0x44, 0x3D, 0xA4, 
   0x26, 0x70, 0x76, 0x15, 0x3D, 0x59, 0x62, 0x50, 0x93, 0x86, 0x95, 0x8F, 0x42, 0x4B, 0x84, 0x4C, 
   0x46, 0x94, 0x5C, 0x96, 0x93, 0x40, 0x41, 0x44, 0x3A, 0x32, 0x74, 0x4C, 0x89, 0xA5, 0x4D, 0x74, 
   0xA2, 0x48, 0x47, 0x9C, 0x5B, 0x49, 0x63, 0x5C, 0x9B, 0x86, 0x56, 0xAC, 0xA5, 0x5C, 0x43, 0xB2, 
   0x50, 0x36, 0x7A, 0x4F, 0x8B, 0x9C, 0x5F, 0x7F, 0xA0, 0x3C, 0x61, 0x93, 0x30, 0x32, 0x6A, 0x4D, 
   0x59, 0x80, 0x59, 0x60, 0x6F, 0x53, 0x50, 0x83, 0x43, 0x63, 0xA2, 0x44, 0x70, 0xB5, 0x67, 0x6B, 
   0x88, 0x56, 0x82, 0xB4, 0x55, 0x65, 0xC1, 0x59, 0x79, 0x3C, 0x50, 0x5F, 0x68, 0x32, 0x29, 0xE9, 
   0x20, 0x46, 0x4F, 0x22, 0x64, 0x1C, 0x8B, 0x83, 0xCF, 0x54, 0x3B, 0xC6, 0x4F, 0x66, 0x3F, 0x7C, 
   0xA0, 0x8A, 0x31, 0x93, 0xEC, 0x25, 0x24, 0x73, 0x5E, 0x13, 0x4A, 0x70, 0x76, 0x94, 0x42, 0xC8, 
   0xC9, 0x36, 0x77, 0xAB, 0x52, 0x14, 0x28, 0x48, 0x4C, 0x6E, 0x6B, 0x8B, 0xFF, 0x7C, 0x80, 0xA8, 
   0x25, 0x57, 0x5A, 0x2F, 0x44, 0x74, 0x5C, 0x3F, 0x5E, 0x5C, 0x7E, 0x99, 0x45, 0xA0, 0xB7, 0x40, 
   0x2E, 0xB7, 0x4C, 0x3A, 0x8E, 0x73, 0x91, 0x8C, 0x3F, 0x91, 0x84, 0x16, 0x35, 0x89, 0x45, 0x13, 
   0x6C, 0x69, 0x96, 0x47, 0x48, 0x91, 0xA0, 0x49, 0x0E, 0xE8, 0x51, 0x65, 0xA4, 0x5E, 0x94, 0x79, 
   0x80, 0x55, 0x65, 0x6C, 0x54, 0x7C, 0x36, 0x8C, 0xDD, 0x12, 0x58, 0x65, 0x2F, 0x57, 0x44, 0x60, 
   0x4C, 0xC3, 0x64, 0x48, 0xBA, 0x72, 0x73, 0x5C, 0x57, 0xA2, 0x97, 0x72, 0x58, 0xE8, 0x59, 0x63, 
   0xAE, 0x3B, 0x8B, 0x77, 0x2F, 0x5D, 0x86, 0x3C, 0x4B, 0x74, 0x88, 0x7E, 0x65, 0x84, 0x72, 0xB7, 
   0x18, 0x33, 0xAE, 0x46, 0x56, 0x8D, 0xAC, 0x91, 0x98, 0x60, 0x98, 0xBE, 0x12, 0x63, 0xB7, 0x06, 
   0x45, 0x87, 0x58, 0x4A, 0x52, 0x78, 0x78, 0x5F, 0x79, 0x5D, 0xC3, 0x61, 0x8A, 0xFD, 0x4E, 0x8D, 
   0x78, 0x3D, 0x25, 0x53, 0x54, 0x31, 0xB3, 0x6B, 0x8A, 0x87, 0x2D, 0x7C, 0x62, 0x35, 0x89, 0xC7, 
   0x92, 0x9F, 0xFF, 0x81, 0x42, 0x96, 0x3B, 0x68, 0x36, 0x5A, 0x77, 0x62, 0x53, 0x44, 0xB7, 0x30, 
   0x6B, 0xAA, 0x68, 0x71, 0x2C, 0x3B, 0x44, 0x6D, 0x05, 0x61, 0xE7, 0x96, 0x74, 0x94, 0xBF, 0xA1, 
   0x88, 0x49, 0x55, 0xCA, 0x05, 0x37, 0x6D, 0x0B, 0x5E, 0x4B, 0x3D, 0x50, 0x98, 0xB8, 0x85, 0xD4, 
   0x86, 0x91, 0xBE, 0x23, 0x5D, 0x95, 0x44, 0x50, 0x92, 0x61, 0x5B, 0x84, 0x4B, 0x67, 0x50, 0x62, 
   0x6D, 0x8A, 0x46, 0x74, 0xC0, 0x6F, 0x5E, 0xA9, 0x85, 0x6F, 0x69, 0x3F, 0x75, 0x81, 0x27, 0x74, 
   0xF3, 0x4E, 0x56, 0x9C, 0x70, 0x4A, 0x33, 0x3E, 0x72, 0x77, 0x13, 0x67, 0xA1, 0x98, 0x56, 0xAF, 
   0xA4, 0x69, 0x94, 0x31, 0x70, 0xB5, 0x41, 0x99, 0x86, 0x7E, 0x86, 0x58, 0x4F, 0x29, 0xA7, 0x42, 
   0x72, 0xAB, 0x42, 0x77, 0x60, 0x49, 0x1E, 0x7C, 0x56, 0x8D, 0x83, 0x5D, 0xD2, 0x89, 0x5E, 0x37, 
   0x9C, 0x3D, 0x09, 0x75, 0x71, 0x99, 0xC4, 0x80, 0xCC, 0xD8, 0x39, 0x62, 0x41, 0x27, 0x04, 0x40, 
   0x39, 0x49, 0x98, 0xA7, 0xB7, 0xCD, 0xAA, 0x88, 0xBB, 0x07, 0x0E, 0x68, 0x00, 0x3B, 0x54, 0x7E, 
   0xA8, 0x81, 0x90, 0x7A, 0x98, 0x1F, 0x02, 0x50, 0x3D, 0x5F, 0x7A, 0x93, 0xC8, 0xE2, 0x82, 0x8A, 
   0xA9, 0x2A, 0x49, 0x69, 0x2F, 0x48, 0x62, 0x57, 0x81, 0xB1, 0x74, 0x75, 0xA4, 0x40, 0x36, 0x3C, 
   0x40, 0x53, 0x75, 0x74, 0xAA, 0xCC, 0x61, 0x75, 0x6E, 0x72, 0x86, 0x69, 0x4E, 0x72, 0x8B, 0x24, 
   0x32, 0xA1, 0x51, 0x5E, 0x6C, 0x73, 0x58, 0x7C, 0x2A, 0x3E, 0x75, 0x25, 0x73, 0x49, 0x7C, 0x9C, 
   0x79, 0x71, 0x3A, 0x92, 0x1B, 0x3F, 0x78, 0x4F, 0x9F, 0xC8, 0x72, 0x56, 0x7D, 0x4A, 0x50, 0x2E, 
   0x33, 0x67, 0x91, 0x6B, 0x99, 0xFF, 0x8B, 0x52, 0x7B, 0x17, 0x12, 0x00, 0x06, 0x74, 0x9F, 0x73, 
   0x80, 0xC7, 0x7A, 0x4C, 0x66, 0x40, 0x6D, 0x8B, 0x39, 0x51, 0x5D, 0x39, 0x3B, 0x6F, 0x83, 0xA6, 
   0xB8, 0x43, 0x71, 0x79, 0x31, 0x18, 0x4F, 0x47, 0x3F, 0x81, 0x47, 0x84, 0x80, 0x41, 0x5C, 0x41, 
   0x48, 0x40, 0x54, 0x49, 0x51, 0xB5, 0x49, 0x63, 0x92, 0x32, 0x6E, 0x5D, 0x59, 0x45, 0x3A, 0x63, 
   0x45, 0x79, 0x2F, 0x68, 0xA3, 0x0D, 0x68, 0x86, 0x53, 0x35, 0x42, 0x77, 0x4C, 0x7C, 0x60, 0x74, 
   0xBC, 0x36, 0x4D, 0x71, 0x3B, 0x4D, 0x3D, 0x46, 0x5E, 0x7B, 0x46, 0x64, 0x82, 0x41, 0x58, 0x66, 
   0x49, 0x41, 0x7E, 0x7C, 0x58, 0xA1, 0x5F, 0x69, 0x85, 0x0E, 0x4D, 0x83, 0x30, 0x4D, 0x49, 0x80, 
   0x64, 0x61, 0x3C, 0x59, 0xC2, 0x1A, 0x4E, 0x6D, 0x6A, 0x65, 0x60, 0x54, 0x5F, 0x70, 0x48, 0x59, 
   0x61, 0x52, 0x3B, 0x7F, 0x03, 0x3B, 0x9D, 0x4E, 0x64, 0x7F, 0x88, 0x75, 0x6D, 0x60, 0x4E, 0x40, 
   0x0F, 0x5E, 0xB2, 0x47, 0x4D, 0xC1, 0x58, 0x4D, 0x36, 0x42, 0x64, 0x09, 0x42, 0x59, 0xAC, 0x69, 
   0x7A, 0xFE, 0x29, 0x4B, 0x7A, 0x19, 0x00, 0x00, 0x5F, 0x49, 0x63, 0x61, 0xC4, 0xE3, 0x56, 0x7A, 
   0x99, 0x5A, 0x18, 0x53, 0x42, 0x66, 0x5E, 0x31, 0x66, 0x7D, 0x15, 0x33, 0x90, 0x78, 0x5C, 0x97, 
   0x73, 0x8F, 0x6A, 0x1E, 0x4B, 0x55, 0x4B, 0x5C, 0xCE, 0x88, 0x89, 0xDF, 0x37, 0x4F, 0x6E, 0x0F, 
   0x47, 0x20, 0x59, 0x4C, 0x47, 0x61, 0x4C, 0xA0, 0x50, 0x5D, 0xC4, 0x4B, 0x26, 0x69, 0x3A, 0x40, 
   0x20, 0x68, 0xCB, 0xD3, 0x4C, 0x9D, 0xE5, 0x24, 0x07, 0x3A, 0x6F, 0x3A, 0x61, 0x90, 0xAB, 0xC7, 
   0x27, 0x70, 0xA8, 0x08, 0x00, 0x28, 0x32, 0x14, 0x34, 0x6E, 0xA0, 0xAF, 0x8B, 0xC3, 0xC8, 0x35, 
   0x11, 0x7D, 0x1D, 0x11, 0x5A, 0x50, 0x91, 0x72, 0x58, 0xA6, 0x92, 0x4E, 0x58, 0xAB, 0x6A, 0x58, 
   0x74, 0x31, 0x3C, 0x86, 0x2C, 0x60, 0xBA, 0x60, 0xA6, 0x86, 0x57, 0x84, 0x5F, 0x6F, 0x5B, 0x93, 
   0x74, 0x69, 0x9B, 0x44, 0x57, 0x80, 0x31, 0x3A, 0xA3, 0x3C, 0x7E, 0xE6, 0x5E, 0x83, 0x92, 0x3C, 
   0x27, 0x2E, 0x43, 0x38, 0x34, 0x66, 0x8A, 0xB1, 0x4A, 0x6A, 0xDD, 0x3A, 0x65, 0x9B, 0x6D, 0x54, 
   0xCD, 0x73, 0x6C, 0xC2, 0x4F, 0xA4, 0x00, 0x46, 0x68, 0x57, 0x38, 0x2B, 0xFF, 0x3D, 0x45, 0x79, 
   0x2C, 0x50, 0x28, 0x23, 0x3B, 0xC7, 0x76, 0x4A, 0x79, 0x99, 0x87, 0x54, 0x21, 0x8F, 0xB2, 0x1A, 
   0x83, 0xC0, 0x87, 0x5F, 0x9E, 0x44, 0x31, 0x91, 0x17, 0x4F, 0x79, 0x8E, 0xA0, 0x8F, 0x81, 0x83, 
   0xB6, 0x1E, 0x53, 0x93, 0x00, 0x4C, 0x4E, 0x58, 0x4D, 0x62, 0x7D, 0x76, 0xD7, 0x67, 0xAA, 0xFF, 
   0x49, 0x64, 0x4A, 0x42, 0x34, 0x1F, 0x3A, 0x60, 0xBF, 0x66, 0x70, 0xC7, 0x1D, 0x1C, 0x6C, 0x3B, 
   0x57, 0x61, 0x87, 0xA3, 0xBD, 0x91, 0x76, 0xCD, 0x16, 0x5E, 0x7B, 0x04, 0x5D, 0x68, 0x4F, 0x5C, 
   0x78, 0x63, 0x62, 0x84, 0x53, 0x5D, 0x86, 0x44, 0x5F, 0x9B, 0x4B, 0x7E, 0xCB, 0x69, 0x9A, 0x88, 
   0x6E, 0x60, 0x9E, 0x55, 0x3D, 0xC3, 0x37, 0x6B, 0x2E, 0x0F, 0x82, 0x57, 0x55, 0x76, 0xED, 0x8F, 
   0x4D, 0xA3, 0x3F, 0x41, 0x58, 0x12, 0x4E, 0x7A, 0x63, 0x6D, 0x93, 0x82, 0x91, 0x8B, 0x33, 0x54, 
   0xCB, 0x4F, 0x76, 0xC5, 0x78, 0x91, 0x78, 0x61, 0x68, 0x66, 0x5F, 0x5A, 0xAA, 0x30, 0x37, 0x99, 
   0x04, 0x49, 0x73, 0x6E, 0x79, 0x92, 0xCB, 0x91, 0xCD, 0x7E, 0x63, 0xE2, 0x08, 0x5C, 0x83, 0x23, 
   0x4A, 0x3C, 0x52, 0x73, 0x9D, 0x6B, 0x74, 0x9F, 0x61, 0x74, 0x7F, 0x3A, 0x62, 0xA8, 0x79, 0x6C, 
   0xE1, 0x93, 0x6A, 0xB0, 0x1F, 0x2B, 0x62, 0x1E, 0x3D, 0x38, 0x80, 0x7F, 0x5D, 0x38, 0x82, 0xB2, 
   0x41, 0x7D, 0xC8, 0x88, 0x82, 0xEF, 0xA4, 0x6F, 0x6A, 0x41, 0x46, 0x72, 0x1C, 0x61, 0xCF, 0x6A, 
   0x7E, 0x51, 0x5E, 0x67, 0x7E, 0x35, 0x5B, 0xE4, 0x35, 0x5B, 0x62, 0x43, 0x61, 0x46, 0x95, 0x79, 
   0xC6, 0x8F, 0xA1, 0xEF, 0x2B, 0x5B, 0x80, 0x13, 0x26, 0x19, 0x5F, 0x76, 0xB5, 0x94, 0x73, 0xBD, 
   0x6D, 0x6E, 0xA2, 0x2D, 0x7F, 0xC2, 0x4F, 0x5C, 0x75, 0x4B, 0x3A, 0x5D, 0x68, 0x8A, 0xBE, 0x58, 
   0x7F, 0x74, 0x68, 0x46, 0x86, 0x57, 0x5D, 0x9E, 0x51, 0x7A, 0x8E, 0x79, 0x86, 0xCD, 0x61, 0x5E, 
   0x8C, 0x48, 0x5D, 0x5C, 0x25, 0x5D, 0x94, 0x2C, 0x74, 0x79, 0x68, 0x84, 0x7A, 0x7C, 0x4A, 0x9E, 
   0x71, 0x3F, 0xC1, 0x65, 0x7A, 0x88, 0x52, 0x93, 0x76, 0x66, 0x93, 0xB9, 0x31, 0x6E, 0x95, 0x00, 
   0x33, 0x66, 0x94, 0x12, 0x72, 0xAC, 0x98, 0xAD, 0x29, 0xDD, 0xA2, 0x17, 0x15, 0x7B, 0x69, 0x37, 
   0xAA, 0xA4, 0xC0, 0xD1, 0x76, 0x55, 0x7F, 0x46, 0x5F, 0x55, 0x34, 0x96, 0xA3, 0x5C, 0x2F, 0x81, 
   0x7A, 0x5C, 0x65, 0x79, 0xA5, 0xCC, 0x5F, 0x60, 0xBA, 0x23, 0x64, 0x5C, 0x32, 0x57, 0x5A, 0x6B, 
   0x45, 0x8D, 0x3A, 0x58, 0x9A, 0x41, 0x76, 0x9B, 0x7B, 0x77, 0x7A, 0x64, 0x6B, 0xA8, 0x52, 0x5F, 
   0xC9, 0x34, 0x5A, 0x46, 0x2A, 0x66, 0x57, 0x92, 0x72, 0xD5, 0x7B, 0x88, 0xDA, 0x40, 0x47, 0x5E, 
   0x39, 0x35, 0x23, 0x4F, 0x89, 0xDE, 0x52, 0x8B, 0x98, 0x58, 0xB2, 0xB3, 0x1A, 0x0B, 0x4B, 0x54, 
   0x2D, 0x51, 0x9E, 0xB2, 0xBD, 0x3B, 0xA6, 0xC2, 0x07, 0x1B, 0x42, 0x4C, 0x09, 0x2A, 0x70, 0x7D, 
   0x44, 0x3E, 0x8B, 0x8E, 0x56, 0x53, 0xED, 0x79, 0x70, 0xA3, 0x68, 0xAD, 0x51, 0x39, 0x61, 0x88, 
   0x4E, 0x1E, 0xB4, 0x4D, 0x23, 0x4D, 0x3B, 0x52, 0x75, 0x63, 0xA3, 0xDA, 0x4C, 0x64, 0x6C, 0x2F, 
   0x25, 0x32, 0x6D, 0x7F, 0xC5, 0x44, 0x62, 0x70, 0x33, 0x24, 0x57, 0x60, 0x9A, 0x83, 0x5A, 0x81, 
   0x66, 0x49, 0x07, 0x71, 0x48, 0x2D, 0x7C, 0x47, 0x67, 0x7B, 0x30, 0x68, 0x7A, 0x36, 0x51, 0x5E, 
   0x76, 0x57, 0x6F, 0x54, 0x57, 0x76, 0x2B, 0x62, 0x97, 0x53, 0x45, 0x68, 0x64, 0x45, 0x55, 0x36, 
   0x5C, 0x50, 0x35, 0x46, 0x69, 0x41, 0x58, 0x9E, 0x5F, 0x7F, 0xCC, 0x54, 0x41, 0x49, 0x2B, 0x41, 
   0x37, 0x63, 0x74, 0xA4, 0x52, 0x5E, 0x8E, 0x1E, 0x59, 0x7C, 0x30, 0x59, 0x5A, 0x54, 0x59, 0x78, 
   0x66, 0x53, 0x9B, 0x71, 0x7B, 0x84, 0x3D, 0x58, 0x7C, 0x3B, 0x35, 0x42, 0x39, 0x57, 0x49, 0x17, 
   0x58, 0xC7, 0x40, 0x59, 0x71, 0x86, 0x65, 0x53, 0x4E, 0x65, 0x69, 0x4D, 0x64, 0x5F, 0x5D, 0x51, 
   0x88, 0x07, 0x35, 0x7E, 0x3C, 0x52, 0x6E, 0x71, 0x75, 0x84, 0x6C, 0x4E, 0x83, 0x37, 0x59, 0x5A, 
   0x2A, 0x5E, 0x66, 0x30, 0x4D, 0xA5, 0x53, 0x58, 0x77, 0x5F, 0x4D, 0x38, 0x3D, 0x64, 0x84, 0x3D, 
   0x59, 0xB3, 0x5F, 0x7A, 0x95, 0x63, 0x50, 0x6B, 0x07, 0x00, 0x1B, 0x0E, 0x49, 0x5C, 0x71, 0xBE, 
   0xD7, 0x95, 0x80, 0x94, 0x5B, 0x1D, 0x6B, 0x31, 0x6B, 0x81, 0x24, 0x65, 0x60, 0x26, 0x26, 0x68, 
   0x57, 0x33, 0x9D, 0x97, 0xB2, 0x8F, 0x85, 0x6F, 0xAC, 0x11, 0x62, 0xD2, 0x2B, 0x70, 0x51, 0x53, 
   0x18, 0x37, 0x2C, 0x08, 0x75, 0x5A, 0xA3, 0x8E, 0x4F, 0xAA, 0x74, 0x3F, 0x25, 0x97, 0x40, 0x00, 
   0x97, 0x63, 0x72, 0x32, 0x5D, 0xA8, 0x84, 0x46, 0x65, 0xEC, 0x46, 0x75, 0x7F, 0x4C, 0x61, 0x5A, 
   0x78, 0x31, 0x90, 0x32, 0x46, 0x6C, 0x14, 0x4C, 0x5B, 0x3D, 0x42, 0x6D, 0x7D, 0x71, 0xB3, 0x67, 
   0x88, 0x87, 0x2E, 0x0C, 0x56, 0x1E, 0x41, 0x96, 0x64, 0x9A, 0xA3, 0x76, 0x6F, 0x5B, 0x49, 0x3D, 
   0x8F, 0x5F, 0x82, 0xA8, 0x37, 0x88, 0xAF, 0x1B, 0x38, 0x81, 0x6D, 0x44, 0x80, 0x8C, 0xBB, 0x64, 
   0x69, 0x70, 0x8F, 0x33, 0x13, 0xAE, 0x3D, 0x6D, 0xAF, 0x5F, 0x6E, 0xB9, 0x5A, 0x6E, 0x88, 0x3D, 
   0x67, 0x47, 0x49, 0x3A, 0x5E, 0x3A, 0x64, 0x94, 0x74, 0x98, 0x93, 0x79, 0x54, 0xE4, 0x3A, 0x54, 
   0xD6, 0x66, 0x8D, 0x2D, 0x5E, 0x7C, 0x6F, 0x45, 0x63, 0xDB, 0x21, 0x60, 0x5E, 0x33, 0x4C, 0x5E, 
   0x5C, 0x3A, 0xD5, 0x6F, 0x3B, 0xA2, 0x48, 0x44, 0x3B, 0x5F, 0x9E, 0x70, 0x70, 0xB6, 0xD5, 0x15, 
   0x38, 0xC0, 0x22, 0x10, 0x5A, 0x9B, 0xA1, 0x9E, 0x6E, 0xBE, 0xE1, 0x3F, 0x5C, 0x78, 0x4E, 0x42, 
   0x48, 0x46, 0x46, 0x70, 0x29, 0x69, 0xB1, 0x3A, 0x81, 0xC2, 0x59, 0x5A, 0x67, 0x4A, 0x5F, 0x79, 
   0x8A, 0x87, 0xD4, 0x7D, 0x7A, 0x84, 0x40, 0x60, 0x77, 0x00, 0x14, 0x98, 0x2E, 0x27, 0x70, 0x7B, 
   0x91, 0x77, 0x7B, 0xA4, 0xAB, 0x2F, 0x5F, 0xA0, 0x44, 0x31, 0xA5, 0x5A, 0x9D, 0x70, 0x38, 0x95, 
   0x97, 0x39, 0x00, 0xA6, 0x47, 0x24, 0x45, 0x5B, 0xC1, 0x3B, 0x73, 0x8F, 0x79, 0x56, 0x33, 0xEA, 
   0x5B, 0x76, 0xE0, 0x27, 0x66, 0x6C, 0x2F, 0x4A, 0x5A, 0x86, 0x73, 0xB6, 0x7B, 0x95, 0xDE, 0x4B, 
   0x6B, 0x93, 0x2C, 0x52, 0x68, 0x47, 0x3B, 0x94, 0x1B, 0x49, 0x68, 0x4C, 0x7A, 0x66, 0x7D, 0xA4, 
   0xB3, 0x64, 0x60, 0xD2, 0x8C, 0x6A, 0x93, 0xA6, 0xA0, 0xAE, 0x0E, 0x26, 0xA0, 0x00, 0x31, 0x5A, 
   0x80, 0x83, 0x55, 0x83, 0x90, 0xBF, 0x40, 0x62, 0xEE, 0x5C, 0x61, 0x8C, 0x7D, 0x45, 0x61, 0x59, 
   0x78, 0x88, 0x3B, 0x79, 0x89, 0x35, 0x6E, 0xB7, 0x27, 0x74, 0x8F, 0x95, 0x68, 0x47, 0x85, 0x56, 
   0xFD, 0x4A, 0x89, 0xDE, 0x52, 0x76, 0x3B, 0x1D, 0x31, 0x4F, 0x29, 0x3D, 0x9A, 0x75, 0x6D, 0x70, 
   0x39, 0x81, 0x80, 0x5E, 0x82, 0xAD, 0x9F, 0x82, 0xFF, 0x6B, 0x64, 0xD2, 0x5D, 0x6E, 0x00, 0x4A, 
   0x5D, 0x92, 0x32, 0x6D, 0xFD, 0x6F, 0x7E, 0x62, 0x62, 0x5B, 0x43, 0x1D, 0x4F, 0x7D, 0x1F, 0x55, 
   0xC4, 0x7D, 0x7F, 0x7D, 0x96, 0x96, 0x9A, 0x79, 0x6C, 0xE4, 0x42, 0x3D, 0x72, 0x07, 0x5F, 0x6B, 
   0x47, 0x72, 0xC6, 0x82, 0x68, 0x7D, 0x4B, 0x6E, 0x7C, 0x4C, 0x85, 0x9E, 0x69, 0x52, 0xAF, 0x6F, 
   0x68, 0xA2, 0x62, 0x6D, 0x52, 0x28, 0x62, 0x6B, 0x39, 0x52, 0xEA, 0x73, 0x7A, 0xC7, 0x89, 0x6A, 
   0x47, 0x27, 0x5F, 0x5D, 0x00, 0x81, 0xA9, 0x61, 0x6F, 0xC0, 0xA7, 0x6E, 0x7B, 0x46, 0x61, 0x91, 
   0x19, 0x50, 0x97, 0x97, 0x56, 0x7D, 0x9C, 0x5E, 0xC7, 0x11, 0x8D, 0xC5, 0x15, 0x81, 0x5C, 0x77, 
   0x26, 0x45, 0x5C, 0x70, 0x97, 0x68, 0xD6, 0xD8, 0x7E, 0x2B, 0x99, 0x1E, 0x26, 0x7D, 0x46, 0xBB, 
   0xC1, 0x91, 0x9A, 0xC5, 0x63, 0x7B, 0x73, 0x18, 0x19, 0x4F, 0x4C, 0x36, 0x9A, 0x80, 0xF8, 0xC8, 
   0xA1, 0x96, 0x9E, 0x37, 0x00, 0x63, 0x00, 0x6A, 0x68, 0x8A, 0xA9, 0xAC, 0x99, 0x73, 0x9A, 0x00, 
   0x00, 0x5C, 0x1C, 0x3C, 0x79, 0xA2, 0xDE, 0xB3, 0x7A, 0x9F, 0xB8, 0x28, 0x02, 0x5B, 0x22, 0x35, 
   0x3E, 0x46, 0x87, 0xB8, 0x7B, 0x83, 0xD0, 0x60, 0x61, 0x69, 0x42, 0x67, 0x8A, 0x62, 0x9E, 0xAA, 
   0x5A, 0x78, 0xA5, 0x09, 0x00, 0x00, 0x21, 0x48, 0x97, 0x00, 0x37, 0xA7, 0x70, 0x5B, 0x62, 0xA5, 
   0x74, 0x6D, 0x44, 0x7B, 0x9A, 0x20, 0x74, 0x8E, 0x5D, 0x66, 0x71, 0x46, 0x2B, 0x4F, 0x0E, 0x00, 
   0x4B, 0x44, 0xA2, 0x93, 0x8B, 0xB0, 0xB9, 0x58, 0x44, 0x8D, 0x40, 0x69, 0xA2, 0x66, 0x9E, 0xCB, 
   0x4D, 0x1D, 0x33, 0x23, 0x00, 0x00, 0x18, 0x74, 0xB7, 0x75, 0x9E, 0xCF, 0x87, 0x5A, 0x6C, 0x57, 
   0x58, 0x59, 0x00, 0x3B, 0x59, 0x4E, 0x4C, 0xB9, 0x6B, 0xA1, 0x8A, 0x2B, 0x7C, 0x49, 0x14, 0x07, 
   0x4D, 0x64, 0x33, 0x76, 0x64, 0x6D, 0xA9, 0x36, 0x6E, 0x64, 0x41, 0x4C, 0x4D, 0x4D, 0x4C, 0x9D, 
   0x3D, 0x68, 0x81, 0x4D, 0x67, 0x74, 0x4C, 0x39, 0x4B, 0x30, 0x4B, 0x84, 0x3C, 0x6E, 0x8F, 0x4D, 
   0x58, 0x4A, 0x42, 0x58, 0x5C, 0x7B, 0x52, 0x7A, 0x3D, 0x4D, 0x9E, 0x3C, 0x7A, 0x8D, 0x3B, 0x41, 
   0x48, 0x40, 0x41, 0x54, 0x4C, 0x6F, 0xBB, 0x5E, 0x59, 0x77, 0x3D, 0x4E, 0x71, 0x60, 0x5F, 0x9A, 
   0x6B, 0x81, 0x7D, 0x15, 0x59, 0x76, 0x42, 0x41, 0x53, 0x8B, 0x5C, 0x59, 0x17, 0x40, 0xC0, 0x00, 
   0x4C, 0x82, 0x50, 0x64, 0x5E, 0x63, 0x70, 0x68, 0x53, 0x64, 0x52, 0x40, 0x51, 0x7B, 0x12, 0x1E, 
   0x88, 0x30, 0x5D, 0x7D, 0x76, 0x7B, 0x83, 0x65, 0x4E, 0x6C, 0x20, 0x59, 0x77, 0x4D, 0x59, 0x8D, 
   0x6A, 0x59, 0x5F, 0x36, 0x64, 0x1C, 0x3C, 0x4D, 0xAC, 0x4D, 0x58, 0xE5, 0x54, 0x4D, 0x4A, 0x38, 
   0x64, 0x20, 0x77, 0x5E, 0x8D, 0x5F, 0x63, 0xBB, 0x24, 0x50, 0x64, 0x18, 0x08, 0x26, 0x3C, 0x55, 
   0x62, 0x66, 0xBE, 0xD1, 0x78, 0x6E, 0xB0, 0x59, 0x39, 0x3D, 0x1E, 0x53, 0x70, 0x08, 0x53, 0x77, 
   0x4A, 0x38, 0x91, 0xA7, 0x51, 0xD2, 0x3A, 0xA7, 0x81, 0x38, 0x6D, 0x29, 0x4E, 0x21, 0x9A, 0x43, 
   0x42, 0xA6, 0x65, 0x75, 0x6C, 0x2C, 0x54, 0x6B, 0x32, 0x60, 0x61, 0x4F, 0x81, 0xA2, 0x6D, 0x57, 
   0xA8, 0x35, 0x00, 0x53, 0x4C, 0x33, 0x3E, 0x73, 0xFF, 0xB8, 0x40, 0x87, 0xF1, 0x29, 0x0D, 0x5A, 
   0x57, 0x44, 0x2A, 0x84, 0x93, 0xA1, 0x5F, 0x74, 0xA5, 0x00, 0x17, 0x4E, 0x07, 0x00, 0x21, 0x60, 
   0x6B, 0x80, 0x85, 0xBD, 0xC9, 0x47, 0x3C, 0x9E, 0x42, 0x15, 0x71, 0x48, 0x7A, 0x82, 0x54, 0xA0, 
   0x78, 0x60, 0x95, 0xA1, 0x49, 0x54, 0x7A, 0x38, 0x2B, 0xA8, 0x49, 0x74, 0x97, 0x67, 0x75, 0x6A, 
   0x51, 0x6A, 0x7D, 0x5C, 0x86, 0xDA, 0x50, 0x46, 0xA8, 0x44, 0x57, 0x63, 0x49, 0x52, 0x7F, 0x5B, 
   0x70, 0xAD, 0x51, 0x81, 0xA1, 0x52, 0x43, 0x51, 0x63, 0x5A, 0x95, 0x62, 0x71, 0xCD, 0x54, 0x87, 
   0x4A, 0x36, 0x52, 0x71, 0x45, 0x4C, 0xF4, 0x56, 0x6E, 0x76, 0x29, 0x73, 0x2B, 0x4C, 0x61, 0xBA, 
   0x69, 0x37, 0xC6, 0x64, 0x49, 0x4E, 0x41, 0x7D, 0x70, 0x02, 0x79, 0xAA, 0x59, 0x41, 0x84, 0x82, 
   0x4E, 0x74, 0x29, 0x6D, 0xC5, 0x63, 0xA3, 0xAA, 0xAD, 0x97, 0x92, 0x45, 0x60, 0x9A, 0x04, 0x1F, 
   0x32, 0x75, 0x51, 0x77, 0x86, 0x75, 0xDF, 0x13, 0x8D, 0x9F, 0x13, 0x65, 0x4D, 0x6A, 0x20, 0x2C, 
   0x7E, 0x7B, 0xB3, 0x88, 0xB3, 0xFF, 0x1F, 0x29, 0x62, 0x00, 0x22, 0x1B, 0x6F, 0x84, 0xBA, 0x91, 
   0x74, 0xB5, 0x29, 0x64, 0x77, 0x1D, 0x4E, 0x6C, 0x67, 0x92, 0xA0, 0x6D, 0x74, 0xC2, 0x33, 0x3A, 
   0x9E, 0x06, 0x4C, 0x69, 0x5D, 0x7B, 0x83, 0x71, 0x49, 0x51, 0x60, 0x88, 0x4F, 0x4E, 0x5F, 0xDD, 
   0x15, 0x32, 0xCA, 0x28, 0x83, 0x60, 0x77, 0x7F, 0xCB, 0xAC, 0x5D, 0xB9, 0x88, 0x68, 0x45, 0x29, 
   0x89, 0xAE, 0x25, 0x5F, 0xBE, 0x4C, 0x37, 0x40, 0x19, 0x54, 0x79, 0x28, 0x68, 0xB9, 0x66, 0x81, 
   0x78, 0x97, 0x9D, 0x7C, 0x80, 0x74, 0xF6, 0x39, 0x2E, 0xD3, 0x2B, 0x60, 0x5E, 0x63, 0x61, 0x61, 
   0x5E, 0x84, 0x8F, 0x4C, 0x73, 0xBD, 0x0F, 0x39, 0x8A, 0x56, 0x55, 0x68, 0x9C, 0x83, 0xA7, 0x89, 
   0x68, 0xB3, 0x1A, 0x62, 0xA2, 0x19, 0x62, 0x6E, 0x5F, 0x62, 0x90, 0x7D, 0x62, 0xD9, 0x61, 0x68, 
   0x3E, 0x49, 0x68, 0x71, 0x4D, 0x78, 0xDD, 0x74, 0x88, 0xA9, 0x24, 0x2C, 0x5C, 0x2A, 0x48, 0x62, 
   0x81, 0x6C, 0x50, 0x3F, 0x5E, 0xC8, 0x25, 0x82, 0xFF, 0xA4, 0x99, 0xAE, 0x82, 0x54, 0x83, 0x25, 
   0x69, 0xA1, 0x56, 0x62, 0x92, 0x76, 0x6D, 0x5C, 0x46, 0x72, 0x9A, 0x2D, 0x54, 0xAA, 0x22, 0x3D, 
   0x45, 0x15, 0x50, 0x70, 0xBF, 0x96, 0xDA, 0xCB, 0x9B, 0xCA, 0x43, 0x49, 0x95, 0x00, 0x2B, 0x64, 
   0x22, 0x59, 0x58, 0x64, 0x67, 0x9E, 0x73, 0x7A, 0xAB, 0x64, 0x9D, 0xA0, 0x69, 0x5E, 0x99, 0x79, 
   0x40, 0x81, 0x3F, 0x68, 0x71, 0x4A, 0x7F, 0xB6, 0x61, 0x62, 0xBB, 0x5B, 0x4C, 0x71, 0x45, 0x7B, 
   0x71, 0x5D, 0x8E, 0xA0, 0x69, 0x71, 0xA6, 0x73, 0x5F, 0xA0, 0x3F, 0x63, 0xB4, 0x2D, 0x62, 0x57, 
   0x5B, 0x7E, 0x3B, 0x67, 0x4A, 0xD7, 0x50, 0x4A, 0xE3, 0x4B, 0x74, 0x59, 0x6E, 0x3F, 0x64, 0x6E, 
   0xB8, 0x99, 0x39, 0xCD, 0xBC, 0x22, 0x00, 0x7E, 0x4C, 0x13, 0x78, 0xB3, 0xE1, 0xDD, 0x67, 0x6B, 
   0x80, 0x0A, 0x58, 0x4C, 0x33, 0x85, 0xAC, 0x7F, 0x53, 0x9C, 0x6A, 0x5F, 0x74, 0x7A, 0x8C, 0xB7, 
   0x5A, 0x68, 0xAF, 0x03, 0x5B, 0x51, 0x62, 0x48, 0x55, 0x6D, 0x7A, 0xA6, 0x23, 0x3B, 0x91, 0x33, 
   0x59, 0x86, 0x61, 0x8D, 0x8C, 0x73, 0x71, 0xAD, 0x5B, 0x69, 0x99, 0x21, 0x51, 0x59, 0x1C, 0x2F, 
   0x3D, 0x69, 0x59, 0xC8, 0x8D, 0x99, 0xCF, 0x49, 0x5C, 0x56, 0x53, 0x6C, 0x61, 0x73, 0x92, 0xEE, 
   0x48, 0x77, 0xAA, 0x19, 0x00, 0x00, 0x39, 0x29, 0x60, 0x1E, 0x00, 0x45, 0x80, 0xB7, 0xBD, 0x6B, 
   0xC0, 0xC8, 0x1C, 0x26, 0x2D, 0x60, 0x3C, 0x38, 0x71, 0x8B, 0x9B, 0x2C, 0x79, 0xB5, 0x2C, 0x2E, 
   0xAA, 0x55, 0x30, 0x5A, 0x74, 0xA4, 0x4B, 0x5E, 0xAA, 0xCF, 0x68, 0x4C, 0xFB, 0x54, 0x32, 0x41, 
   0x3B, 0x69, 0x2D, 0x35, 0x6E, 0xA9, 0x46, 0x47, 0x76, 0x5E, 0x42, 0x4F, 0x80, 0xA4, 0xAA, 0x57, 
   0x8D, 0x98, 0x1C, 0x20, 0x42, 0x37, 0x8B, 0x6F, 0x64, 0x9F, 0xB7, 0x31, 0x0D, 0x55, 0x41, 0x2D, 
   0x64, 0x41, 0x6D, 0x75, 0x36, 0x6E, 0x6F, 0x4D, 0x4C, 0x6A, 0x3D, 0x4C, 0x76, 0x59, 0x63, 0x8D, 
   0x4D, 0x79, 0x9C, 0x4C, 0x39, 0x56, 0x40, 0x3F, 0x45, 0x3B, 0x5C, 0x7F, 0x3C, 0x58, 0x8B, 0x5F, 
   0x69, 0x8A, 0x5F, 0x5E, 0x67, 0x3D, 0x64, 0x4A, 0x4D, 0x4D, 0x57, 0x47, 0x4D, 0x92, 0x4B, 0x7A, 
   0x9E, 0x18, 0x41, 0x59, 0x46, 0x41, 0x53, 0x48, 0x64, 0x75, 0x6B, 0x65, 0x8D, 0x59, 0x6A, 0x77, 
   0x0F, 0x59, 0x86, 0x53, 0x4D, 0x47, 0x6F, 0x5D, 0x4D, 0x41, 0x63, 0xB4, 0x4B, 0x4C, 0x81, 0x55, 
   0x4C, 0x52, 0x22, 0x63, 0x6D, 0x2E, 0x63, 0x57, 0x78, 0x57, 0x7A, 0x24, 0x35, 0x92, 0x25, 0x5D, 
   0x82, 0x81, 0x7B, 0x6B, 0x54, 0x4E, 0x70, 0x36, 0x59, 0x76, 0x35, 0x59, 0x76, 0x3C, 0x59, 0x76, 
   0x59, 0x59, 0x6B, 0x5F, 0x59, 0x61, 0x36, 0x64, 0xA1, 0x1A, 0x4D, 0xA1, 0x4E, 0x58, 0x7C, 0x7C, 
   0x4D, 0x35, 0x3E, 0x64, 0x40, 0x32, 0x64, 0x86, 0x6F, 0x5D, 0xAF, 0x52, 0x5C, 0x64, 0x0D, 0x14, 
   0x20, 0x2A, 0x55, 0x6D, 0x64, 0xC3, 0xC5, 0x59, 0x67, 0x93, 0x32, 0x16, 0x6A, 0x54, 0x7C, 0x6A, 
   0x48, 0x71, 0x72, 0x1B, 0x2D, 0xAC, 0x43, 0x5B, 0x77, 0x66, 0x6C, 0x32, 0x44, 0x3A, 0x68, 0x4F, 
   0x78, 0xF2, 0x4F, 0x77, 0x96, 0x43, 0x21, 0x2E, 0x32, 0x43, 0x82, 0x4E, 0x98, 0x73, 0x4A, 0x5E, 
   0x75, 0x56, 0x2F, 0xBA, 0x56, 0x2A, 0x87, 0x39, 0x4F, 0x55, 0x56, 0x9B, 0xA5, 0x45, 0x75, 0xA5, 
   0x35, 0x6E, 0x77, 0x84, 0x72, 0x86, 0x65, 0x47, 0xA0, 0x0D, 0x40, 0x59, 0x00, 0x3A, 0x25, 0x25, 
   0x43, 0x68, 0x79, 0x7F, 0xC8, 0x92, 0x97, 0x9E, 0x26, 0x0A, 0x72, 0x3C, 0x4C, 0xA0, 0x48, 0xCC, 
   0xAB, 0x50, 0x72, 0x50, 0x73, 0x54, 0x83, 0x7D, 0x91, 0xB2, 0x25, 0x4B, 0x7A, 0x14, 0x12, 0x9D, 
   0x5A, 0x7A, 0xA9, 0x73, 0xA9, 0x65, 0x68, 0x59, 0x93, 0x45, 0x2B, 0x68, 0x33, 0x6A, 0x99, 0x34, 
   0x6C, 0xE6, 0x5E, 0x8F, 0xA7, 0x6F, 0x6C, 0xA9, 0x57, 0x44, 0x98, 0x5B, 0x87, 0x07, 0x4D, 0x7A, 
   0x69, 0x34, 0x34, 0xFF, 0x11, 0x3F, 0x78, 0x23, 0x5C, 0x3F, 0x80, 0x80, 0xEE, 0x6A, 0x7C, 0x88, 
   0x42, 0x4E, 0x2D, 0x3B, 0x7F, 0xA0, 0x46, 0x6C, 0xCA, 0x51, 0x26, 0x90, 0x1A, 0x11, 0x4F, 0x61, 
   0x7C, 0x78, 0xB8, 0xCF, 0xAD, 0x2F, 0x69, 0xB9, 0x17, 0x45, 0x86, 0x7D, 0x71, 0x69, 0x5B, 0x6A, 
   0xB3, 0x2D, 0x42, 0x8A, 0x65, 0x64, 0x8E, 0x64, 0x5F, 0x81, 0x2A, 0x7C, 0x76, 0x3A, 0x8B, 0x99, 
   0x6E, 0x57, 0x7E, 0x25, 0x2A, 0xA2, 0x44, 0x75, 0xCA, 0xA5, 0xAA, 0x7E, 0x7C, 0x70, 0x5A, 0x12, 
   0x35, 0xA3, 0x0A, 0x18, 0x7B, 0x6C, 0x96, 0x77, 0x5C, 0x9C, 0xA0, 0x3A, 0x1E, 0xB7, 0x40, 0x19, 
   0x83, 0x51, 0xAA, 0x70, 0x3B, 0x99, 0x81, 0x52, 0x43, 0x8D, 0x5D, 0x37, 0x93, 0x1F, 0x6A, 0x41, 
   0x21, 0x60, 0x74, 0x58, 0x62, 0xFF, 0xAB, 0x8B, 0xE1, 0x5C, 0x74, 0x88, 0x3E, 0x56, 0x83, 0x79, 
   0x67, 0x5E, 0x2D, 0x5C, 0x8B, 0x20, 0x7E, 0x9D, 0x37, 0x6C, 0x8B, 0x45, 0x55, 0x7A, 0x59, 0x67, 
   0x71, 0x9A, 0x7E, 0xB3, 0x56, 0x61, 0xB6, 0x17, 0x2F, 0xAB, 0x72, 0x8B, 0x9A, 0x99, 0xA2, 0xA5, 
   0x30, 0x62, 0xD0, 0x01, 0x50, 0x60, 0x52, 0x60, 0x31, 0x71, 0x72, 0xAB, 0x5C, 0x61, 0xD1, 0x7E, 
   0x73, 0xAA, 0x44, 0x68, 0x99, 0x4E, 0x68, 0x8D, 0x6A, 0x5D, 0xBE, 0x3C, 0x74, 0xB0, 0x3C, 0x74, 
   0x59, 0x6A, 0x5D, 0x38, 0x54, 0x68, 0xEA, 0x54, 0x78, 0xE5, 0x6A, 0x8D, 0x5A, 0x47, 0x3C, 0x3C, 
   0x35, 0x31, 0xAA, 0x48, 0x6C, 0xB8, 0x50, 0x75, 0x3F, 0x4E, 0x77, 0xBA, 0x83, 0x99, 0xFF, 0xA5, 
   0x59, 0x7D, 0x64, 0x52, 0x00, 0x27, 0x73, 0xB3, 0x4B, 0x61, 0xC3, 0x50, 0x72, 0x4B, 0x23, 0x66, 
   0x67, 0x4C, 0x49, 0x9D, 0x4F, 0x4A, 0xA0, 0x84, 0x84, 0xA7, 0x83, 0xA0, 0xE5, 0x47, 0x43, 0x7C, 
   0x06, 0x25, 0x30, 0x2A, 0x76, 0xA3, 0x8F, 0x7F, 0xBC, 0x96, 0x64, 0xAC, 0x62, 0x86, 0x83, 0x16, 
   0x7A, 0x56, 0x38, 0x52, 0xEA, 0x83, 0x68, 0xBB, 0x71, 0x68, 0x20, 0x21, 0x57, 0x5F, 0x0D, 0x64, 
   0xC9, 0x94, 0x8E, 0xDD, 0xE9, 0x83, 0x98, 0x30, 0x65, 0x8F, 0x00, 0x6A, 0x81, 0x65, 0x69, 0x69, 
   0x8D, 0x5D, 0xB3, 0x2B, 0x89, 0xA1, 0x05, 0x49, 0x73, 0x7F, 0x00, 0x5E, 0x9E, 0xAB, 0x8B, 0x59, 
   0xF8, 0xFF, 0x40, 0x41, 0x7B, 0x34, 0x38, 0x57, 0x57, 0x86, 0xE4, 0x95, 0x7A, 0xA3, 0x60, 0x67, 
   0x57, 0x00, 0x32, 0x6D, 0x27, 0x1E, 0x8B, 0x91, 0xC6, 0xD7, 0xBF, 0xC6, 0xCB, 0x3F, 0x00, 0x67, 
   0x00, 0x23, 0x64, 0x85, 0xFF, 0x9B, 0x8B, 0x7C, 0x73, 0x02, 0x00, 0x4C, 0x30, 0x48, 0x9E, 0xB9, 
   0xD3, 0xD3, 0x6D, 0x99, 0xB4, 0x15, 0x18, 0x6C, 0x14, 0x12, 0x37, 0x49, 0xAD, 0x81, 0x74, 0x8C, 
   0xC6, 0x5E, 0x3C, 0x6B, 0x36, 0x48, 0x49, 0x7A, 0xA4, 0xB0, 0x79, 0x9E, 0xC6, 0x3E, 0x45, 0x7F, 
   0x37, 0x2C, 0x33, 0x64, 0x81, 0xA3, 0x6A, 0x61, 0x66, 0x86, 0x61, 0x5B, 0x0D, 0x45, 0x94, 0x0E, 
   0x69, 0x94, 0x99, 0x8D, 0x6B, 0x84, 0x6C, 0x45, 0x2F, 0x5B, 0x6B, 0x51, 0x66, 0xE0, 0x78, 0x98, 
   0xB3, 0x50, 0x47, 0x56, 0x2E, 0x41, 0x76, 0x83, 0xAC, 0xA2, 0x72, 0x72, 0x68, 0x26, 0x21, 0x56, 
   0x2B, 0x65, 0xBC, 0x69, 0xA4, 0x9F, 0x6F, 0x48, 0x47, 0x40, 0x3B, 0x4C, 0x1D, 0x4C, 0x80, 0x50, 
   0x49, 0xAF, 0x9A, 0xD1, 0x9E, 0x49, 0x73, 0x5D, 0x09, 0x00, 0x50, 0x6A, 0x3F, 0xA5, 0x6A, 0x67, 
   0x99, 0x25, 0x6E, 0x58, 0x41, 0x51, 0x4C, 0x54, 0x4C, 0x81, 0x65, 0x5D, 0xA9, 0x59, 0x73, 0x75, 
   0x4C, 0x39, 0x4B, 0x2F, 0x3F, 0x5C, 0x29, 0x62, 0x8A, 0x4C, 0x63, 0x6E, 0x53, 0x58, 0x6E, 0x4D, 
   0x4D, 0x79, 0x3C, 0x64, 0x7E, 0x36, 0x59, 0x60, 0x58, 0x64, 0x4A, 0x4C, 0x4D, 0x7A, 0x3B, 0x4D, 
   0xB5, 0x51, 0x74, 0xA4, 0x19, 0x30, 0x4C, 0x53, 0x47, 0x4B, 0x6A, 0x80, 0x80, 0x36, 0x4D, 0x97, 
   0x41, 0x3B, 0x41, 0x69, 0x5D, 0x53, 0x3B, 0x58, 0xBF, 0x19, 0x4D, 0x8C, 0x6E, 0x6F, 0x46, 0x5D, 
   0x63, 0x67, 0x39, 0x4B, 0x5D, 0x2C, 0x4A, 0x97, 0x05, 0x39, 0x81, 0x57, 0x63, 0x64, 0x8D, 0x7B, 
   0x6F, 0x49, 0x4E, 0x7A, 0x3C, 0x59, 0x75, 0x3B, 0x59, 0x75, 0x3B, 0x59, 0x75, 0x47, 0x59, 0x59, 
   0x42, 0x59, 0x7D, 0x54, 0x59, 0xC2, 0x4E, 0x59, 0x6D, 0x37, 0x64, 0x4A, 0x5F, 0x4D, 0x99, 0x42, 
   0x58, 0xA3, 0x3D, 0x52, 0x3B, 0x54, 0x64, 0x46, 0x49, 0x64, 0x81, 0x6A, 0x58, 0xB5, 0x40, 0x57, 
   0x81, 0x45, 0x2A, 0x14, 0x1D, 0x4E, 0x66, 0x31, 0x82, 0xCA, 0x94, 0x7D, 0x87, 0x94, 0x39, 0x59, 
   0x0F, 0x71, 0x7F, 0x02, 0x75, 0x58, 0x4D, 0x0F, 0x5E, 0x66, 0x33, 0xA4, 0x5B, 0xC9, 0xA0, 0x44, 
   0x8C, 0x6D, 0x3F, 0x40, 0x8B, 0x61, 0x66, 0xAD, 0x60, 0x4E, 0x5C, 0x1B, 0x37, 0x50, 0x32, 0x5A, 
   0x84, 0x65, 0xC5, 0x81, 0x49, 0x4B, 0xBF, 0x27, 0x00, 0x79, 0x39, 0x30, 0x19, 0x73, 0xDA, 0xA4, 
   0x6D, 0x97, 0xFF, 0x11, 0x28, 0x82, 0x3E, 0x37, 0x2F, 0x8D, 0x70, 0x72, 0x36, 0x5F, 0x89, 0x13, 
   0x4E, 0x6D, 0x32, 0x22, 0x3D, 0x58, 0x53, 0x9C, 0x98, 0xB6, 0xCD, 0x3D, 0x62, 0x9A, 0x26, 0x23, 
   0x77, 0x5B, 0x63, 0x93, 0x7E, 0x9D, 0x71, 0x66, 0x7A, 0x7D, 0x3B, 0x39, 0x8A, 0x1E, 0x55, 0xB3, 
   0x36, 0x56, 0xA2, 0x66, 0x52, 0x46, 0x62, 0x93, 0x48, 0x52, 0x6C, 0xB8, 0x47, 0x56, 0xBD, 0x4D, 
   0x73, 0x99, 0x7B, 0x74, 0xFF, 0x75, 0x79, 0xE3, 0x4A, 0x94, 0x1B, 0x42, 0x52, 0x4A, 0x3A, 0x39, 
   0xC2, 0x45, 0x5B, 0x5E, 0x2F, 0x6D, 0x7D, 0x42, 0x3A, 0xDA, 0x7C, 0x4E, 0x7F, 0x65, 0x90, 0x79, 
   0x42, 0xB3, 0x6F, 0x30, 0x88, 0xAA, 0x52, 0x33, 0xD8, 0x3C, 0x0F, 0x92, 0x48, 0x66, 0x6D, 0x44, 
   0x97, 0x93, 0x6C, 0x77, 0x88, 0x71, 0x71, 0x6D, 0x04, 0x3D, 0x86, 0x2D, 0x44, 0xA5, 0xAB, 0xA5, 
   0xE5, 0x4A, 0x7D, 0xD6, 0x05, 0x2C, 0x2C, 0x7C, 0x5E, 0x31, 0x91, 0x8B, 0xCC, 0x1C, 0x79, 0xC8, 
   0x00, 0x17, 0x71, 0x18, 0x24, 0x34, 0xB1, 0x99, 0xB9, 0xAD, 0xC8, 0xFF, 0x3D, 0x55, 0x7E, 0x00, 
   0x42, 0x20, 0x49, 0x73, 0x86, 0x4A, 0x78, 0xB0, 0x50, 0x22, 0x94, 0x41, 0x3B, 0x72, 0x4E, 0x99, 
   0x89, 0x87, 0x8F, 0xB2, 0x58, 0x55, 0x7A, 0x34, 0x81, 0xBE, 0x17, 0x48, 0x90, 0x2B, 0x49, 0x2A, 
   0x68, 0x83, 0x77, 0x8D, 0x7F, 0xD7, 0x4F, 0x57, 0xC9, 0x4E, 0x8A, 0xC2, 0x48, 0x56, 0xB9, 0x58, 
   0x29, 0x44, 0x6E, 0x85, 0x4F, 0x35, 0x97, 0xFF, 0x46, 0x68, 0xB5, 0x6D, 0x54, 0x20, 0x61, 0x58, 
   0x8C, 0x18, 0x2B, 0xB7, 0x20, 0x55, 0x7A, 0x95, 0xB9, 0x6C, 0xA1, 0x7B, 0xCF, 0x4A, 0x69, 0xFF, 
   0x36, 0x5C, 0x93, 0x30, 0x4A, 0x50, 0x5E, 0x6C, 0x75, 0x6A, 0x6C, 0x77, 0x32, 0x50, 0xB3, 0x2E, 
   0x61, 0x9F, 0xA7, 0x6D, 0x95, 0x84, 0x5D, 0xE9, 0x2B, 0x74, 0xA1, 0x23, 0x69, 0x2D, 0x45, 0x69, 
   0xAA, 0x41, 0x74, 0xC7, 0x70, 0x62, 0x4B, 0x4F, 0x5C, 0x9B, 0x7C, 0x7D, 0xCA, 0x75, 0x5F, 0xBE, 
   0x00, 0x4E, 0xA4, 0x47, 0x5A, 0x21, 0x82, 0x56, 0x62, 0x2A, 0x6F, 0xF5, 0x5A, 0x7C, 0x9E, 0xAB, 
   0x9E, 0xCB, 0x7C, 0x6A, 0xC1, 0x44, 0x46, 0x56, 0x25, 0x5C, 0x7B, 0x47, 0x6D, 0x80, 0x75, 0x73, 
   0xB4, 0x6E, 0x72, 0x97, 0x1D, 0x44, 0x70, 0x02, 0x5B, 0xA3, 0x82, 0x73, 0x8E, 0xB1, 0xA0, 0xB7, 
   0x43, 0x54, 0xAB, 0x1A, 0x2C, 0x66, 0x53, 0x66, 0x88, 0x76, 0x7F, 0x9A, 0x43, 0x6A, 0x80, 0x43, 
   0x81, 0xDB, 0x7C, 0x7A, 0xB8, 0x60, 0x40, 0x60, 0x2C, 0x68, 0x5A, 0x12, 0x6E, 0x8F, 0x8C, 0x5E, 
   0xB4, 0x99, 0x5F, 0xC1, 0x4F, 0x7C, 0xC6, 0x59, 0x77, 0x8B, 0x68, 0x65, 0x51, 0x60, 0x6A, 0xC1, 
   0x30, 0x74, 0xCF, 0x13, 0x5C, 0x38, 0x60, 0x2F, 0x11, 0x7A, 0x75, 0x99, 0x6A, 0xA4, 0xFF, 0x5F, 
   0x2E, 0xA8, 0x48, 0x52, 0xA6, 0x69, 0xEC, 0xD5, 0x78, 0x88, 0x88, 0x20, 0x23, 0x4C, 0x2B, 0x47, 
   0xA0, 0x82, 0x26, 0xA1, 0x56, 0x8F, 0x80, 0x61, 0x91, 0x97, 0x60, 0x76, 0xCA, 0x32, 0x91, 0x7E, 
   0x6A, 0x5C, 0x5A, 0x63, 0x38, 0x9D, 0x25, 0x5F, 0x9D, 0x48, 0x61, 0x7C, 0x92, 0x7F, 0x9A, 0x6F, 
   0x9A, 0xCC, 0x60, 0x70, 0x9C, 0x19, 0x29, 0x55, 0x00, 0x39, 0x54, 0x73, 0x6F, 0xB6, 0xB3, 0xA9, 
   0xC1, 0x47, 0x70, 0x53, 0x3A, 0x36, 0x5E, 0x55, 0x73, 0xD6, 0x54, 0x83, 0xAC, 0x31, 0x2C, 0x1D, 
   0x3C, 0x33, 0x6D, 0x75, 0xB1, 0xDA, 0x6A, 0x8D, 0xB1, 0x86, 0xB9, 0xD8, 0x02, 0x01, 0x2C, 0x24, 
   0x07, 0x31, 0x5F, 0x9E, 0x8F, 0x56, 0xB2, 0x9E, 0x47, 0x4C, 0x8F, 0x91, 0x5D, 0x6E, 0x6E, 0xAC, 
   0x8B, 0x33, 0x97, 0xD4, 0x37, 0x2C, 0xB2, 0x30, 0x00, 0x14, 0x42, 0x6B, 0x08, 0x5F, 0x94, 0xD1, 
   0x54, 0x50, 0xB7, 0x4E, 0x44, 0x5B, 0x68, 0x98, 0x86, 0x33, 0x57, 0x79, 0x15, 0x02, 0x40, 0x49, 
   0x90, 0x6F, 0x5A, 0xA1, 0xCB, 0x43, 0x38, 0x9C, 0x3D, 0x2A, 0x3F, 0x42, 0x57, 0x77, 0x53, 0x6E, 
   0xA4, 0x41, 0x51, 0x64, 0x26, 0x35, 0x58, 0x4E, 0x63, 0x86, 0x5F, 0x8A, 0x91, 0x4C, 0x4B, 0x5D, 
   0x29, 0x22, 0x51, 0x2F, 0x67, 0x7F, 0x52, 0x63, 0x80, 0x58, 0x58, 0x80, 0x58, 0x58, 0x69, 0x41, 
   0x58, 0x79, 0x2A, 0x4D, 0x73, 0x69, 0x64, 0x6C, 0x47, 0x59, 0x72, 0x2A, 0x64, 0x5C, 0x4C, 0x47, 
   0x6E, 0x3C, 0x4E, 0xAE, 0x53, 0x81, 0x85, 0x63, 0x59, 0x4B, 0x19, 0x41, 0x78, 0x3B, 0x4C, 0x5D, 
   0x84, 0x63, 0x6F, 0x2F, 0x58, 0xBF, 0x18, 0x52, 0x75, 0x68, 0x69, 0x4B, 0x41, 0x64, 0x72, 0x52, 
   0x6E, 0x51, 0x67, 0x4A, 0x85, 0x0B, 0x21, 0x81, 0x22, 0x44, 0x81, 0x57, 0x85, 0x75, 0x7B, 0x5E, 
   0x6E, 0x48, 0x5E, 0x5D, 0x2A, 0x59, 0x79, 0x3B, 0x59, 0x74, 0x52, 0x59, 0x5E, 0x41, 0x59, 0x70, 
   0x53, 0x59, 0x9F, 0x2C, 0x59, 0x7D, 0x66, 0x59, 0x6B, 0x77, 0x59, 0x64, 0x2B, 0x64, 0x6B, 0x13, 
   0x58, 0x99, 0x5E, 0x46, 0xA3, 0x59, 0x5D, 0x35, 0x54, 0x64, 0x4C, 0x42, 0x64, 0xA9, 0x62, 0x68, 
   0x9E, 0x33, 0x39, 0x5E, 0x00, 0x12, 0x30, 0x3B, 0x4D, 0x5A, 0x82, 0x82, 0xB3, 0x5B, 0x7D, 0xC4, 
   0x43, 0x43, 0x40, 0x36, 0x3C, 0x3F, 0x36, 0x65, 0x68, 0x59, 0x5B, 0xCB, 0x5A, 0x4B, 0x92, 0x3F, 
   0x6E, 0x00, 0x56, 0x69, 0x8F, 0x56, 0x73, 0xE7, 0x4A, 0x54, 0x6F, 0x43, 0x0F, 0x68, 0x59, 0x70, 
   0x73, 0x31, 0x8C, 0x8A, 0x36, 0x57, 0x8F, 0x4E, 0x2C, 0x72, 0x56, 0x1C, 0x55, 0x6D, 0x52, 0x52, 
   0x4F, 0x94, 0xAF, 0x27, 0x78, 0xA9, 0x2D, 0x2E, 0x5F, 0x62, 0x67, 0x98, 0x94, 0x9A, 0xB4, 0x32, 
   0x3E, 0x75, 0x00, 0x22, 0x41, 0x2D, 0x3C, 0x71, 0x7B, 0xBC, 0xC4, 0x6B, 0x88, 0x98, 0x44, 0x10, 
   0x76, 0x54, 0x4E, 0x98, 0x48, 0x88, 0x8C, 0x3C, 0x4B, 0x4E, 0x4D, 0x67, 0x93, 0x63, 0x78, 0x9A, 
   0x2A, 0x33, 0x68, 0x20, 0x29, 0x79, 0x67, 0x6B, 0x6B, 0x64, 0xA7, 0x91, 0x6C, 0x91, 0xB1, 0x77, 
   0x35, 0xAE, 0x48, 0x62, 0xD4, 0x51, 0x8A, 0x7C, 0x48, 0x8D, 0x6D, 0x2F, 0x35, 0xC4, 0x1E, 0x1D, 
   0x4A, 0x42, 0x7E, 0x0D, 0x88, 0x7F, 0xCC, 0x82, 0x58, 0xFD, 0x26, 0x32, 0x43, 0x30, 0x9C, 0x66, 
   0x59, 0xD6, 0xF0, 0x5A, 0x5C, 0xA1, 0x27, 0x08, 0x67, 0x55, 0x5B, 0xB5, 0x7D, 0x89, 0xB3, 0x53, 
   0x4B, 0x71, 0x14, 0x50, 0x64, 0x37, 0x41, 0x55, 0x98, 0x87, 0x92, 0x32, 0x72, 0xEA, 0x17, 0x68, 
   0xC3, 0x95, 0x8A, 0x81, 0x6D, 0x72, 0x67, 0x2D, 0x69, 0x88, 0x73, 0x44, 0x9F, 0x43, 0x2D, 0x9F, 
   0x00, 0x68, 0x6C, 0x57, 0x9E, 0x88, 0x9E, 0x66, 0x79, 0x44, 0x39, 0xA8, 0x3D, 0x83, 0xCF, 0x6F, 
   0x99, 0x7E, 0x45, 0x85, 0x71, 0x33, 0x00, 0x99, 0x12, 0x00, 0x88, 0x5E, 0xB5, 0x7D, 0x82, 0xBD, 
   0x85, 0x54, 0x5C, 0x98, 0x51, 0x3D, 0xC6, 0x22, 0x4F, 0x82, 0x18, 0x72, 0x77, 0x5B, 0x7E, 0xC1, 
   0x91, 0x56, 0xAA, 0x64, 0x78, 0x33, 0x41, 0x6C, 0x96, 0x47, 0x3A, 0xE2, 0x63, 0x6E, 0x7D, 0x26, 
   0x81, 0xA9, 0x55, 0x76, 0xB8, 0xB1, 0x6F, 0x4A, 0x71, 0x84, 0x94, 0x4B, 0x81, 0xD2, 0x1A, 0x13, 
   0x88, 0x00, 0x2A, 0x76, 0x6E, 0x60, 0x78, 0xB1, 0x9C, 0x99, 0x50, 0x80, 0xC3, 0x11, 0x40, 0xBE, 
   0x6C, 0x51, 0x94, 0x93, 0x8F, 0xA8, 0x48, 0x6D, 0x95, 0x19, 0x5C, 0x72, 0x41, 0x67, 0x52, 0x6C, 
   0x5C, 0xAA, 0x6E, 0x68, 0xFF, 0x84, 0x74, 0xA4, 0x59, 0x69, 0x2F, 0x2F, 0x69, 0x72, 0x23, 0x69, 
   0xA1, 0x5D, 0x69, 0xCF, 0x54, 0x84, 0x84, 0x7C, 0x67, 0x1A, 0x43, 0x39, 0xF4, 0x2C, 0x82, 0xFF, 
   0x86, 0x8D, 0x24, 0x31, 0x32, 0x54, 0x1B, 0x66, 0xEE, 0x8E, 0x6D, 0x4B, 0x57, 0x58, 0x4A, 0x36, 
   0x70, 0xFF, 0x8B, 0x92, 0xFF, 0x73, 0x5E, 0x78, 0x28, 0x57, 0x19, 0x55, 0x74, 0xCD, 0x8D, 0x74, 
   0xB6, 0x52, 0x6D, 0x6A, 0x27, 0x77, 0x9B, 0x16, 0x2D, 0x4B, 0x30, 0x5B, 0x69, 0x7E, 0x8A, 0xC8, 
   0xB3, 0x95, 0xEC, 0x77, 0x4F, 0x8F, 0x06, 0x2C, 0x49, 0x00, 0x66, 0x73, 0x69, 0x7F, 0xEC, 0x8D, 
   0x6A, 0xB9, 0x54, 0x86, 0x56, 0x20, 0x5E, 0x6D, 0x1D, 0x47, 0xC5, 0x92, 0x8B, 0xC0, 0xB5, 0x69, 
   0x76, 0x3B, 0x41, 0x91, 0x00, 0x64, 0x86, 0x8C, 0x7C, 0x82, 0xD6, 0x88, 0xE8, 0x28, 0x6B, 0xA6, 
   0x00, 0x69, 0x52, 0x53, 0x1F, 0x50, 0x88, 0x8D, 0x64, 0x45, 0xD6, 0xC3, 0x24, 0x00, 0x9A, 0x71, 
   0x15, 0xB3, 0x9A, 0xEB, 0xDF, 0x98, 0x97, 0xA7, 0x2D, 0x6C, 0x4E, 0x00, 0x4A, 0x5C, 0x36, 0x00, 
   0x8A, 0x94, 0x82, 0x97, 0xBC, 0xBB, 0xCA, 0x1F, 0x05, 0x6D, 0x00, 0x2F, 0x56, 0x90, 0xEC, 0xD4, 
   0xAE, 0xA1, 0xC3, 0x00, 0x00, 0x40, 0x1B, 0x06, 0x6D, 0xB5, 0xFF, 0xDF, 0x7B, 0xB3, 0xB0, 0x2E, 
   0x04, 0x52, 0x15, 0x2A, 0x5C, 0x38, 0x96, 0x9B, 0x78, 0x74, 0xBD, 0x62, 0x3A, 0x99, 0x2F, 0x2A, 
   0x48, 0x67, 0xAD, 0x9D, 0x71, 0x9B, 0xC9, 0x25, 0x31, 0x5A, 0x1F, 0x07, 0x1B, 0x69, 0x64, 0x9F, 
   0x59, 0x9B, 0xA9, 0x31, 0x64, 0x94, 0x23, 0x66, 0x7B, 0x00, 0x66, 0x7B, 0xB4, 0x92, 0x75, 0x6A, 
   0x41, 0x3E, 0x00, 0x03, 0x76, 0x39, 0x8F, 0xEB, 0x96, 0xA3, 0xA1, 0x5E, 0x6F, 0x35, 0x35, 0x5C, 
   0xA6, 0x6C, 0x85, 0xED, 0x64, 0x4D, 0x5B, 0x07, 0x02, 0x13, 0x0D, 0x48, 0x72, 0x71, 0xA6, 0x7A, 
   0x94, 0x85, 0x65, 0x5E, 0x5B, 0x93, 0x2E, 0x54, 0x8C, 0x38, 0x4D, 0x7F, 0x6B, 0x9B, 0x67, 0x42, 
   0x6B, 0x56, 0x00, 0x00, 0x72, 0x65, 0x58, 0x89, 0x7C, 0x9D, 0x9F, 0x3D, 0x64, 0x4E, 0x1A, 0x46, 
   0x42, 0x3D, 0x46, 0x92, 0x71, 0x5D, 0x8D, 0x70, 0x73, 0x7A, 0x35, 0x34, 0x46, 0x18, 0x3F, 0x68, 
   0x4B, 0x67, 0x90, 0x47, 0x63, 0x75, 0x58, 0x58, 0x75, 0x47, 0x58, 0x75, 0x30, 0x58, 0x80, 0x4C, 
   0x58, 0x6E, 0x52, 0x58, 0x62, 0x35, 0x4D, 0x73, 0x30, 0x64, 0x89, 0x5E, 0x59, 0x6B, 0x42, 0x53, 
   0x3D, 0x54, 0x5A, 0x55, 0x81, 0x8D, 0x9B, 0x1F, 0x70, 0x9B, 0x2F, 0x24, 0x34, 0x72, 0x57, 0x40, 
   0x17, 0x63, 0xC4, 0x39, 0x58, 0x85, 0x5C, 0x58, 0x51, 0x35, 0x52, 0x72, 0x57, 0x68, 0x56, 0x4B, 
   0x4B, 0x85, 0x24, 0x3F, 0x86, 0x57, 0x5B, 0x6A, 0x5D, 0x56, 0x6F, 0x34, 0x45, 0x80, 0x29, 0x51, 
   0x74, 0x57, 0x5D, 0x68, 0x63, 0x64, 0x73, 0x3C, 0x59, 0x5D, 0x41, 0x59, 0x75, 0x47, 0x59, 0x8D, 
   0x2B, 0x59, 0x82, 0x4E, 0x59, 0x59, 0x6C, 0x59, 0x6F, 0x55, 0x59, 0x75, 0x48, 0x5E, 0x6A, 0x35, 
   0x52, 0x6B, 0x35, 0x51, 0x99, 0x41, 0x35, 0x9D, 0x53, 0x63, 0x4C, 0x5E, 0x6F, 0x47, 0x24, 0x58, 
   0x9D, 0x34, 0x5C, 0xBF, 0x51, 0x50, 0x4C, 0x5C, 0x35, 0x30, 0x02, 0x5E, 0x8D, 0x3D, 0x87, 0xAB, 
   0x9A, 0x48, 0x79, 0x61, 0x21, 0x73, 0x2B, 0x88, 0x89, 0x19, 0x82, 0x56, 0x31, 0x22, 0x2F, 0x71, 
   0x3F, 0xB4, 0x56, 0xA1, 0x7D, 0x3F, 0x57, 0x5D, 0x44, 0x46, 0xE7, 0x6C, 0x99, 0x9D, 0x4E, 0x42, 
   0x68, 0x25, 0x13, 0x7C, 0x25, 0x6E, 0x4E, 0x54, 0x9B, 0x6B, 0x82, 0x49, 0xC2, 0x37, 0x00, 0x89, 
   0x15, 0x2E, 0x1D, 0x6C, 0xB6, 0x80, 0x67, 0x96, 0xD2, 0x3A, 0x35, 0x89, 0x4C, 0x62, 0x72, 0x73, 
   0x52, 0x88, 0x3F, 0x5E, 0x92, 0x21, 0x80, 0x53, 0x2E, 0x36, 0x59, 0x6A, 0x48, 0x8F, 0x9F, 0xB3, 
   0xA8, 0x43, 0x4C, 0x8C, 0x24, 0x08, 0x8C, 0x46, 0x70, 0x97, 0x64, 0xA0, 0x59, 0x59, 0x6E, 0x7C, 
   0x47, 0x45, 0x84, 0x2B, 0x4C, 0x99, 0x22, 0x54, 0xC8, 0x6A, 0x79, 0x69, 0x9A, 0xA3, 0x9E, 0x6C, 
   0x6A, 0xED, 0x4C, 0x62, 0x3C, 0x49, 0x71, 0x5E, 0x42, 0x3C, 0xFF, 0x36, 0x5D, 0x67, 0x37, 0x7F, 
   0x20, 0x60, 0x52, 0xC4, 0x67, 0x4D, 0x70, 0x5B, 0x65, 0x4C, 0x53, 0x77, 0xE9, 0x09, 0x61, 0xBF, 
   0x48, 0x4B, 0x92, 0x6D, 0x7F, 0xAD, 0x58, 0x8A, 0x7E, 0x74, 0x6B, 0x8D, 0x60, 0x62, 0xCA, 0x36, 
   0x48, 0x72, 0x1E, 0x2B, 0x4F, 0x36, 0x61, 0x89, 0x7C, 0x7B, 0xBF, 0x6B, 0x7D, 0x9E, 0x1C, 0x56, 
   0x87, 0x2F, 0x62, 0x71, 0xC8, 0xC2, 0xCC, 0x5F, 0x69, 0xC4, 0x00, 0x00, 0x44, 0x23, 0x28, 0x60, 
   0xB3, 0x97, 0xB6, 0x68, 0xA4, 0xC2, 0x00, 0x3D, 0x77, 0x2E, 0x1B, 0x33, 0x87, 0x99, 0x9C, 0x8D, 
   0xB5, 0xFF, 0x47, 0x2B, 0x7F, 0x0D, 0x1F, 0x44, 0x3B, 0x92, 0x8E, 0x65, 0x7D, 0x84, 0x76, 0x55, 
   0x92, 0x64, 0x6B, 0xB0, 0x18, 0x49, 0x8F, 0x2F, 0x67, 0x69, 0x54, 0x84, 0xCA, 0x84, 0x7F, 0xC9, 
   0x74, 0x61, 0x77, 0x2F, 0x66, 0x74, 0x45, 0x49, 0x4D, 0x51, 0x4B, 0x62, 0x36, 0x76, 0xDF, 0x6B, 
   0xB0, 0xFF, 0x50, 0x6B, 0xAA, 0x6E, 0x52, 0x35, 0x9F, 0x77, 0x6D, 0x35, 0x5A, 0xF5, 0x00, 0x48, 
   0x99, 0x5A, 0x71, 0x32, 0x67, 0x77, 0x73, 0x4C, 0x61, 0xF8, 0x32, 0x4B, 0x9E, 0x78, 0x7F, 0x5A, 
   0x73, 0x7F, 0xBC, 0x6D, 0x62, 0xCD, 0x59, 0x68, 0x82, 0x25, 0x68, 0x75, 0x3C, 0x6D, 0x91, 0x76, 
   0x6D, 0xD0, 0x43, 0x5D, 0x9C, 0x43, 0x6E, 0x75, 0x6B, 0x69, 0x92, 0x59, 0x69, 0xCB, 0x41, 0x69, 
   0x91, 0x35, 0x7F, 0x58, 0x69, 0x4B, 0xA9, 0x64, 0x5C, 0xDD, 0x3E, 0x72, 0x76, 0x61, 0x55, 0x59, 
   0x78, 0x60, 0xDC, 0x5A, 0x8D, 0xDF, 0x3D, 0x44, 0x3D, 0x48, 0x5B, 0x26, 0x5F, 0x73, 0xA7, 0x2C, 
   0x5E, 0xC3, 0x3F, 0x7B, 0xA4, 0x5D, 0x81, 0xE3, 0x86, 0x6F, 0xD5, 0x73, 0x5E, 0x54, 0x32, 0x6E, 
   0x83, 0x3B, 0x62, 0xD0, 0x5C, 0x73, 0x6E, 0x4A, 0x77, 0x5B, 0x12, 0x49, 0x6E, 0x43, 0x55, 0x88, 
   0xAC, 0x8A, 0xD4, 0x9F, 0x95, 0xBE, 0x07, 0x49, 0x6E, 0x0B, 0x26, 0x9B, 0x61, 0x66, 0xBD, 0x74, 
   0x7F, 0x6D, 0x31, 0x64, 0x57, 0x22, 0x92, 0xA9, 0x80, 0x81, 0xD4, 0xC0, 0x3C, 0xBD, 0x41, 0x6E, 
   0x9D, 0x00, 0x85, 0x57, 0x6D, 0x53, 0x6A, 0x85, 0x5F, 0xD8, 0x46, 0x99, 0xFA, 0x57, 0x7C, 0x80, 
   0x4B, 0x16, 0x23, 0x5B, 0x83, 0x84, 0x44, 0xC7, 0xFF, 0x44, 0x27, 0x6A, 0x3A, 0x48, 0x54, 0x65, 
   0x9D, 0xF9, 0xA4, 0x55, 0xB4, 0x75, 0x7C, 0x46, 0x2E, 0x82, 0xAA, 0x49, 0x38, 0x9E, 0x54, 0xB4, 
   0x5F, 0x59, 0x8A, 0xB9, 0x58, 0x0A, 0xB2, 0x46, 0x4D, 0x6B, 0x50, 0x87, 0x64, 0x3E, 0x50, 0x78, 
   0x19, 0x69, 0xCB, 0x71, 0x8D, 0xBB, 0xA6, 0x7C, 0x81, 0x60, 0x6A, 0xA0, 0x3F, 0x94, 0x97, 0x2C, 
   0x37, 0x45, 0x05, 0x20, 0x51, 0x6E, 0x81, 0xD5, 0xAE, 0xA9, 0xCF, 0x46, 0x46, 0x4F, 0x1B, 0x3F, 
   0x64, 0x69, 0x71, 0xC3, 0x58, 0xA3, 0x99, 0x4C, 0x29, 0x25, 0x2F, 0x06, 0x53, 0x58, 0x6F, 0x95, 
   0x5E, 0x95, 0xC6, 0x48, 0x59, 0x8A, 0x2B, 0x4F, 0x39, 0x1A, 0x39, 0x0D, 0x65, 0xA5, 0xA4, 0x60, 
   0x99, 0xA3, 0x50, 0x1B, 0x9F, 0x55, 0x2E, 0x73, 0x50, 0xA2, 0x7F, 0x3A, 0xBE, 0xDF, 0x73, 0x76, 
   0x91, 0x72, 0x17, 0x10, 0x31, 0x4E, 0x4E, 0x3B, 0x98, 0xDC, 0x42, 0x32, 0x86, 0x5A, 0x2D, 0x23, 
   0x70, 0xAB, 0x73, 0x35, 0x7D, 0xB9, 0x28, 0x21, 0x75, 0x5A, 0x8C, 0x69, 0x65, 0x9A, 0xA7, 0x2C, 
   0x09, 0x88, 0x59, 0x17, 0x26, 0x4E, 0x57, 0x6A, 0x4E, 0x69, 0xBB, 0x59, 0x6F, 0x82, 0x2C, 0x2B, 
   0x4E, 0x4A, 0x5E, 0x7C, 0x8E, 0x96, 0xAF, 0x36, 0x45, 0x5E, 0x18, 0x28, 0x4B, 0x3A, 0x56, 0x7F, 
   0x4C, 0x68, 0x7A, 0x6A, 0x52, 0x8C, 0x53, 0x58, 0x6F, 0x30, 0x58, 0x75, 0x3B, 0x58, 0x75, 0x52, 
   0x58, 0x7A, 0x52, 0x58, 0x85, 0x35, 0x58, 0x7F, 0x4C, 0x4D, 0x6C, 0x48, 0x53, 0x87, 0x54, 0x65, 
   0x69, 0x5F, 0x70, 0x3C, 0x20, 0x37, 0x7D, 0x58, 0x5E, 0x96, 0x6D, 0x74, 0x6F, 0x0B, 0x41, 0xA7, 
   0x2C, 0x51, 0x56, 0x49, 0x68, 0x44, 0x56, 0x58, 0x8D, 0x5D, 0x6E, 0x67, 0x4B, 0x4B, 0x6E, 0x0D, 
   0x34, 0x9D, 0x3C, 0x57, 0x7B, 0x8D, 0x7F, 0x75, 0x6A, 0x51, 0x80, 0x18, 0x34, 0x69, 0x27, 0x5B, 
   0x74, 0x2E, 0x45, 0x8A, 0x52, 0x5D, 0x4B, 0x6A, 0x5E, 0x74, 0x48, 0x59, 0x8C, 0x2B, 0x59, 0x81, 
   0x5F, 0x59, 0x64, 0x59, 0x59, 0x75, 0x37, 0x59, 0x75, 0x37, 0x59, 0x75, 0x5F, 0x59, 0x75, 0x4D, 
   0x64, 0x6A, 0x2A, 0x5D, 0x65, 0x46, 0x57, 0x9E, 0x4B, 0x40, 0x8C, 0x62, 0x57, 0x46, 0x2A, 0x63, 
   0x51, 0x58, 0x5D, 0x7A, 0x8B, 0x68, 0xA8, 0x18, 0x57, 0x7F, 0x17, 0x40, 0x23, 0x35, 0x1F, 0x2A, 
   0x4F, 0x7C, 0xC1, 0x8F, 0x99, 0xE5, 0x60, 0x49, 0x78, 0x08, 0x38, 0x11, 0x30, 0x76, 0x73, 0x5F, 
   0x66, 0xDB, 0x4F, 0x2E, 0x69, 0x44, 0x5D, 0x37, 0x4F, 0x97, 0x6D, 0x55, 0x8A, 0xD0, 0x49, 0x37, 
   0xA1, 0x42, 0x1E, 0x2C, 0x48, 0x57, 0x58, 0x5E, 0x90, 0x8C, 0x35, 0x6C, 0x9F, 0x13, 0x1F, 0x82, 
   0x48, 0x00, 0x71, 0x61, 0x51, 0x5C, 0x67, 0x9A, 0x92, 0x45, 0x7A, 0x9B, 0x19, 0x00, 0x6F, 0x6A, 
   0x7C, 0x96, 0x9D, 0xB5, 0xB1, 0x2E, 0x53, 0x6F, 0x00, 0x1D, 0x29, 0x50, 0x67, 0x69, 0x69, 0x6D, 
   0xB0, 0x6F, 0x51, 0x8A, 0x2F, 0x4B, 0x80, 0x35, 0x47, 0xAE, 0x58, 0x60, 0x7B, 0x4E, 0x6E, 0x38, 
   0x71, 0x70, 0x96, 0x44, 0x71, 0xDE, 0x28, 0x6B, 0x74, 0x5D, 0x3E, 0xC9, 0x6F, 0x5D, 0xA5, 0x75, 
   0xD5, 0x21, 0x56, 0x8A, 0x88, 0x21, 0x0A, 0xD4, 0x37, 0x52, 0x59, 0x49, 0x70, 0xA3, 0x78, 0x81, 
   0xF2, 0x73, 0x65, 0x89, 0x39, 0x38, 0x37, 0x3D, 0x72, 0x34, 0x54, 0xB0, 0xBC, 0x6B, 0x3D, 0xFF, 
   0x06, 0x10, 0x99, 0x5E, 0x6E, 0x6F, 0xCB, 0xDD, 0xD3, 0x63, 0xA2, 0x76, 0x16, 0x24, 0x52, 0x36, 
   0x1A, 0x96, 0x58, 0x4C, 0xB4, 0x5D, 0x6B, 0x97, 0x09, 0x57, 0x85, 0x4F, 0x5F, 0x56, 0xA0, 0x8E, 
   0x4C, 0x4A, 0x72, 0xCC, 0x32, 0x54, 0xD3, 0x70, 0x59, 0xAA, 0x21, 0x4D, 0x68, 0x4F, 0x69, 0x56, 
   0xA3, 0x7B, 0x9F, 0x62, 0x48, 0xB6, 0x00, 0x6B, 0x6C, 0x1B, 0xAA, 0x70, 0x7E, 0x64, 0x83, 0x4E, 
   0x02, 0x91, 0x49, 0x5A, 0xD6, 0x67, 0xBD, 0x86, 0x72, 0xA6, 0x68, 0x53, 0x2D, 0x74, 0x2A, 0x3C, 
   0xB5, 0x35, 0x5A, 0x9A, 0x30, 0x83, 0x6A, 0x44, 0x7F, 0xD2, 0x95, 0x5D, 0xD2, 0x61, 0x73, 0x6F, 
   0x27, 0x7D, 0xAB, 0x5F, 0x38, 0xA2, 0x44, 0x33, 0x3B, 0x2F, 0x9C, 0x55, 0x6A, 0x87, 0xE8, 0x66, 
   0x60, 0xD4, 0x78, 0x8C, 0x6F, 0x4A, 0x7E, 0xD9, 0x4E, 0x16, 0xA3, 0x54, 0x44, 0x28, 0x7B, 0xA6, 
   0x94, 0x68, 0x9B, 0xB2, 0x0F, 0x50, 0xA7, 0x0A, 0x2D, 0x8A, 0x74, 0x72, 0x73, 0x9A, 0x8A, 0x90, 
   0x62, 0x6D, 0x9E, 0x4A, 0x51, 0xB2, 0x38, 0x62, 0xAD, 0x82, 0x79, 0x9C, 0x4E, 0x5D, 0xD1, 0x36, 
   0x62, 0x60, 0x52, 0x79, 0x0F, 0x3C, 0x69, 0x96, 0x43, 0x69, 0xFF, 0x94, 0x69, 0xB8, 0x83, 0x7F, 
   0x71, 0x3C, 0x46, 0x5A, 0x23, 0x62, 0xCD, 0x1E, 0x7F, 0xFF, 0x82, 0x6D, 0x37, 0x7E, 0x6C, 0x3D, 
   0x35, 0x44, 0xFF, 0x78, 0x66, 0xAE, 0x92, 0x82, 0x29, 0x0E, 0x44, 0xA5, 0x40, 0x55, 0xAC, 0x69, 
   0x6D, 0x58, 0x21, 0x63, 0x62, 0x5D, 0x6A, 0xE9, 0xA9, 0x81, 0xFF, 0x74, 0x6F, 0x8B, 0x1C, 0x69, 
   0x57, 0x41, 0x5D, 0x70, 0x5E, 0x62, 0x86, 0x6F, 0x78, 0x97, 0x41, 0x60, 0x9D, 0x52, 0x38, 0x74, 
   0x3C, 0x55, 0x48, 0x54, 0x7F, 0xAD, 0x92, 0xA6, 0xFF, 0x6E, 0x5B, 0x9C, 0x22, 0x21, 0x28, 0x00, 
   0x60, 0x6D, 0x37, 0x74, 0xDD, 0xA8, 0x76, 0xAC, 0xAE, 0x8D, 0xA7, 0x2F, 0x6A, 0xB1, 0x06, 0x47, 
   0x8D, 0x78, 0x69, 0x5F, 0x94, 0x85, 0xAF, 0x27, 0x4C, 0xD6, 0x00, 0x58, 0x59, 0x97, 0x56, 0x6C, 
   0xBB, 0xA2, 0xCF, 0x4E, 0xB8, 0xE1, 0x1E, 0x1D, 0x73, 0x4B, 0x33, 0x93, 0x73, 0xCC, 0xBE, 0x79, 
   0x76, 0x5C, 0x34, 0x3A, 0x72, 0x29, 0x28, 0xB7, 0x74, 0x43, 0x8B, 0x86, 0xC4, 0xA2, 0x6C, 0xD5, 
   0xD9, 0x2F, 0x31, 0x7B, 0x00, 0x1B, 0x44, 0x7E, 0x91, 0x81, 0xB0, 0x79, 0x91, 0x00, 0x00, 0x49, 
   0x07, 0x3C, 0x7B, 0xDE, 0xFF, 0xFF, 0xAB, 0xFF, 0xFF, 0x30, 0x00, 0x50, 0x00, 0x00, 0x30, 0x17, 
   0xAF, 0x90, 0x91, 0xB7, 0xBE, 0x92, 0x44, 0x9B, 0x3C, 0x53, 0x67, 0x67, 0x96, 0x76, 0x69, 0x93, 
   0xD5, 0x00, 0x1D, 0x7C, 0x1C, 0x05, 0x1F, 0x6D, 0x95, 0x8C, 0x73, 0x85, 0xA5, 0x24, 0x20, 0x6E, 
   0x2B, 0x34, 0x6A, 0x92, 0xC3, 0xDD, 0x80, 0x6D, 0x6B, 0xB1, 0x78, 0x60, 0x00, 0x3A, 0x47, 0x33, 
   0x7F, 0xD7, 0xD3, 0xB8, 0x8F, 0x4A, 0x51, 0x50, 0x00, 0x3E, 0xA5, 0x65, 0x92, 0xE1, 0x71, 0x6E, 
   0x60, 0x32, 0x39, 0x09, 0x32, 0x56, 0x87, 0x60, 0x84, 0xC7, 0x88, 0x78, 0x88, 0x5E, 0x43, 0x68, 
   0x1E, 0x37, 0x56, 0x3F, 0x60, 0x6D, 0x6C, 0xAF, 0x8A, 0x43, 0x7F, 0x91, 0x0A, 0x10, 0x7F, 0x65, 
   0x5E, 0x7D, 0x6B, 0x74, 0x6F, 0x31, 0x51, 0x29, 0x1F, 0x40, 0x5D, 0x32, 0x30, 0x92, 0x78, 0x7C, 
   0xA5, 0x78, 0x92, 0x82, 0x3D, 0x2F, 0x4D, 0x1E, 0x34, 0x80, 0x46, 0x67, 0x80, 0x57, 0x51, 0x63, 
   0x47, 0x58, 0x69, 0x58, 0x6F, 0x7A, 0x3C, 0x4D, 0x75, 0x47, 0x58, 0x75, 0x57, 0x58, 0x75, 0x3B, 
   0x58, 0x75, 0x3B, 0x58, 0x80, 0x52, 0x58, 0x84, 0x36, 0x47, 0x6B, 0x42, 0x6A, 0x42, 0x6A, 0x70, 
   0x74, 0x2B, 0x4D, 0x7A, 0x48, 0x41, 0x3C, 0x6F, 0x52, 0x56, 0x46, 0x64, 0xE7, 0x27, 0x74, 0x97, 
   0x3D, 0x2F, 0x3E, 0x32, 0x40, 0x64, 0x39, 0x7E, 0x48, 0x67, 0x4B, 0x67, 0x24, 0x34, 0x9C, 0x41, 
   0x57, 0x7B, 0x76, 0x6F, 0x75, 0x49, 0x59, 0x69, 0x48, 0x6F, 0x6E, 0x5D, 0x57, 0x74, 0x2E, 0x39, 
   0x7F, 0x22, 0x44, 0x5D, 0x3A, 0x57, 0x74, 0x5E, 0x69, 0x80, 0x54, 0x5E, 0x7A, 0x4E, 0x59, 0x5E, 
   0x5F, 0x59, 0x7A, 0x31, 0x59, 0x75, 0x3C, 0x59, 0x75, 0x53, 0x59, 0x75, 0x37, 0x59, 0x75, 0x70, 
   0x5E, 0x6A, 0x6A, 0x52, 0x7B, 0x34, 0x68, 0x6B, 0x10, 0x4B, 0xA3, 0x06, 0x34, 0xA1, 0x85, 0x62, 
   0x23, 0x6A, 0x63, 0x4B, 0x1F, 0x52, 0xBE, 0x46, 0x68, 0x90, 0x4B, 0x3A, 0x45, 0x40, 0x2F, 0x50, 
   0x41, 0x70, 0x62, 0x49, 0x8D, 0x91, 0x6C, 0x3D, 0x4A, 0x65, 0x43, 0x8A, 0x3C, 0x65, 0xC3, 0x08, 
   0x5F, 0x45, 0x59, 0x22, 0x5B, 0x71, 0x73, 0x85, 0x3E, 0x9B, 0x5F, 0x2C, 0x34, 0x89, 0x43, 0x6B, 
   0xBC, 0x60, 0x80, 0x77, 0x81, 0x40, 0x70, 0x24, 0x28, 0x7A, 0x01, 0x66, 0x52, 0x5D, 0x99, 0x75, 
   0x64, 0x31, 0xA3, 0x49, 0x00, 0x60, 0x33, 0x47, 0x41, 0x35, 0x98, 0x9B, 0x70, 0xA1, 0xD7, 0x54, 
   0x6E, 0x9E, 0x5F, 0x55, 0x68, 0x6F, 0x58, 0x99, 0x3F, 0x67, 0x90, 0x15, 0x43, 0x4A, 0x2C, 0x1B, 
   0x51, 0x56, 0x61, 0x9D, 0x6E, 0x9B, 0x9B, 0x46, 0x3B, 0x75, 0x24, 0x1F, 0x88, 0x47, 0x6D, 0xA5, 
   0x55, 0xA4, 0x79, 0x6E, 0x8F, 0x82, 0x90, 0x6C, 0xC8, 0x2E, 0x3D, 0xB0, 0x21, 0x4E, 0x41, 0x5A, 
   0x71, 0x52, 0x66, 0x77, 0xCA, 0x44, 0x60, 0x88, 0x2E, 0x4F, 0x4D, 0x62, 0x76, 0xCD, 0x6E, 0x49, 
   0xF5, 0x56, 0x6C, 0x5A, 0x4F, 0x8A, 0x6F, 0x21, 0x73, 0xA2, 0x39, 0x49, 0x6B, 0x74, 0x43, 0x8A, 
   0x7A, 0x77, 0xEC, 0x41, 0x57, 0xA3, 0x57, 0x81, 0x79, 0x61, 0xB3, 0xAA, 0x44, 0x60, 0x54, 0x3D, 
   0x34, 0x77, 0x75, 0x48, 0xD9, 0x47, 0x48, 0xBB, 0x30, 0x4A, 0x7A, 0x43, 0x74, 0x50, 0x7D, 0x87, 
   0x9B, 0x97, 0x80, 0xAE, 0x00, 0x1A, 0x8D, 0x00, 0x55, 0x72, 0xF1, 0xC8, 0xC7, 0xA1, 0x94, 0xD0, 
   0x00, 0x20, 0x3F, 0x22, 0x2B, 0x60, 0x82, 0x9E, 0xD8, 0x3D, 0xAE, 0x9A, 0x00, 0x13, 0x65, 0x3A, 
   0x00, 0x3F, 0x61, 0xA0, 0x97, 0xAE, 0xD0, 0xF4, 0x79, 0x4C, 0x83, 0x1A, 0x60, 0x88, 0x0C, 0x43, 
   0x8D, 0x1F, 0x4F, 0x5D, 0x72, 0x7E, 0xDD, 0x9B, 0x7F, 0xD3, 0x5C, 0x6D, 0x7C, 0x31, 0x5B, 0xAD, 
   0x3B, 0x4F, 0xAB, 0x25, 0x50, 0x5B, 0x4F, 0x74, 0x8E, 0x5D, 0x86, 0xD2, 0x59, 0x6F, 0x55, 0x65, 
   0x69, 0x2B, 0x6B, 0x6D, 0xFF, 0x58, 0x4A, 0xFF, 0x00, 0x50, 0xB2, 0x61, 0x68, 0x1F, 0xD9, 0x8B, 
   0x3C, 0x59, 0x74, 0xFF, 0x00, 0x61, 0xD5, 0x14, 0x60, 0x1C, 0x4F, 0x66, 0x81, 0x63, 0x5B, 0xA5, 
   0x6B, 0x4A, 0x6F, 0x33, 0x73, 0x7E, 0x61, 0x74, 0xD8, 0x67, 0x69, 0xFF, 0x88, 0x74, 0x8E, 0x31, 
   0x5D, 0x2D, 0x24, 0x5D, 0x5E, 0x4C, 0x74, 0x8F, 0x54, 0x69, 0xBC, 0x56, 0x7F, 0xCF, 0x8F, 0x46, 
   0x6A, 0x70, 0x62, 0xDA, 0x00, 0x90, 0xB0, 0x2F, 0x6E, 0x00, 0x5F, 0x62, 0xE9, 0x67, 0x73, 0xFF, 
   0x7E, 0x72, 0x00, 0x4A, 0x3E, 0x6A, 0x42, 0x7D, 0xFF, 0x68, 0x77, 0xC0, 0x34, 0x55, 0x4B, 0x30, 
   0x67, 0x5C, 0x6B, 0x68, 0xA8, 0x84, 0x69, 0x96, 0x46, 0x6F, 0x9A, 0x68, 0x75, 0xFF, 0x84, 0x63, 
   0x94, 0x33, 0x6E, 0x12, 0x2C, 0x79, 0x9F, 0x77, 0x62, 0xD3, 0x98, 0x7E, 0xB0, 0x3A, 0x60, 0x6F, 
   0x00, 0x44, 0x3B, 0x2F, 0x61, 0x99, 0xAF, 0x74, 0xD5, 0x9D, 0x9B, 0xA3, 0x0D, 0x55, 0x5E, 0x00, 
   0x32, 0x7B, 0x8E, 0x72, 0xC8, 0xBE, 0x6E, 0xC3, 0x40, 0x5F, 0x89, 0x0B, 0x92, 0x71, 0x66, 0x64, 
   0x72, 0x9A, 0x41, 0xEA, 0x43, 0x79, 0xD1, 0x0F, 0x73, 0x24, 0x3E, 0x00, 0x36, 0x75, 0x79, 0xA9, 
   0x83, 0xFE, 0xFF, 0x7E, 0x4E, 0xBE, 0x49, 0x2A, 0x5B, 0x4D, 0xBD, 0xD4, 0x78, 0x72, 0xB2, 0x4D, 
   0x6E, 0x37, 0x0E, 0x54, 0x5E, 0x2D, 0x00, 0xB1, 0x8C, 0x7C, 0xA9, 0xBA, 0xE6, 0xC0, 0x56, 0x64, 
   0xAD, 0x07, 0x66, 0x76, 0x3D, 0xA6, 0x73, 0x5F, 0x52, 0x8E, 0x11, 0x00, 0x7C, 0x68, 0x59, 0x77, 
   0x80, 0x97, 0x84, 0x41, 0x9F, 0xA2, 0x51, 0xAF, 0xE1, 0x4A, 0x61, 0x79, 0x07, 0x00, 0x3F, 0x5F, 
   0x6C, 0xC0, 0xB5, 0xCE, 0xCF, 0x4D, 0x66, 0x39, 0x23, 0x30, 0x76, 0x5F, 0x89, 0xD6, 0x58, 0x8C, 
   0x94, 0x4A, 0x16, 0x1A, 0x1B, 0x03, 0x5E, 0x49, 0x67, 0xA5, 0x4B, 0x9D, 0xA7, 0x5D, 0x61, 0x7F, 
   0x42, 0x45, 0x52, 0x5E, 0x89, 0xB3, 0x59, 0x85, 0x9B, 0x59, 0x9B, 0xA6, 0x7A, 0x34, 0x88, 0x4B, 
   0x40, 0x4F, 0x1C, 0x91, 0x88, 0x6B, 0xB8, 0xE2, 0x5F, 0x52, 0x8F, 0x36, 0x00, 0x15, 0x24, 0x2C, 
   0x3C, 0x43, 0xA0, 0xCC, 0x78, 0x7F, 0x7D, 0x78, 0x3B, 0x44, 0x5F, 0x95, 0xAA, 0x35, 0x93, 0xAE, 
   0x28, 0x04, 0x67, 0x5A, 0x69, 0x1C, 0x5A, 0x9A, 0x71, 0x33, 0x10, 0xA6, 0x55, 0x2C, 0x79, 0x60, 
   0x93, 0x67, 0x42, 0x87, 0xB5, 0x41, 0x41, 0x6E, 0x2B, 0x0D, 0x00, 0x38, 0x53, 0x74, 0x83, 0xBA, 
   0xD1, 0x6B, 0x4D, 0x7B, 0x08, 0x23, 0x47, 0x3B, 0x57, 0x75, 0x69, 0x74, 0x98, 0x47, 0x52, 0x81, 
   0x3B, 0x58, 0x63, 0x35, 0x4D, 0x69, 0x47, 0x6F, 0x80, 0x63, 0x4D, 0x75, 0x35, 0x58, 0x75, 0x46, 
   0x58, 0x80, 0x3B, 0x58, 0x74, 0x3C, 0x4D, 0x78, 0x64, 0x5E, 0x71, 0x6F, 0x7B, 0x59, 0x1A, 0x4D, 
   0x64, 0x3C, 0x41, 0x6F, 0x75, 0x63, 0x42, 0x41, 0x58, 0x7C, 0x24, 0x4D, 0x83, 0x61, 0x64, 0x78, 
   0x4A, 0x7A, 0x82, 0x49, 0x45, 0x43, 0x43, 0x4A, 0x5A, 0x00, 0x44, 0x7E, 0x5D, 0x57, 0x8B, 0x7B, 
   0x6F, 0x7A, 0x4E, 0x59, 0x63, 0x31, 0x59, 0x74, 0x3C, 0x59, 0x74, 0x5E, 0x6F, 0x79, 0x52, 0x57, 
   0x5D, 0x3A, 0x39, 0x6E, 0x2E, 0x4B, 0x97, 0x29, 0x68, 0x75, 0x64, 0x4D, 0x63, 0x6B, 0x64, 0x69, 
   0x26, 0x59, 0x7A, 0x41, 0x59, 0x75, 0x47, 0x59, 0x75, 0x3C, 0x59, 0x75, 0x53, 0x59, 0x6A, 0x3D, 
   0x64, 0x81, 0x75, 0x52, 0x81, 0x46, 0x5D, 0x80, 0x0C, 0x57, 0x62, 0x45, 0x56, 0x57, 0x5D, 0x2E, 
   0x90, 0x47, 0x57, 0x6D, 0x3C, 0x7A, 0x45, 0x53, 0x42, 0x68, 0x5E, 0x64, 0xAD, 0x46, 0x74, 0xA0, 
   0x23, 0x46, 0x37, 0x24, 0x30, 0x00, 0x59, 0x6A, 0xA4, 0x8E, 0x98, 0xFF, 0x49, 0x2C, 0x6E, 0x1F, 
   0x3D, 0x21, 0x3C, 0x9F, 0x44, 0x5F, 0x5B, 0xA1, 0x49, 0x22, 0x9C, 0x3E, 0x60, 0x41, 0x60, 0x72, 
   0x4E, 0x54, 0x81, 0xEF, 0x3C, 0x51, 0x99, 0x24, 0x16, 0x36, 0x46, 0x3E, 0x62, 0x4C, 0x83, 0x8A, 
   0x47, 0x77, 0x59, 0x3C, 0x32, 0x77, 0x16, 0x00, 0x75, 0x58, 0x63, 0x67, 0x98, 0xFF, 0xBF, 0x43, 
   0x7A, 0xAE, 0x15, 0x11, 0x74, 0x75, 0x80, 0x8F, 0x8A, 0x7E, 0xA3, 0x2C, 0x16, 0x67, 0x08, 0x43, 
   0x43, 0x26, 0x72, 0x50, 0x6D, 0x5D, 0x98, 0x6F, 0x6E, 0x8B, 0x47, 0x36, 0xA5, 0x25, 0x2D, 0xC3, 
   0x39, 0x80, 0x57, 0x8B, 0x8E, 0x5E, 0x8B, 0x73, 0xD5, 0x4F, 0x88, 0x63, 0x1E, 0x51, 0x74, 0x12, 
   0x00, 0xE5, 0x3C, 0x64, 0x3B, 0x6D, 0xD3, 0x32, 0x6F, 0x79, 0xFF, 0x6A, 0x3F, 0x9F, 0x5D, 0x55, 
   0x51, 0x33, 0x5D, 0xAD, 0x3E, 0xA2, 0xC5, 0x50, 0x8F, 0xB2, 0x40, 0x1C, 0x76, 0x48, 0x55, 0x25, 
   0x9D, 0xAC, 0x88, 0x62, 0x78, 0xF6, 0x00, 0x2E, 0x85, 0x1B, 0x46, 0x47, 0x89, 0xCF, 0xDB, 0x67, 
   0x8E, 0xA8, 0x1B, 0x2F, 0x79, 0x37, 0x27, 0x9F, 0x70, 0x60, 0x81, 0x64, 0x83, 0xAD, 0x3A, 0x5B, 
   0x90, 0x07, 0x18, 0x73, 0x4D, 0x65, 0x64, 0x67, 0xA1, 0xA5, 0x74, 0x90, 0xEB, 0x83, 0x61, 0xC7, 
   0x25, 0x4F, 0x73, 0x1E, 0x7B, 0x33, 0x78, 0x6E, 0xA5, 0x60, 0x18, 0xCD, 0x00, 0x47, 0x67, 0x23, 
   0xB6, 0x89, 0x88, 0x73, 0x74, 0x74, 0x3A, 0x83, 0x62, 0x73, 0xFF, 0x49, 0x7F, 0xA7, 0x21, 0x6D, 
   0x24, 0x3E, 0x67, 0xAD, 0x8A, 0x50, 0xCB, 0x7E, 0x67, 0x8D, 0x38, 0x94, 0xA7, 0x19, 0x4F, 0xA0, 
   0x4C, 0x33, 0x3A, 0x42, 0x90, 0x9C, 0x3E, 0xA8, 0xFF, 0x74, 0x5E, 0xA0, 0x6A, 0x51, 0x0A, 0x47, 
   0x7D, 0x7E, 0x4B, 0x3E, 0xD3, 0x2A, 0x51, 0xD0, 0x6B, 0x97, 0x88, 0x72, 0x91, 0xCC, 0x4B, 0x40, 
   0xC3, 0x6C, 0x5C, 0x54, 0x91, 0x73, 0xA1, 0x3E, 0x89, 0xB0, 0x09, 0x49, 0x60, 0x31, 0x4F, 0x72, 
   0x5D, 0x72, 0x9C, 0x77, 0x68, 0x7E, 0x67, 0x74, 0xE7, 0x50, 0x69, 0xD0, 0x66, 0x69, 0x6D, 0x70, 
   0x74, 0x86, 0x2B, 0x5D, 0xA6, 0x53, 0x5D, 0x7E, 0x64, 0x84, 0x47, 0x54, 0x46, 0x7A, 0x3E, 0x68, 
   0xFF, 0x61, 0x7F, 0xD7, 0x93, 0x57, 0x12, 0x42, 0x62, 0x87, 0x0F, 0x68, 0xEE, 0x70, 0x68, 0x8D, 
   0x8E, 0x73, 0x53, 0x49, 0x72, 0x7C, 0x41, 0x39, 0xE4, 0x46, 0x7D, 0xB6, 0x40, 0x72, 0x5F, 0x41, 
   0x50, 0xA1, 0x6A, 0x67, 0x74, 0x59, 0x68, 0x6B, 0x2C, 0x6E, 0xB7, 0x3F, 0x63, 0x9E, 0x85, 0x69, 
   0xE7, 0x7A, 0x6E, 0xB7, 0x40, 0x5D, 0x3D, 0x55, 0x68, 0xAC, 0x6A, 0x68, 0xBC, 0x2F, 0x78, 0x72, 
   0x44, 0x6C, 0xAE, 0x49, 0x50, 0x75, 0x3F, 0x56, 0x39, 0x3C, 0x8B, 0xBF, 0x6C, 0x96, 0xF0, 0x84, 
   0x50, 0xA7, 0x6C, 0x2D, 0x6D, 0x26, 0x72, 0xC1, 0x1B, 0x6E, 0x9A, 0x88, 0x70, 0x57, 0x88, 0x9E, 
   0xDA, 0x32, 0x81, 0xDF, 0x20, 0x35, 0x5F, 0x5A, 0x25, 0x31, 0x6D, 0x99, 0x90, 0x46, 0x9B, 0xFF, 
   0x26, 0x30, 0x9D, 0x7F, 0x75, 0x9E, 0xBE, 0xC5, 0xFF, 0x6B, 0x69, 0xA2, 0x27, 0x76, 0x40, 0x00, 
   0x3F, 0x9D, 0x24, 0x12, 0x70, 0x8E, 0x97, 0x5D, 0x7A, 0xA4, 0xED, 0x5D, 0x22, 0xCB, 0x4B, 0x6D, 
   0x58, 0x7B, 0xC8, 0xB1, 0x55, 0x91, 0xC6, 0x00, 0x00, 0x5E, 0x23, 0x21, 0x7F, 0xC5, 0xB7, 0xC2, 
   0xA2, 0xC2, 0xAF, 0x04, 0x1A, 0x35, 0x00, 0x00, 0x20, 0x3A, 0xAC, 0xC4, 0xB6, 0xEC, 0xFF, 0xA0, 
   0x24, 0x89, 0x32, 0x16, 0x23, 0x34, 0x9D, 0x8C, 0x7C, 0xA0, 0xBF, 0x2B, 0x42, 0x8F, 0x35, 0x29, 
   0x2C, 0x78, 0x77, 0x70, 0x49, 0x66, 0xA5, 0x00, 0x11, 0x79, 0x33, 0x31, 0x7A, 0x74, 0xC2, 0xA2, 
   0x86, 0xBD, 0xC9, 0x09, 0x00, 0x23, 0x37, 0x51, 0xAB, 0x16, 0x40, 0xBB, 0xD2, 0x96, 0xA2, 0x7A, 
   0x69, 0x50, 0x00, 0x4C, 0x81, 0x4E, 0xAB, 0xB0, 0xB4, 0x6E, 0x46, 0x1F, 0x00, 0x18, 0x00, 0x3D, 
   0x8C, 0x5F, 0x89, 0xDE, 0xA0, 0x6F, 0x89, 0x66, 0x8A, 0x5A, 0x19, 0x50, 0x70, 0x2E, 0x44, 0x92, 
   0x71, 0xBF, 0x86, 0x32, 0x67, 0x8F, 0x05, 0x00, 0x4E, 0x61, 0x59, 0x54, 0x7D, 0x93, 0x8E, 0x37, 
   0x5A, 0x8F, 0x25, 0x3C, 0x6D, 0x20, 0x3D, 0x93, 0x61, 0x60, 0x97, 0x88, 0x9E, 0x3A, 0x2B, 0x36, 
   0x4A, 0x19, 0x23, 0x8A, 0x57, 0x73, 0x85, 0x53, 0x69, 0x6A, 0x36, 0x59, 0x76, 0x52, 0x64, 0x92, 
   0x3B, 0x4D, 0x6F, 0x3B, 0x58, 0x69, 0x52, 0x4D, 0x69, 0x4C, 0x6F, 0x80, 0x3B, 0x4D, 0x80, 0x3B, 
   0x58, 0x74, 0x41, 0x4D, 0x73, 0x4D, 0x64, 0x72, 0x58, 0x6F, 0x60, 0x1F, 0x3B, 0x8D, 0x41, 0x46, 
   0x76, 0x69, 0x63, 0x4F, 0x30, 0x58, 0xA9, 0x35, 0x58, 0x69, 0x5D, 0x58, 0x1F, 0x3B, 0x4D, 0x80, 
   0x5C, 0x7A, 0x94, 0x44, 0x6D, 0x78, 0x10, 0x11, 0x78, 0x33, 0x3F, 0x78, 0x57, 0x7F, 0x56, 0x53, 
   0x59, 0x7F, 0x53, 0x59, 0x8B, 0x41, 0x59, 0x6E, 0x47, 0x59, 0x74, 0x36, 0x59, 0x6E, 0x6A, 0x6F, 
   0x6E, 0x63, 0x51, 0x80, 0x2F, 0x4B, 0x6F, 0x23, 0x3A, 0x75, 0x52, 0x63, 0x7A, 0x6A, 0x4D, 0x7A, 
   0x48, 0x64, 0x75, 0x53, 0x59, 0x75, 0x3C, 0x59, 0x75, 0x47, 0x59, 0x6A, 0x47, 0x64, 0x86, 0x57, 
   0x4D, 0x81, 0x1E, 0x58, 0x80, 0x47, 0x58, 0x7E, 0x7A, 0x63, 0x28, 0x57, 0x51, 0x69, 0x01, 0x62, 
   0xD6, 0x2F, 0x40, 0x8B, 0x7A, 0x41, 0x17, 0x54, 0x75, 0x6C, 0x4D, 0x7C, 0xBD, 0x4B, 0x69, 0x83, 
   0x2E, 0x23, 0x26, 0x33, 0x40, 0x49, 0x2F, 0x74, 0x9C, 0x42, 0x6A, 0x93, 0x71, 0x48, 0x5B, 0x65, 
   0x5A, 0x79, 0x1F, 0x76, 0x91, 0x0E, 0x48, 0x7A, 0x5F, 0x48, 0x72, 0x71, 0x71, 0x71, 0x49, 0x7C, 
   0x50, 0x41, 0x37, 0x75, 0x2A, 0x6F, 0xD1, 0x5E, 0x79, 0x87, 0x6A, 0x33, 0x63, 0x41, 0x27, 0x5C, 
   0x1E, 0x61, 0x5E, 0x0F, 0x6E, 0x79, 0x72, 0x47, 0xB5, 0x6F, 0x49, 0xA5, 0x37, 0x47, 0x44, 0x59, 
   0x93, 0x84, 0x5E, 0xAA, 0xC3, 0x4D, 0x36, 0x84, 0x57, 0x34, 0x6B, 0x61, 0x83, 0x9B, 0x37, 0x67, 
   0x66, 0x1F, 0x33, 0x3D, 0x27, 0x34, 0x40, 0x63, 0x6A, 0xB1, 0x81, 0x93, 0xB5, 0x27, 0x61, 0x57, 
   0x60, 0x2E, 0xBE, 0x5B, 0x58, 0xC3, 0x49, 0xAF, 0x33, 0x75, 0xAA, 0x7D, 0x3A, 0x41, 0xD9, 0x00, 
   0x2D, 0x5D, 0x25, 0x29, 0x4C, 0x79, 0x71, 0xB4, 0x92, 0xAD, 0x89, 0x6A, 0x6F, 0x80, 0x2F, 0x3C, 
   0x7F, 0x2E, 0x90, 0xBC, 0x4B, 0x62, 0xEB, 0x58, 0x34, 0xA5, 0x76, 0x8A, 0xA6, 0x64, 0x7F, 0x86, 
   0x47, 0x5C, 0x2A, 0x56, 0x71, 0x7C, 0x5B, 0x43, 0xD5, 0x1C, 0x44, 0xB1, 0x67, 0x79, 0x90, 0x8F, 
   0xAE, 0xE3, 0x3A, 0x7F, 0x80, 0x44, 0x42, 0x4A, 0x70, 0x65, 0xC6, 0x62, 0x47, 0xC0, 0x05, 0x26, 
   0x63, 0x00, 0x57, 0x5C, 0x98, 0x9F, 0x86, 0xC7, 0x9A, 0xCC, 0x00, 0x2E, 0x8E, 0x15, 0x45, 0x72, 
   0xA3, 0xC2, 0xB5, 0x75, 0x97, 0xC3, 0x00, 0x00, 0x28, 0x34, 0x18, 0x5B, 0x6E, 0x9F, 0xCF, 0x52, 
   0xBD, 0xB4, 0x36, 0x50, 0x5E, 0x3C, 0x16, 0x7C, 0x5B, 0x6C, 0x96, 0x4C, 0x80, 0xBB, 0x81, 0x86, 
   0xCC, 0x85, 0x74, 0x9D, 0x5B, 0x55, 0x74, 0x00, 0x6A, 0xA0, 0x69, 0x4E, 0x9F, 0x5E, 0x3E, 0x3A, 
   0x15, 0x7F, 0x8C, 0x65, 0x80, 0xFF, 0x55, 0x63, 0xA8, 0x40, 0x73, 0x46, 0x7F, 0x6B, 0xA5, 0x55, 
   0x26, 0xBC, 0x00, 0x44, 0x4B, 0x41, 0x8B, 0x38, 0xAA, 0x92, 0xBC, 0x66, 0x8C, 0xFF, 0x00, 0x4B, 
   0xF5, 0x55, 0x45, 0x21, 0xAA, 0x89, 0x3A, 0x75, 0x67, 0xCE, 0x21, 0x5B, 0xB8, 0x00, 0x5B, 0x4C, 
   0x32, 0x67, 0x92, 0x8C, 0x73, 0xE9, 0x83, 0x5D, 0x88, 0x5A, 0x74, 0x3F, 0x2C, 0x69, 0xBE, 0x55, 
   0x69, 0xFF, 0x8E, 0x79, 0x9F, 0x43, 0x6D, 0x63, 0x3C, 0x51, 0x36, 0x52, 0x6D, 0xB6, 0x26, 0x7F, 
   0xE6, 0x5B, 0x5D, 0x7C, 0x90, 0x68, 0xB4, 0x67, 0x68, 0xEF, 0x59, 0x68, 0x48, 0x1E, 0x68, 0x20, 
   0x3B, 0x68, 0xFF, 0x7A, 0x73, 0xDF, 0x58, 0x6C, 0x22, 0x1A, 0x39, 0x9A, 0x6A, 0x7D, 0xFF, 0x86, 
   0x72, 0x7C, 0x2A, 0x4A, 0x5E, 0x24, 0x61, 0xB2, 0x63, 0x68, 0x75, 0x43, 0x74, 0x61, 0x35, 0x69, 
   0xAF, 0x92, 0x6E, 0xFF, 0xA8, 0x5D, 0xCF, 0x33, 0x68, 0x03, 0x1A, 0x68, 0x61, 0x6E, 0x68, 0xFF, 
   0x8F, 0x73, 0x9A, 0x3D, 0x67, 0x5F, 0x00, 0x50, 0x5A, 0x08, 0x4B, 0x6F, 0xB3, 0x8B, 0xF1, 0xF8, 
   0x96, 0xF2, 0x1C, 0x4A, 0x83, 0x00, 0x2D, 0x37, 0x69, 0x72, 0x84, 0xAF, 0x6E, 0xF8, 0x42, 0x76, 
   0xCF, 0x0F, 0x92, 0x4A, 0x4F, 0x3E, 0x3F, 0x90, 0x50, 0xCB, 0x68, 0xC2, 0xFF, 0x35, 0x50, 0x5C, 
   0x2B, 0x29, 0x62, 0x67, 0x96, 0xEC, 0xB2, 0x9E, 0xE0, 0x99, 0x8A, 0x9D, 0x12, 0x31, 0x53, 0x1A, 
   0x08, 0x72, 0x53, 0xA4, 0x83, 0x65, 0xC7, 0xCF, 0x4E, 0x32, 0x85, 0x1C, 0x36, 0x74, 0x78, 0x86, 
   0xC4, 0xAA, 0x98, 0x97, 0x1A, 0x32, 0x85, 0x1E, 0x60, 0x9B, 0x90, 0xCB, 0xC1, 0x62, 0x8F, 0xA0, 
   0x49, 0x2F, 0x74, 0x52, 0x1B, 0x44, 0x00, 0x00, 0x30, 0x4C, 0x6C, 0xCF, 0xEA, 0xED, 0xFF, 0x6D, 
   0xB3, 0x90, 0x1F, 0x16, 0x29, 0x49, 0x56, 0xAD, 0x42, 0x7A, 0xA5, 0x51, 0x3A, 0x15, 0x4B, 0x4A, 
   0x7C, 0x39, 0x68, 0xC9, 0x61, 0x8B, 0x8B, 0x4A, 0x47, 0x7A, 0x1D, 0x36, 0x74, 0x67, 0x76, 0xA7, 
   0x4C, 0x82, 0x9A, 0x51, 0x3E, 0x3E, 0x6D, 0x4C, 0x89, 0x83, 0x41, 0x8E, 0x21, 0x75, 0x82, 0x64, 
   0x97, 0xE5, 0x8F, 0x89, 0xA1, 0x0F, 0x20, 0x00, 0x08, 0x46, 0x22, 0x6F, 0xBD, 0xDA, 0x76, 0x5B, 
   0xA3, 0x5A, 0x17, 0x38, 0x47, 0x94, 0x93, 0x3B, 0x7D, 0xBA, 0x46, 0x2D, 0x47, 0x62, 0x6B, 0x4D, 
   0x4A, 0x96, 0xB4, 0x11, 0x22, 0xB3, 0x5B, 0x43, 0x5A, 0x72, 0x76, 0x3C, 0x55, 0x7C, 0x64, 0x2B, 
   0x42, 0x93, 0x1B, 0x00, 0x6D, 0x56, 0x96, 0x7E, 0xA0, 0xDA, 0xD2, 0x65, 0x48, 0x6D, 0x07, 0x07, 
   0x04, 0x1D, 0x56, 0x54, 0x47, 0x63, 0xA1, 0x81, 0x64, 0x8C, 0x4D, 0x59, 0x5F, 0x2A, 0x59, 0x7B, 
   0x4C, 0x64, 0x86, 0x52, 0x4D, 0x7A, 0x3B, 0x58, 0x6E, 0x3B, 0x4D, 0x6E, 0x52, 0x6F, 0x79, 0x36, 
   0x47, 0x73, 0x5F, 0x64, 0x72, 0x6F, 0x6F, 0x5B, 0x1F, 0x41, 0x7D, 0x41, 0x4C, 0x6C, 0x80, 0x63, 
   0x5C, 0x30, 0x58, 0xAB, 0x24, 0x58, 0x76, 0x5D, 0x58, 0x68, 0x4C, 0x58, 0x61, 0x62, 0x6E, 0x18, 
   0x3F, 0x40, 0x6B, 0x23, 0x45, 0xB2, 0x46, 0x67, 0x80, 0x74, 0x57, 0x68, 0x40, 0x58, 0x50, 0x2F, 
   0x64, 0x67, 0x46, 0x59, 0x8F, 0x52, 0x59, 0x79, 0x41, 0x59, 0x69, 0x3C, 0x59, 0x80, 0x48, 0x59, 
   0x7A, 0x48, 0x6F, 0x75, 0x69, 0x46, 0x75, 0x34, 0x51, 0x75, 0x23, 0x5D, 0x75, 0x29, 0x58, 0x75, 
   0x69, 0x4D, 0x75, 0x4D, 0x64, 0x75, 0x53, 0x59, 0x6A, 0x47, 0x64, 0x86, 0x46, 0x4D, 0x6A, 0x3F, 
   0x58, 0x85, 0x12, 0x58, 0x7E, 0x5E, 0x58, 0x2E, 0x81, 0x58, 0x73, 0x53, 0x5D, 0xA2, 0x24, 0x63, 
   0x64, 0x34, 0x4C, 0x7A, 0x35, 0x41, 0x8F, 0x7A, 0x69, 0x60, 0x58, 0x7B, 0x5A, 0x19, 0x47, 0x55, 
   0x56, 0x4C, 0x84, 0x55, 0x67, 0xCE, 0x1C, 0x29, 0x55, 0x1E, 0x36, 0x01, 0x6B, 0x87, 0x82, 0x83, 
   0x81, 0xCB, 0x49, 0x1A, 0xC6, 0x1A, 0x4D, 0x7A, 0x31, 0x7B, 0x33, 0x81, 0x59, 0x76, 0x53, 0x36, 
   0x87, 0x0E, 0x46, 0x4A, 0x52, 0x64, 0x51, 0x4D, 0x86, 0xE1, 0x5F, 0x5C, 0x92, 0x48, 0x11, 0x20, 
   0x20, 0x29, 0x60, 0x4F, 0x76, 0xA8, 0x79, 0xBB, 0xB0, 0x51, 0x47, 0x92, 0x2A, 0x00, 0x58, 0x52, 
   0x60, 0x5F, 0x7A, 0xDB, 0xB0, 0x4B, 0x4D, 0x9F, 0x00, 0x30, 0x7C, 0x62, 0x74, 0x81, 0x89, 0x79, 
   0x90, 0x21, 0x40, 0x6D, 0x1B, 0x4C, 0x6D, 0x34, 0x54, 0x6F, 0x5A, 0x7D, 0x63, 0xA5, 0x94, 0xBC, 
   0x66, 0x55, 0xCF, 0x1F, 0x32, 0x83, 0x29, 0x4F, 0x48, 0x46, 0x63, 0x80, 0x59, 0x7B, 0x66, 0x54, 
   0x8B, 0x63, 0x39, 0x3A, 0xDD, 0x5C, 0x0D, 0xB5, 0x62, 0x72, 0x16, 0x57, 0xBB, 0x52, 0x3B, 0xA5, 
   0xE6, 0x4C, 0x53, 0xBD, 0x5F, 0x2F, 0xA1, 0x55, 0x46, 0xB6, 0x82, 0xA2, 0x98, 0x5E, 0x96, 0xA5, 
   0x1D, 0x44, 0x7A, 0x1D, 0x31, 0x03, 0x84, 0x87, 0x8B, 0x9A, 0x76, 0xFF, 0x00, 0x06, 0xB4, 0x23, 
   0x6A, 0x79, 0xB8, 0xEE, 0xBF, 0x78, 0xBD, 0x9B, 0x30, 0x22, 0x7D, 0x0B, 0x00, 0x8C, 0x1D, 0x48, 
   0x97, 0x85, 0xAC, 0x8C, 0x59, 0x8C, 0xB9, 0x47, 0x43, 0x6F, 0x51, 0x4F, 0x69, 0x1F, 0x94, 0xAF, 
   0x4E, 0x93, 0xC2, 0x98, 0x2B, 0xC6, 0x2C, 0x2B, 0x6F, 0x04, 0x93, 0x3B, 0x93, 0x89, 0xBF, 0x92, 
   0x4A, 0xA4, 0x07, 0x60, 0xA4, 0x06, 0x7D, 0x7C, 0x2C, 0x3A, 0x3A, 0x81, 0x6E, 0xBB, 0xC1, 0xA3, 
   0xFF, 0x63, 0x7A, 0x7C, 0x0A, 0x82, 0x6C, 0x1E, 0x30, 0x86, 0x30, 0x15, 0x38, 0x71, 0x95, 0xAE, 
   0x72, 0xB9, 0xFF, 0x28, 0x4C, 0x92, 0x50, 0x61, 0x25, 0x6C, 0x66, 0xAE, 0x44, 0x54, 0xE7, 0x0B, 
   0x49, 0x84, 0x4B, 0x78, 0x28, 0x86, 0x85, 0x4E, 0x4E, 0x63, 0xFF, 0x3E, 0x4C, 0xD4, 0x7C, 0x7F, 
   0xA6, 0x49, 0x78, 0xDA, 0x2C, 0x33, 0x5F, 0x87, 0x55, 0x47, 0x64, 0x7E, 0xBA, 0x3F, 0x73, 0xBC, 
   0x16, 0x5C, 0xB0, 0x3E, 0x5C, 0x97, 0x7F, 0x6D, 0x52, 0x53, 0x5D, 0x70, 0x37, 0x74, 0xDA, 0x4F, 
   0x6E, 0xE2, 0x6D, 0x68, 0x86, 0x8E, 0x5C, 0x7A, 0x36, 0x56, 0xE4, 0x13, 0x73, 0xB4, 0x6F, 0x68, 
   0x00, 0x6C, 0x68, 0xC9, 0x2F, 0x68, 0xFF, 0x90, 0x68, 0x5D, 0x93, 0x68, 0x21, 0x0D, 0x68, 0xBB, 
   0x05, 0x68, 0xC9, 0x56, 0x5D, 0xAC, 0x6A, 0x84, 0x78, 0x7C, 0x67, 0x7D, 0x5A, 0x39, 0xA6, 0x5F, 
   0x72, 0xBD, 0x52, 0x83, 0xB5, 0x29, 0x5C, 0x6E, 0x47, 0x5C, 0x51, 0x6B, 0x68, 0x86, 0x4B, 0x74, 
   0x91, 0x63, 0x69, 0xD9, 0x8A, 0x79, 0xFF, 0x3F, 0x62, 0x95, 0x3D, 0x68, 0x47, 0x6E, 0x68, 0x95, 
   0x5C, 0x68, 0xA6, 0x27, 0x6D, 0x96, 0x01, 0x61, 0x96, 0x7B, 0x67, 0x7A, 0x8F, 0x46, 0x88, 0x45, 
   0x80, 0xE4, 0x4F, 0xA7, 0x9F, 0x5F, 0x3F, 0x39, 0x5D, 0x2D, 0xC3, 0x23, 0x66, 0xF1, 0x24, 0x6D, 
   0x79, 0x60, 0x27, 0x2A, 0x8A, 0xB3, 0xB6, 0x52, 0xED, 0xFF, 0x3B, 0x1F, 0x97, 0x47, 0x39, 0x5D, 
   0x75, 0xBC, 0xBC, 0x64, 0x3A, 0xBB, 0x2B, 0x7E, 0x71, 0x65, 0x94, 0xA9, 0x76, 0x12, 0xC9, 0x64, 
   0x7E, 0x4A, 0x5B, 0xB7, 0x8C, 0x4D, 0x3F, 0xDA, 0x13, 0x54, 0x67, 0x5E, 0xA7, 0x5B, 0x76, 0x4A, 
   0xC3, 0x2D, 0x00, 0x98, 0x50, 0x61, 0x83, 0xB1, 0xFF, 0xF9, 0x75, 0xBD, 0xBC, 0x03, 0x2D, 0x61, 
   0x01, 0x00, 0x3B, 0x38, 0x2D, 0x69, 0xA7, 0xAC, 0xC5, 0x6F, 0x53, 0x9D, 0x03, 0x17, 0x21, 0x69, 
   0xC3, 0xDE, 0x96, 0xDD, 0xFF, 0x44, 0x16, 0x30, 0x1F, 0x00, 0x09, 0x4B, 0x5F, 0x81, 0x5B, 0x72, 
   0x9B, 0x1D, 0x3B, 0x97, 0x3A, 0x54, 0x8C, 0x7A, 0xA5, 0x87, 0x7E, 0xA3, 0xBE, 0x06, 0x00, 0x6C, 
   0x2D, 0x07, 0x37, 0x7D, 0xF7, 0xCA, 0x78, 0x84, 0x82, 0x99, 0x9F, 0x7D, 0x00, 0x3D, 0xC5, 0x48, 
   0x9A, 0xB6, 0xBE, 0x65, 0x50, 0x5B, 0x1F, 0x24, 0x00, 0x5D, 0x6E, 0x37, 0x8B, 0x96, 0xCC, 0x6E, 
   0x7F, 0x64, 0x88, 0x63, 0x00, 0x32, 0x69, 0x34, 0x10, 0x97, 0x8A, 0xA4, 0x7B, 0x5C, 0xA2, 0x69, 
   0x07, 0x00, 0x74, 0x6E, 0x44, 0x7F, 0x90, 0xCD, 0x89, 0x38, 0x54, 0x6B, 0x26, 0x2B, 0x53, 0x27, 
   0x21, 0x54, 0x5C, 0x7F, 0x9F, 0x9B, 0xC4, 0x9F, 0x43, 0x55, 0x65, 0x0E, 0x14, 0x85, 0x46, 0x73, 
   0x83, 0x57, 0x4C, 0x27, 0x4C, 0x4C, 0x55, 0x3C, 0x58, 0x96, 0x58, 0x64, 0x8C, 0x3C, 0x59, 0x64, 
   0x5E, 0x59, 0x6F, 0x4C, 0x64, 0x7A, 0x3B, 0x4D, 0x69, 0x3B, 0x58, 0x79, 0x3C, 0x47, 0x78, 0x64, 
   0x69, 0x77, 0x6F, 0x6F, 0x5B, 0x1F, 0x41, 0x7D, 0x41, 0x4C, 0x67, 0x69, 0x63, 0x68, 0x30, 0x58, 
   0xA6, 0x40, 0x58, 0x83, 0x62, 0x58, 0x53, 0x35, 0x58, 0x51, 0x4B, 0x6E, 0x62, 0x3F, 0x4B, 0x5D, 
   0x1D, 0x34, 0x6B, 0x4C, 0x51, 0x84, 0x81, 0x74, 0x9C, 0x4D, 0x58, 0x80, 0x24, 0x41, 0x73, 0x2E, 
   0x52, 0x60, 0x2E, 0x64, 0x44, 0x46, 0x59, 0x7E, 0x5E, 0x59, 0x8B, 0x4D, 0x59, 0x75, 0x48, 0x59, 
   0x75, 0x48, 0x59, 0x75, 0x4D, 0x69, 0x75, 0x52, 0x52, 0x75, 0x3A, 0x58, 0x75, 0x2E, 0x58, 0x75, 
   0x34, 0x58, 0x75, 0x52, 0x4D, 0x6A, 0x5E, 0x69, 0x81, 0x57, 0x4D, 0x86, 0x3A, 0x58, 0x85, 0x18, 
   0x58, 0x7E, 0x68, 0x58, 0x33, 0x57, 0x52, 0x78, 0x08, 0x52, 0xB2, 0x4D, 0x52, 0x69, 0x81, 0x47, 
   0x52, 0x47, 0x5E, 0x7A, 0x23, 0x74, 0xB2, 0x23, 0x3A, 0x71, 0x57, 0x3A, 0x00, 0x5E, 0x69, 0x67, 
   0x57, 0x80, 0xEB, 0x28, 0x4C, 0x78, 0x39, 0x29, 0x2C, 0x5C, 0x68, 0x44, 0x2A, 0x64, 0x7B, 0x4E, 
   0x59, 0xA7, 0x83, 0x69, 0x97, 0x71, 0x4D, 0x7A, 0x3C, 0x58, 0x83, 0x0D, 0x63, 0x4E, 0x40, 0x4C, 
   0x7B, 0x63, 0x51, 0x81, 0x3C, 0x63, 0x48, 0x4C, 0x47, 0x3F, 0x36, 0x80, 0xA3, 0x38, 0x5E, 0x90, 
   0x67, 0x21, 0x81, 0x7E, 0x82, 0xA8, 0x34, 0x88, 0x80, 0x1D, 0x47, 0x52, 0x6D, 0x56, 0xA1, 0x5C, 
   0x1D, 0x84, 0x39, 0x00, 0x35, 0x28, 0xBD, 0x91, 0x56, 0x98, 0x9E, 0x4C, 0x31, 0x77, 0x58, 0x47, 
   0x7C, 0x6E, 0x81, 0xB4, 0x34, 0x7C, 0x8B, 0x0C, 0x60, 0x0E, 0x52, 0x49, 0x71, 0x87, 0x65, 0xE6, 
   0x6F, 0x98, 0x81, 0x39, 0x4C, 0x76, 0x16, 0x00, 0xDC, 0x1E, 0x43, 0x3D, 0x5B, 0xA2, 0x33, 0xAE, 
   0x99, 0xF2, 0x80, 0x8C, 0xBC, 0x22, 0x2F, 0x50, 0x0A, 0x00, 0x90, 0x4A, 0xA2, 0x8D, 0x6F, 0xD2, 
   0x85, 0x55, 0x3E, 0xC6, 0x5B, 0x64, 0xA5, 0x8E, 0x97, 0x83, 0x3D, 0x52, 0xC0, 0x3B, 0x61, 0xA3, 
   0x4B, 0x6B, 0x74, 0x62, 0x48, 0x9A, 0x4B, 0x65, 0x5D, 0x5C, 0x5B, 0x82, 0x4A, 0x78, 0xFF, 0x23, 
   0x47, 0x95, 0x61, 0x91, 0x5A, 0x88, 0xC3, 0xEB, 0x20, 0x37, 0x6C, 0x00, 0x1D, 0x43, 0x86, 0x77, 
   0xAF, 0x86, 0x6C, 0xD8, 0x34, 0x39, 0x92, 0x00, 0x41, 0x5C, 0x56, 0xA3, 0x84, 0x90, 0x92, 0xAD, 
   0x14, 0x00, 0x9E, 0x10, 0x2C, 0x67, 0x9B, 0xC8, 0xDA, 0xA2, 0x96, 0xE4, 0x28, 0x39, 0x16, 0x42, 
   0x48, 0x98, 0x62, 0x66, 0xDE, 0x00, 0x8F, 0x5D, 0x31, 0x7F, 0x9B, 0xA1, 0x46, 0x97, 0x7A, 0x68, 
   0x70, 0x34, 0xA0, 0xFF, 0x54, 0x4F, 0xAB, 0x37, 0x26, 0x0A, 0x37, 0x7D, 0x67, 0x44, 0x8A, 0xFF, 
   0x7F, 0x5D, 0xC0, 0x74, 0x7E, 0x2B, 0x45, 0x66, 0x98, 0x65, 0x3D, 0xE9, 0x1B, 0x5B, 0x8D, 0x34, 
   0x8A, 0x64, 0xAE, 0x74, 0x8E, 0x64, 0x62, 0xFA, 0x00, 0x56, 0x6C, 0x64, 0x6D, 0x34, 0x99, 0x74, 
   0xD6, 0x54, 0x79, 0xD8, 0x14, 0x56, 0xC4, 0x3E, 0x5C, 0x50, 0xB2, 0x6D, 0x45, 0xAB, 0x7F, 0xFF, 
   0x40, 0x68, 0xC0, 0x00, 0x56, 0x19, 0x0E, 0x73, 0x7F, 0x56, 0x68, 0xD6, 0x87, 0x57, 0x7D, 0x61, 
   0x7F, 0x6E, 0x4A, 0x4B, 0x9F, 0x5A, 0x51, 0xFF, 0x4E, 0x95, 0xD6, 0x48, 0x51, 0x16, 0x42, 0x56, 
   0x85, 0x3E, 0x73, 0xCA, 0x83, 0x68, 0x61, 0x5B, 0x68, 0xB3, 0x55, 0x68, 0xED, 0x75, 0x68, 0xA1, 
   0x3A, 0x5D, 0x56, 0x06, 0x74, 0x7E, 0x52, 0x69, 0xFF, 0xA4, 0x7F, 0x9B, 0x60, 0x61, 0x2E, 0x26, 
   0x50, 0xE4, 0x5E, 0x67, 0xE4, 0x63, 0x7E, 0x65, 0x31, 0x5C, 0x6F, 0x4E, 0x56, 0x8D, 0x99, 0x62, 
   0xAA, 0x43, 0x79, 0x68, 0x16, 0x5D, 0x88, 0x9A, 0x68, 0xFF, 0x99, 0x68, 0xA6, 0x1E, 0x68, 0x00, 
   0x0C, 0x5D, 0x84, 0x3C, 0x79, 0xE2, 0xAA, 0x68, 0xB6, 0xA4, 0x5C, 0x98, 0x08, 0x61, 0x7F, 0x00, 
   0x57, 0x47, 0x94, 0x86, 0x94, 0xDE, 0xAE, 0xFF, 0x1E, 0x56, 0xC3, 0x00, 0x21, 0x33, 0x4B, 0x39, 
   0x51, 0x9A, 0x70, 0xEA, 0x6F, 0xB3, 0xFF, 0x42, 0x81, 0x82, 0x43, 0x69, 0x60, 0x88, 0x79, 0xFF, 
   0x92, 0x50, 0xBC, 0x44, 0x98, 0x1F, 0x00, 0x48, 0x73, 0x36, 0x07, 0xAF, 0xBD, 0xD7, 0xBD, 0xB2, 
   0xDD, 0xFF, 0x3C, 0x2B, 0xA0, 0x1B, 0x44, 0x19, 0x46, 0xB4, 0xAA, 0x73, 0x7F, 0x98, 0x13, 0x00, 
   0x3A, 0x33, 0x30, 0xA9, 0xB8, 0xB7, 0xFF, 0xA7, 0xE6, 0xBB, 0x4C, 0x60, 0x82, 0x00, 0x22, 0x62, 
   0x00, 0x3C, 0x56, 0x51, 0x8C, 0xEA, 0xE8, 0x8C, 0xD6, 0x75, 0x68, 0x39, 0x00, 0x2E, 0x1B, 0x31, 
   0x41, 0xB8, 0x82, 0xB9, 0xFF, 0x66, 0x79, 0x6B, 0x4D, 0x30, 0x29, 0x2E, 0x2D, 0x8F, 0x34, 0x55, 
   0x9C, 0x51, 0x5E, 0x7B, 0x4D, 0x55, 0x81, 0x6F, 0xAA, 0xD6, 0x4C, 0x6A, 0x79, 0x44, 0x28, 0x4E, 
   0x38, 0x39, 0x7A, 0x43, 0x9A, 0x8C, 0x30, 0x91, 0x9E, 0x14, 0xAC, 0xB4, 0xAE, 0x9C, 0x9A, 0x63, 
   0x00, 0x4C, 0x02, 0x2B, 0x34, 0x74, 0x8C, 0xCE, 0xA1, 0x6A, 0xC1, 0x2D, 0x25, 0x1F, 0x1F, 0x67, 
   0x39, 0x45, 0x7C, 0xB1, 0x4B, 0x2C, 0x79, 0x4B, 0x81, 0x36, 0x56, 0x97, 0xB4, 0x23, 0x19, 0xB4, 
   0x5D, 0x45, 0x41, 0x91, 0x8E, 0x57, 0x5B, 0x6B, 0xA7, 0x0F, 0x42, 0xA0, 0x10, 0x00, 0x60, 0x51, 
   0x68, 0x59, 0xBE, 0xEB, 0x9D, 0x4F, 0x39, 0x6F, 0x00, 0x00, 0x41, 0x2F, 0x68, 0x6F, 0x63, 0x7B, 
   0xBF, 0x5E, 0x64, 0x90, 0x35, 0x41, 0x33, 0x24, 0x4C, 0x55, 0x4C, 0x58, 0x90, 0x63, 0x64, 0x8C, 
   0x41, 0x59, 0x6F, 0x30, 0x59, 0x75, 0x52, 0x64, 0x85, 0x3C, 0x47, 0x8A, 0x4D, 0x6F, 0x60, 0x63, 
   0x5D, 0x4F, 0x13, 0x46, 0x82, 0x30, 0x4C, 0x6C, 0x8B, 0x63, 0x68, 0x35, 0x58, 0xA1, 0x2F, 0x58, 
   0x73, 0x4B, 0x58, 0x66, 0x3B, 0x58, 0x75, 0x62, 0x6E, 0x69, 0x3F, 0x4B, 0x53, 0x23, 0x34, 0x93, 
   0x40, 0x57, 0x82, 0x6A, 0x6F, 0x39, 0x4E, 0x59, 0x78, 0x48, 0x64, 0xA2, 0x63, 0x52, 0x8B, 0x46, 
   0x58, 0x67, 0x28, 0x4D, 0x4F, 0x3F, 0x5E, 0x5B, 0x52, 0x59, 0x8A, 0x53, 0x59, 0x80, 0x48, 0x59, 
   0x75, 0x48, 0x59, 0x75, 0x48, 0x59, 0x75, 0x53, 0x64, 0x75, 0x52, 0x4D, 0x75, 0x34, 0x58, 0x75, 
   0x2E, 0x58, 0x6F, 0x45, 0x58, 0x86, 0x5C, 0x52, 0x8C, 0x34, 0x58, 0x6E, 0x2F, 0x58, 0x83, 0x62, 
   0x58, 0x39, 0x57, 0x4D, 0x6C, 0x1E, 0x64, 0xA6, 0x35, 0x5E, 0x57, 0x48, 0x53, 0x62, 0x6B, 0x5F, 
   0x74, 0x6F, 0x81, 0x96, 0x3A, 0x6F, 0x73, 0x00, 0x34, 0x4A, 0x3F, 0x17, 0x73, 0x90, 0x85, 0xAC, 
   0x41, 0x7B, 0x77, 0x29, 0x47, 0x43, 0x45, 0x5D, 0x3E, 0x4A, 0x68, 0xA1, 0x2E, 0x3A, 0x80, 0x24, 
   0x4C, 0x48, 0x54, 0x69, 0x77, 0x93, 0x7A, 0xA0, 0x4D, 0x3A, 0x9B, 0x00, 0x40, 0x6C, 0x2F, 0x79, 
   0x4E, 0x80, 0x57, 0x91, 0x5E, 0x3A, 0x74, 0x13, 0x4C, 0x15, 0x14, 0x3D, 0x4F, 0x72, 0x7F, 0xFF, 
   0x85, 0xBD, 0xD3, 0x45, 0x4F, 0x41, 0x28, 0x14, 0x50, 0x4F, 0x7A, 0x8E, 0x4F, 0x9B, 0x7E, 0x60, 
   0x21, 0x89, 0x1C, 0x00, 0x72, 0x44, 0x54, 0x46, 0x7E, 0xB9, 0xA3, 0x41, 0x7B, 0x9F, 0x30, 0x26, 
   0x89, 0x75, 0x65, 0x88, 0x5F, 0x83, 0x5A, 0x5E, 0x77, 0x8D, 0x4B, 0x58, 0x9D, 0x27, 0x40, 0x42, 
   0x32, 0x57, 0x54, 0x4F, 0x63, 0xA0, 0x45, 0x53, 0x82, 0x2B, 0x32, 0xA1, 0x4A, 0x4B, 0xB2, 0x8C, 
   0x9D, 0x63, 0x97, 0x82, 0x76, 0x33, 0x5B, 0x85, 0x0A, 0x54, 0xC7, 0x2E, 0x2D, 0xD4, 0x76, 0x3B, 
   0x7F, 0x89, 0xBB, 0x68, 0x78, 0x94, 0xA2, 0x4E, 0x70, 0xAF, 0x41, 0x51, 0x71, 0x25, 0x33, 0x8F, 
   0x58, 0x77, 0xC3, 0x90, 0x88, 0xD9, 0x28, 0x22, 0x91, 0x01, 0x5C, 0x1D, 0x90, 0xA7, 0x63, 0xA1, 
   0x9A, 0xFF, 0x00, 0x0A, 0xB0, 0x03, 0x16, 0x48, 0x77, 0xC8, 0xBD, 0xA6, 0xCE, 0x8F, 0x60, 0x41, 
   0x72, 0x3A, 0x04, 0xBA, 0x21, 0x37, 0x7B, 0x4E, 0x94, 0x95, 0x33, 0x90, 0x7D, 0x45, 0x24, 0x6C, 
   0x4D, 0x37, 0x6E, 0x28, 0x8F, 0x8E, 0x6A, 0xA8, 0xDC, 0xBF, 0x6E, 0xAF, 0x3F, 0x5B, 0x95, 0x03, 
   0x43, 0x44, 0x3C, 0x54, 0x6D, 0x93, 0x61, 0xF8, 0x5F, 0x9B, 0xC6, 0x2B, 0x78, 0x79, 0x2B, 0x3D, 
   0x6B, 0x4F, 0x3C, 0x93, 0x6D, 0x4F, 0x7E, 0x68, 0x84, 0x91, 0x55, 0x9B, 0xEC, 0x22, 0x45, 0x90, 
   0x4B, 0x4F, 0x30, 0x9B, 0x76, 0xB4, 0x66, 0x54, 0xEA, 0x00, 0x44, 0x9F, 0x3E, 0x73, 0x3E, 0xA7, 
   0x85, 0x8A, 0x42, 0x74, 0xFF, 0x31, 0x56, 0xBD, 0x80, 0x4A, 0x30, 0x3C, 0x67, 0x6D, 0x31, 0x68, 
   0x8E, 0x64, 0x6E, 0xC0, 0x5F, 0x8B, 0xB8, 0x1C, 0x74, 0xDA, 0x5C, 0x46, 0xCB, 0xA1, 0x68, 0x4F, 
   0xA4, 0x7F, 0x7A, 0x16, 0x68, 0xAE, 0x00, 0x51, 0x98, 0x4F, 0x6D, 0xA3, 0x8C, 0x84, 0x81, 0x7C, 
   0x52, 0x3A, 0x49, 0x74, 0xFA, 0x1C, 0x84, 0xFF, 0x83, 0x4B, 0x3E, 0x83, 0x73, 0xBE, 0x33, 0x6D, 
   0xF8, 0x59, 0x56, 0x11, 0x64, 0x73, 0x00, 0x2B, 0x68, 0xF0, 0x3D, 0x68, 0xFF, 0x82, 0x5D, 0x7C, 
   0x70, 0x74, 0x5C, 0x4C, 0x69, 0x9A, 0x18, 0x69, 0x8A, 0x40, 0x69, 0xB8, 0x6F, 0x7F, 0xC8, 0x5F, 
   0x61, 0x4A, 0x3D, 0x55, 0x88, 0x54, 0x67, 0xCE, 0x70, 0x78, 0xB3, 0x48, 0x6D, 0xB6, 0x4C, 0x6D, 
   0x7B, 0x3B, 0x62, 0x70, 0x36, 0x68, 0xA0, 0x70, 0x68, 0x98, 0x76, 0x68, 0xF9, 0x25, 0x5D, 0xB2, 
   0x09, 0x74, 0x1C, 0x94, 0x69, 0x93, 0xD3, 0x74, 0xFB, 0x0F, 0x68, 0xB5, 0x00, 0x5C, 0x4B, 0x69, 
   0x56, 0x29, 0x92, 0x4C, 0xBB, 0x59, 0x98, 0xFF, 0x4C, 0xA8, 0x78, 0x24, 0x29, 0x06, 0x47, 0x34, 
   0x9E, 0x65, 0xBE, 0xFF, 0x51, 0x4A, 0x99, 0x5F, 0x46, 0x61, 0x8E, 0xC4, 0xFF, 0x88, 0x86, 0xC6, 
   0x51, 0x77, 0x89, 0x20, 0x40, 0x74, 0x0F, 0x00, 0x6F, 0x5C, 0x90, 0x99, 0x78, 0xD2, 0xE0, 0xA7, 
   0x67, 0xF7, 0x89, 0x6A, 0xB5, 0x35, 0x89, 0x60, 0x52, 0x5E, 0x78, 0x06, 0x0D, 0x77, 0x1E, 0x53, 
   0x7F, 0xA4, 0xC7, 0xBA, 0x78, 0x9E, 0xDC, 0x54, 0x1F, 0x8F, 0x3B, 0x3B, 0x4F, 0x29, 0x75, 0x82, 
   0x52, 0xA3, 0xE3, 0x90, 0x8A, 0xC9, 0x19, 0x3C, 0x47, 0x61, 0x56, 0x5A, 0x92, 0x7B, 0xBE, 0x00, 
   0x1A, 0x41, 0x18, 0x11, 0x3D, 0x86, 0xDA, 0xF5, 0x75, 0xBD, 0xC8, 0x1F, 0x00, 0x54, 0x24, 0x02, 
   0x6F, 0x7B, 0xA3, 0x86, 0x86, 0xA9, 0xB3, 0x24, 0x31, 0x79, 0x40, 0x30, 0x66, 0x67, 0xA1, 0xA4, 
   0x66, 0x82, 0x86, 0x0A, 0x00, 0x5E, 0x4B, 0x7C, 0xA5, 0x40, 0x92, 0xCB, 0x7F, 0x6D, 0x35, 0x5C, 
   0x32, 0x29, 0x00, 0x49, 0xAE, 0x4D, 0xA5, 0xC6, 0xCB, 0x73, 0x6E, 0x7E, 0x98, 0x81, 0x00, 0x40, 
   0x5C, 0x0C, 0x00, 0x4A, 0xB7, 0xBA, 0x7D, 0x67, 0x85, 0x95, 0x00, 0x00, 0x74, 0x40, 0x57, 0x86, 
   0xA1, 0xCF, 0x91, 0x50, 0x5B, 0x63, 0x04, 0x00, 0x6E, 0x15, 0x16, 0x90, 0x68, 0xA2, 0x89, 0xB3, 
   0xC4, 0x98, 0x44, 0x3E, 0x3B, 0x08, 0x1F, 0x51, 0x2F, 0x57, 0x96, 0x52, 0x58, 0x6F, 0x5E, 0x59, 
   0x6B, 0x41, 0x70, 0xB4, 0x4C, 0x64, 0x79, 0x3B, 0x41, 0x1C, 0x40, 0x4C, 0x72, 0x40, 0x58, 0x96, 
   0x52, 0x64, 0x75, 0x47, 0x59, 0x7A, 0x31, 0x53, 0x7F, 0x5F, 0x69, 0x72, 0x75, 0x63, 0x4F, 0x13, 
   0x35, 0x71, 0x3B, 0x51, 0x77, 0x7F, 0x63, 0x56, 0x24, 0x58, 0xA6, 0x34, 0x58, 0x78, 0x4B, 0x58, 
   0x66, 0x40, 0x58, 0x65, 0x46, 0x6E, 0x5F, 0x56, 0x4B, 0x60, 0x1D, 0x34, 0x89, 0x46, 0x57, 0x7E, 
   0x5E, 0x6F, 0x77, 0x42, 0x59, 0x7C, 0x4D, 0x59, 0x2D, 0x36, 0x59, 0x83, 0x53, 0x64, 0x96, 0x58, 
   0x4D, 0x79, 0x40, 0x4D, 0x7E, 0x23, 0x5E, 0x55, 0x3A, 0x59, 0x50, 0x52, 0x59, 0x8A, 0x53, 0x59, 
   0x85, 0x48, 0x59, 0x75, 0x48, 0x59, 0x75, 0x48, 0x59, 0x75, 0x4D, 0x64, 0x75, 0x69, 0x4D, 0x75, 
   0x3A, 0x58, 0x75, 0x32, 0x58, 0x7A, 0x16, 0x58, 0x79, 0x50, 0x5D, 0x72, 0x62, 0x58, 0x3E, 0x52, 
   0x4D, 0x72, 0x30, 0x64, 0x95, 0x41, 0x59, 0x62, 0x6F, 0x4E, 0x68, 0x48, 0x5A, 0x74, 0x36, 0x7C, 
   0xA1, 0x47, 0x59, 0x67, 0x57, 0x3B, 0x2E, 0x5C, 0x57, 0x69, 0x22, 0x6D, 0xFF, 0x0C, 0x29, 0x7E, 
   0x74, 0x4C, 0x00, 0x75, 0x80, 0x43, 0x3B, 0x75, 0xC9, 0x28, 0x41, 0x9D, 0x44, 0x34, 0x5D, 0x3E, 
   0x50, 0x50, 0x34, 0x73, 0x51, 0x41, 0x4C, 0x86, 0x6A, 0x45, 0x8F, 0x58, 0x50, 0x9B, 0x35, 0x4B, 
   0x8E, 0x24, 0x62, 0x53, 0x52, 0x5C, 0x36, 0x48, 0x3B, 0x72, 0x38, 0x3E, 0x7D, 0x72, 0xA7, 0xA3, 
   0x56, 0xA1, 0xCB, 0x22, 0x2C, 0x63, 0x5B, 0x1E, 0x50, 0x71, 0x6D, 0x98, 0x2B, 0x45, 0x76, 0x0F, 
   0x50, 0x66, 0x6B, 0x72, 0x8E, 0x5B, 0x24, 0x7E, 0x1E, 0x27, 0x4C, 0x68, 0xA2, 0xA4, 0x4D, 0x82, 
   0xC8, 0x16, 0x4A, 0x46, 0x89, 0x5A, 0x9C, 0xB5, 0x7B, 0xE4, 0x2D, 0x5D, 0x6A, 0x00, 0x3E, 0x4A, 
   0x02, 0x23, 0x61, 0x4F, 0x64, 0x43, 0x70, 0xB6, 0x71, 0x77, 0x78, 0xEC, 0x55, 0x32, 0xCA, 0x3E, 
   0x1C, 0x3B, 0x45, 0x5F, 0x3D, 0x68, 0xCA, 0xBF, 0x52, 0xB9, 0xB2, 0x25, 0x00, 0x97, 0x48, 0x10, 
   0xBC, 0x92, 0xA2, 0x66, 0x5F, 0xB5, 0x67, 0x1A, 0x6B, 0xB9, 0x48, 0x4C, 0x94, 0x82, 0x73, 0x92, 
   0x76, 0x5C, 0xD8, 0x35, 0x4B, 0xCC, 0x34, 0x74, 0xB1, 0x5D, 0x69, 0x8A, 0x5E, 0x8F, 0x22, 0x84, 
   0x7C, 0x8A, 0x32, 0x1F, 0xFE, 0x00, 0x15, 0x71, 0x78, 0x96, 0x71, 0xD4, 0xF2, 0xFF, 0x4F, 0x5B, 
   0x9A, 0x00, 0x07, 0x31, 0x3E, 0x76, 0xB8, 0x71, 0x75, 0xB8, 0x38, 0x10, 0x9F, 0x07, 0x3B, 0x3E, 
   0x4F, 0xB7, 0x5C, 0xB8, 0x9C, 0xC1, 0x47, 0x52, 0x86, 0x24, 0x51, 0xB0, 0x89, 0x7E, 0xDD, 0x28, 
   0x6C, 0x6A, 0x1D, 0x60, 0x47, 0xA5, 0x49, 0xCA, 0x7B, 0x72, 0xD1, 0x00, 0xA4, 0xAC, 0x00, 0x5E, 
   0x8A, 0x64, 0x03, 0x00, 0x74, 0x6C, 0x7F, 0x8C, 0xDB, 0xFF, 0x4C, 0x58, 0xA4, 0x3A, 0x55, 0x00, 
   0x55, 0x59, 0x8A, 0x4F, 0x37, 0xDD, 0x32, 0x66, 0xBC, 0x45, 0x84, 0x50, 0x74, 0x69, 0x7A, 0x63, 
   0x74, 0xFF, 0x3C, 0x62, 0xAD, 0x58, 0x6D, 0x77, 0x7A, 0x7E, 0x96, 0x4C, 0x4A, 0x73, 0x30, 0x61, 
   0x52, 0x4D, 0x68, 0x68, 0x71, 0x69, 0xD0, 0x83, 0x80, 0xFF, 0x2D, 0x74, 0xE9, 0x3E, 0x4B, 0x11, 
   0x82, 0x68, 0x31, 0x6F, 0x7F, 0xFF, 0x45, 0x68, 0xD2, 0x10, 0x5C, 0x3D, 0x3E, 0x4B, 0x60, 0x5D, 
   0x6E, 0xFB, 0x4E, 0x8B, 0xB8, 0x66, 0x62, 0x2C, 0x50, 0x56, 0xE3, 0x45, 0x6D, 0xFF, 0x9F, 0x84, 
   0x56, 0x3D, 0x51, 0x3B, 0x13, 0x5C, 0xA1, 0x57, 0x73, 0x7C, 0x53, 0x5D, 0x91, 0x3E, 0x74, 0xE3, 
   0x7D, 0x69, 0xD1, 0x93, 0x69, 0x63, 0x35, 0x69, 0x67, 0x00, 0x69, 0xC9, 0x51, 0x6E, 0xD9, 0x86, 
   0x73, 0x71, 0x4F, 0x55, 0x22, 0x44, 0x5B, 0xCA, 0x82, 0x6C, 0xFF, 0x69, 0x7E, 0x90, 0x00, 0x51, 
   0x42, 0x3F, 0x6D, 0xA7, 0xA6, 0x68, 0x98, 0x1E, 0x68, 0x62, 0x1F, 0x5D, 0x9F, 0x61, 0x74, 0xFF, 
   0xA1, 0x69, 0xC6, 0x8F, 0x69, 0x1E, 0x00, 0x69, 0xA4, 0x1F, 0x74, 0xBB, 0x86, 0x62, 0x71, 0x8B, 
   0x6D, 0xD1, 0x17, 0x51, 0xA2, 0x00, 0x47, 0x1F, 0x7B, 0x8D, 0x78, 0xBC, 0xBB, 0xE3, 0x3E, 0x75, 
   0xE5, 0x00, 0x00, 0x57, 0x4A, 0x4C, 0x5F, 0x92, 0x9E, 0xFF, 0x8D, 0x4C, 0xC7, 0x52, 0xC2, 0x69, 
   0x28, 0x76, 0x83, 0x3E, 0x00, 0xCD, 0x6C, 0x82, 0xA0, 0x45, 0xCE, 0x94, 0x5D, 0x37, 0xA4, 0x32, 
   0x5A, 0x89, 0xA0, 0xD7, 0xB7, 0xBA, 0x9B, 0xFF, 0x00, 0x00, 0x3F, 0x1F, 0x32, 0x4D, 0x80, 0xE4, 
   0xFF, 0x69, 0xC1, 0xB1, 0x45, 0x1D, 0x43, 0x0C, 0x04, 0x59, 0x2B, 0x57, 0x95, 0xAC, 0xB1, 0xE7, 
   0xD9, 0xC2, 0xFB, 0x36, 0x5E, 0x45, 0x04, 0x47, 0x52, 0x52, 0x55, 0xC6, 0x74, 0x5E, 0x85, 0x67, 
   0x4B, 0x3E, 0x16, 0x35, 0x39, 0x22, 0x6C, 0x94, 0x74, 0xA2, 0xFF, 0x71, 0x9D, 0x97, 0x4F, 0x4B, 
   0x3E, 0x5E, 0x4D, 0xA1, 0x2A, 0x68, 0x83, 0x4B, 0x3A, 0x4E, 0x4B, 0x73, 0x92, 0x4B, 0x8F, 0x9E, 
   0x66, 0x54, 0x7B, 0x1C, 0x0E, 0x5E, 0x73, 0x6A, 0x64, 0x94, 0x70, 0x53, 0x00, 0x17, 0x67, 0x17, 
   0xA6, 0xA8, 0x96, 0xA1, 0xB5, 0x6A, 0x29, 0x7C, 0x36, 0x95, 0x64, 0x57, 0x83, 0xB8, 0x77, 0x43, 
   0x98, 0x52, 0x8F, 0x1E, 0x17, 0x4D, 0x4F, 0x34, 0x07, 0xAA, 0x63, 0x74, 0x56, 0x85, 0xA2, 0x57, 
   0x3F, 0x73, 0xAD, 0x1B, 0x38, 0xAD, 0x05, 0x00, 0x4C, 0x46, 0x6F, 0x5C, 0xCA, 0xFE, 0xBC, 0x5B, 
   0x55, 0x7B, 0x00, 0x00, 0x51, 0x46, 0x5C, 0x5C, 0x63, 0x74, 0x79, 0x5E, 0x4D, 0x80, 0x30, 0x4D, 
   0x6A, 0x30, 0x59, 0x6B, 0x58, 0x70, 0xB4, 0x5E, 0x64, 0x7F, 0x46, 0x41, 0x22, 0x18, 0x4C, 0x5B, 
   0x46, 0x58, 0xA1, 0x53, 0x5E, 0x9B, 0x59, 0x75, 0x67, 0x6A, 0x58, 0x44, 0x25, 0x35, 0x82, 0x35, 
   0x57, 0x72, 0x79, 0x63, 0x5C, 0x29, 0x5D, 0x9A, 0x23, 0x5D, 0x89, 0x51, 0x58, 0x54, 0x52, 0x58, 
   0x6A, 0x52, 0x6E, 0x5A, 0x56, 0x4B, 0x67, 0x18, 0x34, 0x96, 0x46, 0x5C, 0x90, 0x5E, 0x74, 0x73, 
   0x4D, 0x59, 0x5B, 0x53, 0x59, 0x71, 0x41, 0x59, 0x81, 0x4C, 0x59, 0x32, 0x36, 0x59, 0x72, 0x5F, 
   0x5E, 0x9B, 0x6A, 0x5E, 0x85, 0x40, 0x59, 0x8A, 0x23, 0x59, 0x50, 0x3A, 0x59, 0x55, 0x52, 0x59, 
   0x73, 0x53, 0x59, 0x8B, 0x48, 0x59, 0x75, 0x48, 0x59, 0x75, 0x48, 0x59, 0x75, 0x53, 0x69, 0x7A, 
   0x62, 0x52, 0x85, 0x22, 0x58, 0x7F, 0x21, 0x5D, 0x72, 0x44, 0x46, 0x44, 0x5C, 0x5D, 0x72, 0x35, 
   0x69, 0x9A, 0x36, 0x59, 0x6D, 0x64, 0x4E, 0x68, 0x42, 0x5A, 0x74, 0x5E, 0x7C, 0xA1, 0x3B, 0x59, 
   0x67, 0x24, 0x36, 0x39, 0x52, 0x58, 0x68, 0x79, 0x6F, 0xC4, 0x2E, 0x68, 0x79, 0x10, 0x34, 0x49, 
   0x3F, 0x34, 0x38, 0x80, 0x63, 0x73, 0x58, 0x7B, 0xAE, 0x40, 0x69, 0x8C, 0x33, 0x5C, 0x62, 0x38, 
   0x3F, 0x66, 0x43, 0x39, 0x5F, 0x17, 0x62, 0x2E, 0x41, 0x73, 0x86, 0x8D, 0x62, 0xB1, 0x6A, 0x39, 
   0x9A, 0x07, 0x56, 0x33, 0x0E, 0x4C, 0x40, 0x71, 0x43, 0xB5, 0x89, 0x94, 0xC1, 0x2D, 0x72, 0x32, 
   0x15, 0x16, 0x45, 0x5A, 0x75, 0xEB, 0x7D, 0x85, 0xA6, 0x43, 0x12, 0x2C, 0x1A, 0x39, 0x74, 0x3C, 
   0x8A, 0x7C, 0x4E, 0x74, 0x89, 0x5B, 0x4C, 0x95, 0x45, 0x1F, 0x78, 0x41, 0x39, 0x52, 0x4E, 0x98, 
   0x5B, 0x66, 0x9F, 0xB9, 0x71, 0x54, 0xD6, 0x58, 0x57, 0x72, 0x3E, 0x61, 0x69, 0x1F, 0x33, 0x67, 
   0x2B, 0x51, 0x4B, 0x29, 0x5F, 0x71, 0x81, 0x6D, 0xC5, 0x8E, 0xAB, 0xA6, 0x5A, 0x49, 0x69, 0x00, 
   0x00, 0x86, 0x0F, 0x58, 0x84, 0x5E, 0xC4, 0x82, 0xA0, 0x88, 0xB2, 0x8F, 0x8C, 0xB8, 0x41, 0x50, 
   0x6C, 0x0C, 0x10, 0x98, 0x45, 0x61, 0x82, 0x5E, 0x91, 0x41, 0x55, 0x76, 0xBD, 0x8E, 0x75, 0xE3, 
   0x5F, 0x47, 0xA5, 0x03, 0x59, 0xBA, 0x5E, 0xB5, 0x91, 0x9C, 0x9C, 0xB5, 0x4B, 0x1B, 0xAB, 0x00, 
   0x09, 0x04, 0x79, 0x87, 0x46, 0xAD, 0x9F, 0xFF, 0x23, 0x3E, 0xD4, 0x15, 0x28, 0x4E, 0x6F, 0xB8, 
   0xC2, 0x52, 0xC7, 0x87, 0x3A, 0x3F, 0x63, 0x3F, 0x00, 0xB1, 0x2E, 0x26, 0x67, 0x42, 0xAE, 0x95, 
   0x72, 0xA1, 0xA2, 0x6D, 0x62, 0x77, 0x72, 0x45, 0x90, 0x0B, 0x61, 0xA4, 0x0D, 0x62, 0x85, 0xBA, 
   0x7F, 0xFF, 0xA8, 0x78, 0xC7, 0x17, 0x5A, 0x0E, 0x2A, 0x58, 0xB6, 0x5B, 0x41, 0xE7, 0x1D, 0x53, 
   0x20, 0x19, 0x7D, 0x65, 0x7D, 0x78, 0xDF, 0x63, 0x3B, 0x9D, 0x64, 0x9B, 0x86, 0x8B, 0x7E, 0x8C, 
   0x4F, 0x3D, 0xA8, 0x00, 0x48, 0x91, 0x17, 0x61, 0x3E, 0xD5, 0x9C, 0xA2, 0x64, 0x80, 0xFF, 0x00, 
   0x46, 0xB9, 0x7F, 0x56, 0x33, 0x6E, 0x6D, 0x86, 0x13, 0x6D, 0xBA, 0x57, 0x61, 0xA3, 0x5E, 0x61, 
   0x42, 0x26, 0x5C, 0x73, 0x60, 0x68, 0xFF, 0x83, 0x69, 0xC3, 0x70, 0x85, 0x67, 0x08, 0x62, 0xD6, 
   0x09, 0x56, 0x9B, 0x9F, 0x68, 0x55, 0xA5, 0x8A, 0xA4, 0x40, 0x4B, 0x89, 0x00, 0x5D, 0xBD, 0x10, 
   0x96, 0xD2, 0x91, 0x5D, 0x16, 0x8F, 0x4B, 0x8F, 0x40, 0x78, 0xFF, 0x5B, 0x51, 0x70, 0x66, 0x68, 
   0x80, 0x54, 0x8A, 0xE0, 0x3C, 0x4B, 0xC1, 0x47, 0x51, 0x4D, 0x53, 0x84, 0x27, 0x54, 0x69, 0xE1, 
   0x4F, 0x69, 0xFF, 0x78, 0x69, 0xA4, 0x87, 0x69, 0x8A, 0x4B, 0x69, 0x8E, 0x11, 0x6E, 0x61, 0x2A, 
   0x62, 0xC9, 0x9F, 0x67, 0xBF, 0x8F, 0x66, 0x69, 0x37, 0x4F, 0x90, 0x35, 0x55, 0xBD, 0x73, 0x7E, 
   0xBB, 0x4A, 0x68, 0x5E, 0x3E, 0x68, 0x63, 0x2E, 0x5D, 0x99, 0x1B, 0x74, 0x87, 0x9C, 0x69, 0xAE, 
   0xD5, 0x69, 0xFF, 0x16, 0x69, 0xD7, 0x00, 0x69, 0x00, 0x82, 0x69, 0x65, 0xC6, 0x6E, 0xFF, 0x34, 
   0x74, 0xEF, 0x00, 0x68, 0x30, 0x39, 0x51, 0x08, 0x65, 0x3C, 0xA8, 0x85, 0xB5, 0xFF, 0x85, 0x93, 
   0x97, 0x39, 0x53, 0x30, 0x33, 0x57, 0xD5, 0x78, 0x5E, 0xED, 0x6D, 0x97, 0x7A, 0x3F, 0x53, 0x8F, 
   0x39, 0x1C, 0xAC, 0x6E, 0xB2, 0x8C, 0x7F, 0xA1, 0xEC, 0x5B, 0x12, 0xB0, 0x1C, 0x5B, 0x36, 0x3F, 
   0xAC, 0x6F, 0x64, 0x85, 0xCD, 0x82, 0x2A, 0xC4, 0x71, 0x69, 0xD3, 0x68, 0xB9, 0xBE, 0x75, 0x89, 
   0x6E, 0x26, 0x52, 0x69, 0x08, 0x1B, 0x57, 0x22, 0x3E, 0x43, 0x66, 0x8C, 0xEB, 0xCF, 0x9A, 0xFF, 
   0x62, 0x83, 0x4F, 0x41, 0x85, 0x6D, 0x53, 0x5F, 0xC5, 0x00, 0x4F, 0x8E, 0x16, 0x2A, 0x46, 0x88, 
   0x78, 0x88, 0x60, 0x77, 0x88, 0x00, 0x00, 0x41, 0x01, 0x3A, 0x6D, 0xA4, 0xF0, 0xFF, 0xAB, 0xE3, 
   0xDB, 0x15, 0x00, 0x4D, 0x29, 0x00, 0x3D, 0x5B, 0x87, 0x8B, 0x5B, 0x6B, 0x75, 0x4A, 0x38, 0x7B, 
   0x22, 0x43, 0x8D, 0x71, 0x7C, 0x76, 0x47, 0x31, 0x37, 0x47, 0x00, 0x00, 0x26, 0xA9, 0xC6, 0x5C, 
   0xA7, 0xDC, 0x8B, 0x6E, 0x60, 0x6E, 0x6C, 0x6B, 0x02, 0x50, 0xAF, 0x47, 0x51, 0x81, 0xC9, 0xBC, 
   0x8B, 0x71, 0x91, 0xC1, 0x00, 0x00, 0x57, 0x13, 0x2A, 0x21, 0xCF, 0xCF, 0x8D, 0x5C, 0x6C, 0x7D, 
   0x00, 0x00, 0x5C, 0x16, 0x1D, 0x85, 0x75, 0xAA, 0x9C, 0xC5, 0xEE, 0x8F, 0x39, 0x23, 0x54, 0x00, 
   0x00, 0x63, 0x3A, 0x6D, 0x74, 0x52, 0x5D, 0x7F, 0x5E, 0x64, 0x5D, 0x47, 0x64, 0x79, 0x30, 0x4D, 
   0x80, 0x47, 0x4D, 0x64, 0x53, 0x59, 0x87, 0x58, 0x70, 0xBF, 0x30, 0x64, 0x62, 0x4B, 0x41, 0x27, 
   0x1E, 0x4C, 0x81, 0x5E, 0x58, 0x76, 0x80, 0x74, 0x60, 0x2A, 0x41, 0x77, 0x2A, 0x4C, 0x7E, 0x74, 
   0x63, 0x68, 0x3B, 0x5D, 0x95, 0x34, 0x4C, 0x77, 0x51, 0x4C, 0x4E, 0x3B, 0x63, 0x6F, 0x4C, 0x68, 
   0x6A, 0x68, 0x45, 0x6C, 0x18, 0x34, 0x90, 0x46, 0x5C, 0x91, 0x5E, 0x63, 0x69, 0x53, 0x4D, 0x73, 
   0x3C, 0x64, 0x72, 0x4C, 0x5E, 0x60, 0x3B, 0x59, 0x88, 0x35, 0x59, 0x7C, 0x41, 0x59, 0x38, 0x42, 
   0x59, 0x6C, 0x5F, 0x59, 0x96, 0x53, 0x59, 0x80, 0x40, 0x59, 0x8A, 0x23, 0x59, 0x50, 0x3A, 0x59, 
   0x5B, 0x52, 0x59, 0x73, 0x53, 0x59, 0x8B, 0x48, 0x59, 0x75, 0x53, 0x64, 0x7A, 0x41, 0x4D, 0x74, 
   0x52, 0x58, 0x73, 0x51, 0x58, 0x77, 0x55, 0x5D, 0x44, 0x32, 0x4C, 0x72, 0x17, 0x4C, 0xA0, 0x57, 
   0x58, 0x5C, 0x7B, 0x59, 0x5C, 0x54, 0x5A, 0x7F, 0x41, 0x7C, 0xA1, 0x3B, 0x59, 0x67, 0x46, 0x36, 
   0x39, 0x46, 0x58, 0x68, 0x46, 0x64, 0xCF, 0x35, 0x64, 0x7E, 0x62, 0x52, 0x16, 0x4A, 0x6E, 0x3F, 
   0x05, 0x4B, 0xD0, 0x28, 0x34, 0xA8, 0x6E, 0x57, 0x35, 0x75, 0x74, 0x68, 0x4B, 0x63, 0xA6, 0x38, 
   0x4B, 0x6C, 0x15, 0x3F, 0x5F, 0x38, 0x56, 0x5F, 0x4B, 0x62, 0x67, 0x4D, 0x5C, 0x80, 0x5F, 0x56, 
   0x56, 0x3D, 0x23, 0x87, 0x27, 0x3C, 0xB1, 0x61, 0xA4, 0xB1, 0x78, 0x71, 0x6A, 0x38, 0x25, 0x4C, 
   0x15, 0x3B, 0x4D, 0x59, 0x80, 0x99, 0x4E, 0x5E, 0xDE, 0x32, 0x46, 0x5A, 0x54, 0x3A, 0x25, 0x59, 
   0x51, 0x97, 0x10, 0x58, 0x77, 0x4F, 0x69, 0x89, 0x67, 0x58, 0x8E, 0x2B, 0x15, 0x30, 0x5A, 0x56, 
   0x7D, 0xAE, 0xAE, 0xFC, 0x3A, 0x6E, 0x90, 0x00, 0x23, 0x4E, 0x55, 0x45, 0x80, 0x62, 0x5D, 0x6F, 
   0x58, 0x75, 0x65, 0x5D, 0x64, 0xB1, 0x36, 0x59, 0x7F, 0x4D, 0x4A, 0x4E, 0x64, 0x68, 0x68, 0x37, 
   0x96, 0xB1, 0x22, 0x36, 0xC6, 0x42, 0x10, 0x9B, 0xA7, 0xA8, 0x9B, 0xB2, 0xD8, 0xA0, 0x3C, 0x91, 
   0x88, 0x00, 0x21, 0x7D, 0x0B, 0x00, 0x8A, 0x7A, 0x78, 0x98, 0x9E, 0xBA, 0x95, 0x2C, 0x55, 0xD0, 
   0x1B, 0x4F, 0xAE, 0x8D, 0x9F, 0x59, 0x70, 0x8E, 0xC4, 0x35, 0x6E, 0xC9, 0x2E, 0x27, 0x92, 0x2F, 
   0x54, 0x78, 0x64, 0x89, 0x3F, 0xBF, 0xB0, 0xA8, 0x77, 0x48, 0xFF, 0x00, 0x00, 0x86, 0x18, 0x95, 
   0x4B, 0xD0, 0xFF, 0xEE, 0x6A, 0x4E, 0x7A, 0x00, 0x00, 0x17, 0x3C, 0x72, 0x9B, 0x9F, 0x97, 0xC0, 
   0x5B, 0x4F, 0x94, 0x0F, 0x60, 0x83, 0x31, 0x6C, 0x9B, 0x60, 0x6D, 0x6B, 0x41, 0x79, 0xB2, 0x87, 
   0x6E, 0xE7, 0x9C, 0x8A, 0xD5, 0x2D, 0x87, 0xB8, 0x00, 0x23, 0x2A, 0x69, 0x01, 0x13, 0x75, 0x7C, 
   0xC2, 0x47, 0xC8, 0xFF, 0x09, 0x5D, 0x9A, 0x44, 0x28, 0x00, 0x90, 0x72, 0x91, 0x7F, 0x7E, 0xFF, 
   0x11, 0x61, 0xA5, 0x2E, 0x5C, 0x1B, 0x84, 0x68, 0x72, 0x4D, 0x74, 0xFF, 0x64, 0x6E, 0xDC, 0x80, 
   0x5D, 0x57, 0x19, 0x68, 0x8D, 0x51, 0x68, 0x92, 0x62, 0x68, 0x8E, 0x36, 0x6D, 0xAC, 0x70, 0x6D, 
   0xA8, 0x6B, 0x5C, 0xC9, 0x3D, 0x61, 0x78, 0x4D, 0x6D, 0x40, 0x6A, 0x6E, 0xB5, 0x4D, 0x7F, 0xF6, 
   0x37, 0x56, 0xFF, 0x56, 0x61, 0x45, 0x95, 0x4B, 0x07, 0x93, 0x74, 0xFF, 0x0D, 0x96, 0xF6, 0x16, 
   0x46, 0x00, 0x3F, 0x51, 0xC5, 0x6B, 0x8A, 0xED, 0x9A, 0x62, 0x16, 0x4A, 0x73, 0x6E, 0x27, 0x51, 
   0xFF, 0x65, 0x5D, 0xDE, 0x82, 0x96, 0x80, 0x32, 0x5D, 0x7D, 0x48, 0x46, 0x92, 0x6A, 0x7F, 0x44, 
   0x42, 0x69, 0x9D, 0x43, 0x69, 0xFF, 0x7C, 0x69, 0xB9, 0x6F, 0x69, 0x33, 0x1E, 0x69, 0x55, 0x19, 
   0x74, 0xAE, 0x7B, 0x73, 0xFF, 0x8D, 0x60, 0xAE, 0x36, 0x54, 0x00, 0x35, 0x66, 0xC6, 0x8A, 0x67, 
   0xE3, 0x5B, 0x73, 0x77, 0x00, 0x5D, 0x76, 0x3B, 0x74, 0x8E, 0xAA, 0x69, 0xAD, 0x8F, 0x69, 0xA0, 
   0x16, 0x69, 0xB9, 0x1C, 0x69, 0xF1, 0x94, 0x69, 0x9E, 0x93, 0x69, 0x50, 0x30, 0x69, 0xAF, 0x17, 
   0x69, 0x8D, 0x45, 0x74, 0x5B, 0x69, 0x68, 0xCA, 0x54, 0x51, 0xD1, 0x29, 0x3C, 0x61, 0x7B, 0x8D, 
   0x9C, 0xB9, 0xBB, 0xFF, 0x3F, 0x48, 0xA7, 0x13, 0x55, 0x50, 0x24, 0x65, 0x9F, 0x54, 0x00, 0xB7, 
   0x68, 0x89, 0x75, 0x75, 0xFF, 0xC6, 0x7A, 0x7C, 0xD1, 0x3F, 0x2E, 0x9A, 0x37, 0x70, 0x80, 0x53, 
   0x75, 0x7F, 0x16, 0x05, 0x7C, 0x2C, 0x4E, 0x9C, 0xF0, 0xFF, 0xFF, 0xB5, 0xD8, 0xFA, 0x0F, 0x0A, 
   0x36, 0x08, 0x11, 0x20, 0x00, 0x67, 0x8C, 0x62, 0x91, 0xE9, 0xD7, 0x7B, 0xCD, 0x38, 0x5E, 0x4E, 
   0x0F, 0x5D, 0x7A, 0x90, 0x68, 0xD9, 0x77, 0x94, 0xA9, 0x23, 0x46, 0x5C, 0x2B, 0x5E, 0x7B, 0x26, 
   0x50, 0x85, 0x55, 0x27, 0x89, 0x67, 0x3F, 0x6D, 0x2F, 0x4A, 0x3C, 0x4D, 0x9E, 0xAC, 0x65, 0xCC, 
   0xFF, 0x75, 0x89, 0x76, 0x4C, 0x18, 0x4F, 0x28, 0x2B, 0x69, 0x43, 0x68, 0x79, 0x33, 0x47, 0x6F, 
   0x61, 0x44, 0x9E, 0x4B, 0xA0, 0x83, 0x22, 0x36, 0x73, 0x00, 0x10, 0x6E, 0x98, 0x85, 0x5E, 0x95, 
   0x77, 0x8E, 0x01, 0x67, 0x9C, 0x34, 0x66, 0x8D, 0x79, 0x33, 0x92, 0x7F, 0x7E, 0x6A, 0x3A, 0xB6, 
   0x81, 0x3A, 0x26, 0xBE, 0x83, 0x6E, 0x88, 0x81, 0xAF, 0x45, 0x18, 0x28, 0x43, 0x27, 0x0E, 0xA9, 
   0x22, 0x10, 0x6C, 0x37, 0x7C, 0x50, 0xE8, 0xFF, 0xC8, 0x74, 0x64, 0x88, 0x00, 0x00, 0x2B, 0x23, 
   0x50, 0x69, 0x68, 0x6E, 0x9C, 0x52, 0x58, 0x75, 0x35, 0x4D, 0x79, 0x35, 0x64, 0x46, 0x5E, 0x64, 
   0x74, 0x58, 0x4D, 0x8B, 0x41, 0x4D, 0x5E, 0x3C, 0x59, 0x54, 0x58, 0x70, 0xD6, 0x4D, 0x64, 0x95, 
   0x47, 0x41, 0x14, 0x51, 0x62, 0x2F, 0x06, 0x3A, 0xA3, 0x34, 0x68, 0x7E, 0x90, 0x74, 0x5D, 0x30, 
   0x52, 0xA1, 0x2F, 0x5D, 0x7E, 0x46, 0x4C, 0x5F, 0x4C, 0x57, 0x5D, 0x4C, 0x51, 0x3B, 0x68, 0x57, 
   0x65, 0x1D, 0x40, 0x95, 0x34, 0x51, 0x80, 0x63, 0x74, 0x75, 0x4D, 0x4D, 0x74, 0x3C, 0x58, 0x6D, 
   0x52, 0x52, 0x83, 0x46, 0x4D, 0x72, 0x40, 0x5E, 0x5B, 0x47, 0x59, 0x88, 0x53, 0x59, 0x76, 0x4D, 
   0x59, 0x4F, 0x26, 0x59, 0x67, 0x5F, 0x59, 0x96, 0x6A, 0x59, 0x80, 0x3B, 0x59, 0x8A, 0x23, 0x59, 
   0x50, 0x3A, 0x59, 0x5B, 0x52, 0x59, 0x73, 0x5E, 0x64, 0x8B, 0x47, 0x4D, 0x8B, 0x3B, 0x58, 0x73, 
   0x35, 0x58, 0x66, 0x5D, 0x58, 0x49, 0x56, 0x58, 0x6C, 0x17, 0x63, 0x9A, 0x2E, 0x4C, 0x5C, 0x40, 
   0x3B, 0x67, 0x58, 0x53, 0x73, 0x5E, 0x81, 0x8F, 0x3B, 0x59, 0x6C, 0x2F, 0x36, 0x39, 0x40, 0x58, 
   0x68, 0x62, 0x64, 0xCF, 0x29, 0x64, 0x83, 0x3B, 0x4D, 0x21, 0x5E, 0x4D, 0x39, 0x69, 0x69, 0xAE, 
   0x45, 0x6E, 0xAA, 0x0B, 0x3F, 0x7B, 0x2E, 0x2D, 0x51, 0x7F, 0x6D, 0x55, 0x5D, 0x68, 0x89, 0x28, 
   0x63, 0x7E, 0x2D, 0x5C, 0x50, 0x44, 0x3F, 0x7C, 0x55, 0x44, 0x59, 0x34, 0x6D, 0x06, 0x20, 0x46, 
   0x6D, 0x84, 0x4E, 0xDA, 0x95, 0x8D, 0xE1, 0x2D, 0x81, 0x7E, 0x05, 0x30, 0x25, 0x71, 0x46, 0x90, 
   0x93, 0x6E, 0xA0, 0x26, 0x36, 0x23, 0x1A, 0x53, 0x69, 0x54, 0x98, 0xDD, 0x6C, 0x75, 0x99, 0x44, 
   0x2A, 0x38, 0x5A, 0x4C, 0xA9, 0x38, 0x7B, 0x71, 0x23, 0x5F, 0x29, 0x86, 0x75, 0xBA, 0x8B, 0x37, 
   0xDD, 0x1D, 0x43, 0x2C, 0x26, 0x6B, 0x75, 0x32, 0x5C, 0x8C, 0x1E, 0x47, 0x5A, 0x6A, 0x86, 0x9B, 
   0x99, 0x76, 0xC3, 0x48, 0x5E, 0x79, 0x29, 0x30, 0x4B, 0x06, 0x11, 0x5E, 0x19, 0x9E, 0x90, 0x83, 
   0xD9, 0x7F, 0x6A, 0x4F, 0xB7, 0x54, 0x09, 0xF1, 0x54, 0x4F, 0x95, 0x59, 0xA2, 0x60, 0x6F, 0x98, 
   0x8D, 0x52, 0x79, 0x8A, 0x2F, 0x49, 0x92, 0x62, 0x2D, 0xD8, 0x5E, 0x4C, 0x89, 0x3D, 0x9A, 0x72, 
   0x55, 0xAC, 0x9B, 0x83, 0x7D, 0xB3, 0x7B, 0x4D, 0xA2, 0x1E, 0x30, 0xA1, 0x1E, 0x90, 0x85, 0x9C, 
   0xA1, 0xE4, 0x69, 0x5B, 0xC4, 0x18, 0x21, 0x10, 0x60, 0x76, 0x4F, 0x7B, 0x9E, 0xFF, 0x08, 0x37, 
   0x9B, 0x24, 0x00, 0x67, 0x76, 0xB1, 0xBA, 0x73, 0xCF, 0x6A, 0x51, 0x44, 0x6A, 0x50, 0x2A, 0x94, 
   0x5F, 0x51, 0xA1, 0x30, 0x70, 0xA1, 0x15, 0x72, 0x75, 0x56, 0x6D, 0xA9, 0xC4, 0x62, 0xB0, 0x40, 
   0x73, 0x72, 0x00, 0x7D, 0xDE, 0x82, 0x4E, 0xF1, 0x67, 0x42, 0x0F, 0x1D, 0x70, 0x00, 0x77, 0x71, 
   0xFF, 0x7C, 0x45, 0xF7, 0x0E, 0xA1, 0x12, 0x36, 0xA0, 0x83, 0x75, 0x05, 0xA8, 0x17, 0x55, 0xA5, 
   0x47, 0x90, 0xA0, 0xBA, 0x8C, 0x86, 0x58, 0x79, 0xEC, 0x02, 0x3A, 0x9B, 0x52, 0x62, 0x4A, 0x97, 
   0x90, 0xB0, 0x4C, 0x6E, 0xBC, 0x07, 0x5D, 0x83, 0x62, 0x68, 0x5C, 0x6A, 0x62, 0xAF, 0x5A, 0x7F, 
   0xFF, 0x82, 0x6D, 0xAC, 0x5E, 0x4A, 0x00, 0x0D, 0x50, 0x64, 0x30, 0x78, 0xCF, 0x82, 0x68, 0xC7, 
   0x7D, 0x73, 0x95, 0x33, 0x4B, 0xA5, 0x2D, 0x5D, 0xD7, 0x73, 0x96, 0x8A, 0xB1, 0x5D, 0x5B, 0x41, 
   0x51, 0xD2, 0x00, 0x73, 0xAF, 0x50, 0x62, 0x58, 0x75, 0x68, 0x5F, 0x65, 0x68, 0xAC, 0x43, 0x68, 
   0xE3, 0x3E, 0x5D, 0xA0, 0x61, 0x69, 0x8E, 0x83, 0x8B, 0xDC, 0x43, 0x5D, 0xB2, 0x36, 0x46, 0x60, 
   0x47, 0x7F, 0x60, 0x58, 0x69, 0xB2, 0x3D, 0x69, 0xDB, 0x3E, 0x69, 0x80, 0x93, 0x69, 0x8B, 0x6F, 
   0x74, 0xA2, 0x18, 0x73, 0x93, 0x1D, 0x50, 0xFE, 0x79, 0x66, 0xD3, 0x7F, 0x66, 0x04, 0x23, 0x5B, 
   0x76, 0x2E, 0x5C, 0xFF, 0x52, 0x7F, 0xA7, 0x6B, 0x69, 0x67, 0x98, 0x69, 0x9B, 0x25, 0x69, 0xB3, 
   0x00, 0x69, 0x54, 0x8F, 0x69, 0x80, 0xD9, 0x69, 0xFF, 0x26, 0x69, 0xD6, 0x00, 0x69, 0x00, 0x40, 
   0x69, 0x31, 0x98, 0x69, 0xFF, 0x60, 0x74, 0xFF, 0x21, 0x68, 0x72, 0x4A, 0x5C, 0x16, 0x5D, 0x30, 
   0xC3, 0x97, 0x7C, 0xFF, 0x9A, 0xE1, 0x7E, 0x07, 0x27, 0x5E, 0x00, 0x00, 0x8C, 0x48, 0x8A, 0x8A, 
   0x96, 0xC8, 0xCB, 0x7B, 0x4E, 0xD7, 0x2F, 0x87, 0x8C, 0x5B, 0xBE, 0x84, 0x92, 0x64, 0xD2, 0x0F, 
   0x00, 0x7C, 0x2C, 0x43, 0x5F, 0x79, 0xEE, 0xDD, 0x70, 0xB7, 0xB1, 0x91, 0x64, 0x9F, 0x70, 0x4E, 
   0xB7, 0x00, 0x36, 0x5F, 0x34, 0x59, 0xA6, 0xB8, 0xC6, 0xE2, 0x40, 0x80, 0x57, 0x23, 0x49, 0x3F, 
   0x61, 0x43, 0xD8, 0x51, 0x50, 0xA5, 0x6C, 0x9A, 0x5F, 0x91, 0xAE, 0x96, 0x27, 0x43, 0xA0, 0x00, 
   0x12, 0x87, 0x2D, 0x34, 0x68, 0xA8, 0x75, 0x90, 0x91, 0x9D, 0xB7, 0x00, 0x20, 0x40, 0x1D, 0x1C, 
   0x52, 0x85, 0xEA, 0xFE, 0x74, 0xC6, 0xBF, 0x2E, 0x00, 0x43, 0x1C, 0x00, 0x57, 0x55, 0x5D, 0x80, 
   0x56, 0x94, 0x77, 0x4B, 0x57, 0xB6, 0x46, 0x7A, 0xAB, 0x3B, 0x95, 0xD7, 0x4E, 0x01, 0x2A, 0x66, 
   0x6E, 0x13, 0x2E, 0x8C, 0xA4, 0x46, 0x2E, 0xBE, 0x95, 0xAB, 0x64, 0x54, 0x98, 0x6F, 0x00, 0x00, 
   0xA8, 0x57, 0x81, 0x64, 0xE7, 0xE2, 0xA7, 0x6C, 0x66, 0xC1, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x1B, 
   0x8C, 0x91, 0x9D, 0xD1, 0xFF, 0x98, 0x24, 0x1F, 0x42, 0x10, 0x27, 0x7B, 0x58, 0x7B, 0xAF, 0x41, 
   0x4D, 0x59, 0x40, 0x41, 0x53, 0x51, 0x63, 0x97, 0x46, 0x58, 0x75, 0x35, 0x4D, 0x6E, 0x5E, 0x64, 
   0x79, 0x41, 0x64, 0x62, 0x30, 0x4D, 0x57, 0x47, 0x4D, 0x75, 0x3D, 0x59, 0x98, 0x65, 0x70, 0xB8, 
   0x75, 0x7A, 0x3D, 0x12, 0x29, 0x24, 0x1C, 0x3F, 0x5E, 0x55, 0x5C, 0x89, 0x4B, 0x5D, 0xA6, 0x46, 
   0x58, 0x73, 0x40, 0x58, 0x66, 0x4C, 0x63, 0x70, 0x5E, 0x51, 0x59, 0x5D, 0x57, 0x6A, 0x1D, 0x4C, 
   0x66, 0x23, 0x5D, 0x7E, 0x5D, 0x69, 0x74, 0x53, 0x59, 0x85, 0x53, 0x69, 0x74, 0x4C, 0x52, 0x6D, 
   0x46, 0x58, 0x5C, 0x1D, 0x52, 0x83, 0x4B, 0x64, 0x72, 0x5E, 0x5E, 0x5B, 0x48, 0x59, 0x88, 0x48, 
   0x59, 0x76, 0x4D, 0x59, 0x4F, 0x42, 0x59, 0x67, 0x59, 0x59, 0x96, 0x6A, 0x59, 0x7A, 0x3B, 0x59, 
   0x8A, 0x23, 0x59, 0x4A, 0x3F, 0x64, 0x55, 0x51, 0x4D, 0x83, 0x46, 0x58, 0x78, 0x3B, 0x58, 0x7D, 
   0x62, 0x58, 0x4F, 0x40, 0x58, 0x6C, 0x3B, 0x58, 0xA6, 0x4C, 0x52, 0x68, 0x69, 0x52, 0x61, 0x3B, 
   0x5E, 0x78, 0x3A, 0x75, 0x95, 0x3A, 0x5E, 0x72, 0x4B, 0x3B, 0x39, 0x40, 0x58, 0x68, 0x5D, 0x64, 
   0xD4, 0x3B, 0x64, 0x89, 0x40, 0x4D, 0x0A, 0x52, 0x4D, 0x3E, 0x3C, 0x64, 0xB9, 0x53, 0x5E, 0x99, 
   0x69, 0x52, 0x65, 0x45, 0x67, 0x6A, 0x1B, 0x43, 0xA1, 0x16, 0x27, 0x5B, 0x61, 0x56, 0x22, 0x6E, 
   0x7A, 0x8A, 0x57, 0x74, 0xB8, 0x50, 0x50, 0x6C, 0x1B, 0x33, 0x16, 0x11, 0x2E, 0x5D, 0x42, 0x4E, 
   0x85, 0x7E, 0xB0, 0xC7, 0x79, 0x7C, 0x95, 0x2D, 0x08, 0x60, 0x32, 0x40, 0x8C, 0x49, 0x8A, 0x74, 
   0x70, 0x46, 0x7D, 0x2B, 0x3B, 0x59, 0x31, 0x53, 0x0B, 0x59, 0x71, 0x97, 0x4F, 0x76, 0xDE, 0x5B, 
   0x4D, 0x7D, 0x61, 0x2A, 0x37, 0x1D, 0x47, 0x44, 0x4B, 0x81, 0xB9, 0x84, 0x70, 0xD6, 0x5A, 0x5C, 
   0x63, 0x00, 0x17, 0x61, 0x09, 0x0E, 0x51, 0x67, 0x8A, 0x7B, 0x75, 0x92, 0x90, 0x44, 0x4E, 0xB4, 
   0x72, 0x75, 0xA2, 0x76, 0x47, 0x6E, 0x41, 0x20, 0x5D, 0x1E, 0x84, 0x9F, 0x2C, 0x76, 0x82, 0x58, 
   0x4B, 0x97, 0xB0, 0xAC, 0xA4, 0x81, 0x93, 0x88, 0x0C, 0x08, 0x8D, 0x00, 0x0E, 0x9F, 0x58, 0x8F, 
   0x56, 0xAA, 0xB4, 0xAE, 0x86, 0x91, 0xBC, 0x01, 0x12, 0x9B, 0x00, 0x1E, 0xC7, 0x76, 0xA4, 0x60, 
   0xA5, 0xBC, 0x6C, 0x49, 0x43, 0xDF, 0x1A, 0x31, 0x9C, 0x53, 0x75, 0x47, 0x76, 0xA8, 0xD0, 0x75, 
   0x79, 0xF2, 0x55, 0x4F, 0xB5, 0x0A, 0x26, 0x81, 0x2D, 0x88, 0x01, 0xAB, 0xB5, 0x69, 0x87, 0x30, 
   0xFF, 0x00, 0x00, 0x68, 0x21, 0x6E, 0x58, 0xDB, 0xFF, 0xFF, 0x81, 0x91, 0x6F, 0x0C, 0x00, 0x69, 
   0x37, 0x39, 0xCF, 0x48, 0x63, 0x6A, 0x5B, 0x76, 0xB4, 0x6C, 0x83, 0xD1, 0x5B, 0x7E, 0x6F, 0x43, 
   0x71, 0x8F, 0x2C, 0x31, 0x89, 0x1D, 0x32, 0x30, 0xAE, 0x95, 0xD7, 0x8C, 0xAC, 0xFF, 0x12, 0x39, 
   0x34, 0x44, 0x21, 0x27, 0x97, 0x82, 0xDA, 0x45, 0x7E, 0xDD, 0x00, 0x6C, 0xA3, 0x32, 0x3A, 0x1B, 
   0xBA, 0x69, 0x6F, 0x6C, 0xB3, 0xFF, 0x20, 0x52, 0xB9, 0x62, 0x3A, 0x15, 0x34, 0x73, 0x69, 0x19, 
   0x62, 0xA9, 0x97, 0x74, 0xA0, 0x75, 0x6E, 0x8B, 0x08, 0x5D, 0x9E, 0x63, 0x68, 0xD7, 0x64, 0x5D, 
   0x9D, 0x4D, 0x7F, 0x7E, 0x57, 0x73, 0xAA, 0x46, 0x55, 0x8E, 0x2A, 0x55, 0x83, 0x60, 0x67, 0x7F, 
   0x94, 0x5D, 0x6D, 0x55, 0x80, 0xFF, 0x00, 0x90, 0xFF, 0x62, 0x46, 0x00, 0xA2, 0x51, 0x55, 0x90, 
   0x84, 0xFF, 0x52, 0x5D, 0x5A, 0x00, 0x68, 0x32, 0x16, 0x68, 0xEE, 0x80, 0x5D, 0xBD, 0x8E, 0x74, 
   0x3B, 0x44, 0x74, 0x9E, 0x3F, 0x52, 0xF5, 0x72, 0x69, 0xBC, 0x88, 0x8B, 0x81, 0x37, 0x5D, 0xC8, 
   0x4C, 0x46, 0x6F, 0x4C, 0x7F, 0x1A, 0x3D, 0x69, 0x8A, 0x56, 0x69, 0xFF, 0xA6, 0x74, 0xF0, 0x81, 
   0x68, 0x6F, 0x11, 0x51, 0x56, 0x16, 0x7E, 0xA0, 0x77, 0x67, 0xDF, 0x61, 0x5B, 0x99, 0x1D, 0x60, 
   0x27, 0x1A, 0x67, 0xA6, 0xB0, 0x62, 0xF2, 0xAF, 0x74, 0xA2, 0x00, 0x69, 0x72, 0x00, 0x69, 0x6D, 
   0x98, 0x69, 0x86, 0xA5, 0x69, 0xD8, 0x37, 0x69, 0xAC, 0x35, 0x69, 0xE3, 0x36, 0x69, 0x74, 0x82, 
   0x69, 0x2A, 0x5B, 0x69, 0xD6, 0x50, 0x69, 0xC2, 0x67, 0x84, 0x79, 0x50, 0x56, 0xD3, 0x4A, 0x46, 
   0x99, 0x4A, 0x90, 0x5F, 0x5A, 0x80, 0xB4, 0x6A, 0x3C, 0xA3, 0x1A, 0x53, 0x60, 0x32, 0x7B, 0xA1, 
   0x89, 0x54, 0xFE, 0x6E, 0x4F, 0x98, 0x45, 0x90, 0x80, 0x71, 0xB7, 0xAD, 0x27, 0x33, 0x9C, 0x43, 
   0x21, 0xBD, 0x8E, 0xA6, 0xD1, 0x6B, 0xB2, 0x63, 0x1A, 0x44, 0x5C, 0x26, 0x33, 0x92, 0x57, 0x73, 
   0xD9, 0xAE, 0xA8, 0xFF, 0xB7, 0x79, 0xB3, 0x0D, 0x53, 0x01, 0x00, 0x76, 0x64, 0x5E, 0x30, 0xD6, 
   0x6B, 0x42, 0x70, 0x38, 0x9E, 0x58, 0x59, 0x71, 0x97, 0x58, 0x80, 0xA3, 0x45, 0x62, 0xA2, 0x34, 
   0x4A, 0x89, 0x34, 0x77, 0x59, 0x57, 0x92, 0x9B, 0x6E, 0x5D, 0xB5, 0x61, 0x32, 0x5E, 0x10, 0x1B, 
   0x1A, 0x1C, 0x3B, 0x89, 0x73, 0xC6, 0xF2, 0x74, 0x91, 0x96, 0x40, 0x00, 0x3E, 0x3F, 0x30, 0x6A, 
   0x3F, 0x71, 0x87, 0x5B, 0x7E, 0xAA, 0x6B, 0x82, 0x82, 0x87, 0x9E, 0x8D, 0x03, 0x5C, 0x91, 0x04, 
   0x06, 0x3A, 0x9A, 0x3B, 0x41, 0xAC, 0xC1, 0x82, 0x1B, 0x88, 0xAD, 0x00, 0x00, 0x8C, 0x66, 0x6F, 
   0x6F, 0xA1, 0x9D, 0x80, 0x46, 0x7F, 0x91, 0x39, 0x44, 0xAD, 0x39, 0x28, 0x9E, 0x56, 0x7E, 0x3F, 
   0x94, 0xBB, 0x5E, 0x73, 0x33, 0x95, 0x00, 0x00, 0x3F, 0x13, 0x47, 0x52, 0x92, 0x8D, 0xA4, 0x87, 
   0x71, 0xB0, 0x13, 0x42, 0x59, 0x06, 0x41, 0x53, 0x56, 0x63, 0x91, 0x52, 0x58, 0x91, 0x41, 0x4D, 
   0x69, 0x47, 0x64, 0x52, 0x4C, 0x64, 0x8B, 0x31, 0x4D, 0x9B, 0x54, 0x52, 0x51, 0x70, 0x6F, 0x3B, 
   0x26, 0x52, 0xDA, 0x47, 0x57, 0x83, 0x73, 0x4B, 0x1B, 0x1C, 0x50, 0x87, 0x27, 0x5C, 0x8D, 0x5C, 
   0x63, 0x71, 0x4C, 0x58, 0x65, 0x47, 0x63, 0x5A, 0x57, 0x51, 0x72, 0x29, 0x4C, 0x95, 0x2F, 0x5D, 
   0x78, 0x5D, 0x64, 0x45, 0x47, 0x59, 0x7E, 0x41, 0x64, 0x79, 0x4C, 0x4D, 0x74, 0x3B, 0x58, 0x7F, 
   0x46, 0x52, 0x68, 0x3A, 0x58, 0x6D, 0x2F, 0x52, 0x7E, 0x52, 0x4D, 0x72, 0x58, 0x64, 0x60, 0x48, 
   0x59, 0x76, 0x4D, 0x59, 0x7C, 0x3C, 0x59, 0x4F, 0x31, 0x59, 0x61, 0x5F, 0x59, 0xA7, 0x6A, 0x59, 
   0x6A, 0x40, 0x64, 0x96, 0x39, 0x4D, 0x6C, 0x22, 0x58, 0x54, 0x4A, 0x58, 0x87, 0x73, 0x58, 0x54, 
   0x2F, 0x58, 0x5B, 0x29, 0x52, 0x8F, 0x3C, 0x4D, 0x79, 0x76, 0x64, 0x6D, 0x59, 0x59, 0x78, 0x5D, 
   0x7B, 0x83, 0x17, 0x4D, 0x77, 0x1C, 0x46, 0x39, 0x5C, 0x41, 0x68, 0x62, 0x6F, 0xD4, 0x3B, 0x64, 
   0x72, 0x3B, 0x4D, 0x0F, 0x52, 0x4D, 0x44, 0x47, 0x64, 0xB9, 0x47, 0x59, 0x99, 0x3C, 0x5E, 0x6B, 
   0x53, 0x69, 0x6A, 0x74, 0x73, 0x80, 0x44, 0x4F, 0x74, 0x00, 0x32, 0x78, 0x16, 0x38, 0x61, 0x7F, 
   0x62, 0x84, 0x80, 0x85, 0x90, 0x34, 0x57, 0x63, 0x00, 0x40, 0x3D, 0x46, 0x30, 0x9A, 0x86, 0x93, 
   0xB7, 0x49, 0x93, 0x51, 0x1C, 0x30, 0x41, 0x6C, 0x40, 0x87, 0x71, 0x62, 0xCC, 0x26, 0x51, 0x86, 
   0x03, 0x41, 0x34, 0x6F, 0x7B, 0x77, 0x70, 0x70, 0x93, 0x15, 0x31, 0x18, 0x3D, 0x65, 0x92, 0x65, 
   0x7C, 0xE3, 0x29, 0x4E, 0x18, 0x73, 0x42, 0x79, 0x88, 0x74, 0xF1, 0x1F, 0x6E, 0x56, 0x02, 0x34, 
   0x49, 0x53, 0x34, 0x99, 0x45, 0x47, 0x52, 0x53, 0x62, 0x66, 0x76, 0x98, 0xD5, 0x5F, 0x6A, 0x9D, 
   0x2C, 0x25, 0x63, 0x53, 0x37, 0x7A, 0x48, 0x7E, 0x88, 0x3E, 0x86, 0x58, 0x5D, 0x48, 0xA0, 0x6A, 
   0x55, 0xFE, 0x6A, 0x84, 0x81, 0x68, 0xA5, 0x36, 0x2D, 0x52, 0x7B, 0x05, 0x07, 0xB1, 0x4C, 0x3C, 
   0xA8, 0x9E, 0x90, 0x93, 0x6B, 0x94, 0xBC, 0x1F, 0x8F, 0xA5, 0x1F, 0x76, 0x66, 0x81, 0x35, 0xB5, 
   0x64, 0x35, 0x9E, 0x41, 0x81, 0x4F, 0x2B, 0x99, 0xAC, 0x7C, 0x81, 0xE2, 0xAF, 0x62, 0xA9, 0x2F, 
   0x50, 0x9B, 0x00, 0x50, 0xA9, 0x70, 0x9F, 0xB8, 0x54, 0x65, 0xA8, 0x2E, 0x15, 0x33, 0x6D, 0x6B, 
   0x18, 0x83, 0xB7, 0xF0, 0x0C, 0x46, 0xD8, 0x24, 0x1F, 0x74, 0xBE, 0xD0, 0xF0, 0x62, 0xAC, 0xAA, 
   0x00, 0x03, 0x37, 0x55, 0x45, 0xC5, 0xB0, 0x5D, 0xB4, 0x53, 0x6A, 0x75, 0x00, 0x8C, 0xC7, 0x41, 
   0x3C, 0x92, 0x71, 0x38, 0x0A, 0x46, 0x8A, 0x6A, 0x48, 0x9C, 0xFF, 0x9D, 0x5E, 0xFF, 0x47, 0x8F, 
   0x12, 0x3E, 0x71, 0x10, 0x74, 0x15, 0xCF, 0x1E, 0x49, 0xF9, 0x00, 0x9B, 0x4A, 0x7D, 0x80, 0x6D, 
   0x6F, 0x5D, 0xF1, 0x43, 0x46, 0xA8, 0x87, 0x74, 0x89, 0x64, 0x8B, 0x93, 0x3B, 0x62, 0x92, 0x2F, 
   0x3F, 0x6B, 0x3C, 0x6D, 0x8A, 0x98, 0x8B, 0xCD, 0x64, 0x69, 0xFF, 0x1F, 0x5D, 0x91, 0x68, 0x68, 
   0x28, 0x51, 0x5D, 0x89, 0x1E, 0x8A, 0xFF, 0x7A, 0x61, 0xC3, 0x64, 0x5B, 0x33, 0x3D, 0x45, 0x35, 
   0x43, 0x79, 0xFF, 0x61, 0xA2, 0xE5, 0x78, 0x57, 0x3A, 0x2E, 0x51, 0xF2, 0x2A, 0x68, 0xC2, 0xB3, 
   0x74, 0x00, 0x9F, 0x79, 0xC7, 0x18, 0x5D, 0xF6, 0x00, 0x62, 0x79, 0x39, 0x79, 0x83, 0x81, 0x6E, 
   0x8F, 0x78, 0x69, 0x91, 0x5B, 0x74, 0xBA, 0x33, 0x52, 0x8E, 0x55, 0x69, 0xBB, 0x87, 0x8B, 0xBF, 
   0x2B, 0x5D, 0x8E, 0x1A, 0x46, 0x42, 0x65, 0x79, 0x67, 0x9F, 0x74, 0xFA, 0x43, 0x68, 0xFB, 0x25, 
   0x51, 0x80, 0x73, 0x73, 0x87, 0x66, 0x68, 0x4D, 0x0A, 0x73, 0x66, 0x22, 0x61, 0xFC, 0x6A, 0x50, 
   0xC3, 0x9F, 0x6C, 0x13, 0x7C, 0x73, 0xB3, 0x25, 0x5D, 0xFF, 0x19, 0x74, 0x52, 0x6A, 0x69, 0x6E, 
   0xA3, 0x69, 0xF0, 0x46, 0x69, 0xBD, 0x00, 0x69, 0x1E, 0x3C, 0x69, 0x50, 0xBC, 0x6E, 0xFF, 0x5C, 
   0x6E, 0xFF, 0x29, 0x69, 0x00, 0x51, 0x7F, 0x25, 0x91, 0x46, 0xFF, 0x7E, 0x5D, 0xFF, 0x3D, 0xC2, 
   0x7C, 0x35, 0x2D, 0x2E, 0x2B, 0x00, 0x7F, 0x6D, 0xCE, 0xCD, 0xA1, 0xFF, 0xD4, 0x5B, 0x57, 0xA1, 
   0x10, 0x03, 0x6D, 0x49, 0x7F, 0x9B, 0x99, 0x7A, 0xB9, 0x2D, 0x16, 0x9D, 0x22, 0x69, 0xAF, 0x9A, 
   0xF3, 0xDB, 0x82, 0x9B, 0xB5, 0x2F, 0x07, 0x56, 0x21, 0x17, 0x55, 0x00, 0x54, 0x8B, 0x64, 0x9E, 
   0xE5, 0xFF, 0xCE, 0xFF, 0x9E, 0xBF, 0x98, 0x00, 0x24, 0x2F, 0x19, 0x00, 0x6F, 0x41, 0x6E, 0xA2, 
   0x64, 0x96, 0x8B, 0x68, 0x63, 0x6E, 0x2E, 0x56, 0x9C, 0x1E, 0x23, 0xA3, 0x4E, 0x6F, 0x7B, 0xAF, 
   0xA9, 0x97, 0x5D, 0x85, 0xC6, 0x00, 0x53, 0x61, 0x27, 0x27, 0x30, 0x88, 0x64, 0x9A, 0x5A, 0x6E, 
   0x95, 0x00, 0x00, 0x1F, 0x22, 0x29, 0x6D, 0x96, 0xF5, 0xFF, 0x69, 0xC7, 0xAE, 0x35, 0x00, 0x4B, 
   0x3F, 0x15, 0x7B, 0x4F, 0xA2, 0x64, 0x49, 0x5F, 0x6F, 0x49, 0x5F, 0x5E, 0x4F, 0x91, 0x93, 0x44, 
   0x2A, 0xC5, 0x60, 0x3B, 0x36, 0x5F, 0xA2, 0x36, 0x1A, 0x31, 0x9F, 0x3D, 0x70, 0xA7, 0xB6, 0xAD, 
   0x7A, 0x4F, 0x44, 0x79, 0x00, 0x00, 0x84, 0x18, 0x2F, 0x74, 0x9A, 0xB8, 0xA1, 0xFF, 0xFF, 0xE1, 
   0x3D, 0x43, 0x2B, 0x00, 0x00, 0x05, 0x4A, 0x5B, 0x93, 0x4B, 0x69, 0x73, 0x31, 0x4F, 0x53, 0x70, 
   0x7D, 0xA4, 0x5F, 0x71, 0x93, 0x35, 0x42, 0x54, 0x29, 0x46, 0x5E, 0x5D, 0x63, 0x80, 0x47, 0x58, 
   0x6A, 0x47, 0x4D, 0x8C, 0x36, 0x5E, 0x96, 0x64, 0x69, 0x50, 0x5F, 0x4C, 0x44, 0x26, 0x3A, 0x78, 
   0x42, 0x68, 0x81, 0x7B, 0x74, 0xBA, 0x47, 0x68, 0x95, 0x39, 0x34, 0x2B, 0x1B, 0x3F, 0x45, 0x2E, 
   0x62, 0x85, 0x74, 0x6E, 0x65, 0x57, 0x4C, 0x67, 0x1E, 0x4C, 0x96, 0x3B, 0x63, 0x7A, 0x63, 0x4D, 
   0x8B, 0x53, 0x5E, 0x73, 0x3C, 0x64, 0x45, 0x52, 0x4D, 0x7E, 0x40, 0x58, 0x84, 0x40, 0x4D, 0x6E, 
   0x4C, 0x69, 0x8B, 0x52, 0x4D, 0x74, 0x46, 0x58, 0x68, 0x29, 0x58, 0x83, 0x3B, 0x4D, 0x77, 0x5E, 
   0x64, 0x4F, 0x4D, 0x59, 0x7C, 0x3C, 0x59, 0x7C, 0x47, 0x59, 0x44, 0x31, 0x59, 0x62, 0x64, 0x64, 
   0xB3, 0x69, 0x4D, 0x91, 0x28, 0x58, 0x7E, 0x38, 0x58, 0x53, 0x38, 0x58, 0x25, 0x39, 0x58, 0x7C, 
   0x34, 0x52, 0x9A, 0x47, 0x64, 0x7F, 0x5F, 0x5E, 0x68, 0x4E, 0x59, 0x73, 0x58, 0x69, 0x89, 0x3B, 
   0x52, 0x66, 0x3F, 0x46, 0x3E, 0x4A, 0x41, 0x68, 0x2E, 0x7A, 0xCF, 0x3F, 0x4D, 0x89, 0x40, 0x52, 
   0x15, 0x52, 0x4D, 0x49, 0x47, 0x64, 0xB9, 0x47, 0x5E, 0x9E, 0x47, 0x64, 0x70, 0x47, 0x4D, 0x6A, 
   0x4C, 0x68, 0x80, 0x52, 0x40, 0x74, 0x4B, 0x50, 0x62, 0x3E, 0x5B, 0x74, 0x1B, 0x4F, 0xA1, 0x2D, 
   0x3E, 0x61, 0x56, 0x4A, 0x1E, 0x3C, 0x4C, 0x78, 0x5F, 0x5A, 0xE7, 0x6A, 0x8D, 0x9D, 0x30, 0x80, 
   0x4F, 0x1E, 0x18, 0x42, 0x36, 0x40, 0x6C, 0x60, 0x90, 0xA7, 0x6C, 0x4C, 0x80, 0x4E, 0x2F, 0x86, 
   0x1F, 0x5D, 0x7F, 0x36, 0x75, 0x68, 0x65, 0x53, 0x90, 0x65, 0x4D, 0x9F, 0x2B, 0x37, 0x17, 0x00, 
   0x66, 0x2D, 0x72, 0x99, 0xFF, 0xA6, 0x80, 0xDC, 0x31, 0x1D, 0x17, 0x00, 0x38, 0x58, 0x12, 0x4B, 
   0x75, 0x44, 0x64, 0x4B, 0xA9, 0x71, 0xA4, 0x66, 0x5C, 0xBD, 0x31, 0x52, 0x73, 0x5D, 0x63, 0x89, 
   0x41, 0x2C, 0x51, 0x1A, 0x73, 0x5A, 0x4A, 0xAE, 0xAE, 0x81, 0x48, 0xB6, 0x7C, 0x4E, 0x9B, 0x69, 
   0x93, 0x8B, 0x22, 0x5B, 0xB4, 0x10, 0x55, 0x8C, 0x5C, 0x8D, 0x49, 0x85, 0x80, 0x96, 0x52, 0x24, 
   0xDD, 0x1E, 0x05, 0xA5, 0x3D, 0x9F, 0x82, 0x9B, 0xED, 0x82, 0xAB, 0xA0, 0xA5, 0x31, 0x1E, 0xB6, 
   0x01, 0x0C, 0xB0, 0x3B, 0x85, 0x55, 0x98, 0xD1, 0x7E, 0x76, 0x69, 0xFF, 0x35, 0x1C, 0xAC, 0x39, 
   0x3E, 0x42, 0x49, 0x9A, 0x74, 0x4F, 0x94, 0xDB, 0x5F, 0x31, 0xE9, 0x1C, 0x21, 0x57, 0x3C, 0x7F, 
   0x00, 0xBB, 0xD5, 0x9F, 0x8C, 0x6D, 0xFA, 0x00, 0x05, 0xA9, 0x17, 0x3F, 0xA9, 0xA6, 0xE0, 0xB8, 
   0x63, 0xA1, 0x9A, 0x5C, 0x15, 0x92, 0x3C, 0x50, 0xA2, 0x23, 0x7D, 0xA5, 0x34, 0x35, 0x7B, 0x19, 
   0x37, 0x42, 0x5B, 0x95, 0x73, 0xA1, 0xA2, 0xFF, 0x30, 0x47, 0xAA, 0x14, 0x5D, 0x33, 0xC9, 0x84, 
   0xE2, 0x6B, 0x83, 0xDC, 0x00, 0x32, 0x35, 0x37, 0x44, 0x4D, 0xD2, 0x74, 0xBE, 0x34, 0xB9, 0xFF, 
   0x0D, 0x57, 0xBD, 0x63, 0x18, 0x04, 0x76, 0x84, 0x70, 0x49, 0x9C, 0xFF, 0x5F, 0x69, 0xAC, 0x5E, 
   0x56, 0x45, 0x30, 0x3F, 0x86, 0x31, 0x68, 0xFA, 0x98, 0x8B, 0xD1, 0x80, 0x69, 0x51, 0x01, 0x5D, 
   0x83, 0x33, 0x73, 0x9B, 0x5D, 0x56, 0xA8, 0x59, 0x7E, 0xBF, 0x76, 0x51, 0x75, 0x42, 0x6D, 0xCA, 
   0x15, 0x78, 0xA7, 0x6C, 0x56, 0x41, 0x95, 0x51, 0xA9, 0x57, 0x84, 0xFA, 0x44, 0x74, 0xA9, 0x39, 
   0x5D, 0x4C, 0x62, 0x5D, 0x8A, 0xB0, 0x79, 0xE0, 0x40, 0x5D, 0x95, 0x00, 0x68, 0x4B, 0x23, 0x62, 
   0xD3, 0x98, 0x74, 0xA6, 0x7D, 0x69, 0x46, 0x3E, 0x74, 0xCB, 0x32, 0x52, 0xDD, 0x60, 0x69, 0x76, 
   0x6C, 0x8B, 0x92, 0x4A, 0x57, 0xC4, 0x65, 0x62, 0x9B, 0x6A, 0x73, 0x56, 0x30, 0x51, 0x90, 0x40, 
   0x73, 0xFF, 0x7F, 0x68, 0x8F, 0x67, 0x68, 0x54, 0x0B, 0x62, 0x7C, 0x0D, 0x7F, 0x9D, 0x9E, 0x73, 
   0xFA, 0xB5, 0x4A, 0xC5, 0x03, 0x67, 0x24, 0x00, 0x73, 0x74, 0xA9, 0x5D, 0xFE, 0xCB, 0x74, 0xE6, 
   0x18, 0x69, 0x65, 0x00, 0x69, 0x41, 0x50, 0x69, 0x6C, 0x76, 0x74, 0xA5, 0x67, 0x62, 0xFA, 0x51, 
   0x5D, 0xFF, 0x5D, 0x7F, 0x6E, 0x58, 0x40, 0x38, 0x68, 0x5D, 0xBA, 0x71, 0xB7, 0xE8, 0x4C, 0x49, 
   0xA9, 0x12, 0x00, 0x7A, 0x31, 0x5E, 0x53, 0x63, 0xA2, 0xA5, 0xC5, 0xB0, 0xFC, 0x68, 0xA2, 0xAC, 
   0x1B, 0x5F, 0x50, 0x3B, 0x3E, 0xA0, 0x31, 0x1C, 0xB9, 0x56, 0x33, 0xA9, 0xAC, 0xDD, 0xDC, 0x61, 
   0xFA, 0xA6, 0x3B, 0x5A, 0x65, 0x38, 0x00, 0xA1, 0x00, 0x22, 0x7F, 0x59, 0x82, 0x8B, 0xA7, 0xA9, 
   0xEC, 0x4E, 0x9F, 0x79, 0x4D, 0x96, 0x92, 0xB0, 0x58, 0xF4, 0x2F, 0x1B, 0x61, 0x14, 0x68, 0x24, 
   0x61, 0x83, 0x95, 0x43, 0x5F, 0xB8, 0x1C, 0x1B, 0x69, 0x2A, 0x5B, 0x7A, 0x88, 0x65, 0xA9, 0x8E, 
   0xAA, 0xD1, 0x64, 0x8A, 0xAB, 0x1C, 0x1F, 0x66, 0x25, 0x48, 0x51, 0x3D, 0x63, 0x50, 0x78, 0x45, 
   0xA0, 0x72, 0x39, 0x8F, 0x28, 0x1A, 0x2B, 0x2E, 0x54, 0x85, 0x7A, 0xF1, 0xFA, 0x69, 0xB1, 0xC0, 
   0x45, 0x11, 0x44, 0x1C, 0x00, 0x5E, 0x39, 0x69, 0x5D, 0x23, 0x69, 0x47, 0x84, 0x2D, 0x8D, 0xAB, 
   0xC1, 0xA0, 0x25, 0x92, 0xAF, 0x00, 0x00, 0x52, 0x70, 0x68, 0x30, 0xB5, 0xE6, 0x99, 0x37, 0x5C, 
   0xB8, 0x0D, 0x20, 0x73, 0x04, 0x00, 0x55, 0x64, 0x60, 0x7E, 0xEF, 0xFF, 0xB7, 0x81, 0xA0, 0x93, 
   0x1F, 0x32, 0x9A, 0x08, 0x31, 0x35, 0x34, 0x36, 0x39, 0x61, 0x69, 0x94, 0x2F, 0x59, 0x6D, 0x1A, 
   0x54, 0x31, 0x87, 0x82, 0xB0, 0x6B, 0x76, 0xC1, 0x25, 0x2B, 0x3D, 0x24, 0x4C, 0x36, 0x5D, 0x63, 
   0x9D, 0x41, 0x52, 0xAE, 0x53, 0x64, 0x56, 0x53, 0x74, 0x44, 0x36, 0x57, 0x7D, 0x2B, 0x34, 0x6D, 
   0x64, 0x4B, 0x58, 0x5F, 0x68, 0x9D, 0x41, 0x74, 0xCF, 0x4B, 0x57, 0x59, 0x33, 0x3F, 0x11, 0x39, 
   0x4A, 0x39, 0x61, 0x56, 0x87, 0x29, 0x57, 0xA6, 0x4C, 0x5D, 0x7A, 0x58, 0x4D, 0x75, 0x48, 0x64, 
   0x75, 0x48, 0x5E, 0x8B, 0x63, 0x4D, 0x78, 0x40, 0x58, 0x50, 0x2F, 0x52, 0x67, 0x3B, 0x64, 0x7F, 
   0x5E, 0x59, 0x80, 0x53, 0x64, 0x80, 0x47, 0x4D, 0x74, 0x46, 0x58, 0x51, 0x2F, 0x58, 0x89, 0x3B, 
   0x4D, 0x7D, 0x58, 0x64, 0x4F, 0x53, 0x59, 0x71, 0x3C, 0x59, 0x7D, 0x47, 0x64, 0x6C, 0x47, 0x4D, 
   0x78, 0x52, 0x58, 0x8A, 0x51, 0x58, 0x83, 0x39, 0x58, 0x6B, 0x21, 0x58, 0x5A, 0x22, 0x52, 0x6B, 
   0x57, 0x4D, 0x8E, 0x5F, 0x5E, 0x6D, 0x54, 0x59, 0x73, 0x58, 0x6F, 0x89, 0x1E, 0x41, 0x66, 0x46, 
   0x46, 0x3E, 0x57, 0x58, 0x68, 0x68, 0x6F, 0xCF, 0x28, 0x4D, 0x89, 0x23, 0x58, 0x0F, 0x62, 0x58, 
   0x38, 0x47, 0x69, 0xAD, 0x41, 0x5E, 0xA9, 0x47, 0x4D, 0x5F, 0x47, 0x58, 0x5E, 0x57, 0x6E, 0x85, 
   0x2F, 0x40, 0x6E, 0x1E, 0x45, 0x62, 0x5E, 0x68, 0x62, 0x7A, 0x7F, 0x96, 0x67, 0x6D, 0x84, 0x00, 
   0x32, 0x2F, 0x00, 0x00, 0x3D, 0x7B, 0x47, 0xA2, 0xB1, 0xC7, 0xEF, 0x4E, 0x93, 0x97, 0x02, 0x07, 
   0x1C, 0x2F, 0x1C, 0x58, 0x74, 0x78, 0xA3, 0x36, 0x46, 0x6B, 0x32, 0x52, 0x4A, 0x77, 0x6F, 0x7A, 
   0x70, 0x4D, 0xA9, 0x09, 0x4D, 0x87, 0x3D, 0x64, 0x7A, 0x82, 0x59, 0x78, 0x33, 0x48, 0x23, 0x38, 
   0x54, 0x5A, 0x87, 0x87, 0xDA, 0x58, 0x6E, 0xC3, 0x12, 0x16, 0x43, 0x24, 0x11, 0x36, 0x54, 0x5D, 
   0x6B, 0x57, 0x8D, 0x97, 0x6A, 0x55, 0xBC, 0x87, 0x60, 0xAB, 0x3B, 0x45, 0x5A, 0x07, 0x20, 0x44, 
   0x4C, 0x9B, 0x9D, 0x44, 0x8C, 0x85, 0x31, 0x54, 0xA6, 0x8E, 0x6A, 0xE4, 0xA4, 0x75, 0x7C, 0x2F, 
   0x59, 0x4F, 0x0F, 0x5E, 0x86, 0x27, 0x54, 0xC8, 0x5E, 0x6C, 0xAE, 0xBF, 0x99, 0x6A, 0x57, 0x38, 
   0x98, 0x00, 0x1C, 0xD1, 0x2B, 0x75, 0x70, 0xCE, 0xB1, 0x87, 0x90, 0x84, 0xD7, 0x26, 0x65, 0x88, 
   0x0D, 0x74, 0x6D, 0x5D, 0x45, 0xE4, 0x85, 0x55, 0x9A, 0x4B, 0x72, 0x66, 0x11, 0x5C, 0xC6, 0x45, 
   0x73, 0xA2, 0x9A, 0x8E, 0x56, 0x3E, 0x32, 0xAB, 0x0B, 0x3E, 0x73, 0x56, 0xA1, 0xB1, 0x64, 0x96, 
   0xCC, 0x44, 0x24, 0x0B, 0x8E, 0x78, 0x5E, 0x90, 0x99, 0xFF, 0x00, 0x00, 0x76, 0x11, 0x28, 0x92, 
   0xF6, 0xF7, 0xFB, 0x7E, 0xAC, 0x65, 0x00, 0x1E, 0x7E, 0x2E, 0x00, 0xBF, 0x6F, 0x50, 0x25, 0x5F, 
   0x88, 0x67, 0x44, 0xA1, 0xFF, 0x45, 0x4C, 0xA2, 0x68, 0x68, 0x00, 0x6D, 0x83, 0x80, 0x50, 0x3F, 
   0xF0, 0x2D, 0x68, 0xFF, 0x39, 0x9B, 0x43, 0x73, 0x5D, 0x16, 0x5D, 0x5C, 0xFF, 0x4B, 0x4B, 0xFF, 
   0x56, 0x8B, 0x2D, 0x4B, 0x96, 0x8B, 0x25, 0x34, 0x81, 0x76, 0x51, 0x89, 0x71, 0x8B, 0xB9, 0x60, 
   0x80, 0xC1, 0x4D, 0x68, 0xC0, 0x2A, 0x3F, 0x7F, 0x4C, 0x68, 0x62, 0x74, 0x8B, 0xB2, 0x46, 0x74, 
   0xCA, 0x29, 0x56, 0xA1, 0x69, 0x50, 0x57, 0x64, 0x4B, 0x5A, 0x32, 0x90, 0xFF, 0x60, 0xA1, 0xED, 
   0x82, 0x33, 0x00, 0x21, 0x44, 0x6B, 0x3F, 0x8E, 0xFB, 0xAB, 0x5D, 0x5F, 0x4F, 0x74, 0x7E, 0x10, 
   0x5D, 0xFF, 0x4A, 0x5D, 0x7C, 0x90, 0x6E, 0x24, 0x8F, 0x79, 0xCE, 0x41, 0x4B, 0xE5, 0x00, 0x5C, 
   0x67, 0x23, 0x68, 0x8E, 0x86, 0x74, 0x9F, 0x7C, 0x69, 0x8A, 0x49, 0x74, 0x97, 0x11, 0x52, 0x94, 
   0x73, 0x69, 0xAD, 0xBD, 0x96, 0xFF, 0x3D, 0x68, 0xBE, 0x00, 0x3A, 0x36, 0x61, 0x78, 0x57, 0x73, 
   0x68, 0x93, 0x34, 0x68, 0xBE, 0x24, 0x62, 0xBE, 0x6F, 0x5D, 0x79, 0x87, 0x6E, 0x7A, 0x6A, 0x79, 
   0x99, 0x13, 0x5C, 0xFF, 0x1F, 0x4A, 0x93, 0x8D, 0x67, 0x20, 0x92, 0x73, 0xF1, 0x46, 0x5D, 0xE4, 
   0x10, 0x74, 0x26, 0x1C, 0x69, 0x26, 0x74, 0x74, 0xC3, 0x7B, 0x68, 0xFF, 0x22, 0x51, 0x51, 0x4C, 
   0x68, 0x55, 0x97, 0x4C, 0xFF, 0x69, 0x69, 0xFF, 0x4F, 0xB1, 0x00, 0x2A, 0x49, 0x26, 0x40, 0x00, 
   0xC9, 0x3C, 0x80, 0xD3, 0x55, 0xB6, 0xCF, 0x84, 0x57, 0x83, 0x3B, 0x4C, 0x4F, 0x6E, 0xA1, 0xB6, 
   0x99, 0xBB, 0xD9, 0x03, 0x00, 0x6D, 0x00, 0x00, 0x90, 0x9F, 0xDE, 0xE6, 0xA0, 0xCF, 0xA6, 0x48, 
   0x39, 0x7D, 0x17, 0x41, 0x8D, 0x01, 0x69, 0xA0, 0x6B, 0x59, 0xEF, 0xCD, 0x71, 0xBE, 0x38, 0x83, 
   0x42, 0x04, 0x71, 0x68, 0x5A, 0x4A, 0xC4, 0x8A, 0x9A, 0xDB, 0xA5, 0xCA, 0x9E, 0x4F, 0x47, 0x4E, 
   0x00, 0x0E, 0x51, 0x03, 0x1D, 0x95, 0x4A, 0x64, 0xA1, 0x86, 0x63, 0x69, 0x70, 0xB4, 0xB3, 0x20, 
   0x64, 0xB2, 0x52, 0x50, 0x6B, 0x9A, 0x9C, 0x84, 0x14, 0x44, 0x91, 0x00, 0x24, 0x5C, 0x5A, 0x4B, 
   0x4A, 0x9B, 0x62, 0x95, 0x56, 0x5D, 0x96, 0x00, 0x1C, 0x27, 0x2E, 0x55, 0x96, 0x9C, 0xFF, 0xF9, 
   0x6E, 0xCA, 0x96, 0x00, 0x00, 0x1D, 0x58, 0x41, 0x77, 0x5E, 0x20, 0x7D, 0x6D, 0x94, 0x60, 0x3D, 
   0x8F, 0x6C, 0x14, 0x5B, 0xA5, 0x47, 0x74, 0x9E, 0x80, 0x66, 0x36, 0x4C, 0x59, 0x4D, 0x12, 0x42, 
   0xB5, 0x00, 0x1E, 0x94, 0x90, 0x94, 0x5B, 0xCA, 0xDE, 0x98, 0x3F, 0x53, 0x7B, 0x03, 0x06, 0x4D, 
   0x51, 0x70, 0xA2, 0x7D, 0x97, 0xDF, 0x31, 0x45, 0x31, 0x00, 0x3C, 0x28, 0x50, 0x46, 0x7E, 0x40, 
   0x58, 0x6E, 0x3D, 0x4E, 0x59, 0x77, 0x88, 0xAA, 0x6B, 0x7C, 0x9A, 0x25, 0x2B, 0x71, 0x1E, 0x4C, 
   0x8C, 0x52, 0x68, 0x68, 0x69, 0x68, 0x45, 0x25, 0x2F, 0x7E, 0x31, 0x5C, 0x68, 0x86, 0x67, 0x74, 
   0x36, 0x39, 0xA1, 0x30, 0x39, 0x56, 0x4C, 0x6E, 0x61, 0x5E, 0x7A, 0xB5, 0x62, 0x62, 0x4D, 0x3E, 
   0x33, 0x24, 0x05, 0x33, 0x7B, 0x3A, 0x62, 0x83, 0x7A, 0x6F, 0x6E, 0x3D, 0x59, 0x80, 0x48, 0x59, 
   0x7A, 0x5E, 0x64, 0x85, 0x3B, 0x52, 0x84, 0x29, 0x58, 0x61, 0x40, 0x52, 0x50, 0x52, 0x5E, 0x7E, 
   0x3C, 0x59, 0x79, 0x53, 0x59, 0x7A, 0x58, 0x69, 0x97, 0x4C, 0x52, 0x74, 0x46, 0x58, 0x51, 0x29, 
   0x5D, 0x89, 0x4C, 0x4D, 0x77, 0x53, 0x64, 0x50, 0x58, 0x64, 0x9F, 0x52, 0x4D, 0x7C, 0x2F, 0x58, 
   0x31, 0x2F, 0x58, 0x75, 0x62, 0x58, 0x66, 0x68, 0x58, 0x6D, 0x1D, 0x52, 0xB1, 0x34, 0x64, 0x5B, 
   0x5E, 0x59, 0x2D, 0x5F, 0x53, 0x99, 0x58, 0x69, 0x89, 0x35, 0x41, 0x60, 0x34, 0x4C, 0x39, 0x40, 
   0x58, 0x79, 0x57, 0x69, 0xC9, 0x3B, 0x64, 0x89, 0x46, 0x52, 0x0A, 0x46, 0x63, 0x49, 0x3B, 0x4C, 
   0xAD, 0x4C, 0x58, 0x98, 0x5E, 0x69, 0x6A, 0x41, 0x58, 0x69, 0x52, 0x57, 0x74, 0x46, 0x45, 0x74, 
   0x29, 0x45, 0x74, 0x52, 0x57, 0x74, 0x4D, 0x63, 0x84, 0x6F, 0x68, 0x73, 0x52, 0x62, 0x35, 0x1D, 
   0x2E, 0x60, 0x29, 0x41, 0xB8, 0x53, 0x87, 0x9D, 0x76, 0x87, 0x58, 0x37, 0x41, 0x85, 0x53, 0x2E, 
   0xA6, 0x52, 0x61, 0x6B, 0x2F, 0x4B, 0x57, 0x34, 0x46, 0x46, 0x47, 0x7B, 0x5F, 0x49, 0x6A, 0x8A, 
   0x4F, 0x69, 0x76, 0x70, 0x3B, 0xC0, 0x2B, 0x4D, 0x74, 0x00, 0x5F, 0x03, 0x89, 0x88, 0xCC, 0xB0, 
   0x7B, 0xF9, 0x0D, 0x29, 0x00, 0x00, 0x22, 0x46, 0x3A, 0x79, 0xE2, 0x77, 0x5E, 0x51, 0x6E, 0x5F, 
   0x69, 0x57, 0x6B, 0xA8, 0x23, 0x71, 0x7B, 0x40, 0x2D, 0x81, 0x79, 0x24, 0x65, 0x2F, 0x83, 0x57, 
   0x04, 0x7B, 0x7E, 0x85, 0x5F, 0xCC, 0xB0, 0x65, 0xDF, 0x4E, 0x75, 0x65, 0x40, 0x6F, 0x57, 0x50, 
   0x41, 0x86, 0x1D, 0x30, 0x64, 0x6E, 0x7C, 0xB3, 0x8B, 0x6C, 0xFF, 0x1E, 0x35, 0x9F, 0x3B, 0x8C, 
   0x58, 0x7A, 0xBE, 0x63, 0x64, 0x23, 0xC5, 0x37, 0x0C, 0xB4, 0x49, 0x81, 0x54, 0x71, 0xCD, 0x7C, 
   0x87, 0xA4, 0xBD, 0x52, 0x3E, 0xCE, 0x1C, 0x00, 0x9E, 0x2D, 0x43, 0x69, 0x6C, 0xC3, 0x74, 0x68, 
   0xA6, 0xCF, 0x51, 0x22, 0xBC, 0x45, 0x27, 0x27, 0x46, 0x9B, 0x78, 0x6A, 0xB9, 0xFF, 0x6B, 0x46, 
   0xC7, 0x49, 0x3E, 0x8B, 0x49, 0x61, 0x3A, 0x92, 0xA6, 0x54, 0x79, 0x82, 0xFF, 0x16, 0x04, 0xBF, 
   0x20, 0x50, 0x57, 0x7B, 0xFF, 0xFF, 0x53, 0x6A, 0x88, 0x0F, 0x00, 0x00, 0x54, 0x68, 0x99, 0x7D, 
   0xB5, 0xFF, 0x49, 0x3A, 0x9B, 0x0B, 0x78, 0x39, 0x88, 0x89, 0x83, 0x8C, 0x3E, 0xBE, 0x00, 0x5B, 
   0x99, 0x23, 0x5D, 0x7A, 0xE1, 0x81, 0xD7, 0x59, 0xB9, 0xFF, 0x00, 0x3A, 0x4F, 0x73, 0x17, 0x36, 
   0x6D, 0x8A, 0xC5, 0x2F, 0xAD, 0xB0, 0x46, 0x51, 0x9E, 0x58, 0x28, 0x44, 0x65, 0x68, 0x92, 0x5B, 
   0x97, 0xFF, 0x71, 0x80, 0xAF, 0x80, 0x51, 0x34, 0x23, 0x45, 0x60, 0x18, 0x6D, 0xB7, 0x9C, 0x7F, 
   0xD6, 0x64, 0x62, 0x97, 0x31, 0x46, 0x53, 0x53, 0x79, 0xE2, 0x4E, 0x7F, 0xC5, 0x6C, 0x56, 0x69, 
   0x6C, 0x60, 0xC8, 0x49, 0x71, 0x9E, 0x3D, 0x39, 0x2D, 0x49, 0x78, 0x96, 0x5A, 0x74, 0xF0, 0x60, 
   0x6E, 0xAE, 0x38, 0x6E, 0xD3, 0x2E, 0x63, 0x81, 0x91, 0x69, 0x58, 0xB7, 0x7F, 0xDF, 0x41, 0x51, 
   0x94, 0x00, 0x5C, 0x66, 0x39, 0x68, 0xBB, 0x80, 0x74, 0x83, 0x66, 0x69, 0x4D, 0x5C, 0x74, 0xCE, 
   0x79, 0x68, 0xFF, 0x61, 0x56, 0xB7, 0x53, 0x73, 0x7F, 0x2F, 0x68, 0xAE, 0x50, 0x68, 0x46, 0x55, 
   0x68, 0x42, 0x2F, 0x5D, 0xE0, 0x37, 0x74, 0xE8, 0x8F, 0x6E, 0x9E, 0xBB, 0x69, 0x86, 0x00, 0x69, 
   0x80, 0x00, 0x79, 0x83, 0xAF, 0x73, 0xFF, 0xC0, 0x45, 0xFF, 0x18, 0x67, 0x22, 0x00, 0x73, 0x3D, 
   0x61, 0x5D, 0xC8, 0xAE, 0x79, 0xC5, 0x4D, 0x68, 0xCB, 0x0F, 0x51, 0x74, 0x71, 0x68, 0x42, 0x63, 
   0x5E, 0x9B, 0x69, 0x81, 0xEA, 0x9B, 0xB2, 0xFF, 0x3D, 0x44, 0x80, 0x07, 0x00, 0x00, 0x3C, 0x7A, 
   0x61, 0x88, 0xBD, 0xFF, 0x8F, 0x95, 0xFF, 0x28, 0x5A, 0xB2, 0x3E, 0x48, 0x38, 0x66, 0x76, 0x7C, 
   0x50, 0x5B, 0xD3, 0x56, 0x73, 0xB2, 0x71, 0xB7, 0xB7, 0x54, 0x7C, 0x8D, 0x47, 0x40, 0x70, 0x51, 
   0x28, 0x93, 0x0E, 0x31, 0xA6, 0x4A, 0xAC, 0xE0, 0xD4, 0xCA, 0xDE, 0x61, 0x71, 0xAB, 0x0E, 0x3A, 
   0x51, 0x45, 0x1C, 0x5F, 0x25, 0x4C, 0x88, 0x5B, 0xB6, 0x96, 0xD3, 0xD2, 0xE6, 0x7F, 0x7C, 0xDC, 
   0x00, 0x00, 0x54, 0x00, 0x02, 0x3A, 0x6D, 0x82, 0x95, 0x90, 0xB7, 0xAC, 0x18, 0x62, 0x89, 0x29, 
   0x5A, 0x5A, 0x67, 0x5F, 0x9D, 0x4B, 0x58, 0x9C, 0x55, 0x73, 0x78, 0x37, 0x43, 0x8C, 0x20, 0x41, 
   0x68, 0x38, 0x57, 0x56, 0x6D, 0x63, 0x96, 0x6D, 0x47, 0xA7, 0x28, 0x32, 0x3D, 0x28, 0x62, 0x6D, 
   0x62, 0x92, 0xE1, 0x58, 0x4A, 0x66, 0x77, 0x4A, 0x9D, 0x9D, 0x3A, 0xB3, 0x28, 0xA5, 0x5D, 0x00, 
   0x45, 0x6C, 0x54, 0x72, 0x72, 0xBA, 0xD5, 0x89, 0x35, 0x3C, 0xC0, 0x00, 0x00, 0x4C, 0x13, 0x14, 
   0x1E, 0x8A, 0xB0, 0x9D, 0xD5, 0xFF, 0xDC, 0x4F, 0x6A, 0x69, 0x00, 0x00, 0x2E, 0x21, 0x29, 0x67, 
   0x6E, 0x8D, 0x86, 0x86, 0x94, 0xA3, 0x62, 0x98, 0xC9, 0x2B, 0x39, 0x27, 0x12, 0x24, 0x4C, 0x61, 
   0x50, 0xC3, 0x30, 0x3A, 0x57, 0x37, 0x59, 0x20, 0x71, 0x88, 0xB6, 0x65, 0x7C, 0xDE, 0x36, 0x30, 
   0x3C, 0x46, 0x45, 0x23, 0x24, 0x4B, 0x8F, 0x41, 0x62, 0x91, 0x6F, 0x51, 0x6F, 0x4D, 0x6E, 0x96, 
   0x3B, 0x67, 0x6C, 0x2F, 0x28, 0x4E, 0x3B, 0x39, 0x53, 0x69, 0x73, 0x50, 0x5D, 0x6E, 0xC3, 0x23, 
   0x4B, 0x9A, 0x28, 0x3F, 0x1B, 0x51, 0x4B, 0x5F, 0x41, 0x58, 0xA0, 0x64, 0x75, 0x74, 0x4D, 0x59, 
   0x74, 0x35, 0x47, 0x62, 0x29, 0x58, 0x62, 0x52, 0x58, 0x9B, 0x5E, 0x4D, 0x73, 0x3C, 0x5E, 0x4A, 
   0x47, 0x59, 0x67, 0x41, 0x64, 0x79, 0x41, 0x4D, 0x75, 0x47, 0x58, 0x97, 0x52, 0x5D, 0x74, 0x40, 
   0x41, 0x4B, 0x35, 0x63, 0x73, 0x4C, 0x5D, 0xA0, 0x52, 0x58, 0x4F, 0x40, 0x58, 0x64, 0x3A, 0x58, 
   0x7F, 0x45, 0x58, 0x19, 0x2F, 0x58, 0x5F, 0x41, 0x58, 0xC3, 0x6F, 0x4D, 0x80, 0x48, 0x53, 0x78, 
   0x3C, 0x65, 0x66, 0x5D, 0x75, 0x5A, 0x29, 0x52, 0x81, 0x46, 0x41, 0x50, 0x40, 0x52, 0x63, 0x5D, 
   0x6F, 0xD5, 0x3B, 0x4D, 0x83, 0x35, 0x52, 0x0A, 0x5E, 0x58, 0x49, 0x5E, 0x4C, 0xB9, 0x35, 0x45, 
   0xA4, 0x35, 0x57, 0x64, 0x47, 0x63, 0x52, 0x52, 0x73, 0x7F, 0x40, 0x45, 0x7F, 0x24, 0x45, 0x5D, 
   0x52, 0x6E, 0x74, 0x58, 0x68, 0x96, 0x52, 0x5C, 0x73, 0x1E, 0x34, 0x29, 0x31, 0x35, 0x65, 0x77, 
   0x5F, 0xB9, 0x8D, 0xB6, 0xD7, 0x24, 0x80, 0x79, 0x00, 0x00, 0x0A, 0x69, 0x1D, 0x66, 0x87, 0xAC, 
   0xCE, 0x4D, 0x5D, 0x9F, 0x18, 0x2F, 0x2A, 0x2E, 0x63, 0x51, 0x4B, 0x64, 0x81, 0x42, 0x64, 0x90, 
   0x60, 0x4D, 0xA8, 0x60, 0x58, 0x64, 0x21, 0x3C, 0x3D, 0x4A, 0x65, 0xB7, 0x88, 0x92, 0xD9, 0x5E, 
   0x57, 0x69, 0x05, 0x1C, 0x4E, 0x00, 0x22, 0x00, 0x41, 0x75, 0x54, 0x84, 0xAB, 0xFF, 0x7A, 0x55, 
   0xB6, 0x40, 0x2C, 0x64, 0x43, 0x59, 0x5C, 0x10, 0x4A, 0x3B, 0x2E, 0x6B, 0x94, 0x6A, 0x96, 0x9F, 
   0x5D, 0x5A, 0x8C, 0x59, 0x65, 0xC0, 0x9D, 0x86, 0xAF, 0x46, 0x5D, 0x6E, 0x00, 0x46, 0x46, 0x3A, 
   0x6F, 0x65, 0x9D, 0x70, 0xB4, 0x98, 0x71, 0x85, 0x34, 0x51, 0xB1, 0x00, 0x70, 0xF6, 0x47, 0xB1, 
   0x71, 0xAF, 0xA9, 0x58, 0x6F, 0x55, 0xA2, 0x00, 0x00, 0xA8, 0x13, 0x55, 0x82, 0x99, 0xA8, 0x9A, 
   0xA5, 0x92, 0xCD, 0x4C, 0x6D, 0x88, 0x10, 0x26, 0x8C, 0x32, 0x53, 0xAC, 0x67, 0x8D, 0x61, 0x78, 
   0x5B, 0x7E, 0x18, 0x45, 0xBC, 0x3B, 0x79, 0x78, 0x81, 0x90, 0x7F, 0x60, 0x46, 0x82, 0x49, 0x67, 
   0xC9, 0x6F, 0x72, 0xF6, 0x25, 0x55, 0x81, 0x2B, 0x56, 0x34, 0xD5, 0x95, 0x85, 0x8D, 0x9E, 0xF4, 
   0x00, 0x0D, 0xBA, 0x00, 0x00, 0x61, 0xC1, 0xB0, 0x71, 0x90, 0xC8, 0x84, 0x34, 0x2D, 0xF7, 0x39, 
   0x20, 0xCE, 0x5B, 0x8C, 0x05, 0x87, 0x88, 0x72, 0x35, 0x49, 0xFF, 0x00, 0x4F, 0x8B, 0x4E, 0x61, 
   0x25, 0x85, 0x6E, 0x6E, 0x55, 0x80, 0xFF, 0x87, 0x5E, 0xFF, 0x5E, 0x74, 0x32, 0x24, 0x78, 0x18, 
   0x34, 0x39, 0xBE, 0x6D, 0x45, 0xD8, 0x68, 0x9B, 0x8A, 0x24, 0x7F, 0x90, 0x31, 0x2F, 0x9C, 0x93, 
   0x62, 0x92, 0x7C, 0x80, 0xB9, 0x47, 0x85, 0xBE, 0x2E, 0x56, 0x89, 0x23, 0x50, 0x7D, 0x53, 0x56, 
   0x85, 0x8D, 0x80, 0x9F, 0x4E, 0x81, 0xFF, 0x15, 0x85, 0xCA, 0x76, 0x3A, 0x00, 0x60, 0x5B, 0x94, 
   0x38, 0x82, 0xFF, 0x8D, 0x5B, 0x6E, 0x4D, 0x55, 0x56, 0x09, 0x5C, 0xA7, 0x70, 0x68, 0xCC, 0x83, 
   0x74, 0x8A, 0x61, 0x63, 0x9C, 0x22, 0x80, 0xFF, 0x5C, 0x5E, 0x92, 0x7A, 0x69, 0x0C, 0x94, 0x7F, 
   0xC1, 0x46, 0x51, 0xDE, 0x00, 0x5C, 0x4A, 0x00, 0x68, 0x72, 0x87, 0x74, 0xB4, 0xB7, 0x7F, 0xD2, 
   0x4F, 0x67, 0xAF, 0x0F, 0x39, 0x6F, 0x58, 0x56, 0xA0, 0xAD, 0x9B, 0x94, 0x1D, 0x52, 0x8E, 0x00, 
   0x5D, 0x93, 0x5E, 0x79, 0x62, 0xB6, 0x69, 0xB4, 0x83, 0x69, 0xDD, 0x00, 0x69, 0xB5, 0x2B, 0x69, 
   0x69, 0x8D, 0x69, 0x75, 0x7B, 0x74, 0xE8, 0x51, 0x73, 0xE1, 0x10, 0x45, 0x5A, 0x22, 0x67, 0x06, 
   0x6E, 0x78, 0xD1, 0x98, 0x73, 0xFF, 0x3D, 0x51, 0x76, 0x1B, 0x73, 0x24, 0x66, 0x69, 0xC4, 0x8F, 
   0x7B, 0xF3, 0x4A, 0xBE, 0x54, 0x37, 0x4A, 0x67, 0x53, 0x00, 0xFF, 0x42, 0x69, 0xD2, 0x4F, 0xC8, 
   0x19, 0x78, 0x90, 0x8A, 0x66, 0x4F, 0xC6, 0x4E, 0x7A, 0xC9, 0x48, 0x5C, 0xDF, 0x2C, 0x02, 0x5B, 
   0x35, 0x40, 0x72, 0xBF, 0xFF, 0xFF, 0xA0, 0xFE, 0xAA, 0x19, 0x0E, 0x52, 0x00, 0x00, 0x7A, 0x0D, 
   0x44, 0xA4, 0x7E, 0x8E, 0xDF, 0xDB, 0xA9, 0xD9, 0x40, 0xBF, 0x8B, 0x14, 0x76, 0x60, 0x73, 0x0B, 
   0xBD, 0x2F, 0x31, 0x93, 0x4B, 0x77, 0x47, 0x84, 0x9B, 0x98, 0x35, 0x62, 0xCF, 0x5E, 0x6C, 0xDF, 
   0x8B, 0x9E, 0xAD, 0x60, 0x41, 0x5F, 0x40, 0x55, 0x78, 0x00, 0x6A, 0xAF, 0x5A, 0x3B, 0x7B, 0x88, 
   0x56, 0x68, 0x2D, 0x68, 0x7F, 0x1D, 0x41, 0x91, 0x6E, 0x7A, 0x9C, 0x9B, 0x84, 0x89, 0x21, 0x4F, 
   0x98, 0x04, 0x24, 0x57, 0x4F, 0x51, 0x73, 0x9B, 0x90, 0x9A, 0x61, 0x66, 0x7E, 0x00, 0x00, 0x25, 
   0x12, 0x04, 0x4D, 0xE1, 0xFF, 0xFF, 0x63, 0x90, 0x7C, 0x74, 0xC7, 0x77, 0x24, 0x00, 0xAF, 0x5D, 
   0x54, 0x69, 0x8F, 0xBF, 0x45, 0x4E, 0x3F, 0x94, 0x17, 0x40, 0x9F, 0x00, 0x07, 0x91, 0x60, 0x39, 
   0x39, 0xEA, 0xFF, 0x66, 0x54, 0xAA, 0x8F, 0x00, 0x11, 0x84, 0x26, 0x4B, 0x62, 0x43, 0x4B, 0x7E, 
   0x56, 0x53, 0x6E, 0x58, 0x7C, 0x59, 0x70, 0x8E, 0x99, 0x8A, 0x7A, 0xED, 0x26, 0x54, 0x55, 0x00, 
   0x18, 0x0D, 0x5C, 0x44, 0x78, 0x3C, 0x3A, 0x80, 0x49, 0x59, 0x81, 0x71, 0x88, 0x86, 0x76, 0x7C, 
   0x6F, 0x0E, 0x24, 0x5E, 0x1E, 0x39, 0x53, 0x85, 0x67, 0x98, 0x3C, 0x57, 0xAE, 0x35, 0x4C, 0x6D, 
   0x46, 0x6E, 0x5A, 0x4B, 0x67, 0x69, 0x51, 0x44, 0x4E, 0x3A, 0x4A, 0x5C, 0x29, 0x5C, 0x98, 0x47, 
   0x74, 0xCB, 0x80, 0x63, 0x68, 0x30, 0x35, 0x21, 0x1E, 0x4C, 0x5F, 0x63, 0x69, 0x8E, 0x5E, 0x5E, 
   0x8A, 0x35, 0x64, 0x68, 0x35, 0x4D, 0x5D, 0x5E, 0x4D, 0x85, 0x48, 0x64, 0x90, 0x53, 0x59, 0x73, 
   0x3C, 0x5E, 0x4A, 0x47, 0x4D, 0x78, 0x47, 0x58, 0x74, 0x47, 0x58, 0x75, 0x47, 0x58, 0x8C, 0x47, 
   0x63, 0x6F, 0x52, 0x51, 0x69, 0x46, 0x45, 0xA0, 0x34, 0x57, 0x5F, 0x4B, 0x63, 0x42, 0x51, 0x58, 
   0x7B, 0x3A, 0x52, 0x7B, 0x24, 0x52, 0x65, 0x4D, 0x4D, 0x72, 0x5A, 0x59, 0x84, 0x7C, 0x65, 0x74, 
   0x47, 0x70, 0xA5, 0x0C, 0x4D, 0x4E, 0x33, 0x36, 0x0A, 0x68, 0x64, 0x7F, 0x57, 0x75, 0xFF, 0x3B, 
   0x42, 0x84, 0x3B, 0x58, 0x04, 0x47, 0x4D, 0x49, 0x4D, 0x69, 0xA2, 0x4D, 0x5D, 0xA4, 0x41, 0x40, 
   0x70, 0x4C, 0x56, 0x75, 0x57, 0x5B, 0x74, 0x40, 0x39, 0x62, 0x3B, 0x50, 0x68, 0x4C, 0x51, 0x7F, 
   0x58, 0x68, 0x7F, 0x69, 0x62, 0x78, 0x2F, 0x56, 0x46, 0x07, 0x23, 0x54, 0x4E, 0x31, 0x9C, 0xA6, 
   0xAB, 0xC5, 0x6C, 0xA4, 0x74, 0x19, 0x13, 0x44, 0x11, 0x16, 0x70, 0x2F, 0x5B, 0x60, 0x75, 0x5D, 
   0x66, 0x5F, 0x64, 0x9F, 0x4C, 0x69, 0x82, 0x34, 0x58, 0x42, 0x12, 0x51, 0x59, 0x6E, 0x51, 0x9E, 
   0x48, 0x58, 0x78, 0x16, 0x48, 0x25, 0x6D, 0x7C, 0x95, 0xAA, 0x6F, 0xFF, 0x30, 0x39, 0x5F, 0x00, 
   0x33, 0x17, 0x4B, 0x56, 0x88, 0x76, 0x63, 0x68, 0x4F, 0x48, 0x44, 0x44, 0x72, 0xA8, 0x56, 0x94, 
   0xEE, 0x61, 0x53, 0x86, 0x43, 0x00, 0x2F, 0x2C, 0x73, 0x41, 0x18, 0x9F, 0x8B, 0x50, 0x53, 0xC9, 
   0xD0, 0x98, 0xEC, 0x5E, 0x80, 0x5D, 0x01, 0x35, 0x45, 0x5B, 0x4B, 0x9B, 0x51, 0x4C, 0x82, 0x3C, 
   0x75, 0x8A, 0xA8, 0x81, 0xB5, 0x63, 0x22, 0x9A, 0x00, 0x52, 0x7A, 0x5D, 0xBB, 0xAB, 0x97, 0x93, 
   0xF7, 0x36, 0x31, 0xBC, 0x52, 0x68, 0x36, 0x57, 0x9F, 0x53, 0x52, 0x31, 0xE9, 0x47, 0x31, 0xCD, 
   0x63, 0x7E, 0x7C, 0x52, 0x91, 0x9C, 0x4B, 0xB2, 0x9B, 0x67, 0x5F, 0x84, 0x39, 0x02, 0xC2, 0x28, 
   0x31, 0x72, 0x5D, 0xB8, 0x51, 0x64, 0xC5, 0xFD, 0x60, 0x35, 0x92, 0x65, 0x39, 0x49, 0x59, 0x72, 
   0xB6, 0x36, 0x83, 0xC4, 0x5D, 0x55, 0xF6, 0x5C, 0x5B, 0xA1, 0x2E, 0x72, 0x00, 0x6B, 0x98, 0xA9, 
   0x69, 0x51, 0xFE, 0x00, 0x00, 0x10, 0x32, 0x6C, 0x40, 0xCF, 0xFF, 0xFF, 0x5E, 0x85, 0xA7, 0x12, 
   0x0A, 0x00, 0x71, 0x57, 0xB6, 0x85, 0x5D, 0xCF, 0x00, 0x65, 0x8B, 0x00, 0x67, 0x79, 0x94, 0x74, 
   0x6B, 0x91, 0x96, 0xD9, 0x26, 0x46, 0xCF, 0x48, 0x3B, 0x58, 0x86, 0xA2, 0xCD, 0x4D, 0xB2, 0xB4, 
   0x35, 0x2E, 0x1F, 0x51, 0x22, 0x87, 0x4B, 0x7F, 0xE1, 0x46, 0x9C, 0xE2, 0x52, 0x74, 0x90, 0x63, 
   0x2F, 0x44, 0x52, 0x62, 0x84, 0x35, 0xA2, 0xE6, 0x52, 0x79, 0xD5, 0x6E, 0x3F, 0x4B, 0x3C, 0x3A, 
   0x41, 0x37, 0x75, 0xF9, 0x83, 0xBA, 0xFF, 0x83, 0x53, 0x2A, 0x2C, 0x5C, 0x87, 0x48, 0x66, 0xA9, 
   0x6A, 0x44, 0x40, 0x42, 0x6C, 0xE1, 0x42, 0x8F, 0xF2, 0x86, 0x6D, 0x63, 0x26, 0x51, 0x4C, 0x43, 
   0x62, 0xBA, 0x72, 0x74, 0xC3, 0x78, 0x5E, 0xAD, 0x28, 0x80, 0xCD, 0x39, 0x5E, 0x80, 0x95, 0x69, 
   0x62, 0x8E, 0x7F, 0x9F, 0x24, 0x51, 0x95, 0x00, 0x5C, 0x92, 0x62, 0x78, 0xED, 0x91, 0x61, 0xA7, 
   0x31, 0x50, 0x4A, 0x4C, 0x6C, 0x99, 0x57, 0x73, 0x90, 0x41, 0x57, 0x92, 0x69, 0x8B, 0xE2, 0x1A, 
   0x63, 0xC4, 0x59, 0x52, 0x6D, 0x92, 0x74, 0x6D, 0x1B, 0x69, 0xC4, 0x00, 0x69, 0xC1, 0xA6, 0x69, 
   0x9E, 0xCC, 0x69, 0xC2, 0x18, 0x69, 0x65, 0x00, 0x74, 0x38, 0x6C, 0x73, 0xB3, 0x9C, 0x50, 0xEF, 
   0x3C, 0x60, 0xAB, 0x03, 0x50, 0x81, 0x70, 0x83, 0xA9, 0x9A, 0x4B, 0xB5, 0x44, 0x63, 0xBF, 0x48, 
   0xB8, 0x9A, 0x5D, 0x39, 0x59, 0x1E, 0x05, 0x1E, 0x42, 0x80, 0xB9, 0x8F, 0xB1, 0xFF, 0x95, 0x7E, 
   0xF0, 0x2D, 0x5A, 0x00, 0x26, 0x5E, 0x04, 0x75, 0x6D, 0xE7, 0x3D, 0x34, 0xFF, 0x28, 0x26, 0xAD, 
   0x95, 0xAC, 0x82, 0x85, 0xB4, 0x80, 0x55, 0x84, 0x96, 0x51, 0x46, 0xA8, 0x00, 0x0B, 0x87, 0x2C, 
   0x52, 0xAF, 0xE6, 0xB6, 0xCB, 0x86, 0x9B, 0x90, 0x21, 0x5A, 0x71, 0x3B, 0x5E, 0x98, 0x35, 0x68, 
   0xB9, 0x79, 0x77, 0xAB, 0x7D, 0x64, 0x74, 0x19, 0x3A, 0x51, 0x00, 0x24, 0x9D, 0x47, 0x55, 0x9F, 
   0xEA, 0xD6, 0xC1, 0xB4, 0xEB, 0xD4, 0x00, 0x13, 0x62, 0x00, 0x00, 0x36, 0x5E, 0x64, 0x8F, 0x48, 
   0x3C, 0x8F, 0x27, 0x3E, 0x79, 0x56, 0x96, 0x7A, 0x68, 0x64, 0xA8, 0x5D, 0x6A, 0x91, 0x67, 0x90, 
   0x7E, 0x38, 0x2D, 0x9D, 0x1B, 0x40, 0x61, 0x49, 0x6B, 0x38, 0x6C, 0x15, 0x88, 0x3F, 0x00, 0x63, 
   0x18, 0x5F, 0x5D, 0xA1, 0xFF, 0xFF, 0x2C, 0x93, 0x83, 0x05, 0xB9, 0x78, 0x7A, 0x6B, 0xA6, 0xC6, 
   0x5F, 0xA5, 0x62, 0x4F, 0x80, 0x00, 0x14, 0x60, 0x09, 0x1C, 0x65, 0xA0, 0xA1, 0x8C, 0xC2, 0xB8, 
   0xBD, 0x1F, 0x33, 0x42, 0x00, 0x0E, 0x0E, 0x42, 0x5D, 0x87, 0x77, 0x7A, 0xCE, 0x77, 0x63, 0x7F, 
   0x0A, 0x3B, 0x51, 0x1D, 0x30, 0x69, 0x80, 0x64, 0x99, 0x81, 0x8D, 0xC7, 0x73, 0x85, 0xB3, 0x2B, 
   0x4F, 0x10, 0x07, 0x2A, 0x4C, 0x68, 0x5B, 0xD3, 0x41, 0x40, 0x5B, 0x48, 0x59, 0x01, 0x4E, 0x94, 
   0xB4, 0x54, 0x71, 0xC8, 0x53, 0x2A, 0x6C, 0x30, 0x56, 0x75, 0x4B, 0x67, 0x6D, 0x46, 0x57, 0x66, 
   0x46, 0x4C, 0x70, 0x56, 0x79, 0x48, 0x4A, 0x6C, 0x72, 0x0C, 0x05, 0x9B, 0x3B, 0x3F, 0x64, 0x81, 
   0x8B, 0x77, 0x49, 0x6A, 0xCB, 0x53, 0x64, 0x68, 0x40, 0x41, 0x26, 0x2F, 0x4C, 0x5E, 0x40, 0x5D, 
   0x7D, 0x4C, 0x64, 0x7F, 0x5E, 0x5E, 0x8B, 0x31, 0x5E, 0x69, 0x53, 0x59, 0x69, 0x48, 0x59, 0x90, 
   0x53, 0x5E, 0x68, 0x41, 0x4D, 0x56, 0x47, 0x58, 0x73, 0x47, 0x58, 0x69, 0x41, 0x58, 0x6B, 0x5E, 
   0x63, 0xC0, 0x52, 0x62, 0x97, 0x3A, 0x39, 0x28, 0x28, 0x50, 0x81, 0x56, 0x57, 0x76, 0x46, 0x58, 
   0x5B, 0x35, 0x64, 0x8D, 0x58, 0x5E, 0x6A, 0x4E, 0x53, 0x2C, 0x3E, 0x65, 0x7D, 0x70, 0x70, 0xB1, 
   0x47, 0x4D, 0x78, 0x23, 0x36, 0x50, 0x39, 0x64, 0x51, 0x45, 0x6A, 0xBD, 0x4B, 0x6A, 0x83, 0x35, 
   0x5E, 0x1B, 0x41, 0x47, 0x3E, 0x53, 0x64, 0xB3, 0x48, 0x59, 0xA9, 0x48, 0x64, 0x64, 0x58, 0x6E, 
   0x63, 0x57, 0x44, 0x80, 0x2F, 0x38, 0x80, 0x29, 0x44, 0x6E, 0x4C, 0x57, 0x5D, 0x5E, 0x85, 0x8A, 
   0x52, 0x62, 0x83, 0x2F, 0x2D, 0x1D, 0x24, 0x29, 0x5F, 0x4D, 0x65, 0xBE, 0x65, 0xA5, 0xB4, 0x49, 
   0x71, 0x68, 0x37, 0x1F, 0x3F, 0x59, 0x2F, 0x7D, 0x75, 0x7F, 0xAB, 0x18, 0x63, 0x8E, 0x01, 0x2A, 
   0x3D, 0x74, 0x6F, 0x5A, 0x64, 0x7B, 0xB2, 0x53, 0x5D, 0xA7, 0x46, 0x34, 0x7C, 0x2F, 0x39, 0x30, 
   0x1A, 0x52, 0x21, 0x66, 0x8D, 0xC0, 0x9F, 0x9E, 0xFB, 0x3C, 0x4B, 0x4F, 0x00, 0x00, 0x40, 0x18, 
   0x3E, 0x6D, 0x5A, 0x7A, 0x48, 0xAC, 0x87, 0xD9, 0x67, 0x4E, 0xB7, 0x10, 0x31, 0x17, 0x2B, 0x6A, 
   0x6C, 0x5F, 0x5F, 0xA2, 0x38, 0x4F, 0x77, 0x35, 0x40, 0x6E, 0x70, 0x5A, 0x8D, 0x5B, 0x8A, 0xC7, 
   0x5C, 0x8B, 0x8E, 0x72, 0x57, 0x76, 0x10, 0x50, 0x3E, 0x06, 0x4C, 0x64, 0xB3, 0x6F, 0xE0, 0x97, 
   0x70, 0xC0, 0x00, 0x3E, 0x76, 0x12, 0x68, 0x9E, 0x91, 0x91, 0x55, 0x8D, 0x75, 0x6A, 0x47, 0x52, 
   0xF6, 0x23, 0x52, 0xCF, 0x24, 0x80, 0x84, 0x97, 0xAC, 0x7C, 0x8B, 0x69, 0xA4, 0x1C, 0x00, 0xB4, 
   0x10, 0x30, 0x8B, 0x68, 0xA6, 0x78, 0x97, 0xB9, 0x83, 0x57, 0x50, 0xA0, 0x28, 0x25, 0x95, 0x34, 
   0x53, 0x9A, 0x75, 0x89, 0x8F, 0x70, 0x6E, 0x76, 0x4E, 0x7F, 0xD8, 0x42, 0x5C, 0xC7, 0x6A, 0x50, 
   0x3E, 0x5E, 0x72, 0xB5, 0x6D, 0x77, 0xEA, 0x5F, 0x71, 0xB4, 0x00, 0x59, 0xAD, 0x16, 0x3C, 0x15, 
   0xC3, 0x71, 0x00, 0xA0, 0xC1, 0xF4, 0x00, 0x27, 0xFF, 0x0B, 0x01, 0x69, 0xAD, 0xF1, 0x55, 0xAD, 
   0xC2, 0x9A, 0x31, 0x00, 0xBE, 0x00, 0x1D, 0xCF, 0x4C, 0x7B, 0x3B, 0x98, 0x8A, 0x5F, 0x3F, 0x90, 
   0xFF, 0x46, 0x46, 0xB0, 0x7F, 0x51, 0x14, 0x30, 0x8A, 0x87, 0x2B, 0x51, 0xEC, 0xA9, 0x46, 0xEC, 
   0x7B, 0xA1, 0x77, 0x13, 0x68, 0x27, 0x46, 0x46, 0xD9, 0x79, 0x52, 0xE1, 0x73, 0x9C, 0x8A, 0x1C, 
   0x74, 0x99, 0x17, 0x3A, 0x77, 0x74, 0x5C, 0x89, 0x76, 0x79, 0xAD, 0x59, 0x80, 0x98, 0x53, 0x63, 
   0xED, 0x1B, 0x74, 0x9B, 0x66, 0x47, 0x12, 0x9A, 0x85, 0xE4, 0x43, 0x7F, 0xE4, 0x3C, 0x45, 0x44, 
   0x57, 0x5B, 0x66, 0x3C, 0x67, 0xC4, 0x5F, 0x6D, 0xD1, 0x76, 0x68, 0xA2, 0x31, 0x68, 0x4C, 0x37, 
   0x68, 0x96, 0x6C, 0x5D, 0xCB, 0x78, 0x74, 0x77, 0x55, 0x5E, 0x9B, 0x2C, 0x80, 0xFF, 0x4A, 0x63, 
   0x87, 0x6E, 0x63, 0x08, 0x9B, 0x79, 0xD6, 0x6A, 0x5C, 0xFF, 0x10, 0x60, 0x85, 0x00, 0x60, 0x59, 
   0x89, 0x67, 0x8B, 0x8B, 0x73, 0x6B, 0x19, 0x6D, 0xB8, 0x1F, 0x4B, 0xD8, 0x61, 0x63, 0xA0, 0xC2, 
   0x8C, 0xAF, 0x6B, 0x5E, 0xAC, 0x00, 0x57, 0x60, 0x2C, 0x74, 0x39, 0xDA, 0x69, 0xDB, 0x8A, 0x69, 
   0xFF, 0x1A, 0x69, 0x71, 0x22, 0x69, 0x1E, 0x2E, 0x69, 0x49, 0x5E, 0x7F, 0xD2, 0x9D, 0x6C, 0xFF, 
   0x64, 0x44, 0xAA, 0x14, 0x6B, 0x00, 0x4E, 0x67, 0xA8, 0x94, 0x62, 0xFF, 0x87, 0xB1, 0x90, 0x0D, 
   0x49, 0x1F, 0x1C, 0x00, 0x80, 0x51, 0x5D, 0xAB, 0x54, 0xB6, 0x83, 0x6D, 0x9B, 0xD1, 0x84, 0x55, 
   0xFF, 0x55, 0x58, 0x86, 0x3C, 0x6D, 0x00, 0x1A, 0x24, 0x5A, 0x55, 0x49, 0xD1, 0xA6, 0xD9, 0xFF, 
   0x61, 0xB1, 0xC7, 0x2B, 0x1A, 0x2A, 0x3B, 0x24, 0x62, 0x26, 0x86, 0xC5, 0x6D, 0x88, 0xD2, 0xA7, 
   0x7D, 0xC4, 0x45, 0x6B, 0x65, 0x27, 0x62, 0x5E, 0x6A, 0x23, 0xAE, 0x42, 0x52, 0xBF, 0x53, 0xC5, 
   0x7A, 0x95, 0xAC, 0xA0, 0x42, 0x3A, 0xB4, 0x00, 0x00, 0x6D, 0x25, 0x44, 0x4F, 0x8A, 0x5F, 0x7E, 
   0x76, 0x9C, 0xD0, 0x70, 0xB4, 0xC4, 0x8A, 0xA4, 0xA3, 0x51, 0x36, 0x42, 0x00, 0x00, 0x4F, 0x02, 
   0x40, 0x77, 0x76, 0x59, 0x8F, 0x78, 0x61, 0x8A, 0x34, 0x79, 0x6F, 0x29, 0x42, 0x9D, 0x63, 0x77, 
   0xA8, 0x9B, 0xC9, 0x94, 0x32, 0x46, 0x6E, 0x00, 0x00, 0x4F, 0x27, 0x0C, 0x23, 0x96, 0xCE, 0xA9, 
   0xA7, 0xD5, 0xE4, 0x00, 0x00, 0x2A, 0x26, 0x7A, 0x89, 0x00, 0x74, 0x89, 0x9B, 0xF4, 0x6E, 0x7A, 
   0x5A, 0xB7, 0x2F, 0x00, 0xC6, 0x1D, 0x38, 0x3F, 0x47, 0x98, 0x4E, 0xCF, 0xD9, 0xA8, 0x64, 0xA1, 
   0x8A, 0x00, 0x00, 0x70, 0x01, 0x03, 0x3B, 0x63, 0x77, 0x41, 0x6B, 0x8C, 0x8E, 0x43, 0x81, 0x8A, 
   0x32, 0x63, 0x69, 0x38, 0x40, 0x86, 0x45, 0x40, 0x86, 0x52, 0x80, 0x53, 0x7B, 0x76, 0x8D, 0x79, 
   0x91, 0xED, 0x26, 0x60, 0x7C, 0x0D, 0x1E, 0x10, 0x50, 0x43, 0x30, 0x24, 0x29, 0x60, 0x3D, 0x71, 
   0x70, 0x93, 0xC2, 0xBD, 0x65, 0x65, 0xB6, 0x19, 0x0C, 0x41, 0x23, 0x4F, 0x4F, 0x56, 0x67, 0x75, 
   0x56, 0x5C, 0x54, 0x33, 0x50, 0x67, 0x2E, 0x3F, 0x9B, 0x46, 0x66, 0x63, 0x5E, 0x34, 0x63, 0x42, 
   0x46, 0x64, 0x54, 0x70, 0x93, 0x5F, 0x76, 0xCB, 0x52, 0x5E, 0x7E, 0x18, 0x35, 0x03, 0x34, 0x40, 
   0x59, 0x52, 0x5D, 0xA0, 0x53, 0x64, 0x8B, 0x53, 0x59, 0x6E, 0x31, 0x59, 0x69, 0x53, 0x59, 0x75, 
   0x4D, 0x59, 0x97, 0x3C, 0x64, 0x74, 0x47, 0x4D, 0x46, 0x47, 0x58, 0x69, 0x47, 0x5D, 0xA3, 0x4C, 
   0x51, 0x7B, 0x46, 0x4B, 0x85, 0x3A, 0x50, 0x61, 0x45, 0x4B, 0x39, 0x34, 0x40, 0x83, 0x3B, 0x63, 
   0xA6, 0x53, 0x64, 0x5C, 0x43, 0x4E, 0x76, 0x60, 0x65, 0x75, 0x64, 0x70, 0x59, 0x1F, 0x4D, 0x70, 
   0x47, 0x3B, 0x45, 0x74, 0x64, 0x81, 0x3A, 0x70, 0xFF, 0x17, 0x59, 0x67, 0x34, 0x42, 0x00, 0x5E, 
   0x5E, 0x4F, 0x64, 0x59, 0xAE, 0x42, 0x53, 0xB0, 0x48, 0x53, 0x59, 0x53, 0x64, 0x57, 0x52, 0x73, 
   0x68, 0x34, 0x44, 0x74, 0x34, 0x44, 0x7A, 0x52, 0x62, 0x8C, 0x5E, 0x6E, 0x8B, 0x57, 0x5C, 0x5C, 
   0x3A, 0x44, 0x3F, 0x07, 0x1D, 0x53, 0x48, 0x42, 0x95, 0x99, 0xA5, 0xB9, 0x59, 0xB0, 0x7F, 0x00, 
   0x14, 0x39, 0x1F, 0x00, 0x6C, 0x71, 0x97, 0x8F, 0x83, 0x8D, 0x7E, 0x41, 0x53, 0x83, 0x1C, 0x46, 
   0x59, 0x11, 0x46, 0x43, 0x69, 0x63, 0x85, 0x7B, 0x6E, 0xE6, 0x41, 0x45, 0x94, 0x00, 0x1E, 0x00, 
   0x48, 0x5D, 0x6C, 0xB4, 0x91, 0xFC, 0x47, 0x5C, 0x7F, 0x00, 0x38, 0x45, 0x24, 0x3E, 0x51, 0x7C, 
   0x4B, 0x81, 0x67, 0x6F, 0xB1, 0x40, 0x65, 0x9C, 0x61, 0x70, 0xAC, 0x4E, 0x52, 0x7B, 0x25, 0x0E, 
   0x00, 0x03, 0x5F, 0x5D, 0x44, 0x8F, 0xE6, 0x87, 0x58, 0xC8, 0x7D, 0x48, 0xC1, 0x59, 0x76, 0x41, 
   0x00, 0x65, 0x3A, 0x31, 0x38, 0x81, 0x7E, 0x57, 0x9C, 0x47, 0x92, 0x8F, 0x63, 0x65, 0xA8, 0x6D, 
   0x32, 0xAE, 0x1D, 0x6D, 0x97, 0x2A, 0xA8, 0x5F, 0x92, 0x97, 0xA4, 0x7B, 0x1D, 0x9A, 0x19, 0x2E, 
   0x48, 0x3A, 0xA6, 0xA7, 0x68, 0x9B, 0xFF, 0x5D, 0x50, 0xBE, 0x67, 0x59, 0x42, 0x43, 0x68, 0x78, 
   0x0A, 0x2A, 0xB6, 0x55, 0x64, 0x94, 0x7F, 0x72, 0x94, 0x4C, 0x7F, 0x94, 0x47, 0x8F, 0x7E, 0x63, 
   0x6B, 0xA6, 0x53, 0x0F, 0x90, 0x4D, 0x49, 0x7B, 0x75, 0x8A, 0xB6, 0x41, 0x9B, 0xD3, 0x4C, 0x61, 
   0xAE, 0x73, 0x44, 0x2F, 0x54, 0x76, 0x74, 0x25, 0x7B, 0xFF, 0x47, 0x41, 0xBA, 0x44, 0x20, 0x11, 
   0x4C, 0x83, 0x1D, 0xAD, 0xC9, 0xF9, 0x5B, 0x67, 0xFF, 0x00, 0x00, 0x22, 0x5A, 0x48, 0x50, 0xCC, 
   0xD8, 0xFF, 0x2C, 0x8D, 0xA2, 0x00, 0x03, 0x35, 0x8D, 0x42, 0xAE, 0x7E, 0x9F, 0xD7, 0x39, 0x68, 
   0xAF, 0x2D, 0x4B, 0x79, 0x50, 0x8A, 0x51, 0x6D, 0x8F, 0x91, 0x4C, 0x33, 0xA6, 0x42, 0x45, 0xB4, 
   0x70, 0x8B, 0xDB, 0x5F, 0x97, 0xAB, 0x47, 0x69, 0x3E, 0x56, 0x40, 0x82, 0x3E, 0x63, 0xDE, 0x38, 
   0xA2, 0x9A, 0x39, 0x78, 0x9E, 0x52, 0x11, 0x4F, 0x7B, 0x4B, 0x5E, 0x49, 0xA3, 0xFF, 0x3E, 0xA8, 
   0xED, 0x82, 0x3B, 0x0B, 0x49, 0x3F, 0x7B, 0x27, 0x8A, 0xD8, 0x98, 0x6E, 0x7A, 0x53, 0x74, 0xB8, 
   0x00, 0x68, 0xAC, 0x74, 0x5C, 0x6E, 0x6F, 0x61, 0x86, 0x37, 0x6D, 0xD1, 0x5F, 0x7F, 0xE7, 0x76, 
   0x5D, 0x6E, 0x32, 0x68, 0x4B, 0x49, 0x5D, 0xA8, 0x7C, 0x74, 0xC7, 0x54, 0x63, 0xA7, 0x05, 0x5E, 
   0xCF, 0x51, 0x6F, 0xA0, 0xB9, 0x85, 0x98, 0xB6, 0x83, 0xCE, 0x0C, 0x2D, 0x7C, 0x00, 0x4F, 0x75, 
   0x47, 0x89, 0x75, 0x78, 0x68, 0x82, 0x48, 0x62, 0xA1, 0x4A, 0x62, 0xC6, 0x73, 0x5E, 0xAB, 0x9B, 
   0x81, 0x9F, 0x38, 0x8C, 0xB9, 0x00, 0x4C, 0x79, 0x72, 0x5D, 0x8E, 0xC9, 0x74, 0x9E, 0x65, 0x69, 
   0xA4, 0x00, 0x69, 0x8D, 0x30, 0x69, 0x66, 0xBF, 0x74, 0xB8, 0x6F, 0x68, 0xED, 0x00, 0x5C, 0x6A, 
   0x6A, 0x7D, 0x9D, 0x9E, 0x44, 0xC4, 0x27, 0x4A, 0x74, 0x48, 0xB6, 0x89, 0x69, 0x54, 0xAF, 0x56, 
   0x00, 0x6A, 0x18, 0x68, 0x7C, 0x47, 0xB5, 0xCE, 0x7B, 0x89, 0xCF, 0x54, 0x55, 0x42, 0x2C, 0x6F, 
   0x6C, 0x87, 0x79, 0xFF, 0x43, 0x35, 0xF3, 0x1C, 0x43, 0x00, 0x83, 0xC9, 0x3D, 0x8E, 0xBD, 0xEC, 
   0x41, 0x47, 0xE9, 0x2E, 0x21, 0x9E, 0x00, 0x11, 0x5E, 0x51, 0x83, 0x9E, 0xE8, 0xE2, 0xFF, 0x86, 
   0xB3, 0x9A, 0x00, 0x4C, 0x40, 0x29, 0x00, 0x89, 0x42, 0x4F, 0xA6, 0x93, 0x84, 0x9C, 0x9C, 0x90, 
   0xA2, 0x16, 0x82, 0x7E, 0x00, 0x2A, 0xA9, 0x6B, 0x34, 0xB7, 0xA5, 0x6E, 0x65, 0x54, 0x74, 0x5F, 
   0x00, 0x26, 0x88, 0x3F, 0x67, 0xA6, 0xC4, 0xE4, 0xD7, 0x94, 0xA7, 0xBC, 0x00, 0x00, 0x41, 0x1A, 
   0x1F, 0x4F, 0x53, 0x68, 0x88, 0x54, 0x59, 0x9B, 0x3E, 0x33, 0x7A, 0x44, 0x6F, 0x86, 0x62, 0x93, 
   0xA2, 0x57, 0x97, 0x85, 0x66, 0x3D, 0x88, 0x10, 0x00, 0x59, 0x11, 0x67, 0x70, 0xA0, 0xF1, 0xC0, 
   0x6D, 0x76, 0xA3, 0x0B, 0x00, 0x30, 0x80, 0x7A, 0x7E, 0xA1, 0x80, 0x79, 0x1C, 0x74, 0xA6, 0x10, 
   0x60, 0x78, 0x25, 0x2C, 0x77, 0xA6, 0x39, 0xA2, 0xDE, 0xD3, 0x82, 0x33, 0x88, 0x4C, 0x00, 0x3F, 
   0x72, 0x46, 0x67, 0x8F, 0x4B, 0x31, 0x99, 0x40, 0x21, 0x58, 0x25, 0x7E, 0x2B, 0x37, 0x5E, 0x84, 
   0x71, 0x6F, 0xCB, 0x6C, 0x8B, 0x86, 0x1C, 0x45, 0x4B, 0x28, 0x0C, 0x40, 0x63, 0x69, 0x7C, 0x80, 
   0x9E, 0xF4, 0x7E, 0x91, 0xBD, 0x36, 0x48, 0x00, 0x00, 0x00, 0x2D, 0x45, 0x38, 0xB7, 0x63, 0x51, 
   0x7A, 0x37, 0x5F, 0x59, 0x70, 0xAF, 0xA9, 0x53, 0x52, 0xA2, 0x24, 0x00, 0x44, 0x3F, 0x66, 0x21, 
   0x5B, 0x78, 0x83, 0x1C, 0x34, 0xA2, 0x2F, 0x45, 0x6F, 0x85, 0x8A, 0x75, 0x58, 0x68, 0x80, 0x1F, 
   0x2A, 0x69, 0x58, 0x52, 0x53, 0x53, 0x81, 0x92, 0x3C, 0x7C, 0xA8, 0x52, 0x47, 0x61, 0x3B, 0x2A, 
   0x26, 0x3B, 0x51, 0x5F, 0x47, 0x5D, 0x83, 0x53, 0x64, 0x74, 0x53, 0x59, 0x7A, 0x31, 0x59, 0x6A, 
   0x53, 0x59, 0x86, 0x58, 0x59, 0x86, 0x3C, 0x64, 0x6A, 0x41, 0x52, 0x7A, 0x57, 0x5D, 0x79, 0x46, 
   0x57, 0x51, 0x2F, 0x40, 0x5D, 0x4B, 0x6E, 0xA7, 0x46, 0x63, 0x6E, 0x3B, 0x4C, 0x52, 0x3C, 0x4C, 
   0x90, 0x49, 0x4D, 0x84, 0x77, 0x6A, 0x50, 0x59, 0x70, 0x92, 0x2A, 0x4D, 0x68, 0x24, 0x41, 0x00, 
   0x4C, 0x52, 0x7E, 0x5E, 0x7B, 0xFE, 0x57, 0x59, 0x80, 0x29, 0x47, 0x22, 0x3B, 0x4D, 0x3E, 0x5E, 
   0x59, 0x9C, 0x48, 0x65, 0xB5, 0x48, 0x5F, 0x77, 0x53, 0x75, 0x6F, 0x4C, 0x63, 0x74, 0x2F, 0x2E, 
   0x68, 0x1D, 0x39, 0x68, 0x46, 0x5C, 0x69, 0x69, 0x68, 0x97, 0x5D, 0x5C, 0x8B, 0x1D, 0x3F, 0x35, 
   0x07, 0x2E, 0x42, 0x64, 0x5E, 0xB7, 0x77, 0x99, 0xB9, 0x49, 0x76, 0x63, 0x3C, 0x2B, 0x56, 0x2A, 
   0x2B, 0x94, 0x48, 0x81, 0x7E, 0x55, 0x66, 0x6D, 0x61, 0x54, 0x7D, 0x70, 0x6A, 0x6D, 0x46, 0x69, 
   0x6D, 0x00, 0x57, 0x78, 0x28, 0x34, 0x88, 0x69, 0x40, 0x5B, 0x3E, 0x64, 0x58, 0x6C, 0x92, 0xD6, 
   0x8C, 0x6E, 0xB7, 0x11, 0x2C, 0x1F, 0x00, 0x1A, 0x12, 0x34, 0x3E, 0x99, 0x6C, 0x8A, 0x98, 0x8A, 
   0x6F, 0x84, 0x50, 0x30, 0x9B, 0x27, 0x52, 0x78, 0x2C, 0x64, 0x60, 0x82, 0x53, 0x7C, 0x49, 0x59, 
   0x60, 0x0A, 0x2D, 0x2B, 0x45, 0x57, 0xA2, 0x92, 0xA8, 0xFF, 0x6A, 0x69, 0x81, 0x2A, 0x23, 0x34, 
   0x2E, 0x34, 0x4B, 0x15, 0x4E, 0x6C, 0x90, 0x74, 0xE3, 0xD0, 0x8D, 0xDA, 0x0D, 0x50, 0x63, 0x00, 
   0x56, 0x73, 0x8B, 0x90, 0x8B, 0xA9, 0x85, 0xAF, 0x26, 0x57, 0xB0, 0x2A, 0x5C, 0x94, 0x63, 0x72, 
   0x46, 0x63, 0x66, 0x88, 0x73, 0x65, 0xF8, 0x32, 0x53, 0xDB, 0x0F, 0x4F, 0xA4, 0x54, 0x9F, 0x55, 
   0x88, 0x8B, 0x53, 0x32, 0x00, 0xAE, 0x0B, 0x1F, 0xAA, 0x5D, 0xB7, 0x72, 0x92, 0xB3, 0xA0, 0x54, 
   0x68, 0x90, 0x47, 0x32, 0x86, 0x46, 0x54, 0xB4, 0x46, 0x5B, 0x87, 0x68, 0x83, 0x9D, 0x61, 0x83, 
   0xC9, 0x43, 0x66, 0x72, 0x19, 0x5E, 0x75, 0x2B, 0x46, 0x97, 0x66, 0x3C, 0x82, 0x7E, 0x8D, 0xB7, 
   0x3F, 0x72, 0xFF, 0x0D, 0x3B, 0x39, 0x96, 0xAD, 0x00, 0xBB, 0xCC, 0xE7, 0x00, 0x00, 0xEA, 0x00, 
   0x00, 0x68, 0x8C, 0xE4, 0x8F, 0xDA, 0xC9, 0x6A, 0x2A, 0x27, 0xD7, 0x2E, 0x15, 0xF2, 0x71, 0x82, 
   0x1D, 0x43, 0x9A, 0x67, 0x1B, 0x61, 0xF1, 0x5B, 0x4A, 0x8C, 0x73, 0x6C, 0x54, 0x30, 0x7E, 0x95, 
   0x3D, 0x40, 0xDC, 0x9E, 0x69, 0xE1, 0x6F, 0x97, 0x82, 0x23, 0x63, 0x35, 0x32, 0x5D, 0x9C, 0x5B, 
   0x68, 0xC0, 0x6D, 0x62, 0x89, 0x30, 0x79, 0x7A, 0x31, 0x4C, 0xE1, 0x60, 0x69, 0xAD, 0x72, 0x63, 
   0x4C, 0x66, 0x7F, 0xC1, 0x42, 0x67, 0xC0, 0x47, 0x28, 0x2D, 0x31, 0x68, 0xAC, 0x70, 0x91, 0xF9, 
   0x81, 0x75, 0xA9, 0x25, 0x62, 0x6E, 0x30, 0x45, 0x68, 0x6A, 0x61, 0xB4, 0x54, 0x68, 0xE2, 0x59, 
   0x7F, 0x96, 0x4D, 0x5D, 0x45, 0x31, 0x68, 0x9B, 0x59, 0x5D, 0xA2, 0x5A, 0x63, 0x5C, 0x61, 0x64, 
   0xCB, 0x67, 0x91, 0xFF, 0x56, 0x62, 0x97, 0x4A, 0x45, 0x04, 0x97, 0x77, 0xA2, 0x5A, 0x5B, 0xB5, 
   0x00, 0x4A, 0x8F, 0x16, 0x73, 0xB1, 0xA4, 0x74, 0x79, 0xA1, 0x63, 0x8B, 0x6D, 0x80, 0xC5, 0x00, 
   0x53, 0xAA, 0x3A, 0x6F, 0x7D, 0xE6, 0x80, 0xE7, 0x7E, 0x4C, 0xE3, 0x03, 0x5D, 0x34, 0x12, 0x74, 
   0x0C, 0x6A, 0x69, 0x93, 0x83, 0x74, 0xFF, 0x5A, 0x68, 0xF9, 0x41, 0x51, 0x66, 0x24, 0x7E, 0x26, 
   0x31, 0x5C, 0x85, 0x99, 0x5C, 0xFF, 0x8D, 0xA4, 0xD5, 0x19, 0x37, 0x00, 0x0C, 0x0F, 0x58, 0x62, 
   0x68, 0xEE, 0x7B, 0xBB, 0xB7, 0x60, 0x7D, 0x89, 0x53, 0x65, 0x99, 0x40, 0x5E, 0x65, 0x40, 0x68, 
   0x4C, 0x32, 0x3B, 0xCE, 0x79, 0x3E, 0xFF, 0xA7, 0xC3, 0xCA, 0x55, 0xB7, 0x00, 0x24, 0x3C, 0x1E, 
   0x44, 0x27, 0xD4, 0x12, 0x44, 0xFB, 0x44, 0x69, 0xD3, 0xCB, 0x67, 0xA2, 0x7C, 0xAD, 0x5A, 0x45, 
   0xAB, 0x85, 0x53, 0x1F, 0xAC, 0x03, 0x28, 0x94, 0x64, 0x89, 0x66, 0xA8, 0x99, 0x95, 0x3F, 0x43, 
   0xF1, 0x00, 0x1A, 0xAB, 0x3A, 0x7C, 0x5E, 0xC4, 0x99, 0x95, 0x89, 0x81, 0xB0, 0x00, 0x46, 0x6F, 
   0x23, 0x56, 0x79, 0x52, 0x56, 0xA1, 0x44, 0x3B, 0x8B, 0x68, 0xB4, 0xA7, 0xAB, 0xC2, 0xC2, 0x51, 
   0x2F, 0x69, 0x00, 0x0D, 0x3F, 0x13, 0x3A, 0x78, 0x5F, 0x3D, 0xB2, 0x60, 0xA1, 0x7A, 0x43, 0x96, 
   0x74, 0x28, 0x07, 0x8B, 0x46, 0x20, 0x87, 0x8B, 0xEA, 0xA3, 0x84, 0xC0, 0xE5, 0x04, 0x0A, 0x53, 
   0x00, 0x10, 0x2D, 0xBA, 0x63, 0xA2, 0x74, 0x57, 0x95, 0x9A, 0x57, 0xA0, 0x00, 0x1A, 0x83, 0x00, 
   0x57, 0x60, 0x87, 0xDE, 0x82, 0xE5, 0xCC, 0xB4, 0x87, 0x45, 0xB7, 0x03, 0x39, 0x24, 0x00, 0x4D, 
   0x44, 0x5E, 0x6E, 0x9B, 0x6E, 0x7E, 0xAC, 0x19, 0x32, 0x71, 0x30, 0x1B, 0x37, 0x5F, 0x72, 0x61, 
   0x55, 0x74, 0xC3, 0x55, 0x74, 0x85, 0x49, 0x5C, 0x40, 0x2C, 0x3E, 0x79, 0x2D, 0x3F, 0xA7, 0x57, 
   0x75, 0x5D, 0x7A, 0x8D, 0x58, 0x67, 0x85, 0xEB, 0x26, 0x54, 0x66, 0x29, 0x3A, 0x47, 0x56, 0x38, 
   0x89, 0x29, 0x22, 0x55, 0x41, 0x69, 0x56, 0x7B, 0xB5, 0xA1, 0x6A, 0x59, 0x6E, 0x34, 0x12, 0x4C, 
   0x00, 0x38, 0x80, 0x45, 0x6D, 0x8C, 0x79, 0x73, 0x64, 0x2A, 0x41, 0x86, 0x35, 0x6F, 0x75, 0x57, 
   0x74, 0x74, 0x30, 0x2F, 0x6D, 0x2A, 0x46, 0x47, 0x53, 0x6A, 0x87, 0x5F, 0x82, 0xDD, 0x53, 0x7C, 
   0x74, 0x30, 0x36, 0x16, 0x3B, 0x35, 0x54, 0x47, 0x5D, 0x84, 0x4D, 0x5E, 0x86, 0x53, 0x53, 0x8C, 
   0x3C, 0x59, 0x4D, 0x3C, 0x59, 0x65, 0x53, 0x64, 0xB5, 0x63, 0x52, 0x8C, 0x24, 0x5D, 0x3A, 0x34, 
   0x51, 0x5B, 0x4B, 0x57, 0x68, 0x52, 0x58, 0x7B, 0x41, 0x64, 0xAF, 0x4D, 0x69, 0x81, 0x49, 0x36, 
   0x3C, 0x60, 0x4D, 0x96, 0x5F, 0x86, 0xA5, 0x2A, 0x4D, 0x48, 0x3B, 0x3B, 0x42, 0x52, 0x52, 0x71, 
   0x52, 0x69, 0xA5, 0x30, 0x47, 0x7D, 0x41, 0x47, 0x22, 0x6A, 0x5E, 0x5D, 0x4D, 0x5E, 0xCB, 0x25, 
   0x53, 0x93, 0x47, 0x5F, 0x54, 0x5E, 0x6A, 0x6F, 0x47, 0x52, 0x7A, 0x3B, 0x40, 0x80, 0x3B, 0x45, 
   0x6E, 0x52, 0x68, 0x57, 0x57, 0x74, 0x84, 0x56, 0x68, 0x68, 0x28, 0x4B, 0x3C, 0x24, 0x2E, 0x88, 
   0x54, 0x42, 0x91, 0x83, 0x94, 0x92, 0x60, 0xAF, 0x96, 0x1A, 0x08, 0x50, 0x1A, 0x00, 0x4A, 0x76, 
   0x93, 0x89, 0x60, 0xB7, 0xAC, 0x27, 0x39, 0x6D, 0x37, 0x31, 0x39, 0x54, 0x64, 0x85, 0x59, 0x69, 
   0xB4, 0x5D, 0x51, 0xB2, 0x17, 0x2E, 0x42, 0x00, 0x2A, 0x00, 0x93, 0x8C, 0x9D, 0xD3, 0xAE, 0xFF, 
   0x35, 0x5B, 0x90, 0x00, 0x0E, 0x00, 0x0A, 0x13, 0x0A, 0x75, 0x6C, 0x70, 0x9B, 0x86, 0xDD, 0x57, 
   0x65, 0xBE, 0x33, 0x59, 0x62, 0x42, 0x3B, 0x76, 0x31, 0x30, 0x5F, 0x21, 0x7C, 0x40, 0x5C, 0x67, 
   0xCC, 0x7F, 0x51, 0xBD, 0x4C, 0x5D, 0x61, 0x23, 0x79, 0x4F, 0x50, 0x7E, 0x9A, 0x45, 0x22, 0x96, 
   0x36, 0x18, 0x66, 0x65, 0x87, 0x90, 0x50, 0x91, 0x9E, 0x4B, 0x39, 0xB1, 0x57, 0x74, 0xA6, 0x41, 
   0x9C, 0x57, 0x59, 0x62, 0x74, 0x92, 0x28, 0xCB, 0x36, 0x56, 0x8D, 0x1F, 0xA1, 0x61, 0x91, 0x89, 
   0xCF, 0x85, 0x30, 0xA8, 0x2E, 0x29, 0x49, 0x31, 0x58, 0xC7, 0x31, 0x99, 0xE9, 0x60, 0x8F, 0x85, 
   0x6C, 0x6B, 0x65, 0x4F, 0x46, 0x5D, 0x16, 0x35, 0x92, 0x56, 0x59, 0xB6, 0x7B, 0x7E, 0x7F, 0x70, 
   0x80, 0x91, 0x4C, 0x8B, 0xC6, 0x45, 0x89, 0x9E, 0x39, 0x4E, 0xA2, 0x60, 0x31, 0x56, 0x65, 0x76, 
   0x78, 0x2B, 0x98, 0xFF, 0x2B, 0x47, 0x79, 0x5A, 0x09, 0x00, 0x61, 0xAF, 0x82, 0x5C, 0xA5, 0xFF, 
   0x50, 0x1C, 0xC2, 0x28, 0x55, 0x00, 0x68, 0x8A, 0x37, 0xC1, 0xAB, 0xD5, 0x12, 0x57, 0xEE, 0x00, 
   0x00, 0x49, 0x52, 0x43, 0x57, 0xB2, 0xFF, 0xFF, 0x91, 0x8B, 0xBF, 0x1D, 0x0B, 0x1D, 0x38, 0x59, 
   0x8D, 0x54, 0x87, 0x8F, 0x5F, 0x4F, 0xA7, 0x26, 0x55, 0xB9, 0x49, 0x78, 0x76, 0x6D, 0x68, 0x88, 
   0x58, 0x6D, 0xB2, 0x64, 0x46, 0xB8, 0x63, 0x69, 0xD8, 0x51, 0xA7, 0x85, 0x2E, 0x68, 0x34, 0x3A, 
   0x23, 0x75, 0x69, 0x57, 0xB3, 0x6F, 0xA9, 0xFF, 0x2C, 0x98, 0xB8, 0x4F, 0x30, 0x06, 0x9A, 0x56, 
   0xB0, 0x4A, 0x8A, 0xE4, 0x48, 0x68, 0x62, 0x4C, 0x56, 0x7D, 0x1A, 0x46, 0x9B, 0x6B, 0x80, 0x9D, 
   0x9E, 0x81, 0xC0, 0x42, 0x75, 0xA3, 0x1A, 0x62, 0xAD, 0x6F, 0x5C, 0x79, 0x64, 0x61, 0x63, 0x42, 
   0x68, 0xCB, 0x6A, 0x7F, 0xF2, 0x53, 0x5D, 0x68, 0x20, 0x52, 0x4C, 0x4F, 0x6A, 0xC6, 0x94, 0xA8, 
   0xE0, 0x7C, 0x6E, 0xC3, 0x00, 0x3F, 0xA7, 0x3C, 0x5C, 0x4D, 0x98, 0x8A, 0x42, 0x80, 0x6D, 0xC8, 
   0x1C, 0x5C, 0xE1, 0x00, 0x4B, 0x80, 0x75, 0x6E, 0x90, 0xB0, 0x80, 0x89, 0x22, 0x5E, 0x73, 0x0C, 
   0x63, 0xA9, 0x86, 0x5E, 0xD2, 0xB9, 0x6F, 0xD6, 0x6B, 0x97, 0x7C, 0x00, 0x4C, 0x62, 0x00, 0x5D, 
   0x41, 0xBB, 0x84, 0xA0, 0xBD, 0x6D, 0xFF, 0x16, 0x51, 0xCE, 0x2B, 0x7E, 0x31, 0x8C, 0x51, 0x63, 
   0x4D, 0x5D, 0xCC, 0x1A, 0xBC, 0xA7, 0x80, 0x5A, 0xC2, 0x74, 0x00, 0xB5, 0x18, 0x5C, 0x60, 0x25, 
   0xC6, 0x9F, 0x8E, 0x83, 0xEA, 0xB0, 0x54, 0x99, 0x25, 0x63, 0x42, 0x2E, 0x73, 0xAF, 0x3A, 0x2F, 
   0xC7, 0x2C, 0x32, 0x46, 0x8A, 0xC3, 0xAA, 0xAC, 0xC3, 0xFF, 0x48, 0x48, 0xBD, 0x0B, 0x1C, 0x00, 
   0x00, 0x55, 0x2A, 0x49, 0x75, 0xE6, 0xCF, 0x9A, 0xFF, 0x6F, 0x9F, 0x9C, 0x22, 0x48, 0x1F, 0x2C, 
   0x2B, 0x7E, 0x4A, 0x93, 0xD9, 0x8E, 0xB5, 0x8E, 0x7A, 0x68, 0x65, 0x22, 0x2B, 0x87, 0x00, 0x4C, 
   0x8D, 0x69, 0x43, 0xA3, 0xD1, 0x84, 0x91, 0x57, 0xB2, 0x73, 0x00, 0x60, 0xA5, 0x51, 0x51, 0xC4, 
   0x84, 0x76, 0x7C, 0x39, 0x35, 0x41, 0x00, 0x1F, 0x5E, 0x5B, 0x62, 0x95, 0xCF, 0xD0, 0xD0, 0x77, 
   0xB6, 0xBD, 0x0C, 0x00, 0x5E, 0x14, 0x03, 0x56, 0x63, 0x8B, 0x78, 0x5E, 0x5E, 0x9B, 0x14, 0x0A, 
   0x7A, 0x2D, 0x0E, 0x5F, 0x5E, 0xAD, 0xB7, 0x9E, 0xFF, 0xD3, 0x7E, 0xA4, 0xAD, 0x00, 0x00, 0x52, 
   0x07, 0x00, 0x47, 0xA7, 0xA6, 0x62, 0x2B, 0x2A, 0x88, 0x0A, 0x09, 0x93, 0x73, 0x41, 0x5A, 0x7B, 
   0x86, 0x8D, 0x92, 0xD5, 0x9D, 0x4C, 0xD8, 0x75, 0x17, 0x38, 0x84, 0x5E, 0x00, 0x98, 0x67, 0x57, 
   0x41, 0x2C, 0x58, 0x67, 0x1A, 0x6F, 0x90, 0x5E, 0x84, 0x7A, 0x42, 0x2D, 0x9B, 0x42, 0x26, 0x77, 
   0x48, 0x71, 0x27, 0x37, 0x3F, 0x72, 0x60, 0x68, 0xB3, 0x60, 0x7E, 0xA7, 0x2C, 0x39, 0x55, 0x21, 
   0x28, 0x27, 0x40, 0x63, 0x63, 0x80, 0x87, 0xE4, 0xA7, 0xA8, 0xEE, 0x1B, 0x60, 0x3E, 0x06, 0x1D, 
   0x27, 0x4F, 0x36, 0x6F, 0x1D, 0x11, 0x64, 0x41, 0x6A, 0x28, 0x86, 0xEF, 0xC0, 0x3C, 0x4E, 0xDF, 
   0x1E, 0x00, 0x4F, 0x62, 0x78, 0x4D, 0x57, 0x62, 0x91, 0x3B, 0x35, 0x7B, 0x40, 0x4D, 0x75, 0x52, 
   0x86, 0x79, 0x47, 0x57, 0x51, 0x3C, 0x12, 0x62, 0x4D, 0x41, 0x64, 0x59, 0x8D, 0x9A, 0x59, 0x89, 
   0xC7, 0x53, 0x5A, 0x63, 0x30, 0x30, 0x23, 0x35, 0x41, 0x6D, 0x5E, 0x69, 0xA2, 0x53, 0x70, 0x6F, 
   0x3C, 0x4E, 0x59, 0x3C, 0x5E, 0x99, 0x5E, 0x4D, 0x99, 0x47, 0x52, 0x6A, 0x3B, 0x52, 0x62, 0x40, 
   0x46, 0x51, 0x3B, 0x4C, 0x74, 0x41, 0x5D, 0x86, 0x48, 0x5E, 0x6B, 0x43, 0x65, 0xA4, 0x71, 0x65, 
   0x81, 0x59, 0x69, 0x5D, 0x19, 0x2F, 0x7D, 0x34, 0x4C, 0x44, 0x57, 0x64, 0x51, 0x63, 0x70, 0xEA, 
   0x30, 0x59, 0x7C, 0x35, 0x42, 0x00, 0x31, 0x59, 0x4F, 0x6B, 0x70, 0xCB, 0x6B, 0x53, 0xA0, 0x31, 
   0x4E, 0x77, 0x35, 0x6A, 0x53, 0x40, 0x5E, 0x69, 0x40, 0x4C, 0x69, 0x30, 0x3A, 0x75, 0x53, 0x63, 
   0x81, 0x6F, 0x6F, 0x91, 0x4B, 0x63, 0x62, 0x0B, 0x40, 0x29, 0x11, 0x3A, 0x65, 0x5F, 0x3C, 0xAE, 
   0x94, 0x9F, 0xDD, 0x4A, 0x93, 0x75, 0x20, 0x0E, 0x3A, 0x36, 0x1F, 0x8F, 0x59, 0x87, 0x84, 0x55, 
   0x77, 0x50, 0x55, 0x4A, 0x94, 0x6B, 0x7D, 0x7E, 0x26, 0x5F, 0x5D, 0x20, 0x36, 0x75, 0x82, 0x68, 
   0xBF, 0x6B, 0x52, 0x84, 0x1A, 0x59, 0x0B, 0x35, 0x80, 0x89, 0x6E, 0x68, 0xC9, 0x5D, 0x44, 0x57, 
   0x23, 0x37, 0x83, 0x2E, 0x42, 0xA3, 0x46, 0x4E, 0x2A, 0x4D, 0x61, 0x48, 0x65, 0x46, 0x7F, 0x3E, 
   0x6A, 0xC2, 0x49, 0x8D, 0xA0, 0x54, 0x3D, 0x2D, 0x37, 0x37, 0x45, 0x22, 0x49, 0x93, 0x69, 0x79, 
   0xB4, 0x8C, 0x9C, 0xF7, 0x63, 0x6D, 0x6A, 0x1C, 0x16, 0x00, 0x0A, 0x38, 0x41, 0x3A, 0x78, 0xC0, 
   0x81, 0x7A, 0xE1, 0x7C, 0x43, 0xBA, 0x25, 0x46, 0x57, 0x00, 0x6C, 0x47, 0x8C, 0xA8, 0x9F, 0xC7, 
   0x8C, 0xC4, 0x32, 0x40, 0xA8, 0x00, 0x45, 0x5D, 0x7A, 0x83, 0x70, 0x91, 0x7E, 0xBC, 0x30, 0x82, 
   0xC9, 0x50, 0x5D, 0xA1, 0x49, 0x2E, 0x77, 0x44, 0x4C, 0x5C, 0x60, 0x81, 0xA3, 0x5B, 0x72, 0xFF, 
   0x39, 0x5C, 0xB8, 0x50, 0x99, 0x37, 0x72, 0x86, 0x6F, 0x23, 0x00, 0x99, 0x40, 0x25, 0xA2, 0x85, 
   0xA6, 0x98, 0x57, 0xAE, 0xA9, 0x3F, 0x61, 0xBF, 0x54, 0x42, 0x90, 0x47, 0x5D, 0x89, 0x1F, 0x52, 
   0x9E, 0x42, 0x5E, 0x86, 0x60, 0x5A, 0x63, 0x5C, 0x88, 0x69, 0x67, 0x60, 0xC0, 0x2E, 0x5B, 0xA4, 
   0x3F, 0x77, 0x66, 0x94, 0x88, 0xC5, 0x4E, 0x48, 0xB2, 0x00, 0x38, 0x38, 0x70, 0xAA, 0x44, 0xB4, 
   0x92, 0xAE, 0x00, 0x08, 0xDA, 0x00, 0x0A, 0xAD, 0xBC, 0xDA, 0x8E, 0x7F, 0xCF, 0x77, 0x01, 0x0A, 
   0xA6, 0x60, 0x0D, 0xDF, 0x71, 0x75, 0x4B, 0x37, 0x89, 0x6E, 0x0F, 0x68, 0xED, 0x60, 0x5D, 0x99, 
   0x7E, 0x79, 0x59, 0x34, 0x68, 0x92, 0x2F, 0x5C, 0xB0, 0x74, 0x5C, 0xC6, 0x63, 0x78, 0x75, 0x4C, 
   0x5D, 0x2C, 0x3C, 0x58, 0xF6, 0x43, 0x87, 0xE1, 0xA5, 0x82, 0x4C, 0x4A, 0x80, 0xB5, 0x21, 0x3A, 
   0x93, 0x76, 0x3F, 0x62, 0x4E, 0x79, 0xCA, 0x32, 0x9C, 0xE1, 0x86, 0x69, 0x73, 0x48, 0x35, 0x62, 
   0x1B, 0x80, 0xA2, 0x82, 0x7B, 0xE8, 0x82, 0x6F, 0xC5, 0x26, 0x68, 0x57, 0x47, 0x45, 0x62, 0x58, 
   0x67, 0xB9, 0x42, 0x68, 0xD1, 0x54, 0x69, 0x87, 0x5A, 0x6A, 0x64, 0x77, 0x97, 0xC4, 0x54, 0x5D, 
   0xCA, 0x36, 0x3F, 0x68, 0x57, 0x61, 0x79, 0x40, 0x8A, 0xD4, 0x14, 0x57, 0x8A, 0x55, 0x74, 0x63, 
   0x9F, 0x6E, 0xB4, 0x81, 0x69, 0xD1, 0x00, 0x6E, 0xB4, 0x00, 0x69, 0x84, 0x61, 0x58, 0x56, 0xCB, 
   0x75, 0xA7, 0x8B, 0x63, 0xFF, 0x27, 0x63, 0x6D, 0x08, 0x6A, 0x43, 0x75, 0x7A, 0xA0, 0x5F, 0x62, 
   0xFF, 0x26, 0x4A, 0xC2, 0x54, 0x50, 0x53, 0x77, 0x83, 0x5D, 0x4A, 0x4B, 0xA3, 0x5A, 0x5D, 0xC0, 
   0x8C, 0xB7, 0x9C, 0x29, 0x49, 0x56, 0x01, 0x10, 0x58, 0x7F, 0x84, 0xEF, 0x64, 0xA9, 0xDF, 0x4E, 
   0x77, 0x55, 0x59, 0x5F, 0x86, 0x53, 0x69, 0xA3, 0x62, 0x73, 0x92, 0x24, 0x2F, 0xA9, 0x14, 0x3D, 
   0xA9, 0x9E, 0xB2, 0x8C, 0x6C, 0xC3, 0x3E, 0x3D, 0x54, 0x92, 0x62, 0x28, 0xFF, 0x24, 0x50, 0xBE, 
   0x10, 0x5E, 0x0F, 0xBD, 0x7D, 0x74, 0x90, 0xB6, 0xC0, 0x21, 0x9C, 0xC8, 0x31, 0x00, 0xCB, 0x33, 
   0x0E, 0x6D, 0x8A, 0xCD, 0x5B, 0xBC, 0xDF, 0xBB, 0x34, 0x5D, 0xAA, 0x00, 0x00, 0x7B, 0x51, 0x36, 
   0x63, 0xC0, 0xB0, 0x7F, 0x7B, 0x85, 0xB3, 0x11, 0x4C, 0xA7, 0x2B, 0x71, 0x82, 0x79, 0x8F, 0x99, 
   0x3F, 0x3C, 0x79, 0x0B, 0x2E, 0x4A, 0x56, 0x4A, 0x67, 0x58, 0x31, 0x87, 0x2D, 0x67, 0x90, 0x78, 
   0x9D, 0xD6, 0xAB, 0xA1, 0xBD, 0x3A, 0x6F, 0x69, 0x00, 0x36, 0x3F, 0x23, 0x0B, 0x72, 0x36, 0x04, 
   0x8B, 0x5C, 0xB0, 0x99, 0x8B, 0xEC, 0xB1, 0x4C, 0x56, 0xAF, 0x12, 0x29, 0x57, 0x7C, 0x74, 0x9C, 
   0x58, 0x4E, 0xA9, 0x00, 0x0E, 0x02, 0x14, 0x43, 0x75, 0x00, 0x22, 0x64, 0x8C, 0x70, 0xB4, 0xE8, 
   0xB2, 0x92, 0x3A, 0x81, 0x69, 0x00, 0x52, 0x78, 0x41, 0x87, 0x68, 0x87, 0x56, 0xBD, 0x70, 0x1B, 
   0xBB, 0x3A, 0x64, 0x1F, 0x1C, 0x6B, 0x3A, 0x49, 0x76, 0xC4, 0x82, 0x7F, 0xB9, 0x3D, 0x38, 0x61, 
   0x25, 0x0F, 0x20, 0x41, 0x60, 0x66, 0x4E, 0x7F, 0xD4, 0x55, 0x62, 0x8F, 0x65, 0x6C, 0x21, 0x2C, 
   0x39, 0x5A, 0x28, 0x3A, 0x90, 0x5D, 0x6F, 0x71, 0x7B, 0x82, 0xBB, 0x89, 0xA7, 0xC9, 0x25, 0x59, 
   0x3B, 0x00, 0x00, 0x30, 0x66, 0x42, 0x4C, 0x3F, 0x2E, 0x54, 0x25, 0x5A, 0x92, 0x6B, 0xC7, 0xC3, 
   0x87, 0x7C, 0x90, 0x1F, 0x13, 0x3E, 0x0D, 0x39, 0x48, 0x6D, 0x6E, 0x91, 0x40, 0x69, 0x75, 0x35, 
   0x4D, 0x69, 0x5E, 0x68, 0x6E, 0x6A, 0x5C, 0x85, 0x2B, 0x40, 0x5E, 0x36, 0x3B, 0x54, 0x48, 0x6B, 
   0x8F, 0x5F, 0x7E, 0xC2, 0x53, 0x7D, 0x7C, 0x35, 0x37, 0x52, 0x3B, 0x36, 0x51, 0x47, 0x64, 0x5E, 
   0x53, 0x70, 0xA9, 0x5E, 0x59, 0x8D, 0x30, 0x4D, 0x48, 0x30, 0x5E, 0x6A, 0x5E, 0x6A, 0x98, 0x53, 
   0x5E, 0x7B, 0x31, 0x58, 0x6F, 0x42, 0x41, 0x7A, 0x4E, 0x47, 0x58, 0x60, 0x5A, 0x76, 0x6B, 0x93, 
   0xBF, 0x3C, 0x5E, 0x68, 0x29, 0x13, 0x01, 0x3A, 0x46, 0x8B, 0x46, 0x80, 0xEC, 0x4C, 0x6A, 0x68, 
   0x3C, 0x48, 0x21, 0x48, 0x65, 0x5A, 0x5F, 0x65, 0x8B, 0x32, 0x4E, 0x99, 0x49, 0x4E, 0x8E, 0x76, 
   0x70, 0x60, 0x3C, 0x59, 0x81, 0x24, 0x52, 0x75, 0x3B, 0x41, 0x5E, 0x53, 0x5D, 0x64, 0x59, 0x6F, 
   0x8D, 0x5E, 0x63, 0x98, 0x3A, 0x40, 0x48, 0x0C, 0x2F, 0x4E, 0x30, 0x48, 0x90, 0x82, 0x99, 0xA9, 
   0x6C, 0x93, 0x8C, 0x27, 0x14, 0x7A, 0x37, 0x14, 0x57, 0x4E, 0x8D, 0x68, 0x60, 0xAB, 0xC9, 0x43, 
   0x2D, 0x78, 0x37, 0x31, 0x11, 0x54, 0x76, 0x73, 0x4E, 0x98, 0xD1, 0x3D, 0x36, 0xA3, 0x32, 0x13, 
   0x40, 0x3F, 0x59, 0x1E, 0x94, 0xAA, 0xB4, 0x97, 0x80, 0xF8, 0x00, 0x21, 0x43, 0x00, 0x08, 0x00, 
   0x50, 0x3D, 0x5F, 0x9E, 0x8F, 0xBE, 0x71, 0x7E, 0xD5, 0x1F, 0x34, 0x44, 0x07, 0x39, 0x0A, 0x4C, 
   0x5D, 0x84, 0x5F, 0x60, 0xAA, 0x3E, 0x8F, 0x69, 0x34, 0x51, 0x61, 0x63, 0x23, 0xCF, 0x69, 0x73, 
   0xB8, 0x3B, 0x7F, 0x5B, 0x62, 0x6C, 0x7A, 0x3F, 0x31, 0x73, 0x17, 0x16, 0x09, 0x58, 0x79, 0x97, 
   0x92, 0x98, 0xFD, 0x42, 0x2D, 0xAE, 0x03, 0x46, 0x51, 0x66, 0x9F, 0x46, 0x58, 0x96, 0x77, 0x7C, 
   0x3C, 0xF1, 0x70, 0x80, 0xA2, 0x31, 0x9B, 0x36, 0x47, 0x5B, 0x97, 0x7F, 0x3C, 0xCC, 0x50, 0x6F, 
   0x7D, 0x00, 0x69, 0x98, 0x49, 0x74, 0x9D, 0x7E, 0x5D, 0x59, 0x5C, 0x3B, 0x72, 0x39, 0x48, 0xD0, 
   0x39, 0xA0, 0xD6, 0x5C, 0x8F, 0xA6, 0x68, 0x6B, 0x44, 0x5C, 0x4D, 0x67, 0x39, 0x30, 0xDB, 0x33, 
   0x5F, 0xC5, 0x5C, 0xAB, 0x90, 0x7E, 0x5B, 0x84, 0x5A, 0x4E, 0x84, 0x1F, 0x74, 0xD2, 0x1F, 0x4C, 
   0x8B, 0x49, 0x20, 0x14, 0x8A, 0x99, 0x94, 0x6D, 0xC2, 0xFF, 0x23, 0x27, 0x86, 0x45, 0x38, 0x00, 
   0x8E, 0xBA, 0xA2, 0x6A, 0x70, 0xFF, 0x08, 0x24, 0xC6, 0x0E, 0x42, 0x38, 0x83, 0x7E, 0x15, 0xAD, 
   0xEA, 0xB8, 0x66, 0x53, 0xFE, 0x00, 0x00, 0x47, 0x00, 0x48, 0x30, 0xA0, 0xFF, 0xE8, 0xA7, 0x7E, 
   0xC3, 0x29, 0x0F, 0x84, 0x2D, 0x53, 0x95, 0x5A, 0x7D, 0x79, 0x5F, 0x6D, 0xAE, 0x37, 0x79, 0xE1, 
   0x37, 0x69, 0x85, 0x5F, 0x8F, 0x68, 0x4A, 0x60, 0x85, 0x41, 0x32, 0x9F, 0x7B, 0x3F, 0xBE, 0x59, 
   0xB9, 0xEF, 0x37, 0x7B, 0x65, 0x60, 0x48, 0x55, 0x66, 0x75, 0xD3, 0x77, 0x91, 0xC8, 0x37, 0x69, 
   0x5B, 0x1B, 0x40, 0x7E, 0x77, 0x57, 0xD6, 0x83, 0x75, 0xC0, 0x49, 0x97, 0x96, 0x41, 0x57, 0x7E, 
   0x3C, 0x35, 0x79, 0x60, 0x8C, 0xB8, 0x88, 0x92, 0xAE, 0x54, 0x53, 0xA9, 0x1F, 0x73, 0xAD, 0x5E, 
   0x45, 0x7F, 0x54, 0x51, 0x5A, 0x44, 0x75, 0xF5, 0x88, 0xAE, 0xFF, 0x5F, 0x5D, 0x61, 0x19, 0x2E, 
   0x47, 0x40, 0x72, 0x8C, 0x8B, 0x78, 0x95, 0x36, 0x62, 0xBB, 0x32, 0x5D, 0xFF, 0x5C, 0x63, 0x76, 
   0xA2, 0x6A, 0x59, 0xA6, 0x8C, 0xD0, 0x08, 0x41, 0xC0, 0x00, 0x47, 0x75, 0x8E, 0x91, 0xC2, 0xDA, 
   0x8C, 0xA3, 0x4F, 0x69, 0x41, 0x00, 0x47, 0x81, 0x0F, 0x64, 0x85, 0xBD, 0x8C, 0xC7, 0xC8, 0x79, 
   0xFF, 0x00, 0x45, 0xA9, 0x00, 0x5B, 0x04, 0x8D, 0x56, 0x22, 0xAB, 0x6E, 0xFF, 0x38, 0xB1, 0xFF, 
   0x36, 0x4F, 0x51, 0x84, 0x00, 0x31, 0x1D, 0x68, 0x7D, 0x00, 0xBB, 0x9E, 0xA9, 0x93, 0xE4, 0xAA, 
   0x4D, 0xCB, 0x1F, 0x5D, 0x2A, 0x0C, 0x78, 0x7A, 0x40, 0x2F, 0xF8, 0x77, 0x42, 0x7B, 0x8F, 0xB7, 
   0x85, 0x65, 0xC3, 0x9B, 0x46, 0x54, 0x74, 0x22, 0x28, 0x60, 0x07, 0x50, 0x9E, 0x72, 0x6F, 0xFF, 
   0xE1, 0x78, 0xFF, 0x57, 0xC1, 0x00, 0x0F, 0x6E, 0x00, 0x3B, 0x00, 0xF0, 0x32, 0x62, 0xFF, 0x84, 
   0xAF, 0x91, 0xB1, 0x60, 0x50, 0x2B, 0x6A, 0x8D, 0x00, 0x79, 0xCC, 0x52, 0x50, 0xA3, 0x9D, 0x49, 
   0x7A, 0x75, 0x61, 0x79, 0x07, 0x6E, 0x8A, 0x55, 0xA1, 0xD9, 0x92, 0x70, 0xB9, 0x1E, 0x38, 0x25, 
   0x06, 0x57, 0x4F, 0x78, 0x5C, 0xA5, 0x67, 0x56, 0x84, 0x28, 0x73, 0x63, 0x07, 0x09, 0x71, 0x3E, 
   0x4D, 0xA2, 0xC9, 0xFF, 0xD0, 0xA4, 0xE0, 0x9A, 0x00, 0x00, 0x64, 0x00, 0x00, 0x4C, 0x59, 0x9A, 
   0x80, 0xA6, 0xDD, 0xCC, 0x56, 0x58, 0xA3, 0x00, 0x05, 0x46, 0x3F, 0x38, 0x9E, 0x9B, 0xB5, 0xA2, 
   0x8D, 0x95, 0x50, 0x00, 0x00, 0x6A, 0x54, 0x77, 0x79, 0x54, 0x7D, 0x74, 0x7A, 0x6B, 0x80, 0x4A, 
   0x53, 0xA7, 0x30, 0x58, 0x73, 0x29, 0x52, 0x55, 0x45, 0x6A, 0x89, 0x52, 0xA3, 0x74, 0x54, 0x58, 
   0xB2, 0x71, 0x39, 0x94, 0x69, 0x65, 0x3C, 0x17, 0x65, 0x68, 0x43, 0x81, 0xA1, 0x5F, 0x62, 0x63, 
   0x3C, 0x2E, 0x84, 0x2A, 0x50, 0x99, 0x53, 0x7E, 0x3D, 0x54, 0x5C, 0x43, 0x3E, 0x51, 0xA0, 0x4F, 
   0x78, 0x9C, 0x4A, 0x3F, 0x6E, 0x3F, 0x4B, 0x62, 0x45, 0x6E, 0x63, 0x73, 0x69, 0xB3, 0x83, 0x8F, 
   0xCC, 0x41, 0x65, 0x29, 0x11, 0x29, 0x26, 0x27, 0x49, 0x81, 0x29, 0x0C, 0x51, 0x70, 0x7C, 0x5A, 
   0x83, 0xD2, 0xD5, 0x49, 0x43, 0xA8, 0x30, 0x02, 0x5B, 0x2F, 0x6E, 0x48, 0x51, 0x7A, 0x7A, 0x40, 
   0x41, 0x64, 0x30, 0x41, 0x81, 0x53, 0x85, 0x81, 0x6A, 0x5C, 0x75, 0x36, 0x07, 0x53, 0x3C, 0x47, 
   0x55, 0x48, 0x89, 0x96, 0x64, 0x7F, 0xD5, 0x47, 0x72, 0x5A, 0x1E, 0x37, 0x0E, 0x3B, 0x3B, 0x85, 
   0x69, 0x69, 0xAE, 0x41, 0x5E, 0x58, 0x30, 0x42, 0x5E, 0x4C, 0x4E, 0x76, 0x4D, 0x76, 0x7D, 0x4E, 
   0x5A, 0x9F, 0x55, 0x53, 0x6B, 0x4F, 0x42, 0x4D, 0x49, 0x59, 0x69, 0x53, 0x75, 0x6E, 0x2A, 0x53, 
   0x69, 0x30, 0x4E, 0x5E, 0x6E, 0x70, 0x76, 0x3B, 0x5E, 0x9E, 0x2F, 0x36, 0x7A, 0x30, 0x4D, 0x23, 
   0x5F, 0x5F, 0x4B, 0x5A, 0x71, 0xBF, 0x43, 0x5F, 0x9E, 0x42, 0x48, 0x3D, 0x42, 0x70, 0x53, 0x54, 
   0x59, 0x9D, 0x5F, 0x47, 0x82, 0x31, 0x4D, 0x6B, 0x31, 0x64, 0x6B, 0x64, 0x64, 0x82, 0x75, 0x5D, 
   0x76, 0x1E, 0x3A, 0x49, 0x19, 0x2A, 0x84, 0x5F, 0x54, 0x9D, 0x82, 0xA0, 0x97, 0x37, 0x8D, 0x6E, 
   0x0F, 0x14, 0x34, 0x54, 0x14, 0x73, 0x6C, 0x8D, 0xAD, 0x4A, 0x89, 0x74, 0x3E, 0x39, 0x57, 0x5F, 
   0x70, 0x8F, 0x36, 0x4D, 0x62, 0x1B, 0x30, 0x52, 0x7C, 0x5E, 0xCB, 0x60, 0x75, 0xA2, 0x00, 0x31, 
   0x00, 0x5B, 0x70, 0x70, 0x9F, 0x80, 0xFF, 0x4C, 0x62, 0x8B, 0x00, 0x37, 0x31, 0x00, 0x2B, 0x34, 
   0x34, 0x5A, 0x5F, 0xAA, 0x79, 0x91, 0x89, 0x63, 0xD8, 0x3D, 0x5C, 0xA9, 0x0D, 0x39, 0x5A, 0x34, 
   0x23, 0x00, 0x41, 0x4E, 0x4D, 0x3F, 0x8B, 0xE3, 0x69, 0xA4, 0xEE, 0x7B, 0x6F, 0x97, 0x4C, 0x2E, 
   0x55, 0x2D, 0x3D, 0x53, 0x22, 0x54, 0x6B, 0x5D, 0x55, 0x89, 0x75, 0x73, 0xBD, 0x6F, 0x4C, 0x68, 
   0x18, 0x32, 0x5E, 0x1F, 0x89, 0x99, 0x71, 0x7A, 0xA2, 0x78, 0x47, 0xA9, 0x3A, 0x38, 0x87, 0x1E, 
   0x8F, 0x66, 0x64, 0x9C, 0x96, 0xBA, 0x7F, 0xDC, 0x3B, 0x5F, 0xAE, 0x05, 0x40, 0x63, 0x71, 0x2E, 
   0x9B, 0x5B, 0x7F, 0x8A, 0x45, 0x8C, 0x74, 0x5C, 0x70, 0xAD, 0x5C, 0x30, 0x80, 0x3A, 0x4D, 0x4F, 
   0x5C, 0x81, 0xB2, 0x51, 0x60, 0xDD, 0x40, 0x45, 0xA4, 0x73, 0xA0, 0x7A, 0x44, 0x9E, 0x8A, 0x21, 
   0x13, 0xC1, 0x5F, 0x2F, 0x71, 0x76, 0x8C, 0x77, 0x43, 0x8D, 0xD8, 0x31, 0x53, 0x9E, 0x4F, 0x42, 
   0x31, 0x7E, 0x87, 0x94, 0x51, 0x6B, 0xFC, 0x3A, 0x44, 0xA5, 0x4B, 0x8D, 0x5D, 0x7E, 0x8C, 0x72, 
   0x53, 0x24, 0x90, 0x00, 0x62, 0x9D, 0x36, 0x5D, 0xC0, 0x98, 0x75, 0x8C, 0x3A, 0x54, 0x90, 0x35, 
   0x56, 0xA5, 0xAC, 0xB7, 0x4F, 0x65, 0x87, 0x88, 0x00, 0x00, 0x95, 0x20, 0x0E, 0x80, 0xB1, 0xEF, 
   0xA9, 0x8B, 0xBD, 0x67, 0x12, 0x2E, 0xAD, 0x55, 0x32, 0xC3, 0x93, 0x7D, 0x4A, 0x30, 0x68, 0x8E, 
   0x23, 0x8A, 0xDE, 0x3B, 0x55, 0x83, 0x55, 0x54, 0x3B, 0x63, 0x66, 0x8F, 0x4E, 0x5C, 0xFF, 0x55, 
   0x63, 0xC8, 0x71, 0x91, 0x1A, 0x6B, 0x6E, 0x8B, 0x26, 0x2F, 0xCB, 0x59, 0x52, 0x84, 0x87, 0x98, 
   0xA7, 0x33, 0x8D, 0xB8, 0x4A, 0x53, 0x6F, 0x8E, 0x52, 0x91, 0x49, 0x63, 0xB9, 0x31, 0x85, 0xCA, 
   0x5E, 0x52, 0x9A, 0x42, 0x47, 0x2D, 0x49, 0x86, 0x7F, 0x82, 0x92, 0xFF, 0x54, 0x53, 0xB5, 0x1B, 
   0x5D, 0x3C, 0x4F, 0x52, 0x9E, 0x94, 0x90, 0xE4, 0x60, 0x68, 0xF2, 0x25, 0x45, 0x5F, 0x4B, 0x6C, 
   0x2E, 0x4B, 0x67, 0x74, 0x1F, 0x5C, 0xBD, 0x60, 0x68, 0xBB, 0x73, 0x69, 0xB8, 0x68, 0x5F, 0xEA, 
   0x5C, 0x70, 0x98, 0x2A, 0x65, 0x30, 0x7A, 0x70, 0x8C, 0xA0, 0x6A, 0xFF, 0x32, 0x69, 0xE4, 0x24, 
   0x5D, 0x34, 0x3B, 0x4C, 0x1C, 0x49, 0x6A, 0x82, 0x94, 0xA3, 0xFF, 0x62, 0x5E, 0xFF, 0x4B, 0x57, 
   0x96, 0x7C, 0x84, 0x4C, 0x31, 0x40, 0x6C, 0x0F, 0x57, 0xB7, 0x92, 0xD3, 0x9B, 0x7B, 0x4F, 0x8F, 
   0x1A, 0x00, 0xA0, 0x41, 0x73, 0x8E, 0x91, 0xAF, 0x72, 0x48, 0x77, 0xB1, 0x26, 0x4D, 0x9C, 0x86, 
   0x6D, 0x9D, 0x69, 0x6C, 0xA8, 0x0D, 0x3A, 0x91, 0x0F, 0x4D, 0x7A, 0xA0, 0xAB, 0xB8, 0xBD, 0xB7, 
   0x84, 0x1A, 0x70, 0x8A, 0x1B, 0x23, 0xC3, 0x21, 0x3E, 0x90, 0x2B, 0x4C, 0x43, 0xB3, 0x94, 0xCF, 
   0xB9, 0xC8, 0xFF, 0x33, 0x80, 0xAD, 0x00, 0x00, 0x18, 0x1F, 0x23, 0x34, 0x8E, 0xC6, 0xA4, 0xB5, 
   0xD2, 0xFF, 0x1F, 0x40, 0xC4, 0x00, 0x00, 0x54, 0x60, 0x74, 0x69, 0xCD, 0xCB, 0xB4, 0x64, 0x6A, 
   0xB4, 0x00, 0x24, 0x85, 0x5B, 0x7E, 0x83, 0x94, 0x9F, 0x9D, 0x43, 0x63, 0x9A, 0x1F, 0x2C, 0x86, 
   0x57, 0x41, 0x40, 0x5C, 0x5D, 0x89, 0x61, 0x78, 0x9B, 0x16, 0x2F, 0x6E, 0x34, 0x3C, 0x74, 0x64, 
   0x72, 0x93, 0x39, 0x86, 0x84, 0x8E, 0x7B, 0xBE, 0x81, 0x6E, 0xAD, 0x13, 0x4A, 0x72, 0x43, 0x97, 
   0x7B, 0x4D, 0x66, 0x8A, 0x0F, 0x00, 0x6D, 0x4E, 0x46, 0x99, 0x83, 0x80, 0x75, 0x4A, 0x59, 0x5D, 
   0x27, 0x4D, 0x79, 0x5F, 0x58, 0xA7, 0xAA, 0x87, 0x84, 0xF1, 0xA3, 0x8F, 0x1E, 0x88, 0x61, 0x00, 
   0x28, 0x6C, 0x4B, 0x1A, 0x8E, 0x95, 0x54, 0x6C, 0x23, 0x5D, 0x67, 0x00, 0x89, 0x78, 0x65, 0xB7, 
   0x58, 0x7E, 0x6A, 0xBF, 0x89, 0x22, 0xD9, 0x52, 0x64, 0x02, 0x11, 0x59, 0x29, 0x3D, 0x65, 0xBF, 
   0x64, 0xA3, 0xD6, 0x3C, 0x46, 0x55, 0x30, 0x22, 0x08, 0x3C, 0x3E, 0x60, 0x3E, 0x6D, 0xCA, 0x72, 
   0x74, 0xA9, 0x61, 0x6D, 0x63, 0x2C, 0x50, 0x4F, 0x20, 0x49, 0x54, 0x38, 0x33, 0x71, 0x6D, 0x69, 
   0x8A, 0x8E, 0xC4, 0xD4, 0x1A, 0x66, 0x6B, 0x12, 0x07, 0x3A, 0x61, 0x54, 0x4F, 0x30, 0x22, 0x4B, 
   0x2C, 0x31, 0x6D, 0x8E, 0xC2, 0xED, 0x6B, 0x8E, 0xB9, 0x13, 0x09, 0x34, 0x2F, 0x40, 0x49, 0x68, 
   0x6E, 0xA4, 0x40, 0x68, 0x7C, 0x2A, 0x46, 0x70, 0x58, 0x63, 0x7B, 0x53, 0x63, 0x70, 0x3C, 0x30, 
   0x55, 0x3C, 0x43, 0x79, 0x4D, 0x7E, 0x9D, 0x48, 0x7F, 0x9D, 0x5E, 0x77, 0x8F, 0x3B, 0x25, 0x6F, 
   0x24, 0x41, 0x29, 0x52, 0x5E, 0x62, 0x58, 0x65, 0x86, 0x36, 0x5A, 0x66, 0x2B, 0x54, 0x84, 0x3E, 
   0x6B, 0x79, 0x6D, 0x55, 0x6D, 0x67, 0x66, 0x7D, 0x4E, 0x6A, 0x76, 0x19, 0x3B, 0x62, 0x2F, 0x1F, 
   0x30, 0x52, 0x65, 0x71, 0x4D, 0x94, 0xEB, 0x58, 0x71, 0x89, 0x25, 0x25, 0x09, 0x3C, 0x2B, 0x63, 
   0x4E, 0x8C, 0xB5, 0x66, 0x54, 0x7E, 0x55, 0x3D, 0x78, 0x3D, 0x70, 0x81, 0x36, 0x53, 0x4C, 0x31, 
   0x42, 0x5E, 0x4E, 0x5E, 0x87, 0x6C, 0x4E, 0x72, 0x60, 0x70, 0x7E, 0x41, 0x69, 0xA5, 0x2F, 0x4C, 
   0x43, 0x19, 0x3B, 0x39, 0x49, 0x49, 0xA9, 0x8F, 0xA6, 0xD2, 0x61, 0x99, 0x87, 0x20, 0x0E, 0x45, 
   0x1A, 0x0E, 0x4A, 0x54, 0x88, 0x73, 0x61, 0x9A, 0xA2, 0x61, 0x3E, 0xB8, 0x4E, 0x4E, 0x35, 0x2B, 
   0x5E, 0x41, 0x31, 0x74, 0xD0, 0x5F, 0x4C, 0xA8, 0x3E, 0x19, 0x23, 0x39, 0x71, 0x3B, 0x84, 0xB6, 
   0xCD, 0x66, 0x5E, 0xDE, 0x1F, 0x11, 0x47, 0x12, 0x37, 0x4A, 0x62, 0x55, 0x7C, 0x69, 0x78, 0x93, 
   0x35, 0x50, 0x6C, 0x08, 0x2E, 0x50, 0x59, 0x57, 0x6A, 0x77, 0x7A, 0xDD, 0x5F, 0x58, 0xA2, 0x19, 
   0x51, 0x00, 0x00, 0x30, 0x0E, 0x72, 0x3F, 0xD1, 0xA2, 0xA9, 0xFF, 0x4D, 0xC0, 0x8A, 0x34, 0x2F, 
   0x37, 0x21, 0x0F, 0x5F, 0x12, 0x38, 0x85, 0x75, 0x7F, 0xCC, 0xA3, 0x8C, 0xCB, 0x41, 0x42, 0x6D, 
   0x00, 0x3E, 0x1C, 0x47, 0x95, 0x46, 0x89, 0x8A, 0xC9, 0x51, 0x35, 0xFA, 0x39, 0x41, 0x82, 0x3E, 
   0x87, 0x1B, 0x51, 0x7D, 0x8F, 0x6E, 0x66, 0xFF, 0x78, 0x7B, 0x96, 0x16, 0x57, 0x55, 0x10, 0x3F, 
   0x76, 0x89, 0x45, 0x88, 0x6D, 0x64, 0xAC, 0x1D, 0x88, 0xB3, 0x3F, 0x93, 0xA1, 0x7F, 0x6F, 0x63, 
   0x52, 0x24, 0x44, 0x40, 0x4E, 0xBB, 0x68, 0x95, 0xFF, 0x56, 0x96, 0xD8, 0x5B, 0x82, 0x66, 0x70, 
   0x40, 0x18, 0x24, 0x00, 0x85, 0x0D, 0x6E, 0xD0, 0x53, 0xA9, 0x80, 0x67, 0x44, 0x42, 0x6D, 0x6B, 
   0xA0, 0x5C, 0x93, 0xFF, 0x2E, 0x48, 0xA5, 0x34, 0x3C, 0x1A, 0xA6, 0x9D, 0x80, 0x82, 0x96, 0xFF, 
   0x00, 0x1D, 0x7D, 0x2A, 0x1D, 0x00, 0x87, 0x9C, 0x6E, 0x4A, 0x8C, 0xFF, 0x50, 0x37, 0xF3, 0x50, 
   0x38, 0x27, 0x34, 0x7F, 0x2A, 0x8F, 0xDA, 0x93, 0x98, 0x70, 0xE4, 0x00, 0x00, 0x78, 0x00, 0x13, 
   0x2F, 0x9A, 0xDE, 0xC6, 0xA2, 0xA7, 0xE0, 0x34, 0x45, 0x9B, 0x2C, 0x38, 0x97, 0x6E, 0x8D, 0x4C, 
   0x2E, 0x82, 0x80, 0x08, 0x3D, 0x9A, 0x66, 0x49, 0x87, 0x69, 0x7E, 0xD8, 0x49, 0x8F, 0xA5, 0x61, 
   0x46, 0x60, 0x71, 0x62, 0xDB, 0x42, 0x8A, 0x9B, 0x3B, 0x51, 0x25, 0x2A, 0x3B, 0xB0, 0x3E, 0x70, 
   0xE6, 0xB6, 0xA5, 0xAE, 0x44, 0x87, 0x9C, 0x10, 0x3C, 0x68, 0x7B, 0x4C, 0xB3, 0x6B, 0x75, 0xCF, 
   0x3D, 0x97, 0x6E, 0x5E, 0x4C, 0x72, 0x31, 0x30, 0xA0, 0x49, 0x9D, 0x8B, 0x83, 0x77, 0xAA, 0x4B, 
   0x60, 0xBC, 0x72, 0x97, 0xC6, 0x71, 0x5C, 0x95, 0x26, 0x27, 0x55, 0x4C, 0x72, 0xBF, 0x6E, 0x8F, 
   0x8C, 0x41, 0x51, 0x59, 0x37, 0x5C, 0xA5, 0x62, 0x62, 0xB8, 0xB3, 0x64, 0x82, 0x62, 0x93, 0xC8, 
   0x00, 0x66, 0xD3, 0x30, 0x56, 0x60, 0xC2, 0x9A, 0x97, 0xD7, 0x92, 0xEA, 0x3C, 0x40, 0x81, 0x00, 
   0x2F, 0x57, 0x18, 0x7A, 0x86, 0xEA, 0xA3, 0x9B, 0x8A, 0x5E, 0xEC, 0x00, 0x40, 0xDF, 0x16, 0x62, 
   0x54, 0x90, 0x6A, 0x4D, 0xAB, 0x92, 0xED, 0x36, 0xA1, 0xE0, 0x00, 0x2C, 0x48, 0x62, 0x03, 0x14, 
   0x8C, 0x78, 0xCD, 0x0A, 0xA9, 0xFD, 0x4F, 0x77, 0xA0, 0xC0, 0x6A, 0x59, 0x2A, 0x62, 0x4E, 0x00, 
   0x55, 0x96, 0x6E, 0x3E, 0xE2, 0x71, 0x47, 0xBA, 0x72, 0x9F, 0x62, 0x66, 0xB6, 0x8E, 0x59, 0x4D, 
   0xB6, 0x68, 0x2E, 0x94, 0x0C, 0x50, 0x89, 0x00, 0x63, 0x9A, 0xC0, 0x6C, 0xB0, 0x72, 0xB6, 0x45, 
   0x16, 0x91, 0x5E, 0x54, 0x00, 0xFF, 0x4F, 0x3A, 0xE8, 0x56, 0xBF, 0x00, 0x98, 0x8D, 0x27, 0x1D, 
   0x52, 0xEE, 0x00, 0x5B, 0xFF, 0x59, 0x3E, 0x94, 0xCE, 0x4C, 0x41, 0x89, 0x9F, 0x8A, 0x08, 0xA6, 
   0xB9, 0x3E, 0x86, 0xBE, 0x71, 0x4F, 0x9D, 0x48, 0x35, 0x55, 0x2C, 0x5B, 0x43, 0x7C, 0x72, 0xB5, 
   0x75, 0x61, 0xC5, 0x23, 0x4D, 0x52, 0x0B, 0x29, 0x6E, 0x50, 0x4C, 0xA7, 0x6E, 0x92, 0x79, 0x51, 
   0x86, 0x51, 0x18, 0x00, 0x70, 0x04, 0x0E, 0x90, 0xA7, 0xFF, 0xD2, 0xDF, 0xFF, 0xDC, 0x1E, 0x1B, 
   0x81, 0x00, 0x00, 0x33, 0x4B, 0x49, 0x6F, 0x81, 0x84, 0xB9, 0x59, 0x73, 0x57, 0x0F, 0x13, 0x52, 
   0x1C, 0x1B, 0x98, 0xB1, 0xD9, 0x9F, 0x79, 0x87, 0x83, 0xA5, 0xAE, 0x89, 0x3A, 0x5F, 0x88, 0x08, 
   0x49, 0x54, 0x2E, 0x1E, 0x77, 0x51, 0x25, 0xAC, 0x52, 0x56, 0x7F, 0x5E, 0x71, 0x57, 0x3D, 0x9B, 
   0x91, 0x44, 0xB7, 0xA4, 0x6C, 0x5D, 0xA8, 0x6B, 0x0A, 0x7D, 0x46, 0x37, 0x1A, 0x16, 0x88, 0x91, 
   0x54, 0x83, 0xB8, 0x6A, 0x6A, 0x40, 0x1F, 0x2F, 0x61, 0x14, 0x4A, 0x89, 0x65, 0x73, 0x63, 0x61, 
   0x5D, 0x86, 0x4F, 0x73, 0xA2, 0x59, 0x66, 0x89, 0x31, 0x26, 0x53, 0x2B, 0x32, 0x1A, 0x43, 0x6D, 
   0x6D, 0x4B, 0x6A, 0xCC, 0x84, 0xA2, 0xDC, 0x65, 0x71, 0x66, 0x02, 0x1D, 0x34, 0x1D, 0x1B, 0x55, 
   0x4C, 0x29, 0x6E, 0x4E, 0x72, 0x5B, 0x77, 0xDA, 0xB9, 0x59, 0x60, 0xC0, 0x30, 0x00, 0x58, 0x29, 
   0x6D, 0x66, 0x46, 0x67, 0x87, 0x57, 0x35, 0x6B, 0x25, 0x47, 0x55, 0x5E, 0x81, 0x94, 0x58, 0x75, 
   0x94, 0x3C, 0x25, 0x50, 0x31, 0x43, 0x36, 0x5F, 0x7E, 0xD7, 0x5F, 0x84, 0xD6, 0x47, 0x66, 0x4A, 
   0x24, 0x15, 0x30, 0x35, 0x53, 0x63, 0x6A, 0x7C, 0x71, 0x4E, 0x76, 0x9B, 0x3E, 0x3D, 0x7A, 0x4A, 
   0x3E, 0x64, 0x50, 0x95, 0x70, 0x78, 0x73, 0xBF, 0x43, 0x4F, 0x8F, 0x25, 0x25, 0x15, 0x3B, 0x4D, 
   0x6B, 0x4C, 0x65, 0xAB, 0x4D, 0x60, 0x7A, 0x4E, 0x55, 0x85, 0x65, 0x7D, 0x7E, 0x49, 0x5A, 0x62, 
   0x2C, 0x2C, 0x95, 0x5A, 0x65, 0x7F, 0x5A, 0x7C, 0x84, 0x4E, 0x48, 0x82, 0x3D, 0x59, 0x6F, 0x26, 
   0x4E, 0x36, 0x2C, 0x54, 0x60, 0x7D, 0x7C, 0xAC, 0x82, 0x5E, 0xB3, 0x19, 0x46, 0x35, 0x00, 0x1F, 
   0x5C, 0x5F, 0x49, 0xA2, 0x8F, 0xA1, 0x82, 0x50, 0xA5, 0x71, 0x2D, 0x00, 0x80, 0x55, 0x03, 0x6F, 
   0x5A, 0x94, 0x74, 0x27, 0x8F, 0x8A, 0x4E, 0x4A, 0x67, 0x6B, 0x48, 0x4C, 0x32, 0x64, 0xA2, 0x37, 
   0x3B, 0x71, 0x54, 0x41, 0x9E, 0x4E, 0x58, 0xA7, 0x1C, 0x42, 0x07, 0x4B, 0x5A, 0x37, 0xA6, 0x9E, 
   0xFF, 0x54, 0x6E, 0xC1, 0x00, 0x10, 0x0C, 0x1E, 0x1B, 0x38, 0x71, 0x78, 0xA0, 0xA6, 0x7F, 0xB3, 
   0x59, 0x5D, 0x90, 0x00, 0x3A, 0x34, 0x0D, 0x40, 0x62, 0x76, 0x4D, 0x70, 0x83, 0x92, 0x95, 0x2D, 
   0x4E, 0xBD, 0x43, 0x42, 0x8E, 0x55, 0x53, 0x32, 0x44, 0x4A, 0x5C, 0x50, 0x80, 0xA8, 0x45, 0x97, 
   0x88, 0x2A, 0x35, 0x3B, 0x6F, 0x34, 0xC0, 0x6F, 0x79, 0xCC, 0x2A, 0x59, 0x5E, 0x24, 0x71, 0x84, 
   0x5E, 0x7D, 0x83, 0x6B, 0x5B, 0x35, 0x50, 0x39, 0x93, 0x6C, 0x84, 0xB9, 0x55, 0x84, 0x8E, 0x54, 
   0x34, 0xB0, 0x4E, 0x56, 0x8D, 0x21, 0x79, 0x49, 0x5B, 0x58, 0xC0, 0x83, 0x7A, 0xAF, 0x45, 0x6E, 
   0x42, 0x23, 0x3A, 0x7B, 0x73, 0x41, 0xB5, 0x68, 0x8C, 0x83, 0x2F, 0x9E, 0x89, 0x5D, 0x47, 0x9C, 
   0x69, 0x24, 0x71, 0x57, 0x59, 0x7A, 0x56, 0x9F, 0xEF, 0x39, 0x77, 0xFF, 0x5A, 0x54, 0x5C, 0x64, 
   0x75, 0x3B, 0x2F, 0x90, 0x9B, 0x0D, 0x12, 0xBD, 0x43, 0x1F, 0x5C, 0x9A, 0xCC, 0x70, 0x6D, 0x8E, 
   0xFF, 0x23, 0x2D, 0xBC, 0x3F, 0x70, 0x2C, 0x89, 0x8A, 0xA2, 0x54, 0x22, 0xC5, 0x03, 0x44, 0xA2, 
   0x4D, 0x89, 0x8E, 0x65, 0x57, 0x3D, 0x44, 0x51, 0x5B, 0x5B, 0x74, 0xE6, 0x60, 0x75, 0xCF, 0x4F, 
   0x6A, 0x5B, 0x27, 0x66, 0x7C, 0x5C, 0x68, 0xC0, 0x8F, 0xCE, 0x87, 0x65, 0x86, 0x65, 0x00, 0x00, 
   0x89, 0x20, 0x2A, 0x92, 0xBC, 0xE4, 0xC1, 0x95, 0xB2, 0xC6, 0x0F, 0x32, 0x91, 0x2F, 0x3B, 0x61, 
   0x41, 0x4D, 0x24, 0x53, 0x54, 0x96, 0x3E, 0x83, 0xFF, 0x3B, 0x78, 0x9E, 0x70, 0x5C, 0x08, 0x8E, 
   0x89, 0xB8, 0x43, 0x50, 0xC4, 0x53, 0x3F, 0x74, 0x47, 0x96, 0x96, 0x36, 0x75, 0x92, 0x54, 0x64, 
   0xAB, 0x61, 0x70, 0xB3, 0x8E, 0x77, 0xA2, 0x37, 0x82, 0xA7, 0x1B, 0x64, 0x84, 0x82, 0x58, 0x68, 
   0x65, 0x6F, 0xCB, 0x26, 0xA2, 0xDC, 0x5E, 0x3B, 0x85, 0x32, 0x31, 0x1E, 0x4B, 0xA5, 0x93, 0xB2, 
   0xB1, 0xFF, 0x5B, 0x6A, 0xD0, 0x1B, 0x33, 0x26, 0x5E, 0x4F, 0x5D, 0x5E, 0x72, 0x8E, 0x31, 0x68, 
   0xE0, 0x49, 0x7F, 0xD4, 0x72, 0x5D, 0x55, 0x62, 0x47, 0x60, 0x50, 0x76, 0xB7, 0x2E, 0x78, 0x82, 
   0x52, 0x5C, 0x97, 0x88, 0x9B, 0xFF, 0x88, 0x7D, 0xCF, 0x5D, 0x64, 0x00, 0x3D, 0x4C, 0x45, 0x1E, 
   0x5E, 0xCC, 0x4C, 0x97, 0xED, 0x87, 0x74, 0xF0, 0x6C, 0x40, 0x5D, 0x33, 0x7F, 0x10, 0x56, 0x3C, 
   0x96, 0x6E, 0x65, 0xDE, 0x7E, 0xD6, 0xDE, 0x81, 0x67, 0x90, 0x06, 0x00, 0x75, 0x00, 0x49, 0x63, 
   0x81, 0xBF, 0x76, 0xA6, 0x88, 0xDE, 0x4B, 0x5F, 0xC1, 0x43, 0x57, 0x4D, 0x74, 0x7E, 0x52, 0x12, 
   0x4A, 0xB6, 0x00, 0x24, 0xB3, 0xC2, 0xA9, 0xA3, 0xB7, 0xC7, 0xB1, 0x1A, 0x58, 0x5F, 0x00, 0x49, 
   0x86, 0x4B, 0x2D, 0xA2, 0x7C, 0x69, 0x81, 0x8F, 0x8F, 0xBA, 0x55, 0xC8, 0xA8, 0x35, 0x75, 0x5C, 
   0x1E, 0x00, 0x4C, 0x28, 0x34, 0xA4, 0xB9, 0xC6, 0xFF, 0xE0, 0xB0, 0xAC, 0x0E, 0x3B, 0x14, 0x00, 
   0x10, 0x26, 0x51, 0x5B, 0xB8, 0xBB, 0x9B, 0xFF, 0x6C, 0x53, 0x97, 0x1B, 0x38, 0x3A, 0x4C, 0xB6, 
   0xB1, 0x83, 0xBA, 0xCC, 0x31, 0x43, 0x74, 0x00, 0x11, 0x5A, 0x59, 0x2D, 0x70, 0x82, 0x91, 0x88, 
   0x5F, 0xB4, 0xB6, 0x3B, 0x62, 0x93, 0x1F, 0x0A, 0x5E, 0x74, 0x76, 0xA1, 0x63, 0xA3, 0x7E, 0x29, 
   0x13, 0x72, 0x2E, 0x14, 0x6E, 0x1A, 0x59, 0x72, 0x79, 0xE1, 0xBA, 0xC4, 0xEB, 0xE1, 0x5A, 0x4F, 
   0x7D, 0x05, 0x00, 0x6C, 0x24, 0x38, 0x62, 0x5C, 0x6B, 0x56, 0x24, 0x2D, 0x7F, 0x26, 0x36, 0x9D, 
   0x78, 0x7F, 0x72, 0x58, 0x93, 0xB7, 0x2C, 0x6C, 0x81, 0x10, 0x82, 0x81, 0x8E, 0x58, 0x81, 0x9F, 
   0x61, 0x7C, 0x25, 0x65, 0x5B, 0x00, 0x38, 0x84, 0x75, 0x56, 0x97, 0x82, 0x63, 0x81, 0x4F, 0x65, 
   0x8C, 0x37, 0x8E, 0x75, 0x3D, 0x88, 0x54, 0x72, 0x47, 0xBB, 0x82, 0x45, 0xFC, 0x41, 0x6C, 0x0E, 
   0x16, 0x4F, 0x01, 0x3D, 0x6C, 0xBF, 0x65, 0x98, 0xC1, 0x55, 0x4C, 0x7B, 0x43, 0x34, 0x40, 0x37, 
   0x72, 0x57, 0x42, 0x60, 0xB8, 0x3D, 0x44, 0xA7, 0x5F, 0x5B, 0x4F, 0x4D, 0x72, 0x59, 0x20, 0x45, 
   0x66, 0x39, 0x40, 0x7B, 0x91, 0x7A, 0xB6, 0x85, 0xB8, 0xC0, 0x21, 0x32, 0x5B, 0x30, 0x13, 0x4B, 
   0x4B, 0x50, 0x66, 0x19, 0x41, 0x34, 0x42, 0x49, 0x5B, 0x82, 0xBC, 0xE3, 0x54, 0x93, 0xD8, 0x25, 
   0x00, 0x2A, 0x3B, 0x28, 0x43, 0x52, 0x68, 0x71, 0x52, 0x5F, 0x7E, 0x2A, 0x6B, 0x90, 0x4C, 0x5F, 
   0x73, 0x53, 0x64, 0x68, 0x48, 0x25, 0x7F, 0x42, 0x3D, 0x6F, 0x48, 0x7E, 0x74, 0x4D, 0x79, 0xA1, 
   0x58, 0x73, 0x73, 0x25, 0x4F, 0x40, 0x2B, 0x3C, 0x7E, 0x55, 0x53, 0x7A, 0x62, 0x54, 0x6A, 0x50, 
   0x55, 0x99, 0x43, 0x5C, 0xAB, 0x2C, 0x78, 0x6B, 0x65, 0x51, 0x59, 0x65, 0x67, 0x80, 0x37, 0x60, 
   0x86, 0x1A, 0x3D, 0x57, 0x31, 0x3D, 0x40, 0x49, 0x55, 0x69, 0x61, 0x8F, 0xDC, 0x5B, 0x78, 0x9E, 
   0x3E, 0x2D, 0x20, 0x37, 0x4E, 0xAC, 0x42, 0x75, 0x8F, 0x4E, 0x59, 0x44, 0x61, 0x43, 0x83, 0x56, 
   0x60, 0x83, 0x38, 0x7D, 0x5B, 0x59, 0x6A, 0x7E, 0x31, 0x3B, 0x86, 0x2B, 0x30, 0x5F, 0x43, 0x44, 
   0x88, 0x61, 0xA1, 0x94, 0x66, 0xA0, 0xA4, 0x21, 0x0A, 0x4E, 0x38, 0x0A, 0x3C, 0x67, 0x9A, 0xAF, 
   0x79, 0xAD, 0xC1, 0x55, 0x3A, 0x74, 0x1A, 0x54, 0x22, 0x25, 0x53, 0x57, 0x54, 0x64, 0x9F, 0x66, 
   0x52, 0xFA, 0x4A, 0x47, 0x47, 0x28, 0x5A, 0x02, 0x5B, 0x93, 0xC5, 0x8E, 0x6F, 0xE8, 0x1B, 0x12, 
   0x2B, 0x1F, 0x4A, 0x4B, 0x53, 0x72, 0x9B, 0x43, 0x50, 0x7F, 0x5B, 0x50, 0x63, 0x6D, 0x4C, 0x7A, 
   0x55, 0x75, 0x80, 0x41, 0x7B, 0x96, 0x18, 0x36, 0x57, 0x19, 0x58, 0x19, 0x4F, 0x48, 0x90, 0xA1, 
   0x88, 0xFF, 0x79, 0x7C, 0xDB, 0x26, 0x41, 0x0D, 0x00, 0x18, 0x00, 0x49, 0x21, 0x60, 0x4D, 0x86, 
   0xC3, 0x88, 0xD3, 0xFF, 0x81, 0x60, 0x72, 0x1E, 0x00, 0x52, 0x00, 0x4D, 0x7E, 0x64, 0x8E, 0x74, 
   0x94, 0x7D, 0x92, 0x55, 0x38, 0xCF, 0x21, 0x3E, 0x24, 0x3D, 0x88, 0x1B, 0x76, 0x77, 0xE1, 0x59, 
   0x4D, 0xFF, 0x2A, 0x2A, 0x6A, 0x35, 0x48, 0x45, 0x31, 0x78, 0x6D, 0x73, 0x6F, 0xA3, 0x90, 0x70, 
   0xC6, 0x2F, 0x7B, 0x81, 0x23, 0x63, 0x69, 0x95, 0x40, 0x6E, 0x68, 0x46, 0x77, 0x24, 0x70, 0x97, 
   0x68, 0x93, 0xD2, 0x6D, 0x70, 0x9F, 0x45, 0x41, 0x71, 0x5A, 0x51, 0x8A, 0x4D, 0x5E, 0xD5, 0x19, 
   0x93, 0xF5, 0x59, 0x81, 0x68, 0x71, 0x41, 0x21, 0x54, 0x35, 0x7D, 0x3D, 0x69, 0xEC, 0x3E, 0x7C, 
   0xA2, 0x4B, 0x66, 0x41, 0x8F, 0x8C, 0x91, 0x5A, 0x6D, 0xCB, 0x00, 0x20, 0xB3, 0x36, 0x27, 0x4B, 
   0x76, 0x8A, 0x51, 0x72, 0xB8, 0xF7, 0x3E, 0x18, 0xBC, 0x5A, 0x23, 0x00, 0x43, 0xA1, 0x42, 0x43, 
   0x6F, 0xFB, 0x65, 0x3B, 0xEB, 0x2D, 0x37, 0x59, 0x3F, 0x7E, 0x35, 0xA1, 0xCE, 0x87, 0x8D, 0x80, 
   0xDF, 0x00, 0x00, 0x8F, 0x00, 0x12, 0x4F, 0x9D, 0xF9, 0xAA, 0x7C, 0xA4, 0xA0, 0x00, 0x03, 0x64, 
   0x54, 0x25, 0x7D, 0x89, 0x9F, 0xC3, 0x34, 0x95, 0xBE, 0x51, 0x55, 0x80, 0x6E, 0x54, 0xB8, 0x53, 
   0x6B, 0x8F, 0x58, 0x66, 0x61, 0x42, 0x4A, 0xA6, 0x43, 0x6E, 0xBE, 0x82, 0x97, 0x80, 0x59, 0x69, 
   0x53, 0x26, 0x2A, 0xAA, 0x54, 0x76, 0xDA, 0x82, 0xA5, 0xC3, 0x3E, 0x7C, 0x72, 0x3E, 0x53, 0x73, 
   0x7C, 0x52, 0xD1, 0x60, 0x69, 0xE4, 0x27, 0x80, 0x82, 0x60, 0x42, 0x8C, 0x66, 0x70, 0xBF, 0x66, 
   0xB4, 0xA7, 0x49, 0x53, 0x99, 0x48, 0x4B, 0x7A, 0x53, 0x83, 0x5F, 0x48, 0x3F, 0xA6, 0x3E, 0x5C, 
   0xD0, 0x67, 0x74, 0xDB, 0x90, 0x6A, 0x94, 0x66, 0x76, 0x59, 0x00, 0x5A, 0x71, 0x2A, 0x67, 0x8C, 
   0xC6, 0x95, 0xF0, 0xAF, 0x8F, 0xE4, 0x23, 0x59, 0xA0, 0x00, 0x2B, 0x35, 0x45, 0x70, 0x3C, 0xF6, 
   0xBA, 0xC9, 0x5F, 0x5D, 0xFF, 0x00, 0x11, 0xC0, 0x35, 0x7E, 0x1A, 0x9F, 0x64, 0x02, 0x8A, 0x77, 
   0xC8, 0x3F, 0xBA, 0xFF, 0x32, 0x4B, 0x81, 0x59, 0x1C, 0x61, 0x91, 0x95, 0xAA, 0x0E, 0x81, 0xBA, 
   0x0F, 0x65, 0x8B, 0xC1, 0x86, 0x46, 0x8F, 0x69, 0x86, 0x0A, 0x56, 0xC5, 0x26, 0x34, 0xB4, 0x82, 
   0x63, 0x6A, 0x61, 0x8D, 0x7D, 0x4A, 0x8D, 0xD3, 0x86, 0x68, 0xC2, 0x56, 0x43, 0xA2, 0x00, 0x2C, 
   0x67, 0x03, 0x5C, 0x7D, 0xB2, 0x77, 0xC8, 0xD5, 0xC8, 0x9B, 0x2C, 0x92, 0x56, 0x00, 0x00, 0xB5, 
   0x2A, 0x18, 0x92, 0x8F, 0xBF, 0x21, 0xA1, 0xA5, 0x7A, 0x66, 0x54, 0xFF, 0x08, 0x4B, 0xCD, 0x35, 
   0x55, 0x00, 0x9C, 0x51, 0x19, 0x63, 0x81, 0xCD, 0x02, 0x82, 0xF8, 0x52, 0x7B, 0xB7, 0xA2, 0x63, 
   0x48, 0x51, 0x78, 0x78, 0x21, 0x81, 0x89, 0x47, 0x46, 0x8E, 0x59, 0x35, 0xA4, 0x53, 0x6F, 0x76, 
   0x2C, 0x81, 0x60, 0x49, 0x6B, 0xCD, 0x99, 0xA2, 0xAF, 0x43, 0x66, 0x4D, 0x35, 0x1F, 0x84, 0x40, 
   0x1A, 0x8F, 0x47, 0x89, 0x4C, 0x8C, 0xC4, 0x97, 0x48, 0x52, 0x9F, 0x00, 0x13, 0x6C, 0xB0, 0xA0, 
   0xCC, 0xC5, 0xD1, 0xB7, 0x20, 0x1A, 0x47, 0x00, 0x00, 0x3F, 0x23, 0x21, 0x6E, 0x8D, 0x81, 0x99, 
   0x5C, 0x98, 0x9B, 0x4C, 0x84, 0x7F, 0x2C, 0x61, 0x73, 0x0B, 0x61, 0x6E, 0x64, 0x56, 0x64, 0x89, 
   0x57, 0x93, 0x61, 0x64, 0x94, 0x49, 0x97, 0x5D, 0x21, 0x5D, 0x81, 0x54, 0x3F, 0xD1, 0x7C, 0x2D, 
   0x6A, 0x25, 0x52, 0x3C, 0x2B, 0x78, 0x82, 0x4F, 0xD4, 0xD3, 0x7E, 0x8D, 0xAF, 0x7D, 0x07, 0x55, 
   0x41, 0x43, 0x2C, 0x00, 0x88, 0x82, 0x5B, 0x5B, 0xD9, 0x8F, 0x70, 0x77, 0x38, 0x68, 0x69, 0x36, 
   0x3D, 0x78, 0x3C, 0x31, 0x4A, 0x4D, 0x5B, 0x7E, 0x5F, 0x8A, 0xA1, 0x37, 0x6D, 0x90, 0x2C, 0x3F, 
   0x50, 0x4F, 0x72, 0x50, 0x40, 0x3F, 0x5E, 0x52, 0x3C, 0xB0, 0xA7, 0xB4, 0xF3, 0x4F, 0x8B, 0x55, 
   0x0E, 0x3C, 0x0C, 0x3F, 0x22, 0x4F, 0x3B, 0x0C, 0x52, 0x42, 0x70, 0x6E, 0x77, 0xC1, 0xDD, 0x60, 
   0x4E, 0xAF, 0x2B, 0x00, 0x2B, 0x30, 0x5E, 0x5D, 0x52, 0x93, 0xBE, 0x57, 0x4F, 0x63, 0x13, 0x48, 
   0x4D, 0x58, 0x6A, 0xB4, 0x5F, 0x75, 0xA8, 0x42, 0x3C, 0x4B, 0x36, 0x2D, 0x34, 0x48, 0x79, 0x92, 
   0x6B, 0xB9, 0xC8, 0x4E, 0x67, 0xB1, 0x27, 0x15, 0x54, 0x39, 0x37, 0x48, 0x8A, 0x7D, 0x88, 0x67, 
   0x89, 0xAB, 0x1B, 0x3E, 0x9A, 0x25, 0x2E, 0x51, 0x3D, 0x8B, 0x47, 0x56, 0x81, 0xCA, 0x73, 0x63, 
   0xB8, 0x39, 0x3F, 0x2D, 0x43, 0x3E, 0x5E, 0x43, 0x66, 0x80, 0x3F, 0x3A, 0x54, 0x6D, 0x79, 0xB6, 
   0x66, 0x9A, 0xC0, 0x37, 0x43, 0x46, 0x1F, 0x19, 0x44, 0x20, 0x47, 0x84, 0x62, 0x60, 0x7B, 0x9C, 
   0x83, 0x97, 0x66, 0x71, 0x90, 0x03, 0x30, 0x1E, 0x00, 0x2B, 0x53, 0x6D, 0x50, 0xE5, 0xB3, 0xB2, 
   0xA2, 0x45, 0x9A, 0x61, 0x0A, 0x0A, 0x6B, 0x37, 0x00, 0x8D, 0x4F, 0xA6, 0x66, 0x45, 0x9C, 0x82, 
   0x5C, 0x46, 0xAF, 0x6C, 0x49, 0x70, 0x31, 0x65, 0x52, 0x03, 0x5E, 0x80, 0x59, 0x47, 0xA3, 0x78, 
   0x59, 0x75, 0x3A, 0x54, 0x4D, 0x57, 0x7D, 0x5A, 0x83, 0x87, 0xCD, 0x31, 0x50, 0xD0, 0x02, 0x1B, 
   0x16, 0x31, 0x16, 0x05, 0x7D, 0xA1, 0xC3, 0x89, 0x91, 0xDC, 0x33, 0x1E, 0x59, 0x10, 0x1E, 0x30, 
   0x55, 0x80, 0x8C, 0x8E, 0x71, 0xAA, 0x4D, 0x6A, 0x7C, 0x00, 0x42, 0x43, 0x26, 0x3C, 0x8A, 0x94, 
   0x7C, 0xDC, 0x8F, 0x87, 0x85, 0x26, 0x41, 0x75, 0x00, 0x34, 0x3A, 0x21, 0x1F, 0x10, 0x80, 0x4B, 
   0xBC, 0xA4, 0xB6, 0xFF, 0x4E, 0x9C, 0xB0, 0x0D, 0x4B, 0x30, 0x46, 0x49, 0x51, 0x65, 0x59, 0xA9, 
   0x5B, 0x60, 0xBB, 0x6B, 0x71, 0x93, 0x4E, 0x87, 0x64, 0x47, 0x4D, 0x5E, 0x52, 0x52, 0x9F, 0x4C, 
   0x7F, 0x90, 0x45, 0x51, 0xAD, 0x45, 0x24, 0x89, 0x3B, 0x5F, 0x39, 0x3E, 0x68, 0x7F, 0x74, 0x76, 
   0xE1, 0x96, 0x93, 0xA8, 0x2E, 0x7A, 0x5D, 0x05, 0x1D, 0x40, 0x72, 0x23, 0x7C, 0x78, 0x87, 0xBF, 
   0x28, 0xB6, 0xDC, 0x44, 0x7B, 0xAB, 0x71, 0x22, 0x00, 0x53, 0x16, 0x4C, 0x1F, 0x7E, 0xFF, 0x30, 
   0x70, 0xF6, 0x60, 0x60, 0x75, 0xA0, 0xAA, 0x4B, 0x5F, 0x8B, 0x9F, 0x00, 0x00, 0xBB, 0x32, 0x46, 
   0x32, 0xB7, 0xDB, 0x6C, 0x72, 0x69, 0xE5, 0x03, 0x1D, 0xA1, 0x3B, 0x65, 0x50, 0x70, 0x6C, 0x5C, 
   0x44, 0x62, 0xC5, 0x5B, 0x58, 0xEE, 0x71, 0x9C, 0xA6, 0x26, 0x57, 0x30, 0x3C, 0x34, 0x3B, 0x59, 
   0x72, 0xC6, 0x4E, 0x5C, 0xDE, 0x4E, 0x57, 0x49, 0x22, 0x3C, 0x4D, 0x62, 0x83, 0xC6, 0xAC, 0xF5, 
   0xB0, 0x6F, 0x7F, 0x9C, 0x00, 0x00, 0x77, 0x00, 0x0F, 0x2E, 0x92, 0xAD, 0x71, 0x9B, 0xA0, 0xE5, 
   0x30, 0x61, 0xFF, 0x3B, 0x60, 0x72, 0x8A, 0x6B, 0x00, 0x4A, 0x65, 0xB5, 0x27, 0x59, 0xFF, 0x3E, 
   0x43, 0x78, 0x3B, 0x66, 0x66, 0x60, 0x7E, 0x95, 0x94, 0x5D, 0x9C, 0x66, 0x6D, 0xA7, 0x42, 0x6D, 
   0x84, 0x4C, 0x57, 0x6E, 0x1F, 0x58, 0xB4, 0x65, 0x70, 0xA5, 0xAA, 0x82, 0x84, 0x33, 0x7B, 0xAC, 
   0x1C, 0x52, 0x80, 0x7D, 0x2A, 0x77, 0x5C, 0x70, 0xCF, 0x61, 0xD6, 0xFF, 0x64, 0x3B, 0xAB, 0x1F, 
   0x00, 0x12, 0x53, 0x9B, 0x5C, 0x86, 0x91, 0xC6, 0x37, 0x53, 0xC9, 0x33, 0x7F, 0xA1, 0x7E, 0x46, 
   0x95, 0x6E, 0x47, 0x7F, 0x56, 0x8D, 0xCE, 0x11, 0x7D, 0x94, 0x40, 0x50, 0x45, 0x9D, 0x8F, 0xEB, 
   0x75, 0x88, 0xD9, 0x50, 0x64, 0x4F, 0x10, 0x2B, 0x61, 0x22, 0x7C, 0xE5, 0xA1, 0xB0, 0xC4, 0x9C, 
   0x6A, 0xA6, 0x43, 0x3A, 0x9C, 0x24, 0x55, 0x6C, 0x00, 0x3B, 0x77, 0x70, 0x87, 0xB6, 0x9A, 0xDD, 
   0xA4, 0x49, 0x57, 0x6B, 0x25, 0x00, 0xAF, 0x31, 0x50, 0x9F, 0x78, 0xA9, 0x8E, 0xB6, 0xBC, 0xCC, 
   0x26, 0x59, 0xAC, 0x00, 0x24, 0x4A, 0x86, 0x7E, 0x79, 0x83, 0x62, 0xDB, 0x0D, 0x4D, 0x92, 0x6F, 
   0x88, 0x6F, 0xDF, 0xCC, 0x7F, 0x1F, 0x79, 0x85, 0x00, 0x00, 0xAC, 0x5B, 0x3B, 0x95, 0x6F, 0x5B, 
   0x99, 0x6C, 0x7B, 0x69, 0x56, 0xBB, 0x6E, 0x4A, 0x75, 0x86, 0x6B, 0x07, 0x92, 0x21, 0x63, 0x92, 
   0x66, 0xBB, 0x91, 0xA4, 0x77, 0x6E, 0x25, 0x4D, 0x6A, 0x00, 0x63, 0x89, 0x7C, 0x7A, 0xF7, 0xDE, 
   0x75, 0xD7, 0x31, 0x4D, 0x34, 0x00, 0x60, 0x18, 0x49, 0xA9, 0xC5, 0x83, 0x9B, 0xF9, 0x51, 0x2C, 
   0x7F, 0x3A, 0x19, 0x21, 0x61, 0x6A, 0x93, 0x60, 0x94, 0xBC, 0x3C, 0x93, 0x83, 0x19, 0x30, 0x71, 
   0x48, 0x1A, 0x7C, 0x73, 0xB0, 0x7D, 0x7F, 0xC1, 0xA4, 0x54, 0x35, 0x97, 0x00, 0x00, 0x63, 0x30, 
   0x78, 0x68, 0x8C, 0xC9, 0xBE, 0x69, 0x6C, 0x85, 0x29, 0x02, 0x67, 0x0C, 0x02, 0x67, 0x59, 0x78, 
   0xA7, 0xBA, 0xFC, 0x90, 0x51, 0x8C, 0x71, 0x00, 0x00, 0x7B, 0x30, 0x3A, 0x76, 0x5F, 0x5F, 0x71, 
   0x4F, 0x5E, 0xA6, 0x56, 0xA9, 0x85, 0x48, 0x50, 0x61, 0x48, 0x34, 0x50, 0x0B, 0x6B, 0x7A, 0x2C, 
   0x5E, 0x7C, 0x9B, 0x83, 0x6C, 0xA2, 0x95, 0x9B, 0x2E, 0x7C, 0x97, 0x31, 0x50, 0x6A, 0x53, 0x1B, 
   0x81, 0x59, 0x34, 0x77, 0x47, 0x8D, 0xB5, 0x3C, 0xB2, 0x76, 0x49, 0x84, 0x3D, 0x73, 0x6A, 0xC0, 
   0x73, 0x23, 0xD6, 0x48, 0x3F, 0x2F, 0x35, 0x78, 0x44, 0x44, 0x93, 0xB0, 0x6B, 0x74, 0xCC, 0x26, 
   0x16, 0x62, 0x41, 0x2C, 0x1B, 0x47, 0x77, 0x66, 0x26, 0x6D, 0xA8, 0x55, 0x4B, 0xA3, 0x78, 0x83, 
   0x91, 0x44, 0x3E, 0x40, 0x11, 0x22, 0x57, 0x50, 0x3C, 0x70, 0x63, 0xAB, 0xC1, 0x79, 0xE3, 0xB9, 
   0x49, 0x46, 0x66, 0x19, 0x1F, 0x47, 0x3F, 0x5A, 0x5C, 0x1E, 0x11, 0x47, 0x54, 0x25, 0x51, 0x7D, 
   0xB1, 0xB7, 0x6C, 0x79, 0xC4, 0x2B, 0x3E, 0x89, 0x35, 0x4E, 0x42, 0x52, 0x70, 0x52, 0x4C, 0x4E, 
   0xA9, 0x3C, 0x4E, 0x87, 0x4D, 0x6A, 0x7A, 0x6A, 0x43, 0x72, 0x36, 0x38, 0x50, 0x36, 0x5B, 0x43, 
   0x49, 0x78, 0xBE, 0x56, 0x46, 0xC6, 0x5C, 0x5C, 0x6A, 0x45, 0x3E, 0x7F, 0x4B, 0x66, 0x94, 0x5B, 
   0x66, 0x3D, 0x49, 0x49, 0x4A, 0x31, 0x33, 0x9E, 0x20, 0x69, 0xCF, 0x4B, 0x87, 0x7F, 0x92, 0x71, 
   0x6C, 0x70, 0x6B, 0xB4, 0x2A, 0x63, 0x9C, 0x22, 0x1D, 0x50, 0x5A, 0x50, 0x4E, 0x4F, 0x73, 0x8C, 
   0x4F, 0x73, 0xA9, 0x60, 0x66, 0x6F, 0x37, 0x2C, 0x2A, 0x2C, 0x38, 0x7B, 0x5B, 0x94, 0xB0, 0x6D, 
   0x7D, 0x8E, 0x55, 0x37, 0x5F, 0x10, 0x20, 0x70, 0x28, 0x50, 0x60, 0x85, 0xAD, 0x90, 0x74, 0x95, 
   0xBE, 0x45, 0x04, 0x73, 0x28, 0x00, 0x39, 0x4A, 0xA1, 0x95, 0x56, 0xA8, 0xD3, 0x56, 0x40, 0x5F, 
   0x4A, 0x44, 0x25, 0x38, 0x65, 0x93, 0x4F, 0x53, 0xBC, 0x65, 0x47, 0x88, 0x15, 0x42, 0x63, 0x2D, 
   0x54, 0x0D, 0x73, 0x7D, 0x93, 0x95, 0x81, 0xFF, 0x2C, 0x3A, 0x65, 0x00, 0x1C, 0x0C, 0x47, 0x60, 
   0x8E, 0x60, 0x61, 0x94, 0x5B, 0x51, 0x3A, 0x66, 0x74, 0x8B, 0x43, 0x64, 0xAA, 0x1B, 0x4D, 0x7D, 
   0x43, 0x2B, 0x66, 0x61, 0x70, 0x6C, 0x56, 0x71, 0xA1, 0x7C, 0x5A, 0xAC, 0x41, 0x69, 0x71, 0x07, 
   0x41, 0x37, 0x3C, 0x41, 0x93, 0x5A, 0x7A, 0xA1, 0x50, 0x47, 0x80, 0x40, 0x5E, 0x8A, 0x62, 0x3D, 
   0x51, 0x35, 0x08, 0x49, 0x30, 0xA7, 0xE1, 0x65, 0xE2, 0xBB, 0x6B, 0x51, 0x44, 0x38, 0x09, 0x98, 
   0x3C, 0x58, 0x93, 0x3C, 0x92, 0x50, 0x69, 0x6F, 0xCD, 0x4C, 0x45, 0xCB, 0x2E, 0x32, 0x0D, 0x39, 
   0x5B, 0x58, 0x50, 0x78, 0xCD, 0x35, 0x62, 0x96, 0x41, 0x14, 0x95, 0x59, 0x72, 0x77, 0x3E, 0xA2, 
   0x5B, 0x73, 0x7B, 0xA6, 0x78, 0x4D, 0x9D, 0x22, 0x58, 0x7C, 0x16, 0x74, 0x9A, 0x88, 0x6F, 0xB1, 
   0x66, 0x6F, 0xA4, 0x26, 0x63, 0x5E, 0x47, 0x5C, 0x63, 0x47, 0x5B, 0x9E, 0x3C, 0x39, 0x8A, 0x5F, 
   0x46, 0x7B, 0x6B, 0x87, 0xAF, 0x54, 0x88, 0xF9, 0x2C, 0x5F, 0x94, 0x43, 0x68, 0x03, 0x7C, 0x4A, 
   0x74, 0x4E, 0x33, 0xDC, 0x25, 0x7D, 0x99, 0x47, 0x62, 0x7C, 0x65, 0x5C, 0x62, 0x4F, 0x78, 0xAE, 
   0x5A, 0x3F, 0xE7, 0x43, 0x40, 0x7A, 0x43, 0x9C, 0x5C, 0x65, 0xAC, 0xDE, 0x48, 0x22, 0xB3, 0x42, 
   0x33, 0x1D, 0x47, 0x9A, 0x47, 0x48, 0x5C, 0xFA, 0x71, 0x4B, 0xC2, 0x3E, 0x2F, 0x76, 0x44, 0x76, 
   0x8E, 0x97, 0xFF, 0x87, 0x4A, 0x54, 0x69, 0x00, 0x00, 0x21, 0x08, 0x2C, 0x43, 0xD4, 0xFF, 0xFF, 
   0x87, 0xC4, 0xFD, 0x31, 0x1C, 0x5B, 0x56, 0x4D, 0x79, 0x54, 0x69, 0x72, 0x31, 0x53, 0x6F, 0x1B, 
   0x7C, 0xD1, 0x46, 0x55, 0x7E, 0x8D, 0x73, 0x84, 0x71, 0xA0, 0xB2, 0x4E, 0x1C, 0xA7, 0x48, 0x4A, 
   0xAC, 0x53, 0xB2, 0x7D, 0x4C, 0x63, 0x5B, 0x3C, 0x47, 0x80, 0x49, 0x6A, 0xE4, 0x8E, 0x98, 0xAD, 
   0x39, 0x4E, 0x5E, 0x2F, 0x6B, 0x77, 0xC3, 0x8D, 0xFF, 0x5B, 0x6F, 0xE2, 0x03, 0x5C, 0x64, 0x3F, 
   0x3E, 0x4F, 0x62, 0x51, 0x45, 0x2B, 0x91, 0xAA, 0x55, 0x87, 0xFF, 0x73, 0x4E, 0xA7, 0x7A, 0x6A, 
   0x44, 0x5C, 0x5F, 0x9A, 0x12, 0x4F, 0x96, 0x2F, 0x79, 0xAE, 0xB4, 0x9B, 0xFC, 0x8B, 0x77, 0x98, 
   0x38, 0x52, 0x39, 0x00, 0x19, 0x4A, 0x4F, 0x76, 0x9F, 0xC9, 0xC7, 0xEF, 0x5C, 0x76, 0xFF, 0x00, 
   0x35, 0x9D, 0x55, 0x62, 0x00, 0xB1, 0x7A, 0x31, 0x65, 0x5F, 0xFF, 0x0E, 0x97, 0xFF, 0x52, 0x6D, 
   0x47, 0x75, 0x2E, 0x27, 0x53, 0x61, 0x83, 0x20, 0x69, 0xB9, 0x50, 0x70, 0xB5, 0xA7, 0x7C, 0x8B, 
   0x9E, 0x86, 0x5B, 0x00, 0x51, 0x9E, 0x00, 0x28, 0xA5, 0x89, 0x63, 0x57, 0xE3, 0xA5, 0x9C, 0x65, 
   0x9F, 0xDA, 0x2D, 0x5E, 0xB6, 0x7E, 0x4F, 0x5E, 0x00, 0x42, 0x4C, 0x00, 0x2D, 0xB4, 0xB5, 0x80, 
   0xB4, 0xBD, 0xD1, 0x56, 0x2C, 0x79, 0x3E, 0x00, 0x00, 0x8F, 0x4A, 0x2F, 0xC9, 0xE6, 0xB5, 0x80, 
   0xAC, 0xC2, 0x7A, 0x00, 0x4E, 0xBD, 0x00, 0x29, 0x7E, 0x4C, 0x68, 0x29, 0xB0, 0x7B, 0xA4, 0x83, 
   0x83, 0xEF, 0x2B, 0x72, 0xD0, 0x3F, 0x9E, 0x65, 0x5A, 0x62, 0x0E, 0x37, 0x4E, 0x98, 0x26, 0x57, 
   0xD8, 0x61, 0x2F, 0x76, 0x8B, 0x3D, 0x5F, 0x6D, 0xB1, 0x99, 0x3D, 0x8F, 0x9A, 0x1A, 0x2D, 0x89, 
   0x4F, 0x53, 0x8D, 0x7E, 0x8C, 0x76, 0x56, 0x48, 0x76, 0x4A, 0x5A, 0xA3, 0x55, 0x88, 0x87, 0x66, 
   0x80, 0x7B, 0x69, 0x60, 0xA1, 0x12, 0x2F, 0x83, 0x2D, 0x39, 0x64, 0x7C, 0x61, 0x80, 0x1C, 0x58, 
   0x4E, 0x00, 0x44, 0x89, 0x9E, 0xA0, 0xB8, 0xBA, 0xB5, 0x96, 0x23, 0x1E, 0x89, 0x00, 0x16, 0x71, 
   0x3C, 0x6B, 0x61, 0x7B, 0x6C, 0xBC, 0x42, 0x36, 0x79, 0x42, 0x0F, 0x6E, 0x1C, 0x42, 0x8B, 0x41, 
   0xA3, 0x76, 0x4A, 0x9B, 0x72, 0x8B, 0x62, 0x95, 0x8F, 0x82, 0x84, 0x16, 0x6F, 0x3C, 0x15, 0x2E, 
   0x71, 0x75, 0x61, 0xEF, 0x5E, 0x5C, 0x7C, 0x36, 0x3C, 0x25, 0x20, 0x83, 0x6A, 0x34, 0xBD, 0xB7, 
   0x98, 0x72, 0xDA, 0xA7, 0x30, 0x8D, 0x3C, 0x6C, 0x06, 0x00, 0x5F, 0x8C, 0x3D, 0x41, 0xAE, 0x76, 
   0x68, 0x74, 0x48, 0x67, 0x5B, 0x1A, 0x50, 0x61, 0x37, 0x4A, 0x68, 0x61, 0x67, 0x92, 0x62, 0x6C, 
   0x93, 0x4B, 0x4A, 0x81, 0x4F, 0x3B, 0x74, 0x38, 0x8C, 0x62, 0x28, 0x59, 0x46, 0x67, 0x3D, 0x9E, 
   0x89, 0xB3, 0xE3, 0x4E, 0x83, 0x9C, 0x19, 0x35, 0x31, 0x3A, 0x0A, 0x2F, 0x30, 0x08, 0x21, 0x49, 
   0x85, 0x89, 0x83, 0xFF, 0xFF, 0x60, 0x5D, 0xA8, 0x1A, 0x00, 0x23, 0x30, 0x52, 0x76, 0x69, 0x7B, 
   0xBA, 0x41, 0x48, 0x64, 0x2A, 0x27, 0x51, 0x47, 0x7E, 0x6E, 0x5E, 0x99, 0x7B, 0x26, 0x37, 0x8D, 
   0x1C, 0x00, 0x57, 0x51, 0x7A, 0x71, 0x91, 0xC0, 0xC2, 0x5C, 0x74, 0xBB, 0x16, 0x32, 0x6D, 0x3E, 
   0x21, 0x2D, 0x6C, 0x77, 0x35, 0x44, 0x6D, 0xA7, 0x33, 0x30, 0xFF, 0x39, 0x48, 0x7D, 0x47, 0x83, 
   0x36, 0x7D, 0x90, 0xAC, 0x77, 0x79, 0xAC, 0x52, 0x4E, 0x82, 0x21, 0x56, 0x88, 0x2B, 0x44, 0x2A, 
   0x37, 0x44, 0x36, 0x55, 0x5C, 0xAA, 0x56, 0x79, 0xA0, 0x5B, 0x73, 0x51, 0x54, 0x54, 0x9A, 0x14, 
   0x3C, 0x8F, 0x16, 0x21, 0x57, 0x74, 0x56, 0xB2, 0x97, 0xA2, 0xA1, 0x2F, 0x8F, 0x51, 0x06, 0x04, 
   0x73, 0x4B, 0x0B, 0xA6, 0x7F, 0xAD, 0x79, 0x3B, 0x9D, 0x7F, 0x4B, 0x4C, 0xAB, 0x60, 0x3E, 0x6A, 
   0x32, 0x65, 0x37, 0x16, 0x48, 0x72, 0x7E, 0x53, 0xDF, 0x79, 0x4E, 0x94, 0x28, 0x4F, 0x1A, 0x33, 
   0x77, 0x69, 0x71, 0x81, 0xC0, 0x5A, 0x4C, 0xA3, 0x1B, 0x28, 0x51, 0x3D, 0x4A, 0x2E, 0x5A, 0x6D, 
   0x90, 0x71, 0x78, 0xEB, 0x32, 0x28, 0x4B, 0x00, 0x0D, 0x00, 0x65, 0x98, 0xAF, 0x6C, 0x99, 0xDA, 
   0x3E, 0x31, 0x5D, 0x11, 0x2B, 0x4B, 0x67, 0x65, 0xA2, 0x94, 0x9E, 0xE5, 0x47, 0x52, 0x64, 0x00, 
   0x2E, 0x00, 0x00, 0x2E, 0x2A, 0x6D, 0x47, 0xA8, 0xB5, 0x88, 0xFF, 0x86, 0x77, 0xCB, 0x00, 0x38, 
   0x00, 0x00, 0x1C, 0x00, 0x63, 0x54, 0x59, 0x89, 0xA8, 0xFF, 0x6D, 0xB9, 0xFD, 0x66, 0x3F, 0x45, 
   0x25, 0x25, 0x38, 0x4C, 0x68, 0xD2, 0x57, 0x61, 0xB7, 0x4B, 0x5A, 0x81, 0x3F, 0x42, 0x78, 0x3F, 
   0x31, 0x44, 0x35, 0x55, 0x64, 0x74, 0x85, 0xCE, 0x52, 0x5F, 0xD4, 0x41, 0x6B, 0x93, 0x41, 0x6B, 
   0x1F, 0x21, 0x39, 0x44, 0x73, 0x5E, 0xD7, 0xAC, 0xA4, 0xDA, 0x2D, 0x97, 0xB1, 0x00, 0x39, 0x7F, 
   0x80, 0x27, 0x32, 0x7B, 0x50, 0x5C, 0x0E, 0xAD, 0xF2, 0x42, 0x91, 0xA3, 0x6B, 0x35, 0x3C, 0x6B, 
   0x62, 0x43, 0x42, 0x68, 0xCA, 0x09, 0x3C, 0xFE, 0x3D, 0x7C, 0x73, 0xC1, 0xB9, 0x76, 0x59, 0x5A, 
   0xA7, 0x00, 0x00, 0x78, 0x40, 0x3D, 0x55, 0x75, 0xB2, 0x53, 0x66, 0x91, 0xD5, 0x4F, 0x35, 0xFF, 
   0x4E, 0x5B, 0x5C, 0x42, 0x8E, 0x38, 0x37, 0x2D, 0xA0, 0x5A, 0x61, 0xE0, 0x76, 0x9A, 0xB4, 0x31, 
   0x44, 0x2E, 0x2B, 0x2D, 0x3A, 0x5E, 0x9F, 0xD2, 0x65, 0x83, 0xFF, 0x64, 0x32, 0x9B, 0x2A, 0x32, 
   0x18, 0x36, 0x67, 0x5B, 0x7B, 0xC3, 0x65, 0x69, 0x6C, 0xAD, 0x00, 0x00, 0xD1, 0x10, 0x28, 0x4A, 
   0xC4, 0xDC, 0x68, 0xA3, 0xA4, 0xFF, 0x18, 0x1A, 0xCF, 0x26, 0x52, 0x27, 0x4F, 0x70, 0x3D, 0x3F, 
   0x60, 0x91, 0x6D, 0x72, 0xF0, 0x5D, 0x7D, 0xAD, 0x35, 0x55, 0x68, 0x41, 0x66, 0xA0, 0x59, 0x55, 
   0xA5, 0x70, 0x6D, 0x98, 0x58, 0x84, 0x53, 0x3B, 0x5D, 0x6C, 0x25, 0x57, 0xC6, 0x55, 0x3D, 0xA8, 
   0x90, 0x9A, 0xB0, 0x68, 0xB6, 0xEF, 0x40, 0x64, 0xAD, 0x71, 0x1E, 0x54, 0x5F, 0x68, 0x74, 0x24, 
   0x95, 0x9C, 0x2F, 0x34, 0x9D, 0x4D, 0x30, 0x9E, 0x72, 0xA4, 0x9A, 0x85, 0x7E, 0xAB, 0x4C, 0x67, 
   0x8F, 0x24, 0x72, 0x84, 0x53, 0x57, 0x86, 0x93, 0x90, 0xE2, 0x7B, 0x9A, 0xEA, 0x38, 0x5E, 0x50, 
   0x25, 0x12, 0x14, 0x20, 0x63, 0x7D, 0x9A, 0xBA, 0xD7, 0x89, 0x75, 0xDA, 0x38, 0x24, 0xCD, 0x15, 
   0x68, 0x7F, 0x39, 0x5F, 0x3D, 0x91, 0x7D, 0x9F, 0xB1, 0xD1, 0xF0, 0x24, 0x50, 0xB6, 0x00, 0x00, 
   0x90, 0x5C, 0x77, 0x64, 0x76, 0xBA, 0x2B, 0x66, 0x82, 0xAA, 0x6C, 0x53, 0xD4, 0x2D, 0x4C, 0x79, 
   0x6C, 0x85, 0x71, 0x92, 0x8B, 0x92, 0x00, 0x25, 0x82, 0x1D, 0x59, 0x88, 0xE6, 0xBB, 0xA5, 0xAC, 
   0x97, 0x9E, 0x00, 0x27, 0xB8, 0x12, 0x26, 0x71, 0x90, 0x7E, 0x4F, 0x70, 0x81, 0x8F, 0x27, 0xA3, 
   0xB9, 0x76, 0x83, 0x96, 0x5F, 0x00, 0x99, 0x20, 0x50, 0x98, 0x4A, 0xB3, 0x6B, 0x9B, 0x77, 0x8E, 
   0x83, 0x60, 0xCE, 0x00, 0x86, 0x78, 0x2B, 0x57, 0x8D, 0xBE, 0x29, 0x81, 0x2A, 0x6A, 0x50, 0x00, 
   0x84, 0x85, 0x9D, 0xBD, 0xCF, 0x9C, 0x8C, 0xA3, 0x2D, 0x2C, 0x4A, 0x02, 0x23, 0x1C, 0x3B, 0x51, 
   0x8A, 0x66, 0x8C, 0xE7, 0x6D, 0x88, 0x81, 0x51, 0x45, 0x5A, 0x34, 0x5D, 0xB0, 0x61, 0xBD, 0xBC, 
   0x55, 0x8D, 0x72, 0x32, 0x0D, 0x93, 0x2D, 0x14, 0x81, 0x40, 0x9B, 0x5A, 0xA2, 0xFF, 0xC1, 0x89, 
   0x87, 0xC0, 0x02, 0x00, 0x57, 0x2D, 0x27, 0x81, 0x77, 0x7E, 0x7F, 0x59, 0x73, 0x4B, 0x1F, 0x45, 
   0x69, 0x00, 0x13, 0x83, 0x5F, 0x6D, 0x9D, 0xBD, 0xDC, 0xC0, 0x94, 0xA8, 0x86, 0x12, 0x1F, 0x6D, 
   0x0E, 0x30, 0x82, 0x5C, 0x39, 0x70, 0x38, 0x38, 0x86, 0x28, 0x17, 0x8B, 0x67, 0x5F, 0x53, 0x58, 
   0x8B, 0x93, 0x37, 0x94, 0xA4, 0x2D, 0x6C, 0x60, 0x61, 0x3E, 0x4B, 0x78, 0x66, 0xAF, 0x60, 0xAE, 
   0xB1, 0x2C, 0x5C, 0x7D, 0x4D, 0x27, 0x6B, 0x52, 0x1C, 0x76, 0x2C, 0x6F, 0x82, 0x56, 0x7F, 0x78, 
   0x8C, 0xD0, 0x7A, 0x85, 0xAB, 0xD5, 0x71, 0x17, 0xE7, 0x2E, 0x1F, 0x00, 0x15, 0x6A, 0x23, 0x5F, 
   0x98, 0xCA, 0x49, 0x5E, 0xA9, 0x33, 0x3A, 0x58, 0x6C, 0x60, 0x62, 0x3F, 0x6B, 0x5D, 0x34, 0x17, 
   0x7D, 0x6D, 0x57, 0xCE, 0x5B, 0xB4, 0x98, 0x3E, 0x7B, 0x4B, 0x3D, 0x2F, 0x2D, 0x27, 0x0C, 0x58, 
   0x5B, 0x84, 0xBB, 0x78, 0xC8, 0xDD, 0x49, 0x3E, 0x6F, 0x2A, 0x15, 0x29, 0x29, 0x5F, 0x5C, 0x35, 
   0x67, 0x92, 0x3D, 0x5D, 0x68, 0x77, 0xA1, 0x92, 0x60, 0x6C, 0xE8, 0x31, 0x0F, 0x79, 0x25, 0x47, 
   0x43, 0x69, 0x66, 0x7F, 0x52, 0x5D, 0x6F, 0x19, 0xA6, 0x5A, 0x36, 0x71, 0xAB, 0x6C, 0x0F, 0x73, 
   0x51, 0x23, 0x47, 0x5D, 0x92, 0x93, 0x46, 0x9E, 0xE4, 0x4B, 0x6E, 0x8E, 0x3E, 0x33, 0x48, 0x27, 
   0x3E, 0x76, 0x34, 0x51, 0xAB, 0x7F, 0x80, 0x69, 0x63, 0x6F, 0x5B, 0x2E, 0x31, 0xEA, 0x18, 0x54, 
   0xA0, 0x5A, 0x6E, 0x2D, 0xB7, 0x9E, 0xA3, 0x88, 0xB8, 0xFF, 0x0C, 0x2B, 0x58, 0x26, 0x27, 0x26, 
   0x42, 0x2D, 0x43, 0x2D, 0x57, 0x79, 0x79, 0xBF, 0xCB, 0x8F, 0x96, 0xBF, 0x0F, 0x00, 0x1E, 0x00, 
   0x04, 0x57, 0x50, 0x84, 0xD6, 0xAF, 0xB4, 0x77, 0x8D, 0x8B, 0x7A, 0x2A, 0x10, 0x83, 0x0B, 0x00, 
   0x33, 0x40, 0xAD, 0x68, 0x70, 0xAF, 0xE0, 0x97, 0x41, 0x8F, 0x50, 0x4A, 0x1B, 0x00, 0x5F, 0x76, 
   0x3D, 0x48, 0xC2, 0x66, 0x65, 0x7E, 0x57, 0x54, 0x5B, 0x41, 0x50, 0x72, 0x6E, 0x78, 0xB1, 0x71, 
   0x8D, 0xC1, 0x03, 0x35, 0x5C, 0x0E, 0x28, 0x06, 0x6B, 0x56, 0x73, 0x8F, 0x79, 0xEC, 0x56, 0x62, 
   0x6E, 0x3E, 0x3F, 0x23, 0x3D, 0x34, 0xA7, 0x3D, 0x5D, 0x80, 0x38, 0x4F, 0x2D, 0x88, 0x8E, 0x8F, 
   0x39, 0x82, 0xD0, 0x39, 0x31, 0x86, 0x6C, 0x58, 0x95, 0x43, 0x63, 0x54, 0x4D, 0x51, 0x8B, 0x35, 
   0x57, 0x68, 0x0F, 0x41, 0x15, 0x4B, 0x4E, 0xA6, 0x9D, 0x77, 0xDD, 0x6F, 0x73, 0x82, 0x22, 0x56, 
   0x8A, 0x1C, 0x72, 0x38, 0x4C, 0x23, 0x06, 0x71, 0x26, 0xA0, 0x67, 0xAC, 0xFF, 0x5B, 0xDA, 0xA2, 
   0x59, 0x4E, 0x61, 0x40, 0x11, 0x88, 0x28, 0x59, 0x81, 0x44, 0x5E, 0x86, 0x56, 0x59, 0x9B, 0x3A, 
   0x53, 0x7D, 0x58, 0x22, 0x40, 0x64, 0x69, 0x9D, 0x5D, 0xAE, 0xB5, 0x40, 0x68, 0x87, 0x23, 0x00, 
   0x5E, 0x3B, 0x3D, 0x50, 0x4F, 0xA8, 0x8D, 0x78, 0xAF, 0xEF, 0x99, 0x5D, 0xC5, 0x30, 0x49, 0x38, 
   0x00, 0x26, 0x25, 0x68, 0x5A, 0xC1, 0x59, 0x73, 0x9B, 0x2D, 0x69, 0x7F, 0x82, 0x91, 0x79, 0x65, 
   0x57, 0x9C, 0x00, 0x2E, 0x92, 0x53, 0x6E, 0x5B, 0x81, 0x8B, 0xB1, 0x53, 0x8A, 0xFF, 0x2A, 0x5A, 
   0x91, 0x4B, 0x41, 0x38, 0x35, 0x3C, 0x2C, 0x47, 0x71, 0x90, 0x65, 0x8A, 0xEA, 0x5F, 0x7F, 0xA0, 
   0x37, 0x78, 0x43, 0x47, 0x54, 0x7C, 0x5E, 0x47, 0xD3, 0x43, 0x26, 0x9F, 0x4F, 0x7D, 0x43, 0x71, 
   0xAB, 0xB3, 0x48, 0x33, 0x96, 0x36, 0x37, 0x46, 0x57, 0x7B, 0xC2, 0x56, 0x85, 0xD0, 0x2D, 0x23, 
   0x29, 0x13, 0x00, 0x0D, 0x5B, 0x91, 0xBC, 0xD4, 0xFF, 0xFF, 0x77, 0x5C, 0xAE, 0x00, 0x00, 0x17, 
   0x09, 0x25, 0x45, 0xB0, 0xCE, 0xE2, 0x78, 0x93, 0xC9, 0x01, 0x38, 0x9A, 0x5D, 0x5A, 0x43, 0xA7, 
   0x82, 0x56, 0x3A, 0x93, 0xC0, 0x16, 0x2C, 0xCE, 0x44, 0x54, 0x9A, 0x52, 0x8E, 0x66, 0x76, 0x77, 
   0x9E, 0x6B, 0x44, 0x98, 0x48, 0x55, 0x98, 0x47, 0x9A, 0x88, 0x41, 0x47, 0x30, 0x27, 0x59, 0xA0, 
   0x94, 0xB5, 0xFF, 0x9A, 0x87, 0xEC, 0x1C, 0x36, 0x58, 0x21, 0x69, 0x3A, 0xB0, 0x7A, 0x86, 0x43, 
   0x53, 0xD4, 0x14, 0x8B, 0xDF, 0x64, 0x47, 0x76, 0x6C, 0x21, 0x36, 0x56, 0xC9, 0x99, 0x2A, 0x75, 
   0xEB, 0x4F, 0x59, 0x75, 0xB7, 0xAD, 0xC4, 0x99, 0x6D, 0xEA, 0x45, 0x53, 0x58, 0x00, 0x40, 0x5B, 
   0x2B, 0x5E, 0x9F, 0xC0, 0xD0, 0xB1, 0x6B, 0x62, 0xB1, 0x00, 0x17, 0xAA, 0x59, 0x77, 0x32, 0x89, 
   0x58, 0x5D, 0x63, 0x7D, 0xFF, 0x5C, 0xC1, 0xEF, 0x4F, 0x69, 0x29, 0x79, 0x16, 0x3E, 0x2D, 0x4E, 
   0xCD, 0x00, 0x56, 0xA0, 0x6A, 0x9D, 0x92, 0xAA, 0xA9, 0x4C, 0x4E, 0x5E, 0x53, 0x1A, 0x45, 0xD2, 
   0x1C, 0x3A, 0xC7, 0x86, 0x59, 0x49, 0xD6, 0xB6, 0x76, 0x44, 0x99, 0xDC, 0x00, 0x4B, 0x90, 0x62, 
   0x48, 0x7C, 0x9C, 0x59, 0x46, 0x00, 0x4A, 0x68, 0x4A, 0x70, 0xB9, 0xDE, 0xF4, 0x44, 0x2B, 0x7F, 
   0x83, 0x00, 0x00, 0xDE, 0x6A, 0x37, 0x8D, 0xB1, 0xBD, 0x46, 0x7C, 0x7B, 0x62, 0x00, 0x5E, 0x85, 
   0x00, 0x35, 0x92, 0xCE, 0x7A, 0x87, 0xEB, 0xA3, 0x70, 0x00, 0x48, 0x97, 0x00, 0x37, 0x70, 0x78, 
   0xA4, 0x87, 0x75, 0x9D, 0x7C, 0x69, 0x3F, 0x9D, 0x50, 0x47, 0xA6, 0x48, 0x46, 0x59, 0x2B, 0x47, 
   0x3D, 0x52, 0x9E, 0x94, 0x43, 0x71, 0xB8, 0x34, 0x39, 0x80, 0x8C, 0x6D, 0x6A, 0x81, 0xA6, 0x8D, 
   0x56, 0x71, 0x9F, 0x1B, 0x09, 0x82, 0x22, 0x43, 0x93, 0xA1, 0xAC, 0x76, 0x6E, 0xA6, 0x98, 0x39, 
   0x6F, 0x97, 0x3B, 0x31, 0x94, 0x5B, 0x2F, 0x53, 0x59, 0x8F, 0x68, 0x03, 0x5C, 0x7F, 0x26, 0x2E, 
   0x7A, 0x83, 0x61, 0x82, 0x36, 0x37, 0x95, 0x27, 0x4E, 0x92, 0xAC, 0xFF, 0xA3, 0xAA, 0xCE, 0x9C, 
   0x32, 0x0A, 0x87, 0x00, 0x00, 0x36, 0x4D, 0x66, 0x70, 0x4D, 0x6C, 0x6A, 0x52, 0x60, 0x87, 0x58, 
   0x38, 0x81, 0x5D, 0x5C, 0x70, 0x2B, 0x87, 0x4F, 0x2D, 0x67, 0x74, 0x95, 0x78, 0xC6, 0x78, 0x88, 
   0xBB, 0x38, 0x58, 0x3E, 0x25, 0x3F, 0x71, 0x31, 0x49, 0xCD, 0x66, 0x28, 0x89, 0x6C, 0x64, 0x44, 
   0x44, 0x9A, 0x78, 0x26, 0xC2, 0xD4, 0x5F, 0x52, 0xC7, 0x80, 0x16, 0x72, 0x3F, 0x76, 0x08, 0x00, 
   0x65, 0x5D, 0x4A, 0x76, 0xCC, 0x9B, 0x74, 0xA4, 0x3A, 0x3E, 0x47, 0x3F, 0x2D, 0x3B, 0x4F, 0x5C, 
   0x98, 0x4A, 0x7A, 0xC2, 0x4F, 0x8C, 0x88, 0x5A, 0x5E, 0x64, 0x37, 0x4B, 0x6E, 0x31, 0x76, 0x84, 
   0x32, 0x15, 0x51, 0x56, 0x10, 0x5F, 0x84, 0xA7, 0xAD, 0x4A, 0x99, 0xBF, 0x36, 0x8B, 0x9A, 0x34, 
   0x37, 0x30, 0x24, 0x00, 0x25, 0x37, 0x4F, 0x9B, 0x88, 0xDA, 0xE9, 0x55, 0x73, 0x98, 0x2B, 0x00, 
   0x3E, 0x35, 0x5C, 0x3C, 0x57, 0xEA, 0x82, 0x47, 0x44, 0x9B, 0x15, 0x00, 0x7A, 0x62, 0x56, 0x64, 
   0x8B, 0xD1, 0xB4, 0x58, 0x76, 0x9D, 0x23, 0x24, 0x4D, 0x56, 0x3A, 0x5F, 0x61, 0x74, 0x89, 0x34, 
   0x7A, 0xA9, 0x35, 0x3C, 0xC1, 0x5E, 0x48, 0x7C, 0x75, 0x82, 0x48, 0x36, 0x76, 0x9A, 0x3A, 0x04, 
   0xEC, 0x35, 0x4F, 0xA7, 0x47, 0xAD, 0x71, 0x7C, 0x92, 0x7A, 0x75, 0x72, 0x7E, 0x1E, 0x20, 0x7D, 
   0x2D, 0x2A, 0x8D, 0x4F, 0x7F, 0x70, 0x61, 0x62, 0x77, 0x55, 0x4B, 0xB5, 0x21, 0x5D, 0x70, 0x3F, 
   0x53, 0x54, 0x6E, 0x7B, 0x8E, 0x52, 0xA2, 0xBC, 0x2B, 0x23, 0x6B, 0x69, 0x01, 0x6E, 0x52, 0xA2, 
   0x8A, 0x30, 0x92, 0x68, 0x52, 0x41, 0x95, 0x6E, 0x4A, 0x8E, 0x3F, 0x71, 0x44, 0x27, 0x43, 0x67, 
   0x3E, 0x4E, 0xC3, 0x66, 0x54, 0xA5, 0x29, 0x45, 0x16, 0x4C, 0x74, 0x55, 0x90, 0x95, 0xFF, 0x4F, 
   0x4D, 0xAF, 0x0E, 0x0B, 0x00, 0x1E, 0x44, 0x4F, 0x64, 0x79, 0xAC, 0x6C, 0x6E, 0xB8, 0x4F, 0x45, 
   0x67, 0x1C, 0x18, 0x1E, 0x33, 0x64, 0x87, 0x71, 0x8C, 0xDE, 0x4E, 0x53, 0x83, 0x00, 0x26, 0x0C, 
   0x72, 0x88, 0x9B, 0xB1, 0x9E, 0xFF, 0x15, 0x2F, 0x44, 0x08, 0x0B, 0x1F, 0x49, 0x56, 0x6A, 0x79, 
   0x64, 0xBD, 0x85, 0x76, 0xE5, 0x39, 0x76, 0x38, 0x05, 0x27, 0x04, 0x44, 0x5C, 0x96, 0x8A, 0x9B, 
   0xD8, 0x58, 0x68, 0xB0, 0x2A, 0x44, 0x6D, 0x2A, 0x2D, 0x01, 0x64, 0x35, 0x40, 0x65, 0xAA, 0xFF, 
   0x7B, 0xB0, 0xE0, 0x35, 0x46, 0x44, 0x28, 0x09, 0x68, 0x4A, 0x41, 0xA0, 0x40, 0x70, 0x73, 0x5D, 
   0x60, 0x90, 0x6F, 0x67, 0xB1, 0x41, 0x73, 0x55, 0x40, 0x72, 0x4F, 0x40, 0x22, 0x80, 0x4C, 0x34, 
   0xA1, 0x5D, 0x76, 0xCA, 0x41, 0x78, 0x85, 0x25, 0x72, 0x89, 0x6A, 0x4A, 0x71, 0x80, 0x4A, 0x66, 
   0x1E, 0x71, 0xA4, 0x00, 0x60, 0x8D, 0x87, 0x33, 0x5F, 0x99, 0x6D, 0x77, 0x38, 0x9C, 0xC3, 0x0F, 
   0x63, 0xA6, 0x71, 0x40, 0x3A, 0x88, 0x7D, 0x84, 0x4D, 0x6B, 0x9C, 0x07, 0x26, 0x91, 0x40, 0x6B, 
   0xB2, 0x7A, 0x9E, 0x68, 0x52, 0x53, 0x6D, 0x3B, 0x08, 0xA6, 0x3B, 0x4E, 0x79, 0x64, 0xBC, 0x69, 
   0x5E, 0x55, 0xBA, 0x47, 0x3C, 0xD2, 0x42, 0x57, 0x70, 0x59, 0x63, 0x42, 0x3D, 0x43, 0xB5, 0x60, 
   0x78, 0xC8, 0x93, 0xB0, 0xCA, 0x41, 0x26, 0x8B, 0x27, 0x4B, 0x15, 0x26, 0x78, 0x33, 0x2D, 0x56, 
   0xCB, 0x5D, 0x40, 0xA1, 0x49, 0x39, 0x96, 0x62, 0x9F, 0xA6, 0xAC, 0xFF, 0x73, 0x64, 0x7C, 0xA3, 
   0x00, 0x00, 0x6E, 0x00, 0x0D, 0x00, 0x82, 0xF1, 0xA7, 0x91, 0x9A, 0xE0, 0x5F, 0x50, 0xC4, 0x74, 
   0x70, 0x72, 0x50, 0x47, 0x3F, 0x21, 0x47, 0xAD, 0x32, 0x7C, 0xE3, 0x73, 0x7D, 0x93, 0x5E, 0x66, 
   0x53, 0x48, 0x5F, 0x87, 0x64, 0x3D, 0xB0, 0x49, 0x23, 0x84, 0x5A, 0xA2, 0x85, 0x81, 0xAE, 0xA3, 
   0x25, 0x3B, 0xD5, 0x25, 0x2F, 0x7E, 0x8C, 0x80, 0x3E, 0x43, 0x92, 0x96, 0x23, 0x60, 0xAB, 0xAC, 
   0x65, 0xE6, 0x62, 0x60, 0xAC, 0x2C, 0x82, 0x82, 0x4D, 0x4A, 0x91, 0x0B, 0x41, 0x6B, 0x53, 0xA3, 
   0x85, 0xBC, 0x8D, 0xFF, 0x72, 0x91, 0xC8, 0x58, 0x70, 0x2A, 0x28, 0x19, 0x61, 0x38, 0x41, 0xA2, 
   0x7C, 0xD5, 0xCA, 0x64, 0x68, 0xD2, 0x24, 0x1B, 0x7D, 0x2F, 0x6A, 0x0F, 0x2C, 0x34, 0x3A, 0x90, 
   0x70, 0xFF, 0xAC, 0xCC, 0xFF, 0x2D, 0x75, 0x7B, 0x36, 0x06, 0x30, 0x4C, 0x67, 0x4B, 0x57, 0x9B, 
   0x8E, 0x52, 0x68, 0xFC, 0x4C, 0x3A, 0xC2, 0x6E, 0x62, 0x41, 0x41, 0x96, 0x4A, 0x3D, 0x4B, 0x90, 
   0x39, 0x19, 0x9E, 0x65, 0x77, 0xAA, 0xE8, 0xDF, 0xA8, 0x9F, 0xA8, 0x89, 0x00, 0x15, 0x9C, 0x00, 
   0x07, 0x66, 0x90, 0x4E, 0x43, 0xD4, 0x9C, 0x72, 0x46, 0xA9, 0x92, 0x22, 0x63, 0xC0, 0x8C, 0x2E, 
   0x75, 0x1F, 0x60, 0x64, 0x1B, 0x78, 0xAD, 0xC6, 0x74, 0x6E, 0x59, 0x74, 0x83, 0x00, 0x68, 0x5A, 
   0x37, 0x67, 0x56, 0xBD, 0x40, 0xAC, 0xA0, 0x65, 0x86, 0x20, 0xAB, 0x70, 0x34, 0x99, 0xAD, 0x5B, 
   0x46, 0x68, 0x3E, 0x38, 0x62, 0x39, 0x6A, 0x73, 0x5C, 0x6B, 0xAC, 0x8A, 0x7D, 0xAA, 0x65, 0x7C, 
   0x53, 0x00, 0x37, 0x25, 0x19, 0x31, 0x87, 0x61, 0xA4, 0xBD, 0x81, 0x94, 0x74, 0x81, 0x32, 0x64, 
   0x30, 0x22, 0xA3, 0x3A, 0xAC, 0x8D, 0x6C, 0xB1, 0x7D, 0x50, 0x4E, 0xBA, 0x3E, 0x23, 0x64, 0x49, 
   0x50, 0x79, 0x7B, 0x94, 0xA5, 0x56, 0x7B, 0x76, 0x04, 0x29, 0x58, 0x2B, 0x45, 0x97, 0x71, 0x7E, 
   0x8C, 0x62, 0x4B, 0x6A, 0x45, 0x3C, 0x65, 0x0D, 0x5B, 0x79, 0x3D, 0x86, 0xB9, 0xD1, 0xCE, 0xB8, 
   0x7E, 0x95, 0x4F, 0x00, 0x00, 0x6A, 0x67, 0x89, 0x72, 0x7D, 0xAF, 0x72, 0x37, 0x45, 0x8D, 0x3A, 
   0x25, 0x70, 0x3A, 0x1A, 0x26, 0x52, 0x57, 0x89, 0x53, 0xB0, 0xCF, 0x32, 0x9A, 0x52, 0x60, 0x27, 
   0x30, 0x77, 0x65, 0xB4, 0x2E, 0x92, 0x8F, 0x50, 0x68, 0x6E, 0x72, 0x38, 0xA1, 0x5F, 0x4E, 0xA0, 
   0x2F, 0x4A, 0x76, 0x0C, 0x47, 0x47, 0x58, 0xAF, 0x6A, 0x87, 0x9D, 0xE1, 0x5E, 0x1D, 0xB1, 0x2F, 
   0x3D, 0x00, 0x45, 0x81, 0x59, 0x57, 0x7A, 0xCD, 0x57, 0x2F, 0x8A, 0x56, 0x34, 0x66, 0x3E, 0x96, 
   0x64, 0x37, 0x84, 0x52, 0x37, 0x01, 0x65, 0x60, 0x5C, 0xB0, 0x60, 0xB1, 0xBA, 0x3D, 0x66, 0x62, 
   0x26, 0x2B, 0x11, 0x38, 0x00, 0x15, 0x57, 0x5F, 0xBB, 0x8A, 0xFF, 0xFF, 0x6C, 0x6B, 0xAA, 0x03, 
   0x00, 0x17, 0x29, 0x45, 0x5D, 0x47, 0x1F, 0x6A, 0x3E, 0x50, 0x6E, 0x78, 0xA3, 0xCB, 0x7C, 0x98, 
   0xA8, 0x08, 0x73, 0x35, 0x19, 0x37, 0x80, 0x5F, 0x0F, 0xA9, 0x5B, 0x46, 0x5B, 0x3A, 0xA4, 0x9F, 
   0x57, 0xA4, 0xA9, 0x5C, 0x5D, 0x62, 0x50, 0x1C, 0x3A, 0x39, 0x3A, 0x54, 0x1E, 0x81, 0xBF, 0x7A, 
   0x83, 0xBC, 0x69, 0x71, 0x79, 0x3C, 0x3E, 0xA0, 0x43, 0x6C, 0x7C, 0x76, 0x78, 0x10, 0x69, 0x77, 
   0x9B, 0x33, 0x3D, 0xFF, 0x00, 0x32, 0x55, 0x35, 0x67, 0x00, 0xA4, 0x6A, 0xBB, 0x77, 0xA4, 0xFF, 
   0x37, 0x9C, 0x7D, 0x44, 0x35, 0x79, 0x2B, 0x00, 0x5A, 0x00, 0x12, 0x44, 0x6E, 0xA5, 0xDF, 0xB4, 
   0xD4, 0xB2, 0x41, 0x59, 0x29, 0x06, 0x00, 0x9A, 0x29, 0x1D, 0xA5, 0x6A, 0xAF, 0x55, 0x77, 0x9F, 
   0x9D, 0x76, 0x48, 0xB7, 0x40, 0x45, 0x10, 0x00, 0x54, 0x55, 0x4A, 0x3D, 0xDA, 0x84, 0x5F, 0x96, 
   0x50, 0x4F, 0x4A, 0x1D, 0x45, 0x77, 0x5B, 0x6E, 0xAB, 0x78, 0xAD, 0x99, 0x28, 0x60, 0x6A, 0x38, 
   0x13, 0x47, 0x70, 0x50, 0x80, 0x53, 0x73, 0xAD, 0x13, 0x5C, 0x83, 0x2A, 0x45, 0x1C, 0x49, 0x36, 
   0x5C, 0x62, 0x71, 0xCB, 0x73, 0x99, 0x50, 0x5B, 0x43, 0x6D, 0x21, 0x58, 0xCF, 0x49, 0x46, 0x95, 
   0x65, 0x4D, 0x48, 0x54, 0x86, 0x5E, 0x3C, 0x68, 0x9D, 0x14, 0x39, 0x65, 0x3F, 0x23, 0x3F, 0x75, 
   0x7B, 0xD0, 0xAE, 0x82, 0xE6, 0x56, 0x44, 0x43, 0x00, 0x4F, 0x0D, 0x09, 0x60, 0x5B, 0x6E, 0x5C, 
   0xC2, 0x9E, 0x6D, 0xFF, 0x59, 0x6C, 0xA9, 0x0C, 0x53, 0x00, 0x2D, 0x14, 0x46, 0x50, 0x27, 0xA7, 
   0x46, 0x97, 0xE4, 0x63, 0xC5, 0xC1, 0x57, 0x28, 0x4C, 0x23, 0x20, 0x4A, 0x57, 0x4E, 0x94, 0x63, 
   0x72, 0xA7, 0x4C, 0x89, 0x9A, 0x4B, 0x6A, 0x5E, 0x2E, 0x00, 0x09, 0x51, 0x33, 0x80, 0x6F, 0xC5, 
   0xEC, 0x63, 0x92, 0xE8, 0x34, 0x35, 0x9F, 0x44, 0x24, 0x07, 0x1E, 0x54, 0x24, 0x69, 0x95, 0xFF, 
   0x7B, 0x8A, 0xD4, 0x25, 0x44, 0x49, 0x42, 0x64, 0x4D, 0x80, 0x42, 0x92, 0x2C, 0x44, 0xA4, 0x2D, 
   0x7F, 0x72, 0x99, 0xAC, 0x77, 0x65, 0x4E, 0x99, 0x13, 0x18, 0x76, 0x39, 0x23, 0x48, 0x5C, 0x75, 
   0x67, 0x4D, 0x99, 0xED, 0x64, 0x70, 0xF4, 0x5D, 0x57, 0x6D, 0x1E, 0x4B, 0x3C, 0x35, 0x47, 0x6A, 
   0x5D, 0x80, 0xAC, 0x52, 0x63, 0xB9, 0x4D, 0x47, 0x58, 0x42, 0x58, 0x6A, 0x53, 0x6A, 0xB0, 0x48, 
   0x3D, 0xCC, 0x5E, 0x6B, 0xAC, 0x84, 0xBE, 0x8E, 0x0A, 0x06, 0x00, 0x00, 0x05, 0x0A, 0x6D, 0x8A, 
   0xD3, 0x7B, 0x91, 0xFF, 0x59, 0x42, 0x6D, 0x15, 0x06, 0x00, 0x5A, 0x9D, 0xB9, 0xA3, 0xFF, 0xD0, 
   0x57, 0x3C, 0x5C, 0x00, 0x00, 0x2D, 0x20, 0x36, 0x2C, 0xE5, 0xFD, 0xD7, 0x90, 0xBB, 0xFF, 0x00, 
   0x15, 0x9C, 0x5B, 0x36, 0x32, 0x67, 0x7B, 0x42, 0x33, 0x6A, 0xA6, 0x44, 0x4E, 0xCB, 0x45, 0x65, 
   0x98, 0x57, 0x6B, 0x66, 0x32, 0x61, 0x7F, 0x72, 0x5D, 0xAF, 0x9A, 0x84, 0xFE, 0x53, 0x89, 0xBA, 
   0x17, 0x2D, 0x11, 0x22, 0x3E, 0x2D, 0x52, 0x8B, 0xB5, 0x7C, 0x60, 0xC6, 0x4C, 0x7D, 0xD9, 0x53, 
   0x84, 0x95, 0xCA, 0x51, 0x72, 0x39, 0x63, 0xA5, 0x00, 0xA1, 0xA5, 0x5C, 0x52, 0x88, 0xAF, 0x75, 
   0xB0, 0x93, 0xCA, 0xAF, 0x3A, 0x5B, 0x90, 0x16, 0x2B, 0x4B, 0x4B, 0x64, 0x75, 0xC3, 0xC5, 0xEE, 
   0x83, 0x62, 0xE7, 0x00, 0x1B, 0x85, 0x23, 0x59, 0x29, 0x5E, 0x50, 0x19, 0x7C, 0x75, 0xBD, 0x5A, 
   0xBA, 0xFF, 0x4E, 0x74, 0xA3, 0x6F, 0x11, 0x6C, 0x3C, 0x5C, 0x8B, 0x2B, 0x91, 0x74, 0x60, 0x98, 
   0x7A, 0xBA, 0x79, 0x93, 0x3F, 0x27, 0xC2, 0x00, 0x38, 0xD2, 0x46, 0x73, 0x68, 0x8F, 0x7B, 0x23, 
   0x74, 0x83, 0x75, 0x7E, 0x99, 0xFF, 0x22, 0x6E, 0xB7, 0x81, 0x49, 0x56, 0x89, 0x69, 0x31, 0x00, 
   0x20, 0x64, 0x00, 0x50, 0x93, 0xDE, 0xBE, 0x79, 0xC3, 0x96, 0x8B, 0x00, 0x00, 0xAD, 0x11, 0x3A, 
   0x84, 0xCC, 0xD5, 0x3F, 0x7B, 0x86, 0x7E, 0x00, 0x24, 0xCE, 0x36, 0x55, 0x84, 0xB6, 0x7D, 0x5A, 
   0xB0, 0x55, 0x8D, 0x00, 0x46, 0x56, 0x00, 0x5A, 0x9C, 0xD1, 0xC8, 0xB9, 0x9D, 0xAF, 0x6F, 0x00, 
   0x27, 0x89, 0x30, 0x13, 0x78, 0x37, 0x4D, 0x7D, 0x3F, 0x89, 0x89, 0xA1, 0xA1, 0x89, 0x60, 0x6C, 
   0xBB, 0x09, 0x3D, 0x5E, 0x31, 0x53, 0x30, 0x77, 0x75, 0x70, 0x51, 0x64, 0xC8, 0x30, 0x26, 0x85, 
   0x64, 0x68, 0x74, 0x8C, 0xBF, 0x92, 0x5C, 0x9A, 0xB5, 0x0A, 0x29, 0x81, 0x37, 0x04, 0x90, 0x8C, 
   0x5A, 0x66, 0x69, 0xBD, 0x55, 0x29, 0x7D, 0xB0, 0x28, 0x14, 0x93, 0x5B, 0x46, 0x6B, 0x56, 0x68, 
   0x86, 0x2E, 0x4C, 0x75, 0x45, 0x75, 0x64, 0x72, 0x85, 0x87, 0x4A, 0x24, 0x9A, 0x00, 0x40, 0x7E, 
   0x58, 0x8C, 0x89, 0x93, 0x5A, 0x7E, 0x5C, 0x7F, 0x9C, 0x67, 0x95, 0xB2, 0x6A, 0x80, 0x5C, 0x0D, 
   0x27, 0x55, 0x1E, 0x25, 0x9A, 0x7A, 0x49, 0x9B, 0x64, 0x9C, 0x84, 0x30, 0x71, 0x5C, 0x20, 0x60, 
   0x46, 0x4A, 0x67, 0x92, 0xA2, 0x83, 0xB1, 0x6E, 0x93, 0x63, 0x44, 0x6D, 0x8B, 0x3B, 0x30, 0xDF, 
   0x34, 0x00, 0x75, 0x4A, 0x43, 0x17, 0x2E, 0xA3, 0x67, 0x2B, 0xB6, 0x92, 0x60, 0x69, 0xE3, 0xA4, 
   0x3E, 0xB2, 0x30, 0x3C, 0x00, 0x07, 0x53, 0x2E, 0x72, 0x76, 0xFF, 0x56, 0x81, 0xCA, 0x3E, 0x5D, 
   0x48, 0x48, 0x39, 0x1E, 0x2B, 0x54, 0x80, 0x37, 0x54, 0xD2, 0x60, 0x65, 0x8D, 0x55, 0x32, 0x47, 
   0x3E, 0x56, 0x48, 0x33, 0x85, 0x8A, 0x3F, 0x58, 0x98, 0x6D, 0x36, 0x78, 0x67, 0xA2, 0xA0, 0x66, 
   0x7F, 0xE2, 0x37, 0x4F, 0x4A, 0x1F, 0x3B, 0x1F, 0x31, 0x00, 0x5E, 0x65, 0x80, 0x8B, 0x71, 0xFF, 
   0xB6, 0x4E, 0x55, 0xC2, 0x1B, 0x00, 0x67, 0x22, 0x4A, 0x41, 0x95, 0xFF, 0xC4, 0x62, 0x93, 0xAC, 
   0x11, 0x0D, 0x64, 0x3E, 0x32, 0x3A, 0x61, 0x6C, 0x69, 0x35, 0x63, 0x94, 0x4D, 0x43, 0x87, 0x59, 
   0x72, 0x7E, 0x4D, 0x79, 0xAD, 0x47, 0x72, 0x9C, 0x38, 0x2E, 0x96, 0x88, 0x57, 0x94, 0x7B, 0xA6, 
   0x4F, 0x1D, 0x5F, 0x6C, 0x20, 0x00, 0xB8, 0x16, 0x21, 0x9C, 0x53, 0x93, 0x6A, 0xAC, 0xF7, 0xAF, 
   0xB7, 0xC7, 0xD5, 0x14, 0x00, 0x72, 0x00, 0x00, 0x63, 0x34, 0x6F, 0x72, 0x80, 0x84, 0x63, 0x75, 
   0xAB, 0xC4, 0x4C, 0x64, 0xB8, 0x12, 0x00, 0x35, 0x40, 0x6F, 0x73, 0x48, 0xB6, 0xCE, 0x77, 0x66, 
   0x93, 0x9E, 0x4C, 0x4B, 0x1E, 0x55, 0x66, 0x05, 0x49, 0x78, 0x3F, 0x54, 0xA2, 0x6E, 0x60, 0xBD, 
   0x4C, 0x56, 0x39, 0x4B, 0x69, 0x3E, 0x55, 0x96, 0xD8, 0x37, 0x55, 0xB4, 0x1B, 0x42, 0x00, 0x60, 
   0x46, 0x42, 0x6C, 0x74, 0xFF, 0x6B, 0x7A, 0xCB, 0x2A, 0x29, 0x00, 0x00, 0x18, 0x2C, 0x32, 0x71, 
   0x8B, 0x90, 0xA6, 0xB1, 0x68, 0x61, 0xB1, 0x17, 0x3C, 0x3A, 0x4F, 0x4C, 0x7F, 0x98, 0x72, 0xFF, 
   0x19, 0x44, 0x41, 0x00, 0x17, 0x00, 0x58, 0x79, 0x7F, 0x61, 0x74, 0xC8, 0x4C, 0x4D, 0xBE, 0x63, 
   0x42, 0x68, 0x35, 0x5F, 0x23, 0x56, 0x60, 0xBB, 0x71, 0x82, 0x8D, 0x1C, 0x38, 0x0C, 0x1D, 0x32, 
   0x97, 0x69, 0x6C, 0xBC, 0x9E, 0x89, 0x89, 0x63, 0x65, 0xBA, 0x0A, 0x40, 0x56, 0x20, 0x12, 0x01, 
   0x4F, 0x2C, 0x82, 0x68, 0x9C, 0xE1, 0x64, 0xBF, 0xA2, 0x4D, 0x3B, 0x40, 0x46, 0x22, 0x6C, 0x45, 
   0x7C, 0xC7, 0x3F, 0x75, 0x77, 0x39, 0x09, 0x49, 0x45, 0x43, 0x78, 0x46, 0xA1, 0x8C, 0x63, 0x91, 
   0xAB, 0x4B, 0x6D, 0xC1, 0x38, 0x2D, 0x74, 0x43, 0x11, 0x45, 0x33, 0x6A, 0x7F, 0x24, 0x9B, 0x88, 
   0x6B, 0x7A, 0xB1, 0xB5, 0x7D, 0xAB, 0x2A, 0x48, 0x8C, 0x00, 0x2A, 0x7A, 0x7B, 0x3D, 0x4D, 0xB6, 
   0x9A, 0x93, 0x32, 0x9A, 0xCD, 0x1F, 0x4D, 0x82, 0x57, 0x3A, 0x7A, 0x57, 0x67, 0x7E, 0x35, 0x4B, 
   0x48, 0x4C, 0x3C, 0xBE, 0x58, 0x91, 0xF3, 0x58, 0x74, 0x73, 0x51, 0x33, 0x4D, 0x40, 0x32, 0x73, 
   0x40, 0x4A, 0x6F, 0x51, 0x74, 0x5B, 0x5D, 0x6A, 0xB9, 0x47, 0x64, 0xC6, 0x64, 0x75, 0x8C, 0x6E, 
   0x52, 0xAB, 0x22, 0x46, 0x8A, 0x28, 0x5D, 0x1C, 0x67, 0x84, 0x71, 0x4C, 0x29, 0xA2, 0x41, 0x46, 
   0x8E, 0x5D, 0x80, 0xB7, 0x46, 0x75, 0xA4, 0x4B, 0x3B, 0x7A, 0x12, 0x0F, 0x62, 0x3B, 0x73, 0x7E, 
   0x8D, 0xFF, 0x9C, 0x76, 0x65, 0x96, 0x24, 0x00, 0x6E, 0x00, 0x18, 0x48, 0x64, 0xB6, 0xA3, 0x77, 
   0x81, 0xE5, 0x19, 0x6B, 0xC8, 0x8B, 0x7C, 0x3C, 0x8A, 0x59, 0x2A, 0x05, 0x4D, 0xB1, 0x32, 0x5E, 
   0xC6, 0x46, 0x50, 0x8B, 0x65, 0x91, 0x8D, 0x9A, 0xE0, 0xED, 0x65, 0x27, 0xE9, 0x30, 0x09, 0x4F, 
   0x50, 0x8C, 0x07, 0x3E, 0x67, 0x59, 0x0D, 0x4C, 0xC0, 0x49, 0x7B, 0xD5, 0xAC, 0x72, 0x9E, 0x4D, 
   0x69, 0x77, 0x30, 0x9E, 0xA5, 0x69, 0x76, 0x95, 0x48, 0x5A, 0x9C, 0x6A, 0x96, 0xD8, 0x85, 0x78, 
   0xBD, 0x33, 0x59, 0x26, 0x26, 0x53, 0x44, 0x21, 0x43, 0xE7, 0x8F, 0xC6, 0xCD, 0x84, 0x80, 0xC0, 
   0x38, 0x11, 0xCC, 0x3C, 0x5F, 0x38, 0x31, 0x4A, 0x0F, 0x6B, 0x63, 0xDD, 0xA3, 0xD5, 0xE3, 0x29, 
   0x6D, 0x42, 0x11, 0x00, 0x5D, 0x51, 0x49, 0x90, 0x5F, 0xA7, 0x9D, 0x5B, 0x76, 0xCA, 0x83, 0x64, 
   0x73, 0x4D, 0x6E, 0x3F, 0x28, 0x89, 0x91, 0x39, 0x2D, 0xF4, 0x14, 0x18, 0x8D, 0xA0, 0x93, 0x80, 
   0xC2, 0xFF, 0xA6, 0x36, 0x80, 0x9F, 0x0B, 0x00, 0x8F, 0x11, 0x1E, 0x41, 0x8C, 0x71, 0x52, 0xB4, 
   0xAD, 0x8D, 0x24, 0x8B, 0x9B, 0x00, 0x55, 0xA1, 0x76, 0x22, 0x95, 0xB2, 0x73, 0x5B, 0x41, 0x91, 
   0x77, 0x56, 0x49, 0x9E, 0x86, 0x92, 0x66, 0x00, 0x85, 0x78, 0x32, 0x39, 0xAB, 0xE3, 0x43, 0x9A, 
   0x60, 0x50, 0x4F, 0x00, 0x75, 0x71, 0x2E, 0xB4, 0x89, 0x63, 0x53, 0xAC, 0xAE, 0x56, 0x95, 0x6D, 
   0x98, 0x62, 0x00, 0x37, 0x9F, 0x2C, 0x31, 0x71, 0x8D, 0x82, 0x77, 0x39, 0x78, 0x88, 0x33, 0x4B, 
   0x94, 0x73, 0x95, 0xB5, 0x73, 0x88, 0x6F, 0x2D, 0x1F, 0x41, 0x21, 0x13, 0x7B, 0x34, 0x93, 0xB0, 
   0x9D, 0xBE, 0x6D, 0x81, 0x8B, 0x73, 0x2F, 0x3D, 0x91, 0x48, 0x4B, 0x96, 0x58, 0x65, 0x7E, 0x3A, 
   0x59, 0x83, 0x23, 0x43, 0x71, 0x41, 0x72, 0x7D, 0x80, 0xAB, 0xB1, 0x6F, 0x5A, 0x83, 0x18, 0x0F, 
   0x65, 0x50, 0x85, 0x81, 0x72, 0x9B, 0xB3, 0x65, 0x4F, 0x6E, 0x35, 0x3A, 0x41, 0x00, 0x00, 0x7C, 
   0x0A, 0x0B, 0x9C, 0xFF, 0xFF, 0xC0, 0x54, 0x60, 0x8B, 0x54, 0x5B, 0x8B, 0x4F, 0x82, 0x80, 0x5F, 
   0x7B, 0x6A, 0x4D, 0x61, 0xB3, 0x24, 0x3C, 0x84, 0x4C, 0x0F, 0x34, 0x63, 0x5C, 0x96, 0x1A, 0x99, 
   0xB3, 0x33, 0x84, 0x54, 0x96, 0x56, 0x61, 0x8A, 0x88, 0xCE, 0x38, 0x8A, 0xB7, 0x24, 0x37, 0x5A, 
   0x50, 0x35, 0x80, 0x56, 0x58, 0x95, 0x29, 0x50, 0x45, 0x30, 0x70, 0x57, 0x77, 0xC5, 0xB0, 0x73, 
   0x73, 0xCD, 0x54, 0x10, 0x8D, 0x4C, 0x37, 0x2A, 0x1D, 0xA5, 0x7A, 0x55, 0x9E, 0xF2, 0x60, 0x1E, 
   0x6D, 0x27, 0x22, 0x53, 0x59, 0xA3, 0x7F, 0x3D, 0x6F, 0x74, 0x27, 0x00, 0x4E, 0x61, 0x44, 0x5D, 
   0x5C, 0x99, 0xC1, 0x6D, 0xCD, 0xE3, 0x49, 0x6E, 0x47, 0x00, 0x00, 0x19, 0x2D, 0x27, 0x99, 0x90, 
   0xCF, 0xE5, 0x6E, 0x6F, 0xC0, 0x33, 0x19, 0x49, 0x47, 0x77, 0x19, 0x1E, 0x6A, 0x49, 0x2B, 0x15, 
   0x9E, 0x7D, 0x39, 0xB9, 0x5D, 0x7A, 0x7D, 0x5D, 0x7C, 0xAB, 0x3A, 0x8D, 0xC1, 0x66, 0x62, 0x8A, 
   0x4E, 0x38, 0x54, 0x1B, 0x16, 0x48, 0x28, 0x62, 0x9A, 0x69, 0x87, 0xA8, 0x8D, 0x5B, 0x76, 0x48, 
   0x40, 0x6C, 0x19, 0x73, 0xA1, 0x42, 0x5D, 0x91, 0x87, 0x74, 0xB4, 0x37, 0x85, 0xCF, 0x36, 0x62, 
   0x5A, 0x63, 0x4F, 0x00, 0x57, 0x43, 0xAE, 0x28, 0x44, 0xFF, 0x1D, 0x6E, 0x78, 0x4D, 0x87, 0x4E, 
   0x8E, 0x6C, 0x98, 0x62, 0x72, 0xBF, 0x46, 0x7C, 0x8A, 0x82, 0x63, 0x75, 0x52, 0x76, 0x6E, 0x01, 
   0x08, 0x58, 0x4C, 0x4E, 0xBF, 0x80, 0xCD, 0x87, 0x31, 0x67, 0x65, 0x64, 0x3E, 0xC3, 0x58, 0x7A, 
   0x8E, 0x19, 0x62, 0x31, 0x63, 0x34, 0x96, 0x68, 0x61, 0xA1, 0x51, 0x55, 0x56, 0x2F, 0x3F, 0x5C, 
   0x6E, 0x69, 0xB1, 0x84, 0xA7, 0xB6, 0x27, 0x5B, 0x4D, 0x0F, 0x14, 0x3A, 0x6A, 0x4C, 0x74, 0x59, 
   0x7A, 0xBA, 0x3D, 0x69, 0x8C, 0x4E, 0x4D, 0x52, 0x60, 0x25, 0x58, 0x38, 0x3D, 0x75, 0x38, 0x89, 
   0x88, 0x61, 0x78, 0x83, 0x50, 0x60, 0x95, 0x56, 0x5E, 0xAB, 0x7C, 0x62, 0x76, 0x25, 0x33, 0x42, 
   0x23, 0x49, 0xAC, 0x29, 0x49, 0x5C, 0x2C, 0x2E, 0x09, 0x95, 0x80, 0xC7, 0x7F, 0x9E, 0xDA, 0x34, 
   0x2C, 0x3F, 0x0A, 0x37, 0x60, 0x2D, 0x81, 0x84, 0x85, 0x66, 0xA8, 0x7F, 0x4F, 0xC9, 0x1D, 0x5A, 
   0x23, 0x0B, 0x5A, 0x18, 0x6E, 0x5A, 0xC0, 0x9C, 0x70, 0xFB, 0x39, 0x63, 0x86, 0x20, 0x44, 0x21, 
   0x2B, 0x17, 0x1B, 0x3F, 0x38, 0x76, 0x64, 0x98, 0xD6, 0x87, 0xC7, 0xF2, 0x52, 0x69, 0x4A, 0x34, 
   0x20, 0x36, 0x28, 0x08, 0x65, 0x4B, 0x4E, 0x8B, 0x63, 0xA0, 0xCC, 0x6E, 0x7E, 0xB4, 0x50, 0x3D, 
   0x66, 0x3E, 0x1A, 0x37, 0x49, 0x4F, 0x50, 0x38, 0x8A, 0xD6, 0x3F, 0x53, 0xC0, 0x46, 0x49, 0x25, 
   0x75, 0x93, 0x75, 0x70, 0x71, 0xD1, 0x36, 0x49, 0xA9, 0x2F, 0x64, 0x58, 0x4D, 0x7A, 0x68, 0x7B, 
   0x4C, 0x9D, 0x4D, 0x35, 0x8D, 0x24, 0x6E, 0xB9, 0x63, 0x79, 0x62, 0x58, 0x62, 0x45, 0x4C, 0x34, 
   0xA1, 0x40, 0x61, 0x6A, 0x3A, 0x51, 0x6B, 0x4C, 0x6D, 0xD8, 0x68, 0x6C, 0xB5, 0x51, 0x38, 0x5D, 
   0x2E, 0x38, 0x40, 0x39, 0x51, 0x64, 0x3A, 0x97, 0xBD, 0x68, 0x6F, 0xE0, 0x62, 0x4C, 0x9E, 0x3E, 
   0x7E, 0x55, 0x26, 0x3E, 0x32, 0x06, 0x06, 0x73, 0x7B, 0x8C, 0xBC, 0xAA, 0xD1, 0xFF, 0x37, 0x1F, 
   0x64, 0x23, 0x29, 0x00, 0x5B, 0xA1, 0xB2, 0x66, 0x73, 0xEB, 0x21, 0x17, 0x44, 0x00, 0x00, 0x0B, 
   0x72, 0xA8, 0xAD, 0xFC, 0xFF, 0xF9, 0x64, 0x6F, 0x9B, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0xB5, 
   0xFB, 0xD5, 0xA2, 0xAB, 0xFF, 0x36, 0x3E, 0xA5, 0x62, 0x5E, 0x30, 0x67, 0x6F, 0x2B, 0x23, 0x31, 
   0x97, 0x40, 0x6C, 0xF8, 0x97, 0xBD, 0xF4, 0x5E, 0x78, 0xB0, 0x1E, 0x59, 0x28, 0x62, 0x36, 0x48, 
   0x52, 0x54, 0x9E, 0x4C, 0x8A, 0xAB, 0x63, 0x69, 0x7A, 0x37, 0x4D, 0x81, 0x61, 0x5B, 0x95, 0x84, 
   0x75, 0xA8, 0x00, 0x94, 0x94, 0x51, 0x7E, 0xA8, 0xFD, 0x99, 0xEC, 0x82, 0x73, 0xAF, 0x00, 0x62, 
   0x43, 0x0D, 0x00, 0x46, 0x48, 0x47, 0x77, 0xB0, 0xFF, 0xC6, 0x65, 0x5F, 0xFF, 0x09, 0x18, 0x99, 
   0x59, 0x8E, 0x07, 0x6D, 0x4C, 0x62, 0x7E, 0x81, 0xE6, 0x70, 0xB9, 0xD4, 0x18, 0x3F, 0x74, 0x43, 
   0x2C, 0x42, 0x43, 0x5F, 0x4D, 0x00, 0x73, 0x6C, 0x6B, 0x80, 0xB3, 0xC2, 0x7A, 0xB3, 0x6C, 0x63, 
   0x6C, 0x08, 0x57, 0x75, 0x35, 0x74, 0x65, 0x76, 0x69, 0x52, 0x7C, 0x53, 0xC6, 0x59, 0x8C, 0xFF, 
   0x51, 0x90, 0x98, 0x43, 0x65, 0x4E, 0x2B, 0x23, 0x29, 0x00, 0x2A, 0x79, 0x3D, 0x5C, 0x9D, 0xF0, 
   0xD1, 0x7D, 0x9E, 0xB2, 0x9B, 0x00, 0x00, 0xA0, 0x00, 0x32, 0x83, 0xC1, 0xC4, 0x6B, 0xF7, 0x99, 
   0x76, 0x00, 0x43, 0x82, 0x00, 0x54, 0xA4, 0xDE, 0xB3, 0x49, 0x93, 0x6D, 0x77, 0x00, 0x11, 0xB1, 
   0x41, 0x68, 0x95, 0xC5, 0xB9, 0x94, 0x62, 0x79, 0x65, 0x00, 0x3D, 0x4E, 0x0B, 0x2B, 0x93, 0xA1, 
   0x4F, 0xB1, 0x80, 0xB1, 0x72, 0x45, 0x83, 0x82, 0x37, 0x32, 0x76, 0x15, 0x3E, 0x70, 0x3A, 0x84, 
   0x77, 0xA3, 0x90, 0x9A, 0x97, 0x83, 0xB0, 0x11, 0x48, 0x8C, 0x16, 0x2B, 0x3B, 0x72, 0x6A, 0x69, 
   0x62, 0xA4, 0xAF, 0x3B, 0x5A, 0x83, 0x6D, 0x47, 0x78, 0x66, 0x7A, 0x94, 0x4C, 0x89, 0x72, 0x06, 
   0x42, 0x89, 0x29, 0x00, 0x9A, 0x80, 0x55, 0x66, 0x6B, 0x96, 0x78, 0x3D, 0x86, 0xAB, 0x52, 0x78, 
   0x94, 0x4B, 0x52, 0x7B, 0x5F, 0x4E, 0x7F, 0x24, 0x4B, 0x5C, 0x00, 0x12, 0x62, 0x28, 0x00, 0x76, 
   0x72, 0x6E, 0x7F, 0xA8, 0xFF, 0xD7, 0x41, 0x53, 0x5C, 0x30, 0x43, 0x3B, 0x44, 0x67, 0xA4, 0x9A, 
   0xBC, 0xDE, 0x60, 0x97, 0x6B, 0x30, 0x2C, 0x3B, 0x1E, 0x00, 0x84, 0x30, 0x49, 0x8C, 0x88, 0x8C, 
   0x8D, 0x7D, 0x95, 0x82, 0x21, 0x77, 0x77, 0x3C, 0x53, 0xA4, 0x75, 0x3B, 0x8C, 0x64, 0x79, 0x41, 
   0x2F, 0x88, 0x7A, 0x2F, 0x20, 0xB3, 0x52, 0x31, 0x90, 0x53, 0x5A, 0x56, 0x49, 0x73, 0x47, 0x55, 
   0x8B, 0x79, 0x7D, 0x7A, 0xFF, 0x70, 0x50, 0xC8, 0x29, 0x60, 0x02, 0x27, 0x4E, 0x23, 0x3E, 0x75, 
   0xEB, 0x6C, 0x83, 0xCE, 0x4A, 0x20, 0x3B, 0x43, 0x24, 0x0C, 0x3E, 0x48, 0x39, 0x2E, 0x47, 0xC8, 
   0x79, 0xB5, 0xFF, 0x6D, 0x93, 0x8A, 0x21, 0x4C, 0x36, 0x26, 0x5A, 0x73, 0x49, 0x15, 0x5E, 0x3A, 
   0x1D, 0x8E, 0x8B, 0xAA, 0xD3, 0x90, 0xCE, 0xAF, 0x26, 0xAD, 0x51, 0x06, 0x00, 0x39, 0x1E, 0x00, 
   0x58, 0x2E, 0x57, 0x86, 0xA9, 0xFF, 0xDF, 0x87, 0xA0, 0xD4, 0x12, 0x00, 0x76, 0x1B, 0x1A, 0x51, 
   0x54, 0x66, 0x73, 0x33, 0x68, 0x91, 0x23, 0x48, 0x92, 0x69, 0x61, 0x76, 0x76, 0x8A, 0x9F, 0x54, 
   0x74, 0xA5, 0x31, 0x2B, 0x51, 0x5E, 0x69, 0x84, 0x6F, 0xAD, 0xCF, 0x2F, 0x51, 0x8B, 0x1F, 0x29, 
   0x74, 0x65, 0x58, 0x96, 0x88, 0xA9, 0x6A, 0x58, 0xA7, 0x7D, 0x37, 0x26, 0xE4, 0x00, 0x00, 0x83, 
   0x00, 0x48, 0x38, 0xA4, 0xEE, 0xC7, 0xFF, 0xEA, 0xD7, 0x4D, 0x72, 0x74, 0x00, 0x00, 0x70, 0x1D, 
   0x00, 0x6E, 0x36, 0x70, 0x2C, 0x82, 0xCF, 0xE4, 0x8D, 0x8A, 0xFF, 0x41, 0x31, 0x0D, 0x00, 0x28, 
   0x66, 0x2E, 0x56, 0xDE, 0x69, 0x80, 0x77, 0x75, 0x75, 0x74, 0x4D, 0x35, 0x77, 0x40, 0x57, 0x4A, 
   0x44, 0x90, 0xBC, 0x4F, 0x67, 0xB5, 0x3E, 0x20, 0x0D, 0x59, 0x51, 0x24, 0x58, 0x5C, 0xE2, 0x40, 
   0x5C, 0xD6, 0x19, 0x3B, 0x00, 0x1B, 0x2D, 0x25, 0x57, 0x96, 0xFF, 0xA8, 0xA7, 0xC5, 0x4B, 0x4A, 
   0x62, 0x00, 0x31, 0x5A, 0x42, 0x69, 0x6A, 0x92, 0x7F, 0xB9, 0x4D, 0x4B, 0x90, 0x02, 0x38, 0x0C, 
   0x30, 0x5A, 0x69, 0x70, 0x55, 0xD8, 0x4F, 0x3F, 0xA4, 0x3F, 0x46, 0x37, 0x5B, 0x5F, 0x4E, 0x4A, 
   0x8D, 0xBB, 0x43, 0x4E, 0x8A, 0x2D, 0x2B, 0x3C, 0x41, 0x4E, 0xAF, 0x9D, 0x88, 0xD6, 0x79, 0x76, 
   0x6D, 0x15, 0x47, 0x2D, 0x09, 0x3B, 0x78, 0x44, 0x58, 0x9E, 0x9B, 0x7A, 0xCC, 0x61, 0x57, 0x9B, 
   0x00, 0x3F, 0x21, 0x32, 0x0D, 0x33, 0x62, 0x3F, 0xB0, 0x69, 0xC6, 0xF1, 0x58, 0xC5, 0x94, 0x35, 
   0x00, 0x00, 0x40, 0x21, 0x57, 0x51, 0x9F, 0xFA, 0x79, 0x94, 0xCD, 0x44, 0x42, 0xA6, 0x32, 0x18, 
   0x24, 0x20, 0x30, 0x02, 0x43, 0x72, 0xAA, 0x56, 0x8B, 0xC5, 0x4C, 0x63, 0xAA, 0x73, 0x4B, 0x8B, 
   0x34, 0x2F, 0x57, 0x00, 0x58, 0x5C, 0x7B, 0x99, 0x7A, 0xAE, 0x87, 0xA2, 0x35, 0x62, 0x96, 0x00, 
   0x32, 0x63, 0x72, 0x32, 0x9B, 0x7F, 0x7E, 0x89, 0x25, 0x57, 0x62, 0x58, 0x63, 0x9C, 0x63, 0x7F, 
   0xA1, 0x35, 0x50, 0x83, 0x4B, 0x2D, 0x38, 0x4B, 0x5B, 0x90, 0x35, 0x83, 0xBA, 0x68, 0x6C, 0x8D, 
   0x5C, 0x3E, 0x80, 0x2E, 0x55, 0x6F, 0x50, 0x51, 0x97, 0x71, 0x6D, 0xA1, 0x48, 0x6C, 0x81, 0x1A, 
   0x3E, 0x07, 0x21, 0x5B, 0x43, 0x73, 0x61, 0xC1, 0x3D, 0x58, 0xF2, 0x66, 0x82, 0xA6, 0x92, 0x9D, 
   0x63, 0x23, 0x29, 0x59, 0x27, 0x1C, 0x6A, 0x3E, 0x77, 0x7C, 0x4B, 0x67, 0xA6, 0x5D, 0x3F, 0x8A, 
   0x59, 0x14, 0x7F, 0x5A, 0xAB, 0xB2, 0x75, 0xEA, 0x72, 0x4B, 0x46, 0x60, 0x00, 0x00, 0x65, 0x0D, 
   0x18, 0x36, 0xAA, 0xD4, 0xAD, 0x6D, 0xA4, 0xFF, 0x0D, 0x38, 0xA0, 0x5D, 0x48, 0x33, 0x7A, 0x71, 
   0x57, 0x5D, 0x98, 0xF4, 0x49, 0x4D, 0xFF, 0x26, 0x2A, 0x4B, 0x44, 0x74, 0x09, 0x52, 0x76, 0x94, 
   0x5F, 0x3A, 0xF2, 0x65, 0x79, 0xA8, 0x65, 0x80, 0x6D, 0x6A, 0x37, 0x56, 0x0F, 0x67, 0x86, 0x12, 
   0x97, 0x9B, 0xA4, 0x5B, 0x9F, 0x97, 0x83, 0xE5, 0x80, 0xCC, 0xCD, 0x8C, 0x71, 0x79, 0x05, 0x00, 
   0x32, 0x03, 0x2D, 0x82, 0x91, 0xB7, 0xEA, 0x8C, 0x74, 0xB7, 0x19, 0x56, 0x80, 0x24, 0x45, 0x61, 
   0x21, 0x41, 0x2F, 0x96, 0x93, 0xD8, 0xBE, 0xB5, 0xFF, 0x3D, 0x62, 0x7D, 0x05, 0x2C, 0x2D, 0x2C, 
   0x2C, 0x73, 0x55, 0x8E, 0x69, 0x69, 0xA1, 0x9F, 0x5F, 0x4B, 0xA1, 0x6A, 0x56, 0x8A, 0x48, 0x84, 
   0xAA, 0x37, 0x52, 0x8B, 0x44, 0x32, 0x25, 0x84, 0x8F, 0x77, 0xA9, 0xD7, 0xC3, 0x44, 0x4A, 0xAF, 
   0x00, 0x01, 0x7C, 0x3A, 0x39, 0x3A, 0x5A, 0x8B, 0x45, 0x68, 0x67, 0x97, 0x53, 0x84, 0x8E, 0x38, 
   0x84, 0x9A, 0x7D, 0x29, 0x88, 0xA4, 0x78, 0x60, 0x19, 0x6D, 0x70, 0x00, 0x30, 0x98, 0x6B, 0x76, 
   0x76, 0x85, 0xB5, 0x76, 0x5E, 0x59, 0x87, 0x7F, 0x25, 0x98, 0x77, 0x7A, 0x59, 0x03, 0x7B, 0x55, 
   0x2A, 0x7A, 0xD9, 0xAE, 0x6C, 0x95, 0x6E, 0x53, 0x6B, 0x43, 0x5D, 0x63, 0x00, 0x36, 0x53, 0x1D, 
   0x44, 0x9E, 0xEC, 0xB2, 0x9F, 0x90, 0x96, 0x71, 0x00, 0x23, 0x7B, 0x32, 0x50, 0x86, 0x84, 0x9A, 
   0x76, 0x58, 0x5C, 0x7C, 0x3C, 0x3F, 0x88, 0x6E, 0xA6, 0xA9, 0x68, 0xA5, 0x74, 0x44, 0x36, 0x3F, 
   0x1B, 0x22, 0x79, 0x44, 0x50, 0xAE, 0x89, 0x7A, 0x7B, 0x71, 0x86, 0x65, 0x19, 0x68, 0x83, 0x3A, 
   0x44, 0xA0, 0x5D, 0x65, 0x84, 0x37, 0x4F, 0x83, 0x54, 0x46, 0x66, 0x60, 0xA9, 0x6D, 0x87, 0xC9, 
   0xD8, 0x66, 0x51, 0x86, 0x02, 0x0C, 0x2F, 0x00, 0x06, 0x73, 0x22, 0x2D, 0xA2, 0xAA, 0xA5, 0x65, 
   0xAB, 0xCA, 0x84, 0x00, 0x0A, 0xB3, 0x2F, 0x5A, 0x6A, 0x14, 0x4F, 0x59, 0x71, 0x7D, 0x99, 0x56, 
   0x72, 0x9A, 0x61, 0x71, 0x83, 0x6B, 0x74, 0x6B, 0x15, 0x4A, 0x86, 0x31, 0x27, 0x7B, 0x93, 0x50, 
   0x5A, 0x70, 0xA2, 0xB0, 0x1E, 0x70, 0xBF, 0x00, 0x42, 0x2F, 0x57, 0x5E, 0x2E, 0x80, 0x92, 0xC3, 
   0x2C, 0x80, 0x86, 0x3D, 0x67, 0x59, 0x6B, 0x42, 0xB3, 0x54, 0x40, 0x6E, 0x48, 0x0F, 0x2A, 0x3C, 
   0x68, 0x88, 0x4E, 0xD7, 0xCB, 0x65, 0x96, 0xE6, 0x74, 0x00, 0x76, 0x17, 0x48, 0x00, 0x33, 0xA3, 
   0x9A, 0x61, 0x84, 0xD9, 0x50, 0x00, 0x44, 0x2E, 0x0B, 0x0C, 0x45, 0xA2, 0xAF, 0x6D, 0xBA, 0xE5, 
   0x44, 0x30, 0x7A, 0x2D, 0x23, 0x79, 0x61, 0x6D, 0xAA, 0x61, 0xA1, 0x81, 0x33, 0x4A, 0x62, 0x33, 
   0x00, 0x51, 0x4B, 0x70, 0x64, 0x84, 0xFF, 0xC2, 0x55, 0x52, 0xD9, 0x0F, 0x00, 0x5A, 0x20, 0x49, 
   0x2C, 0x5B, 0x8D, 0x84, 0x47, 0xA0, 0xD7, 0x7B, 0x98, 0xA4, 0x67, 0x22, 0x59, 0x0A, 0x00, 0x53, 
   0x28, 0x62, 0xB0, 0x7A, 0x87, 0xC8, 0x86, 0x66, 0x73, 0x1F, 0x4B, 0x77, 0x19, 0x63, 0x77, 0x76, 
   0x87, 0x95, 0x88, 0x93, 0xB1, 0x4D, 0x64, 0x82, 0x07, 0x40, 0x3D, 0x40, 0x4B, 0x56, 0x69, 0x4D, 
   0xDD, 0x44, 0x7D, 0xEF, 0x83, 0xB0, 0x60, 0x8C, 0x74, 0x37, 0x16, 0x00, 0x9F, 0x00, 0x04, 0xC9, 
   0x24, 0x5E, 0x95, 0x9C, 0xA9, 0x50, 0xB1, 0xDF, 0x9F, 0x6B, 0x86, 0xDD, 0x1D, 0x0A, 0x74, 0x26, 
   0x44, 0x3E, 0x48, 0x4E, 0x88, 0x5A, 0x4F, 0xA4, 0x80, 0xB0, 0x92, 0x2F, 0x7A, 0x73, 0x23, 0x01, 
   0x5C, 0x51, 0x34, 0xB2, 0x4D, 0x8C, 0xB6, 0x42, 0x77, 0x53, 0x69, 0x60, 0x5C, 0x62, 0x6A, 0xBB, 
   0x05, 0x5C, 0x5A, 0x10, 0x2C, 0x31, 0x82, 0x52, 0x98, 0x7B, 0x85, 0xC6, 0x24, 0x50, 0x80, 0x01, 
   0x12, 0x2A, 0x47, 0x3C, 0x64, 0x4A, 0x79, 0x9A, 0x52, 0xA4, 0x7B, 0x92, 0x8C, 0xBB, 0x68, 0x49, 
   0xA8, 0x32, 0x35, 0x4F, 0x34, 0x4A, 0x7D, 0x2E, 0x4F, 0x43, 0x2F, 0x61, 0x4F, 0x53, 0x5B, 0xA0, 
   0x4F, 0x50, 0x54, 0x6D, 0x50, 0xAC, 0x6C, 0x6D, 0xEF, 0x15, 0x35, 0x2B, 0x20, 0x42, 0x1E, 0x65, 
   0x8D, 0x8C, 0x5B, 0x7C, 0xA7, 0x4B, 0x25, 0xBF, 0x4B, 0x52, 0x75, 0x3A, 0x7B, 0x3C, 0x6D, 0x5E, 
   0xCF, 0x60, 0x3B, 0xAB, 0x00, 0x57, 0x00, 0x1A, 0x40, 0x50, 0x6C, 0x4C, 0xBF, 0x79, 0x74, 0xBB, 
   0x56, 0x52, 0x90, 0x27, 0x58, 0x49, 0x32, 0x4D, 0x44, 0x44, 0x38, 0x63, 0x4C, 0x52, 0x90, 0x64, 
   0x9D, 0xC6, 0x64, 0xA2, 0x89, 0x57, 0x49, 0x9E, 0x3E, 0x46, 0xAB, 0x2B, 0x23, 0x42, 0x42, 0x41, 
   0x3C, 0x4E, 0x81, 0xBF, 0x3F, 0x67, 0x83, 0x4C, 0x46, 0x62, 0x85, 0x8A, 0x9C, 0x56, 0x55, 0xC4, 
   0x00, 0x10, 0x8A, 0x39, 0x3A, 0x34, 0x6F, 0x97, 0x7E, 0x69, 0x85, 0xCA, 0x45, 0x39, 0x91, 0x2C, 
   0x3C, 0x9F, 0x05, 0x5E, 0x64, 0x5C, 0x44, 0x37, 0x8B, 0x4B, 0xA0, 0x2B, 0x85, 0xE1, 0x41, 0x6E, 
   0x79, 0x6E, 0x4A, 0x6A, 0x40, 0x5F, 0x68, 0x39, 0x43, 0x26, 0x50, 0x44, 0x7F, 0x57, 0x83, 0xF4, 
   0x4C, 0x78, 0xAB, 0x5C, 0x50, 0x86, 0x77, 0x4F, 0x82, 0x19, 0x5F, 0x5C, 0x01, 0x48, 0x39, 0x36, 
   0x3D, 0x58, 0x73, 0x77, 0xAD, 0x65, 0x78, 0xBC, 0x70, 0x4B, 0xA5, 0x20, 0x25, 0x5F, 0x58, 0xA3, 
   0xA1, 0x89, 0xAD, 0xC0, 0x16, 0x0C, 0x24, 0x06, 0x1C, 0x0E, 0x7A, 0x9A, 0xC2, 0xAD, 0xA0, 0xFF, 
   0x22, 0x37, 0x78, 0x00, 0x00, 0x00, 0x52, 0x87, 0x88, 0xBB, 0xFF, 0xE5, 0x8C, 0x5E, 0x8F, 0x00, 
   0x00, 0x37, 0x00, 0x0C, 0x0C, 0x97, 0xDF, 0x80, 0x68, 0x89, 0xFF, 0x26, 0x46, 0xD7, 0xA8, 0xA4, 
   0x6D, 0x7E, 0x63, 0x6E, 0x00, 0x0A, 0x34, 0x18, 0x4E, 0x75, 0x5A, 0x3B, 0xA0, 0x69, 0x95, 0xC5, 
   0x65, 0xB9, 0xAA, 0x71, 0x3C, 0x86, 0x5A, 0x48, 0x8F, 0x42, 0x88, 0x6C, 0x1B, 0x85, 0x57, 0x2F, 
   0x59, 0x99, 0x94, 0x81, 0xE0, 0xB0, 0x92, 0xAE, 0x31, 0x7E, 0x74, 0x19, 0x4E, 0x52, 0x9C, 0x4D, 
   0xC5, 0x89, 0xA6, 0xBF, 0x2A, 0x5A, 0xAB, 0x00, 0x03, 0x9F, 0x45, 0x71, 0x03, 0x59, 0x7A, 0x16, 
   0x6D, 0x5B, 0xFF, 0x89, 0xBC, 0xFF, 0x55, 0x91, 0x5D, 0x48, 0x11, 0x80, 0x5D, 0x49, 0x88, 0x12, 
   0x8E, 0x4E, 0x30, 0x5C, 0xA9, 0xB9, 0x6C, 0x8D, 0x68, 0x60, 0x88, 0x00, 0x3E, 0x87, 0x3B, 0x56, 
   0x80, 0x9B, 0x59, 0x48, 0x9D, 0x90, 0x9F, 0x78, 0xC3, 0xD8, 0x3F, 0x92, 0x9C, 0x2A, 0x59, 0x4D, 
   0x28, 0x05, 0x3F, 0x08, 0x11, 0x73, 0x67, 0x71, 0x97, 0xAE, 0xEB, 0x7C, 0x5E, 0x73, 0x88, 0x00, 
   0x00, 0x93, 0x21, 0x5C, 0x6B, 0xC3, 0xD6, 0x81, 0xC1, 0x8D, 0x81, 0x00, 0x25, 0x76, 0x00, 0x47, 
   0x98, 0xD4, 0x98, 0x76, 0xFF, 0x92, 0x70, 0x00, 0x20, 0x8D, 0x00, 0x4F, 0x9D, 0xE2, 0xFA, 0x59, 
   0x53, 0x97, 0x6C, 0x00, 0x00, 0xB6, 0x7D, 0x34, 0x83, 0x61, 0x5D, 0x81, 0x39, 0x71, 0x6E, 0x4F, 
   0x94, 0x53, 0x17, 0x34, 0xA4, 0x62, 0x52, 0xAA, 0x91, 0xB9, 0x65, 0x42, 0x6E, 0x6A, 0x57, 0x2E, 
   0x8C, 0x3A, 0x4F, 0x76, 0x30, 0x4A, 0x87, 0x81, 0x90, 0x82, 0x9C, 0xC8, 0xA8, 0x0C, 0x58, 0x68, 
   0x31, 0x00, 0x55, 0x69, 0x54, 0x72, 0x42, 0x8F, 0x7F, 0x3C, 0x68, 0x7B, 0x53, 0x58, 0x88, 0x5F, 
   0x74, 0x8F, 0x5F, 0x85, 0x89, 0x2C, 0x45, 0x84, 0x43, 0x50, 0x8F, 0x81, 0x8F, 0x93, 0x74, 0x8D, 
   0x76, 0x21, 0x5B, 0x6F, 0x00, 0x00, 0x7A, 0x1D, 0x00, 0x75, 0xAA, 0x8E, 0x76, 0x9A, 0xFD, 0x99, 
   0x37, 0x62, 0x88, 0x01, 0x00, 0x6C, 0x49, 0x78, 0xA8, 0x49, 0x89, 0xC9, 0x49, 0x54, 0x4A, 0x44, 
   0x31, 0x33, 0x4A, 0x4F, 0xB7, 0x5D, 0xA5, 0xC9, 0x7F, 0xA4, 0x50, 0x66, 0x57, 0x6C, 0x1F, 0x1B, 
   0xB0, 0x29, 0x37, 0x92, 0x6D, 0x6D, 0x74, 0x61, 0x7B, 0x72, 0x00, 0x81, 0x60, 0x30, 0x43, 0x6D, 
   0x89, 0x5A, 0xAE, 0x79, 0xAE, 0x98, 0x4B, 0x78, 0x49, 0x49, 0x03, 0x99, 0x64, 0x2A, 0x9E, 0x2F, 
   0x6C, 0x70, 0x35, 0x7F, 0x6B, 0x52, 0x7A, 0x62, 0x6A, 0x6D, 0xE0, 0x69, 0x59, 0xF3, 0x45, 0x52, 
   0x00, 0x17, 0x30, 0x10, 0x57, 0x6A, 0xAF, 0x69, 0x7C, 0xE1, 0x74, 0x82, 0xB3, 0x56, 0x90, 0x55, 
   0x10, 0x2D, 0x37, 0x2C, 0x15, 0x9A, 0x6D, 0x66, 0xAC, 0x68, 0x58, 0x94, 0x45, 0x6C, 0x7A, 0x43, 
   0xAF, 0x33, 0x2B, 0x4A, 0x3A, 0x15, 0x00, 0x93, 0x6D, 0x34, 0xC5, 0x74, 0xA6, 0xBB, 0x58, 0xCA, 
   0xA2, 0x45, 0x82, 0x55, 0x39, 0x00, 0x4E, 0x45, 0x27, 0x67, 0x62, 0x84, 0x81, 0x40, 0x81, 0xAC, 
   0x36, 0x4A, 0x91, 0x70, 0x67, 0x81, 0x70, 0x73, 0xB3, 0x3B, 0x79, 0x96, 0x08, 0x2A, 0x61, 0x64, 
   0x53, 0x7E, 0x92, 0xC0, 0xC7, 0x30, 0x6F, 0x76, 0x13, 0x01, 0x26, 0x41, 0x3B, 0x89, 0x5E, 0xA4, 
   0xB4, 0x65, 0xB0, 0xA0, 0x54, 0x5F, 0xBD, 0x48, 0x31, 0x83, 0x2C, 0x6A, 0x28, 0x5A, 0x8C, 0xAC, 
   0x87, 0x4E, 0xF8, 0x15, 0x3D, 0x7F, 0x00, 0x46, 0x44, 0x86, 0x88, 0xAA, 0xB1, 0xF0, 0xA6, 0x55, 
   0xA3, 0x9A, 0x5C, 0x01, 0xD4, 0x46, 0x12, 0x31, 0x00, 0x3A, 0x0D, 0x51, 0x5E, 0xE5, 0x8C, 0x8C, 
   0xB8, 0x43, 0x58, 0x3A, 0x4D, 0x2B, 0x9F, 0x3B, 0x6C, 0x9E, 0x5D, 0xA0, 0x69, 0x4C, 0x82, 0x7D, 
   0x4B, 0x23, 0x48, 0x55, 0x3C, 0x49, 0x42, 0x7F, 0xD9, 0x3B, 0x57, 0xE8, 0x2F, 0x23, 0x02, 0x25, 
   0x30, 0x0E, 0x4F, 0x5C, 0xEA, 0x73, 0x97, 0xD6, 0x73, 0x75, 0x48, 0x13, 0x4B, 0x64, 0x62, 0x6A, 
   0xEC, 0xA9, 0x6D, 0xC6, 0x11, 0x20, 0x11, 0x00, 0x1A, 0x2A, 0x2E, 0x65, 0x6B, 0x7C, 0x62, 0x86, 
   0x79, 0x68, 0xCC, 0x4B, 0x51, 0x6B, 0x38, 0x4C, 0x38, 0x5F, 0x63, 0xD6, 0x31, 0x58, 0x69, 0x1B, 
   0x3C, 0x00, 0x61, 0x65, 0xAB, 0x84, 0x97, 0xC9, 0x44, 0x41, 0x52, 0x32, 0x23, 0x6D, 0x21, 0x5C, 
   0x79, 0x7D, 0x7F, 0x96, 0x77, 0x5D, 0xA5, 0x1A, 0x40, 0x27, 0x00, 0x3A, 0x45, 0x61, 0x5E, 0xBA, 
   0xA7, 0x76, 0xD7, 0x5B, 0x8C, 0x8F, 0x04, 0x4B, 0x25, 0x20, 0x00, 0x00, 0x4B, 0x39, 0x90, 0x75, 
   0xE8, 0xFF, 0x7B, 0xB3, 0xFF, 0x56, 0x20, 0x45, 0x0F, 0x00, 0x02, 0x1F, 0x51, 0x58, 0x54, 0x87, 
   0xD3, 0x44, 0x60, 0x9B, 0x57, 0x55, 0x77, 0x73, 0x5B, 0x6A, 0x50, 0x55, 0x59, 0x0B, 0x5B, 0x8F, 
   0x5B, 0x72, 0xB3, 0x7E, 0x67, 0x9C, 0x45, 0x39, 0x62, 0x17, 0x5A, 0x72, 0x78, 0x6A, 0xB5, 0x7D, 
   0x5E, 0x8C, 0x1C, 0x3C, 0x25, 0x28, 0x49, 0x64, 0x6E, 0x83, 0xA5, 0x74, 0x68, 0xA0, 0x3B, 0x68, 
   0x99, 0x4C, 0x6C, 0x63, 0x5C, 0x4F, 0x57, 0x34, 0x4E, 0x75, 0x4A, 0x4E, 0x66, 0x39, 0x44, 0x86, 
   0x5C, 0x83, 0xD7, 0x78, 0x72, 0xC9, 0x4D, 0x4E, 0x62, 0x01, 0x30, 0x00, 0x12, 0x47, 0x2E, 0x49, 
   0x70, 0xC8, 0x91, 0x4F, 0xE3, 0x6A, 0x55, 0x9E, 0x42, 0x61, 0x3B, 0x5C, 0x67, 0x84, 0x22, 0x34, 
   0xAB, 0x44, 0x52, 0x88, 0x57, 0xA7, 0x64, 0x52, 0x40, 0x6A, 0x68, 0x39, 0x7C, 0x61, 0x8C, 0xB0, 
   0x15, 0x46, 0x82, 0x2C, 0x00, 0x4E, 0x2F, 0x17, 0x78, 0x82, 0xB1, 0xC3, 0xB0, 0xFF, 0xA7, 0x46, 
   0x63, 0x71, 0x00, 0x00, 0x27, 0x00, 0x00, 0x31, 0xAB, 0xE7, 0xCD, 0xAE, 0xFF, 0xFF, 0x30, 0x44, 
   0xEE, 0x49, 0x3F, 0x00, 0x47, 0x42, 0x00, 0x25, 0x38, 0xB2, 0x38, 0x5D, 0xFF, 0x6D, 0x83, 0x9F, 
   0x6F, 0x9C, 0x7C, 0x49, 0x5F, 0x8B, 0x65, 0x4F, 0x8A, 0x1D, 0x84, 0x95, 0x5D, 0x7A, 0x85, 0xAE, 
   0x69, 0xA8, 0x64, 0xA1, 0x8B, 0x1D, 0x7C, 0x69, 0x43, 0x00, 0x5B, 0x2A, 0x49, 0xAF, 0x9E, 0xFF, 
   0xFF, 0xDA, 0x86, 0xFF, 0x14, 0x00, 0x74, 0x00, 0x40, 0x03, 0x35, 0x2D, 0x58, 0x94, 0x93, 0xC9, 
   0xBC, 0xFB, 0xE2, 0x1A, 0x54, 0xA6, 0x00, 0x01, 0x4C, 0x7A, 0x67, 0x78, 0x78, 0x8B, 0xAC, 0x6D, 
   0x8B, 0xA5, 0x76, 0x6C, 0x88, 0x24, 0x32, 0x70, 0x3E, 0x71, 0x96, 0x33, 0x6C, 0x73, 0x0F, 0x1F, 
   0x42, 0xA0, 0x7D, 0xA5, 0xCE, 0xEB, 0xF5, 0x58, 0x7C, 0xAD, 0x00, 0x2E, 0x52, 0x23, 0x4D, 0x38, 
   0x52, 0x63, 0x55, 0x49, 0x42, 0x97, 0x56, 0x71, 0x9F, 0x62, 0x8E, 0x84, 0x52, 0x55, 0x8E, 0x3C, 
   0x3E, 0x70, 0x4E, 0x73, 0x81, 0x45, 0x5F, 0x81, 0x7F, 0x88, 0x81, 0x89, 0xA4, 0x81, 0x3D, 0x4C, 
   0x76, 0x14, 0x1E, 0x8D, 0x55, 0x70, 0x87, 0x8A, 0xAB, 0x70, 0x63, 0x8F, 0x76, 0x4B, 0x54, 0xA3, 
   0x91, 0x73, 0x59, 0x27, 0x5E, 0x5A, 0x00, 0x08, 0xC7, 0x7F, 0x59, 0x88, 0xBE, 0xB6, 0x6A, 0x55, 
   0x61, 0x74, 0x00, 0x45, 0x53, 0x01, 0x52, 0xA4, 0xCC, 0x98, 0xB0, 0xC8, 0xA3, 0x6B, 0x09, 0x3B, 
   0x6F, 0x00, 0x45, 0x8C, 0x7F, 0x99, 0x7B, 0x5E, 0x5B, 0x76, 0x3C, 0x4F, 0x8D, 0x84, 0x7B, 0xB9, 
   0x6B, 0x6D, 0x6C, 0x13, 0x32, 0x21, 0x1D, 0x3D, 0x72, 0x3B, 0x4A, 0xB3, 0x6B, 0x7A, 0x93, 0x67, 
   0x81, 0x66, 0x3F, 0x5F, 0x78, 0x60, 0x7A, 0x95, 0x5E, 0x82, 0xB6, 0x4B, 0x34, 0x86, 0x33, 0x21, 
   0x2A, 0x28, 0x39, 0x7B, 0x30, 0x54, 0xC7, 0x89, 0x96, 0x78, 0x95, 0xB9, 0x6C, 0x4E, 0x67, 0x99, 
   0x01, 0x1F, 0x98, 0x6C, 0x56, 0x4D, 0x75, 0x78, 0x9E, 0x90, 0x89, 0xB4, 0x28, 0x4F, 0x5D, 0x38, 
   0x43, 0x57, 0x2E, 0x60, 0x85, 0x58, 0x68, 0xA2, 0xAE, 0xA1, 0x9D, 0x77, 0x9E, 0x7F, 0x01, 0x3E, 
   0x9E, 0x1C, 0x00, 0x62, 0x66, 0x42, 0x50, 0x6D, 0xA7, 0xAB, 0x1E, 0x76, 0xA5, 0x1A, 0x4F, 0x3F, 
   0x78, 0x71, 0x7F, 0x7A, 0x76, 0x98, 0x6E, 0x64, 0x72, 0x44, 0x5C, 0xA1, 0x30, 0x6C, 0xC8, 0x40, 
   0x64, 0x6F, 0x39, 0x20, 0x0D, 0x23, 0x50, 0x6F, 0x5E, 0xD9, 0xE4, 0x81, 0x6B, 0xC7, 0x42, 0x00, 
   0x46, 0x2A, 0x37, 0x00, 0x3B, 0xB3, 0xB8, 0x8B, 0xD5, 0xFF, 0x63, 0x48, 0x81, 0x22, 0x00, 0x0A, 
   0x4E, 0x70, 0x5E, 0x3E, 0x65, 0x93, 0x2E, 0x00, 0x90, 0x63, 0x42, 0xA1, 0x8A, 0xCF, 0x8F, 0x4F, 
   0xEF, 0x6F, 0x1F, 0x16, 0x68, 0x00, 0x00, 0x2B, 0x3A, 0x36, 0x64, 0xAA, 0xFF, 0xFC, 0x9F, 0xDE, 
   0xFF, 0x24, 0x27, 0x4F, 0x2C, 0x03, 0x02, 0x2C, 0x00, 0x60, 0x2E, 0x7A, 0xC1, 0x7B, 0xB2, 0xBF, 
   0x93, 0x80, 0x99, 0x26, 0x4D, 0x82, 0x1A, 0x63, 0x8D, 0x70, 0x58, 0xA3, 0x8B, 0x6F, 0x90, 0x23, 
   0x85, 0x8E, 0x07, 0x35, 0x54, 0x69, 0x52, 0x7D, 0x8D, 0x76, 0xD9, 0x4F, 0x72, 0x8A, 0x25, 0x93, 
   0x40, 0x51, 0x5D, 0x76, 0x41, 0x00, 0xC3, 0x05, 0x67, 0xD6, 0x86, 0xCB, 0x85, 0xE2, 0x9D, 0x40, 
   0x45, 0x71, 0x91, 0x00, 0x01, 0xFF, 0x00, 0x00, 0x73, 0x2F, 0x76, 0x00, 0xB8, 0xFF, 0xDB, 0xE6, 
   0xFE, 0xFF, 0x53, 0x73, 0x4A, 0x00, 0x00, 0x6C, 0x0B, 0x00, 0x91, 0x3B, 0x63, 0x41, 0x88, 0xAA, 
   0xBD, 0x88, 0x71, 0x9A, 0x37, 0x27, 0x34, 0x46, 0x4F, 0xC1, 0x24, 0x94, 0xBA, 0x36, 0x6C, 0x19, 
   0x9C, 0x57, 0x7E, 0x78, 0x70, 0xE4, 0x2A, 0x35, 0x7C, 0x00, 0x1E, 0x0E, 0x3C, 0x4E, 0x70, 0x78, 
   0x79, 0xB7, 0x63, 0xAE, 0x75, 0x62, 0x57, 0x8C, 0x28, 0x44, 0x9C, 0x43, 0x70, 0x73, 0x59, 0x5D, 
   0x6B, 0x58, 0x56, 0xA2, 0x34, 0x54, 0x79, 0x2E, 0x36, 0x44, 0x1E, 0x2C, 0x56, 0x6B, 0x62, 0x9C, 
   0x78, 0x7A, 0x9D, 0x4A, 0x52, 0x69, 0x2C, 0x4D, 0x4D, 0x54, 0x6F, 0x76, 0x54, 0x5D, 0xC2, 0x2C, 
   0x41, 0x99, 0x43, 0x58, 0x3D, 0x5A, 0x6F, 0x49, 0x4E, 0x6E, 0xB7, 0x31, 0x39, 0xA6, 0x26, 0x28, 
   0x51, 0x44, 0x62, 0x6E, 0x8F, 0x74, 0xD0, 0x55, 0x52, 0xA6, 0x0F, 0x3B, 0x1C, 0x26, 0x59, 0x5C, 
   0x6C, 0x81, 0xD5, 0x6D, 0x86, 0xA2, 0x4A, 0x13, 0x46, 0x21, 0x2F, 0x4C, 0x4A, 0x87, 0x89, 0x79, 
   0x77, 0xC0, 0x62, 0x54, 0xE1, 0x33, 0x42, 0x65, 0x32, 0x47, 0x00, 0x49, 0x65, 0x99, 0x44, 0x6B, 
   0xDA, 0x45, 0x49, 0x85, 0x84, 0x71, 0x7C, 0x3F, 0x5A, 0x74, 0x16, 0x43, 0x4B, 0x3F, 0x49, 0x48, 
   0x7E, 0x7E, 0x95, 0x45, 0x8E, 0xDB, 0x38, 0x3C, 0x95, 0x42, 0x0D, 0x64, 0x2C, 0x68, 0x56, 0x5B, 
   0x64, 0x3B, 0x7D, 0x3D, 0xA4, 0x38, 0x8D, 0xCC, 0x11, 0x49, 0x64, 0x67, 0x32, 0x6E, 0x68, 0x66, 
   0x8B, 0x2A, 0x60, 0x6A, 0x51, 0x6B, 0x82, 0x6D, 0x5F, 0xB0, 0x28, 0x53, 0x82, 0x33, 0x4E, 0x43, 
   0x7C, 0x5A, 0xA4, 0x48, 0x7C, 0xB3, 0x0E, 0x4E, 0x46, 0x3C, 0x42, 0x46, 0x65, 0x64, 0x8D, 0x44, 
   0x59, 0xBE, 0x4B, 0x4E, 0xAD, 0x57, 0x49, 0x62, 0x57, 0x7D, 0x8E, 0x61, 0x6B, 0x87, 0x37, 0x2D, 
   0x59, 0x00, 0x34, 0x77, 0x80, 0x9D, 0xBD, 0xCB, 0xCA, 0xD3, 0x1D, 0x2D, 0x63, 0x00, 0x00, 0x00, 
   0x54, 0x63, 0x86, 0x84, 0xA8, 0xEF, 0x40, 0x25, 0x94, 0x13, 0x00, 0x2D, 0x59, 0xA5, 0xA6, 0xA3, 
   0xFF, 0xB3, 0x52, 0x54, 0x9C, 0x00, 0x00, 0x58, 0x25, 0x58, 0x49, 0xAF, 0xE5, 0xDF, 0x49, 0x7A, 
   0xB2, 0x05, 0x29, 0x67, 0x6C, 0x50, 0x60, 0x78, 0x63, 0x79, 0x3E, 0x6F, 0xA5, 0x2D, 0x5E, 0xA8, 
   0x45, 0x28, 0xA9, 0x63, 0x8D, 0x97, 0x22, 0xA7, 0x80, 0x80, 0x36, 0x9D, 0xA4, 0x68, 0xB8, 0x70, 
   0xAB, 0x9F, 0x55, 0x7B, 0x42, 0x00, 0x13, 0x44, 0x0F, 0x47, 0xA4, 0xD3, 0xA8, 0xF8, 0x68, 0x70, 
   0xD1, 0x0C, 0x6A, 0x9F, 0x8D, 0x95, 0x56, 0x1C, 0x17, 0x33, 0x55, 0x34, 0xAC, 0xA9, 0xCA, 0xFF, 
   0x41, 0x98, 0x82, 0x33, 0x3B, 0x2E, 0x39, 0x2F, 0x81, 0x0F, 0x85, 0x6C, 0x85, 0x9D, 0xA1, 0xD6, 
   0x63, 0xB1, 0x61, 0x50, 0x82, 0x00, 0x54, 0x91, 0x00, 0x39, 0x6D, 0x9D, 0x63, 0x2F, 0x99, 0xA5, 
   0x8D, 0x31, 0x9A, 0xFB, 0x45, 0x6F, 0xA2, 0x54, 0x49, 0x69, 0x3C, 0x3C, 0x26, 0x26, 0x38, 0x5A, 
   0x51, 0x8A, 0x9B, 0xAD, 0xC8, 0x77, 0x5C, 0x5A, 0x95, 0x00, 0x00, 0xD4, 0x46, 0x71, 0x66, 0xA4, 
   0xC3, 0x64, 0x6C, 0x47, 0x8C, 0x11, 0x25, 0x81, 0x1F, 0x8D, 0x81, 0xDC, 0xAA, 0x81, 0xE4, 0x6A, 
   0x7B, 0x00, 0x13, 0x87, 0x00, 0x4E, 0x99, 0xE9, 0xCD, 0x87, 0xE1, 0xB5, 0x7B, 0x07, 0x07, 0x7B, 
   0x36, 0x44, 0x98, 0x6D, 0x8E, 0x76, 0x24, 0x83, 0x5A, 0x57, 0x60, 0xC7, 0x7F, 0x49, 0x93, 0x40, 
   0x50, 0x6F, 0x51, 0x84, 0x74, 0x5D, 0x8B, 0x53, 0x26, 0x41, 0xA4, 0x93, 0x64, 0xB5, 0x83, 0xB4, 
   0x54, 0x32, 0x80, 0x75, 0x57, 0x44, 0x8C, 0x34, 0x58, 0x81, 0x40, 0x2B, 0x81, 0x84, 0x87, 0x8C, 
   0x88, 0xBF, 0x96, 0x24, 0x56, 0x6C, 0x07, 0x1B, 0x55, 0x58, 0x4E, 0x68, 0x66, 0x73, 0xA3, 0x4B, 
   0x7C, 0x8E, 0x74, 0x82, 0x6D, 0x89, 0x9C, 0xC1, 0x57, 0x69, 0x7B, 0x00, 0x2B, 0x41, 0x04, 0x00, 
   0x75, 0x42, 0x1A, 0x93, 0xA2, 0xD8, 0x6E, 0xB3, 0xFF, 0xBE, 0x32, 0x59, 0xA0, 0x01, 0x00, 0x65, 
   0x66, 0x4A, 0x69, 0x45, 0x6D, 0x7F, 0x58, 0x5A, 0x69, 0x5E, 0x4F, 0x48, 0x6D, 0x72, 0xD2, 0x18, 
   0x78, 0xD2, 0x46, 0x73, 0x42, 0x96, 0x67, 0x47, 0x51, 0x6C, 0xD1, 0x38, 0x88, 0xE1, 0x63, 0x7A, 
   0x4E, 0x44, 0x49, 0x55, 0x00, 0x1F, 0x81, 0x29, 0x38, 0x60, 0x87, 0x80, 0x89, 0x72, 0x9F, 0xAB, 
   0x23, 0x66, 0x29, 0x56, 0x38, 0x59, 0x8F, 0x60, 0xD4, 0x55, 0xBB, 0xAD, 0x31, 0x96, 0x72, 0x63, 
   0x04, 0x81, 0x45, 0x19, 0x6E, 0x2E, 0x8C, 0x73, 0x46, 0x65, 0x68, 0x4E, 0x4E, 0x42, 0x6B, 0x44, 
   0xA7, 0x71, 0x5D, 0xE2, 0x58, 0xA8, 0x6A, 0x2E, 0x7E, 0x5E, 0x3F, 0x41, 0xB9, 0x3F, 0x22, 0x9C, 
   0x39, 0x3E, 0x61, 0x56, 0x78, 0x60, 0x4B, 0x47, 0x7D, 0x4B, 0x6B, 0x9C, 0x56, 0xD7, 0xBF, 0x4F, 
   0x3D, 0xA7, 0x33, 0x00, 0x61, 0x3F, 0x98, 0x44, 0x51, 0x78, 0x85, 0x42, 0x51, 0xA3, 0x87, 0xA6, 
   0xCB, 0x7A, 0x6B, 0x7E, 0x06, 0x1E, 0x3E, 0x27, 0x56, 0x56, 0x39, 0x42, 0x9E, 0x5E, 0x57, 0x97, 
   0x66, 0xA3, 0xAA, 0x49, 0x7C, 0xA5, 0x38, 0x31, 0x7C, 0x6A, 0x59, 0x92, 0x7A, 0xB3, 0xB9, 0x1D, 
   0x50, 0x83, 0x06, 0x00, 0x32, 0x52, 0x4E, 0x94, 0x83, 0xD4, 0xC3, 0x95, 0xC8, 0x96, 0x59, 0x2B, 
   0x62, 0x00, 0x00, 0x69, 0x02, 0x52, 0x78, 0x6D, 0xA2, 0xC0, 0xAA, 0xB1, 0xEE, 0x88, 0x99, 0x6F, 
   0x46, 0x51, 0x4B, 0x20, 0x2C, 0x7F, 0x1F, 0x48, 0xD1, 0x22, 0x51, 0xAA, 0x7B, 0x6C, 0x80, 0xA5, 
   0xCE, 0x6E, 0x76, 0xD2, 0xB1, 0x12, 0x3E, 0xBB, 0x3D, 0x06, 0x8A, 0x53, 0x54, 0x68, 0x37, 0x55, 
   0x33, 0x59, 0x67, 0x93, 0x5E, 0xA0, 0xC1, 0x37, 0x61, 0x61, 0x5E, 0x1C, 0x6C, 0x74, 0x8D, 0xB5, 
   0x40, 0xA7, 0x8C, 0x54, 0x32, 0x8D, 0x25, 0x19, 0x2A, 0x14, 0x26, 0x20, 0x3F, 0x6E, 0xC8, 0x7A, 
   0xAF, 0xDC, 0x8A, 0x75, 0x58, 0x22, 0x49, 0x40, 0x37, 0x2A, 0xD9, 0x8B, 0x5B, 0xB4, 0x1D, 0x4A, 
   0x1D, 0x00, 0x44, 0x17, 0x5E, 0x6C, 0xDB, 0x82, 0x55, 0xB6, 0x54, 0x3F, 0x70, 0x1A, 0x62, 0x6D, 
   0x36, 0x41, 0x34, 0x5F, 0x64, 0x90, 0x54, 0x7B, 0xAD, 0x27, 0x4D, 0x2D, 0x4A, 0x41, 0xAC, 0x8E, 
   0x79, 0xE5, 0x37, 0x4B, 0x49, 0x1A, 0x2E, 0x3C, 0x58, 0x62, 0x9E, 0x42, 0x7E, 0x89, 0x54, 0x3F, 
   0x73, 0x49, 0x22, 0x79, 0x22, 0x63, 0x75, 0x84, 0x81, 0xB3, 0x83, 0x5A, 0xAC, 0x1A, 0x5E, 0x38, 
   0x00, 0x51, 0x48, 0x60, 0x08, 0x69, 0x8A, 0x70, 0xCE, 0x5C, 0xBA, 0xD5, 0x27, 0x63, 0x99, 0x36, 
   0x00, 0x3A, 0x31, 0x12, 0x18, 0x3E, 0x81, 0x82, 0x72, 0xA0, 0xFF, 0x51, 0x61, 0x74, 0x4C, 0x44, 
   0x5C, 0x6D, 0x65, 0xB6, 0x33, 0x48, 0x99, 0x27, 0x53, 0x53, 0x44, 0x53, 0x79, 0x7E, 0x5F, 0x80, 
   0x3A, 0x6B, 0x77, 0x3F, 0x5A, 0xA0, 0x54, 0x64, 0xC1, 0x3C, 0x57, 0x90, 0x1A, 0x13, 0x01, 0x49, 
   0x47, 0x5E, 0x66, 0xA3, 0xFF, 0x55, 0x54, 0xBB, 0x32, 0x4E, 0x61, 0x21, 0x59, 0x48, 0x6D, 0x4E, 
   0x4A, 0x6E, 0x4E, 0xAF, 0x4C, 0x5F, 0xBD, 0x3A, 0x5F, 0x7E, 0x56, 0x53, 0x82, 0x6B, 0x6F, 0xA6, 
   0x30, 0x46, 0x43, 0x0D, 0x3B, 0x00, 0x31, 0x6A, 0x97, 0x6D, 0x76, 0xE5, 0x85, 0x4E, 0xAD, 0x50, 
   0x42, 0x6D, 0x0A, 0x4E, 0x4E, 0x37, 0x81, 0x6A, 0x70, 0x4E, 0xB9, 0x2C, 0x2C, 0x85, 0x11, 0x6B, 
   0x41, 0x67, 0x6C, 0x65, 0x74, 0x4B, 0xC8, 0x6E, 0xA1, 0xB6, 0x3E, 0x7D, 0x58, 0x00, 0x00, 0x34, 
   0x4A, 0x4D, 0x7A, 0x90, 0x92, 0xBB, 0x67, 0x69, 0xA4, 0x16, 0x0D, 0x3D, 0x00, 0x00, 0x4F, 0x53, 
   0x95, 0xB8, 0xBC, 0xFF, 0xC1, 0x8D, 0x82, 0xB4, 0x17, 0x00, 0x70, 0x00, 0x00, 0x00, 0x63, 0xA2, 
   0x41, 0x7E, 0x8B, 0xFF, 0x48, 0x55, 0xFF, 0x97, 0xA4, 0x36, 0x56, 0x69, 0x0D, 0x1B, 0x0D, 0xBA, 
   0x21, 0x43, 0xC3, 0x30, 0x6B, 0x8C, 0x67, 0xB4, 0x9E, 0xA3, 0x9E, 0xAE, 0x87, 0x73, 0x9B, 0x40, 
   0x63, 0x64, 0x20, 0x01, 0x36, 0x4C, 0x4C, 0x94, 0x5E, 0xEC, 0xD0, 0x42, 0x5D, 0xBA, 0x48, 0x00, 
   0x8A, 0x37, 0x84, 0x28, 0x24, 0x93, 0x68, 0xF9, 0x8F, 0xFF, 0x8A, 0xAE, 0xDC, 0x00, 0x2D, 0x65, 
   0x1A, 0x0F, 0x54, 0x5A, 0x7E, 0x52, 0x5D, 0xBF, 0x65, 0x49, 0x4E, 0xB6, 0x72, 0x75, 0xA0, 0x84, 
   0x74, 0x77, 0x4B, 0x4B, 0xAE, 0x3F, 0x73, 0x7F, 0x3F, 0x47, 0x1F, 0x6D, 0x5A, 0x98, 0xBF, 0xDE, 
   0xEF, 0x48, 0x97, 0xAD, 0x00, 0x0F, 0x52, 0x40, 0x18, 0x26, 0x82, 0x70, 0x65, 0x58, 0x74, 0x8A, 
   0x81, 0xA3, 0x87, 0x63, 0x90, 0x9A, 0x3F, 0x44, 0x8F, 0x39, 0x3C, 0x72, 0x35, 0x4F, 0x99, 0x6B, 
   0x74, 0x76, 0x5B, 0xA3, 0x6A, 0x45, 0x6F, 0x8C, 0x79, 0x41, 0x81, 0x6E, 0x64, 0x81, 0x45, 0x77, 
   0x81, 0x76, 0x88, 0x76, 0x2F, 0x82, 0x87, 0x00, 0x3C, 0x8D, 0x87, 0x62, 0x7B, 0xC7, 0x8E, 0x64, 
   0x00, 0x23, 0x98, 0x21, 0x4C, 0x98, 0xF3, 0xD5, 0x5F, 0x3B, 0x62, 0x60, 0x00, 0x17, 0xB5, 0x6E, 
   0x72, 0x82, 0xAA, 0x7F, 0x75, 0x76, 0x74, 0x74, 0x00, 0x46, 0x53, 0x00, 0x41, 0xA4, 0xBC, 0x92, 
   0xBB, 0xDF, 0xB9, 0x59, 0x00, 0x3E, 0x75, 0x1D, 0x0E, 0x97, 0x99, 0x7F, 0x80, 0x38, 0x6F, 0x5E, 
   0x1A, 0x47, 0x8C, 0x6A, 0x7A, 0xB3, 0x65, 0x67, 0x79, 0x2C, 0x33, 0x45, 0x38, 0x3F, 0x57, 0x61, 
   0x74, 0x9E, 0x95, 0xC4, 0xD2, 0x65, 0x6C, 0x6A, 0x22, 0x11, 0x30, 0x1B, 0x1A, 0x86, 0x00, 0x12, 
   0xAA, 0x7E, 0x85, 0x7E, 0xC5, 0xD3, 0x85, 0x5D, 0x9A, 0x9C, 0x09, 0x4C, 0xA0, 0x3F, 0x1F, 0x87, 
   0x34, 0x29, 0x47, 0x62, 0x9B, 0x8A, 0x46, 0x4E, 0x76, 0x40, 0x38, 0x60, 0x3C, 0x78, 0xB1, 0x81, 
   0x8B, 0xD4, 0x7A, 0x84, 0x67, 0x39, 0x4F, 0x65, 0x20, 0x42, 0xA2, 0x47, 0x4E, 0x95, 0x7B, 0x93, 
   0x86, 0x58, 0xA2, 0x67, 0x1E, 0x28, 0x5A, 0x19, 0x15, 0x7C, 0x82, 0x72, 0x60, 0x8A, 0x97, 0x73, 
   0x4A, 0x66, 0x91, 0x2C, 0x50, 0x71, 0x31, 0x7E, 0x8F, 0x71, 0x89, 0xB6, 0x71, 0x70, 0x4A, 0x37, 
   0x50, 0x66, 0x41, 0x6F, 0xF8, 0x57, 0x4B, 0x61, 0x35, 0x07, 0x00, 0x2B, 0x2D, 0x31, 0x66, 0xDC, 
   0xE4, 0xA4, 0xCC, 0xFF, 0x41, 0x1E, 0x87, 0x00, 0x20, 0x00, 0x33, 0x6F, 0x85, 0x79, 0x91, 0xFF, 
   0x52, 0x31, 0x98, 0x3B, 0x32, 0x4B, 0x6D, 0xC0, 0x65, 0x3E, 0x96, 0x7D, 0x1B, 0x00, 0x96, 0x2D, 
   0x00, 0x98, 0x6F, 0xC4, 0x8E, 0x87, 0xFF, 0xC1, 0x5D, 0x8A, 0xA1, 0x0B, 0x00, 0x32, 0x28, 0x00, 
   0x27, 0x6E, 0xA8, 0xB3, 0x74, 0xB2, 0xE3, 0x3B, 0x57, 0x7C, 0x3A, 0x4A, 0x2C, 0x36, 0x34, 0x89, 
   0x2D, 0x64, 0xB4, 0x83, 0x7D, 0x9F, 0x9F, 0x8E, 0x93, 0x30, 0x87, 0x81, 0x07, 0x2F, 0x85, 0x5C, 
   0x23, 0x6E, 0x6E, 0x64, 0xB1, 0x14, 0x94, 0x8E, 0x48, 0x89, 0x2E, 0x88, 0x71, 0x9B, 0x65, 0x37, 
   0xD0, 0x00, 0x37, 0x5F, 0x3E, 0x7D, 0x6B, 0x9B, 0x79, 0x95, 0x63, 0x75, 0xB5, 0x25, 0x6A, 0xF9, 
   0x58, 0x59, 0x5D, 0x6F, 0x8D, 0x00, 0x52, 0x97, 0xC7, 0x6B, 0x44, 0xFF, 0x25, 0x30, 0x59, 0x00, 
   0x0B, 0x0B, 0x6A, 0x7C, 0xBC, 0xDF, 0xFF, 0xC3, 0x61, 0xAF, 0xB0, 0x45, 0x20, 0x93, 0x24, 0x11, 
   0x4A, 0x18, 0x78, 0x6A, 0x47, 0x90, 0xC5, 0x76, 0x6D, 0x6C, 0x6A, 0x59, 0x51, 0x5C, 0x5D, 0xF6, 
   0x37, 0x61, 0xD0, 0x00, 0x4A, 0x00, 0x3E, 0x3B, 0x37, 0x74, 0x76, 0xE4, 0x75, 0x99, 0x75, 0x4C, 
   0x6A, 0x6A, 0x22, 0x4A, 0xBE, 0x54, 0x69, 0x89, 0x74, 0x61, 0x58, 0x17, 0x1B, 0x5A, 0x1B, 0x3D, 
   0x76, 0x34, 0x71, 0x4F, 0x49, 0x4B, 0x48, 0x89, 0x57, 0xFF, 0x7D, 0x85, 0xC7, 0x14, 0x41, 0x02, 
   0x12, 0x4C, 0x60, 0x40, 0x74, 0x78, 0x59, 0x5E, 0x64, 0x4A, 0x47, 0xC5, 0x61, 0x68, 0x60, 0x55, 
   0x4B, 0x67, 0x4D, 0x4A, 0xD2, 0x30, 0x4F, 0x81, 0x1F, 0x34, 0x0E, 0x5F, 0x79, 0x70, 0x65, 0x7E, 
   0xB1, 0x32, 0x39, 0x90, 0x27, 0x2F, 0x5D, 0x50, 0x7C, 0x69, 0x8F, 0xAA, 0xDF, 0x59, 0x69, 0x9E, 
   0x00, 0x00, 0x00, 0x09, 0x3B, 0x52, 0x7E, 0xAF, 0xFF, 0xA7, 0x8C, 0xED, 0x4E, 0x28, 0x85, 0x00, 
   0x09, 0x00, 0x0D, 0x3F, 0x09, 0x70, 0x81, 0xAF, 0x4C, 0x78, 0xF9, 0x64, 0x73, 0xB4, 0x7A, 0x60, 
   0x4A, 0x3F, 0x48, 0x64, 0x10, 0x59, 0x8D, 0x3E, 0x59, 0x9E, 0x72, 0x53, 0x7B, 0x57, 0x5E, 0x80, 
   0x45, 0x52, 0x85, 0x6C, 0x36, 0x74, 0x37, 0x69, 0x8A, 0x31, 0x5E, 0x47, 0x4D, 0x53, 0x98, 0x42, 
   0x5E, 0xCB, 0x32, 0x4D, 0x75, 0x60, 0x4D, 0x67, 0x65, 0x64, 0x70, 0x1B, 0x5E, 0x42, 0x27, 0x64, 
   0x60, 0x61, 0x47, 0xAE, 0x57, 0x59, 0xA6, 0x4C, 0x6A, 0x9B, 0x7D, 0x5E, 0x98, 0x53, 0x57, 0x88, 
   0x00, 0x3F, 0x24, 0x19, 0x1E, 0x21, 0x6C, 0x70, 0x99, 0x7A, 0x82, 0xE7, 0x52, 0x4F, 0xC4, 0x62, 
   0x43, 0x6C, 0x4E, 0x70, 0x5E, 0x30, 0x64, 0xA5, 0x13, 0x2B, 0x44, 0x2C, 0x4E, 0x61, 0x8A, 0x82, 
   0xA8, 0x85, 0x76, 0xA9, 0x38, 0x36, 0x6A, 0x00, 0x09, 0x5F, 0x4F, 0x72, 0x8E, 0xB7, 0xD3, 0xBB, 
   0x3A, 0x27, 0x75, 0x28, 0x09, 0x2F, 0x4A, 0x91, 0x6E, 0x61, 0x74, 0xCB, 0x22, 0x03, 0x71, 0x0D, 
   0x13, 0x1E, 0x88, 0xD5, 0xCB, 0xC1, 0xFF, 0xF1, 0x23, 0x2E, 0x41, 0x00, 0x00, 0x00, 0x0C, 0x00, 
   0x32, 0xA5, 0xE0, 0xDA, 0xA8, 0xE6, 0xFF, 0x2B, 0x68, 0xB1, 0x62, 0x37, 0x40, 0x61, 0x47, 0x28, 
   0x00, 0x55, 0x86, 0x53, 0x5F, 0xC3, 0x9F, 0x7A, 0xCB, 0x62, 0xDB, 0xB3, 0x34, 0xA5, 0x7D, 0x5A, 
   0x00, 0x3E, 0x43, 0x29, 0x9A, 0x70, 0xE6, 0xD4, 0x7A, 0x69, 0x93, 0x0D, 0x2E, 0x79, 0x34, 0x5A, 
   0x4B, 0x54, 0x07, 0x43, 0x6F, 0x67, 0xB5, 0xCC, 0xFF, 0xFF, 0x9B, 0x92, 0xCA, 0x01, 0x00, 0x29, 
   0x00, 0x0C, 0x42, 0x21, 0x6B, 0x92, 0x75, 0xBF, 0xAF, 0xC0, 0x98, 0x88, 0x36, 0x25, 0x81, 0x00, 
   0x5D, 0x91, 0x62, 0x85, 0x68, 0xC2, 0x3E, 0x59, 0xAB, 0x9A, 0xA5, 0x66, 0xB0, 0xF5, 0x0B, 0x4C, 
   0xAD, 0x29, 0x4E, 0x52, 0x55, 0x57, 0x2C, 0x00, 0x24, 0x65, 0x50, 0x50, 0x8A, 0xD1, 0xDB, 0x87, 
   0x70, 0x85, 0x94, 0x02, 0x0D, 0x9A, 0x34, 0x78, 0x77, 0x69, 0x9A, 0x6B, 0x6F, 0x45, 0x82, 0x10, 
   0x2F, 0xA4, 0x56, 0x97, 0x76, 0xB2, 0xAE, 0x6A, 0x6C, 0x35, 0x8C, 0x00, 0x1F, 0x81, 0x0B, 0x7D, 
   0x81, 0xDA, 0xD4, 0x81, 0xB6, 0xA4, 0x7B, 0x00, 0x11, 0x76, 0x00, 0x2C, 0x98, 0x75, 0x6C, 0x81, 
   0xAC, 0x97, 0x6A, 0x6E, 0x81, 0x81, 0x3E, 0x48, 0x98, 0x4C, 0x75, 0x70, 0x13, 0x8B, 0x60, 0x37, 
   0x46, 0xBB, 0xA5, 0x5C, 0x87, 0x71, 0x62, 0x75, 0x3C, 0x6E, 0x74, 0x1E, 0x8B, 0x53, 0x26, 0x5D, 
   0xA9, 0x7D, 0x4B, 0xA4, 0xAA, 0x8F, 0x6A, 0x4C, 0x72, 0x74, 0x21, 0x5E, 0x74, 0x2A, 0x35, 0x80, 
   0x0E, 0x41, 0x81, 0x7D, 0x8C, 0x87, 0x8F, 0xA3, 0xBA, 0x45, 0x52, 0x69, 0x2D, 0x34, 0x57, 0x75, 
   0x6B, 0xAD, 0x58, 0x6F, 0x96, 0x29, 0x5D, 0x40, 0x0C, 0x29, 0x7A, 0x37, 0x0A, 0xB0, 0x9A, 0xA8, 
   0x7E, 0x84, 0xD7, 0x8A, 0x33, 0x30, 0xAC, 0x43, 0x23, 0x6D, 0x64, 0x84, 0x6C, 0x3B, 0x8F, 0x99, 
   0x2F, 0x43, 0x9D, 0x63, 0x4D, 0x53, 0x40, 0x61, 0xA2, 0x30, 0x5C, 0xC3, 0x54, 0x62, 0x23, 0x99, 
   0x7F, 0x5D, 0x85, 0x7E, 0xF7, 0x04, 0x65, 0xC2, 0x35, 0x3B, 0x3A, 0x4C, 0x52, 0x5F, 0x3C, 0x76, 
   0x97, 0x4F, 0x8E, 0x90, 0x72, 0x9E, 0x5C, 0x60, 0x4B, 0x7D, 0x0B, 0x1B, 0x6C, 0x5B, 0x28, 0x3C, 
   0xA4, 0x87, 0xBC, 0x25, 0xA6, 0xCD, 0x00, 0x78, 0x4E, 0x52, 0x38, 0x42, 0x76, 0x4E, 0xB0, 0x54, 
   0xCA, 0xD3, 0x4E, 0x66, 0x6B, 0x4D, 0x00, 0x68, 0x36, 0x30, 0x30, 0x52, 0x8F, 0x78, 0x69, 0x9E, 
   0xE2, 0x4D, 0x92, 0x94, 0x4C, 0x3F, 0x81, 0x4B, 0x20, 0xA1, 0x29, 0x54, 0x30, 0x3B, 0x6D, 0x6B, 
   0x87, 0x7F, 0xFF, 0x75, 0x63, 0xA3, 0x2E, 0x92, 0x44, 0x3D, 0x38, 0x5F, 0x15, 0x00, 0x56, 0x29, 
   0x31, 0x7D, 0x87, 0xEE, 0xE7, 0x88, 0xCE, 0xE6, 0x52, 0x7E, 0x7F, 0x2C, 0x27, 0x25, 0x00, 0x00, 
   0x1F, 0x22, 0x1E, 0x96, 0x8C, 0xEC, 0xF1, 0x99, 0xB0, 0xBE, 0x16, 0x48, 0x6C, 0x2C, 0x51, 0x44, 
   0x71, 0x30, 0x8A, 0x66, 0x6B, 0xAF, 0x53, 0xB6, 0xB5, 0x2F, 0x5F, 0x86, 0x18, 0x09, 0x4D, 0x69, 
   0x54, 0xBF, 0x6A, 0xDE, 0xAE, 0x64, 0xA4, 0x62, 0x2F, 0x00, 0x67, 0x13, 0x00, 0x79, 0x2D, 0xA0, 
   0x8D, 0x91, 0xC5, 0xC7, 0xA8, 0x63, 0x71, 0x23, 0x39, 0x43, 0x0F, 0x32, 0x72, 0x39, 0x40, 0xAE, 
   0x5A, 0x8F, 0xC2, 0x96, 0xAE, 0x9A, 0xB6, 0xA6, 0x82, 0x3E, 0x71, 0x71, 0x00, 0x00, 0xD6, 0x00, 
   0x00, 0x90, 0x40, 0x5D, 0x23, 0xB8, 0xF2, 0xBD, 0xE1, 0xFE, 0xFA, 0x32, 0x49, 0x6E, 0x0A, 0x20, 
   0xAC, 0x24, 0x4A, 0x40, 0x3C, 0x4A, 0x00, 0x92, 0x8E, 0xB5, 0x6E, 0xA2, 0xFF, 0x1C, 0x10, 0x71, 
   0x26, 0x00, 0x30, 0x1C, 0x5E, 0x7F, 0x42, 0xAC, 0x85, 0xAB, 0xA8, 0x91, 0x8D, 0x6C, 0x80, 0x18, 
   0x3F, 0x4C, 0x32, 0x52, 0xA6, 0x79, 0x50, 0xD0, 0x39, 0x55, 0x38, 0x04, 0x37, 0x03, 0x1C, 0x3D, 
   0x92, 0x85, 0x55, 0x9B, 0x60, 0x62, 0x6F, 0x2D, 0x5D, 0x5A, 0x66, 0x5E, 0xAB, 0x87, 0x69, 0xCC, 
   0x30, 0x4C, 0x46, 0x00, 0x3A, 0x39, 0x53, 0x5D, 0x9B, 0x93, 0x8B, 0x8B, 0x5A, 0x68, 0x69, 0x26, 
   0x39, 0x53, 0x3C, 0x4F, 0x8D, 0x53, 0x61, 0xBB, 0x48, 0x5B, 0x5F, 0x42, 0x34, 0x31, 0x54, 0x6D, 
   0x9F, 0x43, 0x5C, 0xA1, 0x60, 0x46, 0x84, 0x4E, 0x58, 0x8E, 0x27, 0x63, 0x44, 0x5A, 0x36, 0x6C, 
   0x77, 0x53, 0x9B, 0x2C, 0x8C, 0x7B, 0x32, 0x6F, 0x9E, 0x65, 0x2E, 0xC5, 0x54, 0x2D, 0x5C, 0x3C, 
   0x56, 0x3D, 0x25, 0x73, 0x7D, 0x2C, 0x52, 0x75, 0x62, 0x43, 0x84, 0x7F, 0x7D, 0xCE, 0x5C, 0x66, 
   0x99, 0x1D, 0x48, 0x14, 0x44, 0x59, 0x64, 0x61, 0x4E, 0xCC, 0x39, 0x75, 0x93, 0x3F, 0x58, 0x58, 
   0x71, 0x35, 0x99, 0x43, 0x51, 0x69, 0x32, 0x47, 0x00, 0x49, 0x49, 0x91, 0x65, 0xB6, 0xFF, 0x3D, 
   0x6A, 0x9D, 0x36, 0x13, 0x32, 0x3D, 0x5C, 0x52, 0x60, 0x63, 0x70, 0x65, 0x58, 0x88, 0x3D, 0x52, 
   0x9F, 0x10, 0x52, 0x34, 0x61, 0x4D, 0x81, 0x94, 0x5E, 0xE2, 0x32, 0x7F, 0x9B, 0x0E, 0x2E, 0x1B, 
   0x3C, 0x2E, 0x49, 0x5A, 0x6E, 0xB9, 0x67, 0x53, 0x9A, 0x5C, 0x4F, 0x8F, 0x40, 0x77, 0x6C, 0x50, 
   0x82, 0x8D, 0x70, 0x59, 0xB2, 0x2A, 0x19, 0x54, 0x00, 0x5E, 0x25, 0x4F, 0x7C, 0x55, 0xB2, 0x65, 
   0xD5, 0x5B, 0x5D, 0xB9, 0x09, 0x39, 0x0D, 0x31, 0x0C, 0x47, 0x3F, 0x5A, 0xEF, 0x85, 0xA7, 0xC3, 
   0x79, 0xA1, 0x8D, 0x00, 0x21, 0x28, 0x1C, 0x14, 0x45, 0x7E, 0x75, 0xBA, 0x7F, 0x9E, 0xA0, 0x45, 
   0x2C, 0x73, 0x12, 0x00, 0x94, 0x46, 0xA4, 0x7C, 0x86, 0xFF, 0x60, 0x52, 0x24, 0xA4, 0x24, 0x00, 
   0x82, 0x20, 0x4D, 0x0D, 0x77, 0xED, 0x74, 0x62, 0x7E, 0xFF, 0x25, 0x2E, 0xD8, 0x5F, 0x6D, 0x1E, 
   0x99, 0x6F, 0x45, 0x60, 0x59, 0xB3, 0x3C, 0x86, 0xB5, 0x35, 0x6A, 0x6C, 0x58, 0x37, 0x6D, 0x43, 
   0x93, 0xB8, 0x93, 0xC6, 0xE1, 0x5A, 0x3B, 0xC1, 0x31, 0x1C, 0x5B, 0x5C, 0x89, 0x00, 0x00, 0x63, 
   0x3E, 0x4E, 0x49, 0xEA, 0xB5, 0xB5, 0xFF, 0x1C, 0x65, 0x85, 0x3D, 0x63, 0x70, 0x9C, 0x83, 0x84, 
   0x1E, 0x38, 0x61, 0x12, 0x31, 0x99, 0x79, 0x5B, 0x9E, 0x74, 0x96, 0x80, 0x2F, 0x80, 0x8A, 0x03, 
   0x36, 0x72, 0x3B, 0x43, 0x2A, 0xC8, 0xB7, 0x94, 0xEF, 0xAC, 0xFF, 0x37, 0x8C, 0xA9, 0x00, 0x31, 
   0x47, 0x12, 0x07, 0x2C, 0x6F, 0x63, 0x65, 0x54, 0x7D, 0x8F, 0x28, 0x95, 0x82, 0x68, 0x6C, 0xA0, 
   0x69, 0x2E, 0xAB, 0x3C, 0x6D, 0x71, 0x48, 0x7A, 0x76, 0x6B, 0x6A, 0x81, 0x55, 0x80, 0x76, 0x4F, 
   0x68, 0x82, 0x66, 0x3A, 0xA4, 0x82, 0x68, 0x76, 0x26, 0x75, 0x6A, 0x1B, 0x5A, 0x8C, 0x83, 0x93, 
   0x81, 0x52, 0x6B, 0x81, 0xA1, 0x63, 0x81, 0xB3, 0x7D, 0x81, 0x00, 0x21, 0x76, 0x00, 0x23, 0x9D, 
   0xFA, 0xCA, 0x6F, 0xCE, 0x92, 0x6F, 0x00, 0x20, 0x92, 0x2D, 0x76, 0xA4, 0xDF, 0xA4, 0x65, 0x50, 
   0x75, 0x65, 0x00, 0x29, 0xA4, 0x4E, 0x68, 0x8D, 0x94, 0x90, 0x75, 0x99, 0x84, 0x74, 0x03, 0x3E, 
   0x53, 0x00, 0x17, 0xBA, 0xB4, 0x96, 0xA3, 0x97, 0xCF, 0x47, 0x00, 0x33, 0x74, 0x20, 0x2B, 0x97, 
   0x75, 0x7A, 0x81, 0x2E, 0x53, 0x76, 0x40, 0x60, 0x7C, 0x96, 0xB6, 0xA4, 0x8D, 0xAC, 0xAD, 0x17, 
   0x2F, 0x4F, 0x04, 0x00, 0x21, 0x28, 0x27, 0x8F, 0x54, 0x67, 0xAF, 0x8C, 0xC8, 0x72, 0xA8, 0xC9, 
   0x7E, 0x3E, 0x53, 0x95, 0x00, 0x15, 0x89, 0x2F, 0x31, 0x7C, 0x70, 0x56, 0x70, 0x6B, 0xA8, 0x82, 
   0x43, 0xAC, 0xA4, 0x59, 0x00, 0x6B, 0x43, 0x6B, 0xAE, 0x38, 0x76, 0xBE, 0x8D, 0x74, 0x74, 0x53, 
   0x4A, 0x69, 0x34, 0x54, 0xB9, 0x65, 0x6A, 0xC7, 0x36, 0x64, 0x67, 0x2A, 0x52, 0x41, 0x37, 0x37, 
   0x69, 0x56, 0x5B, 0xA8, 0x8C, 0xB7, 0xB3, 0x7A, 0xA3, 0x41, 0x39, 0x06, 0x6A, 0x25, 0x0A, 0xA5, 
   0x42, 0x5D, 0x9B, 0x7B, 0xB6, 0xAA, 0x52, 0x6C, 0x6F, 0x00, 0x38, 0x3C, 0x42, 0x5E, 0xA3, 0x76, 
   0x6F, 0xB4, 0x60, 0x6E, 0x3D, 0x2D, 0x4B, 0x39, 0x70, 0x56, 0xE1, 0x63, 0x83, 0xF1, 0x22, 0x44, 
   0x2D, 0x0B, 0x3F, 0x16, 0x51, 0x8F, 0xA2, 0x7B, 0x84, 0xDE, 0x59, 0x23, 0x99, 0x2B, 0x47, 0x38, 
   0x5E, 0xBB, 0x88, 0x8B, 0xF8, 0xE3, 0x29, 0x04, 0x8B, 0x0B, 0x00, 0x22, 0x62, 0x9C, 0x45, 0x6F, 
   0xC8, 0xA4, 0x42, 0x40, 0xDA, 0x4D, 0x5A, 0xAB, 0x63, 0x59, 0x4D, 0x50, 0x6F, 0x78, 0x38, 0x62, 
   0x88, 0x22, 0x00, 0x4C, 0x36, 0x22, 0x77, 0x83, 0xD1, 0xD0, 0x90, 0xAC, 0xC5, 0x4B, 0x33, 0x73, 
   0x5F, 0x6A, 0x39, 0x46, 0x7B, 0x95, 0x0D, 0x37, 0xB3, 0x4D, 0x4F, 0x70, 0x70, 0x8F, 0xA9, 0x43, 
   0xBD, 0xA9, 0x4E, 0x5B, 0x70, 0x86, 0x30, 0x98, 0x40, 0x41, 0xA3, 0x00, 0x38, 0x6A, 0x3F, 0x75, 
   0x6B, 0xEE, 0xCC, 0xC8, 0x82, 0x92, 0xD4, 0x1C, 0x3F, 0x83, 0x00, 0x10, 0x4E, 0x22, 0x40, 0x2A, 
   0x8E, 0x9B, 0xEB, 0xAD, 0xE7, 0xFF, 0x94, 0xA6, 0x50, 0x18, 0x18, 0x08, 0x03, 0x25, 0xA8, 0x42, 
   0x69, 0xE8, 0x55, 0x4F, 0xA8, 0x36, 0x4D, 0x5A, 0x9A, 0x91, 0x6F, 0xAB, 0xFF, 0xD4, 0x2C, 0x82, 
   0xA4, 0x3A, 0x00, 0x1D, 0x80, 0x48, 0x42, 0x3F, 0x84, 0xBF, 0x2B, 0x50, 0xC9, 0x42, 0x38, 0x40, 
   0x29, 0x18, 0x26, 0x65, 0x66, 0xEF, 0x89, 0xAE, 0xC2, 0x5B, 0xA2, 0x33, 0x3C, 0x4E, 0x86, 0x6D, 
   0x43, 0xC3, 0x75, 0x3F, 0x75, 0x05, 0x27, 0x39, 0x0A, 0x4F, 0x87, 0x5B, 0x88, 0x70, 0x62, 0x4F, 
   0x3F, 0x36, 0x28, 0xB2, 0x6F, 0x67, 0xAC, 0x2B, 0x58, 0x13, 0x20, 0x59, 0x59, 0x6B, 0x75, 0xE9, 
   0x6B, 0x5D, 0x99, 0x31, 0x29, 0x58, 0x30, 0x56, 0x61, 0x52, 0x67, 0x56, 0x47, 0x45, 0x8A, 0x41, 
   0x61, 0xA1, 0x2B, 0x44, 0x2B, 0x54, 0x56, 0x7D, 0x70, 0x72, 0xEA, 0x26, 0x4A, 0x77, 0x26, 0x1D, 
   0x26, 0x70, 0x6E, 0x93, 0x70, 0x9C, 0xB6, 0x1A, 0x50, 0x7C, 0x1A, 0x00, 0x1B, 0x33, 0x58, 0x63, 
   0x9B, 0xE8, 0xFF, 0x83, 0x70, 0xDC, 0x0E, 0x00, 0x0A, 0x00, 0x1C, 0x08, 0x53, 0x6E, 0x7D, 0x7D, 
   0x97, 0xDC, 0x56, 0x4D, 0xB4, 0x2D, 0x23, 0x4C, 0x60, 0x57, 0x62, 0x49, 0x59, 0x75, 0x0B, 0x65, 
   0x99, 0x5C, 0x65, 0xB0, 0x85, 0x48, 0x60, 0x3A, 0x75, 0x60, 0x44, 0x69, 0xB5, 0x59, 0x46, 0xC4, 
   0x2B, 0x57, 0x4E, 0x20, 0x58, 0x02, 0x60, 0x43, 0x88, 0x66, 0x88, 0xD5, 0x4F, 0x66, 0x8C, 0x59, 
   0x53, 0x72, 0x36, 0x4C, 0x69, 0x36, 0x45, 0x42, 0x3D, 0x4B, 0x82, 0x6B, 0x57, 0xC7, 0x4E, 0x58, 
   0x72, 0x3D, 0x6F, 0x60, 0x48, 0x52, 0x99, 0x58, 0x68, 0x8D, 0x25, 0x40, 0x4F, 0x1B, 0x3A, 0x51, 
   0x72, 0x7A, 0xA4, 0x73, 0x5E, 0xC8, 0x39, 0x59, 0x99, 0x1C, 0x48, 0x41, 0x60, 0x71, 0x57, 0x6B, 
   0x7C, 0xBD, 0x1B, 0x31, 0x95, 0x27, 0x3C, 0x33, 0x83, 0x81, 0x77, 0x6C, 0x70, 0xAB, 0x20, 0x4C, 
   0x6C, 0x25, 0x2E, 0x61, 0x3D, 0x45, 0x9B, 0x6C, 0x6E, 0x6F, 0x6C, 0x42, 0x70, 0x00, 0x39, 0xAA, 
   0x5C, 0x96, 0x9F, 0x90, 0xAC, 0x8C, 0x23, 0x10, 0x56, 0x23, 0x31, 0x1A, 0x90, 0xA3, 0xC2, 0x78, 
   0x7A, 0xFF, 0x04, 0x00, 0x26, 0x00, 0x00, 0x00, 0x70, 0x89, 0xE4, 0xC3, 0xFF, 0xFE, 0x77, 0x8F, 
   0x7F, 0x00, 0x00, 0x38, 0x00, 0x00, 0x35, 0x88, 0xB8, 0x90, 0x6F, 0x91, 0xFF, 0x44, 0x67, 0xD8, 
   0xAB, 0xA6, 0x40, 0x82, 0xA3, 0x48, 0x00, 0x2D, 0x71, 0x1B, 0x00, 0x6F, 0x5C, 0x4C, 0xAC, 0x75, 
   0xFF, 0xD6, 0x49, 0xA5, 0xB2, 0x65, 0x02, 0x69, 0x5F, 0x49, 0x43, 0x10, 0x47, 0x3D, 0x7C, 0x84, 
   0x74, 0xA3, 0xFF, 0xFF, 0x18, 0x63, 0xA8, 0x1B, 0x00, 0x23, 0x18, 0x45, 0x56, 0x6C, 0xE2, 0xAF, 
   0xC3, 0xCB, 0xE2, 0x88, 0x3E, 0x8A, 0x23, 0x08, 0x42, 0x00, 0x48, 0x8F, 0x3B, 0xA2, 0x83, 0xA6, 
   0x83, 0x35, 0x80, 0x5C, 0x9E, 0x51, 0xA6, 0xE4, 0x5A, 0x98, 0xAE, 0x47, 0x2E, 0x6A, 0x44, 0x52, 
   0x32, 0x1B, 0x41, 0x5A, 0x34, 0x2D, 0x95, 0xCF, 0xD9, 0x6B, 0x83, 0x9F, 0xA0, 0x00, 0x00, 0xB7, 
   0x33, 0x54, 0x66, 0xAF, 0xA7, 0x76, 0x6D, 0x70, 0x81, 0x2E, 0x60, 0x81, 0x50, 0x8D, 0x81, 0xA5, 
   0x8B, 0x76, 0x6A, 0x3E, 0x82, 0x00, 0x06, 0xA4, 0x31, 0x8D, 0x76, 0xBC, 0xF5, 0x6A, 0x62, 0x59, 
   0x8C, 0x2D, 0x23, 0x81, 0x43, 0x55, 0x81, 0x71, 0x6D, 0x81, 0x8D, 0x79, 0x81, 0x3B, 0x7F, 0x7B, 
   0x00, 0x35, 0x8C, 0x4D, 0x58, 0x75, 0xA0, 0xA9, 0x6A, 0x4E, 0x4F, 0x87, 0x65, 0x5A, 0xBB, 0xA1, 
   0x8D, 0x60, 0x16, 0x6F, 0x6B, 0x10, 0x5D, 0xA4, 0x9F, 0x6C, 0x8D, 0x73, 0x5B, 0x75, 0x60, 0x55, 
   0x79, 0x46, 0x89, 0x4C, 0x00, 0x51, 0x97, 0x57, 0x52, 0xA8, 0xB9, 0xAD, 0x6F, 0x30, 0x6D, 0x7A, 
   0x23, 0x3D, 0x8C, 0x61, 0x42, 0x76, 0x46, 0x5A, 0x77, 0x83, 0xC0, 0xC6, 0x6F, 0x94, 0xA1, 0x10, 
   0x28, 0x26, 0x00, 0x00, 0x43, 0x24, 0x00, 0x9B, 0x90, 0xAF, 0x82, 0xC0, 0xFF, 0x8F, 0x3C, 0x85, 
   0x9B, 0x1B, 0x1F, 0x94, 0x51, 0x42, 0x77, 0x2A, 0x48, 0x70, 0x37, 0x4F, 0x76, 0x99, 0x73, 0x7B, 
   0x72, 0x6F, 0x6B, 0x05, 0x64, 0xA4, 0x80, 0x8A, 0x5C, 0xA7, 0xAB, 0x35, 0x37, 0x53, 0xE7, 0x23, 
   0x5B, 0xC5, 0x44, 0x48, 0x56, 0x66, 0x65, 0x70, 0x54, 0x7C, 0xBD, 0x21, 0x5F, 0x65, 0x44, 0x65, 
   0x58, 0x62, 0x5A, 0x75, 0x5F, 0x60, 0x7C, 0x7B, 0x89, 0x89, 0x95, 0x8D, 0x7F, 0x09, 0x4D, 0xC9, 
   0x00, 0x3A, 0x8E, 0x69, 0x41, 0x26, 0x88, 0x76, 0x86, 0x54, 0xB6, 0xD0, 0x1A, 0x6A, 0x40, 0x31, 
   0x00, 0x24, 0x6C, 0x4E, 0x7D, 0x7E, 0xD2, 0xC7, 0x5A, 0xA3, 0xF5, 0x40, 0x0B, 0x85, 0x1C, 0x35, 
   0x14, 0x38, 0x3C, 0x53, 0x51, 0x56, 0x8A, 0x5A, 0x97, 0xB1, 0x7D, 0x71, 0xC9, 0x59, 0x71, 0xB0, 
   0x1E, 0x8B, 0x1A, 0x2E, 0x62, 0x75, 0x68, 0x29, 0xDD, 0x37, 0x5D, 0x83, 0x65, 0xA2, 0x7D, 0x80, 
   0xAB, 0xB4, 0x3A, 0x2F, 0x63, 0x22, 0x00, 0x46, 0x4B, 0x34, 0xA9, 0x5D, 0xAB, 0xB6, 0x64, 0xAD, 
   0x93, 0x68, 0x78, 0x6F, 0x00, 0x00, 0x42, 0x21, 0x0C, 0x7E, 0xAD, 0xC7, 0xDC, 0xB2, 0xB9, 0xBA, 
   0x0F, 0x61, 0x78, 0x00, 0x36, 0x38, 0x57, 0x14, 0x67, 0x76, 0x6C, 0xCA, 0x72, 0xC9, 0xC6, 0x5A, 
   0x95, 0x4E, 0x3B, 0x20, 0x82, 0x2F, 0x09, 0xB1, 0x20, 0x89, 0x9B, 0x6C, 0xB3, 0x94, 0x74, 0x64, 
   0x82, 0x47, 0x36, 0x5A, 0x57, 0x97, 0xB1, 0x68, 0x7B, 0xD9, 0x34, 0x5F, 0x57, 0x1E, 0x5F, 0x68, 
   0x75, 0x7B, 0xB5, 0x6F, 0x7B, 0xA1, 0x1B, 0x54, 0xDE, 0x4E, 0x55, 0x87, 0x87, 0x8E, 0x15, 0x63, 
   0xAD, 0xD1, 0x5A, 0x31, 0xFF, 0x02, 0x00, 0x54, 0x00, 0x35, 0x2E, 0x78, 0xDB, 0x83, 0xED, 0xF3, 
   0x97, 0x83, 0x97, 0xC4, 0x25, 0x37, 0xFF, 0x00, 0x00, 0x3F, 0x00, 0x1A, 0x00, 0x32, 0x5D, 0x88, 
   0x76, 0x9A, 0xFF, 0x96, 0x7A, 0x7B, 0x7E, 0x6E, 0x86, 0x1A, 0x66, 0xAC, 0x29, 0x96, 0x87, 0x76, 
   0x5E, 0xAF, 0x4B, 0x22, 0x44, 0x00, 0x3E, 0x1B, 0x27, 0x6C, 0x88, 0x62, 0x50, 0xA7, 0x69, 0x67, 
   0x8A, 0x35, 0x6D, 0x45, 0x0E, 0x3A, 0x67, 0x74, 0x63, 0xAB, 0x4C, 0x69, 0x51, 0x04, 0x53, 0x3D, 
   0x6C, 0x5E, 0xE4, 0xAA, 0x79, 0xC6, 0x30, 0x33, 0x13, 0x00, 0x27, 0x55, 0x39, 0x77, 0x9A, 0x5E, 
   0x56, 0x79, 0x6B, 0x56, 0x68, 0x49, 0x56, 0x54, 0x49, 0x50, 0xA1, 0x54, 0x56, 0xC8, 0x48, 0x4B, 
   0x5F, 0x41, 0x5C, 0x46, 0x47, 0x67, 0x8A, 0x31, 0x34, 0x3D, 0x4E, 0x4B, 0x8A, 0x55, 0x73, 0xBF, 
   0x44, 0x63, 0x92, 0x82, 0x62, 0xB0, 0x41, 0x34, 0x40, 0x00, 0x3A, 0x00, 0x1F, 0x80, 0x7D, 0x84, 
   0x71, 0xEE, 0x80, 0x70, 0x94, 0x6D, 0x3A, 0x8B, 0x1F, 0x39, 0x4F, 0x00, 0x62, 0x27, 0x60, 0x4D, 
   0x8C, 0x85, 0x6A, 0xDF, 0x4D, 0x70, 0xAB, 0x51, 0x52, 0x43, 0x71, 0x2F, 0x9C, 0x14, 0x62, 0xA5, 
   0x1F, 0x46, 0x2D, 0x59, 0x48, 0x55, 0x55, 0x93, 0xD9, 0x4F, 0x5F, 0x8E, 0x49, 0x20, 0x53, 0x3D, 
   0x5E, 0x58, 0x48, 0x86, 0x6A, 0x4D, 0x46, 0x99, 0x36, 0x34, 0xAB, 0x26, 0x50, 0x55, 0x54, 0x6E, 
   0x66, 0x8C, 0x5D, 0xC5, 0x34, 0x73, 0x7E, 0x00, 0x45, 0x00, 0x41, 0x23, 0x4E, 0x84, 0x7A, 0xD7, 
   0x69, 0x70, 0xCF, 0x63, 0x53, 0x84, 0x3F, 0x59, 0x64, 0x3D, 0x69, 0x68, 0x47, 0x52, 0xA4, 0x25, 
   0x20, 0x43, 0x27, 0x7C, 0x33, 0x79, 0x82, 0xC4, 0x90, 0x5F, 0xCA, 0x54, 0x46, 0x89, 0x00, 0x34, 
   0x20, 0x02, 0x45, 0x38, 0x8D, 0x74, 0xE0, 0x72, 0x7B, 0xE1, 0x2D, 0x4D, 0x1E, 0x27, 0x2B, 0x35, 
   0x29, 0x49, 0xBB, 0x86, 0x96, 0xD8, 0x86, 0xBD, 0x5A, 0x23, 0x2D, 0x5F, 0x1C, 0x2A, 0xA8, 0x54, 
   0x72, 0x6A, 0x4E, 0x50, 0x75, 0x28, 0x00, 0x76, 0x20, 0x26, 0x7E, 0x9A, 0xF3, 0xB9, 0xA6, 0xFF, 
   0xA9, 0x48, 0x32, 0x90, 0x00, 0x00, 0x4F, 0x00, 0x0A, 0x08, 0x9B, 0xDB, 0x8B, 0x87, 0xDB, 0xFF, 
   0x1C, 0x90, 0xE8, 0x6A, 0x79, 0x0F, 0x6D, 0x0F, 0x00, 0x0B, 0x15, 0xC8, 0x3D, 0xC1, 0xEF, 0x61, 
   0x4C, 0xA0, 0x47, 0x4D, 0x7B, 0x59, 0xB3, 0x3B, 0x34, 0x20, 0x4D, 0x7A, 0x4A, 0xE9, 0xC8, 0xEA, 
   0xF8, 0x3B, 0x8D, 0x44, 0x03, 0x1C, 0x35, 0x25, 0x2B, 0x74, 0x45, 0x44, 0x68, 0x3F, 0x7B, 0xCC, 
   0xBF, 0xCC, 0xDE, 0xBD, 0x96, 0x80, 0x00, 0x03, 0x80, 0x00, 0x02, 0x4A, 0x54, 0x56, 0x2E, 0xB8, 
   0xC8, 0xA9, 0xD3, 0xD4, 0xF4, 0x00, 0x48, 0xB3, 0x00, 0x2D, 0x47, 0x95, 0x5E, 0x32, 0x8D, 0x4F, 
   0x66, 0x60, 0x73, 0x9B, 0x6F, 0xB7, 0x60, 0x40, 0x4F, 0xA6, 0x55, 0x1A, 0xB2, 0x38, 0x70, 0x78, 
   0x00, 0x67, 0x70, 0x5F, 0x63, 0x81, 0x8A, 0x70, 0x81, 0x69, 0x99, 0x81, 0x6D, 0x6B, 0x81, 0x48, 
   0x5E, 0x81, 0x19, 0x46, 0x76, 0x4C, 0x57, 0x82, 0x65, 0x86, 0xA4, 0x6D, 0x86, 0x76, 0x66, 0x68, 
   0x6A, 0x75, 0x44, 0x8C, 0x00, 0x33, 0x81, 0x06, 0x5E, 0x81, 0xFC, 0xAF, 0x81, 0xCB, 0x8C, 0x81, 
   0x00, 0x1E, 0x81, 0x00, 0x35, 0x8C, 0xC2, 0xA4, 0x75, 0xE3, 0x9F, 0x6A, 0x16, 0x4A, 0x82, 0x3C, 
   0x5A, 0xBB, 0xA1, 0xAF, 0x60, 0x44, 0x74, 0x6B, 0x00, 0x10, 0xA4, 0x83, 0x3D, 0x92, 0xB6, 0x89, 
   0x85, 0x58, 0x8F, 0x68, 0x00, 0x45, 0x52, 0x06, 0x2F, 0xAE, 0x98, 0x86, 0xA3, 0xC1, 0xD1, 0x53, 
   0x1C, 0x47, 0x6F, 0x47, 0x44, 0x8D, 0x99, 0xA7, 0xB4, 0x3B, 0x3E, 0x6E, 0x0B, 0x25, 0x45, 0x4A, 
   0x6E, 0x89, 0x2B, 0x3D, 0xA1, 0x6C, 0x5C, 0x6F, 0x79, 0xAF, 0x6B, 0x57, 0x83, 0xA5, 0x56, 0x66, 
   0x9F, 0x5B, 0x6F, 0x60, 0x3D, 0x40, 0x76, 0x59, 0x61, 0x82, 0x2B, 0x71, 0x9E, 0x2C, 0x28, 0x70, 
   0x77, 0x30, 0x6B, 0x4B, 0xE8, 0x99, 0x7F, 0x89, 0x85, 0xA6, 0x9F, 0x80, 0x2B, 0x6A, 0x8C, 0x2E, 
   0x5C, 0xCF, 0x4F, 0x54, 0x93, 0x33, 0x5A, 0x46, 0x68, 0x60, 0x73, 0x6E, 0x72, 0xBD, 0x52, 0x7D, 
   0x8E, 0x40, 0x65, 0x2C, 0x5D, 0x15, 0x67, 0x5D, 0x55, 0xD7, 0x51, 0xC9, 0xCC, 0x71, 0xBD, 0x6E, 
   0x30, 0x3C, 0x54, 0x00, 0x00, 0x6A, 0x66, 0x6E, 0x98, 0xB1, 0x98, 0xA8, 0x55, 0x60, 0x5D, 0x00, 
   0x49, 0x04, 0x66, 0x6C, 0x97, 0x99, 0x95, 0xFF, 0x4E, 0x99, 0x77, 0x0D, 0x57, 0x18, 0x50, 0x0F, 
   0x99, 0x4B, 0x4C, 0x88, 0x2A, 0x4F, 0x45, 0x53, 0x65, 0x92, 0x88, 0xC2, 0xAC, 0x75, 0xD6, 0xC8, 
   0x34, 0x00, 0x92, 0x00, 0x00, 0x0E, 0x59, 0xB6, 0x61, 0xC2, 0xFF, 0xFF, 0x50, 0x50, 0xE7, 0x1F, 
   0x1B, 0x30, 0x55, 0x4E, 0x26, 0x27, 0x09, 0x4F, 0x1D, 0x23, 0xB5, 0x52, 0x8F, 0xC9, 0x93, 0xA4, 
   0xA2, 0x4F, 0x9F, 0x89, 0x3C, 0x73, 0x6A, 0x25, 0x00, 0x4E, 0x43, 0x36, 0x78, 0x8D, 0xF5, 0xDC, 
   0x65, 0x9B, 0xCA, 0x0E, 0x00, 0x4A, 0x3B, 0x66, 0x4F, 0x70, 0xAB, 0xA0, 0x66, 0x66, 0x75, 0x65, 
   0x31, 0x87, 0x24, 0x43, 0x9A, 0x00, 0x73, 0x85, 0x4B, 0x76, 0x9D, 0xD6, 0x99, 0xCA, 0x74, 0x97, 
   0x94, 0x00, 0x2E, 0x6A, 0x16, 0x12, 0x48, 0x6F, 0xA5, 0x79, 0xAB, 0xC4, 0xF9, 0x99, 0x9F, 0xD6, 
   0x23, 0x3E, 0x23, 0x00, 0x00, 0x3A, 0x52, 0x25, 0xC6, 0x91, 0xF2, 0xEB, 0xC0, 0xFF, 0xA5, 0x83, 
   0x56, 0x63, 0x10, 0x39, 0x55, 0x00, 0x3B, 0xD5, 0x00, 0x1A, 0x73, 0x48, 0x2B, 0x02, 0xF1, 0xF7, 
   0xCB, 0xDE, 0xFF, 0xFF, 0x26, 0x23, 0xAA, 0x00, 0x00, 0x12, 0x08, 0x2D, 0x00, 0x23, 0x77, 0x71, 
   0xB0, 0xBF, 0xDD, 0x8A, 0x9C, 0x91, 0x22, 0x37, 0x65, 0x5D, 0x50, 0xF1, 0x82, 0x59, 0xB9, 0x02, 
   0x41, 0x00, 0x0C, 0x57, 0x49, 0x6D, 0x67, 0x9E, 0x5E, 0x39, 0x51, 0x47, 0x3F, 0x9D, 0x35, 0x6D, 
   0xB4, 0x4C, 0x57, 0x4C, 0x5D, 0x57, 0x5B, 0x29, 0x51, 0x94, 0x3B, 0x41, 0x7E, 0x4D, 0x5E, 0x63, 
   0x3E, 0x7B, 0x65, 0x7C, 0x68, 0xB6, 0x63, 0x4A, 0xBA, 0x17, 0x37, 0x57, 0x00, 0x32, 0x38, 0x57, 
   0x71, 0x5B, 0x7B, 0x72, 0x91, 0x32, 0x4B, 0x9E, 0x2C, 0x45, 0x55, 0x65, 0x4C, 0x9A, 0x75, 0x90, 
   0xD1, 0x0D, 0x56, 0x3A, 0x02, 0x00, 0x00, 0x76, 0x57, 0xA4, 0x78, 0xC3, 0xE1, 0x60, 0x4A, 0xA7, 
   0x25, 0x00, 0x70, 0x03, 0x27, 0x08, 0x76, 0x9C, 0x7B, 0x87, 0x87, 0xD2, 0x0A, 0x2C, 0x40, 0x1D, 
   0x59, 0x6F, 0xAC, 0x87, 0xD1, 0x72, 0x6F, 0x97, 0x00, 0x34, 0x50, 0x25, 0x28, 0x4F, 0x6B, 0x62, 
   0x73, 0x4B, 0x6F, 0x87, 0x57, 0x6F, 0xB1, 0x72, 0x46, 0xD6, 0x3E, 0x67, 0x50, 0x1B, 0x35, 0x00, 
   0x4E, 0x3C, 0xA7, 0x5A, 0x98, 0xFF, 0x43, 0x5F, 0x61, 0x54, 0x42, 0x3A, 0x42, 0x52, 0x66, 0x3D, 
   0x64, 0x41, 0x54, 0x53, 0xA4, 0x59, 0x86, 0xC2, 0x42, 0x51, 0x6C, 0x42, 0x39, 0x60, 0x5E, 0x5B, 
   0xA9, 0x51, 0x5B, 0x95, 0x1C, 0x3F, 0x27, 0x23, 0x45, 0x28, 0x32, 0x68, 0x72, 0x95, 0x64, 0xD8, 
   0x5D, 0x53, 0xC9, 0x35, 0x59, 0x66, 0x61, 0x69, 0x6A, 0x64, 0x4C, 0xBC, 0x02, 0x2F, 0x65, 0x00, 
   0x4D, 0x1A, 0x7D, 0x7C, 0x89, 0x90, 0x93, 0xC5, 0x4A, 0x59, 0xBE, 0x1A, 0x3A, 0x50, 0x4C, 0x40, 
   0x65, 0x4D, 0x63, 0x7C, 0x32, 0x64, 0x67, 0x60, 0x59, 0xAC, 0x44, 0x69, 0x8F, 0x56, 0x5D, 0x40, 
   0x50, 0x19, 0x63, 0x24, 0x38, 0x7D, 0x86, 0xA6, 0xE0, 0x90, 0xBB, 0xEE, 0x0A, 0x00, 0x18, 0x00, 
   0x00, 0x00, 0x61, 0x75, 0xBF, 0x91, 0xBC, 0xFA, 0x52, 0x5C, 0x4F, 0x00, 0x00, 0x1D, 0x54, 0x90, 
   0xCF, 0xA0, 0xFF, 0xBA, 0x5B, 0x51, 0x6F, 0x0F, 0x00, 0x6D, 0x32, 0x54, 0x36, 0x8A, 0xFF, 0x9A, 
   0x69, 0x8C, 0xFF, 0x1A, 0x00, 0x90, 0x85, 0x73, 0x49, 0x95, 0xD8, 0x71, 0x00, 0x1A, 0x9A, 0x21, 
   0x09, 0xA1, 0x61, 0x67, 0x58, 0x21, 0x7D, 0x6D, 0x74, 0xA2, 0xE2, 0xEC, 0xCE, 0xF8, 0x43, 0x53, 
   0xA2, 0x00, 0x00, 0x29, 0x37, 0x66, 0x05, 0x3E, 0x83, 0x8B, 0x47, 0x67, 0xDF, 0x98, 0x45, 0xA3, 
   0x43, 0x52, 0x64, 0x28, 0x8C, 0xCF, 0x79, 0xA7, 0x99, 0x7A, 0x28, 0x1A, 0x67, 0x11, 0x8C, 0x6F, 
   0xAD, 0xF3, 0x2E, 0xB9, 0xA7, 0x42, 0x5B, 0x57, 0x14, 0x14, 0x2C, 0x0C, 0x37, 0x5A, 0x93, 0x7F, 
   0x9B, 0xC3, 0xC5, 0x83, 0x5A, 0x95, 0xAC, 0x00, 0x00, 0xB2, 0x0C, 0x37, 0x7D, 0xA2, 0xB0, 0x70, 
   0x81, 0x79, 0x81, 0x00, 0x3C, 0x81, 0x67, 0x75, 0x81, 0xDA, 0x7B, 0x81, 0x66, 0x5F, 0x81, 0x00, 
   0x54, 0x81, 0x2A, 0x7C, 0x81, 0x8D, 0xAF, 0x76, 0x66, 0x5D, 0x82, 0x3E, 0x05, 0xA4, 0x63, 0x71, 
   0x76, 0x25, 0x7E, 0x6F, 0x32, 0x53, 0x8C, 0x9F, 0x8D, 0x81, 0x56, 0x6B, 0x81, 0x38, 0x4E, 0x81, 
   0x7A, 0xA3, 0x81, 0x19, 0x5E, 0x81, 0x15, 0x31, 0x8C, 0x8A, 0x82, 0x75, 0x8C, 0x9F, 0x6A, 0x2D, 
   0x4F, 0x82, 0x7C, 0x59, 0xBB, 0x91, 0x80, 0x60, 0x28, 0x51, 0x70, 0x20, 0x50, 0xA3, 0x64, 0x6C, 
   0x6F, 0x64, 0x5C, 0x8B, 0x69, 0x6D, 0x7F, 0x3A, 0x7F, 0x52, 0x00, 0x41, 0x97, 0x78, 0x65, 0x98, 
   0xE5, 0xD7, 0x6B, 0x54, 0xAC, 0xA3, 0x2B, 0x28, 0x96, 0x15, 0x0C, 0x45, 0x05, 0x18, 0x61, 0x31, 
   0x5B, 0xA2, 0xC4, 0xC6, 0x8D, 0x97, 0xD2, 0x82, 0x1C, 0x24, 0x8D, 0x03, 0x00, 0x76, 0x5F, 0x6D, 
   0x81, 0x78, 0x87, 0x7B, 0x46, 0x8D, 0x6B, 0x6C, 0x64, 0x99, 0x53, 0x45, 0x8E, 0x09, 0x2E, 0x71, 
   0x17, 0x64, 0x8E, 0xDF, 0xBB, 0x83, 0x40, 0x5D, 0xB0, 0x30, 0x52, 0xD1, 0x8B, 0x90, 0x68, 0x5D, 
   0x74, 0x5F, 0x23, 0x5C, 0x8B, 0x3A, 0x50, 0x7F, 0x4D, 0x61, 0x63, 0x7C, 0x7E, 0x9C, 0x70, 0x6C, 
   0x91, 0x40, 0x66, 0x6F, 0x49, 0x5A, 0x70, 0x32, 0x4F, 0xAA, 0x33, 0x56, 0xCB, 0x73, 0xAD, 0x57, 
   0x73, 0x8F, 0x4F, 0x3E, 0x4D, 0xC6, 0x16, 0x22, 0x81, 0x55, 0x35, 0x36, 0x8A, 0x8E, 0x6C, 0x67, 
   0xB9, 0xDB, 0x31, 0x84, 0xBA, 0x24, 0x0B, 0x53, 0x52, 0x5F, 0x6F, 0x75, 0xC0, 0x9D, 0x4E, 0x63, 
   0x8C, 0x42, 0x11, 0xA8, 0x5D, 0x4F, 0x79, 0x46, 0x85, 0x40, 0x46, 0xAC, 0x91, 0x4C, 0x55, 0xA4, 
   0x46, 0x00, 0x94, 0x4D, 0x58, 0x77, 0x3D, 0xA7, 0x4B, 0x72, 0xBA, 0xCA, 0xA4, 0xB5, 0xFF, 0x1F, 
   0x15, 0x6A, 0x0B, 0x00, 0x1D, 0x4F, 0x8E, 0x7D, 0x62, 0x69, 0x75, 0x3B, 0x21, 0x8A, 0x43, 0x6F, 
   0xCA, 0x61, 0xA0, 0x9D, 0x95, 0x9A, 0xA6, 0x70, 0x74, 0x65, 0x06, 0x11, 0x31, 0x00, 0x01, 0x7E, 
   0x87, 0xAB, 0xBF, 0xC7, 0xB4, 0xCA, 0x21, 0x91, 0x83, 0x08, 0x5A, 0x1C, 0x63, 0x0D, 0x79, 0x53, 
   0x20, 0xCC, 0x1C, 0x7F, 0x7F, 0x69, 0xB5, 0x86, 0xA9, 0x88, 0xB4, 0x64, 0x59, 0x9D, 0x45, 0x5D, 
   0x9B, 0x31, 0x55, 0x87, 0x0B, 0x12, 0x37, 0x4D, 0x66, 0x6D, 0xC2, 0xF7, 0xFD, 0xAA, 0xBB, 0xB4, 
   0x12, 0x00, 0x67, 0x00, 0x00, 0x5A, 0x41, 0x85, 0x30, 0xBE, 0xBE, 0xFC, 0x8C, 0xA9, 0xFF, 0x6D, 
   0x63, 0x4C, 0x35, 0x6B, 0x08, 0x00, 0x73, 0x85, 0x66, 0x3D, 0xA9, 0x66, 0x37, 0xD1, 0x27, 0x66, 
   0x9C, 0x4F, 0x7E, 0x94, 0x76, 0x98, 0x53, 0x3D, 0x40, 0x9C, 0x3D, 0x1D, 0xDD, 0x6A, 0x84, 0x1E, 
   0x4E, 0x73, 0x02, 0x3C, 0x77, 0xCC, 0x74, 0x6C, 0xFC, 0x78, 0x3A, 0x83, 0x36, 0x00, 0x67, 0x18, 
   0x51, 0x5D, 0x24, 0x86, 0x5C, 0x64, 0x69, 0x6E, 0x87, 0x51, 0x9C, 0x2B, 0x56, 0x5E, 0x13, 0x34, 
   0x87, 0x74, 0x5C, 0xCA, 0x5D, 0x6E, 0x67, 0x0D, 0x4C, 0x22, 0x30, 0x46, 0x9A, 0x8C, 0x7A, 0xA6, 
   0x58, 0x63, 0x35, 0x0E, 0x3A, 0x59, 0x4C, 0x72, 0xDD, 0x6F, 0x6C, 0x9E, 0x47, 0x32, 0x35, 0x2F, 
   0x3D, 0x6D, 0x35, 0x5A, 0x96, 0x5F, 0x62, 0x8C, 0x60, 0x58, 0x75, 0x5F, 0x7F, 0x75, 0x25, 0x5C, 
   0x87, 0x35, 0x2E, 0x7C, 0x3C, 0x57, 0x60, 0x49, 0x85, 0x8F, 0x7C, 0x67, 0xD9, 0x48, 0x42, 0x75, 
   0x24, 0x0E, 0x1D, 0x19, 0x32, 0x3A, 0x43, 0x7A, 0x95, 0x7E, 0x93, 0xED, 0x79, 0x65, 0xAE, 0x33, 
   0x14, 0x34, 0x1B, 0x52, 0x67, 0x38, 0x80, 0x96, 0x8F, 0x5D, 0x97, 0x66, 0x34, 0xA1, 0x10, 0x44, 
   0x45, 0x37, 0x61, 0x51, 0x6B, 0x45, 0xB2, 0x2C, 0x6D, 0xA6, 0x1C, 0x35, 0x28, 0x78, 0x42, 0x40, 
   0x67, 0x9E, 0xE8, 0x4F, 0x5F, 0xD6, 0x42, 0x2B, 0x5F, 0x36, 0x5D, 0x28, 0x31, 0x6F, 0x3F, 0x5F, 
   0x4D, 0xA8, 0x54, 0x4D, 0xB5, 0x32, 0x5E, 0x4F, 0x49, 0x7A, 0x60, 0x86, 0x4B, 0xD1, 0x34, 0x2D, 
   0x8A, 0x00, 0x49, 0x16, 0x28, 0x2D, 0x34, 0x6F, 0x73, 0xB5, 0x7C, 0x6F, 0xB8, 0x28, 0x47, 0x7A, 
   0x4A, 0x5E, 0x6A, 0x66, 0x69, 0x9D, 0x55, 0x63, 0xC4, 0x37, 0x2F, 0x50, 0x15, 0x58, 0x32, 0x6C, 
   0x86, 0x94, 0x78, 0x41, 0xAC, 0x4E, 0x3A, 0x89, 0x1F, 0x73, 0x44, 0x1A, 0x36, 0x7D, 0x65, 0x6F, 
   0xBC, 0x93, 0x64, 0x9F, 0x1B, 0x4D, 0x47, 0x09, 0x52, 0x15, 0x71, 0x4D, 0xBC, 0x79, 0x69, 0xFD, 
   0x40, 0x5D, 0x0F, 0x39, 0x2F, 0x59, 0x2E, 0x4D, 0xEE, 0x5C, 0x76, 0x82, 0x67, 0x76, 0x35, 0x17, 
   0x0B, 0x62, 0x35, 0x5C, 0x8C, 0x86, 0xC8, 0x8D, 0x6F, 0x60, 0x8D, 0x1E, 0x00, 0x65, 0x00, 0x00, 
   0x40, 0x67, 0xAF, 0xC0, 0xB3, 0xFF, 0xD2, 0x78, 0x84, 0x92, 0x00, 0x00, 0x7C, 0x0E, 0x10, 0x00, 
   0x7D, 0x5D, 0x37, 0x7F, 0x90, 0xFF, 0x2A, 0xD6, 0xFE, 0x6E, 0x73, 0x1B, 0x78, 0x09, 0x2E, 0x1C, 
   0x5D, 0x47, 0x07, 0x28, 0x70, 0x8E, 0x67, 0xFA, 0xC2, 0xFF, 0xFF, 0x43, 0x9F, 0x9B, 0x0D, 0x00, 
   0x2E, 0x45, 0x21, 0x63, 0x40, 0x84, 0x7A, 0x6F, 0xAE, 0x87, 0x91, 0x7F, 0xAF, 0x4B, 0x32, 0x82, 
   0x00, 0x27, 0x82, 0x05, 0x58, 0x7E, 0xB6, 0xBD, 0x7A, 0xF6, 0xC8, 0xCA, 0x7E, 0x62, 0xD3, 0x00, 
   0x02, 0x79, 0x00, 0x2E, 0x56, 0x7A, 0x85, 0x37, 0x88, 0x65, 0x65, 0x0D, 0x3A, 0x95, 0x31, 0xB2, 
   0x60, 0xA5, 0x9B, 0xAC, 0x7D, 0x00, 0xC3, 0x26, 0x77, 0x66, 0x31, 0x89, 0x64, 0x4F, 0x24, 0x75, 
   0x95, 0x63, 0x8C, 0x84, 0xAE, 0x81, 0x21, 0x41, 0x81, 0x4D, 0x52, 0x81, 0x42, 0x5F, 0x81, 0x65, 
   0x78, 0x81, 0x71, 0xAB, 0x81, 0x44, 0x87, 0x81, 0x77, 0x56, 0x76, 0x80, 0x53, 0x82, 0x00, 0x1B, 
   0xA9, 0x20, 0x52, 0x5F, 0xD3, 0xD7, 0x75, 0x8E, 0x83, 0x91, 0x00, 0x2C, 0x81, 0x16, 0x6B, 0x81, 
   0xCF, 0x93, 0x81, 0xA0, 0x76, 0x86, 0x00, 0x47, 0x86, 0x00, 0x31, 0x8C, 0x90, 0x99, 0x75, 0xC6, 
   0xAA, 0x6A, 0x17, 0x27, 0x82, 0x5A, 0x59, 0xC0, 0xC9, 0xBA, 0x76, 0x1B, 0x7A, 0x4D, 0x00, 0x34, 
   0x97, 0x63, 0x4A, 0x8C, 0xA4, 0x7F, 0x8B, 0x54, 0x80, 0x68, 0x1F, 0x47, 0x47, 0x10, 0x36, 0xAF, 
   0xCC, 0xB9, 0xCB, 0xC9, 0xBB, 0x6E, 0x00, 0x0B, 0x2E, 0x00, 0x02, 0x83, 0x46, 0x4D, 0x90, 0x6D, 
   0x64, 0x76, 0xA3, 0xB7, 0x8E, 0x6E, 0xB6, 0xA5, 0x38, 0x2E, 0x8D, 0x0D, 0x00, 0x69, 0x0E, 0x26, 
   0x4C, 0x67, 0x8B, 0x9D, 0xA2, 0xC2, 0x9E, 0x52, 0x6C, 0x77, 0x39, 0x3D, 0x6C, 0x49, 0x7B, 0x9A, 
   0x4A, 0x80, 0x94, 0x78, 0x42, 0x7D, 0x2B, 0x53, 0x9D, 0x0F, 0x48, 0xB3, 0x61, 0x50, 0x9F, 0x80, 
   0x96, 0x3B, 0x48, 0x75, 0x63, 0x3D, 0x5E, 0xBF, 0x60, 0x79, 0xA2, 0x61, 0x5C, 0x3C, 0x82, 0x50, 
   0x7D, 0x6D, 0x61, 0xDA, 0x0A, 0x9A, 0xB7, 0x37, 0x66, 0x64, 0x66, 0x2C, 0x3A, 0x35, 0x28, 0xAC, 
   0x76, 0xC4, 0xB2, 0xAE, 0xBC, 0x6C, 0x33, 0x08, 0x6A, 0x00, 0x00, 0x38, 0x77, 0x7C, 0x92, 0xC7, 
   0xCF, 0xFF, 0x3C, 0x74, 0x86, 0x00, 0x54, 0x00, 0x35, 0x15, 0x73, 0x7C, 0x60, 0xE3, 0x67, 0xC2, 
   0x95, 0x60, 0x6B, 0x77, 0x4D, 0x35, 0xA8, 0x3F, 0x97, 0x7D, 0x27, 0x06, 0x3E, 0x1D, 0x00, 0x6E, 
   0x53, 0xA8, 0x84, 0xB0, 0xF1, 0xED, 0x54, 0x68, 0xCF, 0x00, 0x1A, 0x1B, 0x58, 0x5C, 0x37, 0x86, 
   0xA6, 0xDD, 0x30, 0x3F, 0xC7, 0x2F, 0x38, 0x5A, 0x73, 0x92, 0x64, 0x41, 0x37, 0x81, 0x15, 0x28, 
   0x79, 0x72, 0x6A, 0xD6, 0x95, 0xB2, 0xAF, 0x70, 0xC2, 0x84, 0x0B, 0x4B, 0x81, 0x00, 0x00, 0x3D, 
   0x4C, 0x25, 0x8F, 0xAB, 0xFF, 0xF2, 0x99, 0xCA, 0x8C, 0x1F, 0x00, 0x74, 0x00, 0x25, 0x7A, 0x2C, 
   0x83, 0x7D, 0x81, 0x92, 0xCF, 0xB6, 0x88, 0xB4, 0x7B, 0x8D, 0x86, 0x0C, 0x5E, 0x8A, 0x27, 0x30, 
   0x90, 0x56, 0x58, 0x7A, 0x6E, 0x98, 0xBE, 0x57, 0x81, 0xBC, 0x46, 0x4C, 0x16, 0x25, 0x40, 0x8F, 
   0x6B, 0x58, 0xF7, 0x93, 0x9D, 0x69, 0x2C, 0x85, 0x79, 0x48, 0x1E, 0x8A, 0x59, 0x2C, 0x9D, 0x3F, 
   0xBE, 0xDA, 0x5D, 0x97, 0x78, 0xA7, 0x5C, 0x06, 0x8C, 0xA1, 0xC1, 0x3A, 0x6D, 0xFF, 0x00, 0x00, 
   0x7B, 0x00, 0x0B, 0x00, 0x5F, 0xC7, 0x64, 0xBB, 0xE8, 0xFF, 0xBC, 0x9C, 0xE6, 0x51, 0x37, 0x85, 
   0x00, 0x37, 0x0E, 0x27, 0x72, 0x5C, 0x86, 0x68, 0xD9, 0x30, 0x11, 0x72, 0x00, 0x39, 0x2D, 0x58, 
   0x7A, 0xAF, 0x76, 0x5E, 0x9F, 0x2C, 0x5E, 0x5A, 0x43, 0x74, 0x80, 0x6B, 0x4C, 0x74, 0x58, 0x40, 
   0x74, 0x24, 0x62, 0x7A, 0x29, 0x51, 0x85, 0x6E, 0x63, 0x89, 0x63, 0x6E, 0x4A, 0x3B, 0x4B, 0x6C, 
   0x45, 0x3F, 0x9A, 0x2E, 0x61, 0x57, 0x08, 0x45, 0x59, 0x93, 0x67, 0xC1, 0x9E, 0x77, 0xAA, 0x00, 
   0x26, 0x47, 0x01, 0x20, 0x57, 0x6E, 0x6D, 0x90, 0x8C, 0x9C, 0x9B, 0x1A, 0x51, 0x50, 0x1F, 0x0C, 
   0x1A, 0x70, 0x4C, 0xA7, 0x77, 0xB3, 0xFF, 0x37, 0x67, 0x7E, 0x2A, 0x15, 0x23, 0x3B, 0x3D, 0x65, 
   0x3C, 0x77, 0x3A, 0x64, 0x61, 0x93, 0x43, 0x29, 0xB8, 0x23, 0x52, 0x64, 0xAC, 0xA3, 0xC4, 0x71, 
   0x5E, 0x94, 0x00, 0x1F, 0x00, 0x20, 0x52, 0x61, 0xB7, 0x97, 0xE1, 0x63, 0x74, 0x8D, 0x33, 0x44, 
   0x79, 0x41, 0x1B, 0x93, 0x30, 0x70, 0x52, 0x20, 0x34, 0x1B, 0x5B, 0x4D, 0xAE, 0x68, 0x9E, 0xFF, 
   0x62, 0x5A, 0x6F, 0x3E, 0x42, 0x44, 0x31, 0x63, 0x8B, 0x3C, 0x41, 0x69, 0x53, 0x5D, 0x5E, 0x4D, 
   0x58, 0xAD, 0x42, 0x58, 0x4D, 0x49, 0x58, 0x59, 0x70, 0x5D, 0xC0, 0x47, 0x68, 0x91, 0x23, 0x67, 
   0x22, 0x1D, 0x22, 0x40, 0x5E, 0x61, 0x9F, 0x70, 0x6E, 0xC9, 0x54, 0x52, 0x95, 0x2B, 0x4D, 0x38, 
   0x31, 0x6F, 0x54, 0x58, 0x4C, 0xB6, 0x3D, 0x2F, 0x83, 0x1D, 0x58, 0x3A, 0x90, 0x7B, 0x96, 0x95, 
   0x74, 0xC4, 0x37, 0x4A, 0x8E, 0x00, 0x10, 0x25, 0x3B, 0x29, 0x4D, 0x7B, 0x9D, 0x8D, 0x4F, 0x5A, 
   0xA5, 0x44, 0x53, 0x88, 0x65, 0x4D, 0x5E, 0x26, 0x52, 0x5D, 0x37, 0x52, 0x4E, 0x61, 0x5E, 0x90, 
   0x62, 0x8B, 0xE8, 0x61, 0x56, 0x8C, 0x21, 0x00, 0x07, 0x17, 0x19, 0x58, 0x7B, 0x97, 0xD8, 0x93, 
   0xE9, 0xD3, 0x42, 0x5E, 0x4D, 0x13, 0x00, 0x1E, 0x51, 0x70, 0xA3, 0x7A, 0x8D, 0xC1, 0x25, 0x0D, 
   0x50, 0x0B, 0x00, 0x5D, 0x96, 0xD6, 0xD1, 0xAD, 0xFF, 0xE2, 0x43, 0x68, 0x77, 0x01, 0x00, 0x0D, 
   0x24, 0x03, 0x3D, 0x93, 0xFF, 0xA4, 0x56, 0x97, 0xFF, 0x2A, 0x02, 0xC2, 0x85, 0x88, 0x02, 0x42, 
   0x3F, 0x0F, 0x2C, 0x3C, 0xD2, 0xA8, 0xCB, 0xFF, 0x4B, 0x76, 0xC3, 0x00, 0x24, 0x53, 0x3A, 0x5C, 
   0x56, 0x76, 0x74, 0x7F, 0x61, 0x75, 0xE5, 0x82, 0x75, 0x9E, 0x5D, 0x7F, 0x1E, 0x00, 0x45, 0x7D, 
   0x12, 0x45, 0x8A, 0x78, 0x4C, 0x33, 0x7D, 0x89, 0xC6, 0xC6, 0xF7, 0xFF, 0x77, 0xCA, 0xAB, 0x00, 
   0x00, 0x41, 0x00, 0x00, 0x1A, 0x2F, 0x38, 0x59, 0x78, 0xAB, 0x9A, 0xD5, 0xE6, 0x6B, 0x19, 0x3F, 
   0xA6, 0x00, 0x00, 0xAC, 0x7C, 0x84, 0x7D, 0x96, 0xA3, 0x64, 0x74, 0x5F, 0x7A, 0x1E, 0x6A, 0x80, 
   0x51, 0x64, 0x75, 0xDF, 0x8C, 0x8C, 0x53, 0x74, 0x81, 0x00, 0x2A, 0x86, 0x40, 0x70, 0x86, 0xB6, 
   0xBC, 0x81, 0x63, 0x71, 0x81, 0x4A, 0x41, 0x81, 0x63, 0x67, 0x81, 0x13, 0x55, 0x76, 0x37, 0x56, 
   0x82, 0xA5, 0x80, 0xAF, 0x7C, 0x65, 0x6A, 0x09, 0x71, 0x63, 0x37, 0x77, 0x97, 0x6E, 0x77, 0x81, 
   0x71, 0x55, 0x86, 0x92, 0x7C, 0x75, 0x61, 0x7B, 0x75, 0x00, 0x5E, 0x86, 0x10, 0x31, 0x86, 0x8B, 
   0x82, 0x6F, 0xAA, 0xAA, 0x75, 0x54, 0x4F, 0x81, 0x4D, 0x5A, 0x98, 0x88, 0x8D, 0x7B, 0x31, 0x75, 
   0x6A, 0x0E, 0x40, 0x97, 0x4E, 0x62, 0x7A, 0x84, 0x6F, 0x80, 0x94, 0x9D, 0x80, 0x6E, 0xB1, 0x80, 
   0x00, 0x1A, 0x96, 0x2C, 0x24, 0x73, 0x93, 0xA7, 0x5C, 0x1D, 0x52, 0x96, 0x5D, 0x37, 0x86, 0xA6, 
   0xAE, 0x82, 0x23, 0x53, 0x88, 0x27, 0x30, 0x99, 0x88, 0xB2, 0x86, 0x4F, 0x66, 0x69, 0x2C, 0x10, 
   0x69, 0x38, 0x4A, 0x86, 0x73, 0x70, 0x8D, 0x69, 0x8F, 0x77, 0x25, 0x96, 0x7D, 0x74, 0x6C, 0x94, 
   0x94, 0x5D, 0x83, 0x00, 0x1D, 0x71, 0x52, 0x5D, 0x8D, 0x52, 0x58, 0x93, 0x16, 0x48, 0x81, 0x4C, 
   0x4B, 0x8B, 0x9F, 0x98, 0x6F, 0x73, 0x99, 0x80, 0x4B, 0x6A, 0x81, 0x60, 0x4B, 0x7D, 0x58, 0x5C, 
   0x90, 0x3A, 0x68, 0xC5, 0x2D, 0x84, 0xC8, 0x38, 0x72, 0x47, 0x39, 0x38, 0x23, 0x57, 0x49, 0xA7, 
   0x76, 0x78, 0xC9, 0x70, 0x96, 0x5B, 0x74, 0x8F, 0x2E, 0x38, 0x5A, 0xB9, 0x1F, 0x36, 0xE8, 0x36, 
   0x37, 0x6A, 0x6A, 0x94, 0x4C, 0x70, 0x95, 0xA6, 0x25, 0x55, 0x5D, 0x26, 0x2E, 0x71, 0x8E, 0x69, 
   0xC8, 0x8E, 0xFF, 0xA6, 0x47, 0xA8, 0x7C, 0x33, 0x00, 0x9A, 0x0A, 0x00, 0x3D, 0x2E, 0x70, 0x23, 
   0x6A, 0xCD, 0xD9, 0x6C, 0xA7, 0xED, 0x87, 0x81, 0xBD, 0x34, 0x27, 0x58, 0x00, 0x00, 0x01, 0x64, 
   0x8B, 0x8D, 0xBB, 0xF4, 0xFE, 0x43, 0x5F, 0xAE, 0x00, 0x23, 0x6B, 0x58, 0x87, 0x47, 0x75, 0x3E, 
   0x81, 0x4E, 0x1E, 0x7F, 0x47, 0xA3, 0xB4, 0x25, 0x89, 0xBA, 0x7B, 0x6B, 0x79, 0x8A, 0x7A, 0x76, 
   0x00, 0x29, 0x5E, 0x18, 0x2A, 0x39, 0x92, 0x7C, 0xD0, 0x87, 0x8A, 0xC7, 0x00, 0x58, 0x6C, 0x1D, 
   0x81, 0x71, 0xD6, 0x81, 0xA6, 0x92, 0x63, 0xA7, 0x18, 0x46, 0x95, 0x1B, 0x63, 0x62, 0x34, 0x71, 
   0x69, 0x70, 0x79, 0xC6, 0xAF, 0xC7, 0xFE, 0x45, 0x7E, 0x6D, 0x00, 0x00, 0x3C, 0x06, 0x00, 0x5F, 
   0xA0, 0xFF, 0x86, 0xE2, 0xFF, 0xFF, 0x83, 0x25, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x25, 0x44, 
   0x89, 0xAC, 0xBC, 0xC1, 0xF0, 0xE9, 0xDC, 0xE4, 0x76, 0x8C, 0x94, 0x00, 0x07, 0x5F, 0x00, 0x0D, 
   0x2D, 0x2B, 0x19, 0x61, 0x21, 0x31, 0x9E, 0xAA, 0xE9, 0x9C, 0xCE, 0xFF, 0xB5, 0x4D, 0x73, 0xD0, 
   0x41, 0x36, 0xE4, 0x40, 0x23, 0x25, 0x00, 0x10, 0x00, 0x10, 0x44, 0x83, 0x69, 0x9C, 0xC0, 0x6C, 
   0x5E, 0x5D, 0x66, 0x36, 0xB2, 0x3E, 0x5D, 0xB1, 0x16, 0x4D, 0x49, 0x60, 0x69, 0x7F, 0x64, 0x7A, 
   0x84, 0x13, 0x35, 0x35, 0x1E, 0x40, 0x9C, 0x74, 0x79, 0xBE, 0x68, 0x6D, 0x5B, 0x22, 0x33, 0x43, 
   0x10, 0x49, 0x8E, 0x45, 0x4F, 0x94, 0x5E, 0x72, 0x35, 0x49, 0x67, 0x65, 0x5A, 0x56, 0xD9, 0x64, 
   0x5A, 0xB0, 0x46, 0x2C, 0x41, 0x17, 0x60, 0x6B, 0x23, 0x61, 0x76, 0x47, 0x40, 0x29, 0x4E, 0x5D, 
   0x88, 0x4A, 0x91, 0xBF, 0x6C, 0x5C, 0xDC, 0x64, 0x27, 0xA9, 0x07, 0x20, 0x00, 0x1E, 0x4A, 0x00, 
   0x7B, 0x90, 0xE7, 0x55, 0x6E, 0xB8, 0x38, 0x39, 0x68, 0x60, 0x1D, 0x7D, 0x33, 0x5D, 0x60, 0x4F, 
   0x97, 0x94, 0x7C, 0x64, 0x8E, 0x27, 0x1F, 0x56, 0x0B, 0x58, 0x69, 0x7E, 0x8B, 0xB4, 0x9A, 0x62, 
   0xC4, 0x1A, 0x20, 0x70, 0x00, 0x20, 0x00, 0x65, 0x4B, 0x3D, 0x7E, 0x9D, 0xF8, 0x57, 0x65, 0xC6, 
   0x44, 0x42, 0x5B, 0x4E, 0x58, 0x2A, 0x3D, 0x58, 0x3C, 0x42, 0x63, 0xD9, 0x58, 0x41, 0xE9, 0x25, 
   0x63, 0x1A, 0x31, 0x68, 0x4C, 0x81, 0x57, 0xBE, 0x58, 0x35, 0xAC, 0x02, 0x63, 0x39, 0x30, 0x69, 
   0x2F, 0x76, 0x63, 0xAB, 0x65, 0x40, 0xCA, 0x2B, 0x40, 0x8B, 0x1F, 0x63, 0x4F, 0x69, 0x7A, 0x6F, 
   0x68, 0x68, 0x9B, 0x00, 0x2A, 0x2F, 0x20, 0x52, 0x3D, 0x95, 0x7B, 0xC4, 0x7A, 0x6F, 0xCB, 0x4A, 
   0x4B, 0x90, 0x25, 0x38, 0x4F, 0x24, 0x33, 0x59, 0x41, 0x57, 0x8C, 0x5F, 0x70, 0x81, 0x43, 0x81, 
   0x6A, 0x33, 0x5F, 0x5F, 0x6C, 0x53, 0xB5, 0x6B, 0x64, 0xB9, 0x04, 0x4D, 0x14, 0x20, 0x52, 0x27, 
   0x82, 0x68, 0xFF, 0x4A, 0x5B, 0xAE, 0x2D, 0x28, 0x00, 0x29, 0x03, 0x6F, 0x48, 0x91, 0xDF, 0xB0, 
   0xEF, 0xC3, 0x76, 0x81, 0x71, 0x13, 0x04, 0x47, 0x0C, 0x00, 0x53, 0x59, 0x8A, 0xA5, 0x9F, 0x9E, 
   0xC8, 0x54, 0x39, 0x56, 0x00, 0x19, 0x61, 0x66, 0xC6, 0xBC, 0x9F, 0xC0, 0x78, 0x47, 0x33, 0x98, 
   0x06, 0x25, 0x80, 0x07, 0x05, 0x15, 0x7C, 0x6A, 0x74, 0x7F, 0xCF, 0xEA, 0x00, 0x38, 0x86, 0xB2, 
   0x78, 0x76, 0xFA, 0xE2, 0xBA, 0x00, 0x56, 0xA1, 0x00, 0x00, 0x2D, 0x42, 0x32, 0x5C, 0x5E, 0xAE, 
   0xB5, 0x79, 0xB5, 0xCD, 0xB2, 0x6A, 0x9D, 0x54, 0x46, 0x76, 0x00, 0x3B, 0x6C, 0x35, 0x8C, 0x37, 
   0x77, 0x98, 0x40, 0x9B, 0x4C, 0xB6, 0x8E, 0x68, 0xDB, 0x0F, 0x69, 0xAC, 0x47, 0x96, 0x90, 0xA1, 
   0x97, 0x30, 0x49, 0x00, 0x5B, 0x00, 0x00, 0x7E, 0x48, 0xB9, 0x7B, 0xA1, 0xB0, 0xAB, 0x7F, 0x17, 
   0xB2, 0x00, 0x3A, 0x83, 0x0A, 0xA8, 0x5F, 0xB4, 0x71, 0x75, 0xA0, 0x5B, 0x91, 0x59, 0x9F, 0x75, 
   0x33, 0x7B, 0x80, 0x2B, 0x35, 0x75, 0x63, 0x57, 0x91, 0x74, 0x86, 0x75, 0x00, 0x76, 0x75, 0x4F, 
   0x6A, 0x8C, 0xBD, 0x6E, 0x81, 0x87, 0x68, 0x81, 0x00, 0x40, 0x81, 0x04, 0x5E, 0x81, 0xEA, 0xA3, 
   0x76, 0x88, 0x6A, 0x87, 0x00, 0x31, 0x9D, 0x1A, 0x70, 0x5E, 0x9B, 0x8E, 0x69, 0x87, 0x6C, 0x97, 
   0x4E, 0x5A, 0x86, 0x31, 0x71, 0x75, 0x92, 0x77, 0x75, 0x9B, 0x7B, 0x81, 0x00, 0x47, 0x92, 0x05, 
   0x31, 0xA3, 0x95, 0x99, 0x69, 0x91, 0x9F, 0x52, 0x24, 0x4A, 0x81, 0x4C, 0x5A, 0xC6, 0xAB, 0x99, 
   0x7B, 0x1C, 0x81, 0x5E, 0x05, 0x25, 0x7A, 0x89, 0x63, 0x98, 0xBC, 0xBD, 0xAE, 0x78, 0x6A, 0x67, 
   0x00, 0x06, 0x2D, 0x00, 0x1D, 0x83, 0x6E, 0x66, 0xAD, 0xFB, 0xCA, 0x64, 0x78, 0xB9, 0x70, 0x00, 
   0x32, 0x99, 0x2B, 0x39, 0x9E, 0x2B, 0x2D, 0x6A, 0x3E, 0x68, 0x58, 0xA1, 0xB9, 0x86, 0x7E, 0x90, 
   0xA3, 0x0F, 0x00, 0x6A, 0x00, 0x1D, 0x64, 0x69, 0x88, 0x99, 0xA4, 0xC4, 0xAB, 0x7A, 0x95, 0x72, 
   0x2D, 0x3B, 0x77, 0x19, 0x2D, 0x82, 0x4D, 0x5D, 0x6C, 0x47, 0x52, 0x56, 0x43, 0x5F, 0x91, 0x1E, 
   0x56, 0xA3, 0x66, 0x6F, 0xAE, 0x96, 0xA4, 0x48, 0x73, 0x70, 0x7D, 0x3D, 0x58, 0xBD, 0x24, 0x74, 
   0xB9, 0x3B, 0x7F, 0x79, 0x85, 0x51, 0x61, 0x52, 0x51, 0x94, 0x29, 0x8A, 0xB5, 0x68, 0x99, 0x5D, 
   0x5D, 0x0A, 0x50, 0x30, 0x28, 0x7A, 0x85, 0xDC, 0x9F, 0xB6, 0xDB, 0xCD, 0x00, 0x15, 0x75, 0x00, 
   0x00, 0x3A, 0x7B, 0x58, 0x8A, 0xB7, 0x95, 0xB4, 0x45, 0x97, 0x8C, 0x2C, 0x69, 0x43, 0x47, 0x4B, 
   0x94, 0x64, 0x94, 0xDE, 0x5D, 0x96, 0x98, 0x13, 0x00, 0x4C, 0x4C, 0x27, 0x67, 0x69, 0xB7, 0x96, 
   0x59, 0x70, 0x87, 0x4D, 0x6F, 0x92, 0x4C, 0x72, 0x6A, 0x4B, 0x38, 0xA9, 0x2E, 0x33, 0x9D, 0x14, 
   0x4D, 0x10, 0x88, 0xA0, 0xA7, 0x89, 0xCE, 0xFF, 0x1C, 0x3D, 0x7A, 0x31, 0x1E, 0x54, 0x7F, 0x88, 
   0x69, 0x4B, 0x7C, 0x5A, 0x00, 0x0B, 0x9B, 0x41, 0x47, 0xA9, 0xA4, 0xA1, 0xD1, 0x88, 0xE5, 0xB1, 
   0x35, 0x79, 0x37, 0x00, 0x00, 0x42, 0x00, 0x00, 0x84, 0x5B, 0xEB, 0xD3, 0xBA, 0xD4, 0xC9, 0x81, 
   0x61, 0x7D, 0x23, 0x57, 0x49, 0x31, 0x60, 0x87, 0x3D, 0x17, 0x9A, 0x2F, 0x42, 0x69, 0x76, 0xBE, 
   0xAF, 0x93, 0xD5, 0xDC, 0x5F, 0x5F, 0x69, 0x29, 0x00, 0x84, 0x3F, 0x32, 0xB5, 0x47, 0x97, 0x33, 
   0x66, 0x9A, 0x84, 0x95, 0x83, 0xF1, 0x99, 0x5F, 0xB7, 0x12, 0x5D, 0x6F, 0x00, 0x4B, 0x35, 0x78, 
   0x26, 0x23, 0xE2, 0xA6, 0xFF, 0x74, 0xD4, 0xFF, 0x36, 0x37, 0x88, 0x38, 0x4F, 0x00, 0x30, 0x6D, 
   0x3F, 0x36, 0x00, 0xD5, 0x4E, 0x2E, 0xA4, 0x56, 0x60, 0x2F, 0x53, 0x97, 0xA3, 0xAD, 0xFF, 0xFF, 
   0xA2, 0x7B, 0xE1, 0x00, 0x00, 0x53, 0x00, 0x0A, 0x00, 0x21, 0x89, 0x1F, 0x85, 0x64, 0xB3, 0x77, 
   0x64, 0xCE, 0x22, 0x58, 0x63, 0x50, 0x3B, 0x85, 0x89, 0x4D, 0xBC, 0x28, 0x64, 0x42, 0x27, 0x64, 
   0x40, 0x70, 0x5D, 0xAB, 0x75, 0x62, 0x73, 0x1D, 0x44, 0x6E, 0x32, 0x38, 0xA0, 0x38, 0x6B, 0x6C, 
   0x2E, 0x43, 0x3E, 0x3B, 0x43, 0x83, 0x8B, 0x5A, 0xA0, 0x25, 0x4A, 0x52, 0x26, 0x4B, 0x6B, 0x92, 
   0x79, 0xE4, 0x80, 0x83, 0xC4, 0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x75, 0x6D, 0xA8, 0x88, 0xAD, 
   0xCE, 0x4F, 0x68, 0xA5, 0x32, 0x11, 0x53, 0x4D, 0x3E, 0x4C, 0x41, 0x72, 0x85, 0x36, 0x73, 0x6A, 
   0x4E, 0x41, 0x89, 0x55, 0x63, 0xB1, 0x60, 0x79, 0x7D, 0x4D, 0x3F, 0x69, 0x03, 0x22, 0x36, 0x2C, 
   0x4C, 0x60, 0xA6, 0x97, 0xD4, 0x67, 0x69, 0xA7, 0x00, 0x13, 0x1E, 0x4E, 0x57, 0xB1, 0x65, 0x90, 
   0xA5, 0x2C, 0x4B, 0x39, 0x3E, 0x12, 0x72, 0x66, 0x84, 0xCE, 0x44, 0x63, 0x8A, 0x5A, 0x3B, 0x60, 
   0x32, 0x58, 0x75, 0x32, 0x58, 0x4E, 0x60, 0x58, 0x66, 0x70, 0x5D, 0xC7, 0x2B, 0x68, 0x83, 0x3C, 
   0x57, 0x71, 0x69, 0x4B, 0x96, 0x40, 0x4B, 0x77, 0x24, 0x62, 0x20, 0x41, 0x3B, 0x34, 0x5A, 0x70, 
   0xB6, 0x78, 0x87, 0xBF, 0x55, 0x4D, 0xA8, 0x2B, 0x35, 0x73, 0x57, 0x6D, 0x5A, 0x51, 0x5B, 0xAC, 
   0x23, 0x29, 0x44, 0x1E, 0x74, 0x2E, 0x60, 0x8C, 0x81, 0x8F, 0x69, 0xD4, 0x55, 0x45, 0xA7, 0x09, 
   0x28, 0x3F, 0x2B, 0x4B, 0x60, 0x76, 0x85, 0xAB, 0x5F, 0x6F, 0x94, 0x09, 0x3B, 0x6A, 0x59, 0x3B, 
   0x47, 0x60, 0x7B, 0x80, 0x38, 0x65, 0x97, 0x55, 0x4E, 0x5F, 0x82, 0x69, 0x9E, 0x31, 0x6E, 0x9D, 
   0x08, 0x34, 0x00, 0x4E, 0x23, 0x90, 0x68, 0x6A, 0xFF, 0x5E, 0x8E, 0x6C, 0x4D, 0x4A, 0x3D, 0x1A, 
   0x1D, 0x6C, 0x6A, 0xA1, 0xCE, 0x75, 0x8A, 0xAB, 0x09, 0x00, 0x49, 0x37, 0x0F, 0x54, 0x88, 0xC2, 
   0xB0, 0x7C, 0xDE, 0xCB, 0x2A, 0x12, 0x40, 0x00, 0x00, 0x00, 0x70, 0xA1, 0xED, 0xC0, 0xFF, 0xCD, 
   0x2A, 0x58, 0x6B, 0x00, 0x00, 0x51, 0x24, 0x43, 0x00, 0x4C, 0x96, 0x50, 0xA6, 0xA8, 0xFF, 0x95, 
   0xE1, 0xFF, 0x64, 0x86, 0x5D, 0x27, 0x00, 0x00, 0x03, 0x0D, 0x0B, 0x22, 0x6B, 0x8A, 0x7B, 0x8C, 
   0xFF, 0x89, 0x98, 0xE0, 0x61, 0x63, 0x70, 0x15, 0x3B, 0x82, 0x3E, 0x53, 0x8A, 0x73, 0x83, 0x40, 
   0x9B, 0xC1, 0x86, 0x75, 0x84, 0xDC, 0x0F, 0x1F, 0x9C, 0x00, 0x0C, 0x43, 0x33, 0x53, 0x54, 0xA4, 
   0xB1, 0xA4, 0xAA, 0xB7, 0x9E, 0x51, 0x64, 0x5A, 0x00, 0x06, 0x83, 0x00, 0x00, 0xB1, 0x73, 0xB0, 
   0x8E, 0x9E, 0xBF, 0x5F, 0x34, 0x38, 0x75, 0x14, 0x4F, 0x8C, 0xC1, 0xAB, 0x81, 0xB5, 0x8F, 0x8C, 
   0x3E, 0x64, 0x75, 0x00, 0x3B, 0x80, 0x2A, 0x3C, 0x7A, 0xB5, 0xBA, 0x7A, 0x6C, 0x80, 0x80, 0x15, 
   0x28, 0x75, 0x6E, 0x49, 0x86, 0x31, 0x68, 0x81, 0x2D, 0x76, 0x81, 0xAB, 0x93, 0x81, 0x78, 0x7C, 
   0x81, 0x10, 0x59, 0x76, 0x3D, 0x6A, 0x8D, 0x5B, 0x5F, 0xA3, 0x6F, 0x6B, 0x5E, 0x7B, 0x7C, 0x63, 
   0x42, 0x71, 0x91, 0x3C, 0x6C, 0x86, 0x6B, 0x6C, 0x86, 0x88, 0x77, 0x81, 0x8A, 0x7B, 0x81, 0x1B, 
   0x5E, 0x8C, 0x00, 0x31, 0x80, 0x65, 0x82, 0x69, 0x84, 0xA5, 0x80, 0x4D, 0x4A, 0x81, 0x4E, 0x6C, 
   0x9D, 0xA2, 0x83, 0x6A, 0x51, 0x87, 0x64, 0x59, 0x8A, 0xA3, 0x4A, 0x3C, 0xA7, 0x2C, 0x23, 0x50, 
   0x47, 0x6D, 0x49, 0x32, 0x47, 0x73, 0x26, 0x4B, 0x8C, 0xB2, 0xBB, 0x99, 0xBD, 0xC6, 0x8E, 0x1F, 
   0x50, 0x87, 0x26, 0x23, 0x86, 0x47, 0x60, 0x58, 0x32, 0x29, 0x81, 0x68, 0x80, 0xA4, 0x84, 0xA9, 
   0x87, 0x3E, 0x63, 0x81, 0x0B, 0x12, 0x6A, 0x5D, 0x4C, 0x6B, 0xB9, 0x81, 0x9F, 0x4B, 0x8D, 0x9A, 
   0x16, 0x59, 0x71, 0x59, 0x3B, 0x87, 0x31, 0x4E, 0x5F, 0x21, 0x3D, 0x43, 0x50, 0x77, 0xA0, 0x74, 
   0x95, 0x9D, 0x2C, 0x46, 0x6B, 0x78, 0x4C, 0x99, 0x9A, 0x86, 0x9A, 0x32, 0x8D, 0x84, 0x1A, 0x53, 
   0xA6, 0x64, 0x62, 0x67, 0x66, 0x46, 0x51, 0x6C, 0x69, 0xB9, 0x6A, 0xAD, 0xF1, 0x34, 0x67, 0x70, 
   0x22, 0x26, 0x00, 0x4F, 0x4F, 0x9F, 0x66, 0x7F, 0xFF, 0x4F, 0x9C, 0x89, 0x59, 0xA5, 0x30, 0x3B, 
   0x36, 0x79, 0x09, 0x00, 0x91, 0x50, 0x5A, 0x71, 0xC3, 0xA8, 0xB0, 0x6B, 0xBA, 0xAF, 0x00, 0x82, 
   0x59, 0x16, 0x00, 0x69, 0x4C, 0x00, 0x9D, 0x76, 0xE4, 0x71, 0x6C, 0xCE, 0x99, 0x5A, 0x20, 0xDC, 
   0x4C, 0x5F, 0x72, 0x33, 0x35, 0x04, 0x16, 0x04, 0x71, 0x51, 0x95, 0xBA, 0x9D, 0xB4, 0xC3, 0x52, 
   0x4D, 0xA5, 0x00, 0x03, 0x2E, 0x56, 0x83, 0x69, 0xF2, 0xDA, 0xFF, 0x4A, 0x44, 0xA8, 0x00, 0x45, 
   0x39, 0x32, 0x64, 0x7B, 0x4A, 0x09, 0x66, 0x57, 0x40, 0xA1, 0x42, 0xC1, 0xB3, 0x4F, 0xA5, 0x7A, 
   0x9E, 0x64, 0x9A, 0x4C, 0x33, 0x8D, 0x00, 0x00, 0x2E, 0x33, 0x50, 0x86, 0xF9, 0xF4, 0xE4, 0xCA, 
   0xB0, 0xC2, 0x00, 0x29, 0x8D, 0x00, 0x22, 0x48, 0x5A, 0x5D, 0x4B, 0x98, 0x88, 0xF3, 0x8E, 0x9B, 
   0xE8, 0x4D, 0x9E, 0x41, 0x0E, 0x30, 0x61, 0x42, 0x13, 0xAC, 0xAA, 0x9D, 0x81, 0x7C, 0xDC, 0xD5, 
   0x35, 0x1E, 0xA9, 0x06, 0x00, 0x0E, 0x2A, 0xC0, 0x91, 0x83, 0xC2, 0xD3, 0x90, 0x55, 0x7F, 0x66, 
   0x68, 0x8A, 0x30, 0x3E, 0x95, 0x1D, 0x29, 0x9A, 0x25, 0x9D, 0x98, 0x93, 0xB5, 0x7F, 0x7D, 0x59, 
   0x88, 0x58, 0x89, 0x54, 0x43, 0x5D, 0x77, 0x13, 0x16, 0xAB, 0x35, 0x65, 0x9F, 0x85, 0x93, 0x91, 
   0x5C, 0x76, 0x7C, 0x43, 0x73, 0x8A, 0x4C, 0x48, 0x96, 0x28, 0x3B, 0x1C, 0x23, 0x51, 0x2D, 0x47, 
   0x5D, 0xBF, 0x55, 0x64, 0x8F, 0x57, 0x4E, 0x7A, 0x68, 0x75, 0xAD, 0x45, 0x47, 0x77, 0x39, 0x4D, 
   0x69, 0x71, 0x7A, 0x67, 0x75, 0x62, 0x6C, 0x1C, 0x38, 0x56, 0x04, 0x54, 0x95, 0x33, 0x43, 0x9B, 
   0x85, 0x71, 0x5B, 0x6E, 0x60, 0x4A, 0x0D, 0x37, 0x8F, 0x3F, 0x43, 0x9B, 0x68, 0x6D, 0x4C, 0x30, 
   0x6E, 0x74, 0x41, 0x6D, 0xAD, 0x58, 0x33, 0x46, 0x3C, 0x3E, 0x2B, 0x31, 0x71, 0xCC, 0x64, 0x66, 
   0xBA, 0x64, 0x44, 0x45, 0x31, 0x3F, 0x2C, 0x26, 0x5C, 0x2F, 0x6B, 0x7A, 0xC8, 0x65, 0x58, 0xF2, 
   0x27, 0x4C, 0x34, 0x54, 0x4C, 0x6A, 0x64, 0x63, 0xAD, 0x0F, 0x79, 0x4D, 0x41, 0x3F, 0x64, 0x48, 
   0x1D, 0x93, 0x1D, 0x63, 0x5D, 0x90, 0xA2, 0xB3, 0x9F, 0x63, 0xCE, 0x00, 0x12, 0x26, 0x00, 0x35, 
   0x04, 0x78, 0x87, 0xA7, 0xA7, 0xA9, 0xFF, 0x34, 0x2A, 0x9B, 0x26, 0x22, 0x30, 0x3C, 0x67, 0x40, 
   0x42, 0x7A, 0x5F, 0x49, 0x52, 0xDF, 0x65, 0x5D, 0xDE, 0x2C, 0x46, 0x00, 0x37, 0x5C, 0x3D, 0x6F, 
   0x50, 0xFF, 0x51, 0x3F, 0xA8, 0x00, 0x56, 0x00, 0x2F, 0x57, 0x1B, 0x6B, 0x5D, 0x9D, 0x78, 0x53, 
   0xC9, 0x3F, 0x5A, 0xA2, 0x3E, 0x7C, 0x51, 0x6A, 0x74, 0x77, 0x46, 0x2D, 0xD0, 0x17, 0x15, 0x4C, 
   0x0D, 0x44, 0x23, 0x86, 0x85, 0xB3, 0x92, 0x7F, 0xB4, 0x1A, 0x40, 0x4E, 0x13, 0x39, 0x5A, 0x48, 
   0x45, 0x89, 0x71, 0x7A, 0x84, 0x66, 0x5E, 0xA1, 0x3E, 0x64, 0x83, 0x3D, 0x4C, 0x6B, 0x3D, 0x29, 
   0x92, 0x5F, 0x4C, 0x9C, 0x37, 0x7B, 0x19, 0x27, 0x70, 0x6A, 0x82, 0x58, 0xEE, 0x6A, 0x4B, 0x70, 
   0x00, 0x29, 0x09, 0x10, 0x31, 0x3A, 0x96, 0xA1, 0xFF, 0x9E, 0xBD, 0xD8, 0x2B, 0x2C, 0x09, 0x1E, 
   0x00, 0x4D, 0x2B, 0x31, 0xBD, 0x72, 0x98, 0xB9, 0xA5, 0xB2, 0xB2, 0x38, 0x57, 0x54, 0x14, 0x5A, 
   0x57, 0x63, 0x96, 0xAC, 0x6E, 0x48, 0x7E, 0x4B, 0x00, 0x5B, 0x07, 0x1F, 0x40, 0x4D, 0xAA, 0xAF, 
   0xA3, 0xEA, 0xC1, 0x47, 0x7F, 0x5A, 0x00, 0x00, 0x2D, 0x52, 0x1C, 0x44, 0xFF, 0xFF, 0xEF, 0x47, 
   0xB6, 0xFF, 0x00, 0x00, 0x7E, 0x7E, 0x43, 0x00, 0x8C, 0x7D, 0x4D, 0x37, 0x73, 0xD4, 0x64, 0x73, 
   0xC0, 0x6F, 0x3F, 0x7C, 0x15, 0x57, 0xB9, 0x2E, 0x70, 0x7E, 0xA9, 0x8E, 0x4A, 0xBA, 0x8E, 0xA5, 
   0x77, 0x81, 0xD1, 0x15, 0x82, 0x88, 0x00, 0x2E, 0x4A, 0x45, 0x15, 0x27, 0x54, 0x34, 0x7A, 0x37, 
   0x5C, 0xBD, 0xB2, 0xF3, 0x97, 0xC7, 0xC8, 0xA8, 0x22, 0x00, 0xA0, 0x00, 0x00, 0x6B, 0x17, 0x93, 
   0x58, 0xD3, 0x98, 0x80, 0xAD, 0x7D, 0x8C, 0x13, 0x61, 0x81, 0x23, 0x77, 0x81, 0xAB, 0x70, 0x81, 
   0x61, 0x3D, 0x8C, 0x3D, 0x76, 0x75, 0x37, 0x98, 0x75, 0x2E, 0x58, 0x91, 0xC8, 0x5C, 0x75, 0x9C, 
   0x76, 0x75, 0x00, 0x10, 0x86, 0x14, 0x5D, 0x81, 0xFF, 0xBB, 0x81, 0x8A, 0x7D, 0x81, 0x00, 0x38, 
   0x81, 0x2C, 0x6B, 0x81, 0xA7, 0x87, 0x76, 0x80, 0x5F, 0x8D, 0x46, 0x4D, 0x9D, 0x2F, 0x5F, 0x6A, 
   0x69, 0x82, 0x6F, 0x6A, 0x6C, 0x8C, 0x4F, 0x6C, 0x81, 0x5B, 0x6C, 0x8C, 0x98, 0x77, 0x80, 0x72, 
   0x7B, 0x5E, 0x0E, 0x47, 0x8C, 0x00, 0x3C, 0xAE, 0x60, 0x87, 0x63, 0x91, 0x93, 0x52, 0x49, 0x39, 
   0x86, 0x72, 0x72, 0x99, 0xE0, 0xD1, 0xA9, 0x29, 0x5B, 0x6E, 0x00, 0x00, 0x51, 0x1F, 0x4B, 0x84, 
   0x6D, 0x65, 0xA7, 0x8D, 0x8F, 0x6F, 0x7B, 0x90, 0x54, 0x00, 0x52, 0xB0, 0x4E, 0x57, 0xB0, 0xD1, 
   0xB7, 0x5F, 0x25, 0x5F, 0x58, 0x1C, 0x2A, 0x81, 0x5F, 0x78, 0xA4, 0x3E, 0x2F, 0x82, 0x34, 0x4E, 
   0x6B, 0x74, 0xC6, 0x87, 0x79, 0x8C, 0x8D, 0x55, 0x2E, 0x76, 0x0A, 0x1C, 0x65, 0x43, 0x5C, 0x99, 
   0x72, 0x98, 0x9E, 0x51, 0x7E, 0x5A, 0x57, 0x74, 0x89, 0x57, 0x7F, 0x94, 0x4C, 0x5C, 0x4B, 0x5E, 
   0x6C, 0x58, 0x69, 0x72, 0x9F, 0x30, 0x3F, 0xAC, 0x31, 0x4C, 0x95, 0x7C, 0xB4, 0x77, 0x78, 0x7B, 
   0x77, 0x2E, 0x31, 0x6D, 0x62, 0x75, 0xB9, 0x7E, 0xA2, 0xAE, 0x77, 0x46, 0x74, 0x30, 0x3A, 0x6D, 
   0x4F, 0xA0, 0xA6, 0x58, 0x88, 0xB1, 0x13, 0x0F, 0x7D, 0x09, 0x38, 0x76, 0x8E, 0xB1, 0x98, 0xB7, 
   0xAC, 0x87, 0x10, 0x3D, 0x65, 0x15, 0x0A, 0x8D, 0x76, 0x8E, 0xA5, 0x98, 0xBC, 0xAA, 0x46, 0x5F, 
   0x85, 0x00, 0x00, 0x2E, 0x2A, 0x3E, 0x42, 0x8E, 0xC6, 0xEA, 0x9B, 0xE2, 0xD4, 0x4F, 0x75, 0x81, 
   0x34, 0x00, 0x5A, 0x1B, 0x10, 0x52, 0x27, 0x5E, 0x4D, 0x57, 0x91, 0x7A, 0x75, 0xAF, 0xC8, 0x59, 
   0x75, 0xCF, 0x15, 0x2A, 0x6C, 0x39, 0x26, 0x39, 0xAD, 0xAD, 0x91, 0xBC, 0xF6, 0xFA, 0x00, 0x37, 
   0xB4, 0x00, 0x00, 0x4A, 0x93, 0x82, 0x80, 0x50, 0x83, 0x7B, 0x07, 0x44, 0x61, 0x58, 0x23, 0xB3, 
   0x5B, 0x5A, 0xBF, 0x68, 0xC2, 0x7A, 0x6D, 0x8D, 0x8F, 0x55, 0x03, 0x5C, 0x38, 0x2C, 0x74, 0x53, 
   0xC2, 0xBF, 0x5E, 0x6E, 0x9E, 0x04, 0x26, 0x5B, 0x34, 0x8E, 0x96, 0xB3, 0xC7, 0xD0, 0x6F, 0x69, 
   0x91, 0x00, 0x00, 0x78, 0x3C, 0x4D, 0x61, 0x88, 0xF6, 0x6A, 0x79, 0xA6, 0xFB, 0x87, 0x25, 0xED, 
   0x33, 0x27, 0x53, 0x00, 0x4A, 0x21, 0x00, 0x54, 0x1D, 0xAD, 0xA7, 0xA1, 0xFF, 0xDF, 0xFF, 0x64, 
   0x73, 0xF8, 0x00, 0x00, 0x12, 0x00, 0x19, 0x00, 0x80, 0x90, 0x9B, 0x87, 0x91, 0xFF, 0xC2, 0xBA, 
   0x94, 0x96, 0xB7, 0x3C, 0x18, 0x77, 0x8A, 0x1C, 0x3B, 0xD7, 0x4A, 0x07, 0x9E, 0x00, 0x00, 0x11, 
   0x14, 0x6D, 0x2E, 0x9B, 0xEE, 0xC5, 0xA7, 0x98, 0xED, 0x3D, 0x2D, 0xA4, 0x00, 0x1E, 0x11, 0x01, 
   0x3A, 0x00, 0x81, 0x59, 0xC4, 0x6D, 0x98, 0xC3, 0x2A, 0x5A, 0x53, 0x63, 0x42, 0xB8, 0x84, 0x5D, 
   0xB6, 0x32, 0x57, 0x41, 0x24, 0x56, 0x4F, 0x4A, 0x55, 0x93, 0x3A, 0x43, 0x62, 0x35, 0x43, 0x7F, 
   0x85, 0x71, 0xBE, 0x40, 0x60, 0x67, 0x2E, 0x37, 0x4A, 0x44, 0x49, 0x8E, 0x4F, 0x6C, 0xA4, 0x11, 
   0x61, 0x1C, 0x14, 0x1E, 0x25, 0x9A, 0x85, 0xF1, 0x94, 0xA6, 0xFF, 0x31, 0x20, 0x60, 0x00, 0x00, 
   0x4A, 0x34, 0x4E, 0x4D, 0x58, 0x8A, 0x2D, 0x49, 0x64, 0x8C, 0x4F, 0x4D, 0xB3, 0x4A, 0x58, 0xC0, 
   0x6B, 0x63, 0xB7, 0x36, 0x51, 0x1F, 0x14, 0x4C, 0x29, 0x76, 0x5D, 0xA8, 0x65, 0x6E, 0xA4, 0x37, 
   0x5B, 0x60, 0x32, 0x28, 0x77, 0x55, 0x40, 0x9A, 0x6C, 0xA7, 0xBB, 0x33, 0x41, 0x32, 0x22, 0x0E, 
   0x3A, 0x62, 0x9E, 0xE7, 0x79, 0x9F, 0xC5, 0x66, 0x4D, 0x60, 0x31, 0x1D, 0x40, 0x08, 0x4A, 0x2F, 
   0x5F, 0x5C, 0x93, 0x6B, 0x63, 0xD9, 0x2C, 0x52, 0x67, 0x43, 0x68, 0x5F, 0x87, 0x45, 0x92, 0x58, 
   0x5B, 0x7B, 0x01, 0x56, 0x7A, 0x28, 0x45, 0x5D, 0x41, 0x57, 0x65, 0x65, 0x5D, 0xAB, 0x4F, 0x5E, 
   0xA5, 0x3E, 0x43, 0x60, 0x4E, 0x7C, 0x7C, 0x5E, 0x8B, 0x9D, 0x2F, 0x2E, 0x58, 0x02, 0x28, 0x47, 
   0x7A, 0x88, 0xA3, 0x75, 0x55, 0xB4, 0x2F, 0x27, 0x62, 0x17, 0x55, 0x44, 0x24, 0x57, 0x4D, 0x70, 
   0x6F, 0xBC, 0x6C, 0x64, 0xAD, 0x28, 0x47, 0x62, 0x4F, 0x64, 0x67, 0x7C, 0x6F, 0xA4, 0x3D, 0x57, 
   0x97, 0x0F, 0x29, 0x30, 0x64, 0x57, 0x86, 0x6A, 0x85, 0xBF, 0x14, 0x51, 0x3C, 0x42, 0x13, 0x5A, 
   0x77, 0x4E, 0xE4, 0x3F, 0x9A, 0x78, 0x29, 0x84, 0x19, 0x63, 0x4A, 0xB4, 0x6F, 0x86, 0xD7, 0x36, 
   0x2E, 0x4E, 0x20, 0x00, 0x3E, 0x5B, 0x54, 0xB2, 0x8A, 0xE8, 0xCA, 0x82, 0xF8, 0xBB, 0x13, 0x13, 
   0x39, 0x0B, 0x00, 0x04, 0x56, 0x69, 0xC1, 0x94, 0xAF, 0xC2, 0x28, 0x00, 0x2E, 0x00, 0x00, 0x29, 
   0x81, 0xD8, 0xA5, 0x6E, 0xCA, 0xAA, 0x7A, 0x57, 0xBD, 0x89, 0x44, 0xC2, 0x0F, 0x5A, 0x48, 0x2B, 
   0x4F, 0x42, 0x4F, 0x61, 0x99, 0x1B, 0x6F, 0xB3, 0xB2, 0x98, 0xDC, 0xC8, 0x74, 0x7F, 0x14, 0x49, 
   0x27, 0x00, 0x0B, 0x8D, 0x54, 0x5E, 0x9A, 0x97, 0xC7, 0x63, 0x88, 0x93, 0xC6, 0xA0, 0x69, 0xF8, 
   0x3A, 0x49, 0xB9, 0x00, 0x42, 0x28, 0x51, 0x85, 0x08, 0x69, 0x62, 0x75, 0x38, 0x1E, 0xA2, 0x56, 
   0x80, 0x6E, 0x54, 0x73, 0xC0, 0x7D, 0x7A, 0xC5, 0x9E, 0xC3, 0x84, 0x30, 0x54, 0x4D, 0x18, 0x00, 
   0x74, 0x26, 0x51, 0x85, 0xA0, 0xCC, 0x8C, 0xC2, 0xA5, 0x81, 0x14, 0x2B, 0x81, 0x00, 0x3C, 0x81, 
   0x87, 0x87, 0x81, 0x9C, 0x9F, 0x86, 0x52, 0x8D, 0x86, 0x61, 0x46, 0x81, 0x59, 0x3E, 0x86, 0x31, 
   0x55, 0x81, 0x42, 0x73, 0x7B, 0x77, 0x63, 0x81, 0x88, 0x5F, 0x81, 0x38, 0x77, 0x81, 0x1C, 0x83, 
   0x81, 0x62, 0x66, 0x81, 0x7B, 0x77, 0x81, 0x86, 0x6B, 0x76, 0x35, 0x6A, 0x87, 0x23, 0x53, 0xA9, 
   0x74, 0x5F, 0x76, 0x6A, 0x82, 0x6A, 0x54, 0x6C, 0x97, 0x5A, 0x6C, 0x80, 0x5F, 0x6C, 0x69, 0x7A, 
   0x77, 0x80, 0x77, 0x81, 0x8C, 0x36, 0x47, 0x86, 0x04, 0x3C, 0x97, 0x5C, 0x65, 0x63, 0x9E, 0xB1, 
   0x5F, 0x8C, 0x99, 0xC6, 0x44, 0x46, 0xBF, 0x2F, 0x48, 0x3B, 0x3D, 0x64, 0x4B, 0x0C, 0x3D, 0x97, 
   0x70, 0x73, 0x93, 0xAB, 0xA2, 0x9A, 0x60, 0x84, 0x8E, 0x24, 0x32, 0x6B, 0x0D, 0x26, 0x86, 0x54, 
   0x6C, 0x81, 0xC7, 0xAC, 0x6B, 0x59, 0x7D, 0xA4, 0x11, 0x2B, 0x82, 0x3D, 0x5C, 0x6B, 0x34, 0x52, 
   0x82, 0x6F, 0x6B, 0x8E, 0xAD, 0xCC, 0x8E, 0x3D, 0x6E, 0x82, 0x00, 0x04, 0x81, 0x36, 0x15, 0x6A, 
   0x7E, 0x70, 0x76, 0x6F, 0xDF, 0x99, 0x61, 0x82, 0x92, 0x6C, 0x9D, 0x9D, 0x54, 0x4B, 0x64, 0x47, 
   0x2D, 0x70, 0x61, 0x66, 0xBB, 0x22, 0x89, 0x95, 0x12, 0x51, 0x8E, 0x60, 0x4C, 0x76, 0x96, 0x7B, 
   0x5B, 0x64, 0x8E, 0xB2, 0x4C, 0x8D, 0xCA, 0x56, 0x52, 0x6E, 0x4F, 0x34, 0x30, 0x8C, 0x7F, 0x9E, 
   0x5B, 0xA1, 0xFF, 0x08, 0x5B, 0x7E, 0x29, 0x52, 0x00, 0x52, 0x2A, 0x75, 0x50, 0x32, 0xDE, 0x63, 
   0xC4, 0x84, 0xAC, 0xA8, 0x89, 0x42, 0x6C, 0x82, 0x00, 0x2F, 0x9E, 0x35, 0x17, 0x80, 0x98, 0x48, 
   0x7F, 0x66, 0xBE, 0x6F, 0x21, 0xA4, 0x76, 0x38, 0x37, 0xC7, 0x82, 0x79, 0xBB, 0x70, 0xB4, 0x64, 
   0x1E, 0x32, 0x6D, 0x28, 0x00, 0x9E, 0x61, 0x6F, 0x49, 0x4B, 0x78, 0x5B, 0x24, 0x41, 0x9D, 0x3D, 
   0x80, 0x95, 0xBB, 0x7B, 0xC8, 0x4E, 0x42, 0x72, 0x00, 0x43, 0x18, 0x48, 0x89, 0xB4, 0xC6, 0xA5, 
   0xF5, 0x4D, 0x4F, 0xAE, 0x00, 0x68, 0x53, 0x5A, 0x81, 0x13, 0x61, 0x00, 0x8C, 0x13, 0x05, 0xBD, 
   0x1C, 0xA4, 0x87, 0x82, 0xA9, 0xB0, 0xF4, 0xAE, 0xC5, 0x6B, 0x80, 0x77, 0x00, 0x00, 0x42, 0x00, 
   0x00, 0x4F, 0x88, 0xA7, 0x8D, 0xF3, 0xDA, 0xD6, 0x6F, 0x90, 0xFD, 0x00, 0x63, 0x40, 0x2E, 0x10, 
   0x4F, 0x7A, 0x0C, 0xB6, 0x71, 0x99, 0x64, 0x61, 0xE0, 0xC6, 0x6B, 0x78, 0xE8, 0x41, 0x14, 0x68, 
   0x24, 0x5D, 0x5F, 0x47, 0x90, 0x8B, 0x65, 0x2B, 0x3D, 0x8E, 0x76, 0x90, 0x64, 0xD0, 0xFF, 0x45, 
   0x4B, 0xD4, 0x26, 0x4E, 0x4B, 0x16, 0x4D, 0x2B, 0x31, 0x00, 0x66, 0x80, 0x9B, 0xA5, 0x95, 0xDD, 
   0xED, 0x8D, 0x92, 0xC4, 0x9D, 0xA6, 0xB3, 0x4F, 0x62, 0x78, 0x00, 0x00, 0x32, 0x00, 0x00, 0x2F, 
   0x4A, 0x69, 0x70, 0x72, 0x8C, 0x9C, 0x8B, 0xB0, 0xC1, 0x73, 0x80, 0xD1, 0x32, 0x16, 0x6B, 0x24, 
   0x30, 0x28, 0x19, 0x6F, 0x11, 0x54, 0x53, 0x97, 0x62, 0x65, 0xC8, 0x68, 0x70, 0x69, 0x61, 0x5D, 
   0x95, 0x3C, 0x34, 0x9E, 0x0D, 0x4A, 0x51, 0x30, 0x5B, 0x44, 0x81, 0x5B, 0x78, 0x7A, 0x55, 0x6E, 
   0x0D, 0x43, 0x91, 0x2E, 0x49, 0xAC, 0x7D, 0x65, 0x6C, 0x43, 0x65, 0x4D, 0x00, 0x37, 0x5E, 0x45, 
   0x16, 0x4F, 0x70, 0x73, 0x71, 0x4B, 0x91, 0xBF, 0x78, 0x62, 0xFF, 0x5F, 0x3D, 0x70, 0x12, 0x1A, 
   0x00, 0x06, 0x3E, 0x43, 0x5E, 0x85, 0xBF, 0x77, 0x7B, 0x9A, 0x3F, 0x47, 0x6D, 0x55, 0x58, 0x8A, 
   0x59, 0x5D, 0xA5, 0x1A, 0x4C, 0x7B, 0x31, 0x4C, 0x24, 0x65, 0x5D, 0x80, 0x4F, 0x7A, 0xBB, 0x3E, 
   0x62, 0x72, 0x6F, 0x3E, 0x8C, 0x0E, 0x2C, 0x68, 0x00, 0x1E, 0x00, 0xA1, 0xA3, 0xB8, 0xB9, 0x9E, 
   0xFF, 0x23, 0x00, 0x52, 0x00, 0x47, 0x43, 0x64, 0x92, 0x86, 0x54, 0x74, 0x5F, 0x3D, 0x12, 0xA4, 
   0x5F, 0x4A, 0xA3, 0x3D, 0x5C, 0x1A, 0x2C, 0x7A, 0x5A, 0x70, 0x63, 0xDD, 0x48, 0x50, 0x9D, 0x2A, 
   0x39, 0x0C, 0x2A, 0x62, 0x30, 0x5F, 0x6E, 0xCF, 0x65, 0x4C, 0xED, 0x2C, 0x46, 0x6D, 0x3D, 0x64, 
   0x30, 0x59, 0x80, 0x6E, 0x6F, 0x58, 0xAC, 0x0E, 0x1F, 0x57, 0x14, 0x69, 0x14, 0x8D, 0x96, 0xC1, 
   0x7B, 0x44, 0xEF, 0x1D, 0x2A, 0x52, 0x00, 0x30, 0x21, 0x39, 0x38, 0x55, 0x69, 0x7F, 0x96, 0x54, 
   0x75, 0x77, 0x27, 0x42, 0x95, 0x5A, 0x52, 0x8A, 0x55, 0x4D, 0x89, 0x3E, 0x64, 0x87, 0x49, 0x6F, 
   0x3C, 0x3D, 0x62, 0x6A, 0x4D, 0x33, 0xC5, 0x4C, 0x33, 0x4D, 0x19, 0x51, 0x19, 0x1B, 0x4F, 0x88, 
   0x9B, 0x8A, 0xCF, 0x90, 0x95, 0xB1, 0x0B, 0x38, 0x22, 0x00, 0x36, 0x29, 0x6E, 0x4D, 0xE2, 0x71, 
   0x5F, 0xB6, 0x60, 0x4B, 0x3E, 0x38, 0x43, 0x49, 0x38, 0xA6, 0xBB, 0x7C, 0xAA, 0xB4, 0x74, 0x5C, 
   0x68, 0x1D, 0x00, 0x5F, 0x32, 0x20, 0x43, 0x1C, 0x7F, 0x89, 0x78, 0xA8, 0xC8, 0x57, 0x48, 0x35, 
   0x00, 0x00, 0x12, 0x9D, 0xAF, 0xE5, 0xFF, 0xFF, 0xFF, 0x15, 0x8F, 0xC2, 0x00, 0x00, 0x26, 0x1D, 
   0x00, 0x00, 0x8F, 0xB7, 0x66, 0x7D, 0xC2, 0xFF, 0x5C, 0x94, 0xEB, 0x66, 0x69, 0x52, 0x4E, 0x18, 
   0x58, 0x0A, 0x52, 0x4C, 0x40, 0x9D, 0x4F, 0xC4, 0x86, 0xB3, 0x9A, 0x68, 0xF4, 0x00, 0x5A, 0xBD, 
   0x04, 0x36, 0x61, 0x8D, 0x41, 0x1C, 0x6C, 0x70, 0x59, 0x2D, 0x8D, 0x71, 0x4E, 0x86, 0x6E, 0x4E, 
   0x23, 0xAA, 0x2D, 0x08, 0xA1, 0x1A, 0x5C, 0x85, 0x85, 0xDD, 0x78, 0xE1, 0xA9, 0x76, 0x4A, 0x18, 
   0x7A, 0x00, 0x27, 0x69, 0x1E, 0x8F, 0x80, 0xA8, 0x9C, 0x8C, 0x74, 0x5E, 0x81, 0x00, 0x48, 0x81, 
   0x1B, 0x87, 0x81, 0x97, 0x87, 0x81, 0xDC, 0x4D, 0x81, 0x55, 0x68, 0x81, 0x00, 0x51, 0x7B, 0x05, 
   0x4C, 0x8D, 0xFF, 0xA8, 0x87, 0x8E, 0x91, 0x76, 0x00, 0x1F, 0x81, 0x36, 0x5F, 0x81, 0xC9, 0xA5, 
   0x81, 0x6A, 0x78, 0x81, 0x3B, 0x4F, 0x81, 0x35, 0x7C, 0x81, 0x68, 0x6B, 0x76, 0x63, 0x6A, 0x82, 
   0x3B, 0x53, 0xA4, 0x42, 0x5F, 0x81, 0x8C, 0x7C, 0x69, 0x53, 0x6C, 0x74, 0x58, 0x6C, 0x80, 0x51, 
   0x6C, 0x97, 0x5C, 0x77, 0x80, 0x72, 0x7B, 0x63, 0x38, 0x4D, 0x86, 0x28, 0x42, 0x87, 0x9A, 0xBF, 
   0xA8, 0x7C, 0x7F, 0x62, 0x00, 0x10, 0x46, 0x53, 0x38, 0xA2, 0x8D, 0x8F, 0x98, 0x6C, 0x80, 0x60, 
   0x5B, 0x80, 0x78, 0x4A, 0x68, 0xAC, 0x49, 0x55, 0xAB, 0x7A, 0x65, 0x64, 0x24, 0x59, 0x25, 0x03, 
   0x2D, 0x92, 0x8E, 0x8A, 0xC1, 0xD3, 0xAD, 0x6C, 0x26, 0x67, 0x6B, 0x00, 0x3C, 0x82, 0x8A, 0x68, 
   0x88, 0x7F, 0x46, 0x83, 0x2E, 0x52, 0x8E, 0x43, 0xA1, 0x99, 0x69, 0x72, 0x7B, 0x15, 0x0B, 0x5E, 
   0x23, 0x3B, 0x59, 0xCF, 0xD7, 0xD7, 0x63, 0x70, 0x7D, 0x6E, 0x76, 0x6C, 0x6C, 0x8B, 0xC7, 0x4C, 
   0x45, 0x9F, 0x11, 0x3E, 0x4F, 0x33, 0x6C, 0x98, 0x5D, 0x89, 0x88, 0x2C, 0x2F, 0x60, 0x68, 0x4D, 
   0x94, 0xB9, 0xD7, 0xB1, 0x5D, 0x6B, 0x84, 0x22, 0x25, 0x5E, 0x4E, 0x7F, 0x99, 0x80, 0x9B, 0xF5, 
   0x45, 0x34, 0x92, 0x26, 0x66, 0x5C, 0x3C, 0x81, 0x7C, 0x59, 0x47, 0x6B, 0x32, 0x2B, 0x6D, 0x5C, 
   0x45, 0xC4, 0x95, 0xE7, 0xAD, 0x6A, 0xE5, 0x88, 0x1D, 0x01, 0x63, 0x00, 0x00, 0x62, 0x66, 0x65, 
   0x59, 0xD0, 0xE9, 0xC7, 0x79, 0xBD, 0xDD, 0x15, 0x69, 0x3B, 0x18, 0x15, 0x4B, 0x4C, 0x36, 0xA7, 
   0x64, 0xAD, 0xA2, 0x5E, 0x7F, 0x7B, 0x46, 0x28, 0xA7, 0x29, 0x42, 0x7D, 0x2A, 0x43, 0x22, 0x65, 
   0x5D, 0x91, 0x88, 0x98, 0xB1, 0x63, 0x9D, 0xA7, 0x00, 0x23, 0x95, 0x01, 0x00, 0x29, 0xAA, 0x8F, 
   0xB3, 0xB6, 0xFF, 0xFF, 0x14, 0x65, 0x5D, 0x06, 0x00, 0x65, 0x61, 0x31, 0x7B, 0x2B, 0x72, 0x44, 
   0x51, 0x60, 0xA2, 0xA8, 0x9C, 0xD7, 0x8B, 0x97, 0x98, 0x3C, 0x8D, 0x8E, 0x0B, 0x34, 0x52, 0x00, 
   0x00, 0x0A, 0x4F, 0x68, 0x8C, 0xC5, 0xFF, 0xFF, 0xA2, 0xAA, 0x6E, 0x00, 0x00, 0x77, 0x00, 0x1D, 
   0x66, 0x97, 0xD0, 0x4D, 0x88, 0xA9, 0xFE, 0x5F, 0x1B, 0xD6, 0x24, 0x4E, 0x40, 0x13, 0xBC, 0x6C, 
   0x44, 0x6D, 0x90, 0xA8, 0x4A, 0x9E, 0xBC, 0xC4, 0xF2, 0x27, 0x54, 0x9F, 0x00, 0x00, 0x13, 0x26, 
   0x94, 0x52, 0xD5, 0xD4, 0xF8, 0x5A, 0x35, 0xD4, 0x1C, 0x3B, 0x22, 0x56, 0x6B, 0x08, 0x74, 0x79, 
   0xD5, 0x7F, 0xC7, 0xFF, 0xAE, 0x99, 0xC9, 0x3A, 0x37, 0x09, 0x00, 0x2C, 0x25, 0x1A, 0x4B, 0x85, 
   0x44, 0x1D, 0x86, 0x4C, 0x30, 0x71, 0x28, 0x79, 0x79, 0x6F, 0x99, 0x8E, 0xA8, 0x8D, 0xEE, 0x4A, 
   0x56, 0xA5, 0x00, 0x25, 0x00, 0x13, 0x2F, 0x33, 0x8D, 0x74, 0xC4, 0x77, 0x80, 0xAB, 0x1B, 0x58, 
   0x51, 0x36, 0x4B, 0xA5, 0x48, 0x34, 0xAA, 0x49, 0x5C, 0x47, 0x70, 0x79, 0x79, 0x47, 0x5B, 0x84, 
   0x28, 0x3E, 0x67, 0x4F, 0x49, 0x8F, 0x43, 0x60, 0xB5, 0x26, 0x6B, 0x4D, 0x22, 0x21, 0x00, 0x47, 
   0x5B, 0x9C, 0x87, 0x9B, 0xEF, 0x4E, 0x4B, 0x72, 0x1B, 0x22, 0x4E, 0x54, 0x56, 0x9C, 0x7B, 0x84, 
   0x63, 0x1F, 0x4B, 0x53, 0x2A, 0x29, 0xB0, 0x54, 0x68, 0xBC, 0x71, 0x6F, 0x4F, 0x49, 0x4D, 0x42, 
   0x1B, 0x52, 0x65, 0x54, 0x5D, 0xAB, 0x6B, 0x5D, 0xBB, 0x21, 0x4C, 0x21, 0x5A, 0x51, 0x65, 0x87, 
   0x62, 0xE2, 0x2B, 0x61, 0x7A, 0x03, 0x28, 0x00, 0x49, 0x18, 0x65, 0x68, 0x92, 0xDB, 0x8B, 0x98, 
   0xD5, 0x78, 0x4D, 0x76, 0x00, 0x08, 0x13, 0x08, 0x64, 0x3C, 0x76, 0x9E, 0xCE, 0x87, 0x6F, 0xE5, 
   0x1B, 0x12, 0x43, 0x1B, 0x4A, 0x36, 0x92, 0x67, 0xB4, 0x48, 0x5C, 0xA9, 0x13, 0x50, 0x58, 0x31, 
   0x50, 0x41, 0x71, 0x51, 0x55, 0x6D, 0x5D, 0xC6, 0x5B, 0x5D, 0xEE, 0x49, 0x41, 0x8A, 0x31, 0x68, 
   0x24, 0x57, 0x5C, 0x82, 0x30, 0x23, 0x55, 0x20, 0x3B, 0x46, 0x88, 0x9E, 0xB5, 0x88, 0x92, 0xB0, 
   0x3C, 0x44, 0x65, 0x11, 0x03, 0x68, 0x39, 0x3C, 0x5C, 0x4B, 0x6C, 0x6E, 0x63, 0x63, 0x91, 0x4D, 
   0x5E, 0x75, 0x3D, 0x59, 0x4F, 0x65, 0x5E, 0xB6, 0x49, 0x52, 0xAA, 0x27, 0x4D, 0x26, 0x6C, 0x69, 
   0x71, 0x77, 0x7E, 0xDD, 0x2B, 0x49, 0x6B, 0x0E, 0x05, 0x3D, 0x5E, 0x3C, 0xAA, 0x4E, 0xB8, 0x94, 
   0x39, 0x96, 0x5B, 0x62, 0x32, 0x67, 0x7D, 0x46, 0xBC, 0x00, 0x3A, 0x56, 0x07, 0x15, 0x1A, 0x93, 
   0x58, 0xDE, 0xA0, 0xE4, 0xD9, 0x38, 0xA4, 0x64, 0x2A, 0x00, 0x2E, 0x2A, 0x00, 0x51, 0x74, 0x94, 
   0xDB, 0x90, 0xA6, 0xB2, 0x0B, 0x02, 0x22, 0x10, 0x41, 0x44, 0x4B, 0xAF, 0x9C, 0x54, 0x3F, 0x94, 
   0x7F, 0x2A, 0x80, 0x79, 0x77, 0x88, 0x44, 0xA7, 0xD1, 0x35, 0xA5, 0xA1, 0x28, 0x2A, 0x11, 0x00, 
   0x00, 0x50, 0x57, 0x5B, 0xB0, 0xD2, 0xED, 0xAF, 0x43, 0x7C, 0xA4, 0x00, 0x10, 0xC9, 0x73, 0x6C, 
   0x6B, 0xD1, 0xD3, 0x31, 0x70, 0x86, 0x82, 0x49, 0x27, 0xCE, 0x32, 0x52, 0xAB, 0x09, 0x58, 0x68, 
   0x38, 0x69, 0x43, 0x84, 0x5E, 0x9D, 0x80, 0x49, 0xA8, 0x51, 0xA5, 0x47, 0x48, 0x93, 0x62, 0x2F, 
   0x2A, 0x85, 0x14, 0x3A, 0x81, 0x2F, 0x5F, 0x7C, 0x5C, 0x48, 0x9F, 0xA4, 0xBD, 0x9F, 0xAE, 0xE3, 
   0x82, 0x3D, 0x3F, 0x75, 0x04, 0x00, 0x6E, 0x04, 0x3C, 0x85, 0x68, 0x96, 0x8C, 0x9D, 0xAF, 0x81, 
   0x1D, 0x5F, 0x81, 0x62, 0x4C, 0x81, 0xAB, 0x79, 0x81, 0x0B, 0x58, 0x81, 0x1D, 0x7B, 0x7B, 0xAB, 
   0x92, 0x87, 0x5B, 0x5F, 0x99, 0x42, 0x4D, 0x82, 0x41, 0x80, 0x76, 0x1C, 0x53, 0x81, 0x7A, 0x54, 
   0x81, 0xB4, 0x93, 0x81, 0x36, 0x61, 0x7B, 0x18, 0x66, 0x81, 0x7A, 0x77, 0x81, 0x7B, 0x6B, 0x76, 
   0x42, 0x6A, 0x8D, 0x58, 0x53, 0xA3, 0x58, 0x76, 0x63, 0x6E, 0x77, 0x6E, 0x45, 0x6C, 0xA2, 0x2E, 
   0x6C, 0x80, 0x46, 0x6C, 0x74, 0x7B, 0x66, 0x69, 0x7A, 0x93, 0x6B, 0x76, 0x90, 0xE2, 0x00, 0x2D, 
   0xA2, 0x00, 0x2C, 0x17, 0x7A, 0x82, 0x45, 0x61, 0x57, 0xA3, 0x4C, 0x76, 0xB6, 0xA1, 0xA4, 0x79, 
   0x5C, 0x7A, 0x73, 0x21, 0x39, 0x95, 0x5F, 0x5A, 0x94, 0x60, 0x6B, 0x77, 0x6B, 0x66, 0x65, 0x63, 
   0x71, 0x77, 0x00, 0x33, 0xAA, 0x65, 0x79, 0x88, 0xC2, 0xBE, 0x6C, 0x6C, 0x56, 0x83, 0x40, 0x47, 
   0x94, 0x43, 0x5B, 0x88, 0x15, 0x2D, 0x60, 0x5A, 0x45, 0x87, 0x6C, 0x9D, 0x8D, 0x56, 0x87, 0x70, 
   0x45, 0x63, 0x8D, 0x55, 0x34, 0x82, 0x63, 0x69, 0x8B, 0x6E, 0x63, 0x8B, 0x66, 0x6F, 0x9B, 0x42, 
   0x91, 0x83, 0x25, 0x57, 0x7C, 0x53, 0x4A, 0x4E, 0x76, 0x4A, 0x82, 0x4E, 0x8A, 0xB1, 0x3E, 0x74, 
   0x94, 0x5B, 0x41, 0x65, 0x79, 0x6A, 0x33, 0x72, 0x9D, 0xB4, 0x6A, 0x5E, 0xF5, 0x07, 0x4B, 0x8D, 
   0x40, 0x6C, 0x19, 0x8B, 0x50, 0x96, 0x68, 0x67, 0xD5, 0x22, 0x94, 0x8B, 0x4E, 0x5F, 0x62, 0x5E, 
   0x30, 0x9B, 0x25, 0x64, 0xC3, 0x5E, 0x76, 0x8D, 0x6A, 0x6B, 0x46, 0x31, 0x4F, 0x3B, 0x05, 0x50, 
   0xAA, 0x79, 0x69, 0xD9, 0xB2, 0xB3, 0xA3, 0x5A, 0x9A, 0x4A, 0x00, 0x25, 0x32, 0x0C, 0x0E, 0x8F, 
   0x8C, 0x72, 0xA3, 0x99, 0xF0, 0xAB, 0x38, 0x70, 0xA4, 0x20, 0x00, 0x85, 0x69, 0x42, 0x60, 0x6F, 
   0x6D, 0x44, 0x2F, 0x91, 0x7C, 0x23, 0x7A, 0xDB, 0x72, 0x3A, 0xB3, 0x44, 0x46, 0x88, 0x00, 0x6A, 
   0x26, 0x71, 0x94, 0x46, 0xD2, 0x77, 0xFF, 0x15, 0x32, 0xBF, 0x00, 0x70, 0x45, 0x71, 0x80, 0x5A, 
   0xC2, 0x5E, 0x94, 0x48, 0x6A, 0xA1, 0x00, 0x76, 0x96, 0x0E, 0x33, 0x7F, 0xA0, 0x8A, 0x62, 0x95, 
   0xAC, 0xB8, 0x26, 0x39, 0xAC, 0x03, 0x32, 0x46, 0x39, 0x72, 0x80, 0xB8, 0x5E, 0x9A, 0x47, 0xA9, 
   0xA9, 0x08, 0x98, 0xCC, 0x90, 0x40, 0xB3, 0x40, 0x1D, 0x5A, 0x02, 0x4D, 0x54, 0x38, 0xA7, 0x62, 
   0x9E, 0xA9, 0xA5, 0xDC, 0x95, 0xEC, 0x5F, 0x62, 0xE4, 0x00, 0x09, 0x87, 0x00, 0x3B, 0x00, 0x43, 
   0x60, 0x32, 0x6C, 0x59, 0xF2, 0xBF, 0xAB, 0xB5, 0x7F, 0xA5, 0x54, 0x00, 0x31, 0x8C, 0x47, 0x6C, 
   0x91, 0x83, 0x86, 0xB1, 0x32, 0x1E, 0xA2, 0x42, 0x57, 0x60, 0x95, 0xD3, 0x6D, 0x42, 0x7F, 0x81, 
   0x17, 0x07, 0x58, 0x0B, 0x00, 0x3A, 0x2A, 0x2B, 0x31, 0x62, 0x86, 0x8C, 0x8C, 0xDF, 0xCE, 0x80, 
   0x93, 0xD8, 0x4A, 0x28, 0xA4, 0x19, 0x2F, 0x05, 0x23, 0x3F, 0x04, 0x3A, 0x50, 0xB2, 0x47, 0x6E, 
   0xBB, 0x3E, 0x58, 0x46, 0x72, 0x58, 0x9B, 0x83, 0x63, 0xBC, 0x20, 0x5C, 0x4E, 0x24, 0x50, 0x78, 
   0x77, 0x5B, 0x76, 0x43, 0x55, 0x4D, 0x00, 0x4E, 0x54, 0x33, 0x16, 0x72, 0x85, 0x72, 0x8B, 0x64, 
   0x8F, 0xA3, 0x3C, 0x33, 0x9D, 0x40, 0x27, 0x83, 0x30, 0x50, 0x0A, 0x2C, 0x64, 0x3B, 0x78, 0x87, 
   0xD3, 0x93, 0x74, 0xC9, 0x09, 0x29, 0x3A, 0x1F, 0x2E, 0x76, 0x6F, 0x6E, 0xAE, 0x37, 0x69, 0x42, 
   0x3E, 0x64, 0x37, 0x6C, 0x47, 0xA0, 0x4A, 0x74, 0xBE, 0x49, 0x51, 0x95, 0x48, 0x4B, 0x42, 0x31, 
   0x4B, 0x6D, 0x32, 0x41, 0x4C, 0x66, 0x75, 0x6B, 0x83, 0xAD, 0xE4, 0x27, 0x0D, 0x88, 0x15, 0x2A, 
   0x30, 0x65, 0xA2, 0x8A, 0x6B, 0x64, 0x6A, 0x20, 0x14, 0x72, 0x36, 0x59, 0xC7, 0x42, 0x9E, 0x6C, 
   0x43, 0x74, 0x4F, 0x6B, 0x1D, 0xB9, 0x42, 0x3E, 0x85, 0x30, 0x6C, 0x2E, 0x25, 0x4B, 0x4D, 0x60, 
   0x51, 0xAC, 0x67, 0x5D, 0xCA, 0x4B, 0x4D, 0x75, 0x3F, 0x64, 0x46, 0x60, 0x7A, 0xA5, 0x69, 0x4B, 
   0xC4, 0x00, 0x17, 0x11, 0x0E, 0x51, 0x11, 0x99, 0x86, 0xBF, 0x83, 0x5E, 0xD8, 0x26, 0x41, 0x70, 
   0x1E, 0x62, 0x1F, 0x35, 0x56, 0x75, 0x5E, 0x44, 0xC1, 0x52, 0x5B, 0x93, 0x1E, 0x40, 0x42, 0x3B, 
   0x5D, 0x74, 0x63, 0x75, 0x96, 0x48, 0x6A, 0x74, 0x37, 0x42, 0x53, 0x49, 0x58, 0x77, 0x55, 0x73, 
   0xC7, 0x55, 0x3F, 0x55, 0x49, 0x2D, 0x39, 0x32, 0x24, 0xAC, 0x49, 0x72, 0xB8, 0x70, 0xA6, 0x7D, 
   0x2C, 0x5B, 0x2C, 0x16, 0x30, 0x6B, 0x67, 0x4C, 0xAD, 0x73, 0x3C, 0xB9, 0x2F, 0x46, 0x52, 0x36, 
   0x83, 0x3D, 0x6A, 0xC2, 0xFF, 0x8C, 0x96, 0xC5, 0x2A, 0x00, 0x00, 0x28, 0x00, 0x54, 0x34, 0x3D, 
   0x96, 0x5D, 0xAA, 0xAF, 0x7F, 0xC2, 0xAE, 0x3A, 0x43, 0x30, 0x00, 0x00, 0x27, 0x61, 0x9C, 0xD6, 
   0xFF, 0xF8, 0xFF, 0x31, 0x34, 0x78, 0x00, 0x00, 0x00, 0x4C, 0x59, 0x32, 0x94, 0xFF, 0xC6, 0x62, 
   0xA2, 0xFF, 0x4B, 0x05, 0x95, 0x3B, 0x1B, 0x26, 0x53, 0x47, 0x65, 0x3F, 0x8A, 0xAC, 0x43, 0xD0, 
   0x8C, 0xC2, 0xA6, 0xAE, 0xDA, 0x46, 0xB1, 0x01, 0x36, 0x74, 0x00, 0x2E, 0x65, 0x74, 0x51, 0x42, 
   0x94, 0x92, 0x93, 0x19, 0x66, 0xC3, 0x69, 0x82, 0x97, 0x96, 0x66, 0xB7, 0x44, 0x4F, 0x6F, 0x00, 
   0x7C, 0x4A, 0x2C, 0x65, 0x5B, 0x84, 0x43, 0x79, 0x5A, 0x3F, 0x87, 0x3B, 0x7C, 0x94, 0xAE, 0xC2, 
   0x94, 0xCD, 0xB3, 0x8D, 0x06, 0x03, 0x6E, 0x00, 0x00, 0x62, 0x2E, 0x93, 0x8B, 0x9F, 0xAD, 0x8C, 
   0xDF, 0x6E, 0x81, 0x26, 0x3F, 0x81, 0x00, 0x46, 0x81, 0x57, 0x7B, 0x81, 0xFF, 0x8E, 0x81, 0x85, 
   0x7C, 0x76, 0x00, 0x3D, 0x82, 0x03, 0x6A, 0x99, 0xCD, 0x81, 0x7C, 0x85, 0x6F, 0x76, 0x01, 0x36, 
   0x81, 0x40, 0x54, 0x76, 0x8B, 0xA5, 0x98, 0x64, 0x6D, 0x7B, 0x2B, 0x61, 0x81, 0x59, 0x77, 0x8C, 
   0x92, 0x70, 0x75, 0x58, 0x53, 0x6F, 0x34, 0x4D, 0x91, 0x4A, 0x70, 0x80, 0x50, 0x77, 0x6E, 0x4C, 
   0x6C, 0x79, 0x59, 0x61, 0x69, 0x71, 0x72, 0x81, 0xB3, 0xC6, 0xC5, 0x4D, 0x6C, 0x6E, 0x00, 0x00, 
   0x4B, 0x28, 0x30, 0x7F, 0x7B, 0x8F, 0x9C, 0x84, 0xA4, 0x59, 0x63, 0x6C, 0x72, 0x36, 0x76, 0xCA, 
   0x79, 0x79, 0xA8, 0x65, 0x3E, 0x67, 0x20, 0x54, 0x44, 0x55, 0x72, 0x9B, 0x9A, 0x78, 0xE0, 0x7B, 
   0x72, 0x72, 0x06, 0x54, 0x27, 0x00, 0x2E, 0x99, 0x9F, 0x7A, 0xAB, 0xF5, 0xD5, 0x7E, 0x19, 0x5B, 
   0x8F, 0x00, 0x3A, 0x88, 0x69, 0x5A, 0x82, 0x44, 0x12, 0x60, 0x35, 0x5F, 0x71, 0xB9, 0xF4, 0xA5, 
   0x89, 0x90, 0x9E, 0x00, 0x00, 0x37, 0x66, 0x56, 0xAF, 0x71, 0x4B, 0xC5, 0x2D, 0x4D, 0x63, 0x50, 
   0x8E, 0x8F, 0x79, 0x9E, 0xAB, 0x62, 0x41, 0x5B, 0x39, 0x2F, 0x78, 0x76, 0x8F, 0xEA, 0x47, 0x7E, 
   0x82, 0x00, 0x18, 0x26, 0x7B, 0x6E, 0x89, 0xA9, 0xBF, 0xEC, 0x36, 0x6F, 0x9D, 0x13, 0x3B, 0x41, 
   0x64, 0x73, 0x85, 0x7C, 0x6D, 0x92, 0x6B, 0x5D, 0x93, 0x5D, 0x74, 0xA9, 0x53, 0xB6, 0xA7, 0x34, 
   0x6D, 0x50, 0x11, 0x00, 0x76, 0x14, 0x00, 0x93, 0x8A, 0xD5, 0x77, 0xB3, 0xFF, 0xA0, 0x56, 0x53, 
   0xAB, 0x00, 0x20, 0x75, 0x43, 0x35, 0x57, 0x93, 0x5E, 0x9A, 0x4E, 0x7D, 0x88, 0x19, 0x7E, 0x2E, 
   0x30, 0x56, 0x8B, 0x4F, 0x62, 0xCD, 0x73, 0xB7, 0x95, 0x83, 0x6A, 0x81, 0x53, 0x17, 0x84, 0x2E, 
   0x76, 0x3F, 0x11, 0x49, 0x63, 0x50, 0x2E, 0xAB, 0x90, 0x8B, 0xDF, 0x56, 0xCA, 0x88, 0x00, 0x34, 
   0x3C, 0x13, 0x00, 0x5B, 0x89, 0x73, 0xBA, 0x97, 0xFF, 0xD3, 0x3C, 0x82, 0x9E, 0x6C, 0x27, 0x95, 
   0x6E, 0x5B, 0x5E, 0x04, 0x27, 0x4D, 0x00, 0x23, 0x7D, 0x43, 0x61, 0x92, 0xBB, 0xB1, 0xC2, 0xDD, 
   0xFF, 0xFF, 0x38, 0x76, 0x49, 0x00, 0x00, 0x00, 0x14, 0x00, 0x77, 0xA2, 0xFD, 0x84, 0xC6, 0xCC, 
   0xFA, 0x52, 0x25, 0xFF, 0x00, 0x23, 0x2D, 0x3A, 0x84, 0x14, 0x4F, 0x59, 0xA5, 0x75, 0x3A, 0x82, 
   0xCB, 0xCF, 0xD5, 0x66, 0xCD, 0xFD, 0x00, 0x00, 0x7C, 0x1C, 0x33, 0x55, 0x77, 0xC1, 0xA6, 0x29, 
   0x02, 0x88, 0x21, 0x3E, 0x12, 0x8B, 0xDA, 0x83, 0xB4, 0xA1, 0xFF, 0x77, 0x96, 0xFA, 0x31, 0x4A, 
   0x74, 0x00, 0x00, 0x00, 0x11, 0x26, 0x41, 0x70, 0xC4, 0xFF, 0xC7, 0xAF, 0xD3, 0x86, 0x89, 0x4C, 
   0x0F, 0x5B, 0x76, 0x00, 0x01, 0x47, 0x51, 0x23, 0x53, 0x48, 0x5A, 0x95, 0x2E, 0x6F, 0x82, 0x7B, 
   0x9F, 0xB6, 0xA2, 0xAF, 0xE1, 0x54, 0x49, 0x86, 0x00, 0x0B, 0x00, 0x00, 0x1B, 0x14, 0x57, 0x56, 
   0xBE, 0x7D, 0x80, 0xB1, 0x62, 0x87, 0x6F, 0x44, 0x58, 0xB9, 0x48, 0x2E, 0xBB, 0x51, 0x50, 0x40, 
   0x2D, 0x84, 0x5E, 0x21, 0x5B, 0x52, 0x33, 0x1D, 0x33, 0x69, 0x67, 0x9E, 0x64, 0x9B, 0xFF, 0x69, 
   0x4F, 0x7B, 0x23, 0x1B, 0x37, 0x0C, 0x33, 0x35, 0x52, 0x7F, 0x54, 0x65, 0x81, 0x81, 0x3F, 0x5A, 
   0xA8, 0x50, 0x53, 0xCB, 0x77, 0x7F, 0x95, 0x3C, 0x40, 0x15, 0x00, 0x29, 0x70, 0x48, 0x6E, 0xC1, 
   0x83, 0x64, 0x77, 0x2E, 0x64, 0x45, 0x4A, 0x52, 0x80, 0x70, 0x57, 0xFF, 0x1F, 0x4B, 0x92, 0x00, 
   0x2A, 0x00, 0x6C, 0x65, 0x5E, 0x9B, 0xAA, 0xFF, 0x44, 0x59, 0x83, 0x2A, 0x34, 0x34, 0x18, 0x1D, 
   0x2B, 0x1A, 0x58, 0x13, 0x88, 0xA9, 0xFF, 0xA5, 0x59, 0xF0, 0x00, 0x14, 0x00, 0x09, 0x5E, 0x43, 
   0x9E, 0x92, 0xE3, 0x65, 0x6E, 0x92, 0x1A, 0x21, 0x39, 0x25, 0x2C, 0x17, 0x59, 0x6D, 0x82, 0x61, 
   0x6F, 0xD6, 0x50, 0x59, 0xBA, 0x3F, 0x59, 0x78, 0x55, 0x69, 0x26, 0x5F, 0x6E, 0x92, 0x1F, 0x1E, 
   0xA3, 0x25, 0x46, 0x48, 0x64, 0x8B, 0x75, 0x70, 0x7A, 0xA2, 0x3C, 0x45, 0x7A, 0x1E, 0x2E, 0x46, 
   0x31, 0x52, 0x7B, 0x77, 0xA9, 0x89, 0x77, 0x64, 0xA6, 0x2B, 0x3A, 0x9A, 0x40, 0x56, 0x71, 0x3A, 
   0x45, 0x7A, 0x3F, 0x58, 0x88, 0x30, 0x70, 0x1D, 0x59, 0x75, 0x59, 0x6B, 0x63, 0xFF, 0x32, 0x34, 
   0x68, 0x2C, 0x1D, 0x34, 0x56, 0x42, 0x9B, 0x7E, 0xB1, 0xB9, 0x44, 0xA6, 0x79, 0x15, 0x16, 0x50, 
   0x64, 0x3B, 0x8D, 0x43, 0x63, 0x60, 0x18, 0x26, 0x62, 0x80, 0x3B, 0xA8, 0x91, 0xB0, 0xB9, 0x12, 
   0xB0, 0x5C, 0x06, 0x46, 0x28, 0x79, 0x1A, 0x9B, 0x85, 0x73, 0xEB, 0x2E, 0x41, 0x51, 0x06, 0x00, 
   0x23, 0x35, 0x83, 0x91, 0x70, 0xCA, 0xC2, 0x4A, 0x5D, 0x96, 0x6D, 0x18, 0x6F, 0x8D, 0xAC, 0x96, 
   0x02, 0xA6, 0xCD, 0x2D, 0x26, 0x79, 0x4B, 0x08, 0x00, 0x0B, 0x08, 0x28, 0x86, 0x9D, 0xFF, 0xCB, 
   0xFF, 0xF9, 0x34, 0x79, 0x6D, 0x00, 0x00, 0x57, 0x31, 0x3C, 0x23, 0xC4, 0xFF, 0x4A, 0x93, 0xB3, 
   0xEE, 0x51, 0x20, 0xFF, 0x31, 0x5B, 0xB7, 0x3A, 0x75, 0x27, 0x66, 0x3B, 0x18, 0x22, 0x46, 0x7F, 
   0x50, 0x59, 0x93, 0x7E, 0x93, 0x64, 0x34, 0x76, 0xC6, 0x56, 0x26, 0xD7, 0x5D, 0x4F, 0x83, 0x52, 
   0x95, 0x56, 0x5D, 0x8F, 0x3D, 0x35, 0x4A, 0x7D, 0x47, 0x5B, 0x85, 0x4D, 0x5C, 0x93, 0x49, 0x5E, 
   0xAB, 0x6C, 0x98, 0x88, 0x82, 0xAD, 0x6F, 0x41, 0x3D, 0x68, 0x02, 0x0D, 0x68, 0x58, 0x4D, 0x8B, 
   0xA8, 0x9F, 0x8C, 0x25, 0x56, 0x81, 0x00, 0x4C, 0x81, 0xB8, 0x98, 0x81, 0xC5, 0x77, 0x81, 0x1E, 
   0x4F, 0x81, 0x1B, 0x82, 0x76, 0x43, 0x6B, 0x7C, 0x63, 0x54, 0xB0, 0xAD, 0x7B, 0x77, 0x5C, 0x86, 
   0x65, 0x00, 0x42, 0x98, 0x7F, 0x60, 0x76, 0x9E, 0x94, 0x81, 0x3D, 0x67, 0x8C, 0x42, 0x5B, 0x80, 
   0x69, 0x71, 0x69, 0x6E, 0x70, 0x75, 0x44, 0x5F, 0xA3, 0x11, 0x5F, 0x91, 0x62, 0x70, 0x6E, 0x7B, 
   0x6C, 0x69, 0x76, 0x72, 0x81, 0x86, 0xA9, 0xC5, 0x44, 0x4B, 0x8A, 0x00, 0x21, 0x1C, 0x8C, 0x75, 
   0x62, 0x64, 0x4F, 0xC6, 0x20, 0x40, 0xA5, 0x55, 0xAF, 0x55, 0x73, 0x9E, 0x61, 0x63, 0x36, 0xA1, 
   0x62, 0x4B, 0xA8, 0x38, 0x89, 0x68, 0x32, 0x4A, 0x62, 0x6B, 0x67, 0x8A, 0x5A, 0x95, 0xA8, 0x4E, 
   0x5C, 0xA1, 0x53, 0x55, 0x61, 0x5D, 0x5B, 0x4F, 0x24, 0x51, 0x9A, 0x52, 0x96, 0xA6, 0x96, 0x9A, 
   0x72, 0x3F, 0x48, 0x6C, 0x1C, 0x36, 0x88, 0x45, 0x6F, 0x8F, 0x7F, 0x7B, 0x84, 0x62, 0x7A, 0x9A, 
   0x49, 0x6C, 0x77, 0x1A, 0x10, 0x70, 0x3B, 0x5D, 0x80, 0x25, 0x4C, 0x7A, 0x4A, 0x7B, 0xA7, 0x7B, 
   0x7D, 0x74, 0x8D, 0x7E, 0x6E, 0x5F, 0x94, 0xAD, 0x73, 0x86, 0xA6, 0x2C, 0x3A, 0x55, 0x47, 0x2E, 
   0x6B, 0x6D, 0xA5, 0xA0, 0x28, 0x5C, 0xC2, 0x28, 0x2F, 0x66, 0x47, 0x8B, 0x4A, 0x82, 0x97, 0x9C, 
   0x6C, 0x3C, 0xC7, 0x28, 0x69, 0x89, 0x71, 0x80, 0x7D, 0x97, 0x79, 0x99, 0x2C, 0x76, 0xB9, 0x06, 
   0x45, 0x82, 0x22, 0x16, 0x37, 0x42, 0x19, 0x5B, 0x5D, 0x85, 0xD5, 0x98, 0xE4, 0xE1, 0x96, 0xD6, 
   0x8E, 0x20, 0x1F, 0x3A, 0x00, 0x00, 0x6C, 0x37, 0x34, 0x9B, 0xB1, 0xB7, 0xA8, 0x89, 0xC5, 0x96, 
   0x00, 0x5D, 0x46, 0x0A, 0x11, 0x75, 0x9A, 0x5D, 0xD2, 0x8F, 0xEB, 0xA0, 0x37, 0x87, 0x66, 0x12, 
   0x00, 0xA8, 0x4A, 0x0E, 0x73, 0x66, 0x77, 0x5C, 0x34, 0xAC, 0x96, 0x40, 0x79, 0x71, 0x72, 0x1D, 
   0xAB, 0x17, 0x2F, 0xAB, 0x00, 0x6D, 0x1E, 0xB0, 0xA6, 0x9E, 0xFF, 0xDF, 0xFF, 0x4A, 0x84, 0xA8, 
   0x00, 0x17, 0x3C, 0x00, 0x14, 0x45, 0x62, 0x23, 0x49, 0x7E, 0x8F, 0xD2, 0x75, 0xDD, 0xFF, 0x63, 
   0x7B, 0x5F, 0x4A, 0x4F, 0x49, 0x48, 0x2A, 0x87, 0x20, 0x36, 0x3B, 0x2D, 0x82, 0xCC, 0x8A, 0x84, 
   0xE4, 0x8F, 0x52, 0x44, 0x00, 0x5E, 0x82, 0x00, 0x70, 0x7E, 0xCA, 0x88, 0x66, 0xD6, 0x99, 0xFF, 
   0x43, 0x3D, 0xC8, 0x00, 0x21, 0x5F, 0x30, 0xB6, 0x68, 0xBC, 0x9F, 0x9B, 0x68, 0x00, 0xD2, 0x34, 
   0x88, 0x63, 0x5A, 0xA0, 0x25, 0x2D, 0x40, 0x94, 0x83, 0xBA, 0xFF, 0xE0, 0xC5, 0xF1, 0x24, 0x00, 
   0x2C, 0x00, 0x00, 0x00, 0x31, 0x75, 0x38, 0x6E, 0x95, 0xBF, 0x54, 0x69, 0xCD, 0x6B, 0x7F, 0x83, 
   0x64, 0x56, 0x6B, 0x4A, 0x6E, 0x90, 0x30, 0x37, 0x94, 0x1D, 0x0C, 0x49, 0x25, 0x19, 0x7D, 0x56, 
   0x84, 0x79, 0x9C, 0xBB, 0x8C, 0x72, 0x97, 0xD4, 0x2A, 0x31, 0xAD, 0x00, 0x11, 0x00, 0x3B, 0x33, 
   0x10, 0x8D, 0x6E, 0xD0, 0x4F, 0x80, 0xB8, 0x3E, 0x52, 0x6E, 0x6A, 0x40, 0x94, 0x4B, 0x50, 0xA1, 
   0x00, 0x50, 0x1C, 0x1D, 0x35, 0x3E, 0x7A, 0x7A, 0x91, 0x64, 0x8A, 0xC1, 0x3B, 0x44, 0x93, 0x28, 
   0x10, 0x8F, 0x33, 0x55, 0x25, 0x3A, 0x79, 0x25, 0x41, 0x52, 0x89, 0x76, 0x64, 0xD8, 0x38, 0x59, 
   0x8B, 0x3F, 0x53, 0x80, 0x7D, 0x59, 0xA6, 0x43, 0x7A, 0x6B, 0x14, 0x40, 0x2D, 0x3D, 0x23, 0xA0, 
   0x61, 0x6E, 0xB2, 0x6D, 0x6F, 0x57, 0x4F, 0x58, 0x83, 0x32, 0x4C, 0x8E, 0x32, 0x36, 0x67, 0x55, 
   0x65, 0x8E, 0x61, 0x93, 0x8E, 0x4F, 0x4E, 0x82, 0x54, 0x3B, 0x9C, 0x41, 0x73, 0x4A, 0x24, 0x62, 
   0x2D, 0x3B, 0x1E, 0xA1, 0x48, 0x4D, 0xAA, 0x6C, 0xA9, 0x72, 0x61, 0x59, 0x7D, 0x3E, 0x19, 0x7D, 
   0x42, 0x52, 0xA3, 0x36, 0x91, 0x5D, 0x42, 0x45, 0x41, 0x49, 0x11, 0x76, 0x55, 0x56, 0xAD, 0x4F, 
   0x6F, 0xA2, 0x4A, 0x5F, 0x5C, 0x55, 0x75, 0x82, 0x59, 0x51, 0xA8, 0x0F, 0x13, 0x1F, 0x2C, 0x64, 
   0x22, 0x8E, 0xA9, 0xFF, 0x65, 0x52, 0xEB, 0x13, 0x22, 0x14, 0x06, 0x33, 0x1C, 0x30, 0x40, 0x73, 
   0x77, 0x64, 0xB6, 0x6D, 0x6B, 0xAC, 0x3F, 0x7C, 0x56, 0x4E, 0x4D, 0x78, 0x5E, 0x45, 0xD8, 0x45, 
   0x3F, 0x85, 0x00, 0x45, 0x00, 0x4B, 0x5D, 0x72, 0x75, 0x7A, 0xCA, 0x3D, 0x51, 0x44, 0x3D, 0x2F, 
   0x68, 0x1C, 0x31, 0xBF, 0x5C, 0x7E, 0x9D, 0x7F, 0xB2, 0x6E, 0x67, 0x5C, 0x62, 0x27, 0x2B, 0x84, 
   0x1B, 0x35, 0xA1, 0x4A, 0x2C, 0x73, 0x68, 0x69, 0x6D, 0x47, 0x9A, 0x74, 0x5D, 0xA5, 0xBD, 0x66, 
   0x73, 0xAF, 0x26, 0x08, 0x09, 0x00, 0x12, 0x38, 0x72, 0x53, 0xE6, 0x69, 0x85, 0xBA, 0x47, 0x8E, 
   0x4C, 0x36, 0x39, 0x1F, 0x00, 0x13, 0x63, 0x8C, 0x9E, 0xF0, 0xFD, 0xF8, 0xFF, 0x25, 0x1C, 0x55, 
   0x00, 0x00, 0x00, 0x05, 0x75, 0x34, 0x81, 0x7E, 0xBC, 0x80, 0x65, 0xCB, 0x4E, 0x4A, 0x5B, 0x6F, 
   0x4C, 0x8E, 0x40, 0x8D, 0xD2, 0x1E, 0x94, 0x5F, 0x3E, 0x6D, 0x43, 0x96, 0x7C, 0x8F, 0xC8, 0x5E, 
   0xAE, 0x0E, 0x5C, 0xB8, 0x00, 0x50, 0x97, 0x8B, 0x6C, 0x5A, 0xCB, 0x9F, 0x63, 0x41, 0x5A, 0x5E, 
   0x06, 0x42, 0x6C, 0x6B, 0x69, 0x9C, 0x54, 0x53, 0x92, 0x00, 0x71, 0xA2, 0x5F, 0x67, 0x95, 0xC2, 
   0x62, 0x92, 0x56, 0x63, 0x61, 0x2B, 0x8B, 0x4F, 0x40, 0x67, 0x72, 0x5B, 0x37, 0x80, 0x0B, 0x2C, 
   0x93, 0x03, 0x52, 0x9A, 0xA7, 0xD2, 0x93, 0xCB, 0xD5, 0x75, 0x71, 0x09, 0x68, 0x27, 0x00, 0x68, 
   0x00, 0x5D, 0x8B, 0x4E, 0x95, 0x8C, 0xFF, 0x91, 0x81, 0x51, 0x42, 0x81, 0x00, 0x54, 0x81, 0x56, 
   0x8E, 0x81, 0xB9, 0x78, 0x81, 0x64, 0x71, 0x76, 0x29, 0x6B, 0x77, 0x23, 0x54, 0x9A, 0x96, 0x70, 
   0xA5, 0x7A, 0x7B, 0x65, 0x00, 0x37, 0x81, 0x53, 0x6C, 0x8C, 0xCC, 0xA0, 0x80, 0x43, 0x73, 0x69, 
   0x2A, 0x6D, 0x80, 0x45, 0x66, 0x97, 0x5C, 0x7C, 0x75, 0x5C, 0x59, 0x80, 0x46, 0x3D, 0x7A, 0x5E, 
   0x77, 0x76, 0x96, 0xC6, 0xBF, 0x44, 0x5D, 0x8A, 0x00, 0x1B, 0x22, 0x6C, 0x54, 0x67, 0x90, 0x8A, 
   0xAE, 0x6D, 0x8B, 0x83, 0x32, 0x5D, 0x7E, 0x15, 0x30, 0xB2, 0x66, 0x80, 0x7E, 0x84, 0x85, 0x50, 
   0x3A, 0x52, 0x7F, 0x4B, 0x5D, 0xA9, 0x88, 0x95, 0xAE, 0x37, 0x45, 0x63, 0x31, 0x4A, 0x4C, 0x3E, 
   0x73, 0xA2, 0x9F, 0x74, 0xBF, 0x91, 0x73, 0x79, 0x04, 0x71, 0x4A, 0x00, 0x16, 0x8E, 0x7E, 0x77, 
   0x9F, 0xBA, 0x8A, 0x7D, 0x2C, 0x62, 0x67, 0x4C, 0x9F, 0xA7, 0x72, 0x84, 0xAC, 0x21, 0x00, 0x56, 
   0x16, 0x05, 0x6C, 0xA4, 0xFF, 0xA5, 0x24, 0x65, 0x79, 0x00, 0x65, 0x6E, 0x78, 0x6B, 0x9C, 0x87, 
   0x5A, 0x86, 0x55, 0x62, 0x8D, 0x88, 0xAC, 0xBA, 0x6F, 0x88, 0xA6, 0x2D, 0x1F, 0x33, 0x4D, 0x61, 
   0x5C, 0x8F, 0x89, 0xFF, 0x1B, 0x66, 0x82, 0x00, 0x2D, 0x00, 0x74, 0x56, 0x7C, 0xA5, 0x8C, 0xB3, 
   0x45, 0x87, 0xA0, 0x66, 0x4E, 0xB8, 0x65, 0x85, 0x9B, 0x63, 0x94, 0x8D, 0x44, 0x15, 0x6E, 0x1A, 
   0x2C, 0x83, 0x48, 0xA5, 0x61, 0x66, 0xB7, 0x74, 0x50, 0x17, 0xB9, 0x45, 0x39, 0xAD, 0x6C, 0xC7, 
   0x88, 0x81, 0x7C, 0x79, 0x14, 0x2A, 0x61, 0x03, 0x13, 0x57, 0x8E, 0x7C, 0xA3, 0x96, 0x9B, 0xCC, 
   0x4B, 0x8B, 0x6F, 0x39, 0x4B, 0x3A, 0x32, 0x40, 0x5E, 0x65, 0x8B, 0xB1, 0x53, 0xC7, 0xC9, 0x4D, 
   0x3B, 0xA0, 0x67, 0x1C, 0x95, 0x21, 0x8C, 0x48, 0x16, 0x4D, 0x05, 0x73, 0x00, 0xB9, 0x69, 0x7A, 
   0xDF, 0x2B, 0xB6, 0x6E, 0x16, 0x51, 0x78, 0x74, 0x2A, 0x79, 0xBE, 0xA8, 0x8C, 0x7C, 0xB8, 0xD5, 
   0x00, 0x26, 0x78, 0x00, 0x00, 0x2D, 0xA3, 0x97, 0x89, 0x94, 0x8D, 0xD4, 0x21, 0x5A, 0x6E, 0x00, 
   0x38, 0x62, 0x5D, 0x2F, 0x8B, 0xD0, 0xF1, 0x8D, 0x61, 0xC1, 0xD1, 0x08, 0x00, 0xB2, 0x01, 0x0E, 
   0x33, 0x22, 0xB8, 0x46, 0x9E, 0x9F, 0x90, 0x74, 0x50, 0xE5, 0x90, 0x99, 0xD5, 0x6F, 0x90, 0xA0, 
   0x00, 0x00, 0x7A, 0x00, 0x32, 0x45, 0x8E, 0xE6, 0x95, 0x71, 0x89, 0xE5, 0x8A, 0x45, 0x63, 0x8E, 
   0x9F, 0x5D, 0x4C, 0x8B, 0xE0, 0x3B, 0x7A, 0xD7, 0x37, 0x3B, 0x54, 0x1F, 0x05, 0x33, 0x68, 0x76, 
   0x91, 0x67, 0x8D, 0xA1, 0x2D, 0x5F, 0x66, 0x3E, 0x31, 0x0B, 0x23, 0x49, 0x63, 0x49, 0x47, 0xC9, 
   0xA6, 0xB0, 0xC5, 0xAA, 0xCB, 0x9B, 0x11, 0x6F, 0x6E, 0x00, 0x02, 0x6A, 0x50, 0x0A, 0x41, 0x46, 
   0x29, 0x6F, 0x20, 0x6C, 0x72, 0x5B, 0x9D, 0x97, 0x8A, 0xA8, 0xE0, 0x61, 0x44, 0x97, 0x25, 0x29, 
   0x00, 0x0D, 0x33, 0x2D, 0x52, 0x4B, 0xCF, 0x75, 0x7A, 0xAF, 0x3C, 0x74, 0x54, 0x25, 0x51, 0x87, 
   0x48, 0x13, 0x81, 0x60, 0x6F, 0x60, 0x60, 0xA8, 0xCC, 0x5E, 0x45, 0x8B, 0x28, 0x1C, 0x3F, 0x17, 
   0x4A, 0x60, 0x4B, 0x6E, 0x71, 0x69, 0x7A, 0x84, 0x4C, 0x51, 0x7A, 0x1A, 0x35, 0x70, 0x5F, 0x58, 
   0x87, 0x60, 0x7B, 0x66, 0x1D, 0x4E, 0x6D, 0x6D, 0x59, 0xB2, 0x72, 0x6F, 0xA1, 0x2D, 0x51, 0x1E, 
   0x1C, 0x23, 0x97, 0x7C, 0x5C, 0xFF, 0x3E, 0x5D, 0x49, 0x0B, 0x37, 0x00, 0x62, 0x66, 0x90, 0xA0, 
   0x9F, 0xFF, 0x38, 0x4E, 0x9B, 0x03, 0x2A, 0x00, 0x47, 0x57, 0x43, 0x5F, 0x58, 0x8A, 0x5F, 0x7A, 
   0xA3, 0x57, 0x57, 0xB3, 0x00, 0x1E, 0x18, 0x0F, 0x4D, 0x37, 0xB1, 0xA9, 0xFB, 0x9A, 0x59, 0xCD, 
   0x00, 0x1F, 0x09, 0x03, 0x52, 0x3B, 0x7C, 0x97, 0xA0, 0x6D, 0x74, 0xBA, 0x44, 0x13, 0xB3, 0x27, 
   0x41, 0x50, 0x54, 0xA2, 0x37, 0x5F, 0x74, 0xA2, 0x26, 0x0D, 0x7B, 0x27, 0x4D, 0x43, 0x8F, 0x98, 
   0x8F, 0x67, 0x6A, 0xBF, 0x49, 0x57, 0xBE, 0x25, 0x1D, 0x5A, 0x0E, 0x35, 0x13, 0x64, 0x86, 0x7A, 
   0x6C, 0x53, 0xAA, 0x3F, 0x48, 0x83, 0x4A, 0x5A, 0x6C, 0x65, 0x87, 0x88, 0x4D, 0x4D, 0x97, 0x13, 
   0x40, 0x52, 0x51, 0x56, 0x58, 0x4B, 0x5B, 0xB8, 0x24, 0x3F, 0x5D, 0x3C, 0x35, 0x2C, 0x4F, 0x60, 
   0x96, 0x62, 0xB2, 0xE2, 0x62, 0x8A, 0x86, 0x34, 0x22, 0x35, 0x56, 0x65, 0x90, 0x7D, 0x70, 0x9C, 
   0x1D, 0x16, 0x75, 0x40, 0x35, 0x85, 0x7F, 0x9F, 0x9B, 0x4C, 0xD8, 0x77, 0x34, 0x5D, 0x53, 0x5A, 
   0x00, 0x59, 0x6A, 0x44, 0xBF, 0x08, 0x4C, 0x59, 0x00, 0x18, 0x11, 0x97, 0x8F, 0xD6, 0xA5, 0xF2, 
   0xC2, 0x07, 0x3C, 0x2F, 0x57, 0x00, 0x75, 0xBD, 0xAD, 0xC7, 0x49, 0xB2, 0xE2, 0x1E, 0x31, 0x6A, 
   0x3F, 0x00, 0x00, 0x19, 0x3E, 0x43, 0x56, 0xAF, 0xFF, 0xC5, 0xD9, 0xEF, 0x6F, 0x43, 0x2A, 0x00, 
   0x00, 0x22, 0x42, 0x44, 0x9D, 0xA6, 0xFF, 0xA7, 0x84, 0xD5, 0xC6, 0x4D, 0x00, 0xD0, 0x00, 0x20, 
   0x71, 0x2F, 0x93, 0x34, 0x8B, 0x73, 0x4F, 0x3D, 0x68, 0xC8, 0x5A, 0x62, 0xB2, 0x9E, 0x9A, 0x40, 
   0x6E, 0x5A, 0x7E, 0x00, 0x14, 0xBD, 0x2D, 0x47, 0x72, 0x74, 0x8E, 0x3F, 0x44, 0x7F, 0xAB, 0x7F, 
   0x4C, 0xC2, 0x9C, 0x6F, 0x8D, 0x72, 0xA3, 0x56, 0x69, 0x8A, 0x49, 0x16, 0x31, 0x72, 0x0F, 0x2B, 
   0x85, 0x40, 0x5B, 0x93, 0x46, 0x6F, 0xAB, 0xDC, 0xA9, 0x8E, 0xB6, 0xB7, 0x75, 0x00, 0x00, 0x6D, 
   0x00, 0x00, 0x68, 0xB5, 0x93, 0x8B, 0xCE, 0xA2, 0x8C, 0x3E, 0x64, 0x81, 0x00, 0x59, 0x81, 0x57, 
   0x77, 0x81, 0xBB, 0x83, 0x81, 0xA4, 0x61, 0x7B, 0x2A, 0x71, 0x65, 0x00, 0x65, 0xA5, 0x58, 0x60, 
   0x9A, 0xBA, 0x7C, 0x71, 0x65, 0x70, 0x7B, 0x09, 0x49, 0x80, 0x59, 0x61, 0x69, 0xAE, 0x95, 0x80, 
   0x47, 0x6E, 0x97, 0x19, 0x67, 0x80, 0x69, 0x7D, 0x74, 0x80, 0x71, 0x69, 0x47, 0x65, 0x81, 0x7E, 
   0x8C, 0xD6, 0x3E, 0x4B, 0x90, 0x05, 0x2D, 0x17, 0x78, 0x44, 0x67, 0x7F, 0x6D, 0xB9, 0x52, 0x6F, 
   0x87, 0x63, 0x98, 0x6C, 0x62, 0x6F, 0x7E, 0x55, 0x46, 0xAD, 0x2C, 0x2F, 0xB8, 0x33, 0x79, 0x3A, 
   0x7E, 0x97, 0x63, 0x7F, 0x5E, 0xC0, 0x62, 0x5D, 0xC6, 0x2C, 0x7E, 0x75, 0x15, 0x3F, 0x5D, 0x77, 
   0x57, 0x7B, 0x88, 0xB3, 0xB5, 0x4D, 0x7F, 0xAE, 0x44, 0x3D, 0x67, 0x30, 0x4D, 0x49, 0x00, 0x22, 
   0x82, 0x6B, 0x91, 0x8F, 0xFB, 0xDC, 0x90, 0x70, 0x77, 0x85, 0x00, 0x11, 0x95, 0x20, 0x0F, 0x84, 
   0x5B, 0x50, 0x73, 0x84, 0xE6, 0x95, 0x51, 0x7F, 0x8C, 0x57, 0x95, 0x91, 0x3A, 0x4A, 0x59, 0x58, 
   0x3E, 0x99, 0x6A, 0x88, 0xCC, 0x65, 0x6D, 0x8C, 0x47, 0x5C, 0x3B, 0x89, 0xC7, 0xC9, 0x5F, 0x5E, 
   0xC4, 0x0D, 0x1C, 0x56, 0x4A, 0x5A, 0x66, 0x78, 0x8D, 0xA4, 0x35, 0x45, 0x7E, 0x42, 0x47, 0x6E, 
   0x8E, 0xC0, 0x99, 0x77, 0xC6, 0xC9, 0x36, 0x4B, 0xC2, 0x1E, 0x21, 0x70, 0x4C, 0x44, 0x63, 0x6F, 
   0x75, 0x5F, 0x6F, 0xB0, 0xC7, 0x51, 0x9D, 0xE2, 0x48, 0x6A, 0x4B, 0x24, 0x00, 0x5F, 0x24, 0x00, 
   0x9D, 0x54, 0x9F, 0x91, 0xA5, 0xFD, 0x7A, 0x5A, 0x6C, 0x6F, 0x00, 0x00, 0x87, 0x33, 0x2B, 0xA4, 
   0xCA, 0x8F, 0xBA, 0xA2, 0xA3, 0x6F, 0x0F, 0x90, 0x25, 0x00, 0x1C, 0x99, 0x69, 0x39, 0xD4, 0xA9, 
   0xE4, 0xC7, 0x36, 0xBF, 0x68, 0x06, 0x00, 0x43, 0x4A, 0x00, 0x65, 0x51, 0x65, 0x8A, 0x3D, 0x9E, 
   0x89, 0x6D, 0x9B, 0xB9, 0xCD, 0x78, 0xB2, 0x2A, 0x65, 0x82, 0x00, 0x15, 0x38, 0x2B, 0x45, 0x68, 
   0xC9, 0xB4, 0xD7, 0x8C, 0x9E, 0xBC, 0x2E, 0x78, 0xB2, 0x41, 0x4B, 0x37, 0x0D, 0x00, 0x25, 0x43, 
   0x30, 0xAC, 0x74, 0xCF, 0xAB, 0x76, 0x9D, 0xE0, 0xA1, 0x67, 0xDC, 0x36, 0x3B, 0x2C, 0x00, 0x0E, 
   0x00, 0x0B, 0x51, 0x7F, 0xBD, 0xC1, 0xA9, 0xFF, 0xB1, 0xF2, 0x25, 0x5E, 0xFF, 0x00, 0x00, 0x4E, 
   0x50, 0x74, 0x1D, 0xB5, 0xB5, 0xCC, 0x47, 0x00, 0xB6, 0x33, 0x8C, 0x4C, 0x8C, 0xFF, 0x6B, 0x9D, 
   0x65, 0xF1, 0x92, 0x85, 0xFF, 0x5B, 0x9E, 0xA6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0xAA, 
   0xB3, 0xD7, 0xBD, 0xE9, 0x5D, 0x4E, 0x97, 0x00, 0x0D, 0x27, 0x11, 0x0F, 0x12, 0x75, 0x80, 0xA6, 
   0x78, 0xCE, 0xFF, 0x6D, 0x83, 0xAE, 0x6A, 0x7F, 0x65, 0x49, 0x7F, 0x7D, 0x17, 0x29, 0x51, 0x15, 
   0x00, 0x2E, 0x22, 0x22, 0x7A, 0x21, 0x61, 0x83, 0xA9, 0xC7, 0x9D, 0xC0, 0xBB, 0xE1, 0x38, 0x44, 
   0xAF, 0x00, 0x06, 0x0A, 0x32, 0x21, 0x13, 0x55, 0x67, 0xA4, 0x35, 0x6F, 0x8B, 0x33, 0x48, 0x34, 
   0x85, 0x65, 0xBA, 0x85, 0x80, 0xFE, 0x43, 0x3A, 0x66, 0x24, 0x28, 0x38, 0x23, 0x4B, 0x4D, 0x46, 
   0x7A, 0x44, 0x5E, 0x6F, 0xA2, 0x58, 0x46, 0xCC, 0x2A, 0x45, 0x70, 0x35, 0x4B, 0x5C, 0x41, 0x57, 
   0x50, 0x3D, 0x52, 0x6F, 0x4A, 0x7B, 0x83, 0x4C, 0x48, 0x86, 0x6F, 0x5F, 0xA4, 0x6E, 0x80, 0x81, 
   0x43, 0x51, 0x69, 0x04, 0x23, 0x95, 0x33, 0x4D, 0x61, 0x85, 0x6C, 0x46, 0x7A, 0x9A, 0xB9, 0x2E, 
   0x54, 0xA3, 0x54, 0x36, 0xBC, 0x30, 0x51, 0x51, 0x0E, 0x4C, 0x00, 0x5F, 0x63, 0xB9, 0x8D, 0x4D, 
   0xFF, 0x2B, 0x7A, 0x1A, 0x24, 0x62, 0x29, 0x35, 0x1E, 0xAC, 0x3D, 0x4D, 0x87, 0x5A, 0xAE, 0x87, 
   0x5A, 0x59, 0x65, 0x33, 0x0E, 0x3F, 0x3F, 0x65, 0xBA, 0x6D, 0x7D, 0xD2, 0x56, 0x5F, 0x58, 0x49, 
   0x4C, 0x6B, 0x3C, 0x3F, 0x9C, 0x1F, 0x29, 0x3B, 0x37, 0x5E, 0x38, 0x83, 0x93, 0xC8, 0x6D, 0x70, 
   0xDA, 0x38, 0x2F, 0x28, 0x21, 0x3A, 0x3F, 0x61, 0x64, 0xE6, 0x78, 0x88, 0xB2, 0x33, 0x6B, 0x49, 
   0x2C, 0x4E, 0x3C, 0x49, 0x59, 0x7C, 0x65, 0x4E, 0xD1, 0x37, 0x5A, 0x96, 0x32, 0x81, 0x00, 0x6B, 
   0x64, 0x81, 0x5F, 0x4B, 0xFF, 0x35, 0x43, 0x5A, 0x12, 0x1C, 0x03, 0x36, 0x36, 0xB5, 0x6D, 0xAC, 
   0xA6, 0x90, 0xA7, 0x6E, 0x39, 0x3E, 0x69, 0x15, 0x1F, 0x8C, 0x32, 0x36, 0x86, 0x50, 0x50, 0x6F, 
   0x85, 0x6B, 0x8C, 0x58, 0xA0, 0x86, 0x35, 0x93, 0x9B, 0x61, 0x51, 0x87, 0x43, 0x30, 0x24, 0x26, 
   0x34, 0x68, 0x48, 0x2A, 0xAE, 0x4E, 0x4A, 0x9E, 0x44, 0x98, 0x32, 0x14, 0x6D, 0x31, 0x40, 0x2C, 
   0xD0, 0xB5, 0xB7, 0xF6, 0xB3, 0xEF, 0x9A, 0x03, 0x07, 0x68, 0x00, 0x00, 0x54, 0x40, 0x81, 0x49, 
   0x7D, 0x8F, 0xAC, 0x7F, 0x30, 0xC0, 0x51, 0x87, 0x93, 0x1D, 0x88, 0x80, 0x52, 0x28, 0xBC, 0x60, 
   0x5E, 0x2C, 0x41, 0x9F, 0x00, 0xA8, 0x79, 0xFF, 0xB0, 0x9E, 0xFF, 0x00, 0x83, 0x91, 0x00, 0x00, 
   0x68, 0x90, 0x31, 0x31, 0xC0, 0xAB, 0x53, 0x3D, 0x79, 0x89, 0x0F, 0x57, 0xAF, 0x76, 0x79, 0xD2, 
   0x9D, 0x95, 0x9D, 0x0E, 0x5B, 0x44, 0x03, 0x32, 0x81, 0x87, 0x72, 0x7B, 0x83, 0x79, 0x5A, 0x17, 
   0x80, 0x94, 0x50, 0x7A, 0xC2, 0x9F, 0x63, 0x9E, 0x48, 0x68, 0x68, 0x1D, 0x67, 0x49, 0x2F, 0x5B, 
   0x5B, 0x64, 0x6B, 0x80, 0x82, 0x44, 0xA5, 0x49, 0x62, 0xAB, 0x16, 0x98, 0x93, 0x62, 0xBE, 0x5E, 
   0xC8, 0x49, 0x73, 0x53, 0x09, 0x6D, 0x00, 0x6B, 0x85, 0x31, 0xA2, 0x86, 0xCD, 0x76, 0x81, 0x4D, 
   0x4E, 0x81, 0x2B, 0x60, 0x76, 0x75, 0x83, 0x8D, 0x7C, 0x78, 0x92, 0x5E, 0x66, 0x65, 0x14, 0x6C, 
   0x71, 0x2C, 0x6C, 0xC7, 0xCC, 0x77, 0x7C, 0x75, 0x6B, 0x53, 0x00, 0x43, 0x80, 0x4C, 0x72, 0x97, 
   0x81, 0x8A, 0x80, 0x7D, 0x73, 0x74, 0x4F, 0x45, 0x74, 0x48, 0x78, 0x80, 0xA7, 0xA4, 0xA2, 0x3E, 
   0x5D, 0x84, 0x00, 0x22, 0x3F, 0x71, 0x50, 0x68, 0x9C, 0xA2, 0xAE, 0x52, 0x76, 0x8D, 0x41, 0x5F, 
   0x65, 0x47, 0x54, 0x8E, 0x80, 0x87, 0x8F, 0x6E, 0x81, 0x73, 0x33, 0x62, 0x86, 0x27, 0x29, 0xAE, 
   0x56, 0x8B, 0x7B, 0x79, 0x97, 0x5D, 0x51, 0x47, 0x7B, 0x51, 0x57, 0xAF, 0x84, 0x74, 0x8D, 0x5A, 
   0x6E, 0x6A, 0x31, 0x6E, 0x65, 0x41, 0x78, 0xB5, 0x74, 0x49, 0xBF, 0x61, 0x4F, 0x5B, 0x0C, 0x61, 
   0x3E, 0x35, 0x85, 0x9A, 0x98, 0x9B, 0xB2, 0x91, 0x5A, 0x7E, 0x00, 0x02, 0x4B, 0x33, 0x7F, 0x8A, 
   0x7E, 0xB8, 0xC4, 0x46, 0x00, 0x53, 0x85, 0x7B, 0x88, 0xB1, 0x86, 0x83, 0x1A, 0x63, 0x94, 0x1E, 
   0x72, 0x9A, 0x79, 0x5A, 0xA9, 0x5D, 0x38, 0x5E, 0x6E, 0x9A, 0x63, 0x78, 0xA0, 0xC5, 0x54, 0x82, 
   0xBE, 0x1A, 0x40, 0x2F, 0x53, 0x44, 0x6D, 0x91, 0x5B, 0xEB, 0x35, 0x83, 0x97, 0x0D, 0x56, 0x52, 
   0x79, 0x4B, 0x74, 0x63, 0x95, 0xA8, 0x47, 0x55, 0x8D, 0x2B, 0x00, 0x7C, 0x61, 0x81, 0x72, 0x8A, 
   0xC8, 0xA1, 0x89, 0x6D, 0xD5, 0x47, 0x75, 0xB5, 0x37, 0x92, 0x6C, 0x39, 0x21, 0x52, 0x00, 0x00, 
   0x68, 0x3C, 0x53, 0x7B, 0xB1, 0xE7, 0xAA, 0x78, 0xD0, 0xAF, 0x0A, 0x26, 0x70, 0x0A, 0x00, 0x5E, 
   0x78, 0x5A, 0x98, 0x9B, 0xCF, 0xAB, 0x44, 0x96, 0xB6, 0x1F, 0x2D, 0x5A, 0x35, 0x21, 0x80, 0x4D, 
   0x94, 0x8B, 0x6A, 0xC0, 0x64, 0x5E, 0x17, 0xA2, 0x4C, 0x10, 0xB2, 0x00, 0x83, 0x1E, 0x44, 0x5E, 
   0x59, 0xCE, 0x7D, 0xFB, 0x81, 0x93, 0xB1, 0x09, 0x63, 0x5A, 0x00, 0x07, 0x64, 0x03, 0x0C, 0x2F, 
   0xFF, 0xC9, 0xBD, 0xF7, 0xFF, 0xFF, 0x1E, 0x69, 0x7B, 0x00, 0x00, 0x00, 0x4C, 0x10, 0x5D, 0x88, 
   0x8B, 0x6E, 0x5C, 0xC7, 0xE4, 0x45, 0x5C, 0xFA, 0x4A, 0x23, 0x40, 0x4A, 0x95, 0x2C, 0x3A, 0x95, 
   0x72, 0x4C, 0x18, 0x93, 0x85, 0x74, 0xE6, 0x5C, 0xC4, 0xA3, 0x21, 0x25, 0x6A, 0x00, 0x47, 0xB3, 
   0x58, 0xAF, 0x9B, 0x9B, 0x51, 0x7C, 0x5F, 0x49, 0x54, 0x51, 0x87, 0x4D, 0x5F, 0xCF, 0xE0, 0xC4, 
   0xFF, 0xFF, 0xA7, 0x4A, 0xAC, 0x10, 0x00, 0x26, 0x00, 0x54, 0x58, 0x31, 0x7C, 0x56, 0x3F, 0x3F, 
   0x63, 0x69, 0x6C, 0xA4, 0x75, 0x82, 0xAA, 0x36, 0x2C, 0x82, 0x35, 0x3F, 0x81, 0x51, 0x9C, 0x4E, 
   0x25, 0x59, 0x72, 0x55, 0x4E, 0xC3, 0xB7, 0x8C, 0xA6, 0x86, 0xA0, 0x75, 0x08, 0x67, 0x76, 0x00, 
   0x06, 0x6E, 0x16, 0x04, 0x45, 0x58, 0x35, 0x6F, 0x57, 0x74, 0x6D, 0x80, 0xC7, 0x9E, 0x73, 0x9D, 
   0xFF, 0x5E, 0x32, 0xAC, 0x04, 0x39, 0x00, 0x00, 0x28, 0x00, 0x3B, 0x36, 0x95, 0x9B, 0x99, 0xD0, 
   0x75, 0xB6, 0xB6, 0x6E, 0x47, 0xC5, 0x32, 0x12, 0x6A, 0x0E, 0x40, 0x11, 0x47, 0x80, 0x55, 0x6A, 
   0x70, 0xA1, 0x4D, 0x4D, 0x93, 0x31, 0x4C, 0x99, 0x58, 0x57, 0xA3, 0x63, 0x62, 0x5C, 0x2A, 0x4B, 
   0x2D, 0x2B, 0x40, 0x6E, 0x71, 0x4D, 0x94, 0x51, 0x65, 0x81, 0x47, 0x76, 0x8F, 0x7F, 0x48, 0xE3, 
   0x44, 0x6F, 0x79, 0x00, 0x2B, 0x00, 0x4B, 0x32, 0xA8, 0x9C, 0xBC, 0xFF, 0x57, 0x72, 0x58, 0x16, 
   0x1A, 0x0F, 0x49, 0x58, 0x70, 0x54, 0x6F, 0xAB, 0x48, 0x52, 0xBB, 0x3C, 0x41, 0x4E, 0x2B, 0x63, 
   0x42, 0x6B, 0x5D, 0xA9, 0x60, 0x4C, 0xAE, 0x58, 0x67, 0x62, 0x07, 0x29, 0x38, 0x1A, 0x36, 0x24, 
   0x89, 0xA3, 0xBD, 0x96, 0x4F, 0xD2, 0x1E, 0x1C, 0x71, 0x22, 0x78, 0x7B, 0x6C, 0xC2, 0x90, 0x6B, 
   0x58, 0x8D, 0x14, 0x00, 0x4D, 0x2B, 0x2E, 0x43, 0x6B, 0xC5, 0xAC, 0x5A, 0x7C, 0xAD, 0x32, 0x2A, 
   0x6C, 0x1B, 0x2E, 0x4E, 0x3F, 0x30, 0x39, 0x6F, 0x7D, 0x92, 0x80, 0x9A, 0xFF, 0x40, 0x44, 0x8C, 
   0x21, 0x53, 0x32, 0x4D, 0x59, 0x8A, 0x53, 0x59, 0x8F, 0x20, 0x4E, 0x29, 0x55, 0x5A, 0x74, 0x78, 
   0x92, 0xCC, 0x4A, 0x4C, 0x67, 0x37, 0x17, 0x67, 0x31, 0x3A, 0xA0, 0x32, 0x70, 0x89, 0x71, 0x7D, 
   0x71, 0x3F, 0x49, 0x3E, 0x4F, 0x53, 0x6E, 0x4E, 0x58, 0xDD, 0x1B, 0x0F, 0x7C, 0x38, 0x31, 0x64, 
   0x68, 0xD5, 0x81, 0x7A, 0xDA, 0xB9, 0x34, 0x35, 0x83, 0x27, 0x00, 0x3D, 0x64, 0x39, 0xAD, 0x31, 
   0x52, 0x68, 0x0A, 0x3A, 0x30, 0x6D, 0x8D, 0x8D, 0x85, 0xA5, 0xAC, 0x00, 0x1D, 0x32, 0x3B, 0x24, 
   0x4E, 0xFE, 0xB6, 0xFF, 0x78, 0xE4, 0xFB, 0x00, 0x35, 0x33, 0x11, 0x00, 0x00, 0x31, 0x34, 0x73, 
   0x80, 0xC6, 0xFF, 0xBA, 0xC1, 0xD9, 0x51, 0x14, 0x24, 0x00, 0x00, 0x43, 0x0E, 0x81, 0x83, 0xC3, 
   0xFF, 0x85, 0xC5, 0xA4, 0x97, 0x4B, 0x00, 0x55, 0x19, 0x16, 0xBC, 0x17, 0xBC, 0xC6, 0x67, 0x95, 
   0x5D, 0x5D, 0x27, 0x77, 0x36, 0x32, 0x70, 0x6A, 0x89, 0x34, 0x5E, 0x8F, 0x9E, 0x08, 0x4B, 0xFB, 
   0x27, 0x47, 0x9E, 0xA7, 0xB3, 0x44, 0x91, 0x74, 0x48, 0x23, 0x23, 0xA8, 0x55, 0x67, 0x7B, 0x6B, 
   0x8A, 0x49, 0x37, 0x68, 0x9A, 0x48, 0x56, 0xBD, 0x5F, 0x40, 0x99, 0x4F, 0x97, 0x68, 0x78, 0xA2, 
   0x49, 0x82, 0x55, 0x67, 0x56, 0x30, 0x7A, 0x00, 0x26, 0x93, 0x11, 0x75, 0xB1, 0xFF, 0xD3, 0x99, 
   0xD6, 0xBF, 0x63, 0x00, 0x00, 0x56, 0x00, 0x00, 0x7F, 0x63, 0x82, 0x97, 0x8A, 0x97, 0x86, 0xA7, 
   0x70, 0x76, 0x17, 0x49, 0x87, 0x00, 0x71, 0x8D, 0x9F, 0x78, 0x7B, 0xA1, 0x6D, 0x81, 0x5B, 0x78, 
   0x7B, 0x20, 0x61, 0x7C, 0x37, 0x6C, 0xB0, 0xA2, 0x77, 0x7C, 0x57, 0x65, 0x81, 0x00, 0x4A, 0x80, 
   0x70, 0x7E, 0x6E, 0xB1, 0x7A, 0x6E, 0x5C, 0x85, 0x80, 0x69, 0x7D, 0xA7, 0x44, 0x6F, 0x83, 0x05, 
   0x2F, 0x1C, 0x71, 0x61, 0x62, 0x62, 0x6E, 0xD1, 0x51, 0x87, 0x88, 0x4C, 0x8E, 0x5A, 0x4D, 0x60, 
   0x82, 0x70, 0x4E, 0x88, 0x65, 0x7C, 0x88, 0x59, 0x9E, 0x56, 0x63, 0x64, 0x69, 0x50, 0x62, 0xD8, 
   0x4F, 0x29, 0xD1, 0x28, 0x6E, 0x24, 0x4C, 0x86, 0x4C, 0x92, 0x4E, 0xAA, 0x96, 0x86, 0xC8, 0x2C, 
   0x74, 0x83, 0x0E, 0x45, 0x65, 0x63, 0x50, 0x6A, 0x59, 0x6D, 0x9E, 0x43, 0x63, 0x97, 0xAE, 0x96, 
   0x79, 0x50, 0x7D, 0x61, 0x00, 0x0A, 0x83, 0x3A, 0x49, 0x94, 0xC5, 0xB7, 0x7E, 0x76, 0xA0, 0x7A, 
   0x1E, 0x64, 0x8C, 0x3E, 0x12, 0x98, 0x70, 0x59, 0x8B, 0x81, 0x48, 0x80, 0x7E, 0xA3, 0xD5, 0x3B, 
   0x8B, 0x9F, 0x0B, 0x39, 0x42, 0x65, 0x7B, 0x8C, 0x70, 0x64, 0xE7, 0x1B, 0x49, 0x5E, 0x3E, 0x88, 
   0x41, 0x9A, 0xB5, 0xD0, 0x66, 0x3C, 0xA8, 0x27, 0x3A, 0x2B, 0x80, 0x7E, 0xC5, 0x67, 0x9F, 0xCA, 
   0x00, 0x42, 0x56, 0x2D, 0x03, 0x4F, 0x5E, 0x56, 0x68, 0x72, 0xC7, 0xA0, 0x74, 0x7F, 0xC6, 0x64, 
   0x7E, 0xCC, 0x73, 0x87, 0x95, 0x6A, 0x51, 0x48, 0x32, 0x26, 0xAB, 0x2A, 0x6F, 0x87, 0x40, 0x7F, 
   0x42, 0x46, 0x24, 0x81, 0x1B, 0x2C, 0xB0, 0x6D, 0xAC, 0x94, 0xA6, 0xB8, 0x8C, 0x4F, 0x60, 0x58, 
   0x00, 0x2B, 0x48, 0x31, 0x42, 0xB7, 0xB0, 0x66, 0xEA, 0x8D, 0xA5, 0x97, 0x02, 0x8D, 0x28, 0x00, 
   0x20, 0x2E, 0x7C, 0x0A, 0xC5, 0x94, 0xC1, 0xE4, 0x17, 0xAF, 0x5B, 0x44, 0x14, 0x80, 0x93, 0x4B, 
   0x8A, 0x58, 0x7E, 0x51, 0x1C, 0x5C, 0x96, 0x0A, 0x3A, 0x9E, 0x5C, 0x37, 0x56, 0x6B, 0x96, 0xBE, 
   0x31, 0x99, 0xA9, 0x99, 0x7C, 0x77, 0x92, 0x79, 0xAF, 0x2F, 0x2D, 0xA7, 0x2D, 0x64, 0x35, 0x65, 
   0x95, 0xAD, 0x59, 0x01, 0xCF, 0x25, 0x47, 0x51, 0x00, 0x8F, 0x5C, 0x65, 0x82, 0x86, 0xDA, 0x9E, 
   0xCD, 0xC0, 0x8A, 0xC2, 0x00, 0x15, 0x7C, 0x00, 0x00, 0x53, 0x48, 0xAD, 0x65, 0xF8, 0xD2, 0xA7, 
   0x50, 0x01, 0xFF, 0x00, 0x31, 0x3F, 0x70, 0xDF, 0x00, 0x90, 0x7B, 0xEE, 0xAC, 0x80, 0xFF, 0x63, 
   0xC0, 0x8B, 0x1F, 0x5F, 0x3B, 0x3E, 0x00, 0x70, 0x6A, 0x64, 0xA1, 0x6E, 0xB3, 0xB0, 0x1C, 0x61, 
   0x58, 0x00, 0x04, 0x1F, 0x53, 0x4A, 0x83, 0xC7, 0x9D, 0xE6, 0x76, 0xAE, 0xC3, 0x00, 0x3A, 0x5F, 
   0x22, 0x16, 0x0E, 0x58, 0x67, 0x7B, 0x6B, 0x7B, 0xD8, 0x71, 0x80, 0x9A, 0x79, 0x7D, 0x75, 0x0F, 
   0x7E, 0x8D, 0x24, 0x18, 0x4C, 0x5D, 0x1C, 0x35, 0x1F, 0x35, 0x87, 0x21, 0x5C, 0xB1, 0x8F, 0xA9, 
   0x84, 0x8E, 0xC5, 0xC0, 0x19, 0x27, 0x82, 0x00, 0x08, 0x00, 0x41, 0x4D, 0x45, 0x7D, 0x87, 0xFF, 
   0x67, 0x59, 0xC4, 0x22, 0x30, 0x1D, 0x33, 0x42, 0x81, 0x55, 0x65, 0x8C, 0x5A, 0x7C, 0x65, 0x54, 
   0x53, 0x92, 0x2B, 0x52, 0x75, 0x4D, 0x58, 0x59, 0x53, 0x5D, 0x97, 0x3C, 0x51, 0x86, 0x3C, 0x4B, 
   0x68, 0x4D, 0x40, 0x5D, 0x21, 0x52, 0x6B, 0x50, 0x70, 0x9C, 0x73, 0x65, 0xB5, 0x2F, 0x4E, 0x8E, 
   0x2F, 0x27, 0x59, 0x7F, 0x83, 0x6A, 0x6E, 0x89, 0x93, 0x17, 0x44, 0xCC, 0x38, 0x31, 0xAC, 0x5A, 
   0x5E, 0x14, 0x39, 0x53, 0x00, 0x5B, 0x53, 0xD4, 0x87, 0x7B, 0xFF, 0x1F, 0x52, 0x49, 0x03, 0x4C, 
   0x00, 0x60, 0x46, 0xC0, 0x94, 0x5D, 0xF3, 0x43, 0x68, 0x3A, 0x19, 0x4B, 0x1C, 0x0E, 0x23, 0x52, 
   0x4A, 0x48, 0xA8, 0x8B, 0xAC, 0xF5, 0x74, 0x6E, 0x7C, 0x39, 0x3F, 0x3C, 0x37, 0x71, 0xB7, 0x37, 
   0x4E, 0x60, 0x3E, 0x47, 0x1C, 0x71, 0x5D, 0xBD, 0x49, 0x5D, 0xD5, 0x31, 0x51, 0x6D, 0x31, 0x35, 
   0x32, 0x38, 0x3C, 0x82, 0x68, 0x82, 0xA1, 0x59, 0x67, 0x64, 0x53, 0x55, 0x6C, 0x6F, 0x5A, 0xE9, 
   0x72, 0x48, 0xC3, 0x14, 0x59, 0x2E, 0x0E, 0x59, 0x00, 0x64, 0x59, 0x78, 0x71, 0x64, 0xF2, 0x39, 
   0x47, 0x54, 0x4B, 0x59, 0x22, 0x57, 0x49, 0xAD, 0x5C, 0x7D, 0xEC, 0x6C, 0x81, 0x5C, 0x15, 0x30, 
   0x21, 0x26, 0x2F, 0x88, 0x60, 0x6F, 0x96, 0x61, 0x44, 0x87, 0x4F, 0x47, 0x99, 0x1C, 0x9A, 0x87, 
   0x44, 0x9B, 0x9C, 0x67, 0x76, 0x7E, 0x61, 0x3E, 0x44, 0x32, 0x3B, 0x98, 0x1B, 0x0E, 0x98, 0x3E, 
   0x51, 0x59, 0x6D, 0xB0, 0x59, 0x41, 0x89, 0x50, 0x10, 0x12, 0x8D, 0x95, 0x67, 0xCE, 0xAB, 0xA6, 
   0x96, 0x00, 0x29, 0x58, 0x0D, 0x24, 0xB7, 0x6F, 0xAE, 0x57, 0x3E, 0x88, 0x4D, 0x68, 0x1C, 0xC1, 
   0x63, 0x77, 0xB7, 0x4C, 0xAA, 0x88, 0x40, 0x1B, 0xA0, 0x4C, 0x0D, 0x3E, 0x43, 0xE3, 0x35, 0x62, 
   0xD3, 0xE3, 0xBC, 0x3B, 0xEF, 0x31, 0x30, 0x58, 0x00, 0x19, 0x16, 0x85, 0x39, 0x66, 0x9C, 0xE6, 
   0xC3, 0x0D, 0xA7, 0xA2, 0x1D, 0x17, 0x69, 0x7A, 0x48, 0x7F, 0x81, 0x6B, 0x7F, 0x20, 0x56, 0x69, 
   0x07, 0x6F, 0x9D, 0xA4, 0x71, 0xB8, 0xC7, 0xA4, 0x66, 0x47, 0x6E, 0x54, 0x06, 0x2E, 0xA3, 0x6A, 
   0x4F, 0x81, 0x74, 0x66, 0x49, 0x00, 0x5C, 0x9A, 0x2C, 0x69, 0xBD, 0xB3, 0x81, 0x99, 0xAD, 0x8C, 
   0x5D, 0x64, 0x78, 0x6C, 0x00, 0x26, 0x5C, 0x07, 0x37, 0x63, 0xC7, 0x61, 0x99, 0x7A, 0x70, 0xB1, 
   0x35, 0x9F, 0x99, 0x5A, 0xB3, 0x63, 0x59, 0x16, 0x68, 0x3D, 0x09, 0x79, 0x4E, 0x77, 0x6F, 0x55, 
   0xA8, 0x87, 0x50, 0x7C, 0x9E, 0x3B, 0x55, 0x76, 0x3E, 0x61, 0x6A, 0x8B, 0x89, 0x91, 0xA2, 0x62, 
   0x7A, 0x5B, 0x72, 0x4D, 0x1F, 0x61, 0x7C, 0x2A, 0x6C, 0xC7, 0x8B, 0x71, 0x7C, 0x86, 0x71, 0x58, 
   0x15, 0x45, 0x80, 0x60, 0x85, 0x86, 0xC6, 0xB7, 0x97, 0x3B, 0x60, 0x84, 0x00, 0x1F, 0x2E, 0x72, 
   0x74, 0x6D, 0x9C, 0x75, 0xB4, 0x4C, 0x64, 0x78, 0x23, 0x4E, 0x8F, 0x4C, 0x6C, 0x8F, 0x7B, 0x83, 
   0x78, 0x5F, 0x77, 0x8E, 0x43, 0x54, 0x61, 0x5F, 0x4E, 0x7E, 0x81, 0x8D, 0x91, 0x7A, 0x81, 0x8C, 
   0x34, 0x57, 0x9E, 0x17, 0x2A, 0xAE, 0x63, 0x7C, 0x59, 0x91, 0xC1, 0x5A, 0x57, 0x6B, 0xAC, 0x33, 
   0x57, 0xDA, 0x64, 0x50, 0x94, 0x3D, 0x3A, 0x5F, 0x44, 0x86, 0x60, 0x8F, 0xCB, 0xC2, 0x87, 0x79, 
   0xB5, 0x2E, 0x15, 0x5C, 0x00, 0x25, 0x3E, 0x1C, 0x7E, 0x66, 0x86, 0xC9, 0xB2, 0xAA, 0x7E, 0x8B, 
   0x4D, 0x1A, 0x5F, 0x01, 0x62, 0xD1, 0x53, 0x77, 0xAB, 0x48, 0x77, 0xC1, 0xA7, 0x7D, 0x91, 0x77, 
   0x7C, 0x6C, 0x34, 0x90, 0x70, 0x2A, 0x5F, 0xA3, 0x24, 0x24, 0x91, 0x36, 0x57, 0x5E, 0x66, 0x60, 
   0x81, 0x90, 0x9B, 0xB5, 0x57, 0xAB, 0xB5, 0x4F, 0x5F, 0x76, 0x4D, 0x4A, 0x5F, 0x61, 0x64, 0xD5, 
   0x26, 0x4C, 0xB7, 0x00, 0x15, 0x16, 0x5E, 0x58, 0x2F, 0x95, 0xE0, 0xC3, 0x64, 0xAD, 0xFF, 0x5D, 
   0x2D, 0xB5, 0x50, 0x69, 0x56, 0x5F, 0x51, 0x8B, 0x46, 0x3F, 0x68, 0x3E, 0x7F, 0x95, 0x75, 0xB1, 
   0x9A, 0x3B, 0x6F, 0x83, 0x03, 0x00, 0x72, 0x55, 0x14, 0x7D, 0x9B, 0xC3, 0x88, 0x94, 0xEB, 0x76, 
   0x08, 0x48, 0x93, 0x00, 0x00, 0x88, 0x69, 0x46, 0x81, 0x82, 0xAF, 0x9C, 0x5B, 0x82, 0x3A, 0x3D, 
   0x21, 0x6E, 0x38, 0x3E, 0x92, 0x34, 0xA2, 0x78, 0x91, 0xAE, 0xAD, 0xB2, 0x7D, 0xD9, 0x58, 0x34, 
   0x8A, 0x00, 0x2B, 0x0F, 0x00, 0x2C, 0x2C, 0x58, 0x47, 0x9E, 0xC8, 0xAC, 0xE1, 0x83, 0xCF, 0xBF, 
   0x00, 0x3E, 0x61, 0x00, 0x00, 0x0C, 0x98, 0x57, 0x9D, 0xEA, 0xFF, 0xD5, 0x4D, 0xB8, 0xEB, 0x00, 
   0x00, 0x96, 0x23, 0x00, 0x0E, 0x25, 0x4C, 0x25, 0x3B, 0x8A, 0x9C, 0x7E, 0x99, 0xF1, 0xD5, 0x8E, 
   0xCB, 0x91, 0x96, 0x9F, 0x00, 0x1B, 0x4B, 0x00, 0x0F, 0x3E, 0x60, 0x84, 0xA6, 0x83, 0x67, 0xAF, 
   0x96, 0x71, 0x57, 0x2B, 0xA1, 0x9E, 0x21, 0x80, 0xDE, 0xDC, 0xC6, 0xCC, 0x89, 0x6C, 0xB0, 0x00, 
   0x00, 0x3A, 0x00, 0x75, 0x49, 0x6D, 0xED, 0xB0, 0xB2, 0x5E, 0xB6, 0x5B, 0x3D, 0x80, 0x08, 0x72, 
   0x7D, 0x23, 0x11, 0x43, 0x42, 0x2A, 0x5B, 0x82, 0xCC, 0xB8, 0x82, 0xAF, 0xB3, 0x4D, 0x3A, 0x78, 
   0x1D, 0x2C, 0x8B, 0x3E, 0x55, 0x34, 0x29, 0x79, 0x58, 0x53, 0x69, 0xE3, 0x7D, 0x80, 0xB6, 0x81, 
   0xA0, 0x64, 0x56, 0x84, 0x77, 0x0E, 0x1E, 0x64, 0x33, 0x00, 0x6E, 0x3F, 0x22, 0x7E, 0x3C, 0x7D, 
   0x46, 0x4F, 0xA9, 0x5F, 0x6E, 0x82, 0xC7, 0x79, 0x4C, 0xBB, 0x3E, 0x7C, 0x52, 0x1A, 0x2A, 0x2E, 
   0x3C, 0x00, 0x79, 0x3E, 0x6A, 0x8C, 0x73, 0xAC, 0x4B, 0x7A, 0x73, 0xBE, 0x4B, 0x38, 0xCF, 0x21, 
   0x4D, 0x3E, 0x3D, 0x52, 0x7A, 0x6A, 0x69, 0x73, 0x36, 0x69, 0x4D, 0x31, 0x58, 0x9E, 0x5F, 0x41, 
   0xA4, 0x4E, 0x52, 0x54, 0x43, 0x6F, 0x5A, 0x55, 0x52, 0x8E, 0x39, 0x47, 0x84, 0x2F, 0x4F, 0x54, 
   0x5E, 0x74, 0x90, 0x92, 0x9C, 0xFF, 0x4C, 0x67, 0x87, 0x1C, 0x2C, 0x12, 0x32, 0x3C, 0x82, 0x3F, 
   0x7C, 0xA0, 0x79, 0x6B, 0x84, 0x56, 0x3D, 0x6D, 0x27, 0x53, 0x5D, 0x3D, 0x6F, 0xAD, 0x59, 0x3B, 
   0xBC, 0x27, 0x58, 0x3D, 0x4F, 0x6F, 0x5D, 0x61, 0x4D, 0x96, 0x4F, 0x63, 0x5A, 0x4E, 0x4C, 0x8E, 
   0x10, 0x15, 0xA1, 0x39, 0x68, 0x58, 0x90, 0xE6, 0xB3, 0x72, 0x50, 0xA7, 0x00, 0x00, 0x24, 0x27, 
   0x5B, 0x5D, 0x8F, 0xF0, 0xC5, 0x67, 0x5F, 0x9D, 0x32, 0x00, 0x5D, 0x1A, 0x22, 0x72, 0x32, 0x5E, 
   0x67, 0x62, 0x9A, 0x6E, 0x69, 0x84, 0xAE, 0x4D, 0x50, 0x8C, 0x36, 0x38, 0x48, 0x5D, 0x5A, 0xA8, 
   0x7E, 0x76, 0xEA, 0x21, 0x43, 0x37, 0x31, 0x53, 0x29, 0x4D, 0x6F, 0xAB, 0x37, 0x4C, 0x6F, 0x2D, 
   0x14, 0x5A, 0x4C, 0x3F, 0x95, 0x75, 0xD0, 0xA2, 0x86, 0x90, 0x80, 0x45, 0x21, 0x84, 0x32, 0x40, 
   0x78, 0x31, 0x39, 0x7E, 0x37, 0x20, 0x73, 0x5B, 0x63, 0x69, 0x79, 0xA6, 0x92, 0x56, 0xB6, 0xC5, 
   0x21, 0x3B, 0x6D, 0x32, 0x00, 0x27, 0x60, 0x5A, 0x9E, 0x4A, 0x7E, 0x8D, 0x2E, 0x31, 0x55, 0x51, 
   0x66, 0x83, 0x69, 0x9B, 0xA1, 0x0B, 0x4C, 0x4D, 0x68, 0x46, 0x78, 0xCE, 0xB2, 0xE0, 0x4D, 0x77, 
   0xCC, 0x00, 0x1F, 0x24, 0x06, 0x05, 0x00, 0x72, 0x5B, 0xCC, 0xAF, 0xE9, 0xFF, 0x6B, 0xDD, 0x8B, 
   0x40, 0x0C, 0x15, 0x00, 0x00, 0x73, 0x36, 0x9C, 0x8A, 0xA0, 0xFF, 0x6F, 0xB7, 0x76, 0x9E, 0x36, 
   0x0C, 0x8E, 0x00, 0x54, 0x8D, 0x40, 0x7D, 0xC8, 0xC0, 0x88, 0x36, 0x61, 0x38, 0x25, 0x3D, 0x23, 
   0x9F, 0x62, 0xC4, 0xA4, 0x3A, 0xB8, 0xBD, 0x46, 0x0B, 0xC6, 0x32, 0x21, 0x5C, 0x5D, 0x73, 0x33, 
   0x9E, 0x98, 0x7E, 0x44, 0x71, 0xD6, 0x49, 0x71, 0xAD, 0x98, 0x92, 0x61, 0x8A, 0x74, 0x54, 0x09, 
   0x27, 0xA3, 0x24, 0x32, 0x81, 0x58, 0x73, 0x49, 0x44, 0xA2, 0x9A, 0x9B, 0x63, 0xBD, 0x8E, 0x52, 
   0x93, 0x00, 0x6E, 0x63, 0x27, 0x96, 0x73, 0xC7, 0x5C, 0x6D, 0x70, 0x3E, 0x5E, 0x00, 0x3A, 0x99, 
   0x21, 0x70, 0xB1, 0xBF, 0xCD, 0x99, 0xA3, 0xBA, 0x5E, 0x3F, 0x0B, 0x52, 0x13, 0x03, 0x8C, 0x00, 
   0x6C, 0xA9, 0x90, 0x9D, 0x82, 0xAF, 0x6C, 0x6B, 0x39, 0x61, 0x86, 0x3F, 0x6D, 0x7A, 0x85, 0x7E, 
   0x75, 0x9B, 0x73, 0x8C, 0x48, 0x6D, 0x76, 0x08, 0x61, 0x77, 0x47, 0x6C, 0xB5, 0xA9, 0x56, 0x65, 
   0x53, 0x89, 0x6B, 0x3B, 0x83, 0xB4, 0x4C, 0x43, 0x75, 0x58, 0x54, 0x57, 0x64, 0x76, 0x69, 0x64, 
   0x6B, 0xAF, 0x4D, 0x7C, 0x9A, 0x58, 0x77, 0x6D, 0x52, 0x5A, 0x73, 0x4D, 0x66, 0xA7, 0x5E, 0x7D, 
   0x9B, 0x6A, 0x93, 0x50, 0x5A, 0x4E, 0x73, 0x54, 0x59, 0xA8, 0x65, 0x6B, 0xA7, 0x3C, 0x82, 0x4B, 
   0x3C, 0x65, 0x41, 0x7B, 0x4E, 0xC6, 0x7F, 0x82, 0xC2, 0x1D, 0x82, 0x55, 0x2D, 0x6A, 0x71, 0x9A, 
   0x63, 0xAA, 0x56, 0x52, 0x8E, 0x17, 0x58, 0x7E, 0x8F, 0x81, 0x8F, 0x88, 0x80, 0xA1, 0x20, 0x5C, 
   0x9A, 0x2A, 0x1C, 0x9E, 0x90, 0x6C, 0x63, 0x51, 0xA0, 0x6D, 0x00, 0x39, 0x79, 0x6A, 0x4F, 0x86, 
   0xB4, 0x8D, 0x9E, 0x00, 0x3E, 0x6B, 0x63, 0x6E, 0xB6, 0x6E, 0x7F, 0xD7, 0x25, 0x4A, 0x5D, 0xB7, 
   0x7C, 0x6D, 0x91, 0xA1, 0xE9, 0x00, 0x43, 0x70, 0x00, 0x52, 0x2B, 0x70, 0x52, 0xAF, 0x66, 0x6A, 
   0xD2, 0x2E, 0x5B, 0x5A, 0x7E, 0xAC, 0x77, 0x9A, 0xC1, 0xEE, 0x3D, 0x56, 0x86, 0x13, 0x00, 0x24, 
   0x5D, 0x37, 0x8A, 0x69, 0xA1, 0x97, 0x15, 0x87, 0x77, 0x61, 0x3F, 0xAB, 0x79, 0xAA, 0x95, 0x62, 
   0x7B, 0x9B, 0x55, 0x1F, 0xAA, 0x27, 0x7A, 0x76, 0x6B, 0x8D, 0x75, 0x80, 0x87, 0x86, 0x28, 0x80, 
   0xC5, 0x1B, 0x66, 0xA2, 0x81, 0x46, 0x73, 0x43, 0x1E, 0x83, 0x31, 0x4D, 0x84, 0x5A, 0xA4, 0xAC, 
   0x87, 0x9F, 0xB6, 0x51, 0x42, 0x8B, 0x00, 0x40, 0x40, 0x20, 0x2A, 0x47, 0xC8, 0x54, 0xE8, 0x90, 
   0x9B, 0xC6, 0x00, 0x9C, 0x1B, 0x24, 0x31, 0x72, 0xBE, 0x7A, 0xF1, 0x8E, 0xD3, 0xAC, 0x0B, 0x58, 
   0x6F, 0x00, 0x00, 0x65, 0x22, 0x22, 0x2D, 0x9F, 0xAF, 0x6A, 0x9B, 0xB7, 0xFF, 0x44, 0x5A, 0x9B, 
   0x1F, 0x2A, 0x3E, 0x19, 0x3C, 0x88, 0x2F, 0x74, 0x54, 0xC1, 0xC6, 0xE6, 0xD2, 0x9C, 0xFF, 0x06, 
   0x2D, 0x47, 0x00, 0x30, 0x00, 0x45, 0x5E, 0x76, 0xA4, 0x50, 0xBA, 0x9E, 0x90, 0xDA, 0x35, 0x85, 
   0xBE, 0x00, 0x14, 0x65, 0x8A, 0x9C, 0x68, 0x90, 0x9B, 0x82, 0x1E, 0x00, 0x76, 0x04, 0x35, 0x56, 
   0x69, 0xF6, 0x3A, 0xCD, 0xB4, 0xEB, 0x9D, 0x82, 0xFF, 0x2B, 0x59, 0x83, 0x1B, 0x26, 0x00, 0x1A, 
   0x15, 0x6E, 0x5B, 0x5E, 0xBB, 0x79, 0xC2, 0x9B, 0x47, 0xCC, 0x8F, 0x52, 0x2F, 0x77, 0x5D, 0x00, 
   0x82, 0x72, 0x9E, 0xC5, 0x4D, 0x9E, 0x90, 0x00, 0x47, 0x44, 0x4D, 0x4C, 0x6D, 0xAE, 0x90, 0xDF, 
   0x68, 0x67, 0x99, 0x00, 0x38, 0x51, 0x1B, 0x38, 0x39, 0x4C, 0x62, 0x69, 0x61, 0x86, 0xBC, 0xB8, 
   0x80, 0xB2, 0x71, 0x9A, 0x8E, 0x27, 0x61, 0xAB, 0x1C, 0x1D, 0x56, 0x37, 0x0E, 0x0F, 0x05, 0x00, 
   0x6B, 0x0A, 0x4B, 0x65, 0xB5, 0xD4, 0x87, 0xC7, 0xEA, 0xFF, 0x51, 0x24, 0xB6, 0x00, 0x09, 0x00, 
   0x00, 0x4D, 0x00, 0x64, 0x55, 0xB3, 0x79, 0x96, 0xE0, 0x6F, 0x84, 0x82, 0x41, 0x49, 0xA3, 0x45, 
   0x42, 0xA5, 0x5A, 0x58, 0x42, 0x26, 0x52, 0x57, 0x36, 0x4D, 0x7A, 0x5F, 0x53, 0x6B, 0x43, 0x5A, 
   0x9B, 0x3E, 0x81, 0xAD, 0x6B, 0x4D, 0x72, 0x2C, 0x2F, 0x59, 0x22, 0x30, 0x16, 0x7F, 0x55, 0x86, 
   0x80, 0xC4, 0xFF, 0x30, 0x63, 0xA1, 0x40, 0x11, 0x75, 0x61, 0x65, 0x54, 0x1D, 0x5F, 0x00, 0x50, 
   0x49, 0xCA, 0x84, 0x72, 0xFF, 0x44, 0x72, 0x19, 0x11, 0x38, 0x00, 0x5B, 0x3C, 0xD0, 0x78, 0x69, 
   0xFF, 0x43, 0x5E, 0x71, 0x0A, 0x42, 0x00, 0x5B, 0x64, 0x71, 0x85, 0x53, 0xFF, 0x68, 0x5A, 0x97, 
   0x38, 0x71, 0x39, 0x2B, 0x54, 0x48, 0x37, 0x4F, 0x77, 0x66, 0x77, 0xAD, 0x67, 0x56, 0x6B, 0x40, 
   0x62, 0x83, 0x45, 0x6D, 0xDE, 0x5B, 0x7C, 0x7B, 0x33, 0x24, 0x3A, 0x33, 0x19, 0x56, 0x50, 0x6B, 
   0xAE, 0x68, 0x8A, 0xA9, 0x5D, 0x51, 0x54, 0x46, 0x5B, 0x8C, 0x62, 0x54, 0xCE, 0x34, 0x4F, 0x3D, 
   0x23, 0x60, 0x10, 0x84, 0x66, 0xE5, 0x61, 0x6A, 0xFB, 0x15, 0x3B, 0x0E, 0x20, 0x19, 0x13, 0x66, 
   0x49, 0xAA, 0x5D, 0xA2, 0xDA, 0x69, 0x86, 0x68, 0x36, 0x5D, 0x34, 0x3A, 0x4F, 0x85, 0x61, 0x52, 
   0xCA, 0x4E, 0x19, 0x69, 0x20, 0x2E, 0x56, 0x3E, 0x9E, 0x73, 0x67, 0xD3, 0xA6, 0x7E, 0x58, 0x73, 
   0x5A, 0x0A, 0x67, 0x0F, 0x36, 0x99, 0x15, 0x3E, 0x71, 0x57, 0x4F, 0x3E, 0x92, 0xDB, 0x8F, 0x43, 
   0x97, 0x8C, 0x0C, 0x00, 0x78, 0x8B, 0x52, 0xAC, 0xC3, 0xD5, 0xA6, 0x20, 0x5B, 0x81, 0x00, 0x03, 
   0x61, 0x43, 0x4C, 0x3F, 0x36, 0x56, 0x4A, 0x46, 0x3F, 0xB1, 0x99, 0xAA, 0xFF, 0x7C, 0xD8, 0x9C, 
   0x14, 0x37, 0x65, 0x3C, 0x15, 0x4C, 0x4F, 0xA5, 0x5E, 0x90, 0xED, 0xC7, 0xA5, 0x2E, 0xC3, 0x29, 
   0x00, 0x7D, 0x00, 0x65, 0x6E, 0x46, 0xA6, 0x66, 0xB5, 0x90, 0xB4, 0x78, 0x6C, 0x6F, 0x27, 0x21, 
   0x00, 0x63, 0x39, 0xA9, 0x68, 0xB8, 0xFF, 0x00, 0x85, 0x7E, 0x22, 0x35, 0x5D, 0xCC, 0x62, 0x77, 
   0x9A, 0x75, 0x5A, 0x43, 0x7B, 0x79, 0x09, 0x54, 0xC4, 0x75, 0x60, 0xB3, 0xAD, 0xAF, 0x5B, 0x2D, 
   0x58, 0x54, 0x00, 0x46, 0xA3, 0x83, 0x73, 0x81, 0xB0, 0x6D, 0x4E, 0x1F, 0x5C, 0x9F, 0x00, 0x4B, 
   0xBD, 0x67, 0x53, 0x88, 0xFE, 0xA9, 0x75, 0x85, 0x9D, 0x7F, 0x00, 0x40, 0x68, 0x12, 0x39, 0x5E, 
   0x65, 0x56, 0x99, 0x6A, 0x60, 0xB1, 0xBB, 0xC2, 0x83, 0x6F, 0xB4, 0x6B, 0x05, 0x17, 0x91, 0x2B, 
   0x0A, 0x6F, 0x62, 0x73, 0x70, 0x76, 0xA4, 0xB5, 0x82, 0x78, 0x87, 0x22, 0x56, 0x53, 0x4A, 0x67, 
   0x8C, 0x84, 0x90, 0x92, 0x6D, 0x6E, 0x76, 0x6B, 0x6D, 0x5F, 0x42, 0x50, 0x7C, 0x20, 0x84, 0xB6, 
   0xBE, 0x9F, 0x94, 0x56, 0x42, 0x65, 0x00, 0x31, 0x6F, 0x69, 0x82, 0x7B, 0xD2, 0x9A, 0xBB, 0x49, 
   0x5B, 0x78, 0x20, 0x61, 0x67, 0x48, 0x6D, 0x8A, 0x8D, 0x67, 0x91, 0x6A, 0x83, 0x7A, 0x2B, 0x65, 
   0x7F, 0x42, 0x4E, 0x69, 0x7C, 0x87, 0xA9, 0x71, 0x7C, 0xBF, 0x3D, 0x49, 0x57, 0x3E, 0x4F, 0x5B, 
   0x95, 0x95, 0x79, 0x9F, 0xA6, 0x71, 0x4C, 0x54, 0xB8, 0x21, 0x30, 0xEA, 0x4E, 0x52, 0x59, 0x56, 
   0x81, 0x0D, 0x52, 0x66, 0x93, 0x96, 0xB0, 0xC9, 0x5B, 0x80, 0xA2, 0x09, 0x06, 0x6D, 0x42, 0x40, 
   0x78, 0x61, 0xBA, 0xA1, 0x8F, 0xA3, 0xC2, 0x5F, 0x45, 0x70, 0x34, 0x20, 0x46, 0x18, 0x48, 0x96, 
   0x32, 0x8F, 0xC0, 0xBE, 0x86, 0x60, 0x5D, 0x8D, 0x8F, 0x5D, 0x9D, 0x84, 0x7E, 0x8A, 0xA7, 0x49, 
   0x65, 0xAC, 0x59, 0x4C, 0x67, 0x64, 0x78, 0x7D, 0x74, 0x71, 0x9F, 0x5C, 0x5F, 0x9A, 0x44, 0x58, 
   0x88, 0x3E, 0x6F, 0x92, 0x65, 0x70, 0x76, 0x49, 0x8D, 0x9E, 0x60, 0x75, 0xBF, 0x4A, 0x35, 0x63, 
   0x4B, 0x3C, 0x2C, 0x84, 0xA4, 0xE0, 0x7D, 0xA4, 0xFF, 0x16, 0x41, 0x55, 0x54, 0x1E, 0x24, 0x70, 
   0x85, 0x96, 0x3E, 0x76, 0xA9, 0x5B, 0x4A, 0x9A, 0x89, 0x9F, 0x9A, 0x4A, 0x7C, 0x99, 0x48, 0x31, 
   0x76, 0x57, 0x52, 0x9C, 0x72, 0xAC, 0x96, 0x58, 0x9D, 0x69, 0x00, 0x05, 0xC4, 0x2A, 0x00, 0xA1, 
   0xA3, 0x9E, 0x87, 0x7C, 0xD9, 0x5C, 0x14, 0x38, 0x46, 0x19, 0x00, 0x9E, 0x3E, 0x54, 0xC2, 0x6F, 
   0xB9, 0x84, 0x82, 0x82, 0x95, 0x80, 0x7A, 0x94, 0x38, 0x3F, 0x71, 0x23, 0x44, 0x87, 0x12, 0x8D, 
   0x8C, 0x47, 0x4F, 0x76, 0x9F, 0x4F, 0xC0, 0x5B, 0xA3, 0x8B, 0x2C, 0x63, 0x24, 0x3C, 0x17, 0x86, 
   0x6A, 0x2F, 0xB0, 0x70, 0xAA, 0x69, 0x1A, 0xAB, 0xAE, 0x05, 0x11, 0xA3, 0x80, 0x24, 0x42, 0x8E, 
   0xD6, 0x98, 0x56, 0xAF, 0xCB, 0x44, 0x46, 0x86, 0xA8, 0x54, 0x69, 0x44, 0x43, 0x75, 0x00, 0x28, 
   0x92, 0x28, 0x9D, 0x8D, 0xBC, 0xAB, 0xBF, 0xAC, 0x67, 0xB7, 0x28, 0x3A, 0x1B, 0x05, 0x75, 0x1E, 
   0x51, 0x8F, 0xFC, 0xDB, 0xDE, 0xFF, 0xA9, 0x89, 0xA1, 0x00, 0x00, 0x61, 0x00, 0x00, 0x3A, 0x7B, 
   0x8C, 0x51, 0x8F, 0x96, 0xD1, 0x40, 0x54, 0xA1, 0x19, 0x7C, 0x6E, 0x49, 0x88, 0x80, 0xBC, 0x6C, 
   0xB9, 0x81, 0x8C, 0xC3, 0x26, 0x98, 0x80, 0x22, 0x22, 0x33, 0x28, 0x05, 0x70, 0x51, 0x79, 0x8E, 
   0x91, 0xAD, 0xAA, 0x5C, 0x57, 0xAE, 0x06, 0x33, 0x67, 0x23, 0x55, 0x17, 0x70, 0x6D, 0x64, 0x5C, 
   0x73, 0xE0, 0x89, 0x6E, 0xE0, 0x85, 0xAA, 0x80, 0x19, 0x94, 0x51, 0x00, 0x00, 0x3D, 0x1C, 0x00, 
   0x22, 0x54, 0x5E, 0x8D, 0x69, 0xA8, 0xD5, 0x7C, 0x8E, 0x92, 0x6F, 0x5F, 0xB1, 0x4F, 0x52, 0x8A, 
   0x1F, 0x6D, 0x00, 0x2A, 0x6C, 0x40, 0x42, 0x39, 0xD8, 0x4B, 0x55, 0xA2, 0x64, 0x6C, 0x5E, 0x86, 
   0x4F, 0x8F, 0x40, 0x42, 0x8D, 0x27, 0x58, 0x53, 0x42, 0x3C, 0x7B, 0x49, 0x66, 0x66, 0x55, 0x8E, 
   0x80, 0x60, 0x60, 0xD6, 0x32, 0x37, 0x96, 0x27, 0x42, 0x22, 0x61, 0x65, 0x60, 0x5C, 0x71, 0xB2, 
   0x40, 0x4A, 0x92, 0x4B, 0x6D, 0x8C, 0x3A, 0x73, 0x69, 0x41, 0x45, 0x6E, 0x8A, 0x66, 0x96, 0x50, 
   0x49, 0x7A, 0x16, 0x4A, 0x54, 0x28, 0x8F, 0xA4, 0x73, 0x6D, 0x9D, 0x5D, 0x3E, 0x57, 0x40, 0x48, 
   0x73, 0x4A, 0x70, 0x9A, 0x3E, 0x4E, 0x78, 0x22, 0x43, 0x4C, 0x4C, 0x3E, 0xA8, 0x86, 0x78, 0xB3, 
   0x6D, 0x9F, 0x61, 0x25, 0x4C, 0x6F, 0x00, 0x00, 0x2B, 0x15, 0x49, 0x3B, 0xA7, 0xF7, 0xFF, 0x86, 
   0x80, 0xBE, 0x23, 0x00, 0x3F, 0x28, 0x38, 0x8C, 0x5C, 0x78, 0x75, 0x6F, 0x74, 0x5F, 0x58, 0x4B, 
   0x99, 0x3A, 0x50, 0xA5, 0x34, 0x60, 0x82, 0x61, 0x60, 0x96, 0x4A, 0x60, 0x8C, 0x2D, 0x55, 0x2F, 
   0x50, 0x4A, 0x2C, 0x68, 0x7D, 0xD4, 0x68, 0x54, 0xC5, 0x45, 0x16, 0x4B, 0x28, 0x4A, 0x54, 0x44, 
   0x9B, 0x98, 0x72, 0x96, 0x82, 0x35, 0x1D, 0x6C, 0x4C, 0x50, 0x7F, 0x63, 0x8E, 0x8C, 0x57, 0x45, 
   0x8D, 0x3F, 0x35, 0x98, 0x49, 0x9D, 0x80, 0x37, 0x81, 0x8E, 0x32, 0x4B, 0x65, 0x5A, 0x38, 0x43, 
   0x5A, 0x53, 0x99, 0x43, 0x49, 0xBC, 0x1D, 0x1F, 0x34, 0x58, 0x95, 0x7F, 0x71, 0xAA, 0x8C, 0x2F, 
   0x55, 0x61, 0x6F, 0x49, 0xA2, 0xC4, 0x92, 0xED, 0x43, 0x67, 0xB0, 0x00, 0x42, 0x27, 0x2D, 0x3C, 
   0x00, 0x47, 0x28, 0x76, 0x8E, 0x81, 0xFF, 0x57, 0xB7, 0x9F, 0x36, 0x40, 0x00, 0x4E, 0x00, 0xD2, 
   0x61, 0xA2, 0xD3, 0x68, 0xFF, 0x50, 0x84, 0x66, 0x7D, 0x5F, 0x00, 0xAC, 0x00, 0x74, 0xA6, 0x52, 
   0x70, 0xC0, 0x9C, 0x4F, 0x50, 0x4C, 0x6C, 0x4E, 0x00, 0x79, 0x8E, 0x81, 0x96, 0x95, 0x9E, 0x82, 
   0x95, 0x1B, 0x15, 0x68, 0x2B, 0x0C, 0x7B, 0x4A, 0xC6, 0xAF, 0x85, 0xDE, 0xBA, 0x6A, 0x2B, 0x8A, 
   0x54, 0x46, 0x60, 0x5F, 0x69, 0x4E, 0x69, 0x6F, 0x6D, 0x35, 0x76, 0xBF, 0x2A, 0x44, 0xCA, 0x80, 
   0xB1, 0x5B, 0x8C, 0x99, 0x54, 0x73, 0x40, 0xAE, 0x53, 0x44, 0x6F, 0x00, 0x5B, 0x3D, 0x15, 0x7F, 
   0xA5, 0xCF, 0x8C, 0xC2, 0xA3, 0x49, 0x71, 0x0D, 0x77, 0x75, 0x3E, 0xA9, 0x7F, 0x65, 0x5D, 0x68, 
   0x4F, 0x1C, 0x5E, 0x56, 0x56, 0x83, 0x52, 0x77, 0xBE, 0x7C, 0xB7, 0xC2, 0x92, 0xC0, 0x3D, 0x3A, 
   0x23, 0x52, 0x1D, 0x10, 0x91, 0x51, 0x7F, 0x99, 0x81, 0x99, 0x99, 0x88, 0x78, 0x76, 0x2D, 0x56, 
   0x76, 0x2E, 0x62, 0x87, 0x96, 0x90, 0xA4, 0x9B, 0x63, 0x76, 0x49, 0x73, 0x49, 0x57, 0x9A, 0x9A, 
   0x22, 0x4E, 0xC8, 0x34, 0x36, 0x66, 0x8A, 0x86, 0x65, 0x4E, 0x77, 0xA4, 0x66, 0x72, 0x83, 0x72, 
   0x7E, 0x7E, 0x45, 0x46, 0x6F, 0x61, 0x74, 0x92, 0x6C, 0xB2, 0xB9, 0x54, 0x6C, 0x64, 0x59, 0x48, 
   0x65, 0x42, 0x53, 0xC1, 0x59, 0x6B, 0xB5, 0x5F, 0x88, 0x4D, 0x2E, 0x61, 0x5D, 0x79, 0x45, 0x91, 
   0xAC, 0xA1, 0x86, 0x4E, 0x9B, 0x65, 0x29, 0x54, 0x99, 0x7C, 0x52, 0xD2, 0x3E, 0x47, 0x87, 0x01, 
   0x60, 0x25, 0xA8, 0xD8, 0x71, 0xAD, 0x93, 0xC3, 0x22, 0x30, 0xAD, 0x00, 0x29, 0x73, 0x61, 0x7B, 
   0x6D, 0xA1, 0xBC, 0xA2, 0x63, 0x8D, 0xAE, 0x4A, 0x4B, 0x9B, 0x85, 0x4F, 0x81, 0x02, 0x4F, 0x41, 
   0x00, 0x1F, 0x64, 0xFF, 0xFF, 0xDC, 0x67, 0x8C, 0x62, 0x6C, 0x97, 0x36, 0x81, 0x8F, 0xD8, 0x14, 
   0x5F, 0xB3, 0x0A, 0x3B, 0x4D, 0xB7, 0x7F, 0xA8, 0xB1, 0xA1, 0xCF, 0x2C, 0x78, 0x7E, 0x56, 0x53, 
   0x71, 0x81, 0x61, 0x98, 0x30, 0x44, 0x97, 0x08, 0x29, 0x63, 0x61, 0x6C, 0x64, 0x97, 0xDB, 0xB6, 
   0x7C, 0x97, 0xA8, 0x3C, 0x34, 0xA3, 0x6E, 0x53, 0xD5, 0x7C, 0x95, 0xA9, 0x08, 0x28, 0x50, 0x1E, 
   0x30, 0x32, 0x59, 0xB0, 0x74, 0x94, 0xA6, 0xD3, 0x51, 0x56, 0xBE, 0x4C, 0x5A, 0x89, 0x79, 0x71, 
   0x7B, 0x8D, 0x66, 0x69, 0x2E, 0xA3, 0x85, 0x2A, 0x98, 0xB9, 0x4A, 0x21, 0x90, 0x44, 0x09, 0xA4, 
   0x02, 0x41, 0x52, 0x5B, 0xA6, 0x30, 0xB1, 0xB3, 0xDC, 0x44, 0x5D, 0xC1, 0x00, 0x50, 0x17, 0x4C, 
   0x46, 0x8A, 0xFF, 0x97, 0xFF, 0x96, 0xA7, 0x94, 0x00, 0x5B, 0x24, 0x00, 0x00, 0x51, 0x65, 0x52, 
   0x88, 0xD5, 0xF4, 0xE0, 0x7A, 0xD0, 0xDA, 0x26, 0x0E, 0x8B, 0x00, 0x00, 0x05, 0x41, 0x4F, 0x2E, 
   0x76, 0x86, 0xC2, 0x71, 0x9E, 0xE1, 0x63, 0x42, 0xB8, 0x00, 0x20, 0x38, 0x00, 0x4B, 0x11, 0xB2, 
   0x9A, 0xC7, 0xFF, 0xCE, 0xFF, 0x9D, 0x7C, 0xAC, 0x00, 0x45, 0x47, 0x00, 0x0A, 0x44, 0x3C, 0x44, 
   0x7E, 0x90, 0xB9, 0xB3, 0x50, 0x5C, 0xBF, 0x42, 0x49, 0x58, 0xA3, 0xF0, 0x4D, 0x7B, 0x89, 0xAA, 
   0x5A, 0x41, 0xE9, 0x45, 0x6B, 0x96, 0x20, 0x7F, 0x1B, 0x51, 0x4F, 0x70, 0x36, 0x53, 0xE2, 0x48, 
   0x76, 0x69, 0x77, 0x82, 0x30, 0x3B, 0x4A, 0x99, 0x3D, 0x00, 0xA3, 0x7D, 0xA2, 0xBB, 0x6D, 0xFF, 
   0xA3, 0x70, 0x66, 0x8A, 0x4A, 0x04, 0x8D, 0x46, 0x44, 0xAC, 0x2C, 0x4F, 0x65, 0x00, 0x40, 0x36, 
   0x45, 0x6F, 0x8C, 0x97, 0xA8, 0x9D, 0x6A, 0x73, 0x9C, 0x41, 0x3E, 0x5D, 0x23, 0x42, 0x47, 0x41, 
   0x4E, 0x8D, 0x70, 0x61, 0xD7, 0x80, 0x8F, 0x91, 0x56, 0x82, 0x55, 0x00, 0x51, 0x65, 0x42, 0x5E, 
   0x71, 0x76, 0x35, 0xA4, 0x32, 0x1F, 0x81, 0x11, 0x28, 0x31, 0x57, 0xA4, 0x55, 0x9C, 0xB1, 0xDF, 
   0x78, 0x70, 0xD8, 0x1F, 0x45, 0x2A, 0x00, 0x26, 0x01, 0x37, 0x2D, 0xAE, 0x8A, 0x95, 0xB1, 0x59, 
   0x8F, 0x5D, 0x4D, 0x44, 0x95, 0x62, 0x26, 0xAB, 0x2D, 0x5F, 0x50, 0x3E, 0x82, 0x67, 0x60, 0x55, 
   0x96, 0x3E, 0x5B, 0x75, 0x1C, 0x50, 0x8C, 0x66, 0x67, 0xA3, 0x61, 0x88, 0xA7, 0x3E, 0x42, 0x5B, 
   0x21, 0x09, 0x53, 0x44, 0x60, 0x4F, 0x63, 0x9B, 0x80, 0x64, 0x7F, 0xC7, 0x63, 0x45, 0xC6, 0x3F, 
   0x60, 0x3C, 0x0B, 0x50, 0x15, 0x40, 0x1E, 0xF6, 0x7B, 0x9C, 0xFF, 0x64, 0x8B, 0x29, 0x2F, 0x2E, 
   0x00, 0x40, 0x3D, 0x69, 0x67, 0x66, 0xFF, 0x4B, 0x46, 0xC1, 0x23, 0x74, 0x00, 0x79, 0x9A, 0x84, 
   0x72, 0x53, 0xF0, 0x2C, 0x08, 0x39, 0x31, 0x58, 0x32, 0x3D, 0x5A, 0x8A, 0x34, 0x61, 0x8E, 0x85, 
   0x9A, 0xCD, 0x51, 0x4A, 0x71, 0x01, 0x00, 0x33, 0x52, 0x93, 0xAB, 0x81, 0xC2, 0xB2, 0x59, 0x59, 
   0x50, 0x40, 0x1C, 0x71, 0x3E, 0x4E, 0xEC, 0x3D, 0x5F, 0x88, 0x32, 0x55, 0x00, 0x5A, 0x73, 0x6F, 
   0x61, 0x73, 0xF9, 0x23, 0x2E, 0x18, 0x36, 0x3A, 0x42, 0x92, 0x86, 0xFF, 0x6F, 0xA9, 0xBA, 0x28, 
   0x5D, 0x1B, 0x10, 0x22, 0x1F, 0x4F, 0x3D, 0x88, 0x5C, 0x4F, 0xC4, 0x5D, 0x3A, 0x81, 0x41, 0x54, 
   0x59, 0x57, 0xB7, 0xA4, 0x56, 0x9F, 0xCA, 0x4E, 0x45, 0x5B, 0x2A, 0x00, 0x2B, 0x30, 0x3B, 0x91, 
   0x32, 0x5B, 0x7C, 0x51, 0x5F, 0x51, 0x80, 0x8F, 0xAE, 0x37, 0x6E, 0xAA, 0x00, 0x1A, 0x4B, 0x80, 
   0x73, 0x85, 0xDB, 0xF1, 0xCF, 0x27, 0x87, 0xA6, 0x00, 0x00, 0x69, 0x4B, 0x36, 0x23, 0x53, 0x67, 
   0x4D, 0x67, 0x6B, 0xCE, 0x57, 0x95, 0xAE, 0x68, 0x72, 0x7A, 0x1E, 0x06, 0x6D, 0x32, 0x21, 0x2B, 
   0x7A, 0xE7, 0xB1, 0xCB, 0xF9, 0xE7, 0x78, 0x65, 0x80, 0x00, 0x00, 0x6C, 0x00, 0x20, 0x8C, 0x75, 
   0xCC, 0x74, 0xB5, 0x7D, 0x94, 0x59, 0x16, 0x71, 0x0D, 0x60, 0x35, 0x0D, 0x8F, 0xC0, 0x86, 0x73, 
   0xED, 0x61, 0x5B, 0x5B, 0x19, 0x23, 0x00, 0xC4, 0x64, 0xA0, 0x74, 0xC7, 0xCB, 0x00, 0x8D, 0x92, 
   0x46, 0x25, 0x84, 0x87, 0x62, 0x65, 0x9D, 0x69, 0x43, 0x18, 0x54, 0x7E, 0x08, 0x61, 0xB9, 0x88, 
   0x95, 0xB8, 0xFF, 0xB6, 0x66, 0x45, 0x58, 0x3D, 0x00, 0x33, 0xB3, 0x60, 0x44, 0x7A, 0xD9, 0x6D, 
   0x42, 0x45, 0x80, 0xAA, 0x00, 0x5F, 0xB6, 0x6E, 0x5A, 0x77, 0x9D, 0x9F, 0x75, 0x74, 0x92, 0x7F, 
   0x55, 0x51, 0x52, 0x1F, 0x22, 0x6B, 0x05, 0x4B, 0xC2, 0x70, 0x77, 0xA7, 0xB1, 0xBD, 0x7D, 0x82, 
   0xA9, 0x64, 0x35, 0x1D, 0x63, 0x11, 0x05, 0x6F, 0x40, 0x7F, 0x8D, 0x8C, 0x99, 0x9E, 0x6B, 0x78, 
   0x82, 0x3E, 0x56, 0x70, 0x67, 0x51, 0x87, 0x6D, 0x96, 0x8E, 0x99, 0x95, 0x93, 0x46, 0x33, 0x60, 
   0x00, 0x42, 0x71, 0x57, 0x86, 0xB6, 0xB4, 0x76, 0x9A, 0x59, 0x54, 0x60, 0x00, 0x4F, 0x4A, 0x67, 
   0x7A, 0x8B, 0xB9, 0xA3, 0xCC, 0x7A, 0x9D, 0x93, 0x3A, 0x50, 0x4E, 0x44, 0x54, 0x7C, 0x71, 0x64, 
   0xA5, 0x70, 0x6A, 0xAB, 0x25, 0x59, 0x65, 0x32, 0x61, 0x4E, 0x9B, 0x85, 0xBB, 0xB2, 0x9C, 0xA0, 
   0x38, 0x5C, 0x77, 0x1E, 0x4A, 0xB4, 0x71, 0x70, 0x73, 0x4A, 0x76, 0x24, 0x3A, 0x6B, 0xA4, 0xA7, 
   0x7B, 0xFF, 0x57, 0x5E, 0x73, 0x12, 0x52, 0x44, 0x5C, 0x48, 0x99, 0x7F, 0x93, 0x8A, 0x5D, 0x8E, 
   0x96, 0x51, 0x59, 0x80, 0x62, 0x41, 0x76, 0x71, 0x8B, 0xD6, 0x1C, 0x80, 0xB2, 0x40, 0x31, 0x5A, 
   0xA3, 0x76, 0x47, 0x78, 0x93, 0xCF, 0x64, 0x71, 0x8A, 0x74, 0x71, 0x84, 0x1F, 0x66, 0x4E, 0x47, 
   0x88, 0x96, 0x77, 0x81, 0xE3, 0x5D, 0x59, 0x99, 0x68, 0x74, 0x7B, 0x8D, 0x9B, 0x95, 0x4B, 0x7B, 
   0x9F, 0x1F, 0x3E, 0x76, 0x24, 0x0F, 0x85, 0x36, 0x34, 0x6E, 0x4B, 0x62, 0x49, 0x81, 0xC7, 0xA8, 
   0x99, 0xEA, 0xFF, 0x65, 0x6F, 0x96, 0x41, 0x14, 0x1C, 0x71, 0x34, 0xB9, 0x53, 0x8F, 0xBD, 0x08, 
   0x58, 0x45, 0x69, 0x65, 0x56, 0x4E, 0x8E, 0x98, 0x40, 0x66, 0xBD, 0x86, 0x34, 0xB7, 0x91, 0xA7, 
   0x93, 0x55, 0xD4, 0x6F, 0x45, 0x53, 0x85, 0x2B, 0x21, 0xBD, 0x4B, 0x6E, 0x82, 0x39, 0x67, 0x4E, 
   0x08, 0x2F, 0x5F, 0x50, 0x27, 0xC1, 0x97, 0xBF, 0x99, 0x6A, 0xEE, 0x5B, 0x52, 0x36, 0x94, 0x4A, 
   0x39, 0xA0, 0x38, 0x71, 0x89, 0x5E, 0x55, 0x93, 0x36, 0x61, 0x86, 0x21, 0x57, 0x42, 0x62, 0x65, 
   0x82, 0x86, 0xA5, 0xEA, 0x74, 0xB9, 0x83, 0x2D, 0x2C, 0x6A, 0x3B, 0x01, 0x8A, 0x3B, 0x73, 0x4D, 
   0x5E, 0xB8, 0x88, 0x64, 0x4C, 0xF4, 0x41, 0x0D, 0x6B, 0x3B, 0x76, 0x21, 0x27, 0xAD, 0xA0, 0x33, 
   0x49, 0x99, 0xED, 0x66, 0x96, 0xBE, 0xC1, 0xEC, 0x00, 0x5A, 0xB0, 0x00, 0x63, 0x45, 0x8E, 0x6C, 
   0x5F, 0x58, 0x00, 0x99, 0x33, 0x50, 0x63, 0x4D, 0xD3, 0x67, 0x7E, 0xA3, 0xFE, 0xF9, 0xC1, 0xFF, 
   0x5D, 0x6A, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x70, 0x7A, 0xB6, 0x8B, 0xC6, 0xA0, 0xC7, 0x21, 
   0x4E, 0xB5, 0x00, 0x19, 0x30, 0x79, 0x44, 0x4F, 0xA5, 0x87, 0xDB, 0x78, 0x9D, 0xD1, 0x2C, 0xA9, 
   0x6E, 0x53, 0x9F, 0x4A, 0x7F, 0x2F, 0xA4, 0x76, 0x48, 0xAE, 0x29, 0x8B, 0x89, 0x1B, 0x5D, 0x6A, 
   0x11, 0x35, 0x57, 0x42, 0x68, 0x69, 0xC1, 0xA7, 0x8D, 0x6A, 0x61, 0xCC, 0x00, 0x2B, 0xAE, 0x37, 
   0x47, 0x39, 0x38, 0x75, 0x2D, 0x24, 0x3E, 0xA1, 0x6B, 0x57, 0xA4, 0x9F, 0xC9, 0x94, 0x6F, 0xA3, 
   0xDC, 0x1B, 0x0E, 0x71, 0x0D, 0x00, 0x0C, 0x2A, 0x41, 0x50, 0x43, 0x8B, 0x7C, 0x67, 0xAA, 0x9C, 
   0x84, 0x87, 0xE7, 0x4F, 0x35, 0x9F, 0x26, 0x4A, 0x12, 0x2B, 0x5B, 0x17, 0x3E, 0x4A, 0xB4, 0x51, 
   0x73, 0xBC, 0x7B, 0x79, 0x5D, 0x53, 0x62, 0x6E, 0x4C, 0x55, 0x9C, 0x4A, 0x43, 0x85, 0x21, 0x43, 
   0x8A, 0x4F, 0x45, 0x4B, 0x6D, 0x8B, 0x64, 0x67, 0x96, 0xEE, 0x33, 0x3E, 0xBA, 0x1B, 0x2B, 0x3D, 
   0x54, 0x5D, 0x29, 0x22, 0x4E, 0x47, 0x6E, 0x5B, 0xB2, 0x85, 0x78, 0xDD, 0x1E, 0x5C, 0x4A, 0x1E, 
   0x3A, 0x66, 0x7A, 0x62, 0xBC, 0x5E, 0x69, 0x78, 0x53, 0x53, 0x82, 0x3C, 0x8C, 0x97, 0x4D, 0x8B, 
   0x3C, 0x52, 0x12, 0x6B, 0x36, 0x30, 0x95, 0x68, 0xBA, 0xCE, 0x5B, 0x9C, 0x9D, 0x0A, 0x38, 0x23, 
   0x27, 0x00, 0x5C, 0x72, 0x5A, 0xAE, 0x7E, 0xC7, 0xAF, 0x4A, 0x65, 0x7A, 0x15, 0x00, 0x46, 0x28, 
   0x1A, 0x58, 0x7A, 0x80, 0xB0, 0x6A, 0x9B, 0x96, 0x3D, 0x4D, 0x7C, 0x4E, 0x8A, 0xC0, 0x64, 0xB0, 
   0xA1, 0x57, 0x46, 0x86, 0x49, 0x2C, 0x66, 0x0F, 0x42, 0x42, 0x53, 0x71, 0x7B, 0x59, 0x73, 0xB5, 
   0x2D, 0x7F, 0x5B, 0x45, 0x30, 0x61, 0x52, 0x37, 0x7B, 0x5F, 0xB1, 0xB7, 0x92, 0xB0, 0xDE, 0x40, 
   0x07, 0x62, 0x05, 0x27, 0x26, 0x4E, 0x82, 0x7C, 0x44, 0x50, 0x8F, 0x51, 0x25, 0x97, 0x58, 0x8F, 
   0x86, 0x58, 0xDA, 0x8C, 0x5C, 0x6B, 0x96, 0x60, 0x0B, 0x6C, 0x30, 0x52, 0x8C, 0x02, 0x21, 0x69, 
   0x2C, 0x47, 0x48, 0x86, 0xA0, 0x6D, 0x7D, 0xAD, 0x99, 0x1D, 0x1F, 0x91, 0x5D, 0x25, 0x9E, 0xAC, 
   0xB6, 0xC4, 0x3D, 0xAB, 0x77, 0x18, 0x4D, 0x51, 0x2F, 0x2D, 0x19, 0x54, 0x07, 0x84, 0x6D, 0x7D, 
   0xFF, 0x69, 0xE0, 0x92, 0x57, 0x84, 0x34, 0x24, 0x00, 0x77, 0x4C, 0x5F, 0x9F, 0x55, 0xFF, 0x51, 
   0x79, 0x71, 0x60, 0x89, 0x00, 0xE7, 0x32, 0x91, 0xD6, 0x1F, 0xB9, 0x6C, 0x80, 0x3A, 0x4C, 0x53, 
   0x2D, 0x7D, 0x1B, 0x8D, 0x89, 0x8D, 0x76, 0x74, 0xA3, 0x43, 0xA3, 0x02, 0x49, 0xAF, 0x00, 0x62, 
   0x80, 0x8A, 0x86, 0x72, 0xE8, 0xAE, 0x98, 0x3D, 0x35, 0x32, 0x35, 0x19, 0x72, 0x50, 0xA8, 0xC4, 
   0x35, 0xAF, 0x92, 0x73, 0x36, 0x85, 0x3B, 0x41, 0x83, 0x5E, 0x7C, 0x4F, 0x87, 0xAA, 0x84, 0x64, 
   0x55, 0xAD, 0x3A, 0x3E, 0xBE, 0x2E, 0x9D, 0x66, 0x46, 0x7A, 0x59, 0xA8, 0x46, 0xA2, 0x7E, 0x5C, 
   0x69, 0x00, 0x3B, 0x4D, 0x21, 0x91, 0x9E, 0x7F, 0x70, 0xC1, 0x7C, 0x55, 0x77, 0x86, 0x77, 0x59, 
   0x55, 0x9D, 0x91, 0x00, 0x46, 0x97, 0x3D, 0x33, 0x42, 0x5D, 0x51, 0x7D, 0x72, 0x65, 0xE5, 0x95, 
   0xA6, 0xA0, 0x76, 0xBB, 0x59, 0x2E, 0x2F, 0x6E, 0x27, 0x00, 0x7A, 0x45, 0x7F, 0x92, 0x92, 0x99, 
   0xA4, 0x98, 0x6D, 0x76, 0x1B, 0x79, 0x4E, 0x48, 0x90, 0xA5, 0x7C, 0x62, 0xB6, 0x2D, 0x61, 0x65, 
   0x87, 0x7C, 0x37, 0x5E, 0x70, 0x93, 0x2B, 0x5F, 0xB6, 0x69, 0x59, 0x45, 0x48, 0x4A, 0x6E, 0x4A, 
   0x74, 0xAE, 0x79, 0xB4, 0xA4, 0x80, 0x85, 0x8D, 0x52, 0x33, 0x60, 0x5C, 0x54, 0x95, 0x5B, 0x8D, 
   0xCE, 0x54, 0x70, 0x77, 0x32, 0x49, 0x4F, 0x4A, 0x4B, 0xA5, 0x9A, 0x9C, 0xA2, 0x66, 0xA1, 0x97, 
   0x19, 0x4B, 0xB7, 0x66, 0x5A, 0x8B, 0x38, 0x60, 0x33, 0x0C, 0x66, 0x3F, 0xA1, 0xAA, 0x93, 0x90, 
   0x80, 0xDB, 0x0B, 0x00, 0xC9, 0x00, 0x12, 0x3E, 0x8B, 0xAA, 0x32, 0xB5, 0xC9, 0xBC, 0x5E, 0x71, 
   0x9C, 0x12, 0x30, 0x6F, 0x6B, 0x56, 0xA8, 0x2D, 0x5E, 0x70, 0x14, 0x72, 0x92, 0xAB, 0xA7, 0xC4, 
   0xE3, 0xA5, 0xA3, 0x00, 0x00, 0x0D, 0x43, 0x5B, 0x85, 0x38, 0x4B, 0x85, 0x3A, 0x74, 0x54, 0x71, 
   0x88, 0x85, 0xAC, 0x94, 0xD8, 0x51, 0x87, 0xC7, 0x33, 0x46, 0x6A, 0x9E, 0x78, 0x8A, 0x57, 0x98, 
   0xB1, 0x05, 0x35, 0x87, 0x43, 0x30, 0x5F, 0x72, 0x82, 0x71, 0x57, 0x9B, 0xB2, 0x3B, 0x42, 0xB3, 
   0x5E, 0x98, 0x85, 0x80, 0xC0, 0xB0, 0x73, 0x51, 0x80, 0x00, 0x20, 0x30, 0x66, 0x5E, 0x97, 0xA9, 
   0xB3, 0xE1, 0x00, 0x4D, 0x80, 0x00, 0x1B, 0x35, 0x88, 0x88, 0x8C, 0x8A, 0x95, 0xAA, 0x67, 0x73, 
   0x94, 0x49, 0x93, 0xA4, 0x52, 0x52, 0x90, 