                                             youLoseNotification.Status,
                                                             "Error: Unexpectedly ,YouWin notification is already viewed");
            //Get full  session by 1st player
            FullGameState CompletedSession = this.GameStateProxy.GetGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(),
                                              TestAreaBase.users[0].MemberName,
                                              TestAreaBase.users[0].Password);

            //wait due to async behaviour and time for Notf svc to process the one in the queue
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);

            //get YouWin Notification and verify that it is viewed and deleted
            this.NotificationsServiceProxy.Locale = "en-US";
            this.NotificationsServiceProxy.UserID = TestAreaBase.users[0].MemberName;
            this.NotificationsServiceProxy.Password = TestAreaBase.users[0].Password;
            List<Notification> notificationList = this.NotificationsServiceProxy.GetNotifications(joinSessionState.GameID.ToString(),
                                                                                                 joinSessionState.SessionID,
                                                                                                 0,
                                                                                                 Constants.IGNORE_lAST_ID,
                                                                                                 1000,
                                                                                                 Notification.NotificationType.YouWin.ToString(),
                                                                                                 true);

            Assert.IsNotNull(notificationList, "Unexpected notification list is null");

            Assert.IsTrue(notificationList.Count == 0, "Error: Unexpected number of YOu Win Notification");

            //get YouLose Notification and verify that it is  not deleted, as its not viewed yet
            this.NotificationsServiceProxy.Locale = "en-US";
            this.NotificationsServiceProxy.UserID = TestAreaBase.users[1].MemberName;
            this.NotificationsServiceProxy.Password = TestAreaBase.users[1].Password;
            List<Notification> notificationList2 = this.NotificationsServiceProxy.GetNotifications(joinSessionState.GameID.ToString(),
                                                                                                 joinSessionState.SessionID,
                                                                                                 0,
                                                                                                 Constants.IGNORE_lAST_ID,
                                                                                                 1000,
                                                                                                 Notification.NotificationType.YouLose.ToString(),
                                                                                                 true);

            Assert.IsNotNull(notificationList2, "Unexpected notification list is null");

            Assert.IsTrue(notificationList2.Count == 1, "Error: Unexpected number of YOu Win Notification");


        }

        /// <summary>
        /// Feature test for GetGameState - verify  YouLose/YouWin Notification is deteled with a call to GetGameState
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("Feature test for GetGameState - verify  YouLose/YouWin Notification is deteled with a call to GetGameState .")]
        [TestProperty("Type", "FeatureTests")]
        public void P_GetGameState_DeleteYouLoseYouWinNotification()
        {
            //set variant name that would posted on notifications
            uint NotificationVariant = 2;
            // Initialize CreationData
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, (int)NotificationVariant, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");

            // player1 create session
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                                    TestAreaBase.users[0].MemberName,
                                                                                    TestAreaBase.users[0].Password);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //player 2 join session
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                               TestAreaBase.users[1].MemberName,
                                                                               TestAreaBase.users[1].Password);
            //Delete existing notifications
            TestAreaBase.notificationCommon.CheckNotificationCount(joinSessionState.GameID.ToString(), joinSessionState.SessionID,
                                           TestAreaBase.users[0].MemberName,
                                           TestAreaBase.users[0].Password);
            //Delete existing notifications
            TestAreaBase.notificationCommon.CheckNotificationCount(joinSessionState.GameID.ToString(), joinSessionState.SessionID,
                                           TestAreaBase.users[1].MemberName,
                                           TestAreaBase.users[1].Password);
            //set gameResults             
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 10,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = NotificationVariant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = NotificationVariant
            };

            //post game end by player 1
            this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, joinSessionState.GameID.ToString(), gameResults,
                                            TestAreaBase.users[0].MemberName,
                                            TestAreaBase.users[0].Password);



            //get YouLose Notification and verify that it is not viewed yet
            Notification youLoseNotification = GetNotification(joinSessionState.GameID.ToString(), joinSessionState.SessionID, Notification.NotificationType.YouLose.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Assert.AreEqual<Notification.NotificationStatus>(Notification.NotificationStatus.UnRead,
                                                             youLoseNotification.Status,
                                                             "Error: Unexpectedly ,YouLose notification is already viewed");
            //get YouWin Notification and verify that it is not viewed yet
            Notification youWinNotification = GetNotification(joinSessionState.GameID.ToString(), joinSessionState.SessionID, Notification.NotificationType.YouLose.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Assert.AreEqual<Notification.NotificationStatus>(Notification.NotificationStatus.UnRead,
                                                             youWinNotification.Status,
                                                             "Error: Unexpectedly ,YouLose notification is already viewed");

            //Get full  session state by 1st player
            FullGameState CompletedSession = this.GameStateProxy.GetGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(),
                                              TestAreaBase.users[0].MemberName,
                                              TestAreaBase.users[0].Password);

            //Get full  session state by 2nd player
            FullGameState CompletedSession2 = this.GameStateProxy.GetGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(),
                                              TestAreaBase.users[1].MemberName,
                                              TestAreaBase.users[1].Password);


            //wait due to async behaviour and time for Notf svc to process the one in the queue
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);

            //get YouLose Notification and verify that it is viewed and deleted
            this.NotificationsServiceProxy.Locale = "en-US";
            this.NotificationsServiceProxy.UserID = TestAreaBase.users[1].MemberName;
            this.NotificationsServiceProxy.Password = TestAreaBase.users[1].Password;
            List<Notification> notificationList = this.NotificationsServiceProxy.GetNotifications(joinSessionState.GameID.ToString(),
                                                                                                 joinSessionState.SessionID,
                                                                                                 0,
                                                                                                 Constants.IGNORE_lAST_ID,
                                                                                                 1000,
                                                                                                 Notification.NotificationType.YouLose.ToString(),
                                                                                                 true);

            Assert.IsNotNull(notificationList, "Unexpected notification list is null");

            Assert.IsTrue(notificationList.Count == 0, "Error: Unexpected number of YOu Lose Notification");


            //get YouWin Notification and verify that it is viewed and deleted
            this.NotificationsServiceProxy.Locale = "en-US";
            this.NotificationsServiceProxy.UserID = TestAreaBase.users[1].MemberName;
            this.NotificationsServiceProxy.Password = TestAreaBase.users[1].Password;
            List<Notification> notificationList2 = this.NotificationsServiceProxy.GetNotifications(joinSessionState.GameID.ToString(),
                                                                                                 joinSessionState.SessionID,
                                                                                                 0,
                                                                                                 Constants.IGNORE_lAST_ID,
                                                                                                 1000,
                                                                                                 Notification.NotificationType.YouWin.ToString(),
                                                                                                 true);

            Assert.IsNotNull(notificationList2, "Unexpected notification list is null");

            Assert.IsTrue(notificationList2.Count == 0, "Error: Unexpected number of YOu Lose Notification");


        }

        /// <summary>
        /// Feature test for PostGameEnd - verify if variant name is on GameOver notification
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("Feature Test for GameState.svc PostGameEnd API -Verify if variant is on GameOver notification .")]
        [TestProperty("Type", "FeatureTests")]
        public void P_GetGameState_DeleteGameOverNotification()
        {
            //set variant name that would be posted on notifications
            uint VariantOnNotification = 2;
            // Initialize CreationData
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, (int)VariantOnNotification, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");

            // player1 create session
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                                    TestAreaBase.users[0].MemberName,
                                                                                    TestAreaBase.users[0].Password);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //player 2 join session
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                               TestAreaBase.users[1].MemberName,
                                                                               TestAreaBase.users[1].Password);

            //Delete existing notifications
            TestAreaBase.notificationCommon.CheckNotificationCount(joinSessionState.GameID.ToString(), joinSessionState.SessionID,
                                           TestAreaBase.users[0].MemberName,
                                           TestAreaBase.users[0].Password);
            //Delete existing notifications
            TestAreaBase.notificationCommon.CheckNotificationCount(joinSessionState.GameID.ToString(), joinSessionState.SessionID,
                                           TestAreaBase.users[1].MemberName,
                                           TestAreaBase.users[1].Password);
            
            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.GameOverSeatIndexes = new int[] { 0 , 1};
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.None.ToString(),
                Score = 11,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = VariantOnNotification
            };

            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.None.ToString(),
                Score = 11,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = VariantOnNotification
            };

            //post game end by player 1
            this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, joinSessionState.GameID.ToString(), gameResults,
                                            TestAreaBase.users[0].MemberName,
                                            TestAreaBase.users[0].Password);



            //get GameOver Notification for player1 and verify that it is not viewed yet
            Notification GameOvereNotification = GetNotification(joinSessionState.GameID.ToString(), joinSessionState.SessionID, Notification.NotificationType.GameOver.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            Assert.AreEqual<Notification.NotificationStatus>(Notification.NotificationStatus.UnRead,
                                                             GameOvereNotification.Status,
                                                             "Error: Unexpectedly ,YouLose notification is already viewed");

            //get GameOver Notification for player2 and verify that it is not viewed yet
            Notification GameOvereNotification2 = GetNotification(joinSessionState.GameID.ToString(), joinSessionState.SessionID, Notification.NotificationType.GameOver.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Assert.AreEqual<Notification.NotificationStatus>(Notification.NotificationStatus.UnRead,
                                                             GameOvereNotification2.Status,
                                                             "Error: Unexpectedly ,YouLose notification is already viewed");


            //GetGameState by 1st player
            FullGameState gameState1= this.GameStateProxy.GetGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(),
                                                                        TestAreaBase.users[0].MemberName,
                                                                        TestAreaBase.users[0].Password);
            //GetGameState by 2nd player
            FullGameState gameState2 = this.GameStateProxy.GetGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(),
                                                                        TestAreaBase.users[1].MemberName,
                                                                        TestAreaBase.users[1].Password);


            //wait due to async behaviour and time for Notf svc to process the one in the queue
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);

            //get GameOver Notification and verify that it is viewed and deleted
            this.NotificationsServiceProxy.Locale = "en-US";
            this.NotificationsServiceProxy.UserID = TestAreaBase.users[0].MemberName;
            this.NotificationsServiceProxy.Password = TestAreaBase.users[0].Password;
            List<Notification> notificationList = this.NotificationsServiceProxy.GetNotifications(joinSessionState.GameID.ToString(),
                                                                                                 joinSessionState.SessionID,
                                                                                                 0,
                                                                                                 Constants.IGNORE_lAST_ID,
                                                                                                 1000,
                                                                                                 Notification.NotificationType.GameOver.ToString(),
                                                                                                 true);

            Assert.IsNotNull(notificationList, "Unexpected notification list is null");

            Assert.IsTrue(notificationList.Count == 0, "Error: Unexpected number of GameOver Notification");

            //get GameOver Notification for 2nd player and verify that it is viewed and deleted
            this.NotificationsServiceProxy.Locale = "en-US";
            this.NotificationsServiceProxy.UserID = TestAreaBase.users[1].MemberName;
            this.NotificationsServiceProxy.Password = TestAreaBase.users[1].Password;
            List<Notification> notificationList2 = this.NotificationsServiceProxy.GetNotifications(  joinSessionState.GameID.ToString(),
                                                                                                     joinSessionState.SessionID,
                                                                                                     0,
                                                                                                     Constants.IGNORE_lAST_ID,
                                                                                                     1000,
                                                                                                     Notification.NotificationType.GameOver.ToString(),
                                                                                                     true );

            Assert.IsNotNull(notificationList2, "Unexpected notification list is null");

            Assert.IsTrue(notificationList2.Count == 0, "Error: Unexpected number of GameOver Notification");

        }

        /// <summary>
        /// Feature test for PostGameEnd - verify if variant name is on GameTie notification
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("Feature Test for GameState.svc PostGameEnd API -Verify if variant is on GameTie notification .")]
        [TestProperty("Type", "FeatureTests")]
        public void P_GetGameState_DeleteGameTieNotification()
        {
            //set variant name that would be posted on notifications
            uint VariantOnNotification = 2;
            // Initialize CreationData
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, (int)VariantOnNotification, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");

            // player1 create session
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                                    TestAreaBase.users[0].MemberName,
                                                                                    TestAreaBase.users[0].Password);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //player 2 join session
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                               TestAreaBase.users[1].MemberName,
                                                                               TestAreaBase.users[1].Password);
         
            //Delete existing notifications
            TestAreaBase.notificationCommon.CheckNotificationCount(joinSessionState.GameID.ToString(), joinSessionState.SessionID,
                                           TestAreaBase.users[0].MemberName,
                                           TestAreaBase.users[0].Password);
            //Delete existing notifications
            TestAreaBase.notificationCommon.CheckNotificationCount(joinSessionState.GameID.ToString(), joinSessionState.SessionID,
                                           TestAreaBase.users[1].MemberName,
                                           TestAreaBase.users[1].Password);
            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.TierSeatIndexes = new int[] { 0 , 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Tie.ToString(),
                Score = 15,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = VariantOnNotification
            };

          
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Tie.ToString(),
                Score = 15,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = VariantOnNotification
            };


            //post game end by player 1
            this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, joinSessionState.GameID.ToString(), gameResults,
                                            TestAreaBase.users[0].MemberName,
                                            TestAreaBase.users[0].Password);



            //get GameTie Notification and verify that it is not viewed yet
            Notification GameTieNotification = GetNotification(joinSessionState.GameID.ToString(), joinSessionState.SessionID, Notification.NotificationType.GameTie.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            Assert.AreEqual<Notification.NotificationStatus>(Notification.NotificationStatus.UnRead,
                                                             GameTieNotification.Status,
                                                             "Error: Unexpectedly ,YouLose notification is already viewed");

            Notification GameTieNotification2 = GetNotification(joinSessionState.GameID.ToString(), joinSessionState.SessionID, Notification.NotificationType.GameTie.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Assert.AreEqual<Notification.NotificationStatus>(Notification.NotificationStatus.UnRead,
                                                             GameTieNotification2.Status,
                                                             "Error: Unexpectedly ,YouLose notification is already viewed");

            //GetGameState by 1st player
            FullGameState completedGame= this.GameStateProxy.GetGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(),
                                                                          TestAreaBase.users[0].MemberName,
                                                                          TestAreaBase.users[0].Password);
            //GetGameState by 2nd player
            FullGameState completedGame2 = this.GameStateProxy.GetGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(),
                                                                          TestAreaBase.users[1].MemberName,
                                                                          TestAreaBase.users[1].Password);

            //wait due to async behaviour and time for Notf svc to process the one in the queue
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);

            //get GameTie Notification and verify that it is viewed and deleted
            this.NotificationsServiceProxy.Locale = "en-US";
            this.NotificationsServiceProxy.UserID = TestAreaBase.users[0].MemberName;
            this.NotificationsServiceProxy.Password = TestAreaBase.users[0].Password;
            List<Notification> notificationList = this.NotificationsServiceProxy.GetNotifications(joinSessionState.GameID.ToString(),
                                                                                                 joinSessionState.SessionID,
                                                                                                 0,
                                                                                                 Constants.IGNORE_lAST_ID,
                                                                                                 1000,
                                                                                                 Notification.NotificationType.GameTie.ToString(),
                                                                                                 true);

            Assert.IsNotNull(notificationList, "Unexpected notification list is null");

            Assert.IsTrue(notificationList.Count == 0, "Error: Unexpected number of GameTie Notification");

            //get GameTie Notification for palyer2 and verify that it is viewed and deleted
            this.NotificationsServiceProxy.UserID = TestAreaBase.users[1].MemberName;
            this.NotificationsServiceProxy.Password = TestAreaBase.users[1].Password;
            List<Notification> notificationList2 = this.NotificationsServiceProxy.GetNotifications(joinSessionState.GameID.ToString(),
                                                                                                 joinSessionState.SessionID,
                                                                                                 0,
                                                                                                 Constants.IGNORE_lAST_ID,
                                                                                                 1000,
                                                                                                 Notification.NotificationType.GameTie.ToString(),
                                                                                                 true);

            Assert.IsNotNull(notificationList2, "Unexpected notification list is null");

            Assert.IsTrue(notificationList2.Count == 0, "Error: Unexpected number of GameTie Notification");
        }
               
        /// <summary>
        /// Feature test for GetGameState to verify only single delete notification request is  alllowed per user per session
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("Feature test for Sessions.svc GetGameState API -to verify only single delete notification request is  alllowed per user per session.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_GetGameState_SingleDeleteNotificationRequestPerUser()
        {

            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");
            // Initialize CreationData
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, Constants.TESTGAMEVARIANT2, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");

            // player1 create session
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                                    TestAreaBase.users[0].MemberName,
                                                                                    TestAreaBase.users[0].Password);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //player 2 join session
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                               TestAreaBase.users[1].MemberName,
                                                                               TestAreaBase.users[1].Password);

            //set gameResults             
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 10,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)Constants.TESTGAMEVARIANT2
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)Constants.TESTGAMEVARIANT2
            };

            //post game end by player 1
            this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, joinSessionState.GameID.ToString(), gameResults,
                                            TestAreaBase.users[0].MemberName,
                                            TestAreaBase.users[0].Password);

            //wait for notifications in queue to be processed
            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME * Constants.NOTIFICATION_RETRIES);

            NotificationTestCommon.StopService(this.NpdbMachineName, "NotificationService");
            //Get full  session state by 1st player
            FullGameState CompletedSession = this.GameStateProxy.GetGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(),
                                              TestAreaBase.users[0].MemberName,
                                              TestAreaBase.users[0].Password);

            Assert.IsTrue(CompletedSession.GameStateInfo.IsComplete, "The session is not marked as complete after a call to postGameEnd");

            SqlConnection myConnection = new SqlConnection(ConfigurationManager.ConnectionStrings["lest_AsyncNotification_db"].ConnectionString + ";Asynchronous Processing=true");
            myConnection.Open();

            //Read the row affected in queue
            SqlCommand myCommand = new SqlCommand("SELECT  *, casted_message_body =" +
                                        "CASE message_type_name WHEN 'X' " +
                                            "THEN CAST(message_body AS NVARCHAR(MAX))" +
                                            "ELSE message_body " +
                                        "END " +
                                      "FROM [AsyncNotification].[NotificationSchema].[NotificationRequestQueue] WITH(NOLOCK)", myConnection);

            using (SqlDataReader LivenReader = myCommand.ExecuteReader())
            {
                //read first row
                Assert.IsTrue(LivenReader.Read(), "Error: Unable to read from DB OR No notificatin request has been posted to Queue on a call to GetGameState");

                //read second row
                Assert.IsFalse(LivenReader.Read(), "Error: More than one notification request has been posted to Queue");
            }

            myCommand.Dispose();

            myConnection.Close();

            NotificationTestCommon.StartService(this.NpdbMachineName, "NotificationService");

        }
        /// <summary>
        /// Feature test for GetGameState to verify only single delete notification request is  alllowed per user per session, use Etag
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("Feature test for Sessions.svc GetGameState API -to verify only single delete notification request is  alllowed per user per session, use Etag.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_GetGameState_SingleDeleteNotifRequestPerUser_Etag()
        {
            // Initialize CreationData
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, Constants.TESTGAMEVARIANT2, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");

            // player1 create session
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                                    TestAreaBase.users[0].MemberName,
                                                                                    TestAreaBase.users[0].Password);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //player 2 join session
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                               TestAreaBase.users[1].MemberName,
                                                                               TestAreaBase.users[1].Password);
            //Delete existing notifications
            TestAreaBase.notificationCommon.CheckNotificationCount(createSessionState.GameID.ToString(), createSessionState.SessionID,
                                           TestAreaBase.users[0].MemberName,
                                           TestAreaBase.users[0].Password);

            //set gameResults             
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 10,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)Constants.TESTGAMEVARIANT2
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)Constants.TESTGAMEVARIANT2
            };

            //post game end by player 1
            this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, joinSessionState.GameID.ToString(), gameResults,
                                            TestAreaBase.users[0].MemberName,
                                            TestAreaBase.users[0].Password);

            //wait for notifications in queue to be processed
            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME * Constants.NOTIFICATION_RETRIES);

            this.NotificationsServiceProxy.Locale = "en-US";
            
            //Get full  session state by 1st player
            FullGameState CompletedSession = this.GameStateProxy.GetGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(),
                                              TestAreaBase.users[0].MemberName,
                                              TestAreaBase.users[0].Password);

            Assert.IsTrue(CompletedSession.GameStateInfo.IsComplete, "The session is not marked as complete after a call to postGameEnd");

            //wait for notifications in queue to be processed
            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME * Constants.NOTIFICATION_RETRIES);

            //try to get YouWin Notification
            List<Notification> notificationList = this.NotificationsServiceProxy.GetNotifications(
                createSessionState.GameID.ToString(),
                createSessionState.SessionID,
                0,
                Constants.IGNORE_lAST_ID,
                10,
                Notification.NotificationType.YouWin.ToString(),
                true,
                TestAreaBase.users[0].MemberName,
                TestAreaBase.users[0].Password,
                null);

            Assert.IsNotNull(notificationList, "Error: Did not find Notification.");
            Assert.AreEqual(0, notificationList.Count, "Error: Incorrect number of notifications.");

            string etag = this.NotificationsServiceProxy.EtagInResponse;

            // a second call to getGameState to see if second request to delete notification is made on queue
            CompletedSession = this.GameStateProxy.GetGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(),
                                              TestAreaBase.users[0].MemberName,
                                              TestAreaBase.users[0].Password);

            //wait for notifications in queue to be processed
            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME * Constants.NOTIFICATION_RETRIES);

            try
            {
                notificationList = this.NotificationsServiceProxy.GetNotifications(
                    createSessionState.GameID.ToString(),
                    createSessionState.SessionID,
                    0,
                    Constants.IGNORE_lAST_ID,
                    10,
                    Notification.NotificationType.YouWin.ToString(),
                    true,
                    TestAreaBase.users[0].MemberName,
                    TestAreaBase.users[0].Password,
                    etag);

                Assert.Fail("Error: Expected to get NOTMODIFIED but passed");
            }
            catch (RestException rx)
            {
                VerifyException(HttpStatusCode.NotModified, rx.Response);
            }
                       
        }

        /// <summary>
        /// Feature test for GetGameState to verify Multiple delete notification requests are not  alllowed per user per session, use Etag
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("Feature test for Sessions.svc GetGameState API -to verify Multiple delete notification requests are not  alllowed per user per session, use Etag.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_GetGameState_MutipleDeleteNotifRequestPerUser_Etag()
        {
            // Initialize CreationData
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, Constants.TESTGAMEVARIANT2, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");

            // player1 create session
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                                    TestAreaBase.users[0].MemberName,
                                                                                    TestAreaBase.users[0].Password);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //player 2 join session
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                               TestAreaBase.users[1].MemberName,
                                                                               TestAreaBase.users[1].Password);
            //Delete existing notifications
            TestAreaBase.notificationCommon.CheckNotificationCount(createSessionState.GameID.ToString(), createSessionState.SessionID,
                                           TestAreaBase.users[0].MemberName,
                                           TestAreaBase.users[0].Password);

            //set gameResults             
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 10,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)Constants.TESTGAMEVARIANT2
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)Constants.TESTGAMEVARIANT2
            };

            //post game end by player 1
            this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, joinSessionState.GameID.ToString(), gameResults,
                                            TestAreaBase.users[0].MemberName,
                                            TestAreaBase.users[0].Password);

            //wait for notifications in queue to be processed
            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME * Constants.NOTIFICATION_RETRIES);

            this.NotificationsServiceProxy.Locale = "en-US";

            //Get full  session state by 1st player
            FullGameState CompletedSession = this.GameStateProxy.GetGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(),
                                              TestAreaBase.users[0].MemberName,
                                              TestAreaBase.users[0].Password);

            Assert.IsTrue(CompletedSession.GameStateInfo.IsComplete, "The session is not marked as complete after a call to postGameEnd");

            //wait for notifications in queue to be processed
            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME * Constants.NOTIFICATION_RETRIES);

            //try to get YouWin Notification
            List<Notification> notificationList = this.NotificationsServiceProxy.GetNotifications(
                createSessionState.GameID.ToString(),
                createSessionState.SessionID,
                0,
                Constants.IGNORE_lAST_ID,
                10,
                Notification.NotificationType.YouWin.ToString(),
                true,
                TestAreaBase.users[0].MemberName,
                TestAreaBase.users[0].Password,
                null);

            Assert.IsNotNull(notificationList, "Error: Did not find Notification.");
            Assert.AreEqual(0, notificationList.Count, "Error: Incorrect number of notifications.");

            string etag = this.NotificationsServiceProxy.EtagInResponse;

            //call getGameState multiple times to imitate DOS attack on Notification Queue with multiple to GetGameState
            for (int CntSession = 0; CntSession < 5; CntSession++)
            {
                CompletedSession = this.GameStateProxy.GetGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(),
                                                  TestAreaBase.users[0].MemberName,
                                                  TestAreaBase.users[0].Password);
            }

            //wait for notifications in queue to be processed
            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME * Constants.NOTIFICATION_RETRIES);

            try
            {
                notificationList = this.NotificationsServiceProxy.GetNotifications(
                    createSessionState.GameID.ToString(),
                    createSessionState.SessionID,
                    0,
                    Constants.IGNORE_lAST_ID,
                    10,
                    Notification.NotificationType.YouWin.ToString(),
                    true,
                    TestAreaBase.users[0].MemberName,
                    TestAreaBase.users[0].Password,
                    etag);

                Assert.Fail("Error: Expected NOTMODIFIED error but passed");
            }
            catch (RestException rx)
            {
                VerifyException(HttpStatusCode.NotModified, rx.Response);
            }

        }

        public string GetLeaderboardValue(string statEntry, string userName, string password)
        {
            LeaderboardResult result = this.NotificationsServiceProxy.GetLeaderboard(Constants.TESTGAMEID.ToString(), Constants.TESTGAMEVARIANT.ToString(), "BestScore", "1", "W1", "100", "2", userName, password);
            Assert.IsNotNull(result, "No result was returned");

            if (result.Leaderboard == null)
            {
                return "0";
            }
            else
            {
                Assert.IsNotNull(result.Leaderboard, "No statistics were returned");
                Assert.AreNotEqual(0, result.Leaderboard.Count, "Leaderboard is empty");

                IList<Entry> entryList = result.Leaderboard[0].Statistics;
                IEnumerable<Entry> entries = (from e in entryList
                                              where e.Name == statEntry
                                              select e);
                int numEntries = entries.Count<Entry>();
                Assert.AreEqual(1, numEntries, "Error: Unexpected number of entries in response.");
                return entries.First<Entry>().Value;
            }

        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Test.API\States\PostGameAction.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using LiveN.Test.Framework.Configuration;
using Multiplayer.Test.API;
using AsyncMultiplayer.SessionCommon;
using AsyncMultiplayer.NotificationService;
using System.Net;
using System.Diagnostics;
using System.Threading;
using LiveN.Test.Common.Web;
using LIVEN.Common.Diagnostics;
using Multiplayer.Test.UserAccounts;

namespace MultiPlayer.Test.API
{
    /// <summary>
    /// Test Cases for GameState.svc PostGameAction API
    /// </summary>
    [TestClass]
    public class PostGameAction : TestAreaBase
    {
        
        
        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            
            LockTest();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            UnlockTest();
        }

        /// <summary>
        /// BVT test for PostGameAction
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("BVT for GameState PostGameAction API.")]
        [TestProperty("Type", "BVTs")]
        public void BVT_PostGameAction()
        {
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, sessionState);

            JoinData joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(sessionState.SessionID.ToString(), joinData);

            // Set the game state
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;
            this.GameStateProxy.PutGameState(sessionState.SessionID, creationData.GameID.ToString(), modifiableGameState);

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState modifiedSessionState = this.GameSessionProxy.ViewSession(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());

            // Do PostGameAction with a UserNudge as ActionType
            GameAction gameAction = new GameAction();
            gameAction.ActionType = GameActionType.UserNudge;
            gameAction.ActionData = new byte[] { 1 };
            gameAction.ActionTime = DateTime.Now;
            gameAction.SequenceNumber = modifiedSessionState.State.SequenceNumber;

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;
            this.GameStateProxy.PostGameAction(modifiedSessionState.SessionID.ToString(), modifiedSessionState.GameID.ToString(), gameAction);

            //TODO: Verify Notification
            Thread.Sleep(30000);

            string memberName = TestAreaBase.users[1].MemberName;      // player2
            string password = TestAreaBase.users[1].Password;

            List<Notification> notificationList = this.NotificationsServiceProxy.GetNotifications(
                modifiedSessionState.GameID.ToString(),
                modifiedSessionState.SessionID,
                (int)Notification.NotificationCategory.ToDo,
                String.Empty,
                1,
                Notification.NotificationType.Nudge.ToString(),
                true,
                memberName,
                password,
                Constants.NOTIFICATION_RETRIES,
                Constants.NOTIFICATION_SLEEP_TIME);

            Notification notification = null;
            if (notificationList.Count > 0)
            {
                notification = notificationList[0];
            }

            Assert.IsNotNull(notification, "Error: Did not find Notification.");
            Assert.AreEqual(modifiedSessionState.SessionID, notification.SessionId, "Error: SessionID of SessionState & Notification did not match.");
            Assert.AreEqual(modifiedSessionState.GameID, notification.GameId, "Error: GameID of SessionState & Notification did not match.");
            Assert.AreEqual(Notification.NotificationType.Nudge, notification.Type, "Notification Type did not match.");
        }

        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Call PostGameAction on GameState service to Post GameSpecific Action")]
        [TestProperty("Type", "FeatureTests")]
        public void P_PostGameAction_GameSpecific()
        {
            //string expectedExceptionMessage = "The remote server returned an error: (501) Not Implemented.";

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //verify joinsession
            AssertJoinSessionState(createSessionState, joinSessionState);

            // Set the game state
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState modifiedSessionState = this.GameSessionProxy.ViewSession(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());

            // Do PostGameAction with a GameSpecific as ActionType
            GameAction gameAction = new GameAction();
            gameAction.ActionType = GameActionType.GameSpecific;
            gameAction.ActionData = new byte[] { 1 };
            gameAction.ActionTime = DateTime.Now;
            gameAction.SequenceNumber = modifiedSessionState.State.SequenceNumber;

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                this.GameStateProxy.PostGameAction(modifiedSessionState.SessionID.ToString(), modifiedSessionState.GameID.ToString(), gameAction);
                Assert.Fail("Expected WebException to get thrown but did not get any Exception");
            }
            catch (RestException restEx)
            {
                //HttpWebResponse response = webEx.Response as HttpWebResponse;
                if (restEx == null)
                {
                    throw;
                }
                Assert.AreEqual(HttpStatusCode.NotImplemented, restEx.Response.Status, "HttpStatusCode is not as expected status code");
                //Assert.AreEqual<string>(expectedExceptionMessage, restEx.Message);
            }
        }

        //Related bug 5821
        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that we do not allow users to send nudge to players that are not on the active seat.")]
        [TestProperty("Type", "Features")]
        public void N_PostGameAction_NudgeRecipientNotOnActiveSeat()
        {
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, new InactivityWarningBehavior(), true, "TestGame");
            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            AssertCreateSessionState(creationData, sessionState);

            JoinData joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 1);
            this.GameSessionProxy.JoinSession(sessionState.SessionID, joinData, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            joinData.SeatIndex = 2;
            this.GameSessionProxy.JoinSession(sessionState.SessionID, joinData, TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password);
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            
            // Do PostGameAction with a UserNudge as ActionType
            GameAction gameAction = new GameAction();
            gameAction.ActionType = GameActionType.UserNudge;
            gameAction.ActionData = new byte[] { 1 };
            gameAction.ActionTime = DateTime.Now;
            gameAction.SequenceNumber = sessionState.State.SequenceNumber;
            this.GameStateProxy.PostGameAction(sessionState.SessionID.ToString(), sessionState.GameID.ToString(), gameAction, TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password);
            
            Thread.Sleep(20000); // give time for notification internal to process notification requests.
            //verify no notification for user on seat index 1
            List<Notification> notificationList = this.NotificationsServiceProxy.GetNotifications(
                sessionState.GameID.ToString(),
                sessionState.SessionID,
                0,
                String.Empty,
                1,
                Notification.NotificationType.Nudge.ToString(),
                true,
                TestAreaBase.users[1].MemberName,
                TestAreaBase.users[1].Password,
                null);
            Assert.IsNotNull(notificationList);
            Assert.AreEqual(0, notificationList.Count, "Error: Did not exepect any nudge notifications for user who is not on active seat.");

            //verify notification for user on active seat
            notificationList = this.NotificationsServiceProxy.GetNotifications(
                sessionState.GameID.ToString(),
                sessionState.SessionID,
                0,
                String.Empty,
                1,
                Notification.NotificationType.Nudge.ToString(),
                true,
                TestAreaBase.users[0].MemberName,
                TestAreaBase.users[0].Password,
                null);
            Assert.IsNotNull(notificationList);
            Assert.AreEqual(1, notificationList.Count, "Error: Did not exepect any nudge notifications for user who is not on active seat.");
        }

        //Related bug 5821
        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that we do not allow users to send nudge to an empty active seat.")]
        [TestProperty("Type", "Features")]
        public void N_PostGameAction_NudgeEmptyActiveSeat()
        {
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, new InactivityWarningBehavior(), true, "TestGame");
            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            AssertCreateSessionState(creationData, sessionState);

            //assign active seat to an empty seat
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };
            this.GameStateProxy.PutGameState(sessionState.SessionID, sessionState.GameID.ToString(), modifiableGameState, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            // Do PostGameAction with a UserNudge as ActionType
            GameAction gameAction = new GameAction();
            gameAction.ActionType = GameActionType.UserNudge;
            gameAction.ActionData = new byte[] { 1 };
            gameAction.ActionTime = DateTime.Now;
            gameAction.SequenceNumber = 1;

            try
            {
                this.GameStateProxy.PostGameAction(sessionState.SessionID.ToString(), sessionState.GameID.ToString(), gameAction, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("Expected forbidden as we should not allow users to nudge an empty seat even if it is the active seat.");
            }
            catch (RestException ex)
            {
                VerifyException(403, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.CannotNudgeEmptyActiveSeat), ex.Response);
            }
        }

        //related bug 1863
        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify contents of user nudge notification.")]
        [TestProperty("Type", "Features")]
        public void P_PostGameAction_NotificationContent()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this testcase.");
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");
            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            AssertCreateSessionState(creationData, sessionState);

            JoinData joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 1);
            this.GameSessionProxy.JoinSession(sessionState.SessionID.ToString(), joinData, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            //Delete pre-existing notifications 
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            // Do PostGameAction with a UserNudge as ActionType
            GameAction gameAction = new GameAction();
            gameAction.ActionType = GameActionType.UserNudge;
            gameAction.ActionData = new byte[] { 0 };
            gameAction.ActionTime = DateTime.Now;
            gameAction.SequenceNumber = sessionState.State.SequenceNumber;

            this.GameStateProxy.PostGameAction(sessionState.SessionID.ToString(), sessionState.GameID.ToString(), gameAction, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            this.NotificationsServiceProxy.Locale = "en-US";
            List<Notification> notificationList = this.NotificationsServiceProxy.GetNotifications(
                sessionState.GameID.ToString(),
                sessionState.SessionID,
                (int)Notification.NotificationCategory.ToDo,
                String.Empty,
                10,
                Notification.NotificationType.Nudge.ToString(),
                true,
                TestAreaBase.users[0].MemberName,
                TestAreaBase.users[0].Password,
                Constants.NOTIFICATION_RETRIES,
                Constants.NOTIFICATION_SLEEP_TIME);

            Assert.IsNotNull(notificationList, "Error: Did not find Notification.");
            Assert.AreEqual(1, notificationList.Count, "Error: Incorrect number of notifications.");
            ValidateNotificationContent(notificationList[0], "Nudge", Users.GetGamertag(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password), "");
        }

        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify that we only send one user nudge per turn.")]
        [TestProperty("Type", "BVTs")]
        public void P_PostGameAction_LimitTo1UserNudgePerTurn()
        {
            //verify that we do not have pre-existing notifications for the user.
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");
            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            AssertCreateSessionState(creationData, sessionState);

            JoinData joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 1);
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(sessionState.SessionID.ToString(), joinData, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            // Do PostGameAction with a UserNudge as ActionType
            GameAction gameAction = new GameAction();
            gameAction.ActionType = GameActionType.UserNudge;
            gameAction.ActionData = new byte[] { 1 };
            gameAction.ActionTime = DateTime.Now;
            gameAction.SequenceNumber = 0;

            this.GameStateProxy.PostGameAction(sessionState.SessionID.ToString(), sessionState.GameID.ToString(), gameAction, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            //TODO: Verify Notification
            TestAreaBase.notificationCommon.VerifyNotificationCreated(sessionState.GameID.ToString(), sessionState.SessionID.ToString(), Notification.NotificationType.Nudge.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            //delete notification
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            // send user nudge again
            this.GameStateProxy.PostGameAction(sessionState.SessionID.ToString(), sessionState.GameID.ToString(), gameAction, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);

            List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(
                                            sessionState.GameID.ToString(),
                                            sessionState.SessionID.ToString(),
                                            0,
                                            Constants.IGNORE_lAST_ID,
                                            10,
                                            Notification.NotificationType.Nudge.ToString(),
                                            true,
                                            TestAreaBase.users[0].MemberName,
                                            TestAreaBase.users[0].Password,
                                            null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(0, nList.Count, "Error: Not expecting another nudge notification to be sent.");
            
            joinData.SeatIndex = 2;
            joinSessionState = this.GameSessionProxy.JoinSession(sessionState.SessionID.ToString(), joinData, TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password);

            //send another nudge from another user
            this.GameStateProxy.PostGameAction(sessionState.SessionID.ToString(), sessionState.GameID.ToString(), gameAction, TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password);

            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);
            nList = this.NotificationsServiceProxy.GetNotifications(
                                            sessionState.GameID.ToString(),
                                            sessionState.SessionID.ToString(),
                                            0,
                                            Constants.IGNORE_lAST_ID,
                                            10,
                                            Notification.NotificationType.Nudge.ToString(),
                                            true,
                                            TestAreaBase.users[0].MemberName,
                                            TestAreaBase.users[0].Password,
                                            null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(0, nList.Count, "Error: Not expecting another nudge notification to be sent.");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Test.API\Sessions\ViewSessionSummaries.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using LiveN.Test.Framework.Configuration;
using Multiplayer.Test.API;
using AsyncMultiplayer.SessionCommon;
using Gds.Contracts;
using System.Net;
using System.Diagnostics;
using System.Threading;
using LiveN.Test.Common;
using LiveN.Test.Common.Web;
using LIVEN.Common.Diagnostics;

namespace MultiPlayer.Test.API
{
    /// <summary>
    /// Test Cases for Sessions.svc ViewSessionSummaries API
    /// </summary>
    [TestClass]
    public class ViewSessionSummaries : TestAreaBase
    {
        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            LockTest();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            UnlockTest();
        }


        /// <summary>
        /// BVT test for ViewSessionSummaries
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("BVT for Game Session ViewSessionSummaries API.")]
        [TestProperty("Type", "BVTs")]
        public void BVT_ViewSessionSummaries()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, new InactivityWarningBehavior(), true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            //ViewSessionSummaries
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), String.Empty, String.Empty, "10", ShowSessionType.Active.ToString());

            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
            Assert.IsTrue(sessionEntries.Count() > 0, "ERROR: VeiwSessionSummariesInXml did not return any Sessions.");
        }

        /// <summary>
        /// Feature Test for ViewSessionSummaries - All Params as Null
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Game Session ViewSessionSummaries API - All Params as Null.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ViewSessionSummaries_NullParams()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            //ViewSessionSummaries
            
            try
            {
                sessionEntries = this.GameSessionProxy.ViewSessionSummaries(null, null, null, null, null, null);
                Assert.Fail("Expecting Forbidden but it didnt get one.");
            }
            catch (RestException ex)
            {                
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDIsNullOrEmpty), ex.Response);
            }

        }

        /// <summary>
        /// Feature Test for ViewSessionSummaries - GameID param
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Game Session ViewSessionSummaries API - GameID param.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ViewSessionSummaries_GameID()
        {
            SessionState createSessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            //ViewSessionSummaries
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(createSessionState.GameID.ToString(), null, null, null, null, null);

            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
            Assert.IsTrue(sessionEntries.Count() > 0, "ERROR: VeiwSessionSummariesInXml did not return any Sessions.");
        }

        /// <summary>
        /// Feature Test for ViewSessionSummaries - GameID & Variant params
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Game Session ViewSessionSummaries API - GameID & Variant params.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ViewSessionSummaries_GameIDVariant()
        {
            SessionState createSessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            //ViewSessionSummaries
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(createSessionState.GameID.ToString(), createSessionState.Variant.ToString(), null, null, null, null);

            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
            Assert.IsTrue(sessionEntries.Count() > 0, "ERROR: VeiwSessionSummariesInXml did not return any Sessions.");
        }

        /// <summary>
        /// Feature Test for ViewSessionSummaries - GameID & SessionType param
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Game Session ViewSessionSummaries API - GameID & SessionType param.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ViewSessionSummaries_GameIDSessionType()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            //ViewSessionSummaries
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), null, null, null, null, ShowSessionType.Active.ToString());

            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
            Assert.IsTrue(sessionEntries.Count() > 0, "ERROR: VeiwSessionSummariesInXml did not return any Sessions.");
        }

        /// <summary>
        /// Feature Test for ViewSessionSummaries - GameID, Variant & SessionType param
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Game Session ViewSessionSummaries API - GameID, Variant & SessionType param.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ViewSessionSummaries_GameIDVariantSessionType()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            //ViewSessionSummaries
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), null, null, null, ShowSessionType.Active.ToString());

            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
            Assert.IsTrue(sessionEntries.Count() > 0, "ERROR: VeiwSessionSummariesInXml did not return any Sessions.");
        }

        /// <summary>
        /// Feature Test for ViewSessionSummaries - MaxSessions param
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Game Session ViewSessionSummaries API - MaxSessions param.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ViewSessionSummaries_MaxSessions()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            try
            {
                //ViewSessionSummaries
                sessionEntries = this.GameSessionProxy.ViewSessionSummaries(null, null, null, null, "10", null);
            }
            catch (RestException rx)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDIsNullOrEmpty), rx.Response);
            }

            //COmmenting out this due to new behavior of viewsession.
            //Assert SessionEntries
            //Assert.IsNotNull(sessionEntries);
            //Assert.IsTrue(sessionEntries.Count() > 0, "ERROR: VeiwSessionSummariesInXml did not return any Sessions.");
        }

        /// <summary>
        /// Feature Test for ViewSessionSummaries - GameID & MaxSessions params
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Game Session ViewSessionSummaries API - GameID & MaxSessions params.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ViewSessionSummaries_GameIDMaxSessions()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            //ViewSessionSummaries
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), null, null, null, "10", null);

            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
            Assert.IsTrue(sessionEntries.Count() > 0, "ERROR: VeiwSessionSummariesInXml did not return any Sessions.");
        }

        /// <summary>
        /// Feature Test for ViewSessionSummaries - GameID, Variant & MaxSessions params
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Game Session ViewSessionSummaries API - GameID, Variant & MaxSessions params.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ViewSessionSummaries_GameIDVariantMaxSessions()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            //ViewSessionSummaries
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), null, null, "10", null);

            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
            Assert.IsTrue(sessionEntries.Count() > 0, "ERROR: VeiwSessionSummariesInXml did not return any Sessions.");
        }

        /// <summary>
        /// Feature Test for ViewSessionSummaries - GameID, Variant, SessionType & MaxSessions params
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Game Session ViewSessionSummaries API - GameID, Variant, SessionType & MaxSessions params.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ViewSessionSummaries_GameIDVariantMaxSessionsSessionType()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            //ViewSessionSummaries
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), null, null, "10", ShowSessionType.Active.ToString());

            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
            Assert.IsTrue(sessionEntries.Count() > 0, "ERROR: VeiwSessionSummariesInXml did not return any Sessions.");
        }

        /// <summary>
        /// Feature Test for ViewSessionSummaries - lastSessionID & lastGameID params
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Game Session ViewSessionSummaries API - lastSessionID & lastGameID params.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ViewSessionSummaries_lastSessionIDlastGameID()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            //ViewSessionSummaries
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), null, sessionState.SessionID, sessionState.GameID.ToString(), null, null);

            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
            Assert.IsTrue(sessionEntries.Count() > 0, "ERROR: VeiwSessionSummariesInXml did not return any Sessions.");
        }

        /// <summary>
        /// Feature Test for ViewSessionSummaries - GameID, lastSessionID & lastGameID params
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Game Session ViewSessionSummaries API - GameID, lastSessionID & lastGameID params.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ViewSessionSummaries_GameIDlastSessionIDlastGameID()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            //ViewSessionSummaries
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), null, sessionState.SessionID, sessionState.GameID.ToString(), null, null);

            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
            Assert.IsTrue(sessionEntries.Count() > 0, "ERROR: VeiwSessionSummariesInXml did not return any Sessions.");
        }

        /// <summary>
        /// Feature Test for ViewSessionSummaries - GameID, Variant, lastSessionID & lastGameID params
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Game Session ViewSessionSummaries API - GameID, Variant, lastSessionID & lastGameID params.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ViewSessionSummaries_GameIDVariantlastSessionIDlastGameID()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            //ViewSessionSummaries
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), sessionState.SessionID, sessionState.GameID.ToString(), null, null);

            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
            Assert.IsTrue(sessionEntries.Count() > 0, "ERROR: VeiwSessionSummariesInXml did not return any Sessions.");
        }

        /// <summary>
        /// Feature Test for ViewSessionSummaries - GameID, Variant, SessionType, lastSessionID & lastGameID params
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Game Session ViewSessionSummaries API - GameID, Variant, SessionType, lastSessionID & lastGameID params.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ViewSessionSummaries_GameIDVariantlastSessionIDlastGameIDSessionType()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            //ViewSessionSummaries
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), sessionState.SessionID, sessionState.GameID.ToString(), null, ShowSessionType.Active.ToString());

            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
            Assert.IsTrue(sessionEntries.Count() > 0, "ERROR: VeiwSessionSummariesInXml did not return any Sessions.");
        }

        /// <summary>
        /// Feature Test for ViewSessionSummaries - Player Not in Session
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Game Session ViewSessionSummaries API - Player Not in Session.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_PlayerNotInSession()
        {
            // End all active sessions for the player not in the session for more robust test
            EndAllActiveSessions(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            //ViewSessionSummaries by Player Not in Session
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;   //player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), String.Empty, String.Empty, "10", ShowSessionType.Active.ToString());

            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
            Assert.IsTrue(sessionEntries.Count()== 0, "ERROR: VeiwSessionSummariesInXml  returned Sessions.");
        }

        
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify that veiw session summaries filters sessions by session type")]
        [TestProperty("Type", "Features")]
        public void P_ViewSessionSummaries_SessionType()
        {
            //for robust test, we are using the non-frequent players to avoid this test failure due to > 1000 sessions limit
            Assert.IsTrue(TestAreaBase.users.Count >= 4, "Should have at least 4  users under <preExistingUsers> node in App.config for selected environment");
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, new InactivityWarningBehavior(), true, "TestGame");
            SessionState sessionState1 = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password);
            SessionState sessionState2 = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password);
            AssertCreateSessionState(creationData, sessionState1);
            AssertCreateSessionState(creationData, sessionState2);

            JoinData joinData1 = InitializeJoinData(sessionState1.GameID, sessionState1.SessionID, 1);
            JoinData joinData2 = InitializeJoinData(sessionState2.GameID, sessionState2.SessionID, 1);
            this.GameSessionProxy.JoinSession(sessionState1.SessionID, joinData1, TestAreaBase.users[3].MemberName, TestAreaBase.users[3].Password);
            this.GameSessionProxy.JoinSession(sessionState2.SessionID, joinData2, TestAreaBase.users[3].MemberName, TestAreaBase.users[3].Password);

            this.GameStateProxy.PostGameEnd(sessionState1.SessionID, sessionState1.GameID.ToString(), TestAreaBase.GetDefaultTwoPlayerGameResult(sessionState1.GameID.ToString(), (uint)sessionState1.Variant), TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password);

            Thread.Sleep(20000);

            SessionEntry[] activeSessionEntries = this.GameSessionProxy.ViewSessionSummaries(Constants.TESTGAMEID.ToString(), String.Empty, String.Empty, String.Empty, "1000", ShowSessionType.Active.ToString(), TestAreaBase.users[3].MemberName, TestAreaBase.users[3].Password);
            SessionEntry[] closedSessionEntries = this.GameSessionProxy.ViewSessionSummaries(Constants.TESTGAMEID.ToString(), String.Empty, String.Empty, String.Empty, "1000", ShowSessionType.InActive.ToString(), TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password);
            Assert.IsNotNull(activeSessionEntries);
            Assert.IsNotNull(closedSessionEntries);

            bool foundClosedSession = false;
            bool foundActiveSession = false;
            foreach (SessionEntry sessionEntry in closedSessionEntries)
            {
                Assert.AreEqual(true, sessionEntry.IsComplete, "Error: Found a session that is Active. Expected all the sessions in the list to be closed.");
                if (sessionEntry.SessionID == sessionState1.SessionID)
                    foundClosedSession = true;
                if (sessionEntry.SessionID == sessionState2.SessionID)
                    foundActiveSession = true;
            }
            Assert.AreEqual(false, foundActiveSession, "Active session found in the non-active session list.");
            //Note: It is possible that test might fail here if the user has more than 1000 sessions that are closed and the session that we are looking for is not in the 1000 list. 
            //(However it is less likely that the user will have that many sessions since we garbage collect sessions.)
            Assert.AreEqual(true, foundClosedSession, "Completed session not found in the non-active session list.");

            foundClosedSession = false;
            foundActiveSession = false;
            foreach (SessionEntry sessionEntry in activeSessionEntries)
            {
                Assert.AreEqual(false, sessionEntry.IsComplete, "Error: Found a session that is complete. Expected all the sessions to be active.");
                if (sessionEntry.SessionID == sessionState1.SessionID)
                    foundClosedSession = true;
                if (sessionEntry.SessionID == sessionState2.SessionID)
                    foundActiveSession = true;
            }
            Assert.AreEqual(false, foundClosedSession, "Completed session found in the active session list.");
            //Note: It is possible that test might fail here if the user has more than 1000 sessions that are active and the session that we are looking for is not in the 1000 list. 
            //(However it is less likely that the user will have that many sessions since we garbage collect sessions.)
            Assert.AreEqual(true, foundActiveSession, "Active session not found in the active session list.");
        }

        //related bug 5129
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify that we get a bad request for if session number exceeds max allowed number of sessions.")]
        [TestProperty("Type", "Features")]
        public void N_ViewSessionSummaries_MaxPlus1SessionNumber()
        {
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, new InactivityWarningBehavior(), true, "TestGame");
            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            AssertCreateSessionState(creationData, sessionState);

            try
            {
                this.GameSessionProxy.ViewSessionSummaries(Constants.TESTGAMEID.ToString(), String.Empty, String.Empty, String.Empty, "1001", ShowSessionType.Active.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("Expected a Bad Resquest as the max allowed session number is exceeded.");
            }
            catch (RestException ex)
            {
                VerifyException(400, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidMaxSessionsParam), ex.Response);
            }
        }

        //related bug 5129
        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that default number of sessions is 100.")]
        [TestProperty("Type", "Features")]
        public void P_ViewSessionSummaries_DefaultSessionNumber()
        {
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, new InactivityWarningBehavior(), true, "TestGame");
            SessionState sessionState;
            for (int i = 0; i < 25; i++)
            {
                sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                AssertCreateSessionState(creationData, sessionState);
            }
            SessionEntry[] sessionEntries = this.GameSessionProxy.ViewSessionSummaries(Constants.TESTGAMEID.ToString(), String.Empty, String.Empty, String.Empty, "", ShowSessionType.All.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            Assert.IsNotNull(sessionEntries);
            Assert.AreEqual(20, sessionEntries.Length, "Error: Incorrect default number of sessions!");
        }

        //this test takes about 20 minutes
        //related bug 5129
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify that we can get summary of 1000 sessions in a single call.")]
        [TestProperty("Type", "Features")]
        public void P_ViewSessionSummaries_MaxSessionNumber()
        {
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, new InactivityWarningBehavior(), true, "TestGame");
            SessionState sessionState;
            for (int i = 0; i < 1010; i++)
            {
                sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                AssertCreateSessionState(creationData, sessionState);
            }
            SessionEntry[] sessionEntries = this.GameSessionProxy.ViewSessionSummaries(Constants.TESTGAMEID.ToString(), String.Empty, String.Empty, String.Empty, "1000", ShowSessionType.All.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            Assert.IsNotNull(sessionEntries);
            Assert.AreEqual(1000, sessionEntries.Length, "Error: Incorrect default number of sessions!");
        }

        /// <summary>
        /// Feature Test for ViewSessionSummaries - lastSessionID with No lastGameID
        /// We are no more reading last game ID. 
        /// </summary>
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Feature Test for Game Session ViewSessionSummaries API - lastSessionID with No lastGameID.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ViewSessionSummaries_lastGameIDDoesNotMatter()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            //ViewSessionSummaries
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), sessionState.SessionID, Constants.ALTERNATE_TESTGAMEID.ToString(), "10", ShowSessionType.Active.ToString());
            Assert.IsNotNull(sessionEntries);
            Assert.IsTrue(sessionEntries.Count() > 0, "ERROR: VeiwSessionSummariesInXml did not return any Sessions.");
        }

        /// <summary>
        /// Feature Test for ViewSessionSummaries - Variant with No GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Game Session ViewSessionSummaries API - Variant with No GameID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_Variant_NoGameID()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            try
            {
                //ViewSessionSummaries
                sessionEntries = this.GameSessionProxy.ViewSessionSummaries(null, sessionState.Variant.ToString(), String.Empty, String.Empty, "10", ShowSessionType.Active.ToString());
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDIsNullOrEmpty), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - Min of uint as GameID
        /// </summary>
        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - Min of uint as GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_MismatchedGameIDAndTitleId_ValidGameId()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);
            string gameId = GetGameIdOtherThanTitleId();
            try
            {
                //ViewSessionSummaries
                sessionEntries = this.GameSessionProxy.ViewSessionSummaries(gameId, sessionState.Variant.ToString(), String.Empty, String.Empty, "10", ShowSessionType.Active.ToString());
                Assert.Fail("Expected unauthorized for a gameId = "+ gameId + "Which is different from Title Id = " + Constants.TESTGAMEID);
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDDoesNotMatchPartnerTokenTitleID), restEx.Response);
            }
        }

        //Bug - 6461 - GSS: GameId - TitleId mismatch - unauthorized with invalid format error message.
        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - Min of uint as GameID
        /// </summary>
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - Min of uint as GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_MismatchedGameIDAndTitleId_InvalidGameId()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);
            string gameId = GetInvalidGameId();
            try
            {
                //ViewSessionSummaries
                sessionEntries = this.GameSessionProxy.ViewSessionSummaries(gameId, sessionState.Variant.ToString(), String.Empty, String.Empty, "10", ShowSessionType.Active.ToString());
                Assert.Fail("Expected unauthorized for a gameId = " + gameId + "Which is different from Title Id = " + Constants.TESTGAMEID);
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidGameIDFormatWhileGettingIdentity), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - String.Empty GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - String.Empty GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_EmptyStringGameID()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            try
            {
                //ViewSessionSummaries
                sessionEntries = this.GameSessionProxy.ViewSessionSummaries(String.Empty, sessionState.Variant.ToString(), String.Empty, String.Empty, "10", ShowSessionType.Active.ToString());
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDIsNullOrEmpty), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - null GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - null GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_NullGameID()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            try
            {
                //ViewSessionSummaries
                sessionEntries = this.GameSessionProxy.ViewSessionSummaries(null, sessionState.Variant.ToString(), String.Empty, String.Empty, "10", ShowSessionType.Active.ToString());
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDIsNullOrEmpty), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - Min of int as Variant
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - Min of int as Variant")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_MinVariant()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            //ViewSessionSummaries
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), int.MinValue.ToString(), String.Empty, String.Empty, "10", ShowSessionType.Active.ToString());

            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
        }

        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - Max of int as Variant
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - Max of int as Variant")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_MaxVariant()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            //ViewSessionSummaries
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), int.MaxValue.ToString(), String.Empty, String.Empty, "10", ShowSessionType.Active.ToString());

            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
        }

        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - String.Empty Variant
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - String.Empty Variant")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_EmptyStringVariant()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            //ViewSessionSummaries
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), String.Empty, String.Empty, String.Empty, "10", ShowSessionType.Active.ToString());

            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
            Assert.IsTrue(sessionEntries.Count() > 0, "ERROR: VeiwSessionSummariesInXml did not return any Sessions.");
        }

        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - LongString Variant
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - LongString Variant")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_LongStringVariant()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            try
            {
                //ViewSessionSummaries
                sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), "4434343298432830284230984302984039284329842384238423842394832943843925721483402370", String.Empty, String.Empty, "10", ShowSessionType.Active.ToString());
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidVariantFormatOnValidateQueryParams), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - One Char String Variant
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - One Char String Variant")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_OneCharStringVariant()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            //ViewSessionSummaries
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), "4", String.Empty, String.Empty, "10", ShowSessionType.Active.ToString());

            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
        }

        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - Not Exist lastSessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - Not Exist lastSessionID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_NotExist_lastSessionID()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            try
            {
                //ViewSessionSummaries
                sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), "j6b048d0-15gd-4i9d-8f65-91bz93s762f5", sessionState.GameID.ToString(), "10", ShowSessionType.Active.ToString());
            }
            catch (RestException restEx)
            {
                string msg = restEx.Message;
            }
        }

        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - LongString lastSessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - LongString lastSessionID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_LongString_lastSessionID()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            try
            {
                //ViewSessionSummaries
                sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz012", sessionState.GameID.ToString(), "10", ShowSessionType.Active.ToString());
            }
            catch (RestException restEx)
            {
                string msg = restEx.Message;
            }
        }

        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - One Char String lastSessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - One Char String lastSessionID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_OneCharString_lastSessionID()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            try
            {
                //ViewSessionSummaries
                sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), "a", sessionState.GameID.ToString(), "10", ShowSessionType.Active.ToString());
            }
            catch (RestException restEx)
            {
                string msg = restEx.Message;
            }
        }

        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - Min of int as MaxSessions
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - Min of int as MaxSessions")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_MaxSessions_MinInt()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            try
            {
                //ViewSessionSummaries
                sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), String.Empty, String.Empty, int.MinValue.ToString(), ShowSessionType.Active.ToString());
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidMaxSessionsParam), restEx.Response);
            }

        }

        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - Max of int as MaxSessions
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - Max of int as MaxSessions")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_MaxSessions_MaxInt()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            //ViewSessionSummaries
            try
            {
                sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), String.Empty, String.Empty, int.MaxValue.ToString(), ShowSessionType.Active.ToString());
                Assert.Fail("Error: Expected to get BAD REQUEST as maxSession can't be int/MaxValue");
            }
            catch (RestException rx)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidMaxSessionsParam), rx.Response);
            }

        }

        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - 0 as MaxSessions
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - 0 as MaxSessions")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_MaxSessions_Zero()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            try
            {
                //ViewSessionSummaries
                sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), String.Empty, String.Empty, "0", ShowSessionType.Active.ToString());
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidMaxSessionsParam), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - String.Empty as MaxSessions
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - String.Empty as MaxSessions")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_MaxSessions_EmptyString()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            //ViewSessionSummaries
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), String.Empty, String.Empty, String.Empty, ShowSessionType.Active.ToString());

            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
            Assert.IsTrue(sessionEntries.Count() > 0, "ERROR: VeiwSessionSummariesInXml did not return any Sessions.");
        }

        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - LongString as MaxSessions
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - LongString as MaxSessions")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_MaxSessions_LongString()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            try
            {
                //ViewSessionSummaries
                sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), String.Empty, String.Empty, "1043453453454353453534534543536768978907906735423423", ShowSessionType.Active.ToString());
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidMaxSessionsParam), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - One Char String as MaxSessions
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - One Char String as MaxSessions")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_MaxSessions_OneCharString()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            //ViewSessionSummaries
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), String.Empty, String.Empty, "1", ShowSessionType.Active.ToString());

            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
            Assert.IsTrue(sessionEntries.Count() > 0, "ERROR: VeiwSessionSummariesInXml did not return any Sessions.");
        }

        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - Not Exist ShowSessionType
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - Not Exist ShowSessionType")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_ShowSessionType_NotExist()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            try
            {
                //ViewSessionSummaries
                sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), String.Empty, String.Empty, "10", "junk");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidShowSessionTypeParam), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - String.Empty as ShowSessionType
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - String.Empty as ShowSessionType")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_ShowSessionType_EmptyString()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            //ViewSessionSummaries
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), String.Empty, String.Empty, "10", String.Empty);

            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
            Assert.IsTrue(sessionEntries.Count() > 0, "ERROR: VeiwSessionSummariesInXml did not return any Sessions.");
        }

        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - LongString as ShowSessionType
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - LongString as ShowSessionType")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_ShowSessionType_LongString()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            try
            {
                //ViewSessionSummaries
                sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), String.Empty, String.Empty, "10", "junkjsdhfjfh43943fjfklewjfkljfklsdjfsdfhsdfjksljdjfwlejrlwejrwlerjwlerjwlerjwelrmvsdoifu0qwu49");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidShowSessionTypeParam), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - One Char String as ShowSessionType
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSessionSummaries - Verify ViewSessionSummaries - One Char String as ShowSessionType")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSessionSummaries_ShowSessionType_OneCharString()
        {
            SessionState sessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);

            try
            {
                //ViewSessionSummaries
                sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), String.Empty, String.Empty, "10", "j");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidShowSessionTypeParam), restEx.Response);
            }
        }

        /// <summary>
        /// Feature Test for ViewSessionSummaries to verify  Session is marked as complete if leave policy is set to LeavingUserLosesOpponentsWin and a player left
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for ViewSessionSummaries to verify  Session is marked as complete if leave policy is set to LeavingUserLosesOpponentsWin and a player left")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ViewSessionSummaries_PlayerLeftSessionComplete()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 3, "Should have at least 3 users under <preExistingUsers> node in App.config for selected environment");

            SessionState createSessionState = null;
            SessionState preJoinSessionState = null;
            SessionState postJoinSessionState = null;
            SessionEntry[] sessionEntries = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame", SessionLeavePolicy.LeavingUserLosesOpponentsWin);

            //Create New Session
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData ,
                                                                     TestAreaBase.users[0].MemberName,
                                                                     TestAreaBase.users[0].Password);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            preJoinSessionState = createSessionState;

            // two more players joined the session
            for (int i = 1; i < 3; i++)
            {
                // Initialize JoinData
                JoinData joinData = InitializeJoinData(preJoinSessionState.GameID, preJoinSessionState.SessionID, i);

                //Join Session
                postJoinSessionState = this.GameSessionProxy.JoinSession(preJoinSessionState.SessionID.ToString(), joinData,
                                                                         TestAreaBase.users[i].MemberName,
                                                                         TestAreaBase.users[i].Password);
                //Assert SessionState
                AssertJoinSessionState(preJoinSessionState, postJoinSessionState);
                //updating seatavailable before next join session state resumes
                preJoinSessionState.SeatsAvailable = postJoinSessionState.SeatsAvailable;
            }                    

            //Player1 Leave Session
            this.GameSessionProxy.LeaveSession(postJoinSessionState.SessionID.ToString(), postJoinSessionState.GameID.ToString(),
                                                TestAreaBase.users[0].MemberName,
                                                TestAreaBase.users[0].Password);



            //Get VIewSessionSummaries and verify if this session is marked Complete
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(createSessionState.GameID.ToString(),
                                                                        createSessionState.Variant.ToString(), 
                                                                        String.Empty, 
                                                                        String.Empty, 
                                                                        "10", 
                                                                        ShowSessionType.All.ToString(),
                                                                        TestAreaBase.users[1].MemberName,
                                                                        TestAreaBase.users[1].Password);
            //Assert SessionEntries
            Assert.IsNotNull(sessionEntries);
            Assert.IsTrue(sessionEntries.Count() > 0, "ERROR: VeiwSessionSummariesInXml did not return any Sessions.");

            bool CompleteSessionFlag= false;

            foreach(SessionEntry sessionEntry in sessionEntries)
            {
                if (sessionEntry.SessionID == createSessionState.SessionID)
                {
                    CompleteSessionFlag = sessionEntry.IsComplete;
                    break;
                }
            }

            Assert.IsTrue(CompleteSessionFlag , "Error: Session is not complete after a player left from a  session with Leave policy = LeavingUserLosesOpponentsWin");

        }


        private void EndAllActiveSessions(string username, string password)
        {
            SessionEntry[] sessionEntries = null;
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(Constants.TESTGAMEID.ToString(), string.Empty, String.Empty, String.Empty, "1000", ShowSessionType.Active.ToString(), username, password);
            Assert.IsNotNull(sessionEntries);
            if (sessionEntries.Length > 0)
            {
                GameResults gameResults = new GameResults();
                gameResults.WinningSeatIndexes = new int[] { 0 };
                
                gameResults.Results = new Dictionary<int, GameResult>();

                foreach (SessionEntry sessionEntry in sessionEntries)
                {
                    try
                    {
                        this.GameStateProxy.PostGameEnd(sessionEntry.SessionID, Constants.TESTGAMEID.ToString(), gameResults, username, password);
                        TraceEx.TraceStart("Ended active session = " + sessionEntry.SessionID);
                    }
                    catch (Exception e)
                    {
                        //This might fail if it is not the user's turn.
                        TraceEx.TraceStart("Failed to end active session = " + sessionEntry.SessionID + ". exception: " + e.Message);
                    }
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Test.API\States\PostGameEnd.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using LiveN.Test.Framework.Configuration;
using Multiplayer.Test.API;
using AsyncMultiplayer.SessionCommon;
using AsyncMultiplayer.NotificationService;
using Gds.Contracts;
using System.Net;
using System.Diagnostics;
using System.Threading;
using LiveN.Test.Common.Web;
using LIVEN.Common.Diagnostics;

namespace MultiPlayer.Test.API
{
    /// <summary>
    /// Test Cases for GameState.svc PostGameEnd API
    /// </summary>
    [TestClass]
    public class PostGameEnd : TestAreaBase
    {
        
        
        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            
            LockTest();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            UnlockTest();
        }
        /// <summary>
        /// BVT test for PostGameEnd
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("BVT for GameState.svc PostGameEnd API.")]
        [TestProperty("Type", "BVTs")]
        public void BVT_PostGameEnd()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 10,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;
            this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, joinSessionState.GameID.ToString(), gameResults);
            
            //Verify Notification for Player1
            string memberName = TestAreaBase.users[0].MemberName;      // player1
            string password = TestAreaBase.users[0].Password;
            VerifyNotification(joinSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.YouWin, true, memberName, password);

            //Verify Notification for Player2
            memberName = TestAreaBase.users[1].MemberName;      // player2
            password = TestAreaBase.users[1].Password;
            VerifyNotification(joinSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.YouLose, true, memberName, password);

            //get Session state & Verify
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState sessionStateAfterGameEnd = this.GameSessionProxy.ViewSession(joinSessionState.SessionID, joinSessionState.GameID.ToString());
            
            Assert.IsTrue(sessionStateAfterGameEnd.State.IsComplete, "Error: The session does not have the isComplete flag set, SessionID: " + sessionStateAfterGameEnd.SessionID);

            

        }

        /// <summary>
        /// Test to PostGameEnd of GameState.svc to post GameResult and verify YouWin Notification
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Call PostGameEnd on GameState.svc to End a Game  & verify YouWin Notification")]
        [TestProperty("Type", "FeatureTests")]
        public void P_PostGameEnd_OnlyWinSeats()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, sessionState);

            JoinData joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            this.GameSessionProxy.JoinSession(sessionState.SessionID, joinData);

            //Get oldScore for Player1 on leaderboard
            string memberName = TestAreaBase.users[0].MemberName;      // player1
            string password = TestAreaBase.users[0].Password;

            long oldScore = long.Parse(GetLeaderboardValue("BestScore", memberName, password));
            Assert.IsNotNull(oldScore, "Player1's BeatScore on Leaderboard is null");

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(sessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = oldScore + 1,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)sessionState.Variant
            };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;
            this.GameStateProxy.PostGameEnd(sessionState.SessionID, sessionState.GameID.ToString(), gameResults);

            //Verify Notification for Player1 , we need to get notification before its get deleted by a call to view session
            memberName = TestAreaBase.users[0].MemberName;      // player1
            password = TestAreaBase.users[0].Password;
            VerifyNotification(sessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.YouWin, true, memberName, password);

            //get Session state & Verify
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState sessionStateAfterGameEnd = this.GameSessionProxy.ViewSession(sessionState.SessionID, sessionState.GameID.ToString());

            Assert.IsTrue(sessionStateAfterGameEnd.State.IsComplete, "Error: The session does not have the isComplete flag set, SessionID: " + sessionStateAfterGameEnd.SessionID);            

            long newScore = long.Parse(GetLeaderboardValue("BestScore", memberName, password));
            Assert.AreEqual(oldScore + 1, newScore, "BestScore Posted to RewardsService is wrong");
        }

        /// <summary>
        /// Test to PostGameEnd of GameState.svc to post GameResult and verify YouLose Notification
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Call PostGameEnd on GameState service to End a Game & verify YouLose Notification")]
        [TestProperty("Type", "FeatureTests")]
        public void P_PostGameEnd_OnlyLoseSeats()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, sessionState);

            JoinData joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            this.GameSessionProxy.JoinSession(sessionState.SessionID, joinData);

            //Get oldScore for Player1 on leaderboard
            string memberName = TestAreaBase.users[0].MemberName;      // player1
            string password = TestAreaBase.users[0].Password;

            long oldScore = long.Parse(GetLeaderboardValue("BestScore", memberName, password));
            Assert.IsNotNull(oldScore, "Player1's BeatScore on Leaderboard is null");

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.LosingSeatIndexes = new int[] { 0 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(sessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = oldScore,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)sessionState.Variant
            };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;
            this.GameStateProxy.PostGameEnd(sessionState.SessionID, sessionState.GameID.ToString(), gameResults);

            //Verify Notification for Player1, we need to get all notifications before a call to viewSession delete all of them
            memberName = TestAreaBase.users[0].MemberName;      // player1
            password = TestAreaBase.users[0].Password;
            VerifyNotification(sessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.YouLose, true, memberName, password);


            //get Session state & Verify
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState sessionStateAfterGameEnd = this.GameSessionProxy.ViewSession(sessionState.SessionID, sessionState.GameID.ToString());

            Assert.IsTrue(sessionStateAfterGameEnd.State.IsComplete, "Error: The session does not have the isComplete flag set, SessionID: " + sessionStateAfterGameEnd.SessionID);
            
            long newScore = long.Parse(GetLeaderboardValue("BestScore", memberName, password));
            Assert.AreEqual(oldScore , newScore, "BestScore Posted to RewardsService is wrong");
        }

        /// <summary>
        /// Test to PostGameEnd of GameState.svc to post GameResult and verify GameTie Notification
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Call PostGameEnd on GameState service to End a Game & verify GameTie Notification")]
        [TestProperty("Type", "FeatureTests")]
        public void P_PostGameEnd_OnlyTieSeats()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, sessionState);

            JoinData joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            this.GameSessionProxy.JoinSession(sessionState.SessionID, joinData);

            //get old scores
            long oldScore = long.Parse(GetLeaderboardValue("BestScore",TestAreaBase.users[0].MemberName,TestAreaBase.users[0].Password));
            Assert.IsNotNull(oldScore, "Player1's BeatScore on Leaderboard is null");

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.TierSeatIndexes = new int[] { 0 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(sessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Tie.ToString(),
                Score = oldScore,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)sessionState.Variant
            };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;
            this.GameStateProxy.PostGameEnd(sessionState.SessionID, sessionState.GameID.ToString(), gameResults);

            //Verify Notification for Player1, we need to get notificatins before a call to viewSession delete all of them
            string memberName = TestAreaBase.users[0].MemberName;      // player1
            string password = TestAreaBase.users[0].Password;
            VerifyNotification(sessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.GameTie, true, memberName, password);

            //get Session state & Verify
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState sessionStateAfterGameEnd = this.GameSessionProxy.ViewSession(sessionState.SessionID, sessionState.GameID.ToString());

            Assert.IsTrue(sessionStateAfterGameEnd.State.IsComplete, "Error: The session does not have the isComplete flag set, SessionID: " + sessionStateAfterGameEnd.SessionID);
            
            long newScore = long.Parse(GetLeaderboardValue("BestScore", memberName, password));
            Assert.AreEqual(oldScore, newScore, "BestScore Posted to RewardsService is wrong");
        }

        /// <summary>
        /// Test to PostGameEnd of GameState.svc to post GameResult and verify GameOver Notification
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Call PostGameEnd on GameState service to End a Game & verify GameOver Notification")]
        [TestProperty("Type", "FeatureTests")]
        public void P_PostGameEnd_OnlyGameOverSeats()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, sessionState);

            JoinData joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            this.GameSessionProxy.JoinSession(sessionState.SessionID, joinData);

            //get old scores for first player
            long oldScore = long.Parse(GetLeaderboardValue("BestScore", TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password));
            Assert.IsNotNull(oldScore, "Player1's BeatScore on Leaderboard is null");

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.GameOverSeatIndexes = new int[] { 0 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(sessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.None.ToString(),
                Score = oldScore,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)sessionState.Variant
            };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;
            this.GameStateProxy.PostGameEnd(sessionState.SessionID, sessionState.GameID.ToString(), gameResults);

            //Verify Notification for Player1, we need to get all notifications before a call to viewSession delete all of them
            string memberName = TestAreaBase.users[0].MemberName;      // player1
            string password = TestAreaBase.users[0].Password;
            VerifyNotification(sessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.GameOver, true, memberName, password);

            //get Session state & Verify
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState sessionStateAfterGameEnd = this.GameSessionProxy.ViewSession(sessionState.SessionID, sessionState.GameID.ToString());

            Assert.IsTrue(sessionStateAfterGameEnd.State.IsComplete, "Error: The session does not have the isComplete flag set, SessionID: " + sessionStateAfterGameEnd.SessionID);            

            long newScore = long.Parse(GetLeaderboardValue("BestScore", memberName, password));
            Assert.AreEqual(oldScore, newScore, "BestScore Posted to RewardsService is wrong");
        }

        /// <summary>
        /// Test to PostGameEnd of GameState.svc to post GameResult by Player who is NOT in Session
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call PostGameEnd on GameState service by Player who is NOT in Session")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PostGameEnd_PlayerNotInSession()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, sessionState);

            JoinData joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            this.GameSessionProxy.JoinSession(sessionState.SessionID, joinData);

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(sessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 15,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)sessionState.Variant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(sessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)sessionState.Variant
            };

            this.GameStateProxy.UserID = TestAreaBase.users[2].MemberName;      // player3
            this.GameStateProxy.Password = TestAreaBase.users[2].Password;

            try
            {
                this.GameStateProxy.PostGameEnd(sessionState.SessionID, sessionState.GameID.ToString(), gameResults);
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.UserNotAllowedToSubmitResultsForSession), restEx.Response);
            }
        }

        /// <summary>
        /// Test to PostGameEnd of GameState.svc to post GameResult with SessionID as NoDashesGuid
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call PostGameEnd on GameState service with SessionID as NoDashesGuid")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PostGameEnd_NoDashesGuidSessionID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 15,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            string sessionIDNoDashes = joinSessionState.SessionID.Replace("-", "");

            try
            {
                this.GameStateProxy.PostGameEnd(sessionIDNoDashes, joinSessionState.GameID.ToString(), gameResults);
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// Test to PostGameEnd of GameState.svc to post GameResult with SessionID which doesn't exist
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call PostGameEnd on GameState service with SessionID which doesn't exist")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PostGameEnd_NotExistSessionID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 15,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                this.GameStateProxy.PostGameEnd("j6b048d0-15gd-4i9d-8f65-91bz93s762f5", joinSessionState.GameID.ToString(), gameResults);
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// Test to PostGameEnd of GameState.svc to post GameResult with String.Empty as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call PostGameEnd on GameState service with String.Empty as SessionID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PostGameEnd_EmptyStringSessionID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 15,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                this.GameStateProxy.PostGameEnd(String.Empty, joinSessionState.GameID.ToString(), gameResults);
                Assert.Fail("Error: Expected to get  NOT FOUND exception but it didnt");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, restEx.Response);
            }
        }

        /// <summary>
        /// Test to PostGameEnd of GameState.svc to post GameResult with null as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call PostGameEnd on GameState service with null as SessionID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PostGameEnd_NullStringSessionID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 15,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                this.GameStateProxy.PostGameEnd(null, joinSessionState.GameID.ToString(), gameResults);
                Assert.Fail("Error: Expected to get NOT FOUND exception but it didnt");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, restEx.Response);
            }
        }

        /// <summary>
        /// Test to PostGameEnd of GameState.svc to post GameResult with Long String as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call PostGameEnd on GameState service with Long String as SessionID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PostGameEnd_LongStringSessionID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 15,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                this.GameStateProxy.PostGameEnd("j6b048d0-15gd-4i9d-8f65-91bz93s762f5-j6b048d0-15gd-4i9d-8f65-91bz93s762f5-j6b048d0-15gd-4i9d-8f65-91bz93s762f5-j6b048d0-15gd-4i9d-8f65-91bz93s762f5", joinSessionState.GameID.ToString(), gameResults);
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// Test to PostGameEnd of GameState.svc to post GameResult with One Char String as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call PostGameEnd on GameState service with One Char String as SessionID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PostGameEnd_OneCharStringSessionID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 15,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                this.GameStateProxy.PostGameEnd("1", joinSessionState.GameID.ToString(), gameResults);
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// Test to PostGameEnd of GameState.svc to post GameResult with uint.MinValue as GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call PostGameEnd on GameState service with uint.MinValue as GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PostGameEnd_MinGameID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 15,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, uint.MinValue.ToString(), gameResults);
            }
            catch (RestException restEx)
            {
                //TODO: We are getting GameIDOrVariantIsNotInGMS error b/c the GameID = uint.MinValue doesn't exist in GMS
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDDoesNotMatchPartnerTokenTitleID), restEx.Response);
            }
        }

        /// <summary>
        /// Test to PostGameEnd of GameState.svc to post GameResult with uint.MaxValue as GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call PostGameEnd on GameState service with uint.MaxValue as GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PostGameEnd_MaxGameID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 15,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, uint.MaxValue.ToString(), gameResults);
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDDoesNotMatchPartnerTokenTitleID), restEx.Response);
            }
        }

        /// <summary>
        /// Test to PostGameEnd of GameState.svc to post GameResult with Zero as GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call PostGameEnd on GameState service with Zero as GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PostGameEnd_ZeroGameID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 15,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, "0", gameResults);
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDDoesNotMatchPartnerTokenTitleID), restEx.Response);
            }
        }

        /// <summary>
        /// Test to PostGameEnd of GameState.svc to post GameResult with GameID which doesn't exist
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call PostGameEnd on GameState service with GameID which doesn't exist")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PostGameEnd_NotExistGameID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 15,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, "1", gameResults);
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDDoesNotMatchPartnerTokenTitleID), restEx.Response);
            }
        }

        /// <summary>
        /// Test to PostGameEnd of GameState.svc to post GameResult with String.Empty as GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call PostGameEnd on GameState service with String.Empty as GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PostGameEnd_EmptyStringGameID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 15,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, String.Empty, gameResults);
            }
            catch (RestException restEx)
            {                
                VerifyException(HttpStatusCode.NotFound, restEx.Response);
            }
        }

        /// <summary>
        /// Test to PostGameEnd of GameState.svc to post GameResult with null as GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call PostGameEnd on GameState service with null as GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PostGameEnd_NullGameID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 15,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, null, gameResults);
            }
            catch (RestException restEx)
            {             
                VerifyException(HttpStatusCode.NotFound, restEx.Response);
            }
        }

        /// <summary>
        /// Test to PostGameEnd of GameState.svc to post GameResult with Long String as GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call PostGameEnd on GameState service with Long String as GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PostGameEnd_LongStringGameID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 15,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, "1234567891234567890", gameResults);
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidGameIDFormatWhileGettingIdentity), restEx.Response);
            }
        }

        /// <summary>
        /// Test to PostGameEnd of GameState.svc to post GameResult with One Char String as GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call PostGameEnd on GameState service with One Char String as GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PostGameEnd_OneCharStringGameID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 15,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, "A", gameResults);
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidGameIDFormatWhileGettingIdentity), restEx.Response);
            }
        }

        /// <summary>
        /// Feature Test for GameState svc PostGameEnd API with GameResults.WinningSeatIndexes as null
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("Feature Test for GameState svc PostGameEnd API with GameResults.WinningSeatIndexes as null")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PostGameEnd_GameResults_NullWinSeats()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //Get Leaderboard score for Player2 Losing Seat
            string memberName = TestAreaBase.users[1].MemberName;      // player2
            string password = TestAreaBase.users[1].Password;

            long oldScore = long.Parse(GetLeaderboardValue("BestScore", memberName, password));
            Assert.IsNotNull(oldScore, "No Score exist for this player on Leaderboard");

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = null;
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            /*
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 15,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };
             */
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = oldScore + 1,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;
            this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, joinSessionState.GameID.ToString(), gameResults);

            //get Session state & Verify
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState sessionStateAfterGameEnd = this.GameSessionProxy.ViewSession(joinSessionState.SessionID, joinSessionState.GameID.ToString());

            Assert.IsTrue(sessionStateAfterGameEnd.State.IsComplete, "Error: The session does not have the isComplete flag set, SessionID: " + sessionStateAfterGameEnd.SessionID);
            /*
            //Verify Notification for Player1
            string memberName = TestAreaBase.users[0].MemberName;      // player1
            string password = TestAreaBase.users[0].Password;
            VerifyNotification(joinSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.YouWin, true, memberName, password);
            */
            //Verify Notification for Player2
            memberName = TestAreaBase.users[1].MemberName;      // player2
            password = TestAreaBase.users[1].Password;
            VerifyNotification(joinSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.YouLose, true, memberName, password);

            long newScore = long.Parse(GetLeaderboardValue("BestScore", memberName, password));
            Assert.AreEqual(oldScore + 1, newScore, "BestScore Posted to RewardsService is wrong");
        }

        /// <summary>
        /// Feature Test for GameState svc PostGameEnd API with GameResults.LosingSeatIndexes as null
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("Feature Test for GameState svc PostGameEnd API with GameResults.LosingSeatIndexes as null")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PostGameEnd_GameResults_NullLoseSeats()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //Get Leaderboard score for Player1 Win Seat
            string memberName = TestAreaBase.users[0].MemberName;      // player1
            string password = TestAreaBase.users[0].Password;

            long oldScore = long.Parse(GetLeaderboardValue("BestScore", memberName, password));
            Assert.IsNotNull(oldScore, "No Score exist for this player on Leaderboard");

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = null;
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = oldScore + 1,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };
            /*
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = oldScore + 1,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };
            */
            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;
            this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, joinSessionState.GameID.ToString(), gameResults);

            //Verify Notification for Player1, we need to get notifications before  a call to viewSession delete all notificatins for the caller
            memberName = TestAreaBase.users[0].MemberName;      // player1
            password = TestAreaBase.users[0].Password;
            VerifyNotification(joinSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.YouWin, true, memberName, password);

            //get Session state & Verify
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState sessionStateAfterGameEnd = this.GameSessionProxy.ViewSession(joinSessionState.SessionID, joinSessionState.GameID.ToString());

            Assert.IsTrue(sessionStateAfterGameEnd.State.IsComplete, "Error: The session does not have the isComplete flag set, SessionID: " + sessionStateAfterGameEnd.SessionID);
            
            /*
            //Verify Notification for Player2
            memberName = TestAreaBase.users[1].MemberName;      // player2
            password = TestAreaBase.users[1].Password;
            VerifyNotification(joinSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.YouLose, true, memberName, password);
            */
            long newScore = long.Parse(GetLeaderboardValue("BestScore", memberName, password));
            Assert.AreEqual(oldScore + 1, newScore, "BestScore Posted to RewardsService is wrong");
        }

        /// <summary>
        /// Feature Test for GameState svc PostGameEnd API with GameResults.LosingSeatIndexes as null
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("Feature Test for GameState svc PostGameEnd API with GameResults.LosingSeatIndexes as null")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PostGameEnd_GameResults_NullTieSeats()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //Get Leaderboard score for Player1 Win Seat
            string memberName = TestAreaBase.users[0].MemberName;      // player1
            string password = TestAreaBase.users[0].Password;

            long oldScore = long.Parse(GetLeaderboardValue("BestScore", memberName, password));
            Assert.IsNotNull(oldScore, "No Score exist for this player on Leaderboard");

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.TierSeatIndexes = null;
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = oldScore + 1,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;
            this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, joinSessionState.GameID.ToString(), gameResults);

            //Verify Notification for Player1, we need to get notification for a user before he make a call to viewSession which will delete his notifications
            memberName = TestAreaBase.users[0].MemberName;      // player1
            password = TestAreaBase.users[0].Password;
            VerifyNotification(joinSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.YouWin, true, memberName, password);


            //get Session state & Verify
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState sessionStateAfterGameEnd = this.GameSessionProxy.ViewSession(joinSessionState.SessionID, joinSessionState.GameID.ToString());

            Assert.IsTrue(sessionStateAfterGameEnd.State.IsComplete, "Error: The session does not have the isComplete flag set, SessionID: " + sessionStateAfterGameEnd.SessionID);
           
            //Verify Notification for Player2
            memberName = TestAreaBase.users[1].MemberName;      // player2
            password = TestAreaBase.users[1].Password;
            VerifyNotification(joinSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.YouLose, true, memberName, password);

            //Get BestScore on Leaderboard for Player1
            memberName = TestAreaBase.users[0].MemberName;      // player2
            password = TestAreaBase.users[0].Password;
            long newScore = long.Parse(GetLeaderboardValue("BestScore", memberName, password));
            Assert.AreEqual(oldScore + 1, newScore, "BestScore Posted to RewardsService is wrong");
        }
        
        //regression test for 1739
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify that making move after post game end is not allowed.")]
        [TestProperty("Type", "Features")]
        public void N_PostGameEnd_MoveAfterGameEnded()
        {
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, new InactivityWarningBehavior(), true, "TestGame");
            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            AssertCreateSessionState(creationData, sessionState);

            JoinData joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 1);
            this.GameSessionProxy.JoinSession(sessionState.SessionID, joinData, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            this.GameStateProxy.PostGameEnd(sessionState.SessionID, sessionState.GameID.ToString(), TestAreaBase.GetDefaultTwoPlayerGameResult(sessionState.GameID.ToString(), (uint)sessionState.Variant), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            //get session state & verify game end
            SessionState sessionStateAfterGameEnd = this.GameSessionProxy.ViewSession(sessionState.SessionID, sessionState.GameID.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            Assert.IsTrue(sessionStateAfterGameEnd.State.IsComplete, "Error: The session does not have the isComplete flag set, SessionID: " + sessionStateAfterGameEnd.SessionID);

            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            try
            {
                this.GameStateProxy.PutGameState(sessionState.SessionID, sessionState.GameID.ToString(), modifiableGameState, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("Expected forbidden as we should not allow to make a move after game ended.");
            }
            catch (RestException ex)
            {
                VerifyException(403, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.OperationNotAllowedForCompleteSession), ex.Response);
            }

            try
            {
                this.GameStateProxy.PutGameState(sessionState.SessionID, sessionState.GameID.ToString(), modifiableGameState, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
                Assert.Fail("Expected forbidden as we should not allow to make a move after game ended.");
            }
            catch (RestException ex)
            {
                VerifyException(403, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.OperationNotAllowedForCompleteSession), ex.Response);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify that trying to modify session after post game end is not allowed.")]
        [TestProperty("Type", "Features")]
        public void N_PostGameEnd_ModifySessionAfterGameEnded()
        {
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, new InactivityWarningBehavior(), true, "TestGame");
            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            AssertCreateSessionState(creationData, sessionState);

            JoinData joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 1);
            this.GameSessionProxy.JoinSession(sessionState.SessionID, joinData, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            this.GameStateProxy.PostGameEnd(sessionState.SessionID, sessionState.GameID.ToString(), TestAreaBase.GetDefaultTwoPlayerGameResult(sessionState.GameID.ToString(), (uint)sessionState.Variant), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            //get session state & verify game end
            SessionState sessionStateAfterGameEnd = this.GameSessionProxy.ViewSession(sessionState.SessionID, sessionState.GameID.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            Assert.IsTrue(sessionStateAfterGameEnd.State.IsComplete, "Error: The session does not have the isComplete flag set, SessionID: " + sessionStateAfterGameEnd.SessionID);

            ModificationData modificationData = InitializeModificationData(sessionState);
            try
            {
                this.GameSessionProxy.ModifySession(sessionState.SessionID.ToString(), sessionState.GameID.ToString(), modificationData, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("Expected forbidden as we should not allow to modify session after game ended.");
            }
            catch (RestException ex)
            {
                VerifyException(403, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.OperationNotAllowedForCompleteSession), ex.Response);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify that trying to join a session that is completed is not allowed.")]
        [TestProperty("Type", "Features")]
        public void N_PostGameEnd_JoinSessionAfterGameEnded()
        {
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, new InactivityWarningBehavior(), true, "TestGame");
            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            AssertCreateSessionState(creationData, sessionState);

            JoinData joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 1);
            this.GameSessionProxy.JoinSession(sessionState.SessionID, joinData, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            this.GameStateProxy.PostGameEnd(sessionState.SessionID, sessionState.GameID.ToString(), TestAreaBase.GetDefaultTwoPlayerGameResult(sessionState.GameID.ToString(), (uint)sessionState.Variant), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            //get session state & verify game end
            SessionState sessionStateAfterGameEnd = this.GameSessionProxy.ViewSession(sessionState.SessionID, sessionState.GameID.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            Assert.IsTrue(sessionStateAfterGameEnd.State.IsComplete, "Error: The session does not have the isComplete flag set, SessionID: " + sessionStateAfterGameEnd.SessionID);

            joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 2);
            try
            {
                this.GameSessionProxy.JoinSession(sessionState.SessionID, joinData, TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password);
                Assert.Fail("Expected forbidden as we should not allow to join session after game ended.");
            }
            catch (RestException ex)
            {
                VerifyException(403, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.OperationNotAllowedForCompleteSession), ex.Response);
            }
        }


        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify that trying to post a game result for a session that is already completed is not allowed.")]
        [TestProperty("Type", "Features")]
        public void N_PostGameEnd_PostGameEndAfterGameEnded()
        {
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, new InactivityWarningBehavior(), true, "TestGame");
            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            AssertCreateSessionState(creationData, sessionState);

            JoinData joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 1);
            this.GameSessionProxy.JoinSession(sessionState.SessionID, joinData, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            this.GameStateProxy.PostGameEnd(sessionState.SessionID, sessionState.GameID.ToString(), TestAreaBase.GetDefaultTwoPlayerGameResult(sessionState.GameID.ToString(), (uint)sessionState.Variant), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            //get session state & verify game end
            SessionState sessionStateAfterGameEnd = this.GameSessionProxy.ViewSession(sessionState.SessionID, sessionState.GameID.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            Assert.IsTrue(sessionStateAfterGameEnd.State.IsComplete, "Error: The session does not have the isComplete flag set, SessionID: " + sessionStateAfterGameEnd.SessionID);

            try
            {
                this.GameStateProxy.PostGameEnd(sessionState.SessionID, sessionState.GameID.ToString(), TestAreaBase.GetDefaultTwoPlayerGameResult(sessionState.GameID.ToString(), (uint)sessionState.Variant), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("Expected forbidden as we should not allow to post game end after game ended.");
            }
            catch (RestException ex)
            {
                VerifyException(403, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.OperationNotAllowedForCompleteSession), ex.Response);
            }
        }


        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify that trying to send a user nudge for a session that is completed is not allowed.")]
        [TestProperty("Type", "Features")]
        public void N_PostGameEnd_PostGameActionAfterGameEnded()
        {
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, new InactivityWarningBehavior(), true, "TestGame");
            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            AssertCreateSessionState(creationData, sessionState);

            JoinData joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 1);
            this.GameSessionProxy.JoinSession(sessionState.SessionID, joinData, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            this.GameStateProxy.PostGameEnd(sessionState.SessionID, sessionState.GameID.ToString(), TestAreaBase.GetDefaultTwoPlayerGameResult(sessionState.GameID.ToString(), (uint)sessionState.Variant), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            //get session state & verify game end
            SessionState sessionStateAfterGameEnd = this.GameSessionProxy.ViewSession(sessionState.SessionID, sessionState.GameID.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            Assert.IsTrue(sessionStateAfterGameEnd.State.IsComplete, "Error: The session does not have the isComplete flag set, SessionID: " + sessionStateAfterGameEnd.SessionID);

            // Do PostGameAction with a UserNudge as ActionType
            GameAction gameAction = new GameAction();
            gameAction.ActionType = GameActionType.UserNudge;
            gameAction.ActionData = new byte[] { 1 };
            gameAction.ActionTime = DateTime.Now;
            gameAction.SequenceNumber = 1;

            try
            {
                this.GameStateProxy.PostGameAction(sessionState.SessionID.ToString(), sessionState.GameID.ToString(), gameAction, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("Expected forbidden as we should not allow to post game action after game ended.");
            }
            catch (RestException ex)
            {
                VerifyException(403, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.OperationNotAllowedForCompleteSession), ex.Response);
            }
        }

        //related bug 1863
        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify contents of you win, you lose, game over and game tie notifications.")]
        [TestProperty("Type", "Features")]
        public void P_PostGameEnd_NotificationsContent()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 4, "We need at least 4 users for this testcase.");
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");
            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            AssertCreateSessionState(creationData, sessionState);

            JoinData joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 1);
            this.GameSessionProxy.JoinSession(sessionState.SessionID.ToString(), joinData, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 2);
            this.GameSessionProxy.JoinSession(sessionState.SessionID.ToString(), joinData, TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password);
            joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 3);
            this.GameSessionProxy.JoinSession(sessionState.SessionID.ToString(), joinData, TestAreaBase.users[3].MemberName, TestAreaBase.users[3].Password);

            //Delete pre-existing notifications 
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password);
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[3].MemberName, TestAreaBase.users[3].Password);

            GameResults gameResults = TestAreaBase.GetDefaultTwoPlayerGameResult(sessionState.GameID.ToString(), (uint)sessionState.Variant);
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.GameOverSeatIndexes = new int[] { 1 };
            gameResults.LosingSeatIndexes = new int[] { 2 };
            gameResults.TierSeatIndexes = new int[] { 3 };

            this.GameStateProxy.PostGameEnd(sessionState.SessionID, sessionState.GameID.ToString(), gameResults, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            Thread.Sleep(20000);
            this.NotificationsServiceProxy.Locale = "en-US";

            Notification youWinNotification = GetNotification(sessionState.GameID.ToString(), sessionState.SessionID, Notification.NotificationType.YouWin.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            Notification gameOverNotification = GetNotification(sessionState.GameID.ToString(), sessionState.SessionID, Notification.NotificationType.GameOver.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Notification youLoseNotification = GetNotification(sessionState.GameID.ToString(), sessionState.SessionID, Notification.NotificationType.YouLose.ToString(), TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password);
            Notification gameTieNotification = GetNotification(sessionState.GameID.ToString(), sessionState.SessionID, Notification.NotificationType.GameTie.ToString(), TestAreaBase.users[3].MemberName, TestAreaBase.users[3].Password);

            ValidateNotificationContent(youWinNotification, "You Win", "Xbox LIVE", "");
            ValidateNotificationContent(gameOverNotification, "Game Over", "Xbox LIVE", "");
            ValidateNotificationContent(youLoseNotification, "You Lose", "Xbox LIVE", "");
            ValidateNotificationContent(gameTieNotification, "Tie Game", "Xbox LIVE", "");
        }


        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify that best score of winner from LeaderBoard after Game end.")]
        [TestProperty("Type", "Features")]
        public void P_PostGameEnd_LeaderboardBestScore()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //Get BestScore of Player1 on Leaderboard
            string memberName = TestAreaBase.users[0].MemberName;      // player1
            string password = TestAreaBase.users[0].Password;
            long oldScore = long.Parse(GetLeaderboardValue("BestScore", memberName, password));
            Assert.IsNotNull(oldScore, "Player's BestScore is null");

            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = oldScore + 1,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 10,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;
            this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, joinSessionState.GameID.ToString(), gameResults);

            //Verify Notification for Player1, we need to get notification for a user making call to viewsession, which delete his notifications
            memberName = TestAreaBase.users[0].MemberName;      // player1
            password = TestAreaBase.users[0].Password;
            VerifyNotification(joinSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.YouWin, true, memberName, password);

            //get Session state & Verify
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState sessionStateAfterGameEnd = this.GameSessionProxy.ViewSession(joinSessionState.SessionID, joinSessionState.GameID.ToString());

            Assert.IsTrue(sessionStateAfterGameEnd.State.IsComplete, "Error: The session does not have the isComplete flag set, SessionID: " + sessionStateAfterGameEnd.SessionID);            

            //Verify Notification for Player2
            memberName = TestAreaBase.users[1].MemberName;      // player2
            password = TestAreaBase.users[1].Password;
            VerifyNotification(joinSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.YouLose, true, memberName, password);

            //Get BestScore of Player1 on Leaderboard
            memberName = TestAreaBase.users[0].MemberName;      // player1
            password = TestAreaBase.users[0].Password;
            long newScore = long.Parse(GetLeaderboardValue("BestScore", memberName, password));
            Assert.AreEqual(oldScore + 1, newScore, "BestScore Posted to RewardsService is wrong");
        }

        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Verify that trying to leave a session that is completed is allowed.")]
        [TestProperty("Type", "Features")]
        public void P_PostGameEnd_LeaveSessionAfterGameEnded()
        {
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, new InactivityWarningBehavior(), true, "TestGame");
            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            AssertCreateSessionState(creationData, sessionState);

            JoinData joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 1);
            SessionState joinSession = this.GameSessionProxy.JoinSession(sessionState.SessionID, joinData, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            SessionState preGameEndSession = joinSession;

            this.GameStateProxy.PostGameEnd(sessionState.SessionID, sessionState.GameID.ToString(), TestAreaBase.GetDefaultTwoPlayerGameResult(sessionState.GameID.ToString(), (uint)sessionState.Variant), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            //get session state & verify game end
            SessionState sessionStateAfterGameEnd = this.GameSessionProxy.ViewSession(sessionState.SessionID, sessionState.GameID.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            Assert.IsTrue(sessionStateAfterGameEnd.State.IsComplete, "Error: The session does not have the isComplete flag set, SessionID: " + sessionStateAfterGameEnd.SessionID);
            try
            {
                this.GameSessionProxy.LeaveSession(sessionState.SessionID, sessionState.GameID.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            }
            catch (RestException resx)
            {
                throw new RestException(resx.Response, resx.Message + " Unable to leave session after game ended");
            }
        }

        /// <summary>
        /// Feature test for PostGameEnd- verify if variant is on YouWin notification
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("Feature Test for GameState.svc PostGameEnd API -Verify if variant is on YouWin notification .")]
        [TestProperty("Type", "FeatureTests")]
        public void P_PostGameEnd_VariantOnYouWnNotification()
        {
            //set variant name that would be posted on notifications
            uint NotificationVariant = 2; 
            // Initialize CreationData
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, (int)NotificationVariant, 10, 10, new byte[] { 1, 2, 3}, new InactivityWarningBehavior(), true, "TestGame");

            // player1 create session
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                                    TestAreaBase.users[0].MemberName,
                                                                                    TestAreaBase.users[0].Password);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //player 2 join session
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                               TestAreaBase.users[1].MemberName,
                                                                               TestAreaBase.users[1].Password);
            //Delete existing notifications
            TestAreaBase.notificationCommon.CheckNotificationCount(joinSessionState.GameID.ToString(), joinSessionState.SessionID,
                                           TestAreaBase.users[0].MemberName,
                                           TestAreaBase.users[0].Password);
            //Delete existing notifications
            TestAreaBase.notificationCommon.CheckNotificationCount(joinSessionState.GameID.ToString(), joinSessionState.SessionID,
                                           TestAreaBase.users[1].MemberName,
                                           TestAreaBase.users[1].Password);

            //set gameResults             
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 10,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = NotificationVariant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = NotificationVariant
            };

            //post game end by player 1
            this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, joinSessionState.GameID.ToString(), gameResults,
                                            TestAreaBase.users[0].MemberName,
                                            TestAreaBase.users[0].Password);
            
            //Verify Notification for Player1
            string memberName = TestAreaBase.users[0].MemberName;      // player1
            string password = TestAreaBase.users[0].Password;
            VerifyNotification(joinSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.YouWin, true, memberName, password);
                            
            this.NotificationsServiceProxy.Locale = "en-US";

            //get YouWin Notification and verify that it contains the right variant
            Notification youWinNotification = GetNotification(joinSessionState.GameID.ToString(), joinSessionState.SessionID, Notification.NotificationType.YouWin.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            
            Assert.AreEqual<uint>(NotificationVariant, youWinNotification.Variant, "Error: Variant name is not in notification");
            
        
        }

        /// <summary>
        /// Feature test for PostGameEnd - verify if variant name is on YouLose notification
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("Feature Test for GameState.svc PostGameEnd API -Verify if variant is on YouLose notification .")]
        [TestProperty("Type", "FeatureTests")]
        public void P_PostGameEnd_VariantOnYouLoseNotification()
        {
            //set variant name that would posted on notifications
            uint NotificationVariant = 2; 
            // Initialize CreationData
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID,(int) NotificationVariant, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");

            // player1 create session
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                                    TestAreaBase.users[0].MemberName,
                                                                                    TestAreaBase.users[0].Password);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //player 2 join session
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                               TestAreaBase.users[1].MemberName,
                                                                               TestAreaBase.users[1].Password);

            //Delete existing notifications
            TestAreaBase.notificationCommon.CheckNotificationCount(joinSessionState.GameID.ToString(), joinSessionState.SessionID,
                                           TestAreaBase.users[0].MemberName,
                                           TestAreaBase.users[0].Password);
            //Delete existing notifications
            TestAreaBase.notificationCommon.CheckNotificationCount(joinSessionState.GameID.ToString(), joinSessionState.SessionID,
                                           TestAreaBase.users[1].MemberName,
                                           TestAreaBase.users[1].Password);
            //set gameResults             
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 10,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = NotificationVariant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = NotificationVariant
            };

            //post game end by player 1
            this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, joinSessionState.GameID.ToString(), gameResults,
                                            TestAreaBase.users[0].MemberName,
                                            TestAreaBase.users[0].Password);

            
            //Verify Notification for Player2
            string memberName = TestAreaBase.users[1].MemberName;      // player2
            string password = TestAreaBase.users[1].Password;
            VerifyNotification(joinSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.YouLose, true, memberName, password);

            this.NotificationsServiceProxy.Locale = "en-US";
            
            //Get YouLose notification and verify that it contained the variant
            Notification youLoseNotification = GetNotification(joinSessionState.GameID.ToString(), joinSessionState.SessionID, Notification.NotificationType.YouLose.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            Assert.AreEqual<uint>(NotificationVariant, youLoseNotification.Variant);


        }

        /// <summary>
        /// Feature test for PostGameEnd - verify scenario when variant on create session is diffrent from the one on GameResult(PostGameEnd)
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("Feature Test for GameState.svc PostGameEnd API -Verify scenatio when varianto n create session is diffrent from the one on GameResult-PostGameEnd.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PostGameEnd_MismatchVariantOnSessionVsGameResult()
        {
            //set variant name that would posted on notifications
            uint SessionVariant = 0;
            uint GameResultVariant = 2;
            // Initialize CreationData
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, (int)SessionVariant, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");

            // player1 create session
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                                    TestAreaBase.users[0].MemberName,
                                                                                    TestAreaBase.users[0].Password);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //player 2 join session
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                               TestAreaBase.users[1].MemberName,
                                                                               TestAreaBase.users[1].Password);

            //Delete existing notifications
            TestAreaBase.notificationCommon.CheckNotificationCount(joinSessionState.GameID.ToString(), joinSessionState.SessionID,
                                           TestAreaBase.users[0].MemberName,
                                           TestAreaBase.users[0].Password);
            //set gameResults             
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 10,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = GameResultVariant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = GameResultVariant
            };

            //post game end by player 1
            try
            {
                this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, joinSessionState.GameID.ToString(), gameResults,
                                            TestAreaBase.users[0].MemberName,
                                            TestAreaBase.users[0].Password);
                Assert.Fail("Error: Expected to hit BadRequest but it didnt");
            }
            catch (RestException rx)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.BadGameIDOrVariantSubmittedInGameResult), rx.Response);
            }
         
        }


        /// <summary>
        /// Feature test for PostGameEnd - verify if variant name is on GameOver notification
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("Feature Test for GameState.svc PostGameEnd API -Verify if variant is on GameOver notification .")]
        [TestProperty("Type", "FeatureTests")]
        public void P_PostGameEnd_VariantOnGameOverNotification()
        {
            //set variant name that would be posted on notifications
            uint VariantOnNotification = 2;            
            // Initialize CreationData
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, (int)VariantOnNotification, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");

            // player1 create session
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                                    TestAreaBase.users[0].MemberName,
                                                                                    TestAreaBase.users[0].Password);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //player 2 join session
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                               TestAreaBase.users[1].MemberName,
                                                                               TestAreaBase.users[1].Password);

            //get old scores for first player
            long oldScore = long.Parse(GetLeaderboardValue("BestScore", TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password));
            Assert.IsNotNull(oldScore, "Player1's BeatScore on Leaderboard is null");

            //Delete existing notifications
            TestAreaBase.notificationCommon.CheckNotificationCount(joinSessionState.GameID.ToString(), joinSessionState.SessionID,
                                           TestAreaBase.users[0].MemberName,
                                           TestAreaBase.users[0].Password);
            //Delete existing notifications
            TestAreaBase.notificationCommon.CheckNotificationCount(joinSessionState.GameID.ToString(), joinSessionState.SessionID,
                                           TestAreaBase.users[1].MemberName,
                                           TestAreaBase.users[1].Password);
            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.GameOverSeatIndexes = new int[] { 0 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.None.ToString(),
                Score = oldScore,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = VariantOnNotification
            };

            //post game end by player 1
            this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, joinSessionState.GameID.ToString(), gameResults,
                                            TestAreaBase.users[0].MemberName,
                                            TestAreaBase.users[0].Password);

            //Verify Notification for Player2           
            VerifyNotification(joinSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.GameOver, true, 
                                        TestAreaBase.users[0].MemberName, 
                                        TestAreaBase.users[0].Password);

            this.NotificationsServiceProxy.Locale = "en-US";

            //Get GameOver notification and verify that it contained the variant

            Notification gameOverNotification = GetNotification(joinSessionState.GameID.ToString(), joinSessionState.SessionID, Notification.NotificationType.GameOver.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            Assert.AreEqual<uint>(VariantOnNotification,gameOverNotification.Variant);

        }

        /// <summary>
        /// Feature test for PostGameEnd - verify if variant name is on GameTie notification
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("Feature Test for GameState.svc PostGameEnd API -Verify if variant is on GameTie notification .")]
        [TestProperty("Type", "FeatureTests")]
        public void P_PostGameEnd_VariantOnGameTieNotification()
        {
            //set variant name that would be posted on notifications
            uint VariantOnNotification =2;
            // Initialize CreationData
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, (int)VariantOnNotification, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");

            // player1 create session
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                                    TestAreaBase.users[0].MemberName,
                                                                                    TestAreaBase.users[0].Password);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //player 2 join session
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                               TestAreaBase.users[1].MemberName,
                                                                               TestAreaBase.users[1].Password);

            //get old scores for first player
            long oldScore = long.Parse(GetLeaderboardValue("BestScore", TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password));
            Assert.IsNotNull(oldScore, "Player1's BeatScore on Leaderboard is null");

            //Delete existing notifications
            TestAreaBase.notificationCommon.CheckNotificationCount(joinSessionState.GameID.ToString(), joinSessionState.SessionID,
                                           TestAreaBase.users[0].MemberName,
                                           TestAreaBase.users[0].Password);
            //Delete existing notifications
            TestAreaBase.notificationCommon.CheckNotificationCount(joinSessionState.GameID.ToString(), joinSessionState.SessionID,
                                           TestAreaBase.users[1].MemberName,
                                           TestAreaBase.users[1].Password);
            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.TierSeatIndexes = new int[] { 0 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Tie.ToString(),
                Score = 15,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = VariantOnNotification
            };
            
            
            //post game end by player 1
            this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, joinSessionState.GameID.ToString(), gameResults,
                                            TestAreaBase.users[0].MemberName,
                                            TestAreaBase.users[0].Password);

            //Verify Notification for Player2           
            VerifyNotification(joinSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.GameTie, true,
                                        TestAreaBase.users[0].MemberName,
                                        TestAreaBase.users[0].Password);

            this.NotificationsServiceProxy.Locale = "en-US";

            //Get GameOver notification and verify that it contained the variant

            Notification gameTieNotification = GetNotification(joinSessionState.GameID.ToString(), joinSessionState.SessionID, Notification.NotificationType.GameTie.ToString(), 
                                                                TestAreaBase.users[0].MemberName, 
                                                                TestAreaBase.users[0].Password);

            Assert.AreEqual<uint>(VariantOnNotification, gameTieNotification.Variant);

        }

        /// <summary>
        /// Feature test for PostGameEnd- verify if both your turn and you win notifications are viewable simultaneously
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("Feature Test for GameState.svc PostGameEnd API - verify if both your turn and you win notifications are viewable simultaneously .")]
        [TestProperty("Type", "FeatureTests")]
        public void P_PostGameEnd_SeeingBothYouWnAndYourTurn()
        {
            //set variant name that would be posted on notifications
            uint NotificationVariant = 2;
            // Initialize CreationData
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, (int)NotificationVariant, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");

            // player1 create session
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                                    TestAreaBase.users[0].MemberName,
                                                                                    TestAreaBase.users[0].Password);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //player 2 join session
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                               TestAreaBase.users[1].MemberName,
                                                                               TestAreaBase.users[1].Password);
            //Delete existing notifications for player 1
            TestAreaBase.notificationCommon.CheckNotificationCount(joinSessionState.GameID.ToString(), joinSessionState.SessionID,
                                           TestAreaBase.users[0].MemberName,
                                           TestAreaBase.users[0].Password);
            //Delete existing notifications for player 2
            TestAreaBase.notificationCommon.CheckNotificationCount(joinSessionState.GameID.ToString(), joinSessionState.SessionID,
                                           TestAreaBase.users[1].MemberName,
                                           TestAreaBase.users[1].Password);

            //put game state by 1st player assigning player 2 to active seat index
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState,
                                                  TestAreaBase.users[0].MemberName,
                                                  TestAreaBase.users[0].MemberName);

            //get YourTurn  Notification and verify that it is not viewed yet
            Notification yourTurnNotificatoin = GetNotification(joinSessionState.GameID.ToString(), joinSessionState.SessionID, Notification.NotificationType.YourTurn.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            Assert.AreEqual<Notification.NotificationStatus>(Notification.NotificationStatus.UnRead, yourTurnNotificatoin.Status, "Error: Notification is not in UnRead status");

            //set gameResults             
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] {1};
            gameResults.LosingSeatIndexes = new int[] {0};
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 10,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = NotificationVariant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = NotificationVariant
            };

            //post game end by player 1
            this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, joinSessionState.GameID.ToString(), gameResults,
                                            TestAreaBase.users[0].MemberName,
                                            TestAreaBase.users[0].Password);

            //get YouWin  Notification and verify that it is not viewed yet
            Notification youWinNotification = GetNotification(joinSessionState.GameID.ToString(), joinSessionState.SessionID, Notification.NotificationType.YouWin.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
           
            Assert.AreEqual<Notification.NotificationStatus>(Notification.NotificationStatus.UnRead, youWinNotification.Status, "Error: Notification is not in UnRead status");
            
            //tapping youWin notitification
            this.NotificationsServiceProxy.UpdateNotification(youWinNotification.Id ,Notification.NotificationStatus.Viewed.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

     
        }


        public string GetLeaderboardValue(string statEntry, string userName, string password)
        {
            LeaderboardResult result = this.NotificationsServiceProxy.GetLeaderboard(Constants.TESTGAMEID.ToString(), Constants.TESTGAMEVARIANT.ToString(), "BestScore", "1", "W1", "100", "2", userName, password);
            Assert.IsNotNull(result, "No result was returned");

            if (result.Leaderboard == null)
            {
                return "0";
            }
            else
            {
                Assert.IsNotNull(result.Leaderboard, "No statistics were returned");
                Assert.AreNotEqual(0, result.Leaderboard.Count, "Leaderboard is empty");

                IList<Entry> entryList = result.Leaderboard[0].Statistics;
                IEnumerable<Entry> entries = (from e in entryList
                                              where e.Name == statEntry
                                              select e);
                int numEntries = entries.Count<Entry>();
                Assert.AreEqual(1, numEntries, "Error: Unexpected number of entries in response.");
                return entries.First<Entry>().Value;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Test.API\Sessions\RejectInvitation.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using LiveN.Test.Framework.Configuration;
using LiveN.Test.Common.Web;
using Multiplayer.Test.API;
using AsyncMultiplayer.SessionCommon;
using System.Net;
using System.Diagnostics;
using System.Threading;
using LIVEN.Common.Diagnostics;
using AsyncMultiplayer.NotificationService;
using Multiplayer.Test.UserAccounts;

namespace MultiPlayer.Test.API
{
    /// <summary>
    /// Test Cases for Sessions.svc RejectInvitation API
    /// </summary>
    [TestClass]
    public class RejectInvitation : TestAreaBase
    {
        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {            
            LockTest();
            try
            {
                //reset invite count for the frequent user - 1st player
                ResetInviteCOunt(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, 0);
                //reset session count
                testHooksClient.ResetNumberOfSessions(new IdentityToken(IdentityServiceType.XUID, "0000" + Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password), Users.GetGamertag(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)));
            }
           catch(Exception e)
            {
                UnlockTest();
                throw new Exception(e.Message);
            }
        }

        [TestCleanup]
        public void TestCleanup()
        {
            UnlockTest();
        }

        /// <summary>
        /// BVT test for RejectInvitation
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("Call DELETE on GameSessionService to RejectInvitation")]
        [TestProperty("Type", "BVTs")]
        public void BVT_RejectInvitation()
        {
            SessionState createSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = createSessionState.GameID;
            inviteRequest.SessionId = createSessionState.SessionID;
            inviteRequest.Data = "BVT_RejectInvitation test data";
            inviteRequest.Recipients = TestAreaBase.users[1].MemberName;   // player2

            this.NotificationsServiceProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.NotificationsServiceProxy.Password = TestAreaBase.users[0].Password;
            this.NotificationsServiceProxy.SendInvite(inviteRequest);

            string memberName = TestAreaBase.users[1].MemberName;      // player2
            string password = TestAreaBase.users[1].Password;
            List<Notification> preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                Constants.NOTIFICATION_RETRIES,
                                                                Constants.NOTIFICATION_SLEEP_TIME);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;   // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            this.GameSessionProxy.RejectInvitation(createSessionState.GameID.ToString(), createSessionState.SessionID);

            memberName = TestAreaBase.users[1].MemberName;      // player2
            password = TestAreaBase.users[1].Password;

            List<Notification> postRejectNotifications = null;

            for (int i = 0; i < Constants.NOTIFICATION_RETRIES; i++)
            {
                Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME);

                postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (postRejectNotifications != null && postRejectNotifications.Count == 0)
                {
                    break;
                }
            }

            Assert.IsNotNull(postRejectNotifications);
            Assert.IsTrue(postRejectNotifications.Count == 0, "ERROR: Unexpected Number of notifications.");
        }

        /// <summary>
        /// Feature Test for RejectInvitation - Different Player (Player Not Received the Invitation Originally) RejectInvitation 
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Call DELETE on GameSessionService to RejectInvitation - Different Player (Player Not Received the Invitation Originally) RejectInvitation")]
        [TestProperty("Type", "FeatureTests")]
        public void P_RejectInvitation_DifferentPlayer()
        {
            SessionState createSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = createSessionState.GameID;
            inviteRequest.SessionId = createSessionState.SessionID;
            inviteRequest.Data = "BVT_RejectInvitation test data";
            inviteRequest.Recipients = TestAreaBase.users[1].MemberName;   // player2

            this.NotificationsServiceProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.NotificationsServiceProxy.Password = TestAreaBase.users[0].Password;
            this.NotificationsServiceProxy.SendInvite(inviteRequest);

            string memberName = TestAreaBase.users[1].MemberName;      // player2
            string password = TestAreaBase.users[1].Password;
            List<Notification> preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                Constants.NOTIFICATION_RETRIES,
                                                                Constants.NOTIFICATION_SLEEP_TIME);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            this.GameSessionProxy.UserID = TestAreaBase.users[2].MemberName;   // player3
            this.GameSessionProxy.Password = TestAreaBase.users[2].Password;
            this.GameSessionProxy.RejectInvitation(createSessionState.GameID.ToString(), createSessionState.SessionID);

            memberName = TestAreaBase.users[2].MemberName;      // player3
            password = TestAreaBase.users[2].Password;

            List<Notification> postRejectNotifications = null;

            for (int i = 0; i < Constants.NOTIFICATION_RETRIES; i++)
            {
                Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME);

                postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (postRejectNotifications != null && postRejectNotifications.Count == 0)
                {
                    break;
                }
            }

            Assert.IsNotNull(postRejectNotifications);
            Assert.IsTrue(postRejectNotifications.Count == 0, "ERROR: Unexpected Number of notifications.");
        }

        /// <summary>
        /// Feature Test for RejectInvitation - Multiple Players RejectInvitation 
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Call DELETE on GameSessionService to RejectInvitation - Multiple Players RejectInvitation")]
        [TestProperty("Type", "FeatureTests")]
        public void P_RejectInvitation_MultiplePlayers()
        {
            Assert.IsTrue(TestAreaBase.users.Count >=4, "Atleast 4 users are required for this session, please add 4 players on config file");
            SessionState createSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            StringBuilder recipients = new StringBuilder();
            recipients.Append(TestAreaBase.users[1].MemberName + ";");
            recipients.Append(TestAreaBase.users[2].MemberName + ";");
            recipients.Append(TestAreaBase.users[3].MemberName + ";");

            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = createSessionState.GameID;
            inviteRequest.SessionId = createSessionState.SessionID;
            inviteRequest.Data = "BVT_RejectInvitation test data";
            inviteRequest.Recipients = recipients.ToString();

            this.NotificationsServiceProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.NotificationsServiceProxy.Password = TestAreaBase.users[0].Password;
            this.NotificationsServiceProxy.SendInvite(inviteRequest);

            string memberName = TestAreaBase.users[1].MemberName;      // player2
            string password = TestAreaBase.users[1].Password;
            List<Notification> preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                10,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                Constants.NOTIFICATION_RETRIES,
                                                                Constants.NOTIFICATION_SLEEP_TIME);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            memberName = TestAreaBase.users[2].MemberName;      // player3
            password = TestAreaBase.users[2].Password;
            preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                10,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                Constants.NOTIFICATION_RETRIES,
                                                                Constants.NOTIFICATION_SLEEP_TIME);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            memberName = TestAreaBase.users[3].MemberName;      // player4
            password = TestAreaBase.users[3].Password;
            preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                10,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                Constants.NOTIFICATION_RETRIES,
                                                                Constants.NOTIFICATION_SLEEP_TIME);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;   // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            this.GameSessionProxy.RejectInvitation(createSessionState.GameID.ToString(), createSessionState.SessionID);

            this.GameSessionProxy.UserID = TestAreaBase.users[3].MemberName;   // player4
            this.GameSessionProxy.Password = TestAreaBase.users[3].Password;
            this.GameSessionProxy.RejectInvitation(createSessionState.GameID.ToString(), createSessionState.SessionID);

            memberName = TestAreaBase.users[1].MemberName;      // player2
            password = TestAreaBase.users[1].Password;

            List<Notification> postRejectNotifications = null;

            for (int i = 0; i < Constants.NOTIFICATION_RETRIES; i++)
            {
                Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME);

                postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    10,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (postRejectNotifications != null && postRejectNotifications.Count == 0)
                {
                    break;
                }
            }

            Assert.IsNotNull(postRejectNotifications);
            Assert.IsTrue(postRejectNotifications.Count == 0, "ERROR: Unexpected Number of notifications.");

            memberName = TestAreaBase.users[3].MemberName;      // player4
            password = TestAreaBase.users[3].Password;

            postRejectNotifications = null;

            for (int i = 0; i < Constants.NOTIFICATION_RETRIES; i++)
            {
                Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME);

                postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    10,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (postRejectNotifications != null && postRejectNotifications.Count == 0)
                {
                    break;
                }
            }

            Assert.IsNotNull(postRejectNotifications);
            Assert.IsTrue(postRejectNotifications.Count == 0, "ERROR: Unexpected Number of notifications.");

            memberName = TestAreaBase.users[2].MemberName;      // player3
            password = TestAreaBase.users[2].Password;
            postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                10,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                Constants.NOTIFICATION_RETRIES,
                                                                Constants.NOTIFICATION_SLEEP_TIME);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(postRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");
        }

        /// <summary>
        /// Feature Test for RejectInvitation - All Players RejectInvitation 
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Call DELETE on GameSessionService to RejectInvitation - All Players RejectInvitation")]
        [TestProperty("Type", "FeatureTests")]
        public void P_RejectInvitation_AllPlayers()
        {
            SessionState createSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            StringBuilder recipients = new StringBuilder();
            recipients.Append(TestAreaBase.users[1].MemberName + ";");
            recipients.Append(TestAreaBase.users[2].MemberName + ";");
            recipients.Append(TestAreaBase.users[3].MemberName + ";");

            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = createSessionState.GameID;
            inviteRequest.SessionId = createSessionState.SessionID;
            inviteRequest.Data = "BVT_RejectInvitation test data";
            inviteRequest.Recipients = recipients.ToString();

            this.NotificationsServiceProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.NotificationsServiceProxy.Password = TestAreaBase.users[0].Password;
            this.NotificationsServiceProxy.SendInvite(inviteRequest);
           
            string memberName = TestAreaBase.users[1].MemberName;      // player2
            string password = TestAreaBase.users[1].Password;
            List<Notification> preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                Constants.NOTIFICATION_RETRIES,
                                                                Constants.NOTIFICATION_SLEEP_TIME);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            memberName = TestAreaBase.users[2].MemberName;      // player3
            password = TestAreaBase.users[2].Password;
            preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                Constants.NOTIFICATION_RETRIES,
                                                                Constants.NOTIFICATION_SLEEP_TIME);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            memberName = TestAreaBase.users[3].MemberName;      // player4
            password = TestAreaBase.users[3].Password;
            preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                Constants.NOTIFICATION_RETRIES,
                                                                Constants.NOTIFICATION_SLEEP_TIME);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;   // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            this.GameSessionProxy.RejectInvitation(createSessionState.GameID.ToString(), createSessionState.SessionID);

            this.GameSessionProxy.UserID = TestAreaBase.users[2].MemberName;   // player3
            this.GameSessionProxy.Password = TestAreaBase.users[2].Password;
            this.GameSessionProxy.RejectInvitation(createSessionState.GameID.ToString(), createSessionState.SessionID);

            this.GameSessionProxy.UserID = TestAreaBase.users[3].MemberName;   // player4
            this.GameSessionProxy.Password = TestAreaBase.users[3].Password;
            this.GameSessionProxy.RejectInvitation(createSessionState.GameID.ToString(), createSessionState.SessionID);

            memberName = TestAreaBase.users[1].MemberName;      // player2
            password = TestAreaBase.users[1].Password;

            List<Notification> postRejectNotifications = null;

            for (int i = 0; i < Constants.NOTIFICATION_RETRIES; i++)
            {
                Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME);

                postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (postRejectNotifications != null && postRejectNotifications.Count == 0)
                {
                    break;
                }
            }

            Assert.IsNotNull(postRejectNotifications);
            Assert.IsTrue(postRejectNotifications.Count == 0, "ERROR: Unexpected Number of notifications.");

            memberName = TestAreaBase.users[2].MemberName;      // player3
            password = TestAreaBase.users[2].Password;

            postRejectNotifications = null;

            for (int i = 0; i < Constants.NOTIFICATION_RETRIES; i++)
            {
                Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME);

                postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (postRejectNotifications != null && postRejectNotifications.Count == 0)
                {
                    break;
                }
            }

            Assert.IsNotNull(postRejectNotifications);
            Assert.IsTrue(postRejectNotifications.Count == 0, "ERROR: Unexpected Number of notifications.");

            memberName = TestAreaBase.users[3].MemberName;      // player4
            password = TestAreaBase.users[3].Password;

            postRejectNotifications = null;

            for (int i = 0; i < Constants.NOTIFICATION_RETRIES; i++)
            {
                Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME);

                postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (postRejectNotifications != null && postRejectNotifications.Count == 0)
                {
                    break;
                }
            }

            Assert.IsNotNull(postRejectNotifications);
            Assert.IsTrue(postRejectNotifications.Count == 0, "ERROR: Unexpected Number of notifications.");
        }

        /// <summary>
        /// Feature Test for RejectInvitation - Player RejectInvitation Multiple times 
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Call DELETE on GameSessionService to RejectInvitation - Player RejectInvitation Multiple times")]
        [TestProperty("Type", "FeatureTests")]
        public void N_RejectInvitation_MultipleTimes()
        {        

            SessionState createSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = createSessionState.GameID;
            inviteRequest.SessionId = createSessionState.SessionID;
            inviteRequest.Data = "BVT_RejectInvitation test data";
            inviteRequest.Recipients = TestAreaBase.users[1].MemberName;   // player2

            this.NotificationsServiceProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.NotificationsServiceProxy.Password = TestAreaBase.users[0].Password;            
            this.NotificationsServiceProxy.SendInvite(inviteRequest);            

            string memberName = TestAreaBase.users[1].MemberName;      // player2
            string password = TestAreaBase.users[1].Password;
            List<Notification> preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                Constants.NOTIFICATION_RETRIES,
                                                                Constants.NOTIFICATION_SLEEP_TIME);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;   // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            this.GameSessionProxy.RejectInvitation(createSessionState.GameID.ToString(), createSessionState.SessionID);

            memberName = TestAreaBase.users[1].MemberName;      // player2
            password = TestAreaBase.users[1].Password;

            List<Notification> postRejectNotifications = null;

            for (int i = 0; i < Constants.NOTIFICATION_RETRIES; i++)
            {
                Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME);

                postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (postRejectNotifications != null && postRejectNotifications.Count == 0)
                {
                    break;
                }
            }

            Assert.IsNotNull(postRejectNotifications);
            Assert.IsTrue(postRejectNotifications.Count == 0, "ERROR: Unexpected Number of notifications.");

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;   // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            this.GameSessionProxy.RejectInvitation(createSessionState.GameID.ToString(), createSessionState.SessionID);
        }

        /// <summary>
        /// Feature Test for RejectInvitation - By Player Not received Invitation
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Call DELETE on GameSessionService to RejectInvitation - By Player Not Received Invitation")]
        [TestProperty("Type", "FeatureTests")]
        public void P_RejectInvitation_PlayerNotInvited()
        {
            SessionState createSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = createSessionState.GameID;
            inviteRequest.SessionId = createSessionState.SessionID;
            inviteRequest.Data = "BVT_RejectInvitation test data";
            inviteRequest.Recipients = TestAreaBase.users[1].MemberName;   // player2

            this.NotificationsServiceProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.NotificationsServiceProxy.Password = TestAreaBase.users[0].Password;
            this.NotificationsServiceProxy.SendInvite(inviteRequest);

            string memberName = TestAreaBase.users[1].MemberName;      // player2
            string password = TestAreaBase.users[1].Password;
            List<Notification> preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                Constants.NOTIFICATION_RETRIES,
                                                                Constants.NOTIFICATION_SLEEP_TIME);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            this.GameSessionProxy.UserID = TestAreaBase.users[2].MemberName;   // player3
            this.GameSessionProxy.Password = TestAreaBase.users[2].Password;
            this.GameSessionProxy.RejectInvitation(createSessionState.GameID.ToString(), createSessionState.SessionID);

            memberName = TestAreaBase.users[1].MemberName;      // player2
            password = TestAreaBase.users[1].Password;
            List<Notification> postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                Constants.NOTIFICATION_RETRIES,
                                                                Constants.NOTIFICATION_SLEEP_TIME);

            Assert.IsNotNull(postRejectNotifications);
            Assert.IsTrue(postRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

        }

        /// <summary>
        /// Test for a Player RejectInvitation - GUID with no dashes as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Feature Test for Sessions.svc RejectInvitation API to verify a Player try to RejectInvitation - GUID with no dashes as SessionID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_RejectInvitation_GUIDWithNoDashesAsSessionID()
        {
            SessionState createSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = createSessionState.GameID;
            inviteRequest.SessionId = createSessionState.SessionID;
            inviteRequest.Data = "BVT_RejectInvitation test data";
            inviteRequest.Recipients = TestAreaBase.users[1].MemberName;   // player2

            this.NotificationsServiceProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.NotificationsServiceProxy.Password = TestAreaBase.users[0].Password;
            this.NotificationsServiceProxy.SendInvite(inviteRequest);

            string memberName = TestAreaBase.users[1].MemberName;      // player2
            string password = TestAreaBase.users[1].Password;
            List<Notification> preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                Constants.NOTIFICATION_RETRIES,
                                                                Constants.NOTIFICATION_SLEEP_TIME);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            string sessionIDNoDashes = createSessionState.SessionID.Replace("-", "");

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;   // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            this.GameSessionProxy.RejectInvitation(createSessionState.GameID.ToString(), sessionIDNoDashes);

            memberName = TestAreaBase.users[1].MemberName;      // player2
            password = TestAreaBase.users[1].Password;

            List<Notification> postRejectNotifications = null;

            for (int i = 0; i < Constants.NOTIFICATION_RETRIES; i++)
            {
                Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME);

                postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (postRejectNotifications != null && postRejectNotifications.Count == 1)
                {
                    break;
                }
            }

            Assert.IsNotNull(postRejectNotifications);

            //postRejectNotification count  should still be 1 as call to reject didnt specify the right session ID
            Assert.IsTrue(postRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");
        }

        /// <summary>
        /// Test for a Player RejectInvitation - Not Exist SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Feature Test for Sessions.svc RejectInvitation API to verify a Player try to RejectInvitation - Not Exist SessionID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_RejectInvitation_NotExistSessionID()
        {
            SessionState createSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = createSessionState.GameID;
            inviteRequest.SessionId = createSessionState.SessionID;
            inviteRequest.Data = "BVT_RejectInvitation test data";
            inviteRequest.Recipients = TestAreaBase.users[1].MemberName;   // player2

            this.NotificationsServiceProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.NotificationsServiceProxy.Password = TestAreaBase.users[0].Password;
            this.NotificationsServiceProxy.SendInvite(inviteRequest);            

            string memberName = TestAreaBase.users[1].MemberName;      // player2
            string password = TestAreaBase.users[1].Password;
            List<Notification> preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                Constants.NOTIFICATION_RETRIES,
                                                                Constants.NOTIFICATION_SLEEP_TIME);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;   // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            this.GameSessionProxy.RejectInvitation(createSessionState.GameID.ToString(), "j6b048d0-15gd-4i9d-8f65-91bz93s762f5");

            memberName = TestAreaBase.users[1].MemberName;      // player2
            password = TestAreaBase.users[1].Password;

            List<Notification> postRejectNotifications = null;

            for (int i = 0; i < Constants.NOTIFICATION_RETRIES; i++)
            {
                Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME);

                postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (postRejectNotifications != null && postRejectNotifications.Count == 1)
                {
                    break;
                }
            }

            Assert.IsNotNull(postRejectNotifications);

            //call to rejectInvite was made with different session id hence not affecting post rejectInvite Notification count
            Assert.IsTrue(postRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");
        }

        /// <summary>
        /// Test for a Player RejectInvitation - String.Empty SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Feature Test for Sessions.svc RejectInvitation API to verify a Player try to RejectInvitation - String.Empty SessionID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_RejectInvitation_EmptyStringSessionID()
        {
            SessionState createSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = createSessionState.GameID;
            inviteRequest.SessionId = createSessionState.SessionID;
            inviteRequest.Data = "BVT_RejectInvitation test data";
            inviteRequest.Recipients = TestAreaBase.users[1].MemberName;   // player2

            this.NotificationsServiceProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.NotificationsServiceProxy.Password = TestAreaBase.users[0].Password;
            this.NotificationsServiceProxy.SendInvite(inviteRequest);

            string memberName = TestAreaBase.users[1].MemberName;      // player2
            string password = TestAreaBase.users[1].Password;
            List<Notification> preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                Constants.NOTIFICATION_RETRIES,
                                                                Constants.NOTIFICATION_SLEEP_TIME);
            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;   // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            try
            {
                this.GameSessionProxy.RejectInvitation(createSessionState.GameID.ToString(), String.Empty);
                Assert.Fail("Error: Expected to fail as sessionId is empty string");
            }
            catch(RestException rx)
            {
                VerifyException(HttpStatusCode.NotFound, rx.Response);
            }

            memberName = TestAreaBase.users[1].MemberName;      // player2
            password = TestAreaBase.users[1].Password;

            List<Notification> postRejectNotifications = null;

            for (int i = 0; i < Constants.NOTIFICATION_RETRIES; i++)
            {
                Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME);

                postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (postRejectNotifications != null && postRejectNotifications.Count == 1)
                {
                    break;
                }
            }

            Assert.IsNotNull(postRejectNotifications);
            //postRejectNotification count  should still be 1 as call to reject didnt specify the right session ID
            Assert.IsTrue(postRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

        }

        /// <summary>
        /// Test for a Player RejectInvitation - null as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Feature Test for Sessions.svc RejectInvitation API to verify a Player try to RejectInvitation - null as SessionID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_RejectInvitation_NullSessionID()
        {
            SessionState createSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = createSessionState.GameID;
            inviteRequest.SessionId = createSessionState.SessionID;
            inviteRequest.Data = "BVT_RejectInvitation test data";
            inviteRequest.Recipients = TestAreaBase.users[1].MemberName;   // player2

            this.NotificationsServiceProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.NotificationsServiceProxy.Password = TestAreaBase.users[0].Password;
            this.NotificationsServiceProxy.SendInvite(inviteRequest);

            string memberName = TestAreaBase.users[1].MemberName;      // player2
            string password = TestAreaBase.users[1].Password;
            List<Notification> preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                Constants.NOTIFICATION_RETRIES,
                                                                Constants.NOTIFICATION_SLEEP_TIME);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;   // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            try
            {
                this.GameSessionProxy.RejectInvitation(createSessionState.GameID.ToString(), null);
                Assert.Fail("Error: Expected to get not found exception but it didnt");
            }
            catch (RestException rx)
            {
                VerifyException(HttpStatusCode.NotFound, rx.Response);
            }

            memberName = TestAreaBase.users[1].MemberName;      // player2
            password = TestAreaBase.users[1].Password;

            List<Notification> postRejectNotifications = null;

            for (int i = 0; i < Constants.NOTIFICATION_RETRIES; i++)
            {
                Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME);

                postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (postRejectNotifications != null && postRejectNotifications.Count == 1)
                {
                    break;
                }
            }

            Assert.IsNotNull(postRejectNotifications);
            //call to rejectInvitation failed hence not affecting invite notification count
            Assert.IsTrue(postRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");
        }

        /// <summary>
        /// Test for a Player RejectInvitation - Long String as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Feature Test for Sessions.svc RejectInvitation API to verify a Player try to RejectInvitation - Long String as SessionID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_RejectInvitation_LongStringSessionID()
        {
            SessionState createSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = createSessionState.GameID;
            inviteRequest.SessionId = createSessionState.SessionID;
            inviteRequest.Data = "BVT_RejectInvitation test data";
            inviteRequest.Recipients = TestAreaBase.users[1].MemberName;   // player2

            this.NotificationsServiceProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.NotificationsServiceProxy.Password = TestAreaBase.users[0].Password;
            this.NotificationsServiceProxy.SendInvite(inviteRequest);

            string memberName = TestAreaBase.users[1].MemberName;      // player2
            string password = TestAreaBase.users[1].Password;
            List<Notification> preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                Constants.NOTIFICATION_RETRIES,
                                                                Constants.NOTIFICATION_SLEEP_TIME);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;   // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            this.GameSessionProxy.RejectInvitation(createSessionState.GameID.ToString(), "j6b048d0-15gd-4i9d-8f65-91bz93s762f5-j6b048d0-15gd-4i9d-8f65-91bz93s762f5-j6b048d0-15gd-4i9d-8f65-91bz93s762f5-j6b048d0-15gd-4i9d-8f65-91bz93s762f5");

            memberName = TestAreaBase.users[1].MemberName;      // player2
            password = TestAreaBase.users[1].Password;

            List<Notification> postRejectNotifications = null;

            for (int i = 0; i < Constants.NOTIFICATION_RETRIES; i++)
            {
                Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME);

                postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (postRejectNotifications != null && postRejectNotifications.Count == 1)
                {
                    break;
                }
            }

            Assert.IsNotNull(postRejectNotifications);

            //call to reject invitation didnt call with the right session id for which invitation was created
            Assert.IsTrue(postRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");
        }

        /// <summary>
        /// Test for a Player RejectInvitation - One Char String as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Feature Test for Sessions.svc RejectInvitation API to verify a Player try to RejectInvitation - One Char String as SessionID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_RejectInvitation_OneCharStringSessionID()
        {
            SessionState createSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = createSessionState.GameID;
            inviteRequest.SessionId = createSessionState.SessionID;
            inviteRequest.Data = "BVT_RejectInvitation test data";
            inviteRequest.Recipients = TestAreaBase.users[1].MemberName;   // player2

            this.NotificationsServiceProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.NotificationsServiceProxy.Password = TestAreaBase.users[0].Password;
            this.NotificationsServiceProxy.SendInvite(inviteRequest);            

            string memberName = TestAreaBase.users[1].MemberName;      // player2
            string password = TestAreaBase.users[1].Password;
            List<Notification> preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                Constants.NOTIFICATION_RETRIES,
                                                                Constants.NOTIFICATION_SLEEP_TIME);
            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;   // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            this.GameSessionProxy.RejectInvitation(createSessionState.GameID.ToString(), "a");

            memberName = TestAreaBase.users[1].MemberName;      // player2
            password = TestAreaBase.users[1].Password;

            List<Notification> postRejectNotifications = null;

            for (int i = 0; i < Constants.NOTIFICATION_RETRIES; i++)
            {
                Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME);

                postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (postRejectNotifications != null && postRejectNotifications.Count == 1)
                {
                    break;
                }
            }

            Assert.IsNotNull(postRejectNotifications);

            //call to reject invitation didnt call with the right session id for which invitation was created, thus notification count won't change
            Assert.IsTrue(postRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");
        }       
       
        /// <summary>
        /// Test for a Player RejectInvitation - String.Empty GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Feature Test for Sessions.svc RejectInvitation API to verify a Player try to RejectInvitation - String.Empty GameID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_RejectInvitation_EmptyStringGameID()
        {
            SessionState createSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = createSessionState.GameID;
            inviteRequest.SessionId = createSessionState.SessionID;
            inviteRequest.Data = "BVT_RejectInvitation test data";
            inviteRequest.Recipients = TestAreaBase.users[1].MemberName;   // player2

            this.NotificationsServiceProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.NotificationsServiceProxy.Password = TestAreaBase.users[0].Password;
            this.NotificationsServiceProxy.SendInvite(inviteRequest);

            string memberName = TestAreaBase.users[1].MemberName;      // player2
            string password = TestAreaBase.users[1].Password;
            List<Notification> preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                Constants.NOTIFICATION_RETRIES,
                                                                Constants.NOTIFICATION_SLEEP_TIME);
            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;   // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            try
            {
                this.GameSessionProxy.RejectInvitation(String.Empty, createSessionState.SessionID);

                Assert.Fail("Error: Expected to fail as GameId is empty string");
            }
            catch (RestException rx)
            {
                VerifyException(HttpStatusCode.NotFound, rx.Response);
            }

            memberName = TestAreaBase.users[1].MemberName;      // player2
            password = TestAreaBase.users[1].Password;

            List<Notification> postRejectNotifications = null;

            for (int i = 0; i < Constants.NOTIFICATION_RETRIES; i++)
            {
                Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME);

                postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (postRejectNotifications != null && postRejectNotifications.Count == 1)
                {
                    break;
                }
            }

            Assert.IsNotNull(postRejectNotifications);
            //postRejectNotification count  should still be 1 as call to reject didnt specify the right Game ID
            Assert.IsTrue(postRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");
        }

        /// <summary>
        /// Test for a Player RejectInvitation - null as GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Feature Test for Sessions.svc RejectInvitation API to verify a Player try to RejectInvitation - null as GameID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_RejectInvitation_NullGameID()
        {
            SessionState createSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = createSessionState.GameID;
            inviteRequest.SessionId = createSessionState.SessionID;
            inviteRequest.Data = "BVT_RejectInvitation test data";
            inviteRequest.Recipients = TestAreaBase.users[1].MemberName;   // player2

            this.NotificationsServiceProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.NotificationsServiceProxy.Password = TestAreaBase.users[0].Password;
            this.NotificationsServiceProxy.SendInvite(inviteRequest);

            string memberName = TestAreaBase.users[1].MemberName;      // player2
            string password = TestAreaBase.users[1].Password;
            List<Notification> preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                Constants.NOTIFICATION_RETRIES,
                                                                Constants.NOTIFICATION_SLEEP_TIME);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;   // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            try
            {
                this.GameSessionProxy.RejectInvitation(null, createSessionState.SessionID);
                Assert.Fail("Error: Expected NotFound exception");
            }
            catch (RestException rx)
            {
                VerifyException(HttpStatusCode.NotFound, rx.Response);
            }

            memberName = TestAreaBase.users[1].MemberName;      // player2
            password = TestAreaBase.users[1].Password;

            List<Notification> postRejectNotifications = null;

            for (int i = 0; i < Constants.NOTIFICATION_RETRIES; i++)
            {
                Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME);

                postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (postRejectNotifications != null && postRejectNotifications.Count == 1)
                {
                    break;
                }
            }

            Assert.IsNotNull(postRejectNotifications);
            //call to rejectInvitation failed hence not affecting invite notification count
            Assert.IsTrue(postRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");
        }

        /// <summary>
        /// Test for a Player RejectInvitation - Long String as GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Feature Test for Sessions.svc RejectInvitation API to verify a Player try to RejectInvitation - Long String as GameID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_RejectInvitation_LongStringGameID()
        {
            SessionState createSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = createSessionState.GameID;
            inviteRequest.SessionId = createSessionState.SessionID;
            inviteRequest.Data = "BVT_RejectInvitation test data";
            inviteRequest.Recipients = TestAreaBase.users[1].MemberName;   // player2

            this.NotificationsServiceProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.NotificationsServiceProxy.Password = TestAreaBase.users[0].Password;
            this.NotificationsServiceProxy.SendInvite(inviteRequest);

            string memberName = TestAreaBase.users[1].MemberName;      // player2
            string password = TestAreaBase.users[1].Password;
            List<Notification> preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                Constants.NOTIFICATION_RETRIES,
                                                                Constants.NOTIFICATION_SLEEP_TIME);
            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;   // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            try
            {
                this.GameSessionProxy.RejectInvitation("4434343298432830284230984302984039284329842384238423842394832943843925721483402370", createSessionState.SessionID);
                Assert.Fail("Error: Expected to fail for long string game Id");
            }
            catch (RestException rx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidGameIDFormatWhileGettingIdentity), rx.Response);
            }
            memberName = TestAreaBase.users[1].MemberName;      // player2
            password = TestAreaBase.users[1].Password;

            List<Notification> postRejectNotifications = null;

            for (int i = 0; i < Constants.NOTIFICATION_RETRIES; i++)
            {
                Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME);

                postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (postRejectNotifications != null && postRejectNotifications.Count == 1)
                {
                    break;
                }
            }

            Assert.IsNotNull(postRejectNotifications);
            //postRejectNotification count  should still be 1 as call to reject didnt specify the right Game ID
            Assert.IsTrue(postRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");
            
        }
        /// <summary>
        /// Test for a Player RejectInvitation - One Char String as GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Feature Test for Sessions.svc RejectInvitation API to verify a Player try to RejectInvitation - One Char String as GameID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_RejectInvitation_OneCharStringGameID()
        {
            SessionState createSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = createSessionState.GameID;
            inviteRequest.SessionId = createSessionState.SessionID;
            inviteRequest.Data = "BVT_RejectInvitation test data";
            inviteRequest.Recipients = TestAreaBase.users[1].MemberName;   // player2

            this.NotificationsServiceProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.NotificationsServiceProxy.Password = TestAreaBase.users[0].Password;
            this.NotificationsServiceProxy.SendInvite(inviteRequest);            
            
            string memberName = TestAreaBase.users[1].MemberName;      // player2
            string password = TestAreaBase.users[1].Password;
            List<Notification> preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                Constants.NOTIFICATION_RETRIES,
                                                                Constants.NOTIFICATION_SLEEP_TIME);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;   // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            
            try
            {
                this.GameSessionProxy.RejectInvitation("5", createSessionState.SessionID);
                Assert.Fail(string.Format("RejectInvitation should not be allowed for an invalid game ID ({0})", "5"));
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDDoesNotMatchPartnerTokenTitleID), restEx.Response);
            }

            memberName = TestAreaBase.users[1].MemberName;      // player2
            password = TestAreaBase.users[1].Password;

            List<Notification> postRejectNotifications = null;

            for (int i = 0; i < Constants.NOTIFICATION_RETRIES; i++)
            {
                Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME);

                postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (postRejectNotifications != null && postRejectNotifications.Count == 1)
                {
                    break;
                }
            }

            Assert.IsNotNull(postRejectNotifications);
            //postRejectNotification count  should still be 1 as call to reject didnt specify the right session ID
            Assert.IsTrue(postRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");
        }

        /// <summary>
        /// Test for a Player RejectInvitation - GameID not matching partner token TitleID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc RejectInvitation API to verify  RejectInvitation -GameID not matching partner token TitleID .")]
        [TestProperty("Type", "FeatureTests")]
        public void N_RejectInvitation_GameIdNotMatchPartnerTokenTitleID()
        {
            SessionState createSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = createSessionState.GameID;
            inviteRequest.SessionId = createSessionState.SessionID;
            inviteRequest.Data = "BVT_RejectInvitation test data";
            inviteRequest.Recipients = TestAreaBase.users[1].MemberName;   // player2

            this.NotificationsServiceProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.NotificationsServiceProxy.Password = TestAreaBase.users[0].Password;
            this.NotificationsServiceProxy.SendInvite(inviteRequest);

            string memberName = TestAreaBase.users[1].MemberName;      // player2
            string password = TestAreaBase.users[1].Password;
            List<Notification> preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                Constants.NOTIFICATION_RETRIES,
                                                                Constants.NOTIFICATION_SLEEP_TIME);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;   // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            Random rndm = new Random();
            uint RandomGameId = uint.MinValue;

            do
            {
                RandomGameId = (uint)rndm.Next();
            }
            while (uint.Parse(Config.Environment.StsSettings.TitleId) == RandomGameId);

            try
            {
                this.GameSessionProxy.RejectInvitation(RandomGameId.ToString(), createSessionState.SessionID);
                Assert.Fail(string.Format("RejectInvitation should not be allowed for an invalid game ID ({0})", RandomGameId.ToString()));
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDDoesNotMatchPartnerTokenTitleID), restEx.Response);
            }
                       
        }

        /// <summary>
        /// Feature Test for RejectInvitation - Player rejects only one of the invitations from different sesssions
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call DELETE on GameSessionService to RejectInvitation - Player rejects only one of the invitations from different sesssions")]
        [TestProperty("Type", "FeatureTests")]
        public void P_RejectInvitation_RejectOneOfDiffSessionInvit()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 3, "Atleast 3 users are required for this session, please add 3 players on config file");

            //reseting invite for second user in case he hit invite limit
            ResetInviteCOunt(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password, 0);

            SessionState createSessionState1 = null;
            SessionState createSessionState2 = null;

            // Initialize CreationData
            CreationData creationData1 = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, new byte[] { 1, 2, 3 },new InactivityWarningBehavior(), true, "TestGame");
            CreationData creationData2 = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");
   
            //first player creating session
            createSessionState1 = this.GameSessionProxy.CreateSession(creationData1.GameID.ToString(), creationData1,
                                                                      TestAreaBase.users[0].MemberName,
                                                                      TestAreaBase.users[0].Password);
            //second player creating another session
            createSessionState2 = this.GameSessionProxy.CreateSession(creationData2.GameID.ToString(), creationData2,
                                                                    TestAreaBase.users[1].MemberName,
                                                                    TestAreaBase.users[1].Password);

            //Assert SessionState
            AssertCreateSessionState(creationData1, createSessionState1);
            AssertCreateSessionState(creationData2, createSessionState2);

            //send invite to 3rd player  from 1st player
            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = createSessionState1.GameID;
            inviteRequest.SessionId = createSessionState1.SessionID;
            inviteRequest.Data = "BVT_RejectInvitation test data";
            inviteRequest.Recipients = TestAreaBase.users[2].MemberName;

            this.NotificationsServiceProxy.SendInvite(inviteRequest,
                                                      TestAreaBase.users[0].MemberName,
                                                      TestAreaBase.users[0].Password);

            //send invite to 3rd player  from 2nd player 
            InviteRequest inviteRequest2 = new InviteRequest();
            inviteRequest2.GameId = createSessionState2.GameID;
            inviteRequest2.SessionId = createSessionState2.SessionID;
            inviteRequest2.Data = "BVT_RejectInvitation test data";
            inviteRequest2.Recipients = TestAreaBase.users[2].MemberName;            

            this.NotificationsServiceProxy.SendInvite(inviteRequest2,
                                                      TestAreaBase.users[1].MemberName,
                                                      TestAreaBase.users[1].Password);


            //pre-reject invitation for 3rd player before  reject,in first session
            string memberName = TestAreaBase.users[2].MemberName;      // player3
            string password = TestAreaBase.users[2].Password;
            List<Notification> preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState1.GameID.ToString(),
                                                                createSessionState1.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                10,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                Constants.NOTIFICATION_RETRIES,
                                                                Constants.NOTIFICATION_SLEEP_TIME);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            //pre-reject invitation for 3rd player before reject,in second session
            preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState2.GameID.ToString(),
                                                                createSessionState2.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                10,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                Constants.NOTIFICATION_RETRIES,
                                                                Constants.NOTIFICATION_SLEEP_TIME);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            //3rd player reject only first session invitation
           
            this.GameSessionProxy.RejectInvitation(createSessionState1.GameID.ToString(), createSessionState1.SessionID,
                                                   TestAreaBase.users[2].MemberName,
                                                   TestAreaBase.users[2].Password);

            //count first session invite for 3rd player, after reject
            
            List<Notification> postRejectNotifications = null;

            for (int i = 0; i < Constants.NOTIFICATION_RETRIES; i++)
            {
                Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME);

                postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState1.GameID.ToString(),
                                                                    createSessionState1.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    10,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (postRejectNotifications != null && postRejectNotifications.Count == 0)
                {
                    break;
                }
            }

            Assert.IsNotNull(postRejectNotifications);
            Assert.IsTrue(postRejectNotifications.Count == 0, "ERROR: Unexpected Number of notifications.");

            //count invite for invite in a second session, not yet rejected           
            postRejectNotifications = null;

            for (int i = 0; i < Constants.NOTIFICATION_RETRIES; i++)
            {
                Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME);

                postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState2.GameID.ToString(),
                                                                    createSessionState2.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    10,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (postRejectNotifications != null && postRejectNotifications.Count == 1)
                {
                    break;
                }
            }

            Assert.IsNotNull(postRejectNotifications);
            Assert.IsTrue(postRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");
            
        }
        /// <summary>
        /// Feature test for RejectInvitation - Send invite with sessionid containg variant and reject invitation parsing  session id
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("Feature test for RejectInvitation - Send invite with sessionid containg variant and reject invitation parsing  session id")]
        [TestProperty("Type", "FeatureTests")]
        public void P_RejectInvitation_SessionIdWithVariant()
        {

            // Initialize CreationData

            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                      TestAreaBase.users[0].MemberName,
                                                                      TestAreaBase.users[0].Password);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);
            StringBuilder SessionIdwithVariant = new StringBuilder(createSessionState.SessionID);
            SessionIdwithVariant.Append(":0");
            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = createSessionState.GameID;
            inviteRequest.SessionId = SessionIdwithVariant.ToString();
            inviteRequest.Data = "BVT_RejectInvitation test data";
            inviteRequest.Recipients = TestAreaBase.users[1].MemberName;   // player2
            //player1 sending invite to player 2
            this.NotificationsServiceProxy.SendInvite(inviteRequest,
                                                       TestAreaBase.users[0].MemberName,
                                                       TestAreaBase.users[0].Password);

            //assert invitation notification is returned for the session Id after variant is parsed
            string memberName = TestAreaBase.users[1].MemberName;      // player2
            string password = TestAreaBase.users[1].Password;
            List<Notification> preRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                createSessionState.GameID.ToString(),
                                                                createSessionState.SessionID,
                                                                (int)Notification.NotificationCategory.ToDo,
                                                                String.Empty,
                                                                1,
                                                                Notification.NotificationType.Invitation.ToString(),
                                                                true,
                                                                memberName,
                                                                password,
                                                                10,
                                                                Constants.NOTIFICATION_SLEEP_TIME);

            Assert.IsNotNull(preRejectNotifications);
            Assert.IsTrue(preRejectNotifications.Count == 1, "ERROR: Unexpected Number of notifications.");

            //player 2 reject invitation using session id parsed from sessionId+Varaint
            this.GameSessionProxy.RejectInvitation(createSessionState.GameID.ToString(), createSessionState.SessionID,
                                                    TestAreaBase.users[1].MemberName,
                                                    TestAreaBase.users[1].Password);

            //get notifications and assert player is able to reject invitation using session id parsed from sessionId+Varaint
            memberName = TestAreaBase.users[1].MemberName;
            password = TestAreaBase.users[1].Password;

            List<Notification> postRejectNotifications = null;

            for (int i = 0; i < 10; i++)
            {
                Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME);

                postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (postRejectNotifications != null && postRejectNotifications.Count == 0)
                {
                    break;
                }
            }

            Assert.IsNotNull(postRejectNotifications);
            Assert.IsTrue(postRejectNotifications.Count == 0, "ERROR: Unexpected Number of notifications.");
        }



        public void ResetInviteCOunt(string username, string password,int InviteCount)
        {
         
            try
            {
                testHooksClient.UpdateUserEntry(
                    Users.GetXuid(username,password),
                    DateTime.UtcNow,
                    DateTime.UtcNow,
                    InviteCount);
            }
            catch (Exception e)
            {         
                throw new Exception(e.Message);
            }
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\NGGamePlayer.Test\makefile.inc ===
# this is a slight modification of the makefile.def target that skips ComVisible since it's specified per project.

$(OBJ_PATH)\$O\_generated.cs: $(SOURCES_USED)
    -$(_DEL)
    set createfile=<<$@.temp
!if defined(LANGUAGE_SPECIFIC_MANAGED_RESOURCES) && "$(MUI)" == "1" && "$(URT_VER)" == "2.0"
[assembly:System.Resources.NeutralResourcesLanguage("en")]
!endif
[assembly:System.Reflection.AssemblyVersion("$(ASSEMBLY_IDENTITY_VERSION)")]
!ifdef VER_PRODUCTNAME_STR
[assembly:System.Reflection.AssemblyProduct("$(VER_PRODUCTNAME_STR)")]
!endif
!ifdef VER_LEGALCOPYRIGHT_STR
[assembly:System.Reflection.AssemblyCopyright("$(VER_LEGALCOPYRIGHT_STR)")]
!endif
!ifdef VER_COMPANYNAME_STR
[assembly:System.Reflection.AssemblyCompany("$(VER_COMPANYNAME_STR)")]
!endif
!ifdef VER_PRODUCTVERSION_STR
[assembly:System.Reflection.AssemblyFileVersion("$(VER_PRODUCTVERSION_STR)")]
!endif
<<KEEP
!if defined(_ASSEMBLY_IDENTITY) \
        && "$(_ASSEMBLY_IDENTITY_PUBLIC_KEY_NAME_LOWERCASE)" != "none" \
        && "$(_ASSEMBLY_IDENTITY:\=)" == "$(_ASSEMBLY_IDENTITY)" \
        && !defined(_MANAGED_CXX_LIBRARY) \
        && "$(MANAGED_TARGET_TYPE)" != "module"
    asmIdToAttribs.cmd "$(_ASSEMBLY_IDENTITY)" $@.temp csharp
!endif
    $(_MOVE)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Test.API\States\ScenarioTests.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using LiveN.Test.Framework.Configuration;
using Multiplayer.Test.API;
using AsyncMultiplayer.SessionCommon;
using AsyncMultiplayer.NotificationService;
using Gds.Contracts;
using System.Net;
using System.Diagnostics;
using System.Threading;
using Multiplayer.Test.Proxy;

namespace Multiplayer.Test.API
{
    [TestClass]
    public class ScenarioTests : TestAreaBase
    {
        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            
            LockTest();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            UnlockTest();
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Validate that YourTurn notifications get deleted when users take their turn")]
        [TestProperty("Type", "FeatureTests")]
        public void P_YourTurnNotificationsGetDeletedWhenUserMakesAMove()
        {
            SessionState createSessionState = null;
            SessionState joinSessionState = null;

            // Player1 creates a new game session
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            // Verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            // Player2 Joins the game
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);
            joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID.ToString(), joinData);

            // Assert SessionState
            AssertJoinSessionState(createSessionState, joinSessionState);

            // Player 1 initializes game state
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;
            this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiableGameState);

            // Now Player2 takes their turn
            modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 0;
            modifiableGameState.GameData = new byte[] { 65, 66, 67, 68, 69 };

            this.GameStateProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameStateProxy.Password = TestAreaBase.users[1].Password;
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            Thread.Sleep(30000);

            // At this point we should have a YourTurn notification created for Player1
            string memberName = TestAreaBase.users[0].MemberName;      // player1
            string password = TestAreaBase.users[0].Password;

            List<Notification> notificationList = this.NotificationsServiceProxy.GetNotifications(
                joinSessionState.GameID.ToString(),
                joinSessionState.SessionID,
                (int)Notification.NotificationCategory.ToDo,
                Constants.IGNORE_lAST_ID,
                100,
                Notification.NotificationType.YourTurn.ToString(),
                true,
                memberName,
                password,
                Constants.NOTIFICATION_RETRIES,
                Constants.NOTIFICATION_SLEEP_TIME);

            Assert.AreEqual(1, notificationList.Count, "YourTurn Notification Not Found");
            Notification notification = notificationList[0];
            Assert.AreEqual(Notification.NotificationType.YourTurn, notification.Type);

            // Now Player1 takes their turn
            modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 65, 66, 67, 68, 69 };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            Thread.Sleep(30000);

            // Now we refresh the Notification list. We should not find a YourTurn notification for player1
            memberName = TestAreaBase.users[0].MemberName;      // player1
            password = TestAreaBase.users[0].Password;

            List<Notification> notificationsList2 = null;

            for (int i = 0; i < Constants.NOTIFICATION_RETRIES; i++)
            {
                Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME);

                notificationsList2 = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (notificationsList2 != null && notificationsList2.Count == 0)
                {
                    break;
                }
            }

            Assert.IsNotNull(notificationsList2);
            Assert.IsTrue(notificationsList2.Count == 0, "ERROR: Unexpected Number of notifications.");
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Validate that Nudge notifications get deleted when users take their turn")]
        [TestProperty("Type", "FeatureTests")]
        public void P_NudgeNotificationsGetDeletedWhenUserMakesAMove()
        {
            SessionState createSessionState = null;
            SessionState joinSessionState = null;

            // Player1 creates a new game session
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            // Verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            // Player2 Joins the game
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);
            joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID.ToString(), joinData);

            // Assert SessionState
            AssertJoinSessionState(createSessionState, joinSessionState);

            // Player1 initializes game state
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;
            this.GameStateProxy.PutGameState(createSessionState.SessionID, creationData.GameID.ToString(), modifiableGameState);

            SessionState modifiedSessionState = this.GameSessionProxy.ViewSession(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());

            // Player1 Nudges Player2
            GameAction gameAction = new GameAction();
            gameAction.ActionType = GameActionType.UserNudge;
            gameAction.ActionData = new byte[] { 1 };
            gameAction.ActionTime = DateTime.Now;
            gameAction.SequenceNumber = modifiedSessionState.State.SequenceNumber;

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;
            this.GameStateProxy.PostGameAction(modifiedSessionState.SessionID.ToString(), modifiedSessionState.GameID.ToString(), gameAction);

            // At this point Player2 should have a Nudge notification

            string memberName = TestAreaBase.users[1].MemberName;      // player2
            string password = TestAreaBase.users[1].Password;

            List<Notification> notificationList1 = this.NotificationsServiceProxy.GetNotifications(
                joinSessionState.GameID.ToString(),
                joinSessionState.SessionID,
                (int)Notification.NotificationCategory.ToDo,
                Constants.IGNORE_lAST_ID,
                100,
                Notification.NotificationType.Nudge.ToString(),
                true,
                memberName,
                password,
                Constants.NOTIFICATION_RETRIES,
                Constants.NOTIFICATION_SLEEP_TIME);

            Notification notification = null;
            if (notificationList1.Count > 0)
            {
                notification = notificationList1[0];
            }

            Assert.IsNotNull(notification, "Error: Did not find Notification.");
            Assert.AreEqual(modifiedSessionState.SessionID, notification.SessionId, "Error: SessionID of SessionState & Notification did not match.");
            Assert.AreEqual(modifiedSessionState.GameID, notification.GameId, "Error: GameID of SessionState & Notification did not match.");
            Assert.AreEqual(Notification.NotificationType.Nudge, notification.Type, "Notification Type did not match.");

            // Player2 takes their turn
            modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 0;
            modifiableGameState.GameData = new byte[] { 65, 66, 67, 68, 69 };

            this.GameStateProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameStateProxy.Password = TestAreaBase.users[1].Password;
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            // Now we refresh the Notification list. We should not find a Nudge notification for player2
            memberName = TestAreaBase.users[1].MemberName;      // player2
            password = TestAreaBase.users[1].Password;


            List<Notification> notificationsList2 = null;

            for (int i = 0; i < Constants.NOTIFICATION_RETRIES; i++)
            {
                Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME);

                notificationsList2 = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (notificationsList2 != null && notificationsList2.Count == 0)
                {
                    break;
                }
            }

            Assert.IsNotNull(notificationsList2);
            Assert.IsTrue(notificationsList2.Count == 0, "ERROR:Your Turn notification is not deleted.");
        }
        /// <summary>
        /// Test to validate YourTurn notification deletion once game is complete
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Validate that YourTurn notifications get deleted when game completes")]
        [TestProperty("Type", "FeatureTests")]
        public void P_YourTurnNotificationsDeletedWhenGameEnds()
        {
            SessionState createSessionState = null;
            SessionState joinSessionState = null;

            // Player1 creates a new game session
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            // Verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            // Player2 Joins the game
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);
            joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID.ToString(), joinData);

            // Assert SessionState
            AssertJoinSessionState(createSessionState, joinSessionState);

            // Player 1 initializes game state
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;
            this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiableGameState);

            // Now Player2 takes their turn
            modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 0;
            modifiableGameState.GameData = new byte[] { 65, 66, 67, 68, 69 };

            this.GameStateProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameStateProxy.Password = TestAreaBase.users[1].Password;
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            Thread.Sleep(30000);

            // At this point we should have a YourTurn notification created for Player1

            string memberName = TestAreaBase.users[0].MemberName;      // player1
            string password = TestAreaBase.users[0].Password;

            List<Notification> notificationList = this.NotificationsServiceProxy.GetNotifications(
                joinSessionState.GameID.ToString(),
                joinSessionState.SessionID,
                (int)Notification.NotificationCategory.ToDo,
                Constants.IGNORE_lAST_ID,
                100,
                Notification.NotificationType.YourTurn.ToString(),
                true,
                memberName,
                password,
                Constants.NOTIFICATION_RETRIES,
                Constants.NOTIFICATION_SLEEP_TIME);

            Assert.AreEqual(1, notificationList.Count, "YourTurn Notification Not Found");
            Notification notification = notificationList[0];
            Assert.AreEqual(Notification.NotificationType.YourTurn, notification.Type);

            //set gameResults 
            GameResults gameResults = GetDefaultTwoPlayerGameResult(joinSessionState.GameID.ToString(),(uint)joinSessionState.Variant);
       
            // Now Player1 ends the game

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;
            this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, joinSessionState.GameID.ToString(),gameResults);

            Thread.Sleep(30000);

            // Now we refresh the Notification list. We should not find a YourTurn notification for player1
            memberName = TestAreaBase.users[0].MemberName;      // player1
            password = TestAreaBase.users[0].Password;

            List<Notification> notificationsList2 = null;

            for (int i = 0; i < Constants.NOTIFICATION_RETRIES; i++)
            {
                Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME);

                notificationsList2 = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.YourTurn.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (notificationsList2 != null && notificationsList2.Count == 0)
                {
                    break;
                }
            }

            Assert.IsNotNull(notificationsList2);
            Assert.IsTrue(notificationsList2.Count == 0, "ERROR: Unexpected Number of notifications.");
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Test.API\Sessions\ViewSession.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using LiveN.Test.Framework.Configuration;
using Multiplayer.Test.API;
using AsyncMultiplayer.SessionCommon;
using AsyncMultiplayer.NotificationService;
using System.Net;
using System.Diagnostics;
using System.Threading;
using System.Data.SqlClient;
using System.Configuration;
using LIVEN.Common.Diagnostics;
using LiveN.Test.Common.Web;
using Gds.Contracts;
using Multiplayer.Test.UserAccounts;
using LiveN.Test.Framework;

namespace MultiPlayer.Test.API
{
    /// <summary>
    /// Test Cases for Sessions.svc ViewSession API
    /// </summary>
    [TestClass]
    public class ViewSession : TestAreaBase
    {
        
        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            LockTest();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            this.GameSessionProxy.Locale = "en-US";
            UnlockTest();
        }


        /// <summary>
        /// BVT test for ViewSession
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("BVT for Sessions.svc ViewSession API.")]
        [TestProperty("Type", "BVTs")]
        public void BVT_ViewSession()
        {
            SessionState createSessionState = null;
            SessionState viewSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      //  player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert createSessionState
            AssertCreateSessionState(creationData, createSessionState);

            viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert viewSessionState
            AssertSessionState(createSessionState, viewSessionState);
            Assert.AreEqual(0, viewSessionState.ActorSeat, "Error: ActorSeat is Wrong");
        }

        /// <summary>
        /// FeatureTest for ViewSession - Verify ViewSession when player is Not Active Player
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("FeatureTest for ViewSession - Verify ViewSession when player is Not Active Player")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ViewSession_NotActivePlayer()
        {
            SessionState createSessionState = null;
            SessionState joinSessionState = null;
            SessionState viewSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      //  player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert createSessionState
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2;
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            viewSessionState = this.GameSessionProxy.ViewSession(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());

            //Assert SessionState
            AssertSessionState(joinSessionState, viewSessionState);
        }

        /// <summary>
        /// FeatureTest for ViewSession - Verify ViewSession when player is Not in Session
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("FeatureTest for ViewSession - Verify ViewSession when player is Not in Session")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSession_PlayerNotInSession()
        {
            SessionState createSessionState = null;
            SessionState joinSessionState = null;
            SessionState viewSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      //  player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert createSessionState
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            //TODO: this won't always work, as we hardcode accounts and not all environments have two pre-existing users
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2;
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            //ViewSession by Player who is NOT in Session
            this.GameSessionProxy.UserID = TestAreaBase.users[2].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[2].Password;

            try
            {
                viewSessionState = this.GameSessionProxy.ViewSession(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());
                Assert.Fail("Error: Expected FORBIDDEN error but it didnt get one");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.UserNotAllowedToGetStateInSession), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for ViewSession - Verify ViewSession - Not Exist SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSession - Verify ViewSession - Not Exist SessionID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSession_NotExistSessionID()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            SessionState viewSessionState = null;

            //Player1 creates Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                viewSessionState = this.GameSessionProxy.ViewSession("j6b048d0-15gd-4i9d-8f65-91bz93s762f5", Constants.TESTGAMEID.ToString());
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for ViewSession - Verify ViewSession - Empty String as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSession - Verify ViewSession - Empty String as SessionID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSession_EmptyStringSessionID()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            SessionState viewSessionState = null;

            //Player1 creates Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                viewSessionState = this.GameSessionProxy.ViewSession(String.Empty, Constants.TESTGAMEID.ToString());
                Assert.Fail("Error: Expected to get Method NOT ALLOWED error but it didn't ");
            }
            catch (RestException restEx)
            {
                //TODO: Currently it's throwing of ContentType: text/html error so GetEventID doesn't work. Update when Bug 4168 is Fixed.
                VerifyException(HttpStatusCode.MethodNotAllowed, restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for ViewSession - Verify ViewSession - Null String as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSession - Verify ViewSession - Null String as SessionID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSession_NullSessionID()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            SessionState viewSessionState = null;

            //Player1 creates Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                viewSessionState = this.GameSessionProxy.ViewSession(null, Constants.TESTGAMEID.ToString());
                Assert.Fail("Error: Expected to get exception METHOD NOT ALLOWED but it didnt");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.MethodNotAllowed, restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for ViewSession - Verify ViewSession - Long String as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSession - Verify ViewSession - Long String as SessionID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSession_GTMaxLengthStringSessionID()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            SessionState viewSessionState = null;

            //Player1 creates Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                viewSessionState = this.GameSessionProxy.ViewSession("ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz012", Constants.TESTGAMEID.ToString());
                Assert.Fail("ViewSession Passed with LongString as SessionID");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for ViewSession - Verify ViewSession - One Char String as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSession - Verify ViewSession - One Char String as SessionID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSession_OneCharStringSessionID()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            SessionState viewSessionState = null;

            //Player1 creates Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                viewSessionState = this.GameSessionProxy.ViewSession("1", Constants.TESTGAMEID.ToString());
                Assert.Fail("ViewSession Passed with OneChar String as SessionID");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for ViewSession - Verify ViewSession - String.Empty GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSession - Verify ViewSession - String.Empty GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSession_EmptyStringGameID()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            SessionState createSessionState = null;
            SessionState viewSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            try
            {
                viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID, String.Empty);
                Assert.Fail("ViewSession Passed with String.Empty as GameID");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for ViewSession - Verify ViewSession - null GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSession - Verify ViewSession - null GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSession_NullGameID()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            SessionState createSessionState = null;
            SessionState viewSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            try
            {
                viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID, null);
                Assert.Fail("ViewSession Passed with null as GameID");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for ViewSession - Verify ViewSession - LongString GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSession - Verify ViewSession - LongString GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSession_LongStringGameID()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            SessionState createSessionState = null;
            SessionState viewSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            try
            {
                viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID, "4434343298432830284230984302984039284329842384238423842394832943843925721483402370");
                Assert.Fail("ViewSession Passed with Long String as GameID");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidGameIDFormatWhileGettingIdentity), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for ViewSession - Verify ViewSession - One Char String GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSession - Verify ViewSession - One Char String GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSession_OneCharStringGameID()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            SessionState createSessionState = null;
            SessionState viewSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            try
            {
                viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID, "1");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDDoesNotMatchPartnerTokenTitleID), restEx.Response);
            }
        }
        /// <summary>
        /// FeatureTest for ViewSession - Verify ViewSession -  GameID not matching Partner token TitleID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("FeatureTest for ViewSession - Verify ViewSession - GameID not matching Partner token TitleID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSession_GameIdNotMatchPartnerTokenTitleID()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            SessionState createSessionState = null;
            SessionState viewSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            Random rndm = new Random();
            uint RandomGameId = uint.MinValue;

            do
            {
                RandomGameId = (uint)rndm.Next();
            }
            while (uint.Parse(Config.Environment.StsSettings.TitleId) == RandomGameId);

            try
            {
                viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID, RandomGameId.ToString());
                Assert.Fail(string.Format("ViewSession should not be allowed for an invalid game ID ({0})", RandomGameId.ToString()));
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDDoesNotMatchPartnerTokenTitleID), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for ViewSession - Verify ViewSession - Invalid Format GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for ViewSession - Verify ViewSession - Invalid Format GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSession_InvalidFormatGameID()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            SessionState createSessionState = null;
            SessionState viewSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            string GameIdRndm = GetInvalidGameId();

            try
            {
                viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID, GameIdRndm);
                Assert.Fail("ViewSession Passed with Long String as GameID");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidGameIDFormatWhileGettingIdentity), restEx.Response);
            }
        }

        /// <summary>
        /// Feature test for ViewSession- verify   notification is deleted only for the player calling  view session, and not the others
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("Feature test for ViewSession- verify   notification is deleted only for the player calling  view session, and not the others .")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ViewSession_DeleteOnlyReadNotification()
        {
            //set variant name that would be posted on notifications
            uint NotificationVariant = 2;
            // Initialize CreationData
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, (int)NotificationVariant, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");

            // player1 create session
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                                    TestAreaBase.users[0].MemberName,
                                                                                    TestAreaBase.users[0].Password);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //player 2 join session
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                               TestAreaBase.users[1].MemberName,
                                                                               TestAreaBase.users[1].Password);
            ////Delete existing notifications
            TestAreaBase.notificationCommon.CheckNotificationCount(joinSessionState.GameID.ToString(), joinSessionState.SessionID,
                                           TestAreaBase.users[0].MemberName,
                                           TestAreaBase.users[0].Password);
            //Delete existing notifications
            TestAreaBase.notificationCommon.CheckNotificationCount(joinSessionState.GameID.ToString(), joinSessionState.SessionID,
                                           TestAreaBase.users[1].MemberName,
                                           TestAreaBase.users[1].Password);

            //set gameResults             
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 10,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = NotificationVariant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = NotificationVariant
            };

            //post game end by player 1
            this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, joinSessionState.GameID.ToString(), gameResults,
                                            TestAreaBase.users[0].MemberName,
                                            TestAreaBase.users[0].Password);


            this.NotificationsServiceProxy.Locale = "en-US";

            //get YouLose Notification and verify that it is not viewed/read yet
            Notification youLoseNotification = GetNotification(joinSessionState.GameID.ToString(), joinSessionState.SessionID, Notification.NotificationType.YouLose.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Assert.AreEqual<Notification.NotificationStatus>(Notification.NotificationStatus.UnRead,
                                                             youLoseNotification.Status, 
                                                             "Error: Unexpectedly ,YouWin notification is already viewed");

            //get YouWin Notification and verify that it is not viewed/read yet
            Notification youWinNotification = GetNotification(joinSessionState.GameID.ToString(), joinSessionState.SessionID, Notification.NotificationType.YouWin.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            Assert.AreEqual<Notification.NotificationStatus>(Notification.NotificationStatus.UnRead,
                                                             youWinNotification.Status,
                                                             "Error: Unexpectedly ,YouWin notification is already viewed");
            //view session by 1st player
            this.GameSessionProxy.ViewSession(joinSessionState.SessionID, joinSessionState.GameID.ToString(),
                                              TestAreaBase.users[0].MemberName,
                                              TestAreaBase.users[0].Password);

            //wait due to async behaviour and time for Notf svc to process the one in the queue
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);

            //get YouWin Notification and verify that it is viewed and deleted
            this.NotificationsServiceProxy.UserID = TestAreaBase.users[0].MemberName;
            this.NotificationsServiceProxy.Password = TestAreaBase.users[0].Password;
            List<Notification> notificationList = this.NotificationsServiceProxy.GetNotifications(joinSessionState.GameID.ToString(),
                                                                                                 joinSessionState.SessionID,
                                                                                                 0,
                                                                                                 Constants.IGNORE_lAST_ID,
                                                                                                 1000,
                                                                                                 Notification.NotificationType.YouWin.ToString(),
                                                                                                 true);

            Assert.IsNotNull(notificationList,"Unexpected notification list is null");

            Assert.IsTrue(notificationList.Count == 0, "Error: Unexpected number of You Win Notification");

            //get YouLose Notification and verify that it is not deleted , as it is not viewed/read yet          
            this.NotificationsServiceProxy.UserID = TestAreaBase.users[1].MemberName;
            this.NotificationsServiceProxy.Password = TestAreaBase.users[1].Password;
            List<Notification> notificationList2 = this.NotificationsServiceProxy.GetNotifications(joinSessionState.GameID.ToString(),
                                                                                                 joinSessionState.SessionID,
                                                                                                 0,
                                                                                                 Constants.IGNORE_lAST_ID,
                                                                                                 1000,
                                                                                                 Notification.NotificationType.YouLose.ToString(),
                                                                                                 true);

            Assert.IsNotNull(notificationList2, "Unexpected notification list is null");

            Assert.IsTrue(notificationList2.Count == 1, "Error: Unexpected number of YOu Win Notification");
          
        }

        /// <summary>
        /// Feature test for ViewSession- verify  YouLose/YouWin notification is deleted after view session
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("Feature test for ViewSession- verify  YouLose/YouWin notification is deleted after view session.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ViewSession_DeleteYouLoseYouWinNotifications()
        {
            //set variant name that would posted on notifications
            uint NotificationVariant = 2;
            // Initialize CreationData
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, (int)NotificationVariant, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");

            // player1 create session
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                                    TestAreaBase.users[0].MemberName,
                                                                                    TestAreaBase.users[0].Password);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //player 2 join session
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                               TestAreaBase.users[1].MemberName,
                                                                               TestAreaBase.users[1].Password);
            //Delete existing notifications
            TestAreaBase.notificationCommon.CheckNotificationCount(joinSessionState.GameID.ToString(), joinSessionState.SessionID,
                                           TestAreaBase.users[0].MemberName,
                                           TestAreaBase.users[0].Password);
            //Delete existing notifications
            TestAreaBase.notificationCommon.CheckNotificationCount(joinSessionState.GameID.ToString(), joinSessionState.SessionID,
                                           TestAreaBase.users[1].MemberName,
                                           TestAreaBase.users[1].Password);
            //set gameResults             
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 10,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = NotificationVariant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = NotificationVariant
            };

            //post game end by player 1
            this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, joinSessionState.GameID.ToString(), gameResults,
                                            TestAreaBase.users[0].MemberName,
                                            TestAreaBase.users[0].Password);
                      

            this.NotificationsServiceProxy.Locale = "en-US";
            //get YouLose Notification and verify that it is not viewed yet
            Notification youLoseNotification = GetNotification(joinSessionState.GameID.ToString(), joinSessionState.SessionID, Notification.NotificationType.YouLose.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Assert.AreEqual<Notification.NotificationStatus>(Notification.NotificationStatus.UnRead,
                                                             youLoseNotification.Status,
                                                             "Error: Unexpectedly ,YouLose notification is already viewed");
            //get YouWin Notification and verify that it is not viewed yet
            Notification youWinNotification = GetNotification(joinSessionState.GameID.ToString(), joinSessionState.SessionID, Notification.NotificationType.YouWin.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            Assert.AreEqual<Notification.NotificationStatus>(Notification.NotificationStatus.UnRead,
                                                             youWinNotification.Status,
                                                             "Error: Unexpectedly ,YouLose notification is already viewed");


            //view session by 2nd player
            this.GameSessionProxy.ViewSession(joinSessionState.SessionID, joinSessionState.GameID.ToString(),
                                              TestAreaBase.users[1].MemberName,
                                              TestAreaBase.users[1].Password);
            //view session by 1st player
            this.GameSessionProxy.ViewSession(joinSessionState.SessionID, joinSessionState.GameID.ToString(),
                                              TestAreaBase.users[0].MemberName,
                                              TestAreaBase.users[0].Password);

            //wait due to async behaviour and time for Notf svc to process the one in the queue
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);

            //get YouLose Notification and verify that it is viewed and deleted
            this.NotificationsServiceProxy.Locale = "en-US";
            this.NotificationsServiceProxy.UserID = TestAreaBase.users[1].MemberName;
            this.NotificationsServiceProxy.Password = TestAreaBase.users[1].Password;
            List<Notification> notificationList = this.NotificationsServiceProxy.GetNotifications(joinSessionState.GameID.ToString(),
                                                                                                 joinSessionState.SessionID,
                                                                                                 0,
                                                                                                 Constants.IGNORE_lAST_ID,
                                                                                                 1000,
                                                                                                 Notification.NotificationType.YouLose.ToString(),
                                                                                                 true);

            Assert.IsNotNull(notificationList, "Unexpected notification list is null");

            Assert.IsTrue(notificationList.Count == 0, "Error: Unexpected number of YOu Lose Notification");

            //get YouWin Notification and verify that it is viewed and deleted
            this.NotificationsServiceProxy.Locale = "en-US";
            this.NotificationsServiceProxy.UserID = TestAreaBase.users[0].MemberName;
            this.NotificationsServiceProxy.Password = TestAreaBase.users[0].Password;
            List<Notification> notificationList2 = this.NotificationsServiceProxy.GetNotifications(joinSessionState.GameID.ToString(),
                                                                                                 joinSessionState.SessionID,
                                                                                                 0,
                                                                                                 Constants.IGNORE_lAST_ID,
                                                                                                 1000,
                                                                                                 Notification.NotificationType.YouWin.ToString(),
                                                                                                 true);

            Assert.IsNotNull(notificationList2, "Unexpected notification list is null");

            Assert.IsTrue(notificationList2.Count == 0, "Error: Unexpected number of YOu Lose Notification");


        }

        /// <summary>
        /// Feature test for ViewSession- verify  GameOVer notification is deleted after view session
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("Feature test for ViewSession- verify  GameOver notification is deleted after view session .")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ViewSession_DeleteGameOverNotification()
        {
            //set variant name that would be posted on notifications
            uint VariantOnNotification = 2;
            // Initialize CreationData
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, (int)VariantOnNotification, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");

            // player1 create session
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                                    TestAreaBase.users[0].MemberName,
                                                                                    TestAreaBase.users[0].Password);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //player 2 join session
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                               TestAreaBase.users[1].MemberName,
                                                                               TestAreaBase.users[1].Password);

            //Delete existing notifications
            TestAreaBase.notificationCommon.CheckNotificationCount(joinSessionState.GameID.ToString(), joinSessionState.SessionID,
                                           TestAreaBase.users[0].MemberName,
                                           TestAreaBase.users[0].Password);
            //Delete existing notifications
            TestAreaBase.notificationCommon.CheckNotificationCount(joinSessionState.GameID.ToString(), joinSessionState.SessionID,
                                           TestAreaBase.users[1].MemberName,
                                           TestAreaBase.users[1].Password);           
            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.GameOverSeatIndexes = new int[] { 0 , 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.None.ToString(),
                Score = 10,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = VariantOnNotification
            };

            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.None.ToString(),
                Score = 10,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = VariantOnNotification
            };

            //post game end by player 1
            this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, joinSessionState.GameID.ToString(), gameResults,
                                            TestAreaBase.users[0].MemberName,
                                            TestAreaBase.users[0].Password);
          
         
            this.NotificationsServiceProxy.Locale = "en-US";
            //get GameOver Notification and verify that it is not viewed yet
            Notification GameOvereNotification = GetNotification(joinSessionState.GameID.ToString(), joinSessionState.SessionID, Notification.NotificationType.GameOver.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            Assert.AreEqual<Notification.NotificationStatus>(Notification.NotificationStatus.UnRead,
                                                             GameOvereNotification.Status,
                                                             "Error: Unexpectedly ,YouLose notification is already viewed");

            //get GameOver Notification for player2 and verify that it is not viewed yet
            Notification GameOvereNotification2 = GetNotification(joinSessionState.GameID.ToString(), joinSessionState.SessionID, Notification.NotificationType.GameOver.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Assert.AreEqual<Notification.NotificationStatus>(Notification.NotificationStatus.UnRead,
                                                             GameOvereNotification2.Status,
                                                             "Error: Unexpectedly ,YouLose notification is already viewed");


            //view session by 1st player
            SessionState viewedSession= this.GameSessionProxy.ViewSession(joinSessionState.SessionID, joinSessionState.GameID.ToString(),
                                                                          TestAreaBase.users[0].MemberName,
                                                                          TestAreaBase.users[0].Password);


            //view session by 1st player
            SessionState viewedSession2= this.GameSessionProxy.ViewSession(joinSessionState.SessionID, joinSessionState.GameID.ToString(),
                                                                          TestAreaBase.users[1].MemberName,
                                                                          TestAreaBase.users[1].Password);


            //wait due to async behaviour and time for Notf svc to process the one in the queue
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);

            //get GameOver Notification and verify that it is viewed and deleted
            this.NotificationsServiceProxy.UserID = TestAreaBase.users[0].MemberName;
            this.NotificationsServiceProxy.Password = TestAreaBase.users[0].Password;
            List<Notification> notificationList = this.NotificationsServiceProxy.GetNotifications(joinSessionState.GameID.ToString(),
                                                                                                 joinSessionState.SessionID,
                                                                                                 0,
                                                                                                 Constants.IGNORE_lAST_ID,
                                                                                                 1000,
                                                                                                 Notification.NotificationType.GameOver.ToString(),
                                                                                                 true);

            Assert.IsNotNull(notificationList, "Unexpected notification list is null");

            Assert.IsTrue(notificationList.Count == 0, "Error: Unexpected number of GameOver Notification");

            //get GameOver Notification for player2 and verify that it is viewed and deleted
            this.NotificationsServiceProxy.UserID = TestAreaBase.users[1].MemberName;
            this.NotificationsServiceProxy.Password = TestAreaBase.users[1].Password;
            List<Notification> notificationList2 = this.NotificationsServiceProxy.GetNotifications(joinSessionState.GameID.ToString(),
                                                                                                 joinSessionState.SessionID,
                                                                                                 0,
                                                                                                 Constants.IGNORE_lAST_ID,
                                                                                                 1000,
                                                                                                 Notification.NotificationType.GameOver.ToString(),
                                                                                                 true);

            Assert.IsNotNull(notificationList2, "Unexpected notification list is null");

            Assert.IsTrue(notificationList2.Count == 0, "Error: Unexpected number of GameOver Notification");

        }

        /// <summary>
        /// Feature test for ViewSession- verify  GameTie notification is deleted after view session
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("Feature test for ViewSession- verify  GameTie notification is deleted after view session .")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ViewSession_DeleteGameTieNotification()
        {
            //set variant name that would be posted on notifications
            uint VariantOnNotification = 2;
            // Initialize CreationData
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, (int)VariantOnNotification, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");

            // player1 create session
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                                    TestAreaBase.users[0].MemberName,
                                                                                    TestAreaBase.users[0].Password);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //player 2 join session
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                               TestAreaBase.users[1].MemberName,
                                                                               TestAreaBase.users[1].Password);
                     
            //Delete existing notifications
            TestAreaBase.notificationCommon.CheckNotificationCount(joinSessionState.GameID.ToString(), joinSessionState.SessionID,
                                           TestAreaBase.users[0].MemberName,
                                           TestAreaBase.users[0].Password);
            //Delete existing notifications
            TestAreaBase.notificationCommon.CheckNotificationCount(joinSessionState.GameID.ToString(), joinSessionState.SessionID,
                                           TestAreaBase.users[1].MemberName,
                                           TestAreaBase.users[1].Password);
            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.TierSeatIndexes = new int[] { 0 , 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Tie.ToString(),
                Score = 15,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = VariantOnNotification
            };

            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Tie.ToString(),
                Score = 15,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = VariantOnNotification
            };


            //post game end by player 1
            this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, joinSessionState.GameID.ToString(), gameResults,
                                            TestAreaBase.users[0].MemberName,
                                            TestAreaBase.users[0].Password);

            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);
            //get GameTie Notification and verify that it is not viewed yet
            Notification GameTieNotification = GetNotification(joinSessionState.GameID.ToString(), joinSessionState.SessionID, Notification.NotificationType.GameTie.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            Assert.AreEqual<Notification.NotificationStatus>(Notification.NotificationStatus.UnRead,
                                                             GameTieNotification.Status,
                                                             "Error: Unexpectedly ,YouLose notification is already viewed");


            //get GameTie Notification and verify that it is not viewed yet
            Notification GameTieNotification2 = GetNotification(joinSessionState.GameID.ToString(), joinSessionState.SessionID, Notification.NotificationType.GameTie.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Assert.AreEqual<Notification.NotificationStatus>(Notification.NotificationStatus.UnRead,
                                                             GameTieNotification2.Status,
                                                             "Error: Unexpectedly ,YouLose notification is already viewed");


            //view session by 1st player
            this.GameSessionProxy.ViewSession(joinSessionState.SessionID, joinSessionState.GameID.ToString(),
                                              TestAreaBase.users[0].MemberName,
                                              TestAreaBase.users[0].Password);
            //view session by 2nd player
            this.GameSessionProxy.ViewSession(joinSessionState.SessionID, joinSessionState.GameID.ToString(),
                                              TestAreaBase.users[1].MemberName,
                                              TestAreaBase.users[1].Password);

            //wait due to async behaviour and time for Notf svc to process the one in the queue
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);

            this.NotificationsServiceProxy.Locale = "en-US";

            //get GameTie Notification and verify that it is viewed and deleted
            this.NotificationsServiceProxy.UserID = TestAreaBase.users[0].MemberName;
            this.NotificationsServiceProxy.Password = TestAreaBase.users[0].Password;
            List<Notification> notificationList = this.NotificationsServiceProxy.GetNotifications(joinSessionState.GameID.ToString(),
                                                                                                 joinSessionState.SessionID,
                                                                                                 0,
                                                                                                 Constants.IGNORE_lAST_ID,
                                                                                                 1000,
                                                                                                 Notification.NotificationType.GameOver.ToString(),
                                                                                                 true);

            Assert.IsNotNull(notificationList, "Unexpected notification list is null");

            Assert.IsTrue(notificationList.Count == 0, "Error: Unexpected number of GameTie Notification");


            //get GameTie Notification for 2nd player and verify that it is viewed and deleted
            this.NotificationsServiceProxy.UserID = TestAreaBase.users[1].MemberName;
            this.NotificationsServiceProxy.Password = TestAreaBase.users[1].Password;
            List<Notification> notificationList2 = this.NotificationsServiceProxy.GetNotifications(joinSessionState.GameID.ToString(),
                                                                                                 joinSessionState.SessionID,
                                                                                                 0,
                                                                                                 Constants.IGNORE_lAST_ID,
                                                                                                 1000,
                                                                                                 Notification.NotificationType.GameOver.ToString(),
                                                                                                 true);

            Assert.IsNotNull(notificationList2, "Unexpected notification list is null");

            Assert.IsTrue(notificationList2.Count == 0, "Error: Unexpected number of GameTie Notification");  
        }

        
        /// <summary>
        /// Feature test for ViewSession to verify only single delete notification request is  alllowed per user per session
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("Feature test for Sessions.svc ViewSession API - to verify only single delete ntification request is  alllowed per user per session.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ViewSession_SingleDeleteNotificationRequestPerUser()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");
            
            // Initialize CreationData
             CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, Constants.TESTGAMEVARIANT2, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");

            // player1 create session
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                                    TestAreaBase.users[0].MemberName,
                                                                                    TestAreaBase.users[0].Password);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //player 2 join session
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                               TestAreaBase.users[1].MemberName,
                                                                               TestAreaBase.users[1].Password);
           
            //set gameResults             
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 10,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant =(uint) Constants.TESTGAMEVARIANT2
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)Constants.TESTGAMEVARIANT2
            };

            //post game end by player 1
            this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, joinSessionState.GameID.ToString(), gameResults,
                                            TestAreaBase.users[0].MemberName,
                                            TestAreaBase.users[0].Password);
                        
            //wait for notifications in queue to be processed
            Thread.Sleep(3*Constants.NOTIFICATION_SLEEP_TIME * Constants.NOTIFICATION_RETRIES);

            NotificationTestCommon.StopService(this.NpdbMachineName, "NotificationService");

            //view session by 1st player
            SessionState viewedSession = this.GameSessionProxy.ViewSession(joinSessionState.SessionID, joinSessionState.GameID.ToString(),
                                                                            TestAreaBase.users[0].MemberName,
                                                                            TestAreaBase.users[0].Password);

            Assert.IsTrue(viewedSession.State.IsComplete, "The session is not marked as complete after a call to postGameEnd");

            SqlConnection myConnection = new SqlConnection(ConfigurationManager.ConnectionStrings["lest_AsyncNotification_db"].ConnectionString + ";Asynchronous Processing=true");
            myConnection.Open();

            //Read the row affected in queue
            SqlCommand myCommand = new SqlCommand("SELECT  *, casted_message_body =" +
                                        "CASE message_type_name WHEN 'X' " +
                                            "THEN CAST(message_body AS NVARCHAR(MAX))" +
                                            "ELSE message_body " +
                                        "END " +
                                      "FROM [AsyncNotification].[NotificationSchema].[NotificationRequestQueue] WITH(NOLOCK)", myConnection);

            using (SqlDataReader LivenReader = myCommand.ExecuteReader())
            {
                //read first row
                Assert.IsTrue(LivenReader.Read(), "Error: Unable to read from DB OR No notificatin request has been posted to Queue on a call to ViewSession");

                //read second row
                Assert.IsFalse(LivenReader.Read(), "Error: More than one notification request has been posted to Queue");
            }

            myCommand.Dispose();

            myConnection.Close();

            NotificationTestCommon.StartService(this.NpdbMachineName, "NotificationService");
        

        }

        /// <summary>
        /// Feature test for ViewSession to verify only single delete notification request is  alllowed per user per session, use Etag
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature test for Sessions.svc ViewSession API -to verify only single delete notification request is  alllowed per user per session, use Etag.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ViewSession_SingleDeleteNotifRequestPerUser_Etag()
        {
            // Initialize CreationData
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, Constants.TESTGAMEVARIANT2, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");

            // player1 create session
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                                    TestAreaBase.users[0].MemberName,
                                                                                    TestAreaBase.users[0].Password);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //player 2 join session
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                               TestAreaBase.users[1].MemberName,
                                                                               TestAreaBase.users[1].Password);
            //Delete existing notifications
            TestAreaBase.notificationCommon.CheckNotificationCount(createSessionState.GameID.ToString(), createSessionState.SessionID,
                                           TestAreaBase.users[0].MemberName,
                                           TestAreaBase.users[0].Password);

            //set gameResults             
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 10,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)Constants.TESTGAMEVARIANT2
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)Constants.TESTGAMEVARIANT2
            };

            //post game end by player 1
            this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, joinSessionState.GameID.ToString(), gameResults,
                                            TestAreaBase.users[0].MemberName,
                                            TestAreaBase.users[0].Password);

            //wait for notifications in queue to be processed
            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME * Constants.NOTIFICATION_RETRIES);

            this.NotificationsServiceProxy.Locale = "en-US";

            //View session state by 1st player
            SessionState viewedSession = this.GameSessionProxy.ViewSession(joinSessionState.SessionID, joinSessionState.GameID.ToString(),
                                                                            TestAreaBase.users[0].MemberName,
                                                                            TestAreaBase.users[0].Password);
            //wait for notifications in queue to be processed
            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME * Constants.NOTIFICATION_RETRIES);
                 
            //try to get YouWin Notification
            List<Notification> notificationList = this.NotificationsServiceProxy.GetNotifications(
                createSessionState.GameID.ToString(),
                createSessionState.SessionID,
                0,
                Constants.IGNORE_lAST_ID,
                10,
                Notification.NotificationType.YouWin.ToString(),
                true,
                TestAreaBase.users[0].MemberName,
                TestAreaBase.users[0].Password,
                null);

            Assert.IsNotNull(notificationList, "Error: Did not find Notification.");
            Assert.AreEqual(0, notificationList.Count, "Error: Incorrect number of notifications.");

            string etag = this.NotificationsServiceProxy.EtagInResponse;

            //second calll to view session to see if delete request is posted to queue
            viewedSession = this.GameSessionProxy.ViewSession(joinSessionState.SessionID, joinSessionState.GameID.ToString(),
                                                                            TestAreaBase.users[0].MemberName,
                                                                            TestAreaBase.users[0].Password);
            //wait for notifications in queue to be processed
            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME * Constants.NOTIFICATION_RETRIES);

            try
            {
                notificationList = this.NotificationsServiceProxy.GetNotifications(
                    createSessionState.GameID.ToString(),
                    createSessionState.SessionID,
                    0,
                    Constants.IGNORE_lAST_ID,
                    10,
                    Notification.NotificationType.YouWin.ToString(),
                    true,
                    TestAreaBase.users[0].MemberName,
                    TestAreaBase.users[0].Password,
                    etag);

                Assert.Fail("Error: Expected to get NOTMODIFIED but passed");
            }
            catch (RestException rx)
            {
                VerifyException(HttpStatusCode.NotModified, rx.Response);
            }

        }

        /// <summary>
        /// Feature test for ViewSession to verify Multiple delete notification requests are not  alllowed per user per session, use Etag
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("Feature test for Sessions.svc ViewSession API -to verify Multiple delete notification requests are not  alllowed per user per session, use Etag.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ViewSession_MutipleDeleteNotifRequestPerUser_Etag()
        {
            // Initialize CreationData
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, Constants.TESTGAMEVARIANT2, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");

            // player1 create session
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                                    TestAreaBase.users[0].MemberName,
                                                                                    TestAreaBase.users[0].Password);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //player 2 join session
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                               TestAreaBase.users[1].MemberName,
                                                                               TestAreaBase.users[1].Password);
            //Delete existing notifications
            TestAreaBase.notificationCommon.CheckNotificationCount(createSessionState.GameID.ToString(), createSessionState.SessionID,
                                           TestAreaBase.users[0].MemberName,
                                           TestAreaBase.users[0].Password);

            //set gameResults             
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 10,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)Constants.TESTGAMEVARIANT2
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)Constants.TESTGAMEVARIANT2
            };

            //post game end by player 1
            this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, joinSessionState.GameID.ToString(), gameResults,
                                            TestAreaBase.users[0].MemberName,
                                            TestAreaBase.users[0].Password);

            //wait for notifications in queue to be processed
            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME * Constants.NOTIFICATION_RETRIES);

            this.NotificationsServiceProxy.Locale = "en-US";

            //Call to viewSession 
            SessionState viewedSession = this.GameSessionProxy.ViewSession(joinSessionState.SessionID, joinSessionState.GameID.ToString(),
                                                                            TestAreaBase.users[0].MemberName,
                                                                            TestAreaBase.users[0].Password);

            //wait for notifications in queue to be processed
            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME * Constants.NOTIFICATION_RETRIES);   

            //try to get YouWin Notification
            List<Notification> notificationList = this.NotificationsServiceProxy.GetNotifications(
                createSessionState.GameID.ToString(),
                createSessionState.SessionID,
                0,
                Constants.IGNORE_lAST_ID,
                10,
                Notification.NotificationType.YouWin.ToString(),
                true,
                TestAreaBase.users[0].MemberName,
                TestAreaBase.users[0].Password,
                null );

            Assert.IsNotNull(notificationList, "Error: Did not find Notification.");
            Assert.AreEqual(0, notificationList.Count, "Error: Incorrect number of notifications.");

            string etag = this.NotificationsServiceProxy.EtagInResponse;

            //call ViewSession multiple times to imiitate DOS attack on Notification queue with multiple call viewSession
            for (int CntSession = 0; CntSession < 5; CntSession++)
            {
                viewedSession = this.GameSessionProxy.ViewSession(joinSessionState.SessionID, joinSessionState.GameID.ToString(),
                                                                            TestAreaBase.users[0].MemberName,
                                                                            TestAreaBase.users[0].Password);
            }

            //wait for notifications in queue to be processed
            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME * Constants.NOTIFICATION_RETRIES);

            try
            {
                notificationList = this.NotificationsServiceProxy.GetNotifications(
                    createSessionState.GameID.ToString(),
                    createSessionState.SessionID,
                    0,
                    Constants.IGNORE_lAST_ID,
                    10,
                    Notification.NotificationType.YouWin.ToString(),
                    true,
                    TestAreaBase.users[0].MemberName,
                    TestAreaBase.users[0].Password,
                    etag);

                Assert.Fail("Error: Expected NOTMODIFIED error but passed");
            }
            catch (RestException rx)
            {
                VerifyException(HttpStatusCode.NotModified, rx.Response);
            }

        }

        public string GetLeaderboardValue(string statEntry, string userName, string password)
        {
            LeaderboardResult result = this.NotificationsServiceProxy.GetLeaderboard(Constants.TESTGAMEID.ToString(), Constants.TESTGAMEVARIANT.ToString(), "BestScore", "1", "W1", "100", "2", userName, password);
            Assert.IsNotNull(result, "No result was returned");

            if (result.Leaderboard == null)
            {
                return "0";
            }
            else
            {
                Assert.IsNotNull(result.Leaderboard, "No statistics were returned");
                Assert.AreNotEqual(0, result.Leaderboard.Count, "Leaderboard is empty");

                IList<Entry> entryList = result.Leaderboard[0].Statistics;
                IEnumerable<Entry> entries = (from e in entryList
                                              where e.Name == statEntry
                                              select e);
                int numEntries = entries.Count<Entry>();
                Assert.AreEqual(1, numEntries, "Error: Unexpected number of entries in response.");
                return entries.First<Entry>().Value;
            }

        }

        //related bugs 10713 and 10981
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify player profile info")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ViewSession_ProfileInfo()
        {
            List<XboxLiveAccount> newUsers = Users.CreateUsers(2);
            Thread.Sleep(Constants.NEW_USER_WAIT_TIME); // give time after account is created so that services will not fail to get puid
            
            this.GameSessionProxy.Locale = Constants.LOCALES[GlobalRandom.Next(Constants.LOCALES.Length)];

            // Initialize CreationData
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, new byte[] { 1, 2, 3 },
                                                               new InactivityWarningBehavior(), true, "TestGame");
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, newUsers[0].MemberName, newUsers[0].Password);
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData, newUsers[1].MemberName, newUsers[1].Password);
            AssertJoinSessionState(createSessionState, joinSessionState);

            SessionState viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(), newUsers[0].MemberName, newUsers[0].Password);
            AssertSessionState(joinSessionState, viewSessionState);
            Assert.AreEqual(0, viewSessionState.ActorSeat, "Error: ActorSeat is Wrong");
            VerifyProfileInfo(viewSessionState, 0, Users.GetGamertag(newUsers[0].MemberName, newUsers[0].Password));
            VerifyProfileInfo(viewSessionState, 1, Users.GetGamertag(newUsers[1].MemberName, newUsers[1].Password));
        }

        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify player profile info for unsupporte locales will default to English with no error retriving profile data.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ViewSession_ProfileInfo_UnsupportedLocale()
        {
            List<XboxLiveAccount> newUsers = Users.CreateUsers(2);
            Thread.Sleep(Constants.NEW_USER_WAIT_TIME); // give time after account is created so that services will not fail to get puid

            this.GameSessionProxy.Locale = "aa-AA";

            // Initialize CreationData
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, new byte[] { 1, 2, 3 },
                                                               new InactivityWarningBehavior(), true, "TestGame");
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, newUsers[0].MemberName, newUsers[0].Password);
            AssertCreateSessionState(creationData, createSessionState);
            VerifyProfileInfo(createSessionState, 0, Users.GetGamertag(newUsers[0].MemberName, newUsers[0].Password));

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData, newUsers[1].MemberName, newUsers[1].Password);
            AssertJoinSessionState(createSessionState, joinSessionState);
            VerifyProfileInfo(joinSessionState, 0, Users.GetGamertag(newUsers[0].MemberName, newUsers[0].Password));
            VerifyProfileInfo(joinSessionState, 1, Users.GetGamertag(newUsers[1].MemberName, newUsers[1].Password));

            SessionState viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(), newUsers[0].MemberName, newUsers[0].Password);
            AssertSessionState(joinSessionState, viewSessionState);
            Assert.AreEqual(0, viewSessionState.ActorSeat, "Error: ActorSeat is Wrong");
            VerifyProfileInfo(viewSessionState, 0, Users.GetGamertag(newUsers[0].MemberName, newUsers[0].Password));
            VerifyProfileInfo(viewSessionState, 1, Users.GetGamertag(newUsers[1].MemberName, newUsers[1].Password));
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Test.API\Subscription\UpdatePushSubscription.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Multiplayer.Test.UserAccounts;
using LiveN.Test.Framework;
using AsyncMultiplayer.NotificationService;
using LiveN.Test.Common.Web;
using System.Net;

namespace Multiplayer.Test.API
{
    /// <summary>
    /// Summary description for UpdatePushSubscription
    /// </summary>
    [TestClass]
    public class UpdatePushSubscription : TestAreaBase
    {
        private const string UrlKey = "TheURLKey";
        private const string TestUrl = "https://sn1.notify.live.net/";
        private static readonly string Username = users[0].MemberName;
        private static readonly string Password = users[0].Password;
        private static readonly string Gamertag = Users.GetGamertag(users[0].MemberName, users[0].Password);

        [TestMethod]
        public void UpdatePushSubscription_VerifyUpdated()
        {
            this.AddPushSubscriptionForUser(users[0], TestUrl, "*", UrlKey);

            PushSubscription ps = this.PushSubscriptionProxy.GetPushSubscription(users[0], UrlKey);

            Assert.AreEqual<string>(TestUrl, ps.Url, "Incorrect URL returned");
            Assert.AreEqual<string>("*", ps.SubTypes, "Incorrect subtype returned");
        }

        [TestMethod]
        public void UpdatePushSubscription_NewUser_VerifyUpdated()
        {
            XboxLiveAccount xblAcct = Users.CreateUsers(1)[0];
            this.AddPushSubscriptionForUser(xblAcct, TestUrl, "*", UrlKey);
            UserData data = testHooksClient.GetUserData(Users.GetXuid(xblAcct.MemberName, xblAcct.Password));
            
            Assert.IsNotNull(data);
            Assert.AreEqual<string>(data.Push.Url, TestUrl);
            Assert.AreEqual<string>(data.Push.SubTypes, "*");
        }

        [TestMethod]
        public void UpdateExistingPushSubscription_VerifyUpdated()
        {
            PushSubscription ps = this.PushSubscriptionProxy.GetPushSubscription(users[0], UrlKey);

            if (ps == null)
                AddPushSubscriptionForUser(users[0], TestUrl, "*", UrlKey);

            string url2 = "https://sn2.notify.live.net/";
            string key2 = "TheKey2";
            AddPushSubscriptionForUser(users[0], url2, "*", key2);

            PushSubscription ps2 = this.PushSubscriptionProxy.GetPushSubscription(users[0], key2);

            Assert.AreEqual<string>(url2, ps2.Url, "Incorrect URL returned");
            Assert.AreEqual<string>("*", ps2.SubTypes, "Incorrect subtype returned");
                        
        }

        [TestMethod]
        public void UpdateExistingPushSubscription_SameKeyNewUrl_VerifyUpdated()
        {
            PushSubscription ps = new PushSubscription();

            try
            {
                ps = this.PushSubscriptionProxy.GetPushSubscription(users[0], UrlKey);

                if (ps == null)
                    AddPushSubscriptionForUser(users[0], TestUrl, "*", UrlKey);
                    
            }
            catch(RestException re)
            {
                if (re.Response.Status == HttpStatusCode.NotFound)
                {
                    AddPushSubscriptionForUser(users[0], TestUrl, "*", UrlKey);
                }
                else
                {
                    throw re;
                }
            }

            string url2 = "https://sn2.notify.live.net/";
            AddPushSubscriptionForUser(users[0], url2, "*", UrlKey);

            PushSubscription ps2 = this.PushSubscriptionProxy.GetPushSubscription(users[0], UrlKey);

            Assert.AreEqual<string>(url2, ps2.Url, "Incorrect URL returned");
            Assert.AreEqual<string>("*", ps2.SubTypes, "Incorrect subtype returned");

        }

        [TestMethod]
        public void UpdateExistingPushSubscription_SameUrlNewKey_VerifyUpdated()
        {
            PushSubscription ps = this.PushSubscriptionProxy.GetPushSubscription(users[0], UrlKey);

            if (ps == null)
                AddPushSubscriptionForUser(users[0], TestUrl, "*", UrlKey);

            string key2 = "TheKey2";
            AddPushSubscriptionForUser(users[0], TestUrl, "*", key2);

            PushSubscription ps2 = this.PushSubscriptionProxy.GetPushSubscription(users[0], key2);

            Assert.AreEqual<string>(TestUrl, ps2.Url, "Incorrect URL returned");
            Assert.AreEqual<string>("*", ps2.SubTypes, "Incorrect subtype returned");
        }

        [TestMethod]
        public void UpdateExistingPushSubscription_DifferentSubtype()
        {
            try
            {
                AddPushSubscriptionForUser(users[0], string.Empty, "BadSubtype", UrlKey);
                Assert.Fail("Invalid subtype was accepted");
            }
            catch (RestException re)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, re.Response.Status, "Incorrect subtype was accepted");
            }
        }

        [TestMethod]
        public void UpdateExistingPushSubscription_EmptyURL()
        {
            try
            {
                AddPushSubscriptionForUser(users[0], string.Empty, "*", UrlKey);
                Assert.Fail("Empty url was accepted for subscription");
            }
            catch(RestException re)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, re.Response.Status, "Incorrect response returned");
            }
        }

        [TestMethod]
        public void UpdateExistingPushSubscription_nullURL()
        {
            try
            {
                AddPushSubscriptionForUser(users[0], null, "*", UrlKey);
                Assert.Fail("Null url was accepted for subscription");
            }
            catch (RestException re)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, re.Response.Status, "Incorrect response returned");
            }
        }

        [TestMethod]
        public void UpdateExistingPushSubscription_EmptyKey()
        {
            try
            {
                AddPushSubscriptionForUser(users[0], TestUrl, "*", string.Empty);
                Assert.Fail("Empty key was accepted for subscription");
            }
            catch (RestException re)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, re.Response.Status, "Incorrect response returned");
            }
        }

        [TestMethod]
        public void UpdateExistingPushSubscription_nullKey()
        {
            try
            {
                AddPushSubscriptionForUser(users[0], TestUrl, "*", null);
                Assert.Fail("Null key was accepted for subscription");
            }
            catch (RestException re)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, re.Response.Status, "Incorrect response returned");
            }
        }

        [TestMethod]
        public void UpdatePushSubscription_longKey()
        {
            // Key length should be restricted to 64 characters
            string invalidKey = "12345678901234567890123456789012345678901234567890123456789012345";

            try
            {
                AddPushSubscriptionForUser(users[0], TestUrl, "*", invalidKey);
                Assert.Fail("Null key was accepted for subscription");
            }
            catch (RestException re)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, re.Response.Status, "Incorrect response returned");
            }
        }

        void AddPushSubscriptionForUser(XboxLiveAccount xblAccount, string url, string subtypes, string key)
        {
            PushSubscription ps = new PushSubscription();
            ps.Url = url;
            ps.SubTypes = subtypes;

            this.PushSubscriptionProxy.UpdatePushSubscription(ps, xblAccount, key);
        }



        
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Test.API\Subscription\DeletePushSubscription.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Multiplayer.Test.UserAccounts;
using AsyncMultiplayer.NotificationService;
using LiveN.Test.Common.Web;
using System.Net;
using LiveN.Test.Framework;
using System.Threading;

namespace Multiplayer.Test.API
{
    /// <summary>
    /// Summary description for DeletePushSubscription
    /// </summary>
    [TestClass]
    public class DeletePushSubscription : TestAreaBase
    {
        // [ClassInitialize()]
        // public static void MyClassInitialize(TestContext testContext) { }
        //
        // Use ClassCleanup to run code after all tests in a class have run
        // [ClassCleanup()]
        // public static void MyClassCleanup() { }
        //
        // Use TestInitialize to run code before running each test 
        // [TestInitialize()]
        // public void MyTestInitialize() { }
        //
        // Use TestCleanup to run code after each test has run
        // [TestCleanup()]
        // public void MyTestCleanup() { }
        //
        
        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Create a subscription verify push url and then delele it and verify that the user does not have the push url anymore.")]
        [TestProperty("Type", "BVTs")]
        public void BVT_DeletePushSubscription()
        {
            PutUserData(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, "0");

            this.PushSubscriptionProxy.DeletePushSubscription(Users.GetGamertag(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password), "0", TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            
            UserData userData = testHooksClient.GetUserData(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password));
            Assert.IsNotNull(userData, "user data is not expected to be null.");
            Assert.AreEqual("", userData.Push.Url, "Incorrect push url after Delete");
            Assert.AreEqual("", userData.Push.SubTypes, "Incorrect push notification types after Update");
            Assert.AreEqual("", userData.Push.UrlKey, "Incorrect push url key after Update");
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify not found for a key that does not exist")]
        [TestProperty("Type", "Features")]
        public void N_DeletePushSubscription_KeyDoesNotExist()
        {
            PutUserData(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, "0");
            try
            {
                this.PushSubscriptionProxy.DeletePushSubscription(Users.GetGamertag(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password), "I do not exist", TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("Expected NotFound.");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotFound, e.Response.Status);
                //TODO: After 11676  is fixed, verify error message as well. 
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify that we get 200 back when userdata is not populated before calling DeletePushSubscription.")]
        [TestProperty("Type", "Features")]
        public void N_DeletePushSubscription_UserDataEmpty()
        {
            List<XboxLiveAccount> newUser = Users.CreateUsers(1);
            this.PushSubscriptionProxy.DeletePushSubscription(Users.GetGamertag(newUser[0].MemberName, newUser[0].Password), "0", newUser[0].MemberName, newUser[0].Password);
        }

        // 11675 -- PushSubscription:  When a user that did not have any entry in the user data storage table (Brand new user) calls DeletePushSubscription API, we return Unauthorized.
        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that trying to deleted an already deleted subscription results in Not Found")]
        [TestProperty("Type", "Features")]
        public void N_DeletePushSubscription_DeleteAgain()
        {
            PutUserData(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, "0");

            this.PushSubscriptionProxy.DeletePushSubscription(Users.GetGamertag(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password), "0", TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            UserData userData = testHooksClient.GetUserData(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password));
            Assert.IsNotNull(userData, "user data is not expected to be null.");
            Assert.AreEqual("", userData.Push.Url, "Incorrect push url after Delete");
            Assert.AreEqual("", userData.Push.SubTypes, "Incorrect push notification types after Update");
            Assert.AreEqual("", userData.Push.UrlKey, "Incorrect push url key after Update");

            try
            {
                this.PushSubscriptionProxy.DeletePushSubscription(Users.GetGamertag(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password), "0", TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("Expected NotFound.");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotFound, e.Response.Status);
                //TODO: After 11676  is fixed, verify error message as well. 
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify unauthorized if gamertag is not the same as the one in the user token")]
        [TestProperty("Type", "Features")]
        public void N_DeletePushSubscription_Gamertag_NotCallersGamertag()
        {
            PutUserData(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, "0");
            try
            {
                this.PushSubscriptionProxy.DeletePushSubscription(Users.GetGamertag(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password), "0", TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("Expected Unauthorized.");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.Unauthorized, "2148015944 Not Authorized.", e.Response);
            }
        }
        
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify that we do not get a 500 for a gamertag that is not a valid.")]
        [TestProperty("Type", "Features")]
        public void N_DeletePushSubscription_Gamertag_DoesNotExist()
        {
            XboxLiveAccount userAc = Users.CreateUsers(1)[0];
            PutUserData(userAc.MemberName, userAc.Password, "0");

            try
            {
                this.PushSubscriptionProxy.DeletePushSubscription("Invalid gamertag", "0", TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("Expected Unauthorized.");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.Unauthorized, "2148015944 Not Authorized.", e.Response);
            }
        }

        //11670 - PushSubscription: If gamertag is not specified, it should be a bad request instead of unauthorized.
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify bad request when gamertag is not specified.")]
        [TestProperty("Type", "Features")]
        public void N_DeletePushSubscription_EmptyGamertag()
        {
            PutUserData(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, "0");
            try
            {
                this.PushSubscriptionProxy.DeletePushSubscription("", "0", TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("Expected Bad Request.");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, e.Response.Status);
                //TODO: After 11676  is fixed, verify error message as well. 
            }
        }

        //11671 -- this is a bug right now because there is no limit on key so there is no such thing called invalid key
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify bad request when key is invalid.")]
        [TestProperty("Type", "Features")]
        public void N_DeletePushSubscription_InvalidKey()
        {
            //TODO: Once you know the length restriction on key, use an invalid key. 
            try
            {
                this.PushSubscriptionProxy.DeletePushSubscription(Users.GetGamertag(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password), "What is an invalid key?", TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("Expected Not Found.");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotFound, e.Response.Status);
                //TODO: After 11676  is fixed, verify error message as well. 
            }
        }

        //11673 -- PushSubscription: If key is not specified, it should be a bad request instead of NotFound because that way the caller knows that he has to specify a key
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify bad request when key is not specified.")]
        [TestProperty("Type", "Features")]
        public void N_DeletePushSubscription_EmptyKey()
        {
            try
            {
                this.PushSubscriptionProxy.DeletePushSubscription(Users.GetGamertag(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password), "", TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("Expected Bad Request.");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, e.Response.Status);
                //TODO: After 11676  is fixed, verify error message as well. 
            }
        }

        private void PutUserData(string userName, string password, string key)
        {
            PushSubscription pushSubscription = new PushSubscription();
            pushSubscription.Url = "http://www.kfhgfkdghfghfhgfk.com/lgkdfhgdfjkghfjkhg";
            pushSubscription.SubTypes = "*";
            this.PushSubscriptionProxy.UpdatePushSubscription(pushSubscription, Users.GetGamertag(userName, password), key, userName, password);

            UserData userData = testHooksClient.GetUserData(Users.GetXuid(userName, password));
            Assert.IsNotNull(userData, "user data is not expected to be null.");
            Assert.AreEqual(pushSubscription.Url, userData.Push.Url, "Incorrect push url after Update");
            Assert.AreEqual(pushSubscription.SubTypes, userData.Push.SubTypes, "Incorrect push notification types after Update");
            Assert.AreEqual("0", userData.Push.UrlKey, "Incorrect push url key after Update");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Test.API\Subscription\GetPushSubscription.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Multiplayer.Test.Proxy;
using AsyncMultiplayer.NotificationService;
using Multiplayer.Test.UserAccounts;
using LiveN.Test.Framework;
using LiveN.Test.Common.Web;
using System.Net;

namespace Multiplayer.Test.API
{
    /// <summary>
    /// Summary description for GetPushSubscription
    /// </summary>
    [TestClass]
    public class GetPushSubscription : TestAreaBase
    {
        private const string UrlKey = "TheURLKey";
        private const string TestUrl = "https://sn1.notify.live.net/";
        private static readonly string Username = users[0].MemberName;
        private static readonly string Password = users[0].Password;
        private static readonly string Gamertag = Users.GetGamertag(users[0].MemberName, users[0].Password);

        /// <summary>
        /// Make sure the current user has an existing subscription
        /// </summary>
        /// <param name="testContext"></param>
        [TestInitialize]
        public void Initialize()
        {
            PushSubscription ps = new PushSubscription();
            ps.SubTypes = "*";
            ps.Url = TestUrl;
            
            PushSubscriptionProxy nsp = new PushSubscriptionProxy(Username, users[0].Password);
            nsp.UpdatePushSubscription(ps, users[0], UrlKey);
            
        }

        [TestMethod]
        public void GetPushSubscriptionBVT()
        {
            PushSubscription ps = this.PushSubscriptionProxy.GetPushSubscription(Gamertag, UrlKey, Username, Password);
            
            Assert.IsNotNull(ps, "No Push Subscription information returned where expected");
            Assert.AreEqual(ps.Url, TestUrl, "PS Url returned does not match expected");
        }

        [TestMethod]
        public void GetPushSubscription_NotRegistered_Veriy404()
        {
            XboxLiveAccount testUser = Users.CreateUsers(1)[0];

            try
            {
                PushSubscription ps = this.PushSubscriptionProxy.GetPushSubscription(testUser, "key");
            }
            catch (RestException re)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotFound, re.Response.Status, "Status code mismatch");
            }
        }

        [TestMethod]
        public void GetPushSubscription_EnableAndDisablePush_Veriy404()
        {
            List<XboxLiveAccount> testUser = Users.CreateUsers(1);
            AddPushSubscriptionForUser(testUser[0],TestUrl, UrlKey);

            this.PushSubscriptionProxy.DeletePushSubscription(testUser[0], UrlKey);

            try
            {
                PushSubscription ps = this.PushSubscriptionProxy.GetPushSubscription(testUser[0],UrlKey);
            }
            catch (RestException re)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotFound, re.Response.Status, "Status code mismatch");
            }
        }

        [TestMethod]
        public void GetPushSubscription_KeyAndGamertagForDifferentUser_VerifyUnauthorized()
        {
            XboxLiveAccount testUser = Users.CreateUsers(1)[0];

            try
            {
                PushSubscription subscription = this.PushSubscriptionProxy.GetPushSubscription(Gamertag, UrlKey,
                                                                            testUser.MemberName, testUser.Password);
                Assert.IsNull(subscription, "Subscription information was returned");
            }
            catch (RestException ex)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.Unauthorized, ex.Response.Status, "Status code mismatch");
            }
        }

        [TestMethod]
        public void GetPushSubscription_KeyForDifferentUser_VerifyUnauthorized()
        {
            XboxLiveAccount testUser = Users.CreateUsers(1)[0];

            try
            {
                PushSubscription subscription = this.PushSubscriptionProxy.GetPushSubscription(testUser.GamerTag, UrlKey,
                                                                            testUser.MemberName, testUser.Password);
                Assert.IsNull(subscription, "Subscription information was returned");
            }
            catch (RestException ex)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.Unauthorized, ex.Response.Status, "Status code mismatch");
            }
        }

        [TestMethod]
        public void GetPushSubscription_GamertagForDifferentUser_VerifyUnauthorized()
        {
            string testUserKey = "thistestcasekey";
            XboxLiveAccount testUser = Users.CreateUsers(1)[0];
            
            try
            {
                AddPushSubscriptionForUser(testUser, TestUrl, testUserKey);

                PushSubscription subscription = this.PushSubscriptionProxy.GetPushSubscription(Gamertag, testUserKey,
                                                                            testUser.MemberName, testUser.Password);
                Assert.IsNull(subscription, "Subscription information was returned");
            }
            catch (RestException ex)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.Unauthorized, ex.Response.Status, "Status code mismatch");
            }
        }

        [TestMethod]
        public void GetPushSubscription_NullGamertag()
        {
            try
            {
                PushSubscription ps = this.PushSubscriptionProxy.GetPushSubscription(null, UrlKey, Username, Password);
            }
            catch (RestException re)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, re.Response.Status, "Status code mismatch");
            }

        }

        [TestMethod]
        public void GetPushSubscription_NullUrlKey()
        {
            try
            {
                PushSubscription ps = this.PushSubscriptionProxy.GetPushSubscription(Gamertag, null, Username, Password);
            }
            catch (RestException re)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotFound, re.Response.Status, "Status code mismatch");
            }

        }

        [TestMethod]
        public void GetPushSubscription_EmptyGamertag()
        {
            try
            {
                PushSubscription ps = this.PushSubscriptionProxy.GetPushSubscription(String.Empty, UrlKey, Username, Password);
            }
            catch (RestException re)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, re.Response.Status, "Status code mismatch");
            }

        }

        [TestMethod]
        public void GetPushSubscription_EmptyUrlKey()
        {
            try
            {
                PushSubscription ps = this.PushSubscriptionProxy.GetPushSubscription(Gamertag, String.Empty, Username, Password);
            }
            catch (RestException re)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotFound, re.Response.Status, "Status code mismatch");
            }

        }

        //TODO: Examine conditions where subscription will expire, and add test cases around expired subscription information. 

        void AddPushSubscriptionForUser(XboxLiveAccount xblAccount, string url, string key)
        {
            PushSubscription ps = new PushSubscription();
            ps.Url = url;
            ps.SubTypes = "*";

            this.PushSubscriptionProxy.UpdatePushSubscription(ps, xblAccount, key);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Test.API\States\PutGameState.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using LiveN.Test.Framework.Configuration;
using Multiplayer.Test.API;
using AsyncMultiplayer.SessionCommon;
using System.Net;
using System.Diagnostics;
using System.Threading;
using AsyncMultiplayer.NotificationService;
using Gds.Contracts;
using LIVEN.Common.Diagnostics;
using LiveN.Test.Common.Web;
using Multiplayer.Test.UserAccounts;
using LiveN.Test.Common;

namespace MultiPlayer.Test.API
{
    /// <summary>
    /// Test Cases for GameState.svc PutGameState API
    /// </summary>
    [TestClass]
    public class PutGameState : TestAreaBase
    {
        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {

            LockTest();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            UnlockTest();
        }

        /// <summary>
        /// BVT Test to verify PutGameState
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("BVT for Game State PutGameState API.")]
        [TestProperty("Type", "BVTs")]
        public void BVT_PutGameState()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creeation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            //put game state
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };


            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            //GetGameState after PutGameState
            FullGameState modifiedGameState = this.GameStateProxy.GetGameState(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert Modified GameState
            AssertGameState(modifiableGameState, modifiedGameState);

            //ViewSession after PutGameState
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState modifiedSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert Modified SessionState
            Assert.AreEqual<int>(modifiableGameState.ActiveSeatIndex, modifiedSessionState.State.ActiveSeatIndex, "ActiveSeatIndex in Modified SessionState.State is not as Expected");
            Assert.AreEqual<int>(joinSessionState.State.SequenceNumber + 1, modifiedSessionState.State.SequenceNumber, "SequenceNumber in Modified SessionState.State is not as Expected");

            //Verify YourTurn Notification
            string memberName = TestAreaBase.users[1].MemberName;      // player2
            string password = TestAreaBase.users[1].Password;
            VerifyNotification(modifiedSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.YourTurn, true, memberName, password);
        }

        /// <summary>
        /// Feature Test for PutGameState to verify Owner setting Active Seat to Owner's Seat 
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Test to verify Owner setting Active Seat to Owner's Seat.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_PutGameState_Owner_SetActiveSeatIndex_SelfSeatIndex()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creeation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            //put game state by Player1
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            //put game state by Player2
            modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 0;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameStateProxy.Password = TestAreaBase.users[1].Password;
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            //ViewSession after PutGameState
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState modifiedSessionState1 = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //put game state by Player1
            modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 0;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            //GetGameState after PutGameState
            FullGameState modifiedGameState = this.GameStateProxy.GetGameState(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert Modified GameState
            AssertGameState(modifiableGameState, modifiedGameState);

            //ViewSession after PutGameState
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState modifiedSessionState2 = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert Modified SessionState
            Assert.AreEqual<int>(modifiableGameState.ActiveSeatIndex, modifiedSessionState2.State.ActiveSeatIndex, "ActiveSeatIndex in Modified SessionState.State is not as Expected");
            Assert.AreEqual<int>(modifiedSessionState1.State.SequenceNumber + 1, modifiedSessionState2.State.SequenceNumber, "SequenceNumber in Modified SessionState.State is not as Expected");
        }

        //related bug 1863
        /// <summary>
        /// Feature Test for PutGameState to verify setting Active seat to current Active Player's Seat 
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Call PutGameState on GameState service to Modify GameState & verify YourTurn Notification is created and verify information on notification is correct.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_PutGameState_Player_SetActiveSeatIndex_SelfSeatIndex()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this testcase.");
            // create new session
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creeation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            //put game state by Player1
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            //Delete pre-existing notifications 
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            //GetGameState after PutGameState
            FullGameState modifiedGameState = this.GameStateProxy.GetGameState(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert Modified GameState
            AssertGameState(modifiableGameState, modifiedGameState);

            Thread.Sleep(20000);
            this.NotificationsServiceProxy.Locale = "en-US";
            Notification yourTurnNotification = GetNotification(joinSessionState.GameID.ToString(), joinSessionState.SessionID, Notification.NotificationType.YourTurn.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            ValidateNotificationContent(yourTurnNotification, "Your Turn", Users.GetGamertag(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password), null);

            //ViewSession after PutGameState
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState modifiedSessionState1 = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert Modified SessionState
            Assert.AreEqual<int>(modifiableGameState.ActiveSeatIndex, modifiedSessionState1.State.ActiveSeatIndex, "ActiveSeatIndex in Modified SessionState.State is not as Expected");
            Assert.AreEqual<int>(joinSessionState.State.SequenceNumber + 1, modifiedSessionState1.State.SequenceNumber, "SequenceNumber in Modified SessionState.State is not as Expected");

            //PutGameState by Player2 to Player2's SeatIndex
            modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameStateProxy.Password = TestAreaBase.users[1].Password;

            this.GameStateProxy.PutGameState(createSessionState.SessionID, creationData.GameID.ToString(), modifiableGameState);

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;
            modifiedGameState = this.GameStateProxy.GetGameState(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert Modified GameState
            AssertGameState(modifiableGameState, modifiedGameState);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState modifiedSessionState2 = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert Modified SessionState
            Assert.AreEqual<int>(modifiableGameState.ActiveSeatIndex, modifiedSessionState2.State.ActiveSeatIndex, "ActiveSeatIndex in Modified SessionState.State is not as Expected");
            Assert.AreEqual<int>(modifiedSessionState1.State.SequenceNumber + 1, modifiedSessionState2.State.SequenceNumber, "SequenceNumber in Modified SessionState.State is not as Expected");
        }

        /// <summary>
        /// Feature Test for PutGameState to verify setting Active Seat in Reverse order. Set ActiveSeat = CurrentActiveSeat - 1 
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Test to verify setting Active Seat in Reverse order. Set ActiveSeat = CurrentActiveSeat - 1.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_PutGameState_ActiveSeatIndex_SeatBeforeCurrentSeat()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 4, "Should have at least 4 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creeation
            AssertCreateSessionState(creationData, createSessionState);

            SessionState beforeJoinSessionState = createSessionState;
            SessionState joinSessionState = null;

            for (int i = 1; i < 4; i++)
            {
                JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, i);

                this.GameSessionProxy.UserID = TestAreaBase.users[i].MemberName;      // next player
                this.GameSessionProxy.Password = TestAreaBase.users[i].Password;
                joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

                AssertJoinSessionState(beforeJoinSessionState, joinSessionState);
                beforeJoinSessionState = joinSessionState;
            }

            //put game state by Player0
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            //put game state by Player2
            modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 2;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameStateProxy.Password = TestAreaBase.users[1].Password;
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            //ViewSession after PutGameState
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState modifiedSessionState1 = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //put game state by Player3
            modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = TestAreaBase.users[2].MemberName;      // player3
            this.GameStateProxy.Password = TestAreaBase.users[2].Password;
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            //GetGameState after PutGameState
            FullGameState modifiedGameState = this.GameStateProxy.GetGameState(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert Modified GameState
            AssertGameState(modifiableGameState, modifiedGameState);

            //ViewSession after PutGameState
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState modifiedSessionState2 = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert Modified SessionState
            Assert.AreEqual<int>(modifiableGameState.ActiveSeatIndex, modifiedSessionState2.State.ActiveSeatIndex, "ActiveSeatIndex in Modified SessionState.State is not as Expected");
            Assert.AreEqual<int>(modifiedSessionState1.State.SequenceNumber + 1, modifiedSessionState2.State.SequenceNumber, "SequenceNumber in Modified SessionState.State is not as Expected");
        }

        /// <summary>
        /// Feature Test for PutGameState to verify setting empty seat as Active seat  -- Bug 1891
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Test to verify setting empty seat as Active seat.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_PutGameState_EmptySeatAsActiveSeat()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creeation
            AssertCreateSessionState(creationData, createSessionState);

            //set the game state
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;
            this.GameStateProxy.PutGameState(createSessionState.SessionID, creationData.GameID.ToString(), modifiableGameState);

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;
            FullGameState modifiedGameState = this.GameStateProxy.GetGameState(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert Modified GameState
            AssertGameState(modifiableGameState, modifiedGameState);

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState modifiedSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert Modified SessionState
            Assert.AreEqual<int>(modifiableGameState.ActiveSeatIndex, modifiedSessionState.State.ActiveSeatIndex, "ActiveSeatIndex in Modified SessionState.State is not as Expected");
            Assert.AreEqual<int>(createSessionState.State.SequenceNumber + 1, modifiedSessionState.State.SequenceNumber, "SequenceNumber in Modified SessionState.State is not as Expected");
        }

        /// <summary>
        /// Feature Test for PutGameState to verify setting empty seat as Active seat - after Multiple Players Join Session -- Bug 1891
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Test to verify setting empty seat as Active seat.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_PutGameState_EmptySeatAsActiveSeat_MultiplePlayers()
        {

            Assert.IsTrue(TestAreaBase.users.Count >= 4, "Should have at least 4 users under <preExistingUsers> node in App.config for selected environment");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            // create new session
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creeation
            AssertCreateSessionState(creationData, createSessionState);

            SessionState beforeJoinSessionState = createSessionState;

            for (int i = 1; i < 4; i++)
            {
                JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, i);

                this.GameSessionProxy.UserID = TestAreaBase.users[i].MemberName;      // next player
                this.GameSessionProxy.Password = TestAreaBase.users[i].Password;
                SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

                AssertJoinSessionState(beforeJoinSessionState, joinSessionState);
                beforeJoinSessionState = joinSessionState;
            }

            //set the game state
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 8;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;
            this.GameStateProxy.PutGameState(createSessionState.SessionID, creationData.GameID.ToString(), modifiableGameState);

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;
            FullGameState modifiedGameState = this.GameStateProxy.GetGameState(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert Modified GameState
            AssertGameState(modifiableGameState, modifiedGameState);

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState modifiedSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert Modified SessionState
            Assert.AreEqual<int>(modifiableGameState.ActiveSeatIndex, modifiedSessionState.State.ActiveSeatIndex, "ActiveSeatIndex in Modified SessionState.State is not as Expected");
            Assert.AreEqual<int>(createSessionState.State.SequenceNumber + 1, modifiedSessionState.State.SequenceNumber, "SequenceNumber in Modified SessionState.State is not as Expected");
        }

        /// <summary>
        /// Feature Test for PutGameState to verify setting empty seat as Active seat - Seat emptied by a player with LeaveSession - Bug 1891
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Test to verify setting empty seat as Active seat after player LeaveSession.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_PutGameState_EmptySeatAsActiveSeat_LeaveSession()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 4, "Should have at least 4 users under <preExistingUsers> node in App.config for selected environment");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            // create new session
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creeation
            AssertCreateSessionState(creationData, createSessionState);

            SessionState beforeJoinSessionState = createSessionState;
            SessionState joinSessionState = null;

            for (int i = 1; i < 4; i++)
            {
                JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, i);

                this.GameSessionProxy.UserID = TestAreaBase.users[i].MemberName;      // next player
                this.GameSessionProxy.Password = TestAreaBase.users[i].Password;
                joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

                AssertJoinSessionState(beforeJoinSessionState, joinSessionState);
                beforeJoinSessionState = joinSessionState;
            }

            //player 3 LeaveSession
            this.GameSessionProxy.UserID = TestAreaBase.users[2].MemberName;      // player3
            this.GameSessionProxy.Password = TestAreaBase.users[2].Password;
            this.GameSessionProxy.LeaveSession(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());

            //View Session after Leave
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState leaveSessionState = this.GameSessionProxy.ViewSession(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());

            //Assert SessionState
            AssertLeaveSessionState(joinSessionState, leaveSessionState);

            //set the game state
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 2;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;
            this.GameStateProxy.PutGameState(leaveSessionState.SessionID, leaveSessionState.GameID.ToString(), modifiableGameState);

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;
            FullGameState modifiedGameState = this.GameStateProxy.GetGameState(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert Modified GameState
            AssertGameState(modifiableGameState, modifiedGameState);

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState modifiedSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert Modified SessionState
            Assert.AreEqual<int>(modifiableGameState.ActiveSeatIndex, modifiedSessionState.State.ActiveSeatIndex, "ActiveSeatIndex in Modified SessionState.State is not as Expected");
            Assert.AreEqual<int>(createSessionState.State.SequenceNumber + 1, modifiedSessionState.State.SequenceNumber, "SequenceNumber in Modified SessionState.State is not as Expected");
        }

        /// <summary>
        /// Feature Test to verify Session's Owner can PutGameState while it's not Owner's Turn
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Game State PutGameState API for Session Owner to PutGameState while Not Owner's Turn.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PutGameState_Owner_WhileNotOwnerTurn()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 3, "Should have at least 3 users under <preExistingUsers> node in App.config for selected environment");

            SessionState joinSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creeation
            AssertCreateSessionState(creationData, createSessionState);

            SessionState beforeJoinSessionState = createSessionState;

            for (int i = 1; i < 3; i++)
            {
                JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, i);

                this.GameSessionProxy.UserID = TestAreaBase.users[i].MemberName;      // next player
                this.GameSessionProxy.Password = TestAreaBase.users[i].Password;
                joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

                AssertJoinSessionState(beforeJoinSessionState, joinSessionState);
                beforeJoinSessionState = joinSessionState;
            }

            //put game state - Player1
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            //GetGameState after PutGameState
            FullGameState modifiedGameState = this.GameStateProxy.GetGameState(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());

            //Assert Modified GameState
            AssertGameState(modifiableGameState, modifiedGameState);

            //put game state - Player2
            modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 2;
            modifiableGameState.GameData = new byte[] { 60, 61, 62, 63, 64 };

            this.GameStateProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameStateProxy.Password = TestAreaBase.users[1].Password;
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            //GetGameState after PutGameState
            modifiedGameState = this.GameStateProxy.GetGameState(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());

            //Assert Modified GameState
            AssertGameState(modifiableGameState, modifiedGameState);

            //Owner (Player1) try PutGameState while it's NOT Owner's Turn (It's Player3 Turn now)
            modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 66, 67, 68, 69, 70 };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // Owner (Player1)
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;
            try
            {
                this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);
                Assert.Fail("Allowed to make a move by a Session's Owner while it's not Owner's turn");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.UserNotAllowedToModifyGameStateForTheSession), restEx.Response);

            }
        }

        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Call PUT on GameState.svc to make a move while not your turn and verify failure")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PutGameState_Player_WhileNotPlayerTurn()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 3, "Should have at least 3 users under <preExistingUsers> node in App.config for selected environment");

            SessionState joinSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creeation
            AssertCreateSessionState(creationData, createSessionState);

            SessionState beforeJoinSessionState = createSessionState;

            for (int i = 1; i < 3; i++)
            {
                JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, i);

                this.GameSessionProxy.UserID = TestAreaBase.users[i].MemberName;      // next player
                this.GameSessionProxy.Password = TestAreaBase.users[i].Password;
                joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

                AssertJoinSessionState(beforeJoinSessionState, joinSessionState);
                beforeJoinSessionState = joinSessionState;
            }

            //set the game state by Player1
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            //GetGameState after PutGameState
            FullGameState modifiedGameState = this.GameStateProxy.GetGameState(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());

            //Assert Modified GameState
            AssertGameState(modifiableGameState, modifiedGameState);

            //set the GameState by Player3 while it's Player2's Turn
            modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 0;
            modifiableGameState.GameData = new byte[] { 61, 62, 63, 64, 65 };

            this.GameStateProxy.UserID = TestAreaBase.users[2].MemberName;      // player3
            this.GameStateProxy.Password = TestAreaBase.users[2].Password;
            try
            {
                this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);
                Assert.Fail("Allowed to make a move by a player while it's not that player's turn");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.UserNotAllowedToModifyGameStateForTheSession), restEx.Response);
            }
        }

        /// <summary>
        /// Feature Test for PutGameState to verify setting Active Seat as > Total Seats Available 
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Test to verify setting Active Seat as > Total Seats Available.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PutGameState_ActiveSeatIndex_GreaterThanTotalSeats()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creeation
            AssertCreateSessionState(creationData, createSessionState);

            //put game state by Player0
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 20;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiableGameState);
                Assert.Fail("Player is able to set ActiveSeatIndex to > SeatsAvailable (Max Seat Index)");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidActiveSeatIndex), restEx.Response);
            }
        }

        /// <summary>
        /// Feature Test for PutGameState to verify a player NOT in Session try to PutGameState 
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Test to verify a player NOT in Session try to PutGameState.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PutGameState_NotInSession()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creeation
            AssertCreateSessionState(creationData, createSessionState);

            //try PutGameState by Player Not in Session
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 2;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameStateProxy.Password = TestAreaBase.users[1].Password;

            try
            {
                this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiableGameState);
                Assert.Fail("Player is able to PutGameState while NOT in Session)");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.UserNotAllowedToSetStateInThisSession), restEx.Response);
            }
        }

        /// <summary>
        /// Feature Test for PutGameState to verify player try PutGameState after LeaveSession when player's seat is ActiveSeat when LeaveSession 
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Test to verify player try PutGameState after LeaveSession when player's seat is ActiveSeat when LeaveSession.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PutGameState_AfterLeaveSession_ActiveSeatOnLeave()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 3, "Should have at least 3 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creeation
            AssertCreateSessionState(creationData, createSessionState);

            SessionState beforeJoinSessionState = createSessionState;
            SessionState joinSessionState = null;

            for (int i = 1; i < 3; i++)
            {
                JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, i);

                this.GameSessionProxy.UserID = TestAreaBase.users[i].MemberName;      // next player
                this.GameSessionProxy.Password = TestAreaBase.users[i].Password;
                joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

                AssertJoinSessionState(beforeJoinSessionState, joinSessionState);
                beforeJoinSessionState = joinSessionState;
            }

            //PutGameState by Player1
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiableGameState);

            //Player2 LeaveSession
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            this.GameSessionProxy.LeaveSession(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());

            //Player2 try PutGameState
            modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 2;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameStateProxy.Password = TestAreaBase.users[1].Password;

            try
            {
                this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiableGameState);
                Assert.Fail("Player is allowed to PutGameState after LeaveSession");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.UserNotAllowedToSetStateInThisSession), restEx.Response);
            }
        }

        /// <summary>
        /// Feature Test for PutGameState to verify player try PutGameState after LeaveSession when player's seat is NOT ActiveSeat when LeaveSession 
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Test to verify player try PutGameState after LeaveSession when player's seat is NOT ActiveSeat when LeaveSession .")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PutGameState_AfterLeaveSession_NotActiveSeatOnLeave()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 3, "Should have at least 3 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creeation
            AssertCreateSessionState(creationData, createSessionState);

            SessionState beforeJoinSessionState = createSessionState;
            SessionState joinSessionState = null;

            for (int i = 1; i < 3; i++)
            {
                JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, i);

                this.GameSessionProxy.UserID = TestAreaBase.users[i].MemberName;      // next player
                this.GameSessionProxy.Password = TestAreaBase.users[i].Password;
                joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

                AssertJoinSessionState(beforeJoinSessionState, joinSessionState);
                beforeJoinSessionState = joinSessionState;
            }

            //PutGameState by Player1
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiableGameState);

            //Player3 LeaveSession
            this.GameSessionProxy.UserID = TestAreaBase.users[2].MemberName;      // player3
            this.GameSessionProxy.Password = TestAreaBase.users[2].Password;

            this.GameSessionProxy.LeaveSession(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());

            //Player3 try PutGameState
            modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 0;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = TestAreaBase.users[2].MemberName;      // player3
            this.GameStateProxy.Password = TestAreaBase.users[2].Password;

            try
            {
                this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiableGameState);
                Assert.Fail("Player is allowed to PutGameState after LeaveSession");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.UserNotAllowedToSetStateInThisSession), restEx.Response);
            }
        }

        /// <summary>
        /// Feature Test for PutGameState to verify setting Game state size greater than the maximum 1MB
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Test to verify setting Game state size greater than the maximum 1MB.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PutGameState_GameStateSizeGreaterThan1MB()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creeation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2;
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            //put game state by Player1
            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[(1024 * 1024) + 1024];

            for (int Cntr = 0; Cntr < modifiableGameState.GameData.Length; Cntr++)
                modifiableGameState.GameData[Cntr] = Convert.ToByte(GlobalRandom.Next() % 256);

            try
            {
                this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiableGameState);
                Assert.Fail("Player is able to set Game state size greater than the maximum (1MB)");
            }
            catch (RestException restEx)
            {
                //this will be fixed once bug 6924 is fixed 
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameDataIsNullOrTooLong), restEx.Response);
            }
        }

        /// <summary>
        /// Feature Test for PutGameState to verify setting Game state size greater than the maximum 2MB
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Test to verify setting Game state size greater than the maximum 2MB.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PutGameState_GameStateSizeGreaterThan2MB()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creeation
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2;
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            //put game state by Player1
            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[(2 * 1024 * 1024) + 1024];

            for (int Cntr = 0; Cntr < modifiableGameState.GameData.Length; Cntr++)
                modifiableGameState.GameData[Cntr] = Convert.ToByte(GlobalRandom.Next() % 256);

            try
            {
                this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiableGameState);
                Assert.Fail("Player is able to set Game state size greater than the maximum (2MB)");
            }
            catch (RestException restEx)
            {
                //this will be fixed once bug is fixed 6924
                //VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameDataIsNullOrTooLong), restEx.Response);
                VerifyException(HttpStatusCode.BadRequest, restEx.Response);
            }
        }

        /// <summary>
        /// Feature Test for PutGameState to verify setting Game Data to null
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Test to verify setting Game Data to null.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PutGameState_NullGameData()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creeation
            AssertCreateSessionState(creationData, createSessionState);

            //put game state by Player0
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;

            // modifiableGameState.GameData not initiaized

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiableGameState);
                Assert.Fail("Player is able to set Game Data to null");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameDataIsNullOrTooLong), restEx.Response);
            }
        }

        /// <summary>
        /// Feature Test for PutGameState to verify setting Game state size equals the maximum 1MB
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Test to verify setting Game state size equals the maximum 1MB.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_PutGameState_GameStateSizeEquals1MB()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creeation
            AssertCreateSessionState(creationData, createSessionState);

            // JOin session by player 2
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);


            //modify state by Player1
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[1024 * 1024 - 1];

            for (int Cntr = 0; Cntr < modifiableGameState.GameData.Length; Cntr++)
                modifiableGameState.GameData[Cntr] = Convert.ToByte(GlobalRandom.Next() % 256);

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            //put game state by Player1
            this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiableGameState);

            //GetGameState after PutGameState
            FullGameState modifiedGameState = this.GameStateProxy.GetGameState(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert Modified GameState
            AssertGameState(modifiableGameState, modifiedGameState);
        }

        /// <summary>
        /// Feature Test for PutGameStateto verify setting ownership to next player after Owner leave session
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Test to verify setting ownership to next player after Owner leave session.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_PutGameState_OwnerSeatIndex_OwnerLeaveSession()
        {

            Assert.IsTrue(TestAreaBase.users.Count >= 3, "Should have at least 3 users under <preExistingUsers> node in App.config for selected environment");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            // create new session
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creeation
            AssertCreateSessionState(creationData, createSessionState);

            SessionState beforeJoinSessionState = createSessionState;

            for (int i = 1; i < 4; i++)
            {
                JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, i);

                // next player joining ....                
                SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData, TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password);

                AssertJoinSessionState(beforeJoinSessionState, joinSessionState);
                beforeJoinSessionState = joinSessionState;
            }

            //next player view session
            SessionState beforeOwnerLeaveSession = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(),
                                                                                     createSessionState.GameID.ToString(),
                                                                                     TestAreaBase.users[2].MemberName,
                                                                                     TestAreaBase.users[2].Password);

            TraceEx.TraceStart("Owner Seat Index who will leave session,========" + beforeOwnerLeaveSession.OwnerSeatIndex.ToString());

            this.GameSessionProxy.LeaveSession(createSessionState.SessionID, createSessionState.GameID.ToString(),
                                               TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            SessionState newOwnerSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(),
                                                                                  createSessionState.GameID.ToString(),
                                                                                  TestAreaBase.users[1].MemberName,
                                                                                  TestAreaBase.users[1].Password);

            TraceEx.TraceStart("New Owner Seat Index is =====================" + newOwnerSessionState.OwnerSeatIndex.ToString());

            Assert.AreEqual<string>((beforeOwnerLeaveSession.OwnerSeatIndex + 1).ToString(), newOwnerSessionState.OwnerSeatIndex.ToString(),
                                     "Err:Session ownership is not passed to the next player after previous owner left");


            //set the game state
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 0;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            try
            {
                this.GameStateProxy.PutGameState(createSessionState.SessionID, creationData.GameID.ToString(), modifiableGameState, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message + "---- Error: Unable to make a move after first owner left session");
            }


            FullGameState fullGame = this.GameStateProxy.GetGameState(createSessionState.SessionID.ToString(),
                                                                                    createSessionState.GameID.ToString(),
                                                                                    TestAreaBase.users[2].MemberName,
                                                                                    TestAreaBase.users[2].Password);


            AssertGameState(modifiableGameState, fullGame);
        }

        /// <summary>
        /// Feature Test for PutGameState to verify  retrying of putgamestate when it fail due azure inconsistency
        /// also verifying sending YOur Turn Notification to the right player when 
        /// putGameState fails for the wrong player
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Test to verify sending YOur Turn Notification to the right player and retrying of Putgamestate.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_PutGameState_RetryingIfPutGameStateFail()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 3, "Should have at least 3 users under <preExistingUsers> node in App.config for selected environment");

            SessionState joinSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, new byte[] { 1, 2, 3 }, iwb, true, "TestGame");

            //player1
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                                  TestAreaBase.users[0].MemberName,
                                                                                  TestAreaBase.users[0].Password);

            //verify session creeation
            AssertCreateSessionState(creationData, createSessionState);

            SessionState beforeJoinSessionState = createSessionState;

            for (int i = 1; i < 3; i++)
            {
                JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, i);

                // next player           
                joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                     TestAreaBase.users[i].MemberName,
                                                                     TestAreaBase.users[i].Password);

                AssertJoinSessionState(beforeJoinSessionState, joinSessionState);
                beforeJoinSessionState = joinSessionState;
            }

            //put game state - Player1
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            //player 1 make a move
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState,
                                             TestAreaBase.users[0].MemberName,
                                             TestAreaBase.users[0].Password);

            //GetGameState after PutGameState
            FullGameState modifiedGameState = this.GameStateProxy.GetGameState(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());

            //Assert Modified GameState
            AssertGameState(modifiableGameState, modifiedGameState);

            //put game state - Player2
            modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 2;
            modifiableGameState.GameData = new byte[] { 60, 61, 62, 63, 64 };

            //player 2 make a move
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState,
                                             TestAreaBase.users[1].MemberName,
                                             TestAreaBase.users[1].Password);
            //GetGameState after PutGameState
            modifiedGameState = this.GameStateProxy.GetGameState(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString(),
                                                                 TestAreaBase.users[1].MemberName,
                                                                 TestAreaBase.users[1].Password);

            //Assert Modified GameState
            AssertGameState(modifiableGameState, modifiedGameState);


            //Owner (Player1) try PutGameState while it's NOT Owner's Turn (It's Player3 Turn now)
            modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 66, 67, 68, 69, 70 };

            try
            {
                //player 1-Owner- make a move
                this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState,
                                                 TestAreaBase.users[0].MemberName,
                                                 TestAreaBase.users[0].Password);

                Assert.Fail("Allowed to make a move by a Session's Owner while it's not Owner's turn");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.UserNotAllowedToModifyGameStateForTheSession), restEx.Response);

            }

            modifiedGameState = this.GameStateProxy.GetGameState(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString(),
                                                                 TestAreaBase.users[0].MemberName,
                                                                 TestAreaBase.users[0].Password);

            TraceEx.TraceStart("ActiveSeatA is =======" + modifiedGameState.GameStateInfo.ActiveSeatIndex.ToString());

            Assert.IsTrue(modifiedGameState.GameStateInfo.ActiveSeatIndex == 2, "Active Seat not updated to point to Player whose Turn is next");

            //waiting yourTurn in notification queue to show-up in azure
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);
            TestAreaBase.notificationCommon.VerifyNotificationCreated(joinSessionState.GameID.ToString(), joinSessionState.SessionID.ToString(), Notification.NotificationType.YourTurn,
                                             TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password);

            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState,
                                                            TestAreaBase.users[2].MemberName,
                                                            TestAreaBase.users[2].Password);
        }

        /// <summary>
        /// Feature Test to verify PutGameState
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Feature test for Game State PutGameState API.")]
        [TestProperty("Type", "FeatureTest")]
        public void N_PutGameState_ActiveSeatIndexNegative()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");


            // Initialize CreationData

            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                                  TestAreaBase.users[0].MemberName,
                                                                                  TestAreaBase.users[0].Password);
            //verify session creeation
            AssertCreateSessionState(creationData, createSessionState);

            //put game state
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = -1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            try
            {
                //Player 1 try to put game state
                this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiableGameState,
                                               TestAreaBase.users[0].MemberName,
                                               TestAreaBase.users[0].Password);

                Assert.Fail("Error: Put game state shouldn't be allowed with negative next active seat index");
            }
            catch (RestException rx)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidActiveSeatIndex), rx.Response);
            }
        }

        /// <summary>
        /// Feature test for PutGameState API to verify player  trying to make a move after re-joining on second seat, which is null as this player is actually on the his first/previous seat.
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Feature test for PutGameState API to verify player  trying to make a move after re-joining on second seat, which is null as this player is actually on the first/previous seat.")]
        [TestProperty("Type", "FeatureTest")]
        public void N_PutGameState_NullActiveSeat()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "Should have at least 2  users under <preExistingUsers> node in App.config for selected environment");


            // Initialize CreationData        
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                                  TestAreaBase.users[0].MemberName,
                                                                                  TestAreaBase.users[0].Password);
            //verify session creeation
            AssertCreateSessionState(creationData, createSessionState);

            //second player join session
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                             TestAreaBase.users[1].MemberName,
                                                                             TestAreaBase.users[1].Password);

            //second player join session again on another seat
            JoinData joinData2 = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 8);
            SessionState joinSessionState2 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData2,
                                                                             TestAreaBase.users[1].MemberName,
                                                                             TestAreaBase.users[1].Password);

            //put game state by first player
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 8;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState,
                                             TestAreaBase.users[0].MemberName,
                                             TestAreaBase.users[0].Password);

            //put game state by second player
            modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };
            try
            {
                this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState,
                                                 TestAreaBase.users[1].MemberName,
                                                 TestAreaBase.users[1].Password);
            }
            catch (RestException rx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.OnlySessionOwnerCanModifyGameState), rx.Response);
            }

        }

        /// <summary>
        /// Feature Test to verify PutGameState post your turn notification containing variant name
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("Feature test for Game State PutGameState API- to verify PutGameState post your turn notification containing variant name.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_PutGameState_VaraintOnYourTurnNotification()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            //set variant
            uint VariantOnNotification = 2;

            // Initialize CreationData  and first player create session
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, (int)VariantOnNotification, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                                  TestAreaBase.users[0].MemberName,
                                                                                  TestAreaBase.users[0].Password);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            // 2nd player joining session
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                              TestAreaBase.users[1].MemberName,
                                                                              TestAreaBase.users[1].Password);

            AssertJoinSessionState(createSessionState, joinSessionState);
            //Delete existing notifications
            TestAreaBase.notificationCommon.CheckNotificationCount(joinSessionState.GameID.ToString(), joinSessionState.SessionID,
                                           TestAreaBase.users[0].MemberName,
                                           TestAreaBase.users[0].Password);
            //Delete existing notifications
            TestAreaBase.notificationCommon.CheckNotificationCount(joinSessionState.GameID.ToString(), joinSessionState.SessionID,
                                           TestAreaBase.users[1].MemberName,
                                           TestAreaBase.users[1].Password);

            //put game state by 1st player assigning player 2 to seat index 1
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState,
                                              TestAreaBase.users[0].MemberName,
                                              TestAreaBase.users[0].MemberName);

            //Verify YourTurn Notification for second player         
            VerifyNotification(joinSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.YourTurn, true,
                               TestAreaBase.users[1].MemberName,
                               TestAreaBase.users[1].Password);

            //verify Variant on yourTurn notification 
            Notification yourTurnNotification = GetNotification(joinSessionState.GameID.ToString(), joinSessionState.SessionID, Notification.NotificationType.YourTurn.ToString(),
                                                                TestAreaBase.users[1].MemberName,
                                                                TestAreaBase.users[1].Password);

            Assert.AreEqual<uint>(VariantOnNotification, yourTurnNotification.Variant, "Error: Variant on notification is not as expected");
        }

        /// <summary>
        /// Feature Test to verify PutGameState not allowed for complete game
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature test for Game State PutGameState API- to verify PutGameState not allowed for comlete game.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_PutGameState_NotAllowedForCompleteSession()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            //set variant
            uint VariantOnNotification = 2;

            // Initialize CreationData  and first player create session
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, (int)VariantOnNotification, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                                  TestAreaBase.users[0].MemberName,
                                                                                  TestAreaBase.users[0].Password);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            // 2nd player joining session
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                              TestAreaBase.users[1].MemberName,
                                                                              TestAreaBase.users[1].Password);

            AssertJoinSessionState(createSessionState, joinSessionState);

            //put game state by 1st player assigning player 2 to active seat index 1
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState,
                                                  TestAreaBase.users[0].MemberName,
                                                  TestAreaBase.users[0].MemberName);

            //get game result and post game end by owner          
            GameResults gameResults = new GameResults();
            gameResults.GameOverSeatIndexes = new int[] { 0 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.None.ToString(),
                Score = 15,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = VariantOnNotification
            };


            this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, joinSessionState.GameID.ToString(), gameResults,
                                             TestAreaBase.users[0].MemberName,
                                             TestAreaBase.users[0].Password);




            //try to put game state after game get  completed 
            //put game state by 2nd player ,also assigning player 1 to active seat index
            ModifiableGameState modifiableGameState2 = new ModifiableGameState();
            modifiableGameState2.ActiveSeatIndex = 0;
            modifiableGameState2.GameData = new byte[] { 55, 56, 57, 58, 59 };

            try
            {
                this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState2,
                                                   TestAreaBase.users[1].MemberName,
                                                   TestAreaBase.users[1].Password);
            }
            catch (RestException rx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.OperationNotAllowedForCompleteSession), rx.Response);
            }

        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\NGGamePlayer.Test\AutoMSTSC\DataProtectionForRDPWrapper.cs ===
﻿using System;
using System.Text;

namespace AutoMSTSC
{
    class DataProtectionForRDPWrapper
    {
        static DataProtector dp = new DataProtector(DataProtector.Store.USE_MACHINE_STORE);

        public static string Encrypt(string text_password)
        {
            byte[] e = dp.Encrypt(GetBytes(text_password), null, "psw");
            return GetHex(e);
        }

        public static string Decrypt(string enc_password)
        {
            byte[] b = ToByteArray(enc_password);
            byte[] d = dp.Decrypt(b, null, "psw");
            return GetString(d);
        }

        static byte[] GetBytes(string text)
        {
            return UnicodeEncoding.Unicode.GetBytes(text);
        }

        static string GetString(byte[] byt)
        {
            System.Text.Encoding enc = System.Text.Encoding.Unicode;
            return enc.GetString(byt);
        }

        static string GetHex(byte[] byt_text)
        {
            string ret = string.Empty;

            for (int i = 0; i < byt_text.Length; i++)
            {
                ret += Convert.ToString(byt_text[i], 16).PadLeft(2, '0').ToUpper();
            }

            return ret;
        }

        static byte[] ToByteArray(String HexString)
        {
            try
            {
                int NumberChars = HexString.Length;
                byte[] bytes = new byte[NumberChars / 2];
                for (int i = 0; i < NumberChars; i += 2)
                {
                    bytes[i / 2] = Convert.ToByte(HexString.Substring(i, 2), 16);
                }
                return bytes;
            }
            catch (Exception ex)
            {
                throw new Exception("Problem converting Hex to Bytes", ex);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\NGGamePlayer.Test\AutoMSTSC\MessageForm.cs ===
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.IO.Pipes;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Diagnostics;
using Microsoft.Win32;

namespace AutoMSTSC
{
    public partial class MessageForm : Form
    {
        private string server;
        private Process rdcProcess;
        private NamedPipeServerStream pipeServer;

        public MessageForm()
        {
            InitializeComponent();
        }

        public MessageForm(string server, string username, string password)
        {
            InitializeComponent();

            KillOtherInstanceAndListenForKillRequests(server);

            string filename = ConnectWithMstsc(server, username, password);

            string message =
                "Please do not close or minimize the terminal services connection.\r\n" +
                "It is used by UI automation for GamePlayer BVTs.\r\n" +
                "Contact a-filips, csteph, or jorgel for details.\r\n" +
                "-----------------------------------------------------------------\r\n\r\n\r\n\r\n" +
                "Command line used by AutoMSTSC:\r\n" +
                rdcProcess.StartInfo.FileName + " " + rdcProcess.StartInfo.Arguments + "\r\n\r\n" +
                "Contents of " + filename + " :\r\n" +
                File.ReadAllText(filename);

            Size screenSize = Screen.PrimaryScreen.Bounds.Size;
            this.Size = new Size(400, 100);
            this.Location = new Point(screenSize.Width - 400, screenSize.Height - 200);
            this.server = server;
            this.Text = "AutoMSTSC - Monitoring " + server;
            textBox1.Text = message;
            textBox1.SelectionLength = 0;
        }

        private void KillOtherInstanceAndListenForKillRequests(string server)
        {
            string pipeName = "AutoMSTSC_" + server;

            //ping existing instance to kill it
            using (NamedPipeClientStream pipeClient = new NamedPipeClientStream(pipeName))
            {
                try
                {
                    pipeClient.Connect(2000);
                    //pipeClient.Write(new byte[] { 1 }, 0, 1);
                }
                catch (TimeoutException)
                {
                }
            }

            //listen for requests to close
            //PipeSecurity sec = new PipeSecurity();
            //sec.
            pipeServer = new NamedPipeServerStream(pipeName, PipeDirection.InOut, 2, PipeTransmissionMode.Message, PipeOptions.Asynchronous);//, 1, 0, new PipeSecurity() { });
            AsyncCallback myCallback = new AsyncCallback(AsyncPipeCallback);
            pipeServer.BeginWaitForConnection(myCallback, null);
        }

        private string ConnectWithMstsc(string server, string username, string password)
        {
            //this disables a prompt popup "the publisher of this remote connection cannot be identified" - dumb
            //otherwise a certificate has to be created for that machine and used to sign the rdp file
            RegistryKey tsc = Registry.CurrentUser.CreateSubKey(@"Software\Microsoft\Terminal Server Client\LocalDevices");
            tsc.SetValue(server, 76, RegistryValueKind.DWord);

            //Create RDP file with encrypted password that will allow to connect to the server automatically
            string passwordEncrypted = DataProtectionForRDPWrapper.Encrypt(password);

            string filename = Path.GetTempFileName(); //@"c:\temp.rdp";
            using (FileStream fs = File.Create(filename))
            using (StreamWriter sw = new StreamWriter(fs))
            {
                sw.Write(staticRDP);
                sw.WriteLine("full address:s:" + server);
                sw.WriteLine("username:s:" + username);
                sw.WriteLine("password 51:b:" + passwordEncrypted);
            }

            //Connect to server
            rdcProcess = new Process();
            string strExE = Environment.ExpandEnvironmentVariables(@"%SystemRoot%\system32\mstsc.exe");
            rdcProcess.StartInfo.FileName = strExE;
            rdcProcess.StartInfo.Arguments = filename;
            rdcProcess.Start();
            rdcProcess.EnableRaisingEvents = true;
            rdcProcess.Exited += new EventHandler(rdcProcess_Exited);
            return filename;
        }

        void rdcProcess_Exited(object sender, EventArgs e)
        {
            this.BeginInvoke(new MethodInvoker(delegate() { Close(); }));
        }

        private void AsyncPipeCallback(IAsyncResult Result)
        {
            if (rdcProcess != null)
            {
                rdcProcess.Kill();
            }
            this.BeginInvoke(new MethodInvoker(delegate() { Close(); }));
        }

        void fsw_Deleted(object sender, FileSystemEventArgs e)
        {
            if (rdcProcess != null)
            {
                rdcProcess.Kill();
            }
            this.BeginInvoke(new MethodInvoker(delegate() { Close(); }));
        }

        private const string staticRDP =
@"screen mode id:i:1
desktopwidth:i:1280
desktopheight:i:1024
session bpp:i:16
winposstr:s:0,3,0,0,800,600
compression:i:1
keyboardhook:i:2
displayconnectionbar:i:1
disable wallpaper:i:1
disable full window drag:i:1
allow desktop composition:i:0
allow font smoothing:i:0
disable menu anims:i:1
disable themes:i:0
disable cursor setting:i:0
bitmapcachepersistenable:i:1
audiomode:i:0
redirectprinters:i:1
redirectcomports:i:0
redirectsmartcards:i:1
redirectclipboard:i:1
redirectposdevices:i:0
autoreconnection enabled:i:1
authentication level:i:2
prompt for credentials:i:0
MaxReconnectAttempts:i:5
negotiate security layer:i:1
remoteapplicationmode:i:0
alternate shell:s:
shell working directory:s:
gatewayhostname:s:
gatewayusagemethod:i:4
gatewaycredentialssource:i:4
gatewayprofileusagemethod:i:0
promptcredentialonce:i:1
";
        //        console:i:1

        private void MessageForm_Load(object sender, EventArgs e)
        {
            textBox1.SelectionStart = 0;
            textBox1.SelectionLength = 0;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\NGGamePlayer.Test\AutoMSTSC\DataProtector.cs ===
﻿using System;
using System.Text;
using System.Runtime.InteropServices;

namespace AutoMSTSC
{
    class DataProtector
    {
        [DllImport("Crypt32.dll", SetLastError = true,
            CharSet = System.Runtime.InteropServices.CharSet.Auto)]
        private static extern bool CryptProtectData(
                                          ref DATA_BLOB pDataIn,
                                          String szDataDescr,
                                          ref DATA_BLOB pOptionalEntropy,
                                          IntPtr pvReserved,
                                          ref CRYPTPROTECT_PROMPTSTRUCT
                                            pPromptStruct,
                                          int dwFlags,
                                          ref DATA_BLOB pDataOut);
        [DllImport("Crypt32.dll", SetLastError = true,
                    CharSet = System.Runtime.InteropServices.CharSet.Auto)]
        private static extern bool CryptUnprotectData(
                                          ref DATA_BLOB pDataIn,
                                          String szDataDescr,
                                          ref DATA_BLOB pOptionalEntropy,
                                          IntPtr pvReserved,
                                          ref CRYPTPROTECT_PROMPTSTRUCT
                                            pPromptStruct,
                                          int dwFlags,
                                          ref DATA_BLOB pDataOut);
        [DllImport("kernel32.dll",
                    CharSet = System.Runtime.InteropServices.CharSet.Auto)]
        private unsafe static extern int FormatMessage(int dwFlags,
                                                       ref IntPtr lpSource,
                                                       int dwMessageId,
                                                       int dwLanguageId,
                                                       ref String lpBuffer,
                                                         int nSize,
                                                       IntPtr* Arguments);

        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
        internal struct DATA_BLOB
        {
            public int cbData;
            public IntPtr pbData;
        }

        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
        internal struct CRYPTPROTECT_PROMPTSTRUCT
        {
            public int cbSize;
            public int dwPromptFlags;
            public IntPtr hwndApp;
            public String szPrompt;
        }
        static private IntPtr NullPtr = ((IntPtr)((int)(0)));
        private const int CRYPTPROTECT_UI_FORBIDDEN = 0x1;
        private const int CRYPTPROTECT_LOCAL_MACHINE = 0x4;

        public enum Store { USE_MACHINE_STORE = 1, USE_USER_STORE };

        private Store store;

        public DataProtector(Store tempStore)
        {
            store = tempStore;
        }

        public byte[] Encrypt(byte[] plainText, byte[] optionalEntropy, string DataDescription)
        {
            bool retVal = false;
            DATA_BLOB plainTextBlob = new DATA_BLOB();
            DATA_BLOB cipherTextBlob = new DATA_BLOB();
            DATA_BLOB entropyBlob = new DATA_BLOB();
            CRYPTPROTECT_PROMPTSTRUCT prompt = new CRYPTPROTECT_PROMPTSTRUCT();
            InitPromptstruct(ref prompt);
            int dwFlags;
            try
            {
                try
                {
                    int bytesSize = plainText.Length;
                    plainTextBlob.pbData = Marshal.AllocHGlobal(bytesSize);
                    if (IntPtr.Zero == plainTextBlob.pbData)
                    {
                        throw new Exception("Unable to allocate plaintext buffer.");
                    }
                    plainTextBlob.cbData = bytesSize;
                    Marshal.Copy(plainText, 0, plainTextBlob.pbData, bytesSize);
                }
                catch (Exception ex)
                {
                    throw new Exception("Exception marshalling data. " + ex.Message);
                }
                if (Store.USE_MACHINE_STORE == store)
                {//Using the machine store, should be providing entropy.
                    dwFlags = CRYPTPROTECT_LOCAL_MACHINE | CRYPTPROTECT_UI_FORBIDDEN;
                    //Check to see if the entropy is null
                    if (null == optionalEntropy)
                    {//Allocate something
                        optionalEntropy = new byte[0];
                    }
                    try
                    {
                        int bytesSize = optionalEntropy.Length;
                        entropyBlob.pbData = Marshal.AllocHGlobal(optionalEntropy.Length); ;
                        if (IntPtr.Zero == entropyBlob.pbData)
                        {
                            throw new Exception("Unable to allocate entropy data buffer.");
                        }
                        Marshal.Copy(optionalEntropy, 0, entropyBlob.pbData, bytesSize);
                        entropyBlob.cbData = bytesSize;
                    }
                    catch (Exception ex)
                    {
                        throw new Exception("Exception entropy marshalling data. " +
                        ex.Message);
                    }
                }
                else
                {//Using the user store
                    dwFlags = CRYPTPROTECT_UI_FORBIDDEN;
                }
                retVal = CryptProtectData(ref plainTextBlob, DataDescription, ref entropyBlob,
                IntPtr.Zero, ref prompt, dwFlags,
                ref cipherTextBlob);
                if (false == retVal)
                {
                    throw new Exception("Encryption failed. " +
                    GetErrorMessage(Marshal.GetLastWin32Error()));
                }
                //Free the blob and entropy.
                if (IntPtr.Zero != plainTextBlob.pbData)
                {
                    Marshal.FreeHGlobal(plainTextBlob.pbData);
                }
                if (IntPtr.Zero != entropyBlob.pbData)
                {
                    Marshal.FreeHGlobal(entropyBlob.pbData);
                }
            }
            catch (Exception ex)
            {
                throw new Exception("Exception encrypting. " + ex.Message);
            }
            byte[] cipherText = new byte[cipherTextBlob.cbData];
            Marshal.Copy(cipherTextBlob.pbData, cipherText, 0, cipherTextBlob.cbData);
            Marshal.FreeHGlobal(cipherTextBlob.pbData);
            return cipherText;
        }

        public byte[] Decrypt(byte[] cipherText, byte[] optionalEntropy, string DataDescription)
        {
            bool retVal = false;
            DATA_BLOB plainTextBlob = new DATA_BLOB();
            DATA_BLOB cipherBlob = new DATA_BLOB();
            CRYPTPROTECT_PROMPTSTRUCT prompt = new
              CRYPTPROTECT_PROMPTSTRUCT();
            InitPromptstruct(ref prompt);
            try
            {
                try
                {
                    int cipherTextSize = cipherText.Length;
                    cipherBlob.pbData = Marshal.AllocHGlobal(cipherTextSize);
                    if (IntPtr.Zero == cipherBlob.pbData)
                    {
                        throw new Exception("Unable to allocate cipherText buffer.");
                    }
                    cipherBlob.cbData = cipherTextSize;
                    Marshal.Copy(cipherText, 0, cipherBlob.pbData,
                      cipherBlob.cbData);
                }
                catch (Exception ex)
                {
                    throw new Exception("Exception marshalling data. " +
                      ex.Message);
                }
                DATA_BLOB entropyBlob = new DATA_BLOB();
                int dwFlags;
                if (Store.USE_MACHINE_STORE == store)
                {//Using the machine store, should be providing entropy.
                    dwFlags =
                      CRYPTPROTECT_LOCAL_MACHINE | CRYPTPROTECT_UI_FORBIDDEN;
                    //Check to see if the entropy is null
                    if (null == optionalEntropy)
                    {//Allocate something
                        optionalEntropy = new byte[0];
                    }
                    try
                    {
                        int bytesSize = optionalEntropy.Length;
                        entropyBlob.pbData = Marshal.AllocHGlobal(bytesSize);
                        if (IntPtr.Zero == entropyBlob.pbData)
                        {
                            throw new Exception("Unable to allocate entropy buffer.");
                        }
                        entropyBlob.cbData = bytesSize;
                        Marshal.Copy(optionalEntropy, 0, entropyBlob.pbData,
                          bytesSize);
                    }
                    catch (Exception ex)
                    {
                        throw new Exception("Exception entropy marshalling data. " +
                                            ex.Message);
                    }
                }
                else
                {//Using the user store
                    dwFlags = CRYPTPROTECT_UI_FORBIDDEN;
                }
                retVal = CryptUnprotectData(ref cipherBlob, DataDescription, ref 
      entropyBlob,
                                            IntPtr.Zero, ref prompt, dwFlags,
                                            ref plainTextBlob);
                if (false == retVal)
                {
                    throw new Exception("Decryption failed. " +
                                   GetErrorMessage(Marshal.GetLastWin32Error()));
                }
                //Free the blob and entropy.
                if (IntPtr.Zero != cipherBlob.pbData)
                {
                    Marshal.FreeHGlobal(cipherBlob.pbData);
                }
                if (IntPtr.Zero != entropyBlob.pbData)
                {
                    Marshal.FreeHGlobal(entropyBlob.pbData);
                }
            }
            catch (Exception ex)
            {
                throw new Exception("Exception decrypting. " + ex.Message);
            }
            byte[] plainText = new byte[plainTextBlob.cbData];
            Marshal.Copy(plainTextBlob.pbData, plainText, 0, plainTextBlob.cbData);
            Marshal.FreeHGlobal(plainTextBlob.pbData);
            return plainText;
        }

        private void InitPromptstruct(ref CRYPTPROTECT_PROMPTSTRUCT ps)
        {
            ps.cbSize = Marshal.SizeOf(typeof(CRYPTPROTECT_PROMPTSTRUCT));
            ps.dwPromptFlags = 0;
            ps.hwndApp = NullPtr;
            ps.szPrompt = null;
        }

        private unsafe static String GetErrorMessage(int errorCode)
        {
            int FORMAT_MESSAGE_ALLOCATE_BUFFER = 0x00000100;
            int FORMAT_MESSAGE_IGNORE_INSERTS = 0x00000200;
            int FORMAT_MESSAGE_FROM_SYSTEM = 0x00001000;
            int messageSize = 255;
            String lpMsgBuf = "";
            int dwFlags = FORMAT_MESSAGE_ALLOCATE_BUFFER |
              FORMAT_MESSAGE_FROM_SYSTEM |
                          FORMAT_MESSAGE_IGNORE_INSERTS;
            IntPtr ptrlpSource = new IntPtr();
            IntPtr prtArguments = new IntPtr();
            int retVal = FormatMessage(dwFlags, ref ptrlpSource, errorCode, 0,
                                       ref lpMsgBuf, messageSize,
                                         &prtArguments);
            if (0 == retVal)
            {
                throw new Exception("Failed to format message for error code " +
                                    errorCode + ". ");
            }
            return lpMsgBuf;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\NGGamePlayer.Test\AutoMSTSC\MessageForm.Designer.cs ===
﻿namespace AutoMSTSC
{
    partial class MessageForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.textBox1 = new System.Windows.Forms.TextBox();
            this.SuspendLayout();
            // 
            // textBox1
            // 
            this.textBox1.AcceptsReturn = true;
            this.textBox1.AcceptsTab = true;
            this.textBox1.Dock = System.Windows.Forms.DockStyle.Fill;
            this.textBox1.Location = new System.Drawing.Point(0, 0);
            this.textBox1.Multiline = true;
            this.textBox1.Name = "textBox1";
            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Both;
            this.textBox1.Size = new System.Drawing.Size(284, 262);
            this.textBox1.TabIndex = 0;
            this.textBox1.WordWrap = false;
            // 
            // MessageForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(284, 262);
            this.Controls.Add(this.textBox1);
            this.Name = "MessageForm";
            this.StartPosition = System.Windows.Forms.FormStartPosition.Manual;
            this.Text = "AutoMSTSC";
            this.TopMost = true;
            this.Load += new System.EventHandler(this.MessageForm_Load);
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.TextBox textBox1;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\NGGamePlayer.Test\NGGamePlayer.Test\Actions\MobileHomePageActions.cs ===
﻿using System;
using System.Threading;
using NGGamePlayer.Test.Objects;
using NGGamePlayer.Test.States;
using NGGamePlayer.Test.Utilities;
using Wgx.Test.Web.AutomationFramework;
using Wgx.Test.Web.AutomationFramework.Objects;

namespace NGGamePlayer.Test.Actions
{
    public class MobileHomePageActions
    {
        private static MobileHomePageObject homePage;
        public static ModelState CurrentModelState;
        public static void Initialize()
        {
            Logging.Log("Initialize");
            homePage = new MobileHomePageObject();
            //StateManager.AddGenerator(new MobileHomePageStateGenerator());
            StateManager.Current.State = new State();
            StateManager.Expected.State = new State();
            CurrentModelState = ModelState.Undetermined;
        }

        public static void Cleanup()
        {
            Logging.Log("Cleanup");
            //homePage.Close();
            homePage = null;
        }

        public static void MobileHomeDisplay()
        {
            VerificationManager.ActionStarting();
            MobileHomeDisplayUnverified();
            StateManager.Current.State = homePage.DetermineState();
            VerificationManager.ActionEnding();
        }

        internal static void MobileHomeDisplayUnverified()
        {
            Logging.Log("MobileHomeDisplay");
            homePage.Display(true);
            homePage.ValidateLocation();
            CurrentModelState = ModelState.HomePage;
        }

        internal static void MobileHomePageSignIn(string userName, string password)
        {
            VerificationManager.ActionStarting();
            MobileHomePageSignInUnverified(userName, password);
            CurrentModelState = ModelState.HomePage;
            StateManager.Current.State = homePage.DetermineState();
            VerificationManager.ActionEnding();
        }

        internal static void MobileHomePageSignInUnverified(string userName, string password)
        {
            Logging.Log("MobileHomePageSignIn");
            homePage.ClickSignInOut();
            SignInPage signIn = new SignInPage();
            signIn.Initialize();
            signIn.ValidateLocation();
            signIn.SignIn(userName, password);
            homePage.ValidateLocation();
        }

        internal static void MobileHomePageSignOut()
        {
            Logging.Log("MobileHomePageSignOut");
            VerificationManager.ActionStarting();
            homePage.ValidateLocation();

            homePage.ClickSignInOut();
            homePage.ValidateLocation();

            CurrentModelState = ModelState.HomePage;
            StateManager.Current.State = homePage.DetermineState();
            VerificationManager.ActionEnding();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\NGGamePlayer.Test\NGGamePlayer.Test\Actions\NGGamePlayerActions.cs ===
﻿using NGGamePlayer.Test.Objects;
using NGGamePlayer.Test.States;
using NGGamePlayer.Test.Utilities;
using Wgx.Test.Web.AutomationFramework;
using Wgx.Test.Web.AutomationFramework.Objects;

namespace NGGamePlayer.Test.Actions
{
    public enum ModelState
    {
        Undetermined,
        GameLoading,
        GameRunning,
        SigningIn,
        IntermissionAd,
        GamePlaying,
        GameOver,
        BadgeAlbum,
        HomePage
    }

    public enum ModelAction
    {
        StartGame,
        PlayGame,
        QuitGame,
        PlayAgain,
        SwitchMute,
        SwitchPause,
        SignIn
    }

    public static class NGGamePlayerActions
    {
        private static NGGamePlayerObject gamePlayer;
        public static ModelState CurrentModelState;
        public static void Initialize()
        {
            Logging.Log("Initialize");
            gamePlayer = new NGGamePlayerObject();
            new AutomationRobustness().EnsureRobustness(gamePlayer);
            StateManager.AddGenerator(new NGGamePlayerStateGenerator());
            StateManager.Current.State = new State();
            StateManager.Expected.State = new State();
            CurrentModelState = ModelState.Undetermined;
        }

        /// <summary>
        /// Starts the specific game.
        /// </summary>
        /// <param name="gameName">Name of the game.</param>
        public static void StartGame(string gameName)
        {
            Logging.Log("StartGame");
            VerificationManager.ActionStarting(gameName);
            StartGameInternal(gameName);
            StateManager.Current.State = gamePlayer.DetermineState();
            VerificationManager.ActionEnding();
        }

        /// <summary>
        /// This is an internal macro for starting the game without verifying the game state.
        /// This is used my multiple other methods.
        /// </summary>
        /// <param name="gameName">Name of the game.</param>
        private static void StartGameInternal(string gameName)
        {
            gamePlayer.StartGame(gameName);
            CurrentModelState = ModelState.GameLoading;
            gamePlayer.ValidateLocation();
            gamePlayer.WaitForAdToGoAway();
            CurrentModelState = ModelState.GameRunning;
        }

        /// <summary>
        /// This starts a specific game and clicks the RunBVTs html button for skipping the menus of the Flash games,
        /// and waiting until the game ends with no user input.
        /// This is currently only relevant to the Single Player Flash games.
        /// </summary>
        /// <param name="gameName">Name of the game.</param>
        public static void PlayGame(string gameName)
        {
            Logging.Log("PlayGame");
            VerificationManager.ActionStarting(gameName);
            StartGameInternal(gameName);

            gamePlayer.PlayGameAndWaitForGameOver();

            StateManager.Current.State = gamePlayer.DetermineState();
            VerificationManager.ActionEnding();
        }

        internal static void SignIn(string userName, string password)
        {
            Logging.Log("SignIn");
            ModelState preSignInState = CurrentModelState;
            VerificationManager.ActionStarting();
            gamePlayer.ValidateLocation();

            gamePlayer.ClickSignInOut();
            CurrentModelState = ModelState.SigningIn;
            SignInPage signIn = new SignInPage();
            signIn.Initialize();
            signIn.ValidateLocation();
            signIn.SignIn(userName, password);

            gamePlayer.ValidateLocation();
            gamePlayer.WaitForAdToGoAway();

            CurrentModelState = preSignInState;
            StateManager.Current.State = gamePlayer.DetermineState();
            VerificationManager.ActionEnding();
        }

        internal static void SignOut()
        {
            Logging.Log("SignOut");
            VerificationManager.ActionStarting();
            gamePlayer.ValidateLocation();
            gamePlayer.ClickSignInOut();

            MobileHomePageObject homePage = new MobileHomePageObject();
            homePage.ValidateLocation();
            StateManager.Current.State = homePage.DetermineState();
            VerificationManager.ActionEnding();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\NGGamePlayer.Test\AutoMSTSC\Program.cs ===
﻿using System;
using System.Windows.Forms;

namespace AutoMSTSC
{
    /// <summary>
    /// A tool that opens mstsc to automatically connect to given server with given user/pass.
    /// 
    /// For more details see:
    /// http://msdn.microsoft.com/en-us/library/ms861803.aspx
    /// http://www.coe.uncc.edu/mosaic/remote_desk/RDP%20File%20Settings.htm
    /// </summary>
    class Program
    {
        private static MessageForm messageForm;

        [STAThread]
        static int Main(string[] args)
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            if (args.Length != 3)
            {
                MessageBox.Show("Usage: AutoMSTSC.exe <server> <user> <password>\r\neg.\r\nAutoMSTSC.exe LiveGamePlayer REDMOND\\ztest01 %3H53J3:kjl#4");
                return 2;
            }

            string server = args[0];
            string username = args[1];
            string password = args[2];
            messageForm = new MessageForm(server, username, password);
            Application.Run(messageForm);
            return 0;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\NGGamePlayer.Test\NGGamePlayer.Test\Objects\SignInPage.cs ===
﻿using System;
using System.Threading;
using Microsoft.KAF.Factory;
using Microsoft.KAF.UIElements;
using NGGamePlayer.Test.Utilities;

namespace NGGamePlayer.Test.Objects
{
    public class SignInPage : BrowserAgent.WebPageAgent
    {
        private HtmlTextBox username;
        private HtmlTextBox password;
        private HtmlButton signIn;

        public SignInPage()
        {
            //BrowserAgentFactory.BrowserType = BrowserType.IE80;
        }

        public void Initialize()
        {
            username = UIElementFactory.GetUIElement<HtmlTextBox>("id", "i0116");
            password = UIElementFactory.GetUIElement<HtmlTextBox>("id", "i0118");
            signIn = UIElementFactory.GetUIElement<HtmlButton>("id", "i0011");
        }

        public void SignIn(string user, string pass)
        {
            username.InputText(user);
            password.InputText(pass);
            signIn.Click();
        }

        /// <summary>
        /// Makes sure the current location is valid. This will simply sleep for a max of 60 seconds, if it
        /// detects that the page is still the blank page.
        /// </summary>
        public override void ValidateLocation()
        {
            int count = 60;
            bool allVisible = false;
            while (!allVisible && (count > 0))
            {
                if (count < 60)
                {
                    //Logging.Log("Page not fully loaded (title: \"" + title + "\")... sleeping");
                    Thread.Sleep(1000);
                }
                allVisible = true;
                allVisible &= username.IsVisible();
                allVisible &= password.IsVisible();
                allVisible &= signIn.IsVisible();
                count--;
            }
            if (count == 0)
            {
                string msg = "Timed out waiting for page to load after 60s.";
                Logging.Log(msg);
                throw new TimeoutException(msg);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\NGGamePlayer.Test\NGGamePlayer.Test\States\MobileHomePageState.cs ===
﻿using System;
using NGGamePlayer.Test.Utilities;
using Wgx.Test.Web.AutomationFramework;
using Wgx.Test.Web.AutomationFramework.Objects;

namespace NGGamePlayer.Test.States
{
    class MobileHomePageState : State
    {
        public string Title { get; set; }

        public bool IsHeaderChromeVisible { get; set; }
        public bool IsSignedIn { get; set; }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\NGGamePlayer.Test\NGGamePlayer.Test\Objects\SilverlightTestsPage.cs ===
﻿// <copyright file="SilverlightTestsPage.cs" company="Microsoft">Copyright (c) 2010 All Right Reserved
// </copyright>
// <author>Filip Skakun</author>
// <email>filip.skakun@gmail.com</email>
// <date>2010-02-18</date>
// <summary>Contains the class definition for SilverlightTestsPage class.</summary>

namespace NGGamePlayer.Test.Objects
{
    using System;
    using System.Configuration;
    using System.Threading;
    using Microsoft.KAF.Factory;
    using Microsoft.KAF.UIElements;
    using NGGamePlayer.Test.States;
    using NGGamePlayer.Test.Utilities;

    internal class SilverlightTestsPage : BrowserAgent.WebPageAgent//, IPhysicalObjectModel
    {
        #region Data Members
        //Header chrome
        private HtmlLink homeLink;
        private HtmlLink signInLink; //Sign out/Sign in
        private HtmlContainer testState;
        private HtmlTextBox parsableTestResults;

        public MobileHomePageState CurrentState;
        private string TestServer = ConfigurationManager.AppSettings["TestServer"];
        private string LiveWebUrl = ConfigurationManager.AppSettings["LiveWebUrl"];
        #endregion Data Memebers

        public SilverlightTestsPage()
        {
            Initialize();
        }

        /// <summary>
        /// Initializes this instance.
        /// Closes all browsers.
        /// Initializes proxy objects that contain references to UI elements.
        /// </summary>
        public void Initialize()
        {
            Logging.Log("SilverlightTestsPage - Initializing");

            CurrentState = new MobileHomePageState();
            homeLink = UIElementFactory.GetUIElement<HtmlLink>("id", "lnkHdrHome");
            signInLink = UIElementFactory.GetUIElement<HtmlLink>("id", "lnkHdrSignIn");
            testState = UIElementFactory.GetUIElement<HtmlContainer>("id", "txtStatus");
            parsableTestResults = UIElementFactory.GetUIElement<HtmlTextBox>("id", "parsableTestResults");
        }

        public void Display(bool newWebBrowser)
        {
            Display(newWebBrowser, null, null);
        }

        public void Display(bool newWebBrowser, string testClasses, string tag)
        {
            if (testClasses != null)
            {
                if (tag != null)
                {
                    Url = string.Format("{0}/TestTools/SilverlightTestPage/{1}/true/{2}", LiveWebUrl, testClasses, tag);
                }
                else
                {
                    Url = string.Format("{0}/TestTools/SilverlightTestPage/{1}/true", LiveWebUrl, testClasses);
                }
            }
            else
            {
                Url = string.Format("{0}/TestTools/SilverlightTestPage/all/true", LiveWebUrl);
            }
            Navigate(newWebBrowser);
        }

        /// <summary>
        /// Navigates to the silverlight unit test page executing custom commands instead of running the tests.
        /// Eg.
        /// http://games.dev.xbox.com/TestTools/SilverlightTestPage?CreateTwoSessions
        /// - creates two game sessions required to run 
        /// </summary>
        /// <param name="newWebBrowser">if set to <c>true</c> [new web browser].</param>
        /// <param name="specialCommands">The special commands.</param>
        public void RunCustomQueryStringCommands(bool newWebBrowser, string specialCommands)
        {
            Url = string.Format("{0}/TestTools/SilverlightTestPage?{1}", LiveWebUrl, specialCommands);
            Navigate(newWebBrowser);
        }

        public void ClickSignInOut()
        {
            signInLink.UseCoordinateClick = false;
            signInLink.Click();
        }

        /// <summary>
        /// Makes sure the current location is valid. This will simply sleep for a max of 60 seconds, if it
        /// detects that the page is still the blank page.
        /// </summary>
        public override void ValidateLocation()
        {
            int count = 120;
            string title = KafProxy.GetTitle();
            parsableTestResults.MaxRetriesAllowed = count;
            try
            {
                parsableTestResults.Exists(true, true);
                testState.Exists(true, true);
            }
            catch (Exception ex)
            {
                Logging.Log(ex.ToString());
                throw new TimeoutException("Timed out waiting for page to load after 120s.", ex);
            }
        }

        public void WaitForTestsToFinish()
        {
            string currentTestState;
            int count = 30 * 60; //30 minutes timeout
            while (
                (currentTestState = testState.Properties.InnerText) != "Completed" &&
                count > 0)
            {
                Thread.Sleep(1000);
                count--;
            }
            if (count == 0)
            {
                string msg = "Timed out waiting for the Silverlight Unit Tests to complete after 300s. Current test run state: " + currentTestState;
                Logging.Log(msg);
                throw new TimeoutException(msg);
            }
        }

        internal string GetResultsString()
        {
            return parsableTestResults.Properties.InnerText;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\NGGamePlayer.Test\NGGamePlayer.Test\Objects\MobileHomePageObject.cs ===
﻿using System;
using System.Configuration;
using System.Diagnostics;
using System.Threading;
using Microsoft.KAF.Factory;
using Microsoft.KAF.UIElements;
using NGGamePlayer.Test.States;
using NGGamePlayer.Test.Utilities;
using Wgx.Test.Web.AutomationFramework;
using Wgx.Test.Web.AutomationFramework.Objects;
using Microsoft.KAF.UIDriver;

namespace NGGamePlayer.Test.Objects
{
    class MobileHomePageObject : BrowserAgent.WebPageAgent, IPhysicalObjectModel
    {
        #region Data Members
        //Header chrome
        private HtmlLink homeLink;
        private HtmlLink signInLink; //Sign out/Sign in

        public MobileHomePageState CurrentState;
        private string TestServer = ConfigurationManager.AppSettings["TestServer"];
        private string LiveWebUrl = ConfigurationManager.AppSettings["LiveWebUrl"];
        #endregion Data Memebers

        public MobileHomePageObject()
        {
            Initialize();
        }

        /// <summary>
        /// Initializes this instance.
        /// Closes all browsers.
        /// Initializes proxy objects that contain references to UI elements.
        /// </summary>
        public void Initialize()
        {
            Logging.Log("MobileHomePageObject - Initializing");

            CurrentState = new MobileHomePageState();
            homeLink = UIElementFactory.GetUIElement<HtmlLink>("id", "lnkHdrHome");
            signInLink = UIElementFactory.GetUIElement<HtmlLink>("id", "lnkHdrSignIn");
        }

        public void Display(bool newWebBrowser)
        {
            Url = string.Format("{0}/Home", LiveWebUrl);
            Navigate(newWebBrowser);
        }

        public void ClickSignInOut()
        {
            signInLink.UseCoordinateClick = false;
            signInLink.Click();
        }

        #region IPhysicalObjectModel Members
        public State DetermineState()
        {
            CurrentState.IsHeaderChromeVisible = homeLink.IsVisible(true, false) && signInLink.IsVisible(true, false);
            CurrentState.IsSignedIn = signInLink.Properties.InnerText.Contains("Sign out");
            CurrentState.Title = KafProxy.GetTitle();
            return CurrentState;
        }

        public void ResetStatetoCurrent()
        {
            throw new NotImplementedException();
        }
        #endregion

        /// <summary>
        /// Makes sure the current location is valid. This will simply sleep for a max of 60 seconds, if it
        /// detects that the page is still the blank page.
        /// </summary>
        public override void ValidateLocation()
        {
            int count = 120;
            signInLink.MaxRetriesAllowed = count;
            try
            {
                signInLink.Exists(true, true);
            }
            catch (Exception ex)
            {
                Logging.Log(ex.ToString());
                throw new TimeoutException("Timed out waiting for page to load after 120s.", ex);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\NGGamePlayer.Test\NGGamePlayer.Test\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("NGGamePlayer.Test")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM componenets.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("fdffafb4-0450-4f99-b766-4da3c7d90283")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
//[assembly: AssemblyVersion("1.0.0.0")]
//[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\NGGamePlayer.Test\NGGamePlayer.Test\Tests\flashgamebvtests.cs ===
﻿using System;
using System.Collections.Generic;
using System.Configuration;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Threading;
using System.Windows.Forms;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using NGGamePlayer.Test.Actions;
using NGGamePlayer.Test.Utilities;
using Wgx.Test.Web.AutomationFramework;

namespace NGGamePlayer.Test.Tests
{
    [TestClass]
    public class FlashGameBVTests
    {
        #region Properties and fields
        private static string lastAction = "none";
        private static string logDir;
        private static string computerName;
        private static string commonResultsLocation;

        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        } 
        #endregion

        public FlashGameBVTests()
        {
        }

        #region Setup/Cleanup methods
        [ClassInitialize()]
        public static void InitializeTestSuite(TestContext testContext)
        {
            //System.Diagnostics.Debugger.Launch(); //comment out timeout for debugging
            try
            {
                Logging.Log("InitializeTestSuite");
                logDir = ConfigurationManager.AppSettings["LogDirectory"];
                commonResultsLocation = ConfigurationManager.AppSettings["CommonResultsLocation"];
                computerName = Environment.GetEnvironmentVariable("COMPUTERNAME");
                NGGamePlayerActions.Initialize();
                MobileHomePageActions.Initialize();
            }
            catch (Exception ex)
            {
                throw new GamePlayerTestException("InitializeTestSuite", ex);
            }
            Logging.Log("InitializeTestSuite - done");
        }

        [TestInitialize()]
        public void InitializeTest()
        {
            Logging.Log("InitializeTest");
            KafProxy.CloseBrowsers();
            KafProxy.CleanupDrivers();
            Logging.Log("InitializeTest - done");
        }

        [TestCleanup()]
        public void CleanupTest()
        {
            Logging.Log("CleanupTest");
            KafProxy.CloseBrowsers();
            KafProxy.CleanupDrivers();
            Logging.Log("CleanupTest - done");
        }

        [ClassCleanup()]
        public static void CleanupTestSuite()
        {
            Logging.Log("CleanupTestSuite");
        }
        #endregion


        ///<summary>
        ///Build Verification Test for Flash Games integration with GamePlayer
        ///Launches the game
        ///Sets the game in a state where the selection menus have been passed and the game is running
        ///Waits for a no-operation game to complete
        ///</summary>
        
        [TestMethod]
        [Timeout(30 * 60 * 1000)]
        public void PlayFlowerzRush()
        {
            try
            {
                Logging.Log("PlayFlowerzRush() executing.");
                NGGamePlayerActions.PlayGame("4D5308E0"); //FlowerzRush Game ID
                Logging.Log("PlayFlowerzRush() finished executing.");
            }
            catch (Exception ex)
            {
                Logging.Log("PlayFlowerzRush() caught an exception.");
                throw new GamePlayerTestException("Exception Found. Test Failed!", ex);
            }
        }

        [TestMethod]
        [Timeout(30 * 60 * 1000)]
        public void PlayHexicRush()
        {
            try
            {
                Logging.Log("PlayHexicRush() executing.");
                NGGamePlayerActions.PlayGame("4D5308DF"); //HexicRush Game ID
                Logging.Log("PlayHexicRush() finished executing.");
            }
            catch (Exception ex)
            {
                Logging.Log("PlayHexicRush() caught an exception.");
                throw new GamePlayerTestException("Exception Found. Test Failed!", ex);
            }
        }

        private static Dictionary<ModelAction, int> DetermineActionWeightsForCurrentState()
        {
            Dictionary<ModelAction, int> weights = new Dictionary<ModelAction, int>();
            switch (NGGamePlayerActions.CurrentModelState)
            {
                case ModelState.Undetermined:
                    weights.Add(ModelAction.StartGame, 1);
                    break;
                case ModelState.GameLoading:
                case ModelState.IntermissionAd:
                case ModelState.GameOver:
                    Assert.Fail("NGGamePlayerActions.CurrentModelState engine in state not supported between actions:" + NGGamePlayerActions.CurrentModelState);
                    break;
                case ModelState.GameRunning:
                case ModelState.BadgeAlbum:
                    weights.Add(ModelAction.StartGame, 1);
                    weights.Add(ModelAction.PlayAgain, 15);
                    break;
            }
            return weights;
        }

        private static void PerformAction(Dictionary<ModelAction, int> weights, int chance)
        {
            int subTotal = 0;
            foreach (var pair in weights)
            {
                subTotal += pair.Value;
                if (chance < subTotal)
                {
                    Logging.Log(string.Format("[{0}] - performing action", pair.Key));
                    lastAction = pair.Key.ToString();
                    switch (pair.Key)
                    {
                        case ModelAction.StartGame:
                            KafProxy.CloseBrowsers();
                            NGGamePlayerActions.StartGame("flowerzrush");
                            break;
                    }
                    break;
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\NGGamePlayer.Test\NGGamePlayer.Test\States\NGGamePlayerState.cs ===
﻿using System;
using System.Collections.Generic;
using NGGamePlayer.Test.Utilities;
using Wgx.Test.Web.AutomationFramework;
using Wgx.Test.Web.AutomationFramework.Objects;

namespace NGGamePlayer.Test.States
{
    public class NGGamePlayerState : State
    {
        public string Title { get; set; }
        //public string GameConfig { get; set; }
        public bool IsPreLoadAdDisplayed { get; set; }
        public bool IsGameRunning { get; set; }
        public bool IsBannerAdDisplayed { get; set; }
        public bool IsSidebarLeaderboardDisplayed { get; set; }
        public bool IsSidebarBadgeAlbumDisplayed { get; set; }
        public bool IsRewardsPageDisplayed { get; set; }
        public bool IsHeaderChromeVisible { get; set; }
        public bool IsSignedIn { get; set; }
        public bool WasPreLoadAdDisplayed { get; set; }
        public bool ScoreSubmitHappened { get; set; }
        private List<string> propertiesToCompare = new List<string>();
        public void SetPropertiesToCompare(IEnumerable<string> properties)
        {
            propertiesToCompare = new List<string>();
            foreach (string property in properties)
            {
                propertiesToCompare.Add(property);
            }
            UpdatePropertiesToCompare();
        }
        public void UpdatePropertiesToCompare()
        {
            ClearComparisonPropertyList();
            Logging.Log("Clearing comparison list");
            foreach (string property in propertiesToCompare)
            {
                Logging.Log("Adding to comparison list: " + property);
                AddPropertyToCompare(property);
            }
        }
        public NGGamePlayerState()
        {
        }
    }

    public class NGGamePlayerStateGenerator : StateGenerator
    {
        private static bool expectedSignedIn;

        /// <summary>
        /// This should be called every time you close the browsers - or each time before you open a new one.
        /// </summary>
        internal static void Initialize()
        {
            expectedSignedIn = false;
        }

        /// <summary>
        /// Handles determination of expected results for each action.
        /// It gets executed by calls to VerificationManager.ActionEnding(); - before comparing actual(current) to expected results.
        /// </summary>
        /// <param name="executingActionsName">Name of the executing actions.</param>
        /// <param name="executingActionsArguments">The executing actions arguments.</param>
        public override void Notify(string executingActionsName, object[] executingActionsArguments)
        {
            NGGamePlayerState expectedGamePlayerState;
            MobileHomePageState expectedMobileHomePageState;

            switch (executingActionsName)
            {
                case "StartGame":
                case "SignIn":
                    if (StateManager.Expected.State is NGGamePlayerState)
                    {
                        expectedGamePlayerState = (NGGamePlayerState)StateManager.Expected.State; //need to reuse current state, since it knows what was the last set mute value (and pause due to bug)
                    }
                    else
                    {
                        expectedGamePlayerState = new NGGamePlayerState();
                        StateManager.Expected.State = expectedGamePlayerState;
                    }
                    expectedGamePlayerState.ClearComparisonPropertyList();
                    Logging.Log("Comparing all state properties");
                    expectedGamePlayerState.Title = "XBOX LIVE - Enjoy this free game!";
                    expectedGamePlayerState.IsPreLoadAdDisplayed = false;
                    expectedGamePlayerState.IsGameRunning = true;
                    expectedGamePlayerState.IsBannerAdDisplayed = true;
                    expectedGamePlayerState.IsSidebarLeaderboardDisplayed = true;
                    expectedGamePlayerState.IsSidebarBadgeAlbumDisplayed = true;
                    expectedGamePlayerState.IsRewardsPageDisplayed = false;
                    expectedGamePlayerState.WasPreLoadAdDisplayed = true;
                    expectedGamePlayerState.IsHeaderChromeVisible = true;
                    expectedGamePlayerState.ScoreSubmitHappened = false;
                    expectedSignedIn = 
                        executingActionsName == "SignIn" || 
                        ((executingActionsName == "StartGame") && expectedSignedIn);
                    expectedGamePlayerState.IsSignedIn = expectedSignedIn;
                    break;
                case "PlayGame":
                    if (StateManager.Expected.State is NGGamePlayerState)
                    {
                        expectedGamePlayerState = (NGGamePlayerState)StateManager.Expected.State; //need to reuse current state, since it knows what was the last set mute value (and pause due to bug)
                    }
                    else
                    {
                        expectedGamePlayerState = new NGGamePlayerState();
                        StateManager.Expected.State = expectedGamePlayerState;
                    }
                    expectedGamePlayerState.ClearComparisonPropertyList();
                    Logging.Log("Comparing all state properties");
                    expectedGamePlayerState.Title = "XBOX LIVE - Enjoy this free game!";
                    expectedGamePlayerState.IsPreLoadAdDisplayed = false;
                    expectedGamePlayerState.IsGameRunning = true;
                    expectedGamePlayerState.IsBannerAdDisplayed = true;
                    expectedGamePlayerState.IsSidebarLeaderboardDisplayed = true;
                    expectedGamePlayerState.IsSidebarBadgeAlbumDisplayed = true;
                    expectedGamePlayerState.IsRewardsPageDisplayed = false;
                    expectedGamePlayerState.WasPreLoadAdDisplayed = true;
                    expectedGamePlayerState.IsHeaderChromeVisible = true;
                    expectedGamePlayerState.ScoreSubmitHappened = true;
                    
                    expectedGamePlayerState.IsSignedIn = expectedSignedIn;
                    break;
                case "SignOut":
                case "MobileHomeDisplay":
                case "MobileHomePageSignOut":
                    expectedMobileHomePageState = new MobileHomePageState();
                    StateManager.Expected.State = expectedMobileHomePageState;
                    expectedMobileHomePageState.ClearComparisonPropertyList();
                    Logging.Log("Comparing all state properties");
                    expectedMobileHomePageState.IsHeaderChromeVisible = true;
                    expectedMobileHomePageState.Title = "Xbox Mobile Dogfood";
                    expectedSignedIn = executingActionsName == "MobileHomeDisplay" && expectedSignedIn;
                    expectedMobileHomePageState.IsSignedIn = expectedSignedIn;
                    break;
                case "MobileHomePageSignIn":
                    expectedMobileHomePageState = new MobileHomePageState();
                    StateManager.Expected.State = expectedMobileHomePageState;
                    expectedMobileHomePageState.ClearComparisonPropertyList();
                    Logging.Log("Comparing all state properties");
                    expectedMobileHomePageState.IsHeaderChromeVisible = true;
                    expectedMobileHomePageState.Title = "Mobile Dogfood Notifications";
                    expectedSignedIn = true;
                    expectedMobileHomePageState.IsSignedIn = expectedSignedIn;
                    break;
                //default:
                //    throw new ApplicationException("We don't have a case for action " + executingActionsName);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\NGGamePlayer.Test\NGGamePlayer.Test\Tests\NGGamePlayerTests.cs ===
﻿using System;
using System.Collections.Generic;
using System.Configuration;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Threading;
using System.Windows.Forms;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using NGGamePlayer.Test.Actions;
using NGGamePlayer.Test.Utilities;
using Wgx.Test.Web.AutomationFramework;

namespace NGGamePlayer.Test.Tests
{
    [TestClass]
    public class NGGamePlayerTests
    {
        #region Properties and fields
        private static string lastAction = "none";
        private static string logDir;
        private static string computerName;
        private static string commonResultsLocation;
        private static string user1;
        private static string pass1;
        private static string user2;
        private static string pass2;

        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        } 
        #endregion

        public NGGamePlayerTests()
        {
        }

        #region Setup/Cleanup methods
        [ClassInitialize()]
        public static void InitializeTestSuite(TestContext testContext)
        {
            try
            {
                Logging.Log("InitializeTestSuite");
                logDir = ConfigurationManager.AppSettings["LogDirectory"];
                commonResultsLocation = ConfigurationManager.AppSettings["CommonResultsLocation"];
                computerName = Environment.GetEnvironmentVariable("COMPUTERNAME");
                user1 = ConfigurationManager.AppSettings["User1"];
                pass1 = ConfigurationManager.AppSettings["Pass1"];
                user2 = ConfigurationManager.AppSettings["User2"];
                pass2 = ConfigurationManager.AppSettings["Pass2"];
                NGGamePlayerActions.Initialize();
                MobileHomePageActions.Initialize();
            }
            catch (Exception ex)
            {
                throw new GamePlayerTestException(Logging.TakeScreenshot("InitializeTestSuite"), ex);
            }
            Logging.Log("InitializeTestSuite - done");
        }

        [TestInitialize()]
        public void InitializeTest()
        {
            Logging.Log("InitializeTest");
            KafProxy.CloseBrowsers();
            KafProxy.CleanupDrivers();
            Logging.Log("InitializeTest - done");
        }

        [TestCleanup()]
        public void CleanupTest()
        {
            Logging.Log("CleanupTest");
            KafProxy.CloseBrowsers();
            KafProxy.CleanupDrivers();
            Logging.Log("CleanupTest - done");
        }

        [ClassCleanup()]
        public static void CleanupTestSuite()
        {
            Logging.Log("CleanupTestSuite");
        }
        #endregion

        [TestMethod]
        [Timeout(6 * 60 * 1000)] //6 minutes
        public void StartGame()
        {
            try
            {
                Logging.Log("StartGame() executing.");
                NGGamePlayerActions.StartGame("4D5308E0"); //flowerzrush
                Logging.Log("StartGame() finished executing.");
            }
            catch (Exception ex)
            {
                Logging.Log("StartGame() caught an exception.");
                throw new GamePlayerTestException(Logging.TakeScreenshot("StartGame"), ex);
            }
        }

        [TestMethod]
        [Timeout(30 * 60 * 1000)]
        public void StartGameAndSignIn()
        {
            try
            {
                Logging.Log("SignIn() executing.");
                NGGamePlayerActions.StartGame("4D5308E0"); //flowerzrush
                NGGamePlayerActions.SignIn(user1, pass1);
                Logging.Log("SignIn() finished executing.");
            }
            catch (Exception ex)
            {
                Logging.Log("SignIn() caught an exception.");
                throw new GamePlayerTestException(Logging.TakeScreenshot("SignIn"), ex);
            }
        }

        [TestMethod]
        [Timeout(30 * 60 * 1000)]
        public void StartGameSignInAndOut()
        {
            try
            {
                Logging.Log("SignOut() executing.");
                NGGamePlayerActions.StartGame("4D5308E0"); //flowerzrush
                NGGamePlayerActions.SignIn(user1, pass1);
                NGGamePlayerActions.SignOut();
                Logging.Log("SignOut() finished executing.");
            }
            catch (Exception ex)
            {
                Logging.Log("SignIn() caught an exception.");
                throw new GamePlayerTestException(Logging.TakeScreenshot("SignIn"), ex);
            }
        }

        [TestMethod]
        [Timeout(0)]
        public void ModelBased()
        {
            Random random = new Random(DateTime.Now.Millisecond);
            string modelDuration = ConfigurationManager.AppSettings["ModelDuration"];
            DateTime endTime;
            string message;
            Logging.Log("Running GamePlayer model-based test.");

            DetermineEndTime(modelDuration, out endTime, out message);

            while (DateTime.Now < endTime)
            {
                Logging.Log("Current state: " + NGGamePlayerActions.CurrentModelState + ". " + message);
                Dictionary<ModelAction, int> weights = DetermineActionWeightsForCurrentState();
                int sumOfWeights = 0;
                foreach (int weight in weights.Values)
                {
                    sumOfWeights += weight;
                }
                int chance = random.Next(0, sumOfWeights);
                try
                {
                    PerformAction(weights, chance);
                }
                catch (Exception ex)
                {
                    throw new GamePlayerTestException(Logging.TakeScreenshot("ModelBased_" + lastAction), ex);
                }
            }
        }

        private static void DetermineEndTime(string modelDuration, out DateTime endTime, out string message)
        {
            string et = ConfigurationManager.AppSettings["EndTime"];
            if (!string.IsNullOrEmpty(et))
            {
                endTime = DateTime.Parse(et);
                if (et != "12/31/9999 11:59:59 PM")
                {
                    message = "No issues so far. Running until " + endTime + ".";
                }
                else
                {
                    message = "No issues so far. Running until stopped manually or killed (no test timeout set).";
                }
            }
            else if (modelDuration == "unlimited")
            {
                endTime = DateTime.MaxValue;
                message = "No issues so far. Kill to complete (no test timeout set).";
            }
            else
            {
                endTime = DateTime.Now + TimeSpan.Parse(modelDuration);
                message = "No issues so far. Running until " + endTime + ".";
            }
        }

        private static Dictionary<ModelAction, int> DetermineActionWeightsForCurrentState()
        {
            Dictionary<ModelAction, int> weights = new Dictionary<ModelAction, int>();
            switch (NGGamePlayerActions.CurrentModelState)
            {
                case ModelState.Undetermined:
                    weights.Add(ModelAction.StartGame, 1);
                    break;
                case ModelState.GameLoading:
                case ModelState.IntermissionAd:
                case ModelState.GameOver:
                    Assert.Fail("NGGamePlayerActions.CurrentModelState engine in state not supported between actions:" + NGGamePlayerActions.CurrentModelState);
                    break;
                case ModelState.GameRunning:
                case ModelState.BadgeAlbum:
                    weights.Add(ModelAction.StartGame, 1);
                    weights.Add(ModelAction.PlayAgain, 15);
                    break;
            }
            return weights;
        }

        private static void PerformAction(Dictionary<ModelAction, int> weights, int chance)
        {
            int subTotal = 0;
            foreach (var pair in weights)
            {
                subTotal += pair.Value;
                if (chance < subTotal)
                {
                    Logging.Log(string.Format("[{0}] - performing action", pair.Key));
                    lastAction = pair.Key.ToString();
                    switch (pair.Key)
                    {
                        case ModelAction.StartGame:
                            KafProxy.CloseBrowsers();
                            NGGamePlayerActions.StartGame("flowerzrush");
                            break;
                    }
                    break;
                }
            }
        }

    }

    public class GamePlayerTestException : ApplicationException
    {
        public GamePlayerTestException(string message, Exception innerException)
            : base("Game player test failed.<br/>\r\n<b><u>Details:</u></b><br/>\r\n" + GetMoreDetails(innerException) + "<br/>\r\n" + message + "<br/>\r\n<b>Exception that caused the test failure:</b><br/>\r\n", innerException)
        {
        }

        public override string ToString()
        {
            return base.ToString() + "\r\n" + InnerException.ToString();
        }

        private static string GetMoreDetails(Exception innerException)
        {
            if (innerException != null && innerException.Message.Contains("State mismatch"))
            {
                return "Current State != Expected State:<br/>\r\n" + StateManager.Expected.State.GetEqualityErrors();
            }
            else if (innerException != null && 
                (innerException.Message.Contains("Class Initialization method NGGamePlayer.Test.Tests.NGGamePlayerTests.MyClassInitialize threw exception. System.Management.ManagementException: System.Management.ManagementException: Provider load failure")
                || innerException.Message.Contains("Class Initialization method NGGamePlayer.Test.Tests.NGGamePlayerTests.MyClassInitialize threw exception. System.Management.ManagementException: System.Management.ManagementException: Out of memory ")
                || innerException.Message.Contains("Class Initialization method NGGamePlayer.Test.Tests.NGGamePlayerTests.MyClassInitialize threw exception. System.Runtime.InteropServices.COMException:  System.Runtime.InteropServices.COMException")
                || innerException.Message.Contains("Class Initialization method NGGamePlayer.Test.Tests.NGGamePlayerTests.MyClassInitialize threw exception. System.Management.ManagementException: System.Management.ManagementException: Generic failure")
                || innerException.Message.Contains("Class Initialization method NGGamePlayer.Test.Tests.NGGamePlayerTests.MyClassInitialize threw exception. System.Management.ManagementException: System.Management.ManagementException: Unexpected error ")
                || innerException.Message.Contains("Class Initialization method NGGamePlayer.Test.Tests.NGGamePlayerTests.MyClassInitialize threw exception. System.Runtime.InteropServices.COMException: System.Runtime.InteropServices.COMException: The RPC server is unavailable. (Exception from HRESULT: 0x800706BA).")))
            {
                return "Possibly known test infrastructure issue (WMI). Occurs when UI automation monitoring machine is low on resources. Please check the game page to see if it loads (click the server name).";
            }
            else if (innerException != null && innerException.Message.Contains("Class Initialization method NGGamePlayer.Test.Tests.NGGamePlayerTests.MyClassInitialize threw exception"))
            {
                return "Exceptions in class initialization usually indicate test infrastructure issues. Please check the game page to see if it loads (click the server name).";
            }
            else if (innerException != null && innerException.Message.Contains("Class Initialization method NGGamePlayer.Test.Tests.NGGamePlayerTests.MyClassInitialize threw exception. System.OutOfMemoryException: System.OutOfMemoryException: "))
            {
                return "Exceptions in class initialization usually indicate test infrastructure issues. Please check the game page to see if it loads (click the server name).";
            }
            else
            {
                return "";
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\NGGamePlayer.Test\NGGamePlayer.Test\Objects\NGGamePlayerObject.cs ===
﻿using System;
using System.Configuration;
using System.Threading;
using Microsoft.KAF.Factory;
using Microsoft.KAF.UIElements;
using NGGamePlayer.Test.States;
using NGGamePlayer.Test.Utilities;
using Wgx.Test.Web.AutomationFramework;
using Wgx.Test.Web.AutomationFramework.Objects;

namespace NGGamePlayer.Test.Objects
{
    public class NGGamePlayerObject : BrowserAgent.WebPageAgent, IPhysicalObjectModel
    {
        #region Data Members
        private string gameName;

        //Header chrome
        private HtmlLink homeLink;
        private HtmlLink signInLink; //Sign out/Sign in
        //Main UI
        private HtmlContainer gameInformation;
        private HtmlContainer gameFrame;
        private HtmlContainer gameOverFrame;
        private HtmlContainer gameAdFrame;
        private HtmlContainer objectSocialInfo;
        private HtmlContainer objectMyGameInfo;
        private HtmlContainer apiContainer;
        private HtmlTextBox sessionReadyArea;
        private HtmlTextBox scoreSubmitArea;
        private HtmlContainer divBadgeAlbum;
        private HtmlContainer divAdBor; //overlay ad
        //Banner ad
        private HtmlContainer divDynamicBannerContent;
        private HtmlButton btnFlashBVT;
        public NGGamePlayerState CurrentState;
        public bool WasPreLoadAdDisplayed { get; set; }
        private string TestServer = ConfigurationManager.AppSettings["TestServer"];
        private string LiveWebUrl = ConfigurationManager.AppSettings["LiveWebUrl"];

        #endregion Data Memebers

        /// <summary>
        /// Initializes a new instance of the <see cref="NGGamePlayerObject"/> class.
        /// </summary>
        public NGGamePlayerObject()
        {
            Initialize();
        }

        /// <summary>
        /// Initializes this instance.
        /// Closes all browsers.
        /// Initializes proxy objects that contain references to UI elements.
        /// </summary>
        public void Initialize()
        {
            Logging.Log("NGGamePlayerObject - Initializing");

            CurrentState = new NGGamePlayerState();
            homeLink = UIElementFactory.GetUIElement<HtmlLink>("id", "lnkHdrHome");
            signInLink = UIElementFactory.GetUIElement<HtmlLink>("id", "lnkHdrSignIn");

            gameInformation = UIElementFactory.GetUIElement<HtmlContainer>("div", "id", "GameInformation"); //this div holds a table with two cells: one with GameFrame/GameOverFrame/GameAdFrame and another one with div:div_SocialInfo
            gameFrame = UIElementFactory.GetUIElement<HtmlContainer>("iframe", "id", "GameFrame");
            //gameFrame.WaitTime = 1000;
            //gameFrame.MaxRetriesAllowed = 20;
            gameOverFrame = UIElementFactory.GetUIElement<HtmlContainer>("iframe", "id", "GameOverFrame");

            gameAdFrame = UIElementFactory.GetUIElement<HtmlContainer>("iframe", "id", "GameAdFrame");
            divAdBor = UIElementFactory.GetUIElement<HtmlContainer>("div", "class", "BigTV2_adbor");

            objectSocialInfo = UIElementFactory.GetUIElement<HtmlContainer>("object", "id", "obj_SocialInfo");
            objectMyGameInfo = UIElementFactory.GetUIElement<HtmlContainer>("object", "id", "obj_MyGameInfo");
            divBadgeAlbum = UIElementFactory.GetUIElement<HtmlContainer>("div", "id", "div_BadgeAlbum");
            apiContainer = UIElementFactory.GetUIElement<HtmlContainer>("div", "id", "APIContainer");
            sessionReadyArea = UIElementFactory.GetUIElement<HtmlTextBox>("textarea", "id", "Session_Ready_area");
            scoreSubmitArea = UIElementFactory.GetUIElement<HtmlTextBox>("textarea", "id", "Score_Submit_area");
            btnFlashBVT = UIElementFactory.GetUIElement<HtmlButton>("input", "id", "btnFlashBVT");   
            divDynamicBannerContent = UIElementFactory.GetUIElement<HtmlContainer>("div", "id", "DynamicBannerContent");
        }

        private string parseInnerHtml(HtmlContainer source, string startString, string endString)
        {
            string result = source.Properties.InnerHTML;
            int startIndex = result.IndexOf(startString) + startString.Length + 1;
            int length = result.IndexOf(endString, startIndex) - startIndex;
            result = result.Substring(startIndex, length);
            return result;
        }

        /// <summary>
        /// Makes sure the current location is valid. This will simply sleep for a max of 120 seconds, if it
        /// detects that the page is still the blank page.
        /// </summary>
        public override void ValidateLocation()
        {
            int count = 120;
            string title = KafProxy.GetTitle();
            while (!title.Equals("XBOX LIVE - Enjoy this free game!") && (count > 0))
            {
                //Console.WriteLine("Page not fully loaded ... sleeping");
                Thread.Sleep(1000);
                title = KafProxy.GetTitle();
                count--;
            }
            if (count == 0)
            {
                string msg = "Timed out waiting for page to load after 120s. Page title: " + title;
                Logging.Log(msg);
                throw new TimeoutException(msg);
            }
        }

        /// <summary>
        /// Waits until the game ad frame disappears or it times out.
        /// </summary>
        public void WaitForAdToGoAway()
        {
            int count = 0;
            //wait for ad to show up
            while (!gameAdFrame.IsVisible(true, false) && count < 120)
            {
                // Adding an infinite loop fail-safe
                count++;
                Logging.Log("Video ad not showing up when expected. Waiting - iteration " + count);
            }
            bool ba = gameAdFrame.IsVisible(true, false);
            bool bb = divAdBor.IsVisible(true, false);
            if (ba && bb)
            {
                string actualInnerHtml = divAdBor.GetAttribute("innerHtml");
                string script1src = "http://ads1.msn.com/library/dap.js";
                string script2 = @"<SCRIPT type=text/javascript>
                            var g_PG = 'GAMHP3';
                            strGameSuperBannerTV1_Parm = '&PG=' + g_PG + '&AP=1390';
                            if (typeof (g_GamesID) != 'undefined') {
                                {
                                    strGameSuperBannerTV1_Parm += '&ID=' + g_GamesID;
                                }
                            }

                            // TODO: Investigate if we should use the new dapMgr.renderAd() functionality
                            dap(strGameSuperBannerTV1_Parm, 300, 250);
                        </SCRIPT>".Replace('~', '"');
                Logging.Log("Actual: " + actualInnerHtml);
                Logging.Log("Expected part 1: " + script1src);
                Logging.Log("Expected part 2: " + script2);
                if (actualInnerHtml != null &&
                    actualInnerHtml.IndexOf(script1src, StringComparison.CurrentCultureIgnoreCase) > 0 &&
                    actualInnerHtml.IndexOf(script2, StringComparison.CurrentCultureIgnoreCase) > 0)
                {
                    WasPreLoadAdDisplayed = true;
                }
                else
                {
                    Logging.Log("Video ad html code did not contain expected scripts:\r\n" + actualInnerHtml);
                }
            }
            count = 0;
            while (gameAdFrame.IsVisible(true, false) && count < 2000)
            {
                // Adding an infinite loop fail-safe
                count++;
            }
            if (count == 2000)
            {
                Console.WriteLine("We spun too much waiting for the Ad to finish. Something's wrong");
            }
        }

        /// <summary>
        /// Starts the game in a new browser window.
        /// </summary>
        /// <param name="gameName">Name of the game.</param>
        public void StartGame(string gameName)
        {
            StartGame(gameName, true);
        }

        /// <summary>
        /// Starts the game.
        /// </summary>
        /// <param name="gameName">Name of the game.</param>
        /// <param name="newWebBrowser">Whether or not KAF should open a new browser window</param>
        public void StartGame(string gameName, bool newWebBrowser)
        {
            this.gameName = gameName;
            Url = GetGamePageUrl(LiveWebUrl, gameName);
            Navigate(newWebBrowser);
        }

        /// <summary>
        /// Bypass the game's menu options to launch game play
        /// </summary>
        public void PlayGameAndWaitForGameOver()
        {
            //Click on the htmlbutton to by-pass the game menus.
            btnFlashBVT.Click();
            //Now wait for the game to finish running without user input. Basically, wait for the game to reach Game Over state.
            //For all current games in our portfolio, we know this will take at minimum 22 seconds
            Thread.Sleep(22000);
            //Followed by a While Loop to wait for Score Submit info to appear.
            //If the Score Submit info doesn't appear within 2 more minutes, fail the test, as something is wrong.
            int count = 120;
            string apiContents = apiContainer.Properties.InnerText;
            Logging.Log("API Debug Container's current output: " + apiContents);
            while (!apiContents.Contains("<gameVariant>0</gameVariant>") && (count > 0))
            {
                //Console.WriteLine("Game is not finished yet... sleeping");
                Thread.Sleep(1000);
                apiContents = apiContainer.Properties.InnerText; //check to see if the string has changed yet
                count--;
            }
            if (count == 0)
            {
                string msg = "Timed out waiting for game to finish after 120s. API Container contents: " + apiContents;
                Logging.Log(msg);
                throw new TimeoutException(msg);
            }
        }

        /// <summary>
        /// Gets the game page URL.
        /// In case of changes - need to update a copy of this method in RunTests/Program.cs
        /// </summary>
        /// <param name="liveWebUrl">URL of the LiveWeb site.</param>
        /// <param name="gameName">Name of the game.</param>
        /// <returns></returns>
        public static string GetGamePageUrl(string liveWebUrl, string gameName)
        {
            return string.Format("{0}/Game/{1}", liveWebUrl, gameName);
        }

        public void ClickSignInOut()
        {
            signInLink.UseCoordinateClick = false;
            signInLink.Click();
        }

        /// <summary>
        /// Quits the game.
        /// </summary>
        public void QuitGame()
        {
            throw new NotImplementedException("Since the quit link was removed the only way to get to quit the game is to automate the game, which is not working well with KAF. Current plan is to either make it work or use javascript to call its functions.");
        }

        /// <summary>
        /// Clicks on "Play Again" link to start the game again.
        /// </summary>
        public void PlayAgain()
        {
            while (!gameOverFrame.IsVisible(true, false))
            {
                //do nothing, KAF handles the timing.
            }
            HtmlLink playAgainLink = UIElementFactory.GetUIElement<HtmlLink>("a", "id", "PlayAgainLink");
            playAgainLink.UseCoordinateClick = false;
            playAgainLink.Click();
        }

        #region IPhysicalObjectModel Members
        /// <summary>
        /// Determines the state of the game player.
        /// </summary>
        /// <returns></returns>
        public State DetermineState()
        {
            string scoreSubmitAreaContent;
            scoreSubmitAreaContent = scoreSubmitArea.Properties.InnerText;

            Logging.Log("Sign in: " + signInLink.Properties.InnerText);
            //TraceTimer t = new TraceTimer();
            //CurrentState.ClearComparisonPropertyList();
            CurrentState.IsHeaderChromeVisible = homeLink.IsVisible(true, false) && signInLink.IsVisible(true, false);
            CurrentState.IsSignedIn = signInLink.Properties.InnerText.Contains("Sign out");
            CurrentState.Title = KafProxy.GetTitle();
            CurrentState.IsPreLoadAdDisplayed = gameAdFrame.IsVisible(true, false);
            CurrentState.IsBannerAdDisplayed = CheckIfBannerAdIsDisplayed();
            CurrentState.IsGameRunning = gameFrame.IsVisible(true, false);
            CurrentState.IsSidebarLeaderboardDisplayed = objectSocialInfo.IsVisible(true, false);
            CurrentState.IsSidebarBadgeAlbumDisplayed = objectMyGameInfo.IsVisible(true, false);
            CurrentState.IsRewardsPageDisplayed = gameOverFrame.IsVisible(true, false);
            CurrentState.WasPreLoadAdDisplayed = WasPreLoadAdDisplayed;
            CurrentState.ScoreSubmitHappened = scoreSubmitAreaContent.Contains("<gameVariant>0</gameVariant>");
            return CurrentState;
        }

        public void ResetStatetoCurrent()
        {
            throw new NotImplementedException();
        }
        #endregion

        /// <summary>
        /// Checks if banner ad is displayed.
        /// </summary>
        /// <returns></returns>
        private bool CheckIfBannerAdIsDisplayed()
        {
            if(divDynamicBannerContent.IsVisible(true, false))
            {
                string actualInnerHtml = divDynamicBannerContent.GetAttribute("innerHtml");
                string script1src = "http://ads1.msn.com/library/dap.js";
                string script2 = @"<SCRIPT type=text/javascript>
                    var g_PG = 'GAMBD3';
                    strGameSuperBannerTV1_Parm = '&PG=' + g_PG + '&AP=1390';
                    if (typeof (g_GamesID) != 'undefined') {
                        if (g_GamesID != '') {
                            strGameSuperBannerTV1_Parm += '&ID=' + g_GamesID;
                        }
                    }

                    // Core function that creates the HTML code to display the ad
                    // TODO: Investigate if we should use the new dapMgr.renderAd() functionality
                    dap(strGameSuperBannerTV1_Parm, 728, 90);
                </SCRIPT>".Replace('~', '"');

                Logging.Log("Actual: " + actualInnerHtml);
                Logging.Log("Expected part 1: " + script1src);
                Logging.Log("Expected part 2: " + script2);
                if (actualInnerHtml != null &&
                    actualInnerHtml.IndexOf(script1src, StringComparison.CurrentCultureIgnoreCase) > 0 &&
                    actualInnerHtml.IndexOf(script2, StringComparison.CurrentCultureIgnoreCase) > 0)
                {
                    return true;
                }
                else
                {
                    Logging.Log("Banner ad html code did not contain expected scripts:\r\n" + actualInnerHtml);
                }
            }
            return false;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\NGGamePlayer.Test\NGGamePlayer.Test\Utilities\AutomationRobustness.cs ===
﻿using System;
using System.Configuration;
using System.Diagnostics;
using System.IO;
using System.Management;
using NGGamePlayer.Test.Objects;
using NGGamePlayer.Test.Tests;
using System.Threading;

namespace NGGamePlayer.Test.Utilities
{
    internal class AutomationRobustness
    {
        private NGGamePlayerObject gamePlayer;

        public void EnsureRobustness(NGGamePlayerObject gamePlayer)
        {
            this.gamePlayer = gamePlayer;
            Logging.Log("Checking if UI automation works");
            try
            {
                string res = Logging.TakeScreenshot("CheckUIAutomation");
                if (res == "Could not take a screenshot after the test failed. Possibly due to no active session for the test client machine - this would also block UI automation, so it would mean a test infrastructure failure rather than a product issue.")
                {
                    EnableUIAutomation();
                    return;
                }
                Logging.Log("UI automation works fine");
            }
            catch (Maui.Core.Window.Exceptions.WindowNotFoundException)
            {
                EnableUIAutomation();
            }
            catch (Maui.Core.Window.Exceptions.CannotSetForegroundException)
            {
                EnableUIAutomation();
            }
        }

        private void EnableUIAutomation()
        {
            string monitor = ConfigurationManager.AppSettings["Monitor"];
            string monitorUser = ConfigurationManager.AppSettings["MonitorUser"];
            string monitorPass = ConfigurationManager.AppSettings["MonitorPass"];
            string autoMSTSCPath = ConfigurationManager.AppSettings["AutoMSTSCPath"];
            Logging.Log("UI automation does not work - starting a hacky procedure to enable UI automation.");

            string randomizedAutoMSTSCPath =
                Path.Combine(
                    Path.GetDirectoryName(autoMSTSCPath),
                    Path.GetFileNameWithoutExtension(autoMSTSCPath) + DateTime.Now.ToString("HHmmssffffff") + ".exe");
            Logging.Log("Trying to copy " + autoMSTSCPath + " to " + randomizedAutoMSTSCPath);
            File.Copy(autoMSTSCPath, randomizedAutoMSTSCPath);
            Process rdcProcess = new Process();
            rdcProcess.StartInfo.UseShellExecute = false;
            rdcProcess.StartInfo.FileName = "psexec.exe";
            rdcProcess.StartInfo.Arguments =
                string.Format(@"\\{0} -d -u {1} -p {2} /accepteula -i {3} -c {5} {4} {1} {2}",
                    monitor, monitorUser, monitorPass, GetConsoleSessionId(monitor, monitorUser), Environment.MachineName, randomizedAutoMSTSCPath);
            rdcProcess.StartInfo.RedirectStandardOutput = true;
            rdcProcess.StartInfo.RedirectStandardError = true;
            rdcProcess.OutputDataReceived += new DataReceivedEventHandler(PSExecOutputDataReceived);
            rdcProcess.ErrorDataReceived += new DataReceivedEventHandler(PSExecOutputDataReceived);
            Logging.Log(string.Format("Using psexec.exe to run {0} on TestClientsMonitor machine: {1}", randomizedAutoMSTSCPath, monitor));
            Logging.Log(string.Format("{0}>{1} {2}", Environment.CurrentDirectory, rdcProcess.StartInfo.FileName, rdcProcess.StartInfo.Arguments));
            rdcProcess.Start();
            rdcProcess.BeginOutputReadLine();
            rdcProcess.BeginErrorReadLine();

            DateTime startTrying = DateTime.Now;
            DateTime endTrying = startTrying + new TimeSpan(0, 2, 0);
            do
            {
                try
                {
                    string res = Logging.TakeScreenshot("CheckUIAutomation");
                    if (res == "Could not take a screenshot after the test failed. Possibly due to no active session for the test client machine - this would also block UI automation, so it would mean a test infrastructure failure rather than a product issue.")
                    {
                        Logging.Log("UI automation still does not work - will keep trying up to around 2 minutes (+ ~KAF timeouts?).");
                        Thread.Sleep(5000);
                        continue;
                    }
                    Logging.Log("UI automation works fine now");
                    break;
                }
                catch (Maui.Core.Window.Exceptions.CannotSetForegroundException)
                {
                    Logging.Log("UI automation still does not work - will keep trying up to around 2 minutes (+ ~KAF timeouts?).");
                    Thread.Sleep(5000);
                }
                catch (Maui.Core.Window.Exceptions.WindowNotFoundException)
                {
                    Logging.Log("UI automation still does not work - will keep trying up to around 2 minutes (+ ~KAF timeouts?).");
                    Thread.Sleep(5000);
                }
            } while (DateTime.Now < endTrying);
        }

        void PSExecOutputDataReceived(object sender, DataReceivedEventArgs e)
        {
            if (e.Data != null)
            {
                Logging.Log(e.Data);
            }
        }

        static string GetConsoleSessionId(string server, string user)
        {
            string scope = string.Format(@"\\{0}\root\CIMV2", server);
            string[] split = user.Split('\\');
            string domain = split[0];
            string username = split[1];
            ManagementObjectSearcher searcher =
                new ManagementObjectSearcher(
                    scope,
                    "SELECT * FROM Win32_Process WHERE SessionId <> 0 AND Caption = 'explorer.exe'");
            ManagementObjectCollection queryCollection = searcher.Get();
            foreach (ManagementObject m in queryCollection)
            {
                string[] uid = new string[2];
                UInt32 ret = (UInt32)m.InvokeMethod("GetOwner", uid);
                if (ret == 0 &&
                    uid[1].Equals(domain, StringComparison.InvariantCultureIgnoreCase) &&
                    uid[0].Equals(username, StringComparison.InvariantCultureIgnoreCase))
                {
                    return m["SessionId"].ToString();
                }
            }
            return null;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\NGGamePlayer.Test\NGGamePlayer.Test\Utilities\Logging.cs ===
﻿using System;
using System.Diagnostics;
using System.IO;
using System.Windows.Forms;
using System.Drawing;
using System.Drawing.Imaging;
using System.Configuration;

namespace NGGamePlayer.Test.Utilities
{
    internal static class Logging
    {
        private static string logDir = ConfigurationManager.AppSettings["LogDirectory"];
        private static string commonResultsLocation = ConfigurationManager.AppSettings["CommonResultsLocation"];
        private static string computerName = Environment.GetEnvironmentVariable("COMPUTERNAME");

        internal static void Log(string msg)
        {
            try
            {
                string timeStampedMsg = DateTime.Now.ToString("HH:mm:ss - ") + msg;
                string logFilePath = Path.Combine(logDir, "testslog.txt");
                Console.WriteLine(timeStampedMsg);
                Trace.WriteLine(timeStampedMsg);
                File.AppendAllText(logFilePath, timeStampedMsg);
            }
            catch
            {
                //this might be called on a non-UI thread
                //any exception will stall the test forever waiting for JIT debugger attach
            }
        }
        /// <summary>
        /// Takes the screenshot returning the path or fails silently returning empty string.
        /// </summary>
        /// <param name="name">The html log string with the path to the screenshot</param>
        /// <returns></returns>
        internal static string TakeScreenshot(string name)
        {
            try
            {
                string fileName = DateTime.Now.ToString("yyyyMMdd_HHmmssfff_") + computerName + "_" + name + ".png";
                string filePath = Path.Combine(logDir, fileName);
                if (filePath[0] != '\\' && filePath[1] != ':')
                {
                    filePath = Path.Combine(Environment.CurrentDirectory, filePath);
                }
                string dir = Path.GetDirectoryName(filePath);
                if (!Directory.Exists(dir))
                {
                    Directory.CreateDirectory(dir);
                }
                Bitmap bitmap = new Bitmap(Screen.PrimaryScreen.Bounds.Width, Screen.PrimaryScreen.Bounds.Height);
                Graphics graphics = Graphics.FromImage(bitmap as Image);
                graphics.CopyFromScreen(0, 0, 0, 0, bitmap.Size);
                graphics.Dispose();
                bitmap.Save(filePath, ImageFormat.Png);
                Logging.Log("Screenshot:<br/>\r\n" + Path.Combine(commonResultsLocation, fileName));
                return "Screenshot:<br/>\r\n<a href=\"file://" + Path.Combine(commonResultsLocation, fileName) + "\">" + Path.Combine(commonResultsLocation, fileName) + "</a>";
            }
            catch
            {
                return "Could not take a screenshot after the test failed. Possibly due to no active session for the test client machine - this would also block UI automation, so it would mean a test infrastructure failure rather than a product issue.";
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\NGGamePlayer.Test\NGGamePlayer.Test\Utilities\KafProxy.cs ===
﻿using System.Threading;
using Microsoft.KAF.Agent.Browser;
using Microsoft.KAF.UIDriver;
using NGGamePlayer.Test.States;

namespace NGGamePlayer.Test.Utilities
{
    internal static class KafProxy
    {
        public static void CloseBrowsers()
        {
            Logging.Log("Closing browsers - start");
            BrowserAgentFactory.BrowserAgent.CloseBrowsers();
            NGGamePlayerStateGenerator.Initialize();
            Logging.Log("Closing browsers - end");
            Thread.Sleep(2000);
        }

        private static string lastTitle = "";

        public static void CleanupDrivers()
        {
            Logging.Log("CleanupDrivers");
            lastTitle = GetTitle();
            DriverFactory.CleanupDrivers();
            Logging.Log("CleanupDrivers - done");
        }

        public static string GetTitle()
        {
            Logging.Log("Getting title - start");
            string ret = BrowserAgentFactory.BrowserAgent.GetTitle();
            Logging.Log("Getting title - end: " + ret);
            return ret;
        }

        public static void ReAttach()
        {
            BrowserAgentFactory.BrowserAgent.AttachTo(lastTitle);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\NGGamePlayer.Test\OctopusCfg\Program.cs ===
﻿using System;
using System.IO;
using System.Xml;
using System.Diagnostics;

namespace OctopusCfg
{
    class Program
    {
        private static string password;
        static int Main(string[] args)
        {
            if (args.Length != 6)
            {
                Console.WriteLine(
@"Usage: OctopusCfg.exe config_file_path controller server drop_share logs_dir password
Eg: OctopusCfg.exe deploy.xml %COMPUTERNAME% LiveGamePlayer \\edge-svcs\release\LEET\MAIN\Latest.tst\amd64chk\Bin\deploy %CD%");
                return 1;
            }
            try
            {
                string configFile = args[0];
                string controller = args[1];
                string server = args[2];
                string dropShare = args[3];
                string logsDir = args[4];
                password = args[5];

                string file = File.ReadAllText(configFile);
                file = file.Replace("#ServerName#", server);
                File.WriteAllText(configFile, file);

                XmlDocument doc = new XmlDocument();
                doc.Load(configFile);
                doc.DocumentElement.SetAttribute("deploymentShareLocation", dropShare);
                doc.DocumentElement.SetAttribute("logsLocation", logsDir);
                doc.DocumentElement.SetAttribute("controllerMachine", controller);
                doc.Save(configFile);
                //RunOctopus();
            }
            catch(Exception ex)
            {
                Console.WriteLine(ex.ToString());
                return 2;
            }
            return 0;
        }

        private static void RunOctopus()
        {
            throw new NotImplementedException("a-filips, 9/25/2009: Started working on deployment reporting and proper reporting of build and version for test runs (by saving deployment info to server specific config info file).");
            //string logFile = "OctopusRunLog.txt";
            //File.AppendAllText(logFile, "Uninstalling with octopus\r\n");
            //Process octProc = new Process();
            //ProcessStartInfo i = new ProcessStartInfo();
            //i.FileName = "OctopusCLI.exe";
            //i.Arguments = string.Format("-config deploy.xml -uninstall -OnPendingRebootOperation Ignore -adminPassword \"{0}\"", password);
            //i.RedirectStandardOutput = true;
            //i.CreateNoWindow = true;
            //i.UseShellExecute = false;
            //octProc.StartInfo = i;
            //File.AppendAllText(logFile, i.FileName + " " + i.Arguments + Environment.NewLine);
            //octProc.Start();
            //octProc.WaitForExit();
            //int uninstallResult = octProc.ExitCode;
            //string octopusOutput = Console.In.ReadToEnd();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\NGGamePlayer.Test\NGGamePlayer.Test\Tests\SilverlightUnitTests.cs ===
﻿// <copyright file="SilverlightUnitTests.cs" company="Microsoft">Copyright (c) 2010 All Right Reserved
// </copyright>
// <author>Filip Skakun</author>
// <email>filip.skakun@gmail.com</email>
// <date>2010-02-18</date>
// <summary>Contains the class definition for SilverlightUnitTests class.</summary>

namespace NGGamePlayer.Test.Tests
{
    using System;
    using System.Collections.Generic;
    using System.Configuration;
    using System.Text;
    using System.Xml;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using NGGamePlayer.Test.Actions;
    using NGGamePlayer.Test.Utilities;
    using NGGamePlayer.Test.Objects;

    /// <summary>
    /// This is a Visual Studio Unit test class that runs KAF automation to sign in and run Silverlight Unit Tests
    /// on pages like http://games.dev.xbox.com/TestTools/SilverlightProxyTest?TestClass=TestRewardsProxyClient.
    /// It then uses KAF automation to extract the XML version of the results and in case of failures - throw
    /// an exception with HTML report in the message property.
    /// </summary>
    [TestClass]
    public class SilverlightUnitTests
    {
        private static string logDir;
        private static string computerName;
        private static string commonResultsLocation;
        private static SilverlightTestsPage testPage;
        private static string resultsString;
        private static string resultsReport;

        //Credentials for test users.
        //Currently user1 is used for running the tests
        //while user2 is used for initializing the prerequisites that require two users.
        private static string user1;
        private static string pass1;
        private static string user2;
        private static string pass2;

        [ClassInitialize()]
        public static void InitializeTestSuite(TestContext testContext)
        {
            try
            {
                Logging.Log("InitializeTestSuite");
                logDir = ConfigurationManager.AppSettings["LogDirectory"];
                commonResultsLocation = ConfigurationManager.AppSettings["CommonResultsLocation"];
                computerName = Environment.GetEnvironmentVariable("COMPUTERNAME");
                user1 = ConfigurationManager.AppSettings["User1"];
                pass1 = ConfigurationManager.AppSettings["Pass1"];
                user2 = ConfigurationManager.AppSettings["User2"];
                pass2 = ConfigurationManager.AppSettings["Pass2"];
                NGGamePlayerActions.Initialize();
                MobileHomePageActions.Initialize();
            }
            catch (Exception ex)
            {
                throw new GamePlayerTestException(Logging.TakeScreenshot("InitializeTestSuite"), ex);
            }
            Logging.Log("InitializeTestSuite - done");
        }

        [TestInitialize()]
        public void InitializeTest()
        {
            Logging.Log("InitializeTest");
            KafProxy.CloseBrowsers();
            Logging.Log("InitializeTest - done");
        }

        [TestCleanup()]
        public void CleanupTest()
        {
            Logging.Log("CleanupTest");
            KafProxy.CloseBrowsers();
            KafProxy.CleanupDrivers();
            Logging.Log("CleanupTest - done");
        }

        [TestMethod]
        public void RunAllSilverlightTests()
        {
            RunSilverlightUnitTest("RunAllSilverlightTests", "all", null);
        }

        [TestMethod]
        public void RunAllSilverlightProxyTests()
        {
            RunSilverlightUnitTest("RunAllSilverlightProxyTests", "TestGameSessionProxyClient,TestNotificationProxyClient,TestProfileProxyClient,TestRewardsProxyClient,TestWebAuthProxyClient", "BVT");
        }

        [TestMethod]
        public void TestGameSessionProxyClient()
        {
            RunSilverlightUnitTest("TestGameSessionProxyClient");
        }

        [TestMethod]
        public void TestNotificationProxyClient()
        {
            RunSilverlightUnitTest("TestNotificationProxyClient");
        }

        [TestMethod]
        public void TestProfileProxyClient()
        {
            RunSilverlightUnitTest("TestProfileProxyClient");
        }

        [TestMethod]
        public void TestRewardsProxyClient()
        {
            RunSilverlightUnitTest("TestRewardsProxyClient");
        }

        [TestMethod]
        public void TestWebAuthProxyClient()
        {
            RunSilverlightUnitTest("TestWebAuthProxyClient");
        }

        [TestMethod]
        public void TicTacToeIntegratedTests()
        {
            RunSilverlightUnitTest("TicTacToeIntegratedTests");
        }

        [TestMethod]
        public void TicTacToeTests()
        {
            RunSilverlightUnitTest("TicTacToeTests");
        }

        [TestMethod]
        public void FriendPickerIntegratedTests()
        {
            RunSilverlightUnitTest("FriendPickerIntegratedTests");
        }

        [TestMethod]
        public void FriendPickerMockedTests()
        {
            RunSilverlightUnitTest("FriendPickerMockedTests");
        }

        private void RunSilverlightUnitTest(string testName)
        {
            RunSilverlightUnitTest(testName, null, null);
        }

        private void RunSilverlightUnitTest(string testName, string testClasses, string tag)
        {
            Logging.Log(testName);
            if (testClasses == null)
            {
                testClasses = testName;
            }
            try
            {
                RunSilverlightUnitTestsClass(testClasses, tag);
                bool passed = ParseResults(testClasses);
                if (!passed)
                {
                    throw new SilverlightTestFailedException(resultsReport, null);
                }
                Logging.Log(testClasses + " - done");
            }
            catch (Exception ex)
            {
                Logging.Log(testClasses + " - caught an exception");
                throw new GamePlayerTestException(Logging.TakeScreenshot(testClasses), ex);
            }
        }

        private static void RunSilverlightUnitTestsClass(string testClasses, string tag)
        {
            testPage = new SilverlightTestsPage();
            testPage.Display(true, testClasses, tag);
            testPage.ValidateLocation();
            testPage.ClickSignInOut();
            
            SignInPage signIn = new SignInPage();
            signIn.Initialize();
            signIn.ValidateLocation();
            signIn.SignIn(user1, pass1);

            testPage.ValidateLocation();
            testPage.WaitForTestsToFinish();
            resultsString = testPage.GetResultsString();
        }

         internal bool ParseResults()
        {
            return ParseResults(null);
        }

        /// <summary>
        /// Parses the results from an xml string and produces an html string with a table of results and a summary.
        /// If testClassFilter is not null - it only extracts the results for the given class
        /// </summary>
        /// <param name="testClassFilter">The test class filter.</param>
        /// <returns></returns>
        internal bool ParseResults(string testClassFilter)
        {
            XmlDocument doc = new XmlDocument();
            Logging.Log("Silverlight tests log xml: \r\n" + resultsString);
            doc.LoadXml(resultsString);
            //doc.LoadXml("<TestResults>  <TestResult Class=\"TestGameSessionProxyClient\" Method=\"TestCreateSession\" Started=\"2/9/2010 12:26:29 PM\" Finished=\"2/9/2010 12:26:30 PM\" Result=\"passed\" />  <TestResult Class=\"TestGameSessionProxyClient\" Method=\"TestGetGameState\" Started=\"2/9/2010 12:26:33 PM\" Finished=\"2/9/2010 12:26:36 PM\" Result=\"passed\" />  <TestResult Class=\"TestGameSessionProxyClient\" Method=\"TestJoinSession\" Started=\"2/9/2010 12:26:36 PM\" Finished=\"2/9/2010 12:26:36 PM\" Result=\"Ignored\" />  <TestResult Class=\"TestGameSessionProxyClient\" Method=\"TestLeaveSession\" Started=\"2/9/2010 12:26:36 PM\" Finished=\"2/9/2010 12:26:36 PM\" Result=\"Ignored\" />  <TestResult Class=\"TestGameSessionProxyClient\" Method=\"TestModifySession\" Started=\"2/9/2010 12:26:37 PM\" Finished=\"2/9/2010 12:26:39 PM\" Result=\"passed\" />  <TestResult Class=\"TestGameSessionProxyClient\" Method=\"TestPostGameAction\" Started=\"2/9/2010 12:26:42 PM\" Finished=\"2/9/2010 12:26:43 PM\" Result=\"passed\" />  <TestResult Class=\"TestGameSessionProxyClient\" Method=\"TestPutGameState\" Started=\"2/9/2010 12:26:45 PM\" Finished=\"2/9/2010 12:26:47 PM\" Result=\"passed\" />  <TestResult Class=\"TestGameSessionProxyClient\" Method=\"TestViewSession\" Started=\"2/9/2010 12:26:50 PM\" Finished=\"2/9/2010 12:26:51 PM\" Result=\"passed\" />  <TestResult Class=\"TestGameSessionProxyClient\" Method=\"TestViewSessionSummaries\" Started=\"2/9/2010 12:26:53 PM\" Finished=\"2/9/2010 12:26:58 PM\" Result=\"passed\" />  <TestResult Class=\"TestNotificationProxyClient\" Method=\"TestGetNotification\" Started=\"2/9/2010 12:27:00 PM\" Finished=\"2/9/2010 12:27:00 PM\" Result=\"Failed\">Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException: Assert.IsTrue failed. The async operation completed with an error   at Microsoft.VisualStudio.TestTools.UnitTesting.Assert.HandleFail(String assertionName, String message, Object[] parameters)   at Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(Boolean condition, String message, Object[] parameters)   at Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(Boolean condition, String message)   at Leet.Silverlight.RESTProxy.Test.TestNotificationProxyClient.OnGetNotificationCompleted(Object sender, NotificationProxyEventArgs`1 e)   at Leet.Silverlight.RESTProxy.NotificationProxy.NotificationProxy.FireOnGetNotificationCompleted(Exception exception, Object responseObject)   at Leet.Silverlight.RESTProxy.NotificationProxy.NotificationProxy.HttpClient_OnGetNotificationCompleted(Object sender, HttpClientEventArgs e)   at Leet.Silverlight.RESTProxy.HttpClient.&lt;&gt;c__DisplayClassc.&lt;FireRequestCompleted&gt;b__9(Object obj)</TestResult>  <TestResult Class=\"TestNotificationProxyClient\" Method=\"TestGetNotificationForSpecificGame\" Started=\"2/9/2010 12:27:02 PM\" Finished=\"2/9/2010 12:27:02 PM\" Result=\"Failed\">Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException: Assert.IsTrue failed. The async operation completed with an error   at Microsoft.VisualStudio.TestTools.UnitTesting.Assert.HandleFail(String assertionName, String message, Object[] parameters)   at Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(Boolean condition, String message, Object[] parameters)   at Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(Boolean condition, String message)  at Leet.Silverlight.RESTProxy.Test.TestNotificationProxyClient.OnGetNotificationCompleted(Object sender, NotificationProxyEventArgs`1 e)   at Leet.Silverlight.RESTProxy.NotificationProxy.NotificationProxy.FireOnGetNotificationCompleted(Exception exception, Object responseObject)   at Leet.Silverlight.RESTProxy.NotificationProxy.NotificationProxy.HttpClient_OnGetNotificationCompleted(Object sender, HttpClientEventArgs e)   at Leet.Silverlight.RESTProxy.HttpClient.&lt;&gt;c__DisplayClassc.&lt;FireRequestCompleted&gt;b__9(Object obj)</TestResult>  <TestResult Class=\"TestNotificationProxyClient\" Method=\"TestGetNotificationForSpecificSession\" Started=\"2/9/2010 12:27:04 PM\" Finished=\"2/9/2010 12:27:04 PM\" Result=\"Failed\">Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException: Assert.IsTrue failed. The async operation completed with an error   at Microsoft.VisualStudio.TestTools.UnitTesting.Assert.HandleFail(String assertionName, String message, Object[] parameters)   at Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(Boolean condition, String message, Object[] parameters)   at Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(Boolean condition, String message)   at Leet.Silverlight.RESTProxy.Test.TestNotificationProxyClient.OnGetNotificationCompleted(Object sender, NotificationProxyEventArgs`1 e)   at Leet.Silverlight.RESTProxy.NotificationProxy.NotificationProxy.FireOnGetNotificationCompleted(Exception exception, Object responseObject)   at Leet.Silverlight.RESTProxy.NotificationProxy.NotificationProxy.HttpClient_OnGetNotificationCompleted(Object sender, HttpClientEventArgs e)   at Leet.Silverlight.RESTProxy.HttpClient.&lt;&gt;c__DisplayClassc.&lt;FireRequestCompleted&gt;b__9(Object obj)</TestResult>  <TestResult Class=\"TestNotificationProxyClient\" Method=\"TestPostInvite\" Started=\"2/9/2010 12:27:06 PM\" Finished=\"2/9/2010 12:27:07 PM\" Result=\"Failed\">Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException: Assert.IsTrue failed. The async operation completed with an error   at Microsoft.VisualStudio.TestTools.UnitTesting.Assert.HandleFail(String assertionName, String message, Object[] parameters)   at Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(Boolean condition, String message, Object[] parameters)   at Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(Boolean condition, String message)   at Leet.Silverlight.RESTProxy.Test.TestNotificationProxyClient.OnPostInviteCompleted(Object sender, NotificationProxyEventArgs`1 e)   at Leet.Silverlight.RESTProxy.NotificationProxy.NotificationProxy.FireOnPostInviteCompleted(Exception exception, Object responseObject)   at Leet.Silverlight.RESTProxy.NotificationProxy.NotificationProxy.HttpClient_OnPostInviteCompleted(Object sender, HttpClientEventArgs e)   at Leet.Silverlight.RESTProxy.HttpClient.&lt;&gt;c__DisplayClassc.&lt;FireRequestCompleted&gt;b__9(Object obj)</TestResult>  <TestResult Class=\"TestProfileProxyClient\" Method=\"TestGetProfile\" Started=\"2/9/2010 12:27:08 PM\" Finished=\"2/9/2010 12:27:09 PM\" Result=\"Failed\">Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException: Assert.IsTrue failed. The async operation completed with an error   at Microsoft.VisualStudio.TestTools.UnitTesting.Assert.HandleFail(String assertionName, String message, Object[] parameters)   at Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(Boolean condition, String message, Object[] parameters)   at Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(Boolean condition, String message)   at Leet.Silverlight.RESTProxy.Test.TestProfileProxyClient.OnGetProfileCompleted(Object sender, ProfileProxyEventArgs`1 e)   at Leet.Silverlight.RESTProxy.ProfileProxy.ProfileProxy.FireOnGetProfileCompleted(Exception exception, Object responseObject)   at Leet.Silverlight.RESTProxy.ProfileProxy.ProfileProxy.HttpClient_OnGetProfileCompleted(Object sender, HttpClientEventArgs e)   at Leet.Silverlight.RESTProxy.HttpClient.&lt;&gt;c__DisplayClassc.&lt;FireRequestCompleted&gt;b__9(Object obj)</TestResult>  <TestResult Class=\"TestRewardsProxyClient\" Method=\"TestGetAchievements\" Started=\"2/9/2010 12:27:10 PM\" Finished=\"2/9/2010 12:27:10 PM\" Result=\"Failed\">Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException: Assert.IsTrue failed. The async operation completed with an error   at Microsoft.VisualStudio.TestTools.UnitTesting.Assert.HandleFail(String assertionName, String message, Object[] parameters)   at Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(Boolean condition, String message, Object[] parameters)   at Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(Boolean condition, String message)   at Leet.Silverlight.RESTProxy.Test.TestRewardsProxyClient.RewardsProxyClient_OnGetAchievementsCompleted(Object sender, RewardsProxyEventArgs`1 e)   at Gds.RewardsProxy.FireOnGetAchievementsCompleted(Exception exception, Object responseObject)   at Gds.RewardsProxy.HttpClient_OnGetAchievementsCompleted(Object sender, HttpClientEventArgs e)   at Leet.Silverlight.RESTProxy.HttpClient.&lt;&gt;c__DisplayClassc.&lt;FireRequestCompleted&gt;b__9(Object obj)</TestResult>  <TestResult Class=\"TestRewardsProxyClient\" Method=\"TestGetDataBlob\" Started=\"2/9/2010 12:27:11 PM\" Finished=\"2/9/2010 12:27:11 PM\" Result=\"Ignored\" />  <TestResult Class=\"TestRewardsProxyClient\" Method=\"TestGetLeaderboard\" Started=\"2/9/2010 12:27:12 PM\" Finished=\"2/9/2010 12:27:12 PM\" Result=\"Failed\">Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException: Assert.IsTrue failed. The async operation completed with an error   at Microsoft.VisualStudio.TestTools.UnitTesting.Assert.HandleFail(String assertionName, String message, Object[] parameters)   at Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(Boolean condition, String message, Object[] parameters)   at Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(Boolean condition, String message)   at Leet.Silverlight.RESTProxy.Test.TestRewardsProxyClient.OnGetLeaderboardCompleted(Object sender, RewardsProxyEventArgs`1 e)   at Gds.RewardsProxy.FireOnGetLeaderboardCompleted(Exception exception, Object responseObject)   at Gds.RewardsProxy.HttpClient_OnGetDataContractCompleted(Object sender, HttpClientEventArgs e)   at Leet.Silverlight.RESTProxy.HttpClient.&lt;&gt;c__DisplayClassc.&lt;FireRequestCompleted&gt;b__9(Object obj)</TestResult>  <TestResult Class=\"TestRewardsProxyClient\" Method=\"TestGetLeaderboard_AroundSelf\" Started=\"2/9/2010 12:27:12 PM\" Finished=\"2/9/2010 12:27:12 PM\" Result=\"Ignored\" />  <TestResult Class=\"TestRewardsProxyClient\" Method=\"TestPostGameResult\" Started=\"2/9/2010 12:27:15 PM\" Finished=\"2/9/2010 12:27:16 PM\" Result=\"passed\" />  <TestResult Class=\"TestWebAuthProxyClient\" Method=\"GetPartnerToken\" Started=\"2/9/2010 12:27:16 PM\" Finished=\"2/9/2010 12:27:17 PM\" Result=\"passed\" />  <TestResult Class=\"TestWebAuthProxyClient\" Method=\"GetUserToken\" Started=\"2/9/2010 12:27:18 PM\" Finished=\"2/9/2010 12:27:20 PM\" Result=\"passed\" /></TestResults>");
            bool passed = true;
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("<table>");
            sb.AppendLine("<tr><th>Class</th><th>Method</th><th>Result</th><th>Description</th></tr>");
            int failures = 0;
            int total = 0;
            List<string> testClassesToCheck = testClassFilter == null ? null : new List<string>(testClassFilter.Split(','));

            foreach (var elemNode in doc.DocumentElement.ChildNodes)
            {
                XmlElement elem = elemNode as XmlElement;
                if (elem != null)
                {
                    string testClass = elem.GetAttribute("Class");
                    string testMethod = elem.GetAttribute("Method");
                    string started = elem.GetAttribute("Started");
                    string finished = elem.GetAttribute("Finished");
                    string result = elem.GetAttribute("Result");
                    string description = elem.InnerText;
                    string color;
                    if (testClassFilter == null || testClassesToCheck.Contains(testClass))
                    {
                        total++;
                        switch (result)
                        {
                            case "Passed":
                                color = "style=\"background-color: Lime\"";
                                break;
                            case "Ignored":
                                color = "style=\"background-color: Orange\"";
                                break;
                            case "Failed":
                            default:
                                color = "style=\"background-color: Red\"";
                                failures++;
                                break;
                        }
                        if (result == "Failed")
                        {
                            passed = false;
                        }
                        sb.AppendFormat(
                            "<tr><td>{1}</td><td>{2}</td><td {0}>{3}</td><td>{4}</td></tr>\r\n",
                            color,
                            testClass,
                            testMethod,
                            result,
                            description);
                    }
                }
            }
            sb.AppendLine("</table>");
            sb.AppendLine("<b>Failures:</b> " + failures + "/" + total);
            resultsReport = sb.ToString();
            return passed;
        }
    }

    public class SilverlightTestFailedException : ApplicationException
    {
        public SilverlightTestFailedException(string message, Exception innerException)
            : base("At least one Silverlight Unit Test failed.<br/>\r\n<b><u>Silverlight Unit Tests Results:</u></b><br/>\r\n" + message + "<br/>\r\n")
        {
        }

        public override string ToString()
        {
            return base.ToString() + "\r\n" + InnerException.ToString();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\NGGamePlayer.Test\NGGamePlayer.Test\Tests\SilverlightCapTests.cs ===
﻿using System;
using System.Collections.Generic;
using System.Configuration;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Threading;
using System.Net;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using NGGamePlayer.Test.Utilities;

namespace NGGamePlayer.Test.Tests
{
    ///<summary>
    ///Silverlight clientaccesspolicy.xml access tests
    ///
    ///Standard addresses checked for OK response:
    ///http://sts.storax.xbox.com/clientaccesspolicy.xml
    ///http://uds.storax.xboxlive.com/clientaccesspolicy.xml
    ///http://rewards.storax.xboxlive.com/clientaccesspolicy.xml
    ///http://sessions.storax.xboxlive.com/clientaccesspolicy.xml
    ///http://notifications.storax.xboxlive.com/clientaccesspolicy.xml
    ///</summary>
    [TestClass]
    public class SilverlightCapTests
    {
        #region Properties and fields
        private string LiveWebUrl;

        private TestContext testContextInstance;

        ///<summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        } 
        #endregion

        public SilverlightCapTests()
        {
            LiveWebUrl = ConfigurationManager.AppSettings["LiveWebUrl"];
            if (!LiveWebUrl.StartsWith("http://"))
            {
                LiveWebUrl = "http://" + LiveWebUrl;
            }
        }

        /// <summary>
        /// Silverlightls the client access policy STS proxy.
        /// </summary>
        [TestMethod]
        [Timeout(2 * 60 * 1000)] //2 minutes
        public void SilverlightlClientAccessPolicyStsProxy()
        {
            Logging.Log("SilverlightlClientAccessPolicyStsProxy()");
            UriBuilder b = new UriBuilder();
            Uri uri = new Uri(new Uri(LiveWebUrl.Replace("http://", "https://").Replace("games", "sts")), "clientaccesspolicy.xml");
            Logging.Log("sts proxy URI: " + uri);
            TestCapRequest(uri);
        }

        [TestMethod]
        [Timeout(2 * 60 * 1000)] //2 minutes
        public void SilverlightlClientAccessPolicyUdsProxy()
        {
            Logging.Log("SilverlightlClientAccessPolicyUdsProxy()");
            UriBuilder b = new UriBuilder();
            Uri uri = new Uri(new Uri(LiveWebUrl.Replace("http://", "https://").Replace("games", "uds").Replace("xbox.com", "xboxlive.com")), "clientaccesspolicy.xml");
            Logging.Log("uds proxy URI: " + uri);
            TestCapRequest(uri);
        }

        [TestMethod]
        [Timeout(2 * 60 * 1000)] //2 minutes
        public void SilverlightlClientAccessPolicyRewardsProxy()
        {
            Logging.Log("SilverlightlClientAccessPolicyRewardsProxy()");
            UriBuilder b = new UriBuilder();
            Uri uri = new Uri(new Uri(LiveWebUrl.Replace("http://", "https://").Replace("games", "rewards").Replace("xbox.com", "xboxlive.com")), "clientaccesspolicy.xml");
            Logging.Log("rewards proxy URI: " + uri);
            TestCapRequest(uri);
        }

        [TestMethod]
        [Timeout(2 * 60 * 1000)] //2 minutes
        public void SilverlightlClientAccessPolicySessionsProxy()
        {
            Logging.Log("SilverlightlClientAccessPolicySessionsProxy()");
            UriBuilder b = new UriBuilder();
            Uri uri = new Uri(new Uri(LiveWebUrl.Replace("http://", "https://").Replace("games", "sessions").Replace("xbox.com", "xboxlive.com")), "clientaccesspolicy.xml");
            Logging.Log("sessions proxy URI: " + uri);
            TestCapRequest(uri);
        }

        [TestMethod]
        [Timeout(2 * 60 * 1000)] //2 minutes
        public void SilverlightlClientAccessPolicyNotificationsProxy()
        {
            Logging.Log("SilverlightlClientAccessPolicyNotificationsProxy()");
            UriBuilder b = new UriBuilder();
            Uri uri = new Uri(new Uri(LiveWebUrl.Replace("http://", "https://").Replace("games", "notifications").Replace("xbox.com", "xboxlive.com")), "clientaccesspolicy.xml");
            Logging.Log("notifications proxy URI: " + uri);
            TestCapRequest(uri);
        }

        /// <summary>
        /// Tests the clientaccesspolicy.xml (Silverlight Policy) file request.
        /// </summary>
        /// <param name="uri">The URI.</param>
        private static void TestCapRequest(Uri uri)
        {
            HttpWebRequest req = (HttpWebRequest)HttpWebRequest.Create(uri);
            
            try
            {
                HttpWebResponse res = (HttpWebResponse)req.GetResponse();
                if (res.StatusCode != HttpStatusCode.OK)
                {
                    ReportCapRequestFailure(uri, req, null, res);
                }
            }
            catch (WebException ex)
            {
                HttpWebResponse res = ex.Response as HttpWebResponse;
                if (res == null)
                {
                    throw;
                }
                ReportCapRequestFailure(uri, req, ex, res);
            }
        }

        private static void ReportCapRequestFailure(Uri uri, HttpWebRequest req, WebException ex, HttpWebResponse res)
        {
            Logging.Log("Request headers:\r\n" + req.Headers.ToString());
            using (StreamReader sr = new StreamReader(res.GetResponseStream()))
            {
                Logging.Log("Response:");
                Logging.Log(sr.ReadToEnd());
            }

            throw new NGGamePlayer.Test.Tests.GamePlayerTestException("Failed accesssing Silverlight clientaccesspolicy.xml file for " + uri, ex);
        }

        public static string GetGamePageUrl(string liveWebUrl, string gameName)
        {
            return string.Format("{0}/Game/{1}", liveWebUrl, gameName);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\NGGamePlayer.Test\RunTests\InfrastructureTrace.cs ===
﻿// <copyright file="InfrastructureTrace.cs" company="Microsoft">Copyright (c) 2010 All Right Reserved
// </copyright>
// <author>Filip Skakun</author>
// <email>filip.skakun@gmail.com</email>
// <date>2010-02-19</date>
// <summary>Contains the class definition for InfrastructureTrace class.</summary>

namespace RunTests
{
    using System;
    using System.Diagnostics;
    using System.IO;
    using System.Text;

    internal static class InfrastructureTrace
    {
        internal static string localTracePath;
        internal static string shareTracePath;
        private static StringBuilder trace = new StringBuilder();

        internal static void Initialize(
            string localTracePath,
            string shareTracePath)
        {
            InfrastructureTrace.localTracePath = localTracePath;
            InfrastructureTrace.shareTracePath = shareTracePath;
        }

        /// <summary>
        /// Logs the specified message in console, debug trace and in the infrastructure trace file.
        /// </summary>
        /// <param name="msg">The MSG.</param>
        internal static void Log(string msg)
        {
            string timeStampedMsg = DateTime.Now.ToString("HH:mm:ss - ") + msg;
            Console.WriteLine(timeStampedMsg);
            Trace.WriteLine(timeStampedMsg);
            trace.AppendLine(timeStampedMsg);
        }

        internal static string TracedSoFar()
        {
            return trace.ToString();
        }

        internal static void Save()
        {
            File.WriteAllText(localTracePath, trace.ToString());
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\NGGamePlayer.Test\OctopusCfg\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("OctopusCfg")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("b32b0d3b-ee89-4e93-9d6d-edf0ddd9603e")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
//[assembly: AssemblyVersion("1.0.0.0")]
//[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\NGGamePlayer.Test\RunTests\MsTestRunner.cs ===
﻿// <copyright file="MsTestRunner.cs" company="Microsoft">Copyright (c) 2010 All Right Reserved
// </copyright>
// <author>Filip Skakun</author>
// <email>filip.skakun@gmail.com</email>
// <date>2010-02-19</date>
// <summary>Contains the class definition for MsTestRunner class.</summary>

namespace RunTests
{
    using System;
    using System.Diagnostics;
    using System.IO;
    /// <summary>
    /// The class includes static
    /// </summary>
    internal static class MsTestRunner
    {
        private static string mstestLoc;

        private static string flavor
        {
            get
            {
                return Program.flavor;
            }
        }

        private static bool keepRunning
        {
            get
            {
                return Program.keepRunning;
            }
        }

        private static string mstestDir
        {
            get
            {
                return Program.mstestDir;
            }
        }

        private static string platform
        {
            get
            {
                return Program.platform;
            }
        }

        private static string resultsFile
        {
            get
            {
                return Program.resultsFile;
            }
        }

        private static string runConfig
        {
            get
            {
                return Program.runConfig;
            }
        }

        private static string testList
        {
            get
            {
                return Program.testList;
            }
        }

        private static string testMetadata
        {
            get
            {
                return Program.testMetadata;
            }
        }

        private static string tfsProject
        {
            get
            {
                return Program.tfsProject;
            }
        }

        private static string tfsServer
        {
            get
            {
                return Program.tfsServer;
            }
        }

        private static string version
        {
            get
            {
                return Program.version;
            }
        }

        #region RunTests()
        /// <summary>
        /// Run the tests
        /// </summary>
        /// <returns>mstest result</returns>
        internal static int RunTests()
        {
            if (mstestLoc == null)
            {
                mstestLoc = GetMsTestPath();
            }

            if (mstestLoc == null)
            {
                InfrastructureTrace.Log("Could not find mstest.exe. Unable to run tests. Make sure the test machine has Visual Studio installed or that the \"-mstestDir\" parameter was set to a valid location of mstest.");
                return -1;
            }

            InfrastructureTrace.Log("Running mstest:");

            // the '/noisolation' option should not be used here. It does not help tests being executed in different threads.
            string args = string.Format(
                " /testmetadata:{0} /testlist:{1} /runconfig:{2} /resultsfile:\"{3}\"",
                testMetadata,
                testList,
                runConfig,
                resultsFile);

            InfrastructureTrace.Log(mstestLoc + args);

            Process p = new Process();
            p.StartInfo.UseShellExecute = false;
            p.StartInfo.FileName = mstestLoc;
            p.StartInfo.Arguments = args;
            p.StartInfo.CreateNoWindow = false;
            p.StartInfo.RedirectStandardOutput = true;
            p.StartInfo.RedirectStandardError = true;
            p.OutputDataReceived += new DataReceivedEventHandler(MsTestConsoleOutputReceived);
            p.ErrorDataReceived += new DataReceivedEventHandler(MsTestConsoleOutputReceived);
            p.Start();
            p.BeginOutputReadLine();
            p.BeginErrorReadLine();

            if (keepRunning)
            {
                p.WaitForExit();
            }
            else if (!p.WaitForExit(1000 * 60 * 60))
            {
                p.Kill();
                InfrastructureTrace.Log("Test run timed out after 1 hour.");
                return -2;
            }

            InfrastructureTrace.Log("Ignore 'Test Run deployment issue' warnings above. These are caused by some binaries marked as test deployment items in KAF or elsewhere, are not needed and can be ignored");

            if (p.ExitCode != 0)
            {
                InfrastructureTrace.Log("Test run failed");
            }
            else
            {
                InfrastructureTrace.Log("Test run complete");
            }

            return p.ExitCode;
        }
        #endregion

        #region PublishResults()
        internal static void PublishResults()
        {
            bool trxPresent = File.Exists(resultsFile);
            if (!trxPresent)
            {
                return;
            }

            InfrastructureTrace.Log("Publishing results...");
            string args;
            args = string.Format(
                " /publish:\"{0}\" /publishbuild:\"{1}\" /flavor:\"{2}\" /platform:\"{3}\" /PublishResultsFile:\"{4}\" /teamproject:\"{5}\"",
                tfsServer,
                version,
                flavor,
                platform,
                resultsFile,
                tfsProject);

            InfrastructureTrace.Log(mstestLoc + args);

            Process p = new Process();
            p.StartInfo.UseShellExecute = false;
            p.StartInfo.FileName = mstestLoc;
            p.StartInfo.Arguments = args;
            p.StartInfo.CreateNoWindow = false;
            p.StartInfo.RedirectStandardOutput = true;
            p.StartInfo.RedirectStandardError = true;
            p.OutputDataReceived += new DataReceivedEventHandler(MsTestConsoleOutputReceived);
            p.ErrorDataReceived += new DataReceivedEventHandler(MsTestConsoleOutputReceived);
            p.Start();
            p.BeginOutputReadLine();
            p.BeginErrorReadLine();

            if (!p.WaitForExit(1000 * 60 * 10))
            {
                p.Kill();
                InfrastructureTrace.Log("Publishing results timed out after 10 minutes.");
                return;
            }

            if (p.ExitCode != 0)
            {
                InfrastructureTrace.Log("Publishing results - failed");
            }
            else
            {
                InfrastructureTrace.Log("Publishing results - complete");
            }
        }
        #endregion

        #region GetMsTestPath()
        private static string GetMsTestPath()
        {
            InfrastructureTrace.Log("Looking for mstest.exe...");
            string vscommontools = System.Environment.GetEnvironmentVariable("VS90COMNTOOLS");

            if (vscommontools != null)
            {
                string mstestLoc = vscommontools.TrimEnd('\\');
                mstestLoc = Directory.GetParent(mstestLoc).FullName;
                mstestLoc = Path.Combine(mstestLoc, @"IDE\mstest.exe");
                InfrastructureTrace.Log("Found in " + mstestLoc);
                return mstestLoc;
            }

            InfrastructureTrace.Log("Visual Studio not installed (environment variable VS90COMNTOOLS not set). It is required to run mstest. Trying to get a copy of required files from " + mstestDir);

            try
            {
                string check = Path.Combine(mstestDir, "mstest.exe");

                if (!File.Exists(check))
                {
                    InfrastructureTrace.Log("Could not find " + check + ".");
                    return null;
                }

                string localMstestDir = Path.Combine(Environment.CurrentDirectory, "mstest");
                InfrastructureTrace.Log("Copying mstest files to " + localMstestDir);

                if (!Directory.Exists(localMstestDir))
                {
                    Directory.CreateDirectory(localMstestDir);

                    foreach (string file in Directory.GetFiles(mstestDir))
                    {
                        File.Copy(file, Path.Combine(localMstestDir, Path.GetFileName(file)));
                    }
                }

                string mstestLoc = Path.Combine(localMstestDir, "mstest.exe");
                InfrastructureTrace.Log("mstest.exe should now be in " + mstestLoc);
                return mstestLoc;
            }
            catch (IOException ex)
            {
                InfrastructureTrace.Log("Exception occurred while copying mstest.exe and supporting files from " + mstestDir);
                InfrastructureTrace.Log(ex.ToString());
                return null;
            }
        }
        #endregion

        #region MsTestConsoleOutputReceived
        private static void MsTestConsoleOutputReceived(object sender, DataReceivedEventArgs e)
        {
            if (e.Data != null)
            {
                InfrastructureTrace.Log(e.Data);
            }
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\NGGamePlayer.Test\RunTests\Program.cs ===
﻿// <copyright file="Program.cs" company="Microsoft">Copyright (c) 2010 All Right Reserved
// </copyright>
// <author>Filip Skakun</author>
// <email>filip.skakun@gmail.com</email>
// <date>2010-02-19</date>
// <summary>Contains the class definition for Program - main class of the RunTests application.</summary>

namespace RunTests
{
    using System;
    using System.Configuration;
    using System.Diagnostics;
    using System.IO;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Windows.Forms;
    using System.Xml;

    /// <summary>
    /// The program class for RunTest.exe - it is used for
    /// - running tests with mstests
    /// - parsing results
    /// - send report e-mails
    /// </summary>
    public class Program
    {
        #region Fields
        private const string TestsConfigFileName = "App.config";
        internal static DateTime startTime;
        internal static DateTime endTime;
        internal static DateTime runEndTime;
        internal static bool keepRunning;
        internal static bool timedOut;
        internal static string version;
        internal static string versionDeterminedBy;
        internal static string versionDate = string.Empty;
        internal static string resultCollectionQueryFilePath;

        // Command line parameters
        private static bool testClientsMonitorSet;
        internal static string binDir;
        internal static string commonResultsLocation;
        internal static string flavor;
        internal static string from;
        internal static string liveWebUrl;
        private static string modelDuration;
        private static string monitorPass;
        private static string monitorUser;
        internal static string mstestDir;
        internal static string platform;
        internal static string resultCollectionName;
        internal static string resultsFile;
        private static string resultsDirectory;
        internal static string runConfig;
        internal static string subject;
        internal static string testClient;
        private static string testClientsMonitor;
        internal static string testList;
        internal static string testMetadata;
        internal static string testsDir;
        internal static string testServer;
        internal static string tfsProject;
        internal static string tfsServer;
        internal static string to;
        #endregion

        #region Main()
        /// <summary>
        /// Runs the program:
        /// - Reads arguments
        /// - Updates tests config file
        /// - Runs tests
        /// - Sends email report
        /// </summary>
        /// <param name="args"></param>
        /// <returns>0 on success, 2 if parameters are wrong, 3 on uncaught exception, -1 if VS is not found, mstest result otherwise (1 on failure?)</returns>
        [STAThread]
        public static int Main(string[] args)
        {
            InfrastructureTrace.Log(Environment.CurrentDirectory + ">" + Environment.CommandLine);

            try
            {
                if (ProcessArgs(args))
                {
                    return RunTestsAndReport();
                }
            }
            catch (Exception ex)
            {
                InfrastructureTrace.Log("RunTests encountered an unexpected exception:");
                InfrastructureTrace.Log(ex.ToString());
                endTime = DateTime.Now;
                new ResultsReport().Send();
                return 3;
            }

            return 2;
        }
        #endregion

        #region ProcessArgs()
        /// <summary>
        /// Read the arguments passed in command line into static fields of this class
        /// </summary>
        /// <param name="args">command line args</param>
        /// <returns>true if syntax is valid</returns>
        private static bool ProcessArgs(string[] args)
        {
            // set defaults
            resultsDirectory = Path.Combine(Environment.CurrentDirectory, @"TestResults");
            resultsFile = Path.Combine(resultsDirectory, @"GamePlayerBVTs.trx");
            testMetadata = ConfigurationManager.AppSettings["TestMetadata"];
            testList = ConfigurationManager.AppSettings["TestList"];
            runConfig = ConfigurationManager.AppSettings["RunConfig"];
            from = Environment.GetEnvironmentVariable("USERNAME") + "@microsoft.com";
            to = Environment.GetEnvironmentVariable("USERNAME") + "@microsoft.com";
            subject = ConfigurationManager.AppSettings["Subject"];
            binDir = ConfigurationManager.AppSettings["BinDir"];
            mstestDir = ConfigurationManager.AppSettings["MstestDir"];
            liveWebUrl = ConfigurationManager.AppSettings["LiveWebUrl"];
            testServer = ConfigurationManager.AppSettings["TestServer"];
            testClient = Environment.GetEnvironmentVariable("COMPUTERNAME");

            // This is default for local machine runs only and should be overriden by
            // command line parameter in ProcessArgs(args);
            // The value in the config file shows the default for lab runs:
            // @"\\xswgxtfile01\LEO\Results\GamePlayer";
            commonResultsLocation = Path.Combine(Environment.CurrentDirectory, resultsDirectory);
            modelDuration = ConfigurationManager.AppSettings["ModelDuration"];
            keepRunning = false;
            tfsServer = ConfigurationManager.AppSettings["TfsServer"];
            tfsProject = ConfigurationManager.AppSettings["TfsProject"];
            platform = ConfigurationManager.AppSettings["Platform"];
            flavor = ConfigurationManager.AppSettings["Flavor"];

            // Process args if number of args is correct
            for (int currentArg = 0; currentArg < args.Length - 1; currentArg++)
            {
                InfrastructureTrace.Log(string.Format(
                        "Processing argument: {0} {1}",
                        args[currentArg],
                        args[currentArg].ToLower().Contains("pass") ? "*****" : args[currentArg + 1]));
                switch (args[currentArg])
                {
                    case "-resultsDirectory":
                        resultsDirectory = Path.GetFullPath(args[++currentArg]);
                        break;
                    case "-runconfig":
                        runConfig = args[++currentArg];
                        break;
                    case "-testmetadata":
                        testMetadata = args[++currentArg];
                        break;
                    case "-testlist":
                        testList = args[++currentArg];
                        break;
                    case "-resultsFile":
                        resultsFile = Path.GetFullPath(args[++currentArg]);
                        break;
                    case "-from":
                        from = args[++currentArg];
                        break;
                    case "-to":
                        to = args[++currentArg];
                        break;
                    case "-subject":
                        subject = args[++currentArg];
                        break;
                    case "-binDir":
                        binDir = Path.GetFullPath(args[++currentArg]);
                        break;
                    case "-testsDir":
                        testsDir = Path.GetFullPath(args[++currentArg]);
                        break;
                    case "-resultCollectionName":
                        resultCollectionName = args[++currentArg];
                        break;
                    case "-testServer":
                        testServer = args[++currentArg];
                        if (!testClientsMonitorSet)
                        {
                            testClientsMonitor = testServer;
                        }

                        break;
                    case "-liveWebUrl":
                        liveWebUrl = args[++currentArg];
                        break;
                    case "-testClient":
                        testClient = args[++currentArg];
                        break;
                    case "-testClientsMonitor":
                        testClientsMonitor = args[++currentArg];
                        testClientsMonitorSet = true;
                        break;
                    case "-monitorUser":
                        monitorUser = args[++currentArg];
                        break;
                    case "-monitorPass":
                        monitorPass = args[++currentArg];
                        break;
                    case "-commonResultsLocation":
                        commonResultsLocation = Path.GetFullPath(args[++currentArg]);
                        break;
                    case "-mstestDir":
                        mstestDir = args[++currentArg];
                        break;
                    case "-modelDuration":
                        modelDuration = args[++currentArg];
                        break;
                    case "-keepRunning":
                        keepRunning = bool.Parse(args[++currentArg]);
                        break;
                    case "-tfsServer":
                        tfsServer = args[++currentArg];
                        break;
                    case "-tfsProject":
                        tfsProject = args[++currentArg];
                        break;
                    case "-platform":
                        platform = args[++currentArg];
                        break;
                    case "-flavor":
                        flavor = args[++currentArg];
                        break;
                    default:
                        Console.WriteLine("Unknown parameter: " + args[currentArg]);
                        UsageSummary();
                        break;
                }
            }

            return true;
        }
        #endregion

        #region UsageSummary()
        /// <summary>
        /// Display how to use the tool from command line
        /// </summary>
        private static void UsageSummary()
        {
            Console.WriteLine(
@"RunTests - tool for running GamePlayer tests

Usage:
  RunTests.exe <options>

<options>:
  -log <directory> - log/results direcoty path, eg. C:\WTT\JobsWorkingDir\Tasks\WTTJobRun985330FC-2D9E-DE11-A417-0017A48D76D0\TestResults
  -runconfig <file path> - test run config file path, eg. LocalTestRun.testrunconfig
  -testmetadata <file path> - test metadata file path, eg. NGGamePlayer.Test.vsmdi
  -testlist <list name> - test list name, eg. BVTs
  -ResultsFile <file path> - results file path, eg. TestResults\GamePlayerBVTs.trx
  -from <address>
  -to <address>
  -subject <subject>
  -binDir <path to binary drop directory>
  -testServer <name of the test server>
  -liveWebUrl <URL of the LiveWeb site>
  -testClient <name of the test client machine>
  -commonResultsLocation <location to which the trx file will be moved>
  -modelDuration <timeout for model based tests>
  -keepRunning <true - to keep restarting the tests and reporting if the tests end before timeout, false - otherwise>
  -tfsServer <name of TFS server to publish results to>
  -tfsProject <name of TFS project to publish results to>
  -platform <build platform>
  -flavor <build version>
");
        }
        #endregion

        #region RunTestsAndReport()
        private static int RunTestsAndReport()
        {
            int lastResult = 0;
            InfrastructureTrace.Initialize(
                Path.Combine(resultsDirectory, Path.GetFileNameWithoutExtension(resultsFile)) + ".txt",
                Path.Combine(commonResultsLocation, Path.GetFileNameWithoutExtension(resultsFile)) + ".txt");
            InfrastructureTrace.Log("Files deployed:");
            foreach (var file in Directory.GetFiles(Environment.CurrentDirectory, "*.*", SearchOption.AllDirectories))
            {
                InfrastructureTrace.Log(file);
            }

            // this is actually setting the limit for end time, but they should be pretty close anyway and the value will be overwritten
            if (modelDuration == "unlimited")
            {
                runEndTime = DateTime.MaxValue;
            }
            else
            {
                runEndTime = DateTime.Now + TimeSpan.Parse(modelDuration);
            }

            var dir = Path.GetDirectoryName(resultsFile);
            var name = Path.GetFileNameWithoutExtension(resultsFile);
            var ext = Path.GetExtension(resultsFile);
            UpdateTestConfig();

            version = GetVersion(binDir);
            do
            {
                startTime = DateTime.Now;
                resultsFile = Path.Combine(dir, name) + startTime.ToString("_yyyy-MM-dd_HH-mm-ss") + ext;
                int mstestRet = MsTestRunner.RunTests();
                if (mstestRet != 0)
                {
                    // if we fail at least once - we want to record the last failure code,
                    // so if we reach the test run duration timeout - we return the last failure code
                    // instead of success
                    lastResult = mstestRet;
                }

                endTime = DateTime.Now;
                timedOut = endTime >= runEndTime;
                MsTestRunner.PublishResults();
                new ResultsReport().Send();
            }
            while (keepRunning && (DateTime.Now < runEndTime));

            if (!string.IsNullOrEmpty(resultCollectionName))
            {
                resultCollectionQueryFilePath = Path.Combine(dir, "ResCol") + resultCollectionName + ".wtq";
                SaveResultCollectionQueryFile();
            }

            return lastResult;
        } 
        #endregion

        #region SaveResultCollectionQueryFile()
        /// <summary>
        /// Saves the WTT result collection query file.
        /// </summary>
        private static void SaveResultCollectionQueryFile()
        {
            StringBuilder contents = new StringBuilder(
@"<WTTData>
  <Component SetName=^Explorers^ GroupName=^ResultExplorerFromResultCollection^>
    <ComponentData Name=^ResultExplorer^ Version=^2.2.2098.0^>
      <ComponentData Name=^ContainerInfo^ Version=^2.2.2098.0^>
        <ContainerInfoData HierarchyPanePresent=^True^ QueryPanePresent=^True^ TaskResultCollectionPanePresent=^False^>
          <ServiceCollection>
            <Service>JobsRuntime</Service>
          </ServiceCollection>
          <HierarchySplitter>200</HierarchySplitter>
          <ResultCollectionSplitter>230</ResultCollectionSplitter>
          <TaskResultCollectionSplitter>196</TaskResultCollectionSplitter>
        </ContainerInfoData>
      </ComponentData>
      <ComponentData Name=^TabbedObjectTreeControl^ Version=^2.2.2098.0^>
        <Data SelectedTreeNodePath=^$^ CurrentTab=^0^ />
      </ComponentData>
      <ComponentData Name=^ResultCollectionInfo^ Version=^2.2.2098.0^>
        <ComponentData Name=^ConfigurableListControl^ Version=^2.2.2098.0^>
          <Column Name=^^ Width=^32^ SortIndex=^0^ SortOrder=^None^ ColumnOrder=^0^ Default=^True^ />
          <Column Name=^JobName^ Width=^200^ SortIndex=^-1^ SortOrder=^None^ ColumnOrder=^1^ Default=^True^ />
          <Column Name=^JobExecutionType^ Width=^120^ SortIndex=^-1^ SortOrder=^None^ ColumnOrder=^2^ Default=^True^ />
          <Column Name=^AssignedToAlias^ Width=^100^ SortIndex=^-1^ SortOrder=^None^ ColumnOrder=^3^ Default=^True^ />
          <Column Name=^Pass^ Width=^80^ SortIndex=^-1^ SortOrder=^None^ ColumnOrder=^4^ Default=^True^ />
          <Column Name=^Fail^ Width=^80^ SortIndex=^-1^ SortOrder=^None^ ColumnOrder=^5^ Default=^True^ />
          <Column Name=^InfrastructureFail^ Width=^80^ SortIndex=^-1^ SortOrder=^None^ ColumnOrder=^6^ Default=^True^ />
          <Column Name=^NotRun^ Width=^80^ SortIndex=^-1^ SortOrder=^None^ ColumnOrder=^7^ Default=^True^ />
          <Column Name=^LastUpdatedTime^ Width=^150^ SortIndex=^1^ SortOrder=^Descending^ ColumnOrder=^8^ Default=^True^ />
        </ComponentData>
      </ComponentData>
      <ComponentData Name=^TaskResultCollectionInfo^ Version=^2.2.2098.0^>
        <ComponentData Name=^TaskResultControlContainerInfo^ Version=^2.2.2098.0^>
          <TaskResultControlContainerInfoData Filters=^63^ ExpandAll=^False^ HideSubResultProperties=^True^ SplitterDistance=^184^ />
          <ComponentData Name=^TaskResultListInfoData^ Version=^2.2.2098.0^>
            <ComponentData Name=^ConfigurableListControl^ Version=^2.2.2098.0^>
              <Column Name=^Task Sequence^ Width=^0^ SortIndex=^2^ SortOrder=^Ascending^ ColumnOrder=^-1^ Default=^False^ />
              <Column Name=^Task Execution Phase^ Width=^0^ SortIndex=^1^ SortOrder=^Ascending^ ColumnOrder=^-1^ Default=^False^ />
              <Column Name=^Start Time^ Width=^0^ SortIndex=^1^ SortOrder=^Ascending^ ColumnOrder=^-1^ Default=^False^ />
              <Column Name=^^ Width=^30^ SortIndex=^0^ SortOrder=^None^ ColumnOrder=^0^ Default=^True^ />
              <Column Name=^Task Name^ Width=^150^ SortIndex=^-1^ SortOrder=^None^ ColumnOrder=^1^ Default=^True^ />
              <Column Name=^Task Result Status^ Width=^100^ SortIndex=^-1^ SortOrder=^None^ ColumnOrder=^2^ Default=^True^ />
              <Column Name=^Process Exit Status^ Width=^150^ SortIndex=^-1^ SortOrder=^None^ ColumnOrder=^3^ Default=^True^ />
              <Column Name=^Pass^ Width=^75^ SortIndex=^-1^ SortOrder=^None^ ColumnOrder=^4^ Default=^True^ />
              <Column Name=^Fail^ Width=^75^ SortIndex=^-1^ SortOrder=^None^ ColumnOrder=^5^ Default=^True^ />
              <Column Name=^Not Run^ Width=^100^ SortIndex=^-1^ SortOrder=^None^ ColumnOrder=^6^ Default=^True^ />
              <Column Name=^Infra Fail^ Width=^100^ SortIndex=^-1^ SortOrder=^None^ ColumnOrder=^7^ Default=^True^ />
              <Column Name=^Task ID^ Width=^75^ SortIndex=^-1^ SortOrder=^None^ ColumnOrder=^8^ Default=^True^ />
            </ComponentData>
          </ComponentData>
        </ComponentData>
      </ComponentData>
      <ComponentData Name=^QueryBuilder^ Version=^2.2.2098.0^>
        <ObjectQueryBuilder ControlType=^Microsoft.DistributedAutomation.UI.QueryBuilder^ ControlAssembly=^Microsoft.WTT.UI.Controls.ObjectControls^ Assembly=^WTTOMJobs^ Type=^Microsoft.DistributedAutomation.Jobs.Result^ Title=^Result Query^>
          <Expression Index=^1^ Static=^True^ AttachWith=^^ Mapping=^DataStore^ Field=^DataStore^ Operator=^Equals^ OperatorDisplayName=^Equals^ Value=^Panorama^ />
          <Expression Index=^2^ Static=^True^ AttachWith=^And^ Mapping=^ParentResultId^ Field=^Hide Child Job Results^ Operator=^IsNull^ OperatorDisplayName=^True^ Value=^^ />
          <Group>
            <Expression AttachWith=^And^ Mapping=^ResultSummaryCollection^ Field=^Result Collections (+)^ Operator=^Has^ OperatorDisplayName=^Has^ Value=^^ />
            <Expression AttachWith=^^ Mapping=^Name^ Field=^   Name^ Operator=^Equals^ OperatorDisplayName=^Equals^ Value=^ResultCollectionNameHere^ />
            <Expression AttachWith=^And^ Mapping=^^ Field=^^ Operator=^None^ OperatorDisplayName=^^ Value=^^ />
          </Group>
          <Expression AttachWith=^And^ Mapping=^^ Field=^^ Operator=^None^ OperatorDisplayName=^^ Value=^^ />
        </ObjectQueryBuilder>
      </ComponentData>
      <ComponentData Name=^ToolBar^ Version=^2.2.2098.0^>
        <Data DefinitionController=^Panorama^ HideQueryBuilder=^True^ HideHierarchy=^True^ HideExtraList=^False^ MaxItemsToDisplay=^500^ />
      </ComponentData>
    </ComponentData>
  </Component>
  <ActiveComponent SetName=^Explorers^ GroupName=^ResultExplorerFromResultCollection^ />
</WTTData>");
            contents.Replace("^", "\"").Replace("ResultCollectionNameHere", resultCollectionName);
            File.WriteAllText(resultCollectionQueryFilePath, contents.ToString());
        }
        #endregion

        #region UpdateTestConfig()
        /// <summary>
        /// Update the app.config file of the test to pass all the parameters
        /// </summary>
        private static void UpdateTestConfig()
        {
            XmlDocument doc = new XmlDocument();
            doc.Load(TestsConfigFileName);
            XmlNodeList x = doc.SelectNodes("//appSettings/add");
            foreach (XmlNode y in x)
            {
                XmlElement setting = y as XmlElement;
                if (y == null)
                {
                    continue;
                }

                string key = setting.GetAttribute("key");
                if (key == "TestServer")
                {
                    setting.SetAttribute("value", testServer);
                }
                else if (key == "LiveWebUrl")
                {
                    setting.SetAttribute("value", liveWebUrl);
                }
                else if (key == "LogDirectory")
                {
                    setting.SetAttribute("value", resultsDirectory);
                }
                else if (key == "CommonResultsLocation")
                {
                    setting.SetAttribute("value", commonResultsLocation);
                }
                else if (key == "ModelDuration")
                {
                    setting.SetAttribute("value", modelDuration);
                }
                else if (key == "EndTime")
                {
                    setting.SetAttribute("value", runEndTime.ToString());
                }
                else if (key == "Monitor")
                {
                    setting.SetAttribute("value", testClientsMonitor);
                }
                else if (key == "MonitorUser")
                {
                    setting.SetAttribute("value", monitorUser);
                }
                else if (key == "MonitorPass")
                {
                    setting.SetAttribute("value", monitorPass);
                }
                else if (key == "AutoMSTSCPath")
                {
                    string autoMSTSCPath = Path.Combine(
                        Application.StartupPath,
                        "AutoMSTSC.exe");
                    InfrastructureTrace.Log("AutoMSTSCPath: " + autoMSTSCPath);
                    setting.SetAttribute("value", autoMSTSCPath);
                }
            }

            doc.Save(TestsConfigFileName);
            InfrastructureTrace.Log("Contents of " + TestsConfigFileName);
            InfrastructureTrace.Log(File.ReadAllText(TestsConfigFileName));
        } 
        #endregion

        #region GetVersion()
        /// <summary>
        /// Get the version of the server using a few heuristics.
        /// The version is only extracted so the report e-mail contains some indication of what build the test was run on.
        /// Depending on how and in what environment these tests are run - this might need to work differently.
        /// </summary>
        /// <param name="binDir"></param>
        /// <returns></returns>
        private static string GetVersion(string binDir)
        {
            Regex regex = new Regex(@"\d+\.\d+\.\d+\.\d+");
            Match match;

            // Way zero: check a file on the server if accessible
            try
            {
                string liveWebUiDllPath = @"\\" + testServer + @"\D$\webroot\LiveWeb\bin\LiveWeb.Web.UI.dll";
                if (File.Exists(liveWebUiDllPath))
                {
                    FileVersionInfo info = FileVersionInfo.GetVersionInfo(liveWebUiDllPath);
                    versionDate = "<i>(built on " + new FileInfo(liveWebUiDllPath).CreationTime.ToString() + ")</i>";
                    versionDeterminedBy = "checking the product version of " + liveWebUiDllPath;
                    return string.Format("{0,2}.{1,2}.{2,4}.{3,2}", info.ProductMajorPart, info.ProductMinorPart, info.ProductBuildPart, info.ProductPrivatePart).Replace(' ', '0');
                }
            }
            catch (IOException)
            {
            }
            
            if (binDir.StartsWith(@"\\edge-svcs\Release\LEET\MAIN\Latest.tst", StringComparison.InvariantCultureIgnoreCase))
            {
                string[] files = Directory.GetFiles(@"\\edge-svcs\Release\LEET\MAIN\Latest.tst");

                // Way one: check if the version file is in place
                foreach (string file in files)
                {
                    string fileName = Path.GetFileName(file);
                    if (regex.IsMatch(fileName))
                    {
                        versionDeterminedBy = "checking the name of the file " + file;
                        versionDate = "<i>(built on " + new FileInfo(file).CreationTime.ToString() + ")</i>";
                        return fileName;
                    }
                }

                // Way two: parse the version out of the log file
                string logFilePath = @"\\edge-svcs\release\LEET\MAIN\Latest.tst\Logs\BuildTracker.log";
                if (File.Exists(logFilePath))
                {
                    string log = File.ReadAllText(logFilePath);
                    int start = log.IndexOf("BuildNumber", StringComparison.InvariantCultureIgnoreCase);
                    match = regex.Match(log, start);
                    if (match != null && match.Success)
                    {
                        versionDeterminedBy = "checking the BuildNumber value logged in " + logFilePath;
                        versionDate = "<i>(built on " + new FileInfo(logFilePath).CreationTime.ToString() + ")</i>";
                        return match.Value;
                    }
                }

                // Way three: extract the version from RunTests.exe
                string runTestsPath = @"\\edge-svcs\Release\LEET\MAIN\Latest.tst\amd64chk\Bin\nggameplayertest\runtests\runtests.exe";
                if (File.Exists(runTestsPath))
                {
                    FileVersionInfo info = FileVersionInfo.GetVersionInfo(runTestsPath);
                    versionDeterminedBy = "checking the version of " + runTestsPath;
                    versionDate = "<i>(built on " + new FileInfo(runTestsPath).CreationTime.ToString() + ")</i>";
                    return string.Format("{0,2}.{1,2}.{2,4}.{3,2}", info.ProductMajorPart, info.ProductMinorPart, info.ProductBuildPart, info.ProductPrivatePart).Replace(' ', '0');
                }
            }

            // Way four: find the version number in directory path as in ROLLING builds
            match = regex.Match(binDir);
            if (match != null && match.Success)
            {
                versionDeterminedBy = "checking the version in the path " + binDir;
                versionDate = "<i>(built on " + new DirectoryInfo(binDir).CreationTime.ToString() + ")</i>";
                return match.Value;
            }

            // Failed to figure out the version
            return "unknown";
        } 
        #endregion

        #region GetChangesHistoryFilePath()
        /// <summary>
        /// Get the path to the changelist file that lists what changed since previous build
        /// </summary>
        /// <param name="version">the standard format version string</param>
        /// <returns>path to the changes history file</returns>
        private static string GetChangesHistoryFilePath(string version)
        {
            if (version == "unknown" || string.IsNullOrEmpty(version))
            {
                return null;
            }
            else
            {
                return String.Format(@"\\edge-svcs\Release\LEET\MAIN\{0}\logs\fullchangelist.changelist.txt", version);
            }
        } 
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\PDLC.Test\makefile.inc ===
# this is a slight modification of the makefile.def target that skips ComVisible since it's specified per project.

$(OBJ_PATH)\$O\_generated.cs: $(SOURCES_USED)
    -$(_DEL)
    set createfile=<<$@.temp
!if defined(LANGUAGE_SPECIFIC_MANAGED_RESOURCES) && "$(MUI)" == "1" && "$(URT_VER)" == "2.0"
[assembly:System.Resources.NeutralResourcesLanguage("en")]
!endif
[assembly:System.Reflection.AssemblyVersion("$(ASSEMBLY_IDENTITY_VERSION)")]
!ifdef VER_PRODUCTNAME_STR
[assembly:System.Reflection.AssemblyProduct("$(VER_PRODUCTNAME_STR)")]
!endif
!ifdef VER_LEGALCOPYRIGHT_STR
[assembly:System.Reflection.AssemblyCopyright("$(VER_LEGALCOPYRIGHT_STR)")]
!endif
!ifdef VER_COMPANYNAME_STR
[assembly:System.Reflection.AssemblyCompany("$(VER_COMPANYNAME_STR)")]
!endif
!ifdef VER_PRODUCTVERSION_STR
[assembly:System.Reflection.AssemblyFileVersion("$(VER_PRODUCTVERSION_STR)")]
!endif
<<KEEP
!if defined(_ASSEMBLY_IDENTITY) \
        && "$(_ASSEMBLY_IDENTITY_PUBLIC_KEY_NAME_LOWERCASE)" != "none" \
        && "$(_ASSEMBLY_IDENTITY:\=)" == "$(_ASSEMBLY_IDENTITY)" \
        && !defined(_MANAGED_CXX_LIBRARY) \
        && "$(MANAGED_TARGET_TYPE)" != "module"
    asmIdToAttribs.cmd "$(_ASSEMBLY_IDENTITY)" $@.temp csharp
!endif
    $(_MOVE)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\NGGamePlayer.Test\RunTests\TrxResults.cs ===
﻿using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Xml;
using System.Xml.XPath;

namespace RunTests
{
    internal class TestResult
    {
        public string TestName;
        public string Duration;
        public string Outcome;
        public string Message;
        public TestResult(string testName, string duration, string outcome, string message)
        {
            TestName = testName;
            Duration = duration;
            Outcome = outcome;
            Message = message;
        }
    }

    internal class TrxResults
    {
        public int PassRate;
        public int Total;
        public int Passed;
        public int Failed;
        public List<TestResult> Results;
        public string StdOut;
        public string DebugTrace;

        public TrxResults(string filePath)
        {
            string xmlText = File.ReadAllText(filePath);
            //Bug in trx - this schema does not exist - need to remove it before parsing trx
            xmlText = xmlText.Replace("xmlns=\"http://microsoft.com/schemas/VisualStudio/TeamTest/2006\"", "");
            XmlDocument xd = new XmlDocument();
            xd.LoadXml(xmlText);

            //Read summary
            XmlElement summaryNode = xd["TestRun"]["ResultSummary"]["Counters"];
            Total = int.Parse(summaryNode.GetAttribute("total"));
            Passed = int.Parse(summaryNode.GetAttribute("passed"));
            Failed = Total - Passed;
            PassRate = 100 * Passed / Total;

            //Read general output
            StdOut = "";
            DebugTrace = "";
            XmlElement outNode = xd["TestRun"]["ResultSummary"]["Output"];
            if (outNode != null)
            {
                XmlElement stdOutNode = outNode["StdOut"];
                XmlElement debugTraceNode = outNode["DebugTrace"];
                if (stdOutNode != null)
                {
                    StdOut = stdOutNode.InnerText;
                }
                if (debugTraceNode != null)
                {
                    DebugTrace = debugTraceNode.InnerText;
                }
            }
            Results = new List<TestResult>();
            AppendTestResults(xd.SelectNodes("/TestRun/Results/UnitTestResult"));
            AppendTestResults(xd.SelectNodes("/TestRun/Results/WebTestResult"));
        }

        /// <summary>
        /// Go through results of tests passed by a list of xml elements from the trx files and append them as rows of the html table
        /// </summary>
        /// <param name="results">the stringbuilder with table to append the result rows to</param>
        /// <param name="nodes">the list of xml elements that have the results</param>
        private void AppendTestResults(XmlNodeList nodes)
        {
            foreach (XmlNode testCaseNode in nodes)
            {
                XmlElement resultElem = (XmlElement)testCaseNode;
                string testName = resultElem.GetAttribute("testName");
                string duration = resultElem.GetAttribute("duration").Split('.')[0];
                string outcome = resultElem.GetAttribute("outcome");
                string errorMessage = "";
                if (outcome != "Passed")
                {
                    XmlNode output = testCaseNode["Output"];
                    if (output != null)
                    {
                        XmlNode errorInfo = output["ErrorInfo"];
                        if (errorInfo != null)
                        {
                            XmlNode message = errorInfo["Message"];
                            if (message != null)
                            {
                                errorMessage = message.InnerText;
                            }
                        }
                    }
                }
                Results.Add(new TestResult(testName, duration, outcome, errorMessage));
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\NGGamePlayer.Test\ScheduleTests\Program.cs ===
﻿using System;
using System.Diagnostics;

namespace ScheduleTests
{
    public class Program
    {
        static void Main(string[] args)
        {
            Process.Start("PrivateRun.bat");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\NGGamePlayer.Test\RunTests\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("RunTests")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("ECF0D903-817E-4249-BC16-8AAAAC97D6B4")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\NGGamePlayer.Test\RunTests\ResultsReport.cs ===
﻿// <copyright file="ResultsReport.cs" company="Microsoft">Copyright (c) 2010 All Right Reserved
// </copyright>
// <author>Filip Skakun</author>
// <email>filip.skakun@gmail.com</email>
// <date>2010-02-19</date>
// <summary>Contains the class definition for ResultsReport class.</summary>

namespace RunTests
{
    using System;
    using System.Diagnostics;
    using System.IO;
    using System.Net.Mail;
    using System.Text;

    internal class ResultsReport
    {
        int passRate;
        string reportHtml;

        private string resultsFile
        {
            get
            {
                return Program.resultsFile;
            }
        }

        private string liveWebUrl
        {
            get
            {
                return Program.liveWebUrl;
            }
        }

        private string testServer
        {
            get
            {
                return Program.testServer;
            }
        }

        private string testClient
        {
            get
            {
                return Program.testClient;
            }
        }

        private DateTime startTime
        {
            get
            {
                return Program.startTime;
            }
        }

        private DateTime endTime
        {
            get
            {
                return Program.endTime;
            }
        }

        private DateTime runEndTime
        {
            get
            {
                return Program.runEndTime;
            }
        }

        private string commonResultsLocation
        {
            get
            {
                return Program.commonResultsLocation;
            }
        }

        private bool keepRunning
        {
            get
            {
                return Program.keepRunning;
            }
        }

        private bool timedOut
        {
            get
            {
                return Program.timedOut;
            }
        }

        private string resultCollectionQueryFilePath
        {
            get
            {
                return Program.resultCollectionQueryFilePath;
            }
        }

        private string resultCollectionName
        {
            get
            {
                return Program.resultCollectionName;
            }
        }

        private string version
        {
            get
            {
                return Program.version;
            }
        }

        private string versionDeterminedBy
        {
            get
            {
                return Program.versionDeterminedBy;
            }
        }

        private string versionDate
        {
            get
            {
                return Program.versionDate;
            }
        }

        private string binDir
        {
            get
            {
                return Program.binDir;
            }
        }

        private string testsDir
        {
            get
            {
                return Program.testsDir;
            }
        }

        private string subject
        {
            get
            {
                return Program.subject;
            }
        }

        private string from
        {
            get
            {
                return Program.from;
            }
        }

        private string to
        {
            get
            {
                return Program.to;
            }
        }

        internal ResultsReport()
        {
            CreateReportHtml();
        }

        /// <summary>
        /// Create the body of the email
        /// </summary>
        /// <returns>the body</returns>
        internal void CreateReportHtml()
        {
            // use stringbuilder to efficiently build the content
            StringBuilder reportHtmlBuilder = new StringBuilder();
            reportHtmlBuilder.Append("<html><head><style TYPE=\"text/css\">\r\n");

            // This indented syntax helps create html source in a human readable indented format that doesn't obfuscate the code here too much
            reportHtmlBuilder.Append(
@"<!-- 
body
{
    font-family: Calibri, Arial, Verdana, sans-serif;
}

th
{
    border-bottom-style: solid;
    border-left-style: solid;
    border-right-style: solid;
    border-top-style: solid;
    border-bottom-color: #666666;
    border-left-color: #666666;
    border-right-color: #666666;
    border-top-color: #666666;
    border-bottom-width: 1px;
    border-left-width: 1px;
    border-right-width: 1px;
    border-top-width: 1px;
    padding: 5px 5px 5px 5px;
    text-align:left;
    vertical-align:top;
    border-collapse:collapse;
    background-color:#dddddd;
    margin:0px;
}

td
{
    border-bottom-style: solid;
    border-left-style: solid;
    border-right-style: solid;
    border-top-style: solid;
    border-bottom-color: #666666;
    border-left-color: #666666;
    border-right-color: #666666;
    border-top-color: #666666;
    border-bottom-width: 1px;
    border-left-width: 1px;
    border-right-width: 1px;
    border-top-width: 1px;
    padding: 5px 5px 5px 5px;
    text-align:left;
    vertical-align:top;
    border-collapse:collapse;
    background-color:#f7f7f7;
    margin:0px;
}

table
{
    border-bottom-style: solid;
    border-left-style: solid;
    border-right-style: solid;
    border-top-style: solid;
    border-bottom-color: #666666;
    border-left-color: #666666;
    border-right-color: #666666;
    border-top-color: #666666;
    border-bottom-width: 1px;
    border-left-width: 1px;
    border-right-width: 1px;
    border-top-width: 1px;
    border-collapse:collapse;
    margin-top:5px;
    margin-bottom:5px;
}
--> 
</style></head>
<body>
");
            CreateReportBody(reportHtmlBuilder);

            reportHtmlBuilder.AppendLine("</body>");

            // body.Replace("<th>", "<th bgcolor=\"#dddddd\">");
            reportHtml = reportHtmlBuilder.ToString();
        }

        /// <summary>
        /// Parse the trx file and build an html report from the results.
        /// </summary>
        /// <param name="body"></param>
        private void CreateReportBody(StringBuilder reportHtmlBuilder)
        {
            bool trxPresent = File.Exists(resultsFile);
            TrxResults results = null;

            // summary
            reportHtmlBuilder.Append(@"<b><u>Summary</u></b><table>");
            reportHtmlBuilder.AppendFormat(
                "<tr><th>Server</th><td><a href=\"{0}\"><b>{1}</b></a></td></tr>\r\n",
                GetGamePageUrl(liveWebUrl, "4D5308DF"),
                testServer); // 4D5308DF is HexicRush
            reportHtmlBuilder.AppendFormat("<tr><th>Client</th><td style=\"background-color: #ffff99; font-weight:700\">{0}</td></tr>\r\n", testClient);
            if (trxPresent)
            {
                results = new TrxResults(resultsFile);
                passRate = results.PassRate;
                reportHtmlBuilder.AppendFormat(
@"<tr><th>Pass Rate</th>{0}</tr>
<tr><th>Total</th><td>{1}</td></tr>
<tr><th>Passed</th><td>{2}</td></tr>
{3}<tr><th>Started</th><td>{4}</td></tr>
<tr><th>Completed</th><td>{5}</td></tr>
<tr><th>Duration</th><td>{6}</td></tr>
</table><br/>
",
                    passRate == 100 ? string.Format("<td style=\"background-color: Lime; font-weight:900; text-align:center\">{0}%</td>", passRate) : string.Format("<td style=\"background-color: Red; font-weight:700\">{0}%</td>", passRate),
                    results.Total,
                    results.Passed,
                    results.Failed != 0 ? string.Format("<tr><th>Failed</th><td>{0}</td></tr>\r\n", results.Failed) : string.Empty,
                    startTime.ToString("MM/dd HH:mm"),
                    endTime.ToString("MM/dd HH:mm"),
                    (endTime - startTime).ToString().Substring(0, 8));
                reportHtmlBuilder.Append("<b><u>Test Results:</u></b>\r\n");

                // table header
                reportHtmlBuilder.Append("<table>\r\n");
                reportHtmlBuilder.Append("<tr><th>No.</th><th>Test Name</th><th>Duration</th><th>Result</th><th>Error Message</th></tr>\r\n");

                int i = 0;

                // table rows
                foreach (TestResult result in results.Results)
                {
                    i++;
                    if (result.Outcome == "Failed")
                    {
                        reportHtmlBuilder.AppendFormat("<tr><td style=\"text-align:right\">{0}</td><td>{1}</td><td>{2}</td><td style=\"background-color: Red\">{3}</td><td>{4}</td></tr>\r\n", i, result.TestName, result.Duration, result.Outcome, result.Message);
                    }
                    else if (result.Outcome == "Passed")
                    {
                        reportHtmlBuilder.AppendFormat("<tr><td style=\"text-align:right\">{0}</td><td>{1}</td><td>{2}</td><td style=\"background-color: Lime\">{3}</td><td style=\"text-align:center\">-</td></tr>\r\n", i, result.TestName, result.Duration, result.Outcome);
                    }
                    else
                    {
                        reportHtmlBuilder.AppendFormat("<tr><td style=\"text-align:right\">{0}</td><td>{1}</td><td>{2}</td><td style=\"background-color: Orange\">{3}</td><td>{4}</td></tr>\r\n", i, result.TestName, result.Duration, result.Outcome, result.Message);
                    }
                }

                reportHtmlBuilder.Append("</table>\r\n");

                string pathWhereResultsFileWillBeSaved = Path.Combine(commonResultsLocation, Path.GetFileName(resultsFile));

                // table end
                reportHtmlBuilder.AppendFormat(
    @"<b>Logs Directory</b> <a href={0}>{0}</a><br/>
<b>VS Log</b> <a href={1}>{1}</a><br/>
<b>Infrastructure Trace</b> <a href={2}>{2}</a><br/>",
                    commonResultsLocation,
                    pathWhereResultsFileWillBeSaved,
                    InfrastructureTrace.localTracePath);
            }
            else
            {
                passRate = 0;
                reportHtmlBuilder.AppendFormat(
@"<tr><th>Pass Rate</th>{0}</tr>
<tr><th>Started</th><td>{1}</td></tr>
<tr><th>Completed</th><td>{2}</td></tr>
<tr><th>Duration</th><td>{3}</td></tr>
</table><br/>
",
                    passRate == 100 ? string.Format("<td style=\"background-color: Lime; font-weight:900; text-align:center\">{0}%</td>", passRate) : string.Format("<td style=\"background-color: Red; font-weight:700\">{0}%</td>", passRate),
                    startTime.ToString("MM/dd HH:mm"),
                    endTime.ToString("MM/dd HH:mm"),
                    (endTime - startTime).ToString().Substring(0, 8));
                reportHtmlBuilder.Append("<br/><br/><b>Tests log file (.trx) not found. Tests execution failed!</b><br/><br/><br/>\r\n");
                reportHtmlBuilder.Append("<pre>\r\n");
                reportHtmlBuilder.Append(InfrastructureTrace.TracedSoFar());
                reportHtmlBuilder.Append("\r\n</pre>\r\n");

                // table end
                reportHtmlBuilder.AppendFormat(
@"<b>Logs Directory</b> <a href={0}>{0}</a><br/>
<b>VS Log</b> - the .trx file was not generated by mstest.exe<br/>
<b>Infrastructure Trace</b> <a href={1}>{1}</a><br/>",
                    commonResultsLocation,
                    InfrastructureTrace.shareTracePath);
            }

            // If RunTests is set up to keep running - this is not the last report and the results are not published yet. Just put a note about that in the report.
            if (keepRunning && !timedOut)
            {
                if (runEndTime == DateTime.MaxValue)
                {
                    reportHtmlBuilder.AppendFormat(
                        "<u>Note:</u> The test run is not yet completed. The results will not be published to the common share until it gets stopped manually or killed.<br/>The working directory might be accessible at: \\\\{0}\\{1}.<br/>",
                        Environment.MachineName,
                        Environment.CurrentDirectory.Replace(':', '$'));
                }
                else
                {
                    reportHtmlBuilder.AppendFormat(
                        "<u>Note:</u> The test run is not yet completed. The results will not be published to the common share until it completes at {0}.<br/>The working directory might be accessible at: \\\\{1}\\{2}.<br/>",
                        runEndTime,
                        Environment.MachineName,
                        Environment.CurrentDirectory.Replace(':', '$'));
                }
            }

            if (!string.IsNullOrEmpty(resultCollectionQueryFilePath))
            {
                reportHtmlBuilder.AppendFormat(
                    "<b>WTT Result Collection:</b> <a href=\"file:///{0}\">{1}</a><br/>\r\n",
                    Path.Combine(commonResultsLocation, Path.GetFileName(resultCollectionQueryFilePath)),
                    resultCollectionName);
            }

            reportHtmlBuilder.Append("<br/>\r\n");
            AppendRunDetails(reportHtmlBuilder);
            if (trxPresent && passRate != 100 && !string.IsNullOrEmpty(results.StdOut))
            {
                reportHtmlBuilder.Append("<b><u>Standard Output:</u></b><br/>\r\n");
                reportHtmlBuilder.Append("<pre>\r\n");
                reportHtmlBuilder.AppendFormat("{0}<br/>\r\n", results.StdOut);
                reportHtmlBuilder.Append("</pre>\r\n");
            }

            if (trxPresent && passRate != 100 && !string.IsNullOrEmpty(results.DebugTrace))
            {
                reportHtmlBuilder.Append("<b><u>Debug Trace:</u></b><br/>\r\n");
                reportHtmlBuilder.Append("<pre>\r\n");
                reportHtmlBuilder.AppendFormat("{0}<br/>\r\n", results.DebugTrace);
                reportHtmlBuilder.Append("</pre>\r\n");
            }
        }

        #region AppendRunDetails()
        /// <summary>
        /// Appends the run details to email body.
        /// </summary>
        /// <param name="body">The email body.</param>
        private void AppendRunDetails(StringBuilder body)
        {
            body.Append("<b><u>Build Description:</u></b>\r\n");
            body.Append("<table>\r\n");
            body.AppendFormat("<tr><th>Build Version</th><td>{0} {1}<br/><small style=\"font-weight: normal\">(determined by {2})</small></td></tr>\r\n", version, versionDate, versionDeterminedBy);
            body.AppendFormat("<tr><th>Build Drop Path</th><td>{0}</td></tr>\r\n", binDir);

            if (!string.IsNullOrEmpty(testsDir))
            {
                body.AppendFormat("<tr><th>Game Player Tests Path Used</th><td>{0}</td></tr>\r\n", testsDir);
            }

            body.Append("</table><br/>\r\n");
        }
        #endregion

        #region Send()
        /// <summary>
        /// Mail the report
        /// </summary>
        internal void Send()
        {
            InfrastructureTrace.Log("Building report");
            var smtpHost = "smtphost.redmond.corp.microsoft.com";
            var email = new MailMessage();

            email.IsBodyHtml = true;
            email.From = new MailAddress(from);
            InfrastructureTrace.Log("Adding following addressees for the e-mail: " + to);

            foreach (string oneTo in to.Split(';', ',', ' '))
            {
                if (oneTo != null && oneTo.Trim() != string.Empty)
                {
                    email.To.Add(oneTo);
                    InfrastructureTrace.Log("Adding addressee: " + oneTo);
                }
            }

            email.Body = reportHtml;
            email.Subject = string.Format(
                "{0} - {1}%{2} Passed",
                subject,
                passRate,
                passRate == 100 ? string.Empty : "(!)");

            // display the email body in the browser if running in dev environment
            if (liveWebUrl.Contains("dev.xbox"))
            {
                File.WriteAllText("z.html", email.Body);
                Process.Start("z.html");
            }

            // send the mail
            var client = new SmtpClient(smtpHost);
            client.UseDefaultCredentials = true;
            InfrastructureTrace.Log("Sending report to: " + to);
            client.Send(email);
            InfrastructureTrace.Log("Report sent");
            InfrastructureTrace.Save();
        }
        #endregion

        #region GetGamePageUrl()
        /// <summary>
        /// Gets the game page URL.
        /// In case of changes - need to update a copy of this method in NGGamePlayer.Text/Objects/NGGamePlayerObject.cs
        /// A copy instead of reference was used to reduce otherwise unnecessary complex references.
        /// </summary>
        /// <param name="liveWebUrl">URL of the LiveWeb site.</param>
        /// <param name="gameName">Name of the game.</param>
        /// <returns></returns>
        private static string GetGamePageUrl(string liveWebUrl, string gameName)
        {
            return string.Format("{0}/Game/{1}", liveWebUrl, gameName);
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\PDLC.Test\PDLC.Test.Common\PDLC.Test.Common.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using LiveN.Test;
using LiveNew.Test;

namespace PDLC.Tests
{
    public static class PDLCTestCommon
    {
        /// <summary>
        /// Random number generator used within multi tests
        /// </summary>
        public static Random Rand = new Random();

        /// <summary>
        /// Format used for requesting DateTime to our services
        /// </summary>
        public const string DateTimeUniversalFormat = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'";

        /// <summary>
        /// Token that can be used to purchase 4000 points
        /// </summary>
        public const string Prepaid4000TokenString = "RPQQJ-KWXGM-JV8KV-Q8RVX-VQCD3";

        public const string PartnerToken_Expired = PDLCServicesCommon.AUTH_PREFIX + @"<?xml version=""1.0"" encoding=""utf-16""?><saml:Assertion MajorVersion=""1"" MinorVersion=""1"" AssertionID=""SamlSecurityToken-5f3f77ed-06d8-48d0-8022-fd3ac4510598"" Issuer=""http://sts.xboxlive.com"" IssueInstant=""2010-11-05T22:46:32.336Z"" xmlns:saml=""urn:oasis:names:tc:SAML:1.0:assertion""><saml:Conditions NotBefore=""2010-11-05T22:46:32.336Z"" NotOnOrAfter=""2010-11-06T02:46:30.022Z""><saml:AudienceRestrictionCondition><saml:Audience>http://xboxlive.com/pdlc</saml:Audience></saml:AudienceRestrictionCondition></saml:Conditions><saml:AttributeStatement><saml:Subject><saml:NameIdentifier Format=""/xboxlive/nameFormat"" NameQualifier=""Microsoft-NameQualifier-domain"">XboxLive Partner security ticket</saml:NameIdentifier></saml:Subject><saml:Attribute AttributeName=""TitleID"" AttributeNamespace=""http://xboxlive.com/claims""><saml:AttributeValue>4D5308E2</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=""TitleVersion"" AttributeNamespace=""http://xboxlive.com/claims""><saml:AttributeValue>1</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=""PartnerID0"" AttributeNamespace=""http://xboxlive.com/claims""><saml:AttributeValue>2600292641993621</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=""Gamertag0"" AttributeNamespace=""http://xboxlive.com/claims""><saml:AttributeValue>mpdev1</saml:AttributeValue></saml:Attribute></saml:AttributeStatement><Signature xmlns=""http://www.w3.org/2000/09/xmldsig#""><SignedInfo><CanonicalizationMethod Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#""></CanonicalizationMethod><SignatureMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#rsa-sha1""></SignatureMethod><Reference URI=""#SamlSecurityToken-5f3f77ed-06d8-48d0-8022-fd3ac4510598""><Transforms><Transform Algorithm=""http://www.w3.org/2000/09/xmldsig#enveloped-signature""></Transform><Transform Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#""></Transform></Transforms><DigestMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#sha1""></DigestMethod><DigestValue>dBq4y9IFUUKcwR52LZAdmegy0hc=</DigestValue></Reference></SignedInfo><SignatureValue>FduOPawTvX5QST2gyYOa1bgNbrCUtvqjyJ9x14Pu/2OULl5+E9ydbWNNrwph/Xvoo5vpvuC+iE6aKfg/eYzvaShU33wAthMbzm6nJ2cB+SVLzDqZVtwHRRQm5a9rGV9ICAVWQGaPWXO0lhihf9vMWv6MGl56da0DqUyUtlGbZLQ=</SignatureValue><KeyInfo><X509Data><X509Certificate>MIICJzCCAZSgAwIBAgIQ7YujYuC55LtHk8DFyxqDQDAJBgUrDgMCHQUAMCAxHjAcBgNVBAMTFXN0cy50ZXN0Lnhib3hsaXZlLmNvbTAeFw0wOTA3MTMxNTU3MzdaFw0zOTEyMzEyMzU5NTlaMCAxHjAcBgNVBAMTFXN0cy50ZXN0Lnhib3hsaXZlLmNvbTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAgz0fPGlZa73r2TWmQsQy72aTiKdkAcuW18TyPUL3326CF03eiP3MDUR51U8flfssgt7+2lkuTYALTnCCG4n4XuRVu8JHGdAsGjSmfUpY+EGjxo6A3DuCDJF3Aa0uXzt72OShgF2IcX3+PMJnqryiMXyiPxi6/I1FEZ+i2FWdSYsCAwEAAaNqMGgwEwYDVR0lBAwwCgYIKwYBBQUHAwEwUQYDVR0BBEowSIAQodN354CzBxTNqhzW0A3gWqEiMCAxHjAcBgNVBAMTFXN0cy50ZXN0Lnhib3hsaXZlLmNvbYIQ7YujYuC55LtHk8DFyxqDQDAJBgUrDgMCHQUAA4GBAEeUyfLsUMQ1o3v9KmC4GV+9N0WMbmnv5iPusd0BiqtfNp0xcWUbwm1ea5Gw65nTmF5YJKmDN3VEIH4LyTgwTPHLP1QFq4XHY97GXYieeYLJluW+TQTk8rn2rPrYre9yWQDvkijCwERT8F6zV59RKHMAuv36b0oCtSqMCH6hxTRZ</X509Certificate></X509Data></KeyInfo></Signature></saml:Assertion>";
        public const string PartnerToken_TamperedValue = PDLCServicesCommon.AUTH_PREFIX + @"<?xml version=""1.0"" encoding=""utf-16""?><saml:Assertion MajorVersion=""1"" MinorVersion=""1"" AssertionID=""SamlSecurityToken-5f3f77ed-06d8-48d0-8022-fd3ac4510598"" Issuer=""http://sts.xboxlive.com"" IssueInstant=""2010-11-05T22:46:32.336Z"" xmlns:saml=""urn:oasis:names:tc:SAML:1.0:assertion""><saml:Conditions NotBefore=""2010-11-05T22:46:32.336Z"" NotOnOrAfter=""2010-11-06T02:46:30.022Z""><saml:AudienceRestrictionCondition><saml:Audience>http://xboxlive.com/TAMPERED</saml:Audience></saml:AudienceRestrictionCondition></saml:Conditions><saml:AttributeStatement><saml:Subject><saml:NameIdentifier Format=""/xboxlive/nameFormat"" NameQualifier=""Microsoft-NameQualifier-domain"">XboxLive Partner security ticket</saml:NameIdentifier></saml:Subject><saml:Attribute AttributeName=""TitleID"" AttributeNamespace=""http://xboxlive.com/claims""><saml:AttributeValue>4D5308E2</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=""TitleVersion"" AttributeNamespace=""http://xboxlive.com/claims""><saml:AttributeValue>1</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=""PartnerID0"" AttributeNamespace=""http://xboxlive.com/claims""><saml:AttributeValue>2600292641993621</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=""Gamertag0"" AttributeNamespace=""http://xboxlive.com/claims""><saml:AttributeValue>mpdev1</saml:AttributeValue></saml:Attribute></saml:AttributeStatement><Signature xmlns=""http://www.w3.org/2000/09/xmldsig#""><SignedInfo><CanonicalizationMethod Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#""></CanonicalizationMethod><SignatureMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#rsa-sha1""></SignatureMethod><Reference URI=""#SamlSecurityToken-5f3f77ed-06d8-48d0-8022-fd3ac4510598""><Transforms><Transform Algorithm=""http://www.w3.org/2000/09/xmldsig#enveloped-signature""></Transform><Transform Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#""></Transform></Transforms><DigestMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#sha1""></DigestMethod><DigestValue>dBq4y9IFUUKcwR52LZAdmegy0hc=</DigestValue></Reference></SignedInfo><SignatureValue>FduOPawTvX5QST2gyYOa1bgNbrCUtvqjyJ9x14Pu/2OULl5+E9ydbWNNrwph/Xvoo5vpvuC+iE6aKfg/eYzvaShU33wAthMbzm6nJ2cB+SVLzDqZVtwHRRQm5a9rGV9ICAVWQGaPWXO0lhihf9vMWv6MGl56da0DqUyUtlGbZLQ=</SignatureValue><KeyInfo><X509Data><X509Certificate>MIICJzCCAZSgAwIBAgIQ7YujYuC55LtHk8DFyxqDQDAJBgUrDgMCHQUAMCAxHjAcBgNVBAMTFXN0cy50ZXN0Lnhib3hsaXZlLmNvbTAeFw0wOTA3MTMxNTU3MzdaFw0zOTEyMzEyMzU5NTlaMCAxHjAcBgNVBAMTFXN0cy50ZXN0Lnhib3hsaXZlLmNvbTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAgz0fPGlZa73r2TWmQsQy72aTiKdkAcuW18TyPUL3326CF03eiP3MDUR51U8flfssgt7+2lkuTYALTnCCG4n4XuRVu8JHGdAsGjSmfUpY+EGjxo6A3DuCDJF3Aa0uXzt72OShgF2IcX3+PMJnqryiMXyiPxi6/I1FEZ+i2FWdSYsCAwEAAaNqMGgwEwYDVR0lBAwwCgYIKwYBBQUHAwEwUQYDVR0BBEowSIAQodN354CzBxTNqhzW0A3gWqEiMCAxHjAcBgNVBAMTFXN0cy50ZXN0Lnhib3hsaXZlLmNvbYIQ7YujYuC55LtHk8DFyxqDQDAJBgUrDgMCHQUAA4GBAEeUyfLsUMQ1o3v9KmC4GV+9N0WMbmnv5iPusd0BiqtfNp0xcWUbwm1ea5Gw65nTmF5YJKmDN3VEIH4LyTgwTPHLP1QFq4XHY97GXYieeYLJluW+TQTk8rn2rPrYre9yWQDvkijCwERT8F6zV59RKHMAuv36b0oCtSqMCH6hxTRZ</X509Certificate></X509Data></KeyInfo></Signature></saml:Assertion>";
        public const string PartnerToken_TamperedSignatureValue = PDLCServicesCommon.AUTH_PREFIX + @"<?xml version=""1.0"" encoding=""utf-16""?><saml:Assertion MajorVersion=""1"" MinorVersion=""1"" AssertionID=""SamlSecurityToken-5f3f77ed-06d8-48d0-8022-fd3ac4510598"" Issuer=""http://sts.xboxlive.com"" IssueInstant=""2010-11-05T22:46:32.336Z"" xmlns:saml=""urn:oasis:names:tc:SAML:1.0:assertion""><saml:Conditions NotBefore=""2010-11-05T22:46:32.336Z"" NotOnOrAfter=""2010-11-06T02:46:30.022Z""><saml:AudienceRestrictionCondition><saml:Audience>http://xboxlive.com/pdlc</saml:Audience></saml:AudienceRestrictionCondition></saml:Conditions><saml:AttributeStatement><saml:Subject><saml:NameIdentifier Format=""/xboxlive/nameFormat"" NameQualifier=""Microsoft-NameQualifier-domain"">XboxLive Partner security ticket</saml:NameIdentifier></saml:Subject><saml:Attribute AttributeName=""TitleID"" AttributeNamespace=""http://xboxlive.com/claims""><saml:AttributeValue>4D5308E2</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=""TitleVersion"" AttributeNamespace=""http://xboxlive.com/claims""><saml:AttributeValue>1</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=""PartnerID0"" AttributeNamespace=""http://xboxlive.com/claims""><saml:AttributeValue>2600292641993621</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=""Gamertag0"" AttributeNamespace=""http://xboxlive.com/claims""><saml:AttributeValue>mpdev1</saml:AttributeValue></saml:Attribute></saml:AttributeStatement><Signature xmlns=""http://www.w3.org/2000/09/xmldsig#""><SignedInfo><CanonicalizationMethod Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#""></CanonicalizationMethod><SignatureMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#rsa-sha1""></SignatureMethod><Reference URI=""#SamlSecurityToken-5f3f77ed-06d8-48d0-8022-fd3ac4510598""><Transforms><Transform Algorithm=""http://www.w3.org/2000/09/xmldsig#enveloped-signature""></Transform><Transform Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#""></Transform></Transforms><DigestMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#sha1""></DigestMethod><DigestValue>dBq4y9IFUUKcwR52LZAdmegy0hc=</DigestValue></Reference></SignedInfo><SignatureValue>TAMPERED WITH FduOPawTvX5QST2gyYOa1bgNbrCUtvqjyJ9x14Pu/2OULl5+E9ydbWNNrwph/Xvoo5vpvuC+iE6aKfg/eYzvaShU33wAthMbzm6nJ2cB+SVLzDqZVtwHRRQm5a9rGV9ICAVWQGaPWXO0lhihf9vMWv6MGl56da0DqUyUtlGbZLQ=</SignatureValue><KeyInfo><X509Data><X509Certificate>MIICJzCCAZSgAwIBAgIQ7YujYuC55LtHk8DFyxqDQDAJBgUrDgMCHQUAMCAxHjAcBgNVBAMTFXN0cy50ZXN0Lnhib3hsaXZlLmNvbTAeFw0wOTA3MTMxNTU3MzdaFw0zOTEyMzEyMzU5NTlaMCAxHjAcBgNVBAMTFXN0cy50ZXN0Lnhib3hsaXZlLmNvbTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAgz0fPGlZa73r2TWmQsQy72aTiKdkAcuW18TyPUL3326CF03eiP3MDUR51U8flfssgt7+2lkuTYALTnCCG4n4XuRVu8JHGdAsGjSmfUpY+EGjxo6A3DuCDJF3Aa0uXzt72OShgF2IcX3+PMJnqryiMXyiPxi6/I1FEZ+i2FWdSYsCAwEAAaNqMGgwEwYDVR0lBAwwCgYIKwYBBQUHAwEwUQYDVR0BBEowSIAQodN354CzBxTNqhzW0A3gWqEiMCAxHjAcBgNVBAMTFXN0cy50ZXN0Lnhib3hsaXZlLmNvbYIQ7YujYuC55LtHk8DFyxqDQDAJBgUrDgMCHQUAA4GBAEeUyfLsUMQ1o3v9KmC4GV+9N0WMbmnv5iPusd0BiqtfNp0xcWUbwm1ea5Gw65nTmF5YJKmDN3VEIH4LyTgwTPHLP1QFq4XHY97GXYieeYLJluW+TQTk8rn2rPrYre9yWQDvkijCwERT8F6zV59RKHMAuv36b0oCtSqMCH6hxTRZ</X509Certificate></X509Data></KeyInfo></Signature></saml:Assertion>";

        /// <summary>
        /// Constructs a Single Use Offer. Can only be redeemed once and then it becomes invalid to redeem for anyone else.
        /// </summary>
        public static OfferContext Offer_SingleUse()
        {
            OfferContext offer = new OfferContext();

            // Single use Token give to us by yuanfeiw
            offer.BillingToken = "BRGCY-KMVFJ-CFVQM-826QP-K96MH";

            // These can be set after calling Verify Token and then call FAST with returned OfferId: http://le-xblob-bld02:12030/marketplacecatalog/v1/product/en-us?tiers=2&offers=00000001-0000-4000-8000-0000584107f6
            offer.GameContentTypeId = 23;
            offer.OfferId = new Guid("00000001-0000-4000-8000-0000584107f6");
            offer.PointsPriceToken = 800;
            offer.ProductId = new Guid("00000000-0000-4000-8000-0000584107f6");
            offer.Title = "Texas Hold'em";

            return offer;
        }

        /// <summary>
        /// Constructs an Avatar Item OfferContext
        /// </summary>
        public static OfferContext Offer_AvatarItem()
        {
            OfferContext offer = new OfferContext();

            // Randomly picked one from the FAST query: http://le-xblob-bld01:12030/MarketplaceCatalog/v1/product/en-US?tiers=2&producttypes=47&stores=1

            offer.GameContentTypeId = 47; // entry/productType
            offer.OfferId = new Guid("01234586-0000-4000-8000-0000425607ed"); // entry/offerInstances/offerInstance[0]/offerId
            offer.PointsPricePoints = 240; // entry/offerInstances/offerInstance[0]/price
            offer.PointsPriceToken = 240; // entry/offerInstances/offerInstance[0]/price
            offer.ProductId = new Guid("00000ffc-ac04-4241-c1d8-d1c8425607ed"); // entry/offerInstances/offerInstance[0]/productInstance/productId
            offer.Title = "Abraxas Costume"; // entry/reducedTitle

            return offer;
        }

        /// <summary>
        /// Constructs a Consumable Token OfferContext
        /// </summary>
        public static OfferContext Offer_ConsumableToken()
        {
            OfferContext offer = new OfferContext();

            // Just picked a random item base off this FAST query: http://le-xblob-bld02:12030/MarketplaceCatalog/v1/product/en-US?tiers=2.3&producttypes=47&stores=1
            offer.GameContentTypeId = 47; // entry/productType
            offer.OfferId = new Guid("022f0017-0000-4000-8000-000058580816"); // entry/offerInstances/offerInstance[0]/offerId
            offer.PointsPricePoints = 80; // entry/offerInstances/offerInstance[0]/price
            offer.PointsPriceToken = 80; // entry/offerInstances/offerInstance[0]/price
            offer.ProductId = new Guid("00000020-7a2c-1231-c2e6-996858580816"); // entry/offerInstances/offerInstance[0]/productInstance/productId
            offer.Title = "Black Boots"; // entry/reducedTitle

            return offer;
        }

        /// <summary>
        /// Verify the response object against the passed in Offer
        /// </summary>
        /// <param name="response">Response from the service</param>
        /// <param name="offer">Expected Offer</param>
        public static void ValidatePurchaseReceiptAgainstOffer(OfferContext offer, PurchaseReceiptResponseBody purchaseReceipt)
        {
            Assert.AreEqual(offer.Title, purchaseReceipt.Title, "Title is invalid for offer: " + offer.OfferId);
            Assert.AreEqual(offer.OfferId, purchaseReceipt.OfferId, "OfferIds should be the same.");

            // Make sure that there are MediaInstanceURLs to be verified against. If not, then just ignor the response MediaInstanceURLs
            if (offer.MediaInstanceURLs != null)
            {
                Assert.IsNotNull(purchaseReceipt.MediaInstanceURLs, "MediaInstanceURLs is required.");
                Assert.AreEqual(offer.MediaInstanceURLs.Count, purchaseReceipt.MediaInstanceURLs.Count, "The expected number of MediaInstanceURLs is not correct.");

                for (int i = 0; i < offer.MediaInstanceURLs.Count; i++)
                {
                    Assert.AreEqual(offer.MediaInstanceURLs[i], purchaseReceipt.MediaInstanceURLs[i], "MediaInstanceURLs should be identical.");
                }
            }

            if (offer.GameContentTypeId == (int)MediaType.MobileConsumable)
            {
                // Now verify Comsumable values
                Assert.IsFalse(purchaseReceipt.isNullAssetBalance, "Offer was a Consumable. Thus is should have an AssetBalance.");
                Assert.AreEqual(offer.AssetId, purchaseReceipt.AssetBalance.AssetId, "AssetIds should be the same.");
                Assert.AreEqual(offer.AssetQuantity, purchaseReceipt.AssetBalance.Quantity, "Asset Quantity should be the same.");
            }
            else
            {
                // This was not a Mobile Consumable Offer
                Assert.IsTrue(purchaseReceipt.isNullAssetBalance, "This is not a consumable Offer. No Asset information should be returned.");
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\PDLC.Test\PDLC.Test.Common\UserAccount.cs ===
﻿using System;
using System.Diagnostics;

using live.common;

using LiveNew.Test;

using LiveN.Test.Avatar;
using LiveN.Test.Users;

namespace LiveN.Test
{
    /// <summary>
    /// Generic user Account class
    /// </summary>
    public class UserAccount
    {
        /// <summary>
        /// Token that can be used to purchase 4000 points
        /// </summary>
        public const string Prepaid4000TokenString = "RPQQJ-KWXGM-JV8KV-Q8RVX-VQCD3";

        /// <summary>
        /// Base Account. Building on top of this in a generic way.
        /// </summary>
        private readonly Account userAccount;

        /// <summary>
        /// Sets up all the default configuration required to communicate with the back end systems
        /// </summary>
        static UserAccount()
        {
            // Take the current settings from the current global settings
            Environments.SetEnvironment(CurrentEnvironmentSettings.SelectedEnvironment.LiveLibSettings.LiveLibEnvironment);

            if (CurrentEnvironmentSettings.SelectedEnvironment.LiveLibSettings.UseStf)
            {
                Environments.SetStfEnvironment(CurrentEnvironmentSettings.SelectedEnvironment.LiveLibSettings.LiveLibEnvironment);
            }
        }

        /// <summary>
        /// Create a User with the designated account setting
        /// </summary>
        /// <param name="userTier">XBox Live Tier level</param>
        public UserAccount(XblLiveUserTier userTier)
        {
            UserSettings userSettings = new UserSettings();

            // Set the user's xbob live tier level
            switch (userTier)
            {
                case XblLiveUserTier.Silver:

                    userSettings.tier = XblUserTier.Silver;

                    break;

                case XblLiveUserTier.Gold:

                    userSettings.tier = XblUserTier.Gold;

                    break;

                case XblLiveUserTier.GoldLight:

                    userSettings.tier = XblUserTier.Gold;
                    userSettings.LightAccount = true;

                    break;

                case XblLiveUserTier.GoldChild:

                    userSettings.parentalControl = ParentalControl.Strict;

                    break;
            }

            this.userAccount = CreateUser(userSettings);
        }

        /// <summary>
        /// Create a User with the designated account setting and add points
        /// </summary>
        /// <param name="userTier">XBox Live Tier level</param>
        /// <param name="withPoints">Add points to this account</param>
        public UserAccount(XblLiveUserTier userTier, bool withPoints)
            : this(userTier)
        {
            if (withPoints)
            {
                this.AddPoints();
            }
        }

        /// <summary>
        /// [Extreme Customisation ONLY]Create an account with custom settings
        /// </summary>
        /// <param name="userSettings">Custom User settings</param>
        /// <remarks>If this is being called consistently with the same type of user creation, then the creation should be wrapped and expose generically</remarks>
        public UserAccount(UserSettings userSettings)
        {
            this.userAccount = CreateUser(userSettings);
        }

        /// <summary>
        /// Email address used for this user
        /// </summary>
        public string Email
        {
            get
            {
                return this.userAccount.Email;
            }
        }

        /// <summary>
        /// Password used for this user
        /// </summary>
        public string Password
        {
            get
            {
                return this.userAccount.Password;
            }
        }

        /// <summary>
        /// Gamer tag used for this user
        /// </summary>
        public string GamerTag
        {
            get
            {
                return this.userAccount.Gamertag;
            }
        }

        /// <summary>
        /// Xuid to identify this within our system
        /// </summary>
        public ulong Xuid
        {
            get
            {
                return this.userAccount.Xuid;
            }
        }

        /// <summary>
        /// Added 4000 points to this user's account
        /// </summary>
        public uint AddPoints()
        {
            uint usersPointsBalance;

            usersPointsBalance = this.userAccount.PurchasePointsWithPrepaidCode(Offers.PointsOffers.PP4000, Prepaid4000TokenString);

            return usersPointsBalance;
        }

        /// <summary>
        /// Set the user's ability to purchase PDLC or not
        /// </summary>
        /// <param name="canPurchase">Allow the user to purchase PDLC</param>
        public void SetCanPuchasePDLC(bool canPurchase)
        {
            FamilyOption familyoption;
            FamilySettings familySettings;

            if (canPurchase)
            {
                familyoption = FamilyOption.Allow;
            }
            else
            {
                familyoption = FamilyOption.Restrict;
            }

            familySettings = new FamilySettings(    PrivacyOption.Blocked,
                                                    PrivacyOption.Blocked,
                                                    PrivacyOption.Blocked,
                                                    PrivacyOption.Blocked,
                                                    PrivacyOption.Blocked,
                                                    PrivacyOption.Blocked,
                                                    PrivacyOption.Blocked,
                                                    FamilyOption.Restrict,
                                                    FamilyOption.Restrict,
                                                    FamilyOption.Restrict,
                                                    familyoption
                                                );

            this.userAccount.ResetFamilySettings(familySettings);
        }

        /// <summary>
        /// Gets this users Avatar body type
        /// </summary>
        /// <param name="avatarBodyType">Desired body type</param>
        public void SetAvatarBodyType(AvatarBodyType avatarBodyType)
        {
            byte[] manifestData = ManifestHelper.CreateRandomManifest((uint)avatarBodyType);

            this.userAccount.Avatar.SetManifest(manifestData);

            if (!ManifestHelper.ManifestsAreEqual(manifestData, this.userAccount.Avatar.WriteManifest()))
            {
                throw new Exception("Manifest written to the service does not match the manifest read from the service.");
            }
        }

        /// <summary>
        /// Creates a new Xbox Live user account based on the given parameters.
        /// </summary>
        /// <param name="userSettings">Settings used to create the user</param>
        /// <returns>Created user account</returns>
        public static Account CreateUser(UserSettings userSettings)
        {
            Account account;
            AccountSettings accountSettings;

            accountSettings = new AccountSettings(  userSettings.tier, 
                                                    live.common.PassportType.Real,
                                                    string.Empty, 
                                                    string.Empty, 
                                                    string.Empty, 
                                                    userSettings.countryId, 
                                                    userSettings.languageId, 
                                                    userSettings.parentalControl, 
                                                    !userSettings.LightAccount
                                                 );

            account = new Account(accountSettings);

            return account;
        }
    }

    /// <summary>
    /// XBox live tier levels
    /// </summary>
    public enum XblLiveUserTier
    {
        Gold,
        Silver,
                
        /// <summary>
        /// Gold account that has not set up an account yet
        /// </summary>
        GoldLight,

        /// <summary>
        /// Strict restrictions but allowed to purchase DLC
        /// </summary>
        GoldChild
    }

    /// <summary>
    /// Defines all the excepted Avatar Body types
    /// </summary>
    public enum AvatarBodyType : uint
    {
        Male = 1, 
        Female = 2, 

        /// <summary>
        /// Either Male or Female
        /// </summary>
        Random = 3
    }

    /// <summary>
    /// Strucuture used to store all the different user settings
    /// </summary>
    public class UserSettings
    {
        /// <summary>
        /// Country id of the user (i.e. US = 103)
        /// </summary>
        public CountryId countryId;

        /// <summary>
        /// Language id of the user (i.e. EN = 1)
        /// </summary>
        public LanguageId languageId;

        /// <summary>
        /// Level of parental control on the user (None = adult, Partial = adolescent, Strict = child)
        /// </summary>
        public ParentalControl parentalControl;

        /// <summary>
        /// Xbox subscription level (Xbox1 = -1, NewUser = 0, Silver = 3, Gold = 6, FamilyGold = 9)
        /// </summary>
        public XblUserTier tier;

        /// <summary>
        /// True if the user is missing billing information. False otherwise.
        /// </summary>
        public bool LightAccount;

        /// <summary>
        /// Create the default User Settings
        /// </summary>
        public UserSettings()
        {
            this.countryId = CountryId.US;
            this.languageId = LanguageId.en;
            this.parentalControl = ParentalControl.None;
            this.LightAccount = false;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\PDLC.Test\PDLC.Test.Common\PdlcErrors.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace PDLC.Tests
{
    /// <summary>
    /// Pdlc defined error code wrapped by ServiceErrorMessage and returned to client. 
    /// Taken from dev code: $DEPOT$\product\Source\Pdlc\PdlcService\PdlcErrors.cs
    /// </summary>
    public sealed class PdlcErrors
    {
        private PdlcErrors()
        { }
        private const uint PDLC_FACILITY_PREFIX = 0x80080000;
        private const uint PDLC_ERROR_BASE = 0x6000;

        public const uint PDLC_E_UNSPECIFIED_ERROR = 0x80086000;
        public const uint PDLC_E_INVALID_PARAMETER = 0x80086001;
        public const uint PDLC_E_LEGAL_LOCALE_NOT_SUPPORTED = 0x80086002;
        public const uint PDLC_E_USER_NOT_AUTHENTICATED = 0x80086003;
        public const uint PDLC_E_TITLE_ID_MISSING_IN_PARTNER_TOKEN = 0x80086004;
        public const uint PDLC_E_TITLE_ID_WRONG_FORMAT_IN_PARTNER_TOKEN = 0x80086005;
        public const uint PDLC_E_XBL_SERVICE_UNAVAILABLE = 0x80086006;
        public const uint PDLC_E_XBL_CALLS_THROTTLED = 0x80086007;
        public const uint PDLC_E_LIVEN_NPDB_EXCEPTION = 0x80086008;
        public const uint PDLC_E_NO_PURCHASE_ENTRY_FOR_TRANSACTION = 0x80086009;
    }

    /// <summary>
    /// Taken from XOnline MetaData from
    /// XblCore.dll -> xonline.common.service.HResult.cs
    /// </summary>
    public struct XOnline_HResults
    {
        public const uint DEPRECATED_XONLINE_E_NO_SCOID = 2148875011;
        public const uint DEPRECATED_XONLINE_E_NO_VALID_LICENSE = 2148875009;
        public const uint DEPRECATED_XONLINE_E_OFFERING_INELIGIBLE_FOR_OFFER = 2148872196;
        public const uint DEPRECATED_XONLINE_E_OFFERING_INVALID_DEST_MACHINE = 2148872221;
        public const uint DEPRECATED_XONLINE_E_OFFERING_INVALID_SOURCE_MACHINE = 2148872220;
        public const uint DEPRECATED_XONLINE_E_OFFERING_NOT_ACQUIRABLE = 2148872215;
        public const uint DEPRECATED_XONLINE_E_SYNCCAST_CLIENT_CERT_ACCESS_DENIED = 2148874500;
        public const uint DEPRECATED_XONLINE_E_SYNCCAST_CLIENT_CERT_INVALID = 2148874499;
        public const uint DEPRECATED_XONLINE_E_SYNCCAST_DEVICE_REVOKED = 2148874754;
        public const uint DEPRECATED_XONLINE_E_SYNCCAST_EMPTY_DEVICE_NAME = 2148874504;
        public const uint DEPRECATED_XONLINE_E_SYNCCAST_INVALID_OFFER_ACTION = 2148874501;
        public const uint DEPRECATED_XONLINE_E_SYNCCAST_LICENSE_EMPTY = 2148874498;
        public const uint DEPRECATED_XONLINE_E_SYNCCAST_LICENSE_TOO_LARGE = 2148874497;
        public const uint DEPRECATED_XONLINE_E_SYNCCAST_PLAYER_APP_REVOKED = 2148874752;
        public const uint DEPRECATED_XONLINE_E_SYNCCAST_PLAYER_APP_SECURITY_UPGRADE = 2148874753;
        public const uint DEPRECATED_XONLINE_E_SYNCCAST_REACHED_COUNTER_LIMIT = 2148874502;
        public const uint DEPRECATED_XONLINE_E_SYNCCAST_REACHED_EXPIRATION_DATE = 2148874503;
        public const uint DEPRECATED_XONLINE_E_SYNCCAST_UNKNOWN_ERROR = 2148874496;
        public const uint DEPRECATED_XONLINE_E_VOD_INVALID_MACHINE = 2148875012;
        public const uint DEPRECATED_XONLINE_E_VOD_LICENSE_DELIVERED = 2148875013;
        public const uint DEPRECATED_XONLINE_E_VOD_LICENSE_EXPIRED = 2148875010;
        public const uint DEPRECATED_XONLINE_E_WMIS_EMPTY_TITLE_TEXT = 2148874243;
        public const uint DEPRECATED_XONLINE_S_OTHER_LICENSE_TRANSFER_FAILED = 1388574;
        public const uint E_ABORT = 2147500036;
        public const uint E_ACCESSDENIED = 2147942405;
        public const uint E_FAIL = 2147500037;
        public const uint E_INVALID_DATA = 2147942413;
        public const uint E_INVALIDARG = 2147942487;
        public const uint E_OUTOFMEMORY = 2147942414;
        public const uint E_UNEXPECTED = 2147549183;
        public const uint S_FALSE = 1;
        public const uint S_OK = 0;
        public const uint TOOLS_SERVER_E_FILE_NOT_FOUND = 2148991232;
        public const uint TOOLS_SERVER_E_INTERRUPTED_TASK = 2148991236;
        public const uint TOOLS_SERVER_E_INVALID_TITLE_ID = 2148991237;
        public const uint TOOLS_SERVER_E_SD_ADD_FAILED = 2148991233;
        public const uint TOOLS_SERVER_E_SD_SUBMIT_FAILED = 2148991234;
        public const uint TOOLS_SERVER_E_TMR_STATS = 2148991235;
        public const uint XCBK_E_INVALID_SVC_COMPONENT = 2148873472;
        public const uint XCBK_E_KEY_NOT_FOUND_IN_MESSAGE = 2148873474;
        public const uint XCBK_E_SETTING_KEY_NOT_FOUND = 2148873475;
        public const uint XCBK_E_SUBSCRIPTION_ACCOUNT_MISMATCH = 2148873478;
        public const uint XCBK_E_SUBSCRIPTION_NOT_FOUND = 2148873473;
        public const uint XCBK_E_UNAUTHORIZED_REQUEST = 2148873476;
        public const uint XCBK_E_UNKNOWN_ERROR = 2148873477;
        public const uint XOFF_E_ALREADY_OWN_MAX = 2148872204;
        public const uint XOFF_E_BAD_REQUEST = 2148872193;
        public const uint XOFF_E_BILLING_SERVER_ERROR = 2148872201;
        public const uint XOFF_E_INELIGIBLE_FOR_OFFER = 2148872196;
        public const uint XOFF_E_INVALID_OFFER_ID = 2148872195;
        public const uint XOFF_E_INVALID_PRODUCT = 2148872207;
        public const uint XOFF_E_INVALID_USER = 2148872194;
        public const uint XOFF_E_NO_CHARGE = 2148872205;
        public const uint XOFF_E_NOTHING_TO_CANCEL = 2148872203;
        public const uint XOFF_E_OFFER_EXPIRED = 2148872197;
        public const uint XOFF_E_OFFER_NOT_CANCELABLE = 2148872202;
        public const uint XOFF_E_PERMISSION_DENIED = 2148872206;
        public const uint XOFF_E_PURCHASE_BLOCKED = 2148872199;
        public const uint XOFF_E_PURCHASE_DENIED = 2148872200;
        public const uint XOFF_E_SERVICE_UNREACHABLE = 2148872198;
        public const uint XONLINE_E_AAINFO_TOKEN_DATA_NOTFOUND = 2149056769;
        public const uint XONLINE_E_AAINFO_TOKEN_FIELD_NOTVALID = 2149056770;
        public const uint XONLINE_E_ACCESS_DENIED = 2148859926;
        public const uint XONLINE_E_ACCESS_TOKEN_ERROR = 2148859937;
        public const uint XONLINE_E_ACCOUNTS_ACCOUNT_BANNED = 2148876293;
        public const uint XONLINE_E_ACCOUNTS_ACCOUNT_SUSPENDED = 2148876345;
        public const uint XONLINE_E_ACCOUNTS_ACCOUNT_UNBAN_BLOCKED = 2148876325;
        public const uint XONLINE_E_ACCOUNTS_ACKNOWLEDGE_DOWNGRADE_ERROR = 2148876415;
        public const uint XONLINE_E_ACCOUNTS_ADD_DEPENDENT_ERROR = 2148876458;
        public const uint XONLINE_E_ACCOUNTS_ADD_PAYMENT_INSTRUMENT_ERROR = 2148876364;
        public const uint XONLINE_E_ACCOUNTS_ADDITIONAL_DATA_REQUIRED = 2148876327;
        public const uint XONLINE_E_ACCOUNTS_ALREADY_DEPROVISIONED = 2148876304;
        public const uint XONLINE_E_ACCOUNTS_ARGO_AUTHENTICATE_ACCOUNT_ERROR = 2148876373;
        public const uint XONLINE_E_ACCOUNTS_ARGO_SIGN_IN_ERROR = 2148876372;
        public const uint XONLINE_E_ACCOUNTS_BAD_BILLING_ADDRESS = 2148876292;
        public const uint XONLINE_E_ACCOUNTS_BAD_CREDIT_CARD = 2148876291;
        public const uint XONLINE_E_ACCOUNTS_BILLING_PROVIDER_TIMEOUT = 2148876318;
        public const uint XONLINE_E_ACCOUNTS_BIRTHDATE_INVALID = 2148876466;
        public const uint XONLINE_E_ACCOUNTS_CANNOT_REPLACE_VALID_PASSPORT = 2148876429;
        public const uint XONLINE_E_ACCOUNTS_CANNOT_UNGRADUATE_USER = 2148876448;
        public const uint XONLINE_E_ACCOUNTS_CHANGE_SUBSCRIPTION_PAYMENT_INSTRUMENT_ERROR = 2148876374;
        public const uint XONLINE_E_ACCOUNTS_CLEAR_SUBSCRIPTIONS_ERROR = 2148876375;
        public const uint XONLINE_E_ACCOUNTS_CLIENT_TYPE_CONFIG_ERROR = 2148876340;
        public const uint XONLINE_E_ACCOUNTS_CLIENT_TYPE_INVALID = 2148876342;
        public const uint XONLINE_E_ACCOUNTS_CLIENT_TYPE_MISSING = 2148876341;
        public const uint XONLINE_E_ACCOUNTS_COUNTRY_NOT_AUTHORIZED = 2148876343;
        public const uint XONLINE_E_ACCOUNTS_CREATE_ACCOUNT_ERROR = 2148876376;
        public const uint XONLINE_E_ACCOUNTS_CREATE_MOBILE_ACCOUNT_ERROR = 2148876456;
        public const uint XONLINE_E_ACCOUNTS_CREDIT_CARD_REQUIRED = 2148876312;
        public const uint XONLINE_E_ACCOUNTS_DATA_CHANGED = 2148876296;
        public const uint XONLINE_E_ACCOUNTS_DEPENDENT_MOVE_SUBSCRIPTION = 2148876506;
        public const uint XONLINE_E_ACCOUNTS_DISABLE_SUBSCRIPTION_ERROR = 2148876377;
        public const uint XONLINE_E_ACCOUNTS_ENUM_FAMILY_MEMBERS_ERROR = 2148876457;
        public const uint XONLINE_E_ACCOUNTS_ENUMERATE_ELIGIBLE_ERROR = 2148876378;
        public const uint XONLINE_E_ACCOUNTS_FAMILY_GOLD_ALREADY_ASSIGNED_ERROR = 2148876477;
        public const uint XONLINE_E_ACCOUNTS_FAMILY_GOLD_ASSIGNMENT_INELIGIBLE_ERROR = 2148876468;
        public const uint XONLINE_E_ACCOUNTS_FAMILY_GOLD_BILLING_REGION_ERROR = 2148876478;
        public const uint XONLINE_E_ACCOUNTS_FAMILY_GOLD_COOLDOWN_ERROR = 2148876479;
        public const uint XONLINE_E_ACCOUNTS_FAMILY_GOLD_DEPENDENT_HAS_FAMILY = 2148876490;
        public const uint XONLINE_E_ACCOUNTS_FAMILY_GOLD_NO_SEATS_REMAIN_ERROR = 2148876476;
        public const uint XONLINE_E_ACCOUNTS_FAMILY_GOLD_NOT_DEPENDENT_ERROR = 2148876475;
        public const uint XONLINE_E_ACCOUNTS_FAMILY_GOLD_TOO_MANY_USERS_ERROR = 2148876480;
        public const uint XONLINE_E_ACCOUNTS_FAMILY_GOLD_UNTRUSTED_CONSOLE_ERROR = 2148876481;
        public const uint XONLINE_E_ACCOUNTS_FORBIDDEN_GAMERTAG = 2148876467;
        public const uint XONLINE_E_ACCOUNTS_GENERATE_GAMERTAG_ERROR = 2148876451;
        public const uint XONLINE_E_ACCOUNTS_GET_ACCOUNT_INFO_ERROR = 2148876416;
        public const uint XONLINE_E_ACCOUNTS_GET_ACCOUNT_INFO_FROM_PASSPORT_ERROR = 2148876417;
        public const uint XONLINE_E_ACCOUNTS_GET_ACCOUNT_STATUS_ERROR = 2148876371;
        public const uint XONLINE_E_ACCOUNTS_GET_ANID_ERROR = 2148876379;
        public const uint XONLINE_E_ACCOUNTS_GET_BASE_SUBSCRIPTION_ERROR = 2148876471;
        public const uint XONLINE_E_ACCOUNTS_GET_BILLING_NOTIFICATIONS_ERROR = 2148876439;
        public const uint XONLINE_E_ACCOUNTS_GET_CONSOLE_TRUST_LEVEL = 2148876453;
        public const uint XONLINE_E_ACCOUNTS_GET_DEPENDENT_POINTS_BALANCE_ERROR = 2148876505;
        public const uint XONLINE_E_ACCOUNTS_GET_DEPENDENT_SIGNED_PUID_ERROR = 2148876470;
        public const uint XONLINE_E_ACCOUNTS_GET_LINKED_GAMERTAG_ERROR = 2148876380;
        public const uint XONLINE_E_ACCOUNTS_GET_NO_AGE_OUT_ERROR = 2148876381;
        public const uint XONLINE_E_ACCOUNTS_GET_PARENTAL_CONTROL_GROUP_TEMPLATES_ERROR = 2148876491;
        public const uint XONLINE_E_ACCOUNTS_GET_PARENTAL_CONTROLS_ERROR = 2148876469;
        public const uint XONLINE_E_ACCOUNTS_GET_PAYMENT_INSTRUMENTS_ERROR = 2148876383;
        public const uint XONLINE_E_ACCOUNTS_GET_PAYMNET_INFO_ERROR = 2148876382;
        public const uint XONLINE_E_ACCOUNTS_GET_POINTS_BALANCE_ERROR = 2148876418;
        public const uint XONLINE_E_ACCOUNTS_GET_POSTAL_CODE_ERROR = 2148876384;
        public const uint XONLINE_E_ACCOUNTS_GET_SUBSCRIPTION_INFO_ERROR = 2148876438;
        public const uint XONLINE_E_ACCOUNTS_GET_SUBSCRIPTION_INFO_SILVER_USER = 2148876447;
        public const uint XONLINE_E_ACCOUNTS_GET_SUBSCRIPTION_STATUS_ERROR = 2148876385;
        public const uint XONLINE_E_ACCOUNTS_GET_USER_INFO_ERROR = 2148876386;
        public const uint XONLINE_E_ACCOUNTS_GET_USER_PARENTAL_CONTROL_GROUP_ERROR = 2148876492;
        public const uint XONLINE_E_ACCOUNTS_GET_USER_SUBSCRIPTION_DETAILS_ERROR = 2148876419;
        public const uint XONLINE_E_ACCOUNTS_GET_USER_TENURE_DATABASE_ERROR = 2148876434;
        public const uint XONLINE_E_ACCOUNTS_GET_USER_TENURE_ERROR = 2148876433;
        public const uint XONLINE_E_ACCOUNTS_GET_USER_TENURE_NO_LEVELS = 2148876444;
        public const uint XONLINE_E_ACCOUNTS_GET_USER_TENURE_NO_MILESTONES = 2148876445;
        public const uint XONLINE_E_ACCOUNTS_GET_USER_TENURE_NO_POLICY = 2148876442;
        public const uint XONLINE_E_ACCOUNTS_GET_USER_TENURE_NO_TENURE = 2148876443;
        public const uint XONLINE_E_ACCOUNTS_GET_USER_TYPE_ERROR = 2148876420;
        public const uint XONLINE_E_ACCOUNTS_GET_USER_WEB_INFO_ERROR = 2148876421;
        public const uint XONLINE_E_ACCOUNTS_GRADUATE_USER_ALREADY = 2148864047;
        public const uint XONLINE_E_ACCOUNTS_GRADUATE_USER_ERROR = 2148876387;
        public const uint XONLINE_E_ACCOUNTS_GRADUATE_USER_NO_PI = 2148864045;
        public const uint XONLINE_E_ACCOUNTS_GRADUATE_USER_NO_PRIVILEGE = 2148864042;
        public const uint XONLINE_E_ACCOUNTS_GRADUATE_USER_NOT_ADULT = 2148864044;
        public const uint XONLINE_E_ACCOUNTS_GRADUATE_USER_NOT_CHILD = 2148864043;
        public const uint XONLINE_E_ACCOUNTS_GRADUATE_USER_PI_MISMATCH = 2148864046;
        public const uint XONLINE_E_ACCOUNTS_GRADUATE_USER_QUEUED = 2148864049;
        public const uint XONLINE_E_ACCOUNTS_INVALID_AGE = 2148876449;
        public const uint XONLINE_E_ACCOUNTS_INVALID_BETA_GROUPID = 2148876483;
        public const uint XONLINE_E_ACCOUNTS_INVALID_CONSOLE_TRUST_LEVEL = 2148876455;
        public const uint XONLINE_E_ACCOUNTS_INVALID_COUNTRYID = 2148876464;
        public const uint XONLINE_E_ACCOUNTS_INVALID_DEPENDENT_BASE = 2148876460;
        public const uint XONLINE_E_ACCOUNTS_INVALID_DEPENDENT_PRIMARY = 2148876485;
        public const uint XONLINE_E_ACCOUNTS_INVALID_DEPENDENT_TIER = 2148876461;
        public const uint XONLINE_E_ACCOUNTS_INVALID_FAMILY_SUBSCRIPTION = 2148876459;
        public const uint XONLINE_E_ACCOUNTS_INVALID_FAMILYGOLD_CONVERTION_VALUE = 2148876474;
        public const uint XONLINE_E_ACCOUNTS_INVALID_GAMERTAG = 2148876465;
        public const uint XONLINE_E_ACCOUNTS_INVALID_KINGDOM = 2148876289;
        public const uint XONLINE_E_ACCOUNTS_INVALID_MACHINEPUID = 2148876482;
        public const uint XONLINE_E_ACCOUNTS_INVALID_OWNER_PASSPORT_ERROR = 2148876437;
        public const uint XONLINE_E_ACCOUNTS_INVALID_PRIVILEGE = 2148876305;
        public const uint XONLINE_E_ACCOUNTS_INVALID_SIGNED_PASSPORT_PUID = 2148876306;
        public const uint XONLINE_E_ACCOUNTS_INVALID_USER = 2148876290;
        public const uint XONLINE_E_ACCOUNTS_INVALID_VOUCHER = 2148876295;
        public const uint XONLINE_E_ACCOUNTS_LINK_ACCOUNT_ERROR = 2148876388;
        public const uint XONLINE_E_ACCOUNTS_MAX_ACCOUNTS_REACHED = 2148876450;
        public const uint XONLINE_E_ACCOUNTS_MIGRATE_BAD_SUBSCRIPTION = 2148876309;
        public const uint XONLINE_E_ACCOUNTS_MIGRATE_NOT_XBOX1_USER = 2148876308;
        public const uint XONLINE_E_ACCOUNTS_MIGRATE_NOT_XBOXCOM_USER = 2148876313;
        public const uint XONLINE_E_ACCOUNTS_MIGRATE_USER_ERROR = 2148876389;
        public const uint XONLINE_E_ACCOUNTS_MIGRATION_ERROR = 2148876351;
        public const uint XONLINE_E_ACCOUNTS_MIGRATION_OFFER_NOT_FOUND = 2148876319;
        public const uint XONLINE_E_ACCOUNTS_MULTIPLE_ACTIVE_BASE_SUBSCRIPTION = 2148876472;
        public const uint XONLINE_E_ACCOUNTS_NAME_TAKEN = 2148876288;
        public const uint XONLINE_E_ACCOUNTS_NEGATIVE_POINTS_VALUE = 2148876497;
        public const uint XONLINE_E_ACCOUNTS_NO_ACTIVE_BASE_SUBSCRIPTION = 2148876473;
        public const uint XONLINE_E_ACCOUNTS_NO_AUTHENTICATION_DATA = 2148876339;
        public const uint XONLINE_E_ACCOUNTS_NOT_A_RENEWAL_OFFER = 2148876301;
        public const uint XONLINE_E_ACCOUNTS_NOT_A_VOUCHER_OFFER = 2148876314;
        public const uint XONLINE_E_ACCOUNTS_NOT_XENON_USER = 2148876311;
        public const uint XONLINE_E_ACCOUNTS_OFFLINE_XUID = 2148876355;
        public const uint XONLINE_E_ACCOUNTS_OFFLINE_XUID_ALREADY_USED = 2148876317;
        public const uint XONLINE_E_ACCOUNTS_OPERATION_BLOCKED = 2148876298;
        public const uint XONLINE_E_ACCOUNTS_PASSPORT_ALREADY_LINKED = 2148876307;
        public const uint XONLINE_E_ACCOUNTS_PASSPORT_CHANGE_PASSWORD_ERROR = 2148876422;
        public const uint XONLINE_E_ACCOUNTS_PASSPORT_CREATE_ERROR = 2148876423;
        public const uint XONLINE_E_ACCOUNTS_PASSPORT_GET_BUDDY_GAMERTAG_ERROR = 2148876424;
        public const uint XONLINE_E_ACCOUNTS_PASSPORT_GET_ENCRYPTED_PROXY_PARAMETERS_ERROR = 2148876365;
        public const uint XONLINE_E_ACCOUNTS_PASSPORT_GET_FRIEND_MEMBER_NAME_ERROR = 2148876366;
        public const uint XONLINE_E_ACCOUNTS_PASSPORT_GET_MEMBER_NAME_ERROR = 2148876426;
        public const uint XONLINE_E_ACCOUNTS_PASSPORT_GET_PUID_FROM_MEMBER_NAME_ERROR = 2148876367;
        public const uint XONLINE_E_ACCOUNTS_PASSPORT_GET_SECRET_QUESTIONS_ERROR = 2148876368;
        public const uint XONLINE_E_ACCOUNTS_PASSPORT_GET_USER_DATA_ERROR = 2148876390;
        public const uint XONLINE_E_ACCOUNTS_PASSPORT_LOAD_USER_ERROR = 2148876353;
        public const uint XONLINE_E_ACCOUNTS_PASSPORT_LOGIN_ERROR = 2148876369;
        public const uint XONLINE_E_ACCOUNTS_PASSPORT_NOT_LINKED = 2148876310;
        public const uint XONLINE_E_ACCOUNTS_PAYPAL_UNSUPPORTED_COUNTRY = 2148876427;
        public const uint XONLINE_E_ACCOUNTS_PERMISSION_DENIED = 2148876294;
        public const uint XONLINE_E_ACCOUNTS_POINTS_TRANSFER_ERROR = 2148876484;
        public const uint XONLINE_E_ACCOUNTS_POSTAL_CODE_REQUIRED = 2148876299;
        public const uint XONLINE_E_ACCOUNTS_PUID_TO_ANID_ERROR = 2148876352;
        public const uint XONLINE_E_ACCOUNTS_PUID_TO_ANID_FAILED = 2148876359;
        public const uint XONLINE_E_ACCOUNTS_REACHED_TRIAL_OFFER_LIMIT = 2148876315;
        public const uint XONLINE_E_ACCOUNTS_RECOVER_ACCOUNT_ERROR = 2148876356;
        public const uint XONLINE_E_ACCOUNTS_REMOVE_PAYMENT_INSTRUMENT_ERROR = 2148876391;
        public const uint XONLINE_E_ACCOUNTS_RENEWAL_ERROR = 2148876357;
        public const uint XONLINE_E_ACCOUNTS_RENEWAL_IS_LOCKED = 2148876302;
        public const uint XONLINE_E_ACCOUNTS_REPLACE_OWNER_PASSPORT_ERROR = 2148876430;
        public const uint XONLINE_E_ACCOUNTS_REPLACE_PASSPORT_QUEUED = 2148876432;
        public const uint XONLINE_E_ACCOUNTS_REPLACE_USER_PASSPORT_ERROR = 2148876431;
        public const uint XONLINE_E_ACCOUNTS_RESERVE_GAMERTAG_ERROR = 2148876425;
        public const uint XONLINE_E_ACCOUNTS_RESERVE_NAME_ERROR = 2148876392;
        public const uint XONLINE_E_ACCOUNTS_RESTORE_ACCOUNT_ERROR = 2148876393;
        public const uint XONLINE_E_ACCOUNTS_SERVICE_NOT_PROVISIONED = 2148876324;
        public const uint XONLINE_E_ACCOUNTS_SET_ACCOUNT_INFO_ERROR = 2148876363;
        public const uint XONLINE_E_ACCOUNTS_SET_ACCOUNT_STATUS_ERROR = 2148876403;
        public const uint XONLINE_E_ACCOUNTS_SET_CONSOLE_TRUST_LEVEL = 2148876454;
        public const uint XONLINE_E_ACCOUNTS_SET_NO_AGE_OUT_ERROR = 2148876400;
        public const uint XONLINE_E_ACCOUNTS_SET_NO_AGE_OUT_QUEUED = 2148876347;
        public const uint XONLINE_E_ACCOUNTS_SET_PAYMENT_INFO_ERROR = 2148876402;
        public const uint XONLINE_E_ACCOUNTS_SET_USER_PIN_ERROR = 2148876404;
        public const uint XONLINE_E_ACCOUNTS_SET_USER_SETTINGS_ERROR = 2148876405;
        public const uint XONLINE_E_ACCOUNTS_SWITCH_OWNER_PASSPORT_ERROR = 2148876436;
        public const uint XONLINE_E_ACCOUNTS_SWITCH_PASSPORT_ADULT_TO_CHILD = 2148876336;
        public const uint XONLINE_E_ACCOUNTS_SWITCH_PASSPORT_ERROR = 2148876354;
        public const uint XONLINE_E_ACCOUNTS_SWITCH_PASSPORT_INELIGIBLE = 2148876326;
        public const uint XONLINE_E_ACCOUNTS_SWITCH_PASSPORT_NEW_PASSPORT_INELIGIBLE = 2148864050;
        public const uint XONLINE_E_ACCOUNTS_SWITCH_PASSPORT_NO_BIRTHDATE = 2148876329;
        public const uint XONLINE_E_ACCOUNTS_SWITCH_PASSPORT_QUEUED = 2148876323;
        public const uint XONLINE_E_ACCOUNTS_SWITCH_PASSPORT_SCS_PENDING = 2148876328;
        public const uint XONLINE_E_ACCOUNTS_SWITCH_USER_COUNTRY_ADULT_TO_CHILD = 2148876498;
        public const uint XONLINE_E_ACCOUNTS_SWITCH_USER_COUNTRY_CHILD_ACCOUNT = 2148876503;
        public const uint XONLINE_E_ACCOUNTS_SWITCH_USER_COUNTRY_DATABASE_ERROR = 2148876499;
        public const uint XONLINE_E_ACCOUNTS_SWITCH_USER_COUNTRY_ERROR = 2148876487;
        public const uint XONLINE_E_ACCOUNTS_SWITCH_USER_COUNTRY_FAMILY_ACCOUNT = 2148876504;
        public const uint XONLINE_E_ACCOUNTS_SWITCH_USER_COUNTRY_INELIGIBLE = 2148876488;
        public const uint XONLINE_E_ACCOUNTS_SWITCH_USER_COUNTRY_INVALID_COUNTRY = 2148876489;
        public const uint XONLINE_E_ACCOUNTS_SWITCH_USER_COUNTRY_INVALID_LOCALE = 2148876493;
        public const uint XONLINE_E_ACCOUNTS_SWITCH_USER_COUNTRY_NO_MIGRATION_OFFER = 2148876500;
        public const uint XONLINE_E_ACCOUNTS_SWITCH_USER_COUNTRY_NON_XBOX_SUBSCRIPTION = 2148876502;
        public const uint XONLINE_E_ACCOUNTS_SWITCH_USER_COUNTRY_SUSPENDED_SUBSCRIPTION = 2148876501;
        public const uint XONLINE_E_ACCOUNTS_SWITCH_USER_COUNTRY_TRY_AGAIN = 2148876495;
        public const uint XONLINE_E_ACCOUNTS_SWITCH_USER_DATE_OF_BIRTH_ERROR = 2148876435;
        public const uint XONLINE_E_ACCOUNTS_TAG_CHANGE_REQUIRED = 2148876344;
        public const uint XONLINE_E_ACCOUNTS_TERMS_OF_SERVICE_ERROR = 2148876370;
        public const uint XONLINE_E_ACCOUNTS_TERMS_OF_SERVICE_NOT_ACCEPTED = 2148876346;
        public const uint XONLINE_E_ACCOUNTS_TERMS_OF_USE_ERROR = 2148876401;
        public const uint XONLINE_E_ACCOUNTS_TROUBLESHOOT_ACCOUNT_ERROR = 2148876406;
        public const uint XONLINE_E_ACCOUNTS_TRY_AGAIN_LATER = 2148876300;
        public const uint XONLINE_E_ACCOUNTS_UNDER_AGE = 2148876320;
        public const uint XONLINE_E_ACCOUNTS_UNKNOWN_ERROR_CHANGE_STATE = 2148876462;
        public const uint XONLINE_E_ACCOUNTS_UNKNOWN_ERROR_MOVE_DEP_SUBSCRIPTION = 2148876463;
        public const uint XONLINE_E_ACCOUNTS_UPDATE_PARENTAL_CONTROL_GROUP_ERROR = 2148876496;
        public const uint XONLINE_E_ACCOUNTS_UPDATE_PARENTAL_CONTROLS_ERROR = 2148876407;
        public const uint XONLINE_E_ACCOUNTS_UPDATE_PAYMENT_INSTRUMENT_ERROR = 2148876408;
        public const uint XONLINE_E_ACCOUNTS_UPDATE_XBOX_COM_ACTIVITY_ERROR = 2148876360;
        public const uint XONLINE_E_ACCOUNTS_UPS_GET_PROFILE_ERROR = 2148876377;
        public const uint XONLINE_E_ACCOUNTS_UPS_UPDATE_PROFILE_ERROR = 2148876362;
        public const uint XONLINE_E_ACCOUNTS_USER_FREE_GAMERTAG_CHANGE_NOT_ELIGIBLE_ERROR = 2148876452;
        public const uint XONLINE_E_ACCOUNTS_USER_GET_ACCOUNT_INFO_ERROR = 2148876440;
        public const uint XONLINE_E_ACCOUNTS_USER_OPTED_OUT = 2148876441;
        public const uint XONLINE_E_ACCOUNTS_VERIFY_BILLING_INFO_ERROR = 2148876409;
        public const uint XONLINE_E_ACCOUNTS_VERIFY_BILLING_PIN_ERROR = 2148876410;
        public const uint XONLINE_E_ACCOUNTS_VERIFY_PARENT_CREDIT_CARD_ERROR = 2148876411;
        public const uint XONLINE_E_ACCOUNTS_VERIFY_VOUCHER_ERROR = 2148876412;
        public const uint XONLINE_E_ACCOUNTS_VERIFY_VOUCHER_GET_OFFER_ERROR = 2148876413;
        public const uint XONLINE_E_ACCOUNTS_VOUCHER_ALREADY_USED = 2148876297;
        public const uint XONLINE_E_ACCOUNTS_VOUCHER_INVALID_FOR_TIER = 2148876322;
        public const uint XONLINE_E_ACCOUNTS_VOUCHER_REQUIRED = 2148876303;
        public const uint XONLINE_E_ACCOUNTS_WEB_GET_USER_SETTINGS_ERROR = 2148876414;
        public const uint XONLINE_E_ACCOUNTS_XBOX1_LOGON_BLOCKED = 2148876321;
        public const uint XONLINE_E_ACCOUNTS_XBOX1_MANAGEMENT_BLOCKED = 2148876316;
        public const uint XONLINE_E_ACTIVE_AUTH_ERROR = 2148859940;
        public const uint XONLINE_E_ALERTS_SUBSCRIBER_NOT_FOUND = 2148889090;
        public const uint XONLINE_E_ALERTS_SUBSCRIPTION_NOT_FOUND = 2148889089;
        public const uint XONLINE_E_ARBITRATION_1_XBOX_1_USER_SESSION_NOT_ALLOWED = 2148905229;
        public const uint XONLINE_E_ARBITRATION_INCONSISTENT_COMPETITION_STATUS = 2148905226;
        public const uint XONLINE_E_ARBITRATION_INCONSISTENT_FLAGS = 2148905225;
        public const uint XONLINE_E_ARBITRATION_INVALID_REQUEST = 2148905218;
        public const uint XONLINE_E_ARBITRATION_INVALID_TEAMTICKET = 2148905231;
        public const uint XONLINE_E_ARBITRATION_NEED_TO_REGISTER_FIRST = 2148905223;
        public const uint XONLINE_E_ARBITRATION_REGISTRATION_FLAGS_MISMATCH = 2148905220;
        public const uint XONLINE_E_ARBITRATION_REGISTRATION_SESSION_TIME_MISMATCH = 2148905221;
        public const uint XONLINE_E_ARBITRATION_REGISTRATION_TOO_LATE = 2148905222;
        public const uint XONLINE_E_ARBITRATION_REPORT_ALREADY_CALLED = 2148905227;
        public const uint XONLINE_E_ARBITRATION_REPORT_TOO_LARGE = 2148905230;
        public const uint XONLINE_E_ARBITRATION_SERVICE_UNAVAILABLE = 2148905217;
        public const uint XONLINE_E_ARBITRATION_SESSION_NOT_FOUND = 2148905219;
        public const uint XONLINE_E_ARBITRATION_TIME_EXTENSION_NOT_ALLOWED = 2148905224;
        public const uint XONLINE_E_ARBITRATION_TOO_MANY_XBOXES_IN_SESSION = 2148905228;
        public const uint XONLINE_E_AUDIT_INVALID_SUBSYSTEM = 2148881152;
        public const uint XONLINE_E_AUDIT_LOG_FAILURE = 2148881154;
        public const uint XONLINE_E_AUDIT_NO_SETTING = 2148881153;
        public const uint XONLINE_E_AUTHDATA_MISMATCH = 2148859936;
        public const uint XONLINE_E_AUTOUPD_MACHINE_BLOCKED = 2148872209;
        public const uint XONLINE_E_BAD_CONTENT_TYPE = 2148859916;
        public const uint XONLINE_E_BILLING_ACCOUNT_CANNOT_PURCHASE_FREE_TRIAL = 2148978159;
        public const uint XONLINE_E_BILLING_ACCOUNT_CLOSED = 2148965841;
        public const uint XONLINE_E_BILLING_ACCOUNT_DELADMIN_ROLE_EXCEEDED = 2148975566;
        public const uint XONLINE_E_BILLING_ACCOUNT_HOLDER_NAME_NOT_FOUND_ERROR = 2148872282;
        public const uint XONLINE_E_BILLING_ACCOUNT_NOT_CLOSED = 2148965931;
        public const uint XONLINE_E_BILLING_ACCOUNT_NUMBER_NOT_FOUND_ERROR = 2148872283;
        public const uint XONLINE_E_BILLING_ACCOUNT_WITHOUT_ADDRESS = 2148935754;
        public const uint XONLINE_E_BILLING_ACCT_ALREADY_REFERRED = 2148969422;
        public const uint XONLINE_E_BILLING_ACTION_NOT_APPLICABLE_FOR_PAYMENT_TYPE = 2148978156;
        public const uint XONLINE_E_BILLING_ACTIVATE_TOKEN_RANGE_NOT_PRESENT = 2148930515;
        public const uint XONLINE_E_BILLING_ACTIVE_SUBSCRIPTIONS = 2148965446;
        public const uint XONLINE_E_BILLING_ACTIVE_SUBSCRIPTIONS_EXIST = 2148965915;
        public const uint XONLINE_E_BILLING_ADD_USER_TO_SERVICE_INSTANCE = 2148965795;
        public const uint XONLINE_E_BILLING_ADDITIONAL_ACCOUNT_DATA_REQUIRED = 2148969381;
        public const uint XONLINE_E_BILLING_ADDRESS_COUNTRY_ACCOUNT_MISMATCH = 2148965473;
        public const uint XONLINE_E_BILLING_ADDRESS_NOT_FOUND_ERROR = 2148872281;
        public const uint XONLINE_E_BILLING_ADDRESS_VALIDATION_FAILURE = 2148985441;
        public const uint XONLINE_E_BILLING_ADJECTIVELIST_NOT_CONFIGURED = 2148872344;
        public const uint XONLINE_E_BILLING_ADJUST_RESOURCE_BALANCE_FOR_NONACTIVE_SUBS = 2148935695;
        public const uint XONLINE_E_BILLING_ADJUSTMENT_TOOBIG = 2148965849;
        public const uint XONLINE_E_BILLING_ADJUSTMENT_TOOSMALL = 2148965851;
        public const uint XONLINE_E_BILLING_AGREEMENT_ALREADY_SIGNED = 2148966290;
        public const uint XONLINE_E_BILLING_AGREEMENT_NOT_SIGNED = 2148969593;
        public const uint XONLINE_E_BILLING_ALREADY_ACTIVATED = 2148930670;
        public const uint XONLINE_E_BILLING_ALREADY_BANNED = 2148955545;
        public const uint XONLINE_E_BILLING_ALREADY_IN_SPECIFIED_STATE = 2148965441;
        public const uint XONLINE_E_BILLING_ALREADY_OFFSET_TAX = 2148946673;
        public const uint XONLINE_E_BILLING_ALREADY_REPLACED_TOKEN = 2148930810;
        public const uint XONLINE_E_BILLING_AMOUNT_IN_PROCESS = 2148946020;
        public const uint XONLINE_E_BILLING_AMOUNT_NOT_COLLECTED_YET = 2148946010;
        public const uint XONLINE_E_BILLING_AREA_CODE_NOT_FOUND_ERROR = 2148872279;
        public const uint XONLINE_E_BILLING_ARITHMETIC_OVERFLOW_FOR_ADD_OR_UPDATE_USAGE = 2148946410;
        public const uint XONLINE_E_BILLING_AUTHORIZATION_FAILED = 2148955665;
        public const uint XONLINE_E_BILLING_AVS_FAILED = 2148955660;
        public const uint XONLINE_E_BILLING_BAD_BEGIN_BILLING_PERIOD = 2148967945;
        public const uint XONLINE_E_BILLING_BAD_BILLING_PERIOD_LENGTH = 2148935643;
        public const uint XONLINE_E_BILLING_BAD_BUSINESSLOCATIONCODE_LENGTH = 2148985488;
        public const uint XONLINE_E_BILLING_BAD_CITYNAME_LENGTH = 2148985483;
        public const uint XONLINE_E_BILLING_BAD_COUNTRYCODE_LENGTH = 2148985484;
        public const uint XONLINE_E_BILLING_BAD_CREDIT_CARD_TYPE_ERROR = 2148872285;
        public const uint XONLINE_E_BILLING_BAD_CREDIT_VALUE = 2148872338;
        public const uint XONLINE_E_BILLING_BAD_CURRENCYCODE_LENGTH = 2148985491;
        public const uint XONLINE_E_BILLING_BAD_END_BILLING_PERIOD = 2148935650;
        public const uint XONLINE_E_BILLING_BAD_OBJECT_ID_LENGTH = 2148935641;
        public const uint XONLINE_E_BILLING_BAD_PRODUCTCODE_LENGTH = 2148985487;
        public const uint XONLINE_E_BILLING_BAD_PUID = 2148935630;
        public const uint XONLINE_E_BILLING_BAD_RETURN_STATEMENT_SET = 2148935644;
        public const uint XONLINE_E_BILLING_BAD_RETURN_STATEMENT_SET_INDICATOR = 2148967940;
        public const uint XONLINE_E_BILLING_BAD_RETURN_STATEMENT_SET_INDICATOR2 = 2148946365;
        public const uint XONLINE_E_BILLING_BAD_START_BILLING_PERIOD = 2148935649;
        public const uint XONLINE_E_BILLING_BAD_START_END_BILLING_PERIOD = 2148967960;
        public const uint XONLINE_E_BILLING_BAD_STATECODE_LENGTH = 2148985485;
        public const uint XONLINE_E_BILLING_BAD_TRANSACTIONDATE_LENGTH = 2148985489;
        public const uint XONLINE_E_BILLING_BAD_VATREGISTRATION_LENGTH = 2148985490;
        public const uint XONLINE_E_BILLING_BAD_WTCODE_LENGTH = 2148985492;
        public const uint XONLINE_E_BILLING_BAD_ZIPCODE_LENGTH = 2148985486;
        public const uint XONLINE_E_BILLING_BADCANCELMODE = 2148935445;
        public const uint XONLINE_E_BILLING_BADSAMECARDUSEDMULTIPLETIMES = 2148950480;
        public const uint XONLINE_E_BILLING_BADXML = 2148935443;
        public const uint XONLINE_E_BILLING_BADZIP = 2148935461;
        public const uint XONLINE_E_BILLING_BAN_NULL_INPUT_PARAMETER = 2148955540;
        public const uint XONLINE_E_BILLING_BANNED_PAYMENT_INSTRUMENT = 2148955590;
        public const uint XONLINE_E_BILLING_BANNEDPERSON = 2148955580;
        public const uint XONLINE_E_BILLING_BELOW_IMMEDIATE_SETTLE_MINIMUM = 2148935709;
        public const uint XONLINE_E_BILLING_BILLING_PERIOD_GREATER_THAN_SUBSCRIPTION_DURATION = 2148967980;
        public const uint XONLINE_E_BILLING_BILLING_PERIOD_NEGATIVE = 2148967955;
        public const uint XONLINE_E_BILLING_BILLINGPERIOD_PAST = 2148965846;
        public const uint XONLINE_E_BILLING_BLACKLIST_ACTION_NOT_PERFORMED = 2148966570;
        public const uint XONLINE_E_BILLING_BLACKLIST_EFFECTIVE_DATE_LESS_THAN_ORDER_CREATION_DATE = 2148930680;
        public const uint XONLINE_E_BILLING_BRANCH_CODE_NOT_FOUND_ERROR = 2148872286;
        public const uint XONLINE_E_BILLING_CALCULATE_TAX_ERROR = 2148872294;
        public const uint XONLINE_E_BILLING_CAN_NOT_DELETE_DEFAULT_PAYOUT_PREFERENCE = 2148935756;
        public const uint XONLINE_E_BILLING_CANCELREFUND_BOTH_LINE_AND_RELATED_LINE = 2148978090;
        public const uint XONLINE_E_BILLING_CANCELREFUND_OFFSET_OF_OFFSET = 2148978040;
        public const uint XONLINE_E_BILLING_CANNOT_CONVERT_BACK_TO_WHOLESALE = 2148968145;
        public const uint XONLINE_E_BILLING_CANNOT_EXCEED_MAX_OWNERSHIP = 2148965881;
        public const uint XONLINE_E_BILLING_CANNOT_OFFSET_HARD_SOFT_DECLINED = 2148946005;
        public const uint XONLINE_E_BILLING_CANNOT_OFFSET_ZERO_AMOUNT = 2148946015;
        public const uint XONLINE_E_BILLING_CANNOT_REFER_SELF = 2148935703;
        public const uint XONLINE_E_BILLING_CANNOT_REMOVE_SELF = 2148935442;
        public const uint XONLINE_E_BILLING_CANNOT_SPECIFY_ACCOUNT_ID_ERROR = 2148872277;
        public const uint XONLINE_E_BILLING_CANNOT_SPECIFY_ANNIVERSARY_DATE_ERROR = 2148872276;
        public const uint XONLINE_E_BILLING_CANNOT_SPECIFY_BILLABLE_ACCOUNT_ID = 2148935759;
        public const uint XONLINE_E_BILLING_CANNOT_SPECIFY_PAYMENT_ID_ERROR = 2148872278;
        public const uint XONLINE_E_BILLING_CANNOT_SPECIFY_PI_DURING_RENEW = 2148968150;
        public const uint XONLINE_E_BILLING_CANNOT_UPDATE_CURRENCY = 2148965873;
        public const uint XONLINE_E_BILLING_CANT_STOP_TAIWAN_TAXINV = 2148966277;
        public const uint XONLINE_E_BILLING_CD_NOTFOUND = 2148969574;
        public const uint XONLINE_E_BILLING_CERT_INAVLID = 2148984440;
        public const uint XONLINE_E_BILLING_CHARGEBACK_INFO_MISSING = 2148935743;
        public const uint XONLINE_E_BILLING_CHARGEBACK_NOT_FOUND = 2148980765;
        public const uint XONLINE_E_BILLING_CHARGEBACK_NOT_MATCH = 2148980775;
        public const uint XONLINE_E_BILLING_CHARGEBACK_PROCESSING_FAILURE = 2148935741;
        public const uint XONLINE_E_BILLING_CHILD_CONTENT_PURCHASE_NOT_ALLOWED = 2148872293;
        public const uint XONLINE_E_BILLING_CHILD_OFFER_PURCHASE_NOT_ALLOWED = 2148872300;
        public const uint XONLINE_E_BILLING_CITY_NOT_FOUND_ERROR = 2148872291;
        public const uint XONLINE_E_BILLING_COMPUTE_ONLY = 2148966090;
        public const uint XONLINE_E_BILLING_CONVERSION_CREDITS_NOT_ENABLED = 2148966660;
        public const uint XONLINE_E_BILLING_CONVERSION_NEEDTODEPROVISION = 2148965971;
        public const uint XONLINE_E_BILLING_COUNTRY_CODE_MAPPOINT_NOT_ENABLED = 2148965611;
        public const uint XONLINE_E_BILLING_COUNTRY_CODE_NOT_FOUND_ERROR = 2148872292;
        public const uint XONLINE_E_BILLING_COUNTRY_CURRENCY_PI_MISMATCH = 2148955585;
        public const uint XONLINE_E_BILLING_COUNTRY_ID_NOT_FOUND = 2148872242;
        public const uint XONLINE_E_BILLING_COUNTRY_MAPPOINT_DISABLED = 2148969638;
        public const uint XONLINE_E_BILLING_COUNTRY_NOT_SUPPORTED = 2148969637;
        public const uint XONLINE_E_BILLING_CREATION = 2148969346;
        public const uint XONLINE_E_BILLING_CREDIT_AMOUNT_OVER_LIMIT = 2148946051;
        public const uint XONLINE_E_BILLING_CREDIT_CARD_EXPIRED = 2148955441;
        public const uint XONLINE_E_BILLING_CSR_AUTHZ_FAILED = 2148935464;
        public const uint XONLINE_E_BILLING_CSR_CALL_FROM_NONCSR = 2148935492;
        public const uint XONLINE_E_BILLING_CTP_AUTHORIZATION = 2148872312;
        public const uint XONLINE_E_BILLING_CTP_COMMUNICATION_ERROR = 2148872309;
        public const uint XONLINE_E_BILLING_CTP_DIRECT_DEBIT_NOT_SUPPORTED = 2148872346;
        public const uint XONLINE_E_BILLING_CTP_INVALID_CALLINGPARTNER = 2148872316;
        public const uint XONLINE_E_BILLING_CTP_INVALID_ITEM = 2148872317;
        public const uint XONLINE_E_BILLING_CTP_INVALID_MODE = 2148872330;
        public const uint XONLINE_E_BILLING_CTP_INVALID_OFFER_NOTFOUND = 2148872320;
        public const uint XONLINE_E_BILLING_CTP_INVALID_OVERRIDDEN_PRICE = 2148872342;
        public const uint XONLINE_E_BILLING_CTP_INVALID_PAYMENT = 2148872313;
        public const uint XONLINE_E_BILLING_CTP_INVALID_PAYMENTPROVIDER = 2148872315;
        public const uint XONLINE_E_BILLING_CTP_INVALID_PRICE = 2148872351;
        public const uint XONLINE_E_BILLING_CTP_INVALID_SUB_OFFER_COUNT = 2148872323;
        public const uint XONLINE_E_BILLING_CTP_INVALID_TIMEEXTENSION = 2148872328;
        public const uint XONLINE_E_BILLING_CTP_INVALID_TOKEN = 2148872322;
        public const uint XONLINE_E_BILLING_CTP_INVALID_TRACKING_GUID = 2148872314;
        public const uint XONLINE_E_BILLING_CTP_INVALID_TRANSACTIONSTATUS = 2148872318;
        public const uint XONLINE_E_BILLING_CTP_INVALIDRESPONSE = 2148872311;
        public const uint XONLINE_E_BILLING_CTP_NO_RETRYABLE_PURCHASE = 2148872331;
        public const uint XONLINE_E_BILLING_CTP_NOTSUPPORTED_MEDIATYPE = 2148872321;
        public const uint XONLINE_E_BILLING_CTP_PARTNERCONFIG_UNKNOWN_ERROR = 2148872341;
        public const uint XONLINE_E_BILLING_CTP_QUEUE_ITERATOR_ERROR = 2148872335;
        public const uint XONLINE_E_BILLING_CTP_QUEUE_PURCHASE_INTENT_FAILURE = 2148872336;
        public const uint XONLINE_E_BILLING_CTP_RATING_RULES_ERROR = 2148872329;
        public const uint XONLINE_E_BILLING_CTP_RETRY_INTERVAL_EXCEEDED = 2148872333;
        public const uint XONLINE_E_BILLING_CTP_TRANSACTION_NOT_FOUND = 2148872332;
        public const uint XONLINE_E_BILLING_CTP_TRANSACTION_SQL_ERROR = 2148872334;
        public const uint XONLINE_E_BILLING_CTP_UNKNOWN = 2148872319;
        public const uint XONLINE_E_BILLING_CTP_VALIDATION_RENEWAL_ERROR = 2148872310;
        public const uint XONLINE_E_BILLING_CURRENCY_MISSING = 2148978149;
        public const uint XONLINE_E_BILLING_CURRENT_DATE_LESS_THAN_ACCOUNT_HISTORY_DATE = 2148967965;
        public const uint XONLINE_E_BILLING_CVM_FAILED = 2148955885;
        public const uint XONLINE_E_BILLING_CVM_MISSING = 2148978158;
        public const uint XONLINE_E_BILLING_DATE_EXPIRED = 2148965864;
        public const uint XONLINE_E_BILLING_DAV_APARTMENT = 2148990540;
        public const uint XONLINE_E_BILLING_DAV_DISABLED = 2148990553;
        public const uint XONLINE_E_BILLING_DAV_GENERAL = 2148990548;
        public const uint XONLINE_E_BILLING_DAV_ID = 2148990542;
        public const uint XONLINE_E_BILLING_DAV_INSUFFICIENT = 2148990541;
        public const uint XONLINE_E_BILLING_DAV_INVALID_DATA = 2148990550;
        public const uint XONLINE_E_BILLING_DAV_MISSING_DATA = 2148990549;
        public const uint XONLINE_E_BILLING_DAV_MULTIPLE = 2148990543;
        public const uint XONLINE_E_BILLING_DAV_POBOX = 2148990544;
        public const uint XONLINE_E_BILLING_DAV_POSTAL = 2148990547;
        public const uint XONLINE_E_BILLING_DAV_ROUTE = 2148990545;
        public const uint XONLINE_E_BILLING_DAV_STREET = 2148990546;
        public const uint XONLINE_E_BILLING_DAV_SYSTEM_FAILURE = 2148990551;
        public const uint XONLINE_E_BILLING_DAV_TIMEOUT = 2148990552;
        public const uint XONLINE_E_BILLING_DBBADZIP = 2148969379;
        public const uint XONLINE_E_BILLING_DD_ACCOUNT_MISSING = 2148955720;
        public const uint XONLINE_E_BILLING_DD_BANKCODE_MISSING = 2148955725;
        public const uint XONLINE_E_BILLING_DD_BRANCHCODE_MISSING = 2148955730;
        public const uint XONLINE_E_BILLING_DD_CHECKDIGIT_MISSING = 2148955735;
        public const uint XONLINE_E_BILLING_DD_CONCATENATED_STRING_LENGTH_EXCEEDS_24 = 2148955625;
        public const uint XONLINE_E_BILLING_DD_DUPLICATE_MRN = 2148955900;
        public const uint XONLINE_E_BILLING_DD_ERROR_IN_FIELDS = 2148955740;
        public const uint XONLINE_E_BILLING_DD_GC_CHECK_INCOMPLETE = 2148955840;
        public const uint XONLINE_E_BILLING_DD_GC_INCORRECT_XML_FORMAT = 2148955830;
        public const uint XONLINE_E_BILLING_DD_GC_INVALID_RFBANKCODE = 2148955855;
        public const uint XONLINE_E_BILLING_DD_GC_NON_XML_RESPONSE = 2148955825;
        public const uint XONLINE_E_BILLING_DD_GC_RETURNED_NOK_RESULT = 2148955835;
        public const uint XONLINE_E_BILLING_DD_GC_XML_INVALID_CHECK_RESULT = 2148955850;
        public const uint XONLINE_E_BILLING_DD_INVALID_ACCOUNT_FORMAT = 2148955700;
        public const uint XONLINE_E_BILLING_DD_INVALID_ACCOUNT_HOLDER_NAME = 2148955770;
        public const uint XONLINE_E_BILLING_DD_INVALID_ACCOUNT_VALUE = 2148955745;
        public const uint XONLINE_E_BILLING_DD_INVALID_BANKCODE_FORMAT = 2148955705;
        public const uint XONLINE_E_BILLING_DD_INVALID_BANKCODE_VALUE = 2148955750;
        public const uint XONLINE_E_BILLING_DD_INVALID_BRANCHCODE_FORMAT = 2148955710;
        public const uint XONLINE_E_BILLING_DD_INVALID_BRANCHCODE_VALUE = 2148955755;
        public const uint XONLINE_E_BILLING_DD_INVALID_CHECKDIGIT_FORMAT = 2148955715;
        public const uint XONLINE_E_BILLING_DD_INVALID_CHECKDIGIT_VALUE = 2148955760;
        public const uint XONLINE_E_BILLING_DD_INVALID_COUNTRY = 2148955695;
        public const uint XONLINE_E_BILLING_DD_INVALID_MERCHANT_INDEX = 2148955895;
        public const uint XONLINE_E_BILLING_DD_MPF_INCORRECT_XML_FORMAT = 2148955820;
        public const uint XONLINE_E_BILLING_DD_MPF_NON_XML_RESPONSE = 2148955815;
        public const uint XONLINE_E_BILLING_DD_OPENING_GC_XML_CHECKSPERFORMED = 2148955845;
        public const uint XONLINE_E_BILLING_DD_RISK_DECLINE = 2148955925;
        public const uint XONLINE_E_BILLING_DD_UNKNOWN_PROVIDER_FAILURE = 2148955935;
        public const uint XONLINE_E_BILLING_DD_UNKNOWN_VALIDATION_FAILURE = 2148955905;
        public const uint XONLINE_E_BILLING_DD_UNSUPPORTED = 2148955810;
        public const uint XONLINE_E_BILLING_DEAL_HAS_MULTIPLE_DELAYED_COMPONENTS = 2148966222;
        public const uint XONLINE_E_BILLING_DEAL_TOKEN_MAPPING_NOT_PRESENT = 2148966476;
        public const uint XONLINE_E_BILLING_DECLINING_BALANCE = 2148945500;
        public const uint XONLINE_E_BILLING_DECRYPTION_FAILURE = 2148955600;
        public const uint XONLINE_E_BILLING_DEFERRED_COMPUTE_ONLY_NOT_SUPPORTED = 2148935565;
        public const uint XONLINE_E_BILLING_DELAYED_EXPIRE_ALREADY_PENDING = 2148965642;
        public const uint XONLINE_E_BILLING_DELAYED_EXPIRE_NOT_PENDING = 2148965643;
        public const uint XONLINE_E_BILLING_DELAYED_EXPIRE_NOT_SUPPORTED = 2148965644;
        public const uint XONLINE_E_BILLING_DELAYED_PROVISIONING_COMPONENTS_EXIST = 2148966035;
        public const uint XONLINE_E_BILLING_DELEGATE_ID_UNSPECIFIED = 2148935466;
        public const uint XONLINE_E_BILLING_DESCRIPTION_MAXLENGTH_EXCEEDED = 2148935760;
        public const uint XONLINE_E_BILLING_DISCOUNT_ALREADY_APPLIED = 2148969655;
        public const uint XONLINE_E_BILLING_DISCOUNT_REQUIRED_FOR_TOKEN = 2148969660;
        public const uint XONLINE_E_BILLING_DISCOUNT_TOKEN = 2148969665;
        public const uint XONLINE_E_BILLING_DISCOUNT_TOKEN_CLASS_MISMATCH = 2148969680;
        public const uint XONLINE_E_BILLING_DISCOUNT_USAGE_EXCEEDED = 2148969675;
        public const uint XONLINE_E_BILLING_DISTRIBUTION_PROGRAM_INACTIVE = 2148965865;
        public const uint XONLINE_E_BILLING_DMP_FIRST = 2148989440;
        public const uint XONLINE_E_BILLING_DMP_FLOW_NOT_ENABLED = 2148978151;
        public const uint XONLINE_E_BILLING_DMP_LAST = 2148990439;
        public const uint XONLINE_E_BILLING_DMP_MAX_BALANCE_EXCEEDED = 2148978148;
        public const uint XONLINE_E_BILLING_DMP_UNKNOWN_ERROR = 2148978154;
        public const uint XONLINE_E_BILLING_DONOR_BENEFICIARY_COUNTRY_MISMATCH = 2148978160;
        public const uint XONLINE_E_BILLING_DONOR_BENEFICIARY_SAME = 2148978161;
        public const uint XONLINE_E_BILLING_DONOTSHOWOFFSET_MISMATCHED_AMOUNT = 2148946550;
        public const uint XONLINE_E_BILLING_DOUBLE_CHARGEBACK = 2148980790;
        public const uint XONLINE_E_BILLING_DOUBLE_CHARGEBACK_FOR_REVERSAL = 2148980840;
        public const uint XONLINE_E_BILLING_DOUBLE_CHARGEBACK_REVERSAL = 2148935745;
        public const uint XONLINE_E_BILLING_DUPLICATE_EVENT_ID = 2148946065;
        public const uint XONLINE_E_BILLING_DUPLICATE_TOKEN_TRACKING_GUID = 2148930655;
        public const uint XONLINE_E_BILLING_DUPLICATE_TRACKING_GUID = 2148945525;
        public const uint XONLINE_E_BILLING_DUPLICATE_TRANSACTION_CONFIRMATION_NUMBER = 2148947450;
        public const uint XONLINE_E_BILLING_DYNAMIC_PRICE_CONFIGURATION = 2148978147;
        public const uint XONLINE_E_BILLING_DYNAMIC_TITLE_AND_CATEGORY_CONFIGURATION = 2148969595;
        public const uint XONLINE_E_BILLING_EMAIL_REQUIRED = 2148965930;
        public const uint XONLINE_E_BILLING_ENCRYPTED_PASSWORD_NOT_FOUND = 2148872289;
        public const uint XONLINE_E_BILLING_ENCRYPTION_FAILURE = 2148945452;
        public const uint XONLINE_E_BILLING_END_DATE_BEYOND_MAX = 2148965940;
        public const uint XONLINE_E_BILLING_END_DATE_GREATER_THAN_CURRENT_DATE = 2148966092;
        public const uint XONLINE_E_BILLING_END_DATE_IN_THE_PAST = 2148965939;
        public const uint XONLINE_E_BILLING_END_PERIOD_LESS_THAN_START_PERIOD = 2148935642;
        public const uint XONLINE_E_BILLING_ENTITLEMENT_ENDPOINT_UNAVAILABLE = 2148935930;
        public const uint XONLINE_E_BILLING_ENTITLEMENT_VALIDATION_FAILED = 2148935931;
        public const uint XONLINE_E_BILLING_ERROR = 2148872192;
        public const uint XONLINE_E_BILLING_ERROR_COUNTRYCODE_MISMATCH = 2148985505;
        public const uint XONLINE_E_BILLING_ERROR_COUNTRYCODE_REQUIRED = 2148985510;
        public const uint XONLINE_E_BILLING_ERROR_INVALID_CHARGEBACK_INPUT_DETAILS = 2148980760;
        public const uint XONLINE_E_BILLING_ERROR_OCCURRED = 2148966009;
        public const uint XONLINE_E_BILLING_ERROR_OCCURRED_TRY_LATER = 2148966008;
        public const uint XONLINE_E_BILLING_ERROR_PHONE_STRING_TOOLONG = 2148968225;
        public const uint XONLINE_E_BILLING_ERROR_PP_INVALID_TAX_REFUND_CODE = 2148946605;
        public const uint XONLINE_E_BILLING_ERROR_TOKEN_CLASS_ACCESS_DENIED = 2148968235;
        public const uint XONLINE_E_BILLING_EVENT_ACTION_NOT_OFFSETTABLE = 2148946560;
        public const uint XONLINE_E_BILLING_EVENT_TIMESTAMP_IN_THE_FUTURE = 2148968205;
        public const uint XONLINE_E_BILLING_EVT_DATE_BEFORE_PURCHASE_DATE = 2148965892;
        public const uint XONLINE_E_BILLING_EXCEED_DATERANGE_LIMIT = 2148966087;
        public const uint XONLINE_E_BILLING_EXCEEDING_TAX_EXEMPT_LIMITS = 2148965461;
        public const uint XONLINE_E_BILLING_EXCEEDS_MAX_NUMBER_OF_SERVICE_INSTANCE_REQUESTS = 2148969378;
        public const uint XONLINE_E_BILLING_EXCEEDS_MAX_NUMBER_OF_USAGE_EVENTS = 2148935555;
        public const uint XONLINE_E_BILLING_EXCEEDS_MAXIMUM_DURATION = 2148966650;
        public const uint XONLINE_E_BILLING_EXCEEDS_RESOURCE_CREDIT_LIMIT = 2148935694;
        public const uint XONLINE_E_BILLING_EXISTING_BILLING_ACTIVITY = 2148965916;
        public const uint XONLINE_E_BILLING_EXISTS_VIOLATION = 2148965911;
        public const uint XONLINE_E_BILLING_EXPIRATION_DATE_NOT_FOUND_ERROR = 2148872284;
        public const uint XONLINE_E_BILLING_EXTERNAL_REFERENCE_ID_NOT_FOUND = 2148872287;
        public const uint XONLINE_E_BILLING_EXTERNAL_VENDOR_ERROR = 2148955950;
        public const uint XONLINE_E_BILLING_EXTRA_REFERRAL_DATA = 2148966215;
        public const uint XONLINE_E_BILLING_FAILED_INSERTING_TOKEN_INS_DEAL_SUBS = 2148930511;
        public const uint XONLINE_E_BILLING_FAILED_SETTLEMENT_AMOUNT_UPDATE = 2148935590;
        public const uint XONLINE_E_BILLING_FAILED_TO_CREATE_MAIL_RECORD = 2148935696;
        public const uint XONLINE_E_BILLING_FAILED_TO_WRITE_TO_AUDIT_DB = 2148935698;
        public const uint XONLINE_E_BILLING_FIELD_NOT_UPDATEABLE = 2148935560;
        public const uint XONLINE_E_BILLING_FIELD_TOO_LONG = 2148935460;
        public const uint XONLINE_E_BILLING_FIELD_TOO_SHORT = 2148935459;
        public const uint XONLINE_E_BILLING_FINBUS_MISSING_XNA_CREATOR_ID_ERROR = 2148872304;
        public const uint XONLINE_E_BILLING_FREE_SCHEDULED_RENEWAL_EXISTS = 2148966221;
        public const uint XONLINE_E_BILLING_FREQUENCY_CHECK_FAILED = 2148955890;
        public const uint XONLINE_E_BILLING_FRIENDLY_NAME_NOT_FOUND_ERROR = 2148872275;
        public const uint XONLINE_E_BILLING_FUTURE_OFFERING_PAYMENT_INSTRUMENT_MISMATCH = 2148965896;
        public const uint XONLINE_E_BILLING_GENERATE_NEXT_ID = 2148965465;
        public const uint XONLINE_E_BILLING_GROUP_SID_INITIALIZATION_FAILED = 2148935691;
        public const uint XONLINE_E_BILLING_GUID_EXISTS = 2148965866;
        public const uint XONLINE_E_BILLING_HCI_NOT_VALID = 2148966275;
        public const uint XONLINE_E_BILLING_IMMEDIATE_SETTLE_NOT_AVAILABLE_FOR_PAYMENT_INSTRUMENT = 2148935713;
        public const uint XONLINE_E_BILLING_IMMEDIATE_SETTLE_OF_USAGE_NOT_PERMITTED = 2148946565;
        public const uint XONLINE_E_BILLING_IMMEDIATE_SETTLEMENT_FAILURE = 2148955886;
        public const uint XONLINE_E_BILLING_INAVLID_CALLING_PARTNER = 2148984441;
        public const uint XONLINE_E_BILLING_INCREMENT_TOTAL = 2148945465;
        public const uint XONLINE_E_BILLING_INPUT_FILTER_XML_MISSING = 2148966516;
        public const uint XONLINE_E_BILLING_INPUT_PARAM_MALFORMED = 2148930698;
        public const uint XONLINE_E_BILLING_INSERING_TOKEN_CLASS_PARTNER = 2148966605;
        public const uint XONLINE_E_BILLING_INSERT_AGREEMENT_SIGNATURE = 2148966285;
        public const uint XONLINE_E_BILLING_INSERT_DISCOUNT = 2148969650;
        public const uint XONLINE_E_BILLING_INSERT_DISCOUNT_LOCALIZE = 2148969670;
        public const uint XONLINE_E_BILLING_INSERTING_RECONCILE_HISTORY = 2148930750;
        public const uint XONLINE_E_BILLING_INSERTING_USER_TOKEN_HASH = 2148966412;
        public const uint XONLINE_E_BILLING_INSUFFICIENT_PREPAID_BALANCE = 2148946495;
        public const uint XONLINE_E_BILLING_INTERNAL_ADD_COMMENT_FAILED = 2148935572;
        public const uint XONLINE_E_BILLING_INTERNAL_ERROR = 2148935520;
        public const uint XONLINE_E_BILLING_INTERNAL_ERROR_CONNECTING_TO_MAPPOINT = 2148978256;
        public const uint XONLINE_E_BILLING_INTERNAL_ERROR_TOKEN = 2148930645;
        public const uint XONLINE_E_BILLING_INVALID_ACCOUNT_SOUCE = 2148965453;
        public const uint XONLINE_E_BILLING_INVALID_ACCOUNT_STATUS = 2148965910;
        public const uint XONLINE_E_BILLING_INVALID_ACCOUNTID = 2148969575;
        public const uint XONLINE_E_BILLING_INVALID_ADDRESS_FIELD_LENGTH = 2148935473;
        public const uint XONLINE_E_BILLING_INVALID_ADDRESS_ID = 2148965615;
        public const uint XONLINE_E_BILLING_INVALID_ADDRESSINFOXML = 2148978260;
        public const uint XONLINE_E_BILLING_INVALID_ADJUSMENT_FOR_PERIOD = 2148965848;
        public const uint XONLINE_E_BILLING_INVALID_ADJUSTMENT_OFFSET = 2148978103;
        public const uint XONLINE_E_BILLING_INVALID_ADJUSTMENTGUID = 2148965847;
        public const uint XONLINE_E_BILLING_INVALID_AMOUNT = 2148945660;
        public const uint XONLINE_E_BILLING_INVALID_AMOUNT_FOR_CURRENCY = 2148966041;
        public const uint XONLINE_E_BILLING_INVALID_AMOUNT_FOR_CURRENCY_2 = 2148946052;
        public const uint XONLINE_E_BILLING_INVALID_AMOUNT_VALUE = 2148935575;
        public const uint XONLINE_E_BILLING_INVALID_ANNIV = 2148945820;
        public const uint XONLINE_E_BILLING_INVALID_ANONYMOUS_INFO_XML = 2148969576;
        public const uint XONLINE_E_BILLING_INVALID_ARG = 2148935450;
        public const uint XONLINE_E_BILLING_INVALID_BAN_REASON_CODE = 2148955870;
        public const uint XONLINE_E_BILLING_INVALID_BEGIN_DATE = 2148966089;
        public const uint XONLINE_E_BILLING_INVALID_BILLABLE_ACCOUNT_ID = 2148965570;
        public const uint XONLINE_E_BILLING_INVALID_BILLABLE_ACCOUNT_STATUS_ID = 2148965575;
        public const uint XONLINE_E_BILLING_INVALID_BILLABLEACCTSTATUS = 2148965800;
        public const uint XONLINE_E_BILLING_INVALID_BILLING_PERIOD = 2148945730;
        public const uint XONLINE_E_BILLING_INVALID_BLACKLIST_HISTORY_DESCRIPTION = 2148930675;
        public const uint XONLINE_E_BILLING_INVALID_BLACKLIST_HISTORY_REASON_CODE = 2148930590;
        public const uint XONLINE_E_BILLING_INVALID_BOBOPARTNER = 2148935842;
        public const uint XONLINE_E_BILLING_INVALID_BOOKMARK = 2148930692;
        public const uint XONLINE_E_BILLING_INVALID_BUF_SIZE = 2148935446;
        public const uint XONLINE_E_BILLING_INVALID_CANCEL_DATE = 2148965641;
        public const uint XONLINE_E_BILLING_INVALID_CANCEL_TRANSACTION_RESULT = 2148978157;
        public const uint XONLINE_E_BILLING_INVALID_CATEGORY_NAME = 2148965875;
        public const uint XONLINE_E_BILLING_INVALID_CHARGE_DESCRIPTOR = 2148935718;
        public const uint XONLINE_E_BILLING_INVALID_CHARGEBACK_AMOUNT = 2148946670;
        public const uint XONLINE_E_BILLING_INVALID_CHARGEBACK_DATE = 2148946665;
        public const uint XONLINE_E_BILLING_INVALID_CHARGEBACK_ID = 2148935740;
        public const uint XONLINE_E_BILLING_INVALID_CHARGEBACK_ID_FOR_REVERSAL_CHARGEBACK_ID = 2148980815;
        public const uint XONLINE_E_BILLING_INVALID_CHARGEBACK_LINEITEM_ID = 2148980795;
        public const uint XONLINE_E_BILLING_INVALID_CHARGEBACK_REVERSAL_ID = 2148980810;
        public const uint XONLINE_E_BILLING_INVALID_COBRAND = 2148966230;
        public const uint XONLINE_E_BILLING_INVALID_COMBINATION = 2148930770;
        public const uint XONLINE_E_BILLING_INVALID_COMMITTED_STATUS = 2148930672;
        public const uint XONLINE_E_BILLING_INVALID_CONVERSION = 2148965965;
        public const uint XONLINE_E_BILLING_INVALID_COUNTRY_CODE = 2148965610;
        public const uint XONLINE_E_BILLING_INVALID_CREATION_DATE = 2148965454;
        public const uint XONLINE_E_BILLING_INVALID_CREDIT_AMOUNT = 2148946050;
        public const uint XONLINE_E_BILLING_INVALID_CREDIT_CARD_NUMBER = 2148955440;
        public const uint XONLINE_E_BILLING_INVALID_CREDIT_CARD_TYPE = 2148955595;
        public const uint XONLINE_E_BILLING_INVALID_CUMULATIVE_AMOUNT = 2148947475;
        public const uint XONLINE_E_BILLING_INVALID_CUMULATIVE_TAX_AMOUNT = 2148947565;
        public const uint XONLINE_E_BILLING_INVALID_CURRENCY = 2148965863;
        public const uint XONLINE_E_BILLING_INVALID_CURRENCY2 = 2148945600;
        public const uint XONLINE_E_BILLING_INVALID_CUSTOMER_TYPE = 2148965862;
        public const uint XONLINE_E_BILLING_INVALID_CUSTOMER_TYPE_FOR_PARTNER = 2148969752;
        public const uint XONLINE_E_BILLING_INVALID_CVM_CODE = 2148955875;
        public const uint XONLINE_E_BILLING_INVALID_DATE = 2148965880;
        public const uint XONLINE_E_BILLING_INVALID_DD_ACCOUNT = 2148955620;
        public const uint XONLINE_E_BILLING_INVALID_DELEGATE_USER_INFORMATION = 2148956441;
        public const uint XONLINE_E_BILLING_INVALID_DETAILEDLEVEL = 2148966086;
        public const uint XONLINE_E_BILLING_INVALID_DISCOUNT = 2148969645;
        public const uint XONLINE_E_BILLING_INVALID_EMAIL_ADDRESS = 2148966050;
        public const uint XONLINE_E_BILLING_INVALID_ENCRYPT_ACCOUNT_NUMBER = 2148935750;
        public const uint XONLINE_E_BILLING_INVALID_END_BILLING_PERIOD = 2148967950;
        public const uint XONLINE_E_BILLING_INVALID_END_DATE = 2148966091;
        public const uint XONLINE_E_BILLING_INVALID_END_PERIOD = 2148966085;
        public const uint XONLINE_E_BILLING_INVALID_ENTITLEMENT_ENDPOINT = 2148935932;
        public const uint XONLINE_E_BILLING_INVALID_EVENT_TYPE = 2148945950;
        public const uint XONLINE_E_BILLING_INVALID_EXPIRATION_DATE = 2148945575;
        public const uint XONLINE_E_BILLING_INVALID_EXTERNAL_REFERENCE_ID = 2148930691;
        public const uint XONLINE_E_BILLING_INVALID_FIELD_LENGTH = 2148935463;
        public const uint XONLINE_E_BILLING_INVALID_FILTER = 2148935457;
        public const uint XONLINE_E_BILLING_INVALID_FIN_REASON_CODE_FOR_OFFSET = 2148946555;
        public const uint XONLINE_E_BILLING_INVALID_FINANCIAL_REASON_CODE = 2148946530;
        public const uint XONLINE_E_BILLING_INVALID_FIRSTNAME_FIELD_LENGTH = 2148935471;
        public const uint XONLINE_E_BILLING_INVALID_FLAG_VALUE = 2148935468;
        public const uint XONLINE_E_BILLING_INVALID_GUID = 2148935535;
        public const uint XONLINE_E_BILLING_INVALID_IMMEDIATE_SETTLE_VALUE = 2148935573;
        public const uint XONLINE_E_BILLING_INVALID_INITIATE_TRANSACTION_RESULT = 2148955777;
        public const uint XONLINE_E_BILLING_INVALID_INPUT_FILTER_XML = 2148966517;
        public const uint XONLINE_E_BILLING_INVALID_INPUT_TO_TAXWARE_OR_VERAZIP = 2148985493;
        public const uint XONLINE_E_BILLING_INVALID_INVOICE_INFO_XML = 2148966001;
        public const uint XONLINE_E_BILLING_INVALID_ITEM_INSTANCE_ID = 2148978140;
        public const uint XONLINE_E_BILLING_INVALID_LASTNAME_FIELD_LENGTH = 2148935472;
        public const uint XONLINE_E_BILLING_INVALID_LEN_PART_NUMBER = 2148966590;
        public const uint XONLINE_E_BILLING_INVALID_LEN_SAP_CUST_NAME = 2148966595;
        public const uint XONLINE_E_BILLING_INVALID_LEN_SUPPORT_VENDOR_NAME = 2148966600;
        public const uint XONLINE_E_BILLING_INVALID_LINEITEM_ID = 2148945910;
        public const uint XONLINE_E_BILLING_INVALID_LINEITEM_ID_FOR_CHARGEBACK_ID = 2148980820;
        public const uint XONLINE_E_BILLING_INVALID_LINEITEM_ID_FOR_REVERSAL = 2148946650;
        public const uint XONLINE_E_BILLING_INVALID_LINEITEM_TYPE = 2148980825;
        public const uint XONLINE_E_BILLING_INVALID_LOCALE = 2148965861;
        public const uint XONLINE_E_BILLING_INVALID_MANDATE_STATUS = 2148965975;
        public const uint XONLINE_E_BILLING_INVALID_MAX = 2148930693;
        public const uint XONLINE_E_BILLING_INVALID_MERCHANT_REFERENCE = 2148935742;
        public const uint XONLINE_E_BILLING_INVALID_NEW_PAYMENT_INSTRUMENT_STATUS = 2148968210;
        public const uint XONLINE_E_BILLING_INVALID_NUMBER_OF_DAYS = 2148966535;
        public const uint XONLINE_E_BILLING_INVALID_NUMBER_OF_MONTHS = 2148966536;
        public const uint XONLINE_E_BILLING_INVALID_NUMBER_OF_UNITS = 2148946485;
        public const uint XONLINE_E_BILLING_INVALID_OBJECT_ID = 2148935470;
        public const uint XONLINE_E_BILLING_INVALID_OFFERING_FOR_COUNTRY = 2148965897;
        public const uint XONLINE_E_BILLING_INVALID_OFFERING_FOR_LOCALE = 2148965893;
        public const uint XONLINE_E_BILLING_INVALID_OFFERING_GUID = 2148966020;
        public const uint XONLINE_E_BILLING_INVALID_OFFERING_ID = 2148965605;
        public const uint XONLINE_E_BILLING_INVALID_OFFERING_TYPE = 2148978145;
        public const uint XONLINE_E_BILLING_INVALID_OFFSET_AMOUNT = 2148946000;
        public const uint XONLINE_E_BILLING_INVALID_OLD_PAYMENT_INSTRUMENT_STATUS = 2148966070;
        public const uint XONLINE_E_BILLING_INVALID_OPERATION_FOR_DIRECT_DEBIT = 2148935693;
        public const uint XONLINE_E_BILLING_INVALID_OPERATION_FOR_WHOLESALE_PI = 2148935692;
        public const uint XONLINE_E_BILLING_INVALID_OPERATION_FOR_WHOLESALE_SUBSCRIPTION = 2148966245;
        public const uint XONLINE_E_BILLING_INVALID_ORIGINAL_CHARGE_DETAILS = 2148946645;
        public const uint XONLINE_E_BILLING_INVALID_PARAMETER = 2148969639;
        public const uint XONLINE_E_BILLING_INVALID_PART_NUMBER_FOR_TOKEN_CLASS = 2148930690;
        public const uint XONLINE_E_BILLING_INVALID_PAYMENT_INSTRUMENT_DETAILS = 2148955865;
        public const uint XONLINE_E_BILLING_INVALID_PAYMENT_INSTRUMENT_STATUS = 2148966015;
        public const uint XONLINE_E_BILLING_INVALID_PAYMENT_INSTRUMENT_TYPE = 2148955592;
        public const uint XONLINE_E_BILLING_INVALID_PAYMENT_METHOD_ID = 2148965625;
        public const uint XONLINE_E_BILLING_INVALID_PAYMENT_METHOD_TYPE = 2148945586;
        public const uint XONLINE_E_BILLING_INVALID_PAYUSERINFOXML = 2148935757;
        public const uint XONLINE_E_BILLING_INVALID_PERIOD_TO_PROCESS = 2148965675;
        public const uint XONLINE_E_BILLING_INVALID_PHONE_TYPE = 2148965590;
        public const uint XONLINE_E_BILLING_INVALID_PHONE_VALUE = 2148935570;
        public const uint XONLINE_E_BILLING_INVALID_PHONE_XML = 2148969578;
        public const uint XONLINE_E_BILLING_INVALID_PM_FOR_STOP_PAYMENTS = 2148935550;
        public const uint XONLINE_E_BILLING_INVALID_POLICY_ID = 2148966280;
        public const uint XONLINE_E_BILLING_INVALID_PPORT_ID = 2148935448;
        public const uint XONLINE_E_BILLING_INVALID_PURCHASE_INPUT_DATA = 2148965606;
        public const uint XONLINE_E_BILLING_INVALID_REASON_CODE = 2148935675;
        public const uint XONLINE_E_BILLING_INVALID_REDIRECT_INPUTINFO_XML = 2148935715;
        public const uint XONLINE_E_BILLING_INVALID_REFERRAL_OFFER = 2148969420;
        public const uint XONLINE_E_BILLING_INVALID_REFERRALDATA_XML = 2148935530;
        public const uint XONLINE_E_BILLING_INVALID_REJECTION_REASON_CODE = 2148947500;
        public const uint XONLINE_E_BILLING_INVALID_RENEWAL = 2148968220;
        public const uint XONLINE_E_BILLING_INVALID_REPLACEMENT_REASON_CODE = 2148930775;
        public const uint XONLINE_E_BILLING_INVALID_REQUESTOR_INFO = 2148969580;
        public const uint XONLINE_E_BILLING_INVALID_RESOURCE_ID = 2148965890;
        public const uint XONLINE_E_BILLING_INVALID_RESOURCE_TYPE = 2148969562;
        public const uint XONLINE_E_BILLING_INVALID_REVERSE_REASON = 2148978141;
        public const uint XONLINE_E_BILLING_INVALID_REWARD_REFFERAL_SCHEMA = 2148935705;
        public const uint XONLINE_E_BILLING_INVALID_ROLE = 2148935447;
        public const uint XONLINE_E_BILLING_INVALID_SEQUENCE_NUMBER = 2148947490;
        public const uint XONLINE_E_BILLING_INVALID_SERVICE_COMPONENT_ID = 2148965938;
        public const uint XONLINE_E_BILLING_INVALID_SERVICE_INSTANCE = 2148965790;
        public const uint XONLINE_E_BILLING_INVALID_SESSION_KEY = 2148955790;
        public const uint XONLINE_E_BILLING_INVALID_SETTLEMENT_AMOUNT_ID = 2148946390;
        public const uint XONLINE_E_BILLING_INVALID_SOURCE_USER_INFORMATION = 2148956442;
        public const uint XONLINE_E_BILLING_INVALID_START_PERIOD = 2148966084;
        public const uint XONLINE_E_BILLING_INVALID_STATE_FOR_COUNTRY = 2148965471;
        public const uint XONLINE_E_BILLING_INVALID_STATUS_NAME = 2148930800;
        public const uint XONLINE_E_BILLING_INVALID_STATUS_VALUE = 2148935456;
        public const uint XONLINE_E_BILLING_INVALID_SUBSCRIPTION_ACTION = 2148966575;
        public const uint XONLINE_E_BILLING_INVALID_SUBSCRIPTION_BILLING_PERIOD = 2148967975;
        public const uint XONLINE_E_BILLING_INVALID_SUBSCRIPTION_ID = 2148965645;
        public const uint XONLINE_E_BILLING_INVALID_SUBSCRIPTION_STATUS = 2148965690;
        public const uint XONLINE_E_BILLING_INVALID_SUBSCRIPTION_STATUS_FOR_OPERATION = 2148965920;
        public const uint XONLINE_E_BILLING_INVALID_SURVEYRESULTCODE = 2148969573;
        public const uint XONLINE_E_BILLING_INVALID_TARGET_USER_INFORMATION = 2148956440;
        public const uint XONLINE_E_BILLING_INVALID_TAX_EXEMPT_BILLABLE_ACCOUNT_ID = 2148965784;
        public const uint XONLINE_E_BILLING_INVALID_TAX_EXEMPT_STATUS = 2148966060;
        public const uint XONLINE_E_BILLING_INVALID_TAX_EXEMPT_STATUS_CHANGE = 2148966065;
        public const uint XONLINE_E_BILLING_INVALID_TAX_EXEMPT_TYPE = 2148965783;
        public const uint XONLINE_E_BILLING_INVALID_TECERTIFICATENUMBER = 2148968170;
        public const uint XONLINE_E_BILLING_INVALID_TELENUMERIC_STRING = 2148935600;
        public const uint XONLINE_E_BILLING_INVALID_TOKEN_DISTRIBUTION_STATUS = 2148930805;
        public const uint XONLINE_E_BILLING_INVALID_TOKEN_SPECIFIED = 2148930445;
        public const uint XONLINE_E_BILLING_INVALID_TOKEN_TYPE = 2148966410;
        public const uint XONLINE_E_BILLING_INVALID_TRACKING_GUID = 2148872352;
        public const uint XONLINE_E_BILLING_INVALID_TRANSACTION_INFORMATION = 2148956443;
        public const uint XONLINE_E_BILLING_INVALID_TRANSACTION_STATUS = 2148947545;
        public const uint XONLINE_E_BILLING_INVALID_TRANSACTION_TYPE = 2148935670;
        public const uint XONLINE_E_BILLING_INVALID_USAGE_CATEGORY = 2148946490;
        public const uint XONLINE_E_BILLING_INVALID_USAGE_EVENT_DATE = 2148935647;
        public const uint XONLINE_E_BILLING_INVALID_USERPROFILEXML = 2148935758;
        public const uint XONLINE_E_BILLING_INVALID_USERROLE_FOR_ADDPI = 2148966670;
        public const uint XONLINE_E_BILLING_INVALID_VATID_FORMAT = 2148985495;
        public const uint XONLINE_E_BILLING_INVALID_VATID_INVALID = 2148985496;
        public const uint XONLINE_E_BILLING_INVALID_VENDOR_TRANSACTION_ID = 2148947495;
        public const uint XONLINE_E_BILLING_INVALID_VIOLATION = 2148965907;
        public const uint XONLINE_E_BILLING_INVALID_VIOLATION_ID = 2148965868;
        public const uint XONLINE_E_BILLING_INVALID_WHOLESALE_PARTNER = 2148955780;
        public const uint XONLINE_E_BILLING_INVALID_WHOLESALEPI = 2148935840;
        public const uint XONLINE_E_BILLING_INVALIDCOMMENTSIZE = 2148935444;
        public const uint XONLINE_E_BILLING_INVOICEPI_SAP_NUMBER_REQUIRED = 2148966000;
        public const uint XONLINE_E_BILLING_ITEM_ALREADY_REVERSED = 2148978152;
        public const uint XONLINE_E_BILLING_ITEM_NOT_FULFILLED = 2148978153;
        public const uint XONLINE_E_BILLING_ITEM_VIOLATION_EXISTS = 2148969594;
        public const uint XONLINE_E_BILLING_KEY_NOT_FOUND = 2148872241;
        public const uint XONLINE_E_BILLING_LAST_ADMIN_ROLE = 2148975555;
        public const uint XONLINE_E_BILLING_LINE_ITEM_ID_NOT_OPEN = 2148945990;
        public const uint XONLINE_E_BILLING_LINEITEM_ALREADY_CHARGED_BACK = 2148945997;
        public const uint XONLINE_E_BILLING_LINEITEM_ALREADY_OFFSET = 2148945995;
        public const uint XONLINE_E_BILLING_LINEITEM_SETTLEMENT_AMOUNT_NOT_MATCH = 2148946640;
        public const uint XONLINE_E_BILLING_LOCALE_NOT_FOUND = 2148872243;
        public const uint XONLINE_E_BILLING_LOCALE_NOT_SUPPORTED_FOR_POLICY = 2148966300;
        public const uint XONLINE_E_BILLING_MALFORMED_REQUEST = 2148969341;
        public const uint XONLINE_E_BILLING_MAPPOINT_CONNECTION_MAPPOINT = 2148978262;
        public const uint XONLINE_E_BILLING_MAX_PI_PER_ACCOUNT_REACHED = 2148969857;
        public const uint XONLINE_E_BILLING_MAX_REPLACEMENT_REACHED = 2148930780;
        public const uint XONLINE_E_BILLING_MAXIMUM_CONSUMPTION_COUNT_PER_USER_REACHED = 2148966411;
        public const uint XONLINE_E_BILLING_MEG_CONFLICT = 2148965898;
        public const uint XONLINE_E_BILLING_MERCHANT_REFERENCE_NUMBER_MISSING = 2148935749;
        public const uint XONLINE_E_BILLING_MISMATCH_ACCTID_IN_CLOSEBALANCE = 2148935571;
        public const uint XONLINE_E_BILLING_MISMATCH_PAYMENT_SUBSCRIPTION = 2148935747;
        public const uint XONLINE_E_BILLING_MISMATCH_RATED_USAGE_TOTAL = 2148946405;
        public const uint XONLINE_E_BILLING_MISMATCH_SUB_ID_OFFER_GUID = 2148968190;
        public const uint XONLINE_E_BILLING_MISSED_PROCESSING_PERIOD = 2148966195;
        public const uint XONLINE_E_BILLING_MISSING_CATEGORY = 2148935458;
        public const uint XONLINE_E_BILLING_MISSING_PROV_INFO = 2148979453;
        public const uint XONLINE_E_BILLING_MISSING_SEARCH_CRITERIA = 2148965444;
        public const uint XONLINE_E_BILLING_MISSING_VIOLATION_ID = 2148965869;
        public const uint XONLINE_E_BILLING_MPF_CALL_FAILED = 2148969343;
        public const uint XONLINE_E_BILLING_MPF_CREATE = 2148969345;
        public const uint XONLINE_E_BILLING_MSNIA_LATE_USAGE = 2148935697;
        public const uint XONLINE_E_BILLING_MULTIPLE_CITIES_FOUND = 2148985482;
        public const uint XONLINE_E_BILLING_MULTIPLE_COUNTIES_FOUND = 2148985469;
        public const uint XONLINE_E_BILLING_MULTIPLE_MATCHES = 2148935620;
        public const uint XONLINE_E_BILLING_MULTIPLE_USAGE_EVENTS_REPORTED = 2148935708;
        public const uint XONLINE_E_BILLING_NEEDTODEPROVISION = 2148965871;
        public const uint XONLINE_E_BILLING_NETWORK_ERROR_CONNECTING_TO_MAPPOINT = 2148978255;
        public const uint XONLINE_E_BILLING_NEW_DUE_DATE_IS_PAST = 2148935655;
        public const uint XONLINE_E_BILLING_NEW_DUE_DATE_THRESHOLD_PASSED = 2148935660;
        public const uint XONLINE_E_BILLING_NO_ACTIVE_SUBSCRIPTION = 2148965785;
        public const uint XONLINE_E_BILLING_NO_AVS_RESULT = 2148955661;
        public const uint XONLINE_E_BILLING_NO_CDS_FOUND = 2148935717;
        public const uint XONLINE_E_BILLING_NO_MATCH = 2148935610;
        public const uint XONLINE_E_BILLING_NO_MATCHING_PENDING_TRANSACTION = 2148956446;
        public const uint XONLINE_E_BILLING_NO_MATCHING_PENDINGPAYOUT_TRANSACTION = 2148956445;
        public const uint XONLINE_E_BILLING_NO_MATCHING_TRANSACTION = 2148956444;
        public const uint XONLINE_E_BILLING_NO_NEW_DUE_DATE_SPECIFIED = 2148935665;
        public const uint XONLINE_E_BILLING_NO_NON_NULL_PARAMS = 2148967970;
        public const uint XONLINE_E_BILLING_NO_PAYOUT_PREFERENCE = 2148935755;
        public const uint XONLINE_E_BILLING_NO_PRODUCT_KEY_FOR_OBJECT_ID = 2148966580;
        public const uint XONLINE_E_BILLING_NO_RECORDS_FOR_STOP_PAYMENTS = 2148935580;
        public const uint XONLINE_E_BILLING_NO_REFERRAL_UPDATES_ALLOWED = 2148966220;
        public const uint XONLINE_E_BILLING_NO_RENEWAL_FROM_PERPETUAL_OFFERING = 2148968165;
        public const uint XONLINE_E_BILLING_NO_USAGE_EVENT_REPORTED = 2148935712;
        public const uint XONLINE_E_BILLING_NO_VALID_TAX_EXEMPTION = 2148966061;
        public const uint XONLINE_E_BILLING_NO_VIOLATION = 2148965909;
        public const uint XONLINE_E_BILLING_NO_VIOLATION_SET = 2148965955;
        public const uint XONLINE_E_BILLING_NO_WHOLESALE_TO_WHOLESALE = 2148968200;
        public const uint XONLINE_E_BILLING_NON_ACTIVE_ACCOUNT = 2148965780;
        public const uint XONLINE_E_BILLING_NOPERMISSION = 2148935441;
        public const uint XONLINE_E_BILLING_NOT_A_BASE_OFFERING = 2148965894;
        public const uint XONLINE_E_BILLING_NOT_ACCOUNT_ADMIN = 2148935465;
        public const uint XONLINE_E_BILLING_NOT_AUTHORIZED_TO_ACCESS_OBJECT = 2148965719;
        public const uint XONLINE_E_BILLING_NOT_BANNED = 2148955550;
        public const uint XONLINE_E_BILLING_NOT_BOBOPARTNER = 2148935841;
        public const uint XONLINE_E_BILLING_NOT_CONNECTED = 2148872233;
        public const uint XONLINE_E_BILLING_NOUNLIST_NOT_CONFIGURED = 2148872343;
        public const uint XONLINE_E_BILLING_NULL_ACCOUNTID = 2148969571;
        public const uint XONLINE_E_BILLING_NULL_CATEGORY = 2148969570;
        public const uint XONLINE_E_BILLING_NULL_DEFAULT_BILLING_PERIOD = 2148935648;
        public const uint XONLINE_E_BILLING_NULL_INPUT_PARAMETER_TOKEN_CLASS_GUID = 2148930710;
        public const uint XONLINE_E_BILLING_NULL_SUBSCRIPTIONREFID = 2148969572;
        public const uint XONLINE_E_BILLING_OBJECT_ROLE_LIMIT_EXCEEDED = 2148975565;
        public const uint XONLINE_E_BILLING_OFFER_NOT_CONFIGURED_FOR_REFERRAL = 2148935704;
        public const uint XONLINE_E_BILLING_OFFERING_ACCOUNT_CURRENCY_MISMATCH = 2148965878;
        public const uint XONLINE_E_BILLING_OFFERING_COUNTRY_ACCOUNT_MISMATCH = 2148965474;
        public const uint XONLINE_E_BILLING_OFFERING_NOT_PUBLISHED = 2148965970;
        public const uint XONLINE_E_BILLING_OFFERING_NOT_PURCHASEABLE = 2148965877;
        public const uint XONLINE_E_BILLING_OFFERING_PAYMENT_INSTRUMENT_MISMATCH = 2148965879;
        public const uint XONLINE_E_BILLING_OFFERING_PI_COUNTRY_MISMATCH = 2148966281;
        public const uint XONLINE_E_BILLING_OFFERING_REQUIRES_PI = 2148966025;
        public const uint XONLINE_E_BILLING_OFFSET_AMOUNT_GREATER_THAN_ORIGINAL = 2148946090;
        public const uint XONLINE_E_BILLING_OFFSET_IMM_SETTLE_IN_PROG = 2148946075;
        public const uint XONLINE_E_BILLING_OFFSET_OF_OFFSET_NOT_PERMITTED = 2148946535;
        public const uint XONLINE_E_BILLING_ONLYONENODE = 2148935462;
        public const uint XONLINE_E_BILLING_ORDER_LAYER_FIRST = 2148981441;
        public const uint XONLINE_E_BILLING_ORDER_LAYER_LAST = 2148982440;
        public const uint XONLINE_E_BILLING_OUTSTANDING_BALANCE = 2148935525;
        public const uint XONLINE_E_BILLING_PARTIAL_CHAREGBACK = 2148946648;
        public const uint XONLINE_E_BILLING_PARTIALCONV_EXPECTED = 2148965874;
        public const uint XONLINE_E_BILLING_PARTIALCONV_INITIATED = 2148965872;
        public const uint XONLINE_E_BILLING_PARTNERNOTINBILLING = 2148935480;
        public const uint XONLINE_E_BILLING_PASSPORT_SWITCHING_RESTRICTED = 2148930700;
        public const uint XONLINE_E_BILLING_PAYMENT_INFO_NOT_FOUND_ERROR = 2148872274;
        public const uint XONLINE_E_BILLING_PAYMENT_INSTRUMENT_CHANGES_RESTRICTED = 2148930699;
        public const uint XONLINE_E_BILLING_PAYMENT_METHOD_NO_LONGER_VALID = 2148935567;
        public const uint XONLINE_E_BILLING_PAYMENT_PROVIDER_CONNECTION_FAILED = 2148955675;
        public const uint XONLINE_E_BILLING_PAYMENT_PROVIDER_CONNECTION_TIMEOUT = 2148955775;
        public const uint XONLINE_E_BILLING_PAYMENT_PROVIDER_SUBMISSION_DECLINED = 2148945451;
        public const uint XONLINE_E_BILLING_PAYMENT_PROVIDER_SUBMISSION_FAILED = 2148945450;
        public const uint XONLINE_E_BILLING_PENDING_ITEM_PURCHASE = 2148978150;
        public const uint XONLINE_E_BILLING_PENDING_TRANSACTION = 2148969596;
        public const uint XONLINE_E_BILLING_PENDING_TRANSACTIONS = 2148969642;
        public const uint XONLINE_E_BILLING_PHONE_NUMBER_NOT_FOUND_ERROR = 2148872280;
        public const uint XONLINE_E_BILLING_PI_ACCOUNT_COUNTRY_MISMATCH = 2148966007;
        public const uint XONLINE_E_BILLING_PI_ALREADY_DECLINED = 2148965990;
        public const uint XONLINE_E_BILLING_PI_ALREADY_GOOD = 2148965985;
        public const uint XONLINE_E_BILLING_PI_ALREADY_ON_ACCOUNT = 2148950495;
        public const uint XONLINE_E_BILLING_PI_CANNOT_BE_SPECIFIED = 2148966520;
        public const uint XONLINE_E_BILLING_PI_EXECEED_MAX_OWNER_SHIP = 2148965635;
        public const uint XONLINE_E_BILLING_PI_IN_DECLINE = 2148946120;
        public const uint XONLINE_E_BILLING_PI_IS_DISABLED = 2148965995;
        public const uint XONLINE_E_BILLING_PI_NOT_SUPPORTED = 2148955795;
        public const uint XONLINE_E_BILLING_PIN_OR_SEQ_REQUIRED = 2148930697;
        public const uint XONLINE_E_BILLING_PMN_INSERT_FAILURE = 2148950460;
        public const uint XONLINE_E_BILLING_POLICY_DEAL_COUNTRY_MISMATCH = 2148966305;
        public const uint XONLINE_E_BILLING_POLICY_DEAL_VERSION_MISMATCH = 2148966302;
        public const uint XONLINE_E_BILLING_POST_BOX_ERROR_MAPPOINT = 2148978261;
        public const uint XONLINE_E_BILLING_PREPAID_TOKEN_IS_REQUIRED = 2148966550;
        public const uint XONLINE_E_BILLING_PRICE_IS_NEGATIVE = 2148978146;
        public const uint XONLINE_E_BILLING_PRIMARY_PHONE_REQUIRED = 2148965925;
        public const uint XONLINE_E_BILLING_PROCESS_USAGE_EVENTS = 2148935568;
        public const uint XONLINE_E_BILLING_PROCESSIMPORT_OFFSET_LINE_MISSING_FIELD = 2148977940;
        public const uint XONLINE_E_BILLING_PROCESSIMPORT_OFFSET_LINE_MISSING_MATCH_EVENT = 2148977990;
        public const uint XONLINE_E_BILLING_PRODUCT_KEY_NOT_AVAILABLE = 2148930696;
        public const uint XONLINE_E_BILLING_PROFILE_ALREADY_EXISTS = 2148935752;
        public const uint XONLINE_E_BILLING_PROFILE_DOES_NOT_EXIST = 2148935753;
        public const uint XONLINE_E_BILLING_PROVISIONING_INACTIVE_SUBSCRIPTION = 2148935469;
        public const uint XONLINE_E_BILLING_PUID_MISSING_ATTRIBUTE = 2148965607;
        public const uint XONLINE_E_BILLING_PUID_ROLE_LIMIT_EXCEEDED = 2148950500;
        public const uint XONLINE_E_BILLING_PUID_USED_AS_BILLABLEACCOUNTADMIN = 2148975556;
        public const uint XONLINE_E_BILLING_QUEUED_ACCOUNT_NOT_FOUND = 2148872244;
        public const uint XONLINE_E_BILLING_R_API_CALL_MADE = 2148935491;
        public const uint XONLINE_E_BILLING_R2_STARTED = 2148935490;
        public const uint XONLINE_E_BILLING_RATING_FAILURE = 2148935485;
        public const uint XONLINE_E_BILLING_RECORD_CHARGEBACK_FAILED = 2148935744;
        public const uint XONLINE_E_BILLING_REFERRAL_CODE_NOT_FOUND = 2148969561;
        public const uint XONLINE_E_BILLING_REFERRER_EXCEEDED_MAX_REFERRALS_ON_OFFER = 2148935701;
        public const uint XONLINE_E_BILLING_REFERRER_NOT_ACTIVE = 2148935702;
        public const uint XONLINE_E_BILLING_REFERRER_NOT_ELIGIBLE_FOR_REWARD_OFFER = 2148935706;
        public const uint XONLINE_E_BILLING_REFERRER_NOT_IN_SYSTEM = 2148935700;
        public const uint XONLINE_E_BILLING_REFUND_LINEITEM_NOT_SETTLED = 2148946455;
        public const uint XONLINE_E_BILLING_RENEWAL_DOES_NOT_EXISTS = 2148969626;
        public const uint XONLINE_E_BILLING_REPLACEMENT_TOKEN_PUID_MISMATCH = 2148930705;
        public const uint XONLINE_E_BILLING_REPORT_USAGE_WITH_IMMEDIATE_SETTLE = 2148935710;
        public const uint XONLINE_E_BILLING_REPORT_USAGE_WITH_PREPAID = 2148935711;
        public const uint XONLINE_E_BILLING_REQUESTER_ID_UNSPECIFIED = 2148935467;
        public const uint XONLINE_E_BILLING_REQUIRED_FIELD_MISSING = 2148965445;
        public const uint XONLINE_E_BILLING_REQUIRED_FIELD_MISSING_DUE_TO_SUBSCRIPTIONS = 2148969380;
        public const uint XONLINE_E_BILLING_RES_BALANCE_CHANGE_ON_NONACTIVE_SUBS = 2148946095;
        public const uint XONLINE_E_BILLING_RES_NOT_BELONG_TO_OBJECT = 2148945495;
        public const uint XONLINE_E_BILLING_RESOURCE_BALANCE_CHANGE_ON_NONACTIVE_SUBS = 2148966325;
        public const uint XONLINE_E_BILLING_RESOURCE_BALANCE_INACTIVE = 2148946470;
        public const uint XONLINE_E_BILLING_RESOURCE_OFFSET_ONLY_ALLOWED_FOR_USAGE = 2148946570;
        public const uint XONLINE_E_BILLING_RESOURCE_UNIT_OF_MEASURE_DO_NOT_MATCH = 2148935714;
        public const uint XONLINE_E_BILLING_REVERSAL_OF_PROCESSED_CHARGEBACK = 2148935746;
        public const uint XONLINE_E_BILLING_REWARD_OFFER_NOT_PURCHASABLE = 2148969434;
        public const uint XONLINE_E_BILLING_REWARD_REFERRAL_XML_REQUIRED = 2148935699;
        public const uint XONLINE_E_BILLING_RIME_INVALID_VALUE = 2148935762;
        public const uint XONLINE_E_BILLING_RIME_REJECTED = 2148935761;
        public const uint XONLINE_E_BILLING_RISK_CONFIGURATION_ERROR = 2148990444;
        public const uint XONLINE_E_BILLING_RISK_EVALUATION_EXCEPTION = 2148990442;
        public const uint XONLINE_E_BILLING_RISK_EVALUATION_FAILED = 2148990441;
        public const uint XONLINE_E_BILLING_RISK_EVALUATION_UNDEFINED = 2148990443;
        public const uint XONLINE_E_BILLING_RISK_LAST = 2148990975;
        public const uint XONLINE_E_BILLING_RISK_NEXT = 2148990445;
        public const uint XONLINE_E_BILLING_ROR_DD_BANK_ACCOUNT_TYPE_MAY_NOT_BE_NULL = 2148955915;
        public const uint XONLINE_E_BILLING_ROR_DD_BANK_ACCOUNT_TYPE_MUST_BE_NULL = 2148955910;
        public const uint XONLINE_E_BILLING_SA_IN_INTERMEDIATE_STATUS = 2148946385;
        public const uint XONLINE_E_BILLING_SA_IN_STATE_UNESCHEATABLE = 2148946086;
        public const uint XONLINE_E_BILLING_SA_IN_STATE_UNOFFSETABLE = 2148946085;
        public const uint XONLINE_E_BILLING_SCS_SQL_TRANSACTION_FAILED = 2148872296;
        public const uint XONLINE_E_BILLING_SCS_TRANSACTION_CANCELLED = 2148872298;
        public const uint XONLINE_E_BILLING_SCS_TRANSACTION_NOT_FOUND = 2148872297;
        public const uint XONLINE_E_BILLING_SCS_TRANSACTION_UNEXPECTED_STATE = 2148872299;
        public const uint XONLINE_E_BILLING_SERVICE_INSTANCES_NONE = 2148965820;
        public const uint XONLINE_E_BILLING_SETTLE_BALANCE_INVALID_MANDATE_STATUS = 2148935707;
        public const uint XONLINE_E_BILLING_SETTLE_SHOULD_BE_THE_LAST_EVENT = 2148935566;
        public const uint XONLINE_E_BILLING_SIGNATURE_TOKEN_MISMATCH = 2148930795;
        public const uint XONLINE_E_BILLING_STATE_CITY_INVALID = 2148985455;
        public const uint XONLINE_E_BILLING_STATE_INVALID = 2148985452;
        public const uint XONLINE_E_BILLING_STATE_ZIP_CITY_INVALID = 2148985456;
        public const uint XONLINE_E_BILLING_STATE_ZIP_CITY_INVALID2 = 2148985457;
        public const uint XONLINE_E_BILLING_STATE_ZIP_CITY_INVALID3 = 2148985458;
        public const uint XONLINE_E_BILLING_STATE_ZIP_CITY_INVALID4 = 2148985459;
        public const uint XONLINE_E_BILLING_STATE_ZIP_COVERS_MULTIPLE_CITIES = 2148985481;
        public const uint XONLINE_E_BILLING_STATE_ZIP_INVALID = 2148985454;
        public const uint XONLINE_E_BILLING_STREET_1_NOT_FOUND_ERROR = 2148872290;
        public const uint XONLINE_E_BILLING_SUBMIT_ORDER_ERROR = 2148872295;
        public const uint XONLINE_E_BILLING_SUBS_NOT_INTERMEDIATE = 2148965966;
        public const uint XONLINE_E_BILLING_SUBSCRIPTION_ALREADY_CANCELED = 2148965640;
        public const uint XONLINE_E_BILLING_SUBSCRIPTION_ALREADY_CONVERTED_OR_RENEWED = 2148935748;
        public const uint XONLINE_E_BILLING_SUBSCRIPTION_CREDIT_VALUE_MAPPING_ERROR = 2148872337;
        public const uint XONLINE_E_BILLING_SUBSCRIPTION_INACTIVE = 2148935545;
        public const uint XONLINE_E_BILLING_SUBSCRIPTION_IS_CANCELLED = 2148965908;
        public const uint XONLINE_E_BILLING_SUBSCRIPTION_NOT_EXPIRED = 2148966211;
        public const uint XONLINE_E_BILLING_SUBSCRIPTION_NOT_PREPAID = 2148966525;
        public const uint XONLINE_E_BILLING_SUBSCRIPTION_SCHEDULED_RENEWAL = 2148935751;
        public const uint XONLINE_E_BILLING_TAX_ID_ASSOCIATION_LIMIT_EXCEEDED = 2148950540;
        public const uint XONLINE_E_BILLING_TAX_ID_UPDATE_ATTEMPTS_EXCEEDED = 2148955945;
        public const uint XONLINE_E_BILLING_TAXID_EXPDATE = 2148965782;
        public const uint XONLINE_E_BILLING_TAXWARE_FAILURE = 2148985440;
        public const uint XONLINE_E_BILLING_TERM_COMMIT_EXISTS = 2148966555;
        public const uint XONLINE_E_BILLING_TOKEN_ACTION_ACCESS_DENIED = 2148930815;
        public const uint XONLINE_E_BILLING_TOKEN_ALREADY_BLACKLISTED = 2148930450;
        public const uint XONLINE_E_BILLING_TOKEN_ALREADY_DEACTIVATED = 2148930695;
        public const uint XONLINE_E_BILLING_TOKEN_ALREADY_DELIVERED = 2148930701;
        public const uint XONLINE_E_BILLING_TOKEN_ALREADY_ISSUED = 2148930755;
        public const uint XONLINE_E_BILLING_TOKEN_ALREADY_UNBLACKLISTED = 2148930451;
        public const uint XONLINE_E_BILLING_TOKEN_ALREADY_UNISSUED = 2148930760;
        public const uint XONLINE_E_BILLING_TOKEN_AND_PI_BOTH_SPECIFIED = 2148966510;
        public const uint XONLINE_E_BILLING_TOKEN_BLACKLISTED = 2148930495;
        public const uint XONLINE_E_BILLING_TOKEN_CLASS_INVALID = 2148966515;
        public const uint XONLINE_E_BILLING_TOKEN_CLASS_NOT_FOUND = 2148930475;
        public const uint XONLINE_E_BILLING_TOKEN_CONSUMED = 2148930685;
        public const uint XONLINE_E_BILLING_TOKEN_DISTRIBUTION_BATCH_INACTIVE = 2148965855;
        public const uint XONLINE_E_BILLING_TOKEN_DISTRIBUTION_BATCH_INVALID = 2148965850;
        public const uint XONLINE_E_BILLING_TOKEN_DISTRIBUTION_CHANNEL_NOT_FOUND = 2148966585;
        public const uint XONLINE_E_BILLING_TOKEN_DISTRIBUTION_STATUS_UPDATE = 2148930790;
        public const uint XONLINE_E_BILLING_TOKEN_EXPIRED = 2148930545;
        public const uint XONLINE_E_BILLING_TOKEN_EXPIRY_DATE_SET_AS_NULL = 2148930510;
        public const uint XONLINE_E_BILLING_TOKEN_ISSUE_UPDATE = 2148930765;
        public const uint XONLINE_E_BILLING_TOKEN_NOT_APPLICABLE = 2148966560;
        public const uint XONLINE_E_BILLING_TOKEN_NOT_STARTED = 2148930550;
        public const uint XONLINE_E_BILLING_TOKEN_NOT_VALID_FOR_OFFERING = 2148966475;
        public const uint XONLINE_E_BILLING_TOKEN_PART_NUMBER_ASSOC_WITH_OTHER_TOKEN_CLASS = 2148966610;
        public const uint XONLINE_E_BILLING_TOKEN_RANGE_BLACKLISTED = 2148930500;
        public const uint XONLINE_E_BILLING_TOKEN_RANGE_NOT_ACTIVE = 2148930555;
        public const uint XONLINE_E_BILLING_TOKEN_RENEWAL_PRESENT = 2148966565;
        public const uint XONLINE_E_BILLING_TOKEN_REPLACEMENT_FAILED = 2148930785;
        public const uint XONLINE_E_BILLING_TOKEN_SCHEDULED_RENEWAL_EXISTS = 2148969628;
        public const uint XONLINE_E_BILLING_TOO_MANY_ITEMS_IN_PURCHASE = 2148978144;
        public const uint XONLINE_E_BILLING_TOOLATE_REINSTATE = 2148966212;
        public const uint XONLINE_E_BILLING_TOOMANY_FDE_PURCHASES = 2148950501;
        public const uint XONLINE_E_BILLING_TOTAL_EXTENSION_GREATER_THAN_MAX = 2148966540;
        public const uint XONLINE_E_BILLING_TOTAL_EXTENSION_LESS_THAN_ZERO = 2148966530;
        public const uint XONLINE_E_BILLING_TRACKING_GUID_NODATA = 2148930650;
        public const uint XONLINE_E_BILLING_TRANS_BALANCE_MISMATCHING_ACCTS = 2148935500;
        public const uint XONLINE_E_BILLING_TRANS_BALANCE_NOT_ALLOW = 2148935515;
        public const uint XONLINE_E_BILLING_TRANS_BALANCE_TO_PI_INVALID = 2148935505;
        public const uint XONLINE_E_BILLING_TRANS_BALANCE_TO_SAME_PI = 2148935510;
        public const uint XONLINE_E_BILLING_TRANSACTION_ALREADY_CANCELLED = 2148947580;
        public const uint XONLINE_E_BILLING_TRANSACTION_DECLINED_BY_PAYMENT_PROVIDER = 2148955776;
        public const uint XONLINE_E_BILLING_TRANSACTION_EVENT_INCONSISTENT = 2148947485;
        public const uint XONLINE_E_BILLING_TRANSACTION_EVENT_UNKNOWN = 2148947480;
        public const uint XONLINE_E_BILLING_TRANSACTION_LAYER_FIRST = 2148982441;
        public const uint XONLINE_E_BILLING_TRANSACTION_LAYER_LAST = 2148983440;
        public const uint XONLINE_E_BILLING_TRANSACTION_NOT_CANCELLABLE = 2148935716;
        public const uint XONLINE_E_BILLING_TRANSACTION_NOT_EXIST = 2148947465;
        public const uint XONLINE_E_BILLING_UNABLE_TO_CALL_ON_BEHALF_OF = 2148935720;
        public const uint XONLINE_E_BILLING_UNABLE_TO_VALIDATE_TAX_ID = 2148955940;
        public const uint XONLINE_E_BILLING_UNEXPECTED_CVM_RESPONSE_CODE = 2148955880;
        public const uint XONLINE_E_BILLING_UNEXPECTED_FIELD = 2148965447;
        public const uint XONLINE_E_BILLING_UNIT_OF_MEASURE_MISMATCH = 2148965891;
        public const uint XONLINE_E_BILLING_UNKNOWN_ERROR = 2148978258;
        public const uint XONLINE_E_BILLING_UNKNOWN_MANDATE_STATUS = 2148945580;
        public const uint XONLINE_E_BILLING_UNKNOWN_MERCHANT_ID = 2148947575;
        public const uint XONLINE_E_BILLING_UNKNOWN_SERVER_FAILURE = 2148935455;
        public const uint XONLINE_E_BILLING_UNSUPPORTED_CHAR_EXIST = 2148985500;
        public const uint XONLINE_E_BILLING_UNSUPPORTED_OBJECT_TYPE = 2148969577;
        public const uint XONLINE_E_BILLING_UNSUPPORTED_PAYMENT_INSTRUMENT = 2148935540;
        public const uint XONLINE_E_BILLING_UPDATE_ADDRESS_UNKNOWN_ERROR = 2148969636;
        public const uint XONLINE_E_BILLING_UPDATING_MEMBERNAME = 2148975560;
        public const uint XONLINE_E_BILLING_UPS_NOT_UPDATED = 2148955805;
        public const uint XONLINE_E_BILLING_USAGE_COUNT_FOR_TOKEN_EXCEEDED = 2148930505;
        public const uint XONLINE_E_BILLING_USER_QUEUED = 2148872240;
        public const uint XONLINE_E_BILLING_USERACCOUNT_CONTACTLIST_GAMERTAGS_ERROR = 2148876358;
        public const uint XONLINE_E_BILLING_USERACCOUNT_INVALID_CLIENT = 2148876349;
        public const uint XONLINE_E_BILLING_USERACCOUNT_USER_NOT_FOUND = 2148876348;
        public const uint XONLINE_E_BILLING_USERACCOUNT_XUID_DOES_NOT_MATCH_USER = 2148876350;
        public const uint XONLINE_E_BILLING_VATID_DOESNOTHAVEEXPDATE = 2148965781;
        public const uint XONLINE_E_BILLING_VIOLATION_ALREADY_SET = 2148965950;
        public const uint XONLINE_E_BILLING_WHOLESALE_PARTNER_NOT_FOUND = 2148872288;
        public const uint XONLINE_E_BILLING_WRONG_DATERANGE = 2148966088;
        public const uint XONLINE_E_BILLING_WRONG_INPUT_PARAMETERS = 2148969342;
        public const uint XONLINE_E_BILLING_WRONG_OBJECT_ID_TYPE = 2148935569;
        public const uint XONLINE_E_BILLING_XML_OPERATION_ERROR = 2148969344;
        public const uint XONLINE_E_BILLING_ZERO_ADDRESSES_BY_MAPPOINT = 2148978257;
        public const uint XONLINE_E_BILLING_ZIP_CITY_MISSING = 2148985453;
        public const uint XONLINE_E_BILLING_ZIP_INVALID = 2148985451;
        public const uint XONLINE_E_BILLING_ZIP_INVALID_FOR_ENTERED_STATE = 2148985470;
        public const uint XONLINE_E_CALL_SOURCE_INVALID = 2148859942;
        public const uint XONLINE_E_CATALOG_DESERIALIZATION_ERROR = 2148881426;
        public const uint XONLINE_E_CATALOG_ERROR = 2148881425;
        public const uint XONLINE_E_CATALOG_INVALID_DETAIL_VIEW = 2148881408;
        public const uint XONLINE_E_CATALOG_INVALID_EDITORIAL_PRIV = 2148881415;
        public const uint XONLINE_E_CATALOG_INVALID_LOCALE = 2148881413;
        public const uint XONLINE_E_CATALOG_INVALID_OFFER_FILTER_LEVEL = 2148881409;
        public const uint XONLINE_E_CATALOG_INVALID_ORDER_BY = 2148881410;
        public const uint XONLINE_E_CATALOG_INVALID_ORDER_DIRECTION = 2148881411;
        public const uint XONLINE_E_CATALOG_INVALID_RANKING_TYPE = 2148881412;
        public const uint XONLINE_E_CATALOG_INVALID_SETTING = 2148881424;
        public const uint XONLINE_E_CATALOG_INVALID_VIDEO_FILTER = 2148881414;
        public const uint XONLINE_E_CATALOG_SUBSCRIPTIONS_INVALID_ARGS = 2148881427;
        public const uint XONLINE_E_CATALOGWATCHER_COMMAND_FAILURE = 2149011478;
        public const uint XONLINE_E_CATALOGWATCHER_DOCUMENT_TOO_LARGE = 2149011485;
        public const uint XONLINE_E_CATALOGWATCHER_ESPPUBLISHER_FAST_OPERATION_ERROR = 2149011460;
        public const uint XONLINE_E_CATALOGWATCHER_ESPPUBLISHER_FAST_OPERATION_WARNING = 2149011461;
        public const uint XONLINE_E_CATALOGWATCHER_ESPPUBLISHER_INCORRECT_LSN_ORDER = 2149011467;
        public const uint XONLINE_E_CATALOGWATCHER_GENERATE_DOCUMENTS_INVALID_COUNT = 2149011471;
        public const uint XONLINE_E_CATALOGWATCHER_INVALID_DESTINATION_NAME = 2149011462;
        public const uint XONLINE_E_CATALOGWATCHER_INVALID_ID = 2149011456;
        public const uint XONLINE_E_CATALOGWATCHER_INVALID_INPUT_PARAMETER = 2149011476;
        public const uint XONLINE_E_CATALOGWATCHER_INVALID_RESOURCE_NAME = 2149011463;
        public const uint XONLINE_E_CATALOGWATCHER_MEDIA_EXTRACTOR_MISSING_DOCUMENT = 2149011468;
        public const uint XONLINE_E_CATALOGWATCHER_MISSING_PARAMETER = 2149011477;
        public const uint XONLINE_E_CATALOGWATCHER_NULL_DOCUMENT_IN_QUEUE = 2149011469;
        public const uint XONLINE_E_CATALOGWATCHER_NULL_LSN = 2149011475;
        public const uint XONLINE_E_CATALOGWATCHER_PRODUCER_ERROR = 2149011457;
        public const uint XONLINE_E_CATALOGWATCHER_PRODUCER_INVALID_QUEUE_OPERATION = 2149011464;
        public const uint XONLINE_E_CATALOGWATCHER_PRODUCER_INVALID_STATE = 2149011479;
        public const uint XONLINE_E_CATALOGWATCHER_PRODUCER_NO_EXEMPTGCFORTITLES = 2149011483;
        public const uint XONLINE_E_CATALOGWATCHER_PRODUCER_NO_EXEMPTMEDIATYPES = 2149011484;
        public const uint XONLINE_E_CATALOGWATCHER_PRODUCER_NO_PDLC_CONFIG = 2149011480;
        public const uint XONLINE_E_CATALOGWATCHER_PRODUCER_NO_RATEABLE_CONFIG = 2149011481;
        public const uint XONLINE_E_CATALOGWATCHER_PRODUCER_NOT_AN_INTEGER_SETTING = 2149011482;
        public const uint XONLINE_E_CATALOGWATCHER_PRODUCER_NOT_INITIALIZED_CORRECTLY = 2149011472;
        public const uint XONLINE_E_CATALOGWATCHER_PUBLISHER_ERROR = 2149011458;
        public const uint XONLINE_E_CATALOGWATCHER_PUBLISHER_INVALID_QUEUE_OPERATION = 2149011466;
        public const uint XONLINE_E_CATALOGWATCHER_PUBLISHER_NEGATIVE_BUCKET = 2149011473;
        public const uint XONLINE_E_CATALOGWATCHER_PUBLISHER_NULL_DOCUMENT = 2149011474;
        public const uint XONLINE_E_CATALOGWATCHER_PUBLISHER_UPDATE_LSN_FAILED = 2149011465;
        public const uint XONLINE_E_CATALOGWATCHER_WATCHER_ERROR = 2149011459;
        public const uint XONLINE_E_CATALOGWATCHER_ZERO_QUEUE_SIZE = 2149011470;
        public const uint XONLINE_E_CERT_GRABBER_FAILED_TO_GET_NEW_CERT = 2148915200;
        public const uint XONLINE_E_CERT_GRABBER_FAILED_TO_PARSE_NEW_CERT = 2148915201;
        public const uint XONLINE_E_CERT_GRABBER_FAILED_TO_UPDATE_CERT = 2148915202;
        public const uint XONLINE_E_COMP_ACCESS_DENIED = 2148884994;
        public const uint XONLINE_E_COMP_ALREADY_REGISTERED = 2148885017;
        public const uint XONLINE_E_COMP_CANCELLED = 2148884998;
        public const uint XONLINE_E_COMP_CHECKIN_BAD_EVENT = 2148885000;
        public const uint XONLINE_E_COMP_CHECKIN_EVENT_SCORED = 2148885001;
        public const uint XONLINE_E_COMP_CHECKIN_TIME_INVALID = 2148884999;
        public const uint XONLINE_E_COMP_CHECKIN_TOO_EARLY = 2148885016;
        public const uint XONLINE_E_COMP_ERROR = 2148884992;
        public const uint XONLINE_E_COMP_FULL = 2148884996;
        public const uint XONLINE_E_COMP_INVALID_ENTRANT_TYPE = 2148885018;
        public const uint XONLINE_E_COMP_NO_BYES_AVAILABLE = 2148885021;
        public const uint XONLINE_E_COMP_NOT_REGISTERED = 2148884997;
        public const uint XONLINE_E_COMP_REGISTRATION_CLOSED = 2148884995;
        public const uint XONLINE_E_COMP_SERVICE_OUTAGE = 2148885022;
        public const uint XONLINE_E_COMP_TOO_EARLY = 2148885020;
        public const uint XONLINE_E_COMP_TOO_LATE = 2148885019;
        public const uint XONLINE_E_COMP_TOPOLOGY_ERROR = 2148885014;
        public const uint XONLINE_E_COMP_TOPOLOGY_PENDING = 2148885015;
        public const uint XONLINE_E_COMP_UNEXPECTED = 2148885008;
        public const uint XONLINE_E_CONFIGDB_CANNOT_DEMOTE_PARENT = 2149007366;
        public const uint XONLINE_E_CONFIGDB_INVALID_COMPONENT = 2149007360;
        public const uint XONLINE_E_CONFIGDB_INVALID_INSTANCE = 2149007361;
        public const uint XONLINE_E_CONFIGDB_INVALID_INTERFACE = 2149007367;
        public const uint XONLINE_E_CONFIGDB_INVALID_PARENT = 2149007365;
        public const uint XONLINE_E_CONFIGDB_INVALID_SERVER = 2149007363;
        public const uint XONLINE_E_CONFIGDB_INVALID_SETTING = 2149007364;
        public const uint XONLINE_E_CONFIGDB_NAME_TOO_LONG = 2149007368;
        public const uint XONLINE_E_CONFIGDB_NO_DEFAULT_INSTANCE = 2149007362;
        public const uint XONLINE_E_CONFIGDB_NO_PARAMETERS_SPECIFIED = 2149007369;
        public const uint XONLINE_E_CONTENT_NOT_FOUND = 2148872962;
        public const uint XONLINE_E_CONTENTINGESTION_INVALIDARGS = 2148913921;
        public const uint XONLINE_E_CONTENTINGESTION_UNKNOWNERROR = 2148913920;
        public const uint XONLINE_E_CTP_AU_E_BAD_BATCH_FORMAT = 2149123877;
        public const uint XONLINE_E_CTP_AU_E_DUPLICATE_RUN = 2149123876;
        public const uint XONLINE_E_CTP_AU_E_FAIL_TO_ARCHIVE = 2149123878;
        public const uint XONLINE_E_CTP_AU_E_FAIL_TO_GENERATE_INQUIRY_FILE = 2149123879;
        public const uint XONLINE_E_CTP_AU_E_INQUIRY_GENERATION_TASK_ENDED_UNSUCCESSFULLY = 2149123880;
        public const uint XONLINE_E_CTP_AU_E_NO_REQUEST_SENT = 2149123875;
        public const uint XONLINE_E_CTP_AU_E_RESPONSE_PROCESS_TASK_ENDED_UNSUCCESSFULLY = 2149123881;
        public const uint XONLINE_E_CTP_AU_E_UPDATE_PROCESS_TASK_ENDED_UNSUCCESSFULLY = 2149123888;
        public const uint XONLINE_E_CTP_BDK_CSR_API_CALL_MADE = 2149123079;
        public const uint XONLINE_E_CTP_BDK_E_ACCOUNT_CANNOT_PURCHASE_FREE_TRIAL = 2149123481;
        public const uint XONLINE_E_CTP_BDK_E_ACCOUNT_CLOSED = 2149122310;
        public const uint XONLINE_E_CTP_BDK_E_ACCOUNT_DELADMIN_ROLE_EXCEEDED = 2149122704;
        public const uint XONLINE_E_CTP_BDK_E_ACCOUNT_NOT_CLOSED = 2149122371;
        public const uint XONLINE_E_CTP_BDK_E_ACCOUNT_WITHOUT_ADDRESS = 2149123719;
        public const uint XONLINE_E_CTP_BDK_E_ACCT_ALREADY_REFERRED = 2149122817;
        public const uint XONLINE_E_CTP_BDK_E_ACTION_NOT_APPLICABLE_FOR_PAYMENT_TYPE = 2149123478;
        public const uint XONLINE_E_CTP_BDK_E_ACTIVATE_TOKEN_RANGE_NOT_PRESENT = 2149123379;
        public const uint XONLINE_E_CTP_BDK_E_ACTIVE_SUBSCRIPTIONS = 2149122153;
        public const uint XONLINE_E_CTP_BDK_E_ACTIVE_SUBSCRIPTIONS_EXIST = 2149122360;
        public const uint XONLINE_E_CTP_BDK_E_ADD_USER_TO_SERVICE_INSTANCE = 2149122307;
        public const uint XONLINE_E_CTP_BDK_E_ADDITIONAL_ACCOUNT_DATA_REQUIRED = 2149122816;
        public const uint XONLINE_E_CTP_BDK_E_ADDRESS_COUNTRY_ACCOUNT_MISMATCH = 2149122166;
        public const uint XONLINE_E_CTP_BDK_E_ADDRESS_VALIDATION_FAILURE = 2149123209;
        public const uint XONLINE_E_CTP_BDK_E_ADJUST_RESOURCE_BALANCE_FOR_NONACTIVE_SUBS = 2149123157;
        public const uint XONLINE_E_CTP_BDK_E_ADJUSTMENT_TOOBIG = 2149122320;
        public const uint XONLINE_E_CTP_BDK_E_ADJUSTMENT_TOOSMALL = 2149122321;
        public const uint XONLINE_E_CTP_BDK_E_AGREEMENT_ALREADY_SIGNED = 2149122675;
        public const uint XONLINE_E_CTP_BDK_E_AGREEMENT_NOT_SIGNED = 2149122819;
        public const uint XONLINE_E_CTP_BDK_E_ALREADY_ACTIVATED = 2149123392;
        public const uint XONLINE_E_CTP_BDK_E_ALREADY_BANNED = 2149122050;
        public const uint XONLINE_E_CTP_BDK_E_ALREADY_IN_SPECIFIED_STATE = 2149122150;
        public const uint XONLINE_E_CTP_BDK_E_ALREADY_OFFSET_TAX = 2149123639;
        public const uint XONLINE_E_CTP_BDK_E_ALREADY_REPLACED_TOKEN = 2149122630;
        public const uint XONLINE_E_CTP_BDK_E_AMOUNT_IN_PROCESS = 2149122857;
        public const uint XONLINE_E_CTP_BDK_E_AMOUNT_NOT_COLLECTED_YET = 2149122855;
        public const uint XONLINE_E_CTP_BDK_E_ARITHMETIC_OVERFLOW_FOR_ADD_OR_UPDATE_USAGE = 2149122884;
        public const uint XONLINE_E_CTP_BDK_E_AUTHORIZATION_FAILED = 2149122070;
        public const uint XONLINE_E_CTP_BDK_E_AVS_FAILED = 2149122068;
        public const uint XONLINE_E_CTP_BDK_E_BAD_BEGIN_BILLING_PERIOD = 2149122656;
        public const uint XONLINE_E_CTP_BDK_E_BAD_BILLING_PERIOD_LENGTH = 2149123136;
        public const uint XONLINE_E_CTP_BDK_E_BAD_BUSINESSLOCATIONCODE_LENGTH = 2149123348;
        public const uint XONLINE_E_CTP_BDK_E_BAD_CITYNAME_LENGTH = 2149123337;
        public const uint XONLINE_E_CTP_BDK_E_BAD_COUNTRYCODE_LENGTH = 2149123344;
        public const uint XONLINE_E_CTP_BDK_E_BAD_CURRENCYCODE_LENGTH = 2149123351;
        public const uint XONLINE_E_CTP_BDK_E_BAD_END_BILLING_PERIOD = 2149123141;
        public const uint XONLINE_E_CTP_BDK_E_BAD_OBJECT_ID_LENGTH = 2149123128;
        public const uint XONLINE_E_CTP_BDK_E_BAD_PRODUCTCODE_LENGTH = 2149123347;
        public const uint XONLINE_E_CTP_BDK_E_BAD_PUID = 2149123127;
        public const uint XONLINE_E_CTP_BDK_E_BAD_RETURN_STATEMENT_SET = 2149123137;
        public const uint XONLINE_E_CTP_BDK_E_BAD_RETURN_STATEMENT_SET_INDICATOR = 2149122649;
        public const uint XONLINE_E_CTP_BDK_E_BAD_RETURN_STATEMENT_SET_INDICATOR2 = 2149122883;
        public const uint XONLINE_E_CTP_BDK_E_BAD_START_BILLING_PERIOD = 2149123140;
        public const uint XONLINE_E_CTP_BDK_E_BAD_START_END_BILLING_PERIOD = 2149122659;
        public const uint XONLINE_E_CTP_BDK_E_BAD_STATECODE_LENGTH = 2149123345;
        public const uint XONLINE_E_CTP_BDK_E_BAD_TRANSACTIONDATE_LENGTH = 2149123349;
        public const uint XONLINE_E_CTP_BDK_E_BAD_VATREGISTRATION_LENGTH = 2149123350;
        public const uint XONLINE_E_CTP_BDK_E_BAD_WTCODE_LENGTH = 2149123352;
        public const uint XONLINE_E_CTP_BDK_E_BAD_ZIPCODE_LENGTH = 2149123346;
        public const uint XONLINE_E_CTP_BDK_E_BADCANCELMODE = 2149122944;
        public const uint XONLINE_E_CTP_BDK_E_BADSAMECARDUSEDMULTIPLETIMES = 2149122929;
        public const uint XONLINE_E_CTP_BDK_E_BADXML = 2149122936;
        public const uint XONLINE_E_CTP_BDK_E_BADZIP = 2149122961;
        public const uint XONLINE_E_CTP_BDK_E_BAN_NULL_INPUT_PARAMETER = 2149122049;
        public const uint XONLINE_E_CTP_BDK_E_BANNED_PAYMENT_INSTRUMENT = 2149122057;
        public const uint XONLINE_E_CTP_BDK_E_BANNEDPERSON = 2149122052;
        public const uint XONLINE_E_CTP_BDK_E_BELOW_IMMEDIATE_SETTLE_MINIMUM = 2149123184;
        public const uint XONLINE_E_CTP_BDK_E_BILLING_FAILURE = 2149123431;
        public const uint XONLINE_E_CTP_BDK_E_BILLING_PERIOD_GREATER_THAN_SUBSCRIPTION_DURATION = 2149122663;
        public const uint XONLINE_E_CTP_BDK_E_BILLING_PERIOD_NEGATIVE = 2149122658;
        public const uint XONLINE_E_CTP_BDK_E_BILLING_REFERENCE_ID_ALREADY_REMOVED = 2149123442;
        public const uint XONLINE_E_CTP_BDK_E_BILLING_RETRYABLE_FAILURE = 2149123432;
        public const uint XONLINE_E_CTP_BDK_E_BILLINGPERIOD_PAST = 2149122311;
        public const uint XONLINE_E_CTP_BDK_E_BLACKLIST_ACTION_NOT_PERFORMED = 2149122594;
        public const uint XONLINE_E_CTP_BDK_E_BLACKLIST_EFFECTIVE_DATE_LESS_THAN_ORDER_CREATION_DATE = 2149123395;
        public const uint XONLINE_E_CTP_BDK_E_BSS_INTERNAL_SERVER_ERROR = 2149123736;
        public const uint XONLINE_E_CTP_BDK_E_BSS_INVALID_ORDER_STATUS = 2149123737;
        public const uint XONLINE_E_CTP_BDK_E_BSS_NOT_SUPPORTED_LINE_ITEM_ID = 2149123735;
        public const uint XONLINE_E_CTP_BDK_E_BSS_PARITAL_CHARGE_BACK = 2149123840;
        public const uint XONLINE_E_CTP_BDK_E_BSS_TIMEOUT_ERROR = 2149123841;
        public const uint XONLINE_E_CTP_BDK_E_CAN_NOT_DELETE_DEFAULT_PAYOUT_PREFERENCE = 2149123721;
        public const uint XONLINE_E_CTP_BDK_E_CANCELREFUND_BOTH_LINE_AND_RELATED_LINE = 2149123445;
        public const uint XONLINE_E_CTP_BDK_E_CANCELREFUND_OFFSET_OF_OFFSET = 2149123445;
        public const uint XONLINE_E_CTP_BDK_E_CANNOT_CONVERT_BACK_TO_WHOLESALE = 2149122679;
        public const uint XONLINE_E_CTP_BDK_E_CANNOT_CREATE_BILLING_AGREEMENT = 2149123329;
        public const uint XONLINE_E_CTP_BDK_E_CANNOT_EXCEED_MAX_OWNERSHIP = 2149122344;
        public const uint XONLINE_E_CTP_BDK_E_CANNOT_OFFSET_HARD_SOFT_DECLINED = 2149122853;
        public const uint XONLINE_E_CTP_BDK_E_CANNOT_OFFSET_ZERO_AMOUNT = 2149122856;
        public const uint XONLINE_E_CTP_BDK_E_CANNOT_REFER_SELF = 2149123172;
        public const uint XONLINE_E_CTP_BDK_E_CANNOT_REMOVE_SELF = 2149122935;
        public const uint XONLINE_E_CTP_BDK_E_CANNOT_SPECIFY_BILLABLE_ACCOUNT_ID = 2149123730;
        public const uint XONLINE_E_CTP_BDK_E_CANNOT_SPECIFY_PI_DURING_RENEW = 2149122680;
        public const uint XONLINE_E_CTP_BDK_E_CANNOT_UPDATE_CURRENCY = 2149122337;
        public const uint XONLINE_E_CTP_BDK_E_CANNOT_UPDATE_PAYPALPAYIN_PAYMENT_METHOD_AGAIN = 2149123331;
        public const uint XONLINE_E_CTP_BDK_E_CANT_STOP_TAIWAN_TAXINV = 2149122454;
        public const uint XONLINE_E_CTP_BDK_E_CD_NOTFOUND = 2149123620;
        public const uint XONLINE_E_CTP_BDK_E_CHANNELSKU_PKPN_PERCENTAGE_CANNOT_UPDATE = 2149122645;
        public const uint XONLINE_E_CTP_BDK_E_CHARGEBACK_INFO_MISSING = 2149123702;
        public const uint XONLINE_E_CTP_BDK_E_CHARGEBACK_NOT_FOUND = 2149123656;
        public const uint XONLINE_E_CTP_BDK_E_CHARGEBACK_NOT_MATCH = 2149123657;
        public const uint XONLINE_E_CTP_BDK_E_CHARGEBACK_PROCESSING_FAILURE = 2149123700;
        public const uint XONLINE_E_CTP_BDK_E_COMPUTE_ONLY = 2149122437;
        public const uint XONLINE_E_CTP_BDK_E_CONVERSION_CREDITS_NOT_ENABLED = 2149122585;
        public const uint XONLINE_E_CTP_BDK_E_CONVERSION_NEEDTODEPROVISION = 2149122390;
        public const uint XONLINE_E_CTP_BDK_E_COUNTRY_CODE_MAPPOINT_NOT_ENABLED = 2149123640;
        public const uint XONLINE_E_CTP_BDK_E_COUNTRY_CURRENCY_PI_MISMATCH = 2149122053;
        public const uint XONLINE_E_CTP_BDK_E_COUNTRY_MAPPOINT_DISABLED = 2149123672;
        public const uint XONLINE_E_CTP_BDK_E_COUNTRY_NOT_SUPPORTED = 2149123671;
        public const uint XONLINE_E_CTP_BDK_E_CREDIT_AMOUNT_OVER_LIMIT = 2149122865;
        public const uint XONLINE_E_CTP_BDK_E_CREDIT_CARD_EXPIRED = 2149122067;
        public const uint XONLINE_E_CTP_BDK_E_CSR_AUTHZ_FAILED = 2149122964;
        public const uint XONLINE_E_CTP_BDK_E_CSR_CALL_FROM_NONCSR = 2149123080;
        public const uint XONLINE_E_CTP_BDK_E_CURRENCY_MISSING = 2149123472;
        public const uint XONLINE_E_CTP_BDK_E_CURRENT_DATE_LESS_THAN_ACCOUNT_HISTORY_DATE = 2149122660;
        public const uint XONLINE_E_CTP_BDK_E_CVM_FAILED = 2149122132;
        public const uint XONLINE_E_CTP_BDK_E_CVM_MISSING = 2149123480;
        public const uint XONLINE_E_CTP_BDK_E_DATE_EXPIRED = 2149122325;
        public const uint XONLINE_E_CTP_BDK_E_DAV_APARTMENT = 2149123906;
        public const uint XONLINE_E_CTP_BDK_E_DAV_DISABLED = 2149123925;
        public const uint XONLINE_E_CTP_BDK_E_DAV_GENERAL = 2149123920;
        public const uint XONLINE_E_CTP_BDK_E_DAV_ID = 2149123908;
        public const uint XONLINE_E_CTP_BDK_E_DAV_INSUFFICIENT = 2149123907;
        public const uint XONLINE_E_CTP_BDK_E_DAV_INVALID_CHARSET = 2149123926;
        public const uint XONLINE_E_CTP_BDK_E_DAV_INVALID_DATA = 2149123922;
        public const uint XONLINE_E_CTP_BDK_E_DAV_MISSING_DATA = 2149123921;
        public const uint XONLINE_E_CTP_BDK_E_DAV_MULTIPLE = 2149123909;
        public const uint XONLINE_E_CTP_BDK_E_DAV_POBOX = 2149123910;
        public const uint XONLINE_E_CTP_BDK_E_DAV_POSTAL = 2149123913;
        public const uint XONLINE_E_CTP_BDK_E_DAV_ROUTE = 2149123911;
        public const uint XONLINE_E_CTP_BDK_E_DAV_STREET = 2149123912;
        public const uint XONLINE_E_CTP_BDK_E_DAV_SYSTEM_FAILURE = 2149123923;
        public const uint XONLINE_E_CTP_BDK_E_DAV_TIMEOUT = 2149123924;
        public const uint XONLINE_E_CTP_BDK_E_DBBADZIP = 2149122712;
        public const uint XONLINE_E_CTP_BDK_E_DD_ACCOUNT_MISSING = 2149122083;
        public const uint XONLINE_E_CTP_BDK_E_DD_BANKCODE_MISSING = 2149122084;
        public const uint XONLINE_E_CTP_BDK_E_DD_BRANCHCODE_MISSING = 2149122085;
        public const uint XONLINE_E_CTP_BDK_E_DD_CHECKDIGIT_MISSING = 2149122086;
        public const uint XONLINE_E_CTP_BDK_E_DD_CONCATENATED_STRING_LENGTH_EXCEEDS_24 = 2149122065;
        public const uint XONLINE_E_CTP_BDK_E_DD_DUPLICATE_MRN = 2149122136;
        public const uint XONLINE_E_CTP_BDK_E_DD_ERROR_IN_FIELDS = 2149122087;
        public const uint XONLINE_E_CTP_BDK_E_DD_GC_CHECK_INCOMPLETE = 2149122118;
        public const uint XONLINE_E_CTP_BDK_E_DD_GC_INCORRECT_XML_FORMAT = 2149122116;
        public const uint XONLINE_E_CTP_BDK_E_DD_GC_INVALID_RFBANKCODE = 2149122121;
        public const uint XONLINE_E_CTP_BDK_E_DD_GC_NON_XML_RESPONSE = 2149122115;
        public const uint XONLINE_E_CTP_BDK_E_DD_GC_RETURNED_NOK_RESULT = 2149122117;
        public const uint XONLINE_E_CTP_BDK_E_DD_GC_XML_INVALID_CHECK_RESULT = 2149122120;
        public const uint XONLINE_E_CTP_BDK_E_DD_INVALID_ACCOUNT_FORMAT = 2149122073;
        public const uint XONLINE_E_CTP_BDK_E_DD_INVALID_ACCOUNT_HOLDER_NAME = 2149122098;
        public const uint XONLINE_E_CTP_BDK_E_DD_INVALID_ACCOUNT_VALUE = 2149122088;
        public const uint XONLINE_E_CTP_BDK_E_DD_INVALID_BANKCODE_FORMAT = 2149122080;
        public const uint XONLINE_E_CTP_BDK_E_DD_INVALID_BANKCODE_VALUE = 2149122089;
        public const uint XONLINE_E_CTP_BDK_E_DD_INVALID_BRANCHCODE_FORMAT = 2149122081;
        public const uint XONLINE_E_CTP_BDK_E_DD_INVALID_BRANCHCODE_VALUE = 2149122096;
        public const uint XONLINE_E_CTP_BDK_E_DD_INVALID_CHECKDIGIT_FORMAT = 2149122082;
        public const uint XONLINE_E_CTP_BDK_E_DD_INVALID_CHECKDIGIT_VALUE = 2149122097;
        public const uint XONLINE_E_CTP_BDK_E_DD_INVALID_COUNTRY = 2149122072;
        public const uint XONLINE_E_CTP_BDK_E_DD_INVALID_MERCHANT_INDEX = 2149122135;
        public const uint XONLINE_E_CTP_BDK_E_DD_MPF_INCORRECT_XML_FORMAT = 2149122114;
        public const uint XONLINE_E_CTP_BDK_E_DD_MPF_NON_XML_RESPONSE = 2149122113;
        public const uint XONLINE_E_CTP_BDK_E_DD_OPENING_GC_XML_CHECKSPERFORMED = 2149122119;
        public const uint XONLINE_E_CTP_BDK_E_DD_RISK_DECLINE = 2149122146;
        public const uint XONLINE_E_CTP_BDK_E_DD_UNKNOWN_PROVIDER_FAILURE = 2149122099;
        public const uint XONLINE_E_CTP_BDK_E_DD_UNKNOWN_VALIDATION_FAILURE = 2149122137;
        public const uint XONLINE_E_CTP_BDK_E_DD_UNSUPPORTED = 2149122112;
        public const uint XONLINE_E_CTP_BDK_E_DEAL_HAS_MULTIPLE_DELAYED_COMPONENTS = 2149122450;
        public const uint XONLINE_E_CTP_BDK_E_DEAL_TOKEN_MAPPING_NOT_PRESENT = 2149122560;
        public const uint XONLINE_E_CTP_BDK_E_DECLINING_BALANCE = 2149122825;
        public const uint XONLINE_E_CTP_BDK_E_DECRYPTION_FAILURE = 2149122056;
        public const uint XONLINE_E_CTP_BDK_E_DEFERRED_COMPUTE_ONLY_NOT_SUPPORTED = 2149123106;
        public const uint XONLINE_E_CTP_BDK_E_DELAYED_EXPIRE_ALREADY_PENDING = 2149122185;
        public const uint XONLINE_E_CTP_BDK_E_DELAYED_EXPIRE_NOT_PENDING = 2149122192;
        public const uint XONLINE_E_CTP_BDK_E_DELAYED_EXPIRE_NOT_SUPPORTED = 2149122193;
        public const uint XONLINE_E_CTP_BDK_E_DELAYED_PROVISIONING_COMPONENTS_EXIST = 2149122416;
        public const uint XONLINE_E_CTP_BDK_E_DELEGATE_ID_UNSPECIFIED = 2149122966;
        public const uint XONLINE_E_CTP_BDK_E_DESCRIPTION_MAXLENGTH_EXCEEDED = 2149123731;
        public const uint XONLINE_E_CTP_BDK_E_DISCOUNT_ALREADY_APPLIED = 2149123603;
        public const uint XONLINE_E_CTP_BDK_E_DISCOUNT_REQUIRED_FOR_TOKEN = 2149123604;
        public const uint XONLINE_E_CTP_BDK_E_DISCOUNT_TOKEN = 2149123605;
        public const uint XONLINE_E_CTP_BDK_E_DISCOUNT_TOKEN_CLASS_MISMATCH = 2149123608;
        public const uint XONLINE_E_CTP_BDK_E_DISCOUNT_USAGE_EXCEEDED = 2149123607;
        public const uint XONLINE_E_CTP_BDK_E_DISTRIBUTION_PROGRAM_INACTIVE = 2149122611;
        public const uint XONLINE_E_CTP_BDK_E_DMP_FIRST = 2149123847;
        public const uint XONLINE_E_CTP_BDK_E_DMP_FLOW_NOT_ENABLED = 2149123474;
        public const uint XONLINE_E_CTP_BDK_E_DMP_LAST = 2149123848;
        public const uint XONLINE_E_CTP_BDK_E_DMP_MAX_BALANCE_EXCEEDED = 2149123465;
        public const uint XONLINE_E_CTP_BDK_E_DMP_UNKNOWN_ERROR = 2149123477;
        public const uint XONLINE_E_CTP_BDK_E_DONOR_BENEFICIARY_COUNTRY_MISMATCH = 2149123584;
        public const uint XONLINE_E_CTP_BDK_E_DONOR_BENEFICIARY_SAME = 2149123585;
        public const uint XONLINE_E_CTP_BDK_E_DONOTSHOWOFFSET_MISMATCHED_AMOUNT = 2149122898;
        public const uint XONLINE_E_CTP_BDK_E_DOUBLE_CHARGEBACK = 2149123664;
        public const uint XONLINE_E_CTP_BDK_E_DOUBLE_CHARGEBACK_FOR_REVERSAL = 2149123670;
        public const uint XONLINE_E_CTP_BDK_E_DOUBLE_CHARGEBACK_REVERSAL = 2149123704;
        public const uint XONLINE_E_CTP_BDK_E_DUPLICATE_EVENT_ID = 2149122867;
        public const uint XONLINE_E_CTP_BDK_E_DUPLICATE_ITEM_EXTERNAL_ID = 2149123414;
        public const uint XONLINE_E_CTP_BDK_E_DUPLICATE_TOKEN_TRACKING_GUID = 2149123385;
        public const uint XONLINE_E_CTP_BDK_E_DUPLICATE_TRACKING_GUID = 2149122832;
        public const uint XONLINE_E_CTP_BDK_E_DUPLICATE_TRANSACTION_CONFIRMATION_NUMBER = 2149122904;
        public const uint XONLINE_E_CTP_BDK_E_DUPLICATED_CHANNELSKU_WITH_PCT = 2149122644;
        public const uint XONLINE_E_CTP_BDK_E_DUPLICATED_PKPN_WITH_PCT = 2149122633;
        public const uint XONLINE_E_CTP_BDK_E_DYNAMIC_PRICE_CONFIGURATION = 2149123464;
        public const uint XONLINE_E_CTP_BDK_E_DYNAMIC_TITLE_AND_CATEGORY_CONFIGURATION = 2149122821;
        public const uint XONLINE_E_CTP_BDK_E_EMAIL_REQUIRED = 2149122370;
        public const uint XONLINE_E_CTP_BDK_E_ENCRYPTION_FAILURE = 2149123846;
        public const uint XONLINE_E_CTP_BDK_E_END_DATE_BEYOND_MAX = 2149122384;
        public const uint XONLINE_E_CTP_BDK_E_END_DATE_GREATER_THAN_CURRENT_DATE = 2149122436;
        public const uint XONLINE_E_CTP_BDK_E_END_DATE_IN_THE_PAST = 2149122377;
        public const uint XONLINE_E_CTP_BDK_E_END_PERIOD_LESS_THAN_START_PERIOD = 2149123129;
        public const uint XONLINE_E_CTP_BDK_E_ENTITLEMENT_ENDPOINT_UNAVAILABLE = 2149123203;
        public const uint XONLINE_E_CTP_BDK_E_ENTITLEMENT_VALIDATION_FAILED = 2149123204;
        public const uint XONLINE_E_CTP_BDK_E_ERROR_COUNTRYCODE_MISMATCH = 2149123363;
        public const uint XONLINE_E_CTP_BDK_E_ERROR_COUNTRYCODE_REQUIRED = 2149123364;
        public const uint XONLINE_E_CTP_BDK_E_ERROR_INVALID_CHARGEBACK_INPUT_DETAILS = 2149123655;
        public const uint XONLINE_E_CTP_BDK_E_ERROR_OCCURRED = 2149122406;
        public const uint XONLINE_E_CTP_BDK_E_ERROR_OCCURRED_TRY_LATER = 2149122405;
        public const uint XONLINE_E_CTP_BDK_E_ERROR_PHONE_STRING_TOOLONG = 2149122692;
        public const uint XONLINE_E_CTP_BDK_E_ERROR_PP_INVALID_TAX_REFUND_CODE = 2149122903;
        public const uint XONLINE_E_CTP_BDK_E_ERROR_TOKEN_CLASS_ACCESS_DENIED = 2149122693;
        public const uint XONLINE_E_CTP_BDK_E_EVENT_ACTION_NOT_OFFSETTABLE = 2149122900;
        public const uint XONLINE_E_CTP_BDK_E_EVENT_TIMESTAMP_IN_THE_FUTURE = 2149122665;
        public const uint XONLINE_E_CTP_BDK_E_EVT_DATE_BEFORE_PURCHASE_DATE = 2149122353;
        public const uint XONLINE_E_CTP_BDK_E_EXCEED_DATERANGE_LIMIT = 2149122432;
        public const uint XONLINE_E_CTP_BDK_E_EXCEEDING_TAX_EXEMPT_LIMITS = 2149122163;
        public const uint XONLINE_E_CTP_BDK_E_EXCEEDS_MAX_NUMBER_OF_SERVICE_INSTANCE_REQUESTS = 2149122711;
        public const uint XONLINE_E_CTP_BDK_E_EXCEEDS_MAX_NUMBER_OF_USAGE_EVENTS = 2149123104;
        public const uint XONLINE_E_CTP_BDK_E_EXCEEDS_MAX_TOKEN_INSTANCE = 2149122648;
        public const uint XONLINE_E_CTP_BDK_E_EXCEEDS_MAXIMUM_DURATION = 2149122584;
        public const uint XONLINE_E_CTP_BDK_E_EXCEEDS_RESOURCE_CREDIT_LIMIT = 2149123156;
        public const uint XONLINE_E_CTP_BDK_E_EXISTING_BILLING_ACTIVITY = 2149122361;
        public const uint XONLINE_E_CTP_BDK_E_EXISTS_VIOLATION = 2149122375;
        public const uint XONLINE_E_CTP_BDK_E_EXTERNAL_VENDOR_ERROR = 2149122149;
        public const uint XONLINE_E_CTP_BDK_E_EXTRA_REFERRAL_DATA = 2149122441;
        public const uint XONLINE_E_CTP_BDK_E_FAILED_INSERTING_TOKEN_INS_DEAL_SUBS = 2149123378;
        public const uint XONLINE_E_CTP_BDK_E_FAILED_SETTLEMENT_AMOUNT_UPDATE = 2149123123;
        public const uint XONLINE_E_CTP_BDK_E_FAILED_TO_CREATE_MAIL_RECORD = 2149123158;
        public const uint XONLINE_E_CTP_BDK_E_FAILED_TO_WRITE_TO_AUDIT_DB = 2149123160;
        public const uint XONLINE_E_CTP_BDK_E_FIELD_NOT_UPDATEABLE = 2149123105;
        public const uint XONLINE_E_CTP_BDK_E_FIELD_TOO_LONG = 2149122960;
        public const uint XONLINE_E_CTP_BDK_E_FIELD_TOO_SHORT = 2149122953;
        public const uint XONLINE_E_CTP_BDK_E_FREE_SCHEDULED_RENEWAL_EXISTS = 2149122449;
        public const uint XONLINE_E_CTP_BDK_E_FREQUENCY_CHECK_FAILED = 2149122134;
        public const uint XONLINE_E_CTP_BDK_E_FUTURE_OFFERING_PAYMENT_INSTRUMENT_MISMATCH = 2149122356;
        public const uint XONLINE_E_CTP_BDK_E_GENERATE_NEXT_ID = 2149122164;
        public const uint XONLINE_E_CTP_BDK_E_GET_BADETAIL_FAILED = 2149123330;
        public const uint XONLINE_E_CTP_BDK_E_GROUP_SID_INITIALIZATION_FAILED = 2149123153;
        public const uint XONLINE_E_CTP_BDK_E_GUID_EXISTS = 2149122326;
        public const uint XONLINE_E_CTP_BDK_E_HCI_NOT_VALID = 2149122453;
        public const uint XONLINE_E_CTP_BDK_E_IMMEDIATE_SETTLE_NOT_AVAILABLE_FOR_PAYMENT_INSTRUMENT = 2149123188;
        public const uint XONLINE_E_CTP_BDK_E_IMMEDIATE_SETTLE_OF_USAGE_NOT_PERMITTED = 2149122901;
        public const uint XONLINE_E_CTP_BDK_E_IMMEDIATE_SETTLEMENT_FAILURE = 2149122133;
        public const uint XONLINE_E_CTP_BDK_E_INCREMENT_TOTAL = 2149122823;
        public const uint XONLINE_E_CTP_BDK_E_INPUT_FILTER_XML_MISSING = 2149122565;
        public const uint XONLINE_E_CTP_BDK_E_INPUT_PARAM_MALFORMED = 2149123457;
        public const uint XONLINE_E_CTP_BDK_E_INSERING_TOKEN_CLASS_PARTNER = 2149122600;
        public const uint XONLINE_E_CTP_BDK_E_INSERT_AGREEMENT_SIGNATURE = 2149122674;
        public const uint XONLINE_E_CTP_BDK_E_INSERT_DISCOUNT = 2149123602;
        public const uint XONLINE_E_CTP_BDK_E_INSERT_DISCOUNT_LOCALIZE = 2149123606;
        public const uint XONLINE_E_CTP_BDK_E_INSERTING_RECONCILE_HISTORY = 2149122612;
        public const uint XONLINE_E_CTP_BDK_E_INSERTING_USER_TOKEN_HASH = 2149122562;
        public const uint XONLINE_E_CTP_BDK_E_INSUFFICIENT_PREPAID_BALANCE = 2149122889;
        public const uint XONLINE_E_CTP_BDK_E_INTERNAL_ADD_COMMENT_FAILED = 2149123120;
        public const uint XONLINE_E_CTP_BDK_E_INTERNAL_ERROR = 2149123091;
        public const uint XONLINE_E_CTP_BDK_E_INTERNAL_ERROR_CONNECTING_TO_MAPPOINT = 2149123648;
        public const uint XONLINE_E_CTP_BDK_E_INTERNAL_ERROR_TOKEN = 2149123410;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_ACCOUNT_SOUCE = 2149122161;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_ACCOUNT_STATUS = 2149122359;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_ACCOUNTID = 2149123621;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_ADDRESS_FIELD_LENGTH = 2149123075;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_ADDRESS_ID = 2149122181;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_ADDRESSINFOXML = 2149123652;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_ADJUSMENT_FOR_PERIOD = 2149122313;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_ADJUSTMENT_OFFSET = 2149123458;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_ADJUSTMENTGUID = 2149122312;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_AMOUNT = 2149122837;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_AMOUNT_FOR_CURRENCY = 2149122417;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_AMOUNT_FOR_CURRENCY_2 = 2149122866;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_AMOUNT_VALUE = 2149123112;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_ANNIV = 2149122839;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_ANONYMOUS_INFO_XML = 2149123622;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_ARG = 2149122948;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_BAN_REASON_CODE = 2149122129;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_BEGIN_DATE = 2149122434;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_BILLABLE_ACCOUNT_ID = 2149122168;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_BILLABLE_ACCOUNT_STATUS_ID = 2149122169;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_BILLABLEACCTSTATUS = 2149122308;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_BILLING_MODE = 2149123429;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_BILLING_PERIOD = 2149122838;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_BILLING_REFERENCE_ID = 2149123441;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_BLACKLIST_HISTORY_DESCRIPTION = 2149123394;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_BLACKLIST_HISTORY_REASON_CODE = 2149123383;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_BOBOPARTNER = 2149123202;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_BOOKMARK = 2149123408;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_BUF_SIZE = 2149122945;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_CANCEL_DATE = 2149122194;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_CANCEL_TRANSACTION_RESULT = 2149123479;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_CATEGORY_NAME = 2149122339;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_CHARGE_DESCRIPTOR = 2149123193;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_CHARGEBACK_AMOUNT = 2149123638;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_CHARGEBACK_DATE = 2149123637;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_CHARGEBACK_ID = 2149123699;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_CHARGEBACK_ID_FOR_REVERSAL_CHARGEBACK_ID = 2149123667;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_CHARGEBACK_LINEITEM_ID = 2149123665;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_CHARGEBACK_REVERSAL_ID = 2149123666;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_COBRAND = 2149122451;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_COMBINATION = 2149122616;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_COMMITTED_STATUS = 2149123393;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_CONVERSION = 2149122387;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_COUNTRY_CODE = 2149122180;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_CREATION_DATE = 2149122162;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_CREDIT_AMOUNT = 2149122864;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_CREDIT_CARD_NUMBER = 2149122066;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_CREDIT_CARD_TYPE = 2149122055;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_CUMULATIVE_AMOUNT = 2149122912;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_CUMULATIVE_TAX_AMOUNT = 2149122919;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_CURRENCY = 2149122324;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_CURRENCY2 = 2149122836;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_CUSTOMER_TYPE = 2149122323;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_CUSTOMER_TYPE_FOR_PARTNER = 2149123609;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_CVM_CODE = 2149122130;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_DATE = 2149122343;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_DD_ACCOUNT = 2149122064;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_DELEGATE_USER_INFORMATION = 2149123856;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_DESCRIPTION_PRICEDESC = 2149123697;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_DETAILEDLEVEL = 2149122425;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_DISCOUNT = 2149123601;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_EMAIL_ADDRESS = 2149122418;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_ENCRYPT_ACCOUNT_NUMBER = 2149123715;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_END_BILLING_PERIOD = 2149122657;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_END_DATE = 2149122435;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_END_PERIOD = 2149122424;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_ENTITLEMENT_ENDPOINT = 2149123205;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_EVENT_TYPE = 2149122848;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_EXPIRATION_DATE = 2149122833;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_EXTERNAL_REFERENCE_ID = 2149123398;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_FIELD_LENGTH = 2149122963;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_FILTER = 2149122951;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_FIN_REASON_CODE_FOR_OFFSET = 2149122899;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_FINANCIAL_REASON_CODE = 2149122896;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_FIRSTNAME_FIELD_LENGTH = 2149123073;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_FLAG_VALUE = 2149122968;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_GUID = 2149123094;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_IMMEDIATE_SETTLE_VALUE = 2149123121;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_INITIATE_TRANSACTION_RESULT = 2149122102;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_INPUT_FILTER_XML = 2149122567;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_INPUT_RATINGRULE_DATA = 2149123680;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_INPUT_TO_TAXWARE_OR_VERAZIP = 2149123353;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_INVOICE_INFO_XML = 2149122402;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_ITEM_ENTRY_SET = 2149123430;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_ITEM_INSTANCE_ID = 2149123459;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_LASTNAME_FIELD_LENGTH = 2149123074;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_LEN_PART_NUMBER = 2149122597;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_LEN_SAP_CUST_NAME = 2149122598;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_LEN_SUPPORT_VENDOR_NAME = 2149122599;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_LINEITEM_ID = 2149122840;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_LINEITEM_ID_FOR_CHARGEBACK_ID = 2149123668;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_LINEITEM_ID_FOR_REVERSAL = 2149123636;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_LINEITEM_STATUS = 2149122841;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_LINEITEM_TYPE = 2149123669;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_LOCALE = 2149122322;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_MANDATE_STATUS = 2149122391;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_MAX = 2149123409;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_MERCHANT_REFERENCE = 2149123701;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_NEW_PAYMENT_INSTRUMENT_STATUS = 2149122690;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_NUMBER_OF_DAYS = 2149122577;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_NUMBER_OF_MONTHS = 2149122578;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_NUMBER_OF_UNITS = 2149122887;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_OBJECT_ID = 2149123072;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_OFFERING_FOR_COUNTRY = 2149122357;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_OFFERING_FOR_LOCALE = 2149122354;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_OFFERING_GUID = 2149122408;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_OFFERING_ID = 2149122177;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_OFFERING_TYPE = 2149123462;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_OFFSET_AMOUNT = 2149122852;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_OLD_PAYMENT_INSTRUMENT_STATUS = 2149122422;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_OPERATION_FOR_DIRECT_DEBIT = 2149123155;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_OPERATION_FOR_WHOLESALE_PI = 2149123154;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_OPERATION_FOR_WHOLESALE_SUBSCRIPTION = 2149122452;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_ORIGINAL_CHARGE_DETAILS = 2149123634;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_PARAMETER = 2149123673;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_PART_NUMBER_FOR_TOKEN_CLASS = 2149123397;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_PAYMENT_INSTRUMENT_DETAILS = 2149122128;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_PAYMENT_INSTRUMENT_STATUS = 2149122407;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_PAYMENT_INSTRUMENT_TYPE = 2149122054;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_PAYMENT_METHOD_ID = 2149122182;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_PAYMENT_METHOD_TYPE = 2149122835;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_PAYUSERINFOXML = 2149123728;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_PERIOD_TO_PROCESS = 2149122196;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_PHONE_TYPE = 2149122176;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_PHONE_VALUE = 2149123111;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_PHONE_XML = 2149123624;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_PKPN_ALLOCATION = 2149122647;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_PM_FOR_STOP_PAYMENTS = 2149123097;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_POLICY_ID = 2149122672;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_PPORT_ID = 2149122947;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_PRODUCT_TYPE = 2149123413;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_PURCHASE_INPUT_DATA = 2149122178;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_QUANTITY = 2149123412;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_REASON_CODE = 2149123152;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_REDIRECT_INPUTINFO_XML = 2149123190;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_REFERRAL_OFFER = 2149123161;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_REFERRALDATA_XML = 2149123093;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_REJECTION_REASON_CODE = 2149122917;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_RENEWAL = 2149122691;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_REPLACEMENT_REASON_CODE = 2149122617;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_REQUESTOR_INFO = 2149123625;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_RESOURCE_ID = 2149122345;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_RESOURCE_TYPE = 2149123843;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_REVENUE_SKU = 2149123426;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_REVERSE_REASON = 2149123460;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_REWARD_REFFERAL_SCHEMA = 2149123174;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_ROLE = 2149122946;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_ROUND_DAY_BOUNDARY = 2149123682;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_SEQUENCE_NUMBER = 2149122915;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_SERVICE_COMPONENT_ID = 2149122376;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_SERVICE_INSTANCE = 2149122306;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_SESSION_KEY = 2149123447;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_SETTLEMENT_AMOUNT_ID = 2149122881;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_SOFT_DESCRIPTOR = 2149123328;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_SOURCE_USER_INFORMATION = 2149123857;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_START_PERIOD = 2149122423;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_STATE_FOR_COUNTRY = 2149122165;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_STATUS_NAME = 2149122628;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_STATUS_VALUE = 2149122950;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_SUBS_STATUS_FOR_ABANDON_CONVERT = 2149123688;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_SUBS_STATUS_FOR_ABANDON_CREATESUBS = 2149123689;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_SUBS_STATUS_FOR_COMMIT_CONVERT = 2149123684;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_SUBS_STATUS_FOR_COMMIT_CREATESUBS = 2149123685;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_SUBSCRIPTION_ACTION = 2149122595;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_SUBSCRIPTION_BILLING_PERIOD = 2149122662;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_SUBSCRIPTION_ID = 2149122195;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_SUBSCRIPTION_STATUS = 2149122197;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_SUBSCRIPTION_STATUS_FOR_OPERATION = 2149122368;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_SURVEYRESULTCODE = 2149123619;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_TARGET_USER_INFORMATION = 2149123849;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_TAX_AMOUNT = 2149123427;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_TAX_CALCULATION_INFO = 2149123424;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_TAX_CODE = 2149123686;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_TAX_EXEMPT_BILLABLE_ACCOUNT_ID = 2149122304;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_TAX_EXEMPT_STATUS = 2149122419;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_TAX_EXEMPT_STATUS_CHANGE = 2149122421;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_TAX_EXEMPT_TYPE = 2149122201;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_TAX_INCLUDED = 2149123696;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_TAX_RATE = 2149123428;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_TECERTIFICATENUMBER = 2149122688;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_TELENUMERIC_STRING = 2149123124;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_TIME_CONVERSION_RATIO = 2149123681;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_TOKEN_DISTRIBUTION_STATUS = 2149122629;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_TOKEN_SPECIFIED = 2149123365;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_TOKEN_TYPE = 2149122456;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_TRANSACTION_INFORMATION = 2149123858;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_TRANSACTION_STATUS = 2149122918;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_TRANSACTION_TYPE = 2149123145;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_USAGE_CATEGORY = 2149122888;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_USAGE_EVENT_DATE = 2149123138;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_USERPROFILEXML = 2149123729;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_USERROLE_FOR_ADDPI = 2149122592;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_VATID_FORMAT = 2149123360;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_VATID_INVALID = 2149123361;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_VENDOR_TRANSACTION_ID = 2149122916;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_VIOLATION = 2149122372;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_VIOLATION_ID = 2149122327;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_WHOLESALE_PARTNER = 2149122103;
        public const uint XONLINE_E_CTP_BDK_E_INVALID_WHOLESALEPI = 2149123200;
        public const uint XONLINE_E_CTP_BDK_E_INVALIDCOMMENTSIZE = 2149122937;
        public const uint XONLINE_E_CTP_BDK_E_INVOICEPI_SAP_NUMBER_REQUIRED = 2149122401;
        public const uint XONLINE_E_CTP_BDK_E_ITEM_ALREADY_REVERSED = 2149123475;
        public const uint XONLINE_E_CTP_BDK_E_ITEM_NOT_FULFILLED = 2149123476;
        public const uint XONLINE_E_CTP_BDK_E_ITEM_VIOLATION_EXISTS = 2149122820;
        public const uint XONLINE_E_CTP_BDK_E_LAST_ADMIN_ROLE = 2149122694;
        public const uint XONLINE_E_CTP_BDK_E_LINE_ITEM_ID_NOT_OPEN = 2149122849;
        public const uint XONLINE_E_CTP_BDK_E_LINEITEM_ALREADY_CHARGED_BACK = 2149122851;
        public const uint XONLINE_E_CTP_BDK_E_LINEITEM_ALREADY_CROSS_TRANSFERED = 2149122854;
        public const uint XONLINE_E_CTP_BDK_E_LINEITEM_ALREADY_OFFSET = 2149122850;
        public const uint XONLINE_E_CTP_BDK_E_LINEITEM_SETTLEMENT_AMOUNT_NOT_MATCH = 2149123633;
        public const uint XONLINE_E_CTP_BDK_E_LOCALE_NOT_SUPPORTED_FOR_POLICY = 2149122676;
        public const uint XONLINE_E_CTP_BDK_E_MAPPOINT_CONNECTION_MAPPOINT = 2149123654;
        public const uint XONLINE_E_CTP_BDK_E_MAX_PI_PER_ACCOUNT_REACHED = 2149122403;
        public const uint XONLINE_E_CTP_BDK_E_MAX_REPLACEMENT_REACHED = 2149122624;
        public const uint XONLINE_E_CTP_BDK_E_MAXIMUM_CONSUMPTION_COUNT_PER_USER_REACHED = 2149122561;
        public const uint XONLINE_E_CTP_BDK_E_MEG_CONFLICT = 2149122358;
        public const uint XONLINE_E_CTP_BDK_E_MERCHANT_REFERENCE_NUMBER_MISSING = 2149123714;
        public const uint XONLINE_E_CTP_BDK_E_MISMATCH_ACCTID_IN_CLOSEBALANCE = 2149123113;
        public const uint XONLINE_E_CTP_BDK_E_MISMATCH_PAYMENT_SUBSCRIPTION = 2149123712;
        public const uint XONLINE_E_CTP_BDK_E_MISMATCH_RATED_USAGE_TOTAL = 2149122882;
        public const uint XONLINE_E_CTP_BDK_E_MISMATCH_SUB_ID_OFFER_GUID = 2149122664;
        public const uint XONLINE_E_CTP_BDK_E_MISSED_PROCESSING_PERIOD = 2149122438;
        public const uint XONLINE_E_CTP_BDK_E_MISSING_CATEGORY = 2149122952;
        public const uint XONLINE_E_CTP_BDK_E_MISSING_SEARCH_CRITERIA = 2149122151;
        public const uint XONLINE_E_CTP_BDK_E_MISSING_VIOLATION_ID = 2149122328;
        public const uint XONLINE_E_CTP_BDK_E_MSNIA_LATE_USAGE = 2149123159;
        public const uint XONLINE_E_CTP_BDK_E_MULTIPLE_CITIES_FOUND = 2149123336;
        public const uint XONLINE_E_CTP_BDK_E_MULTIPLE_COUNTIES_FOUND = 2149123333;
        public const uint XONLINE_E_CTP_BDK_E_MULTIPLE_MATCHES = 2149123126;
        public const uint XONLINE_E_CTP_BDK_E_MULTIPLE_RATING_RULE_FOUND = 2149123687;
        public const uint XONLINE_E_CTP_BDK_E_MULTIPLE_USAGE_EVENTS_REPORTED = 2149123177;
        public const uint XONLINE_E_CTP_BDK_E_NEEDTODEPROVISION = 2149122329;
        public const uint XONLINE_E_CTP_BDK_E_NETWORK_ERROR_CONNECTING_TO_MAPPOINT = 2149123641;
        public const uint XONLINE_E_CTP_BDK_E_NEW_DUE_DATE_IS_PAST = 2149123142;
        public const uint XONLINE_E_CTP_BDK_E_NEW_DUE_DATE_THRESHOLD_PASSED = 2149123143;
        public const uint XONLINE_E_CTP_BDK_E_NO_ACTIVE_SUBSCRIPTION = 2149122305;
        public const uint XONLINE_E_CTP_BDK_E_NO_ASSOCIATED_TAX_INFO = 2149123417;
        public const uint XONLINE_E_CTP_BDK_E_NO_AVS_RESULT = 2149122069;
        public const uint XONLINE_E_CTP_BDK_E_NO_CDS_FOUND = 2149123192;
        public const uint XONLINE_E_CTP_BDK_E_NO_MATCH = 2149123125;
        public const uint XONLINE_E_CTP_BDK_E_NO_MATCHING_BILLING_CONFIGURATION = 2149123440;
        public const uint XONLINE_E_CTP_BDK_E_NO_MATCHING_PENDING_TRANSACTION = 2149123861;
        public const uint XONLINE_E_CTP_BDK_E_NO_MATCHING_PENDINGPAYOUT_TRANSACTION = 2149123860;
        public const uint XONLINE_E_CTP_BDK_E_NO_MATCHING_TRANSACTION = 2149123859;
        public const uint XONLINE_E_CTP_BDK_E_NO_NEW_DUE_DATE_SPECIFIED = 2149123144;
        public const uint XONLINE_E_CTP_BDK_E_NO_NON_NULL_PARAMS = 2149122661;
        public const uint XONLINE_E_CTP_BDK_E_NO_PAYOUT_PREFERENCE = 2149123720;
        public const uint XONLINE_E_CTP_BDK_E_NO_PRODUCT_KEY_FOR_OBJECT_ID = 2149123448;
        public const uint XONLINE_E_CTP_BDK_E_NO_RECORDS_FOR_STOP_PAYMENTS = 2149123122;
        public const uint XONLINE_E_CTP_BDK_E_NO_REFERRAL_UPDATES_ALLOWED = 2149122448;
        public const uint XONLINE_E_CTP_BDK_E_NO_RENEWAL_FROM_PERPETUAL_OFFERING = 2149122681;
        public const uint XONLINE_E_CTP_BDK_E_NO_TAX_INCLUSIVE_CALCULATION = 2149123425;
        public const uint XONLINE_E_CTP_BDK_E_NO_TAX_RULE_CONFIGURED = 2149123415;
        public const uint XONLINE_E_CTP_BDK_E_NO_USAGE_EVENT_REPORTED = 2149123187;
        public const uint XONLINE_E_CTP_BDK_E_NO_VALID_TAX_EXEMPTION = 2149122420;
        public const uint XONLINE_E_CTP_BDK_E_NO_VIOLATION = 2149122374;
        public const uint XONLINE_E_CTP_BDK_E_NO_VIOLATION_SET = 2149122386;
        public const uint XONLINE_E_CTP_BDK_E_NO_WHOLESALE_TO_WHOLESALE = 2149122689;
        public const uint XONLINE_E_CTP_BDK_E_NON_ACTIVE_ACCOUNT = 2149122198;
        public const uint XONLINE_E_CTP_BDK_E_NOPERMISSION = 2149122934;
        public const uint XONLINE_E_CTP_BDK_E_NOT_A_BASE_OFFERING = 2149122355;
        public const uint XONLINE_E_CTP_BDK_E_NOT_ACCOUNT_ADMIN = 2149122965;
        public const uint XONLINE_E_CTP_BDK_E_NOT_AUTHORIZED_TAX_RULE_CONFIG_GROUP = 2149122593;
        public const uint XONLINE_E_CTP_BDK_E_NOT_AUTHORIZED_TO_ACCESS_OBJECT = 2149123206;
        public const uint XONLINE_E_CTP_BDK_E_NOT_BANNED = 2149122051;
        public const uint XONLINE_E_CTP_BDK_E_NOT_BOBOPARTNER = 2149123201;
        public const uint XONLINE_E_CTP_BDK_E_NOT_EXISTS_PARTNER = 2149122632;
        public const uint XONLINE_E_CTP_BDK_E_NOT_EXISTS_PKPN = 2149122640;
        public const uint XONLINE_E_CTP_BDK_E_NOTIFICATION_CLIENT_INIT_FAIL = 2149123590;
        public const uint XONLINE_E_CTP_BDK_E_NOTIFICATION_CLIENT_INVALID_QUEUE_OPTION = 2149123591;
        public const uint XONLINE_E_CTP_BDK_E_NOTIFICATION_CLIENT_TOO_SLOW = 2149123592;
        public const uint XONLINE_E_CTP_BDK_E_NOTIFICATION_CLIENT_UNKNOWN_ERROR = 2149123589;
        public const uint XONLINE_E_CTP_BDK_E_NOTIFICATION_NO_RELATED_PARTNER_SUBS = 2149123600;
        public const uint XONLINE_E_CTP_BDK_E_NOTIFICATION_QUEUE_EVENT_FAIL_FREQUENTLY = 2149123588;
        public const uint XONLINE_E_CTP_BDK_E_NOTIFICATION_QUEUE_EVENT_FAIL_NOT_FREQUENTLY = 2149123593;
        public const uint XONLINE_E_CTP_BDK_E_NULL_ACCOUNTID = 2149123617;
        public const uint XONLINE_E_CTP_BDK_E_NULL_CATEGORY = 2149123616;
        public const uint XONLINE_E_CTP_BDK_E_NULL_DEFAULT_BILLING_PERIOD = 2149123139;
        public const uint XONLINE_E_CTP_BDK_E_NULL_SUBSCRIPTIONREFID = 2149123618;
        public const uint XONLINE_E_CTP_BDK_E_OBJECT_ROLE_LIMIT_EXCEEDED = 2149122697;
        public const uint XONLINE_E_CTP_BDK_E_OFFER_NOT_CONFIGURED_FOR_REFERRAL = 2149123173;
        public const uint XONLINE_E_CTP_BDK_E_OFFERING_ACCOUNT_CURRENCY_MISMATCH = 2149122341;
        public const uint XONLINE_E_CTP_BDK_E_OFFERING_COUNTRY_ACCOUNT_MISMATCH = 2149122167;
        public const uint XONLINE_E_CTP_BDK_E_OFFERING_NOT_PUBLISHED = 2149122389;
        public const uint XONLINE_E_CTP_BDK_E_OFFERING_NOT_PURCHASEABLE = 2149122340;
        public const uint XONLINE_E_CTP_BDK_E_OFFERING_PAYMENT_INSTRUMENT_MISMATCH = 2149122342;
        public const uint XONLINE_E_CTP_BDK_E_OFFERING_PI_COUNTRY_MISMATCH = 2149122673;
        public const uint XONLINE_E_CTP_BDK_E_OFFERING_REQUIRES_PI = 2149122409;
        public const uint XONLINE_E_CTP_BDK_E_OFFSET_AMOUNT_GREATER_THAN_ORIGINAL = 2149122871;
        public const uint XONLINE_E_CTP_BDK_E_OFFSET_IMM_SETTLE_IN_PROG = 2149122868;
        public const uint XONLINE_E_CTP_BDK_E_OFFSET_OF_OFFSET_NOT_PERMITTED = 2149122897;
        public const uint XONLINE_E_CTP_BDK_E_ONLYONENODE = 2149122962;
        public const uint XONLINE_E_CTP_BDK_E_ORDER_LAYER_FIRST = 2149123862;
        public const uint XONLINE_E_CTP_BDK_E_ORDER_LAYER_LAST = 2149123863;
        public const uint XONLINE_E_CTP_BDK_E_ORIGINAL_ORDER_ID_NOT_SPECIFIED = 2149123433;
        public const uint XONLINE_E_CTP_BDK_E_OUTSTANDING_BALANCE = 2149123092;
        public const uint XONLINE_E_CTP_BDK_E_PARTIAL_CHAREGBACK = 2149123635;
        public const uint XONLINE_E_CTP_BDK_E_PARTIALCONV_EXPECTED = 2149122338;
        public const uint XONLINE_E_CTP_BDK_E_PARTIALCONV_INITIATED = 2149122336;
        public const uint XONLINE_E_CTP_BDK_E_PARTNERNOTINBILLING = 2149123076;
        public const uint XONLINE_E_CTP_BDK_E_PAYMENT_METHOD_NO_LONGER_VALID = 2149123108;
        public const uint XONLINE_E_CTP_BDK_E_PAYMENT_PROVIDER_CONNECTION_FAILED = 2149122071;
        public const uint XONLINE_E_CTP_BDK_E_PAYMENT_PROVIDER_CONNECTION_TIMEOUT = 2149122100;
        public const uint XONLINE_E_CTP_BDK_E_PAYMENT_PROVIDER_SUBMISSION_DECLINED = 2149123845;
        public const uint XONLINE_E_CTP_BDK_E_PAYMENT_PROVIDER_SUBMISSION_FAILED = 2149123844;
        public const uint XONLINE_E_CTP_BDK_E_PENDING_ITEM_PURCHASE = 2149123473;
        public const uint XONLINE_E_CTP_BDK_E_PENDING_TRANSACTION = 2149122822;
        public const uint XONLINE_E_CTP_BDK_E_PENDING_TRANSACTIONS = 2149123632;
        public const uint XONLINE_E_CTP_BDK_E_PI_ACCOUNT_COUNTRY_MISMATCH = 2149122404;
        public const uint XONLINE_E_CTP_BDK_E_PI_ALREADY_DECLINED = 2149122393;
        public const uint XONLINE_E_CTP_BDK_E_PI_ALREADY_GOOD = 2149122392;
        public const uint XONLINE_E_CTP_BDK_E_PI_ALREADY_ON_ACCOUNT = 2149122930;
        public const uint XONLINE_E_CTP_BDK_E_PI_CANNOT_BE_SPECIFIED = 2149122568;
        public const uint XONLINE_E_CTP_BDK_E_PI_EXECEED_MAX_OWNER_SHIP = 2149122183;
        public const uint XONLINE_E_CTP_BDK_E_PI_IN_DECLINE = 2149122873;
        public const uint XONLINE_E_CTP_BDK_E_PI_IS_DISABLED = 2149122400;
        public const uint XONLINE_E_CTP_BDK_E_PI_NOT_SUPPORTED = 2149122104;
        public const uint XONLINE_E_CTP_BDK_E_PIN_OR_SEQ_REQUIRED = 2149123456;
        public const uint XONLINE_E_CTP_BDK_E_PMN_INSERT_FAILURE = 2149122928;
        public const uint XONLINE_E_CTP_BDK_E_POLICY_DEAL_COUNTRY_MISMATCH = 2149122678;
        public const uint XONLINE_E_CTP_BDK_E_POLICY_DEAL_VERSION_MISMATCH = 2149122677;
        public const uint XONLINE_E_CTP_BDK_E_POST_BOX_ERROR_MAPPOINT = 2149123653;
        public const uint XONLINE_E_CTP_BDK_E_PP_INVALID_FIELD_VALUE = 2149123332;
        public const uint XONLINE_E_CTP_BDK_E_PREPAID_TOKEN_IS_REQUIRED = 2149122580;
        public const uint XONLINE_E_CTP_BDK_E_PRICE_IS_NEGATIVE = 2149123463;
        public const uint XONLINE_E_CTP_BDK_E_PRIMARY_PHONE_REQUIRED = 2149122369;
        public const uint XONLINE_E_CTP_BDK_E_PROCESS_USAGE_EVENTS = 2149123109;
        public const uint XONLINE_E_CTP_BDK_E_PROCESSIMPORT_OFFSET_LINE_MISSING_FIELD = 2149123443;
        public const uint XONLINE_E_CTP_BDK_E_PROCESSIMPORT_OFFSET_LINE_MISSING_MATCH_EVENT = 2149123444;
        public const uint XONLINE_E_CTP_BDK_E_PRODUCT_KEY_NOT_AVAILABLE = 2149123449;
        public const uint XONLINE_E_CTP_BDK_E_PROFILE_ALREADY_EXISTS = 2149123717;
        public const uint XONLINE_E_CTP_BDK_E_PROFILE_DOES_NOT_EXIST = 2149123718;
        public const uint XONLINE_E_CTP_BDK_E_PROVISIONING_INACTIVE_SUBSCRIPTION = 2149122969;
        public const uint XONLINE_E_CTP_BDK_E_PROVISIONING_INVALID_ADJUSTMENT_OFFSET = 2149123873;
        public const uint XONLINE_E_CTP_BDK_E_PROVISIONING_INVALID_ARG = 2149123874;
        public const uint XONLINE_E_CTP_BDK_E_PROVISIONING_MPF_CALL_FAILED = 2149123872;
        public const uint XONLINE_E_CTP_BDK_E_PUID_MISSING_ATTRIBUTE = 2149122179;
        public const uint XONLINE_E_CTP_BDK_E_PUID_ROLE_LIMIT_EXCEEDED = 2149122931;
        public const uint XONLINE_E_CTP_BDK_E_PUID_USED_AS_BILLABLEACCOUNTADMIN = 2149122695;
        public const uint XONLINE_E_CTP_BDK_E_RATING_FAILURE = 2149123077;
        public const uint XONLINE_E_CTP_BDK_E_RECORD_CHARGEBACK_FAILED = 2149123703;
        public const uint XONLINE_E_CTP_BDK_E_REDIRECTURL_MISSING = 2149123225;
        public const uint XONLINE_E_CTP_BDK_E_REFERRAL_CODE_NOT_FOUND = 2149123734;
        public const uint XONLINE_E_CTP_BDK_E_REFERRER_EXCEEDED_MAX_REFERRALS_ON_OFFER = 2149123170;
        public const uint XONLINE_E_CTP_BDK_E_REFERRER_NOT_ACTIVE = 2149123171;
        public const uint XONLINE_E_CTP_BDK_E_REFERRER_NOT_ELIGIBLE_FOR_REWARD_OFFER = 2149123175;
        public const uint XONLINE_E_CTP_BDK_E_REFERRER_NOT_IN_SYSTEM = 2149123169;
        public const uint XONLINE_E_CTP_BDK_E_REFUND_LINEITEM_NOT_SETTLED = 2149122885;
        public const uint XONLINE_E_CTP_BDK_E_RENEW_SUBSCRIPTION_NOT_SUPPORTED = 2149123698;
        public const uint XONLINE_E_CTP_BDK_E_RENEWAL_DOES_NOT_EXISTS = 2149123586;
        public const uint XONLINE_E_CTP_BDK_E_REPLACEMENT_TOKEN_PUID_MISMATCH = 2149123400;
        public const uint XONLINE_E_CTP_BDK_E_REPORT_USAGE_WITH_IMMEDIATE_SETTLE = 2149123185;
        public const uint XONLINE_E_CTP_BDK_E_REPORT_USAGE_WITH_PREPAID = 2149123186;
        public const uint XONLINE_E_CTP_BDK_E_REQUESTER_ID_UNSPECIFIED = 2149122967;
        public const uint XONLINE_E_CTP_BDK_E_REQUIRED_FIELD_MISSING = 2149122152;
        public const uint XONLINE_E_CTP_BDK_E_REQUIRED_FIELD_MISSING_DUE_TO_SUBSCRIPTIONS = 2149122713;
        public const uint XONLINE_E_CTP_BDK_E_RES_BALANCE_CHANGE_ON_NONACTIVE_SUBS = 2149122872;
        public const uint XONLINE_E_CTP_BDK_E_RES_NOT_BELONG_TO_OBJECT = 2149122824;
        public const uint XONLINE_E_CTP_BDK_E_RESELLER_TOKEN_BLACKLISTED = 2149122641;
        public const uint XONLINE_E_CTP_BDK_E_RESELLER_TOKEN_CONSUMED = 2149122642;
        public const uint XONLINE_E_CTP_BDK_E_RESOURCE_BALANCE_CHANGE_ON_NONACTIVE_SUBS = 2149122455;
        public const uint XONLINE_E_CTP_BDK_E_RESOURCE_BALANCE_INACTIVE = 2149122886;
        public const uint XONLINE_E_CTP_BDK_E_RESOURCE_OFFSET_ONLY_ALLOWED_FOR_USAGE = 2149122902;
        public const uint XONLINE_E_CTP_BDK_E_RESOURCE_UNIT_OF_MEASURE_DO_NOT_MATCH = 2149123189;
        public const uint XONLINE_E_CTP_BDK_E_REVERSAL_OF_PROCESSED_CHARGEBACK = 2149123705;
        public const uint XONLINE_E_CTP_BDK_E_REWARD_OFFER_NOT_PURCHASABLE = 2149122818;
        public const uint XONLINE_E_CTP_BDK_E_REWARD_REFERRAL_XML_REQUIRED = 2149123168;
        public const uint XONLINE_E_CTP_BDK_E_RIME_INVALID_VALUE = 2149123733;
        public const uint XONLINE_E_CTP_BDK_E_RIME_REJECTED = 2149123732;
        public const uint XONLINE_E_CTP_BDK_E_RISK_ARGUMENT_VALIDATION_FAILED = 2149123905;
        public const uint XONLINE_E_CTP_BDK_E_RISK_CONFIGURATION_ERROR = 2149123896;
        public const uint XONLINE_E_CTP_BDK_E_RISK_ENGINE_EXCEPTION = 2149123904;
        public const uint XONLINE_E_CTP_BDK_E_RISK_EVALUATION_EXCEPTION = 2149123894;
        public const uint XONLINE_E_CTP_BDK_E_RISK_EVALUATION_FAILED = 2149123893;
        public const uint XONLINE_E_CTP_BDK_E_RISK_EVALUATION_UNDEFINED = 2149123895;
        public const uint XONLINE_E_CTP_BDK_E_RISK_LAST = 2149123927;
        public const uint XONLINE_E_CTP_BDK_E_RISK_NEXT = 2149123897;
        public const uint XONLINE_E_CTP_BDK_E_SA_IN_INTERMEDIATE_STATUS = 2149122880;
        public const uint XONLINE_E_CTP_BDK_E_SA_IN_STATE_UNESCHEATABLE = 2149122870;
        public const uint XONLINE_E_CTP_BDK_E_SA_IN_STATE_UNOFFSETABLE = 2149122869;
        public const uint XONLINE_E_CTP_BDK_E_SERVER_INTERNAL_ERROR = 2149122643;
        public const uint XONLINE_E_CTP_BDK_E_SERVICE_INSTANCES_NONE = 2149122309;
        public const uint XONLINE_E_CTP_BDK_E_SETTLE_BALANCE_INVALID_MANDATE_STATUS = 2149123176;
        public const uint XONLINE_E_CTP_BDK_E_SETTLE_SHOULD_BE_THE_LAST_EVENT = 2149123107;
        public const uint XONLINE_E_CTP_BDK_E_SIGNATURE_TOKEN_MISMATCH = 2149122627;
        public const uint XONLINE_E_CTP_BDK_E_STATE_CITY_INVALID = 2149123220;
        public const uint XONLINE_E_CTP_BDK_E_STATE_INVALID = 2149123217;
        public const uint XONLINE_E_CTP_BDK_E_STATE_ZIP_CITY_INVALID = 2149123221;
        public const uint XONLINE_E_CTP_BDK_E_STATE_ZIP_CITY_INVALID2 = 2149123222;
        public const uint XONLINE_E_CTP_BDK_E_STATE_ZIP_CITY_INVALID3 = 2149123223;
        public const uint XONLINE_E_CTP_BDK_E_STATE_ZIP_CITY_INVALID4 = 2149123224;
        public const uint XONLINE_E_CTP_BDK_E_STATE_ZIP_COVERS_MULTIPLE_CITIES = 2149123335;
        public const uint XONLINE_E_CTP_BDK_E_STATE_ZIP_INVALID = 2149123219;
        public const uint XONLINE_E_CTP_BDK_E_SUBS_NOT_INTERMEDIATE = 2149122388;
        public const uint XONLINE_E_CTP_BDK_E_SUBSCRIPTION_ALREADY_CANCELED = 2149122184;
        public const uint XONLINE_E_CTP_BDK_E_SUBSCRIPTION_ALREADY_CONVERTED_OR_RENEWED = 2149123713;
        public const uint XONLINE_E_CTP_BDK_E_SUBSCRIPTION_INACTIVE = 2149123096;
        public const uint XONLINE_E_CTP_BDK_E_SUBSCRIPTION_IS_CANCELLED = 2149122373;
        public const uint XONLINE_E_CTP_BDK_E_SUBSCRIPTION_NOT_EXPIRED = 2149122439;
        public const uint XONLINE_E_CTP_BDK_E_SUBSCRIPTION_NOT_PREPAID = 2149122569;
        public const uint XONLINE_E_CTP_BDK_E_SUBSCRIPTION_SCHEDULED_RENEWAL = 2149123716;
        public const uint XONLINE_E_CTP_BDK_E_TAX_CALCULATION_FAILURE = 2149123416;
        public const uint XONLINE_E_CTP_BDK_E_TAX_ID_ASSOCIATION_LIMIT_EXCEEDED = 2149122933;
        public const uint XONLINE_E_CTP_BDK_E_TAX_ID_UPDATE_ATTEMPTS_EXCEEDED = 2149122148;
        public const uint XONLINE_E_CTP_BDK_E_TAXID_EXPDATE = 2149122200;
        public const uint XONLINE_E_CTP_BDK_E_TAXWARE_FAILURE = 2149123208;
        public const uint XONLINE_E_CTP_BDK_E_TERM_COMMIT_EXISTS = 2149122581;
        public const uint XONLINE_E_CTP_BDK_E_TIME_EXTENSION_NOT_SUPPORTED = 2149123683;
        public const uint XONLINE_E_CTP_BDK_E_TOKEN_ACTION_ACCESS_DENIED = 2149122631;
        public const uint XONLINE_E_CTP_BDK_E_TOKEN_ALREADY_BLACKLISTED = 2149123366;
        public const uint XONLINE_E_CTP_BDK_E_TOKEN_ALREADY_DEACTIVATED = 2149123399;
        public const uint XONLINE_E_CTP_BDK_E_TOKEN_ALREADY_DELIVERED = 2149122608;
        public const uint XONLINE_E_CTP_BDK_E_TOKEN_ALREADY_ISSUED = 2149122613;
        public const uint XONLINE_E_CTP_BDK_E_TOKEN_ALREADY_UNBLACKLISTED = 2149123367;
        public const uint XONLINE_E_CTP_BDK_E_TOKEN_ALREADY_UNISSUED = 2149122614;
        public const uint XONLINE_E_CTP_BDK_E_TOKEN_AND_PI_BOTH_SPECIFIED = 2149122563;
        public const uint XONLINE_E_CTP_BDK_E_TOKEN_BLACKLISTED = 2149123368;
        public const uint XONLINE_E_CTP_BDK_E_TOKEN_CLASS_INVALID = 2149122564;
        public const uint XONLINE_E_CTP_BDK_E_TOKEN_CLASS_NOT_FOUND = 2149122566;
        public const uint XONLINE_E_CTP_BDK_E_TOKEN_CONSUMED = 2149123396;
        public const uint XONLINE_E_CTP_BDK_E_TOKEN_DISTRIBUTION_BATCH_INACTIVE = 2149122610;
        public const uint XONLINE_E_CTP_BDK_E_TOKEN_DISTRIBUTION_BATCH_INVALID = 2149122609;
        public const uint XONLINE_E_CTP_BDK_E_TOKEN_DISTRIBUTION_CHANNEL_NOT_FOUND = 2149122596;
        public const uint XONLINE_E_CTP_BDK_E_TOKEN_DISTRIBUTION_STATUS_UPDATE = 2149122626;
        public const uint XONLINE_E_CTP_BDK_E_TOKEN_EXPIRED = 2149123380;
        public const uint XONLINE_E_CTP_BDK_E_TOKEN_EXPIRY_DATE_SET_AS_NULL = 2149123377;
        public const uint XONLINE_E_CTP_BDK_E_TOKEN_ISSUE_UPDATE = 2149122615;
        public const uint XONLINE_E_CTP_BDK_E_TOKEN_NOT_APPLICABLE = 2149122582;
        public const uint XONLINE_E_CTP_BDK_E_TOKEN_NOT_STARTED = 2149123381;
        public const uint XONLINE_E_CTP_BDK_E_TOKEN_NOT_VALID_FOR_OFFERING = 2149122457;
        public const uint XONLINE_E_CTP_BDK_E_TOKEN_PART_NUMBER_ASSOC_WITH_OTHER_TOKEN_CLASS = 2149122601;
        public const uint XONLINE_E_CTP_BDK_E_TOKEN_RANGE_BLACKLISTED = 2149123369;
        public const uint XONLINE_E_CTP_BDK_E_TOKEN_RANGE_NOT_ACTIVE = 2149123382;
        public const uint XONLINE_E_CTP_BDK_E_TOKEN_RENEWAL_PRESENT = 2149122583;
        public const uint XONLINE_E_CTP_BDK_E_TOKEN_REPLACEMENT_FAILED = 2149122625;
        public const uint XONLINE_E_CTP_BDK_E_TOKEN_SCHEDULED_RENEWAL_EXISTS = 2149123587;
        public const uint XONLINE_E_CTP_BDK_E_TOO_MANY_ITEMS_IN_PURCHASE = 2149123461;
        public const uint XONLINE_E_CTP_BDK_E_TOOLATE_REINSTATE = 2149122440;
        public const uint XONLINE_E_CTP_BDK_E_TOOMANY_FDE_PURCHASES = 2149122932;
        public const uint XONLINE_E_CTP_BDK_E_TOTAL_EXTENSION_GREATER_THAN_MAX = 2149122579;
        public const uint XONLINE_E_CTP_BDK_E_TOTAL_EXTENSION_LESS_THAN_ZERO = 2149122576;
        public const uint XONLINE_E_CTP_BDK_E_TRACKING_GUID_NODATA = 2149123384;
        public const uint XONLINE_E_CTP_BDK_E_TRANS_BALANCE_MISMATCHING_ACCTS = 2149123081;
        public const uint XONLINE_E_CTP_BDK_E_TRANS_BALANCE_NOT_ALLOW = 2149123090;
        public const uint XONLINE_E_CTP_BDK_E_TRANS_BALANCE_TO_PI_INVALID = 2149123088;
        public const uint XONLINE_E_CTP_BDK_E_TRANS_BALANCE_TO_SAME_PI = 2149123089;
        public const uint XONLINE_E_CTP_BDK_E_TRANSACTION_ALREADY_CANCELLED = 2149122921;
        public const uint XONLINE_E_CTP_BDK_E_TRANSACTION_DECLINED_BY_PAYMENT_PROVIDER = 2149122101;
        public const uint XONLINE_E_CTP_BDK_E_TRANSACTION_EVENT_INCONSISTENT = 2149122914;
        public const uint XONLINE_E_CTP_BDK_E_TRANSACTION_EVENT_UNKNOWN = 2149122913;
        public const uint XONLINE_E_CTP_BDK_E_TRANSACTION_LAYER_FIRST = 2149123864;
        public const uint XONLINE_E_CTP_BDK_E_TRANSACTION_LAYER_LAST = 2149123865;
        public const uint XONLINE_E_CTP_BDK_E_TRANSACTION_NOT_CANCELLABLE = 2149123191;
        public const uint XONLINE_E_CTP_BDK_E_TRANSACTION_NOT_EXIST = 2149122905;
        public const uint XONLINE_E_CTP_BDK_E_UNABLE_TO_CALL_ON_BEHALF_OF = 2149123207;
        public const uint XONLINE_E_CTP_BDK_E_UNABLE_TO_VALIDATE_TAX_ID = 2149122147;
        public const uint XONLINE_E_CTP_BDK_E_UNEXPECTED_CVM_RESPONSE_CODE = 2149122131;
        public const uint XONLINE_E_CTP_BDK_E_UNEXPECTED_FIELD = 2149122160;
        public const uint XONLINE_E_CTP_BDK_E_UNIT_OF_MEASURE_MISMATCH = 2149122352;
        public const uint XONLINE_E_CTP_BDK_E_UNKNOWN_ERROR = 2149123650;
        public const uint XONLINE_E_CTP_BDK_E_UNKNOWN_MANDATE_STATUS = 2149122834;
        public const uint XONLINE_E_CTP_BDK_E_UNKNOWN_MERCHANT_ID = 2149122920;
        public const uint XONLINE_E_CTP_BDK_E_UNKNOWN_SERVER_FAILURE = 2149122949;
        public const uint XONLINE_E_CTP_BDK_E_UNSUPPORTED_CHAR_EXIST = 2149123362;
        public const uint XONLINE_E_CTP_BDK_E_UNSUPPORTED_OBJECT_TYPE = 2149123623;
        public const uint XONLINE_E_CTP_BDK_E_UNSUPPORTED_VERSION = 2149123411;
        public const uint XONLINE_E_CTP_BDK_E_UPDATE_ADDRESS_UNKNOWN_ERROR = 2149123651;
        public const uint XONLINE_E_CTP_BDK_E_UPDATING_MEMBERNAME = 2149122696;
        public const uint XONLINE_E_CTP_BDK_E_UPS_NOT_UPDATED = 2149122105;
        public const uint XONLINE_E_CTP_BDK_E_USAGE_COUNT_FOR_TOKEN_EXCEEDED = 2149123376;
        public const uint XONLINE_E_CTP_BDK_E_VATID_DOESNOTHAVEEXPDATE = 2149122199;
        public const uint XONLINE_E_CTP_BDK_E_VIOLATION_ALREADY_SET = 2149122385;
        public const uint XONLINE_E_CTP_BDK_E_WRONG_DATERANGE = 2149122433;
        public const uint XONLINE_E_CTP_BDK_E_WRONG_OBJECT_ID_TYPE = 2149123110;
        public const uint XONLINE_E_CTP_BDK_E_ZERO_ADDRESSES_BY_MAPPOINT = 2149123649;
        public const uint XONLINE_E_CTP_BDK_E_ZIP_CITY_MISSING = 2149123218;
        public const uint XONLINE_E_CTP_BDK_E_ZIP_INVALID = 2149123216;
        public const uint XONLINE_E_CTP_BDK_E_ZIP_INVALID_FOR_ENTERED_STATE = 2149123334;
        public const uint XONLINE_E_CTP_BDK_ERROR_DD_BANK_ACCOUNT_TYPE_MAY_NOT_BE_NULL = 2149122145;
        public const uint XONLINE_E_CTP_BDK_ERROR_DD_BANK_ACCOUNT_TYPE_MUST_BE_NULL = 2149122144;
        public const uint XONLINE_E_CTP_BDK_SVR2_STARTED = 2149123078;
        public const uint XONLINE_E_CTP_BILLING_E_INTERNAL_SERVER_ERROR = 2149124135;
        public const uint XONLINE_E_CTP_BILLING_E_INVALID_ARGUMENT = 2149124165;
        public const uint XONLINE_E_CTP_BILLING_E_INVALID_BALANCE_ID = 2149124153;
        public const uint XONLINE_E_CTP_BILLING_E_INVALID_BALANCE_STATUS = 2149124149;
        public const uint XONLINE_E_CTP_BILLING_E_INVALID_CALLING_PARTER = 2149124133;
        public const uint XONLINE_E_CTP_BILLING_E_INVALID_DECLINE_CODE = 2149124151;
        public const uint XONLINE_E_CTP_BILLING_E_INVALID_LINE_ITEM = 2149124148;
        public const uint XONLINE_E_CTP_BILLING_E_INVALID_LINE_ITEM_EVENT = 2149124137;
        public const uint XONLINE_E_CTP_BILLING_E_INVALID_LINE_ITEM_STATUS = 2149124177;
        public const uint XONLINE_E_CTP_BILLING_E_INVALID_OFFSET_AMOUNT = 2149124169;
        public const uint XONLINE_E_CTP_BILLING_E_INVALID_OPERATION = 2149124161;
        public const uint XONLINE_E_CTP_BILLING_E_INVALID_ORDER_ID = 2149124194;
        public const uint XONLINE_E_CTP_BILLING_E_INVALID_ORDER_STATUS = 2149124160;
        public const uint XONLINE_E_CTP_BILLING_E_INVALID_PARTNER_PAYMENT_REF = 2149124150;
        public const uint XONLINE_E_CTP_BILLING_E_INVALID_PAYMENT_INSTRUMENT_DETAILS = 2149124147;
        public const uint XONLINE_E_CTP_BILLING_E_INVALID_SOFT_DESCRIPTOR = 2149124180;
        public const uint XONLINE_E_CTP_BILLING_E_INVALID_TRACKING_GUID = 2149124146;
        public const uint XONLINE_E_CTP_BILLING_E_INVALID_TRANSACTION_STATUS = 2149124132;
        public const uint XONLINE_E_CTP_BILLING_E_LINEITEM_ALREADY_CHARGED_BACK = 2149124152;
        public const uint XONLINE_E_CTP_BILLING_E_LINEITEM_ALREADY_CROSS_TRANSFERED = 2149124167;
        public const uint XONLINE_E_CTP_BILLING_E_LINEITEM_ALREADY_REFUND = 2149124131;
        public const uint XONLINE_E_CTP_BILLING_E_PARITAL_CHARGE_BACK = 2149124136;
        public const uint XONLINE_E_CTP_BILLING_E_PAYMENT_PROVIDER_DECLINE = 2149124168;
        public const uint XONLINE_E_CTP_BILLING_E_PAYMENT_PROVIDER_ERROR = 2149124184;
        public const uint XONLINE_E_CTP_BILLING_E_PAYMENT_PROVIDER_RETRYABLE_ERROR = 2149124179;
        public const uint XONLINE_E_CTP_BILLING_E_UNEXPECTED_PAYMENT_EVENT = 2149124181;
        public const uint XONLINE_E_CTP_BILLING_E_UNRECOGNIZED_MRN = 2149124182;
        public const uint XONLINE_E_CTP_BKE_E_CHANNELSKU_PKPN_MAPPING_CANNOT_ADD = 2149122646;
        public const uint XONLINE_E_CTP_DMP_DP_INVALID_DISTRIBUTION_PROGRAM = 2149124115;
        public const uint XONLINE_E_CTP_DMP_DP_INVALID_DISTRIBUTION_PROGRAM_CALLING_PARTNER = 2149124116;
        public const uint XONLINE_E_CTP_DMP_DP_INVALID_DISTRIBUTION_PROGRAM_SELLING_PARTNER = 2149124117;
        public const uint XONLINE_E_CTP_DMP_DP_INVALID_DISTRIBUTION_PROGRAM_SKU = 2149124118;
        public const uint XONLINE_E_CTP_DMP_DP_INVALID_DISTRIBUTION_PROGRAM_USER = 2149124119;
        public const uint XONLINE_E_CTP_DMP_DP_USER_NOT_ENROLLED = 2149124120;
        public const uint XONLINE_E_CTP_DMP_E_CANNOT_CREDIT_SUBSCRIPTION = 2149123992;
        public const uint XONLINE_E_CTP_DMP_E_CONFIGURATION_ERROR = 2149123936;
        public const uint XONLINE_E_CTP_DMP_E_CONFIRMATION_HAS_TO_BE_NULL = 2149123990;
        public const uint XONLINE_E_CTP_DMP_E_COUNTRY_CODE_MISMATCH = 2149124099;
        public const uint XONLINE_E_CTP_DMP_E_COUNTRY_NOT_CHANGED = 2149123961;
        public const uint XONLINE_E_CTP_DMP_E_DATA_OVERLIMIT_ERROR = 2149123952;
        public const uint XONLINE_E_CTP_DMP_E_DELEGATE_NOT_SUPPORTED = 2149124113;
        public const uint XONLINE_E_CTP_DMP_E_DESTINATION_ZERO = 2149124112;
        public const uint XONLINE_E_CTP_DMP_E_EXCHANGE_PRICE_MISMATCH = 2149123993;
        public const uint XONLINE_E_CTP_DMP_E_INSUFFICIENT_BALANCE = 2149123945;
        public const uint XONLINE_E_CTP_DMP_E_INVALID_API_SIGNATURE = 2149123939;
        public const uint XONLINE_E_CTP_DMP_E_INVALID_CONFIRMATION_ID = 2149123956;
        public const uint XONLINE_E_CTP_DMP_E_INVALID_DATE_RANGE = 2149123944;
        public const uint XONLINE_E_CTP_DMP_E_INVALID_DESTINATION_ACCOUNT = 2149124097;
        public const uint XONLINE_E_CTP_DMP_E_INVALID_EXCHANGE_TYPE = 2149123991;
        public const uint XONLINE_E_CTP_DMP_E_INVALID_ITEM_VALUE = 2149123954;
        public const uint XONLINE_E_CTP_DMP_E_INVALID_NEXTHANDLE = 2149123943;
        public const uint XONLINE_E_CTP_DMP_E_INVALID_PMN = 2149124114;
        public const uint XONLINE_E_CTP_DMP_E_INVALID_REASON_CODE = 2149123984;
        public const uint XONLINE_E_CTP_DMP_E_INVALID_SKU = 2149123957;
        public const uint XONLINE_E_CTP_DMP_E_INVALID_SKU_TYPE = 2149123958;
        public const uint XONLINE_E_CTP_DMP_E_INVALID_SOURCE_ACCOUNT = 2149124096;
        public const uint XONLINE_E_CTP_DMP_E_INVALID_TENANT = 2149123938;
        public const uint XONLINE_E_CTP_DMP_E_INVALID_TRANSACTION_TO_CREDIT = 2149123977;
        public const uint XONLINE_E_CTP_DMP_E_INVALID_TRANSACTION_TYPE = 2149123968;
        public const uint XONLINE_E_CTP_DMP_E_ITEM_UNIQUENESS_ERROR = 2149123953;
        public const uint XONLINE_E_CTP_DMP_E_MAX_ACQUISITION_EXCEEDED = 2149123971;
        public const uint XONLINE_E_CTP_DMP_E_MAX_ACQUISITIONPERSPAN_EXCEEDED = 2149124128;
        public const uint XONLINE_E_CTP_DMP_E_MAX_BALANCE_EXCEEDED = 2149123970;
        public const uint XONLINE_E_CTP_DMP_E_MAX_BALANCE_TRANSFER_PROMOTIONAL_EXCEEDED = 2149124103;
        public const uint XONLINE_E_CTP_DMP_E_MAX_BALANCE_TRANSFER_PROVISIONAL_EXCEEDED = 2149124102;
        public const uint XONLINE_E_CTP_DMP_E_MAX_CONSUMPTION_EXCEEDED = 2149123972;
        public const uint XONLINE_E_CTP_DMP_E_MUST_SPECIFY_CONFIRMATION = 2149123989;
        public const uint XONLINE_E_CTP_DMP_E_NO_MORE_PROMO_POINTS = 2149123973;
        public const uint XONLINE_E_CTP_DMP_E_NOT_ALL_ITEMS_ELIGIBLE_FOR_CREDIT = 2149123955;
        public const uint XONLINE_E_CTP_DMP_E_NOT_ALL_ITEMS_ELIGIBLE_FOR_OFFSET = 2149123988;
        public const uint XONLINE_E_CTP_DMP_E_ORIGINAL_TRANSACTION_HAS_CREDIT = 2149123969;
        public const uint XONLINE_E_CTP_DMP_E_ORIGINAL_TRANSACTION_HAS_DEBIT = 2149123976;
        public const uint XONLINE_E_CTP_DMP_E_ORIGINAL_TRANSACTION_NOT_FOUND = 2149123975;
        public const uint XONLINE_E_CTP_DMP_E_PARTIAL_TRANSFER = 2149124104;
        public const uint XONLINE_E_CTP_DMP_E_PROMO_EXPIRED = 2149123959;
        public const uint XONLINE_E_CTP_DMP_E_PROMO_POINTS_UNAVAILIABLE = 2149123974;
        public const uint XONLINE_E_CTP_DMP_E_PROMOTION_LIMIT_LIFE_MAX = 2149123985;
        public const uint XONLINE_E_CTP_DMP_E_PROPERTY_VALUE_NOT_CHANGED = 2149123987;
        public const uint XONLINE_E_CTP_DMP_E_REQUEST_CANNOT_BE_COMPLETED = 2149123941;
        public const uint XONLINE_E_CTP_DMP_E_SOURCE_TRANSFER_PUIDS_SAME = 2149124098;
        public const uint XONLINE_E_CTP_DMP_E_SOURCE_ZERO = 2149124105;
        public const uint XONLINE_E_CTP_DMP_E_SOURCETRANSFER_INITIATED_WITHIN_NO_TRANSFER_WINDOW = 2149124100;
        public const uint XONLINE_E_CTP_DMP_E_STATUS_CHANGE_NOT_ALLOWED = 2149123986;
        public const uint XONLINE_E_CTP_DMP_E_STATUS_NOT_CHANGED = 2149123960;
        public const uint XONLINE_E_CTP_DMP_E_STATUS_UNREGISTERED = 2149123942;
        public const uint XONLINE_E_CTP_DMP_E_SYSTEM_INTERNAL_ERROR = 2149123937;
        public const uint XONLINE_E_CTP_DMP_E_TARGETTRANSFER_INITIATED_WITHIN_NO_TRANSFER_WINDOW = 2149124101;
        public const uint XONLINE_E_CTP_DMP_E_UNKNOWNSERVER_ERROR = 2149123929;
        public const uint XONLINE_E_CTP_DMP_E_USER_DISABLED = 2149124121;
        public const uint XONLINE_E_CTP_DMP_E_USER_REGISTERED = 2149123940;
        public const uint XONLINE_E_CTP_DMP_E_VALIDATION_ERROR = 2149123928;
        public const uint XONLINE_E_CTP_E_UNSUPPORTED_PAYMENT_INSTRUMENT = 2149123095;
        public const uint XONLINE_E_CTP_ERROR_MISSING_PROV_INFO = 2149123842;
        public const uint XONLINE_E_CTP_ERROR_NULL_INPUT_PARAMETER_TOKEN_CLASS_GUID = 2149123401;
        public const uint XONLINE_E_CTP_PP_E_REQUEST_PROCESS_TASK_ENDED_UNSUCCESSFULLY = 2149123889;
        public const uint XONLINE_E_CTP_PP_E_RESPONSE_PROCESS_TASK_ENDED_UNSUCCESSFULLY = 2149123890;
        public const uint XONLINE_E_CTP_PROVISION_E_CREATION = 2149122710;
        public const uint XONLINE_E_CTP_PROVISION_E_MALFORMED_REQUEST = 2149122705;
        public const uint XONLINE_E_CTP_PROVISION_E_MPF_CALL_FAILED = 2149122707;
        public const uint XONLINE_E_CTP_PROVISION_E_MPF_CREATE = 2149122709;
        public const uint XONLINE_E_CTP_PROVISION_E_WRONG_INPUT_PARAMETERS = 2149122706;
        public const uint XONLINE_E_CTP_PROVISION_E_XML_OPERATION_ERROR = 2149122708;
        public const uint XONLINE_E_CTP_SCS_E_CERT_INAVLID = 2149123891;
        public const uint XONLINE_E_CTP_SCS_E_INAVLID_CALLING_PARTNER = 2149123892;
        public const uint XONLINE_E_CTP_TRANSACTION_E_AUTHORIZATION_FAILED = 2149124129;
        public const uint XONLINE_E_CTP_TRANSACTION_E_EXTERNAL_TIMEOUT_ERROR = 2149124145;
        public const uint XONLINE_E_CTP_TRANSACTION_E_INTERNAL_SERVER_ERROR = 2149124176;
        public const uint XONLINE_E_CTP_TRANSACTION_E_INVALID_ACCOUNT_RESPONSE = 2149124162;
        public const uint XONLINE_E_CTP_TRANSACTION_E_INVALID_ACCOUNT_STATUS = 2149124134;
        public const uint XONLINE_E_CTP_TRANSACTION_E_INVALID_ARGUMENT = 2149124193;
        public const uint XONLINE_E_CTP_TRANSACTION_E_INVALID_BILLING_RESPONSE = 2149124195;
        public const uint XONLINE_E_CTP_TRANSACTION_E_INVALID_DMP_RESPONSE = 2149124178;
        public const uint XONLINE_E_CTP_TRANSACTION_E_INVALID_OPERATION = 2149124163;
        public const uint XONLINE_E_CTP_TRANSACTION_E_INVALID_PARTNER = 2149124183;
        public const uint XONLINE_E_CTP_TRANSACTION_E_INVALID_PAYMENT_INSTRUMENT_STATUS = 2149124196;
        public const uint XONLINE_E_CTP_TRANSACTION_E_INVALID_PAYMENTMETHOD_RESPONSE = 2149124166;
        public const uint XONLINE_E_CTP_TRANSACTION_E_INVALID_RISK_RESPONSE = 2149124192;
        public const uint XONLINE_E_CTP_TRANSACTION_E_INVALID_SUBS_RESPONSE = 2149124130;
        public const uint XONLINE_E_CTP_TRANSACTION_E_INVALID_TAX_RESPONSE = 2149124185;
        public const uint XONLINE_E_CTP_TRANSACTION_E_INVALID_TRACKING_GUID = 2149124144;
        public const uint XONLINE_E_CTP_TRANSACTION_E_TRANSACTION_RACE_CONDITION = 2149124164;
        public const uint XONLINE_E_CTP_TRANSACTION_E_UNSUPPORTED_DD_OPERATION = 2148872346;
        public const uint XONLINE_E_DATABASE_DEADLOCK = 2148860165;
        public const uint XONLINE_E_DATABASE_DUPLICATE_KEY = 2148860168;
        public const uint XONLINE_E_DATABASE_ERROR = 2148860160;
        public const uint XONLINE_E_DATABASE_EXECUTE_ERROR = 2148860161;
        public const uint XONLINE_E_DATABASE_FOREIGN_KEY_VIOLATION = 2148860167;
        public const uint XONLINE_E_DATABASE_PARAMETER_INVALID = 2148860166;
        public const uint XONLINE_E_DATABASE_PARAMETER_NOT_FOUND = 2148860164;
        public const uint XONLINE_E_DATABASE_RESULT_ERROR = 2148860162;
        public const uint XONLINE_E_DATABASE_TIMEOUT = 2148860169;
        public const uint XONLINE_E_DATABASE_TRANSACTION_ERROR = 2148860163;
        public const uint XONLINE_E_DECRYPTION_ERROR = 2148859943;
        public const uint XONLINE_E_DESERIALIZATION_ERROR = 2148859944;
        public const uint XONLINE_E_DMP_CANCEL_SUCCESSFULL = 2148872708;
        public const uint XONLINE_E_DMP_CANCEL_TRANS_NOT_FOUND = 2148872709;
        public const uint XONLINE_E_DMP_CANT_GRANT_LICENSE = 2148872705;
        public const uint XONLINE_E_DMP_CANT_MARK_PURCHASE_CANCEL_FAILED = 2148872715;
        public const uint XONLINE_E_DMP_CANT_MARK_PURCHASE_CANCELLED = 2148872707;
        public const uint XONLINE_E_DMP_CANT_MARK_PURCHASE_SUCCESS = 2148872710;
        public const uint XONLINE_E_DMP_CANT_REMOVE_LICENSE = 2148872706;
        public const uint XONLINE_E_DMP_E_COUNTRY_CODE_MISMATCH = 2148873243;
        public const uint XONLINE_E_DMP_E_DELEGATE_NOT_SUPPORTED = 2148872720;
        public const uint XONLINE_E_DMP_E_DESTINATION_ZERO = 2148872721;
        public const uint XONLINE_E_DMP_E_DUPLICATE_EXTERNAL_ORDER_ID = 2148873218;
        public const uint XONLINE_E_DMP_E_INSUFFICIENT_BALANCE = 2148873234;
        public const uint XONLINE_E_DMP_E_INVALID_DESTINATION_ACCOUNT = 2148872722;
        public const uint XONLINE_E_DMP_E_INVALID_SKU = 2148873250;
        public const uint XONLINE_E_DMP_E_INVALID_SOURCE_ACCOUNT = 2148873247;
        public const uint XONLINE_E_DMP_E_MAX_ACQUISITION_EXCEEDED = 2148873236;
        public const uint XONLINE_E_DMP_E_MAX_ACQUISITIONPERSPAN_EXCEEDED = 2148873241;
        public const uint XONLINE_E_DMP_E_MAX_BALANCE_EXCEEDED = 2148873235;
        public const uint XONLINE_E_DMP_E_MAX_BALANCE_TRANSFER_PROVISIONAL_EXCEEDED = 2148872723;
        public const uint XONLINE_E_DMP_E_MAX_CONSUMPTION_EXCEEDED = 2148873237;
        public const uint XONLINE_E_DMP_E_NO_MORE_PROMO_POINTS = 2148873238;
        public const uint XONLINE_E_DMP_E_ORIGINAL_TRANSACTION_NOT_FOUND = 2148873217;
        public const uint XONLINE_E_DMP_E_PROMO_EXPIRED = 2148873240;
        public const uint XONLINE_E_DMP_E_PROMO_POINTS_UNAVAILIABLE = 2148873249;
        public const uint XONLINE_E_DMP_E_PROMOTION_LIMIT_LIFE_MAX = 2148873239;
        public const uint XONLINE_E_DMP_E_REQUEST_CANNOT_BE_COMPLETED = 2148873233;
        public const uint XONLINE_E_DMP_E_RISK_UNEXPECTED_RESULT = 2148872727;
        public const uint XONLINE_E_DMP_E_SOURCE_TRANSFER_PUIDS_SAME = 2148872724;
        public const uint XONLINE_E_DMP_E_SOURCE_ZERO = 2148872725;
        public const uint XONLINE_E_DMP_E_STATUS_UNREGISTERED = 2148873216;
        public const uint XONLINE_E_DMP_E_SYSTEM_INTERNAL_ERROR = 2148873246;
        public const uint XONLINE_E_DMP_E_TARGETTRANSFER_INITIATED_WITHIN_NO_TRANSFER_WINDOW = 2148873242;
        public const uint XONLINE_E_DMP_E_UNKNOWN_ERROR = 2148873232;
        public const uint XONLINE_E_DMP_E_UNKNOWNSERVER_ERROR = 2148873245;
        public const uint XONLINE_E_DMP_E_USER_DISABLED = 2148873248;
        public const uint XONLINE_E_DMP_E_USER_REGISTERED = 2148873244;
        public const uint XONLINE_E_DMP_E_ZERO_NEGTIVE_TRANSFER = 2148872726;
        public const uint XONLINE_E_DMP_INVALID_REWARD = 2148872717;
        public const uint XONLINE_E_DMP_SQL_TRANSACTION_FAILED = 2148872718;
        public const uint XONLINE_E_DMP_TRANSACTION_CANCELLED = 2148872704;
        public const uint XONLINE_E_DMP_TRANSACTION_NOT_FOUND = 2148872712;
        public const uint XONLINE_E_DMP_UNEXPECTED_STATE = 2148872711;
        public const uint XONLINE_E_DOWNLOAD_QUEUE_CREATE_QUEUE_ERROR = 2148893120;
        public const uint XONLINE_E_DOWNLOAD_QUEUE_DELETE_ITEMS_ERROR = 2148893121;
        public const uint XONLINE_E_DOWNLOAD_QUEUE_DELETE_QUEUE_ERROR = 2148893122;
        public const uint XONLINE_E_DOWNLOAD_QUEUE_GRANT_ACCESS_ERROR = 2148893123;
        public const uint XONLINE_E_DOWNLOAD_QUEUE_INSERT_ITEMS_ERROR = 2148893124;
        public const uint XONLINE_E_DOWNLOAD_QUEUE_MODIFY_ITEMS_ERROR = 2148893125;
        public const uint XONLINE_E_DOWNLOAD_QUEUE_MODIFY_QUEUE_ERROR = 2148893126;
        public const uint XONLINE_E_DOWNLOAD_QUEUE_MOVE_ITEMS_ERROR = 2148893130;
        public const uint XONLINE_E_DOWNLOAD_QUEUE_QUERY_ITEMS_ERROR = 2148893127;
        public const uint XONLINE_E_DOWNLOAD_QUEUE_QUERY_QUEUES_ERROR = 2148893128;
        public const uint XONLINE_E_DOWNLOAD_QUEUE_REVOKE_ACCESS_ERROR = 2148893129;
        public const uint XONLINE_E_END_OF_STREAM = 2148859925;
        public const uint XONLINE_E_ESP_ENGINE_INVALID_DATA_TYPE = 2149023747;
        public const uint XONLINE_E_ESP_ENGINE_INVALID_PARAMETER = 2149023745;
        public const uint XONLINE_E_ESP_ENGINE_INVALID_PARAMETER_GROUPING = 2149023751;
        public const uint XONLINE_E_ESP_ENGINE_INVALID_RULE = 2149023749;
        public const uint XONLINE_E_ESP_ENGINE_INVALID_SYNTAX = 2149023746;
        public const uint XONLINE_E_ESP_ENGINE_PARAMETER_NOT_FOUND = 2149023748;
        public const uint XONLINE_E_ESP_ENGINE_SEARCH_TERM_TO_LONG = 2149023750;
        public const uint XONLINE_E_ESP_ENGINE_UNKNOWN_ERROR = 2149023744;
        public const uint XONLINE_E_FEEDBACK_BAD_TYPE = 2148892674;
        public const uint XONLINE_E_FEEDBACK_CANNOT_LOG = 2148892678;
        public const uint XONLINE_E_FEEDBACK_DATABASE_ERROR = 2148892680;
        public const uint XONLINE_E_FEEDBACK_ERROR = 2148892672;
        public const uint XONLINE_E_FEEDBACK_GET_AGGREGATE_REVIEW_ERROR = 2148892682;
        public const uint XONLINE_E_FEEDBACK_NULL_TARGET = 2148892673;
        public const uint XONLINE_E_FEEDBACK_REVIEW_INVALID = 2148892679;
        public const uint XONLINE_E_FEEDBACK_REVIEW_LIMIT_EXCEEDED = 2148892681;
        public const uint XONLINE_E_FEEDBACK_SUBMIT_COMPLAINT_ERROR = 2148892684;
        public const uint XONLINE_E_FEEDBACK_SUBMIT_REVIEW_ERROR = 2148892685;
        public const uint XONLINE_E_FEEDBACK_USER_NOT_FOUND = 2148892675;
        public const uint XONLINE_E_FEEDBACK_USER_NOT_PRESENT = 2148892683;
        public const uint XONLINE_E_FINBUS_FAST_FAIL_ERROR = 2148875270;
        public const uint XONLINE_E_FINBUS_HEALTH_CHECK_ERROR = 2148875269;
        public const uint XONLINE_E_FINBUS_IS_SERVICE_ALIVE_ERROR = 2148875272;
        public const uint XONLINE_E_FINBUS_PUBLISH_MESSAGE_ERROR = 2148875271;
        public const uint XONLINE_E_FINBUS_REDEMPTION_TRANSACTION_FAILED = 2148875267;
        public const uint XONLINE_E_FINBUS_SQL_TRANSACTION_FAILED = 2148875266;
        public const uint XONLINE_E_FINBUS_TRANSACTION_NOT_FOUND = 2148875265;
        public const uint XONLINE_E_FML_ALREADY_EXECUTING = 2149019649;
        public const uint XONLINE_E_FML_ARGUMENT_NOT_FOUND = 2149019650;
        public const uint XONLINE_E_FML_JOB_FAILED = 2149019651;
        public const uint XONLINE_E_FML_OPERATION_FAILED = 2149019652;
        public const uint XONLINE_E_FML_UNKNOWN_ERROR = 2149019648;
        public const uint XONLINE_E_FORBIDDEN_WORD = 2148913161;
        public const uint XONLINE_E_FSE_BIN_ERROR_CONSTRUCTING = 2148881377;
        public const uint XONLINE_E_FSE_BIN_ERROR_EXECUTING = 2148881376;
        public const uint XONLINE_E_FSE_BOOKMARK_INVALID_SETTING = 2148881281;
        public const uint XONLINE_E_FSE_BOOKMARK_NO_SETTING = 2148881282;
        public const uint XONLINE_E_FSE_CACHE_ERROR = 2148881300;
        public const uint XONLINE_E_FSE_CACHE_INSERT_ERROR = 2148881302;
        public const uint XONLINE_E_FSE_CACHE_INVALID_EXPIRATION = 2148881296;
        public const uint XONLINE_E_FSE_CACHE_KEY_TOO_LONG = 2148881297;
        public const uint XONLINE_E_FSE_CACHE_QUERY_ERROR = 2148881301;
        public const uint XONLINE_E_FSE_CACHE_TIMEOUT = 2148881299;
        public const uint XONLINE_E_FSE_CONFIG_DUPLICATE_DELEGATE = 2148881319;
        public const uint XONLINE_E_FSE_CONFIG_MAX_OCCURS_INVALID = 2148881317;
        public const uint XONLINE_E_FSE_CONFIG_METHOD_NOT_FOUND = 2148881312;
        public const uint XONLINE_E_FSE_CONFIG_MIN_OCCURS_INVALID = 2148881316;
        public const uint XONLINE_E_FSE_CONFIG_NO_INTERFACE = 2148881313;
        public const uint XONLINE_E_FSE_CONFIG_OCCURENCE_INVERSION = 2148881318;
        public const uint XONLINE_E_FSE_CONFIG_PAGE_SIZE_INVALID = 2148881320;
        public const uint XONLINE_E_FSE_CONFIG_PARAM_ERROR = 2148881314;
        public const uint XONLINE_E_FSE_CONFIG_UNKNOWN_TYPE = 2148881315;
        public const uint XONLINE_E_FSE_DATABASE_CONNECT_ERROR = 2148881329;
        public const uint XONLINE_E_FSE_DATABASE_ERROR = 2148881328;
        public const uint XONLINE_E_FSE_DATABASE_EXECUTE_ERROR = 2148881330;
        public const uint XONLINE_E_FSE_ERROR = 2148881280;
        public const uint XONLINE_E_FSE_HANDLER_CREATE_ERROR = 2148881289;
        public const uint XONLINE_E_FSE_HANDLER_EXTRACT_ERROR = 2148881291;
        public const uint XONLINE_E_FSE_HANDLER_MERGE_ERROR = 2148881290;
        public const uint XONLINE_E_FSE_HANDLER_MISSING = 2148881288;
        public const uint XONLINE_E_FSE_HANDLER_SPLIT_ERROR = 2148881292;
        public const uint XONLINE_E_FSE_METHOD_ERROR = 2148881344;
        public const uint XONLINE_E_FSE_METHOD_NOT_FOUND = 2148881345;
        public const uint XONLINE_E_FSE_METHOD_RESULT_NOT_PAGED = 2148881347;
        public const uint XONLINE_E_FSE_METHOD_RETRY_COUNT_EXCEEDED = 2148881346;
        public const uint XONLINE_E_FSE_PARAM_CONVERSION_ERROR = 2148881366;
        public const uint XONLINE_E_FSE_PARAM_DELEGATE_FAILURE = 2148881367;
        public const uint XONLINE_E_FSE_PARAM_INTERNAL = 2148881370;
        public const uint XONLINE_E_FSE_PARAM_INTERNAL_ERROR = 2148881363;
        public const uint XONLINE_E_FSE_PARAM_INVALID_VALUE = 2148881365;
        public const uint XONLINE_E_FSE_PARAM_IS_NULL = 2148881368;
        public const uint XONLINE_E_FSE_PARAM_LIST_INVALID = 2148881360;
        public const uint XONLINE_E_FSE_PARAM_MISSING = 2148881361;
        public const uint XONLINE_E_FSE_PARAM_RESERVED = 2148881371;
        public const uint XONLINE_E_FSE_PARAM_TOO_FEW = 2148881369;
        public const uint XONLINE_E_FSE_PARAM_TOO_MANY = 2148881364;
        public const uint XONLINE_E_FSE_PARAM_UNEXPECTED = 2148881362;
        public const uint XONLINE_E_GEO_DENIED = 2148859927;
        public const uint XONLINE_E_GEOFENCING_LOOKUP_ERROR = 2148872237;
        public const uint XONLINE_E_GEOFENCING_RETURNED_NULL = 2148872238;
        public const uint XONLINE_E_HEALTH_ERROR = 2148859938;
        public const uint XONLINE_E_INTERNAL_ERROR = 2148859911;
        public const uint XONLINE_E_INVALID_REQUEST = 2148859920;
        public const uint XONLINE_E_INVALID_SERVICE_ID = 2148859919;
        public const uint XONLINE_E_INVALID_TITLE_ID = 2148859923;
        public const uint XONLINE_E_IO_ERROR = 2148859915;
        public const uint XONLINE_E_LISTS_API_MISMATCH = 2148892960;
        public const uint XONLINE_E_LISTS_CREATE_LIST_ERROR = 2148893056;
        public const uint XONLINE_E_LISTS_DELETE_ITEMS_ERROR = 2148893057;
        public const uint XONLINE_E_LISTS_DELETE_LIST_ERROR = 2148893058;
        public const uint XONLINE_E_LISTS_DUPLICATE_IDS = 2148892934;
        public const uint XONLINE_E_LISTS_DUPLICATE_INDEX = 2148892948;
        public const uint XONLINE_E_LISTS_DUPLICATE_ITEM = 2148892946;
        public const uint XONLINE_E_LISTS_DUPLICATE_LIST = 2148892950;
        public const uint XONLINE_E_LISTS_EMPTY_PARAMETER = 2148892935;
        public const uint XONLINE_E_LISTS_ERROR = 2148892928;
        public const uint XONLINE_E_LISTS_GRANT_ACCESS_ERROR = 2148893059;
        public const uint XONLINE_E_LISTS_ID_MUST_BE_WILDCARD = 2148892932;
        public const uint XONLINE_E_LISTS_INCONSISTENT_VIEW = 2148892952;
        public const uint XONLINE_E_LISTS_INSERT_ITEMS_ERROR = 2148893060;
        public const uint XONLINE_E_LISTS_INVALID_INDEX = 2148892949;
        public const uint XONLINE_E_LISTS_INVALID_ORDER = 2148892953;
        public const uint XONLINE_E_LISTS_INVALID_PAGE_SIZE = 2148892951;
        public const uint XONLINE_E_LISTS_INVALID_XML = 2148892930;
        public const uint XONLINE_E_LISTS_ITEM_TOO_LONG = 2148892933;
        public const uint XONLINE_E_LISTS_MALFORMED_XML = 2148892931;
        public const uint XONLINE_E_LISTS_MODIFY_ITEMS_ERROR = 2148893061;
        public const uint XONLINE_E_LISTS_MODIFY_LIST_ERROR = 2148893062;
        public const uint XONLINE_E_LISTS_MOVE_ITEMS_ERROR = 2148893066;
        public const uint XONLINE_E_LISTS_NAME_TOO_LONG = 2148892938;
        public const uint XONLINE_E_LISTS_NONEXISTENT_ITEM = 2148892947;
        public const uint XONLINE_E_LISTS_NONEXISTENT_LIST = 2148892944;
        public const uint XONLINE_E_LISTS_NONEXISTENT_LIST_TYPE = 2148892936;
        public const uint XONLINE_E_LISTS_PROPERTIES_TOO_LONG = 2148892929;
        public const uint XONLINE_E_LISTS_QUERY_ITEMS_ERROR = 2148893063;
        public const uint XONLINE_E_LISTS_QUERY_LISTS_ERROR = 2148893064;
        public const uint XONLINE_E_LISTS_REVOKE_ACCESS_ERROR = 2148893065;
        public const uint XONLINE_E_LISTS_TOO_MANY_INSTANCES = 2148892937;
        public const uint XONLINE_E_LISTS_TOO_MANY_ITEMS = 2148892945;
        public const uint XONLINE_E_LIVECACHE_EMPTY_RESULT = 2148995073;
        public const uint XONLINE_E_LIVECACHE_FORWARD_FAILED = 2148995074;
        public const uint XONLINE_E_LIVECACHE_INEXIST_KEY = 2148995077;
        public const uint XONLINE_E_LIVECACHE_OFFLINE = 2148995075;
        public const uint XONLINE_E_LIVECACHE_USER_OVERHEAT = 2148995076;
        public const uint XONLINE_E_LIVEINFO_CLIENT_ERROR = 2148909315;
        public const uint XONLINE_E_LIVEINFO_ERROR = 2148909312;
        public const uint XONLINE_E_LIVEINFO_HIVE_ERROR_LOADING_CONFIG = 2148909314;
        public const uint XONLINE_E_LIVEINFO_HIVE_INVALID_CONFIG = 2148909313;
        public const uint XONLINE_E_LOGON_AUTHENTICATION_FAILED = 2148866312;
        public const uint XONLINE_E_LOGON_AUTHENTICATION_TIMEDOUT = 2148866313;
        public const uint XONLINE_E_LOGON_AUTHORIZATION_FAILED = 2148866314;
        public const uint XONLINE_E_LOGON_AUTHORIZATION_TIMEDOUT = 2148866315;
        public const uint XONLINE_E_LOGON_CACHE_MISS = 2148866326;
        public const uint XONLINE_E_LOGON_CANNOT_ACCESS_SERVICE = 2148864001;
        public const uint XONLINE_E_LOGON_CHANGE_USER_FAILED = 2148864768;
        public const uint XONLINE_E_LOGON_CONNECTION_LOST = 2148864004;
        public const uint XONLINE_E_LOGON_DNS_LOOKUP_FAILED = 2148866307;
        public const uint XONLINE_E_LOGON_DNS_LOOKUP_TIMEDOUT = 2148866308;
        public const uint XONLINE_E_LOGON_FLASH_UPDATE_REQUIRED = 2148864007;
        public const uint XONLINE_E_LOGON_INCONCLUSIVE_UPNP_NAT = 2148866328;
        public const uint XONLINE_E_LOGON_INTERNAL_ERROR = 2148866323;
        public const uint XONLINE_E_LOGON_INVALID_CONSOLE_ID = 2148866342;
        public const uint XONLINE_E_LOGON_INVALID_USER = 2148864006;
        public const uint XONLINE_E_LOGON_INVALID_XBOX_ONLINE_INFO = 2148866309;
        public const uint XONLINE_E_LOGON_KERBEROS_BIND_FAILURE = 2148866332;
        public const uint XONLINE_E_LOGON_KICKED_BY_DUPLICATE_LOGON = 2148864005;
        public const uint XONLINE_E_LOGON_LIVE_PORT_OVERRIDE_UNAVAILABLE = 2148866334;
        public const uint XONLINE_E_LOGON_LIVE_PORT_UNAVAILABLE = 2148866333;
        public const uint XONLINE_E_LOGON_LIVEHIVE_FAILED = 2148866341;
        public const uint XONLINE_E_LOGON_MACHINE_AUTHENTICATION_FAILED = 2148866324;
        public const uint XONLINE_E_LOGON_MACS_FAILED = 2148866310;
        public const uint XONLINE_E_LOGON_MACS_TIMEDOUT = 2148866311;
        public const uint XONLINE_E_LOGON_MU_IO_ERROR = 2148866049;
        public const uint XONLINE_E_LOGON_MU_NOT_MOUNTED = 2148866048;
        public const uint XONLINE_E_LOGON_NO_DNS_SERVICE = 2148866306;
        public const uint XONLINE_E_LOGON_NO_IP_ADDRESS = 2148866305;
        public const uint XONLINE_E_LOGON_NO_NETWORK_CONNECTION = 2148864000;
        public const uint XONLINE_E_LOGON_NOT_LOGGED_ON = 2148866050;
        public const uint XONLINE_E_LOGON_NOT_UPNP_NAT = 2148866327;
        public const uint XONLINE_E_LOGON_OTHER_TITLE_ACTIVATED = 2148864010;
        public const uint XONLINE_E_LOGON_PPLOGIN_OFFLINE = 2148866331;
        public const uint XONLINE_E_LOGON_PRESENCE_SERVICE_FAILED = 2148866319;
        public const uint XONLINE_E_LOGON_PRESENCE_SERVICE_TIMEDOUT = 2148866320;
        public const uint XONLINE_E_LOGON_SERVERS_TOO_BUSY = 2148864003;
        public const uint XONLINE_E_LOGON_SERVICE_NOT_AUTHORIZED = 2148864257;
        public const uint XONLINE_E_LOGON_SERVICE_NOT_REQUESTED = 2148864256;
        public const uint XONLINE_E_LOGON_SERVICE_TEMPORARILY_UNAVAILABLE = 2148864258;
        public const uint XONLINE_E_LOGON_SG_SERVICE_FAILED = 2148866318;
        public const uint XONLINE_E_LOGON_SG_SERVICE_NIC_MISMATCH = 2148866335;
        public const uint XONLINE_E_LOGON_SU_FLASH_MISMATCH = 2148866338;
        public const uint XONLINE_E_LOGON_SU_MANIFEST_MISMATCH = 2148866337;
        public const uint XONLINE_E_LOGON_SYSTEM_UPDATE_REQUIRED = 2148866339;
        public const uint XONLINE_E_LOGON_TGT_REVOKED = 2148866325;
        public const uint XONLINE_E_LOGON_TIMEDOUT = 2148866321;
        public const uint XONLINE_E_LOGON_TITLE_ACTIVATION_REQUIRED = 2148864008;
        public const uint XONLINE_E_LOGON_UNKNOWN_TITLE = 2148866322;
        public const uint XONLINE_E_LOGON_UPDATE_NOT_PROPPED = 2148866340;
        public const uint XONLINE_E_LOGON_UPDATE_REQUIRED = 2148864002;
        public const uint XONLINE_E_LOGON_UPNP_NAT_HARD_FAILURE = 2148866329;
        public const uint XONLINE_E_LOGON_UPNP_PORT_UNAVAILABLE = 2148866330;
        public const uint XONLINE_E_LOGON_USER_ACCOUNT_REQUIRES_MANAGEMENT = 2148864512;
        public const uint XONLINE_E_LOGON_USER_TITLE_ACTIVATION_REQUIRED = 2148864009;
        public const uint XONLINE_E_LOGON_WLID_XUID_MISMATCH = 2148866336;
        public const uint XONLINE_E_LOGON_XBOX_ACCOUNT_BANNED = 2148866317;
        public const uint XONLINE_E_LOGON_XBOX_ACCOUNT_BANNED_REPAIR = 2148866344;
        public const uint XONLINE_E_LOGON_XBOX_ACCOUNT_BANNED_TEMP = 2148866343;
        public const uint XONLINE_E_LOGON_XBOX_ACCOUNT_INVALID = 2148866316;
        public const uint XONLINE_E_LSP_BUCKET_INTERFACE_CONFIG_ERROR = 2148909569;
        public const uint XONLINE_E_LSP_ERROR = 2148909568;
        public const uint XONLINE_E_MACHINE_ID_NOT_FOUND = 2148872963;
        public const uint XONLINE_E_MARKETPLACECATALOG_BAD_FORMAT = 2149027842;
        public const uint XONLINE_E_MARKETPLACECATALOG_DETAIL_LEVEL_MISSING = 2149027843;
        public const uint XONLINE_E_MARKETPLACECATALOG_PARAMETER_MISSING = 2149027841;
        public const uint XONLINE_E_MARKETPLACECATALOG_UNKNOWN_ERROR = 2149027840;
        public const uint XONLINE_E_MATCH_BLOB_TOO_LONG = 2148880653;
        public const uint XONLINE_E_MATCH_CONCURRENT_REQ_CONFLICT = 2148880679;
        public const uint XONLINE_E_MATCH_CRITICAL_DB_ERR = 2148880661;
        public const uint XONLINE_E_MATCH_DATA_TYPE_MISMATCH = 2148880669;
        public const uint XONLINE_E_MATCH_DUPLICATE_PARAM = 2148880677;
        public const uint XONLINE_E_MATCH_INVALID_ATTR_TYPE = 2148880647;
        public const uint XONLINE_E_MATCH_INVALID_ATTRIBUTE_ID = 2148880656;
        public const uint XONLINE_E_MATCH_INVALID_BLOB = 2148880672;
        public const uint XONLINE_E_MATCH_INVALID_DATA_TYPE = 2148880642;
        public const uint XONLINE_E_MATCH_INVALID_FLAGS = 2148880674;
        public const uint XONLINE_E_MATCH_INVALID_OFFSET = 2148880646;
        public const uint XONLINE_E_MATCH_INVALID_PARAM = 2148880665;
        public const uint XONLINE_E_MATCH_INVALID_PART_SCHEME = 2148880664;
        public const uint XONLINE_E_MATCH_INVALID_RESULT_COL = 2148880650;
        public const uint XONLINE_E_MATCH_INVALID_SEARCH_REQ = 2148880645;
        public const uint XONLINE_E_MATCH_INVALID_SESSION_ID = 2148880640;
        public const uint XONLINE_E_MATCH_INVALID_STRING = 2148880651;
        public const uint XONLINE_E_MATCH_INVALID_TITLE_ID = 2148880641;
        public const uint XONLINE_E_MATCH_INVALID_VERSION = 2148880648;
        public const uint XONLINE_E_MATCH_LOCK_ALREADY_RELEASED = 2148880681;
        public const uint XONLINE_E_MATCH_NO_USERS = 2148880671;
        public const uint XONLINE_E_MATCH_NOT_ENOUGH_COLUMNS = 2148880662;
        public const uint XONLINE_E_MATCH_OVERFLOW = 2148880649;
        public const uint XONLINE_E_MATCH_PARAM_MISSING = 2148880675;
        public const uint XONLINE_E_MATCH_PERMISSION_DENIED = 2148880663;
        public const uint XONLINE_E_MATCH_REQUEST_TOO_SMALL = 2148880643;
        public const uint XONLINE_E_MATCH_REQUEST_TRUNCATED = 2148880644;
        public const uint XONLINE_E_MATCH_SERVER_ERROR = 2148880670;
        public const uint XONLINE_E_MATCH_SESSION_ALREADY_EXISTS = 2148880658;
        public const uint XONLINE_E_MATCH_SESSION_TYPE_MISMATCH = 2148880680;
        public const uint XONLINE_E_MATCH_STRING_TOO_LONG = 2148880652;
        public const uint XONLINE_E_MATCH_TOO_MANY_ATTR = 2148880678;
        public const uint XONLINE_E_MATCH_TOO_MANY_PARAM = 2148880676;
        public const uint XONLINE_E_MATCH_TOO_MANY_USERS = 2148880673;
        public const uint XONLINE_E_MEDIA_INSTANCE_NOT_ACQUIRABLE = 2148872224;
        public const uint XONLINE_E_MEMBER_NAME_INVALID = 2148913179;
        public const uint XONLINE_E_MEMBER_NAME_TOO_SHORT = 2148913178;
        public const uint XONLINE_E_MESSAGE_INSUFFICIENT_PRIVILEGES = 2148882955;
        public const uint XONLINE_E_MESSAGE_INVALID_MESSAGE_ID = 2148882945;
        public const uint XONLINE_E_MESSAGE_INVALID_MESSAGE_TYPE = 2148882953;
        public const uint XONLINE_E_MESSAGE_INVALID_TITLE_ID = 2148882950;
        public const uint XONLINE_E_MESSAGE_MAX_DETAILS_SIZE_EXCEEDED = 2148882952;
        public const uint XONLINE_E_MESSAGE_NO_MESSAGE_DETAILS = 2148882949;
        public const uint XONLINE_E_MESSAGE_NO_VALID_SENDS_TO_REVOKE = 2148882948;
        public const uint XONLINE_E_MESSAGE_PROPERTY_DOWNLOAD_REQUIRED = 2148882946;
        public const uint XONLINE_E_MESSAGE_PROPERTY_NOT_FOUND = 2148882947;
        public const uint XONLINE_E_MESSAGE_SENDER_BLOCKED = 2148882951;
        public const uint XONLINE_E_MESSAGE_THROTTLED = 2148882957;
        public const uint XONLINE_E_MESSAGE_UNDELIVERABLE = 2148882956;
        public const uint XONLINE_E_MESSAGE_USER_OPTED_OUT = 2148882954;
        public const uint XONLINE_E_MIGRATEUSER_FAILED_TO_CREATE_USER_ERROR = 2148914437;
        public const uint XONLINE_E_MIGRATEUSER_FAILED_TO_LOAD_USER_ERROR = 2148914434;
        public const uint XONLINE_E_MIGRATEUSER_FAILED_TO_READ_XML_ERROR = 2148914436;
        public const uint XONLINE_E_MIGRATEUSER_FAILED_TO_WRITE_XML_ERROR = 2148914435;
        public const uint XONLINE_E_MIGRATEUSER_GENERIC_ERROR = 2148914432;
        public const uint XONLINE_E_MIGRATEUSER_USER_ALREADY_EXISTS_ERROR = 2148914438;
        public const uint XONLINE_E_MIGRATEUSER_USER_DOES_NOT_EXIST_ERROR = 2148914433;
        public const uint XONLINE_E_MIGRATEUSER_WRITE_TO_PROD_ERROR = 2148914439;
        public const uint XONLINE_E_MIX_ARGUMENT_EMPTY = 2149015600;
        public const uint XONLINE_E_MIX_ARGUMENT_NULL = 2149015559;
        public const uint XONLINE_E_MIX_ARGUMENT_NULL_INTERNAL = 2149015560;
        public const uint XONLINE_E_MIX_ARRAY_TOO_LONG = 2149015616;
        public const uint XONLINE_E_MIX_CANNOT_MIGRATE_TO_SELF = 2149015609;
        public const uint XONLINE_E_MIX_CATALOG_CONSTRAINT_ERROR = 2149015592;
        public const uint XONLINE_E_MIX_CONCURRENCY_ERROR = 2149015587;
        public const uint XONLINE_E_MIX_CONFIGUREOFFER = 2149015556;
        public const uint XONLINE_E_MIX_CONFIGUREPRODUCT = 2149015554;
        public const uint XONLINE_E_MIX_DECOMPRESSION_ERROR = 2149015572;
        public const uint XONLINE_E_MIX_DUPLICATE_APP_NOT_ALLOWED = 2149015612;
        public const uint XONLINE_E_MIX_DUPLICATE_CONTENTID = 2149015624;
        public const uint XONLINE_E_MIX_DUPLICATE_GROUP_NAME_NOT_ALLOWED = 2149015597;
        public const uint XONLINE_E_MIX_DUPLICATE_RANK_NOT_ALLOWED = 2149015617;
        public const uint XONLINE_E_MIX_DUPLICATE_XRL_NOT_ALLOWED = 2149015610;
        public const uint XONLINE_E_MIX_ENTITYFRAMEWORK_CONNECTION_ERROR = 2149015553;
        public const uint XONLINE_E_MIX_ERROR_INGESTING_MANIFEST = 2149015625;
        public const uint XONLINE_E_MIX_FORBIDDEN_ENVIRONMENT = 2149015582;
        public const uint XONLINE_E_MIX_FRONT_DOOR_RESET_ERROR = 2149015611;
        public const uint XONLINE_E_MIX_GAMEATTRIBUTE_INVALID_PROPERTY = 2149015577;
        public const uint XONLINE_E_MIX_GAMEATTRIBUTE_INVALID_PROPERTY_TYPE = 2149015578;
        public const uint XONLINE_E_MIX_GAMEATTRIBUTE_INVALID_PROPERTY_VALUE = 2149015579;
        public const uint XONLINE_E_MIX_GETOFFER = 2149015557;
        public const uint XONLINE_E_MIX_GETPRODUCT = 2149015555;
        public const uint XONLINE_E_MIX_GROUP_DOES_NOT_EXIST = 2149015594;
        public const uint XONLINE_E_MIX_GROUP_MUST_BE_EMPTY = 2149015606;
        public const uint XONLINE_E_MIX_INVALID_CONFIG = 2149015601;
        public const uint XONLINE_E_MIX_INVALID_CONSUMABLE_QUANTITY = 2149015581;
        public const uint XONLINE_E_MIX_INVALID_DURATION_TYPE = 2149015566;
        public const uint XONLINE_E_MIX_INVALID_FILE_TYPE = 2149015575;
        public const uint XONLINE_E_MIX_INVALID_GROUP_CREATOR = 2149015599;
        public const uint XONLINE_E_MIX_INVALID_GROUP_NAME = 2149015598;
        public const uint XONLINE_E_MIX_INVALID_GUID = 2149015576;
        public const uint XONLINE_E_MIX_INVALID_LEADERBOARD_ID = 2149015570;
        public const uint XONLINE_E_MIX_INVALID_MEDIA_RELATIONSHIP_TYPE = 2149015562;
        public const uint XONLINE_E_MIX_INVALID_MEDIATYPE = 2149015583;
        public const uint XONLINE_E_MIX_INVALID_OFFER_RELATIONSHIP_MEDIA = 2149015567;
        public const uint XONLINE_E_MIX_INVALID_OFFER_RELATIONSHIP_TYPE = 2149015563;
        public const uint XONLINE_E_MIX_INVALID_OFFERTYPE_MEDIA = 2149015568;
        public const uint XONLINE_E_MIX_INVALID_PLATFORM = 2149015574;
        public const uint XONLINE_E_MIX_INVALID_PRODUCTFAMILY = 2149015595;
        public const uint XONLINE_E_MIX_INVALID_SERVICE_PRIVILEGE_SET = 2149015591;
        public const uint XONLINE_E_MIX_INVALID_SERVICE_TYPE = 2149015588;
        public const uint XONLINE_E_MIX_INVALID_SKU_DELETE = 2149015596;
        public const uint XONLINE_E_MIX_INVALID_SUBSCRIPTION_TYPE = 2149015589;
        public const uint XONLINE_E_MIX_INVALID_TIER = 2149015590;
        public const uint XONLINE_E_MIX_INVALID_TITLE_ID = 2149015569;
        public const uint XONLINE_E_MIX_INVALID_VERSION = 2149015573;
        public const uint XONLINE_E_MIX_INVALID_VISIBILITY_STATUS = 2149015632;
        public const uint XONLINE_E_MIX_INVALID_XLAST = 2149015571;
        public const uint XONLINE_E_MIX_MACHINE_NOT_IN_GROUP = 2149015608;
        public const uint XONLINE_E_MIX_MATCH_MISSING_REMOVE_MODE = 2149015603;
        public const uint XONLINE_E_MIX_MATCH_NEW_MODE_FOUND = 2149015604;
        public const uint XONLINE_E_MIX_MATCH_SQL_EXCEPTION = 2149015605;
        public const uint XONLINE_E_MIX_MEDIALOCALEMAPS_INVALID_MAPPING = 2149015580;
        public const uint XONLINE_E_MIX_NEW_LIVEOFFERID_FOR_EXISTING_OFFER = 2149015584;
        public const uint XONLINE_E_MIX_NEW_MEDIA_FOR_EXISTING_OFFER = 2149015564;
        public const uint XONLINE_E_MIX_NEW_OFFER_FOR_EXISTING_OFFERINSTANCE = 2149015565;
        public const uint XONLINE_E_MIX_NOT_FOUND_IN_CATALOG = 2149015561;
        public const uint XONLINE_E_MIX_OFFER_ERROR_FAMILY_INGESTION = 2149015622;
        public const uint XONLINE_E_MIX_OFFER_ERROR_LEGACY_OFFER = 2149015623;
        public const uint XONLINE_E_MIX_OFFER_INVALID_SUBSCRIPTION_CONFIG = 2149015619;
        public const uint XONLINE_E_MIX_OFFER_INVALID_SUBSCRIPTIONFAMILY_CONFIG = 2149015618;
        public const uint XONLINE_E_MIX_OFFER_NO_FREQUENCY_FOUND = 2149015621;
        public const uint XONLINE_E_MIX_OFFER_NO_TIER_FOUND = 2149015620;
        public const uint XONLINE_E_MIX_OPERATION_NOT_SUPPORTED = 2149015634;
        public const uint XONLINE_E_MIX_PRODUCT_DUPLICATE_IMAGE_INSTANCE_ID = 2149015633;
        public const uint XONLINE_E_MIX_PRODUCT_LOCALIZATION_NOT_FOUND = 2149015586;
        public const uint XONLINE_E_MIX_STATS_FORCE_REQUIRED = 2149015602;
        public const uint XONLINE_E_MIX_STRING_TOO_LONG = 2149015607;
        public const uint XONLINE_E_MIX_UNIQUE_RATINGSYSTEMS_ERROR = 2149015585;
        public const uint XONLINE_E_MIX_UNKNOWNERROR = 2149015552;
        public const uint XONLINE_E_MIX_WEBSGVALIDATIONERROR = 2149015558;
        public const uint XONLINE_E_MIX_ZERO_GUID_NOT_ALLOWED = 2149015593;
        public const uint XONLINE_E_MSGSVR_INVALID_REQUEST = 2148888577;
        public const uint XONLINE_E_MSNRR_BEGIN_ERROR_RANGE = 2148876544;
        public const uint XONLINE_E_MSNRR_INVALID_CONTENT_TYPE_ID = 2148876545;
        public const uint XONLINE_E_MSNRR_INVALID_ITEM_ID = 2148876546;
        public const uint XONLINE_E_MSNRR_INVALID_TRANSACTION_TOKEN = 2148876549;
        public const uint XONLINE_E_MSNRR_PUID_CANNOT_BE_ZERO = 2148876547;
        public const uint XONLINE_E_MSNRR_UNKNOWN_ERROR = 2148876544;
        public const uint XONLINE_E_MSNRR_USE_MULTIPLE_RATING = 2148876548;
        public const uint XONLINE_E_MULTI_PURCHASE_INVALID_OFFER_TYPE = 2148872212;
        public const uint XONLINE_E_MULTI_PURCHASE_INVALID_PAYMENT_TYPE = 2148872213;
        public const uint XONLINE_E_MULTI_PURCHASE_INVALID_PLATFORM_TYPE = 2148872232;
        public const uint XONLINE_E_MULTIPLE_USERS = 2148859941;
        public const uint XONLINE_E_MUSICNET_ACCOUNT_ALREADY_HAS_QUEUED_OFFER = 2148874004;
        public const uint XONLINE_E_MUSICNET_ACCOUNT_ALREADY_HAS_TRIAL = 2148873999;
        public const uint XONLINE_E_MUSICNET_ACCOUNT_ALREADY_SUBSCRIBER = 2148873990;
        public const uint XONLINE_E_MUSICNET_ACCOUNT_CANCELED = 2148873995;
        public const uint XONLINE_E_MUSICNET_ACCOUNT_HAS_EXPIRED_TRIAL = 2148873998;
        public const uint XONLINE_E_MUSICNET_ACCOUNT_SUSPENDED_OR_CLOSED = 2148873989;
        public const uint XONLINE_E_MUSICNET_BEGIN_ERROR_RANGE = 2148873984;
        public const uint XONLINE_E_MUSICNET_CANNOT_CHANGE_OFFER = 2148873997;
        public const uint XONLINE_E_MUSICNET_CONTENT_RIGHT_UNAVAILABLE = 2148874006;
        public const uint XONLINE_E_MUSICNET_DUPLICATE_USER_NAME = 2148874002;
        public const uint XONLINE_E_MUSICNET_END_ERROR_RANGE = 2148874239;
        public const uint XONLINE_E_MUSICNET_INSUFFICIENT_FREE_TRACKS = 2148874003;
        public const uint XONLINE_E_MUSICNET_INVALID_CANCEL_REQUEST = 2148873991;
        public const uint XONLINE_E_MUSICNET_INVALID_ORDER_ID = 2148873988;
        public const uint XONLINE_E_MUSICNET_INVALID_RESUME_REQUEST = 2148873996;
        public const uint XONLINE_E_MUSICNET_INVALID_SKU_NUMBER = 2148873993;
        public const uint XONLINE_E_MUSICNET_INVALID_SUBSCRIPTION_FREE_PURCHASE = 2148874005;
        public const uint XONLINE_E_MUSICNET_INVALID_TRANSACTION_DATE = 2148873994;
        public const uint XONLINE_E_MUSICNET_MAXIMUM_PURCHASE_COMPONENTS_EXCEEDED = 2148874001;
        public const uint XONLINE_E_MUSICNET_ORDERITEMS_ITEMS_WITH_ERRORS = 2148873987;
        public const uint XONLINE_E_MUSICNET_SUBSCRIPTION_ACCOUNT_CLOSED = 2148873992;
        public const uint XONLINE_E_MUSICNET_TRANSACTION_NOT_FOUND = 2148873986;
        public const uint XONLINE_E_MUSICNET_TRIAL_OFFER_EXPIRED = 2148874000;
        public const uint XONLINE_E_MUSICNET_UNKNOWN_ERROR = 2148873984;
        public const uint XONLINE_E_NO_GUEST_ACCESS = 2148859908;
        public const uint XONLINE_E_NO_SESSION = 2148859906;
        public const uint XONLINE_E_NO_USER = 2148859910;
        public const uint XONLINE_E_NOT_INITIALIZED = 2148859909;
        public const uint XONLINE_E_NOTIFICATION_BAD_CONTENT_TYPE = 2148880384;
        public const uint XONLINE_E_NOTIFICATION_BLOCKED = 2148868099;
        public const uint XONLINE_E_NOTIFICATION_ERROR = 2148868096;
        public const uint XONLINE_E_NOTIFICATION_FLUSH_TICKETS = 2148868101;
        public const uint XONLINE_E_NOTIFICATION_FRIEND_PENDING = 2148868100;
        public const uint XONLINE_E_NOTIFICATION_INVALID_MESSAGE_TYPE = 2148880386;
        public const uint XONLINE_E_NOTIFICATION_INVALID_PUID = 2148880388;
        public const uint XONLINE_E_NOTIFICATION_LIST_FULL = 2148868098;
        public const uint XONLINE_E_NOTIFICATION_MESSAGE_TRUNCATED = 2148880392;
        public const uint XONLINE_E_NOTIFICATION_NO_ADDRESS = 2148880387;
        public const uint XONLINE_E_NOTIFICATION_NO_CONNECTION = 2148880389;
        public const uint XONLINE_E_NOTIFICATION_NO_DATA = 2148868109;
        public const uint XONLINE_E_NOTIFICATION_NO_PEER_SUBSCRIBE = 1384462;
        public const uint XONLINE_E_NOTIFICATION_NO_TASK = 2148868108;
        public const uint XONLINE_E_NOTIFICATION_OTHER_LIST_FULL = 2148868105;
        public const uint XONLINE_E_NOTIFICATION_RECV_FAILED = 2148880391;
        public const uint XONLINE_E_NOTIFICATION_REQUEST_TOO_SMALL = 2148880385;
        public const uint XONLINE_E_NOTIFICATION_SAME_TITLE = 2148868107;
        public const uint XONLINE_E_NOTIFICATION_SELF = 2148868106;
        public const uint XONLINE_E_NOTIFICATION_SEND_FAILED = 2148880390;
        public const uint XONLINE_E_NOTIFICATION_SERVER_BUSY = 2148868097;
        public const uint XONLINE_E_NOTIFICATION_STATE_ERROR = 2148868112;
        public const uint XONLINE_E_NOTIFICATION_THREAD_ERROR = 2148868111;
        public const uint XONLINE_E_NOTIFICATION_TOO_MANY_REQUESTS = 2148868102;
        public const uint XONLINE_E_NOTIFICATION_USER_ALREADY_EXISTS = 2148868103;
        public const uint XONLINE_E_NOTIFICATION_USER_NOT_FOUND = 2148868104;
        public const uint XONLINE_E_OFFERING_ALREADY_OWN_MAX = 2148872204;
        public const uint XONLINE_E_OFFERING_ALREADY_OWN_MAX_MACHINE = 2148872349;
        public const uint XONLINE_E_OFFERING_ASSET_CONSUME_ERROR = 2148872301;
        public const uint XONLINE_E_OFFERING_ASSET_ENUMERATE_ERROR = 2148872302;
        public const uint XONLINE_E_OFFERING_AUTOUPD_ERROR = 2148872245;
        public const uint XONLINE_E_OFFERING_BAD_REQUEST = 2148872193;
        public const uint XONLINE_E_OFFERING_BANNER_LIST_ERROR = 2148872246;
        public const uint XONLINE_E_OFFERING_BASE_OFFER_NOT_CANCELABLE = 2148872208;
        public const uint XONLINE_E_OFFERING_BILLING_SERVER_ERROR = 2148872201;
        public const uint XONLINE_E_OFFERING_CANCEL_ERROR = 2148872263;
        public const uint XONLINE_E_OFFERING_CONTENT_AVAILABLE_ERROR = 2148872247;
        public const uint XONLINE_E_OFFERING_CONTENT_DETAILS_ERROR = 2148872248;
        public const uint XONLINE_E_OFFERING_CONTENT_ENUMERATE_ERROR = 2148872249;
        public const uint XONLINE_E_OFFERING_CONTENT_HISTORY_ERROR = 2148872250;
        public const uint XONLINE_E_OFFERING_CONTENT_REFERRAL_ERROR = 2148872251;
        public const uint XONLINE_E_OFFERING_CONTENT_REFRESH_LICENSE_ERROR = 2148872267;
        public const uint XONLINE_E_OFFERING_CONTENT_UPDATE_ERROR = 2148872252;
        public const uint XONLINE_E_OFFERING_CREATE_CERTIFICATE_ERROR = 2148872272;
        public const uint XONLINE_E_OFFERING_DETAILS_ERROR = 2148872260;
        public const uint XONLINE_E_OFFERING_DETAILS_NO_USER_ERROR = 2148872261;
        public const uint XONLINE_E_OFFERING_ENUMERATE_GENRES_ERROR = 2148872253;
        public const uint XONLINE_E_OFFERING_ENUMERATE_TITLES_ERROR = 2148872254;
        public const uint XONLINE_E_OFFERING_FAMILY_CHILD_PURCHASE_NOT_ALLOWED = 2148872348;
        public const uint XONLINE_E_OFFERING_FAMILY_DEPENDENT_PURCHASE_NOT_ALLOWED = 2148872347;
        public const uint XONLINE_E_OFFERING_FAMILY_TO_CLASSIC_DOWNGRADE_NOT_ALLOWED = 2148872345;
        public const uint XONLINE_E_OFFERING_FIND_MEDIA_INSTANCE_URLS_ERROR = 2148872255;
        public const uint XONLINE_E_OFFERING_GET_LEGACYID_ERROR = 2148872340;
        public const uint XONLINE_E_OFFERING_GET_LEGACYOFFER_ERROR = 2148872324;
        public const uint XONLINE_E_OFFERING_GET_OFFERINGGUID_ERROR = 2148872339;
        public const uint XONLINE_E_OFFERING_GET_OFFERINSTANCE_ERROR = 2148872325;
        public const uint XONLINE_E_OFFERING_GET_POINTS_PURCHASE_STATUS_ERROR = 2148872268;
        public const uint XONLINE_E_OFFERING_GET_REVOCATION_LIST_ERROR = 2148872269;
        public const uint XONLINE_E_OFFERING_GET_TITLE_ACTIVATION_ERROR = 2148872256;
        public const uint XONLINE_E_OFFERING_GET_TITLE_DETAILS_ERROR = 2148872257;
        public const uint XONLINE_E_OFFERING_GRANTS_NOTHING = 2148872229;
        public const uint XONLINE_E_OFFERING_IN_GAME_CONTENT_AVAILABLE_ERROR = 2148872258;
        public const uint XONLINE_E_OFFERING_IN_GAME_CONTENT_ENUMERATE_ERROR = 2148872259;
        public const uint XONLINE_E_OFFERING_INVALID_CONSUME_ITEMS = 2148872211;
        public const uint XONLINE_E_OFFERING_INVALID_OFFER_ID = 2148872195;
        public const uint XONLINE_E_OFFERING_INVALID_OFFER_TYPE = 2148872210;
        public const uint XONLINE_E_OFFERING_INVALID_PAYMENT_TYPE = 2148872230;
        public const uint XONLINE_E_OFFERING_INVALID_RENEWAL = 2148872326;
        public const uint XONLINE_E_OFFERING_INVALID_USER = 2148872194;
        public const uint XONLINE_E_OFFERING_LICENSE_AVAILABLE = 2148872350;
        public const uint XONLINE_E_OFFERING_MEDIA_TYPE_MISMATCH = 2148872231;
        public const uint XONLINE_E_OFFERING_MIGRATION_ERROR = 2148872236;
        public const uint XONLINE_E_OFFERING_MISSING_RESULTS = 2148872234;
        public const uint XONLINE_E_OFFERING_MULTIPLE_RENEWAL = 2148872327;
        public const uint XONLINE_E_OFFERING_NAME_TAKEN = 2148872207;
        public const uint XONLINE_E_OFFERING_NO_CHARGE = 2148872205;
        public const uint XONLINE_E_OFFERING_NOTHING_TO_CANCEL = 2148872203;
        public const uint XONLINE_E_OFFERING_OFFER_EXPIRED = 2148872197;
        public const uint XONLINE_E_OFFERING_OFFER_MISCONFIGURED = 2148872226;
        public const uint XONLINE_E_OFFERING_OFFER_NOT_CANCELABLE = 2148872202;
        public const uint XONLINE_E_OFFERING_OFFER_NOT_VISIBLE = 2148872227;
        public const uint XONLINE_E_OFFERING_OFFER_PURCHASE_ERROR = 2148872270;
        public const uint XONLINE_E_OFFERING_PAYMENT_INFO_TOO_LONG = 2148872235;
        public const uint XONLINE_E_OFFERING_PERMISSION_DENIED = 2148872206;
        public const uint XONLINE_E_OFFERING_PRICE_CHANGED = 2148872214;
        public const uint XONLINE_E_OFFERING_PURCHASE_BLOCKED = 2148872199;
        public const uint XONLINE_E_OFFERING_PURCHASE_DENIED = 2148872200;
        public const uint XONLINE_E_OFFERING_PURCHASE_GAMERTAG_ERROR = 2148872273;
        public const uint XONLINE_E_OFFERING_PURCHASE_MUSIC_ERROR = 2148872271;
        public const uint XONLINE_E_OFFERING_PURCHASE_OFFERS_ERROR = 2148872264;
        public const uint XONLINE_E_OFFERING_SERVICE_UNREACHABLE = 2148872198;
        public const uint XONLINE_E_OFFERING_SIGN_ASSETS_ERROR = 2148872303;
        public const uint XONLINE_E_OFFERING_SUBSCRIPTION_DETAILS_ERROR = 2148872262;
        public const uint XONLINE_E_OFFERING_SUBSCRIPTION_ENUMERATE_ERROR = 2148872265;
        public const uint XONLINE_E_OFFERING_SUBSCRIPTION_NOT_FOUND = 2148872217;
        public const uint XONLINE_E_OFFERING_UNKNOWN_OFFER_TYPE = 2148872218;
        public const uint XONLINE_E_OFFERING_UNKNOWN_PAYMENT_TYPE = 2148872219;
        public const uint XONLINE_E_OFFERING_VERIFY_NICKNAME_ERROR = 2148872266;
        public const uint XONLINE_E_OFFERING_VERIFY_TOKEN_ERROR = 2148872239;
        public const uint XONLINE_E_OFFERING_VISIBLITY_STATUS_NOT_ALLOWED = 2148872228;
        public const uint XONLINE_E_ORANGE_INVALID_REQUEST = 2148873729;
        public const uint XONLINE_E_OUT_OF_MEMORY = 2148859912;
        public const uint XONLINE_E_OVERFLOW = 2148859905;
        public const uint XONLINE_E_PASSPORT_ASM_KEY_NOT_FOUND = 2148913286;
        public const uint XONLINE_E_PASSPORT_ERROR = 2148913152;
        public const uint XONLINE_E_PASSPORT_FORCE_CHANGE_PASSWORD = 2148913157;
        public const uint XONLINE_E_PASSPORT_FORCE_CHANGE_SQ_SA = 2148913158;
        public const uint XONLINE_E_PASSPORT_FORCE_RENAME = 2148913156;
        public const uint XONLINE_E_PASSPORT_INVALID_DOMAIN = 2148913180;
        public const uint XONLINE_E_PASSPORT_INVALID_ID = 2148913280;
        public const uint XONLINE_E_PASSPORT_INVALID_POSTAL_CODE = 2148913181;
        public const uint XONLINE_E_PASSPORT_INVALID_RESPONSE = 2148913281;
        public const uint XONLINE_E_PASSPORT_KIDS_ACCOUNT_NO_CONSENT = 2148913185;
        public const uint XONLINE_E_PASSPORT_LOCKED_OUT = 2148913155;
        public const uint XONLINE_E_PASSPORT_NAME_ALREADY_TAKEN = 2148913153;
        public const uint XONLINE_E_PASSPORT_NO_DATA = 2148913285;
        public const uint XONLINE_E_PASSPORT_NO_SECRET_QUESTIONS = 2148913284;
        public const uint XONLINE_E_PASSPORT_PASSWORD_EXPIRED = 2148913159;
        public const uint XONLINE_E_PASSPORT_REQUIRE_EMAIL_VALIDATION = 2148913160;
        public const uint XONLINE_E_PASSPORT_SITE_NOT_AUTHORIZED = 2148913186;
        public const uint XONLINE_E_PASSPORT_SQ_TOO_LONG = 2148913184;
        public const uint XONLINE_E_PASSPORT_SQ_TOO_SHORT = 2148913183;
        public const uint XONLINE_E_PASSPORT_TIMEOUT = 2148913283;
        public const uint XONLINE_E_PASSPORT_TOO_MANY_SECRET_QUESTIONS = 2148913282;
        public const uint XONLINE_E_PASSPORT_WRONG_NAME_OR_PASSWORD = 2148913154;
        public const uint XONLINE_E_PASSWORD_BLANK = 2148913162;
        public const uint XONLINE_E_PASSWORD_CONTAINS_INVALID_CHARACTERS = 2148913166;
        public const uint XONLINE_E_PASSWORD_CONTAINS_MEMBER_NAME = 2148913165;
        public const uint XONLINE_E_PASSWORD_CONTAINS_SA = 2148913169;
        public const uint XONLINE_E_PASSWORD_TOO_LONG = 2148913164;
        public const uint XONLINE_E_PASSWORD_TOO_SHORT = 2148913163;
        public const uint XONLINE_E_PENDING_POINTS_PURCHASE = 2148872216;
        public const uint XONLINE_E_PROTOCOL_MISMATCH = 2148859918;
        public const uint XONLINE_E_PUID_IS_MACHINE = 2148990976;
        public const uint XONLINE_E_PURCHASE_PENDING = 2148872225;
        public const uint XONLINE_E_QUERY_ATTRIBUTE_TOO_LONG = 2148884740;
        public const uint XONLINE_E_QUERY_DATASET_NOT_FOUND = 2148884745;
        public const uint XONLINE_E_QUERY_DUPLICATE_ENTRY = 2148884747;
        public const uint XONLINE_E_QUERY_ENTITY_NOT_FOUND = 2148884738;
        public const uint XONLINE_E_QUERY_ERROR = 2148884736;
        public const uint XONLINE_E_QUERY_INVALID_ACTION = 2148884743;
        public const uint XONLINE_E_QUERY_PERMISSION_DENIED = 2148884739;
        public const uint XONLINE_E_QUERY_PROCEDURE_NOT_FOUND = 2148884746;
        public const uint XONLINE_E_QUERY_QUOTA_FULL = 2148884737;
        public const uint XONLINE_E_QUERY_RETHROW_ERROR = 2148884742;
        public const uint XONLINE_E_QUERY_RETRY = 2148884748;
        public const uint XONLINE_E_QUERY_SPEC_COUNT_MISMATCH = 2148884744;
        public const uint XONLINE_E_QUERY_UNEXPECTED_ATTRIBUTE = 2148884741;
        public const uint XONLINE_E_RATINGS_CONTENTTYPE_MAPPING_ERROR = 2148913677;
        public const uint XONLINE_E_RATINGS_CONTENTTYPE_SETTING_ERROR = 2148913676;
        public const uint XONLINE_E_RATINGS_CRON_NPDB_SETTING_ERROR = 2148913683;
        public const uint XONLINE_E_RATINGS_CRON_SAVE_AVERAGE_ERROR = 2148913681;
        public const uint XONLINE_E_RATINGS_CRON_TRANSACTION_DATE_ERROR = 2148913682;
        public const uint XONLINE_E_RATINGS_CRON_TRANSACTION_DATE_SAVE_ERROR = 2148913684;
        public const uint XONLINE_E_RATINGS_CRON_UNKNOWN_ERROR = 2148913679;
        public const uint XONLINE_E_RATINGS_ERROR_GETUSER = 2148913674;
        public const uint XONLINE_E_RATINGS_ERROR_MEDIAGET = 2148913675;
        public const uint XONLINE_E_RATINGS_INVALID_COUNTRY = 2148913665;
        public const uint XONLINE_E_RATINGS_INVALID_MEDIA = 2148913687;
        public const uint XONLINE_E_RATINGS_INVALID_MEDIATYPE = 2148913669;
        public const uint XONLINE_E_RATINGS_INVALID_RATING = 2148913668;
        public const uint XONLINE_E_RATINGS_INVALID_USER = 2148913667;
        public const uint XONLINE_E_RATINGS_MEDIATYPE_VALIDATION = 2148913673;
        public const uint XONLINE_E_RATINGS_MISSING_COUNTRY_CODE_ON_GET_MEDIA_INFO = 2148913685;
        public const uint XONLINE_E_RATINGS_MISSING_MEDIA_ID_ON_GET_MEDIA_INFO = 2148913686;
        public const uint XONLINE_E_RATINGS_MSN_CONNECTION_ERROR = 2148913678;
        public const uint XONLINE_E_RATINGS_MSN_ERROR = 2148913670;
        public const uint XONLINE_E_RATINGS_MULTISETTING_ERROR = 2148913672;
        public const uint XONLINE_E_RATINGS_UNKNOWNCATALOG_ERROR = 2148913671;
        public const uint XONLINE_E_RATINGS_UNKNOWNERROR = 2148913664;
        public const uint XONLINE_E_REFLECTOR_GENERIC_ERROR = 2148914176;
        public const uint XONLINE_E_REFLECTOR_NO_TOKEN = 2148914177;
        public const uint XONLINE_E_RESOURCE_UNAVAILABLE = 2148859929;
        public const uint XONLINE_E_RESPONSE_ERROR = 2148859939;
        public const uint XONLINE_E_RPS_BASE64DECODE_FAILED = 2148917799;
        public const uint XONLINE_E_RPS_CERT_INVALID_KEY_SPEC = 2148917802;
        public const uint XONLINE_E_RPS_CERT_NOT_FOUND = 2148917770;
        public const uint XONLINE_E_RPS_CERT_WITHOUT_PRIVATE_KEY = 2148917780;
        public const uint XONLINE_E_RPS_DATA_INTEGRITY_CHECK_FAILED = 2148917778;
        public const uint XONLINE_E_RPS_DOMAIN_ATTRIBUTE_NOT_FOUND = 2148917782;
        public const uint XONLINE_E_RPS_ENCRYPTEDKEY_TOO_LARGE = 2148917777;
        public const uint XONLINE_E_RPS_FAILED_DOWNLOAD = 2148917796;
        public const uint XONLINE_E_RPS_FAILED_TO_CREATE_DOM = 2148917761;
        public const uint XONLINE_E_RPS_FAILED_TO_TLS = 2148917765;
        public const uint XONLINE_E_RPS_FILE_TOO_LARGE = 2148917772;
        public const uint XONLINE_E_RPS_HTTP_BODY_REQUIRED = 2148917789;
        public const uint XONLINE_E_RPS_INTERNAL_ERROR = 2148917762;
        public const uint XONLINE_E_RPS_INTERNAL_ERROR_CODE_UNSET_IN_EXCEPTION = 2148917803;
        public const uint XONLINE_E_RPS_INVALID_AUTHPOLICY = 2148917810;
        public const uint XONLINE_E_RPS_INVALID_COOKIE_NAME = 2148917809;
        public const uint XONLINE_E_RPS_INVALID_DATATYPE = 2148917773;
        public const uint XONLINE_E_RPS_INVALID_ENCRYPT_ALGID = 2148917811;
        public const uint XONLINE_E_RPS_INVALID_OBJECT_ID = 2148917763;
        public const uint XONLINE_E_RPS_INVALID_PROFILESCHEMA_TYPE = 2148917795;
        public const uint XONLINE_E_RPS_INVALID_SIGNATURE = 2148917775;
        public const uint XONLINE_E_RPS_INVALID_SITEID = 2148917798;
        public const uint XONLINE_E_RPS_INVALID_SLIDINGWINDOW = 2148917791;
        public const uint XONLINE_E_RPS_INVALID_TICKET_TYPE = 2148917790;
        public const uint XONLINE_E_RPS_INVALID_TIMEWINDOW = 2148917787;
        public const uint XONLINE_E_RPS_INVALIDCONFIG = 2148917769;
        public const uint XONLINE_E_RPS_INVALIDDATA = 2148917783;
        public const uint XONLINE_E_RPS_MORE_DATA = 2148917774;
        public const uint XONLINE_E_RPS_NET_CONFIG_CACHE_ALREADY_INITTED = 2148917781;
        public const uint XONLINE_E_RPS_NO_SESSION_KEY = 2148917808;
        public const uint XONLINE_E_RPS_NO_SUCH_PROFILE_ATTRIBUTE = 2148917794;
        public const uint XONLINE_E_RPS_NOT_INITIALIZED = 2148917760;
        public const uint XONLINE_E_RPS_OBJECT_ID_CANNOT_OVERWRITE = 2148917764;
        public const uint XONLINE_E_RPS_READ_ONLY = 2148917767;
        public const uint XONLINE_E_RPS_REASON_HTTPS_OR_ENCRYPTED_TICKET_NEEDED = 2148917805;
        public const uint XONLINE_E_RPS_REASON_INCORRECT_IV_BYTES = 2148917806;
        public const uint XONLINE_E_RPS_REASON_INVALID_AUTHINSTANT_DATATYPE = 2148917804;
        public const uint XONLINE_E_RPS_REASON_INVALID_AUTHMETHOD = 2148917792;
        public const uint XONLINE_E_RPS_REASON_PASSPORT_F_ERROR_ENCOUNTERED = 2148917807;
        public const uint XONLINE_E_RPS_REASON_POST_TICKET_TIMEWINDOW_EXPIRED = 2148917812;
        public const uint XONLINE_E_RPS_REASON_SLIDINGWINDOW_EXPIRED = 2148917801;
        public const uint XONLINE_E_RPS_REASON_TIMEWINDOW_EXPIRED = 2148917800;
        public const uint XONLINE_E_RPS_SAML_ASSERTION_MISSINGDATA = 2148917786;
        public const uint XONLINE_E_RPS_SERVER_CONFIG_ALREADY_INITTED = 2148917768;
        public const uint XONLINE_E_RPS_SKIBUFFER_TOO_SMALL = 2148917771;
        public const uint XONLINE_E_RPS_TICKET_CANNOT_BE_INITIALIZED_MORE_THAN_ONCE = 2148917785;
        public const uint XONLINE_E_RPS_TICKET_HAS_NO_SESSIONKEY = 2148917813;
        public const uint XONLINE_E_RPS_TICKET_NOT_INITIALIZED = 2148917784;
        public const uint XONLINE_E_RPS_XML_FILE_ERROR = 2148917766;
        public const uint XONLINE_E_RPSDATA_DATA_TOO_LARGE = 2148918272;
        public const uint XONLINE_E_RPSDATA_INVALID_DATAOFFSET = 2148918275;
        public const uint XONLINE_E_RPSDATA_INVALID_DATATYPE = 2148918273;
        public const uint XONLINE_E_RPSDATA_INVALIDDATA = 2148918276;
        public const uint XONLINE_E_RPSDATA_MORE_DATA = 2148918274;
        public const uint XONLINE_E_SA_CONTAINS_MEMBER_NAME = 2148913177;
        public const uint XONLINE_E_SA_CONTAINS_PASSWORD = 2148913168;
        public const uint XONLINE_E_SA_CONTAINS_SQ = 2148913176;
        public const uint XONLINE_E_SA_TOO_SHORT = 2148913175;
        public const uint XONLINE_E_SCS_TRANSACTION_NOT_FOUND = 2148872961;
        public const uint XONLINE_E_SERVER_CONFIG_ERROR = 2148859924;
        public const uint XONLINE_E_SERVER_ERROR = 2148859914;
        public const uint XONLINE_E_SERVICE_KEY_IMPORT_ERROR = 2148884484;
        public const uint XONLINE_E_SERVICE_KEY_NOT_FOUND = 2148884482;
        public const uint XONLINE_E_SESSION_INSUFFICIENT_PRIVILEGES = 2148880897;
        public const uint XONLINE_E_SESSION_NOT_FOUND = 2148880896;
        public const uint XONLINE_E_SIGNATURE_ACKNOWLEDGE_LICENSE_DELIVERY_ERROR = 2148905088;
        public const uint XONLINE_E_SIGNATURE_ACQUIRE_MEDIA_LICENSES_ERROR = 2148905089;
        public const uint XONLINE_E_SIGNATURE_BANNED_DIGEST = 2148904967;
        public const uint XONLINE_E_SIGNATURE_BANNED_TITLE = 2148904966;
        public const uint XONLINE_E_SIGNATURE_BANNED_USER = 2148904965;
        public const uint XONLINE_E_SIGNATURE_BANNED_XBOX = 2148904964;
        public const uint XONLINE_E_SIGNATURE_CERTIFICATE_CHAIN_INVALID = 2148904976;
        public const uint XONLINE_E_SIGNATURE_CERTIFICATE_EXPIRED = 2148904977;
        public const uint XONLINE_E_SIGNATURE_CERTIFICATE_INVALID = 2148904974;
        public const uint XONLINE_E_SIGNATURE_CERTIFICATE_USAGE_INVALID = 2148904975;
        public const uint XONLINE_E_SIGNATURE_CREATE_CERTIFICATE_ERROR = 2148905090;
        public const uint XONLINE_E_SIGNATURE_ERROR = 2148904960;
        public const uint XONLINE_E_SIGNATURE_GENERATE_LICENSE_RESPONSE_ERROR = 2148905093;
        public const uint XONLINE_E_SIGNATURE_GET_AA_INFO_ERROR = 2148905091;
        public const uint XONLINE_E_SIGNATURE_GET_BAD_AUTH_DATA = 2148904968;
        public const uint XONLINE_E_SIGNATURE_GET_SIGNED_HEADER_ERROR = 2148905092;
        public const uint XONLINE_E_SIGNATURE_LICENSE_COUNT_EXCEEDED = 2148904971;
        public const uint XONLINE_E_SIGNATURE_LICENSE_NOT_ACQUIRABLE = 2148904970;
        public const uint XONLINE_E_SIGNATURE_LICENSE_TRANSFER_BAD_COMMAND = 2148904972;
        public const uint XONLINE_E_SIGNATURE_PLAYREADY_DEVICE_CERT_EMPTY = 2148904978;
        public const uint XONLINE_E_SIGNATURE_PLAYREADY_DEVICE_CERT_FAILED = 2148904980;
        public const uint XONLINE_E_SIGNATURE_PLAYREADY_DEVICE_CERT_TOO_BIG = 2148904979;
        public const uint XONLINE_E_SIGNATURE_REFRESH_GAME_LICENSE_ERROR = 2148905094;
        public const uint XONLINE_E_SIGNATURE_SERVICE_UNAVAILABLE = 2148904969;
        public const uint XONLINE_E_SIGNATURE_TRANSFER_USER_LICENSES_ERROR = 2148905095;
        public const uint XONLINE_E_SIGNATURE_VALIDATE_CERTIFICATE_ERROR = 2148905097;
        public const uint XONLINE_E_SIGNATURE_VER_INVALID_SIGNATURE = 2148904961;
        public const uint XONLINE_E_SIGNATURE_VER_UNKNOWN_KEY_VER = 2148904962;
        public const uint XONLINE_E_SIGNATURE_VER_UNKNOWN_SIGNATURE_VER = 2148904963;
        public const uint XONLINE_E_SILENT_LOGON_DISABLED = 2148864128;
        public const uint XONLINE_E_SILENT_LOGON_NO_ACCOUNTS = 2148864129;
        public const uint XONLINE_E_SILENT_LOGON_PASSCODE_REQUIRED = 2148864130;
        public const uint XONLINE_E_SOCIAL_QUERY_GENERIC_ERROR = 2148914944;
        public const uint XONLINE_E_SQ_CONTAINS_PASSWORD = 2148913167;
        public const uint XONLINE_E_SQ_CONTAINS_SA = 2148913173;
        public const uint XONLINE_E_STAT_ACHIEVEMENTS_NOT_SUPPORTED = 2148897298;
        public const uint XONLINE_E_STAT_AVATAR_ASSETS_NOT_SUPPORTED = 2148897299;
        public const uint XONLINE_E_STAT_BAD_REQUEST = 2148896769;
        public const uint XONLINE_E_STAT_CONSOLE_LIST_EMPTY = 2148897301;
        public const uint XONLINE_E_STAT_CONSOLE_LIST_NOT_SUPPORTED = 2148897300;
        public const uint XONLINE_E_STAT_ERROR = 2148896768;
        public const uint XONLINE_E_STAT_EXCEEDED_WRITE_READ_LIMIT = 2148897290;
        public const uint XONLINE_E_STAT_EXTRA_RESULTS = 2148897296;
        public const uint XONLINE_E_STAT_INVALID_ATTACHMENT = 2148897282;
        public const uint XONLINE_E_STAT_INVALID_PROCEDURE = 2148897289;
        public const uint XONLINE_E_STAT_INVALID_TITLE_OR_LEADERBOARD = 2148896770;
        public const uint XONLINE_E_STAT_LEADERBOARD_READONLY = 2148897291;
        public const uint XONLINE_E_STAT_LEADERBOARD_WAS_RESET = 2148897281;
        public const uint XONLINE_E_STAT_MISSING_RESULTS = 2148897295;
        public const uint XONLINE_E_STAT_MUSIGMA_ARITHMETIC_OVERFLOW = 2148897292;
        public const uint XONLINE_E_STAT_MUSIGMA_NO_GAME_MODE = 2148897294;
        public const uint XONLINE_E_STAT_NOT_ENOUGH_PARAMETERS = 2148897288;
        public const uint XONLINE_E_STAT_PERMISSION_DENIED = 2148897280;
        public const uint XONLINE_E_STAT_READ_NO_SPEC = 2148897293;
        public const uint XONLINE_E_STAT_SERVER_NOT_FOUND = 2148897297;
        public const uint XONLINE_E_STAT_SET_FAILED_0 = 2148897024;
        public const uint XONLINE_E_STAT_TOO_MANY_PARAMETERS = 2148897284;
        public const uint XONLINE_E_STAT_TOO_MANY_PROCEDURES = 2148897285;
        public const uint XONLINE_E_STAT_TOO_MANY_SPECS = 2148896772;
        public const uint XONLINE_E_STAT_TOO_MANY_STATS = 2148896773;
        public const uint XONLINE_E_STAT_USER_NOT_FOUND = 2148896771;
        public const uint XONLINE_E_STORAGE_ACCESS_DENIED = 2148909058;
        public const uint XONLINE_E_STORAGE_CANNOT_FIND_PATH = 2148909062;
        public const uint XONLINE_E_STORAGE_DATABASE_ERROR = 2148909074;
        public const uint XONLINE_E_STORAGE_ERROR = 2148909056;
        public const uint XONLINE_E_STORAGE_FILE_ALREADY_EXISTS = 2148909073;
        public const uint XONLINE_E_STORAGE_FILE_IS_ELSEWHERE = 2148909063;
        public const uint XONLINE_E_STORAGE_FILE_IS_TOO_BIG = 2148909059;
        public const uint XONLINE_E_STORAGE_FILE_NOT_FOUND = 2148909060;
        public const uint XONLINE_E_STORAGE_INVALID_ACCESS_TOKEN = 2148909061;
        public const uint XONLINE_E_STORAGE_INVALID_FACILITY = 2148909065;
        public const uint XONLINE_E_STORAGE_INVALID_PATH = 2148909076;
        public const uint XONLINE_E_STORAGE_INVALID_REQUEST = 2148909057;
        public const uint XONLINE_E_STORAGE_INVALID_STORAGE_PATH = 2148909064;
        public const uint XONLINE_E_STORAGE_QUOTA_EXCEEDED = 2148909069;
        public const uint XONLINE_E_STORAGE_SYNC_TIME_SKEW = 2148909067;
        public const uint XONLINE_E_STORAGE_SYNC_TIME_SKEW_LOCALTIME = 2148909068;
        public const uint XONLINE_E_STORAGE_TITLE_FILES_NOT_FOUND = 2148909077;
        public const uint XONLINE_E_STORAGE_UNKNOWN_DOMAIN = 2148909066;
        public const uint XONLINE_E_STRING_ADD_STRING_ERROR = 2148888838;
        public const uint XONLINE_E_STRING_ERROR = 2148888832;
        public const uint XONLINE_E_STRING_GET_STRING_ERROR = 2148888839;
        public const uint XONLINE_E_STRING_INVALID_LANGUAGE = 2148888836;
        public const uint XONLINE_E_STRING_LANGUAGE_DUPLICATE = 2148888837;
        public const uint XONLINE_E_STRING_LOAD_STRING_ERROR = 2148888840;
        public const uint XONLINE_E_STRING_LOG_STRING_ERROR = 2148888841;
        public const uint XONLINE_E_STRING_NO_DEFAULT_STRING = 2148888835;
        public const uint XONLINE_E_STRING_OFFENSIVE_TEXT = 2148888834;
        public const uint XONLINE_E_STRING_TITLE_ID_ERROR = 2148888842;
        public const uint XONLINE_E_STRING_TOO_LONG = 2148888833;
        public const uint XONLINE_E_STRING_VET_STRING_ERROR = 2148888843;
        public const uint XONLINE_E_STS_CONFIGURATION_ERROR = 2149003265;
        public const uint XONLINE_E_STS_ERROR = 2149003264;
        public const uint XONLINE_E_STS_INVALID_ARGUMENT = 2149003266;
        public const uint XONLINE_E_STS_INVALID_PLATFORM_TYPE = 2149003267;
        public const uint XONLINE_E_SUPPORT_ERROR = 2148889344;
        public const uint XONLINE_E_SVCTUNNEL_ERROR = 2148881536;
        public const uint XONLINE_E_SVCTUNNEL_FRIEND_REQUEST_ERROR = 2148881544;
        public const uint XONLINE_E_SVCTUNNEL_GAME_INVITE_ERROR = 2148881545;
        public const uint XONLINE_E_SVCTUNNEL_GET_FRIENDS_ERROR = 2148881542;
        public const uint XONLINE_E_SVCTUNNEL_GET_GAMERTAG_ERROR = 2148881540;
        public const uint XONLINE_E_SVCTUNNEL_GET_MESSAGES_ERROR = 2148881543;
        public const uint XONLINE_E_SVCTUNNEL_GET_USER_ID_ERROR = 2148881541;
        public const uint XONLINE_E_SVCTUNNEL_GET_USER_INFO_ERROR = 2148881538;
        public const uint XONLINE_E_SVCTUNNEL_MUTE_USER_ERROR = 2148881546;
        public const uint XONLINE_E_SVCTUNNEL_SEND_USER_FEEDBACK_ERROR = 2148881539;
        public const uint XONLINE_E_SVCTUNNEL_SET_NOTIFICATION_ERROR = 2148881547;
        public const uint XONLINE_E_SVCTUNNEL_TIMEOUT = 2148881537;
        public const uint XONLINE_E_TASK_ABORTED_BY_DUPLICATE = 2148859922;
        public const uint XONLINE_E_TASK_BUSY = 2148859913;
        public const uint XONLINE_E_TASK_THROTTLED = 2148859921;
        public const uint XONLINE_E_TEAMS_DESCRIPTION_CONTAINS_BAD_WORDS = 2148868366;
        public const uint XONLINE_E_TEAMS_INSUFFICIENT_PRIVILEGES = 2148868364;
        public const uint XONLINE_E_TEAMS_MEMBER_PENDING = 2148868354;
        public const uint XONLINE_E_TEAMS_MOTTO_CONTAINS_BAD_WORDS = 2148868367;
        public const uint XONLINE_E_TEAMS_NAME_CONTAINS_BAD_WORDS = 2148868365;
        public const uint XONLINE_E_TEAMS_NO_ADMIN = 2148868370;
        public const uint XONLINE_E_TEAMS_NO_TASK = 2148868360;
        public const uint XONLINE_E_TEAMS_NOT_A_MEMBER = 2148868369;
        public const uint XONLINE_E_TEAMS_SELF = 2148868359;
        public const uint XONLINE_E_TEAMS_SERVER_BUSY = 2148868352;
        public const uint XONLINE_E_TEAMS_TEAM_ALREADY_EXISTS = 2148868362;
        public const uint XONLINE_E_TEAMS_TEAM_FULL = 2148868353;
        public const uint XONLINE_E_TEAMS_TEAM_NOT_FOUND = 2148868363;
        public const uint XONLINE_E_TEAMS_TOO_MANY_REQUESTS = 2148868355;
        public const uint XONLINE_E_TEAMS_TOO_MANY_TEAMS = 2148868361;
        public const uint XONLINE_E_TEAMS_URL_CONTAINS_BAD_WORDS = 2148868368;
        public const uint XONLINE_E_TEAMS_USER_ALREADY_EXISTS = 2148868356;
        public const uint XONLINE_E_TEAMS_USER_NOT_FOUND = 2148868357;
        public const uint XONLINE_E_TEAMS_USER_TEAMS_FULL = 2148868358;
        public const uint XONLINE_E_TESTFD_API_NOT_AVAILABLE_ERROR = 2148914689;
        public const uint XONLINE_E_TESTFD_BAD_COMMAND_ERROR = 2148914695;
        public const uint XONLINE_E_TESTFD_BAD_PARTITION_ERROR = 2148914697;
        public const uint XONLINE_E_TESTFD_BAD_PARTITION_HASH_TYPE_ERROR = 2148914698;
        public const uint XONLINE_E_TESTFD_COMMAND_TIMEOUT_ERROR = 2148914696;
        public const uint XONLINE_E_TESTFD_GENERIC_ERROR = 2148914688;
        public const uint XONLINE_E_TESTFD_INVALID_COLUMN_ERROR = 2148914692;
        public const uint XONLINE_E_TESTFD_INVALID_DATABASE_ERROR = 2148914690;
        public const uint XONLINE_E_TESTFD_INVALID_SQL_ERROR = 2148914694;
        public const uint XONLINE_E_TESTFD_INVALID_TABLE_ERROR = 2148914691;
        public const uint XONLINE_E_TESTFD_INVALID_VALUE_ERROR = 2148914693;
        public const uint XONLINE_E_TESTFD_SQL_NO_VALUE_ERROR = 2148914699;
        public const uint XONLINE_E_TOKEN_CATEGORY_READ_ONLY_PROPERTY_CHANGE = 2148876819;
        public const uint XONLINE_E_TOKEN_DUPLICATE_CATEGORY_NAME = 2148876817;
        public const uint XONLINE_E_TOKEN_EOF_REACHED_BEFORE_ALL_TOKENS_RETRIEVED = 2148876807;
        public const uint XONLINE_E_TOKEN_EXPIRED_TOKEN_CATEGORY = 2148876850;
        public const uint XONLINE_E_TOKEN_FILE_COULD_NOT_BE_DECRYPTED = 2148876806;
        public const uint XONLINE_E_TOKEN_FILE_NOT_FOUND = 2148876801;
        public const uint XONLINE_E_TOKEN_INVALID_START_PARAMETER = 2148876803;
        public const uint XONLINE_E_TOKEN_JOB_DATABASE_ERROR = 2148876832;
        public const uint XONLINE_E_TOKEN_JOB_NOT_FOUND = 2148876833;
        public const uint XONLINE_E_TOKEN_JOB_NOT_IN_REQUIRED_STATE = 2148876808;
        public const uint XONLINE_E_TOKEN_LOAD_SCS_ERROR = 2148876816;
        public const uint XONLINE_E_TOKEN_MALFORMED_5X5_TOKEN_CODE_FOUND = 2148876805;
        public const uint XONLINE_E_TOKEN_MALFORMED_TOKEN_ENTRY_FOUND = 2148876804;
        public const uint XONLINE_E_TOKEN_NO_CATEGORY_FOUND = 2148876818;
        public const uint XONLINE_E_TOKEN_NOT_YET_REDEEMABLE = 2148876809;
        public const uint XONLINE_E_TOKEN_REQUESTED_TOKENS_EXCEEDS_MAXIMUM_ALLOWABLE = 2148876802;
        public const uint XONLINE_E_TOKEN_SEQUENCE_NUMBER_INVALID_INDEX = 2148876849;
        public const uint XONLINE_E_TOKEN_UNKNOWN_ERROR = 2148876800;
        public const uint XONLINE_E_TRACKED_API_DATABASE_ERROR = 2148875521;
        public const uint XONLINE_E_TRACKED_API_DUPLICATE_TRACKING_GUID = 2148875520;
        public const uint XONLINE_E_UNSUPPORTED_METHOD = 2148859928;
        public const uint XONLINE_E_UODB_DUPLICATE_SUBSCRIPTION_INFO = 2148884486;
        public const uint XONLINE_E_UODB_INEXISTENT_OFFER_ID = 2148884483;
        public const uint XONLINE_E_UODB_INEXISTENT_TITLE_ID = 2148884481;
        public const uint XONLINE_E_UODB_INVALID_SUBSCRIPTION_PAYMENT_TYPE = 2148884485;
        public const uint XONLINE_E_UODB_KEY_ALREADY_EXISTS = 2148884480;
        public const uint XONLINE_E_UODB_KEY_NOT_FOUND = 2148884482;
        public const uint XONLINE_E_UPS_ERROR = 2148913408;
        public const uint XONLINE_E_UPS_GET_PROFILE_ERROR = 2148913410;
        public const uint XONLINE_E_UPS_TIMEOUT_ERROR = 2148913409;
        public const uint XONLINE_E_UPS_UPDATE_PROFILE_ERROR = 2148913411;
        public const uint XONLINE_E_USER_NOT_LOGGED_ON = 2148859907;
        public const uint XONLINE_E_USER_NOT_PRESENT = 2148859917;
        public const uint XONLINE_E_WCMUSIC_ACCOUNT_INVALID_USER = 2148999184;
        public const uint XONLINE_E_WCMUSIC_ACCOUNT_NOT_ELIGIBLE = 2148999175;
        public const uint XONLINE_E_WCMUSIC_ACCOUNT_NOT_PROVISIONED = 2148999176;
        public const uint XONLINE_E_WCMUSIC_ACCOUNT_REQUIRES_MANAGEMENT = 2148999183;
        public const uint XONLINE_E_WCMUSIC_ACCOUNT_SUSPENDED = 2148999169;
        public const uint XONLINE_E_WCMUSIC_DUPLICATE_EXTERNAL_ORDER_ID = 2148999179;
        public const uint XONLINE_E_WCMUSIC_INSUFFICIENT_BALANCE = 2148999170;
        public const uint XONLINE_E_WCMUSIC_INVALID_ARGUMENT = 2148999177;
        public const uint XONLINE_E_WCMUSIC_INVALID_RETAILER_ID = 2148999181;
        public const uint XONLINE_E_WCMUSIC_ITEM_ALREADY_PURCHASED = 2148999171;
        public const uint XONLINE_E_WCMUSIC_ITEM_UNAVAILABLE = 2148999172;
        public const uint XONLINE_E_WCMUSIC_MAX_CONSUMPTION_EXCEEDED = 2148999182;
        public const uint XONLINE_E_WCMUSIC_MUSICNET_COMMUNICATION_ERROR = 2148999186;
        public const uint XONLINE_E_WCMUSIC_MUSICNET_ERROR = 2148999185;
        public const uint XONLINE_E_WCMUSIC_NOT_SUSPENDED_BY_PARTNER = 2148999174;
        public const uint XONLINE_E_WCMUSIC_RPS_TICKET_EXPIRED = 2148999180;
        public const uint XONLINE_E_WCMUSIC_TEST_FAULT = 2148999168;
        public const uint XONLINE_E_WCMUSIC_TOO_MANY_ITEMS = 2148999173;
        public const uint XONLINE_E_WCMUSIC_TRANSACTION_PENDING = 2148999178;
        public const uint XONLINE_E_WMIS_PURCHASE_DETAILS_NULL = 2148874241;
        public const uint XONLINE_E_WMIS_UNKNOWN_ERROR = 2148874240;
        public const uint XONLINE_E_WMIS_UNKNOWN_ERROR_CONSOLE = 2148874242;
        public const uint XONLINE_E_XBOXLIVETOKEN_CERT_CONFIG = 2149056544;
        public const uint XONLINE_E_XBOXLIVETOKEN_INVALID_CLIENTTHUMBPRINT = 2149056517;
        public const uint XONLINE_E_XBOXLIVETOKEN_INVALID_ISSUER = 2149056513;
        public const uint XONLINE_E_XBOXLIVETOKEN_INVALID_PLATFORMTYPE = 2149056518;
        public const uint XONLINE_E_XBOXLIVETOKEN_INVALID_STATEMENT_COUNT = 2149056514;
        public const uint XONLINE_E_XBOXLIVETOKEN_INVALID_STATEMENT_TYPE = 2149056515;
        public const uint XONLINE_E_XBOXLIVETOKEN_INVALID_THUMBPRINT = 2149056516;
        public const uint XONLINE_E_XBOXLIVETOKEN_INVALID_VERSION = 2149056512;
        public const uint XONLINE_E_XCRYPTO_CACHE_ERROR = 2148881667;
        public const uint XONLINE_E_XCRYPTO_CONFIG_ERROR = 2148881665;
        public const uint XONLINE_E_XCRYPTO_ERROR = 2148881664;
        public const uint XONLINE_E_XCRYPTO_KEY_ERROR = 2148881666;
        public const uint XONLINE_E_XCRYPTO_NCIPHER_ERROR = 2148881669;
        public const uint XONLINE_E_XCRYPTO_REQUEST_FAILED = 2148881668;
        public const uint XONLINE_E_XTOU_GETLANGUAGESFORCOUNTRY_GENERIC_ERROR = 2148915459;
        public const uint XONLINE_E_XTOU_GETTERMSOFUSE_GENERIC_ERROR = 2148915456;
        public const uint XONLINE_E_XTOU_GETTERMSOFUSE_URL_GET_FILE_ERROR = 2148915458;
        public const uint XONLINE_E_XTOU_GETTERMSOFUSE_URL_PARSE_ERROR = 2148915457;
        public const uint XONLINE_I_ACCOUNTS_GET_USER_TENURE_NO_NEXT_MILESTONE = 1392798;
        public const uint XONLINE_S_ACCOUNTS_NAME_TAKEN = 16;
        public const uint XONLINE_S_ACCOUNTS_SWITCH_USER_COUNTRY_SAME_COUNTRY = 1392846;
        public const uint XONLINE_S_ARBITRATION_DIFFERENT_RESULTS_DETECTED = 1421810;
        public const uint XONLINE_S_ARBITRATION_INVALID_USER_SPECIFIED = 1421809;
        public const uint XONLINE_S_ARBITRATION_INVALID_XBOX_SPECIFIED = 1421808;
        public const uint XONLINE_S_COMP_CHECKIN_EVENT_SCORED = 1401353;
        public const uint XONLINE_S_COMP_SERVICE_OUTAGE = 15;
        public const uint XONLINE_S_DMP_NO_CANCELABLE_TRANSACTIONS = 1389066;
        public const uint XONLINE_S_DMP_NO_RETRYABLE_REWARD = 1389068;
        public const uint XONLINE_S_DMP_RETRY_INTERVAL_EXCEEDED = 1389071;
        public const uint XONLINE_S_DMP_TRANSACTION_ALREADY_CANCELLED = 1389065;
        public const uint XONLINE_S_FINBUS_NO_RETRYABLE_TRANSACTIONS = 1391616;
        public const uint XONLINE_S_FINBUS_RETRY_INTERVAL_EXCEEDED = 1391620;
        public const uint XONLINE_S_FSE_CACHE_ENTRY_FOUND = 1397650;
        public const uint XONLINE_S_LOGON_COMMIT_USER_CHANGE = 1381360;
        public const uint XONLINE_S_LOGON_CONNECTION_ESTABLISHED = 1380592;
        public const uint XONLINE_S_LOGON_USER_CHANGE_COMPLETE = 1381361;
        public const uint XONLINE_S_LOGON_USER_HAS_MESSAGE = 1381104;
        public const uint XONLINE_S_LOGON_USER_MESSAGE_ENUMERATION_NEEDED = 1381105;
        public const uint XONLINE_S_MESSAGE_PENDING_SYNC = 1399297;
        public const uint XONLINE_S_MUSICNET_NO_RETRYABLE_PURCHASE_ASSETS = 1390337;
        public const uint XONLINE_S_NO_RETRYABLE_SCS_PURCHASES = 1389312;
        public const uint XONLINE_S_NOTIFICATION_NO_PEER_SUBSCRIBE = 1384462;
        public const uint XONLINE_S_OFFERING_NEW_CONTENT = 1388801;
        public const uint XONLINE_S_OFFERING_NO_NEW_CONTENT = 1388802;
        public const uint XONLINE_S_STAT_CAN_UPLOAD_ATTACHMENT = 1413635;
        public const uint XONLINE_S_STORAGE_FILE_NOT_MODIFIED = 1425427;
        public const uint XONLINE_S_USER_OWNS_NO_LICENSES = 1388575;
        public const uint XSUPP_E_EMAIL_ALREADY_SENT = 2148900864;
        public const uint XSUPP_E_INVALID_EMAIL_SENT_DATE = 2148900866;
        public const uint XSUPP_E_INVALID_NEW_PASSPORT_MEMBER_NAME = 2148900877;
        public const uint XSUPP_E_INVALID_PUID_OR_SUB = 2148900865;
        public const uint XSUPP_E_INVALID_SUBSCRIPTION_CODE = 2148900867;
        public const uint XSUPP_E_LICENSE_INCREMENT_GENERIC_ERROR = 2148900870;
        public const uint XSUPP_E_MULTIPLE_CREDENTIALS_FOR_THIS_MEMBER_NAME = 2148900878;
        public const uint XSUPP_E_NEW_PASSPORT_MEMBER_NAME_MISMATCH = 2148900876;
        public const uint XSUPP_E_NO_NEW_PASSPORT_SPECIFIED = 2148900872;
        public const uint XSUPP_E_OWNER_PASSPORT_SWAP = 2148900874;
        public const uint XSUPP_E_OWNER_PASSPORT_SWAP_CHILD_ONLY = 2148900871;
        public const uint XSUPP_E_TOO_MANY_EXTRA_LICENSES = 2148900869;
        public const uint XSUPP_E_USER_DATE_OF_BIRTH_SWAP = 2148900875;
        public const uint XSUPP_E_USER_DOES_NOT_OWN_OFFER = 2148900868;
        public const uint XSUPP_E_USER_MACHINE_NOT_FOUND = 2148900880;
        public const uint XSUPP_E_USER_NOT_FOUND = 2148900879;
        public const uint XSUPP_E_USER_PASSPORT_SWAP = 2148900873;
        public const uint XSUPP_E_USER_UNIQUE_MACHINE_NOT_FOUND = 2148900881;
    }

    /// <summary>
    /// Custom Error buckets for PDLC/XBL/XBLM errors
    /// Taken from dev code: $DEPOT$\product\Source\Pdlc\PdlcServiceLibrary\Diagnostics\PdlcServiceErrorMessage.cs
    /// </summary>
    public enum ServiceErrorBucket : uint
    {
        /// <summary>
        ///  Unknown errors/buckets.
        /// </summary>
        Unknown = 0,

        /// <summary>
        ///  Errors that indicates a temporary server error.
        /// </summary>
        TryAgainLater = 1,

        /// <summary>
        ///  Errors that indicates a stale cache on client side.
        /// </summary>
        TryAgainRefresh = 2,

        /// <summary>
        ///  Errors that indicates a problem with the current gamer account.
        /// </summary>
        AccountSetting = 3,

        /// <summary>
        ///  Errors that indicates not enough points for a purchase.
        /// </summary>
        NotEnoughPoints = 4,

        /// <summary>
        ///  Errors that indicates the offer to purchase is not valid for the gamer.
        /// </summary>
        OfferNotPurchasable = 5,

        /// <summary>
        ///  Errors that indicates one or more input parameters from XNA client are invalid .
        /// </summary>
        InputArguments = 6,

        /// <summary>
        ///  Errors that indicates at least one asset to consume is invalid, or low balance.
        /// </summary>
        AssetBalance = 7,        
        
        /// <summary>
        ///  Errors that indicate the token cannot be redeemed.
        /// </summary>
        TokenNotRedeemable = 8,
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\PDLC.Test\PDLC.Test.GetAssets\GetAssets_ValidResponses.cs ===
﻿using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Net;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;

using LiveNew.Test;

using LiveN.Test;
using LiveN.Test.Common;
using LiveN.Test.Content;
using LiveN.Test.Users;

namespace PDLC.Tests
{
    /// <summary>
    /// GetAssetsTests with valid responses
    /// </summary>   
    public partial class GetAssetsTests
    {
        [TestMethod]
        [Owner("srkalyan")]
        [Description("GetAssets for double purchase of AssetID 61002001")]
        public void GetAssetsTests_VerifyResponse_unSigned_Double_Purchase_One_Asset()
        {
            PurchaseClientRequest req;
            PurchaseClientResponse res;
            int asset_quantity;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002001().GetOfferContext(Locales.en_US);
            int url_count = offer.MediaInstanceURLs.Count;
            List<string> media_urls = new List<string>();

            foreach (string url in offer.MediaInstanceURLs)
            {
                media_urls.Add(url);
            }

            req = new PurchaseClientRequest(user.Email, user.Password);
            req.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            res = req.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, res.StatusCode, "First purchase failed. StatusCode is not correct");
            asset_quantity = (int)res.BodyWrapper.AssetBalance.Quantity;

            req.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            res = req.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, res.StatusCode, "Second purchase failed. StatusCode is not correct");            

            GetAssetsClientRequest getAsset_request;
            GetAssetsClientResponse getAsset_response;

            getAsset_request = new GetAssetsClientRequest(user.Email, user.Password);
            getAsset_request.QueryParameters.TitleId = offer.TitleId.ToString();
            getAsset_request.QueryParameters.SignAssets = "false";

            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, getAsset_response.StatusCode, "StatusCode is not correct");
            Assert.IsNotNull(getAsset_response.BodyWrapper.mediaAssets, "MediaAssets is NULL");
            
            Assert.AreEqual(1, getAsset_response.BodyWrapper.mediaAssets.Count, "Asset count is not equal to 1");
            Assert.AreEqual((offer.AssetQuantity * 2), getAsset_response.BodyWrapper[offer.AssetId].Quantity, "Asset returned do not match the expected values, verify the response");
            Assert.IsNotNull(getAsset_response.BodyWrapper[offer.AssetId].MediaInstanceURLs, "Event though the quanity is correct, it's not returning the MediaInstanceURLs within the response. POSSALE ISSUE: MarketPlace / Fast request is failing (http://le-xblob-dev02:12030/marketplacecatalog/v1/product/en-us?tiers=2&producttypes=59)");
            Assert.AreEqual(offer.MediaInstanceURLs.Count, getAsset_response.BodyWrapper[offer.AssetId].MediaInstanceURLs.Count, "AssetID 61002001 Media instance URL count do not match.");
            Assert.AreEqual(0, getAsset_response.BodyWrapper[offer.AssetId].MediaInstanceURLs.Except(offer.MediaInstanceURLs).Count(), "AssetID 61002001 Media instance URLs do not match");
        }

        [TestMethod]
        [Owner("srkalyan")]
        [Description("GetAssets for double purchase of AssetID 61002002")]
        public void GetAssetsTests_VerifyResponse_unSigned_Double_Purchase_One_Asset_In_Two_Offers()
        {
            PurchaseClientRequest req;
            PurchaseClientResponse res;
            int asset_quantity;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002002().GetOfferContext(Locales.en_US);

            req = new PurchaseClientRequest(user.Email, user.Password);
            req.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            res = req.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, res.StatusCode, "First purchase failed. StatusCode is not correct");
            asset_quantity = (int) res.BodyWrapper.AssetBalance.Quantity;

            req.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            res = req.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, res.StatusCode, "Second purchase failed. StatusCode is not correct");

            GetAssetsClientRequest getAsset_request;
            GetAssetsClientResponse getAsset_response;

            getAsset_request = new GetAssetsClientRequest(user.Email, user.Password);
            getAsset_request.QueryParameters.TitleId = offer.TitleId.ToString();
            getAsset_request.QueryParameters.SignAssets = "false";

            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, getAsset_response.StatusCode, "StatusCode is not correct");
            Assert.IsNotNull(getAsset_response.BodyWrapper.mediaAssets, "MediaAssets is NULL");

            Assert.AreEqual(1, getAsset_response.BodyWrapper.mediaAssets.Count, "Asset count is not equal to 1");
            Assert.IsNotNull(getAsset_response.BodyWrapper[offer.AssetId].MediaInstanceURLs, "Event though the quanity is correct, it's not returning the MediaInstanceURLs within the response. POSSALE ISSUE: MarketPlace / Fast request is failing (http://le-xblob-dev02:12030/marketplacecatalog/v1/product/en-us?tiers=2&producttypes=59)");
            Assert.AreEqual((offer.AssetQuantity * 2), getAsset_response.BodyWrapper[offer.AssetId].Quantity, "Asset returned do not match the expected values, verify the response");
            Assert.AreEqual(offer.MediaInstanceURLs.Count, getAsset_response.BodyWrapper[offer.AssetId].MediaInstanceURLs.Count, "AssetID 61002002 Media instance URL count do not match.");
            Assert.AreEqual(0, getAsset_response.BodyWrapper[offer.AssetId].MediaInstanceURLs.Except(offer.MediaInstanceURLs).Count(), "AssetID 61002002 Media instance URLs do not match");
        }
        
        [TestMethod]
        [Owner("srkalyan")]
        [Description("GetAssets for purchase of AssetID 61002001 and 61002002")]
        public void GetAssetsTests_VerifyResponse_unSigned_Purchase_Two_Assets()
        {
            PurchaseClientRequest req;
            PurchaseClientResponse res;
            int asset_quantity;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer1 = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002002().GetOfferContext(Locales.en_US);
            asset_quantity = (int) offer1.AssetQuantity;

            req = new PurchaseClientRequest(user.Email, user.Password);
            req.RequestContent.CreatePurchaseRequest(offer1, PurchasePaymentType.Points);
            res = req.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, res.StatusCode, "First purchase failed. StatusCode is not correct");  

            OfferContext offer2 = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002001().GetOfferContext(Locales.en_US);
            asset_quantity += (int)offer2.AssetQuantity;
            req.RequestContent.CreatePurchaseRequest(offer2, PurchasePaymentType.Points);
            res = req.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, res.StatusCode, "Second purchase failed. StatusCode is not correct");

            GetAssetsClientRequest getAsset_request;
            GetAssetsClientResponse getAsset_response;

            getAsset_request = new GetAssetsClientRequest(user.Email, user.Password);
            getAsset_request.QueryParameters.TitleId = offer1.TitleId.ToString();
            getAsset_request.QueryParameters.SignAssets = "false";

            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, getAsset_response.StatusCode, "StatusCode is not correct");
            Assert.IsNotNull(getAsset_response.BodyWrapper.mediaAssets, "MediaAssets is NULL");

            Assert.AreEqual(2, getAsset_response.BodyWrapper.mediaAssets.Count, "Asset count is not equal to 2");

            //Verify offer1 Asset purchased
            Assert.IsNotNull(getAsset_response.BodyWrapper[offer1.AssetId], "AssetID 61002001 is not present in the list");
            Assert.AreEqual(offer1.AssetQuantity, getAsset_response.BodyWrapper[offer1.AssetId].Quantity, "AssetID 61002001 Quantity do not match");
            Assert.IsNotNull(getAsset_response.BodyWrapper[offer2.AssetId].MediaInstanceURLs, "Event though the quanity is correct, it's not returning the MediaInstanceURLs within the response. POSSALE ISSUE: MarketPlace / Fast request is failing (http://le-xblob-dev02:12030/marketplacecatalog/v1/product/en-us?tiers=2&producttypes=59).");
            Assert.AreEqual(offer1.MediaInstanceURLs.Count, getAsset_response.BodyWrapper[offer1.AssetId].MediaInstanceURLs.Count, "AssetID 61002001 Media instance URL count do not match.");
            Assert.AreEqual(0, getAsset_response.BodyWrapper[offer1.AssetId].MediaInstanceURLs.Except(offer1.MediaInstanceURLs).Count(), "AssetID 61002001 Media instance URLs do not match");

            //Verify offer2 Asset purchased
            Assert.IsNotNull(getAsset_response.BodyWrapper[offer2.AssetId], "AssetID 61002002 is not present in the list");
            Assert.AreEqual(offer2.AssetQuantity, getAsset_response.BodyWrapper[offer2.AssetId].Quantity, "AssetID 61002002 Quantity do not match");
            Assert.AreEqual(offer2.MediaInstanceURLs.Count, getAsset_response.BodyWrapper[offer2.AssetId].MediaInstanceURLs.Count, "AssetID 61002002 Media instance URL count do not match");
            Assert.AreEqual(0, getAsset_response.BodyWrapper[offer2.AssetId].MediaInstanceURLs.Except(offer2.MediaInstanceURLs).Count(), "AssetID 61002002 Media instance URLs do not match");
        }

        [TestMethod]
        [Owner("srkalyan")]
        [Description("GetAssets for purchase 1 durable and 1 consumable AssetID")]
        public void GetAssetsTests_VerifyResponse_unSigned_Purchase_One_Asset_And_One_Durable()
        {
            PurchaseClientRequest req;
            PurchaseClientResponse res;
            int asset_quantity;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);

            //Durables
            OfferContext offer1 = MobileGameContentOffers61.GetContentOffer_Category_12001_61000401().GetOfferContext(Locales.en_US);
            asset_quantity = (int)offer1.AssetQuantity;

            req = new PurchaseClientRequest(user.Email, user.Password);
            req.RequestContent.CreatePurchaseRequest(offer1, PurchasePaymentType.Points);
            res = req.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, res.StatusCode, "First durable purchase failed. StatusCode is not correct");

            //Consumables
            OfferContext offer2 = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002002().GetOfferContext(Locales.en_US);
            asset_quantity += (int)offer2.AssetQuantity;
            req.RequestContent.CreatePurchaseRequest(offer2, PurchasePaymentType.Points);
            res = req.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, res.StatusCode, "Second purchase failed. StatusCode is not correct");

            GetAssetsClientRequest getAsset_request;
            GetAssetsClientResponse getAsset_response;

            getAsset_request = new GetAssetsClientRequest(user.Email, user.Password);
            getAsset_request.QueryParameters.TitleId = offer2.TitleId.ToString();
            getAsset_request.QueryParameters.SignAssets = "false";

            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, getAsset_response.StatusCode, "StatusCode is not correct");
            Assert.IsNotNull(getAsset_response.BodyWrapper.mediaAssets, "Event though the quanity is correct, it's not returning the MediaInstanceURLs within the response.");
            Assert.AreEqual(1, getAsset_response.BodyWrapper.mediaAssets.Count, "Asset count is not equal to 1");
            Assert.AreEqual(offer2.AssetQuantity, getAsset_response.BodyWrapper[offer2.AssetId].Quantity, "Asset returned do not match the expected values, verify the response");
            Assert.IsNotNull(getAsset_response.BodyWrapper[offer2.AssetId].MediaInstanceURLs, "Event though the quanity is correct, it's not returning the MediaInstanceURLs within the response. POSSALE ISSUE: MarketPlace / Fast request is failing (http://le-xblob-dev02:12030/marketplacecatalog/v1/product/en-us?tiers=2&producttypes=59)");
            Assert.AreEqual(offer2.MediaInstanceURLs.Count, getAsset_response.BodyWrapper[offer2.AssetId].MediaInstanceURLs.Count, "AssetID 61002002 Media instance URL count do not match.");
            Assert.AreEqual(0, getAsset_response.BodyWrapper[offer2.AssetId].MediaInstanceURLs.Except(offer2.MediaInstanceURLs).Count(), "AssetID 61002002 Media instance URLs do not match");
        }

        [TestMethod]
        [Owner("srkalyan")]
        [Description("GetAssets for purchase 1 durable and 1 consumable AssetID using silver account ")]
        public void GetAssetsTests_VerifyResponse_unSigned_Silver_Purchase_One_Asset_And_One_Durable()
        {
            PurchaseClientRequest req;
            PurchaseClientResponse res;
            int asset_quantity;
            UserAccount user = new UserAccount(XblLiveUserTier.Silver, true);

            //Durable
            OfferContext offer1 = MobileGameContentOffers61.GetContentOffer_Category_12001_61000401().GetOfferContext(Locales.en_US);
            asset_quantity = (int)offer1.AssetQuantity;

            req = new PurchaseClientRequest(user.Email, user.Password);
            req.RequestContent.CreatePurchaseRequest(offer1, PurchasePaymentType.Points);
            res = req.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, res.StatusCode, "First durable purchase failed. StatusCode is not correct");

            //Consumable
            OfferContext offer2 = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002002().GetOfferContext(Locales.en_US);
            asset_quantity += (int)offer2.AssetQuantity;
            req.RequestContent.CreatePurchaseRequest(offer2, PurchasePaymentType.Points);
            res = req.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, res.StatusCode, "Second purchase failed. StatusCode is not correct");

            GetAssetsClientRequest getAsset_request;
            GetAssetsClientResponse getAsset_response;

            getAsset_request = new GetAssetsClientRequest(user.Email, user.Password);
            getAsset_request.QueryParameters.TitleId = offer2.TitleId.ToString();
            getAsset_request.QueryParameters.SignAssets = "false";

            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, getAsset_response.StatusCode, "StatusCode is not correct");
            Assert.IsNotNull(getAsset_response.BodyWrapper.mediaAssets, "MediaAssets is NULL");

            Assert.AreEqual(1, getAsset_response.BodyWrapper.mediaAssets.Count, "Asset count is not equal to 1");
            Assert.AreEqual(offer2.AssetQuantity, getAsset_response.BodyWrapper[offer2.AssetId].Quantity, "Asset returned do not match the expected values, verify the response");
            Assert.IsNotNull(getAsset_response.BodyWrapper[offer2.AssetId].MediaInstanceURLs, "Event though the quanity is correct, it's not returning the MediaInstanceURLs within the response. POSSALE ISSUE: MarketPlace / Fast request is failing (http://le-xblob-dev02:12030/marketplacecatalog/v1/product/en-us?tiers=2&producttypes=59)");
            Assert.AreEqual(offer2.MediaInstanceURLs.Count, getAsset_response.BodyWrapper[offer2.AssetId].MediaInstanceURLs.Count, "AssetID 61002002 Media instance URL count do not match");
            Assert.AreEqual(0, getAsset_response.BodyWrapper[offer2.AssetId].MediaInstanceURLs.Except(offer2.MediaInstanceURLs).Count(), "AssetID 61002002 Media instance URLs do not match");            
        }

        [TestMethod]
        [Owner("srkalyan")]
        [Description("GetAssets for purchase only durableusing silver account ")]
        public void GetAssetsTests_VerifyResponse_unSigned_Silver_Purchase_Only_One_Durable()
        {
            PurchaseClientRequest req;
            PurchaseClientResponse res;
            int asset_quantity;
            UserAccount user = new UserAccount(XblLiveUserTier.Silver, true);
            OfferContext offer1 = MobileGameContentOffers61.GetContentOffer_Category_12001_61000401().GetOfferContext(Locales.en_US);
            asset_quantity = (int)offer1.AssetQuantity;

            req = new PurchaseClientRequest(user.Email, user.Password);
            req.RequestContent.CreatePurchaseRequest(offer1, PurchasePaymentType.Points);
            res = req.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, res.StatusCode, "First durable purchase failed. StatusCode is not correct");

            GetAssetsClientRequest getAsset_request;
            GetAssetsClientResponse getAsset_response;

            getAsset_request = new GetAssetsClientRequest(user.Email, user.Password);
            getAsset_request.QueryParameters.TitleId = getAsset_request.Title61TitleId.Id;
            getAsset_request.QueryParameters.SignAssets = "false";

            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, getAsset_response.StatusCode, "StatusCode is not correct");
            Assert.IsNull(getAsset_response.BodyWrapper.mediaAssets, "MediaAssets is not NULL");
        }

        [TestMethod]
        [Owner("srkalyan")]
        [Description("GetAssets for no purchase using silver account ")]
        public void GetAssetsTests_VerifyResponse_unSigned_Silver_Without_Any_Purchase_Of_Assets()
        {
            UserAccount user = new UserAccount(XblLiveUserTier.Silver, true);

            GetAssetsClientRequest getAsset_request;
            GetAssetsClientResponse getAsset_response;

            getAsset_request = new GetAssetsClientRequest(user.Email, user.Password);
            getAsset_request.QueryParameters.TitleId = getAsset_request.Title61TitleId.Id;
            getAsset_request.QueryParameters.SignAssets = "false";

            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, getAsset_response.StatusCode, "StatusCode is not correct");
            Assert.IsNull(getAsset_response.BodyWrapper.mediaAssets, "MediaAssets is not NULL");
        }

        [TestMethod]
        [Owner("srkalyan")]
        [Description("GetAssets for no purchase using gold account ")]
        public void GetAssetsTests_VerifyResponse_unSigned_Gold_Without_Any_Purchase_Of_Assets()
        {
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);

            GetAssetsClientRequest getAsset_request;
            GetAssetsClientResponse getAsset_response;

            getAsset_request = new GetAssetsClientRequest(user.Email, user.Password);
            getAsset_request.QueryParameters.TitleId = getAsset_request.Title61TitleId.Id;
            getAsset_request.QueryParameters.SignAssets = "false";

            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, getAsset_response.StatusCode, "StatusCode is not correct");
            Assert.IsNull(getAsset_response.BodyWrapper.mediaAssets, "MediaAssets is not NULL");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\PDLC.Test\PDLC.Test.GetAssets\GetAssetsTests_InvalidRequests.cs ===
﻿using System;
using System.Net;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using LiveNew.Test;

using LiveN.Test;
using LiveN.Test.Common;
using LiveN.Test.Content;
using LiveN.Test.Users;

namespace PDLC.Tests
{
    /// <summary>
    /// GetAssetsTests invalid requests testcases
    /// </summary>
    public partial class GetAssetsTests
    {
        [TestMethod]
        [Owner("srkalyan")]
        [Description("Send POST when GET is expected by the GetAssets service")]
        public void GetAssetsTests_InvalidRequest_POST()
        {
            PurchaseClientRequest req;
            PurchaseClientResponse res;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002001().GetOfferContext(Locales.en_US);

            req = new PurchaseClientRequest(user.Email, user.Password);
            req.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);            
            res = req.MakeARequest();

            GetAssetsClientRequest getAsset_request;
            GetAssetsClientResponse getAsset_response;

            getAsset_request = new GetAssetsClientRequest(user.Email, user.Password);
            getAsset_request.QueryParameters.TitleId = StaticTitleID;
            getAsset_request.QueryParameters.SignAssets = "false";
            getAsset_request.Method = HttpMethods.POST;

            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.MethodNotAllowed, getAsset_response.StatusCode, "StatusCode is not correct");
        }

        /* TODO: The test is commented as this is a known issue tracked with Bug# 12321. Should be uncommend when the bug is fixed
        [TestMethod]
        [Owner("srkalyan")]
        [WorkItem(12321)]
        [Description("Get Assets request with empty TitleID")]
        public void GetAssetsTests_InvalidRequest_TitleID_Empty()
        {
            PurchaseClientRequest req;
            PurchaseClientResponse res;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002001().GetOfferContext(Locales.en_US);

            req = new PurchaseClientRequest(user.Email, user.Password);
            req.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            res = req.MakeARequest();

            GetAssetsClientRequest getAsset_request;
            GetAssetsClientResponse getAsset_response;

            getAsset_request = new GetAssetsClientRequest(user.Email, user.Password);
            getAsset_request.QueryParameters.TitleId = "";
            getAsset_request.QueryParameters.SignAssets = "false";

            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.BadRequest, getAsset_response.StatusCode, "StatusCode is not correct");            
        }
        */

        [TestMethod]
        [Owner("srkalyan")]
        [Description("Get Assets request with invalid TitleID")]
        public void GetAssetsTests_InvalidRequest_TitleID_Zeroed()
        {
            PurchaseClientRequest req;
            PurchaseClientResponse res;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002001().GetOfferContext(Locales.en_US);

            req = new PurchaseClientRequest(user.Email, user.Password);
            req.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            res = req.MakeARequest();

            GetAssetsClientRequest getAsset_request;
            GetAssetsClientResponse getAsset_response;

            getAsset_request = new GetAssetsClientRequest(user.Email, user.Password);
            getAsset_request.QueryParameters.TitleId = "000";
            getAsset_request.QueryParameters.SignAssets = "false";

            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.BadRequest, getAsset_response.StatusCode, "StatusCode is not correct");
            Assert.IsNotNull(getAsset_response.ServiceErrorMessageWrapper, "We expected the PdlcServiceErrorMessage but it is NULL");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), getAsset_response.ServiceErrorMessageWrapper.Bucket, "Error bucket is not matching");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, getAsset_response.ServiceErrorMessageWrapper.ErrorCode, "Error code is not matching");
            Assert.AreEqual("title id sent in the request does not match title id in the authentication token", getAsset_response.ServiceErrorMessageWrapper.ErrorMessage, "Error message is not matching");            
        }

        [TestMethod]
        [Owner("srkalyan")]
        [Description("Get Assets request with missing TitleID")]
        public void GetAssetsTests_InvalidRequest_TitleID_Missing()
        {
            PurchaseClientRequest req;
            PurchaseClientResponse res;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002001().GetOfferContext(Locales.en_US);

            req = new PurchaseClientRequest(user.Email, user.Password);
            req.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            res = req.MakeARequest();

            GetAssetsClientRequest getAsset_request;
            GetAssetsClientResponse getAsset_response;

            getAsset_request = new GetAssetsClientRequest(user.Email, user.Password);            
            getAsset_request.QueryParameters.SignAssets = "false";

            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.MethodNotAllowed, getAsset_response.StatusCode, "StatusCode is not correct");
        }
        
        /* TODO: The test is commented as this is a known issue tracked with Bug# 12321. Should be uncommend when the bug is fixed
        [TestMethod]
        [Owner("srkalyan")]
        [WorkItem(12321)]
        [Description("Get Assets request with invalid SignAssets value")]
        public void GetAssetsTests_InvalidRequest_signAssets_invalid()
        {
            PurchaseClientRequest req;
            PurchaseClientResponse res;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002001().GetOfferContext(Locales.en_US);
             
            req = new PurchaseClientRequest(user.Email, user.Password);
            req.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            res = req.MakeARequest();

            GetAssetsClientRequest getAsset_request;
            GetAssetsClientResponse getAsset_response;

            getAsset_request = new GetAssetsClientRequest(user.Email, user.Password);
            getAsset_request.QueryParameters.TitleId = StaticTitleID;
            getAsset_request.QueryParameters.SignAssets = "fals";

            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.BadRequest, getAsset_response.StatusCode, "StatusCode is not correct");
        }
        */

        [TestMethod]
        [Owner("srkalyan")]
        [Description("Get Assets request with missing signAssets ")]
        public void GetAssetsTests_InvalidRequest_signAssets_missing()
        {
            PurchaseClientRequest req;
            PurchaseClientResponse res;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002001().GetOfferContext(Locales.en_US);

            req = new PurchaseClientRequest(user.Email, user.Password);
            req.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            res = req.MakeARequest();

            GetAssetsClientRequest getAsset_request;
            GetAssetsClientResponse getAsset_response;

            getAsset_request = new GetAssetsClientRequest(user.Email, user.Password);
            getAsset_request.QueryParameters.TitleId = StaticTitleID;

            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.MethodNotAllowed, getAsset_response.StatusCode, "StatusCode is not correct");            
        }

        [TestMethod]
        [Owner("srkalyan")]
        [Description("Get Assets request with invalid audience URL")]
        public void GetAssetsTests_InvalidRequest_audienceURI_invalid()
        {
            PurchaseClientRequest req;
            PurchaseClientResponse res;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002001().GetOfferContext(Locales.en_US);

            req = new PurchaseClientRequest(user.Email, user.Password);
            req.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            res = req.MakeARequest();

            GetAssetsClientRequest getAsset_request;
            GetAssetsClientResponse getAsset_response;

            getAsset_request = new GetAssetsClientRequest(user.Email, user.Password);
            getAsset_request.QueryParameters.TitleId = offer.TitleId.ToString();
            getAsset_request.QueryParameters.SignAssets = "false";
            getAsset_request.SetAuthenticationToken = false;         
            getAsset_request.Headers.PartnerAuthorization = PDLCServicesCommon.AUTH_PREFIX + getAsset_request.Auth.GetPartnerToken(getAsset_request.UserEmail, getAsset_request.Password, getAsset_request.Title, "http://xboxlive.com/avatar");

            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.Unauthorized, getAsset_response.StatusCode, "StatusCode is not correct");
        }

        [TestMethod]
        [Owner("srkalyan")]
        [Description("Get Assets request with TitleID mismatch in request to Parther token")]
        public void GetAssetsTests_InvalidRequest_TitleID_mismatch()
        {
            PurchaseClientRequest req;
            PurchaseClientResponse res;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002001().GetOfferContext(Locales.en_US);

            req = new PurchaseClientRequest(user.Email, user.Password);
            req.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            res = req.MakeARequest();

            GetAssetsClientRequest getAsset_request;
            GetAssetsClientResponse getAsset_response;

            getAsset_request = new GetAssetsClientRequest(user.Email, user.Password);
            getAsset_request.QueryParameters.TitleId = "1234";
            getAsset_request.QueryParameters.SignAssets = "false";

            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.BadRequest, getAsset_response.StatusCode, "StatusCode is not correct");
            Assert.IsNotNull(getAsset_response.ServiceErrorMessageWrapper, "We expected the PdlcServiceErrorMessage but it is NULL");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), getAsset_response.ServiceErrorMessageWrapper.Bucket, "Error bucket is not matching");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, getAsset_response.ServiceErrorMessageWrapper.ErrorCode, "Error code is not matching");
            Assert.AreEqual("title id sent in the request does not match title id in the authentication token", getAsset_response.ServiceErrorMessageWrapper.ErrorMessage, "Error message is not matching");            
        }

        [TestMethod]
        [Owner("srkalyan")]
        [Description("GetAssets invalid request with PlatformType not equal to 5")]
        public void GetAssetsTests_InvalidRequest_PlatformType_NOT_5()
        {
            PurchaseClientRequest req;
            PurchaseClientResponse res;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002001().GetOfferContext(Locales.en_US);

            Random rnd = new Random();

            req = new PurchaseClientRequest(user.Email, user.Password);
            req.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            res = req.MakeARequest();

            GetAssetsClientRequest getAsset_request;
            GetAssetsClientResponse getAsset_response;

            getAsset_request = new GetAssetsClientRequest(user.Email, user.Password);
            getAsset_request.QueryParameters.TitleId = StaticTitleID;
            getAsset_request.QueryParameters.SignAssets = "false";
            int temp = rnd.Next(0, 4);
            
            getAsset_request.Headers.PlatformType = temp.ToString();

            Trace.TraceInformation(" Platform Type used = {0}", getAsset_request.Headers.PlatformType);

            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.BadRequest, getAsset_response.StatusCode, "StatusCode is not correct");
            Assert.IsNotNull(getAsset_response.ServiceErrorMessageWrapper, "We expected the PdlcServiceErrorMessage but it is NULL");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), getAsset_response.ServiceErrorMessageWrapper.Bucket, "Error bucket is not matching");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, getAsset_response.ServiceErrorMessageWrapper.ErrorCode, "Error code is not matching");
            Assert.IsTrue(getAsset_response.ServiceErrorMessageWrapper.ErrorMessage.Contains("X-Platform-Type header is limited to  Mobile"), "Error message is not matching");            
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\PDLC.Test\PDLC.Test.GetAssets\GetAssets_ValidRequests.cs ===
﻿using System;
using System.Net;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using LiveNew.Test;

using LiveN.Test;
using LiveN.Test.Common;
using LiveN.Test.Content;
using LiveN.Test.Users;

namespace PDLC.Tests
{
    /// <summary>
    /// GetAssetsTests with valid requests
    /// </summary>    
    public partial class GetAssetsTests
    {
        [TestMethod]
        [Owner("srkalyan")]
        [Description("GetAssets valid request with invalid Locale")]
        public void GetAssetsTests_ValidRequest_Locale_Invalid()
        {
            PurchaseClientRequest req;
            PurchaseClientResponse res;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002001().GetOfferContext(Locales.en_US);

            req = new PurchaseClientRequest(user.Email, user.Password);
            req.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            res = req.MakeARequest();

            GetAssetsClientRequest getAsset_request;
            GetAssetsClientResponse getAsset_response;

            getAsset_request = new GetAssetsClientRequest(user.Email, user.Password);
            getAsset_request.QueryParameters.TitleId = offer.TitleId.ToString();
            getAsset_request.QueryParameters.SignAssets = "false";
            getAsset_request.HeaderCollection.Add(PDLCServicesCommon.LOCALE, "Invalid_Locale");

            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, getAsset_response.StatusCode, "StatusCode is not correct");
            //Assert.AreEqual(getAsset_response.BodyWrapper.mediaAssets.Count, 1, "Asset count is not equal to 1");
            Trace.TraceInformation(" Purchased AssetID {0} with Quantity {1} \n", getAsset_response.BodyWrapper.mediaAssets[0].AssetId, getAsset_response.BodyWrapper.mediaAssets[0].Quantity);
        }

        [TestMethod]
        [Owner("srkalyan")]
        [Description("GetAssets valid request with empty Locale")]
        public void GetAssetsTests_ValidRequest_Locale_Empty()
        {
            PurchaseClientRequest req;
            PurchaseClientResponse res;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002001().GetOfferContext(Locales.en_US);

            req = new PurchaseClientRequest(user.Email, user.Password);
            req.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            res = req.MakeARequest();

            GetAssetsClientRequest getAsset_request;
            GetAssetsClientResponse getAsset_response;

            getAsset_request = new GetAssetsClientRequest(user.Email, user.Password);
            getAsset_request.QueryParameters.TitleId = offer.TitleId.ToString();
            getAsset_request.QueryParameters.SignAssets = "false";
            getAsset_request.HeaderCollection.Add(PDLCServicesCommon.LOCALE, "");

            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, getAsset_response.StatusCode, "StatusCode is not correct");
            //Assert.AreEqual(getAsset_response.BodyWrapper.mediaAssets.Count, 1, "Asset count is not equal to 1");
            Trace.TraceInformation(" Purchased AssetID {0} with Quantity {1} \n", getAsset_response.BodyWrapper.mediaAssets[0].AssetId, getAsset_response.BodyWrapper.mediaAssets[0].Quantity);
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\PDLC.Test\PDLC.Test.GetAssets\GetAssetsTests.cs ===
﻿using System;
using System.Diagnostics;
using System.Net;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using LiveNew.Test;

using LiveN.Test;
using LiveN.Test.Common;
using LiveN.Test.Content;
using LiveN.Test.Users;

namespace PDLC.Tests
{
    /// <summary>
    /// Based class for GetAssets Tests. Contains BVTs and general setup for all other areas.
    /// </summary>
    [TestClass]
    public partial class GetAssetsTests
    {
        /// <summary>
        /// User email for default cases
        /// </summary>
        private static string StaticUserEmail;

        /// <summary>
        /// User password for default cases
        /// </summary>
        private static string StaticUserPassword;

        /// <summary>
        /// TiteID for default cases
        /// </summary>
        private static string StaticTitleID;

        /// <summary>
        /// Reference to the event viewer
        /// </summary>
        private static EventViewer myEvents;

        [ClassInitialize]
        public static void TestClassInitialize(TestContext context)
        {
            myEvents = new EventViewer(".", "Application", "pdlc_service");

            StaticUserEmail = CurrentEnvironmentSettings.UserSettings[0].UserEmail;
            StaticUserPassword = CurrentEnvironmentSettings.UserSettings[0].Password;
            StaticTitleID = CurrentEnvironmentSettings.Titles[0].Id;
        }

        [TestInitialize]
        public void myTestInitialize()
        {
            myEvents.ResetEventStartPosition();
        }

        [TestCleanup]
        public void myTestCleanup()
        {
            Trace.WriteLine("\r\nALL EVENTS (Will only work on OneBox installations): \r\n" + myEvents.GenerateFormattedStringForAllEvents());
        }

        [TestMethod]
        [Owner("srkalyan")]
        [Description("Ensure the basic Get Assets is working for unsigned response")]
        public void GetAssetsTests_BVT_unSigned_Gold_Purchase_One_Asset()
        {
            PurchaseClientRequest req;
            PurchaseClientResponse res;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002001().GetOfferContext(Locales.en_US);

            req = new PurchaseClientRequest(user.Email, user.Password);
            req.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            res = req.MakeARequest();

            GetAssetsClientRequest getAsset_request;
            GetAssetsClientResponse getAsset_response;

            getAsset_request = new GetAssetsClientRequest(user.Email, user.Password);
            getAsset_request.QueryParameters.TitleId = offer.TitleId.ToString();
            getAsset_request.QueryParameters.SignAssets = "false";

            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, getAsset_response.StatusCode, "StatusCode is not correct");
            Assert.AreEqual(getAsset_response.BodyWrapper.mediaAssets.Count, 1, "Asset count is not equal to 1");
            Assert.AreEqual(offer.AssetQuantity, getAsset_response.BodyWrapper[offer.AssetId].Quantity, "AssetID and Quantity match in the response");
        }

        [TestMethod]
        [Owner("srkalyan")]
        [Description("Ensure the basic Get Assets is working for signed response ")]        
        public void GetAssetsTests_BVT_Signed_Gold_Purchase_One_Asset()
        {
            PurchaseClientRequest req;
            PurchaseClientResponse res;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002001().GetOfferContext(Locales.en_US);

            req = new PurchaseClientRequest(user.Email, user.Password);
            req.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            res = req.MakeARequest();

            GetAssetsClientRequest getAsset_request;
            GetAssetsClientResponse getAsset_response;

            getAsset_request = new GetAssetsClientRequest(user.Email, user.Password);
            getAsset_request.QueryParameters.TitleId = offer.TitleId.ToString();
            getAsset_request.QueryParameters.SignAssets = "true";

            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, getAsset_response.StatusCode, "StatusCode is not correct");
            Assert.AreEqual(true, getAsset_response.BodyWrapper.IsSignatureValid, "Response should have been signed.");
            Assert.AreEqual(offer.AssetQuantity, getAsset_response.BodyWrapper[offer.AssetId].Quantity, "AssetID and Quantity match in the response");
        }

        [TestMethod]
        [Owner("srkalyan")]
        [Description("Ensure the basic Get Assets is working for unsigned response for AssetID 61002002")]
        public void GetAssetsTests_BVT_unSigned_Gold_Purchase_One_Asset_In_Two_Offers()
        {
            PurchaseClientRequest req;
            PurchaseClientResponse res;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002002().GetOfferContext(Locales.en_US);

            req = new PurchaseClientRequest(user.Email, user.Password);
            req.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            res = req.MakeARequest();

            GetAssetsClientRequest getAsset_request;
            GetAssetsClientResponse getAsset_response;

            getAsset_request = new GetAssetsClientRequest(user.Email, user.Password);
            getAsset_request.QueryParameters.TitleId = offer.TitleId.ToString();
            getAsset_request.QueryParameters.SignAssets = "false";

            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, getAsset_response.StatusCode, "StatusCode is not correct");
            Assert.AreEqual(getAsset_response.BodyWrapper.mediaAssets.Count, 1, "Asset count is not equal to 1");
            Assert.AreEqual(offer.AssetQuantity, getAsset_response.BodyWrapper[offer.AssetId].Quantity, "AssetID and Quantity match in the response");
        }

        [TestMethod]
        [Owner("srkalyan")]
        [Description("Ensure the basic Get Assets is working signed response for AssetID_61002002")]
        public void GetAssetsTests_BVT_Signed_Gold_Purchase_One_Asset_In_Two_Offers()
        {
            PurchaseClientRequest req;
            PurchaseClientResponse res;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002002().GetOfferContext(Locales.en_US);

            req = new PurchaseClientRequest(user.Email, user.Password);
            req.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            res = req.MakeARequest();

            GetAssetsClientRequest getAsset_request;
            GetAssetsClientResponse getAsset_response;

            getAsset_request = new GetAssetsClientRequest(user.Email, user.Password);
            getAsset_request.QueryParameters.TitleId = offer.TitleId.ToString();
            getAsset_request.QueryParameters.SignAssets = "true";

            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, getAsset_response.StatusCode, "StatusCode is not correct");
            Assert.AreEqual(true, getAsset_response.BodyWrapper.IsSignatureValid, "Response should have been signed.");
            Assert.AreEqual(offer.AssetQuantity, getAsset_response.BodyWrapper[offer.AssetId].Quantity, "AssetID and Quantity match in the response");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\PDLC.Test\PDLC.Tests.ConsumeAssets\ConsumeAssetsTests_InvalidRequests.cs ===
﻿using System;
using System.Net;
using System.Diagnostics;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using LiveN.Test;

namespace PDLC.Tests
{
    /// <summary>
    /// InvalidRequests contains tests to ensure an invalid request is handled appropriately
    /// </summary>
    public partial class ConsumeAssetsTests
    {
        [TestMethod]
        [Owner("srkalyan")]
        [Description("Sending in a GET when a POST is expected")]
        public void ConsumeAssetsTests_InvalidRequests_GET()
        {
            ConsumeAssetsClientRequest request;
            ConsumeAssetsClientResponse response;
            
            request = new ConsumeAssetsClientRequest(StaticUserEmail, StaticUserPassword);
            request.Method = HttpMethods.GET;
            request.RequestContent.TitleId = StaticTitleID;
            request.RequestContent.TransactionId = Guid.NewGuid().ToString();
            request.RequestContent.AssetsToConsume = StaticAssets;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.MethodNotAllowed, response.StatusCode, "StatusCode in not correct");
        }

        [TestMethod]
        [Owner("srkalyan")]
        [Description("Sending up request without partner token")]
        public void ConsumeAssetsTests_InvalidRequests_AuthToken_MissingHeader()
        {
            ConsumeAssetsClientRequest request;
            ConsumeAssetsClientResponse response;

            request = new ConsumeAssetsClientRequest(StaticUserEmail, StaticUserPassword);

            request.SetAuthenticationToken = false;
            request.Headers.PartnerAuthorization = null;
            request.RequestContent.TitleId = StaticTitleID;
            request.RequestContent.TransactionId = Guid.NewGuid().ToString();
            request.RequestContent.AssetsToConsume = StaticAssets;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode, "StatusCode in not correct");
        }

        [TestMethod]
        [Owner("srkalyan")]
        [Description("Sending up request with empty partner token")]
        public void ConsumeAssetsTests_InvalidRequests_AuthToken_EmptyHeader()
        {
            ConsumeAssetsClientRequest request;
            ConsumeAssetsClientResponse response;

            request = new ConsumeAssetsClientRequest(StaticUserEmail, StaticUserPassword);

            request.SetAuthenticationToken = false;
            request.Headers.PartnerAuthorization = string.Empty;
            request.RequestContent.TitleId = StaticTitleID;
            request.RequestContent.TransactionId = Guid.NewGuid().ToString();
            request.RequestContent.AssetsToConsume = StaticAssets;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode, "StatusCode in not correct");
        }

        [TestMethod]
        [Owner("srkalyan")]
        [Description("Sending up request with null Request")]
        public void ConsumeAssetsTests_InvalidRequests_Request_null()
        {
            ConsumeAssetsClientRequest request;
            ConsumeAssetsClientResponse response;

            request = new ConsumeAssetsClientRequest(StaticUserEmail, StaticUserPassword);
            request.RequestContent = null;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "StatusCode in not correct");
            Assert.IsNotNull(response.ServiceErrorMessageWrapper, "PdlcServiceErrorMessage is NULL");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Error bucket is not correct");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Error core is not correct");
            Assert.AreEqual("ConsumeRequest is null.", response.ServiceErrorMessageWrapper.ErrorMessage, "Error message is not correct");            
        }

        [TestMethod]
        [Owner("srkalyan")]
        [Description("Sending up request with TitleID set zero")]
        public void ConsumeAssetsTests_InvalidRequests_TitleID_zeroed()
        {
            ConsumeAssetsClientRequest request;
            ConsumeAssetsClientResponse response;

            request = new ConsumeAssetsClientRequest(StaticUserEmail, StaticUserPassword);
            request.RequestContent.TitleId = "0";
            request.RequestContent.TransactionId = Guid.NewGuid().ToString();
            request.RequestContent.AssetsToConsume = StaticAssets;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "StatusCode in not correct");
            Assert.IsNotNull(response.ServiceErrorMessageWrapper, "PdlcServiceErrorMessage is NULL");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Error bucket is not correct");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Error core is not correct");
            Assert.AreEqual("The title Id is zero or missing.", response.ServiceErrorMessageWrapper.ErrorMessage, "Error message is not correct");
        }

        [TestMethod]
        [Owner("srkalyan")]
        [Description("Sending up request with TitleID mismatch with partner tokens")]
        public void ConsumeAssetsTests_InvalidRequests_TitleID_mismatched()
        {
            ConsumeAssetsClientRequest request;
            ConsumeAssetsClientResponse response;

            request = new ConsumeAssetsClientRequest(StaticUserEmail, StaticUserPassword);
            request.RequestContent.TitleId = "1000";
            request.RequestContent.TransactionId = Guid.NewGuid().ToString();
            request.RequestContent.AssetsToConsume = StaticAssets;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "StatusCode in not correct");
            Assert.IsNotNull(response.ServiceErrorMessageWrapper, "PdlcServiceErrorMessage is NULL");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Error bucket is not correct");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Error core is not correct");
            Assert.AreEqual("title id sent in the request does not match title id in the authentication token", response.ServiceErrorMessageWrapper.ErrorMessage, "Error message is not correct");
        }

        [TestMethod]
        [Owner("srkalyan")]
        [Description("Sending up request with empty TransactionID")]
        public void ConsumeAssetsTests_InvalidRequests_TransactionID_empty()
        {
            ConsumeAssetsClientRequest request;
            ConsumeAssetsClientResponse response;

            request = new ConsumeAssetsClientRequest(StaticUserEmail, StaticUserPassword);

            request.RequestContent.TitleId = StaticTitleID;
            request.RequestContent.TransactionId = Guid.Empty.ToString();
            request.RequestContent.AssetsToConsume = StaticAssets;
            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "StatusCode in not correct");
            Assert.IsNotNull(response.ServiceErrorMessageWrapper, "PdlcServiceErrorMessage is NULL");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Error bucket is not correct");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Error core is not correct");
            Assert.AreEqual("The TransactionId is missing or empty.", response.ServiceErrorMessageWrapper.ErrorMessage, "Error message is not correct");
        }

        [TestMethod]
        [Owner("srkalyan")]
        [Description("Sending up request with Assets length zero")]
        public void ConsumeAssetsTests_InvalidRequests_Assets_length_zero()
        {
            ConsumeAssetsClientRequest request;
            ConsumeAssetsClientResponse response;

            Asset[] empty_list = new Asset[0];

            request = new ConsumeAssetsClientRequest(StaticUserEmail, StaticUserPassword);
            request.RequestContent.TitleId = StaticTitleID;
            request.RequestContent.TransactionId = Guid.NewGuid().ToString();
            request.RequestContent.AssetsToConsume = empty_list;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "StatusCode in not correct");
            Assert.IsNotNull(response.ServiceErrorMessageWrapper, "PdlcServiceErrorMessage is NULL");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Error bucket is not correct");
        }

        [TestMethod]
        [Owner("srkalyan")]
        [Description("Sending up request with Assets invalid Asset ID")]
        public void ConsumeAssetsTests_InvalidRequests_Assets_ID_invalid()
        {
            ConsumeAssetsClientRequest request;
            ConsumeAssetsClientResponse response;            

            request = new ConsumeAssetsClientRequest(StaticUserEmail, StaticUserPassword);
            request.RequestContent.TitleId = request.Title61TitleId.Id;
            request.RequestContent.TransactionId = Guid.NewGuid().ToString();
            request.RequestContent.AssetsToConsume = CreateSingleAssetList(100, 1);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "StatusCode in not correct");
            Assert.IsNotNull(response.ServiceErrorMessageWrapper, "PdlcServiceErrorMessage is NULL");
            Assert.AreEqual(ServiceErrorBucket.AssetBalance.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Error bucket is not correct");
            Assert.AreEqual(XOnline_HResults.XONLINE_E_OFFERING_INVALID_CONSUME_ITEMS, response.ServiceErrorMessageWrapper.ErrorCode, "Error core is not correct");
            Assert.AreEqual("At least one asset to consume is invalid.", response.ServiceErrorMessageWrapper.ErrorMessage, "Error message is not correct");
        }

        [TestMethod]
        [Owner("srkalyan")]
        [Description("Sending up request with Assets invalid Asset quantity")]
        public void ConsumeAssetsTests_InvalidRequests_Asset_quantity_invalid()
        {
            ConsumeAssetsClientRequest request;
            ConsumeAssetsClientResponse response;

            request = new ConsumeAssetsClientRequest(StaticUserEmail, StaticUserPassword);
            request.RequestContent.TitleId = request.Title61TitleId.Id;
            request.RequestContent.TransactionId = Guid.NewGuid().ToString();
            request.RequestContent.AssetsToConsume = CreateSingleAssetList(60002001, 579373193 + 1);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "StatusCode in not correct");
            Assert.IsNotNull(response.ServiceErrorMessageWrapper, "PdlcServiceErrorMessage is NULL");
            Assert.AreEqual(ServiceErrorBucket.AssetBalance.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Error bucket is not correct");
            Assert.AreEqual(XOnline_HResults.XONLINE_E_OFFERING_INVALID_CONSUME_ITEMS, response.ServiceErrorMessageWrapper.ErrorCode, "Error core is not correct");
            Assert.AreEqual("At least one asset to consume is invalid.", response.ServiceErrorMessageWrapper.ErrorMessage, "Error message is not correct");
        }

        [TestMethod]
        [Owner("srkalyan")]
        [Description("Sending up invalid X-PlatformType")]
        public void ConsumeAssetsTests_InvalidRequests_PlatformType_NOT_5()
        {
            ConsumeAssetsClientRequest request;
            ConsumeAssetsClientResponse response;

            request = new ConsumeAssetsClientRequest(StaticUserEmail, StaticUserPassword);
            request.RequestContent.TitleId = StaticTitleID;
            request.RequestContent.TransactionId = Guid.NewGuid().ToString();
            request.RequestContent.AssetsToConsume = StaticAssets;
            request.Headers.PlatformType = "2";

            response = request.MakeARequest();
            
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "StatusCode is not correct");
            Assert.IsNotNull(response.ServiceErrorMessageWrapper, "We expected the PdlcServiceErrorMessage but it is NULL");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Error bucket is not matching");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Error code is not matching");
            Assert.IsTrue(response.ServiceErrorMessageWrapper.ErrorMessage.Contains("X-Platform-Type header is limited to  Mobile"), "Error message is not matching");            
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\PDLC.Test\PDLC.Tests.ConsumeAssets\ConsumeAssetsTests.cs ===
﻿using System;
using System.Diagnostics;
using System.Net;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using LiveNew.Test;

using LiveN.Test;
using LiveN.Test.Common;
using LiveN.Test.Content;
using LiveN.Test.Users;

namespace PDLC.Tests
{
    /// <summary>
    /// Based class for ConsumeAssets Tests. Contains BVTs and general setup for all other areas.
    /// </summary>
    [TestClass]
    public partial class ConsumeAssetsTests
    {
        /// <summary>
        /// User email for default cases
        /// </summary>
        private static string StaticUserEmail;

        /// <summary>
        /// User password for default cases
        /// </summary>
        private static string StaticUserPassword;

        /// <summary>
        /// TitleID for default cases
        /// </summary>
        private static string StaticTitleID;

        /// <summary>
        /// TransactionID for default cases
        /// </summary>
        private static string StaticTransactionID;

        /// <summary>
        /// Assets for default cases
        /// </summary>
        private static Asset[] StaticAssets;

        /// <summary>
        /// Reference to the event viewer
        /// </summary>
        private static EventViewer myEvents;

        [ClassInitialize]
        public static void TestClassInitialize(TestContext context)
        {
            myEvents = new EventViewer(".", "Application", "pdlc_service");

            StaticUserEmail = CurrentEnvironmentSettings.UserSettings[0].UserEmail;
            StaticUserPassword = CurrentEnvironmentSettings.UserSettings[0].Password;
            StaticTitleID = CurrentEnvironmentSettings.Titles[0].Id;            
            StaticTransactionID = Guid.NewGuid().ToString();            
            StaticAssets = new Asset[]
            {
                new Asset { AssetId = 60002001, Quantity = 1}
            };
        }

        [TestInitialize]
        public void myTestInitialize()
        {
            myEvents.ResetEventStartPosition();
        }

        [TestCleanup]
        public void myTestCleanup()
        {
            Trace.WriteLine("\r\nALL EVENTS (Will only work on OneBox installations): \r\n" + myEvents.GenerateFormattedStringForAllEvents());
        }

        [TestMethod]
        [Owner("srkalyan")]
        [Description("Ensure the basic Consume Assets is working")]
        public void ConsumeAssetsTests_BVT()
        {
            uint initial_asset_quantity;
            PurchaseClientRequest req;
            PurchaseClientResponse res;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002001().GetOfferContext(Locales.en_US);

            req = new PurchaseClientRequest(user.Email, user.Password);
            req.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            res = req.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, res.StatusCode, "Asset purchase failed. Invalid status code");
            
            GetAssetsClientRequest getAsset_request;
            GetAssetsClientResponse getAsset_response;

            getAsset_request = new GetAssetsClientRequest(user.Email, user.Password);
            getAsset_request.QueryParameters.TitleId = offer.TitleId.ToString();
            getAsset_request.QueryParameters.SignAssets = "false";            

            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, getAsset_response.StatusCode, "StatusCode is not correct");
            Assert.AreEqual(getAsset_response.BodyWrapper.mediaAssets.Count, 1, "Asset count is not equal to 1");
            initial_asset_quantity = getAsset_response.BodyWrapper.mediaAssets[0].Quantity;
            Trace.TraceInformation(" Purchased AssetID {0} with Quantity {1} \n", getAsset_response.BodyWrapper.mediaAssets[0].AssetId, getAsset_response.BodyWrapper.mediaAssets[0].Quantity);

            // Consume the assets that are purchased by the user
            ConsumeAssetsClientRequest request;
            ConsumeAssetsClientResponse response;

            request = new ConsumeAssetsClientRequest(user.Email, user.Email);
            request.RequestContent.TitleId = offer.TitleId.ToString();
            request.RequestContent.TransactionId = GenerateGuid();
            request.RequestContent.AssetsToConsume = StaticAssets;

            response = request.MakeARequest();            
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Consume asset failed. StatusCode in not correct");

            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, getAsset_response.StatusCode, "StatusCode is not correct");
            Assert.AreEqual(getAsset_response.BodyWrapper.mediaAssets.Count, 1, "Asset count is not equal to 1");
            Assert.AreEqual(initial_asset_quantity - 1, getAsset_response.BodyWrapper.mediaAssets[0].Quantity, "The consume call did not decrement the quantity by value of 1");            
        }        

        //Utility functions

        /// <summary>
        /// Create an AssetList with single Asset that is given
        /// </summary>
        /// <param name="asset_id">Asset ID to be created</param>
        /// <param name="asset_quantity">Asset Quantity to be created</param>
        /// <returns></returns>

        public Asset[] CreateSingleAssetList(uint asset_id, uint asset_quantity)
        {
            return new Asset[] { 
                                 new Asset { AssetId = asset_id, Quantity = asset_quantity}
                               };
        }

        /// <summary>
        /// Returns a generated GUID
        /// </summary>
        /// <returns></returns>
        public string GenerateGuid()
        {
            return Guid.NewGuid().ToString();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\PDLC.Test\PDLC.Tests.ConsumeAssets\ConsumeAssets_ValidResponses.cs ===
﻿using System;
using System.Diagnostics;
using System.Net;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using LiveNew.Test;

using LiveN.Test;
using LiveN.Test.Common;
using LiveN.Test.Content;
using LiveN.Test.Users;

namespace PDLC.Tests
{
    /// <summary>
    /// ConsumeAssets valid responses
    /// </summary>
    public partial class ConsumeAssetsTests
    {
        [TestMethod]
        [Owner("srkalyan")]
        [Description("Valid Respons for consume all assets for AssetID 61002001")]
        public void ConsumeAssetsTests_VerifyResponse_Consume_All_Quantity_For_One_Asset()
        {
            uint initial_asset_quantity;
            PurchaseClientRequest req;
            PurchaseClientResponse res;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002001().GetOfferContext(Locales.en_US);

            req = new PurchaseClientRequest(user.Email, user.Password);
            req.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            res = req.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, res.StatusCode, "Asset purchase failed. Invalid status code");

            GetAssetsClientRequest getAsset_request;
            GetAssetsClientResponse getAsset_response;

            getAsset_request = new GetAssetsClientRequest(user.Email, user.Password);
            getAsset_request.QueryParameters.TitleId = offer.TitleId.ToString();
            getAsset_request.QueryParameters.SignAssets = "false";

            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, getAsset_response.StatusCode, "StatusCode is not correct");
            Assert.AreEqual(1, getAsset_response.BodyWrapper.mediaAssets.Count, "Asset count is not equal to 1");
            initial_asset_quantity = getAsset_response.BodyWrapper.mediaAssets[0].Quantity;
            Trace.TraceInformation(" Purchased AssetID {0} with Quantity {1} \n", getAsset_response.BodyWrapper.mediaAssets[0].AssetId, getAsset_response.BodyWrapper.mediaAssets[0].Quantity);

            // Consume the assets that are purchased by the user
            ConsumeAssetsClientRequest request;
            ConsumeAssetsClientResponse response;

            request = new ConsumeAssetsClientRequest(user.Email, user.Email);
            request.RequestContent.TitleId = offer.TitleId.ToString();
            request.RequestContent.TransactionId = GenerateGuid(); 
            request.RequestContent.AssetsToConsume = CreateSingleAssetList(offer.AssetId, offer.AssetQuantity);            

            response = request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Consume asset failed. StatusCode in not correct");

            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, getAsset_response.StatusCode, "StatusCode is not correct");
            Assert.IsNull(getAsset_response.BodyWrapper.mediaAssets, "mediaAssets is not NULL");
        }

        [TestMethod]
        [Owner("srkalyan")]
        [Description("Valid Respons for consume all assets for AssetID 61002002")]
        public void ConsumeAssetsTests_VerifyResponse_Consume_All_Quantity_For_One_Asset_Present_In_Two_Offers()
        {
            uint initial_asset_quantity;
            PurchaseClientRequest req;
            PurchaseClientResponse res;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002002().GetOfferContext(Locales.en_US);

            req = new PurchaseClientRequest(user.Email, user.Password);
            req.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            res = req.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, res.StatusCode, "Asset purchase failed. Invalid status code");

            GetAssetsClientRequest getAsset_request;
            GetAssetsClientResponse getAsset_response;

            getAsset_request = new GetAssetsClientRequest(user.Email, user.Password);
            getAsset_request.QueryParameters.TitleId = offer.TitleId.ToString();
            getAsset_request.QueryParameters.SignAssets = "false";

            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, getAsset_response.StatusCode, "StatusCode is not correct");
            Assert.AreEqual(1, getAsset_response.BodyWrapper.mediaAssets.Count, "Asset count is not equal to 1");
            initial_asset_quantity = getAsset_response.BodyWrapper.mediaAssets[0].Quantity;
            Trace.TraceInformation(" Purchased AssetID {0} with Quantity {1} \n", getAsset_response.BodyWrapper.mediaAssets[0].AssetId, getAsset_response.BodyWrapper.mediaAssets[0].Quantity);

            // Consume the assets that are purchased by the user
            ConsumeAssetsClientRequest request;
            ConsumeAssetsClientResponse response;

            request = new ConsumeAssetsClientRequest(user.Email, user.Email);
            request.RequestContent.TitleId = offer.TitleId.ToString();
            request.RequestContent.TransactionId = GenerateGuid();
            request.RequestContent.AssetsToConsume = CreateSingleAssetList(offer.AssetId, offer.AssetQuantity);
            
            response = request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Consume asset failed. StatusCode in not correct");

            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, getAsset_response.StatusCode, "StatusCode is not correct");
            Assert.IsNull(getAsset_response.BodyWrapper.mediaAssets, "mediaAssets is not NULL");
        }

        [TestMethod]
        [Owner("srkalyan")]
        [Description("Valid Respons for consume in 2 steps for AssetID 61002002")]
        public void ConsumeAssetsTests_VerifyResponse_Consume_Partial_Quantities_For_One_Asset()
        {
            uint initial_asset_quantity;
            PurchaseClientRequest req;
            PurchaseClientResponse res;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);            
            OfferContext offer = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002002().GetOfferContext(Locales.en_US);

            req = new PurchaseClientRequest(user.Email, user.Password);
            req.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            res = req.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, res.StatusCode, "Asset purchase failed. Invalid status code");

            GetAssetsClientRequest getAsset_request;
            GetAssetsClientResponse getAsset_response;

            getAsset_request = new GetAssetsClientRequest(user.Email, user.Password);
            getAsset_request.QueryParameters.TitleId = offer.TitleId.ToString();
            getAsset_request.QueryParameters.SignAssets = "false";

            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, getAsset_response.StatusCode, "StatusCode is not correct");
            Assert.AreEqual(1, getAsset_response.BodyWrapper.mediaAssets.Count, "Asset count is not equal to 1");
            initial_asset_quantity = getAsset_response.BodyWrapper.mediaAssets[0].Quantity;
            Trace.TraceInformation(" Purchased AssetID {0} with Quantity {1} \n", getAsset_response.BodyWrapper.mediaAssets[0].AssetId, getAsset_response.BodyWrapper.mediaAssets[0].Quantity);

            // Consume the assets (total quantity-5) that are purchased by the user 
            ConsumeAssetsClientRequest request;
            ConsumeAssetsClientResponse response;

            request = new ConsumeAssetsClientRequest(user.Email, user.Email);
            request.RequestContent.TitleId = offer.TitleId.ToString();
            request.RequestContent.TransactionId = GenerateGuid();
            request.RequestContent.AssetsToConsume = CreateSingleAssetList(offer.AssetId, offer.AssetQuantity - 5);

            response = request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "1st Consume asset failed. StatusCode is not correct");

            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, getAsset_response.StatusCode, "StatusCode is not correct");
            Assert.IsNotNull(getAsset_response.BodyWrapper.mediaAssets, "mediaAssets is NULL");

            // Verify that total remaining asset auantity is 5 to match with the ConsumeAsset call that was made 
            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, getAsset_response.StatusCode, "StatusCode is not correct");
            Assert.AreEqual(1, getAsset_response.BodyWrapper.mediaAssets.Count, "Asset count is not equal to 1");
            Assert.AreEqual(5, (int)getAsset_response.BodyWrapper.mediaAssets[0].Quantity, "Asset quantity is not 5 as expcted, after the 1st ConsumeAsset call");

            // Call ConsumeAssets with asset quantity exceeding 5 

            request = new ConsumeAssetsClientRequest(user.Email, user.Email);
            request.RequestContent.TitleId = offer.TitleId.ToString();
            request.RequestContent.TransactionId = GenerateGuid();
            request.RequestContent.AssetsToConsume = CreateSingleAssetList(offer.AssetId, 5+1);

            response = request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "2nd Consume asset PASSED for quantity more than 5 Asset quantity");

            // Verify that total remaining asset quantity remains to be 5
            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, getAsset_response.StatusCode, "StatusCode is not correct");
            Assert.AreEqual(1, getAsset_response.BodyWrapper.mediaAssets.Count, "Asset count is not equal to 1");
            Assert.AreEqual(5, (int)getAsset_response.BodyWrapper.mediaAssets[0].Quantity, "Asset quantity is not 5 as expcted, after the 1st ConsumeAsset call");
        }

        [TestMethod]
        [Owner("srkalyan")]
        [Description("Consume all assets for two AssetIDs 61002001 and 61002002")]
        public void ConsumeAssetsTests_VerifyResponse_Consume_All_Quantity_For_Two_Assets_In_Two_Requests()
        {
            //uint initial_asset_quantity;
            PurchaseClientRequest req;
            PurchaseClientResponse res;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer1 = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002001().GetOfferContext(Locales.en_US);

            //purchase AssetID 61002001
            req = new PurchaseClientRequest(user.Email, user.Password);
            req.RequestContent.CreatePurchaseRequest(offer1, PurchasePaymentType.Points);
            res = req.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, res.StatusCode, "Asset purchase failed for AssedID 61002001. Invalid status code");

            //purchase AssetID 61002002
            OfferContext offer2 = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002002().GetOfferContext(Locales.en_US);

            req = new PurchaseClientRequest(user.Email, user.Password);
            req.RequestContent.CreatePurchaseRequest(offer2, PurchasePaymentType.Points);
            res = req.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, res.StatusCode, "Asset purchase failed for AssedID 61002002. Invalid status code");

            // Consume the assets that are purchased by the user
            ConsumeAssetsClientRequest request;
            ConsumeAssetsClientResponse response;

            request = new ConsumeAssetsClientRequest(user.Email, user.Email);
            request.RequestContent.TitleId = offer1.TitleId.ToString();
            request.RequestContent.TransactionId = GenerateGuid();
            request.RequestContent.AssetsToConsume = CreateSingleAssetList(offer1.AssetId, offer1.AssetQuantity); 
            
            //consume 61002001 Asset
            response = request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Consume asset failed. StatusCode in not correct");

            //consume 61002002 Asset
            request.RequestContent.TransactionId = GenerateGuid();
            request.RequestContent.AssetsToConsume = CreateSingleAssetList(offer2.AssetId, offer2.AssetQuantity); 

            response = request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Consume asset failed. StatusCode in not correct");
             
            //Validate the Asset Quantity using GeAssets response
            GetAssetsClientRequest getAsset_request;
            GetAssetsClientResponse getAsset_response;

            getAsset_request = new GetAssetsClientRequest(user.Email, user.Password);
            getAsset_request.QueryParameters.TitleId = offer1.TitleId.ToString();
            getAsset_request.QueryParameters.SignAssets = "false";

            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, getAsset_response.StatusCode, "StatusCode is not correct");
            Assert.IsNull(getAsset_response.BodyWrapper.mediaAssets, "mediaAssets is not NULL");
        }

        [TestMethod]
        [Owner("srkalyan")]
        [Description("Consume all assets for two AssetIDs 61002001 and 61002002 in one shot")]
        public void ConsumeAssetsTests_VerifyResponse_Consume_All_Quantity_For_Two_Assets_In_One_Request()
        {
            //uint initial_asset_quantity;
            PurchaseClientRequest req;
            PurchaseClientResponse res;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer1 = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002001().GetOfferContext(Locales.en_US);

            //purchase AssetID 61002001
            req = new PurchaseClientRequest(user.Email, user.Password);
            req.RequestContent.CreatePurchaseRequest(offer1, PurchasePaymentType.Points);
            res = req.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, res.StatusCode, "Asset purchase failed for AssedID 61002001. Invalid status code");

            //purchase AssetID 61002002
            OfferContext offer2 = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002002().GetOfferContext(Locales.en_US);

            req = new PurchaseClientRequest(user.Email, user.Password);
            req.RequestContent.CreatePurchaseRequest(offer2, PurchasePaymentType.Points);
            res = req.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, res.StatusCode, "Asset purchase failed for AssedID 61002002. Invalid status code");

            // Consume the assets that are purchased by the user
            ConsumeAssetsClientRequest request;
            ConsumeAssetsClientResponse response;

            request = new ConsumeAssetsClientRequest(user.Email, user.Email);
            request.RequestContent.TitleId = offer1.TitleId.ToString();
            request.RequestContent.TransactionId = GenerateGuid();
            request.RequestContent.AssetsToConsume = new Asset[]
            {
                new Asset { AssetId = offer1.AssetId, Quantity = offer1.AssetQuantity},
                new Asset { AssetId = offer2.AssetId, Quantity = offer2.AssetQuantity}
            };
            //consume 61002001  and 61002002 at same time
            response = request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Consume asset failed. StatusCode in not correct");

            //Validate the Asset Quantity using GeAssets response
            GetAssetsClientRequest getAsset_request;
            GetAssetsClientResponse getAsset_response;

            getAsset_request = new GetAssetsClientRequest(user.Email, user.Password);
            getAsset_request.QueryParameters.TitleId = offer1.TitleId.ToString();
            getAsset_request.QueryParameters.SignAssets = "false";

            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, getAsset_response.StatusCode, "StatusCode is not correct");
            Assert.IsNull(getAsset_response.BodyWrapper.mediaAssets, "mediaAssets is not NULL");
        }

        [TestMethod]
        [Owner("srkalyan")]
        [Description("Consume assets for two valid and one invalid Asset in one request")]
        public void ConsumeAssetsTests_VerifyResponse_Consume_Request_With_Two_Valid_And_One_Invalid_Asset()
        {
            //uint initial_asset_quantity;
            PurchaseClientRequest req;
            PurchaseClientResponse res;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer1 = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002001().GetOfferContext(Locales.en_US);

            //purchase AssetID 61002001
            req = new PurchaseClientRequest(user.Email, user.Password);
            req.RequestContent.CreatePurchaseRequest(offer1, PurchasePaymentType.Points);
            res = req.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, res.StatusCode, "Asset purchase failed for AssedID 61002001. Invalid status code");

            //purchase AssetID 61002002
            OfferContext offer2 = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002002().GetOfferContext(Locales.en_US);

            req = new PurchaseClientRequest(user.Email, user.Password);
            req.RequestContent.CreatePurchaseRequest(offer2, PurchasePaymentType.Points);
            res = req.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, res.StatusCode, "Asset purchase failed for AssedID 61002002. Invalid status code");

            // Consume the assets that are purchased by the user
            ConsumeAssetsClientRequest request;
            ConsumeAssetsClientResponse response;

            request = new ConsumeAssetsClientRequest(user.Email, user.Email);
            request.RequestContent.TitleId = offer1.TitleId.ToString();
            request.RequestContent.TransactionId = GenerateGuid();
            request.RequestContent.AssetsToConsume = new Asset[]
            {
                new Asset { AssetId = offer1.AssetId, Quantity = offer1.AssetQuantity},
                new Asset { AssetId = offer2.AssetId, Quantity = offer2.AssetQuantity},
                new Asset { AssetId = offer2.AssetId+1, Quantity = offer2.AssetQuantity} //invalid Asset
            };
            //consume 61002001, 61002002 and an invalid asset at same time
            response = request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Consume asset has passed. StatusCode in not correct");
            Assert.AreEqual(ServiceErrorBucket.AssetBalance.ToString(), response.ServiceErrorMessageWrapper.Bucket, "PDLC Error bucket do not match");
            Assert.AreEqual(XOnline_HResults.XONLINE_E_OFFERING_INVALID_CONSUME_ITEMS, response.ServiceErrorMessageWrapper.ErrorCode, "PDLC Error Code do not match");
            Assert.IsTrue(response.ServiceErrorMessageWrapper.ErrorMessage.Contains("At least one asset to consume is invalid"), "PDLC Error message do not match");

            //Validate the Asset Quantity using GeAssets response
            GetAssetsClientRequest getAsset_request;
            GetAssetsClientResponse getAsset_response;

            getAsset_request = new GetAssetsClientRequest(user.Email, user.Password);
            getAsset_request.QueryParameters.TitleId = offer1.TitleId.ToString();
            getAsset_request.QueryParameters.SignAssets = "false";

            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, getAsset_response.StatusCode, "StatusCode is not correct");
            Assert.IsNotNull(getAsset_response.BodyWrapper.mediaAssets, "mediaAssets is NULL");
            Assert.AreEqual(offer1.AssetQuantity, getAsset_response.BodyWrapper[offer1.AssetId].Quantity, "{0} Asset quantity {1} not matching", offer1.AssetId, offer1.AssetQuantity);
            Assert.AreEqual(offer2.AssetQuantity, getAsset_response.BodyWrapper[offer2.AssetId].Quantity, "{0} Asset quantity {1} not matching", offer2.AssetId, offer2.AssetQuantity);
        }
        
        [TestMethod]
        [Owner("srkalyan")]
        [Description("Consume few (all but 5) assets for two AssetIDs 61002001 and 61002002")]
        public void ConsumeAssetsTests_VerifyResponse_Consume_Partial_Quantity_For_Two_Assets()
        {
            //uint initial_asset_quantity;
            PurchaseClientRequest req;
            PurchaseClientResponse res;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer1 = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002001().GetOfferContext(Locales.en_US);

            //purchase AssetID 61002001
            req = new PurchaseClientRequest(user.Email, user.Password);
            req.RequestContent.CreatePurchaseRequest(offer1, PurchasePaymentType.Points);
            res = req.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, res.StatusCode, "Asset purchase failed for AssedID 61002001. Invalid status code");

            //purchase AssetID 61002002
            OfferContext offer2 = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002002().GetOfferContext(Locales.en_US);

            req = new PurchaseClientRequest(user.Email, user.Password);
            req.RequestContent.CreatePurchaseRequest(offer2, PurchasePaymentType.Points);
            res = req.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, res.StatusCode, "Asset purchase failed for AssedID 61002002. Invalid status code");

            // Consume the assets that are purchased by the user
            ConsumeAssetsClientRequest request;
            ConsumeAssetsClientResponse response;

            request = new ConsumeAssetsClientRequest(user.Email, user.Email);
            request.RequestContent.TitleId = offer1.TitleId.ToString();
            request.RequestContent.TransactionId = GenerateGuid();
            request.RequestContent.AssetsToConsume = CreateSingleAssetList(offer1.AssetId, offer1.AssetQuantity-5); 

            //consume 61002001 Asset
            response = request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Consume asset failed. StatusCode in not correct");

            //consume 61002002 Asset
            request.RequestContent.TransactionId = GenerateGuid();
            request.RequestContent.AssetsToConsume = CreateSingleAssetList(offer2.AssetId, offer2.AssetQuantity-5); 

            response = request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Consume asset failed. StatusCode in not correct");

            //Validate the Asset Quantity using GeAssets response
            GetAssetsClientRequest getAsset_request;
            GetAssetsClientResponse getAsset_response;

            getAsset_request = new GetAssetsClientRequest(user.Email, user.Password);
            getAsset_request.QueryParameters.TitleId = offer1.TitleId.ToString();
            getAsset_request.QueryParameters.SignAssets = "false";

            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, getAsset_response.StatusCode, "StatusCode is not correct");
            Assert.IsNotNull(getAsset_response.BodyWrapper.mediaAssets, "mediaAssets is not NULL");
            Assert.AreEqual(2, getAsset_response.BodyWrapper.mediaAssets.Count, "Media Asset count is not equal to 2, there should be 2 Assets in the response for 61002001 and 61002002");

            //Verify Asset1 in the response
            Assert.AreEqual((uint)5, getAsset_response.BodyWrapper[offer1.AssetId].Quantity, "AssetID {0} with Asset Quantity {1} not found", offer1.AssetId, offer1.AssetQuantity);
            Assert.IsNotNull(getAsset_response.BodyWrapper[offer1.AssetId].MediaInstanceURLs, "Event though the quanity is correct, it's not returning the MediaInstanceURLs within the response. POSSALE ISSUE: MarketPlace / Fast request is failing (http://le-xblob-dev02:12030/marketplacecatalog/v1/product/en-us?tiers=2&producttypes=59)");
            Assert.AreEqual(0, getAsset_response.BodyWrapper[offer1.AssetId].MediaInstanceURLs.Except(offer1.MediaInstanceURLs).Count(), "AssetID 61002001 Media instance URLs do not match.");

            //Verify Asset2 in the response
            Assert.AreEqual((uint)5, getAsset_response.BodyWrapper[offer2.AssetId].Quantity, "AssetID {0} with Asset Quantity {1} not found", offer2.AssetId, offer2.AssetQuantity);
            Assert.IsNotNull(getAsset_response.BodyWrapper[offer2.AssetId].MediaInstanceURLs, "Event though the quanity is correct, it's not returning the MediaInstanceURLs within the response. POSSALE ISSUE: MarketPlace / Fast request is failing (http://le-xblob-dev02:12030/marketplacecatalog/v1/product/en-us?tiers=2&producttypes=59)");
            Assert.AreEqual(0, getAsset_response.BodyWrapper[offer2.AssetId].MediaInstanceURLs.Except(offer2.MediaInstanceURLs).Count(), "AssetID {0} Media instance URLs do not match", offer2.AssetId);
        }
        
        [TestMethod]
        [Owner("srkalyan")]
        [Description("Consume one of two assets for AssetIDs 61002001 and 61002002 (Consume 61002001 completely here)")]
        public void ConsumeAssetsTests_VerifyResponse_Consume_All_Quantity_For_One_Of_Two_Assets()
        {
            //uint initial_asset_quantity;
            PurchaseClientRequest req;
            PurchaseClientResponse res;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer1 = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002001().GetOfferContext(Locales.en_US);

            //purchase AssetID 61002001
            req = new PurchaseClientRequest(user.Email, user.Password);
            req.RequestContent.CreatePurchaseRequest(offer1, PurchasePaymentType.Points);
            res = req.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, res.StatusCode, "Asset purchase failed for AssedID 61002001. Invalid status code");

            //purchase AssetID 61002002
            OfferContext offer2 = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002002().GetOfferContext(Locales.en_US);

            req = new PurchaseClientRequest(user.Email, user.Password);
            req.RequestContent.CreatePurchaseRequest(offer2, PurchasePaymentType.Points);
            res = req.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, res.StatusCode, "Asset purchase failed for AssedID 61002002. Invalid status code");

            // Consume the assets that are purchased by the user
            ConsumeAssetsClientRequest request;
            ConsumeAssetsClientResponse response;

            request = new ConsumeAssetsClientRequest(user.Email, user.Email);
            request.RequestContent.TitleId = offer1.TitleId.ToString();
            request.RequestContent.TransactionId = GenerateGuid();
            request.RequestContent.AssetsToConsume = CreateSingleAssetList(offer1.AssetId, offer1.AssetQuantity);

            //consume 61002001 Asset
            response = request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Consume asset failed. StatusCode in not correct");

            //Validate the Asset Quantity using GeAssets response
            GetAssetsClientRequest getAsset_request;
            GetAssetsClientResponse getAsset_response;

            getAsset_request = new GetAssetsClientRequest(user.Email, user.Password);
            getAsset_request.QueryParameters.TitleId = offer1.TitleId.ToString();
            getAsset_request.QueryParameters.SignAssets = "false";

            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, getAsset_response.StatusCode, "StatusCode is not correct");
            Assert.IsNotNull(getAsset_response.BodyWrapper.mediaAssets, "mediaAssets is not NULL");
            Assert.AreEqual(1, getAsset_response.BodyWrapper.mediaAssets.Count, "Media Asset count is not equal to 1, there should be only one for AssetID 61002002");
            
            //Verify Asset2
            Assert.AreEqual(offer2.AssetQuantity, getAsset_response.BodyWrapper[offer2.AssetId].Quantity, "AssetID {0} with Asset Quantity {1} not found", offer2.AssetId, offer2.AssetQuantity);
            Assert.IsNotNull(getAsset_response.BodyWrapper[offer2.AssetId].MediaInstanceURLs, "Event though the quanity is correct, it's not returning the MediaInstanceURLs within the response. POSSALE ISSUE: MarketPlace / Fast request is failing (http://le-xblob-dev02:12030/marketplacecatalog/v1/product/en-us?tiers=2&producttypes=59).");
            Assert.AreEqual(0, getAsset_response.BodyWrapper[offer2.AssetId].MediaInstanceURLs.Except(offer2.MediaInstanceURLs).Count(), "AssetID {0} Media instance URLs do not match", offer2.AssetId);                        
        }

        [TestMethod]
        [Owner("srkalyan")]
        [Description("Consume one of two assets for AssetIDs 61002001 with duplicate TransactionID")]
        public void ConsumeAssetsTests_VerifyResponse_Consume_Partial_Quantity_For_One_Asset_With_Duplicate_TrasactionID()
        {
            string Duplicate_TransactionID;
            //uint initial_asset_quantity;
            PurchaseClientRequest req;
            PurchaseClientResponse res;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer1 = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002001().GetOfferContext(Locales.en_US);

            //purchase AssetID 61002001
            req = new PurchaseClientRequest(user.Email, user.Password);
            req.RequestContent.CreatePurchaseRequest(offer1, PurchasePaymentType.Points);
            res = req.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, res.StatusCode, "Asset purchase failed for AssedID 61002001. Invalid status code");

            // Consume the assets that are purchased by the user
            ConsumeAssetsClientRequest request;
            ConsumeAssetsClientResponse response;

            request = new ConsumeAssetsClientRequest(user.Email, user.Email);
            request.RequestContent.TitleId = offer1.TitleId.ToString();
            request.RequestContent.TransactionId = GenerateGuid();
            Duplicate_TransactionID = request.RequestContent.TransactionId;
            request.RequestContent.AssetsToConsume = CreateSingleAssetList(offer1.AssetId, offer1.AssetQuantity-5); //Consume all but 5

            //consume 61002001 Asset
            response = request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Consume asset failed. StatusCode in not correct");

            //Validate the Asset Quantity using GeAssets response
            GetAssetsClientRequest getAsset_request;
            GetAssetsClientResponse getAsset_response;

            getAsset_request = new GetAssetsClientRequest(user.Email, user.Password);
            getAsset_request.QueryParameters.TitleId = offer1.TitleId.ToString();
            getAsset_request.QueryParameters.SignAssets = "false";

            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, getAsset_response.StatusCode, "StatusCode is not correct");
            Assert.IsNotNull(getAsset_response.BodyWrapper.mediaAssets, "mediaAssets is not NULL");
            Assert.AreEqual(1, getAsset_response.BodyWrapper.mediaAssets.Count, "Media Asset count is not equal to 1");

            //Verify Asset1
            Assert.AreEqual((uint)5, getAsset_response.BodyWrapper[offer1.AssetId].Quantity, "AssetID {0} with Asset Quantity {1} not found", offer1.AssetId, offer1.AssetQuantity);
            Assert.IsNotNull(getAsset_response.BodyWrapper[offer1.AssetId].MediaInstanceURLs, "Event though the quanity is correct, it's not returning the MediaInstanceURLs within the response. POSSALE ISSUE: MarketPlace / Fast request is failing (http://le-xblob-dev02:12030/marketplacecatalog/v1/product/en-us?tiers=2&producttypes=59)");
            Assert.AreEqual(0, getAsset_response.BodyWrapper[offer1.AssetId].MediaInstanceURLs.Except(offer1.MediaInstanceURLs).Count(), "AssetID {0} Media instance URLs do not match.", offer1.AssetId);                                    

            //Try to consume remaining 5 asset with same TransactionID that was used earlier.
            request = new ConsumeAssetsClientRequest(user.Email, user.Email);
            request.RequestContent.TitleId = offer1.TitleId.ToString();
            request.RequestContent.TransactionId = Duplicate_TransactionID; //Use the same Transaction ID here.
            request.RequestContent.AssetsToConsume = CreateSingleAssetList(offer1.AssetId, 5); //Consume remaining 5 assets that are left

            //consume 61002001 Asset
            response = request.MakeARequest();
            
            
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Consume should fail. StatusCode in not correct");
            Assert.IsNotNull(response.ServiceErrorMessageWrapper, "PDLC error message is NULL");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Error Bucket do not match");
            Assert.AreEqual(XOnline_HResults.XONLINE_E_TRACKED_API_DUPLICATE_TRACKING_GUID, response.ServiceErrorMessageWrapper.ErrorCode, "Error code do not match");
            Assert.IsTrue(response.ServiceErrorMessageWrapper.ErrorMessage.Contains("Transaction id has already been used by a different request. Please try again with a new GUID"));

            //Check the balance using GetAssets to verify if the assets are not consumed for transaction that used duplicate Transaction ID
            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, getAsset_response.StatusCode, "StatusCode is not correct");
            Assert.IsNotNull(getAsset_response.BodyWrapper.mediaAssets, "mediaAssets is not NULL");
            Assert.AreEqual(1, getAsset_response.BodyWrapper.mediaAssets.Count, "Media Asset count is not equal to 1");
            
            Assert.AreEqual((uint)5, getAsset_response.BodyWrapper[offer1.AssetId].Quantity, "AssetID {0} with Asset Quantity {1} not found", offer1.AssetId, offer1.AssetQuantity);
            Assert.AreEqual(0, getAsset_response.BodyWrapper[offer1.AssetId].MediaInstanceURLs.Except(offer1.MediaInstanceURLs).Count(), "AssetID {0} Media instance URLs do not match", offer1.AssetId);                        

        }

        [TestMethod]
        [Owner("srkalyan")]
        [Description("Consume one of two assets for AssetIDs 61002001 with duplicate TransactionID")]
        public void ConsumeAssetsTests_VerifyResponse_Consume_Excess_Quantity_For_One_Asset()
        {
            string Duplicate_TransactionID;
            //uint initial_asset_quantity;
            PurchaseClientRequest req;
            PurchaseClientResponse res;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer1 = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002001().GetOfferContext(Locales.en_US);

            //purchase AssetID 61002001
            req = new PurchaseClientRequest(user.Email, user.Password);
            req.RequestContent.CreatePurchaseRequest(offer1, PurchasePaymentType.Points);
            res = req.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, res.StatusCode, "Asset purchase failed for AssedID 61002001. Invalid status code");

            // Consume the assets that are purchased by the user
            ConsumeAssetsClientRequest request;
            ConsumeAssetsClientResponse response;

            request = new ConsumeAssetsClientRequest(user.Email, user.Email);
            request.RequestContent.TitleId = offer1.TitleId.ToString();
            request.RequestContent.TransactionId = GenerateGuid();
            Duplicate_TransactionID = request.RequestContent.TransactionId;
            request.RequestContent.AssetsToConsume = CreateSingleAssetList(offer1.AssetId, offer1.AssetQuantity - 5); //Consume all but 5

            //consume 61002001 Asset
            response = request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Consume asset failed. StatusCode in not correct");

            //Validate the Asset Quantity using GeAssets response
            GetAssetsClientRequest getAsset_request;
            GetAssetsClientResponse getAsset_response;

            getAsset_request = new GetAssetsClientRequest(user.Email, user.Password);
            getAsset_request.QueryParameters.TitleId = offer1.TitleId.ToString();
            getAsset_request.QueryParameters.SignAssets = "false";

            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, getAsset_response.StatusCode, "StatusCode is not correct");
            Assert.IsNotNull(getAsset_response.BodyWrapper.mediaAssets, "mediaAssets is not NULL");
            Assert.AreEqual(1, getAsset_response.BodyWrapper.mediaAssets.Count, "Media Asset count is not equal to 1");

            //Verify Asset1
            Assert.AreEqual((uint)5, getAsset_response.BodyWrapper[offer1.AssetId].Quantity, "AssetID {0} with Asset Quantity {1} not found", offer1.AssetId, offer1.AssetQuantity);
            Assert.IsNotNull(getAsset_response.BodyWrapper[offer1.AssetId].MediaInstanceURLs, "Event though the quanity is correct, it's not returning the MediaInstanceURLs within the response. POSSALE ISSUE: MarketPlace / Fast request is failing (http://le-xblob-dev02:12030/marketplacecatalog/v1/product/en-us?tiers=2&producttypes=59)");
            Assert.AreEqual(0, getAsset_response.BodyWrapper[offer1.AssetId].MediaInstanceURLs.Except(offer1.MediaInstanceURLs).Count(), "AssetID {0} Media instance URLs do not match.", offer1.AssetId);

            //Try to consume remaining 5 asset with same TransactionID that was used earlier.
            request = new ConsumeAssetsClientRequest(user.Email, user.Email);
            request.RequestContent.TitleId = offer1.TitleId.ToString();
            request.RequestContent.TransactionId = GenerateGuid();
            request.RequestContent.AssetsToConsume = CreateSingleAssetList(offer1.AssetId, 6); //Consume remaining 6 assets, one more than what is left

            //consume 61002001 Asset
            response = request.MakeARequest();

            //TO DO: We have bug in live cache where it returns SUCCESS even when consume call fails because of duplicate Transaction ID and PLDC service in turn returns 200 back.
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Consume should fail. StatusCode in not correct");
            Assert.AreEqual(ServiceErrorBucket.AssetBalance.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Pdlc Error bucket do not match {0}", ServiceErrorBucket.AssetBalance.ToString());
            Assert.AreEqual(XOnline_HResults.XONLINE_E_OFFERING_INVALID_CONSUME_ITEMS, response.ServiceErrorMessageWrapper.ErrorCode, "Pdlc Error Code do not match {0}", XOnline_HResults.XONLINE_E_OFFERING_INVALID_CONSUME_ITEMS);
            Assert.AreEqual("At least one asset to consume is invalid.", response.ServiceErrorMessageWrapper.ErrorMessage, "Pdlc Error Message do not match");

            //Check the balance using GetAssets to verify if the assets are not consumed
            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, getAsset_response.StatusCode, "StatusCode is not correct");
            Assert.IsNotNull(getAsset_response.BodyWrapper.mediaAssets, "mediaAssets is not NULL");
            Assert.AreEqual(1, getAsset_response.BodyWrapper.mediaAssets.Count, "Media Asset count is not equal to 1");

            Assert.AreEqual((uint)5, getAsset_response.BodyWrapper[offer1.AssetId].Quantity, "AssetID {0} with Asset Quantity {1} not found", offer1.AssetId, offer1.AssetQuantity);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\PDLC.Test\PDLC.Tests.ConsumeAssets\ConsumeAssets_ValidRequests.cs ===
﻿using System;
using System.Diagnostics;
using System.Net;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using LiveNew.Test;

using LiveN.Test;
using LiveN.Test.Common;
using LiveN.Test.Content;
using LiveN.Test.Users;

namespace PDLC.Tests
{
    /// <summary>
    /// ConsumeAssets valid requests
    /// </summary>
    public partial class ConsumeAssetsTests
    {
        [TestMethod]
        [Owner("srkalyan")]
        [Description("Valid Request with invalid Locale")]
        public void ConsumeAssetsTests_ValidRequest_Locale_invalid()
        {
            uint initial_asset_quantity;
            PurchaseClientRequest req;
            PurchaseClientResponse res;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002001().GetOfferContext(Locales.en_US);

            req = new PurchaseClientRequest(user.Email, user.Password);
            req.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            res = req.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, res.StatusCode, "Asset purchase failed. Invalid status code");

            GetAssetsClientRequest getAsset_request;
            GetAssetsClientResponse getAsset_response;

            getAsset_request = new GetAssetsClientRequest(user.Email, user.Password);
            getAsset_request.QueryParameters.TitleId = offer.TitleId.ToString();
            getAsset_request.QueryParameters.SignAssets = "false";

            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, getAsset_response.StatusCode, "StatusCode is not correct");
            Assert.AreEqual(getAsset_response.BodyWrapper.mediaAssets.Count, 1, "Asset count is not equal to 1");
            initial_asset_quantity = getAsset_response.BodyWrapper.mediaAssets[0].Quantity;
            Trace.TraceInformation(" Purchased AssetID {0} with Quantity {1} \n", getAsset_response.BodyWrapper.mediaAssets[0].AssetId, getAsset_response.BodyWrapper.mediaAssets[0].Quantity);

            // Consume the assets that are purchased by the user
            ConsumeAssetsClientRequest request;
            ConsumeAssetsClientResponse response;

            request = new ConsumeAssetsClientRequest(user.Email, user.Email);
            request.RequestContent.TitleId = offer.TitleId.ToString();
            request.RequestContent.TransactionId = GenerateGuid();
            request.RequestContent.AssetsToConsume = StaticAssets;
            request.HeaderCollection.Add(PDLCServicesCommon.LOCALE, "Invalid_Locale");

            response = request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Consume asset failed. StatusCode in not correct");

            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, getAsset_response.StatusCode, "StatusCode is not correct");
            Assert.AreEqual(getAsset_response.BodyWrapper.mediaAssets.Count, 1, "Asset count is not equal to 1");
            Assert.AreEqual(initial_asset_quantity - 1, getAsset_response.BodyWrapper.mediaAssets[0].Quantity, "The consume call did not decrement the quantity by value of 1");            
        }

        [TestMethod]
        [Owner("srkalyan")]
        [Description("Valid Request with empty Locale")]
        public void ConsumeAssetsTests_ValidRequest_Locale_empty()
        {
            uint initial_asset_quantity;
            PurchaseClientRequest req;
            PurchaseClientResponse res;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002001().GetOfferContext(Locales.en_US);

            req = new PurchaseClientRequest(user.Email, user.Password);
            req.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            res = req.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, res.StatusCode, "Asset purchase failed. Invalid status code");

            GetAssetsClientRequest getAsset_request;
            GetAssetsClientResponse getAsset_response;

            getAsset_request = new GetAssetsClientRequest(user.Email, user.Password);
            getAsset_request.QueryParameters.TitleId = offer.TitleId.ToString();
            getAsset_request.QueryParameters.SignAssets = "false";

            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, getAsset_response.StatusCode, "StatusCode is not correct");
            Assert.AreEqual(getAsset_response.BodyWrapper.mediaAssets.Count, 1, "Asset count is not equal to 1");
            initial_asset_quantity = getAsset_response.BodyWrapper.mediaAssets[0].Quantity;
            Trace.TraceInformation(" Purchased AssetID {0} with Quantity {1} \n", getAsset_response.BodyWrapper.mediaAssets[0].AssetId, getAsset_response.BodyWrapper.mediaAssets[0].Quantity);

            // Consume the assets that are purchased by the user
            ConsumeAssetsClientRequest request;
            ConsumeAssetsClientResponse response;

            request = new ConsumeAssetsClientRequest(user.Email, user.Email);
            request.RequestContent.TitleId = offer.TitleId.ToString();
            request.RequestContent.TransactionId = GenerateGuid();
            request.RequestContent.AssetsToConsume = StaticAssets;
            request.HeaderCollection.Add(PDLCServicesCommon.LOCALE, "");

            response = request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Consume asset failed. StatusCode in not correct");

            getAsset_response = getAsset_request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, getAsset_response.StatusCode, "StatusCode is not correct");
            Assert.AreEqual(getAsset_response.BodyWrapper.mediaAssets.Count, 1, "Asset count is not equal to 1");
            Assert.AreEqual(initial_asset_quantity - 1, getAsset_response.BodyWrapper.mediaAssets[0].Quantity, "The consume call did not decrement the quantity by value of 1");
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\PDLC.Test\PDLC.Tests.GADGET\GadgetTests.cs ===
﻿using System;
using System.Diagnostics;
using System.Net;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using LiveNew.Test;

using live.common;

using LiveN.Test;
using LiveN.Test.Common;
using LiveN.Test.Users;

namespace PDLC.Tests
{
    /// <summary>
    /// PDLC Gadget Test suite. All tests that are used within Service Monitoring (ServiceVerifier solution) Gadget.
    /// </summary>
    [TestClass]
    public partial class GadgetTests
    {
        /// <summary>
        /// Get or set the environment the test suite should run against
        /// </summary>
        public EnvironmentElement SelectedEnvironment
        {
            get
            {
                if (_selectedEnvironment == null)
                {
                    return CurrentEnvironmentSettings.SelectedEnvironment;
                }

                return _selectedEnvironment;
            }
            set
            {
                _selectedEnvironment = value;
            }
        }
        private EnvironmentElement _selectedEnvironment = null;

        /// <summary>
        /// URL of the service PDLC that's going to be hit within your test
        /// </summary>
        public string PDLCServiceUrl
        {
            get
            {
                return this.SelectedEnvironment.PDLCServices.OriginalString;
            }
        }

        /// <summary>
        /// Email account name used for the tests
        /// </summary>
        public string UserEmail
        {
            get
            {
                return this.SelectedEnvironment.UserSettings[0].UserEmail;
            }
        }

        /// <summary>
        /// Password for account used for the tests
        /// </summary>
        public string UserPassword
        {
            get
            {
                return this.SelectedEnvironment.UserSettings[0].Password;
            }
        }

        /// <summary>
        /// Get the Title used for this tests
        /// </summary>
        public TitleElement TitleId
        {
            get
            {
                return this.SelectedEnvironment.Titles[0];
            }
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure the PDLC GamerContext Service is up and running.")]
        public void GadgetTests_GamerContext()
        {
            GamerContextClientResponse response;
            GamerContextClientRequest request = new GamerContextClientRequest(this.SelectedEnvironment, this.UserEmail, this.UserPassword);

            // Required to set the TitleId becuase the default test title does nto exist within any environment ourside our test environments.
            request.Title = this.TitleId;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Response status code should have been OK.");
            Assert.AreEqual(Locales.en_US, response.BodyWrapper.LegalLocale, "Ensures response has at least one value set. User should always have it's LegalLocale set the us.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure the basic Get Points Balance is working")]
        public void GadgetTests_GetPointsBalance()
        {
            GetPointsBalanceClientRequest request;
            GetPointsBalanceClientResponse response;

            request = new GetPointsBalanceClientRequest(this.SelectedEnvironment, this.UserEmail, this.UserPassword);

            // Required to set the TitleId becuase the default test title does nto exist within any environment ourside our test environments.
            request.Title = this.TitleId;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "StatusCode in not correct");
            Assert.IsNotNull(response.BodyWrapper.PointsBalance, "Ensures response can be parsed.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure the basic Verify Token is working. Calling VerifyToken with Random Guid and expecting it to call the Back End and get back that it's an invalid Token.")]
        public void GadgetTests_VerifyToken()
        {
            VerifyTokenClientRequest request;
            VerifyTokenClientResponse response;

            request = new VerifyTokenClientRequest(this.SelectedEnvironment, this.UserEmail, this.UserPassword);

            // Required to set the TitleId becuase the default test title does nto exist within any environment ourside our test environments.
            request.Title = this.TitleId;
            request.QueryParameters.StoreId = ((uint)MarketplaceStore.Mobile).ToString();

            // Selected a random Guid to put there.
            request.QueryParameters.BillingToken = "e47f8509-f581-4a47-87f9-08bf68ee3980";

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "StatusCode in not correct");
            Assert.IsTrue(response.IsServiceErrorMessage, "Service Error Message should have been returned.");
            Assert.AreEqual("Token invalid, used, expired or not avaible at this time or region.", response.ServiceErrorMessageWrapper.ErrorMessage, "Error message has changed or is invalid.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure the basic Purchase is working by trying to purchase an invalid Offer.")]
        public void GadgetTests_Purchase()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            OfferContext offer = new OfferContext();

            // Custructing a FAKE Offer
            offer.GameContentTypeId = 59;
            offer.OfferId = new Guid("e47f8509-f581-4a47-87f9-08bf68ee3981"); 
            offer.PointsPricePoints = 250; 
            offer.PointsPriceToken = 250; 
            offer.ProductId = new Guid("e47f8509-f581-4a47-87f9-08bf68ee3982"); 
            offer.Title = "This Offer really does nto exist";
            
            request = new PurchaseClientRequest(this.SelectedEnvironment, this.UserEmail, this.UserPassword);

            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            
            // Required to set the TitleId becuase the default test title does nto exist within any environment ourside our test environments.
            request.Title = this.TitleId;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Invalid status code");
            Assert.IsTrue(response.IsServiceErrorMessage, "Service Error Message should have been returned.");
            Assert.AreEqual("Invalid offerId:e47f8509-f581-4a47-87f9-08bf68ee3981, or User cannot purchase offer due to geofencing.", response.ServiceErrorMessageWrapper.ErrorMessage, "Error message has changed or is invalid.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure the basic Unsgined GetReceipts is working. Requests for the default Titles receipt.")]
        public void GadgetTests_GetReceiptsUnsigned()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;

            request = new GetReceiptsClientRequest(this.SelectedEnvironment, this.UserEmail, this.UserPassword);

            // Required to set the TitleId becuase the default test title does not exist within any environment ourside our test environments.
            request.Title = this.TitleId;
            request.RequestContent.TitleId = this.TitleId.Id;
            request.RequestContent.SignReceipts = bool.FalseString.ToLower();

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code was returned.");
            Assert.IsTrue(response.BodyWrapper.TotalItems >= 0, "TotalItems should be greater than. TotalItems returned:'" + response.BodyWrapper.TotalItems.ToString() + "'");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure the basic Signed GetReceipts is working. Requests for the default Titles receipt.")]
        public void GadgetTests_GetReceiptsSigned()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;

            request = new GetReceiptsClientRequest(this.SelectedEnvironment, this.UserEmail, this.UserPassword);

            // Required to set the TitleId becuase the default test title does not exist within any environment ourside our test environments.
            request.Title = this.TitleId;
            request.RequestContent.TitleId = this.TitleId.Id;
            request.RequestContent.SignReceipts = bool.TrueString.ToLower();

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code was returned.");
            Assert.IsTrue(response.BodyWrapper.TotalItems >= 0, "TotalItems should be greater than. TotalItems returned:'" + response.BodyWrapper.TotalItems.ToString() + "'");
            Assert.IsTrue(response.Body.Contains("<Signature "), "Signed receipt should have the Signature Xml Node within the response.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure the basic GetAsset is working. Requests for the default Titles assets.")]
        public void GadgetTests_GetAssets()
        {
            GetAssetsClientRequest request;
            GetAssetsClientResponse response;

            request = new GetAssetsClientRequest(this.SelectedEnvironment, this.UserEmail, this.UserPassword);

            // Required to set the TitleId becuase the default test title does nto exist within any environment ourside our test environments.
            request.Title = this.TitleId;

            request.QueryParameters.TitleId = request.Title.Id;
            request.QueryParameters.SignAssets = bool.FalseString.ToLower();

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "StatusCode is not correct");
            Assert.IsTrue(response.Body.StartsWith("<MediaAssets "), "Response body needs to start with <MediaAssets. But it's not in this cases.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure the basic Consume Assets is working by trying to Consume an Invalid Asset.")]
        public void GadgetTests_ConsumeAssets()
        {
            ConsumeAssetsClientRequest request;
            ConsumeAssetsClientResponse response;

            request = new ConsumeAssetsClientRequest(this.SelectedEnvironment, this.UserEmail, this.UserPassword);

            // Required to set the TitleId becuase the default test title does nto exist within any environment ourside our test environments.
            request.Title = this.TitleId;

            // Custruct the request to consume a FAKE asset 
            request.RequestContent.TitleId = request.Title.Id;
            request.RequestContent.TransactionId = Guid.NewGuid().ToString();
            request.RequestContent.AssetsToConsume = new Asset[]
                                                            {
                                                                new Asset { AssetId = 12345678, Quantity = 1}
                                                            };

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Invalid status code");
            Assert.IsTrue(response.IsServiceErrorMessage, "Service Error Message should have been returned.");
            Assert.AreEqual("At least one asset to consume is invalid.", response.ServiceErrorMessageWrapper.ErrorMessage, "Error message has changed or is invalid.");
        }     
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\PDLC.Test\PDLC.Tests.GamerContext\GamerContextTests_InvalidRequests.cs ===
﻿using System.Net;
using System.Diagnostics;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using LiveN.Test;

namespace PDLC.Tests
{
    /// <summary>
    /// InvalidRequests contains tests to ensure an invalid request is handled appropriately
    /// </summary>
    public partial class GamerContextTests
    {
        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending in a post when a GET is expected")]
        public void GamerContextTests_InvalidRequests_POST()
        {
            GamerContextClientResponse response;
            GamerContextClientRequest request = new GamerContextClientRequest(StaticUserEmail, StaticUserPassword);

            request.Method = HttpMethods.POST;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.MethodNotAllowed, response.StatusCode, "StatusCode in not correct");
            Assert.IsFalse(response.IsServiceErrorMessage, "In this cases, calls does not make it to our code. Thus no ServiceErrorMessage can be returned.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending up request without partner token")]
        public void GamerContextTests_InvalidRequests_AuthToken_MissingHeader()
        {
            GamerContextClientResponse response;
            GamerContextClientRequest request = new GamerContextClientRequest(StaticUserEmail, StaticUserPassword);

            request.SetAuthenticationToken = false;
            request.Headers.PartnerAuthorization = null;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode, "StatusCode in not correct");
            Assert.IsFalse(response.IsServiceErrorMessage, "In this cases, calls does not make it to our code. Thus no ServiceErrorMessage can be returned.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending up request with empty partner token")]
        public void GamerContextTests_InvalidRequests_AuthToken_EmptyHeader()
        {
            GamerContextClientResponse response;
            GamerContextClientRequest request = new GamerContextClientRequest(StaticUserEmail, StaticUserPassword);

            request.SetAuthenticationToken = false;
            request.Headers.PartnerAuthorization = string.Empty;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode, "StatusCode in not correct");
            Assert.IsFalse(response.IsServiceErrorMessage, "In this cases, calls does not make it to our code. Thus no ServiceErrorMessage can be returned.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending GamerContext request using a valid Auduince uri but not for GamerContext. GamerContext requires long lived uri.")]
        public void GamerContextTests_InvalidRequests_AuthToken_WrongAudienceUri()
        {
            GamerContextClientResponse response;
            GamerContextClientRequest request = new GamerContextClientRequest(StaticUserEmail, StaticUserPassword);

            request.SetAuthenticationToken = false;
            request.Headers.PartnerAuthorization = PDLCServicesCommon.AUTH_PREFIX + request.Auth.GetPartnerToken(request.UserEmail, request.Password, request.Title, "http://xboxlive.com/avatar");

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode, "StatusCode in not correct");
            Assert.IsFalse(response.IsServiceErrorMessage, "In this cases, calls does not make it to our code. Thus no ServiceErrorMessage can be returned.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending up request with invalid PlatformType within the header")]
        public void GamerContextTests_InvalidRequests_PaltformType_Invalid()
        {
            // OLD BUGs: 11101
            GamerContextClientResponse response;
            GamerContextClientRequest request = new GamerContextClientRequest(StaticUserEmail, StaticUserPassword);

            request.Headers.PlatformType = "Invalid_PlatformType";

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "StatusCode in not correct");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Response LiveN error code invalid.");
            Assert.AreEqual("X-Platform-Type header is limited to  Mobile", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending up request with an unsupported PlatformType within the header")]
        public void GamerContextTests_InvalidRequests_PaltformType_UnsupportedRandomPositiveNum()
        {
            // OLD BUGs: 11101, 12323
            int platformType;
            GamerContextClientResponse response;
            GamerContextClientRequest request = new GamerContextClientRequest(StaticUserEmail, StaticUserPassword);
            
            // Only supported the mobile platform type 5
            platformType = rnd.Next(6, int.MaxValue);

            Trace.WriteLine("For this test, using PlatformType=" + platformType.ToString());

            request.Headers.PlatformType = platformType.ToString();

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "StatusCode in not correct");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Response LiveN error code invalid.");
            Assert.AreEqual("X-Platform-Type header is limited to  Mobile", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending up request with an unsupported PlatformType within the header")]
        public void GamerContextTests_InvalidRequests_PaltformType_UnsupportedRandomNegitiveNum()
        {
            // OLD BUGs: 11101, 12323
            int platformType;
            GamerContextClientResponse response;
            GamerContextClientRequest request = new GamerContextClientRequest(StaticUserEmail, StaticUserPassword);

            // Only supported the mobile platform type 5
            platformType = rnd.Next(int.MinValue, 4);

            Trace.WriteLine("For this test, using PlatformType=" + platformType.ToString());

            request.Headers.PlatformType = platformType.ToString();

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "StatusCode in not correct");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Response LiveN error code invalid.");
            Assert.AreEqual("X-Platform-Type header is limited to  Mobile", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
         }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending up request with invalid PlatformType within the header")]
        public void GamerContextTests_InvalidRequests_PaltformType_EmptyHeader()
        {
            // OLD BUGs: 11101
            GamerContextClientResponse response;
            GamerContextClientRequest request = new GamerContextClientRequest(StaticUserEmail, StaticUserPassword);

            request.Headers.PlatformType = string.Empty;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "StatusCode in not correct");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Response LiveN error code invalid.");
            Assert.AreEqual("X-Platform-Type header is missing or empty", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending up request with invalid PlatformType within the header")]
        public void GamerContextTests_InvalidRequests_PaltformType_MissingHeader()
        {
            // OLD BUGs: 11101
            GamerContextClientResponse response;
            GamerContextClientRequest request = new GamerContextClientRequest(StaticUserEmail, StaticUserPassword);

            request.Headers.PlatformType = null;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "StatusCode in not correct");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Response LiveN error code invalid.");
            Assert.AreEqual("X-Platform-Type header is missing or empty", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\PDLC.Test\PDLC.Tests.GamerContext\GamerContextTests_Manual.cs ===
﻿using System.Net;
using System.Diagnostics;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using LiveN.Test;

namespace PDLC.Tests
{
    /// <summary>
    /// Manual test cases that have not been automated yet
    /// </summary>
    public partial class GamerContextTests
    {
        [TestMethod]
        [Owner("rsnyder")]
        [Description("Response for Throttled Live Cache call")]
        public void GamerContextTests_Manual_ThrottledLiveCache()
        {
            //Last time this test was Manually verified:
            // -Has Not been Tested 2/07/2011

            Assert.Inconclusive("Need to implement");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("GamerContextTests calls many LiveCache APIs. Need to verify that if one of them fail, the entire return is marked as a failure. Request is Atomic. All or Nothing.")]
        public void GamerContextTests_Manual_OneLiveCachFails()
        {
            //Last time this test was Manually verified:
            // -Has Not been Tested 2/07/2011

            Assert.Inconclusive("Need to implement");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\PDLC.Test\PDLC.Tests.GamerContext\GamerContextTests.cs ===
﻿using System;
using System.Net;
using System.Diagnostics;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using live.common;

using LiveNew.Test;

using LiveN.Test;
using LiveN.Test.Users;
using LiveN.Test.Common;

namespace PDLC.Tests
{
    /// <summary>
    /// Based class for Gamer Context Tests. Contains BVTs and general setup for all other areas.
    /// </summary>
    [TestClass]
    public partial class GamerContextTests
    {
        /// <summary>
        /// User email for default cases
        /// </summary>
        private static string StaticUserEmail;

        /// <summary>
        /// User password for default cases
        /// </summary>
        private static string StaticUserPassword;

        /// <summary>
        /// Reference to the event viewer
        /// </summary>
        private static EventViewer myEvents;

        /// <summary>
        /// Global random number generator to be used by all
        /// </summary>
        public static Random rnd = new Random();

        [ClassInitialize]
        public static void TestClassInitialize(TestContext context)
        {
            myEvents = new EventViewer(".", "Application", "pdlc_service");

            // Static user that has already been created within the environment
            StaticUserEmail = CurrentEnvironmentSettings.UserSettings[0].UserEmail;
            StaticUserPassword = CurrentEnvironmentSettings.UserSettings[0].Password;
        }

        [TestInitialize]
        public void myTestInitialize()
        {
            myEvents.ResetEventStartPosition();
        }

        [TestCleanup]
        public void myTestCleanup()
        {
            Trace.WriteLine("\r\nALL EVENTS (Will only work on OneBox installations): \r\n" + myEvents.GenerateFormattedStringForAllEvents());
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure that the basics are working")]
        public void GamerContextTests_BVT()
        {
            GamerContextClientResponse response;
            GamerContextClientRequest request = new GamerContextClientRequest(StaticUserEmail, StaticUserPassword);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Response status code should have been OK");
            Assert.IsNotNull(response.BodyWrapper.LegalLocale, "Ensures response has at least one value set");
        }

        /// <summary>
        /// Create a default user's settings
        /// </summary>
        private AccountSettings DefaultUserSettings()
        {
            return new AccountSettings(XblUserTier.Gold, PassportType.Real, null, null, null, CountryId.US, LanguageId.en, ParentalControl.None, true);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\PDLC.Test\PDLC.Tests.GamerContext\GamerContextTests_ValidRequests.cs ===
﻿using System.Net;
using System.Diagnostics;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using LiveN.Test;

namespace PDLC.Tests
{
    /// <summary>
    /// ValidRequests contains all the test cases where the request are valid are suppose to work.
    /// Tests within the valid input range to ensure they are working as expected.
    /// </summary>
    public partial class GamerContextTests
    {
        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending auth using the short lived Auduince uri when the short lived is required.")]
        public void GamerContextTests_ValidRequests_AuthToken_ShortLivedPDLCAuduinceUri()
        {
            // OLD BUGs: 11517
            GamerContextClientResponse response;
            GamerContextClientRequest request = new GamerContextClientRequest(StaticUserEmail, StaticUserPassword);

            // Get a partner token for the wrong audience Uri. As this NOT the purchase API, uri should be the long lived purchase uri. But short lived is also allowed becuase of bug 11517
            request.SetAuthenticationToken = false;
            request.Headers.PartnerAuthorization = PDLCServicesCommon.AUTH_PREFIX + request.Auth.GetPartnerToken(request.UserEmail, request.Password, request.Title, PDLCServicesCommon.AUDIENCE_URI_HBI);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Response status code should have been OK");
            Assert.IsNotNull(response.BodyWrapper.LegalLocale, "Ensures response has at least one value set");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending up request with invalid Locale within the header")]
        public void GamerContextTests_ValidRequests_Locale_Invalid()
        {
            // OLD BUGs: 11099
            GamerContextClientResponse response;
            GamerContextClientRequest request = new GamerContextClientRequest(StaticUserEmail, StaticUserPassword);

            request.Headers.Add(PDLCServicesCommon.LOCALE, "Invalid_Locale");

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Response status code should have been OK");
            Assert.IsNotNull(response.BodyWrapper.LegalLocale, "Ensures response has at least one value set");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending up request with Empty header")]
        public void GamerContextTests_ValidRequests_Locale_EmptyHeader()
        {
            // OLD BUGs: 11099
            GamerContextClientResponse response;
            GamerContextClientRequest request = new GamerContextClientRequest(StaticUserEmail, StaticUserPassword);

            request.Headers.Add(PDLCServicesCommon.LOCALE, string.Empty);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Response status code should have been OK");
            Assert.IsNotNull(response.BodyWrapper.LegalLocale, "Ensures response has at least one value set");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending up request with a supported PlatformType within the header")]
        public void GamerContextTests_ValidRequests_PaltformType_SupportedRandomNumber()
        {
            //OLD BUGs: 12323
            GamerContextClientResponse response;
            GamerContextClientRequest request = new GamerContextClientRequest(StaticUserEmail, StaticUserPassword);

            // Only supporting Mobile platform type
            request.Headers.PlatformType = "5";

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Response status code should have been OK");
            Assert.IsNotNull(response.BodyWrapper.LegalLocale, "Ensures response has at least one value set");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\PDLC.Test\PDLC.Tests.GamerContext\GamerContextTests_VerifyResponses.cs ===
﻿using System;
using System.Net;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using live.common;

using LiveN.Test;
using LiveN.Test.Users;

namespace PDLC.Tests
{
    /// <summary>
    /// VerifyResponses contains test to verify that the response match the expected.
    /// </summary>
    public partial class GamerContextTests
    {
        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure caching is set to none by default")]
        public void GamerContextTests_VerifyReponses_Header_CacheControl()
        {
            GamerContextClientResponse response;
            GamerContextClientRequest request = new GamerContextClientRequest(StaticUserEmail, StaticUserPassword);

            response = request.MakeARequest();

            Assert.AreEqual("no-cache", response.Headers.CacheControl, "Cache should be set to not cache so the clients don't run into any cachin issues.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure the avatar body type is pulled correctly")]
        public void GamerContextTests_VerifyReponses_AvatarBodyType()
        {
            UserAccount user;
            GamerContextClientRequest request;
            GamerContextClientResponse response;

            user = new UserAccount(XblLiveUserTier.Gold);
            user.SetAvatarBodyType(AvatarBodyType.Male);
            request = new GamerContextClientRequest(user.Email, user.Password);
            response = request.MakeARequest();
            Assert.AreEqual((int)AvatarBodyType.Male, response.BodyWrapper.AvatarBodyType, "Body Type should be the same.");

            user = new UserAccount(XblLiveUserTier.Gold);
            user.SetAvatarBodyType(AvatarBodyType.Female);
            request = new GamerContextClientRequest(user.Email, user.Password);
            response = request.MakeARequest();
            Assert.AreEqual((int)AvatarBodyType.Female, response.BodyWrapper.AvatarBodyType, "Body Type should be the same.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure the field is pulled correctly")]
        public void GamerContextTests_VerifyReponses_CanPurchasePDLC()
        {
            UserAccount user;
            GamerContextClientRequest request;
            GamerContextClientResponse response;

            // By default a Child can not purchase PDLC
            user = new UserAccount(XblLiveUserTier.GoldChild);
            user.SetCanPuchasePDLC(false);

            request = new GamerContextClientRequest(user.Email, user.Password);
            response = request.MakeARequest();
            Assert.AreEqual(false, response.BodyWrapper.CanPurchasePDLC, "CanPurchasePDLC should be the same.");

            // Create Child account that can purchase PDLC
            user = new UserAccount(XblLiveUserTier.GoldChild);
            user.SetCanPuchasePDLC(true);

            request = new GamerContextClientRequest(user.Email, user.Password);
            response = request.MakeARequest();
            Assert.AreEqual(true, response.BodyWrapper.CanPurchasePDLC, "CanPurchasePDLC should be the same.");
        } 

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Expires is set correctly accoring to the spec")]
        public void GamerContextTests_VerifyReponses_Expires()
        {
            int GamerContextExpiresInHours = 4;
            GamerContextClientResponse response;
            GamerContextClientRequest request = new GamerContextClientRequest(StaticUserEmail, StaticUserPassword);

            response = request.MakeARequest();

            Assert.IsTrue(response.BodyWrapper.Expires > DateTime.UtcNow, "Expire time should be greater then now: " + response.BodyWrapper.Expires.ToString());
            Assert.IsTrue(response.BodyWrapper.Expires <= (DateTime.UtcNow.AddHours(GamerContextExpiresInHours)).AddMinutes(1), "Expire time should be less then 4 hours based off the configuration value lest_Pdlc_GamerContextExpiresInHours within the settings table: " + response.BodyWrapper.Expires.ToString());
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure the field is pulled correctly")]
        public void GamerContextTests_VerifyReponses_isLightAccount()
        {
            UserAccount user;
            GamerContextClientRequest request;
            GamerContextClientResponse response;
            AccountUserSettings userSettings = new AccountUserSettings();

            user = new UserAccount(XblLiveUserTier.GoldLight);
            request = new GamerContextClientRequest(user.Email, user.Password);
            response = request.MakeARequest();
            Assert.AreEqual(true, response.BodyWrapper.IsLightweightAccount, "isLightAccount should be the same.");

            user = new UserAccount(XblLiveUserTier.Gold);
            request = new GamerContextClientRequest(user.Email, user.Password);
            response = request.MakeARequest();
            Assert.AreEqual(false, response.BodyWrapper.IsLightweightAccount, "isLightAccount should be the same.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure Locale matched the expected profile Locale and not the one passed in via the X-Locale")]
        public void GamerContextTests_VerifyReponses_LegalLocale()
        {
            UserAccount user;
            GamerContextClientRequest request;
            GamerContextClientResponse response;
            AccountUserSettings userSettings = new AccountUserSettings();

            // Set the country to be outside the US
            userSettings.countryId = CountryId.CA;
            userSettings.languageId = LanguageId.fr;
            user = new UserAccount(userSettings);

            request = new GamerContextClientRequest(user.Email, user.Password);

            // Ensure that even if the phone's Locale is passed in, the account's Locale is returned 
            request.Headers.Add(PDLCServicesCommon.LOCALE, "en-US");

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Response status code should have been OK");
            Assert.AreEqual("fr-CA", response.BodyWrapper.LegalLocale, "Locale should be pulled from User Profile");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Verify the uri matched expected")]
        public void GamerContextTests_VerifyReponses_MOPageAddPointsUrl()
        {
            // OLD BUGs: 11356
            GamerContextClientResponse response;
            GamerContextClientRequest request = new GamerContextClientRequest(StaticUserEmail, StaticUserPassword);

            response = request.MakeARequest();

            Assert.AreEqual("https://live.xbox.com/{locale}/AddPoints/?titleid={titleid}&sessionid={sessionid}", response.BodyWrapper.MOPageAddPointsUrl, "Url has changed");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Verify the uri matched expected")]
        public void GamerContextTests_VerifyReponses_MOPageSetupBillingUrl()
        {
            // OLD BUGs: 11356
            GamerContextClientResponse response;
            GamerContextClientRequest request = new GamerContextClientRequest(StaticUserEmail, StaticUserPassword);

            response = request.MakeARequest();

            Assert.AreEqual("https://live.xbox.com/{locale}/Account/BillingAccountInformation/?titleid={titleid}&sessionid={sessionid}", response.BodyWrapper.MOPageSetupBillingUrl, "Url has changed");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Verify the uri matched expected")]
        public void GamerContextTests_VerifyReponses_MOPageTouUrl()
        {
            // OLD BUGs: 11356
            GamerContextClientResponse response;
            GamerContextClientRequest request = new GamerContextClientRequest(StaticUserEmail, StaticUserPassword);

            response = request.MakeARequest();

            Assert.AreEqual("http://windowsphone.xbox.com/TOU/?language={language}&countryorregion={countryorregion}", response.BodyWrapper.MOPageTouUrl, "Url has changed");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure the points balance is based off the user's real balance")]
        public void GamerContextTests_VerifyReponses_PointsBalance()
        {
            uint totalPoints = 0;
            GamerContextClientResponse response;
            UserAccount newUser = new UserAccount(XblLiveUserTier.Gold);
            GamerContextClientRequest request = new GamerContextClientRequest(newUser.Email, newUser.Password);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Response status code should have been OK");
            Assert.AreEqual(totalPoints, response.BodyWrapper.PointsBalance, "New user should not have points");

            // Now add points to this user
            totalPoints = newUser.AddPoints();

            // Now make another request
            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Response status code should have been OK");
            Assert.AreEqual(totalPoints, response.BodyWrapper.PointsBalance, "Points where just added. They should be showing up here.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure the UserType is based off the real user's balance")]
        public void GamerContextTests_VerifyReponses_UserType()
        {
            // OLD BUGs: 11407
            UserAccount user;
            GamerContextClientRequest request;
            GamerContextClientResponse response;
            AccountUserSettings userSettings = new AccountUserSettings();

            // Now create new user where the tier is Gold
            user = new UserAccount(XblLiveUserTier.Gold);
            request = new GamerContextClientRequest(user.Email, user.Password);
            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Response status code should have been OK");
            Assert.AreEqual((int)UserType.XboxLiveGoldUser, response.BodyWrapper.UserType, "Tier should be pulled from User Profile");

            /**********
             * Family Gold user creation is not working. Inspected the code and it's looking for FamilyGold and converting it to XboxLiveGoldUser
             * 
             *   // Set the tier Family Gold
             *   userSettings.tier = XblUserTier.FamilyGold;
             *   user = UserHelper.CreateUser(userSettings);
             *   request = new GamerContextClientRequest(user.Email, user.Password);
             *   response = request.MakeARequest();
             *
             *   Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Response status code should have been OK");
             *   Assert.AreEqual((int)UserType.XboxLiveGoldUser, response.BodyWrapper.UserType, "Tier should be pulled from User Profile");
             *
             *********/

            //*** ALL other tier default to a Silver account level ***

            // Set the tier to Silver
            user = new UserAccount(XblLiveUserTier.Silver);
            request = new GamerContextClientRequest(user.Email, user.Password);
            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Response status code should have been OK");
            Assert.AreEqual((int)UserType.XboxLiveSilverUser, response.BodyWrapper.UserType, "Tier should be pulled from User Profile");

            /**********
             * NewUser creation is not working correctly. Checked within the dev code and everything appears correct there. So there must be an issue on the test side. Commenting out as the dev code is setup correctly
             *
             * // Set the tier New User
             * userSettings.tier = XblUserTier.NewUser;
             * user = UserHelper.CreateUser(userSettings);
             * request = new GamerContextClientRequest(user.Email, user.Password);
             * response = request.MakeARequest();
             *
             * Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Response status code should have been OK");
             * Assert.AreEqual((int)UserType.XboxLiveSilverUser, response.BodyWrapper.UserType, "Tier should be pulled from User Profile");
             *
             *********/
        }      
       
        [TestMethod]
        [Owner("rsnyder")]
        [Description("Verify the uri matched expected")]
        public void GamerContextTests_VerifyReponses_XblMarketplaceCatalogUrl()
        {
            Uri url;
            GamerContextClientResponse response;
            GamerContextClientRequest request = new GamerContextClientRequest(StaticUserEmail, StaticUserPassword);

            response = request.MakeARequest();

            Assert.IsTrue(response.BodyWrapper.XblMarketplaceCatalogUrl.EndsWith("/MarketplaceCatalog"), "Uri should end this way");

            try
            {
                url = new Uri(response.BodyWrapper.XblMarketplaceCatalogUrl);
            }
            catch
            {
                Assert.Fail("Could not create a URI with the return string '" + response.BodyWrapper.XblMarketplaceCatalogUrl + "'");
            }
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Verify the uri matched expected")]
        public void GamerContextTests_VerifyReponses_AvatarMarketplaceUrl()
        {
            // OLD BUGs: 11355, 11349
            Uri url;
            GamerContextClientResponse response;
            GamerContextClientRequest request = new GamerContextClientRequest(StaticUserEmail, StaticUserPassword);

            response = request.MakeARequest();

            Assert.IsTrue(response.BodyWrapper.AvatarMarketplaceUrl.EndsWith("/Catalog/Catalog.asmx"), "Uri should end this way");

            try
            {
                url = new Uri(response.BodyWrapper.AvatarMarketplaceUrl);
            }
            catch
            {
                Assert.Fail("Could not create a URI with the return string '" + response.BodyWrapper.XblMarketplaceCatalogUrl + "'");
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\PDLC.Test\PDLC.Tests.GetPointsBalance\GetPointsBalanceTests_InvalidRequests.cs ===
﻿using System;
using System.Net;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using LiveN.Test;
using LiveN.Test.Content;
using LiveN.Test.Users;

namespace PDLC.Tests
{
    /// <summary>
    /// InvalidRequests contains tests to ensure an invalid request is handled appropriately
    /// </summary>
    public partial class GetPointsBalanceTests
    {
        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending in a POST when a GET is expected")]
        public void GetPointsBalanceTests_InvalidRequests_POST()
        {
            GetPointsBalanceClientRequest request;
            GetPointsBalanceClientResponse response;

            request = new GetPointsBalanceClientRequest(StaticUserEmail, StaticUserPassword);

            request.Method = HttpMethods.POST;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.MethodNotAllowed, response.StatusCode, "StatusCode in not correct");
            Assert.IsFalse(response.IsServiceErrorMessage, "In this cases, calls does not make it to our code. Thus no ServiceErrorMessage can be returned.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending up request without partner token")]
        public void GetPointsBalanceTests_InvalidRequests_AuthToken_MissingHeader()
        {
            GetPointsBalanceClientRequest request;
            GetPointsBalanceClientResponse response;

            request = new GetPointsBalanceClientRequest(StaticUserEmail, StaticUserPassword);

            request.SetAuthenticationToken = false;
            request.Headers.PartnerAuthorization = null;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode, "StatusCode in not correct");
            Assert.IsFalse(response.IsServiceErrorMessage, "In this cases, calls does not make it to our code. Thus no ServiceErrorMessage can be returned.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending purchase request using a valid Auduince uri but not for purchase. Purchase requires short lived purchase uri.")]
        public void GetPointsBalanceTests_InvalidRequests_AuthToken_WrongAudienceUri()
        {
            GetPointsBalanceClientRequest request;
            GetPointsBalanceClientResponse response;

            request = new GetPointsBalanceClientRequest(StaticUserEmail, StaticUserPassword);

            // Get a partner token for the wrong audience Uri. As this is a purchase, uri should be the short lived purchase uri only
            request.SetAuthenticationToken = false;
            request.Headers.PartnerAuthorization = PDLCServicesCommon.AUTH_PREFIX + request.Auth.GetPartnerToken(request.UserEmail, request.Password, request.Title, "http://xboxlive.com/avatar");

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode, "Invalid status code");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending up request with invalid PlatformType within the header")]
        public void GetPointsBalanceTests_InvalidRequests_PaltformType_Invalid()
        {
            GetPointsBalanceClientRequest request;
            GetPointsBalanceClientResponse response;

            request = new GetPointsBalanceClientRequest(StaticUserEmail, StaticUserPassword);

            request.Headers.PlatformType = "Invalid_PlatformType";

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "StatusCode in not correct");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Response LiveN error code invalid.");
            Assert.AreEqual("X-Platform-Type header is limited to  Mobile", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending up request with invalid PlatformType within the header")]
        public void GetPointsBalanceTests_InvalidRequests_PaltformType_EmptyHeader()
        {
            GetPointsBalanceClientRequest request;
            GetPointsBalanceClientResponse response;

            request = new GetPointsBalanceClientRequest(StaticUserEmail, StaticUserPassword);

            request.Headers.PlatformType = string.Empty;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "StatusCode in not correct");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Response LiveN error code invalid.");
            Assert.AreEqual("X-Platform-Type header is missing or empty", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending up request with invalid PlatformType within the header")]
        public void GetPointsBalanceTests_InvalidRequests_PaltformType_MissingHeader()
        {
            GetPointsBalanceClientRequest request;
            GetPointsBalanceClientResponse response;

            request = new GetPointsBalanceClientRequest(StaticUserEmail, StaticUserPassword);

            request.Headers.PlatformType = null;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "StatusCode in not correct");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Response LiveN error code invalid.");
            Assert.AreEqual("X-Platform-Type header is missing or empty", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\PDLC.Test\PDLC.Tests.GetPointsBalance\GetPointsBalanceTests.cs ===
﻿using System;
using System.Diagnostics;
using System.Net;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using LiveNew.Test;

using LiveN.Test;
using LiveN.Test.Common;
using LiveN.Test.Content;
using LiveN.Test.Users;

namespace PDLC.Tests
{
    /// <summary>
    /// Based class for GetPointsBalance Tests. Contains BVTs and general setup for all other areas.
    /// </summary>
    [TestClass]
    public partial class GetPointsBalanceTests
    {
        /// <summary>
        /// User email for default cases
        /// </summary>
        private static string StaticUserEmail;

        /// <summary>
        /// User password for default cases
        /// </summary>
        private static string StaticUserPassword;

        /// <summary>
        /// Reference to the event viewer
        /// </summary>
        private static EventViewer myEvents;

        [ClassInitialize]
        public static void TestClassInitialize(TestContext context)
        {
            myEvents = new EventViewer(".", "Application", "pdlc_service");

            StaticUserEmail = CurrentEnvironmentSettings.UserSettings[0].UserEmail;
            StaticUserPassword = CurrentEnvironmentSettings.UserSettings[0].Password;
        }

        [TestInitialize]
        public void myTestInitialize()
        {
            myEvents.ResetEventStartPosition();
        }

        [TestCleanup]
        public void myTestCleanup()
        {
            Trace.WriteLine("\r\nALL EVENTS (Will only work on OneBox installations): \r\n" + myEvents.GenerateFormattedStringForAllEvents());
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure the basic Get Points Balance is working")]
        public void GetPointsBalanceTests_BVT()
        {
            GetPointsBalanceClientRequest request;
            GetPointsBalanceClientResponse response;

            request = new GetPointsBalanceClientRequest(StaticUserEmail, StaticUserPassword);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "StatusCode in not correct");
            Assert.IsNotNull(response.BodyWrapper.PointsBalance, "Ensures response can be parsed.");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\PDLC.Test\PDLC.Tests.GetPointsBalance\GetPointsBalanceTests_VerifyResponses.cs ===
﻿using System;
using System.Net;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using LiveN.Test;
using LiveN.Test.Content;
using LiveN.Test.Users;

namespace PDLC.Tests
{
    /// <summary>
    /// VerifyResponses contains test to verify that the response match the expected.
    /// </summary>
    public partial class GetPointsBalanceTests
    {
        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure caching is set to none by default")]
        public void GetPointsBalanceTests_VerifyReponses_Header_CacheControl()
        {
            GetPointsBalanceClientRequest request;
            GetPointsBalanceClientResponse response;

            request = new GetPointsBalanceClientRequest(StaticUserEmail, StaticUserPassword);

            response = request.MakeARequest();

            Assert.AreEqual("no-cache", response.Headers.CacheControl, "Cache should be set to not cache so the clients don't run into any cachin issues.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Verifying if the user has zero Microsoft Points that it returns correctly.")]
        public void GetPointsBalanceTests_VerifyResponses_PointsBalance_NoPoints()
        {
            GetPointsBalanceClientRequest request;
            GetPointsBalanceClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold);

            request = new GetPointsBalanceClientRequest(user.Email, user.Password);

            response = request.MakeARequest();

            Assert.AreEqual((uint)0, response.BodyWrapper.PointsBalance, "New user should not have any points.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Verifying if the user's Microsoft Points that it returns correctly.")]
        public void GetPointsBalanceTests_VerifyResponses_PointsBalance_WithAPointsBalance()
        {
            UserAccount user;
            GetPointsBalanceClientRequest request;
            GetPointsBalanceClientResponse response;

            user = new UserAccount(XblLiveUserTier.Gold, true);

            request = new GetPointsBalanceClientRequest(user.Email, user.Password);

            response = request.MakeARequest();

            Assert.AreEqual((uint)4000, response.BodyWrapper.PointsBalance, "Default creation gives the user 4000 points after creating the user. Verify that this have not changed causing this failure.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Verifying if the user's Microsoft Points are getting deducted.")]
        public void GetPointsBalanceTests_VerifyResponses_PointsBalance_AfterDurablePurchase()
        {
            UserAccount user;
            ContentOffer offer;
            PurchaseClientRequest requestPurchase;
            GetPointsBalanceClientRequest request;
            GetPointsBalanceClientResponse response;
            PurchaseClientResponse responsePurchase;

            user = new UserAccount(XblLiveUserTier.Gold, true);

            request = new GetPointsBalanceClientRequest(user.Email, user.Password);
            response = request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            Assert.AreEqual((uint)4000, response.BodyWrapper.PointsBalance, "Default creation gives the user 4000 points after creating the user. Verify that this have not changed causing this failure.");

            // Now purchase something
            requestPurchase = new PurchaseClientRequest(user.Email, user.Password);
            offer = MobileGameContentOffers61.GetContentOffer_enUS(1);
            requestPurchase.RequestContent.CreatePurchaseRequest(offer.GetOfferContext(Locales.en_US), PurchasePaymentType.Points);
            responsePurchase = requestPurchase.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, responsePurchase.StatusCode, "Purchase Failed. Can't move on with verification.");

            // Now verify that those points got deducted from user's points total
            response = request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            Assert.AreEqual((uint)(4000 - (int)offer.GetOfferContext(Locales.en_US).PointsPricePoints), response.BodyWrapper.PointsBalance, "Point should have been deducted from user.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Verifying if the user's Microsoft Points do not get deducted after Token purchase.")]
        public void GetPointsBalanceTests_VerifyResponses_PointsBalance_AfterConsumableePurchase()
        {
            UserAccount user;
            ContentOffer offer;
            PurchaseClientRequest requestPurchase;
            GetPointsBalanceClientRequest request;
            GetPointsBalanceClientResponse response;
            PurchaseClientResponse responsePurchase;

            user = new UserAccount(XblLiveUserTier.Gold, true);

            request = new GetPointsBalanceClientRequest(user.Email, user.Password);
            response = request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            Assert.AreEqual((uint)4000, response.BodyWrapper.PointsBalance, "Default creation gives the user 4000 points after creating the user. Verify that this have not changed causing this failure.");

            // Now purchase something
            requestPurchase = new PurchaseClientRequest(user.Email, user.Password);
            offer = MobileGameContentOffers61.GetContentOffer_enUS(1);
            requestPurchase.RequestContent.CreatePurchaseRequest(offer.GetOfferContext(Locales.en_US), PurchasePaymentType.Token);
            responsePurchase = requestPurchase.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, responsePurchase.StatusCode, "Purchase Failed. Can't move on with verification.");

            // Now verify that those points got deducted from user's points total
            response = request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            Assert.AreEqual((uint)4000, response.BodyWrapper.PointsBalance, "Default creation gives the user 4000 points after creating the user. Verify that this has not changed becuase of Token purchase.");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\PDLC.Test\PDLC.Tests.GetPointsBalance\GetPointsBalanceTests_ValidRequests.cs ===
﻿using System;
using System.Net;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using LiveN.Test;
using LiveN.Test.Content;
using LiveN.Test.Users;

namespace PDLC.Tests
{
    /// <summary>
    /// ValidRequests contains all the test cases where the request are valid are suppose to work.
    /// Tests within the valid input range to ensure they are working as expected.
    /// </summary>
    public partial class GetPointsBalanceTests
    {
        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending auth using the long lived Audience uri when the short lived purchase is required")]
        public void GetPointsBalanceTests_ValidRequests_AuthToken_LongLivePDLCAudienceUri()
        {
            // OLD BUGs: 11517
            GetPointsBalanceClientRequest request;
            GetPointsBalanceClientResponse response;

            request = new GetPointsBalanceClientRequest(StaticUserEmail, StaticUserPassword);

            // Get a partner token for the wrong audience Uri. As this NOT the purchase API, uri should be the long lived purchase uri. But short lived is also allowed becuase of bug 11517
            request.SetAuthenticationToken = false;
            request.Headers.PartnerAuthorization = PDLCServicesCommon.AUTH_PREFIX + request.Auth.GetPartnerToken(request.UserEmail, request.Password, request.Title, PDLCServicesCommon.AUDIENCE_URI_HBI);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "StatusCode in not correct");
            Assert.IsNotNull(response.BodyWrapper.PointsBalance, "Ensures response can be parsed.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Verifying if user is a Light User. Where they have not yet set there billing information.")]
        public void GetPointsBalanceTests_ValidRequests_LightUser()
        {
            UserAccount user;
            GetPointsBalanceClientRequest request;
            GetPointsBalanceClientResponse response;

            user = new UserAccount(XblLiveUserTier.GoldLight);

            request = new GetPointsBalanceClientRequest(user.Email, user.Password);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "StatusCode in not correct");
            Assert.IsNotNull(response.BodyWrapper.PointsBalance, "Ensures response can be parsed.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Verifying if user is a child with PDLC allowed.")]
        public void GetPointsBalanceTests_ValidRequests_ChildPdlcAllowed()
        {
            UserAccount user;
            GetPointsBalanceClientRequest request;
            GetPointsBalanceClientResponse response;

            user = new UserAccount(XblLiveUserTier.GoldChild);

            request = new GetPointsBalanceClientRequest(user.Email, user.Password);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "StatusCode in not correct");
            Assert.IsNotNull(response.BodyWrapper.PointsBalance, "Ensures response can be parsed.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Verifying if user is a child with PDLC NOT allowed.")]
        public void GetPointsBalanceTests_ValidRequests_ChildPdlcNotAllowed()
        {
            UserAccount user;
            GetPointsBalanceClientRequest request;
            GetPointsBalanceClientResponse response;

            user = new UserAccount(XblLiveUserTier.GoldChild);
            user.SetCanPuchasePDLC(false);
           
            request = new GetPointsBalanceClientRequest(user.Email, user.Password);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "StatusCode in not correct");
            Assert.IsNotNull(response.BodyWrapper.PointsBalance, "Ensures response can be parsed.");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\PDLC.Test\PDLC.Tests.GetReceipts\GetReceiptsTests.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Diagnostics;
using System.Net;

using LiveNew.Test;

using LiveN.Test;
using LiveN.Test.Common;
using LiveN.Test.Content;
using LiveN.Test.Users;

namespace PDLC.Tests
{
    [TestClass]
    public partial class GetReceiptsTests
    {
        private UserAccount _userWithNoPurchase;
        private UserAccount _userWith1Purchase;
        private UserAccount _userWith10Purchases;

        /// <summary>
        /// User email for default cases
        /// </summary>
        private static string StaticUserEmail;

        /// <summary>
        /// User password for default cases
        /// </summary>
        private static string StaticUserPassword;

        /// <summary>
        /// Reference to the event viewer
        /// </summary>
        private static EventViewer myEvents;

        /// <summary>
        /// Global random number generator to be used by all
        /// </summary>
        public Random rnd = new Random();

        [ClassInitialize]
        public static void TestClassInitialize(TestContext context)
        {
            myEvents = new EventViewer(".", "Application", "pdlc_service");

            StaticUserEmail = CurrentEnvironmentSettings.UserSettings[0].UserEmail;
            StaticUserPassword = CurrentEnvironmentSettings.UserSettings[0].Password;
        }

        [TestInitialize]
        public void myTestInitialize()
        {
            myEvents.ResetEventStartPosition();
        }

        [TestCleanup]
        public void myTestCleanup()
        {
            Trace.WriteLine("\r\nALL EVENTS (Will only work on OneBox installations): \r\n" + myEvents.GenerateFormattedStringForAllEvents());
        }

        /// <summary>
        /// Get a user that has purchased 10 Durable items
        /// </summary>
        public UserAccount UserWith10Purchases
        {
            get
            {
                if (this._userWith10Purchases == null)
                {
                    this._userWith10Purchases = new UserAccount(XblLiveUserTier.Gold);

                    this._userWith10Purchases.AddPoints();

                    for (int i = 0; i < 10; i++)
                    {
                        this._userWith10Purchases.PurchaseOffer(MobileGameContentOffers61.GetContentOffer_enUS(i).GetOfferContext(Locales.en_US));
                    }
                 }

                return this._userWith10Purchases;
            }
        }

        /// <summary>
        /// Get a user that has purchased a single Durable items
        /// </summary>
        public UserAccount UserWith1Purchase
        {
            get
            {
                if (this._userWith1Purchase == null)
                {
                    this._userWith1Purchase = new UserAccount(XblLiveUserTier.Gold);

                    this._userWith1Purchase.AddPoints();

                    this._userWith1Purchase.PurchaseOffer(MobileGameContentOffers61.GetContentOffer_enUS(0).GetOfferContext(Locales.en_US));
                }

                return this._userWith1Purchase;
            }
        }

        /// <summary>
        /// Create a user with points but has nothing purchased
        /// </summary>
        public UserAccount UserWithNoPurchase
        {
            get
            {
                if (this._userWithNoPurchase == null)
                {
                    this._userWithNoPurchase = new UserAccount(XblLiveUserTier.Gold);

                    this._userWithNoPurchase.AddPoints();
                }

                return this._userWithNoPurchase;
            }
        }
        
        [TestMethod]
        [Owner("rsnyder")]
        [Description("If an unsigned GetReceipts request is sent for a user with an item purchase history, validate that an unsigned receipt is received")]
        public void GetReceiptsTests_BVT_Unsigned()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWith1Purchase;

            request = new GetReceiptsClientRequest(user.Email, user.Password);
            request.RequestContent.SignReceipts = bool.FalseString.ToLower();

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code was returned.");
            Assert.AreEqual(false, response.BodyWrapper.IsSignatureValid, "Receipt should have not been signed.");
            PDLCTestCommon.ValidatePurchaseReceiptAgainstOffer(user.Purchases[0].Offer, response.BodyWrapper.ReceiptsPage[0]);
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("If an Signed GetReceipts request is sent for a user with an item purchase history, validate that a signed receipt is received")]
        public void GetReceiptsTests_BVT_Signed()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWith1Purchase;

            request = new GetReceiptsClientRequest(user.Email, user.Password);

            request.RequestContent.SignReceipts = bool.TrueString.ToLower();

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code was returned.");
            Assert.AreEqual(true, response.BodyWrapper.IsSignatureValid, "Receipt should have been signed.");
            PDLCTestCommon.ValidatePurchaseReceiptAgainstOffer(user.Purchases[0].Offer, response.BodyWrapper.ReceiptsPage[0]);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\PDLC.Test\PDLC.Tests.GetReceipts\GetReceiptsTests_InvalidRequest.cs ===
﻿using System;
using System.Diagnostics;
using System.Net;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using LiveNew.Test;

using LiveN.Test;
using LiveN.Test.Content;

namespace PDLC.Tests
{
    public partial class GetReceiptsTests
    {
        [TestMethod]
        [Owner("rsnyder")]
        [Description("If the method type is GET, validate that the response status code is MethodNotAllowed")]
        public void GetReceiptsTests_InvalidRequests_GET()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWithNoPurchase;

            request = new GetReceiptsClientRequest(user.Email, user.Password);

            request.Method = HttpMethods.GET;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.MethodNotAllowed, response.StatusCode, "Response status code is invalid.");
            Assert.AreEqual(false, response.IsServiceErrorMessage, "Response should not contain a ServiceErrorMessage");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("If the X-Platform-Type header is an invalid uint, validate that the response status code is BadRequest")]
        public void GetReceiptsTests_InvalidRequests_PlatformType_Invalid()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWithNoPurchase;

            request = new GetReceiptsClientRequest(user.Email, user.Password);

            request.Headers.PlatformType = "10";

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Response status code is invalid.");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Error code is invalid.");
            Assert.AreEqual("X-Platform-Type header is limited to  Mobile", response.ServiceErrorMessageWrapper.ErrorMessage, "Error message has changed.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("If the X-Platform-Type header is an invalid string, validate that the response status code is BadRequest")]
        public void GetReceiptsTests_InvalidRequests_PlatformType_Garbage()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWithNoPurchase;

            request = new GetReceiptsClientRequest(user.Email, user.Password);

            request.Headers.PlatformType = "abcdefg";

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Response status code is invalid.");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Error code is invalid.");
            Assert.AreEqual("X-Platform-Type header is limited to  Mobile", response.ServiceErrorMessageWrapper.ErrorMessage, "Error message has changed.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("If the X-Platform-Type header is missing, validate that the response status code is BadRequest")]
        public void GetReceiptsTests_InvalidRequests_PlatformType_Missing()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWithNoPurchase;

            request = new GetReceiptsClientRequest(user.Email, user.Password);

            request.Headers.PlatformType = null;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Response status code is invalid.");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Error code is invalid.");
            Assert.AreEqual("X-Platform-Type header is missing or empty", response.ServiceErrorMessageWrapper.ErrorMessage, "Error message has changed.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("If the X-Platform-Type header is empty, validate that the response status code is BadRequest")]
        public void GetReceiptsTests_InvalidRequests_PlatformType_Empty()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWithNoPurchase;

            request = new GetReceiptsClientRequest(user.Email, user.Password);

            request.Headers.PlatformType = string.Empty;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Response status code is invalid.");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Error code is invalid.");
            Assert.AreEqual("X-Platform-Type header is missing or empty", response.ServiceErrorMessageWrapper.ErrorMessage, "Error message has changed.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("If the X-Authorization header is missing, validate that the response status code is Unauthorized")]
        public void GetReceiptsTests_InvalidRequests_AuthToken_Missing()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWithNoPurchase;

            request = new GetReceiptsClientRequest(user.Email, user.Password);

            request.SetAuthenticationToken = false;
            request.Headers.PartnerAuthorization = null;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode, "Response status code is invalid.");
            Assert.AreEqual(false, response.IsServiceErrorMessage, "Response should not contain a ServiceErrorMessage");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("If the request is sent with an empty body, validate that the response status code is BadRequest")]
        public void GetReceiptsTests_InvalidRequests_RequestContent_Empty()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWithNoPurchase;

            request = new GetReceiptsClientRequest(user.Email, user.Password);

            request.RequestContent = null;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Response status code is invalid.");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Error code is invalid.");
            Assert.AreEqual("ReceiptRequest cannot be null", response.ServiceErrorMessageWrapper.ErrorMessage, "Error message has changed.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("If the request is sent with an empty body, validate that the response status code is BadRequest")]
        public void GetReceiptsTests_InvalidRequests_TitleId_Mismatch()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWithNoPurchase;

            request = new GetReceiptsClientRequest(user.Email, user.Password);

            request.RequestContent.TitleId = Convert.ToUInt32(CurrentEnvironmentSettings.SelectedEnvironment.Titles[1].Id).ToString();
            
            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Response status code is invalid.");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Error code is invalid.");
            Assert.AreEqual("ReceiptRequest.Titleid does not match titleid in the authentication token", response.ServiceErrorMessageWrapper.ErrorMessage, "Error message has changed.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Valid Title with purchased Offers. But not logged in with that TitleId.")]
        public void GetReceiptsTests_InvalidRequests_TitleId_NotLoggedInWithPassedTitleId()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offerTitleOne = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);
            OfferContext offerTitleTwo = MobileGameContentOffers62.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);

            user.PurchaseOffer(offerTitleOne);
            user.PurchaseOffer(offerTitleTwo);

            request = new GetReceiptsClientRequest(user.Email, user.Password);

            if (request.Title.Id != request.Title61TitleId.Id)
            {
                throw new Exception("request.Title.Id has to equal Title 61000000 for this test to be valid.");
            }

            // Now set the TitleId to the TitleId that request is not logged in on
            request.RequestContent.TitleId = offerTitleTwo.TitleId.ToString();

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Response status code is invalid.");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Error code is invalid.");
            Assert.AreEqual("ReceiptRequest.Titleid does not match titleid in the authentication token", response.ServiceErrorMessageWrapper.ErrorMessage, "Error message has changed.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("If an unsigned GetReceipts request is sent with a zero title id as the token, validate that an unsigned receipt for all purchases is received.")]
        public void GetReceiptsTests_InvalidRequests_TitleId_Zero()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWith10Purchases;

            request = new GetReceiptsClientRequest(user.Email, user.Password);

            request.RequestContent.TitleId = "0";

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Invalid StatusCode was returned");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Error code is invalid.");
            Assert.AreEqual("ReceiptRequest.Titleid does not match titleid in the authentication token", response.ServiceErrorMessageWrapper.ErrorMessage, "Error message has changed.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Pass in multi media types")]
        public void GetReceiptsTests_InvalidRequests_MediaTypeId_MultiTypes()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offerDurable = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);
            OfferContext offerConsumable = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002001().GetOfferContext(Locales.en_US);

            user.PurchaseOffer(offerDurable);
            user.PurchaseOffer(offerConsumable);

            request = new GetReceiptsClientRequest(user.Email, user.Password);

            request.RequestContent.MediaTypeId = ((int)MediaType.MobilePDLC).ToString() + "." + ((int)MediaType.MobileConsumable).ToString();

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "Response status code is invalid.");
            Assert.AreEqual(false, response.IsServiceErrorMessage, "Response should not contain a ServiceErrorMessage");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("If an unsigned GetReceipts request is sent with an invalid media type id, validate that the response status code is BadRequest.")]
        public void GetReceiptsTests_InvalidRequests_MediaTypeId_Invalid()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWithNoPurchase;

            request = new GetReceiptsClientRequest(user.Email, user.Password);
            request.RequestContent.MediaTypeId = "Something Invalid";

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "Response status code is invalid.");
            Assert.AreEqual(false, response.IsServiceErrorMessage, "Response should not contain a ServiceErrorMessage");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("If an unsigned GetReceipts request is sent with a negative media type id, validate that the response status code is BadRequest.")]
        public void GetReceiptsTests_InvalidRequests_MediaTypeId_Negative()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWithNoPurchase;

            request = new GetReceiptsClientRequest(user.Email, user.Password);
            request.RequestContent.MediaTypeId = "-1";

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Response status code is invalid.");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Error code is invalid. Tried MediaType: " + request.RequestContent.MediaTypeId);
            Assert.AreEqual("The MediaTypeId is invalid.", response.ServiceErrorMessageWrapper.ErrorMessage, "Error message has changed. Tried MediaType: " + request.RequestContent.MediaTypeId);
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending Unsupported MediaTypeIds")]
        public void GetReceiptsTests_InvalidRequests_MediaTypeId_Unsupported()
        {
            // OLD BUGs: 11382, 12095
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWithNoPurchase;
            string[] unsupportedMediaTypeIds = { ((int)MediaType.GameContent).ToString(), ((int)MediaType.GameConsumable).ToString(), ((int)MediaType.MobileGame).ToString() };
 
            request = new GetReceiptsClientRequest(user.Email, user.Password);

            foreach (string unsupportedMediaTypeId in unsupportedMediaTypeIds)
            {
                // Set the MediaTypeId to the unsupported MediaType
                request.RequestContent.MediaTypeId = unsupportedMediaTypeId;
                Trace.WriteLine("Using MediaTypeId = '" + request.RequestContent.MediaTypeId + "'");

                response = request.MakeARequest();

                Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Response status code is invalid. Tried MediaType: " + unsupportedMediaTypeId);
                Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
                Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Error code is invalid. Tried MediaType: " + unsupportedMediaTypeId);
                Assert.AreEqual("The MediaTypeId is not supported.", response.ServiceErrorMessageWrapper.ErrorMessage, "Error message has changed. Tried MediaType: " + unsupportedMediaTypeId);
            }
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending Invalid MediaTypeIds. Does not belown within the enumerated list of MediaTypes")]
        public void GetReceiptsTests_InvalidRequests_MediaTypeId_InvalidIds()
        {
            // OLD BUGs: 11382 
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWithNoPurchase;
            string[] invalidMediaTypeIds = { rnd.Next(100, int.MaxValue).ToString(), rnd.Next(100, int.MaxValue).ToString(), rnd.Next(100, int.MaxValue).ToString() };

            request = new GetReceiptsClientRequest(user.Email, user.Password);

            foreach (string invalidMediaTypeId in invalidMediaTypeIds)
            {
                // Set the MediaTypeId to the unsupported MediaType
                request.RequestContent.MediaTypeId = invalidMediaTypeId;
                Trace.WriteLine("Using MediaTypeId = '" + request.RequestContent.MediaTypeId + "'");

                response = request.MakeARequest();

                Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Response status code is invalid. Tried MediaType: " + invalidMediaTypeId);
                Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
                Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Error code is invalid. Tried MediaType: " + invalidMediaTypeId);
                Assert.AreEqual("The MediaTypeId is invalid.", response.ServiceErrorMessageWrapper.ErrorMessage, "Error message has changed. Tried MediaType: " + invalidMediaTypeId);
            }
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Validate if PageSize is passed in as Empty String.")]
        public void GetReceiptsTests_InvalidRequests_PageSize_Empty()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWithNoPurchase;

            request = new GetReceiptsClientRequest(user.Email, user.Password);
            request.RequestContent.PageSize = string.Empty;
            
            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "Invalid StatusCode");
            Assert.AreEqual(false, response.IsServiceErrorMessage, "Response should not contain a ServiceErrorMessage");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Validate if PageSize is not passed in.")]
        public void GetReceiptsTests_InvalidRequests_PageSize_NotPassed()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWithNoPurchase;

            request = new GetReceiptsClientRequest(user.Email, user.Password);
            request.RequestContent.PageSize = null;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "Invalid StatusCode");
            Assert.AreEqual(false, response.IsServiceErrorMessage, "Response should not contain a ServiceErrorMessage");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("If an unsigned GetReceipts request is sent with negative page size, validate that the response code is InternalServerError.")]
        public void GetReceiptsTests_InvalidRequests_PageSize_NegInt()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWithNoPurchase;

            request = new GetReceiptsClientRequest(user.Email, user.Password);
            request.RequestContent.PageSize = "-100";

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "Invalid StatusCode");
            Assert.AreEqual(false, response.IsServiceErrorMessage, "Response should not contain a ServiceErrorMessage");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("If an unsigned GetReceipts request is sent with max int page size, validate that the response code is InternalServerError.")]
        public void GetReceiptsTests_InvalidRequests_PageSize_MaxUInt()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWithNoPurchase;

            request = new GetReceiptsClientRequest(user.Email, user.Password);
            request.RequestContent.PageSize = UInt32.MaxValue.ToString();

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "Invalid StatusCode");
            Assert.AreEqual(ServiceErrorBucket.TryAgainLater.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(PdlcErrors.PDLC_E_XBL_SERVICE_UNAVAILABLE, response.ServiceErrorMessageWrapper.ErrorCode, "Error code is invalid.");
            Assert.AreEqual("Internal server error", response.ServiceErrorMessageWrapper.ErrorMessage, "Error message has changed.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("If an unsigned GetReceipts request is sent with max int + 1 page size, validate that the response code is InternalServerError.")]
        public void GetReceiptsTests_InvalidRequests_PageSize_MaxUIntPlus()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWithNoPurchase;

            request = new GetReceiptsClientRequest(user.Email, user.Password);
            request.RequestContent.PageSize = ((long)UInt32.MaxValue + 100).ToString();

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "Invalid StatusCode");
            Assert.AreEqual(false, response.IsServiceErrorMessage, "Response should not contain a ServiceErrorMessage");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Several valid transaction ids with one Not Valid should result error.")]
        public void GetReceiptsTests_InvalidRequests_TransactionId_MissingId()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWithNoPurchase;

            request = new GetReceiptsClientRequest(user.Email, user.Password);

            request.RequestContent.TransactionIds = new string[3];
            request.RequestContent.TransactionIds[0] = Guid.NewGuid().ToString();
            request.RequestContent.TransactionIds[1] = null;
            request.RequestContent.TransactionIds[2] = Guid.NewGuid().ToString();

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "Invalid StatusCode");
            Assert.AreEqual(false, response.IsServiceErrorMessage, "Response should not contain a ServiceErrorMessage");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Several valid transaction ids with one Not Valid should result error.")]
        public void GetReceiptsTests_InvalidRequests_TransactionId_SeveralValidAndOneInvalid()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWith10Purchases;

            request = new GetReceiptsClientRequest(user.Email, user.Password);

            request.RequestContent.TransactionIds = new string[4];
            request.RequestContent.TransactionIds[0] = user.Purchases[9].Request.RequestContent.TransactionId.ToString();
            request.RequestContent.TransactionIds[1] = user.Purchases[0].Request.RequestContent.TransactionId.ToString();
            request.RequestContent.TransactionIds[2] = "Invalid";
            request.RequestContent.TransactionIds[3] = user.Purchases[4].Request.RequestContent.TransactionId.ToString();

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "Invalid StatusCode");
            Assert.AreEqual(false, response.IsServiceErrorMessage, "Response should not contain a ServiceErrorMessage");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\PDLC.Test\PDLC.Tests.GetReceipts\GetReceiptsTests_ValidRequests.cs ===
﻿using System;
using System.Diagnostics;
using System.Net;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using LiveNew.Test;

using LiveN.Test;

namespace PDLC.Tests
{
    public partial class GetReceiptsTests
    {
        [TestMethod]
        [Owner("rsnyder")]
        [Description("Not Filtering on an Optional MediaType should still result in returing all items for the user.")]
        public void GetReceiptsTests_ValidRequests_MediaType_NotSent()
        {
            //OLD BUGs: 11701, 12096
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWith1Purchase;

            request = new GetReceiptsClientRequest(user.Email, user.Password);
            request.RequestContent.MediaTypeId = null;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code was returned.");
            PDLCTestCommon.ValidatePurchaseReceiptAgainstOffer(user.Purchases[0].Offer, response.BodyWrapper.ReceiptsPage[0]);
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("If an unsigned GetReceipts request is sent with repeated transaction id, validate that an unsigned receipt for one purchase is received.")]
        public void GetReceiptsTests_ValidRequests_TransactionId_Repeated()
        {
            int purchaseItemId;
            string transactoinId;
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWith10Purchases;

            purchaseItemId = rnd.Next(0, 10);
            Trace.WriteLine("RANDOM Purchased Item #" + purchaseItemId.ToString());

            transactoinId = user.Purchases[purchaseItemId].Request.RequestContent.TransactionId;

            request = new GetReceiptsClientRequest(user.Email, user.Password);

            request.RequestContent.TransactionIds = new string[] { transactoinId, transactoinId, transactoinId };

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid StatusCode was returned");
            Assert.AreEqual((uint)1, response.BodyWrapper.TotalItems, "Should only return the single transaction event though you requested it multi times.");
            Assert.AreEqual(transactoinId, response.BodyWrapper.ReceiptsPage[0].TransactionId.ToString(), "Should only return the requested in transactionId.");
            PDLCTestCommon.ValidatePurchaseReceiptAgainstOffer(user.Purchases[purchaseItemId].Offer, response.BodyWrapper.ReceiptsPage[0]);
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("If an unsigned GetReceipts request is sent with null transaction id, validate that an unsigned receipt for all purchases is received.")]
        public void GetReceiptsTests_ValidRequests_TransactionId_Null()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWith10Purchases;

            request = new GetReceiptsClientRequest(user.Email, user.Password);

            request.RequestContent.TransactionIds = null;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid StatusCode was returned");
            Assert.AreEqual((uint)10, response.BodyWrapper.TotalItems, "Should return all items");
            Assert.AreEqual(10, response.BodyWrapper.ReceiptsPage.Length, "Should return all items.");
        }

        [TestMethod]
        [Description("If an unsigned GetReceipts request is sent with an empty array of transaction ids, validate that an unsigned receipt for all purchases is received.")]
        public void GetReceiptsTests_ValidRequests_TransactionId_EmptyArray()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWith10Purchases;

            request = new GetReceiptsClientRequest(user.Email, user.Password);

            request.RequestContent.TransactionIds = new string[0];

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid StatusCode was returned");
            Assert.AreEqual((uint)10, response.BodyWrapper.TotalItems, "Should return all items");
            Assert.AreEqual(10, response.BodyWrapper.ReceiptsPage.Length, "Should return all items.");
        }

        [TestMethod]
        [Description("If an unsigned GetReceipts request is sent for a user with no billing info, validate that an empty unsigned receipt is received")]
        public void GetReceiptsTests_ValidRequests_LightAccount()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.GoldLight);

            request = new GetReceiptsClientRequest(user.Email, user.Password);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid StatusCode was returned");
            Assert.AreEqual((uint)0, response.BodyWrapper.TotalItems, "Total Offers is different then expected.");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\PDLC.Test\PDLC.Tests.GetReceipts\GetReceiptsTests_Manual.cs ===
﻿using System;
using System.Diagnostics;
using System.Net;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using LiveNew.Test;

using LiveN.Test;

namespace PDLC.Tests
{
    /// <summary>
    /// Manual test cases that have not been automated yet
    /// </summary>
    public partial class GetReceiptsTests
    {
        [TestMethod]
        [Owner("rsnyder")]
        [Description("Response for Throttled Live Cache call")]
        public void GetReceiptsTests_Manual_ThrottledLiveCache()
        {
            //Last time this test was Manually verified:
            // -Has Not been Tested 2/07/2011

            Assert.Inconclusive("Need to implement");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("GetReceipts calls many LiveCache APIs. Need to verify that if one of them fail, the entire return is marked as a failure. Request is Atomic. All or Nothing.")]
        public void GetReceiptsTests_Manual_OneLiveCachFails()
        {
            //Last time this test was Manually verified:
            // -Has Not been Tested 2/07/2011

            Assert.Inconclusive("Need to implement");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\PDLC.Test\PDLC.Tests.GetReceipts\GetReceiptsTests_VerifyResponse.cs ===
﻿using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Net;
using System.Threading;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using LiveN.Test;
using LiveN.Test.Content;

namespace PDLC.Tests
{
    public partial class GetReceiptsTests
    {
        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure caching is set to none by default")]
        public void GetReceiptsTests_VerifyReponses_Header_CacheControl()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold);

            request = new GetReceiptsClientRequest(user.Email, user.Password);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid StatusCode was returned");
            Assert.AreEqual("no-cache", response.Headers.CacheControl, "Cache should be set to not cache so the clients don't run into any cachin issues.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure the newest item purchase show up first.")]
        public void GetReceiptsTests_VerifyReponses_ResponseOrder()
        {
            // OLD BUGs: 11822
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offerOne = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);
            OfferContext offerTwo = MobileGameContentOffers61.GetContentOffer_enUS(2).GetOfferContext(Locales.en_US);

            user.PurchaseOffer(offerOne);
            user.PurchaseOffer(offerTwo);

            request = new GetReceiptsClientRequest(user.Email, user.Password);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code was returned.");
            Assert.AreEqual((uint)2, response.BodyWrapper.TotalItems, "Total Offers is different then expected.");
            Assert.AreEqual(offerTwo.OfferId, response.BodyWrapper.ReceiptsPage[0].OfferId, "The last purchased Offer should be returned first.");
            Assert.AreEqual(offerOne.OfferId, response.BodyWrapper.ReceiptsPage[1].OfferId, "The first purchased Offer should be returned last.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure the newest item purchase show up first within paging as well.")]
        public void GetReceiptsTests_VerifyReponses_ResponseOrderWithPaging()
        {
            // OLD Bugs: 11822
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offerOne = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);
            OfferContext offerTwo = MobileGameContentOffers61.GetContentOffer_enUS(2).GetOfferContext(Locales.en_US);

            user.PurchaseOffer(offerOne);
            user.PurchaseOffer(offerTwo);

            request = new GetReceiptsClientRequest(user.Email, user.Password);
            request.RequestContent.PageSize = "1";
            request.RequestContent.PageNumber = "1";

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code was returned.");
            Assert.AreEqual((uint)2, response.BodyWrapper.TotalItems, "Total Offers is different then expected.");
            Assert.AreEqual(1, response.BodyWrapper.ReceiptsPage.Length, "GetReceipt should of only return 1 becuase of the paging.");
            Assert.AreEqual(offerTwo.OfferId, response.BodyWrapper.ReceiptsPage[0].OfferId, "The last purchased Offer should be returned first.");

            // Go to the second page and get the first item purchased
            request.RequestContent.PageSize = "1";
            request.RequestContent.PageNumber = "2";

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code was returned.");
            Assert.AreEqual((uint)2, response.BodyWrapper.TotalItems, "Total Offers is different then expected.");
            Assert.AreEqual(1, response.BodyWrapper.ReceiptsPage.Length, "GetReceipt should of only return 1 becuase of the paging.");
            Assert.AreEqual(offerOne.OfferId, response.BodyWrapper.ReceiptsPage[0].OfferId, "The first purchased Offer should be returned last.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure that consumable does not show up within get receipts.")]
        public void GetReceiptsTests_VerifyReponses_Consumable_ShouldNotBeInReceipt()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext consumableOfferOne = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002001().GetOfferContext(Locales.en_US);
            OfferContext durableOfferTwo = MobileGameContentOffers61.GetContentOffer_enUS(2).GetOfferContext(Locales.en_US);
            OfferContext consumableOfferThree = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002002().GetOfferContext(Locales.en_US);
            
            user.PurchaseOffer(consumableOfferOne);
            user.PurchaseOffer(durableOfferTwo);
            user.PurchaseOffer(consumableOfferThree);

            request = new GetReceiptsClientRequest(user.Email, user.Password);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code was returned.");
            Assert.AreEqual((uint)1, response.BodyWrapper.TotalItems, "Should only return Durable Offers Only.");
            Assert.AreEqual(durableOfferTwo.OfferId, response.BodyWrapper.ReceiptsPage[0].OfferId, "The last purchased Offer should be returned first.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure the transaction Id that's used to purchase the item is also the Id used within the GetReceipts.")]
        public void GetReceiptsTests_VerifyReponses_TransactionID_MultiItems()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offerOne = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);
            OfferContext offerTwo = MobileGameContentOffers61.GetContentOffer_enUS(2).GetOfferContext(Locales.en_US);

            // Purchase Offers
            user.PurchaseOffer(offerOne);
            user.PurchaseOffer(offerTwo);

            request = new GetReceiptsClientRequest(user.Email, user.Password);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code was returned.");
            Assert.AreEqual((uint)2, response.BodyWrapper.TotalItems, "Total Offers is different then expected.");

            Assert.AreEqual(offerTwo.OfferId, response.BodyWrapper.ReceiptsPage[0].OfferId, "The last purchased Offer should be returned first.");
            Assert.AreEqual(user.Purchases[1].Request.RequestContent.TransactionId, response.BodyWrapper.ReceiptsPage[0].TransactionId.ToString(), "The last purchased Offer should be returned first.");

            Assert.AreEqual(offerOne.OfferId, response.BodyWrapper.ReceiptsPage[1].OfferId, "The first purchased Offer should be returned last.");
            Assert.AreEqual(user.Purchases[0].Request.RequestContent.TransactionId, response.BodyWrapper.ReceiptsPage[1].TransactionId.ToString(), "The first purchased Offer should be returned last.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure transaction Id filter works")]
        public void GetReceiptsTests_VerifyReponses_TransactionId_FilteringSubsetOfIds()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offerOne = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);
            OfferContext offerTwo = MobileGameContentOffers61.GetContentOffer_enUS(2).GetOfferContext(Locales.en_US);

            // Purchase Offers
            user.PurchaseOffer(offerOne);
            user.PurchaseOffer(offerTwo);

            // Get Receipt for the first Offer
            request = new GetReceiptsClientRequest(user.Email, user.Password);
            request.RequestContent.TransactionIds = new string[] { user.Purchases[0].Request.RequestContent.TransactionId };

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code was returned.");
            Assert.AreEqual((uint)1, response.BodyWrapper.TotalItems, "Total Offers is different then expected.");
            Assert.AreEqual(offerOne.OfferId, response.BodyWrapper.ReceiptsPage[0].OfferId, "The last purchased Offer should be returned first.");


            // Get Receipt for the second Offer
            request = new GetReceiptsClientRequest(user.Email, user.Password);
            request.RequestContent.TransactionIds = new string[] { user.Purchases[1].Request.RequestContent.TransactionId };

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code was returned.");
            Assert.AreEqual((uint)1, response.BodyWrapper.TotalItems, "Total Offers is different then expected.");
            Assert.AreEqual(offerTwo.OfferId, response.BodyWrapper.ReceiptsPage[0].OfferId, "The last purchased Offer should be returned first.");


            // Get Receipt for the first and then the second Offer
            request = new GetReceiptsClientRequest(user.Email, user.Password);
            request.RequestContent.TransactionIds = new string[] { user.Purchases[0].Request.RequestContent.TransactionId, user.Purchases[1].Request.RequestContent.TransactionId };

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code was returned.");
            Assert.AreEqual((uint)2, response.BodyWrapper.TotalItems, "Total Offers is different then expected.");
            Assert.AreEqual(offerTwo.OfferId, response.BodyWrapper.ReceiptsPage[0].OfferId, "The last purchased Offer should be returned first. Even if it's second within the request.");
            Assert.AreEqual(offerOne.OfferId, response.BodyWrapper.ReceiptsPage[1].OfferId, "The first purchased Offer should be returned first. Event if it's the first one within the request.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure the transaction Id that's used to purchase the item is also the Id used within the GetReceipts.")]
        public void GetReceiptsTests_VerifyReponses_TransactionId_StartDateFilter()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offerOne = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);
            OfferContext offerTwo = MobileGameContentOffers61.GetContentOffer_enUS(2).GetOfferContext(Locales.en_US);

            user.PurchaseOffer(offerOne);

            // Sleep between purchases to allow for searchable seperation
            System.Threading.Thread.Sleep(10000);

            user.PurchaseOffer(offerTwo);

            // Make getReceipt request using the StartDate time after the first item purchased.
            request = new GetReceiptsClientRequest(user.Email, user.Password);
            request.RequestContent.StartDate = user.Purchases[0].Response.BodyWrapper.PurchaseDate.AddSeconds(5).ToString(PDLCTestCommon.DateTimeUniversalFormat);
            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code was returned.");
            Assert.AreEqual((uint)1, response.BodyWrapper.TotalItems, "Total Offers is different then expected.");
            Assert.AreEqual(user.Purchases[1].Request.RequestContent.TransactionId, response.BodyWrapper.ReceiptsPage[0].TransactionId.ToString(), "TransactionId should match the requested transactionId based off the requested StartDate.");
        }

        [TestMethod]
        [Description("If an unsigned GetReceipts request is sent for a user with no purchase history, validate that an empty unsigned receipt is received")]
        public void GetReceiptsTests_VerifyReponses_NoItemsPurchased()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWithNoPurchase;

            request = new GetReceiptsClientRequest(user.Email, user.Password);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid StatusCode was returned");
            Assert.AreEqual((uint)0, response.BodyWrapper.TotalItems, "Total Offers is different then expected.");
        }

        [TestMethod]
        [Description("If a signed GetReceipts request is sent for a user with no purchase history, validate that an empty signed receipt is received.")]
        public void GetReceiptsTests_VerifyReponses_SignReceipts_NoItems()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWithNoPurchase;

            request = new GetReceiptsClientRequest(user.Email, user.Password);
            request.RequestContent.SignReceipts = bool.TrueString.ToLower();

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid StatusCode was returned");
            Assert.IsTrue(response.BodyWrapper.IsSignatureValid, "Signature of the receipt is invalid");
            Assert.AreEqual((uint)0, response.BodyWrapper.TotalItems, "Total Offers is different then expected.");
        }

        [TestMethod]
        [Description("If an unsigned GetReceipts request is sent for a user with N purchases, validate that an unsigned receipt for N purchses is received.")]
        public void GetReceiptsTests_VerifyReponses_UnsignedReceipts_All()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWith10Purchases;

            request = new GetReceiptsClientRequest(user.Email, user.Password);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid StatusCode was returned");
            Assert.AreEqual((uint)10, response.BodyWrapper.TotalItems, "Should return all items");
            Assert.AreEqual(10, response.BodyWrapper.ReceiptsPage.Length, "Should return all items.");
        }

        [TestMethod]
        [Description("If an unsigned GetReceipts request is sent for a user with N purchases, validate that a signed receipt for N purchses is received.")]
        public void GetReceiptsTests_VerifyReponses_SignReceipts_All()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWith10Purchases;

            request = new GetReceiptsClientRequest(user.Email, user.Password);
            request.RequestContent.SignReceipts = bool.TrueString.ToLower();

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid StatusCode was returned");
            Assert.IsTrue(response.BodyWrapper.IsSignatureValid, "Signature of the receipt is invalid.");
            Assert.AreEqual((uint)10, response.BodyWrapper.TotalItems, "Should return all items");
            Assert.AreEqual(10, response.BodyWrapper.ReceiptsPage.Length, "Should return all items.");
        }

        [TestMethod]
        [Description("If an unsigned GetReceipts request is sent with zero page size, validate that the default PageSize is returned.")]
        public void GetReceiptsTests_VerifyReponses_PageSize_Zero()
        {
            // OLD BUGs: 12511
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWith10Purchases;

            request = new GetReceiptsClientRequest(user.Email, user.Password);
            request.RequestContent.PageSize = "0";

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid StatusCode was returned");
            Assert.AreEqual((uint)10, response.BodyWrapper.TotalItems, "Should always return how many Items there are total. Not just what's on the page.");
            Assert.AreEqual(10, response.BodyWrapper.ReceiptsPage.Length, "Default page size should be selected if Zero is passed in");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("If an unsigned GetReceipts request is sent with a page size of N less than total items, validate that an unsigned receipt for N purchases is received.")]
        public void GetReceiptsTests_VerifyReponses_PageSize_LessThanTotal()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWith10Purchases;

            request = new GetReceiptsClientRequest(user.Email, user.Password);
            request.RequestContent.PageSize = "2";

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid StatusCode was returned");
            Assert.AreEqual((uint)10, response.BodyWrapper.TotalItems, "Should still return the total number of items.");
            Assert.AreEqual(request.RequestContent.PageSize, response.BodyWrapper.ReceiptsPage.Length.ToString(), "Should only return the last two items purhased");

            PDLCTestCommon.ValidatePurchaseReceiptAgainstOffer(user.Purchases[9].Offer, response.BodyWrapper.ReceiptsPage[0]);
            PDLCTestCommon.ValidatePurchaseReceiptAgainstOffer(user.Purchases[8].Offer, response.BodyWrapper.ReceiptsPage[1]);
        }

        [TestMethod]
        [Description("If an unsigned GetReceipts request is sent with a page size of N equal to total items, validate that an unsigned receipt for all purchases is received.")]
        public void GetReceiptsTests_VerifyReponses_PageSize_EqualToTotal()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWith10Purchases;

            int pageSize = user.Purchases.Count;

            request = new GetReceiptsClientRequest(user.Email, user.Password);
            request.RequestContent.PageSize = pageSize.ToString();

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid StatusCode was returned");
            Assert.AreEqual((uint)10, response.BodyWrapper.TotalItems, "Should return all items");
            Assert.AreEqual(10, response.BodyWrapper.ReceiptsPage.Length, "Should return all items.");
        }

        [TestMethod]
        [Description("If an unsigned GetReceipts request is sent with a page size of N greater than total items, validate that an unsigned receipt for all purchases is received.")]
        public void GetReceiptsTests_VerifyReponses_PageSize_GreaterThanTotal()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWith10Purchases;

            int pageSize = (int)user.Purchases.Count + 5;

            request = new GetReceiptsClientRequest(user.Email, user.Password);
            request.RequestContent.PageSize = pageSize.ToString();

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid StatusCode was returned");
            Assert.AreEqual((uint)10, response.BodyWrapper.TotalItems, "Should return all items");
            Assert.AreEqual(10, response.BodyWrapper.ReceiptsPage.Length, "Should return all items.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("If an unsigned GetReceipts request is sent with for a second page, validate that an unsigned receipt for the second page is received.")]
        public void GetReceiptsTests_VerifyReponses_PageNumber_SecondPage()
        {
            int pageNum = 2;
            int pageSize = 4;
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWith10Purchases;           

            request = new GetReceiptsClientRequest(user.Email, user.Password);

            request.RequestContent.PageSize = pageSize.ToString();
            request.RequestContent.PageNumber = pageNum.ToString();

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid StatusCode was returned");
            Assert.AreEqual((uint)10, response.BodyWrapper.TotalItems, "Should return total items even if your on a different page.");
            Assert.AreEqual(pageSize, response.BodyWrapper.ReceiptsPage.Length, "Number of items returned should equal the page size.");

            PDLCTestCommon.ValidatePurchaseReceiptAgainstOffer(user.Purchases[5].Offer, response.BodyWrapper.ReceiptsPage[0]);
            PDLCTestCommon.ValidatePurchaseReceiptAgainstOffer(user.Purchases[4].Offer, response.BodyWrapper.ReceiptsPage[1]);
            PDLCTestCommon.ValidatePurchaseReceiptAgainstOffer(user.Purchases[3].Offer, response.BodyWrapper.ReceiptsPage[2]);
            PDLCTestCommon.ValidatePurchaseReceiptAgainstOffer(user.Purchases[2].Offer, response.BodyWrapper.ReceiptsPage[3]);
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("If an unsigned GetReceipts request is sent with for the last page, validate that an unsigned receipt for the last page is received. And contain only the remaining items. So smaller then the page size.")]
        public void GetReceiptsTests_VerifyReponses_PageNumber_PartialLastPage()
        {
            int pageNum = 3;
            int pageSize = 4;
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWith10Purchases;

            request = new GetReceiptsClientRequest(user.Email, user.Password);

            request.RequestContent.PageSize = pageSize.ToString();
            request.RequestContent.PageNumber = pageNum.ToString();

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid StatusCode was returned");
            Assert.AreEqual((uint)10, response.BodyWrapper.TotalItems, "Should return total items even if your on a different page.");
            Assert.AreEqual(2, response.BodyWrapper.ReceiptsPage.Length, "Last page should contain less pages then the page size.");

            PDLCTestCommon.ValidatePurchaseReceiptAgainstOffer(user.Purchases[1].Offer, response.BodyWrapper.ReceiptsPage[0]);
            PDLCTestCommon.ValidatePurchaseReceiptAgainstOffer(user.Purchases[0].Offer, response.BodyWrapper.ReceiptsPage[1]);
        }

        [TestMethod]
        [Description("If an unsigned GetReceipts request is sent with zero page size and number, validate that the default Server values are used.")]
        public void GetReceiptsTests_VerifyReponses_PageSize_Zero_PageNumber_Zero()
        {
            // OLD BUGs: 12511
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWith10Purchases;

            request = new GetReceiptsClientRequest(user.Email, user.Password);

            request.RequestContent.PageSize = "0";
            request.RequestContent.PageNumber = "0";

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid StatusCode was returned");
            Assert.AreEqual((uint)10, response.BodyWrapper.TotalItems, "Should always return how many Items there are total. Not just what's on the page.");
            Assert.AreEqual(10, response.BodyWrapper.ReceiptsPage.Length, "Default page size should be selected if Zero is passed in");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("If an unsigned GetReceipts request is sent with a zero page number. Service just uses it's defaults.")]
        public void GetReceiptsTests_VerifyReponses_PageNumber_Zero()
        {
            // OLD BUGs: 12511
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWith10Purchases;

            request = new GetReceiptsClientRequest(user.Email, user.Password);
            request.RequestContent.PageNumber = "0";

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid StatusCode was returned");
            Assert.AreEqual((uint)10, response.BodyWrapper.TotalItems, "Should always return how many Items there are total. Not just what's on the page.");
            Assert.AreEqual(10, response.BodyWrapper.ReceiptsPage.Length, "Default page size should be selected if Zero is passed in");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure receipt is returned as Unsigned if SignReceipts=false or if SignReceipts is not passed at all. SignReceipts=false is the default")]
        public void GetReceiptsTests_VerifyReponses_UnsignedReceipts_Default()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWith1Purchase;

            // Pass in SignReceipts == false
            request = new GetReceiptsClientRequest(user.Email, user.Password);
            request.RequestContent.SignReceipts = bool.FalseString.ToLower();

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code was returned.");
            Assert.AreEqual(false, response.BodyWrapper.IsSignatureValid, "Receipt should have not been signed.");
            PDLCTestCommon.ValidatePurchaseReceiptAgainstOffer(user.Purchases[0].Offer, response.BodyWrapper.ReceiptsPage[0]);


            // Exercise the default when SignReceipts is not passed
            request = new GetReceiptsClientRequest(user.Email, user.Password);
            request.RequestContent.SignReceipts = null;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code was returned.");
            Assert.AreEqual(false, response.BodyWrapper.IsSignatureValid, "Receipt should have not been signed.");
            PDLCTestCommon.ValidatePurchaseReceiptAgainstOffer(user.Purchases[0].Offer, response.BodyWrapper.ReceiptsPage[0]);
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("If an unsigned GetReceipts request is sent with for the last page + 1, validate that an empty unsigned receipt is received.")]
        public void GetReceiptsTests_VerifyReponses_UnsignedReceipts_PageNumber_LastPagePlus()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWith10Purchases;

            int pageSize = 3;
            int pageNum = 100;

            request = new GetReceiptsClientRequest(user.Email, user.Password);

            request.RequestContent.PageSize = pageSize.ToString();
            request.RequestContent.PageNumber = pageNum.ToString();

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid StatusCode was returned");
            Assert.AreEqual((uint)10, response.BodyWrapper.TotalItems, "Should always return how many Items there are total. Not just what's on the page.");
            Assert.AreEqual(0, response.BodyWrapper.ReceiptsPage.Length, "As the page number is passed the number of Items, nothing should get returned.");
        }

        [TestMethod]
        [WorkItem(12512)] // This is a platform bug. Yet to be closed.
        [Owner("rsnyder")]
        [Description("If an unsigned GetReceipts request is sent with the same title id as the token, validate that an unsigned receipt for only that title id is received.")]
        public void GetReceiptsTests_VerifyReponses_TitleId_MultiItemsPurchasedCrossTitles()
        {
            // OLD BUGs: 12512
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offerTitleOne = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);
            OfferContext offerTitleTwo = MobileGameContentOffers62.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);

            user.PurchaseOffer(offerTitleOne);
            user.PurchaseOffer(offerTitleTwo);

            request = new GetReceiptsClientRequest(user.Email, user.Password);

            // Ensure request is authenticated against this TitleId
            request.Title = request.Title61TitleId;
            request.RequestContent.TitleId = request.Title61TitleId.Id;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid StatusCode was returned");
            Assert.AreEqual((uint)1, response.BodyWrapper.TotalItems, "Total Offers is different then expected.");
            Assert.AreEqual(offerTitleOne.OfferId, response.BodyWrapper.ReceiptsPage[0].OfferId, "Only Offers for the past in title should be returned");
        }

        [TestMethod]
        [WorkItem(12512)] // This is a platform bug. Yet to be closed.
        [Owner("rsnyder")]
        [Description("If an unsigned GetReceipts request is sent with the same title id as the token, validate that an unsigned receipt for only that title id is received.")]
        public void GetReceiptsTests_VerifyReponses_TransactionId_CrossTitleRequest()
        {
            // OLD BUGs: 12512
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offerTitleOne = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);
            OfferContext offerTitleTwo = MobileGameContentOffers62.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);

            user.PurchaseOffer(offerTitleOne);
            user.PurchaseOffer(offerTitleTwo);

            request = new GetReceiptsClientRequest(user.Email, user.Password);

            if (request.Title.Id == offerTitleTwo.TitleId.ToString())
            {
                throw new Exception("request.Title.Id can not equal offerTitleTwo.TitleId for this test to be valid.");
            }

            // Set the Filtered transactionId to an Id not within the Authenticated TitleId
            request.RequestContent.TransactionIds = new string[] { user.Purchases[1].Request.RequestContent.TransactionId.ToString() };
            
            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid StatusCode was returned");
            Assert.AreEqual((uint)0, response.BodyWrapper.TotalItems, "Requesting for Offer from another Title. Should not return anything.");
            Assert.AreEqual(0, response.BodyWrapper.ReceiptsPage.Length, "Requesting for Offer from another Title. Should not return anything.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("If an unsigned GetReceipts request is sent with an empty guid transaction id, validate that an empty unsigned receipt is received.")]
        public void GetReceiptsTests_VerifyReponses_TransactionId_EmptyGuid()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWith10Purchases;

            request = new GetReceiptsClientRequest(user.Email, user.Password);

            request.RequestContent.TransactionIds = new string[] { Guid.Empty.ToString() };

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid StatusCode was returned");
            Assert.AreEqual((uint)0, response.BodyWrapper.TotalItems, "Invalid Transaction Id should result in nothing be returned");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("If an unsigned GetReceipts request is sent with a nonexistent transaction id, validate that an empty unsigned receipt is received.")]
        public void GetReceiptsTests_VerifyReponses_TransactionId_NonExistent()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWith10Purchases;

            request = new GetReceiptsClientRequest(user.Email, user.Password);

            request.RequestContent.TransactionIds = new string[] { Guid.NewGuid().ToString(), Guid.NewGuid().ToString() };

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid StatusCode was returned");
            Assert.AreEqual((uint)0, response.BodyWrapper.TotalItems, "Invalid Transaction Id should result in nothing be returned");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("If an unsigned GetReceipts request is sent with one valid transaction id, validate that an unsigned receipt for one purchase is received.")]
        public void GetReceiptsTests_VerifyReponses_TransactionId_SingleValid()
        {
            int purchaseItemId;
            string transactoinId;
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWith10Purchases;

            purchaseItemId = rnd.Next(0, user.Purchases.Count);
            Trace.WriteLine("RANDOM Purchased Item #" + purchaseItemId.ToString());

            transactoinId = user.Purchases[purchaseItemId].Request.RequestContent.TransactionId;

            request = new GetReceiptsClientRequest(user.Email, user.Password);

            request.RequestContent.TransactionIds = new string[] { transactoinId };

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid StatusCode was returned");
            Assert.AreEqual((uint)1, response.BodyWrapper.TotalItems, "Should only return the single transaction.");
            Assert.AreEqual(transactoinId, response.BodyWrapper.ReceiptsPage[0].TransactionId.ToString(), "Should only return the requested in transactionId.");
            PDLCTestCommon.ValidatePurchaseReceiptAgainstOffer(user.Purchases[purchaseItemId].Offer, response.BodyWrapper.ReceiptsPage[0]);
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("If an unsigned GetReceipts request is sent with several valid transaction ids, validate that an unsigned receipt for those purchases are received.")]
        public void GetReceiptsTests_VerifyReponses_TransactionId_SeveralValid()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWith10Purchases;

            request = new GetReceiptsClientRequest(user.Email, user.Password);

            request.RequestContent.TransactionIds = new string[3];
            request.RequestContent.TransactionIds[0] = user.Purchases[9].Request.RequestContent.TransactionId.ToString();
            request.RequestContent.TransactionIds[1] = user.Purchases[0].Request.RequestContent.TransactionId.ToString();
            request.RequestContent.TransactionIds[2] = user.Purchases[4].Request.RequestContent.TransactionId.ToString();

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid StatusCode was returned");
            Assert.AreEqual((uint)3, response.BodyWrapper.TotalItems, "Three Receipt should be returned");
            Assert.AreEqual(user.Purchases[9].Offer.OfferId, response.BodyWrapper.ReceiptsPage[0].OfferId, "Purchase date order should be maintained.");
            Assert.AreEqual(user.Purchases[4].Offer.OfferId, response.BodyWrapper.ReceiptsPage[1].OfferId, "Purchase date order should be maintained.");
            Assert.AreEqual(user.Purchases[0].Offer.OfferId, response.BodyWrapper.ReceiptsPage[2].OfferId, "Purchase date order should be maintained.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Several valid transaction ids with a couple non existent ones should still result in valid ones being returned.")]
        public void GetReceiptsTests_VerifyReponses_TransactionId_SeveralValidAndNonExisten()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWith10Purchases;

            request = new GetReceiptsClientRequest(user.Email, user.Password);

            request.RequestContent.TransactionIds = new string[5];
            request.RequestContent.TransactionIds[0] = user.Purchases[9].Request.RequestContent.TransactionId.ToString();
            request.RequestContent.TransactionIds[1] = user.Purchases[0].Request.RequestContent.TransactionId.ToString();
            request.RequestContent.TransactionIds[2] = Guid.NewGuid().ToString();
            request.RequestContent.TransactionIds[3] = user.Purchases[4].Request.RequestContent.TransactionId.ToString();
            request.RequestContent.TransactionIds[4] = Guid.NewGuid().ToString();

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid StatusCode was returned");
            Assert.AreEqual((uint)3, response.BodyWrapper.TotalItems, "Three Receipt should be returned");
            Assert.AreEqual(user.Purchases[9].Offer.OfferId, response.BodyWrapper.ReceiptsPage[0].OfferId, "Purchase date order should be maintained.");
            Assert.AreEqual(user.Purchases[4].Offer.OfferId, response.BodyWrapper.ReceiptsPage[1].OfferId, "Purchase date order should be maintained.");
            Assert.AreEqual(user.Purchases[0].Offer.OfferId, response.BodyWrapper.ReceiptsPage[2].OfferId, "Purchase date order should be maintained.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("When MediaTypeId is not passed. The default Mobile media type id should be MobilePDLC (59).")]
        public void GetReceiptsTests_VerifyReponses_MediaTypeId_DefaultsToMobilePDLC()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offerDurable = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);
            OfferContext offerConsumable = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002001().GetOfferContext(Locales.en_US);

            user.PurchaseOffer(offerDurable);
            user.PurchaseOffer(offerConsumable);

            request = new GetReceiptsClientRequest(user.Email, user.Password);

            // Ensure MediaTypeId is not passed
            request.RequestContent.MediaTypeId = null;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid StatusCode was returned");
            Assert.AreEqual((uint)1, response.BodyWrapper.TotalItems, "Total Offers is different then expected.");
            PDLCTestCommon.ValidatePurchaseReceiptAgainstOffer(offerDurable, response.BodyWrapper.ReceiptsPage[0]);
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Mobile media type id MobilePDLC (59).")]
        public void GetReceiptsTests_VerifyReponses_MediaTypeId_MobileDurable()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offerDurable = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);
            OfferContext offerConsumable = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002001().GetOfferContext(Locales.en_US);

            user.PurchaseOffer(offerDurable);
            user.PurchaseOffer(offerConsumable);

            request = new GetReceiptsClientRequest(user.Email, user.Password);

            request.RequestContent.MediaTypeId = ((int)MediaType.MobilePDLC).ToString();

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid StatusCode was returned");
            Assert.AreEqual((uint)1, response.BodyWrapper.TotalItems, "Total Offers is different then expected.");
            PDLCTestCommon.ValidatePurchaseReceiptAgainstOffer(offerDurable, response.BodyWrapper.ReceiptsPage[0]);
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Mobile media type id MobileConsumable (60).")]
        public void GetReceiptsTests_VerifyReponses_MediaTypeId_MobileConsumable()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offerDurable = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);
            OfferContext offerConsumable = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002001().GetOfferContext(Locales.en_US);

            user.PurchaseOffer(offerDurable);
            user.PurchaseOffer(offerConsumable);

            request = new GetReceiptsClientRequest(user.Email, user.Password);
            request.RequestContent.MediaTypeId = ((int)MediaType.MobileConsumable).ToString();
            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid StatusCode was returned");
            Assert.AreEqual((uint)1, response.BodyWrapper.TotalItems, "Total Offers is different then expected.");

            Assert.AreEqual(offerConsumable.Title, response.BodyWrapper.ReceiptsPage[0].Title, "Title is invalid for offer: " + offerConsumable.OfferId);
            Assert.AreEqual(offerConsumable.OfferId, response.BodyWrapper.ReceiptsPage[0].OfferId, "OfferIds should be the same.");

            Assert.IsNotNull(response.BodyWrapper.ReceiptsPage[0].MediaInstanceURLs, "MediaInstanceURLs is required.");
            Assert.AreEqual(offerConsumable.MediaInstanceURLs.Count, response.BodyWrapper.ReceiptsPage[0].MediaInstanceURLs.Count, "The expected number of MediaInstanceURLs is not correct.");

            for (int i = 0; i < offerConsumable.MediaInstanceURLs.Count; i++)
            {
                Assert.AreEqual(offerConsumable.MediaInstanceURLs[i], response.BodyWrapper.ReceiptsPage[0].MediaInstanceURLs[i], "MediaInstanceURLs should be identical.");
            }
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Mobile media type id AvatarItems (47).")]
        public void GetReceiptsTests_VerifyReponses_MediaTypeId_AvatarItems()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offerAvatarItem = PDLCTestCommon.Offer_AvatarItem();
            OfferContext offerDurable = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);
            OfferContext offerConsumable = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002001().GetOfferContext(Locales.en_US);

            user.PurchaseOffer(offerDurable);
            user.PurchaseOffer(offerConsumable);
            user.PurchaseOffer(offerAvatarItem);

            request = new GetReceiptsClientRequest(user.Email, user.Password);

            request.RequestContent.MediaTypeId = ((int)MediaType.AvatarItems).ToString();

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid StatusCode was returned");
            Assert.AreEqual((uint)1, response.BodyWrapper.TotalItems, "Total Offers is different then expected.");
            PDLCTestCommon.ValidatePurchaseReceiptAgainstOffer(offerAvatarItem, response.BodyWrapper.ReceiptsPage[0]);
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("If an unsigned GetReceipts request is sent with the StartDate equal to the purchase item puchased, validate that an unsigned receipt for all purchases is received.")]
        public void GetReceiptsTests_VerifyReponses_StartDate_EqualToFirstPurchasedItem()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWith10Purchases;
            DateTime firstPurchaseDate = user.Purchases[0].Response.BodyWrapper.PurchaseDate;

            request = new GetReceiptsClientRequest(user.Email, user.Password);

            request.RequestContent.StartDate = firstPurchaseDate.ToString(PDLCTestCommon.DateTimeUniversalFormat);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid StatusCode was returned");
            Assert.AreEqual((uint)10, response.BodyWrapper.TotalItems, "Past date equal to the first purchased item should result in all items getting returned.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("If an unsigned GetReceipts request is sent with a future date, validate that an empty unsigned receipt is received.")]
        public void GetReceiptsTests_VerifyReponses_StartDate_Future()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = this.UserWith10Purchases;

            request = new GetReceiptsClientRequest(user.Email, user.Password);

            request.RequestContent.StartDate = DateTime.UtcNow.AddDays(1).ToString("s");

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid StatusCode was returned");
            Assert.AreEqual((uint)0, response.BodyWrapper.TotalItems, "Future date should result in nothing getting returned.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("If an unsigned GetReceipts request is sent with an in-between date, validate that an unsigned receipt for purchases after that date is received.")]
        public void GetReceiptsTests_VerifyReponses_StartDate_InBetween()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offerOne = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);
            OfferContext offerTwo = MobileGameContentOffers61.GetContentOffer_enUS(2).GetOfferContext(Locales.en_US);

            user.PurchaseOffer(offerOne);

            // Sleep between purchases to allow for searchable seperation
            System.Threading.Thread.Sleep(10000);

            user.PurchaseOffer(offerTwo);

            // Make getReceipt request using the StartDate time after the first item purchased.
            request = new GetReceiptsClientRequest(user.Email, user.Password);
            request.RequestContent.StartDate = user.Purchases[0].Response.BodyWrapper.PurchaseDate.AddSeconds(5).ToString(PDLCTestCommon.DateTimeUniversalFormat);
            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code was returned.");
            Assert.AreEqual((uint)1, response.BodyWrapper.TotalItems, "Total Offers is different then expected.");
            Assert.AreEqual(offerTwo.OfferId, response.BodyWrapper.ReceiptsPage[0].OfferId, "StartDate was sent in after the time of the first item purchase. Only the second item should be returned.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Request for receipts the exact time of a purchase should return that item. One second later should not return that item.")]
        public void GetReceiptsTests_VerifyReponses_StartDate_FilterSeperation()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offerOne = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);
            
            user.PurchaseOffer(offerOne);


            // Make getReceipt request using the StartDate time after the first item purchased.
            request = new GetReceiptsClientRequest(user.Email, user.Password);
            request.RequestContent.StartDate = user.Purchases[0].Response.BodyWrapper.PurchaseDate.ToString(PDLCTestCommon.DateTimeUniversalFormat);
            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code was returned.");
            Assert.AreEqual((uint)1, response.BodyWrapper.TotalItems, "Total Offers is different then expected.");
            Assert.AreEqual(offerOne.OfferId, response.BodyWrapper.ReceiptsPage[0].OfferId, "StartDate was sent at the exact time of the first item purchase. That item should return");


            // Make getReceipt request using the StartDate time after the first item purchased.
            request = new GetReceiptsClientRequest(user.Email, user.Password);
            request.RequestContent.StartDate = user.Purchases[0].Response.BodyWrapper.PurchaseDate.AddSeconds(1).ToString(PDLCTestCommon.DateTimeUniversalFormat);
            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code was returned.");
            Assert.AreEqual((uint)0, response.BodyWrapper.TotalItems, "Total Offers is different then expected.");
            Assert.AreEqual(0, response.BodyWrapper.ReceiptsPage.Length, "StartDate was sent in after the time of the first item purchase. No items should return.");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\PDLC.Test\PDLC.Tests.Purchase\PurchaseTestsCommon.cs ===
﻿using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using LiveN.Test;
using LiveN.Test.Content;
using LiveN.Test.Users;

namespace PDLC.Tests
{
    /// <summary>
    /// Common test code for Purchase tests
    /// </summary>
    public partial class PurchaseTests
    {
        /// <summary>
        /// Global random number generator to be used by all
        /// </summary>
        public Random rnd = new Random();

        /// <summary>
        /// Verify the response object against the passed in Offer
        /// </summary>
        /// <param name="response">Response from the service</param>
        /// <param name="offer">Expected Offer</param>
        private void ValidatePurchaseReceiptAgainstOffer(OfferContext offer, PurchaseClientResponse response)
        {
            PDLCTestCommon.ValidatePurchaseReceiptAgainstOffer(offer, response.BodyWrapper);

            Assert.AreEqual(response.TransactionTime.ToUniversalTime().ToString("yyyy"), response.BodyWrapper.PurchaseDate.ToString("yyyy"), "PurchaseDate YEAR is not on the correct day of year (Today). Purchase date UTC: " + response.BodyWrapper.PurchaseDate.ToString() + " Current Time UTC: " + DateTime.UtcNow.ToString());
            Assert.AreEqual(response.TransactionTime.ToUniversalTime().ToString("MM"), response.BodyWrapper.PurchaseDate.ToString("MM"), "PurchaseDate MONTH is not on the correct day of year (Today). Purchase date UTC: " + response.BodyWrapper.PurchaseDate.ToString() + " Current Time UTC: " + DateTime.UtcNow.ToString());
            Assert.AreEqual(response.TransactionTime.ToUniversalTime().ToString("dd"), response.BodyWrapper.PurchaseDate.ToString("dd"), "PurchaseDate DAY is not on the correct day of year (Today). Purchase date UTC: " + response.BodyWrapper.PurchaseDate.ToString() + " Current Time UTC: " + DateTime.UtcNow.ToString());
            Assert.IsTrue(response.TransactionTime.ToUniversalTime().AddMinutes(-5) < response.BodyWrapper.PurchaseDate, "Purchase date time happened over 5 minutes again. This is to far off. Purchase date UTC: " + response.BodyWrapper.PurchaseDate.ToString() + " Current Time UTC: " + DateTime.UtcNow.AddMinutes(-5).ToString());
            Assert.IsTrue(response.TransactionTime.ToUniversalTime().AddMinutes(1) > response.BodyWrapper.PurchaseDate, "Purchase date time happened is in the future. Purchase date UTC: " + response.BodyWrapper.PurchaseDate.ToString());
        }

        /// <summary>
        /// Generate a defualt request for purchasing an Offer
        /// </summary>
        /// <returns>Default purchase request</returns>
        public static PurchaseClientRequest GenerateDefaultPurchaseRequest()
        {
            UserAccount user;
            ContentOffer offer;
            PurchaseClientRequest request;
            
            user = new UserAccount(XblLiveUserTier.Gold, true);
            request = new PurchaseClientRequest(user.Email, user.Password);

            offer = MobileGameContentOffers61.GetContentOffer_enUS(1);

            request.RequestContent.CreatePurchaseRequest(offer.GetOfferContext(Locales.en_US), PurchasePaymentType.Points);

            return request;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\PDLC.Test\PDLC.Tests.Purchase\PurchaseTests_Manual.cs ===
﻿using System;
using System.Net;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using LiveNew.Test;

using LiveN.Test;
using LiveN.Test.Content;
using LiveN.Test.Users;

namespace PDLC.Tests
{
    /// <summary>
    /// Manual test cases that have not been automated yet
    /// </summary>
    public partial class PurchaseTests
    {   
        [TestMethod]
        [Owner("rsnyder")]
        [Description("Response for Throttled Live Cache call")]
        public void PurchaseTests_Manual_ThrottledLiveCache()
        {
            //Last time this test was Manually verified:
            // -Has Not been Tested 1/11/2011

            Assert.Inconclusive("Need to implement");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Purchase request succeeded but when trying to construct the receipt, Purchase History Fails. We have defined ErrorCode PDLC_E_NO_PURCHASE_ENTRY_FOR_TRANSACTION for this case.")]
        public void PurchaseTests_Manual_PurchaseSucceedsButHistoryFails()
        {
            //Last time this test was Manually verified:
            // -Verified on 4/18/2011

            Assert.Inconclusive("Need to implement");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Try and purchase a Single User Token that's already been redeemed by someone else.")]
        public void PurchaseTests_Manual_AlreadyUsedToken()
        {
            //Last time this test was Manually verified:
            // -Verified on 2/23/2011

            // Steps:
            // 1. Debug PDLC Service
            // 2. Find the verification of request.MediaTypeId and put a break point there
            // 3. Execute test
            // 4. Within the PDLC Service, move the cursur passed the verification logic and execute
            // 5. Below should pass
            // NOTE: If your using a new Xblob, the Token will actually cause a purchase. So you'll need to run twice.

            OfferContext offer;
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);

            offer = PDLCTestCommon.Offer_SingleUse();

            request = new PurchaseClientRequest(user.Email, user.Password);

            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Token);

            response = request.MakeARequest();

            Assert.AreNotEqual(HttpStatusCode.OK, response.StatusCode, "This may becuase the Token has never been Redeemed. So purchase succeeds.");
            Assert.AreNotEqual("The MediaTypeId is not supported.", response.ServiceErrorMessageWrapper.ErrorMessage, "You did not follow the above steps. This test will always fail without following them.");

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "You did not follow the above steps. This test will always fail without following them.");
            Assert.AreEqual("Invalid token.", response.ServiceErrorMessageWrapper.ErrorMessage, "Invalid status code");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Verify if caller passes in the title ID 0x4D5308EC (Xbox Live Extras) or  0x4D53139A (Mango Avatar Editor) gets replaced with 0x584D07D1(Console avatar marketplace's)")]
        public void PurchaseTests_Manual_SwappingTitleId()
        {
            // OLD BUGs: 13167(QFE)

            //Last time this test was Manually verified:
            // -Verified on 4/20/2011

            // Steps:
            // 1. (This step is required until PDLC offers are placed into XSR) Add '; 23' to the end of this value LIVEN_NPDB->t_setting_overrides->lest_Pdlc_SupportedMediaTypeIds
            // 2. Change the PDLC web site to your an app pool that's running under your credentials)
            // 3. Go to installation's webroot\pdlc\web.config and set defaultProxy to true:  <defaultProxy enabled="true" />
            // 4. Get w3wp to load PDLC once again: https://pdlc.dev.xboxlive.com/pdlc.svc/help
            // 4. Attach to the PDLC Service (Attach to w3wp.exe)
            // 5. Set break point on $LEST_MAIN_DEV\product\Source\Pdlc\PdlcServiceLibrary\ReceiptsHelper.cs
            //      Line #67 PurchaseHistoryRequest phRequest = new PurchaseHistoryRequest()
            // 6. Run the test and verify resolvedTitleId has been swapped to 0x584D07D1(Console avatar marketplace's)
            

            OfferContext offer;
            PurchaseClientRequest purchaseRequest;
            PurchaseClientResponse purchaseResponse;

            // Purchasing this offer
            // http://le-xblob-test02:12030/marketplacecatalog/v1/product/en-us?tiers=2&producttypes=23
            offer = new OfferContext();
            offer.OfferId = new Guid("00000001-0000-4000-8000-0000584107f6"); // entry/offerInstances/offerInstance[0]/offerId
            offer.PointsPricePoints = 800; // entry/offerInstances/offerInstance[0]/price
            offer.PointsPriceToken = 800; // entry/offerInstances/offerInstance[0]/price
            offer.ProductId = new Guid("00000000-0000-4000-8000-0000584107f6"); // entry/offerInstances/offerInstance[0]/productInstance/productId
            offer.AssetId = 0; // entry/offerInstances/offerInstance[0]/productInstance/assetId
            offer.GameContentTypeId = 23; // entry/productType
            offer.Title = "Texas Hold'em"; // entry/reducedTitle

            // Purchase the desired Durable
            purchaseRequest = new PurchaseClientRequest(StaticUserEmail, StaticUserPassword);

            purchaseRequest.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            purchaseRequest.RequestContent.StoreId = ((uint)MarketplaceStore.Xbox).ToString();

            // This Title is registered on BioShock2
            // Set the title to be 0x4D5308EC (Xbox Live Extras)
            //purchaseRequest.Title = CurrentEnvironmentSettings.Titles.Get("LiveApp", ConsoleType.WindowsPhone);

            purchaseResponse = purchaseRequest.MakeARequest();
            if (purchaseResponse.StatusCode != HttpStatusCode.BadRequest)
            {
                Assert.AreEqual(HttpStatusCode.OK, purchaseResponse.StatusCode, "Status code should return OK");
                Assert.AreEqual(offer.OfferId, purchaseResponse.BodyWrapper.OfferId, "The OfferId should be the same one that I purchased.");
            }
            else
            {
                // The item was already purchase by this user. Nothing to verify passed response status code.
            }

            // Now get the receipt based off the previous transactionId
            GetReceiptsClientRequest requestGetReceipts;
            GetReceiptsClientResponse responseGetReceipts;

            // Purchase the desired Durable
            requestGetReceipts = new GetReceiptsClientRequest(StaticUserEmail, StaticUserPassword);
            requestGetReceipts.RequestContent.SignReceipts = bool.FalseString.ToLower();


            // Test 0x4D5308EC (Xbox Live Extras)
            requestGetReceipts.Title = purchaseRequest.Title;
            requestGetReceipts.RequestContent.TitleId = "1297287404"; // Set the title to be 0x4D5308EC (Xbox Live Extras)

            responseGetReceipts = requestGetReceipts.MakeARequest(); // Verify Title resolvedTitleId=1481443281 0x584D07D1

            Assert.AreEqual(HttpStatusCode.OK, responseGetReceipts.StatusCode, "Invalid status code was returned.");
            Assert.IsFalse(responseGetReceipts.Body.Contains("<Signature "), "Unsigned receipt should NOT have the Signature Xml Node within the response.");


            // Test 0x4D53139A (Mango Avatar Editor)
            requestGetReceipts.Title = purchaseRequest.Title;
            requestGetReceipts.RequestContent.TitleId = "1297290138"; // Set the title to be 0x4D53139A (Mango Avatar Editor)

            responseGetReceipts = requestGetReceipts.MakeARequest(); // Verify Title resolvedTitleId = 1481443281 0x584D07D1

            Assert.AreEqual(HttpStatusCode.OK, responseGetReceipts.StatusCode, "Invalid status code was returned.");
            Assert.IsFalse(responseGetReceipts.Body.Contains("<Signature "), "Unsigned receipt should NOT have the Signature Xml Node within the response.");


            // Now test off by +1
            requestGetReceipts.Title = purchaseRequest.Title;
            requestGetReceipts.RequestContent.TitleId = "1297290139"; // +1

            responseGetReceipts = requestGetReceipts.MakeARequest(); // Verify Title resolvedTitleId = 1297290139
            Assert.AreEqual(HttpStatusCode.OK, responseGetReceipts.StatusCode, "Invalid status code was returned.");
            Assert.IsFalse(responseGetReceipts.Body.Contains("<Signature "), "Unsigned receipt should NOT have the Signature Xml Node within the response.");


            // Now test off by -1
            requestGetReceipts.Title = purchaseRequest.Title;
            requestGetReceipts.RequestContent.TitleId = "1297290137"; // -1

            responseGetReceipts = requestGetReceipts.MakeARequest(); // Verify Title resolvedTitleId = 1297290137

            Assert.AreEqual(HttpStatusCode.OK, responseGetReceipts.StatusCode, "Invalid status code was returned.");
            Assert.IsFalse(responseGetReceipts.Body.Contains("<Signature "), "Unsigned receipt should NOT have the Signature Xml Node within the response.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description(".)")]
        public void PurchaseTests_NOT_Manual_TempPlaceHolder_DeleteMe_PurchaseThenGetReceipts()
        {
            // OLD BUGs: 13167(QFE)
            // This should be replaced with an Avatar Market Place purchase of Avatar Item.

            // Steps:
            // 1. (This step is required until PDLC offers are placed into XSR) Add '; 23' to the end of this value LIVEN_NPDB->t_setting_overrides->lest_Pdlc_SupportedMediaTypeIds

            OfferContext offer;
            PurchaseClientRequest purchaseRequest;
            PurchaseClientResponse purchaseResponse;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);

            // Purchasing this offer becuase I don't know of any Avatar Items on BioShock2
            // http://le-xblob-test02:12030/marketplacecatalog/v1/product/en-us?tiers=2&producttypes=23
            offer = new OfferContext();
            offer.OfferId = new Guid("00000001-0000-4000-8000-0000584107f6"); // entry/offerInstances/offerInstance[0]/offerId
            offer.PointsPricePoints = 800; // entry/offerInstances/offerInstance[0]/price
            offer.PointsPriceToken = 800; // entry/offerInstances/offerInstance[0]/price
            offer.ProductId = new Guid("00000000-0000-4000-8000-0000584107f6"); // entry/offerInstances/offerInstance[0]/productInstance/productId
            offer.AssetId = 0; // entry/offerInstances/offerInstance[0]/productInstance/assetId
            offer.GameContentTypeId = 23; // entry/productType
            offer.Title = "Texas Hold'em"; // entry/reducedTitle

            // Purchase the desired Durable
            purchaseRequest = new PurchaseClientRequest(user.Email, user.Password);

            purchaseRequest.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            purchaseRequest.RequestContent.StoreId = ((uint)MarketplaceStore.Xbox).ToString();

            purchaseResponse = purchaseRequest.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, purchaseResponse.StatusCode, "Status code should return OK");
            Assert.AreEqual(offer.OfferId, purchaseResponse.BodyWrapper.OfferId, "The OfferId should be the same one that I purchased.");


            // Now get the receipt based off the previous transactionId
            GetReceiptsClientRequest requestGetReceipts;
            GetReceiptsClientResponse responseGetReceipts;

            requestGetReceipts = new GetReceiptsClientRequest(user.Email, user.Password);
            requestGetReceipts.RequestContent.TransactionIds = new string[] { purchaseRequest.RequestContent.TransactionId };
            requestGetReceipts.RequestContent.SignReceipts = bool.FalseString.ToLower();
            requestGetReceipts.RequestContent.TitleId = "4294838225";

            responseGetReceipts = requestGetReceipts.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, responseGetReceipts.StatusCode, "Invalid status code was returned.");
            Assert.IsFalse(responseGetReceipts.Body.Contains("<Signature "), "Unsigned receipt should NOT have the Signature Xml Node within the response.");


            // Now get the receipt without transactionId
            requestGetReceipts = new GetReceiptsClientRequest(user.Email, user.Password);
            requestGetReceipts.RequestContent.SignReceipts = bool.FalseString.ToLower();
            requestGetReceipts.RequestContent.PageNumber = "1";
            requestGetReceipts.RequestContent.PageSize = "1";
            requestGetReceipts.RequestContent.TitleId = "4294838225";

            responseGetReceipts = requestGetReceipts.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, responseGetReceipts.StatusCode, "Invalid status code was returned.");
            Assert.IsFalse(responseGetReceipts.Body.Contains("<Signature "), "Unsigned receipt should NOT have the Signature Xml Node within the response.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Verify if caller is authed against one Title Id, that is does not block them form purchasing another item.)")]
        public void PurchaseTests_NOT_Manual_TempPlaceHolder_DeleteMe_CrossTitlePuchase()
        {
            // OLD BUGs: 13167(QFE)
            // This should be replaced with an Avatar Market Place purchase of Avatar Item.

            // Steps:
            // 1. (This step is required until PDLC offers are placed into XSR) Add '; 23' to the end of this value LIVEN_NPDB->t_setting_overrides->lest_Pdlc_SupportedMediaTypeIds
            
            OfferContext offer;
            PurchaseClientRequest purchaseRequest;
            PurchaseClientResponse purchaseResponse;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);

            // Purchasing this offer becuase I don't know of any Avatar Items on BioShock2
            // http://le-xblob-test02:12030/marketplacecatalog/v1/product/en-us?tiers=2&producttypes=23
            offer = new OfferContext();
            offer.OfferId = new Guid("00000001-0000-4000-8000-0000584107f6"); // entry/offerInstances/offerInstance[0]/offerId
            offer.PointsPricePoints = 800; // entry/offerInstances/offerInstance[0]/price
            offer.PointsPriceToken = 800; // entry/offerInstances/offerInstance[0]/price
            offer.ProductId = new Guid("00000000-0000-4000-8000-0000584107f6"); // entry/offerInstances/offerInstance[0]/productInstance/productId
            offer.AssetId = 0; // entry/offerInstances/offerInstance[0]/productInstance/assetId
            offer.GameContentTypeId = 23; // entry/productType
            offer.Title = "Texas Hold'em"; // entry/reducedTitle

            // Purchase the desired Durable
            purchaseRequest = new PurchaseClientRequest(user.Email, user.Password);

            purchaseRequest.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            purchaseRequest.RequestContent.StoreId = ((uint)MarketplaceStore.Xbox).ToString();

            purchaseResponse = purchaseRequest.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, purchaseResponse.StatusCode, "Status code should return OK");
            Assert.AreEqual(offer.OfferId, purchaseResponse.BodyWrapper.OfferId, "The OfferId should be the same one that I purchased.");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\PDLC.Test\PDLC.Tests.Purchase\PurchaseTests_VerifyResponses.cs ===
﻿using System;
using System.Net;
using System.Diagnostics;
using System.Collections.ObjectModel;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using LiveN.Test;
using LiveN.Test.Content;
using LiveN.Test.Users;

namespace PDLC.Tests
{
    /// <summary>
    /// VerifyResponses contains test to verify that the response match the expected.
    /// </summary>
    public partial class PurchaseTests
    {
        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure caching is set to none by default")]
        public void PurchaseTests_VerifyReponses_Header_CacheControl()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            Assert.AreEqual("no-cache", response.Headers.CacheControl, "Cache should be set to not cache so the clients don't run into any cachin issues.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure the PurchasingPartnerId, actually a Xuid, is set correctly.")]
        public void PurchaseTests_VerifyReponses_PurchasingPartnerId()
        {
            // OLD BUGs: 12021
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);

            request = new PurchaseClientRequest(user.Email, user.Password);

            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);

            response = request.MakeARequest();
            
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            Assert.AreEqual(response.BodyWrapper.PurchasingPartnerId, user.Xuid, "PurchasingPartnerId should match the user's Xuid.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Purchasing a durable should result with a receipt without an AssetBalance. It should be nilled out.")]
        public void PurchaseTests_VerifyReponses_AssetBalance_NilForDurable()
        {
            //OLD BUGs: 11674
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);

            request = new PurchaseClientRequest(user.Email, user.Password);

            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            Assert.IsTrue(response.BodyWrapper.isNullAssetBalance, "As the item that was purchased is a durable, AssetBalance should have been nilled out.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure purchasing a consumable is pull the correct number of Assets by purchasing twice.")]
        public void PurchaseTests_VerifyReponses_AssetQuantity_PurchaseTwice()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002001().GetOfferContext(Locales.en_US);

            request = new PurchaseClientRequest(user.Email, user.Password);

            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            Assert.AreEqual(request.RequestContent.TransactionId, response.BodyWrapper.TransactionId.ToString(), "TRansactionId should be the same as what you passed in");
            Assert.AreEqual(offer.AssetQuantity, response.BodyWrapper.AssetBalance.Quantity, "Asset Quantity should be the same.");

            // Now purchase this Asset again using a different transactionId
            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            Assert.AreEqual(request.RequestContent.TransactionId, response.BodyWrapper.TransactionId.ToString(), "TRansactionId should be the same as what you passed in");
            Assert.AreEqual(offer.AssetQuantity * 2, response.BodyWrapper.AssetBalance.Quantity, "Asset Quantity should be twice the offer number. As it was purchased twice.");        
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Purchases twice for the same Offer but different TransactionId")]
        public void PurchaseTests_VerifyReponses_TransactionId_MultiDurablePurchaseDifferentID()
        {
            // OLD BUGs: 12245
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            Assert.AreEqual(request.RequestContent.TransactionId, response.BodyWrapper.TransactionId.ToString(), "Returned TransactionId should be the same as the one that was sent");

            // Now purchase again using the exact same Offer but different Transaction ID
            request.RequestContent.TransactionId = Guid.NewGuid().ToString();
            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Invalid status code");
            Assert.AreEqual(ServiceErrorBucket.OfferNotPurchasable.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(XOnline_HResults.XOFF_E_ALREADY_OWN_MAX, response.ServiceErrorMessageWrapper.ErrorCode, "Backend Error Code has changed");
            Assert.AreEqual("Offer already purchased or reached maximum allowed.", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Try purchasing with not enough points. Then get points and purchase again with same TransactionId. Should still return that you don't have enough points.")]
        public void PurchaseTests_VerifyReponses_TransactionId_NotEnoughPointsGetPointsPurchaseAgain()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold);
            OfferContext offer = MobileGameContentOffers61.GetContentOffer_Stores_NotMobile_61000602().GetOfferContext(Locales.en_US);

            request = new PurchaseClientRequest(user.Email, user.Password);

            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Invalid status code");
            Assert.AreEqual(ServiceErrorBucket.NotEnoughPoints.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(XOnline_HResults.XONLINE_E_DMP_E_INSUFFICIENT_BALANCE, response.ServiceErrorMessageWrapper.ErrorCode, "Backend ErrorCode has changed");
            Assert.AreEqual("Insufficient Microsoft Points balance for the purchase.", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");

            // Add Points to this user
            user.AddPoints();

            // Purchase again with the exact same transaction Id
            response = request.MakeARequest();

            // Should still get back teh exact same response as the fist time. This is by design as the Platform team (XBLM) saves and returns the exact same error message based off the passed in TransactionId. Must create a new transaction in order to purchase.
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Invalid status code");
            Assert.AreEqual(ServiceErrorBucket.NotEnoughPoints.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(XOnline_HResults.XONLINE_E_DMP_E_INSUFFICIENT_BALANCE, response.ServiceErrorMessageWrapper.ErrorCode, "Backend ErrorCode has changed");
            Assert.AreEqual("Insufficient Microsoft Points balance for the purchase.", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure purchasing a consumable is pull the correct number of Assets.")]
        public void PurchaseTests_VerifyReponses_AssetId()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002001().GetOfferContext(Locales.en_US);

            request = new PurchaseClientRequest(user.Email, user.Password);

            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            Assert.AreEqual(offer.AssetId, response.BodyWrapper.AssetBalance.AssetId, "Asset Ids should be the same.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Purchase an Offer with Multiple Media Instance URL within the result")]
        public void PurchaseTests_VerifyReponses_MediaInstanceURLs_SinglePackMultiFiles()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetContentOffer_Package_SinglePkg_MultFile_61000202().GetOfferContext(Locales.en_US);

            request = new PurchaseClientRequest(user.Email, user.Password);

            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            Assert.AreEqual(1, response.BodyWrapper.MediaInstanceURLs.Count, "There is only one pack. So only one file should be returned.");
            Assert.AreEqual(offer.MediaInstanceURLs[0], response.BodyWrapper.MediaInstanceURLs[0], "Media url should match the first url within the pack.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensures that the OfferId is set correctly")]
        public void PurchaseTests_VerifyReponses_OfferId()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);

            request = new PurchaseClientRequest(user.Email, user.Password);

            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            Assert.AreEqual(offer.OfferId, response.BodyWrapper.OfferId, "OfferId does not match");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensures that the PurchaseDate is set correctly")]
        public void PurchaseTests_VerifyReponses_PurchaseDate()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);

            request = new PurchaseClientRequest(user.Email, user.Password);

            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            Assert.AreEqual(DateTime.UtcNow.ToString("yyyy"), response.BodyWrapper.PurchaseDate.ToString("yyyy"), "PurchaseDate YEAR is not on the correct day of year (Today). Purchase date UTC: " + response.BodyWrapper.PurchaseDate.ToString() + " Current Time UTC: " + DateTime.UtcNow.ToString());
            Assert.AreEqual(DateTime.UtcNow.ToString("MM"), response.BodyWrapper.PurchaseDate.ToString("MM"), "PurchaseDate MONTH is not on the correct day of year (Today). Purchase date UTC: " + response.BodyWrapper.PurchaseDate.ToString() + " Current Time UTC: " + DateTime.UtcNow.ToString());
            Assert.AreEqual(DateTime.UtcNow.ToString("dd"), response.BodyWrapper.PurchaseDate.ToString("dd"), "PurchaseDate DAY is not on the correct day of year (Today). Purchase date UTC: " + response.BodyWrapper.PurchaseDate.ToString() + " Current Time UTC: " + DateTime.UtcNow.ToString());
            Assert.IsTrue(DateTime.UtcNow.AddMinutes(-5) < response.BodyWrapper.PurchaseDate, "Purchase date time happened over 5 minutes again. This is to far off. Purchase date UTC: " + response.BodyWrapper.PurchaseDate.ToString() + " Current Time UTC: " + DateTime.UtcNow.AddMinutes(-5).ToString());
            Assert.IsTrue(DateTime.UtcNow.AddMinutes(1) > response.BodyWrapper.PurchaseDate, "Purchase date time happened is in the future. Purchase date UTC: " + response.BodyWrapper.PurchaseDate.ToString());
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensures that the Offer's Title is set correctly")]
        public void PurchaseTests_VerifyReponses_OfferTitle()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);

            request = new PurchaseClientRequest(user.Email, user.Password);

            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            Assert.AreEqual(offer.Title, response.BodyWrapper.Title, "Offer Title does not match");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensures that the AssetBalance AssetId is set correctly")]
        public void PurchaseTests_VerifyReponses_AssetBalance_AssetId()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002001().GetOfferContext(Locales.en_US);

            request = new PurchaseClientRequest(user.Email, user.Password);

            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            Assert.IsFalse(response.BodyWrapper.isNullAssetBalance, "AssetBalance should not be null.");
            Assert.AreEqual(offer.AssetId, response.BodyWrapper.AssetBalance.AssetId, "AssetId does not match.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensures that the AssetBalance Quantity is set correctly")]
        public void PurchaseTests_VerifyReponses_AssetBalance_Quantity()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002001().GetOfferContext(Locales.en_US);

            request = new PurchaseClientRequest(user.Email, user.Password);

            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            Assert.IsFalse(response.BodyWrapper.isNullAssetBalance, "AssetBalance should not be null.");
            Assert.AreEqual(offer.AssetQuantity, response.BodyWrapper.AssetBalance.Quantity, "AssetId does not match.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Keep purchasing Assets until you reach the Maximum amount.")]
        public void PurchaseTests_VerifyReponses_AssetBalance_ReachedMaxAssetAmount()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002001().GetOfferContext(Locales.en_US);

            request = new PurchaseClientRequest(user.Email, user.Password);

            for (int i = 0; i < 100; i++)
            {
                request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);

                response = request.MakeARequest();

                if (HttpStatusCode.OK != response.StatusCode)
                {
                    Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "Invalid status code");
                    Assert.AreEqual(ServiceErrorBucket.TryAgainLater.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
                    Assert.AreEqual(XOnline_HResults.XONLINE_E_DATABASE_EXECUTE_ERROR, response.ServiceErrorMessageWrapper.ErrorCode, "Backend ErrorCode has changed");

                    // Test has been Successful
                    return;
                }
            }

            Assert.Fail("Was not able to purchase to many Asset to cause the count to overflow.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Try purchasing with not enough points.")]
        public void PurchaseTests_VerifyReponses_NotEnoughPoints()
        {
            // OLD BUGs: 11572
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold);
            OfferContext offer = MobileGameContentOffers61.GetContentOffer_Stores_NotMobile_61000602().GetOfferContext(Locales.en_US);

            request = new PurchaseClientRequest(user.Email, user.Password);

            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Invalid status code");
            Assert.AreEqual(ServiceErrorBucket.NotEnoughPoints.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(XOnline_HResults.XONLINE_E_DMP_E_INSUFFICIENT_BALANCE, response.ServiceErrorMessageWrapper.ErrorCode, "Backend ErrorCode has changed");
            Assert.AreEqual("Insufficient Microsoft Points balance for the purchase.", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Verify if a Token has been marked as Deleted, that we trap that error within the unknown but return the XBL's error code with the return.")]
        public void PurchaseTests_VerifyReponses_BillingToken_DeletedToken()
        {
            // OLD BUGs: 12264
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            Collection<EventLogEntry> events;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold);
            OfferContext offer = MobileGameContentOffers61.GetContentOffer_Visibility_Deleted_61000505().GetOfferContext(Locales.en_US);

            request = new PurchaseClientRequest(user.Email, user.Password);

            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Token);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "Invalid status code");
            Assert.AreEqual(ServiceErrorBucket.Unknown.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(XOnline_HResults.XONLINE_E_OFFERING_VISIBLITY_STATUS_NOT_ALLOWED, response.ServiceErrorMessageWrapper.ErrorCode, "Backend ErrorCode has changed");

            // Now ensure an event is also logged accordingly.
            events = myEvents.GetAllEvents();
            if (events.Count == 0)
            {
                // TODO Need to implement getting events off another box
                // This is probable running on a different box. Don't worry about the event in this case.
                return;
            }

            Assert.AreEqual(1, events.Count, "There should only be one event logged becuase of this.");
            Assert.AreEqual(1100, events[0].InstanceId, "EventID changed.");
            Assert.AreEqual(EventLogEntryType.Error, events[0].EntryType, "EntryType changed.");
            Assert.IsTrue(events[0].Message.Contains("Pdlc Unknown Error\r\nLiveCache Purchase call failed: hr=0x80153024, for offer=61000505-0000-4000-8000-0000584107f6, mediatype=59, store=5"), "Error Message changed.");
        }
        
        [TestMethod]
        [Owner("rsnyder")]
        [Description("Verify MobilePDLC purchase")]
        public void PurchaseTests_VerifyReponses_MediaType_MobilePDLC()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);

            request = new PurchaseClientRequest(user.Email, user.Password);

            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            Assert.IsTrue(response.BodyWrapper.isNullAssetBalance, "As the item that was purchased is a durable, AssetBalance should have been nilled out.");

            ValidatePurchaseReceiptAgainstOffer(offer, response);
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Verify MobileConsumable purchase")]
        public void PurchaseTests_VerifyReponses_MediaType_MobileConsumable()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002001().GetOfferContext(Locales.en_US);

            request = new PurchaseClientRequest(user.Email, user.Password);

            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            Assert.IsFalse(response.BodyWrapper.isNullAssetBalance, "Offer was a Consumable. Thus is should have an AssetBalance.");
            Assert.AreEqual(offer.AssetId, response.BodyWrapper.AssetBalance.AssetId, "AssetIds should be the same.");
            Assert.AreEqual(offer.AssetQuantity, response.BodyWrapper.AssetBalance.Quantity, "Asset Quantity should be the same.");

            ValidatePurchaseReceiptAgainstOffer(offer, response);
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Verify AvatarItems purchase")]
        public void PurchaseTests_VerifyReponses_MediaType_AvatarItems()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            OfferContext offer = PDLCTestCommon.Offer_AvatarItem();
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            
            request = new PurchaseClientRequest(user.Email, user.Password);

            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);

            request.RequestContent.StoreId = ((uint)MarketplaceStore.Xbox).ToString();

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            Assert.AreEqual(offer.Title, response.BodyWrapper.Title, "Title is invalid for offer: " + offer.OfferId);
            Assert.AreEqual(offer.OfferId, response.BodyWrapper.OfferId, "OfferIds should be the same.");
            Assert.IsNotNull(response.BodyWrapper.MediaInstanceURLs, "MediaInstanceURLs is required.");
            Assert.AreEqual(1, response.BodyWrapper.MediaInstanceURLs.Count, "The expected number of MediaInstanceURLs is not correct. Hard coded as we are not incharge of propping this content.");
            Assert.IsTrue(response.BodyWrapper.MediaInstanceURLs[0].StartsWith("http://download.xbox.com/content/"), "This should be the start of all avatar items.");
            Assert.IsTrue(response.BodyWrapper.isNullAssetBalance, "As the item that was purchased is a durable, AssetBalance should have been nilled out.");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\PDLC.Test\PDLC.Tests.Purchase\PurchaseTests.cs ===
﻿using System;
using System.Diagnostics;
using System.Net;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using LiveNew.Test;

using LiveN.Test;
using LiveN.Test.Common;
using LiveN.Test.Content;
using LiveN.Test.Users;

namespace PDLC.Tests
{
    /// <summary>
    /// Based class for Purchase Tests. Contains BVTs and general setup for all other areas.
    /// </summary>
    [TestClass]
    public partial class PurchaseTests
    {
        /// <summary>
        /// User email for default cases
        /// </summary>
        private static string StaticUserEmail;

        /// <summary>
        /// User password for default cases
        /// </summary>
        private static string StaticUserPassword;

        /// <summary>
        /// Reference to the event viewer
        /// </summary>
        private static EventViewer myEvents;

        [ClassInitialize]
        public static void TestClassInitialize(TestContext context)
        {
            myEvents = new EventViewer(".", "Application", "pdlc_service");

            StaticUserEmail = CurrentEnvironmentSettings.UserSettings[0].UserEmail;
            StaticUserPassword = CurrentEnvironmentSettings.UserSettings[0].Password;
        }

        [TestInitialize]
        public void myTestInitialize()
        {
            myEvents.ResetEventStartPosition();
        }

        [TestCleanup]
        public void myTestCleanup()
        {
            Trace.WriteLine("\r\nALL EVENTS (Will only work on OneBox installations): \r\n" + myEvents.GenerateFormattedStringForAllEvents());
        }

        [TestMethod]
        public void CreateUser()
        {
            UserAccount user = new UserAccount(XblLiveUserTier.Silver);
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure purchasing a durable with Points is working.")]
        public void PurchaseTests_BVT_DurablePointsPurchase()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);
            
            request = new PurchaseClientRequest(user.Email, user.Password);

            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
                
            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            ValidatePurchaseReceiptAgainstOffer(offer, response);
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure purchasing a durable with a Token is working.")]
        public void PurchaseTests_BVT_DurableTokenPurchase()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);

            request = new PurchaseClientRequest(user.Email, user.Password);

            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Token);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            ValidatePurchaseReceiptAgainstOffer(offer, response);
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure purchasing a consumable with Points is working.")]
        public void PurchaseTests_BVT_ComsumablePointsPurchase()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002001().GetOfferContext(Locales.en_US);
            
            request = new PurchaseClientRequest(user.Email, user.Password);

            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            ValidatePurchaseReceiptAgainstOffer(offer, response);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\PDLC.Test\PDLC.Tests.Purchase\PurchaseTests_InvalidRequests.cs ===
﻿using System;
using System.Net;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using LiveNew.Test;

using LiveN.Test;
using LiveN.Test.Content;
using LiveN.Test.Users;

namespace PDLC.Tests
{
    /// <summary>
    /// InvalidRequests contains tests to ensure an invalid request is handled appropriately
    /// </summary>
    public partial class PurchaseTests
    {
        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending in a GET when a POST is expected")]
        public void PurchaseTests_InvalidRequests_GET()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();

            request.Method = HttpMethods.GET;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.MethodNotAllowed, response.StatusCode, "StatusCode in not correct");
            Assert.IsFalse(response.IsServiceErrorMessage, "In this cases, calls does not make it to our code. Thus no ServiceErrorMessage can be returned.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("user tries to purchase bug does not have enough points to do so.")]
        public void PurchaseTests_InvalidRequests_Points_UserDoesNotHaveEnoughToPuchase()
        {
            //OLD BUGs: 11555, 11602
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold);
            ContentOffer offer = MobileGameContentOffers61.GetContentOffer_enUS(1);

            request = new PurchaseClientRequest(user.Email, user.Password);

            request.RequestContent.CreatePurchaseRequest(offer.GetOfferContext(Locales.en_US), PurchasePaymentType.Points);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "StatusCode in not correct");
            Assert.AreEqual(ServiceErrorBucket.NotEnoughPoints.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(XOnline_HResults.XONLINE_E_DMP_E_INSUFFICIENT_BALANCE, response.ServiceErrorMessageWrapper.ErrorCode, "Response LiveN error code invalid.");
            Assert.AreEqual("Insufficient Microsoft Points balance for the purchase.", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }

        [TestMethod]     
        [Owner("rsnyder")]
        [Description("User tries to purchase with enough points, but the expected price is Lower then the actual price of the offer.")]
        public void PurchaseTests_InvalidRequests_Points_PassedInPointsAreToLow()
        {
            //OLD BUGs: 11555, 11602
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();

            // Set the price 1 point less then it costs. 
            request.RequestContent.PointsPrice = (int.Parse(request.RequestContent.PointsPrice) - 1).ToString();

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "StatusCode in not correct");
            Assert.AreEqual(ServiceErrorBucket.TryAgainRefresh.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(XOnline_HResults.XONLINE_E_OFFERING_PRICE_CHANGED, response.ServiceErrorMessageWrapper.ErrorCode, "Response LiveN error code invalid.");
            Assert.AreEqual("Input price does not match the offer price.", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("User tries to purchase with enough points, but the expected price is Higher then the actual price of the offer.")]
        public void PurchaseTests_InvalidRequests_Points_PassedInPointsAreToHigh()
        {
            //OLD BUGs: 11555, 11602
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();

            // Set the price 1 point more then it costs. 
            request.RequestContent.PointsPrice = (int.Parse(request.RequestContent.PointsPrice) + 1).ToString();

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "StatusCode in not correct");
            Assert.AreEqual(ServiceErrorBucket.TryAgainRefresh.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(XOnline_HResults.XONLINE_E_OFFERING_PRICE_CHANGED, response.ServiceErrorMessageWrapper.ErrorCode, "Response LiveN error code invalid.");
            Assert.AreEqual("Input price does not match the offer price.", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("User tries to purchase with incorrect TokenPoints. Expected price is Lower then the actual price of the offer.")]
        public void PurchaseTests_InvalidRequests_Points_PassedInTokenPointsAreToLow()
        {
            UserAccount user;
            ContentOffer offer;
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            user = new UserAccount(XblLiveUserTier.Gold, true);
            request = new PurchaseClientRequest(user.Email, user.Password);

            offer = MobileGameContentOffers61.GetContentOffer_enUS(1);

            request.RequestContent.CreatePurchaseRequest(offer.GetOfferContext(Locales.en_US), PurchasePaymentType.Token);

            // Set the price 1 point less then it costs. 
            request.RequestContent.PointsPrice = (int.Parse(request.RequestContent.PointsPrice) - 1).ToString();

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "StatusCode in not correct");
            Assert.AreEqual(ServiceErrorBucket.TryAgainRefresh.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Response LiveN error code invalid.");
            Assert.AreEqual(XOnline_HResults.XONLINE_E_OFFERING_PRICE_CHANGED, response.ServiceErrorMessageWrapper.ErrorCode, "Response LiveN error code invalid.");
            Assert.AreEqual("Input price does not match the offer price.", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("User tries to purchase with incorrect TokenPoints. Expected price is High then the actual price of the offer.")]
        public void PurchaseTests_InvalidRequests_Points_PassedInTokenPointsAreToHigh()
        {
            UserAccount user;
            ContentOffer offer;
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            user = new UserAccount(XblLiveUserTier.Gold, true);
            request = new PurchaseClientRequest(user.Email, user.Password);

            offer = MobileGameContentOffers61.GetContentOffer_enUS(1);

            request.RequestContent.CreatePurchaseRequest(offer.GetOfferContext(Locales.en_US), PurchasePaymentType.Token);

            // Set the price 1 point higher then it costs. 
            request.RequestContent.PointsPrice = (int.Parse(request.RequestContent.PointsPrice) + 1).ToString();

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "StatusCode in not correct");
            Assert.AreEqual(ServiceErrorBucket.TryAgainRefresh.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Response LiveN error code invalid.");
            Assert.AreEqual(XOnline_HResults.XONLINE_E_OFFERING_PRICE_CHANGED, response.ServiceErrorMessageWrapper.ErrorCode, "Response LiveN error code invalid.");
            Assert.AreEqual("Input price does not match the offer price.", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Purchasing an zeroed out OfferId")]
        public void PurchaseTests_InvalidRequests_OfferId_ZeroedOutOfferId()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();

            request.RequestContent.OfferId = Guid.Empty.ToString();

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "StatusCode in not correct");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Response LiveN error code invalid.");
            Assert.AreEqual("The OfferId is missing or empty.", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Purchasing an offer that does not exist")]
        public void PurchaseTests_InvalidRequests_OfferId_NonExistingOffer()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();

            request.RequestContent.OfferId = "99999999-0000-0000-0000-000000000000";

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "StatusCode in not correct");
            Assert.AreEqual(ServiceErrorBucket.OfferNotPurchasable.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(XOnline_HResults.XOFF_E_INVALID_OFFER_ID, response.ServiceErrorMessageWrapper.ErrorCode, "Response LiveN error code invalid.");
            Assert.AreEqual("Invalid offerId:99999999-0000-0000-0000-000000000000, or User cannot purchase offer due to geofencing.", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Invalid string for offer")]
        public void PurchaseTests_InvalidRequests_OfferId_Invalid()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();

            request.RequestContent.OfferId = "Invalid String";

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "StatusCode in not correct");
            Assert.AreEqual(false, response.IsServiceErrorMessage, "Response should not contain a ServiceErrorMessage");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Empty string for offer")]
        public void PurchaseTests_InvalidRequests_OfferId_EmptyString()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();

            request.RequestContent.OfferId = "";

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "StatusCode in not correct");
            Assert.AreEqual(false, response.IsServiceErrorMessage, "Response should not contain a ServiceErrorMessage");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Not passing OfferId at all")]
        public void PurchaseTests_InvalidRequests_OfferId_NotPassed()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();

            request.RequestContent.OfferId = null;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "StatusCode in not correct");
            Assert.AreEqual(false, response.IsServiceErrorMessage, "Response should not contain a ServiceErrorMessage");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending up an invalid partner token")]
        public void PurchaseTests_InvalidRequests_AuthToken_Invalid()
        {
            // OLD BUGs: 11186
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();

            request.SetAuthenticationToken = false;
            request.Headers.PartnerAuthorization = "invalid partner token";

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode, "StatusCode in not correct");
            Assert.AreEqual(false, response.IsServiceErrorMessage, "Response should not contain a ServiceErrorMessage");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending up request without partner token")]
        public void PurchaseTests_InvalidRequests_AuthToken_MissingHeader()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();

            request.SetAuthenticationToken = false;
            request.Headers.PartnerAuthorization = null;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode, "StatusCode in not correct");
            Assert.AreEqual(false, response.IsServiceErrorMessage, "Response should not contain a ServiceErrorMessage");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending up request with empty partner token")]
        public void PurchaseTests_InvalidRequests_AuthToken_EmptyHeader()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            
            request = GenerateDefaultPurchaseRequest();

            request.SetAuthenticationToken = false;
            request.Headers.PartnerAuthorization = string.Empty;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode, "StatusCode in not correct");
            Assert.AreEqual(false, response.IsServiceErrorMessage, "Response should not contain a ServiceErrorMessage");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending purchase request using a valid Auduince uri but not for purchase. Purchase requires short lived purchase uri.")]
        public void PurchaseTests_InvalidRequests_AuthToken_WrongAudienceUri()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();

            // Get a partner token for the wrong audience Uri. As this is a purchase, uri should be the short lived purchase uri only
            request.SetAuthenticationToken = false;
            request.Headers.PartnerAuthorization = PDLCServicesCommon.AUTH_PREFIX + request.Auth.GetPartnerToken(request.UserEmail, request.Password, request.Title, "http://xboxlive.com/avatar");

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode, "Invalid status code");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending auth using the long lived Audience uri when the short lived purchase is required")]
        public void PurchaseTests_InvalidRequests_AuthToken_LongLivePDLCAudienceUri()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();

            // Get a partner token for the wrong audience Uri. As this is a purchase, uri should be the short lived purchase uri only
            request.SetAuthenticationToken = false; 
            request.Headers.PartnerAuthorization = PDLCServicesCommon.AUTH_PREFIX + request.Auth.GetPartnerToken(request.UserEmail, request.Password, request.Title, PDLCServicesCommon.AUDIENCE_URI);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Invalid status code");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Backend Error Code has changed");
            Assert.AreEqual("Authentication Token is not for purchase: AudienceUri=http://xboxlive.com/pdlc", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending up request with valid Locale but it does not match the Offer.")]
        public void PurchaseTests_InvalidRequests_Locale_DoesNotMatchOfferLocale()
        {
            UserAccount user;
            OfferContext offer;
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            ContentOffer contentOffer = MobileGameContentOffers61.GetContentOffer_Locale_French_61000003();

            user = new UserAccount(XblLiveUserTier.Gold, true);
            request = new PurchaseClientRequest(user.Email, user.Password);

            // Extract the French Offer Context
            offer = contentOffer.GetOfferContext(Locales.fr_FR);
            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "StatusCode in not correct");
            Assert.AreEqual(ServiceErrorBucket.OfferNotPurchasable.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(XOnline_HResults.XOFF_E_INVALID_OFFER_ID, response.ServiceErrorMessageWrapper.ErrorCode, "Response LiveN error code invalid.");
            Assert.AreEqual("Invalid offerId:61000003-0000-4000-8000-0000584107f6, or User cannot purchase offer due to geofencing.", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending up request with invalid PlatformType within the header")]
        public void PurchaseTests_InvalidRequests_PaltformType_Invalid()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();

            request.Headers.PlatformType = "Invalid_PlatformType";

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "StatusCode in not correct");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Response LiveN error code invalid.");
            Assert.AreEqual("X-Platform-Type header is limited to  Mobile", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
         }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending up request with invalid PlatformType within the header")]
        public void PurchaseTests_InvalidRequests_PaltformType_EmptyHeader()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();

            request.Headers.PlatformType = string.Empty;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "StatusCode in not correct");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Response LiveN error code invalid.");
            Assert.AreEqual("X-Platform-Type header is missing or empty", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending up request with invalid PlatformType within the header")]
        public void PurchaseTests_InvalidRequests_PaltformType_MissingHeader()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();

            request.Headers.PlatformType = null;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "StatusCode in not correct");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Response LiveN error code invalid.");
            Assert.AreEqual("X-Platform-Type header is missing or empty", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Purchase one item then try purchasing a different one with the first TransactionId.")]
        public void PurchaseTests_InvalidRequests_TransactionId_ReusingID()
        {
            // OLD BUGs: 12322, 176608(on Marketplace's side)
            PurchaseClientResponse response;
            PurchaseClientRequest requestOne;
            PurchaseClientRequest requestTwo;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offerOne = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);
            OfferContext offerTwo = MobileGameContentOffers61.GetContentOffer_enUS(2).GetOfferContext(Locales.en_US);

            requestOne = new PurchaseClientRequest(user.Email, user.Password);

            requestOne.RequestContent.CreatePurchaseRequest(offerOne, PurchasePaymentType.Points);
            response = requestOne.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            Assert.AreEqual(requestOne.RequestContent.TransactionId, response.BodyWrapper.TransactionId.ToString(), "Returned TransactionId should be the same as the one that was sent");
            ValidatePurchaseReceiptAgainstOffer(offerOne, response);

            // Now purchase your second Item using the first transaction
            requestTwo = new PurchaseClientRequest(user.Email, user.Password);

            requestTwo.RequestContent.CreatePurchaseRequest(offerTwo, PurchasePaymentType.Points);

            // Now set the Transaction ID equal to the first transaction
            requestTwo.RequestContent.TransactionId = requestOne.RequestContent.TransactionId;

            response = requestTwo.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Invalid status code");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(XOnline_HResults.XONLINE_E_TRACKED_API_DUPLICATE_TRACKING_GUID, response.ServiceErrorMessageWrapper.ErrorCode, "Response LiveN error code invalid.");
            Assert.AreEqual("Transaction id has already been used by a different request. Please try again with a new GUID.", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending a zeroed out guid for TransactionId")]
        public void PurchaseTests_InvalidRequests_TransactionId_GuidEmpty()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();

            request.RequestContent.TransactionId = Guid.Empty.ToString();

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Invalid status code");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Backend Error Code has changed");
            Assert.AreEqual("The TransactionId is missing or empty.", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
         }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending Empty string within TransactionId")]
        public void PurchaseTests_InvalidRequests_TransactionId_Empty()
        {
            // OLD BUGs: 11518
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();

            request.RequestContent.TransactionId = string.Empty;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "Invalid status code");
            Assert.AreEqual(false, response.IsServiceErrorMessage, "Response should not contain a ServiceErrorMessage");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending no TransactionId")]
        public void PurchaseTests_InvalidRequests_TransactionId_NotSent()
        {
            // OLD BUGs: 11518
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();

            request.RequestContent.TransactionId = null;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "Invalid status code");
            Assert.AreEqual(false, response.IsServiceErrorMessage, "Response should not contain a ServiceErrorMessage");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending invalid TransactionId")]
        public void PurchaseTests_InvalidRequests_TransactionId_Invalid()
        {
            // OLD BUGs: 11518
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();

            request.RequestContent.TransactionId = "Invalid Guid";

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "Invalid status code");
            Assert.AreEqual(false, response.IsServiceErrorMessage, "Response should not contain a ServiceErrorMessage");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Purchase a DurableOne with Points and then try purchasing DurableTwo with a Token and the same TransactionId. Points and Token use different purchase calls.")]
        public void PurchaseTests_InvalidRequests_TransactionId_PurchaseDurableWithPointsThenDifferentDurable()
        {
            // OLD BUGs: 12322, 176608(on Marketplace's side)
            PurchaseClientResponse response;
            PurchaseClientRequest requestOne;
            PurchaseClientRequest requestTwo;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offerOne = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);
            OfferContext offerTwo = MobileGameContentOffers61.GetContentOffer_enUS(2).GetOfferContext(Locales.en_US);

            requestOne = new PurchaseClientRequest(user.Email, user.Password);

            requestOne.RequestContent.CreatePurchaseRequest(offerOne, PurchasePaymentType.Points);
            response = requestOne.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            Assert.AreEqual(requestOne.RequestContent.TransactionId, response.BodyWrapper.TransactionId.ToString(), "Returned TransactionId should be the same as the one that was sent");
            ValidatePurchaseReceiptAgainstOffer(offerOne, response);

            // Now purchase your second Item using the first transaction
            requestTwo = new PurchaseClientRequest(user.Email, user.Password);

            requestTwo.RequestContent.CreatePurchaseRequest(offerTwo, PurchasePaymentType.Token);

            // Now set the Transaction ID equal to the first transaction
            requestTwo.RequestContent.TransactionId = requestOne.RequestContent.TransactionId;

            response = requestTwo.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Invalid status code");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(XOnline_HResults.XONLINE_E_TRACKED_API_DUPLICATE_TRACKING_GUID, response.ServiceErrorMessageWrapper.ErrorCode, "Response LiveN error code invalid.");
            Assert.AreEqual("Transaction id has already been used by a different request. Please try again with a new GUID.", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending unsupported MediaTypeId")]
        public void PurchaseTests_InvalidRequests_MediaTypeId_Unsupported()
        {
            // OLD BUGs: 11382, 12112, 12095
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            string[] unsupportedMediaTypeIds = { ((int)MediaType.GameContent).ToString(), ((int)MediaType.GameConsumable).ToString(), ((int)MediaType.MobileGame).ToString(), ((int)MediaType.PointsBundle).ToString(), ((int)MediaType.Unknown).ToString() };
 
            request = GenerateDefaultPurchaseRequest();

            foreach (string unsupportedMediaTypeId in unsupportedMediaTypeIds)
            {
                request.RequestContent.MediaTypeId = unsupportedMediaTypeId;

                response = request.MakeARequest();

                Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Invalid status code. Tried MediaType: " + unsupportedMediaTypeId);
                Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
                Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Backend Error Code has changed. Tried MediaType: " + unsupportedMediaTypeId);
                Assert.AreEqual("The MediaTypeId is not supported.", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed. Tried MediaType: " + unsupportedMediaTypeId);
            }
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending invalid MediaTypeIds with valid purchase request")]
        public void PurchaseTests_InvalidRequests_MediaTypeId_InvalidIds()
        {
            // OLD BUGs: 11382 
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            string[] invalidMediaTypeIds = { rnd.Next(int.MinValue, -1).ToString(), rnd.Next(100, int.MaxValue).ToString() };

            request = GenerateDefaultPurchaseRequest();

            foreach (string invalidMediaTypeId in invalidMediaTypeIds)
            {
                request.RequestContent.MediaTypeId = invalidMediaTypeId;

                response = request.MakeARequest();

                Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Invalid status code. Tried MediaType: " + invalidMediaTypeId);
                Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
                Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Backend Error Code has changed. Tried MediaType: " + invalidMediaTypeId);
                Assert.AreEqual("The MediaTypeId is invalid.", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed. Tried MediaType: " + invalidMediaTypeId);
            }
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending empty MediaTypeId")]
        public void PurchaseTests_InvalidRequests_MediaTypeId_Empty()
        {
            // OLD BUGs: 11518
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();

            request.RequestContent.MediaTypeId = string.Empty;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "Invalid status code");
            Assert.AreEqual(false, response.IsServiceErrorMessage, "Response should not contain a ServiceErrorMessage");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Not sending MediaTypeId")]
        public void PurchaseTests_InvalidRequests_MediaTypeId_NotSent()
        {
            // OLD BUGs: 11518
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();

            request.RequestContent.MediaTypeId = "Invalid number";

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "Invalid status code");
            Assert.AreEqual(false, response.IsServiceErrorMessage, "Response should not contain a ServiceErrorMessage");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending invalid MediaTypeId")]
        public void PurchaseTests_InvalidRequests_MediaTypeId_Invalid()
        {
            // OLD BUGs: 11518
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();

            request.RequestContent.MediaTypeId = "Invalid number";

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "Invalid status code");
            Assert.AreEqual(false, response.IsServiceErrorMessage, "Response should not contain a ServiceErrorMessage");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending Negitive number smaller then INT can contain for MediaTypeId")]
        public void PurchaseTests_InvalidRequests_MediaTypeId_ToSmallNegitive()
        {
            // OLD BUGs: 11518
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();

            request.RequestContent.MediaTypeId = "-3000000000";

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "Invalid status code");
            Assert.AreEqual(false, response.IsServiceErrorMessage, "Response should not contain a ServiceErrorMessage");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending Negitive number larger then INT can contain for MediaTypeId")]
        public void PurchaseTests_InvalidRequests_MediaTypeId_ToLargePositive()
        {
            // OLD BUGs: 11518
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();

            request.RequestContent.MediaTypeId = "3000000000";

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "Invalid status code");
            Assert.AreEqual(false, response.IsServiceErrorMessage, "Response should not contain a ServiceErrorMessage");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending valid store Id but it's not a supported StoreId with LiveN PDLC. Currently we only support StoreId=Mobile==5")]
        public void PurchaseTests_InvalidRequests_StoreId_ValidButNotSupported()
        {
            //OLD BUGs: 11661
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();


            // Ensuring GamesForWindows is not supported
            request.RequestContent.StoreId = ((uint)MarketplaceStore.GamesForWindows).ToString();
            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Invalid status code");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Backend Error Code has changed");
            Assert.AreEqual("The store id is not supported:" + request.RequestContent.StoreId, response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
            

            // Ensuring Zest is not supported
            request.RequestContent.StoreId = ((uint)MarketplaceStore.Zest).ToString();
            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Invalid status code");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Backend Error Code has changed");
            Assert.AreEqual("The store id is not supported:" + request.RequestContent.StoreId, response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
            

            // Ensuring Zune is not supported
            request.RequestContent.StoreId = ((uint)MarketplaceStore.Zune).ToString();
            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Invalid status code");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Backend Error Code has changed");
            Assert.AreEqual("The store id is not supported:" + request.RequestContent.StoreId, response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending empty StoreId")]
        public void PurchaseTests_InvalidRequests_StoreId_Empty()
        {
            // OLD BUGs: 11518
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();

            request.RequestContent.StoreId = string.Empty;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "Invalid status code");
            Assert.AreEqual(false, response.IsServiceErrorMessage, "Response should not contain a ServiceErrorMessage");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Not sending StoreId")]
        public void PurchaseTests_InvalidRequests_StoreId_NotSent()
        {
            // OLD BUGs: 11518
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();

            request.RequestContent.StoreId = null;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "Invalid status code");
            Assert.AreEqual(false, response.IsServiceErrorMessage, "Response should not contain a ServiceErrorMessage");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending invalid StoreId")]
        public void PurchaseTests_InvalidRequests_StoreId_Invalid()
        {
            // OLD BUGs: 11518
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();

            request.RequestContent.StoreId = "Invalid number";

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "Invalid status code");
            Assert.AreEqual(false, response.IsServiceErrorMessage, "Response should not contain a ServiceErrorMessage");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending Negitive number smaller then INT can contain for StoreId")]
        public void PurchaseTests_InvalidRequests_StoreId_ToSmallNegitive()
        {
            // OLD BUGs: 11518
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();

            request.RequestContent.StoreId = "-1";

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "Invalid status code");
            Assert.AreEqual(false, response.IsServiceErrorMessage, "Response should not contain a ServiceErrorMessage");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending Positive number larger then INT can contain for StoreId")]
        public void PurchaseTests_InvalidRequests_StoreId_ToLargePositive()
        {
            // OLD BUGs: 11518
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();

            request.RequestContent.StoreId = "4294967296"; // uint.MaxValue + 1

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "Invalid status code");
            Assert.AreEqual(false, response.IsServiceErrorMessage, "Response should not contain a ServiceErrorMessage");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending a request out of order of expected to ensure specific order is not required")]
        public void PurchaseTests_InvalidRequests_OrderOfRequest()
        {
            //OLD BUGs: 11519
            string content;
            string transactionId;
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();

            // Save off the TransactionId so you can add it back
            transactionId = request.RequestContent.TransactionId;

            // This will remove the transactionId from printing out within the request
            request.RequestContent.TransactionId = null;

            // Move transaction Id to the bottom of the request
            content = request.RequestContent.SerializeToXmlString();
            content = content.Replace("</PurchaseRequest>", "<TransactionId>" + transactionId.ToString() + "</TransactionId>\r\n</PurchaseRequest>");
            request.SetContent(content);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "Invalid status code");
            Assert.AreEqual(false, response.IsServiceErrorMessage, "Response should not contain a ServiceErrorMessage");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Purchase an Offer using points and then with a token for the same item.")]
        public void PurchaseTests_InvalidRequests_PurchaseSameItemWithPointsThenToken()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);

            request = new PurchaseClientRequest(user.Email, user.Password);

            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            ValidatePurchaseReceiptAgainstOffer(offer, response);

            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Token);
            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Invalid status code");
            Assert.AreEqual(ServiceErrorBucket.OfferNotPurchasable.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(XOnline_HResults.XOFF_E_ALREADY_OWN_MAX, response.ServiceErrorMessageWrapper.ErrorCode, "Backend Error Code has changed");
            Assert.AreEqual("Offer already purchased or reached maximum allowed.", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Purchase an Offer using points and then with a token for the same item.")]
        public void PurchaseTests_InvalidRequests_PurchaseSameItemWithATokenThenPoints()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);

            request = new PurchaseClientRequest(user.Email, user.Password);

            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Token);
            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            ValidatePurchaseReceiptAgainstOffer(offer, response);

            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Invalid status code");
            Assert.AreEqual(ServiceErrorBucket.OfferNotPurchasable.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(XOnline_HResults.XOFF_E_ALREADY_OWN_MAX, response.ServiceErrorMessageWrapper.ErrorCode, "Backend Error Code has changed");
            Assert.AreEqual("Offer already purchased or reached maximum allowed.", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Trying to purchase using a token but not passing the Token element.")]
        public void PurchaseTests_InvalidRequests_TokenPurchase_BillingToken_NotPassed()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);

            request = new PurchaseClientRequest(user.Email, user.Password);

            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Token);

            request.RequestContent.BillingToken = null;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Invalid status code");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Backend Error Code has changed");
            Assert.AreEqual("The BillingToken is missing for payment type of Token.", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Trying to purchase using a token but passing an empty Token string.")]
        public void PurchaseTests_InvalidRequests_TokenPurchase_BillingToken_Empty()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);

            request = new PurchaseClientRequest(user.Email, user.Password);

            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Token);

            request.RequestContent.BillingToken = string.Empty;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Invalid status code");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Backend Error Code has changed");
            Assert.AreEqual("The BillingToken is missing for payment type of Token.", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Trying to purchase using a token while passing in an invalid token string.")]
        public void PurchaseTests_InvalidRequests_TokenPurchase_BillingToken_InvalidValue()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);

            request = new PurchaseClientRequest(user.Email, user.Password);

            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Token);

            request.RequestContent.BillingToken = "Invalid Token";

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Invalid status code");
            Assert.AreEqual(ServiceErrorBucket.TokenNotRedeemable.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(XOnline_HResults.XONLINE_E_ACCOUNTS_INVALID_VOUCHER, response.ServiceErrorMessageWrapper.ErrorCode, "Backend Error Code has changed");
            Assert.AreEqual("Invalid token.", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Trying to purchase using a token with an invalid Token.")]
        public void PurchaseTests_InvalidRequests_TokenPurchase_BillingToken_RandomGuid()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);

            request = new PurchaseClientRequest(user.Email, user.Password);

            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Token);

            request.RequestContent.BillingToken = Guid.NewGuid().ToString();

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Invalid status code");
            Assert.AreEqual(ServiceErrorBucket.TokenNotRedeemable.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(XOnline_HResults.XONLINE_E_ACCOUNTS_INVALID_VOUCHER, response.ServiceErrorMessageWrapper.ErrorCode, "Backend Error Code has changed");
            Assert.AreEqual("Invalid token.", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure purchasing with points but the token xml field is still set to an Invalid Token will still work. BillingToken should be ignored as it's optional.")]
        public void PurchaseTests_InvalidRequests_PointsPurchase_BillingToken_PassedInValidWithDurablePurchase()
        {
            // OLD BUGs: 12027
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);

            request = new PurchaseClientRequest(user.Email, user.Password);

            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);

            // Also pass in the Token that would of been used if the flag was set to PurchasePaymentType.Token
            request.RequestContent.BillingToken = offer.BillingToken;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Invalid status code");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Backend Error Code has changed");
            Assert.AreEqual("The BillingToken is present for payment type of Points.", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure purchasing with points but the token xml field is still set to an Invalid Token will still work. BillingToken should be ignored as it's optional.")]
        public void PurchaseTests_InvalidRequests_PointsPurchase_BillingToken_PassedInInvalidWithDurablePurchase()
        {
            // OLD BUGs: 12027
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();

            request.RequestContent.BillingToken = "BlahBlah";

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Invalid status code");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Backend Error Code has changed");
            Assert.AreEqual("The BillingToken is present for payment type of Points.", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure purchasing with points but the token xml field is still set to an Invalid Token will still work. BillingToken should be ignored as it's optional.")]
        public void PurchaseTests_InvalidRequests_PointsPurchase_BillingTokenAndAssetId_PassedInValidWithDurablePurchase()
        {
            // OLD BUGs: 12027
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();

            request.RequestContent.BillingToken = Guid.NewGuid().ToString();
            request.RequestContent.AssetId = "92";

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Invalid status code");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Backend Error Code has changed");
            Assert.AreEqual("The AssetId should not be passed in if MediaTypeId is not MobileConsumable.", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure purchasing with points but the token xml field is still set to an Invalid Token will still work. BillingToken should be ignored as it's optional.")]
        public void PurchaseTests_InvalidRequests_PointsPurchase_AssetId_PassedInValidWithDurablePurchase()
        {
            // OLD BUGs: 12027
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            OfferContext offer = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);

            request = GenerateDefaultPurchaseRequest();

            request.RequestContent.AssetId = "12027"; // Made up the number

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Invalid status code");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Backend Error Code has changed");
            Assert.AreEqual("The AssetId should not be passed in if MediaTypeId is not MobileConsumable.", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure purchasing with points but the token xml field is still passed in still works.")]
        public void PurchaseTests_InvalidRequests_AssetId_PassedInvalidWithDurablePurchase()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();

            request.RequestContent.AssetId = "Something Invalid";

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "Serilizer should have thrown this out and returned InternalServer Error.");
            Assert.AreEqual(false, response.IsServiceErrorMessage, "Response should not contain a ServiceErrorMessage");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure purchasing with points but the BillingToken and AssetId xml field set to Empty String still lets the purchase successed.")]
        public void PurchaseTests_InvalidRequests_PointsPurchase_BillingTokenAndAssetId_PassedInEmptyWithDurablePurchase()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();

            request.RequestContent.BillingToken = string.Empty;
            request.RequestContent.AssetId = string.Empty;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "Serilizer should have thrown this out and returned InternalServer Error.");
            Assert.AreEqual(false, response.IsServiceErrorMessage, "Response should not contain a ServiceErrorMessage");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\PDLC.Test\PDLC.Tests.Purchase\PurchaseTests_ValidRequests.cs ===
﻿using System;
using System.Net;
using System.Diagnostics;
using System.Collections.ObjectModel;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using LiveNew.Test;

using LiveN.Test;
using LiveN.Test.Content;
using LiveN.Test.Users;

namespace PDLC.Tests
{
    /// <summary>
    /// ValidRequests contains all the test cases where the request are valid are suppose to work.
    /// Tests within the valid input range to ensure they are working as expected.
    /// </summary>
    public partial class PurchaseTests
    {   
        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending up request with invalid Locale within the header. Locale should just be ignored.")]
        public void PurchaseTests_ValidRequests_Locale_Invalid()
        {
            // OLD BUGs: 11534
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();

            request.Headers.Add(PDLCServicesCommon.LOCALE, "Invalid_Locale");

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "StatusCode in not correct");
            Assert.AreEqual(DateTime.UtcNow.DayOfYear, response.BodyWrapper.PurchaseDate.DayOfYear, "Ensures response has at least one value set");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending up request with Empty header. Locale should just be ignored.")]
        public void PurchaseTests_ValidRequests_Locale_EmptyHeader()
        {
            // OLD BUGs: 11534
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();

            request.Headers.Add(PDLCServicesCommon.LOCALE, string.Empty);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "StatusCode in not correct");
            Assert.AreEqual(DateTime.UtcNow.DayOfYear, response.BodyWrapper.PurchaseDate.DayOfYear, "Ensures response has at least one value set");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure purchasing using a child account works.")]
        public void PurchaseTests_ValidRequests_ChildAndToken()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.GoldChild, true);
            OfferContext offer = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);

            request = new PurchaseClientRequest(user.Email, user.Password);

            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Token);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            ValidatePurchaseReceiptAgainstOffer(offer, response);
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure purchasing, via a token, using a child account works. Even if the child does not have purchase capabilities.")]
        public void PurchaseTests_ValidRequests_ChildWithoutPurchasePermissionsAndToken()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.GoldChild, false);
            OfferContext offer = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);

            request = new PurchaseClientRequest(user.Email, user.Password);

            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Token);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            ValidatePurchaseReceiptAgainstOffer(offer, response);
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure purchasing using a child account works.")]
        public void PurchaseTests_ValidRequests_ChildAndPoints()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.GoldChild, true);
            OfferContext offer = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);

            request = new PurchaseClientRequest(user.Email, user.Password);

            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            ValidatePurchaseReceiptAgainstOffer(offer, response);
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending valid store Ids")]
        public void PurchaseTests_ValidRequests_StoreId()
        {
            //OLD BUGs: 11661
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            // Verify Mobile Store works
            request = GenerateDefaultPurchaseRequest();

            request.RequestContent.StoreId = ((uint)MarketplaceStore.Mobile).ToString();
            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            Assert.AreEqual(DateTime.UtcNow.DayOfYear, response.BodyWrapper.PurchaseDate.DayOfYear, "Ensures response has at least one value set");


            // Verify Xbox store works
            request = GenerateDefaultPurchaseRequest();

            request.RequestContent.StoreId = ((uint)MarketplaceStore.Xbox).ToString();
            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            Assert.AreEqual(DateTime.UtcNow.DayOfYear, response.BodyWrapper.PurchaseDate.DayOfYear, "Ensures response has at least one value set");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure purchasing with points but the Token xml field set to Empty String still lets the purchase successed.")]
        public void PurchaseTests_ValidRequests_PointsPurchase_BillingToken_PassedInEmptyWithDurablePurchase()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();

            request.RequestContent.BillingToken = string.Empty;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            Assert.AreEqual(DateTime.UtcNow.DayOfYear, response.BodyWrapper.PurchaseDate.DayOfYear, "Ensures response has at least one value set");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Purchase two items. Then purchase the first one again with the same TransactionId. Ensuring you still get back the first purchase.")]
        public void PurchaseTests_ValidRequests_TransactionId_PurchaseOrder()
        {
            // OLD BUGs: 12320
            PurchaseClientResponse response;
            PurchaseClientRequest requestOne;
            PurchaseClientRequest requestTwo;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offerOne = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);
            OfferContext offerTwo = MobileGameContentOffers61.GetContentOffer_enUS(2).GetOfferContext(Locales.en_US);

            requestOne = new PurchaseClientRequest(user.Email, user.Password);

            requestOne.RequestContent.CreatePurchaseRequest(offerOne, PurchasePaymentType.Points);
            response = requestOne.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            Assert.AreEqual(requestOne.RequestContent.TransactionId, response.BodyWrapper.TransactionId.ToString(), "Returned TransactionId should be the same as the one that was sent");
            ValidatePurchaseReceiptAgainstOffer(offerOne, response);

            // Now purchase your second Item
            requestTwo = new PurchaseClientRequest(user.Email, user.Password);

            requestTwo.RequestContent.CreatePurchaseRequest(offerTwo, PurchasePaymentType.Points);
            response = requestTwo.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            Assert.AreEqual(requestTwo.RequestContent.TransactionId, response.BodyWrapper.TransactionId.ToString(), "Returned TransactionId should be the same as the one that was sent");
            ValidatePurchaseReceiptAgainstOffer(offerTwo, response);

            // Now call purchase again for the first item. It should still return success.
            response = requestOne.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            Assert.AreEqual(requestOne.RequestContent.TransactionId, response.BodyWrapper.TransactionId.ToString(), "Returned TransactionId should be the same as the one that was sent");
            ValidatePurchaseReceiptAgainstOffer(offerOne, response);
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Purchases twice using the same transactionId. Once with '-' and and without.")]
        public void PurchaseTests_ValidRequests_TransactionId_WithoutDashes()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();
            response = request.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            Assert.AreEqual((new Guid(request.RequestContent.TransactionId)).ToString(), response.BodyWrapper.TransactionId.ToString(), "Returned TransactionId should be the same as the one that was sent");
            
            // Set the transactionId Guid to a Guid without '-'s
            request.RequestContent.TransactionId = request.RequestContent.TransactionId.Replace("-", string.Empty);

            // Now purchase again using the exact same transaction
            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            Assert.AreEqual((new Guid(request.RequestContent.TransactionId)).ToString(), response.BodyWrapper.TransactionId.ToString(), "Returned TransactionId should be the same as the one that was sent");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Purchases the durable twice with the same request. Repeating with the same TransactionId.")]
        public void PurchaseTests_ValidRequests_TransactionId_MultiDurablePurchaseSameID()
        {
            // OLD BUGs: 11572
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            Assert.AreEqual(request.RequestContent.TransactionId, response.BodyWrapper.TransactionId.ToString(), "Returned TransactionId should be the same as the one that was sent");

            // Now purchase again using the exact same transaction
            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            Assert.AreEqual(request.RequestContent.TransactionId, response.BodyWrapper.TransactionId.ToString(), "Returned TransactionId should be the same as the one that was sent");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure calling purchase for a consumable with the same transactionId does not purchase the Asset again.")]
        public void PurchaseTests_ValidRequests_TransactionId_MultiConsumablePurchaseSameID()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002001().GetOfferContext(Locales.en_US);

            request = new PurchaseClientRequest(user.Email, user.Password);

            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            Assert.AreEqual(offer.AssetQuantity, response.BodyWrapper.AssetBalance.Quantity, "Asset Quantity should be the same.");

            // Now purchase this Asset again using the same TransactionId
            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            Assert.AreEqual(offer.AssetQuantity, response.BodyWrapper.AssetBalance.Quantity, "Asset Quantity should not have changed.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Purchase an item using a Silver account.")]
        public void PurchaseTests_ValidRequests_PurchaseItemUsingPointWithSilverAccount()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Silver, true);
            OfferContext offer = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);

            request = new PurchaseClientRequest(user.Email, user.Password);

            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            Assert.AreEqual(request.RequestContent.TransactionId, response.BodyWrapper.TransactionId.ToString(), "Returned TransactionId should be the same as the one that was sent");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Purchase an item using a Silver account.")]
        public void PurchaseTests_ValidRequests_PurchaseItemUsingTokenWithSilverAccount()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Silver, true);
            OfferContext offer = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);

            request = new PurchaseClientRequest(user.Email, user.Password);

            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Token);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            Assert.AreEqual(request.RequestContent.TransactionId, response.BodyWrapper.TransactionId.ToString(), "Returned TransactionId should be the same as the one that was sent");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Purchase a valid item from a Store that does not support the item. Should be allowed.")]
        public void PurchaseTests_ValidRequests_PurchaseItemThroughUnsupportedStoreItem()
        {
            // OLD BUGs: 12140
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetContentOffer_Stores_NotMobile_61000602().GetOfferContext(Locales.en_US);

            request = new PurchaseClientRequest(user.Email, user.Password);

            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            Assert.AreEqual(request.RequestContent.TransactionId, response.BodyWrapper.TransactionId.ToString(), "Returned TransactionId should be the same as the one that was sent");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending purchase request using a valid Partner Token but with a TitleId that does not match the Offer being purchased.")]
        public void PurchaseTests_ValidRequests_AuthToken_TitleIdDifferentThenOfferTitleId()
        {
            // OLD BUGs: 11537
            TitleElement title;
            PurchaseClientRequest request;
            PurchaseClientResponse response;

            request = GenerateDefaultPurchaseRequest();

            // Get a valid title id that is not the one used for the default offer 
            title = CurrentEnvironmentSettings.Titles[2];
            if (title.Id == request.Title.Id)
            {
                throw new Exception("Title Ids need to be different in order for this test to be valid.");
            }

            // Get a partner token for the different TiteId
            request.SetAuthenticationToken = false;
            request.Headers.PartnerAuthorization = PDLCServicesCommon.AUTH_PREFIX + request.Auth.GetPartnerToken(request.UserEmail, request.Password, title, request.AudienceUri);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            Assert.AreEqual(request.RequestContent.TransactionId, response.BodyWrapper.TransactionId.ToString(), "Returned TransactionId should be the same as the one that was sent");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Verify the passed in TransactionId is returned with purchase receipt.")]
        public void PurchaseTests_ValidRequests_TransactionID()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);

            request = new PurchaseClientRequest(user.Email, user.Password);

            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            Assert.AreEqual(request.RequestContent.TransactionId, response.BodyWrapper.TransactionId.ToString(), "Returned TransactionId should be the same as the one that was sent");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Try purchasing with not enough points. Then get points and purchase again.")]
        public void PurchaseTests_ValidRequests_NotEnoughPointsGetPointsPurchaseAgain()
        {
            // OLD BUGs: 11572
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold);
            OfferContext offer = MobileGameContentOffers61.GetContentOffer_Stores_NotMobile_61000602().GetOfferContext(Locales.en_US);

            request = new PurchaseClientRequest(user.Email, user.Password);

            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Invalid status code");
            Assert.AreEqual(ServiceErrorBucket.NotEnoughPoints.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(XOnline_HResults.XONLINE_E_DMP_E_INSUFFICIENT_BALANCE, response.ServiceErrorMessageWrapper.ErrorCode, "Backend ErrorCode has changed");
            Assert.AreEqual("Insufficient Microsoft Points balance for the purchase.", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
            
            // Add Points to this user
            user.AddPoints();

            request = new PurchaseClientRequest(user.Email, user.Password);

            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            ValidatePurchaseReceiptAgainstOffer(offer, response);
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Purchase an Offer that is only listed within the XBox Store using the XBox store Id.")]
        public void PurchaseTests_ValidRequests_StoreId_PurchaseXboxStoreOnlyOffer()
        {
            PurchaseClientRequest request;
            PurchaseClientResponse response;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetContentOffer_Stores_NotMobile_61000602().GetOfferContext(Locales.en_US);

            request = new PurchaseClientRequest(user.Email, user.Password);

            request.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);

            request.RequestContent.StoreId = ((uint)MarketplaceStore.Xbox).ToString();

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            ValidatePurchaseReceiptAgainstOffer(offer, response);
        }      
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\PDLC.Test\PDLC.Tests.SCENARIOS\PDLCScenarios.cs ===
﻿using System;
using System.Diagnostics;
using System.Net;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using LiveNew.Test;

using LiveN.Test;
using LiveN.Test.Common;
using LiveN.Test.Content;
using LiveN.Test.Users;

namespace PDLC.Tests
{
    /// <summary>
    /// Based class for Purchase Tests. Contains BVTs and general setup for all other areas.
    /// </summary>
    public partial class PDLCScenarios
    {
        /// <summary>
        /// Reference to the event viewer
        /// </summary>
        private static EventViewer myEvents;

        [ClassInitialize]
        public static void TestClassInitialize(TestContext context)
        {
            myEvents = new EventViewer(".", "Application", "pdlc_service");
        }

        [TestInitialize]
        public void myTestInitialize()
        {
            myEvents.ResetEventStartPosition();
        }

        [TestCleanup]
        public void myTestCleanup()
        {
            Trace.WriteLine("\r\nALL EVENTS (Will only work on OneBox installations): \r\n" + myEvents.GenerateFormattedStringForAllEvents());
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\PDLC.Test\PDLC.Tests.SCENARIOS\PDLCScenarios_UserScenarios.cs ===
﻿using System;
using System.Diagnostics;
using System.Net;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using LiveNew.Test;

using live.common;

using LiveN.Test;
using LiveN.Test.Common;
using LiveN.Test.Content;
using LiveN.Test.Users;

namespace PDLC.Tests
{
    /// <summary>
    /// Scenario based test cases that should be able to be run against the dev XBlob environment as many time as desired
    /// </summary>
    [TestClass]
    public partial class PDLCScenarios
    {
        [TestMethod]
        [Owner("rsnyder")]
        [Description("User wants to purchase a Consumable item with points. Verifies purchase, then Consumes an Asset and then verifies Asset count goes down appropriatly. Offer is a Mobile Game PDLC Consumable with loc data in EFIGS+Japanese.")]
        public void PDLCScenarios_UserSenarios_PurchaseOfConsumableViaPointsAndRedeem()
        {
            PurchaseClientRequest purchaseRequest;
            PurchaseClientResponse purchaseResponse;
            GetAssetsClientRequest getAssetsRequest;
            GetAssetsClientResponse getAssetsResponse;
            ConsumeAssetsClientRequest consumeRequest;
            ConsumeAssetsClientResponse consumeResponse;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002001().GetOfferContext(Locales.en_US);


            // Purchase the desired Consumable
            purchaseRequest = new PurchaseClientRequest(user.Email, user.Password);
            purchaseRequest.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            purchaseResponse = purchaseRequest.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, purchaseResponse.StatusCode, "Status code should return OK");
            Assert.AreEqual(offer.AssetId, purchaseResponse.BodyWrapper.AssetBalance.AssetId, "The AssetId should be the same one that I purchased.");
            Assert.AreEqual(offer.AssetQuantity, purchaseResponse.BodyWrapper.AssetBalance.Quantity, "Quantity should be identical to what I just purchase becuase I didnot have any asset before.");


            // User can also verify the it was purchase using the GetAssets API
            getAssetsRequest = new GetAssetsClientRequest(user.Email, user.Password);
            getAssetsRequest.QueryParameters.TitleId = offer.TitleId.ToString();
            getAssetsRequest.QueryParameters.SignAssets = bool.FalseString.ToLower();
            getAssetsResponse = getAssetsRequest.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, getAssetsResponse.StatusCode, "Status code should return OK");
            Assert.AreEqual(1, getAssetsResponse.BodyWrapper.mediaAssets.Count, "User only has one asset. So should only get back a single Asset within the receipt."); ;
            Assert.AreEqual(offer.AssetId, getAssetsResponse.BodyWrapper[offer.AssetId].AssetId, "The AssetId should be the same one that I purchased."); 
            Assert.AreEqual(offer.AssetQuantity, getAssetsResponse.BodyWrapper[offer.AssetId].Quantity, "Quantity should be identical to what I just purchase becuase I didnot have any asset before.");


            // Consume one of those Assets
            consumeRequest = new ConsumeAssetsClientRequest(user.Email, user.Email);
            consumeRequest.RequestContent.TitleId = offer.TitleId.ToString();
            consumeRequest.RequestContent.TransactionId = Guid.NewGuid().ToString();
            consumeRequest.RequestContent.AssetsToConsume = new Asset[]
                                                        {
                                                            new Asset { AssetId = offer.AssetId, Quantity = 1}
                                                        };

            consumeResponse = consumeRequest.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, consumeResponse.StatusCode, "200 OK should be return once the Asset has been consumed");
            

            // Looking at the updated Asset count to see if the asset count has been reduced
            getAssetsResponse = getAssetsRequest.MakeARequest();
            Assert.AreEqual(1, getAssetsResponse.BodyWrapper.mediaAssets.Count, "User only has one asset. So should only get back a single Asset within the receipt."); ;
            Assert.AreEqual(offer.AssetId, getAssetsResponse.BodyWrapper[offer.AssetId].AssetId, "The AssetId should be the same one that I purchased."); 
            Assert.AreEqual(offer.AssetQuantity - 1, getAssetsResponse.BodyWrapper[offer.AssetId].Quantity, "Quantity should be one less to what was purchase becuase 1 has been consumed.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("User wants to purchase a Durable item with points and then view there Receipt. Offer is a Mobile Game PDLC Durable with Japanese only.")]
        public void PDLCScenarios_UserSenarios_PurchaseOfDurableViaToken_JapaneseUser()
        {
            UserAccount user;
            PurchaseClientRequest purchaseRequest;
            PurchaseClientResponse purchaseResponse; 
            GetReceiptsClientRequest getReceiptsrequest;
            GetReceiptsClientResponse getReceiptsResponse;
            AccountUserSettings userSettings = new AccountUserSettings();
            OfferContext offer = MobileGameContentOffers61.GetContentOffer_Locale_Japanese_61000007().GetOfferContext(Locales.ja_JP);


            // Creating a user within Japan
            userSettings.countryId = CountryId.JP;
            userSettings.languageId = LanguageId.ja;
            user = new UserAccount(userSettings);


            // Give the user some points
            user.AddPoints();


            // Purchase the desired Durable
            purchaseRequest = new PurchaseClientRequest(user.Email, user.Password);
            purchaseRequest.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Token);
            purchaseResponse = purchaseRequest.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, purchaseResponse.StatusCode, "Status code should return OK");
            Assert.AreEqual(offer.OfferId, purchaseResponse.BodyWrapper.OfferId, "The OfferId should be the same one that I purchased.");


            // View the purchase Durable within the Receipt
            getReceiptsrequest = new GetReceiptsClientRequest(user.Email, user.Password);
            getReceiptsrequest.RequestContent.SignReceipts = bool.FalseString.ToLower();

            getReceiptsResponse = getReceiptsrequest.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, getReceiptsResponse.StatusCode, "Status code should return OK");
            Assert.AreEqual((uint)1, getReceiptsResponse.BodyWrapper.TotalItems, "Total items should be 1 as that's all that's been purchased.");
            Assert.AreEqual(offer.OfferId, getReceiptsResponse.BodyWrapper.ReceiptsPage[0].OfferId, "The OfferId should be the same one that I purchased.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("User wants to purchase a Durable item, but the item they try to purchase is not allowed to be purchased becuase of Geo Fencing. Error should tell them that they are not allowed to purchase item.")]
        public void PDLCScenarios_UserSenarios_PurchaseOfDurableButGetGeoFenced()
        {
            PurchaseClientRequest purchaseRequest;
            PurchaseClientResponse purchaseResponse;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetContentOffer_Locale_Japanese_61000007().GetOfferContext(Locales.ja_JP);

            // Trying to Purchase the Geo Fenced Durable
            purchaseRequest = new PurchaseClientRequest(user.Email, user.Password);
            purchaseRequest.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            purchaseResponse = purchaseRequest.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, purchaseResponse.StatusCode, "Status code should return BadRequest");
            Assert.AreEqual(ServiceErrorBucket.OfferNotPurchasable.ToString(), purchaseResponse.ServiceErrorMessageWrapper.Bucket, "As this offer is GeoFenced, OfferNotPurchasable should be return to signify that this Token may be valid. But this User is not allowed to purchase it.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("User wants to Purchase a Consumable item,but something happened during transmition and they try purchasing again using the same transactionID. They shoud not be double charged.")]
        public void PDLCScenarios_UserSenarios_ProtectAgainstDoublePurchaseOfConsumable()
        {
            uint initialPointsBalance;
            PurchaseClientRequest purchaseRequest;
            PurchaseClientResponse purchaseResponse;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetContentOffer_enUS(2).GetOfferContext(Locales.en_US);
            GetPointsBalanceClientRequest getPointsRequest = new GetPointsBalanceClientRequest(user.Email, user.Password);
                  
            // Save off the initial points balance of the user by calling GetPointsBalance
            initialPointsBalance = getPointsRequest.MakeARequest().BodyWrapper.PointsBalance;


            // Purchasing Consumable via Points
            purchaseRequest = new PurchaseClientRequest(user.Email, user.Password);
            purchaseRequest.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            purchaseResponse = purchaseRequest.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, purchaseResponse.StatusCode, "Status code should return OK");
            Assert.AreEqual(offer.OfferId, purchaseResponse.BodyWrapper.OfferId, "The OfferId should be the same one that I purchased.");
            Assert.AreEqual(initialPointsBalance - offer.PointsPricePoints, getPointsRequest.MakeARequest().BodyWrapper.PointsBalance, "Purchase should have gone through and the Offer's Points should have been subtracted from User Points Balance.");
            

            // Pretending that there was an error getting back the response, User can call Purchase again with the same transaction Id in order to protect themselves from being double charged.
            purchaseResponse = purchaseRequest.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, purchaseResponse.StatusCode, "Status code should return OK");
            Assert.AreEqual(offer.OfferId, purchaseResponse.BodyWrapper.OfferId, "The OfferId should be the same one that I purchased.");
            Assert.AreEqual(initialPointsBalance - offer.PointsPricePoints, getPointsRequest.MakeARequest().BodyWrapper.PointsBalance, "Using the same Transaction should have saved the User from being doule charged.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("User wants to Consume an Asset, but something happened during transmition and they try Consume again using the same transactionID. They shoud not be double Consumed.")]
        public void PDLCScenarios_UserSenarios_ProtectAgainstDoubleConsumeOfAnAsset()
        {
            PurchaseClientRequest purchaseRequest;
            PurchaseClientResponse purchaseResponse;
            GetAssetsClientRequest getAssetsRequest;
            GetAssetsClientResponse getAssetsResponse;
            ConsumeAssetsClientRequest consumeRequest;
            ConsumeAssetsClientResponse consumeResponse;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);
            OfferContext offer = MobileGameContentOffers61.GetConsumableOffer_Locale_EFIGS_Ja_61002001().GetOfferContext(Locales.en_US);


            // Purchase the desired Consumable
            purchaseRequest = new PurchaseClientRequest(user.Email, user.Password);
            purchaseRequest.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            purchaseResponse = purchaseRequest.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, purchaseResponse.StatusCode, "Status code should return OK");
            Assert.AreEqual(offer.AssetId, purchaseResponse.BodyWrapper.AssetBalance.AssetId, "The AssetId should be the same one that I purchased.");
            Assert.AreEqual(offer.AssetQuantity, purchaseResponse.BodyWrapper.AssetBalance.Quantity, "Quantity should be identical to what I just purchase becuase I didnot have any asset before.");


            // User can also verify the it was purchase using the GetAssets API
            getAssetsRequest = new GetAssetsClientRequest(user.Email, user.Password);
            getAssetsRequest.QueryParameters.TitleId = offer.TitleId.ToString();
            getAssetsRequest.QueryParameters.SignAssets = bool.FalseString.ToLower();
            getAssetsResponse = getAssetsRequest.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, getAssetsResponse.StatusCode, "Status code should return OK");
            Assert.AreEqual(1, getAssetsResponse.BodyWrapper.mediaAssets.Count, "User only has one asset. So should only get back a single Asset within the receipt."); ;
            Assert.AreEqual(offer.AssetId, getAssetsResponse.BodyWrapper[offer.AssetId].AssetId, "The AssetId should be the same one that I purchased.");
            Assert.AreEqual(offer.AssetQuantity, getAssetsResponse.BodyWrapper[offer.AssetId].Quantity, "Quantity should be identical to what I just purchase becuase I didnot have any asset before.");


            // Consume one of those Assets
            consumeRequest = new ConsumeAssetsClientRequest(user.Email, user.Email);
            consumeRequest.RequestContent.TitleId = offer.TitleId.ToString();
            consumeRequest.RequestContent.TransactionId = Guid.NewGuid().ToString();
            consumeRequest.RequestContent.AssetsToConsume = new Asset[]
                                                        {
                                                            new Asset { AssetId = offer.AssetId, Quantity = 1}
                                                        };

            consumeResponse = consumeRequest.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, consumeResponse.StatusCode, "200 OK should be return once the Asset has been consumed");


            // Looking at the updated Asset count to see if the asset count has been reduced
            getAssetsResponse = getAssetsRequest.MakeARequest();
            Assert.AreEqual(1, getAssetsResponse.BodyWrapper.mediaAssets.Count, "User only has one asset. So should only get back a single Asset within the receipt."); ;
            Assert.AreEqual(offer.AssetId, getAssetsResponse.BodyWrapper[offer.AssetId].AssetId, "The AssetId should be the same one that I purchased.");
            Assert.AreEqual(offer.AssetQuantity - 1, getAssetsResponse.BodyWrapper[offer.AssetId].Quantity, "Quantity should be one less to what was purchase becuase 1 has been consumed.");


            // Pretending that there was an error getting back the response, User can call Consume again with the same transaction Id in order to protect themselves from being double Consumed.
            consumeResponse = consumeRequest.MakeARequest();
            Assert.AreEqual(HttpStatusCode.OK, consumeResponse.StatusCode, "200 OK should be return again. Even though the User did not get double Consumed.");


            // Looking at the Asset count to ensure the User did not get doulbe Consumed
            getAssetsResponse = getAssetsRequest.MakeARequest();
            Assert.AreEqual(1, getAssetsResponse.BodyWrapper.mediaAssets.Count, "User only has one asset. So should only get back a single Asset within the receipt."); ;
            Assert.AreEqual(offer.AssetId, getAssetsResponse.BodyWrapper[offer.AssetId].AssetId, "The AssetId should be the same one that I purchased.");
            Assert.AreEqual(offer.AssetQuantity - 1, getAssetsResponse.BodyWrapper[offer.AssetId].Quantity, "Quantity should be one less to what was purchase. Same as previous Consume transaction.");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\PDLC.Test\PDLC.Tests.VerifyToken\VerifyTokenTests.cs ===
﻿using System;
using System.Diagnostics;
using System.Net;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using LiveNew.Test;

using LiveN.Test;
using LiveN.Test.Common;
using LiveN.Test.Content;
using LiveN.Test.Users;

namespace PDLC.Tests
{
    /// <summary>
    /// Based class for VerifyToken Tests. Contains BVTs and general setup for all other areas.
    /// </summary>
    [TestClass]
    public partial class VerifyTokenTests
    {
        /// <summary>
        /// User email for default cases
        /// </summary>
        private static string StaticUserEmail;

        /// <summary>
        /// User password for default cases
        /// </summary>
        private static string StaticUserPassword;

        /// <summary>
        /// Reference to the event viewer
        /// </summary>
        private static EventViewer myEvents;

        [ClassInitialize]
        public static void TestClassInitialize(TestContext context)
        {
            myEvents = new EventViewer(".", "Application", "pdlc_service");

            StaticUserEmail = CurrentEnvironmentSettings.UserSettings[0].UserEmail;
            StaticUserPassword = CurrentEnvironmentSettings.UserSettings[0].Password;
        }

        [TestInitialize]
        public void myTestInitialize()
        {
            myEvents.ResetEventStartPosition();
        }

        [TestCleanup]
        public void myTestCleanup()
        {
            Trace.WriteLine("\r\nALL EVENTS (Will only work on OneBox installations): \r\n" + myEvents.GenerateFormattedStringForAllEvents());
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure the basic Verify Token is working")]
        public void VerifyTokenTests_BVT()
        {
            VerifyTokenClientRequest request;
            VerifyTokenClientResponse response;

            request = GenerateDefaultVerifyTokenRequest();

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "StatusCode in not correct");
            Assert.IsTrue(response.BodyWrapper.EmsOffer.MediaType > 0, "MediaType should be a value great then the default zero value indicating it's been set by the response.");
        }

        /// <summary>
        /// Generate a defualt request for VerifyToken
        /// </summary>
        /// <returns>Default VerifyToken request</returns>
        private VerifyTokenClientRequest GenerateDefaultVerifyTokenRequest()
        {
            VerifyTokenClientRequest request;
            OfferContext offer = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);

            request = new VerifyTokenClientRequest(StaticUserEmail, StaticUserPassword);

            request.QueryParameters.StoreId = ((uint)MarketplaceStore.Mobile).ToString();
            request.QueryParameters.BillingToken = offer.BillingToken;

            return request;
        }

        /// <summary>
        /// Verify the given response to ensure the response matches the expected offer information
        /// </summary>
        /// <param name="response">VerifyToken Response</param>
        /// <param name="offer">Offer to comapre response against</param>
        private void ValidateEmsOfferVerifyTokenResponseAgainstOffer(VerifyTokenClientResponse response, OfferContext offer)
        {
            Assert.AreEqual(offer.OfferId, response.BodyWrapper.EmsOffer.OfferId, "OfferId is different.");
            Assert.AreEqual(offer.ProductId, response.BodyWrapper.EmsOffer.MediaId, "MediaId is different.");
            Assert.AreEqual(offer.GameContentTypeId, response.BodyWrapper.EmsOffer.MediaType, "MediaType is different.");

            Assert.IsTrue(response.BodyWrapper.isNullXboxOffer, "As this is an EmsOffer, XboxOffer should not be returned.");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\PDLC.Test\PDLC.Tests.SCENARIOS\PDLCScenarios_IntegrationTests.cs ===
﻿using System;
using System.Diagnostics;
using System.Net;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using LiveNew.Test;

using live.common;

using LiveN.Test;
using LiveN.Test.Common;
using LiveN.Test.Content;
using LiveN.Test.Users;

namespace PDLC.Tests
{
    /// <summary>
    /// Integration test that require specially set up data. These test can not run everytime. See each test for there specific requirements in order to run.
    /// </summary>
    public partial class PDLCScenarios
    {
        [TestMethod]
        [Owner("rsnyder")]
        [Description("User wants to purchase a Consumable item with a Token. Then Consume one of those Assets and verify it was reduced from there quantity. Offer is a Mobile Game PDLC Consumable with loc data in EFIGS+Japanese.")]
        public void PDLCScenarios_IntegrationTests_PurchaseOfConsumableViaToken_JapaneseUser()
        {
            // User Token was given my the MarketPlace Team. It's generated as a single us Token. Used to simulate how Golden Gate will really prop within Prodcution
            // Offer is for OfferId: 61002001-0000-4000-8000-0000584107f6

            OfferContext offer = new OfferContext();

            // Token was given to us by Market Place team
            offer.BillingToken = "JCK66-KV73T-3CCKH-YX4DR-DP7CZ";

            // Rest of the information can be pulled from FAST query based off the OfferID that you could get via VerifyToken
            // http://le-xblob-bld01:12030/marketplacecatalog/v1/product/en-us?tiers=2&stores=5&offers=61002001-0000-4000-8000-0000584107f6
            offer.GameContentTypeId = 60; // entry/productType
            offer.OfferId = new Guid("61002001-0000-4000-8000-0000584107f6"); // entry/offerInstances/offerInstance[0]/offerId
            offer.PointsPricePoints = 250; // entry/offerInstances/offerInstance[0]/price
            offer.PointsPriceToken = 250; // entry/offerInstances/offerInstance[0]/price
            offer.ProductId = new Guid("01234567-89ab-cdef-0000-aaac61002001"); // entry/offerInstances/offerInstance[0]/productInstance/productId
            offer.Title = "Test.TitleReduced"; // entry/reducedTitle


            UserAccount user;
            PurchaseClientRequest purchaseRequest;
            PurchaseClientResponse purchaseResponse;
            GetAssetsClientRequest getAssetsRequest;
            GetAssetsClientResponse getAssetsResponse;
            ConsumeAssetsClientRequest consumeRequest;
            ConsumeAssetsClientResponse consumeResponse;
            AccountUserSettings userSettings = new AccountUserSettings();

            // Creating a user within Japan
            userSettings.countryId = CountryId.JP;
            userSettings.languageId = LanguageId.ja;
            user = new UserAccount(userSettings);


            // Purchase the desired Consumable
            purchaseRequest = new PurchaseClientRequest(user.Email, user.Password);
            purchaseRequest.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Token);
            purchaseResponse = purchaseRequest.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, purchaseResponse.StatusCode, "Status code should return OK");
            Assert.AreEqual(offer.AssetId, purchaseResponse.BodyWrapper.AssetBalance.AssetId, "The AssetId should be the same one that I purchased.");
            Assert.AreEqual(offer.AssetQuantity, purchaseResponse.BodyWrapper.AssetBalance.Quantity, "Quantity should be identical to what I just purchase becuase I didnot have any asset before.");


            // User can also verify the it was purchase using the GetAssets API
            getAssetsRequest = new GetAssetsClientRequest(user.Email, user.Password);
            getAssetsRequest.QueryParameters.TitleId = offer.TitleId.ToString();
            getAssetsRequest.QueryParameters.SignAssets = bool.FalseString.ToLower();
            getAssetsResponse = getAssetsRequest.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, getAssetsResponse.StatusCode, "Status code should return OK");
            Assert.AreEqual(1, getAssetsResponse.BodyWrapper.mediaAssets.Count, "User only has one asset. So should only get back a single Asset within the receipt."); ;
            Assert.AreEqual(offer.AssetId, getAssetsResponse.BodyWrapper[offer.AssetId].AssetId, "The AssetId should be the same one that I purchased."); ;
            Assert.AreEqual(offer.AssetQuantity, getAssetsResponse.BodyWrapper[offer.AssetId].Quantity, "Quantity should be identical to what I just purchase becuase I didnot have any asset before.");


            // Consume one of those Assets
            consumeRequest = new ConsumeAssetsClientRequest(user.Email, user.Email);
            consumeRequest.RequestContent.TitleId = offer.TitleId.ToString();
            consumeRequest.RequestContent.TransactionId = Guid.NewGuid().ToString();
            consumeRequest.RequestContent.AssetsToConsume = new Asset[]
                                                        {
                                                            new Asset { AssetId = offer.AssetId, Quantity = 1}
                                                        };

            consumeResponse = consumeRequest.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, consumeResponse.StatusCode, "200 OK should be return once the Asset has been consumed");


            // Looking at the updated Asset count to see if the asset count has been reduced
            getAssetsResponse = getAssetsRequest.MakeARequest();

            Assert.AreEqual(1, getAssetsResponse.BodyWrapper.mediaAssets.Count, "User only has one asset. So should only get back a single Asset within the receipt."); ;
            Assert.AreEqual(offer.AssetId, getAssetsResponse.BodyWrapper[offer.AssetId].AssetId, "The AssetId should be the same one that I purchased.");
            Assert.AreEqual(offer.AssetQuantity - 1, getAssetsResponse.BodyWrapper[offer.AssetId].Quantity, "Quantity should be one less to what was purchase becuase 1 has been consumed.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("User wants to purchase a Durable item with a Token and view it in thier Receipt. Offer is a Mobile Game PDLC Durable with loc data in.")]
        public void PDLCScenarios_IntegrationTests_PurchaseOfDurableViaToken()
        {
            // User Token was given my the MarketPlace Team. It's generated as a single us Token. Used to simulate how Golden Gate will really prop within Prodcution
            // Offer is for OfferId: 61000907-0000-4000-8000-0000584107f6

            OfferContext offer = new OfferContext();

            // Token was given to us by Market Place team
            offer.BillingToken = "MJGFH-PHGY9-YX2H3-6KM6M-R9YWZ";

            // Rest of the information can be pulled from FAST query based off the OfferID that you could get via VerifyToken
            // http://le-xblob-bld01:12030/marketplacecatalog/v1/product/en-us?tiers=2&stores=5&offers=61000907-0000-4000-8000-0000584107f6
            offer.GameContentTypeId = 59; // entry/productType
            offer.OfferId = new Guid("61000907-0000-4000-8000-0000584107f6"); // entry/offerInstances/offerInstance[0]/offerId
            offer.PointsPricePoints = 250; // entry/offerInstances/offerInstance[0]/price
            offer.PointsPriceToken = 250; // entry/offerInstances/offerInstance[0]/price
            offer.ProductId = new Guid("01234567-89ab-cdef-0000-aaac61000907"); // entry/offerInstances/offerInstance[0]/productInstance/productId
            offer.Title = "Test.TitleReduced"; // entry/reducedTitle


            VerifyTokenClientRequest verifyTokenRequest;
            VerifyTokenClientResponse verifyTokenResponse;

            PurchaseClientRequest purchaseRequest;
            PurchaseClientResponse purchaseResponse;

            GetReceiptsClientRequest getReceiptsrequest;
            GetReceiptsClientResponse getReceiptsResponse;

            UserAccount user = new UserAccount(XblLiveUserTier.Gold, true);


            // Verify the Token exists within the system
            verifyTokenRequest = new VerifyTokenClientRequest(user.Email, user.Password);
            verifyTokenRequest.QueryParameters.StoreId = ((uint)MarketplaceStore.Mobile).ToString();
            verifyTokenRequest.QueryParameters.BillingToken = offer.BillingToken;

            verifyTokenResponse = verifyTokenRequest.MakeARequest();

            Assert.IsFalse(verifyTokenResponse.IsServiceErrorMessage, "This token has already been redeemed. Get another one.");
            Assert.AreEqual(offer.OfferId, verifyTokenResponse.BodyWrapper.EmsOffer.OfferId, "Expected that this offerId would match what was given to me by the MarketPlace Team");


            // Typically the client would call FAST directly. But I've pulled that manually. 


            // Purchase the desired Durable
            purchaseRequest = new PurchaseClientRequest(user.Email, user.Password);
            purchaseRequest.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Token);
            purchaseResponse = purchaseRequest.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, purchaseResponse.StatusCode, "Status code should return OK");
            Assert.AreEqual(offer.OfferId, purchaseResponse.BodyWrapper.OfferId, "The OfferId should be the same one that I purchased.");


            // View the purchase Durable within the Receipt
            getReceiptsrequest = new GetReceiptsClientRequest(user.Email, user.Password);
            getReceiptsrequest.RequestContent.SignReceipts = bool.FalseString.ToLower();

            getReceiptsResponse = getReceiptsrequest.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, getReceiptsResponse.StatusCode, "Status code should return OK");
            Assert.AreEqual((uint)1, getReceiptsResponse.BodyWrapper.TotalItems, "Total items should be 1 as that's all that's been purchased.");
            Assert.AreEqual(offer.OfferId, getReceiptsResponse.BodyWrapper.ReceiptsPage[0].OfferId, "The OfferId should be the same one that I purchased.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Test used to verify purchase within it is working")]
        public void PDLCScenarios_IntegrationTests_Int2DurablePurchase()
        {
            string email;
            string password;
            OfferContext offer;
            PurchaseClientRequest purchaseRequest;
            EnvironmentElement selectedEnvironment;
            PurchaseClientResponse purchaseResponse;

            // Rest of the information can be pulled from FAST query based off the OfferID that you could get via VerifyToken
            // http://131.107.143.177/MarketplaceCatalog/v1/product/en-US?tiers=3&detailview=detailmobile&producttypes=59&stores=5&hextitles=0x4D53138A&orderdirection=2
            //offer = new OfferContext();
            //offer.GameContentTypeId = 59; // entry/productType
            //offer.OfferId = new Guid("dddd0002-0000-4000-8000-00004d53138a"); // entry/offerInstances/offerInstance[0]/offerId
            //offer.PointsPricePoints = 30; // entry/offerInstances/offerInstance[0]/price
            //offer.PointsPriceToken = 30; // entry/offerInstances/offerInstance[0]/price
            //offer.ProductId = new Guid("01234567-89ab-cdef-0002-aaac4d53138a"); // entry/offerInstances/offerInstance[0]/productInstance/productId
            //offer.Title = "Volcano"; // entry/reducedTitle

            // second entry
            offer = new OfferContext();
            offer.GameContentTypeId = 59; // entry/productType
            offer.OfferId = new Guid("dddd0001-0000-4000-8000-00004d53138a"); // entry/offerInstances/offerInstance[0]/offerId
            offer.PointsPricePoints = 20; // entry/offerInstances/offerInstance[0]/price
            offer.PointsPriceToken = 20; // entry/offerInstances/offerInstance[0]/price
            offer.ProductId = new Guid("01234567-89ab-cdef-0001-aaac4d53138a"); // entry/offerInstances/offerInstance[0]/productInstance/productId
            offer.Title = "Mountain"; // entry/reducedTitle

            // Set your environement to INT
            selectedEnvironment = CurrentEnvironmentSettings.GetEnvironmentSettings("INT2");

            email = "mpint2test3@live-int.com";
            password = "password";

            // Purchase the desired Durable
            purchaseRequest = new PurchaseClientRequest(selectedEnvironment, email, password);
            purchaseRequest.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);

            purchaseResponse = purchaseRequest.MakeARequest();
            if (purchaseResponse.StatusCode != HttpStatusCode.BadRequest)
            {
                Assert.AreEqual(HttpStatusCode.OK, purchaseResponse.StatusCode, "Status code should return OK");
                Assert.AreEqual(offer.OfferId, purchaseResponse.BodyWrapper.OfferId, "The OfferId should be the same one that I purchased.");
            }

            // Now get the receipt based off the previous transactionId
            GetReceiptsClientRequest requestGetReceipts;
            GetReceiptsClientResponse responseGetReceipts;

            // Purchase the desired Durable
            requestGetReceipts = new GetReceiptsClientRequest(selectedEnvironment, email, password);
           // requestGetReceipts.RequestContent.TransactionIds = new string[] { purchaseRequest.RequestContent.TransactionId };
            requestGetReceipts.RequestContent.SignReceipts = bool.FalseString.ToLower();

            // Set this title to Hurl
            requestGetReceipts.Title = selectedEnvironment.Titles.Get("Hurl", ConsoleType.WindowsPhone);
            requestGetReceipts.RequestContent.TitleId = requestGetReceipts.Title.Id;
            requestGetReceipts.RequestContent.PageNumber = "1";
            requestGetReceipts.RequestContent.PageSize = "1";

            responseGetReceipts = requestGetReceipts.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, responseGetReceipts.StatusCode, "Invalid status code was returned.");
            Assert.AreEqual(requestGetReceipts.RequestContent.PageSize, responseGetReceipts.BodyWrapper.ReceiptsPage.Length, "Should only return the total number of Offers requested.");
            Assert.IsFalse(responseGetReceipts.Body.Contains("<Signature "), "Unsigned receipt should NOT have the Signature Xml Node within the response.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Verify if caller passes in the title ID 0x4D5308EC (Xbox Live Extras) or  0x4D53139A (Mango Avatar Editor) gets replaced with 0x584D07D1(Console avatar marketplace's)")]
        public void PDLCScenarios_IntegrationTests_Int2SwappingTitleId()
        {
            // OLD BUGs: 13167(QFE)

            OfferContext offer;
            PurchaseClientRequest purchaseRequest;
            PurchaseClientResponse purchaseResponse;
            EnvironmentElement selectedEnvironment;

            // Set your environement to INT
            selectedEnvironment = CurrentEnvironmentSettings.GetEnvironmentSettings("INT2");

            // Purchasing this offer
            // http://131.107.143.177/MarketplaceCatalog/v1/product/en-US?tiers=3&detailview=detailmobile&producttypes=47
            offer = new OfferContext();
            offer.OfferId = new Guid("011f001c-0000-4000-8000-00005858081c"); // entry/offerInstances/offerInstance[0]/offerId
            offer.PointsPricePoints = 0; // entry/offerInstances/offerInstance[0]/price
            offer.PointsPriceToken = 0; // entry/offerInstances/offerInstance[0]/price
            offer.ProductId = new Guid("00000008-4650-0261-cdb2-b3025858081c"); // entry/offerInstances/offerInstance[0]/productInstance/productId
            offer.AssetId = 0; // entry/offerInstances/offerInstance[0]/productInstance/assetId
            offer.GameContentTypeId = 47; // entry/productType
            offer.Title = "1GOAL T-shirt"; // entry/reducedTitle

            // Purchase the desired Durable
            purchaseRequest = new PurchaseClientRequest(selectedEnvironment, selectedEnvironment.UserSettings[0].UserEmail, selectedEnvironment.UserSettings[0].Password);

            purchaseRequest.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            purchaseRequest.RequestContent.StoreId = ((uint)MarketplaceStore.Xbox).ToString();

            // Set the title to be 0x4D5308EC (Xbox Live Extras)
            purchaseRequest.Title = CurrentEnvironmentSettings.Titles.Get("LiveApp", ConsoleType.WindowsPhone);

            purchaseResponse = purchaseRequest.MakeARequest();
            if (purchaseResponse.StatusCode != HttpStatusCode.BadRequest)
            {
                Assert.AreEqual(HttpStatusCode.OK, purchaseResponse.StatusCode, "Status code should return OK");
                Assert.AreEqual(offer.OfferId, purchaseResponse.BodyWrapper.OfferId, "The OfferId should be the same one that I purchased.");
            }
            else
            {
                // The item was already purchase by this user. Nothing to verify passed response status code.
            }

            // Now get the receipt based off the previous transactionId
            GetReceiptsClientRequest requestGetReceipts;
            GetReceiptsClientResponse responseGetReceipts;

            // Purchase the desired Durable
            requestGetReceipts = new GetReceiptsClientRequest(selectedEnvironment, selectedEnvironment.UserSettings[0].UserEmail, selectedEnvironment.UserSettings[0].Password);
            requestGetReceipts.RequestContent.SignReceipts = bool.FalseString.ToLower();


            // Test 0x4D5308EC (Xbox Live Extras)
            requestGetReceipts.Title = purchaseRequest.Title;
            requestGetReceipts.RequestContent.TitleId = requestGetReceipts.Title.Id;
            requestGetReceipts.RequestContent.StoreId = purchaseRequest.RequestContent.StoreId;
            requestGetReceipts.RequestContent.MediaTypeId = purchaseRequest.RequestContent.MediaTypeId;

            responseGetReceipts = requestGetReceipts.MakeARequest(); 

            Assert.AreEqual(HttpStatusCode.OK, responseGetReceipts.StatusCode, "Invalid status code was returned.");
            Assert.IsFalse(responseGetReceipts.Body.Contains("<Signature "), "Unsigned receipt should NOT have the Signature Xml Node within the response.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Test that I can change to purchase things")]
        public void PDLCScenarios_IntegrationTests_Int2QuickTest()
        {
            string email;
            string password;
            OfferContext offer;
            PurchaseClientRequest purchaseRequest;
            EnvironmentElement selectedEnvironment;
            PurchaseClientResponse purchaseResponse;

            // Rest of the information can be pulled from FAST query based off the OfferID that you could get via VerifyToken
            // http://131.107.143.177/MarketplaceCatalog/v1/product/en-US?tiers=3&detailview=detailmobile&producttypes=59&stores=5&orderdirection=2&Offers=99000900-0000-4000-8000-00004d5308f6
            offer = new OfferContext();
            offer.GameContentTypeId = 59; // entry/productType
            offer.OfferId = new Guid("99000900-0000-4000-8000-00004d5308f6"); // entry/offerInstances/offerInstance[0]/offerId
            offer.PointsPricePoints = 250; // entry/offerInstances/offerInstance[0]/price
            offer.PointsPriceToken = 250; // entry/offerInstances/offerInstance[0]/price
            offer.ProductId = new Guid("01234567-89ab-cdef-0000-aaac99000900"); // entry/offerInstances/offerInstance[0]/productInstance/productId
            offer.Title = "Mobile Game PDLC BVT for en-US #900"; // entry/reducedTitle

            // Set your environement to INT
            selectedEnvironment = CurrentEnvironmentSettings.GetEnvironmentSettings("INT2");

            email = "mpint2test3@live-int.com";
            password = "password";

            // Purchase the desired Durable
            purchaseRequest = new PurchaseClientRequest(selectedEnvironment, email, password);
            purchaseRequest.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);

            // Set the title to be the same as what the item's title is
            purchaseRequest.Title = selectedEnvironment.Titles.Get("Hurl", ConsoleType.WindowsPhone);
            purchaseRequest.Title.Id = "1297287414";

            purchaseResponse = purchaseRequest.MakeARequest();
            if (purchaseResponse.StatusCode == HttpStatusCode.BadRequest)
            {
                throw new Exception("This can happen if the user has already purchase this item.");
            }

            Assert.AreEqual(HttpStatusCode.OK, purchaseResponse.StatusCode, "Status code should return OK");
            Assert.AreEqual(offer.OfferId, purchaseResponse.BodyWrapper.OfferId, "The OfferId should be the same one that I purchased.");


            // Now get the receipt based off the previous transactionId
            GetReceiptsClientRequest requestGetReceipts;
            GetReceiptsClientResponse responseGetReceipts;

            // Purchase the desired Durable
            requestGetReceipts = new GetReceiptsClientRequest(selectedEnvironment, selectedEnvironment.UserSettings[0].UserEmail, selectedEnvironment.UserSettings[0].Password);
            requestGetReceipts.RequestContent.SignReceipts = bool.FalseString.ToLower();

            // Set title to what was used within purchase
            requestGetReceipts.Title = purchaseRequest.Title;
            requestGetReceipts.RequestContent.TitleId = requestGetReceipts.Title.Id;

            responseGetReceipts = requestGetReceipts.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, responseGetReceipts.StatusCode, "Invalid status code was returned.");
            Assert.IsFalse(responseGetReceipts.Body.Contains("<Signature "), "Unsigned receipt should NOT have the Signature Xml Node within the response.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure that the basic GamerContext is working within INT")]
        public void PDLCScenarios_IntegrationTests_Int2GamerContextTests()
        {
            GamerContextClientRequest request;
            GamerContextClientResponse response;
            EnvironmentElement selectedEnvironment;

            // Set your environement to INT
            selectedEnvironment = CurrentEnvironmentSettings.GetEnvironmentSettings("INT2");

            request = new GamerContextClientRequest(selectedEnvironment, selectedEnvironment.UserSettings[0].UserEmail, selectedEnvironment.UserSettings[0].Password);

            // Set this title to Hurl
            request.Title = selectedEnvironment.Titles.Get("Hurl", ConsoleType.WindowsPhone);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Response status code should have been OK");
            Assert.IsNotNull(response.BodyWrapper.LegalLocale, "Ensures response has at least one value set");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Test used to verify consumable purchase within it is working")]
        public void PDLCScenarios_IntegrationTests_Int2ConsumablePurchase()
        {
            OfferContext offer;
            PurchaseClientRequest purchaseRequest;
            EnvironmentElement selectedEnvironment;
            PurchaseClientResponse purchaseResponse;

            // Rest of the information can be pulled from FAST query based off the OfferID that you could get via VerifyToken
            // http://131.107.143.177/MarketplaceCatalog/v1/product/en-US?tiers=3&detailview=detailmobile&producttypes=60&stores=5&hextitles=0x4D53138A&orderdirection=2
            offer = new OfferContext();
            offer.GameContentTypeId = 60; // entry/productType
            offer.OfferId = new Guid("ffff0000-0000-4000-8000-00004d53138a"); // entry/offerInstances/offerInstance[0]/offerId
            offer.PointsPricePoints = 5; // entry/offerInstances/offerInstance[0]/price
            offer.PointsPriceToken = 5; // entry/offerInstances/offerInstance[0]/price
            offer.ProductId = new Guid("01234567-89ab-cdef-0000-aacc4d53138a"); // entry/offerInstances/offerInstance[0]/productInstance/productId
            offer.AssetId = 11223344; // entry/offerInstances/offerInstance[0]/productInstance/assetId
            offer.Title = "Fuel (5)"; // entry/reducedTitle

            // Set your environement to INT
            selectedEnvironment = CurrentEnvironmentSettings.GetEnvironmentSettings("INT2");

            // Purchase the desired Durable
            purchaseRequest = new PurchaseClientRequest(selectedEnvironment, selectedEnvironment.UserSettings[0].UserEmail, selectedEnvironment.UserSettings[0].Password);
            purchaseRequest.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);

            // Set teh title to be the as as what the item's title is
            purchaseRequest.Title = selectedEnvironment.Titles.Get("Hurl", ConsoleType.WindowsPhone);

            purchaseResponse = purchaseRequest.MakeARequest();
            if (purchaseResponse.StatusCode == HttpStatusCode.BadRequest)
            {
                throw new Exception("This can happen if the user has already purchase this item. But since this is a consumable, it should not happen.");
            }

            Assert.AreEqual(HttpStatusCode.OK, purchaseResponse.StatusCode, "Status code should return OK");
            Assert.AreEqual(offer.OfferId, purchaseResponse.BodyWrapper.OfferId, "The OfferId should be the same one that I purchased.");

            GetAssetsClientResponse getAssetsClientResponse;
            GetAssetsClientRequest getAssetsClientrequest = new GetAssetsClientRequest(selectedEnvironment, selectedEnvironment.UserSettings[0].UserEmail, selectedEnvironment.UserSettings[0].Password);

            // Set this title to Gamer Services Explorer
            getAssetsClientrequest.Title = selectedEnvironment.Titles.Get("Hurl", ConsoleType.WindowsPhone);

            getAssetsClientrequest.QueryParameters.TitleId = getAssetsClientrequest.Title.Id.ToString();
            getAssetsClientrequest.QueryParameters.SignAssets = "false";

            getAssetsClientResponse = getAssetsClientrequest.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, getAssetsClientResponse.StatusCode, "Status code should return OK");

            // Now get the receipt based off the previous transactionId
            GetReceiptsClientRequest requestGetReceipts;
            GetReceiptsClientResponse responseGetReceipts;

            // Purchase the desired Durable
            requestGetReceipts = new GetReceiptsClientRequest(selectedEnvironment, selectedEnvironment.UserSettings[0].UserEmail, selectedEnvironment.UserSettings[0].Password);
            requestGetReceipts.RequestContent.TransactionIds = new string[] { purchaseRequest.RequestContent.TransactionId };
            requestGetReceipts.RequestContent.SignReceipts = bool.FalseString.ToLower();
            requestGetReceipts.RequestContent.MediaTypeId = "60";
   //         requestGetReceipts.RequestContent.TitleId = 

            responseGetReceipts = requestGetReceipts.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, responseGetReceipts.StatusCode, "Invalid status code was returned.");
            Assert.IsFalse(responseGetReceipts.Body.Contains("<Signature "), "Unsigned receipt should NOT have the Signature Xml Node within the response.");
        }
    
        [TestMethod]
        [Owner("rsnyder")]
        [Description("Test used to verify Avatar purchase within INT is working")]
        public void PDLCScenarios_IntegrationTests_Int2AvatarItem()
        {
            OfferContext offer;
            PurchaseClientRequest purchaseRequest;
            EnvironmentElement selectedEnvironment;
            PurchaseClientResponse purchaseResponse;

            // Rest of the information can be pulled from FAST query based off the OfferID that you could get via VerifyToken
            // http://marketplace.int2.xboxlive.com/MarketplaceCatalog/v1/product/en-US?tiers=2.3&hextitles=0x4D5307E6&producttypes=18&pagesize=1
            offer = new OfferContext();
            offer.OfferId = new Guid("00000000-0000-400c-80cf-00074d5307e6"); // entry/offerInstances/offerInstance[0]/offerId
            offer.PointsPricePoints = 0; // entry/offerInstances/offerInstance[0]/price
            offer.PointsPriceToken = 0; // entry/offerInstances/offerInstance[0]/price
            offer.ProductId = new Guid("00000000-0000-400c-80cf-00074d5307e6"); // entry/offerInstances/offerInstance[0]/productInstance/productId
            offer.AssetId = 0; // entry/offerInstances/offerInstance[0]/productInstance/assetId
            offer.GameContentTypeId = 18; // entry/productType
            offer.Title = "Halo 3 Cold Storage Map"; // entry/reducedTitle

            // Set your environement to INT
            selectedEnvironment = CurrentEnvironmentSettings.GetEnvironmentSettings("INT2");

            // Purchase the desired Durable
            purchaseRequest = new PurchaseClientRequest(selectedEnvironment, selectedEnvironment.UserSettings[0].UserEmail, selectedEnvironment.UserSettings[0].Password);

            purchaseRequest.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            purchaseRequest.RequestContent.StoreId = ((uint)MarketplaceStore.Xbox).ToString();

            // Set the title to be the same as what the item's title is
            purchaseRequest.Title = new TitleElement();
            purchaseRequest.Title.Version = "1";
            purchaseRequest.Title.Id = "1297287142";
            purchaseRequest.Title.ClientVersion = "1";
            purchaseRequest.Title.ConsoleType = ConsoleType.WindowsPhone;

            Assert.Fail("Can't get STS token for this title");

            purchaseResponse = purchaseRequest.MakeARequest();
            if (purchaseResponse.StatusCode == HttpStatusCode.BadRequest)
            {
                throw new Exception("This can happen if the user has already purchase this item. But since this is a consumable, it should not happen.");
            }

            Assert.AreEqual(HttpStatusCode.OK, purchaseResponse.StatusCode, "Status code should return OK");
            Assert.AreEqual(offer.OfferId, purchaseResponse.BodyWrapper.OfferId, "The OfferId should be the same one that I purchased.");

            GetAssetsClientResponse getAssetsClientResponse;
            GetAssetsClientRequest getAssetsClientrequest = new GetAssetsClientRequest(selectedEnvironment, selectedEnvironment.UserSettings[0].UserEmail, selectedEnvironment.UserSettings[0].Password);

            getAssetsClientrequest.Title = purchaseRequest.Title;

            getAssetsClientrequest.QueryParameters.TitleId = getAssetsClientrequest.Title.Id.ToString();
            getAssetsClientrequest.QueryParameters.SignAssets = "false";

            getAssetsClientResponse = getAssetsClientrequest.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, getAssetsClientResponse.StatusCode, "Status code should return OK");

            // Now get the receipt based off the previous transactionId
            GetReceiptsClientRequest requestGetReceipts;
            GetReceiptsClientResponse responseGetReceipts;

            // Purchase the desired Durable
            requestGetReceipts = new GetReceiptsClientRequest(selectedEnvironment, selectedEnvironment.UserSettings[0].UserEmail, selectedEnvironment.UserSettings[0].Password);
            requestGetReceipts.RequestContent.TransactionIds = new string[] { purchaseRequest.RequestContent.TransactionId };
            requestGetReceipts.RequestContent.SignReceipts = bool.FalseString.ToLower();

            responseGetReceipts = requestGetReceipts.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, responseGetReceipts.StatusCode, "Invalid status code was returned.");
            Assert.IsFalse(responseGetReceipts.Body.Contains("<Signature "), "Unsigned receipt should NOT have the Signature Xml Node within the response.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("If an unsigned GetReceipts request is sent for a user with an item purchase history, validate that an unsigned receipt is received")]
        public void PDLCScenarios_IntegrationTests_Int2GetReceiptsUnsigned()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            EnvironmentElement selectedEnvironment;

            // Set your environement to INT
            selectedEnvironment = CurrentEnvironmentSettings.GetEnvironmentSettings("INT2");

            // Purchase the desired Durable
            request = new GetReceiptsClientRequest(selectedEnvironment, selectedEnvironment.UserSettings[0].UserEmail, selectedEnvironment.UserSettings[0].Password);
            request.RequestContent.SignReceipts = bool.FalseString.ToLower();

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code was returned.");
            Assert.IsFalse(response.Body.Contains("<Signature "), "Unsigned receipt should NOT have the Signature Xml Node within the response.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("If an unsigned GetReceipts request is sent for a user with an item purchase history, validate that an unsigned receipt is received")]
        public void PDLCScenarios_IntegrationTests_Int2GetReceiptsSigned()
        {
            GetReceiptsClientRequest request;
            GetReceiptsClientResponse response;
            EnvironmentElement selectedEnvironment;

            // Set your environement to INT
            selectedEnvironment = CurrentEnvironmentSettings.GetEnvironmentSettings("INT2");

            // Purchase the desired Durable
            request = new GetReceiptsClientRequest(selectedEnvironment, selectedEnvironment.UserSettings[0].UserEmail, selectedEnvironment.UserSettings[0].Password);
            request.RequestContent.SignReceipts = bool.TrueString.ToLower();

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code was returned.");
            Assert.IsTrue(response.Body.Contains("<Signature "), "Signed receipt should have the Signature Xml Node within the response.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure that the basic GamerContext is working within PartNet")]
        public void PDLCScenarios_IntegrationTests_PartNetGamerContextTests()
        {
            GamerContextClientRequest request;
            GamerContextClientResponse response;
            EnvironmentElement selectedEnvironment;

            // Set your environement to PartnerNet
            selectedEnvironment = CurrentEnvironmentSettings.GetEnvironmentSettings("PartnerNet");

            request = new GamerContextClientRequest(selectedEnvironment, selectedEnvironment.UserSettings[0].UserEmail, selectedEnvironment.UserSettings[0].Password);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Response status code should have been OK");
            Assert.IsNotNull(response.BodyWrapper.LegalLocale, "Ensures response has at least one value set");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Test used to verify purchase within it is working")]
        public void PDLCScenarios_IntegrationTests_PartNetConsumablePurchase()
        {
            OfferContext offer;
            PurchaseClientRequest purchaseRequest;
            EnvironmentElement selectedEnvironment;
            PurchaseClientResponse purchaseResponse;

            // Rest of the information can be pulled from FAST query based off the OfferID that you could get via VerifyToken
            // http://marketplace.part.xboxlive.com/MarketplaceCatalog/v1/product/en-US?tiers=3&detailview=detailmobile&producttypes=60&stores=5&hextitles=0x4d53138a&orderdirection=2
            offer = new OfferContext();
            offer.GameContentTypeId = 60; // entry/productType
            offer.OfferId = new Guid("00000007-0000-4000-8000-00004d53138a"); // entry/offerInstances/offerInstance[0]/offerId
            offer.PointsPricePoints = 180; // entry/offerInstances/offerInstance[0]/price
            offer.PointsPriceToken = 180; // entry/offerInstances/offerInstance[0]/price
            offer.ProductId = new Guid("00bdf28d-ddd7-4ca1-9f17-68e240e74581"); // entry/offerInstances/offerInstance[0]/productInstance/productId
            offer.Title = "Fuel (5)"; // entry/reducedTitle
            offer.AssetId = 11223344; // entry/offerInstances/offerInstance[0]/productInstance/assetId

            // Set your environement to PartnerNet
            selectedEnvironment = CurrentEnvironmentSettings.GetEnvironmentSettings("PartnerNet");

            // Purchase the desired Durable
            purchaseRequest = new PurchaseClientRequest(selectedEnvironment, selectedEnvironment.UserSettings[0].UserEmail, selectedEnvironment.UserSettings[0].Password);
            purchaseRequest.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);

            // Set this title to Gamer Services Explorer
            purchaseRequest.Title = selectedEnvironment.Titles.Get("Hurl", ConsoleType.WindowsPhone);

            purchaseResponse = purchaseRequest.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, purchaseResponse.StatusCode, "Status code should return OK");
            Assert.AreEqual(offer.OfferId, purchaseResponse.BodyWrapper.OfferId, "The OfferId should be the same one that I purchased.");

            GetAssetsClientResponse getAssetsClientResponse;
            GetAssetsClientRequest getAssetsClientrequest = new GetAssetsClientRequest(selectedEnvironment, selectedEnvironment.UserSettings[0].UserEmail, selectedEnvironment.UserSettings[0].Password);

            // Set this title to Gamer Services Explorer
            getAssetsClientrequest.Title = selectedEnvironment.Titles.Get("Hurl", ConsoleType.WindowsPhone);

            getAssetsClientrequest.QueryParameters.TitleId = getAssetsClientrequest.Title.Id.ToString();
            getAssetsClientrequest.QueryParameters.SignAssets = "false";

            getAssetsClientResponse = getAssetsClientrequest.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, getAssetsClientResponse.StatusCode, "Status code should return OK");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Test used to verify purchase within it is working")]
        public void PDLCScenarios_IntegrationTests_PartNetDurablePurchase()
        {
            string email;
            string password;
            OfferContext offer;
            PurchaseClientRequest purchaseRequest;
            EnvironmentElement selectedEnvironment;
            PurchaseClientResponse purchaseResponse;

            // Purchasing second entry
            // http://marketplace.part.xboxlive.com/MarketplaceCatalog/v1/product/en-US?tiers=3&detailview=detailmobile&producttypes=59&stores=5&hextitles=0x4D53138A&orderdirection=2
            //offer = new OfferContext();
            //offer.GameContentTypeId = 59; // entry/productType
            //offer.OfferId = new Guid("00000003-0000-4000-8000-00004d53138a"); // entry/offerInstances/offerInstance[0]/offerId
            //offer.PointsPricePoints = 200; // entry/offerInstances/offerInstance[0]/price
            //offer.PointsPriceToken = 200; // entry/offerInstances/offerInstance[0]/price
            //offer.ProductId = new Guid("9f20da3d-dce4-4e06-a9c3-9234e9e3e21d"); // entry/offerInstances/offerInstance[0]/productInstance/productId
            //offer.Title = "Cave"; // entry/reducedTitle

            // Purchasing second entry
            // http://marketplace.part.xboxlive.com/MarketplaceCatalog/v1/product/en-US?tiers=3&detailview=detailmobile&producttypes=59&stores=5&hextitles=0x4D53138A&orderdirection=2
            offer = new OfferContext();
            offer.GameContentTypeId = 59; // entry/productType
            offer.OfferId = new Guid("00000005-0000-4000-8000-00004d53138a"); // entry/offerInstances/offerInstance[0]/offerId
            offer.PointsPricePoints = 0; // entry/offerInstances/offerInstance[0]/price
            offer.PointsPriceToken = 0; // entry/offerInstances/offerInstance[0]/price
            offer.ProductId = new Guid("4c9fd353-4f6e-491e-bed7-f9a102a6e11b"); // entry/offerInstances/offerInstance[0]/productInstance/productId
            offer.Title = "Forest"; // entry/reducedTitle

            // Purchasing third entry
            // http://marketplace.part.xboxlive.com/MarketplaceCatalog/v1/product/en-US?tiers=3&detailview=detailmobile&producttypes=59&stores=5&hextitles=0x4D53138A&orderdirection=2
            //offer = new OfferContext();
            //offer.GameContentTypeId = 59; // entry/productType
            //offer.OfferId = new Guid("00000002-0000-4000-8000-00004d53138a"); // entry/offerInstances/offerInstance[0]/offerId
            //offer.PointsPricePoints = 120; // entry/offerInstances/offerInstance[0]/price
            //offer.PointsPriceToken = 120; // entry/offerInstances/offerInstance[0]/price
            //offer.ProductId = new Guid("4398e857-4729-43ae-b0ab-cc117989978d"); // entry/offerInstances/offerInstance[0]/productInstance/productId
            //offer.Title = "Mountain"; // entry/reducedTitle

            // Set your environement
            selectedEnvironment = CurrentEnvironmentSettings.GetEnvironmentSettings("PartnerNet");

            email = selectedEnvironment.UserSettings[0].UserEmail;
            password = selectedEnvironment.UserSettings[0].Password;

            // Purchase the desired Durable
            purchaseRequest = new PurchaseClientRequest(selectedEnvironment, email, password);
            purchaseRequest.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);

            purchaseRequest.Title = selectedEnvironment.Titles.Get("Hurl", ConsoleType.WindowsPhone);

            purchaseResponse = purchaseRequest.MakeARequest();
            if (purchaseResponse.StatusCode == HttpStatusCode.BadRequest)
            {
                throw new Exception("This can happen if the user has already purchase this item.");
            }

            Assert.AreEqual(HttpStatusCode.OK, purchaseResponse.StatusCode, "Status code should return OK");
            Assert.AreEqual(offer.OfferId, purchaseResponse.BodyWrapper.OfferId, "The OfferId should be the same one that I purchased.");

            // Now get the receipt based off the previous transactionId
            GetReceiptsClientRequest requestGetReceipts;
            GetReceiptsClientResponse responseGetReceipts;

            // Purchase the desired Durable
            requestGetReceipts = new GetReceiptsClientRequest(selectedEnvironment, selectedEnvironment.UserSettings[0].UserEmail, selectedEnvironment.UserSettings[0].Password);
            // requestGetReceipts.RequestContent.TransactionIds = new string[] { purchaseRequest.RequestContent.TransactionId };
            requestGetReceipts.RequestContent.SignReceipts = bool.FalseString.ToLower();

            // Set this title to Hurl 1297290122
            requestGetReceipts.Title = selectedEnvironment.Titles.Get("Hurl", ConsoleType.WindowsPhone);
            requestGetReceipts.RequestContent.TitleId = requestGetReceipts.Title.Id;
            requestGetReceipts.RequestContent.PageSize = "1"; // Testing RFC for Marketplace team where they filter on page size at title level

            responseGetReceipts = requestGetReceipts.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, responseGetReceipts.StatusCode, "Invalid status code was returned.");
            Assert.IsFalse(responseGetReceipts.Body.Contains("<Signature "), "Unsigned receipt should NOT have the Signature Xml Node within the response.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Verify if caller passes in the title ID 0x4D5308EC (Xbox Live Extras) or  0x4D53139A (Mango Avatar Editor) gets replaced with 0x584D07D1(Console avatar marketplace's)")]
        public void PDLCScenarios_IntegrationTests_PartNetSwappingTitleId()
        {
            // OLD BUGs: 13167(QFE)
            string email;
            string password;
            OfferContext offer;
            PurchaseClientRequest purchaseRequest;
            PurchaseClientResponse purchaseResponse;
            EnvironmentElement selectedEnvironment;

            // Set your environement to INT
            selectedEnvironment = CurrentEnvironmentSettings.GetEnvironmentSettings("PartnerNet");

            email = "mpparttest@live-int.com";
            password = "password";

            // Purchasing this offer
            // http://marketplace.part.xboxlive.com/MarketplaceCatalog/v1/product/en-US?tiers=3&detailview=detailmobile&producttypes=47
            offer = new OfferContext();
            offer.OfferId = new Guid("011f001c-0000-4000-8000-00005858081c"); // entry/offerInstances/offerInstance[0]/offerId
            offer.PointsPricePoints = 0; // entry/offerInstances/offerInstance[0]/price
            offer.PointsPriceToken = 0; // entry/offerInstances/offerInstance[0]/price
            offer.ProductId = new Guid("00000008-4650-0261-cdb2-b3025858081c"); // entry/offerInstances/offerInstance[0]/productInstance/productId
            offer.AssetId = 0; // entry/offerInstances/offerInstance[0]/productInstance/assetId
            offer.GameContentTypeId = 47; // entry/productType
            offer.Title = "1GOAL T-shirt"; // entry/reducedTitle

            // Purchase the desired Durable
            purchaseRequest = new PurchaseClientRequest(selectedEnvironment, email, password);

            purchaseRequest.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            purchaseRequest.RequestContent.StoreId = ((uint)MarketplaceStore.Xbox).ToString();

            // Set the title to be 0x4D5308EC (Xbox Live Extras)
            purchaseRequest.Title = CurrentEnvironmentSettings.Titles.Get("LiveApp", ConsoleType.WindowsPhone);

            purchaseResponse = purchaseRequest.MakeARequest();
            if (purchaseResponse.StatusCode != HttpStatusCode.BadRequest)
            {
                Assert.AreEqual(HttpStatusCode.OK, purchaseResponse.StatusCode, "Status code should return OK");
                Assert.AreEqual(offer.OfferId, purchaseResponse.BodyWrapper.OfferId, "The OfferId should be the same one that I purchased.");
            }
            else
            {
                // The item was already purchase by this user. Nothing to verify passed response status code.
            }

            // Now get the receipt based off the previous transactionId
            GetReceiptsClientRequest requestGetReceipts;
            GetReceiptsClientResponse responseGetReceipts;

            // Purchase the desired Durable
            requestGetReceipts = new GetReceiptsClientRequest(selectedEnvironment, email, password);
            requestGetReceipts.RequestContent.SignReceipts = bool.FalseString.ToLower();


            // Test 0x4D5308EC (Xbox Live Extras)
            requestGetReceipts.Title = purchaseRequest.Title;
            requestGetReceipts.RequestContent.TitleId = requestGetReceipts.Title.Id;
            requestGetReceipts.RequestContent.StoreId = purchaseRequest.RequestContent.StoreId;
            requestGetReceipts.RequestContent.MediaTypeId = purchaseRequest.RequestContent.MediaTypeId;

            responseGetReceipts = requestGetReceipts.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, responseGetReceipts.StatusCode, "Invalid status code was returned.");
            Assert.IsFalse(responseGetReceipts.Body.Contains("<Signature "), "Unsigned receipt should NOT have the Signature Xml Node within the response.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Integration with BioShock2. Trying to repro RFC for pagesize=1 causes a truncation based off title and not TransactionID")]
        public void PDLCScenarios_IntegrationTests_BioShock2MultiTitlePurchaseTest()
        {
            OfferContext offer;
            PurchaseClientRequest purchaseRequest;
            EnvironmentElement selectedEnvironment;
            PurchaseClientResponse purchaseResponse;
            UserAccount user = new UserAccount(XblLiveUserTier.Gold);

            user.AddPoints();
            
            // Rest of the information can be pulled from FAST query based off the OfferID that you could get via VerifyToken
            // http://le-xblob-test02:12030/marketplacecatalog/v1/product/en-us?tiers=2&producttypes=23
            offer = new OfferContext();
            offer.OfferId = new Guid("000000b6-0000-4000-8000-0000fffe07d1"); // entry/offerInstances/offerInstance[0]/offerId
            offer.PointsPricePoints = 0; // entry/offerInstances/offerInstance[0]/price
            offer.PointsPriceToken = 0; // entry/offerInstances/offerInstance[0]/price
            offer.ProductId = new Guid("66acd000-77fe-1000-9115-d802fffe07d1"); // entry/offerInstances/offerInstance[0]/productInstance/productId
            offer.AssetId = 0; // entry/offerInstances/offerInstance[0]/productInstance/assetId
            offer.GameContentTypeId = 23; // entry/productType
            offer.Title = "Xbox 360 Dashboard"; // entry/reducedTitle

            // Set your environement
            selectedEnvironment = CurrentEnvironmentSettings.GetEnvironmentSettings("bioshock2");

            // Purchase the desired Durable
            purchaseRequest = new PurchaseClientRequest(selectedEnvironment, user.Email, user.Password);

            purchaseRequest.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            purchaseRequest.RequestContent.StoreId = ((uint)MarketplaceStore.Xbox).ToString();

            purchaseResponse = purchaseRequest.MakeARequest();
            if (purchaseResponse.StatusCode == HttpStatusCode.BadRequest)
            {
                throw new Exception("This can happen if the user has already purchase this item. But since this is a consumable, it should not happen.");
            }

            Assert.AreEqual(HttpStatusCode.OK, purchaseResponse.StatusCode, "Status code should return OK");
            Assert.AreEqual(offer.OfferId, purchaseResponse.BodyWrapper.OfferId, "The OfferId should be the same one that I purchased.");


            // Rest of the information can be pulled from FAST query based off the OfferID that you could get via VerifyToken
            // http://le-xblob-test02:12030/marketplacecatalog/v1/product/en-us?tiers=2&producttypes=18
            offer = new OfferContext();
            offer.OfferId = new Guid("000000b1-0000-4000-8000-0000fffe07d1"); // entry/offerInstances/offerInstance[0]/offerId
            offer.PointsPricePoints = 0; // entry/offerInstances/offerInstance[0]/price
            offer.PointsPriceToken = 0; // entry/offerInstances/offerInstance[0]/price
            offer.ProductId = new Guid("00000000-0000-4000-8000-00b1fffe07d1"); // entry/offerInstances/offerInstance[0]/productInstance/productId
            offer.AssetId = 0; // entry/offerInstances/offerInstance[0]/productInstance/assetId
            offer.GameContentTypeId = 18; // entry/productType
            offer.Title = "Download BVT In-game"; // entry/reducedTitle

            // Set your environement
            selectedEnvironment = CurrentEnvironmentSettings.GetEnvironmentSettings("bioshock2");

            // Purchase the desired Durable
            purchaseRequest = new PurchaseClientRequest(selectedEnvironment, user.Email, user.Password);

            purchaseRequest.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            purchaseRequest.RequestContent.StoreId = ((uint)MarketplaceStore.Xbox).ToString();

            purchaseResponse = purchaseRequest.MakeARequest();
            if (purchaseResponse.StatusCode == HttpStatusCode.BadRequest)
            {
                throw new Exception("This can happen if the user has already purchase this item. But since this is a consumable, it should not happen.");
            }

            Assert.AreEqual(HttpStatusCode.OK, purchaseResponse.StatusCode, "Status code should return OK");
            Assert.AreEqual(offer.OfferId, purchaseResponse.BodyWrapper.OfferId, "The OfferId should be the same one that I purchased.");

            // Now get the receipt based off the previous transactionId
            GetReceiptsClientRequest requestGetReceipts;
            GetReceiptsClientResponse responseGetReceipts;

            // Purchase the desired Durable
            requestGetReceipts = new GetReceiptsClientRequest(selectedEnvironment, user.Email, user.Password);
            requestGetReceipts.RequestContent.TransactionIds = new string[] { purchaseRequest.RequestContent.TransactionId };
            requestGetReceipts.RequestContent.SignReceipts = bool.FalseString.ToLower();
            requestGetReceipts.RequestContent.TitleId = "-129071";
            requestGetReceipts.RequestContent.StoreId = ((uint)MarketplaceStore.Xbox).ToString();
            requestGetReceipts.RequestContent.MediaTypeId = "23";

            responseGetReceipts = requestGetReceipts.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, responseGetReceipts.StatusCode, "Invalid status code was returned.");
            Assert.IsFalse(responseGetReceipts.Body.Contains("<Signature "), "Unsigned receipt should NOT have the Signature Xml Node within the response.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Test used to verify Avatar purchase within INT is working")]
        public void PDLCScenarios_IntegrationTests_ProductionAvatarItem()
        {
            string email;
            string password;
            OfferContext offer;
            PurchaseClientRequest purchaseRequest;
            EnvironmentElement selectedEnvironment;
            PurchaseClientResponse purchaseResponse;

            // Rest of the information can be pulled from FAST query based off the OfferID that you could get via VerifyToken
            //http://marketplace-origin.xboxlive.com/MarketplaceCatalog/v1/product/en-US?tiers=2.3&producttypes=47&PageNum=18
            offer = new OfferContext();
            offer.OfferId = new Guid("f000006f-0000-4000-8000-00004d53085b"); // entry/offerInstances/offerInstance[0]/offerId
            offer.PointsPricePoints = 240; // entry/offerInstances/offerInstance[0]/price
            offer.PointsPriceToken = 240; // entry/offerInstances/offerInstance[0]/price
            offer.ProductId = new Guid("00001000-4245-22e3-c776-57d24d53085b"); // entry/offerInstances/offerInstance[0]/productInstance/productId
            offer.AssetId = 0; // entry/offerInstances/offerInstance[0]/productInstance/assetId
            offer.GameContentTypeId = 47; // entry/productType
            offer.Title = "Halo Scarab"; // entry/reducedTitle

            // Set your environement to 
            selectedEnvironment = CurrentEnvironmentSettings.GetEnvironmentSettings("Production");

            email = selectedEnvironment.UserSettings[0].UserEmail;
            password = selectedEnvironment.UserSettings[0].Password;

            // Purchase the desired Durable
            purchaseRequest = new PurchaseClientRequest(selectedEnvironment, email, password);

            purchaseRequest.RequestContent.CreatePurchaseRequest(offer, PurchasePaymentType.Points);
            purchaseRequest.RequestContent.StoreId = ((uint)MarketplaceStore.Xbox).ToString();

            // Set the title to be 0x4D5308EC (Xbox Live Extras)
            purchaseRequest.Title = CurrentEnvironmentSettings.Titles.Get("LiveApp", ConsoleType.WindowsPhone);

            purchaseResponse = purchaseRequest.MakeARequest();
            if (purchaseResponse.StatusCode == HttpStatusCode.BadRequest)
            {
                throw new Exception("This can happen if the user has already purchase this item. But since this is a consumable, it should not happen.");
            }

            Assert.AreEqual(HttpStatusCode.OK, purchaseResponse.StatusCode, "Status code should return OK");
            Assert.AreEqual(offer.OfferId, purchaseResponse.BodyWrapper.OfferId, "The OfferId should be the same one that I purchased.");

            // Now get the receipt based off the previous transactionId
            GetReceiptsClientRequest requestGetReceipts;
            GetReceiptsClientResponse responseGetReceipts;

            // Purchase the desired Durable
            requestGetReceipts = new GetReceiptsClientRequest(selectedEnvironment, email, password);

            requestGetReceipts.Title = purchaseRequest.Title;

            requestGetReceipts.RequestContent.TransactionIds = new string[] { purchaseRequest.RequestContent.TransactionId };
            requestGetReceipts.RequestContent.SignReceipts = bool.FalseString.ToLower();
            requestGetReceipts.RequestContent.TitleId = purchaseRequest.Title.Id;
            requestGetReceipts.RequestContent.StoreId = ((uint)MarketplaceStore.Xbox).ToString();
            requestGetReceipts.RequestContent.MediaTypeId = "47";

            responseGetReceipts = requestGetReceipts.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, responseGetReceipts.StatusCode, "Invalid status code was returned.");
            Assert.IsFalse(responseGetReceipts.Body.Contains("<Signature "), "Unsigned receipt should NOT have the Signature Xml Node within the response.");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\PDLC.Test\PDLC.Tests.VerifyToken\VerifyTokenTests_Manual.cs ===
﻿using System;
using System.Net;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using live.common;

using LiveN.Test;
using LiveN.Test.Content;
using LiveN.Test.Users;

namespace PDLC.Tests
{
    /// <summary>
    /// InvalidRequests contains tests to ensure an invalid request is handled appropriately
    /// </summary>
    public partial class VerifyTokenTests
    {
        [TestMethod]
        [Owner("rsnyder")]
        [Description("Single use Token that has already been redeemed.")]
        public void VerifyTokenTests_Manual_SingleUseToken()
        {
            // OLD BUGs: 12283

            //Last time this test was Manually verified:
            // -Verified on 2/23/2011

            // Steps:
            // 1. Execute: PurchaseTests_Manual_AlreadyUsedToken()
            // 2. Below should then pass

            VerifyTokenClientRequest request;
            VerifyTokenClientResponse response;
            OfferContext offer = PDLCTestCommon.Offer_SingleUse();
            
            request = new VerifyTokenClientRequest(StaticUserEmail, StaticUserPassword);

            request.QueryParameters.StoreId = ((uint)MarketplaceStore.Mobile).ToString();
            request.QueryParameters.BillingToken = offer.BillingToken;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "StatusCode in not correct");
            Assert.AreEqual(ServiceErrorBucket.TokenNotRedeemable.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(XOnline_HResults.XONLINE_E_ACCOUNTS_VOUCHER_ALREADY_USED, response.ServiceErrorMessageWrapper.ErrorCode, "Response LiveN error code invalid.");
            Assert.AreEqual("Token invalid, used, expired or not avaible at this time or region.", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\PDLC.Test\PDLC.Tests.VerifyToken\VerifyTokenTests_InvalidRequests.cs ===
﻿using System;
using System.Net;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using live.common;

using LiveN.Test;
using LiveN.Test.Content;
using LiveN.Test.Users;

namespace PDLC.Tests
{
    /// <summary>
    /// InvalidRequests contains tests to ensure an invalid request is handled appropriately
    /// </summary>
    public partial class VerifyTokenTests
    {
        [TestMethod]
        [Owner("rsnyder")]
        [Description("Request a token that is not for your user locale")]
        public void VerifyTokenTests_InvalidRequests_TokenForDifferentLocale()
        {
            // OLD BUGs: 11703
            UserAccount user;
            VerifyTokenClientRequest request;
            VerifyTokenClientResponse response;
            AccountUserSettings userSettings = new AccountUserSettings();
            OfferContext offer = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);

            // Set the country to be outside the US
            userSettings.countryId = CountryId.CA;
            userSettings.languageId = LanguageId.fr;
            user = new UserAccount(userSettings);

            request = new VerifyTokenClientRequest(user.Email, user.Password);

            request.QueryParameters.StoreId = ((uint)MarketplaceStore.Mobile).ToString();
            request.QueryParameters.BillingToken = offer.BillingToken;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "StatusCode in not correct");
            Assert.AreEqual(ServiceErrorBucket.OfferNotPurchasable.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(XOnline_HResults.XOFF_E_INVALID_OFFER_ID, response.ServiceErrorMessageWrapper.ErrorCode, "Response LiveN error code invalid.");
            Assert.AreEqual("Token invalid, used, expired or not avaible at this time or region.", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending in a POST when a GET is expected")]
        public void VerifyTokenTests_InvalidRequests_POST()
        {
            VerifyTokenClientRequest request;
            VerifyTokenClientResponse response;

            request = GenerateDefaultVerifyTokenRequest();

            request.Method = HttpMethods.POST;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.MethodNotAllowed, response.StatusCode, "StatusCode in not correct");
            Assert.IsFalse(response.IsServiceErrorMessage, "In this cases, calls does not make it to our code. Thus no ServiceErrorMessage can be returned.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending up request without partner token")]
        public void VerifyTokenTests_InvalidRequests_AuthToken_MissingHeader()
        {
            VerifyTokenClientRequest request;
            VerifyTokenClientResponse response;

            request = GenerateDefaultVerifyTokenRequest();

            request.SetAuthenticationToken = false;
            request.Headers.PartnerAuthorization = null;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode, "StatusCode in not correct");
            Assert.IsFalse(response.IsServiceErrorMessage, "In this cases, calls does not make it to our code. Thus no ServiceErrorMessage can be returned.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending purchase request using a valid Auduince uri but not for purchase. Purchase requires short lived purchase uri.")]
        public void VerifyTokenTests_InvalidRequests_AuthToken_WrongAudienceUri()
        {
            VerifyTokenClientRequest request;
            VerifyTokenClientResponse response;

            request = GenerateDefaultVerifyTokenRequest();

            // Get a partner token for the wrong audience Uri. As this is a purchase, uri should be the short lived purchase uri only
            request.SetAuthenticationToken = false;
            request.Headers.PartnerAuthorization = PDLCServicesCommon.AUTH_PREFIX + request.Auth.GetPartnerToken(request.UserEmail, request.Password, request.Title, "http://xboxlive.com/avatar");

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode, "Invalid status code");
            Assert.IsFalse(response.IsServiceErrorMessage, "In this cases, calls does not make it to our code. Thus no ServiceErrorMessage can be returned.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending up request with invalid PlatformType within the header")]
        public void VerifyTokenTests_InvalidRequests_PaltformType_Invalid()
        {
            VerifyTokenClientRequest request;
            VerifyTokenClientResponse response;

            request = GenerateDefaultVerifyTokenRequest();

            request.Headers.PlatformType = "Invalid_PlatformType";

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "StatusCode in not correct");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Response LiveN error code invalid.");
            Assert.AreEqual("X-Platform-Type header is limited to  Mobile", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending up request with invalid PlatformType within the header")]
        public void VerifyTokenTests_InvalidRequests_PaltformType_EmptyHeader()
        {
            VerifyTokenClientRequest request;
            VerifyTokenClientResponse response;

            request = GenerateDefaultVerifyTokenRequest();

            request.Headers.PlatformType = string.Empty;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "StatusCode in not correct");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Response LiveN error code invalid.");
            Assert.AreEqual("X-Platform-Type header is missing or empty", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending up request with invalid PlatformType within the header")]
        public void VerifyTokenTests_InvalidRequests_PaltformType_MissingHeader()
        {
            VerifyTokenClientRequest request;
            VerifyTokenClientResponse response;

            request = GenerateDefaultVerifyTokenRequest();

            request.Headers.PlatformType = null;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "StatusCode in not correct");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Response LiveN error code invalid.");
            Assert.AreEqual("X-Platform-Type header is missing or empty", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending valid store Id but it's not a supported StoreId with LiveN PDLC. Currently we only support StoreId=Mobile==5")]
        public void VerifyTokenTests_InvalidRequests_StoreId_ValidButNotSupported()
        {
            VerifyTokenClientRequest request;
            VerifyTokenClientResponse response;

            request = GenerateDefaultVerifyTokenRequest();


            request.QueryParameters.StoreId = "0";
            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Invalid status code");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Backend Error Code has changed");
            Assert.AreEqual("The store id is not supported:0", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
            

            request.QueryParameters.StoreId = "6";
            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Invalid status code");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Backend Error Code has changed");
            Assert.AreEqual("The store id is not supported:6", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending empty StoreId")]
        public void VerifyTokenTests_InvalidRequests_StoreId_Empty()
        {
            // OLD BUGs: 11518
            VerifyTokenClientRequest request;
            VerifyTokenClientResponse response;

            request = GenerateDefaultVerifyTokenRequest();

            request.QueryParameters.StoreId = string.Empty;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "Invalid status code");
            Assert.IsFalse(response.IsServiceErrorMessage, "In this cases, calls does not make it to our code. Thus no ServiceErrorMessage can be returned.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Not sending StoreId")]
        public void VerifyTokenTests_InvalidRequests_StoreId_NotSent()
        {
            // OLD BUGs: 11518
            VerifyTokenClientRequest request;
            VerifyTokenClientResponse response;

            request = GenerateDefaultVerifyTokenRequest();

            request.QueryParameters.StoreId = "Invalid number";

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "Invalid status code");
            Assert.IsFalse(response.IsServiceErrorMessage, "In this cases, calls does not make it to our code. Thus no ServiceErrorMessage can be returned.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending invalid StoreId")]
        public void VerifyTokenTests_InvalidRequests_StoreId_Invalid()
        {
            // OLD BUGs: 11518
            VerifyTokenClientRequest request;
            VerifyTokenClientResponse response;

            request = GenerateDefaultVerifyTokenRequest();

            request.QueryParameters.StoreId = "Invalid number";

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "Invalid status code");
            Assert.IsFalse(response.IsServiceErrorMessage, "In this cases, calls does not make it to our code. Thus no ServiceErrorMessage can be returned.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending Negitive number smaller then INT can contain for StoreId")]
        public void VerifyTokenTests_InvalidRequests_StoreId_ToSmallNegitive()
        {
            // OLD BUGs: 11518
            VerifyTokenClientRequest request;
            VerifyTokenClientResponse response;

            request = GenerateDefaultVerifyTokenRequest();

            request.QueryParameters.StoreId = "-1";

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "Invalid status code");
            Assert.IsFalse(response.IsServiceErrorMessage, "In this cases, calls does not make it to our code. Thus no ServiceErrorMessage can be returned.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending Positive number larger then INT can contain for StoreId")]
        public void VerifyTokenTests_InvalidRequests_StoreId_ToLargePositive()
        {
            // OLD BUGs: 11518
            VerifyTokenClientRequest request;
            VerifyTokenClientResponse response;

            request = GenerateDefaultVerifyTokenRequest();

            request.QueryParameters.StoreId = "4294967296"; // uint.MaxValue + 1

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "Invalid status code");
            Assert.IsFalse(response.IsServiceErrorMessage, "In this cases, calls does not make it to our code. Thus no ServiceErrorMessage can be returned.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("VerifyToken for a none existing Token")]
        public void VerifyTokenTests_InvalidRequests_BillingToken_NonExistingToken()
        {
            VerifyTokenClientRequest request;
            VerifyTokenClientResponse response;

            request = GenerateDefaultVerifyTokenRequest();

            request.QueryParameters.BillingToken = "99999999-0000-0000-0000-000000000000";

            response = request.MakeARequest();
            
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "StatusCode in not correct");
            Assert.AreEqual(ServiceErrorBucket.TokenNotRedeemable.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(XOnline_HResults.XONLINE_E_ACCOUNTS_INVALID_VOUCHER, response.ServiceErrorMessageWrapper.ErrorCode, "Response LiveN error code invalid.");
            Assert.AreEqual("Token invalid, used, expired or not avaible at this time or region.", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Invalid string for offer")]
        public void VerifyTokenTests_InvalidRequests_BillingToken_Invalid()
        {
            VerifyTokenClientRequest request;
            VerifyTokenClientResponse response;

            request = GenerateDefaultVerifyTokenRequest();

            request.QueryParameters.BillingToken = "Invalid String";

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "StatusCode in not correct");
            Assert.AreEqual(ServiceErrorBucket.TokenNotRedeemable.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(XOnline_HResults.XONLINE_E_ACCOUNTS_INVALID_VOUCHER, response.ServiceErrorMessageWrapper.ErrorCode, "Response LiveN error code invalid.");
            Assert.AreEqual("Token invalid, used, expired or not avaible at this time or region.", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Empty string for offer")]
        public void VerifyTokenTests_InvalidRequests_BillingToken_EmptyString()
        {
            VerifyTokenClientRequest request;
            VerifyTokenClientResponse response;

            request = GenerateDefaultVerifyTokenRequest();

            request.QueryParameters.BillingToken = string.Empty;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "StatusCode in not correct");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Response LiveN error code invalid.");
            Assert.AreEqual("billingToken is null or empty.", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Not passing BillingToken")]
        public void VerifyTokenTests_InvalidRequests_BillingToken_NotPassed()
        {
            VerifyTokenClientRequest request;
            VerifyTokenClientResponse response;

            request = GenerateDefaultVerifyTokenRequest();

            request.QueryParameters.BillingToken = "";

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "StatusCode in not correct");
            Assert.AreEqual(ServiceErrorBucket.InputArguments.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(PdlcErrors.PDLC_E_INVALID_PARAMETER, response.ServiceErrorMessageWrapper.ErrorCode, "Response LiveN error code invalid.");
            Assert.AreEqual("billingToken is null or empty.", response.ServiceErrorMessageWrapper.ErrorMessage, "ErrorMessage has changed");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\PDLC.Test\PDLC.Tests.VerifyToken\VerifyTokenTests_VerifyResponses.cs ===
﻿using System;
using System.Net;
using System.Diagnostics;
using System.Collections.ObjectModel;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using LiveN.Test;
using LiveN.Test.Content;
using LiveN.Test.Users;

namespace PDLC.Tests
{
    /// <summary>
    /// VerifyResponses contains test to verify that the response match the expected.
    /// </summary>
    public partial class VerifyTokenTests
    {
        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure caching is set to none by default")]
        public void VerifyTokenTests_VerifyReponses_Header_CacheControl()
        {
            VerifyTokenClientRequest request;
            VerifyTokenClientResponse response;

            request = GenerateDefaultVerifyTokenRequest();

            response = request.MakeARequest();

            Assert.AreEqual("no-cache", response.Headers.CacheControl, "Cache should be set to not cache so the clients don't run into any cachin issues.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Verify if a Token has been marked as Deleted, that we trap that unexpecting error and return with PDLC_E_UNSPECIFIED_ERROR.")]
        public void VerifyTokenTests_VerifyReponses_DeletedToken()
        {
            // OLD BUGs: 12264
            VerifyTokenClientRequest request;
            VerifyTokenClientResponse response;
            Collection<EventLogEntry> events;
            OfferContext offer = MobileGameContentOffers61.GetContentOffer_Visibility_Deleted_61000505().GetOfferContext(Locales.en_US);

            request = new VerifyTokenClientRequest(StaticUserEmail, StaticUserPassword);

            request.QueryParameters.StoreId = ((uint)MarketplaceStore.Mobile).ToString();
            request.QueryParameters.BillingToken = offer.BillingToken;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.InternalServerError, response.StatusCode, "Invalid status code");
            Assert.AreEqual(ServiceErrorBucket.TryAgainLater.ToString(), response.ServiceErrorMessageWrapper.Bucket, "Bucket has changed");
            Assert.AreEqual(PdlcErrors.PDLC_E_UNSPECIFIED_ERROR, response.ServiceErrorMessageWrapper.ErrorCode, "Backend ErrorCode has changed");

            // Now ensure an event is also logged accordingly.
            events = myEvents.GetAllEvents();
            if (events.Count == 0)
            {
                // TODO Need to implement getting events off another box
                // This is probable running on a different box. Don't worry about the event in this case.
                return;
            }

            Assert.AreEqual(1, events.Count, "There should only be one event logged becuase of this.");
            Assert.AreEqual(1100, events[0].InstanceId, "EventID changed.");
            Assert.AreEqual(EventLogEntryType.Error, events[0].EntryType, "EntryType changed.");
            Assert.IsTrue(events[0].Message.Contains("Pdlc Unknown Error\r\nxonline.common.webplatform.livecache.LivecacheResponseException: LIVE Service front door returned an error, HResult=0x80153024\nCalling LIVE service front door: Billing_Offering\nfor API: VerifyToken\n\nRequest: XeVerifyTokenRequest"), "Error Message changed.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure response matches expected for MobilePDLC")]
        public void VerifyTokenTests_VerifyReponses_EmsOfferMobilePDLC()
        {
            // OLD BUGs: 11839
            VerifyTokenClientRequest request;
            VerifyTokenClientResponse response;
            OfferContext offer = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);

            request = new VerifyTokenClientRequest(StaticUserEmail, StaticUserPassword);

            request.QueryParameters.StoreId = ((uint)MarketplaceStore.Mobile).ToString();
            request.QueryParameters.BillingToken = offer.BillingToken;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "StatusCode in not correct");
            Assert.AreEqual((int)MediaType.MobilePDLC, response.BodyWrapper.EmsOffer.MediaType, "MediaType is not correct according to propped offer.");
            Assert.AreEqual(offer.OfferId, response.BodyWrapper.EmsOffer.OfferId, "OfferId is different.");

            // These mappings are based off there ingestion values. They have been confirmed via an email sent to the PDLC Team
            Assert.AreEqual(offer.ProductId, response.BodyWrapper.EmsOffer.MediaId, "MediaId is different.");
            Assert.AreEqual(offer.GameContentTypeId, response.BodyWrapper.EmsOffer.MediaType, "MediaType is different.");

            Assert.IsTrue(response.BodyWrapper.isNullXboxOffer, "As this is an EmsOffer, XboxOffer should not be returned.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure response matches expected for Points bundle.")]
        public void VerifyTokenTests_VerifyReponses_XboxOfferPoints()
        {
            // OLD BUGs: 11839
            int PrepaidPointsOfferTypeId = 8; // Confirmed from email sent to the PDLC team
            ulong Prepaid4000TokenOfferId = 0xFFFE07D10FF00029; // Taken from email from Jina
            string Prepaid4000TokenString = "RPQQJ-KWXGM-JV8KV-Q8RVX-VQCD3"; // Taken from email from Jina

            VerifyTokenClientRequest request;
            VerifyTokenClientResponse response;
            OfferContext offer = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);

            request = new VerifyTokenClientRequest(StaticUserEmail, StaticUserPassword);

            request.QueryParameters.StoreId = ((uint)MarketplaceStore.Mobile).ToString();
            request.QueryParameters.BillingToken = Prepaid4000TokenString;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "StatusCode in not correct");
            Assert.AreEqual(Prepaid4000TokenOfferId, response.BodyWrapper.XboxOffer.OfferId, "OfferId is not correct");
            Assert.AreEqual(PrepaidPointsOfferTypeId, response.BodyWrapper.XboxOffer.OfferTypeId, "OfferId is not correct");
            Assert.IsTrue(response.BodyWrapper.isNullEmsOffer, "As this is an XboxOffer, EmsOffer should not be returned.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Ensure response matches expected for 1 Month Gold Subscription. This is a TokenOffer.XboxOffer. All others are EmsOffer.")]
        public void VerifyTokenTests_VerifyReponses_XboxOfferGoldSubscription()
        {
            // OLD BUGs: 11839
            int PrepaidSubscriptionOfferTypeId = 1; // Confirmed from email sent to the PDLC team
            ulong Prepaid1MonthGoldTokenOfferId = 0xFFFE07d180000018; // Taken from email from Jina
            string Prepaid1MonthGoldTokenString = "CRYCP-BM9W4-KH3B6-6MRQT-HHGBF"; // Taken from email from Jina
              
            VerifyTokenClientRequest request;
            VerifyTokenClientResponse response;
            OfferContext offer = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);

            request = new VerifyTokenClientRequest(StaticUserEmail, StaticUserPassword);

            request.QueryParameters.StoreId = ((uint)MarketplaceStore.Mobile).ToString();
            request.QueryParameters.BillingToken = Prepaid1MonthGoldTokenString;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "StatusCode in not correct");
            Assert.AreEqual(Prepaid1MonthGoldTokenOfferId, response.BodyWrapper.XboxOffer.OfferId, "OfferId is not correct");
            Assert.AreEqual(PrepaidSubscriptionOfferTypeId, response.BodyWrapper.XboxOffer.OfferTypeId, "OfferId is not correct");
            Assert.IsTrue(response.BodyWrapper.isNullEmsOffer, "As this is an XboxOffer, EmsOffer should not be returned.");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\PDLC.Test\PDLC.Tests.VerifyToken\VerifyTokenTests_ValidRequests.cs ===
﻿using System;
using System.Net;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using LiveNew.Test;

using LiveN.Test;
using LiveN.Test.Content;
using LiveN.Test.Users;

namespace PDLC.Tests
{
    /// <summary>
    /// ValidRequests contains all the test cases where the request are valid are suppose to work.
    /// Tests within the valid input range to ensure they are working as expected.
    /// </summary>
    public partial class VerifyTokenTests
    {
        [TestMethod]
        [Owner("rsnyder")]
        [Description("VerifyToken for a Non Mobile item")]
        public void VerifyTokenTests_ValidRequests_NonMobileToken()
        {
            VerifyTokenClientRequest request;
            VerifyTokenClientResponse response;
            OfferContext offer = MobileGameContentOffers61.GetContentOffer_Stores_NotMobile_61000602().GetOfferContext(Locales.en_US);

            request = new VerifyTokenClientRequest(StaticUserEmail, StaticUserPassword);

            request.QueryParameters.StoreId = ((uint)MarketplaceStore.Mobile).ToString();
            request.QueryParameters.BillingToken = offer.BillingToken;

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "StatusCode in not correct");
            ValidateEmsOfferVerifyTokenResponseAgainstOffer(response, offer);
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Valid request and Token. But Token does not contain '-' within the guid.")]
        public void VerifyTokenTests_ValidRequests_ValidTokenWithoutDashes()
        {
            VerifyTokenClientRequest request;
            VerifyTokenClientResponse response;
            OfferContext offer = MobileGameContentOffers61.GetContentOffer_enUS(1).GetOfferContext(Locales.en_US);

            request = new VerifyTokenClientRequest(StaticUserEmail, StaticUserPassword);

            request.QueryParameters.StoreId = ((uint)MarketplaceStore.Mobile).ToString();
            request.QueryParameters.BillingToken = offer.BillingToken.Replace("-", string.Empty);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            ValidateEmsOfferVerifyTokenResponseAgainstOffer(response, offer);
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Request a token that is not for the title the user is logged in as.")]
        public void VerifyTokenTests_ValidRequests_TokenForDifferentTitle()
        {
            // OLD BUGs: 11660
            TitleElement title;
            VerifyTokenClientRequest request;
            VerifyTokenClientResponse response;

            request = GenerateDefaultVerifyTokenRequest();

            // Get a valid title id that is not the one used for the default offer 
            title = CurrentEnvironmentSettings.Titles[2];
            if (title.Id == request.Title.Id)
            {
                throw new Exception("Title Ids need to be different in order for this test to be valid.");
            }

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "StatusCode in not correct");
            Assert.IsTrue(response.BodyWrapper.EmsOffer.MediaType > 0, "MediaType should be a value great then the default zero value indicating it's been set by the response.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending valid store Ids")]
        public void VerifyTokenTests_ValidRequests_StoreIds()
        {
            //OLD BUGs: 11661
            VerifyTokenClientRequest request;
            VerifyTokenClientResponse response;

            request = GenerateDefaultVerifyTokenRequest();

            //-- StoreId = Store.Mobile
            request.QueryParameters.StoreId = ((uint)MarketplaceStore.Mobile).ToString();
            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            Assert.IsTrue(response.BodyWrapper.EmsOffer.MediaType > 0, "Ensuring that at least one item got set: MediaType should be a value great then the default zero value indicating it's been set by the response.");

            //-- StoreId = Store.Xbox
            request = GenerateDefaultVerifyTokenRequest();

            request.QueryParameters.StoreId = ((uint)MarketplaceStore.Xbox).ToString();
            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Invalid status code");
            Assert.IsTrue(response.BodyWrapper.EmsOffer.MediaType > 0, "Ensuring that at least one item got set: MediaType should be a value great then the default zero value indicating it's been set by the response.");
        }

        [TestMethod]
        [Owner("rsnyder")]
        [Description("Sending auth using the long lived Audience uri when the short lived purchase is required")]
        public void VerifyTokenTests_ValidRequests_AuthToken_LongLivePDLCAudienceUri()
        {
            // OLD BUGs: 11517
            VerifyTokenClientRequest request;
            VerifyTokenClientResponse response;

            request = GenerateDefaultVerifyTokenRequest();

            // Get a partner token for the wrong audience Uri. As this NOT the purchase API, uri should be the long lived purchase uri. But short lived is also allowed becuase of bug 11517
            request.SetAuthenticationToken = false;
            request.Headers.PartnerAuthorization = PDLCServicesCommon.AUTH_PREFIX + request.Auth.GetPartnerToken(request.UserEmail, request.Password, request.Title, PDLCServicesCommon.AUDIENCE_URI_HBI);

            response = request.MakeARequest();

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "StatusCode in not correct");
            Assert.IsTrue(response.BodyWrapper.EmsOffer.MediaType > 0, "Ensuring that at least one item got set: MediaType should be a value great then the default zero value indicating it's been set by the response.");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards\Rewards.Contracts\Achievement.cs ===
﻿
namespace Rewards.Contracts
{
    using System;
    using System.Runtime.Serialization;

    [DataContract(Name = "Achievement", Namespace = "")]
    public class Achievement
    {
        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "GameId", Order = 0)]
        public uint GameId { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "Description", Order = 1)]
        public string Description { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "DisplayBeforeEarned", Order = 2)]
        public bool DisplayBeforeEarned { get; set; }

        [DataMember(EmitDefaultValue = false, IsRequired = false, Name = "EarnedDateTime", Order = 3)]
        public DateTime EarnedDateTime { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "EarnedOnline", Order = 4)]
        public bool EarnedOnline { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "GameName", Order = 5)]
        public string GameName { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "Gamerscore", Order = 6)]
        public int Gamerscore { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "HowToEarn", Order = 7)]
        public string HowToEarn { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "IsEarned", Order = 8)]
        public bool IsEarned { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "Key", Order = 9)]
        public string Key { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "Name", Order = 10)]
        public string Name { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "PictureUrl", Order = 11)]
        public string PictureUrl { get; set; }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards\Rewards.Contracts\AchievementsEarned.cs ===
﻿
namespace Rewards.Contracts
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;

    [DataContract(Name = "GrantAchievements", Namespace = "http://schemas.datacontract.org/2004/07/GDS.Contracts")]
    public class GrantAchievements
    {
        /// <summary>
        /// Gets or sets GameId
        /// </summary>
        [DataMember(IsRequired = true, EmitDefaultValue = true, Order = 0, Name = "GameId")]
        public uint GameId { get; set; }

        /// <summary>
        /// Gets or sets AppId
        /// </summary>
        [DataMember(IsRequired = true, EmitDefaultValue = true, Order = 1, Name = "AppId")]
        public string AppId { get; set; }

        /// <summary>
        /// Gets or sets list of Acheivement
        /// </summary>
        [DataMember(IsRequired = true, EmitDefaultValue = true, Order = 2, Name = "Achievements")]
        public List<AchievementEarned> Achievements { get; set; }
    }

    [DataContract(Name = "AchievementEarned", Namespace = "")]
    public class AchievementEarned
    {
        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "Key", Order = 0)]
        public string Key { get; set; }

        [DataMember(EmitDefaultValue = false, IsRequired = true, Name = "EarnedDateTime", Order = 1)]
        public DateTime EarnedDateTime { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "EarnedOnline", Order = 2)]
        public bool EarnedOnline { get; set; }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards\Rewards.Contracts\AchievementsResult.cs ===
﻿using System;
using System.Collections.Generic;
using System.Text;
using System.Runtime.Serialization;

namespace Rewards.Contracts
{
    /// <summary>
    /// Result of GET Achievements
    /// </summary>
    [DataContract(Name = "AchievementsResult", Namespace = "http://schemas.datacontract.org/2004/07/GDS.Contracts")]
    public class AchievementsResult
    {

        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "Achievements", Order = 1)]
        public List<Achievement> Achievements;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards\Rewards.Contracts\Achievements.cs ===
﻿
namespace Rewards.Contracts
{
    using System.Collections.Generic;
    using System.Runtime.Serialization;
    //using Leet.UserGameData.DataContracts;

    /// <summary>
    /// Achievements class
    /// </summary>
    [DataContract(Name = "Achievements", Namespace = "http://schemas.datacontract.org/2004/07/GDS.Contracts")]
    public class Achievements
    {
        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "UserAchievementsCollection", Order = 0)]
        public List<UserAchievements> UserAchievementsCollection;
    }

    [DataContract(Name = "UserAchievements", Namespace = "http://schemas.datacontract.org/2004/07/GDS.Contracts")]
    public class UserAchievements
    {
        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "GamerTag", Order = 0)]
        public string Gamertag { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "TotalAchievementsEarned", Order = 1)]
        public ulong TotalAchievementsEarned { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "TotalPossibleAchievements", Order = 2)]
        public ulong TotalPossibleAchievements { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "Gamerscore", Order = 3)]
        public ulong Gamerscore { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "TotalPossibleGamerscore", Order = 4)]
        public ulong TotalPossibleGamerscore { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "AchievementList", Order = 5)]
        public List<Achievement> AchievementList { get; set; }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards\Rewards.Contracts\DatablobResult.cs ===
﻿using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace Rewards.Contracts
{
    /// <summary>
    /// Result for GET Datablob
    /// </summary>
    [DataContract]
    public class DatablobResult
    {
        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "DatablobId", Order = 0)]
        public Guid DatablobId;

        [DataMember(EmitDefaultValue = true, IsRequired = false, Name = "Blob", Order = 1)]
        public byte[] Blob;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards\Rewards.Contracts\GameInfo.cs ===
﻿using System;
using System.Runtime.Serialization;

namespace Rewards.Contracts
{
    /// <summary>
    /// Data class bundling information about a game in the context
    /// of a specific user
    /// </summary>
    [DataContract]
    public class GameInfo
    {
        /// <summary>
        /// Game Id
        /// </summary>
        [DataMember]
        public int Id { get; set; }

        /// <summary>
        /// Name of the game
        /// </summary>
        [DataMember]
        public string Name { get; set; }

        /// <summary>
        /// Indicates the platform of the game (LIVEn or Xbox LIVE)
        /// </summary>
        [DataMember]
        public uint Type { get; set; }

        /// <summary>
        /// URL for the game page
        /// </summary>
        [DataMember]
        public string GameUrl { get; set; }

        /// <summary>
        /// URL for the game image
        /// </summary>
        [DataMember]
        public string ImageUrl { get; set; }

        /// <summary>
        /// When this game was last played by the user
        /// </summary>
        [DataMember]
        public DateTime LastPlayed { get; set; }

        /// <summary>
        /// Indicates number of achievements earned for this game 
        /// by the user. 
        /// </summary>
        [DataMember]
        public int AchievementsEarned { get; set; }

        /// <summary>
        /// Indicates total number of achievements available for 
        /// this game 
        /// </summary>
        [DataMember]
        public int TotalAchievements { get; set; }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards\Rewards.Contracts\GameResult.cs ===
﻿//------------------------------------------------------------------------------------------------- 
// <copyright file="GameResult.cs" company="Microsoft" author="Savas Guven">
// Copyright © .  All rights reserved.
// </copyright>
// <summary>GameEvent data object</summary>
//-------------------------------------------------------------------------------------------------
namespace Rewards.Contracts
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;

    [DataContract(Name = "GameResult", Namespace = "http://schemas.datacontract.org/2004/07/Wgx.Services.Gds.BusinessObjects")]
    public class GameResult
    {
        /// <summary>
        /// Gets or sets GameID 
        /// </summary>
        [DataMember(IsRequired = true, EmitDefaultValue = true, Order = 0, Name = "GameId")]
        public uint GameId { get; set; }

        /// <summary>
        /// Gets or sets the Variant of the game.
        /// </summary>
        [DataMember(IsRequired = true, EmitDefaultValue = true, Order = 1, Name = "Variant")]
        public uint Variant { get; set; }

        /// <summary>
        /// Gets or sets a unique identifier for this event instance. (e.g. a message id)
        /// </summary>
        [DataMember(IsRequired = true, EmitDefaultValue = true, Order = 2, Name = "GameResultId")]
        public Guid GameResultId { get; set; }

        /// <summary>
        /// Gets or sets the TimeStamp
        /// </summary>
        [DataMember(IsRequired = true, EmitDefaultValue = true, Order = 3, Name = "TimeStamp")]
        public DateTime TimeStamp { get; set; }

        /// <summary>
        /// Gets or sets the Game Score achieved.
        /// </summary>
        [DataMember(IsRequired = false, EmitDefaultValue = false, Order = 4, Name = "Score")]
        public long? Score { get; set; }

        /// <summary>
        /// Gets or sets Time in seconds played.
        /// </summary>
        [DataMember(IsRequired = false, EmitDefaultValue = false, Order = 5, Name = "Time")]
        public long? Time { get; set; }

        /// <summary>
        /// Gets or sets the outcome, win or loss or tie
        /// </summary>
        [DataMember(IsRequired = false, EmitDefaultValue = true, Order = 6, Name = "Outcome")]
        public string Outcome { get; set; }

        /// <summary>
        /// Gets or sets a binary blob to be saved in cases where a Best Time or Score is achieved.
        /// </summary>
        [DataMember(IsRequired = false, EmitDefaultValue = true, Order = 7, Name = "Blob")]
        public byte[] Blob { get; set; }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards\Rewards.Contracts\Entry.cs ===
﻿namespace Rewards.Contracts
{
    using System;
    using System.Runtime.Serialization;
    using System.Collections.Generic;

    /// <summary>
    /// Data contract for a Stat
    /// </summary>
    [DataContract(Name = "Entry", Namespace = "http://schemas.datacontract.org/2004/07/GDS.Contracts")]
    public class Entry
    {
        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "Name", Order = 0)]
        public string Name { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = false, Name = "Value", Order = 1)]
        public string Value { get; set; }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards\Rewards.Contracts\Leaderboard.cs ===
﻿namespace Rewards.Contracts
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;

    /// <summary>
    /// Data contract for Item in Leaderboard
    /// </summary>
    [DataContract(Name = "Item", Namespace = "http://schemas.datacontract.org/2004/07/GDS.Contracts")]
    public class LeaderboardItem
    {
        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "User", Order = 0)]
        public LeaderboardUser User { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "Rank", Order = 1)]
        public uint Rank { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "Value", Order = 2)]
        public long Value { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "Statistics", Order = 3)]
        public IList<Entry> Statistics { get; set; }
    }

    /// <summary>
    /// Data contract for User
    /// </summary>
    [DataContract(Name = "User", Namespace = "http://schemas.datacontract.org/2004/07/GDS.Contracts")]
    public class LeaderboardUser
    {
        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "GamerTag", Order = 0)]
        public string GamerTag { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = false, Name = "Cid", Order = 0)]
        public ulong Cid { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "DisplayName", Order = 1)]
        public string DisplayName { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "PictureUrl", Order = 2)]
        public string PictureUrl { get; set; }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards\Rewards.Contracts\Games.cs ===
﻿

namespace Rewards.Contracts
{
    using System.Collections.Generic;
    using System.Runtime.Serialization;

    /// <summary>
    /// Games class
    /// </summary>
    [DataContract(Name = "Games", Namespace = "http://schemas.datacontract.org/2004/07/GDS.Contracts")]
    public class Games
    {
        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "TotalUniqueGames", Order = 0)]
        public uint TotalUniqueGames;

        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "UserGamesCollection", Order = 1)]
        public List<UserGames> UserGamesCollection;

    }

    [DataContract(Name = "UserGames", Namespace = "http://schemas.datacontract.org/2004/07/GDS.Contracts")]
    public class UserGames
    {
        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "GamerTag", Order = 0)]
        public string Gamertag { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "TotalGamesPlayed", Order = 1)]
        public uint TotalGamesPlayed { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "Gamerscore", Order = 2)]
        public uint Gamerscore { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "TotalPossibleGamerscore", Order = 3)]
        public uint TotalPossibleGamerscore { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "GameList", Order = 4)]
        public List<GameInfo> GameList { get; set; }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards\Rewards.Contracts\LeaderboardResult.cs ===
﻿using System.Collections.Generic;
using System.Runtime.Serialization;

namespace Rewards.Contracts
{
    /// <summary>
    /// Result of GET Leaderboard
    /// </summary>
    [DataContract(Name = "LeaderboardResult", Namespace = "http://schemas.datacontract.org/2004/07/GDS.Contracts")]
    public class LeaderboardResult
    {
        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "TotalNumberOfRows", Order = 0)]
        public uint TotalNumberOfRows { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "Leaderboard", Order = 1)]
        public IList<LeaderboardItem> Leaderboard;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards\Rewards.Contracts\MessageDetails.cs ===
﻿//-------------------------------------------------------------------
// <copyright file="MessageDetails.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
//
// <author email="schau">
//     Feng Gao
// </author>
//
// <summary>
//  Message Details class
// </summary>
//
// <remarks/>
//
// <disclaimer/>
//
// <history date="06/17/2010">
//     Class created
// </history>
//-------------------------------------------------------------------

namespace Rewards.Contracts
{
    using System;
    using System.Runtime.Serialization;

    [DataContract(Name = "MessageDetails", Namespace = "http://schemas.datacontract.org/2004/07/GDS.Contracts")]
    public class MessageDetails
    {
        /// <summary>
        /// MessageId
        /// </summary>
        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "MessageId", Order = 0)]
        public uint MessageId { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "SentTime", Order = 1)]
        public DateTime SentTime { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "SenderGamerTag", Order = 2)]
        public string SenderGamerTag { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "MessageBody", Order = 3)]
        public string MessageBody { get; set; }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards\Rewards.Contracts\MessageSummariesResponse.cs ===
﻿//-------------------------------------------------------------------
// <copyright file="MessageSummariesResponse.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
//
// <author email="schau">
//     Feng Gao
// </author>
//
// <summary>
//  Message Summaries Response class
// </summary>
//
// <remarks/>
//
// <disclaimer/>
//
// <history date="06/16/2010">
//     Class created
// </history>
//-------------------------------------------------------------------

namespace Rewards.Contracts
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;

    [DataContract(Name = "MessageSummariesResponse", Namespace = "http://schemas.datacontract.org/2004/07/GDS.Contracts")]
    public class MessageSummariesResponse
    {
        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "Summaries", Order = 0)]
        public List<MessageSummary> Summaries { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "HashCode", Order = 1)]
        public string HashCode { get; set; }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards\Rewards.Contracts\MessageSummary.cs ===
﻿//-------------------------------------------------------------------
// <copyright file="MessageSummary.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
//
// <author email="schau">
//     Stacey Chau
// </author>
//
// <summary>
//  Message Header class
// </summary>
//
// <remarks/>
//
// <disclaimer/>
//
// <history date="05/26/2010">
//     Class created
// </history>
//-------------------------------------------------------------------

namespace Rewards.Contracts
{
    using System;
    using System.Runtime.Serialization;

    [DataContract(Name = "MessageSummary", Namespace = "http://schemas.datacontract.org/2004/07/GDS.Contracts")]
    public class MessageSummary
    {
        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "MessageId", Order = 0)]
        public uint MessageId { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = false, Name = "MessageType", Order = 1)]
        public uint MessageType { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = false, Name = "SenderGamertag", Order = 2)]
        public string SenderGamertag { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = false, Name = "SenderGamerPicUrl", Order = 3)]
        public string SenderGamerPicUrl { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = false, Name = "SenderTitleId", Order = 4)]
        public uint SenderTitleId { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = false, Name = "SentTime", Order = 5)]
        public DateTime SentTime { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = false, Name = "Subject", Order = 6)]
        public string Subject { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = false, Name = "HasBeenRead", Order = 7)]
        public bool HasBeenRead { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = false, Name = "IsFromFriend", Order = 8)]
        public bool IsFromFriend { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = false, Name = "CanDelete", Order = 9)]
        public bool CanDelete { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = false, Name = "CanSetReadFlag", Order = 10)]
        public bool CanSetReadFlag { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = false, Name = "HasVoice", Order = 11)]
        public bool HasVoice { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = false, Name = "HasImage", Order = 12)]
        public bool HasImage { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = false, Name = "HasText", Order = 13)]
        public bool HasText { get; set; }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards\Rewards.Contracts\ProfileEx.cs ===
﻿
namespace Rewards.Contracts
{
    using System.Runtime.Serialization;
    using System.Xml.Serialization;

    /// <summary>
    /// Data class representing the profile of a user
    /// </summary>
    [DataContract(Name = "ProfileEx", Namespace = "")]
    [XmlRoot(Namespace = "")]
    public class ProfileEx
    {
        /// <summary>
        /// A bit mask that represents a set of ProfileSections bit 
        /// flags - this indicates what sections are requested or 
        /// provided in the profile
        /// </summary>
        [DataMember]
        public long SectionFlags { get; set; }

        /// <summary>
        /// Property bag, contains Xbox Live and Windows Live properties 
        /// </summary>
        [DataMember]
        public XmlSerializableDictionary<ProfileProperty, object> ProfileProperties { get; set; }

        /// <summary>
        /// List of achievements recently unlocked by user
        /// </summary>
        [DataMember]
        public XmlSerializableList<Achievement> RecentAchievements { get; set; }

        /// <summary>
        /// The privacy level of the user's profile
        /// </summary>
        [DataMember]
        public XmlSerializableList<GameInfo> RecentGames { get; set; }

        /// <summary>
        /// A list of the user's friends
        /// </summary>
        [DataMember]
        public XmlSerializableList<ProfileEx> Friends { get; set; }
        /// <summary>
        /// Presence Info
        /// </summary>
        [DataMember(EmitDefaultValue = true, IsRequired = false, Name = "PresenceInfo", Order = 5)]
        public Presence PresenceInfo { get; set; }

        /// <summary>
        /// Privacy Settings
        /// </summary>
        [DataMember(EmitDefaultValue = true, IsRequired = false, Name = "PrivacySettings", Order = 6)]
        public XmlSerializableDictionary<PrivacySetting, uint> PrivacySettings { get; set; }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards\Rewards.Contracts\PrivacySetting.cs ===
﻿
namespace Rewards.Contracts
{
    public enum PrivacySetting
    {
        VoiceAndText,
        Video,
        GamerProfile,
        OnlineStatus,
        MemberContent,
        PlayedGames,
        FriendsList
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards\Rewards.Contracts\Presence.cs ===
﻿//-------------------------------------------------------------------
// <copyright file="Presence.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
//
// <author email="schau">
//     Stacey Chau
// </author>
//
// <summary>
//  Presence class
// </summary>
//
// <remarks/>
//
// <disclaimer/>
//
// <history date="05/26/2010">
//     Class created
// </history>
//-------------------------------------------------------------------
using System;

namespace Rewards.Contracts
{
    using System.Runtime.Serialization;

    [DataContract(Name = "Presence", Namespace = "")]
    public class Presence
    {
        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "OnlineState", Order = 0)]
        public uint OnlineState;

        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "LastSeenDateTime", Order = 1)]
        public DateTime LastSeenDateTime;

        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "LastSeenTitleId", Order = 2)]
        public uint LastSeenTitleId;

        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "LastSeenTitleName", Order = 3)]
        public string LastSeenTitleName;

        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "DetailedPresence", Order = 4)]
        public string DetailedPresence;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test\makefile.inc ===
# this is a slight modification of the makefile.def target that skips ComVisible since it's specified per project.

$(OBJ_PATH)\$O\_generated.cs: $(SOURCES_USED)
    -$(_DEL)
    set createfile=<<$@.temp
!if defined(LANGUAGE_SPECIFIC_MANAGED_RESOURCES) && "$(MUI)" == "1" && "$(URT_VER)" == "2.0"
[assembly:System.Resources.NeutralResourcesLanguage("en")]
!endif
[assembly:System.Reflection.AssemblyVersion("$(ASSEMBLY_IDENTITY_VERSION)")]
!ifdef VER_PRODUCTNAME_STR
[assembly:System.Reflection.AssemblyProduct("$(VER_PRODUCTNAME_STR)")]
!endif
!ifdef VER_LEGALCOPYRIGHT_STR
[assembly:System.Reflection.AssemblyCopyright("$(VER_LEGALCOPYRIGHT_STR)")]
!endif
!ifdef VER_COMPANYNAME_STR
[assembly:System.Reflection.AssemblyCompany("$(VER_COMPANYNAME_STR)")]
!endif
!ifdef VER_PRODUCTVERSION_STR
[assembly:System.Reflection.AssemblyFileVersion("$(VER_PRODUCTVERSION_STR)")]
!endif
<<KEEP
!if defined(_ASSEMBLY_IDENTITY) \
        && "$(_ASSEMBLY_IDENTITY_PUBLIC_KEY_NAME_LOWERCASE)" != "none" \
        && "$(_ASSEMBLY_IDENTITY:\=)" == "$(_ASSEMBLY_IDENTITY)" \
        && !defined(_MANAGED_CXX_LIBRARY) \
        && "$(MANAGED_TARGET_TYPE)" != "module"
    asmIdToAttribs.cmd "$(_ASSEMBLY_IDENTITY)" $@.temp csharp
!endif
    $(_MOVE)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards\Rewards.Contracts\ProfileProperty.cs ===
﻿namespace Rewards.Contracts
{
    /// <summary>
    /// The names of the various optional Xbox Live and Windows Live properties 
    /// available in a profile
    /// </summary>
    public enum ProfileProperty
    {
        /// <summary>
        /// Should be of type string
        /// </summary>
        AvatarImageUrl,

        /// <summary>
        /// Should be of type string
        /// </summary>
        Bio,

        /// <summary>
        /// Should be of type string
        /// </summary>
        Cid,

        /// <summary>
        /// Should be of type string
        /// </summary>
        GamerPicUrl,

        /// <summary>
        /// Should be of type int
        /// </summary>
        GamerScore,

        /// <summary>
        /// Should be of type string
        /// </summary>
        GamerTag,

        /// <summary>
        /// Should be of type string
        /// </summary>
        GamerZone,

        /// <summary>
        /// Should be of type bool
        /// </summary>
        HasAvatar,

        /// <summary>
        /// Should be of type string
        /// </summary>
        MembershipLevel,

        /// <summary>
        /// Should be of type string 
        /// </summary>
        Location,

        /// <summary>
        /// Should be of type string 
        /// </summary>
        Motto,

        /// <summary>
        /// Should be of type string
        /// </summary>
        Name,

        /// <summary>
        /// Should be of type float
        /// </summary>
        Reputation,

        /// <summary>
        /// Should be of type int
        /// </summary>
        ShowGamerProfile,

        /// <summary>
        /// Should be of type string
        /// </summary>
        SmallGamerPicUrl,

        /// <summary>
        /// Should be of type string
        /// </summary>
        WindowsLiveDisplayImageUrl,

        /// <summary>
        /// Should be of type string
        /// </summary>
        WindowsLiveDisplayName,

        /// <summary>
        /// Should be of type ulong
        /// </summary>
        Xuid,

        /// <summary>
        /// Should be of type ulong
        /// </summary>
        ParentalControlGroup,

        /// <summary>
        /// Should be of type bool
        /// </summary>
        FreeGamertagChangeEligible,
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards\Rewards.Contracts\Profile.cs ===
﻿using System.Runtime.Serialization;
using System.Xml.Serialization;

namespace Rewards.Contracts
{
    /// <summary>
    /// Data class representing the profile of a user
    /// </summary>
    [DataContract(Namespace = "")]
    [XmlRoot(Namespace = "")]
    public class Profile
    {
        /// <summary>
        /// A bit mask that represents a set of ProfileSections bit 
        /// flags - this indicates what sections are requested or 
        /// provided in the profile
        /// </summary>
        [DataMember]
        public long SectionFlags { get; set; }

        /// <summary>
        /// Property bag, contains Xbox Live and Windows Live properties 
        /// </summary>
        [DataMember]
        public XmlSerializableDictionary<ProfileProperty, object> ProfileProperties { get; set; }

        /// <summary>
        /// List of achievements recently unlocked by user
        /// </summary>
        [DataMember]
        public XmlSerializableList<Achievement> RecentAchievements { get; set; }

        /// <summary>
        /// The privacy level of the user's profile
        /// </summary>
        [DataMember]
        public XmlSerializableList<GameInfo> RecentGames { get; set; }

        /// <summary>
        /// A list of the user's friends
        /// </summary>
        [DataMember]
        public XmlSerializableList<Profile> Friends { get; set; }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test\AccountTransport\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("AccountTransport")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("8d1518ce-d2d1-4142-9573-e11b993212e6")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards\Rewards.Contracts\SendMessageRequest.cs ===
﻿//-------------------------------------------------------------------
// <copyright file="SendMessageRequest.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
//
// <author email="schau">
//     Stacey Chau
// </author>
//
// <summary>
//  SendMessageRequest class
// </summary>
//
// <remarks/>
//
// <disclaimer/>
//
// <history date="05/26/2010">
//     Class created
// </history>
//-------------------------------------------------------------------

namespace Rewards.Contracts
{
    using System.Collections.Generic;
    using System.Runtime.Serialization;

    [DataContract(Name = "SendMessageRequest", Namespace = "http://schemas.datacontract.org/2004/07/GDS.Contracts")]
    public class SendMessageRequest
    {
        /// <summary>
        /// Gets or sets list of Recipients
        /// </summary>
        [DataMember(IsRequired = true, EmitDefaultValue = true, Order = 0, Name = "Recipients")]
        public List<string> Recipients { get; set; }

        /// <summary>
        /// Gets or sets MessageText
        /// </summary>
        [DataMember(IsRequired = true, EmitDefaultValue = true, Order = 1, Name = "MessageText")]
        public string MessageText { get; set; }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards\Rewards.Contracts\SerializableObjects\XmlSerializableList.cs ===
﻿using System;
using System.Collections.Generic;
using System.Xml.Serialization;

namespace Rewards.Contracts
{
    /// <summary>
    /// XmlSerializableList class.  Inherits from List and implements IXmlSerializable
    /// </summary>
    /// <typeparam name="T"></typeparam>
    public class XmlSerializableList<T> : List<T>, IXmlSerializable
    {
        /// <summary>
        /// Initializes a new instance of the XmlSerializableList class.
        /// </summary>
        public XmlSerializableList()
            : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the XmlSerializableList class.
        /// Takes a List and intitializes a XmlSerializableList with the same elements.
        /// </summary>
        /// <param name="list">List</param>
        public XmlSerializableList(List<T> list)
        {
            if (list == null)
            {
                throw new ArgumentNullException("list is null");
            }

            foreach (T item in list)
            {
                this.Add(item);
            }
        }

        #region IXmlSerializable Members

        /// <summary>
        /// This method is reserved and should not be used.
        /// Required only to implement IXmlSerializable interface.
        /// </summary>
        /// <returns>always returns null</returns>
        System.Xml.Schema.XmlSchema IXmlSerializable.GetSchema()
        {
            return null;
        }

        /// <summary>
        /// Generates an XmlSerializableList from its XML representation.
        /// </summary>
        /// <param name="reader">System.Xml.XmlReader reader</param>
        void IXmlSerializable.ReadXml(System.Xml.XmlReader reader)
        {
            if (reader == null)
            {
                throw new ArgumentNullException("reader is null");
            }

            if (reader.IsEmptyElement || reader.Read() == false)
            {
                return;
            }

            XmlSerializer serializer = new XmlSerializer(typeof(T));

            reader.ReadStartElement("items");

            while (reader.NodeType != System.Xml.XmlNodeType.EndElement)
            {
                T element = (T)serializer.Deserialize(reader);
                this.Add(element);
                reader.MoveToContent();
            }

            // read the end element of the "items" node
            reader.ReadEndElement();

            // read end Element tag if it exists.  It will exist if deserializing an Profile, it will not if just deserializing an XmlSerializableList
            try
            {
                reader.ReadEndElement();
            }
            catch (System.Xml.XmlException)
            {
                //Do nothing.
            }
        }

        /// <summary>
        /// Converts a XmlSerializationList object into its XML representation
        /// </summary>
        /// <param name="writer">System.Xml.XmlWriter writer</param>
        void IXmlSerializable.WriteXml(System.Xml.XmlWriter writer)
        {
            if (writer == null)
            {
                throw new ArgumentNullException("writer is null");
            }

            if (this.Count == 0)
            {
                return;
            }

            writer.WriteStartElement("items");

            XmlSerializer serializer = null;

            if (this.Count > 0)
            {
                serializer = new XmlSerializer(this[0].GetType());
            }

            if (serializer == null)
            {
                serializer = new XmlSerializer(typeof(T));
            }

            foreach (T item in this)
            {
                serializer.Serialize(writer, item);
            }

            writer.WriteEndElement();
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards\Rewards.Contracts\SerializableObjects\XmlSerializableDictionary.cs ===
﻿using System;
using System.Collections.Generic;
using System.Xml.Serialization;

namespace Rewards.Contracts
{
    /// <summary>
    /// XmlSerializationDictionary Class.  Inherits from Dictionary and implements the IXmlSerializable interface
    /// </summary>
    /// <typeparam name="TKey">TKey</typeparam>
    /// <typeparam name="TValue">TValue</typeparam>
    [XmlRoot("Dictionary")]
    public class XmlSerializableDictionary<TKey, TValue> : Dictionary<TKey, TValue>, IXmlSerializable
    {
        /// <summary>
        /// Initializes a new instance of the XmlSerializableDictionary class.
        /// </summary>
        public XmlSerializableDictionary()
            : base()
        {
        }

        #region IXmlSerializable Members

        /// <summary>
        /// This method is reserved and should not be used.
        /// Required only to implement IXmlSerializable interface.
        /// </summary>
        /// <returns>always returns null</returns>
        System.Xml.Schema.XmlSchema IXmlSerializable.GetSchema()
        {
            return null;
        }

        /// <summary>
        /// Generates an XmlSerializableDictionary from its XML representation.
        /// </summary>
        /// <param name="reader">System.Xml.XmlReader reader</param>
        void IXmlSerializable.ReadXml(System.Xml.XmlReader reader)
        {
            if (reader == null)
            {
                throw new ArgumentNullException("reader is null");
            }

            if (reader.IsEmptyElement || reader.Read() == false)
            {
                return;
            }

            XmlSerializer keySerializer = new XmlSerializer(typeof(TKey));

            XmlSerializer valueSerializer = new XmlSerializer(typeof(TValue));

            reader.ReadStartElement("items");

            while (reader.NodeType != System.Xml.XmlNodeType.EndElement)
            {
                reader.ReadStartElement("item");

                TKey key = (TKey)keySerializer.Deserialize(reader);
                TValue value = (TValue)valueSerializer.Deserialize(reader);

                this.Add(key, value);

                reader.ReadEndElement();
                reader.MoveToContent();
            }

            //read last Items tag
            reader.ReadEndElement();

            // read end Element tag if it exists
            try
            {
                reader.ReadEndElement();
            }
            catch (System.Xml.XmlException)
            {
                //Do nothing.
            }
        }

        /// <summary>
        /// Converts a XmlSerializationDictionary object into its XML representation
        /// </summary>
        /// <param name="writer">System.Xml.XmlWriter writer</param>
        void IXmlSerializable.WriteXml(System.Xml.XmlWriter writer)
        {
            if (writer == null)
            {
                throw new ArgumentNullException("writer is null");
            }

            XmlSerializer keySerializer = new XmlSerializer(typeof(TKey));
            XmlSerializer valueSerializer = new XmlSerializer(typeof(TValue));

            writer.WriteStartElement("items");

            foreach (TKey key in this.Keys)
            {
                writer.WriteStartElement("item");

                keySerializer.Serialize(writer, key);
                TValue value = this[key];
                valueSerializer.Serialize(writer, value);

                writer.WriteEndElement();
            }

            writer.WriteEndElement();
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test\AuthenticationTransport\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("AuthenticationTransport")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("7592c7f2-c2cd-4184-b20f-daf4741c0a98")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test\AccountTransport\AccountCreationException.cs ===
﻿using System;

namespace Rewards.Test
{
    [Serializable]
    public class AccountCreationException : Exception
    {
        public AccountCreationException()
        {
        }

        public AccountCreationException(string message)
            : base(message)
        {
        }

        public AccountCreationException(string message, Exception inner)
            : base(message, inner)
        {
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test\AuthenticationTransport\AuthenticationCache.cs ===
﻿using System;
using System.Web;
using System.Web.Caching;

namespace Rewards.Test
{
    /// <summary>
    /// Caches authorization information, on a per credential basis, to avoid repeat/superfluous authentications.
    /// Currently hardcoded to cache authorization data for 30 mins.
    /// </summary>
    public static class AuthenticationCache
    {
        private static HttpRuntime httpRuntime;
        private static object syncLock = new object();

        /// <summary>
        /// 
        /// </summary>
        static AuthenticationCache()
        {
            //this ensures that the HttpRuntime cache is available,
            //irrespective of environment (console, web app, winform, etc.)
            if (httpRuntime == null)
            {
                lock (syncLock)
                {
                    if (httpRuntime == null)
                        httpRuntime = new HttpRuntime();
                }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        private static Cache AuthCache
        {
            get
            {
                return HttpRuntime.Cache;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns></returns>
        public static string GenerateRpsTicket(string username, string password)
        {
            string key = username.ToLower() + "WLID";
            string loginTicket = AuthCache.Get(key) as string;
            if (loginTicket == null)
            {
                loginTicket = AuthenticationTransport.GenerateRpsTicket(username, password);
                AuthCache.Add(key, loginTicket, null, DateTime.Now.AddMinutes(30), Cache.NoSlidingExpiration, CacheItemPriority.Normal, null);
            }

            return loginTicket;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="loginTicket"></param>
        /// <returns></returns>
        public static string GenerateStsToken(string username, string password, uint titleID, uint platformID)
        {
            string loginTicket = GenerateRpsTicket(username, password);
            string key = username.ToLower() + "_" + titleID.ToString() + "_" + platformID.ToString() + "_STS";
            string stsToken = AuthCache.Get(key) as string;

            if (stsToken == null)
            {
                stsToken = AuthenticationTransport.GenerateStsTicket(loginTicket, titleID, platformID);
                AuthCache.Add(key, stsToken, null, DateTime.Now.AddMinutes(30), Cache.NoSlidingExpiration, CacheItemPriority.Normal, null);
            }

            return stsToken;
        }

        /// <summary>
        /// Generates and returns the STS Partner Ticke with the values passed in.
        /// </summary>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="titleID"></param>
        /// <param name="platformID"></param>
        /// <returns></returns>
        public static string GenerateStsPartnerTicket(string username, string password, uint titleID, uint platformID)
        {
            string loginTicket = GenerateRpsTicket(username, password);

            string key = string.Format("{0}_{1}_{2}_STSParnerTicket", username.ToLower(), titleID, platformID);
            string stsUserToken = AuthenticationCache.GenerateStsToken(username, password, titleID, platformID);

            string stsPartnerTicket = AuthCache.Get(key) as string;

            if (stsPartnerTicket == null)
            {
                stsPartnerTicket = AuthenticationTransport.GeneratePartnerSTSTicket(stsUserToken, titleID.ToString());
                AuthCache.Add(key, stsPartnerTicket, null, DateTime.Now.AddMinutes(30), Cache.NoSlidingExpiration, CacheItemPriority.Normal, null);
            }

            return stsPartnerTicket;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test\AuthenticationTransport\TestUser.cs ===
﻿using System.Collections.Generic;

namespace Rewards.Test
{
    public class TestUser
    {
        public string Username { get; set; }
        public string Password { get; set; }
        public string RpsTicket { get; set; }
        public string Gamertag { get; set; }
        public List<TestUser> Friends { get; set; }

        public TestUser()
        {
            Username = "";
            Password = "";
            RpsTicket = "";
            Friends = new List<TestUser>();

        }

        /// <summary>
        /// Creates a test user using the provided values
        /// </summary>
        /// <param name="user"></param>
        /// <param name="pw"></param>
        /// <param name="gt"></param>
        public TestUser(string user, string pw, string gt)
        {
            Username = user;
            Password = pw;
            Gamertag = gt;
            RpsTicket = "";
            Friends = new List<TestUser>();
        }

        public TestUser(string user, string pw, string gt, List<TestUser> friends)
        {
            Username = user;
            Password = pw;
            Gamertag = gt;
            RpsTicket = "";
            Friends = friends;
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test\AccountTransport\AccountTransport.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using System.Xml.Linq;
using live.common;
using live.lfm;
using live.protocol.Presence;
using live.server;
using UserLib;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Rewards.Test
{
    public static class AccountTransport
    {
        static string CONFIG_FILENAME = "RewardsTransport.config.xml";

        static AccountTransport()
        {
            string liveEnv = GetCurrentXLiveEnv();
            TargetEnvironment.SetEnvironment(liveEnv);
        }

        public static string GetCurrentXLiveEnv()
        {
            XmlDocument doc = new XmlDocument();
            doc.Load(CONFIG_FILENAME);
            string env = doc.SelectSingleNode("/Config").Attributes["current"].InnerText;

            string xliveenv = (from i in XElement.Load(CONFIG_FILENAME).Elements("environment")
                               where i.Attribute("name").Value.ToLower() == env.ToLower()
                               select i.Element("xliveenv")).First().Value;

            return xliveenv;
        }

        public static string GetCurrentLIVEnEnv()
        {
            XmlDocument doc = new XmlDocument();
            doc.Load(CONFIG_FILENAME);
            string env = doc.SelectSingleNode("/Config").Attributes["current"].InnerText;

            return env;
        }

        public static uint GetTitleId()
        {
            XmlDocument doc = new XmlDocument();
            doc.Load(CONFIG_FILENAME);
            string env = doc.SelectSingleNode("/Config").Attributes["current"].InnerText;

            string titleId = (from i in XElement.Load(CONFIG_FILENAME).Elements("environment")
                              where i.Attribute("name").Value.ToLower() == env.ToLower()
                              select i.Element("sts")).Attributes("titleId").ElementAt(0).Value;

            return Convert.ToUInt32(titleId);
        }

        public static uint GetPlatformId()
        {
            XmlDocument doc = new XmlDocument();
            doc.Load(CONFIG_FILENAME);
            string env = doc.SelectSingleNode("/Config").Attributes["current"].InnerText;

            string platformId = (from i in XElement.Load(CONFIG_FILENAME).Elements("environment")
                                 where i.Attribute("name").Value.ToLower() == env.ToLower()
                                 select i.Element("sts")).Attributes("platformType").ElementAt(0).Value;

            return Convert.ToUInt32(platformId);
        }

        public static Account CreateAccount()
        {
            return CreateAccount(CountryId.US, ParentalControl.None);
        }

        public static Account CreateAccount(CountryId country)
        {
            return CreateAccount(country, ParentalControl.None);
        }

        public static Account CreateAccount(ParentalControl parentalControl)
        {
            return CreateAccount(CountryId.US, parentalControl);
        }

        public static Account CreateAccount(CountryId countryId, ParentalControl parentalControl)
        {
            return CreateAccount(AccountTier.Gold, countryId, parentalControl);
        }

        public static Account CreateAccount(AccountTier accountTier, CountryId countryId, ParentalControl parentalControl)
        {
            try
            {
                Account acct = new Account(accountTier, countryId, parentalControl);
                WaitForXblAccountCreation(acct.XblUser.Settings.UserPassportInfo.MemberName, acct.XblUser.Settings.UserPassportInfo.Password, GetTitleId(), GetPlatformId());
                return acct;
            }
            catch (Exception ex)
            {
                Assert.Inconclusive("Account creation failed: " + ex.ToString());
                return null;
            }
        }

        public static Account CreateAccount(PrivacyOption privacyOption)
        {
            try
            {
                Account acct = CreateAccount();
                // Constructor parameters: PrivacySettings(PrivacyOption voiceAndTest, PrivacyOption gamerProfile, PrivacyOption playedGames, 
                //                          PrivacyOption memberContent, PrivacyOption friendsList, PrivacyOption video, PrivacyOption onlineStatus)
                PrivacySettings privacySettings = new PrivacySettings(privacyOption, privacyOption, privacyOption, privacyOption, privacyOption, privacyOption, privacyOption);
                acct.ResetPrivacySettings(privacySettings);
                return acct;
            }
            catch (Exception ex)
            {
                Assert.Inconclusive("Account creation failed: " + ex.ToString());
                return null;
            }
        }

        public static void BanAccount(Account acct)
        {
            BanAccount(acct, true, true, true, true, true);
        }

        public static void BanAccount(Account acct, bool isGamertagBanned, bool isVoiceBanned, bool isLockedOut, bool isGeoFenceExempt, bool isNicknameBanned)
        {
            BanSettings set = new BanSettings(isGamertagBanned, isVoiceBanned, isLockedOut, isGeoFenceExempt, isNicknameBanned);
            acct.BanAccount(set);
        }

        public static void BlockAccount(Account acct, PrivacyOption voiceAndText, PrivacyOption gamerProfile, PrivacyOption playedGames,
            PrivacyOption memberContent, PrivacyOption friendsList, PrivacyOption video, PrivacyOption onlineStatus)
        {
            PrivacySettings set = new PrivacySettings(voiceAndText, gamerProfile, playedGames, memberContent, friendsList, video, onlineStatus);
            acct.ResetPrivacySettings(set);
        }

        public static void BlockAccount(Account acct)
        {
            BlockAccount(acct, PrivacyOption.Blocked, PrivacyOption.Blocked, PrivacyOption.Blocked, PrivacyOption.Blocked,
                 PrivacyOption.Blocked, PrivacyOption.Blocked, PrivacyOption.Blocked);
        }

        public static Account CreateAccountWithFriends(int numberOfFriends)
        {
            Account acct = CreateAccount();
            AddFriendsForAccount(acct, numberOfFriends);

            return acct;
        }

        public static List<Account> AddFriendsForAccount(Account acct, int numberOfFriends)
        {
            List<Account> friendsList = new List<Account>(numberOfFriends);
            while (numberOfFriends > 0)
            {
                Account friend = AccountTransport.CreateAccount();

                friendsList.Add(friend);
                numberOfFriends--;
            }

            System.Threading.Thread.Sleep(30000);

            foreach (Account friend in friendsList)
            {
                AccountTransport.MakeFriends(acct, friend);
            }

            return friendsList;
        }

        public static void WaitForXblAccountCreation(string username, string password, uint titleId, uint platformId)
        {
            string rpsTicket = AuthenticationTransport.GenerateRpsTicket(username, password);
            DateTime start = DateTime.Now;
            string xx = string.Empty;

            while (!IsUserSecurityToken(AuthenticationTransport.GenerateStsTicket(rpsTicket, titleId, platformId)))
            {
                if (DateTime.Now.Subtract(start).TotalMilliseconds > 60000)
                    throw new ApplicationException(String.Format("Xbox Live account creation for {0} took longer than {1}ms.", username, "60000"));
                System.Threading.Thread.Sleep(1000);
            }
        }

        public static bool IsUserSecurityToken(string stsToken)
        {
            XDocument m_STSResponse = XDocument.Parse(stsToken);

            string tokenType = m_STSResponse.Descendants().Where(n => n.Name.LocalName == "Subject").ElementAt(0).Value;

            if (tokenType.Equals("XboxLive User security ticket"))
            {
                return true;
            }
            else
            {
                return false;
            }
        }


        public static void SendFriendRequest(Account acct, Account friend)
        {
            Xbox360 xbox = new Xbox360();
            xbox.Live.Logon(acct.XblUser);
            Presence.AddFriend(xbox.Client, acct.XblUser, friend.XblUser);

            xbox.Live.Logout(acct.XblUser);
            xbox.ShutdownConsole();

        }

        public static void MakeFriends(Account acct, Account friend)
        {
            Xbox360 m_UserXbox360 = new Xbox360();
            m_UserXbox360.Live.Logon(acct.XblUser);

            Presence.AddFriend(m_UserXbox360.Client, acct.XblUser, friend.XblUser);
            CheckForPendingFriendRequest(acct, friend);
            m_UserXbox360.Live.Logout(acct.XblUser);
            m_UserXbox360.ShutdownConsole();

            Xbox360 m_FriendXbox360 = new Xbox360();
            m_FriendXbox360.Live.Logon(friend.XblUser);
            Presence.AcceptFriend(m_FriendXbox360.Client, friend.XblUser, acct.XblUser);
            m_FriendXbox360.Live.Logout(friend.XblUser);
            m_FriendXbox360.ShutdownConsole();
        }

        /// <summary>
        /// Determines if XBL Friend has a pending Friend Request
        /// </summary>
        /// <param name="XBLUserAccount">Account making friend request.</param>
        /// <param name="XBLFriendAccount">Account waiting for pending friend request.</param>
        /// <returns>True if pending friend request, false otherwise.</returns>
        public static bool CheckForPendingFriendRequest(Account XBLUserAccount, Account XBLFriendAccount)
        {
            Xbox360 m_UserXbox360 = new Xbox360();

            //Sign in on xbox
            m_UserXbox360.Live.Logon(XBLFriendAccount.XblUser);

            Notification.WaitForBuddyStatusRequested(m_UserXbox360.Client, XBLFriendAccount.XblUser, XBLUserAccount.XblUser);

            //Signoff
            m_UserXbox360.Live.Logout(XBLFriendAccount.XblUser);
            m_UserXbox360.ShutdownConsole();

            return true;
        }

        /// <summary>
        /// Gets a list of the gamertags of the specified user's friends.
        /// </summary>
        /// <param name="XBLUserAccout">The account whose friends will be fetched.</param>
        /// <returns></returns>
        public static List<string> GetFriendsGamerTag(Account XBLUserAccout)
        {
            List<string> m_FriendGamerTags = new List<string>();

            Xbox360 m_UserXbox360 = new Xbox360();
            GetFriendsListData[] m_FriendsList = ReturnFriendsListData(XBLUserAccout);

            foreach (GetFriendsListData m_FriendData in m_FriendsList)
                m_FriendGamerTags.Add(m_FriendData.szGamerTag);

            return m_FriendGamerTags;
        }

        /// <summary>
        /// Gets a list of the gamertags of the specified user's friends.
        /// </summary>
        /// <param name="XBLUserAccout">The account whose friends will be fetched.</param>
        /// <returns></returns>
        public static GetFriendsListData[] ReturnFriendsListData(Account XBLUserAccout)
        {
            Xbox360 m_UserXbox360 = new Xbox360();
            GetFriendsListData[] m_FriendsList = null;

            //Sign in on xbox
            m_UserXbox360.Live.Logon(XBLUserAccout.XblUser);

            //Retrieve friends
            m_FriendsList = Presence.GetFriendsList(m_UserXbox360.Client, XBLUserAccout.XblUser, XBLUserAccout.XblUser);

            //Signoff
            m_UserXbox360.Live.Logout(XBLUserAccout.XblUser);
            m_UserXbox360.ShutdownConsole();

            return m_FriendsList;
        }

        public static Account CreateNamedAccount(string userName, string password)
        {
            Account acct = new Account(userName, password);
            return acct;
        }

        /// <summary>
        /// Writes Xbox LIVE Profile properties to Xbox LIVE account
        /// </summary>
        /// <param name="acct">UserLib account to modify</param>
        /// <param name="motto">Updated User Motto</param>
        /// <param name="name">Updated User Name</param>
        /// <param name="location">Updated User Location</param>
        /// <param name="bio">Updated User Bio</param>
        /// <param name="gamerPic">Updated User GamerPic Url</param>
        /// <param name="personalPic">Updated User Personal Pic Url</param>
        /// <param name="avatar">Updated User Avatar image</param>
        /// <param name="zone">Updated User GamerZone</param>
        /// <param name="region">Updated User Region</param>
        public static void WriteProfileSettings(Account acct, string motto, string name, string location, string bio, string gamerPic, string personalPic, byte[] avatar, GamerZone zone, CountryId region)
        {
            acct.GamerProfile.WriteProfileSettings(motto, name, location, bio, gamerPic, personalPic, avatar, zone, region);
        }

        /// <summary>
        /// Returns a list of titles that have been played by the account passed in
        /// </summary>
        /// <param name="XBLUserAccount">Account to get list from</param>
        /// <returns>Array of UserTitles</returns>
        public static UserTitle[] GetUsersGamesPlayed(Account XBLUserAccount)
        {
            UserTitle[] userTitles = null;

            Xbox360 m_UserXbox360 = new Xbox360();
            //Sign in on xbox
            m_UserXbox360.Live.Logon(XBLUserAccount.XblUser);

            //Retrieve Titles
            userTitles = Presence.GetPresence(XBLUserAccount.XblUser).EnumerateTitles();

            //Signoff
            m_UserXbox360.Live.Logout(XBLUserAccount.XblUser);
            m_UserXbox360.ShutdownConsole();

            return userTitles;
        }

        public static void AddMSPoints(Account account, Offers.PointsOffers offer)
        {
            if (account.XblUser.Settings.BillingInfo.CreditCards.Count == 0)
            {
                account.AddCreditCard(CreditCardType.Visa, true);
            }
            uint ret = account.PurchasePointsWithCreditCard(offer);
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test\AuthenticationTransport\CustomHttpRequest.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Rewards.Test
{
    public class CustomHttpRequest
    {
        public string Method = "GET";
        public string URI = "/"; 
        public string Version = "HTTP/1.1";
        public string Host; 
        public string ContentLength;
        public LinkedList<string> OtherHeaders = new LinkedList<string>();
        public byte[] Content;

        public CustomHttpRequest()
        {
        }
        public CustomHttpRequest(string host, string path)
        {
            Host = host;
            URI = path;
        }

        protected string GetHeaderString()
        {
            CustomHttpRequest useRequest = this;
            string s = "";

            if (useRequest.Method != null) s += useRequest.Method + " ";
            if (useRequest.URI != null) s += useRequest.URI + " ";
            if (useRequest.Version != null) s += useRequest.Version;
            if (useRequest.Method != null || useRequest.URI != null || useRequest.Version != null) s += "\r\n";

            if (useRequest.Host != null) s += "Host: " + useRequest.Host + "\r\n";

            if (useRequest.ContentLength != null) s += "Content-Length: " + useRequest.ContentLength + "\r\n";

            foreach (string ext in useRequest.OtherHeaders)
            {
                s += ext + "\r\n";
            }
            s += "\r\n";
            return s;
        }

        public byte[] ToBytes()
        {
            string headers = GetHeaderString();
            int byte_count = headers.Length;
            byte[] ans = new byte[byte_count + (Content == null ? 0 : Content.Length)];

            GetBytes(headers, 0, headers.Length, ans, 0);
            if (Content != null)
            {
                Buffer.BlockCopy(Content, 0, ans, byte_count, Content.Length);
            }

            return ans;
        }

        public static int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex)
        {
            for (int i = 0; i < charCount; ++i)
                bytes[byteIndex + i] = (byte)s[charIndex + i];
            return charCount;
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test\AuthenticationTransport\AuthenticationTransport.cs ===
﻿using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Xml;
using System.Xml.Linq;
using RPSTicketCreation;
using System.Threading;
using System.Web.Caching;
using System.Web;
using System.Diagnostics;
using System.Security.Cryptography.X509Certificates;
using System.Net.Security;
using System.Net.Sockets;
using System.Security.Authentication;

namespace Rewards.Test
{
    public static class AuthenticationTransport
    {

        private static RPSTicketGeneratorConfig ticketConfig;
        private static RPSTicketGenerator ticketGenerator;
        private static readonly string RewardsConfig = "RewardsTransport.config.xml";
        private static TestUser primaryUser = null;
        private static List<string> friendsGTs = null;
        private static int Retry_Count = 5;
        private static string SecurityTicketQuery = "/GetSecurityTicket?platformType={platformId}&titleId={titleId}&titleVersion={titleVersion}&clientVersion={clientVersion}&deviceId={deviceId}";
        private const string PartnerSecurityTicketQuery = "/GetPartnerSecurityTicket?xuid={xuid}&titleId={titleId}&titleVersion={titleVersion}&audience={audience}";
        private const string UserDataAudience = "http%3A%2F%2Fxboxlive.com/userdata";
        private static X509Certificate certificate;
        private static RemoteCertificateValidationCallback ignoreAll = delegate(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors)
        {
            return true;
        };
        private static LocalCertificateSelectionCallback localCert = delegate(object sender, string targetHost,
            X509CertificateCollection localCertificates, X509Certificate remoteCertificate, string[] acceptableIssuers)
            {
                return certificate;
            };

        static AuthenticationTransport()
        {
            Init(GetActiveRpsSite(), PassportEnvironment.INT, false);
        }

        static void Init(string siteUrl, PassportEnvironment ppe, bool cacheData)
        {
            ticketConfig = new RPSTicketGeneratorConfig();
            ticketConfig.SiteURL = siteUrl;
            ticketConfig.PPEnv = ppe;
            ticketConfig.CacheData = cacheData;
            ticketGenerator = new RPSTicketGenerator(ticketConfig);
        }
                
        public static TestUser PrimaryUser
        {
            get
            {
                if (primaryUser == null)
                {
                    LoadUsers();
                }
                return primaryUser;
            }
        }

        public static List<string> FriendsGamertags
        {
            get
            {
                if (friendsGTs == null)
                {
                    friendsGTs = PrimaryUser.Friends.Select(t => t.Gamertag).ToList();
                }
                return friendsGTs;
            }
        }
               
        public static string GetCurrentEnvironment()
        {
            XmlDocument doc = new XmlDocument();
            doc.Load(RewardsConfig);
            string env = doc.SelectSingleNode("/Config").Attributes["current"].InnerText;
            return env;
        }

        public static string GenerateRpsTicket(string username, string password)
        {
            string ticket = string.Empty;

            int count = 0;
            while (string.IsNullOrEmpty(ticket) && count < Retry_Count)
            {
                try
                {
                    //For some reason ticket generation is inconsistent against "kdc.xblob.xboxlive.com". Hence the retry
                    Trace.TraceInformation("Requesting RPS compact ticket for user: {0} password {1}..", username, password);
                    ticket = ticketGenerator.GetRPSCompactTicket(username, password);
                }
                catch
                {
                    Trace.TraceInformation("TicketGeneration failed. Attempting again");
                    Thread.Sleep(10000);
                }
                count++;
            }

            if (string.IsNullOrEmpty(ticket))
            {
                throw new Exception("Compact ticket value not found. Retried " + Retry_Count.ToString() + " times before closing");
            }

            Trace.TraceInformation("RPS ticket creation successful");
            return ticket;

        }

        public static string GenerateRpsTicket(string username, string password, string siteUrl, string siteId)
        {
            RPSTicketGeneratorConfig r_config = new RPSTicketGeneratorConfig();
            r_config.CacheData = false;
            r_config.SiteID = siteId;
            r_config.PPEnv = PassportEnvironment.INT;
            r_config.SiteURL = siteUrl;
            RPSTicketGenerator r_gen = new RPSTicketGenerator(r_config);

            string ticket = r_gen.GetRPSCompactTicket(username, password);
            return ticket;
        }

        /// <summary>
        /// This method creates a http web request based on http 
        /// or https. If it is https, it will attach client certificate
        /// </summary>
        public static HttpWebRequest GetWebRequest(string serviceUrl, HttpWebRequest optionalRequest, bool useClientCert)
        {
            if (serviceUrl.StartsWith("https") && useClientCert)
            {
                // Load the certificate from store
                X509Store certStore = new X509Store("My", StoreLocation.LocalMachine);
                certStore.Open(OpenFlags.ReadOnly | OpenFlags.OpenExistingOnly);
                certificate = certStore.Certificates.Find(X509FindType.FindByThumbprint, GetCertThumbprint(), false)[0];
                certStore.Close();

                Uri url = new Uri(serviceUrl);
                               
                TcpClient tcp = new TcpClient(url.Host, url.Port);
                SslStream ssl = new SslStream(tcp.GetStream(), false, ignoreAll, localCert);
                ssl.AuthenticateAsClient(
                    url.Host,
                    new X509CertificateCollection(new X509Certificate[] { certificate }),
                    SslProtocols.Default,
                    false);

                CustomHttpRequest req = new CustomHttpRequest(url.Host + ":" + url.Port, url.PathAndQuery);

                ssl.Write(req.ToBytes());
                ssl.Flush();
                ssl.Read(new byte[1], 0, 1);
                ssl.Close();
            }

            HttpWebRequest request = optionalRequest;

            if (optionalRequest == null)
            {
                request = (HttpWebRequest)WebRequest.Create(serviceUrl);
            }

            if (serviceUrl.StartsWith("https") && useClientCert)
            {
                request.ClientCertificates.Add(certificate);
                ServicePointManager.ServerCertificateValidationCallback += ignoreAll;
            }

            return request;
        }

        public static string GenerateStsTicket(string RpsTicket, uint titleID, uint platformID)
        {
            //Our platformId values are different from what is used by the STS service.
            if (platformID == (uint)5)
            {
                platformID = 15;
            }
            else if (platformID == (uint)6)
            {
                platformID = 16;
            }

            string environment = GetCurrentEnvironment();
            string stsUrl = (from i in XElement.Load(RewardsConfig).Elements("environment")
                             where i.Attribute("name").Value.ToLower() == environment.ToLower()
                             select i.Element("sts")).First().Value;

            string fullUri = SecurityTicketQuery;
            fullUri = LoadStsAttributes(fullUri, titleID, platformID);

            HttpWebRequest request = AuthenticationTransport.GetWebRequest(stsUrl + fullUri, null, true);

            ServicePointManager.ServerCertificateValidationCallback = delegate(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors)
            {
                return true; 
            };

            request.Headers.Add("Authorization", FixRPSTicket(RpsTicket));
            
            HttpWebResponse response = null;
            Trace.TraceInformation("Requesting STS token..");

            try
            {
                response = (HttpWebResponse)request.GetResponse();
            }
            catch (WebException ex)
            {
                if (ex.Response != null)
                {
                    using (Stream stream = ex.Response.GetResponseStream())
                    {
                        using (StreamReader sr = new StreamReader(stream))
                        {
                            string responseBody = sr.ReadToEnd();
                            Trace.TraceError(responseBody);
                        }
                    }
                }

                throw;
            }
            finally
            {
                AuthenticationTransport.CloseWebRequest(stsUrl, request);
            }

            Stream dataStream = response.GetResponseStream();
            StreamReader reader = new StreamReader(dataStream);
            string result = reader.ReadToEnd();
            result = GetSAMLData(result);
            dataStream.Close();
            Trace.TraceInformation("STS token received");

            return result;
        }

        /// <summary>
        /// Generates partner sts token. 
        /// </summary>
        /// <param name="stsUserTicket">The sts user token. </param>
        /// <param name="titleId">The title id. </param>
        /// <returns>Partnertoken string. </returns>
        public static string GeneratePartnerSTSTicket(string stsUserTicket, string titleId)
        {
            string xuid = GetSAMLXuid(stsUserTicket);

            string environment = GetCurrentEnvironment();
            IEnumerable<XElement> elements = XElement.Load(RewardsConfig).Elements("environment");

            XElement envElement = (from i in elements
                                    where i.Attribute("name").Value.ToLower() == environment.ToLower()
                                    select i.Element("sts")).First();

            string stsUrl = envElement.Value;
            string titleVersion = envElement.Attribute("titleVersion").Value;

            string fullUri = PartnerSecurityTicketQuery;

            fullUri = fullUri.Replace("{xuid}", xuid);

            fullUri = fullUri.Replace("{titleId}", titleId);

            fullUri = fullUri.Replace("{titleVersion}", titleVersion);

            fullUri = fullUri.Replace("{audience}", UserDataAudience);
            
            // Get a http web request
            HttpWebRequest request = AuthenticationTransport.GetWebRequest(stsUrl + fullUri, null, true);

            // Add auth header
            request.Headers.Add("X-Authorization", "XBL1.0 x=" + stsUserTicket);
            string stsPartnerTicket;
            try
            {
                // Issue the request and get the response
                HttpWebResponse response = (HttpWebResponse)request.GetResponse();

                // Get the ticket
                Stream dataStream = response.GetResponseStream();
                StreamReader reader = new StreamReader(dataStream);
                stsPartnerTicket = reader.ReadToEnd();
                stsPartnerTicket = GetSAMLData(stsPartnerTicket);
            }
            catch (WebException ex)
            {
                if (ex.Response != null)
                {
                    using (Stream stream = ex.Response.GetResponseStream())
                    {
                        using (StreamReader sr = new StreamReader(stream))
                        {
                            string responseBody = sr.ReadToEnd();
                            Trace.TraceError(responseBody);
                        }
                    }
                }

                throw;
            }
            finally
            {
                AuthenticationTransport.CloseWebRequest(stsUrl, request);               
            }

            return stsPartnerTicket;
        }

        private static string LoadStsAttributes(string uri, uint titleID, uint platformID)
        {
            string currentEnvironment = GetCurrentEnvironment();
            IEnumerable<XElement> elements = XElement.Load(RewardsConfig).Elements("environment");

            uri = uri.Replace("{platformId}", platformID.ToString());
            uri = uri.Replace("{titleId}", titleID.ToString());

            XElement envElement = (from i in elements
                                   where i.Attribute("name").Value.ToLower() == currentEnvironment.ToLower()
                                   select i.Element("sts")).First();

            uri = uri.Replace("{titleVersion}", envElement.Attribute("titleVersion").Value);
            uri = uri.Replace("{clientVersion}", envElement.Attribute("clientVersion").Value);
            uri = uri.Replace("{deviceId}", envElement.Attribute("deviceId").Value);

            return uri;
        }

        private static string GetActiveRpsSite()
        {
            string env = GetCurrentEnvironment();

            string rpssite = (from i in XElement.Load(RewardsConfig).Elements("environment")
                              where i.Attribute("name").Value.ToLower() == env.ToLower()
                              select i.Element("rpsserver")).First().Value;

            return rpssite;
        }

        private static void LoadUsers()
        {
            if (primaryUser == null)
            {
                primaryUser = new TestUser();

                string env = GetCurrentEnvironment();

                IEnumerable<XElement> elements = (from i in XElement.Load(RewardsConfig).Elements("environment")
                                                  where i.Attribute("name").Value.ToLower() == env.ToLower()
                                                  select i.DescendantsAndSelf()).First();
                foreach (XElement x in elements)
                {
                    if (x.Name.LocalName == "account")
                    {
                        primaryUser.Username = x.Attribute("username").Value;
                        primaryUser.Password = x.Attribute("password").Value;
                        primaryUser.Gamertag = x.Attribute("gamertag").Value;
                    }
                    if (x.Name.LocalName == "friend")
                    {
                        TestUser tu = new TestUser
                        (x.Attribute("username").Value,
                         x.Attribute("password").Value,
                         x.Attribute("gamertag").Value);
                        primaryUser.Friends.Add(tu);
                    }
                }
                if (String.IsNullOrEmpty(primaryUser.RpsTicket))
                {
                    primaryUser.RpsTicket = GenerateRpsTicket(primaryUser.Username, primaryUser.Password);
                }
            }
        }

        private static string GetCertThumbprint()
        {
            string currentEnvironment = GetCurrentEnvironment();
            IEnumerable<XElement> elements = XElement.Load(RewardsConfig).Elements("environment");

            string certThumbprint = (from i in elements
                                     where i.Attribute("name").Value.ToLower() == currentEnvironment.ToLower()
                                     select i.Element("sts")).First().Attribute("thumbprint").Value;

            return certThumbprint;
        }

        public static string FixRPSTicket(string rpsTicket)
        {
            string ticket = rpsTicket;
            ticket = ticket.Remove(0, 1);
            ticket = ticket.Remove(ticket.Length - 1);
            ticket = "WLID1.0 t=" + ticket;

            return ticket;
        }

        public static string GetSAMLData(string STSServiceResponse)
        {
            try
            {
                XDocument m_STSResponse = XDocument.Parse(STSServiceResponse);
                return m_STSResponse.Descendants().Where(n => n.Name.LocalName == "string").ElementAt(0).Value;
            }
            catch
            {
                throw new Exception("The STS token was invalid.");
            }
        }

        public static string GetSAMLXuid(string STSServiceResponse)
        {
            try
            {
                XDocument m_STSResponse = XDocument.Parse(STSServiceResponse);

                return m_STSResponse.Descendants().Where(n => n.Name.LocalName == "Attribute").Where(n => n.FirstAttribute.Value == "Xuid0").ElementAt(0).Value;
            }
            catch
            {
                throw new Exception("The STS token was invalid.");
            }
        }

        public static void CloseWebRequest(string url, HttpWebRequest request)
        {
            if (url.StartsWith("https"))
            {
                ServicePointManager.ServerCertificateValidationCallback -= ignoreAll;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test\RewardsTransport\RewardsEnvironment.cs ===
﻿
namespace Rewards.Test
{
    public class RewardsEnvironment
    {
        public string EnvironmentName;
        public string RewardsUri;
        public string UdsUri;
        public string UdsPartnerUri;
        public string RpsServerUrl;
        public string Sts;
        public string XLiveEnvironment;        
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Rewards.Test")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM componenets.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("717e838e-5587-4ef6-80e3-de0f0c3682e8")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test\RewardsTransport\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("RewardsTransport")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("9831035b-b2ca-4494-82c8-f04477348db8")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
//[assembly: AssemblyVersion("1.0.0.0")]
//[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test\RewardsTransport\RewardsTransport.cs ===
﻿using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Xml;
using System.Xml.Linq;
using Microsoft.TestTools;

namespace Rewards.Test
{
    public partial class RewardsTransport
    {
        #region Private Members
        private string StsTicket;
        private string partnerStsTicket;
        private string userStsTicket;
        private string currentUser;
        private string password;
        private XmlHelper xhelp = new XmlHelper();
        private string env;

        private Uri RewardsUri;
        private Uri UdsUri;
        private Uri UdsPartnerUri;
        private string RewardsService_baseUri { get { return RewardsUri.AbsoluteUri; } }
        private string UdsService_baseUri { get { return UdsUri.AbsoluteUri; } }
        private string UdsPartnerService_baseUri { get { return UdsPartnerUri.AbsoluteUri; } }
        #endregion Private Members

        #region Constructor and properties
        public string CurrentUser { get { return this.currentUser; } }
        public string CurrentUserPassword { get { return this.password; } }

        public string RewardsService_fullUri { get { return RewardsService_baseUri + Constants.RewardsService; } }
        public string GameDataService_fullUri { get { return UdsService_baseUri + Constants.GameDataService; } }
        public string ProfileService_fullUri { get { return UdsService_baseUri + Constants.ProfileService; } }
        public string GameDataPartnerService_fullUri { get { return UdsPartnerService_baseUri + Constants.GameDataPartnerService; } }
        public string ProfilePartnerService_fullUri { get { return UdsPartnerService_baseUri + Constants.ProfilePartnerService; } }
        public string PresencePartnerService_fullUri { get { return UdsPartnerService_baseUri + Constants.PresencePartnerService; } }
        public string MessagePartnerService_fullUri { get { return UdsPartnerService_baseUri + Constants.MessagePartnerService; } }
        public string FriendPartnerService_fullUri { get { return UdsPartnerService_baseUri + Constants.FriendPartnerService; } }
        
        public string CurrentStsTicket { get { return this.StsTicket; } }
        public string UserStsTicket { get { return this.userStsTicket; } }
        public string PartnerStsTicket { get { return this.partnerStsTicket; } }
        public string Env { get { return this.env; } }

        public RewardsTransport() 
            : this(AuthenticationTransport.PrimaryUser.Username, AuthenticationTransport.PrimaryUser.Password)
        {
        }

        public RewardsTransport(string username, string password)
        {
            this.Initialize();
            this.currentUser = username;
            this.password = password;
        }

        public RewardsTransport(string username, string password, uint titleID, uint platformID)
        {
            this.Initialize();
            this.currentUser = username;
            this.password = password;
            this.StsTicket = AuthenticationCache.GenerateStsToken(username, password, titleID, platformID);
        }

        /// <summary>
        /// Updates the STS Token with the TitleID and PlatformID passed in.
        /// </summary>
        /// <param name="titleID"></param>
        /// <param name="platformID"></param>
        public void UpdateStsToken(uint titleID, uint platformID)
        {
            Trace.TraceInformation("Update Sts Token TitleId {0}", titleID);
            Trace.TraceInformation("Update Sts Token PlatformID {0}", platformID);
            this.StsTicket = AuthenticationCache.GenerateStsToken(this.currentUser, this.password, titleID, platformID);
            this.userStsTicket = this.StsTicket;

            RewardsTestUtil.AuthorizationType = "X-Authorization";
        }

        /// <summary>
        /// Updates the STS Partner Token with the TitleID and PlatformID passed in.
        /// </summary>
        /// <param name="titleID"></param>
        /// <param name="platformID"></param>
        public void UpdateStsPartnerTicket(uint titleID, uint platformID)
        {
            Trace.TraceInformation("Update PartnerTicket TitleId {0}", titleID);
            Trace.TraceInformation("Update PartnerTicket PlatformID {0}", platformID);
            this.StsTicket = AuthenticationCache.GenerateStsPartnerTicket(this.currentUser, this.password, titleID, platformID);
            this.partnerStsTicket = this.StsTicket;

            RewardsTestUtil.AuthorizationType = "X-PartnerAuthorization";
        }
        
        private void Initialize()
        {
            XmlDocument doc = new XmlDocument();
            doc.Load(Constants.REWARDS_CONFIG);

            this.env = doc.SelectSingleNode("/Config").Attributes["current"].InnerText;
            RewardsEnvironment environment = this.GetEnvironmentValues(env);

            RewardsUri = new Uri(environment.RewardsUri);
            UdsUri = new Uri(environment.UdsUri);
            UdsPartnerUri = new Uri(environment.UdsPartnerUri);
        }

        private RewardsEnvironment GetEnvironmentValues(string currentEnvironment)
        {
            if (string.IsNullOrEmpty(currentEnvironment))
            {
                throw new ArgumentNullException("The current environment cannot be empty. Please verify values in " + Constants.REWARDS_CONFIG);
            }
            Trace.TraceInformation("Current environment: {0}", currentEnvironment);
            XmlDocument doc = new XmlDocument();
            doc.Load(Constants.REWARDS_CONFIG);
            IEnumerable<XElement> elements = (from i in XElement.Load(Constants.REWARDS_CONFIG).Elements("environment")
                                              where i.Attribute("name").Value.ToLower() == currentEnvironment.ToLower()
                                              select i.Descendants()).First();
            RewardsEnvironment rewardsEnvironment = new RewardsEnvironment();
            rewardsEnvironment.EnvironmentName = currentEnvironment;
            List<TestUser> rewardsUsers = new List<TestUser>();
            foreach (XElement s in elements)
            {
                switch (s.Name.LocalName)
                {
                    case "RewardsUrl":
                        rewardsEnvironment.RewardsUri = s.Value;
                        break;
                    case "UdsUrl":
                        rewardsEnvironment.UdsUri = s.Value;
                        break;
                    case "UdsPartnerUrl":
                        rewardsEnvironment.UdsPartnerUri = s.Value;
                        break;
                    case "rpsserver":
                        rewardsEnvironment.RpsServerUrl = s.Value;
                        break;
                    case "xliveenv":
                        rewardsEnvironment.XLiveEnvironment = s.Value;
                        break;
                    case "sts":
                        rewardsEnvironment.Sts = s.Value;
                        break;
                    default:
                        break;
                }
            }
            return rewardsEnvironment;
        }

        #endregion Constructor and endpoints
        #region Helpers

        private Response ExecutePOSTCall(string body, string requestUri, string locale, string platformId)
        {
            Trace.TraceInformation("Attempting POST operation {0}", requestUri);
            Trace.TraceInformation("Username: {0}", this.CurrentUser);
            Trace.TraceInformation("Password: {0}", this.CurrentUserPassword);

            Response response = RewardsTestUtil.ExecutePOSTCallXml(body, requestUri, locale, platformId, this.UserStsTicket, this.PartnerStsTicket);
            return response;
        }

        private Response ExecuteWebServiceCall(string fullUri, string locale, string platformId)
        {
            Trace.TraceInformation("Attempting GET operation {0}", fullUri);
            Trace.TraceInformation("Username: {0}", this.CurrentUser);
            Trace.TraceInformation("Password: {0}", this.CurrentUserPassword);

            Response response = RewardsTestUtil.ExecuteGETCallXml(null, fullUri, locale, platformId, this.UserStsTicket, this.PartnerStsTicket);
            return response;
        }

        private Response ExecuteDELETECall(string fullUri, string locale, string platformId)
        {
            Trace.TraceInformation("Attempting DELETE operation {0}", fullUri);
            Trace.TraceInformation("Username: {0}", this.CurrentUser);
            Trace.TraceInformation("Password: {0}", this.CurrentUserPassword);

            Response response = RewardsTestUtil.ExecuteDELETECallXml(null, fullUri, locale, platformId, this.UserStsTicket, this.PartnerStsTicket);
            return response;
        }
             
        #endregion Helpers
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test\Tests\ErrorCodes.cs ===
﻿using System;
using System.Linq;
using Gds.Contracts;
using Leet.Core.Platforms;
using Microsoft.TestTools;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Rewards.Test.Tests
{
    /// <summary>
    /// Summary description for ErrorCodes
    /// </summary>
    [TestClass]
    public class ErrorCodes
    {
        private static RewardsTransport rewardsTransport = new RewardsTransport();
        private static RewardsTestScenarioLibrary testScenarios = new RewardsTestScenarioLibrary(rewardsTransport);
        private static TestGame achievementGame = TestGameUtility.GetFirstGameWithAchievements();
        private static TestGame testGame = TestGameUtility.GetFirstGameWithAllStats();
        private XmlHelper xhelp = new XmlHelper();

        private string AppID = Guid.NewGuid().ToString();
        private string us_locale = "en-US";
        
        #region GrantAchievements tests
        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Grant an achievement with an invalid AppId and verify the error XML")]
        public void ErrorXML_GrantAchievement_InvalidAppID()
        {
            string appID = "0";
            string achievementID = "1";
            GuaranteeAchievementsAvailable(1, achievementGame);

            //Create an achievement
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleAchievement(achievementID, achievementGame.GameId, appID);

            //Grant the achievement
            Response result = testScenarios.GrantAchievements(grantAchievements, us_locale, achievementGame.PlatformId);
            if (!result.Body.Contains("Guid should contain 32 digits with 4 dashes"))
                Assert.Fail("GrantAchievements XML error not found for invalid AppId");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Grant an achievement with an empty AchievementsList and verify the error XML")]
        public void ErrorXML_GrantAchievement_EmptyAchievementList()
        {
            string achievementID = "0";
            GuaranteeAchievementsAvailable(1, achievementGame);

            //Create an achievement
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleAchievement(achievementID, achievementGame.GameId, AppID);

            //Remove the achievements list
            grantAchievements.Achievements.Clear();

            //Grant the achievements
            Response result = testScenarios.GrantAchievements(grantAchievements, us_locale, achievementGame.PlatformId);
            if (result.StatusCode != System.Net.HttpStatusCode.BadRequest && !result.Body.Contains("No achievements found"))
                Assert.Fail("GrantAchievements XML error not found for empty AchievementsList");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Grant an achievement with an empty AchievementId and verify the error XML")]
        public void ErrorXML_GrantAchievement_EmptyAchievementID()
        {
            string achievementID = string.Empty;
            GuaranteeAchievementsAvailable(1, achievementGame);

            //Create an achievement
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleAchievement(achievementID, achievementGame.GameId, AppID);

            //Grant the achievement
            Response result = testScenarios.GrantAchievements(grantAchievements, us_locale, achievementGame.PlatformId);
            if (result.StatusCode != System.Net.HttpStatusCode.BadRequest && !result.Body.Contains("Invalid Achievement key"))
                Assert.Fail("GrantAchievements XML error not found for empty AchievementId");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Grant an achievement with an invalid AchievementId and verify the error XML")]
        public void ErrorXML_GrantAchievement_InvalidAchievementID()
        {
            string achievementID = "X";
            GuaranteeAchievementsAvailable(1, achievementGame);

            //Create an achievement
            GrantAchievements grantAchievements = testScenarios.CreateAchievements_SingleAchievement(achievementID, achievementGame.GameId, AppID);

            //Grant the achievement
            Response result = testScenarios.GrantAchievements(grantAchievements, us_locale, achievementGame.PlatformId);
            if (result.StatusCode != System.Net.HttpStatusCode.BadRequest && !result.Body.Contains("Invalid Achievement key")) 
                Assert.Fail("GrantAchievements XML error not found for invalid AchievementId");
        }

        #endregion GrantAchievement tests

        /// <summary>
        /// Ensures the current user has a given number of unearned achievements and if not, creates and loads a new user
        /// </summary>
        /// <param name="achievementNeededCount">How many unearned achievements are needed</param>
        private void GuaranteeAchievementsAvailable(int achievementNeededCount, TestGame tg)
        {
            AchievementsResult results = testScenarios.GetAchievementsXml(achievementGame.GameId, us_locale, tg.PlatformId);
            int achievementsAvailable = (from a in results.Achievements
                                         where a.IsEarned == false
                                         select a).Count();
            if (achievementsAvailable < achievementNeededCount)
            {
                testScenarios = new RewardsTestScenarioLibrary(true);
            }
        }

    
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test\RewardsTransport\SynchronousCalls.cs ===
﻿using System;
using System.Diagnostics;
using System.Threading;
using Gds.Contracts;

namespace Rewards.Test
{
    public partial class RewardsTransport
    {
        public Response PostGameResult(string gameResultString, string locale, string platformId, uint titleId)
        {
            this.UpdateStsToken(titleId, uint.Parse(platformId));

            string uri = this.RewardsService_fullUri + Constants.PostGameResult_RelativePathAndQuery;

            Trace.TraceInformation("Submitting a GameResult with locale: {0} and PlatformId: {1}", locale, platformId);
            Trace.WriteLine(RewardsTestUtil.GetXML(gameResultString));
            Trace.TraceInformation("Posting game result with URI: {0}", uri);

            Response response = this.ExecutePOSTCall(gameResultString, uri, locale, platformId);
            return response;
        }

        public Response PostGrantAchievements(string grantAchievementsString, string locale, string platformId)
        {
            GrantAchievements ga = xhelp.LoadXml<GrantAchievements>(xhelp.StripNamespaces(grantAchievementsString));
            this.UpdateStsToken(ga.GameId, uint.Parse(platformId));

            string uri = this.RewardsService_fullUri + Constants.GrantAchievements_RelativePathAndQuery;

            Trace.TraceInformation("Submitting list of GrantAchievements with locale: {0} and PlatformId: {1}", locale, platformId);
            Trace.WriteLine(RewardsTestUtil.GetXML(grantAchievementsString));
            Trace.TraceInformation("Posting Achievements with URI: {0}", uri);

            Response response = this.ExecutePOSTCall(grantAchievementsString, uri, locale, platformId);
            return response;
        }

        public Response PostGrantAvatarAwards(string grantAvatarAwardsString, string locale, string platformId, string gameId)
        {
            //GrantAvatarAssets ga = xhelp.LoadXml<GrantAvatarAssets>(xhelp.StripNamespaces(grantAvatarAwardsString));
            SetupSTSAuthentication(AuthenticationMethod.UserToken, uint.Parse(gameId), uint.Parse(platformId));

            string uri = this.RewardsService_fullUri + Constants.GrantAvatarAwards_RelativePathAndQuery;

            Trace.TraceInformation("Submitting list of GrantAvatarAwards with locale: {0} and PlatformId: {1}", locale, platformId);
            Trace.WriteLine(RewardsTestUtil.GetXML(grantAvatarAwardsString));
            Trace.TraceInformation("Posting Achievements with URI: {0}", uri);

            Response response = this.ExecutePOSTCall(grantAvatarAwardsString, uri, locale, platformId);
            return response;
        }



        public Response GetDatablob(string datablobId, string locale, string platformId, string gameId)
        {
            this.UpdateStsToken(uint.Parse(gameId), uint.Parse(platformId));

            string fullUri = this.GameDataService_fullUri + Constants.GetDataBlob_RelativePathAndQuery;
            fullUri = fullUri.Replace("{DataBlobId}", datablobId);
            Trace.TraceInformation("Calling GetDatablob with values: {0}", fullUri);
            Response response = this.ExecuteWebServiceCall(fullUri, locale, platformId);
            return response;
        }

        public Response GetAchievements(string gameId, string locale, string platformId)
        {
            this.UpdateStsToken(uint.Parse(gameId), uint.Parse(platformId));

            string fullUri = this.GameDataService_fullUri + Constants.GetAchievements_RelativePathAndQuery;
            fullUri = fullUri.Replace("{gameId}", gameId);

            Trace.TraceInformation("Calling GetAchievements with values: {0}", fullUri);

            Response response = this.ExecuteWebServiceCall(fullUri, locale, platformId);
            return response;
        }

        public Response GetAvatarAwardsAssets(string gameId, string locale, string platformId)
        {
            SetupSTSAuthentication(AuthenticationMethod.UserToken, uint.Parse(gameId), uint.Parse(platformId));

            string fullUri = this.GameDataService_fullUri + Constants.GetAvatarAwardsAssets_RelativePathAndQuery;
            fullUri = fullUri.Replace("{gameId}", gameId);

            Trace.TraceInformation("Calling GetAchievements with values: {0}", fullUri);

            Response response = this.ExecuteWebServiceCall(fullUri, locale, platformId);
            return response;
        }

        public Response GetLeaderboard(string gameId, string variant, string property, string rankStart, string dataGroup, string numRows, string locale, string platformId, string socialGraph)
        {
            this.UpdateStsToken(uint.Parse(gameId), uint.Parse(platformId));

            string fullUri = this.GameDataService_fullUri + Constants.GetLeaderBoard_RelativePathAndQuery;
            fullUri = fullUri.Replace("{gameId}", gameId);
            fullUri = fullUri.Replace("{variant}", variant);
            fullUri = fullUri.Replace("{property}", property);
            fullUri = fullUri.Replace("{datagroup}", dataGroup);
            fullUri = fullUri.Replace("{numRows}", numRows);
            fullUri = fullUri.Replace("{rankStart}", rankStart);
            fullUri = fullUri.Replace("{socialGraph}", socialGraph);

            Trace.TraceInformation("Calling GetLeaderboard with values: {0}", fullUri);

            Response response = this.ExecuteWebServiceCall(fullUri, locale, platformId.ToString());
            return response;
        }

        public Response GetProfile(string locale, uint titleId, string platformId, string sectionFlags)
        {
            Response response = this.GetProfile(locale, titleId, platformId, sectionFlags, null);
            return response;
        }

        public Response GetProfile(string locale, uint titleId, string platformId, string sectionFlags, string gamertag)
        {
            this.UpdateStsToken(titleId, uint.Parse(platformId));

            string fullUri = this.ProfileService_fullUri + Constants.GetProfile_RelativePathAndQuery;
            fullUri = fullUri.Replace("{sectionflags}", sectionFlags);
            fullUri = ReplaceOptionalQueryParams(fullUri, "gamertag", gamertag);

            Trace.TraceInformation("Calling GetProfile with values: {0}", fullUri);

            Response response = this.ExecuteWebServiceCall(fullUri, locale, platformId);
            return response;
        }


        public Response GetProfilePartner(string locale, uint titleId, string platformId, string sectionFlags, string friendsSectionFlags, string gamertag)
        {
            return GetProfilePartner(locale, titleId, platformId, sectionFlags, friendsSectionFlags, gamertag, AuthenticationMethod.PartnerToken);
        }

        /// <summary>
        /// Get a response for the Get Profile from the Profile Partner service. For a valid call, only one of friendsSectionFlags and gamertag should be set (at most).
        /// </summary>
        /// <param name="locale"></param>
        /// <param name="titleId"></param>
        /// <param name="platformId"></param>
        /// <param name="sectionFlags">SectionFlag used for displaying data for user</param>
        /// <param name="friendsSectionFlags">optional: SectionFlag used for displaying data for friends of profile</param>
        /// <param name="gamertag">optional: Gamertag of profile to retrieve</param>
        /// <returns>Response based upon prams passed in, contains ProfileEx object</returns>
        public Response GetProfilePartner(string locale, uint titleId, string platformId, string sectionFlags, string friendsSectionFlags, string gamertag, AuthenticationMethod authMethod)
        {
            SetupSTSAuthentication(authMethod, titleId, uint.Parse(platformId));

            string fullUri = this.ProfilePartnerService_fullUri + Constants.GetProfilePartner_RelativePathAndQuery;
            fullUri = fullUri.Replace("{sectionFlags}", sectionFlags);
            fullUri = ReplaceOptionalQueryParams(fullUri, "friendsSectionFlags", friendsSectionFlags);
            fullUri = ReplaceOptionalQueryParams(fullUri, "gamertag", gamertag);

            Trace.TraceInformation("Calling GetProfilePartner with values: {0}", fullUri);

            Response response = this.ExecuteWebServiceCall(fullUri, locale, platformId);
            return response;
        }

        public Response PostProfilePartner(string profileString, string locale, string platformId, uint titleId)
        {
           return PostProfilePartner(profileString, locale, platformId, titleId, AuthenticationMethod.PartnerToken);
        }

        public Response PostProfilePartner(string profileString, string locale, string platformId, uint titleId, AuthenticationMethod authMethod)
        {
            SetupSTSAuthentication(authMethod, titleId, uint.Parse(platformId));

            string uri = this.ProfilePartnerService_fullUri + Constants.PostProfile_RelativePathAndQuery;

            Trace.TraceInformation("Submitting a Profile with locale: {0} and PlatformId: {1}", locale, platformId);
            Trace.WriteLine(RewardsTestUtil.GetXML(profileString));
            Trace.TraceInformation("Posting profile with URI: {0}", uri);

            Response response = this.ExecutePOSTCall(profileString, uri, locale, platformId);
            return response;
        }

        public Response PostPresence(string locale, string platformId, uint titleId)
        {
            return PostPresence(locale, platformId, titleId, AuthenticationMethod.PartnerToken);
        }

        public Response PostPresence(string locale, string platformId, uint titleId, AuthenticationMethod authMethod)
        {
            SetupSTSAuthentication(authMethod, titleId, uint.Parse(platformId));

            string uri = this.PresencePartnerService_fullUri + Constants.PostPresence_RelativePathAndQuery;

            Trace.TraceInformation("Submitting Presence with locale: {0} and PlatformId: {1}", locale, platformId);
            Trace.TraceInformation("Posting presence with URI: {0}", uri);

            Response response = this.ExecutePOSTCall(null, uri, locale, platformId);
            return response;
        }

        public Response FreeGamertagChange(string gamertag, string locale, string platformId, string titleId)
        {
            return  FreeGamertagChange(gamertag, locale, platformId, titleId, AuthenticationMethod.PartnerToken);
        
        }

        public Response FreeGamertagChange(string gamertag, string locale, string platformId, string titleId, AuthenticationMethod authMethod)
        {
            SetupSTSAuthentication(authMethod, uint.Parse(titleId), uint.Parse(platformId));

            string uri = this.ProfilePartnerService_fullUri + Constants.FreeGamertagChange_RelativePathAndQuery;

            uri = uri.Replace("{gamertag}", gamertag);

            Trace.TraceInformation("Submitting FreeGamertagChange with locale: {0} and PlatformId: {1}", locale, platformId);
            Trace.TraceInformation("Posting FreeGamertagChange with URI: {0}", uri);

            Response response = this.ExecutePOSTCall(null, uri, locale, platformId);
            return response;
        }

        public Response GetGamesPartnerService(string titleId, string gamertags, string pageStart, string pageCount, string locale, string platformId)
        {
            return GetGamesPartnerService(titleId, gamertags, pageStart, pageCount, locale, platformId, AuthenticationMethod.PartnerToken);
        
        }

        /// <summary>
        /// Calls the get Games web service on the UserDataPartnerService.
        /// </summary>
        /// <param name="titleId">titleId for the application that is calling into the service to get the games.</param>
        /// <param name="gamertags">Comma-delimeted list of gamertags used for comparing games</param>
        /// <param name="pageStart">Optional.  This specifies the zero-based page. Defaults to 0.</param>
        /// <param name="pageCount">Optional.  This specifies the max number of games returned. Defaults to 100.</param>
        /// <param name="locale">locale for games</param>
        /// <param name="platformId">platform Id for games</param>
        /// <returns>Response for service call to get Games</returns>
        public Response GetGamesPartnerService(string titleId, string gamertags, string pageStart, string pageCount, string locale, string platformId, AuthenticationMethod authMethod)
        {
            SetupSTSAuthentication(authMethod, uint.Parse(titleId), uint.Parse(platformId));

            string fullUri = this.GameDataPartnerService_fullUri + Constants.GetGames_RelativePathAndQuery;

            fullUri = fullUri.Replace("{gamertags}", gamertags);
            fullUri = ReplaceOptionalQueryParams(fullUri, "pageStart", pageStart);
            fullUri = ReplaceOptionalQueryParams(fullUri, "pageCount", pageCount);

            Trace.TraceInformation("Calling GetGames with: {0}", fullUri);

            Response response = this.ExecuteWebServiceCall(fullUri, locale, platformId);

            return response;
        }

        public Response GetAchievementsPartnerService(string gamertags, string gameId, uint titleId, string locale, uint platformId)
        {
            return GetAchievementsPartnerService(gamertags, gameId, titleId, locale, platformId, AuthenticationMethod.PartnerToken);
        }

        /// <summary>
        /// Does a POST to call the Get Achievements web service from UserDataPartnerService
        /// </summary>
        /// <param name="gamertags">Comma-delimeted list of gamertags</param>
        /// <param name="gameId">The gameId of the game for which to get achievements</param>
        /// <param name="titleId">LiveApp titleId</param>
        /// <param name="locale">Locale of game</param>
        /// <param name="platformId">LiveApp platformId</param>
        /// <returns>Response for service POST call to GetAchievements</returns>
        public Response GetAchievementsPartnerService(string gamertags, string gameId, uint titleId, string locale, uint platformId, AuthenticationMethod authMethod)
        {
            SetupSTSAuthentication(authMethod, titleId, platformId);

            string fullUri = this.GameDataPartnerService_fullUri + Constants.GetAchievementsPartner_RelativePathAndQuery;
            fullUri = fullUri.Replace("{gamertags}", gamertags);
            fullUri = fullUri.Replace("{gameId}", gameId);

            Trace.TraceInformation("Calling GetAchievements (Partner) with: {0}", fullUri);

            Response response = this.ExecuteWebServiceCall(fullUri, locale, platformId.ToString());
            return response;
        }

        public Response GetMessageSummaries(string hashCode, string titleId, string locale, string platformId)
        {
            return GetMessageSummaries(hashCode, titleId, locale, platformId, AuthenticationMethod.PartnerToken);
        }

        /// <summary>
        /// Does a GET to call the Get Message web service from MessagePartnerService
        /// </summary>
        /// <param name="hashCode">OPTIONAL: specifies the hash code of the messages</param>
        /// <param name="titleId">titleId for the application that is calling into the service to get the games</param>
        /// <param name="locale">locale for games</param>
        /// <param name="platformId">platform Id for games</param>
        /// <returns>Response for service call to GetMessageSummaries</returns>
        public Response GetMessageSummaries(string hashCode, string titleId, string locale, string platformId, AuthenticationMethod authMethod)
        {
            SetupSTSAuthentication(authMethod, uint.Parse(titleId), uint.Parse(platformId));

            string fullUri = this.MessagePartnerService_fullUri + Constants.GetMessageSummaries_RelativePathAndQuery;
            fullUri = ReplaceOptionalQueryParams(fullUri, "hashCode", hashCode);

            Trace.TraceInformation("Calling GetMessageSummaries with: {0}", fullUri);

            Response response = this.ExecuteWebServiceCall(fullUri, locale, platformId);

            return response;
        }

        public Response GetMessageDetails(string messageId, string titleId, string locale, string platformId)
        {
            return GetMessageDetails(messageId, titleId,locale, platformId, AuthenticationMethod.PartnerToken);
        }

        /// <summary>
        /// Does a GET call to the Get Message Details web service from MessagePartnerService
        /// </summary>
        /// <param name="messageId">Id of the message you wish to get</param>
        /// <param name="titleId">titleId for the application that is calling into the service to get the games</param>
        /// <param name="locale">locale for games</param>
        /// <param name="platformId">platform Id for games</param>
        /// <returns>Response for service call to GetMessages</returns>
        public Response GetMessageDetails(string messageId, string titleId, string locale, string platformId, AuthenticationMethod authMethod)
        {
            SetupSTSAuthentication(authMethod, uint.Parse(titleId), uint.Parse(platformId));

            string fullUri = this.MessagePartnerService_fullUri + Constants.GetMessageDetails_RelativePathAndQuery;
            fullUri = fullUri.Replace("{messageId}", messageId);

            Trace.TraceInformation("Calling GetMessages with: {0}", fullUri);

            Response response = this.ExecuteWebServiceCall(fullUri, locale, platformId);

            return response;
        }

        public Response SendMessage(string strMessagesRequest, string titleId, string locale, string platformId)
        {
            return SendMessage(strMessagesRequest, titleId, locale, platformId, AuthenticationMethod.PartnerToken);
        }

        /// <summary>
        /// Does a POST call to the POST Message web service from MessagePartnerService to send a text message
        /// </summary>
        /// <param name="strMessagesRequest">string version of MessagesRequest containing GamerTags and message text</param>
        /// <param name="titleId">titleId for the application that is calling into the service to get the games</param>
        /// <param name="locale">locale for games</param>
        /// <param name="platformId">platform Id for games</param>
        /// <returns>Response for service call to PostMessages</returns>
        public Response SendMessage(string strMessagesRequest, string titleId, string locale, string platformId, AuthenticationMethod authMethod)
        {
            SetupSTSAuthentication(authMethod, uint.Parse(titleId), uint.Parse(platformId));

            string fullUri = this.MessagePartnerService_fullUri + Constants.SendMessages_RelativePathAndQuery;

            Trace.TraceInformation("Submitting MessagesRequest with locale: {0} and PlatformId: {1}", locale, platformId);
            Trace.WriteLine(RewardsTestUtil.GetXML(strMessagesRequest));
            Trace.TraceInformation("Posting MessagesRequest with URI: {0}", fullUri);

            Response response = this.ExecutePOSTCall(strMessagesRequest, fullUri, locale, platformId);
            return response;
        }

        public Response DeleteMessage(string messageId, string titleId, string locale, string platformId)
        {
            return DeleteMessage(messageId, titleId, locale, platformId, AuthenticationMethod.PartnerToken);        
        }
        
        /// <summary>
        /// Does a DELETE call to the Message web service from MessagePartnerService to delete a text message
        /// </summary>
        /// <param name="messageId">messageId of message to delete</param>
        /// <param name="titleId">titleId for the application that is calling into the service to get the games</param>
        /// <param name="locale">locale for games</param>
        /// <param name="platformId">platform Id for games</param>
        /// <returns>Response for service call to DeleteMessage</returns>
        public Response DeleteMessage(string messageId, string titleId, string locale, string platformId, AuthenticationMethod authMethod)
        {
            SetupSTSAuthentication(authMethod, uint.Parse(titleId), uint.Parse(platformId));

            string fullUri = this.MessagePartnerService_fullUri + Constants.DeleteMessage_RelativePathAndQuery;
            fullUri = fullUri.Replace("{messageId}", messageId);

            Trace.TraceInformation("Calling DeleteMessage with: {0}", fullUri);

            Response response = this.ExecuteDELETECall(fullUri, locale, platformId);
            return response;
        }

        public Response DeleteMessageAndBlockGamertag(string messageId, string titleId, string locale, string platformId)
        {
            return DeleteMessageAndBlockGamertag(messageId, titleId, locale, platformId, AuthenticationMethod.PartnerToken);
        }

        /// <summary>
        /// Does a POST call to the Message web service from MessagePartnerService to Block a user
        /// </summary>
        /// <param name="messageId">messageId to delete after blocking the person</param>
        /// <param name="titleId">titleId for the application that is calling into the service to get the games</param>
        /// <param name="locale">locale for games</param>
        /// <param name="platformId">platform Id for games</param>
        /// <returns>Response for service call to Block Messages</returns>
        public Response DeleteMessageAndBlockGamertag(string messageId, string titleId, string locale, string platformId, AuthenticationMethod authMethod)
        {
            SetupSTSAuthentication(authMethod, uint.Parse(titleId), uint.Parse(platformId));

            string fullUri = this.MessagePartnerService_fullUri + Constants.DeleteMessageAndBlockGamertag_RelativePathAndQuery;
            fullUri = fullUri.Replace("{messageId}", messageId);

            Trace.TraceInformation("Calling DeleteMessageAndBlockGamertag with: {0}", fullUri);

            Response response = this.ExecuteDELETECall(fullUri, locale, platformId);

            return response;
        }

        public Response AddFriend(string gamertag, string titleId, string locale, string platformId)
        {
            return AddFriend(gamertag, titleId, locale, platformId, AuthenticationMethod.PartnerToken);
        }

        /// <summary>
        /// Does a POST call to the Friends Web Service from FriendPartnerService to add a friend
        /// </summary>
        /// <param name="gamertag">gamertag of pers you want to add</param>
        /// <param name="titleId">titleId for the application that is calling into the service to get the games</param>
        /// <param name="locale">locale for games</param>
        /// <param name="platformId">platform Id for games</param>
        /// <returns>Response for service call to Add Friends</returns>
        public Response AddFriend(string gamertag, string titleId, string locale, string platformId, AuthenticationMethod authMethod)
        {
            Thread.Sleep(61000);
            
            SetupSTSAuthentication(authMethod, uint.Parse(titleId), uint.Parse(platformId));

            string fullUri = this.FriendPartnerService_fullUri + Constants.AddFriend_RelativePathAndQuery;
            fullUri = fullUri.Replace("{gamertag}", gamertag);

            Trace.TraceInformation("Calling AddFriend with: {0}", fullUri);

            Response response = this.ExecutePOSTCall(null, fullUri, locale, platformId);

            return response;
        }
        public Response AcceptFriend(string gamertag, string titleId, string locale, string platformId)
        {
            return AcceptFriend(gamertag, titleId, locale, platformId, AuthenticationMethod.PartnerToken);
        }

        /// <summary>
        /// Does a POST call to the Friends Web Service from FriendPartnerService to accept a friend
        /// </summary>
        /// <param name="gamertag">gamertag of pers you want to accept</param>
        /// <param name="titleId">titleId for the application that is calling into the service to get the games</param>
        /// <param name="locale">locale for games</param>
        /// <param name="platformId">platform Id for games</param>
        /// <returns>Response for service call to accept Friends</returns>
        public Response AcceptFriend(string gamertag, string titleId, string locale, string platformId, AuthenticationMethod authMethod)
        {
            SetupSTSAuthentication(authMethod, uint.Parse(titleId), uint.Parse(platformId));

            string fullUri = this.FriendPartnerService_fullUri + Constants.AcceptFriend_RelativePathAndQuery;
            fullUri = fullUri.Replace("{gamertag}", gamertag);

            Trace.TraceInformation("Calling AcceptFriend with: {0}", fullUri);

            Response response = this.ExecutePOSTCall(null, fullUri, locale, platformId);

            return response;
        }

        public Response DeclineFriend(string gamertag, string titleId, string locale, string platformId)
        {
            return DeclineFriend(gamertag, titleId, locale, platformId, AuthenticationMethod.PartnerToken);
        }

        /// <summary>
        /// Does a POST call to the Friends Web Service from FriendPartnerService to reject a friend
        /// </summary>
        /// <param name="gamertag">gamertag of pers you want to reject</param>
        /// <param name="titleId">titleId for the application that is calling into the service to get the games</param>
        /// <param name="locale">locale for games</param>
        /// <param name="platformId">platform Id for games</param>
        /// <returns>Response for service call to reject Friends</returns>
        public Response DeclineFriend(string gamertag, string titleId, string locale, string platformId, AuthenticationMethod authMethod)
        {
            SetupSTSAuthentication(authMethod, uint.Parse(titleId), uint.Parse(platformId));

            string fullUri = this.FriendPartnerService_fullUri + Constants.DeclineFriend_RelativePathAndQuery;
            fullUri = fullUri.Replace("{gamertag}", gamertag);

            Trace.TraceInformation("Calling DeclineFriend with: {0}", fullUri);

            Response response = this.ExecutePOSTCall(null, fullUri, locale, platformId);
            return response;
        }

        public Response RemoveFriend(string gamertag, string titleId, string locale, string platformId)
        {
            return RemoveFriend(gamertag, titleId, locale, platformId, AuthenticationMethod.PartnerToken);        
        }

        /// <summary>
        /// Does a DELETE call to the Friends Web Service from FriendPartnerService to delete a friend
        /// </summary>
        /// <param name="gamertag">gamertag of pers you want to reject</param>
        /// <param name="titleId">titleId for the application that is calling into the service to get the games</param>
        /// <param name="locale">locale for games</param>
        /// <param name="platformId">platform Id for games</param>
        /// <returns>Response for service call to reject Friends</returns>
        public Response RemoveFriend(string gamertag, string titleId, string locale, string platformId, AuthenticationMethod authMethod)
        {
            SetupSTSAuthentication(authMethod, uint.Parse(titleId), uint.Parse(platformId));

            string fullUri = this.FriendPartnerService_fullUri + Constants.RemoveFriend_RelativePathAndQuery;
            fullUri = fullUri.Replace("{gamertag}", gamertag);

            Trace.TraceInformation("Calling RemoveFriend with: {0}", fullUri);

            Response response = this.ExecutePOSTCall(null, fullUri, locale, platformId);
            return response;
        }

        /// <summary>
        /// Used to replace or remove optional query string params
        /// </summary>
        private string ReplaceOptionalQueryParams(string fullUri, string param, string value)
        {
            if (!String.IsNullOrEmpty(value))
            {
                fullUri = fullUri.Replace("{" + param + "}", value);
            }
            else
            {
                if (fullUri.Contains("&"))
                {
                    fullUri = fullUri.Replace("&" + param + "={" + param + "}", "");
                    fullUri = fullUri.Replace("?" + param + "={" + param + "}&", "?"); //this will catch it if it's the first parameter on the query string
                }
                else // this case if for only one parameter on the query string
                {
                    fullUri = fullUri.Replace("?" + param + "={" + param + "}", "");
                }
            }
            return fullUri;
        }

        private void SetupSTSAuthentication(AuthenticationMethod authMethod, uint titleId, uint platformId)
        {
            this.userStsTicket = string.Empty;
            this.partnerStsTicket = string.Empty;

            switch (authMethod)
            {
                case AuthenticationMethod.UserToken:
                    this.UpdateStsToken(titleId, platformId);
                    break;
                case AuthenticationMethod.PartnerToken:
                    this.UpdateStsPartnerTicket(titleId, platformId);
                    break;
                case AuthenticationMethod.UserAndPartnerToken:
                    this.UpdateStsToken(titleId, platformId);
                    this.UpdateStsPartnerTicket(titleId, platformId);
                    break;
                default:
                    throw new ArgumentException("Only User Token and Partner Token Authentication allowed.");
            }
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test\Tests\FeatureVerificationTests.cs ===
﻿using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Net;
using System.Text;
using Gds.Contracts;
using Leet.Core.Platforms;
using Leet.UserGameData.DataContracts;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Test.Identity.Functional.ProfileServiceTests.CommonObjects;
using UserLib;
using System.Threading;

namespace Rewards.Test
{
    /// <summary>
    /// These tests should be run after BVTs to sign off against an environment. The tests will have deeper verification and scenario level testing
    /// </summary>
    [TestClass]
    public class FeatureVerificationTests
    {
        private TestGame testGame = TestGameUtility.GetTestGame("HexicRush");
        private TestGame LiveApp = TestGameUtility.LiveAppTitle;
        private readonly string us_locale = "en-US";
        private readonly string blob = "I won";
        private RewardsTestScenarioLibrary testScenarios = new RewardsTestScenarioLibrary();

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        public void GetLeaderboard_RankUp()
        {
            TestUser primaryUser = AuthenticationTransport.PrimaryUser;
            RewardsTestScenarioLibrary scenarios = new RewardsTestScenarioLibrary(primaryUser.Username, primaryUser.Password);

            //Get the best score
            long bestScore = 0;
            LeaderboardResult leaderboardResult = scenarios.GetLeaderboardForBestScore(testGame, us_locale);
            if (leaderboardResult.TotalNumberOfRows == 0)
            {
                GameResult gr = scenarios.CreateGameResult(testGame, 1, 1, "blob", "Win");
                scenarios.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);
                string score = scenarios.GetStatValue(testGame, us_locale, LeaderboardPropertyType.BestScore, "BestScore");
                bestScore = long.Parse(score);
            }
            else
            {
                bestScore = leaderboardResult.Leaderboard[0].Value;
            }

            //Post higher scores for each of the primary user's friends
            GameResult result = new GameResult();
            result.GameId = testGame.GameId;
            result.Outcome = "Win";
            result.Time = 100;
            result.TimeStamp = DateTime.Now;
            result.Variant = testGame.Variant;

            int i = primaryUser.Friends.Count;

            foreach (TestUser friend in primaryUser.Friends)
            {
                result.Score = bestScore + i;
                result.GameResultId = Guid.NewGuid();
                scenarios.PostGameResultForUser(result, friend.Username, friend.Password, us_locale, testGame.PlatformId, testGame.GameId);
                i--;
            }

            //Post highest score for primary user
            result.Score = bestScore + primaryUser.Friends.Count + 1;
            result.GameResultId = Guid.NewGuid();
            scenarios.PostGameResult(result, us_locale, testGame.PlatformId, testGame.GameId);
            LeaderboardResult res = scenarios.GetLeaderboardForBestScore(testGame, us_locale);

            //Make sure leaderboard ranks are in order
            //Primary user should be above all
            Assert.AreEqual(res.Leaderboard[0].User.GamerTag, primaryUser.Gamertag, "Leaderboard ranked incorrectly");

            int j = 1;
            foreach (TestUser friend in primaryUser.Friends)
            {
                Assert.AreEqual(res.Leaderboard[j].User.GamerTag, friend.Gamertag, "Leaderboard ranked incorrectly");
                j++;
            }
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Feature: All expected leaderboard stats are populated")]
        public void GetLeaderboard_VerifyAllStatsReturned()
        {
            TestGame tg = TestGameUtility.AllStatsGame;
            testScenarios.PostGameResultWithDefaultStats(tg, us_locale);

            //Post a win
            testScenarios.PostHigherScoreAndRetrieveLeaderboard(tg, us_locale, blob, "win", 20);

            //Post a loss
            testScenarios.PostGameResultWithDefaultStatsAndLoss(tg, us_locale);

            LeaderboardResult result = testScenarios.GetLeaderboardXml(tg.GameId, tg.Variant, "BestScore", 1, "W1", 100, us_locale, tg.PlatformId);

            Assert.AreEqual<string>(AuthenticationTransport.PrimaryUser.Gamertag, result.Leaderboard[0].User.GamerTag, "Invalid user was on leaderboard");

            string[] enums = Enum.GetNames(typeof(LeaderboardPropertyType));

            foreach (Entry entry in result.Leaderboard[0].Statistics)
            {
                Assert.IsTrue(enums.Contains(entry.Name), "Stat {0} is not a valid leaderboard stat", entry.Name);
                Assert.IsFalse(String.IsNullOrEmpty(entry.Value));
            }

            foreach (string item in enums)
            {
                bool foundStat = false;
                foreach (Entry entry in result.Leaderboard[0].Statistics)
                {
                    if (item == entry.Name)
                    {
                        foundStat = true;
                        break;
                    }
                }
                if (!foundStat)
                    Assert.Fail("Leaderboard stat {0} was not found in the returned leaderboard", item);
            }
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Feature: Verify that GetAchievements returns all properties for first achievement")]
        public void GetAchievements_VerifyBasicAchievementProperties()
        {
            TestGame achGame = TestGameUtility.GetFirstGameWithAchievements();
            AchievementsResult achievements = testScenarios.GetAchievementsXml(achGame.GameId, us_locale, achGame.PlatformId);
            RewardsTestScenarioLibrary.VerifyAchievementProperties(achievements.Achievements[0], false);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Feature: Best time datablob is stored")]
        public void GetDatablob_BestTimeDatablob_VerifyBlobAccurate()
        {
            TestGame testgame2 = TestGameUtility.BestTimeGame;

            GameResult gr = testScenarios.CreateGameResult(testgame2, null, 1, blob, "Win");
            testScenarios.PostGameResult(gr, us_locale, testgame2.PlatformId, testgame2.GameId);

            LeaderboardResult bestTimeResult = testScenarios.PostHigherTimeAndRetrieveLeaderboard(testgame2, us_locale, blob, "Win", 1);
            Guid bestTimeId = new Guid(testScenarios.CheckLeaderboardResult(bestTimeResult, LeaderboardPropertyType.BestTimeDataBlobId));

            DatablobResult result = testScenarios.GetDatablobXml(bestTimeId.ToString(), us_locale, testgame2.PlatformId, testgame2.GameId);
            string actualBlob = Encoding.UTF8.GetString(result.Blob);

            Assert.AreEqual(blob, actualBlob, "Blob string did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Feature: Single achievement is granted")]
        public void GrantAchievements_SingleAchievement_VerifyGranted()
        {
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(true);
            TestGame hexicRush = TestGameUtility.GetTestGame("HexicRush");
            GrantAchievements toGrant = lib.CreateAchievements_SingleUnearned(hexicRush, Guid.NewGuid().ToString(), us_locale);
            lib.GrantAchievements(toGrant, us_locale, hexicRush.PlatformId);

            AchievementsResult result = lib.GetEarnedAchievements(hexicRush.GameId, us_locale, hexicRush.PlatformId);
            bool hasAchievement = false;

            foreach (var item in result.Achievements)
            {
                if (item.Key.Equals(toGrant.Achievements[0].Key, StringComparison.OrdinalIgnoreCase))
                {
                    hasAchievement = true;
                    break;
                }
            }

            Assert.IsTrue(hasAchievement, "Achievement was not granted");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Feature: All ProfileProperties are present for the user. User has at least one achievement and friend")]
        public void GetProfile_MyView_VerifyBasicXboxLivePropertiesGamesAndAchievements()
        {
            TestGame hexicRush = TestGameUtility.GetTestGame("HexicRush");
            Profile pro = testScenarios.GetProfileMyView(us_locale, PlatformType.Mobile, Constants.AllProfileSections);

            RewardsTestScenarioLibrary.VerifyBasicXboxLiveProperties(pro);

            try
            {
                GrantAchievements toGrant = testScenarios.CreateAchievements_SingleUnearned(hexicRush, Guid.Empty.ToString(), us_locale);
                if (toGrant != null)
                {
                    testScenarios.GrantAchievements(toGrant, us_locale, hexicRush.PlatformId);
                }
            }
            catch (InvalidOperationException) { /*The user already has multiple achievements at this stage*/ }

            Profile updatedProfile = testScenarios.GetProfileMyView(us_locale, PlatformType.Mobile, Constants.AllProfileSections);
            Assert.IsTrue(updatedProfile.RecentAchievements.Count > 0, "No achievements were found");
            Assert.IsTrue(updatedProfile.RecentGames.Count > 0, "No achievements were found");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Feature: All ProfileProperties for user's friend are populated")]
        public void GetProfile_YouView_VerifyBasicXboxLivePropertiesForFriendAccount()
        {
            TestUser user = AuthenticationTransport.PrimaryUser;
            TestUser friend = AuthenticationTransport.PrimaryUser.Friends[0];
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(user.Username, user.Password);
            Profile friendProfile = lib.GetProfileYouView(us_locale, PlatformType.Mobile, Constants.AllProfileSections, friend.Gamertag);

            RewardsTestScenarioLibrary.VerifyBasicXboxLiveProperties(friendProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Feature: Verify TotalGamesPlayed is incremented for GetGames")]
        public void GetGames_TotalGamesPlayed_Verify()
        {
            TestGame tg1 = TestGameUtility.GetTestGame("HexicRush");
            TestGame tg2 = TestGameUtility.GetTestGame("SeaLegend");
            Account acct = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary newScenarios = new RewardsTestScenarioLibrary(acct);

            Response result = newScenarios.PostGameResultWithDefaultStats(tg1, us_locale);
            if (result.StatusCode != System.Net.HttpStatusCode.Accepted)
            {
                Assert.Inconclusive("PostGameResult failed - test cannot be completed.");
            }
            result = newScenarios.PostGameResultWithDefaultStats(tg2, us_locale);
            if (result.StatusCode != System.Net.HttpStatusCode.Accepted)
            {
                Assert.Inconclusive("PostGameResult failed - test cannot be completed.");
            }

            Gds.Contracts.Games games = newScenarios.GetGamesXml(acct.XblUser.Gamertag, us_locale);

            Assert.AreEqual<UInt32>(2, games.UserGamesCollection[0].TotalGamesPlayed, "Total games played does not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify PostPresence updates the LastSeenDateTime")]
        public void PostPresence_VerifyTimestamp()
        {
            int wait = 125; // see bug #5444 for 'wait' details

            Response result = testScenarios.PostPresence(us_locale);
            if (result.StatusCode != HttpStatusCode.OK)
            {
                Assert.Inconclusive("PostPresence failed - test cannot be completed.");
            }
            ProfileEx pro = testScenarios.GetProfilePartnerXml(us_locale, SectionFlags.PresenceInfo);
            DateTime firstTime = pro.PresenceInfo.LastSeenDateTime;
            Trace.TraceInformation("First POST timestamp: {0}", firstTime.ToString());
            RewardsTestUtil.Wait(wait);

            result = testScenarios.PostPresence(us_locale);
            if (result.StatusCode != HttpStatusCode.OK)
            {
                Assert.Inconclusive("PostPresence failed - test cannot be completed.");
            }
            pro = testScenarios.GetProfilePartnerXml(us_locale, SectionFlags.PresenceInfo);
            DateTime secondTime = pro.PresenceInfo.LastSeenDateTime;
            Trace.TraceInformation("Second POST timestamp: {0}", secondTime.ToString());

            Assert.IsNotNull(pro.PresenceInfo, "No presence info is set.");
            Assert.IsNotNull(pro.PresenceInfo.LastSeenDateTime, "LastSeenDateTime is not set.");
            Assert.AreNotEqual(firstTime, secondTime, "Incorrect timestamp returned - timestamp did not change");
            Assert.IsTrue(secondTime.Subtract(firstTime).Seconds < (wait + 5), "Incorrect timestamp returned - time difference is greater than {0} seconds", wait + 5);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify GetPresence returns the expected presence values")]
        public void GetPresence_VerifyPresenceInfo()
        {
            // By default, the presence posted will be the Live Mobile App. Grab the GameID used in the current environment
            uint AppTitleID = LiveApp.GameId;

            Response result = testScenarios.PostPresence(us_locale);
            if (result.StatusCode != HttpStatusCode.OK)
            {
                Assert.Inconclusive("PostPresence failed - test cannot be completed.");
            }

            ProfileEx pro = testScenarios.GetProfilePartnerXml(us_locale, SectionFlags.PresenceInfo);

            Assert.IsNotNull(pro.PresenceInfo, "No presence info is set.");
            Assert.AreEqual((uint)PresenceStatus.Offline, pro.PresenceInfo.OnlineState, "OnlineState is incorrect.");
            Assert.AreEqual(AppTitleID, pro.PresenceInfo.LastSeenTitleId, "LastSeenTitleId is incorrect.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify user is able to get privacy settings for self")]
        public void GetProfilePartner_VerifyGettingPrivacySettings_Self()
        {
            ProfileEx actualProfile = testScenarios.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            Assert.IsNotNull(actualProfile.PrivacySettings, "No privacy info is set.");
            RewardsTestScenarioLibrary.VerifyPrivacySettings(actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify user is able to update privacy settings with POST profile and they are properly set")]
        public void PostProfilePartner_VerifyUpdatingPrivacySettings()
        {
            ProfileEx profile = testScenarios.CreateProfileWithRandomPrivacySettings();
            Response result = testScenarios.PostProfilePartner(profile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "PostPrivacySettings failed");
            RewardsTestUtil.Wait(90);

            ProfileEx actualProfile = testScenarios.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);
            Assert.IsNotNull(actualProfile.PrivacySettings, "No privacy info is set.");
            RewardsTestScenarioLibrary.VerifyProfilePrivacySettings(profile, actualProfile);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify proper data is returned based on privacy settings for self")]
        public void GetProfilePartner_VerifyPrivacySettings_Self()
        {
            ProfileEx actualProfile = testScenarios.GetProfilePartnerXml(us_locale, Constants.AllProfileSections);
            RewardsTestScenarioLibrary.VerifyPrivacySettingsApplied(actualProfile, 0);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify calling without a hascode returns all message summaries for a user")]
        public void GetMessageSummaries_NoHashCode()
        {
            MessageSummariesResponse messages = testScenarios.GetMessageSummaries(LiveApp.GameId, us_locale, LiveApp.PlatformId);

            //TODO: This will probly change to make sure the response is not a 304 and messages is not null 
            Assert.IsNotNull(messages, "Messages should not be null.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify basic functionality for the GetMessageSummaries API properties")]
        public void GetMessageDetails_ValidMessageId()
        {
            uint messageId = testScenarios.GetValidMessageId();
            MessageDetails messageDetails = testScenarios.GetMessageDetails(messageId, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(messageId, messageDetails.MessageId, "Incorrect message details returned.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify you can send a message to one user and that user can get it")]
        public void SendMessage_OneUser_NotSelf()
        {
            new RewardsTestScenarioLibrary(AuthenticationTransport.PrimaryUser.Friends[0].Username, AuthenticationTransport.PrimaryUser.Friends[0].Password).SetupUserForMessaging();
            testScenarios.SetupUserForMessaging();

            string messageText = TestHelper.GetRandomString(20);
            SendMessageRequest sendMessageRequest = testScenarios.CreateSendMessageRequest(AuthenticationTransport.PrimaryUser.Friends[0].Gamertag, messageText);
            Response response = testScenarios.SendMessage(sendMessageRequest, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling SendMessage failed");

            RewardsTestScenarioLibrary friendTransport = new RewardsTestScenarioLibrary(AuthenticationTransport.PrimaryUser.Friends[0].Username, AuthenticationTransport.PrimaryUser.Friends[0].Password);

            bool result = friendTransport.VerifyMessageExistsPoll(messageText);

            Assert.IsTrue(result, "Message was not found.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify after you delete a message it does not show up the next time you get message summaries")]
        public void DeleteMessage_P1()
        {
            uint messageId = testScenarios.GetValidMessageId();

            MessageSummariesResponse originalMessages = testScenarios.GetMessageSummaries(LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Response response = testScenarios.DeleteMessage(messageId, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling SendMessage failed");

            MessageSummariesResponse messagesAfterDelete = testScenarios.GetMessageSummaries(LiveApp.GameId, us_locale, LiveApp.PlatformId);

            foreach (MessageSummary currMessage in messagesAfterDelete.Summaries)
            {
                if (currMessage.MessageId == messageId)
                {
                    Assert.Fail("Message was not deleted.");
                }
            }
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify after you delete a message and block the user, the message does not show up and the user cannot send you any messages")]
        public void DeleteMessageAndBlockGamertag_P1()
        {
            Account newUser = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(newUser);
            string gamertag = newUser.XblUser.Gamertag;

            testScenarios.SetupUserForMessaging();
            lib.SetupUserForMessaging();

            //send message to PrimaryUser from newUser and get messageId of that message
            string messageText = TestHelper.GetRandomString(20);
            SendMessageRequest sendMessageRequest = lib.CreateSendMessageRequest(AuthenticationTransport.PrimaryUser.Gamertag, messageText);
            Response sendResponse = lib.SendMessage(sendMessageRequest, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            MessageSummariesResponse originalMessages = testScenarios.GetMessageSummaries(LiveApp.GameId, us_locale, LiveApp.PlatformId);

            uint messageId = 0;

            testScenarios.VerifyMessageExistsPoll(messageText, out messageId);

            Assert.IsTrue(messageId != 0, "Sent Message was not found");

            //Delete Message and Block User
            Response deleteAndBlockResponse = testScenarios.DeleteMessageAndBlockGamertag(messageId, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.OK, deleteAndBlockResponse.StatusCode, "Calling DeleteMessageAndBlockGamertag failed");

            //Verify message is deleted
            MessageSummariesResponse messagesAfterDelete = testScenarios.GetMessageSummaries(LiveApp.GameId, us_locale, LiveApp.PlatformId);

            foreach (MessageSummary currMessage in messagesAfterDelete.Summaries)
            {
                if (currMessage.MessageId == messageId)
                {
                    Assert.Fail("Message was not deleted.");
                }
            }

            //Verify user is blocked by sending another message and verifying the user does not get it
            string messageText2 = TestHelper.GetRandomString(20);
            SendMessageRequest sendMessageRequest2 = lib.CreateSendMessageRequest(AuthenticationTransport.PrimaryUser.Gamertag, messageText);
            Response sendResponse2 = lib.SendMessage(sendMessageRequest2, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            bool result = testScenarios.VerifyMessageExistsPoll(messageText2);

            Assert.IsFalse(result, "Blocked User was allowed to send a message.");

        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify a user's gamertag change is actually changed after we call FreeGamertagChange")]
        public void FreeGamertagChange_P1()
        {
            //To run this you must put a breakpoint after a new user is created and manually edit the DB ot make that user free gamertag change eligible
            //RewardsTestScenarioLibrary adt = new RewardsTestScenarioLibrary("PTADAMDEP110090209224590@live-int.com", "password"); //le-xblob-dev01 -- bi_user_puid = 2600292641995759
            //RewardsTestScenarioLibrary adt = new RewardsTestScenarioLibrary("LL1ai03001ua6@xbltest.com", "supersecret"); //fr-FR
            //RewardsTestScenarioLibrary adt = new RewardsTestScenarioLibrary("LL53a95378i58@xbltest.com", "supersecret"); //en-US
            //RewardsTestScenarioLibrary adt = new RewardsTestScenarioLibrary("PTADAMDEP110110211272843@live-int.com", "password"); //int2
            //RewardsTestScenarioLibrary adt = new RewardsTestScenarioLibrary("PTADAMDEP110110116530201@live-int.com", "password"); //testnet
            //RewardsTestScenarioLibrary adt = new RewardsTestScenarioLibrary("LIVEnTest03@live.com", "password"); //prod

            RewardsTestScenarioLibrary adt = new RewardsTestScenarioLibrary("LL0uiee240uo0@xbltest.com", "supersecret"); //le-xblob-dev02
            
            string newRandomGamertag = "GT" + TestHelper.GetRandomString(10);

            Response response = adt.FreeGamertagChange(newRandomGamertag, LiveApp.GameId, us_locale, LiveApp.PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling FreeGamertagChange partner service failed.");

            ProfileEx profile = adt.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties);
            Assert.AreEqual(newRandomGamertag, profile.ProfileProperties[ProfileProperty.GamerTag], "Gamertag was NOT successfully changed.");
            Assert.AreEqual(false, profile.ProfileProperties[ProfileProperty.FreeGamertagChangeEligible], "User is still eligible for free gamertag change after changing it.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify when a friend request is sent, the other user can get it in their message summary list")]
        public void AddFriend_P1()
        {
            Account newFriendAccount = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary newFriend = new RewardsTestScenarioLibrary(newFriendAccount);

            Account newFriendAccount2 = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary newFriend2 = new RewardsTestScenarioLibrary(newFriendAccount2);

            Response response = newFriend.AddFriend(newFriendAccount2.XblUser.Gamertag, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling AddFriend failed.");

            uint messageId = 0;
            newFriend2.VerifyMessageExistsPoll("", newFriendAccount.XblUser.Gamertag, out messageId);

            Assert.IsTrue(messageId != 0, "Friend Request did not appear in user's Message Summary list");

            //verify friend state is set to Pending (1)
            ProfileEx profile = newFriend.GetProfilePartnerXml(us_locale, SectionFlags.FriendsList);

            Assert.IsTrue(newFriend.VerifyFriendState(profile, newFriendAccount2.XblUser.Gamertag, FriendState.Pending));
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test\Tests\BVT.cs ===
﻿using System;
using System.Collections.Generic;
using System.Net;
using System.Text;
using Gds.Contracts;
using Leet.Core.Platforms;
using Leet.UserGameData.DataContracts;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Test.Identity.Functional.ProfileServiceTests.CommonObjects;
using UserLib;

namespace Rewards.Test.Tests
{
    [TestClass]
    public class BVT
    {
        private RewardsTestScenarioLibrary testScenarios = new RewardsTestScenarioLibrary();
        private TestGame bvtTestGame = TestGameUtility.GetTestGame("HexicRush");
        private TestGame LiveApp = TestGameUtility.LiveAppTitle;
        private TestUser tu = AuthenticationTransport.PrimaryUser;
        private readonly string us_locale = "en-US";
        private readonly string blob = "I can haz more achievements";

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(0)]
        public void GetLeaderboardBVT()
        {
            LeaderboardResult initialLeaderboard = testScenarios.GetLeaderboardForBestScore(bvtTestGame, us_locale);
            if (initialLeaderboard.TotalNumberOfRows == 0)
            {
                testScenarios.PostGameResultWithDefaultStats(bvtTestGame, us_locale);
                initialLeaderboard = testScenarios.GetLeaderboardForBestScore(bvtTestGame, us_locale);
            }

            LeaderboardResult newLeaderboard = testScenarios.PostHigherScoreAndRetrieveLeaderboard(bvtTestGame, us_locale, blob, "Win", 1);

            long initialScore = long.Parse(testScenarios.CheckLeaderboardResult(initialLeaderboard, LeaderboardPropertyType.BestScore));
            long actualScore = long.Parse(testScenarios.CheckLeaderboardResult(newLeaderboard, LeaderboardPropertyType.BestScore));
            long expectedScore = initialScore + 1;

            Assert.AreEqual<long>(expectedScore, actualScore, "Leaderboard was not updated with high score");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(0)]
        public void PostGameResult_BVT()
        {
            Response result = testScenarios.PostGameResultWithDefaultStats(bvtTestGame, us_locale);
            Assert.AreEqual(HttpStatusCode.Accepted, result.StatusCode, "HTTP status indicates a failure");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(0)]
        public void GetDatablob_BVT()
        {
            LeaderboardResult result = testScenarios.GetLeaderboardForBestScore(bvtTestGame, us_locale);
            if (result.TotalNumberOfRows == 0)
            {
                testScenarios.PostGameResultWithDefaultStats(bvtTestGame, us_locale);
                result = testScenarios.GetLeaderboardForBestScore(bvtTestGame, us_locale);
            }

            string datablobId = testScenarios.CheckLeaderboardResult(result, LeaderboardPropertyType.BestScoreDataBlobId);
            if (string.IsNullOrEmpty(datablobId))
            {
                testScenarios.PostGameResultWithDefaultStats(bvtTestGame, us_locale);
                result = testScenarios.GetLeaderboardForBestScore(bvtTestGame, us_locale);
                datablobId = testScenarios.CheckLeaderboardResult(result, LeaderboardPropertyType.BestScoreDataBlobId);
            }

            DatablobResult blobresult = testScenarios.GetDatablobXml(datablobId, us_locale, bvtTestGame.PlatformId, bvtTestGame.GameId);
            Assert.IsNotNull(Encoding.UTF8.GetString(blobresult.Blob), "Blob was null or empty");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(0)]
        public void GetAchievementsBVT()
        {
            AchievementsResult results = testScenarios.GetAchievementsXml(bvtTestGame.GameId, us_locale, bvtTestGame.PlatformId);
            Assert.IsNotNull(results, "Null returned from GetAchievementsXml");
            Assert.IsTrue(results.Achievements.Count > 0, "No achievements were found");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(0)]
        public void GrantAchievementsBVT()
        {
            RewardsTestScenarioLibrary lib = testScenarios;
            try
            {
                lib = new RewardsTestScenarioLibrary(true);
            }
            catch (AssertInconclusiveException) { }

            GrantAchievements achievements = lib.GetFirstAchievement(bvtTestGame.GameId, "c203973c-fd2b-4b8c-b785-5e38b3e35dec", DateTime.Now, true, us_locale, bvtTestGame.PlatformId);
            Response resp = lib.GrantAchievements(achievements, us_locale, bvtTestGame.PlatformId);
            if (!String.IsNullOrEmpty(resp.Error))
            {
                throw new WebException(resp.Error);
            }
            AchievementsResult result = lib.GetAchievementsXml(bvtTestGame.GameId, us_locale, bvtTestGame.PlatformId);
            Assert.IsTrue(lib.VerifyAchievementGranted(result, achievements.Achievements[0].Key));
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(0)]
        [Description("Verifies a property from each of the sections returned by the Profile service.")]
        public void GetProfileMyViewBVT()
        {
            Profile pro = testScenarios.GetProfileMyView(us_locale, PlatformType.Mobile, Constants.AllProfileSections);

            //Validate GamerTag for XboxLiveProperties 
            Assert.IsTrue((pro.ProfileProperties[ProfileProperty.GamerTag] as string).Equals(tu.Gamertag, StringComparison.OrdinalIgnoreCase), "GamerTag does not equal expected.");

            //Verify user has atleast one friend
            Assert.IsTrue(pro.Friends.Count > 0, "No friends returned where expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(0)]
        [Description("Verifies a property from each of the sections returned by the Profile service for YouView.")]
        public void GetProfileYouViewBVT()
        {
            TestUser firstFriend = tu.Friends[0];

            //Get the Profile object from the web service
            Profile pro = testScenarios.GetProfileYouView(us_locale, PlatformType.Mobile, Constants.AllProfileSections, firstFriend.Gamertag);

            //Validate GamerTag for XboxLiveProperties 
            Assert.IsTrue((pro.ProfileProperties[ProfileProperty.GamerTag] as string).Equals(firstFriend.Gamertag, StringComparison.OrdinalIgnoreCase));

            //Validate friend count greater than zero
            Assert.IsTrue(pro.Friends.Count > 0, "No friends returned where expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(0)]
        public void GetAchievementsPartnerBVT()
        {
            Achievements results = testScenarios.GetAchievementsPartnerXml(tu.Gamertag, bvtTestGame.GameId, us_locale);

            Assert.IsTrue(results.UserAchievementsCollection.Count == 1, "No achievements were returned for the current user and gamertags");
            Assert.IsTrue(results.UserAchievementsCollection[0].AchievementList.Count > 0, "Achievements could not be found where expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(0)]
        [Description("Verify basic functionality for the GetGames API")]
        public void GetGamesBVT()
        {
            testScenarios.PostGameResultWithDefaultStats(bvtTestGame, us_locale);
            Gds.Contracts.Games games = testScenarios.GetGamesXml(tu.Gamertag, us_locale);

            Assert.IsTrue(games.UserGamesCollection[0].TotalGamesPlayed > 0, "Total games played is not correct");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(0)]
        [Description("Verify basic functionality for GetProfilePartner for properties section")]
        public void GetProfilePartner_PropertiesBVT()
        {
            // Post some profile data
            ProfileEx profile = testScenarios.CreateProfileWithDefaultProperties();
            profile.SectionFlags = (long)SectionFlags.XboxLiveProperties;
            Response result = testScenarios.PostProfilePartner(profile, us_locale);
            if (result.StatusCode != HttpStatusCode.OK)
            {
                Assert.Inconclusive("PostProfilePartner failed - test cannot be completed.");
            }

            // Get properties
            profile = testScenarios.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties);

            // Validate Properties
            Assert.IsNotNull(profile.ProfileProperties, "No properties are set.");
            Assert.IsNotNull(profile.ProfileProperties[ProfileProperty.Name], "Name property is not set.");
            Assert.IsNotNull(profile.ProfileProperties[ProfileProperty.Bio], "Bio property is not set.");
            Assert.IsNotNull(profile.ProfileProperties[ProfileProperty.GamerZone], "GamerZone property is not set.");
            Assert.IsNotNull(profile.ProfileProperties[ProfileProperty.Location], "Location property is not set.");
            Assert.IsNotNull(profile.ProfileProperties[ProfileProperty.Motto], "Motto property is not set.");
            Assert.IsNotNull(profile.ProfileProperties[ProfileProperty.ParentalControlGroup], "ParentalControlGroup property is not set.");
            Assert.IsNotNull(profile.ProfileProperties[ProfileProperty.FreeGamertagChangeEligible], "FreeGamertagChangeEligible property is not set.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(0)]
        [Description("Verify service GetProfilePartner with Gamertag param")]
        public void GetProfilePartner_Use_Gamertag_BVT()
        {
            string gamertag = tu.Friends[0].Gamertag;

            ProfileEx actualProfile = testScenarios.GetProfilePartnerXml(us_locale, Constants.AllProfileSections, gamertag);
            Assert.IsNotNull(actualProfile, "ProfileEx object not returned correctly");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(0)]
        [Description("Verify basic functionality for GetProfilePartner for privacy settings section")]
        public void GetProfilePartner_PrivacySettingsBVT()
        {
            // Get privacy settings
            ProfileEx profile = testScenarios.GetProfilePartnerXml(us_locale, SectionFlags.PrivacySettings);

            // Validate Privacy settings 
            Assert.IsNotNull(profile.PrivacySettings, "No privacy settings are set");
            Assert.IsNotNull(profile.PrivacySettings[PrivacySetting.VoiceAndText], "VoiceAndText setting is not set");
            Assert.IsNotNull(profile.PrivacySettings[PrivacySetting.Video], "Voice setting is not set");
            Assert.IsNotNull(profile.PrivacySettings[PrivacySetting.GamerProfile], "GamerProfile setting is not set");
            Assert.IsNotNull(profile.PrivacySettings[PrivacySetting.OnlineStatus], "OnlineStatus setting is not set");
            Assert.IsNotNull(profile.PrivacySettings[PrivacySetting.MemberContent], "MemberContent setting is not set");
            Assert.IsNotNull(profile.PrivacySettings[PrivacySetting.PlayedGames], "PlayedGames setting is not set");
            Assert.IsNotNull(profile.PrivacySettings[PrivacySetting.FriendsList], "FriendsList setting is not set");
        }


        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(0)]
        [Description("Verify basic functionality for the PostProfilePartner API properties")]
        public void PostProfilePartner_PropertiesBVT()
        {
            ProfileEx profile = testScenarios.CreateProfileWithDefaultProperties();
            Response result = testScenarios.PostProfilePartner(profile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "HTTP status indicates a failure");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(0)]
        [Description("Verify basic functionality for the PostProfilePartner API privacy settings")]
        public void PostProfilePartner_PrivacySettingsBVT()
        {
            ProfileEx profile = testScenarios.CreateProfileWithRandomPrivacySettings();
            Response result = testScenarios.PostProfilePartner(profile, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "HTTP status indicates a failure");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(0)]
        [Description("Verify basic functionality for GetProfilePartner for presence section")]
        public void GetPresenceBVT()
        {
            ProfileEx pro = testScenarios.GetProfilePartnerXml(us_locale, SectionFlags.PresenceInfo);

            Assert.IsNotNull(pro.PresenceInfo, "No presence info is set.");
            Assert.IsNotNull(pro.PresenceInfo.OnlineState, "OnlineState is not set.");
            Assert.IsNotNull(pro.PresenceInfo.LastSeenTitleName, "LastSeenTitleName is not set.");
            Assert.IsNotNull(pro.PresenceInfo.LastSeenTitleId, "LastSeenTitleId is not set.");
            Assert.IsNotNull(pro.PresenceInfo.LastSeenDateTime, "LastSeenDateTime is not set.");
            Assert.IsNotNull(pro.PresenceInfo.DetailedPresence, "DetailedPresence is not set.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(0)]
        [Description("Verify basic functionality for the PostPresence API")]
        public void PostPresenceBVT()
        {
            Response result = testScenarios.PostPresence(us_locale);
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode, "HTTP status indicates a failure");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(0)]
        [Description("Verify basic functionality for the GetMessages API")]
        public void GetMessageSummariesBVT()
        {
            MessageSummariesResponse messages = testScenarios.GetMessageSummaries(LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.IsNotNull(messages, "GetMessageSummaries is not returning proper data type.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(0)]
        [Timeout(300000)]
        [Description("Verify basic functionality for the GetMessageDetails API")]
        public void GetMessageDetailsBVT()
        {
            testScenarios.CheckForMessagesForBVTs(tu.Gamertag);
            uint messageId = testScenarios.GetValidMessageId();
            MessageDetails messageDetails = testScenarios.GetMessageDetails(messageId, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.IsNotNull(messageDetails, "GetMessageDetails is not returning proper data type.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(0)]
        [Description("Verify basic functionality for the SendMessages API")]
        public void SendMessageBVT()
        {
            SendMessageRequest sendMessageRequest = testScenarios.CreateSendMessageRequest(tu.Gamertag, TestHelper.GetRandomString(20));
            Response response = testScenarios.SendMessage(sendMessageRequest, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling SendMessage failed");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(0)]
        [Timeout(300000)]
        [Description("Verify basic functionality for the DeleteMessage API")]
        public void DeleteMessageBVT()
        {
            testScenarios.CheckForMessagesForBVTs(tu.Gamertag);
            uint messageId = testScenarios.GetValidMessageId();
            Response response = testScenarios.DeleteMessage(messageId, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling DeleteMessage failed");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(0)]
        [Timeout(300000)]
        [Description("Verify basic functionality for the BlockMessages API")]
        public void DeleteMessageAndBlockGamertagBVT()
        {
            testScenarios.CheckForMessagesForBVTs(tu.Gamertag);
            uint messageId = testScenarios.GetValidMessageId();
            Response response = testScenarios.DeleteMessageAndBlockGamertag(messageId, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling DeleteMessageAndBlockGamertag partner service failed.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(0)]
        [Description("Verify basic functionality for the AddFriend API")]
        public void AddFriendBVT()
        {
            RewardsTestScenarioLibrary newFriend = new RewardsTestScenarioLibrary(AuthenticationTransport.PrimaryUser.Friends[0].Username, AuthenticationTransport.PrimaryUser.Friends[0].Password);

            Response response = newFriend.AddFriend(AuthenticationTransport.PrimaryUser.Friends[1].Gamertag, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling AddFriend failed.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(0)]
        [Description("Verify basic functionality for the AcceptFriend API")]
        public void AcceptFriendBVT()
        {
            Account newFriendAccount = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary newFriend = new RewardsTestScenarioLibrary(newFriendAccount);
            testScenarios.SetupUserForMessaging();

            Response response = newFriend.AddFriend(AuthenticationTransport.PrimaryUser.Gamertag, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling AddFriend failed.");

            Response acceptResponse = testScenarios.AcceptFriend(newFriendAccount.XblUser.Gamertag, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling AcceptFriend failed.");

            ProfileEx profile = testScenarios.GetProfilePartnerXml(us_locale, SectionFlags.FriendsList);

            Assert.IsTrue(testScenarios.VerifyFriendState(profile, newFriendAccount.XblUser.Gamertag, FriendState.Friend));

        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(0)]
        [Description("Verify basic functionality for the DeclineFriend API")]
        public void DeclineFriendvBVT()
        {
            Account newFriendAccount = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary newFriend = new RewardsTestScenarioLibrary(newFriendAccount);
            testScenarios.SetupUserForMessaging();

            Response response = newFriend.AddFriend(AuthenticationTransport.PrimaryUser.Gamertag, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling AddFriend failed.");

            Response response2 = testScenarios.DeclineFriend(newFriendAccount.XblUser.Gamertag, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling DeclineFriend failed.");

            ProfileEx profile = testScenarios.GetProfilePartnerXml(us_locale, SectionFlags.FriendsList);

            //loop through all friends and verify the newFriendAccount is NOT present as a Friend 
            foreach (Friend friend in profile.FriendList)
            {
                if (friend.ProfileEx.ProfileProperties[ProfileProperty.GamerTag].ToString().Equals(newFriendAccount.XblUser.Gamertag))
                {
                    Assert.Fail("User was found in friends list after declining a friend request");
                }
            }
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(0)]
        [Description("Verify basic functionality for the RemoveFriend API, User A removes Friend B and then Friend B is no longer in Friends list")]
        public void RemoveFriendBVT()
        {
            ProfileEx profile = testScenarios.GetProfilePartnerXml(us_locale, SectionFlags.FriendsList);
            string gamertagToDelete = "";

            if (profile.FriendList.Count < 10)
            {

                Account newFriendAccount = AccountTransport.CreateAccount();
                RewardsTestScenarioLibrary newFriend = new RewardsTestScenarioLibrary(newFriendAccount);
                testScenarios.SetupUserForMessaging();

                Response response = newFriend.AddFriend(AuthenticationTransport.PrimaryUser.Gamertag, LiveApp.GameId, us_locale, LiveApp.PlatformId);

                Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling AddFriend failed.");

                Response acceptResponse = testScenarios.AcceptFriend(newFriendAccount.XblUser.Gamertag, LiveApp.GameId, us_locale, LiveApp.PlatformId);

                Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling AcceptFriend failed.");

                ProfileEx acceptProfile = testScenarios.GetProfilePartnerXml(us_locale, SectionFlags.FriendsList);
                Assert.IsTrue(testScenarios.VerifyFriendState(acceptProfile, newFriendAccount.XblUser.Gamertag, FriendState.Friend));

                gamertagToDelete = newFriendAccount.XblUser.Gamertag;
            }
            else
            {
                gamertagToDelete = profile.FriendList[profile.FriendList.Count - 1].ProfileEx.ProfileProperties[ProfileProperty.GamerTag].ToString();
                if( gamertagToDelete.StartsWith("Rewards")){
                    Assert.Fail("Gamertag selected was one we cannot delete (if you are seeing this it is a test issue).");
                }
            }

            Response removeFriendResponse = testScenarios.RemoveFriend(gamertagToDelete, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.OK, removeFriendResponse.StatusCode, "Calling RemoveFriend failed");

            ProfileEx profile2 = testScenarios.GetProfilePartnerXml(us_locale, SectionFlags.FriendsList);

            //loop through friends and verify newFriendAccount is NOT in the users friend list
            foreach (Friend friend in profile2.FriendList)
            {
                if (friend.ProfileEx.ProfileProperties[ProfileProperty.GamerTag].ToString().Equals(gamertagToDelete))
                {
                    Assert.Fail("User was found in friends list after being removed");
                }
            }
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(0)]
        [Description("Verify we get full friends list back and each friend has a FriendState of 0, 1 or 2")]
        public void GetProfilePartner_FullFriendsList_BVT()
        {
            ProfileEx profile = testScenarios.GetProfilePartnerXml(us_locale, SectionFlags.FriendsList);
            foreach (Friend friend in profile.FriendList)
            {
                Assert.IsTrue(friend.FriendState >= 0 && friend.FriendState <= 2);
            }
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(0)]
        [Description("Verify basic functionality for the FreeGamertagChange API")]
        public void FreeGamertagChangeBVT()
        {
            //To run this you must put a breakpoint after a new user is created and manually edit the DB to make that user free gamertag change eligible
            RewardsTestScenarioLibrary freeGamertagChangeLib = new RewardsTestScenarioLibrary("LL739892eeu3i@xbltest.com", "supersecret"); //le-xblob-dev01: bi_user_puid = 2600292641995759

            string newRandomGamertag = TestHelper.GetRandomString(10);
            Response response = freeGamertagChangeLib.FreeGamertagChange(newRandomGamertag, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling FreeGamertagChange partner service failed.");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test\Tests\GetGames.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using Gds.Contracts;
using Microsoft.TestTools;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using UserLib;

namespace Rewards.Test.Tests
{
    [TestClass]
    public class GetGames
    {
        private static RewardsTransport rewardsTransport = new RewardsTransport();
        private RewardsTestScenarioLibrary testScenarios = new RewardsTestScenarioLibrary(rewardsTransport);
        private static readonly string us_locale = "en-US";
        private static TestGame getGamesTestGame = TestGameUtility.GetTestGame("Hide And Seek");

        // NOTE ////////////////////////////////////////////////////////////////////////
        //                                                                            //
        // This will run before any tests are run. It will ensure the primary user    //
        // has at least three games played and his first two friends each have at     //
        // least one game played.                                                     //
        //                                                                            //
        ////////////////////////////////////////////////////////////////////////////////
        [ClassInitialize()]
        public static void Initialize(TestContext testContext)
        {
            //make sure the primary user and two friends all have at least one game played
            TestUser user = AuthenticationTransport.PrimaryUser;
            TestUser friend1 = AuthenticationTransport.PrimaryUser.Friends[0];
            TestUser friend2 = AuthenticationTransport.PrimaryUser.Friends[1];

            Initialize(user, getGamesTestGame);
            Initialize(friend1, getGamesTestGame);
            Initialize(friend2, getGamesTestGame);

            //make sure primary user has at least two more (total of three) games played
            Initialize(user, TestGameUtility.GetTestGame("HexicRush"));
            Initialize(user, TestGameUtility.GetTestGame("SeaLegend"));
        }

        private static void Initialize(TestUser user, TestGame tg)
        {
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(user.Username, user.Password);
            LeaderboardResult userLeaderboard = lib.GetLeaderboardForBestScore(tg, us_locale);

            if (userLeaderboard.TotalNumberOfRows == 0)
                PostGameResultAndAssertOnFail(lib, tg, 0);
        }
        #region Key scenarios

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify a new user has no games played and no gamerscore")]
        public void GetGames_VerifyNewUser()
        {
            Account newUser = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(newUser);
            string gamertag = newUser.XblUser.Gamertag;

            Gds.Contracts.Games gamesPlayed = lib.GetGamesXml(gamertag, us_locale);

            Assert.AreEqual(0, gamesPlayed.UserGamesCollection[0].GameList.Count, "New user's game list count is not zero");
            Assert.AreEqual((uint)0, gamesPlayed.TotalUniqueGames, "New user's TotalUniqueGames is not zero");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify a single test game is returned by the service")]
        public void GetGames_ReturnSingleGame()
        {
            Account newUser = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(newUser);
            string gamertag = newUser.XblUser.Gamertag;

            PostGameResultAndAssertOnFail(lib, getGamesTestGame, 5);
            Gds.Contracts.Games gamesPlayed = lib.GetGamesXml(gamertag, us_locale);

            bool gameFound = false;
            for (int i = 0; i < gamesPlayed.UserGamesCollection[0].GameList.Count; i++)
            {
                if (gamesPlayed.UserGamesCollection[0].GameList[i].Id == getGamesTestGame.GameId)
                {
                    gameFound = true;
                    break;
                }
            }
            Assert.IsTrue(gameFound, "Game [{0}:{1}] was not returned by the GetGames service", getGamesTestGame.GameId, getGamesTestGame.Name);
            Assert.AreEqual(1, gamesPlayed.UserGamesCollection[0].GameList.Count, "The gamelist count was not 1");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify all games are returned by the service")]
        public void GetGames_ReturnMultipleGames()
        {
            Account newUser = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(newUser);
            string gamertag = newUser.XblUser.Gamertag;

            List<TestGame> allGames = TestGameUtility.GetGamesForPlatformId(5);
            List<TestGame> gamesPosted = lib.PostMultipleGameResults(allGames.Count);
            RewardsTestUtil.Wait(5);

            Gds.Contracts.Games gamesPlayed = lib.GetGamesXml(gamertag, us_locale);

            bool gameFound = false;
            foreach (TestGame game in gamesPosted)
            {
                for (int i = 0; i < gamesPlayed.UserGamesCollection[0].GameList.Count; i++)
                {
                    if (game.GameId == gamesPlayed.UserGamesCollection[0].GameList[i].Id)
                    {
                        gameFound = true;
                        break;
                    }
                }
                Assert.IsTrue(gameFound, "Game [{0}:{1}] was not returned by the GetGames service", game.GameId, game.Name);
                gameFound = false;
            }
        }

        #endregion Key scenarios
        #region UserGames field tests

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify Gamertag is correct")]
        public void GetGames_Gamertag_VerifyValue()
        {
            Account newUser = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(newUser);
            string gamertag = newUser.XblUser.Gamertag;

            // post some results
            PostGameResultAndAssertOnFail(lib, getGamesTestGame, 0);

            Gds.Contracts.Games gamesPlayed = lib.GetGamesXml(gamertag, us_locale);
            Assert.AreEqual(gamertag, gamesPlayed.UserGamesCollection[0].Gamertag, "Gamertag does not match expected value");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify TotalGamesPlayed is correct")]
        public void GetGames_TotalGamesPlayed_VerifyValue()
        {
            Account newUser = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(newUser);
            string gamertag = newUser.XblUser.Gamertag;

            // verify a new user has no games played
            Gds.Contracts.Games gamesPlayed = lib.GetGamesXml(gamertag, us_locale);
            Assert.AreEqual((uint)0, gamesPlayed.UserGamesCollection[0].TotalGamesPlayed, "TotalGamesPlayed does not match expected value");

            // post some results
            TestGame game1 = TestGameUtility.GetTestGame("Hide And Seek");
            TestGame game2 = TestGameUtility.GetTestGame("HexicRush");
            TestGame game3 = TestGameUtility.GetTestGame("SeaLegend");
            PostGameResultAndAssertOnFail(lib, game1, 0);
            PostGameResultAndAssertOnFail(lib, game2, 0);
            PostGameResultAndAssertOnFail(lib, game3, 5);
            uint expectedGamesPlayed = 3;

            // verify 3 games have now been played
            gamesPlayed = lib.GetGamesXml(gamertag, us_locale);
            Assert.AreEqual(expectedGamesPlayed, gamesPlayed.UserGamesCollection[0].TotalGamesPlayed, "TotalGamesPlayed does not match expected value");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify TotalUniqueGames is correct for one user")]
        public void GetGames_TotalUniqueGames_OneUser_VerifyValue()
        {
            TestUser user = AuthenticationTransport.PrimaryUser;
            Gds.Contracts.Games games = testScenarios.GetGamesXml(user.Gamertag, us_locale);

            Assert.AreEqual((uint)games.UserGamesCollection[0].GameList.Count, games.TotalUniqueGames, "TotalUniqueGames did not match expected value");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify the gamerscore is correct")]
        public void GetGames_GamerScore_VerifyValue()
        {
            Account newUser = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(newUser);
            string gamertag = newUser.XblUser.Gamertag;

            // verify a new user has 0 gamerscore
            Gds.Contracts.Games gamesPlayed = lib.GetGamesXml(gamertag, us_locale);
            Assert.AreEqual((uint)0, gamesPlayed.UserGamesCollection[0].Gamerscore, "Gamerscore does not match expected value");

            // post some results
            TestGame game1 = TestGameUtility.GetTestGame("Hide And Seek");
            TestGame game2 = TestGameUtility.GetTestGame("HexicRush");
            TestGame game3 = TestGameUtility.GetTestGame("SeaLegend");
            PostGameResultAndAssertOnFail(testScenarios, game1, 0);
            PostGameResultAndAssertOnFail(testScenarios, game2, 0);
            PostGameResultAndAssertOnFail(testScenarios, game3, 0);

            // grant some achievements
            uint expectedGamerscore = 0;
            expectedGamerscore = GrantAchievement_ReturnGamerscore(game1, lib);
            expectedGamerscore += GrantAchievement_ReturnGamerscore(game2, lib);
            expectedGamerscore += GrantAchievement_ReturnGamerscore(game3, lib);

            // verify gamerscore is correct
            gamesPlayed = lib.GetGamesXml(gamertag, us_locale);
            Assert.AreEqual(expectedGamerscore, gamesPlayed.UserGamesCollection[0].Gamerscore, "Gamerscore does not match expected value");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify the TotalPossibleGamerscore is correct")]
        public void GetGames_TotalPossibleGamerScore_VerifyValue()
        {
            Account newUser = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(newUser);
            string gamertag = newUser.XblUser.Gamertag;

            // verify a new user has 0 TotalPossibleGamerScore (since he hasn't played any games yet)
            Gds.Contracts.Games gamesPlayed = lib.GetGamesXml(gamertag, us_locale);
            Assert.AreEqual((uint)0, gamesPlayed.UserGamesCollection[0].TotalPossibleGamerscore, "TotalPossibleGamerscore does not match expected value");

            // post some results
            TestGame game1 = TestGameUtility.GetTestGame("Hide And Seek");
            TestGame game2 = TestGameUtility.GetTestGame("HexicRush");
            PostGameResultAndAssertOnFail(lib, game1, 0);
            PostGameResultAndAssertOnFail(lib, game2, 5);

            //calculate total possible gamer score
            uint game1TotalPossibleGamerscore = lib.GetTotalPossibleGamerscoreForGame(game1, us_locale);
            uint game2TotalPossibleGamerscore = lib.GetTotalPossibleGamerscoreForGame(game2, us_locale);
            uint expectedPossibleGamerscore = game1TotalPossibleGamerscore + game2TotalPossibleGamerscore;

            gamesPlayed = lib.GetGamesXml(gamertag, us_locale);
            Assert.AreEqual(expectedPossibleGamerscore, gamesPlayed.UserGamesCollection[0].TotalPossibleGamerscore, "TotalPossibleGamerscore does not match expected value");
        }

        #endregion UserGames field tests
        #region GameInfo field tests

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify GameName field is correct in GetGames result")]
        public void GetGames_GameInfo_VerifyGameName()
        {
            TestUser user = AuthenticationTransport.PrimaryUser;
            Gds.Contracts.Games gamesPlayed = testScenarios.GetGamesXml(user.Gamertag, us_locale);
            GameInfo gameInfo = GetGameInfo(getGamesTestGame.GameId, gamesPlayed.UserGamesCollection[0].GameList);

            Assert.AreEqual(getGamesTestGame.Name, gameInfo.Name, "Game name did not match for gameID {0}", getGamesTestGame.GameId);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify Type field is correct in GetGames result")]
        public void GetGames_GameInfo_VerifyType()
        {
            TestUser user = AuthenticationTransport.PrimaryUser;

            PostGameResultAndAssertOnFail(testScenarios, TestGameUtility.GetTestGame("Backgammon"), 0);
            PostGameResultAndAssertOnFail(testScenarios, TestGameUtility.GetTestGame("TicTacToe"), 0);
            PostGameResultAndAssertOnFail(testScenarios, TestGameUtility.GetTestGame("Beehive"), 0);
            PostGameResultAndAssertOnFail(testScenarios, TestGameUtility.GetTestGame("Reversi"), 0);
            PostGameResultAndAssertOnFail(testScenarios, TestGameUtility.GetTestGame("HexicRush"), 0);
            PostGameResultAndAssertOnFail(testScenarios, TestGameUtility.GetTestGame("Flowerz"), 5);

            Gds.Contracts.Games gamesPlayed = testScenarios.GetGamesXml(user.Gamertag, us_locale);
            
            GameInfo gameInfo = GetGameInfo(TestGameUtility.GetTestGame("Flowerz").GameId, gamesPlayed.UserGamesCollection[0].GameList);
            Assert.AreEqual(TestGameUtility.GetTestGame("Flowerz").Type, gameInfo.Type, "Game type is incorrect for Flowerz");

            gameInfo = GetGameInfo(TestGameUtility.GetTestGame("HexicRush").GameId, gamesPlayed.UserGamesCollection[0].GameList);
            Assert.AreEqual(TestGameUtility.GetTestGame("HexicRush").Type, gameInfo.Type, "Game type is incorrect for HexicRush - bug #8435");

            gameInfo = GetGameInfo(TestGameUtility.GetTestGame("Reversi").GameId, gamesPlayed.UserGamesCollection[0].GameList);
            Assert.AreEqual(TestGameUtility.GetTestGame("Reversi").Type, gameInfo.Type, "Game type is incorrect for Reversi");

            gameInfo = GetGameInfo(TestGameUtility.GetTestGame("Beehive").GameId, gamesPlayed.UserGamesCollection[0].GameList);
            Assert.AreEqual(TestGameUtility.GetTestGame("Beehive").Type, gameInfo.Type, "Game type is incorrect for Beehive");

            gameInfo = GetGameInfo(TestGameUtility.GetTestGame("TicTacToe").GameId, gamesPlayed.UserGamesCollection[0].GameList);
            Assert.AreEqual(TestGameUtility.GetTestGame("TicTacToe").Type, gameInfo.Type, "Game type is incorrect for TicTacToe");

            gameInfo = GetGameInfo(TestGameUtility.GetTestGame("Backgammon").GameId, gamesPlayed.UserGamesCollection[0].GameList);
            Assert.AreEqual(TestGameUtility.GetTestGame("Backgammon").Type, gameInfo.Type, "Game type is incorrect for Backgammon");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify URL fields are correct in GetGames result")]
        public void GetGames_GameInfo_VerifyURLs()
        {
            TestUser user = AuthenticationTransport.PrimaryUser;
            Gds.Contracts.Games gamesPlayed = testScenarios.GetGamesXml(user.Gamertag, us_locale);
            GameInfo gameInfo = GetGameInfo(getGamesTestGame.GameId, gamesPlayed.UserGamesCollection[0].GameList);

            Assert.IsTrue(Uri.IsWellFormedUriString(gameInfo.GameUrl, UriKind.Absolute), "GameUrl is not a valid url for gameID {0}", getGamesTestGame.GameId);
            Assert.IsTrue(Uri.IsWellFormedUriString(gameInfo.ImageUrl, UriKind.Absolute), "ImageUrl is not a valid url for gameID {0}", getGamesTestGame.GameId);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify LastPlayed field is correct in GetGames result")]
        public void GetGames_GameInfo_VerifyLastPlayed()
        {
            TestUser user = AuthenticationTransport.PrimaryUser;

            DateTime expectedLastPlayed = DateTime.Now;
            PostGameResultAndAssertOnFail(testScenarios, getGamesTestGame, 0);

            Gds.Contracts.Games gamesPlayed = testScenarios.GetGamesXml(user.Gamertag, us_locale);
            GameInfo gameInfo = GetGameInfo(getGamesTestGame.GameId, gamesPlayed.UserGamesCollection[0].GameList);

            Assert.IsTrue(expectedLastPlayed.Subtract(gameInfo.LastPlayed).Seconds < 60, "Incorrect LastPlayed timestamp returned - time difference is greater than 1 minute");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify AchievementsEarned field is correct in GetGames result")]
        public void GetGames_GameInfo_VerifyAchievementsEarned()
        {
            Account newUser = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(newUser);
            string gamertag = newUser.XblUser.Gamertag;

            // Grant some achievements
            GrantAchievement_ReturnGamerscore(getGamesTestGame, lib);
            GrantAchievement_ReturnGamerscore(getGamesTestGame, lib);

            Gds.Contracts.Games gamesPlayed = lib.GetGamesXml(gamertag, us_locale);
            GameInfo gameInfo = GetGameInfo(getGamesTestGame.GameId, gamesPlayed.UserGamesCollection[0].GameList);

            Assert.AreEqual(2, gameInfo.AchievementsEarned, "AchievementsEarned value is not correct");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify TotalAchievements field is correct in GetGames result")]
        public void GetGames_GameInfo_VerifyTotalAchievements()
        {
            TestUser user = AuthenticationTransport.PrimaryUser;

            AchievementsResult results = testScenarios.GetAchievementsXml(getGamesTestGame.GameId, us_locale, getGamesTestGame.PlatformId);
            int expectedTotalAchievements = (from a in results.Achievements select a.Key).Count();

            Gds.Contracts.Games gamesPlayed = testScenarios.GetGamesXml(user.Gamertag, us_locale);
            GameInfo gameInfo = GetGameInfo(getGamesTestGame.GameId, gamesPlayed.UserGamesCollection[0].GameList);

            Assert.AreEqual(expectedTotalAchievements, gameInfo.TotalAchievements, "TotalAchievements value is not correct");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify Gamerscore field is correct in GetGames result")]
        public void GetGames_GameInfo_VerifyGamerscore()
        {
            Account newUser = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(newUser);
            string gamertag = newUser.XblUser.Gamertag;

            // Grant some achievements
            uint expectedGamerscore = 0;
            expectedGamerscore += GrantAchievement_ReturnGamerscore(getGamesTestGame, lib);
            expectedGamerscore += GrantAchievement_ReturnGamerscore(getGamesTestGame, lib);

            Gds.Contracts.Games gamesPlayed = lib.GetGamesXml(gamertag, us_locale);
            GameInfo gameInfo = GetGameInfo(getGamesTestGame.GameId, gamesPlayed.UserGamesCollection[0].GameList);

            Assert.AreEqual(expectedGamerscore, gameInfo.Gamerscore, "Gamerscore value is not correct");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify TotalPossibleGamerscore field is correct in GetGames result")]
        public void GetGames_GameInfo_VerifyTotalPossibleGamerscore()
        {
            TestUser user = AuthenticationTransport.PrimaryUser;

            AchievementsResult results = testScenarios.GetAchievementsXml(getGamesTestGame.GameId, us_locale, getGamesTestGame.PlatformId);
            int expectedTotalPossibleGamerscore = (from a in results.Achievements select a.Gamerscore).Sum();

            Gds.Contracts.Games gamesPlayed = testScenarios.GetGamesXml(user.Gamertag, us_locale);
            GameInfo gameInfo = GetGameInfo(getGamesTestGame.GameId, gamesPlayed.UserGamesCollection[0].GameList);

            Assert.AreEqual((uint)expectedTotalPossibleGamerscore, gameInfo.TotalPossibleGamerscore, "TotalPossibleGamerscore value is not correct");
        }

        #endregion GameInfo field tests
        #region Sort order tests

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify the sort order is correct for games played by one user - variation 1: A,B,C")]
        public void GetGames_VerifySortOrder_OneUser_Test1()
        {
            TestUser user = AuthenticationTransport.PrimaryUser;
            TestGame gameA = TestGameUtility.GetTestGame("Hide And Seek");
            TestGame gameB = TestGameUtility.GetTestGame("HexicRush");
            TestGame gameC = TestGameUtility.GetTestGame("SeaLegend");

            // post some results
            PostGameResultAndAssertOnFail(testScenarios, gameA, 0);
            PostGameResultAndAssertOnFail(testScenarios, gameB, 0);
            PostGameResultAndAssertOnFail(testScenarios, gameC, 5);

            Gds.Contracts.Games gamesPlayed = testScenarios.GetGamesXml(user.Gamertag, us_locale);
            List<GameInfo> gameList = gamesPlayed.UserGamesCollection[0].GameList;

            // check sort order
            Assert.AreEqual(gameC.GameId, gameList[0].Id, "Game {0} should have been the first game in the list, but wasn't", gameC.Name);
            Assert.AreEqual(gameB.GameId, gameList[1].Id, "Game {0} should have been the second game in the list, but wasn't", gameB.Name);
            Assert.AreEqual(gameA.GameId, gameList[2].Id, "Game {0} should have been the last game in the list, but wasn't", gameA.Name);

            // get LastPlayed timestamp for games
            DateTime gameA_lastPlayed = GetGameInfo(gameA.GameId, gamesPlayed.UserGamesCollection[0].GameList).LastPlayed;
            DateTime gameB_lastPlayed = GetGameInfo(gameB.GameId, gamesPlayed.UserGamesCollection[0].GameList).LastPlayed;
            DateTime gameC_lastPlayed = GetGameInfo(gameC.GameId, gamesPlayed.UserGamesCollection[0].GameList).LastPlayed;

            Assert.IsTrue(gameC_lastPlayed.CompareTo(gameB_lastPlayed) > 0, "Games {0} and {1} are not sorted properly", gameC.Name, gameB.Name);
            Assert.IsTrue(gameB_lastPlayed.CompareTo(gameA_lastPlayed) > 0, "Games {0} and {1} are not sorted properly", gameB.Name, gameA.Name);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify the sort order is correct for games played by one user - variation 2: A,B,C,B")]
        public void GetGames_VerifySortOrder_OneUser_Test2()
        {
            TestUser user = AuthenticationTransport.PrimaryUser;
            TestGame gameA = TestGameUtility.GetTestGame("Hide And Seek");
            TestGame gameB = TestGameUtility.GetTestGame("HexicRush");
            TestGame gameC = TestGameUtility.GetTestGame("SeaLegend");

            // post some results
            PostGameResultAndAssertOnFail(testScenarios, gameA, 0);
            PostGameResultAndAssertOnFail(testScenarios, gameB, 0);
            PostGameResultAndAssertOnFail(testScenarios, gameC, 0);
            PostGameResultAndAssertOnFail(testScenarios, gameB, 5);

            Gds.Contracts.Games gamesPlayed = testScenarios.GetGamesXml(user.Gamertag, us_locale);
            List<GameInfo> gameList = gamesPlayed.UserGamesCollection[0].GameList;

            // check sort order
            Assert.AreEqual(gameB.GameId, gameList[0].Id, "Game {0} should have been the first game in the list, but wasn't", gameB.Name);
            Assert.AreEqual(gameC.GameId, gameList[1].Id, "Game {0} should have been the second game in the list, but wasn't", gameC.Name);
            Assert.AreEqual(gameA.GameId, gameList[2].Id, "Game {0} should have been the last game in the list, but wasn't", gameA.Name);

            // get LastPlayed timestamp for games
            DateTime gameA_lastPlayed = GetGameInfo(gameA.GameId, gamesPlayed.UserGamesCollection[0].GameList).LastPlayed;
            DateTime gameB_lastPlayed = GetGameInfo(gameB.GameId, gamesPlayed.UserGamesCollection[0].GameList).LastPlayed;
            DateTime gameC_lastPlayed = GetGameInfo(gameC.GameId, gamesPlayed.UserGamesCollection[0].GameList).LastPlayed;

            Assert.IsTrue(gameB_lastPlayed.CompareTo(gameC_lastPlayed) > 0, "Games {0} and {1} are not sorted properly", gameB.Name, gameC.Name);
            Assert.IsTrue(gameC_lastPlayed.CompareTo(gameA_lastPlayed) > 0, "Games {0} and {1} are not sorted properly", gameC.Name, gameA.Name);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify the sort order is correct for games played by two users - variation 1: 1A,2A,1B,2C,1D,2D")]
        public void GetGames_VerifySortOrder_TwoUsers_Test1()
        {
            TestGame gameA = TestGameUtility.GetTestGame("Hide And Seek");
            TestGame gameB = TestGameUtility.GetTestGame("HexicRush");
            TestGame gameC = TestGameUtility.GetTestGame("SeaLegend");
            TestGame gameD = TestGameUtility.GetTestGame("Flowerz");

            Account user1 = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary user1lib = new RewardsTestScenarioLibrary(user1);
            string user1gamertag = user1.XblUser.Gamertag;

            Account user2 = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary user2lib = new RewardsTestScenarioLibrary(user2);
            string user2gamertag = user2.XblUser.Gamertag;

            // privacy settings
            user1lib.SetupUserWithUniformPrivacy(PrivacySettings.Everyone);
            user2lib.SetupUserWithUniformPrivacy(PrivacySettings.Everyone);

            // Both users played gameA
            PostGameResultAndAssertOnFail(user1lib, gameA, 0, "User1 [" + user1gamertag + "]");
            PostGameResultAndAssertOnFail(user2lib, gameA, 0, "User2 [" + user2gamertag + "]");

            // User1 played gameB
            PostGameResultAndAssertOnFail(user1lib, gameB, 0, "User1 [" + user1gamertag + "]");

            // User2 played gameC
            PostGameResultAndAssertOnFail(user2lib, gameC, 0, "User2 [" + user2gamertag + "]");

            // Both users played gameD
            PostGameResultAndAssertOnFail(user1lib, gameD, 0, "User1 [" + user1gamertag + "]");
            PostGameResultAndAssertOnFail(user2lib, gameD, 10, "User2 [" + user2gamertag + "]");

            // verify the results
            string gamertags = user1gamertag + "," + user2gamertag;
            Gds.Contracts.Games gamesPlayed = testScenarios.GetGamesXml(gamertags, us_locale);

            List<GameInfo> user1gameList = gamesPlayed.UserGamesCollection[0].GameList;
            List<GameInfo> user2gameList = gamesPlayed.UserGamesCollection[1].GameList;

            PrintGameList("User1 [" + user1gamertag + "]", user1gameList);
            PrintGameList("User2 [" + user2gamertag + "]", user2gameList);

            // check sort order
            Assert.AreEqual(gameD.GameId, user1gameList[0].Id, "Game {0} should have been the first game in the list, but wasn't", gameD.Name);
            Assert.AreEqual(gameB.GameId, user1gameList[1].Id, "Game {0} should have been the second game in the list, but wasn't", gameB.Name);
            Assert.AreEqual(gameA.GameId, user1gameList[2].Id, "Game {0} should have been the last game in the list, but wasn't", gameA.Name);

            Assert.AreEqual(gameD.GameId, user2gameList[0].Id, "Game {0} should have been the first game in the list, but wasn't", gameD.Name);
            Assert.AreEqual(gameC.GameId, user2gameList[1].Id, "Game {0} should have been the second game in the list, but wasn't", gameC.Name);
            Assert.AreEqual(gameA.GameId, user2gameList[2].Id, "Game {0} should have been the last game in the list, but wasn't", gameA.Name);

            // verify TotalUniqueGames
            Assert.AreEqual((uint)4, gamesPlayed.TotalUniqueGames, "TotalUniqueGames did not match expected value");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify the sort order is correct for games played by two users - variation 2: 1A,2C,1B,2B,1C,2A")]
        public void GetGames_VerifySortOrder_TwoUsers_Test2()
        {
            TestGame gameA = TestGameUtility.GetTestGame("Hide And Seek");
            TestGame gameB = TestGameUtility.GetTestGame("HexicRush");
            TestGame gameC = TestGameUtility.GetTestGame("SeaLegend");

            Account user1 = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary user1lib = new RewardsTestScenarioLibrary(user1);
            string user1gamertag = user1.XblUser.Gamertag;

            Account user2 = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary user2lib = new RewardsTestScenarioLibrary(user2);
            string user2gamertag = user2.XblUser.Gamertag;

            // privacy settings
            user1lib.SetupUserWithUniformPrivacy(PrivacySettings.Everyone);
            user2lib.SetupUserWithUniformPrivacy(PrivacySettings.Everyone);

            // User1 played A, B, C and user2 played C, B, A; interleaved
            PostGameResultAndAssertOnFail(user1lib, gameA, 0, "User1 [" + user1gamertag + "]");
            PostGameResultAndAssertOnFail(user2lib, gameC, 0, "User2 [" + user2gamertag + "]");
            PostGameResultAndAssertOnFail(user1lib, gameB, 0, "User1 [" + user1gamertag + "]");
            PostGameResultAndAssertOnFail(user2lib, gameB, 0, "User2 [" + user2gamertag + "]");
            PostGameResultAndAssertOnFail(user1lib, gameC, 0, "User1 [" + user1gamertag + "]");
            PostGameResultAndAssertOnFail(user2lib, gameA, 10, "User2 [" + user2gamertag + "]");

            // verify the results
            string gamertags = user1gamertag + "," + user2gamertag;
            Gds.Contracts.Games gamesPlayed = testScenarios.GetGamesXml(gamertags, us_locale);

            List<GameInfo> user1gameList = gamesPlayed.UserGamesCollection[0].GameList;
            List<GameInfo> user2gameList = gamesPlayed.UserGamesCollection[1].GameList;

            PrintGameList("User1 [" + user1gamertag + "]", user1gameList);
            PrintGameList("User2 [" + user2gamertag + "]", user2gameList);

            // check sort order
            Assert.AreEqual(gameA.GameId, user1gameList[0].Id, "Game [{0}] should have been the first game in the list, but wasn't", gameA.Name);
            Assert.AreEqual(gameC.GameId, user1gameList[1].Id, "Game [{0}] should have been the second game in the list, but wasn't", gameC.Name);
            Assert.AreEqual(gameB.GameId, user1gameList[2].Id, "Game [{0}] should have been the last game in the list, but wasn't", gameB.Name);

            Assert.AreEqual(gameA.GameId, user2gameList[0].Id, "Game [{0}] should have been the first game in the list, but wasn't", gameA.Name);
            Assert.AreEqual(gameC.GameId, user2gameList[1].Id, "Game [{0}] should have been the second game in the list, but wasn't", gameC.Name);
            Assert.AreEqual(gameB.GameId, user2gameList[2].Id, "Game [{0}] should have been the last game in the list, but wasn't", gameB.Name);

            // verify TotalUniqueGames
            Assert.AreEqual((uint)3, gamesPlayed.TotalUniqueGames, "TotalUniqueGames did not match expected value");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify the sort order is correct for games played by two users - variation 3: 1A,2C,1B,2A")]
        public void GetGames_VerifySortOrder_TwoUsers_Test3()
        {
            TestGame gameA = TestGameUtility.GetTestGame("Hide And Seek");
            TestGame gameB = TestGameUtility.GetTestGame("HexicRush");
            TestGame gameC = TestGameUtility.GetTestGame("SeaLegend");

            Account user1 = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary user1lib = new RewardsTestScenarioLibrary(user1);
            string user1gamertag = user1.XblUser.Gamertag;

            Account user2 = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary user2lib = new RewardsTestScenarioLibrary(user2);
            string user2gamertag = user2.XblUser.Gamertag;

            // privacy settings
            user1lib.SetupUserWithUniformPrivacy(PrivacySettings.Everyone);
            user2lib.SetupUserWithUniformPrivacy(PrivacySettings.Everyone);

            // User1 played A, B and user2 played C, A; interleaved
            PostGameResultAndAssertOnFail(user1lib, gameA, 0, "User1 [" + user1gamertag + "]");
            PostGameResultAndAssertOnFail(user2lib, gameC, 0, "User2 [" + user2gamertag + "]");
            PostGameResultAndAssertOnFail(user1lib, gameB, 0, "User1 [" + user1gamertag + "]");
            PostGameResultAndAssertOnFail(user2lib, gameA, 10, "User2 [" + user2gamertag + "]");

            // verify the results
            string gamertags = user1gamertag + "," + user2gamertag;
            Gds.Contracts.Games gamesPlayed = testScenarios.GetGamesXml(gamertags, us_locale);

            List<GameInfo> user1gameList = gamesPlayed.UserGamesCollection[0].GameList;
            List<GameInfo> user2gameList = gamesPlayed.UserGamesCollection[1].GameList;

            PrintGameList("User1 [" + user1gamertag + "]", user1gameList);
            PrintGameList("User2 [" + user2gamertag + "]", user2gameList);

            // check sort order
            Assert.AreEqual(gameA.GameId, user1gameList[0].Id, "Game [{0}] should have been the first game in the list, but wasn't", gameA.Name);
            Assert.AreEqual(gameB.GameId, user1gameList[1].Id, "Game [{0}] should have been the second game in the list, but wasn't", gameB.Name);

            Assert.AreEqual(gameA.GameId, user2gameList[0].Id, "Game [{0}] should have been the first game in the list, but wasn't", gameA.Name);
            Assert.AreEqual(gameC.GameId, user2gameList[1].Id, "Game [{0}] should have been the second game in the list, but wasn't", gameC.Name);

            // verify TotalUniqueGames
            Assert.AreEqual((uint)3, gamesPlayed.TotalUniqueGames, "TotalUniqueGames did not match expected value");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify the sort order is correct for games played by two users - variation 4: 1A,2B")]
        public void GetGames_VerifySortOrder_TwoUsers_Test4()
        {
            TestGame gameA = TestGameUtility.GetTestGame("Hide And Seek");
            TestGame gameB = TestGameUtility.GetTestGame("HexicRush");

            Account user1 = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary user1lib = new RewardsTestScenarioLibrary(user1);
            string user1gamertag = user1.XblUser.Gamertag;

            Account user2 = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary user2lib = new RewardsTestScenarioLibrary(user2);
            string user2gamertag = user2.XblUser.Gamertag;

            // privacy settings
            user1lib.SetupUserWithUniformPrivacy(PrivacySettings.Everyone);
            user2lib.SetupUserWithUniformPrivacy(PrivacySettings.Everyone);

            // User1 played A and user2 played B
            PostGameResultAndAssertOnFail(user1lib, gameA, 0, "User1 [" + user1gamertag + "]");
            PostGameResultAndAssertOnFail(user2lib, gameB, 10, "User2 [" + user2gamertag + "]");

            // verify the results
            string gamertags = user1gamertag + "," + user2gamertag;
            Gds.Contracts.Games gamesPlayed = testScenarios.GetGamesXml(gamertags, us_locale);

            List<GameInfo> user1gameList = gamesPlayed.UserGamesCollection[0].GameList;
            List<GameInfo> user2gameList = gamesPlayed.UserGamesCollection[1].GameList;

            PrintGameList("User1 [" + user1gamertag + "]", user1gameList);
            PrintGameList("User2 [" + user2gamertag + "]", user2gameList);

            // check sort order
            Assert.AreEqual(gameA.GameId, user1gameList[0].Id, "Game [{0}] should have been the first game in the list, but wasn't", gameA.Name);
            Assert.AreEqual(gameB.GameId, user2gameList[0].Id, "Game [{0}] should have been the first game in the list, but wasn't", gameB.Name);

            // verify TotalUniqueGames
            Assert.AreEqual((uint)2, gamesPlayed.TotalUniqueGames, "TotalUniqueGames did not match expected value");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify the sort order is correct for games played by two users - variation 5: 1A,1B")]
        public void GetGames_VerifySortOrder_TwoUsers_Test5()
        {
            TestGame gameA = TestGameUtility.GetTestGame("Hide And Seek");
            TestGame gameB = TestGameUtility.GetTestGame("HexicRush");

            Account user1 = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary user1lib = new RewardsTestScenarioLibrary(user1);
            string user1gamertag = user1.XblUser.Gamertag;

            Account user2 = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary user2lib = new RewardsTestScenarioLibrary(user2);
            string user2gamertag = user2.XblUser.Gamertag;

            // privacy settings
            user1lib.SetupUserWithUniformPrivacy(PrivacySettings.Everyone);
            user2lib.SetupUserWithUniformPrivacy(PrivacySettings.Everyone);

            // User1 played A and user1 played B
            PostGameResultAndAssertOnFail(user1lib, gameA, 0, "User1 [" + user1gamertag + "]");
            PostGameResultAndAssertOnFail(user1lib, gameB, 10, "User1 [" + user1gamertag + "]");

            // verify the results
            string gamertags = user1gamertag + "," + user2gamertag;
            Gds.Contracts.Games gamesPlayed = testScenarios.GetGamesXml(gamertags, us_locale);

            List<GameInfo> user1gameList = gamesPlayed.UserGamesCollection[0].GameList;
            List<GameInfo> user2gameList = gamesPlayed.UserGamesCollection[1].GameList;

            PrintGameList("User1 [" + user1gamertag + "]", user1gameList);
            PrintGameList("User2 [" + user2gamertag + "]", user2gameList);

            // check sort order
            Assert.AreEqual(gameB.GameId, user1gameList[0].Id, "Game [{0}] should have been the first game in the list, but wasn't", gameB.Name);
            Assert.AreEqual(gameA.GameId, user1gameList[1].Id, "Game [{0}] should have been the second game in the list, but wasn't", gameA.Name);
            Assert.AreEqual(0, user2gameList.Count, "User2's game list should be empty");

            // verify TotalUniqueGames
            Assert.AreEqual((uint)2, gamesPlayed.TotalUniqueGames, "TotalUniqueGames did not match expected value");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify the sort order is correct for games played by two users - variation 6: 2A,2B")]
        public void GetGames_VerifySortOrder_TwoUsers_Test6()
        {
            TestGame gameA = TestGameUtility.GetTestGame("Hide And Seek");
            TestGame gameB = TestGameUtility.GetTestGame("HexicRush");

            Account user1 = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary user1lib = new RewardsTestScenarioLibrary(user1);
            string user1gamertag = user1.XblUser.Gamertag;

            Account user2 = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary user2lib = new RewardsTestScenarioLibrary(user2);
            string user2gamertag = user2.XblUser.Gamertag;

            // privacy settings
            user1lib.SetupUserWithUniformPrivacy(PrivacySettings.Everyone);
            user2lib.SetupUserWithUniformPrivacy(PrivacySettings.Everyone);

            // User2 played A and user2 played B
            PostGameResultAndAssertOnFail(user2lib, gameA, 0, "User2 [" + user2gamertag + "]");
            PostGameResultAndAssertOnFail(user2lib, gameB, 10, "User2 [" + user2gamertag + "]");

            // verify the results
            string gamertags = user1gamertag + "," + user2gamertag;
            Gds.Contracts.Games gamesPlayed = testScenarios.GetGamesXml(gamertags, us_locale);

            List<GameInfo> user1gameList = gamesPlayed.UserGamesCollection[0].GameList;
            List<GameInfo> user2gameList = gamesPlayed.UserGamesCollection[1].GameList;

            PrintGameList("User1 [" + user1gamertag + "]", user1gameList);
            PrintGameList("User2 [" + user2gamertag + "]", user2gameList);

            // check sort order
            Assert.AreEqual(gameB.GameId, user2gameList[0].Id, "Game [{0}] should have been the first game in the list, but wasn't", gameB.Name);
            Assert.AreEqual(gameA.GameId, user2gameList[1].Id, "Game [{0}] should have been the second game in the list, but wasn't", gameA.Name);
            Assert.AreEqual(0, user1gameList.Count, "User1's game list should be empty");

            // verify TotalUniqueGames
            Assert.AreEqual((uint)2, gamesPlayed.TotalUniqueGames, "TotalUniqueGames did not match expected value");
        }

        #endregion Sort order tests
        #region Gamertag tests

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify gamertag is not optional and calling without it fails gracefully")]
        public void GetGames_Gamertag_VerifyRequired()
        {
            string query = Constants.GetGames_RelativePathAndQuery;
            query = query.Replace("gamertags={gamertags}&", "");
            query = query.Replace("{pageStart}", "0");
            query = query.Replace("{pageCount}", "10");

            Response response = testScenarios.ExecuteCustomQuery("GetGames", query, null, getGamesTestGame);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http status mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify behavior when one gamertag is submitted")]
        public void GetGames_Gamertag_OneGamertag()
        {
            TestUser user = AuthenticationTransport.PrimaryUser;
            Gds.Contracts.Games games = testScenarios.GetGamesXml(user.Gamertag, us_locale);

            Assert.IsNotNull(games, "Games object is null");
            Assert.AreEqual(1, games.UserGamesCollection.Count, "Total games collections is not correct");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify behavior when more two gamertags are submitted")]
        public void GetGames_Gamertag_TwoGamertags()
        {
            TestUser user = AuthenticationTransport.PrimaryUser;
            TestUser friend = AuthenticationTransport.PrimaryUser.Friends[0];

            string gamertags = user.Gamertag + "," + friend.Gamertag;
            Gds.Contracts.Games games = testScenarios.GetGamesXml(gamertags, us_locale);

            Assert.IsNotNull(games, "Games object is null");
            Assert.AreEqual(2, games.UserGamesCollection.Count, "Total games collections is not correct");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify behavior when more than two gamertags are submitted")]
        public void GetGames_Gamertag_ThreeGamertags()
        {
            TestUser user = AuthenticationTransport.PrimaryUser;
            TestUser friend1 = AuthenticationTransport.PrimaryUser.Friends[0];
            TestUser friend2 = AuthenticationTransport.PrimaryUser.Friends[1];
            string gamertags = user.Gamertag + "," + friend1.Gamertag + "," + friend2.Gamertag;

            Response response = testScenarios.GetGames(gamertags, "0", "10", us_locale);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http response mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify success on a non-existent gamertag")]
        public void GetGames_Gamertag_VerifyNonexistentGamertag()
        {
            string gamertag = "fakename545214875210454";

            Response response = testScenarios.GetGames(gamertag, "0", "10", us_locale);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "HttpStatusCode is incorrect");

            Gds.Contracts.Games games = Deserialize(response.Body);
            Assert.AreEqual((uint)0, games.UserGamesCollection[0].TotalGamesPlayed, "TotalGamesPlayed should be 0 for a non-existant gamertag");

        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify success on a non-existent gamertag, real gamertag call")]
        public void GetGames_Gamertag_FakeGamertagRealGamertag()
        {
            TestUser user = AuthenticationTransport.PrimaryUser;
            string gamertags = "fakename545214875210454," + user.Gamertag;

            Response response = testScenarios.GetGames(gamertags, "0", "10", us_locale);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "HttpStatusCode is incorrect");

            Gds.Contracts.Games games = Deserialize(response.Body);
            Assert.AreEqual((uint)0, games.UserGamesCollection[0].TotalGamesPlayed, "TotalGamesPlayed should be 0 for a non-existant gamertag");
            Assert.IsTrue(games.UserGamesCollection[1].TotalGamesPlayed > 0, "TotalGamesPlayed should be more than 0 for gamertag {0}", user.Gamertag);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify success on a real gamertag, non-existent gamertag call")]
        public void GetGames_Gamertag_RealGamertagFakeGamertag()
        {
            TestUser user = AuthenticationTransport.PrimaryUser;
            string gamertags = user.Gamertag + ",fakename545214875210454";

            Response response = testScenarios.GetGames(gamertags, "0", "10", us_locale);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "HttpStatusCode is incorrect");

            Gds.Contracts.Games games = Deserialize(response.Body);
            Assert.IsTrue(games.UserGamesCollection[0].TotalGamesPlayed > 0, "TotalGamesPlayed should be more than 0 for gamertag {0}", user.Gamertag);
            Assert.AreEqual((uint)0, games.UserGamesCollection[1].TotalGamesPlayed, "TotalGamesPlayed should be 0 for a non-existant gamertag");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify success on an empty first gamertag")]
        public void GetGames_Gamertag_EmptyFirstGamertag()
        {
            TestUser user = AuthenticationTransport.PrimaryUser;
            string gamertags = "," + user.Gamertag;

            Response response = testScenarios.GetGames(gamertags, "0", "10", us_locale);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "HttpStatusCode is incorrect");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify success on an empty second gamertag")]
        public void GetGames_Gamertag_EmptySecondGamertag()
        {
            TestUser user = AuthenticationTransport.PrimaryUser;
            string gamertags = user.Gamertag + ",";

            Response response = testScenarios.GetGames(gamertags, "0", "10", us_locale);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "HttpStatusCode is incorrect");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify graceful failure on both gamertags empty")]
        public void GetGames_Gamertag_EmptyGamertags()
        {
            string gamertags = ",";

            Response response = testScenarios.GetGames(gamertags, "0", "10", us_locale);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "HttpStatusCode is incorrect");
        }

        #endregion Gamertag tests
        #region PageStart tests

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify pageStart is optional and defaults to 0")]
        public void GetGames_PageStart_VerifyOptional()
        {
            TestUser user = AuthenticationTransport.PrimaryUser;

            Response response = testScenarios.GetGames(user.Gamertag, null, "10", us_locale);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http response mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify negative pageStart fails gracefully")]
        public void GetGames_PageStart_Negative()
        {
            TestUser user = AuthenticationTransport.PrimaryUser;

            Response response = testScenarios.GetGames(user.Gamertag, "-1", "10", us_locale);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http response mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify pageStart=0 succeeds")]
        public void GetGames_PageStart_Zero()
        {
            TestUser user = AuthenticationTransport.PrimaryUser;

            Response response = testScenarios.GetGames(user.Gamertag, "0", "10", us_locale);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http response mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify invalid pageStart fails gracefully")]
        public void GetGames_PageStart_Invalid()
        {
            TestUser user = AuthenticationTransport.PrimaryUser;

            Response response = testScenarios.GetGames(user.Gamertag, "X", "10", us_locale);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http response mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify pageStart=0 for pageStart succeeds")]
        public void GetGames_PageStart_0()
        {
            TestUser user = AuthenticationTransport.PrimaryUser;

            string pageStart = "0";
            Response response = testScenarios.GetGames(user.Gamertag, pageStart, "10", us_locale);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http response mismatch - bug 7895");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify pageStart=1001 for pageStart fails with 400")]
        public void GetGames_PageStart_Neg1()
        {
            TestUser user = AuthenticationTransport.PrimaryUser;

            string pageStart = "-1";
            Response response = testScenarios.GetGames(user.Gamertag, pageStart, "10", us_locale);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http response mismatch - bug 7895");
            Assert.AreEqual(Constants.LIVEnErrorCode_InvalidArgumentOrBadRequest, testScenarios.GetLIVEnErrorCode(response), "LIVEn Error code incorrect for pageStart<0.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify pageStart=1000 for pageStart succeeds")]
        public void GetGames_PageStart_1000()
        {
            TestUser user = AuthenticationTransport.PrimaryUser;

            string pageStart = "1000";
            Response response = testScenarios.GetGames(user.Gamertag, pageStart, "10", us_locale);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http response mismatch - bug 7895");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify pageStart=1001 for pageStart fails with 400")]
        public void GetGames_PageStart_1001()
        {
            TestUser user = AuthenticationTransport.PrimaryUser;

            string pageStart = "1001";
            Response response = testScenarios.GetGames(user.Gamertag, pageStart, "10", us_locale);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http response mismatch - bug 7895");
            Assert.AreEqual(Constants.LIVEnErrorCode_InvalidArgumentOrBadRequest, testScenarios.GetLIVEnErrorCode(response), "LIVEn Error code incorrect for pageStart>1000.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify behavior when pageStart = 2 and only 1 game has been played")]
        public void GetGames_PageStart2_GamesPlayed1()
        {
            Account user = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(user);
            string gamertag = user.XblUser.Gamertag;

            PostGameResultAndAssertOnFail(lib, getGamesTestGame, 5);

            Gds.Contracts.Games gamesPlayed = lib.GetGamesXml(gamertag, 2, 10, us_locale);
            Assert.AreEqual(0, gamesPlayed.UserGamesCollection[0].GameList.Count, "The number of games in the game list was incorrect");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify behavior when pageCount = 1 and pageStart = 0")]
        public void GetGames_PageStart0_PageCount1()
        {
            TestUser user = AuthenticationTransport.PrimaryUser;
            Gds.Contracts.Games gamesPlayed = testScenarios.GetGamesXml(user.Gamertag, 0, 1, us_locale);
            Assert.AreEqual(1, gamesPlayed.UserGamesCollection[0].GameList.Count, "The number of games in the game list was incorrect");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify behavior when pageCount = 1 and pageStart = 1")]
        public void GetGames_PageStart1_PageCount1()
        {
            TestUser user = AuthenticationTransport.PrimaryUser;
            Gds.Contracts.Games gamesPlayed = testScenarios.GetGamesXml(user.Gamertag, 1, 1, us_locale);
            Assert.AreEqual(1, gamesPlayed.UserGamesCollection[0].GameList.Count, "The number of games in the game list was incorrect");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify behavior when pageCount = X and pageStart = 2")]
        public void GetGames_PageStartX_PageCount2()
        {
            TestGame gameA = TestGameUtility.GetTestGame("HexicRush");
            TestGame gameB = TestGameUtility.GetTestGame("Flowerz");
            TestGame gameC = TestGameUtility.GetTestGame("Reversi");
            TestGame gameD = TestGameUtility.GetTestGame("Backgammon");

            // set up accounts
            Account user1 = AccountTransport.CreateAccount();
            Account user2 = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary user1lib = new RewardsTestScenarioLibrary(user1);
            RewardsTestScenarioLibrary user2lib = new RewardsTestScenarioLibrary(user2);
            user1lib.SetupUserWithUniformPrivacy(PrivacySettings.Everyone);
            user2lib.SetupUserWithUniformPrivacy(PrivacySettings.Everyone);

            // Post game results
            PostGameResultAndAssertOnFail(user1lib, gameA, 0);
            PostGameResultAndAssertOnFail(user2lib, gameA, 0);
            PostGameResultAndAssertOnFail(user1lib, gameB, 0);
            PostGameResultAndAssertOnFail(user2lib, gameB, 0);
            PostGameResultAndAssertOnFail(user2lib, gameC, 0);
            PostGameResultAndAssertOnFail(user2lib, gameD, 10);

            string gamertags = user1.XblUser.Gamertag + "," + user2.XblUser.Gamertag;

            // PageCount=2&PageStart=0
            Gds.Contracts.Games gamesPlayed = user1lib.GetGamesXml(gamertags, 0, 2, us_locale);
            Assert.AreEqual(0, gamesPlayed.UserGamesCollection[0].GameList.Count, "PageCount=2&PageStart=0: user1 should have 0 games");
            Assert.AreEqual(2, gamesPlayed.UserGamesCollection[1].GameList.Count, "PageCount=2&PageStart=0: user2 should have 2 games");
            Assert.AreEqual(gameD.GameId, gamesPlayed.UserGamesCollection[1].GameList[0].Id, "PageCount=2&PageStart=0: Game {0} should have been the first game in user2's list, but wasn't", gameD.Name);
            Assert.AreEqual(gameC.GameId, gamesPlayed.UserGamesCollection[1].GameList[1].Id, "PageCount=2&PageStart=0: Game {0} should have been the second game in user2's list, but wasn't", gameC.Name);

            // PageCount=2&PageStart=1
            gamesPlayed = user1lib.GetGamesXml(gamertags, 1, 2, us_locale);
            Assert.AreEqual(2, gamesPlayed.UserGamesCollection[0].GameList.Count, "PageCount=2&PageStart=1: user1 should have 2 games");
            Assert.AreEqual(2, gamesPlayed.UserGamesCollection[1].GameList.Count, "PageCount=2&PageStart=1: user2 should have 2 games");
            Assert.AreEqual(gameB.GameId, gamesPlayed.UserGamesCollection[0].GameList[0].Id, "PageCount=2&PageStart=1: Game {0} should have been the first game in user1's list, but wasn't", gameB.Name);
            Assert.AreEqual(gameA.GameId, gamesPlayed.UserGamesCollection[0].GameList[1].Id, "PageCount=2&PageStart=1: Game {0} should have been the second game in user1's list, but wasn't", gameA.Name);
            Assert.AreEqual(gameB.GameId, gamesPlayed.UserGamesCollection[1].GameList[0].Id, "PageCount=2&PageStart=1: Game {0} should have been the first game in user2's list, but wasn't", gameB.Name);
            Assert.AreEqual(gameA.GameId, gamesPlayed.UserGamesCollection[1].GameList[1].Id, "PageCount=2&PageStart=1: Game {0} should have been the second game in user2's list, but wasn't", gameA.Name);
            
            // PageCount=2&PageStart=2
            gamesPlayed = user1lib.GetGamesXml(gamertags, 2, 2, us_locale);
            Assert.AreEqual(0, gamesPlayed.UserGamesCollection[0].GameList.Count, "PageCount=2&PageStart=2: user1 should have 0 games");
            Assert.AreEqual(0, gamesPlayed.UserGamesCollection[1].GameList.Count, "PageCount=2&PageStart=2: user2 should have 0 games");
        }

        #endregion PageStart tests
        #region PageCount tests

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify pageCount is optional")]
        public void GetGames_PageCount_VerifyOptional()
        {
            TestUser user = AuthenticationTransport.PrimaryUser;

            Response response = testScenarios.GetGames(user.Gamertag, "0", null, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http response mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify negative pageCount fails gracefully")]
        public void GetGames_PageCount_Negative()
        {
            TestUser user = AuthenticationTransport.PrimaryUser;

            Response response = testScenarios.GetGames(user.Gamertag, "0", "-1", us_locale);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http response mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify pageCount=0 behavior")]
        public void GetGames_PageCount_Zero()
        {
            TestUser user = AuthenticationTransport.PrimaryUser;

            Response response = testScenarios.GetGames(user.Gamertag, "10", "0", us_locale);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http response mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify invalid pageCount fails gracefully")]
        public void GetGames_PageCount_Invalid()
        {
            TestUser user = AuthenticationTransport.PrimaryUser;

            Response response = testScenarios.GetGames(user.Gamertag, "0", "X", us_locale);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http response mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify 100 for pageCount succeeds")]
        public void GetGames_PageCount_1000()
        {
            TestUser user = AuthenticationTransport.PrimaryUser;

            string pageCount = "1000";
            Response response = testScenarios.GetGames(user.Gamertag, "0", pageCount, us_locale);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http response mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify 1001 for page count returns 400")]
        public void GetGames_PageCount_1001()
        {
            TestUser user = AuthenticationTransport.PrimaryUser;

            string pageCount = "1001";
            Response response = testScenarios.GetGames(user.Gamertag, "0", pageCount, us_locale);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http response mismatch");
            Assert.AreEqual(Constants.LIVEnErrorCode_InvalidArgumentOrBadRequest, testScenarios.GetLIVEnErrorCode(response), "LIVEn Error code incorrect for pageCount>1000.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify behavior when pageCount = 2 and more than 2 games have been played")]
        public void GetGames_PageCount2_GamesPlayed3OrMore()
        {
            TestUser user = AuthenticationTransport.PrimaryUser;
            Gds.Contracts.Games gamesPlayed = testScenarios.GetGamesXml(user.Gamertag, 0, 2, us_locale);
            Assert.AreEqual(2, gamesPlayed.UserGamesCollection[0].GameList.Count, "The number of games in the game list was incorrect"); 
        }

        #endregion PageCount tests

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify GetGames fails when authentication is removed")]
        public void GetGames_NoAuthentication()
        {
            TestUser user = AuthenticationTransport.PrimaryUser;
            string fullUri = rewardsTransport.GameDataPartnerService_fullUri + Constants.GetGames_RelativePathAndQuery;
            fullUri = fullUri.Replace("{gamertags}", user.Gamertag);
            fullUri = fullUri.Replace("{pageStart}", "0");
            fullUri = fullUri.Replace("{pageCount}", "10");

            Response response = RewardsTestUtil.ExecuteHttpWebRequestXml("GET", null, fullUri, us_locale, TestGameUtility.LiveAppTitle.PlatformId.ToString(), string.Empty, null);
            Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode, "Http response status code is incorrect");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify locale falls back on en_US when it is an unsupported locale")]
        public void GetGames_Locale_Unsupported()
        {
            Response response = testScenarios.GetGames(AuthenticationTransport.PrimaryUser.Gamertag, "0", "5", Constants.UnsupportedLocale);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http status code mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify 400 is returned when no locale is set")]
        public void GetGames_Locale_None()
        {
            string emptyLocale = string.Empty;
            Response response = testScenarios.GetGames(AuthenticationTransport.PrimaryUser.Gamertag, "0", "5", emptyLocale);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http status code mismatch - bug #8894");
        }

        #region GetGames support functions

        /// <summary>
        /// Posts a game result with default stats and throws an Assert if the POST failed
        /// </summary>
        /// <param name="lib"></param>
        /// <param name="tg">Test game</param>
        /// <param name="waitSeconds">Seconds to wait after posting the gameResult. Sometimes the tests fail when no wait is used. If 
        /// a test consistently fails, consider bumping up the value of this parameter.</param>
        private static void PostGameResultAndAssertOnFail(RewardsTestScenarioLibrary lib, TestGame tg, int waitSeconds)
        {
            Response response = lib.PostGameResultWithDefaultStats(tg, us_locale);
            if (response.StatusCode != HttpStatusCode.Accepted)
                Assert.Inconclusive("PostGameResult failed - test cannot complete");
            RewardsTestUtil.Wait(waitSeconds);
        }

        /// <summary>
        /// Posts a game result with default stats and throws an Assert if the POST failed. Logs the user and game played to the console output for debugging purposes.
        /// </summary>
        /// <param name="lib"></param>
        /// <param name="tg">Test game</param>
        /// <param name="waitSeconds">Seconds to wait after posting the gameResult. Sometimes the tests fail when no wait is used. If 
        /// a test consistently fails, consider bumping up the value of this parameter.</param>
        /// <param name="username">An identifier (username or gamertag) for the user who played the posted game (for logging purposes only).</param>
        private static void PostGameResultAndAssertOnFail(RewardsTestScenarioLibrary lib, TestGame tg, int waitSeconds, string username)
        {
            Console.WriteLine(username + " played " + tg.Name + " at " + DateTime.Now.ToUniversalTime());
            PostGameResultAndAssertOnFail(lib, tg, waitSeconds);
        }

        /// <summary>
        /// Return the GameInfo object for a given gameId from a GameList
        /// </summary>
        /// <param name="gameId">The gameId for the desired game</param>
        /// <param name="games">A list of GameInfo objects</param>
        /// <returns></returns>
        private GameInfo GetGameInfo(uint gameId, List<GameInfo> games)
        {
            foreach (Gds.Contracts.GameInfo gameInfo in games)
            {
                if (gameInfo.Id == gameId)
                    return gameInfo;
            }

            return null;
        }

        /// <summary>
        /// Grants the first unearned achievement and returns the gamerscore for that achievement. Throws an assert on failure to grant achievement
        /// </summary>
        /// <param name="tg">Test game</param>
        /// <param name="lib"></param>
        /// <returns>The gamerscore for the granted achievement</returns>
        private uint GrantAchievement_ReturnGamerscore(TestGame tg, RewardsTestScenarioLibrary lib)
        {
            int gamerscore = lib.GrantAchievement_ReturnGamerscore(tg, us_locale);
            if (gamerscore < 0)
                Assert.Inconclusive("Granting an achievement failed - test case cannot complete");

            return (uint)gamerscore;
        }

        private void PrintGameList(string username, List<GameInfo> gameList)
        {
            Console.WriteLine(username + "'s gamelist:");
            foreach (GameInfo gi in gameList)
            {
                Console.WriteLine("  " + gi.Name + " played at " + gi.LastPlayed.ToUniversalTime());
            }
        }

        private Gds.Contracts.Games Deserialize(string responseBody)
        {
            XmlHelper xhelp = new XmlHelper();
            string strNoNamespace = xhelp.StripNamespaces(responseBody);
            return xhelp.LoadXml<Gds.Contracts.Games>(strNoNamespace);
        }
        #endregion GetGames support functions
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test\Tests\FreeGamertagChange.cs ===
﻿using System.Net;
using Gds.Contracts;
using Leet.UserGameData.DataContracts;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Test.Identity.Functional.ProfileServiceTests.CommonObjects;

namespace Rewards.Test.Tests
{
    [TestClass]
    public class FreeGamertagChange
    {
        private TestGame LiveApp = TestGameUtility.LiveAppTitle;
        private RewardsTestScenarioLibrary testScenarios = new RewardsTestScenarioLibrary();

        private static readonly string us_locale = "en-US";
        private static RewardsTestScenarioLibrary freeGamertagChangeLib = new RewardsTestScenarioLibrary("LL739892eeu3i@xbltest.com", "supersecret"); //bi_user_puid = 2600292641995759
        // Run the Websore Query Tool on the dev01 or test01 xblob, connect to uodb, and use the following:
        // to check the value of the FreeGamertagChange field: select f_free_gamertag_eligible from t_users where bi_user_puid = 2600292641995759
        // to enable FreeGamertagChange: update t_users set f_free_gamertag_eligible = 1 where bi_user_puid = 2600292641995759

        #region FreeGamertagChange Tests

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify if a user is not eligible we fail")]
        public void FreeGamertagChange_UserNotEligible()
        {
            string newRandomGamertag = TestHelper.GetRandomString(10);
            Response response = testScenarios.FreeGamertagChange(newRandomGamertag, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling FreeGamertagChange did not return 400 Bad Request for ineligile user.");
            Assert.AreEqual(Constants.LIVEnErrorCode_UserNotEligibleForFreeGamertagChange, testScenarios.GetLIVEnErrorCode(response), "Incorrect LIVEnErrorCode returned.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify if a user's chosen gamertag is taken they get a 200 and are returned a list of 5 suggestions")]
        public void FreeGamertagChange_GamertagTaken()
        {
            RewardsTestScenarioLibrary lib = freeGamertagChangeLib;
            string[] suggestions = lib.FreeGamertagChange(AuthenticationTransport.PrimaryUser.Gamertag);

            Assert.AreEqual(5, suggestions.Length, "Calling FreeGamertagChange did not return 5 suggestions.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify if a user's chosen gamertag contains invalid characters they get a 400")]
        public void FreeGamertagChange_InvalidChars()
        {
            RewardsTestScenarioLibrary lib = freeGamertagChangeLib;
            Response response = lib.FreeGamertagChange("Inval!dCh@rs", LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling FreeGamertagChange did not return 400 Bad Request for invalid chars in gamertag.");
            Assert.AreEqual(Constants.LIVEnErrorCode_GamertagIsInvalid, testScenarios.GetLIVEnErrorCode(response), "Incorrect LIVEnErrorCode returned.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify if a user's chosen gamertag is too long (16 chars) they get a 400")]
        public void FreeGamertagChange_TooLong()
        {
            RewardsTestScenarioLibrary lib = freeGamertagChangeLib;
            Response response = lib.FreeGamertagChange("ThisIs16Characte", LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling FreeGamertagChange did not return 400 Bad Request for a gamertag that is more than 15 chars.");
            Assert.AreEqual(Constants.LIVEnErrorCode_GamertagIsInvalid, testScenarios.GetLIVEnErrorCode(response), "Incorrect LIVEnErrorCode returned.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify if a user's chosen gamertag cannot start with space")]
        public void FreeGamertagChange_StartWithSpace()
        {
            RewardsTestScenarioLibrary lib = freeGamertagChangeLib;
            Response response = lib.FreeGamertagChange(" " + TestHelper.GetRandomString(10), LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling FreeGamertagChange did not return 400 Bad Request for a gamertag that started with a space.");
            Assert.AreEqual(Constants.LIVEnErrorCode_GamertagIsInvalid, testScenarios.GetLIVEnErrorCode(response), "Incorrect LIVEnErrorCode returned.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify if a user's chosen gamertag can contain a space in the middle")]
        public void FreeGamertagChange_ContainsSpace()
        {
            RewardsTestScenarioLibrary lib = freeGamertagChangeLib;
            string newGamertag = "GT " + TestHelper.GetRandomString(10);
            Response response = lib.FreeGamertagChange(newGamertag, LiveApp.GameId, us_locale, LiveApp.PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling FreeGamertagChange failed with a gamertag with space in middle.");

            ProfileEx profile = lib.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties);
            Assert.AreEqual(newGamertag, profile.ProfileProperties[ProfileProperty.GamerTag], "Gamertag was NOT successfully changed.");
        }


        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify if a user's chosen gamertag cannot start with number")]
        public void FreeGamertagChange_StartWithNumber()
        {
            RewardsTestScenarioLibrary lib = freeGamertagChangeLib;
            Response response = lib.FreeGamertagChange("1" + TestHelper.GetRandomString(10), LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling FreeGamertagChange did not return 400 Bad Request for a gamertag that started with a number.");
            Assert.AreEqual(Constants.LIVEnErrorCode_GamertagIsInvalid, testScenarios.GetLIVEnErrorCode(response), "Incorrect LIVEnErrorCode returned.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify if a user's chosen gamertag is max length the change works properly")]
        public void FreeGamertagChange_MaxLength()
        {
            RewardsTestScenarioLibrary lib = freeGamertagChangeLib;
            string newRandomGamertag = "a" + TestHelper.GetRandomString(14); // 15 characters, starting with a letter
            Response response = lib.FreeGamertagChange(newRandomGamertag, LiveApp.GameId, us_locale, LiveApp.PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling FreeGamertagChange failed with a gamertag length of 15.");

            ProfileEx profile = lib.GetProfilePartnerXml(us_locale, SectionFlags.XboxLiveProperties);
            Assert.AreEqual(newRandomGamertag, profile.ProfileProperties[ProfileProperty.GamerTag], "Gamertag was NOT successfully changed.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify locale falls back on en_US when an unsupported locale is set")]
        public void FreeGamertagChange_Locale_Unsupported()
        {
            RewardsTestScenarioLibrary lib = freeGamertagChangeLib;
            string newRandomGamertag = "GT" + TestHelper.GetRandomString(10);

            Response response = lib.FreeGamertagChange(newRandomGamertag, LiveApp.GameId, Constants.UnsupportedLocale, LiveApp.PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http status code mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify 400 is returned when no locale is set")]
        public void FreeGamertagChange_Locale_None()
        {
            string emptyLocale = string.Empty;
            RewardsTestScenarioLibrary lib = freeGamertagChangeLib;
            string newRandomGamertag = "GT" + TestHelper.GetRandomString(10);

            Response response = lib.FreeGamertagChange(newRandomGamertag, LiveApp.GameId, emptyLocale, LiveApp.PlatformId);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http status code mismatch - bug #8894");
        }

        #endregion

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test\Tests\GetDatablob.cs ===
﻿using System;
using System.Net;
using System.Text;
using Gds.Contracts;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using UserLib;

namespace Rewards.Test.Tests
{
    [TestClass]
    public class GetDatablob
    {
        private static RewardsTestScenarioLibrary testScenarios = new RewardsTestScenarioLibrary();
        private static readonly string BestScoreDatablobString = "Congratulations new high score";
        private static readonly string BestTimeDatablobString = "Congratulations new best time";
        static Guid bestScoreId;
        static Guid bestTimeId;
        static Encoding encoding = Encoding.UTF8;
        private static TestGame bestScoreTestGame = TestGameUtility.BestScoreGame;
        private static TestGame bestTimeTestGame = TestGameUtility.BestTimeGame;
        private static readonly string us_locale = "en-US";

        [ClassInitialize]
        public static void PostDatablobs(TestContext testContext)
        {
            LeaderboardResult bestScoreResult = testScenarios.PostHigherScoreAndRetrieveLeaderboard(bestScoreTestGame, us_locale, BestScoreDatablobString, "Win", 1);
            bestScoreId = new Guid(testScenarios.CheckLeaderboardResult(bestScoreResult, LeaderboardPropertyType.BestScoreDataBlobId));

            LeaderboardResult bestTimeResult = testScenarios.PostHigherTimeAndRetrieveLeaderboard(bestTimeTestGame, us_locale, BestTimeDatablobString, "Win", 1);
            bestTimeId = new Guid(testScenarios.CheckLeaderboardResult(bestTimeResult, LeaderboardPropertyType.BestTimeDataBlobId));
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify the datablob is updated when a new best low time is posted")]
        public void GetDatablob_BestLowTime_Updated()
        {
            string blobtext1 = "New low time!";
            string blobtext2 = "New even lower time!";

            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(true);

            TestGame testGame = TestGameUtility.BestTimeGameReverse;

            GameResult gr = lib.CreateGameResult(testGame, 10, 10, blobtext1, "Win");
            Response response = lib.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);

            gr = lib.CreateGameResult(testGame, 10, 5, blobtext2, "Win");
            response = lib.PostGameResult(gr, us_locale, testGame.PlatformId, testGame.GameId);

            LeaderboardResult bestTimeResult = lib.GetLeaderboardXml(testGame.GameId, testGame.Variant, "BestTime", 1, "LifeTime", 100, us_locale, testGame.PlatformId);
            Guid bestLowTimeId = new Guid(lib.CheckLeaderboardResult(bestTimeResult, LeaderboardPropertyType.BestTimeDataBlobId));

            DatablobResult result = lib.GetDatablobXml(bestLowTimeId.ToString(), us_locale, testGame.PlatformId, testGame.GameId);
            string actualBlob = encoding.GetString(result.Blob);
            Assert.AreEqual(blobtext2, actualBlob, "Blob wasn't updated");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify the service returns the expected result for the best score datablob")]
        public void GetDatablob_BestScore_VerifyReturned()
        {
            DatablobResult result = testScenarios.GetDatablobXml(bestScoreId.ToString(), us_locale, bestScoreTestGame.PlatformId, bestScoreTestGame.GameId);
            string actualBlob = encoding.GetString(result.Blob);

            Assert.AreEqual(BestScoreDatablobString, actualBlob, "Blob string did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify the service returns the expected result for the best time datablob")]
        public void GetDatablob_BestTime_VerifyReturned()
        {
            DatablobResult result = testScenarios.GetDatablobXml(bestTimeId.ToString(), us_locale, bestTimeTestGame.PlatformId, bestTimeTestGame.GameId);
            string actualBlob = encoding.GetString(result.Blob);

            Assert.AreEqual(BestTimeDatablobString, actualBlob, "Blob string did not match");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify the service returns 400 Bad Request when queried for a datablob with a null blobID")]
        public void GetDatablob_NullBlobId()
        {
            Response result = testScenarios.GetDatablobXml(null, us_locale, bestScoreTestGame.PlatformId.ToString(), bestScoreTestGame.GameId.ToString());
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify the service returns 400 Bad Request when queried for a datablob with an empty string blobID")]
        public void GetDatablob_EmptyBlobId()
        {
            Response result = testScenarios.GetDatablobXml(String.Empty, us_locale, bestScoreTestGame.PlatformId.ToString(), bestScoreTestGame.GameId.ToString());
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify the service returns 400 Bad Request when queried for a datablob with an empty Guid blobID")]
        public void GetDatablob_EmptyGuidBlobId()
        {
            Response result = testScenarios.GetDatablobXml(Guid.Empty.ToString(), us_locale, bestScoreTestGame.PlatformId.ToString(), bestScoreTestGame.GameId.ToString());
            Assert.AreEqual(HttpStatusCode.BadRequest, result.StatusCode);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify a random blobID doesn't have a length of 0")]
        public void GetDatablob_RandomBlobId()
        {
            DatablobResult result = testScenarios.GetDatablobXml(Guid.NewGuid().ToString(), us_locale, bestScoreTestGame.PlatformId, bestScoreTestGame.GameId);
            Assert.AreEqual(result.Blob.Length, 0, "Unexpected blob returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify blobID is unchanged when a new best score is submitted")]
        public void GetDatablob_VerifyBlobIdUnchangedForNewBestScore()
        {
            LeaderboardResult bestScoreResult = testScenarios.PostHigherScoreAndRetrieveLeaderboard(bestScoreTestGame, us_locale, BestScoreDatablobString, "Win", 1);
            DatablobResult result = testScenarios.GetDatablobXml(bestScoreId.ToString(), us_locale, bestScoreTestGame.PlatformId, bestScoreTestGame.GameId);
            Assert.AreEqual(bestScoreId, result.DatablobId, "Incorrect Id returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify blobID is unchanged when a new best time is submitted")]
        public void GetDatablob_VerifyBlobIdUnchangedForNewBestTime()
        {
            LeaderboardResult bestTimeResult = testScenarios.PostHigherTimeAndRetrieveLeaderboard(bestTimeTestGame, us_locale, BestTimeDatablobString, "Win", 1);
            DatablobResult result = testScenarios.GetDatablobXml(bestTimeId.ToString(), us_locale, bestTimeTestGame.PlatformId, bestTimeTestGame.GameId);
            Assert.AreEqual(bestTimeId, result.DatablobId, "Incorrect Id returned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify locale falls back on en_US when an unsupported locale is set")]
        public void GetDatablob_Locale_Unsupported()
        {
            Response response = testScenarios.GetDatablobXml(bestScoreId.ToString(), Constants.UnsupportedLocale, bestScoreTestGame.PlatformId.ToString(), bestScoreTestGame.GameId.ToString());
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http status code mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify 400 is returned when no locale is set")]
        public void GetDatablob_Locale_None()
        {
            string emptyLocale = string.Empty;
            Response response = testScenarios.GetDatablobXml(bestScoreId.ToString(), emptyLocale, bestScoreTestGame.PlatformId.ToString(), bestScoreTestGame.GameId.ToString());
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http status code mismatch - bug #8021");
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test\Tests\GetAchievements.cs ===
﻿using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Net;
using System.Xml;
using System.Xml.Linq;
using Gds.Contracts;
using Leet.UserGameData.DataContracts;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using UserLib;

namespace Rewards.Test.Tests
{
    /// <summary>
    /// Summary description for GetAchievements
    /// </summary>
    [TestClass]
    public class GetAchievements
    {
        private RewardsTransport rewardsTransport;
        private RewardsTestScenarioLibrary testScenarios;
        private static TestGame achGame = TestGameUtility.GetFirstGameWithAchievements();
        private string AppID = Guid.Empty.ToString();
        private readonly string us_locale = "en-US";
        
        public GetAchievements()
        {
            rewardsTransport = new RewardsTransport();
            testScenarios = new RewardsTestScenarioLibrary(rewardsTransport);
        }

        #region Acceptance
        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Get achievements using default locale and platform ID")]
        public void GetAchievements_Defaults()
        {
            AchievementsResult results = testScenarios.GetAchievementsXml(achGame.GameId, us_locale, achGame.PlatformId);
            Assert.IsNotNull(results, "Null returned from GetAchievementsXml");
            Assert.IsTrue(results.Achievements.Count > 0, "No achievements were found");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Get achievements using an invalid locale")]
        public void GetAchievements_InvalidLocale()
        {
            Response results = testScenarios.GetAchievementsXml(achGame.GameId.ToString(), "foo", achGame.PlatformId.ToString());
            Assert.AreEqual(HttpStatusCode.OK, results.StatusCode, "Http response status code is not as expected");          
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Count the number of achievements we get for Backgammon")]
        public void GetAchievements_CountAchievements()
        {
            uint BackgammonGameId = 1297287394;
            int expectedAchievementCount = 20;

            AchievementsResult results = testScenarios.GetAchievementsXml(BackgammonGameId, us_locale, achGame.PlatformId);
            Assert.IsNotNull(results, "Null returned from GetAchievementsXml");
            int actualAchievementCount = results.Achievements.Count;
            Assert.AreEqual(expectedAchievementCount, actualAchievementCount, "Wrong number of achievements were found");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify achievement imanges are as expected")]
        public void GetAchievements_VerifySecretAchievementImages()
        {
            VerifyAchievementImages(false);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify achievement imanges are as expected")]
        public void GetAchievements_VerifyNonSecretAchievementImages()
        {
            VerifyAchievementImages(true);
        }

        /// <summary>
        /// Verify unearned and earned achievement images
        /// </summary>
        /// <param name="displayBeforeEarned">false if achievement is secret; true otherwise</param>
        private void VerifyAchievementImages(bool displayBeforeEarned)
        {
            TestGame tg = TestGameUtility.GetTestGame("Reversi"); //this needs to be a game with both secret and non-secret achievements
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(true);

            //check unearned achievement image
            AchievementsResult results = lib.GetAchievementsXml(tg.GameId, us_locale, tg.PlatformId);
            string achievementKey = string.Empty;
            string unearnedAchievementImage = string.Empty;

            // find an achievement
            foreach (Achievement ach in results.Achievements)
            {
                if (ach.DisplayBeforeEarned == displayBeforeEarned)
                {
                    achievementKey = ach.Key;
                    unearnedAchievementImage = ach.PictureUrl;
                    break;
                }
            }

            // console output
            Console.WriteLine("Please check these URLs in a web browser and make sure they are as expected.");
            Console.WriteLine("   Non-secret and locked: user should see grayed out image.");
            Console.WriteLine("   Non-secret and unlokced: user should see coloured image.");
            Console.WriteLine("   Secret and locked: user should see question mark image.");
            Console.WriteLine("   Secret and unlocked: user should see coloured image.");
            string achievementType = string.Empty;
            if (displayBeforeEarned) 
                achievementType = "non-secret";
            else 
                achievementType = "secret";

            Console.WriteLine("This is the URL for a {0} achievement before it's earned: {1}", achievementType, unearnedAchievementImage.Replace(".test.", ".int2."));

            //grant an achievement
            GrantAchievements grantAchievements = lib.CreateAchievements_SingleAchievement(achievementKey, tg.GameId, AppID);
            Response ret = lib.GrantAchievements(grantAchievements, us_locale, tg.PlatformId);
            if (ret.StatusCode != HttpStatusCode.OK)
                Assert.Inconclusive("GrantAchievements failed - test case cannot complete");

            //check earned achievement image
            string earnedAchievementImage = string.Empty;
            results = lib.GetAchievementsXml(tg.GameId, us_locale, tg.PlatformId);
            foreach (Achievement ach in results.Achievements)
            {
                if (ach.Key == achievementKey)
                {
                    earnedAchievementImage = ach.PictureUrl;
                    break;
                }
            }

            Console.WriteLine("This is the URL for a {0} achievement after it's earned: {1}", achievementType, earnedAchievementImage.Replace(".test.", ".int2."));

            if (achievementType == "secret")
            {
                Assert.AreEqual("+lADUFBQ+ojvjA==.jpg", unearnedAchievementImage.Split('/')[6], "Encoded image name did not match for unearned {0} achievement", achievementType);
                Assert.AreEqual("1ICLiGJhbC9CFQRrXVBRF0U5L2FjaC8wLzYAAAAA5+fn+zuRmQ==.jpg", earnedAchievementImage.Split('/')[6], "Encoded image name did not match for earned {0} achievement", achievementType);
            }
            else
            {
                Assert.AreEqual("0Dc8P2NhbC9AFQRrXVBRF0U5L2FjaC8wLzQAAAABUFBQ-ws5vw==.jpg", unearnedAchievementImage.Split('/')[6], "Encoded image name did not match for unearned {0} achievement", achievementType);
                Assert.AreEqual("14CLiGJhbC9AFQRrXVBRF0U5L2FjaC8wLzQAAAAA5+fn+Ppgvw==.jpg", earnedAchievementImage.Split('/')[6], "Encoded image name did not match for earned {0} achievement", achievementType);
            }
        }

        #endregion Acceptance
        #region Feature
        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify that an achievement earned online has the corrrect datetime set")]
        public void GetAchievements_EarnedOnline_VerifyEarnedDateTime()
        {
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(true);
            
            AchievementsResult achievementsUnearned = lib.GetAchievementsXml(achGame.GameId, us_locale, achGame.PlatformId);
            DateTime oldDate = achievementsUnearned.Achievements[0].EarnedDateTime.ToUniversalTime();

            AchievementEarned earned = lib.CreateAchievement(achievementsUnearned.Achievements[0].Key, DateTime.UtcNow, true);
            List<AchievementEarned> achievementsEarned = new List<AchievementEarned>() { earned };

            GrantAchievements toGrant = new GrantAchievements();
            toGrant.Achievements = achievementsEarned;
            toGrant.AppId = Guid.Empty.ToString();
            toGrant.GameId = achGame.GameId;

            lib.GrantAchievements(toGrant, us_locale, achGame.PlatformId);
            AchievementsResult finalAchievements = lib.GetAchievementsXml(achGame.GameId, us_locale, achGame.PlatformId);
            
            Assert.IsTrue(finalAchievements.Achievements.Count > 0, "Achievement was not granted");
            Assert.IsTrue(finalAchievements.Achievements[0].EarnedOnline, "Earned online was not set to true");
            Assert.IsTrue(finalAchievements.Achievements[0].EarnedDateTime.ToUniversalTime().CompareTo(oldDate) > 0, "Incorrect date time returned " + finalAchievements.Achievements[0].EarnedDateTime.ToUniversalTime().CompareTo(oldDate));
            Assert.IsTrue(finalAchievements.Achievements[0].EarnedDateTime.ToUniversalTime().Subtract(earned.EarnedDateTime).Milliseconds < 10, "Incorrect date time returned" + finalAchievements.Achievements[0].EarnedDateTime.ToUniversalTime().CompareTo(earned.EarnedDateTime));
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify that an achievement earned offline switches to online when it has been submitted")]
        public void GetAchievements_EarnedOffline_VerifyEarnedOnlineReturnedFalse()
        {
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(true);

            AchievementsResult achievementsUnearned = lib.GetAchievementsXml(achGame.GameId, us_locale, achGame.PlatformId);
            DateTime oldDate = achievementsUnearned.Achievements[0].EarnedDateTime.ToUniversalTime();

            AchievementEarned earned = lib.CreateAchievement(achievementsUnearned.Achievements[0].Key, DateTime.UtcNow, false);
            List<AchievementEarned> achievementsEarned = new List<AchievementEarned>() { earned };

            GrantAchievements toGrant = new GrantAchievements();
            toGrant.Achievements = achievementsEarned;
            toGrant.AppId = Guid.Empty.ToString();
            toGrant.GameId = achGame.GameId;

            lib.GrantAchievements(toGrant, us_locale, achGame.PlatformId);
            AchievementsResult finalAchievements = lib.GetAchievementsXml(achGame.GameId, us_locale, achGame.PlatformId);

            Assert.IsTrue(finalAchievements.Achievements[0].EarnedOnline, "Earned online should switch to true when submitted achievement was earned offline");
            Assert.AreNotEqual<DateTime>(oldDate, finalAchievements.Achievements[0].EarnedDateTime, "Date time should change for offline achievement");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify the picture URL for an achievement is well-formed")]
        public void GetAchievements_VerifyWellFormedPictureUrlsAreReturned()
        {
            AchievementsResult achievements = testScenarios.GetAchievementsXml(achGame.GameId, us_locale, achGame.PlatformId);
            foreach (var item in achievements.Achievements)
            {
                Assert.IsTrue(Uri.IsWellFormedUriString(item.PictureUrl, UriKind.Absolute), "Incorrect picture URL returned");
            }
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Compare the strings for achievements between the .xlast and the service")]
        public void GetAchievements_VerifyAllStrings()
        {
            // The file should be a valid .xlast file that we want to test against. If you want to change which
            // game we're testing against, please copy the .xlast to the source code, remove the namespace, and rename it GameStrings.xml.
            string xlastFile = "GameStrings.xml";
            string locale = "en-US";
            XmlDocument doc = new XmlDocument();
            doc.Load(xlastFile);
            XElement elements = XElement.Load(xlastFile);

            // Get the titleId
            string titleIdString = doc.SelectSingleNode("/XboxLiveSubmissionProject/GameConfigProject").Attributes["titleId"].InnerText;
            uint titleId = RewardsTestUtil.ConvertHexStringToDecimalUint(titleIdString);

            // Get the achievements from the service
            TestGame gameWithAchievements = TestGameUtility.GetTestGame(titleId);
            AchievementsResult svcResult = testScenarios.GetAchievementsXml(gameWithAchievements.GameId, us_locale, gameWithAchievements.PlatformId);
            Assert.IsNotNull(svcResult, "Null returned from GetAchievementsXml");
            Assert.IsTrue(svcResult.Achievements.Count > 0, "No achievements were found");
            
            // Get the achievements from the .xlast
            IEnumerable<XElement> achievementElements = XElement.Load(xlastFile).DescendantsAndSelf("Achievement");
            foreach (XElement xlastAch in achievementElements)
            {
                string xlastAchId = xlastAch.Attribute("id").Value;
                // Find the index of the achievement with this id
                int svcIndex;
                bool found = false;
                for (svcIndex = 0; svcIndex < svcResult.Achievements.Count; svcIndex++)
                {
                    if (xlastAchId == svcResult.Achievements[svcIndex].Key)
                    {
                        found = true;
                        break;
                    }
                }
                Assert.IsTrue(found, "Achievement key {0} was not returned by the service.", xlastAchId);

                // check the GameId
                Assert.AreEqual(titleId, svcResult.Achievements[svcIndex].GameId, "GameId does not match for achievement key {0}", xlastAchId);

                // check the achievement Name (titleStringId)
                string nameId = xlastAch.Attribute("titleStringId").Value;
                XElement nameElements = elements.Descendants("LocalizedString").First(t => t.Attribute("id").Value.Equals(nameId));
                string xlastName = nameElements.Descendants("Translation").First(t => t.Attribute("locale").Value.Equals(locale)).Value;
                Assert.AreEqual(xlastName, svcResult.Achievements[svcIndex].Name, "Achievement Name does not match for achievement key {0}", xlastAchId);

                // check the Gamerscore (cred)
                string xlastGamerScore = xlastAch.Attribute("cred").Value;
                Assert.AreEqual(Int32.Parse(xlastGamerScore), svcResult.Achievements[svcIndex].Gamerscore, "Gamerscore does not match for achievement key {0}", xlastAchId);

                // check the DisplayBeforeEarned
                bool xlastDisplayBeforeEarned = bool.Parse(xlastAch.Attribute("showUnachieved").Value);
                Assert.AreEqual(xlastDisplayBeforeEarned, svcResult.Achievements[svcIndex].DisplayBeforeEarned, "DisplayBeforeEarned value does not match for achievement key {0}", xlastAchId);

                // check the Description (descriptionStringId)
                string descriptionId = xlastAch.Attribute("descriptionStringId").Value;
                XElement descriptionElements = elements.Descendants("LocalizedString").First(t => t.Attribute("id").Value.Equals(descriptionId));
                string xlastDescription = descriptionElements.Descendants("Translation").First(t => t.Attribute("locale").Value.Equals(locale)).Value;
                Assert.AreEqual(xlastDescription, svcResult.Achievements[svcIndex].Description, "Achievement Description does not match for achievement key {0}", xlastAchId);

                // check the HowToEarn value (unachievedStringId)
                try
                {
                    string howToEarnId = xlastAch.Attribute("unachievedStringId").Value;
                    XElement howToEarnElements = elements.Descendants("LocalizedString").First(t => t.Attribute("id").Value.Equals(howToEarnId));
                    string xlastHowToEarn = howToEarnElements.Descendants("Translation").First(t => t.Attribute("locale").Value.Equals(locale)).Value;
                    Assert.AreEqual(xlastHowToEarn, svcResult.Achievements[svcIndex].HowToEarn, "HowToEarn value does not match for achievement key {0}", xlastAchId);
                }
                catch (System.NullReferenceException)
                {
                    // This string is optional in the .xlast, so no big deal if it's not there
                    // Test for empty string in the achievement object
                    Assert.AreEqual("", svcResult.Achievements[svcIndex].HowToEarn, "HowToEarn value does not match for achievement key {0}", xlastAchId);
                }

                Trace.TraceInformation("Achievement key {0}: all strings matched successfully.", xlastAchId);
            }
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify locale falls back on en_US when an unsupported locale is set")]
        public void GetAchievements_Locale_Unsupported()
        {
            Response response = testScenarios.GetAchievementsXml(achGame.GameId.ToString(), Constants.UnsupportedLocale, achGame.PlatformId.ToString());
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http status code mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify 400 is returned when no locale is set")]
        public void GetAchievements_Locale_None()
        {
            string emptyLocale = string.Empty;
            Response response = testScenarios.GetAchievementsXml(achGame.GameId.ToString(), emptyLocale, achGame.PlatformId.ToString());
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http status code mismatch");
        }

        #endregion Feature
        #region Required element tests

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify that the Description is set for an achievement")]
        public void GetAchievements_VerifyDescription()
        {
            AchievementsResult results = testScenarios.GetAchievementsXml(achGame.GameId, us_locale, achGame.PlatformId);
            Assert.IsNotNull(results, "Null returned from GetAchievementsXml");

            //Pick a random achievement
            Achievement achievement = GetRandomAchievement(results);

            Assert.IsNotNull(achievement.Description, "The achievement Description is null for achievement {0}", achievement.Key);
            Assert.AreNotEqual("", achievement.Description, "The achievement Description is an empty string for achievement {0}", achievement.Key);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify that DisplayBeforeEarned is set for an achievement")]
        public void GetAchievements_VerifyDisplayBeforeEarned()
        {
            AchievementsResult results = testScenarios.GetAchievementsXml(achGame.GameId, us_locale, achGame.PlatformId);
            Assert.IsNotNull(results, "Null returned from GetAchievementsXml");

            //Pick a random achievement
            Achievement achievement = GetRandomAchievement(results);
            Assert.IsNotNull(achievement.DisplayBeforeEarned, "The achievement DisplayBeforeEarned element is null for achievement {0}", achievement.Key);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify that EarnedOnline is set for an achievement")]
        public void GetAchievements_VerifyEarnedOnline()
        {
            AchievementsResult results = testScenarios.GetAchievementsXml(achGame.GameId, us_locale, achGame.PlatformId);
            Assert.IsNotNull(results, "Null returned from GetAchievementsXml");

            //Pick a random achievement
            Achievement achievement = GetRandomAchievement(results);

            Assert.IsNotNull(achievement.EarnedOnline, "The achievement EarnedOnline element is null for achievement {0}", achievement.Key);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify that the Gamerscore is set for an achievement")]
        public void GetAchievements_VerifyGamerscore()
        {
            AchievementsResult results = testScenarios.GetAchievementsXml(achGame.GameId, us_locale, achGame.PlatformId);
            Assert.IsNotNull(results, "Null returned from GetAchievementsXml");

            //Pick a random achievement
            Achievement achievement = GetRandomAchievement(results);
            Assert.IsNotNull(achievement.Gamerscore, "The achievement Gamerscore is null for achievement {0}", achievement.Key);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify that HowToEarn is set for an achievement")]
        public void GetAchievements_VerifyHowToEarn()
        {
            AchievementsResult results = testScenarios.GetAchievementsXml(achGame.GameId, us_locale, achGame.PlatformId);
            Assert.IsNotNull(results, "Null returned from GetAchievementsXml");

            //Pick a random achievement
            Achievement achievement = GetRandomAchievement(results);

            Assert.IsNotNull(achievement.HowToEarn, "The achievement HowToEarn element is null for achievement {0}", achievement.Key);
            Assert.AreNotEqual("", achievement.HowToEarn, "The achievement HowToEarn element is an empty string for achievement {0}", achievement.Key);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify that IsEarned is set for an achievement")]
        public void GetAchievements_VerifyIsEarned()
        {
            AchievementsResult results = testScenarios.GetAchievementsXml(achGame.GameId, us_locale, achGame.PlatformId);
            Assert.IsNotNull(results, "Null returned from GetAchievementsXml");

            //Pick a random achievement
            Achievement achievement = GetRandomAchievement(results);

            Assert.IsNotNull(achievement.IsEarned, "The achievement IsEarned element is null for achievement {0}", achievement.Key);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify that IsEarned is set correctly for an achievement")]
        public void GetAchievements_VerifyIsEarnedSetCorrectly()
        {
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(true);

            GrantAchievements grantAchievements = lib.CreateAchievements_SingleUnearned(achGame, Constants.BACKGAMMON_APPID, us_locale);
            Response ret = lib.GrantAchievements(grantAchievements, us_locale, achGame.PlatformId);
            if (ret.StatusCode != HttpStatusCode.OK)
                Assert.Inconclusive("GrantAchievements failed - test case cannot complete");

            //get achievements
            AchievementsResult results = lib.GetAchievementsXml(achGame.GameId, us_locale, achGame.PlatformId);

            // verify isearned
            Assert.AreEqual(results.Achievements[0].IsEarned, true, "Achievement was not earned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify that Name is set for an achievement")]
        public void GetAchievements_VerifyName()
        {
            AchievementsResult results = testScenarios.GetAchievementsXml(achGame.GameId, us_locale, achGame.PlatformId);
            Assert.IsNotNull(results, "Null returned from GetAchievementsXml");

            //Pick a random achievement
            Achievement achievement = GetRandomAchievement(results);

            Assert.IsNotNull(achievement.Name, "The achievement Name is null for achievement {0}", achievement.Key);
            Assert.AreNotEqual("", achievement.Name, "The achievement Name is an empty string for achievement {0}", achievement.Key);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify that the PictureUrl is set for an achievement")]
        public void GetAchievements_VerifyPictureUrl()
        {
            AchievementsResult results = testScenarios.GetAchievementsXml(achGame.GameId, us_locale, achGame.PlatformId);
            Assert.IsNotNull(results, "Null returned from GetAchievementsXml");

            //Pick a random achievement
            Achievement achievement = GetRandomAchievement(results);

            Assert.IsNotNull(achievement.PictureUrl, "The achievement PictureUrl is null for achievement {0}", achievement.Key);
            Assert.AreNotEqual("", achievement.PictureUrl, "The achievement PictureUrl is an empty string for achievement {0}", achievement.Key);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify gameId is a required variable")]
        public void GetAchievements_Query_NoGameId()
        {
            string query = "/achievements?format=xml";
            Response ret = testScenarios.ExecuteCustomQuery("GetAchievements", query, null, achGame);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "Http response status code is not as expected");
        }

        [TestMethod]
        [TestProperty("BugId", "9829")]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify format is a required variable")]
        public void GetAchievements_Query_NoFormat()
        {
            string query = "/achievements?gameId=" + achGame.GameId.ToString();
            Response ret = testScenarios.ExecuteCustomQuery("GetAchievements", query, null, achGame);
            Assert.AreEqual(HttpStatusCode.NotFound, ret.StatusCode, "Http response status code is not as expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify behavior when no query is sent")]
        public void GetAchievements_Query_NoQuery()
        {
            string query = "/achievements";
            Response ret = testScenarios.ExecuteCustomQuery("GetAchievements", query, null, achGame);
            Assert.AreEqual(HttpStatusCode.NotFound, ret.StatusCode, "Http response status code is not as expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify behavior when gameId is empty")]
        public void GetAchievements_Query_EmptyParam_GameID()
        {
            string query = "/achievements?format=xml&gameId=";
            Response ret = testScenarios.ExecuteCustomQuery("GetAchievements", query, null, achGame);
            Assert.AreEqual(HttpStatusCode.InternalServerError, ret.StatusCode, "Http response status code is not as expected");
        }
        #endregion //Required element tests
        #region New user tests

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Ensure a new user has no achievements")]
        public void GetAchievements_NewUser_NoAchievements()
        {
            //Create a new account
            RewardsTestScenarioLibrary getAchievementScenarios = new RewardsTestScenarioLibrary(true);

            //Get achievements
            AchievementsResult results = getAchievementScenarios.GetAchievementsXml(achGame.GameId, us_locale, achGame.PlatformId);
            Assert.IsNotNull(results, "Null returned from GetAchievementsXml");
            int achievementsEarned = EarnedAchievementsCount(results);
            Assert.AreEqual(0, achievementsEarned, "New user should have 0 achievements earned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Grant a new user one achievement and verify")]
        public void GetAchievements_NewUser_OneAchievements()
        {
            string achievementID = GetRandomAchievementKey(achGame.GameId, us_locale, achGame.PlatformId);

            //Create a new account
            RewardsTestScenarioLibrary getAchievementScenarios = new RewardsTestScenarioLibrary(true);

            //Create an achievement list
            GrantAchievements grantAchievements = getAchievementScenarios.CreateAchievements_SingleAchievement(achievementID, achGame.GameId, AppID);

            //Grant the achievement
            Response ret = getAchievementScenarios.GrantAchievements(grantAchievements, us_locale, achGame.PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "PostGrantAchievements failed");

            //Verify the user has earned exactly 1 achievement
            AchievementsResult results = getAchievementScenarios.GetAchievementsXml(achGame.GameId, us_locale, achGame.PlatformId);
            Assert.AreEqual(1, EarnedAchievementsCount(results));

            //Verify the achievement was granted
            bool achievementGranted = getAchievementScenarios.CheckAchievementForGame(achievementID, achGame.GameId, "en-US", achGame.PlatformId);
            Assert.IsTrue(achievementGranted, "Achievement [{0}] was not granted", achievementID);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Grant a new user some achievements and verify")]
        public void GetAchievements_NewUser_SomeAchievements()
        {
            //Get 3 random achievements with no duplicates
            List<string> achievementIDs = GetRandomAchievementKeyList(3, achGame.GameId, us_locale, achGame.PlatformId);

            //Create a new account
            RewardsTestScenarioLibrary getAchievementScenarios = new RewardsTestScenarioLibrary(true);

            //Create an achievement list
            GrantAchievements grantAchievements = getAchievementScenarios.CreateAchievements_MultipleAchievements(achievementIDs, achGame.GameId, AppID);

            //Grant the achievements
            Response ret = getAchievementScenarios.GrantAchievements(grantAchievements, us_locale, achGame.PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "PostGrantAchievements failed");

            //Verify the user has earned exactly 3 achievements
            AchievementsResult results = getAchievementScenarios.GetAchievementsXml(achGame.GameId, us_locale, achGame.PlatformId);
            Assert.AreEqual(3, EarnedAchievementsCount(results));

            //Verify the correct achievements were granted
            for (int i = 0; i < achievementIDs.Count; i++)
            {
                bool achievementGranted = getAchievementScenarios.CheckAchievementForGame(achievementIDs[i], achGame.GameId, us_locale, achGame.PlatformId);
                Assert.IsTrue(achievementGranted, "Achievement [{0}] was not granted", achievementIDs[i]);
            }
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Grant a new user all achievements and verify")]
        public void GetAchievements_NewUser_AllAchievements()
        {
            //Create a new account
            RewardsTestScenarioLibrary getAchievementScenarios = new RewardsTestScenarioLibrary(true);

            //Create an achievement list
            List<string> achievementIDs = new List<string>();
            AchievementsResult results = testScenarios.GetAchievementsXml(achGame.GameId, us_locale, achGame.PlatformId);
            foreach (Achievement a in results.Achievements)
            {
                achievementIDs.Add(a.Key);
            }
            GrantAchievements grantAchievements = getAchievementScenarios.CreateAchievements_MultipleAchievements(achievementIDs, achGame.GameId, AppID);

            //Grant the achievements
            Response ret = getAchievementScenarios.GrantAchievements(grantAchievements, us_locale, achGame.PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "PostGrantAchievements failed");

            //Verify the achievements were granted
            for (int i = 0; i < achievementIDs.Count; i++)
            {
                bool achievementGranted = getAchievementScenarios.CheckAchievementForGame(achievementIDs[i], achGame.GameId, "en-US", achGame.PlatformId);
                Assert.IsTrue(achievementGranted, "Achievement [{0}] was not granted", achievementIDs[i]);
            }
        }

        #endregion //New user tests
        #region Support functions

        /// <summary>
        /// Count the number of achievemnets earned by the user
        /// </summary>
        /// <param name="result"></param>
        /// <returns></returns>
        private int EarnedAchievementsCount(AchievementsResult result)
        {
            int count = 0;
            foreach (Achievement a in result.Achievements)
            {
                if (a.IsEarned)
                    count++;
            }
            return count;
        }

        /// <summary>
        /// Get a random achievement key for a given game
        /// </summary>
        /// <param name="gameID">Game ID</param>
        /// <returns></returns>
        private string GetRandomAchievementKey(uint gameID, string locale, uint platformId)
        {
            Random rand = new Random();
            AchievementsResult results = testScenarios.GetAchievementsXml(gameID, locale, platformId);
            int randomIndex = rand.Next(0, results.Achievements.Count - 1);

            return results.Achievements[randomIndex].Key;
        }

        /// <summary>
        /// Get a random achievement from a given result set
        /// </summary>
        /// <param name="results">Achievement result set</param>
        /// <returns></returns>
        private Achievement GetRandomAchievement(AchievementsResult results)
        {
            Random rand = new Random();
            int randomIndex = rand.Next(0, results.Achievements.Count - 1);

            return results.Achievements[randomIndex];
        }

        /// <summary>
        /// Get a list of random, non-duplicate achievement keys for a given game
        /// </summary>
        /// <param name="count">The number of achievements to return</param>
        /// <param name="gameID">Game ID</param>
        /// <returns></returns>
        private List<string> GetRandomAchievementKeyList(int count, uint gameID, string locale, uint platformId)
        {
            AchievementsResult results = testScenarios.GetAchievementsXml(gameID, locale, platformId);

            if (results.Achievements.Count < count)
                Assert.Fail("There are only {0} achievements available", results.Achievements.Count);

            Random rand = new Random();
            List<string> keys = new List<string>(count);

            do
            {
                int randomIndex = rand.Next(0, results.Achievements.Count - 1);
                bool found = false;
                foreach (string s in keys)
                {
                    if (results.Achievements[randomIndex].Key == s)
                    {
                        found = true;
                        break;
                    }
                }
                if (!found)
                    keys.Add(results.Achievements[randomIndex].Key);
            } while (keys.Count < count);

            return keys;
        }
        #endregion Support functions
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test\Tests\GetAchievementsPartner.cs ===
﻿using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Net;
using System.Text;
using System.Xml;
using System.Xml.Linq;
using Gds.Contracts;
using Leet.UserGameData.DataContracts;
using Microsoft.TestTools;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using UserLib;

namespace Rewards.Test.Tests
{
    /// <summary>
    /// Summary description for GetAchievementsPartner
    /// </summary>
    [TestClass]
    public class GetAchievementsPartner
    {
        RewardsTestScenarioLibrary testScenarios = new RewardsTestScenarioLibrary();
        TestGame testGameHexicRush = TestGameUtility.GetTestGame("HexicRush");
        TestGame consoleTestGame = TestGameUtility.GetTestGame("Texas Hold 'em");
        private static TestGame testGame = TestGameUtility.GetFirstGameWithAchievements();
        private static TestUser testUser = AuthenticationTransport.PrimaryUser;
        private static string AppID = Guid.Empty.ToString();
        private static readonly string us_locale = "en-US";

        // NOTE ////////////////////////////////////////////////////////////////////////
        //                                                                            //
        // This will run before any tests are run. It will ensure the primary user    //
        // has at least three achievements and his first two friends each have at     //
        // least one achievement.                                                     //
        //                                                                            //
        ////////////////////////////////////////////////////////////////////////////////
        [ClassInitialize()]
        public static void Initialize(TestContext testContext)
        {
            //make sure the primary user and two friends all have at least one achievement
            Initialize(testUser, testGame, 3);
            Initialize(AuthenticationTransport.PrimaryUser.Friends[0], testGame, 1);
            Initialize(AuthenticationTransport.PrimaryUser.Friends[1], testGame, 1);
        }

        private static void Initialize(TestUser user, TestGame tg, int minAchievements)
        {
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(user.Username, user.Password);
            AchievementsResult achievementsEarned = lib.GetEarnedAchievements(tg.GameId, us_locale, tg.PlatformId); 
            int achievementsNeeded = minAchievements - achievementsEarned.Achievements.Count;

            for (int i = 0; i < achievementsNeeded; i++)
            {
                GrantAchievements grantAchievements = lib.CreateAchievements_SingleUnearned(tg.GameId, AppID, us_locale, tg.PlatformId);
                Assert.IsNotNull(grantAchievements, "Test suite initialization failed: No achievements found that we can grant for user [{0}], game [{1}]", user.Gamertag, tg.Name);

                //Grant the achievement
                Response ret = lib.GrantAchievements(grantAchievements, us_locale, tg.PlatformId);
                Assert.AreEqual(HttpStatusCode.OK, ret.StatusCode, "Test suite initialization failed: GrantAchievements failed for user [{0}], game [{1}]", user.Gamertag, tg.Name);
            }
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(1)]
        public void GetAchievementsPartner_VerifyAchievementProperties()
        {
            Achievements results = testScenarios.GetAchievementsPartnerXml(testUser.Gamertag, testGame.GameId, us_locale);

            foreach (var item in results.UserAchievementsCollection)
            {
                foreach (var achievement in item.AchievementList)
                {
                    RewardsTestScenarioLibrary.VerifyAchievementProperties(achievement, false);
                }

                Assert.IsFalse(String.IsNullOrEmpty(item.Gamertag), "Gamertag was empty - bug #4947");
                Assert.IsTrue(item.Gamerscore >= 0, "Gamerscore was not found");
                Assert.IsTrue(item.TotalAchievementsEarned >= 0, "Number of earned achievments was not found");
                Assert.IsTrue(item.TotalPossibleAchievements >= 0, "Number of possible achievments was not found");
                Assert.IsTrue(item.TotalPossibleGamerscore >= 0, "Total possible gamerscore was not found");
            }
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify we can get the achievements of a console game")]
        public void GetAchievementsPartner_ConsoleGame()
        {
            Achievements achievements = testScenarios.GetAchievementsPartnerXml(AuthenticationTransport.PrimaryUser.Gamertag, consoleTestGame.GameId, us_locale);
            Assert.IsNotNull(achievements, "Null achievemnts returned for a console game.");
            Assert.IsTrue(achievements.UserAchievementsCollection.Count > 0, "Zero achievements were returned for the console game.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        public void GetAchievementsPartner_VerifyMaxGamertagListLimit()
        {
            string gamertags = RewardsTestScenarioLibrary.GetDefaultFriendsGamertagsCommaDelimited(4);
            Achievements results = testScenarios.GetAchievementsPartnerXml(gamertags, testGame.GameId, us_locale);

            Assert.IsTrue(results.UserAchievementsCollection.Count == 4, "No achievements were returned for the current user and gamertags");
            Assert.IsTrue(results.UserAchievementsCollection[0].AchievementList.Count > 0, "Achievements could not be found where expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify granted achievement is displayed")]
        public void GetAchievementsPartner_VerifyGrantedAchievementIsDisplayed()
        {
            GrantAchievements ach = testScenarios.CreateAchievements_SingleAchievement("1", testGameHexicRush.GameId, Constants.HEXICRUSH_APPID);
            testScenarios.GrantAchievements(ach, "en-US", 5);

            Achievements achievements = testScenarios.GetAchievementsPartnerXml(testUser.Gamertag, testGame.GameId, us_locale);

            Assert.IsTrue(achievements.UserAchievementsCollection[0].AchievementList[0].IsEarned);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify TotalAchievementsEarned, Gamerscore, TotalPossibleAchievements, TotalPossibleGamerscore are correct")]
        public void GetAchievementsPartner_TotalsEarnedAndPossible_VerifyValues()
        {
            Account newUser = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(newUser);
            string gamertag = newUser.XblUser.Gamertag;

            // grant some achievements
            uint expectedGamerscore = 0;
            expectedGamerscore = GrantAchievement_ReturnGamerscore(testGame, lib);
            expectedGamerscore += GrantAchievement_ReturnGamerscore(testGame, lib);
            expectedGamerscore += GrantAchievement_ReturnGamerscore(testGame, lib);

            //total possible achievements and gamerscore
            uint expectedTotalPossibleAchievements = (uint)lib.GetTotalPossibleAchievementsForGame(testGame, us_locale);
            uint expectedTotalPossibleGamerscore = lib.GetTotalPossibleGamerscoreForGame(testGame, us_locale);

            // verify achievemnts earned
            Achievements achievements = lib.GetAchievementsPartnerXml(gamertag, testGame.GameId, us_locale);
            Assert.AreEqual((uint)3, achievements.UserAchievementsCollection[0].TotalAchievementsEarned, "TotalAchievementsEarned does not match expected value");
            Assert.AreEqual(expectedGamerscore, achievements.UserAchievementsCollection[0].Gamerscore, "Gamerscore does not match expected value");
            Assert.AreEqual(expectedTotalPossibleAchievements, achievements.UserAchievementsCollection[0].TotalPossibleAchievements, "TotalPossibleAchievements does not match expected value");
            Assert.AreEqual(expectedTotalPossibleGamerscore, achievements.UserAchievementsCollection[0].TotalPossibleGamerscore, "TotalPossibleGamerscore does not match expected value");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify TotalAchievementsEarned, Gamerscore, TotalPossibleAchievements, TotalPossibleGamerscore are only for the gameID in the call")]
        public void GetAchievementsPartner_Totals_VerifyForGameOnly()
        {
            Account newUser = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(newUser);
            string gamertag = newUser.XblUser.Gamertag;

            // grant some achievements for our game of interest
            uint expectedGamerscore = 0;
            expectedGamerscore = GrantAchievement_ReturnGamerscore(testGame, lib);
            expectedGamerscore += GrantAchievement_ReturnGamerscore(testGame, lib);
            expectedGamerscore += GrantAchievement_ReturnGamerscore(testGame, lib);

            // grant some achievements for other games
            TestGame otherGame = TestGameUtility.GetTestGame("HexicRush");
            if (testGame.GameId != otherGame.GameId)
            {
                GrantAchievement_ReturnGamerscore(otherGame, lib);
                GrantAchievement_ReturnGamerscore(otherGame, lib);
            }
            else
                Assert.Inconclusive("Please fix this test case-- [TestGame otherGame] should be something other than {0}", testGame.Name);

            //total possible achievements and gamerscore
            uint expectedTotalPossibleAchievements = (uint)lib.GetTotalPossibleAchievementsForGame(testGame, us_locale);
            uint expectedTotalPossibleGamerscore = lib.GetTotalPossibleGamerscoreForGame(testGame, us_locale);

            // verify achievemnts earned
            Achievements achievements = lib.GetAchievementsPartnerXml(gamertag, testGame.GameId, us_locale);
            Assert.AreEqual((uint)3, achievements.UserAchievementsCollection[0].TotalAchievementsEarned, "TotalAchievementsEarned does not match expected value");
            Assert.AreEqual(expectedGamerscore, achievements.UserAchievementsCollection[0].Gamerscore, "Gamerscore does not match expected value");
            Assert.AreEqual(expectedTotalPossibleAchievements, achievements.UserAchievementsCollection[0].TotalPossibleAchievements, "TotalPossibleAchievements does not match expected value");
            Assert.AreEqual(expectedTotalPossibleGamerscore, achievements.UserAchievementsCollection[0].TotalPossibleGamerscore, "TotalPossibleGamerscore does not match expected value");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify datatypes of Achievements object")]
        public void GetAchievementsPartner_VerifyDataTypes()
        {
            bool testPasses = true;
            string message = "The following fields have incorrect type:";

            Achievements achievements = testScenarios.GetAchievementsPartnerXml(testUser.Gamertag, testGame.GameId, us_locale);

            if (achievements.UserAchievementsCollection[0].Gamertag.GetType() != typeof(string))
            {
                testPasses = false;
                message += " Gamertag,";
            }
            if (achievements.UserAchievementsCollection[0].TotalAchievementsEarned.GetType() != typeof(UInt64))
            {
                testPasses = false;
                message += " TotalAchievementsEarned,";
            }
            if (achievements.UserAchievementsCollection[0].TotalPossibleAchievements.GetType() != typeof(UInt64))
            {
                testPasses = false;
                message += " TotalPossibleAchievements,";
            }
            if (achievements.UserAchievementsCollection[0].Gamerscore.GetType() != typeof(UInt64))
            {
                testPasses = false;
                message += " Gamerscore,";
            }
            if (achievements.UserAchievementsCollection[0].TotalPossibleGamerscore.GetType() != typeof(UInt64))
            {
                testPasses = false;
                message += " TotalPossibleGamerscore,";
            }

            if (achievements.UserAchievementsCollection[0].AchievementList[0].GameId.GetType() != typeof(UInt32))
            {
                testPasses = false;
                message += " GameId,";
            }
            if (achievements.UserAchievementsCollection[0].AchievementList[0].Description.GetType() != typeof(string))
            {
                testPasses = false;
                message += " Description,";
            }
            if (achievements.UserAchievementsCollection[0].AchievementList[0].DisplayBeforeEarned.GetType() != typeof(bool))
            {
                testPasses = false;
                message += " DisplayBeforeEarned,";
            }
            if (achievements.UserAchievementsCollection[0].AchievementList[0].EarnedDateTime.GetType() != typeof(DateTime))
            {
                testPasses = false;
                message += " EarnedDateTime,";
            }
            if (achievements.UserAchievementsCollection[0].AchievementList[0].EarnedOnline.GetType() != typeof(bool))
            {
                testPasses = false;
                message += " EarnedOnline,";
            }
            if (achievements.UserAchievementsCollection[0].AchievementList[0].Gamerscore.GetType() != typeof(int))
            {
                testPasses = false;
                message += " Achievement/Gamerscore,";
            }
            if (achievements.UserAchievementsCollection[0].AchievementList[0].HowToEarn.GetType() != typeof(string))
            {
                testPasses = false;
                message += " HowToEarn,";
            }
            if (achievements.UserAchievementsCollection[0].AchievementList[0].IsEarned.GetType() != typeof(bool))
            {
                testPasses = false;
                message += " IsEarned,";
            }
            if (achievements.UserAchievementsCollection[0].AchievementList[0].Key.GetType() != typeof(string))
            {
                testPasses = false;
                message += " Key,";
            }
            if (achievements.UserAchievementsCollection[0].AchievementList[0].Name.GetType() != typeof(string))
            {
                testPasses = false;
                message += " Name,";
            }
            if (achievements.UserAchievementsCollection[0].AchievementList[0].PictureUrl.GetType() != typeof(string))
            {
                testPasses = false;
                message += " PictureUrl,";
            }

            message = message.Remove(message.Length - 1); // remove the last comma
            message += " - bug #6355";
            Assert.IsTrue(testPasses, message);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Count the number of achievements we get for Backgammon")]
        public void GetAchievementsPartner_CountAchievements()
        {
            uint BackgammonGameId = 1297287394;
            int expectedAchievementCount = 20;

            Achievements achievements = testScenarios.GetAchievementsPartnerXml(testUser.Gamertag, BackgammonGameId, us_locale);
            Assert.IsNotNull(achievements, "Null returned from GetAchievementsXml");
            int actualAchievementCount = achievements.UserAchievementsCollection[0].AchievementList.Count;
            Assert.AreEqual(expectedAchievementCount, actualAchievementCount, "Wrong number of achievements were found");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify that an achievement earned online has the corrrect datetime set")]
        public void GetAchievementsPartner_EarnedOnline_VerifyEarnedDateTime()
        {
            Account acct = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(acct);

            AchievementsResult achievementsUnearned = lib.GetAchievementsXml(testGame.GameId, us_locale, testGame.PlatformId);
            DateTime oldDate = achievementsUnearned.Achievements[0].EarnedDateTime.ToUniversalTime();

            AchievementEarned earned = lib.CreateAchievement(achievementsUnearned.Achievements[0].Key, DateTime.UtcNow, true);
            List<AchievementEarned> achievementsEarned = new List<AchievementEarned>() { earned };

            GrantAchievements toGrant = new GrantAchievements();
            toGrant.Achievements = achievementsEarned;
            toGrant.AppId = AppID;
            toGrant.GameId = testGame.GameId;

            lib.GrantAchievements(toGrant, us_locale, testGame.PlatformId);
            Achievements finalAchievements = lib.GetAchievementsPartnerXml(acct.XblUser.Gamertag, testGame.GameId, us_locale);
            List<Achievement> achievementList = finalAchievements.UserAchievementsCollection[0].AchievementList;

            Assert.IsTrue(achievementList.Count > 0, "Achievement was not granted");
            Assert.IsTrue(achievementList[0].EarnedOnline, "Earned online was not set to true");
            Assert.IsTrue(achievementList[0].EarnedDateTime.ToUniversalTime().CompareTo(oldDate) > 0, "Incorrect date time returned: " + achievementList[0].EarnedDateTime.ToUniversalTime());

            TimeSpan timeDifference = achievementList[0].EarnedDateTime.ToUniversalTime().Subtract(earned.EarnedDateTime);
            Assert.IsTrue(timeDifference.TotalMilliseconds < 10, "Incorrect date time returned: " + achievementList[0].EarnedDateTime.ToUniversalTime());
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify that an achievement earned offline switches to online when it has been submitted")]
        public void GetAchievementsPartner_EarnedOffline_VerifyEarnedOnlineReturnedFalse()
        {
            Account acct = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(acct);

            AchievementsResult achievementsUnearned = lib.GetAchievementsXml(testGame.GameId, us_locale, testGame.PlatformId);
            DateTime oldDate = achievementsUnearned.Achievements[0].EarnedDateTime.ToUniversalTime();

            AchievementEarned earned = lib.CreateAchievement(achievementsUnearned.Achievements[0].Key, DateTime.UtcNow, false);
            List<AchievementEarned> achievementsEarned = new List<AchievementEarned>() { earned };

            GrantAchievements toGrant = new GrantAchievements();
            toGrant.Achievements = achievementsEarned;
            toGrant.AppId = AppID;
            toGrant.GameId = testGame.GameId;

            lib.GrantAchievements(toGrant, us_locale, testGame.PlatformId);
            Achievements finalAchievements = lib.GetAchievementsPartnerXml(acct.XblUser.Gamertag, testGame.GameId, us_locale);
            List<Achievement> achievementList = finalAchievements.UserAchievementsCollection[0].AchievementList;
            
            Assert.IsTrue(achievementList[0].EarnedOnline, "Earned online should switch to true when submitted achievement was earned offline");
            Assert.AreNotEqual<DateTime>(oldDate, achievementList[0].EarnedDateTime, "Date time should change for offline achievement");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Compare the strings for achievements between the .xlast and the service")]
        public void GetAchievementsPartner_VerifyAllStrings()
        {
            // The file should be a valid .xlast file that we want to test against. If you want to change which
            // game we're testing against, please copy the .xlast to the source code, remove the namespace, and rename it GameStrings.xml.
            string xlastFile = "GameStrings.xml";
            XmlDocument doc = new XmlDocument();
            doc.Load(xlastFile);
            XElement elements = XElement.Load(xlastFile);

            // Get the titleId
            string titleIdString = doc.SelectSingleNode("/XboxLiveSubmissionProject/GameConfigProject").Attributes["titleId"].InnerText;
            uint titleId = RewardsTestUtil.ConvertHexStringToDecimalUint(titleIdString);

            // Get the achievements from the service
            TestGame gameWithAchievements = TestGameUtility.GetTestGame(titleId);
            Achievements svcResult = testScenarios.GetAchievementsPartnerXml(testUser.Gamertag, gameWithAchievements.GameId, us_locale);
            List<Achievement> svcAchievements = svcResult.UserAchievementsCollection[0].AchievementList;

            Assert.IsNotNull(svcResult, "Null returned from GetAchievementsXml");
            Assert.IsTrue(svcAchievements.Count > 0, "No achievements were found");

            // Get the achievements from the .xlast
            IEnumerable<XElement> achievementElements = XElement.Load(xlastFile).DescendantsAndSelf("Achievement");
            foreach (XElement xlastAch in achievementElements)
            {
                string xlastAchId = xlastAch.Attribute("id").Value;
                // Find the index of the achievement with this id
                int svcIndex;
                bool found = false;
                for (svcIndex = 0; svcIndex < svcAchievements.Count; svcIndex++)
                {
                    if (xlastAchId == svcAchievements[svcIndex].Key)
                    {
                        found = true;
                        break;
                    }
                }
                Assert.IsTrue(found, "Achievement key {0} was not returned by the service.", xlastAchId);

                // check the GameId
                Assert.AreEqual(titleId, svcAchievements[svcIndex].GameId, "GameId does not match for achievement key {0}", xlastAchId);

                // check the achievement Name (titleStringId)
                string nameId = xlastAch.Attribute("titleStringId").Value;
                XElement nameElements = elements.Descendants("LocalizedString").First(t => t.Attribute("id").Value.Equals(nameId));
                string xlastName = nameElements.Descendants("Translation").First(t => t.Attribute("locale").Value.Equals(us_locale)).Value;
                Assert.AreEqual(xlastName, svcAchievements[svcIndex].Name, "Achievement Name does not match for achievement key {0}", xlastAchId);

                // check the Gamerscore (cred)
                string xlastGamerScore = xlastAch.Attribute("cred").Value;
                Assert.AreEqual(Int32.Parse(xlastGamerScore), svcAchievements[svcIndex].Gamerscore, "Gamerscore does not match for achievement key {0}", xlastAchId);

                // check the DisplayBeforeEarned
                bool xlastDisplayBeforeEarned = bool.Parse(xlastAch.Attribute("showUnachieved").Value);
                Assert.AreEqual(xlastDisplayBeforeEarned, svcAchievements[svcIndex].DisplayBeforeEarned, "DisplayBeforeEarned value does not match for achievement key {0}", xlastAchId);

                // check the Description (descriptionStringId)
                string descriptionId = xlastAch.Attribute("descriptionStringId").Value;
                XElement descriptionElements = elements.Descendants("LocalizedString").First(t => t.Attribute("id").Value.Equals(descriptionId));
                string xlastDescription = descriptionElements.Descendants("Translation").First(t => t.Attribute("locale").Value.Equals(us_locale)).Value;
                Assert.AreEqual(xlastDescription, svcAchievements[svcIndex].Description, "Achievement Description does not match for achievement key {0}", xlastAchId);

                // check the HowToEarn value (unachievedStringId)
                try
                {
                    string howToEarnId = xlastAch.Attribute("unachievedStringId").Value;
                    XElement howToEarnElements = elements.Descendants("LocalizedString").First(t => t.Attribute("id").Value.Equals(howToEarnId));
                    string xlastHowToEarn = howToEarnElements.Descendants("Translation").First(t => t.Attribute("locale").Value.Equals(us_locale)).Value;
                    Assert.AreEqual(xlastHowToEarn, svcAchievements[svcIndex].HowToEarn, "HowToEarn value does not match for achievement key {0}", xlastAchId);
                }
                catch (System.NullReferenceException)
                {
                    // This string is optional in the .xlast, so no big deal if it's not there
                    // Test for empty string in the achievement object
                    Assert.AreEqual("", svcAchievements[svcIndex].HowToEarn, "HowToEarn value does not match for achievement key {0}", xlastAchId);
                }

                Trace.TraceInformation("Achievement key {0}: all strings matched successfully.", xlastAchId);
            }
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify that IsEarned is set correctly for an achievement")]
        public void GetAchievementsPartner_VerifyIsEarnedSetCorrectly()
        {
            Account acct = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(acct);
            GrantAchievements grantAchievements = lib.CreateAchievements_SingleAchievement("1", testGameHexicRush.GameId, Constants.HEXICRUSH_APPID);
            Response ret = lib.GrantAchievements(grantAchievements, us_locale, testGameHexicRush.PlatformId);
            if (ret.StatusCode != HttpStatusCode.OK)
                Assert.Inconclusive("GrantAchievements failed - test case cannot complete");

            //get achievements
            Achievements achievements = lib.GetAchievementsPartnerXml(acct.XblUser.Gamertag, testGameHexicRush.GameId, us_locale);

            // verify isearned
            Assert.AreEqual(achievements.UserAchievementsCollection[0].AchievementList[0].IsEarned, true, "Achievement was not earned");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify gameId is not optional and calling without it fails gracefully")]
        public void GetAchievementsPartner_GameID_VerifyRequired()
        {
            string query = Constants.GetAchievementsPartner_RelativePathAndQuery;
            query = query.Replace("{gamertags}", testUser.Gamertag);
            query = query.Replace("gameId={gameId}&", "");

            Response response = testScenarios.ExecuteCustomQuery("GetAchievementsPartner", query, null, TestGameUtility.LiveAppTitle);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http status mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify behavior when gameId is empty")]
        public void GetAchievementsPartner_Query_EmptyParam_GameID()
        {
            string query = "/achievements?gameId=&gamertags=" + testUser.Gamertag;
            Response ret = testScenarios.ExecuteCustomQuery("GetAchievementsPartner", query, null, TestGameUtility.LiveAppTitle);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "Http status mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify behavior when gamertags is empty")]
        public void GetAchievementsPartner_Query_EmptyParam_Gamertags()
        {
            string query = "/achievements?gameId=" + testGame.GameId.ToString() + "&gamertags=";
            Response ret = testScenarios.ExecuteCustomQuery("GetAchievementsPartner", query, null, TestGameUtility.LiveAppTitle);
            Assert.AreEqual(HttpStatusCode.BadRequest, ret.StatusCode, "Http status mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify locale falls back on en_US when an unsupported locale is set")]
        public void GetAchievementsPartner_Locale_Unsupported()
        {
            Response response = testScenarios.GetAchievementsPartner(AuthenticationTransport.PrimaryUser.Gamertag, testGameHexicRush.GameId.ToString(), Constants.UnsupportedLocale);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http status code mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify 400 is returned when no locale is set")]
        public void GetAchievementsPartner_Locale_None()
        {
            string emptyLocale = string.Empty;
            Response response = testScenarios.GetAchievementsPartner(AuthenticationTransport.PrimaryUser.Gamertag, testGameHexicRush.GameId.ToString(), emptyLocale);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http status code mismatch - bug #8894");
        }

        #region New user tests

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Ensure a new user has no achievements or gamerscore and verify the possible totals")]
        public void GetAchievementsPartner_NewUser_AchievementsAndGamerscore()
        {
            Account acct = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(acct);

            uint calculatedTotalPossibleAchievements = (uint)lib.GetTotalPossibleAchievementsForGame(testGame, us_locale);
            uint calculatedTotalPossibleGamerscore = lib.GetTotalPossibleGamerscoreForGame(testGame, us_locale);

            //Get achievements
            Achievements achievements = lib.GetAchievementsPartnerXml(acct.XblUser.Gamertag, testGame.GameId, us_locale);
            Assert.IsNotNull(achievements, "Null returned from GetAchievementsPartnerXml");
            Assert.AreEqual((uint)0, achievements.UserAchievementsCollection[0].TotalAchievementsEarned, "New user should have 0 TotalAchievementsEarned");
            Assert.AreEqual((uint)0, achievements.UserAchievementsCollection[0].Gamerscore, "New user should have 0 Gamerscore");
            Assert.AreEqual(calculatedTotalPossibleAchievements, achievements.UserAchievementsCollection[0].TotalPossibleAchievements, "New user should have {0} TotalPossibleAchievements for game {1}", calculatedTotalPossibleAchievements, testGame.Name);
            Assert.AreEqual(calculatedTotalPossibleGamerscore, achievements.UserAchievementsCollection[0].TotalPossibleGamerscore, "New user should have {0} TotalPossibleGamerscore for game {1}", calculatedTotalPossibleGamerscore, testGame.Name);
        }

        #endregion New user tests
        #region Gamertag tests

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify gamertag is not optional and calling without it fails gracefully")]
        public void GetAchievementsPartner_Gamertag_VerifyRequired()
        {
            string query = Constants.GetAchievementsPartner_RelativePathAndQuery;
            query = query.Replace("&gamertags={gamertags}", "");
            query = query.Replace("{gameId}", testGame.GameId.ToString());

            Response response = testScenarios.ExecuteCustomQuery("GetAchievementsPartner", query, null, TestGameUtility.LiveAppTitle);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http status mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify behavior when one gamertag is submitted")]
        public void GetAchievementsPartner_Gamertag_OneGamertag()
        {
            Achievements achievements = testScenarios.GetAchievementsPartnerXml(testUser.Gamertag, testGame.GameId, us_locale);

            Assert.IsNotNull(achievements, "Achievements object is null");
            Assert.AreEqual(1, achievements.UserAchievementsCollection.Count, "Total achievement collections is not correct");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify behavior when two gamertags are submitted")]
        public void GetAchievementsPartner_Gamertag_TwoGamertags()
        {
            TestUser friend = AuthenticationTransport.PrimaryUser.Friends[0];

            string gamertags = testUser.Gamertag + "," + friend.Gamertag;
            Achievements achievements = testScenarios.GetAchievementsPartnerXml(gamertags, testGame.GameId, us_locale);

            Assert.IsNotNull(achievements, "Achievements object is null");
            Assert.AreEqual(2, achievements.UserAchievementsCollection.Count, "Total achievement collections played is not correct");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify behavior when three gamertags are submitted")]
        public void GetAchievementsPartner_Gamertag_ThreeGamertags()
        {
            TestUser friend1 = AuthenticationTransport.PrimaryUser.Friends[0];
            TestUser friend2 = AuthenticationTransport.PrimaryUser.Friends[1];

            string gamertags = testUser.Gamertag + "," + friend1.Gamertag + "," + friend2.Gamertag;
            Achievements achievements = testScenarios.GetAchievementsPartnerXml(gamertags, testGame.GameId, us_locale);

            Assert.IsNotNull(achievements, "Achievements object is null");
            Assert.AreEqual(3, achievements.UserAchievementsCollection.Count, "Total achievement collections played is not correct");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify behavior when four gamertags are submitted")]
        public void GetAchievementsPartner_Gamertag_FourGamertags()
        {
            StringBuilder gamertags = new StringBuilder();
            gamertags.Append(testUser.Gamertag + ",");
            gamertags.Append(AuthenticationTransport.PrimaryUser.Friends[0].Gamertag + ",");
            gamertags.Append(AuthenticationTransport.PrimaryUser.Friends[1].Gamertag + ",");
            gamertags.Append(AuthenticationTransport.PrimaryUser.Friends[2].Gamertag);

            Achievements achievements = testScenarios.GetAchievementsPartnerXml(gamertags.ToString(), testGame.GameId, us_locale);

            Assert.IsNotNull(achievements, "Achievements object is null");
            Assert.AreEqual(4, achievements.UserAchievementsCollection.Count, "Total achievement collections played is not correct");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify behavior when more than four gamertags are submitted")]
        public void GetAchievementsPartner_Gamertag_FiveGamertags()
        {
            StringBuilder gamertags = new StringBuilder();
            gamertags.Append(testUser.Gamertag + ",");
            gamertags.Append(AuthenticationTransport.PrimaryUser.Friends[0].Gamertag + ",");
            gamertags.Append(AuthenticationTransport.PrimaryUser.Friends[1].Gamertag + ",");
            gamertags.Append(AuthenticationTransport.PrimaryUser.Friends[2].Gamertag + ",");
            gamertags.Append(AuthenticationTransport.PrimaryUser.Friends[3].Gamertag);

            Response response = testScenarios.GetAchievementsPartner(gamertags.ToString(), testGame.GameId.ToString(), us_locale);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http response mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify behavior when one gamertag (not self) is submitted")]
        public void GetAchievementsPartner_Gamertag_OneGamertagNotSelf()
        {
            Account newUser = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary lib = new RewardsTestScenarioLibrary(newUser);

            // set privacy settings
            ProfileEx profile = testScenarios.CreateProfileWithPrivacySettings(PrivacySettings.Everyone, PrivacySettings.Everyone, PrivacySettings.Everyone, PrivacySettings.Everyone, PrivacySettings.Everyone, PrivacySettings.Everyone, PrivacySettings.Everyone);
            Response response = testScenarios.PostProfilePartner(profile, us_locale);
            if (response.StatusCode != HttpStatusCode.OK)
                Assert.Inconclusive("PostProfile failed to update privacy settings - tets case cannot complete");

            Achievements achievements = lib.GetAchievementsPartnerXml(testUser.Gamertag, testGame.GameId, us_locale);

            Assert.IsNotNull(achievements, "Achievements object is null");
            Assert.IsTrue(achievements.UserAchievementsCollection[0].TotalAchievementsEarned > 0, "TotalAchievementsEarned is not as expected");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify success on a non-existent gamertag")]
        public void GetAchievementsPartner_Gamertag_VerifyNonexistentGamertag()
        {
            string gamertag = "fakename5452148";

            Response response = testScenarios.GetAchievementsPartner(gamertag, testGame.GameId.ToString(), us_locale);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "HttpStatusCode is incorrect - bug 6356");

            Achievements achievements = Deserialize(response.Body);
            Assert.AreEqual(0, achievements.UserAchievementsCollection.Count, "TotalAchievementsEarned should be 0 for a non-existant gamertag");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify success on a non-existent gamertag, real gamertag call")]
        public void GetAchievementsPartner_Gamertag_FakeGamertagRealGamertag()
        {
            string gamertags = "fakename545214875210454," + testUser.Gamertag;

            Response response = testScenarios.GetAchievementsPartner(gamertags, testGame.GameId.ToString(), us_locale);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "HttpStatusCode is incorrect - bug 6356");

            Achievements achievements = Deserialize(response.Body);
            Assert.AreEqual(1, achievements.UserAchievementsCollection.Count, "Should not return info for fake gamertag");
            Assert.IsTrue(achievements.UserAchievementsCollection[0].TotalAchievementsEarned > 0, "TotalAchievementsEarned should be more than 0 for gamertag {0}", testUser.Gamertag);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify success on an empty first gamertag")]
        public void GetAchievementsPartner_Gamertag_EmptyFirstGamertag()
        {
            string gamertags = "," + testUser.Gamertag;

            Response response = testScenarios.GetAchievementsPartner(gamertags, testGame.GameId.ToString(), us_locale);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "HttpStatusCode is incorrect");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify success on an empty second gamertag")]
        public void GetAchievementsPartner_Gamertag_EmptySecondGamertag()
        {
            string gamertags = testUser.Gamertag + ",";

            Response response = testScenarios.GetAchievementsPartner(gamertags, testGame.GameId.ToString(), us_locale);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "HttpStatusCode is incorrect");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam","tempests")]
        [Priority(2)]
        [Description("Verify success on both gamertags empty")]
        public void GetAchievementsPartner_Gamertag_EmptyGamertags()
        {
            string gamertags = ",";

            Response response = testScenarios.GetAchievementsPartner(gamertags, testGame.GameId.ToString(), us_locale);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "HttpStatusCode is incorrect");
        }

        #endregion Gamertag tests
        #region GetAchievementsPartner support functions

        /// <summary>
        /// Grants the first unearned achievement and returns the gamerscore for that achievement. Throws an assert on failure to grant achievement
        /// </summary>
        /// <param name="tg">Test game</param>
        /// <param name="lib"></param>
        /// <returns>The gamerscore for the granted achievement</returns>
        private uint GrantAchievement_ReturnGamerscore(TestGame tg, RewardsTestScenarioLibrary lib)
        {
            int gamerscore = lib.GrantAchievement_ReturnGamerscore(tg, us_locale);
            if (gamerscore < 0)
                Assert.Inconclusive("Granting an achievement failed - test case cannot complete");

            return (uint)gamerscore;
        }

        private Achievements Deserialize(string responseBody)
        {
            XmlHelper xhelp = new XmlHelper();
            string strNoNamespace = xhelp.StripNamespaces(responseBody);
            return xhelp.LoadXml<Achievements>(strNoNamespace);
        }
        #endregion GetAchievementsPartner support functions
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Rewards.Test\Tests\FriendsTests.cs ===
﻿using System.Net;
using System.Threading;
using Gds.Contracts;
using Leet.UserGameData.DataContracts;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Test.Identity.Functional.ProfileServiceTests.CommonObjects;
using UserLib;

namespace Rewards.Test.Tests
{
    [TestClass]
    public class FriendsTests
    {
        private readonly string us_locale = "en-US";
        private RewardsTestScenarioLibrary testScenarios = new RewardsTestScenarioLibrary();
        private TestGame LiveApp = TestGameUtility.LiveAppTitle;


        #region Add Friend Tests

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify if the gamertag does not exist we return a 400")]
        public void AddFriend_NonExistantGamertag()
        {
            Response response = testScenarios.AddFriend("g" + TestHelper.GetRandomString(14), LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling AddFriend didn't return a 400 Bad Request when the gamertag does not exist.");
            Assert.AreEqual(Constants.LIVEnErrorCode_GamertagDoesNotExist, testScenarios.GetLIVEnErrorCode(response), "LIVEn Error code incorrect for no gamertag parameter.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify if the gamertag is empty we return a 400")]
        public void AddFriend_EmptyGamertag()
        {
            Response response = testScenarios.AddFriend("", LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling AddFriend didn't return a 400 Bad Request when the gamertag is empty.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify if the gamertag is null the services returns a Bad Request")]
        public void AddFriend_NullGamertag()
        {
            string query = Constants.AddFriend_RelativePathAndQuery;
            query = query.Replace("{gamertag}", "");
            Response response = testScenarios.ExecuteCustomQuery("addfriend", query, null, LiveApp);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling AddFriend didn't return Bad Request when the gamertag is null.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify if the gamertag parameter is not sent the service returrns a Bad Request")]
        public void AddFriend_NoGamertagParameters()
        {
            string query = Constants.AddFriend_RelativePathAndQuery;
            query = query.Replace("gamertag={gamertag}", "");
            Response response = testScenarios.ExecuteCustomQuery("addfriend", query, null, LiveApp);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling AddFriend didn't return Bad Request when the gamertag param not present.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify if a user can only get 1 friend request at a time from a user")]
        public void AddFriend_MultipleRequests()
        {
            Account newFriendAccount = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary newFriend = new RewardsTestScenarioLibrary(newFriendAccount);

            Account newFriendAccount2 = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary newFriend2 = new RewardsTestScenarioLibrary(newFriendAccount2);

            Response response = newFriend.AddFriend(newFriendAccount2.XblUser.Gamertag, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling AddFriend failed.");
           
            uint messageId = 0;
            newFriend2.VerifyMessageExistsPoll("", newFriendAccount.XblUser.Gamertag, out messageId);

            Assert.IsTrue(messageId != 0, "Friend Request did not appear in user's Message Summary list");

            //Send 2nd friend request
            Response response2 = newFriend.AddFriend(newFriendAccount2.XblUser.Gamertag, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling AddFriend failed.");

            newFriend2.VerifyNumberOfFriendRequestFromUser(newFriendAccount.XblUser.Gamertag, 1);
        }


        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify if a user is already friends with the user they send a request to, no request appears in the message box")]
        public void AddFriend_CurrentFriend()
        {
            RewardsTestScenarioLibrary currentFriend = new RewardsTestScenarioLibrary(AuthenticationTransport.PrimaryUser.Friends[0].Username, AuthenticationTransport.PrimaryUser.Friends[0].Password);

            Response response = currentFriend.AddFriend(AuthenticationTransport.PrimaryUser.Gamertag, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Calling AddFriend failed.");

            testScenarios.VerifyNumberOfFriendRequestFromUser(AuthenticationTransport.PrimaryUser.Friends[0].Gamertag, 0);
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify locale falls back on en_US when an unsupported locale is set")]
        public void AddFriend_Locale_Unsupported()
        {
            RewardsTestScenarioLibrary newFriend = new RewardsTestScenarioLibrary(AuthenticationTransport.PrimaryUser.Friends[0].Username, AuthenticationTransport.PrimaryUser.Friends[0].Password);

            Response response = newFriend.AddFriend(AuthenticationTransport.PrimaryUser.Friends[1].Gamertag, LiveApp.GameId, Constants.UnsupportedLocale, LiveApp.PlatformId);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, "Http status code mismatch");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify 400 is returned when no locale is set")]
        public void AddFriend_Locale_None()
        {
            string emptyLocale = string.Empty;
            RewardsTestScenarioLibrary newFriend = new RewardsTestScenarioLibrary(AuthenticationTransport.PrimaryUser.Friends[0].Username, AuthenticationTransport.PrimaryUser.Friends[0].Password);

            Response response = newFriend.AddFriend(AuthenticationTransport.PrimaryUser.Friends[1].Gamertag, LiveApp.GameId, emptyLocale, LiveApp.PlatformId);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Http status code mismatch - bug #8894");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify 400 is returned when no X-PlatformType header is sent")]
        public void AddFriend_XPlatformType_None()
        {
            RewardsTransport rt = new RewardsTransport(AuthenticationTransport.PrimaryUser.Username, AuthenticationTransport.PrimaryUser.Password);
            string query = rt.FriendPartnerService_fullUri + Constants.AddFriend_RelativePathAndQuery;
            query = query.Replace("{gamertag}", AuthenticationTransport.PrimaryUser.Gamertag);

            rt.UpdateStsPartnerTicket(LiveApp.GameId, LiveApp.PlatformId);

            Response response = RewardsTestUtil.ExecuteHttpWebRequestXml("POST", null, query, us_locale, "", string.Empty, rt.CurrentStsTicket);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling AddFriend didn't return Bad Request when no XPlatformType header was sent.");
            Assert.AreEqual(Constants.LIVEnErrorCode_XPlatformTypeInvalidOrMissing, testScenarios.GetLIVEnErrorCode(response), "LIVEn Error code incorrect for no XPlatformType header.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify 400 is returned when the X-PlatformType header is empty")]
        public void AddFriend_XPlatformType_Empty()
        {
            RewardsTransport rt = new RewardsTransport(AuthenticationTransport.PrimaryUser.Username, AuthenticationTransport.PrimaryUser.Password);
            string query = rt.FriendPartnerService_fullUri + Constants.AddFriend_RelativePathAndQuery;
            query = query.Replace("{gamertag}", AuthenticationTransport.PrimaryUser.Gamertag);

            rt.UpdateStsPartnerTicket(LiveApp.GameId, LiveApp.PlatformId);

            Response response = RewardsTestUtil.ExecuteHttpWebRequestXml("POST", null, query, us_locale, " ", string.Empty, rt.CurrentStsTicket);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling AddFriend didn't return Bad Request when empty XPlatformType header was sent.");
            Assert.AreEqual(Constants.LIVEnErrorCode_XPlatformTypeInvalidOrMissing, testScenarios.GetLIVEnErrorCode(response), "LIVEn Error code incorrect for empty XPlatformType header.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify 400 is returned when no X-PartnerAuthentication header is sent")]
        public void AddFriend_XPartnerAuthentication_None()
        {
            RewardsTransport rt = new RewardsTransport(AuthenticationTransport.PrimaryUser.Username, AuthenticationTransport.PrimaryUser.Password);
            string query = rt.FriendPartnerService_fullUri + Constants.AddFriend_RelativePathAndQuery;
            query = query.Replace("{gamertag}", AuthenticationTransport.PrimaryUser.Gamertag);

            rt.UpdateStsPartnerTicket(LiveApp.GameId, LiveApp.PlatformId);

            Response response = RewardsTestUtil.ExecuteHttpWebRequestXml("POST", null, query, us_locale, LiveApp.PlatformId.ToString(), string.Empty, "");

            Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode, "Calling AddFriend didn't return Unauthorized when no XPlatformType header was sent.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(2)]
        [Description("Verify 400 is returned when the X-PartnerAuthentication header is empty")]
        public void AddFriend_XPartnerAuthentication_Empty()
        {
            RewardsTransport rt = new RewardsTransport(AuthenticationTransport.PrimaryUser.Username, AuthenticationTransport.PrimaryUser.Password);
            string query = rt.FriendPartnerService_fullUri + Constants.AddFriend_RelativePathAndQuery;
            query = query.Replace("{gamertag}", AuthenticationTransport.PrimaryUser.Gamertag);

            rt.UpdateStsPartnerTicket(LiveApp.GameId, LiveApp.PlatformId);

            Response response = RewardsTestUtil.ExecuteHttpWebRequestXml("POST", null, query, us_locale, LiveApp.PlatformId.ToString(), string.Empty, " ");

            Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode, "Calling AddFriend didn't return Unauthorized when empty XPlatformType header was sent.");
        }

        #endregion

        #region Accept Friend Tests

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify AcceptFriend returns 200 when the gamertag is already friends with the user")]
        public void AcceptFriend_AlreadyFriends()
        {
            string friendGamertag = AuthenticationTransport.PrimaryUser.Friends[0].Gamertag;
            Response acceptResponse = testScenarios.AcceptFriend(friendGamertag, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.OK, acceptResponse.StatusCode, "Calling AcceptFriend failed with a gamertag that already a friend.");

            //Verify users are not friends
            ProfileEx profile = testScenarios.GetProfilePartnerXml(us_locale, SectionFlags.FriendsList);

            Assert.IsTrue(testScenarios.VerifyFriendState(profile, friendGamertag, FriendState.Friend), "Accepting a friend that is already a friend changed the FriendState of that friend.");

        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify AcceptFriend returns 200 when the gamertag is not friends with the user")]
        public void AcceptFriend_NotAFriend()
        {
            Account newFriendAccount = AccountTransport.CreateAccount();
            RewardsTestScenarioLibrary newFriend = new RewardsTestScenarioLibrary(newFriendAccount);
            testScenarios.SetupUserForMessaging();

            Response acceptResponse = newFriend.AcceptFriend(AuthenticationTransport.PrimaryUser.Gamertag, LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.OK, acceptResponse.StatusCode, "Calling AcceptFriend failed with a gamertag that is not a friend.");

            //Verify users are not friends
            ProfileEx profile = newFriend.GetProfilePartnerXml(us_locale, SectionFlags.FriendsList);

            //loop through all friends and verify the newFriendAccount is NOT present as a Friend 
            foreach (Friend friend in profile.FriendList)
            {
                if (friend.ProfileEx.ProfileProperties[ProfileProperty.GamerTag].ToString().Equals(AuthenticationTransport.PrimaryUser.Gamertag))
                {
                    Assert.Fail("User was found in friends list after removing a friend request");
                }
            }

        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify if the gamertag does not exist we return a 400")]
        public void AcceptFriend_NonExistantGamertag()
        {
            Response response = testScenarios.AcceptFriend("g" + TestHelper.GetRandomString(14), LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling AcceptFriend didn't return a 400 Bad Request when the gamertag does not exist.");
            Assert.AreEqual(Constants.LIVEnErrorCode_GamertagDoesNotExist, testScenarios.GetLIVEnErrorCode(response), "LIVEn Error code incorrect for no gamertag parameter.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify if the gamertag does has invalid characters return a 400")]
        public void AcceptFriend_InvalidGamertag_InvalidCharacters()
        {
            Response response = testScenarios.AcceptFriend("Inval!dCh@rs", LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling AcceptFriend didn't return a 400 Bad Request when the gamertag contains invalid characters.");
            Assert.AreEqual(Constants.LIVEnErrorCode_InvalidArgumentOrBadRequest, testScenarios.GetLIVEnErrorCode(response), "LIVEn Error code incorrect for invalid chars in gamertag parameter.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify if the gamertag is too long return a 400")]
        public void AcceptFriend_InvalidGamertag_TooLong()
        {
            Response response = testScenarios.AcceptFriend("ReallyReallyLongGamertagThatShouldFail", LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling AcceptFriend didn't return a 400 Bad Request when the gamertag is too long.");
            Assert.AreEqual(Constants.LIVEnErrorCode_InvalidArgumentOrBadRequest, testScenarios.GetLIVEnErrorCode(response), "LIVEn Error code incorrect for too long gamertag parameter.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify if the gamertag does has invalid format return a 400")]
        public void AcceptFriend_InvalidGamertag_InvalidFormat()
        {
            Response response = testScenarios.AcceptFriend("4wesome", LiveApp.GameId, us_locale, LiveApp.PlatformId);

            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode, "Calling AcceptFriend didn't return a 400 Bad Request when the gamertag starts with a number.");
            Assert.AreEqual(Constants.LIVEnErrorCode_InvalidArgumentOrBadRequest, testScenarios.GetLIVEnErrorCode(response), "LIVEn Error code incorrect for invalid gamertag  format parameter.");
        }

        [TestMethod]
        [Owner("adamdep")]
        [TestProperty("ScrumTeam", "tempests")]
        [Priority(1)]
        [Description("Verify if the gamertag is empty we return a 400")]
        public void AcceptFriend_EmptyGamertag()
        {
            Response respon